androidx.work.impl.background.gcm.WorkManagerGcmDispatcher
<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher: java.lang.String TAG>
<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher: long AWAIT_TIME_IN_MINUTES>
<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher: long AWAIT_TIME_IN_MILLISECONDS>
<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher: androidx.work.impl.utils.WorkTimer mWorkTimer>
<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher: androidx.work.impl.StartStopTokens mStartStopTokens>
<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher: androidx.work.impl.WorkManagerImpl mWorkManagerImpl>
    public void <init>(androidx.work.impl.WorkManagerImpl, androidx.work.impl.utils.WorkTimer)
    {
        androidx.work.impl.background.gcm.WorkManagerGcmDispatcher r0;
        androidx.work.impl.WorkManagerImpl r1;
        androidx.work.impl.utils.WorkTimer r2;
        androidx.work.impl.StartStopTokens $r3;

        r0 := @this: androidx.work.impl.background.gcm.WorkManagerGcmDispatcher;

        r1 := @parameter0: androidx.work.impl.WorkManagerImpl;

        r2 := @parameter1: androidx.work.impl.utils.WorkTimer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new androidx.work.impl.StartStopTokens;

        specialinvoke $r3.<androidx.work.impl.StartStopTokens: void <init>()>();

        r0.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher: androidx.work.impl.StartStopTokens mStartStopTokens> = $r3;

        r0.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher: androidx.work.impl.WorkManagerImpl mWorkManagerImpl> = r1;

        r0.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher: androidx.work.impl.utils.WorkTimer mWorkTimer> = r2;

        return;
    }

    public void onInitializeTasks()
    {
        androidx.work.impl.background.gcm.WorkManagerGcmDispatcher r0;
        androidx.work.impl.WorkManagerImpl $r1;
        androidx.work.impl.utils.taskexecutor.TaskExecutor $r2;
        androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$1 $r3;

        r0 := @this: androidx.work.impl.background.gcm.WorkManagerGcmDispatcher;

        $r1 = r0.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher: androidx.work.impl.WorkManagerImpl mWorkManagerImpl>;

        $r2 = virtualinvoke $r1.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.utils.taskexecutor.TaskExecutor getWorkTaskExecutor()>();

        $r3 = new androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$1;

        specialinvoke $r3.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$1: void <init>(androidx.work.impl.background.gcm.WorkManagerGcmDispatcher)>(r0);

        interfaceinvoke $r2.<androidx.work.impl.utils.taskexecutor.TaskExecutor: void executeOnTaskThread(java.lang.Runnable)>($r3);

        return;
    }

    public int onRunTask(com.google.android.gms.gcm.TaskParams)
    {
        androidx.work.impl.background.gcm.WorkManagerGcmDispatcher r0;
        com.google.android.gms.gcm.TaskParams r1;
        java.lang.String r2, r9, $r13, $r16, $r18, $r42, $r45, $r48, $r51, $r53, $r56, $r59, $r62, $r65, $r69, $r72;
        android.os.Bundle r3;
        int i0, $i1, $i2, $i3, $i4, $i5, i6;
        androidx.work.impl.model.WorkGenerationalId r4, $r19;
        androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecExecutionListener r5, $r20;
        androidx.work.impl.StartStopToken r6;
        androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecTimeLimitExceededListener r7, $r23;
        androidx.work.impl.Processor r8;
        android.os.PowerManager$WakeLock r10;
        androidx.work.Logger $r11, $r17, $r40, $r46, $r52, $r54, $r60, $r67;
        java.lang.StringBuilder $r12, $r14, $r15, $r26, $r27, $r28, $r29, $r41, $r43, $r44, $r47, $r49, $r50, $r55, $r57, $r58, $r61, $r63, $r64, $r68, $r70, $r71;
        boolean $z0, $z2;
        androidx.work.impl.StartStopTokens $r21, $r22;
        androidx.work.impl.WorkManagerImpl $r24, $r25, $r30, $r32, $r37;
        android.content.Context $r31;
        androidx.work.impl.utils.WorkTimer $r33, $r36, $r73, $r75;
        java.util.concurrent.CountDownLatch $r34;
        java.util.concurrent.TimeUnit $r35;
        androidx.work.impl.model.WorkSpecDao $r38;
        int[] $r39;
        java.lang.Throwable $r66, $r74, r76, r77;
        androidx.work.impl.WorkDatabase r78;
        androidx.work.impl.model.WorkSpec r79;
        androidx.work.WorkInfo$State $r80, r81;

        r0 := @this: androidx.work.impl.background.gcm.WorkManagerGcmDispatcher;

        r1 := @parameter0: com.google.android.gms.gcm.TaskParams;

        $r11 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r13 = <androidx.work.impl.background.gcm.WorkManagerGcmDispatcher: java.lang.String TAG>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Handling task ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r13, $r16);

        r2 = virtualinvoke r1.<com.google.android.gms.gcm.TaskParams: java.lang.String getTag()>();

        if r2 == null goto label01;

        $z0 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label02;

     label01:
        $r17 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r18 = <androidx.work.impl.background.gcm.WorkManagerGcmDispatcher: java.lang.String TAG>;

        virtualinvoke $r17.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r18, "Bad request. No workSpecId.");

        return 2;

     label02:
        r3 = virtualinvoke r1.<com.google.android.gms.gcm.TaskParams: android.os.Bundle getExtras()>();

        if r3 == null goto label03;

        $i5 = virtualinvoke r3.<android.os.Bundle: int getInt(java.lang.String,int)>("androidx.work.impl.background.gcm.GENERATION", 0);

        goto label04;

     label03:
        $i5 = 0;

     label04:
        i0 = $i5;

        $r19 = new androidx.work.impl.model.WorkGenerationalId;

        specialinvoke $r19.<androidx.work.impl.model.WorkGenerationalId: void <init>(java.lang.String,int)>(r2, i0);

        r4 = $r19;

        $r20 = new androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecExecutionListener;

        $r21 = r0.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher: androidx.work.impl.StartStopTokens mStartStopTokens>;

        specialinvoke $r20.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecExecutionListener: void <init>(androidx.work.impl.model.WorkGenerationalId,androidx.work.impl.StartStopTokens)>(r4, $r21);

        r5 = $r20;

        $r22 = r0.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher: androidx.work.impl.StartStopTokens mStartStopTokens>;

        r6 = virtualinvoke $r22.<androidx.work.impl.StartStopTokens: androidx.work.impl.StartStopToken tokenFor(androidx.work.impl.model.WorkGenerationalId)>(r4);

        $r23 = new androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecTimeLimitExceededListener;

        $r24 = r0.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher: androidx.work.impl.WorkManagerImpl mWorkManagerImpl>;

        specialinvoke $r23.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecTimeLimitExceededListener: void <init>(androidx.work.impl.WorkManagerImpl,androidx.work.impl.StartStopToken)>($r24, r6);

        r7 = $r23;

        $r25 = r0.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher: androidx.work.impl.WorkManagerImpl mWorkManagerImpl>;

        r8 = virtualinvoke $r25.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.Processor getProcessor()>();

        virtualinvoke r8.<androidx.work.impl.Processor: void addExecutionListener(androidx.work.impl.ExecutionListener)>(r5);

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WorkGcm-onRunTask (");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        r9 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        $r30 = r0.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher: androidx.work.impl.WorkManagerImpl mWorkManagerImpl>;

        $r31 = virtualinvoke $r30.<androidx.work.impl.WorkManagerImpl: android.content.Context getApplicationContext()>();

        r10 = staticinvoke <androidx.work.impl.utils.WakeLocks: android.os.PowerManager$WakeLock newWakeLock(android.content.Context,java.lang.String)>($r31, r9);

        $r32 = r0.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher: androidx.work.impl.WorkManagerImpl mWorkManagerImpl>;

        virtualinvoke $r32.<androidx.work.impl.WorkManagerImpl: void startWork(androidx.work.impl.StartStopToken)>(r6);

        $r33 = r0.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher: androidx.work.impl.utils.WorkTimer mWorkTimer>;

        virtualinvoke $r33.<androidx.work.impl.utils.WorkTimer: void startTimer(androidx.work.impl.model.WorkGenerationalId,long,androidx.work.impl.utils.WorkTimer$TimeLimitExceededListener)>(r4, 600000L, r7);

     label05:
        virtualinvoke r10.<android.os.PowerManager$WakeLock: void acquire()>();

        $r34 = virtualinvoke r5.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecExecutionListener: java.util.concurrent.CountDownLatch getLatch()>();

        $r35 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        virtualinvoke $r34.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(10L, $r35);

     label06:
        virtualinvoke r8.<androidx.work.impl.Processor: void removeExecutionListener(androidx.work.impl.ExecutionListener)>(r5);

        $r36 = r0.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher: androidx.work.impl.utils.WorkTimer mWorkTimer>;

        virtualinvoke $r36.<androidx.work.impl.utils.WorkTimer: void stopTimer(androidx.work.impl.model.WorkGenerationalId)>(r4);

        virtualinvoke r10.<android.os.PowerManager$WakeLock: void release()>();

        goto label11;

     label07:
        $r66 := @caughtexception;

        r76 = $r66;

        $r67 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r69 = <androidx.work.impl.background.gcm.WorkManagerGcmDispatcher: java.lang.String TAG>;

        $r68 = new java.lang.StringBuilder;

        specialinvoke $r68.<java.lang.StringBuilder: void <init>()>();

        $r70 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Rescheduling WorkSpec");

        $r71 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r67.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r69, $r72);

        i6 = specialinvoke r0.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher: int reschedule(java.lang.String)>(r2);

     label08:
        virtualinvoke r8.<androidx.work.impl.Processor: void removeExecutionListener(androidx.work.impl.ExecutionListener)>(r5);

        $r73 = r0.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher: androidx.work.impl.utils.WorkTimer mWorkTimer>;

        virtualinvoke $r73.<androidx.work.impl.utils.WorkTimer: void stopTimer(androidx.work.impl.model.WorkGenerationalId)>(r4);

        virtualinvoke r10.<android.os.PowerManager$WakeLock: void release()>();

        return i6;

     label09:
        $r74 := @caughtexception;

        r77 = $r74;

     label10:
        virtualinvoke r8.<androidx.work.impl.Processor: void removeExecutionListener(androidx.work.impl.ExecutionListener)>(r5);

        $r75 = r0.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher: androidx.work.impl.utils.WorkTimer mWorkTimer>;

        virtualinvoke $r75.<androidx.work.impl.utils.WorkTimer: void stopTimer(androidx.work.impl.model.WorkGenerationalId)>(r4);

        virtualinvoke r10.<android.os.PowerManager$WakeLock: void release()>();

        throw r77;

     label11:
        $z2 = virtualinvoke r5.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecExecutionListener: boolean needsReschedule()>();

        if $z2 == 0 goto label12;

        $r60 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r62 = <androidx.work.impl.background.gcm.WorkManagerGcmDispatcher: java.lang.String TAG>;

        $r61 = new java.lang.StringBuilder;

        specialinvoke $r61.<java.lang.StringBuilder: void <init>()>();

        $r63 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Rescheduling WorkSpec");

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r60.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r62, $r65);

        $i4 = specialinvoke r0.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher: int reschedule(java.lang.String)>(r2);

        return $i4;

     label12:
        $r37 = r0.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher: androidx.work.impl.WorkManagerImpl mWorkManagerImpl>;

        r78 = virtualinvoke $r37.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.WorkDatabase getWorkDatabase()>();

        $r38 = virtualinvoke r78.<androidx.work.impl.WorkDatabase: androidx.work.impl.model.WorkSpecDao workSpecDao()>();

        r79 = interfaceinvoke $r38.<androidx.work.impl.model.WorkSpecDao: androidx.work.impl.model.WorkSpec getWorkSpec(java.lang.String)>(r2);

        if r79 == null goto label13;

        $r80 = r79.<androidx.work.impl.model.WorkSpec: androidx.work.WorkInfo$State state>;

        goto label14;

     label13:
        $r80 = null;

     label14:
        r81 = $r80;

        if r81 != null goto label15;

        $r54 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r56 = <androidx.work.impl.background.gcm.WorkManagerGcmDispatcher: java.lang.String TAG>;

        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        $r57 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WorkSpec %s does not exist");

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r54.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r56, $r59);

        return 2;

     label15:
        $r39 = <androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$3: int[] $SwitchMap$androidx$work$WorkInfo$State>;

        $i1 = virtualinvoke r81.<androidx.work.WorkInfo$State: int ordinal()>();

        $i2 = $r39[$i1];

        tableswitch($i2)
        {
            case 1: goto label16;
            case 2: goto label16;
            case 3: goto label17;
            default: goto label18;
        };

     label16:
        $r46 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r48 = <androidx.work.impl.background.gcm.WorkManagerGcmDispatcher: java.lang.String TAG>;

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        $r49 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Returning RESULT_SUCCESS for WorkSpec ");

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r46.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r48, $r51);

        return 0;

     label17:
        $r40 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r42 = <androidx.work.impl.background.gcm.WorkManagerGcmDispatcher: java.lang.String TAG>;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Returning RESULT_FAILURE for WorkSpec ");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r40.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r42, $r45);

        return 2;

     label18:
        $r52 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r53 = <androidx.work.impl.background.gcm.WorkManagerGcmDispatcher: java.lang.String TAG>;

        virtualinvoke $r52.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r53, "Rescheduling eligible work.");

        $i3 = specialinvoke r0.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher: int reschedule(java.lang.String)>(r2);

        return $i3;

        catch java.lang.InterruptedException from label05 to label06 with label07;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private int reschedule(java.lang.String)
    {
        androidx.work.impl.background.gcm.WorkManagerGcmDispatcher r0;
        java.lang.String r1, $r7, $r10;
        androidx.work.impl.WorkDatabase r2;
        androidx.work.impl.WorkManagerImpl $r3;
        androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$2 $r4;
        androidx.work.Logger $r5;
        java.lang.StringBuilder $r6, $r8, $r9;

        r0 := @this: androidx.work.impl.background.gcm.WorkManagerGcmDispatcher;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher: androidx.work.impl.WorkManagerImpl mWorkManagerImpl>;

        r2 = virtualinvoke $r3.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.WorkDatabase getWorkDatabase()>();

        $r4 = new androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$2;

        specialinvoke $r4.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$2: void <init>(androidx.work.impl.background.gcm.WorkManagerGcmDispatcher,androidx.work.impl.WorkDatabase,java.lang.String)>(r0, r2, r1);

        virtualinvoke r2.<androidx.work.impl.WorkDatabase: void runInTransaction(java.lang.Runnable)>($r4);

        $r5 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r7 = <androidx.work.impl.background.gcm.WorkManagerGcmDispatcher: java.lang.String TAG>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Returning RESULT_SUCCESS for WorkSpec ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r7, $r10);

        return 0;
    }

    static void <clinit>()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <androidx.work.Logger: java.lang.String tagWithPrefix(java.lang.String)>("WrkMgrGcmDispatcher");

        <androidx.work.impl.background.gcm.WorkManagerGcmDispatcher: java.lang.String TAG> = $r0;

        return;
    }

androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$1
<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$1: androidx.work.impl.background.gcm.WorkManagerGcmDispatcher this$0>
    void <init>(androidx.work.impl.background.gcm.WorkManagerGcmDispatcher)
    {
        androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$1 r0;
        androidx.work.impl.background.gcm.WorkManagerGcmDispatcher r1;

        r0 := @this: androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$1;

        r1 := @parameter0: androidx.work.impl.background.gcm.WorkManagerGcmDispatcher;

        r0.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$1: androidx.work.impl.background.gcm.WorkManagerGcmDispatcher this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$1 r0;
        androidx.work.Logger $r1;
        java.lang.String $r2;
        androidx.work.impl.background.gcm.WorkManagerGcmDispatcher $r3;
        androidx.work.impl.WorkManagerImpl $r4;

        r0 := @this: androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$1;

        $r1 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r2 = <androidx.work.impl.background.gcm.WorkManagerGcmDispatcher: java.lang.String TAG>;

        virtualinvoke $r1.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r2, "onInitializeTasks(): Rescheduling work");

        $r3 = r0.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$1: androidx.work.impl.background.gcm.WorkManagerGcmDispatcher this$0>;

        $r4 = $r3.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher: androidx.work.impl.WorkManagerImpl mWorkManagerImpl>;

        virtualinvoke $r4.<androidx.work.impl.WorkManagerImpl: void rescheduleEligibleWork()>();

        return;
    }

androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$2
<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$2: androidx.work.impl.WorkDatabase val$workDatabase>
<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$2: java.lang.String val$workSpecId>
<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$2: androidx.work.impl.background.gcm.WorkManagerGcmDispatcher this$0>
    void <init>(androidx.work.impl.background.gcm.WorkManagerGcmDispatcher, androidx.work.impl.WorkDatabase, java.lang.String)
    {
        androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$2 r0;
        androidx.work.impl.background.gcm.WorkManagerGcmDispatcher r1;
        androidx.work.impl.WorkDatabase r2;
        java.lang.String r3;

        r0 := @this: androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$2;

        r1 := @parameter0: androidx.work.impl.background.gcm.WorkManagerGcmDispatcher;

        r2 := @parameter1: androidx.work.impl.WorkDatabase;

        r3 := @parameter2: java.lang.String;

        r0.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$2: androidx.work.impl.background.gcm.WorkManagerGcmDispatcher this$0> = r1;

        r0.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$2: androidx.work.impl.WorkDatabase val$workDatabase> = r2;

        r0.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$2: java.lang.String val$workSpecId> = r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$2 r0;
        androidx.work.impl.WorkDatabase $r1, $r9;
        androidx.work.impl.model.WorkSpecDao $r2;
        java.lang.String $r3;
        androidx.work.impl.background.gcm.WorkManagerGcmDispatcher $r4, $r7, $r10;
        androidx.work.impl.WorkManagerImpl $r5, $r8, $r11;
        androidx.work.Configuration $r6;
        java.util.List $r12;

        r0 := @this: androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$2;

        $r1 = r0.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$2: androidx.work.impl.WorkDatabase val$workDatabase>;

        $r2 = virtualinvoke $r1.<androidx.work.impl.WorkDatabase: androidx.work.impl.model.WorkSpecDao workSpecDao()>();

        $r3 = r0.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$2: java.lang.String val$workSpecId>;

        interfaceinvoke $r2.<androidx.work.impl.model.WorkSpecDao: int markWorkSpecScheduled(java.lang.String,long)>($r3, -1L);

        $r4 = r0.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$2: androidx.work.impl.background.gcm.WorkManagerGcmDispatcher this$0>;

        $r5 = $r4.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher: androidx.work.impl.WorkManagerImpl mWorkManagerImpl>;

        $r6 = virtualinvoke $r5.<androidx.work.impl.WorkManagerImpl: androidx.work.Configuration getConfiguration()>();

        $r7 = r0.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$2: androidx.work.impl.background.gcm.WorkManagerGcmDispatcher this$0>;

        $r8 = $r7.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher: androidx.work.impl.WorkManagerImpl mWorkManagerImpl>;

        $r9 = virtualinvoke $r8.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.WorkDatabase getWorkDatabase()>();

        $r10 = r0.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$2: androidx.work.impl.background.gcm.WorkManagerGcmDispatcher this$0>;

        $r11 = $r10.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher: androidx.work.impl.WorkManagerImpl mWorkManagerImpl>;

        $r12 = virtualinvoke $r11.<androidx.work.impl.WorkManagerImpl: java.util.List getSchedulers()>();

        staticinvoke <androidx.work.impl.Schedulers: void schedule(androidx.work.Configuration,androidx.work.impl.WorkDatabase,java.util.List)>($r6, $r9, $r12);

        return;
    }

androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$3
<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$3: int[] $SwitchMap$androidx$work$WorkInfo$State>
    static void <clinit>()
    {
        androidx.work.WorkInfo$State[] $r0;
        int $i0, $i1, $i2, $i3;
        int[] $r1, $r3, $r5, $r7;
        androidx.work.WorkInfo$State $r2, $r4, $r6;
        java.lang.Throwable $r8, $r9, $r10, r11, r12, r13;

        $r0 = staticinvoke <androidx.work.WorkInfo$State: androidx.work.WorkInfo$State[] values()>();

        $i0 = lengthof $r0;

        $r1 = newarray (int)[$i0];

        <androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$3: int[] $SwitchMap$androidx$work$WorkInfo$State> = $r1;

     label01:
        $r3 = <androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$3: int[] $SwitchMap$androidx$work$WorkInfo$State>;

        $r2 = <androidx.work.WorkInfo$State: androidx.work.WorkInfo$State SUCCEEDED>;

        $i1 = virtualinvoke $r2.<androidx.work.WorkInfo$State: int ordinal()>();

        $r3[$i1] = 1;

     label02:
        goto label04;

     label03:
        $r9 := @caughtexception;

        r11 = $r9;

     label04:
        $r5 = <androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$3: int[] $SwitchMap$androidx$work$WorkInfo$State>;

        $r4 = <androidx.work.WorkInfo$State: androidx.work.WorkInfo$State CANCELLED>;

        $i2 = virtualinvoke $r4.<androidx.work.WorkInfo$State: int ordinal()>();

        $r5[$i2] = 2;

     label05:
        goto label07;

     label06:
        $r10 := @caughtexception;

        r12 = $r10;

     label07:
        $r7 = <androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$3: int[] $SwitchMap$androidx$work$WorkInfo$State>;

        $r6 = <androidx.work.WorkInfo$State: androidx.work.WorkInfo$State FAILED>;

        $i3 = virtualinvoke $r6.<androidx.work.WorkInfo$State: int ordinal()>();

        $r7[$i3] = 3;

     label08:
        goto label10;

     label09:
        $r8 := @caughtexception;

        r13 = $r8;

     label10:
        return;

        catch java.lang.NoSuchFieldError from label01 to label02 with label03;
        catch java.lang.NoSuchFieldError from label04 to label05 with label06;
        catch java.lang.NoSuchFieldError from label07 to label08 with label09;
    }

androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecExecutionListener
<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecExecutionListener: java.lang.String TAG>
<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecExecutionListener: androidx.work.impl.model.WorkGenerationalId mGenerationalId>
<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecExecutionListener: java.util.concurrent.CountDownLatch mLatch>
<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecExecutionListener: boolean mNeedsReschedule>
<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecExecutionListener: androidx.work.impl.StartStopTokens mStartStopTokens>
    void <init>(androidx.work.impl.model.WorkGenerationalId, androidx.work.impl.StartStopTokens)
    {
        androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecExecutionListener r0;
        androidx.work.impl.model.WorkGenerationalId r1;
        androidx.work.impl.StartStopTokens r2;
        java.util.concurrent.CountDownLatch $r3;

        r0 := @this: androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecExecutionListener;

        r1 := @parameter0: androidx.work.impl.model.WorkGenerationalId;

        r2 := @parameter1: androidx.work.impl.StartStopTokens;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecExecutionListener: androidx.work.impl.model.WorkGenerationalId mGenerationalId> = r1;

        r0.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecExecutionListener: androidx.work.impl.StartStopTokens mStartStopTokens> = r2;

        $r3 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r3.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r0.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecExecutionListener: java.util.concurrent.CountDownLatch mLatch> = $r3;

        r0.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecExecutionListener: boolean mNeedsReschedule> = 0;

        return;
    }

    boolean needsReschedule()
    {
        androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecExecutionListener r0;
        boolean $z0;

        r0 := @this: androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecExecutionListener;

        $z0 = r0.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecExecutionListener: boolean mNeedsReschedule>;

        return $z0;
    }

    java.util.concurrent.CountDownLatch getLatch()
    {
        androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecExecutionListener r0;
        java.util.concurrent.CountDownLatch $r1;

        r0 := @this: androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecExecutionListener;

        $r1 = r0.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecExecutionListener: java.util.concurrent.CountDownLatch mLatch>;

        return $r1;
    }

    public void onExecuted(androidx.work.impl.model.WorkGenerationalId, boolean)
    {
        androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecExecutionListener r0;
        androidx.work.impl.model.WorkGenerationalId r1, $r2, $r12;
        boolean z0, $z1;
        androidx.work.impl.StartStopTokens $r3;
        java.util.concurrent.CountDownLatch $r5;
        androidx.work.Logger $r6;
        java.lang.StringBuilder $r7, $r9, $r10, $r11, $r13;
        java.lang.String $r8, $r14;

        r0 := @this: androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecExecutionListener;

        r1 := @parameter0: androidx.work.impl.model.WorkGenerationalId;

        z0 := @parameter1: boolean;

        $r2 = r0.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecExecutionListener: androidx.work.impl.model.WorkGenerationalId mGenerationalId>;

        $z1 = virtualinvoke $r2.<androidx.work.impl.model.WorkGenerationalId: boolean equals(java.lang.Object)>(r1);

        if $z1 != 0 goto label1;

        $r6 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r8 = <androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecExecutionListener: java.lang.String TAG>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Notified for ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", but was looking for ");

        $r12 = r0.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecExecutionListener: androidx.work.impl.model.WorkGenerationalId mGenerationalId>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<androidx.work.Logger: void warning(java.lang.String,java.lang.String)>($r8, $r14);

        goto label2;

     label1:
        $r3 = r0.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecExecutionListener: androidx.work.impl.StartStopTokens mStartStopTokens>;

        virtualinvoke $r3.<androidx.work.impl.StartStopTokens: androidx.work.impl.StartStopToken remove(androidx.work.impl.model.WorkGenerationalId)>(r1);

        r0.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecExecutionListener: boolean mNeedsReschedule> = z0;

        $r5 = r0.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecExecutionListener: java.util.concurrent.CountDownLatch mLatch>;

        virtualinvoke $r5.<java.util.concurrent.CountDownLatch: void countDown()>();

     label2:
        return;
    }

    static void <clinit>()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <androidx.work.Logger: java.lang.String tagWithPrefix(java.lang.String)>("WorkSpecExecutionListener");

        <androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecExecutionListener: java.lang.String TAG> = $r0;

        return;
    }

androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecTimeLimitExceededListener
<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecTimeLimitExceededListener: java.lang.String TAG>
<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecTimeLimitExceededListener: androidx.work.impl.WorkManagerImpl mWorkManager>
<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecTimeLimitExceededListener: androidx.work.impl.StartStopToken mStartStopToken>
    void <init>(androidx.work.impl.WorkManagerImpl, androidx.work.impl.StartStopToken)
    {
        androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecTimeLimitExceededListener r0;
        androidx.work.impl.WorkManagerImpl r1;
        androidx.work.impl.StartStopToken r2;

        r0 := @this: androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecTimeLimitExceededListener;

        r1 := @parameter0: androidx.work.impl.WorkManagerImpl;

        r2 := @parameter1: androidx.work.impl.StartStopToken;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecTimeLimitExceededListener: androidx.work.impl.WorkManagerImpl mWorkManager> = r1;

        r0.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecTimeLimitExceededListener: androidx.work.impl.StartStopToken mStartStopToken> = r2;

        return;
    }

    public void onTimeLimitExceeded(androidx.work.impl.model.WorkGenerationalId)
    {
        androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecTimeLimitExceededListener r0;
        androidx.work.impl.model.WorkGenerationalId r1;
        androidx.work.Logger $r2;
        java.lang.StringBuilder $r3, $r5, $r6;
        java.lang.String $r4, $r7;
        androidx.work.impl.StartStopToken $r8;
        androidx.work.impl.WorkManagerImpl $r9;

        r0 := @this: androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecTimeLimitExceededListener;

        r1 := @parameter0: androidx.work.impl.model.WorkGenerationalId;

        $r2 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r4 = <androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecTimeLimitExceededListener: java.lang.String TAG>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WorkSpec time limit exceeded ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r4, $r7);

        $r9 = r0.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecTimeLimitExceededListener: androidx.work.impl.WorkManagerImpl mWorkManager>;

        $r8 = r0.<androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecTimeLimitExceededListener: androidx.work.impl.StartStopToken mStartStopToken>;

        virtualinvoke $r9.<androidx.work.impl.WorkManagerImpl: void stopWork(androidx.work.impl.StartStopToken)>($r8);

        return;
    }

    static void <clinit>()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <androidx.work.Logger: java.lang.String tagWithPrefix(java.lang.String)>("WrkTimeLimitExceededLstnr");

        <androidx.work.impl.background.gcm.WorkManagerGcmDispatcher$WorkSpecTimeLimitExceededListener: java.lang.String TAG> = $r0;

        return;
    }

