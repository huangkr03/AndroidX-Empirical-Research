kotlin.collections.EmptyIterator
<kotlin.collections.EmptyIterator: kotlin.collections.EmptyIterator INSTANCE>
    static void <clinit>()
    {
        kotlin.collections.EmptyIterator $r0;

        $r0 = new kotlin.collections.EmptyIterator;

        specialinvoke $r0.<kotlin.collections.EmptyIterator: void <init>()>();

        <kotlin.collections.EmptyIterator: kotlin.collections.EmptyIterator INSTANCE> = $r0;

        return;
    }

    private void <init>()
    {
        kotlin.collections.EmptyIterator $r0;

        $r0 := @this: kotlin.collections.EmptyIterator;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public volatile void add(java.lang.Object)
    {
        kotlin.collections.EmptyIterator $r0;
        java.lang.Object $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: kotlin.collections.EmptyIterator;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public void add(java.lang.Void)
    {
        kotlin.collections.EmptyIterator $r0;
        java.lang.Void $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: kotlin.collections.EmptyIterator;

        $r1 := @parameter0: java.lang.Void;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean hasNext()
    {
        kotlin.collections.EmptyIterator $r0;

        $r0 := @this: kotlin.collections.EmptyIterator;

        return 0;
    }

    public boolean hasPrevious()
    {
        kotlin.collections.EmptyIterator $r0;

        $r0 := @this: kotlin.collections.EmptyIterator;

        return 0;
    }

    public volatile java.lang.Object next()
    {
        kotlin.collections.EmptyIterator $r0;
        java.lang.Void $r1;

        $r0 := @this: kotlin.collections.EmptyIterator;

        $r1 = virtualinvoke $r0.<kotlin.collections.EmptyIterator: java.lang.Void next()>();

        return $r1;
    }

    public java.lang.Void next()
    {
        kotlin.collections.EmptyIterator $r0;
        java.util.NoSuchElementException $r1;

        $r0 := @this: kotlin.collections.EmptyIterator;

        $r1 = new java.util.NoSuchElementException;

        specialinvoke $r1.<java.util.NoSuchElementException: void <init>()>();

        throw $r1;
    }

    public int nextIndex()
    {
        kotlin.collections.EmptyIterator $r0;

        $r0 := @this: kotlin.collections.EmptyIterator;

        return 0;
    }

    public volatile java.lang.Object previous()
    {
        kotlin.collections.EmptyIterator $r0;
        java.lang.Void $r1;

        $r0 := @this: kotlin.collections.EmptyIterator;

        $r1 = virtualinvoke $r0.<kotlin.collections.EmptyIterator: java.lang.Void previous()>();

        return $r1;
    }

    public java.lang.Void previous()
    {
        kotlin.collections.EmptyIterator $r0;
        java.util.NoSuchElementException $r1;

        $r0 := @this: kotlin.collections.EmptyIterator;

        $r1 = new java.util.NoSuchElementException;

        specialinvoke $r1.<java.util.NoSuchElementException: void <init>()>();

        throw $r1;
    }

    public int previousIndex()
    {
        kotlin.collections.EmptyIterator $r0;

        $r0 := @this: kotlin.collections.EmptyIterator;

        return -1;
    }

    public void remove()
    {
        kotlin.collections.EmptyIterator $r0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: kotlin.collections.EmptyIterator;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r1;
    }

    public volatile void set(java.lang.Object)
    {
        kotlin.collections.EmptyIterator $r0;
        java.lang.Object $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: kotlin.collections.EmptyIterator;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public void set(java.lang.Void)
    {
        kotlin.collections.EmptyIterator $r0;
        java.lang.Void $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: kotlin.collections.EmptyIterator;

        $r1 := @parameter0: java.lang.Void;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

