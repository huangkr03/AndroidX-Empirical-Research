io.grpc.internal.AtomicBackoff
<io.grpc.internal.AtomicBackoff: java.util.logging.Logger log>
<io.grpc.internal.AtomicBackoff: java.lang.String name>
<io.grpc.internal.AtomicBackoff: java.util.concurrent.atomic.AtomicLong value>
    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        $r0 = class "Lio/grpc/internal/AtomicBackoff;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <io.grpc.internal.AtomicBackoff: java.util.logging.Logger log> = $r2;

        return;
    }

    public void <init>(java.lang.String, long)
    {
        io.grpc.internal.AtomicBackoff $r0;
        java.lang.String $r1;
        long $l0;
        java.util.concurrent.atomic.AtomicLong $r2;
        byte $b1;
        boolean $z0;

        $r0 := @this: io.grpc.internal.AtomicBackoff;

        $r1 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        $r0.<io.grpc.internal.AtomicBackoff: java.util.concurrent.atomic.AtomicLong value> = $r2;

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "value must be positive");

        $r0.<io.grpc.internal.AtomicBackoff: java.lang.String name> = $r1;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: void set(long)>($l0);

        return;
    }

    static java.util.concurrent.atomic.AtomicLong access$100(io.grpc.internal.AtomicBackoff)
    {
        io.grpc.internal.AtomicBackoff $r0;
        java.util.concurrent.atomic.AtomicLong r1;

        $r0 := @parameter0: io.grpc.internal.AtomicBackoff;

        r1 = $r0.<io.grpc.internal.AtomicBackoff: java.util.concurrent.atomic.AtomicLong value>;

        return r1;
    }

    static java.lang.String access$200(io.grpc.internal.AtomicBackoff)
    {
        io.grpc.internal.AtomicBackoff $r0;
        java.lang.String r1;

        $r0 := @parameter0: io.grpc.internal.AtomicBackoff;

        r1 = $r0.<io.grpc.internal.AtomicBackoff: java.lang.String name>;

        return r1;
    }

    static java.util.logging.Logger access$300()
    {
        java.util.logging.Logger r0;

        r0 = <io.grpc.internal.AtomicBackoff: java.util.logging.Logger log>;

        return r0;
    }

    public io.grpc.internal.AtomicBackoff$State getState()
    {
        io.grpc.internal.AtomicBackoff $r0;
        io.grpc.internal.AtomicBackoff$State $r1;
        long $l0;
        java.util.concurrent.atomic.AtomicLong $r2;

        $r0 := @this: io.grpc.internal.AtomicBackoff;

        $r1 = new io.grpc.internal.AtomicBackoff$State;

        $r2 = $r0.<io.grpc.internal.AtomicBackoff: java.util.concurrent.atomic.AtomicLong value>;

        $l0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: long get()>();

        specialinvoke $r1.<io.grpc.internal.AtomicBackoff$State: void <init>(io.grpc.internal.AtomicBackoff,long,io.grpc.internal.AtomicBackoff$1)>($r0, $l0, null);

        return $r1;
    }

io.grpc.internal.AtomicBackoff$1
io.grpc.internal.AtomicBackoff$State
<io.grpc.internal.AtomicBackoff$State: boolean $assertionsDisabled>
<io.grpc.internal.AtomicBackoff$State: long savedValue>
<io.grpc.internal.AtomicBackoff$State: io.grpc.internal.AtomicBackoff this$0>
    static void <clinit>()
    {
        <io.grpc.internal.AtomicBackoff$State: boolean $assertionsDisabled> = 1;

        return;
    }

    private void <init>(io.grpc.internal.AtomicBackoff, long)
    {
        io.grpc.internal.AtomicBackoff$State $r0;
        io.grpc.internal.AtomicBackoff $r1;
        long $l0;

        $r0 := @this: io.grpc.internal.AtomicBackoff$State;

        $r1 := @parameter0: io.grpc.internal.AtomicBackoff;

        $l0 := @parameter1: long;

        $r0.<io.grpc.internal.AtomicBackoff$State: io.grpc.internal.AtomicBackoff this$0> = $r1;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<io.grpc.internal.AtomicBackoff$State: long savedValue> = $l0;

        return;
    }

    void <init>(io.grpc.internal.AtomicBackoff, long, io.grpc.internal.AtomicBackoff$1)
    {
        io.grpc.internal.AtomicBackoff$State $r0;
        io.grpc.internal.AtomicBackoff $r1;
        long $l0;
        io.grpc.internal.AtomicBackoff$1 $r2;

        $r0 := @this: io.grpc.internal.AtomicBackoff$State;

        $r1 := @parameter0: io.grpc.internal.AtomicBackoff;

        $l0 := @parameter1: long;

        $r2 := @parameter2: io.grpc.internal.AtomicBackoff$1;

        specialinvoke $r0.<io.grpc.internal.AtomicBackoff$State: void <init>(io.grpc.internal.AtomicBackoff,long)>($r1, $l0);

        return;
    }

    public void backoff()
    {
        io.grpc.internal.AtomicBackoff$State $r0;
        java.lang.Object[] $r1;
        long $l0, $l1;
        io.grpc.internal.AtomicBackoff $r2;
        java.util.concurrent.atomic.AtomicLong $r3;
        boolean $z0, $z1;
        byte $b2;
        java.lang.AssertionError $r4;
        java.util.logging.Logger $r5;
        java.util.logging.Level $r6;
        java.lang.String $r7;
        java.lang.Long $r8;

        $r0 := @this: io.grpc.internal.AtomicBackoff$State;

        $l0 = $r0.<io.grpc.internal.AtomicBackoff$State: long savedValue>;

        $l1 = $l0 + $l0;

        $l0 = staticinvoke <java.lang.Math: long max(long,long)>($l1, $l0);

        $r2 = $r0.<io.grpc.internal.AtomicBackoff$State: io.grpc.internal.AtomicBackoff this$0>;

        $r3 = staticinvoke <io.grpc.internal.AtomicBackoff: java.util.concurrent.atomic.AtomicLong access$100(io.grpc.internal.AtomicBackoff)>($r2);

        $l1 = $r0.<io.grpc.internal.AtomicBackoff$State: long savedValue>;

        $z0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>($l1, $l0);

        $z1 = <io.grpc.internal.AtomicBackoff$State: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r2 = $r0.<io.grpc.internal.AtomicBackoff$State: io.grpc.internal.AtomicBackoff this$0>;

        $r3 = staticinvoke <io.grpc.internal.AtomicBackoff: java.util.concurrent.atomic.AtomicLong access$100(io.grpc.internal.AtomicBackoff)>($r2);

        $l1 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $b2 = $l1 cmp $l0;

        if $b2 < 0 goto label1;

        goto label2;

     label1:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        if $z0 == 0 goto label3;

        $r5 = staticinvoke <io.grpc.internal.AtomicBackoff: java.util.logging.Logger access$300()>();

        $r6 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r1 = newarray (java.lang.Object)[2];

        $r2 = $r0.<io.grpc.internal.AtomicBackoff$State: io.grpc.internal.AtomicBackoff this$0>;

        $r7 = staticinvoke <io.grpc.internal.AtomicBackoff: java.lang.String access$200(io.grpc.internal.AtomicBackoff)>($r2);

        $r1[0] = $r7;

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r1[1] = $r8;

        virtualinvoke $r5.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Object[])>($r6, "io.grpc.internal.AtomicBackoff$State", "backoff", "Increased {0} to {1}", $r1);

     label3:
        return;
    }

    public long get()
    {
        io.grpc.internal.AtomicBackoff$State $r0;
        long l0;

        $r0 := @this: io.grpc.internal.AtomicBackoff$State;

        l0 = $r0.<io.grpc.internal.AtomicBackoff$State: long savedValue>;

        return l0;
    }

