androidx.benchmark.macro.CompilationModeKt
    public static final boolean isSupportedWithVmSettings(androidx.benchmark.macro.CompilationMode)
    {
        androidx.benchmark.macro.CompilationMode $r0;
        java.lang.String r1;
        boolean z0, z1, $z2;
        androidx.benchmark.Shell $r2;
        java.lang.CharSequence $r3, $r4;
        androidx.benchmark.macro.CompilationMode$Interpreted $r5;

        $r0 := @parameter0: androidx.benchmark.macro.CompilationMode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r2 = <androidx.benchmark.Shell: androidx.benchmark.Shell INSTANCE>;

        r1 = virtualinvoke $r2.<androidx.benchmark.Shell: java.lang.String executeCommand(java.lang.String)>("getprop dalvik.vm.extra-opts");

        $r4 = (java.lang.CharSequence) r1;

        $r3 = (java.lang.CharSequence) "-Xusejit:false";

        z0 = staticinvoke <kotlin.text.StringsKt: boolean contains$default(java.lang.CharSequence,java.lang.CharSequence,boolean,int,java.lang.Object)>($r4, $r3, 0, 2, null);

        $r5 = <androidx.benchmark.macro.CompilationMode$Interpreted: androidx.benchmark.macro.CompilationMode$Interpreted INSTANCE>;

        z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r0, $r5);

        if z0 != z1 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public static final void assumeSupportedWithVmSettings(androidx.benchmark.macro.CompilationMode)
    {
        androidx.benchmark.macro.CompilationMode $r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        androidx.benchmark.DeviceInfo $r1, $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r8, $r9, $r10, $r11, $r14, $r15, $r16, $r17;
        androidx.benchmark.macro.CompilationMode$Interpreted $r7, $r13;
        java.lang.String $r12, $r18, $r20;
        org.junit.AssumptionViolatedException $r19;

        $r0 := @parameter0: androidx.benchmark.macro.CompilationMode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $z0 = staticinvoke <androidx.benchmark.macro.CompilationModeKt: boolean isSupportedWithVmSettings(androidx.benchmark.macro.CompilationMode)>($r0);

        if $z0 != 0 goto label4;

        $r19 = new org.junit.AssumptionViolatedException;

        $r1 = <androidx.benchmark.DeviceInfo: androidx.benchmark.DeviceInfo INSTANCE>;

        $z1 = virtualinvoke $r1.<androidx.benchmark.DeviceInfo: boolean isRooted()>();

        if $z1 == 0 goto label1;

        $r13 = <androidx.benchmark.macro.CompilationMode$Interpreted: androidx.benchmark.macro.CompilationMode$Interpreted INSTANCE>;

        $z4 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r0, $r13);

        if $z4 == 0 goto label1;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n                        To run benchmarks with CompilationMode ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",\n                        you must disable jit on your device with the following command:\n                        `adb shell setprop dalvik.vm.extra-opts -Xusejit:false; adb shell stop; adb shell start`                         \n                    ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $r20 = staticinvoke <kotlin.text.StringsKt: java.lang.String trimIndent(java.lang.String)>($r18);

        goto label3;

     label1:
        $r2 = <androidx.benchmark.DeviceInfo: androidx.benchmark.DeviceInfo INSTANCE>;

        $z2 = virtualinvoke $r2.<androidx.benchmark.DeviceInfo: boolean isRooted()>();

        if $z2 == 0 goto label2;

        $r7 = <androidx.benchmark.macro.CompilationMode$Interpreted: androidx.benchmark.macro.CompilationMode$Interpreted INSTANCE>;

        $z3 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r0, $r7);

        if $z3 != 0 goto label2;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n                        To run benchmarks with CompilationMode ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",\n                        you must enable jit on your device with the following command:\n                        `adb shell setprop dalvik.vm.extra-opts \\\"\\\"; adb shell stop; adb shell start` \n                    ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r20 = staticinvoke <kotlin.text.StringsKt: java.lang.String trimIndent(java.lang.String)>($r12);

        goto label3;

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("You must toggle usejit on the VM to use CompilationMode ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", this requiresrooting your device.");

        $r20 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        specialinvoke $r19.<org.junit.AssumptionViolatedException: void <init>(java.lang.String)>($r20);

        throw $r19;

     label4:
        return;
    }

