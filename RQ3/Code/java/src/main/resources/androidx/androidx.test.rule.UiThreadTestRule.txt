androidx.test.rule.UiThreadTestRule
<androidx.test.rule.UiThreadTestRule: java.lang.String TAG>
    public org.junit.runners.model.Statement apply(org.junit.runners.model.Statement, org.junit.runner.Description)
    {
        androidx.test.rule.UiThreadTestRule r0;
        org.junit.runners.model.Statement r1;
        org.junit.runner.Description r2;
        boolean $z0, $z1, $z2, $z3;
        androidx.test.internal.runner.junit4.statement.UiThreadStatement $r3, $r4;

        r0 := @this: androidx.test.rule.UiThreadTestRule;

        r1 := @parameter0: org.junit.runners.model.Statement;

        r2 := @parameter1: org.junit.runner.Description;

        $z0 = r1 instanceof org.junit.internal.runners.statements.FailOnTimeout;

        if $z0 != 0 goto label1;

        $z1 = r1 instanceof androidx.test.internal.runner.junit4.statement.UiThreadStatement;

        if $z1 == 0 goto label2;

        $r4 = (androidx.test.internal.runner.junit4.statement.UiThreadStatement) r1;

        $z3 = virtualinvoke $r4.<androidx.test.internal.runner.junit4.statement.UiThreadStatement: boolean isRunOnUiThread()>();

        if $z3 != 0 goto label2;

     label1:
        return r1;

     label2:
        $r3 = new androidx.test.internal.runner.junit4.statement.UiThreadStatement;

        $z2 = virtualinvoke r0.<androidx.test.rule.UiThreadTestRule: boolean shouldRunOnUiThread(org.junit.runner.Description)>(r2);

        specialinvoke $r3.<androidx.test.internal.runner.junit4.statement.UiThreadStatement: void <init>(org.junit.runners.model.Statement,boolean)>(r1, $z2);

        return $r3;
    }

    public void <init>()
    {
        androidx.test.rule.UiThreadTestRule r0;

        r0 := @this: androidx.test.rule.UiThreadTestRule;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void runOnUiThread(java.lang.Runnable) throws java.lang.Throwable
    {
        androidx.test.rule.UiThreadTestRule r0;
        java.lang.Runnable r1;

        r0 := @this: androidx.test.rule.UiThreadTestRule;

        r1 := @parameter0: java.lang.Runnable;

        staticinvoke <androidx.test.internal.runner.junit4.statement.UiThreadStatement: void runOnUiThread(java.lang.Runnable)>(r1);

        return;
    }

    protected boolean shouldRunOnUiThread(org.junit.runner.Description)
    {
        androidx.test.rule.UiThreadTestRule r0;
        org.junit.runner.Description r1;
        java.lang.'annotation'.Annotation $r2, $r3;
        boolean $z0;

        r0 := @this: androidx.test.rule.UiThreadTestRule;

        r1 := @parameter0: org.junit.runner.Description;

        $r2 = virtualinvoke r1.<org.junit.runner.Description: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Landroid/test/UiThreadTest;");

        if $r2 == null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("UiThreadTestRule", "Deprecated android.test.UiThreadTest annotation is used! please switch to using androidx.test.annotation.UiThreadTest instead.");

        return 1;

     label1:
        $r3 = virtualinvoke r1.<org.junit.runner.Description: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Landroidx/test/annotation/UiThreadTest;");

        if $r3 == null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

