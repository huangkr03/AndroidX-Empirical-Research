androidx.work.Configuration
<androidx.work.Configuration: int MIN_SCHEDULER_LIMIT>
<androidx.work.Configuration: java.util.concurrent.Executor mExecutor>
<androidx.work.Configuration: java.util.concurrent.Executor mTaskExecutor>
<androidx.work.Configuration: androidx.work.WorkerFactory mWorkerFactory>
<androidx.work.Configuration: androidx.work.InputMergerFactory mInputMergerFactory>
<androidx.work.Configuration: androidx.work.RunnableScheduler mRunnableScheduler>
<androidx.work.Configuration: androidx.core.util.Consumer mExceptionHandler>
<androidx.work.Configuration: androidx.core.util.Consumer mSchedulingExceptionHandler>
<androidx.work.Configuration: java.lang.String mDefaultProcessName>
<androidx.work.Configuration: int mLoggingLevel>
<androidx.work.Configuration: int mMinJobSchedulerId>
<androidx.work.Configuration: int mMaxJobSchedulerId>
<androidx.work.Configuration: int mMaxSchedulerLimit>
<androidx.work.Configuration: boolean mIsUsingDefaultTaskExecutor>
    void <init>(androidx.work.Configuration$Builder)
    {
        androidx.work.Configuration r0;
        androidx.work.Configuration$Builder r1;
        java.util.concurrent.Executor $r2, $r3, $r4, $r5, $r18, $r19;
        androidx.work.WorkerFactory $r6, $r7, $r17;
        androidx.work.InputMergerFactory $r8, $r9, $r16;
        androidx.work.RunnableScheduler $r10, $r11;
        int $i0, $i1, $i2, $i3;
        androidx.core.util.Consumer $r12, $r13;
        java.lang.String $r14;
        androidx.work.impl.DefaultRunnableScheduler $r15;

        r0 := @this: androidx.work.Configuration;

        r1 := @parameter0: androidx.work.Configuration$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = r1.<androidx.work.Configuration$Builder: java.util.concurrent.Executor mExecutor>;

        if $r2 != null goto label01;

        $r19 = specialinvoke r0.<androidx.work.Configuration: java.util.concurrent.Executor createDefaultExecutor(boolean)>(0);

        r0.<androidx.work.Configuration: java.util.concurrent.Executor mExecutor> = $r19;

        goto label02;

     label01:
        $r3 = r1.<androidx.work.Configuration$Builder: java.util.concurrent.Executor mExecutor>;

        r0.<androidx.work.Configuration: java.util.concurrent.Executor mExecutor> = $r3;

     label02:
        $r4 = r1.<androidx.work.Configuration$Builder: java.util.concurrent.Executor mTaskExecutor>;

        if $r4 != null goto label03;

        r0.<androidx.work.Configuration: boolean mIsUsingDefaultTaskExecutor> = 1;

        $r18 = specialinvoke r0.<androidx.work.Configuration: java.util.concurrent.Executor createDefaultExecutor(boolean)>(1);

        r0.<androidx.work.Configuration: java.util.concurrent.Executor mTaskExecutor> = $r18;

        goto label04;

     label03:
        r0.<androidx.work.Configuration: boolean mIsUsingDefaultTaskExecutor> = 0;

        $r5 = r1.<androidx.work.Configuration$Builder: java.util.concurrent.Executor mTaskExecutor>;

        r0.<androidx.work.Configuration: java.util.concurrent.Executor mTaskExecutor> = $r5;

     label04:
        $r6 = r1.<androidx.work.Configuration$Builder: androidx.work.WorkerFactory mWorkerFactory>;

        if $r6 != null goto label05;

        $r17 = staticinvoke <androidx.work.WorkerFactory: androidx.work.WorkerFactory getDefaultWorkerFactory()>();

        r0.<androidx.work.Configuration: androidx.work.WorkerFactory mWorkerFactory> = $r17;

        goto label06;

     label05:
        $r7 = r1.<androidx.work.Configuration$Builder: androidx.work.WorkerFactory mWorkerFactory>;

        r0.<androidx.work.Configuration: androidx.work.WorkerFactory mWorkerFactory> = $r7;

     label06:
        $r8 = r1.<androidx.work.Configuration$Builder: androidx.work.InputMergerFactory mInputMergerFactory>;

        if $r8 != null goto label07;

        $r16 = staticinvoke <androidx.work.InputMergerFactory: androidx.work.InputMergerFactory getDefaultInputMergerFactory()>();

        r0.<androidx.work.Configuration: androidx.work.InputMergerFactory mInputMergerFactory> = $r16;

        goto label08;

     label07:
        $r9 = r1.<androidx.work.Configuration$Builder: androidx.work.InputMergerFactory mInputMergerFactory>;

        r0.<androidx.work.Configuration: androidx.work.InputMergerFactory mInputMergerFactory> = $r9;

     label08:
        $r10 = r1.<androidx.work.Configuration$Builder: androidx.work.RunnableScheduler mRunnableScheduler>;

        if $r10 != null goto label09;

        $r15 = new androidx.work.impl.DefaultRunnableScheduler;

        specialinvoke $r15.<androidx.work.impl.DefaultRunnableScheduler: void <init>()>();

        r0.<androidx.work.Configuration: androidx.work.RunnableScheduler mRunnableScheduler> = $r15;

        goto label10;

     label09:
        $r11 = r1.<androidx.work.Configuration$Builder: androidx.work.RunnableScheduler mRunnableScheduler>;

        r0.<androidx.work.Configuration: androidx.work.RunnableScheduler mRunnableScheduler> = $r11;

     label10:
        $i0 = r1.<androidx.work.Configuration$Builder: int mLoggingLevel>;

        r0.<androidx.work.Configuration: int mLoggingLevel> = $i0;

        $i1 = r1.<androidx.work.Configuration$Builder: int mMinJobSchedulerId>;

        r0.<androidx.work.Configuration: int mMinJobSchedulerId> = $i1;

        $i2 = r1.<androidx.work.Configuration$Builder: int mMaxJobSchedulerId>;

        r0.<androidx.work.Configuration: int mMaxJobSchedulerId> = $i2;

        $i3 = r1.<androidx.work.Configuration$Builder: int mMaxSchedulerLimit>;

        r0.<androidx.work.Configuration: int mMaxSchedulerLimit> = $i3;

        $r12 = r1.<androidx.work.Configuration$Builder: androidx.core.util.Consumer mExceptionHandler>;

        r0.<androidx.work.Configuration: androidx.core.util.Consumer mExceptionHandler> = $r12;

        $r13 = r1.<androidx.work.Configuration$Builder: androidx.core.util.Consumer mSchedulingExceptionHandler>;

        r0.<androidx.work.Configuration: androidx.core.util.Consumer mSchedulingExceptionHandler> = $r13;

        $r14 = r1.<androidx.work.Configuration$Builder: java.lang.String mDefaultProcessName>;

        r0.<androidx.work.Configuration: java.lang.String mDefaultProcessName> = $r14;

        return;
    }

    public java.util.concurrent.Executor getExecutor()
    {
        androidx.work.Configuration r0;
        java.util.concurrent.Executor $r1;

        r0 := @this: androidx.work.Configuration;

        $r1 = r0.<androidx.work.Configuration: java.util.concurrent.Executor mExecutor>;

        return $r1;
    }

    public java.util.concurrent.Executor getTaskExecutor()
    {
        androidx.work.Configuration r0;
        java.util.concurrent.Executor $r1;

        r0 := @this: androidx.work.Configuration;

        $r1 = r0.<androidx.work.Configuration: java.util.concurrent.Executor mTaskExecutor>;

        return $r1;
    }

    public androidx.work.WorkerFactory getWorkerFactory()
    {
        androidx.work.Configuration r0;
        androidx.work.WorkerFactory $r1;

        r0 := @this: androidx.work.Configuration;

        $r1 = r0.<androidx.work.Configuration: androidx.work.WorkerFactory mWorkerFactory>;

        return $r1;
    }

    public androidx.work.InputMergerFactory getInputMergerFactory()
    {
        androidx.work.Configuration r0;
        androidx.work.InputMergerFactory $r1;

        r0 := @this: androidx.work.Configuration;

        $r1 = r0.<androidx.work.Configuration: androidx.work.InputMergerFactory mInputMergerFactory>;

        return $r1;
    }

    public androidx.work.RunnableScheduler getRunnableScheduler()
    {
        androidx.work.Configuration r0;
        androidx.work.RunnableScheduler $r1;

        r0 := @this: androidx.work.Configuration;

        $r1 = r0.<androidx.work.Configuration: androidx.work.RunnableScheduler mRunnableScheduler>;

        return $r1;
    }

    public int getMinimumLoggingLevel()
    {
        androidx.work.Configuration r0;
        int $i0;

        r0 := @this: androidx.work.Configuration;

        $i0 = r0.<androidx.work.Configuration: int mLoggingLevel>;

        return $i0;
    }

    public int getMinJobSchedulerId()
    {
        androidx.work.Configuration r0;
        int $i0;

        r0 := @this: androidx.work.Configuration;

        $i0 = r0.<androidx.work.Configuration: int mMinJobSchedulerId>;

        return $i0;
    }

    public int getMaxJobSchedulerId()
    {
        androidx.work.Configuration r0;
        int $i0;

        r0 := @this: androidx.work.Configuration;

        $i0 = r0.<androidx.work.Configuration: int mMaxJobSchedulerId>;

        return $i0;
    }

    public java.lang.String getDefaultProcessName()
    {
        androidx.work.Configuration r0;
        java.lang.String $r1;

        r0 := @this: androidx.work.Configuration;

        $r1 = r0.<androidx.work.Configuration: java.lang.String mDefaultProcessName>;

        return $r1;
    }

    public int getMaxSchedulerLimit()
    {
        androidx.work.Configuration r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: androidx.work.Configuration;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 != 23 goto label1;

        $i2 = r0.<androidx.work.Configuration: int mMaxSchedulerLimit>;

        $i3 = $i2 / 2;

        return $i3;

     label1:
        $i1 = r0.<androidx.work.Configuration: int mMaxSchedulerLimit>;

        return $i1;
    }

    public boolean isUsingDefaultTaskExecutor()
    {
        androidx.work.Configuration r0;
        boolean $z0;

        r0 := @this: androidx.work.Configuration;

        $z0 = r0.<androidx.work.Configuration: boolean mIsUsingDefaultTaskExecutor>;

        return $z0;
    }

    public androidx.core.util.Consumer getInitializationExceptionHandler()
    {
        androidx.work.Configuration r0;
        androidx.core.util.Consumer $r1;

        r0 := @this: androidx.work.Configuration;

        $r1 = r0.<androidx.work.Configuration: androidx.core.util.Consumer mExceptionHandler>;

        return $r1;
    }

    public androidx.core.util.Consumer getSchedulingExceptionHandler()
    {
        androidx.work.Configuration r0;
        androidx.core.util.Consumer $r1;

        r0 := @this: androidx.work.Configuration;

        $r1 = r0.<androidx.work.Configuration: androidx.core.util.Consumer mSchedulingExceptionHandler>;

        return $r1;
    }

    private java.util.concurrent.Executor createDefaultExecutor(boolean)
    {
        androidx.work.Configuration r0;
        boolean z0;
        java.lang.Runtime $r1;
        int $i0, $i1, $i2, $i3;
        java.util.concurrent.ThreadFactory $r2;
        java.util.concurrent.ExecutorService $r3;
        java.util.concurrent.Executor r4;

        r0 := @this: androidx.work.Configuration;

        z0 := @parameter0: boolean;

        $r1 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $i0 = virtualinvoke $r1.<java.lang.Runtime: int availableProcessors()>();

        $i1 = $i0 - 1;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, 4);

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>(2, $i2);

        $r2 = specialinvoke r0.<androidx.work.Configuration: java.util.concurrent.ThreadFactory createDefaultThreadFactory(boolean)>(z0);

        $r3 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int,java.util.concurrent.ThreadFactory)>($i3, $r2);

        r4 = (java.util.concurrent.Executor) $r3;

        return r4;
    }

    private java.util.concurrent.ThreadFactory createDefaultThreadFactory(boolean)
    {
        androidx.work.Configuration r0;
        boolean z0;
        androidx.work.Configuration$1 $r1;

        r0 := @this: androidx.work.Configuration;

        z0 := @parameter0: boolean;

        $r1 = new androidx.work.Configuration$1;

        specialinvoke $r1.<androidx.work.Configuration$1: void <init>(androidx.work.Configuration,boolean)>(r0, z0);

        return $r1;
    }

androidx.work.Configuration$1
<androidx.work.Configuration$1: java.util.concurrent.atomic.AtomicInteger mThreadCount>
<androidx.work.Configuration$1: boolean val$isTaskExecutor>
<androidx.work.Configuration$1: androidx.work.Configuration this$0>
    void <init>(androidx.work.Configuration, boolean)
    {
        androidx.work.Configuration$1 r0;
        androidx.work.Configuration r1;
        boolean z0;
        java.util.concurrent.atomic.AtomicInteger $r2;

        r0 := @this: androidx.work.Configuration$1;

        r1 := @parameter0: androidx.work.Configuration;

        z0 := @parameter1: boolean;

        r0.<androidx.work.Configuration$1: androidx.work.Configuration this$0> = r1;

        r0.<androidx.work.Configuration$1: boolean val$isTaskExecutor> = z0;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        r0.<androidx.work.Configuration$1: java.util.concurrent.atomic.AtomicInteger mThreadCount> = $r2;

        return;
    }

    public java.lang.Thread newThread(java.lang.Runnable)
    {
        androidx.work.Configuration$1 r0;
        java.lang.Runnable r1;
        java.lang.String r2, $r8, $r9;
        boolean $z0;
        java.lang.Thread $r3;
        java.lang.StringBuilder $r4, $r5, $r7;
        java.util.concurrent.atomic.AtomicInteger $r6;
        int $i0;

        r0 := @this: androidx.work.Configuration$1;

        r1 := @parameter0: java.lang.Runnable;

        $z0 = r0.<androidx.work.Configuration$1: boolean val$isTaskExecutor>;

        if $z0 == 0 goto label1;

        $r9 = "WM.task-";

        goto label2;

     label1:
        $r9 = "androidx.work-";

     label2:
        r2 = $r9;

        $r3 = new java.lang.Thread;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r6 = r0.<androidx.work.Configuration$1: java.util.concurrent.atomic.AtomicInteger mThreadCount>;

        $i0 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>(r1, $r8);

        return $r3;
    }

androidx.work.Configuration$Builder
<androidx.work.Configuration$Builder: java.util.concurrent.Executor mExecutor>
<androidx.work.Configuration$Builder: androidx.work.WorkerFactory mWorkerFactory>
<androidx.work.Configuration$Builder: androidx.work.InputMergerFactory mInputMergerFactory>
<androidx.work.Configuration$Builder: java.util.concurrent.Executor mTaskExecutor>
<androidx.work.Configuration$Builder: androidx.work.RunnableScheduler mRunnableScheduler>
<androidx.work.Configuration$Builder: androidx.core.util.Consumer mExceptionHandler>
<androidx.work.Configuration$Builder: androidx.core.util.Consumer mSchedulingExceptionHandler>
<androidx.work.Configuration$Builder: java.lang.String mDefaultProcessName>
<androidx.work.Configuration$Builder: int mLoggingLevel>
<androidx.work.Configuration$Builder: int mMinJobSchedulerId>
<androidx.work.Configuration$Builder: int mMaxJobSchedulerId>
<androidx.work.Configuration$Builder: int mMaxSchedulerLimit>
    public void <init>()
    {
        androidx.work.Configuration$Builder r0;

        r0 := @this: androidx.work.Configuration$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.work.Configuration$Builder: int mLoggingLevel> = 4;

        r0.<androidx.work.Configuration$Builder: int mMinJobSchedulerId> = 0;

        r0.<androidx.work.Configuration$Builder: int mMaxJobSchedulerId> = 2147483647;

        r0.<androidx.work.Configuration$Builder: int mMaxSchedulerLimit> = 20;

        return;
    }

    public void <init>(androidx.work.Configuration)
    {
        androidx.work.Configuration$Builder r0;
        androidx.work.Configuration r1;
        java.util.concurrent.Executor $r2, $r5;
        androidx.work.WorkerFactory $r3;
        androidx.work.InputMergerFactory $r4;
        int $i0, $i1, $i2, $i3;
        androidx.work.RunnableScheduler $r6;
        androidx.core.util.Consumer $r7, $r8;
        java.lang.String $r9;

        r0 := @this: androidx.work.Configuration$Builder;

        r1 := @parameter0: androidx.work.Configuration;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = r1.<androidx.work.Configuration: java.util.concurrent.Executor mExecutor>;

        r0.<androidx.work.Configuration$Builder: java.util.concurrent.Executor mExecutor> = $r2;

        $r3 = r1.<androidx.work.Configuration: androidx.work.WorkerFactory mWorkerFactory>;

        r0.<androidx.work.Configuration$Builder: androidx.work.WorkerFactory mWorkerFactory> = $r3;

        $r4 = r1.<androidx.work.Configuration: androidx.work.InputMergerFactory mInputMergerFactory>;

        r0.<androidx.work.Configuration$Builder: androidx.work.InputMergerFactory mInputMergerFactory> = $r4;

        $r5 = r1.<androidx.work.Configuration: java.util.concurrent.Executor mTaskExecutor>;

        r0.<androidx.work.Configuration$Builder: java.util.concurrent.Executor mTaskExecutor> = $r5;

        $i0 = r1.<androidx.work.Configuration: int mLoggingLevel>;

        r0.<androidx.work.Configuration$Builder: int mLoggingLevel> = $i0;

        $i1 = r1.<androidx.work.Configuration: int mMinJobSchedulerId>;

        r0.<androidx.work.Configuration$Builder: int mMinJobSchedulerId> = $i1;

        $i2 = r1.<androidx.work.Configuration: int mMaxJobSchedulerId>;

        r0.<androidx.work.Configuration$Builder: int mMaxJobSchedulerId> = $i2;

        $i3 = r1.<androidx.work.Configuration: int mMaxSchedulerLimit>;

        r0.<androidx.work.Configuration$Builder: int mMaxSchedulerLimit> = $i3;

        $r6 = r1.<androidx.work.Configuration: androidx.work.RunnableScheduler mRunnableScheduler>;

        r0.<androidx.work.Configuration$Builder: androidx.work.RunnableScheduler mRunnableScheduler> = $r6;

        $r7 = r1.<androidx.work.Configuration: androidx.core.util.Consumer mExceptionHandler>;

        r0.<androidx.work.Configuration$Builder: androidx.core.util.Consumer mExceptionHandler> = $r7;

        $r8 = r1.<androidx.work.Configuration: androidx.core.util.Consumer mSchedulingExceptionHandler>;

        r0.<androidx.work.Configuration$Builder: androidx.core.util.Consumer mSchedulingExceptionHandler> = $r8;

        $r9 = r1.<androidx.work.Configuration: java.lang.String mDefaultProcessName>;

        r0.<androidx.work.Configuration$Builder: java.lang.String mDefaultProcessName> = $r9;

        return;
    }

    public androidx.work.Configuration$Builder setWorkerFactory(androidx.work.WorkerFactory)
    {
        androidx.work.Configuration$Builder r0;
        androidx.work.WorkerFactory r1;

        r0 := @this: androidx.work.Configuration$Builder;

        r1 := @parameter0: androidx.work.WorkerFactory;

        r0.<androidx.work.Configuration$Builder: androidx.work.WorkerFactory mWorkerFactory> = r1;

        return r0;
    }

    public androidx.work.Configuration$Builder setInputMergerFactory(androidx.work.InputMergerFactory)
    {
        androidx.work.Configuration$Builder r0;
        androidx.work.InputMergerFactory r1;

        r0 := @this: androidx.work.Configuration$Builder;

        r1 := @parameter0: androidx.work.InputMergerFactory;

        r0.<androidx.work.Configuration$Builder: androidx.work.InputMergerFactory mInputMergerFactory> = r1;

        return r0;
    }

    public androidx.work.Configuration$Builder setExecutor(java.util.concurrent.Executor)
    {
        androidx.work.Configuration$Builder r0;
        java.util.concurrent.Executor r1;

        r0 := @this: androidx.work.Configuration$Builder;

        r1 := @parameter0: java.util.concurrent.Executor;

        r0.<androidx.work.Configuration$Builder: java.util.concurrent.Executor mExecutor> = r1;

        return r0;
    }

    public androidx.work.Configuration$Builder setTaskExecutor(java.util.concurrent.Executor)
    {
        androidx.work.Configuration$Builder r0;
        java.util.concurrent.Executor r1;

        r0 := @this: androidx.work.Configuration$Builder;

        r1 := @parameter0: java.util.concurrent.Executor;

        r0.<androidx.work.Configuration$Builder: java.util.concurrent.Executor mTaskExecutor> = r1;

        return r0;
    }

    public androidx.work.Configuration$Builder setJobSchedulerJobIdRange(int, int)
    {
        androidx.work.Configuration$Builder r0;
        int i0, i1, $i2;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: androidx.work.Configuration$Builder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = i1 - i0;

        if $i2 >= 1000 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("WorkManager needs a range of at least 1000 job ids.");

        throw $r1;

     label1:
        r0.<androidx.work.Configuration$Builder: int mMinJobSchedulerId> = i0;

        r0.<androidx.work.Configuration$Builder: int mMaxJobSchedulerId> = i1;

        return r0;
    }

    public androidx.work.Configuration$Builder setMaxSchedulerLimit(int)
    {
        androidx.work.Configuration$Builder r0;
        int i0, $i1;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: androidx.work.Configuration$Builder;

        i0 := @parameter0: int;

        if i0 >= 20 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("WorkManager needs to be able to schedule at least 20 jobs in JobScheduler.");

        throw $r1;

     label1:
        $i1 = staticinvoke <java.lang.Math: int min(int,int)>(i0, 50);

        r0.<androidx.work.Configuration$Builder: int mMaxSchedulerLimit> = $i1;

        return r0;
    }

    public androidx.work.Configuration$Builder setMinimumLoggingLevel(int)
    {
        androidx.work.Configuration$Builder r0;
        int i0;

        r0 := @this: androidx.work.Configuration$Builder;

        i0 := @parameter0: int;

        r0.<androidx.work.Configuration$Builder: int mLoggingLevel> = i0;

        return r0;
    }

    public androidx.work.Configuration$Builder setRunnableScheduler(androidx.work.RunnableScheduler)
    {
        androidx.work.Configuration$Builder r0;
        androidx.work.RunnableScheduler r1;

        r0 := @this: androidx.work.Configuration$Builder;

        r1 := @parameter0: androidx.work.RunnableScheduler;

        r0.<androidx.work.Configuration$Builder: androidx.work.RunnableScheduler mRunnableScheduler> = r1;

        return r0;
    }

    public androidx.work.Configuration$Builder setInitializationExceptionHandler(androidx.work.InitializationExceptionHandler)
    {
        androidx.work.Configuration$Builder r0;
        androidx.work.InitializationExceptionHandler r1;
        androidx.core.util.Consumer $r3;

        r0 := @this: androidx.work.Configuration$Builder;

        r1 := @parameter0: androidx.work.InitializationExceptionHandler;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r3 = dynamicinvoke "accept" <androidx.core.util.Consumer (androidx.work.InitializationExceptionHandler)>(r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_INTERFACE" <androidx.work.InitializationExceptionHandler: void handleException(java.lang.Throwable)>, methodtype: void __METHODTYPE__(java.lang.Throwable));

        r0.<androidx.work.Configuration$Builder: androidx.core.util.Consumer mExceptionHandler> = $r3;

        return r0;
    }

    public androidx.work.Configuration$Builder setInitializationExceptionHandler(androidx.core.util.Consumer)
    {
        androidx.work.Configuration$Builder r0;
        androidx.core.util.Consumer r1;

        r0 := @this: androidx.work.Configuration$Builder;

        r1 := @parameter0: androidx.core.util.Consumer;

        r0.<androidx.work.Configuration$Builder: androidx.core.util.Consumer mExceptionHandler> = r1;

        return r0;
    }

    public androidx.work.Configuration$Builder setSchedulingExceptionHandler(androidx.core.util.Consumer)
    {
        androidx.work.Configuration$Builder r0;
        androidx.core.util.Consumer r1;

        r0 := @this: androidx.work.Configuration$Builder;

        r1 := @parameter0: androidx.core.util.Consumer;

        r0.<androidx.work.Configuration$Builder: androidx.core.util.Consumer mSchedulingExceptionHandler> = r1;

        return r0;
    }

    public androidx.work.Configuration$Builder setDefaultProcessName(java.lang.String)
    {
        androidx.work.Configuration$Builder r0;
        java.lang.String r1;

        r0 := @this: androidx.work.Configuration$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<androidx.work.Configuration$Builder: java.lang.String mDefaultProcessName> = r1;

        return r0;
    }

    public androidx.work.Configuration build()
    {
        androidx.work.Configuration$Builder r0;
        androidx.work.Configuration $r1;

        r0 := @this: androidx.work.Configuration$Builder;

        $r1 = new androidx.work.Configuration;

        specialinvoke $r1.<androidx.work.Configuration: void <init>(androidx.work.Configuration$Builder)>(r0);

        return $r1;
    }

androidx.work.Configuration$Provider
<androidx.work.Configuration$Provider: androidx.work.Configuration getWorkManagerConfiguration()>
