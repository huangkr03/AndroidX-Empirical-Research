androidx.security.identity.SoftwareIdentityCredential
<androidx.security.identity.SoftwareIdentityCredential: java.lang.String TAG>
<androidx.security.identity.SoftwareIdentityCredential: java.lang.String mCredentialName>
<androidx.security.identity.SoftwareIdentityCredential: android.content.Context mContext>
<androidx.security.identity.SoftwareIdentityCredential: androidx.security.identity.CredentialData mData>
<androidx.security.identity.SoftwareIdentityCredential: java.security.KeyPair mEphemeralKeyPair>
<androidx.security.identity.SoftwareIdentityCredential: javax.crypto.SecretKey mSKDevice>
<androidx.security.identity.SoftwareIdentityCredential: javax.crypto.SecretKey mSKReader>
<androidx.security.identity.SoftwareIdentityCredential: int mSKDeviceCounter>
<androidx.security.identity.SoftwareIdentityCredential: int mSKReaderCounter>
<androidx.security.identity.SoftwareIdentityCredential: byte[] mAuthKeyAssociatedData>
<androidx.security.identity.SoftwareIdentityCredential: java.security.PrivateKey mAuthKey>
<androidx.security.identity.SoftwareIdentityCredential: androidx.biometric.BiometricPrompt$CryptoObject mCryptoObject>
<androidx.security.identity.SoftwareIdentityCredential: java.security.PublicKey mReaderEphemeralPublicKey>
<androidx.security.identity.SoftwareIdentityCredential: byte[] mSessionTranscript>
<androidx.security.identity.SoftwareIdentityCredential: boolean mAllowUsingExhaustedKeys>
<androidx.security.identity.SoftwareIdentityCredential: boolean mAllowUsingExpiredKeys>
<androidx.security.identity.SoftwareIdentityCredential: boolean mDidUserAuthResult>
<androidx.security.identity.SoftwareIdentityCredential: boolean mDidUserAuthAlreadyCalled>
    void <init>(android.content.Context, java.lang.String, int) throws androidx.security.identity.CipherSuiteNotSupportedException
    {
        androidx.security.identity.SoftwareIdentityCredential r0;
        android.content.Context r1;
        java.lang.String r2;
        int i0;
        androidx.security.identity.CipherSuiteNotSupportedException r4;
        java.lang.Throwable r5;

        r0 := @this: androidx.security.identity.SoftwareIdentityCredential;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<androidx.security.identity.IdentityCredential: void <init>()>();

        r0.<androidx.security.identity.SoftwareIdentityCredential: java.security.KeyPair mEphemeralKeyPair> = null;

        r0.<androidx.security.identity.SoftwareIdentityCredential: javax.crypto.SecretKey mSKDevice> = null;

        r0.<androidx.security.identity.SoftwareIdentityCredential: javax.crypto.SecretKey mSKReader> = null;

        r0.<androidx.security.identity.SoftwareIdentityCredential: byte[] mAuthKeyAssociatedData> = null;

        r0.<androidx.security.identity.SoftwareIdentityCredential: java.security.PrivateKey mAuthKey> = null;

        r0.<androidx.security.identity.SoftwareIdentityCredential: androidx.biometric.BiometricPrompt$CryptoObject mCryptoObject> = null;

        r0.<androidx.security.identity.SoftwareIdentityCredential: java.security.PublicKey mReaderEphemeralPublicKey> = null;

        r0.<androidx.security.identity.SoftwareIdentityCredential: byte[] mSessionTranscript> = null;

        r0.<androidx.security.identity.SoftwareIdentityCredential: boolean mAllowUsingExhaustedKeys> = 1;

        r0.<androidx.security.identity.SoftwareIdentityCredential: boolean mAllowUsingExpiredKeys> = 0;

        r0.<androidx.security.identity.SoftwareIdentityCredential: boolean mDidUserAuthResult> = 0;

        r0.<androidx.security.identity.SoftwareIdentityCredential: boolean mDidUserAuthAlreadyCalled> = 0;

        if i0 == 1 goto label1;

        r4 = new androidx.security.identity.CipherSuiteNotSupportedException;

        specialinvoke r4.<androidx.security.identity.CipherSuiteNotSupportedException: void <init>(java.lang.String)>("Unsupported Cipher Suite");

        r5 = (java.lang.Throwable) r4;

        throw r5;

     label1:
        r0.<androidx.security.identity.SoftwareIdentityCredential: android.content.Context mContext> = r1;

        r0.<androidx.security.identity.SoftwareIdentityCredential: java.lang.String mCredentialName> = r2;

        return;
    }

    boolean loadData()
    {
        androidx.security.identity.SoftwareIdentityCredential r0;
        java.lang.String $r1;
        android.content.Context $r2;
        androidx.security.identity.CredentialData $r3, $r4;

        r0 := @this: androidx.security.identity.SoftwareIdentityCredential;

        $r2 = r0.<androidx.security.identity.SoftwareIdentityCredential: android.content.Context mContext>;

        $r1 = r0.<androidx.security.identity.SoftwareIdentityCredential: java.lang.String mCredentialName>;

        $r3 = staticinvoke <androidx.security.identity.CredentialData: androidx.security.identity.CredentialData loadCredentialData(android.content.Context,java.lang.String)>($r2, $r1);

        r0.<androidx.security.identity.SoftwareIdentityCredential: androidx.security.identity.CredentialData mData> = $r3;

        $r4 = r0.<androidx.security.identity.SoftwareIdentityCredential: androidx.security.identity.CredentialData mData>;

        if $r4 != null goto label1;

        return 0;

     label1:
        return 1;
    }

    static byte[] delete(android.content.Context, java.lang.String)
    {
        android.content.Context r0;
        java.lang.String r1;
        byte[] $r2;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <androidx.security.identity.CredentialData: byte[] delete(android.content.Context,java.lang.String,byte[])>(r0, r1, null);

        return $r2;
    }

    public byte[] delete(byte[])
    {
        androidx.security.identity.SoftwareIdentityCredential r0;
        byte[] r1, $r4;
        java.lang.String $r2;
        android.content.Context $r3;

        r0 := @this: androidx.security.identity.SoftwareIdentityCredential;

        r1 := @parameter0: byte[];

        $r3 = r0.<androidx.security.identity.SoftwareIdentityCredential: android.content.Context mContext>;

        $r2 = r0.<androidx.security.identity.SoftwareIdentityCredential: java.lang.String mCredentialName>;

        $r4 = staticinvoke <androidx.security.identity.CredentialData: byte[] delete(android.content.Context,java.lang.String,byte[])>($r3, $r2, r1);

        return $r4;
    }

    public byte[] proveOwnership(byte[])
    {
        androidx.security.identity.SoftwareIdentityCredential r0;
        byte[] r1, $r3;
        androidx.security.identity.CredentialData $r2;

        r0 := @this: androidx.security.identity.SoftwareIdentityCredential;

        r1 := @parameter0: byte[];

        $r2 = r0.<androidx.security.identity.SoftwareIdentityCredential: androidx.security.identity.CredentialData mData>;

        $r3 = virtualinvoke $r2.<androidx.security.identity.CredentialData: byte[] proveOwnership(byte[])>(r1);

        return $r3;
    }

    private static java.util.HashMap parseRequestMessage(byte[])
    {
        byte[] r0;
        java.util.HashMap r1, $r12;
        java.util.List r2;
        co.nstant.in.cbor.model.Map r3, $r18, $r23, $r24;
        co.nstant.in.cbor.model.DataItem r4, r6, r9, r11;
        java.util.Iterator r5, r10;
        java.lang.String r7, $r29, $r39;
        java.util.ArrayList r8, $r22;
        java.io.ByteArrayInputStream $r13, r42;
        co.nstant.in.cbor.CborDecoder $r14;
        int $i0, $i1;
        java.lang.Object $r15, $r16, $r20, $r27;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        co.nstant.in.cbor.model.UnicodeString $r17, $r21, $r28;
        java.util.Collection $r19, $r25;
        java.lang.RuntimeException $r30, $r31, $r32, $r33, $r34, $r35, $r41;
        java.lang.StringBuilder $r36, $r37, $r38;
        java.lang.Throwable $r40, r43;

        r0 := @parameter0: byte[];

        $r12 = new java.util.HashMap;

        specialinvoke $r12.<java.util.HashMap: void <init>()>();

        r1 = $r12;

        if r0 != null goto label01;

        return r1;

     label01:
        $r13 = new java.io.ByteArrayInputStream;

        specialinvoke $r13.<java.io.ByteArrayInputStream: void <init>(byte[])>(r0);

        r42 = $r13;

        $r14 = new co.nstant.in.cbor.CborDecoder;

        specialinvoke $r14.<co.nstant.in.cbor.CborDecoder: void <init>(java.io.InputStream)>(r42);

        r2 = virtualinvoke $r14.<co.nstant.in.cbor.CborDecoder: java.util.List decode()>();

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i0 == 1 goto label02;

        $r35 = new java.lang.RuntimeException;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected 1 item, found ");

        $i1 = interfaceinvoke r2.<java.util.List: int size()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r35.<java.lang.RuntimeException: void <init>(java.lang.String)>($r39);

        throw $r35;

     label02:
        $r15 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(0);

        $z0 = $r15 instanceof co.nstant.in.cbor.model.Map;

        if $z0 != 0 goto label03;

        $r34 = new java.lang.RuntimeException;

        specialinvoke $r34.<java.lang.RuntimeException: void <init>(java.lang.String)>("Item is not a map");

        throw $r34;

     label03:
        $r16 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(0);

        r3 = (co.nstant.in.cbor.model.Map) $r16;

        $r17 = new co.nstant.in.cbor.model.UnicodeString;

        specialinvoke $r17.<co.nstant.in.cbor.model.UnicodeString: void <init>(java.lang.String)>("nameSpaces");

        r4 = virtualinvoke r3.<co.nstant.in.cbor.model.Map: co.nstant.in.cbor.model.DataItem get(co.nstant.in.cbor.model.DataItem)>($r17);

        $z1 = r4 instanceof co.nstant.in.cbor.model.Map;

        if $z1 != 0 goto label04;

        $r33 = new java.lang.RuntimeException;

        specialinvoke $r33.<java.lang.RuntimeException: void <init>(java.lang.String)>("nameSpaces entry not found or not map");

        throw $r33;

     label04:
        $r18 = (co.nstant.in.cbor.model.Map) r4;

        $r19 = virtualinvoke $r18.<co.nstant.in.cbor.model.Map: java.util.Collection getKeys()>();

        r5 = interfaceinvoke $r19.<java.util.Collection: java.util.Iterator iterator()>();

     label05:
        $z2 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label11;

        $r20 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (co.nstant.in.cbor.model.DataItem) $r20;

        $z3 = r6 instanceof co.nstant.in.cbor.model.UnicodeString;

        if $z3 != 0 goto label06;

        $r32 = new java.lang.RuntimeException;

        specialinvoke $r32.<java.lang.RuntimeException: void <init>(java.lang.String)>("Key item in NameSpaces map not UnicodeString");

        throw $r32;

     label06:
        $r21 = (co.nstant.in.cbor.model.UnicodeString) r6;

        r7 = virtualinvoke $r21.<co.nstant.in.cbor.model.UnicodeString: java.lang.String getString()>();

        $r22 = new java.util.ArrayList;

        specialinvoke $r22.<java.util.ArrayList: void <init>()>();

        r8 = $r22;

        $r23 = (co.nstant.in.cbor.model.Map) r4;

        r9 = virtualinvoke $r23.<co.nstant.in.cbor.model.Map: co.nstant.in.cbor.model.DataItem get(co.nstant.in.cbor.model.DataItem)>(r6);

        $z4 = r9 instanceof co.nstant.in.cbor.model.Map;

        if $z4 != 0 goto label07;

        $r31 = new java.lang.RuntimeException;

        specialinvoke $r31.<java.lang.RuntimeException: void <init>(java.lang.String)>("Value item in NameSpaces map not Map");

        throw $r31;

     label07:
        $r24 = (co.nstant.in.cbor.model.Map) r9;

        $r25 = virtualinvoke $r24.<co.nstant.in.cbor.model.Map: java.util.Collection getKeys()>();

        r10 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>();

     label08:
        $z5 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label10;

        $r27 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r11 = (co.nstant.in.cbor.model.DataItem) $r27;

        $z6 = r11 instanceof co.nstant.in.cbor.model.UnicodeString;

        if $z6 != 0 goto label09;

        $r30 = new java.lang.RuntimeException;

        specialinvoke $r30.<java.lang.RuntimeException: void <init>(java.lang.String)>("Item in nameSpaces array not UnicodeString");

        throw $r30;

     label09:
        $r28 = (co.nstant.in.cbor.model.UnicodeString) r11;

        $r29 = virtualinvoke $r28.<co.nstant.in.cbor.model.UnicodeString: java.lang.String getString()>();

        virtualinvoke r8.<java.util.ArrayList: boolean add(java.lang.Object)>($r29);

        goto label08;

     label10:
        virtualinvoke r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, r8);

        goto label05;

     label11:
        goto label13;

     label12:
        $r40 := @caughtexception;

        r43 = $r40;

        $r41 = new java.lang.RuntimeException;

        specialinvoke $r41.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error decoding request message", r43);

        throw $r41;

     label13:
        return r1;

        catch co.nstant.in.cbor.CborException from label01 to label11 with label12;
    }

    public java.security.KeyPair createEphemeralKeyPair()
    {
        androidx.security.identity.SoftwareIdentityCredential r0;
        java.security.spec.ECGenParameterSpec r1, $r4;
        java.security.KeyPair $r2, $r3, $r5;
        java.lang.Throwable $r6, r9;
        java.lang.RuntimeException $r7;
        java.security.KeyPairGenerator r8;

        r0 := @this: androidx.security.identity.SoftwareIdentityCredential;

        $r2 = r0.<androidx.security.identity.SoftwareIdentityCredential: java.security.KeyPair mEphemeralKeyPair>;

        if $r2 != null goto label4;

     label1:
        r8 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>("EC");

        $r4 = new java.security.spec.ECGenParameterSpec;

        specialinvoke $r4.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>("prime256v1");

        r1 = $r4;

        virtualinvoke r8.<java.security.KeyPairGenerator: void initialize(java.security.spec.AlgorithmParameterSpec)>(r1);

        $r5 = virtualinvoke r8.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>();

        r0.<androidx.security.identity.SoftwareIdentityCredential: java.security.KeyPair mEphemeralKeyPair> = $r5;

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r9 = $r6;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error generating ephemeral key", r9);

        throw $r7;

     label4:
        $r3 = r0.<androidx.security.identity.SoftwareIdentityCredential: java.security.KeyPair mEphemeralKeyPair>;

        return $r3;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label3;
    }

    public void setReaderEphemeralPublicKey(java.security.PublicKey)
    {
        androidx.security.identity.SoftwareIdentityCredential r0;
        java.security.PublicKey r1;

        r0 := @this: androidx.security.identity.SoftwareIdentityCredential;

        r1 := @parameter0: java.security.PublicKey;

        r0.<androidx.security.identity.SoftwareIdentityCredential: java.security.PublicKey mReaderEphemeralPublicKey> = r1;

        return;
    }

    public void setSessionTranscript(byte[])
    {
        androidx.security.identity.SoftwareIdentityCredential r0;
        byte[] r1, $r2, $r4;
        java.lang.Object $r3;
        java.lang.RuntimeException $r5;

        r0 := @this: androidx.security.identity.SoftwareIdentityCredential;

        r1 := @parameter0: byte[];

        $r2 = r0.<androidx.security.identity.SoftwareIdentityCredential: byte[] mSessionTranscript>;

        if $r2 == null goto label1;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("SessionTranscript already set");

        throw $r5;

     label1:
        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (byte[]) $r3;

        r0.<androidx.security.identity.SoftwareIdentityCredential: byte[] mSessionTranscript> = $r4;

        return;
    }

    private void ensureSessionEncryptionKey()
    {
        androidx.security.identity.SoftwareIdentityCredential r0;
        byte[] r1, r2, r3, $r6, $r11, $r14, $r16, r23, r24, r25, r26;
        javax.crypto.SecretKey $r4;
        java.security.PublicKey $r5, $r9;
        java.security.KeyPair $r7;
        java.security.PrivateKey $r8;
        co.nstant.in.cbor.model.DataItem $r12;
        java.security.MessageDigest $r13;
        javax.crypto.spec.SecretKeySpec $r15, $r17;
        java.lang.RuntimeException $r18, $r19, $r21;
        java.lang.Throwable $r20, r27;
        javax.crypto.KeyAgreement r22;

        r0 := @this: androidx.security.identity.SoftwareIdentityCredential;

        $r4 = r0.<androidx.security.identity.SoftwareIdentityCredential: javax.crypto.SecretKey mSKDevice>;

        if $r4 == null goto label1;

        return;

     label1:
        $r5 = r0.<androidx.security.identity.SoftwareIdentityCredential: java.security.PublicKey mReaderEphemeralPublicKey>;

        if $r5 != null goto label2;

        $r19 = new java.lang.RuntimeException;

        specialinvoke $r19.<java.lang.RuntimeException: void <init>(java.lang.String)>("Reader ephemeral key not set");

        throw $r19;

     label2:
        $r6 = r0.<androidx.security.identity.SoftwareIdentityCredential: byte[] mSessionTranscript>;

        if $r6 != null goto label3;

        $r18 = new java.lang.RuntimeException;

        specialinvoke $r18.<java.lang.RuntimeException: void <init>(java.lang.String)>("Session transcript not set");

        throw $r18;

     label3:
        r22 = staticinvoke <javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String)>("ECDH");

        $r7 = r0.<androidx.security.identity.SoftwareIdentityCredential: java.security.KeyPair mEphemeralKeyPair>;

        $r8 = virtualinvoke $r7.<java.security.KeyPair: java.security.PrivateKey getPrivate()>();

        virtualinvoke r22.<javax.crypto.KeyAgreement: void init(java.security.Key)>($r8);

        $r9 = r0.<androidx.security.identity.SoftwareIdentityCredential: java.security.PublicKey mReaderEphemeralPublicKey>;

        virtualinvoke r22.<javax.crypto.KeyAgreement: java.security.Key doPhase(java.security.Key,boolean)>($r9, 1);

        r1 = virtualinvoke r22.<javax.crypto.KeyAgreement: byte[] generateSecret()>();

        $r11 = r0.<androidx.security.identity.SoftwareIdentityCredential: byte[] mSessionTranscript>;

        $r12 = staticinvoke <androidx.security.identity.Util: co.nstant.in.cbor.model.DataItem cborBuildTaggedByteString(byte[])>($r11);

        r2 = staticinvoke <androidx.security.identity.Util: byte[] cborEncode(co.nstant.in.cbor.model.DataItem)>($r12);

        $r13 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-256");

        r3 = virtualinvoke $r13.<java.security.MessageDigest: byte[] digest(byte[])>(r2);

        $r14 = newarray (byte)[8];

        $r14[0] = 83;

        $r14[1] = 75;

        $r14[2] = 68;

        $r14[3] = 101;

        $r14[4] = 118;

        $r14[5] = 105;

        $r14[6] = 99;

        $r14[7] = 101;

        r23 = $r14;

        r24 = staticinvoke <androidx.security.identity.Util: byte[] computeHkdf(java.lang.String,byte[],byte[],byte[],int)>("HmacSha256", r1, r3, r23, 32);

        $r15 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r15.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r24, "AES");

        r0.<androidx.security.identity.SoftwareIdentityCredential: javax.crypto.SecretKey mSKDevice> = $r15;

        $r16 = newarray (byte)[8];

        $r16[0] = 83;

        $r16[1] = 75;

        $r16[2] = 82;

        $r16[3] = 101;

        $r16[4] = 97;

        $r16[5] = 100;

        $r16[6] = 101;

        $r16[7] = 114;

        r25 = $r16;

        r26 = staticinvoke <androidx.security.identity.Util: byte[] computeHkdf(java.lang.String,byte[],byte[],byte[],int)>("HmacSha256", r1, r3, r25, 32);

        $r17 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r17.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r26, "AES");

        r0.<androidx.security.identity.SoftwareIdentityCredential: javax.crypto.SecretKey mSKReader> = $r17;

        r0.<androidx.security.identity.SoftwareIdentityCredential: int mSKDeviceCounter> = 1;

        r0.<androidx.security.identity.SoftwareIdentityCredential: int mSKReaderCounter> = 1;

     label4:
        goto label6;

     label5:
        $r20 := @caughtexception;

        r27 = $r20;

        $r21 = new java.lang.RuntimeException;

        specialinvoke $r21.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error performing key agreement", r27);

        throw $r21;

     label6:
        return;

        catch java.security.InvalidKeyException from label3 to label4 with label5;
        catch java.security.NoSuchAlgorithmException from label3 to label4 with label5;
    }

    public byte[] encryptMessageToReader(byte[])
    {
        androidx.security.identity.SoftwareIdentityCredential r0;
        byte[] r1, $r5, r10;
        javax.crypto.Cipher r2;
        javax.crypto.spec.GCMParameterSpec r3, $r4;
        int $i0, $i1, $i2;
        javax.crypto.SecretKey $r6;
        java.lang.Throwable $r7, r11;
        java.lang.RuntimeException $r8;
        java.nio.ByteBuffer r9;

        r0 := @this: androidx.security.identity.SoftwareIdentityCredential;

        r1 := @parameter0: byte[];

        specialinvoke r0.<androidx.security.identity.SoftwareIdentityCredential: void ensureSessionEncryptionKey()>();

     label1:
        r9 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(12);

        virtualinvoke r9.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int,int)>(0, 0);

        virtualinvoke r9.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int,int)>(4, 1);

        $i0 = r0.<androidx.security.identity.SoftwareIdentityCredential: int mSKDeviceCounter>;

        virtualinvoke r9.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int,int)>(8, $i0);

        r2 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/GCM/NoPadding");

        $r4 = new javax.crypto.spec.GCMParameterSpec;

        $r5 = virtualinvoke r9.<java.nio.ByteBuffer: byte[] array()>();

        specialinvoke $r4.<javax.crypto.spec.GCMParameterSpec: void <init>(int,byte[])>(128, $r5);

        r3 = $r4;

        $r6 = r0.<androidx.security.identity.SoftwareIdentityCredential: javax.crypto.SecretKey mSKDevice>;

        virtualinvoke r2.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(1, $r6, r3);

        r10 = virtualinvoke r2.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r1);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r11 = $r7;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error encrypting message", r11);

        throw $r8;

     label4:
        $i1 = r0.<androidx.security.identity.SoftwareIdentityCredential: int mSKDeviceCounter>;

        $i2 = $i1 + 1;

        r0.<androidx.security.identity.SoftwareIdentityCredential: int mSKDeviceCounter> = $i2;

        return r10;

        catch javax.crypto.BadPaddingException from label1 to label2 with label3;
        catch javax.crypto.IllegalBlockSizeException from label1 to label2 with label3;
        catch javax.crypto.NoSuchPaddingException from label1 to label2 with label3;
        catch java.security.InvalidKeyException from label1 to label2 with label3;
        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label3;
    }

    public byte[] decryptMessageFromReader(byte[]) throws androidx.security.identity.MessageDecryptionException
    {
        androidx.security.identity.SoftwareIdentityCredential r0;
        byte[] r1, $r5, r9;
        java.nio.ByteBuffer r2;
        int $i0, $i1, $i2;
        javax.crypto.SecretKey $r4;
        java.lang.Throwable $r6, r10, r13;
        javax.crypto.Cipher r8;
        javax.crypto.spec.GCMParameterSpec r11;
        androidx.security.identity.MessageDecryptionException r12;

        r0 := @this: androidx.security.identity.SoftwareIdentityCredential;

        r1 := @parameter0: byte[];

        specialinvoke r0.<androidx.security.identity.SoftwareIdentityCredential: void ensureSessionEncryptionKey()>();

        r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(12);

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int,int)>(0, 0);

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int,int)>(4, 0);

        $i0 = r0.<androidx.security.identity.SoftwareIdentityCredential: int mSKReaderCounter>;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int,int)>(8, $i0);

     label1:
        r8 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/GCM/NoPadding");

        $r4 = r0.<androidx.security.identity.SoftwareIdentityCredential: javax.crypto.SecretKey mSKReader>;

        r11 = new javax.crypto.spec.GCMParameterSpec;

        $r5 = virtualinvoke r2.<java.nio.ByteBuffer: byte[] array()>();

        specialinvoke r11.<javax.crypto.spec.GCMParameterSpec: void <init>(int,byte[])>(128, $r5);

        virtualinvoke r8.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(2, $r4, r11);

        r9 = virtualinvoke r8.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r1);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r10 = $r6;

        r12 = new androidx.security.identity.MessageDecryptionException;

        specialinvoke r12.<androidx.security.identity.MessageDecryptionException: void <init>(java.lang.String,java.lang.Throwable)>("Error decrypting message", r10);

        r13 = (java.lang.Throwable) r12;

        throw r13;

     label4:
        $i1 = r0.<androidx.security.identity.SoftwareIdentityCredential: int mSKReaderCounter>;

        $i2 = $i1 + 1;

        r0.<androidx.security.identity.SoftwareIdentityCredential: int mSKReaderCounter> = $i2;

        return r9;

        catch javax.crypto.BadPaddingException from label1 to label2 with label3;
        catch javax.crypto.IllegalBlockSizeException from label1 to label2 with label3;
        catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label3;
        catch java.security.InvalidKeyException from label1 to label2 with label3;
        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch javax.crypto.NoSuchPaddingException from label1 to label2 with label3;
    }

    public java.util.Collection getCredentialKeyCertificateChain()
    {
        androidx.security.identity.SoftwareIdentityCredential r0;
        androidx.security.identity.CredentialData $r1;
        java.util.Collection $r2;

        r0 := @this: androidx.security.identity.SoftwareIdentityCredential;

        $r1 = r0.<androidx.security.identity.SoftwareIdentityCredential: androidx.security.identity.CredentialData mData>;

        $r2 = virtualinvoke $r1.<androidx.security.identity.CredentialData: java.util.Collection getCredentialKeyCertificateChain()>();

        return $r2;
    }

    private void ensureCryptoObject()
    {
        androidx.security.identity.SoftwareIdentityCredential r0;
        java.lang.String r1;
        java.security.KeyStore$Entry r2;
        javax.crypto.SecretKey r3;
        javax.crypto.Cipher r4;
        androidx.security.identity.CredentialData $r5;
        boolean $z0;
        java.security.KeyStore$SecretKeyEntry $r6;
        androidx.biometric.BiometricPrompt$CryptoObject $r7;
        java.lang.Throwable $r8, r11;
        java.lang.RuntimeException $r9;
        java.security.KeyStore r10;

        r0 := @this: androidx.security.identity.SoftwareIdentityCredential;

        $r5 = r0.<androidx.security.identity.SoftwareIdentityCredential: androidx.security.identity.CredentialData mData>;

        r1 = virtualinvoke $r5.<androidx.security.identity.CredentialData: java.lang.String getPerReaderSessionKeyAlias()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        r10 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>("AndroidKeyStore");

        virtualinvoke r10.<java.security.KeyStore: void load(java.security.KeyStore$LoadStoreParameter)>(null);

        r2 = virtualinvoke r10.<java.security.KeyStore: java.security.KeyStore$Entry getEntry(java.lang.String,java.security.KeyStore$ProtectionParameter)>(r1, null);

        $r6 = (java.security.KeyStore$SecretKeyEntry) r2;

        r3 = virtualinvoke $r6.<java.security.KeyStore$SecretKeyEntry: javax.crypto.SecretKey getSecretKey()>();

        r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/GCM/NoPadding");

        virtualinvoke r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, r3);

        $r7 = new androidx.biometric.BiometricPrompt$CryptoObject;

        specialinvoke $r7.<androidx.biometric.BiometricPrompt$CryptoObject: void <init>(javax.crypto.Cipher)>(r4);

        r0.<androidx.security.identity.SoftwareIdentityCredential: androidx.biometric.BiometricPrompt$CryptoObject mCryptoObject> = $r7;

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        r11 = $r8;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error creating Cipher for perReaderSessionKey", r11);

        throw $r9;

     label4:
        return;

        catch java.security.cert.CertificateException from label1 to label2 with label3;
        catch javax.crypto.NoSuchPaddingException from label1 to label2 with label3;
        catch java.security.InvalidKeyException from label1 to label2 with label3;
        catch java.io.IOException from label1 to label2 with label3;
        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch java.security.KeyStoreException from label1 to label2 with label3;
        catch java.security.UnrecoverableEntryException from label1 to label2 with label3;
    }

    private void ensureAuthKey() throws androidx.security.identity.NoAuthenticationKeyAvailableException
    {
        androidx.security.identity.SoftwareIdentityCredential r0;
        android.util.Pair r1;
        java.security.PrivateKey $r2, $r5;
        boolean $z0, $z1;
        androidx.security.identity.CredentialData $r3;
        java.lang.Object $r4, $r6;
        byte[] $r7;
        androidx.security.identity.NoAuthenticationKeyAvailableException r9;
        java.lang.Throwable r10;

        r0 := @this: androidx.security.identity.SoftwareIdentityCredential;

        $r2 = r0.<androidx.security.identity.SoftwareIdentityCredential: java.security.PrivateKey mAuthKey>;

        if $r2 == null goto label1;

        return;

     label1:
        $r3 = r0.<androidx.security.identity.SoftwareIdentityCredential: androidx.security.identity.CredentialData mData>;

        $z1 = r0.<androidx.security.identity.SoftwareIdentityCredential: boolean mAllowUsingExhaustedKeys>;

        $z0 = r0.<androidx.security.identity.SoftwareIdentityCredential: boolean mAllowUsingExpiredKeys>;

        r1 = virtualinvoke $r3.<androidx.security.identity.CredentialData: android.util.Pair selectAuthenticationKey(boolean,boolean)>($z1, $z0);

        if r1 != null goto label2;

        r9 = new androidx.security.identity.NoAuthenticationKeyAvailableException;

        specialinvoke r9.<androidx.security.identity.NoAuthenticationKeyAvailableException: void <init>(java.lang.String)>("No authentication key available for signing");

        r10 = (java.lang.Throwable) r9;

        throw r10;

     label2:
        $r4 = r1.<android.util.Pair: java.lang.Object first>;

        $r5 = (java.security.PrivateKey) $r4;

        r0.<androidx.security.identity.SoftwareIdentityCredential: java.security.PrivateKey mAuthKey> = $r5;

        $r6 = r1.<android.util.Pair: java.lang.Object second>;

        $r7 = (byte[]) $r6;

        r0.<androidx.security.identity.SoftwareIdentityCredential: byte[] mAuthKeyAssociatedData> = $r7;

        return;
    }

    public void setAllowUsingExhaustedKeys(boolean)
    {
        androidx.security.identity.SoftwareIdentityCredential r0;
        boolean z0;

        r0 := @this: androidx.security.identity.SoftwareIdentityCredential;

        z0 := @parameter0: boolean;

        r0.<androidx.security.identity.SoftwareIdentityCredential: boolean mAllowUsingExhaustedKeys> = z0;

        return;
    }

    public void setAllowUsingExpiredKeys(boolean)
    {
        androidx.security.identity.SoftwareIdentityCredential r0;
        boolean z0;

        r0 := @this: androidx.security.identity.SoftwareIdentityCredential;

        z0 := @parameter0: boolean;

        r0.<androidx.security.identity.SoftwareIdentityCredential: boolean mAllowUsingExpiredKeys> = z0;

        return;
    }

    public androidx.biometric.BiometricPrompt$CryptoObject getCryptoObject()
    {
        androidx.security.identity.SoftwareIdentityCredential r0;
        androidx.biometric.BiometricPrompt$CryptoObject $r1;

        r0 := @this: androidx.security.identity.SoftwareIdentityCredential;

        specialinvoke r0.<androidx.security.identity.SoftwareIdentityCredential: void ensureCryptoObject()>();

        $r1 = r0.<androidx.security.identity.SoftwareIdentityCredential: androidx.biometric.BiometricPrompt$CryptoObject mCryptoObject>;

        return $r1;
    }

    private boolean hasEphemeralKeyInSessionTranscript(byte[])
    {
        androidx.security.identity.SoftwareIdentityCredential r0;
        byte[] r1, r3, r4, $r10, $r12;
        java.security.spec.ECPoint r2;
        java.security.KeyPair $r5, $r6;
        java.security.PublicKey $r7;
        java.security.interfaces.ECPublicKey $r8;
        java.math.BigInteger $r9, $r11;
        boolean $z0, $z1;

        r0 := @this: androidx.security.identity.SoftwareIdentityCredential;

        r1 := @parameter0: byte[];

        $r5 = r0.<androidx.security.identity.SoftwareIdentityCredential: java.security.KeyPair mEphemeralKeyPair>;

        if $r5 != null goto label1;

        return 0;

     label1:
        $r6 = r0.<androidx.security.identity.SoftwareIdentityCredential: java.security.KeyPair mEphemeralKeyPair>;

        $r7 = virtualinvoke $r6.<java.security.KeyPair: java.security.PublicKey getPublic()>();

        $r8 = (java.security.interfaces.ECPublicKey) $r7;

        r2 = interfaceinvoke $r8.<java.security.interfaces.ECPublicKey: java.security.spec.ECPoint getW()>();

        $r9 = virtualinvoke r2.<java.security.spec.ECPoint: java.math.BigInteger getAffineX()>();

        $r10 = virtualinvoke $r9.<java.math.BigInteger: byte[] toByteArray()>();

        r3 = staticinvoke <androidx.security.identity.Util: byte[] stripLeadingZeroes(byte[])>($r10);

        $r11 = virtualinvoke r2.<java.security.spec.ECPoint: java.math.BigInteger getAffineY()>();

        $r12 = virtualinvoke $r11.<java.math.BigInteger: byte[] toByteArray()>();

        r4 = staticinvoke <androidx.security.identity.Util: byte[] stripLeadingZeroes(byte[])>($r12);

        $z0 = staticinvoke <androidx.security.identity.Util: boolean hasSubByteArray(byte[],byte[])>(r1, r3);

        if $z0 != 0 goto label2;

        $z1 = staticinvoke <androidx.security.identity.Util: boolean hasSubByteArray(byte[],byte[])>(r1, r4);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        return 1;
    }

    private boolean didUserAuth()
    {
        androidx.security.identity.SoftwareIdentityCredential r0;
        boolean $z0, $z1, $z2;

        r0 := @this: androidx.security.identity.SoftwareIdentityCredential;

        $z0 = r0.<androidx.security.identity.SoftwareIdentityCredential: boolean mDidUserAuthAlreadyCalled>;

        if $z0 != 0 goto label1;

        $z2 = specialinvoke r0.<androidx.security.identity.SoftwareIdentityCredential: boolean didUserAuthNoCache()>();

        r0.<androidx.security.identity.SoftwareIdentityCredential: boolean mDidUserAuthResult> = $z2;

        r0.<androidx.security.identity.SoftwareIdentityCredential: boolean mDidUserAuthAlreadyCalled> = 1;

     label1:
        $z1 = r0.<androidx.security.identity.SoftwareIdentityCredential: boolean mDidUserAuthResult>;

        return $z1;
    }

    private boolean didUserAuthNoCache()
    {
        androidx.security.identity.SoftwareIdentityCredential r0;
        byte[] r1;
        androidx.biometric.BiometricPrompt$CryptoObject $r2, $r3;
        java.lang.Throwable $r5, r7;
        javax.crypto.Cipher r6;

        r0 := @this: androidx.security.identity.SoftwareIdentityCredential;

        $r2 = r0.<androidx.security.identity.SoftwareIdentityCredential: androidx.biometric.BiometricPrompt$CryptoObject mCryptoObject>;

        if $r2 != null goto label1;

        return 0;

     label1:
        $r3 = r0.<androidx.security.identity.SoftwareIdentityCredential: androidx.biometric.BiometricPrompt$CryptoObject mCryptoObject>;

        r6 = virtualinvoke $r3.<androidx.biometric.BiometricPrompt$CryptoObject: javax.crypto.Cipher getCipher()>();

        r1 = newarray (byte)[16];

        virtualinvoke r6.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r1);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r7 = $r5;

        return 0;

     label4:
        return 1;

        catch javax.crypto.IllegalBlockSizeException from label1 to label2 with label3;
        catch javax.crypto.BadPaddingException from label1 to label2 with label3;
    }

    public androidx.security.identity.ResultData getEntries(byte[], java.util.Map, byte[]) throws androidx.security.identity.NoAuthenticationKeyAvailableException, androidx.security.identity.InvalidReaderSignatureException, androidx.security.identity.InvalidRequestMessageException, androidx.security.identity.EphemeralPublicKeyNotFoundException
    {
        androidx.security.identity.SoftwareIdentityCredential r0;
        byte[] r1, r3, r7, r8, $r9, $r17, $r19, $r24, $r40, $r42, $r49, $r66, r75, r76, r82;
        java.util.Map r2;
        java.util.HashMap r4;
        co.nstant.in.cbor.CborEncoder r5, r95;
        co.nstant.in.cbor.model.DataItem r6, $r25, $r30, $r36, $r37, $r39, $r50, $r52, $r58, $r59, $r60, r73;
        java.util.List $r14, $r34, $r56;
        java.lang.Object $r15, $r35, $r44, $r57;
        androidx.security.identity.SimpleResultData $r18;
        co.nstant.in.cbor.builder.ArrayBuilder $r22, $r23, $r26, $r29, $r31, $r47, $r48, $r51, $r53;
        androidx.security.identity.CredentialData $r27;
        java.lang.String $r28;
        co.nstant.in.cbor.builder.AbstractBuilder $r32, $r54;
        co.nstant.in.cbor.CborBuilder $r33, $r55, r78, r90, r93, r97;
        java.security.PrivateKey $r38;
        int $i0;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r43;
        java.security.cert.X509Certificate $r45;
        java.lang.Throwable $r68, $r70, r81, r84, r99, r100, r101, r102, r103, r104;
        java.util.Collection r72;
        java.security.PublicKey r74;
        androidx.security.identity.SimpleResultData$Builder r77, r92;
        co.nstant.in.cbor.builder.MapBuilder r79;
        java.io.ByteArrayOutputStream r80, r94;
        java.security.Signature r83;
        androidx.security.identity.EphemeralPublicKeyNotFoundException r85;
        androidx.security.identity.InvalidReaderSignatureException r86, r87, r88, r89, r91;
        java.lang.RuntimeException r96, r98;

        r0 := @this: androidx.security.identity.SoftwareIdentityCredential;

        r1 := @parameter0: byte[];

        r2 := @parameter1: java.util.Map;

        r3 := @parameter2: byte[];

        $r9 = r0.<androidx.security.identity.SoftwareIdentityCredential: byte[] mSessionTranscript>;

        if $r9 == null goto label01;

        $r66 = r0.<androidx.security.identity.SoftwareIdentityCredential: byte[] mSessionTranscript>;

        $z2 = specialinvoke r0.<androidx.security.identity.SoftwareIdentityCredential: boolean hasEphemeralKeyInSessionTranscript(byte[])>($r66);

        if $z2 != 0 goto label01;

        r85 = new androidx.security.identity.EphemeralPublicKeyNotFoundException;

        specialinvoke r85.<androidx.security.identity.EphemeralPublicKeyNotFoundException: void <init>(java.lang.String)>("Did not find ephemeral public key X and Y coordinates in SessionTranscript (make sure leading zeroes are not used)");

        r99 = (java.lang.Throwable) r85;

        throw r99;

     label01:
        r4 = staticinvoke <androidx.security.identity.SoftwareIdentityCredential: java.util.HashMap parseRequestMessage(byte[])>(r1);

        r72 = null;

        if r3 == null goto label06;

        $r42 = r0.<androidx.security.identity.SoftwareIdentityCredential: byte[] mSessionTranscript>;

        if $r42 != null goto label02;

        r86 = new androidx.security.identity.InvalidReaderSignatureException;

        specialinvoke r86.<androidx.security.identity.InvalidReaderSignatureException: void <init>(java.lang.String)>("readerSignature non-null but sessionTranscript was null");

        r100 = (java.lang.Throwable) r86;

        throw r100;

     label02:
        if r1 != null goto label03;

        r87 = new androidx.security.identity.InvalidReaderSignatureException;

        specialinvoke r87.<androidx.security.identity.InvalidReaderSignatureException: void <init>(java.lang.String)>("readerSignature non-null but requestMessage was null");

        r101 = (java.lang.Throwable) r87;

        throw r101;

     label03:
        r73 = staticinvoke <androidx.security.identity.Util: co.nstant.in.cbor.model.DataItem cborDecode(byte[])>(r3);

        r72 = staticinvoke <androidx.security.identity.Util: java.util.Collection coseSign1GetX5Chain(co.nstant.in.cbor.model.DataItem)>(r73);

        $i0 = interfaceinvoke r72.<java.util.Collection: int size()>();

        if $i0 >= 1 goto label04;

        r88 = new androidx.security.identity.InvalidReaderSignatureException;

        specialinvoke r88.<androidx.security.identity.InvalidReaderSignatureException: void <init>(java.lang.String)>("No x5chain element in reader signature");

        r102 = (java.lang.Throwable) r88;

        throw r102;

     label04:
        $z0 = staticinvoke <androidx.security.identity.Util: boolean validateCertificateChain(java.util.Collection)>(r72);

        if $z0 != 0 goto label05;

        r89 = new androidx.security.identity.InvalidReaderSignatureException;

        specialinvoke r89.<androidx.security.identity.InvalidReaderSignatureException: void <init>(java.lang.String)>("Error validating certificate chain");

        r103 = (java.lang.Throwable) r89;

        throw r103;

     label05:
        $r43 = interfaceinvoke r72.<java.util.Collection: java.util.Iterator iterator()>();

        $r44 = interfaceinvoke $r43.<java.util.Iterator: java.lang.Object next()>();

        $r45 = (java.security.cert.X509Certificate) $r44;

        r74 = virtualinvoke $r45.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();

        r90 = new co.nstant.in.cbor.CborBuilder;

        specialinvoke r90.<co.nstant.in.cbor.CborBuilder: void <init>()>();

        $r47 = virtualinvoke r90.<co.nstant.in.cbor.CborBuilder: co.nstant.in.cbor.builder.ArrayBuilder addArray()>();

        $r48 = virtualinvoke $r47.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.ArrayBuilder add(java.lang.String)>("ReaderAuthentication");

        $r49 = r0.<androidx.security.identity.SoftwareIdentityCredential: byte[] mSessionTranscript>;

        $r50 = staticinvoke <androidx.security.identity.Util: co.nstant.in.cbor.model.DataItem cborDecode(byte[])>($r49);

        $r51 = virtualinvoke $r48.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.ArrayBuilder add(co.nstant.in.cbor.model.DataItem)>($r50);

        $r52 = staticinvoke <androidx.security.identity.Util: co.nstant.in.cbor.model.DataItem cborBuildTaggedByteString(byte[])>(r1);

        $r53 = virtualinvoke $r51.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.ArrayBuilder add(co.nstant.in.cbor.model.DataItem)>($r52);

        $r54 = virtualinvoke $r53.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.AbstractBuilder end()>();

        $r55 = (co.nstant.in.cbor.CborBuilder) $r54;

        $r56 = virtualinvoke $r55.<co.nstant.in.cbor.CborBuilder: java.util.List build()>();

        $r57 = interfaceinvoke $r56.<java.util.List: java.lang.Object get(int)>(0);

        $r58 = (co.nstant.in.cbor.model.DataItem) $r57;

        r75 = staticinvoke <androidx.security.identity.Util: byte[] cborEncode(co.nstant.in.cbor.model.DataItem)>($r58);

        $r59 = staticinvoke <androidx.security.identity.Util: co.nstant.in.cbor.model.DataItem cborBuildTaggedByteString(byte[])>(r75);

        r76 = staticinvoke <androidx.security.identity.Util: byte[] cborEncode(co.nstant.in.cbor.model.DataItem)>($r59);

        $r60 = staticinvoke <androidx.security.identity.Util: co.nstant.in.cbor.model.DataItem cborDecode(byte[])>(r3);

        $z1 = staticinvoke <androidx.security.identity.Util: boolean coseSign1CheckSignature(co.nstant.in.cbor.model.DataItem,byte[],java.security.PublicKey)>($r60, r76, r74);

        if $z1 != 0 goto label06;

        r91 = new androidx.security.identity.InvalidReaderSignatureException;

        specialinvoke r91.<androidx.security.identity.InvalidReaderSignatureException: void <init>(java.lang.String)>("Reader signature check failed");

        r104 = (java.lang.Throwable) r91;

        throw r104;

     label06:
        r92 = new androidx.security.identity.SimpleResultData$Builder;

        specialinvoke r92.<androidx.security.identity.SimpleResultData$Builder: void <init>()>();

        r77 = r92;

        r93 = new co.nstant.in.cbor.CborBuilder;

        specialinvoke r93.<co.nstant.in.cbor.CborBuilder: void <init>()>();

        r78 = r93;

        r79 = virtualinvoke r78.<co.nstant.in.cbor.CborBuilder: co.nstant.in.cbor.builder.MapBuilder addMap()>();

        specialinvoke r0.<androidx.security.identity.SoftwareIdentityCredential: void retrieveValues(byte[],java.util.HashMap,java.util.Collection,java.util.Map,androidx.security.identity.SimpleResultData$Builder,co.nstant.in.cbor.builder.MapBuilder)>(r1, r4, r72, r2, r77, r79);

        r94 = new java.io.ByteArrayOutputStream;

        specialinvoke r94.<java.io.ByteArrayOutputStream: void <init>()>();

        r80 = r94;

        r95 = new co.nstant.in.cbor.CborEncoder;

        specialinvoke r95.<co.nstant.in.cbor.CborEncoder: void <init>(java.io.OutputStream)>(r80);

        r5 = r95;

        $r14 = virtualinvoke r78.<co.nstant.in.cbor.CborBuilder: java.util.List build()>();

        $r15 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>(0);

        r6 = (co.nstant.in.cbor.model.DataItem) $r15;

     label07:
        virtualinvoke r5.<co.nstant.in.cbor.CborEncoder: void encode(co.nstant.in.cbor.model.DataItem)>(r6);

     label08:
        goto label10;

     label09:
        $r70 := @caughtexception;

        r81 = $r70;

        r96 = new java.lang.RuntimeException;

        specialinvoke r96.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error encoding deviceNameSpace", r81);

        throw r96;

     label10:
        r82 = virtualinvoke r80.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        virtualinvoke r77.<androidx.security.identity.SimpleResultData$Builder: androidx.security.identity.SimpleResultData$Builder setAuthenticatedData(byte[])>(r82);

        $r17 = r0.<androidx.security.identity.SoftwareIdentityCredential: byte[] mSessionTranscript>;

        if $r17 == null goto label14;

        specialinvoke r0.<androidx.security.identity.SoftwareIdentityCredential: void ensureAuthKey()>();

        $r19 = r0.<androidx.security.identity.SoftwareIdentityCredential: byte[] mAuthKeyAssociatedData>;

        virtualinvoke r77.<androidx.security.identity.SimpleResultData$Builder: androidx.security.identity.SimpleResultData$Builder setStaticAuthenticationData(byte[])>($r19);

        r97 = new co.nstant.in.cbor.CborBuilder;

        specialinvoke r97.<co.nstant.in.cbor.CborBuilder: void <init>()>();

        $r22 = virtualinvoke r97.<co.nstant.in.cbor.CborBuilder: co.nstant.in.cbor.builder.ArrayBuilder addArray()>();

        $r23 = virtualinvoke $r22.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.ArrayBuilder add(java.lang.String)>("DeviceAuthentication");

        $r24 = r0.<androidx.security.identity.SoftwareIdentityCredential: byte[] mSessionTranscript>;

        $r25 = staticinvoke <androidx.security.identity.Util: co.nstant.in.cbor.model.DataItem cborDecode(byte[])>($r24);

        $r26 = virtualinvoke $r23.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.ArrayBuilder add(co.nstant.in.cbor.model.DataItem)>($r25);

        $r27 = r0.<androidx.security.identity.SoftwareIdentityCredential: androidx.security.identity.CredentialData mData>;

        $r28 = virtualinvoke $r27.<androidx.security.identity.CredentialData: java.lang.String getDocType()>();

        $r29 = virtualinvoke $r26.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.ArrayBuilder add(java.lang.String)>($r28);

        $r30 = staticinvoke <androidx.security.identity.Util: co.nstant.in.cbor.model.DataItem cborBuildTaggedByteString(byte[])>(r82);

        $r31 = virtualinvoke $r29.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.ArrayBuilder add(co.nstant.in.cbor.model.DataItem)>($r30);

        $r32 = virtualinvoke $r31.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.AbstractBuilder end()>();

        $r33 = (co.nstant.in.cbor.CborBuilder) $r32;

        $r34 = virtualinvoke $r33.<co.nstant.in.cbor.CborBuilder: java.util.List build()>();

        $r35 = interfaceinvoke $r34.<java.util.List: java.lang.Object get(int)>(0);

        $r36 = (co.nstant.in.cbor.model.DataItem) $r35;

        r7 = staticinvoke <androidx.security.identity.Util: byte[] cborEncode(co.nstant.in.cbor.model.DataItem)>($r36);

        $r37 = staticinvoke <androidx.security.identity.Util: co.nstant.in.cbor.model.DataItem cborBuildTaggedByteString(byte[])>(r7);

        r8 = staticinvoke <androidx.security.identity.Util: byte[] cborEncode(co.nstant.in.cbor.model.DataItem)>($r37);

     label11:
        r83 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>("SHA256withECDSA");

        $r38 = r0.<androidx.security.identity.SoftwareIdentityCredential: java.security.PrivateKey mAuthKey>;

        virtualinvoke r83.<java.security.Signature: void initSign(java.security.PrivateKey)>($r38);

        $r39 = staticinvoke <androidx.security.identity.Util: co.nstant.in.cbor.model.DataItem coseSign1Sign(java.security.Signature,byte[],byte[],java.util.Collection)>(r83, null, r8, null);

        $r40 = staticinvoke <androidx.security.identity.Util: byte[] cborEncode(co.nstant.in.cbor.model.DataItem)>($r39);

        virtualinvoke r77.<androidx.security.identity.SimpleResultData$Builder: androidx.security.identity.SimpleResultData$Builder setEcdsaSignature(byte[])>($r40);

     label12:
        goto label14;

     label13:
        $r68 := @caughtexception;

        r84 = $r68;

        r98 = new java.lang.RuntimeException;

        specialinvoke r98.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error signing DeviceAuthentication CBOR", r84);

        throw r98;

     label14:
        $r18 = virtualinvoke r77.<androidx.security.identity.SimpleResultData$Builder: androidx.security.identity.SimpleResultData build()>();

        return $r18;

        catch co.nstant.in.cbor.CborException from label07 to label08 with label09;
        catch java.security.NoSuchAlgorithmException from label11 to label12 with label13;
        catch java.security.InvalidKeyException from label11 to label12 with label13;
        catch java.security.cert.CertificateEncodingException from label11 to label12 with label13;
    }

    private void retrieveValues(byte[], java.util.HashMap, java.util.Collection, java.util.Map, androidx.security.identity.SimpleResultData$Builder, co.nstant.in.cbor.builder.MapBuilder)
    {
        androidx.security.identity.SoftwareIdentityCredential r0;
        byte[] r1;
        java.util.HashMap r2;
        java.util.Collection r3, r9, r11;
        java.util.Map r4;
        androidx.security.identity.SimpleResultData$Builder r5;
        co.nstant.in.cbor.builder.MapBuilder r6;
        java.util.Iterator r7;
        java.lang.String r8;
        androidx.security.identity.PersonalizationData$NamespaceData r10;
        java.util.Set $r12;
        boolean $z0;
        java.lang.Object $r13, $r14, $r16;
        androidx.security.identity.CredentialData $r15;

        r0 := @this: androidx.security.identity.SoftwareIdentityCredential;

        r1 := @parameter0: byte[];

        r2 := @parameter1: java.util.HashMap;

        r3 := @parameter2: java.util.Collection;

        r4 := @parameter3: java.util.Map;

        r5 := @parameter4: androidx.security.identity.SimpleResultData$Builder;

        r6 := @parameter5: co.nstant.in.cbor.builder.MapBuilder;

        $r12 = interfaceinvoke r4.<java.util.Map: java.util.Set keySet()>();

        r7 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r13 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.lang.String) $r13;

        $r14 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8);

        r9 = (java.util.Collection) $r14;

        $r15 = r0.<androidx.security.identity.SoftwareIdentityCredential: androidx.security.identity.CredentialData mData>;

        r10 = virtualinvoke $r15.<androidx.security.identity.CredentialData: androidx.security.identity.PersonalizationData$NamespaceData lookupNamespaceData(java.lang.String)>(r8);

        $r16 = virtualinvoke r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r8);

        r11 = (java.util.Collection) $r16;

        specialinvoke r0.<androidx.security.identity.SoftwareIdentityCredential: void retrieveValuesForNamespace(androidx.security.identity.SimpleResultData$Builder,co.nstant.in.cbor.builder.MapBuilder,java.util.Collection,byte[],java.util.Collection,java.util.Collection,java.lang.String,androidx.security.identity.PersonalizationData$NamespaceData)>(r5, r6, r9, r1, r11, r3, r8, r10);

        goto label1;

     label2:
        return;
    }

    private void retrieveValuesForNamespace(androidx.security.identity.SimpleResultData$Builder, co.nstant.in.cbor.builder.MapBuilder, java.util.Collection, byte[], java.util.Collection, java.util.Collection, java.lang.String, androidx.security.identity.PersonalizationData$NamespaceData)
    {
        androidx.security.identity.SoftwareIdentityCredential r0;
        androidx.security.identity.SimpleResultData$Builder r1;
        co.nstant.in.cbor.builder.MapBuilder r2, r20;
        java.util.Collection r3, r5, r6, r11;
        byte[] r4, r21;
        java.lang.String r7, r10;
        androidx.security.identity.PersonalizationData$NamespaceData r8;
        java.util.Iterator r9;
        int i0;
        co.nstant.in.cbor.model.DataItem r12;
        java.lang.Object $r13;
        co.nstant.in.cbor.model.UnicodeString $r15;
        boolean $z0, $z1;

        r0 := @this: androidx.security.identity.SoftwareIdentityCredential;

        r1 := @parameter0: androidx.security.identity.SimpleResultData$Builder;

        r2 := @parameter1: co.nstant.in.cbor.builder.MapBuilder;

        r3 := @parameter2: java.util.Collection;

        r4 := @parameter3: byte[];

        r5 := @parameter4: java.util.Collection;

        r6 := @parameter5: java.util.Collection;

        r7 := @parameter6: java.lang.String;

        r8 := @parameter7: androidx.security.identity.PersonalizationData$NamespaceData;

        r20 = null;

        r9 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r13 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.lang.String) $r13;

        r21 = null;

        if r8 == null goto label2;

        r21 = virtualinvoke r8.<androidx.security.identity.PersonalizationData$NamespaceData: byte[] getEntryValue(java.lang.String)>(r10);

     label2:
        if r21 != null goto label3;

        virtualinvoke r1.<androidx.security.identity.SimpleResultData$Builder: androidx.security.identity.SimpleResultData$Builder addErrorStatus(java.lang.String,java.lang.String,int)>(r7, r10, 1);

        goto label1;

     label3:
        if r4 == null goto label5;

        if r5 == null goto label4;

        $z0 = interfaceinvoke r5.<java.util.Collection: boolean contains(java.lang.Object)>(r10);

        if $z0 != 0 goto label5;

     label4:
        virtualinvoke r1.<androidx.security.identity.SimpleResultData$Builder: androidx.security.identity.SimpleResultData$Builder addErrorStatus(java.lang.String,java.lang.String,int)>(r7, r10, 3);

        goto label1;

     label5:
        r11 = virtualinvoke r8.<androidx.security.identity.PersonalizationData$NamespaceData: java.util.Collection getAccessControlProfileIds(java.lang.String)>(r10);

        i0 = specialinvoke r0.<androidx.security.identity.SoftwareIdentityCredential: int checkAccess(java.util.Collection,java.util.Collection)>(r11, r6);

        if i0 == 0 goto label6;

        virtualinvoke r1.<androidx.security.identity.SimpleResultData$Builder: androidx.security.identity.SimpleResultData$Builder addErrorStatus(java.lang.String,java.lang.String,int)>(r7, r10, i0);

        goto label1;

     label6:
        virtualinvoke r1.<androidx.security.identity.SimpleResultData$Builder: androidx.security.identity.SimpleResultData$Builder addEntry(java.lang.String,java.lang.String,byte[])>(r7, r10, r21);

        if r20 != null goto label7;

        r20 = virtualinvoke r2.<co.nstant.in.cbor.builder.MapBuilder: co.nstant.in.cbor.builder.MapBuilder putMap(java.lang.String)>(r7);

     label7:
        r12 = staticinvoke <androidx.security.identity.Util: co.nstant.in.cbor.model.DataItem cborDecode(byte[])>(r21);

        $r15 = new co.nstant.in.cbor.model.UnicodeString;

        specialinvoke $r15.<co.nstant.in.cbor.model.UnicodeString: void <init>(java.lang.String)>(r10);

        virtualinvoke r20.<co.nstant.in.cbor.builder.MapBuilder: co.nstant.in.cbor.builder.MapBuilder put(co.nstant.in.cbor.model.DataItem,co.nstant.in.cbor.model.DataItem)>($r15, r12);

        goto label1;

     label8:
        return;
    }

    private int checkAccessSingleProfile(androidx.security.identity.AccessControlProfile, java.util.Collection)
    {
        androidx.security.identity.SoftwareIdentityCredential r0;
        androidx.security.identity.AccessControlProfile r1;
        java.util.Collection r2;
        java.security.cert.X509Certificate r3, r6;
        byte[] r4, r7;
        java.util.Iterator r5;
        boolean $z0, $z1, $z2, $z3, $z4, z5;
        java.security.PublicKey $r8, $r10;
        java.lang.Object $r9;
        androidx.security.identity.CredentialData $r11;
        androidx.security.identity.AccessControlProfileId $r12;

        r0 := @this: androidx.security.identity.SoftwareIdentityCredential;

        r1 := @parameter0: androidx.security.identity.AccessControlProfile;

        r2 := @parameter1: java.util.Collection;

        $z0 = virtualinvoke r1.<androidx.security.identity.AccessControlProfile: boolean isUserAuthenticationRequired()>();

        if $z0 == 0 goto label1;

        $r11 = r0.<androidx.security.identity.SoftwareIdentityCredential: androidx.security.identity.CredentialData mData>;

        $r12 = virtualinvoke r1.<androidx.security.identity.AccessControlProfile: androidx.security.identity.AccessControlProfileId getAccessControlProfileId()>();

        $z3 = specialinvoke r0.<androidx.security.identity.SoftwareIdentityCredential: boolean didUserAuth()>();

        $z4 = virtualinvoke $r11.<androidx.security.identity.CredentialData: boolean checkUserAuthentication(androidx.security.identity.AccessControlProfileId,boolean)>($r12, $z3);

        if $z4 != 0 goto label1;

        return 4;

     label1:
        r3 = virtualinvoke r1.<androidx.security.identity.AccessControlProfile: java.security.cert.X509Certificate getReaderCertificate()>();

        if r3 == null goto label6;

        if r2 != null goto label2;

        return 5;

     label2:
        z5 = 0;

        $r8 = virtualinvoke r3.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();

        r4 = interfaceinvoke $r8.<java.security.PublicKey: byte[] getEncoded()>();

        r5 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r9 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.security.cert.X509Certificate) $r9;

        $r10 = virtualinvoke r6.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();

        r7 = interfaceinvoke $r10.<java.security.PublicKey: byte[] getEncoded()>();

        $z2 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r4, r7);

        if $z2 == 0 goto label4;

        z5 = 1;

        goto label5;

     label4:
        goto label3;

     label5:
        if z5 != 0 goto label6;

        return 5;

     label6:
        return 0;
    }

    private int checkAccess(java.util.Collection, java.util.Collection)
    {
        androidx.security.identity.SoftwareIdentityCredential r0;
        java.util.Collection r1, r2;
        java.util.Iterator r3;
        androidx.security.identity.AccessControlProfileId r4;
        androidx.security.identity.AccessControlProfile r5;
        boolean $z0;
        java.lang.Object $r6;
        androidx.security.identity.CredentialData $r7;
        int i0;

        r0 := @this: androidx.security.identity.SoftwareIdentityCredential;

        r1 := @parameter0: java.util.Collection;

        r2 := @parameter1: java.util.Collection;

        i0 = 6;

        r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (androidx.security.identity.AccessControlProfileId) $r6;

        $r7 = r0.<androidx.security.identity.SoftwareIdentityCredential: androidx.security.identity.CredentialData mData>;

        r5 = virtualinvoke $r7.<androidx.security.identity.CredentialData: androidx.security.identity.AccessControlProfile getAccessControlProfile(androidx.security.identity.AccessControlProfileId)>(r4);

        i0 = specialinvoke r0.<androidx.security.identity.SoftwareIdentityCredential: int checkAccessSingleProfile(androidx.security.identity.AccessControlProfile,java.util.Collection)>(r5, r2);

        if i0 != 0 goto label2;

        return i0;

     label2:
        goto label1;

     label3:
        return i0;
    }

    public void setAvailableAuthenticationKeys(int, int)
    {
        androidx.security.identity.SoftwareIdentityCredential r0;
        int i0, i1;
        androidx.security.identity.CredentialData $r1;

        r0 := @this: androidx.security.identity.SoftwareIdentityCredential;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<androidx.security.identity.SoftwareIdentityCredential: androidx.security.identity.CredentialData mData>;

        virtualinvoke $r1.<androidx.security.identity.CredentialData: void setAvailableAuthenticationKeys(int,int)>(i0, i1);

        return;
    }

    public java.util.Collection getAuthKeysNeedingCertification()
    {
        androidx.security.identity.SoftwareIdentityCredential r0;
        androidx.security.identity.CredentialData $r1;
        java.util.Collection $r2;

        r0 := @this: androidx.security.identity.SoftwareIdentityCredential;

        $r1 = r0.<androidx.security.identity.SoftwareIdentityCredential: androidx.security.identity.CredentialData mData>;

        $r2 = virtualinvoke $r1.<androidx.security.identity.CredentialData: java.util.Collection getAuthKeysNeedingCertification()>();

        return $r2;
    }

    public void storeStaticAuthenticationData(java.security.cert.X509Certificate, byte[]) throws androidx.security.identity.UnknownAuthenticationKeyException
    {
        androidx.security.identity.SoftwareIdentityCredential r0;
        java.security.cert.X509Certificate r1;
        byte[] r2;
        androidx.security.identity.CredentialData $r3;

        r0 := @this: androidx.security.identity.SoftwareIdentityCredential;

        r1 := @parameter0: java.security.cert.X509Certificate;

        r2 := @parameter1: byte[];

        $r3 = r0.<androidx.security.identity.SoftwareIdentityCredential: androidx.security.identity.CredentialData mData>;

        virtualinvoke $r3.<androidx.security.identity.CredentialData: void storeStaticAuthenticationData(java.security.cert.X509Certificate,android.icu.util.Calendar,byte[])>(r1, null, r2);

        return;
    }

    public void storeStaticAuthenticationData(java.security.cert.X509Certificate, android.icu.util.Calendar, byte[]) throws androidx.security.identity.UnknownAuthenticationKeyException
    {
        androidx.security.identity.SoftwareIdentityCredential r0;
        java.security.cert.X509Certificate r1;
        android.icu.util.Calendar r2;
        byte[] r3;
        androidx.security.identity.CredentialData $r4;

        r0 := @this: androidx.security.identity.SoftwareIdentityCredential;

        r1 := @parameter0: java.security.cert.X509Certificate;

        r2 := @parameter1: android.icu.util.Calendar;

        r3 := @parameter2: byte[];

        $r4 = r0.<androidx.security.identity.SoftwareIdentityCredential: androidx.security.identity.CredentialData mData>;

        virtualinvoke $r4.<androidx.security.identity.CredentialData: void storeStaticAuthenticationData(java.security.cert.X509Certificate,android.icu.util.Calendar,byte[])>(r1, r2, r3);

        return;
    }

    public int[] getAuthenticationDataUsageCount()
    {
        androidx.security.identity.SoftwareIdentityCredential r0;
        androidx.security.identity.CredentialData $r1;
        int[] $r2;

        r0 := @this: androidx.security.identity.SoftwareIdentityCredential;

        $r1 = r0.<androidx.security.identity.SoftwareIdentityCredential: androidx.security.identity.CredentialData mData>;

        $r2 = virtualinvoke $r1.<androidx.security.identity.CredentialData: int[] getAuthKeyUseCounts()>();

        return $r2;
    }

    public byte[] update(androidx.security.identity.PersonalizationData)
    {
        androidx.security.identity.SoftwareIdentityCredential r0;
        androidx.security.identity.PersonalizationData r1;
        java.util.Collection r2;
        java.security.PrivateKey r3;
        int i0, i1;
        co.nstant.in.cbor.model.DataItem r4;
        byte[] r5, r6, $r20;
        androidx.security.identity.CredentialData $r7, $r8, $r9, $r10, $r11, $r13, $r18, $r19;
        java.security.MessageDigest $r12;
        java.lang.String $r14, $r16, $r17, r23;
        android.content.Context $r15;
        java.lang.Throwable $r21, r24;
        java.lang.RuntimeException $r22;

        r0 := @this: androidx.security.identity.SoftwareIdentityCredential;

        r1 := @parameter0: androidx.security.identity.PersonalizationData;

     label1:
        $r7 = r0.<androidx.security.identity.SoftwareIdentityCredential: androidx.security.identity.CredentialData mData>;

        r23 = virtualinvoke $r7.<androidx.security.identity.CredentialData: java.lang.String getDocType()>();

        $r8 = r0.<androidx.security.identity.SoftwareIdentityCredential: androidx.security.identity.CredentialData mData>;

        r2 = virtualinvoke $r8.<androidx.security.identity.CredentialData: java.util.Collection getCredentialKeyCertificateChain()>();

        $r9 = r0.<androidx.security.identity.SoftwareIdentityCredential: androidx.security.identity.CredentialData mData>;

        r3 = virtualinvoke $r9.<androidx.security.identity.CredentialData: java.security.PrivateKey getCredentialKeyPrivate()>();

        $r10 = r0.<androidx.security.identity.SoftwareIdentityCredential: androidx.security.identity.CredentialData mData>;

        i0 = virtualinvoke $r10.<androidx.security.identity.CredentialData: int getAuthKeyCount()>();

        $r11 = r0.<androidx.security.identity.SoftwareIdentityCredential: androidx.security.identity.CredentialData mData>;

        i1 = virtualinvoke $r11.<androidx.security.identity.CredentialData: int getAuthMaxUsesPerKey()>();

        r4 = staticinvoke <androidx.security.identity.SoftwareWritableIdentityCredential: co.nstant.in.cbor.model.DataItem buildProofOfProvisioningWithSignature(java.lang.String,androidx.security.identity.PersonalizationData,java.security.PrivateKey)>(r23, r1, r3);

        r5 = staticinvoke <androidx.security.identity.Util: byte[] coseSign1GetData(co.nstant.in.cbor.model.DataItem)>(r4);

        $r12 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-256");

        r6 = virtualinvoke $r12.<java.security.MessageDigest: byte[] digest(byte[])>(r5);

        $r13 = r0.<androidx.security.identity.SoftwareIdentityCredential: androidx.security.identity.CredentialData mData>;

        virtualinvoke $r13.<androidx.security.identity.CredentialData: void deleteKeysForReplacement()>();

        $r15 = r0.<androidx.security.identity.SoftwareIdentityCredential: android.content.Context mContext>;

        $r16 = r0.<androidx.security.identity.SoftwareIdentityCredential: java.lang.String mCredentialName>;

        $r14 = r0.<androidx.security.identity.SoftwareIdentityCredential: java.lang.String mCredentialName>;

        $r17 = staticinvoke <androidx.security.identity.CredentialData: java.lang.String getAliasFromCredentialName(java.lang.String)>($r14);

        $r18 = staticinvoke <androidx.security.identity.CredentialData: androidx.security.identity.CredentialData createCredentialData(android.content.Context,java.lang.String,java.lang.String,java.lang.String,java.util.Collection,androidx.security.identity.PersonalizationData,byte[],boolean)>($r15, r23, $r16, $r17, r2, r1, r6, 1);

        r0.<androidx.security.identity.SoftwareIdentityCredential: androidx.security.identity.CredentialData mData> = $r18;

        $r19 = r0.<androidx.security.identity.SoftwareIdentityCredential: androidx.security.identity.CredentialData mData>;

        virtualinvoke $r19.<androidx.security.identity.CredentialData: void setAvailableAuthenticationKeys(int,int)>(i0, i1);

        $r20 = staticinvoke <androidx.security.identity.Util: byte[] cborEncode(co.nstant.in.cbor.model.DataItem)>(r4);

     label2:
        return $r20;

     label3:
        $r21 := @caughtexception;

        r24 = $r21;

        $r22 = new java.lang.RuntimeException;

        specialinvoke $r22.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error digesting ProofOfProvisioning", r24);

        throw $r22;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

