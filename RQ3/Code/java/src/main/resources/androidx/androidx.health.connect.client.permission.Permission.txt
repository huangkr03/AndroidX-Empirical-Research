androidx.health.connect.client.permission.Permission
<androidx.health.connect.client.permission.Permission: androidx.health.connect.client.permission.Permission$Companion Companion>
<androidx.health.connect.client.permission.Permission: kotlin.reflect.KClass recordType>
<androidx.health.connect.client.permission.Permission: int accessType>
    public void <init>(kotlin.reflect.KClass, int)
    {
        androidx.health.connect.client.permission.Permission r0;
        kotlin.reflect.KClass r1;
        int i0;

        r0 := @this: androidx.health.connect.client.permission.Permission;

        r1 := @parameter0: kotlin.reflect.KClass;

        i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "recordType");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.health.connect.client.permission.Permission: kotlin.reflect.KClass recordType> = r1;

        r0.<androidx.health.connect.client.permission.Permission: int accessType> = i0;

        return;
    }

    public final kotlin.reflect.KClass getRecordType$health_connect_client_release()
    {
        androidx.health.connect.client.permission.Permission r0;
        kotlin.reflect.KClass $r1;

        r0 := @this: androidx.health.connect.client.permission.Permission;

        $r1 = r0.<androidx.health.connect.client.permission.Permission: kotlin.reflect.KClass recordType>;

        return $r1;
    }

    public final int getAccessType$health_connect_client_release()
    {
        androidx.health.connect.client.permission.Permission r0;
        int $i0;

        r0 := @this: androidx.health.connect.client.permission.Permission;

        $i0 = r0.<androidx.health.connect.client.permission.Permission: int accessType>;

        return $i0;
    }

    public static void getAccessType$health_connect_client_release$annotations()
    {
        return;
    }

    public boolean equals(java.lang.Object)
    {
        androidx.health.connect.client.permission.Permission r0, $r2, $r5;
        java.lang.Object r1;
        boolean $z0, $z1;
        kotlin.reflect.KClass $r3, $r4;
        int $i0, $i1;

        r0 := @this: androidx.health.connect.client.permission.Permission;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof androidx.health.connect.client.permission.Permission;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r4 = r0.<androidx.health.connect.client.permission.Permission: kotlin.reflect.KClass recordType>;

        $r2 = (androidx.health.connect.client.permission.Permission) r1;

        $r3 = $r2.<androidx.health.connect.client.permission.Permission: kotlin.reflect.KClass recordType>;

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, $r3);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        $i1 = r0.<androidx.health.connect.client.permission.Permission: int accessType>;

        $r5 = (androidx.health.connect.client.permission.Permission) r1;

        $i0 = $r5.<androidx.health.connect.client.permission.Permission: int accessType>;

        if $i1 == $i0 goto label4;

        return 0;

     label4:
        return 1;
    }

    public int hashCode()
    {
        androidx.health.connect.client.permission.Permission r0;
        kotlin.reflect.KClass $r1;
        int $i0, $i1, i2, i3;

        r0 := @this: androidx.health.connect.client.permission.Permission;

        $r1 = r0.<androidx.health.connect.client.permission.Permission: kotlin.reflect.KClass recordType>;

        i2 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i1 = 31 * i2;

        $i0 = r0.<androidx.health.connect.client.permission.Permission: int accessType>;

        i3 = $i1 + $i0;

        return i3;
    }

    public static final androidx.health.connect.client.permission.Permission createReadPermission(kotlin.reflect.KClass)
    {
        kotlin.reflect.KClass r0;
        androidx.health.connect.client.permission.Permission$Companion $r1;
        androidx.health.connect.client.permission.Permission $r2;

        r0 := @parameter0: kotlin.reflect.KClass;

        $r1 = <androidx.health.connect.client.permission.Permission: androidx.health.connect.client.permission.Permission$Companion Companion>;

        $r2 = virtualinvoke $r1.<androidx.health.connect.client.permission.Permission$Companion: androidx.health.connect.client.permission.Permission createReadPermission(kotlin.reflect.KClass)>(r0);

        return $r2;
    }

    public static final androidx.health.connect.client.permission.Permission createWritePermission(kotlin.reflect.KClass)
    {
        kotlin.reflect.KClass r0;
        androidx.health.connect.client.permission.Permission$Companion $r1;
        androidx.health.connect.client.permission.Permission $r2;

        r0 := @parameter0: kotlin.reflect.KClass;

        $r1 = <androidx.health.connect.client.permission.Permission: androidx.health.connect.client.permission.Permission$Companion Companion>;

        $r2 = virtualinvoke $r1.<androidx.health.connect.client.permission.Permission$Companion: androidx.health.connect.client.permission.Permission createWritePermission(kotlin.reflect.KClass)>(r0);

        return $r2;
    }

    static void <clinit>()
    {
        androidx.health.connect.client.permission.Permission$Companion $r0;

        $r0 = new androidx.health.connect.client.permission.Permission$Companion;

        specialinvoke $r0.<androidx.health.connect.client.permission.Permission$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.health.connect.client.permission.Permission: androidx.health.connect.client.permission.Permission$Companion Companion> = $r0;

        return;
    }

androidx.health.connect.client.permission.Permission$Companion
    private void <init>()
    {
        androidx.health.connect.client.permission.Permission$Companion r0;

        r0 := @this: androidx.health.connect.client.permission.Permission$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final androidx.health.connect.client.permission.Permission createReadPermission(kotlin.reflect.KClass)
    {
        androidx.health.connect.client.permission.Permission$Companion r0;
        kotlin.reflect.KClass r1;
        androidx.health.connect.client.permission.Permission $r2;

        r0 := @this: androidx.health.connect.client.permission.Permission$Companion;

        r1 := @parameter0: kotlin.reflect.KClass;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "recordType");

        $r2 = new androidx.health.connect.client.permission.Permission;

        specialinvoke $r2.<androidx.health.connect.client.permission.Permission: void <init>(kotlin.reflect.KClass,int)>(r1, 1);

        return $r2;
    }

    public final androidx.health.connect.client.permission.Permission createWritePermission(kotlin.reflect.KClass)
    {
        androidx.health.connect.client.permission.Permission$Companion r0;
        kotlin.reflect.KClass r1;
        androidx.health.connect.client.permission.Permission $r2;

        r0 := @this: androidx.health.connect.client.permission.Permission$Companion;

        r1 := @parameter0: kotlin.reflect.KClass;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "recordType");

        $r2 = new androidx.health.connect.client.permission.Permission;

        specialinvoke $r2.<androidx.health.connect.client.permission.Permission: void <init>(kotlin.reflect.KClass,int)>(r1, 2);

        return $r2;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.health.connect.client.permission.Permission$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.health.connect.client.permission.Permission$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.health.connect.client.permission.Permission$Companion: void <init>()>();

        return;
    }

