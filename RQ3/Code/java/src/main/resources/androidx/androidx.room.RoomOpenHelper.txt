androidx.room.RoomOpenHelper
<androidx.room.RoomOpenHelper: androidx.room.RoomOpenHelper$Companion Companion>
<androidx.room.RoomOpenHelper: androidx.room.DatabaseConfiguration configuration>
<androidx.room.RoomOpenHelper: androidx.room.RoomOpenHelper$Delegate delegate>
<androidx.room.RoomOpenHelper: java.lang.String identityHash>
<androidx.room.RoomOpenHelper: java.lang.String legacyHash>
    public void <init>(androidx.room.DatabaseConfiguration, androidx.room.RoomOpenHelper$Delegate, java.lang.String, java.lang.String)
    {
        androidx.room.RoomOpenHelper r0;
        androidx.room.DatabaseConfiguration r1;
        androidx.room.RoomOpenHelper$Delegate r2;
        java.lang.String r3, r4;
        int $i0;

        r0 := @this: androidx.room.RoomOpenHelper;

        r1 := @parameter0: androidx.room.DatabaseConfiguration;

        r2 := @parameter1: androidx.room.RoomOpenHelper$Delegate;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "configuration");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "delegate");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "identityHash");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "legacyHash");

        $i0 = r2.<androidx.room.RoomOpenHelper$Delegate: int version>;

        specialinvoke r0.<androidx.sqlite.db.SupportSQLiteOpenHelper$Callback: void <init>(int)>($i0);

        r0.<androidx.room.RoomOpenHelper: androidx.room.DatabaseConfiguration configuration> = r1;

        r0.<androidx.room.RoomOpenHelper: androidx.room.RoomOpenHelper$Delegate delegate> = r2;

        r0.<androidx.room.RoomOpenHelper: java.lang.String identityHash> = r3;

        r0.<androidx.room.RoomOpenHelper: java.lang.String legacyHash> = r4;

        return;
    }

    public void <init>(androidx.room.DatabaseConfiguration, androidx.room.RoomOpenHelper$Delegate, java.lang.String)
    {
        androidx.room.RoomOpenHelper r0;
        androidx.room.DatabaseConfiguration r1;
        androidx.room.RoomOpenHelper$Delegate r2;
        java.lang.String r3;

        r0 := @this: androidx.room.RoomOpenHelper;

        r1 := @parameter0: androidx.room.DatabaseConfiguration;

        r2 := @parameter1: androidx.room.RoomOpenHelper$Delegate;

        r3 := @parameter2: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "configuration");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "delegate");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "legacyHash");

        specialinvoke r0.<androidx.room.RoomOpenHelper: void <init>(androidx.room.DatabaseConfiguration,androidx.room.RoomOpenHelper$Delegate,java.lang.String,java.lang.String)>(r1, r2, "", r3);

        return;
    }

    public void onConfigure(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.RoomOpenHelper r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;

        r0 := @this: androidx.room.RoomOpenHelper;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "db");

        specialinvoke r0.<androidx.sqlite.db.SupportSQLiteOpenHelper$Callback: void onConfigure(androidx.sqlite.db.SupportSQLiteDatabase)>(r1);

        return;
    }

    public void onCreate(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.RoomOpenHelper r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        boolean z0, $z1;
        androidx.room.RoomOpenHelper$ValidationResult r2;
        androidx.room.RoomOpenHelper$Companion $r3;
        androidx.room.RoomOpenHelper$Delegate $r4, $r5, $r6;
        java.lang.IllegalStateException $r7;
        java.lang.StringBuilder $r8, $r9, $r11;
        java.lang.String $r10, $r12;

        r0 := @this: androidx.room.RoomOpenHelper;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "db");

        $r3 = <androidx.room.RoomOpenHelper: androidx.room.RoomOpenHelper$Companion Companion>;

        z0 = virtualinvoke $r3.<androidx.room.RoomOpenHelper$Companion: boolean hasEmptySchema$room_runtime_release(androidx.sqlite.db.SupportSQLiteDatabase)>(r1);

        $r4 = r0.<androidx.room.RoomOpenHelper: androidx.room.RoomOpenHelper$Delegate delegate>;

        virtualinvoke $r4.<androidx.room.RoomOpenHelper$Delegate: void createAllTables(androidx.sqlite.db.SupportSQLiteDatabase)>(r1);

        if z0 != 0 goto label1;

        $r6 = r0.<androidx.room.RoomOpenHelper: androidx.room.RoomOpenHelper$Delegate delegate>;

        r2 = virtualinvoke $r6.<androidx.room.RoomOpenHelper$Delegate: androidx.room.RoomOpenHelper$ValidationResult onValidateSchema(androidx.sqlite.db.SupportSQLiteDatabase)>(r1);

        $z1 = r2.<androidx.room.RoomOpenHelper$ValidationResult: boolean isValid>;

        if $z1 != 0 goto label1;

        $r7 = new java.lang.IllegalStateException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Pre-packaged database has an invalid schema: ");

        $r10 = r2.<androidx.room.RoomOpenHelper$ValidationResult: java.lang.String expectedFoundMsg>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label1:
        specialinvoke r0.<androidx.room.RoomOpenHelper: void updateIdentity(androidx.sqlite.db.SupportSQLiteDatabase)>(r1);

        $r5 = r0.<androidx.room.RoomOpenHelper: androidx.room.RoomOpenHelper$Delegate delegate>;

        virtualinvoke $r5.<androidx.room.RoomOpenHelper$Delegate: void onCreate(androidx.sqlite.db.SupportSQLiteDatabase)>(r1);

        return;
    }

    public void onUpgrade(androidx.sqlite.db.SupportSQLiteDatabase, int, int)
    {
        androidx.room.RoomOpenHelper r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        int i0, i1;
        androidx.room.DatabaseConfiguration r2, r3, $r8;
        java.util.List r4;
        java.util.Iterator r5;
        java.lang.Object r6;
        androidx.room.migration.Migration r7;
        java.lang.IllegalStateException $r9, $r23;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r14, $r15, $r24, $r25, $r27;
        java.lang.String $r16, $r26, $r28;
        boolean $z3, $z4, $z5, z6;
        androidx.room.RoomOpenHelper$Delegate $r17, $r18, $r20, $r21, $r22;
        androidx.room.RoomDatabase$MigrationContainer $r19;
        java.lang.Iterable $r29;
        androidx.room.RoomOpenHelper$ValidationResult $r30;

        r0 := @this: androidx.room.RoomOpenHelper;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "db");

        z6 = 0;

        $r8 = r0.<androidx.room.RoomOpenHelper: androidx.room.DatabaseConfiguration configuration>;

        if $r8 == null goto label5;

        r3 = $r8;

        $r19 = r3.<androidx.room.DatabaseConfiguration: androidx.room.RoomDatabase$MigrationContainer migrationContainer>;

        r4 = virtualinvoke $r19.<androidx.room.RoomDatabase$MigrationContainer: java.util.List findMigrationPath(int,int)>(i0, i1);

        if r4 == null goto label4;

        $r20 = r0.<androidx.room.RoomOpenHelper: androidx.room.RoomOpenHelper$Delegate delegate>;

        virtualinvoke $r20.<androidx.room.RoomOpenHelper$Delegate: void onPreMigrate(androidx.sqlite.db.SupportSQLiteDatabase)>(r1);

        $r29 = (java.lang.Iterable) r4;

        r5 = interfaceinvoke $r29.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z4 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label2;

        r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (androidx.room.migration.Migration) r6;

        virtualinvoke r7.<androidx.room.migration.Migration: void migrate(androidx.sqlite.db.SupportSQLiteDatabase)>(r1);

        goto label1;

     label2:
        $r21 = r0.<androidx.room.RoomOpenHelper: androidx.room.RoomOpenHelper$Delegate delegate>;

        $r30 = virtualinvoke $r21.<androidx.room.RoomOpenHelper$Delegate: androidx.room.RoomOpenHelper$ValidationResult onValidateSchema(androidx.sqlite.db.SupportSQLiteDatabase)>(r1);

        $z5 = $r30.<androidx.room.RoomOpenHelper$ValidationResult: boolean isValid>;

        if $z5 != 0 goto label3;

        $r23 = new java.lang.IllegalStateException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Migration didn\'t properly handle: ");

        $r26 = $r30.<androidx.room.RoomOpenHelper$ValidationResult: java.lang.String expectedFoundMsg>;

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r28);

        throw $r23;

     label3:
        $r22 = r0.<androidx.room.RoomOpenHelper: androidx.room.RoomOpenHelper$Delegate delegate>;

        virtualinvoke $r22.<androidx.room.RoomOpenHelper$Delegate: void onPostMigrate(androidx.sqlite.db.SupportSQLiteDatabase)>(r1);

        specialinvoke r0.<androidx.room.RoomOpenHelper: void updateIdentity(androidx.sqlite.db.SupportSQLiteDatabase)>(r1);

        z6 = 1;

     label4:
        goto label5;

     label5:
        if z6 != 0 goto label7;

        r2 = r0.<androidx.room.RoomOpenHelper: androidx.room.DatabaseConfiguration configuration>;

        if r2 == null goto label6;

        $z3 = virtualinvoke r2.<androidx.room.DatabaseConfiguration: boolean isMigrationRequired(int,int)>(i0, i1);

        if $z3 != 0 goto label6;

        $r17 = r0.<androidx.room.RoomOpenHelper: androidx.room.RoomOpenHelper$Delegate delegate>;

        virtualinvoke $r17.<androidx.room.RoomOpenHelper$Delegate: void dropAllTables(androidx.sqlite.db.SupportSQLiteDatabase)>(r1);

        $r18 = r0.<androidx.room.RoomOpenHelper: androidx.room.RoomOpenHelper$Delegate delegate>;

        virtualinvoke $r18.<androidx.room.RoomOpenHelper$Delegate: void createAllTables(androidx.sqlite.db.SupportSQLiteDatabase)>(r1);

        goto label7;

     label6:
        $r9 = new java.lang.IllegalStateException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("A migration from ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was required but not found. Please provide the necessary Migration path via RoomDatabase.Builder.addMigration(Migration ...) or allow for destructive migrations via one of the RoomDatabase.Builder.fallbackToDestructiveMigration* methods.");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r16);

        throw $r9;

     label7:
        return;
    }

    public void onDowngrade(androidx.sqlite.db.SupportSQLiteDatabase, int, int)
    {
        androidx.room.RoomOpenHelper r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        int i0, i1;

        r0 := @this: androidx.room.RoomOpenHelper;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "db");

        virtualinvoke r0.<androidx.room.RoomOpenHelper: void onUpgrade(androidx.sqlite.db.SupportSQLiteDatabase,int,int)>(r1, i0, i1);

        return;
    }

    public void onOpen(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.RoomOpenHelper r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        androidx.room.RoomOpenHelper$Delegate $r2;

        r0 := @this: androidx.room.RoomOpenHelper;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "db");

        specialinvoke r0.<androidx.sqlite.db.SupportSQLiteOpenHelper$Callback: void onOpen(androidx.sqlite.db.SupportSQLiteDatabase)>(r1);

        specialinvoke r0.<androidx.room.RoomOpenHelper: void checkIdentity(androidx.sqlite.db.SupportSQLiteDatabase)>(r1);

        $r2 = r0.<androidx.room.RoomOpenHelper: androidx.room.RoomOpenHelper$Delegate delegate>;

        virtualinvoke $r2.<androidx.room.RoomOpenHelper$Delegate: void onOpen(androidx.sqlite.db.SupportSQLiteDatabase)>(r1);

        r0.<androidx.room.RoomOpenHelper: androidx.room.DatabaseConfiguration configuration> = null;

        return;
    }

    private final void checkIdentity(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.RoomOpenHelper r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        android.database.Cursor $r2, r28;
        androidx.room.RoomOpenHelper$Companion $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        androidx.room.RoomOpenHelper$Delegate $r4, $r5;
        java.lang.IllegalStateException $r6, $r16;
        java.lang.StringBuilder $r7, $r8, $r10, $r17, $r18, $r20, $r21, $r22;
        java.lang.String $r9, $r11, $r14, $r15, $r19, $r23, $r29, r30, $r31, $r36, r37, r39;
        androidx.sqlite.db.SimpleSQLiteQuery $r12;
        androidx.sqlite.db.SupportSQLiteQuery $r13;
        int $i0;
        java.lang.Throwable $r24, $r25, $r26, r32, r33, r34, r38;
        java.io.Closeable r27;
        androidx.room.RoomOpenHelper$ValidationResult r40;

        r0 := @this: androidx.room.RoomOpenHelper;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        $r3 = <androidx.room.RoomOpenHelper: androidx.room.RoomOpenHelper$Companion Companion>;

        $z0 = virtualinvoke $r3.<androidx.room.RoomOpenHelper$Companion: boolean hasRoomMasterTable$room_runtime_release(androidx.sqlite.db.SupportSQLiteDatabase)>(r1);

        if $z0 == 0 goto label16;

        $r12 = new androidx.sqlite.db.SimpleSQLiteQuery;

        specialinvoke $r12.<androidx.sqlite.db.SimpleSQLiteQuery: void <init>(java.lang.String)>("SELECT identity_hash FROM room_master_table WHERE id = 42 LIMIT 1");

        $r13 = (androidx.sqlite.db.SupportSQLiteQuery) $r12;

        $r2 = interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: android.database.Cursor query(androidx.sqlite.db.SupportSQLiteQuery)>($r13);

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 <= 15 goto label09;

        r27 = (java.io.Closeable) $r2;

     label01:
        r28 = (android.database.Cursor) r27;

        $z5 = interfaceinvoke r28.<android.database.Cursor: boolean moveToFirst()>();

        if $z5 == 0 goto label02;

        $r29 = interfaceinvoke r28.<android.database.Cursor: java.lang.String getString(int)>(0);

        goto label03;

     label02:
        $r29 = (java.lang.String) null;

     label03:
        r30 = $r29;

     label04:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r27, null);

        $r31 = r30;

        goto label08;

     label05:
        $r25 := @caughtexception;

        r32 = $r25;

        r33 = r32;

        throw r32;

     label06:
        $r24 := @caughtexception;

        r34 = $r24;

     label07:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r27, r33);

        throw r34;

     label08:
        goto label15;

     label09:
        $z2 = interfaceinvoke $r2.<android.database.Cursor: boolean moveToFirst()>();

        if $z2 == 0 goto label10;

        $r36 = interfaceinvoke $r2.<android.database.Cursor: java.lang.String getString(int)>(0);

        goto label11;

     label10:
        $r36 = (java.lang.String) null;

     label11:
        r37 = $r36;

     label12:
        interfaceinvoke $r2.<android.database.Cursor: void close()>();

        $r31 = r37;

        goto label15;

     label13:
        $r26 := @caughtexception;

        r38 = $r26;

     label14:
        interfaceinvoke $r2.<android.database.Cursor: void close()>();

        throw r38;

     label15:
        r39 = $r31;

        $r14 = r0.<androidx.room.RoomOpenHelper: java.lang.String identityHash>;

        $z3 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r14, r39);

        if $z3 != 0 goto label18;

        $r15 = r0.<androidx.room.RoomOpenHelper: java.lang.String legacyHash>;

        $z4 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r15, r39);

        if $z4 != 0 goto label18;

        $r16 = new java.lang.IllegalStateException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Room cannot verify the data integrity. Looks like you\'ve changed schema but forgot to update the version number. You can simply fix this by increasing the version number. Expected identity hash: ");

        $r19 = r0.<androidx.room.RoomOpenHelper: java.lang.String identityHash>;

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", found: ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r39);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r23);

        throw $r16;

     label16:
        $r4 = r0.<androidx.room.RoomOpenHelper: androidx.room.RoomOpenHelper$Delegate delegate>;

        r40 = virtualinvoke $r4.<androidx.room.RoomOpenHelper$Delegate: androidx.room.RoomOpenHelper$ValidationResult onValidateSchema(androidx.sqlite.db.SupportSQLiteDatabase)>(r1);

        $z1 = r40.<androidx.room.RoomOpenHelper$ValidationResult: boolean isValid>;

        if $z1 != 0 goto label17;

        $r6 = new java.lang.IllegalStateException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Pre-packaged database has an invalid schema: ");

        $r9 = r40.<androidx.room.RoomOpenHelper$ValidationResult: java.lang.String expectedFoundMsg>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        throw $r6;

     label17:
        $r5 = r0.<androidx.room.RoomOpenHelper: androidx.room.RoomOpenHelper$Delegate delegate>;

        virtualinvoke $r5.<androidx.room.RoomOpenHelper$Delegate: void onPostMigrate(androidx.sqlite.db.SupportSQLiteDatabase)>(r1);

        specialinvoke r0.<androidx.room.RoomOpenHelper: void updateIdentity(androidx.sqlite.db.SupportSQLiteDatabase)>(r1);

     label18:
        return;

        catch java.lang.Throwable from label01 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label09 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    private final void updateIdentity(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.RoomOpenHelper r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        java.lang.String $r2, $r3;

        r0 := @this: androidx.room.RoomOpenHelper;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        specialinvoke r0.<androidx.room.RoomOpenHelper: void createMasterTableIfNotExists(androidx.sqlite.db.SupportSQLiteDatabase)>(r1);

        $r2 = r0.<androidx.room.RoomOpenHelper: java.lang.String identityHash>;

        $r3 = staticinvoke <androidx.room.RoomMasterTable: java.lang.String createInsertQuery(java.lang.String)>($r2);

        interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: void execSQL(java.lang.String)>($r3);

        return;
    }

    private final void createMasterTableIfNotExists(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.RoomOpenHelper r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;

        r0 := @this: androidx.room.RoomOpenHelper;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: void execSQL(java.lang.String)>("CREATE TABLE IF NOT EXISTS room_master_table (id INTEGER PRIMARY KEY,identity_hash TEXT)");

        return;
    }

    static void <clinit>()
    {
        androidx.room.RoomOpenHelper$Companion $r0;

        $r0 = new androidx.room.RoomOpenHelper$Companion;

        specialinvoke $r0.<androidx.room.RoomOpenHelper$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.room.RoomOpenHelper: androidx.room.RoomOpenHelper$Companion Companion> = $r0;

        return;
    }

androidx.room.RoomOpenHelper$Companion
    private void <init>()
    {
        androidx.room.RoomOpenHelper$Companion r0;

        r0 := @this: androidx.room.RoomOpenHelper$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final boolean hasRoomMasterTable$room_runtime_release(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.RoomOpenHelper$Companion r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        android.database.Cursor $r2, r7;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        int $i0, $i1, $i2;
        java.lang.Throwable $r3, $r4, $r5, r8, r9, r10, r12;
        java.io.Closeable r6;

        r0 := @this: androidx.room.RoomOpenHelper$Companion;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "db");

        $r2 = interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: android.database.Cursor query(java.lang.String)>("SELECT 1 FROM sqlite_master WHERE type = \'table\' AND name=\'room_master_table\'");

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 <= 15 goto label08;

        r6 = (java.io.Closeable) $r2;

     label01:
        r7 = (android.database.Cursor) r6;

        $z3 = interfaceinvoke r7.<android.database.Cursor: boolean moveToFirst()>();

        if $z3 == 0 goto label02;

        $i2 = interfaceinvoke r7.<android.database.Cursor: int getInt(int)>(0);

        if $i2 == 0 goto label02;

        $z4 = 1;

        goto label03;

     label02:
        $z4 = 0;

     label03:
        z1 = $z4;

     label04:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r6, null);

        return z1;

     label05:
        $r3 := @caughtexception;

        r8 = $r3;

        r9 = r8;

        throw r8;

     label06:
        $r5 := @caughtexception;

        r10 = $r5;

     label07:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r6, r9);

        throw r10;

     label08:
        $z2 = interfaceinvoke $r2.<android.database.Cursor: boolean moveToFirst()>();

        if $z2 == 0 goto label09;

        $i1 = interfaceinvoke $r2.<android.database.Cursor: int getInt(int)>(0);

        if $i1 == 0 goto label09;

        $z5 = 1;

        goto label10;

     label09:
        $z5 = 0;

     label10:
        z0 = $z5;

     label11:
        interfaceinvoke $r2.<android.database.Cursor: void close()>();

        return z0;

     label12:
        $r4 := @caughtexception;

        r12 = $r4;

     label13:
        interfaceinvoke $r2.<android.database.Cursor: void close()>();

        throw r12;

        catch java.lang.Throwable from label01 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label08 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public final boolean hasEmptySchema$room_runtime_release(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.RoomOpenHelper$Companion r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        android.database.Cursor $r2, r7;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        int $i0, $i1, $i2;
        java.lang.Throwable $r3, $r4, $r5, r8, r9, r10, r12;
        java.io.Closeable r6;

        r0 := @this: androidx.room.RoomOpenHelper$Companion;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "db");

        $r2 = interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: android.database.Cursor query(java.lang.String)>("SELECT count(*) FROM sqlite_master WHERE name != \'android_metadata\'");

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 <= 15 goto label08;

        r6 = (java.io.Closeable) $r2;

     label01:
        r7 = (android.database.Cursor) r6;

        $z3 = interfaceinvoke r7.<android.database.Cursor: boolean moveToFirst()>();

        if $z3 == 0 goto label02;

        $i2 = interfaceinvoke r7.<android.database.Cursor: int getInt(int)>(0);

        if $i2 != 0 goto label02;

        $z4 = 1;

        goto label03;

     label02:
        $z4 = 0;

     label03:
        z1 = $z4;

     label04:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r6, null);

        return z1;

     label05:
        $r3 := @caughtexception;

        r8 = $r3;

        r9 = r8;

        throw r8;

     label06:
        $r4 := @caughtexception;

        r10 = $r4;

     label07:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r6, r9);

        throw r10;

     label08:
        $z2 = interfaceinvoke $r2.<android.database.Cursor: boolean moveToFirst()>();

        if $z2 == 0 goto label09;

        $i1 = interfaceinvoke $r2.<android.database.Cursor: int getInt(int)>(0);

        if $i1 != 0 goto label09;

        $z5 = 1;

        goto label10;

     label09:
        $z5 = 0;

     label10:
        z0 = $z5;

     label11:
        interfaceinvoke $r2.<android.database.Cursor: void close()>();

        return z0;

     label12:
        $r5 := @caughtexception;

        r12 = $r5;

     label13:
        interfaceinvoke $r2.<android.database.Cursor: void close()>();

        throw r12;

        catch java.lang.Throwable from label01 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label08 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.room.RoomOpenHelper$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.room.RoomOpenHelper$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.room.RoomOpenHelper$Companion: void <init>()>();

        return;
    }

androidx.room.RoomOpenHelper$Delegate
<androidx.room.RoomOpenHelper$Delegate: int version>
    public void <init>(int)
    {
        androidx.room.RoomOpenHelper$Delegate r0;
        int i0;

        r0 := @this: androidx.room.RoomOpenHelper$Delegate;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.room.RoomOpenHelper$Delegate: int version> = i0;

        return;
    }

<androidx.room.RoomOpenHelper$Delegate: void dropAllTables(androidx.sqlite.db.SupportSQLiteDatabase)>
<androidx.room.RoomOpenHelper$Delegate: void createAllTables(androidx.sqlite.db.SupportSQLiteDatabase)>
<androidx.room.RoomOpenHelper$Delegate: void onOpen(androidx.sqlite.db.SupportSQLiteDatabase)>
<androidx.room.RoomOpenHelper$Delegate: void onCreate(androidx.sqlite.db.SupportSQLiteDatabase)>
    protected void validateMigration(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.RoomOpenHelper$Delegate r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: androidx.room.RoomOpenHelper$Delegate;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "db");

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("validateMigration is deprecated");

        throw $r2;
    }

    public androidx.room.RoomOpenHelper$ValidationResult onValidateSchema(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.RoomOpenHelper$Delegate r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        androidx.room.RoomOpenHelper$ValidationResult $r2;

        r0 := @this: androidx.room.RoomOpenHelper$Delegate;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "db");

        virtualinvoke r0.<androidx.room.RoomOpenHelper$Delegate: void validateMigration(androidx.sqlite.db.SupportSQLiteDatabase)>(r1);

        $r2 = new androidx.room.RoomOpenHelper$ValidationResult;

        specialinvoke $r2.<androidx.room.RoomOpenHelper$ValidationResult: void <init>(boolean,java.lang.String)>(1, null);

        return $r2;
    }

    public void onPreMigrate(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.RoomOpenHelper$Delegate r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;

        r0 := @this: androidx.room.RoomOpenHelper$Delegate;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "database");

        return;
    }

    public void onPostMigrate(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.RoomOpenHelper$Delegate r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;

        r0 := @this: androidx.room.RoomOpenHelper$Delegate;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "database");

        return;
    }

androidx.room.RoomOpenHelper$ValidationResult
<androidx.room.RoomOpenHelper$ValidationResult: boolean isValid>
<androidx.room.RoomOpenHelper$ValidationResult: java.lang.String expectedFoundMsg>
    public void <init>(boolean, java.lang.String)
    {
        androidx.room.RoomOpenHelper$ValidationResult r0;
        boolean z0;
        java.lang.String r1;

        r0 := @this: androidx.room.RoomOpenHelper$ValidationResult;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.room.RoomOpenHelper$ValidationResult: boolean isValid> = z0;

        r0.<androidx.room.RoomOpenHelper$ValidationResult: java.lang.String expectedFoundMsg> = r1;

        return;
    }

