com.google.common.math.IntMath
<com.google.common.math.IntMath: int[] biggestBinomials>
<com.google.common.math.IntMath: int[] factorials>
<com.google.common.math.IntMath: int[] halfPowersOf10>
<com.google.common.math.IntMath: byte[] maxLog10ForLeadingZeros>
<com.google.common.math.IntMath: int[] powersOf10>
    static void <clinit>()
    {
        int[] $r0;
        byte[] $r1;

        $r1 = newarray (byte)[33];

        $r1[0] = 9;

        $r1[1] = 9;

        $r1[2] = 9;

        $r1[3] = 8;

        $r1[4] = 8;

        $r1[5] = 8;

        $r1[6] = 7;

        $r1[7] = 7;

        $r1[8] = 7;

        $r1[9] = 6;

        $r1[10] = 6;

        $r1[11] = 6;

        $r1[12] = 6;

        $r1[13] = 5;

        $r1[14] = 5;

        $r1[15] = 5;

        $r1[16] = 4;

        $r1[17] = 4;

        $r1[18] = 4;

        $r1[19] = 3;

        $r1[20] = 3;

        $r1[21] = 3;

        $r1[22] = 3;

        $r1[23] = 2;

        $r1[24] = 2;

        $r1[25] = 2;

        $r1[26] = 1;

        $r1[27] = 1;

        $r1[28] = 1;

        $r1[29] = 0;

        $r1[30] = 0;

        $r1[31] = 0;

        $r1[32] = 0;

        <com.google.common.math.IntMath: byte[] maxLog10ForLeadingZeros> = $r1;

        $r0 = newarray (int)[10];

        $r0[0] = 1;

        $r0[1] = 10;

        $r0[2] = 100;

        $r0[3] = 1000;

        $r0[4] = 10000;

        $r0[5] = 100000;

        $r0[6] = 1000000;

        $r0[7] = 10000000;

        $r0[8] = 100000000;

        $r0[9] = 1000000000;

        <com.google.common.math.IntMath: int[] powersOf10> = $r0;

        $r0 = newarray (int)[10];

        $r0[0] = 3;

        $r0[1] = 31;

        $r0[2] = 316;

        $r0[3] = 3162;

        $r0[4] = 31622;

        $r0[5] = 316227;

        $r0[6] = 3162277;

        $r0[7] = 31622776;

        $r0[8] = 316227766;

        $r0[9] = 2147483647;

        <com.google.common.math.IntMath: int[] halfPowersOf10> = $r0;

        $r0 = newarray (int)[13];

        $r0[0] = 1;

        $r0[1] = 1;

        $r0[2] = 2;

        $r0[3] = 6;

        $r0[4] = 24;

        $r0[5] = 120;

        $r0[6] = 720;

        $r0[7] = 5040;

        $r0[8] = 40320;

        $r0[9] = 362880;

        $r0[10] = 3628800;

        $r0[11] = 39916800;

        $r0[12] = 479001600;

        <com.google.common.math.IntMath: int[] factorials> = $r0;

        $r0 = newarray (int)[17];

        $r0[0] = 2147483647;

        $r0[1] = 2147483647;

        $r0[2] = 65536;

        $r0[3] = 2345;

        $r0[4] = 477;

        $r0[5] = 193;

        $r0[6] = 110;

        $r0[7] = 75;

        $r0[8] = 58;

        $r0[9] = 49;

        $r0[10] = 43;

        $r0[11] = 39;

        $r0[12] = 37;

        $r0[13] = 35;

        $r0[14] = 34;

        $r0[15] = 34;

        $r0[16] = 33;

        <com.google.common.math.IntMath: int[] biggestBinomials> = $r0;

        return;
    }

    public static int divide(int, int, java.math.RoundingMode)
    {
        int $i0, $i1, $i2, $i3, $i4;
        java.math.RoundingMode $r0, $r3;
        boolean $z0, $z1, $z2;
        int[] $r1;
        java.lang.AssertionError $r2;
        java.lang.ArithmeticException $r4;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: java.math.RoundingMode;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        if $i1 == 0 goto label21;

        $i2 = $i0 / $i1;

        $i3 = $i1 * $i2;

        $i3 = $i0 - $i3;

        if $i3 != 0 goto label01;

        return $i2;

     label01:
        $i0 = $i0 ^ $i1;

        $i0 = $i0 >> 31;

        $z0 = 1;

        $i0 = $i0 | 1;

        $r1 = <com.google.common.math.IntMath$1: int[] $SwitchMap$java$math$RoundingMode>;

        $i4 = virtualinvoke $r0.<java.math.RoundingMode: int ordinal()>();

        $i4 = $r1[$i4];

        lookupswitch($i4)
        {
            case 1: goto label16;
            case 2: goto label19;
            case 3: goto label14;
            case 4: goto label13;
            case 5: goto label11;
            case 6: goto label03;
            case 7: goto label03;
            case 8: goto label03;
            default: goto label02;
        };

     label02:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label03:
        $i3 = staticinvoke <java.lang.Math: int abs(int)>($i3);

        $i1 = staticinvoke <java.lang.Math: int abs(int)>($i1);

        $i1 = $i1 - $i3;

        $i1 = $i3 - $i1;

        if $i1 != 0 goto label09;

        $r3 = <java.math.RoundingMode: java.math.RoundingMode HALF_UP>;

        if $r0 == $r3 goto label20;

        $r3 = <java.math.RoundingMode: java.math.RoundingMode HALF_EVEN>;

        if $r0 != $r3 goto label04;

        $z1 = 1;

        goto label05;

     label04:
        $z1 = 0;

     label05:
        $i1 = $i2 & 1;

        if $i1 == 0 goto label06;

        $z2 = 1;

        goto label07;

     label06:
        $z2 = 0;

     label07:
        $z1 = $z1 & $z2;

        if $z1 == 0 goto label08;

        goto label20;

     label08:
        $z0 = 0;

        goto label20;

     label09:
        if $i1 <= 0 goto label10;

        goto label20;

     label10:
        $z0 = 0;

        goto label20;

     label11:
        if $i0 <= 0 goto label12;

        goto label20;

     label12:
        $z0 = 0;

        goto label20;

     label13:
        goto label20;

     label14:
        if $i0 >= 0 goto label15;

        goto label20;

     label15:
        $z0 = 0;

        goto label20;

     label16:
        if $i3 != 0 goto label17;

        goto label18;

     label17:
        $z0 = 0;

     label18:
        staticinvoke <com.google.common.math.MathPreconditions: void checkRoundingUnnecessary(boolean)>($z0);

     label19:
        $z0 = 0;

     label20:
        if $z0 == 0 goto label22;

        $i0 = $i2 + $i0;

        return $i0;

     label21:
        $r4 = new java.lang.ArithmeticException;

        specialinvoke $r4.<java.lang.ArithmeticException: void <init>(java.lang.String)>("/ by zero");

        throw $r4;

     label22:
        return $i2;
    }

    public static boolean isPowerOfTwo(int)
    {
        int $i0, $i1;
        boolean $z0, $z1;

        $i1 := @parameter0: int;

        $z0 = 1;

        if $i1 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $i0 = $i1 + -1;

        $i1 = $i1 & $i0;

        if $i1 != 0 goto label3;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        $z0 = $z1 & $z0;

        return $z0;
    }

    static int lessThanBranchFree(int, int)
    {
        int $i0, $i1;

        $i1 := @parameter0: int;

        $i0 := @parameter1: int;

        $i1 = $i1 - $i0;

        $i1 = $i1 >>> 31;

        return $i1;
    }

    public static int log2(int, java.math.RoundingMode)
    {
        int $i0, $i1, $i2;
        java.math.RoundingMode $r0;
        int[] $r1;
        java.lang.AssertionError $r2;
        boolean $z0;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.math.RoundingMode;

        staticinvoke <com.google.common.math.MathPreconditions: int checkPositive(java.lang.String,int)>("x", $i0);

        $r1 = <com.google.common.math.IntMath$1: int[] $SwitchMap$java$math$RoundingMode>;

        $i1 = virtualinvoke $r0.<java.math.RoundingMode: int ordinal()>();

        $i1 = $r1[$i1];

        lookupswitch($i1)
        {
            case 1: goto label4;
            case 2: goto label5;
            case 3: goto label5;
            case 4: goto label3;
            case 5: goto label3;
            case 6: goto label2;
            case 7: goto label2;
            case 8: goto label2;
            default: goto label1;
        };

     label1:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label2:
        $i2 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i0);

        $i1 = 31 - $i2;

        $i2 = -1257966797 >>> $i2;

        $i0 = staticinvoke <com.google.common.math.IntMath: int lessThanBranchFree(int,int)>($i2, $i0);

        $i0 = $i1 + $i0;

        return $i0;

     label3:
        $i0 = $i0 + -1;

        $i0 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i0);

        $i0 = 32 - $i0;

        return $i0;

     label4:
        $z0 = staticinvoke <com.google.common.math.IntMath: boolean isPowerOfTwo(int)>($i0);

        staticinvoke <com.google.common.math.MathPreconditions: void checkRoundingUnnecessary(boolean)>($z0);

     label5:
        $i0 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i0);

        $i0 = 31 - $i0;

        return $i0;
    }

    public static int saturatedMultiply(int, int)
    {
        int $i0, $i1;
        long $l2, $l3;

        $i1 := @parameter0: int;

        $i0 := @parameter1: int;

        $l2 = (long) $i1;

        $l3 = (long) $i0;

        $l2 = $l2 * $l3;

        $i1 = staticinvoke <com.google.common.primitives.Ints: int saturatedCast(long)>($l2);

        return $i1;
    }

com.google.common.math.IntMath$1
<com.google.common.math.IntMath$1: int[] $SwitchMap$java$math$RoundingMode>
    static void <clinit>()
    {
        java.math.RoundingMode[] $r0;
        int $i0;
        int[] $r1;
        java.math.RoundingMode $r2;
        java.lang.Throwable $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;

        $r0 = staticinvoke <java.math.RoundingMode: java.math.RoundingMode[] values()>();

        $i0 = lengthof $r0;

        $r1 = newarray (int)[$i0];

        <com.google.common.math.IntMath$1: int[] $SwitchMap$java$math$RoundingMode> = $r1;

        $r2 = <java.math.RoundingMode: java.math.RoundingMode UNNECESSARY>;

     label01:
        $i0 = virtualinvoke $r2.<java.math.RoundingMode: int ordinal()>();

     label02:
        $r1[$i0] = 1;

        goto label04;

     label03:
        $r3 := @caughtexception;

     label04:
        $r1 = <com.google.common.math.IntMath$1: int[] $SwitchMap$java$math$RoundingMode>;

        $r2 = <java.math.RoundingMode: java.math.RoundingMode DOWN>;

     label05:
        $i0 = virtualinvoke $r2.<java.math.RoundingMode: int ordinal()>();

     label06:
        $r1[$i0] = 2;

        goto label08;

     label07:
        $r4 := @caughtexception;

     label08:
        $r1 = <com.google.common.math.IntMath$1: int[] $SwitchMap$java$math$RoundingMode>;

        $r2 = <java.math.RoundingMode: java.math.RoundingMode FLOOR>;

     label09:
        $i0 = virtualinvoke $r2.<java.math.RoundingMode: int ordinal()>();

     label10:
        $r1[$i0] = 3;

        goto label12;

     label11:
        $r5 := @caughtexception;

     label12:
        $r1 = <com.google.common.math.IntMath$1: int[] $SwitchMap$java$math$RoundingMode>;

        $r2 = <java.math.RoundingMode: java.math.RoundingMode UP>;

     label13:
        $i0 = virtualinvoke $r2.<java.math.RoundingMode: int ordinal()>();

     label14:
        $r1[$i0] = 4;

        goto label16;

     label15:
        $r6 := @caughtexception;

     label16:
        $r1 = <com.google.common.math.IntMath$1: int[] $SwitchMap$java$math$RoundingMode>;

        $r2 = <java.math.RoundingMode: java.math.RoundingMode CEILING>;

     label17:
        $i0 = virtualinvoke $r2.<java.math.RoundingMode: int ordinal()>();

     label18:
        $r1[$i0] = 5;

        goto label20;

     label19:
        $r7 := @caughtexception;

     label20:
        $r1 = <com.google.common.math.IntMath$1: int[] $SwitchMap$java$math$RoundingMode>;

        $r2 = <java.math.RoundingMode: java.math.RoundingMode HALF_DOWN>;

     label21:
        $i0 = virtualinvoke $r2.<java.math.RoundingMode: int ordinal()>();

     label22:
        $r1[$i0] = 6;

        goto label24;

     label23:
        $r8 := @caughtexception;

     label24:
        $r1 = <com.google.common.math.IntMath$1: int[] $SwitchMap$java$math$RoundingMode>;

        $r2 = <java.math.RoundingMode: java.math.RoundingMode HALF_UP>;

     label25:
        $i0 = virtualinvoke $r2.<java.math.RoundingMode: int ordinal()>();

     label26:
        $r1[$i0] = 7;

        goto label28;

     label27:
        $r9 := @caughtexception;

     label28:
        $r1 = <com.google.common.math.IntMath$1: int[] $SwitchMap$java$math$RoundingMode>;

        $r2 = <java.math.RoundingMode: java.math.RoundingMode HALF_EVEN>;

     label29:
        $i0 = virtualinvoke $r2.<java.math.RoundingMode: int ordinal()>();

     label30:
        $r1[$i0] = 8;

        return;

     label31:
        $r10 := @caughtexception;

        return;

        catch java.lang.NoSuchFieldError from label01 to label02 with label03;
        catch java.lang.NoSuchFieldError from label05 to label06 with label07;
        catch java.lang.NoSuchFieldError from label09 to label10 with label11;
        catch java.lang.NoSuchFieldError from label13 to label14 with label15;
        catch java.lang.NoSuchFieldError from label17 to label18 with label19;
        catch java.lang.NoSuchFieldError from label21 to label22 with label23;
        catch java.lang.NoSuchFieldError from label25 to label26 with label27;
        catch java.lang.NoSuchFieldError from label29 to label30 with label31;
    }

