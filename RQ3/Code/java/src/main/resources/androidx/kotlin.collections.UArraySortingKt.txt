kotlin.collections.UArraySortingKt
    private static final int partition--nroSd4(long[], int, int)
    {
        long[] $r0;
        int $i0, $i1, $i2;
        long $l3, $l4, $l5;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = $i0 + $i1;

        $i2 = $i2 / 2;

        $l3 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i2);

     label1:
        if $i0 > $i1 goto label5;

     label2:
        $l4 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i0);

        $i2 = staticinvoke <kotlin.UnsignedKt: int ulongCompare(long,long)>($l4, $l3);

        if $i2 >= 0 goto label3;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        $l4 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $i2 = staticinvoke <kotlin.UnsignedKt: int ulongCompare(long,long)>($l4, $l3);

        if $i2 <= 0 goto label4;

        $i1 = $i1 + -1;

        goto label3;

     label4:
        if $i0 > $i1 goto label1;

        $l4 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i0);

        $l5 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        staticinvoke <kotlin.ULongArray: void set-k8EXiF4(long[],int,long)>($r0, $i0, $l5);

        staticinvoke <kotlin.ULongArray: void set-k8EXiF4(long[],int,long)>($r0, $i1, $l4);

        $i0 = $i0 + 1;

        $i1 = $i1 + -1;

        goto label1;

     label5:
        return $i0;
    }

    private static final int partition-4UcCI2c(byte[], int, int)
    {
        byte[] $r0;
        int $i0, $i1, $i2;
        byte $b3, $b4, $b7;
        short $s5, $s6;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = $i0 + $i1;

        $i2 = $i2 / 2;

        $b3 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i2);

     label1:
        if $i0 > $i1 goto label5;

     label2:
        $b4 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i0);

        $s5 = $b4 & 255;

        $s6 = $b3 & 255;

        $i2 = staticinvoke <kotlin.jvm.internal.Intrinsics: int compare(int,int)>($s5, $s6);

        if $i2 >= 0 goto label3;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        $b4 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        $s5 = $b4 & 255;

        $i2 = staticinvoke <kotlin.jvm.internal.Intrinsics: int compare(int,int)>($s5, $s6);

        if $i2 <= 0 goto label4;

        $i1 = $i1 + -1;

        goto label3;

     label4:
        if $i0 > $i1 goto label1;

        $b4 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i0);

        $b7 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        staticinvoke <kotlin.UByteArray: void set-VurrAj0(byte[],int,byte)>($r0, $i0, $b7);

        staticinvoke <kotlin.UByteArray: void set-VurrAj0(byte[],int,byte)>($r0, $i1, $b4);

        $i0 = $i0 + 1;

        $i1 = $i1 + -1;

        goto label1;

     label5:
        return $i0;
    }

    private static final int partition-Aa5vz7o(short[], int, int)
    {
        short[] $r0;
        int $i0, $i1, $i2;
        short $s3, $s4, $s7;
        char $c5, $c6;

        $r0 := @parameter0: short[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = $i0 + $i1;

        $i2 = $i2 / 2;

        $s3 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i2);

     label1:
        if $i0 > $i1 goto label5;

     label2:
        $s4 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i0);

        $c5 = (char) $s4;

        $c6 = (char) $s3;

        $i2 = staticinvoke <kotlin.jvm.internal.Intrinsics: int compare(int,int)>($c5, $c6);

        if $i2 >= 0 goto label3;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        $s4 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        $c5 = (char) $s4;

        $i2 = staticinvoke <kotlin.jvm.internal.Intrinsics: int compare(int,int)>($c5, $c6);

        if $i2 <= 0 goto label4;

        $i1 = $i1 + -1;

        goto label3;

     label4:
        if $i0 > $i1 goto label1;

        $s4 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i0);

        $s7 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        staticinvoke <kotlin.UShortArray: void set-01HTLdE(short[],int,short)>($r0, $i0, $s7);

        staticinvoke <kotlin.UShortArray: void set-01HTLdE(short[],int,short)>($r0, $i1, $s4);

        $i0 = $i0 + 1;

        $i1 = $i1 + -1;

        goto label1;

     label5:
        return $i0;
    }

    private static final int partition-oBK06Vg(int[], int, int)
    {
        int[] $r0;
        int $i0, $i1, $i2, $i3, $i4;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = $i0 + $i1;

        $i2 = $i2 / 2;

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i2);

     label1:
        if $i0 > $i1 goto label5;

     label2:
        $i3 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i0);

        $i3 = staticinvoke <kotlin.UnsignedKt: int uintCompare(int,int)>($i3, $i2);

        if $i3 >= 0 goto label3;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        $i3 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $i3 = staticinvoke <kotlin.UnsignedKt: int uintCompare(int,int)>($i3, $i2);

        if $i3 <= 0 goto label4;

        $i1 = $i1 + -1;

        goto label3;

     label4:
        if $i0 > $i1 goto label1;

        $i3 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i0);

        $i4 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        staticinvoke <kotlin.UIntArray: void set-VXSXFK8(int[],int,int)>($r0, $i0, $i4);

        staticinvoke <kotlin.UIntArray: void set-VXSXFK8(int[],int,int)>($r0, $i1, $i3);

        $i0 = $i0 + 1;

        $i1 = $i1 + -1;

        goto label1;

     label5:
        return $i0;
    }

    private static final void quickSort--nroSd4(long[], int, int)
    {
        long[] $r0;
        int $i0, $i1, $i2, $i3;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i3 = staticinvoke <kotlin.collections.UArraySortingKt: int partition--nroSd4(long[],int,int)>($r0, $i0, $i1);

        $i2 = $i3 + -1;

        if $i0 >= $i2 goto label1;

        staticinvoke <kotlin.collections.UArraySortingKt: void quickSort--nroSd4(long[],int,int)>($r0, $i0, $i2);

     label1:
        if $i3 >= $i1 goto label2;

        staticinvoke <kotlin.collections.UArraySortingKt: void quickSort--nroSd4(long[],int,int)>($r0, $i3, $i1);

     label2:
        return;
    }

    private static final void quickSort-4UcCI2c(byte[], int, int)
    {
        byte[] $r0;
        int $i0, $i1, $i2, $i3;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i3 = staticinvoke <kotlin.collections.UArraySortingKt: int partition-4UcCI2c(byte[],int,int)>($r0, $i0, $i1);

        $i2 = $i3 + -1;

        if $i0 >= $i2 goto label1;

        staticinvoke <kotlin.collections.UArraySortingKt: void quickSort-4UcCI2c(byte[],int,int)>($r0, $i0, $i2);

     label1:
        if $i3 >= $i1 goto label2;

        staticinvoke <kotlin.collections.UArraySortingKt: void quickSort-4UcCI2c(byte[],int,int)>($r0, $i3, $i1);

     label2:
        return;
    }

    private static final void quickSort-Aa5vz7o(short[], int, int)
    {
        short[] $r0;
        int $i0, $i1, $i2, $i3;

        $r0 := @parameter0: short[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i3 = staticinvoke <kotlin.collections.UArraySortingKt: int partition-Aa5vz7o(short[],int,int)>($r0, $i0, $i1);

        $i2 = $i3 + -1;

        if $i0 >= $i2 goto label1;

        staticinvoke <kotlin.collections.UArraySortingKt: void quickSort-Aa5vz7o(short[],int,int)>($r0, $i0, $i2);

     label1:
        if $i3 >= $i1 goto label2;

        staticinvoke <kotlin.collections.UArraySortingKt: void quickSort-Aa5vz7o(short[],int,int)>($r0, $i3, $i1);

     label2:
        return;
    }

    private static final void quickSort-oBK06Vg(int[], int, int)
    {
        int[] $r0;
        int $i0, $i1, $i2, $i3;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i3 = staticinvoke <kotlin.collections.UArraySortingKt: int partition-oBK06Vg(int[],int,int)>($r0, $i0, $i1);

        $i2 = $i3 + -1;

        if $i0 >= $i2 goto label1;

        staticinvoke <kotlin.collections.UArraySortingKt: void quickSort-oBK06Vg(int[],int,int)>($r0, $i0, $i2);

     label1:
        if $i3 >= $i1 goto label2;

        staticinvoke <kotlin.collections.UArraySortingKt: void quickSort-oBK06Vg(int[],int,int)>($r0, $i3, $i1);

     label2:
        return;
    }

    public static final void sortArray--nroSd4(long[], int, int)
    {
        long[] $r0;
        int $i0, $i1;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "array");

        $i1 = $i1 + -1;

        staticinvoke <kotlin.collections.UArraySortingKt: void quickSort--nroSd4(long[],int,int)>($r0, $i0, $i1);

        return;
    }

    public static final void sortArray-4UcCI2c(byte[], int, int)
    {
        byte[] $r0;
        int $i0, $i1;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "array");

        $i1 = $i1 + -1;

        staticinvoke <kotlin.collections.UArraySortingKt: void quickSort-4UcCI2c(byte[],int,int)>($r0, $i0, $i1);

        return;
    }

    public static final void sortArray-Aa5vz7o(short[], int, int)
    {
        short[] $r0;
        int $i0, $i1;

        $r0 := @parameter0: short[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "array");

        $i1 = $i1 + -1;

        staticinvoke <kotlin.collections.UArraySortingKt: void quickSort-Aa5vz7o(short[],int,int)>($r0, $i0, $i1);

        return;
    }

    public static final void sortArray-oBK06Vg(int[], int, int)
    {
        int[] $r0;
        int $i0, $i1;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "array");

        $i1 = $i1 + -1;

        staticinvoke <kotlin.collections.UArraySortingKt: void quickSort-oBK06Vg(int[],int,int)>($r0, $i0, $i1);

        return;
    }

