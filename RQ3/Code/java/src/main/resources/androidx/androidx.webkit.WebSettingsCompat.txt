androidx.webkit.WebSettingsCompat
    private void <init>()
    {
        androidx.webkit.WebSettingsCompat r0;

        r0 := @this: androidx.webkit.WebSettingsCompat;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void setOffscreenPreRaster(android.webkit.WebSettings, boolean)
    {
        android.webkit.WebSettings r0;
        boolean z0, $z1, $z2;
        androidx.webkit.internal.WebViewFeatureInternal r1;
        java.lang.UnsupportedOperationException $r2;
        androidx.webkit.internal.WebSettingsAdapter $r3;

        r0 := @parameter0: android.webkit.WebSettings;

        z0 := @parameter1: boolean;

        r1 = staticinvoke <androidx.webkit.internal.WebViewFeatureInternal: androidx.webkit.internal.WebViewFeatureInternal getFeature(java.lang.String)>("OFF_SCREEN_PRERASTER");

        $z1 = virtualinvoke r1.<androidx.webkit.internal.WebViewFeatureInternal: boolean isSupportedByFramework()>();

        if $z1 == 0 goto label1;

        virtualinvoke r0.<android.webkit.WebSettings: void setOffscreenPreRaster(boolean)>(z0);

        goto label3;

     label1:
        $z2 = virtualinvoke r1.<androidx.webkit.internal.WebViewFeatureInternal: boolean isSupportedByWebView()>();

        if $z2 == 0 goto label2;

        $r3 = staticinvoke <androidx.webkit.WebSettingsCompat: androidx.webkit.internal.WebSettingsAdapter getAdapter(android.webkit.WebSettings)>(r0);

        virtualinvoke $r3.<androidx.webkit.internal.WebSettingsAdapter: void setOffscreenPreRaster(boolean)>(z0);

        goto label3;

     label2:
        $r2 = staticinvoke <androidx.webkit.internal.WebViewFeatureInternal: java.lang.UnsupportedOperationException getUnsupportedOperationException()>();

        throw $r2;

     label3:
        return;
    }

    public static boolean getOffscreenPreRaster(android.webkit.WebSettings)
    {
        android.webkit.WebSettings r0;
        androidx.webkit.internal.WebViewFeatureInternal r1;
        boolean $z0, $z1, $z2, $z3;
        java.lang.UnsupportedOperationException $r2;
        androidx.webkit.internal.WebSettingsAdapter $r3;

        r0 := @parameter0: android.webkit.WebSettings;

        r1 = staticinvoke <androidx.webkit.internal.WebViewFeatureInternal: androidx.webkit.internal.WebViewFeatureInternal getFeature(java.lang.String)>("OFF_SCREEN_PRERASTER");

        $z0 = virtualinvoke r1.<androidx.webkit.internal.WebViewFeatureInternal: boolean isSupportedByFramework()>();

        if $z0 == 0 goto label1;

        $z3 = virtualinvoke r0.<android.webkit.WebSettings: boolean getOffscreenPreRaster()>();

        return $z3;

     label1:
        $z1 = virtualinvoke r1.<androidx.webkit.internal.WebViewFeatureInternal: boolean isSupportedByWebView()>();

        if $z1 == 0 goto label2;

        $r3 = staticinvoke <androidx.webkit.WebSettingsCompat: androidx.webkit.internal.WebSettingsAdapter getAdapter(android.webkit.WebSettings)>(r0);

        $z2 = virtualinvoke $r3.<androidx.webkit.internal.WebSettingsAdapter: boolean getOffscreenPreRaster()>();

        return $z2;

     label2:
        $r2 = staticinvoke <androidx.webkit.internal.WebViewFeatureInternal: java.lang.UnsupportedOperationException getUnsupportedOperationException()>();

        throw $r2;
    }

    public static void setSafeBrowsingEnabled(android.webkit.WebSettings, boolean)
    {
        android.webkit.WebSettings r0;
        boolean z0, $z1, $z2;
        androidx.webkit.internal.WebViewFeatureInternal r1;
        java.lang.UnsupportedOperationException $r2;
        androidx.webkit.internal.WebSettingsAdapter $r3;

        r0 := @parameter0: android.webkit.WebSettings;

        z0 := @parameter1: boolean;

        r1 = staticinvoke <androidx.webkit.internal.WebViewFeatureInternal: androidx.webkit.internal.WebViewFeatureInternal getFeature(java.lang.String)>("SAFE_BROWSING_ENABLE");

        $z1 = virtualinvoke r1.<androidx.webkit.internal.WebViewFeatureInternal: boolean isSupportedByFramework()>();

        if $z1 == 0 goto label1;

        virtualinvoke r0.<android.webkit.WebSettings: void setSafeBrowsingEnabled(boolean)>(z0);

        goto label3;

     label1:
        $z2 = virtualinvoke r1.<androidx.webkit.internal.WebViewFeatureInternal: boolean isSupportedByWebView()>();

        if $z2 == 0 goto label2;

        $r3 = staticinvoke <androidx.webkit.WebSettingsCompat: androidx.webkit.internal.WebSettingsAdapter getAdapter(android.webkit.WebSettings)>(r0);

        virtualinvoke $r3.<androidx.webkit.internal.WebSettingsAdapter: void setSafeBrowsingEnabled(boolean)>(z0);

        goto label3;

     label2:
        $r2 = staticinvoke <androidx.webkit.internal.WebViewFeatureInternal: java.lang.UnsupportedOperationException getUnsupportedOperationException()>();

        throw $r2;

     label3:
        return;
    }

    public static boolean getSafeBrowsingEnabled(android.webkit.WebSettings)
    {
        android.webkit.WebSettings r0;
        androidx.webkit.internal.WebViewFeatureInternal r1;
        boolean $z0, $z1, $z2, $z3;
        java.lang.UnsupportedOperationException $r2;
        androidx.webkit.internal.WebSettingsAdapter $r3;

        r0 := @parameter0: android.webkit.WebSettings;

        r1 = staticinvoke <androidx.webkit.internal.WebViewFeatureInternal: androidx.webkit.internal.WebViewFeatureInternal getFeature(java.lang.String)>("SAFE_BROWSING_ENABLE");

        $z0 = virtualinvoke r1.<androidx.webkit.internal.WebViewFeatureInternal: boolean isSupportedByFramework()>();

        if $z0 == 0 goto label1;

        $z3 = virtualinvoke r0.<android.webkit.WebSettings: boolean getSafeBrowsingEnabled()>();

        return $z3;

     label1:
        $z1 = virtualinvoke r1.<androidx.webkit.internal.WebViewFeatureInternal: boolean isSupportedByWebView()>();

        if $z1 == 0 goto label2;

        $r3 = staticinvoke <androidx.webkit.WebSettingsCompat: androidx.webkit.internal.WebSettingsAdapter getAdapter(android.webkit.WebSettings)>(r0);

        $z2 = virtualinvoke $r3.<androidx.webkit.internal.WebSettingsAdapter: boolean getSafeBrowsingEnabled()>();

        return $z2;

     label2:
        $r2 = staticinvoke <androidx.webkit.internal.WebViewFeatureInternal: java.lang.UnsupportedOperationException getUnsupportedOperationException()>();

        throw $r2;
    }

    public static void setDisabledActionModeMenuItems(android.webkit.WebSettings, int)
    {
        android.webkit.WebSettings r0;
        int i0;
        androidx.webkit.internal.WebViewFeatureInternal r1;
        boolean $z0, $z1;
        java.lang.UnsupportedOperationException $r2;
        androidx.webkit.internal.WebSettingsAdapter $r3;

        r0 := @parameter0: android.webkit.WebSettings;

        i0 := @parameter1: int;

        r1 = staticinvoke <androidx.webkit.internal.WebViewFeatureInternal: androidx.webkit.internal.WebViewFeatureInternal getFeature(java.lang.String)>("DISABLED_ACTION_MODE_MENU_ITEMS");

        $z0 = virtualinvoke r1.<androidx.webkit.internal.WebViewFeatureInternal: boolean isSupportedByFramework()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<android.webkit.WebSettings: void setDisabledActionModeMenuItems(int)>(i0);

        goto label3;

     label1:
        $z1 = virtualinvoke r1.<androidx.webkit.internal.WebViewFeatureInternal: boolean isSupportedByWebView()>();

        if $z1 == 0 goto label2;

        $r3 = staticinvoke <androidx.webkit.WebSettingsCompat: androidx.webkit.internal.WebSettingsAdapter getAdapter(android.webkit.WebSettings)>(r0);

        virtualinvoke $r3.<androidx.webkit.internal.WebSettingsAdapter: void setDisabledActionModeMenuItems(int)>(i0);

        goto label3;

     label2:
        $r2 = staticinvoke <androidx.webkit.internal.WebViewFeatureInternal: java.lang.UnsupportedOperationException getUnsupportedOperationException()>();

        throw $r2;

     label3:
        return;
    }

    public static int getDisabledActionModeMenuItems(android.webkit.WebSettings)
    {
        android.webkit.WebSettings r0;
        androidx.webkit.internal.WebViewFeatureInternal r1;
        boolean $z0, $z1;
        java.lang.UnsupportedOperationException $r2;
        androidx.webkit.internal.WebSettingsAdapter $r3;
        int $i0, $i1;

        r0 := @parameter0: android.webkit.WebSettings;

        r1 = staticinvoke <androidx.webkit.internal.WebViewFeatureInternal: androidx.webkit.internal.WebViewFeatureInternal getFeature(java.lang.String)>("DISABLED_ACTION_MODE_MENU_ITEMS");

        $z0 = virtualinvoke r1.<androidx.webkit.internal.WebViewFeatureInternal: boolean isSupportedByFramework()>();

        if $z0 == 0 goto label1;

        $i1 = virtualinvoke r0.<android.webkit.WebSettings: int getDisabledActionModeMenuItems()>();

        return $i1;

     label1:
        $z1 = virtualinvoke r1.<androidx.webkit.internal.WebViewFeatureInternal: boolean isSupportedByWebView()>();

        if $z1 == 0 goto label2;

        $r3 = staticinvoke <androidx.webkit.WebSettingsCompat: androidx.webkit.internal.WebSettingsAdapter getAdapter(android.webkit.WebSettings)>(r0);

        $i0 = virtualinvoke $r3.<androidx.webkit.internal.WebSettingsAdapter: int getDisabledActionModeMenuItems()>();

        return $i0;

     label2:
        $r2 = staticinvoke <androidx.webkit.internal.WebViewFeatureInternal: java.lang.UnsupportedOperationException getUnsupportedOperationException()>();

        throw $r2;
    }

    private static androidx.webkit.internal.WebSettingsAdapter getAdapter(android.webkit.WebSettings)
    {
        android.webkit.WebSettings r0;
        androidx.webkit.internal.WebkitToCompatConverter $r1;
        androidx.webkit.internal.WebSettingsAdapter $r2;

        r0 := @parameter0: android.webkit.WebSettings;

        $r1 = staticinvoke <androidx.webkit.internal.WebViewGlueCommunicator: androidx.webkit.internal.WebkitToCompatConverter getCompatConverter()>();

        $r2 = virtualinvoke $r1.<androidx.webkit.internal.WebkitToCompatConverter: androidx.webkit.internal.WebSettingsAdapter convertSettings(android.webkit.WebSettings)>(r0);

        return $r2;
    }

