androidx.ads.identifier.internal.HoldingConnectionClient
<androidx.ads.identifier.internal.HoldingConnectionClient: long SERVICE_CONNECTION_TIMEOUT_SECONDS>
<androidx.ads.identifier.internal.HoldingConnectionClient: android.content.Context mContext>
<androidx.ads.identifier.internal.HoldingConnectionClient: androidx.ads.identifier.internal.HoldingConnectionClient$BlockingServiceConnection mConnection>
<androidx.ads.identifier.internal.HoldingConnectionClient: java.lang.String mPackageName>
<androidx.ads.identifier.internal.HoldingConnectionClient: androidx.ads.identifier.provider.IAdvertisingIdService mIdService>
<androidx.ads.identifier.internal.HoldingConnectionClient: java.util.concurrent.atomic.AtomicLong mLastConnectionId>
    public void <init>(android.content.Context) throws androidx.ads.identifier.AdvertisingIdNotAvailableException, java.io.IOException, java.util.concurrent.TimeoutException, java.lang.InterruptedException
    {
        androidx.ads.identifier.internal.HoldingConnectionClient r0;
        android.content.Context r1, $r4;
        android.content.ComponentName r2;
        java.util.concurrent.atomic.AtomicLong $r3;
        androidx.ads.identifier.internal.HoldingConnectionClient$BlockingServiceConnection $r5;
        androidx.ads.identifier.provider.IAdvertisingIdService $r6;
        java.lang.String $r7;

        r0 := @this: androidx.ads.identifier.internal.HoldingConnectionClient;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        r0.<androidx.ads.identifier.internal.HoldingConnectionClient: java.util.concurrent.atomic.AtomicLong mLastConnectionId> = $r3;

        r0.<androidx.ads.identifier.internal.HoldingConnectionClient: android.content.Context mContext> = r1;

        $r4 = r0.<androidx.ads.identifier.internal.HoldingConnectionClient: android.content.Context mContext>;

        r2 = staticinvoke <androidx.ads.identifier.internal.HoldingConnectionClient: android.content.ComponentName getProviderComponentName(android.content.Context)>($r4);

        $r5 = virtualinvoke r0.<androidx.ads.identifier.internal.HoldingConnectionClient: androidx.ads.identifier.internal.HoldingConnectionClient$BlockingServiceConnection getServiceConnection(android.content.ComponentName)>(r2);

        r0.<androidx.ads.identifier.internal.HoldingConnectionClient: androidx.ads.identifier.internal.HoldingConnectionClient$BlockingServiceConnection mConnection> = $r5;

        $r6 = virtualinvoke r0.<androidx.ads.identifier.internal.HoldingConnectionClient: androidx.ads.identifier.provider.IAdvertisingIdService getIdServiceFromConnection()>();

        r0.<androidx.ads.identifier.internal.HoldingConnectionClient: androidx.ads.identifier.provider.IAdvertisingIdService mIdService> = $r6;

        $r7 = virtualinvoke r2.<android.content.ComponentName: java.lang.String getPackageName()>();

        r0.<androidx.ads.identifier.internal.HoldingConnectionClient: java.lang.String mPackageName> = $r7;

        return;
    }

    public androidx.ads.identifier.provider.IAdvertisingIdService getIdService()
    {
        androidx.ads.identifier.internal.HoldingConnectionClient r0;
        androidx.ads.identifier.provider.IAdvertisingIdService $r1;

        r0 := @this: androidx.ads.identifier.internal.HoldingConnectionClient;

        $r1 = r0.<androidx.ads.identifier.internal.HoldingConnectionClient: androidx.ads.identifier.provider.IAdvertisingIdService mIdService>;

        return $r1;
    }

    public java.lang.String getPackageName()
    {
        androidx.ads.identifier.internal.HoldingConnectionClient r0;
        java.lang.String $r1;

        r0 := @this: androidx.ads.identifier.internal.HoldingConnectionClient;

        $r1 = r0.<androidx.ads.identifier.internal.HoldingConnectionClient: java.lang.String mPackageName>;

        return $r1;
    }

    public boolean isConnected()
    {
        androidx.ads.identifier.internal.HoldingConnectionClient r0;
        java.util.concurrent.atomic.AtomicLong $r1;
        long $l0;
        byte $b1;
        boolean $z0;

        r0 := @this: androidx.ads.identifier.internal.HoldingConnectionClient;

        $r1 = r0.<androidx.ads.identifier.internal.HoldingConnectionClient: java.util.concurrent.atomic.AtomicLong mLastConnectionId>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $b1 = $l0 cmp 0L;

        if $b1 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public long askConnectionId()
    {
        androidx.ads.identifier.internal.HoldingConnectionClient r0;
        java.util.concurrent.atomic.AtomicLong $r1;
        long $l0;

        r0 := @this: androidx.ads.identifier.internal.HoldingConnectionClient;

        $r1 = r0.<androidx.ads.identifier.internal.HoldingConnectionClient: java.util.concurrent.atomic.AtomicLong mLastConnectionId>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        return $l0;
    }

    void finish()
    {
        androidx.ads.identifier.internal.HoldingConnectionClient r0;
        java.util.concurrent.atomic.AtomicLong $r1;
        long $l0;
        byte $b1;
        androidx.ads.identifier.internal.HoldingConnectionClient$BlockingServiceConnection $r2;
        android.content.Context $r3;

        r0 := @this: androidx.ads.identifier.internal.HoldingConnectionClient;

        $r1 = r0.<androidx.ads.identifier.internal.HoldingConnectionClient: java.util.concurrent.atomic.AtomicLong mLastConnectionId>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long getAndSet(long)>(-9223372036854775808L);

        $b1 = $l0 cmp 0L;

        if $b1 < 0 goto label1;

        $r3 = r0.<androidx.ads.identifier.internal.HoldingConnectionClient: android.content.Context mContext>;

        $r2 = r0.<androidx.ads.identifier.internal.HoldingConnectionClient: androidx.ads.identifier.internal.HoldingConnectionClient$BlockingServiceConnection mConnection>;

        virtualinvoke $r3.<android.content.Context: void unbindService(android.content.ServiceConnection)>($r2);

     label1:
        return;
    }

    public boolean tryFinish(long)
    {
        androidx.ads.identifier.internal.HoldingConnectionClient r0;
        long l0;
        java.util.concurrent.atomic.AtomicLong $r1;
        boolean $z0, $z1, $z2;
        androidx.ads.identifier.internal.HoldingConnectionClient$BlockingServiceConnection $r2;
        android.content.Context $r3;

        r0 := @this: androidx.ads.identifier.internal.HoldingConnectionClient;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.ads.identifier.internal.HoldingConnectionClient: java.util.concurrent.atomic.AtomicLong mLastConnectionId>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>(l0, -9223372036854775808L);

        if $z0 == 0 goto label1;

        $r3 = r0.<androidx.ads.identifier.internal.HoldingConnectionClient: android.content.Context mContext>;

        $r2 = r0.<androidx.ads.identifier.internal.HoldingConnectionClient: androidx.ads.identifier.internal.HoldingConnectionClient$BlockingServiceConnection mConnection>;

        virtualinvoke $r3.<android.content.Context: void unbindService(android.content.ServiceConnection)>($r2);

        return 1;

     label1:
        $z1 = virtualinvoke r0.<androidx.ads.identifier.internal.HoldingConnectionClient: boolean isConnected()>();

        if $z1 != 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private static android.content.ComponentName getProviderComponentName(android.content.Context) throws androidx.ads.identifier.AdvertisingIdNotAvailableException
    {
        android.content.Context r0;
        android.content.pm.PackageManager r1;
        java.util.List r2;
        android.content.pm.ServiceInfo r3;
        java.lang.String $r5, $r6;
        androidx.ads.identifier.AdvertisingIdNotAvailableException r8;
        android.content.ComponentName r9;
        java.lang.Throwable r10;

        r0 := @parameter0: android.content.Context;

        r1 = virtualinvoke r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r2 = staticinvoke <androidx.ads.identifier.AdvertisingIdUtils: java.util.List getAdvertisingIdProviderServices(android.content.pm.PackageManager)>(r1);

        r3 = staticinvoke <androidx.ads.identifier.AdvertisingIdUtils: android.content.pm.ServiceInfo selectServiceByPriority(java.util.List,android.content.pm.PackageManager)>(r2, r1);

        if r3 != null goto label1;

        r8 = new androidx.ads.identifier.AdvertisingIdNotAvailableException;

        specialinvoke r8.<androidx.ads.identifier.AdvertisingIdNotAvailableException: void <init>(java.lang.String)>("No compatible AndroidX Advertising ID Provider available.");

        r10 = (java.lang.Throwable) r8;

        throw r10;

     label1:
        r9 = new android.content.ComponentName;

        $r6 = r3.<android.content.pm.ServiceInfo: java.lang.String packageName>;

        $r5 = r3.<android.content.pm.ServiceInfo: java.lang.String name>;

        specialinvoke r9.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>($r6, $r5);

        return r9;
    }

    androidx.ads.identifier.internal.HoldingConnectionClient$BlockingServiceConnection getServiceConnection(android.content.ComponentName) throws java.io.IOException
    {
        androidx.ads.identifier.internal.HoldingConnectionClient r0;
        android.content.ComponentName r1;
        android.content.Intent r2, $r4;
        androidx.ads.identifier.internal.HoldingConnectionClient$BlockingServiceConnection r3, $r6;
        android.content.Context $r7;
        boolean $z0;
        java.io.IOException $r8;

        r0 := @this: androidx.ads.identifier.internal.HoldingConnectionClient;

        r1 := @parameter0: android.content.ComponentName;

        $r4 = new android.content.Intent;

        specialinvoke $r4.<android.content.Intent: void <init>(java.lang.String)>("androidx.ads.identifier.provider.GET_AD_ID");

        r2 = $r4;

        virtualinvoke r2.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>(r1);

        $r6 = new androidx.ads.identifier.internal.HoldingConnectionClient$BlockingServiceConnection;

        specialinvoke $r6.<androidx.ads.identifier.internal.HoldingConnectionClient$BlockingServiceConnection: void <init>(androidx.ads.identifier.internal.HoldingConnectionClient)>(r0);

        r3 = $r6;

        $r7 = r0.<androidx.ads.identifier.internal.HoldingConnectionClient: android.content.Context mContext>;

        $z0 = virtualinvoke $r7.<android.content.Context: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>(r2, r3, 1);

        if $z0 == 0 goto label1;

        return r3;

     label1:
        $r8 = new java.io.IOException;

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>("Connection failure");

        throw $r8;
    }

    androidx.ads.identifier.provider.IAdvertisingIdService getIdServiceFromConnection() throws java.util.concurrent.TimeoutException, java.lang.InterruptedException
    {
        androidx.ads.identifier.internal.HoldingConnectionClient r0;
        androidx.ads.identifier.internal.HoldingConnectionClient$BlockingServiceConnection $r1;
        android.os.IBinder $r2;
        androidx.ads.identifier.provider.IAdvertisingIdService $r3;

        r0 := @this: androidx.ads.identifier.internal.HoldingConnectionClient;

        $r1 = r0.<androidx.ads.identifier.internal.HoldingConnectionClient: androidx.ads.identifier.internal.HoldingConnectionClient$BlockingServiceConnection mConnection>;

        $r2 = virtualinvoke $r1.<androidx.ads.identifier.internal.HoldingConnectionClient$BlockingServiceConnection: android.os.IBinder getServiceWithTimeout()>();

        $r3 = staticinvoke <androidx.ads.identifier.provider.IAdvertisingIdService$Stub: androidx.ads.identifier.provider.IAdvertisingIdService asInterface(android.os.IBinder)>($r2);

        return $r3;
    }

