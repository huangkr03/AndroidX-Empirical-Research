androidx.test.espresso.base.RootViewPicker
<androidx.test.espresso.base.RootViewPicker: java.lang.String TAG>
<androidx.test.espresso.base.RootViewPicker: androidx.test.espresso.core.internal.deps.guava.collect.ImmutableList CREATED_WAIT_TIMES>
<androidx.test.espresso.base.RootViewPicker: androidx.test.espresso.core.internal.deps.guava.collect.ImmutableList RESUMED_WAIT_TIMES>
<androidx.test.espresso.base.RootViewPicker: androidx.test.espresso.UiController uiController>
<androidx.test.espresso.base.RootViewPicker: androidx.test.runner.lifecycle.ActivityLifecycleMonitor activityLifecycleMonitor>
<androidx.test.espresso.base.RootViewPicker: java.util.concurrent.atomic.AtomicReference needsActivity>
<androidx.test.espresso.base.RootViewPicker: androidx.test.espresso.base.RootViewPicker$RootResultFetcher rootResultFetcher>
<androidx.test.espresso.base.RootViewPicker: androidx.test.internal.platform.os.ControlledLooper controlledLooper>
<androidx.test.espresso.base.RootViewPicker: android.content.Context appContext>
    public android.view.View get()
    {
        androidx.test.espresso.base.RootViewPicker r0;
        android.os.Looper $r1, $r2;
        boolean $z0, $z1;
        java.util.concurrent.atomic.AtomicReference $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        android.view.View $r6;

        r0 := @this: androidx.test.espresso.base.RootViewPicker;

        $r1 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        $r2 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "must be called on main thread.");

        $r3 = r0.<androidx.test.espresso.base.RootViewPicker: java.util.concurrent.atomic.AtomicReference needsActivity>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r5 = (java.lang.Boolean) $r4;

        $z1 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label1;

        specialinvoke r0.<androidx.test.espresso.base.RootViewPicker: void waitForAtLeastOneActivityToBeResumed()>();

     label1:
        $r6 = specialinvoke r0.<androidx.test.espresso.base.RootViewPicker: android.view.View pickRootView()>();

        return $r6;
    }

    private android.view.View pickRootView()
    {
        androidx.test.espresso.base.RootViewPicker r0;
        androidx.test.espresso.Root $r1, $r2;
        android.view.View $r3;

        r0 := @this: androidx.test.espresso.base.RootViewPicker;

        $r1 = specialinvoke r0.<androidx.test.espresso.base.RootViewPicker: androidx.test.espresso.Root pickARoot()>();

        $r2 = specialinvoke r0.<androidx.test.espresso.base.RootViewPicker: androidx.test.espresso.Root waitForRootToBeReady(androidx.test.espresso.Root)>($r1);

        $r3 = virtualinvoke $r2.<androidx.test.espresso.Root: android.view.View getDecorView()>();

        return $r3;
    }

    private androidx.test.espresso.Root pickARoot()
    {
        androidx.test.espresso.base.RootViewPicker r0;
        long l0, $l1, $l2, $l3, $l7, $l8;
        androidx.test.espresso.base.RootViewPicker$NoActiveRootsBackoff r1, r18;
        androidx.test.espresso.base.RootViewPicker$NoMatchingRootBackoff r2, r19;
        java.util.concurrent.TimeUnit $r3;
        androidx.test.espresso.base.RootViewPicker$RootResultFetcher $r4, $r17;
        byte $b4;
        androidx.test.espresso.base.RootViewPicker$RootResults$State $r5, $r6, $r12;
        androidx.test.espresso.Root $r7, $r15;
        org.hamcrest.Matcher $r8;
        java.util.List $r9;
        androidx.test.espresso.NoMatchingRootException $r10;
        int[] $r11;
        int $i5, $i6;
        androidx.test.espresso.UiController $r13, $r14;
        androidx.test.espresso.base.RootViewPicker$RootResults r16;
        java.lang.Throwable r20;

        r0 := @this: androidx.test.espresso.base.RootViewPicker;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $l2 = virtualinvoke $r3.<java.util.concurrent.TimeUnit: long toMillis(long)>(60L);

        l0 = $l1 + $l2;

        $r4 = r0.<androidx.test.espresso.base.RootViewPicker: androidx.test.espresso.base.RootViewPicker$RootResultFetcher rootResultFetcher>;

        r16 = virtualinvoke $r4.<androidx.test.espresso.base.RootViewPicker$RootResultFetcher: androidx.test.espresso.base.RootViewPicker$RootResults fetch()>();

        r18 = new androidx.test.espresso.base.RootViewPicker$NoActiveRootsBackoff;

        r1 = r18;

        specialinvoke r18.<androidx.test.espresso.base.RootViewPicker$NoActiveRootsBackoff: void <init>()>();

        r19 = new androidx.test.espresso.base.RootViewPicker$NoMatchingRootBackoff;

        r2 = r19;

        specialinvoke r19.<androidx.test.espresso.base.RootViewPicker$NoMatchingRootBackoff: void <init>()>();

     label1:
        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $b4 = $l3 cmp l0;

        if $b4 > 0 goto label6;

        $r11 = <androidx.test.espresso.base.RootViewPicker$1: int[] $SwitchMap$androidx$test$espresso$base$RootViewPicker$RootResults$State>;

        $r12 = virtualinvoke r16.<androidx.test.espresso.base.RootViewPicker$RootResults: androidx.test.espresso.base.RootViewPicker$RootResults$State getState()>();

        $i5 = virtualinvoke $r12.<androidx.test.espresso.base.RootViewPicker$RootResults$State: int ordinal()>();

        $i6 = $r11[$i5];

        tableswitch($i6)
        {
            case 1: goto label5;
            case 2: goto label4;
            case 3: goto label3;
            default: goto label2;
        };

     label2:
        $r17 = r0.<androidx.test.espresso.base.RootViewPicker: androidx.test.espresso.base.RootViewPicker$RootResultFetcher rootResultFetcher>;

        r16 = virtualinvoke $r17.<androidx.test.espresso.base.RootViewPicker$RootResultFetcher: androidx.test.espresso.base.RootViewPicker$RootResults fetch()>();

        goto label1;

     label3:
        $r13 = r0.<androidx.test.espresso.base.RootViewPicker: androidx.test.espresso.UiController uiController>;

        $l7 = virtualinvoke r2.<androidx.test.espresso.base.RootViewPicker$BackOff: long getNextBackoffInMillis()>();

        interfaceinvoke $r13.<androidx.test.espresso.UiController: void loopMainThreadForAtLeast(long)>($l7);

        goto label2;

     label4:
        $r14 = r0.<androidx.test.espresso.base.RootViewPicker: androidx.test.espresso.UiController uiController>;

        $l8 = virtualinvoke r1.<androidx.test.espresso.base.RootViewPicker$BackOff: long getNextBackoffInMillis()>();

        interfaceinvoke $r14.<androidx.test.espresso.UiController: void loopMainThreadForAtLeast(long)>($l8);

        goto label2;

     label5:
        $r15 = virtualinvoke r16.<androidx.test.espresso.base.RootViewPicker$RootResults: androidx.test.espresso.Root getPickedRoot()>();

        return $r15;

     label6:
        $r5 = <androidx.test.espresso.base.RootViewPicker$RootResults$State: androidx.test.espresso.base.RootViewPicker$RootResults$State ROOTS_PICKED>;

        $r6 = virtualinvoke r16.<androidx.test.espresso.base.RootViewPicker$RootResults: androidx.test.espresso.base.RootViewPicker$RootResults$State getState()>();

        if $r5 == $r6 goto label7;

        $r8 = staticinvoke <androidx.test.espresso.base.RootViewPicker$RootResults: org.hamcrest.Matcher '-$$Nest$fgetrootSelector'(androidx.test.espresso.base.RootViewPicker$RootResults)>(r16);

        $r9 = staticinvoke <androidx.test.espresso.base.RootViewPicker$RootResults: java.util.List '-$$Nest$fgetallRoots'(androidx.test.espresso.base.RootViewPicker$RootResults)>(r16);

        $r10 = staticinvoke <androidx.test.espresso.NoMatchingRootException: androidx.test.espresso.NoMatchingRootException create(org.hamcrest.Matcher,java.util.List)>($r8, $r9);

        r20 = (java.lang.Throwable) $r10;

        throw r20;

     label7:
        $r7 = virtualinvoke r16.<androidx.test.espresso.base.RootViewPicker$RootResults: androidx.test.espresso.Root getPickedRoot()>();

        return $r7;
    }

    private androidx.test.espresso.Root waitForRootToBeReady(androidx.test.espresso.Root)
    {
        androidx.test.espresso.Root r0;
        long l0, $l1, $l2, $l3, $l5;
        java.lang.Object[] r1;
        java.util.concurrent.TimeUnit $r2;
        byte $b4;
        java.lang.String $r3;
        boolean $z0;
        androidx.test.internal.platform.os.ControlledLooper $r4;
        android.view.View $r5;
        androidx.test.espresso.UiController $r6;
        androidx.test.espresso.base.RootViewPicker r7;
        androidx.test.espresso.base.RootViewPicker$RootReadyBackoff r8, r11;
        androidx.test.espresso.base.RootViewPicker$RootViewWithoutFocusException r9, r12;
        java.util.Locale r10;
        java.lang.Throwable r13;

        r7 := @this: androidx.test.espresso.base.RootViewPicker;

        r0 := @parameter0: androidx.test.espresso.Root;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $l2 = virtualinvoke $r2.<java.util.concurrent.TimeUnit: long toMillis(long)>(10L);

        l0 = $l1 + $l2;

        r11 = new androidx.test.espresso.base.RootViewPicker$RootReadyBackoff;

        r8 = r11;

        specialinvoke r11.<androidx.test.espresso.base.RootViewPicker$RootReadyBackoff: void <init>()>();

     label1:
        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $b4 = $l3 cmp l0;

        if $b4 > 0 goto label2;

        $z0 = virtualinvoke r0.<androidx.test.espresso.Root: boolean isReady()>();

        if $z0 == 0 goto label3;

        return r0;

     label2:
        r12 = new androidx.test.espresso.base.RootViewPicker$RootViewWithoutFocusException;

        r9 = r12;

        r10 = <java.util.Locale: java.util.Locale ROOT>;

        r1 = newarray (java.lang.Object)[1];

        r1[0] = r0;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(r10, "Waited for the root of the view hierarchy to have window focus and not request layout for 10 seconds. If you specified a non default root matcher, it may be picking a root that never takes focus. Root:\n%s", r1);

        specialinvoke r12.<androidx.test.espresso.base.RootViewPicker$RootViewWithoutFocusException: void <init>(java.lang.String,androidx.test.espresso.base.RootViewPicker$RootViewWithoutFocusException-IA)>($r3, null);

        r13 = (java.lang.Throwable) r9;

        throw r13;

     label3:
        $r4 = r7.<androidx.test.espresso.base.RootViewPicker: androidx.test.internal.platform.os.ControlledLooper controlledLooper>;

        $r5 = virtualinvoke r0.<androidx.test.espresso.Root: android.view.View getDecorView()>();

        interfaceinvoke $r4.<androidx.test.internal.platform.os.ControlledLooper: void simulateWindowFocus(android.view.View)>($r5);

        $r6 = r7.<androidx.test.espresso.base.RootViewPicker: androidx.test.espresso.UiController uiController>;

        $l5 = virtualinvoke r8.<androidx.test.espresso.base.RootViewPicker$BackOff: long getNextBackoffInMillis()>();

        interfaceinvoke $r6.<androidx.test.espresso.UiController: void loopMainThreadForAtLeast(long)>($l5);

        goto label1;
    }

    public volatile java.lang.Object get()
    {
        androidx.test.espresso.base.RootViewPicker r0;
        android.view.View $r1;

        r0 := @this: androidx.test.espresso.base.RootViewPicker;

        $r1 = virtualinvoke r0.<androidx.test.espresso.base.RootViewPicker: android.view.View get()>();

        return $r1;
    }

    static volatile java.lang.String '-$$Nest$sfgetTAG'()
    {
        java.lang.String $r0;

        $r0 = <androidx.test.espresso.base.RootViewPicker: java.lang.String TAG>;

        return $r0;
    }

    private java.util.List getAllActiveActivities()
    {
        androidx.test.espresso.base.RootViewPicker r0;
        java.util.ArrayList r1;
        java.util.Iterator r2;
        androidx.test.runner.lifecycle.Stage $r3, $r4, r9;
        java.util.EnumSet $r5;
        boolean $z0;
        androidx.test.runner.lifecycle.ActivityLifecycleMonitor $r6;
        java.util.Collection $r7;
        java.lang.Object r8;
        java.util.List r10, r11;

        r0 := @this: androidx.test.espresso.base.RootViewPicker;

        r1 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.collect.Lists: java.util.ArrayList newArrayList()>();

        $r4 = <androidx.test.runner.lifecycle.Stage: androidx.test.runner.lifecycle.Stage PRE_ON_CREATE>;

        $r3 = <androidx.test.runner.lifecycle.Stage: androidx.test.runner.lifecycle.Stage RESTARTED>;

        $r5 = staticinvoke <java.util.EnumSet: java.util.EnumSet range(java.lang.Enum,java.lang.Enum)>($r4, $r3);

        r2 = virtualinvoke $r5.<java.util.EnumSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r9 = (androidx.test.runner.lifecycle.Stage) r8;

        $r6 = r0.<androidx.test.espresso.base.RootViewPicker: androidx.test.runner.lifecycle.ActivityLifecycleMonitor activityLifecycleMonitor>;

        $r7 = interfaceinvoke $r6.<androidx.test.runner.lifecycle.ActivityLifecycleMonitor: java.util.Collection getActivitiesInStage(androidx.test.runner.lifecycle.Stage)>(r9);

        r10 = (java.util.List) r1;

        interfaceinvoke r10.<java.util.List: boolean addAll(java.util.Collection)>($r7);

        goto label1;

     label2:
        r11 = (java.util.List) r1;

        return r11;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.lang.Integer $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r10, $r11, $r12;
        androidx.test.espresso.core.internal.deps.guava.collect.ImmutableList $r6, $r13;

        $r0 = class "Landroidx/test/espresso/base/RootViewPicker;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <androidx.test.espresso.base.RootViewPicker: java.lang.String TAG> = $r1;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(50);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(150);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(250);

        $r6 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.collect.ImmutableList: androidx.test.espresso.core.internal.deps.guava.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r3, $r4, $r5);

        <androidx.test.espresso.base.RootViewPicker: androidx.test.espresso.core.internal.deps.guava.collect.ImmutableList CREATED_WAIT_TIMES> = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(50);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(100);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(500);

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2000);

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(30000);

        $r13 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.collect.ImmutableList: androidx.test.espresso.core.internal.deps.guava.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r7, $r8, $r9, $r10, $r11, $r12);

        <androidx.test.espresso.base.RootViewPicker: androidx.test.espresso.core.internal.deps.guava.collect.ImmutableList RESUMED_WAIT_TIMES> = $r13;

        return;
    }

    void <init>(androidx.test.espresso.UiController, androidx.test.espresso.base.RootViewPicker$RootResultFetcher, androidx.test.runner.lifecycle.ActivityLifecycleMonitor, java.util.concurrent.atomic.AtomicReference, androidx.test.internal.platform.os.ControlledLooper, android.content.Context)
    {
        androidx.test.espresso.base.RootViewPicker r0;
        androidx.test.espresso.UiController r1;
        androidx.test.espresso.base.RootViewPicker$RootResultFetcher r2;
        androidx.test.runner.lifecycle.ActivityLifecycleMonitor r3;
        java.util.concurrent.atomic.AtomicReference r4;
        androidx.test.internal.platform.os.ControlledLooper r5;
        android.content.Context r6;

        r0 := @this: androidx.test.espresso.base.RootViewPicker;

        r1 := @parameter0: androidx.test.espresso.UiController;

        r2 := @parameter1: androidx.test.espresso.base.RootViewPicker$RootResultFetcher;

        r3 := @parameter2: androidx.test.runner.lifecycle.ActivityLifecycleMonitor;

        r4 := @parameter3: java.util.concurrent.atomic.AtomicReference;

        r5 := @parameter4: androidx.test.internal.platform.os.ControlledLooper;

        r6 := @parameter5: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.test.espresso.base.RootViewPicker: androidx.test.espresso.UiController uiController> = r1;

        r0.<androidx.test.espresso.base.RootViewPicker: androidx.test.espresso.base.RootViewPicker$RootResultFetcher rootResultFetcher> = r2;

        r0.<androidx.test.espresso.base.RootViewPicker: androidx.test.runner.lifecycle.ActivityLifecycleMonitor activityLifecycleMonitor> = r3;

        r0.<androidx.test.espresso.base.RootViewPicker: java.util.concurrent.atomic.AtomicReference needsActivity> = r4;

        r0.<androidx.test.espresso.base.RootViewPicker: androidx.test.internal.platform.os.ControlledLooper controlledLooper> = r5;

        r0.<androidx.test.espresso.base.RootViewPicker: android.content.Context appContext> = r6;

        return;
    }

    private void waitForAtLeastOneActivityToBeResumed()
    {
        androidx.test.runner.lifecycle.Stage $r0, $r15, $r27;
        androidx.test.runner.lifecycle.ActivityLifecycleMonitor $r1, $r16, $r28;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.Object[] $r2;
        java.lang.Object $r3, $r8, $r19;
        android.content.Context $r4;
        androidx.test.espresso.UiController $r5, $r14, $r25, $r26;
        android.app.Activity $r6;
        androidx.test.espresso.core.internal.deps.guava.collect.ImmutableList $r7, $r18;
        java.lang.Integer $r9, $r20;
        int $i0, $i2;
        java.lang.StringBuilder $r10, $r11, $r12, $r21, $r22, $r23, r34, r38, r40, r42;
        java.lang.String $r13, $r24, r33, r37;
        java.util.Collection $r17, r30;
        androidx.test.espresso.base.RootViewPicker r29;
        java.util.List r31;
        androidx.test.espresso.core.internal.deps.guava.collect.UnmodifiableIterator r32, r36;
        long l4, l5;
        androidx.test.espresso.NoActivityResumedException r35, r39, r41, r43;
        java.lang.Throwable r44, r45;

        r29 := @this: androidx.test.espresso.base.RootViewPicker;

        $r1 = r29.<androidx.test.espresso.base.RootViewPicker: androidx.test.runner.lifecycle.ActivityLifecycleMonitor activityLifecycleMonitor>;

        $r0 = <androidx.test.runner.lifecycle.Stage: androidx.test.runner.lifecycle.Stage RESUMED>;

        r30 = interfaceinvoke $r1.<androidx.test.runner.lifecycle.ActivityLifecycleMonitor: java.util.Collection getActivitiesInStage(androidx.test.runner.lifecycle.Stage)>($r0);

        $z0 = interfaceinvoke r30.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r26 = r29.<androidx.test.espresso.base.RootViewPicker: androidx.test.espresso.UiController uiController>;

        interfaceinvoke $r26.<androidx.test.espresso.UiController: void loopMainThreadUntilIdle()>();

        $r28 = r29.<androidx.test.espresso.base.RootViewPicker: androidx.test.runner.lifecycle.ActivityLifecycleMonitor activityLifecycleMonitor>;

        $r27 = <androidx.test.runner.lifecycle.Stage: androidx.test.runner.lifecycle.Stage RESUMED>;

        r30 = interfaceinvoke $r28.<androidx.test.runner.lifecycle.ActivityLifecycleMonitor: java.util.Collection getActivitiesInStage(androidx.test.runner.lifecycle.Stage)>($r27);

     label1:
        $z1 = interfaceinvoke r30.<java.util.Collection: boolean isEmpty()>();

        if $z1 == 0 goto label6;

        r31 = specialinvoke r29.<androidx.test.espresso.base.RootViewPicker: java.util.List getAllActiveActivities()>();

        $z2 = interfaceinvoke r31.<java.util.List: boolean isEmpty()>();

        if $z2 == 0 goto label3;

        $r18 = <androidx.test.espresso.base.RootViewPicker: androidx.test.espresso.core.internal.deps.guava.collect.ImmutableList CREATED_WAIT_TIMES>;

        r32 = virtualinvoke $r18.<androidx.test.espresso.core.internal.deps.guava.collect.ImmutableList: androidx.test.espresso.core.internal.deps.guava.collect.UnmodifiableIterator iterator()>();

     label2:
        $z5 = interfaceinvoke r32.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label3;

        $r19 = interfaceinvoke r32.<java.util.Iterator: java.lang.Object next()>();

        $r20 = (java.lang.Integer) $r19;

        $i2 = virtualinvoke $r20.<java.lang.Integer: int intValue()>();

        l4 = (long) $i2;

        r33 = <androidx.test.espresso.base.RootViewPicker: java.lang.String TAG>;

        r40 = new java.lang.StringBuilder;

        r34 = r40;

        specialinvoke r40.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No activities found - waiting: ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l4);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms for one to appear.");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>(r33, $r24);

        $r25 = r29.<androidx.test.espresso.base.RootViewPicker: androidx.test.espresso.UiController uiController>;

        interfaceinvoke $r25.<androidx.test.espresso.UiController: void loopMainThreadForAtLeast(long)>(l4);

        r31 = specialinvoke r29.<androidx.test.espresso.base.RootViewPicker: java.util.List getAllActiveActivities()>();

        $z6 = interfaceinvoke r31.<java.util.List: boolean isEmpty()>();

        if $z6 != 0 goto label2;

     label3:
        $z7 = interfaceinvoke r31.<java.util.List: boolean isEmpty()>();

        if $z7 == 0 goto label4;

        r41 = new androidx.test.espresso.NoActivityResumedException;

        r35 = r41;

        specialinvoke r41.<androidx.test.espresso.NoActivityResumedException: void <init>(java.lang.String)>("No activities found. Did you forget to launch the activity by calling getActivity() or startActivitySync or similar?");

        r44 = (java.lang.Throwable) r35;

        throw r44;

     label4:
        $r7 = <androidx.test.espresso.base.RootViewPicker: androidx.test.espresso.core.internal.deps.guava.collect.ImmutableList RESUMED_WAIT_TIMES>;

        r36 = virtualinvoke $r7.<androidx.test.espresso.core.internal.deps.guava.collect.ImmutableList: androidx.test.espresso.core.internal.deps.guava.collect.UnmodifiableIterator iterator()>();

     label5:
        $z3 = interfaceinvoke r36.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label7;

        $r8 = interfaceinvoke r36.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (java.lang.Integer) $r8;

        $i0 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        l5 = (long) $i0;

        r37 = <androidx.test.espresso.base.RootViewPicker: java.lang.String TAG>;

        r42 = new java.lang.StringBuilder;

        r38 = r42;

        specialinvoke r42.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No activity currently resumed - waiting: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l5);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms for one to appear.");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>(r37, $r13);

        $r14 = r29.<androidx.test.espresso.base.RootViewPicker: androidx.test.espresso.UiController uiController>;

        interfaceinvoke $r14.<androidx.test.espresso.UiController: void loopMainThreadForAtLeast(long)>(l5);

        $r16 = r29.<androidx.test.espresso.base.RootViewPicker: androidx.test.runner.lifecycle.ActivityLifecycleMonitor activityLifecycleMonitor>;

        $r15 = <androidx.test.runner.lifecycle.Stage: androidx.test.runner.lifecycle.Stage RESUMED>;

        $r17 = interfaceinvoke $r16.<androidx.test.runner.lifecycle.ActivityLifecycleMonitor: java.util.Collection getActivitiesInStage(androidx.test.runner.lifecycle.Stage)>($r15);

        $z4 = interfaceinvoke $r17.<java.util.Collection: boolean isEmpty()>();

        if $z4 != 0 goto label5;

        return;

     label6:
        $r2 = interfaceinvoke r30.<java.util.Collection: java.lang.Object[] toArray()>();

        $r3 = $r2[0];

        $r6 = (android.app.Activity) $r3;

        $r5 = r29.<androidx.test.espresso.base.RootViewPicker: androidx.test.espresso.UiController uiController>;

        $r4 = r29.<androidx.test.espresso.base.RootViewPicker: android.content.Context appContext>;

        staticinvoke <androidx.test.espresso.base.ConfigurationSynchronizationUtils: void waitForConfigurationChangesOnActivity(android.app.Activity,androidx.test.espresso.UiController,android.content.Context)>($r6, $r5, $r4);

        return;

     label7:
        r43 = new androidx.test.espresso.NoActivityResumedException;

        r39 = r43;

        specialinvoke r43.<androidx.test.espresso.NoActivityResumedException: void <init>(java.lang.String)>("No activities in stage RESUMED. Did you forget to launch the activity. (test.getActivity() or similar)?");

        r45 = (java.lang.Throwable) r39;

        throw r45;
    }

androidx.test.espresso.base.RootViewPicker$1
<androidx.test.espresso.base.RootViewPicker$1: int[] $SwitchMap$androidx$test$espresso$base$RootViewPicker$RootResults$State>
    static void <clinit>()
    {
        androidx.test.espresso.base.RootViewPicker$RootResults$State[] $r0;
        int $i0, $i1, $i2, $i3;
        int[] $r1, $r3, $r5, $r9;
        androidx.test.espresso.base.RootViewPicker$RootResults$State $r2, $r4, $r10;
        java.lang.Throwable $r6, $r7, $r8;

        $r0 = staticinvoke <androidx.test.espresso.base.RootViewPicker$RootResults$State: androidx.test.espresso.base.RootViewPicker$RootResults$State[] values()>();

        $i0 = lengthof $r0;

        $r1 = newarray (int)[$i0];

        <androidx.test.espresso.base.RootViewPicker$1: int[] $SwitchMap$androidx$test$espresso$base$RootViewPicker$RootResults$State> = $r1;

     label1:
        $r3 = <androidx.test.espresso.base.RootViewPicker$1: int[] $SwitchMap$androidx$test$espresso$base$RootViewPicker$RootResults$State>;

        $r2 = <androidx.test.espresso.base.RootViewPicker$RootResults$State: androidx.test.espresso.base.RootViewPicker$RootResults$State ROOTS_PICKED>;

        $i1 = virtualinvoke $r2.<androidx.test.espresso.base.RootViewPicker$RootResults$State: int ordinal()>();

        $r3[$i1] = 1;

     label2:
        $r5 = <androidx.test.espresso.base.RootViewPicker$1: int[] $SwitchMap$androidx$test$espresso$base$RootViewPicker$RootResults$State>;

        $r4 = <androidx.test.espresso.base.RootViewPicker$RootResults$State: androidx.test.espresso.base.RootViewPicker$RootResults$State NO_ROOTS_PRESENT>;

        $i2 = virtualinvoke $r4.<androidx.test.espresso.base.RootViewPicker$RootResults$State: int ordinal()>();

        $r5[$i2] = 2;

     label3:
        $r9 = <androidx.test.espresso.base.RootViewPicker$1: int[] $SwitchMap$androidx$test$espresso$base$RootViewPicker$RootResults$State>;

        $r10 = <androidx.test.espresso.base.RootViewPicker$RootResults$State: androidx.test.espresso.base.RootViewPicker$RootResults$State NO_ROOTS_PICKED>;

        $i3 = virtualinvoke $r10.<androidx.test.espresso.base.RootViewPicker$RootResults$State: int ordinal()>();

        $r9[$i3] = 3;

     label4:
        return;

     label5:
        $r8 := @caughtexception;

        goto label2;

     label6:
        $r7 := @caughtexception;

        goto label3;

     label7:
        $r6 := @caughtexception;

        return;

        catch java.lang.NoSuchFieldError from label1 to label2 with label5;
        catch java.lang.NoSuchFieldError from label2 to label3 with label6;
        catch java.lang.NoSuchFieldError from label3 to label4 with label7;
    }

androidx.test.espresso.base.RootViewPicker$BackOff
<androidx.test.espresso.base.RootViewPicker$BackOff: java.util.List backoffTimes>
<androidx.test.espresso.base.RootViewPicker$BackOff: java.util.concurrent.TimeUnit timeUnit>
<androidx.test.espresso.base.RootViewPicker$BackOff: int numberOfAttempts>
    protected final long getBackoffForAttempt()
    {
        androidx.test.espresso.base.RootViewPicker$BackOff r0;
        int i0, $i1, $i2, $i3, $i4, $i7, $i8, $i9, i11;
        java.util.List $r1, $r3, $r4, r7;
        long $l5, $l6, $l10;
        java.util.concurrent.TimeUnit $r2;
        java.lang.Object $r5, r8;
        java.lang.Integer $r6, r9;

        r0 := @this: androidx.test.espresso.base.RootViewPicker$BackOff;

        $i1 = r0.<androidx.test.espresso.base.RootViewPicker$BackOff: int numberOfAttempts>;

        $r1 = r0.<androidx.test.espresso.base.RootViewPicker$BackOff: java.util.List backoffTimes>;

        $i2 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i1 < $i2 goto label1;

        $r4 = r0.<androidx.test.espresso.base.RootViewPicker$BackOff: java.util.List backoffTimes>;

        $r3 = r0.<androidx.test.espresso.base.RootViewPicker$BackOff: java.util.List backoffTimes>;

        $i7 = interfaceinvoke $r3.<java.util.List: int size()>();

        $i8 = $i7 + -1;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i8);

        $r6 = (java.lang.Integer) $r5;

        $i9 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        $l10 = (long) $i9;

        return $l10;

     label1:
        r7 = r0.<androidx.test.espresso.base.RootViewPicker$BackOff: java.util.List backoffTimes>;

        i0 = r0.<androidx.test.espresso.base.RootViewPicker$BackOff: int numberOfAttempts>;

        r8 = interfaceinvoke r7.<java.util.List: java.lang.Object get(int)>(i0);

        r9 = (java.lang.Integer) r8;

        i11 = virtualinvoke r9.<java.lang.Integer: int intValue()>();

        $i3 = r0.<androidx.test.espresso.base.RootViewPicker$BackOff: int numberOfAttempts>;

        $i4 = $i3 + 1;

        r0.<androidx.test.espresso.base.RootViewPicker$BackOff: int numberOfAttempts> = $i4;

        $r2 = r0.<androidx.test.espresso.base.RootViewPicker$BackOff: java.util.concurrent.TimeUnit timeUnit>;

        $l5 = (long) i11;

        $l6 = virtualinvoke $r2.<java.util.concurrent.TimeUnit: long toMillis(long)>($l5);

        return $l6;
    }

<androidx.test.espresso.base.RootViewPicker$BackOff: long getNextBackoffInMillis()>
    public void <init>(java.util.List, java.util.concurrent.TimeUnit)
    {
        androidx.test.espresso.base.RootViewPicker$BackOff r0;
        java.util.List r1;
        java.util.concurrent.TimeUnit r2;

        r0 := @this: androidx.test.espresso.base.RootViewPicker$BackOff;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.concurrent.TimeUnit;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.test.espresso.base.RootViewPicker$BackOff: int numberOfAttempts> = 0;

        r0.<androidx.test.espresso.base.RootViewPicker$BackOff: java.util.List backoffTimes> = r1;

        r0.<androidx.test.espresso.base.RootViewPicker$BackOff: java.util.concurrent.TimeUnit timeUnit> = r2;

        return;
    }

androidx.test.espresso.base.RootViewPicker$NoActiveRootsBackoff
<androidx.test.espresso.base.RootViewPicker$NoActiveRootsBackoff: androidx.test.espresso.core.internal.deps.guava.collect.ImmutableList NO_ACTIVE_ROOTS_BACKOFF>
    public long getNextBackoffInMillis()
    {
        long l0;
        java.lang.Object[] r0;
        java.lang.Long $r1;
        androidx.test.espresso.base.RootViewPicker$NoActiveRootsBackoff r2;
        java.lang.String r3;

        r2 := @this: androidx.test.espresso.base.RootViewPicker$NoActiveRootsBackoff;

        l0 = virtualinvoke r2.<androidx.test.espresso.base.RootViewPicker$NoActiveRootsBackoff: long getBackoffForAttempt()>();

        r3 = staticinvoke <androidx.test.espresso.base.RootViewPicker: java.lang.String '-$$Nest$sfgetTAG'()>();

        r0 = newarray (java.lang.Object)[1];

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        r0[0] = $r1;

        staticinvoke <androidx.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>(r3, "No active roots available - waiting: %sms for one to appear.", r0);

        return l0;
    }

    static void <clinit>()
    {
        java.lang.Integer $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        androidx.test.espresso.core.internal.deps.guava.collect.ImmutableList $r9;

        $r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(20);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(30);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(50);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(80);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(130);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(210);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(340);

        $r9 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.collect.ImmutableList: androidx.test.espresso.core.internal.deps.guava.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8);

        <androidx.test.espresso.base.RootViewPicker$NoActiveRootsBackoff: androidx.test.espresso.core.internal.deps.guava.collect.ImmutableList NO_ACTIVE_ROOTS_BACKOFF> = $r9;

        return;
    }

    public void <init>()
    {
        androidx.test.espresso.base.RootViewPicker$NoActiveRootsBackoff r0;
        java.util.concurrent.TimeUnit $r1;
        androidx.test.espresso.core.internal.deps.guava.collect.ImmutableList $r2;

        r0 := @this: androidx.test.espresso.base.RootViewPicker$NoActiveRootsBackoff;

        $r2 = <androidx.test.espresso.base.RootViewPicker$NoActiveRootsBackoff: androidx.test.espresso.core.internal.deps.guava.collect.ImmutableList NO_ACTIVE_ROOTS_BACKOFF>;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        specialinvoke r0.<androidx.test.espresso.base.RootViewPicker$BackOff: void <init>(java.util.List,java.util.concurrent.TimeUnit)>($r2, $r1);

        return;
    }

androidx.test.espresso.base.RootViewPicker$NoMatchingRootBackoff
<androidx.test.espresso.base.RootViewPicker$NoMatchingRootBackoff: androidx.test.espresso.core.internal.deps.guava.collect.ImmutableList NO_MATCHING_ROOT_BACKOFF>
    public long getNextBackoffInMillis()
    {
        long l0;
        java.util.Locale r0;
        java.lang.Object[] r1;
        java.lang.Long $r2;
        java.lang.String $r3, r5;
        androidx.test.espresso.base.RootViewPicker$NoMatchingRootBackoff r4;

        r4 := @this: androidx.test.espresso.base.RootViewPicker$NoMatchingRootBackoff;

        l0 = virtualinvoke r4.<androidx.test.espresso.base.RootViewPicker$NoMatchingRootBackoff: long getBackoffForAttempt()>();

        r5 = staticinvoke <androidx.test.espresso.base.RootViewPicker: java.lang.String '-$$Nest$sfgetTAG'()>();

        r0 = <java.util.Locale: java.util.Locale ROOT>;

        r1 = newarray (java.lang.Object)[1];

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        r1[0] = $r2;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(r0, "No matching root available - waiting: %sms for one to appear.", r1);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>(r5, $r3);

        return l0;
    }

    static void <clinit>()
    {
        java.lang.Integer $r0, $r1, $r2, $r3, $r4, $r5;
        androidx.test.espresso.core.internal.deps.guava.collect.ImmutableList $r6;

        $r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(20);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(200);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(400);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1000);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2000);

        $r6 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.collect.ImmutableList: androidx.test.espresso.core.internal.deps.guava.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r0, $r1, $r2, $r3, $r4, $r5);

        <androidx.test.espresso.base.RootViewPicker$NoMatchingRootBackoff: androidx.test.espresso.core.internal.deps.guava.collect.ImmutableList NO_MATCHING_ROOT_BACKOFF> = $r6;

        return;
    }

    public void <init>()
    {
        androidx.test.espresso.base.RootViewPicker$NoMatchingRootBackoff r0;
        java.util.concurrent.TimeUnit $r1;
        androidx.test.espresso.core.internal.deps.guava.collect.ImmutableList $r2;

        r0 := @this: androidx.test.espresso.base.RootViewPicker$NoMatchingRootBackoff;

        $r2 = <androidx.test.espresso.base.RootViewPicker$NoMatchingRootBackoff: androidx.test.espresso.core.internal.deps.guava.collect.ImmutableList NO_MATCHING_ROOT_BACKOFF>;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        specialinvoke r0.<androidx.test.espresso.base.RootViewPicker$BackOff: void <init>(java.util.List,java.util.concurrent.TimeUnit)>($r2, $r1);

        return;
    }

androidx.test.espresso.base.RootViewPicker$RootReadyBackoff
<androidx.test.espresso.base.RootViewPicker$RootReadyBackoff: androidx.test.espresso.core.internal.deps.guava.collect.ImmutableList ROOT_READY_BACKOFF>
    public long getNextBackoffInMillis()
    {
        long l0;
        java.util.Locale r0;
        java.lang.Object[] r1;
        java.lang.Long $r2;
        java.lang.String $r3, r5;
        androidx.test.espresso.base.RootViewPicker$RootReadyBackoff r4;

        r4 := @this: androidx.test.espresso.base.RootViewPicker$RootReadyBackoff;

        l0 = virtualinvoke r4.<androidx.test.espresso.base.RootViewPicker$RootReadyBackoff: long getBackoffForAttempt()>();

        r5 = staticinvoke <androidx.test.espresso.base.RootViewPicker: java.lang.String '-$$Nest$sfgetTAG'()>();

        r0 = <java.util.Locale: java.util.Locale ROOT>;

        r1 = newarray (java.lang.Object)[1];

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        r1[0] = $r2;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(r0, "Root not ready - waiting: %sms for one to appear.", r1);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>(r5, $r3);

        return l0;
    }

    static void <clinit>()
    {
        java.lang.Integer $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        androidx.test.espresso.core.internal.deps.guava.collect.ImmutableList $r8;

        $r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(25);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(50);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(100);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(200);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(400);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(800);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1000);

        $r8 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.collect.ImmutableList: androidx.test.espresso.core.internal.deps.guava.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7);

        <androidx.test.espresso.base.RootViewPicker$RootReadyBackoff: androidx.test.espresso.core.internal.deps.guava.collect.ImmutableList ROOT_READY_BACKOFF> = $r8;

        return;
    }

    public void <init>()
    {
        androidx.test.espresso.base.RootViewPicker$RootReadyBackoff r0;
        java.util.concurrent.TimeUnit $r1;
        androidx.test.espresso.core.internal.deps.guava.collect.ImmutableList $r2;

        r0 := @this: androidx.test.espresso.base.RootViewPicker$RootReadyBackoff;

        $r2 = <androidx.test.espresso.base.RootViewPicker$RootReadyBackoff: androidx.test.espresso.core.internal.deps.guava.collect.ImmutableList ROOT_READY_BACKOFF>;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        specialinvoke r0.<androidx.test.espresso.base.RootViewPicker$BackOff: void <init>(java.util.List,java.util.concurrent.TimeUnit)>($r2, $r1);

        return;
    }

androidx.test.espresso.base.RootViewPicker$RootResultFetcher
<androidx.test.espresso.base.RootViewPicker$RootResultFetcher: org.hamcrest.Matcher selector>
<androidx.test.espresso.base.RootViewPicker$RootResultFetcher: androidx.test.espresso.base.ActiveRootLister activeRootLister>
    public androidx.test.espresso.base.RootViewPicker$RootResults fetch()
    {
        androidx.test.espresso.base.RootViewPicker$RootResultFetcher r0;
        java.util.List r1, r11, r12;
        java.util.ArrayList r2;
        androidx.test.espresso.Root r3;
        androidx.test.espresso.base.ActiveRootLister $r4;
        org.hamcrest.Matcher $r5, $r7;
        java.lang.Object $r6;
        boolean $z0, $z2;
        java.util.Iterator r8;
        androidx.test.espresso.base.RootViewPicker$RootResults r9, r10;

        r0 := @this: androidx.test.espresso.base.RootViewPicker$RootResultFetcher;

        $r4 = r0.<androidx.test.espresso.base.RootViewPicker$RootResultFetcher: androidx.test.espresso.base.ActiveRootLister activeRootLister>;

        r1 = interfaceinvoke $r4.<androidx.test.espresso.base.ActiveRootLister: java.util.List listActiveRoots()>();

        r2 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.collect.Lists: java.util.ArrayList newArrayList()>();

        r8 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        $r6 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.test.espresso.Root) $r6;

        $r7 = r0.<androidx.test.espresso.base.RootViewPicker$RootResultFetcher: org.hamcrest.Matcher selector>;

        $z0 = interfaceinvoke $r7.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r3);

        if $z0 == 0 goto label1;

        r11 = (java.util.List) r2;

        interfaceinvoke r11.<java.util.List: boolean add(java.lang.Object)>(r3);

        goto label1;

     label2:
        r10 = new androidx.test.espresso.base.RootViewPicker$RootResults;

        r9 = r10;

        $r5 = r0.<androidx.test.espresso.base.RootViewPicker$RootResultFetcher: org.hamcrest.Matcher selector>;

        r12 = (java.util.List) r2;

        specialinvoke r10.<androidx.test.espresso.base.RootViewPicker$RootResults: void <init>(java.util.List,java.util.List,org.hamcrest.Matcher,androidx.test.espresso.base.RootViewPicker$RootResults-IA)>(r1, r12, $r5, null);

        return r9;
    }

    public void <init>(androidx.test.espresso.base.ActiveRootLister, java.util.concurrent.atomic.AtomicReference)
    {
        androidx.test.espresso.base.RootViewPicker$RootResultFetcher r0;
        androidx.test.espresso.base.ActiveRootLister r1;
        java.util.concurrent.atomic.AtomicReference r2;
        java.lang.Object $r3;
        org.hamcrest.Matcher $r4;

        r0 := @this: androidx.test.espresso.base.RootViewPicker$RootResultFetcher;

        r1 := @parameter0: androidx.test.espresso.base.ActiveRootLister;

        r2 := @parameter1: java.util.concurrent.atomic.AtomicReference;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.test.espresso.base.RootViewPicker$RootResultFetcher: androidx.test.espresso.base.ActiveRootLister activeRootLister> = r1;

        $r3 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r4 = (org.hamcrest.Matcher) $r3;

        r0.<androidx.test.espresso.base.RootViewPicker$RootResultFetcher: org.hamcrest.Matcher selector> = $r4;

        return;
    }

androidx.test.espresso.base.RootViewPicker$RootResults$State
<androidx.test.espresso.base.RootViewPicker$RootResults$State: androidx.test.espresso.base.RootViewPicker$RootResults$State NO_ROOTS_PRESENT>
<androidx.test.espresso.base.RootViewPicker$RootResults$State: androidx.test.espresso.base.RootViewPicker$RootResults$State NO_ROOTS_PICKED>
<androidx.test.espresso.base.RootViewPicker$RootResults$State: androidx.test.espresso.base.RootViewPicker$RootResults$State ROOTS_PICKED>
<androidx.test.espresso.base.RootViewPicker$RootResults$State: androidx.test.espresso.base.RootViewPicker$RootResults$State[] $VALUES>
    public static androidx.test.espresso.base.RootViewPicker$RootResults$State valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        androidx.test.espresso.base.RootViewPicker$RootResults$State $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroidx/test/espresso/base/RootViewPicker$RootResults$State;", r0);

        $r2 = (androidx.test.espresso.base.RootViewPicker$RootResults$State) $r1;

        return $r2;
    }

    static void <clinit>()
    {
        androidx.test.espresso.base.RootViewPicker$RootResults$State[] $r0;
        androidx.test.espresso.base.RootViewPicker$RootResults$State r1, r2, r3;

        r1 = new androidx.test.espresso.base.RootViewPicker$RootResults$State;

        specialinvoke r1.<androidx.test.espresso.base.RootViewPicker$RootResults$State: void <init>(java.lang.String,int)>("NO_ROOTS_PRESENT", 0);

        <androidx.test.espresso.base.RootViewPicker$RootResults$State: androidx.test.espresso.base.RootViewPicker$RootResults$State NO_ROOTS_PRESENT> = r1;

        r2 = new androidx.test.espresso.base.RootViewPicker$RootResults$State;

        specialinvoke r2.<androidx.test.espresso.base.RootViewPicker$RootResults$State: void <init>(java.lang.String,int)>("NO_ROOTS_PICKED", 1);

        <androidx.test.espresso.base.RootViewPicker$RootResults$State: androidx.test.espresso.base.RootViewPicker$RootResults$State NO_ROOTS_PICKED> = r2;

        r3 = new androidx.test.espresso.base.RootViewPicker$RootResults$State;

        specialinvoke r3.<androidx.test.espresso.base.RootViewPicker$RootResults$State: void <init>(java.lang.String,int)>("ROOTS_PICKED", 2);

        <androidx.test.espresso.base.RootViewPicker$RootResults$State: androidx.test.espresso.base.RootViewPicker$RootResults$State ROOTS_PICKED> = r3;

        $r0 = staticinvoke <androidx.test.espresso.base.RootViewPicker$RootResults$State: androidx.test.espresso.base.RootViewPicker$RootResults$State[] $values()>();

        <androidx.test.espresso.base.RootViewPicker$RootResults$State: androidx.test.espresso.base.RootViewPicker$RootResults$State[] $VALUES> = $r0;

        return;
    }

    private void <init>(java.lang.String, int)
    {
        androidx.test.espresso.base.RootViewPicker$RootResults$State r0;
        java.lang.String r1;
        int i0;

        r0 := @this: androidx.test.espresso.base.RootViewPicker$RootResults$State;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    private static androidx.test.espresso.base.RootViewPicker$RootResults$State[] $values()
    {
        androidx.test.espresso.base.RootViewPicker$RootResults$State[] r0;
        androidx.test.espresso.base.RootViewPicker$RootResults$State $r1, $r2, $r3;

        r0 = newarray (androidx.test.espresso.base.RootViewPicker$RootResults$State)[3];

        $r1 = <androidx.test.espresso.base.RootViewPicker$RootResults$State: androidx.test.espresso.base.RootViewPicker$RootResults$State NO_ROOTS_PRESENT>;

        r0[0] = $r1;

        $r2 = <androidx.test.espresso.base.RootViewPicker$RootResults$State: androidx.test.espresso.base.RootViewPicker$RootResults$State NO_ROOTS_PICKED>;

        r0[1] = $r2;

        $r3 = <androidx.test.espresso.base.RootViewPicker$RootResults$State: androidx.test.espresso.base.RootViewPicker$RootResults$State ROOTS_PICKED>;

        r0[2] = $r3;

        return r0;
    }

    public static androidx.test.espresso.base.RootViewPicker$RootResults$State[] values()
    {
        androidx.test.espresso.base.RootViewPicker$RootResults$State[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <androidx.test.espresso.base.RootViewPicker$RootResults$State: androidx.test.espresso.base.RootViewPicker$RootResults$State[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (androidx.test.espresso.base.RootViewPicker$RootResults$State[]) $r1;

        return $r2;
    }

androidx.test.espresso.base.RootViewPicker$RootResults-IA
androidx.test.espresso.base.RootViewPicker$RootResults
<androidx.test.espresso.base.RootViewPicker$RootResults: java.util.List allRoots>
<androidx.test.espresso.base.RootViewPicker$RootResults: java.util.List pickedRoots>
<androidx.test.espresso.base.RootViewPicker$RootResults: org.hamcrest.Matcher rootSelector>
    public androidx.test.espresso.Root getPickedRoot()
    {
        androidx.test.espresso.base.RootViewPicker$RootResults r0;
        java.lang.String r1;
        java.lang.Object[] r2;
        java.util.List $r3, $r4, $r7;
        int $i0;
        java.lang.Object $r5;
        androidx.test.espresso.Root $r6, $r8;

        r0 := @this: androidx.test.espresso.base.RootViewPicker$RootResults;

        $r3 = r0.<androidx.test.espresso.base.RootViewPicker$RootResults: java.util.List pickedRoots>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i0 <= 1 goto label1;

        r1 = staticinvoke <androidx.test.espresso.base.RootViewPicker: java.lang.String '-$$Nest$sfgetTAG'()>();

        r2 = newarray (java.lang.Object)[1];

        $r7 = r0.<androidx.test.espresso.base.RootViewPicker$RootResults: java.util.List pickedRoots>;

        r2[0] = $r7;

        staticinvoke <androidx.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>(r1, "Multiple root windows detected: %s", r2);

        $r8 = specialinvoke r0.<androidx.test.espresso.base.RootViewPicker$RootResults: androidx.test.espresso.Root getRootFromMultipleRoots()>();

        return $r8;

     label1:
        $r4 = r0.<androidx.test.espresso.base.RootViewPicker$RootResults: java.util.List pickedRoots>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(0);

        $r6 = (androidx.test.espresso.Root) $r5;

        return $r6;
    }

    private androidx.test.espresso.Root getRootFromMultipleRoots()
    {
        java.util.Iterator r0;
        java.util.List $r1, $r3, $r4;
        java.lang.Object $r2, $r5;
        int $i0;
        org.hamcrest.Matcher $r6;
        boolean $z0, $z1, $z2;
        androidx.test.espresso.base.RootViewPicker$RootResults r7;
        androidx.test.espresso.Root r8, r9, r10;

        r7 := @this: androidx.test.espresso.base.RootViewPicker$RootResults;

        $r1 = r7.<androidx.test.espresso.base.RootViewPicker$RootResults: java.util.List pickedRoots>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        r8 = (androidx.test.espresso.Root) $r2;

        $r3 = r7.<androidx.test.espresso.base.RootViewPicker$RootResults: java.util.List pickedRoots>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i0 <= 0 goto label4;

        $r4 = r7.<androidx.test.espresso.base.RootViewPicker$RootResults: java.util.List pickedRoots>;

        r0 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

        r9 = r8;

     label1:
        $z2 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r5 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        r10 = (androidx.test.espresso.Root) $r5;

        $r6 = staticinvoke <androidx.test.espresso.matcher.RootMatchers: org.hamcrest.Matcher isDialog()>();

        $z0 = interfaceinvoke $r6.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r10);

        if $z0 == 0 goto label2;

        return r10;

     label2:
        $z1 = staticinvoke <androidx.test.espresso.base.RootViewPicker$RootResults: boolean isTopmostRoot(androidx.test.espresso.Root,androidx.test.espresso.Root)>(r9, r10);

        if $z1 == 0 goto label1;

        r9 = r10;

        goto label1;

     label3:
        return r9;

     label4:
        r9 = r8;

        goto label3;
    }

    public androidx.test.espresso.base.RootViewPicker$RootResults$State getState()
    {
        androidx.test.espresso.base.RootViewPicker$RootResults r0;
        java.util.List $r1, $r2, $r3;
        boolean $z0, $z1;
        int $i0;
        androidx.test.espresso.base.RootViewPicker$RootResults$State $r4, $r5, $r6, $r7;

        r0 := @this: androidx.test.espresso.base.RootViewPicker$RootResults;

        $r1 = r0.<androidx.test.espresso.base.RootViewPicker$RootResults: java.util.List allRoots>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r7 = <androidx.test.espresso.base.RootViewPicker$RootResults$State: androidx.test.espresso.base.RootViewPicker$RootResults$State NO_ROOTS_PRESENT>;

        return $r7;

     label1:
        $r2 = r0.<androidx.test.espresso.base.RootViewPicker$RootResults: java.util.List pickedRoots>;

        $z1 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label2;

        $r6 = <androidx.test.espresso.base.RootViewPicker$RootResults$State: androidx.test.espresso.base.RootViewPicker$RootResults$State NO_ROOTS_PICKED>;

        return $r6;

     label2:
        $r3 = r0.<androidx.test.espresso.base.RootViewPicker$RootResults: java.util.List pickedRoots>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i0 <= 0 goto label3;

        $r5 = <androidx.test.espresso.base.RootViewPicker$RootResults$State: androidx.test.espresso.base.RootViewPicker$RootResults$State ROOTS_PICKED>;

        return $r5;

     label3:
        $r4 = <androidx.test.espresso.base.RootViewPicker$RootResults$State: androidx.test.espresso.base.RootViewPicker$RootResults$State NO_ROOTS_PICKED>;

        return $r4;
    }

    static volatile java.util.List '-$$Nest$fgetallRoots'(androidx.test.espresso.base.RootViewPicker$RootResults)
    {
        androidx.test.espresso.base.RootViewPicker$RootResults r0;
        java.util.List $r1;

        r0 := @parameter0: androidx.test.espresso.base.RootViewPicker$RootResults;

        $r1 = r0.<androidx.test.espresso.base.RootViewPicker$RootResults: java.util.List allRoots>;

        return $r1;
    }

    static volatile org.hamcrest.Matcher '-$$Nest$fgetrootSelector'(androidx.test.espresso.base.RootViewPicker$RootResults)
    {
        androidx.test.espresso.base.RootViewPicker$RootResults r0;
        org.hamcrest.Matcher $r1;

        r0 := @parameter0: androidx.test.espresso.base.RootViewPicker$RootResults;

        $r1 = r0.<androidx.test.espresso.base.RootViewPicker$RootResults: org.hamcrest.Matcher rootSelector>;

        return $r1;
    }

    private void <init>(java.util.List, java.util.List, org.hamcrest.Matcher)
    {
        androidx.test.espresso.base.RootViewPicker$RootResults r0;
        java.util.List r1, r2;
        org.hamcrest.Matcher r3;

        r0 := @this: androidx.test.espresso.base.RootViewPicker$RootResults;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: org.hamcrest.Matcher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.test.espresso.base.RootViewPicker$RootResults: java.util.List allRoots> = r1;

        r0.<androidx.test.espresso.base.RootViewPicker$RootResults: java.util.List pickedRoots> = r2;

        r0.<androidx.test.espresso.base.RootViewPicker$RootResults: org.hamcrest.Matcher rootSelector> = r3;

        return;
    }

    void <init>(java.util.List, java.util.List, org.hamcrest.Matcher, androidx.test.espresso.base.RootViewPicker$RootResults-IA)
    {
        androidx.test.espresso.base.RootViewPicker$RootResults r0;
        java.util.List r1, r2;
        org.hamcrest.Matcher r3;
        androidx.test.espresso.base.RootViewPicker$RootResults-IA r4;

        r0 := @this: androidx.test.espresso.base.RootViewPicker$RootResults;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: org.hamcrest.Matcher;

        r4 := @parameter3: androidx.test.espresso.base.RootViewPicker$RootResults-IA;

        specialinvoke r0.<androidx.test.espresso.base.RootViewPicker$RootResults: void <init>(java.util.List,java.util.List,org.hamcrest.Matcher)>(r1, r2, r3);

        return;
    }

    private static boolean isTopmostRoot(androidx.test.espresso.Root, androidx.test.espresso.Root)
    {
        androidx.test.espresso.Root r0, r7;
        androidx.test.espresso.util.EspressoOptional $r1, $r4;
        java.lang.Object $r2, $r5;
        android.view.WindowManager$LayoutParams $r3, $r6;
        int $i0, $i1;
        boolean z0;

        r7 := @parameter0: androidx.test.espresso.Root;

        r0 := @parameter1: androidx.test.espresso.Root;

        $r1 = virtualinvoke r0.<androidx.test.espresso.Root: androidx.test.espresso.util.EspressoOptional getWindowLayoutParams()>();

        $r2 = virtualinvoke $r1.<androidx.test.espresso.util.EspressoOptional: java.lang.Object get()>();

        $r3 = (android.view.WindowManager$LayoutParams) $r2;

        $i0 = $r3.<android.view.WindowManager$LayoutParams: int type>;

        $r4 = virtualinvoke r7.<androidx.test.espresso.Root: androidx.test.espresso.util.EspressoOptional getWindowLayoutParams()>();

        $r5 = virtualinvoke $r4.<androidx.test.espresso.util.EspressoOptional: java.lang.Object get()>();

        $r6 = (android.view.WindowManager$LayoutParams) $r5;

        $i1 = $r6.<android.view.WindowManager$LayoutParams: int type>;

        if $i0 <= $i1 goto label2;

        z0 = 1;

     label1:
        return z0;

     label2:
        z0 = 0;

        goto label1;
    }

androidx.test.espresso.base.RootViewPicker$RootViewWithoutFocusException-IA
androidx.test.espresso.base.RootViewPicker$RootViewWithoutFocusException
    private void <init>(java.lang.String)
    {
        androidx.test.espresso.base.RootViewPicker$RootViewWithoutFocusException r0;
        java.lang.String r1;

        r0 := @this: androidx.test.espresso.base.RootViewPicker$RootViewWithoutFocusException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String)>(r1);

        return;
    }

    void <init>(java.lang.String, androidx.test.espresso.base.RootViewPicker$RootViewWithoutFocusException-IA)
    {
        androidx.test.espresso.base.RootViewPicker$RootViewWithoutFocusException r0;
        java.lang.String r1;
        androidx.test.espresso.base.RootViewPicker$RootViewWithoutFocusException-IA r2;

        r0 := @this: androidx.test.espresso.base.RootViewPicker$RootViewWithoutFocusException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.test.espresso.base.RootViewPicker$RootViewWithoutFocusException-IA;

        specialinvoke r0.<androidx.test.espresso.base.RootViewPicker$RootViewWithoutFocusException: void <init>(java.lang.String)>(r1);

        return;
    }

