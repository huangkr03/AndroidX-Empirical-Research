androidx.room.compiler.processing.ksp.KspJvmTypeResolver
<androidx.room.compiler.processing.ksp.KspJvmTypeResolver: androidx.room.compiler.processing.ksp.KspJvmTypeResolutionScope scope>
<androidx.room.compiler.processing.ksp.KspJvmTypeResolver: androidx.room.compiler.processing.ksp.KspType delegate>
    public void <init>(androidx.room.compiler.processing.ksp.KspJvmTypeResolutionScope, androidx.room.compiler.processing.ksp.KspType)
    {
        androidx.room.compiler.processing.ksp.KspJvmTypeResolver r0;
        androidx.room.compiler.processing.ksp.KspJvmTypeResolutionScope r1;
        androidx.room.compiler.processing.ksp.KspType r2;

        r0 := @this: androidx.room.compiler.processing.ksp.KspJvmTypeResolver;

        r1 := @parameter0: androidx.room.compiler.processing.ksp.KspJvmTypeResolutionScope;

        r2 := @parameter1: androidx.room.compiler.processing.ksp.KspType;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "scope");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "delegate");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.room.compiler.processing.ksp.KspJvmTypeResolver: androidx.room.compiler.processing.ksp.KspJvmTypeResolutionScope scope> = r1;

        r0.<androidx.room.compiler.processing.ksp.KspJvmTypeResolver: androidx.room.compiler.processing.ksp.KspType delegate> = r2;

        return;
    }

    public final androidx.room.compiler.processing.ksp.KspJvmTypeResolutionScope getScope()
    {
        androidx.room.compiler.processing.ksp.KspJvmTypeResolver r0;
        androidx.room.compiler.processing.ksp.KspJvmTypeResolutionScope $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspJvmTypeResolver;

        $r1 = r0.<androidx.room.compiler.processing.ksp.KspJvmTypeResolver: androidx.room.compiler.processing.ksp.KspJvmTypeResolutionScope scope>;

        return $r1;
    }

    public final androidx.room.compiler.processing.ksp.KspType getDelegate()
    {
        androidx.room.compiler.processing.ksp.KspJvmTypeResolver r0;
        androidx.room.compiler.processing.ksp.KspType $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspJvmTypeResolver;

        $r1 = r0.<androidx.room.compiler.processing.ksp.KspJvmTypeResolver: androidx.room.compiler.processing.ksp.KspType delegate>;

        return $r1;
    }

    public final androidx.room.compiler.processing.ksp.KspType resolveJvmType$room_compiler_processing(androidx.room.compiler.processing.ksp.KspProcessingEnv)
    {
        androidx.room.compiler.processing.ksp.KspJvmTypeResolver r0;
        androidx.room.compiler.processing.ksp.KspProcessingEnv r1;
        androidx.room.compiler.processing.ksp.KSTypeVarianceResolver$WildcardMode r2, $r13;
        androidx.room.compiler.processing.ksp.KspType r3, $r9, $r10, $r11, $r12, $r14, $r19, $r20;
        androidx.room.compiler.processing.XType r4;
        com.google.devtools.ksp.symbol.KSType r5, $r16, $r18;
        androidx.room.compiler.processing.ksp.KspJvmTypeResolutionScope $r6, $r7, $r8;
        boolean $z1, $z2, $z3, $z4, $z5;

        r0 := @this: androidx.room.compiler.processing.ksp.KspJvmTypeResolver;

        r1 := @parameter0: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "env");

        $r6 = r0.<androidx.room.compiler.processing.ksp.KspJvmTypeResolver: androidx.room.compiler.processing.ksp.KspJvmTypeResolutionScope scope>;

        $z1 = virtualinvoke $r6.<androidx.room.compiler.processing.ksp.KspJvmTypeResolutionScope: boolean getNeedsWildcardResolution()>();

        if $z1 != 0 goto label1;

        $r12 = r0.<androidx.room.compiler.processing.ksp.KspJvmTypeResolver: androidx.room.compiler.processing.ksp.KspType delegate>;

        return $r12;

     label1:
        $r7 = r0.<androidx.room.compiler.processing.ksp.KspJvmTypeResolver: androidx.room.compiler.processing.ksp.KspJvmTypeResolutionScope scope>;

        $z2 = virtualinvoke $r7.<androidx.room.compiler.processing.ksp.KspJvmTypeResolutionScope: boolean getSuppressesWildcards()>();

        if $z2 == 0 goto label2;

        $r13 = <androidx.room.compiler.processing.ksp.KSTypeVarianceResolver$WildcardMode: androidx.room.compiler.processing.ksp.KSTypeVarianceResolver$WildcardMode SUPPRESSED>;

        goto label3;

     label2:
        $r13 = <androidx.room.compiler.processing.ksp.KSTypeVarianceResolver$WildcardMode: androidx.room.compiler.processing.ksp.KSTypeVarianceResolver$WildcardMode PREFERRED>;

     label3:
        r2 = $r13;

        $r8 = r0.<androidx.room.compiler.processing.ksp.KspJvmTypeResolver: androidx.room.compiler.processing.ksp.KspJvmTypeResolutionScope scope>;

        r4 = virtualinvoke $r8.<androidx.room.compiler.processing.ksp.KspJvmTypeResolutionScope: androidx.room.compiler.processing.XType findDeclarationType()>();

        $z3 = r4 instanceof androidx.room.compiler.processing.ksp.KspType;

        if $z3 == 0 goto label4;

        $r14 = (androidx.room.compiler.processing.ksp.KspType) r4;

        goto label5;

     label4:
        $r14 = null;

     label5:
        r3 = $r14;

        $r9 = r0.<androidx.room.compiler.processing.ksp.KspJvmTypeResolver: androidx.room.compiler.processing.ksp.KspType delegate>;

        $r16 = virtualinvoke $r9.<androidx.room.compiler.processing.ksp.KspType: com.google.devtools.ksp.symbol.KSType getKsType()>();

        $r10 = r0.<androidx.room.compiler.processing.ksp.KspJvmTypeResolver: androidx.room.compiler.processing.ksp.KspType delegate>;

        $z4 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r3, $r10);

        if $z4 == 0 goto label6;

        $r18 = (com.google.devtools.ksp.symbol.KSType) null;

        goto label8;

     label6:
        if r3 == null goto label7;

        $r11 = virtualinvoke r3.<androidx.room.compiler.processing.ksp.KspType: androidx.room.compiler.processing.ksp.KspType getJvmWildcardTypeOrSelf$room_compiler_processing()>();

        if $r11 == null goto label7;

        $r18 = virtualinvoke $r11.<androidx.room.compiler.processing.ksp.KspType: com.google.devtools.ksp.symbol.KSType getKsType()>();

        goto label8;

     label7:
        $r18 = null;

     label8:
        r5 = virtualinvoke r1.<androidx.room.compiler.processing.ksp.KspProcessingEnv: com.google.devtools.ksp.symbol.KSType resolveWildcards(com.google.devtools.ksp.symbol.KSType,androidx.room.compiler.processing.ksp.KSTypeVarianceResolver$WildcardMode,com.google.devtools.ksp.symbol.KSType)>($r16, r2, $r18);

        $r19 = r0.<androidx.room.compiler.processing.ksp.KspJvmTypeResolver: androidx.room.compiler.processing.ksp.KspType delegate>;

        $z5 = $r19 instanceof androidx.room.compiler.processing.ksp.KspPrimitiveType;

        $r20 = virtualinvoke r1.<androidx.room.compiler.processing.ksp.KspProcessingEnv: androidx.room.compiler.processing.ksp.KspType wrap(com.google.devtools.ksp.symbol.KSType,boolean)>(r5, $z5);

        return $r20;
    }

