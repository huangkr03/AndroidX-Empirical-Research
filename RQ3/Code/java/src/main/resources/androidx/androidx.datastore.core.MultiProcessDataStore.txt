androidx.datastore.core.MultiProcessDataStore
<androidx.datastore.core.MultiProcessDataStore: androidx.datastore.core.MultiProcessDataStore$Companion Companion>
<androidx.datastore.core.MultiProcessDataStore: androidx.datastore.core.Storage storage>
<androidx.datastore.core.MultiProcessDataStore: androidx.datastore.core.CorruptionHandler corruptionHandler>
<androidx.datastore.core.MultiProcessDataStore: kotlinx.coroutines.CoroutineScope scope>
<androidx.datastore.core.MultiProcessDataStore: kotlin.jvm.functions.Function0 produceFile>
<androidx.datastore.core.MultiProcessDataStore: kotlinx.coroutines.flow.Flow data>
<androidx.datastore.core.MultiProcessDataStore: java.lang.String LOCK_SUFFIX>
<androidx.datastore.core.MultiProcessDataStore: java.lang.String VERSION_SUFFIX>
<androidx.datastore.core.MultiProcessDataStore: java.lang.String BUG_MESSAGE>
<androidx.datastore.core.MultiProcessDataStore: java.lang.String LOCK_ERROR_MESSAGE>
<androidx.datastore.core.MultiProcessDataStore: int INVALID_VERSION>
<androidx.datastore.core.MultiProcessDataStore: java.util.List initTasks>
<androidx.datastore.core.MultiProcessDataStore: kotlin.Lazy sharedCounter$delegate>
<androidx.datastore.core.MultiProcessDataStore: kotlinx.coroutines.sync.Mutex threadLock>
<androidx.datastore.core.MultiProcessDataStore: kotlin.Lazy storageConnection$delegate>
<androidx.datastore.core.MultiProcessDataStore: kotlin.Lazy file$delegate>
<androidx.datastore.core.MultiProcessDataStore: kotlin.Lazy lockFile$delegate>
<androidx.datastore.core.MultiProcessDataStore: kotlin.Lazy fileObserver$delegate>
<androidx.datastore.core.MultiProcessDataStore: kotlinx.coroutines.flow.MutableStateFlow downstreamFlow>
<androidx.datastore.core.MultiProcessDataStore: androidx.datastore.core.SimpleActor writeActor>
<androidx.datastore.core.MultiProcessDataStore: androidx.datastore.core.SimpleActor readActor>
<androidx.datastore.core.MultiProcessDataStore: kotlinx.coroutines.sync.Mutex initTaskLock>
    public void <init>(androidx.datastore.core.Storage, java.util.List, androidx.datastore.core.CorruptionHandler, kotlinx.coroutines.CoroutineScope, kotlin.jvm.functions.Function0)
    {
        androidx.datastore.core.MultiProcessDataStore r0;
        androidx.datastore.core.Storage r1;
        java.util.List r2, $r10;
        androidx.datastore.core.CorruptionHandler r3;
        kotlinx.coroutines.CoroutineScope r4, $r32, $r40;
        kotlin.jvm.functions.Function0 r5, $r12, $r16, $r19, $r22, $r25;
        androidx.datastore.core.MultiProcessDataStore$data$1 $r6;
        kotlin.jvm.functions.Function2 $r7, $r36, $r37, $r44, $r45;
        kotlinx.coroutines.flow.Flow $r8;
        java.lang.Iterable $r9;
        androidx.datastore.core.MultiProcessDataStore$sharedCounter$2 $r11;
        kotlin.Lazy $r13, $r17, $r20, $r23, $r26;
        kotlinx.coroutines.sync.Mutex $r14;
        androidx.datastore.core.MultiProcessDataStore$storageConnection$2 $r15;
        androidx.datastore.core.MultiProcessDataStore$file$2 $r18;
        androidx.datastore.core.MultiProcessDataStore$lockFile$2 $r21;
        androidx.datastore.core.MultiProcessDataStore$fileObserver$2 $r24;
        androidx.datastore.core.UnInitialized $r27;
        androidx.datastore.core.State $r28;
        kotlinx.coroutines.flow.MutableStateFlow $r29;
        androidx.datastore.core.SimpleActor $r30, $r38;
        androidx.datastore.core.MultiProcessDataStore$writeActor$1 $r31;
        androidx.datastore.core.MultiProcessDataStore$writeActor$2 $r33;
        androidx.datastore.core.MultiProcessDataStore$writeActor$3 $r34;
        kotlin.jvm.functions.Function1 $r35, $r43;
        androidx.datastore.core.MultiProcessDataStore$readActor$1 $r39;
        androidx.datastore.core.MultiProcessDataStore$readActor$2 $r41;
        androidx.datastore.core.MultiProcessDataStore$readActor$3 $r42;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore;

        r1 := @parameter0: androidx.datastore.core.Storage;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: androidx.datastore.core.CorruptionHandler;

        r4 := @parameter3: kotlinx.coroutines.CoroutineScope;

        r5 := @parameter4: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "storage");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "initTasksList");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "corruptionHandler");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "scope");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r5, "produceFile");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.datastore.core.MultiProcessDataStore: androidx.datastore.core.Storage storage> = r1;

        r0.<androidx.datastore.core.MultiProcessDataStore: androidx.datastore.core.CorruptionHandler corruptionHandler> = r3;

        r0.<androidx.datastore.core.MultiProcessDataStore: kotlinx.coroutines.CoroutineScope scope> = r4;

        r0.<androidx.datastore.core.MultiProcessDataStore: kotlin.jvm.functions.Function0 produceFile> = r5;

        $r6 = new androidx.datastore.core.MultiProcessDataStore$data$1;

        specialinvoke $r6.<androidx.datastore.core.MultiProcessDataStore$data$1: void <init>(androidx.datastore.core.MultiProcessDataStore,kotlin.coroutines.Continuation)>(r0, null);

        $r7 = (kotlin.jvm.functions.Function2) $r6;

        $r8 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow flow(kotlin.jvm.functions.Function2)>($r7);

        r0.<androidx.datastore.core.MultiProcessDataStore: kotlinx.coroutines.flow.Flow data> = $r8;

        r0.<androidx.datastore.core.MultiProcessDataStore: java.lang.String LOCK_SUFFIX> = ".lock";

        r0.<androidx.datastore.core.MultiProcessDataStore: java.lang.String VERSION_SUFFIX> = ".version";

        r0.<androidx.datastore.core.MultiProcessDataStore: java.lang.String BUG_MESSAGE> = "This is a bug in DataStore. Please file a bug at: https://issuetracker.google.com/issues/new?component=907884&template=1466542";

        r0.<androidx.datastore.core.MultiProcessDataStore: java.lang.String LOCK_ERROR_MESSAGE> = "fcntl failed: EAGAIN";

        r0.<androidx.datastore.core.MultiProcessDataStore: int INVALID_VERSION> = -1;

        $r9 = (java.lang.Iterable) r2;

        $r10 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List toList(java.lang.Iterable)>($r9);

        r0.<androidx.datastore.core.MultiProcessDataStore: java.util.List initTasks> = $r10;

        $r11 = new androidx.datastore.core.MultiProcessDataStore$sharedCounter$2;

        specialinvoke $r11.<androidx.datastore.core.MultiProcessDataStore$sharedCounter$2: void <init>(androidx.datastore.core.MultiProcessDataStore)>(r0);

        $r12 = (kotlin.jvm.functions.Function0) $r11;

        $r13 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)>($r12);

        r0.<androidx.datastore.core.MultiProcessDataStore: kotlin.Lazy sharedCounter$delegate> = $r13;

        $r14 = staticinvoke <kotlinx.coroutines.sync.MutexKt: kotlinx.coroutines.sync.Mutex Mutex$default(boolean,int,java.lang.Object)>(0, 1, null);

        r0.<androidx.datastore.core.MultiProcessDataStore: kotlinx.coroutines.sync.Mutex threadLock> = $r14;

        $r15 = new androidx.datastore.core.MultiProcessDataStore$storageConnection$2;

        specialinvoke $r15.<androidx.datastore.core.MultiProcessDataStore$storageConnection$2: void <init>(androidx.datastore.core.MultiProcessDataStore)>(r0);

        $r16 = (kotlin.jvm.functions.Function0) $r15;

        $r17 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)>($r16);

        r0.<androidx.datastore.core.MultiProcessDataStore: kotlin.Lazy storageConnection$delegate> = $r17;

        $r18 = new androidx.datastore.core.MultiProcessDataStore$file$2;

        specialinvoke $r18.<androidx.datastore.core.MultiProcessDataStore$file$2: void <init>(androidx.datastore.core.MultiProcessDataStore)>(r0);

        $r19 = (kotlin.jvm.functions.Function0) $r18;

        $r20 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)>($r19);

        r0.<androidx.datastore.core.MultiProcessDataStore: kotlin.Lazy file$delegate> = $r20;

        $r21 = new androidx.datastore.core.MultiProcessDataStore$lockFile$2;

        specialinvoke $r21.<androidx.datastore.core.MultiProcessDataStore$lockFile$2: void <init>(androidx.datastore.core.MultiProcessDataStore)>(r0);

        $r22 = (kotlin.jvm.functions.Function0) $r21;

        $r23 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)>($r22);

        r0.<androidx.datastore.core.MultiProcessDataStore: kotlin.Lazy lockFile$delegate> = $r23;

        $r24 = new androidx.datastore.core.MultiProcessDataStore$fileObserver$2;

        specialinvoke $r24.<androidx.datastore.core.MultiProcessDataStore$fileObserver$2: void <init>(androidx.datastore.core.MultiProcessDataStore)>(r0);

        $r25 = (kotlin.jvm.functions.Function0) $r24;

        $r26 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)>($r25);

        r0.<androidx.datastore.core.MultiProcessDataStore: kotlin.Lazy fileObserver$delegate> = $r26;

        $r27 = <androidx.datastore.core.UnInitialized: androidx.datastore.core.UnInitialized INSTANCE>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r27, "null cannot be cast to non-null type androidx.datastore.core.State<T of androidx.datastore.core.MultiProcessDataStore>");

        $r28 = (androidx.datastore.core.State) $r27;

        $r29 = staticinvoke <kotlinx.coroutines.flow.StateFlowKt: kotlinx.coroutines.flow.MutableStateFlow MutableStateFlow(java.lang.Object)>($r28);

        r0.<androidx.datastore.core.MultiProcessDataStore: kotlinx.coroutines.flow.MutableStateFlow downstreamFlow> = $r29;

        $r30 = new androidx.datastore.core.SimpleActor;

        $r32 = r0.<androidx.datastore.core.MultiProcessDataStore: kotlinx.coroutines.CoroutineScope scope>;

        $r31 = new androidx.datastore.core.MultiProcessDataStore$writeActor$1;

        specialinvoke $r31.<androidx.datastore.core.MultiProcessDataStore$writeActor$1: void <init>(androidx.datastore.core.MultiProcessDataStore)>(r0);

        $r35 = (kotlin.jvm.functions.Function1) $r31;

        $r33 = <androidx.datastore.core.MultiProcessDataStore$writeActor$2: androidx.datastore.core.MultiProcessDataStore$writeActor$2 INSTANCE>;

        $r36 = (kotlin.jvm.functions.Function2) $r33;

        $r34 = new androidx.datastore.core.MultiProcessDataStore$writeActor$3;

        specialinvoke $r34.<androidx.datastore.core.MultiProcessDataStore$writeActor$3: void <init>(androidx.datastore.core.MultiProcessDataStore,kotlin.coroutines.Continuation)>(r0, null);

        $r37 = (kotlin.jvm.functions.Function2) $r34;

        specialinvoke $r30.<androidx.datastore.core.SimpleActor: void <init>(kotlinx.coroutines.CoroutineScope,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function2,kotlin.jvm.functions.Function2)>($r32, $r35, $r36, $r37);

        r0.<androidx.datastore.core.MultiProcessDataStore: androidx.datastore.core.SimpleActor writeActor> = $r30;

        $r38 = new androidx.datastore.core.SimpleActor;

        $r40 = r0.<androidx.datastore.core.MultiProcessDataStore: kotlinx.coroutines.CoroutineScope scope>;

        $r39 = new androidx.datastore.core.MultiProcessDataStore$readActor$1;

        specialinvoke $r39.<androidx.datastore.core.MultiProcessDataStore$readActor$1: void <init>(androidx.datastore.core.MultiProcessDataStore)>(r0);

        $r43 = (kotlin.jvm.functions.Function1) $r39;

        $r41 = <androidx.datastore.core.MultiProcessDataStore$readActor$2: androidx.datastore.core.MultiProcessDataStore$readActor$2 INSTANCE>;

        $r44 = (kotlin.jvm.functions.Function2) $r41;

        $r42 = new androidx.datastore.core.MultiProcessDataStore$readActor$3;

        specialinvoke $r42.<androidx.datastore.core.MultiProcessDataStore$readActor$3: void <init>(androidx.datastore.core.MultiProcessDataStore,kotlin.coroutines.Continuation)>(r0, null);

        $r45 = (kotlin.jvm.functions.Function2) $r42;

        specialinvoke $r38.<androidx.datastore.core.SimpleActor: void <init>(kotlinx.coroutines.CoroutineScope,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function2,kotlin.jvm.functions.Function2)>($r40, $r43, $r44, $r45);

        r0.<androidx.datastore.core.MultiProcessDataStore: androidx.datastore.core.SimpleActor readActor> = $r38;

        return;
    }

    public void <init>(androidx.datastore.core.Storage, java.util.List, androidx.datastore.core.CorruptionHandler, kotlinx.coroutines.CoroutineScope, kotlin.jvm.functions.Function0, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.datastore.core.MultiProcessDataStore r0;
        androidx.datastore.core.Storage r1;
        kotlin.jvm.functions.Function0 r2;
        int i0, $i1, $i2, $i3;
        kotlin.jvm.internal.DefaultConstructorMarker r3;
        kotlinx.coroutines.CoroutineDispatcher $r4;
        kotlinx.coroutines.CompletableJob $r5;
        kotlin.coroutines.CoroutineContext $r6, $r7;
        androidx.datastore.core.handlers.NoOpCorruptionHandler $r8;
        java.util.List r9;
        androidx.datastore.core.CorruptionHandler r10;
        kotlinx.coroutines.CoroutineScope r11;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore;

        r1 := @parameter0: androidx.datastore.core.Storage;

        r9 := @parameter1: java.util.List;

        r10 := @parameter2: androidx.datastore.core.CorruptionHandler;

        r11 := @parameter3: kotlinx.coroutines.CoroutineScope;

        r2 := @parameter4: kotlin.jvm.functions.Function0;

        i0 := @parameter5: int;

        r3 := @parameter6: kotlin.jvm.internal.DefaultConstructorMarker;

        $i1 = i0 & 2;

        if $i1 == 0 goto label1;

        r9 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

     label1:
        $i2 = i0 & 4;

        if $i2 == 0 goto label2;

        $r8 = new androidx.datastore.core.handlers.NoOpCorruptionHandler;

        specialinvoke $r8.<androidx.datastore.core.handlers.NoOpCorruptionHandler: void <init>()>();

        r10 = (androidx.datastore.core.CorruptionHandler) $r8;

     label2:
        $i3 = i0 & 8;

        if $i3 == 0 goto label3;

        $r4 = staticinvoke <kotlinx.coroutines.Dispatchers: kotlinx.coroutines.CoroutineDispatcher getIO()>();

        $r5 = staticinvoke <kotlinx.coroutines.SupervisorKt: kotlinx.coroutines.CompletableJob SupervisorJob$default(kotlinx.coroutines.Job,int,java.lang.Object)>(null, 1, null);

        $r6 = (kotlin.coroutines.CoroutineContext) $r5;

        $r7 = virtualinvoke $r4.<kotlinx.coroutines.CoroutineDispatcher: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>($r6);

        r11 = staticinvoke <kotlinx.coroutines.CoroutineScopeKt: kotlinx.coroutines.CoroutineScope CoroutineScope(kotlin.coroutines.CoroutineContext)>($r7);

     label3:
        specialinvoke r0.<androidx.datastore.core.MultiProcessDataStore: void <init>(androidx.datastore.core.Storage,java.util.List,androidx.datastore.core.CorruptionHandler,kotlinx.coroutines.CoroutineScope,kotlin.jvm.functions.Function0)>(r1, r9, r10, r11, r2);

        return;
    }

    public kotlinx.coroutines.flow.Flow getData()
    {
        androidx.datastore.core.MultiProcessDataStore r0;
        kotlinx.coroutines.flow.Flow $r1;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore;

        $r1 = r0.<androidx.datastore.core.MultiProcessDataStore: kotlinx.coroutines.flow.Flow data>;

        return $r1;
    }

    public java.lang.Object updateData(kotlin.jvm.functions.Function2, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore r0;
        kotlin.jvm.functions.Function2 r1;
        kotlin.coroutines.Continuation $r2;
        kotlinx.coroutines.CompletableDeferred r3;
        androidx.datastore.core.State r4;
        androidx.datastore.core.Message$Update r5, $r8;
        kotlinx.coroutines.flow.MutableStateFlow $r6;
        java.lang.Object $r7, $r11;
        kotlin.coroutines.CoroutineContext $r9;
        androidx.datastore.core.SimpleActor $r10;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore;

        r1 := @parameter0: kotlin.jvm.functions.Function2;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r3 = staticinvoke <kotlinx.coroutines.CompletableDeferredKt: kotlinx.coroutines.CompletableDeferred CompletableDeferred$default(kotlinx.coroutines.Job,int,java.lang.Object)>(null, 1, null);

        $r6 = r0.<androidx.datastore.core.MultiProcessDataStore: kotlinx.coroutines.flow.MutableStateFlow downstreamFlow>;

        $r7 = interfaceinvoke $r6.<kotlinx.coroutines.flow.MutableStateFlow: java.lang.Object getValue()>();

        r4 = (androidx.datastore.core.State) $r7;

        $r8 = new androidx.datastore.core.Message$Update;

        $r9 = interfaceinvoke $r2.<kotlin.coroutines.Continuation: kotlin.coroutines.CoroutineContext getContext()>();

        specialinvoke $r8.<androidx.datastore.core.Message$Update: void <init>(kotlin.jvm.functions.Function2,kotlinx.coroutines.CompletableDeferred,androidx.datastore.core.State,kotlin.coroutines.CoroutineContext)>(r1, r3, r4, $r9);

        r5 = $r8;

        $r10 = r0.<androidx.datastore.core.MultiProcessDataStore: androidx.datastore.core.SimpleActor writeActor>;

        virtualinvoke $r10.<androidx.datastore.core.SimpleActor: void offer(java.lang.Object)>(r5);

        $r11 = interfaceinvoke r3.<kotlinx.coroutines.CompletableDeferred: java.lang.Object await(kotlin.coroutines.Continuation)>($r2);

        return $r11;
    }

    private final androidx.datastore.core.SharedCounter getSharedCounter()
    {
        androidx.datastore.core.MultiProcessDataStore r0;
        kotlin.Lazy r1;
        java.lang.Object $r2;
        androidx.datastore.core.SharedCounter $r3;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore;

        r1 = r0.<androidx.datastore.core.MultiProcessDataStore: kotlin.Lazy sharedCounter$delegate>;

        $r2 = interfaceinvoke r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r3 = (androidx.datastore.core.SharedCounter) $r2;

        return $r3;
    }

    private final androidx.datastore.core.StorageConnection getStorageConnection()
    {
        androidx.datastore.core.MultiProcessDataStore r0;
        kotlin.Lazy r1;
        java.lang.Object $r2;
        androidx.datastore.core.StorageConnection $r3;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore;

        r1 = r0.<androidx.datastore.core.MultiProcessDataStore: kotlin.Lazy storageConnection$delegate>;

        $r2 = interfaceinvoke r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r3 = (androidx.datastore.core.StorageConnection) $r2;

        return $r3;
    }

    protected final java.io.File getFile()
    {
        androidx.datastore.core.MultiProcessDataStore r0;
        kotlin.Lazy r1;
        java.lang.Object $r2;
        java.io.File $r3;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore;

        r1 = r0.<androidx.datastore.core.MultiProcessDataStore: kotlin.Lazy file$delegate>;

        $r2 = interfaceinvoke r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r3 = (java.io.File) $r2;

        return $r3;
    }

    private final java.io.File getLockFile()
    {
        androidx.datastore.core.MultiProcessDataStore r0;
        kotlin.Lazy r1;
        java.lang.Object $r2;
        java.io.File $r3;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore;

        r1 = r0.<androidx.datastore.core.MultiProcessDataStore: kotlin.Lazy lockFile$delegate>;

        $r2 = interfaceinvoke r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r3 = (java.io.File) $r2;

        return $r3;
    }

    private final android.os.FileObserver getFileObserver()
    {
        androidx.datastore.core.MultiProcessDataStore r0;
        kotlin.Lazy r1;
        java.lang.Object $r2;
        android.os.FileObserver $r3;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore;

        r1 = r0.<androidx.datastore.core.MultiProcessDataStore: kotlin.Lazy fileObserver$delegate>;

        $r2 = interfaceinvoke r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r3 = (android.os.FileObserver) $r2;

        return $r3;
    }

    private static void getDownstreamFlow$annotations()
    {
        return;
    }

    private final java.lang.Object handleRead(androidx.datastore.core.Message$Read, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore r0;
        androidx.datastore.core.Message$Read r1;
        kotlin.coroutines.Continuation $r2;
        androidx.datastore.core.State r3, $r14;
        java.lang.String r4, $r10;
        kotlinx.coroutines.flow.MutableStateFlow $r5;
        java.lang.Object $r6, $r11, $r12, $r15, $r16, $r18, $r19;
        boolean $z0, $z1, $z2, $z3;
        androidx.datastore.core.UnInitialized $r7;
        kotlin.Unit $r8, $r13, $r17, $r20;
        java.lang.IllegalStateException $r9;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore;

        r1 := @parameter0: androidx.datastore.core.Message$Read;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r5 = r0.<androidx.datastore.core.MultiProcessDataStore: kotlinx.coroutines.flow.MutableStateFlow downstreamFlow>;

        $r6 = interfaceinvoke $r5.<kotlinx.coroutines.flow.MutableStateFlow: java.lang.Object getValue()>();

        r3 = (androidx.datastore.core.State) $r6;

        $z0 = r3 instanceof androidx.datastore.core.Data;

        if $z0 == 0 goto label2;

        $r18 = specialinvoke r0.<androidx.datastore.core.MultiProcessDataStore: java.lang.Object readData(kotlin.coroutines.Continuation)>($r2);

        $r19 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r18 != $r19 goto label1;

        return $r18;

     label1:
        $r20 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r20;

     label2:
        $z1 = r3 instanceof androidx.datastore.core.ReadException;

        if $z1 == 0 goto label4;

        $r14 = virtualinvoke r1.<androidx.datastore.core.Message$Read: androidx.datastore.core.State getLastState()>();

        if r3 != $r14 goto label7;

        $r15 = specialinvoke r0.<androidx.datastore.core.MultiProcessDataStore: java.lang.Object readAndInitOrPropagateFailure(kotlin.coroutines.Continuation)>($r2);

        $r16 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r15 != $r16 goto label3;

        return $r15;

     label3:
        $r17 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r17;

     label4:
        $r7 = <androidx.datastore.core.UnInitialized: androidx.datastore.core.UnInitialized INSTANCE>;

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r3, $r7);

        if $z2 == 0 goto label6;

        $r11 = specialinvoke r0.<androidx.datastore.core.MultiProcessDataStore: java.lang.Object readAndInitOrPropagateFailure(kotlin.coroutines.Continuation)>($r2);

        $r12 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r11 != $r12 goto label5;

        return $r11;

     label5:
        $r13 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r13;

     label6:
        $z3 = r3 instanceof androidx.datastore.core.Final;

        if $z3 == 0 goto label7;

        r4 = "Can\'t read in final state.";

        $r9 = new java.lang.IllegalStateException;

        $r10 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r9;

     label7:
        $r8 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r8;
    }

    private final java.lang.Object handleUpdate(androidx.datastore.core.Message$Update, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore r0, r2, $r34;
        kotlin.coroutines.Continuation r1, r42, r43, r44;
        androidx.datastore.core.State r3, $r21;
        java.lang.Object $r4, r5, $r7, $r9, $r10, $r11, $r14, $r17, $r24, $r30, $r35, r36, $r37, $r38;
        boolean $z0, $z1, $z2, $z3, $z4;
        kotlin.Unit $r8;
        kotlin.jvm.functions.Function2 $r12, $r25;
        kotlin.coroutines.CoroutineContext $r13, $r26;
        kotlin.Result$Companion $r15, $r29;
        kotlinx.coroutines.flow.MutableStateFlow $r16;
        androidx.datastore.core.Final $r19;
        java.lang.Throwable $r20, $r23, $r28;
        androidx.datastore.core.ReadException $r22;
        int $i0, $i1, $i2, $i3, $i4;
        androidx.datastore.core.Message$Update r31;
        androidx.datastore.core.MultiProcessDataStore$handleUpdate$1 $r32, r39;
        kotlinx.coroutines.CompletableDeferred r33;
        kotlin.NoWhenBranchMatchedException r40;
        java.lang.IllegalStateException r41;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore;

        r31 := @parameter0: androidx.datastore.core.Message$Update;

        r1 := @parameter1: kotlin.coroutines.Continuation;

        $z0 = r1 instanceof androidx.datastore.core.MultiProcessDataStore$handleUpdate$1;

        if $z0 == 0 goto label01;

        $r32 = (androidx.datastore.core.MultiProcessDataStore$handleUpdate$1) r1;

        $i0 = $r32.<androidx.datastore.core.MultiProcessDataStore$handleUpdate$1: int label>;

        $i1 = $i0 & -2147483648;

        if $i1 == 0 goto label01;

        $i2 = $r32.<androidx.datastore.core.MultiProcessDataStore$handleUpdate$1: int label>;

        $i3 = $i2 - -2147483648;

        $r32.<androidx.datastore.core.MultiProcessDataStore$handleUpdate$1: int label> = $i3;

        goto label02;

     label01:
        r39 = new androidx.datastore.core.MultiProcessDataStore$handleUpdate$1;

        specialinvoke r39.<androidx.datastore.core.MultiProcessDataStore$handleUpdate$1: void <init>(androidx.datastore.core.MultiProcessDataStore,kotlin.coroutines.Continuation)>(r0, r1);

        $r32 = r39;

     label02:
        $r4 = $r32.<androidx.datastore.core.MultiProcessDataStore$handleUpdate$1: java.lang.Object result>;

        r5 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i4 = $r32.<androidx.datastore.core.MultiProcessDataStore$handleUpdate$1: int label>;

        tableswitch($i4)
        {
            case 0: goto label03;
            case 1: goto label06;
            case 2: goto label13;
            case 3: goto label17;
            default: goto label27;
        };

     label03:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

        r2 = r0;

        r33 = virtualinvoke r31.<androidx.datastore.core.Message$Update: kotlinx.coroutines.CompletableDeferred getAck()>();

     label04:
        $r15 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r34 = (androidx.datastore.core.MultiProcessDataStore) r2;

        $r16 = $r34.<androidx.datastore.core.MultiProcessDataStore: kotlinx.coroutines.flow.MutableStateFlow downstreamFlow>;

        $r17 = interfaceinvoke $r16.<kotlinx.coroutines.flow.MutableStateFlow: java.lang.Object getValue()>();

        r3 = (androidx.datastore.core.State) $r17;

        $z1 = r3 instanceof androidx.datastore.core.Data;

        if $z1 == 0 goto label09;

        $r25 = virtualinvoke r31.<androidx.datastore.core.Message$Update: kotlin.jvm.functions.Function2 getTransform()>();

        $r26 = virtualinvoke r31.<androidx.datastore.core.Message$Update: kotlin.coroutines.CoroutineContext getCallerContext()>();

        $r32.<androidx.datastore.core.MultiProcessDataStore$handleUpdate$1: java.lang.Object L$0> = r33;

        $r32.<androidx.datastore.core.MultiProcessDataStore$handleUpdate$1: int label> = 1;

        r42 = (kotlin.coroutines.Continuation) $r32;

        $r35 = specialinvoke $r34.<androidx.datastore.core.MultiProcessDataStore: java.lang.Object transformAndWrite(kotlin.jvm.functions.Function2,kotlin.coroutines.CoroutineContext,kotlin.coroutines.Continuation)>($r25, $r26, r42);

     label05:
        if $r35 != r5 goto label08;

        return r5;

     label06:
        $r14 = $r32.<androidx.datastore.core.MultiProcessDataStore$handleUpdate$1: java.lang.Object L$0>;

        r33 = (kotlinx.coroutines.CompletableDeferred) $r14;

     label07:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

        $r35 = $r4;

     label08:
        r36 = $r35;

        goto label23;

     label09:
        $z2 = r3 instanceof androidx.datastore.core.ReadException;

        if $z2 == 0 goto label10;

        $z4 = 1;

        goto label11;

     label10:
        $z4 = r3 instanceof androidx.datastore.core.UnInitialized;

     label11:
        if $z4 == 0 goto label21;

        $r21 = virtualinvoke r31.<androidx.datastore.core.Message$Update: androidx.datastore.core.State getLastState()>();

        if r3 != $r21 goto label20;

        $r32.<androidx.datastore.core.MultiProcessDataStore$handleUpdate$1: java.lang.Object L$0> = r31;

        $r32.<androidx.datastore.core.MultiProcessDataStore$handleUpdate$1: java.lang.Object L$1> = $r34;

        $r32.<androidx.datastore.core.MultiProcessDataStore$handleUpdate$1: java.lang.Object L$2> = r33;

        $r32.<androidx.datastore.core.MultiProcessDataStore$handleUpdate$1: int label> = 2;

        r43 = (kotlin.coroutines.Continuation) $r32;

        $r24 = specialinvoke $r34.<androidx.datastore.core.MultiProcessDataStore: java.lang.Object readAndInitOrPropagateAndThrowFailure(kotlin.coroutines.Continuation)>(r43);

     label12:
        if $r24 != r5 goto label15;

        return r5;

     label13:
        $r9 = $r32.<androidx.datastore.core.MultiProcessDataStore$handleUpdate$1: java.lang.Object L$2>;

        r33 = (kotlinx.coroutines.CompletableDeferred) $r9;

        $r10 = $r32.<androidx.datastore.core.MultiProcessDataStore$handleUpdate$1: java.lang.Object L$1>;

        $r34 = (androidx.datastore.core.MultiProcessDataStore) $r10;

        $r11 = $r32.<androidx.datastore.core.MultiProcessDataStore$handleUpdate$1: java.lang.Object L$0>;

        r31 = (androidx.datastore.core.Message$Update) $r11;

     label14:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

     label15:
        $r12 = virtualinvoke r31.<androidx.datastore.core.Message$Update: kotlin.jvm.functions.Function2 getTransform()>();

        $r13 = virtualinvoke r31.<androidx.datastore.core.Message$Update: kotlin.coroutines.CoroutineContext getCallerContext()>();

        $r32.<androidx.datastore.core.MultiProcessDataStore$handleUpdate$1: java.lang.Object L$0> = r33;

        $r32.<androidx.datastore.core.MultiProcessDataStore$handleUpdate$1: java.lang.Object L$1> = null;

        $r32.<androidx.datastore.core.MultiProcessDataStore$handleUpdate$1: java.lang.Object L$2> = null;

        $r32.<androidx.datastore.core.MultiProcessDataStore$handleUpdate$1: int label> = 3;

        r44 = (kotlin.coroutines.Continuation) $r32;

        $r37 = specialinvoke $r34.<androidx.datastore.core.MultiProcessDataStore: java.lang.Object transformAndWrite(kotlin.jvm.functions.Function2,kotlin.coroutines.CoroutineContext,kotlin.coroutines.Continuation)>($r12, $r13, r44);

     label16:
        if $r37 != r5 goto label19;

        return r5;

     label17:
        $r7 = $r32.<androidx.datastore.core.MultiProcessDataStore$handleUpdate$1: java.lang.Object L$0>;

        r33 = (kotlinx.coroutines.CompletableDeferred) $r7;

     label18:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

        $r37 = $r4;

     label19:
        r36 = $r37;

        goto label23;

     label20:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>(r3, "null cannot be cast to non-null type androidx.datastore.core.ReadException<T of androidx.datastore.core.MultiProcessDataStore.handleUpdate$lambda$0>");

        $r22 = (androidx.datastore.core.ReadException) r3;

        $r23 = virtualinvoke $r22.<androidx.datastore.core.ReadException: java.lang.Throwable getReadException()>();

        throw $r23;

     label21:
        $z3 = r3 instanceof androidx.datastore.core.Final;

        if $z3 == 0 goto label22;

        $r19 = (androidx.datastore.core.Final) r3;

        $r20 = virtualinvoke $r19.<androidx.datastore.core.Final: java.lang.Throwable getFinalException()>();

        throw $r20;

     label22:
        r40 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke r40.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        throw r40;

     label23:
        $r38 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>(r36);

     label24:
        goto label26;

     label25:
        $r28 := @caughtexception;

        $r29 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r30 = staticinvoke <kotlin.ResultKt: java.lang.Object createFailure(java.lang.Throwable)>($r28);

        $r38 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r30);

     label26:
        staticinvoke <kotlinx.coroutines.CompletableDeferredKt: boolean completeWith(kotlinx.coroutines.CompletableDeferred,java.lang.Object)>(r33, $r38);

        $r8 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r8;

     label27:
        r41 = new java.lang.IllegalStateException;

        specialinvoke r41.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r41;

        catch java.lang.Throwable from label04 to label05 with label25;
        catch java.lang.Throwable from label07 to label12 with label25;
        catch java.lang.Throwable from label14 to label16 with label25;
        catch java.lang.Throwable from label18 to label24 with label25;
    }

    private final java.lang.Object readAndInitOrPropagateAndThrowFailure(kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation r0, r17;
        java.lang.Throwable r1, $r9;
        java.lang.Object $r2, r3, $r5, $r7;
        boolean $z0;
        kotlin.Unit $r6;
        int $i0, $i1, $i2, $i3, $i4;
        kotlinx.coroutines.flow.MutableStateFlow $r11;
        androidx.datastore.core.MultiProcessDataStore r12;
        androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateAndThrowFailure$1 $r13, r14;
        androidx.datastore.core.ReadException r15;
        java.lang.IllegalStateException r16;

        r12 := @this: androidx.datastore.core.MultiProcessDataStore;

        r0 := @parameter0: kotlin.coroutines.Continuation;

        $z0 = r0 instanceof androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateAndThrowFailure$1;

        if $z0 == 0 goto label01;

        $r13 = (androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateAndThrowFailure$1) r0;

        $i0 = $r13.<androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateAndThrowFailure$1: int label>;

        $i1 = $i0 & -2147483648;

        if $i1 == 0 goto label01;

        $i2 = $r13.<androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateAndThrowFailure$1: int label>;

        $i3 = $i2 - -2147483648;

        $r13.<androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateAndThrowFailure$1: int label> = $i3;

        goto label02;

     label01:
        r14 = new androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateAndThrowFailure$1;

        specialinvoke r14.<androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateAndThrowFailure$1: void <init>(androidx.datastore.core.MultiProcessDataStore,kotlin.coroutines.Continuation)>(r12, r0);

        $r13 = r14;

     label02:
        $r2 = $r13.<androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateAndThrowFailure$1: java.lang.Object result>;

        r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i4 = $r13.<androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateAndThrowFailure$1: int label>;

        tableswitch($i4)
        {
            case 0: goto label03;
            case 1: goto label06;
            default: goto label11;
        };

     label03:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

     label04:
        $r13.<androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateAndThrowFailure$1: java.lang.Object L$0> = r12;

        $r13.<androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateAndThrowFailure$1: int label> = 1;

        r17 = (kotlin.coroutines.Continuation) $r13;

        $r7 = specialinvoke r12.<androidx.datastore.core.MultiProcessDataStore: java.lang.Object readAndInit(kotlin.coroutines.Continuation)>(r17);

     label05:
        if $r7 != r3 goto label08;

        return r3;

     label06:
        $r5 = $r13.<androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateAndThrowFailure$1: java.lang.Object L$0>;

        r12 = (androidx.datastore.core.MultiProcessDataStore) $r5;

     label07:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

     label08:
        goto label10;

     label09:
        $r9 := @caughtexception;

        r1 = $r9;

        $r11 = r12.<androidx.datastore.core.MultiProcessDataStore: kotlinx.coroutines.flow.MutableStateFlow downstreamFlow>;

        r15 = new androidx.datastore.core.ReadException;

        specialinvoke r15.<androidx.datastore.core.ReadException: void <init>(java.lang.Throwable)>(r1);

        interfaceinvoke $r11.<kotlinx.coroutines.flow.MutableStateFlow: void setValue(java.lang.Object)>(r15);

        throw r1;

     label10:
        $r6 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r6;

     label11:
        r16 = new java.lang.IllegalStateException;

        specialinvoke r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r16;

        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
    }

    private final java.lang.Object readAndInitOrPropagateFailure(kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation r0, r17;
        java.lang.Throwable r1, $r9;
        java.lang.Object $r2, r3, $r5, $r7;
        boolean $z0;
        kotlin.Unit $r6;
        int $i0, $i1, $i2, $i3, $i4;
        kotlinx.coroutines.flow.MutableStateFlow $r11;
        androidx.datastore.core.MultiProcessDataStore r12;
        androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateFailure$1 $r13, r14;
        androidx.datastore.core.ReadException r15;
        java.lang.IllegalStateException r16;

        r12 := @this: androidx.datastore.core.MultiProcessDataStore;

        r0 := @parameter0: kotlin.coroutines.Continuation;

        $z0 = r0 instanceof androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateFailure$1;

        if $z0 == 0 goto label01;

        $r13 = (androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateFailure$1) r0;

        $i0 = $r13.<androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateFailure$1: int label>;

        $i1 = $i0 & -2147483648;

        if $i1 == 0 goto label01;

        $i2 = $r13.<androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateFailure$1: int label>;

        $i3 = $i2 - -2147483648;

        $r13.<androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateFailure$1: int label> = $i3;

        goto label02;

     label01:
        r14 = new androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateFailure$1;

        specialinvoke r14.<androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateFailure$1: void <init>(androidx.datastore.core.MultiProcessDataStore,kotlin.coroutines.Continuation)>(r12, r0);

        $r13 = r14;

     label02:
        $r2 = $r13.<androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateFailure$1: java.lang.Object result>;

        r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i4 = $r13.<androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateFailure$1: int label>;

        tableswitch($i4)
        {
            case 0: goto label03;
            case 1: goto label06;
            default: goto label11;
        };

     label03:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

     label04:
        $r13.<androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateFailure$1: java.lang.Object L$0> = r12;

        $r13.<androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateFailure$1: int label> = 1;

        r17 = (kotlin.coroutines.Continuation) $r13;

        $r7 = specialinvoke r12.<androidx.datastore.core.MultiProcessDataStore: java.lang.Object readAndInit(kotlin.coroutines.Continuation)>(r17);

     label05:
        if $r7 != r3 goto label08;

        return r3;

     label06:
        $r5 = $r13.<androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateFailure$1: java.lang.Object L$0>;

        r12 = (androidx.datastore.core.MultiProcessDataStore) $r5;

     label07:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

     label08:
        goto label10;

     label09:
        $r9 := @caughtexception;

        r1 = $r9;

        $r11 = r12.<androidx.datastore.core.MultiProcessDataStore: kotlinx.coroutines.flow.MutableStateFlow downstreamFlow>;

        r15 = new androidx.datastore.core.ReadException;

        specialinvoke r15.<androidx.datastore.core.ReadException: void <init>(java.lang.Throwable)>(r1);

        interfaceinvoke $r11.<kotlinx.coroutines.flow.MutableStateFlow: void setValue(java.lang.Object)>(r15);

     label10:
        $r6 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r6;

     label11:
        r16 = new java.lang.IllegalStateException;

        specialinvoke r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r16;

        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
    }

    private final java.lang.Object readAndInit(kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation r0, r37, r38, r39;
        kotlin.Unit r1, $r7, r32;
        java.lang.Object $r2, r3, $r5, $r6, $r8, $r9, $r10, $r11, $r13, $r20, $r21, $r27, $r29;
        boolean $z0, $z1, $z2, $z3;
        kotlinx.coroutines.flow.MutableStateFlow $r12, $r19, $r30;
        androidx.datastore.core.UnInitialized $r14;
        java.util.List $r15, $r16;
        kotlin.jvm.functions.Function1 $r18;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Throwable $r23, r33;
        androidx.datastore.core.MultiProcessDataStore r24;
        androidx.datastore.core.MultiProcessDataStore$readAndInit$1 $r25, r34;
        kotlinx.coroutines.sync.Mutex $r26;
        androidx.datastore.core.Data r28;
        android.os.FileObserver $r31;
        androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1 r35;
        java.lang.IllegalStateException r36;

        r24 := @this: androidx.datastore.core.MultiProcessDataStore;

        r0 := @parameter0: kotlin.coroutines.Continuation;

        $z0 = r0 instanceof androidx.datastore.core.MultiProcessDataStore$readAndInit$1;

        if $z0 == 0 goto label01;

        $r25 = (androidx.datastore.core.MultiProcessDataStore$readAndInit$1) r0;

        $i0 = $r25.<androidx.datastore.core.MultiProcessDataStore$readAndInit$1: int label>;

        $i1 = $i0 & -2147483648;

        if $i1 == 0 goto label01;

        $i2 = $r25.<androidx.datastore.core.MultiProcessDataStore$readAndInit$1: int label>;

        $i3 = $i2 - -2147483648;

        $r25.<androidx.datastore.core.MultiProcessDataStore$readAndInit$1: int label> = $i3;

        goto label02;

     label01:
        r34 = new androidx.datastore.core.MultiProcessDataStore$readAndInit$1;

        specialinvoke r34.<androidx.datastore.core.MultiProcessDataStore$readAndInit$1: void <init>(androidx.datastore.core.MultiProcessDataStore,kotlin.coroutines.Continuation)>(r24, r0);

        $r25 = r34;

     label02:
        $r2 = $r25.<androidx.datastore.core.MultiProcessDataStore$readAndInit$1: java.lang.Object result>;

        r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i4 = $r25.<androidx.datastore.core.MultiProcessDataStore$readAndInit$1: int label>;

        tableswitch($i4)
        {
            case 0: goto label03;
            case 1: goto label04;
            case 2: goto label10;
            case 3: goto label15;
            default: goto label23;
        };

     label03:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

        $r26 = <androidx.datastore.core.MultiProcessDataStore: kotlinx.coroutines.sync.Mutex initTaskLock>;

        $r25.<androidx.datastore.core.MultiProcessDataStore$readAndInit$1: java.lang.Object L$0> = r24;

        $r25.<androidx.datastore.core.MultiProcessDataStore$readAndInit$1: java.lang.Object L$1> = $r26;

        $r25.<androidx.datastore.core.MultiProcessDataStore$readAndInit$1: int label> = 1;

        r37 = (kotlin.coroutines.Continuation) $r25;

        $r21 = interfaceinvoke $r26.<kotlinx.coroutines.sync.Mutex: java.lang.Object lock(java.lang.Object,kotlin.coroutines.Continuation)>(null, r37);

        if $r21 != r3 goto label05;

        return r3;

     label04:
        $r10 = $r25.<androidx.datastore.core.MultiProcessDataStore$readAndInit$1: java.lang.Object L$1>;

        $r26 = (kotlinx.coroutines.sync.Mutex) $r10;

        $r11 = $r25.<androidx.datastore.core.MultiProcessDataStore$readAndInit$1: java.lang.Object L$0>;

        r24 = (androidx.datastore.core.MultiProcessDataStore) $r11;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

     label05:
        $r12 = r24.<androidx.datastore.core.MultiProcessDataStore: kotlinx.coroutines.flow.MutableStateFlow downstreamFlow>;

        $r13 = interfaceinvoke $r12.<kotlinx.coroutines.flow.MutableStateFlow: java.lang.Object getValue()>();

        $r14 = <androidx.datastore.core.UnInitialized: androidx.datastore.core.UnInitialized INSTANCE>;

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r13, $r14);

        if $z1 != 0 goto label07;

        $r19 = r24.<androidx.datastore.core.MultiProcessDataStore: kotlinx.coroutines.flow.MutableStateFlow downstreamFlow>;

        $r20 = interfaceinvoke $r19.<kotlinx.coroutines.flow.MutableStateFlow: java.lang.Object getValue()>();

        $z3 = $r20 instanceof androidx.datastore.core.ReadException;

        if $z3 != 0 goto label07;

        r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label06:
        interfaceinvoke $r26.<kotlinx.coroutines.sync.Mutex: void unlock(java.lang.Object)>(null);

        return r1;

     label07:
        $r15 = r24.<androidx.datastore.core.MultiProcessDataStore: java.util.List initTasks>;

        if $r15 == null goto label08;

        $r16 = r24.<androidx.datastore.core.MultiProcessDataStore: java.util.List initTasks>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r16);

        $z2 = interfaceinvoke $r16.<java.util.List: boolean isEmpty()>();

        if $z2 == 0 goto label13;

     label08:
        $r25.<androidx.datastore.core.MultiProcessDataStore$readAndInit$1: java.lang.Object L$0> = r24;

        $r25.<androidx.datastore.core.MultiProcessDataStore$readAndInit$1: java.lang.Object L$1> = $r26;

        $r25.<androidx.datastore.core.MultiProcessDataStore$readAndInit$1: int label> = 2;

        r38 = (kotlin.coroutines.Continuation) $r25;

        $r27 = specialinvoke r24.<androidx.datastore.core.MultiProcessDataStore: java.lang.Object readDataOrHandleCorruption(boolean,kotlin.coroutines.Continuation)>(0, r38);

     label09:
        if $r27 != r3 goto label12;

        return r3;

     label10:
        $r8 = $r25.<androidx.datastore.core.MultiProcessDataStore$readAndInit$1: java.lang.Object L$1>;

        $r26 = (kotlinx.coroutines.sync.Mutex) $r8;

        $r9 = $r25.<androidx.datastore.core.MultiProcessDataStore$readAndInit$1: java.lang.Object L$0>;

        r24 = (androidx.datastore.core.MultiProcessDataStore) $r9;

     label11:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

        $r27 = $r2;

     label12:
        r28 = (androidx.datastore.core.Data) $r27;

        goto label18;

     label13:
        r35 = new androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1;

        specialinvoke r35.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: void <init>(androidx.datastore.core.MultiProcessDataStore,kotlin.coroutines.Continuation)>(r24, null);

        $r18 = (kotlin.jvm.functions.Function1) r35;

        $r25.<androidx.datastore.core.MultiProcessDataStore$readAndInit$1: java.lang.Object L$0> = r24;

        $r25.<androidx.datastore.core.MultiProcessDataStore$readAndInit$1: java.lang.Object L$1> = $r26;

        $r25.<androidx.datastore.core.MultiProcessDataStore$readAndInit$1: int label> = 3;

        r39 = (kotlin.coroutines.Continuation) $r25;

        $r29 = specialinvoke r24.<androidx.datastore.core.MultiProcessDataStore: java.lang.Object getWriteFileLock(kotlin.jvm.functions.Function1,kotlin.coroutines.Continuation)>($r18, r39);

     label14:
        if $r29 != r3 goto label17;

        return r3;

     label15:
        $r5 = $r25.<androidx.datastore.core.MultiProcessDataStore$readAndInit$1: java.lang.Object L$1>;

        $r26 = (kotlinx.coroutines.sync.Mutex) $r5;

        $r6 = $r25.<androidx.datastore.core.MultiProcessDataStore$readAndInit$1: java.lang.Object L$0>;

        r24 = (androidx.datastore.core.MultiProcessDataStore) $r6;

     label16:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

        $r29 = $r2;

     label17:
        r28 = (androidx.datastore.core.Data) $r29;

     label18:
        $r30 = r24.<androidx.datastore.core.MultiProcessDataStore: kotlinx.coroutines.flow.MutableStateFlow downstreamFlow>;

        interfaceinvoke $r30.<kotlinx.coroutines.flow.MutableStateFlow: void setValue(java.lang.Object)>(r28);

        $r31 = specialinvoke r24.<androidx.datastore.core.MultiProcessDataStore: android.os.FileObserver getFileObserver()>();

        virtualinvoke $r31.<android.os.FileObserver: void startWatching()>();

        r32 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label19:
        interfaceinvoke $r26.<kotlinx.coroutines.sync.Mutex: void unlock(java.lang.Object)>(null);

        goto label22;

     label20:
        $r23 := @caughtexception;

        r33 = $r23;

     label21:
        interfaceinvoke $r26.<kotlinx.coroutines.sync.Mutex: void unlock(java.lang.Object)>(null);

        throw r33;

     label22:
        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;

     label23:
        r36 = new java.lang.IllegalStateException;

        specialinvoke r36.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r36;

        catch java.lang.Throwable from label05 to label06 with label20;
        catch java.lang.Throwable from label07 to label09 with label20;
        catch java.lang.Throwable from label11 to label14 with label20;
        catch java.lang.Throwable from label16 to label19 with label20;
        catch java.lang.Throwable from label20 to label21 with label20;
    }

    private final java.lang.Object readDataOrHandleCorruption(boolean, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation r0, r50, r51, r52;
        java.lang.Throwable r1, $r30, $r31, $r32, r53;
        kotlin.jvm.internal.Ref$ObjectRef r2, r39;
        java.lang.Object $r3, r4, $r6, $r7, $r8, $r10, $r11, $r12, $r13, $r14, $r15, $r19, $r21, $r22, $r35, r36, $r37;
        boolean $z0, z1, z2, z3, z4, $z5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        kotlin.jvm.functions.Function1 $r18;
        androidx.datastore.core.SharedCounter $r24;
        kotlin.jvm.functions.Function2 $r27;
        androidx.datastore.core.MultiProcessDataStore r33, r38, r41;
        androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1 $r34, r43;
        androidx.datastore.core.CorruptionException r40;
        kotlin.jvm.internal.Ref$IntRef r42, r46;
        androidx.datastore.core.Data r44, r48;
        androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$2 r45;
        androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$3 r47;
        java.lang.IllegalStateException r49;

        r33 := @this: androidx.datastore.core.MultiProcessDataStore;

        z1 := @parameter0: boolean;

        r0 := @parameter1: kotlin.coroutines.Continuation;

        $z0 = r0 instanceof androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1;

        if $z0 == 0 goto label01;

        $r34 = (androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1) r0;

        $i3 = $r34.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1: int label>;

        $i4 = $i3 & -2147483648;

        if $i4 == 0 goto label01;

        $i5 = $r34.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1: int label>;

        $i6 = $i5 - -2147483648;

        $r34.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1: int label> = $i6;

        goto label02;

     label01:
        r43 = new androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1;

        specialinvoke r43.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1: void <init>(androidx.datastore.core.MultiProcessDataStore,kotlin.coroutines.Continuation)>(r33, r0);

        $r34 = r43;

     label02:
        $r3 = $r34.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1: java.lang.Object result>;

        r4 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i7 = $r34.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1: int label>;

        tableswitch($i7)
        {
            case 0: goto label03;
            case 1: goto label04;
            case 2: goto label09;
            case 3: goto label11;
            case 4: goto label16;
            default: goto label23;
        };

     label03:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r3);

        if z1 == 0 goto label08;

        $r34.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1: java.lang.Object L$0> = r33;

        $r34.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1: boolean Z$0> = z1;

        $r34.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1: int label> = 1;

        r50 = (kotlin.coroutines.Continuation) $r34;

        $r35 = specialinvoke r33.<androidx.datastore.core.MultiProcessDataStore: java.lang.Object readDataFromFileOrDefault(kotlin.coroutines.Continuation)>(r50);

        if $r35 != r4 goto label05;

        return r4;

     label04:
        z2 = $r34.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1: boolean Z$0>;

        $r22 = $r34.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1: java.lang.Object L$0>;

        r33 = (androidx.datastore.core.MultiProcessDataStore) $r22;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r3);

        $r35 = $r3;

     label05:
        r36 = $r35;

        r44 = new androidx.datastore.core.Data;

        if r36 == null goto label06;

        $i8 = virtualinvoke r36.<java.lang.Object: int hashCode()>();

        goto label07;

     label06:
        $i8 = 0;

     label07:
        $r24 = specialinvoke r33.<androidx.datastore.core.MultiProcessDataStore: androidx.datastore.core.SharedCounter getSharedCounter()>();

        $i2 = virtualinvoke $r24.<androidx.datastore.core.SharedCounter: int getValue()>();

        specialinvoke r44.<androidx.datastore.core.Data: void <init>(java.lang.Object,int,int)>(r36, $i8, $i2);

        return r44;

     label08:
        r45 = new androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$2;

        specialinvoke r45.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$2: void <init>(androidx.datastore.core.MultiProcessDataStore,kotlin.coroutines.Continuation)>(r33, null);

        $r27 = (kotlin.jvm.functions.Function2) r45;

        $r34.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1: java.lang.Object L$0> = r33;

        $r34.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1: boolean Z$0> = z1;

        $r34.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1: int label> = 2;

        r51 = (kotlin.coroutines.Continuation) $r34;

        $r37 = specialinvoke r33.<androidx.datastore.core.MultiProcessDataStore: java.lang.Object tryGetReadFileLock(kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation)>($r27, r51);

        if $r37 != r4 goto label10;

        return r4;

     label09:
        z3 = $r34.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1: boolean Z$0>;

        $r21 = $r34.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1: java.lang.Object L$0>;

        r38 = (androidx.datastore.core.MultiProcessDataStore) $r21;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r3);

        $r37 = $r3;

     label10:
        return $r37;

     label11:
        z4 = $r34.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1: boolean Z$0>;

        $r12 = $r34.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1: java.lang.Object L$3>;

        r2 = (kotlin.jvm.internal.Ref$ObjectRef) $r12;

        $r13 = $r34.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1: java.lang.Object L$2>;

        r39 = (kotlin.jvm.internal.Ref$ObjectRef) $r13;

        $r14 = $r34.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1: java.lang.Object L$1>;

        r40 = (androidx.datastore.core.CorruptionException) $r14;

        $r15 = $r34.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1: java.lang.Object L$0>;

        r41 = (androidx.datastore.core.MultiProcessDataStore) $r15;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r3);

        r2.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element> = $r3;

        r46 = new kotlin.jvm.internal.Ref$IntRef;

        specialinvoke r46.<kotlin.jvm.internal.Ref$IntRef: void <init>()>();

        r42 = r46;

        $i1 = r41.<androidx.datastore.core.MultiProcessDataStore: int INVALID_VERSION>;

        r42.<kotlin.jvm.internal.Ref$IntRef: int element> = $i1;

     label12:
        if z4 == 0 goto label13;

        $z5 = 1;

        goto label14;

     label13:
        $z5 = 0;

     label14:
        r47 = new androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$3;

        specialinvoke r47.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$3: void <init>(kotlin.jvm.internal.Ref$ObjectRef,androidx.datastore.core.MultiProcessDataStore,kotlin.jvm.internal.Ref$IntRef,kotlin.coroutines.Continuation)>(r39, r41, r42, null);

        $r18 = (kotlin.jvm.functions.Function1) r47;

        $r34.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1: java.lang.Object L$0> = r40;

        $r34.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1: java.lang.Object L$1> = r39;

        $r34.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1: java.lang.Object L$2> = r42;

        $r34.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1: java.lang.Object L$3> = null;

        $r34.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1: int label> = 4;

        r52 = (kotlin.coroutines.Continuation) $r34;

        $r19 = specialinvoke r41.<androidx.datastore.core.MultiProcessDataStore: java.lang.Object doWithWriteFileLock(boolean,kotlin.jvm.functions.Function1,kotlin.coroutines.Continuation)>($z5, $r18, r52);

     label15:
        if $r19 != r4 goto label18;

        return r4;

     label16:
        $r6 = $r34.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1: java.lang.Object L$2>;

        r42 = (kotlin.jvm.internal.Ref$IntRef) $r6;

        $r7 = $r34.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1: java.lang.Object L$1>;

        r39 = (kotlin.jvm.internal.Ref$ObjectRef) $r7;

        $r8 = $r34.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1: java.lang.Object L$0>;

        r40 = (androidx.datastore.core.CorruptionException) $r8;

     label17:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r3);

     label18:
        goto label20;

     label19:
        $r30 := @caughtexception;

        r1 = $r30;

        $r32 = (java.lang.Throwable) r40;

        $r31 = (java.lang.Throwable) r1;

        staticinvoke <kotlin.ExceptionsKt: void addSuppressed(java.lang.Throwable,java.lang.Throwable)>($r32, $r31);

        r53 = (java.lang.Throwable) r40;

        throw r53;

     label20:
        r48 = new androidx.datastore.core.Data;

        $r11 = r39.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        $r10 = r39.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        if $r10 == null goto label21;

        $i9 = virtualinvoke $r10.<java.lang.Object: int hashCode()>();

        goto label22;

     label21:
        $i9 = 0;

     label22:
        $i0 = r42.<kotlin.jvm.internal.Ref$IntRef: int element>;

        specialinvoke r48.<androidx.datastore.core.Data: void <init>(java.lang.Object,int,int)>($r11, $i9, $i0);

        return r48;

     label23:
        r49 = new java.lang.IllegalStateException;

        specialinvoke r49.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r49;

        catch java.io.IOException from label12 to label15 with label19;
        catch java.io.IOException from label17 to label18 with label19;
    }

    private final java.lang.Object doWithWriteFileLock(boolean, kotlin.jvm.functions.Function1, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore r0;
        boolean z0;
        kotlin.jvm.functions.Function1 r1, $r4;
        kotlin.coroutines.Continuation $r2;
        androidx.datastore.core.MultiProcessDataStore$doWithWriteFileLock$2 $r3;
        java.lang.Object $r5, $r6, $r8, $r9;
        kotlin.Unit $r7, $r10;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore;

        z0 := @parameter0: boolean;

        r1 := @parameter1: kotlin.jvm.functions.Function1;

        $r2 := @parameter2: kotlin.coroutines.Continuation;

        if z0 == 0 goto label2;

        $r8 = interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r9 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r8 != $r9 goto label1;

        return $r8;

     label1:
        $r10 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r10;

     label2:
        $r3 = new androidx.datastore.core.MultiProcessDataStore$doWithWriteFileLock$2;

        specialinvoke $r3.<androidx.datastore.core.MultiProcessDataStore$doWithWriteFileLock$2: void <init>(kotlin.jvm.functions.Function1,kotlin.coroutines.Continuation)>(r1, null);

        $r4 = (kotlin.jvm.functions.Function1) $r3;

        $r5 = specialinvoke r0.<androidx.datastore.core.MultiProcessDataStore: java.lang.Object getWriteFileLock(kotlin.jvm.functions.Function1,kotlin.coroutines.Continuation)>($r4, $r2);

        $r6 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r5 != $r6 goto label3;

        return $r5;

     label3:
        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

    private final java.lang.Object readData(kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation r0, r24;
        androidx.datastore.core.State r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        androidx.datastore.core.Data r2, $r14, $r16;
        java.lang.Object $r3, r4, $r6, $r8, $r10, $r15, $r20;
        boolean $z0, $z1, $z2;
        kotlinx.coroutines.flow.MutableStateFlow $r7, $r9;
        androidx.datastore.core.SharedCounter $r11;
        kotlin.jvm.functions.Function2 $r13;
        androidx.datastore.core.MultiProcessDataStore r18;
        androidx.datastore.core.MultiProcessDataStore$readData$1 $r19, r21;
        androidx.datastore.core.MultiProcessDataStore$readData$data$1 r22;
        java.lang.IllegalStateException r23;

        r18 := @this: androidx.datastore.core.MultiProcessDataStore;

        r0 := @parameter0: kotlin.coroutines.Continuation;

        $z0 = r0 instanceof androidx.datastore.core.MultiProcessDataStore$readData$1;

        if $z0 == 0 goto label1;

        $r19 = (androidx.datastore.core.MultiProcessDataStore$readData$1) r0;

        $i2 = $r19.<androidx.datastore.core.MultiProcessDataStore$readData$1: int label>;

        $i3 = $i2 & -2147483648;

        if $i3 == 0 goto label1;

        $i4 = $r19.<androidx.datastore.core.MultiProcessDataStore$readData$1: int label>;

        $i5 = $i4 - -2147483648;

        $r19.<androidx.datastore.core.MultiProcessDataStore$readData$1: int label> = $i5;

        goto label2;

     label1:
        r21 = new androidx.datastore.core.MultiProcessDataStore$readData$1;

        specialinvoke r21.<androidx.datastore.core.MultiProcessDataStore$readData$1: void <init>(androidx.datastore.core.MultiProcessDataStore,kotlin.coroutines.Continuation)>(r18, r0);

        $r19 = r21;

     label2:
        $r3 = $r19.<androidx.datastore.core.MultiProcessDataStore$readData$1: java.lang.Object result>;

        r4 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i6 = $r19.<androidx.datastore.core.MultiProcessDataStore$readData$1: int label>;

        tableswitch($i6)
        {
            case 0: goto label3;
            case 1: goto label7;
            default: goto label9;
        };

     label3:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r3);

        $r9 = r18.<androidx.datastore.core.MultiProcessDataStore: kotlinx.coroutines.flow.MutableStateFlow downstreamFlow>;

        $r10 = interfaceinvoke $r9.<kotlinx.coroutines.flow.MutableStateFlow: java.lang.Object getValue()>();

        r1 = (androidx.datastore.core.State) $r10;

        $r11 = specialinvoke r18.<androidx.datastore.core.MultiProcessDataStore: androidx.datastore.core.SharedCounter getSharedCounter()>();

        i0 = virtualinvoke $r11.<androidx.datastore.core.SharedCounter: int getValue()>();

        $z1 = r1 instanceof androidx.datastore.core.Data;

        if $z1 == 0 goto label4;

        $r16 = (androidx.datastore.core.Data) r1;

        $i7 = virtualinvoke $r16.<androidx.datastore.core.Data: int getVersion()>();

        goto label5;

     label4:
        $i7 = r18.<androidx.datastore.core.MultiProcessDataStore: int INVALID_VERSION>;

     label5:
        i1 = $i7;

        $z2 = r1 instanceof androidx.datastore.core.Data;

        if $z2 == 0 goto label6;

        if i0 != i1 goto label6;

        $r14 = (androidx.datastore.core.Data) r1;

        $r15 = virtualinvoke $r14.<androidx.datastore.core.Data: java.lang.Object getValue()>();

        return $r15;

     label6:
        r22 = new androidx.datastore.core.MultiProcessDataStore$readData$data$1;

        specialinvoke r22.<androidx.datastore.core.MultiProcessDataStore$readData$data$1: void <init>(androidx.datastore.core.MultiProcessDataStore,kotlin.coroutines.Continuation)>(r18, null);

        $r13 = (kotlin.jvm.functions.Function2) r22;

        $r19.<androidx.datastore.core.MultiProcessDataStore$readData$1: java.lang.Object L$0> = r18;

        $r19.<androidx.datastore.core.MultiProcessDataStore$readData$1: int label> = 1;

        r24 = (kotlin.coroutines.Continuation) $r19;

        $r20 = specialinvoke r18.<androidx.datastore.core.MultiProcessDataStore: java.lang.Object tryGetReadFileLock(kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation)>($r13, r24);

        if $r20 != r4 goto label8;

        return r4;

     label7:
        $r6 = $r19.<androidx.datastore.core.MultiProcessDataStore$readData$1: java.lang.Object L$0>;

        r18 = (androidx.datastore.core.MultiProcessDataStore) $r6;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r3);

        $r20 = $r3;

     label8:
        r2 = (androidx.datastore.core.Data) $r20;

        $r7 = r18.<androidx.datastore.core.MultiProcessDataStore: kotlinx.coroutines.flow.MutableStateFlow downstreamFlow>;

        interfaceinvoke $r7.<kotlinx.coroutines.flow.MutableStateFlow: void setValue(java.lang.Object)>(r2);

        $r8 = virtualinvoke r2.<androidx.datastore.core.Data: java.lang.Object getValue()>();

        return $r8;

     label9:
        r23 = new java.lang.IllegalStateException;

        specialinvoke r23.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r23;
    }

    private final java.lang.Object readDataFromFileOrDefault(kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore r0;
        kotlin.coroutines.Continuation $r1;
        androidx.datastore.core.StorageConnection $r2;
        java.lang.Object $r3;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $r2 = specialinvoke r0.<androidx.datastore.core.MultiProcessDataStore: androidx.datastore.core.StorageConnection getStorageConnection()>();

        $r3 = staticinvoke <androidx.datastore.core.StorageConnectionKt: java.lang.Object readData(androidx.datastore.core.StorageConnection,kotlin.coroutines.Continuation)>($r2, $r1);

        return $r3;
    }

    private final java.lang.Object transformAndWrite(kotlin.jvm.functions.Function2, kotlin.coroutines.CoroutineContext, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore r0;
        kotlin.jvm.functions.Function2 r1;
        kotlin.coroutines.CoroutineContext r2;
        kotlin.coroutines.Continuation r3, r17;
        java.lang.Object $r4, r5, $r8, $r13;
        boolean $z0;
        androidx.datastore.core.Data $r7;
        kotlin.jvm.functions.Function1 $r10;
        int $i0, $i1, $i2, $i3, $i4;
        androidx.datastore.core.MultiProcessDataStore$transformAndWrite$1 $r12, r14;
        androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2 r15;
        java.lang.IllegalStateException r16;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore;

        r1 := @parameter0: kotlin.jvm.functions.Function2;

        r2 := @parameter1: kotlin.coroutines.CoroutineContext;

        r3 := @parameter2: kotlin.coroutines.Continuation;

        $z0 = r3 instanceof androidx.datastore.core.MultiProcessDataStore$transformAndWrite$1;

        if $z0 == 0 goto label1;

        $r12 = (androidx.datastore.core.MultiProcessDataStore$transformAndWrite$1) r3;

        $i0 = $r12.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$1: int label>;

        $i1 = $i0 & -2147483648;

        if $i1 == 0 goto label1;

        $i2 = $r12.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$1: int label>;

        $i3 = $i2 - -2147483648;

        $r12.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$1: int label> = $i3;

        goto label2;

     label1:
        r14 = new androidx.datastore.core.MultiProcessDataStore$transformAndWrite$1;

        specialinvoke r14.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$1: void <init>(androidx.datastore.core.MultiProcessDataStore,kotlin.coroutines.Continuation)>(r0, r3);

        $r12 = r14;

     label2:
        $r4 = $r12.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$1: java.lang.Object result>;

        r5 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i4 = $r12.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$1: int label>;

        tableswitch($i4)
        {
            case 0: goto label3;
            case 1: goto label4;
            default: goto label6;
        };

     label3:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

        r15 = new androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2;

        specialinvoke r15.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2: void <init>(androidx.datastore.core.MultiProcessDataStore,kotlin.coroutines.CoroutineContext,kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation)>(r0, r2, r1, null);

        $r10 = (kotlin.jvm.functions.Function1) r15;

        $r12.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$1: int label> = 1;

        r17 = (kotlin.coroutines.Continuation) $r12;

        $r13 = specialinvoke r0.<androidx.datastore.core.MultiProcessDataStore: java.lang.Object getWriteFileLock(kotlin.jvm.functions.Function1,kotlin.coroutines.Continuation)>($r10, r17);

        if $r13 != r5 goto label5;

        return r5;

     label4:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

        $r13 = $r4;

     label5:
        $r7 = (androidx.datastore.core.Data) $r13;

        $r8 = virtualinvoke $r7.<androidx.datastore.core.Data: java.lang.Object getValue()>();

        return $r8;

     label6:
        r16 = new java.lang.IllegalStateException;

        specialinvoke r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r16;
    }

    public final java.lang.Object writeData$datastore_core_release(java.lang.Object, boolean, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore r0;
        java.lang.Object r1, $r3, r4, $r6, $r12;
        boolean z0, $z1, $z2;
        kotlin.coroutines.Continuation r2, r23;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Integer $r7;
        androidx.datastore.core.StorageConnection $r9;
        kotlin.jvm.functions.Function2 $r11;
        kotlin.jvm.internal.Ref$IntRef $r13, r18, r20;
        androidx.datastore.core.MultiProcessDataStore$writeData$1 $r17, r19;
        androidx.datastore.core.MultiProcessDataStore$writeData$2 r21;
        java.lang.IllegalStateException r22;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        r2 := @parameter2: kotlin.coroutines.Continuation;

        $z1 = r2 instanceof androidx.datastore.core.MultiProcessDataStore$writeData$1;

        if $z1 == 0 goto label1;

        $r17 = (androidx.datastore.core.MultiProcessDataStore$writeData$1) r2;

        $i1 = $r17.<androidx.datastore.core.MultiProcessDataStore$writeData$1: int label>;

        $i2 = $i1 & -2147483648;

        if $i2 == 0 goto label1;

        $i3 = $r17.<androidx.datastore.core.MultiProcessDataStore$writeData$1: int label>;

        $i4 = $i3 - -2147483648;

        $r17.<androidx.datastore.core.MultiProcessDataStore$writeData$1: int label> = $i4;

        goto label2;

     label1:
        r19 = new androidx.datastore.core.MultiProcessDataStore$writeData$1;

        specialinvoke r19.<androidx.datastore.core.MultiProcessDataStore$writeData$1: void <init>(androidx.datastore.core.MultiProcessDataStore,kotlin.coroutines.Continuation)>(r0, r2);

        $r17 = r19;

     label2:
        $r3 = $r17.<androidx.datastore.core.MultiProcessDataStore$writeData$1: java.lang.Object result>;

        r4 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i5 = $r17.<androidx.datastore.core.MultiProcessDataStore$writeData$1: int label>;

        tableswitch($i5)
        {
            case 0: goto label3;
            case 1: goto label6;
            default: goto label8;
        };

     label3:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r3);

        r20 = new kotlin.jvm.internal.Ref$IntRef;

        specialinvoke r20.<kotlin.jvm.internal.Ref$IntRef: void <init>()>();

        r18 = r20;

        $r9 = specialinvoke r0.<androidx.datastore.core.MultiProcessDataStore: androidx.datastore.core.StorageConnection getStorageConnection()>();

        r21 = new androidx.datastore.core.MultiProcessDataStore$writeData$2;

        $r13 = r18;

        if z0 == 0 goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        specialinvoke r21.<androidx.datastore.core.MultiProcessDataStore$writeData$2: void <init>(kotlin.jvm.internal.Ref$IntRef,androidx.datastore.core.MultiProcessDataStore,java.lang.Object,boolean,kotlin.coroutines.Continuation)>($r13, r0, r1, $z2, null);

        $r11 = (kotlin.jvm.functions.Function2) r21;

        $r17.<androidx.datastore.core.MultiProcessDataStore$writeData$1: java.lang.Object L$0> = r18;

        $r17.<androidx.datastore.core.MultiProcessDataStore$writeData$1: int label> = 1;

        r23 = (kotlin.coroutines.Continuation) $r17;

        $r12 = interfaceinvoke $r9.<androidx.datastore.core.StorageConnection: java.lang.Object writeScope(kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation)>($r11, r23);

        if $r12 != r4 goto label7;

        return r4;

     label6:
        $r6 = $r17.<androidx.datastore.core.MultiProcessDataStore$writeData$1: java.lang.Object L$0>;

        r18 = (kotlin.jvm.internal.Ref$IntRef) $r6;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r3);

     label7:
        $i0 = r18.<kotlin.jvm.internal.Ref$IntRef: int element>;

        $r7 = staticinvoke <kotlin.coroutines.jvm.internal.Boxing: java.lang.Integer boxInt(int)>($i0);

        return $r7;

     label8:
        r22 = new java.lang.IllegalStateException;

        specialinvoke r22.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r22;
    }

    public static java.lang.Object writeData$datastore_core_release$default(androidx.datastore.core.MultiProcessDataStore, java.lang.Object, boolean, kotlin.coroutines.Continuation, int, java.lang.Object)
    {
        androidx.datastore.core.MultiProcessDataStore r0;
        java.lang.Object r1, r3, $r4;
        kotlin.coroutines.Continuation r2;
        int i0, $i1;
        boolean z0;

        r0 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        r1 := @parameter1: java.lang.Object;

        z0 := @parameter2: boolean;

        r2 := @parameter3: kotlin.coroutines.Continuation;

        i0 := @parameter4: int;

        r3 := @parameter5: java.lang.Object;

        $i1 = i0 & 2;

        if $i1 == 0 goto label1;

        z0 = 1;

     label1:
        $r4 = virtualinvoke r0.<androidx.datastore.core.MultiProcessDataStore: java.lang.Object writeData$datastore_core_release(java.lang.Object,boolean,kotlin.coroutines.Continuation)>(r1, z0, r2);

        return $r4;
    }

    private final java.io.File fileWithSuffix(java.lang.String)
    {
        androidx.datastore.core.MultiProcessDataStore r0;
        java.lang.String r1, $r5, $r8;
        java.io.File $r2, $r4;
        java.lang.StringBuilder $r3, $r6, $r7;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.io.File;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r0.<androidx.datastore.core.MultiProcessDataStore: java.io.File getFile()>();

        $r5 = virtualinvoke $r4.<java.io.File: java.lang.String getAbsolutePath()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r8);

        return $r2;
    }

    private final void createIfNotExists(java.io.File)
    {
        androidx.datastore.core.MultiProcessDataStore r0;
        java.io.File $r1;
        boolean $z0;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore;

        $r1 := @parameter0: java.io.File;

        specialinvoke r0.<androidx.datastore.core.MultiProcessDataStore: void createParentDirectories(java.io.File)>($r1);

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        virtualinvoke $r1.<java.io.File: boolean createNewFile()>();

     label1:
        return;
    }

    private final void createParentDirectories(java.io.File)
    {
        androidx.datastore.core.MultiProcessDataStore r0;
        java.io.File $r1, r2, r3, $r4;
        boolean $z2;
        java.lang.StringBuilder $r7, $r8, r10;
        java.lang.String $r9;
        java.io.IOException r11;
        java.lang.Throwable r12;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore;

        $r1 := @parameter0: java.io.File;

        $r4 = virtualinvoke $r1.<java.io.File: java.io.File getCanonicalFile()>();

        r2 = virtualinvoke $r4.<java.io.File: java.io.File getParentFile()>();

        if r2 == null goto label2;

        r3 = r2;

        virtualinvoke r3.<java.io.File: boolean mkdirs()>();

        $z2 = virtualinvoke r3.<java.io.File: boolean isDirectory()>();

        if $z2 != 0 goto label1;

        r11 = new java.io.IOException;

        r10 = new java.lang.StringBuilder;

        specialinvoke r10.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to create parent directories of ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r11.<java.io.IOException: void <init>(java.lang.String)>($r9);

        r12 = (java.lang.Throwable) r11;

        throw r12;

     label1:
        goto label2;

     label2:
        return;
    }

    private final java.lang.Object getWriteFileLock(kotlin.jvm.functions.Function1, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation r0, r46;
        java.lang.Object r1, $r5, r6, $r8, $r9, $r10, $r11, $r16, $r17, $r18, $r23, $r36;
        androidx.datastore.core.Data r2, r4, r37, r44;
        java.lang.Throwable r3, $r25, $r26, $r27, $r28, r38, r39, r40, r41;
        boolean $z0;
        androidx.datastore.core.SharedCounter $r13;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.io.File $r20;
        java.nio.channels.FileChannel $r21;
        androidx.datastore.core.MultiProcessDataStore r29;
        kotlin.jvm.functions.Function1 r30;
        androidx.datastore.core.MultiProcessDataStore$getWriteFileLock$1 $r31, r42;
        kotlinx.coroutines.sync.Mutex $r32;
        java.io.Closeable r33;
        java.io.FileOutputStream r34, r43;
        java.nio.channels.FileLock r35;
        java.lang.IllegalStateException r45;

        r29 := @this: androidx.datastore.core.MultiProcessDataStore;

        r30 := @parameter0: kotlin.jvm.functions.Function1;

        r0 := @parameter1: kotlin.coroutines.Continuation;

        $z0 = r0 instanceof androidx.datastore.core.MultiProcessDataStore$getWriteFileLock$1;

        if $z0 == 0 goto label01;

        $r31 = (androidx.datastore.core.MultiProcessDataStore$getWriteFileLock$1) r0;

        $i1 = $r31.<androidx.datastore.core.MultiProcessDataStore$getWriteFileLock$1: int label>;

        $i2 = $i1 & -2147483648;

        if $i2 == 0 goto label01;

        $i3 = $r31.<androidx.datastore.core.MultiProcessDataStore$getWriteFileLock$1: int label>;

        $i4 = $i3 - -2147483648;

        $r31.<androidx.datastore.core.MultiProcessDataStore$getWriteFileLock$1: int label> = $i4;

        goto label02;

     label01:
        r42 = new androidx.datastore.core.MultiProcessDataStore$getWriteFileLock$1;

        specialinvoke r42.<androidx.datastore.core.MultiProcessDataStore$getWriteFileLock$1: void <init>(androidx.datastore.core.MultiProcessDataStore,kotlin.coroutines.Continuation)>(r29, r0);

        $r31 = r42;

     label02:
        $r5 = $r31.<androidx.datastore.core.MultiProcessDataStore$getWriteFileLock$1: java.lang.Object result>;

        r6 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i5 = $r31.<androidx.datastore.core.MultiProcessDataStore$getWriteFileLock$1: int label>;

        tableswitch($i5)
        {
            case 0: goto label03;
            case 1: goto label04;
            case 2: goto label09;
            default: goto label26;
        };

     label03:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r5);

        $r32 = r29.<androidx.datastore.core.MultiProcessDataStore: kotlinx.coroutines.sync.Mutex threadLock>;

        $r31.<androidx.datastore.core.MultiProcessDataStore$getWriteFileLock$1: java.lang.Object L$0> = r29;

        $r31.<androidx.datastore.core.MultiProcessDataStore$getWriteFileLock$1: java.lang.Object L$1> = r30;

        $r31.<androidx.datastore.core.MultiProcessDataStore$getWriteFileLock$1: java.lang.Object L$2> = $r32;

        $r31.<androidx.datastore.core.MultiProcessDataStore$getWriteFileLock$1: int label> = 1;

        r46 = (kotlin.coroutines.Continuation) $r31;

        $r23 = interfaceinvoke $r32.<kotlinx.coroutines.sync.Mutex: java.lang.Object lock(java.lang.Object,kotlin.coroutines.Continuation)>(null, r46);

        if $r23 != r6 goto label05;

        return r6;

     label04:
        $r16 = $r31.<androidx.datastore.core.MultiProcessDataStore$getWriteFileLock$1: java.lang.Object L$2>;

        $r32 = (kotlinx.coroutines.sync.Mutex) $r16;

        $r17 = $r31.<androidx.datastore.core.MultiProcessDataStore$getWriteFileLock$1: java.lang.Object L$1>;

        r30 = (kotlin.jvm.functions.Function1) $r17;

        $r18 = $r31.<androidx.datastore.core.MultiProcessDataStore$getWriteFileLock$1: java.lang.Object L$0>;

        r29 = (androidx.datastore.core.MultiProcessDataStore) $r18;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r5);

     label05:
        r43 = new java.io.FileOutputStream;

        $r20 = specialinvoke r29.<androidx.datastore.core.MultiProcessDataStore: java.io.File getLockFile()>();

        specialinvoke r43.<java.io.FileOutputStream: void <init>(java.io.File)>($r20);

        r33 = (java.io.Closeable) r43;

     label06:
        r34 = (java.io.FileOutputStream) r33;

        r35 = null;

     label07:
        $r21 = virtualinvoke r34.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>();

        r35 = virtualinvoke $r21.<java.nio.channels.FileChannel: java.nio.channels.FileLock lock(long,long,boolean)>(0L, 9223372036854775807L, 0);

        $r31.<androidx.datastore.core.MultiProcessDataStore$getWriteFileLock$1: java.lang.Object L$0> = r29;

        $r31.<androidx.datastore.core.MultiProcessDataStore$getWriteFileLock$1: java.lang.Object L$1> = $r32;

        $r31.<androidx.datastore.core.MultiProcessDataStore$getWriteFileLock$1: java.lang.Object L$2> = r33;

        $r31.<androidx.datastore.core.MultiProcessDataStore$getWriteFileLock$1: java.lang.Object L$3> = r35;

        $r31.<androidx.datastore.core.MultiProcessDataStore$getWriteFileLock$1: int label> = 2;

        $r36 = interfaceinvoke r30.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r31);

     label08:
        if $r36 != r6 goto label11;

        return r6;

     label09:
        $r8 = $r31.<androidx.datastore.core.MultiProcessDataStore$getWriteFileLock$1: java.lang.Object L$3>;

        r35 = (java.nio.channels.FileLock) $r8;

        $r9 = $r31.<androidx.datastore.core.MultiProcessDataStore$getWriteFileLock$1: java.lang.Object L$2>;

        r33 = (java.io.Closeable) $r9;

        $r10 = $r31.<androidx.datastore.core.MultiProcessDataStore$getWriteFileLock$1: java.lang.Object L$1>;

        $r32 = (kotlinx.coroutines.sync.Mutex) $r10;

        $r11 = $r31.<androidx.datastore.core.MultiProcessDataStore$getWriteFileLock$1: java.lang.Object L$0>;

        r29 = (androidx.datastore.core.MultiProcessDataStore) $r11;

     label10:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r5);

        $r36 = $r5;

     label11:
        r1 = $r36;

        r44 = new androidx.datastore.core.Data;

        if r1 == null goto label12;

        $i6 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        goto label13;

     label12:
        $i6 = 0;

     label13:
        $r13 = specialinvoke r29.<androidx.datastore.core.MultiProcessDataStore: androidx.datastore.core.SharedCounter getSharedCounter()>();

        $i0 = virtualinvoke $r13.<androidx.datastore.core.SharedCounter: int getValue()>();

        specialinvoke r44.<androidx.datastore.core.Data: void <init>(java.lang.Object,int,int)>(r1, $i6, $i0);

        r37 = r44;

     label14:
        if r35 == null goto label15;

        virtualinvoke r35.<java.nio.channels.FileLock: void release()>();

        goto label15;

     label15:
        r2 = r37;

     label16:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r33, null);

        r4 = r2;

     label17:
        interfaceinvoke $r32.<kotlinx.coroutines.sync.Mutex: void unlock(java.lang.Object)>(null);

        return r4;

     label18:
        $r28 := @caughtexception;

        r38 = $r28;

     label19:
        if r35 == null goto label20;

        virtualinvoke r35.<java.nio.channels.FileLock: void release()>();

        goto label20;

     label20:
        throw r38;

     label21:
        $r25 := @caughtexception;

        r39 = $r25;

        r40 = r39;

        throw r39;

     label22:
        $r26 := @caughtexception;

        r41 = $r26;

     label23:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r33, r40);

        throw r41;

     label24:
        $r27 := @caughtexception;

        r3 = $r27;

     label25:
        interfaceinvoke $r32.<kotlinx.coroutines.sync.Mutex: void unlock(java.lang.Object)>(null);

        throw r3;

     label26:
        r45 = new java.lang.IllegalStateException;

        specialinvoke r45.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r45;

        catch java.lang.Throwable from label07 to label08 with label18;
        catch java.lang.Throwable from label10 to label14 with label18;
        catch java.lang.Throwable from label18 to label19 with label18;
        catch java.lang.Throwable from label06 to label08 with label21;
        catch java.lang.Throwable from label10 to label16 with label21;
        catch java.lang.Throwable from label18 to label21 with label21;
        catch java.lang.Throwable from label21 to label22 with label22;
        catch java.lang.Throwable from label22 to label23 with label22;
        catch java.lang.Throwable from label05 to label08 with label24;
        catch java.lang.Throwable from label10 to label17 with label24;
        catch java.lang.Throwable from label18 to label24 with label24;
        catch java.lang.Throwable from label24 to label25 with label24;
    }

    private final java.lang.Object tryGetReadFileLock(kotlin.jvm.functions.Function2, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore r0;
        kotlin.jvm.functions.Function2 r1;
        kotlin.coroutines.Continuation r2;
        boolean z0, $z1, $z2, z3, $z4, $z5, $z6;
        java.lang.Throwable r3, r5, $r23, $r24, $r27, $r28, $r29, r36, r39, r40, r41;
        java.lang.Object r4, r6, r7, $r8, r9, $r11, $r12, $r13, $r14, $r32, $r37, r38;
        androidx.datastore.core.MultiProcessDataStore$tryGetReadFileLock$1 $r10, $r30;
        java.io.FileInputStream $r15, r34;
        java.io.File $r16;
        java.nio.channels.FileChannel $r17;
        java.lang.Boolean $r18, $r21;
        java.lang.IllegalStateException $r22;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r25, $r26;
        kotlinx.coroutines.sync.Mutex $r31;
        java.io.Closeable r33;
        java.nio.channels.FileLock r35;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore;

        r1 := @parameter0: kotlin.jvm.functions.Function2;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $z1 = r2 instanceof androidx.datastore.core.MultiProcessDataStore$tryGetReadFileLock$1;

        if $z1 == 0 goto label01;

        $r30 = (androidx.datastore.core.MultiProcessDataStore$tryGetReadFileLock$1) r2;

        $i0 = $r30.<androidx.datastore.core.MultiProcessDataStore$tryGetReadFileLock$1: int label>;

        $i1 = $i0 & -2147483648;

        if $i1 == 0 goto label01;

        $i2 = $r30.<androidx.datastore.core.MultiProcessDataStore$tryGetReadFileLock$1: int label>;

        $i3 = $i2 - -2147483648;

        $r30.<androidx.datastore.core.MultiProcessDataStore$tryGetReadFileLock$1: int label> = $i3;

        goto label02;

     label01:
        $r10 = new androidx.datastore.core.MultiProcessDataStore$tryGetReadFileLock$1;

        specialinvoke $r10.<androidx.datastore.core.MultiProcessDataStore$tryGetReadFileLock$1: void <init>(androidx.datastore.core.MultiProcessDataStore,kotlin.coroutines.Continuation)>(r0, r2);

        $r30 = $r10;

     label02:
        $r8 = $r30.<androidx.datastore.core.MultiProcessDataStore$tryGetReadFileLock$1: java.lang.Object result>;

        r9 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i4 = $r30.<androidx.datastore.core.MultiProcessDataStore$tryGetReadFileLock$1: int label>;

        tableswitch($i4)
        {
            case 0: goto label03;
            case 1: goto label08;
            case 2: goto label25;
            default: goto label42;
        };

     label03:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r8);

        $r31 = r0.<androidx.datastore.core.MultiProcessDataStore: kotlinx.coroutines.sync.Mutex threadLock>;

        z3 = interfaceinvoke $r31.<kotlinx.coroutines.sync.Mutex: boolean tryLock(java.lang.Object)>(null);

     label04:
        if z3 == 0 goto label05;

        $z4 = 1;

        goto label06;

     label05:
        $z4 = 0;

     label06:
        z0 = $z4;

        if z0 != 0 goto label13;

        $r21 = staticinvoke <kotlin.coroutines.jvm.internal.Boxing: java.lang.Boolean boxBoolean(boolean)>(0);

        $r30.<androidx.datastore.core.MultiProcessDataStore$tryGetReadFileLock$1: java.lang.Object L$0> = $r31;

        $r30.<androidx.datastore.core.MultiProcessDataStore$tryGetReadFileLock$1: boolean Z$0> = z3;

        $r30.<androidx.datastore.core.MultiProcessDataStore$tryGetReadFileLock$1: int label> = 1;

        $r32 = interfaceinvoke r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r21, $r30);

     label07:
        if $r32 != r9 goto label10;

        return r9;

     label08:
        z3 = $r30.<androidx.datastore.core.MultiProcessDataStore$tryGetReadFileLock$1: boolean Z$0>;

        $r14 = $r30.<androidx.datastore.core.MultiProcessDataStore$tryGetReadFileLock$1: java.lang.Object L$0>;

        $r31 = (kotlinx.coroutines.sync.Mutex) $r14;

     label09:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r8);

        $r32 = $r8;

     label10:
        r7 = $r32;

     label11:
        if z3 == 0 goto label12;

        interfaceinvoke $r31.<kotlinx.coroutines.sync.Mutex: void unlock(java.lang.Object)>(null);

     label12:
        return r7;

     label13:
        $r15 = new java.io.FileInputStream;

        $r16 = specialinvoke r0.<androidx.datastore.core.MultiProcessDataStore: java.io.File getLockFile()>();

        specialinvoke $r15.<java.io.FileInputStream: void <init>(java.io.File)>($r16);

        r33 = (java.io.Closeable) $r15;

     label14:
        r34 = (java.io.FileInputStream) r33;

        r35 = null;

     label15:
        $r17 = virtualinvoke r34.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>();

        r35 = virtualinvoke $r17.<java.nio.channels.FileChannel: java.nio.channels.FileLock tryLock(long,long,boolean)>(0L, 9223372036854775807L, 1);

     label16:
        goto label21;

     label17:
        $r24 := @caughtexception;

        r36 = $r24;

        $r25 = virtualinvoke r36.<java.io.IOException: java.lang.String getMessage()>();

        if $r25 == null goto label19;

        $r26 = r0.<androidx.datastore.core.MultiProcessDataStore: java.lang.String LOCK_ERROR_MESSAGE>;

        $z2 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r25, $r26, 0, 2, null);

        if $z2 != 1 goto label18;

        $z5 = 1;

        goto label20;

     label18:
        $z5 = 0;

        goto label20;

     label19:
        $z5 = 0;

     label20:
        if $z5 != 0 goto label21;

        throw r36;

     label21:
        if r35 == null goto label22;

        $z6 = 1;

        goto label23;

     label22:
        $z6 = 0;

     label23:
        $r18 = staticinvoke <kotlin.coroutines.jvm.internal.Boxing: java.lang.Boolean boxBoolean(boolean)>($z6);

        $r30.<androidx.datastore.core.MultiProcessDataStore$tryGetReadFileLock$1: java.lang.Object L$0> = $r31;

        $r30.<androidx.datastore.core.MultiProcessDataStore$tryGetReadFileLock$1: java.lang.Object L$1> = r33;

        $r30.<androidx.datastore.core.MultiProcessDataStore$tryGetReadFileLock$1: java.lang.Object L$2> = r35;

        $r30.<androidx.datastore.core.MultiProcessDataStore$tryGetReadFileLock$1: boolean Z$0> = z3;

        $r30.<androidx.datastore.core.MultiProcessDataStore$tryGetReadFileLock$1: int label> = 2;

        $r37 = interfaceinvoke r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r18, $r30);

     label24:
        if $r37 != r9 goto label27;

        return r9;

     label25:
        z3 = $r30.<androidx.datastore.core.MultiProcessDataStore$tryGetReadFileLock$1: boolean Z$0>;

        $r11 = $r30.<androidx.datastore.core.MultiProcessDataStore$tryGetReadFileLock$1: java.lang.Object L$2>;

        r35 = (java.nio.channels.FileLock) $r11;

        $r12 = $r30.<androidx.datastore.core.MultiProcessDataStore$tryGetReadFileLock$1: java.lang.Object L$1>;

        r33 = (java.io.Closeable) $r12;

        $r13 = $r30.<androidx.datastore.core.MultiProcessDataStore$tryGetReadFileLock$1: java.lang.Object L$0>;

        $r31 = (kotlinx.coroutines.sync.Mutex) $r13;

     label26:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r8);

        $r37 = $r8;

     label27:
        r38 = $r37;

     label28:
        if r35 == null goto label29;

        virtualinvoke r35.<java.nio.channels.FileLock: void release()>();

        goto label29;

     label29:
        r4 = r38;

     label30:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r33, null);

        r6 = r4;

     label31:
        if z3 == 0 goto label32;

        interfaceinvoke $r31.<kotlinx.coroutines.sync.Mutex: void unlock(java.lang.Object)>(null);

     label32:
        return r6;

     label33:
        $r29 := @caughtexception;

        r3 = $r29;

     label34:
        if r35 == null goto label35;

        virtualinvoke r35.<java.nio.channels.FileLock: void release()>();

        goto label35;

     label35:
        throw r3;

     label36:
        $r28 := @caughtexception;

        r39 = $r28;

        r40 = r39;

        throw r39;

     label37:
        $r23 := @caughtexception;

        r41 = $r23;

     label38:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r33, r40);

        throw r41;

     label39:
        $r27 := @caughtexception;

        r5 = $r27;

     label40:
        if z3 == 0 goto label41;

        interfaceinvoke $r31.<kotlinx.coroutines.sync.Mutex: void unlock(java.lang.Object)>(null);

     label41:
        throw r5;

     label42:
        $r22 = new java.lang.IllegalStateException;

        specialinvoke $r22.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r22;

        catch java.io.IOException from label15 to label16 with label17;
        catch java.lang.Throwable from label15 to label24 with label33;
        catch java.lang.Throwable from label26 to label28 with label33;
        catch java.lang.Throwable from label33 to label34 with label33;
        catch java.lang.Throwable from label14 to label24 with label36;
        catch java.lang.Throwable from label26 to label30 with label36;
        catch java.lang.Throwable from label33 to label36 with label36;
        catch java.lang.Throwable from label36 to label37 with label37;
        catch java.lang.Throwable from label37 to label38 with label37;
        catch java.lang.Throwable from label04 to label07 with label39;
        catch java.lang.Throwable from label09 to label11 with label39;
        catch java.lang.Throwable from label13 to label24 with label39;
        catch java.lang.Throwable from label26 to label31 with label39;
        catch java.lang.Throwable from label33 to label39 with label39;
        catch java.lang.Throwable from label39 to label40 with label39;
    }

    private final java.lang.Object withTryLock(kotlinx.coroutines.sync.Mutex, java.lang.Object, kotlin.jvm.functions.Function1)
    {
        androidx.datastore.core.MultiProcessDataStore r0;
        kotlinx.coroutines.sync.Mutex $r1;
        java.lang.Object r2, r6;
        kotlin.jvm.functions.Function1 r3;
        boolean z1;
        java.lang.Boolean $r4;
        java.lang.Throwable $r5, r7;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore;

        $r1 := @parameter0: kotlinx.coroutines.sync.Mutex;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: kotlin.jvm.functions.Function1;

        z1 = interfaceinvoke $r1.<kotlinx.coroutines.sync.Mutex: boolean tryLock(java.lang.Object)>(r2);

     label1:
        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        r6 = interfaceinvoke r3.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

     label2:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        if z1 == 0 goto label3;

        interfaceinvoke $r1.<kotlinx.coroutines.sync.Mutex: void unlock(java.lang.Object)>(r2);

     label3:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        return r6;

     label4:
        $r5 := @caughtexception;

        r7 = $r5;

     label5:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        if z1 == 0 goto label6;

        interfaceinvoke $r1.<kotlinx.coroutines.sync.Mutex: void unlock(java.lang.Object)>(r2);

     label6:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw r7;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    static java.lang.Object withTryLock$default(androidx.datastore.core.MultiProcessDataStore, kotlinx.coroutines.sync.Mutex, java.lang.Object, kotlin.jvm.functions.Function1, int, java.lang.Object)
    {
        androidx.datastore.core.MultiProcessDataStore $r0;
        kotlinx.coroutines.sync.Mutex $r1;
        kotlin.jvm.functions.Function1 r2;
        int $i0, $i1;
        java.lang.Boolean $r3;
        java.lang.Throwable $r4, r8;
        java.lang.Object r5, r6, r7;
        boolean z1;

        $r0 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        $r1 := @parameter1: kotlinx.coroutines.sync.Mutex;

        r5 := @parameter2: java.lang.Object;

        r2 := @parameter3: kotlin.jvm.functions.Function1;

        $i1 := @parameter4: int;

        r6 := @parameter5: java.lang.Object;

        $i0 = $i1 & 1;

        if $i0 == 0 goto label1;

        r5 = null;

     label1:
        z1 = interfaceinvoke $r1.<kotlinx.coroutines.sync.Mutex: boolean tryLock(java.lang.Object)>(r5);

     label2:
        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        r7 = interfaceinvoke r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

     label3:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        if z1 == 0 goto label4;

        interfaceinvoke $r1.<kotlinx.coroutines.sync.Mutex: void unlock(java.lang.Object)>(r5);

     label4:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        return r7;

     label5:
        $r4 := @caughtexception;

        r8 = $r4;

     label6:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        if z1 == 0 goto label7;

        interfaceinvoke $r1.<kotlinx.coroutines.sync.Mutex: void unlock(java.lang.Object)>(r5);

     label7:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw r8;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public static final java.lang.Object access$handleRead(androidx.datastore.core.MultiProcessDataStore, androidx.datastore.core.Message$Read, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore $r0;
        androidx.datastore.core.Message$Read r1;
        kotlin.coroutines.Continuation $r2;
        java.lang.Object $r3;

        $r0 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        r1 := @parameter1: androidx.datastore.core.Message$Read;

        $r2 := @parameter2: kotlin.coroutines.Continuation;

        $r3 = specialinvoke $r0.<androidx.datastore.core.MultiProcessDataStore: java.lang.Object handleRead(androidx.datastore.core.Message$Read,kotlin.coroutines.Continuation)>(r1, $r2);

        return $r3;
    }

    public static final java.lang.Object access$handleUpdate(androidx.datastore.core.MultiProcessDataStore, androidx.datastore.core.Message$Update, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore $r0;
        androidx.datastore.core.Message$Update r1;
        kotlin.coroutines.Continuation $r2;
        java.lang.Object $r3;

        $r0 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        r1 := @parameter1: androidx.datastore.core.Message$Update;

        $r2 := @parameter2: kotlin.coroutines.Continuation;

        $r3 = specialinvoke $r0.<androidx.datastore.core.MultiProcessDataStore: java.lang.Object handleUpdate(androidx.datastore.core.Message$Update,kotlin.coroutines.Continuation)>(r1, $r2);

        return $r3;
    }

    public static final java.lang.Object access$readAndInitOrPropagateAndThrowFailure(androidx.datastore.core.MultiProcessDataStore, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore $r0;
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2;

        $r0 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        $r2 = specialinvoke $r0.<androidx.datastore.core.MultiProcessDataStore: java.lang.Object readAndInitOrPropagateAndThrowFailure(kotlin.coroutines.Continuation)>($r1);

        return $r2;
    }

    public static final java.lang.Object access$readAndInitOrPropagateFailure(androidx.datastore.core.MultiProcessDataStore, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore $r0;
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2;

        $r0 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        $r2 = specialinvoke $r0.<androidx.datastore.core.MultiProcessDataStore: java.lang.Object readAndInitOrPropagateFailure(kotlin.coroutines.Continuation)>($r1);

        return $r2;
    }

    public static final java.lang.Object access$readAndInit(androidx.datastore.core.MultiProcessDataStore, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore $r0;
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2;

        $r0 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        $r2 = specialinvoke $r0.<androidx.datastore.core.MultiProcessDataStore: java.lang.Object readAndInit(kotlin.coroutines.Continuation)>($r1);

        return $r2;
    }

    public static final java.lang.Object access$readDataOrHandleCorruption(androidx.datastore.core.MultiProcessDataStore, boolean, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore $r0;
        boolean z0;
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2;

        $r0 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        z0 := @parameter1: boolean;

        $r1 := @parameter2: kotlin.coroutines.Continuation;

        $r2 = specialinvoke $r0.<androidx.datastore.core.MultiProcessDataStore: java.lang.Object readDataOrHandleCorruption(boolean,kotlin.coroutines.Continuation)>(z0, $r1);

        return $r2;
    }

    public static final java.lang.Object access$readDataFromFileOrDefault(androidx.datastore.core.MultiProcessDataStore, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore $r0;
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2;

        $r0 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        $r2 = specialinvoke $r0.<androidx.datastore.core.MultiProcessDataStore: java.lang.Object readDataFromFileOrDefault(kotlin.coroutines.Continuation)>($r1);

        return $r2;
    }

    public static final androidx.datastore.core.SharedCounter access$getSharedCounter(androidx.datastore.core.MultiProcessDataStore)
    {
        androidx.datastore.core.MultiProcessDataStore $r0;
        androidx.datastore.core.SharedCounter $r1;

        $r0 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        $r1 = specialinvoke $r0.<androidx.datastore.core.MultiProcessDataStore: androidx.datastore.core.SharedCounter getSharedCounter()>();

        return $r1;
    }

    public static final int access$getINVALID_VERSION$p(androidx.datastore.core.MultiProcessDataStore)
    {
        androidx.datastore.core.MultiProcessDataStore $r0;
        int $i0;

        $r0 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        $i0 = $r0.<androidx.datastore.core.MultiProcessDataStore: int INVALID_VERSION>;

        return $i0;
    }

    public static final java.lang.Object access$doWithWriteFileLock(androidx.datastore.core.MultiProcessDataStore, boolean, kotlin.jvm.functions.Function1, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore $r0;
        boolean z0;
        kotlin.jvm.functions.Function1 r1;
        kotlin.coroutines.Continuation $r2;
        java.lang.Object $r3;

        $r0 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        z0 := @parameter1: boolean;

        r1 := @parameter2: kotlin.jvm.functions.Function1;

        $r2 := @parameter3: kotlin.coroutines.Continuation;

        $r3 = specialinvoke $r0.<androidx.datastore.core.MultiProcessDataStore: java.lang.Object doWithWriteFileLock(boolean,kotlin.jvm.functions.Function1,kotlin.coroutines.Continuation)>(z0, r1, $r2);

        return $r3;
    }

    public static final java.lang.Object access$readData(androidx.datastore.core.MultiProcessDataStore, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore $r0;
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2;

        $r0 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        $r2 = specialinvoke $r0.<androidx.datastore.core.MultiProcessDataStore: java.lang.Object readData(kotlin.coroutines.Continuation)>($r1);

        return $r2;
    }

    public static final java.lang.Object access$transformAndWrite(androidx.datastore.core.MultiProcessDataStore, kotlin.jvm.functions.Function2, kotlin.coroutines.CoroutineContext, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore $r0;
        kotlin.jvm.functions.Function2 r1;
        kotlin.coroutines.CoroutineContext r2;
        kotlin.coroutines.Continuation $r3;
        java.lang.Object $r4;

        $r0 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        r1 := @parameter1: kotlin.jvm.functions.Function2;

        r2 := @parameter2: kotlin.coroutines.CoroutineContext;

        $r3 := @parameter3: kotlin.coroutines.Continuation;

        $r4 = specialinvoke $r0.<androidx.datastore.core.MultiProcessDataStore: java.lang.Object transformAndWrite(kotlin.jvm.functions.Function2,kotlin.coroutines.CoroutineContext,kotlin.coroutines.Continuation)>(r1, r2, $r3);

        return $r4;
    }

    public static final kotlinx.coroutines.flow.MutableStateFlow access$getDownstreamFlow$p(androidx.datastore.core.MultiProcessDataStore)
    {
        androidx.datastore.core.MultiProcessDataStore $r0;
        kotlinx.coroutines.flow.MutableStateFlow $r1;

        $r0 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        $r1 = $r0.<androidx.datastore.core.MultiProcessDataStore: kotlinx.coroutines.flow.MutableStateFlow downstreamFlow>;

        return $r1;
    }

    public static final java.lang.Object access$getWriteFileLock(androidx.datastore.core.MultiProcessDataStore, kotlin.jvm.functions.Function1, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore $r0;
        kotlin.jvm.functions.Function1 r1;
        kotlin.coroutines.Continuation $r2;
        java.lang.Object $r3;

        $r0 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        r1 := @parameter1: kotlin.jvm.functions.Function1;

        $r2 := @parameter2: kotlin.coroutines.Continuation;

        $r3 = specialinvoke $r0.<androidx.datastore.core.MultiProcessDataStore: java.lang.Object getWriteFileLock(kotlin.jvm.functions.Function1,kotlin.coroutines.Continuation)>(r1, $r2);

        return $r3;
    }

    public static final java.lang.Object access$tryGetReadFileLock(androidx.datastore.core.MultiProcessDataStore, kotlin.jvm.functions.Function2, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore $r0;
        kotlin.jvm.functions.Function2 r1;
        kotlin.coroutines.Continuation $r2;
        java.lang.Object $r3;

        $r0 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        r1 := @parameter1: kotlin.jvm.functions.Function2;

        $r2 := @parameter2: kotlin.coroutines.Continuation;

        $r3 = specialinvoke $r0.<androidx.datastore.core.MultiProcessDataStore: java.lang.Object tryGetReadFileLock(kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation)>(r1, $r2);

        return $r3;
    }

    public static final kotlinx.coroutines.sync.Mutex access$getInitTaskLock$cp()
    {
        kotlinx.coroutines.sync.Mutex $r0;

        $r0 = <androidx.datastore.core.MultiProcessDataStore: kotlinx.coroutines.sync.Mutex initTaskLock>;

        return $r0;
    }

    public static final java.util.List access$getInitTasks$p(androidx.datastore.core.MultiProcessDataStore)
    {
        androidx.datastore.core.MultiProcessDataStore $r0;
        java.util.List $r1;

        $r0 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        $r1 = $r0.<androidx.datastore.core.MultiProcessDataStore: java.util.List initTasks>;

        return $r1;
    }

    public static final void access$setInitTasks$p(androidx.datastore.core.MultiProcessDataStore, java.util.List)
    {
        androidx.datastore.core.MultiProcessDataStore $r0;
        java.util.List r1;

        $r0 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        r1 := @parameter1: java.util.List;

        $r0.<androidx.datastore.core.MultiProcessDataStore: java.util.List initTasks> = r1;

        return;
    }

    public static final kotlinx.coroutines.CoroutineScope access$getScope$p(androidx.datastore.core.MultiProcessDataStore)
    {
        androidx.datastore.core.MultiProcessDataStore $r0;
        kotlinx.coroutines.CoroutineScope $r1;

        $r0 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        $r1 = $r0.<androidx.datastore.core.MultiProcessDataStore: kotlinx.coroutines.CoroutineScope scope>;

        return $r1;
    }

    public static final androidx.datastore.core.SimpleActor access$getReadActor$p(androidx.datastore.core.MultiProcessDataStore)
    {
        androidx.datastore.core.MultiProcessDataStore $r0;
        androidx.datastore.core.SimpleActor $r1;

        $r0 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        $r1 = $r0.<androidx.datastore.core.MultiProcessDataStore: androidx.datastore.core.SimpleActor readActor>;

        return $r1;
    }

    public static final java.lang.String access$getBUG_MESSAGE$p(androidx.datastore.core.MultiProcessDataStore)
    {
        androidx.datastore.core.MultiProcessDataStore $r0;
        java.lang.String $r1;

        $r0 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        $r1 = $r0.<androidx.datastore.core.MultiProcessDataStore: java.lang.String BUG_MESSAGE>;

        return $r1;
    }

    public static final java.io.File access$fileWithSuffix(androidx.datastore.core.MultiProcessDataStore, java.lang.String)
    {
        androidx.datastore.core.MultiProcessDataStore $r0;
        java.lang.String r1;
        java.io.File $r2;

        $r0 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        r1 := @parameter1: java.lang.String;

        $r2 = specialinvoke $r0.<androidx.datastore.core.MultiProcessDataStore: java.io.File fileWithSuffix(java.lang.String)>(r1);

        return $r2;
    }

    public static final java.lang.String access$getVERSION_SUFFIX$p(androidx.datastore.core.MultiProcessDataStore)
    {
        androidx.datastore.core.MultiProcessDataStore $r0;
        java.lang.String $r1;

        $r0 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        $r1 = $r0.<androidx.datastore.core.MultiProcessDataStore: java.lang.String VERSION_SUFFIX>;

        return $r1;
    }

    public static final void access$createIfNotExists(androidx.datastore.core.MultiProcessDataStore, java.io.File)
    {
        androidx.datastore.core.MultiProcessDataStore $r0;
        java.io.File $r1;

        $r0 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        $r1 := @parameter1: java.io.File;

        specialinvoke $r0.<androidx.datastore.core.MultiProcessDataStore: void createIfNotExists(java.io.File)>($r1);

        return;
    }

    public static final androidx.datastore.core.Storage access$getStorage$p(androidx.datastore.core.MultiProcessDataStore)
    {
        androidx.datastore.core.MultiProcessDataStore $r0;
        androidx.datastore.core.Storage $r1;

        $r0 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        $r1 = $r0.<androidx.datastore.core.MultiProcessDataStore: androidx.datastore.core.Storage storage>;

        return $r1;
    }

    public static final kotlin.jvm.functions.Function0 access$getProduceFile$p(androidx.datastore.core.MultiProcessDataStore)
    {
        androidx.datastore.core.MultiProcessDataStore $r0;
        kotlin.jvm.functions.Function0 $r1;

        $r0 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        $r1 = $r0.<androidx.datastore.core.MultiProcessDataStore: kotlin.jvm.functions.Function0 produceFile>;

        return $r1;
    }

    public static final java.lang.String access$getLOCK_SUFFIX$p(androidx.datastore.core.MultiProcessDataStore)
    {
        androidx.datastore.core.MultiProcessDataStore $r0;
        java.lang.String $r1;

        $r0 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        $r1 = $r0.<androidx.datastore.core.MultiProcessDataStore: java.lang.String LOCK_SUFFIX>;

        return $r1;
    }

    public static final androidx.datastore.core.StorageConnection access$getStorageConnection(androidx.datastore.core.MultiProcessDataStore)
    {
        androidx.datastore.core.MultiProcessDataStore $r0;
        androidx.datastore.core.StorageConnection $r1;

        $r0 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        $r1 = specialinvoke $r0.<androidx.datastore.core.MultiProcessDataStore: androidx.datastore.core.StorageConnection getStorageConnection()>();

        return $r1;
    }

    public static final android.os.FileObserver access$getFileObserver(androidx.datastore.core.MultiProcessDataStore)
    {
        androidx.datastore.core.MultiProcessDataStore $r0;
        android.os.FileObserver $r1;

        $r0 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        $r1 = specialinvoke $r0.<androidx.datastore.core.MultiProcessDataStore: android.os.FileObserver getFileObserver()>();

        return $r1;
    }

    static void <clinit>()
    {
        androidx.datastore.core.MultiProcessDataStore$Companion $r0;
        kotlinx.coroutines.sync.Mutex $r1;

        $r0 = new androidx.datastore.core.MultiProcessDataStore$Companion;

        specialinvoke $r0.<androidx.datastore.core.MultiProcessDataStore$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.datastore.core.MultiProcessDataStore: androidx.datastore.core.MultiProcessDataStore$Companion Companion> = $r0;

        $r1 = staticinvoke <kotlinx.coroutines.sync.MutexKt: kotlinx.coroutines.sync.Mutex Mutex$default(boolean,int,java.lang.Object)>(0, 1, null);

        <androidx.datastore.core.MultiProcessDataStore: kotlinx.coroutines.sync.Mutex initTaskLock> = $r1;

        return;
    }

androidx.datastore.core.MultiProcessDataStore$Companion
    private void <init>()
    {
        androidx.datastore.core.MultiProcessDataStore$Companion r0;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final kotlinx.coroutines.sync.Mutex getInitTaskLock$datastore_core_release()
    {
        androidx.datastore.core.MultiProcessDataStore$Companion r0;
        kotlinx.coroutines.sync.Mutex $r1;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$Companion;

        $r1 = staticinvoke <androidx.datastore.core.MultiProcessDataStore: kotlinx.coroutines.sync.Mutex access$getInitTaskLock$cp()>();

        return $r1;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.datastore.core.MultiProcessDataStore$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.datastore.core.MultiProcessDataStore$Companion: void <init>()>();

        return;
    }

androidx.datastore.core.MultiProcessDataStore$data$1$1
<androidx.datastore.core.MultiProcessDataStore$data$1$1: int label>
<androidx.datastore.core.MultiProcessDataStore$data$1$1: java.lang.Object L$0>
<androidx.datastore.core.MultiProcessDataStore$data$1$1: androidx.datastore.core.State $currentDownStreamFlowState>
<androidx.datastore.core.MultiProcessDataStore$data$1$1: int $latestVersionAtRead>
    void <init>(androidx.datastore.core.State, int, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$data$1$1 r0;
        androidx.datastore.core.State $r1;
        int $i0;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$data$1$1;

        $r1 := @parameter0: androidx.datastore.core.State;

        $i0 := @parameter1: int;

        $r2 := @parameter2: kotlin.coroutines.Continuation;

        r0.<androidx.datastore.core.MultiProcessDataStore$data$1$1: androidx.datastore.core.State $currentDownStreamFlowState> = $r1;

        r0.<androidx.datastore.core.MultiProcessDataStore$data$1$1: int $latestVersionAtRead> = $i0;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.datastore.core.MultiProcessDataStore$data$1$1 r0;
        java.lang.Object $r1, $r4;
        androidx.datastore.core.State r2, $r5, $r6, $r7;
        int $i0, $i1, $i2;
        boolean $z0, $z1, $z2, $z3;
        androidx.datastore.core.Data $r8;
        java.lang.IllegalStateException $r9;
        java.lang.Boolean $r10;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$data$1$1;

        $r1 := @parameter0: java.lang.Object;

        staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.datastore.core.MultiProcessDataStore$data$1$1: int label>;

        tableswitch($i0)
        {
            case 0: goto label1;
            default: goto label8;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r4 = r0.<androidx.datastore.core.MultiProcessDataStore$data$1$1: java.lang.Object L$0>;

        r2 = (androidx.datastore.core.State) $r4;

        $r5 = r0.<androidx.datastore.core.MultiProcessDataStore$data$1$1: androidx.datastore.core.State $currentDownStreamFlowState>;

        $z0 = $r5 instanceof androidx.datastore.core.Data;

        if $z0 == 0 goto label4;

        $z2 = r2 instanceof androidx.datastore.core.Data;

        if $z2 == 0 goto label2;

        $r8 = (androidx.datastore.core.Data) r2;

        $i1 = virtualinvoke $r8.<androidx.datastore.core.Data: int getVersion()>();

        $i2 = r0.<androidx.datastore.core.MultiProcessDataStore$data$1$1: int $latestVersionAtRead>;

        if $i1 >= $i2 goto label3;

     label2:
        $z3 = 1;

        goto label7;

     label3:
        $z3 = 0;

        goto label7;

     label4:
        $r6 = r0.<androidx.datastore.core.MultiProcessDataStore$data$1$1: androidx.datastore.core.State $currentDownStreamFlowState>;

        $z1 = $r6 instanceof androidx.datastore.core.Final;

        if $z1 == 0 goto label5;

        $z3 = 0;

        goto label7;

     label5:
        $r7 = r0.<androidx.datastore.core.MultiProcessDataStore$data$1$1: androidx.datastore.core.State $currentDownStreamFlowState>;

        if r2 != $r7 goto label6;

        $z3 = 1;

        goto label7;

     label6:
        $z3 = 0;

     label7:
        $r10 = staticinvoke <kotlin.coroutines.jvm.internal.Boxing: java.lang.Boolean boxBoolean(boolean)>($z3);

        return $r10;

     label8:
        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r9;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$data$1$1 r0, r3, $r4;
        java.lang.Object r1;
        kotlin.coroutines.Continuation $r2, $r6;
        int $i0;
        androidx.datastore.core.State $r5;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$data$1$1;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r4 = new androidx.datastore.core.MultiProcessDataStore$data$1$1;

        $r5 = r0.<androidx.datastore.core.MultiProcessDataStore$data$1$1: androidx.datastore.core.State $currentDownStreamFlowState>;

        $i0 = r0.<androidx.datastore.core.MultiProcessDataStore$data$1$1: int $latestVersionAtRead>;

        specialinvoke $r4.<androidx.datastore.core.MultiProcessDataStore$data$1$1: void <init>(androidx.datastore.core.State,int,kotlin.coroutines.Continuation)>($r5, $i0, $r2);

        r3 = $r4;

        r3.<androidx.datastore.core.MultiProcessDataStore$data$1$1: java.lang.Object L$0> = r1;

        $r6 = (kotlin.coroutines.Continuation) r3;

        return $r6;
    }

    public final java.lang.Object invoke(androidx.datastore.core.State, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$data$1$1 r0, $r5;
        androidx.datastore.core.State r1;
        kotlin.coroutines.Continuation r2, $r3;
        kotlin.Unit $r4;
        java.lang.Object $r6;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$data$1$1;

        r1 := @parameter0: androidx.datastore.core.State;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = virtualinvoke r0.<androidx.datastore.core.MultiProcessDataStore$data$1$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, r2);

        $r5 = (androidx.datastore.core.MultiProcessDataStore$data$1$1) $r3;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.datastore.core.MultiProcessDataStore$data$1$1: java.lang.Object invokeSuspend(java.lang.Object)>($r4);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.datastore.core.MultiProcessDataStore$data$1$1 r0;
        java.lang.Object r1, r2, $r5;
        kotlin.coroutines.Continuation $r3;
        androidx.datastore.core.State $r4;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$data$1$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (androidx.datastore.core.State) r1;

        $r3 = (kotlin.coroutines.Continuation) r2;

        $r5 = virtualinvoke r0.<androidx.datastore.core.MultiProcessDataStore$data$1$1: java.lang.Object invoke(androidx.datastore.core.State,kotlin.coroutines.Continuation)>($r4, $r3);

        return $r5;
    }

androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1
<androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: java.lang.Object result>
<androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: int label>
<androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: java.lang.Object L$0>
<androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2 this$0>
    public void <init>(androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1 r0;
        androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2 r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1;

        r1 := @parameter0: androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2 this$0> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>($r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1 r0;
        java.lang.Object $r1, $r4;
        int $i0, $i1;
        kotlin.coroutines.Continuation $r2;
        androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2 $r3;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: java.lang.Object result> = $r1;

        $i0 = r0.<androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: int label>;

        $i1 = $i0 | -2147483648;

        r0.<androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: int label> = $i1;

        $r3 = r0.<androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2 this$0>;

        $r2 = (kotlin.coroutines.Continuation) r0;

        $r4 = virtualinvoke $r3.<androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2: java.lang.Object emit(java.lang.Object,kotlin.coroutines.Continuation)>(null, $r2);

        return $r4;
    }

androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2
<androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2: kotlinx.coroutines.flow.FlowCollector $this_unsafeFlow>
<androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2: androidx.datastore.core.MultiProcessDataStore this$0>
    public void <init>(kotlinx.coroutines.flow.FlowCollector, androidx.datastore.core.MultiProcessDataStore)
    {
        androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2 r0;
        kotlinx.coroutines.flow.FlowCollector $r1;
        androidx.datastore.core.MultiProcessDataStore r2;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2;

        $r1 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        r2 := @parameter1: androidx.datastore.core.MultiProcessDataStore;

        r0.<androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2: kotlinx.coroutines.flow.FlowCollector $this_unsafeFlow> = $r1;

        r0.<androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2: androidx.datastore.core.MultiProcessDataStore this$0> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final java.lang.Object emit(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2 r0;
        java.lang.Object r1, $r3, r4, r5, $r18, $r19;
        kotlin.coroutines.Continuation r2, $r11, r30;
        kotlinx.coroutines.flow.FlowCollector r6;
        androidx.datastore.core.State r7, r8;
        boolean $z1, $z2, $z3, $z4, $z5;
        kotlin.Unit $r10;
        androidx.datastore.core.MultiProcessDataStore $r14;
        java.lang.String $r15, $r16;
        androidx.datastore.core.Data $r17;
        androidx.datastore.core.Final $r20;
        java.lang.Throwable $r21, $r23;
        androidx.datastore.core.ReadException $r22;
        int $i0, $i1, $i2, $i3, $i4;
        androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1 $r25, r26;
        java.lang.IllegalStateException r27, r29;
        kotlin.NoWhenBranchMatchedException r28;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $z1 = r2 instanceof androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1;

        if $z1 == 0 goto label01;

        $r25 = (androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1) r2;

        $i0 = $r25.<androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: int label>;

        $i1 = $i0 & -2147483648;

        if $i1 == 0 goto label01;

        $i2 = $r25.<androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: int label>;

        $i3 = $i2 - -2147483648;

        $r25.<androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: int label> = $i3;

        goto label02;

     label01:
        r26 = new androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1;

        specialinvoke r26.<androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: void <init>(androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2,kotlin.coroutines.Continuation)>(r0, r2);

        $r25 = r26;

     label02:
        $r3 = $r25.<androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: java.lang.Object result>;

        r4 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i4 = $r25.<androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: int label>;

        tableswitch($i4)
        {
            case 0: goto label03;
            case 1: goto label09;
            default: goto label11;
        };

     label03:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r3);

        r5 = r1;

        r6 = r0.<androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2: kotlinx.coroutines.flow.FlowCollector $this_unsafeFlow>;

        $r11 = (kotlin.coroutines.Continuation) $r25;

        r7 = (androidx.datastore.core.State) r5;

        r8 = r7;

        $z2 = r8 instanceof androidx.datastore.core.ReadException;

        if $z2 == 0 goto label04;

        $r22 = (androidx.datastore.core.ReadException) r7;

        $r23 = virtualinvoke $r22.<androidx.datastore.core.ReadException: java.lang.Throwable getReadException()>();

        throw $r23;

     label04:
        $z3 = r8 instanceof androidx.datastore.core.Final;

        if $z3 == 0 goto label05;

        $r20 = (androidx.datastore.core.Final) r7;

        $r21 = virtualinvoke $r20.<androidx.datastore.core.Final: java.lang.Throwable getFinalException()>();

        throw $r21;

     label05:
        $z4 = r8 instanceof androidx.datastore.core.Data;

        if $z4 == 0 goto label06;

        $r17 = (androidx.datastore.core.Data) r7;

        $r18 = virtualinvoke $r17.<androidx.datastore.core.Data: java.lang.Object getValue()>();

        goto label08;

     label06:
        $z5 = r8 instanceof androidx.datastore.core.UnInitialized;

        if $z5 == 0 goto label07;

        r27 = new java.lang.IllegalStateException;

        $r14 = r0.<androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r15 = staticinvoke <androidx.datastore.core.MultiProcessDataStore: java.lang.String access$getBUG_MESSAGE$p(androidx.datastore.core.MultiProcessDataStore)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r27.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r16);

        throw r27;

     label07:
        r28 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke r28.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        throw r28;

     label08:
        $r25.<androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: int label> = 1;

        r30 = (kotlin.coroutines.Continuation) $r25;

        $r19 = interfaceinvoke r6.<kotlinx.coroutines.flow.FlowCollector: java.lang.Object emit(java.lang.Object,kotlin.coroutines.Continuation)>($r18, r30);

        if $r19 != r4 goto label10;

        return r4;

     label09:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r3);

     label10:
        $r10 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r10;

     label11:
        r29 = new java.lang.IllegalStateException;

        specialinvoke r29.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r29;
    }

androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1
<androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1: kotlinx.coroutines.flow.Flow $this_unsafeTransform$inlined>
<androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1: androidx.datastore.core.MultiProcessDataStore this$0>
    public void <init>(kotlinx.coroutines.flow.Flow, androidx.datastore.core.MultiProcessDataStore)
    {
        androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1 r0;
        kotlinx.coroutines.flow.Flow r1;
        androidx.datastore.core.MultiProcessDataStore r2;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1;

        r1 := @parameter0: kotlinx.coroutines.flow.Flow;

        r2 := @parameter1: androidx.datastore.core.MultiProcessDataStore;

        r0.<androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1: kotlinx.coroutines.flow.Flow $this_unsafeTransform$inlined> = r1;

        r0.<androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1: androidx.datastore.core.MultiProcessDataStore this$0> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1 r0;
        kotlinx.coroutines.flow.FlowCollector r1, $r7;
        kotlin.coroutines.Continuation $r2;
        androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2 $r4;
        androidx.datastore.core.MultiProcessDataStore $r5;
        kotlinx.coroutines.flow.Flow $r6;
        java.lang.Object $r8, $r9;
        kotlin.Unit $r10;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1;

        r1 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r6 = r0.<androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1: kotlinx.coroutines.flow.Flow $this_unsafeTransform$inlined>;

        $r4 = new androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2;

        $r5 = r0.<androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1: androidx.datastore.core.MultiProcessDataStore this$0>;

        specialinvoke $r4.<androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2: void <init>(kotlinx.coroutines.flow.FlowCollector,androidx.datastore.core.MultiProcessDataStore)>(r1, $r5);

        $r7 = (kotlinx.coroutines.flow.FlowCollector) $r4;

        $r8 = interfaceinvoke $r6.<kotlinx.coroutines.flow.Flow: java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)>($r7, $r2);

        $r9 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r8 != $r9 goto label1;

        return $r8;

     label1:
        $r10 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r10;
    }

androidx.datastore.core.MultiProcessDataStore$data$1$latestVersionAtRead$1
<androidx.datastore.core.MultiProcessDataStore$data$1$latestVersionAtRead$1: int label>
<androidx.datastore.core.MultiProcessDataStore$data$1$latestVersionAtRead$1: androidx.datastore.core.MultiProcessDataStore this$0>
    void <init>(androidx.datastore.core.MultiProcessDataStore, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$data$1$latestVersionAtRead$1 r0;
        androidx.datastore.core.MultiProcessDataStore $r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$data$1$latestVersionAtRead$1;

        $r1 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.datastore.core.MultiProcessDataStore$data$1$latestVersionAtRead$1: androidx.datastore.core.MultiProcessDataStore this$0> = $r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.datastore.core.MultiProcessDataStore$data$1$latestVersionAtRead$1 r0;
        java.lang.Object $r1;
        int $i0, $i1;
        androidx.datastore.core.MultiProcessDataStore $r3;
        androidx.datastore.core.SharedCounter $r4;
        java.lang.Integer $r5;
        java.lang.IllegalStateException $r6;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$data$1$latestVersionAtRead$1;

        $r1 := @parameter0: java.lang.Object;

        staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.datastore.core.MultiProcessDataStore$data$1$latestVersionAtRead$1: int label>;

        tableswitch($i0)
        {
            case 0: goto label1;
            default: goto label2;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r3 = r0.<androidx.datastore.core.MultiProcessDataStore$data$1$latestVersionAtRead$1: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r4 = staticinvoke <androidx.datastore.core.MultiProcessDataStore: androidx.datastore.core.SharedCounter access$getSharedCounter(androidx.datastore.core.MultiProcessDataStore)>($r3);

        $i1 = virtualinvoke $r4.<androidx.datastore.core.SharedCounter: int getValue()>();

        $r5 = staticinvoke <kotlin.coroutines.jvm.internal.Boxing: java.lang.Integer boxInt(int)>($i1);

        return $r5;

     label2:
        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r6;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$data$1$latestVersionAtRead$1 r0, $r3;
        java.lang.Object r1;
        kotlin.coroutines.Continuation $r2, $r5;
        androidx.datastore.core.MultiProcessDataStore $r4;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$data$1$latestVersionAtRead$1;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = new androidx.datastore.core.MultiProcessDataStore$data$1$latestVersionAtRead$1;

        $r4 = r0.<androidx.datastore.core.MultiProcessDataStore$data$1$latestVersionAtRead$1: androidx.datastore.core.MultiProcessDataStore this$0>;

        specialinvoke $r3.<androidx.datastore.core.MultiProcessDataStore$data$1$latestVersionAtRead$1: void <init>(androidx.datastore.core.MultiProcessDataStore,kotlin.coroutines.Continuation)>($r4, $r2);

        $r5 = (kotlin.coroutines.Continuation) $r3;

        return $r5;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$data$1$latestVersionAtRead$1 r0, $r5;
        kotlinx.coroutines.CoroutineScope r1;
        kotlin.coroutines.Continuation r2, $r3;
        kotlin.Unit $r4;
        java.lang.Object $r6;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$data$1$latestVersionAtRead$1;

        r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = virtualinvoke r0.<androidx.datastore.core.MultiProcessDataStore$data$1$latestVersionAtRead$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, r2);

        $r5 = (androidx.datastore.core.MultiProcessDataStore$data$1$latestVersionAtRead$1) $r3;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.datastore.core.MultiProcessDataStore$data$1$latestVersionAtRead$1: java.lang.Object invokeSuspend(java.lang.Object)>($r4);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.datastore.core.MultiProcessDataStore$data$1$latestVersionAtRead$1 r0;
        java.lang.Object r1, r2, $r5;
        kotlin.coroutines.Continuation $r3;
        kotlinx.coroutines.CoroutineScope $r4;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$data$1$latestVersionAtRead$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (kotlinx.coroutines.CoroutineScope) r1;

        $r3 = (kotlin.coroutines.Continuation) r2;

        $r5 = virtualinvoke r0.<androidx.datastore.core.MultiProcessDataStore$data$1$latestVersionAtRead$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)>($r4, $r3);

        return $r5;
    }

androidx.datastore.core.MultiProcessDataStore$data$1
<androidx.datastore.core.MultiProcessDataStore$data$1: int label>
<androidx.datastore.core.MultiProcessDataStore$data$1: java.lang.Object L$0>
<androidx.datastore.core.MultiProcessDataStore$data$1: androidx.datastore.core.MultiProcessDataStore this$0>
    void <init>(androidx.datastore.core.MultiProcessDataStore, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$data$1 r0;
        androidx.datastore.core.MultiProcessDataStore $r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$data$1;

        $r1 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.datastore.core.MultiProcessDataStore$data$1: androidx.datastore.core.MultiProcessDataStore this$0> = $r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.datastore.core.MultiProcessDataStore$data$1 r0;
        java.lang.Object $r1, r5, $r7, $r11, $r16, $r26, $r35;
        int i0, $i1, $i2;
        androidx.datastore.core.State r2;
        kotlinx.coroutines.flow.Flow $r3, $r29, $r33;
        androidx.datastore.core.MultiProcessDataStore r4, $r9, $r12, $r17, $r21, $r27;
        kotlin.Unit $r6;
        java.lang.Number $r8;
        kotlinx.coroutines.flow.MutableStateFlow $r10, $r28;
        boolean $z3;
        androidx.datastore.core.SimpleActor $r13;
        androidx.datastore.core.Message$Read $r14;
        androidx.datastore.core.Data $r15;
        kotlinx.coroutines.CoroutineScope $r18;
        kotlin.coroutines.CoroutineContext $r19;
        androidx.datastore.core.MultiProcessDataStore$data$1$latestVersionAtRead$1 $r20;
        kotlin.jvm.functions.Function2 $r22, $r31;
        kotlin.coroutines.Continuation $r23, $r34;
        java.lang.IllegalStateException $r24;
        kotlinx.coroutines.flow.FlowCollector $r25;
        androidx.datastore.core.MultiProcessDataStore$data$1$1 $r30;
        androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1 $r32;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$data$1;

        $r1 := @parameter0: java.lang.Object;

        r5 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i1 = r0.<androidx.datastore.core.MultiProcessDataStore$data$1: int label>;

        tableswitch($i1)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label6;
            default: goto label8;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r16 = r0.<androidx.datastore.core.MultiProcessDataStore$data$1: java.lang.Object L$0>;

        $r25 = (kotlinx.coroutines.flow.FlowCollector) $r16;

        $r17 = r0.<androidx.datastore.core.MultiProcessDataStore$data$1: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r18 = staticinvoke <androidx.datastore.core.MultiProcessDataStore: kotlinx.coroutines.CoroutineScope access$getScope$p(androidx.datastore.core.MultiProcessDataStore)>($r17);

        $r19 = interfaceinvoke $r18.<kotlinx.coroutines.CoroutineScope: kotlin.coroutines.CoroutineContext getCoroutineContext()>();

        $r20 = new androidx.datastore.core.MultiProcessDataStore$data$1$latestVersionAtRead$1;

        $r21 = r0.<androidx.datastore.core.MultiProcessDataStore$data$1: androidx.datastore.core.MultiProcessDataStore this$0>;

        specialinvoke $r20.<androidx.datastore.core.MultiProcessDataStore$data$1$latestVersionAtRead$1: void <init>(androidx.datastore.core.MultiProcessDataStore,kotlin.coroutines.Continuation)>($r21, null);

        $r22 = (kotlin.jvm.functions.Function2) $r20;

        $r23 = (kotlin.coroutines.Continuation) r0;

        r0.<androidx.datastore.core.MultiProcessDataStore$data$1: java.lang.Object L$0> = $r25;

        r0.<androidx.datastore.core.MultiProcessDataStore$data$1: int label> = 1;

        $r26 = staticinvoke <kotlinx.coroutines.BuildersKt: java.lang.Object withContext(kotlin.coroutines.CoroutineContext,kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation)>($r19, $r22, $r23);

        if $r26 != r5 goto label3;

        return r5;

     label2:
        $r7 = r0.<androidx.datastore.core.MultiProcessDataStore$data$1: java.lang.Object L$0>;

        $r25 = (kotlinx.coroutines.flow.FlowCollector) $r7;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r26 = $r1;

     label3:
        $r8 = (java.lang.Number) $r26;

        i0 = virtualinvoke $r8.<java.lang.Number: int intValue()>();

        $r9 = r0.<androidx.datastore.core.MultiProcessDataStore$data$1: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r10 = staticinvoke <androidx.datastore.core.MultiProcessDataStore: kotlinx.coroutines.flow.MutableStateFlow access$getDownstreamFlow$p(androidx.datastore.core.MultiProcessDataStore)>($r9);

        $r11 = interfaceinvoke $r10.<kotlinx.coroutines.flow.MutableStateFlow: java.lang.Object getValue()>();

        r2 = (androidx.datastore.core.State) $r11;

        $z3 = r2 instanceof androidx.datastore.core.Data;

        if $z3 == 0 goto label4;

        $r15 = (androidx.datastore.core.Data) r2;

        $i2 = virtualinvoke $r15.<androidx.datastore.core.Data: int getVersion()>();

        if $i2 >= i0 goto label5;

     label4:
        $r12 = r0.<androidx.datastore.core.MultiProcessDataStore$data$1: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r13 = staticinvoke <androidx.datastore.core.MultiProcessDataStore: androidx.datastore.core.SimpleActor access$getReadActor$p(androidx.datastore.core.MultiProcessDataStore)>($r12);

        $r14 = new androidx.datastore.core.Message$Read;

        specialinvoke $r14.<androidx.datastore.core.Message$Read: void <init>(androidx.datastore.core.State)>(r2);

        virtualinvoke $r13.<androidx.datastore.core.SimpleActor: void offer(java.lang.Object)>($r14);

     label5:
        $r27 = r0.<androidx.datastore.core.MultiProcessDataStore$data$1: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r28 = staticinvoke <androidx.datastore.core.MultiProcessDataStore: kotlinx.coroutines.flow.MutableStateFlow access$getDownstreamFlow$p(androidx.datastore.core.MultiProcessDataStore)>($r27);

        $r29 = (kotlinx.coroutines.flow.Flow) $r28;

        $r30 = new androidx.datastore.core.MultiProcessDataStore$data$1$1;

        specialinvoke $r30.<androidx.datastore.core.MultiProcessDataStore$data$1$1: void <init>(androidx.datastore.core.State,int,kotlin.coroutines.Continuation)>(r2, i0, null);

        $r31 = (kotlin.jvm.functions.Function2) $r30;

        $r3 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow dropWhile(kotlinx.coroutines.flow.Flow,kotlin.jvm.functions.Function2)>($r29, $r31);

        r4 = r0.<androidx.datastore.core.MultiProcessDataStore$data$1: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r32 = new androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1;

        specialinvoke $r32.<androidx.datastore.core.MultiProcessDataStore$data$1$invokeSuspend$$inlined$map$1: void <init>(kotlinx.coroutines.flow.Flow,androidx.datastore.core.MultiProcessDataStore)>($r3, r4);

        $r33 = (kotlinx.coroutines.flow.Flow) $r32;

        $r34 = (kotlin.coroutines.Continuation) r0;

        r0.<androidx.datastore.core.MultiProcessDataStore$data$1: java.lang.Object L$0> = null;

        r0.<androidx.datastore.core.MultiProcessDataStore$data$1: int label> = 2;

        $r35 = staticinvoke <kotlinx.coroutines.flow.FlowKt: java.lang.Object emitAll(kotlinx.coroutines.flow.FlowCollector,kotlinx.coroutines.flow.Flow,kotlin.coroutines.Continuation)>($r25, $r33, $r34);

        if $r35 != r5 goto label7;

        return r5;

     label6:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label7:
        $r6 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r6;

     label8:
        $r24 = new java.lang.IllegalStateException;

        specialinvoke $r24.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r24;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$data$1 r0, r3, $r4;
        java.lang.Object r1;
        kotlin.coroutines.Continuation $r2, $r6;
        androidx.datastore.core.MultiProcessDataStore $r5;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$data$1;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r4 = new androidx.datastore.core.MultiProcessDataStore$data$1;

        $r5 = r0.<androidx.datastore.core.MultiProcessDataStore$data$1: androidx.datastore.core.MultiProcessDataStore this$0>;

        specialinvoke $r4.<androidx.datastore.core.MultiProcessDataStore$data$1: void <init>(androidx.datastore.core.MultiProcessDataStore,kotlin.coroutines.Continuation)>($r5, $r2);

        r3 = $r4;

        r3.<androidx.datastore.core.MultiProcessDataStore$data$1: java.lang.Object L$0> = r1;

        $r6 = (kotlin.coroutines.Continuation) r3;

        return $r6;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$data$1 r0, $r5;
        kotlinx.coroutines.flow.FlowCollector r1;
        kotlin.coroutines.Continuation r2, $r3;
        kotlin.Unit $r4;
        java.lang.Object $r6;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$data$1;

        r1 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = virtualinvoke r0.<androidx.datastore.core.MultiProcessDataStore$data$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, r2);

        $r5 = (androidx.datastore.core.MultiProcessDataStore$data$1) $r3;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.datastore.core.MultiProcessDataStore$data$1: java.lang.Object invokeSuspend(java.lang.Object)>($r4);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.datastore.core.MultiProcessDataStore$data$1 r0;
        java.lang.Object r1, r2, $r5;
        kotlin.coroutines.Continuation $r3;
        kotlinx.coroutines.flow.FlowCollector $r4;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$data$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (kotlinx.coroutines.flow.FlowCollector) r1;

        $r3 = (kotlin.coroutines.Continuation) r2;

        $r5 = virtualinvoke r0.<androidx.datastore.core.MultiProcessDataStore$data$1: java.lang.Object invoke(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)>($r4, $r3);

        return $r5;
    }

androidx.datastore.core.MultiProcessDataStore$doWithWriteFileLock$2
<androidx.datastore.core.MultiProcessDataStore$doWithWriteFileLock$2: int label>
<androidx.datastore.core.MultiProcessDataStore$doWithWriteFileLock$2: kotlin.jvm.functions.Function1 $block>
    void <init>(kotlin.jvm.functions.Function1, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$doWithWriteFileLock$2 r0;
        kotlin.jvm.functions.Function1 $r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$doWithWriteFileLock$2;

        $r1 := @parameter0: kotlin.jvm.functions.Function1;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.datastore.core.MultiProcessDataStore$doWithWriteFileLock$2: kotlin.jvm.functions.Function1 $block> = $r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(1, $r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.datastore.core.MultiProcessDataStore$doWithWriteFileLock$2 r0;
        java.lang.Object $r1, r2, $r5;
        int $i0;
        kotlin.jvm.functions.Function1 $r3;
        java.lang.IllegalStateException $r4;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$doWithWriteFileLock$2;

        $r1 := @parameter0: java.lang.Object;

        r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.datastore.core.MultiProcessDataStore$doWithWriteFileLock$2: int label>;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label4;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r3 = r0.<androidx.datastore.core.MultiProcessDataStore$doWithWriteFileLock$2: kotlin.jvm.functions.Function1 $block>;

        r0.<androidx.datastore.core.MultiProcessDataStore$doWithWriteFileLock$2: int label> = 1;

        $r5 = interfaceinvoke $r3.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r0);

        if $r5 != r2 goto label3;

        return r2;

     label2:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r5 = $r1;

     label3:
        return $r5;

     label4:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r4;
    }

    public final kotlin.coroutines.Continuation create(kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$doWithWriteFileLock$2 r0, $r2;
        kotlin.coroutines.Continuation $r1, $r4;
        kotlin.jvm.functions.Function1 $r3;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$doWithWriteFileLock$2;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $r2 = new androidx.datastore.core.MultiProcessDataStore$doWithWriteFileLock$2;

        $r3 = r0.<androidx.datastore.core.MultiProcessDataStore$doWithWriteFileLock$2: kotlin.jvm.functions.Function1 $block>;

        specialinvoke $r2.<androidx.datastore.core.MultiProcessDataStore$doWithWriteFileLock$2: void <init>(kotlin.jvm.functions.Function1,kotlin.coroutines.Continuation)>($r3, $r1);

        $r4 = (kotlin.coroutines.Continuation) $r2;

        return $r4;
    }

    public final java.lang.Object invoke(kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$doWithWriteFileLock$2 r0, $r4;
        kotlin.coroutines.Continuation r1, $r2;
        kotlin.Unit $r3;
        java.lang.Object $r5;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$doWithWriteFileLock$2;

        r1 := @parameter0: kotlin.coroutines.Continuation;

        $r2 = virtualinvoke r0.<androidx.datastore.core.MultiProcessDataStore$doWithWriteFileLock$2: kotlin.coroutines.Continuation create(kotlin.coroutines.Continuation)>(r1);

        $r4 = (androidx.datastore.core.MultiProcessDataStore$doWithWriteFileLock$2) $r2;

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r5 = virtualinvoke $r4.<androidx.datastore.core.MultiProcessDataStore$doWithWriteFileLock$2: java.lang.Object invokeSuspend(java.lang.Object)>($r3);

        return $r5;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.datastore.core.MultiProcessDataStore$doWithWriteFileLock$2 r0;
        java.lang.Object r1, $r3;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$doWithWriteFileLock$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = (kotlin.coroutines.Continuation) r1;

        $r3 = virtualinvoke r0.<androidx.datastore.core.MultiProcessDataStore$doWithWriteFileLock$2: java.lang.Object invoke(kotlin.coroutines.Continuation)>($r2);

        return $r3;
    }

androidx.datastore.core.MultiProcessDataStore$file$2
<androidx.datastore.core.MultiProcessDataStore$file$2: androidx.datastore.core.MultiProcessDataStore this$0>
    void <init>(androidx.datastore.core.MultiProcessDataStore)
    {
        androidx.datastore.core.MultiProcessDataStore$file$2 r0;
        androidx.datastore.core.MultiProcessDataStore $r1;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$file$2;

        $r1 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        r0.<androidx.datastore.core.MultiProcessDataStore$file$2: androidx.datastore.core.MultiProcessDataStore this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final java.io.File invoke()
    {
        androidx.datastore.core.MultiProcessDataStore$file$2 r0;
        androidx.datastore.core.MultiProcessDataStore $r1;
        kotlin.jvm.functions.Function0 $r2;
        java.lang.Object $r3;
        java.io.File $r4;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$file$2;

        $r1 = r0.<androidx.datastore.core.MultiProcessDataStore$file$2: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r2 = staticinvoke <androidx.datastore.core.MultiProcessDataStore: kotlin.jvm.functions.Function0 access$getProduceFile$p(androidx.datastore.core.MultiProcessDataStore)>($r1);

        $r3 = interfaceinvoke $r2.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        $r4 = (java.io.File) $r3;

        return $r4;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.datastore.core.MultiProcessDataStore$file$2 r0;
        java.io.File $r1;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$file$2;

        $r1 = virtualinvoke r0.<androidx.datastore.core.MultiProcessDataStore$file$2: java.io.File invoke()>();

        return $r1;
    }

androidx.datastore.core.MultiProcessDataStore$fileObserver$2$1
<androidx.datastore.core.MultiProcessDataStore$fileObserver$2$1: androidx.datastore.core.MultiProcessDataStore this$0>
    void <init>(androidx.datastore.core.MultiProcessDataStore, java.lang.String)
    {
        androidx.datastore.core.MultiProcessDataStore$fileObserver$2$1 r0;
        androidx.datastore.core.MultiProcessDataStore $r1;
        java.lang.String $r2;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$fileObserver$2$1;

        $r1 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        $r2 := @parameter1: java.lang.String;

        r0.<androidx.datastore.core.MultiProcessDataStore$fileObserver$2$1: androidx.datastore.core.MultiProcessDataStore this$0> = $r1;

        specialinvoke r0.<android.os.FileObserver: void <init>(java.lang.String,int)>($r2, 128);

        return;
    }

    public void onEvent(int, java.lang.String)
    {
        androidx.datastore.core.MultiProcessDataStore$fileObserver$2$1 r0;
        int i0;
        java.lang.String r1, $r7;
        androidx.datastore.core.MultiProcessDataStore $r2, $r5, $r8, $r11;
        kotlinx.coroutines.flow.MutableStateFlow $r3, $r12;
        java.lang.Object $r4, $r13;
        boolean $z0, $z1;
        java.io.File $r6;
        androidx.datastore.core.SimpleActor $r9;
        androidx.datastore.core.Message$Read $r10;
        androidx.datastore.core.State $r14;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$fileObserver$2$1;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<androidx.datastore.core.MultiProcessDataStore$fileObserver$2$1: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r3 = staticinvoke <androidx.datastore.core.MultiProcessDataStore: kotlinx.coroutines.flow.MutableStateFlow access$getDownstreamFlow$p(androidx.datastore.core.MultiProcessDataStore)>($r2);

        $r4 = interfaceinvoke $r3.<kotlinx.coroutines.flow.MutableStateFlow: java.lang.Object getValue()>();

        $z0 = $r4 instanceof androidx.datastore.core.Final;

        if $z0 != 0 goto label1;

        $r5 = r0.<androidx.datastore.core.MultiProcessDataStore$fileObserver$2$1: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r6 = virtualinvoke $r5.<androidx.datastore.core.MultiProcessDataStore: java.io.File getFile()>();

        $r7 = virtualinvoke $r6.<java.io.File: java.lang.String getName()>();

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r7, r1);

        if $z1 == 0 goto label1;

        $r8 = r0.<androidx.datastore.core.MultiProcessDataStore$fileObserver$2$1: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r9 = staticinvoke <androidx.datastore.core.MultiProcessDataStore: androidx.datastore.core.SimpleActor access$getReadActor$p(androidx.datastore.core.MultiProcessDataStore)>($r8);

        $r10 = new androidx.datastore.core.Message$Read;

        $r11 = r0.<androidx.datastore.core.MultiProcessDataStore$fileObserver$2$1: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r12 = staticinvoke <androidx.datastore.core.MultiProcessDataStore: kotlinx.coroutines.flow.MutableStateFlow access$getDownstreamFlow$p(androidx.datastore.core.MultiProcessDataStore)>($r11);

        $r13 = interfaceinvoke $r12.<kotlinx.coroutines.flow.MutableStateFlow: java.lang.Object getValue()>();

        $r14 = (androidx.datastore.core.State) $r13;

        specialinvoke $r10.<androidx.datastore.core.Message$Read: void <init>(androidx.datastore.core.State)>($r14);

        virtualinvoke $r9.<androidx.datastore.core.SimpleActor: void offer(java.lang.Object)>($r10);

     label1:
        return;
    }

androidx.datastore.core.MultiProcessDataStore$fileObserver$2
<androidx.datastore.core.MultiProcessDataStore$fileObserver$2: androidx.datastore.core.MultiProcessDataStore this$0>
    void <init>(androidx.datastore.core.MultiProcessDataStore)
    {
        androidx.datastore.core.MultiProcessDataStore$fileObserver$2 r0;
        androidx.datastore.core.MultiProcessDataStore $r1;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$fileObserver$2;

        $r1 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        r0.<androidx.datastore.core.MultiProcessDataStore$fileObserver$2: androidx.datastore.core.MultiProcessDataStore this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final androidx.datastore.core.MultiProcessDataStore$fileObserver$2$1 invoke()
    {
        androidx.datastore.core.MultiProcessDataStore$fileObserver$2 r0;
        java.lang.String r1, $r5;
        androidx.datastore.core.MultiProcessDataStore $r2, $r7;
        java.io.File $r3, $r4;
        androidx.datastore.core.MultiProcessDataStore$fileObserver$2$1 $r6;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$fileObserver$2;

        $r2 = r0.<androidx.datastore.core.MultiProcessDataStore$fileObserver$2: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r3 = virtualinvoke $r2.<androidx.datastore.core.MultiProcessDataStore: java.io.File getFile()>();

        $r4 = virtualinvoke $r3.<java.io.File: java.io.File getCanonicalFile()>();

        $r5 = virtualinvoke $r4.<java.io.File: java.lang.String getParent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r5);

        r1 = $r5;

        $r6 = new androidx.datastore.core.MultiProcessDataStore$fileObserver$2$1;

        $r7 = r0.<androidx.datastore.core.MultiProcessDataStore$fileObserver$2: androidx.datastore.core.MultiProcessDataStore this$0>;

        specialinvoke $r6.<androidx.datastore.core.MultiProcessDataStore$fileObserver$2$1: void <init>(androidx.datastore.core.MultiProcessDataStore,java.lang.String)>($r7, r1);

        return $r6;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.datastore.core.MultiProcessDataStore$fileObserver$2 r0;
        androidx.datastore.core.MultiProcessDataStore$fileObserver$2$1 $r1;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$fileObserver$2;

        $r1 = virtualinvoke r0.<androidx.datastore.core.MultiProcessDataStore$fileObserver$2: androidx.datastore.core.MultiProcessDataStore$fileObserver$2$1 invoke()>();

        return $r1;
    }

androidx.datastore.core.MultiProcessDataStore$getWriteFileLock$1
<androidx.datastore.core.MultiProcessDataStore$getWriteFileLock$1: java.lang.Object L$0>
<androidx.datastore.core.MultiProcessDataStore$getWriteFileLock$1: java.lang.Object L$1>
<androidx.datastore.core.MultiProcessDataStore$getWriteFileLock$1: java.lang.Object L$2>
<androidx.datastore.core.MultiProcessDataStore$getWriteFileLock$1: java.lang.Object L$3>
<androidx.datastore.core.MultiProcessDataStore$getWriteFileLock$1: java.lang.Object result>
<androidx.datastore.core.MultiProcessDataStore$getWriteFileLock$1: androidx.datastore.core.MultiProcessDataStore this$0>
<androidx.datastore.core.MultiProcessDataStore$getWriteFileLock$1: int label>
    void <init>(androidx.datastore.core.MultiProcessDataStore, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$getWriteFileLock$1 r0;
        androidx.datastore.core.MultiProcessDataStore r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$getWriteFileLock$1;

        r1 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.datastore.core.MultiProcessDataStore$getWriteFileLock$1: androidx.datastore.core.MultiProcessDataStore this$0> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>($r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.datastore.core.MultiProcessDataStore$getWriteFileLock$1 r0;
        java.lang.Object $r1, $r4;
        int $i0, $i1;
        kotlin.coroutines.Continuation $r2;
        androidx.datastore.core.MultiProcessDataStore $r3;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$getWriteFileLock$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.datastore.core.MultiProcessDataStore$getWriteFileLock$1: java.lang.Object result> = $r1;

        $i0 = r0.<androidx.datastore.core.MultiProcessDataStore$getWriteFileLock$1: int label>;

        $i1 = $i0 | -2147483648;

        r0.<androidx.datastore.core.MultiProcessDataStore$getWriteFileLock$1: int label> = $i1;

        $r3 = r0.<androidx.datastore.core.MultiProcessDataStore$getWriteFileLock$1: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r2 = (kotlin.coroutines.Continuation) r0;

        $r4 = staticinvoke <androidx.datastore.core.MultiProcessDataStore: java.lang.Object access$getWriteFileLock(androidx.datastore.core.MultiProcessDataStore,kotlin.jvm.functions.Function1,kotlin.coroutines.Continuation)>($r3, null, $r2);

        return $r4;
    }

androidx.datastore.core.MultiProcessDataStore$handleUpdate$1
<androidx.datastore.core.MultiProcessDataStore$handleUpdate$1: java.lang.Object L$0>
<androidx.datastore.core.MultiProcessDataStore$handleUpdate$1: java.lang.Object L$1>
<androidx.datastore.core.MultiProcessDataStore$handleUpdate$1: java.lang.Object L$2>
<androidx.datastore.core.MultiProcessDataStore$handleUpdate$1: java.lang.Object result>
<androidx.datastore.core.MultiProcessDataStore$handleUpdate$1: androidx.datastore.core.MultiProcessDataStore this$0>
<androidx.datastore.core.MultiProcessDataStore$handleUpdate$1: int label>
    void <init>(androidx.datastore.core.MultiProcessDataStore, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$handleUpdate$1 r0;
        androidx.datastore.core.MultiProcessDataStore r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$handleUpdate$1;

        r1 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.datastore.core.MultiProcessDataStore$handleUpdate$1: androidx.datastore.core.MultiProcessDataStore this$0> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>($r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.datastore.core.MultiProcessDataStore$handleUpdate$1 r0;
        java.lang.Object $r1, $r4;
        int $i0, $i1;
        kotlin.coroutines.Continuation $r2;
        androidx.datastore.core.MultiProcessDataStore $r3;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$handleUpdate$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.datastore.core.MultiProcessDataStore$handleUpdate$1: java.lang.Object result> = $r1;

        $i0 = r0.<androidx.datastore.core.MultiProcessDataStore$handleUpdate$1: int label>;

        $i1 = $i0 | -2147483648;

        r0.<androidx.datastore.core.MultiProcessDataStore$handleUpdate$1: int label> = $i1;

        $r3 = r0.<androidx.datastore.core.MultiProcessDataStore$handleUpdate$1: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r2 = (kotlin.coroutines.Continuation) r0;

        $r4 = staticinvoke <androidx.datastore.core.MultiProcessDataStore: java.lang.Object access$handleUpdate(androidx.datastore.core.MultiProcessDataStore,androidx.datastore.core.Message$Update,kotlin.coroutines.Continuation)>($r3, null, $r2);

        return $r4;
    }

androidx.datastore.core.MultiProcessDataStore$lockFile$2
<androidx.datastore.core.MultiProcessDataStore$lockFile$2: androidx.datastore.core.MultiProcessDataStore this$0>
    void <init>(androidx.datastore.core.MultiProcessDataStore)
    {
        androidx.datastore.core.MultiProcessDataStore$lockFile$2 r0;
        androidx.datastore.core.MultiProcessDataStore $r1;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$lockFile$2;

        $r1 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        r0.<androidx.datastore.core.MultiProcessDataStore$lockFile$2: androidx.datastore.core.MultiProcessDataStore this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final java.io.File invoke()
    {
        androidx.datastore.core.MultiProcessDataStore$lockFile$2 r0;
        java.io.File r1;
        androidx.datastore.core.MultiProcessDataStore $r2, $r3, $r5;
        java.lang.String $r4;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$lockFile$2;

        $r3 = r0.<androidx.datastore.core.MultiProcessDataStore$lockFile$2: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r2 = r0.<androidx.datastore.core.MultiProcessDataStore$lockFile$2: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r4 = staticinvoke <androidx.datastore.core.MultiProcessDataStore: java.lang.String access$getLOCK_SUFFIX$p(androidx.datastore.core.MultiProcessDataStore)>($r2);

        r1 = staticinvoke <androidx.datastore.core.MultiProcessDataStore: java.io.File access$fileWithSuffix(androidx.datastore.core.MultiProcessDataStore,java.lang.String)>($r3, $r4);

        $r5 = r0.<androidx.datastore.core.MultiProcessDataStore$lockFile$2: androidx.datastore.core.MultiProcessDataStore this$0>;

        staticinvoke <androidx.datastore.core.MultiProcessDataStore: void access$createIfNotExists(androidx.datastore.core.MultiProcessDataStore,java.io.File)>($r5, r1);

        return r1;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.datastore.core.MultiProcessDataStore$lockFile$2 r0;
        java.io.File $r1;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$lockFile$2;

        $r1 = virtualinvoke r0.<androidx.datastore.core.MultiProcessDataStore$lockFile$2: java.io.File invoke()>();

        return $r1;
    }

androidx.datastore.core.MultiProcessDataStore$readActor$1
<androidx.datastore.core.MultiProcessDataStore$readActor$1: androidx.datastore.core.MultiProcessDataStore this$0>
    void <init>(androidx.datastore.core.MultiProcessDataStore)
    {
        androidx.datastore.core.MultiProcessDataStore$readActor$1 r0;
        androidx.datastore.core.MultiProcessDataStore $r1;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$readActor$1;

        $r1 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        r0.<androidx.datastore.core.MultiProcessDataStore$readActor$1: androidx.datastore.core.MultiProcessDataStore this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(java.lang.Throwable)
    {
        androidx.datastore.core.MultiProcessDataStore$readActor$1 r0;
        java.lang.Throwable r1;
        androidx.datastore.core.MultiProcessDataStore $r2;
        android.os.FileObserver $r3;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$readActor$1;

        r1 := @parameter0: java.lang.Throwable;

        $r2 = r0.<androidx.datastore.core.MultiProcessDataStore$readActor$1: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r3 = staticinvoke <androidx.datastore.core.MultiProcessDataStore: android.os.FileObserver access$getFileObserver(androidx.datastore.core.MultiProcessDataStore)>($r2);

        virtualinvoke $r3.<android.os.FileObserver: void stopWatching()>();

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.datastore.core.MultiProcessDataStore$readActor$1 r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$readActor$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Throwable) r1;

        virtualinvoke r0.<androidx.datastore.core.MultiProcessDataStore$readActor$1: void invoke(java.lang.Throwable)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

androidx.datastore.core.MultiProcessDataStore$readActor$2
<androidx.datastore.core.MultiProcessDataStore$readActor$2: androidx.datastore.core.MultiProcessDataStore$readActor$2 INSTANCE>
    void <init>()
    {
        androidx.datastore.core.MultiProcessDataStore$readActor$2 r0;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$readActor$2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(2);

        return;
    }

    public final void invoke(androidx.datastore.core.Message$Read, java.lang.Throwable)
    {
        androidx.datastore.core.MultiProcessDataStore$readActor$2 r0;
        androidx.datastore.core.Message$Read r1;
        java.lang.Throwable r2;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$readActor$2;

        r1 := @parameter0: androidx.datastore.core.Message$Read;

        r2 := @parameter1: java.lang.Throwable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<anonymous parameter 0>");

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.datastore.core.MultiProcessDataStore$readActor$2 r0;
        java.lang.Object r1, r2;
        java.lang.Throwable $r3;
        androidx.datastore.core.Message$Read $r4;
        kotlin.Unit $r5;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$readActor$2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (androidx.datastore.core.Message$Read) r1;

        $r3 = (java.lang.Throwable) r2;

        virtualinvoke r0.<androidx.datastore.core.MultiProcessDataStore$readActor$2: void invoke(androidx.datastore.core.Message$Read,java.lang.Throwable)>($r4, $r3);

        $r5 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r5;
    }

    static void <clinit>()
    {
        androidx.datastore.core.MultiProcessDataStore$readActor$2 $r0;

        $r0 = new androidx.datastore.core.MultiProcessDataStore$readActor$2;

        specialinvoke $r0.<androidx.datastore.core.MultiProcessDataStore$readActor$2: void <init>()>();

        <androidx.datastore.core.MultiProcessDataStore$readActor$2: androidx.datastore.core.MultiProcessDataStore$readActor$2 INSTANCE> = $r0;

        return;
    }

androidx.datastore.core.MultiProcessDataStore$readActor$3
<androidx.datastore.core.MultiProcessDataStore$readActor$3: int label>
<androidx.datastore.core.MultiProcessDataStore$readActor$3: java.lang.Object L$0>
<androidx.datastore.core.MultiProcessDataStore$readActor$3: androidx.datastore.core.MultiProcessDataStore this$0>
    void <init>(androidx.datastore.core.MultiProcessDataStore, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$readActor$3 r0;
        androidx.datastore.core.MultiProcessDataStore $r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$readActor$3;

        $r1 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.datastore.core.MultiProcessDataStore$readActor$3: androidx.datastore.core.MultiProcessDataStore this$0> = $r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.datastore.core.MultiProcessDataStore$readActor$3 r0;
        java.lang.Object $r1, r3, $r5, $r8;
        androidx.datastore.core.Message$Read r2;
        int $i0;
        kotlin.Unit $r4;
        androidx.datastore.core.MultiProcessDataStore $r6;
        kotlin.coroutines.Continuation $r7;
        java.lang.IllegalStateException $r9;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$readActor$3;

        $r1 := @parameter0: java.lang.Object;

        r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.datastore.core.MultiProcessDataStore$readActor$3: int label>;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label4;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r5 = r0.<androidx.datastore.core.MultiProcessDataStore$readActor$3: java.lang.Object L$0>;

        r2 = (androidx.datastore.core.Message$Read) $r5;

        $r6 = r0.<androidx.datastore.core.MultiProcessDataStore$readActor$3: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r7 = (kotlin.coroutines.Continuation) r0;

        r0.<androidx.datastore.core.MultiProcessDataStore$readActor$3: int label> = 1;

        $r8 = staticinvoke <androidx.datastore.core.MultiProcessDataStore: java.lang.Object access$handleRead(androidx.datastore.core.MultiProcessDataStore,androidx.datastore.core.Message$Read,kotlin.coroutines.Continuation)>($r6, r2, $r7);

        if $r8 != r3 goto label3;

        return r3;

     label2:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label3:
        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r4;

     label4:
        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r9;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$readActor$3 r0, r3, $r4;
        java.lang.Object r1;
        kotlin.coroutines.Continuation $r2, $r6;
        androidx.datastore.core.MultiProcessDataStore $r5;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$readActor$3;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r4 = new androidx.datastore.core.MultiProcessDataStore$readActor$3;

        $r5 = r0.<androidx.datastore.core.MultiProcessDataStore$readActor$3: androidx.datastore.core.MultiProcessDataStore this$0>;

        specialinvoke $r4.<androidx.datastore.core.MultiProcessDataStore$readActor$3: void <init>(androidx.datastore.core.MultiProcessDataStore,kotlin.coroutines.Continuation)>($r5, $r2);

        r3 = $r4;

        r3.<androidx.datastore.core.MultiProcessDataStore$readActor$3: java.lang.Object L$0> = r1;

        $r6 = (kotlin.coroutines.Continuation) r3;

        return $r6;
    }

    public final java.lang.Object invoke(androidx.datastore.core.Message$Read, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$readActor$3 r0, $r5;
        androidx.datastore.core.Message$Read r1;
        kotlin.coroutines.Continuation r2, $r3;
        kotlin.Unit $r4;
        java.lang.Object $r6;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$readActor$3;

        r1 := @parameter0: androidx.datastore.core.Message$Read;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = virtualinvoke r0.<androidx.datastore.core.MultiProcessDataStore$readActor$3: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, r2);

        $r5 = (androidx.datastore.core.MultiProcessDataStore$readActor$3) $r3;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.datastore.core.MultiProcessDataStore$readActor$3: java.lang.Object invokeSuspend(java.lang.Object)>($r4);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.datastore.core.MultiProcessDataStore$readActor$3 r0;
        java.lang.Object r1, r2, $r5;
        kotlin.coroutines.Continuation $r3;
        androidx.datastore.core.Message$Read $r4;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$readActor$3;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (androidx.datastore.core.Message$Read) r1;

        $r3 = (kotlin.coroutines.Continuation) r2;

        $r5 = virtualinvoke r0.<androidx.datastore.core.MultiProcessDataStore$readActor$3: java.lang.Object invoke(androidx.datastore.core.Message$Read,kotlin.coroutines.Continuation)>($r4, $r3);

        return $r5;
    }

androidx.datastore.core.MultiProcessDataStore$readAndInit$1
<androidx.datastore.core.MultiProcessDataStore$readAndInit$1: java.lang.Object L$0>
<androidx.datastore.core.MultiProcessDataStore$readAndInit$1: java.lang.Object L$1>
<androidx.datastore.core.MultiProcessDataStore$readAndInit$1: java.lang.Object result>
<androidx.datastore.core.MultiProcessDataStore$readAndInit$1: androidx.datastore.core.MultiProcessDataStore this$0>
<androidx.datastore.core.MultiProcessDataStore$readAndInit$1: int label>
    void <init>(androidx.datastore.core.MultiProcessDataStore, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$readAndInit$1 r0;
        androidx.datastore.core.MultiProcessDataStore r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$readAndInit$1;

        r1 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$1: androidx.datastore.core.MultiProcessDataStore this$0> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>($r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.datastore.core.MultiProcessDataStore$readAndInit$1 r0;
        java.lang.Object $r1, $r4;
        int $i0, $i1;
        kotlin.coroutines.Continuation $r2;
        androidx.datastore.core.MultiProcessDataStore $r3;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$readAndInit$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$1: java.lang.Object result> = $r1;

        $i0 = r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$1: int label>;

        $i1 = $i0 | -2147483648;

        r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$1: int label> = $i1;

        $r3 = r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$1: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r2 = (kotlin.coroutines.Continuation) r0;

        $r4 = staticinvoke <androidx.datastore.core.MultiProcessDataStore: java.lang.Object access$readAndInit(androidx.datastore.core.MultiProcessDataStore,kotlin.coroutines.Continuation)>($r3, $r2);

        return $r4;
    }

androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1
<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1: java.lang.Object L$0>
<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1: java.lang.Object L$1>
<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1: java.lang.Object L$2>
<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1: java.lang.Object L$3>
<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1: java.lang.Object L$4>
<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1: java.lang.Object result>
<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1: androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1 this$0>
<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1: int label>
    void <init>(androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1 r0;
        androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1 r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1;

        r1 := @parameter0: androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1: androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1 this$0> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>($r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1 r0;
        java.lang.Object $r1, $r4;
        int $i0, $i1;
        kotlin.coroutines.Continuation $r2;
        androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1 $r3;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1: java.lang.Object result> = $r1;

        $i0 = r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1: int label>;

        $i1 = $i0 | -2147483648;

        r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1: int label> = $i1;

        $r3 = r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1: androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1 this$0>;

        $r2 = (kotlin.coroutines.Continuation) r0;

        $r4 = virtualinvoke $r3.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1: java.lang.Object updateData(kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation)>(null, $r2);

        return $r4;
    }

androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1
<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1: kotlinx.coroutines.sync.Mutex $updateLock>
<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1: kotlin.jvm.internal.Ref$BooleanRef $initializationComplete>
<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1: kotlin.jvm.internal.Ref$ObjectRef $currentData>
<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1: androidx.datastore.core.MultiProcessDataStore this$0>
    void <init>(kotlinx.coroutines.sync.Mutex, kotlin.jvm.internal.Ref$BooleanRef, kotlin.jvm.internal.Ref$ObjectRef, androidx.datastore.core.MultiProcessDataStore)
    {
        androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1 r0;
        kotlinx.coroutines.sync.Mutex $r1;
        kotlin.jvm.internal.Ref$BooleanRef $r2;
        kotlin.jvm.internal.Ref$ObjectRef $r3;
        androidx.datastore.core.MultiProcessDataStore $r4;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1;

        $r1 := @parameter0: kotlinx.coroutines.sync.Mutex;

        $r2 := @parameter1: kotlin.jvm.internal.Ref$BooleanRef;

        $r3 := @parameter2: kotlin.jvm.internal.Ref$ObjectRef;

        $r4 := @parameter3: androidx.datastore.core.MultiProcessDataStore;

        r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1: kotlinx.coroutines.sync.Mutex $updateLock> = $r1;

        r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1: kotlin.jvm.internal.Ref$BooleanRef $initializationComplete> = $r2;

        r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1: kotlin.jvm.internal.Ref$ObjectRef $currentData> = $r3;

        r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1: androidx.datastore.core.MultiProcessDataStore this$0> = $r4;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object updateData(kotlin.jvm.functions.Function2, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1 r0;
        kotlin.coroutines.Continuation r1, r37, r38;
        java.lang.Object $r2, r3, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r20, $r30, r31, r32;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r19, $r29;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Throwable $r22, r33;
        kotlin.jvm.functions.Function2 r23;
        androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1 $r24, r34;
        kotlinx.coroutines.sync.Mutex $r25;
        kotlin.jvm.internal.Ref$BooleanRef r26;
        kotlin.jvm.internal.Ref$ObjectRef r27;
        androidx.datastore.core.MultiProcessDataStore r28;
        java.lang.IllegalStateException r35, r36;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1;

        r23 := @parameter0: kotlin.jvm.functions.Function2;

        r1 := @parameter1: kotlin.coroutines.Continuation;

        $z0 = r1 instanceof androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1;

        if $z0 == 0 goto label01;

        $r24 = (androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1) r1;

        $i0 = $r24.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1: int label>;

        $i1 = $i0 & -2147483648;

        if $i1 == 0 goto label01;

        $i2 = $r24.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1: int label>;

        $i3 = $i2 - -2147483648;

        $r24.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1: int label> = $i3;

        goto label02;

     label01:
        r34 = new androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1;

        specialinvoke r34.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1: void <init>(androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1,kotlin.coroutines.Continuation)>(r0, r1);

        $r24 = r34;

     label02:
        $r2 = $r24.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1: java.lang.Object result>;

        r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i4 = $r24.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1: int label>;

        tableswitch($i4)
        {
            case 0: goto label03;
            case 1: goto label04;
            case 2: goto label10;
            case 3: goto label14;
            default: goto label22;
        };

     label03:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

        $r25 = r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1: kotlinx.coroutines.sync.Mutex $updateLock>;

        r26 = r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1: kotlin.jvm.internal.Ref$BooleanRef $initializationComplete>;

        r27 = r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1: kotlin.jvm.internal.Ref$ObjectRef $currentData>;

        r28 = r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r24.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1: java.lang.Object L$0> = r23;

        $r24.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1: java.lang.Object L$1> = $r25;

        $r24.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1: java.lang.Object L$2> = r26;

        $r24.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1: java.lang.Object L$3> = r27;

        $r24.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1: java.lang.Object L$4> = r28;

        $r24.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1: int label> = 1;

        r37 = (kotlin.coroutines.Continuation) $r24;

        $r20 = interfaceinvoke $r25.<kotlinx.coroutines.sync.Mutex: java.lang.Object lock(java.lang.Object,kotlin.coroutines.Continuation)>(null, r37);

        if $r20 != r3 goto label05;

        return r3;

     label04:
        $r12 = $r24.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1: java.lang.Object L$4>;

        r28 = (androidx.datastore.core.MultiProcessDataStore) $r12;

        $r13 = $r24.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1: java.lang.Object L$3>;

        r27 = (kotlin.jvm.internal.Ref$ObjectRef) $r13;

        $r14 = $r24.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1: java.lang.Object L$2>;

        r26 = (kotlin.jvm.internal.Ref$BooleanRef) $r14;

        $r15 = $r24.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1: java.lang.Object L$1>;

        $r25 = (kotlinx.coroutines.sync.Mutex) $r15;

        $r16 = $r24.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1: java.lang.Object L$0>;

        r23 = (kotlin.jvm.functions.Function2) $r16;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

     label05:
        $z2 = r26.<kotlin.jvm.internal.Ref$BooleanRef: boolean element>;

        if $z2 != 0 goto label06;

        $z3 = 1;

        goto label07;

     label06:
        $z3 = 0;

     label07:
        if $z3 != 0 goto label08;

        $r29 = "InitializerApi.updateData should not be called after initialization is complete.";

        r35 = new java.lang.IllegalStateException;

        $r19 = virtualinvoke $r29.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r35.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r19);

        throw r35;

     label08:
        $r17 = r27.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        $r24.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1: java.lang.Object L$0> = $r25;

        $r24.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1: java.lang.Object L$1> = r27;

        $r24.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1: java.lang.Object L$2> = r28;

        $r24.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1: java.lang.Object L$3> = null;

        $r24.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1: java.lang.Object L$4> = null;

        $r24.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1: int label> = 2;

        $r30 = interfaceinvoke r23.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r17, $r24);

     label09:
        if $r30 != r3 goto label12;

        return r3;

     label10:
        $r7 = $r24.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1: java.lang.Object L$2>;

        r28 = (androidx.datastore.core.MultiProcessDataStore) $r7;

        $r8 = $r24.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1: java.lang.Object L$1>;

        r27 = (kotlin.jvm.internal.Ref$ObjectRef) $r8;

        $r9 = $r24.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1: java.lang.Object L$0>;

        $r25 = (kotlinx.coroutines.sync.Mutex) $r9;

     label11:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

        $r30 = $r2;

     label12:
        r31 = $r30;

        $r10 = r27.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r31, $r10);

        if $z1 != 0 goto label17;

        $r24.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1: java.lang.Object L$0> = $r25;

        $r24.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1: java.lang.Object L$1> = r27;

        $r24.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1: java.lang.Object L$2> = r31;

        $r24.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1: int label> = 3;

        r38 = (kotlin.coroutines.Continuation) $r24;

        $r11 = virtualinvoke r28.<androidx.datastore.core.MultiProcessDataStore: java.lang.Object writeData$datastore_core_release(java.lang.Object,boolean,kotlin.coroutines.Continuation)>(r31, 0, r38);

     label13:
        if $r11 != r3 goto label16;

        return r3;

     label14:
        r31 = $r24.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1: java.lang.Object L$2>;

        $r5 = $r24.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1: java.lang.Object L$1>;

        r27 = (kotlin.jvm.internal.Ref$ObjectRef) $r5;

        $r6 = $r24.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1$updateData$1: java.lang.Object L$0>;

        $r25 = (kotlinx.coroutines.sync.Mutex) $r6;

     label15:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

     label16:
        r27.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element> = r31;

     label17:
        r32 = r27.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

     label18:
        interfaceinvoke $r25.<kotlinx.coroutines.sync.Mutex: void unlock(java.lang.Object)>(null);

        goto label21;

     label19:
        $r22 := @caughtexception;

        r33 = $r22;

     label20:
        interfaceinvoke $r25.<kotlinx.coroutines.sync.Mutex: void unlock(java.lang.Object)>(null);

        throw r33;

     label21:
        return r32;

     label22:
        r36 = new java.lang.IllegalStateException;

        specialinvoke r36.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r36;

        catch java.lang.Throwable from label05 to label09 with label19;
        catch java.lang.Throwable from label11 to label13 with label19;
        catch java.lang.Throwable from label15 to label18 with label19;
        catch java.lang.Throwable from label19 to label20 with label19;
    }

androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1
<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: java.lang.Object L$0>
<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: java.lang.Object L$1>
<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: java.lang.Object L$2>
<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: java.lang.Object L$3>
<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: java.lang.Object L$4>
<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: int label>
<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: androidx.datastore.core.MultiProcessDataStore this$0>
    void <init>(androidx.datastore.core.MultiProcessDataStore, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1 r0;
        androidx.datastore.core.MultiProcessDataStore $r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1;

        $r1 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: androidx.datastore.core.MultiProcessDataStore this$0> = $r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(1, $r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1 r0;
        java.lang.Object $r1, r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r15, $r16, $r17, $r18, $r19, $r20, $r22, $r36, r40;
        kotlin.jvm.functions.Function2 r2;
        int $i0;
        boolean $z0;
        androidx.datastore.core.MultiProcessDataStore $r13, $r24, $r25, $r29;
        kotlin.coroutines.Continuation $r14, $r30;
        androidx.datastore.core.Data $r21;
        androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1 $r23, r37;
        java.util.List $r26;
        kotlin.jvm.internal.Ref$BooleanRef $r27, r33;
        kotlin.jvm.internal.Ref$ObjectRef $r28, r34, r35;
        java.lang.IllegalStateException $r31;
        kotlinx.coroutines.sync.Mutex r32, $r41;
        java.lang.Iterable $r38;
        java.util.Iterator $r39;
        kotlin.Unit r42;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1;

        $r1 := @parameter0: java.lang.Object;

        r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: int label>;

        tableswitch($i0)
        {
            case 0: goto label01;
            case 1: goto label02;
            case 2: goto label05;
            case 3: goto label09;
            default: goto label12;
        };

     label01:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        r32 = staticinvoke <kotlinx.coroutines.sync.MutexKt: kotlinx.coroutines.sync.Mutex Mutex$default(boolean,int,java.lang.Object)>(0, 1, null);

        $r27 = new kotlin.jvm.internal.Ref$BooleanRef;

        specialinvoke $r27.<kotlin.jvm.internal.Ref$BooleanRef: void <init>()>();

        r33 = $r27;

        $r28 = new kotlin.jvm.internal.Ref$ObjectRef;

        specialinvoke $r28.<kotlin.jvm.internal.Ref$ObjectRef: void <init>()>();

        r34 = $r28;

        r35 = r34;

        $r29 = r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r30 = (kotlin.coroutines.Continuation) r0;

        r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: java.lang.Object L$0> = r32;

        r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: java.lang.Object L$1> = r33;

        r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: java.lang.Object L$2> = r34;

        r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: java.lang.Object L$3> = r35;

        r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: int label> = 1;

        $r36 = staticinvoke <androidx.datastore.core.MultiProcessDataStore: java.lang.Object access$readDataOrHandleCorruption(androidx.datastore.core.MultiProcessDataStore,boolean,kotlin.coroutines.Continuation)>($r29, 1, $r30);

        if $r36 != r3 goto label03;

        return r3;

     label02:
        $r17 = r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: java.lang.Object L$3>;

        r35 = (kotlin.jvm.internal.Ref$ObjectRef) $r17;

        $r18 = r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: java.lang.Object L$2>;

        r34 = (kotlin.jvm.internal.Ref$ObjectRef) $r18;

        $r19 = r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: java.lang.Object L$1>;

        r33 = (kotlin.jvm.internal.Ref$BooleanRef) $r19;

        $r20 = r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: java.lang.Object L$0>;

        r32 = (kotlinx.coroutines.sync.Mutex) $r20;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r36 = $r1;

     label03:
        $r21 = (androidx.datastore.core.Data) $r36;

        $r22 = virtualinvoke $r21.<androidx.datastore.core.Data: java.lang.Object getValue()>();

        r35.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element> = $r22;

        $r23 = new androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1;

        $r24 = r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: androidx.datastore.core.MultiProcessDataStore this$0>;

        specialinvoke $r23.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1: void <init>(kotlinx.coroutines.sync.Mutex,kotlin.jvm.internal.Ref$BooleanRef,kotlin.jvm.internal.Ref$ObjectRef,androidx.datastore.core.MultiProcessDataStore)>(r32, r33, r34, $r24);

        r37 = $r23;

        $r25 = r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r26 = staticinvoke <androidx.datastore.core.MultiProcessDataStore: java.util.List access$getInitTasks$p(androidx.datastore.core.MultiProcessDataStore)>($r25);

        if $r26 == null goto label08;

        $r38 = (java.lang.Iterable) $r26;

        $r39 = interfaceinvoke $r38.<java.lang.Iterable: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke $r39.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label07;

        r40 = interfaceinvoke $r39.<java.util.Iterator: java.lang.Object next()>();

        r2 = (kotlin.jvm.functions.Function2) r40;

        r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: java.lang.Object L$0> = r32;

        r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: java.lang.Object L$1> = r33;

        r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: java.lang.Object L$2> = r34;

        r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: java.lang.Object L$3> = r37;

        r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: java.lang.Object L$4> = $r39;

        r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: int label> = 2;

        $r16 = interfaceinvoke r2.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>(r37, r0);

        if $r16 != r3 goto label06;

        return r3;

     label05:
        $r8 = r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: java.lang.Object L$4>;

        $r39 = (java.util.Iterator) $r8;

        $r9 = r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: java.lang.Object L$3>;

        r37 = (androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1$api$1) $r9;

        $r10 = r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: java.lang.Object L$2>;

        r34 = (kotlin.jvm.internal.Ref$ObjectRef) $r10;

        $r11 = r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: java.lang.Object L$1>;

        r33 = (kotlin.jvm.internal.Ref$BooleanRef) $r11;

        $r12 = r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: java.lang.Object L$0>;

        r32 = (kotlinx.coroutines.sync.Mutex) $r12;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label06:
        goto label04;

     label07:
        goto label08;

     label08:
        $r13 = r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: androidx.datastore.core.MultiProcessDataStore this$0>;

        staticinvoke <androidx.datastore.core.MultiProcessDataStore: void access$setInitTasks$p(androidx.datastore.core.MultiProcessDataStore,java.util.List)>($r13, null);

        $r41 = r32;

        $r14 = (kotlin.coroutines.Continuation) r0;

        r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: java.lang.Object L$0> = r33;

        r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: java.lang.Object L$1> = r34;

        r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: java.lang.Object L$2> = r32;

        r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: java.lang.Object L$3> = null;

        r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: java.lang.Object L$4> = null;

        r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: int label> = 3;

        $r15 = interfaceinvoke r32.<kotlinx.coroutines.sync.Mutex: java.lang.Object lock(java.lang.Object,kotlin.coroutines.Continuation)>(null, $r14);

        if $r15 != r3 goto label10;

        return r3;

     label09:
        $r4 = r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: java.lang.Object L$2>;

        $r41 = (kotlinx.coroutines.sync.Mutex) $r4;

        $r5 = r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: java.lang.Object L$1>;

        r34 = (kotlin.jvm.internal.Ref$ObjectRef) $r5;

        $r6 = r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: java.lang.Object L$0>;

        r33 = (kotlin.jvm.internal.Ref$BooleanRef) $r6;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label10:
        r33.<kotlin.jvm.internal.Ref$BooleanRef: boolean element> = 1;

        r42 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        interfaceinvoke $r41.<kotlinx.coroutines.sync.Mutex: void unlock(java.lang.Object)>(null);

        goto label11;

     label11:
        $r7 = r34.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        return $r7;

     label12:
        $r31 = new java.lang.IllegalStateException;

        specialinvoke $r31.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r31;
    }

    public final kotlin.coroutines.Continuation create(kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1 r0, $r2;
        kotlin.coroutines.Continuation $r1, $r4;
        androidx.datastore.core.MultiProcessDataStore $r3;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $r2 = new androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1;

        $r3 = r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: androidx.datastore.core.MultiProcessDataStore this$0>;

        specialinvoke $r2.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: void <init>(androidx.datastore.core.MultiProcessDataStore,kotlin.coroutines.Continuation)>($r3, $r1);

        $r4 = (kotlin.coroutines.Continuation) $r2;

        return $r4;
    }

    public final java.lang.Object invoke(kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1 r0, $r4;
        kotlin.coroutines.Continuation r1, $r2;
        kotlin.Unit $r3;
        java.lang.Object $r5;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1;

        r1 := @parameter0: kotlin.coroutines.Continuation;

        $r2 = virtualinvoke r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: kotlin.coroutines.Continuation create(kotlin.coroutines.Continuation)>(r1);

        $r4 = (androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1) $r2;

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r5 = virtualinvoke $r4.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: java.lang.Object invokeSuspend(java.lang.Object)>($r3);

        return $r5;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1 r0;
        java.lang.Object r1, $r3;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (kotlin.coroutines.Continuation) r1;

        $r3 = virtualinvoke r0.<androidx.datastore.core.MultiProcessDataStore$readAndInit$2$1: java.lang.Object invoke(kotlin.coroutines.Continuation)>($r2);

        return $r3;
    }

androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateAndThrowFailure$1
<androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateAndThrowFailure$1: java.lang.Object L$0>
<androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateAndThrowFailure$1: java.lang.Object result>
<androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateAndThrowFailure$1: androidx.datastore.core.MultiProcessDataStore this$0>
<androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateAndThrowFailure$1: int label>
    void <init>(androidx.datastore.core.MultiProcessDataStore, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateAndThrowFailure$1 r0;
        androidx.datastore.core.MultiProcessDataStore r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateAndThrowFailure$1;

        r1 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateAndThrowFailure$1: androidx.datastore.core.MultiProcessDataStore this$0> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>($r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateAndThrowFailure$1 r0;
        java.lang.Object $r1, $r4;
        int $i0, $i1;
        kotlin.coroutines.Continuation $r2;
        androidx.datastore.core.MultiProcessDataStore $r3;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateAndThrowFailure$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateAndThrowFailure$1: java.lang.Object result> = $r1;

        $i0 = r0.<androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateAndThrowFailure$1: int label>;

        $i1 = $i0 | -2147483648;

        r0.<androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateAndThrowFailure$1: int label> = $i1;

        $r3 = r0.<androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateAndThrowFailure$1: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r2 = (kotlin.coroutines.Continuation) r0;

        $r4 = staticinvoke <androidx.datastore.core.MultiProcessDataStore: java.lang.Object access$readAndInitOrPropagateAndThrowFailure(androidx.datastore.core.MultiProcessDataStore,kotlin.coroutines.Continuation)>($r3, $r2);

        return $r4;
    }

androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateFailure$1
<androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateFailure$1: java.lang.Object L$0>
<androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateFailure$1: java.lang.Object result>
<androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateFailure$1: androidx.datastore.core.MultiProcessDataStore this$0>
<androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateFailure$1: int label>
    void <init>(androidx.datastore.core.MultiProcessDataStore, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateFailure$1 r0;
        androidx.datastore.core.MultiProcessDataStore r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateFailure$1;

        r1 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateFailure$1: androidx.datastore.core.MultiProcessDataStore this$0> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>($r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateFailure$1 r0;
        java.lang.Object $r1, $r4;
        int $i0, $i1;
        kotlin.coroutines.Continuation $r2;
        androidx.datastore.core.MultiProcessDataStore $r3;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateFailure$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateFailure$1: java.lang.Object result> = $r1;

        $i0 = r0.<androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateFailure$1: int label>;

        $i1 = $i0 | -2147483648;

        r0.<androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateFailure$1: int label> = $i1;

        $r3 = r0.<androidx.datastore.core.MultiProcessDataStore$readAndInitOrPropagateFailure$1: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r2 = (kotlin.coroutines.Continuation) r0;

        $r4 = staticinvoke <androidx.datastore.core.MultiProcessDataStore: java.lang.Object access$readAndInitOrPropagateFailure(androidx.datastore.core.MultiProcessDataStore,kotlin.coroutines.Continuation)>($r3, $r2);

        return $r4;
    }

androidx.datastore.core.MultiProcessDataStore$readData$1
<androidx.datastore.core.MultiProcessDataStore$readData$1: java.lang.Object L$0>
<androidx.datastore.core.MultiProcessDataStore$readData$1: java.lang.Object result>
<androidx.datastore.core.MultiProcessDataStore$readData$1: androidx.datastore.core.MultiProcessDataStore this$0>
<androidx.datastore.core.MultiProcessDataStore$readData$1: int label>
    void <init>(androidx.datastore.core.MultiProcessDataStore, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$readData$1 r0;
        androidx.datastore.core.MultiProcessDataStore r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$readData$1;

        r1 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.datastore.core.MultiProcessDataStore$readData$1: androidx.datastore.core.MultiProcessDataStore this$0> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>($r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.datastore.core.MultiProcessDataStore$readData$1 r0;
        java.lang.Object $r1, $r4;
        int $i0, $i1;
        kotlin.coroutines.Continuation $r2;
        androidx.datastore.core.MultiProcessDataStore $r3;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$readData$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.datastore.core.MultiProcessDataStore$readData$1: java.lang.Object result> = $r1;

        $i0 = r0.<androidx.datastore.core.MultiProcessDataStore$readData$1: int label>;

        $i1 = $i0 | -2147483648;

        r0.<androidx.datastore.core.MultiProcessDataStore$readData$1: int label> = $i1;

        $r3 = r0.<androidx.datastore.core.MultiProcessDataStore$readData$1: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r2 = (kotlin.coroutines.Continuation) r0;

        $r4 = staticinvoke <androidx.datastore.core.MultiProcessDataStore: java.lang.Object access$readData(androidx.datastore.core.MultiProcessDataStore,kotlin.coroutines.Continuation)>($r3, $r2);

        return $r4;
    }

androidx.datastore.core.MultiProcessDataStore$readData$data$1
<androidx.datastore.core.MultiProcessDataStore$readData$data$1: int label>
<androidx.datastore.core.MultiProcessDataStore$readData$data$1: boolean Z$0>
<androidx.datastore.core.MultiProcessDataStore$readData$data$1: androidx.datastore.core.MultiProcessDataStore this$0>
    void <init>(androidx.datastore.core.MultiProcessDataStore, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$readData$data$1 r0;
        androidx.datastore.core.MultiProcessDataStore $r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$readData$data$1;

        $r1 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.datastore.core.MultiProcessDataStore$readData$data$1: androidx.datastore.core.MultiProcessDataStore this$0> = $r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.datastore.core.MultiProcessDataStore$readData$data$1 r0;
        java.lang.Object $r1, r2, r3, $r11;
        int $i0, $i1, $i3, $i4;
        androidx.datastore.core.MultiProcessDataStore $r4, $r5, $r7;
        androidx.datastore.core.SharedCounter $r6;
        kotlin.coroutines.Continuation $r8;
        java.lang.IllegalStateException $r10;
        boolean z0;
        androidx.datastore.core.Data $r12;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$readData$data$1;

        $r1 := @parameter0: java.lang.Object;

        r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.datastore.core.MultiProcessDataStore$readData$data$1: int label>;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label8;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        z0 = r0.<androidx.datastore.core.MultiProcessDataStore$readData$data$1: boolean Z$0>;

        $r7 = r0.<androidx.datastore.core.MultiProcessDataStore$readData$data$1: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r8 = (kotlin.coroutines.Continuation) r0;

        r0.<androidx.datastore.core.MultiProcessDataStore$readData$data$1: boolean Z$0> = z0;

        r0.<androidx.datastore.core.MultiProcessDataStore$readData$data$1: int label> = 1;

        $r11 = staticinvoke <androidx.datastore.core.MultiProcessDataStore: java.lang.Object access$readDataFromFileOrDefault(androidx.datastore.core.MultiProcessDataStore,kotlin.coroutines.Continuation)>($r7, $r8);

        if $r11 != r3 goto label3;

        return r3;

     label2:
        z0 = r0.<androidx.datastore.core.MultiProcessDataStore$readData$data$1: boolean Z$0>;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r11 = $r1;

     label3:
        r2 = $r11;

        $r12 = new androidx.datastore.core.Data;

        if r2 == null goto label4;

        $i1 = virtualinvoke r2.<java.lang.Object: int hashCode()>();

        $i3 = $i1;

        goto label5;

     label4:
        $i3 = 0;

     label5:
        if z0 == 0 goto label6;

        $r5 = r0.<androidx.datastore.core.MultiProcessDataStore$readData$data$1: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r6 = staticinvoke <androidx.datastore.core.MultiProcessDataStore: androidx.datastore.core.SharedCounter access$getSharedCounter(androidx.datastore.core.MultiProcessDataStore)>($r5);

        $i4 = virtualinvoke $r6.<androidx.datastore.core.SharedCounter: int getValue()>();

        goto label7;

     label6:
        $r4 = r0.<androidx.datastore.core.MultiProcessDataStore$readData$data$1: androidx.datastore.core.MultiProcessDataStore this$0>;

        $i4 = staticinvoke <androidx.datastore.core.MultiProcessDataStore: int access$getINVALID_VERSION$p(androidx.datastore.core.MultiProcessDataStore)>($r4);

     label7:
        specialinvoke $r12.<androidx.datastore.core.Data: void <init>(java.lang.Object,int,int)>(r2, $i3, $i4);

        return $r12;

     label8:
        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r10;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$readData$data$1 r0, r3, $r4;
        java.lang.Object r1;
        kotlin.coroutines.Continuation $r2, $r7;
        androidx.datastore.core.MultiProcessDataStore $r5;
        java.lang.Boolean $r6;
        boolean $z0;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$readData$data$1;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r4 = new androidx.datastore.core.MultiProcessDataStore$readData$data$1;

        $r5 = r0.<androidx.datastore.core.MultiProcessDataStore$readData$data$1: androidx.datastore.core.MultiProcessDataStore this$0>;

        specialinvoke $r4.<androidx.datastore.core.MultiProcessDataStore$readData$data$1: void <init>(androidx.datastore.core.MultiProcessDataStore,kotlin.coroutines.Continuation)>($r5, $r2);

        r3 = $r4;

        $r6 = (java.lang.Boolean) r1;

        $z0 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

        r3.<androidx.datastore.core.MultiProcessDataStore$readData$data$1: boolean Z$0> = $z0;

        $r7 = (kotlin.coroutines.Continuation) r3;

        return $r7;
    }

    public final java.lang.Object invoke(boolean, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$readData$data$1 r0, $r5;
        boolean z0;
        kotlin.coroutines.Continuation r1, $r3;
        java.lang.Boolean $r2;
        kotlin.Unit $r4;
        java.lang.Object $r6;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$readData$data$1;

        z0 := @parameter0: boolean;

        r1 := @parameter1: kotlin.coroutines.Continuation;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r3 = virtualinvoke r0.<androidx.datastore.core.MultiProcessDataStore$readData$data$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>($r2, r1);

        $r5 = (androidx.datastore.core.MultiProcessDataStore$readData$data$1) $r3;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.datastore.core.MultiProcessDataStore$readData$data$1: java.lang.Object invokeSuspend(java.lang.Object)>($r4);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.datastore.core.MultiProcessDataStore$readData$data$1 r0;
        java.lang.Object r1, r2, $r5;
        java.lang.Boolean $r3;
        boolean $z0;
        kotlin.coroutines.Continuation $r4;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$readData$data$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = (java.lang.Boolean) r1;

        $z0 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        $r4 = (kotlin.coroutines.Continuation) r2;

        $r5 = virtualinvoke r0.<androidx.datastore.core.MultiProcessDataStore$readData$data$1: java.lang.Object invoke(boolean,kotlin.coroutines.Continuation)>($z0, $r4);

        return $r5;
    }

androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1
<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1: java.lang.Object L$0>
<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1: java.lang.Object L$1>
<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1: java.lang.Object L$2>
<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1: java.lang.Object L$3>
<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1: boolean Z$0>
<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1: java.lang.Object result>
<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1: androidx.datastore.core.MultiProcessDataStore this$0>
<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1: int label>
    void <init>(androidx.datastore.core.MultiProcessDataStore, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1 r0;
        androidx.datastore.core.MultiProcessDataStore r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1;

        r1 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1: androidx.datastore.core.MultiProcessDataStore this$0> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>($r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1 r0;
        java.lang.Object $r1, $r4;
        int $i0, $i1;
        kotlin.coroutines.Continuation $r2;
        androidx.datastore.core.MultiProcessDataStore $r3;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1: java.lang.Object result> = $r1;

        $i0 = r0.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1: int label>;

        $i1 = $i0 | -2147483648;

        r0.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1: int label> = $i1;

        $r3 = r0.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$1: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r2 = (kotlin.coroutines.Continuation) r0;

        $r4 = staticinvoke <androidx.datastore.core.MultiProcessDataStore: java.lang.Object access$readDataOrHandleCorruption(androidx.datastore.core.MultiProcessDataStore,boolean,kotlin.coroutines.Continuation)>($r3, 0, $r2);

        return $r4;
    }

androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$2
<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$2: int label>
<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$2: boolean Z$0>
<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$2: androidx.datastore.core.MultiProcessDataStore this$0>
    void <init>(androidx.datastore.core.MultiProcessDataStore, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$2 r0;
        androidx.datastore.core.MultiProcessDataStore $r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$2;

        $r1 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$2: androidx.datastore.core.MultiProcessDataStore this$0> = $r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$2 r0;
        java.lang.Object $r1, r2, r3, $r13;
        int i0, $i1, $i2, $i3;
        androidx.datastore.core.MultiProcessDataStore $r4, $r7, $r10;
        androidx.datastore.core.Data $r5;
        androidx.datastore.core.SharedCounter $r8;
        kotlin.coroutines.Continuation $r11;
        java.lang.IllegalStateException $r12;
        boolean z0;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$2;

        $r1 := @parameter0: java.lang.Object;

        r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i1 = r0.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$2: int label>;

        tableswitch($i1)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label8;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        z0 = r0.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$2: boolean Z$0>;

        $r10 = r0.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$2: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r11 = (kotlin.coroutines.Continuation) r0;

        r0.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$2: boolean Z$0> = z0;

        r0.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$2: int label> = 1;

        $r13 = staticinvoke <androidx.datastore.core.MultiProcessDataStore: java.lang.Object access$readDataFromFileOrDefault(androidx.datastore.core.MultiProcessDataStore,kotlin.coroutines.Continuation)>($r10, $r11);

        if $r13 != r3 goto label3;

        return r3;

     label2:
        z0 = r0.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$2: boolean Z$0>;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r13 = $r1;

     label3:
        r2 = $r13;

        if z0 == 0 goto label4;

        $r7 = r0.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$2: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r8 = staticinvoke <androidx.datastore.core.MultiProcessDataStore: androidx.datastore.core.SharedCounter access$getSharedCounter(androidx.datastore.core.MultiProcessDataStore)>($r7);

        $i2 = virtualinvoke $r8.<androidx.datastore.core.SharedCounter: int getValue()>();

        goto label5;

     label4:
        $r4 = r0.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$2: androidx.datastore.core.MultiProcessDataStore this$0>;

        $i2 = staticinvoke <androidx.datastore.core.MultiProcessDataStore: int access$getINVALID_VERSION$p(androidx.datastore.core.MultiProcessDataStore)>($r4);

     label5:
        i0 = $i2;

        $r5 = new androidx.datastore.core.Data;

        if r2 == null goto label6;

        $i3 = virtualinvoke r2.<java.lang.Object: int hashCode()>();

        goto label7;

     label6:
        $i3 = 0;

     label7:
        specialinvoke $r5.<androidx.datastore.core.Data: void <init>(java.lang.Object,int,int)>(r2, $i3, i0);

        return $r5;

     label8:
        $r12 = new java.lang.IllegalStateException;

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r12;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$2 r0, r3, $r4;
        java.lang.Object r1;
        kotlin.coroutines.Continuation $r2, $r7;
        androidx.datastore.core.MultiProcessDataStore $r5;
        java.lang.Boolean $r6;
        boolean $z0;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$2;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r4 = new androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$2;

        $r5 = r0.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$2: androidx.datastore.core.MultiProcessDataStore this$0>;

        specialinvoke $r4.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$2: void <init>(androidx.datastore.core.MultiProcessDataStore,kotlin.coroutines.Continuation)>($r5, $r2);

        r3 = $r4;

        $r6 = (java.lang.Boolean) r1;

        $z0 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

        r3.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$2: boolean Z$0> = $z0;

        $r7 = (kotlin.coroutines.Continuation) r3;

        return $r7;
    }

    public final java.lang.Object invoke(boolean, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$2 r0, $r5;
        boolean z0;
        kotlin.coroutines.Continuation r1, $r3;
        java.lang.Boolean $r2;
        kotlin.Unit $r4;
        java.lang.Object $r6;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$2;

        z0 := @parameter0: boolean;

        r1 := @parameter1: kotlin.coroutines.Continuation;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r3 = virtualinvoke r0.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$2: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>($r2, r1);

        $r5 = (androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$2) $r3;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$2: java.lang.Object invokeSuspend(java.lang.Object)>($r4);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$2 r0;
        java.lang.Object r1, r2, $r5;
        java.lang.Boolean $r3;
        boolean $z0;
        kotlin.coroutines.Continuation $r4;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = (java.lang.Boolean) r1;

        $z0 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        $r4 = (kotlin.coroutines.Continuation) r2;

        $r5 = virtualinvoke r0.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$2: java.lang.Object invoke(boolean,kotlin.coroutines.Continuation)>($z0, $r4);

        return $r5;
    }

androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$3
<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$3: java.lang.Object L$0>
<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$3: int label>
<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$3: kotlin.jvm.internal.Ref$ObjectRef $newData>
<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$3: androidx.datastore.core.MultiProcessDataStore this$0>
<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$3: kotlin.jvm.internal.Ref$IntRef $version>
    void <init>(kotlin.jvm.internal.Ref$ObjectRef, androidx.datastore.core.MultiProcessDataStore, kotlin.jvm.internal.Ref$IntRef, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$3 r0;
        kotlin.jvm.internal.Ref$ObjectRef $r1;
        androidx.datastore.core.MultiProcessDataStore $r2;
        kotlin.jvm.internal.Ref$IntRef $r3;
        kotlin.coroutines.Continuation $r4;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$3;

        $r1 := @parameter0: kotlin.jvm.internal.Ref$ObjectRef;

        $r2 := @parameter1: androidx.datastore.core.MultiProcessDataStore;

        $r3 := @parameter2: kotlin.jvm.internal.Ref$IntRef;

        $r4 := @parameter3: kotlin.coroutines.Continuation;

        r0.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$3: kotlin.jvm.internal.Ref$ObjectRef $newData> = $r1;

        r0.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$3: androidx.datastore.core.MultiProcessDataStore this$0> = $r2;

        r0.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$3: kotlin.jvm.internal.Ref$IntRef $version> = $r3;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(1, $r4);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$3 r0;
        java.lang.Object $r1, r2, $r3, $r5, $r13, $r16;
        int $i0, $i1, $i2;
        java.lang.Number $r4;
        androidx.datastore.core.MultiProcessDataStore $r6, $r9;
        kotlin.jvm.internal.Ref$IntRef $r7, r14;
        androidx.datastore.core.SharedCounter $r8;
        kotlin.coroutines.Continuation $r10;
        java.lang.IllegalStateException $r11;
        kotlin.jvm.internal.Ref$ObjectRef r12, $r15;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$3;

        $r1 := @parameter0: java.lang.Object;

        r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$3: int label>;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label4;
            default: goto label6;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        r12 = r0.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$3: kotlin.jvm.internal.Ref$ObjectRef $newData>;

        $r9 = r0.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$3: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r10 = (kotlin.coroutines.Continuation) r0;

        r0.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$3: java.lang.Object L$0> = r12;

        r0.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$3: int label> = 1;

        $r13 = staticinvoke <androidx.datastore.core.MultiProcessDataStore: java.lang.Object access$readDataFromFileOrDefault(androidx.datastore.core.MultiProcessDataStore,kotlin.coroutines.Continuation)>($r9, $r10);

        if $r13 != r2 goto label3;

        return r2;

     label2:
        $r5 = r0.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$3: java.lang.Object L$0>;

        r12 = (kotlin.jvm.internal.Ref$ObjectRef) $r5;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r13 = $r1;

     label3:
        r12.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element> = $r13;

        $r7 = r0.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$3: kotlin.jvm.internal.Ref$IntRef $version>;

        $r6 = r0.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$3: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r8 = staticinvoke <androidx.datastore.core.MultiProcessDataStore: androidx.datastore.core.SharedCounter access$getSharedCounter(androidx.datastore.core.MultiProcessDataStore)>($r6);

        $i2 = virtualinvoke $r8.<androidx.datastore.core.SharedCounter: int getValue()>();

        $r7.<kotlin.jvm.internal.Ref$IntRef: int element> = $i2;

        goto label5;

     label4:
        $r3 = r0.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$3: java.lang.Object L$0>;

        r14 = (kotlin.jvm.internal.Ref$IntRef) $r3;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r4 = (java.lang.Number) $r1;

        $i1 = virtualinvoke $r4.<java.lang.Number: int intValue()>();

        r14.<kotlin.jvm.internal.Ref$IntRef: int element> = $i1;

     label5:
        $r15 = r0.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$3: kotlin.jvm.internal.Ref$ObjectRef $newData>;

        $r16 = $r15.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        return $r16;

     label6:
        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r11;
    }

    public final kotlin.coroutines.Continuation create(kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$3 r0, $r2;
        kotlin.coroutines.Continuation $r1, $r6;
        kotlin.jvm.internal.Ref$IntRef $r3;
        androidx.datastore.core.MultiProcessDataStore $r4;
        kotlin.jvm.internal.Ref$ObjectRef $r5;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$3;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $r2 = new androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$3;

        $r5 = r0.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$3: kotlin.jvm.internal.Ref$ObjectRef $newData>;

        $r4 = r0.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$3: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r3 = r0.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$3: kotlin.jvm.internal.Ref$IntRef $version>;

        specialinvoke $r2.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$3: void <init>(kotlin.jvm.internal.Ref$ObjectRef,androidx.datastore.core.MultiProcessDataStore,kotlin.jvm.internal.Ref$IntRef,kotlin.coroutines.Continuation)>($r5, $r4, $r3, $r1);

        $r6 = (kotlin.coroutines.Continuation) $r2;

        return $r6;
    }

    public final java.lang.Object invoke(kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$3 r0, $r4;
        kotlin.coroutines.Continuation r1, $r2;
        kotlin.Unit $r3;
        java.lang.Object $r5;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$3;

        r1 := @parameter0: kotlin.coroutines.Continuation;

        $r2 = virtualinvoke r0.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$3: kotlin.coroutines.Continuation create(kotlin.coroutines.Continuation)>(r1);

        $r4 = (androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$3) $r2;

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r5 = virtualinvoke $r4.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$3: java.lang.Object invokeSuspend(java.lang.Object)>($r3);

        return $r5;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$3 r0;
        java.lang.Object r1, $r3;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$3;

        r1 := @parameter0: java.lang.Object;

        $r2 = (kotlin.coroutines.Continuation) r1;

        $r3 = virtualinvoke r0.<androidx.datastore.core.MultiProcessDataStore$readDataOrHandleCorruption$3: java.lang.Object invoke(kotlin.coroutines.Continuation)>($r2);

        return $r3;
    }

androidx.datastore.core.MultiProcessDataStore$sharedCounter$2$1
<androidx.datastore.core.MultiProcessDataStore$sharedCounter$2$1: androidx.datastore.core.MultiProcessDataStore this$0>
    void <init>(androidx.datastore.core.MultiProcessDataStore)
    {
        androidx.datastore.core.MultiProcessDataStore$sharedCounter$2$1 r0;
        androidx.datastore.core.MultiProcessDataStore $r1;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$sharedCounter$2$1;

        $r1 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        r0.<androidx.datastore.core.MultiProcessDataStore$sharedCounter$2$1: androidx.datastore.core.MultiProcessDataStore this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final java.io.File invoke()
    {
        androidx.datastore.core.MultiProcessDataStore$sharedCounter$2$1 r0;
        java.io.File r1;
        androidx.datastore.core.MultiProcessDataStore $r2, $r3, $r5;
        java.lang.String $r4;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$sharedCounter$2$1;

        $r3 = r0.<androidx.datastore.core.MultiProcessDataStore$sharedCounter$2$1: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r2 = r0.<androidx.datastore.core.MultiProcessDataStore$sharedCounter$2$1: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r4 = staticinvoke <androidx.datastore.core.MultiProcessDataStore: java.lang.String access$getVERSION_SUFFIX$p(androidx.datastore.core.MultiProcessDataStore)>($r2);

        r1 = staticinvoke <androidx.datastore.core.MultiProcessDataStore: java.io.File access$fileWithSuffix(androidx.datastore.core.MultiProcessDataStore,java.lang.String)>($r3, $r4);

        $r5 = r0.<androidx.datastore.core.MultiProcessDataStore$sharedCounter$2$1: androidx.datastore.core.MultiProcessDataStore this$0>;

        staticinvoke <androidx.datastore.core.MultiProcessDataStore: void access$createIfNotExists(androidx.datastore.core.MultiProcessDataStore,java.io.File)>($r5, r1);

        return r1;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.datastore.core.MultiProcessDataStore$sharedCounter$2$1 r0;
        java.io.File $r1;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$sharedCounter$2$1;

        $r1 = virtualinvoke r0.<androidx.datastore.core.MultiProcessDataStore$sharedCounter$2$1: java.io.File invoke()>();

        return $r1;
    }

androidx.datastore.core.MultiProcessDataStore$sharedCounter$2
<androidx.datastore.core.MultiProcessDataStore$sharedCounter$2: androidx.datastore.core.MultiProcessDataStore this$0>
    void <init>(androidx.datastore.core.MultiProcessDataStore)
    {
        androidx.datastore.core.MultiProcessDataStore$sharedCounter$2 r0;
        androidx.datastore.core.MultiProcessDataStore $r1;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$sharedCounter$2;

        $r1 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        r0.<androidx.datastore.core.MultiProcessDataStore$sharedCounter$2: androidx.datastore.core.MultiProcessDataStore this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final androidx.datastore.core.SharedCounter invoke()
    {
        androidx.datastore.core.MultiProcessDataStore$sharedCounter$2 r0;
        androidx.datastore.core.SharedCounter$Factory $r1, $r4;
        androidx.datastore.core.MultiProcessDataStore$sharedCounter$2$1 $r2;
        androidx.datastore.core.MultiProcessDataStore $r3;
        kotlin.jvm.functions.Function0 $r5;
        androidx.datastore.core.SharedCounter $r6;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$sharedCounter$2;

        $r1 = <androidx.datastore.core.SharedCounter: androidx.datastore.core.SharedCounter$Factory Factory>;

        virtualinvoke $r1.<androidx.datastore.core.SharedCounter$Factory: void loadLib()>();

        $r4 = <androidx.datastore.core.SharedCounter: androidx.datastore.core.SharedCounter$Factory Factory>;

        $r2 = new androidx.datastore.core.MultiProcessDataStore$sharedCounter$2$1;

        $r3 = r0.<androidx.datastore.core.MultiProcessDataStore$sharedCounter$2: androidx.datastore.core.MultiProcessDataStore this$0>;

        specialinvoke $r2.<androidx.datastore.core.MultiProcessDataStore$sharedCounter$2$1: void <init>(androidx.datastore.core.MultiProcessDataStore)>($r3);

        $r5 = (kotlin.jvm.functions.Function0) $r2;

        $r6 = virtualinvoke $r4.<androidx.datastore.core.SharedCounter$Factory: androidx.datastore.core.SharedCounter create$datastore_core_release(boolean,kotlin.jvm.functions.Function0)>(0, $r5);

        return $r6;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.datastore.core.MultiProcessDataStore$sharedCounter$2 r0;
        androidx.datastore.core.SharedCounter $r1;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$sharedCounter$2;

        $r1 = virtualinvoke r0.<androidx.datastore.core.MultiProcessDataStore$sharedCounter$2: androidx.datastore.core.SharedCounter invoke()>();

        return $r1;
    }

androidx.datastore.core.MultiProcessDataStore$storageConnection$2
<androidx.datastore.core.MultiProcessDataStore$storageConnection$2: androidx.datastore.core.MultiProcessDataStore this$0>
    void <init>(androidx.datastore.core.MultiProcessDataStore)
    {
        androidx.datastore.core.MultiProcessDataStore$storageConnection$2 r0;
        androidx.datastore.core.MultiProcessDataStore $r1;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$storageConnection$2;

        $r1 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        r0.<androidx.datastore.core.MultiProcessDataStore$storageConnection$2: androidx.datastore.core.MultiProcessDataStore this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final androidx.datastore.core.StorageConnection invoke()
    {
        androidx.datastore.core.MultiProcessDataStore$storageConnection$2 r0;
        androidx.datastore.core.MultiProcessDataStore $r1;
        androidx.datastore.core.Storage $r2;
        androidx.datastore.core.StorageConnection $r3;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$storageConnection$2;

        $r1 = r0.<androidx.datastore.core.MultiProcessDataStore$storageConnection$2: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r2 = staticinvoke <androidx.datastore.core.MultiProcessDataStore: androidx.datastore.core.Storage access$getStorage$p(androidx.datastore.core.MultiProcessDataStore)>($r1);

        $r3 = interfaceinvoke $r2.<androidx.datastore.core.Storage: androidx.datastore.core.StorageConnection createConnection()>();

        return $r3;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.datastore.core.MultiProcessDataStore$storageConnection$2 r0;
        androidx.datastore.core.StorageConnection $r1;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$storageConnection$2;

        $r1 = virtualinvoke r0.<androidx.datastore.core.MultiProcessDataStore$storageConnection$2: androidx.datastore.core.StorageConnection invoke()>();

        return $r1;
    }

androidx.datastore.core.MultiProcessDataStore$transformAndWrite$1
<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$1: java.lang.Object result>
<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$1: androidx.datastore.core.MultiProcessDataStore this$0>
<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$1: int label>
    void <init>(androidx.datastore.core.MultiProcessDataStore, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$transformAndWrite$1 r0;
        androidx.datastore.core.MultiProcessDataStore r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$transformAndWrite$1;

        r1 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$1: androidx.datastore.core.MultiProcessDataStore this$0> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>($r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.datastore.core.MultiProcessDataStore$transformAndWrite$1 r0;
        java.lang.Object $r1, $r4;
        int $i0, $i1;
        kotlin.coroutines.Continuation $r2;
        androidx.datastore.core.MultiProcessDataStore $r3;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$transformAndWrite$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$1: java.lang.Object result> = $r1;

        $i0 = r0.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$1: int label>;

        $i1 = $i0 | -2147483648;

        r0.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$1: int label> = $i1;

        $r3 = r0.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$1: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r2 = (kotlin.coroutines.Continuation) r0;

        $r4 = staticinvoke <androidx.datastore.core.MultiProcessDataStore: java.lang.Object access$transformAndWrite(androidx.datastore.core.MultiProcessDataStore,kotlin.jvm.functions.Function2,kotlin.coroutines.CoroutineContext,kotlin.coroutines.Continuation)>($r3, null, null, $r2);

        return $r4;
    }

androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2$newData$1
<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2$newData$1: int label>
<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2$newData$1: kotlin.jvm.functions.Function2 $transform>
<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2$newData$1: java.lang.Object $curData>
    void <init>(kotlin.jvm.functions.Function2, java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2$newData$1 r0;
        kotlin.jvm.functions.Function2 $r1;
        java.lang.Object $r2;
        kotlin.coroutines.Continuation $r3;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2$newData$1;

        $r1 := @parameter0: kotlin.jvm.functions.Function2;

        $r2 := @parameter1: java.lang.Object;

        $r3 := @parameter2: kotlin.coroutines.Continuation;

        r0.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2$newData$1: kotlin.jvm.functions.Function2 $transform> = $r1;

        r0.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2$newData$1: java.lang.Object $curData> = $r2;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r3);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2$newData$1 r0;
        java.lang.Object $r1, r2, $r4, $r6;
        int $i0;
        kotlin.jvm.functions.Function2 $r3;
        java.lang.IllegalStateException $r5;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2$newData$1;

        $r1 := @parameter0: java.lang.Object;

        r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2$newData$1: int label>;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label4;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r3 = r0.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2$newData$1: kotlin.jvm.functions.Function2 $transform>;

        $r4 = r0.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2$newData$1: java.lang.Object $curData>;

        r0.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2$newData$1: int label> = 1;

        $r6 = interfaceinvoke $r3.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r4, r0);

        if $r6 != r2 goto label3;

        return r2;

     label2:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r6 = $r1;

     label3:
        return $r6;

     label4:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r5;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2$newData$1 r0, $r3;
        java.lang.Object r1, $r4;
        kotlin.coroutines.Continuation $r2, $r6;
        kotlin.jvm.functions.Function2 $r5;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2$newData$1;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = new androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2$newData$1;

        $r5 = r0.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2$newData$1: kotlin.jvm.functions.Function2 $transform>;

        $r4 = r0.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2$newData$1: java.lang.Object $curData>;

        specialinvoke $r3.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2$newData$1: void <init>(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation)>($r5, $r4, $r2);

        $r6 = (kotlin.coroutines.Continuation) $r3;

        return $r6;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2$newData$1 r0, $r5;
        kotlinx.coroutines.CoroutineScope r1;
        kotlin.coroutines.Continuation r2, $r3;
        kotlin.Unit $r4;
        java.lang.Object $r6;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2$newData$1;

        r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = virtualinvoke r0.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2$newData$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, r2);

        $r5 = (androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2$newData$1) $r3;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2$newData$1: java.lang.Object invokeSuspend(java.lang.Object)>($r4);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2$newData$1 r0;
        java.lang.Object r1, r2, $r5;
        kotlin.coroutines.Continuation $r3;
        kotlinx.coroutines.CoroutineScope $r4;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2$newData$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (kotlinx.coroutines.CoroutineScope) r1;

        $r3 = (kotlin.coroutines.Continuation) r2;

        $r5 = virtualinvoke r0.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2$newData$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)>($r4, $r3);

        return $r5;
    }

androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2
<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2: java.lang.Object L$0>
<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2: java.lang.Object L$1>
<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2: int label>
<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2: androidx.datastore.core.MultiProcessDataStore this$0>
<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2: kotlin.coroutines.CoroutineContext $callerContext>
<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2: kotlin.jvm.functions.Function2 $transform>
    void <init>(androidx.datastore.core.MultiProcessDataStore, kotlin.coroutines.CoroutineContext, kotlin.jvm.functions.Function2, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2 r0;
        androidx.datastore.core.MultiProcessDataStore $r1;
        kotlin.coroutines.CoroutineContext $r2;
        kotlin.jvm.functions.Function2 $r3;
        kotlin.coroutines.Continuation $r4;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2;

        $r1 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        $r2 := @parameter1: kotlin.coroutines.CoroutineContext;

        $r3 := @parameter2: kotlin.jvm.functions.Function2;

        $r4 := @parameter3: kotlin.coroutines.Continuation;

        r0.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2: androidx.datastore.core.MultiProcessDataStore this$0> = $r1;

        r0.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2: kotlin.coroutines.CoroutineContext $callerContext> = $r2;

        r0.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2: kotlin.jvm.functions.Function2 $transform> = $r3;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(1, $r4);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2 r0;
        java.lang.Object $r1, r2, $r3, $r6, $r13, $r18, r19, $r21, r22;
        int $i0, $i1;
        boolean $z0;
        androidx.datastore.core.MultiProcessDataStore $r4, $r14;
        kotlin.coroutines.Continuation $r5, $r12, $r15;
        androidx.datastore.core.Data $r7, r20;
        androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2$newData$1 $r8;
        kotlin.jvm.functions.Function2 $r9, $r11;
        kotlin.coroutines.CoroutineContext $r10;
        java.lang.IllegalStateException $r17;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2;

        $r1 := @parameter0: java.lang.Object;

        r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2: int label>;

        tableswitch($i0)
        {
            case 0: goto label01;
            case 1: goto label02;
            case 2: goto label06;
            case 3: goto label08;
            default: goto label10;
        };

     label01:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r14 = r0.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r15 = (kotlin.coroutines.Continuation) r0;

        r0.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2: int label> = 1;

        $r18 = staticinvoke <androidx.datastore.core.MultiProcessDataStore: java.lang.Object access$readDataFromFileOrDefault(androidx.datastore.core.MultiProcessDataStore,kotlin.coroutines.Continuation)>($r14, $r15);

        if $r18 != r2 goto label03;

        return r2;

     label02:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r18 = $r1;

     label03:
        r19 = $r18;

        $r7 = new androidx.datastore.core.Data;

        $r13 = r19;

        if r19 == null goto label04;

        $i1 = virtualinvoke r19.<java.lang.Object: int hashCode()>();

        goto label05;

     label04:
        $i1 = 0;

     label05:
        specialinvoke $r7.<androidx.datastore.core.Data: void <init>(java.lang.Object,int,int)>($r13, $i1, 0);

        r20 = $r7;

        $r10 = r0.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2: kotlin.coroutines.CoroutineContext $callerContext>;

        $r8 = new androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2$newData$1;

        $r9 = r0.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2: kotlin.jvm.functions.Function2 $transform>;

        specialinvoke $r8.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2$newData$1: void <init>(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation)>($r9, r19, null);

        $r11 = (kotlin.jvm.functions.Function2) $r8;

        $r12 = (kotlin.coroutines.Continuation) r0;

        r0.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2: java.lang.Object L$0> = r19;

        r0.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2: java.lang.Object L$1> = r20;

        r0.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2: int label> = 2;

        $r21 = staticinvoke <kotlinx.coroutines.BuildersKt: java.lang.Object withContext(kotlin.coroutines.CoroutineContext,kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation)>($r10, $r11, $r12);

        if $r21 != r2 goto label07;

        return r2;

     label06:
        $r3 = r0.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2: java.lang.Object L$1>;

        r20 = (androidx.datastore.core.Data) $r3;

        r19 = r0.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2: java.lang.Object L$0>;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r21 = $r1;

     label07:
        r22 = $r21;

        virtualinvoke r20.<androidx.datastore.core.Data: void checkHashCode()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r19, r22);

        if $z0 != 0 goto label09;

        $r4 = r0.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r5 = (kotlin.coroutines.Continuation) r0;

        r0.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2: java.lang.Object L$0> = r22;

        r0.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2: java.lang.Object L$1> = null;

        r0.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2: int label> = 3;

        $r6 = staticinvoke <androidx.datastore.core.MultiProcessDataStore: java.lang.Object writeData$datastore_core_release$default(androidx.datastore.core.MultiProcessDataStore,java.lang.Object,boolean,kotlin.coroutines.Continuation,int,java.lang.Object)>($r4, r22, 0, $r5, 2, null);

        if $r6 != r2 goto label09;

        return r2;

     label08:
        r22 = r0.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2: java.lang.Object L$0>;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label09:
        return r22;

     label10:
        $r17 = new java.lang.IllegalStateException;

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r17;
    }

    public final kotlin.coroutines.Continuation create(kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2 r0, $r2;
        kotlin.coroutines.Continuation $r1, $r6;
        kotlin.jvm.functions.Function2 $r3;
        kotlin.coroutines.CoroutineContext $r4;
        androidx.datastore.core.MultiProcessDataStore $r5;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $r2 = new androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2;

        $r5 = r0.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r4 = r0.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2: kotlin.coroutines.CoroutineContext $callerContext>;

        $r3 = r0.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2: kotlin.jvm.functions.Function2 $transform>;

        specialinvoke $r2.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2: void <init>(androidx.datastore.core.MultiProcessDataStore,kotlin.coroutines.CoroutineContext,kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation)>($r5, $r4, $r3, $r1);

        $r6 = (kotlin.coroutines.Continuation) $r2;

        return $r6;
    }

    public final java.lang.Object invoke(kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2 r0, $r4;
        kotlin.coroutines.Continuation r1, $r2;
        kotlin.Unit $r3;
        java.lang.Object $r5;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2;

        r1 := @parameter0: kotlin.coroutines.Continuation;

        $r2 = virtualinvoke r0.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2: kotlin.coroutines.Continuation create(kotlin.coroutines.Continuation)>(r1);

        $r4 = (androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2) $r2;

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r5 = virtualinvoke $r4.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2: java.lang.Object invokeSuspend(java.lang.Object)>($r3);

        return $r5;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2 r0;
        java.lang.Object r1, $r3;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = (kotlin.coroutines.Continuation) r1;

        $r3 = virtualinvoke r0.<androidx.datastore.core.MultiProcessDataStore$transformAndWrite$2: java.lang.Object invoke(kotlin.coroutines.Continuation)>($r2);

        return $r3;
    }

androidx.datastore.core.MultiProcessDataStore$tryGetReadFileLock$1
<androidx.datastore.core.MultiProcessDataStore$tryGetReadFileLock$1: java.lang.Object L$0>
<androidx.datastore.core.MultiProcessDataStore$tryGetReadFileLock$1: java.lang.Object L$1>
<androidx.datastore.core.MultiProcessDataStore$tryGetReadFileLock$1: java.lang.Object L$2>
<androidx.datastore.core.MultiProcessDataStore$tryGetReadFileLock$1: boolean Z$0>
<androidx.datastore.core.MultiProcessDataStore$tryGetReadFileLock$1: java.lang.Object result>
<androidx.datastore.core.MultiProcessDataStore$tryGetReadFileLock$1: androidx.datastore.core.MultiProcessDataStore this$0>
<androidx.datastore.core.MultiProcessDataStore$tryGetReadFileLock$1: int label>
    void <init>(androidx.datastore.core.MultiProcessDataStore, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$tryGetReadFileLock$1 r0;
        androidx.datastore.core.MultiProcessDataStore r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$tryGetReadFileLock$1;

        r1 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.datastore.core.MultiProcessDataStore$tryGetReadFileLock$1: androidx.datastore.core.MultiProcessDataStore this$0> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>($r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.datastore.core.MultiProcessDataStore$tryGetReadFileLock$1 r0;
        java.lang.Object $r1, $r4;
        int $i0, $i1;
        kotlin.coroutines.Continuation $r2;
        androidx.datastore.core.MultiProcessDataStore $r3;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$tryGetReadFileLock$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.datastore.core.MultiProcessDataStore$tryGetReadFileLock$1: java.lang.Object result> = $r1;

        $i0 = r0.<androidx.datastore.core.MultiProcessDataStore$tryGetReadFileLock$1: int label>;

        $i1 = $i0 | -2147483648;

        r0.<androidx.datastore.core.MultiProcessDataStore$tryGetReadFileLock$1: int label> = $i1;

        $r3 = r0.<androidx.datastore.core.MultiProcessDataStore$tryGetReadFileLock$1: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r2 = (kotlin.coroutines.Continuation) r0;

        $r4 = staticinvoke <androidx.datastore.core.MultiProcessDataStore: java.lang.Object access$tryGetReadFileLock(androidx.datastore.core.MultiProcessDataStore,kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation)>($r3, null, $r2);

        return $r4;
    }

androidx.datastore.core.MultiProcessDataStore$writeActor$1
<androidx.datastore.core.MultiProcessDataStore$writeActor$1: androidx.datastore.core.MultiProcessDataStore this$0>
    void <init>(androidx.datastore.core.MultiProcessDataStore)
    {
        androidx.datastore.core.MultiProcessDataStore$writeActor$1 r0;
        androidx.datastore.core.MultiProcessDataStore $r1;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$writeActor$1;

        $r1 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        r0.<androidx.datastore.core.MultiProcessDataStore$writeActor$1: androidx.datastore.core.MultiProcessDataStore this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(java.lang.Throwable)
    {
        androidx.datastore.core.MultiProcessDataStore$writeActor$1 r0;
        java.lang.Throwable r1, r2, r4;
        androidx.datastore.core.MultiProcessDataStore r3, $r5;
        androidx.datastore.core.StorageConnection $r6;
        kotlinx.coroutines.flow.MutableStateFlow $r7;
        androidx.datastore.core.Final $r8;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$writeActor$1;

        r1 := @parameter0: java.lang.Throwable;

        if r1 == null goto label1;

        r2 = r1;

        r3 = r0.<androidx.datastore.core.MultiProcessDataStore$writeActor$1: androidx.datastore.core.MultiProcessDataStore this$0>;

        r4 = r2;

        $r7 = staticinvoke <androidx.datastore.core.MultiProcessDataStore: kotlinx.coroutines.flow.MutableStateFlow access$getDownstreamFlow$p(androidx.datastore.core.MultiProcessDataStore)>(r3);

        $r8 = new androidx.datastore.core.Final;

        specialinvoke $r8.<androidx.datastore.core.Final: void <init>(java.lang.Throwable)>(r4);

        interfaceinvoke $r7.<kotlinx.coroutines.flow.MutableStateFlow: void setValue(java.lang.Object)>($r8);

        goto label1;

     label1:
        $r5 = r0.<androidx.datastore.core.MultiProcessDataStore$writeActor$1: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r6 = staticinvoke <androidx.datastore.core.MultiProcessDataStore: androidx.datastore.core.StorageConnection access$getStorageConnection(androidx.datastore.core.MultiProcessDataStore)>($r5);

        interfaceinvoke $r6.<androidx.datastore.core.StorageConnection: void close()>();

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.datastore.core.MultiProcessDataStore$writeActor$1 r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$writeActor$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Throwable) r1;

        virtualinvoke r0.<androidx.datastore.core.MultiProcessDataStore$writeActor$1: void invoke(java.lang.Throwable)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

androidx.datastore.core.MultiProcessDataStore$writeActor$2
<androidx.datastore.core.MultiProcessDataStore$writeActor$2: androidx.datastore.core.MultiProcessDataStore$writeActor$2 INSTANCE>
    void <init>()
    {
        androidx.datastore.core.MultiProcessDataStore$writeActor$2 r0;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$writeActor$2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(2);

        return;
    }

    public final void invoke(androidx.datastore.core.Message$Update, java.lang.Throwable)
    {
        androidx.datastore.core.MultiProcessDataStore$writeActor$2 r0;
        androidx.datastore.core.Message$Update r1;
        java.lang.Throwable r2, $r5;
        kotlinx.coroutines.CompletableDeferred $r3;
        java.util.concurrent.CancellationException $r4;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$writeActor$2;

        r1 := @parameter0: androidx.datastore.core.Message$Update;

        r2 := @parameter1: java.lang.Throwable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "msg");

        $r3 = virtualinvoke r1.<androidx.datastore.core.Message$Update: kotlinx.coroutines.CompletableDeferred getAck()>();

        $r5 = r2;

        if r2 != null goto label1;

        $r4 = new java.util.concurrent.CancellationException;

        specialinvoke $r4.<java.util.concurrent.CancellationException: void <init>(java.lang.String)>("DataStore scope was cancelled before updateData could complete");

        $r5 = (java.lang.Throwable) $r4;

     label1:
        interfaceinvoke $r3.<kotlinx.coroutines.CompletableDeferred: boolean completeExceptionally(java.lang.Throwable)>($r5);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.datastore.core.MultiProcessDataStore$writeActor$2 r0;
        java.lang.Object r1, r2;
        java.lang.Throwable $r3;
        androidx.datastore.core.Message$Update $r4;
        kotlin.Unit $r5;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$writeActor$2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (androidx.datastore.core.Message$Update) r1;

        $r3 = (java.lang.Throwable) r2;

        virtualinvoke r0.<androidx.datastore.core.MultiProcessDataStore$writeActor$2: void invoke(androidx.datastore.core.Message$Update,java.lang.Throwable)>($r4, $r3);

        $r5 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r5;
    }

    static void <clinit>()
    {
        androidx.datastore.core.MultiProcessDataStore$writeActor$2 $r0;

        $r0 = new androidx.datastore.core.MultiProcessDataStore$writeActor$2;

        specialinvoke $r0.<androidx.datastore.core.MultiProcessDataStore$writeActor$2: void <init>()>();

        <androidx.datastore.core.MultiProcessDataStore$writeActor$2: androidx.datastore.core.MultiProcessDataStore$writeActor$2 INSTANCE> = $r0;

        return;
    }

androidx.datastore.core.MultiProcessDataStore$writeActor$3
<androidx.datastore.core.MultiProcessDataStore$writeActor$3: int label>
<androidx.datastore.core.MultiProcessDataStore$writeActor$3: java.lang.Object L$0>
<androidx.datastore.core.MultiProcessDataStore$writeActor$3: androidx.datastore.core.MultiProcessDataStore this$0>
    void <init>(androidx.datastore.core.MultiProcessDataStore, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$writeActor$3 r0;
        androidx.datastore.core.MultiProcessDataStore $r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$writeActor$3;

        $r1 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.datastore.core.MultiProcessDataStore$writeActor$3: androidx.datastore.core.MultiProcessDataStore this$0> = $r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.datastore.core.MultiProcessDataStore$writeActor$3 r0;
        java.lang.Object $r1, r3, $r5, $r8;
        androidx.datastore.core.Message$Update r2;
        int $i0;
        kotlin.Unit $r4;
        androidx.datastore.core.MultiProcessDataStore $r6;
        kotlin.coroutines.Continuation $r7;
        java.lang.IllegalStateException $r9;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$writeActor$3;

        $r1 := @parameter0: java.lang.Object;

        r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.datastore.core.MultiProcessDataStore$writeActor$3: int label>;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label4;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r5 = r0.<androidx.datastore.core.MultiProcessDataStore$writeActor$3: java.lang.Object L$0>;

        r2 = (androidx.datastore.core.Message$Update) $r5;

        $r6 = r0.<androidx.datastore.core.MultiProcessDataStore$writeActor$3: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r7 = (kotlin.coroutines.Continuation) r0;

        r0.<androidx.datastore.core.MultiProcessDataStore$writeActor$3: int label> = 1;

        $r8 = staticinvoke <androidx.datastore.core.MultiProcessDataStore: java.lang.Object access$handleUpdate(androidx.datastore.core.MultiProcessDataStore,androidx.datastore.core.Message$Update,kotlin.coroutines.Continuation)>($r6, r2, $r7);

        if $r8 != r3 goto label3;

        return r3;

     label2:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label3:
        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r4;

     label4:
        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r9;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$writeActor$3 r0, r3, $r4;
        java.lang.Object r1;
        kotlin.coroutines.Continuation $r2, $r6;
        androidx.datastore.core.MultiProcessDataStore $r5;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$writeActor$3;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r4 = new androidx.datastore.core.MultiProcessDataStore$writeActor$3;

        $r5 = r0.<androidx.datastore.core.MultiProcessDataStore$writeActor$3: androidx.datastore.core.MultiProcessDataStore this$0>;

        specialinvoke $r4.<androidx.datastore.core.MultiProcessDataStore$writeActor$3: void <init>(androidx.datastore.core.MultiProcessDataStore,kotlin.coroutines.Continuation)>($r5, $r2);

        r3 = $r4;

        r3.<androidx.datastore.core.MultiProcessDataStore$writeActor$3: java.lang.Object L$0> = r1;

        $r6 = (kotlin.coroutines.Continuation) r3;

        return $r6;
    }

    public final java.lang.Object invoke(androidx.datastore.core.Message$Update, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$writeActor$3 r0, $r5;
        androidx.datastore.core.Message$Update r1;
        kotlin.coroutines.Continuation r2, $r3;
        kotlin.Unit $r4;
        java.lang.Object $r6;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$writeActor$3;

        r1 := @parameter0: androidx.datastore.core.Message$Update;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = virtualinvoke r0.<androidx.datastore.core.MultiProcessDataStore$writeActor$3: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, r2);

        $r5 = (androidx.datastore.core.MultiProcessDataStore$writeActor$3) $r3;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.datastore.core.MultiProcessDataStore$writeActor$3: java.lang.Object invokeSuspend(java.lang.Object)>($r4);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.datastore.core.MultiProcessDataStore$writeActor$3 r0;
        java.lang.Object r1, r2, $r5;
        kotlin.coroutines.Continuation $r3;
        androidx.datastore.core.Message$Update $r4;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$writeActor$3;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (androidx.datastore.core.Message$Update) r1;

        $r3 = (kotlin.coroutines.Continuation) r2;

        $r5 = virtualinvoke r0.<androidx.datastore.core.MultiProcessDataStore$writeActor$3: java.lang.Object invoke(androidx.datastore.core.Message$Update,kotlin.coroutines.Continuation)>($r4, $r3);

        return $r5;
    }

androidx.datastore.core.MultiProcessDataStore$writeData$1
<androidx.datastore.core.MultiProcessDataStore$writeData$1: java.lang.Object L$0>
<androidx.datastore.core.MultiProcessDataStore$writeData$1: java.lang.Object result>
<androidx.datastore.core.MultiProcessDataStore$writeData$1: androidx.datastore.core.MultiProcessDataStore this$0>
<androidx.datastore.core.MultiProcessDataStore$writeData$1: int label>
    void <init>(androidx.datastore.core.MultiProcessDataStore, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$writeData$1 r0;
        androidx.datastore.core.MultiProcessDataStore r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$writeData$1;

        r1 := @parameter0: androidx.datastore.core.MultiProcessDataStore;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.datastore.core.MultiProcessDataStore$writeData$1: androidx.datastore.core.MultiProcessDataStore this$0> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>($r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.datastore.core.MultiProcessDataStore$writeData$1 r0;
        java.lang.Object $r1, $r4;
        int $i0, $i1;
        kotlin.coroutines.Continuation $r2;
        androidx.datastore.core.MultiProcessDataStore $r3;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$writeData$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.datastore.core.MultiProcessDataStore$writeData$1: java.lang.Object result> = $r1;

        $i0 = r0.<androidx.datastore.core.MultiProcessDataStore$writeData$1: int label>;

        $i1 = $i0 | -2147483648;

        r0.<androidx.datastore.core.MultiProcessDataStore$writeData$1: int label> = $i1;

        $r3 = r0.<androidx.datastore.core.MultiProcessDataStore$writeData$1: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r2 = (kotlin.coroutines.Continuation) r0;

        $r4 = virtualinvoke $r3.<androidx.datastore.core.MultiProcessDataStore: java.lang.Object writeData$datastore_core_release(java.lang.Object,boolean,kotlin.coroutines.Continuation)>(null, 0, $r2);

        return $r4;
    }

androidx.datastore.core.MultiProcessDataStore$writeData$2
<androidx.datastore.core.MultiProcessDataStore$writeData$2: int label>
<androidx.datastore.core.MultiProcessDataStore$writeData$2: java.lang.Object L$0>
<androidx.datastore.core.MultiProcessDataStore$writeData$2: kotlin.jvm.internal.Ref$IntRef $newVersion>
<androidx.datastore.core.MultiProcessDataStore$writeData$2: androidx.datastore.core.MultiProcessDataStore this$0>
<androidx.datastore.core.MultiProcessDataStore$writeData$2: java.lang.Object $newData>
<androidx.datastore.core.MultiProcessDataStore$writeData$2: boolean $updateCache>
    void <init>(kotlin.jvm.internal.Ref$IntRef, androidx.datastore.core.MultiProcessDataStore, java.lang.Object, boolean, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$writeData$2 r0;
        kotlin.jvm.internal.Ref$IntRef $r1;
        androidx.datastore.core.MultiProcessDataStore $r2;
        java.lang.Object $r3;
        boolean $z0;
        kotlin.coroutines.Continuation $r4;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$writeData$2;

        $r1 := @parameter0: kotlin.jvm.internal.Ref$IntRef;

        $r2 := @parameter1: androidx.datastore.core.MultiProcessDataStore;

        $r3 := @parameter2: java.lang.Object;

        $z0 := @parameter3: boolean;

        $r4 := @parameter4: kotlin.coroutines.Continuation;

        r0.<androidx.datastore.core.MultiProcessDataStore$writeData$2: kotlin.jvm.internal.Ref$IntRef $newVersion> = $r1;

        r0.<androidx.datastore.core.MultiProcessDataStore$writeData$2: androidx.datastore.core.MultiProcessDataStore this$0> = $r2;

        r0.<androidx.datastore.core.MultiProcessDataStore$writeData$2: java.lang.Object $newData> = $r3;

        r0.<androidx.datastore.core.MultiProcessDataStore$writeData$2: boolean $updateCache> = $z0;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r4);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.datastore.core.MultiProcessDataStore$writeData$2 r0;
        java.lang.Object $r1, r3, $r7, $r9, $r10, $r14, $r16;
        androidx.datastore.core.WriteScope $r2;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        androidx.datastore.core.MultiProcessDataStore $r4, $r11;
        kotlinx.coroutines.flow.MutableStateFlow $r5;
        androidx.datastore.core.Data $r6;
        kotlin.jvm.internal.Ref$IntRef $r8, $r12;
        androidx.datastore.core.SharedCounter $r13;
        kotlin.coroutines.Continuation $r15;
        java.lang.IllegalStateException $r17;
        kotlin.Unit $r18;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$writeData$2;

        $r1 := @parameter0: java.lang.Object;

        r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.datastore.core.MultiProcessDataStore$writeData$2: int label>;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label7;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r10 = r0.<androidx.datastore.core.MultiProcessDataStore$writeData$2: java.lang.Object L$0>;

        $r2 = (androidx.datastore.core.WriteScope) $r10;

        $r12 = r0.<androidx.datastore.core.MultiProcessDataStore$writeData$2: kotlin.jvm.internal.Ref$IntRef $newVersion>;

        $r11 = r0.<androidx.datastore.core.MultiProcessDataStore$writeData$2: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r13 = staticinvoke <androidx.datastore.core.MultiProcessDataStore: androidx.datastore.core.SharedCounter access$getSharedCounter(androidx.datastore.core.MultiProcessDataStore)>($r11);

        $i2 = virtualinvoke $r13.<androidx.datastore.core.SharedCounter: int incrementAndGetValue()>();

        $r12.<kotlin.jvm.internal.Ref$IntRef: int element> = $i2;

        $r14 = r0.<androidx.datastore.core.MultiProcessDataStore$writeData$2: java.lang.Object $newData>;

        $r15 = (kotlin.coroutines.Continuation) r0;

        r0.<androidx.datastore.core.MultiProcessDataStore$writeData$2: int label> = 1;

        $r16 = interfaceinvoke $r2.<androidx.datastore.core.WriteScope: java.lang.Object writeData(java.lang.Object,kotlin.coroutines.Continuation)>($r14, $r15);

        if $r16 != r3 goto label3;

        return r3;

     label2:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label3:
        $z0 = r0.<androidx.datastore.core.MultiProcessDataStore$writeData$2: boolean $updateCache>;

        if $z0 == 0 goto label6;

        $r4 = r0.<androidx.datastore.core.MultiProcessDataStore$writeData$2: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r5 = staticinvoke <androidx.datastore.core.MultiProcessDataStore: kotlinx.coroutines.flow.MutableStateFlow access$getDownstreamFlow$p(androidx.datastore.core.MultiProcessDataStore)>($r4);

        $r6 = new androidx.datastore.core.Data;

        $r9 = r0.<androidx.datastore.core.MultiProcessDataStore$writeData$2: java.lang.Object $newData>;

        $r7 = r0.<androidx.datastore.core.MultiProcessDataStore$writeData$2: java.lang.Object $newData>;

        if $r7 == null goto label4;

        $i3 = virtualinvoke $r7.<java.lang.Object: int hashCode()>();

        goto label5;

     label4:
        $i3 = 0;

     label5:
        $r8 = r0.<androidx.datastore.core.MultiProcessDataStore$writeData$2: kotlin.jvm.internal.Ref$IntRef $newVersion>;

        $i1 = $r8.<kotlin.jvm.internal.Ref$IntRef: int element>;

        specialinvoke $r6.<androidx.datastore.core.Data: void <init>(java.lang.Object,int,int)>($r9, $i3, $i1);

        interfaceinvoke $r5.<kotlinx.coroutines.flow.MutableStateFlow: void setValue(java.lang.Object)>($r6);

     label6:
        $r18 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r18;

     label7:
        $r17 = new java.lang.IllegalStateException;

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r17;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$writeData$2 r0, r3, $r4;
        java.lang.Object r1, $r5;
        kotlin.coroutines.Continuation $r2, $r8;
        boolean $z0;
        androidx.datastore.core.MultiProcessDataStore $r6;
        kotlin.jvm.internal.Ref$IntRef $r7;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$writeData$2;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r4 = new androidx.datastore.core.MultiProcessDataStore$writeData$2;

        $r7 = r0.<androidx.datastore.core.MultiProcessDataStore$writeData$2: kotlin.jvm.internal.Ref$IntRef $newVersion>;

        $r6 = r0.<androidx.datastore.core.MultiProcessDataStore$writeData$2: androidx.datastore.core.MultiProcessDataStore this$0>;

        $r5 = r0.<androidx.datastore.core.MultiProcessDataStore$writeData$2: java.lang.Object $newData>;

        $z0 = r0.<androidx.datastore.core.MultiProcessDataStore$writeData$2: boolean $updateCache>;

        specialinvoke $r4.<androidx.datastore.core.MultiProcessDataStore$writeData$2: void <init>(kotlin.jvm.internal.Ref$IntRef,androidx.datastore.core.MultiProcessDataStore,java.lang.Object,boolean,kotlin.coroutines.Continuation)>($r7, $r6, $r5, $z0, $r2);

        r3 = $r4;

        r3.<androidx.datastore.core.MultiProcessDataStore$writeData$2: java.lang.Object L$0> = r1;

        $r8 = (kotlin.coroutines.Continuation) r3;

        return $r8;
    }

    public final java.lang.Object invoke(androidx.datastore.core.WriteScope, kotlin.coroutines.Continuation)
    {
        androidx.datastore.core.MultiProcessDataStore$writeData$2 r0, $r5;
        androidx.datastore.core.WriteScope r1;
        kotlin.coroutines.Continuation r2, $r3;
        kotlin.Unit $r4;
        java.lang.Object $r6;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$writeData$2;

        r1 := @parameter0: androidx.datastore.core.WriteScope;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = virtualinvoke r0.<androidx.datastore.core.MultiProcessDataStore$writeData$2: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, r2);

        $r5 = (androidx.datastore.core.MultiProcessDataStore$writeData$2) $r3;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.datastore.core.MultiProcessDataStore$writeData$2: java.lang.Object invokeSuspend(java.lang.Object)>($r4);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.datastore.core.MultiProcessDataStore$writeData$2 r0;
        java.lang.Object r1, r2, $r5;
        kotlin.coroutines.Continuation $r3;
        androidx.datastore.core.WriteScope $r4;

        r0 := @this: androidx.datastore.core.MultiProcessDataStore$writeData$2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (androidx.datastore.core.WriteScope) r1;

        $r3 = (kotlin.coroutines.Continuation) r2;

        $r5 = virtualinvoke r0.<androidx.datastore.core.MultiProcessDataStore$writeData$2: java.lang.Object invoke(androidx.datastore.core.WriteScope,kotlin.coroutines.Continuation)>($r4, $r3);

        return $r5;
    }

