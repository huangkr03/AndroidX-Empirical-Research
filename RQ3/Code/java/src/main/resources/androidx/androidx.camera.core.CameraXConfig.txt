androidx.camera.core.CameraXConfig
<androidx.camera.core.CameraXConfig: androidx.camera.core.impl.Config$Option OPTION_CAMERA_FACTORY_PROVIDER>
<androidx.camera.core.CameraXConfig: androidx.camera.core.impl.Config$Option OPTION_DEVICE_SURFACE_MANAGER_PROVIDER>
<androidx.camera.core.CameraXConfig: androidx.camera.core.impl.Config$Option OPTION_USECASE_CONFIG_FACTORY_PROVIDER>
<androidx.camera.core.CameraXConfig: androidx.camera.core.impl.Config$Option OPTION_CAMERA_EXECUTOR>
<androidx.camera.core.CameraXConfig: androidx.camera.core.impl.Config$Option OPTION_SCHEDULER_HANDLER>
<androidx.camera.core.CameraXConfig: androidx.camera.core.impl.Config$Option OPTION_MIN_LOGGING_LEVEL>
<androidx.camera.core.CameraXConfig: androidx.camera.core.impl.Config$Option OPTION_AVAILABLE_CAMERAS_LIMITER>
<androidx.camera.core.CameraXConfig: androidx.camera.core.impl.OptionsBundle mConfig>
    void <init>(androidx.camera.core.impl.OptionsBundle)
    {
        androidx.camera.core.CameraXConfig r0;
        androidx.camera.core.impl.OptionsBundle r1;

        r0 := @this: androidx.camera.core.CameraXConfig;

        r1 := @parameter0: androidx.camera.core.impl.OptionsBundle;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.core.CameraXConfig: androidx.camera.core.impl.OptionsBundle mConfig> = r1;

        return;
    }

    public androidx.camera.core.impl.CameraFactory$Provider getCameraFactoryProvider(androidx.camera.core.impl.CameraFactory$Provider)
    {
        androidx.camera.core.CameraXConfig r0;
        androidx.camera.core.impl.CameraFactory$Provider r1, $r5;
        androidx.camera.core.impl.Config$Option $r2;
        androidx.camera.core.impl.OptionsBundle $r3;
        java.lang.Object $r4;

        r0 := @this: androidx.camera.core.CameraXConfig;

        r1 := @parameter0: androidx.camera.core.impl.CameraFactory$Provider;

        $r3 = r0.<androidx.camera.core.CameraXConfig: androidx.camera.core.impl.OptionsBundle mConfig>;

        $r2 = <androidx.camera.core.CameraXConfig: androidx.camera.core.impl.Config$Option OPTION_CAMERA_FACTORY_PROVIDER>;

        $r4 = virtualinvoke $r3.<androidx.camera.core.impl.OptionsBundle: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r2, r1);

        $r5 = (androidx.camera.core.impl.CameraFactory$Provider) $r4;

        return $r5;
    }

    public androidx.camera.core.impl.CameraDeviceSurfaceManager$Provider getDeviceSurfaceManagerProvider(androidx.camera.core.impl.CameraDeviceSurfaceManager$Provider)
    {
        androidx.camera.core.CameraXConfig r0;
        androidx.camera.core.impl.CameraDeviceSurfaceManager$Provider r1, $r5;
        androidx.camera.core.impl.Config$Option $r2;
        androidx.camera.core.impl.OptionsBundle $r3;
        java.lang.Object $r4;

        r0 := @this: androidx.camera.core.CameraXConfig;

        r1 := @parameter0: androidx.camera.core.impl.CameraDeviceSurfaceManager$Provider;

        $r3 = r0.<androidx.camera.core.CameraXConfig: androidx.camera.core.impl.OptionsBundle mConfig>;

        $r2 = <androidx.camera.core.CameraXConfig: androidx.camera.core.impl.Config$Option OPTION_DEVICE_SURFACE_MANAGER_PROVIDER>;

        $r4 = virtualinvoke $r3.<androidx.camera.core.impl.OptionsBundle: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r2, r1);

        $r5 = (androidx.camera.core.impl.CameraDeviceSurfaceManager$Provider) $r4;

        return $r5;
    }

    public androidx.camera.core.impl.UseCaseConfigFactory$Provider getUseCaseConfigFactoryProvider(androidx.camera.core.impl.UseCaseConfigFactory$Provider)
    {
        androidx.camera.core.CameraXConfig r0;
        androidx.camera.core.impl.UseCaseConfigFactory$Provider r1, $r5;
        androidx.camera.core.impl.Config$Option $r2;
        androidx.camera.core.impl.OptionsBundle $r3;
        java.lang.Object $r4;

        r0 := @this: androidx.camera.core.CameraXConfig;

        r1 := @parameter0: androidx.camera.core.impl.UseCaseConfigFactory$Provider;

        $r3 = r0.<androidx.camera.core.CameraXConfig: androidx.camera.core.impl.OptionsBundle mConfig>;

        $r2 = <androidx.camera.core.CameraXConfig: androidx.camera.core.impl.Config$Option OPTION_USECASE_CONFIG_FACTORY_PROVIDER>;

        $r4 = virtualinvoke $r3.<androidx.camera.core.impl.OptionsBundle: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r2, r1);

        $r5 = (androidx.camera.core.impl.UseCaseConfigFactory$Provider) $r4;

        return $r5;
    }

    public java.util.concurrent.Executor getCameraExecutor(java.util.concurrent.Executor)
    {
        androidx.camera.core.CameraXConfig r0;
        java.util.concurrent.Executor r1, $r5;
        androidx.camera.core.impl.Config$Option $r2;
        androidx.camera.core.impl.OptionsBundle $r3;
        java.lang.Object $r4;

        r0 := @this: androidx.camera.core.CameraXConfig;

        r1 := @parameter0: java.util.concurrent.Executor;

        $r3 = r0.<androidx.camera.core.CameraXConfig: androidx.camera.core.impl.OptionsBundle mConfig>;

        $r2 = <androidx.camera.core.CameraXConfig: androidx.camera.core.impl.Config$Option OPTION_CAMERA_EXECUTOR>;

        $r4 = virtualinvoke $r3.<androidx.camera.core.impl.OptionsBundle: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r2, r1);

        $r5 = (java.util.concurrent.Executor) $r4;

        return $r5;
    }

    public android.os.Handler getSchedulerHandler(android.os.Handler)
    {
        androidx.camera.core.CameraXConfig r0;
        android.os.Handler r1, $r5;
        androidx.camera.core.impl.Config$Option $r2;
        androidx.camera.core.impl.OptionsBundle $r3;
        java.lang.Object $r4;

        r0 := @this: androidx.camera.core.CameraXConfig;

        r1 := @parameter0: android.os.Handler;

        $r3 = r0.<androidx.camera.core.CameraXConfig: androidx.camera.core.impl.OptionsBundle mConfig>;

        $r2 = <androidx.camera.core.CameraXConfig: androidx.camera.core.impl.Config$Option OPTION_SCHEDULER_HANDLER>;

        $r4 = virtualinvoke $r3.<androidx.camera.core.impl.OptionsBundle: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r2, r1);

        $r5 = (android.os.Handler) $r4;

        return $r5;
    }

    public int getMinimumLoggingLevel()
    {
        androidx.camera.core.CameraXConfig r0;
        androidx.camera.core.impl.OptionsBundle $r1;
        androidx.camera.core.impl.Config$Option $r2;
        java.lang.Integer $r3, $r5;
        java.lang.Object $r4;
        int $i0;

        r0 := @this: androidx.camera.core.CameraXConfig;

        $r1 = r0.<androidx.camera.core.CameraXConfig: androidx.camera.core.impl.OptionsBundle mConfig>;

        $r2 = <androidx.camera.core.CameraXConfig: androidx.camera.core.impl.Config$Option OPTION_MIN_LOGGING_LEVEL>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r4 = virtualinvoke $r1.<androidx.camera.core.impl.OptionsBundle: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r2, $r3);

        $r5 = (java.lang.Integer) $r4;

        $i0 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    public androidx.camera.core.CameraSelector getAvailableCamerasLimiter(androidx.camera.core.CameraSelector)
    {
        androidx.camera.core.CameraXConfig r0;
        androidx.camera.core.CameraSelector r1, $r5;
        androidx.camera.core.impl.Config$Option $r2;
        androidx.camera.core.impl.OptionsBundle $r3;
        java.lang.Object $r4;

        r0 := @this: androidx.camera.core.CameraXConfig;

        r1 := @parameter0: androidx.camera.core.CameraSelector;

        $r3 = r0.<androidx.camera.core.CameraXConfig: androidx.camera.core.impl.OptionsBundle mConfig>;

        $r2 = <androidx.camera.core.CameraXConfig: androidx.camera.core.impl.Config$Option OPTION_AVAILABLE_CAMERAS_LIMITER>;

        $r4 = virtualinvoke $r3.<androidx.camera.core.impl.OptionsBundle: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r2, r1);

        $r5 = (androidx.camera.core.CameraSelector) $r4;

        return $r5;
    }

    public androidx.camera.core.impl.Config getConfig()
    {
        androidx.camera.core.CameraXConfig r0;
        androidx.camera.core.impl.OptionsBundle $r1;

        r0 := @this: androidx.camera.core.CameraXConfig;

        $r1 = r0.<androidx.camera.core.CameraXConfig: androidx.camera.core.impl.OptionsBundle mConfig>;

        return $r1;
    }

    static void <clinit>()
    {
        androidx.camera.core.impl.Config$Option $r0, $r1, $r2, $r3, $r4, $r6, $r7;
        java.lang.Class $r5;

        $r0 = staticinvoke <androidx.camera.core.impl.Config$Option: androidx.camera.core.impl.Config$Option create(java.lang.String,java.lang.Class)>("camerax.core.appConfig.cameraFactoryProvider", class "Landroidx/camera/core/impl/CameraFactory$Provider;");

        <androidx.camera.core.CameraXConfig: androidx.camera.core.impl.Config$Option OPTION_CAMERA_FACTORY_PROVIDER> = $r0;

        $r1 = staticinvoke <androidx.camera.core.impl.Config$Option: androidx.camera.core.impl.Config$Option create(java.lang.String,java.lang.Class)>("camerax.core.appConfig.deviceSurfaceManagerProvider", class "Landroidx/camera/core/impl/CameraDeviceSurfaceManager$Provider;");

        <androidx.camera.core.CameraXConfig: androidx.camera.core.impl.Config$Option OPTION_DEVICE_SURFACE_MANAGER_PROVIDER> = $r1;

        $r2 = staticinvoke <androidx.camera.core.impl.Config$Option: androidx.camera.core.impl.Config$Option create(java.lang.String,java.lang.Class)>("camerax.core.appConfig.useCaseConfigFactoryProvider", class "Landroidx/camera/core/impl/UseCaseConfigFactory$Provider;");

        <androidx.camera.core.CameraXConfig: androidx.camera.core.impl.Config$Option OPTION_USECASE_CONFIG_FACTORY_PROVIDER> = $r2;

        $r3 = staticinvoke <androidx.camera.core.impl.Config$Option: androidx.camera.core.impl.Config$Option create(java.lang.String,java.lang.Class)>("camerax.core.appConfig.cameraExecutor", class "Ljava/util/concurrent/Executor;");

        <androidx.camera.core.CameraXConfig: androidx.camera.core.impl.Config$Option OPTION_CAMERA_EXECUTOR> = $r3;

        $r4 = staticinvoke <androidx.camera.core.impl.Config$Option: androidx.camera.core.impl.Config$Option create(java.lang.String,java.lang.Class)>("camerax.core.appConfig.schedulerHandler", class "Landroid/os/Handler;");

        <androidx.camera.core.CameraXConfig: androidx.camera.core.impl.Config$Option OPTION_SCHEDULER_HANDLER> = $r4;

        $r5 = <java.lang.Integer: java.lang.Class TYPE>;

        $r6 = staticinvoke <androidx.camera.core.impl.Config$Option: androidx.camera.core.impl.Config$Option create(java.lang.String,java.lang.Class)>("camerax.core.appConfig.minimumLoggingLevel", $r5);

        <androidx.camera.core.CameraXConfig: androidx.camera.core.impl.Config$Option OPTION_MIN_LOGGING_LEVEL> = $r6;

        $r7 = staticinvoke <androidx.camera.core.impl.Config$Option: androidx.camera.core.impl.Config$Option create(java.lang.String,java.lang.Class)>("camerax.core.appConfig.availableCamerasLimiter", class "Landroidx/camera/core/CameraSelector;");

        <androidx.camera.core.CameraXConfig: androidx.camera.core.impl.Config$Option OPTION_AVAILABLE_CAMERAS_LIMITER> = $r7;

        return;
    }

androidx.camera.core.CameraXConfig$Builder
<androidx.camera.core.CameraXConfig$Builder: androidx.camera.core.impl.MutableOptionsBundle mMutableConfig>
    public void <init>()
    {
        androidx.camera.core.CameraXConfig$Builder r0;
        androidx.camera.core.impl.MutableOptionsBundle $r1;

        r0 := @this: androidx.camera.core.CameraXConfig$Builder;

        $r1 = staticinvoke <androidx.camera.core.impl.MutableOptionsBundle: androidx.camera.core.impl.MutableOptionsBundle create()>();

        specialinvoke r0.<androidx.camera.core.CameraXConfig$Builder: void <init>(androidx.camera.core.impl.MutableOptionsBundle)>($r1);

        return;
    }

    private void <init>(androidx.camera.core.impl.MutableOptionsBundle)
    {
        androidx.camera.core.CameraXConfig$Builder r0;
        androidx.camera.core.impl.MutableOptionsBundle r1;
        java.lang.Class r2;
        androidx.camera.core.impl.Config$Option $r3;
        java.lang.Object $r4;
        boolean $z0;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11;
        java.lang.String $r12;

        r0 := @this: androidx.camera.core.CameraXConfig$Builder;

        r1 := @parameter0: androidx.camera.core.impl.MutableOptionsBundle;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.core.CameraXConfig$Builder: androidx.camera.core.impl.MutableOptionsBundle mMutableConfig> = r1;

        $r3 = <androidx.camera.core.internal.TargetConfig: androidx.camera.core.impl.Config$Option OPTION_TARGET_CLASS>;

        $r4 = virtualinvoke r1.<androidx.camera.core.impl.MutableOptionsBundle: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, null);

        r2 = (java.lang.Class) $r4;

        if r2 == null goto label1;

        $z0 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>(class "Landroidx/camera/core/CameraX;");

        if $z0 != 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid target class configuration for ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r6;

     label1:
        virtualinvoke r0.<androidx.camera.core.CameraXConfig$Builder: androidx.camera.core.CameraXConfig$Builder setTargetClass(java.lang.Class)>(class "Landroidx/camera/core/CameraX;");

        return;
    }

    public static androidx.camera.core.CameraXConfig$Builder fromConfig(androidx.camera.core.CameraXConfig)
    {
        androidx.camera.core.CameraXConfig r0;
        androidx.camera.core.CameraXConfig$Builder $r1;
        androidx.camera.core.impl.MutableOptionsBundle $r2;

        r0 := @parameter0: androidx.camera.core.CameraXConfig;

        $r1 = new androidx.camera.core.CameraXConfig$Builder;

        $r2 = staticinvoke <androidx.camera.core.impl.MutableOptionsBundle: androidx.camera.core.impl.MutableOptionsBundle 'from'(androidx.camera.core.impl.Config)>(r0);

        specialinvoke $r1.<androidx.camera.core.CameraXConfig$Builder: void <init>(androidx.camera.core.impl.MutableOptionsBundle)>($r2);

        return $r1;
    }

    public androidx.camera.core.CameraXConfig$Builder setCameraFactoryProvider(androidx.camera.core.impl.CameraFactory$Provider)
    {
        androidx.camera.core.CameraXConfig$Builder r0;
        androidx.camera.core.impl.CameraFactory$Provider r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.CameraXConfig$Builder;

        r1 := @parameter0: androidx.camera.core.impl.CameraFactory$Provider;

        $r2 = specialinvoke r0.<androidx.camera.core.CameraXConfig$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.CameraXConfig: androidx.camera.core.impl.Config$Option OPTION_CAMERA_FACTORY_PROVIDER>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    public androidx.camera.core.CameraXConfig$Builder setDeviceSurfaceManagerProvider(androidx.camera.core.impl.CameraDeviceSurfaceManager$Provider)
    {
        androidx.camera.core.CameraXConfig$Builder r0;
        androidx.camera.core.impl.CameraDeviceSurfaceManager$Provider r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.CameraXConfig$Builder;

        r1 := @parameter0: androidx.camera.core.impl.CameraDeviceSurfaceManager$Provider;

        $r2 = specialinvoke r0.<androidx.camera.core.CameraXConfig$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.CameraXConfig: androidx.camera.core.impl.Config$Option OPTION_DEVICE_SURFACE_MANAGER_PROVIDER>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    public androidx.camera.core.CameraXConfig$Builder setUseCaseConfigFactoryProvider(androidx.camera.core.impl.UseCaseConfigFactory$Provider)
    {
        androidx.camera.core.CameraXConfig$Builder r0;
        androidx.camera.core.impl.UseCaseConfigFactory$Provider r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.CameraXConfig$Builder;

        r1 := @parameter0: androidx.camera.core.impl.UseCaseConfigFactory$Provider;

        $r2 = specialinvoke r0.<androidx.camera.core.CameraXConfig$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.CameraXConfig: androidx.camera.core.impl.Config$Option OPTION_USECASE_CONFIG_FACTORY_PROVIDER>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    public androidx.camera.core.CameraXConfig$Builder setCameraExecutor(java.util.concurrent.Executor)
    {
        androidx.camera.core.CameraXConfig$Builder r0;
        java.util.concurrent.Executor r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.CameraXConfig$Builder;

        r1 := @parameter0: java.util.concurrent.Executor;

        $r2 = specialinvoke r0.<androidx.camera.core.CameraXConfig$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.CameraXConfig: androidx.camera.core.impl.Config$Option OPTION_CAMERA_EXECUTOR>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    public androidx.camera.core.CameraXConfig$Builder setSchedulerHandler(android.os.Handler)
    {
        androidx.camera.core.CameraXConfig$Builder r0;
        android.os.Handler r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.CameraXConfig$Builder;

        r1 := @parameter0: android.os.Handler;

        $r2 = specialinvoke r0.<androidx.camera.core.CameraXConfig$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.CameraXConfig: androidx.camera.core.impl.Config$Option OPTION_SCHEDULER_HANDLER>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    public androidx.camera.core.CameraXConfig$Builder setMinimumLoggingLevel(int)
    {
        androidx.camera.core.CameraXConfig$Builder r0;
        int i0;
        androidx.camera.core.impl.MutableConfig $r1;
        androidx.camera.core.impl.Config$Option $r2;
        java.lang.Integer $r3;

        r0 := @this: androidx.camera.core.CameraXConfig$Builder;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<androidx.camera.core.CameraXConfig$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r2 = <androidx.camera.core.CameraXConfig: androidx.camera.core.impl.Config$Option OPTION_MIN_LOGGING_LEVEL>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r1.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r2, $r3);

        return r0;
    }

    public androidx.camera.core.CameraXConfig$Builder setAvailableCamerasLimiter(androidx.camera.core.CameraSelector)
    {
        androidx.camera.core.CameraXConfig$Builder r0;
        androidx.camera.core.CameraSelector r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.CameraXConfig$Builder;

        r1 := @parameter0: androidx.camera.core.CameraSelector;

        $r2 = specialinvoke r0.<androidx.camera.core.CameraXConfig$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.CameraXConfig: androidx.camera.core.impl.Config$Option OPTION_AVAILABLE_CAMERAS_LIMITER>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    private androidx.camera.core.impl.MutableConfig getMutableConfig()
    {
        androidx.camera.core.CameraXConfig$Builder r0;
        androidx.camera.core.impl.MutableOptionsBundle $r1;

        r0 := @this: androidx.camera.core.CameraXConfig$Builder;

        $r1 = r0.<androidx.camera.core.CameraXConfig$Builder: androidx.camera.core.impl.MutableOptionsBundle mMutableConfig>;

        return $r1;
    }

    public androidx.camera.core.CameraXConfig build()
    {
        androidx.camera.core.CameraXConfig$Builder r0;
        androidx.camera.core.CameraXConfig $r1;
        androidx.camera.core.impl.MutableOptionsBundle $r2;
        androidx.camera.core.impl.OptionsBundle $r3;

        r0 := @this: androidx.camera.core.CameraXConfig$Builder;

        $r1 = new androidx.camera.core.CameraXConfig;

        $r2 = r0.<androidx.camera.core.CameraXConfig$Builder: androidx.camera.core.impl.MutableOptionsBundle mMutableConfig>;

        $r3 = staticinvoke <androidx.camera.core.impl.OptionsBundle: androidx.camera.core.impl.OptionsBundle 'from'(androidx.camera.core.impl.Config)>($r2);

        specialinvoke $r1.<androidx.camera.core.CameraXConfig: void <init>(androidx.camera.core.impl.OptionsBundle)>($r3);

        return $r1;
    }

    public androidx.camera.core.CameraXConfig$Builder setTargetClass(java.lang.Class)
    {
        androidx.camera.core.CameraXConfig$Builder r0;
        java.lang.Class r1;
        java.lang.String r2, $r9;
        androidx.camera.core.impl.MutableConfig $r3, $r5;
        androidx.camera.core.impl.Config$Option $r4, $r6;
        java.lang.Object $r7;
        java.lang.StringBuilder $r8, $r10, $r11, $r13;
        java.util.UUID $r12;

        r0 := @this: androidx.camera.core.CameraXConfig$Builder;

        r1 := @parameter0: java.lang.Class;

        $r3 = specialinvoke r0.<androidx.camera.core.CameraXConfig$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r4 = <androidx.camera.core.internal.TargetConfig: androidx.camera.core.impl.Config$Option OPTION_TARGET_CLASS>;

        interfaceinvoke $r3.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r4, r1);

        $r5 = specialinvoke r0.<androidx.camera.core.CameraXConfig$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r6 = <androidx.camera.core.internal.TargetConfig: androidx.camera.core.impl.Config$Option OPTION_TARGET_NAME>;

        $r7 = interfaceinvoke $r5.<androidx.camera.core.impl.MutableConfig: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r6, null);

        if null != $r7 goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke r1.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r12 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        r2 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<androidx.camera.core.CameraXConfig$Builder: androidx.camera.core.CameraXConfig$Builder setTargetName(java.lang.String)>(r2);

     label1:
        return r0;
    }

    public androidx.camera.core.CameraXConfig$Builder setTargetName(java.lang.String)
    {
        androidx.camera.core.CameraXConfig$Builder r0;
        java.lang.String r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.CameraXConfig$Builder;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<androidx.camera.core.CameraXConfig$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.internal.TargetConfig: androidx.camera.core.impl.Config$Option OPTION_TARGET_NAME>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    public volatile java.lang.Object setTargetName(java.lang.String)
    {
        androidx.camera.core.CameraXConfig$Builder r0, $r2;
        java.lang.String r1;

        r0 := @this: androidx.camera.core.CameraXConfig$Builder;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<androidx.camera.core.CameraXConfig$Builder: androidx.camera.core.CameraXConfig$Builder setTargetName(java.lang.String)>(r1);

        return $r2;
    }

    public volatile java.lang.Object setTargetClass(java.lang.Class)
    {
        androidx.camera.core.CameraXConfig$Builder r0, $r2;
        java.lang.Class r1;

        r0 := @this: androidx.camera.core.CameraXConfig$Builder;

        r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<androidx.camera.core.CameraXConfig$Builder: androidx.camera.core.CameraXConfig$Builder setTargetClass(java.lang.Class)>(r1);

        return $r2;
    }

androidx.camera.core.CameraXConfig$Provider
<androidx.camera.core.CameraXConfig$Provider: androidx.camera.core.CameraXConfig getCameraXConfig()>
