androidx.room.compiler.processing.ksp.KspProcessingEnv
<androidx.room.compiler.processing.ksp.KspProcessingEnv: java.util.Map options>
<androidx.room.compiler.processing.ksp.KspProcessingEnv: androidx.room.compiler.processing.XProcessingEnvConfig config>
<androidx.room.compiler.processing.ksp.KspProcessingEnv: androidx.room.compiler.processing.XProcessingEnv$Backend backend>
<androidx.room.compiler.processing.ksp.KspProcessingEnv: java.util.Map ksFileMemberContainers>
<androidx.room.compiler.processing.ksp.KspProcessingEnv: kotlin.Lazy ksTypeVarianceResolver$delegate>
<androidx.room.compiler.processing.ksp.KspProcessingEnv: com.google.devtools.ksp.processing.Resolver _resolver>
<androidx.room.compiler.processing.ksp.KspProcessingEnv: androidx.room.compiler.processing.javac.XTypeElementStore typeElementStore>
<androidx.room.compiler.processing.ksp.KspProcessingEnv: androidx.room.compiler.processing.XMessager messager>
<androidx.room.compiler.processing.ksp.KspProcessingEnv: kotlin.Lazy arrayTypeFactory$delegate>
<androidx.room.compiler.processing.ksp.KspProcessingEnv: androidx.room.compiler.processing.XFiler filer>
    public void <init>(java.util.Map, com.google.devtools.ksp.processing.CodeGenerator, com.google.devtools.ksp.processing.KSPLogger, androidx.room.compiler.processing.XProcessingEnvConfig)
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv r0;
        java.util.Map r1, $r7;
        com.google.devtools.ksp.processing.CodeGenerator r2;
        com.google.devtools.ksp.processing.KSPLogger r3;
        androidx.room.compiler.processing.XProcessingEnvConfig r4;
        androidx.room.compiler.processing.XProcessingEnv$Backend $r5;
        java.util.LinkedHashMap $r6;
        androidx.room.compiler.processing.ksp.KspProcessingEnv$ksTypeVarianceResolver$2 $r8;
        kotlin.jvm.functions.Function0 $r9, $r21;
        kotlin.Lazy $r10, $r22;
        androidx.room.compiler.processing.javac.XTypeElementStore $r11;
        androidx.room.compiler.processing.ksp.KspProcessingEnv$typeElementStore$1 $r12;
        androidx.room.compiler.processing.ksp.KspProcessingEnv$typeElementStore$2 $r13;
        androidx.room.compiler.processing.ksp.KspProcessingEnv$typeElementStore$3 $r14;
        kotlin.jvm.functions.Function1 $r15, $r16, $r17;
        androidx.room.compiler.processing.ksp.KspMessager $r18;
        androidx.room.compiler.processing.XMessager $r19, $r24;
        androidx.room.compiler.processing.ksp.KspProcessingEnv$arrayTypeFactory$2 $r20;
        androidx.room.compiler.processing.ksp.KspFiler $r23;
        androidx.room.compiler.processing.XFiler $r25;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: com.google.devtools.ksp.processing.CodeGenerator;

        r3 := @parameter2: com.google.devtools.ksp.processing.KSPLogger;

        r4 := @parameter3: androidx.room.compiler.processing.XProcessingEnvConfig;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "options");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "codeGenerator");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "logger");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "config");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv: java.util.Map options> = r1;

        r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv: androidx.room.compiler.processing.XProcessingEnvConfig config> = r4;

        $r5 = <androidx.room.compiler.processing.XProcessingEnv$Backend: androidx.room.compiler.processing.XProcessingEnv$Backend KSP>;

        r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv: androidx.room.compiler.processing.XProcessingEnv$Backend backend> = $r5;

        $r6 = new java.util.LinkedHashMap;

        specialinvoke $r6.<java.util.LinkedHashMap: void <init>()>();

        $r7 = (java.util.Map) $r6;

        r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv: java.util.Map ksFileMemberContainers> = $r7;

        $r8 = new androidx.room.compiler.processing.ksp.KspProcessingEnv$ksTypeVarianceResolver$2;

        specialinvoke $r8.<androidx.room.compiler.processing.ksp.KspProcessingEnv$ksTypeVarianceResolver$2: void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv)>(r0);

        $r9 = (kotlin.jvm.functions.Function0) $r8;

        $r10 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)>($r9);

        r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv: kotlin.Lazy ksTypeVarianceResolver$delegate> = $r10;

        $r11 = new androidx.room.compiler.processing.javac.XTypeElementStore;

        $r12 = new androidx.room.compiler.processing.ksp.KspProcessingEnv$typeElementStore$1;

        specialinvoke $r12.<androidx.room.compiler.processing.ksp.KspProcessingEnv$typeElementStore$1: void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv)>(r0);

        $r15 = (kotlin.jvm.functions.Function1) $r12;

        $r13 = <androidx.room.compiler.processing.ksp.KspProcessingEnv$typeElementStore$2: androidx.room.compiler.processing.ksp.KspProcessingEnv$typeElementStore$2 INSTANCE>;

        $r16 = (kotlin.jvm.functions.Function1) $r13;

        $r14 = new androidx.room.compiler.processing.ksp.KspProcessingEnv$typeElementStore$3;

        specialinvoke $r14.<androidx.room.compiler.processing.ksp.KspProcessingEnv$typeElementStore$3: void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv)>(r0);

        $r17 = (kotlin.jvm.functions.Function1) $r14;

        specialinvoke $r11.<androidx.room.compiler.processing.javac.XTypeElementStore: void <init>(kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1)>($r15, $r16, $r17);

        r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv: androidx.room.compiler.processing.javac.XTypeElementStore typeElementStore> = $r11;

        $r18 = new androidx.room.compiler.processing.ksp.KspMessager;

        specialinvoke $r18.<androidx.room.compiler.processing.ksp.KspMessager: void <init>(com.google.devtools.ksp.processing.KSPLogger)>(r3);

        $r19 = (androidx.room.compiler.processing.XMessager) $r18;

        r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv: androidx.room.compiler.processing.XMessager messager> = $r19;

        $r20 = new androidx.room.compiler.processing.ksp.KspProcessingEnv$arrayTypeFactory$2;

        specialinvoke $r20.<androidx.room.compiler.processing.ksp.KspProcessingEnv$arrayTypeFactory$2: void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv)>(r0);

        $r21 = (kotlin.jvm.functions.Function0) $r20;

        $r22 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)>($r21);

        r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv: kotlin.Lazy arrayTypeFactory$delegate> = $r22;

        $r23 = new androidx.room.compiler.processing.ksp.KspFiler;

        $r24 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv: androidx.room.compiler.processing.XMessager getMessager()>();

        specialinvoke $r23.<androidx.room.compiler.processing.ksp.KspFiler: void <init>(com.google.devtools.ksp.processing.CodeGenerator,androidx.room.compiler.processing.XMessager)>(r2, $r24);

        $r25 = (androidx.room.compiler.processing.XFiler) $r23;

        r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv: androidx.room.compiler.processing.XFiler filer> = $r25;

        return;
    }

    public java.util.Map getOptions()
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv r0;
        java.util.Map $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        $r1 = r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv: java.util.Map options>;

        return $r1;
    }

    public androidx.room.compiler.processing.XProcessingEnvConfig getConfig()
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv r0;
        androidx.room.compiler.processing.XProcessingEnvConfig $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        $r1 = r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv: androidx.room.compiler.processing.XProcessingEnvConfig config>;

        return $r1;
    }

    public androidx.room.compiler.processing.XProcessingEnv$Backend getBackend()
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv r0;
        androidx.room.compiler.processing.XProcessingEnv$Backend $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        $r1 = r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv: androidx.room.compiler.processing.XProcessingEnv$Backend backend>;

        return $r1;
    }

    public int getJvmVersion()
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv r0;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        return 8;
    }

    private final androidx.room.compiler.processing.ksp.KSTypeVarianceResolver getKsTypeVarianceResolver()
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv r0;
        kotlin.Lazy r1;
        java.lang.Object $r2;
        androidx.room.compiler.processing.ksp.KSTypeVarianceResolver $r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        r1 = r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv: kotlin.Lazy ksTypeVarianceResolver$delegate>;

        $r2 = interfaceinvoke r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r3 = (androidx.room.compiler.processing.ksp.KSTypeVarianceResolver) $r2;

        return $r3;
    }

    public final com.google.devtools.ksp.processing.Resolver getResolver()
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv r0;
        com.google.devtools.ksp.processing.Resolver $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        $r1 = r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv: com.google.devtools.ksp.processing.Resolver _resolver>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r1);

        return $r1;
    }

    public final void setResolver$room_compiler_processing(com.google.devtools.ksp.processing.Resolver)
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv r0;
        com.google.devtools.ksp.processing.Resolver r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        r1 := @parameter0: com.google.devtools.ksp.processing.Resolver;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "value");

        r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv: com.google.devtools.ksp.processing.Resolver _resolver> = r1;

        return;
    }

    public androidx.room.compiler.processing.XMessager getMessager()
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv r0;
        androidx.room.compiler.processing.XMessager $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        $r1 = r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv: androidx.room.compiler.processing.XMessager messager>;

        return $r1;
    }

    private final androidx.room.compiler.processing.ksp.KspArrayType$Factory getArrayTypeFactory()
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv r0;
        kotlin.Lazy r1;
        java.lang.Object $r2;
        androidx.room.compiler.processing.ksp.KspArrayType$Factory $r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        r1 = r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv: kotlin.Lazy arrayTypeFactory$delegate>;

        $r2 = interfaceinvoke r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r3 = (androidx.room.compiler.processing.ksp.KspArrayType$Factory) $r2;

        return $r3;
    }

    public androidx.room.compiler.processing.XFiler getFiler()
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv r0;
        androidx.room.compiler.processing.XFiler $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        $r1 = r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv: androidx.room.compiler.processing.XFiler filer>;

        return $r1;
    }

    public final androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes getCommonTypes()
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv r0;
        androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes $r1;
        com.google.devtools.ksp.processing.Resolver $r2;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        $r1 = new androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes;

        $r2 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv: com.google.devtools.ksp.processing.Resolver getResolver()>();

        specialinvoke $r1.<androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes: void <init>(com.google.devtools.ksp.processing.Resolver)>($r2);

        return $r1;
    }

    public final androidx.room.compiler.processing.ksp.KspVoidType getVoidType()
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv r0;
        androidx.room.compiler.processing.ksp.KspVoidType $r1;
        com.google.devtools.ksp.processing.Resolver $r2;
        com.google.devtools.ksp.processing.KSBuiltIns $r3;
        com.google.devtools.ksp.symbol.KSType $r4;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        $r1 = new androidx.room.compiler.processing.ksp.KspVoidType;

        $r2 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv: com.google.devtools.ksp.processing.Resolver getResolver()>();

        $r3 = interfaceinvoke $r2.<com.google.devtools.ksp.processing.Resolver: com.google.devtools.ksp.processing.KSBuiltIns getBuiltIns()>();

        $r4 = interfaceinvoke $r3.<com.google.devtools.ksp.processing.KSBuiltIns: com.google.devtools.ksp.symbol.KSType getUnitType()>();

        specialinvoke $r1.<androidx.room.compiler.processing.ksp.KspVoidType: void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv,com.google.devtools.ksp.symbol.KSType,boolean,androidx.room.compiler.processing.ksp.KspJvmTypeResolver)>(r0, $r4, 0, null);

        return $r1;
    }

    public androidx.room.compiler.processing.ksp.KspTypeElement findTypeElement(java.lang.String)
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv r0;
        java.lang.String r1;
        androidx.room.compiler.processing.javac.XTypeElementStore $r2;
        androidx.room.compiler.processing.XTypeElement $r3;
        androidx.room.compiler.processing.ksp.KspTypeElement $r4;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "qName");

        $r2 = r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv: androidx.room.compiler.processing.javac.XTypeElementStore typeElementStore>;

        $r3 = virtualinvoke $r2.<androidx.room.compiler.processing.javac.XTypeElementStore: androidx.room.compiler.processing.XTypeElement get(java.lang.String)>(r1);

        $r4 = (androidx.room.compiler.processing.ksp.KspTypeElement) $r3;

        return $r4;
    }

    public java.util.List getTypeElementsFromPackage(java.lang.String)
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv r0;
        java.lang.String r1;
        kotlin.sequences.Sequence $r2, $r6, $r9;
        com.google.devtools.ksp.processing.Resolver $r3;
        androidx.room.compiler.processing.ksp.KspProcessingEnv$getTypeElementsFromPackage$$inlined$filterIsInstance$1 $r4;
        kotlin.jvm.functions.Function1 $r5, $r8;
        androidx.room.compiler.processing.ksp.KspProcessingEnv$getTypeElementsFromPackage$1 $r7;
        java.util.List $r10;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "packageName");

        $r3 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv: com.google.devtools.ksp.processing.Resolver getResolver()>();

        $r2 = interfaceinvoke $r3.<com.google.devtools.ksp.processing.Resolver: kotlin.sequences.Sequence getDeclarationsFromPackage(java.lang.String)>(r1);

        $r4 = <androidx.room.compiler.processing.ksp.KspProcessingEnv$getTypeElementsFromPackage$$inlined$filterIsInstance$1: androidx.room.compiler.processing.ksp.KspProcessingEnv$getTypeElementsFromPackage$$inlined$filterIsInstance$1 INSTANCE>;

        $r5 = (kotlin.jvm.functions.Function1) $r4;

        $r6 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence filter(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1)>($r2, $r5);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r6, "null cannot be cast to non-null type kotlin.sequences.Sequence<R of kotlin.sequences.SequencesKt___SequencesKt.filterIsInstance>");

        $r7 = new androidx.room.compiler.processing.ksp.KspProcessingEnv$getTypeElementsFromPackage$1;

        specialinvoke $r7.<androidx.room.compiler.processing.ksp.KspProcessingEnv$getTypeElementsFromPackage$1: void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv)>(r0);

        $r8 = (kotlin.jvm.functions.Function1) $r7;

        $r9 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence map(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1)>($r6, $r8);

        $r10 = staticinvoke <kotlin.sequences.SequencesKt: java.util.List toList(kotlin.sequences.Sequence)>($r9);

        return $r10;
    }

    public androidx.room.compiler.processing.XType findType(java.lang.String)
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv r0;
        java.lang.String r1, r2;
        com.google.devtools.ksp.symbol.KSClassDeclaration r3, $r7;
        boolean z1;
        com.google.devtools.ksp.symbol.KSType r4;
        androidx.room.compiler.processing.ksp.KspTypeMapper $r5, $r9;
        com.google.devtools.ksp.processing.Resolver $r6;
        androidx.room.compiler.processing.XType $r8;
        java.util.List $r10;
        androidx.room.compiler.processing.ksp.KspType $r11;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "qName");

        $r5 = <androidx.room.compiler.processing.ksp.KspTypeMapper: androidx.room.compiler.processing.ksp.KspTypeMapper INSTANCE>;

        r2 = virtualinvoke $r5.<androidx.room.compiler.processing.ksp.KspTypeMapper: java.lang.String swapWithKotlinType(java.lang.String)>(r1);

        $r6 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv: com.google.devtools.ksp.processing.Resolver getResolver()>();

        $r7 = staticinvoke <androidx.room.compiler.processing.ksp.ResolverExtKt: com.google.devtools.ksp.symbol.KSClassDeclaration findClass(com.google.devtools.ksp.processing.Resolver,java.lang.String)>($r6, r2);

        if $r7 == null goto label1;

        r3 = $r7;

        $r9 = <androidx.room.compiler.processing.ksp.KspTypeMapper: androidx.room.compiler.processing.ksp.KspTypeMapper INSTANCE>;

        z1 = virtualinvoke $r9.<androidx.room.compiler.processing.ksp.KspTypeMapper: boolean isJavaPrimitiveType(java.lang.String)>(r1);

        $r10 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        r4 = interfaceinvoke r3.<com.google.devtools.ksp.symbol.KSClassDeclaration: com.google.devtools.ksp.symbol.KSType asType(java.util.List)>($r10);

        $r11 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv: androidx.room.compiler.processing.ksp.KspType wrap(com.google.devtools.ksp.symbol.KSType,boolean)>(r4, z1);

        return $r11;

     label1:
        $r8 = (androidx.room.compiler.processing.XType) null;

        return $r8;
    }

    public androidx.room.compiler.processing.XTypeElement findGeneratedAnnotation()
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv r0;
        androidx.room.compiler.processing.ksp.KspTypeElement $r1, $r2;
        androidx.room.compiler.processing.XTypeElement $r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv: androidx.room.compiler.processing.ksp.KspTypeElement findTypeElement(java.lang.String)>("javax.annotation.processing.Generated");

        if $r1 == null goto label1;

        $r3 = (androidx.room.compiler.processing.XTypeElement) $r1;

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv: androidx.room.compiler.processing.ksp.KspTypeElement findTypeElement(java.lang.String)>("javax.annotation.Generated");

        $r3 = (androidx.room.compiler.processing.XTypeElement) $r2;

     label2:
        return $r3;
    }

    public transient androidx.room.compiler.processing.ksp.KspType getDeclaredType(androidx.room.compiler.processing.XTypeElement, androidx.room.compiler.processing.XType[])
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv r0;
        androidx.room.compiler.processing.XTypeElement r1;
        androidx.room.compiler.processing.XType[] r2;
        java.util.List r3;
        java.util.Collection r5, r8;
        int i0, $i1, i2;
        androidx.room.compiler.processing.XType r6, r7;
        boolean $z3, $z4;
        java.util.ArrayList $r9;
        androidx.room.compiler.processing.ksp.KspTypeElement $r10;
        com.google.devtools.ksp.symbol.KSClassDeclaration $r11;
        com.google.devtools.ksp.symbol.KSType $r12, $r16;
        androidx.room.compiler.processing.ksp.KspType $r13, $r15;
        com.google.devtools.ksp.processing.Resolver $r14;
        com.google.devtools.ksp.symbol.KSTypeReference $r17;
        com.google.devtools.ksp.symbol.Variance $r18;
        com.google.devtools.ksp.symbol.KSTypeArgument $r19;
        java.lang.StringBuilder $r20, $r21, $r22, $r25, $r26, $r27;
        java.lang.IllegalStateException $r23, $r28;
        java.lang.String $r24, $r29, $r30, $r32;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        r1 := @parameter0: androidx.room.compiler.processing.XTypeElement;

        r2 := @parameter1: androidx.room.compiler.processing.XType[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "type");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "types");

        $z3 = r1 instanceof androidx.room.compiler.processing.ksp.KspTypeElement;

        if $z3 != 0 goto label1;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected type element type: ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        $r28 = new java.lang.IllegalStateException;

        $r29 = virtualinvoke $r30.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r28.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r29);

        throw $r28;

     label1:
        $r9 = new java.util.ArrayList;

        $i1 = lengthof r2;

        specialinvoke $r9.<java.util.ArrayList: void <init>(int)>($i1);

        r5 = (java.util.Collection) $r9;

        i2 = 0;

        i0 = lengthof r2;

     label2:
        if i2 >= i0 goto label4;

        r6 = r2[i2];

        r7 = r6;

        r8 = r5;

        $z4 = r7 instanceof androidx.room.compiler.processing.ksp.KspType;

        if $z4 != 0 goto label3;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not an instance of KspType");

        $r32 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        $r23 = new java.lang.IllegalStateException;

        $r24 = virtualinvoke $r32.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r24);

        throw $r23;

     label3:
        $r14 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv: com.google.devtools.ksp.processing.Resolver getResolver()>();

        $r15 = (androidx.room.compiler.processing.ksp.KspType) r7;

        $r16 = virtualinvoke $r15.<androidx.room.compiler.processing.ksp.KspType: com.google.devtools.ksp.symbol.KSType getKsType()>();

        $r17 = staticinvoke <androidx.room.compiler.processing.ksp.KSTypeReferenceExtKt: com.google.devtools.ksp.symbol.KSTypeReference createTypeReference(com.google.devtools.ksp.symbol.KSType)>($r16);

        $r18 = <com.google.devtools.ksp.symbol.Variance: com.google.devtools.ksp.symbol.Variance INVARIANT>;

        $r19 = interfaceinvoke $r14.<com.google.devtools.ksp.processing.Resolver: com.google.devtools.ksp.symbol.KSTypeArgument getTypeArgument(com.google.devtools.ksp.symbol.KSTypeReference,com.google.devtools.ksp.symbol.Variance)>($r17, $r18);

        interfaceinvoke r8.<java.util.Collection: boolean add(java.lang.Object)>($r19);

        i2 = i2 + 1;

        goto label2;

     label4:
        r3 = (java.util.List) r5;

        $r10 = (androidx.room.compiler.processing.ksp.KspTypeElement) r1;

        $r11 = virtualinvoke $r10.<androidx.room.compiler.processing.ksp.KspTypeElement: com.google.devtools.ksp.symbol.KSClassDeclaration getDeclaration()>();

        $r12 = interfaceinvoke $r11.<com.google.devtools.ksp.symbol.KSClassDeclaration: com.google.devtools.ksp.symbol.KSType asType(java.util.List)>(r3);

        $r13 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv: androidx.room.compiler.processing.ksp.KspType wrap(com.google.devtools.ksp.symbol.KSType,boolean)>($r12, 0);

        return $r13;
    }

    public androidx.room.compiler.processing.ksp.KspArrayType getArrayType(androidx.room.compiler.processing.XType)
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv r0;
        androidx.room.compiler.processing.XType r1;
        java.lang.String r2, $r7;
        boolean $z0;
        androidx.room.compiler.processing.ksp.KspArrayType$Factory $r3;
        androidx.room.compiler.processing.ksp.KspType $r4;
        androidx.room.compiler.processing.ksp.KspArrayType $r5;
        java.lang.IllegalStateException $r6;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        r1 := @parameter0: androidx.room.compiler.processing.XType;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "type");

        $z0 = r1 instanceof androidx.room.compiler.processing.ksp.KspType;

        if $z0 != 0 goto label1;

        r2 = "Check failed.";

        $r6 = new java.lang.IllegalStateException;

        $r7 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label1:
        $r3 = specialinvoke r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv: androidx.room.compiler.processing.ksp.KspArrayType$Factory getArrayTypeFactory()>();

        $r4 = (androidx.room.compiler.processing.ksp.KspType) r1;

        $r5 = virtualinvoke $r3.<androidx.room.compiler.processing.ksp.KspArrayType$Factory: androidx.room.compiler.processing.ksp.KspArrayType createWithComponentType(androidx.room.compiler.processing.ksp.KspType)>($r4);

        return $r5;
    }

    public final androidx.room.compiler.processing.ksp.KspType wrap(com.google.devtools.ksp.symbol.KSTypeReference, com.google.devtools.ksp.symbol.KSType)
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv r0;
        com.google.devtools.ksp.symbol.KSTypeReference r1;
        com.google.devtools.ksp.symbol.KSType r2;
        boolean $z0, $z1;
        androidx.room.compiler.processing.ksp.KspType $r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        r1 := @parameter0: com.google.devtools.ksp.symbol.KSTypeReference;

        r2 := @parameter1: com.google.devtools.ksp.symbol.KSType;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "originatingReference");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "ksType");

        $z0 = staticinvoke <androidx.room.compiler.processing.ksp.KSTypeExtKt: boolean isTypeParameterReference(com.google.devtools.ksp.symbol.KSTypeReference)>(r1);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r3 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv: androidx.room.compiler.processing.ksp.KspType wrap(com.google.devtools.ksp.symbol.KSType,boolean)>(r2, $z1);

        return $r3;
    }

    public final androidx.room.compiler.processing.ksp.KspType wrap(com.google.devtools.ksp.symbol.KSTypeReference)
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv r0;
        com.google.devtools.ksp.symbol.KSTypeReference r1;
        com.google.devtools.ksp.symbol.KSType $r2;
        androidx.room.compiler.processing.ksp.KspType $r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        r1 := @parameter0: com.google.devtools.ksp.symbol.KSTypeReference;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "typeReference");

        $r2 = interfaceinvoke r1.<com.google.devtools.ksp.symbol.KSTypeReference: com.google.devtools.ksp.symbol.KSType resolve()>();

        $r3 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv: androidx.room.compiler.processing.ksp.KspType wrap(com.google.devtools.ksp.symbol.KSTypeReference,com.google.devtools.ksp.symbol.KSType)>(r1, $r2);

        return $r3;
    }

    public final androidx.room.compiler.processing.ksp.KspType wrap(com.google.devtools.ksp.symbol.KSTypeParameter, com.google.devtools.ksp.symbol.KSTypeArgument)
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv r0;
        com.google.devtools.ksp.symbol.KSTypeParameter r1;
        com.google.devtools.ksp.symbol.KSTypeArgument r2;
        com.google.devtools.ksp.symbol.KSTypeReference r3;
        androidx.room.compiler.processing.ksp.KspTypeArgumentType $r4;
        androidx.room.compiler.processing.ksp.KspType $r5, $r9;
        com.google.devtools.ksp.symbol.Variance $r6, $r7;
        com.google.devtools.ksp.symbol.KSType $r8;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        r1 := @parameter0: com.google.devtools.ksp.symbol.KSTypeParameter;

        r2 := @parameter1: com.google.devtools.ksp.symbol.KSTypeArgument;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "ksTypeParam");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "ksTypeArgument");

        r3 = interfaceinvoke r2.<com.google.devtools.ksp.symbol.KSTypeArgument: com.google.devtools.ksp.symbol.KSTypeReference getType()>();

        if r3 == null goto label1;

        $r6 = interfaceinvoke r2.<com.google.devtools.ksp.symbol.KSTypeArgument: com.google.devtools.ksp.symbol.Variance getVariance()>();

        $r7 = <com.google.devtools.ksp.symbol.Variance: com.google.devtools.ksp.symbol.Variance INVARIANT>;

        if $r6 != $r7 goto label1;

        $r8 = interfaceinvoke r3.<com.google.devtools.ksp.symbol.KSTypeReference: com.google.devtools.ksp.symbol.KSType resolve()>();

        $r9 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv: androidx.room.compiler.processing.ksp.KspType wrap(com.google.devtools.ksp.symbol.KSType,boolean)>($r8, 0);

        return $r9;

     label1:
        $r4 = new androidx.room.compiler.processing.ksp.KspTypeArgumentType;

        specialinvoke $r4.<androidx.room.compiler.processing.ksp.KspTypeArgumentType: void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv,com.google.devtools.ksp.symbol.KSTypeParameter,com.google.devtools.ksp.symbol.KSTypeArgument,androidx.room.compiler.processing.ksp.KspJvmTypeResolver)>(r0, r1, r2, null);

        $r5 = (androidx.room.compiler.processing.ksp.KspType) $r4;

        return $r5;
    }

    public final androidx.room.compiler.processing.ksp.KspType wrap(com.google.devtools.ksp.symbol.KSType, boolean)
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv r0;
        com.google.devtools.ksp.symbol.KSType r1, $r25;
        boolean z0, $z1, $z2, $z3, $z4;
        com.google.devtools.ksp.symbol.KSDeclaration r2, $r3;
        com.google.devtools.ksp.symbol.KSName $r4;
        androidx.room.compiler.processing.ksp.DefaultKspType $r5;
        com.google.devtools.ksp.symbol.Nullability $r6, $r7, $r22, $r23, $r27, $r28;
        androidx.room.compiler.processing.ksp.KspTypeMapper $r8;
        androidx.room.compiler.processing.ksp.KspVoidType $r9;
        androidx.room.compiler.processing.ksp.KspType $r10, $r12, $r19, r26, $r29, $r36;
        androidx.room.compiler.processing.ksp.KspPrimitiveType $r11;
        com.google.devtools.ksp.processing.Resolver $r13;
        com.google.devtools.ksp.symbol.KSTypeReference $r14, $r21;
        com.google.devtools.ksp.symbol.KSTypeParameter $r15, $r18;
        com.google.devtools.ksp.symbol.Variance $r16;
        androidx.room.compiler.processing.ksp.KspTypeArgumentType $r17;
        com.google.devtools.ksp.symbol.KSTypeAlias $r20;
        java.lang.String $r30, r31;
        com.google.devtools.ksp.symbol.KSTypeArgument r32;
        com.squareup.javapoet.TypeName r33;
        androidx.room.compiler.processing.ksp.KspArrayType$Factory $r34;
        androidx.room.compiler.processing.ksp.KspArrayType $r35;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        r1 := @parameter0: com.google.devtools.ksp.symbol.KSType;

        z0 := @parameter1: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "ksType");

        r2 = interfaceinvoke r1.<com.google.devtools.ksp.symbol.KSType: com.google.devtools.ksp.symbol.KSDeclaration getDeclaration()>();

        $z1 = r2 instanceof com.google.devtools.ksp.symbol.KSTypeAlias;

        if $z1 == 0 goto label05;

        $r20 = (com.google.devtools.ksp.symbol.KSTypeAlias) r2;

        $r21 = interfaceinvoke $r20.<com.google.devtools.ksp.symbol.KSTypeAlias: com.google.devtools.ksp.symbol.KSTypeReference getType()>();

        $r25 = interfaceinvoke $r21.<com.google.devtools.ksp.symbol.KSTypeReference: com.google.devtools.ksp.symbol.KSType resolve()>();

        if z0 == 0 goto label01;

        $r22 = interfaceinvoke r1.<com.google.devtools.ksp.symbol.KSType: com.google.devtools.ksp.symbol.Nullability getNullability()>();

        $r23 = <com.google.devtools.ksp.symbol.Nullability: com.google.devtools.ksp.symbol.Nullability NOT_NULL>;

        if $r22 != $r23 goto label01;

        $z4 = 1;

        goto label02;

     label01:
        $z4 = 0;

     label02:
        r26 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv: androidx.room.compiler.processing.ksp.KspType wrap(com.google.devtools.ksp.symbol.KSType,boolean)>($r25, $z4);

        $r27 = interfaceinvoke r1.<com.google.devtools.ksp.symbol.KSType: com.google.devtools.ksp.symbol.Nullability getNullability()>();

        $r28 = <com.google.devtools.ksp.symbol.Nullability: com.google.devtools.ksp.symbol.Nullability NULLABLE>;

        if $r27 != $r28 goto label03;

        $r29 = virtualinvoke r26.<androidx.room.compiler.processing.ksp.KspType: androidx.room.compiler.processing.ksp.KspType makeNullable()>();

        goto label04;

     label03:
        $r29 = r26;

     label04:
        return $r29;

     label05:
        $r3 = interfaceinvoke r1.<com.google.devtools.ksp.symbol.KSType: com.google.devtools.ksp.symbol.KSDeclaration getDeclaration()>();

        $r4 = interfaceinvoke $r3.<com.google.devtools.ksp.symbol.KSDeclaration: com.google.devtools.ksp.symbol.KSName getQualifiedName()>();

        if $r4 == null goto label06;

        $r30 = interfaceinvoke $r4.<com.google.devtools.ksp.symbol.KSName: java.lang.String asString()>();

        goto label07;

     label06:
        $r30 = null;

     label07:
        r31 = $r30;

        $z2 = r2 instanceof com.google.devtools.ksp.symbol.KSTypeParameter;

        if $z2 == 0 goto label08;

        $r13 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv: com.google.devtools.ksp.processing.Resolver getResolver()>();

        $r14 = staticinvoke <androidx.room.compiler.processing.ksp.KSTypeReferenceExtKt: com.google.devtools.ksp.symbol.KSTypeReference createTypeReference(com.google.devtools.ksp.symbol.KSType)>(r1);

        $r15 = (com.google.devtools.ksp.symbol.KSTypeParameter) r2;

        $r16 = interfaceinvoke $r15.<com.google.devtools.ksp.symbol.KSTypeParameter: com.google.devtools.ksp.symbol.Variance getVariance()>();

        r32 = interfaceinvoke $r13.<com.google.devtools.ksp.processing.Resolver: com.google.devtools.ksp.symbol.KSTypeArgument getTypeArgument(com.google.devtools.ksp.symbol.KSTypeReference,com.google.devtools.ksp.symbol.Variance)>($r14, $r16);

        $r17 = new androidx.room.compiler.processing.ksp.KspTypeArgumentType;

        $r18 = (com.google.devtools.ksp.symbol.KSTypeParameter) r2;

        specialinvoke $r17.<androidx.room.compiler.processing.ksp.KspTypeArgumentType: void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv,com.google.devtools.ksp.symbol.KSTypeParameter,com.google.devtools.ksp.symbol.KSTypeArgument,androidx.room.compiler.processing.ksp.KspJvmTypeResolver)>(r0, $r18, r32, null);

        $r19 = (androidx.room.compiler.processing.ksp.KspType) $r17;

        return $r19;

     label08:
        if z0 == 0 goto label10;

        if r31 == null goto label10;

        $r6 = interfaceinvoke r1.<com.google.devtools.ksp.symbol.KSType: com.google.devtools.ksp.symbol.Nullability getNullability()>();

        $r7 = <com.google.devtools.ksp.symbol.Nullability: com.google.devtools.ksp.symbol.Nullability NOT_NULL>;

        if $r6 != $r7 goto label10;

        $r8 = <androidx.room.compiler.processing.ksp.KspTypeMapper: androidx.room.compiler.processing.ksp.KspTypeMapper INSTANCE>;

        r33 = virtualinvoke $r8.<androidx.room.compiler.processing.ksp.KspTypeMapper: com.squareup.javapoet.TypeName getPrimitiveJavaTypeName(java.lang.String)>(r31);

        if r33 == null goto label09;

        $r11 = new androidx.room.compiler.processing.ksp.KspPrimitiveType;

        specialinvoke $r11.<androidx.room.compiler.processing.ksp.KspPrimitiveType: void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv,com.google.devtools.ksp.symbol.KSType,androidx.room.compiler.processing.ksp.KspJvmTypeResolver)>(r0, r1, null);

        $r12 = (androidx.room.compiler.processing.ksp.KspType) $r11;

        return $r12;

     label09:
        $z3 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r31, "kotlin.Unit");

        if $z3 == 0 goto label10;

        $r9 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv: androidx.room.compiler.processing.ksp.KspVoidType getVoidType()>();

        $r10 = (androidx.room.compiler.processing.ksp.KspType) $r9;

        return $r10;

     label10:
        $r34 = specialinvoke r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv: androidx.room.compiler.processing.ksp.KspArrayType$Factory getArrayTypeFactory()>();

        $r35 = virtualinvoke $r34.<androidx.room.compiler.processing.ksp.KspArrayType$Factory: androidx.room.compiler.processing.ksp.KspArrayType createIfArray(com.google.devtools.ksp.symbol.KSType)>(r1);

        if $r35 == null goto label11;

        $r36 = (androidx.room.compiler.processing.ksp.KspType) $r35;

        goto label12;

     label11:
        $r5 = new androidx.room.compiler.processing.ksp.DefaultKspType;

        specialinvoke $r5.<androidx.room.compiler.processing.ksp.DefaultKspType: void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv,com.google.devtools.ksp.symbol.KSType,androidx.room.compiler.processing.ksp.KspJvmTypeResolver)>(r0, r1, null);

        $r36 = (androidx.room.compiler.processing.ksp.KspType) $r5;

     label12:
        return $r36;
    }

    public final androidx.room.compiler.processing.ksp.KspTypeElement wrapClassDeclaration(com.google.devtools.ksp.symbol.KSClassDeclaration)
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv r0;
        com.google.devtools.ksp.symbol.KSClassDeclaration r1;
        androidx.room.compiler.processing.javac.XTypeElementStore $r2;
        androidx.room.compiler.processing.XTypeElement $r3;
        androidx.room.compiler.processing.ksp.KspTypeElement $r4;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        r1 := @parameter0: com.google.devtools.ksp.symbol.KSClassDeclaration;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "declaration");

        $r2 = r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv: androidx.room.compiler.processing.javac.XTypeElementStore typeElementStore>;

        $r3 = virtualinvoke $r2.<androidx.room.compiler.processing.javac.XTypeElementStore: androidx.room.compiler.processing.XTypeElement get(java.lang.Object)>(r1);

        $r4 = (androidx.room.compiler.processing.ksp.KspTypeElement) $r3;

        return $r4;
    }

    public final androidx.room.compiler.processing.ksp.KspMemberContainer wrapKSFile(com.google.devtools.ksp.symbol.KSFile)
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv r0;
        com.google.devtools.ksp.symbol.KSFile r1;
        java.util.Map $r2;
        java.lang.Object r3, $r8;
        androidx.room.compiler.processing.ksp.KspFileMemberContainer r4, $r6;
        androidx.room.compiler.processing.ksp.KspMemberContainer $r5;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        r1 := @parameter0: com.google.devtools.ksp.symbol.KSFile;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "file");

        $r2 = r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv: java.util.Map ksFileMemberContainers>;

        r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if r3 != null goto label1;

        $r6 = new androidx.room.compiler.processing.ksp.KspFileMemberContainer;

        specialinvoke $r6.<androidx.room.compiler.processing.ksp.KspFileMemberContainer: void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv,com.google.devtools.ksp.symbol.KSFile)>(r0, r1);

        r4 = $r6;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r4);

        $r8 = r4;

        goto label2;

     label1:
        $r8 = r3;

     label2:
        $r5 = (androidx.room.compiler.processing.ksp.KspMemberContainer) $r8;

        return $r5;
    }

    public final com.google.devtools.ksp.symbol.KSType resolveWildcards(com.google.devtools.ksp.symbol.KSType, androidx.room.compiler.processing.ksp.KSTypeVarianceResolver$WildcardMode, com.google.devtools.ksp.symbol.KSType)
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv r0;
        com.google.devtools.ksp.symbol.KSType r1, r3, $r5;
        androidx.room.compiler.processing.ksp.KSTypeVarianceResolver$WildcardMode r2;
        androidx.room.compiler.processing.ksp.KSTypeVarianceResolver $r4;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        r1 := @parameter0: com.google.devtools.ksp.symbol.KSType;

        r2 := @parameter1: androidx.room.compiler.processing.ksp.KSTypeVarianceResolver$WildcardMode;

        r3 := @parameter2: com.google.devtools.ksp.symbol.KSType;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "ksType");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "wildcardMode");

        $r4 = specialinvoke r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv: androidx.room.compiler.processing.ksp.KSTypeVarianceResolver getKsTypeVarianceResolver()>();

        $r5 = virtualinvoke $r4.<androidx.room.compiler.processing.ksp.KSTypeVarianceResolver: com.google.devtools.ksp.symbol.KSType applyTypeVariance(com.google.devtools.ksp.symbol.KSType,androidx.room.compiler.processing.ksp.KSTypeVarianceResolver$WildcardMode,com.google.devtools.ksp.symbol.KSType)>(r1, r2, r3);

        return $r5;
    }

    public final void clearCache$room_compiler_processing()
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv r0;
        androidx.room.compiler.processing.javac.XTypeElementStore $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        $r1 = r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv: androidx.room.compiler.processing.javac.XTypeElementStore typeElementStore>;

        virtualinvoke $r1.<androidx.room.compiler.processing.javac.XTypeElementStore: void clear$room_compiler_processing()>();

        return;
    }

    public final boolean isSameType$room_compiler_processing(androidx.room.compiler.processing.XExecutableType, androidx.room.compiler.processing.XExecutableType)
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv r0;
        androidx.room.compiler.processing.XExecutableType r1, r2;
        java.lang.Iterable $r3;
        java.util.Iterator r4;
        int i0, i1, $i2, $i3;
        boolean $z2, $z3, $z4, $z5;
        java.util.List $r5, $r6, $r7, $r13, $r16;
        java.util.Collection $r8;
        kotlin.ranges.IntRange $r9;
        androidx.room.compiler.processing.XType $r10, $r11, $r15, $r18;
        kotlin.collections.IntIterator $r12;
        java.lang.Object $r14, $r17;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        r1 := @parameter0: androidx.room.compiler.processing.XExecutableType;

        r2 := @parameter1: androidx.room.compiler.processing.XExecutableType;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "type1");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "type2");

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, r2);

        if $z2 == 0 goto label1;

        return 1;

     label1:
        $r5 = interfaceinvoke r1.<androidx.room.compiler.processing.XExecutableType: java.util.List getParameterTypes()>();

        $i2 = interfaceinvoke $r5.<java.util.List: int size()>();

        $r6 = interfaceinvoke r2.<androidx.room.compiler.processing.XExecutableType: java.util.List getParameterTypes()>();

        $i3 = interfaceinvoke $r6.<java.util.List: int size()>();

        if $i2 == $i3 goto label2;

        return 0;

     label2:
        $r7 = interfaceinvoke r1.<androidx.room.compiler.processing.XExecutableType: java.util.List getParameterTypes()>();

        $r8 = (java.util.Collection) $r7;

        $r9 = staticinvoke <kotlin.collections.CollectionsKt: kotlin.ranges.IntRange getIndices(java.util.Collection)>($r8);

        $r3 = (java.lang.Iterable) $r9;

        r4 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>();

     label3:
        $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label5;

        $r12 = (kotlin.collections.IntIterator) r4;

        i0 = virtualinvoke $r12.<kotlin.collections.IntIterator: int nextInt()>();

        i1 = i0;

        $r13 = interfaceinvoke r1.<androidx.room.compiler.processing.XExecutableType: java.util.List getParameterTypes()>();

        $r14 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(i1);

        $r15 = (androidx.room.compiler.processing.XType) $r14;

        $r16 = interfaceinvoke r2.<androidx.room.compiler.processing.XExecutableType: java.util.List getParameterTypes()>();

        $r17 = interfaceinvoke $r16.<java.util.List: java.lang.Object get(int)>(i1);

        $r18 = (androidx.room.compiler.processing.XType) $r17;

        $z5 = interfaceinvoke $r15.<androidx.room.compiler.processing.XType: boolean isSameType(androidx.room.compiler.processing.XType)>($r18);

        if $z5 != 0 goto label4;

        return 0;

     label4:
        goto label3;

     label5:
        $r10 = staticinvoke <androidx.room.compiler.processing.ksp.KspProcessingEnv: androidx.room.compiler.processing.XType isSameType$returnType(androidx.room.compiler.processing.ksp.KspProcessingEnv,androidx.room.compiler.processing.XExecutableType)>(r0, r1);

        $r11 = staticinvoke <androidx.room.compiler.processing.ksp.KspProcessingEnv: androidx.room.compiler.processing.XType isSameType$returnType(androidx.room.compiler.processing.ksp.KspProcessingEnv,androidx.room.compiler.processing.XExecutableType)>(r0, r2);

        $z4 = interfaceinvoke $r10.<androidx.room.compiler.processing.XType: boolean isSameType(androidx.room.compiler.processing.XType)>($r11);

        return $z4;
    }

    private static final androidx.room.compiler.processing.XType isSameType$returnType(androidx.room.compiler.processing.ksp.KspProcessingEnv, androidx.room.compiler.processing.XExecutableType)
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv r0;
        androidx.room.compiler.processing.XExecutableType r1, r2;
        boolean $z0, $z1;
        java.lang.IllegalStateException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7, $r8;
        androidx.room.compiler.processing.ksp.KspVoidType $r9;
        androidx.room.compiler.processing.XMethodType $r10;
        androidx.room.compiler.processing.XType $r11;

        r0 := @parameter0: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        r1 := @parameter1: androidx.room.compiler.processing.XExecutableType;

        r2 = r1;

        $z0 = r2 instanceof androidx.room.compiler.processing.XMethodType;

        if $z0 == 0 goto label1;

        $r10 = (androidx.room.compiler.processing.XMethodType) r1;

        $r11 = interfaceinvoke $r10.<androidx.room.compiler.processing.XMethodType: androidx.room.compiler.processing.XType getReturnType()>();

        goto label3;

     label1:
        $z1 = r2 instanceof androidx.room.compiler.processing.XConstructorType;

        if $z1 == 0 goto label2;

        $r9 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv: androidx.room.compiler.processing.ksp.KspVoidType getVoidType()>();

        $r11 = (androidx.room.compiler.processing.XType) $r9;

        goto label3;

     label2:
        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected XExecutableType: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label3:
        return $r11;
    }

    public volatile androidx.room.compiler.processing.XTypeElement findTypeElement(java.lang.String)
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv r0;
        java.lang.String r1;
        androidx.room.compiler.processing.ksp.KspTypeElement $r2;
        androidx.room.compiler.processing.XTypeElement $r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv: androidx.room.compiler.processing.ksp.KspTypeElement findTypeElement(java.lang.String)>(r1);

        $r3 = (androidx.room.compiler.processing.XTypeElement) $r2;

        return $r3;
    }

    public volatile androidx.room.compiler.processing.XType getDeclaredType(androidx.room.compiler.processing.XTypeElement, androidx.room.compiler.processing.XType[])
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv r0;
        androidx.room.compiler.processing.XTypeElement r1;
        androidx.room.compiler.processing.XType[] r2;
        androidx.room.compiler.processing.ksp.KspType $r3;
        androidx.room.compiler.processing.XType $r4;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        r1 := @parameter0: androidx.room.compiler.processing.XTypeElement;

        r2 := @parameter1: androidx.room.compiler.processing.XType[];

        $r3 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv: androidx.room.compiler.processing.ksp.KspType getDeclaredType(androidx.room.compiler.processing.XTypeElement,androidx.room.compiler.processing.XType[])>(r1, r2);

        $r4 = (androidx.room.compiler.processing.XType) $r3;

        return $r4;
    }

    public volatile androidx.room.compiler.processing.XArrayType getArrayType(androidx.room.compiler.processing.XType)
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv r0;
        androidx.room.compiler.processing.XType r1;
        androidx.room.compiler.processing.ksp.KspArrayType $r2;
        androidx.room.compiler.processing.XArrayType $r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        r1 := @parameter0: androidx.room.compiler.processing.XType;

        $r2 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv: androidx.room.compiler.processing.ksp.KspArrayType getArrayType(androidx.room.compiler.processing.XType)>(r1);

        $r3 = (androidx.room.compiler.processing.XArrayType) $r2;

        return $r3;
    }

androidx.room.compiler.processing.ksp.KspProcessingEnv$arrayTypeFactory$2
<androidx.room.compiler.processing.ksp.KspProcessingEnv$arrayTypeFactory$2: androidx.room.compiler.processing.ksp.KspProcessingEnv this$0>
    void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv)
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv$arrayTypeFactory$2 r0;
        androidx.room.compiler.processing.ksp.KspProcessingEnv $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv$arrayTypeFactory$2;

        $r1 := @parameter0: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv$arrayTypeFactory$2: androidx.room.compiler.processing.ksp.KspProcessingEnv this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final androidx.room.compiler.processing.ksp.KspArrayType$Factory invoke()
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv$arrayTypeFactory$2 r0;
        androidx.room.compiler.processing.ksp.KspArrayType$Factory $r1;
        androidx.room.compiler.processing.ksp.KspProcessingEnv $r2;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv$arrayTypeFactory$2;

        $r1 = new androidx.room.compiler.processing.ksp.KspArrayType$Factory;

        $r2 = r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv$arrayTypeFactory$2: androidx.room.compiler.processing.ksp.KspProcessingEnv this$0>;

        specialinvoke $r1.<androidx.room.compiler.processing.ksp.KspArrayType$Factory: void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv)>($r2);

        return $r1;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv$arrayTypeFactory$2 r0;
        androidx.room.compiler.processing.ksp.KspArrayType$Factory $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv$arrayTypeFactory$2;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv$arrayTypeFactory$2: androidx.room.compiler.processing.ksp.KspArrayType$Factory invoke()>();

        return $r1;
    }

androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes$nullableByte$2
<androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes$nullableByte$2: com.google.devtools.ksp.processing.Resolver $resolver>
    void <init>(com.google.devtools.ksp.processing.Resolver)
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes$nullableByte$2 r0;
        com.google.devtools.ksp.processing.Resolver $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes$nullableByte$2;

        $r1 := @parameter0: com.google.devtools.ksp.processing.Resolver;

        r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes$nullableByte$2: com.google.devtools.ksp.processing.Resolver $resolver> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final com.google.devtools.ksp.symbol.KSType invoke()
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes$nullableByte$2 r0;
        com.google.devtools.ksp.processing.Resolver $r1;
        com.google.devtools.ksp.processing.KSBuiltIns $r2;
        com.google.devtools.ksp.symbol.KSType $r3, $r4;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes$nullableByte$2;

        $r1 = r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes$nullableByte$2: com.google.devtools.ksp.processing.Resolver $resolver>;

        $r2 = interfaceinvoke $r1.<com.google.devtools.ksp.processing.Resolver: com.google.devtools.ksp.processing.KSBuiltIns getBuiltIns()>();

        $r3 = interfaceinvoke $r2.<com.google.devtools.ksp.processing.KSBuiltIns: com.google.devtools.ksp.symbol.KSType getByteType()>();

        $r4 = interfaceinvoke $r3.<com.google.devtools.ksp.symbol.KSType: com.google.devtools.ksp.symbol.KSType makeNullable()>();

        return $r4;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes$nullableByte$2 r0;
        com.google.devtools.ksp.symbol.KSType $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes$nullableByte$2;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes$nullableByte$2: com.google.devtools.ksp.symbol.KSType invoke()>();

        return $r1;
    }

androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes$nullableInt$2
<androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes$nullableInt$2: com.google.devtools.ksp.processing.Resolver $resolver>
    void <init>(com.google.devtools.ksp.processing.Resolver)
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes$nullableInt$2 r0;
        com.google.devtools.ksp.processing.Resolver $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes$nullableInt$2;

        $r1 := @parameter0: com.google.devtools.ksp.processing.Resolver;

        r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes$nullableInt$2: com.google.devtools.ksp.processing.Resolver $resolver> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final com.google.devtools.ksp.symbol.KSType invoke()
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes$nullableInt$2 r0;
        com.google.devtools.ksp.processing.Resolver $r1;
        com.google.devtools.ksp.processing.KSBuiltIns $r2;
        com.google.devtools.ksp.symbol.KSType $r3, $r4;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes$nullableInt$2;

        $r1 = r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes$nullableInt$2: com.google.devtools.ksp.processing.Resolver $resolver>;

        $r2 = interfaceinvoke $r1.<com.google.devtools.ksp.processing.Resolver: com.google.devtools.ksp.processing.KSBuiltIns getBuiltIns()>();

        $r3 = interfaceinvoke $r2.<com.google.devtools.ksp.processing.KSBuiltIns: com.google.devtools.ksp.symbol.KSType getIntType()>();

        $r4 = interfaceinvoke $r3.<com.google.devtools.ksp.symbol.KSType: com.google.devtools.ksp.symbol.KSType makeNullable()>();

        return $r4;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes$nullableInt$2 r0;
        com.google.devtools.ksp.symbol.KSType $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes$nullableInt$2;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes$nullableInt$2: com.google.devtools.ksp.symbol.KSType invoke()>();

        return $r1;
    }

androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes$nullableLong$2
<androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes$nullableLong$2: com.google.devtools.ksp.processing.Resolver $resolver>
    void <init>(com.google.devtools.ksp.processing.Resolver)
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes$nullableLong$2 r0;
        com.google.devtools.ksp.processing.Resolver $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes$nullableLong$2;

        $r1 := @parameter0: com.google.devtools.ksp.processing.Resolver;

        r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes$nullableLong$2: com.google.devtools.ksp.processing.Resolver $resolver> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final com.google.devtools.ksp.symbol.KSType invoke()
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes$nullableLong$2 r0;
        com.google.devtools.ksp.processing.Resolver $r1;
        com.google.devtools.ksp.processing.KSBuiltIns $r2;
        com.google.devtools.ksp.symbol.KSType $r3, $r4;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes$nullableLong$2;

        $r1 = r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes$nullableLong$2: com.google.devtools.ksp.processing.Resolver $resolver>;

        $r2 = interfaceinvoke $r1.<com.google.devtools.ksp.processing.Resolver: com.google.devtools.ksp.processing.KSBuiltIns getBuiltIns()>();

        $r3 = interfaceinvoke $r2.<com.google.devtools.ksp.processing.KSBuiltIns: com.google.devtools.ksp.symbol.KSType getLongType()>();

        $r4 = interfaceinvoke $r3.<com.google.devtools.ksp.symbol.KSType: com.google.devtools.ksp.symbol.KSType makeNullable()>();

        return $r4;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes$nullableLong$2 r0;
        com.google.devtools.ksp.symbol.KSType $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes$nullableLong$2;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes$nullableLong$2: com.google.devtools.ksp.symbol.KSType invoke()>();

        return $r1;
    }

androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes
<androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes: kotlin.Lazy nullableInt$delegate>
<androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes: kotlin.Lazy nullableLong$delegate>
<androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes: kotlin.Lazy nullableByte$delegate>
    public void <init>(com.google.devtools.ksp.processing.Resolver)
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes r0;
        com.google.devtools.ksp.processing.Resolver r1;
        androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes$nullableInt$2 $r2;
        kotlin.jvm.functions.Function0 $r3, $r6, $r9;
        kotlin.Lazy $r4, $r7, $r10;
        androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes$nullableLong$2 $r5;
        androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes$nullableByte$2 $r8;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes;

        r1 := @parameter0: com.google.devtools.ksp.processing.Resolver;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "resolver");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes$nullableInt$2;

        specialinvoke $r2.<androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes$nullableInt$2: void <init>(com.google.devtools.ksp.processing.Resolver)>(r1);

        $r3 = (kotlin.jvm.functions.Function0) $r2;

        $r4 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)>($r3);

        r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes: kotlin.Lazy nullableInt$delegate> = $r4;

        $r5 = new androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes$nullableLong$2;

        specialinvoke $r5.<androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes$nullableLong$2: void <init>(com.google.devtools.ksp.processing.Resolver)>(r1);

        $r6 = (kotlin.jvm.functions.Function0) $r5;

        $r7 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)>($r6);

        r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes: kotlin.Lazy nullableLong$delegate> = $r7;

        $r8 = new androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes$nullableByte$2;

        specialinvoke $r8.<androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes$nullableByte$2: void <init>(com.google.devtools.ksp.processing.Resolver)>(r1);

        $r9 = (kotlin.jvm.functions.Function0) $r8;

        $r10 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)>($r9);

        r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes: kotlin.Lazy nullableByte$delegate> = $r10;

        return;
    }

    public final com.google.devtools.ksp.symbol.KSType getNullableInt()
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes r0;
        kotlin.Lazy r1;
        java.lang.Object $r2;
        com.google.devtools.ksp.symbol.KSType $r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes;

        r1 = r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes: kotlin.Lazy nullableInt$delegate>;

        $r2 = interfaceinvoke r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r3 = (com.google.devtools.ksp.symbol.KSType) $r2;

        return $r3;
    }

    public final com.google.devtools.ksp.symbol.KSType getNullableLong()
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes r0;
        kotlin.Lazy r1;
        java.lang.Object $r2;
        com.google.devtools.ksp.symbol.KSType $r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes;

        r1 = r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes: kotlin.Lazy nullableLong$delegate>;

        $r2 = interfaceinvoke r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r3 = (com.google.devtools.ksp.symbol.KSType) $r2;

        return $r3;
    }

    public final com.google.devtools.ksp.symbol.KSType getNullableByte()
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes r0;
        kotlin.Lazy r1;
        java.lang.Object $r2;
        com.google.devtools.ksp.symbol.KSType $r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes;

        r1 = r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv$CommonTypes: kotlin.Lazy nullableByte$delegate>;

        $r2 = interfaceinvoke r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r3 = (com.google.devtools.ksp.symbol.KSType) $r2;

        return $r3;
    }

androidx.room.compiler.processing.ksp.KspProcessingEnv$getTypeElementsFromPackage$$inlined$filterIsInstance$1
<androidx.room.compiler.processing.ksp.KspProcessingEnv$getTypeElementsFromPackage$$inlined$filterIsInstance$1: androidx.room.compiler.processing.ksp.KspProcessingEnv$getTypeElementsFromPackage$$inlined$filterIsInstance$1 INSTANCE>
    public void <init>()
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv$getTypeElementsFromPackage$$inlined$filterIsInstance$1 r0;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv$getTypeElementsFromPackage$$inlined$filterIsInstance$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.Boolean invoke(java.lang.Object)
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv$getTypeElementsFromPackage$$inlined$filterIsInstance$1 r0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.Boolean $r2;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv$getTypeElementsFromPackage$$inlined$filterIsInstance$1;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof com.google.devtools.ksp.symbol.KSClassDeclaration;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r2;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv$getTypeElementsFromPackage$$inlined$filterIsInstance$1 r0;
        java.lang.Object r1;
        java.lang.Boolean $r2;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv$getTypeElementsFromPackage$$inlined$filterIsInstance$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv$getTypeElementsFromPackage$$inlined$filterIsInstance$1: java.lang.Boolean invoke(java.lang.Object)>(r1);

        return $r2;
    }

    static void <clinit>()
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv$getTypeElementsFromPackage$$inlined$filterIsInstance$1 $r0;

        $r0 = new androidx.room.compiler.processing.ksp.KspProcessingEnv$getTypeElementsFromPackage$$inlined$filterIsInstance$1;

        specialinvoke $r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv$getTypeElementsFromPackage$$inlined$filterIsInstance$1: void <init>()>();

        <androidx.room.compiler.processing.ksp.KspProcessingEnv$getTypeElementsFromPackage$$inlined$filterIsInstance$1: androidx.room.compiler.processing.ksp.KspProcessingEnv$getTypeElementsFromPackage$$inlined$filterIsInstance$1 INSTANCE> = $r0;

        return;
    }

androidx.room.compiler.processing.ksp.KspProcessingEnv$getTypeElementsFromPackage$1
<androidx.room.compiler.processing.ksp.KspProcessingEnv$getTypeElementsFromPackage$1: androidx.room.compiler.processing.ksp.KspProcessingEnv this$0>
    void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv)
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv$getTypeElementsFromPackage$1 r0;
        androidx.room.compiler.processing.ksp.KspProcessingEnv $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv$getTypeElementsFromPackage$1;

        $r1 := @parameter0: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv$getTypeElementsFromPackage$1: androidx.room.compiler.processing.ksp.KspProcessingEnv this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final androidx.room.compiler.processing.ksp.KspTypeElement invoke(com.google.devtools.ksp.symbol.KSClassDeclaration)
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv$getTypeElementsFromPackage$1 r0;
        com.google.devtools.ksp.symbol.KSClassDeclaration r1;
        androidx.room.compiler.processing.ksp.KspProcessingEnv $r2;
        androidx.room.compiler.processing.ksp.KspTypeElement$Companion $r3;
        androidx.room.compiler.processing.ksp.KspTypeElement $r4;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv$getTypeElementsFromPackage$1;

        r1 := @parameter0: com.google.devtools.ksp.symbol.KSClassDeclaration;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        $r3 = <androidx.room.compiler.processing.ksp.KspTypeElement: androidx.room.compiler.processing.ksp.KspTypeElement$Companion Companion>;

        $r2 = r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv$getTypeElementsFromPackage$1: androidx.room.compiler.processing.ksp.KspProcessingEnv this$0>;

        $r4 = virtualinvoke $r3.<androidx.room.compiler.processing.ksp.KspTypeElement$Companion: androidx.room.compiler.processing.ksp.KspTypeElement create(androidx.room.compiler.processing.ksp.KspProcessingEnv,com.google.devtools.ksp.symbol.KSClassDeclaration)>($r2, r1);

        return $r4;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv$getTypeElementsFromPackage$1 r0;
        java.lang.Object r1;
        com.google.devtools.ksp.symbol.KSClassDeclaration $r2;
        androidx.room.compiler.processing.ksp.KspTypeElement $r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv$getTypeElementsFromPackage$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (com.google.devtools.ksp.symbol.KSClassDeclaration) r1;

        $r3 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv$getTypeElementsFromPackage$1: androidx.room.compiler.processing.ksp.KspTypeElement invoke(com.google.devtools.ksp.symbol.KSClassDeclaration)>($r2);

        return $r3;
    }

androidx.room.compiler.processing.ksp.KspProcessingEnv$ksTypeVarianceResolver$2
<androidx.room.compiler.processing.ksp.KspProcessingEnv$ksTypeVarianceResolver$2: androidx.room.compiler.processing.ksp.KspProcessingEnv this$0>
    void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv)
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv$ksTypeVarianceResolver$2 r0;
        androidx.room.compiler.processing.ksp.KspProcessingEnv $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv$ksTypeVarianceResolver$2;

        $r1 := @parameter0: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv$ksTypeVarianceResolver$2: androidx.room.compiler.processing.ksp.KspProcessingEnv this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final androidx.room.compiler.processing.ksp.KSTypeVarianceResolver invoke()
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv$ksTypeVarianceResolver$2 r0;
        androidx.room.compiler.processing.ksp.KSTypeVarianceResolver $r1;
        androidx.room.compiler.processing.ksp.KspProcessingEnv $r2;
        com.google.devtools.ksp.processing.Resolver $r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv$ksTypeVarianceResolver$2;

        $r1 = new androidx.room.compiler.processing.ksp.KSTypeVarianceResolver;

        $r2 = r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv$ksTypeVarianceResolver$2: androidx.room.compiler.processing.ksp.KspProcessingEnv this$0>;

        $r3 = virtualinvoke $r2.<androidx.room.compiler.processing.ksp.KspProcessingEnv: com.google.devtools.ksp.processing.Resolver getResolver()>();

        specialinvoke $r1.<androidx.room.compiler.processing.ksp.KSTypeVarianceResolver: void <init>(com.google.devtools.ksp.processing.Resolver)>($r3);

        return $r1;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv$ksTypeVarianceResolver$2 r0;
        androidx.room.compiler.processing.ksp.KSTypeVarianceResolver $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv$ksTypeVarianceResolver$2;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv$ksTypeVarianceResolver$2: androidx.room.compiler.processing.ksp.KSTypeVarianceResolver invoke()>();

        return $r1;
    }

androidx.room.compiler.processing.ksp.KspProcessingEnv$typeElementStore$1
<androidx.room.compiler.processing.ksp.KspProcessingEnv$typeElementStore$1: androidx.room.compiler.processing.ksp.KspProcessingEnv this$0>
    void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv)
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv$typeElementStore$1 r0;
        androidx.room.compiler.processing.ksp.KspProcessingEnv $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv$typeElementStore$1;

        $r1 := @parameter0: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv$typeElementStore$1: androidx.room.compiler.processing.ksp.KspProcessingEnv this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final com.google.devtools.ksp.symbol.KSClassDeclaration invoke(java.lang.String)
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv$typeElementStore$1 r0;
        java.lang.String r1, $r5;
        androidx.room.compiler.processing.ksp.KspProcessingEnv $r2;
        com.google.devtools.ksp.processing.Resolver $r3;
        androidx.room.compiler.processing.ksp.KspTypeMapper $r4;
        com.google.devtools.ksp.symbol.KSClassDeclaration $r6;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv$typeElementStore$1;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        $r2 = r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv$typeElementStore$1: androidx.room.compiler.processing.ksp.KspProcessingEnv this$0>;

        $r3 = virtualinvoke $r2.<androidx.room.compiler.processing.ksp.KspProcessingEnv: com.google.devtools.ksp.processing.Resolver getResolver()>();

        $r4 = <androidx.room.compiler.processing.ksp.KspTypeMapper: androidx.room.compiler.processing.ksp.KspTypeMapper INSTANCE>;

        $r5 = virtualinvoke $r4.<androidx.room.compiler.processing.ksp.KspTypeMapper: java.lang.String swapWithKotlinType(java.lang.String)>(r1);

        $r6 = staticinvoke <com.google.devtools.ksp.UtilsKt: com.google.devtools.ksp.symbol.KSClassDeclaration getClassDeclarationByName(com.google.devtools.ksp.processing.Resolver,java.lang.String)>($r3, $r5);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv$typeElementStore$1 r0;
        java.lang.Object r1;
        java.lang.String $r2;
        com.google.devtools.ksp.symbol.KSClassDeclaration $r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv$typeElementStore$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.String) r1;

        $r3 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv$typeElementStore$1: com.google.devtools.ksp.symbol.KSClassDeclaration invoke(java.lang.String)>($r2);

        return $r3;
    }

androidx.room.compiler.processing.ksp.KspProcessingEnv$typeElementStore$2
<androidx.room.compiler.processing.ksp.KspProcessingEnv$typeElementStore$2: androidx.room.compiler.processing.ksp.KspProcessingEnv$typeElementStore$2 INSTANCE>
    void <init>()
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv$typeElementStore$2 r0;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv$typeElementStore$2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.String invoke(com.google.devtools.ksp.symbol.KSClassDeclaration)
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv$typeElementStore$2 r0;
        com.google.devtools.ksp.symbol.KSClassDeclaration r1;
        com.google.devtools.ksp.symbol.KSName $r2;
        java.lang.String $r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv$typeElementStore$2;

        r1 := @parameter0: com.google.devtools.ksp.symbol.KSClassDeclaration;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        $r2 = interfaceinvoke r1.<com.google.devtools.ksp.symbol.KSClassDeclaration: com.google.devtools.ksp.symbol.KSName getQualifiedName()>();

        if $r2 == null goto label1;

        $r3 = interfaceinvoke $r2.<com.google.devtools.ksp.symbol.KSName: java.lang.String asString()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv$typeElementStore$2 r0;
        java.lang.Object r1;
        com.google.devtools.ksp.symbol.KSClassDeclaration $r2;
        java.lang.String $r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv$typeElementStore$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = (com.google.devtools.ksp.symbol.KSClassDeclaration) r1;

        $r3 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv$typeElementStore$2: java.lang.String invoke(com.google.devtools.ksp.symbol.KSClassDeclaration)>($r2);

        return $r3;
    }

    static void <clinit>()
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv$typeElementStore$2 $r0;

        $r0 = new androidx.room.compiler.processing.ksp.KspProcessingEnv$typeElementStore$2;

        specialinvoke $r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv$typeElementStore$2: void <init>()>();

        <androidx.room.compiler.processing.ksp.KspProcessingEnv$typeElementStore$2: androidx.room.compiler.processing.ksp.KspProcessingEnv$typeElementStore$2 INSTANCE> = $r0;

        return;
    }

androidx.room.compiler.processing.ksp.KspProcessingEnv$typeElementStore$3
<androidx.room.compiler.processing.ksp.KspProcessingEnv$typeElementStore$3: androidx.room.compiler.processing.ksp.KspProcessingEnv this$0>
    void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv)
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv$typeElementStore$3 r0;
        androidx.room.compiler.processing.ksp.KspProcessingEnv $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv$typeElementStore$3;

        $r1 := @parameter0: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv$typeElementStore$3: androidx.room.compiler.processing.ksp.KspProcessingEnv this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final androidx.room.compiler.processing.ksp.KspTypeElement invoke(com.google.devtools.ksp.symbol.KSClassDeclaration)
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv$typeElementStore$3 r0;
        com.google.devtools.ksp.symbol.KSClassDeclaration r1;
        androidx.room.compiler.processing.ksp.KspProcessingEnv $r2;
        androidx.room.compiler.processing.ksp.KspTypeElement$Companion $r3;
        androidx.room.compiler.processing.ksp.KspTypeElement $r4;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv$typeElementStore$3;

        r1 := @parameter0: com.google.devtools.ksp.symbol.KSClassDeclaration;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "classDeclaration");

        $r3 = <androidx.room.compiler.processing.ksp.KspTypeElement: androidx.room.compiler.processing.ksp.KspTypeElement$Companion Companion>;

        $r2 = r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv$typeElementStore$3: androidx.room.compiler.processing.ksp.KspProcessingEnv this$0>;

        $r4 = virtualinvoke $r3.<androidx.room.compiler.processing.ksp.KspTypeElement$Companion: androidx.room.compiler.processing.ksp.KspTypeElement create(androidx.room.compiler.processing.ksp.KspProcessingEnv,com.google.devtools.ksp.symbol.KSClassDeclaration)>($r2, r1);

        return $r4;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.compiler.processing.ksp.KspProcessingEnv$typeElementStore$3 r0;
        java.lang.Object r1;
        com.google.devtools.ksp.symbol.KSClassDeclaration $r2;
        androidx.room.compiler.processing.ksp.KspTypeElement $r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspProcessingEnv$typeElementStore$3;

        r1 := @parameter0: java.lang.Object;

        $r2 = (com.google.devtools.ksp.symbol.KSClassDeclaration) r1;

        $r3 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspProcessingEnv$typeElementStore$3: androidx.room.compiler.processing.ksp.KspTypeElement invoke(com.google.devtools.ksp.symbol.KSClassDeclaration)>($r2);

        return $r3;
    }

