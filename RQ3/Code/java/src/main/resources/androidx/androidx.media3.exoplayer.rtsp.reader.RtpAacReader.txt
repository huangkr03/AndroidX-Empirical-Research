androidx.media3.exoplayer.rtsp.reader.RtpAacReader
<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: java.lang.String AAC_LOW_BITRATE_MODE>
<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: java.lang.String AAC_HIGH_BITRATE_MODE>
<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: java.lang.String TAG>
<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: androidx.media3.exoplayer.rtsp.RtpPayloadFormat payloadFormat>
<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: androidx.media3.common.util.ParsableBitArray auHeaderScratchBit>
<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: int sampleRate>
<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: int auSizeFieldBitSize>
<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: int auIndexFieldBitSize>
<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: int numBitsInAuHeader>
<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: long firstReceivedTimestamp>
<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: androidx.media3.extractor.TrackOutput trackOutput>
<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: long startTimeOffsetUs>
    public void <init>(androidx.media3.exoplayer.rtsp.RtpPayloadFormat)
    {
        androidx.media3.exoplayer.rtsp.reader.RtpAacReader r0;
        androidx.media3.exoplayer.rtsp.RtpPayloadFormat r1, $r4;
        java.lang.String r2, $r7;
        androidx.media3.common.util.ParsableBitArray $r3;
        int $i0, $i1, $i2, $i3;
        com.google.common.collect.ImmutableMap $r5;
        java.lang.Object $r6, $r8;
        boolean $z0, $z1;
        java.lang.UnsupportedOperationException $r9;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpAacReader;

        r1 := @parameter0: androidx.media3.exoplayer.rtsp.RtpPayloadFormat;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: androidx.media3.exoplayer.rtsp.RtpPayloadFormat payloadFormat> = r1;

        $r3 = new androidx.media3.common.util.ParsableBitArray;

        specialinvoke $r3.<androidx.media3.common.util.ParsableBitArray: void <init>()>();

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: androidx.media3.common.util.ParsableBitArray auHeaderScratchBit> = $r3;

        $r4 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: androidx.media3.exoplayer.rtsp.RtpPayloadFormat payloadFormat>;

        $i0 = $r4.<androidx.media3.exoplayer.rtsp.RtpPayloadFormat: int clockRate>;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: int sampleRate> = $i0;

        $r5 = r1.<androidx.media3.exoplayer.rtsp.RtpPayloadFormat: com.google.common.collect.ImmutableMap fmtpParameters>;

        $r6 = virtualinvoke $r5.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>("mode");

        $r7 = (java.lang.String) $r6;

        $r8 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r7);

        r2 = (java.lang.String) $r8;

        $z0 = staticinvoke <com.google.common.base.Ascii: boolean equalsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>(r2, "AAC-hbr");

        if $z0 == 0 goto label1;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: int auSizeFieldBitSize> = 13;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: int auIndexFieldBitSize> = 3;

        goto label3;

     label1:
        $z1 = staticinvoke <com.google.common.base.Ascii: boolean equalsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>(r2, "AAC-lbr");

        if $z1 == 0 goto label2;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: int auSizeFieldBitSize> = 6;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: int auIndexFieldBitSize> = 2;

        goto label3;

     label2:
        $r9 = new java.lang.UnsupportedOperationException;

        specialinvoke $r9.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("AAC mode not supported");

        throw $r9;

     label3:
        $i2 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: int auIndexFieldBitSize>;

        $i1 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: int auSizeFieldBitSize>;

        $i3 = $i2 + $i1;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: int numBitsInAuHeader> = $i3;

        return;
    }

    public void createTracks(androidx.media3.extractor.ExtractorOutput, int)
    {
        androidx.media3.exoplayer.rtsp.reader.RtpAacReader r0;
        androidx.media3.extractor.ExtractorOutput r1;
        int i0;
        androidx.media3.extractor.TrackOutput $r2, $r5;
        androidx.media3.exoplayer.rtsp.RtpPayloadFormat $r3;
        androidx.media3.common.Format $r4;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpAacReader;

        r1 := @parameter0: androidx.media3.extractor.ExtractorOutput;

        i0 := @parameter1: int;

        $r2 = interfaceinvoke r1.<androidx.media3.extractor.ExtractorOutput: androidx.media3.extractor.TrackOutput track(int,int)>(i0, 1);

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: androidx.media3.extractor.TrackOutput trackOutput> = $r2;

        $r5 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: androidx.media3.extractor.TrackOutput trackOutput>;

        $r3 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: androidx.media3.exoplayer.rtsp.RtpPayloadFormat payloadFormat>;

        $r4 = $r3.<androidx.media3.exoplayer.rtsp.RtpPayloadFormat: androidx.media3.common.Format format>;

        interfaceinvoke $r5.<androidx.media3.extractor.TrackOutput: void format(androidx.media3.common.Format)>($r4);

        return;
    }

    public void onReceivingFirstPacket(long, int)
    {
        androidx.media3.exoplayer.rtsp.reader.RtpAacReader r0;
        long l0;
        int i1;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpAacReader;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: long firstReceivedTimestamp> = l0;

        return;
    }

    public void consume(androidx.media3.common.util.ParsableByteArray, long, int, boolean)
    {
        androidx.media3.exoplayer.rtsp.reader.RtpAacReader r0;
        androidx.media3.common.util.ParsableByteArray r1;
        long l0, $l7, $l8, $l14, $l15, $l16, l20;
        int i1, i3, i4, $i5, $i6, $i9, $i10, $i11, $i12, $i13, $i17, $i18, $i19, i21, i22;
        boolean z0;
        short s2;
        androidx.media3.extractor.TrackOutput $r2, $r7, $r8, $r11, $r12;
        androidx.media3.common.util.ParsableBitArray $r4, $r5, $r6, $r9, $r10;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpAacReader;

        r1 := @parameter0: androidx.media3.common.util.ParsableByteArray;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        $r2 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: androidx.media3.extractor.TrackOutput trackOutput>;

        staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        s2 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: short readShort()>();

        $i5 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: int numBitsInAuHeader>;

        i3 = s2 / $i5;

        $l8 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: long startTimeOffsetUs>;

        $l7 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: long firstReceivedTimestamp>;

        $i6 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: int sampleRate>;

        l20 = staticinvoke <androidx.media3.exoplayer.rtsp.reader.RtpReaderUtils: long toSampleTimeUs(long,long,long,int)>($l8, l0, $l7, $i6);

        $r4 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: androidx.media3.common.util.ParsableBitArray auHeaderScratchBit>;

        virtualinvoke $r4.<androidx.media3.common.util.ParsableBitArray: void reset(androidx.media3.common.util.ParsableByteArray)>(r1);

        if i3 != 1 goto label2;

        $r9 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: androidx.media3.common.util.ParsableBitArray auHeaderScratchBit>;

        $i17 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: int auSizeFieldBitSize>;

        i21 = virtualinvoke $r9.<androidx.media3.common.util.ParsableBitArray: int readBits(int)>($i17);

        $r10 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: androidx.media3.common.util.ParsableBitArray auHeaderScratchBit>;

        $i18 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: int auIndexFieldBitSize>;

        virtualinvoke $r10.<androidx.media3.common.util.ParsableBitArray: void skipBits(int)>($i18);

        $r11 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: androidx.media3.extractor.TrackOutput trackOutput>;

        $i19 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int bytesLeft()>();

        interfaceinvoke $r11.<androidx.media3.extractor.TrackOutput: void sampleData(androidx.media3.common.util.ParsableByteArray,int)>(r1, $i19);

        if z0 == 0 goto label1;

        $r12 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: androidx.media3.extractor.TrackOutput trackOutput>;

        staticinvoke <androidx.media3.exoplayer.rtsp.reader.RtpAacReader: void outputSampleMetadata(androidx.media3.extractor.TrackOutput,long,int)>($r12, l20, i21);

     label1:
        goto label4;

     label2:
        $i9 = s2 + 7;

        $i10 = $i9 / 8;

        virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: void skipBytes(int)>($i10);

        i22 = 0;

     label3:
        if i22 >= i3 goto label4;

        $r5 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: androidx.media3.common.util.ParsableBitArray auHeaderScratchBit>;

        $i11 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: int auSizeFieldBitSize>;

        i4 = virtualinvoke $r5.<androidx.media3.common.util.ParsableBitArray: int readBits(int)>($i11);

        $r6 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: androidx.media3.common.util.ParsableBitArray auHeaderScratchBit>;

        $i12 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: int auIndexFieldBitSize>;

        virtualinvoke $r6.<androidx.media3.common.util.ParsableBitArray: void skipBits(int)>($i12);

        $r7 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: androidx.media3.extractor.TrackOutput trackOutput>;

        interfaceinvoke $r7.<androidx.media3.extractor.TrackOutput: void sampleData(androidx.media3.common.util.ParsableByteArray,int)>(r1, i4);

        $r8 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: androidx.media3.extractor.TrackOutput trackOutput>;

        staticinvoke <androidx.media3.exoplayer.rtsp.reader.RtpAacReader: void outputSampleMetadata(androidx.media3.extractor.TrackOutput,long,int)>($r8, l20, i4);

        $l15 = (long) i3;

        $i13 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: int sampleRate>;

        $l14 = (long) $i13;

        $l16 = staticinvoke <androidx.media3.common.util.Util: long scaleLargeTimestamp(long,long,long)>($l15, 1000000L, $l14);

        l20 = l20 + $l16;

        i22 = i22 + 1;

        goto label3;

     label4:
        return;
    }

    public void seek(long, long)
    {
        androidx.media3.exoplayer.rtsp.reader.RtpAacReader r0;
        long l0, l1;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpAacReader;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: long firstReceivedTimestamp> = l0;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpAacReader: long startTimeOffsetUs> = l1;

        return;
    }

    private static void outputSampleMetadata(androidx.media3.extractor.TrackOutput, long, int)
    {
        androidx.media3.extractor.TrackOutput r0;
        long l0;
        int i1;

        r0 := @parameter0: androidx.media3.extractor.TrackOutput;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        interfaceinvoke r0.<androidx.media3.extractor.TrackOutput: void sampleMetadata(long,int,int,int,androidx.media3.extractor.TrackOutput$CryptoData)>(l0, 1, i1, 0, null);

        return;
    }

