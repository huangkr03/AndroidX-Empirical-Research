androidx.compose.compiler.plugins.kotlin.ComposableDeclarationChecker
    public void registerModuleComponents(org.jetbrains.kotlin.container.StorageComponentContainer, org.jetbrains.kotlin.platform.TargetPlatform, org.jetbrains.kotlin.descriptors.ModuleDescriptor)
    {
        androidx.compose.compiler.plugins.kotlin.ComposableDeclarationChecker r0;
        org.jetbrains.kotlin.container.StorageComponentContainer r1;
        org.jetbrains.kotlin.platform.TargetPlatform r2;
        org.jetbrains.kotlin.descriptors.ModuleDescriptor r3;
        boolean $z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.ComposableDeclarationChecker;

        r1 := @parameter0: org.jetbrains.kotlin.container.StorageComponentContainer;

        r2 := @parameter1: org.jetbrains.kotlin.platform.TargetPlatform;

        r3 := @parameter2: org.jetbrains.kotlin.descriptors.ModuleDescriptor;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "container");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "platform");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "moduleDescriptor");

        $z0 = staticinvoke <org.jetbrains.kotlin.platform.jvm.JvmPlatformKt: boolean isJvm(org.jetbrains.kotlin.platform.TargetPlatform)>(r2);

        if $z0 != 0 goto label1;

        return;

     label1:
        staticinvoke <org.jetbrains.kotlin.container.DslKt: void useInstance(org.jetbrains.kotlin.container.StorageComponentContainer,java.lang.Object)>(r1, r0);

        return;
    }

    public void check(org.jetbrains.kotlin.psi.KtDeclaration, org.jetbrains.kotlin.descriptors.DeclarationDescriptor, org.jetbrains.kotlin.resolve.checkers.DeclarationCheckerContext)
    {
        androidx.compose.compiler.plugins.kotlin.ComposableDeclarationChecker r0;
        org.jetbrains.kotlin.psi.KtDeclaration r1, r4;
        org.jetbrains.kotlin.descriptors.DeclarationDescriptor r2;
        org.jetbrains.kotlin.resolve.checkers.DeclarationCheckerContext r3;
        org.jetbrains.kotlin.descriptors.annotations.Annotated $r5;
        boolean $z0, $z1, $z2;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r6;
        org.jetbrains.kotlin.psi.KtFunction $r7;
        org.jetbrains.kotlin.descriptors.PropertyDescriptor $r8;
        org.jetbrains.kotlin.psi.KtProperty $r9;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.ComposableDeclarationChecker;

        r1 := @parameter0: org.jetbrains.kotlin.psi.KtDeclaration;

        r2 := @parameter1: org.jetbrains.kotlin.descriptors.DeclarationDescriptor;

        r3 := @parameter2: org.jetbrains.kotlin.resolve.checkers.DeclarationCheckerContext;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "declaration");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "descriptor");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "context");

        $r5 = (org.jetbrains.kotlin.descriptors.annotations.Annotated) r2;

        $z0 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeFqNamesKt: boolean hasComposableAnnotation(org.jetbrains.kotlin.descriptors.annotations.Annotated)>($r5);

        if $z0 != 0 goto label1;

        return;

     label1:
        r4 = r1;

        $z1 = r4 instanceof org.jetbrains.kotlin.psi.KtProperty;

        if $z1 == 0 goto label2;

        $r9 = (org.jetbrains.kotlin.psi.KtProperty) r1;

        $r8 = (org.jetbrains.kotlin.descriptors.PropertyDescriptor) r2;

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.ComposableDeclarationChecker: void checkProperty(org.jetbrains.kotlin.psi.KtProperty,org.jetbrains.kotlin.descriptors.PropertyDescriptor,org.jetbrains.kotlin.resolve.checkers.DeclarationCheckerContext)>($r9, $r8, r3);

        goto label3;

     label2:
        $z2 = r4 instanceof org.jetbrains.kotlin.psi.KtFunction;

        if $z2 == 0 goto label3;

        $r7 = (org.jetbrains.kotlin.psi.KtFunction) r1;

        $r6 = (org.jetbrains.kotlin.descriptors.FunctionDescriptor) r2;

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.ComposableDeclarationChecker: void checkFunction(org.jetbrains.kotlin.psi.KtFunction,org.jetbrains.kotlin.descriptors.FunctionDescriptor,org.jetbrains.kotlin.resolve.checkers.DeclarationCheckerContext)>($r7, $r6, r3);

        goto label3;

     label3:
        return;
    }

    private final void checkFunction(org.jetbrains.kotlin.psi.KtFunction, org.jetbrains.kotlin.descriptors.FunctionDescriptor, org.jetbrains.kotlin.resolve.checkers.DeclarationCheckerContext)
    {
        androidx.compose.compiler.plugins.kotlin.ComposableDeclarationChecker r0;
        org.jetbrains.kotlin.psi.KtFunction r1;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor r2;
        org.jetbrains.kotlin.resolve.checkers.DeclarationCheckerContext r3;
        boolean $z0;
        org.jetbrains.kotlin.resolve.BindingTrace $r4;
        org.jetbrains.kotlin.diagnostics.DiagnosticFactory0 $r5;
        org.jetbrains.kotlin.diagnostics.SimpleDiagnostic $r6;
        org.jetbrains.kotlin.diagnostics.Diagnostic $r7;
        org.jetbrains.kotlin.com.intellij.psi.PsiElement $r8;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.ComposableDeclarationChecker;

        r1 := @parameter0: org.jetbrains.kotlin.psi.KtFunction;

        r2 := @parameter1: org.jetbrains.kotlin.descriptors.FunctionDescriptor;

        r3 := @parameter2: org.jetbrains.kotlin.resolve.checkers.DeclarationCheckerContext;

        $z0 = interfaceinvoke r2.<org.jetbrains.kotlin.descriptors.FunctionDescriptor: boolean isSuspend()>();

        if $z0 == 0 goto label3;

        $r4 = virtualinvoke r3.<org.jetbrains.kotlin.resolve.checkers.DeclarationCheckerContext: org.jetbrains.kotlin.resolve.BindingTrace getTrace()>();

        $r5 = <androidx.compose.compiler.plugins.kotlin.ComposeErrors: org.jetbrains.kotlin.diagnostics.DiagnosticFactory0 COMPOSABLE_SUSPEND_FUN>;

        $r8 = interfaceinvoke r1.<org.jetbrains.kotlin.psi.KtFunction: org.jetbrains.kotlin.com.intellij.psi.PsiElement getNameIdentifier()>();

        if $r8 == null goto label1;

        goto label2;

     label1:
        $r8 = (org.jetbrains.kotlin.com.intellij.psi.PsiElement) r1;

     label2:
        $r6 = virtualinvoke $r5.<org.jetbrains.kotlin.diagnostics.DiagnosticFactory0: org.jetbrains.kotlin.diagnostics.SimpleDiagnostic on(org.jetbrains.kotlin.com.intellij.psi.PsiElement)>($r8);

        $r7 = (org.jetbrains.kotlin.diagnostics.Diagnostic) $r6;

        interfaceinvoke $r4.<org.jetbrains.kotlin.resolve.BindingTrace: void report(org.jetbrains.kotlin.diagnostics.Diagnostic)>($r7);

     label3:
        return;
    }

    private final void checkProperty(org.jetbrains.kotlin.psi.KtProperty, org.jetbrains.kotlin.descriptors.PropertyDescriptor, org.jetbrains.kotlin.resolve.checkers.DeclarationCheckerContext)
    {
        androidx.compose.compiler.plugins.kotlin.ComposableDeclarationChecker r0;
        org.jetbrains.kotlin.psi.KtProperty r1;
        org.jetbrains.kotlin.descriptors.PropertyDescriptor r2;
        org.jetbrains.kotlin.resolve.checkers.DeclarationCheckerContext r3;
        org.jetbrains.kotlin.psi.KtExpression r4;
        org.jetbrains.kotlin.com.intellij.psi.PsiElement r5;
        org.jetbrains.kotlin.resolve.BindingTrace $r6, $r10;
        org.jetbrains.kotlin.diagnostics.DiagnosticFactory0 $r7, $r11;
        org.jetbrains.kotlin.diagnostics.SimpleDiagnostic $r8, $r12;
        org.jetbrains.kotlin.diagnostics.Diagnostic $r9, $r13;
        boolean $z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.ComposableDeclarationChecker;

        r1 := @parameter0: org.jetbrains.kotlin.psi.KtProperty;

        r2 := @parameter1: org.jetbrains.kotlin.descriptors.PropertyDescriptor;

        r3 := @parameter2: org.jetbrains.kotlin.resolve.checkers.DeclarationCheckerContext;

        r4 = virtualinvoke r1.<org.jetbrains.kotlin.psi.KtProperty: org.jetbrains.kotlin.psi.KtExpression getInitializer()>();

        r5 = virtualinvoke r1.<org.jetbrains.kotlin.psi.KtProperty: org.jetbrains.kotlin.com.intellij.psi.PsiElement getNameIdentifier()>();

        if r4 == null goto label1;

        if r5 == null goto label1;

        $r10 = virtualinvoke r3.<org.jetbrains.kotlin.resolve.checkers.DeclarationCheckerContext: org.jetbrains.kotlin.resolve.BindingTrace getTrace()>();

        $r11 = <androidx.compose.compiler.plugins.kotlin.ComposeErrors: org.jetbrains.kotlin.diagnostics.DiagnosticFactory0 COMPOSABLE_PROPERTY_BACKING_FIELD>;

        $r12 = virtualinvoke $r11.<org.jetbrains.kotlin.diagnostics.DiagnosticFactory0: org.jetbrains.kotlin.diagnostics.SimpleDiagnostic on(org.jetbrains.kotlin.com.intellij.psi.PsiElement)>(r5);

        $r13 = (org.jetbrains.kotlin.diagnostics.Diagnostic) $r12;

        interfaceinvoke $r10.<org.jetbrains.kotlin.resolve.BindingTrace: void report(org.jetbrains.kotlin.diagnostics.Diagnostic)>($r13);

     label1:
        $z0 = interfaceinvoke r2.<org.jetbrains.kotlin.descriptors.PropertyDescriptor: boolean isVar()>();

        if $z0 == 0 goto label2;

        if r5 == null goto label2;

        $r6 = virtualinvoke r3.<org.jetbrains.kotlin.resolve.checkers.DeclarationCheckerContext: org.jetbrains.kotlin.resolve.BindingTrace getTrace()>();

        $r7 = <androidx.compose.compiler.plugins.kotlin.ComposeErrors: org.jetbrains.kotlin.diagnostics.DiagnosticFactory0 COMPOSABLE_VAR>;

        $r8 = virtualinvoke $r7.<org.jetbrains.kotlin.diagnostics.DiagnosticFactory0: org.jetbrains.kotlin.diagnostics.SimpleDiagnostic on(org.jetbrains.kotlin.com.intellij.psi.PsiElement)>(r5);

        $r9 = (org.jetbrains.kotlin.diagnostics.Diagnostic) $r8;

        interfaceinvoke $r6.<org.jetbrains.kotlin.resolve.BindingTrace: void report(org.jetbrains.kotlin.diagnostics.Diagnostic)>($r9);

     label2:
        return;
    }

    public void <init>()
    {
        androidx.compose.compiler.plugins.kotlin.ComposableDeclarationChecker r0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.ComposableDeclarationChecker;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

