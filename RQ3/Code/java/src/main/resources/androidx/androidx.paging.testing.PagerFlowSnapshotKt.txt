androidx.paging.testing.PagerFlowSnapshotKt
    public static final java.lang.Object asSnapshot(kotlinx.coroutines.flow.Flow, kotlinx.coroutines.CoroutineScope, androidx.paging.testing.LoadErrorHandler, kotlin.jvm.functions.Function2, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.Flow $r0;
        kotlinx.coroutines.CoroutineScope r1;
        androidx.paging.testing.LoadErrorHandler r2;
        kotlin.jvm.functions.Function2 r3, $r15, $r18;
        kotlin.coroutines.Continuation $r4;
        kotlin.jvm.internal.Ref$ObjectRef r5, $r9;
        androidx.paging.testing.PagerFlowSnapshotKt$asSnapshot$callback$1 r6, $r10;
        androidx.paging.testing.PagerFlowSnapshotKt$asSnapshot$differ$1 r7, $r11;
        kotlinx.coroutines.Job r8;
        androidx.paging.testing.SnapshotLoader $r12;
        androidx.paging.PagingDataDiffer $r13;
        androidx.paging.testing.PagerFlowSnapshotKt$asSnapshot$collectPagingData$1 $r14;
        kotlin.coroutines.CoroutineContext $r16;
        androidx.paging.testing.PagerFlowSnapshotKt$asSnapshot$3 $r17;
        java.lang.Object $r19;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        r1 := @parameter1: kotlinx.coroutines.CoroutineScope;

        r2 := @parameter2: androidx.paging.testing.LoadErrorHandler;

        r3 := @parameter3: kotlin.jvm.functions.Function2;

        $r4 := @parameter4: kotlin.coroutines.Continuation;

        $r9 = new kotlin.jvm.internal.Ref$ObjectRef;

        specialinvoke $r9.<kotlin.jvm.internal.Ref$ObjectRef: void <init>()>();

        r5 = $r9;

        $r10 = new androidx.paging.testing.PagerFlowSnapshotKt$asSnapshot$callback$1;

        specialinvoke $r10.<androidx.paging.testing.PagerFlowSnapshotKt$asSnapshot$callback$1: void <init>(kotlin.jvm.internal.Ref$ObjectRef)>(r5);

        r6 = $r10;

        $r11 = new androidx.paging.testing.PagerFlowSnapshotKt$asSnapshot$differ$1;

        specialinvoke $r11.<androidx.paging.testing.PagerFlowSnapshotKt$asSnapshot$differ$1: void <init>(androidx.paging.testing.PagerFlowSnapshotKt$asSnapshot$callback$1,kotlin.jvm.internal.Ref$ObjectRef)>(r6, r5);

        r7 = $r11;

        $r12 = new androidx.paging.testing.SnapshotLoader;

        $r13 = (androidx.paging.PagingDataDiffer) r7;

        specialinvoke $r12.<androidx.paging.testing.SnapshotLoader: void <init>(androidx.paging.PagingDataDiffer,androidx.paging.testing.LoadErrorHandler)>($r13, r2);

        r5.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element> = $r12;

        $r14 = new androidx.paging.testing.PagerFlowSnapshotKt$asSnapshot$collectPagingData$1;

        specialinvoke $r14.<androidx.paging.testing.PagerFlowSnapshotKt$asSnapshot$collectPagingData$1: void <init>(kotlinx.coroutines.flow.Flow,kotlin.jvm.internal.Ref$ObjectRef,androidx.paging.testing.PagerFlowSnapshotKt$asSnapshot$differ$1,kotlin.coroutines.Continuation)>($r0, r5, r7, null);

        $r15 = (kotlin.jvm.functions.Function2) $r14;

        r8 = staticinvoke <kotlinx.coroutines.BuildersKt: kotlinx.coroutines.Job launch$default(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2,int,java.lang.Object)>(r1, null, null, $r15, 3, null);

        $r16 = interfaceinvoke r1.<kotlinx.coroutines.CoroutineScope: kotlin.coroutines.CoroutineContext getCoroutineContext()>();

        $r17 = new androidx.paging.testing.PagerFlowSnapshotKt$asSnapshot$3;

        specialinvoke $r17.<androidx.paging.testing.PagerFlowSnapshotKt$asSnapshot$3: void <init>(androidx.paging.testing.PagerFlowSnapshotKt$asSnapshot$differ$1,androidx.paging.testing.LoadErrorHandler,kotlin.jvm.functions.Function2,kotlin.jvm.internal.Ref$ObjectRef,kotlinx.coroutines.Job,kotlin.coroutines.Continuation)>(r7, r2, r3, r5, r8, null);

        $r18 = (kotlin.jvm.functions.Function2) $r17;

        $r19 = staticinvoke <kotlinx.coroutines.BuildersKt: java.lang.Object withContext(kotlin.coroutines.CoroutineContext,kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation)>($r16, $r18, $r4);

        return $r19;
    }

    public static java.lang.Object asSnapshot$default(kotlinx.coroutines.flow.Flow, kotlinx.coroutines.CoroutineScope, androidx.paging.testing.LoadErrorHandler, kotlin.jvm.functions.Function2, kotlin.coroutines.Continuation, int, java.lang.Object)
    {
        kotlinx.coroutines.flow.Flow r0;
        kotlinx.coroutines.CoroutineScope r1;
        kotlin.jvm.functions.Function2 r2;
        kotlin.coroutines.Continuation r3;
        int i0, $i1;
        java.lang.Object r4, $r5;
        androidx.paging.testing.LoadErrorHandler r6;

        r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        r1 := @parameter1: kotlinx.coroutines.CoroutineScope;

        r6 := @parameter2: androidx.paging.testing.LoadErrorHandler;

        r2 := @parameter3: kotlin.jvm.functions.Function2;

        r3 := @parameter4: kotlin.coroutines.Continuation;

        i0 := @parameter5: int;

        r4 := @parameter6: java.lang.Object;

        $i1 = i0 & 2;

        if $i1 == 0 goto label1;

        r6 = dynamicinvoke "onError" <androidx.paging.testing.LoadErrorHandler ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: androidx.paging.testing.ErrorRecovery __METHODTYPE__(androidx.paging.CombinedLoadStates), methodhandle: "REF_INVOKE_STATIC" <androidx.paging.testing.PagerFlowSnapshotKt: androidx.paging.testing.ErrorRecovery asSnapshot$lambda$0(androidx.paging.CombinedLoadStates)>, methodtype: androidx.paging.testing.ErrorRecovery __METHODTYPE__(androidx.paging.CombinedLoadStates));

     label1:
        $r5 = staticinvoke <androidx.paging.testing.PagerFlowSnapshotKt: java.lang.Object asSnapshot(kotlinx.coroutines.flow.Flow,kotlinx.coroutines.CoroutineScope,androidx.paging.testing.LoadErrorHandler,kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation)>(r0, r1, r6, r2, r3);

        return $r5;
    }

    public static final java.lang.Object awaitNotLoading(androidx.paging.PagingDataDiffer, androidx.paging.testing.LoadErrorHandler, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation r0, r22;
        androidx.paging.CombinedLoadStates r1;
        kotlinx.coroutines.flow.Flow $r2, $r9, $r10, $r12;
        java.lang.Object $r3, r4, $r6, $r7, $r17;
        boolean $z3, $z4;
        kotlinx.coroutines.flow.StateFlow $r8;
        int $i0, $i1, $i2, $i3, $i4;
        androidx.paging.PagingDataDiffer $r14;
        androidx.paging.testing.LoadErrorHandler r15;
        androidx.paging.testing.PagerFlowSnapshotKt$awaitNotLoading$1 $r16, r19;
        kotlin.Unit $r18;
        androidx.paging.testing.PagerFlowSnapshotKt$awaitNotLoading$$inlined$filter$1 r20;
        java.lang.IllegalStateException r21;

        $r14 := @parameter0: androidx.paging.PagingDataDiffer;

        r15 := @parameter1: androidx.paging.testing.LoadErrorHandler;

        r0 := @parameter2: kotlin.coroutines.Continuation;

        $z3 = r0 instanceof androidx.paging.testing.PagerFlowSnapshotKt$awaitNotLoading$1;

        if $z3 == 0 goto label1;

        $r16 = (androidx.paging.testing.PagerFlowSnapshotKt$awaitNotLoading$1) r0;

        $i0 = $r16.<androidx.paging.testing.PagerFlowSnapshotKt$awaitNotLoading$1: int label>;

        $i1 = $i0 & -2147483648;

        if $i1 == 0 goto label1;

        $i2 = $r16.<androidx.paging.testing.PagerFlowSnapshotKt$awaitNotLoading$1: int label>;

        $i3 = $i2 - -2147483648;

        $r16.<androidx.paging.testing.PagerFlowSnapshotKt$awaitNotLoading$1: int label> = $i3;

        goto label2;

     label1:
        r19 = new androidx.paging.testing.PagerFlowSnapshotKt$awaitNotLoading$1;

        specialinvoke r19.<androidx.paging.testing.PagerFlowSnapshotKt$awaitNotLoading$1: void <init>(kotlin.coroutines.Continuation)>(r0);

        $r16 = r19;

     label2:
        $r3 = $r16.<androidx.paging.testing.PagerFlowSnapshotKt$awaitNotLoading$1: java.lang.Object result>;

        r4 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i4 = $r16.<androidx.paging.testing.PagerFlowSnapshotKt$awaitNotLoading$1: int label>;

        tableswitch($i4)
        {
            case 0: goto label3;
            case 1: goto label4;
            default: goto label7;
        };

     label3:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r3);

        $r8 = virtualinvoke $r14.<androidx.paging.PagingDataDiffer: kotlinx.coroutines.flow.StateFlow getLoadStateFlow()>();

        $r9 = (kotlinx.coroutines.flow.Flow) $r8;

        $r10 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow filterNotNull(kotlinx.coroutines.flow.Flow)>($r9);

        $r2 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow debounce(kotlinx.coroutines.flow.Flow,long)>($r10, 1L);

        r20 = new androidx.paging.testing.PagerFlowSnapshotKt$awaitNotLoading$$inlined$filter$1;

        specialinvoke r20.<androidx.paging.testing.PagerFlowSnapshotKt$awaitNotLoading$$inlined$filter$1: void <init>(kotlinx.coroutines.flow.Flow)>($r2);

        $r12 = (kotlinx.coroutines.flow.Flow) r20;

        $r16.<androidx.paging.testing.PagerFlowSnapshotKt$awaitNotLoading$1: java.lang.Object L$0> = $r14;

        $r16.<androidx.paging.testing.PagerFlowSnapshotKt$awaitNotLoading$1: java.lang.Object L$1> = r15;

        $r16.<androidx.paging.testing.PagerFlowSnapshotKt$awaitNotLoading$1: int label> = 1;

        r22 = (kotlin.coroutines.Continuation) $r16;

        $r17 = staticinvoke <kotlinx.coroutines.flow.FlowKt: java.lang.Object firstOrNull(kotlinx.coroutines.flow.Flow,kotlin.coroutines.Continuation)>($r12, r22);

        if $r17 != r4 goto label5;

        return r4;

     label4:
        $r6 = $r16.<androidx.paging.testing.PagerFlowSnapshotKt$awaitNotLoading$1: java.lang.Object L$1>;

        r15 = (androidx.paging.testing.LoadErrorHandler) $r6;

        $r7 = $r16.<androidx.paging.testing.PagerFlowSnapshotKt$awaitNotLoading$1: java.lang.Object L$0>;

        $r14 = (androidx.paging.PagingDataDiffer) $r7;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r3);

        $r17 = $r3;

     label5:
        r1 = (androidx.paging.CombinedLoadStates) $r17;

        if r1 == null goto label6;

        $z4 = staticinvoke <androidx.paging.testing.PagerFlowSnapshotKt: boolean hasError(androidx.paging.CombinedLoadStates)>(r1);

        if $z4 == 0 goto label6;

        staticinvoke <androidx.paging.testing.PagerFlowSnapshotKt: void handleLoadError(androidx.paging.PagingDataDiffer,androidx.paging.CombinedLoadStates,androidx.paging.testing.LoadErrorHandler)>($r14, r1, r15);

     label6:
        $r18 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r18;

     label7:
        r21 = new java.lang.IllegalStateException;

        specialinvoke r21.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r21;
    }

    public static final void handleLoadError(androidx.paging.PagingDataDiffer, androidx.paging.CombinedLoadStates, androidx.paging.testing.LoadErrorHandler)
    {
        androidx.paging.PagingDataDiffer $r0;
        androidx.paging.CombinedLoadStates r1;
        androidx.paging.testing.LoadErrorHandler r2;
        androidx.paging.testing.ErrorRecovery r3;
        int[] $r4;
        int $i0, $i1;
        androidx.paging.LoadState$Error $r6;
        java.lang.Throwable $r7, r9;
        androidx.paging.testing.ReturnSnapshotStub r8;

        $r0 := @parameter0: androidx.paging.PagingDataDiffer;

        r1 := @parameter1: androidx.paging.CombinedLoadStates;

        r2 := @parameter2: androidx.paging.testing.LoadErrorHandler;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "state");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "errorHandler");

        r3 = interfaceinvoke r2.<androidx.paging.testing.LoadErrorHandler: androidx.paging.testing.ErrorRecovery onError(androidx.paging.CombinedLoadStates)>(r1);

        $r4 = <androidx.paging.testing.PagerFlowSnapshotKt$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i0 = virtualinvoke r3.<androidx.paging.testing.ErrorRecovery: int ordinal()>();

        $i1 = $r4[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            default: goto label4;
        };

     label1:
        $r6 = staticinvoke <androidx.paging.testing.PagerFlowSnapshotKt: androidx.paging.LoadState$Error getErrorState(androidx.paging.CombinedLoadStates)>(r1);

        $r7 = virtualinvoke $r6.<androidx.paging.LoadState$Error: java.lang.Throwable getError()>();

        throw $r7;

     label2:
        virtualinvoke $r0.<androidx.paging.PagingDataDiffer: void retry()>();

        goto label4;

     label3:
        r8 = new androidx.paging.testing.ReturnSnapshotStub;

        specialinvoke r8.<androidx.paging.testing.ReturnSnapshotStub: void <init>()>();

        r9 = (java.lang.Throwable) r8;

        throw r9;

     label4:
        return;
    }

    private static final boolean isIdle(androidx.paging.CombinedLoadStates)
    {
        androidx.paging.CombinedLoadStates $r0;
        androidx.paging.LoadStates $r1, $r2;
        boolean $z0, $z1, $z2;

        $r0 := @parameter0: androidx.paging.CombinedLoadStates;

        if $r0 != null goto label1;

        return 0;

     label1:
        $r1 = virtualinvoke $r0.<androidx.paging.CombinedLoadStates: androidx.paging.LoadStates getSource()>();

        $z0 = staticinvoke <androidx.paging.testing.PagerFlowSnapshotKt: boolean isIdle(androidx.paging.LoadStates)>($r1);

        if $z0 == 0 goto label4;

        $r2 = virtualinvoke $r0.<androidx.paging.CombinedLoadStates: androidx.paging.LoadStates getMediator()>();

        if $r2 == null goto label2;

        $z1 = staticinvoke <androidx.paging.testing.PagerFlowSnapshotKt: boolean isIdle(androidx.paging.LoadStates)>($r2);

        goto label3;

     label2:
        $z1 = 1;

     label3:
        if $z1 == 0 goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        return $z2;
    }

    private static final boolean isIdle(androidx.paging.LoadStates)
    {
        androidx.paging.LoadStates $r0;
        androidx.paging.LoadState $r1, $r2, $r3;
        boolean $z0, $z1, $z2, $z3;

        $r0 := @parameter0: androidx.paging.LoadStates;

        $r1 = virtualinvoke $r0.<androidx.paging.LoadStates: androidx.paging.LoadState getRefresh()>();

        $z0 = $r1 instanceof androidx.paging.LoadState$NotLoading;

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r0.<androidx.paging.LoadStates: androidx.paging.LoadState getAppend()>();

        $z1 = $r2 instanceof androidx.paging.LoadState$NotLoading;

        if $z1 == 0 goto label1;

        $r3 = virtualinvoke $r0.<androidx.paging.LoadStates: androidx.paging.LoadState getPrepend()>();

        $z2 = $r3 instanceof androidx.paging.LoadState$NotLoading;

        if $z2 == 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;
    }

    private static final boolean hasError(androidx.paging.CombinedLoadStates)
    {
        androidx.paging.CombinedLoadStates $r0;
        androidx.paging.LoadStates $r1, $r2;
        boolean $z0, $z1, $z2;

        $r0 := @parameter0: androidx.paging.CombinedLoadStates;

        if $r0 != null goto label1;

        return 0;

     label1:
        $r1 = virtualinvoke $r0.<androidx.paging.CombinedLoadStates: androidx.paging.LoadStates getSource()>();

        $z0 = staticinvoke <androidx.paging.testing.PagerFlowSnapshotKt: boolean hasError(androidx.paging.LoadStates)>($r1);

        if $z0 != 0 goto label4;

        $r2 = virtualinvoke $r0.<androidx.paging.CombinedLoadStates: androidx.paging.LoadStates getMediator()>();

        if $r2 == null goto label2;

        $z1 = staticinvoke <androidx.paging.testing.PagerFlowSnapshotKt: boolean hasError(androidx.paging.LoadStates)>($r2);

        goto label3;

     label2:
        $z1 = 0;

     label3:
        if $z1 == 0 goto label5;

     label4:
        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        return $z2;
    }

    private static final boolean hasError(androidx.paging.LoadStates)
    {
        androidx.paging.LoadStates $r0;
        androidx.paging.LoadState $r1, $r2, $r3;
        boolean $z0, $z1, $z2, $z3;

        $r0 := @parameter0: androidx.paging.LoadStates;

        $r1 = virtualinvoke $r0.<androidx.paging.LoadStates: androidx.paging.LoadState getRefresh()>();

        $z0 = $r1 instanceof androidx.paging.LoadState$Error;

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke $r0.<androidx.paging.LoadStates: androidx.paging.LoadState getAppend()>();

        $z1 = $r2 instanceof androidx.paging.LoadState$Error;

        if $z1 != 0 goto label1;

        $r3 = virtualinvoke $r0.<androidx.paging.LoadStates: androidx.paging.LoadState getPrepend()>();

        $z2 = $r3 instanceof androidx.paging.LoadState$Error;

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    private static final androidx.paging.LoadState$Error getErrorState(androidx.paging.CombinedLoadStates)
    {
        androidx.paging.CombinedLoadStates $r0;
        androidx.paging.LoadState $r1, $r2, $r3, $r4, $r5;
        boolean $z0, $z1;
        androidx.paging.LoadState$Error $r6;

        $r0 := @parameter0: androidx.paging.CombinedLoadStates;

        $r1 = virtualinvoke $r0.<androidx.paging.CombinedLoadStates: androidx.paging.LoadState getRefresh()>();

        $z0 = $r1 instanceof androidx.paging.LoadState$Error;

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke $r0.<androidx.paging.CombinedLoadStates: androidx.paging.LoadState getRefresh()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r5, "null cannot be cast to non-null type androidx.paging.LoadState.Error");

        $r6 = (androidx.paging.LoadState$Error) $r5;

        goto label3;

     label1:
        $r2 = virtualinvoke $r0.<androidx.paging.CombinedLoadStates: androidx.paging.LoadState getAppend()>();

        $z1 = $r2 instanceof androidx.paging.LoadState$Error;

        if $z1 == 0 goto label2;

        $r4 = virtualinvoke $r0.<androidx.paging.CombinedLoadStates: androidx.paging.LoadState getAppend()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r4, "null cannot be cast to non-null type androidx.paging.LoadState.Error");

        $r6 = (androidx.paging.LoadState$Error) $r4;

        goto label3;

     label2:
        $r3 = virtualinvoke $r0.<androidx.paging.CombinedLoadStates: androidx.paging.LoadState getPrepend()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r3, "null cannot be cast to non-null type androidx.paging.LoadState.Error");

        $r6 = (androidx.paging.LoadState$Error) $r3;

     label3:
        return $r6;
    }

    private static final void incrementGeneration(androidx.paging.testing.SnapshotLoader)
    {
        androidx.paging.testing.SnapshotLoader r0;
        androidx.paging.testing.Generation r1, $r6, $r8;
        kotlinx.coroutines.flow.MutableStateFlow $r2, $r4, $r7;
        java.lang.Object $r3, $r5;
        int $i0, $i1, $i2, $i3;

        r0 := @parameter0: androidx.paging.testing.SnapshotLoader;

        $r2 = virtualinvoke r0.<androidx.paging.testing.SnapshotLoader: kotlinx.coroutines.flow.MutableStateFlow getGenerations$paging_testing_release()>();

        $r3 = interfaceinvoke $r2.<kotlinx.coroutines.flow.MutableStateFlow: java.lang.Object getValue()>();

        r1 = (androidx.paging.testing.Generation) $r3;

        $i0 = virtualinvoke r1.<androidx.paging.testing.Generation: int getId()>();

        $r4 = virtualinvoke r0.<androidx.paging.testing.SnapshotLoader: kotlinx.coroutines.flow.MutableStateFlow getGenerations$paging_testing_release()>();

        $r5 = interfaceinvoke $r4.<kotlinx.coroutines.flow.MutableStateFlow: java.lang.Object getValue()>();

        $r6 = (androidx.paging.testing.Generation) $r5;

        $i1 = virtualinvoke $r6.<androidx.paging.testing.Generation: int getId()>();

        if $i0 != $i1 goto label1;

        $r7 = virtualinvoke r0.<androidx.paging.testing.SnapshotLoader: kotlinx.coroutines.flow.MutableStateFlow getGenerations$paging_testing_release()>();

        $r8 = new androidx.paging.testing.Generation;

        $i2 = virtualinvoke r1.<androidx.paging.testing.Generation: int getId()>();

        $i3 = $i2 + 1;

        specialinvoke $r8.<androidx.paging.testing.Generation: void <init>(int,int,java.util.concurrent.atomic.AtomicReference,java.util.concurrent.atomic.AtomicInteger,int,kotlin.jvm.internal.DefaultConstructorMarker)>($i3, 0, null, null, 14, null);

        interfaceinvoke $r7.<kotlinx.coroutines.flow.MutableStateFlow: void setValue(java.lang.Object)>($r8);

     label1:
        return;
    }

    private static final androidx.paging.testing.ErrorRecovery asSnapshot$lambda$0(androidx.paging.CombinedLoadStates)
    {
        androidx.paging.CombinedLoadStates r0;
        androidx.paging.testing.ErrorRecovery $r1;

        r0 := @parameter0: androidx.paging.CombinedLoadStates;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "it");

        $r1 = <androidx.paging.testing.ErrorRecovery: androidx.paging.testing.ErrorRecovery THROW>;

        return $r1;
    }

    public static final void access$incrementGeneration(androidx.paging.testing.SnapshotLoader)
    {
        androidx.paging.testing.SnapshotLoader r0;

        r0 := @parameter0: androidx.paging.testing.SnapshotLoader;

        staticinvoke <androidx.paging.testing.PagerFlowSnapshotKt: void incrementGeneration(androidx.paging.testing.SnapshotLoader)>(r0);

        return;
    }

    public static final boolean access$isIdle(androidx.paging.CombinedLoadStates)
    {
        androidx.paging.CombinedLoadStates $r0;
        boolean $z0;

        $r0 := @parameter0: androidx.paging.CombinedLoadStates;

        $z0 = staticinvoke <androidx.paging.testing.PagerFlowSnapshotKt: boolean isIdle(androidx.paging.CombinedLoadStates)>($r0);

        return $z0;
    }

    public static final boolean access$hasError(androidx.paging.CombinedLoadStates)
    {
        androidx.paging.CombinedLoadStates $r0;
        boolean $z0;

        $r0 := @parameter0: androidx.paging.CombinedLoadStates;

        $z0 = staticinvoke <androidx.paging.testing.PagerFlowSnapshotKt: boolean hasError(androidx.paging.CombinedLoadStates)>($r0);

        return $z0;
    }

