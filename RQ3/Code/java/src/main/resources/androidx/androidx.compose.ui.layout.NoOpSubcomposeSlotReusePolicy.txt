androidx.compose.ui.layout.NoOpSubcomposeSlotReusePolicy
<androidx.compose.ui.layout.NoOpSubcomposeSlotReusePolicy: androidx.compose.ui.layout.NoOpSubcomposeSlotReusePolicy INSTANCE>
    private void <init>()
    {
        androidx.compose.ui.layout.NoOpSubcomposeSlotReusePolicy r0;

        r0 := @this: androidx.compose.ui.layout.NoOpSubcomposeSlotReusePolicy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void getSlotsToRetain(androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet)
    {
        androidx.compose.ui.layout.NoOpSubcomposeSlotReusePolicy r0;
        androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet r1;

        r0 := @this: androidx.compose.ui.layout.NoOpSubcomposeSlotReusePolicy;

        r1 := @parameter0: androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "slotIds");

        virtualinvoke r1.<androidx.compose.ui.layout.SubcomposeSlotReusePolicy$SlotIdsSet: void clear()>();

        return;
    }

    public boolean areCompatible(java.lang.Object, java.lang.Object)
    {
        androidx.compose.ui.layout.NoOpSubcomposeSlotReusePolicy r0;
        java.lang.Object r1, r2;

        r0 := @this: androidx.compose.ui.layout.NoOpSubcomposeSlotReusePolicy;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        return 0;
    }

    static void <clinit>()
    {
        androidx.compose.ui.layout.NoOpSubcomposeSlotReusePolicy $r0;

        $r0 = new androidx.compose.ui.layout.NoOpSubcomposeSlotReusePolicy;

        specialinvoke $r0.<androidx.compose.ui.layout.NoOpSubcomposeSlotReusePolicy: void <init>()>();

        <androidx.compose.ui.layout.NoOpSubcomposeSlotReusePolicy: androidx.compose.ui.layout.NoOpSubcomposeSlotReusePolicy INSTANCE> = $r0;

        return;
    }

