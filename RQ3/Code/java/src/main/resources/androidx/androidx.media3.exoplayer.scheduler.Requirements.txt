androidx.media3.exoplayer.scheduler.Requirements
<androidx.media3.exoplayer.scheduler.Requirements: int NETWORK>
<androidx.media3.exoplayer.scheduler.Requirements: int NETWORK_UNMETERED>
<androidx.media3.exoplayer.scheduler.Requirements: int DEVICE_IDLE>
<androidx.media3.exoplayer.scheduler.Requirements: int DEVICE_CHARGING>
<androidx.media3.exoplayer.scheduler.Requirements: int DEVICE_STORAGE_NOT_LOW>
<androidx.media3.exoplayer.scheduler.Requirements: int requirements>
<androidx.media3.exoplayer.scheduler.Requirements: android.os.Parcelable$Creator CREATOR>
    public void <init>(int)
    {
        androidx.media3.exoplayer.scheduler.Requirements r0;
        int $i0, i1;

        r0 := @this: androidx.media3.exoplayer.scheduler.Requirements;

        i1 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = i1 & 2;

        if $i0 == 0 goto label1;

        i1 = i1 | 1;

     label1:
        r0.<androidx.media3.exoplayer.scheduler.Requirements: int requirements> = i1;

        return;
    }

    public int getRequirements()
    {
        androidx.media3.exoplayer.scheduler.Requirements r0;
        int $i0;

        r0 := @this: androidx.media3.exoplayer.scheduler.Requirements;

        $i0 = r0.<androidx.media3.exoplayer.scheduler.Requirements: int requirements>;

        return $i0;
    }

    public androidx.media3.exoplayer.scheduler.Requirements filterRequirements(int)
    {
        androidx.media3.exoplayer.scheduler.Requirements r0, $r1;
        int i0, i1, $i2, $i3;

        r0 := @this: androidx.media3.exoplayer.scheduler.Requirements;

        i0 := @parameter0: int;

        $i2 = r0.<androidx.media3.exoplayer.scheduler.Requirements: int requirements>;

        i1 = $i2 & i0;

        $i3 = r0.<androidx.media3.exoplayer.scheduler.Requirements: int requirements>;

        if i1 != $i3 goto label1;

        $r1 = r0;

        goto label2;

     label1:
        $r1 = new androidx.media3.exoplayer.scheduler.Requirements;

        specialinvoke $r1.<androidx.media3.exoplayer.scheduler.Requirements: void <init>(int)>(i1);

     label2:
        return $r1;
    }

    public boolean isNetworkRequired()
    {
        androidx.media3.exoplayer.scheduler.Requirements r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.scheduler.Requirements;

        $i0 = r0.<androidx.media3.exoplayer.scheduler.Requirements: int requirements>;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isUnmeteredNetworkRequired()
    {
        androidx.media3.exoplayer.scheduler.Requirements r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.scheduler.Requirements;

        $i0 = r0.<androidx.media3.exoplayer.scheduler.Requirements: int requirements>;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isChargingRequired()
    {
        androidx.media3.exoplayer.scheduler.Requirements r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.scheduler.Requirements;

        $i0 = r0.<androidx.media3.exoplayer.scheduler.Requirements: int requirements>;

        $i1 = $i0 & 8;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isIdleRequired()
    {
        androidx.media3.exoplayer.scheduler.Requirements r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.scheduler.Requirements;

        $i0 = r0.<androidx.media3.exoplayer.scheduler.Requirements: int requirements>;

        $i1 = $i0 & 4;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isStorageNotLowRequired()
    {
        androidx.media3.exoplayer.scheduler.Requirements r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.scheduler.Requirements;

        $i0 = r0.<androidx.media3.exoplayer.scheduler.Requirements: int requirements>;

        $i1 = $i0 & 16;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean checkRequirements(android.content.Context)
    {
        androidx.media3.exoplayer.scheduler.Requirements r0;
        android.content.Context r1;
        int $i0;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.scheduler.Requirements;

        r1 := @parameter0: android.content.Context;

        $i0 = virtualinvoke r0.<androidx.media3.exoplayer.scheduler.Requirements: int getNotMetRequirements(android.content.Context)>(r1);

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int getNotMetRequirements(android.content.Context)
    {
        androidx.media3.exoplayer.scheduler.Requirements r0;
        android.content.Context r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        int i0;

        r0 := @this: androidx.media3.exoplayer.scheduler.Requirements;

        r1 := @parameter0: android.content.Context;

        i0 = specialinvoke r0.<androidx.media3.exoplayer.scheduler.Requirements: int getNotMetNetworkRequirements(android.content.Context)>(r1);

        $z0 = virtualinvoke r0.<androidx.media3.exoplayer.scheduler.Requirements: boolean isChargingRequired()>();

        if $z0 == 0 goto label1;

        $z3 = specialinvoke r0.<androidx.media3.exoplayer.scheduler.Requirements: boolean isDeviceCharging(android.content.Context)>(r1);

        if $z3 != 0 goto label1;

        i0 = i0 | 8;

     label1:
        $z4 = virtualinvoke r0.<androidx.media3.exoplayer.scheduler.Requirements: boolean isIdleRequired()>();

        if $z4 == 0 goto label2;

        $z2 = specialinvoke r0.<androidx.media3.exoplayer.scheduler.Requirements: boolean isDeviceIdle(android.content.Context)>(r1);

        if $z2 != 0 goto label2;

        i0 = i0 | 4;

     label2:
        $z5 = virtualinvoke r0.<androidx.media3.exoplayer.scheduler.Requirements: boolean isStorageNotLowRequired()>();

        if $z5 == 0 goto label3;

        $z1 = specialinvoke r0.<androidx.media3.exoplayer.scheduler.Requirements: boolean isStorageNotLow(android.content.Context)>(r1);

        if $z1 != 0 goto label3;

        i0 = i0 | 16;

     label3:
        return i0;
    }

    private int getNotMetNetworkRequirements(android.content.Context)
    {
        androidx.media3.exoplayer.scheduler.Requirements r0;
        android.content.Context r1;
        android.net.ConnectivityManager r2;
        android.net.NetworkInfo r3;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object $r4, $r5;
        int $i0, $i1;

        r0 := @this: androidx.media3.exoplayer.scheduler.Requirements;

        r1 := @parameter0: android.content.Context;

        $z0 = virtualinvoke r0.<androidx.media3.exoplayer.scheduler.Requirements: boolean isNetworkRequired()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r4 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("connectivity");

        $r5 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r4);

        r2 = (android.net.ConnectivityManager) $r5;

        r3 = virtualinvoke r2.<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>();

        if r3 == null goto label2;

        $z1 = virtualinvoke r3.<android.net.NetworkInfo: boolean isConnected()>();

        if $z1 == 0 goto label2;

        $z2 = staticinvoke <androidx.media3.exoplayer.scheduler.Requirements: boolean isInternetConnectivityValidated(android.net.ConnectivityManager)>(r2);

        if $z2 != 0 goto label3;

     label2:
        $i0 = r0.<androidx.media3.exoplayer.scheduler.Requirements: int requirements>;

        $i1 = $i0 & 3;

        return $i1;

     label3:
        $z3 = virtualinvoke r0.<androidx.media3.exoplayer.scheduler.Requirements: boolean isUnmeteredNetworkRequired()>();

        if $z3 == 0 goto label4;

        $z4 = virtualinvoke r2.<android.net.ConnectivityManager: boolean isActiveNetworkMetered()>();

        if $z4 == 0 goto label4;

        return 2;

     label4:
        return 0;
    }

    private boolean isDeviceCharging(android.content.Context)
    {
        androidx.media3.exoplayer.scheduler.Requirements r0;
        android.content.Context r1;
        android.content.Intent r2;
        int i0;
        android.content.IntentFilter $r3;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.scheduler.Requirements;

        r1 := @parameter0: android.content.Context;

        $r3 = new android.content.IntentFilter;

        specialinvoke $r3.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.BATTERY_CHANGED");

        r2 = virtualinvoke r1.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>(null, $r3);

        if r2 != null goto label1;

        return 0;

     label1:
        i0 = virtualinvoke r2.<android.content.Intent: int getIntExtra(java.lang.String,int)>("status", -1);

        if i0 == 2 goto label2;

        if i0 != 5 goto label3;

     label2:
        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    private boolean isDeviceIdle(android.content.Context)
    {
        androidx.media3.exoplayer.scheduler.Requirements r0;
        android.content.Context r1;
        android.os.PowerManager r2;
        java.lang.Object $r3, $r4;
        int $i0, $i1;
        boolean $z0, $z1, $z2;

        r0 := @this: androidx.media3.exoplayer.scheduler.Requirements;

        r1 := @parameter0: android.content.Context;

        $r3 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        $r4 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r3);

        r2 = (android.os.PowerManager) $r4;

        $i0 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i0 < 23 goto label1;

        $z2 = virtualinvoke r2.<android.os.PowerManager: boolean isDeviceIdleMode()>();

        goto label5;

     label1:
        $i1 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i1 < 20 goto label3;

        $z1 = virtualinvoke r2.<android.os.PowerManager: boolean isInteractive()>();

        if $z1 != 0 goto label2;

        $z2 = 1;

        goto label5;

     label2:
        $z2 = 0;

        goto label5;

     label3:
        $z0 = virtualinvoke r2.<android.os.PowerManager: boolean isScreenOn()>();

        if $z0 != 0 goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        return $z2;
    }

    private boolean isStorageNotLow(android.content.Context)
    {
        androidx.media3.exoplayer.scheduler.Requirements r0;
        android.content.Context r1;
        android.content.IntentFilter $r2;
        android.content.Intent $r3;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.scheduler.Requirements;

        r1 := @parameter0: android.content.Context;

        $r2 = new android.content.IntentFilter;

        specialinvoke $r2.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.DEVICE_STORAGE_LOW");

        $r3 = virtualinvoke r1.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>(null, $r2);

        if $r3 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static boolean isInternetConnectivityValidated(android.net.ConnectivityManager)
    {
        android.net.ConnectivityManager r0;
        android.net.Network r1;
        int $i0;
        boolean $z0, $z1;
        java.lang.Throwable $r2, r4;
        android.net.NetworkCapabilities r3;

        r0 := @parameter0: android.net.ConnectivityManager;

        $i0 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i0 >= 24 goto label1;

        return 1;

     label1:
        r1 = virtualinvoke r0.<android.net.ConnectivityManager: android.net.Network getActiveNetwork()>();

        if r1 != null goto label2;

        return 0;

     label2:
        r3 = virtualinvoke r0.<android.net.ConnectivityManager: android.net.NetworkCapabilities getNetworkCapabilities(android.net.Network)>(r1);

        if r3 == null goto label3;

        $z0 = virtualinvoke r3.<android.net.NetworkCapabilities: boolean hasCapability(int)>(16);

        if $z0 == 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;

     label5:
        $r2 := @caughtexception;

        r4 = $r2;

        return 1;

        catch java.lang.SecurityException from label2 to label4 with label5;
    }

    public boolean equals(java.lang.Object)
    {
        androidx.media3.exoplayer.scheduler.Requirements r0, $r4;
        java.lang.Object r1;
        java.lang.Class $r2, $r3;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.scheduler.Requirements;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 == null goto label2;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label3;

     label2:
        return 0;

     label3:
        $i1 = r0.<androidx.media3.exoplayer.scheduler.Requirements: int requirements>;

        $r4 = (androidx.media3.exoplayer.scheduler.Requirements) r1;

        $i0 = $r4.<androidx.media3.exoplayer.scheduler.Requirements: int requirements>;

        if $i1 != $i0 goto label4;

        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        return $z0;
    }

    public int hashCode()
    {
        androidx.media3.exoplayer.scheduler.Requirements r0;
        int $i0;

        r0 := @this: androidx.media3.exoplayer.scheduler.Requirements;

        $i0 = r0.<androidx.media3.exoplayer.scheduler.Requirements: int requirements>;

        return $i0;
    }

    public int describeContents()
    {
        androidx.media3.exoplayer.scheduler.Requirements r0;

        r0 := @this: androidx.media3.exoplayer.scheduler.Requirements;

        return 0;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        androidx.media3.exoplayer.scheduler.Requirements r0;
        android.os.Parcel r1;
        int i0, $i1;

        r0 := @this: androidx.media3.exoplayer.scheduler.Requirements;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        $i1 = r0.<androidx.media3.exoplayer.scheduler.Requirements: int requirements>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i1);

        return;
    }

    static void <clinit>()
    {
        androidx.media3.exoplayer.scheduler.Requirements$1 $r0;

        $r0 = new androidx.media3.exoplayer.scheduler.Requirements$1;

        specialinvoke $r0.<androidx.media3.exoplayer.scheduler.Requirements$1: void <init>()>();

        <androidx.media3.exoplayer.scheduler.Requirements: android.os.Parcelable$Creator CREATOR> = $r0;

        return;
    }

androidx.media3.exoplayer.scheduler.Requirements$1
    void <init>()
    {
        androidx.media3.exoplayer.scheduler.Requirements$1 r0;

        r0 := @this: androidx.media3.exoplayer.scheduler.Requirements$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public androidx.media3.exoplayer.scheduler.Requirements createFromParcel(android.os.Parcel)
    {
        androidx.media3.exoplayer.scheduler.Requirements$1 r0;
        android.os.Parcel r1;
        androidx.media3.exoplayer.scheduler.Requirements $r2;
        int $i0;

        r0 := @this: androidx.media3.exoplayer.scheduler.Requirements$1;

        r1 := @parameter0: android.os.Parcel;

        $r2 = new androidx.media3.exoplayer.scheduler.Requirements;

        $i0 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        specialinvoke $r2.<androidx.media3.exoplayer.scheduler.Requirements: void <init>(int)>($i0);

        return $r2;
    }

    public androidx.media3.exoplayer.scheduler.Requirements[] newArray(int)
    {
        androidx.media3.exoplayer.scheduler.Requirements$1 r0;
        int i0;
        androidx.media3.exoplayer.scheduler.Requirements[] $r1;

        r0 := @this: androidx.media3.exoplayer.scheduler.Requirements$1;

        i0 := @parameter0: int;

        $r1 = newarray (androidx.media3.exoplayer.scheduler.Requirements)[i0];

        return $r1;
    }

    public volatile java.lang.Object[] newArray(int)
    {
        androidx.media3.exoplayer.scheduler.Requirements$1 r0;
        int i0;
        androidx.media3.exoplayer.scheduler.Requirements[] $r1;

        r0 := @this: androidx.media3.exoplayer.scheduler.Requirements$1;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.media3.exoplayer.scheduler.Requirements$1: androidx.media3.exoplayer.scheduler.Requirements[] newArray(int)>(i0);

        return $r1;
    }

    public volatile java.lang.Object createFromParcel(android.os.Parcel)
    {
        androidx.media3.exoplayer.scheduler.Requirements$1 r0;
        android.os.Parcel r1;
        androidx.media3.exoplayer.scheduler.Requirements $r2;

        r0 := @this: androidx.media3.exoplayer.scheduler.Requirements$1;

        r1 := @parameter0: android.os.Parcel;

        $r2 = virtualinvoke r0.<androidx.media3.exoplayer.scheduler.Requirements$1: androidx.media3.exoplayer.scheduler.Requirements createFromParcel(android.os.Parcel)>(r1);

        return $r2;
    }

androidx.media3.exoplayer.scheduler.Requirements$RequirementFlags
