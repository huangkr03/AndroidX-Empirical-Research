androidx.autofill.inline.common.ImageViewStyle
<androidx.autofill.inline.common.ImageViewStyle: java.lang.String TAG>
<androidx.autofill.inline.common.ImageViewStyle: java.lang.String KEY_IMAGE_VIEW_STYLE>
<androidx.autofill.inline.common.ImageViewStyle: java.lang.String KEY_IMAGE_SCALE_TYPE>
<androidx.autofill.inline.common.ImageViewStyle: java.lang.String KEY_IMAGE_MAX_WIDTH>
<androidx.autofill.inline.common.ImageViewStyle: java.lang.String KEY_IMAGE_MAX_HEIGHT>
<androidx.autofill.inline.common.ImageViewStyle: java.lang.String KEY_IMAGE_TINT_LIST>
    public void <init>(android.os.Bundle)
    {
        androidx.autofill.inline.common.ImageViewStyle r0;
        android.os.Bundle r1;

        r0 := @this: androidx.autofill.inline.common.ImageViewStyle;

        r1 := @parameter0: android.os.Bundle;

        specialinvoke r0.<androidx.autofill.inline.common.ViewStyle: void <init>(android.os.Bundle)>(r1);

        return;
    }

    protected java.lang.String getStyleKey()
    {
        androidx.autofill.inline.common.ImageViewStyle r0;

        r0 := @this: androidx.autofill.inline.common.ImageViewStyle;

        return "image_view_style";
    }

    public void applyStyleOnImageViewIfValid(android.widget.ImageView)
    {
        androidx.autofill.inline.common.ImageViewStyle r0;
        android.widget.ImageView r1;
        java.lang.Throwable r2, $r12;
        boolean $z0, $z1, $z2, $z3, $z4;
        android.os.Bundle $r3, $r4, $r5, $r6, $r8, $r10, $r11, $r18;
        android.widget.ImageView$ScaleType $r7;
        android.os.Parcelable $r9;
        int $i0, $i1;
        java.lang.StringBuilder $r13, $r14, $r15;
        java.lang.String $r16, r19;
        android.content.res.ColorStateList r17;

        r0 := @this: androidx.autofill.inline.common.ImageViewStyle;

        r1 := @parameter0: android.widget.ImageView;

        $z0 = virtualinvoke r0.<androidx.autofill.inline.common.ImageViewStyle: boolean isValid()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<androidx.autofill.inline.common.ViewStyle: void applyStyleOnViewIfValid(android.view.View)>(r1);

        $r3 = r0.<androidx.autofill.inline.common.ImageViewStyle: android.os.Bundle mBundle>;

        $z1 = virtualinvoke $r3.<android.os.Bundle: boolean containsKey(java.lang.String)>("image_max_width");

        if $z1 == 0 goto label2;

        $r11 = r0.<androidx.autofill.inline.common.ImageViewStyle: android.os.Bundle mBundle>;

        $i1 = virtualinvoke $r11.<android.os.Bundle: int getInt(java.lang.String)>("image_max_width");

        virtualinvoke r1.<android.widget.ImageView: void setMaxWidth(int)>($i1);

        virtualinvoke r1.<android.widget.ImageView: void setAdjustViewBounds(boolean)>(1);

     label2:
        $r4 = r0.<androidx.autofill.inline.common.ImageViewStyle: android.os.Bundle mBundle>;

        $z2 = virtualinvoke $r4.<android.os.Bundle: boolean containsKey(java.lang.String)>("image_max_height");

        if $z2 == 0 goto label3;

        $r10 = r0.<androidx.autofill.inline.common.ImageViewStyle: android.os.Bundle mBundle>;

        $i0 = virtualinvoke $r10.<android.os.Bundle: int getInt(java.lang.String)>("image_max_height");

        virtualinvoke r1.<android.widget.ImageView: void setMaxHeight(int)>($i0);

        virtualinvoke r1.<android.widget.ImageView: void setAdjustViewBounds(boolean)>(1);

     label3:
        $r5 = r0.<androidx.autofill.inline.common.ImageViewStyle: android.os.Bundle mBundle>;

        $z3 = virtualinvoke $r5.<android.os.Bundle: boolean containsKey(java.lang.String)>("image_tint_list");

        if $z3 == 0 goto label4;

        $r8 = r0.<androidx.autofill.inline.common.ImageViewStyle: android.os.Bundle mBundle>;

        $r9 = virtualinvoke $r8.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("image_tint_list");

        r17 = (android.content.res.ColorStateList) $r9;

        if r17 == null goto label4;

        virtualinvoke r1.<android.widget.ImageView: void setImageTintList(android.content.res.ColorStateList)>(r17);

     label4:
        $r18 = r0.<androidx.autofill.inline.common.ImageViewStyle: android.os.Bundle mBundle>;

        $z4 = virtualinvoke $r18.<android.os.Bundle: boolean containsKey(java.lang.String)>("image_scale_type");

        if $z4 == 0 goto label8;

        $r6 = r0.<androidx.autofill.inline.common.ImageViewStyle: android.os.Bundle mBundle>;

        r19 = virtualinvoke $r6.<android.os.Bundle: java.lang.String getString(java.lang.String)>("image_scale_type");

        if r19 == null goto label8;

     label5:
        $r7 = staticinvoke <android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType valueOf(java.lang.String)>(r19);

        virtualinvoke r1.<android.widget.ImageView: void setScaleType(android.widget.ImageView$ScaleType)>($r7);

     label6:
        goto label8;

     label7:
        $r12 := @caughtexception;

        r2 = $r12;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot recognize the scale type: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("ImageViewStyle", $r16);

     label8:
        return;

        catch java.lang.IllegalArgumentException from label5 to label6 with label7;
    }

androidx.autofill.inline.common.ImageViewStyle$Builder
    public void <init>()
    {
        androidx.autofill.inline.common.ImageViewStyle$Builder r0;

        r0 := @this: androidx.autofill.inline.common.ImageViewStyle$Builder;

        specialinvoke r0.<androidx.autofill.inline.common.ViewStyle$BaseBuilder: void <init>(java.lang.String)>("image_view_style");

        return;
    }

    protected androidx.autofill.inline.common.ImageViewStyle$Builder getThis()
    {
        androidx.autofill.inline.common.ImageViewStyle$Builder r0;

        r0 := @this: androidx.autofill.inline.common.ImageViewStyle$Builder;

        return r0;
    }

    public androidx.autofill.inline.common.ImageViewStyle$Builder setScaleType(android.widget.ImageView$ScaleType)
    {
        androidx.autofill.inline.common.ImageViewStyle$Builder r0;
        android.widget.ImageView$ScaleType r1;
        android.os.Bundle $r3;
        java.lang.String $r4;

        r0 := @this: androidx.autofill.inline.common.ImageViewStyle$Builder;

        r1 := @parameter0: android.widget.ImageView$ScaleType;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "scaleType should not be null");

        $r3 = r0.<androidx.autofill.inline.common.ImageViewStyle$Builder: android.os.Bundle mBundle>;

        $r4 = virtualinvoke r1.<android.widget.ImageView$ScaleType: java.lang.String name()>();

        virtualinvoke $r3.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("image_scale_type", $r4);

        return r0;
    }

    public androidx.autofill.inline.common.ImageViewStyle$Builder setMaxWidth(int)
    {
        androidx.autofill.inline.common.ImageViewStyle$Builder r0;
        int i0;
        android.os.Bundle $r1;

        r0 := @this: androidx.autofill.inline.common.ImageViewStyle$Builder;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.autofill.inline.common.ImageViewStyle$Builder: android.os.Bundle mBundle>;

        virtualinvoke $r1.<android.os.Bundle: void putInt(java.lang.String,int)>("image_max_width", i0);

        return r0;
    }

    public androidx.autofill.inline.common.ImageViewStyle$Builder setMaxHeight(int)
    {
        androidx.autofill.inline.common.ImageViewStyle$Builder r0;
        int i0;
        android.os.Bundle $r1;

        r0 := @this: androidx.autofill.inline.common.ImageViewStyle$Builder;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.autofill.inline.common.ImageViewStyle$Builder: android.os.Bundle mBundle>;

        virtualinvoke $r1.<android.os.Bundle: void putInt(java.lang.String,int)>("image_max_height", i0);

        return r0;
    }

    public androidx.autofill.inline.common.ImageViewStyle$Builder setTintList(android.content.res.ColorStateList)
    {
        androidx.autofill.inline.common.ImageViewStyle$Builder r0;
        android.content.res.ColorStateList r1;
        android.os.Bundle $r3;

        r0 := @this: androidx.autofill.inline.common.ImageViewStyle$Builder;

        r1 := @parameter0: android.content.res.ColorStateList;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "imageTintList should not be null");

        $r3 = r0.<androidx.autofill.inline.common.ImageViewStyle$Builder: android.os.Bundle mBundle>;

        virtualinvoke $r3.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("image_tint_list", r1);

        return r0;
    }

    public androidx.autofill.inline.common.ImageViewStyle build()
    {
        androidx.autofill.inline.common.ImageViewStyle$Builder r0;
        androidx.autofill.inline.common.ImageViewStyle $r1;
        android.os.Bundle $r2;

        r0 := @this: androidx.autofill.inline.common.ImageViewStyle$Builder;

        $r1 = new androidx.autofill.inline.common.ImageViewStyle;

        $r2 = r0.<androidx.autofill.inline.common.ImageViewStyle$Builder: android.os.Bundle mBundle>;

        specialinvoke $r1.<androidx.autofill.inline.common.ImageViewStyle: void <init>(android.os.Bundle)>($r2);

        return $r1;
    }

    protected volatile androidx.autofill.inline.common.ViewStyle$BaseBuilder getThis()
    {
        androidx.autofill.inline.common.ImageViewStyle$Builder r0, $r1;

        r0 := @this: androidx.autofill.inline.common.ImageViewStyle$Builder;

        $r1 = virtualinvoke r0.<androidx.autofill.inline.common.ImageViewStyle$Builder: androidx.autofill.inline.common.ImageViewStyle$Builder getThis()>();

        return $r1;
    }

    public volatile androidx.autofill.inline.common.BundledStyle build()
    {
        androidx.autofill.inline.common.ImageViewStyle$Builder r0;
        androidx.autofill.inline.common.ImageViewStyle $r1;

        r0 := @this: androidx.autofill.inline.common.ImageViewStyle$Builder;

        $r1 = virtualinvoke r0.<androidx.autofill.inline.common.ImageViewStyle$Builder: androidx.autofill.inline.common.ImageViewStyle build()>();

        return $r1;
    }

