androidx.compose.ui.input.pointer.NodeParent
<androidx.compose.ui.input.pointer.NodeParent: androidx.compose.runtime.collection.MutableVector children>
    public void <init>()
    {
        androidx.compose.ui.input.pointer.NodeParent r0;
        byte b0;
        androidx.compose.runtime.collection.MutableVector $r1;
        androidx.compose.ui.input.pointer.Node[] $r2;

        r0 := @this: androidx.compose.ui.input.pointer.NodeParent;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        b0 = 16;

        $r1 = new androidx.compose.runtime.collection.MutableVector;

        $r2 = newarray (androidx.compose.ui.input.pointer.Node)[b0];

        specialinvoke $r1.<androidx.compose.runtime.collection.MutableVector: void <init>(java.lang.Object[],int)>($r2, 0);

        r0.<androidx.compose.ui.input.pointer.NodeParent: androidx.compose.runtime.collection.MutableVector children> = $r1;

        return;
    }

    public final androidx.compose.runtime.collection.MutableVector getChildren()
    {
        androidx.compose.ui.input.pointer.NodeParent r0;
        androidx.compose.runtime.collection.MutableVector $r1;

        r0 := @this: androidx.compose.ui.input.pointer.NodeParent;

        $r1 = r0.<androidx.compose.ui.input.pointer.NodeParent: androidx.compose.runtime.collection.MutableVector children>;

        return $r1;
    }

    public boolean buildCache(java.util.Map, androidx.compose.ui.layout.LayoutCoordinates, androidx.compose.ui.input.pointer.InternalPointerEvent, boolean)
    {
        androidx.compose.ui.input.pointer.NodeParent r0;
        java.util.Map r1;
        androidx.compose.ui.layout.LayoutCoordinates r2;
        androidx.compose.ui.input.pointer.InternalPointerEvent r3;
        boolean z0, $z3, z4, $z5;
        androidx.compose.runtime.collection.MutableVector r4;
        int i0, i1;
        java.lang.Object[] r5, $r7;
        androidx.compose.ui.input.pointer.Node r6;
        java.lang.Object $r8;

        r0 := @this: androidx.compose.ui.input.pointer.NodeParent;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: androidx.compose.ui.layout.LayoutCoordinates;

        r3 := @parameter2: androidx.compose.ui.input.pointer.InternalPointerEvent;

        z0 := @parameter3: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "changes");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "parentCoordinates");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "internalPointerEvent");

        z4 = 0;

        r4 = r0.<androidx.compose.ui.input.pointer.NodeParent: androidx.compose.runtime.collection.MutableVector children>;

        i0 = virtualinvoke r4.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i0 <= 0 goto label5;

        i1 = 0;

        $r7 = virtualinvoke r4.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r7, "null cannot be cast to non-null type kotlin.Array<T of androidx.compose.runtime.collection.MutableVector>");

        r5 = $r7;

     label1:
        $r8 = r5[i1];

        r6 = (androidx.compose.ui.input.pointer.Node) $r8;

        $z3 = virtualinvoke r6.<androidx.compose.ui.input.pointer.Node: boolean buildCache(java.util.Map,androidx.compose.ui.layout.LayoutCoordinates,androidx.compose.ui.input.pointer.InternalPointerEvent,boolean)>(r1, r2, r3, z0);

        if $z3 != 0 goto label2;

        if z4 == 0 goto label3;

     label2:
        $z5 = 1;

        goto label4;

     label3:
        $z5 = 0;

     label4:
        z4 = $z5;

        i1 = i1 + 1;

        if i1 < i0 goto label1;

     label5:
        return z4;
    }

    public boolean dispatchMainEventPass(java.util.Map, androidx.compose.ui.layout.LayoutCoordinates, androidx.compose.ui.input.pointer.InternalPointerEvent, boolean)
    {
        androidx.compose.ui.input.pointer.NodeParent r0;
        java.util.Map r1;
        androidx.compose.ui.layout.LayoutCoordinates r2;
        androidx.compose.ui.input.pointer.InternalPointerEvent r3;
        boolean z0, $z3, z4, $z5;
        androidx.compose.runtime.collection.MutableVector r4;
        int i0, i1;
        java.lang.Object[] r5, $r7;
        androidx.compose.ui.input.pointer.Node r6;
        java.lang.Object $r8;

        r0 := @this: androidx.compose.ui.input.pointer.NodeParent;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: androidx.compose.ui.layout.LayoutCoordinates;

        r3 := @parameter2: androidx.compose.ui.input.pointer.InternalPointerEvent;

        z0 := @parameter3: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "changes");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "parentCoordinates");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "internalPointerEvent");

        z4 = 0;

        r4 = r0.<androidx.compose.ui.input.pointer.NodeParent: androidx.compose.runtime.collection.MutableVector children>;

        i0 = virtualinvoke r4.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i0 <= 0 goto label5;

        i1 = 0;

        $r7 = virtualinvoke r4.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r7, "null cannot be cast to non-null type kotlin.Array<T of androidx.compose.runtime.collection.MutableVector>");

        r5 = $r7;

     label1:
        $r8 = r5[i1];

        r6 = (androidx.compose.ui.input.pointer.Node) $r8;

        $z3 = virtualinvoke r6.<androidx.compose.ui.input.pointer.Node: boolean dispatchMainEventPass(java.util.Map,androidx.compose.ui.layout.LayoutCoordinates,androidx.compose.ui.input.pointer.InternalPointerEvent,boolean)>(r1, r2, r3, z0);

        if $z3 != 0 goto label2;

        if z4 == 0 goto label3;

     label2:
        $z5 = 1;

        goto label4;

     label3:
        $z5 = 0;

     label4:
        z4 = $z5;

        i1 = i1 + 1;

        if i1 < i0 goto label1;

     label5:
        return z4;
    }

    public boolean dispatchFinalEventPass(androidx.compose.ui.input.pointer.InternalPointerEvent)
    {
        androidx.compose.ui.input.pointer.NodeParent r0;
        androidx.compose.ui.input.pointer.InternalPointerEvent r1;
        androidx.compose.runtime.collection.MutableVector r2;
        int i0, i1;
        java.lang.Object[] r3, $r5;
        androidx.compose.ui.input.pointer.Node r4;
        java.lang.Object $r6;
        boolean $z2, z3, $z4;

        r0 := @this: androidx.compose.ui.input.pointer.NodeParent;

        r1 := @parameter0: androidx.compose.ui.input.pointer.InternalPointerEvent;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "internalPointerEvent");

        z3 = 0;

        r2 = r0.<androidx.compose.ui.input.pointer.NodeParent: androidx.compose.runtime.collection.MutableVector children>;

        i0 = virtualinvoke r2.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i0 <= 0 goto label5;

        i1 = 0;

        $r5 = virtualinvoke r2.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r5, "null cannot be cast to non-null type kotlin.Array<T of androidx.compose.runtime.collection.MutableVector>");

        r3 = $r5;

     label1:
        $r6 = r3[i1];

        r4 = (androidx.compose.ui.input.pointer.Node) $r6;

        $z2 = virtualinvoke r4.<androidx.compose.ui.input.pointer.Node: boolean dispatchFinalEventPass(androidx.compose.ui.input.pointer.InternalPointerEvent)>(r1);

        if $z2 != 0 goto label2;

        if z3 == 0 goto label3;

     label2:
        $z4 = 1;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        z3 = $z4;

        i1 = i1 + 1;

        if i1 < i0 goto label1;

     label5:
        virtualinvoke r0.<androidx.compose.ui.input.pointer.NodeParent: void cleanUpHits(androidx.compose.ui.input.pointer.InternalPointerEvent)>(r1);

        return z3;
    }

    public void dispatchCancel()
    {
        androidx.compose.ui.input.pointer.NodeParent r0;
        androidx.compose.runtime.collection.MutableVector r1;
        int i0, i1;
        java.lang.Object[] r2, $r4;
        androidx.compose.ui.input.pointer.Node r3;
        java.lang.Object $r5;

        r0 := @this: androidx.compose.ui.input.pointer.NodeParent;

        r1 = r0.<androidx.compose.ui.input.pointer.NodeParent: androidx.compose.runtime.collection.MutableVector children>;

        i0 = virtualinvoke r1.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i0 <= 0 goto label2;

        i1 = 0;

        $r4 = virtualinvoke r1.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r4, "null cannot be cast to non-null type kotlin.Array<T of androidx.compose.runtime.collection.MutableVector>");

        r2 = $r4;

     label1:
        $r5 = r2[i1];

        r3 = (androidx.compose.ui.input.pointer.Node) $r5;

        virtualinvoke r3.<androidx.compose.ui.input.pointer.Node: void dispatchCancel()>();

        i1 = i1 + 1;

        if i1 < i0 goto label1;

     label2:
        return;
    }

    public final void clear()
    {
        androidx.compose.ui.input.pointer.NodeParent r0;
        androidx.compose.runtime.collection.MutableVector $r1;

        r0 := @this: androidx.compose.ui.input.pointer.NodeParent;

        $r1 = r0.<androidx.compose.ui.input.pointer.NodeParent: androidx.compose.runtime.collection.MutableVector children>;

        virtualinvoke $r1.<androidx.compose.runtime.collection.MutableVector: void clear()>();

        return;
    }

    public final void removeDetachedPointerInputFilters()
    {
        androidx.compose.ui.input.pointer.NodeParent r0;
        androidx.compose.ui.input.pointer.Node r1;
        androidx.compose.runtime.collection.MutableVector r2, $r6, $r8;
        java.lang.Object[] $r3;
        java.lang.Object $r4;
        androidx.compose.ui.node.PointerInputModifierNode $r5;
        boolean $z1;
        int i0, $i1;

        r0 := @this: androidx.compose.ui.input.pointer.NodeParent;

        i0 = 0;

     label1:
        $r8 = r0.<androidx.compose.ui.input.pointer.NodeParent: androidx.compose.runtime.collection.MutableVector children>;

        $i1 = virtualinvoke $r8.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i0 >= $i1 goto label3;

        r2 = r0.<androidx.compose.ui.input.pointer.NodeParent: androidx.compose.runtime.collection.MutableVector children>;

        $r3 = virtualinvoke r2.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        $r4 = $r3[i0];

        r1 = (androidx.compose.ui.input.pointer.Node) $r4;

        $r5 = virtualinvoke r1.<androidx.compose.ui.input.pointer.Node: androidx.compose.ui.node.PointerInputModifierNode getPointerInputNode()>();

        $z1 = staticinvoke <androidx.compose.ui.node.PointerInputModifierNodeKt: boolean isAttached(androidx.compose.ui.node.PointerInputModifierNode)>($r5);

        if $z1 != 0 goto label2;

        $r6 = r0.<androidx.compose.ui.input.pointer.NodeParent: androidx.compose.runtime.collection.MutableVector children>;

        virtualinvoke $r6.<androidx.compose.runtime.collection.MutableVector: java.lang.Object removeAt(int)>(i0);

        virtualinvoke r1.<androidx.compose.ui.input.pointer.Node: void dispatchCancel()>();

        goto label1;

     label2:
        i0 = i0 + 1;

        virtualinvoke r1.<androidx.compose.ui.input.pointer.Node: void removeDetachedPointerInputFilters()>();

        goto label1;

     label3:
        return;
    }

    public void cleanUpHits(androidx.compose.ui.input.pointer.InternalPointerEvent)
    {
        androidx.compose.ui.input.pointer.NodeParent r0;
        androidx.compose.ui.input.pointer.InternalPointerEvent r1;
        int $i0, i1;
        java.lang.Object[] $r2;
        java.lang.Object $r3;
        androidx.compose.runtime.collection.MutableVector $r4, $r5, r7, $r8;
        boolean $z1;
        androidx.compose.ui.input.pointer.Node r9;

        r0 := @this: androidx.compose.ui.input.pointer.NodeParent;

        r1 := @parameter0: androidx.compose.ui.input.pointer.InternalPointerEvent;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "internalPointerEvent");

        r7 = r0.<androidx.compose.ui.input.pointer.NodeParent: androidx.compose.runtime.collection.MutableVector children>;

        $i0 = virtualinvoke r7.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        i1 = $i0 - 1;

     label1:
        if -1 >= i1 goto label3;

        $r8 = r0.<androidx.compose.ui.input.pointer.NodeParent: androidx.compose.runtime.collection.MutableVector children>;

        $r2 = virtualinvoke $r8.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        $r3 = $r2[i1];

        r9 = (androidx.compose.ui.input.pointer.Node) $r3;

        $r4 = virtualinvoke r9.<androidx.compose.ui.input.pointer.Node: androidx.compose.runtime.collection.MutableVector getPointerIds()>();

        $z1 = virtualinvoke $r4.<androidx.compose.runtime.collection.MutableVector: boolean isEmpty()>();

        if $z1 == 0 goto label2;

        $r5 = r0.<androidx.compose.ui.input.pointer.NodeParent: androidx.compose.runtime.collection.MutableVector children>;

        virtualinvoke $r5.<androidx.compose.runtime.collection.MutableVector: java.lang.Object removeAt(int)>(i1);

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        return;
    }

