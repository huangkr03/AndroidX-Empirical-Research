androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer
<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: java.util.Map transformedFunctions>
<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: java.util.Set transformedFunctionSet>
<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.ir.types.IrType composerType>
    public void lower(org.jetbrains.kotlin.ir.declarations.IrModuleFragment)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer r0;
        org.jetbrains.kotlin.ir.declarations.IrModuleFragment r1;
        androidx.compose.compiler.plugins.kotlin.lower.ComposerTypeRemapper r2, $r11;
        androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata r3, r4, r5, $r17;
        boolean z0, z1;
        org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid $r6, $r22;
        org.jetbrains.kotlin.ir.IrElement $r7, $r8, $r24;
        org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper $r9, $r13, $r19;
        org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid $r10;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r12, $r18;
        org.jetbrains.kotlin.ir.util.SymbolRemapper $r14;
        org.jetbrains.kotlin.ir.util.TypeTranslator $r15, $r21;
        org.jetbrains.kotlin.descriptors.ClassDescriptor $r16;
        org.jetbrains.kotlin.ir.util.TypeRemapper $r20;
        org.jetbrains.kotlin.ir.visitors.IrElementTransformer $r23;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrModuleFragment;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "module");

        $r7 = (org.jetbrains.kotlin.ir.IrElement) r1;

        $r6 = (org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid) r0;

        staticinvoke <org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoidKt: void transformChildrenVoid(org.jetbrains.kotlin.ir.IrElement,org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid)>($r7, $r6);

        $r8 = (org.jetbrains.kotlin.ir.IrElement) r1;

        $r9 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper getSymbolRemapper()>();

        $r10 = (org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid) $r9;

        staticinvoke <org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoidKt: void acceptVoid(org.jetbrains.kotlin.ir.IrElement,org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid)>($r8, $r10);

        $r11 = new androidx.compose.compiler.plugins.kotlin.lower.ComposerTypeRemapper;

        $r12 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        $r13 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper getSymbolRemapper()>();

        $r14 = (org.jetbrains.kotlin.ir.util.SymbolRemapper) $r13;

        $r15 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.ir.util.TypeTranslator getTypeTranslator()>();

        $r16 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.descriptors.ClassDescriptor getComposerTypeDescriptor()>();

        specialinvoke $r11.<androidx.compose.compiler.plugins.kotlin.lower.ComposerTypeRemapper: void <init>(org.jetbrains.kotlin.backend.common.extensions.IrPluginContext,org.jetbrains.kotlin.ir.util.SymbolRemapper,org.jetbrains.kotlin.ir.util.TypeTranslator,org.jetbrains.kotlin.descriptors.ClassDescriptor)>($r12, $r14, $r15, $r16);

        r2 = $r11;

        $r17 = new androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata;

        $r18 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        $r19 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper getSymbolRemapper()>();

        $r20 = (org.jetbrains.kotlin.ir.util.TypeRemapper) r2;

        $r21 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.ir.util.TypeTranslator getTypeTranslator()>();

        specialinvoke $r17.<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: void <init>(org.jetbrains.kotlin.backend.common.extensions.IrPluginContext,org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper,org.jetbrains.kotlin.ir.util.TypeRemapper,org.jetbrains.kotlin.ir.util.TypeTranslator,org.jetbrains.kotlin.ir.util.SymbolRenamer,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r18, $r19, $r20, $r21, null, 16, null);

        r3 = $r17;

        z0 = 0;

        z1 = 0;

        r4 = r3;

        $r22 = (org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid) r4;

        virtualinvoke r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposerTypeRemapper: void setDeepCopy(org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid)>($r22);

        r5 = r3;

        $r23 = (org.jetbrains.kotlin.ir.visitors.IrElementTransformer) r5;

        interfaceinvoke r1.<org.jetbrains.kotlin.ir.declarations.IrModuleFragment: void transformChildren(org.jetbrains.kotlin.ir.visitors.IrElementTransformer,java.lang.Object)>($r23, null);

        $r24 = (org.jetbrains.kotlin.ir.IrElement) r1;

        staticinvoke <org.jetbrains.kotlin.ir.util.PatchDeclarationParentsKt: org.jetbrains.kotlin.ir.IrElement patchDeclarationParents$default(org.jetbrains.kotlin.ir.IrElement,org.jetbrains.kotlin.ir.declarations.IrDeclarationParent,int,java.lang.Object)>($r24, null, 1, null);

        return;
    }

    public org.jetbrains.kotlin.ir.IrStatement visitFunction(org.jetbrains.kotlin.ir.declarations.IrFunction)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer r0;
        org.jetbrains.kotlin.ir.declarations.IrFunction r1, r2;
        org.jetbrains.kotlin.ir.IrStatement r3;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r4, $r5, $r6;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrFunction;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "declaration");

        $r4 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeIrGenerationExtensionKt: void generateSymbols(org.jetbrains.kotlin.backend.common.extensions.IrPluginContext)>($r4);

        r2 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.ir.declarations.IrFunction withComposerParamIfNeeded(org.jetbrains.kotlin.ir.declarations.IrFunction)>(r1);

        $r5 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeIrGenerationExtensionKt: void generateSymbols(org.jetbrains.kotlin.backend.common.extensions.IrPluginContext)>($r5);

        r3 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.IrStatement visitFunction(org.jetbrains.kotlin.ir.declarations.IrFunction)>(r2);

        $r6 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeIrGenerationExtensionKt: void generateSymbols(org.jetbrains.kotlin.backend.common.extensions.IrPluginContext)>($r6);

        return r3;
    }

    public final org.jetbrains.kotlin.ir.expressions.IrCall withComposerParamIfNeeded(org.jetbrains.kotlin.ir.expressions.IrCall, org.jetbrains.kotlin.ir.declarations.IrValueParameter)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer r0;
        org.jetbrains.kotlin.ir.expressions.IrCall $r1, $r48;
        org.jetbrains.kotlin.ir.declarations.IrValueParameter r2, $r80;
        boolean z0, z1, z2, z4, $z6, $z7, $z8, $z9, $z10, z12, $z13, z14, $z17, $z18;
        org.jetbrains.kotlin.ir.declarations.IrFunction r3, $r14, $r16, $r20, $r86, $r88, $r90;
        org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl r4, r5, $r21;
        java.util.List r6, $r24, $r49, $r66, $r78;
        java.util.Iterator r7;
        java.lang.Object r8, $r79;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r9, $r12, $r17, $r27, $r31, $r37, $r43, $r47, $r84;
        org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol $r10, $r13, $r19, $r23, $r85;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r11;
        org.jetbrains.kotlin.ir.declarations.IrSimpleFunction $r15, $r87;
        java.util.Set $r18;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22;
        org.jetbrains.kotlin.ir.types.IrType $r22;
        org.jetbrains.kotlin.ir.expressions.IrStatementOrigin $r25;
        org.jetbrains.kotlin.ir.symbols.IrClassSymbol $r26;
        org.jetbrains.kotlin.ir.declarations.IrAttributeContainer $r28, $r29, $r35;
        androidx.compose.compiler.plugins.kotlin.WeakBindingTrace $r32;
        androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices $r33;
        org.jetbrains.kotlin.util.slicedMap.WritableSlice $r34;
        java.lang.Boolean $r36, $r58, $r77;
        org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression $r38, $r39;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r40, $r41, $r46, $r65, $r76, $r81, r91;
        java.util.ArrayList $r42;
        org.jetbrains.kotlin.ir.expressions.impl.IrGetValueImpl $r44;
        org.jetbrains.kotlin.ir.symbols.IrValueSymbol $r45;
        java.lang.StringBuilder $r50, $r51, $r54, $r67, $r68, $r71;
        org.jetbrains.kotlin.ir.IrElement $r52, $r69;
        java.lang.String $r53, $r56, $r70, $r73, r92, r95;
        java.lang.IllegalStateException $r55, $r72;
        java.lang.Throwable $r57, $r74;
        java.util.Collection $r59, $r60;
        boolean[] $r61, $r63, r93;
        kotlin.ranges.IntRange $r62;
        org.jetbrains.kotlin.ir.expressions.IrConst $r64, $r75;
        java.lang.NullPointerException $r83, $r89;
        java.lang.Iterable r94;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrCall;

        r2 := @parameter1: org.jetbrains.kotlin.ir.declarations.IrValueParameter;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$withComposerParamIfNeeded");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "composerParam");

        $r9 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeIrGenerationExtensionKt: void generateSymbols(org.jetbrains.kotlin.backend.common.extensions.IrPluginContext)>($r9);

        z0 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: boolean isComposableLambdaInvoke(org.jetbrains.kotlin.ir.expressions.IrCall)>($r1);

        $r10 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getSymbol()>();

        $r11 = interfaceinvoke $r10.<org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol: org.jetbrains.kotlin.descriptors.FunctionDescriptor getDescriptor()>();

        $z6 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: boolean isComposableCallable(org.jetbrains.kotlin.descriptors.FunctionDescriptor)>($r11);

        if $z6 != 0 goto label01;

        if z0 != 0 goto label01;

        return $r1;

     label01:
        $r12 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeIrGenerationExtensionKt: void generateSymbols(org.jetbrains.kotlin.backend.common.extensions.IrPluginContext)>($r12);

        if z0 == 0 goto label03;

        $r84 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeIrGenerationExtensionKt: void generateSymbols(org.jetbrains.kotlin.backend.common.extensions.IrPluginContext)>($r84);

        $r85 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getSymbol()>();

        $r86 = interfaceinvoke $r85.<org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol: org.jetbrains.kotlin.ir.declarations.IrFunction getOwner()>();

        if $r86 != null goto label02;

        $r89 = new java.lang.NullPointerException;

        specialinvoke $r89.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type org.jetbrains.kotlin.ir.declarations.IrSimpleFunction");

        throw $r89;

     label02:
        $r87 = (org.jetbrains.kotlin.ir.declarations.IrSimpleFunction) $r86;

        $r88 = (org.jetbrains.kotlin.ir.declarations.IrFunction) $r87;

        $r90 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.ir.declarations.IrFunction lambdaInvokeWithComposerParamIfNeeded(org.jetbrains.kotlin.ir.declarations.IrFunction)>($r88);

        goto label05;

     label03:
        $r13 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getSymbol()>();

        $r14 = interfaceinvoke $r13.<org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol: org.jetbrains.kotlin.ir.declarations.IrFunction getOwner()>();

        if $r14 != null goto label04;

        $r83 = new java.lang.NullPointerException;

        specialinvoke $r83.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type org.jetbrains.kotlin.ir.declarations.IrSimpleFunction");

        throw $r83;

     label04:
        $r15 = (org.jetbrains.kotlin.ir.declarations.IrSimpleFunction) $r14;

        $r16 = (org.jetbrains.kotlin.ir.declarations.IrFunction) $r15;

        $r90 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.ir.declarations.IrFunction withComposerParamIfNeeded(org.jetbrains.kotlin.ir.declarations.IrFunction)>($r16);

     label05:
        r3 = $r90;

        $r17 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeIrGenerationExtensionKt: void generateSymbols(org.jetbrains.kotlin.backend.common.extensions.IrPluginContext)>($r17);

        $r18 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: java.util.Set transformedFunctionSet>;

        $z7 = interfaceinvoke $r18.<java.util.Set: boolean contains(java.lang.Object)>(r3);

        if $z7 != 0 goto label06;

        return $r1;

     label06:
        $r19 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getSymbol()>();

        $r20 = interfaceinvoke $r19.<org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol: org.jetbrains.kotlin.ir.declarations.IrFunction getOwner()>();

        $z8 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r20, r3);

        if $z8 == 0 goto label07;

        return $r1;

     label07:
        $r21 = new org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl;

        $i0 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrCall: int getStartOffset()>();

        $i1 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrCall: int getEndOffset()>();

        $r22 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.types.IrType getType()>();

        $r23 = interfaceinvoke r3.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getSymbol()>();

        $i2 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrCall: int getTypeArgumentsCount()>();

        $r24 = interfaceinvoke r3.<org.jetbrains.kotlin.ir.declarations.IrFunction: java.util.List getValueParameters()>();

        $i3 = interfaceinvoke $r24.<java.util.List: int size()>();

        $r25 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.expressions.IrStatementOrigin getOrigin()>();

        $r26 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.symbols.IrClassSymbol getSuperQualifierSymbol()>();

        specialinvoke $r21.<org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl: void <init>(int,int,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol,int,int,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,org.jetbrains.kotlin.ir.symbols.IrClassSymbol)>($i0, $i1, $r22, $r23, $i2, $i3, $r25, $r26);

        r4 = $r21;

        z1 = 0;

        z2 = 0;

        r5 = r4;

        $r27 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeIrGenerationExtensionKt: void generateSymbols(org.jetbrains.kotlin.backend.common.extensions.IrPluginContext)>($r27);

        $r29 = (org.jetbrains.kotlin.ir.declarations.IrAttributeContainer) r5;

        $r28 = (org.jetbrains.kotlin.ir.declarations.IrAttributeContainer) $r1;

        staticinvoke <org.jetbrains.kotlin.ir.declarations.IrAttributeContainerKt: org.jetbrains.kotlin.ir.declarations.IrAttributeContainer copyAttributes(org.jetbrains.kotlin.ir.declarations.IrAttributeContainer,org.jetbrains.kotlin.ir.declarations.IrAttributeContainer)>($r29, $r28);

        $r31 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        $r32 = staticinvoke <androidx.compose.compiler.plugins.kotlin.WeakBindingTraceKt: androidx.compose.compiler.plugins.kotlin.WeakBindingTrace getIrTrace(org.jetbrains.kotlin.backend.common.extensions.IrPluginContext)>($r31);

        $r33 = <androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices: androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices INSTANCE>;

        $r34 = virtualinvoke $r33.<androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices: org.jetbrains.kotlin.util.slicedMap.WritableSlice getIS_COMPOSABLE_CALL()>();

        $r35 = (org.jetbrains.kotlin.ir.declarations.IrAttributeContainer) r5;

        $r36 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke $r32.<androidx.compose.compiler.plugins.kotlin.WeakBindingTrace: void record(org.jetbrains.kotlin.util.slicedMap.WritableSlice,org.jetbrains.kotlin.ir.declarations.IrAttributeContainer,java.lang.Object)>($r34, $r35, $r36);

        $r37 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeIrGenerationExtensionKt: void generateSymbols(org.jetbrains.kotlin.backend.common.extensions.IrPluginContext)>($r37);

        $r39 = (org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression) r5;

        $r38 = (org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression) $r1;

        staticinvoke <org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpressionKt: void copyTypeArgumentsFrom$default(org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression,org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression,int,int,java.lang.Object)>($r39, $r38, 0, 2, null);

        $r40 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.expressions.IrExpression getDispatchReceiver()>();

        virtualinvoke r5.<org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl: void setDispatchReceiver(org.jetbrains.kotlin.ir.expressions.IrExpression)>($r40);

        $r41 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.expressions.IrExpression getExtensionReceiver()>();

        virtualinvoke r5.<org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl: void setExtensionReceiver(org.jetbrains.kotlin.ir.expressions.IrExpression)>($r41);

        z12 = 0;

        $r42 = new java.util.ArrayList;

        specialinvoke $r42.<java.util.ArrayList: void <init>()>();

        r6 = (java.util.List) $r42;

        $r43 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeIrGenerationExtensionKt: void generateSymbols(org.jetbrains.kotlin.backend.common.extensions.IrPluginContext)>($r43);

        i11 = 0;

        i12 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrCall: int getValueArgumentsCount()>();

     label08:
        if i11 >= i12 goto label13;

        r91 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.expressions.IrExpression getValueArgument(int)>(i11);

        if r91 != null goto label09;

        $z13 = 1;

        goto label10;

     label09:
        $z13 = 0;

     label10:
        $r77 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z13);

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r77);

        if r91 == null goto label11;

        virtualinvoke r5.<org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl: void putValueArgument(int,org.jetbrains.kotlin.ir.expressions.IrExpression)>(i11, r91);

        goto label12;

     label11:
        $r78 = interfaceinvoke r3.<org.jetbrains.kotlin.ir.declarations.IrFunction: java.util.List getValueParameters()>();

        $r79 = interfaceinvoke $r78.<java.util.List: java.lang.Object get(int)>(i11);

        $r80 = (org.jetbrains.kotlin.ir.declarations.IrValueParameter) $r79;

        $r81 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression defaultArgumentFor(org.jetbrains.kotlin.ir.declarations.IrValueParameter)>($r80);

        virtualinvoke r5.<org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl: void putValueArgument(int,org.jetbrains.kotlin.ir.expressions.IrExpression)>(i11, $r81);

     label12:
        i11 = i11 + 1;

        goto label08;

     label13:
        i13 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrCall: int getValueArgumentsCount()>();

        i14 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrCall: int getValueArgumentsCount()>();

        i15 = i14 + 1;

        $r44 = new org.jetbrains.kotlin.ir.expressions.impl.IrGetValueImpl;

        $r45 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.ir.symbols.IrValueSymbol getSymbol()>();

        specialinvoke $r44.<org.jetbrains.kotlin.ir.expressions.impl.IrGetValueImpl: void <init>(int,int,org.jetbrains.kotlin.ir.symbols.IrValueSymbol,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,int,kotlin.jvm.internal.DefaultConstructorMarker)>(-1, -1, $r45, null, 8, null);

        $r46 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r44;

        virtualinvoke r5.<org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl: void putValueArgument(int,org.jetbrains.kotlin.ir.expressions.IrExpression)>(i14, $r46);

        i16 = 0;

        $i4 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformerKt: int getThisParamCount(org.jetbrains.kotlin.ir.declarations.IrFunction)>(r3);

        i17 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformerKt: int changedParamCount(int,int)>(i13, $i4);

     label14:
        if i16 >= i17 goto label17;

        $r66 = interfaceinvoke r3.<org.jetbrains.kotlin.ir.declarations.IrFunction: java.util.List getValueParameters()>();

        $i9 = interfaceinvoke $r66.<java.util.List: int size()>();

        if i15 >= $i9 goto label15;

        $i10 = i15;

        i15 = i15 + 1;

        $r75 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.ir.expressions.IrConst irConst(int)>(0);

        $r76 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r75;

        virtualinvoke r5.<org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl: void putValueArgument(int,org.jetbrains.kotlin.ir.expressions.IrExpression)>($i10, $r76);

        goto label16;

     label15:
        $r67 = new java.lang.StringBuilder;

        specialinvoke $r67.<java.lang.StringBuilder: void <init>()>();

        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("1. expected value parameter count to be higher: ");

        $r69 = (org.jetbrains.kotlin.ir.IrElement) $r1;

        $r70 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.IrSourcePrinterKt: java.lang.String dumpSrc(org.jetbrains.kotlin.ir.IrElement)>($r69);

        $r71 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r70);

        r92 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.String toString()>();

        z14 = 0;

        $r72 = new java.lang.IllegalStateException;

        $r73 = virtualinvoke r92.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r72.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r73);

        $r74 = (java.lang.Throwable) $r72;

        throw $r74;

     label16:
        i16 = i16 + 1;

        goto label14;

     label17:
        i18 = 0;

        i19 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformerKt: int defaultParamCount(int)>(i13);

     label18:
        if i18 >= i19 goto label25;

        i20 = i18 * 31;

        i21 = i20 + 31;

        i22 = staticinvoke <java.lang.Math: int min(int,int)>(i21, i13);

        $r49 = interfaceinvoke r3.<org.jetbrains.kotlin.ir.declarations.IrFunction: java.util.List getValueParameters()>();

        $i5 = interfaceinvoke $r49.<java.util.List: int size()>();

        if i15 >= $i5 goto label19;

        $r60 = (java.util.Collection) r6;

        $r61 = staticinvoke <kotlin.collections.CollectionsKt: boolean[] toBooleanArray(java.util.Collection)>($r60);

        $r62 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntRange until(int,int)>(i20, i22);

        r93 = staticinvoke <kotlin.collections.ArraysKt: boolean[] sliceArray(boolean[],kotlin.ranges.IntRange)>($r61, $r62);

        $i6 = i15;

        i15 = i15 + 1;

        $i7 = lengthof r93;

        $r63 = staticinvoke <java.util.Arrays: boolean[] copyOf(boolean[],int)>(r93, $i7);

        $i8 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: int bitMask(boolean[])>($r63);

        $r64 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.ir.expressions.IrConst irConst(int)>($i8);

        $r65 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r64;

        virtualinvoke r5.<org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl: void putValueArgument(int,org.jetbrains.kotlin.ir.expressions.IrExpression)>($i6, $r65);

        goto label24;

     label19:
        r94 = (java.lang.Iterable) r6;

        $z9 = r94 instanceof java.util.Collection;

        if $z9 == 0 goto label20;

        $r59 = (java.util.Collection) r94;

        $z10 = interfaceinvoke $r59.<java.util.Collection: boolean isEmpty()>();

        if $z10 == 0 goto label20;

        $z17 = 0;

        goto label23;

     label20:
        r7 = interfaceinvoke r94.<java.lang.Iterable: java.util.Iterator iterator()>();

     label21:
        $z18 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z18 == 0 goto label22;

        r8 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        $r58 = (java.lang.Boolean) r8;

        z4 = virtualinvoke $r58.<java.lang.Boolean: boolean booleanValue()>();

        if z4 == 0 goto label21;

        $z17 = 1;

        goto label23;

     label22:
        $z17 = 0;

     label23:
        if $z17 == 0 goto label24;

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("2. expected value parameter count to be higher: ");

        $r52 = (org.jetbrains.kotlin.ir.IrElement) $r1;

        $r53 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.IrSourcePrinterKt: java.lang.String dumpSrc(org.jetbrains.kotlin.ir.IrElement)>($r52);

        $r54 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r53);

        r95 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        $r55 = new java.lang.IllegalStateException;

        $r56 = virtualinvoke r95.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r55.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r56);

        $r57 = (java.lang.Throwable) $r55;

        throw $r57;

     label24:
        i18 = i18 + 1;

        goto label18;

     label25:
        $r47 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeIrGenerationExtensionKt: void generateSymbols(org.jetbrains.kotlin.backend.common.extensions.IrPluginContext)>($r47);

        $r48 = (org.jetbrains.kotlin.ir.expressions.IrCall) r4;

        return $r48;
    }

    private final org.jetbrains.kotlin.ir.expressions.IrExpression defaultArgumentFor(org.jetbrains.kotlin.ir.declarations.IrValueParameter)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer r0;
        org.jetbrains.kotlin.ir.declarations.IrValueParameter r1;
        org.jetbrains.kotlin.ir.types.IrType $r2, $r3;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r4;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrValueParameter;

        $r2 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.ir.types.IrType getVarargElementType()>();

        if $r2 == null goto label1;

        return null;

     label1:
        $r3 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.ir.types.IrType getType()>();

        $r4 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression defaultValue$default(androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer,org.jetbrains.kotlin.ir.types.IrType,int,int,int,java.lang.Object)>(r0, $r3, 0, 0, 3, null);

        return $r4;
    }

    private final org.jetbrains.kotlin.ir.expressions.IrExpression defaultValue(org.jetbrains.kotlin.ir.types.IrType, int, int)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer r0;
        org.jetbrains.kotlin.ir.types.IrType $r1, r5;
        int i0, i1;
        org.jetbrains.kotlin.ir.symbols.IrClassSymbol r2, $r8, $r21;
        org.jetbrains.kotlin.ir.declarations.IrClass r3, $r11;
        org.jetbrains.kotlin.ir.symbols.IrConstructorSymbol r4;
        org.jetbrains.kotlin.ir.expressions.impl.IrConstructorCallImpl r6, r7, $r16;
        boolean z0, z1, $z3, $z4, $z5;
        org.jetbrains.kotlin.ir.types.IrSimpleType $r9;
        org.jetbrains.kotlin.ir.declarations.IrSymbolOwner $r10, $r12;
        kotlin.sequences.Sequence $r13;
        java.lang.Object $r14;
        org.jetbrains.kotlin.backend.jvm.lower.inlineclasses.InlineClassAbi $r15;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r17, $r18, $r24;
        org.jetbrains.kotlin.ir.symbols.IrSymbol $r19, $r20;
        org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl$Companion $r22;
        org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl $r23;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.types.IrType;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r8 = staticinvoke <org.jetbrains.kotlin.ir.types.IrTypesKt: org.jetbrains.kotlin.ir.symbols.IrClassSymbol getClassOrNull(org.jetbrains.kotlin.ir.types.IrType)>($r1);

        if $r8 == null goto label1;

        $r19 = (org.jetbrains.kotlin.ir.symbols.IrSymbol) $r8;

        $r20 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.ir.symbols.IrSymbol bindIfNecessary(org.jetbrains.kotlin.ir.symbols.IrSymbol)>($r19);

        $r21 = (org.jetbrains.kotlin.ir.symbols.IrClassSymbol) $r20;

        goto label2;

     label1:
        $r21 = null;

     label2:
        r2 = $r21;

        $z3 = $r1 instanceof org.jetbrains.kotlin.ir.types.IrSimpleType;

        if $z3 == 0 goto label3;

        $r9 = (org.jetbrains.kotlin.ir.types.IrSimpleType) $r1;

        $z4 = interfaceinvoke $r9.<org.jetbrains.kotlin.ir.types.IrSimpleType: boolean getHasQuestionMark()>();

        if $z4 != 0 goto label3;

        if r2 == null goto label3;

        $r10 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.symbols.IrClassSymbol: org.jetbrains.kotlin.ir.declarations.IrSymbolOwner getOwner()>();

        $r11 = (org.jetbrains.kotlin.ir.declarations.IrClass) $r10;

        if $r11 == null goto label3;

        $z5 = interfaceinvoke $r11.<org.jetbrains.kotlin.ir.declarations.IrClass: boolean isInline()>();

        if $z5 == 1 goto label4;

        goto label3;

     label3:
        $r22 = <org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl: org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl$Companion Companion>;

        $r23 = virtualinvoke $r22.<org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl$Companion: org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl defaultValueForType(int,int,org.jetbrains.kotlin.ir.types.IrType)>(i0, i1, $r1);

        $r24 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r23;

        return $r24;

     label4:
        $r12 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.symbols.IrClassSymbol: org.jetbrains.kotlin.ir.declarations.IrSymbolOwner getOwner()>();

        r3 = (org.jetbrains.kotlin.ir.declarations.IrClass) $r12;

        $r13 = staticinvoke <org.jetbrains.kotlin.ir.util.IrUtilsKt: kotlin.sequences.Sequence getConstructors(org.jetbrains.kotlin.ir.symbols.IrClassSymbol)>(r2);

        $r14 = staticinvoke <kotlin.sequences.SequencesKt: java.lang.Object first(kotlin.sequences.Sequence)>($r13);

        r4 = (org.jetbrains.kotlin.ir.symbols.IrConstructorSymbol) $r14;

        $r15 = <org.jetbrains.kotlin.backend.jvm.lower.inlineclasses.InlineClassAbi: org.jetbrains.kotlin.backend.jvm.lower.inlineclasses.InlineClassAbi INSTANCE>;

        r5 = virtualinvoke $r15.<org.jetbrains.kotlin.backend.jvm.lower.inlineclasses.InlineClassAbi: org.jetbrains.kotlin.ir.types.IrType getUnderlyingType(org.jetbrains.kotlin.ir.declarations.IrClass)>(r3);

        $r16 = new org.jetbrains.kotlin.ir.expressions.impl.IrConstructorCallImpl;

        specialinvoke $r16.<org.jetbrains.kotlin.ir.expressions.impl.IrConstructorCallImpl: void <init>(int,int,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.symbols.IrConstructorSymbol,int,int,int,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin)>(i0, i1, $r1, r4, 0, 0, 1, null);

        r6 = $r16;

        z0 = 0;

        z1 = 0;

        r7 = r6;

        $r17 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression defaultValue(org.jetbrains.kotlin.ir.types.IrType,int,int)>(r5, i0, i1);

        virtualinvoke r7.<org.jetbrains.kotlin.ir.expressions.impl.IrConstructorCallImpl: void putValueArgument(int,org.jetbrains.kotlin.ir.expressions.IrExpression)>(0, $r17);

        $r18 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r6;

        return $r18;
    }

    static org.jetbrains.kotlin.ir.expressions.IrExpression defaultValue$default(androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer, org.jetbrains.kotlin.ir.types.IrType, int, int, int, java.lang.Object)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer r0;
        org.jetbrains.kotlin.ir.types.IrType r1;
        int i0, $i1, $i2, i3, i4;
        java.lang.Object r2;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r3;

        r0 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer;

        r1 := @parameter1: org.jetbrains.kotlin.ir.types.IrType;

        i3 := @parameter2: int;

        i4 := @parameter3: int;

        i0 := @parameter4: int;

        r2 := @parameter5: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        i3 = -1;

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        i4 = -1;

     label2:
        $r3 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression defaultValue(org.jetbrains.kotlin.ir.types.IrType,int,int)>(r1, i3, i4);

        return $r3;
    }

    private final org.jetbrains.kotlin.ir.declarations.IrFunction withComposerParamIfNeeded(org.jetbrains.kotlin.ir.declarations.IrFunction)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer r0;
        org.jetbrains.kotlin.ir.declarations.IrFunction $r1, $r9;
        java.util.Set $r2;
        boolean $z0, $z1, $z2, $z3;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r3;
        org.jetbrains.kotlin.descriptors.CallableDescriptor $r4;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r5;
        org.jetbrains.kotlin.resolve.BindingContext $r6;
        java.util.Map $r7;
        java.lang.Object $r8;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrFunction;

        $r2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: java.util.Set transformedFunctionSet>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return $r1;

     label1:
        $r3 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.descriptors.FunctionDescriptor getDescriptor()>();

        $r4 = (org.jetbrains.kotlin.descriptors.CallableDescriptor) $r3;

        $r5 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        $r6 = interfaceinvoke $r5.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.resolve.BindingContext getBindingContext()>();

        $z1 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposableCallCheckerKt: boolean isComposableCallable(org.jetbrains.kotlin.descriptors.CallableDescriptor,org.jetbrains.kotlin.resolve.BindingContext)>($r4, $r6);

        if $z1 != 0 goto label2;

        return $r1;

     label2:
        $z2 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: boolean isNonComposableInlinedLambda(org.jetbrains.kotlin.ir.declarations.IrFunction)>($r1);

        if $z2 == 0 goto label3;

        return $r1;

     label3:
        $z3 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: boolean isExpect()>();

        if $z3 == 0 goto label4;

        return $r1;

     label4:
        $r7 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: java.util.Map transformedFunctions>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r9 = (org.jetbrains.kotlin.ir.declarations.IrFunction) $r8;

        if $r9 == null goto label5;

        goto label6;

     label5:
        $r9 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.ir.declarations.IrFunction copyWithComposerParam(org.jetbrains.kotlin.ir.declarations.IrFunction)>($r1);

     label6:
        return $r9;
    }

    private final org.jetbrains.kotlin.ir.declarations.IrFunction lambdaInvokeWithComposerParamIfNeeded(org.jetbrains.kotlin.ir.declarations.IrFunction)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer r0;
        org.jetbrains.kotlin.ir.declarations.IrFunction $r1, r4, r5, r6, $r8;
        java.util.Map $r2;
        java.lang.Object r3;
        boolean z2, z3, $z5;
        java.util.Set $r7, $r9;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrFunction;

        $r7 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: java.util.Set transformedFunctionSet>;

        $z5 = interfaceinvoke $r7.<java.util.Set: boolean contains(java.lang.Object)>($r1);

        if $z5 == 0 goto label1;

        return $r1;

     label1:
        $r2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: java.util.Map transformedFunctions>;

        r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        if r3 != null goto label2;

        r4 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.ir.declarations.IrFunction lambdaInvokeWithComposerParam(org.jetbrains.kotlin.ir.declarations.IrFunction)>($r1);

        z2 = 0;

        z3 = 0;

        r5 = r4;

        $r9 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: java.util.Set transformedFunctionSet>;

        interfaceinvoke $r9.<java.util.Set: boolean add(java.lang.Object)>(r5);

        r6 = r4;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, r6);

        return r6;

     label2:
        $r8 = (org.jetbrains.kotlin.ir.declarations.IrFunction) r3;

        return $r8;
    }

    private final org.jetbrains.kotlin.ir.declarations.IrFunction lambdaInvokeWithComposerParam(org.jetbrains.kotlin.ir.declarations.IrFunction)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer r0;
        org.jetbrains.kotlin.ir.declarations.IrFunction $r1, $r39, $r42, $r48, $r51;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor r2, $r25;
        int i0, i1, $i2, $i3, $i4;
        org.jetbrains.kotlin.ir.symbols.IrClassSymbol r3;
        org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor r4;
        org.jetbrains.kotlin.descriptors.ValueParameterDescriptor r5;
        java.util.List $r6, $r36;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r7, $r9, $r27, $r34, $r38, $r53;
        org.jetbrains.kotlin.ir.util.ReferenceSymbolTable $r8;
        org.jetbrains.kotlin.builtins.KotlinBuiltIns $r10;
        org.jetbrains.kotlin.descriptors.ClassDescriptor $r11, $r13;
        org.jetbrains.kotlin.descriptors.ClassifierDescriptor $r12;
        org.jetbrains.kotlin.resolve.scopes.MemberScope $r14;
        org.jetbrains.kotlin.name.Name $r15, $r17, $r43;
        java.lang.String $r16, $r44, r59, r70;
        org.jetbrains.kotlin.incremental.components.NoLookupLocation $r18;
        org.jetbrains.kotlin.incremental.components.LookupLocation $r19;
        java.util.Collection $r20;
        boolean $z1, $z2, $z3, z7, z10, $z11, $z12, z13, z14;
        java.util.NoSuchElementException $r21;
        java.lang.Throwable $r22, $r41;
        org.jetbrains.kotlin.ir.declarations.impl.IrFunctionImpl $r23;
        org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin $r24;
        org.jetbrains.kotlin.ir.types.IrType $r26, $r46;
        org.jetbrains.kotlin.ir.declarations.IrSymbolOwner $r28;
        org.jetbrains.kotlin.ir.declarations.IrDeclarationParent $r29;
        org.jetbrains.kotlin.ir.declarations.IrTypeParametersContainer $r30, $r31;
        org.jetbrains.kotlin.ir.declarations.IrValueParameter $r33, $r35, $r66, $r67;
        org.jetbrains.kotlin.ir.expressions.IrBody $r37;
        java.lang.AssertionError $r40;
        org.jetbrains.kotlin.types.KotlinType $r45;
        java.lang.Iterable $r50, $r60;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContextImpl $r54;
        org.jetbrains.kotlin.ir.linkage.IrDeserializer $r55;
        org.jetbrains.kotlin.ir.symbols.IrSymbol $r56;
        java.lang.NullPointerException $r58;
        java.util.Iterator $r61, r68;
        java.lang.Object r62, $r69;
        org.jetbrains.kotlin.descriptors.CallableMemberDescriptor r63;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrFunction;

        r2 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.descriptors.FunctionDescriptor getDescriptor()>();

        $r6 = interfaceinvoke r2.<org.jetbrains.kotlin.descriptors.FunctionDescriptor: java.util.List getValueParameters()>();

        i0 = interfaceinvoke $r6.<java.util.List: int size()>();

        i1 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformerKt: int composeSyntheticParamCount$default(int,int,boolean,int,java.lang.Object)>(i0, 0, 0, 2, null);

        $r7 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        $r8 = interfaceinvoke $r7.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.ir.util.ReferenceSymbolTable getSymbolTable()>();

        $r9 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        $r10 = interfaceinvoke $r9.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.builtins.KotlinBuiltIns getBuiltIns()>();

        $i2 = i0 + i1;

        $r11 = virtualinvoke $r10.<org.jetbrains.kotlin.builtins.KotlinBuiltIns: org.jetbrains.kotlin.descriptors.ClassDescriptor getFunction(int)>($i2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r11, "context.builtIns.getFunc\u2026n(argCount + extraParams)");

        r3 = interfaceinvoke $r8.<org.jetbrains.kotlin.ir.util.ReferenceSymbolTable: org.jetbrains.kotlin.ir.symbols.IrClassSymbol referenceClass(org.jetbrains.kotlin.descriptors.ClassDescriptor)>($r11);

        $r12 = interfaceinvoke r3.<org.jetbrains.kotlin.ir.symbols.IrClassSymbol: org.jetbrains.kotlin.descriptors.ClassifierDescriptor getDescriptor()>();

        $r13 = (org.jetbrains.kotlin.descriptors.ClassDescriptor) $r12;

        $r14 = interfaceinvoke $r13.<org.jetbrains.kotlin.descriptors.ClassDescriptor: org.jetbrains.kotlin.resolve.scopes.MemberScope getUnsubstitutedMemberScope()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r14, "newFnClass.descriptor.unsubstitutedMemberScope");

        $r15 = <org.jetbrains.kotlin.util.OperatorNameConventions: org.jetbrains.kotlin.name.Name INVOKE>;

        $r16 = virtualinvoke $r15.<org.jetbrains.kotlin.name.Name: java.lang.String getIdentifier()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r16, "OperatorNameConventions.INVOKE.identifier");

        r59 = $r16;

        $r17 = staticinvoke <org.jetbrains.kotlin.name.Name: org.jetbrains.kotlin.name.Name identifier(java.lang.String)>(r59);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r17, "Name.identifier(name)");

        $r18 = <org.jetbrains.kotlin.incremental.components.NoLookupLocation: org.jetbrains.kotlin.incremental.components.NoLookupLocation FROM_BACKEND>;

        $r19 = (org.jetbrains.kotlin.incremental.components.LookupLocation) $r18;

        $r20 = interfaceinvoke $r14.<org.jetbrains.kotlin.resolve.scopes.MemberScope: java.util.Collection getContributedFunctions(org.jetbrains.kotlin.name.Name,org.jetbrains.kotlin.incremental.components.LookupLocation)>($r17, $r19);

        $r60 = (java.lang.Iterable) $r20;

        $r61 = interfaceinvoke $r60.<java.lang.Iterable: java.util.Iterator iterator()>();

     label01:
        $z1 = interfaceinvoke $r61.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label02;

        r62 = interfaceinvoke $r61.<java.util.Iterator: java.lang.Object next()>();

        r63 = (org.jetbrains.kotlin.descriptors.CallableMemberDescriptor) r62;

        if 1 == 0 goto label01;

        goto label03;

     label02:
        $r21 = new java.util.NoSuchElementException;

        specialinvoke $r21.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Collection contains no element matching the predicate.");

        $r22 = (java.lang.Throwable) $r21;

        throw $r22;

     label03:
        r4 = (org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor) r62;

        $r23 = new org.jetbrains.kotlin.ir.declarations.impl.IrFunctionImpl;

        $i3 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: int getStartOffset()>();

        $i4 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: int getEndOffset()>();

        $r24 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin getOrigin()>();

        $r25 = (org.jetbrains.kotlin.descriptors.FunctionDescriptor) r4;

        $r26 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.types.IrType getReturnType()>();

        specialinvoke $r23.<org.jetbrains.kotlin.ir.declarations.impl.IrFunctionImpl: void <init>(int,int,org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin,org.jetbrains.kotlin.descriptors.FunctionDescriptor,org.jetbrains.kotlin.ir.types.IrType)>($i3, $i4, $r24, $r25, $r26);

        z7 = 0;

        $r27 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeIrGenerationExtensionKt: void generateSymbols(org.jetbrains.kotlin.backend.common.extensions.IrPluginContext)>($r27);

        $z2 = interfaceinvoke r3.<org.jetbrains.kotlin.ir.symbols.IrClassSymbol: boolean isBound()>();

        if $z2 != 0 goto label05;

        $r53 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        if $r53 != null goto label04;

        $r58 = new java.lang.NullPointerException;

        specialinvoke $r58.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type org.jetbrains.kotlin.backend.common.extensions.IrPluginContextImpl");

        throw $r58;

     label04:
        $r54 = (org.jetbrains.kotlin.backend.common.extensions.IrPluginContextImpl) $r53;

        $r55 = virtualinvoke $r54.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContextImpl: org.jetbrains.kotlin.ir.linkage.IrDeserializer getLinker()>();

        $r56 = (org.jetbrains.kotlin.ir.symbols.IrSymbol) r3;

        interfaceinvoke $r55.<org.jetbrains.kotlin.ir.linkage.IrDeserializer: org.jetbrains.kotlin.ir.declarations.IrDeclaration getDeclaration(org.jetbrains.kotlin.ir.symbols.IrSymbol)>($r56);

     label05:
        $r28 = interfaceinvoke r3.<org.jetbrains.kotlin.ir.symbols.IrClassSymbol: org.jetbrains.kotlin.ir.declarations.IrSymbolOwner getOwner()>();

        $r29 = (org.jetbrains.kotlin.ir.declarations.IrDeclarationParent) $r28;

        virtualinvoke $r23.<org.jetbrains.kotlin.ir.declarations.impl.IrFunctionImpl: void setParent(org.jetbrains.kotlin.ir.declarations.IrDeclarationParent)>($r29);

        $r31 = (org.jetbrains.kotlin.ir.declarations.IrTypeParametersContainer) $r23;

        $r30 = (org.jetbrains.kotlin.ir.declarations.IrTypeParametersContainer) $r1;

        staticinvoke <org.jetbrains.kotlin.backend.common.ir.IrUtilsKt: java.util.List copyTypeParametersFrom$default(org.jetbrains.kotlin.ir.declarations.IrTypeParametersContainer,org.jetbrains.kotlin.ir.declarations.IrTypeParametersContainer,org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin,java.util.Map,int,java.lang.Object)>($r31, $r30, null, null, 6, null);

        $r33 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.declarations.IrValueParameter getDispatchReceiverParameter()>();

        if $r33 == null goto label06;

        $r51 = (org.jetbrains.kotlin.ir.declarations.IrFunction) $r23;

        $r66 = staticinvoke <org.jetbrains.kotlin.backend.common.ir.IrUtilsKt: org.jetbrains.kotlin.ir.declarations.IrValueParameter copyTo$default(org.jetbrains.kotlin.ir.declarations.IrValueParameter,org.jetbrains.kotlin.ir.declarations.IrFunction,org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin,int,int,int,org.jetbrains.kotlin.name.Name,java.util.Map,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrExpressionBody,boolean,boolean,int,java.lang.Object)>($r33, $r51, null, 0, 0, 0, null, null, null, null, null, 0, 0, 4094, null);

        goto label07;

     label06:
        $r66 = null;

     label07:
        virtualinvoke $r23.<org.jetbrains.kotlin.ir.declarations.impl.IrFunctionImpl: void setDispatchReceiverParameter(org.jetbrains.kotlin.ir.declarations.IrValueParameter)>($r66);

        $r34 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeIrGenerationExtensionKt: void generateSymbols(org.jetbrains.kotlin.backend.common.extensions.IrPluginContext)>($r34);

        $r35 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.declarations.IrValueParameter getExtensionReceiverParameter()>();

        if $r35 == null goto label08;

        $r48 = (org.jetbrains.kotlin.ir.declarations.IrFunction) $r23;

        $r67 = staticinvoke <org.jetbrains.kotlin.backend.common.ir.IrUtilsKt: org.jetbrains.kotlin.ir.declarations.IrValueParameter copyTo$default(org.jetbrains.kotlin.ir.declarations.IrValueParameter,org.jetbrains.kotlin.ir.declarations.IrFunction,org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin,int,int,int,org.jetbrains.kotlin.name.Name,java.util.Map,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrExpressionBody,boolean,boolean,int,java.lang.Object)>($r35, $r48, null, 0, 0, 0, null, null, null, null, null, 0, 0, 4094, null);

        goto label09;

     label08:
        $r67 = null;

     label09:
        virtualinvoke $r23.<org.jetbrains.kotlin.ir.declarations.impl.IrFunctionImpl: void setExtensionReceiverParameter(org.jetbrains.kotlin.ir.declarations.IrValueParameter)>($r67);

        $r36 = interfaceinvoke r4.<org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor: java.util.List getValueParameters()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r36, "newDescriptor.valueParameters");

        z10 = 0;

        $r50 = (java.lang.Iterable) $r36;

        r68 = interfaceinvoke $r50.<java.lang.Iterable: java.util.Iterator iterator()>();

     label10:
        $z11 = interfaceinvoke r68.<java.util.Iterator: boolean hasNext()>();

        if $z11 == 0 goto label11;

        $r69 = interfaceinvoke r68.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.jetbrains.kotlin.descriptors.ValueParameterDescriptor) $r69;

        $r42 = (org.jetbrains.kotlin.ir.declarations.IrFunction) $r23;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r5, "p");

        $r43 = interfaceinvoke r5.<org.jetbrains.kotlin.descriptors.ValueParameterDescriptor: org.jetbrains.kotlin.name.Name getName()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r43, "p.name");

        $r44 = virtualinvoke $r43.<org.jetbrains.kotlin.name.Name: java.lang.String getIdentifier()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r44, "p.name.identifier");

        $r45 = interfaceinvoke r5.<org.jetbrains.kotlin.descriptors.ValueParameterDescriptor: org.jetbrains.kotlin.types.KotlinType getType()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r45, "p.type");

        $r46 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.ir.types.IrType toIrType(org.jetbrains.kotlin.types.KotlinType)>($r45);

        staticinvoke <org.jetbrains.kotlin.ir.builders.declarations.DeclarationBuildersKt: org.jetbrains.kotlin.ir.declarations.IrValueParameter addValueParameter$default(org.jetbrains.kotlin.ir.declarations.IrFunction,java.lang.String,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin,int,java.lang.Object)>($r42, $r44, $r46, null, 4, null);

        goto label10;

     label11:
        $r37 = virtualinvoke $r23.<org.jetbrains.kotlin.ir.declarations.impl.IrFunctionImpl: org.jetbrains.kotlin.ir.expressions.IrBody getBody()>();

        if $r37 != null goto label12;

        $z12 = 1;

        goto label13;

     label12:
        $z12 = 0;

     label13:
        z13 = 0;

        $z3 = <kotlin._Assertions: boolean ENABLED>;

        if $z3 == 0 goto label14;

        if $z12 != 0 goto label14;

        z14 = 0;

        r70 = "expected body to be null";

        $r40 = new java.lang.AssertionError;

        specialinvoke $r40.<java.lang.AssertionError: void <init>(java.lang.Object)>(r70);

        $r41 = (java.lang.Throwable) $r40;

        throw $r41;

     label14:
        $r38 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeIrGenerationExtensionKt: void generateSymbols(org.jetbrains.kotlin.backend.common.extensions.IrPluginContext)>($r38);

        $r39 = (org.jetbrains.kotlin.ir.declarations.IrFunction) $r23;

        return $r39;
    }

    private final org.jetbrains.kotlin.ir.descriptors.WrappedSimpleFunctionDescriptor wrapDescriptor(org.jetbrains.kotlin.descriptors.FunctionDescriptor)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer r0;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor r1, r2;
        boolean $z0, $z1, $z2;
        org.jetbrains.kotlin.descriptors.SourceElement $r3, $r10, $r14;
        org.jetbrains.kotlin.ir.descriptors.WrappedFunctionDescriptorWithContainerSource $r4;
        org.jetbrains.kotlin.serialization.deserialization.descriptors.DescriptorWithContainerSource $r5;
        org.jetbrains.kotlin.serialization.deserialization.descriptors.DeserializedContainerSource $r6;
        org.jetbrains.kotlin.ir.descriptors.WrappedPropertySetterDescriptor $r7;
        org.jetbrains.kotlin.descriptors.annotations.Annotations $r8, $r12;
        org.jetbrains.kotlin.descriptors.PropertySetterDescriptor $r9;
        org.jetbrains.kotlin.ir.descriptors.WrappedPropertyGetterDescriptor $r11;
        org.jetbrains.kotlin.descriptors.PropertyGetterDescriptor $r13;
        org.jetbrains.kotlin.ir.descriptors.WrappedSimpleFunctionDescriptor $r15;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.descriptors.FunctionDescriptor;

        r2 = r1;

        $z0 = r2 instanceof org.jetbrains.kotlin.descriptors.PropertyGetterDescriptor;

        if $z0 == 0 goto label1;

        $r11 = new org.jetbrains.kotlin.ir.descriptors.WrappedPropertyGetterDescriptor;

        $r12 = interfaceinvoke r1.<org.jetbrains.kotlin.descriptors.FunctionDescriptor: org.jetbrains.kotlin.descriptors.annotations.Annotations getAnnotations()>();

        $r13 = (org.jetbrains.kotlin.descriptors.PropertyGetterDescriptor) r1;

        $r14 = interfaceinvoke $r13.<org.jetbrains.kotlin.descriptors.PropertyGetterDescriptor: org.jetbrains.kotlin.descriptors.SourceElement getSource()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r14, "descriptor.source");

        specialinvoke $r11.<org.jetbrains.kotlin.ir.descriptors.WrappedPropertyGetterDescriptor: void <init>(org.jetbrains.kotlin.descriptors.annotations.Annotations,org.jetbrains.kotlin.descriptors.SourceElement)>($r12, $r14);

        $r15 = (org.jetbrains.kotlin.ir.descriptors.WrappedSimpleFunctionDescriptor) $r11;

        goto label4;

     label1:
        $z1 = r2 instanceof org.jetbrains.kotlin.descriptors.PropertySetterDescriptor;

        if $z1 == 0 goto label2;

        $r7 = new org.jetbrains.kotlin.ir.descriptors.WrappedPropertySetterDescriptor;

        $r8 = interfaceinvoke r1.<org.jetbrains.kotlin.descriptors.FunctionDescriptor: org.jetbrains.kotlin.descriptors.annotations.Annotations getAnnotations()>();

        $r9 = (org.jetbrains.kotlin.descriptors.PropertySetterDescriptor) r1;

        $r10 = interfaceinvoke $r9.<org.jetbrains.kotlin.descriptors.PropertySetterDescriptor: org.jetbrains.kotlin.descriptors.SourceElement getSource()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r10, "descriptor.source");

        specialinvoke $r7.<org.jetbrains.kotlin.ir.descriptors.WrappedPropertySetterDescriptor: void <init>(org.jetbrains.kotlin.descriptors.annotations.Annotations,org.jetbrains.kotlin.descriptors.SourceElement)>($r8, $r10);

        $r15 = (org.jetbrains.kotlin.ir.descriptors.WrappedSimpleFunctionDescriptor) $r7;

        goto label4;

     label2:
        $z2 = r2 instanceof org.jetbrains.kotlin.serialization.deserialization.descriptors.DescriptorWithContainerSource;

        if $z2 == 0 goto label3;

        $r4 = new org.jetbrains.kotlin.ir.descriptors.WrappedFunctionDescriptorWithContainerSource;

        $r5 = (org.jetbrains.kotlin.serialization.deserialization.descriptors.DescriptorWithContainerSource) r1;

        $r6 = interfaceinvoke $r5.<org.jetbrains.kotlin.serialization.deserialization.descriptors.DescriptorWithContainerSource: org.jetbrains.kotlin.serialization.deserialization.descriptors.DeserializedContainerSource getContainerSource()>();

        specialinvoke $r4.<org.jetbrains.kotlin.ir.descriptors.WrappedFunctionDescriptorWithContainerSource: void <init>(org.jetbrains.kotlin.serialization.deserialization.descriptors.DeserializedContainerSource)>($r6);

        $r15 = (org.jetbrains.kotlin.ir.descriptors.WrappedSimpleFunctionDescriptor) $r4;

        goto label4;

     label3:
        $r15 = new org.jetbrains.kotlin.ir.descriptors.WrappedSimpleFunctionDescriptor;

        $r3 = interfaceinvoke r1.<org.jetbrains.kotlin.descriptors.FunctionDescriptor: org.jetbrains.kotlin.descriptors.SourceElement getSource()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "descriptor.source");

        specialinvoke $r15.<org.jetbrains.kotlin.ir.descriptors.WrappedSimpleFunctionDescriptor: void <init>(org.jetbrains.kotlin.descriptors.annotations.Annotations,org.jetbrains.kotlin.descriptors.SourceElement,int,kotlin.jvm.internal.DefaultConstructorMarker)>(null, $r3, 1, null);

     label4:
        return $r15;
    }

    private final org.jetbrains.kotlin.ir.declarations.IrSimpleFunction copy(org.jetbrains.kotlin.ir.declarations.IrFunction, boolean, org.jetbrains.kotlin.descriptors.Modality)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer r0;
        org.jetbrains.kotlin.ir.declarations.IrFunction $r1, $r42, $r45, $r47;
        boolean z0, z1, z2, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z16, z21;
        org.jetbrains.kotlin.descriptors.Modality r2;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor r3, $r10;
        org.jetbrains.kotlin.ir.descriptors.WrappedSimpleFunctionDescriptor r4;
        org.jetbrains.kotlin.ir.declarations.impl.IrFunctionImpl r5, r6, $r7, r54, r63, $r71, r79;
        int $i0, $i1, $i2, $i3;
        org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin $r8;
        org.jetbrains.kotlin.ir.symbols.impl.IrSimpleFunctionSymbolImpl $r9;
        org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol $r11;
        org.jetbrains.kotlin.name.Name $r12, $r43, $r44;
        org.jetbrains.kotlin.descriptors.Visibility $r13;
        org.jetbrains.kotlin.ir.types.IrType $r14;
        org.jetbrains.kotlin.ir.declarations.IrDeclaration $r15, $r16;
        org.jetbrains.kotlin.ir.declarations.IrDeclarationParent $r17, $r73;
        org.jetbrains.kotlin.ir.declarations.IrTypeParametersContainer $r18, $r19;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r21;
        org.jetbrains.kotlin.ir.declarations.IrValueParameter $r22, $r23, $r51, $r52, r58, r60;
        java.util.List $r24, $r26, r61, r70;
        java.util.ArrayList $r25, $r27;
        org.jetbrains.kotlin.ir.declarations.MetadataSource $r28;
        org.jetbrains.kotlin.ir.expressions.IrBody $r29, $r39, $r81;
        org.jetbrains.kotlin.ir.declarations.IrSimpleFunction $r30, $r49;
        org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper $r31;
        org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid $r32;
        org.jetbrains.kotlin.ir.util.DeepCopyTypeRemapper $r33, r75;
        org.jetbrains.kotlin.ir.util.SymbolRemapper $r34, r77;
        org.jetbrains.kotlin.ir.util.DeepCopyIrTreeWithSymbols $r35, r80;
        org.jetbrains.kotlin.ir.visitors.IrElementTransformer $r36;
        org.jetbrains.kotlin.ir.IrElement $r37, $r38, $r40, $r72, r78;
        java.lang.NullPointerException $r41;
        org.jetbrains.kotlin.ir.symbols.IrPropertySymbol $r50;
        java.lang.Iterable $r53, $r62;
        java.util.Collection r55, r59, r64, r68;
        java.util.Iterator r56, r65;
        java.lang.Object r57, r66;
        org.jetbrains.kotlin.ir.expressions.IrConstructorCall r67, r69;
        org.jetbrains.kotlin.ir.util.TypeRemapper r76;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrFunction;

        z0 := @parameter1: boolean;

        r2 := @parameter2: org.jetbrains.kotlin.descriptors.Modality;

        r3 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.descriptors.FunctionDescriptor getDescriptor()>();

        r4 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.ir.descriptors.WrappedSimpleFunctionDescriptor wrapDescriptor(org.jetbrains.kotlin.descriptors.FunctionDescriptor)>(r3);

        $r7 = new org.jetbrains.kotlin.ir.declarations.impl.IrFunctionImpl;

        $i0 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: int getStartOffset()>();

        $i1 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: int getEndOffset()>();

        $r8 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin getOrigin()>();

        $r9 = new org.jetbrains.kotlin.ir.symbols.impl.IrSimpleFunctionSymbolImpl;

        $r10 = (org.jetbrains.kotlin.descriptors.FunctionDescriptor) r4;

        specialinvoke $r9.<org.jetbrains.kotlin.ir.symbols.impl.IrSimpleFunctionSymbolImpl: void <init>(org.jetbrains.kotlin.descriptors.FunctionDescriptor)>($r10);

        $r11 = (org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol) $r9;

        $r12 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.name.Name getName()>();

        $r13 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.descriptors.Visibility getVisibility()>();

        $r14 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.types.IrType getReturnType()>();

        $z4 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: boolean isExternal()>();

        $z5 = interfaceinvoke r3.<org.jetbrains.kotlin.descriptors.FunctionDescriptor: boolean isTailrec()>();

        $z6 = interfaceinvoke r3.<org.jetbrains.kotlin.descriptors.FunctionDescriptor: boolean isSuspend()>();

        $z7 = interfaceinvoke r3.<org.jetbrains.kotlin.descriptors.FunctionDescriptor: boolean isOperator()>();

        $z8 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: boolean isExpect()>();

        $r15 = (org.jetbrains.kotlin.ir.declarations.IrDeclaration) $r1;

        $z9 = staticinvoke <org.jetbrains.kotlin.ir.util.IrFakeOverrideUtilsKt: boolean isFakeOverride(org.jetbrains.kotlin.ir.declarations.IrDeclaration)>($r15);

        specialinvoke $r7.<org.jetbrains.kotlin.ir.declarations.impl.IrFunctionImpl: void <init>(int,int,org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin,org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol,org.jetbrains.kotlin.name.Name,org.jetbrains.kotlin.descriptors.Visibility,org.jetbrains.kotlin.descriptors.Modality,org.jetbrains.kotlin.ir.types.IrType,boolean,boolean,boolean,boolean,boolean,boolean,boolean)>($i0, $i1, $r8, $r11, $r12, $r13, r2, $r14, z0, $z4, $z5, $z6, $z7, $z8, $z9);

        r5 = $r7;

        z1 = 0;

        z2 = 0;

        r6 = r5;

        $r16 = (org.jetbrains.kotlin.ir.declarations.IrDeclaration) r6;

        virtualinvoke r4.<org.jetbrains.kotlin.ir.descriptors.WrappedSimpleFunctionDescriptor: void bind(org.jetbrains.kotlin.ir.declarations.IrDeclaration)>($r16);

        $z10 = $r1 instanceof org.jetbrains.kotlin.ir.declarations.IrSimpleFunction;

        if $z10 == 0 goto label01;

        $r49 = (org.jetbrains.kotlin.ir.declarations.IrSimpleFunction) $r1;

        $r50 = interfaceinvoke $r49.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: org.jetbrains.kotlin.ir.symbols.IrPropertySymbol getCorrespondingPropertySymbol()>();

        virtualinvoke r6.<org.jetbrains.kotlin.ir.declarations.impl.IrFunctionImpl: void setCorrespondingPropertySymbol(org.jetbrains.kotlin.ir.symbols.IrPropertySymbol)>($r50);

     label01:
        $r17 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.declarations.IrDeclarationParent getParent()>();

        virtualinvoke r6.<org.jetbrains.kotlin.ir.declarations.impl.IrFunctionImpl: void setParent(org.jetbrains.kotlin.ir.declarations.IrDeclarationParent)>($r17);

        $r19 = (org.jetbrains.kotlin.ir.declarations.IrTypeParametersContainer) r6;

        $r18 = (org.jetbrains.kotlin.ir.declarations.IrTypeParametersContainer) $r1;

        staticinvoke <org.jetbrains.kotlin.backend.common.ir.IrUtilsKt: java.util.List copyTypeParametersFrom$default(org.jetbrains.kotlin.ir.declarations.IrTypeParametersContainer,org.jetbrains.kotlin.ir.declarations.IrTypeParametersContainer,org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin,java.util.Map,int,java.lang.Object)>($r19, $r18, null, null, 6, null);

        $r21 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeIrGenerationExtensionKt: void generateSymbols(org.jetbrains.kotlin.backend.common.extensions.IrPluginContext)>($r21);

        $r22 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.declarations.IrValueParameter getDispatchReceiverParameter()>();

        if $r22 == null goto label02;

        $r47 = (org.jetbrains.kotlin.ir.declarations.IrFunction) r6;

        $r51 = staticinvoke <org.jetbrains.kotlin.backend.common.ir.IrUtilsKt: org.jetbrains.kotlin.ir.declarations.IrValueParameter copyTo$default(org.jetbrains.kotlin.ir.declarations.IrValueParameter,org.jetbrains.kotlin.ir.declarations.IrFunction,org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin,int,int,int,org.jetbrains.kotlin.name.Name,java.util.Map,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrExpressionBody,boolean,boolean,int,java.lang.Object)>($r22, $r47, null, 0, 0, 0, null, null, null, null, null, 0, 0, 4094, null);

        goto label03;

     label02:
        $r51 = null;

     label03:
        virtualinvoke r6.<org.jetbrains.kotlin.ir.declarations.impl.IrFunctionImpl: void setDispatchReceiverParameter(org.jetbrains.kotlin.ir.declarations.IrValueParameter)>($r51);

        $r23 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.declarations.IrValueParameter getExtensionReceiverParameter()>();

        if $r23 == null goto label04;

        $r45 = (org.jetbrains.kotlin.ir.declarations.IrFunction) r6;

        $r52 = staticinvoke <org.jetbrains.kotlin.backend.common.ir.IrUtilsKt: org.jetbrains.kotlin.ir.declarations.IrValueParameter copyTo$default(org.jetbrains.kotlin.ir.declarations.IrValueParameter,org.jetbrains.kotlin.ir.declarations.IrFunction,org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin,int,int,int,org.jetbrains.kotlin.name.Name,java.util.Map,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrExpressionBody,boolean,boolean,int,java.lang.Object)>($r23, $r45, null, 0, 0, 0, null, null, null, null, null, 0, 0, 4094, null);

        goto label05;

     label04:
        $r52 = null;

     label05:
        virtualinvoke r6.<org.jetbrains.kotlin.ir.declarations.impl.IrFunctionImpl: void setExtensionReceiverParameter(org.jetbrains.kotlin.ir.declarations.IrValueParameter)>($r52);

        $r24 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: java.util.List getValueParameters()>();

        $r53 = (java.lang.Iterable) $r24;

        r54 = r6;

        $r25 = new java.util.ArrayList;

        $i2 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r53, 10);

        specialinvoke $r25.<java.util.ArrayList: void <init>(int)>($i2);

        r55 = (java.util.Collection) $r25;

        r56 = interfaceinvoke $r53.<java.lang.Iterable: java.util.Iterator iterator()>();

     label06:
        $z16 = interfaceinvoke r56.<java.util.Iterator: boolean hasNext()>();

        if $z16 == 0 goto label07;

        r57 = interfaceinvoke r56.<java.util.Iterator: java.lang.Object next()>();

        r58 = (org.jetbrains.kotlin.ir.declarations.IrValueParameter) r57;

        r59 = r55;

        $r42 = (org.jetbrains.kotlin.ir.declarations.IrFunction) r6;

        $r43 = interfaceinvoke r58.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.name.Name getName()>();

        $r44 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.name.Name dexSafeName(org.jetbrains.kotlin.name.Name)>($r43);

        r60 = staticinvoke <org.jetbrains.kotlin.backend.common.ir.IrUtilsKt: org.jetbrains.kotlin.ir.declarations.IrValueParameter copyTo$default(org.jetbrains.kotlin.ir.declarations.IrValueParameter,org.jetbrains.kotlin.ir.declarations.IrFunction,org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin,int,int,int,org.jetbrains.kotlin.name.Name,java.util.Map,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrExpressionBody,boolean,boolean,int,java.lang.Object)>(r58, $r42, null, 0, 0, 0, $r44, null, null, null, null, 0, 0, 4062, null);

        interfaceinvoke r59.<java.util.Collection: boolean add(java.lang.Object)>(r60);

        goto label06;

     label07:
        r61 = (java.util.List) r55;

        virtualinvoke r54.<org.jetbrains.kotlin.ir.declarations.impl.IrFunctionImpl: void setValueParameters(java.util.List)>(r61);

        $r26 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: java.util.List getAnnotations()>();

        $r62 = (java.lang.Iterable) $r26;

        r63 = r6;

        $r27 = new java.util.ArrayList;

        $i3 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r62, 10);

        specialinvoke $r27.<java.util.ArrayList: void <init>(int)>($i3);

        r64 = (java.util.Collection) $r27;

        r65 = interfaceinvoke $r62.<java.lang.Iterable: java.util.Iterator iterator()>();

     label08:
        $z11 = interfaceinvoke r65.<java.util.Iterator: boolean hasNext()>();

        if $z11 == 0 goto label09;

        r66 = interfaceinvoke r65.<java.util.Iterator: java.lang.Object next()>();

        r67 = (org.jetbrains.kotlin.ir.expressions.IrConstructorCall) r66;

        r68 = r64;

        r69 = r67;

        interfaceinvoke r68.<java.util.Collection: boolean add(java.lang.Object)>(r69);

        goto label08;

     label09:
        r70 = (java.util.List) r64;

        virtualinvoke r63.<org.jetbrains.kotlin.ir.declarations.impl.IrFunctionImpl: void setAnnotations(java.util.List)>(r70);

        $r28 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.declarations.MetadataSource getMetadata()>();

        virtualinvoke r6.<org.jetbrains.kotlin.ir.declarations.impl.IrFunctionImpl: void setMetadata(org.jetbrains.kotlin.ir.declarations.MetadataSource)>($r28);

        $r71 = r6;

        $r29 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.expressions.IrBody getBody()>();

        if $r29 == null goto label11;

        $r72 = (org.jetbrains.kotlin.ir.IrElement) $r29;

        $r73 = (org.jetbrains.kotlin.ir.declarations.IrDeclarationParent) $r1;

        z21 = 0;

        $r31 = new org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper;

        specialinvoke $r31.<org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper: void <init>(org.jetbrains.kotlin.ir.util.DescriptorsRemapper,int,kotlin.jvm.internal.DefaultConstructorMarker)>(null, 1, null);

        $r32 = (org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid) $r31;

        staticinvoke <org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoidKt: void acceptVoid(org.jetbrains.kotlin.ir.IrElement,org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid)>($r72, $r32);

        $r33 = new org.jetbrains.kotlin.ir.util.DeepCopyTypeRemapper;

        $r34 = (org.jetbrains.kotlin.ir.util.SymbolRemapper) $r31;

        specialinvoke $r33.<org.jetbrains.kotlin.ir.util.DeepCopyTypeRemapper: void <init>(org.jetbrains.kotlin.ir.util.SymbolRemapper)>($r34);

        r75 = $r33;

        r76 = (org.jetbrains.kotlin.ir.util.TypeRemapper) r75;

        r77 = (org.jetbrains.kotlin.ir.util.SymbolRemapper) $r31;

        r78 = $r72;

        r79 = r6;

        $r35 = new org.jetbrains.kotlin.ir.util.DeepCopyIrTreeWithSymbols;

        specialinvoke $r35.<org.jetbrains.kotlin.ir.util.DeepCopyIrTreeWithSymbols: void <init>(org.jetbrains.kotlin.ir.util.SymbolRemapper,org.jetbrains.kotlin.ir.util.TypeRemapper)>(r77, r76);

        r80 = $r35;

        $r71 = r79;

        $r36 = (org.jetbrains.kotlin.ir.visitors.IrElementTransformer) r80;

        $r37 = interfaceinvoke r78.<org.jetbrains.kotlin.ir.IrElement: org.jetbrains.kotlin.ir.IrElement transform(org.jetbrains.kotlin.ir.visitors.IrElementTransformer,java.lang.Object)>($r36, null);

        $r38 = staticinvoke <org.jetbrains.kotlin.ir.util.PatchDeclarationParentsKt: org.jetbrains.kotlin.ir.IrElement patchDeclarationParents(org.jetbrains.kotlin.ir.IrElement,org.jetbrains.kotlin.ir.declarations.IrDeclarationParent)>($r37, $r73);

        if $r38 != null goto label10;

        $r41 = new java.lang.NullPointerException;

        specialinvoke $r41.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type org.jetbrains.kotlin.ir.expressions.IrBody");

        throw $r41;

     label10:
        $r39 = (org.jetbrains.kotlin.ir.expressions.IrBody) $r38;

        $r40 = (org.jetbrains.kotlin.ir.IrElement) $r39;

        $r81 = (org.jetbrains.kotlin.ir.expressions.IrBody) $r40;

        goto label12;

     label11:
        $r81 = null;

     label12:
        virtualinvoke $r71.<org.jetbrains.kotlin.ir.declarations.impl.IrFunctionImpl: void setBody(org.jetbrains.kotlin.ir.expressions.IrBody)>($r81);

        $r30 = (org.jetbrains.kotlin.ir.declarations.IrSimpleFunction) r5;

        return $r30;
    }

    static org.jetbrains.kotlin.ir.declarations.IrSimpleFunction copy$default(androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer, org.jetbrains.kotlin.ir.declarations.IrFunction, boolean, org.jetbrains.kotlin.descriptors.Modality, int, java.lang.Object)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer r0;
        org.jetbrains.kotlin.ir.declarations.IrFunction r1;
        int i0, $i1, $i2;
        java.lang.Object r2;
        org.jetbrains.kotlin.ir.declarations.IrSimpleFunction $r3;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r4;
        org.jetbrains.kotlin.descriptors.Modality $r5, r6;
        boolean z0;

        r0 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer;

        r1 := @parameter1: org.jetbrains.kotlin.ir.declarations.IrFunction;

        z0 := @parameter2: boolean;

        r6 := @parameter3: org.jetbrains.kotlin.descriptors.Modality;

        i0 := @parameter4: int;

        r2 := @parameter5: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        z0 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: boolean isInline()>();

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        $r4 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.descriptors.FunctionDescriptor getDescriptor()>();

        $r5 = interfaceinvoke $r4.<org.jetbrains.kotlin.descriptors.FunctionDescriptor: org.jetbrains.kotlin.descriptors.Modality getModality()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "descriptor.modality");

        r6 = $r5;

     label2:
        $r3 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.ir.declarations.IrSimpleFunction copy(org.jetbrains.kotlin.ir.declarations.IrFunction,boolean,org.jetbrains.kotlin.descriptors.Modality)>(r1, z0, r6);

        return $r3;
    }

    private final org.jetbrains.kotlin.name.Name dexSafeName(org.jetbrains.kotlin.name.Name)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer r0;
        org.jetbrains.kotlin.name.Name r1, $r8, $r9;
        java.lang.String r2, $r3, $r5, $r6, $r7;
        boolean $z0, $z1;
        java.lang.CharSequence $r4;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.name.Name;

        $z0 = virtualinvoke r1.<org.jetbrains.kotlin.name.Name: boolean isSpecial()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r1.<org.jetbrains.kotlin.name.Name: java.lang.String asString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "name.asString()");

        $r4 = (java.lang.CharSequence) $r3;

        $z1 = staticinvoke <kotlin.text.StringsKt: boolean contains$default(java.lang.CharSequence,char,boolean,int,java.lang.Object)>($r4, 32, 0, 2, null);

        if $z1 == 0 goto label1;

        $r5 = virtualinvoke r1.<org.jetbrains.kotlin.name.Name: java.lang.String asString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "name\n                .asString()");

        $r6 = staticinvoke <kotlin.text.StringsKt: java.lang.String replace$default(java.lang.String,char,char,boolean,int,java.lang.Object)>($r5, 32, 36, 0, 4, null);

        $r7 = staticinvoke <kotlin.text.StringsKt: java.lang.String replace$default(java.lang.String,char,char,boolean,int,java.lang.Object)>($r6, 60, 36, 0, 4, null);

        r2 = staticinvoke <kotlin.text.StringsKt: java.lang.String replace$default(java.lang.String,char,char,boolean,int,java.lang.Object)>($r7, 62, 36, 0, 4, null);

        $r8 = staticinvoke <org.jetbrains.kotlin.name.Name: org.jetbrains.kotlin.name.Name identifier(java.lang.String)>(r2);

        $r9 = $r8;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r8, "Name.identifier(sanitized)");

        goto label2;

     label1:
        $r9 = r1;

     label2:
        return $r9;
    }

    private final org.jetbrains.kotlin.ir.expressions.IrConstructorCall jvmNameAnnotation(java.lang.String)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer r0;
        java.lang.String r1;
        org.jetbrains.kotlin.ir.symbols.IrClassSymbol r2;
        org.jetbrains.kotlin.descriptors.ClassConstructorDescriptor r3, $r13;
        org.jetbrains.kotlin.ir.types.IrSimpleType r4;
        org.jetbrains.kotlin.ir.symbols.IrConstructorSymbol r5;
        org.jetbrains.kotlin.ir.expressions.impl.IrConstructorCallImpl r6, r7, $r17;
        boolean z0, z1;
        org.jetbrains.kotlin.name.FqName $r8, $r11;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r9, $r15;
        org.jetbrains.kotlin.descriptors.ModuleDescriptor $r10;
        org.jetbrains.kotlin.descriptors.ClassDescriptor $r12;
        java.util.List $r14;
        org.jetbrains.kotlin.ir.util.ReferenceSymbolTable $r16;
        org.jetbrains.kotlin.ir.types.IrType $r18, $r21;
        org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl$Companion $r19;
        org.jetbrains.kotlin.ir.descriptors.IrBuiltIns $r20;
        org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl $r22;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r23;
        org.jetbrains.kotlin.ir.expressions.IrConstructorCall $r24;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer;

        r1 := @parameter0: java.lang.String;

        $r8 = <org.jetbrains.kotlin.resolve.DescriptorUtils: org.jetbrains.kotlin.name.FqName JVM_NAME>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r8, "DescriptorUtils.JVM_NAME");

        r2 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.ir.symbols.IrClassSymbol getTopLevelClass(org.jetbrains.kotlin.name.FqName)>($r8);

        $r9 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        $r10 = interfaceinvoke $r9.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.descriptors.ModuleDescriptor getModuleDescriptor()>();

        $r11 = <org.jetbrains.kotlin.resolve.DescriptorUtils: org.jetbrains.kotlin.name.FqName JVM_NAME>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r11, "DescriptorUtils.JVM_NAME");

        $r12 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformerKt: org.jetbrains.kotlin.descriptors.ClassDescriptor access$findTopLevel(org.jetbrains.kotlin.descriptors.ModuleDescriptor,org.jetbrains.kotlin.name.FqName)>($r10, $r11);

        $r13 = interfaceinvoke $r12.<org.jetbrains.kotlin.descriptors.ClassDescriptor: org.jetbrains.kotlin.descriptors.ClassConstructorDescriptor getUnsubstitutedPrimaryConstructor()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r13);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r13, "context.moduleDescriptor\u2026tutedPrimaryConstructor!!");

        r3 = $r13;

        $r14 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        r4 = staticinvoke <org.jetbrains.kotlin.ir.types.IrTypesKt: org.jetbrains.kotlin.ir.types.IrSimpleType createType(org.jetbrains.kotlin.ir.symbols.IrClassSymbol,boolean,java.util.List)>(r2, 0, $r14);

        $r15 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        $r16 = interfaceinvoke $r15.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.ir.util.ReferenceSymbolTable getSymbolTable()>();

        r5 = interfaceinvoke $r16.<org.jetbrains.kotlin.ir.util.ReferenceSymbolTable: org.jetbrains.kotlin.ir.symbols.IrConstructorSymbol referenceConstructor(org.jetbrains.kotlin.descriptors.ClassConstructorDescriptor)>(r3);

        $r17 = new org.jetbrains.kotlin.ir.expressions.impl.IrConstructorCallImpl;

        $r18 = (org.jetbrains.kotlin.ir.types.IrType) r4;

        specialinvoke $r17.<org.jetbrains.kotlin.ir.expressions.impl.IrConstructorCallImpl: void <init>(int,int,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.symbols.IrConstructorSymbol,int,int,int,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,int,kotlin.jvm.internal.DefaultConstructorMarker)>(-1, -1, $r18, r5, 0, 0, 1, null, 128, null);

        r6 = $r17;

        z0 = 0;

        z1 = 0;

        r7 = r6;

        $r19 = <org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl: org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl$Companion Companion>;

        $r20 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.ir.descriptors.IrBuiltIns getBuiltIns()>();

        $r21 = virtualinvoke $r20.<org.jetbrains.kotlin.ir.descriptors.IrBuiltIns: org.jetbrains.kotlin.ir.types.IrType getStringType()>();

        $r22 = virtualinvoke $r19.<org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl$Companion: org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl string(int,int,org.jetbrains.kotlin.ir.types.IrType,java.lang.String)>(-1, -1, $r21, r1);

        $r23 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r22;

        virtualinvoke r7.<org.jetbrains.kotlin.ir.expressions.impl.IrConstructorCallImpl: void putValueArgument(int,org.jetbrains.kotlin.ir.expressions.IrExpression)>(0, $r23);

        $r24 = (org.jetbrains.kotlin.ir.expressions.IrConstructorCall) r6;

        return $r24;
    }

    private final boolean requiresDefaultParameter(org.jetbrains.kotlin.ir.declarations.IrFunction)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer r0;
        org.jetbrains.kotlin.ir.declarations.IrFunction $r1, $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z7, $z8, $z10, $z12, $z13, $z15;
        java.util.List $r2, $r4;
        org.jetbrains.kotlin.ir.declarations.IrSimpleFunction $r3;
        java.util.Collection $r6, $r8;
        org.jetbrains.kotlin.ir.expressions.IrExpressionBody $r7;
        java.lang.Iterable $r9, $r13;
        java.util.Iterator r10, r14;
        java.lang.Object r11, r15;
        org.jetbrains.kotlin.ir.declarations.IrValueParameter r12;
        org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol r16;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrFunction;

        $z0 = $r1 instanceof org.jetbrains.kotlin.ir.declarations.IrSimpleFunction;

        if $z0 == 0 goto label12;

        $r2 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: java.util.List getValueParameters()>();

        $r9 = (java.lang.Iterable) $r2;

        $z1 = $r9 instanceof java.util.Collection;

        if $z1 == 0 goto label01;

        $r8 = (java.util.Collection) $r9;

        $z5 = interfaceinvoke $r8.<java.util.Collection: boolean isEmpty()>();

        if $z5 == 0 goto label01;

        $z7 = 0;

        goto label06;

     label01:
        r10 = interfaceinvoke $r9.<java.lang.Iterable: java.util.Iterator iterator()>();

     label02:
        $z8 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label05;

        r11 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (org.jetbrains.kotlin.ir.declarations.IrValueParameter) r11;

        $r7 = interfaceinvoke r12.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.ir.expressions.IrExpressionBody getDefaultValue()>();

        if $r7 == null goto label03;

        $z10 = 1;

        goto label04;

     label03:
        $z10 = 0;

     label04:
        if $z10 == 0 goto label02;

        $z7 = 1;

        goto label06;

     label05:
        $z7 = 0;

     label06:
        if $z7 != 0 goto label11;

        $r3 = (org.jetbrains.kotlin.ir.declarations.IrSimpleFunction) $r1;

        $r4 = interfaceinvoke $r3.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: java.util.List getOverriddenSymbols()>();

        $r13 = (java.lang.Iterable) $r4;

        $z2 = $r13 instanceof java.util.Collection;

        if $z2 == 0 goto label07;

        $r6 = (java.util.Collection) $r13;

        $z4 = interfaceinvoke $r6.<java.util.Collection: boolean isEmpty()>();

        if $z4 == 0 goto label07;

        $z12 = 0;

        goto label10;

     label07:
        r14 = interfaceinvoke $r13.<java.lang.Iterable: java.util.Iterator iterator()>();

     label08:
        $z13 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

        if $z13 == 0 goto label09;

        r15 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        r16 = (org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol) r15;

        $r5 = interfaceinvoke r16.<org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol: org.jetbrains.kotlin.ir.declarations.IrFunction getOwner()>();

        $z3 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: boolean requiresDefaultParameter(org.jetbrains.kotlin.ir.declarations.IrFunction)>($r5);

        if $z3 == 0 goto label08;

        $z12 = 1;

        goto label10;

     label09:
        $z12 = 0;

     label10:
        if $z12 == 0 goto label12;

     label11:
        $z15 = 1;

        goto label13;

     label12:
        $z15 = 0;

     label13:
        return $z15;
    }

    private final org.jetbrains.kotlin.ir.declarations.IrFunction copyWithComposerParam(org.jetbrains.kotlin.ir.declarations.IrFunction)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer r0;
        org.jetbrains.kotlin.ir.declarations.IrFunction $r1, r3, $r18, $r26, $r34, $r35, $r41, $r46, $r54, $r104, $r105, r126;
        org.jetbrains.kotlin.ir.declarations.IrSimpleFunction r2, r117, r119, r125, r133;
        org.jetbrains.kotlin.ir.declarations.impl.IrValueParameterImpl r4, r5, $r61, r142;
        boolean z1, z2, $z4, $z5, $z7, $z8, $z9, $z10, $z11, $z13, z15, z16, z18, $z23, $z26, z27;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r6, $r12, $r16, $r36, $r40, $r49, $r57, $r130;
        java.util.List $r7, $r17, $r20, $r22, $r24, $r69, $r77, $r80, $r84, $r92, $r95, $r100, r128, $r131, r143;
        java.lang.Object $r8, r122, r138;
        org.jetbrains.kotlin.ir.declarations.IrValueParameter $r9, $r139, r145;
        androidx.compose.compiler.plugins.kotlin.KtxNameConventions $r10, $r25, $r31, $r42;
        org.jetbrains.kotlin.name.Name $r11, $r27, $r32, $r43, $r66, $r74, $r89, $r115;
        java.util.Set $r13;
        java.util.Map $r14, $r144;
        java.lang.Iterable $r19, $r21, $r23, $r118, $r132, r134;
        java.lang.String $r28, $r33, $r44, $r75, $r76, $r90, $r91, $r116, $r147, $r149;
        org.jetbrains.kotlin.ir.types.IrType $r29, $r30, $r51, $r59, $r67, r141;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10;
        androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1 $r37;
        org.jetbrains.kotlin.ir.IrElement $r38;
        org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid $r39;
        java.lang.StringBuilder $r45, $r47, $r48, $r53, $r55, $r56, $r109, $r110, $r111, $r112;
        org.jetbrains.kotlin.ir.descriptors.IrBuiltIns $r50, $r58;
        org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin $r62;
        org.jetbrains.kotlin.ir.symbols.impl.IrValueParameterSymbolImpl $r63;
        org.jetbrains.kotlin.descriptors.ParameterDescriptor $r64;
        org.jetbrains.kotlin.ir.symbols.IrValueParameterSymbol $r65;
        org.jetbrains.kotlin.ir.expressions.IrExpressionBody $r68;
        org.jetbrains.kotlin.name.FqName $r70, $r85;
        org.jetbrains.kotlin.ir.expressions.IrConstructorCall $r71, $r79, $r86, $r94;
        org.jetbrains.kotlin.descriptors.PropertySetterDescriptor $r72;
        org.jetbrains.kotlin.descriptors.PropertyDescriptor $r73, $r88;
        java.util.Collection $r78, $r93, r120, r124, $r136, r140;
        org.jetbrains.kotlin.ir.symbols.IrPropertySymbol $r81, $r96;
        org.jetbrains.kotlin.ir.declarations.IrSymbolOwner $r82, $r97;
        org.jetbrains.kotlin.ir.declarations.IrProperty $r83, $r98;
        org.jetbrains.kotlin.descriptors.PropertyGetterDescriptor $r87;
        org.jetbrains.kotlin.ir.declarations.IrOverridableDeclaration $r99;
        java.util.ArrayList $r101, $r135;
        org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol $r102, $r103, r127;
        org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol $r106;
        java.lang.NullPointerException $r107, $r108;
        java.lang.AssertionError $r113;
        java.lang.Throwable $r114;
        java.util.Iterator $r121, r137;
        org.jetbrains.kotlin.ir.symbols.IrSymbol r123;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r129;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrFunction;

        $r6 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeIrGenerationExtensionKt: void generateSymbols(org.jetbrains.kotlin.backend.common.extensions.IrPluginContext)>($r6);

        $r7 = staticinvoke <org.jetbrains.kotlin.ir.util.IrUtilsKt: java.util.List getExplicitParameters(org.jetbrains.kotlin.ir.declarations.IrFunction)>($r1);

        $r8 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object lastOrNull(java.util.List)>($r7);

        $r9 = (org.jetbrains.kotlin.ir.declarations.IrValueParameter) $r8;

        if $r9 == null goto label01;

        $r115 = interfaceinvoke $r9.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.name.Name getName()>();

        goto label02;

     label01:
        $r115 = null;

     label02:
        $r10 = <androidx.compose.compiler.plugins.kotlin.KtxNameConventions: androidx.compose.compiler.plugins.kotlin.KtxNameConventions INSTANCE>;

        $r11 = virtualinvoke $r10.<androidx.compose.compiler.plugins.kotlin.KtxNameConventions: org.jetbrains.kotlin.name.Name getCOMPOSER_PARAMETER()>();

        $z4 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r115, $r11);

        z15 = $z4 ^ 1;

        z16 = 0;

        $z5 = <kotlin._Assertions: boolean ENABLED>;

        if $z5 == 0 goto label03;

        if z15 != 0 goto label03;

        $r109 = new java.lang.StringBuilder;

        specialinvoke $r109.<java.lang.StringBuilder: void <init>()>();

        $r110 = virtualinvoke $r109.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to add composer param to ");

        $r111 = virtualinvoke $r110.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r112 = virtualinvoke $r111.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", but it has already been added.");

        $r116 = virtualinvoke $r112.<java.lang.StringBuilder: java.lang.String toString()>();

        $r113 = new java.lang.AssertionError;

        specialinvoke $r113.<java.lang.AssertionError: void <init>(java.lang.Object)>($r116);

        $r114 = (java.lang.Throwable) $r113;

        throw $r114;

     label03:
        r117 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.ir.declarations.IrSimpleFunction copy$default(androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer,org.jetbrains.kotlin.ir.declarations.IrFunction,boolean,org.jetbrains.kotlin.descriptors.Modality,int,java.lang.Object)>(r0, $r1, 0, null, 3, null);

        z18 = 0;

        r2 = r117;

        $r12 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeIrGenerationExtensionKt: void generateSymbols(org.jetbrains.kotlin.backend.common.extensions.IrPluginContext)>($r12);

        r3 = $r1;

        $r13 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: java.util.Set transformedFunctionSet>;

        interfaceinvoke $r13.<java.util.Set: boolean add(java.lang.Object)>(r2);

        $r14 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: java.util.Map transformedFunctions>;

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r2);

        $z7 = $r1 instanceof org.jetbrains.kotlin.ir.declarations.IrOverridableDeclaration;

        if $z7 == 0 goto label08;

        $r99 = (org.jetbrains.kotlin.ir.declarations.IrOverridableDeclaration) $r1;

        $r100 = interfaceinvoke $r99.<org.jetbrains.kotlin.ir.declarations.IrOverridableDeclaration: java.util.List getOverriddenSymbols()>();

        $r118 = (java.lang.Iterable) $r100;

        r119 = r2;

        $r101 = new java.util.ArrayList;

        $i4 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r118, 10);

        specialinvoke $r101.<java.util.ArrayList: void <init>(int)>($i4);

        r120 = (java.util.Collection) $r101;

        $r121 = interfaceinvoke $r118.<java.lang.Iterable: java.util.Iterator iterator()>();

     label04:
        $z13 = interfaceinvoke $r121.<java.util.Iterator: boolean hasNext()>();

        if $z13 == 0 goto label07;

        r122 = interfaceinvoke $r121.<java.util.Iterator: java.lang.Object next()>();

        r123 = (org.jetbrains.kotlin.ir.symbols.IrSymbol) r122;

        r124 = r120;

        if r123 != null goto label05;

        $r108 = new java.lang.NullPointerException;

        specialinvoke $r108.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol");

        throw $r108;

     label05:
        $r102 = (org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol) r123;

        $r103 = (org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol) r123;

        $r104 = interfaceinvoke $r103.<org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol: org.jetbrains.kotlin.ir.declarations.IrFunction getOwner()>();

        r125 = (org.jetbrains.kotlin.ir.declarations.IrSimpleFunction) $r104;

        $r105 = (org.jetbrains.kotlin.ir.declarations.IrFunction) r125;

        r126 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.ir.declarations.IrFunction withComposerParamIfNeeded(org.jetbrains.kotlin.ir.declarations.IrFunction)>($r105);

        $r106 = interfaceinvoke r126.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getSymbol()>();

        if $r106 != null goto label06;

        $r107 = new java.lang.NullPointerException;

        specialinvoke $r107.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol");

        throw $r107;

     label06:
        r127 = (org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol) $r106;

        interfaceinvoke r124.<java.util.Collection: boolean add(java.lang.Object)>(r127);

        goto label04;

     label07:
        r128 = (java.util.List) r120;

        interfaceinvoke r119.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: void setOverriddenSymbols(java.util.List)>(r128);

     label08:
        $r16 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeIrGenerationExtensionKt: void generateSymbols(org.jetbrains.kotlin.backend.common.extensions.IrPluginContext)>($r16);

        $r129 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.descriptors.FunctionDescriptor getDescriptor()>();

        $z8 = $r129 instanceof org.jetbrains.kotlin.descriptors.PropertyGetterDescriptor;

        if $z8 == 0 goto label09;

        $r84 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: java.util.List getAnnotations()>();

        $r85 = <org.jetbrains.kotlin.resolve.DescriptorUtils: org.jetbrains.kotlin.name.FqName JVM_NAME>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r85, "DescriptorUtils.JVM_NAME");

        $r86 = staticinvoke <org.jetbrains.kotlin.ir.util.AdditionalIrUtilsKt: org.jetbrains.kotlin.ir.expressions.IrConstructorCall findAnnotation(java.util.List,org.jetbrains.kotlin.name.FqName)>($r84, $r85);

        if $r86 != null goto label09;

        $r87 = (org.jetbrains.kotlin.descriptors.PropertyGetterDescriptor) $r129;

        $r88 = interfaceinvoke $r87.<org.jetbrains.kotlin.descriptors.PropertyGetterDescriptor: org.jetbrains.kotlin.descriptors.PropertyDescriptor getCorrespondingProperty()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r88, "descriptor.correspondingProperty");

        $r89 = interfaceinvoke $r88.<org.jetbrains.kotlin.descriptors.PropertyDescriptor: org.jetbrains.kotlin.name.Name getName()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r89, "descriptor.correspondingProperty.name");

        $r90 = virtualinvoke $r89.<org.jetbrains.kotlin.name.Name: java.lang.String getIdentifier()>();

        $r91 = staticinvoke <org.jetbrains.kotlin.load.java.JvmAbi: java.lang.String getterName(java.lang.String)>($r90);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r91, "JvmAbi.getterName(descri\u2026Property.name.identifier)");

        $r92 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: java.util.List getAnnotations()>();

        $r93 = (java.util.Collection) $r92;

        $r94 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.ir.expressions.IrConstructorCall jvmNameAnnotation(java.lang.String)>($r91);

        $r95 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List plus(java.util.Collection,java.lang.Object)>($r93, $r94);

        interfaceinvoke r2.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: void setAnnotations(java.util.List)>($r95);

        $r96 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: org.jetbrains.kotlin.ir.symbols.IrPropertySymbol getCorrespondingPropertySymbol()>();

        if $r96 == null goto label09;

        $r97 = interfaceinvoke $r96.<org.jetbrains.kotlin.ir.symbols.IrPropertySymbol: org.jetbrains.kotlin.ir.declarations.IrSymbolOwner getOwner()>();

        $r98 = (org.jetbrains.kotlin.ir.declarations.IrProperty) $r97;

        if $r98 == null goto label09;

        interfaceinvoke $r98.<org.jetbrains.kotlin.ir.declarations.IrProperty: void setGetter(org.jetbrains.kotlin.ir.declarations.IrSimpleFunction)>(r2);

        goto label09;

     label09:
        $r130 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeIrGenerationExtensionKt: void generateSymbols(org.jetbrains.kotlin.backend.common.extensions.IrPluginContext)>($r130);

        $z23 = $r129 instanceof org.jetbrains.kotlin.descriptors.PropertySetterDescriptor;

        if $z23 == 0 goto label10;

        $r69 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: java.util.List getAnnotations()>();

        $r70 = <org.jetbrains.kotlin.resolve.DescriptorUtils: org.jetbrains.kotlin.name.FqName JVM_NAME>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r70, "DescriptorUtils.JVM_NAME");

        $r71 = staticinvoke <org.jetbrains.kotlin.ir.util.AdditionalIrUtilsKt: org.jetbrains.kotlin.ir.expressions.IrConstructorCall findAnnotation(java.util.List,org.jetbrains.kotlin.name.FqName)>($r69, $r70);

        if $r71 != null goto label10;

        $r72 = (org.jetbrains.kotlin.descriptors.PropertySetterDescriptor) $r129;

        $r73 = interfaceinvoke $r72.<org.jetbrains.kotlin.descriptors.PropertySetterDescriptor: org.jetbrains.kotlin.descriptors.PropertyDescriptor getCorrespondingProperty()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r73, "descriptor.correspondingProperty");

        $r74 = interfaceinvoke $r73.<org.jetbrains.kotlin.descriptors.PropertyDescriptor: org.jetbrains.kotlin.name.Name getName()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r74, "descriptor.correspondingProperty.name");

        $r75 = virtualinvoke $r74.<org.jetbrains.kotlin.name.Name: java.lang.String getIdentifier()>();

        $r76 = staticinvoke <org.jetbrains.kotlin.load.java.JvmAbi: java.lang.String setterName(java.lang.String)>($r75);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r76, "JvmAbi.setterName(descri\u2026Property.name.identifier)");

        $r77 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: java.util.List getAnnotations()>();

        $r78 = (java.util.Collection) $r77;

        $r79 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.ir.expressions.IrConstructorCall jvmNameAnnotation(java.lang.String)>($r76);

        $r80 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List plus(java.util.Collection,java.lang.Object)>($r78, $r79);

        interfaceinvoke r2.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: void setAnnotations(java.util.List)>($r80);

        $r81 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: org.jetbrains.kotlin.ir.symbols.IrPropertySymbol getCorrespondingPropertySymbol()>();

        if $r81 == null goto label10;

        $r82 = interfaceinvoke $r81.<org.jetbrains.kotlin.ir.symbols.IrPropertySymbol: org.jetbrains.kotlin.ir.declarations.IrSymbolOwner getOwner()>();

        $r83 = (org.jetbrains.kotlin.ir.declarations.IrProperty) $r82;

        if $r83 == null goto label10;

        interfaceinvoke $r83.<org.jetbrains.kotlin.ir.declarations.IrProperty: void setSetter(org.jetbrains.kotlin.ir.declarations.IrSimpleFunction)>(r2);

        goto label10;

     label10:
        $r131 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: java.util.List getValueParameters()>();

        $r132 = (java.lang.Iterable) $r131;

        r133 = r2;

        r134 = $r132;

        $r135 = new java.util.ArrayList;

        $i5 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r132, 10);

        specialinvoke $r135.<java.util.ArrayList: void <init>(int)>($i5);

        $r136 = (java.util.Collection) $r135;

        r137 = interfaceinvoke r134.<java.lang.Iterable: java.util.Iterator iterator()>();

     label11:
        $z26 = interfaceinvoke r137.<java.util.Iterator: boolean hasNext()>();

        if $z26 == 0 goto label12;

        r138 = interfaceinvoke r137.<java.util.Iterator: java.lang.Object next()>();

        $r139 = (org.jetbrains.kotlin.ir.declarations.IrValueParameter) r138;

        r140 = $r136;

        z27 = 0;

        r141 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.ir.types.IrType defaultParameterType(org.jetbrains.kotlin.ir.declarations.IrValueParameter)>($r139);

        $r61 = new org.jetbrains.kotlin.ir.declarations.impl.IrValueParameterImpl;

        $i1 = interfaceinvoke $r139.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: int getStartOffset()>();

        $i2 = interfaceinvoke $r139.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: int getEndOffset()>();

        $r62 = interfaceinvoke $r139.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin getOrigin()>();

        $r63 = new org.jetbrains.kotlin.ir.symbols.impl.IrValueParameterSymbolImpl;

        $r64 = interfaceinvoke $r139.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.descriptors.ParameterDescriptor getDescriptor()>();

        specialinvoke $r63.<org.jetbrains.kotlin.ir.symbols.impl.IrValueParameterSymbolImpl: void <init>(org.jetbrains.kotlin.descriptors.ParameterDescriptor)>($r64);

        $r65 = (org.jetbrains.kotlin.ir.symbols.IrValueParameterSymbol) $r63;

        $r66 = interfaceinvoke $r139.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.name.Name getName()>();

        $i3 = interfaceinvoke $r139.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: int getIndex()>();

        $r67 = interfaceinvoke $r139.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.ir.types.IrType getVarargElementType()>();

        $z10 = interfaceinvoke $r139.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: boolean isCrossinline()>();

        $z11 = interfaceinvoke $r139.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: boolean isNoinline()>();

        specialinvoke $r61.<org.jetbrains.kotlin.ir.declarations.impl.IrValueParameterImpl: void <init>(int,int,org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin,org.jetbrains.kotlin.ir.symbols.IrValueParameterSymbol,org.jetbrains.kotlin.name.Name,int,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.types.IrType,boolean,boolean)>($i1, $i2, $r62, $r65, $r66, $i3, r141, $r67, $z10, $z11);

        r4 = $r61;

        z1 = 0;

        z2 = 0;

        r5 = r4;

        $r68 = interfaceinvoke $r139.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.ir.expressions.IrExpressionBody getDefaultValue()>();

        virtualinvoke r5.<org.jetbrains.kotlin.ir.declarations.impl.IrValueParameterImpl: void setDefaultValue(org.jetbrains.kotlin.ir.expressions.IrExpressionBody)>($r68);

        r142 = r4;

        interfaceinvoke r140.<java.util.Collection: boolean add(java.lang.Object)>(r142);

        goto label11;

     label12:
        r143 = (java.util.List) $r136;

        interfaceinvoke r133.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: void setValueParameters(java.util.List)>(r143);

        $r17 = staticinvoke <org.jetbrains.kotlin.ir.util.IrUtilsKt: java.util.List getExplicitParameters(org.jetbrains.kotlin.ir.declarations.IrFunction)>($r1);

        $r19 = (java.lang.Iterable) $r17;

        $r18 = (org.jetbrains.kotlin.ir.declarations.IrFunction) r2;

        $r20 = staticinvoke <org.jetbrains.kotlin.ir.util.IrUtilsKt: java.util.List getExplicitParameters(org.jetbrains.kotlin.ir.declarations.IrFunction)>($r18);

        $r21 = (java.lang.Iterable) $r20;

        $r22 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List zip(java.lang.Iterable,java.lang.Iterable)>($r19, $r21);

        $r23 = (java.lang.Iterable) $r22;

        $r144 = staticinvoke <kotlin.collections.MapsKt: java.util.Map toMap(java.lang.Iterable)>($r23);

        $r24 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: java.util.List getValueParameters()>();

        $i6 = interfaceinvoke $r24.<java.util.List: int size()>();

        $r26 = (org.jetbrains.kotlin.ir.declarations.IrFunction) r2;

        $r25 = <androidx.compose.compiler.plugins.kotlin.KtxNameConventions: androidx.compose.compiler.plugins.kotlin.KtxNameConventions INSTANCE>;

        $r27 = virtualinvoke $r25.<androidx.compose.compiler.plugins.kotlin.KtxNameConventions: org.jetbrains.kotlin.name.Name getCOMPOSER_PARAMETER()>();

        $r28 = virtualinvoke $r27.<org.jetbrains.kotlin.name.Name: java.lang.String getIdentifier()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r28, "KtxNameConventions.COMPOSER_PARAMETER.identifier");

        $r29 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.ir.types.IrType composerType>;

        $r30 = staticinvoke <org.jetbrains.kotlin.ir.types.IrTypesKt: org.jetbrains.kotlin.ir.types.IrType makeNullable(org.jetbrains.kotlin.ir.types.IrType)>($r29);

        r145 = staticinvoke <org.jetbrains.kotlin.ir.builders.declarations.DeclarationBuildersKt: org.jetbrains.kotlin.ir.declarations.IrValueParameter addValueParameter$default(org.jetbrains.kotlin.ir.declarations.IrFunction,java.lang.String,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin,int,java.lang.Object)>($r26, $r28, $r30, null, 4, null);

        $r31 = <androidx.compose.compiler.plugins.kotlin.KtxNameConventions: androidx.compose.compiler.plugins.kotlin.KtxNameConventions INSTANCE>;

        $r32 = virtualinvoke $r31.<androidx.compose.compiler.plugins.kotlin.KtxNameConventions: org.jetbrains.kotlin.name.Name getCHANGED_PARAMETER()>();

        $r33 = virtualinvoke $r32.<org.jetbrains.kotlin.name.Name: java.lang.String getIdentifier()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r33, "KtxNameConventions.CHANGED_PARAMETER.identifier");

        $i7 = 0;

        $r34 = (org.jetbrains.kotlin.ir.declarations.IrFunction) r2;

        $i0 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformerKt: int getThisParamCount(org.jetbrains.kotlin.ir.declarations.IrFunction)>($r34);

        i8 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformerKt: int changedParamCount(int,int)>($i6, $i0);

     label13:
        if $i7 >= i8 goto label16;

        $r54 = (org.jetbrains.kotlin.ir.declarations.IrFunction) r2;

        if $i7 != 0 goto label14;

        $r147 = $r33;

        goto label15;

     label14:
        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r147 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

     label15:
        $r57 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        $r58 = interfaceinvoke $r57.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.ir.descriptors.IrBuiltIns getIrBuiltIns()>();

        $r59 = virtualinvoke $r58.<org.jetbrains.kotlin.ir.descriptors.IrBuiltIns: org.jetbrains.kotlin.ir.types.IrType getIntType()>();

        staticinvoke <org.jetbrains.kotlin.ir.builders.declarations.DeclarationBuildersKt: org.jetbrains.kotlin.ir.declarations.IrValueParameter addValueParameter$default(org.jetbrains.kotlin.ir.declarations.IrFunction,java.lang.String,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin,int,java.lang.Object)>($r54, $r147, $r59, null, 4, null);

        $i7 = $i7 + 1;

        goto label13;

     label16:
        $r35 = (org.jetbrains.kotlin.ir.declarations.IrFunction) r2;

        $z9 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: boolean requiresDefaultParameter(org.jetbrains.kotlin.ir.declarations.IrFunction)>($r35);

        if $z9 == 0 goto label20;

        $r42 = <androidx.compose.compiler.plugins.kotlin.KtxNameConventions: androidx.compose.compiler.plugins.kotlin.KtxNameConventions INSTANCE>;

        $r43 = virtualinvoke $r42.<androidx.compose.compiler.plugins.kotlin.KtxNameConventions: org.jetbrains.kotlin.name.Name getDEFAULT_PARAMETER()>();

        $r44 = virtualinvoke $r43.<org.jetbrains.kotlin.name.Name: java.lang.String getIdentifier()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r44, "KtxNameConventions.DEFAULT_PARAMETER.identifier");

        i9 = 0;

        i10 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformerKt: int defaultParamCount(int)>($i6);

     label17:
        if i9 >= i10 goto label20;

        $r46 = (org.jetbrains.kotlin.ir.declarations.IrFunction) r2;

        if i9 != 0 goto label18;

        $r149 = $r44;

        goto label19;

     label18:
        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);

        $r149 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

     label19:
        $r49 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        $r50 = interfaceinvoke $r49.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.ir.descriptors.IrBuiltIns getIrBuiltIns()>();

        $r51 = virtualinvoke $r50.<org.jetbrains.kotlin.ir.descriptors.IrBuiltIns: org.jetbrains.kotlin.ir.types.IrType getIntType()>();

        staticinvoke <org.jetbrains.kotlin.ir.builders.declarations.DeclarationBuildersKt: org.jetbrains.kotlin.ir.declarations.IrValueParameter addValueParameter$default(org.jetbrains.kotlin.ir.declarations.IrFunction,java.lang.String,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin,int,java.lang.Object)>($r46, $r149, $r51, null, 4, null);

        i9 = i9 + 1;

        goto label17;

     label20:
        $r36 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeIrGenerationExtensionKt: void generateSymbols(org.jetbrains.kotlin.backend.common.extensions.IrPluginContext)>($r36);

        $r38 = (org.jetbrains.kotlin.ir.IrElement) r2;

        $r37 = new androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1;

        specialinvoke $r37.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1: void <init>(java.util.Map,org.jetbrains.kotlin.ir.declarations.IrFunction,org.jetbrains.kotlin.ir.declarations.IrSimpleFunction,org.jetbrains.kotlin.ir.declarations.IrValueParameter,androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer,org.jetbrains.kotlin.ir.declarations.IrFunction)>($r144, r3, r2, r145, r0, $r1);

        $r39 = (org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid) $r37;

        staticinvoke <org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoidKt: void transformChildrenVoid(org.jetbrains.kotlin.ir.IrElement,org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid)>($r38, $r39);

        $r40 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeIrGenerationExtensionKt: void generateSymbols(org.jetbrains.kotlin.backend.common.extensions.IrPluginContext)>($r40);

        $r41 = (org.jetbrains.kotlin.ir.declarations.IrFunction) r117;

        return $r41;
    }

    public final org.jetbrains.kotlin.ir.types.IrType defaultParameterType(org.jetbrains.kotlin.ir.declarations.IrValueParameter)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer r0;
        org.jetbrains.kotlin.ir.declarations.IrValueParameter r1;
        org.jetbrains.kotlin.ir.types.IrType r2, $r4;
        org.jetbrains.kotlin.ir.expressions.IrExpressionBody $r3;
        boolean $z0, $z1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrValueParameter;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "param");

        r2 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.ir.types.IrType getType()>();

        $r3 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.ir.expressions.IrExpressionBody getDefaultValue()>();

        if $r3 != null goto label1;

        return r2;

     label1:
        $z0 = staticinvoke <org.jetbrains.kotlin.ir.types.IrTypePredicatesKt: boolean isPrimitiveType(org.jetbrains.kotlin.ir.types.IrType)>(r2);

        if $z0 == 0 goto label2;

        $r4 = r2;

        goto label4;

     label2:
        $z1 = staticinvoke <org.jetbrains.kotlin.ir.util.InlineClassesKt: boolean isInlined(org.jetbrains.kotlin.ir.types.IrType)>(r2);

        if $z1 == 0 goto label3;

        $r4 = r2;

        goto label4;

     label3:
        $r4 = staticinvoke <org.jetbrains.kotlin.ir.types.IrTypesKt: org.jetbrains.kotlin.ir.types.IrType makeNullable(org.jetbrains.kotlin.ir.types.IrType)>(r2);

     label4:
        return $r4;
    }

    public final boolean isInlineParameterLambdaInvoke(org.jetbrains.kotlin.ir.expressions.IrCall)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer r0;
        org.jetbrains.kotlin.ir.expressions.IrCall $r1;
        org.jetbrains.kotlin.ir.expressions.IrGetValue r2;
        org.jetbrains.kotlin.ir.declarations.IrValueParameter r3;
        org.jetbrains.kotlin.ir.expressions.IrStatementOrigin $r4;
        org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$INVOKE $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.jetbrains.kotlin.ir.symbols.IrValueSymbol $r6;
        org.jetbrains.kotlin.ir.declarations.IrValueDeclaration $r7, $r11;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r9;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrCall;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$isInlineParameterLambdaInvoke");

        $r4 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.expressions.IrStatementOrigin getOrigin()>();

        $r5 = <org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$INVOKE: org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$INVOKE INSTANCE>;

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, $r5);

        $z1 = $z0 ^ 1;

        if $z1 == 0 goto label1;

        return 0;

     label1:
        $r9 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.expressions.IrExpression getDispatchReceiver()>();

        $z2 = $r9 instanceof org.jetbrains.kotlin.ir.expressions.IrGetValue;

        if $z2 != 0 goto label2;

        $r9 = null;

     label2:
        r2 = (org.jetbrains.kotlin.ir.expressions.IrGetValue) $r9;

        if r2 == null goto label3;

        $r6 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.expressions.IrGetValue: org.jetbrains.kotlin.ir.symbols.IrValueSymbol getSymbol()>();

        if $r6 == null goto label3;

        $r7 = interfaceinvoke $r6.<org.jetbrains.kotlin.ir.symbols.IrValueSymbol: org.jetbrains.kotlin.ir.declarations.IrValueDeclaration getOwner()>();

        $r11 = $r7;

        goto label4;

     label3:
        $r11 = null;

     label4:
        $z4 = $r11 instanceof org.jetbrains.kotlin.ir.declarations.IrValueParameter;

        if $z4 != 0 goto label5;

        $r11 = null;

     label5:
        r3 = (org.jetbrains.kotlin.ir.declarations.IrValueParameter) $r11;

        if r3 == null goto label6;

        $z3 = staticinvoke <org.jetbrains.kotlin.backend.jvm.ir.IrUtilsKt: boolean isInlineParameter(org.jetbrains.kotlin.ir.declarations.IrValueParameter)>(r3);

        if $z3 != 1 goto label6;

        $z5 = 1;

        goto label7;

     label6:
        $z5 = 0;

     label7:
        return $z5;
    }

    private final boolean isComposableLambdaInvoke(org.jetbrains.kotlin.ir.expressions.IrCall)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer r0;
        org.jetbrains.kotlin.ir.expressions.IrCall $r1;
        boolean $z0, $z1, $z2;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r2;
        org.jetbrains.kotlin.ir.types.IrType $r3;
        org.jetbrains.kotlin.ir.declarations.IrAnnotationContainer $r4;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrCall;

        $z0 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: boolean isInvoke(org.jetbrains.kotlin.ir.expressions.IrCall)>($r1);

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.expressions.IrExpression getDispatchReceiver()>();

        if $r2 == null goto label1;

        $r3 = interfaceinvoke $r2.<org.jetbrains.kotlin.ir.expressions.IrExpression: org.jetbrains.kotlin.ir.types.IrType getType()>();

        if $r3 == null goto label1;

        $r4 = (org.jetbrains.kotlin.ir.declarations.IrAnnotationContainer) $r3;

        $z1 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: boolean hasComposableAnnotation(org.jetbrains.kotlin.ir.declarations.IrAnnotationContainer)>($r4);

        if $z1 != 1 goto label3;

        goto label2;

     label1:
        goto label3;

     label2:
        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;
    }

    private final boolean isNonComposableInlinedLambda(org.jetbrains.kotlin.ir.declarations.IrFunction)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer r0;
        org.jetbrains.kotlin.ir.declarations.IrFunction $r1;
        org.jetbrains.kotlin.com.intellij.psi.PsiElement r2, r3, $r9, $r17;
        boolean z0, z1, z3, z4, $z6, $z7, $z8;
        org.jetbrains.kotlin.psi.KtFunctionLiteral r4, r5, $r10;
        org.jetbrains.kotlin.descriptors.ValueParameterDescriptor r6, $r15;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r7;
        org.jetbrains.kotlin.descriptors.DeclarationDescriptor $r8;
        org.jetbrains.kotlin.psi.KtFunction $r12;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r13;
        org.jetbrains.kotlin.resolve.BindingContext $r14;
        org.jetbrains.kotlin.types.KotlinType $r16;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrFunction;

        $r7 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.descriptors.FunctionDescriptor getDescriptor()>();

        $r8 = (org.jetbrains.kotlin.descriptors.DeclarationDescriptor) $r7;

        $r9 = staticinvoke <org.jetbrains.kotlin.js.resolve.diagnostics.SourceLocationUtilsKt: org.jetbrains.kotlin.com.intellij.psi.PsiElement findPsi(org.jetbrains.kotlin.descriptors.DeclarationDescriptor)>($r8);

        if $r9 == null goto label7;

        r2 = $r9;

        z0 = 0;

        z1 = 0;

        r3 = r2;

        $r17 = r3;

        $z6 = r3 instanceof org.jetbrains.kotlin.psi.KtFunctionLiteral;

        if $z6 != 0 goto label1;

        $r17 = null;

     label1:
        $r10 = (org.jetbrains.kotlin.psi.KtFunctionLiteral) $r17;

        if $r10 == null goto label6;

        r4 = $r10;

        z3 = 0;

        z4 = 0;

        r5 = r4;

        $r12 = (org.jetbrains.kotlin.psi.KtFunction) r5;

        $r13 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        $r14 = interfaceinvoke $r13.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.resolve.BindingContext getBindingContext()>();

        $r15 = staticinvoke <org.jetbrains.kotlin.resolve.inline.InlineUtil: org.jetbrains.kotlin.descriptors.ValueParameterDescriptor getInlineArgumentDescriptor(org.jetbrains.kotlin.psi.KtFunction,org.jetbrains.kotlin.resolve.BindingContext)>($r12, $r14);

        if $r15 == null goto label2;

        goto label3;

     label2:
        return 0;

     label3:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r15, "InlineUtil.getInlineArgu\u2026        ) ?: return false");

        r6 = $r15;

        $r16 = interfaceinvoke r6.<org.jetbrains.kotlin.descriptors.ValueParameterDescriptor: org.jetbrains.kotlin.types.KotlinType getType()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r16, "arg.type");

        $z7 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeFqNamesKt: boolean hasComposableAnnotation(org.jetbrains.kotlin.types.KotlinType)>($r16);

        if $z7 != 0 goto label4;

        $z8 = 1;

        goto label5;

     label4:
        $z8 = 0;

     label5:
        return $z8;

     label6:
        goto label7;

     label7:
        return 0;
    }

    public void <init>(org.jetbrains.kotlin.backend.common.extensions.IrPluginContext, org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper, org.jetbrains.kotlin.resolve.BindingTrace)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer r0;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext r1;
        org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper r2;
        org.jetbrains.kotlin.resolve.BindingTrace r3;
        java.util.LinkedHashMap $r4;
        java.util.Map $r5;
        java.util.LinkedHashSet $r6;
        java.util.Set $r7;
        org.jetbrains.kotlin.descriptors.ClassDescriptor $r8;
        org.jetbrains.kotlin.types.SimpleType $r9;
        org.jetbrains.kotlin.types.KotlinType $r10, $r11;
        org.jetbrains.kotlin.ir.types.IrType $r12;
        boolean z0, z1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext;

        r2 := @parameter1: org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper;

        r3 := @parameter2: org.jetbrains.kotlin.resolve.BindingTrace;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "context");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "symbolRemapper");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "bindingTrace");

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: void <init>(org.jetbrains.kotlin.backend.common.extensions.IrPluginContext,org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper,org.jetbrains.kotlin.resolve.BindingTrace)>(r1, r2, r3);

        z0 = 0;

        $r4 = new java.util.LinkedHashMap;

        specialinvoke $r4.<java.util.LinkedHashMap: void <init>()>();

        $r5 = (java.util.Map) $r4;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: java.util.Map transformedFunctions> = $r5;

        z1 = 0;

        $r6 = new java.util.LinkedHashSet;

        specialinvoke $r6.<java.util.LinkedHashSet: void <init>()>();

        $r7 = (java.util.Set) $r6;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: java.util.Set transformedFunctionSet> = $r7;

        $r8 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.descriptors.ClassDescriptor getComposerTypeDescriptor()>();

        $r9 = interfaceinvoke $r8.<org.jetbrains.kotlin.descriptors.ClassDescriptor: org.jetbrains.kotlin.types.SimpleType getDefaultType()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r9, "composerTypeDescriptor\n        .defaultType");

        $r10 = (org.jetbrains.kotlin.types.KotlinType) $r9;

        $r11 = staticinvoke <org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt: org.jetbrains.kotlin.types.KotlinType replaceArgumentsWithStarProjections(org.jetbrains.kotlin.types.KotlinType)>($r10);

        $r12 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.ir.types.IrType toIrType(org.jetbrains.kotlin.types.KotlinType)>($r11);

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.ir.types.IrType composerType> = $r12;

        return;
    }

androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1
<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1: boolean isNestedScope>
<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1: java.util.Map $valueParametersMapping>
<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1: org.jetbrains.kotlin.ir.declarations.IrFunction $oldFn>
<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1: org.jetbrains.kotlin.ir.declarations.IrSimpleFunction $fn>
<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1: org.jetbrains.kotlin.ir.declarations.IrValueParameter $composerParam>
<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1: androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer this$0>
<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1: org.jetbrains.kotlin.ir.declarations.IrFunction $this_copyWithComposerParam$inlined>
    void <init>(java.util.Map, org.jetbrains.kotlin.ir.declarations.IrFunction, org.jetbrains.kotlin.ir.declarations.IrSimpleFunction, org.jetbrains.kotlin.ir.declarations.IrValueParameter, androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer, org.jetbrains.kotlin.ir.declarations.IrFunction)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1 r0;
        java.util.Map $r1;
        org.jetbrains.kotlin.ir.declarations.IrFunction $r2, r6;
        org.jetbrains.kotlin.ir.declarations.IrSimpleFunction $r3;
        org.jetbrains.kotlin.ir.declarations.IrValueParameter $r4;
        androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer r5;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1;

        $r1 := @parameter0: java.util.Map;

        $r2 := @parameter1: org.jetbrains.kotlin.ir.declarations.IrFunction;

        $r3 := @parameter2: org.jetbrains.kotlin.ir.declarations.IrSimpleFunction;

        $r4 := @parameter3: org.jetbrains.kotlin.ir.declarations.IrValueParameter;

        r5 := @parameter4: androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer;

        r6 := @parameter5: org.jetbrains.kotlin.ir.declarations.IrFunction;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1: java.util.Map $valueParametersMapping> = $r1;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1: org.jetbrains.kotlin.ir.declarations.IrFunction $oldFn> = $r2;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1: org.jetbrains.kotlin.ir.declarations.IrSimpleFunction $fn> = $r3;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1: org.jetbrains.kotlin.ir.declarations.IrValueParameter $composerParam> = $r4;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1: androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer this$0> = r5;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1: org.jetbrains.kotlin.ir.declarations.IrFunction $this_copyWithComposerParam$inlined> = r6;

        specialinvoke r0.<org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid: void <init>()>();

        return;
    }

    public final boolean isNestedScope()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1 r0;
        boolean $z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1;

        $z0 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1: boolean isNestedScope>;

        return $z0;
    }

    public final void setNestedScope(boolean)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1 r0;
        boolean z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1;

        z0 := @parameter0: boolean;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1: boolean isNestedScope> = z0;

        return;
    }

    public org.jetbrains.kotlin.ir.expressions.IrGetValue visitGetValue(org.jetbrains.kotlin.ir.expressions.IrGetValue)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1 r0;
        org.jetbrains.kotlin.ir.expressions.IrGetValue r1, $r11;
        java.util.Map r2;
        org.jetbrains.kotlin.ir.declarations.IrValueDeclaration r3;
        boolean z0;
        org.jetbrains.kotlin.ir.declarations.IrValueParameter r4;
        org.jetbrains.kotlin.ir.symbols.IrValueSymbol $r5, $r9;
        java.lang.Object $r6;
        org.jetbrains.kotlin.ir.expressions.impl.IrGetValueImpl $r7;
        int $i0, $i1;
        org.jetbrains.kotlin.ir.types.IrType $r8;
        org.jetbrains.kotlin.ir.expressions.IrStatementOrigin $r10;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrGetValue;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "expression");

        r2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1: java.util.Map $valueParametersMapping>;

        $r5 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrGetValue: org.jetbrains.kotlin.ir.symbols.IrValueSymbol getSymbol()>();

        r3 = interfaceinvoke $r5.<org.jetbrains.kotlin.ir.symbols.IrValueSymbol: org.jetbrains.kotlin.ir.declarations.IrValueDeclaration getOwner()>();

        z0 = 0;

        $r6 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        r4 = (org.jetbrains.kotlin.ir.declarations.IrValueParameter) $r6;

        if r4 == null goto label1;

        $r7 = new org.jetbrains.kotlin.ir.expressions.impl.IrGetValueImpl;

        $i0 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrGetValue: int getStartOffset()>();

        $i1 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrGetValue: int getEndOffset()>();

        $r8 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrGetValue: org.jetbrains.kotlin.ir.types.IrType getType()>();

        $r9 = interfaceinvoke r4.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.ir.symbols.IrValueSymbol getSymbol()>();

        $r10 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrGetValue: org.jetbrains.kotlin.ir.expressions.IrStatementOrigin getOrigin()>();

        specialinvoke $r7.<org.jetbrains.kotlin.ir.expressions.impl.IrGetValueImpl: void <init>(int,int,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.symbols.IrValueSymbol,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin)>($i0, $i1, $r8, $r9, $r10);

        $r11 = (org.jetbrains.kotlin.ir.expressions.IrGetValue) $r7;

        goto label2;

     label1:
        $r11 = r1;

     label2:
        return $r11;
    }

    public volatile org.jetbrains.kotlin.ir.expressions.IrExpression visitGetValue(org.jetbrains.kotlin.ir.expressions.IrGetValue)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1 r0;
        org.jetbrains.kotlin.ir.expressions.IrGetValue r1, $r2;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r3;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrGetValue;

        $r2 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1: org.jetbrains.kotlin.ir.expressions.IrGetValue visitGetValue(org.jetbrains.kotlin.ir.expressions.IrGetValue)>(r1);

        $r3 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r2;

        return $r3;
    }

    public org.jetbrains.kotlin.ir.expressions.IrExpression visitReturn(org.jetbrains.kotlin.ir.expressions.IrReturn)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1 r0;
        org.jetbrains.kotlin.ir.expressions.IrReturn r1, $r16;
        androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer $r2, $r7;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r3, $r8;
        org.jetbrains.kotlin.ir.symbols.IrReturnTargetSymbol $r4, $r14;
        org.jetbrains.kotlin.ir.declarations.IrFunction $r5;
        org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol $r6, $r13;
        boolean $z0;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r9, $r15, $r17;
        org.jetbrains.kotlin.ir.expressions.impl.IrReturnImpl $r10;
        int $i0, $i1;
        org.jetbrains.kotlin.ir.types.IrType $r11;
        org.jetbrains.kotlin.ir.declarations.IrSimpleFunction $r12;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrReturn;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "expression");

        $r2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1: androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer this$0>;

        $r3 = virtualinvoke $r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeIrGenerationExtensionKt: void generateSymbols(org.jetbrains.kotlin.backend.common.extensions.IrPluginContext)>($r3);

        $r4 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrReturn: org.jetbrains.kotlin.ir.symbols.IrReturnTargetSymbol getReturnTargetSymbol()>();

        $r5 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1: org.jetbrains.kotlin.ir.declarations.IrFunction $oldFn>;

        $r6 = interfaceinvoke $r5.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getSymbol()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, $r6);

        if $z0 == 0 goto label1;

        $r10 = new org.jetbrains.kotlin.ir.expressions.impl.IrReturnImpl;

        $i0 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrReturn: int getStartOffset()>();

        $i1 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrReturn: int getEndOffset()>();

        $r11 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrReturn: org.jetbrains.kotlin.ir.types.IrType getType()>();

        $r12 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1: org.jetbrains.kotlin.ir.declarations.IrSimpleFunction $fn>;

        $r13 = interfaceinvoke $r12.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getSymbol()>();

        $r14 = (org.jetbrains.kotlin.ir.symbols.IrReturnTargetSymbol) $r13;

        $r15 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrReturn: org.jetbrains.kotlin.ir.expressions.IrExpression getValue()>();

        specialinvoke $r10.<org.jetbrains.kotlin.ir.expressions.impl.IrReturnImpl: void <init>(int,int,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.symbols.IrReturnTargetSymbol,org.jetbrains.kotlin.ir.expressions.IrExpression)>($i0, $i1, $r11, $r14, $r15);

        $r16 = (org.jetbrains.kotlin.ir.expressions.IrReturn) $r10;

        $r17 = specialinvoke r0.<org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid: org.jetbrains.kotlin.ir.expressions.IrExpression visitReturn(org.jetbrains.kotlin.ir.expressions.IrReturn)>($r16);

        return $r17;

     label1:
        $r7 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1: androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer this$0>;

        $r8 = virtualinvoke $r7.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeIrGenerationExtensionKt: void generateSymbols(org.jetbrains.kotlin.backend.common.extensions.IrPluginContext)>($r8);

        $r9 = specialinvoke r0.<org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid: org.jetbrains.kotlin.ir.expressions.IrExpression visitReturn(org.jetbrains.kotlin.ir.expressions.IrReturn)>(r1);

        return $r9;
    }

    public org.jetbrains.kotlin.ir.IrStatement visitFunction(org.jetbrains.kotlin.ir.declarations.IrFunction)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1 r0;
        org.jetbrains.kotlin.ir.declarations.IrFunction r1;
        boolean z0, $z1, $z2;
        androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer $r2, $r4;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r3;
        java.lang.Throwable $r6, r8;
        org.jetbrains.kotlin.ir.IrStatement r7;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1;

        r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrFunction;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "declaration");

        $r2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1: androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer this$0>;

        $r3 = virtualinvoke $r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeIrGenerationExtensionKt: void generateSymbols(org.jetbrains.kotlin.backend.common.extensions.IrPluginContext)>($r3);

        z0 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1: boolean isNestedScope>;

     label1:
        $r4 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1: androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer this$0>;

        $z1 = virtualinvoke $r4.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: boolean isInlinedLambda(org.jetbrains.kotlin.ir.declarations.IrFunction)>(r1);

        if $z1 == 0 goto label2;

        $z2 = z0;

        goto label3;

     label2:
        $z2 = 1;

     label3:
        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1: boolean isNestedScope> = $z2;

        r7 = specialinvoke r0.<org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid: org.jetbrains.kotlin.ir.IrStatement visitFunction(org.jetbrains.kotlin.ir.declarations.IrFunction)>(r1);

     label4:
        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1: boolean isNestedScope> = z0;

        return r7;

     label5:
        $r6 := @caughtexception;

        r8 = $r6;

     label6:
        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1: boolean isNestedScope> = z0;

        throw r8;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public org.jetbrains.kotlin.ir.expressions.IrExpression visitCall(org.jetbrains.kotlin.ir.expressions.IrCall)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1 r0;
        org.jetbrains.kotlin.ir.expressions.IrCall r1, r2, $r8;
        boolean $z0;
        androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer $r3, $r7;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r4;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r5;
        org.jetbrains.kotlin.ir.declarations.IrValueParameter $r6;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrCall;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "expression");

        $z0 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1: boolean isNestedScope>;

        if $z0 != 0 goto label1;

        $r7 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1: androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer this$0>;

        $r6 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1: org.jetbrains.kotlin.ir.declarations.IrValueParameter $composerParam>;

        $r8 = virtualinvoke $r7.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.ir.expressions.IrCall withComposerParamIfNeeded(org.jetbrains.kotlin.ir.expressions.IrCall,org.jetbrains.kotlin.ir.declarations.IrValueParameter)>(r1, $r6);

        goto label2;

     label1:
        $r8 = r1;

     label2:
        r2 = $r8;

        $r3 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer$copyWithComposerParam$$inlined$also$lambda$1: androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer this$0>;

        $r4 = virtualinvoke $r3.<androidx.compose.compiler.plugins.kotlin.lower.ComposerParamTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeIrGenerationExtensionKt: void generateSymbols(org.jetbrains.kotlin.backend.common.extensions.IrPluginContext)>($r4);

        $r5 = specialinvoke r0.<org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid: org.jetbrains.kotlin.ir.expressions.IrExpression visitCall(org.jetbrains.kotlin.ir.expressions.IrCall)>(r2);

        return $r5;
    }

