androidx.test.services.events.platform.TestRunFinishedEvent
<androidx.test.services.events.platform.TestRunFinishedEvent: androidx.test.services.events.TestRunInfo testRun>
<androidx.test.services.events.platform.TestRunFinishedEvent: androidx.test.services.events.TestStatus runStatus>
<androidx.test.services.events.platform.TestRunFinishedEvent: androidx.test.services.events.TimeStamp timeStamp>
    androidx.test.services.events.platform.TestPlatformEvent$EventType instanceType()
    {
        androidx.test.services.events.platform.TestRunFinishedEvent r0;
        androidx.test.services.events.platform.TestPlatformEvent$EventType $r1;

        r0 := @this: androidx.test.services.events.platform.TestRunFinishedEvent;

        $r1 = <androidx.test.services.events.platform.TestPlatformEvent$EventType: androidx.test.services.events.platform.TestPlatformEvent$EventType TEST_RUN_FINISHED>;

        return $r1;
    }

    void <init>(android.os.Parcel)
    {
        androidx.test.services.events.platform.TestRunFinishedEvent r0;
        android.os.Parcel r1;
        androidx.test.services.events.TestRunInfo $r2;
        androidx.test.services.events.TestStatus $r3;
        androidx.test.services.events.TimeStamp $r4;

        r0 := @this: androidx.test.services.events.platform.TestRunFinishedEvent;

        r1 := @parameter0: android.os.Parcel;

        specialinvoke r0.<androidx.test.services.events.platform.TestPlatformEvent: void <init>()>();

        $r2 = new androidx.test.services.events.TestRunInfo;

        specialinvoke $r2.<androidx.test.services.events.TestRunInfo: void <init>(android.os.Parcel)>(r1);

        r0.<androidx.test.services.events.platform.TestRunFinishedEvent: androidx.test.services.events.TestRunInfo testRun> = $r2;

        $r3 = new androidx.test.services.events.TestStatus;

        specialinvoke $r3.<androidx.test.services.events.TestStatus: void <init>(android.os.Parcel)>(r1);

        r0.<androidx.test.services.events.platform.TestRunFinishedEvent: androidx.test.services.events.TestStatus runStatus> = $r3;

        $r4 = new androidx.test.services.events.TimeStamp;

        specialinvoke $r4.<androidx.test.services.events.TimeStamp: void <init>(android.os.Parcel)>(r1);

        r0.<androidx.test.services.events.platform.TestRunFinishedEvent: androidx.test.services.events.TimeStamp timeStamp> = $r4;

        return;
    }

    public void <init>(androidx.test.services.events.TestRunInfo, androidx.test.services.events.TestStatus, androidx.test.services.events.TimeStamp)
    {
        androidx.test.services.events.platform.TestRunFinishedEvent r0;
        androidx.test.services.events.TestRunInfo r1, $r5;
        androidx.test.services.events.TestStatus r2, $r7;
        androidx.test.services.events.TimeStamp r3, $r9;
        java.lang.Object $r4, $r6, $r8;

        r0 := @this: androidx.test.services.events.platform.TestRunFinishedEvent;

        r1 := @parameter0: androidx.test.services.events.TestRunInfo;

        r2 := @parameter1: androidx.test.services.events.TestStatus;

        r3 := @parameter2: androidx.test.services.events.TimeStamp;

        specialinvoke r0.<androidx.test.services.events.platform.TestPlatformEvent: void <init>()>();

        $r4 = staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "testRun cannot be null");

        $r5 = (androidx.test.services.events.TestRunInfo) $r4;

        r0.<androidx.test.services.events.platform.TestRunFinishedEvent: androidx.test.services.events.TestRunInfo testRun> = $r5;

        $r6 = staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "runStatus cannot be null");

        $r7 = (androidx.test.services.events.TestStatus) $r6;

        r0.<androidx.test.services.events.platform.TestRunFinishedEvent: androidx.test.services.events.TestStatus runStatus> = $r7;

        $r8 = staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r3, "timeStamp cannot be null");

        $r9 = (androidx.test.services.events.TimeStamp) $r8;

        r0.<androidx.test.services.events.platform.TestRunFinishedEvent: androidx.test.services.events.TimeStamp timeStamp> = $r9;

        return;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        androidx.test.services.events.platform.TestRunFinishedEvent r0;
        android.os.Parcel r1;
        int i0;
        androidx.test.services.events.TestRunInfo $r2;
        androidx.test.services.events.TestStatus $r3;
        androidx.test.services.events.TimeStamp $r4;

        r0 := @this: androidx.test.services.events.platform.TestRunFinishedEvent;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        specialinvoke r0.<androidx.test.services.events.platform.TestPlatformEvent: void writeToParcel(android.os.Parcel,int)>(r1, i0);

        $r2 = r0.<androidx.test.services.events.platform.TestRunFinishedEvent: androidx.test.services.events.TestRunInfo testRun>;

        virtualinvoke $r2.<androidx.test.services.events.TestRunInfo: void writeToParcel(android.os.Parcel,int)>(r1, i0);

        $r3 = r0.<androidx.test.services.events.platform.TestRunFinishedEvent: androidx.test.services.events.TestStatus runStatus>;

        virtualinvoke $r3.<androidx.test.services.events.TestStatus: void writeToParcel(android.os.Parcel,int)>(r1, i0);

        $r4 = r0.<androidx.test.services.events.platform.TestRunFinishedEvent: androidx.test.services.events.TimeStamp timeStamp>;

        virtualinvoke $r4.<androidx.test.services.events.TimeStamp: void writeToParcel(android.os.Parcel,int)>(r1, i0);

        return;
    }

