com.google.testing.platform.core.telemetry.android.opencensus.exporter.SpanDataWrapper
<com.google.testing.platform.core.telemetry.android.opencensus.exporter.SpanDataWrapper: com.google.testing.platform.core.telemetry.android.opencensus.exporter.SpanDataWrapper$Companion Companion>
    static void <clinit>()
    {
        com.google.testing.platform.core.telemetry.android.opencensus.exporter.SpanDataWrapper$Companion $r0;

        $r0 = new com.google.testing.platform.core.telemetry.android.opencensus.exporter.SpanDataWrapper$Companion;

        specialinvoke $r0.<com.google.testing.platform.core.telemetry.android.opencensus.exporter.SpanDataWrapper$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <com.google.testing.platform.core.telemetry.android.opencensus.exporter.SpanDataWrapper: com.google.testing.platform.core.telemetry.android.opencensus.exporter.SpanDataWrapper$Companion Companion> = $r0;

        return;
    }

com.google.testing.platform.core.telemetry.android.opencensus.exporter.SpanDataWrapper$Companion
    private void <init>()
    {
        com.google.testing.platform.core.telemetry.android.opencensus.exporter.SpanDataWrapper$Companion $r0;

        $r0 := @this: com.google.testing.platform.core.telemetry.android.opencensus.exporter.SpanDataWrapper$Companion;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        com.google.testing.platform.core.telemetry.android.opencensus.exporter.SpanDataWrapper$Companion $r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        $r0 := @this: com.google.testing.platform.core.telemetry.android.opencensus.exporter.SpanDataWrapper$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke $r0.<com.google.testing.platform.core.telemetry.android.opencensus.exporter.SpanDataWrapper$Companion: void <init>()>();

        return;
    }

    public final java.util.List readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        com.google.testing.platform.core.telemetry.android.opencensus.exporter.SpanDataWrapper$Companion $r0;
        java.io.ObjectInputStream $r1;
        java.util.ArrayList $r2, r26;
        int $i0, $i1, $i3;
        java.lang.Object $r3;
        java.lang.String $r4;
        byte[] $r5, $r6, $r10;
        java.lang.Long $r7;
        long $l2;
        java.lang.Integer $r8;
        io.opencensus.common.Timestamp $r9, $r11;
        io.opencensus.trace.TraceId $r12;
        io.opencensus.trace.SpanId $r13;
        io.opencensus.trace.TraceOptions $r14;
        io.opencensus.trace.Tracestate$Builder $r15;
        io.opencensus.trace.Tracestate $r16;
        io.opencensus.trace.SpanContext $r17;
        java.util.List $r18;
        io.opencensus.trace.export.SpanData$TimedEvents $r19, $r22;
        java.util.Map $r20;
        io.opencensus.trace.export.SpanData$Attributes $r21;
        io.opencensus.trace.export.SpanData$Links $r23;
        java.lang.Boolean $r24;
        io.opencensus.trace.export.SpanData $r25;

        $r0 := @this: com.google.testing.platform.core.telemetry.android.opencensus.exporter.SpanDataWrapper$Companion;

        $r1 := @parameter0: java.io.ObjectInputStream;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "ois");

        r26 = new java.util.ArrayList;

        $r2 = r26;

        specialinvoke r26.<java.util.ArrayList: void <init>()>();

        $i0 = virtualinvoke $r1.<java.io.ObjectInputStream: int readInt()>();

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label8;

        $r3 = virtualinvoke $r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r3, "null cannot be cast to non-null type kotlin.String");

        $r4 = (java.lang.String) $r3;

        $r3 = virtualinvoke $r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r3, "null cannot be cast to non-null type kotlin.ByteArray");

        $r5 = (byte[]) $r3;

        $r3 = virtualinvoke $r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r3, "null cannot be cast to non-null type kotlin.ByteArray");

        $r6 = (byte[]) $r3;

        $r3 = virtualinvoke $r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r3, "null cannot be cast to non-null type kotlin.Long");

        $r7 = (java.lang.Long) $r3;

        $l2 = virtualinvoke $r7.<java.lang.Long: long longValue()>();

        $r3 = virtualinvoke $r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r3, "null cannot be cast to non-null type kotlin.Int");

        $r8 = (java.lang.Integer) $r3;

        $i3 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        $r9 = staticinvoke <io.opencensus.common.Timestamp: io.opencensus.common.Timestamp create(long,int)>($l2, $i3);

        $r3 = virtualinvoke $r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r10 = (byte[]) $r3;

        $r3 = virtualinvoke $r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r7 = (java.lang.Long) $r3;

        $r3 = virtualinvoke $r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r8 = (java.lang.Integer) $r3;

        if $r7 == null goto label2;

        $l2 = virtualinvoke $r7.<java.lang.Long: long longValue()>();

        goto label3;

     label2:
        $l2 = 0L;

     label3:
        if $r8 == null goto label4;

        $i3 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        goto label5;

     label4:
        $i3 = 0;

     label5:
        $r11 = staticinvoke <io.opencensus.common.Timestamp: io.opencensus.common.Timestamp create(long,int)>($l2, $i3);

        $r12 = staticinvoke <io.opencensus.trace.TraceId: io.opencensus.trace.TraceId fromBytes(byte[])>($r5);

        $r13 = staticinvoke <io.opencensus.trace.SpanId: io.opencensus.trace.SpanId fromBytes(byte[])>($r6);

        $r14 = <io.opencensus.trace.TraceOptions: io.opencensus.trace.TraceOptions DEFAULT>;

        $r15 = staticinvoke <io.opencensus.trace.Tracestate: io.opencensus.trace.Tracestate$Builder builder()>();

        $r16 = virtualinvoke $r15.<io.opencensus.trace.Tracestate$Builder: io.opencensus.trace.Tracestate build()>();

        $r17 = staticinvoke <io.opencensus.trace.SpanContext: io.opencensus.trace.SpanContext create(io.opencensus.trace.TraceId,io.opencensus.trace.SpanId,io.opencensus.trace.TraceOptions,io.opencensus.trace.Tracestate)>($r12, $r13, $r14, $r16);

        $r18 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        $r19 = staticinvoke <io.opencensus.trace.export.SpanData$TimedEvents: io.opencensus.trace.export.SpanData$TimedEvents create(java.util.List,int)>($r18, 0);

        $r20 = staticinvoke <kotlin.collections.MapsKt: java.util.Map emptyMap()>();

        $r21 = staticinvoke <io.opencensus.trace.export.SpanData$Attributes: io.opencensus.trace.export.SpanData$Attributes create(java.util.Map,int)>($r20, 0);

        $r18 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        $r22 = staticinvoke <io.opencensus.trace.export.SpanData$TimedEvents: io.opencensus.trace.export.SpanData$TimedEvents create(java.util.List,int)>($r18, 0);

        $r18 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        $r23 = staticinvoke <io.opencensus.trace.export.SpanData$Links: io.opencensus.trace.export.SpanData$Links create(java.util.List,int)>($r18, 0);

        if $r10 == null goto label6;

        $r13 = staticinvoke <io.opencensus.trace.SpanId: io.opencensus.trace.SpanId fromBytes(byte[])>($r10);

        goto label7;

     label6:
        $r13 = null;

     label7:
        $r24 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r25 = staticinvoke <io.opencensus.trace.export.SpanData: io.opencensus.trace.export.SpanData create(io.opencensus.trace.SpanContext,io.opencensus.trace.SpanId,java.lang.Boolean,java.lang.String,io.opencensus.trace.Span$Kind,io.opencensus.common.Timestamp,io.opencensus.trace.export.SpanData$Attributes,io.opencensus.trace.export.SpanData$TimedEvents,io.opencensus.trace.export.SpanData$TimedEvents,io.opencensus.trace.export.SpanData$Links,java.lang.Integer,io.opencensus.trace.Status,io.opencensus.common.Timestamp)>($r17, $r13, $r24, $r4, null, $r9, $r21, $r22, $r19, $r23, null, null, $r11);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r25, "create(\n            span\u2026 endTimeStamp\n          )");

        $r18 = (java.util.List) $r2;

        interfaceinvoke $r18.<java.util.List: boolean add(java.lang.Object)>($r25);

        $i1 = $i1 + 1;

        goto label1;

     label8:
        $r18 = (java.util.List) $r2;

        return $r18;
    }

