androidx.compose.ui.node.OnPositionedDispatcher
<androidx.compose.ui.node.OnPositionedDispatcher: androidx.compose.ui.node.OnPositionedDispatcher$Companion Companion>
<androidx.compose.ui.node.OnPositionedDispatcher: androidx.compose.runtime.collection.MutableVector layoutNodes>
    public void <init>()
    {
        androidx.compose.ui.node.OnPositionedDispatcher r0;
        byte b0;
        androidx.compose.runtime.collection.MutableVector $r1;
        androidx.compose.ui.node.LayoutNode[] $r2;

        r0 := @this: androidx.compose.ui.node.OnPositionedDispatcher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        b0 = 16;

        $r1 = new androidx.compose.runtime.collection.MutableVector;

        $r2 = newarray (androidx.compose.ui.node.LayoutNode)[b0];

        specialinvoke $r1.<androidx.compose.runtime.collection.MutableVector: void <init>(java.lang.Object[],int)>($r2, 0);

        r0.<androidx.compose.ui.node.OnPositionedDispatcher: androidx.compose.runtime.collection.MutableVector layoutNodes> = $r1;

        return;
    }

    public final void onNodePositioned(androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.node.OnPositionedDispatcher r0;
        androidx.compose.ui.node.LayoutNode r1;
        androidx.compose.runtime.collection.MutableVector r2;

        r0 := @this: androidx.compose.ui.node.OnPositionedDispatcher;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "node");

        r2 = r0.<androidx.compose.ui.node.OnPositionedDispatcher: androidx.compose.runtime.collection.MutableVector layoutNodes>;

        virtualinvoke r2.<androidx.compose.runtime.collection.MutableVector: boolean add(java.lang.Object)>(r1);

        virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: void setNeedsOnPositionedDispatch$ui_release(boolean)>(1);

        return;
    }

    public final void onRootNodePositioned(androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.node.OnPositionedDispatcher r0;
        androidx.compose.ui.node.LayoutNode r1;
        androidx.compose.runtime.collection.MutableVector r2, $r3;

        r0 := @this: androidx.compose.ui.node.OnPositionedDispatcher;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "rootNode");

        $r3 = r0.<androidx.compose.ui.node.OnPositionedDispatcher: androidx.compose.runtime.collection.MutableVector layoutNodes>;

        virtualinvoke $r3.<androidx.compose.runtime.collection.MutableVector: void clear()>();

        r2 = r0.<androidx.compose.ui.node.OnPositionedDispatcher: androidx.compose.runtime.collection.MutableVector layoutNodes>;

        virtualinvoke r2.<androidx.compose.runtime.collection.MutableVector: boolean add(java.lang.Object)>(r1);

        virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: void setNeedsOnPositionedDispatch$ui_release(boolean)>(1);

        return;
    }

    public final void dispatch()
    {
        androidx.compose.ui.node.OnPositionedDispatcher r0;
        androidx.compose.runtime.collection.MutableVector r1, $r6, $r7;
        int i0, i1;
        java.lang.Object[] r2, $r8;
        androidx.compose.ui.node.LayoutNode r3;
        androidx.compose.ui.node.OnPositionedDispatcher$Companion$DepthComparator $r4;
        java.util.Comparator $r5;
        java.lang.Object $r9;
        boolean $z2;

        r0 := @this: androidx.compose.ui.node.OnPositionedDispatcher;

        $r6 = r0.<androidx.compose.ui.node.OnPositionedDispatcher: androidx.compose.runtime.collection.MutableVector layoutNodes>;

        $r4 = <androidx.compose.ui.node.OnPositionedDispatcher$Companion$DepthComparator: androidx.compose.ui.node.OnPositionedDispatcher$Companion$DepthComparator INSTANCE>;

        $r5 = (java.util.Comparator) $r4;

        virtualinvoke $r6.<androidx.compose.runtime.collection.MutableVector: void sortWith(java.util.Comparator)>($r5);

        r1 = r0.<androidx.compose.ui.node.OnPositionedDispatcher: androidx.compose.runtime.collection.MutableVector layoutNodes>;

        i0 = virtualinvoke r1.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i0 <= 0 goto label3;

        i1 = i0 - 1;

        $r8 = virtualinvoke r1.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r8, "null cannot be cast to non-null type kotlin.Array<T of androidx.compose.runtime.collection.MutableVector>");

        r2 = $r8;

     label1:
        $r9 = r2[i1];

        r3 = (androidx.compose.ui.node.LayoutNode) $r9;

        $z2 = virtualinvoke r3.<androidx.compose.ui.node.LayoutNode: boolean getNeedsOnPositionedDispatch$ui_release()>();

        if $z2 == 0 goto label2;

        specialinvoke r0.<androidx.compose.ui.node.OnPositionedDispatcher: void dispatchHierarchy(androidx.compose.ui.node.LayoutNode)>(r3);

     label2:
        i1 = i1 + -1;

        if i1 >= 0 goto label1;

     label3:
        $r7 = r0.<androidx.compose.ui.node.OnPositionedDispatcher: androidx.compose.runtime.collection.MutableVector layoutNodes>;

        virtualinvoke $r7.<androidx.compose.runtime.collection.MutableVector: void clear()>();

        return;
    }

    private final void dispatchHierarchy(androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.node.OnPositionedDispatcher r0;
        androidx.compose.ui.node.LayoutNode r1, r2, r5;
        androidx.compose.runtime.collection.MutableVector r3;
        int i0, i1;
        java.lang.Object[] r4, $r6;
        java.lang.Object $r7;

        r0 := @this: androidx.compose.ui.node.OnPositionedDispatcher;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: void dispatchOnPositionedCallbacks$ui_release()>();

        virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: void setNeedsOnPositionedDispatch$ui_release(boolean)>(0);

        r2 = r1;

        r3 = virtualinvoke r2.<androidx.compose.ui.node.LayoutNode: androidx.compose.runtime.collection.MutableVector get_children$ui_release()>();

        i0 = virtualinvoke r3.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i0 <= 0 goto label2;

        i1 = 0;

        $r6 = virtualinvoke r3.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r6, "null cannot be cast to non-null type kotlin.Array<T of androidx.compose.runtime.collection.MutableVector>");

        r4 = $r6;

     label1:
        $r7 = r4[i1];

        r5 = (androidx.compose.ui.node.LayoutNode) $r7;

        specialinvoke r0.<androidx.compose.ui.node.OnPositionedDispatcher: void dispatchHierarchy(androidx.compose.ui.node.LayoutNode)>(r5);

        i1 = i1 + 1;

        if i1 < i0 goto label1;

     label2:
        return;
    }

    static void <clinit>()
    {
        androidx.compose.ui.node.OnPositionedDispatcher$Companion $r0;

        $r0 = new androidx.compose.ui.node.OnPositionedDispatcher$Companion;

        specialinvoke $r0.<androidx.compose.ui.node.OnPositionedDispatcher$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.compose.ui.node.OnPositionedDispatcher: androidx.compose.ui.node.OnPositionedDispatcher$Companion Companion> = $r0;

        return;
    }

androidx.compose.ui.node.OnPositionedDispatcher$Companion$DepthComparator
<androidx.compose.ui.node.OnPositionedDispatcher$Companion$DepthComparator: androidx.compose.ui.node.OnPositionedDispatcher$Companion$DepthComparator INSTANCE>
    private void <init>()
    {
        androidx.compose.ui.node.OnPositionedDispatcher$Companion$DepthComparator r0;

        r0 := @this: androidx.compose.ui.node.OnPositionedDispatcher$Companion$DepthComparator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int compare(androidx.compose.ui.node.LayoutNode, androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.node.OnPositionedDispatcher$Companion$DepthComparator r0;
        androidx.compose.ui.node.LayoutNode r1, r2;
        int i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: androidx.compose.ui.node.OnPositionedDispatcher$Companion$DepthComparator;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        r2 := @parameter1: androidx.compose.ui.node.LayoutNode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "a");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "b");

        $i1 = virtualinvoke r2.<androidx.compose.ui.node.LayoutNode: int getDepth$ui_release()>();

        $i2 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: int getDepth$ui_release()>();

        i0 = staticinvoke <kotlin.jvm.internal.Intrinsics: int compare(int,int)>($i1, $i2);

        if i0 == 0 goto label1;

        return i0;

     label1:
        $i3 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: int hashCode()>();

        $i4 = virtualinvoke r2.<androidx.compose.ui.node.LayoutNode: int hashCode()>();

        $i5 = staticinvoke <kotlin.jvm.internal.Intrinsics: int compare(int,int)>($i3, $i4);

        return $i5;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        androidx.compose.ui.node.OnPositionedDispatcher$Companion$DepthComparator r0;
        java.lang.Object r1, r2;
        androidx.compose.ui.node.LayoutNode $r3, $r4;
        int $i0;

        r0 := @this: androidx.compose.ui.node.OnPositionedDispatcher$Companion$DepthComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (androidx.compose.ui.node.LayoutNode) r1;

        $r3 = (androidx.compose.ui.node.LayoutNode) r2;

        $i0 = virtualinvoke r0.<androidx.compose.ui.node.OnPositionedDispatcher$Companion$DepthComparator: int compare(androidx.compose.ui.node.LayoutNode,androidx.compose.ui.node.LayoutNode)>($r4, $r3);

        return $i0;
    }

    static void <clinit>()
    {
        androidx.compose.ui.node.OnPositionedDispatcher$Companion$DepthComparator $r0;

        $r0 = new androidx.compose.ui.node.OnPositionedDispatcher$Companion$DepthComparator;

        specialinvoke $r0.<androidx.compose.ui.node.OnPositionedDispatcher$Companion$DepthComparator: void <init>()>();

        <androidx.compose.ui.node.OnPositionedDispatcher$Companion$DepthComparator: androidx.compose.ui.node.OnPositionedDispatcher$Companion$DepthComparator INSTANCE> = $r0;

        return;
    }

androidx.compose.ui.node.OnPositionedDispatcher$Companion
    private void <init>()
    {
        androidx.compose.ui.node.OnPositionedDispatcher$Companion r0;

        r0 := @this: androidx.compose.ui.node.OnPositionedDispatcher$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.compose.ui.node.OnPositionedDispatcher$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.compose.ui.node.OnPositionedDispatcher$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.compose.ui.node.OnPositionedDispatcher$Companion: void <init>()>();

        return;
    }

