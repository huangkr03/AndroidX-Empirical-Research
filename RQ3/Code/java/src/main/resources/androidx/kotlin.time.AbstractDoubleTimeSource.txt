kotlin.time.AbstractDoubleTimeSource
<kotlin.time.AbstractDoubleTimeSource: kotlin.time.DurationUnit unit>
    public void <init>(kotlin.time.DurationUnit)
    {
        kotlin.time.AbstractDoubleTimeSource $r0;
        kotlin.time.DurationUnit $r1;

        $r0 := @this: kotlin.time.AbstractDoubleTimeSource;

        $r1 := @parameter0: kotlin.time.DurationUnit;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "unit");

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<kotlin.time.AbstractDoubleTimeSource: kotlin.time.DurationUnit unit> = $r1;

        return;
    }

    protected final kotlin.time.DurationUnit getUnit()
    {
        kotlin.time.AbstractDoubleTimeSource $r0;
        kotlin.time.DurationUnit r1;

        $r0 := @this: kotlin.time.AbstractDoubleTimeSource;

        r1 = $r0.<kotlin.time.AbstractDoubleTimeSource: kotlin.time.DurationUnit unit>;

        return r1;
    }

    public kotlin.time.TimeMark markNow()
    {
        kotlin.time.AbstractDoubleTimeSource $r0;
        kotlin.time.AbstractDoubleTimeSource$DoubleTimeMark $r1;
        double $d0;
        kotlin.time.Duration$Companion $r2;
        long $l0;

        $r0 := @this: kotlin.time.AbstractDoubleTimeSource;

        $r1 = new kotlin.time.AbstractDoubleTimeSource$DoubleTimeMark;

        $d0 = virtualinvoke $r0.<kotlin.time.AbstractDoubleTimeSource: double read()>();

        $r2 = <kotlin.time.Duration: kotlin.time.Duration$Companion Companion>;

        $l0 = virtualinvoke $r2.<kotlin.time.Duration$Companion: long getZERO-UwyO8pc()>();

        specialinvoke $r1.<kotlin.time.AbstractDoubleTimeSource$DoubleTimeMark: void <init>(double,kotlin.time.AbstractDoubleTimeSource,long,kotlin.jvm.internal.DefaultConstructorMarker)>($d0, $r0, $l0, null);

        return $r1;
    }

<kotlin.time.AbstractDoubleTimeSource: double read()>
kotlin.time.AbstractDoubleTimeSource$DoubleTimeMark
<kotlin.time.AbstractDoubleTimeSource$DoubleTimeMark: long offset>
<kotlin.time.AbstractDoubleTimeSource$DoubleTimeMark: double startedAt>
<kotlin.time.AbstractDoubleTimeSource$DoubleTimeMark: kotlin.time.AbstractDoubleTimeSource timeSource>
    private void <init>(double, kotlin.time.AbstractDoubleTimeSource, long)
    {
        kotlin.time.AbstractDoubleTimeSource$DoubleTimeMark $r0;
        double $d0;
        kotlin.time.AbstractDoubleTimeSource $r1;
        long $l0;

        $r0 := @this: kotlin.time.AbstractDoubleTimeSource$DoubleTimeMark;

        $d0 := @parameter0: double;

        $r1 := @parameter1: kotlin.time.AbstractDoubleTimeSource;

        $l0 := @parameter2: long;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<kotlin.time.AbstractDoubleTimeSource$DoubleTimeMark: double startedAt> = $d0;

        $r0.<kotlin.time.AbstractDoubleTimeSource$DoubleTimeMark: kotlin.time.AbstractDoubleTimeSource timeSource> = $r1;

        $r0.<kotlin.time.AbstractDoubleTimeSource$DoubleTimeMark: long offset> = $l0;

        return;
    }

    public void <init>(double, kotlin.time.AbstractDoubleTimeSource, long, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        kotlin.time.AbstractDoubleTimeSource$DoubleTimeMark $r0;
        double $d0;
        kotlin.time.AbstractDoubleTimeSource $r1;
        long $l0;
        kotlin.jvm.internal.DefaultConstructorMarker $r2;

        $r0 := @this: kotlin.time.AbstractDoubleTimeSource$DoubleTimeMark;

        $d0 := @parameter0: double;

        $r1 := @parameter1: kotlin.time.AbstractDoubleTimeSource;

        $l0 := @parameter2: long;

        $r2 := @parameter3: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke $r0.<kotlin.time.AbstractDoubleTimeSource$DoubleTimeMark: void <init>(double,kotlin.time.AbstractDoubleTimeSource,long)>($d0, $r1, $l0);

        return;
    }

    public long elapsedNow-UwyO8pc()
    {
        kotlin.time.AbstractDoubleTimeSource$DoubleTimeMark $r0;
        kotlin.time.AbstractDoubleTimeSource $r1;
        double $d0, $d1;
        kotlin.time.DurationUnit $r2;
        long $l0, $l1;

        $r0 := @this: kotlin.time.AbstractDoubleTimeSource$DoubleTimeMark;

        $r1 = $r0.<kotlin.time.AbstractDoubleTimeSource$DoubleTimeMark: kotlin.time.AbstractDoubleTimeSource timeSource>;

        $d0 = virtualinvoke $r1.<kotlin.time.AbstractDoubleTimeSource: double read()>();

        $d1 = $r0.<kotlin.time.AbstractDoubleTimeSource$DoubleTimeMark: double startedAt>;

        $d0 = $d0 - $d1;

        $r1 = $r0.<kotlin.time.AbstractDoubleTimeSource$DoubleTimeMark: kotlin.time.AbstractDoubleTimeSource timeSource>;

        $r2 = virtualinvoke $r1.<kotlin.time.AbstractDoubleTimeSource: kotlin.time.DurationUnit getUnit()>();

        $l0 = staticinvoke <kotlin.time.DurationKt: long toDuration(double,kotlin.time.DurationUnit)>($d0, $r2);

        $l1 = $r0.<kotlin.time.AbstractDoubleTimeSource$DoubleTimeMark: long offset>;

        $l0 = staticinvoke <kotlin.time.Duration: long minus-LRDsOJo(long,long)>($l0, $l1);

        return $l0;
    }

    public boolean hasNotPassedNow()
    {
        kotlin.time.AbstractDoubleTimeSource$DoubleTimeMark $r0;
        boolean $z0;

        $r0 := @this: kotlin.time.AbstractDoubleTimeSource$DoubleTimeMark;

        $z0 = staticinvoke <kotlin.time.TimeMark$DefaultImpls: boolean hasNotPassedNow(kotlin.time.TimeMark)>($r0);

        return $z0;
    }

    public boolean hasPassedNow()
    {
        kotlin.time.AbstractDoubleTimeSource$DoubleTimeMark $r0;
        boolean $z0;

        $r0 := @this: kotlin.time.AbstractDoubleTimeSource$DoubleTimeMark;

        $z0 = staticinvoke <kotlin.time.TimeMark$DefaultImpls: boolean hasPassedNow(kotlin.time.TimeMark)>($r0);

        return $z0;
    }

    public kotlin.time.TimeMark minus-LRDsOJo(long)
    {
        kotlin.time.AbstractDoubleTimeSource$DoubleTimeMark $r0;
        kotlin.time.TimeMark $r1;
        long $l0;

        $r0 := @this: kotlin.time.AbstractDoubleTimeSource$DoubleTimeMark;

        $l0 := @parameter0: long;

        $r1 = staticinvoke <kotlin.time.TimeMark$DefaultImpls: kotlin.time.TimeMark minus-LRDsOJo(kotlin.time.TimeMark,long)>($r0, $l0);

        return $r1;
    }

    public kotlin.time.TimeMark plus-LRDsOJo(long)
    {
        kotlin.time.AbstractDoubleTimeSource$DoubleTimeMark $r0, $r2;
        long $l0, $l1;
        double $d0;
        kotlin.time.AbstractDoubleTimeSource $r1;

        $r0 := @this: kotlin.time.AbstractDoubleTimeSource$DoubleTimeMark;

        $l0 := @parameter0: long;

        $r2 = new kotlin.time.AbstractDoubleTimeSource$DoubleTimeMark;

        $d0 = $r0.<kotlin.time.AbstractDoubleTimeSource$DoubleTimeMark: double startedAt>;

        $r1 = $r0.<kotlin.time.AbstractDoubleTimeSource$DoubleTimeMark: kotlin.time.AbstractDoubleTimeSource timeSource>;

        $l1 = $r0.<kotlin.time.AbstractDoubleTimeSource$DoubleTimeMark: long offset>;

        $l0 = staticinvoke <kotlin.time.Duration: long plus-LRDsOJo(long,long)>($l1, $l0);

        specialinvoke $r2.<kotlin.time.AbstractDoubleTimeSource$DoubleTimeMark: void <init>(double,kotlin.time.AbstractDoubleTimeSource,long,kotlin.jvm.internal.DefaultConstructorMarker)>($d0, $r1, $l0, null);

        return $r2;
    }

