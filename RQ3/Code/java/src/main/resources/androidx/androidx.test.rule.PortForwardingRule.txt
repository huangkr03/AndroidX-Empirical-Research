androidx.test.rule.PortForwardingRule
<androidx.test.rule.PortForwardingRule: java.lang.String TAG>
<androidx.test.rule.PortForwardingRule: int MIN_PORT>
<androidx.test.rule.PortForwardingRule: int MAX_PORT>
<androidx.test.rule.PortForwardingRule: int DEFAULT_PROXY_PORT>
<androidx.test.rule.PortForwardingRule: java.lang.String DEFAULT_PROXY_HOST>
<androidx.test.rule.PortForwardingRule: java.lang.String HTTP_HOST_PROPERTY>
<androidx.test.rule.PortForwardingRule: java.lang.String HTTPS_HOST_PROPERTY>
<androidx.test.rule.PortForwardingRule: java.lang.String HTTP_PORT_PROPERTY>
<androidx.test.rule.PortForwardingRule: java.lang.String HTTPS_PORT_PROPERTY>
<androidx.test.rule.PortForwardingRule: java.lang.String proxyHost>
<androidx.test.rule.PortForwardingRule: int proxyPort>
<androidx.test.rule.PortForwardingRule: java.util.Properties prop>
<androidx.test.rule.PortForwardingRule: java.util.Properties backUpProp>
    protected static int getDefaultPort()
    {
        return 8080;
    }

    public org.junit.runners.model.Statement apply(org.junit.runners.model.Statement, org.junit.runner.Description)
    {
        androidx.test.rule.PortForwardingRule r0;
        org.junit.runners.model.Statement r1;
        org.junit.runner.Description r2;
        androidx.test.rule.PortForwardingRule$PortForwardingStatement $r3;

        r0 := @this: androidx.test.rule.PortForwardingRule;

        r1 := @parameter0: org.junit.runners.model.Statement;

        r2 := @parameter1: org.junit.runner.Description;

        $r3 = new androidx.test.rule.PortForwardingRule$PortForwardingStatement;

        specialinvoke $r3.<androidx.test.rule.PortForwardingRule$PortForwardingStatement: void <init>(androidx.test.rule.PortForwardingRule,org.junit.runners.model.Statement)>(r0, r1);

        return $r3;
    }

    static volatile void '-$$Nest$mrestorePortForwarding'(androidx.test.rule.PortForwardingRule)
    {
        androidx.test.rule.PortForwardingRule r0;

        r0 := @parameter0: androidx.test.rule.PortForwardingRule;

        specialinvoke r0.<androidx.test.rule.PortForwardingRule: void restorePortForwarding()>();

        return;
    }

    static volatile void '-$$Nest$msetPortForwarding'(androidx.test.rule.PortForwardingRule)
    {
        androidx.test.rule.PortForwardingRule r0;

        r0 := @parameter0: androidx.test.rule.PortForwardingRule;

        specialinvoke r0.<androidx.test.rule.PortForwardingRule: void setPortForwarding()>();

        return;
    }

    protected void <init>(int)
    {
        androidx.test.rule.PortForwardingRule r0;
        int i0;
        java.util.Properties $r1;

        r0 := @this: androidx.test.rule.PortForwardingRule;

        i0 := @parameter0: int;

        $r1 = staticinvoke <java.lang.System: java.util.Properties getProperties()>();

        specialinvoke r0.<androidx.test.rule.PortForwardingRule: void <init>(java.lang.String,int,java.util.Properties)>("127.0.0.1", i0, $r1);

        return;
    }

    private void <init>(androidx.test.rule.PortForwardingRule$Builder)
    {
        androidx.test.rule.PortForwardingRule r0;
        androidx.test.rule.PortForwardingRule$Builder r1;
        java.lang.String $r2;
        int $i0;
        java.util.Properties $r3;

        r0 := @this: androidx.test.rule.PortForwardingRule;

        r1 := @parameter0: androidx.test.rule.PortForwardingRule$Builder;

        $r2 = staticinvoke <androidx.test.rule.PortForwardingRule$Builder: java.lang.String '-$$Nest$fgetproxyHost'(androidx.test.rule.PortForwardingRule$Builder)>(r1);

        $i0 = staticinvoke <androidx.test.rule.PortForwardingRule$Builder: int '-$$Nest$fgetproxyPort'(androidx.test.rule.PortForwardingRule$Builder)>(r1);

        $r3 = staticinvoke <androidx.test.rule.PortForwardingRule$Builder: java.util.Properties '-$$Nest$fgetprop'(androidx.test.rule.PortForwardingRule$Builder)>(r1);

        specialinvoke r0.<androidx.test.rule.PortForwardingRule: void <init>(java.lang.String,int,java.util.Properties)>($r2, $i0, $r3);

        return;
    }

    void <init>(androidx.test.rule.PortForwardingRule$Builder, androidx.test.rule.PortForwardingRule-IA)
    {
        androidx.test.rule.PortForwardingRule r0;
        androidx.test.rule.PortForwardingRule$Builder r1;
        androidx.test.rule.PortForwardingRule-IA r2;

        r0 := @this: androidx.test.rule.PortForwardingRule;

        r1 := @parameter0: androidx.test.rule.PortForwardingRule$Builder;

        r2 := @parameter1: androidx.test.rule.PortForwardingRule-IA;

        specialinvoke r0.<androidx.test.rule.PortForwardingRule: void <init>(androidx.test.rule.PortForwardingRule$Builder)>(r1);

        return;
    }

    void <init>(java.lang.String, int, java.util.Properties)
    {
        androidx.test.rule.PortForwardingRule r0;
        java.lang.String r1;
        int i0;
        java.util.Properties r2, $r4, $r5;
        java.lang.Object $r3;

        r0 := @this: androidx.test.rule.PortForwardingRule;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.Properties;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.test.rule.PortForwardingRule: java.lang.String proxyHost> = r1;

        r0.<androidx.test.rule.PortForwardingRule: int proxyPort> = i0;

        $r3 = staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r4 = (java.util.Properties) $r3;

        r0.<androidx.test.rule.PortForwardingRule: java.util.Properties prop> = $r4;

        $r5 = new java.util.Properties;

        specialinvoke $r5.<java.util.Properties: void <init>()>();

        r0.<androidx.test.rule.PortForwardingRule: java.util.Properties backUpProp> = $r5;

        specialinvoke r0.<androidx.test.rule.PortForwardingRule: void backUpProperties()>();

        return;
    }

    protected void afterPortForwarding()
    {
        androidx.test.rule.PortForwardingRule r0;

        r0 := @this: androidx.test.rule.PortForwardingRule;

        return;
    }

    protected void afterRestoreForwarding()
    {
        androidx.test.rule.PortForwardingRule r0;

        r0 := @this: androidx.test.rule.PortForwardingRule;

        return;
    }

    private void backUpProperties()
    {
        androidx.test.rule.PortForwardingRule r0;
        java.util.Properties $r1, $r3, $r5, $r7, $r9, $r10, $r13, $r14, $r17, $r18, $r21, $r22;
        java.lang.String $r2, $r4, $r6, $r8, $r11, $r15, $r19, $r23;

        r0 := @this: androidx.test.rule.PortForwardingRule;

        $r1 = r0.<androidx.test.rule.PortForwardingRule: java.util.Properties prop>;

        $r2 = virtualinvoke $r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("http.proxyHost");

        if $r2 == null goto label1;

        $r22 = r0.<androidx.test.rule.PortForwardingRule: java.util.Properties backUpProp>;

        $r21 = r0.<androidx.test.rule.PortForwardingRule: java.util.Properties prop>;

        $r23 = virtualinvoke $r21.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("http.proxyHost");

        virtualinvoke $r22.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("http.proxyHost", $r23);

     label1:
        $r3 = r0.<androidx.test.rule.PortForwardingRule: java.util.Properties prop>;

        $r4 = virtualinvoke $r3.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("https.proxyHost");

        if $r4 == null goto label2;

        $r18 = r0.<androidx.test.rule.PortForwardingRule: java.util.Properties backUpProp>;

        $r17 = r0.<androidx.test.rule.PortForwardingRule: java.util.Properties prop>;

        $r19 = virtualinvoke $r17.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("https.proxyHost");

        virtualinvoke $r18.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("https.proxyHost", $r19);

     label2:
        $r5 = r0.<androidx.test.rule.PortForwardingRule: java.util.Properties prop>;

        $r6 = virtualinvoke $r5.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("http.proxyPort");

        if $r6 == null goto label3;

        $r14 = r0.<androidx.test.rule.PortForwardingRule: java.util.Properties backUpProp>;

        $r13 = r0.<androidx.test.rule.PortForwardingRule: java.util.Properties prop>;

        $r15 = virtualinvoke $r13.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("http.proxyPort");

        virtualinvoke $r14.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("http.proxyPort", $r15);

     label3:
        $r7 = r0.<androidx.test.rule.PortForwardingRule: java.util.Properties prop>;

        $r8 = virtualinvoke $r7.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("https.proxyPort");

        if $r8 == null goto label4;

        $r10 = r0.<androidx.test.rule.PortForwardingRule: java.util.Properties backUpProp>;

        $r9 = r0.<androidx.test.rule.PortForwardingRule: java.util.Properties prop>;

        $r11 = virtualinvoke $r9.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("https.proxyPort");

        virtualinvoke $r10.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("https.proxyPort", $r11);

     label4:
        return;
    }

    protected void beforePortForwarding()
    {
        androidx.test.rule.PortForwardingRule r0;

        r0 := @this: androidx.test.rule.PortForwardingRule;

        return;
    }

    protected void beforeRestoreForwarding()
    {
        androidx.test.rule.PortForwardingRule r0;

        r0 := @this: androidx.test.rule.PortForwardingRule;

        return;
    }

    private void restoreOneProperty(java.util.Properties, java.util.Properties, java.lang.String)
    {
        androidx.test.rule.PortForwardingRule r0;
        java.util.Properties r1, r2;
        java.lang.String r3, $r4, $r6;

        r0 := @this: androidx.test.rule.PortForwardingRule;

        r1 := @parameter0: java.util.Properties;

        r2 := @parameter1: java.util.Properties;

        r3 := @parameter2: java.lang.String;

        $r4 = virtualinvoke r2.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r3);

        if $r4 == null goto label1;

        $r6 = virtualinvoke r2.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r3);

        virtualinvoke r1.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>(r3, $r6);

        goto label2;

     label1:
        virtualinvoke r1.<java.util.Properties: java.lang.Object remove(java.lang.Object)>(r3);

     label2:
        return;
    }

    private void restorePortForwarding()
    {
        androidx.test.rule.PortForwardingRule r0;
        java.lang.Throwable r1, $r10;
        java.util.Properties $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18;

        r0 := @this: androidx.test.rule.PortForwardingRule;

     label1:
        virtualinvoke r0.<androidx.test.rule.PortForwardingRule: void beforeRestoreForwarding()>();

     label2:
        $r3 = r0.<androidx.test.rule.PortForwardingRule: java.util.Properties prop>;

        $r2 = r0.<androidx.test.rule.PortForwardingRule: java.util.Properties backUpProp>;

        specialinvoke r0.<androidx.test.rule.PortForwardingRule: void restoreOneProperty(java.util.Properties,java.util.Properties,java.lang.String)>($r3, $r2, "http.proxyHost");

        $r5 = r0.<androidx.test.rule.PortForwardingRule: java.util.Properties prop>;

        $r4 = r0.<androidx.test.rule.PortForwardingRule: java.util.Properties backUpProp>;

        specialinvoke r0.<androidx.test.rule.PortForwardingRule: void restoreOneProperty(java.util.Properties,java.util.Properties,java.lang.String)>($r5, $r4, "https.proxyHost");

        $r7 = r0.<androidx.test.rule.PortForwardingRule: java.util.Properties prop>;

        $r6 = r0.<androidx.test.rule.PortForwardingRule: java.util.Properties backUpProp>;

        specialinvoke r0.<androidx.test.rule.PortForwardingRule: void restoreOneProperty(java.util.Properties,java.util.Properties,java.lang.String)>($r7, $r6, "http.proxyPort");

        $r9 = r0.<androidx.test.rule.PortForwardingRule: java.util.Properties prop>;

        $r8 = r0.<androidx.test.rule.PortForwardingRule: java.util.Properties backUpProp>;

        specialinvoke r0.<androidx.test.rule.PortForwardingRule: void restoreOneProperty(java.util.Properties,java.util.Properties,java.lang.String)>($r9, $r8, "https.proxyPort");

        virtualinvoke r0.<androidx.test.rule.PortForwardingRule: void afterRestoreForwarding()>();

        goto label4;

     label3:
        $r10 := @caughtexception;

        r1 = $r10;

        $r12 = r0.<androidx.test.rule.PortForwardingRule: java.util.Properties prop>;

        $r11 = r0.<androidx.test.rule.PortForwardingRule: java.util.Properties backUpProp>;

        specialinvoke r0.<androidx.test.rule.PortForwardingRule: void restoreOneProperty(java.util.Properties,java.util.Properties,java.lang.String)>($r12, $r11, "http.proxyHost");

        $r14 = r0.<androidx.test.rule.PortForwardingRule: java.util.Properties prop>;

        $r13 = r0.<androidx.test.rule.PortForwardingRule: java.util.Properties backUpProp>;

        specialinvoke r0.<androidx.test.rule.PortForwardingRule: void restoreOneProperty(java.util.Properties,java.util.Properties,java.lang.String)>($r14, $r13, "https.proxyHost");

        $r16 = r0.<androidx.test.rule.PortForwardingRule: java.util.Properties prop>;

        $r15 = r0.<androidx.test.rule.PortForwardingRule: java.util.Properties backUpProp>;

        specialinvoke r0.<androidx.test.rule.PortForwardingRule: void restoreOneProperty(java.util.Properties,java.util.Properties,java.lang.String)>($r16, $r15, "http.proxyPort");

        $r18 = r0.<androidx.test.rule.PortForwardingRule: java.util.Properties prop>;

        $r17 = r0.<androidx.test.rule.PortForwardingRule: java.util.Properties backUpProp>;

        specialinvoke r0.<androidx.test.rule.PortForwardingRule: void restoreOneProperty(java.util.Properties,java.util.Properties,java.lang.String)>($r18, $r17, "https.proxyPort");

        virtualinvoke r0.<androidx.test.rule.PortForwardingRule: void afterRestoreForwarding()>();

        throw r1;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void setPortForwarding()
    {
        androidx.test.rule.PortForwardingRule r0;
        java.lang.String $r1, $r4, $r8, $r11;
        java.util.Properties $r2, $r5, $r7, $r10;
        int $i0, $i1;

        r0 := @this: androidx.test.rule.PortForwardingRule;

        virtualinvoke r0.<androidx.test.rule.PortForwardingRule: void beforePortForwarding()>();

        $r2 = r0.<androidx.test.rule.PortForwardingRule: java.util.Properties prop>;

        $r1 = r0.<androidx.test.rule.PortForwardingRule: java.lang.String proxyHost>;

        virtualinvoke $r2.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("http.proxyHost", $r1);

        $r5 = r0.<androidx.test.rule.PortForwardingRule: java.util.Properties prop>;

        $r4 = r0.<androidx.test.rule.PortForwardingRule: java.lang.String proxyHost>;

        virtualinvoke $r5.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("https.proxyHost", $r4);

        $r7 = r0.<androidx.test.rule.PortForwardingRule: java.util.Properties prop>;

        $i0 = r0.<androidx.test.rule.PortForwardingRule: int proxyPort>;

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        virtualinvoke $r7.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("http.proxyPort", $r8);

        $r10 = r0.<androidx.test.rule.PortForwardingRule: java.util.Properties prop>;

        $i1 = r0.<androidx.test.rule.PortForwardingRule: int proxyPort>;

        $r11 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i1);

        virtualinvoke $r10.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("https.proxyPort", $r11);

        virtualinvoke r0.<androidx.test.rule.PortForwardingRule: void afterPortForwarding()>();

        return;
    }

androidx.test.rule.PortForwardingRule$Builder
<androidx.test.rule.PortForwardingRule$Builder: java.lang.String proxyHost>
<androidx.test.rule.PortForwardingRule$Builder: int proxyPort>
<androidx.test.rule.PortForwardingRule$Builder: java.util.Properties prop>
    static volatile int '-$$Nest$fgetproxyPort'(androidx.test.rule.PortForwardingRule$Builder)
    {
        androidx.test.rule.PortForwardingRule$Builder r0;
        int $i0;

        r0 := @parameter0: androidx.test.rule.PortForwardingRule$Builder;

        $i0 = r0.<androidx.test.rule.PortForwardingRule$Builder: int proxyPort>;

        return $i0;
    }

    public androidx.test.rule.PortForwardingRule$Builder withProperties(java.util.Properties)
    {
        androidx.test.rule.PortForwardingRule$Builder r0;
        java.util.Properties r1, $r3;
        java.lang.Object $r2;

        r0 := @this: androidx.test.rule.PortForwardingRule$Builder;

        r1 := @parameter0: java.util.Properties;

        $r2 = staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.util.Properties) $r2;

        r0.<androidx.test.rule.PortForwardingRule$Builder: java.util.Properties prop> = $r3;

        return r0;
    }

    public androidx.test.rule.PortForwardingRule$Builder withProxyHost(java.lang.String)
    {
        androidx.test.rule.PortForwardingRule$Builder r0;
        java.lang.String r1, $r3;
        java.lang.Object $r2;

        r0 := @this: androidx.test.rule.PortForwardingRule$Builder;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.lang.String) $r2;

        r0.<androidx.test.rule.PortForwardingRule$Builder: java.lang.String proxyHost> = $r3;

        return r0;
    }

    public androidx.test.rule.PortForwardingRule$Builder withProxyPort(int)
    {
        androidx.test.rule.PortForwardingRule$Builder r0;
        int i0;
        boolean $z0;
        java.lang.Object[] $r1;
        java.lang.Integer $r2, $r3, $r4;

        r0 := @this: androidx.test.rule.PortForwardingRule$Builder;

        i0 := @parameter0: int;

        if i0 < 1024 goto label1;

        if i0 > 65535 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r1 = newarray (java.lang.Object)[3];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1024);

        $r1[1] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(65535);

        $r1[2] = $r4;

        staticinvoke <androidx.test.internal.util.Checks: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "%d is used as a proxy port, must in range [%d, %d]", $r1);

        r0.<androidx.test.rule.PortForwardingRule$Builder: int proxyPort> = i0;

        return r0;
    }

    public androidx.test.rule.PortForwardingRule build()
    {
        androidx.test.rule.PortForwardingRule$Builder r0;
        androidx.test.rule.PortForwardingRule $r1;

        r0 := @this: androidx.test.rule.PortForwardingRule$Builder;

        $r1 = new androidx.test.rule.PortForwardingRule;

        specialinvoke $r1.<androidx.test.rule.PortForwardingRule: void <init>(androidx.test.rule.PortForwardingRule$Builder,androidx.test.rule.PortForwardingRule-IA)>(r0, null);

        return $r1;
    }

    static volatile java.lang.String '-$$Nest$fgetproxyHost'(androidx.test.rule.PortForwardingRule$Builder)
    {
        androidx.test.rule.PortForwardingRule$Builder r0;
        java.lang.String $r1;

        r0 := @parameter0: androidx.test.rule.PortForwardingRule$Builder;

        $r1 = r0.<androidx.test.rule.PortForwardingRule$Builder: java.lang.String proxyHost>;

        return $r1;
    }

    static volatile java.util.Properties '-$$Nest$fgetprop'(androidx.test.rule.PortForwardingRule$Builder)
    {
        androidx.test.rule.PortForwardingRule$Builder r0;
        java.util.Properties $r1;

        r0 := @parameter0: androidx.test.rule.PortForwardingRule$Builder;

        $r1 = r0.<androidx.test.rule.PortForwardingRule$Builder: java.util.Properties prop>;

        return $r1;
    }

    public void <init>()
    {
        androidx.test.rule.PortForwardingRule$Builder r0;
        java.util.Properties $r1;

        r0 := @this: androidx.test.rule.PortForwardingRule$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.test.rule.PortForwardingRule$Builder: java.lang.String proxyHost> = "127.0.0.1";

        r0.<androidx.test.rule.PortForwardingRule$Builder: int proxyPort> = 8080;

        $r1 = staticinvoke <java.lang.System: java.util.Properties getProperties()>();

        r0.<androidx.test.rule.PortForwardingRule$Builder: java.util.Properties prop> = $r1;

        return;
    }

androidx.test.rule.PortForwardingRule$PortForwardingStatement
<androidx.test.rule.PortForwardingRule$PortForwardingStatement: org.junit.runners.model.Statement base>
<androidx.test.rule.PortForwardingRule$PortForwardingStatement: androidx.test.rule.PortForwardingRule this$0>
    public void <init>(androidx.test.rule.PortForwardingRule, org.junit.runners.model.Statement)
    {
        androidx.test.rule.PortForwardingRule$PortForwardingStatement r0;
        androidx.test.rule.PortForwardingRule r1;
        org.junit.runners.model.Statement r2;

        r0 := @this: androidx.test.rule.PortForwardingRule$PortForwardingStatement;

        r1 := @parameter0: androidx.test.rule.PortForwardingRule;

        r2 := @parameter1: org.junit.runners.model.Statement;

        r0.<androidx.test.rule.PortForwardingRule$PortForwardingStatement: androidx.test.rule.PortForwardingRule this$0> = r1;

        specialinvoke r0.<org.junit.runners.model.Statement: void <init>()>();

        r0.<androidx.test.rule.PortForwardingRule$PortForwardingStatement: org.junit.runners.model.Statement base> = r2;

        return;
    }

    public void evaluate() throws java.lang.Throwable
    {
        androidx.test.rule.PortForwardingRule$PortForwardingStatement r0;
        java.lang.Throwable r1, $r11;
        androidx.test.rule.PortForwardingRule $r2, $r4, $r6, $r10, $r12;
        java.lang.Object[] $r3;
        java.lang.String $r5, $r8;
        int $i0;
        java.lang.Integer $r7;
        org.junit.runners.model.Statement $r9;

        r0 := @this: androidx.test.rule.PortForwardingRule$PortForwardingStatement;

     label1:
        $r2 = r0.<androidx.test.rule.PortForwardingRule$PortForwardingStatement: androidx.test.rule.PortForwardingRule this$0>;

        staticinvoke <androidx.test.rule.PortForwardingRule: void '-$$Nest$msetPortForwarding'(androidx.test.rule.PortForwardingRule)>($r2);

        $r3 = newarray (java.lang.Object)[2];

        $r4 = r0.<androidx.test.rule.PortForwardingRule$PortForwardingStatement: androidx.test.rule.PortForwardingRule this$0>;

        $r5 = $r4.<androidx.test.rule.PortForwardingRule: java.lang.String proxyHost>;

        $r3[0] = $r5;

        $r6 = r0.<androidx.test.rule.PortForwardingRule$PortForwardingStatement: androidx.test.rule.PortForwardingRule this$0>;

        $i0 = $r6.<androidx.test.rule.PortForwardingRule: int proxyPort>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3[1] = $r7;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("The current process traffic is forwarded to %s:%d", $r3);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("PortForwardingRule", $r8);

        $r9 = r0.<androidx.test.rule.PortForwardingRule$PortForwardingStatement: org.junit.runners.model.Statement base>;

        virtualinvoke $r9.<org.junit.runners.model.Statement: void evaluate()>();

     label2:
        $r10 = r0.<androidx.test.rule.PortForwardingRule$PortForwardingStatement: androidx.test.rule.PortForwardingRule this$0>;

        staticinvoke <androidx.test.rule.PortForwardingRule: void '-$$Nest$mrestorePortForwarding'(androidx.test.rule.PortForwardingRule)>($r10);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("PortForwardingRule", "Current process traffic forwarding is cancelled");

        goto label4;

     label3:
        $r11 := @caughtexception;

        r1 = $r11;

        $r12 = r0.<androidx.test.rule.PortForwardingRule$PortForwardingStatement: androidx.test.rule.PortForwardingRule this$0>;

        staticinvoke <androidx.test.rule.PortForwardingRule: void '-$$Nest$mrestorePortForwarding'(androidx.test.rule.PortForwardingRule)>($r12);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("PortForwardingRule", "Current process traffic forwarding is cancelled");

        throw r1;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

