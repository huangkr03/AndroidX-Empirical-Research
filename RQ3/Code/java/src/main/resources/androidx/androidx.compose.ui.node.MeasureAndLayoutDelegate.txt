androidx.compose.ui.node.MeasureAndLayoutDelegate
<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.LayoutNode root>
<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.DepthSortedSet relayoutNodes>
<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean duringMeasureLayout>
<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.OnPositionedDispatcher onPositionedDispatcher>
<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.runtime.collection.MutableVector onLayoutCompletedListeners>
<androidx.compose.ui.node.MeasureAndLayoutDelegate: long measureIteration>
<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.runtime.collection.MutableVector postponedMeasureRequests>
<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.unit.Constraints rootConstraints>
<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.LayoutTreeConsistencyChecker consistencyChecker>
    public void <init>(androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.node.MeasureAndLayoutDelegate r0;
        androidx.compose.ui.node.LayoutNode r1, $r11;
        androidx.compose.ui.node.DepthSortedSet $r2, $r12;
        androidx.compose.ui.node.Owner$Companion $r3, $r9;
        boolean $z0, $z1;
        androidx.compose.ui.node.OnPositionedDispatcher $r4;
        androidx.compose.runtime.collection.MutableVector $r5, $r7, $r10;
        androidx.compose.ui.node.Owner$OnLayoutCompletedListener[] $r6;
        androidx.compose.ui.node.MeasureAndLayoutDelegate$PostponedRequest[] $r8;
        java.util.List $r13;
        byte b0, b1;
        androidx.compose.ui.node.LayoutTreeConsistencyChecker $r15;

        r0 := @this: androidx.compose.ui.node.MeasureAndLayoutDelegate;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "root");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.LayoutNode root> = r1;

        $r2 = new androidx.compose.ui.node.DepthSortedSet;

        $r3 = <androidx.compose.ui.node.Owner: androidx.compose.ui.node.Owner$Companion Companion>;

        $z0 = virtualinvoke $r3.<androidx.compose.ui.node.Owner$Companion: boolean getEnableExtraAssertions()>();

        specialinvoke $r2.<androidx.compose.ui.node.DepthSortedSet: void <init>(boolean)>($z0);

        r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.DepthSortedSet relayoutNodes> = $r2;

        $r4 = new androidx.compose.ui.node.OnPositionedDispatcher;

        specialinvoke $r4.<androidx.compose.ui.node.OnPositionedDispatcher: void <init>()>();

        r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.OnPositionedDispatcher onPositionedDispatcher> = $r4;

        b0 = 16;

        $r5 = new androidx.compose.runtime.collection.MutableVector;

        $r6 = newarray (androidx.compose.ui.node.Owner$OnLayoutCompletedListener)[b0];

        specialinvoke $r5.<androidx.compose.runtime.collection.MutableVector: void <init>(java.lang.Object[],int)>($r6, 0);

        r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.runtime.collection.MutableVector onLayoutCompletedListeners> = $r5;

        r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: long measureIteration> = 1L;

        b1 = 16;

        $r7 = new androidx.compose.runtime.collection.MutableVector;

        $r8 = newarray (androidx.compose.ui.node.MeasureAndLayoutDelegate$PostponedRequest)[b1];

        specialinvoke $r7.<androidx.compose.runtime.collection.MutableVector: void <init>(java.lang.Object[],int)>($r8, 0);

        r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.runtime.collection.MutableVector postponedMeasureRequests> = $r7;

        $r9 = <androidx.compose.ui.node.Owner: androidx.compose.ui.node.Owner$Companion Companion>;

        $z1 = virtualinvoke $r9.<androidx.compose.ui.node.Owner$Companion: boolean getEnableExtraAssertions()>();

        if $z1 == 0 goto label1;

        $r15 = new androidx.compose.ui.node.LayoutTreeConsistencyChecker;

        $r11 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.LayoutNode root>;

        $r12 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.DepthSortedSet relayoutNodes>;

        $r10 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.runtime.collection.MutableVector postponedMeasureRequests>;

        $r13 = virtualinvoke $r10.<androidx.compose.runtime.collection.MutableVector: java.util.List asMutableList()>();

        specialinvoke $r15.<androidx.compose.ui.node.LayoutTreeConsistencyChecker: void <init>(androidx.compose.ui.node.LayoutNode,androidx.compose.ui.node.DepthSortedSet,java.util.List)>($r11, $r12, $r13);

        goto label2;

     label1:
        $r15 = (androidx.compose.ui.node.LayoutTreeConsistencyChecker) null;

     label2:
        r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.LayoutTreeConsistencyChecker consistencyChecker> = $r15;

        return;
    }

    public final boolean getHasPendingMeasureOrLayout()
    {
        androidx.compose.ui.node.MeasureAndLayoutDelegate r0;
        androidx.compose.ui.node.DepthSortedSet r1;
        boolean $z1, $z2;

        r0 := @this: androidx.compose.ui.node.MeasureAndLayoutDelegate;

        r1 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.DepthSortedSet relayoutNodes>;

        $z1 = virtualinvoke r1.<androidx.compose.ui.node.DepthSortedSet: boolean isEmpty()>();

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public final long getMeasureIteration()
    {
        androidx.compose.ui.node.MeasureAndLayoutDelegate r0;
        boolean $z0;
        long $l0;
        java.lang.IllegalArgumentException $r1;
        java.lang.String $r2, $r3;

        r0 := @this: androidx.compose.ui.node.MeasureAndLayoutDelegate;

        $z0 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean duringMeasureLayout>;

        if $z0 != 0 goto label1;

        $r3 = "measureIteration should be only used during the measure/layout pass";

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label1:
        $l0 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: long measureIteration>;

        return $l0;
    }

    public final void updateRootConstraints-BRTryo0(long)
    {
        androidx.compose.ui.node.MeasureAndLayoutDelegate r0;
        long l0, $l1;
        java.lang.String r1, $r8;
        androidx.compose.ui.unit.Constraints $r2, $r3;
        boolean $z0, $z1, $z2;
        androidx.compose.ui.node.LayoutNode $r4, $r5;
        androidx.compose.ui.node.DepthSortedSet $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: androidx.compose.ui.node.MeasureAndLayoutDelegate;

        l0 := @parameter0: long;

        $r2 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.unit.Constraints rootConstraints>;

        if $r2 != null goto label1;

        $z1 = 0;

        goto label2;

     label1:
        $l1 = virtualinvoke $r2.<androidx.compose.ui.unit.Constraints: long unbox-impl()>();

        $z1 = staticinvoke <androidx.compose.ui.unit.Constraints: boolean equals-impl0(long,long)>($l1, l0);

     label2:
        if $z1 != 0 goto label6;

        $z0 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean duringMeasureLayout>;

        if $z0 != 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        if $z2 != 0 goto label5;

        r1 = "Failed requirement.";

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label5:
        $r3 = staticinvoke <androidx.compose.ui.unit.Constraints: androidx.compose.ui.unit.Constraints box-impl(long)>(l0);

        r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.unit.Constraints rootConstraints> = $r3;

        $r4 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.LayoutNode root>;

        virtualinvoke $r4.<androidx.compose.ui.node.LayoutNode: void markMeasurePending$ui_release()>();

        $r6 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.DepthSortedSet relayoutNodes>;

        $r5 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.LayoutNode root>;

        virtualinvoke $r6.<androidx.compose.ui.node.DepthSortedSet: void add(androidx.compose.ui.node.LayoutNode)>($r5);

     label6:
        return;
    }

    public final boolean requestLookaheadRemeasure(androidx.compose.ui.node.LayoutNode, boolean)
    {
        androidx.compose.ui.node.MeasureAndLayoutDelegate r0;
        androidx.compose.ui.node.LayoutNode r1, $r7;
        boolean z0, $z1, $z2, $z3, $z4, $z6, $z8, $z9, $z10;
        androidx.compose.ui.layout.LookaheadScope $r2;
        androidx.compose.ui.node.LayoutNode$LayoutState $r3;
        int[] $r4;
        int $i0, $i1;
        java.lang.Boolean $r5, $r6;
        androidx.compose.ui.node.DepthSortedSet $r8;
        androidx.compose.ui.node.MeasureAndLayoutDelegate$PostponedRequest $r9;
        androidx.compose.runtime.collection.MutableVector $r10;
        androidx.compose.ui.node.LayoutTreeConsistencyChecker $r11;
        kotlin.NoWhenBranchMatchedException $r12;
        java.lang.IllegalStateException $r13;
        java.lang.String $r14, $r15;

        r0 := @this: androidx.compose.ui.node.MeasureAndLayoutDelegate;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        z0 := @parameter1: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "layoutNode");

        $r2 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.layout.LookaheadScope getMLookaheadScope$ui_release()>();

        if $r2 == null goto label01;

        $z6 = 1;

        goto label02;

     label01:
        $z6 = 0;

     label02:
        if $z6 != 0 goto label03;

        $r15 = "Error: requestLookaheadRemeasure cannot be called on a node outside LookaheadLayout";

        $r13 = new java.lang.IllegalStateException;

        $r14 = virtualinvoke $r15.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        throw $r13;

     label03:
        $r3 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$LayoutState getLayoutState$ui_release()>();

        $r4 = <androidx.compose.ui.node.MeasureAndLayoutDelegate$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i0 = virtualinvoke $r3.<androidx.compose.ui.node.LayoutNode$LayoutState: int ordinal()>();

        $i1 = $r4[$i0];

        tableswitch($i1)
        {
            case 1: goto label04;
            case 2: goto label05;
            case 3: goto label05;
            case 4: goto label05;
            case 5: goto label07;
            default: goto label15;
        };

     label04:
        $z8 = 0;

        goto label16;

     label05:
        $r10 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.runtime.collection.MutableVector postponedMeasureRequests>;

        $r9 = new androidx.compose.ui.node.MeasureAndLayoutDelegate$PostponedRequest;

        specialinvoke $r9.<androidx.compose.ui.node.MeasureAndLayoutDelegate$PostponedRequest: void <init>(androidx.compose.ui.node.LayoutNode,boolean,boolean)>(r1, 1, z0);

        virtualinvoke $r10.<androidx.compose.runtime.collection.MutableVector: boolean add(java.lang.Object)>($r9);

        $r11 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.LayoutTreeConsistencyChecker consistencyChecker>;

        if $r11 == null goto label06;

        virtualinvoke $r11.<androidx.compose.ui.node.LayoutTreeConsistencyChecker: void assertConsistent()>();

        goto label06;

     label06:
        $z8 = 0;

        goto label16;

     label07:
        $z1 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: boolean getLookaheadMeasurePending$ui_release()>();

        if $z1 == 0 goto label08;

        if z0 != 0 goto label08;

        $z8 = 0;

        goto label16;

     label08:
        virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: void markLookaheadMeasurePending$ui_release()>();

        virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: void markMeasurePending$ui_release()>();

        $r5 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: java.lang.Boolean isPlacedInLookahead()>();

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r5, $r6);

        if $z2 != 0 goto label09;

        $z4 = specialinvoke r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean getCanAffectParentInLookahead(androidx.compose.ui.node.LayoutNode)>(r1);

        if $z4 == 0 goto label13;

     label09:
        $r7 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        if $r7 == null goto label11;

        $z3 = virtualinvoke $r7.<androidx.compose.ui.node.LayoutNode: boolean getLookaheadMeasurePending$ui_release()>();

        if $z3 != 1 goto label10;

        $z9 = 1;

        goto label12;

     label10:
        $z9 = 0;

        goto label12;

     label11:
        $z9 = 0;

     label12:
        if $z9 != 0 goto label13;

        $r8 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.DepthSortedSet relayoutNodes>;

        virtualinvoke $r8.<androidx.compose.ui.node.DepthSortedSet: void add(androidx.compose.ui.node.LayoutNode)>(r1);

     label13:
        $z10 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean duringMeasureLayout>;

        if $z10 != 0 goto label14;

        $z8 = 1;

        goto label16;

     label14:
        $z8 = 0;

        goto label16;

     label15:
        $r12 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke $r12.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        throw $r12;

     label16:
        return $z8;
    }

    public static boolean requestLookaheadRemeasure$default(androidx.compose.ui.node.MeasureAndLayoutDelegate, androidx.compose.ui.node.LayoutNode, boolean, int, java.lang.Object)
    {
        androidx.compose.ui.node.MeasureAndLayoutDelegate r0;
        androidx.compose.ui.node.LayoutNode r1;
        int i0, $i1;
        java.lang.Object r2;
        boolean $z0, z1;

        r0 := @parameter0: androidx.compose.ui.node.MeasureAndLayoutDelegate;

        r1 := @parameter1: androidx.compose.ui.node.LayoutNode;

        z1 := @parameter2: boolean;

        i0 := @parameter3: int;

        r2 := @parameter4: java.lang.Object;

        $i1 = i0 & 2;

        if $i1 == 0 goto label1;

        z1 = 0;

     label1:
        $z0 = virtualinvoke r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean requestLookaheadRemeasure(androidx.compose.ui.node.LayoutNode,boolean)>(r1, z1);

        return $z0;
    }

    public final boolean requestRemeasure(androidx.compose.ui.node.LayoutNode, boolean)
    {
        androidx.compose.ui.node.MeasureAndLayoutDelegate r0;
        androidx.compose.ui.node.LayoutNode r1, $r4;
        boolean z0, $z1, $z2, $z3, $z4, $z6, $z7, $z8;
        androidx.compose.ui.node.LayoutNode$LayoutState $r2;
        int[] $r3;
        int $i0, $i1;
        androidx.compose.ui.node.DepthSortedSet $r5;
        androidx.compose.ui.node.MeasureAndLayoutDelegate$PostponedRequest $r6;
        androidx.compose.runtime.collection.MutableVector $r7;
        androidx.compose.ui.node.LayoutTreeConsistencyChecker $r8;
        kotlin.NoWhenBranchMatchedException $r9;

        r0 := @this: androidx.compose.ui.node.MeasureAndLayoutDelegate;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        z0 := @parameter1: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "layoutNode");

        $r2 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$LayoutState getLayoutState$ui_release()>();

        $r3 = <androidx.compose.ui.node.MeasureAndLayoutDelegate$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i0 = virtualinvoke $r2.<androidx.compose.ui.node.LayoutNode$LayoutState: int ordinal()>();

        $i1 = $r3[$i0];

        tableswitch($i1)
        {
            case 1: goto label01;
            case 2: goto label01;
            case 3: goto label02;
            case 4: goto label02;
            case 5: goto label04;
            default: goto label12;
        };

     label01:
        $z6 = 0;

        goto label13;

     label02:
        $r7 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.runtime.collection.MutableVector postponedMeasureRequests>;

        $r6 = new androidx.compose.ui.node.MeasureAndLayoutDelegate$PostponedRequest;

        specialinvoke $r6.<androidx.compose.ui.node.MeasureAndLayoutDelegate$PostponedRequest: void <init>(androidx.compose.ui.node.LayoutNode,boolean,boolean)>(r1, 0, z0);

        virtualinvoke $r7.<androidx.compose.runtime.collection.MutableVector: boolean add(java.lang.Object)>($r6);

        $r8 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.LayoutTreeConsistencyChecker consistencyChecker>;

        if $r8 == null goto label03;

        virtualinvoke $r8.<androidx.compose.ui.node.LayoutTreeConsistencyChecker: void assertConsistent()>();

        goto label03;

     label03:
        $z6 = 0;

        goto label13;

     label04:
        $z1 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: boolean getMeasurePending$ui_release()>();

        if $z1 == 0 goto label05;

        if z0 != 0 goto label05;

        $z6 = 0;

        goto label13;

     label05:
        virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: void markMeasurePending$ui_release()>();

        $z2 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: boolean isPlaced()>();

        if $z2 != 0 goto label06;

        $z4 = specialinvoke r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean getCanAffectParent(androidx.compose.ui.node.LayoutNode)>(r1);

        if $z4 == 0 goto label10;

     label06:
        $r4 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        if $r4 == null goto label08;

        $z3 = virtualinvoke $r4.<androidx.compose.ui.node.LayoutNode: boolean getMeasurePending$ui_release()>();

        if $z3 != 1 goto label07;

        $z7 = 1;

        goto label09;

     label07:
        $z7 = 0;

        goto label09;

     label08:
        $z7 = 0;

     label09:
        if $z7 != 0 goto label10;

        $r5 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.DepthSortedSet relayoutNodes>;

        virtualinvoke $r5.<androidx.compose.ui.node.DepthSortedSet: void add(androidx.compose.ui.node.LayoutNode)>(r1);

     label10:
        $z8 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean duringMeasureLayout>;

        if $z8 != 0 goto label11;

        $z6 = 1;

        goto label13;

     label11:
        $z6 = 0;

        goto label13;

     label12:
        $r9 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke $r9.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        throw $r9;

     label13:
        return $z6;
    }

    public static boolean requestRemeasure$default(androidx.compose.ui.node.MeasureAndLayoutDelegate, androidx.compose.ui.node.LayoutNode, boolean, int, java.lang.Object)
    {
        androidx.compose.ui.node.MeasureAndLayoutDelegate r0;
        androidx.compose.ui.node.LayoutNode r1;
        int i0, $i1;
        java.lang.Object r2;
        boolean $z0, z1;

        r0 := @parameter0: androidx.compose.ui.node.MeasureAndLayoutDelegate;

        r1 := @parameter1: androidx.compose.ui.node.LayoutNode;

        z1 := @parameter2: boolean;

        i0 := @parameter3: int;

        r2 := @parameter4: java.lang.Object;

        $i1 = i0 & 2;

        if $i1 == 0 goto label1;

        z1 = 0;

     label1:
        $z0 = virtualinvoke r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean requestRemeasure(androidx.compose.ui.node.LayoutNode,boolean)>(r1, z1);

        return $z0;
    }

    public final boolean requestLookaheadRelayout(androidx.compose.ui.node.LayoutNode, boolean)
    {
        androidx.compose.ui.node.MeasureAndLayoutDelegate r0;
        androidx.compose.ui.node.LayoutNode r1, r2;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        androidx.compose.ui.node.LayoutNode$LayoutState $r3;
        int[] $r4;
        int $i0, $i1;
        java.lang.Boolean $r5, $r6;
        androidx.compose.ui.node.DepthSortedSet $r7;
        androidx.compose.ui.node.LayoutTreeConsistencyChecker $r8, $r9;
        kotlin.NoWhenBranchMatchedException $r10;

        r0 := @this: androidx.compose.ui.node.MeasureAndLayoutDelegate;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        z0 := @parameter1: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "layoutNode");

        $r3 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$LayoutState getLayoutState$ui_release()>();

        $r4 = <androidx.compose.ui.node.MeasureAndLayoutDelegate$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i0 = virtualinvoke $r3.<androidx.compose.ui.node.LayoutNode$LayoutState: int ordinal()>();

        $i1 = $r4[$i0];

        tableswitch($i1)
        {
            case 1: goto label01;
            case 2: goto label03;
            case 3: goto label01;
            case 4: goto label03;
            case 5: goto label03;
            default: goto label15;
        };

     label01:
        $r9 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.LayoutTreeConsistencyChecker consistencyChecker>;

        if $r9 == null goto label02;

        virtualinvoke $r9.<androidx.compose.ui.node.LayoutTreeConsistencyChecker: void assertConsistent()>();

        goto label02;

     label02:
        $z6 = 0;

        goto label16;

     label03:
        $z1 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: boolean getLookaheadMeasurePending$ui_release()>();

        if $z1 != 0 goto label04;

        $z5 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: boolean getLookaheadLayoutPending$ui_release()>();

        if $z5 == 0 goto label06;

     label04:
        if z0 != 0 goto label06;

        $r8 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.LayoutTreeConsistencyChecker consistencyChecker>;

        if $r8 == null goto label05;

        virtualinvoke $r8.<androidx.compose.ui.node.LayoutTreeConsistencyChecker: void assertConsistent()>();

        goto label05;

     label05:
        $z6 = 0;

        goto label16;

     label06:
        virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: void markLookaheadLayoutPending$ui_release()>();

        virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: void markLayoutPending$ui_release()>();

        $r5 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: java.lang.Boolean isPlacedInLookahead()>();

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r5, $r6);

        if $z2 == 0 goto label13;

        r2 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        if r2 == null goto label08;

        $z4 = virtualinvoke r2.<androidx.compose.ui.node.LayoutNode: boolean getLookaheadMeasurePending$ui_release()>();

        if $z4 != 1 goto label07;

        $z7 = 1;

        goto label09;

     label07:
        $z7 = 0;

        goto label09;

     label08:
        $z7 = 0;

     label09:
        if $z7 != 0 goto label13;

        if r2 == null goto label11;

        $z3 = virtualinvoke r2.<androidx.compose.ui.node.LayoutNode: boolean getLookaheadLayoutPending$ui_release()>();

        if $z3 != 1 goto label10;

        $z8 = 1;

        goto label12;

     label10:
        $z8 = 0;

        goto label12;

     label11:
        $z8 = 0;

     label12:
        if $z8 != 0 goto label13;

        $r7 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.DepthSortedSet relayoutNodes>;

        virtualinvoke $r7.<androidx.compose.ui.node.DepthSortedSet: void add(androidx.compose.ui.node.LayoutNode)>(r1);

     label13:
        $z9 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean duringMeasureLayout>;

        if $z9 != 0 goto label14;

        $z6 = 1;

        goto label16;

     label14:
        $z6 = 0;

        goto label16;

     label15:
        $r10 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke $r10.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        throw $r10;

     label16:
        return $z6;
    }

    public static boolean requestLookaheadRelayout$default(androidx.compose.ui.node.MeasureAndLayoutDelegate, androidx.compose.ui.node.LayoutNode, boolean, int, java.lang.Object)
    {
        androidx.compose.ui.node.MeasureAndLayoutDelegate r0;
        androidx.compose.ui.node.LayoutNode r1;
        int i0, $i1;
        java.lang.Object r2;
        boolean $z0, z1;

        r0 := @parameter0: androidx.compose.ui.node.MeasureAndLayoutDelegate;

        r1 := @parameter1: androidx.compose.ui.node.LayoutNode;

        z1 := @parameter2: boolean;

        i0 := @parameter3: int;

        r2 := @parameter4: java.lang.Object;

        $i1 = i0 & 2;

        if $i1 == 0 goto label1;

        z1 = 0;

     label1:
        $z0 = virtualinvoke r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean requestLookaheadRelayout(androidx.compose.ui.node.LayoutNode,boolean)>(r1, z1);

        return $z0;
    }

    public final boolean requestRelayout(androidx.compose.ui.node.LayoutNode, boolean)
    {
        androidx.compose.ui.node.MeasureAndLayoutDelegate r0;
        androidx.compose.ui.node.LayoutNode r1, r2;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        androidx.compose.ui.node.LayoutNode$LayoutState $r3;
        int[] $r4;
        int $i0, $i1;
        androidx.compose.ui.node.DepthSortedSet $r5;
        androidx.compose.ui.node.LayoutTreeConsistencyChecker $r6, $r7;
        kotlin.NoWhenBranchMatchedException $r8;

        r0 := @this: androidx.compose.ui.node.MeasureAndLayoutDelegate;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        z0 := @parameter1: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "layoutNode");

        $r3 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$LayoutState getLayoutState$ui_release()>();

        $r4 = <androidx.compose.ui.node.MeasureAndLayoutDelegate$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i0 = virtualinvoke $r3.<androidx.compose.ui.node.LayoutNode$LayoutState: int ordinal()>();

        $i1 = $r4[$i0];

        tableswitch($i1)
        {
            case 1: goto label01;
            case 2: goto label01;
            case 3: goto label01;
            case 4: goto label01;
            case 5: goto label03;
            default: goto label15;
        };

     label01:
        $r7 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.LayoutTreeConsistencyChecker consistencyChecker>;

        if $r7 == null goto label02;

        virtualinvoke $r7.<androidx.compose.ui.node.LayoutTreeConsistencyChecker: void assertConsistent()>();

        goto label02;

     label02:
        $z6 = 0;

        goto label16;

     label03:
        if z0 != 0 goto label06;

        $z4 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: boolean getMeasurePending$ui_release()>();

        if $z4 != 0 goto label04;

        $z5 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: boolean getLayoutPending$ui_release()>();

        if $z5 == 0 goto label06;

     label04:
        $r6 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.LayoutTreeConsistencyChecker consistencyChecker>;

        if $r6 == null goto label05;

        virtualinvoke $r6.<androidx.compose.ui.node.LayoutTreeConsistencyChecker: void assertConsistent()>();

        goto label05;

     label05:
        $z6 = 0;

        goto label16;

     label06:
        virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: void markLayoutPending$ui_release()>();

        $z1 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: boolean isPlaced()>();

        if $z1 == 0 goto label13;

        r2 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        if r2 == null goto label08;

        $z3 = virtualinvoke r2.<androidx.compose.ui.node.LayoutNode: boolean getLayoutPending$ui_release()>();

        if $z3 != 1 goto label07;

        $z7 = 1;

        goto label09;

     label07:
        $z7 = 0;

        goto label09;

     label08:
        $z7 = 0;

     label09:
        if $z7 != 0 goto label13;

        if r2 == null goto label11;

        $z2 = virtualinvoke r2.<androidx.compose.ui.node.LayoutNode: boolean getMeasurePending$ui_release()>();

        if $z2 != 1 goto label10;

        $z8 = 1;

        goto label12;

     label10:
        $z8 = 0;

        goto label12;

     label11:
        $z8 = 0;

     label12:
        if $z8 != 0 goto label13;

        $r5 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.DepthSortedSet relayoutNodes>;

        virtualinvoke $r5.<androidx.compose.ui.node.DepthSortedSet: void add(androidx.compose.ui.node.LayoutNode)>(r1);

     label13:
        $z9 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean duringMeasureLayout>;

        if $z9 != 0 goto label14;

        $z6 = 1;

        goto label16;

     label14:
        $z6 = 0;

        goto label16;

     label15:
        $r8 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke $r8.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        throw $r8;

     label16:
        return $z6;
    }

    public static boolean requestRelayout$default(androidx.compose.ui.node.MeasureAndLayoutDelegate, androidx.compose.ui.node.LayoutNode, boolean, int, java.lang.Object)
    {
        androidx.compose.ui.node.MeasureAndLayoutDelegate r0;
        androidx.compose.ui.node.LayoutNode r1;
        int i0, $i1;
        java.lang.Object r2;
        boolean $z0, z1;

        r0 := @parameter0: androidx.compose.ui.node.MeasureAndLayoutDelegate;

        r1 := @parameter1: androidx.compose.ui.node.LayoutNode;

        z1 := @parameter2: boolean;

        i0 := @parameter3: int;

        r2 := @parameter4: java.lang.Object;

        $i1 = i0 & 2;

        if $i1 == 0 goto label1;

        z1 = 0;

     label1:
        $z0 = virtualinvoke r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean requestRelayout(androidx.compose.ui.node.LayoutNode,boolean)>(r1, z1);

        return $z0;
    }

    public final void requestOnPositionedCallback(androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.node.MeasureAndLayoutDelegate r0;
        androidx.compose.ui.node.LayoutNode r1;
        androidx.compose.ui.node.OnPositionedDispatcher $r2;

        r0 := @this: androidx.compose.ui.node.MeasureAndLayoutDelegate;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "layoutNode");

        $r2 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.OnPositionedDispatcher onPositionedDispatcher>;

        virtualinvoke $r2.<androidx.compose.ui.node.OnPositionedDispatcher: void onNodePositioned(androidx.compose.ui.node.LayoutNode)>(r1);

        return;
    }

    private final boolean doLookaheadRemeasure-sdFAvZA(androidx.compose.ui.node.LayoutNode, androidx.compose.ui.unit.Constraints)
    {
        androidx.compose.ui.node.MeasureAndLayoutDelegate r0;
        androidx.compose.ui.node.LayoutNode r1, r3;
        androidx.compose.ui.unit.Constraints r2;
        boolean z0, $z4;
        androidx.compose.ui.layout.LookaheadScope $r4, $r5;
        androidx.compose.ui.node.LayoutNode$UsageByParent $r6, $r7, $r8, $r9;

        r0 := @this: androidx.compose.ui.node.MeasureAndLayoutDelegate;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        r2 := @parameter1: androidx.compose.ui.unit.Constraints;

        $r4 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.layout.LookaheadScope getMLookaheadScope$ui_release()>();

        if $r4 != null goto label1;

        return 0;

     label1:
        if r2 == null goto label2;

        $z4 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: boolean lookaheadRemeasure-_Sx5XlM$ui_release(androidx.compose.ui.unit.Constraints)>(r2);

        goto label3;

     label2:
        $z4 = staticinvoke <androidx.compose.ui.node.LayoutNode: boolean lookaheadRemeasure-_Sx5XlM$ui_release$default(androidx.compose.ui.node.LayoutNode,androidx.compose.ui.unit.Constraints,int,java.lang.Object)>(r1, null, 1, null);

     label3:
        z0 = $z4;

        r3 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        if z0 == 0 goto label6;

        if r3 == null goto label6;

        $r5 = virtualinvoke r3.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.layout.LookaheadScope getMLookaheadScope$ui_release()>();

        if $r5 != null goto label4;

        staticinvoke <androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean requestRemeasure$default(androidx.compose.ui.node.MeasureAndLayoutDelegate,androidx.compose.ui.node.LayoutNode,boolean,int,java.lang.Object)>(r0, r3, 0, 2, null);

        goto label6;

     label4:
        $r6 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent getMeasuredByParentInLookahead$ui_release()>();

        $r7 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent InMeasureBlock>;

        if $r6 != $r7 goto label5;

        staticinvoke <androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean requestLookaheadRemeasure$default(androidx.compose.ui.node.MeasureAndLayoutDelegate,androidx.compose.ui.node.LayoutNode,boolean,int,java.lang.Object)>(r0, r3, 0, 2, null);

        goto label6;

     label5:
        $r8 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent getMeasuredByParentInLookahead$ui_release()>();

        $r9 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent InLayoutBlock>;

        if $r8 != $r9 goto label6;

        staticinvoke <androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean requestLookaheadRelayout$default(androidx.compose.ui.node.MeasureAndLayoutDelegate,androidx.compose.ui.node.LayoutNode,boolean,int,java.lang.Object)>(r0, r3, 0, 2, null);

     label6:
        return z0;
    }

    private final boolean doRemeasure-sdFAvZA(androidx.compose.ui.node.LayoutNode, androidx.compose.ui.unit.Constraints)
    {
        androidx.compose.ui.node.MeasureAndLayoutDelegate r0;
        androidx.compose.ui.node.LayoutNode r1, r3;
        androidx.compose.ui.unit.Constraints r2;
        boolean z0, $z3;
        androidx.compose.ui.node.LayoutNode$UsageByParent $r4, $r5, $r6, $r7;

        r0 := @this: androidx.compose.ui.node.MeasureAndLayoutDelegate;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        r2 := @parameter1: androidx.compose.ui.unit.Constraints;

        if r2 == null goto label1;

        $z3 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: boolean remeasure-_Sx5XlM$ui_release(androidx.compose.ui.unit.Constraints)>(r2);

        goto label2;

     label1:
        $z3 = staticinvoke <androidx.compose.ui.node.LayoutNode: boolean remeasure-_Sx5XlM$ui_release$default(androidx.compose.ui.node.LayoutNode,androidx.compose.ui.unit.Constraints,int,java.lang.Object)>(r1, null, 1, null);

     label2:
        z0 = $z3;

        r3 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        if z0 == 0 goto label4;

        if r3 == null goto label4;

        $r4 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent getMeasuredByParent$ui_release()>();

        $r5 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent InMeasureBlock>;

        if $r4 != $r5 goto label3;

        staticinvoke <androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean requestRemeasure$default(androidx.compose.ui.node.MeasureAndLayoutDelegate,androidx.compose.ui.node.LayoutNode,boolean,int,java.lang.Object)>(r0, r3, 0, 2, null);

        goto label4;

     label3:
        $r6 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent getMeasuredByParent$ui_release()>();

        $r7 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent InLayoutBlock>;

        if $r6 != $r7 goto label4;

        staticinvoke <androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean requestRelayout$default(androidx.compose.ui.node.MeasureAndLayoutDelegate,androidx.compose.ui.node.LayoutNode,boolean,int,java.lang.Object)>(r0, r3, 0, 2, null);

     label4:
        return z0;
    }

    public final boolean measureAndLayout(kotlin.jvm.functions.Function0)
    {
        androidx.compose.ui.node.MeasureAndLayoutDelegate r0, r2;
        kotlin.jvm.functions.Function0 r1;
        androidx.compose.ui.node.LayoutNode r3, $r5, $r6, $r10, r24;
        boolean z4, $z5, $z6, $z7, $z8, $z9, z10, $z11, $z13, $z15;
        java.lang.Throwable r4, $r17;
        androidx.compose.ui.unit.Constraints $r7;
        androidx.compose.ui.node.LayoutTreeConsistencyChecker $r8;
        java.lang.IllegalArgumentException $r11, $r13, $r15;
        java.lang.String $r12, $r14, $r16, r18, r19, r20;
        androidx.compose.ui.node.DepthSortedSet r21, r22, r23;

        r0 := @this: androidx.compose.ui.node.MeasureAndLayoutDelegate;

        r1 := @parameter0: kotlin.jvm.functions.Function0;

        z10 = 0;

        r2 = r0;

        $r5 = r2.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.LayoutNode root>;

        $z5 = virtualinvoke $r5.<androidx.compose.ui.node.LayoutNode: boolean isAttached()>();

        if $z5 != 0 goto label01;

        r18 = "Failed requirement.";

        $r15 = new java.lang.IllegalArgumentException;

        $r16 = virtualinvoke r18.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r15;

     label01:
        $r6 = r2.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.LayoutNode root>;

        $z6 = virtualinvoke $r6.<androidx.compose.ui.node.LayoutNode: boolean isPlaced()>();

        if $z6 != 0 goto label02;

        r19 = "Failed requirement.";

        $r13 = new java.lang.IllegalArgumentException;

        $r14 = virtualinvoke r19.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r13;

     label02:
        $z7 = r2.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean duringMeasureLayout>;

        if $z7 != 0 goto label03;

        $z11 = 1;

        goto label04;

     label03:
        $z11 = 0;

     label04:
        if $z11 != 0 goto label05;

        r20 = "Failed requirement.";

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = virtualinvoke r20.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r11;

     label05:
        $r7 = r2.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.unit.Constraints rootConstraints>;

        if $r7 == null goto label18;

        r2.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean duringMeasureLayout> = 1;

     label06:
        r21 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.DepthSortedSet relayoutNodes>;

        $z8 = virtualinvoke r21.<androidx.compose.ui.node.DepthSortedSet: boolean isEmpty()>();

        if $z8 != 0 goto label07;

        $z13 = 1;

        goto label08;

     label07:
        $z13 = 0;

     label08:
        if $z13 == 0 goto label14;

        r22 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.DepthSortedSet relayoutNodes>;

     label09:
        r23 = r22;

        $z9 = virtualinvoke r23.<androidx.compose.ui.node.DepthSortedSet: boolean isEmpty()>();

        if $z9 != 0 goto label10;

        $z15 = 1;

        goto label11;

     label10:
        $z15 = 0;

     label11:
        if $z15 == 0 goto label13;

        r24 = virtualinvoke r22.<androidx.compose.ui.node.DepthSortedSet: androidx.compose.ui.node.LayoutNode pop()>();

        r3 = r24;

        z4 = staticinvoke <androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean access$remeasureAndRelayoutIfNeeded(androidx.compose.ui.node.MeasureAndLayoutDelegate,androidx.compose.ui.node.LayoutNode)>(r0, r3);

        $r10 = staticinvoke <androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.LayoutNode access$getRoot$p(androidx.compose.ui.node.MeasureAndLayoutDelegate)>(r0);

        if r3 != $r10 goto label12;

        if z4 == 0 goto label12;

        z10 = 1;

     label12:
        goto label09;

     label13:
        if r1 == null goto label14;

        interfaceinvoke r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        goto label14;

     label14:
        r2.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean duringMeasureLayout> = 0;

        goto label17;

     label15:
        $r17 := @caughtexception;

        r4 = $r17;

     label16:
        r2.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean duringMeasureLayout> = 0;

        throw r4;

     label17:
        $r8 = r2.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.LayoutTreeConsistencyChecker consistencyChecker>;

        if $r8 == null goto label18;

        virtualinvoke $r8.<androidx.compose.ui.node.LayoutTreeConsistencyChecker: void assertConsistent()>();

        goto label18;

     label18:
        specialinvoke r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: void callOnLayoutCompletedListeners()>();

        return z10;

        catch java.lang.Throwable from label06 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    public static boolean measureAndLayout$default(androidx.compose.ui.node.MeasureAndLayoutDelegate, kotlin.jvm.functions.Function0, int, java.lang.Object)
    {
        androidx.compose.ui.node.MeasureAndLayoutDelegate r0;
        int i0, $i1;
        java.lang.Object r1;
        boolean $z0;
        kotlin.jvm.functions.Function0 r2;

        r0 := @parameter0: androidx.compose.ui.node.MeasureAndLayoutDelegate;

        r2 := @parameter1: kotlin.jvm.functions.Function0;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        r2 = null;

     label1:
        $z0 = virtualinvoke r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean measureAndLayout(kotlin.jvm.functions.Function0)>(r2);

        return $z0;
    }

    public final void measureOnly()
    {
        androidx.compose.ui.node.MeasureAndLayoutDelegate r0, r1;
        java.lang.Throwable r2, $r14;
        androidx.compose.ui.node.LayoutNode $r3, $r4, $r6;
        boolean $z2, $z3, $z4, $z5;
        androidx.compose.ui.unit.Constraints $r5;
        androidx.compose.ui.node.LayoutTreeConsistencyChecker $r7;
        java.lang.IllegalArgumentException $r8, $r10, $r12;
        java.lang.String $r9, $r11, $r13, r15, r16, r17;

        r0 := @this: androidx.compose.ui.node.MeasureAndLayoutDelegate;

        r1 = r0;

        $r3 = r1.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.LayoutNode root>;

        $z2 = virtualinvoke $r3.<androidx.compose.ui.node.LayoutNode: boolean isAttached()>();

        if $z2 != 0 goto label01;

        r15 = "Failed requirement.";

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = virtualinvoke r15.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r12;

     label01:
        $r4 = r1.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.LayoutNode root>;

        $z3 = virtualinvoke $r4.<androidx.compose.ui.node.LayoutNode: boolean isPlaced()>();

        if $z3 != 0 goto label02;

        r16 = "Failed requirement.";

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = virtualinvoke r16.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r10;

     label02:
        $z4 = r1.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean duringMeasureLayout>;

        if $z4 != 0 goto label03;

        $z5 = 1;

        goto label04;

     label03:
        $z5 = 0;

     label04:
        if $z5 != 0 goto label05;

        r17 = "Failed requirement.";

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = virtualinvoke r17.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label05:
        $r5 = r1.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.unit.Constraints rootConstraints>;

        if $r5 == null goto label11;

        r1.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean duringMeasureLayout> = 1;

     label06:
        $r6 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.LayoutNode root>;

        specialinvoke r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: void recurseRemeasure(androidx.compose.ui.node.LayoutNode)>($r6);

     label07:
        r1.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean duringMeasureLayout> = 0;

        goto label10;

     label08:
        $r14 := @caughtexception;

        r2 = $r14;

     label09:
        r1.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean duringMeasureLayout> = 0;

        throw r2;

     label10:
        $r7 = r1.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.LayoutTreeConsistencyChecker consistencyChecker>;

        if $r7 == null goto label11;

        virtualinvoke $r7.<androidx.compose.ui.node.LayoutTreeConsistencyChecker: void assertConsistent()>();

        goto label11;

     label11:
        return;

        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    private final void recurseRemeasure(androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.node.MeasureAndLayoutDelegate r0;
        androidx.compose.ui.node.LayoutNode r1, r4;
        androidx.compose.runtime.collection.MutableVector r2;
        int i0, i1;
        java.lang.Object[] r3, $r5;
        java.lang.Object $r6;
        boolean $z2;

        r0 := @this: androidx.compose.ui.node.MeasureAndLayoutDelegate;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        specialinvoke r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: void remeasureOnly(androidx.compose.ui.node.LayoutNode)>(r1);

        r2 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.runtime.collection.MutableVector get_children$ui_release()>();

        i0 = virtualinvoke r2.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i0 <= 0 goto label3;

        i1 = 0;

        $r5 = virtualinvoke r2.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r5, "null cannot be cast to non-null type kotlin.Array<T of androidx.compose.runtime.collection.MutableVector>");

        r3 = $r5;

     label1:
        $r6 = r3[i1];

        r4 = (androidx.compose.ui.node.LayoutNode) $r6;

        $z2 = specialinvoke r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean getMeasureAffectsParent(androidx.compose.ui.node.LayoutNode)>(r4);

        if $z2 == 0 goto label2;

        specialinvoke r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: void recurseRemeasure(androidx.compose.ui.node.LayoutNode)>(r4);

     label2:
        i1 = i1 + 1;

        if i1 < i0 goto label1;

     label3:
        specialinvoke r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: void remeasureOnly(androidx.compose.ui.node.LayoutNode)>(r1);

        return;
    }

    public final void measureAndLayout-0kLqBqw(androidx.compose.ui.node.LayoutNode, long)
    {
        androidx.compose.ui.node.MeasureAndLayoutDelegate r0, r2;
        androidx.compose.ui.node.LayoutNode r1, $r4, $r5, $r6;
        long l0;
        boolean z1, $z2, $z3, $z4, $z5, $z8, $z9, $z10, $z11, $z13, $z14;
        java.lang.Throwable r3, $r23;
        androidx.compose.ui.unit.Constraints $r7, $r9, $r10;
        androidx.compose.ui.node.DepthSortedSet $r8;
        java.lang.Boolean $r11, $r12;
        androidx.compose.ui.node.LayoutTreeConsistencyChecker $r13;
        androidx.compose.ui.node.OnPositionedDispatcher $r14;
        java.lang.IllegalArgumentException $r15, $r17, $r19, $r21;
        java.lang.String $r16, $r18, $r20, $r22, $r24, r25, r26, r27;

        r0 := @this: androidx.compose.ui.node.MeasureAndLayoutDelegate;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        l0 := @parameter1: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "layoutNode");

        $r4 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.LayoutNode root>;

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r4);

        if $z2 != 0 goto label01;

        $z11 = 1;

        goto label02;

     label01:
        $z11 = 0;

     label02:
        if $z11 != 0 goto label03;

        $r24 = "Failed requirement.";

        $r21 = new java.lang.IllegalArgumentException;

        $r22 = virtualinvoke $r24.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r22);

        throw $r21;

     label03:
        r2 = r0;

        $r5 = r2.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.LayoutNode root>;

        $z3 = virtualinvoke $r5.<androidx.compose.ui.node.LayoutNode: boolean isAttached()>();

        if $z3 != 0 goto label04;

        r25 = "Failed requirement.";

        $r19 = new java.lang.IllegalArgumentException;

        $r20 = virtualinvoke r25.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r20);

        throw $r19;

     label04:
        $r6 = r2.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.LayoutNode root>;

        $z4 = virtualinvoke $r6.<androidx.compose.ui.node.LayoutNode: boolean isPlaced()>();

        if $z4 != 0 goto label05;

        r26 = "Failed requirement.";

        $r17 = new java.lang.IllegalArgumentException;

        $r18 = virtualinvoke r26.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r17;

     label05:
        $z5 = r2.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean duringMeasureLayout>;

        if $z5 != 0 goto label06;

        $z13 = 1;

        goto label07;

     label06:
        $z13 = 0;

     label07:
        if $z13 != 0 goto label08;

        r27 = "Failed requirement.";

        $r15 = new java.lang.IllegalArgumentException;

        $r16 = virtualinvoke r27.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r15;

     label08:
        $r7 = r2.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.unit.Constraints rootConstraints>;

        if $r7 == null goto label16;

        r2.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean duringMeasureLayout> = 1;

     label09:
        $r8 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.DepthSortedSet relayoutNodes>;

        virtualinvoke $r8.<androidx.compose.ui.node.DepthSortedSet: boolean remove(androidx.compose.ui.node.LayoutNode)>(r1);

        $r9 = staticinvoke <androidx.compose.ui.unit.Constraints: androidx.compose.ui.unit.Constraints box-impl(long)>(l0);

        z1 = specialinvoke r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean doLookaheadRemeasure-sdFAvZA(androidx.compose.ui.node.LayoutNode,androidx.compose.ui.unit.Constraints)>(r1, $r9);

        $r10 = staticinvoke <androidx.compose.ui.unit.Constraints: androidx.compose.ui.unit.Constraints box-impl(long)>(l0);

        specialinvoke r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean doRemeasure-sdFAvZA(androidx.compose.ui.node.LayoutNode,androidx.compose.ui.unit.Constraints)>(r1, $r10);

        if z1 != 0 goto label10;

        $z10 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: boolean getLookaheadLayoutPending$ui_release()>();

        if $z10 == 0 goto label11;

     label10:
        $r11 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: java.lang.Boolean isPlacedInLookahead()>();

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z8 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r11, $r12);

        if $z8 == 0 goto label11;

        virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: void lookaheadReplace$ui_release()>();

     label11:
        $z14 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: boolean getLayoutPending$ui_release()>();

        if $z14 == 0 goto label12;

        $z9 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: boolean isPlaced()>();

        if $z9 == 0 goto label12;

        virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: void replace$ui_release()>();

        $r14 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.OnPositionedDispatcher onPositionedDispatcher>;

        virtualinvoke $r14.<androidx.compose.ui.node.OnPositionedDispatcher: void onNodePositioned(androidx.compose.ui.node.LayoutNode)>(r1);

     label12:
        r2.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean duringMeasureLayout> = 0;

        goto label15;

     label13:
        $r23 := @caughtexception;

        r3 = $r23;

     label14:
        r2.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean duringMeasureLayout> = 0;

        throw r3;

     label15:
        $r13 = r2.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.LayoutTreeConsistencyChecker consistencyChecker>;

        if $r13 == null goto label16;

        virtualinvoke $r13.<androidx.compose.ui.node.LayoutTreeConsistencyChecker: void assertConsistent()>();

        goto label16;

     label16:
        specialinvoke r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: void callOnLayoutCompletedListeners()>();

        return;

        catch java.lang.Throwable from label09 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    private final void performMeasureAndLayout(kotlin.jvm.functions.Function0)
    {
        androidx.compose.ui.node.MeasureAndLayoutDelegate r0;
        kotlin.jvm.functions.Function0 r1;
        java.lang.Throwable r2, $r14;
        androidx.compose.ui.node.LayoutNode $r3, $r4;
        boolean $z1, $z2, $z3, $z4;
        androidx.compose.ui.unit.Constraints $r5;
        androidx.compose.ui.node.LayoutTreeConsistencyChecker $r7;
        java.lang.IllegalArgumentException $r8, $r10, $r12;
        java.lang.String $r9, $r11, $r13, r15, r16, r17;

        r0 := @this: androidx.compose.ui.node.MeasureAndLayoutDelegate;

        r1 := @parameter0: kotlin.jvm.functions.Function0;

        $r3 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.LayoutNode root>;

        $z1 = virtualinvoke $r3.<androidx.compose.ui.node.LayoutNode: boolean isAttached()>();

        if $z1 != 0 goto label01;

        r15 = "Failed requirement.";

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = virtualinvoke r15.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r12;

     label01:
        $r4 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.LayoutNode root>;

        $z2 = virtualinvoke $r4.<androidx.compose.ui.node.LayoutNode: boolean isPlaced()>();

        if $z2 != 0 goto label02;

        r16 = "Failed requirement.";

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = virtualinvoke r16.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r10;

     label02:
        $z3 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean duringMeasureLayout>;

        if $z3 != 0 goto label03;

        $z4 = 1;

        goto label04;

     label03:
        $z4 = 0;

     label04:
        if $z4 != 0 goto label05;

        r17 = "Failed requirement.";

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = virtualinvoke r17.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label05:
        $r5 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.unit.Constraints rootConstraints>;

        if $r5 == null goto label11;

        r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean duringMeasureLayout> = 1;

     label06:
        interfaceinvoke r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

     label07:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean duringMeasureLayout> = 0;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        goto label10;

     label08:
        $r14 := @caughtexception;

        r2 = $r14;

     label09:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean duringMeasureLayout> = 0;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw r2;

     label10:
        $r7 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.LayoutTreeConsistencyChecker consistencyChecker>;

        if $r7 == null goto label11;

        virtualinvoke $r7.<androidx.compose.ui.node.LayoutTreeConsistencyChecker: void assertConsistent()>();

        goto label11;

     label11:
        return;

        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public final void registerOnLayoutCompletedListener(androidx.compose.ui.node.Owner$OnLayoutCompletedListener)
    {
        androidx.compose.ui.node.MeasureAndLayoutDelegate r0;
        androidx.compose.ui.node.Owner$OnLayoutCompletedListener r1;
        androidx.compose.runtime.collection.MutableVector r2;

        r0 := @this: androidx.compose.ui.node.MeasureAndLayoutDelegate;

        r1 := @parameter0: androidx.compose.ui.node.Owner$OnLayoutCompletedListener;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "listener");

        r2 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.runtime.collection.MutableVector onLayoutCompletedListeners>;

        virtualinvoke r2.<androidx.compose.runtime.collection.MutableVector: boolean add(java.lang.Object)>(r1);

        return;
    }

    private final void callOnLayoutCompletedListeners()
    {
        androidx.compose.ui.node.MeasureAndLayoutDelegate r0;
        androidx.compose.runtime.collection.MutableVector r1, $r4;
        int i0, i1;
        java.lang.Object[] r2, $r5;
        androidx.compose.ui.node.Owner$OnLayoutCompletedListener r3;
        java.lang.Object $r6;

        r0 := @this: androidx.compose.ui.node.MeasureAndLayoutDelegate;

        r1 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.runtime.collection.MutableVector onLayoutCompletedListeners>;

        i0 = virtualinvoke r1.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i0 <= 0 goto label2;

        i1 = 0;

        $r5 = virtualinvoke r1.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r5, "null cannot be cast to non-null type kotlin.Array<T of androidx.compose.runtime.collection.MutableVector>");

        r2 = $r5;

     label1:
        $r6 = r2[i1];

        r3 = (androidx.compose.ui.node.Owner$OnLayoutCompletedListener) $r6;

        interfaceinvoke r3.<androidx.compose.ui.node.Owner$OnLayoutCompletedListener: void onLayoutComplete()>();

        i1 = i1 + 1;

        if i1 < i0 goto label1;

     label2:
        $r4 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.runtime.collection.MutableVector onLayoutCompletedListeners>;

        virtualinvoke $r4.<androidx.compose.runtime.collection.MutableVector: void clear()>();

        return;
    }

    private final boolean remeasureAndRelayoutIfNeeded(androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.node.MeasureAndLayoutDelegate r0;
        androidx.compose.ui.node.LayoutNode r1, $r4, $r10, $r11, $r12, $r13;
        int i0, i1;
        java.lang.Object[] r2, $r8;
        androidx.compose.ui.node.MeasureAndLayoutDelegate$PostponedRequest r3;
        boolean $z2, $z3, $z4, $z5, $z6, $z7, $z9, $z11, $z12, $z13, $z14, $z15, $z16, $z17, z18, z19, $z20, $z21, $z22;
        java.lang.Boolean $r5, $r6, $r16, $r17;
        androidx.compose.runtime.collection.MutableVector $r7, $r20, r21;
        java.lang.Object $r9;
        androidx.compose.ui.node.OnPositionedDispatcher $r14;
        androidx.compose.ui.node.LayoutTreeConsistencyChecker $r15;
        androidx.compose.ui.unit.Constraints $r18, r19;

        r0 := @this: androidx.compose.ui.node.MeasureAndLayoutDelegate;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        z18 = 0;

        $z2 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: boolean isPlaced()>();

        if $z2 != 0 goto label01;

        $z14 = specialinvoke r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean getCanAffectParent(androidx.compose.ui.node.LayoutNode)>(r1);

        if $z14 != 0 goto label01;

        $r16 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: java.lang.Boolean isPlacedInLookahead()>();

        $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z15 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r16, $r17);

        if $z15 != 0 goto label01;

        $z16 = specialinvoke r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean getCanAffectParentInLookahead(androidx.compose.ui.node.LayoutNode)>(r1);

        if $z16 != 0 goto label01;

        $z17 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: boolean getAlignmentLinesRequired$ui_release()>();

        if $z17 == 0 goto label16;

     label01:
        z19 = 0;

        $z20 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: boolean getLookaheadMeasurePending$ui_release()>();

        if $z20 != 0 goto label02;

        $z13 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: boolean getMeasurePending$ui_release()>();

        if $z13 == 0 goto label06;

     label02:
        $r4 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.LayoutNode root>;

        if r1 != $r4 goto label03;

        $r18 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.unit.Constraints rootConstraints>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r18);

        goto label04;

     label03:
        $r18 = null;

     label04:
        r19 = $r18;

        $z3 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: boolean getLookaheadMeasurePending$ui_release()>();

        if $z3 == 0 goto label05;

        z19 = specialinvoke r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean doLookaheadRemeasure-sdFAvZA(androidx.compose.ui.node.LayoutNode,androidx.compose.ui.unit.Constraints)>(r1, r19);

     label05:
        z18 = specialinvoke r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean doRemeasure-sdFAvZA(androidx.compose.ui.node.LayoutNode,androidx.compose.ui.unit.Constraints)>(r1, r19);

     label06:
        if z19 != 0 goto label07;

        $z12 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: boolean getLookaheadLayoutPending$ui_release()>();

        if $z12 == 0 goto label08;

     label07:
        $r5 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: java.lang.Boolean isPlacedInLookahead()>();

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z4 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r5, $r6);

        if $z4 == 0 goto label08;

        virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: void lookaheadReplace$ui_release()>();

     label08:
        $z21 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: boolean getLayoutPending$ui_release()>();

        if $z21 == 0 goto label11;

        $z11 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: boolean isPlaced()>();

        if $z11 == 0 goto label11;

        $r13 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.LayoutNode root>;

        if r1 != $r13 goto label09;

        virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: void place$ui_release(int,int)>(0, 0);

        goto label10;

     label09:
        virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: void replace$ui_release()>();

     label10:
        $r14 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.OnPositionedDispatcher onPositionedDispatcher>;

        virtualinvoke $r14.<androidx.compose.ui.node.OnPositionedDispatcher: void onNodePositioned(androidx.compose.ui.node.LayoutNode)>(r1);

        $r15 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.LayoutTreeConsistencyChecker consistencyChecker>;

        if $r15 == null goto label11;

        virtualinvoke $r15.<androidx.compose.ui.node.LayoutTreeConsistencyChecker: void assertConsistent()>();

        goto label11;

     label11:
        $r20 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.runtime.collection.MutableVector postponedMeasureRequests>;

        $z22 = virtualinvoke $r20.<androidx.compose.runtime.collection.MutableVector: boolean isNotEmpty()>();

        if $z22 == 0 goto label16;

        r21 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.runtime.collection.MutableVector postponedMeasureRequests>;

        i0 = virtualinvoke r21.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i0 <= 0 goto label15;

        i1 = 0;

        $r8 = virtualinvoke r21.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r8, "null cannot be cast to non-null type kotlin.Array<T of androidx.compose.runtime.collection.MutableVector>");

        r2 = $r8;

     label12:
        $r9 = r2[i1];

        r3 = (androidx.compose.ui.node.MeasureAndLayoutDelegate$PostponedRequest) $r9;

        $r10 = virtualinvoke r3.<androidx.compose.ui.node.MeasureAndLayoutDelegate$PostponedRequest: androidx.compose.ui.node.LayoutNode getNode()>();

        $z5 = virtualinvoke $r10.<androidx.compose.ui.node.LayoutNode: boolean isAttached()>();

        if $z5 == 0 goto label14;

        $z6 = virtualinvoke r3.<androidx.compose.ui.node.MeasureAndLayoutDelegate$PostponedRequest: boolean isLookahead()>();

        if $z6 != 0 goto label13;

        $r12 = virtualinvoke r3.<androidx.compose.ui.node.MeasureAndLayoutDelegate$PostponedRequest: androidx.compose.ui.node.LayoutNode getNode()>();

        $z9 = virtualinvoke r3.<androidx.compose.ui.node.MeasureAndLayoutDelegate$PostponedRequest: boolean isForced()>();

        virtualinvoke r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean requestRemeasure(androidx.compose.ui.node.LayoutNode,boolean)>($r12, $z9);

        goto label14;

     label13:
        $r11 = virtualinvoke r3.<androidx.compose.ui.node.MeasureAndLayoutDelegate$PostponedRequest: androidx.compose.ui.node.LayoutNode getNode()>();

        $z7 = virtualinvoke r3.<androidx.compose.ui.node.MeasureAndLayoutDelegate$PostponedRequest: boolean isForced()>();

        virtualinvoke r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean requestLookaheadRemeasure(androidx.compose.ui.node.LayoutNode,boolean)>($r11, $z7);

     label14:
        i1 = i1 + 1;

        if i1 < i0 goto label12;

     label15:
        $r7 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.runtime.collection.MutableVector postponedMeasureRequests>;

        virtualinvoke $r7.<androidx.compose.runtime.collection.MutableVector: void clear()>();

     label16:
        return z18;
    }

    private final void remeasureOnly(androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.node.MeasureAndLayoutDelegate r0;
        androidx.compose.ui.node.LayoutNode r1, $r3;
        androidx.compose.ui.unit.Constraints r2, $r4;
        boolean $z0, $z1, $z4;

        r0 := @this: androidx.compose.ui.node.MeasureAndLayoutDelegate;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        $z0 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: boolean getMeasurePending$ui_release()>();

        if $z0 != 0 goto label1;

        $z4 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: boolean getLookaheadMeasurePending$ui_release()>();

        if $z4 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.LayoutNode root>;

        if r1 != $r3 goto label2;

        $r4 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.unit.Constraints rootConstraints>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r4);

        goto label3;

     label2:
        $r4 = null;

     label3:
        r2 = $r4;

        $z1 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: boolean getLookaheadMeasurePending$ui_release()>();

        if $z1 == 0 goto label4;

        specialinvoke r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean doLookaheadRemeasure-sdFAvZA(androidx.compose.ui.node.LayoutNode,androidx.compose.ui.unit.Constraints)>(r1, r2);

     label4:
        specialinvoke r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean doRemeasure-sdFAvZA(androidx.compose.ui.node.LayoutNode,androidx.compose.ui.unit.Constraints)>(r1, r2);

        return;
    }

    public final void forceMeasureTheSubtree(androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.node.MeasureAndLayoutDelegate r0;
        androidx.compose.ui.node.LayoutNode r1, r2, r5;
        androidx.compose.runtime.collection.MutableVector r3;
        int i0, i1;
        java.lang.Object[] r4, $r8;
        androidx.compose.ui.node.DepthSortedSet $r6, $r7, $r10;
        boolean $z2, $z3, $z4, $z5, $z6, $z8, $z9, $z11, $z13;
        java.lang.Object $r9;
        java.lang.IllegalArgumentException $r11;
        java.lang.String $r12, $r14, $r15, $r16;
        java.lang.IllegalStateException $r13;

        r0 := @this: androidx.compose.ui.node.MeasureAndLayoutDelegate;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "layoutNode");

        $r6 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.DepthSortedSet relayoutNodes>;

        $z2 = virtualinvoke $r6.<androidx.compose.ui.node.DepthSortedSet: boolean isEmpty()>();

        if $z2 == 0 goto label01;

        return;

     label01:
        $z3 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean duringMeasureLayout>;

        if $z3 != 0 goto label02;

        $r15 = "Check failed.";

        $r13 = new java.lang.IllegalStateException;

        $r14 = virtualinvoke $r15.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        throw $r13;

     label02:
        $z4 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: boolean getMeasurePending$ui_release()>();

        if $z4 != 0 goto label03;

        $z11 = 1;

        goto label04;

     label03:
        $z11 = 0;

     label04:
        if $z11 != 0 goto label05;

        $r16 = "Failed requirement.";

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = virtualinvoke $r16.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r11;

     label05:
        r2 = r1;

        r3 = virtualinvoke r2.<androidx.compose.ui.node.LayoutNode: androidx.compose.runtime.collection.MutableVector get_children$ui_release()>();

        i0 = virtualinvoke r3.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i0 <= 0 goto label09;

        i1 = 0;

        $r8 = virtualinvoke r3.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r8, "null cannot be cast to non-null type kotlin.Array<T of androidx.compose.runtime.collection.MutableVector>");

        r4 = $r8;

     label06:
        $r9 = r4[i1];

        r5 = (androidx.compose.ui.node.LayoutNode) $r9;

        $z8 = virtualinvoke r5.<androidx.compose.ui.node.LayoutNode: boolean getMeasurePending$ui_release()>();

        if $z8 == 0 goto label07;

        $r10 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.DepthSortedSet relayoutNodes>;

        $z9 = virtualinvoke $r10.<androidx.compose.ui.node.DepthSortedSet: boolean remove(androidx.compose.ui.node.LayoutNode)>(r5);

        if $z9 == 0 goto label07;

        specialinvoke r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean remeasureAndRelayoutIfNeeded(androidx.compose.ui.node.LayoutNode)>(r5);

     label07:
        $z13 = virtualinvoke r5.<androidx.compose.ui.node.LayoutNode: boolean getMeasurePending$ui_release()>();

        if $z13 != 0 goto label08;

        virtualinvoke r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: void forceMeasureTheSubtree(androidx.compose.ui.node.LayoutNode)>(r5);

     label08:
        i1 = i1 + 1;

        if i1 < i0 goto label06;

     label09:
        $z5 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: boolean getMeasurePending$ui_release()>();

        if $z5 == 0 goto label10;

        $r7 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.DepthSortedSet relayoutNodes>;

        $z6 = virtualinvoke $r7.<androidx.compose.ui.node.DepthSortedSet: boolean remove(androidx.compose.ui.node.LayoutNode)>(r1);

        if $z6 == 0 goto label10;

        specialinvoke r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean remeasureAndRelayoutIfNeeded(androidx.compose.ui.node.LayoutNode)>(r1);

     label10:
        return;
    }

    public final void dispatchOnPositionedCallbacks(boolean)
    {
        androidx.compose.ui.node.MeasureAndLayoutDelegate r0;
        boolean z0;
        androidx.compose.ui.node.OnPositionedDispatcher $r1, $r3;
        androidx.compose.ui.node.LayoutNode $r2;

        r0 := @this: androidx.compose.ui.node.MeasureAndLayoutDelegate;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r3 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.OnPositionedDispatcher onPositionedDispatcher>;

        $r2 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.LayoutNode root>;

        virtualinvoke $r3.<androidx.compose.ui.node.OnPositionedDispatcher: void onRootNodePositioned(androidx.compose.ui.node.LayoutNode)>($r2);

     label1:
        $r1 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.OnPositionedDispatcher onPositionedDispatcher>;

        virtualinvoke $r1.<androidx.compose.ui.node.OnPositionedDispatcher: void dispatch()>();

        return;
    }

    public static void dispatchOnPositionedCallbacks$default(androidx.compose.ui.node.MeasureAndLayoutDelegate, boolean, int, java.lang.Object)
    {
        androidx.compose.ui.node.MeasureAndLayoutDelegate r0;
        int i0, $i1;
        java.lang.Object r1;
        boolean z0;

        r0 := @parameter0: androidx.compose.ui.node.MeasureAndLayoutDelegate;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        z0 = 0;

     label1:
        virtualinvoke r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: void dispatchOnPositionedCallbacks(boolean)>(z0);

        return;
    }

    public final void onNodeDetached(androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.node.MeasureAndLayoutDelegate r0;
        androidx.compose.ui.node.LayoutNode r1;
        androidx.compose.ui.node.DepthSortedSet $r2;

        r0 := @this: androidx.compose.ui.node.MeasureAndLayoutDelegate;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "node");

        $r2 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.DepthSortedSet relayoutNodes>;

        virtualinvoke $r2.<androidx.compose.ui.node.DepthSortedSet: boolean remove(androidx.compose.ui.node.LayoutNode)>(r1);

        return;
    }

    private final boolean getMeasureAffectsParent(androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.node.MeasureAndLayoutDelegate r0;
        androidx.compose.ui.node.LayoutNode $r1;
        androidx.compose.ui.node.LayoutNode$UsageByParent $r2, $r3;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r4;
        androidx.compose.ui.node.AlignmentLinesOwner $r5;
        androidx.compose.ui.node.AlignmentLines $r6;
        boolean $z0, $z1;

        r0 := @this: androidx.compose.ui.node.MeasureAndLayoutDelegate;

        $r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent getMeasuredByParent$ui_release()>();

        $r3 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent InMeasureBlock>;

        if $r2 == $r3 goto label1;

        $r4 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate getLayoutDelegate$ui_release()>();

        $r5 = virtualinvoke $r4.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.AlignmentLinesOwner getAlignmentLinesOwner$ui_release()>();

        $r6 = interfaceinvoke $r5.<androidx.compose.ui.node.AlignmentLinesOwner: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        $z0 = virtualinvoke $r6.<androidx.compose.ui.node.AlignmentLines: boolean getRequired$ui_release()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    private final boolean getCanAffectParent(androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.node.MeasureAndLayoutDelegate r0;
        androidx.compose.ui.node.LayoutNode $r1;
        boolean $z0, $z1, $z2;

        r0 := @this: androidx.compose.ui.node.MeasureAndLayoutDelegate;

        $r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        $z0 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: boolean getMeasurePending$ui_release()>();

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean getMeasureAffectsParent(androidx.compose.ui.node.LayoutNode)>($r1);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private final boolean getCanAffectParentInLookahead(androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.node.MeasureAndLayoutDelegate r0;
        androidx.compose.ui.node.LayoutNode $r1;
        boolean $z0, $z1, $z2, $z3;
        androidx.compose.ui.node.LayoutNode$UsageByParent $r2, $r3;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r4;
        androidx.compose.ui.node.AlignmentLinesOwner $r5;
        androidx.compose.ui.node.AlignmentLines $r6;

        r0 := @this: androidx.compose.ui.node.MeasureAndLayoutDelegate;

        $r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        $z0 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: boolean getLookaheadLayoutPending$ui_release()>();

        if $z0 == 0 goto label5;

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent getMeasuredByParentInLookahead$ui_release()>();

        $r3 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent InMeasureBlock>;

        if $r2 == $r3 goto label4;

        $r4 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate getLayoutDelegate$ui_release()>();

        $r5 = virtualinvoke $r4.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.AlignmentLinesOwner getLookaheadAlignmentLinesOwner$ui_release()>();

        if $r5 == null goto label2;

        $r6 = interfaceinvoke $r5.<androidx.compose.ui.node.AlignmentLinesOwner: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        if $r6 == null goto label2;

        $z1 = virtualinvoke $r6.<androidx.compose.ui.node.AlignmentLines: boolean getRequired$ui_release()>();

        if $z1 != 1 goto label1;

        $z2 = 1;

        goto label3;

     label1:
        $z2 = 0;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        if $z2 == 0 goto label5;

     label4:
        $z3 = 1;

        goto label6;

     label5:
        $z3 = 0;

     label6:
        return $z3;
    }

    public static final boolean access$remeasureAndRelayoutIfNeeded(androidx.compose.ui.node.MeasureAndLayoutDelegate, androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.node.MeasureAndLayoutDelegate $r0;
        androidx.compose.ui.node.LayoutNode r1;
        boolean $z0;

        $r0 := @parameter0: androidx.compose.ui.node.MeasureAndLayoutDelegate;

        r1 := @parameter1: androidx.compose.ui.node.LayoutNode;

        $z0 = specialinvoke $r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: boolean remeasureAndRelayoutIfNeeded(androidx.compose.ui.node.LayoutNode)>(r1);

        return $z0;
    }

    public static final androidx.compose.ui.node.LayoutNode access$getRoot$p(androidx.compose.ui.node.MeasureAndLayoutDelegate)
    {
        androidx.compose.ui.node.MeasureAndLayoutDelegate $r0;
        androidx.compose.ui.node.LayoutNode $r1;

        $r0 := @parameter0: androidx.compose.ui.node.MeasureAndLayoutDelegate;

        $r1 = $r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate: androidx.compose.ui.node.LayoutNode root>;

        return $r1;
    }

androidx.compose.ui.node.MeasureAndLayoutDelegate$PostponedRequest
<androidx.compose.ui.node.MeasureAndLayoutDelegate$PostponedRequest: androidx.compose.ui.node.LayoutNode node>
<androidx.compose.ui.node.MeasureAndLayoutDelegate$PostponedRequest: boolean isLookahead>
<androidx.compose.ui.node.MeasureAndLayoutDelegate$PostponedRequest: boolean isForced>
<androidx.compose.ui.node.MeasureAndLayoutDelegate$PostponedRequest: int $stable>
    public void <init>(androidx.compose.ui.node.LayoutNode, boolean, boolean)
    {
        androidx.compose.ui.node.MeasureAndLayoutDelegate$PostponedRequest r0;
        androidx.compose.ui.node.LayoutNode r1;
        boolean z0, z1;

        r0 := @this: androidx.compose.ui.node.MeasureAndLayoutDelegate$PostponedRequest;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "node");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate$PostponedRequest: androidx.compose.ui.node.LayoutNode node> = r1;

        r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate$PostponedRequest: boolean isLookahead> = z0;

        r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate$PostponedRequest: boolean isForced> = z1;

        return;
    }

    public final androidx.compose.ui.node.LayoutNode getNode()
    {
        androidx.compose.ui.node.MeasureAndLayoutDelegate$PostponedRequest r0;
        androidx.compose.ui.node.LayoutNode $r1;

        r0 := @this: androidx.compose.ui.node.MeasureAndLayoutDelegate$PostponedRequest;

        $r1 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate$PostponedRequest: androidx.compose.ui.node.LayoutNode node>;

        return $r1;
    }

    public final boolean isLookahead()
    {
        androidx.compose.ui.node.MeasureAndLayoutDelegate$PostponedRequest r0;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.MeasureAndLayoutDelegate$PostponedRequest;

        $z0 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate$PostponedRequest: boolean isLookahead>;

        return $z0;
    }

    public final boolean isForced()
    {
        androidx.compose.ui.node.MeasureAndLayoutDelegate$PostponedRequest r0;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.MeasureAndLayoutDelegate$PostponedRequest;

        $z0 = r0.<androidx.compose.ui.node.MeasureAndLayoutDelegate$PostponedRequest: boolean isForced>;

        return $z0;
    }

    static void <clinit>()
    {
        <androidx.compose.ui.node.MeasureAndLayoutDelegate$PostponedRequest: int $stable> = 8;

        return;
    }

androidx.compose.ui.node.MeasureAndLayoutDelegate$WhenMappings
<androidx.compose.ui.node.MeasureAndLayoutDelegate$WhenMappings: int[] $EnumSwitchMapping$0>
    static void <clinit>()
    {
        int[] r0;
        androidx.compose.ui.node.LayoutNode$LayoutState[] $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        androidx.compose.ui.node.LayoutNode$LayoutState $r2, $r3, $r4, $r5, $r6;

        $r1 = staticinvoke <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState[] values()>();

        $i0 = lengthof $r1;

        r0 = newarray (int)[$i0];

        $r2 = <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState LookaheadMeasuring>;

        $i1 = virtualinvoke $r2.<androidx.compose.ui.node.LayoutNode$LayoutState: int ordinal()>();

        r0[$i1] = 1;

        $r3 = <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState Measuring>;

        $i2 = virtualinvoke $r3.<androidx.compose.ui.node.LayoutNode$LayoutState: int ordinal()>();

        r0[$i2] = 2;

        $r4 = <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState LookaheadLayingOut>;

        $i3 = virtualinvoke $r4.<androidx.compose.ui.node.LayoutNode$LayoutState: int ordinal()>();

        r0[$i3] = 3;

        $r5 = <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState LayingOut>;

        $i4 = virtualinvoke $r5.<androidx.compose.ui.node.LayoutNode$LayoutState: int ordinal()>();

        r0[$i4] = 4;

        $r6 = <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState Idle>;

        $i5 = virtualinvoke $r6.<androidx.compose.ui.node.LayoutNode$LayoutState: int ordinal()>();

        r0[$i5] = 5;

        <androidx.compose.ui.node.MeasureAndLayoutDelegate$WhenMappings: int[] $EnumSwitchMapping$0> = r0;

        return;
    }

