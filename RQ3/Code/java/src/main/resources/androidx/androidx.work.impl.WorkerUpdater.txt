androidx.work.impl.WorkerUpdater
    private static final androidx.work.WorkManager$UpdateResult updateWorkImpl(androidx.work.impl.Processor, androidx.work.impl.WorkDatabase, androidx.work.Configuration, java.util.List, androidx.work.impl.model.WorkSpec, java.util.Set)
    {
        androidx.work.impl.Processor r0;
        androidx.work.impl.WorkDatabase r1;
        androidx.work.Configuration r2;
        java.util.List r3;
        androidx.work.impl.model.WorkSpec r4, r7, $r13;
        java.util.Set r5;
        java.lang.String r6, $r21, $r25, $r28, $r35;
        java.lang.Iterable $r8;
        java.util.Iterator r9;
        java.lang.Object r10, $r20, $r24;
        androidx.work.impl.Scheduler r11;
        androidx.work.impl.model.WorkSpecDao $r12;
        androidx.work.WorkInfo$State $r14;
        boolean $z2, $z3, $z4, $z5, $z6, z7;
        java.lang.Runnable $r15;
        androidx.work.impl.WorkerUpdater$updateWorkImpl$type$1 $r16;
        java.lang.UnsupportedOperationException $r17;
        java.lang.StringBuilder $r18, $r19, $r22, $r23, $r26, $r27, $r31, $r32, $r33, $r34;
        androidx.work.WorkManager$UpdateResult $r29, $r37;
        java.lang.IllegalArgumentException $r30;
        kotlin.jvm.functions.Function1 r36;

        r0 := @parameter0: androidx.work.impl.Processor;

        r1 := @parameter1: androidx.work.impl.WorkDatabase;

        r2 := @parameter2: androidx.work.Configuration;

        r3 := @parameter3: java.util.List;

        r4 := @parameter4: androidx.work.impl.model.WorkSpec;

        r5 := @parameter5: java.util.Set;

        r6 = r4.<androidx.work.impl.model.WorkSpec: java.lang.String id>;

        $r12 = virtualinvoke r1.<androidx.work.impl.WorkDatabase: androidx.work.impl.model.WorkSpecDao workSpecDao()>();

        $r13 = interfaceinvoke $r12.<androidx.work.impl.model.WorkSpecDao: androidx.work.impl.model.WorkSpec getWorkSpec(java.lang.String)>(r6);

        if $r13 != null goto label1;

        $r30 = new java.lang.IllegalArgumentException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Worker with ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" doesn\'t exist");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r35);

        throw $r30;

     label1:
        r7 = $r13;

        $r14 = r7.<androidx.work.impl.model.WorkSpec: androidx.work.WorkInfo$State state>;

        $z2 = virtualinvoke $r14.<androidx.work.WorkInfo$State: boolean isFinished()>();

        if $z2 == 0 goto label2;

        $r29 = <androidx.work.WorkManager$UpdateResult: androidx.work.WorkManager$UpdateResult NOT_APPLIED>;

        return $r29;

     label2:
        $z3 = virtualinvoke r7.<androidx.work.impl.model.WorkSpec: boolean isPeriodic()>();

        $z4 = virtualinvoke r4.<androidx.work.impl.model.WorkSpec: boolean isPeriodic()>();

        $z5 = $z3 ^ $z4;

        if $z5 == 0 goto label3;

        $r16 = <androidx.work.impl.WorkerUpdater$updateWorkImpl$type$1: androidx.work.impl.WorkerUpdater$updateWorkImpl$type$1 INSTANCE>;

        r36 = (kotlin.jvm.functions.Function1) $r16;

        $r17 = new java.lang.UnsupportedOperationException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t update ");

        $r20 = interfaceinvoke r36.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r7);

        $r21 = (java.lang.String) $r20;

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Worker to ");

        $r24 = interfaceinvoke r36.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r4);

        $r25 = (java.lang.String) $r24;

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Worker. Update operation must preserve worker\'s type.");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r28);

        throw $r17;

     label3:
        z7 = virtualinvoke r0.<androidx.work.impl.Processor: boolean isEnqueued(java.lang.String)>(r6);

        if z7 != 0 goto label5;

        $r8 = (java.lang.Iterable) r3;

        r9 = interfaceinvoke $r8.<java.lang.Iterable: java.util.Iterator iterator()>();

     label4:
        $z6 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label5;

        r10 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (androidx.work.impl.Scheduler) r10;

        interfaceinvoke r11.<androidx.work.impl.Scheduler: void cancel(java.lang.String)>(r6);

        goto label4;

     label5:
        $r15 = dynamicinvoke "run" <java.lang.Runnable (androidx.work.impl.WorkDatabase,androidx.work.impl.model.WorkSpec,androidx.work.impl.model.WorkSpec,java.util.List,java.lang.String,java.util.Set,boolean)>(r1, r4, r7, r3, r6, r5, z7) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.work.impl.WorkerUpdater: void updateWorkImpl$lambda$1(androidx.work.impl.WorkDatabase,androidx.work.impl.model.WorkSpec,androidx.work.impl.model.WorkSpec,java.util.List,java.lang.String,java.util.Set,boolean)>, methodtype: void __METHODTYPE__());

        virtualinvoke r1.<androidx.work.impl.WorkDatabase: void runInTransaction(java.lang.Runnable)>($r15);

        if z7 != 0 goto label6;

        staticinvoke <androidx.work.impl.Schedulers: void schedule(androidx.work.Configuration,androidx.work.impl.WorkDatabase,java.util.List)>(r2, r1, r3);

     label6:
        if z7 == 0 goto label7;

        $r37 = <androidx.work.WorkManager$UpdateResult: androidx.work.WorkManager$UpdateResult APPLIED_FOR_NEXT_RUN>;

        goto label8;

     label7:
        $r37 = <androidx.work.WorkManager$UpdateResult: androidx.work.WorkManager$UpdateResult APPLIED_IMMEDIATELY>;

     label8:
        return $r37;
    }

    public static final com.google.common.util.concurrent.ListenableFuture updateWorkImpl(androidx.work.impl.WorkManagerImpl, androidx.work.WorkRequest)
    {
        androidx.work.impl.WorkManagerImpl $r0;
        androidx.work.WorkRequest r1;
        androidx.work.impl.utils.futures.SettableFuture r2;
        androidx.work.impl.utils.taskexecutor.TaskExecutor $r3;
        androidx.work.impl.utils.taskexecutor.SerialExecutor $r4;
        java.lang.Runnable $r5;
        com.google.common.util.concurrent.ListenableFuture $r6;

        $r0 := @parameter0: androidx.work.impl.WorkManagerImpl;

        r1 := @parameter1: androidx.work.WorkRequest;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "workRequest");

        r2 = staticinvoke <androidx.work.impl.utils.futures.SettableFuture: androidx.work.impl.utils.futures.SettableFuture create()>();

        $r3 = virtualinvoke $r0.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.utils.taskexecutor.TaskExecutor getWorkTaskExecutor()>();

        $r4 = interfaceinvoke $r3.<androidx.work.impl.utils.taskexecutor.TaskExecutor: androidx.work.impl.utils.taskexecutor.SerialExecutor getSerialTaskExecutor()>();

        $r5 = dynamicinvoke "run" <java.lang.Runnable (androidx.work.impl.utils.futures.SettableFuture,androidx.work.impl.WorkManagerImpl,androidx.work.WorkRequest)>(r2, $r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.work.impl.WorkerUpdater: void updateWorkImpl$lambda$2(androidx.work.impl.utils.futures.SettableFuture,androidx.work.impl.WorkManagerImpl,androidx.work.WorkRequest)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r4.<androidx.work.impl.utils.taskexecutor.SerialExecutor: void execute(java.lang.Runnable)>($r5);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r2, "future");

        $r6 = (com.google.common.util.concurrent.ListenableFuture) r2;

        return $r6;
    }

    public static final androidx.work.Operation enqueueUniquelyNamedPeriodic(androidx.work.impl.WorkManagerImpl, java.lang.String, androidx.work.WorkRequest)
    {
        androidx.work.impl.WorkManagerImpl $r0;
        java.lang.String r1;
        androidx.work.WorkRequest r2;
        androidx.work.impl.OperationImpl r3, $r5;
        kotlin.jvm.functions.Function0 r4;
        androidx.work.impl.WorkerUpdater$enqueueUniquelyNamedPeriodic$enqueueNew$1 $r6;
        androidx.work.impl.utils.taskexecutor.TaskExecutor $r7;
        androidx.work.impl.utils.taskexecutor.SerialExecutor $r8;
        java.lang.Runnable $r9;
        androidx.work.Operation $r10;

        $r0 := @parameter0: androidx.work.impl.WorkManagerImpl;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: androidx.work.WorkRequest;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "name");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "workRequest");

        $r5 = new androidx.work.impl.OperationImpl;

        specialinvoke $r5.<androidx.work.impl.OperationImpl: void <init>()>();

        r3 = $r5;

        $r6 = new androidx.work.impl.WorkerUpdater$enqueueUniquelyNamedPeriodic$enqueueNew$1;

        specialinvoke $r6.<androidx.work.impl.WorkerUpdater$enqueueUniquelyNamedPeriodic$enqueueNew$1: void <init>(androidx.work.WorkRequest,androidx.work.impl.WorkManagerImpl,java.lang.String,androidx.work.impl.OperationImpl)>(r2, $r0, r1, r3);

        r4 = (kotlin.jvm.functions.Function0) $r6;

        $r7 = virtualinvoke $r0.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.utils.taskexecutor.TaskExecutor getWorkTaskExecutor()>();

        $r8 = interfaceinvoke $r7.<androidx.work.impl.utils.taskexecutor.TaskExecutor: androidx.work.impl.utils.taskexecutor.SerialExecutor getSerialTaskExecutor()>();

        $r9 = dynamicinvoke "run" <java.lang.Runnable (androidx.work.impl.WorkManagerImpl,java.lang.String,androidx.work.impl.OperationImpl,kotlin.jvm.functions.Function0,androidx.work.WorkRequest)>($r0, r1, r3, r4, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.work.impl.WorkerUpdater: void enqueueUniquelyNamedPeriodic$lambda$3(androidx.work.impl.WorkManagerImpl,java.lang.String,androidx.work.impl.OperationImpl,kotlin.jvm.functions.Function0,androidx.work.WorkRequest)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r8.<androidx.work.impl.utils.taskexecutor.SerialExecutor: void execute(java.lang.Runnable)>($r9);

        $r10 = (androidx.work.Operation) r3;

        return $r10;
    }

    private static final void failWorkTypeChanged(androidx.work.impl.OperationImpl, java.lang.String)
    {
        androidx.work.impl.OperationImpl $r0;
        java.lang.String r1;
        androidx.work.Operation$State$FAILURE $r2;
        java.lang.UnsupportedOperationException $r3;
        java.lang.Throwable $r4;
        androidx.work.Operation$State $r5;

        $r0 := @parameter0: androidx.work.impl.OperationImpl;

        r1 := @parameter1: java.lang.String;

        $r2 = new androidx.work.Operation$State$FAILURE;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>(r1);

        $r4 = (java.lang.Throwable) $r3;

        specialinvoke $r2.<androidx.work.Operation$State$FAILURE: void <init>(java.lang.Throwable)>($r4);

        $r5 = (androidx.work.Operation$State) $r2;

        virtualinvoke $r0.<androidx.work.impl.OperationImpl: void markState(androidx.work.Operation$State)>($r5);

        return;
    }

    private static final void updateWorkImpl$lambda$1(androidx.work.impl.WorkDatabase, androidx.work.impl.model.WorkSpec, androidx.work.impl.model.WorkSpec, java.util.List, java.lang.String, java.util.Set, boolean)
    {
        androidx.work.impl.WorkDatabase $r0;
        androidx.work.impl.model.WorkSpec $r1, $r2, r8, $r10;
        java.util.List $r3;
        java.lang.String $r4;
        java.util.Set $r5;
        boolean $z0;
        androidx.work.impl.model.WorkSpecDao r6;
        androidx.work.impl.model.WorkTagDao r7;
        androidx.work.WorkInfo$State $r9;
        int $i0, $i2, $i3;
        long $l1;
        androidx.work.impl.model.WorkProgressDao $r11;

        $r0 := @parameter0: androidx.work.impl.WorkDatabase;

        $r1 := @parameter1: androidx.work.impl.model.WorkSpec;

        $r2 := @parameter2: androidx.work.impl.model.WorkSpec;

        $r3 := @parameter3: java.util.List;

        $r4 := @parameter4: java.lang.String;

        $r5 := @parameter5: java.util.Set;

        $z0 := @parameter6: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$workDatabase");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$newWorkSpec");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "$oldWorkSpec");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "$schedulers");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r4, "$workSpecId");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r5, "$tags");

        r6 = virtualinvoke $r0.<androidx.work.impl.WorkDatabase: androidx.work.impl.model.WorkSpecDao workSpecDao()>();

        r7 = virtualinvoke $r0.<androidx.work.impl.WorkDatabase: androidx.work.impl.model.WorkTagDao workTagDao()>();

        $r9 = $r2.<androidx.work.impl.model.WorkSpec: androidx.work.WorkInfo$State state>;

        $i0 = $r2.<androidx.work.impl.model.WorkSpec: int runAttemptCount>;

        $l1 = $r2.<androidx.work.impl.model.WorkSpec: long lastEnqueueTime>;

        $i2 = virtualinvoke $r2.<androidx.work.impl.model.WorkSpec: int getGeneration()>();

        $i3 = $i2 + 1;

        r8 = staticinvoke <androidx.work.impl.model.WorkSpec: androidx.work.impl.model.WorkSpec copy$default(androidx.work.impl.model.WorkSpec,java.lang.String,androidx.work.WorkInfo$State,java.lang.String,java.lang.String,androidx.work.Data,androidx.work.Data,long,long,long,androidx.work.Constraints,int,androidx.work.BackoffPolicy,long,long,long,long,boolean,androidx.work.OutOfQuotaPolicy,int,int,int,java.lang.Object)>($r1, null, $r9, null, null, null, null, 0L, 0L, 0L, null, $i0, null, 0L, $l1, 0L, 0L, 0, null, 0, $i3, 515069, null);

        $r10 = staticinvoke <androidx.work.impl.utils.EnqueueUtilsKt: androidx.work.impl.model.WorkSpec wrapInConstraintTrackingWorkerIfNeeded(java.util.List,androidx.work.impl.model.WorkSpec)>($r3, r8);

        interfaceinvoke r6.<androidx.work.impl.model.WorkSpecDao: void updateWorkSpec(androidx.work.impl.model.WorkSpec)>($r10);

        interfaceinvoke r7.<androidx.work.impl.model.WorkTagDao: void deleteByWorkSpecId(java.lang.String)>($r4);

        interfaceinvoke r7.<androidx.work.impl.model.WorkTagDao: void insertTags(java.lang.String,java.util.Set)>($r4, $r5);

        if $z0 != 0 goto label1;

        interfaceinvoke r6.<androidx.work.impl.model.WorkSpecDao: int markWorkSpecScheduled(java.lang.String,long)>($r4, -1L);

        $r11 = virtualinvoke $r0.<androidx.work.impl.WorkDatabase: androidx.work.impl.model.WorkProgressDao workProgressDao()>();

        interfaceinvoke $r11.<androidx.work.impl.model.WorkProgressDao: void delete(java.lang.String)>($r4);

     label1:
        return;
    }

    private static final void updateWorkImpl$lambda$2(androidx.work.impl.utils.futures.SettableFuture, androidx.work.impl.WorkManagerImpl, androidx.work.WorkRequest)
    {
        androidx.work.impl.utils.futures.SettableFuture $r0;
        androidx.work.impl.WorkManagerImpl $r1;
        androidx.work.WorkRequest $r2;
        boolean $z0;
        androidx.work.impl.Processor $r3;
        androidx.work.impl.WorkDatabase $r4;
        androidx.work.Configuration $r5;
        java.util.List $r6;
        androidx.work.impl.model.WorkSpec $r7;
        java.util.Set $r8;
        java.lang.Throwable $r9, r11;
        androidx.work.WorkManager$UpdateResult r10;

        $r0 := @parameter0: androidx.work.impl.utils.futures.SettableFuture;

        $r1 := @parameter1: androidx.work.impl.WorkManagerImpl;

        $r2 := @parameter2: androidx.work.WorkRequest;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this_updateWorkImpl");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "$workRequest");

        $z0 = virtualinvoke $r0.<androidx.work.impl.utils.futures.SettableFuture: boolean isCancelled()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = virtualinvoke $r1.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.Processor getProcessor()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "processor");

        $r4 = virtualinvoke $r1.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.WorkDatabase getWorkDatabase()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "workDatabase");

        $r5 = virtualinvoke $r1.<androidx.work.impl.WorkManagerImpl: androidx.work.Configuration getConfiguration()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "configuration");

        $r6 = virtualinvoke $r1.<androidx.work.impl.WorkManagerImpl: java.util.List getSchedulers()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "schedulers");

        $r7 = virtualinvoke $r2.<androidx.work.WorkRequest: androidx.work.impl.model.WorkSpec getWorkSpec()>();

        $r8 = virtualinvoke $r2.<androidx.work.WorkRequest: java.util.Set getTags()>();

        r10 = staticinvoke <androidx.work.impl.WorkerUpdater: androidx.work.WorkManager$UpdateResult updateWorkImpl(androidx.work.impl.Processor,androidx.work.impl.WorkDatabase,androidx.work.Configuration,java.util.List,androidx.work.impl.model.WorkSpec,java.util.Set)>($r3, $r4, $r5, $r6, $r7, $r8);

        virtualinvoke $r0.<androidx.work.impl.utils.futures.SettableFuture: boolean set(java.lang.Object)>(r10);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        r11 = $r9;

        virtualinvoke $r0.<androidx.work.impl.utils.futures.SettableFuture: boolean setException(java.lang.Throwable)>(r11);

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private static final void enqueueUniquelyNamedPeriodic$lambda$3(androidx.work.impl.WorkManagerImpl, java.lang.String, androidx.work.impl.OperationImpl, kotlin.jvm.functions.Function0, androidx.work.WorkRequest)
    {
        androidx.work.impl.WorkManagerImpl $r0;
        java.lang.String $r1, $r13, $r17, $r26, $r32, $r37;
        androidx.work.impl.OperationImpl $r2;
        kotlin.jvm.functions.Function0 $r3;
        androidx.work.WorkRequest $r4;
        androidx.work.impl.model.WorkSpecDao r5;
        java.util.List r6, $r21;
        androidx.work.impl.model.WorkSpec$IdAndState r7;
        androidx.work.impl.model.WorkSpec r8, r9, $r16;
        java.lang.Throwable r10, $r38, $r41;
        androidx.work.impl.WorkDatabase $r11, $r19;
        int $i0;
        java.lang.Object $r12;
        boolean $z0;
        androidx.work.WorkInfo$State $r14, $r15;
        androidx.work.impl.Processor $r18;
        androidx.work.Configuration $r20;
        java.util.Set $r22;
        androidx.work.Operation$State$SUCCESS $r24;
        androidx.work.Operation$State $r25, $r39, $r43;
        androidx.work.Operation$State$FAILURE $r28, $r42;
        java.lang.IllegalStateException $r29;
        java.lang.StringBuilder $r30, $r31, $r33, $r34, $r35, $r36;

        $r0 := @parameter0: androidx.work.impl.WorkManagerImpl;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: androidx.work.impl.OperationImpl;

        $r3 := @parameter3: kotlin.jvm.functions.Function0;

        $r4 := @parameter4: androidx.work.WorkRequest;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this_enqueueUniquelyNamedPeriodic");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$name");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "$operation");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "$enqueueNew");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r4, "$workRequest");

        $r11 = virtualinvoke $r0.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.WorkDatabase getWorkDatabase()>();

        r5 = virtualinvoke $r11.<androidx.work.impl.WorkDatabase: androidx.work.impl.model.WorkSpecDao workSpecDao()>();

        r6 = interfaceinvoke r5.<androidx.work.impl.model.WorkSpecDao: java.util.List getWorkSpecIdAndStatesForName(java.lang.String)>($r1);

        $i0 = interfaceinvoke r6.<java.util.List: int size()>();

        if $i0 <= 1 goto label1;

        staticinvoke <androidx.work.impl.WorkerUpdater: void failWorkTypeChanged(androidx.work.impl.OperationImpl,java.lang.String)>($r2, "Can\'t apply UPDATE policy to the chains of work.");

        return;

     label1:
        $r12 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object firstOrNull(java.util.List)>(r6);

        r7 = (androidx.work.impl.model.WorkSpec$IdAndState) $r12;

        if r7 != null goto label2;

        interfaceinvoke $r3.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        return;

     label2:
        $r13 = r7.<androidx.work.impl.model.WorkSpec$IdAndState: java.lang.String id>;

        r8 = interfaceinvoke r5.<androidx.work.impl.model.WorkSpecDao: androidx.work.impl.model.WorkSpec getWorkSpec(java.lang.String)>($r13);

        if r8 != null goto label3;

        $r28 = new androidx.work.Operation$State$FAILURE;

        $r29 = new java.lang.IllegalStateException;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WorkSpec with ");

        $r32 = r7.<androidx.work.impl.model.WorkSpec$IdAndState: java.lang.String id>;

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", that matches a name \"");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\", wasn\'t found");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r37);

        $r38 = (java.lang.Throwable) $r29;

        specialinvoke $r28.<androidx.work.Operation$State$FAILURE: void <init>(java.lang.Throwable)>($r38);

        $r39 = (androidx.work.Operation$State) $r28;

        virtualinvoke $r2.<androidx.work.impl.OperationImpl: void markState(androidx.work.Operation$State)>($r39);

        return;

     label3:
        $z0 = virtualinvoke r8.<androidx.work.impl.model.WorkSpec: boolean isPeriodic()>();

        if $z0 != 0 goto label4;

        staticinvoke <androidx.work.impl.WorkerUpdater: void failWorkTypeChanged(androidx.work.impl.OperationImpl,java.lang.String)>($r2, "Can\'t update OneTimeWorker to Periodic Worker. Update operation must preserve worker\'s type.");

        return;

     label4:
        $r15 = r7.<androidx.work.impl.model.WorkSpec$IdAndState: androidx.work.WorkInfo$State state>;

        $r14 = <androidx.work.WorkInfo$State: androidx.work.WorkInfo$State CANCELLED>;

        if $r15 != $r14 goto label5;

        $r26 = r7.<androidx.work.impl.model.WorkSpec$IdAndState: java.lang.String id>;

        interfaceinvoke r5.<androidx.work.impl.model.WorkSpecDao: void delete(java.lang.String)>($r26);

        interfaceinvoke $r3.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        return;

     label5:
        $r16 = virtualinvoke $r4.<androidx.work.WorkRequest: androidx.work.impl.model.WorkSpec getWorkSpec()>();

        $r17 = r7.<androidx.work.impl.model.WorkSpec$IdAndState: java.lang.String id>;

        r9 = staticinvoke <androidx.work.impl.model.WorkSpec: androidx.work.impl.model.WorkSpec copy$default(androidx.work.impl.model.WorkSpec,java.lang.String,androidx.work.WorkInfo$State,java.lang.String,java.lang.String,androidx.work.Data,androidx.work.Data,long,long,long,androidx.work.Constraints,int,androidx.work.BackoffPolicy,long,long,long,long,boolean,androidx.work.OutOfQuotaPolicy,int,int,int,java.lang.Object)>($r16, $r17, null, null, null, null, null, 0L, 0L, 0L, null, 0, null, 0L, 0L, 0L, 0L, 0, null, 0, 0, 1048574, null);

     label6:
        $r18 = virtualinvoke $r0.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.Processor getProcessor()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r18, "processor");

        $r19 = virtualinvoke $r0.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.WorkDatabase getWorkDatabase()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r19, "workDatabase");

        $r20 = virtualinvoke $r0.<androidx.work.impl.WorkManagerImpl: androidx.work.Configuration getConfiguration()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r20, "configuration");

        $r21 = virtualinvoke $r0.<androidx.work.impl.WorkManagerImpl: java.util.List getSchedulers()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r21, "schedulers");

        $r22 = virtualinvoke $r4.<androidx.work.WorkRequest: java.util.Set getTags()>();

        staticinvoke <androidx.work.impl.WorkerUpdater: androidx.work.WorkManager$UpdateResult updateWorkImpl(androidx.work.impl.Processor,androidx.work.impl.WorkDatabase,androidx.work.Configuration,java.util.List,androidx.work.impl.model.WorkSpec,java.util.Set)>($r18, $r19, $r20, $r21, r9, $r22);

        $r24 = <androidx.work.Operation: androidx.work.Operation$State$SUCCESS SUCCESS>;

        $r25 = (androidx.work.Operation$State) $r24;

        virtualinvoke $r2.<androidx.work.impl.OperationImpl: void markState(androidx.work.Operation$State)>($r25);

     label7:
        goto label9;

     label8:
        $r41 := @caughtexception;

        r10 = $r41;

        $r42 = new androidx.work.Operation$State$FAILURE;

        specialinvoke $r42.<androidx.work.Operation$State$FAILURE: void <init>(java.lang.Throwable)>(r10);

        $r43 = (androidx.work.Operation$State) $r42;

        virtualinvoke $r2.<androidx.work.impl.OperationImpl: void markState(androidx.work.Operation$State)>($r43);

     label9:
        return;

        catch java.lang.Throwable from label6 to label7 with label8;
    }

androidx.work.impl.WorkerUpdater$enqueueUniquelyNamedPeriodic$enqueueNew$1
<androidx.work.impl.WorkerUpdater$enqueueUniquelyNamedPeriodic$enqueueNew$1: androidx.work.WorkRequest $workRequest>
<androidx.work.impl.WorkerUpdater$enqueueUniquelyNamedPeriodic$enqueueNew$1: androidx.work.impl.WorkManagerImpl $this_enqueueUniquelyNamedPeriodic>
<androidx.work.impl.WorkerUpdater$enqueueUniquelyNamedPeriodic$enqueueNew$1: java.lang.String $name>
<androidx.work.impl.WorkerUpdater$enqueueUniquelyNamedPeriodic$enqueueNew$1: androidx.work.impl.OperationImpl $operation>
    void <init>(androidx.work.WorkRequest, androidx.work.impl.WorkManagerImpl, java.lang.String, androidx.work.impl.OperationImpl)
    {
        androidx.work.impl.WorkerUpdater$enqueueUniquelyNamedPeriodic$enqueueNew$1 r0;
        androidx.work.WorkRequest $r1;
        androidx.work.impl.WorkManagerImpl $r2;
        java.lang.String $r3;
        androidx.work.impl.OperationImpl $r4;

        r0 := @this: androidx.work.impl.WorkerUpdater$enqueueUniquelyNamedPeriodic$enqueueNew$1;

        $r1 := @parameter0: androidx.work.WorkRequest;

        $r2 := @parameter1: androidx.work.impl.WorkManagerImpl;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: androidx.work.impl.OperationImpl;

        r0.<androidx.work.impl.WorkerUpdater$enqueueUniquelyNamedPeriodic$enqueueNew$1: androidx.work.WorkRequest $workRequest> = $r1;

        r0.<androidx.work.impl.WorkerUpdater$enqueueUniquelyNamedPeriodic$enqueueNew$1: androidx.work.impl.WorkManagerImpl $this_enqueueUniquelyNamedPeriodic> = $r2;

        r0.<androidx.work.impl.WorkerUpdater$enqueueUniquelyNamedPeriodic$enqueueNew$1: java.lang.String $name> = $r3;

        r0.<androidx.work.impl.WorkerUpdater$enqueueUniquelyNamedPeriodic$enqueueNew$1: androidx.work.impl.OperationImpl $operation> = $r4;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.work.impl.WorkerUpdater$enqueueUniquelyNamedPeriodic$enqueueNew$1 r0;
        java.util.List r1;
        androidx.work.impl.WorkContinuationImpl r2, $r4;
        androidx.work.WorkRequest $r3;
        androidx.work.ExistingWorkPolicy $r5;
        java.lang.String $r6;
        androidx.work.impl.WorkManagerImpl $r7;
        androidx.work.impl.utils.EnqueueRunnable $r8;
        androidx.work.impl.OperationImpl $r9;

        r0 := @this: androidx.work.impl.WorkerUpdater$enqueueUniquelyNamedPeriodic$enqueueNew$1;

        $r3 = r0.<androidx.work.impl.WorkerUpdater$enqueueUniquelyNamedPeriodic$enqueueNew$1: androidx.work.WorkRequest $workRequest>;

        r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r3);

        $r4 = new androidx.work.impl.WorkContinuationImpl;

        $r7 = r0.<androidx.work.impl.WorkerUpdater$enqueueUniquelyNamedPeriodic$enqueueNew$1: androidx.work.impl.WorkManagerImpl $this_enqueueUniquelyNamedPeriodic>;

        $r6 = r0.<androidx.work.impl.WorkerUpdater$enqueueUniquelyNamedPeriodic$enqueueNew$1: java.lang.String $name>;

        $r5 = <androidx.work.ExistingWorkPolicy: androidx.work.ExistingWorkPolicy KEEP>;

        specialinvoke $r4.<androidx.work.impl.WorkContinuationImpl: void <init>(androidx.work.impl.WorkManagerImpl,java.lang.String,androidx.work.ExistingWorkPolicy,java.util.List)>($r7, $r6, $r5, r1);

        r2 = $r4;

        $r8 = new androidx.work.impl.utils.EnqueueRunnable;

        $r9 = r0.<androidx.work.impl.WorkerUpdater$enqueueUniquelyNamedPeriodic$enqueueNew$1: androidx.work.impl.OperationImpl $operation>;

        specialinvoke $r8.<androidx.work.impl.utils.EnqueueRunnable: void <init>(androidx.work.impl.WorkContinuationImpl,androidx.work.impl.OperationImpl)>(r2, $r9);

        virtualinvoke $r8.<androidx.work.impl.utils.EnqueueRunnable: void run()>();

        return;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.work.impl.WorkerUpdater$enqueueUniquelyNamedPeriodic$enqueueNew$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.work.impl.WorkerUpdater$enqueueUniquelyNamedPeriodic$enqueueNew$1;

        virtualinvoke r0.<androidx.work.impl.WorkerUpdater$enqueueUniquelyNamedPeriodic$enqueueNew$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

androidx.work.impl.WorkerUpdater$updateWorkImpl$type$1
<androidx.work.impl.WorkerUpdater$updateWorkImpl$type$1: androidx.work.impl.WorkerUpdater$updateWorkImpl$type$1 INSTANCE>
    void <init>()
    {
        androidx.work.impl.WorkerUpdater$updateWorkImpl$type$1 r0;

        r0 := @this: androidx.work.impl.WorkerUpdater$updateWorkImpl$type$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.String invoke(androidx.work.impl.model.WorkSpec)
    {
        androidx.work.impl.WorkerUpdater$updateWorkImpl$type$1 r0;
        androidx.work.impl.model.WorkSpec r1;
        boolean $z0;
        java.lang.String $r2;

        r0 := @this: androidx.work.impl.WorkerUpdater$updateWorkImpl$type$1;

        r1 := @parameter0: androidx.work.impl.model.WorkSpec;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "spec");

        $z0 = virtualinvoke r1.<androidx.work.impl.model.WorkSpec: boolean isPeriodic()>();

        if $z0 == 0 goto label1;

        $r2 = "Periodic";

        goto label2;

     label1:
        $r2 = "OneTime";

     label2:
        return $r2;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.work.impl.WorkerUpdater$updateWorkImpl$type$1 r0;
        java.lang.Object r1;
        androidx.work.impl.model.WorkSpec $r2;
        java.lang.String $r3;

        r0 := @this: androidx.work.impl.WorkerUpdater$updateWorkImpl$type$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.work.impl.model.WorkSpec) r1;

        $r3 = virtualinvoke r0.<androidx.work.impl.WorkerUpdater$updateWorkImpl$type$1: java.lang.String invoke(androidx.work.impl.model.WorkSpec)>($r2);

        return $r3;
    }

    static void <clinit>()
    {
        androidx.work.impl.WorkerUpdater$updateWorkImpl$type$1 $r0;

        $r0 = new androidx.work.impl.WorkerUpdater$updateWorkImpl$type$1;

        specialinvoke $r0.<androidx.work.impl.WorkerUpdater$updateWorkImpl$type$1: void <init>()>();

        <androidx.work.impl.WorkerUpdater$updateWorkImpl$type$1: androidx.work.impl.WorkerUpdater$updateWorkImpl$type$1 INSTANCE> = $r0;

        return;
    }

