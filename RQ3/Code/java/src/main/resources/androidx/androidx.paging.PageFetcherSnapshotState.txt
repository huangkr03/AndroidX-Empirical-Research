androidx.paging.PageFetcherSnapshotState
<androidx.paging.PageFetcherSnapshotState: androidx.paging.PagingConfig config>
<androidx.paging.PageFetcherSnapshotState: java.util.List _pages>
<androidx.paging.PageFetcherSnapshotState: java.util.List pages>
<androidx.paging.PageFetcherSnapshotState: int initialPageIndex>
<androidx.paging.PageFetcherSnapshotState: int _placeholdersBefore>
<androidx.paging.PageFetcherSnapshotState: int _placeholdersAfter>
<androidx.paging.PageFetcherSnapshotState: int prependGenerationId>
<androidx.paging.PageFetcherSnapshotState: int appendGenerationId>
<androidx.paging.PageFetcherSnapshotState: kotlinx.coroutines.channels.Channel prependGenerationIdCh>
<androidx.paging.PageFetcherSnapshotState: kotlinx.coroutines.channels.Channel appendGenerationIdCh>
<androidx.paging.PageFetcherSnapshotState: java.util.Map failedHintsByLoadType>
<androidx.paging.PageFetcherSnapshotState: androidx.paging.MutableLoadStateCollection sourceLoadStates>
    private void <init>(androidx.paging.PagingConfig)
    {
        androidx.paging.PageFetcherSnapshotState r0, r2;
        androidx.paging.PagingConfig r1;
        boolean z0, z1, z3, z4;
        kotlin.Unit r3;
        java.util.ArrayList $r4;
        java.util.List $r5, $r6;
        kotlinx.coroutines.channels.Channel $r7, $r8;
        java.util.LinkedHashMap $r9;
        java.util.Map $r10;
        androidx.paging.MutableLoadStateCollection $r11, r15;
        androidx.paging.LoadState$Loading $r12;
        androidx.paging.LoadState $r13;
        androidx.paging.LoadType $r14;

        r0 := @this: androidx.paging.PageFetcherSnapshotState;

        r1 := @parameter0: androidx.paging.PagingConfig;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.paging.PageFetcherSnapshotState: androidx.paging.PagingConfig config> = r1;

        z3 = 0;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = (java.util.List) $r4;

        r0.<androidx.paging.PageFetcherSnapshotState: java.util.List _pages> = $r5;

        $r6 = r0.<androidx.paging.PageFetcherSnapshotState: java.util.List _pages>;

        r0.<androidx.paging.PageFetcherSnapshotState: java.util.List pages> = $r6;

        $r7 = staticinvoke <kotlinx.coroutines.channels.ChannelKt: kotlinx.coroutines.channels.Channel Channel$default(int,kotlinx.coroutines.channels.BufferOverflow,kotlin.jvm.functions.Function1,int,java.lang.Object)>(-1, null, null, 6, null);

        r0.<androidx.paging.PageFetcherSnapshotState: kotlinx.coroutines.channels.Channel prependGenerationIdCh> = $r7;

        $r8 = staticinvoke <kotlinx.coroutines.channels.ChannelKt: kotlinx.coroutines.channels.Channel Channel$default(int,kotlinx.coroutines.channels.BufferOverflow,kotlin.jvm.functions.Function1,int,java.lang.Object)>(-1, null, null, 6, null);

        r0.<androidx.paging.PageFetcherSnapshotState: kotlinx.coroutines.channels.Channel appendGenerationIdCh> = $r8;

        z4 = 0;

        $r9 = new java.util.LinkedHashMap;

        specialinvoke $r9.<java.util.LinkedHashMap: void <init>()>();

        $r10 = (java.util.Map) $r9;

        r0.<androidx.paging.PageFetcherSnapshotState: java.util.Map failedHintsByLoadType> = $r10;

        $r11 = new androidx.paging.MutableLoadStateCollection;

        specialinvoke $r11.<androidx.paging.MutableLoadStateCollection: void <init>()>();

        r15 = $r11;

        z0 = 0;

        z1 = 0;

        r2 = r0;

        $r14 = <androidx.paging.LoadType: androidx.paging.LoadType REFRESH>;

        $r12 = <androidx.paging.LoadState$Loading: androidx.paging.LoadState$Loading INSTANCE>;

        $r13 = (androidx.paging.LoadState) $r12;

        virtualinvoke r15.<androidx.paging.MutableLoadStateCollection: void set(androidx.paging.LoadType,androidx.paging.LoadState)>($r14, $r13);

        r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        r2.<androidx.paging.PageFetcherSnapshotState: androidx.paging.MutableLoadStateCollection sourceLoadStates> = r15;

        return;
    }

    public final java.util.List getPages$paging_common()
    {
        androidx.paging.PageFetcherSnapshotState r0;
        java.util.List $r1;

        r0 := @this: androidx.paging.PageFetcherSnapshotState;

        $r1 = r0.<androidx.paging.PageFetcherSnapshotState: java.util.List pages>;

        return $r1;
    }

    public final int getInitialPageIndex$paging_common()
    {
        androidx.paging.PageFetcherSnapshotState r0;
        int $i0;

        r0 := @this: androidx.paging.PageFetcherSnapshotState;

        $i0 = r0.<androidx.paging.PageFetcherSnapshotState: int initialPageIndex>;

        return $i0;
    }

    public final int getStorageCount$paging_common()
    {
        androidx.paging.PageFetcherSnapshotState r0;
        java.lang.Iterable r1;
        boolean z0, $z2;
        java.util.Iterator r2;
        java.lang.Object r3;
        androidx.paging.PagingSource$LoadResult$Page r4;
        int i0, i1, i2;
        java.util.List $r5, $r6;

        r0 := @this: androidx.paging.PageFetcherSnapshotState;

        $r5 = r0.<androidx.paging.PageFetcherSnapshotState: java.util.List pages>;

        r1 = (java.lang.Iterable) $r5;

        z0 = 0;

        i2 = 0;

        r2 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (androidx.paging.PagingSource$LoadResult$Page) r3;

        i0 = i2;

        $r6 = virtualinvoke r4.<androidx.paging.PagingSource$LoadResult$Page: java.util.List getData()>();

        i1 = interfaceinvoke $r6.<java.util.List: int size()>();

        i2 = i0 + i1;

        goto label1;

     label2:
        return i2;
    }

    public final int getPlaceholdersBefore$paging_common()
    {
        androidx.paging.PageFetcherSnapshotState r0;
        androidx.paging.PagingConfig $r1;
        boolean $z0;
        int $i0;

        r0 := @this: androidx.paging.PageFetcherSnapshotState;

        $r1 = r0.<androidx.paging.PageFetcherSnapshotState: androidx.paging.PagingConfig config>;

        $z0 = $r1.<androidx.paging.PagingConfig: boolean enablePlaceholders>;

        if $z0 == 0 goto label1;

        $i0 = r0.<androidx.paging.PageFetcherSnapshotState: int _placeholdersBefore>;

        goto label2;

     label1:
        $i0 = 0;

     label2:
        return $i0;
    }

    public final void setPlaceholdersBefore$paging_common(int)
    {
        androidx.paging.PageFetcherSnapshotState r0;
        int i0, i1, $i2;

        r0 := @this: androidx.paging.PageFetcherSnapshotState;

        i0 := @parameter0: int;

        i1 = i0;

        if i1 != -2147483648 goto label1;

        $i2 = 0;

        goto label2;

     label1:
        $i2 = i0;

     label2:
        r0.<androidx.paging.PageFetcherSnapshotState: int _placeholdersBefore> = $i2;

        return;
    }

    public final int getPlaceholdersAfter$paging_common()
    {
        androidx.paging.PageFetcherSnapshotState r0;
        androidx.paging.PagingConfig $r1;
        boolean $z0;
        int $i0;

        r0 := @this: androidx.paging.PageFetcherSnapshotState;

        $r1 = r0.<androidx.paging.PageFetcherSnapshotState: androidx.paging.PagingConfig config>;

        $z0 = $r1.<androidx.paging.PagingConfig: boolean enablePlaceholders>;

        if $z0 == 0 goto label1;

        $i0 = r0.<androidx.paging.PageFetcherSnapshotState: int _placeholdersAfter>;

        goto label2;

     label1:
        $i0 = 0;

     label2:
        return $i0;
    }

    public final void setPlaceholdersAfter$paging_common(int)
    {
        androidx.paging.PageFetcherSnapshotState r0;
        int i0, i1, $i2;

        r0 := @this: androidx.paging.PageFetcherSnapshotState;

        i0 := @parameter0: int;

        i1 = i0;

        if i1 != -2147483648 goto label1;

        $i2 = 0;

        goto label2;

     label1:
        $i2 = i0;

     label2:
        r0.<androidx.paging.PageFetcherSnapshotState: int _placeholdersAfter> = $i2;

        return;
    }

    public final int generationId$paging_common(androidx.paging.LoadType)
    {
        androidx.paging.PageFetcherSnapshotState r0;
        androidx.paging.LoadType r1, r2;
        int i0, $i1, $i2;
        int[] $r3;
        java.lang.IllegalArgumentException $r4;
        kotlin.NoWhenBranchMatchedException $r5;

        r0 := @this: androidx.paging.PageFetcherSnapshotState;

        r1 := @parameter0: androidx.paging.LoadType;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "loadType");

        r2 = r1;

        $r3 = <androidx.paging.PageFetcherSnapshotState$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i1 = virtualinvoke r2.<androidx.paging.LoadType: int ordinal()>();

        i0 = $r3[$i1];

        tableswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            default: goto label4;
        };

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot get loadId for loadType: REFRESH");

        throw $r4;

     label2:
        $i2 = r0.<androidx.paging.PageFetcherSnapshotState: int prependGenerationId>;

        goto label5;

     label3:
        $i2 = r0.<androidx.paging.PageFetcherSnapshotState: int appendGenerationId>;

        goto label5;

     label4:
        $r5 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke $r5.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        throw $r5;

     label5:
        return $i2;
    }

    public final java.util.Map getFailedHintsByLoadType$paging_common()
    {
        androidx.paging.PageFetcherSnapshotState r0;
        java.util.Map $r1;

        r0 := @this: androidx.paging.PageFetcherSnapshotState;

        $r1 = r0.<androidx.paging.PageFetcherSnapshotState: java.util.Map failedHintsByLoadType>;

        return $r1;
    }

    public final androidx.paging.MutableLoadStateCollection getSourceLoadStates$paging_common()
    {
        androidx.paging.PageFetcherSnapshotState r0;
        androidx.paging.MutableLoadStateCollection $r1;

        r0 := @this: androidx.paging.PageFetcherSnapshotState;

        $r1 = r0.<androidx.paging.PageFetcherSnapshotState: androidx.paging.MutableLoadStateCollection sourceLoadStates>;

        return $r1;
    }

    public final kotlinx.coroutines.flow.Flow consumePrependGenerationIdAsFlow()
    {
        androidx.paging.PageFetcherSnapshotState r0;
        kotlinx.coroutines.channels.Channel $r1;
        kotlinx.coroutines.channels.ReceiveChannel $r2;
        kotlinx.coroutines.flow.Flow $r3, $r6;
        androidx.paging.PageFetcherSnapshotState$consumePrependGenerationIdAsFlow$1 $r4;
        kotlin.jvm.functions.Function2 $r5;

        r0 := @this: androidx.paging.PageFetcherSnapshotState;

        $r1 = r0.<androidx.paging.PageFetcherSnapshotState: kotlinx.coroutines.channels.Channel prependGenerationIdCh>;

        $r2 = (kotlinx.coroutines.channels.ReceiveChannel) $r1;

        $r3 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow consumeAsFlow(kotlinx.coroutines.channels.ReceiveChannel)>($r2);

        $r4 = new androidx.paging.PageFetcherSnapshotState$consumePrependGenerationIdAsFlow$1;

        specialinvoke $r4.<androidx.paging.PageFetcherSnapshotState$consumePrependGenerationIdAsFlow$1: void <init>(androidx.paging.PageFetcherSnapshotState,kotlin.coroutines.Continuation)>(r0, null);

        $r5 = (kotlin.jvm.functions.Function2) $r4;

        $r6 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow onStart(kotlinx.coroutines.flow.Flow,kotlin.jvm.functions.Function2)>($r3, $r5);

        return $r6;
    }

    public final kotlinx.coroutines.flow.Flow consumeAppendGenerationIdAsFlow()
    {
        androidx.paging.PageFetcherSnapshotState r0;
        kotlinx.coroutines.channels.Channel $r1;
        kotlinx.coroutines.channels.ReceiveChannel $r2;
        kotlinx.coroutines.flow.Flow $r3, $r6;
        androidx.paging.PageFetcherSnapshotState$consumeAppendGenerationIdAsFlow$1 $r4;
        kotlin.jvm.functions.Function2 $r5;

        r0 := @this: androidx.paging.PageFetcherSnapshotState;

        $r1 = r0.<androidx.paging.PageFetcherSnapshotState: kotlinx.coroutines.channels.Channel appendGenerationIdCh>;

        $r2 = (kotlinx.coroutines.channels.ReceiveChannel) $r1;

        $r3 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow consumeAsFlow(kotlinx.coroutines.channels.ReceiveChannel)>($r2);

        $r4 = new androidx.paging.PageFetcherSnapshotState$consumeAppendGenerationIdAsFlow$1;

        specialinvoke $r4.<androidx.paging.PageFetcherSnapshotState$consumeAppendGenerationIdAsFlow$1: void <init>(androidx.paging.PageFetcherSnapshotState,kotlin.coroutines.Continuation)>(r0, null);

        $r5 = (kotlin.jvm.functions.Function2) $r4;

        $r6 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow onStart(kotlinx.coroutines.flow.Flow,kotlin.jvm.functions.Function2)>($r3, $r5);

        return $r6;
    }

    public final androidx.paging.PageEvent toPageEvent$paging_common(androidx.paging.PagingSource$LoadResult$Page, androidx.paging.LoadType)
    {
        androidx.paging.PageFetcherSnapshotState r0;
        androidx.paging.PagingSource$LoadResult$Page $r1;
        androidx.paging.LoadType r2, r19, r23;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, $i12, $i13;
        int[] $r3, $r24;
        java.util.List $r4, $r21, r22;
        androidx.paging.PageEvent$Insert$Companion $r5, $r9, $r13;
        androidx.paging.MutableLoadStateCollection $r6, $r10, $r14;
        androidx.paging.LoadStates $r7, $r11, $r15;
        androidx.paging.PageEvent$Insert $r8, $r12, $r16;
        kotlin.NoWhenBranchMatchedException $r17, $r18;
        androidx.paging.TransformablePage $r20;
        androidx.paging.PageEvent $r25;

        r0 := @this: androidx.paging.PageFetcherSnapshotState;

        $r1 := @parameter0: androidx.paging.PagingSource$LoadResult$Page;

        r2 := @parameter1: androidx.paging.LoadType;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "loadType");

        r19 = r2;

        $r3 = <androidx.paging.PageFetcherSnapshotState$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i2 = virtualinvoke r19.<androidx.paging.LoadType: int ordinal()>();

        i11 = $r3[$i2];

        tableswitch(i11)
        {
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label03;
            default: goto label04;
        };

     label01:
        $i12 = 0;

        goto label05;

     label02:
        $i10 = r0.<androidx.paging.PageFetcherSnapshotState: int initialPageIndex>;

        $i12 = 0 - $i10;

        goto label05;

     label03:
        $r4 = r0.<androidx.paging.PageFetcherSnapshotState: java.util.List pages>;

        $i3 = interfaceinvoke $r4.<java.util.List: int size()>();

        $i4 = r0.<androidx.paging.PageFetcherSnapshotState: int initialPageIndex>;

        $i5 = $i3 - $i4;

        $i12 = $i5 - 1;

        goto label05;

     label04:
        $r18 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke $r18.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        throw $r18;

     label05:
        i0 = $i12;

        $r20 = new androidx.paging.TransformablePage;

        $r21 = virtualinvoke $r1.<androidx.paging.PagingSource$LoadResult$Page: java.util.List getData()>();

        specialinvoke $r20.<androidx.paging.TransformablePage: void <init>(int,java.util.List)>(i0, $r21);

        r22 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r20);

        r23 = r2;

        $r24 = <androidx.paging.PageFetcherSnapshotState$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i13 = virtualinvoke r23.<androidx.paging.LoadType: int ordinal()>();

        i1 = $r24[$i13];

        tableswitch(i1)
        {
            case 1: goto label06;
            case 2: goto label07;
            case 3: goto label08;
            default: goto label09;
        };

     label06:
        $r13 = <androidx.paging.PageEvent$Insert: androidx.paging.PageEvent$Insert$Companion Companion>;

        $i8 = virtualinvoke r0.<androidx.paging.PageFetcherSnapshotState: int getPlaceholdersBefore$paging_common()>();

        $i9 = virtualinvoke r0.<androidx.paging.PageFetcherSnapshotState: int getPlaceholdersAfter$paging_common()>();

        $r14 = r0.<androidx.paging.PageFetcherSnapshotState: androidx.paging.MutableLoadStateCollection sourceLoadStates>;

        $r15 = virtualinvoke $r14.<androidx.paging.MutableLoadStateCollection: androidx.paging.LoadStates snapshot()>();

        $r16 = virtualinvoke $r13.<androidx.paging.PageEvent$Insert$Companion: androidx.paging.PageEvent$Insert Refresh(java.util.List,int,int,androidx.paging.LoadStates,androidx.paging.LoadStates)>(r22, $i8, $i9, $r15, null);

        $r25 = (androidx.paging.PageEvent) $r16;

        goto label10;

     label07:
        $r9 = <androidx.paging.PageEvent$Insert: androidx.paging.PageEvent$Insert$Companion Companion>;

        $i7 = virtualinvoke r0.<androidx.paging.PageFetcherSnapshotState: int getPlaceholdersBefore$paging_common()>();

        $r10 = r0.<androidx.paging.PageFetcherSnapshotState: androidx.paging.MutableLoadStateCollection sourceLoadStates>;

        $r11 = virtualinvoke $r10.<androidx.paging.MutableLoadStateCollection: androidx.paging.LoadStates snapshot()>();

        $r12 = virtualinvoke $r9.<androidx.paging.PageEvent$Insert$Companion: androidx.paging.PageEvent$Insert Prepend(java.util.List,int,androidx.paging.LoadStates,androidx.paging.LoadStates)>(r22, $i7, $r11, null);

        $r25 = (androidx.paging.PageEvent) $r12;

        goto label10;

     label08:
        $r5 = <androidx.paging.PageEvent$Insert: androidx.paging.PageEvent$Insert$Companion Companion>;

        $i6 = virtualinvoke r0.<androidx.paging.PageFetcherSnapshotState: int getPlaceholdersAfter$paging_common()>();

        $r6 = r0.<androidx.paging.PageFetcherSnapshotState: androidx.paging.MutableLoadStateCollection sourceLoadStates>;

        $r7 = virtualinvoke $r6.<androidx.paging.MutableLoadStateCollection: androidx.paging.LoadStates snapshot()>();

        $r8 = virtualinvoke $r5.<androidx.paging.PageEvent$Insert$Companion: androidx.paging.PageEvent$Insert Append(java.util.List,int,androidx.paging.LoadStates,androidx.paging.LoadStates)>(r22, $i6, $r7, null);

        $r25 = (androidx.paging.PageEvent) $r8;

        goto label10;

     label09:
        $r17 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke $r17.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        throw $r17;

     label10:
        return $r25;
    }

    public final boolean insert(int, androidx.paging.LoadType, androidx.paging.PagingSource$LoadResult$Page)
    {
        androidx.paging.PageFetcherSnapshotState r0, r37;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, $i17, $i18;
        androidx.paging.LoadType r1, r3, $r7, $r17;
        androidx.paging.PagingSource$LoadResult$Page r2;
        int[] $r4;
        java.util.List $r5, $r6, $r10, $r15, $r16, $r20, $r25, $r26;
        boolean $z0, $z2, z4, z5, z6, $z8, z9, z10, z11, z13, $z14, z15, z16, z17, z19, $z20, z21, z22, z23;
        java.util.Map $r8, $r18;
        java.lang.IllegalStateException $r12, $r22, $r27, $r30;
        java.lang.String $r13, $r23, $r28, $r31, r33, r34, r36, r39;
        java.lang.Throwable $r14, $r24, $r29, $r32;
        java.util.Collection r35, r38;

        r0 := @this: androidx.paging.PageFetcherSnapshotState;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.paging.LoadType;

        r2 := @parameter2: androidx.paging.PagingSource$LoadResult$Page;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "loadType");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "page");

        r3 = r1;

        $r4 = <androidx.paging.PageFetcherSnapshotState$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i2 = virtualinvoke r3.<androidx.paging.LoadType: int ordinal()>();

        i1 = $r4[$i2];

        tableswitch(i1)
        {
            case 1: goto label01;
            case 2: goto label06;
            case 3: goto label13;
            default: goto label20;
        };

     label01:
        $r25 = r0.<androidx.paging.PageFetcherSnapshotState: java.util.List pages>;

        z4 = interfaceinvoke $r25.<java.util.List: boolean isEmpty()>();

        z5 = 0;

        z6 = 0;

        if z4 != 0 goto label02;

        r33 = "cannot receive multiple init calls";

        $r30 = new java.lang.IllegalStateException;

        $r31 = virtualinvoke r33.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r30.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r31);

        $r32 = (java.lang.Throwable) $r30;

        throw $r32;

     label02:
        if i0 != 0 goto label03;

        $z8 = 1;

        goto label04;

     label03:
        $z8 = 0;

     label04:
        z9 = $z8;

        z10 = 0;

        z11 = 0;

        if z9 != 0 goto label05;

        r34 = "init loadId must be the initial value, 0";

        $r27 = new java.lang.IllegalStateException;

        $r28 = virtualinvoke r34.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r27.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r28);

        $r29 = (java.lang.Throwable) $r27;

        throw $r29;

     label05:
        $r26 = r0.<androidx.paging.PageFetcherSnapshotState: java.util.List _pages>;

        interfaceinvoke $r26.<java.util.List: boolean add(java.lang.Object)>(r2);

        r0.<androidx.paging.PageFetcherSnapshotState: int initialPageIndex> = 0;

        $i14 = virtualinvoke r2.<androidx.paging.PagingSource$LoadResult$Page: int getItemsAfter()>();

        virtualinvoke r0.<androidx.paging.PageFetcherSnapshotState: void setPlaceholdersAfter$paging_common(int)>($i14);

        $i15 = virtualinvoke r2.<androidx.paging.PagingSource$LoadResult$Page: int getItemsBefore()>();

        virtualinvoke r0.<androidx.paging.PageFetcherSnapshotState: void setPlaceholdersBefore$paging_common(int)>($i15);

        goto label20;

     label06:
        $r15 = r0.<androidx.paging.PageFetcherSnapshotState: java.util.List pages>;

        r35 = (java.util.Collection) $r15;

        z13 = 0;

        $z2 = interfaceinvoke r35.<java.util.Collection: boolean isEmpty()>();

        if $z2 != 0 goto label07;

        $z14 = 1;

        goto label08;

     label07:
        $z14 = 0;

     label08:
        z15 = $z14;

        z16 = 0;

        z17 = 0;

        if z15 != 0 goto label09;

        r36 = "should\'ve received an init before prepend";

        $r22 = new java.lang.IllegalStateException;

        $r23 = virtualinvoke r36.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r23);

        $r24 = (java.lang.Throwable) $r22;

        throw $r24;

     label09:
        $i8 = r0.<androidx.paging.PageFetcherSnapshotState: int prependGenerationId>;

        if i0 == $i8 goto label10;

        return 0;

     label10:
        $r16 = r0.<androidx.paging.PageFetcherSnapshotState: java.util.List _pages>;

        interfaceinvoke $r16.<java.util.List: void add(int,java.lang.Object)>(0, r2);

        r37 = r0;

        i16 = r37.<androidx.paging.PageFetcherSnapshotState: int initialPageIndex>;

        $i9 = i16 + 1;

        r37.<androidx.paging.PageFetcherSnapshotState: int initialPageIndex> = $i9;

        $i10 = virtualinvoke r2.<androidx.paging.PagingSource$LoadResult$Page: int getItemsBefore()>();

        if $i10 != -2147483648 goto label11;

        $i11 = virtualinvoke r0.<androidx.paging.PageFetcherSnapshotState: int getPlaceholdersBefore$paging_common()>();

        $r20 = virtualinvoke r2.<androidx.paging.PagingSource$LoadResult$Page: java.util.List getData()>();

        $i12 = interfaceinvoke $r20.<java.util.List: int size()>();

        $i13 = $i11 - $i12;

        $i17 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtLeast(int,int)>($i13, 0);

        goto label12;

     label11:
        $i17 = virtualinvoke r2.<androidx.paging.PagingSource$LoadResult$Page: int getItemsBefore()>();

     label12:
        virtualinvoke r0.<androidx.paging.PageFetcherSnapshotState: void setPlaceholdersBefore$paging_common(int)>($i17);

        $r18 = r0.<androidx.paging.PageFetcherSnapshotState: java.util.Map failedHintsByLoadType>;

        $r17 = <androidx.paging.LoadType: androidx.paging.LoadType PREPEND>;

        interfaceinvoke $r18.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r17);

        goto label20;

     label13:
        $r5 = r0.<androidx.paging.PageFetcherSnapshotState: java.util.List pages>;

        r38 = (java.util.Collection) $r5;

        z19 = 0;

        $z0 = interfaceinvoke r38.<java.util.Collection: boolean isEmpty()>();

        if $z0 != 0 goto label14;

        $z20 = 1;

        goto label15;

     label14:
        $z20 = 0;

     label15:
        z21 = $z20;

        z22 = 0;

        z23 = 0;

        if z21 != 0 goto label16;

        r39 = "should\'ve received an init before append";

        $r12 = new java.lang.IllegalStateException;

        $r13 = virtualinvoke r39.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        $r14 = (java.lang.Throwable) $r12;

        throw $r14;

     label16:
        $i3 = r0.<androidx.paging.PageFetcherSnapshotState: int appendGenerationId>;

        if i0 == $i3 goto label17;

        return 0;

     label17:
        $r6 = r0.<androidx.paging.PageFetcherSnapshotState: java.util.List _pages>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r2);

        $i4 = virtualinvoke r2.<androidx.paging.PagingSource$LoadResult$Page: int getItemsAfter()>();

        if $i4 != -2147483648 goto label18;

        $i5 = virtualinvoke r0.<androidx.paging.PageFetcherSnapshotState: int getPlaceholdersAfter$paging_common()>();

        $r10 = virtualinvoke r2.<androidx.paging.PagingSource$LoadResult$Page: java.util.List getData()>();

        $i6 = interfaceinvoke $r10.<java.util.List: int size()>();

        $i7 = $i5 - $i6;

        $i18 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtLeast(int,int)>($i7, 0);

        goto label19;

     label18:
        $i18 = virtualinvoke r2.<androidx.paging.PagingSource$LoadResult$Page: int getItemsAfter()>();

     label19:
        virtualinvoke r0.<androidx.paging.PageFetcherSnapshotState: void setPlaceholdersAfter$paging_common(int)>($i18);

        $r8 = r0.<androidx.paging.PageFetcherSnapshotState: java.util.Map failedHintsByLoadType>;

        $r7 = <androidx.paging.LoadType: androidx.paging.LoadType APPEND>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r7);

     label20:
        return 1;
    }

    public final void drop(androidx.paging.PageEvent$Drop)
    {
        androidx.paging.PageFetcherSnapshotState r0, r37, r38, r39;
        androidx.paging.PageEvent$Drop r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17, i18, i19, i20, $i21, i22, i23, i24, i25, $i26;
        java.util.List $r2, $r15, $r16, $r21, $r28;
        java.util.Map $r3;
        androidx.paging.LoadType $r4, $r7, $r24, r36;
        androidx.paging.MutableLoadStateCollection $r6;
        androidx.paging.LoadState$NotLoading$Companion $r8;
        androidx.paging.LoadState$NotLoading $r9;
        androidx.paging.LoadState $r10;
        int[] $r11;
        kotlinx.coroutines.channels.Channel $r12, $r18;
        java.lang.Integer $r13, $r19;
        java.lang.IllegalArgumentException $r23;
        java.lang.String $r25, $r33, r35;
        java.lang.StringBuilder $r26, $r27, $r29, $r30, $r31;
        java.lang.IllegalStateException $r32;
        java.lang.Throwable $r34;
        boolean $z0, z1, z2, z3, z6, z9;

        r0 := @this: androidx.paging.PageFetcherSnapshotState;

        r1 := @parameter0: androidx.paging.PageEvent$Drop;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "event");

        $i0 = virtualinvoke r1.<androidx.paging.PageEvent$Drop: int getPageCount()>();

        $r2 = r0.<androidx.paging.PageFetcherSnapshotState: java.util.List pages>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 > $i1 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        z1 = $z0;

        z2 = 0;

        z3 = 0;

        if z1 != 0 goto label03;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid drop count. have ");

        $r28 = virtualinvoke r0.<androidx.paging.PageFetcherSnapshotState: java.util.List getPages$paging_common()>();

        $i14 = interfaceinvoke $r28.<java.util.List: int size()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i14);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but wanted to drop ");

        $i15 = virtualinvoke r1.<androidx.paging.PageEvent$Drop: int getPageCount()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i15);

        r35 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        $r32 = new java.lang.IllegalStateException;

        $r33 = virtualinvoke r35.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r32.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r33);

        $r34 = (java.lang.Throwable) $r32;

        throw $r34;

     label03:
        $r3 = r0.<androidx.paging.PageFetcherSnapshotState: java.util.Map failedHintsByLoadType>;

        $r4 = virtualinvoke r1.<androidx.paging.PageEvent$Drop: androidx.paging.LoadType getLoadType()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r4);

        $r6 = r0.<androidx.paging.PageFetcherSnapshotState: androidx.paging.MutableLoadStateCollection sourceLoadStates>;

        $r7 = virtualinvoke r1.<androidx.paging.PageEvent$Drop: androidx.paging.LoadType getLoadType()>();

        $r8 = <androidx.paging.LoadState$NotLoading: androidx.paging.LoadState$NotLoading$Companion Companion>;

        $r9 = virtualinvoke $r8.<androidx.paging.LoadState$NotLoading$Companion: androidx.paging.LoadState$NotLoading getIncomplete$paging_common()>();

        $r10 = (androidx.paging.LoadState) $r9;

        virtualinvoke $r6.<androidx.paging.MutableLoadStateCollection: void set(androidx.paging.LoadType,androidx.paging.LoadState)>($r7, $r10);

        r36 = virtualinvoke r1.<androidx.paging.PageEvent$Drop: androidx.paging.LoadType getLoadType()>();

        $r11 = <androidx.paging.PageFetcherSnapshotState$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i2 = virtualinvoke r36.<androidx.paging.LoadType: int ordinal()>();

        i16 = $r11[$i2];

        tableswitch(i16)
        {
            case 2: goto label04;
            case 3: goto label07;
            default: goto label10;
        };

     label04:
        i17 = virtualinvoke r1.<androidx.paging.PageEvent$Drop: int getPageCount()>();

        z6 = 0;

        i18 = 0;

        i19 = i17;

     label05:
        if i18 >= i19 goto label06;

        i20 = i18;

        $r21 = r0.<androidx.paging.PageFetcherSnapshotState: java.util.List _pages>;

        interfaceinvoke $r21.<java.util.List: java.lang.Object remove(int)>(0);

        i18 = i18 + 1;

        goto label05;

     label06:
        r37 = r0;

        $i8 = r37.<androidx.paging.PageFetcherSnapshotState: int initialPageIndex>;

        $i9 = virtualinvoke r1.<androidx.paging.PageEvent$Drop: int getPageCount()>();

        $i10 = $i8 - $i9;

        r37.<androidx.paging.PageFetcherSnapshotState: int initialPageIndex> = $i10;

        $i11 = virtualinvoke r1.<androidx.paging.PageEvent$Drop: int getPlaceholdersRemaining()>();

        virtualinvoke r0.<androidx.paging.PageFetcherSnapshotState: void setPlaceholdersBefore$paging_common(int)>($i11);

        r38 = r0;

        $i21 = r38.<androidx.paging.PageFetcherSnapshotState: int prependGenerationId>;

        $i12 = $i21 + 1;

        r38.<androidx.paging.PageFetcherSnapshotState: int prependGenerationId> = $i12;

        $r18 = r0.<androidx.paging.PageFetcherSnapshotState: kotlinx.coroutines.channels.Channel prependGenerationIdCh>;

        $i13 = r0.<androidx.paging.PageFetcherSnapshotState: int prependGenerationId>;

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i13);

        interfaceinvoke $r18.<kotlinx.coroutines.channels.Channel: java.lang.Object trySend-JP2dKIU(java.lang.Object)>($r19);

        goto label11;

     label07:
        i22 = virtualinvoke r1.<androidx.paging.PageEvent$Drop: int getPageCount()>();

        z9 = 0;

        i23 = 0;

        i24 = i22;

     label08:
        if i23 >= i24 goto label09;

        i25 = i23;

        $r15 = r0.<androidx.paging.PageFetcherSnapshotState: java.util.List _pages>;

        $r16 = virtualinvoke r0.<androidx.paging.PageFetcherSnapshotState: java.util.List getPages$paging_common()>();

        $i6 = interfaceinvoke $r16.<java.util.List: int size()>();

        $i7 = $i6 - 1;

        interfaceinvoke $r15.<java.util.List: java.lang.Object remove(int)>($i7);

        i23 = i23 + 1;

        goto label08;

     label09:
        $i3 = virtualinvoke r1.<androidx.paging.PageEvent$Drop: int getPlaceholdersRemaining()>();

        virtualinvoke r0.<androidx.paging.PageFetcherSnapshotState: void setPlaceholdersAfter$paging_common(int)>($i3);

        r39 = r0;

        $i26 = r39.<androidx.paging.PageFetcherSnapshotState: int appendGenerationId>;

        $i4 = $i26 + 1;

        r39.<androidx.paging.PageFetcherSnapshotState: int appendGenerationId> = $i4;

        $r12 = r0.<androidx.paging.PageFetcherSnapshotState: kotlinx.coroutines.channels.Channel appendGenerationIdCh>;

        $i5 = r0.<androidx.paging.PageFetcherSnapshotState: int appendGenerationId>;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        interfaceinvoke $r12.<kotlinx.coroutines.channels.Channel: java.lang.Object trySend-JP2dKIU(java.lang.Object)>($r13);

        goto label11;

     label10:
        $r23 = new java.lang.IllegalArgumentException;

        $r24 = virtualinvoke r1.<androidx.paging.PageEvent$Drop: androidx.paging.LoadType getLoadType()>();

        $r25 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("cannot drop ", $r24);

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r25);

        throw $r23;

     label11:
        return;
    }

    public final androidx.paging.PageEvent$Drop dropEventOrNull(androidx.paging.LoadType, androidx.paging.ViewportHint)
    {
        androidx.paging.PageFetcherSnapshotState r0;
        androidx.paging.LoadType r1, $r6, r29, $r33;
        androidx.paging.ViewportHint r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, i31, i32, i33, $i34, i35, $i36, i37, i38, i39, $i45, i46, $i52, $i53, $i54, $i55;
        androidx.paging.PagingConfig $r3, $r5, $r12, $r20, $r32;
        java.util.List $r4, $r7, $r9, $r11, $r14, $r15, $r18, $r21, $r24;
        int[] $r8, $r10, $r13, $r19;
        java.lang.Object $r16, $r22;
        androidx.paging.PagingSource$LoadResult$Page $r17, $r23;
        java.lang.IllegalArgumentException $r25;
        java.lang.String $r26, r28;
        java.lang.Throwable $r27;
        boolean $z0, z1, z2, z3, $z5;
        androidx.paging.PageEvent$Drop $r30;

        r0 := @this: androidx.paging.PageFetcherSnapshotState;

        r1 := @parameter0: androidx.paging.LoadType;

        r2 := @parameter1: androidx.paging.ViewportHint;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "loadType");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "hint");

        $r3 = r0.<androidx.paging.PageFetcherSnapshotState: androidx.paging.PagingConfig config>;

        $i1 = $r3.<androidx.paging.PagingConfig: int maxSize>;

        if $i1 != 2147483647 goto label01;

        return null;

     label01:
        $r4 = r0.<androidx.paging.PageFetcherSnapshotState: java.util.List pages>;

        $i2 = interfaceinvoke $r4.<java.util.List: int size()>();

        if $i2 > 2 goto label02;

        return null;

     label02:
        $i3 = virtualinvoke r0.<androidx.paging.PageFetcherSnapshotState: int getStorageCount$paging_common()>();

        $r5 = r0.<androidx.paging.PageFetcherSnapshotState: androidx.paging.PagingConfig config>;

        $i4 = $r5.<androidx.paging.PagingConfig: int maxSize>;

        if $i3 > $i4 goto label03;

        return null;

     label03:
        $r6 = <androidx.paging.LoadType: androidx.paging.LoadType REFRESH>;

        if r1 == $r6 goto label04;

        $z0 = 1;

        goto label05;

     label04:
        $z0 = 0;

     label05:
        z1 = $z0;

        z2 = 0;

        z3 = 0;

        if z1 != 0 goto label06;

        r28 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Drop LoadType must be PREPEND or APPEND, but got ", r1);

        $r25 = new java.lang.IllegalArgumentException;

        $r26 = virtualinvoke r28.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r26);

        $r27 = (java.lang.Throwable) $r25;

        throw $r27;

     label06:
        i31 = 0;

        i32 = 0;

     label07:
        $r7 = r0.<androidx.paging.PageFetcherSnapshotState: java.util.List pages>;

        $i5 = interfaceinvoke $r7.<java.util.List: int size()>();

        if i31 >= $i5 goto label13;

        $i19 = virtualinvoke r0.<androidx.paging.PageFetcherSnapshotState: int getStorageCount$paging_common()>();

        $i21 = $i19 - i32;

        $r12 = r0.<androidx.paging.PageFetcherSnapshotState: androidx.paging.PagingConfig config>;

        $i20 = $r12.<androidx.paging.PagingConfig: int maxSize>;

        if $i21 <= $i20 goto label13;

        $r13 = <androidx.paging.PageFetcherSnapshotState$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i22 = virtualinvoke r1.<androidx.paging.LoadType: int ordinal()>();

        i33 = $r13[$i22];

        if i33 != 2 goto label08;

        $r21 = r0.<androidx.paging.PageFetcherSnapshotState: java.util.List pages>;

        $r22 = interfaceinvoke $r21.<java.util.List: java.lang.Object get(int)>(i31);

        $r23 = (androidx.paging.PagingSource$LoadResult$Page) $r22;

        $r24 = virtualinvoke $r23.<androidx.paging.PagingSource$LoadResult$Page: java.util.List getData()>();

        $i34 = interfaceinvoke $r24.<java.util.List: int size()>();

        goto label09;

     label08:
        $r15 = r0.<androidx.paging.PageFetcherSnapshotState: java.util.List pages>;

        $r14 = r0.<androidx.paging.PageFetcherSnapshotState: java.util.List pages>;

        $i23 = staticinvoke <kotlin.collections.CollectionsKt: int getLastIndex(java.util.List)>($r14);

        $i24 = $i23 - i31;

        $r16 = interfaceinvoke $r15.<java.util.List: java.lang.Object get(int)>($i24);

        $r17 = (androidx.paging.PagingSource$LoadResult$Page) $r16;

        $r18 = virtualinvoke $r17.<androidx.paging.PagingSource$LoadResult$Page: java.util.List getData()>();

        $i34 = interfaceinvoke $r18.<java.util.List: int size()>();

     label09:
        i35 = $i34;

        r29 = r1;

        $r19 = <androidx.paging.PageFetcherSnapshotState$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i25 = virtualinvoke r29.<androidx.paging.LoadType: int ordinal()>();

        i0 = $r19[$i25];

        if i0 != 2 goto label10;

        $i29 = virtualinvoke r2.<androidx.paging.ViewportHint: int getPresentedItemsBefore()>();

        $i30 = $i29 - i32;

        $i36 = $i30 - i35;

        goto label11;

     label10:
        $i26 = virtualinvoke r2.<androidx.paging.ViewportHint: int getPresentedItemsAfter()>();

        $i27 = $i26 - i32;

        $i36 = $i27 - i35;

     label11:
        $r20 = r0.<androidx.paging.PageFetcherSnapshotState: androidx.paging.PagingConfig config>;

        $i28 = $r20.<androidx.paging.PagingConfig: int prefetchDistance>;

        if $i36 >= $i28 goto label12;

        goto label13;

     label12:
        i32 = i32 + i35;

        i37 = i31;

        i31 = i37 + 1;

        goto label07;

     label13:
        i38 = i31;

        if i38 != 0 goto label14;

        $r30 = null;

        goto label22;

     label14:
        $r30 = new androidx.paging.PageEvent$Drop;

        $r8 = <androidx.paging.PageFetcherSnapshotState$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i6 = virtualinvoke r1.<androidx.paging.LoadType: int ordinal()>();

        i39 = $r8[$i6];

        if i39 != 2 goto label15;

        $i17 = r0.<androidx.paging.PageFetcherSnapshotState: int initialPageIndex>;

        $i18 = neg $i17;

        $i45 = $i18;

        goto label16;

     label15:
        $r9 = r0.<androidx.paging.PageFetcherSnapshotState: java.util.List pages>;

        $i7 = staticinvoke <kotlin.collections.CollectionsKt: int getLastIndex(java.util.List)>($r9);

        $i8 = r0.<androidx.paging.PageFetcherSnapshotState: int initialPageIndex>;

        $i10 = $i7 - $i8;

        $i9 = i31 - 1;

        $i45 = $i10 - $i9;

     label16:
        $r10 = <androidx.paging.PageFetcherSnapshotState$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i11 = virtualinvoke r1.<androidx.paging.LoadType: int ordinal()>();

        i46 = $r10[$i11];

        if i46 != 2 goto label17;

        $i15 = i31 - 1;

        $i14 = r0.<androidx.paging.PageFetcherSnapshotState: int initialPageIndex>;

        $i16 = $i15 - $i14;

        $i52 = $i16;

        goto label18;

     label17:
        $r11 = r0.<androidx.paging.PageFetcherSnapshotState: java.util.List pages>;

        $i12 = staticinvoke <kotlin.collections.CollectionsKt: int getLastIndex(java.util.List)>($r11);

        $i13 = r0.<androidx.paging.PageFetcherSnapshotState: int initialPageIndex>;

        $i52 = $i12 - $i13;

     label18:
        $r32 = r0.<androidx.paging.PageFetcherSnapshotState: androidx.paging.PagingConfig config>;

        $z5 = $r32.<androidx.paging.PagingConfig: boolean enablePlaceholders>;

        if $z5 != 0 goto label19;

        $i53 = 0;

        goto label21;

     label19:
        $r33 = <androidx.paging.LoadType: androidx.paging.LoadType PREPEND>;

        if r1 != $r33 goto label20;

        $i54 = virtualinvoke r0.<androidx.paging.PageFetcherSnapshotState: int getPlaceholdersBefore$paging_common()>();

        $i53 = $i54 + i32;

        goto label21;

     label20:
        $i55 = virtualinvoke r0.<androidx.paging.PageFetcherSnapshotState: int getPlaceholdersAfter$paging_common()>();

        $i53 = $i55 + i32;

     label21:
        specialinvoke $r30.<androidx.paging.PageEvent$Drop: void <init>(androidx.paging.LoadType,int,int,int)>(r1, $i45, $i52, $i53);

     label22:
        return $r30;
    }

    public final androidx.paging.PagingState currentPagingState$paging_common(androidx.paging.ViewportHint$Access)
    {
        androidx.paging.PageFetcherSnapshotState r0;
        androidx.paging.ViewportHint$Access r1, r2, r3, r4;
        boolean z0, z1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15, $i16, i17;
        java.util.List r5, r9, $r10, $r12, $r13, $r15, $r18, $r20;
        java.lang.Integer r6, r8, $r21;
        androidx.paging.PagingConfig r7, $r14, $r19, $r22;
        java.lang.Iterable $r11;
        java.lang.Object $r16;
        androidx.paging.PagingSource$LoadResult$Page $r17;
        androidx.paging.PagingState $r23;

        r0 := @this: androidx.paging.PageFetcherSnapshotState;

        r1 := @parameter0: androidx.paging.ViewportHint$Access;

        $r10 = r0.<androidx.paging.PageFetcherSnapshotState: java.util.List pages>;

        $r11 = (java.lang.Iterable) $r10;

        $r12 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List toList(java.lang.Iterable)>($r11);

        $r20 = $r12;

        r2 = r1;

        if r2 != null goto label1;

        $r21 = null;

        goto label7;

     label1:
        r3 = r2;

        z0 = 0;

        z1 = 0;

        r4 = r3;

        r5 = $r12;

        i14 = virtualinvoke r0.<androidx.paging.PageFetcherSnapshotState: int getPlaceholdersBefore$paging_common()>();

        $i5 = virtualinvoke r0.<androidx.paging.PageFetcherSnapshotState: int getInitialPageIndex$paging_common()>();

        i0 = neg $i5;

        $r13 = virtualinvoke r0.<androidx.paging.PageFetcherSnapshotState: java.util.List getPages$paging_common()>();

        $i6 = staticinvoke <kotlin.collections.CollectionsKt: int getLastIndex(java.util.List)>($r13);

        $i7 = virtualinvoke r0.<androidx.paging.PageFetcherSnapshotState: int getInitialPageIndex$paging_common()>();

        i1 = $i6 - $i7;

        i15 = i0;

        i2 = virtualinvoke r4.<androidx.paging.ViewportHint$Access: int getPageOffset()>();

        if i15 >= i2 goto label5;

     label2:
        i3 = i15;

        i15 = i15 + 1;

        $i13 = i14;

        if i3 <= i1 goto label3;

        $r19 = r0.<androidx.paging.PageFetcherSnapshotState: androidx.paging.PagingConfig config>;

        $i16 = $r19.<androidx.paging.PagingConfig: int pageSize>;

        goto label4;

     label3:
        $r15 = virtualinvoke r0.<androidx.paging.PageFetcherSnapshotState: java.util.List getPages$paging_common()>();

        $i11 = virtualinvoke r0.<androidx.paging.PageFetcherSnapshotState: int getInitialPageIndex$paging_common()>();

        $i12 = i3 + $i11;

        $r16 = interfaceinvoke $r15.<java.util.List: java.lang.Object get(int)>($i12);

        $r17 = (androidx.paging.PagingSource$LoadResult$Page) $r16;

        $r18 = virtualinvoke $r17.<androidx.paging.PagingSource$LoadResult$Page: java.util.List getData()>();

        $i16 = interfaceinvoke $r18.<java.util.List: int size()>();

     label4:
        i14 = $i13 + $i16;

        if i15 < i2 goto label2;

     label5:
        $i8 = virtualinvoke r4.<androidx.paging.ViewportHint$Access: int getIndexInPage()>();

        i17 = i14 + $i8;

        $i9 = virtualinvoke r4.<androidx.paging.ViewportHint$Access: int getPageOffset()>();

        if $i9 >= i0 goto label6;

        $r14 = r0.<androidx.paging.PageFetcherSnapshotState: androidx.paging.PagingConfig config>;

        $i10 = $r14.<androidx.paging.PagingConfig: int pageSize>;

        i17 = i17 - $i10;

     label6:
        r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i17);

        $r20 = r5;

        $r21 = r6;

     label7:
        $r22 = r0.<androidx.paging.PageFetcherSnapshotState: androidx.paging.PagingConfig config>;

        i4 = virtualinvoke r0.<androidx.paging.PageFetcherSnapshotState: int getPlaceholdersBefore$paging_common()>();

        r7 = $r22;

        r8 = $r21;

        r9 = $r20;

        $r23 = new androidx.paging.PagingState;

        specialinvoke $r23.<androidx.paging.PagingState: void <init>(java.util.List,java.lang.Integer,androidx.paging.PagingConfig,int)>(r9, r8, r7, i4);

        return $r23;
    }

    public static final kotlinx.coroutines.channels.Channel access$getPrependGenerationIdCh$p(androidx.paging.PageFetcherSnapshotState)
    {
        androidx.paging.PageFetcherSnapshotState $r0;
        kotlinx.coroutines.channels.Channel $r1;

        $r0 := @parameter0: androidx.paging.PageFetcherSnapshotState;

        $r1 = $r0.<androidx.paging.PageFetcherSnapshotState: kotlinx.coroutines.channels.Channel prependGenerationIdCh>;

        return $r1;
    }

    public static final int access$getPrependGenerationId$p(androidx.paging.PageFetcherSnapshotState)
    {
        androidx.paging.PageFetcherSnapshotState $r0;
        int $i0;

        $r0 := @parameter0: androidx.paging.PageFetcherSnapshotState;

        $i0 = $r0.<androidx.paging.PageFetcherSnapshotState: int prependGenerationId>;

        return $i0;
    }

    public static final kotlinx.coroutines.channels.Channel access$getAppendGenerationIdCh$p(androidx.paging.PageFetcherSnapshotState)
    {
        androidx.paging.PageFetcherSnapshotState $r0;
        kotlinx.coroutines.channels.Channel $r1;

        $r0 := @parameter0: androidx.paging.PageFetcherSnapshotState;

        $r1 = $r0.<androidx.paging.PageFetcherSnapshotState: kotlinx.coroutines.channels.Channel appendGenerationIdCh>;

        return $r1;
    }

    public static final int access$getAppendGenerationId$p(androidx.paging.PageFetcherSnapshotState)
    {
        androidx.paging.PageFetcherSnapshotState $r0;
        int $i0;

        $r0 := @parameter0: androidx.paging.PageFetcherSnapshotState;

        $i0 = $r0.<androidx.paging.PageFetcherSnapshotState: int appendGenerationId>;

        return $i0;
    }

    public void <init>(androidx.paging.PagingConfig, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.paging.PageFetcherSnapshotState r0;
        androidx.paging.PagingConfig r1;
        kotlin.jvm.internal.DefaultConstructorMarker $r2;

        r0 := @this: androidx.paging.PageFetcherSnapshotState;

        r1 := @parameter0: androidx.paging.PagingConfig;

        $r2 := @parameter1: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.paging.PageFetcherSnapshotState: void <init>(androidx.paging.PagingConfig)>(r1);

        return;
    }

androidx.paging.PageFetcherSnapshotState$consumeAppendGenerationIdAsFlow$1
<androidx.paging.PageFetcherSnapshotState$consumeAppendGenerationIdAsFlow$1: int label>
<androidx.paging.PageFetcherSnapshotState$consumeAppendGenerationIdAsFlow$1: androidx.paging.PageFetcherSnapshotState this$0>
    void <init>(androidx.paging.PageFetcherSnapshotState, kotlin.coroutines.Continuation)
    {
        androidx.paging.PageFetcherSnapshotState$consumeAppendGenerationIdAsFlow$1 r0;
        androidx.paging.PageFetcherSnapshotState $r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.paging.PageFetcherSnapshotState$consumeAppendGenerationIdAsFlow$1;

        $r1 := @parameter0: androidx.paging.PageFetcherSnapshotState;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.paging.PageFetcherSnapshotState$consumeAppendGenerationIdAsFlow$1: androidx.paging.PageFetcherSnapshotState this$0> = $r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.paging.PageFetcherSnapshotState$consumeAppendGenerationIdAsFlow$1 r0;
        java.lang.Object $r1;
        int $i0, $i1;
        androidx.paging.PageFetcherSnapshotState $r3, $r5;
        kotlinx.coroutines.channels.Channel $r4;
        java.lang.Integer $r6;
        kotlin.Unit $r8;
        java.lang.IllegalStateException $r9;

        r0 := @this: androidx.paging.PageFetcherSnapshotState$consumeAppendGenerationIdAsFlow$1;

        $r1 := @parameter0: java.lang.Object;

        staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.paging.PageFetcherSnapshotState$consumeAppendGenerationIdAsFlow$1: int label>;

        tableswitch($i0)
        {
            case 0: goto label1;
            default: goto label2;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r3 = r0.<androidx.paging.PageFetcherSnapshotState$consumeAppendGenerationIdAsFlow$1: androidx.paging.PageFetcherSnapshotState this$0>;

        $r4 = staticinvoke <androidx.paging.PageFetcherSnapshotState: kotlinx.coroutines.channels.Channel access$getAppendGenerationIdCh$p(androidx.paging.PageFetcherSnapshotState)>($r3);

        $r5 = r0.<androidx.paging.PageFetcherSnapshotState$consumeAppendGenerationIdAsFlow$1: androidx.paging.PageFetcherSnapshotState this$0>;

        $i1 = staticinvoke <androidx.paging.PageFetcherSnapshotState: int access$getAppendGenerationId$p(androidx.paging.PageFetcherSnapshotState)>($r5);

        $r6 = staticinvoke <kotlin.coroutines.jvm.internal.Boxing: java.lang.Integer boxInt(int)>($i1);

        interfaceinvoke $r4.<kotlinx.coroutines.channels.Channel: java.lang.Object trySend-JP2dKIU(java.lang.Object)>($r6);

        $r8 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r8;

     label2:
        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r9;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.paging.PageFetcherSnapshotState$consumeAppendGenerationIdAsFlow$1 r0, $r3;
        java.lang.Object r1;
        kotlin.coroutines.Continuation $r2, $r5;
        androidx.paging.PageFetcherSnapshotState $r4;

        r0 := @this: androidx.paging.PageFetcherSnapshotState$consumeAppendGenerationIdAsFlow$1;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = new androidx.paging.PageFetcherSnapshotState$consumeAppendGenerationIdAsFlow$1;

        $r4 = r0.<androidx.paging.PageFetcherSnapshotState$consumeAppendGenerationIdAsFlow$1: androidx.paging.PageFetcherSnapshotState this$0>;

        specialinvoke $r3.<androidx.paging.PageFetcherSnapshotState$consumeAppendGenerationIdAsFlow$1: void <init>(androidx.paging.PageFetcherSnapshotState,kotlin.coroutines.Continuation)>($r4, $r2);

        $r5 = (kotlin.coroutines.Continuation) $r3;

        return $r5;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation)
    {
        androidx.paging.PageFetcherSnapshotState$consumeAppendGenerationIdAsFlow$1 r0, $r5;
        kotlinx.coroutines.flow.FlowCollector r1;
        kotlin.coroutines.Continuation r2, $r3;
        kotlin.Unit $r4;
        java.lang.Object $r6;

        r0 := @this: androidx.paging.PageFetcherSnapshotState$consumeAppendGenerationIdAsFlow$1;

        r1 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = virtualinvoke r0.<androidx.paging.PageFetcherSnapshotState$consumeAppendGenerationIdAsFlow$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, r2);

        $r5 = (androidx.paging.PageFetcherSnapshotState$consumeAppendGenerationIdAsFlow$1) $r3;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.paging.PageFetcherSnapshotState$consumeAppendGenerationIdAsFlow$1: java.lang.Object invokeSuspend(java.lang.Object)>($r4);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.paging.PageFetcherSnapshotState$consumeAppendGenerationIdAsFlow$1 r0;
        java.lang.Object r1, r2, $r5;
        kotlin.coroutines.Continuation $r3;
        kotlinx.coroutines.flow.FlowCollector $r4;

        r0 := @this: androidx.paging.PageFetcherSnapshotState$consumeAppendGenerationIdAsFlow$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (kotlinx.coroutines.flow.FlowCollector) r1;

        $r3 = (kotlin.coroutines.Continuation) r2;

        $r5 = virtualinvoke r0.<androidx.paging.PageFetcherSnapshotState$consumeAppendGenerationIdAsFlow$1: java.lang.Object invoke(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)>($r4, $r3);

        return $r5;
    }

androidx.paging.PageFetcherSnapshotState$consumePrependGenerationIdAsFlow$1
<androidx.paging.PageFetcherSnapshotState$consumePrependGenerationIdAsFlow$1: int label>
<androidx.paging.PageFetcherSnapshotState$consumePrependGenerationIdAsFlow$1: androidx.paging.PageFetcherSnapshotState this$0>
    void <init>(androidx.paging.PageFetcherSnapshotState, kotlin.coroutines.Continuation)
    {
        androidx.paging.PageFetcherSnapshotState$consumePrependGenerationIdAsFlow$1 r0;
        androidx.paging.PageFetcherSnapshotState $r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.paging.PageFetcherSnapshotState$consumePrependGenerationIdAsFlow$1;

        $r1 := @parameter0: androidx.paging.PageFetcherSnapshotState;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.paging.PageFetcherSnapshotState$consumePrependGenerationIdAsFlow$1: androidx.paging.PageFetcherSnapshotState this$0> = $r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.paging.PageFetcherSnapshotState$consumePrependGenerationIdAsFlow$1 r0;
        java.lang.Object $r1;
        int $i0, $i1;
        androidx.paging.PageFetcherSnapshotState $r3, $r5;
        kotlinx.coroutines.channels.Channel $r4;
        java.lang.Integer $r6;
        kotlin.Unit $r8;
        java.lang.IllegalStateException $r9;

        r0 := @this: androidx.paging.PageFetcherSnapshotState$consumePrependGenerationIdAsFlow$1;

        $r1 := @parameter0: java.lang.Object;

        staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.paging.PageFetcherSnapshotState$consumePrependGenerationIdAsFlow$1: int label>;

        tableswitch($i0)
        {
            case 0: goto label1;
            default: goto label2;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r3 = r0.<androidx.paging.PageFetcherSnapshotState$consumePrependGenerationIdAsFlow$1: androidx.paging.PageFetcherSnapshotState this$0>;

        $r4 = staticinvoke <androidx.paging.PageFetcherSnapshotState: kotlinx.coroutines.channels.Channel access$getPrependGenerationIdCh$p(androidx.paging.PageFetcherSnapshotState)>($r3);

        $r5 = r0.<androidx.paging.PageFetcherSnapshotState$consumePrependGenerationIdAsFlow$1: androidx.paging.PageFetcherSnapshotState this$0>;

        $i1 = staticinvoke <androidx.paging.PageFetcherSnapshotState: int access$getPrependGenerationId$p(androidx.paging.PageFetcherSnapshotState)>($r5);

        $r6 = staticinvoke <kotlin.coroutines.jvm.internal.Boxing: java.lang.Integer boxInt(int)>($i1);

        interfaceinvoke $r4.<kotlinx.coroutines.channels.Channel: java.lang.Object trySend-JP2dKIU(java.lang.Object)>($r6);

        $r8 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r8;

     label2:
        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r9;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.paging.PageFetcherSnapshotState$consumePrependGenerationIdAsFlow$1 r0, $r3;
        java.lang.Object r1;
        kotlin.coroutines.Continuation $r2, $r5;
        androidx.paging.PageFetcherSnapshotState $r4;

        r0 := @this: androidx.paging.PageFetcherSnapshotState$consumePrependGenerationIdAsFlow$1;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = new androidx.paging.PageFetcherSnapshotState$consumePrependGenerationIdAsFlow$1;

        $r4 = r0.<androidx.paging.PageFetcherSnapshotState$consumePrependGenerationIdAsFlow$1: androidx.paging.PageFetcherSnapshotState this$0>;

        specialinvoke $r3.<androidx.paging.PageFetcherSnapshotState$consumePrependGenerationIdAsFlow$1: void <init>(androidx.paging.PageFetcherSnapshotState,kotlin.coroutines.Continuation)>($r4, $r2);

        $r5 = (kotlin.coroutines.Continuation) $r3;

        return $r5;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation)
    {
        androidx.paging.PageFetcherSnapshotState$consumePrependGenerationIdAsFlow$1 r0, $r5;
        kotlinx.coroutines.flow.FlowCollector r1;
        kotlin.coroutines.Continuation r2, $r3;
        kotlin.Unit $r4;
        java.lang.Object $r6;

        r0 := @this: androidx.paging.PageFetcherSnapshotState$consumePrependGenerationIdAsFlow$1;

        r1 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = virtualinvoke r0.<androidx.paging.PageFetcherSnapshotState$consumePrependGenerationIdAsFlow$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, r2);

        $r5 = (androidx.paging.PageFetcherSnapshotState$consumePrependGenerationIdAsFlow$1) $r3;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.paging.PageFetcherSnapshotState$consumePrependGenerationIdAsFlow$1: java.lang.Object invokeSuspend(java.lang.Object)>($r4);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.paging.PageFetcherSnapshotState$consumePrependGenerationIdAsFlow$1 r0;
        java.lang.Object r1, r2, $r5;
        kotlin.coroutines.Continuation $r3;
        kotlinx.coroutines.flow.FlowCollector $r4;

        r0 := @this: androidx.paging.PageFetcherSnapshotState$consumePrependGenerationIdAsFlow$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (kotlinx.coroutines.flow.FlowCollector) r1;

        $r3 = (kotlin.coroutines.Continuation) r2;

        $r5 = virtualinvoke r0.<androidx.paging.PageFetcherSnapshotState$consumePrependGenerationIdAsFlow$1: java.lang.Object invoke(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)>($r4, $r3);

        return $r5;
    }

androidx.paging.PageFetcherSnapshotState$Holder$withLock$1
<androidx.paging.PageFetcherSnapshotState$Holder$withLock$1: java.lang.Object L$0>
<androidx.paging.PageFetcherSnapshotState$Holder$withLock$1: java.lang.Object L$1>
<androidx.paging.PageFetcherSnapshotState$Holder$withLock$1: java.lang.Object L$2>
<androidx.paging.PageFetcherSnapshotState$Holder$withLock$1: java.lang.Object result>
<androidx.paging.PageFetcherSnapshotState$Holder$withLock$1: androidx.paging.PageFetcherSnapshotState$Holder this$0>
<androidx.paging.PageFetcherSnapshotState$Holder$withLock$1: int label>
    void <init>(androidx.paging.PageFetcherSnapshotState$Holder, kotlin.coroutines.Continuation)
    {
        androidx.paging.PageFetcherSnapshotState$Holder$withLock$1 r0;
        androidx.paging.PageFetcherSnapshotState$Holder r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.paging.PageFetcherSnapshotState$Holder$withLock$1;

        r1 := @parameter0: androidx.paging.PageFetcherSnapshotState$Holder;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.paging.PageFetcherSnapshotState$Holder$withLock$1: androidx.paging.PageFetcherSnapshotState$Holder this$0> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>($r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.paging.PageFetcherSnapshotState$Holder$withLock$1 r0;
        java.lang.Object $r1, $r4;
        int $i0, $i1;
        kotlin.coroutines.Continuation $r2;
        androidx.paging.PageFetcherSnapshotState$Holder $r3;

        r0 := @this: androidx.paging.PageFetcherSnapshotState$Holder$withLock$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.paging.PageFetcherSnapshotState$Holder$withLock$1: java.lang.Object result> = $r1;

        $i0 = r0.<androidx.paging.PageFetcherSnapshotState$Holder$withLock$1: int label>;

        $i1 = $i0 | -2147483648;

        r0.<androidx.paging.PageFetcherSnapshotState$Holder$withLock$1: int label> = $i1;

        $r3 = r0.<androidx.paging.PageFetcherSnapshotState$Holder$withLock$1: androidx.paging.PageFetcherSnapshotState$Holder this$0>;

        $r2 = (kotlin.coroutines.Continuation) r0;

        $r4 = virtualinvoke $r3.<androidx.paging.PageFetcherSnapshotState$Holder: java.lang.Object withLock(kotlin.jvm.functions.Function1,kotlin.coroutines.Continuation)>(null, $r2);

        return $r4;
    }

androidx.paging.PageFetcherSnapshotState$Holder
<androidx.paging.PageFetcherSnapshotState$Holder: androidx.paging.PagingConfig config>
<androidx.paging.PageFetcherSnapshotState$Holder: kotlinx.coroutines.sync.Mutex lock>
<androidx.paging.PageFetcherSnapshotState$Holder: androidx.paging.PageFetcherSnapshotState state>
    public void <init>(androidx.paging.PagingConfig)
    {
        androidx.paging.PageFetcherSnapshotState$Holder r0;
        androidx.paging.PagingConfig r1, $r4;
        kotlinx.coroutines.sync.Mutex $r2;
        androidx.paging.PageFetcherSnapshotState $r3;

        r0 := @this: androidx.paging.PageFetcherSnapshotState$Holder;

        r1 := @parameter0: androidx.paging.PagingConfig;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "config");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.paging.PageFetcherSnapshotState$Holder: androidx.paging.PagingConfig config> = r1;

        $r2 = staticinvoke <kotlinx.coroutines.sync.MutexKt: kotlinx.coroutines.sync.Mutex Mutex$default(boolean,int,java.lang.Object)>(0, 1, null);

        r0.<androidx.paging.PageFetcherSnapshotState$Holder: kotlinx.coroutines.sync.Mutex lock> = $r2;

        $r3 = new androidx.paging.PageFetcherSnapshotState;

        $r4 = r0.<androidx.paging.PageFetcherSnapshotState$Holder: androidx.paging.PagingConfig config>;

        specialinvoke $r3.<androidx.paging.PageFetcherSnapshotState: void <init>(androidx.paging.PagingConfig,kotlin.jvm.internal.DefaultConstructorMarker)>($r4, null);

        r0.<androidx.paging.PageFetcherSnapshotState$Holder: androidx.paging.PageFetcherSnapshotState state> = $r3;

        return;
    }

    public final java.lang.Object withLock(kotlin.jvm.functions.Function1, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation r0, r19;
        java.lang.Object $r1, r2, $r4, $r5, $r6, $r8, r15;
        boolean $z0;
        androidx.paging.PageFetcherSnapshotState $r7;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Throwable $r10, r16;
        androidx.paging.PageFetcherSnapshotState$Holder r11;
        kotlin.jvm.functions.Function1 r12;
        androidx.paging.PageFetcherSnapshotState$Holder$withLock$1 $r13, r17;
        kotlinx.coroutines.sync.Mutex $r14;
        java.lang.IllegalStateException r18;

        r11 := @this: androidx.paging.PageFetcherSnapshotState$Holder;

        r12 := @parameter0: kotlin.jvm.functions.Function1;

        r0 := @parameter1: kotlin.coroutines.Continuation;

        $z0 = r0 instanceof androidx.paging.PageFetcherSnapshotState$Holder$withLock$1;

        if $z0 == 0 goto label01;

        $r13 = (androidx.paging.PageFetcherSnapshotState$Holder$withLock$1) r0;

        $i0 = $r13.<androidx.paging.PageFetcherSnapshotState$Holder$withLock$1: int label>;

        $i1 = $i0 & -2147483648;

        if $i1 == 0 goto label01;

        $i2 = $r13.<androidx.paging.PageFetcherSnapshotState$Holder$withLock$1: int label>;

        $i3 = $i2 - -2147483648;

        $r13.<androidx.paging.PageFetcherSnapshotState$Holder$withLock$1: int label> = $i3;

        goto label02;

     label01:
        r17 = new androidx.paging.PageFetcherSnapshotState$Holder$withLock$1;

        specialinvoke r17.<androidx.paging.PageFetcherSnapshotState$Holder$withLock$1: void <init>(androidx.paging.PageFetcherSnapshotState$Holder,kotlin.coroutines.Continuation)>(r11, r0);

        $r13 = r17;

     label02:
        $r1 = $r13.<androidx.paging.PageFetcherSnapshotState$Holder$withLock$1: java.lang.Object result>;

        r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i4 = $r13.<androidx.paging.PageFetcherSnapshotState$Holder$withLock$1: int label>;

        tableswitch($i4)
        {
            case 0: goto label03;
            case 1: goto label04;
            default: goto label10;
        };

     label03:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r14 = staticinvoke <androidx.paging.PageFetcherSnapshotState$Holder: kotlinx.coroutines.sync.Mutex access$getLock$p(androidx.paging.PageFetcherSnapshotState$Holder)>(r11);

        $r13.<androidx.paging.PageFetcherSnapshotState$Holder$withLock$1: java.lang.Object L$0> = r11;

        $r13.<androidx.paging.PageFetcherSnapshotState$Holder$withLock$1: java.lang.Object L$1> = r12;

        $r13.<androidx.paging.PageFetcherSnapshotState$Holder$withLock$1: java.lang.Object L$2> = $r14;

        $r13.<androidx.paging.PageFetcherSnapshotState$Holder$withLock$1: int label> = 1;

        r19 = (kotlin.coroutines.Continuation) $r13;

        $r8 = interfaceinvoke $r14.<kotlinx.coroutines.sync.Mutex: java.lang.Object lock(java.lang.Object,kotlin.coroutines.Continuation)>(null, r19);

        if $r8 != r2 goto label05;

        return r2;

     label04:
        $r4 = $r13.<androidx.paging.PageFetcherSnapshotState$Holder$withLock$1: java.lang.Object L$2>;

        $r14 = (kotlinx.coroutines.sync.Mutex) $r4;

        $r5 = $r13.<androidx.paging.PageFetcherSnapshotState$Holder$withLock$1: java.lang.Object L$1>;

        r12 = (kotlin.jvm.functions.Function1) $r5;

        $r6 = $r13.<androidx.paging.PageFetcherSnapshotState$Holder$withLock$1: java.lang.Object L$0>;

        r11 = (androidx.paging.PageFetcherSnapshotState$Holder) $r6;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label05:
        $r7 = staticinvoke <androidx.paging.PageFetcherSnapshotState$Holder: androidx.paging.PageFetcherSnapshotState access$getState$p(androidx.paging.PageFetcherSnapshotState$Holder)>(r11);

        r15 = interfaceinvoke r12.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r7);

     label06:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        interfaceinvoke $r14.<kotlinx.coroutines.sync.Mutex: void unlock(java.lang.Object)>(null);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        goto label09;

     label07:
        $r10 := @caughtexception;

        r16 = $r10;

     label08:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        interfaceinvoke $r14.<kotlinx.coroutines.sync.Mutex: void unlock(java.lang.Object)>(null);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw r16;

     label09:
        return r15;

     label10:
        r18 = new java.lang.IllegalStateException;

        specialinvoke r18.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r18;

        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    private final java.lang.Object withLock$$forInline(kotlin.jvm.functions.Function1, kotlin.coroutines.Continuation)
    {
        androidx.paging.PageFetcherSnapshotState$Holder r0;
        kotlin.jvm.functions.Function1 r1;
        kotlin.coroutines.Continuation $r2;
        kotlinx.coroutines.sync.Mutex $r3;
        androidx.paging.PageFetcherSnapshotState $r4;
        java.lang.Throwable $r5, r7;
        java.lang.Object r6;

        r0 := @this: androidx.paging.PageFetcherSnapshotState$Holder;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = staticinvoke <androidx.paging.PageFetcherSnapshotState$Holder: kotlinx.coroutines.sync.Mutex access$getLock$p(androidx.paging.PageFetcherSnapshotState$Holder)>(r0);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void mark(int)>(0);

        interfaceinvoke $r3.<kotlinx.coroutines.sync.Mutex: java.lang.Object lock(java.lang.Object,kotlin.coroutines.Continuation)>(null, $r2);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void mark(int)>(1);

     label1:
        $r4 = staticinvoke <androidx.paging.PageFetcherSnapshotState$Holder: androidx.paging.PageFetcherSnapshotState access$getState$p(androidx.paging.PageFetcherSnapshotState$Holder)>(r0);

        r6 = interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

     label2:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        interfaceinvoke $r3.<kotlinx.coroutines.sync.Mutex: void unlock(java.lang.Object)>(null);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        goto label5;

     label3:
        $r5 := @caughtexception;

        r7 = $r5;

     label4:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        interfaceinvoke $r3.<kotlinx.coroutines.sync.Mutex: void unlock(java.lang.Object)>(null);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw r7;

     label5:
        return r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static final kotlinx.coroutines.sync.Mutex access$getLock$p(androidx.paging.PageFetcherSnapshotState$Holder)
    {
        androidx.paging.PageFetcherSnapshotState$Holder $r0;
        kotlinx.coroutines.sync.Mutex $r1;

        $r0 := @parameter0: androidx.paging.PageFetcherSnapshotState$Holder;

        $r1 = $r0.<androidx.paging.PageFetcherSnapshotState$Holder: kotlinx.coroutines.sync.Mutex lock>;

        return $r1;
    }

    public static final androidx.paging.PageFetcherSnapshotState access$getState$p(androidx.paging.PageFetcherSnapshotState$Holder)
    {
        androidx.paging.PageFetcherSnapshotState$Holder $r0;
        androidx.paging.PageFetcherSnapshotState $r1;

        $r0 := @parameter0: androidx.paging.PageFetcherSnapshotState$Holder;

        $r1 = $r0.<androidx.paging.PageFetcherSnapshotState$Holder: androidx.paging.PageFetcherSnapshotState state>;

        return $r1;
    }

androidx.paging.PageFetcherSnapshotState$WhenMappings
<androidx.paging.PageFetcherSnapshotState$WhenMappings: int[] $EnumSwitchMapping$0>
    static void <clinit>()
    {
        int[] r0;
        androidx.paging.LoadType[] $r1;
        int $i0, $i1, $i2, $i3;
        androidx.paging.LoadType $r2, $r3, $r4;

        $r1 = staticinvoke <androidx.paging.LoadType: androidx.paging.LoadType[] values()>();

        $i0 = lengthof $r1;

        r0 = newarray (int)[$i0];

        $r2 = <androidx.paging.LoadType: androidx.paging.LoadType REFRESH>;

        $i1 = virtualinvoke $r2.<androidx.paging.LoadType: int ordinal()>();

        r0[$i1] = 1;

        $r3 = <androidx.paging.LoadType: androidx.paging.LoadType PREPEND>;

        $i2 = virtualinvoke $r3.<androidx.paging.LoadType: int ordinal()>();

        r0[$i2] = 2;

        $r4 = <androidx.paging.LoadType: androidx.paging.LoadType APPEND>;

        $i3 = virtualinvoke $r4.<androidx.paging.LoadType: int ordinal()>();

        r0[$i3] = 3;

        <androidx.paging.PageFetcherSnapshotState$WhenMappings: int[] $EnumSwitchMapping$0> = r0;

        return;
    }

