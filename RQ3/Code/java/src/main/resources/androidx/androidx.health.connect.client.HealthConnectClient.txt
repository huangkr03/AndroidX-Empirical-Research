androidx.health.connect.client.HealthConnectClient
<androidx.health.connect.client.HealthConnectClient: androidx.health.connect.client.HealthConnectClient$Companion Companion>
<androidx.health.connect.client.HealthConnectClient: java.lang.String DEFAULT_PROVIDER_PACKAGE_NAME>
<androidx.health.connect.client.HealthConnectClient: androidx.health.connect.client.PermissionController getPermissionController()>
<androidx.health.connect.client.HealthConnectClient: java.lang.Object insertRecords(java.util.List,kotlin.coroutines.Continuation)>
<androidx.health.connect.client.HealthConnectClient: java.lang.Object updateRecords(java.util.List,kotlin.coroutines.Continuation)>
<androidx.health.connect.client.HealthConnectClient: java.lang.Object deleteRecords(kotlin.reflect.KClass,java.util.List,java.util.List,kotlin.coroutines.Continuation)>
<androidx.health.connect.client.HealthConnectClient: java.lang.Object deleteRecords(kotlin.reflect.KClass,androidx.health.connect.client.time.TimeRangeFilter,kotlin.coroutines.Continuation)>
<androidx.health.connect.client.HealthConnectClient: java.lang.Object readRecord(kotlin.reflect.KClass,java.lang.String,kotlin.coroutines.Continuation)>
<androidx.health.connect.client.HealthConnectClient: java.lang.Object readRecords(androidx.health.connect.client.request.ReadRecordsRequest,kotlin.coroutines.Continuation)>
<androidx.health.connect.client.HealthConnectClient: java.lang.Object aggregate(androidx.health.connect.client.request.AggregateRequest,kotlin.coroutines.Continuation)>
<androidx.health.connect.client.HealthConnectClient: java.lang.Object aggregateGroupByDuration(androidx.health.connect.client.request.AggregateGroupByDurationRequest,kotlin.coroutines.Continuation)>
<androidx.health.connect.client.HealthConnectClient: java.lang.Object aggregateGroupByPeriod(androidx.health.connect.client.request.AggregateGroupByPeriodRequest,kotlin.coroutines.Continuation)>
<androidx.health.connect.client.HealthConnectClient: java.lang.Object getChangesToken(androidx.health.connect.client.request.ChangesTokenRequest,kotlin.coroutines.Continuation)>
<androidx.health.connect.client.HealthConnectClient: java.lang.Object getChanges(java.lang.String,kotlin.coroutines.Continuation)>
    public static boolean isAvailable(android.content.Context, java.util.List)
    {
        android.content.Context r0;
        java.util.List r1;
        androidx.health.connect.client.HealthConnectClient$Companion $r2;
        boolean $z0;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.util.List;

        $r2 = <androidx.health.connect.client.HealthConnectClient: androidx.health.connect.client.HealthConnectClient$Companion Companion>;

        $z0 = virtualinvoke $r2.<androidx.health.connect.client.HealthConnectClient$Companion: boolean isAvailable(android.content.Context,java.util.List)>(r0, r1);

        return $z0;
    }

    public static androidx.health.connect.client.HealthConnectClient getOrCreate(android.content.Context, java.util.List)
    {
        android.content.Context r0;
        java.util.List r1;
        androidx.health.connect.client.HealthConnectClient$Companion $r2;
        androidx.health.connect.client.HealthConnectClient $r3;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.util.List;

        $r2 = <androidx.health.connect.client.HealthConnectClient: androidx.health.connect.client.HealthConnectClient$Companion Companion>;

        $r3 = virtualinvoke $r2.<androidx.health.connect.client.HealthConnectClient$Companion: androidx.health.connect.client.HealthConnectClient getOrCreate(android.content.Context,java.util.List)>(r0, r1);

        return $r3;
    }

    public static boolean isAvailable(android.content.Context)
    {
        android.content.Context r0;
        androidx.health.connect.client.HealthConnectClient$Companion $r1;
        boolean $z0;

        r0 := @parameter0: android.content.Context;

        $r1 = <androidx.health.connect.client.HealthConnectClient: androidx.health.connect.client.HealthConnectClient$Companion Companion>;

        $z0 = virtualinvoke $r1.<androidx.health.connect.client.HealthConnectClient$Companion: boolean isAvailable(android.content.Context)>(r0);

        return $z0;
    }

    public static androidx.health.connect.client.HealthConnectClient getOrCreate(android.content.Context)
    {
        android.content.Context r0;
        androidx.health.connect.client.HealthConnectClient$Companion $r1;
        androidx.health.connect.client.HealthConnectClient $r2;

        r0 := @parameter0: android.content.Context;

        $r1 = <androidx.health.connect.client.HealthConnectClient: androidx.health.connect.client.HealthConnectClient$Companion Companion>;

        $r2 = virtualinvoke $r1.<androidx.health.connect.client.HealthConnectClient$Companion: androidx.health.connect.client.HealthConnectClient getOrCreate(android.content.Context)>(r0);

        return $r2;
    }

    static void <clinit>()
    {
        androidx.health.connect.client.HealthConnectClient$Companion $r0;

        $r0 = <androidx.health.connect.client.HealthConnectClient$Companion: androidx.health.connect.client.HealthConnectClient$Companion $$INSTANCE>;

        <androidx.health.connect.client.HealthConnectClient: androidx.health.connect.client.HealthConnectClient$Companion Companion> = $r0;

        return;
    }

