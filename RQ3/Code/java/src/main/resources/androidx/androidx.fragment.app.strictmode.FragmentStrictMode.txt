androidx.fragment.app.strictmode.FragmentStrictMode
<androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode INSTANCE>
<androidx.fragment.app.strictmode.FragmentStrictMode: java.lang.String TAG>
<androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode$Policy defaultPolicy>
    private void <init>()
    {
        androidx.fragment.app.strictmode.FragmentStrictMode r0;

        r0 := @this: androidx.fragment.app.strictmode.FragmentStrictMode;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final androidx.fragment.app.strictmode.FragmentStrictMode$Policy getDefaultPolicy()
    {
        androidx.fragment.app.strictmode.FragmentStrictMode r0;
        androidx.fragment.app.strictmode.FragmentStrictMode$Policy $r1;

        r0 := @this: androidx.fragment.app.strictmode.FragmentStrictMode;

        $r1 = <androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode$Policy defaultPolicy>;

        return $r1;
    }

    public final void setDefaultPolicy(androidx.fragment.app.strictmode.FragmentStrictMode$Policy)
    {
        androidx.fragment.app.strictmode.FragmentStrictMode r0;
        androidx.fragment.app.strictmode.FragmentStrictMode$Policy r1;

        r0 := @this: androidx.fragment.app.strictmode.FragmentStrictMode;

        r1 := @parameter0: androidx.fragment.app.strictmode.FragmentStrictMode$Policy;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<set-?>");

        <androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode$Policy defaultPolicy> = r1;

        return;
    }

    private final androidx.fragment.app.strictmode.FragmentStrictMode$Policy getNearestPolicy(androidx.fragment.app.Fragment)
    {
        androidx.fragment.app.strictmode.FragmentStrictMode r0;
        androidx.fragment.app.Fragment r1, r7;
        androidx.fragment.app.FragmentManager r2, $r4;
        androidx.fragment.app.strictmode.FragmentStrictMode$Policy $r3, $r5, $r6;
        boolean $z0;

        r0 := @this: androidx.fragment.app.strictmode.FragmentStrictMode;

        r1 := @parameter0: androidx.fragment.app.Fragment;

        r7 = r1;

     label1:
        if r7 == null goto label3;

        $z0 = virtualinvoke r7.<androidx.fragment.app.Fragment: boolean isAdded()>();

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke r7.<androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManager getParentFragmentManager()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "declaringFragment.parentFragmentManager");

        r2 = $r4;

        $r5 = virtualinvoke r2.<androidx.fragment.app.FragmentManager: androidx.fragment.app.strictmode.FragmentStrictMode$Policy getStrictModePolicy()>();

        if $r5 == null goto label2;

        $r6 = virtualinvoke r2.<androidx.fragment.app.FragmentManager: androidx.fragment.app.strictmode.FragmentStrictMode$Policy getStrictModePolicy()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r6);

        return $r6;

     label2:
        r7 = virtualinvoke r7.<androidx.fragment.app.Fragment: androidx.fragment.app.Fragment getParentFragment()>();

        goto label1;

     label3:
        $r3 = <androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode$Policy defaultPolicy>;

        return $r3;
    }

    public static final void onFragmentReuse(androidx.fragment.app.Fragment, java.lang.String)
    {
        androidx.fragment.app.Fragment r0;
        java.lang.String r1;
        androidx.fragment.app.strictmode.Violation r2;
        androidx.fragment.app.strictmode.FragmentStrictMode$Policy r3;
        androidx.fragment.app.strictmode.FragmentReuseViolation $r4;
        androidx.fragment.app.strictmode.FragmentStrictMode $r5, $r6, $r9, $r12;
        java.util.Set $r7;
        androidx.fragment.app.strictmode.FragmentStrictMode$Flag $r8;
        boolean $z0, $z1;
        java.lang.Class $r10, $r11;

        r0 := @parameter0: androidx.fragment.app.Fragment;

        r1 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "fragment");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "previousFragmentId");

        $r4 = new androidx.fragment.app.strictmode.FragmentReuseViolation;

        specialinvoke $r4.<androidx.fragment.app.strictmode.FragmentReuseViolation: void <init>(androidx.fragment.app.Fragment,java.lang.String)>(r0, r1);

        r2 = (androidx.fragment.app.strictmode.Violation) $r4;

        $r5 = <androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode INSTANCE>;

        specialinvoke $r5.<androidx.fragment.app.strictmode.FragmentStrictMode: void logIfDebuggingEnabled(androidx.fragment.app.strictmode.Violation)>(r2);

        $r6 = <androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode INSTANCE>;

        r3 = specialinvoke $r6.<androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode$Policy getNearestPolicy(androidx.fragment.app.Fragment)>(r0);

        $r7 = virtualinvoke r3.<androidx.fragment.app.strictmode.FragmentStrictMode$Policy: java.util.Set getFlags$fragment_release()>();

        $r8 = <androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag DETECT_FRAGMENT_REUSE>;

        $z0 = interfaceinvoke $r7.<java.util.Set: boolean contains(java.lang.Object)>($r8);

        if $z0 == 0 goto label1;

        $r9 = <androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode INSTANCE>;

        $r10 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = specialinvoke $r9.<androidx.fragment.app.strictmode.FragmentStrictMode: boolean shouldHandlePolicyViolation(androidx.fragment.app.strictmode.FragmentStrictMode$Policy,java.lang.Class,java.lang.Class)>(r3, $r10, $r11);

        if $z1 == 0 goto label1;

        $r12 = <androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode INSTANCE>;

        specialinvoke $r12.<androidx.fragment.app.strictmode.FragmentStrictMode: void handlePolicyViolation(androidx.fragment.app.strictmode.FragmentStrictMode$Policy,androidx.fragment.app.strictmode.Violation)>(r3, r2);

     label1:
        return;
    }

    public static final void onFragmentTagUsage(androidx.fragment.app.Fragment, android.view.ViewGroup)
    {
        androidx.fragment.app.Fragment r0;
        android.view.ViewGroup r1;
        androidx.fragment.app.strictmode.Violation r2;
        androidx.fragment.app.strictmode.FragmentStrictMode$Policy r3;
        androidx.fragment.app.strictmode.FragmentTagUsageViolation $r4;
        androidx.fragment.app.strictmode.FragmentStrictMode $r5, $r6, $r9, $r12;
        java.util.Set $r7;
        androidx.fragment.app.strictmode.FragmentStrictMode$Flag $r8;
        boolean $z0, $z1;
        java.lang.Class $r10, $r11;

        r0 := @parameter0: androidx.fragment.app.Fragment;

        r1 := @parameter1: android.view.ViewGroup;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "fragment");

        $r4 = new androidx.fragment.app.strictmode.FragmentTagUsageViolation;

        specialinvoke $r4.<androidx.fragment.app.strictmode.FragmentTagUsageViolation: void <init>(androidx.fragment.app.Fragment,android.view.ViewGroup)>(r0, r1);

        r2 = (androidx.fragment.app.strictmode.Violation) $r4;

        $r5 = <androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode INSTANCE>;

        specialinvoke $r5.<androidx.fragment.app.strictmode.FragmentStrictMode: void logIfDebuggingEnabled(androidx.fragment.app.strictmode.Violation)>(r2);

        $r6 = <androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode INSTANCE>;

        r3 = specialinvoke $r6.<androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode$Policy getNearestPolicy(androidx.fragment.app.Fragment)>(r0);

        $r7 = virtualinvoke r3.<androidx.fragment.app.strictmode.FragmentStrictMode$Policy: java.util.Set getFlags$fragment_release()>();

        $r8 = <androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag DETECT_FRAGMENT_TAG_USAGE>;

        $z0 = interfaceinvoke $r7.<java.util.Set: boolean contains(java.lang.Object)>($r8);

        if $z0 == 0 goto label1;

        $r9 = <androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode INSTANCE>;

        $r10 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = specialinvoke $r9.<androidx.fragment.app.strictmode.FragmentStrictMode: boolean shouldHandlePolicyViolation(androidx.fragment.app.strictmode.FragmentStrictMode$Policy,java.lang.Class,java.lang.Class)>(r3, $r10, $r11);

        if $z1 == 0 goto label1;

        $r12 = <androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode INSTANCE>;

        specialinvoke $r12.<androidx.fragment.app.strictmode.FragmentStrictMode: void handlePolicyViolation(androidx.fragment.app.strictmode.FragmentStrictMode$Policy,androidx.fragment.app.strictmode.Violation)>(r3, r2);

     label1:
        return;
    }

    public static final void onSetRetainInstanceUsage(androidx.fragment.app.Fragment)
    {
        androidx.fragment.app.Fragment r0;
        androidx.fragment.app.strictmode.Violation r1;
        androidx.fragment.app.strictmode.FragmentStrictMode$Policy r2;
        androidx.fragment.app.strictmode.SetRetainInstanceUsageViolation $r3;
        androidx.fragment.app.strictmode.FragmentStrictMode $r4, $r5, $r8, $r11;
        java.util.Set $r6;
        androidx.fragment.app.strictmode.FragmentStrictMode$Flag $r7;
        boolean $z0, $z1;
        java.lang.Class $r9, $r10;

        r0 := @parameter0: androidx.fragment.app.Fragment;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "fragment");

        $r3 = new androidx.fragment.app.strictmode.SetRetainInstanceUsageViolation;

        specialinvoke $r3.<androidx.fragment.app.strictmode.SetRetainInstanceUsageViolation: void <init>(androidx.fragment.app.Fragment)>(r0);

        r1 = (androidx.fragment.app.strictmode.Violation) $r3;

        $r4 = <androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode INSTANCE>;

        specialinvoke $r4.<androidx.fragment.app.strictmode.FragmentStrictMode: void logIfDebuggingEnabled(androidx.fragment.app.strictmode.Violation)>(r1);

        $r5 = <androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode INSTANCE>;

        r2 = specialinvoke $r5.<androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode$Policy getNearestPolicy(androidx.fragment.app.Fragment)>(r0);

        $r6 = virtualinvoke r2.<androidx.fragment.app.strictmode.FragmentStrictMode$Policy: java.util.Set getFlags$fragment_release()>();

        $r7 = <androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag DETECT_RETAIN_INSTANCE_USAGE>;

        $z0 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>($r7);

        if $z0 == 0 goto label1;

        $r8 = <androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode INSTANCE>;

        $r9 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = specialinvoke $r8.<androidx.fragment.app.strictmode.FragmentStrictMode: boolean shouldHandlePolicyViolation(androidx.fragment.app.strictmode.FragmentStrictMode$Policy,java.lang.Class,java.lang.Class)>(r2, $r9, $r10);

        if $z1 == 0 goto label1;

        $r11 = <androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode INSTANCE>;

        specialinvoke $r11.<androidx.fragment.app.strictmode.FragmentStrictMode: void handlePolicyViolation(androidx.fragment.app.strictmode.FragmentStrictMode$Policy,androidx.fragment.app.strictmode.Violation)>(r2, r1);

     label1:
        return;
    }

    public static final void onGetRetainInstanceUsage(androidx.fragment.app.Fragment)
    {
        androidx.fragment.app.Fragment r0;
        androidx.fragment.app.strictmode.Violation r1;
        androidx.fragment.app.strictmode.FragmentStrictMode$Policy r2;
        androidx.fragment.app.strictmode.GetRetainInstanceUsageViolation $r3;
        androidx.fragment.app.strictmode.FragmentStrictMode $r4, $r5, $r8, $r11;
        java.util.Set $r6;
        androidx.fragment.app.strictmode.FragmentStrictMode$Flag $r7;
        boolean $z0, $z1;
        java.lang.Class $r9, $r10;

        r0 := @parameter0: androidx.fragment.app.Fragment;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "fragment");

        $r3 = new androidx.fragment.app.strictmode.GetRetainInstanceUsageViolation;

        specialinvoke $r3.<androidx.fragment.app.strictmode.GetRetainInstanceUsageViolation: void <init>(androidx.fragment.app.Fragment)>(r0);

        r1 = (androidx.fragment.app.strictmode.Violation) $r3;

        $r4 = <androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode INSTANCE>;

        specialinvoke $r4.<androidx.fragment.app.strictmode.FragmentStrictMode: void logIfDebuggingEnabled(androidx.fragment.app.strictmode.Violation)>(r1);

        $r5 = <androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode INSTANCE>;

        r2 = specialinvoke $r5.<androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode$Policy getNearestPolicy(androidx.fragment.app.Fragment)>(r0);

        $r6 = virtualinvoke r2.<androidx.fragment.app.strictmode.FragmentStrictMode$Policy: java.util.Set getFlags$fragment_release()>();

        $r7 = <androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag DETECT_RETAIN_INSTANCE_USAGE>;

        $z0 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>($r7);

        if $z0 == 0 goto label1;

        $r8 = <androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode INSTANCE>;

        $r9 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = specialinvoke $r8.<androidx.fragment.app.strictmode.FragmentStrictMode: boolean shouldHandlePolicyViolation(androidx.fragment.app.strictmode.FragmentStrictMode$Policy,java.lang.Class,java.lang.Class)>(r2, $r9, $r10);

        if $z1 == 0 goto label1;

        $r11 = <androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode INSTANCE>;

        specialinvoke $r11.<androidx.fragment.app.strictmode.FragmentStrictMode: void handlePolicyViolation(androidx.fragment.app.strictmode.FragmentStrictMode$Policy,androidx.fragment.app.strictmode.Violation)>(r2, r1);

     label1:
        return;
    }

    public static final void onSetUserVisibleHint(androidx.fragment.app.Fragment, boolean)
    {
        androidx.fragment.app.Fragment r0;
        boolean z0, $z1, $z2;
        androidx.fragment.app.strictmode.Violation r1;
        androidx.fragment.app.strictmode.FragmentStrictMode$Policy r2;
        androidx.fragment.app.strictmode.SetUserVisibleHintViolation $r3;
        androidx.fragment.app.strictmode.FragmentStrictMode $r4, $r5, $r8, $r11;
        java.util.Set $r6;
        androidx.fragment.app.strictmode.FragmentStrictMode$Flag $r7;
        java.lang.Class $r9, $r10;

        r0 := @parameter0: androidx.fragment.app.Fragment;

        z0 := @parameter1: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "fragment");

        $r3 = new androidx.fragment.app.strictmode.SetUserVisibleHintViolation;

        specialinvoke $r3.<androidx.fragment.app.strictmode.SetUserVisibleHintViolation: void <init>(androidx.fragment.app.Fragment,boolean)>(r0, z0);

        r1 = (androidx.fragment.app.strictmode.Violation) $r3;

        $r4 = <androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode INSTANCE>;

        specialinvoke $r4.<androidx.fragment.app.strictmode.FragmentStrictMode: void logIfDebuggingEnabled(androidx.fragment.app.strictmode.Violation)>(r1);

        $r5 = <androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode INSTANCE>;

        r2 = specialinvoke $r5.<androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode$Policy getNearestPolicy(androidx.fragment.app.Fragment)>(r0);

        $r6 = virtualinvoke r2.<androidx.fragment.app.strictmode.FragmentStrictMode$Policy: java.util.Set getFlags$fragment_release()>();

        $r7 = <androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag DETECT_SET_USER_VISIBLE_HINT>;

        $z1 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>($r7);

        if $z1 == 0 goto label1;

        $r8 = <androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode INSTANCE>;

        $r9 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z2 = specialinvoke $r8.<androidx.fragment.app.strictmode.FragmentStrictMode: boolean shouldHandlePolicyViolation(androidx.fragment.app.strictmode.FragmentStrictMode$Policy,java.lang.Class,java.lang.Class)>(r2, $r9, $r10);

        if $z2 == 0 goto label1;

        $r11 = <androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode INSTANCE>;

        specialinvoke $r11.<androidx.fragment.app.strictmode.FragmentStrictMode: void handlePolicyViolation(androidx.fragment.app.strictmode.FragmentStrictMode$Policy,androidx.fragment.app.strictmode.Violation)>(r2, r1);

     label1:
        return;
    }

    public static final void onSetTargetFragmentUsage(androidx.fragment.app.Fragment, androidx.fragment.app.Fragment, int)
    {
        androidx.fragment.app.Fragment r0, r1;
        int i0;
        androidx.fragment.app.strictmode.Violation r2;
        androidx.fragment.app.strictmode.FragmentStrictMode$Policy r3;
        androidx.fragment.app.strictmode.SetTargetFragmentUsageViolation $r4;
        androidx.fragment.app.strictmode.FragmentStrictMode $r5, $r6, $r9, $r12;
        java.util.Set $r7;
        androidx.fragment.app.strictmode.FragmentStrictMode$Flag $r8;
        boolean $z0, $z1;
        java.lang.Class $r10, $r11;

        r0 := @parameter0: androidx.fragment.app.Fragment;

        r1 := @parameter1: androidx.fragment.app.Fragment;

        i0 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "violatingFragment");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "targetFragment");

        $r4 = new androidx.fragment.app.strictmode.SetTargetFragmentUsageViolation;

        specialinvoke $r4.<androidx.fragment.app.strictmode.SetTargetFragmentUsageViolation: void <init>(androidx.fragment.app.Fragment,androidx.fragment.app.Fragment,int)>(r0, r1, i0);

        r2 = (androidx.fragment.app.strictmode.Violation) $r4;

        $r5 = <androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode INSTANCE>;

        specialinvoke $r5.<androidx.fragment.app.strictmode.FragmentStrictMode: void logIfDebuggingEnabled(androidx.fragment.app.strictmode.Violation)>(r2);

        $r6 = <androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode INSTANCE>;

        r3 = specialinvoke $r6.<androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode$Policy getNearestPolicy(androidx.fragment.app.Fragment)>(r0);

        $r7 = virtualinvoke r3.<androidx.fragment.app.strictmode.FragmentStrictMode$Policy: java.util.Set getFlags$fragment_release()>();

        $r8 = <androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag DETECT_TARGET_FRAGMENT_USAGE>;

        $z0 = interfaceinvoke $r7.<java.util.Set: boolean contains(java.lang.Object)>($r8);

        if $z0 == 0 goto label1;

        $r9 = <androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode INSTANCE>;

        $r10 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = specialinvoke $r9.<androidx.fragment.app.strictmode.FragmentStrictMode: boolean shouldHandlePolicyViolation(androidx.fragment.app.strictmode.FragmentStrictMode$Policy,java.lang.Class,java.lang.Class)>(r3, $r10, $r11);

        if $z1 == 0 goto label1;

        $r12 = <androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode INSTANCE>;

        specialinvoke $r12.<androidx.fragment.app.strictmode.FragmentStrictMode: void handlePolicyViolation(androidx.fragment.app.strictmode.FragmentStrictMode$Policy,androidx.fragment.app.strictmode.Violation)>(r3, r2);

     label1:
        return;
    }

    public static final void onGetTargetFragmentUsage(androidx.fragment.app.Fragment)
    {
        androidx.fragment.app.Fragment r0;
        androidx.fragment.app.strictmode.Violation r1;
        androidx.fragment.app.strictmode.FragmentStrictMode$Policy r2;
        androidx.fragment.app.strictmode.GetTargetFragmentUsageViolation $r3;
        androidx.fragment.app.strictmode.FragmentStrictMode $r4, $r5, $r8, $r11;
        java.util.Set $r6;
        androidx.fragment.app.strictmode.FragmentStrictMode$Flag $r7;
        boolean $z0, $z1;
        java.lang.Class $r9, $r10;

        r0 := @parameter0: androidx.fragment.app.Fragment;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "fragment");

        $r3 = new androidx.fragment.app.strictmode.GetTargetFragmentUsageViolation;

        specialinvoke $r3.<androidx.fragment.app.strictmode.GetTargetFragmentUsageViolation: void <init>(androidx.fragment.app.Fragment)>(r0);

        r1 = (androidx.fragment.app.strictmode.Violation) $r3;

        $r4 = <androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode INSTANCE>;

        specialinvoke $r4.<androidx.fragment.app.strictmode.FragmentStrictMode: void logIfDebuggingEnabled(androidx.fragment.app.strictmode.Violation)>(r1);

        $r5 = <androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode INSTANCE>;

        r2 = specialinvoke $r5.<androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode$Policy getNearestPolicy(androidx.fragment.app.Fragment)>(r0);

        $r6 = virtualinvoke r2.<androidx.fragment.app.strictmode.FragmentStrictMode$Policy: java.util.Set getFlags$fragment_release()>();

        $r7 = <androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag DETECT_TARGET_FRAGMENT_USAGE>;

        $z0 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>($r7);

        if $z0 == 0 goto label1;

        $r8 = <androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode INSTANCE>;

        $r9 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = specialinvoke $r8.<androidx.fragment.app.strictmode.FragmentStrictMode: boolean shouldHandlePolicyViolation(androidx.fragment.app.strictmode.FragmentStrictMode$Policy,java.lang.Class,java.lang.Class)>(r2, $r9, $r10);

        if $z1 == 0 goto label1;

        $r11 = <androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode INSTANCE>;

        specialinvoke $r11.<androidx.fragment.app.strictmode.FragmentStrictMode: void handlePolicyViolation(androidx.fragment.app.strictmode.FragmentStrictMode$Policy,androidx.fragment.app.strictmode.Violation)>(r2, r1);

     label1:
        return;
    }

    public static final void onGetTargetFragmentRequestCodeUsage(androidx.fragment.app.Fragment)
    {
        androidx.fragment.app.Fragment r0;
        androidx.fragment.app.strictmode.Violation r1;
        androidx.fragment.app.strictmode.FragmentStrictMode$Policy r2;
        androidx.fragment.app.strictmode.GetTargetFragmentRequestCodeUsageViolation $r3;
        androidx.fragment.app.strictmode.FragmentStrictMode $r4, $r5, $r8, $r11;
        java.util.Set $r6;
        androidx.fragment.app.strictmode.FragmentStrictMode$Flag $r7;
        boolean $z0, $z1;
        java.lang.Class $r9, $r10;

        r0 := @parameter0: androidx.fragment.app.Fragment;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "fragment");

        $r3 = new androidx.fragment.app.strictmode.GetTargetFragmentRequestCodeUsageViolation;

        specialinvoke $r3.<androidx.fragment.app.strictmode.GetTargetFragmentRequestCodeUsageViolation: void <init>(androidx.fragment.app.Fragment)>(r0);

        r1 = (androidx.fragment.app.strictmode.Violation) $r3;

        $r4 = <androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode INSTANCE>;

        specialinvoke $r4.<androidx.fragment.app.strictmode.FragmentStrictMode: void logIfDebuggingEnabled(androidx.fragment.app.strictmode.Violation)>(r1);

        $r5 = <androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode INSTANCE>;

        r2 = specialinvoke $r5.<androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode$Policy getNearestPolicy(androidx.fragment.app.Fragment)>(r0);

        $r6 = virtualinvoke r2.<androidx.fragment.app.strictmode.FragmentStrictMode$Policy: java.util.Set getFlags$fragment_release()>();

        $r7 = <androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag DETECT_TARGET_FRAGMENT_USAGE>;

        $z0 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>($r7);

        if $z0 == 0 goto label1;

        $r8 = <androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode INSTANCE>;

        $r9 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = specialinvoke $r8.<androidx.fragment.app.strictmode.FragmentStrictMode: boolean shouldHandlePolicyViolation(androidx.fragment.app.strictmode.FragmentStrictMode$Policy,java.lang.Class,java.lang.Class)>(r2, $r9, $r10);

        if $z1 == 0 goto label1;

        $r11 = <androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode INSTANCE>;

        specialinvoke $r11.<androidx.fragment.app.strictmode.FragmentStrictMode: void handlePolicyViolation(androidx.fragment.app.strictmode.FragmentStrictMode$Policy,androidx.fragment.app.strictmode.Violation)>(r2, r1);

     label1:
        return;
    }

    public static final void onWrongFragmentContainer(androidx.fragment.app.Fragment, android.view.ViewGroup)
    {
        androidx.fragment.app.Fragment r0;
        android.view.ViewGroup r1;
        androidx.fragment.app.strictmode.Violation r2;
        androidx.fragment.app.strictmode.FragmentStrictMode$Policy r3;
        androidx.fragment.app.strictmode.WrongFragmentContainerViolation $r4;
        androidx.fragment.app.strictmode.FragmentStrictMode $r5, $r6, $r9, $r12;
        java.util.Set $r7;
        androidx.fragment.app.strictmode.FragmentStrictMode$Flag $r8;
        boolean $z0, $z1;
        java.lang.Class $r10, $r11;

        r0 := @parameter0: androidx.fragment.app.Fragment;

        r1 := @parameter1: android.view.ViewGroup;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "fragment");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "container");

        $r4 = new androidx.fragment.app.strictmode.WrongFragmentContainerViolation;

        specialinvoke $r4.<androidx.fragment.app.strictmode.WrongFragmentContainerViolation: void <init>(androidx.fragment.app.Fragment,android.view.ViewGroup)>(r0, r1);

        r2 = (androidx.fragment.app.strictmode.Violation) $r4;

        $r5 = <androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode INSTANCE>;

        specialinvoke $r5.<androidx.fragment.app.strictmode.FragmentStrictMode: void logIfDebuggingEnabled(androidx.fragment.app.strictmode.Violation)>(r2);

        $r6 = <androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode INSTANCE>;

        r3 = specialinvoke $r6.<androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode$Policy getNearestPolicy(androidx.fragment.app.Fragment)>(r0);

        $r7 = virtualinvoke r3.<androidx.fragment.app.strictmode.FragmentStrictMode$Policy: java.util.Set getFlags$fragment_release()>();

        $r8 = <androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag DETECT_WRONG_FRAGMENT_CONTAINER>;

        $z0 = interfaceinvoke $r7.<java.util.Set: boolean contains(java.lang.Object)>($r8);

        if $z0 == 0 goto label1;

        $r9 = <androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode INSTANCE>;

        $r10 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = specialinvoke $r9.<androidx.fragment.app.strictmode.FragmentStrictMode: boolean shouldHandlePolicyViolation(androidx.fragment.app.strictmode.FragmentStrictMode$Policy,java.lang.Class,java.lang.Class)>(r3, $r10, $r11);

        if $z1 == 0 goto label1;

        $r12 = <androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode INSTANCE>;

        specialinvoke $r12.<androidx.fragment.app.strictmode.FragmentStrictMode: void handlePolicyViolation(androidx.fragment.app.strictmode.FragmentStrictMode$Policy,androidx.fragment.app.strictmode.Violation)>(r3, r2);

     label1:
        return;
    }

    public final void onPolicyViolation(androidx.fragment.app.strictmode.Violation)
    {
        androidx.fragment.app.strictmode.FragmentStrictMode r0;
        androidx.fragment.app.strictmode.Violation r1;
        androidx.fragment.app.Fragment r2;
        androidx.fragment.app.strictmode.FragmentStrictMode$Policy r3;
        java.lang.Class $r4, $r5;
        boolean $z0;

        r0 := @this: androidx.fragment.app.strictmode.FragmentStrictMode;

        r1 := @parameter0: androidx.fragment.app.strictmode.Violation;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "violation");

        specialinvoke r0.<androidx.fragment.app.strictmode.FragmentStrictMode: void logIfDebuggingEnabled(androidx.fragment.app.strictmode.Violation)>(r1);

        r2 = virtualinvoke r1.<androidx.fragment.app.strictmode.Violation: androidx.fragment.app.Fragment getFragment()>();

        r3 = specialinvoke r0.<androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode$Policy getNearestPolicy(androidx.fragment.app.Fragment)>(r2);

        $r4 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = specialinvoke r0.<androidx.fragment.app.strictmode.FragmentStrictMode: boolean shouldHandlePolicyViolation(androidx.fragment.app.strictmode.FragmentStrictMode$Policy,java.lang.Class,java.lang.Class)>(r3, $r4, $r5);

        if $z0 == 0 goto label1;

        specialinvoke r0.<androidx.fragment.app.strictmode.FragmentStrictMode: void handlePolicyViolation(androidx.fragment.app.strictmode.FragmentStrictMode$Policy,androidx.fragment.app.strictmode.Violation)>(r3, r1);

     label1:
        return;
    }

    private final void logIfDebuggingEnabled(androidx.fragment.app.strictmode.Violation)
    {
        androidx.fragment.app.strictmode.FragmentStrictMode r0;
        androidx.fragment.app.strictmode.Violation r1;
        boolean $z0;
        java.lang.StringBuilder $r2, $r3, $r7;
        androidx.fragment.app.Fragment $r4;
        java.lang.Class $r5;
        java.lang.String $r6, $r8;
        java.lang.Throwable $r9;

        r0 := @this: androidx.fragment.app.strictmode.FragmentStrictMode;

        r1 := @parameter0: androidx.fragment.app.strictmode.Violation;

        $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(3);

        if $z0 == 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("StrictMode violation in ");

        $r4 = virtualinvoke r1.<androidx.fragment.app.strictmode.Violation: androidx.fragment.app.Fragment getFragment()>();

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = (java.lang.Throwable) r1;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("FragmentManager", $r8, $r9);

     label1:
        return;
    }

    private final boolean shouldHandlePolicyViolation(androidx.fragment.app.strictmode.FragmentStrictMode$Policy, java.lang.Class, java.lang.Class)
    {
        androidx.fragment.app.strictmode.FragmentStrictMode r0;
        androidx.fragment.app.strictmode.FragmentStrictMode$Policy r1;
        java.lang.Class r2, r3, $r9, $r11;
        java.lang.String r4;
        java.util.Set r5, $r8;
        java.util.Map $r6;
        java.lang.Object $r7;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Iterable $r10;

        r0 := @this: androidx.fragment.app.strictmode.FragmentStrictMode;

        r1 := @parameter0: androidx.fragment.app.strictmode.FragmentStrictMode$Policy;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: java.lang.Class;

        r4 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke r1.<androidx.fragment.app.strictmode.FragmentStrictMode$Policy: java.util.Map getMAllowedViolations$fragment_release()>();

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        $r8 = (java.util.Set) $r7;

        if $r8 != null goto label1;

        return 1;

     label1:
        r5 = $r8;

        $r9 = virtualinvoke r3.<java.lang.Class: java.lang.Class getSuperclass()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r9, class "Landroidx/fragment/app/strictmode/Violation;");

        if $z0 != 0 goto label2;

        $r10 = (java.lang.Iterable) r5;

        $r11 = virtualinvoke r3.<java.lang.Class: java.lang.Class getSuperclass()>();

        $z2 = staticinvoke <kotlin.collections.CollectionsKt: boolean contains(java.lang.Iterable,java.lang.Object)>($r10, $r11);

        if $z2 == 0 goto label2;

        return 0;

     label2:
        $z1 = interfaceinvoke r5.<java.util.Set: boolean contains(java.lang.Object)>(r3);

        if $z1 != 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;
    }

    private final void handlePolicyViolation(androidx.fragment.app.strictmode.FragmentStrictMode$Policy, androidx.fragment.app.strictmode.Violation)
    {
        androidx.fragment.app.strictmode.FragmentStrictMode r0;
        androidx.fragment.app.strictmode.FragmentStrictMode$Policy r1;
        androidx.fragment.app.strictmode.Violation r2;
        androidx.fragment.app.Fragment r3;
        java.lang.String r4, $r16;
        java.lang.Class $r5;
        java.util.Set $r6, $r9;
        androidx.fragment.app.strictmode.FragmentStrictMode$Flag $r7, $r10;
        boolean $z0, $z1;
        androidx.fragment.app.strictmode.FragmentStrictMode$OnViolationListener $r8;
        java.lang.Runnable $r11, $r12;
        java.lang.StringBuilder $r13, $r14, $r15;
        java.lang.Throwable $r17;

        r0 := @this: androidx.fragment.app.strictmode.FragmentStrictMode;

        r1 := @parameter0: androidx.fragment.app.strictmode.FragmentStrictMode$Policy;

        r2 := @parameter1: androidx.fragment.app.strictmode.Violation;

        r3 = virtualinvoke r2.<androidx.fragment.app.strictmode.Violation: androidx.fragment.app.Fragment getFragment()>();

        $r5 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        r4 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke r1.<androidx.fragment.app.strictmode.FragmentStrictMode$Policy: java.util.Set getFlags$fragment_release()>();

        $r7 = <androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag PENALTY_LOG>;

        $z0 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>($r7);

        if $z0 == 0 goto label1;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Policy violation in ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = (java.lang.Throwable) r2;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("FragmentStrictMode", $r16, $r17);

     label1:
        $r8 = virtualinvoke r1.<androidx.fragment.app.strictmode.FragmentStrictMode$Policy: androidx.fragment.app.strictmode.FragmentStrictMode$OnViolationListener getListener$fragment_release()>();

        if $r8 == null goto label2;

        $r12 = dynamicinvoke "run" <java.lang.Runnable (androidx.fragment.app.strictmode.FragmentStrictMode$Policy,androidx.fragment.app.strictmode.Violation)>(r1, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.fragment.app.strictmode.FragmentStrictMode: void handlePolicyViolation$lambda-0(androidx.fragment.app.strictmode.FragmentStrictMode$Policy,androidx.fragment.app.strictmode.Violation)>, methodtype: void __METHODTYPE__());

        specialinvoke r0.<androidx.fragment.app.strictmode.FragmentStrictMode: void runOnHostThread(androidx.fragment.app.Fragment,java.lang.Runnable)>(r3, $r12);

     label2:
        $r9 = virtualinvoke r1.<androidx.fragment.app.strictmode.FragmentStrictMode$Policy: java.util.Set getFlags$fragment_release()>();

        $r10 = <androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag PENALTY_DEATH>;

        $z1 = interfaceinvoke $r9.<java.util.Set: boolean contains(java.lang.Object)>($r10);

        if $z1 == 0 goto label3;

        $r11 = dynamicinvoke "run" <java.lang.Runnable (java.lang.String,androidx.fragment.app.strictmode.Violation)>(r4, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.fragment.app.strictmode.FragmentStrictMode: void handlePolicyViolation$lambda-1(java.lang.String,androidx.fragment.app.strictmode.Violation)>, methodtype: void __METHODTYPE__());

        specialinvoke r0.<androidx.fragment.app.strictmode.FragmentStrictMode: void runOnHostThread(androidx.fragment.app.Fragment,java.lang.Runnable)>(r3, $r11);

     label3:
        return;
    }

    private final void runOnHostThread(androidx.fragment.app.Fragment, java.lang.Runnable)
    {
        androidx.fragment.app.strictmode.FragmentStrictMode r0;
        androidx.fragment.app.Fragment r1;
        java.lang.Runnable r2;
        android.os.Handler r3, $r6;
        boolean $z0, $z1;
        androidx.fragment.app.FragmentManager $r4;
        androidx.fragment.app.FragmentHostCallback $r5;
        android.os.Looper $r7, $r8;

        r0 := @this: androidx.fragment.app.strictmode.FragmentStrictMode;

        r1 := @parameter0: androidx.fragment.app.Fragment;

        r2 := @parameter1: java.lang.Runnable;

        $z0 = virtualinvoke r1.<androidx.fragment.app.Fragment: boolean isAdded()>();

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke r1.<androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManager getParentFragmentManager()>();

        $r5 = virtualinvoke $r4.<androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentHostCallback getHost()>();

        $r6 = virtualinvoke $r5.<androidx.fragment.app.FragmentHostCallback: android.os.Handler getHandler()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "fragment.parentFragmentManager.host.handler");

        r3 = $r6;

        $r7 = virtualinvoke r3.<android.os.Handler: android.os.Looper getLooper()>();

        $r8 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r7, $r8);

        if $z1 == 0 goto label1;

        interfaceinvoke r2.<java.lang.Runnable: void run()>();

        goto label3;

     label1:
        virtualinvoke r3.<android.os.Handler: boolean post(java.lang.Runnable)>(r2);

        goto label3;

     label2:
        interfaceinvoke r2.<java.lang.Runnable: void run()>();

     label3:
        return;
    }

    private static final void handlePolicyViolation$lambda-0(androidx.fragment.app.strictmode.FragmentStrictMode$Policy, androidx.fragment.app.strictmode.Violation)
    {
        androidx.fragment.app.strictmode.FragmentStrictMode$Policy $r0;
        androidx.fragment.app.strictmode.Violation $r1;
        androidx.fragment.app.strictmode.FragmentStrictMode$OnViolationListener $r2;

        $r0 := @parameter0: androidx.fragment.app.strictmode.FragmentStrictMode$Policy;

        $r1 := @parameter1: androidx.fragment.app.strictmode.Violation;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$policy");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$violation");

        $r2 = virtualinvoke $r0.<androidx.fragment.app.strictmode.FragmentStrictMode$Policy: androidx.fragment.app.strictmode.FragmentStrictMode$OnViolationListener getListener$fragment_release()>();

        interfaceinvoke $r2.<androidx.fragment.app.strictmode.FragmentStrictMode$OnViolationListener: void onViolation(androidx.fragment.app.strictmode.Violation)>($r1);

        return;
    }

    private static final void handlePolicyViolation$lambda-1(java.lang.String, androidx.fragment.app.strictmode.Violation)
    {
        java.lang.String $r0, $r5;
        androidx.fragment.app.strictmode.Violation $r1;
        java.lang.StringBuilder $r3, $r4, r7;
        java.lang.Throwable $r6, r8;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: androidx.fragment.app.strictmode.Violation;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$violation");

        r7 = new java.lang.StringBuilder;

        specialinvoke r7.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Policy violation with PENALTY_DEATH in ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = (java.lang.Throwable) $r1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("FragmentStrictMode", $r5, $r6);

        r8 = (java.lang.Throwable) $r1;

        throw r8;
    }

    static void <clinit>()
    {
        androidx.fragment.app.strictmode.FragmentStrictMode $r0;
        androidx.fragment.app.strictmode.FragmentStrictMode$Policy $r1;

        $r0 = new androidx.fragment.app.strictmode.FragmentStrictMode;

        specialinvoke $r0.<androidx.fragment.app.strictmode.FragmentStrictMode: void <init>()>();

        <androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode INSTANCE> = $r0;

        $r1 = <androidx.fragment.app.strictmode.FragmentStrictMode$Policy: androidx.fragment.app.strictmode.FragmentStrictMode$Policy LAX>;

        <androidx.fragment.app.strictmode.FragmentStrictMode: androidx.fragment.app.strictmode.FragmentStrictMode$Policy defaultPolicy> = $r1;

        return;
    }

androidx.fragment.app.strictmode.FragmentStrictMode$Flag
<androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag PENALTY_LOG>
<androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag PENALTY_DEATH>
<androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag DETECT_FRAGMENT_REUSE>
<androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag DETECT_FRAGMENT_TAG_USAGE>
<androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag DETECT_RETAIN_INSTANCE_USAGE>
<androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag DETECT_SET_USER_VISIBLE_HINT>
<androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag DETECT_TARGET_FRAGMENT_USAGE>
<androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag DETECT_WRONG_FRAGMENT_CONTAINER>
<androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag[] $VALUES>
    private void <init>(java.lang.String, int)
    {
        androidx.fragment.app.strictmode.FragmentStrictMode$Flag r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: androidx.fragment.app.strictmode.FragmentStrictMode$Flag;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0);

        return;
    }

    public static androidx.fragment.app.strictmode.FragmentStrictMode$Flag[] values()
    {
        androidx.fragment.app.strictmode.FragmentStrictMode$Flag[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (androidx.fragment.app.strictmode.FragmentStrictMode$Flag[]) $r1;

        return $r2;
    }

    public static androidx.fragment.app.strictmode.FragmentStrictMode$Flag valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        androidx.fragment.app.strictmode.FragmentStrictMode$Flag $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroidx/fragment/app/strictmode/FragmentStrictMode$Flag;", r0);

        $r2 = (androidx.fragment.app.strictmode.FragmentStrictMode$Flag) $r1;

        return $r2;
    }

    private static final androidx.fragment.app.strictmode.FragmentStrictMode$Flag[] $values()
    {
        androidx.fragment.app.strictmode.FragmentStrictMode$Flag[] r0;
        androidx.fragment.app.strictmode.FragmentStrictMode$Flag $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        r0 = newarray (androidx.fragment.app.strictmode.FragmentStrictMode$Flag)[8];

        $r1 = <androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag PENALTY_LOG>;

        r0[0] = $r1;

        $r2 = <androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag PENALTY_DEATH>;

        r0[1] = $r2;

        $r3 = <androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag DETECT_FRAGMENT_REUSE>;

        r0[2] = $r3;

        $r4 = <androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag DETECT_FRAGMENT_TAG_USAGE>;

        r0[3] = $r4;

        $r5 = <androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag DETECT_RETAIN_INSTANCE_USAGE>;

        r0[4] = $r5;

        $r6 = <androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag DETECT_SET_USER_VISIBLE_HINT>;

        r0[5] = $r6;

        $r7 = <androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag DETECT_TARGET_FRAGMENT_USAGE>;

        r0[6] = $r7;

        $r8 = <androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag DETECT_WRONG_FRAGMENT_CONTAINER>;

        r0[7] = $r8;

        return r0;
    }

    static void <clinit>()
    {
        androidx.fragment.app.strictmode.FragmentStrictMode$Flag $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        androidx.fragment.app.strictmode.FragmentStrictMode$Flag[] $r8;

        $r0 = new androidx.fragment.app.strictmode.FragmentStrictMode$Flag;

        specialinvoke $r0.<androidx.fragment.app.strictmode.FragmentStrictMode$Flag: void <init>(java.lang.String,int)>("PENALTY_LOG", 0);

        <androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag PENALTY_LOG> = $r0;

        $r1 = new androidx.fragment.app.strictmode.FragmentStrictMode$Flag;

        specialinvoke $r1.<androidx.fragment.app.strictmode.FragmentStrictMode$Flag: void <init>(java.lang.String,int)>("PENALTY_DEATH", 1);

        <androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag PENALTY_DEATH> = $r1;

        $r2 = new androidx.fragment.app.strictmode.FragmentStrictMode$Flag;

        specialinvoke $r2.<androidx.fragment.app.strictmode.FragmentStrictMode$Flag: void <init>(java.lang.String,int)>("DETECT_FRAGMENT_REUSE", 2);

        <androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag DETECT_FRAGMENT_REUSE> = $r2;

        $r3 = new androidx.fragment.app.strictmode.FragmentStrictMode$Flag;

        specialinvoke $r3.<androidx.fragment.app.strictmode.FragmentStrictMode$Flag: void <init>(java.lang.String,int)>("DETECT_FRAGMENT_TAG_USAGE", 3);

        <androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag DETECT_FRAGMENT_TAG_USAGE> = $r3;

        $r4 = new androidx.fragment.app.strictmode.FragmentStrictMode$Flag;

        specialinvoke $r4.<androidx.fragment.app.strictmode.FragmentStrictMode$Flag: void <init>(java.lang.String,int)>("DETECT_RETAIN_INSTANCE_USAGE", 4);

        <androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag DETECT_RETAIN_INSTANCE_USAGE> = $r4;

        $r5 = new androidx.fragment.app.strictmode.FragmentStrictMode$Flag;

        specialinvoke $r5.<androidx.fragment.app.strictmode.FragmentStrictMode$Flag: void <init>(java.lang.String,int)>("DETECT_SET_USER_VISIBLE_HINT", 5);

        <androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag DETECT_SET_USER_VISIBLE_HINT> = $r5;

        $r6 = new androidx.fragment.app.strictmode.FragmentStrictMode$Flag;

        specialinvoke $r6.<androidx.fragment.app.strictmode.FragmentStrictMode$Flag: void <init>(java.lang.String,int)>("DETECT_TARGET_FRAGMENT_USAGE", 6);

        <androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag DETECT_TARGET_FRAGMENT_USAGE> = $r6;

        $r7 = new androidx.fragment.app.strictmode.FragmentStrictMode$Flag;

        specialinvoke $r7.<androidx.fragment.app.strictmode.FragmentStrictMode$Flag: void <init>(java.lang.String,int)>("DETECT_WRONG_FRAGMENT_CONTAINER", 7);

        <androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag DETECT_WRONG_FRAGMENT_CONTAINER> = $r7;

        $r8 = staticinvoke <androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag[] $values()>();

        <androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag[] $VALUES> = $r8;

        return;
    }

androidx.fragment.app.strictmode.FragmentStrictMode$OnViolationListener
<androidx.fragment.app.strictmode.FragmentStrictMode$OnViolationListener: void onViolation(androidx.fragment.app.strictmode.Violation)>
androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder
<androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder: java.util.Set flags>
<androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder: androidx.fragment.app.strictmode.FragmentStrictMode$OnViolationListener listener>
<androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder: java.util.Map mAllowedViolations>
    public void <init>()
    {
        androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder r0;
        java.util.LinkedHashSet $r1;
        java.util.Set $r2;
        java.util.LinkedHashMap $r3;
        java.util.Map $r4;

        r0 := @this: androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedHashSet;

        specialinvoke $r1.<java.util.LinkedHashSet: void <init>()>();

        $r2 = (java.util.Set) $r1;

        r0.<androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder: java.util.Set flags> = $r2;

        $r3 = new java.util.LinkedHashMap;

        specialinvoke $r3.<java.util.LinkedHashMap: void <init>()>();

        $r4 = (java.util.Map) $r3;

        r0.<androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder: java.util.Map mAllowedViolations> = $r4;

        return;
    }

    public final androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder penaltyLog()
    {
        androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder r0;
        androidx.fragment.app.strictmode.FragmentStrictMode$Flag $r1;
        java.util.Set $r2;

        r0 := @this: androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder;

        $r2 = r0.<androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder: java.util.Set flags>;

        $r1 = <androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag PENALTY_LOG>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r1);

        return r0;
    }

    public final androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder penaltyDeath()
    {
        androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder r0;
        androidx.fragment.app.strictmode.FragmentStrictMode$Flag $r1;
        java.util.Set $r2;

        r0 := @this: androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder;

        $r2 = r0.<androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder: java.util.Set flags>;

        $r1 = <androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag PENALTY_DEATH>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r1);

        return r0;
    }

    public final androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder penaltyListener(androidx.fragment.app.strictmode.FragmentStrictMode$OnViolationListener)
    {
        androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder r0;
        androidx.fragment.app.strictmode.FragmentStrictMode$OnViolationListener r1;

        r0 := @this: androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder;

        r1 := @parameter0: androidx.fragment.app.strictmode.FragmentStrictMode$OnViolationListener;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "listener");

        r0.<androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder: androidx.fragment.app.strictmode.FragmentStrictMode$OnViolationListener listener> = r1;

        return r0;
    }

    public final androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder detectFragmentReuse()
    {
        androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder r0;
        androidx.fragment.app.strictmode.FragmentStrictMode$Flag $r1;
        java.util.Set $r2;

        r0 := @this: androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder;

        $r2 = r0.<androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder: java.util.Set flags>;

        $r1 = <androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag DETECT_FRAGMENT_REUSE>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r1);

        return r0;
    }

    public final androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder detectFragmentTagUsage()
    {
        androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder r0;
        androidx.fragment.app.strictmode.FragmentStrictMode$Flag $r1;
        java.util.Set $r2;

        r0 := @this: androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder;

        $r2 = r0.<androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder: java.util.Set flags>;

        $r1 = <androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag DETECT_FRAGMENT_TAG_USAGE>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r1);

        return r0;
    }

    public final androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder detectRetainInstanceUsage()
    {
        androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder r0;
        androidx.fragment.app.strictmode.FragmentStrictMode$Flag $r1;
        java.util.Set $r2;

        r0 := @this: androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder;

        $r2 = r0.<androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder: java.util.Set flags>;

        $r1 = <androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag DETECT_RETAIN_INSTANCE_USAGE>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r1);

        return r0;
    }

    public final androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder detectSetUserVisibleHint()
    {
        androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder r0;
        androidx.fragment.app.strictmode.FragmentStrictMode$Flag $r1;
        java.util.Set $r2;

        r0 := @this: androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder;

        $r2 = r0.<androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder: java.util.Set flags>;

        $r1 = <androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag DETECT_SET_USER_VISIBLE_HINT>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r1);

        return r0;
    }

    public final androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder detectTargetFragmentUsage()
    {
        androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder r0;
        androidx.fragment.app.strictmode.FragmentStrictMode$Flag $r1;
        java.util.Set $r2;

        r0 := @this: androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder;

        $r2 = r0.<androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder: java.util.Set flags>;

        $r1 = <androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag DETECT_TARGET_FRAGMENT_USAGE>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r1);

        return r0;
    }

    public final androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder detectWrongFragmentContainer()
    {
        androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder r0;
        androidx.fragment.app.strictmode.FragmentStrictMode$Flag $r1;
        java.util.Set $r2;

        r0 := @this: androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder;

        $r2 = r0.<androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder: java.util.Set flags>;

        $r1 = <androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag DETECT_WRONG_FRAGMENT_CONTAINER>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r1);

        return r0;
    }

    public final androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder allowViolation(java.lang.Class, java.lang.Class)
    {
        androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder r0, $r4;
        java.lang.Class r1, r2;
        java.lang.String r3;

        r0 := @this: androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "fragmentClass");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "violationClass");

        r3 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r3, "fragmentClassString");

        $r4 = virtualinvoke r0.<androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder: androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder allowViolation(java.lang.String,java.lang.Class)>(r3, r2);

        return $r4;
    }

    public final androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder allowViolation(java.lang.String, java.lang.Class)
    {
        androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder r0;
        java.lang.String r1;
        java.lang.Class r2;
        java.util.Map $r3, $r5;
        java.lang.Object $r4;
        java.util.LinkedHashSet $r7;
        java.util.Set r8;

        r0 := @this: androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "fragmentClass");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "violationClass");

        $r3 = r0.<androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder: java.util.Map mAllowedViolations>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r8 = (java.util.Set) $r4;

        if r8 != null goto label1;

        $r7 = new java.util.LinkedHashSet;

        specialinvoke $r7.<java.util.LinkedHashSet: void <init>()>();

        r8 = (java.util.Set) $r7;

     label1:
        interfaceinvoke r8.<java.util.Set: boolean add(java.lang.Object)>(r2);

        $r5 = r0.<androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder: java.util.Map mAllowedViolations>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r8);

        return r0;
    }

    public final androidx.fragment.app.strictmode.FragmentStrictMode$Policy build()
    {
        androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder r0;
        androidx.fragment.app.strictmode.FragmentStrictMode$OnViolationListener $r1, $r7;
        androidx.fragment.app.strictmode.FragmentStrictMode$Flag $r2;
        java.util.Set $r3, $r6;
        boolean $z0;
        androidx.fragment.app.strictmode.FragmentStrictMode$Policy $r5;
        java.util.Map $r8;

        r0 := @this: androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder;

        $r1 = r0.<androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder: androidx.fragment.app.strictmode.FragmentStrictMode$OnViolationListener listener>;

        if $r1 != null goto label1;

        $r3 = r0.<androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder: java.util.Set flags>;

        $r2 = <androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag PENALTY_DEATH>;

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        virtualinvoke r0.<androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder: androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder penaltyLog()>();

     label1:
        $r5 = new androidx.fragment.app.strictmode.FragmentStrictMode$Policy;

        $r6 = r0.<androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder: java.util.Set flags>;

        $r7 = r0.<androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder: androidx.fragment.app.strictmode.FragmentStrictMode$OnViolationListener listener>;

        $r8 = r0.<androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Builder: java.util.Map mAllowedViolations>;

        specialinvoke $r5.<androidx.fragment.app.strictmode.FragmentStrictMode$Policy: void <init>(java.util.Set,androidx.fragment.app.strictmode.FragmentStrictMode$OnViolationListener,java.util.Map)>($r6, $r7, $r8);

        return $r5;
    }

androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Companion
    private void <init>()
    {
        androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Companion r0;

        r0 := @this: androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Companion: void <init>()>();

        return;
    }

androidx.fragment.app.strictmode.FragmentStrictMode$Policy
<androidx.fragment.app.strictmode.FragmentStrictMode$Policy: androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Companion Companion>
<androidx.fragment.app.strictmode.FragmentStrictMode$Policy: java.util.Set flags>
<androidx.fragment.app.strictmode.FragmentStrictMode$Policy: androidx.fragment.app.strictmode.FragmentStrictMode$OnViolationListener listener>
<androidx.fragment.app.strictmode.FragmentStrictMode$Policy: java.util.Map mAllowedViolations>
<androidx.fragment.app.strictmode.FragmentStrictMode$Policy: androidx.fragment.app.strictmode.FragmentStrictMode$Policy LAX>
    public void <init>(java.util.Set, androidx.fragment.app.strictmode.FragmentStrictMode$OnViolationListener, java.util.Map)
    {
        androidx.fragment.app.strictmode.FragmentStrictMode$Policy r0;
        java.util.Set r1, r8, $r10;
        androidx.fragment.app.strictmode.FragmentStrictMode$OnViolationListener r2;
        java.util.Map r3, r4;
        java.util.Iterator r5;
        java.util.Map$Entry r6;
        java.lang.String r7;
        java.util.LinkedHashMap $r9;
        boolean $z0;
        java.lang.Object $r11, $r12, $r13;

        r0 := @this: androidx.fragment.app.strictmode.FragmentStrictMode$Policy;

        r1 := @parameter0: java.util.Set;

        r2 := @parameter1: androidx.fragment.app.strictmode.FragmentStrictMode$OnViolationListener;

        r3 := @parameter2: java.util.Map;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "flags");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "allowedViolations");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.fragment.app.strictmode.FragmentStrictMode$Policy: java.util.Set flags> = r1;

        r0.<androidx.fragment.app.strictmode.FragmentStrictMode$Policy: androidx.fragment.app.strictmode.FragmentStrictMode$OnViolationListener listener> = r2;

        $r9 = new java.util.LinkedHashMap;

        specialinvoke $r9.<java.util.LinkedHashMap: void <init>()>();

        r4 = (java.util.Map) $r9;

        $r10 = interfaceinvoke r3.<java.util.Map: java.util.Set entrySet()>();

        r5 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r11 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r11;

        $r12 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        r7 = (java.lang.String) $r12;

        $r13 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        r8 = (java.util.Set) $r13;

        interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, r8);

        goto label1;

     label2:
        r0.<androidx.fragment.app.strictmode.FragmentStrictMode$Policy: java.util.Map mAllowedViolations> = r4;

        return;
    }

    public final java.util.Set getFlags$fragment_release()
    {
        androidx.fragment.app.strictmode.FragmentStrictMode$Policy r0;
        java.util.Set $r1;

        r0 := @this: androidx.fragment.app.strictmode.FragmentStrictMode$Policy;

        $r1 = r0.<androidx.fragment.app.strictmode.FragmentStrictMode$Policy: java.util.Set flags>;

        return $r1;
    }

    public final androidx.fragment.app.strictmode.FragmentStrictMode$OnViolationListener getListener$fragment_release()
    {
        androidx.fragment.app.strictmode.FragmentStrictMode$Policy r0;
        androidx.fragment.app.strictmode.FragmentStrictMode$OnViolationListener $r1;

        r0 := @this: androidx.fragment.app.strictmode.FragmentStrictMode$Policy;

        $r1 = r0.<androidx.fragment.app.strictmode.FragmentStrictMode$Policy: androidx.fragment.app.strictmode.FragmentStrictMode$OnViolationListener listener>;

        return $r1;
    }

    public final java.util.Map getMAllowedViolations$fragment_release()
    {
        androidx.fragment.app.strictmode.FragmentStrictMode$Policy r0;
        java.util.Map $r1;

        r0 := @this: androidx.fragment.app.strictmode.FragmentStrictMode$Policy;

        $r1 = r0.<androidx.fragment.app.strictmode.FragmentStrictMode$Policy: java.util.Map mAllowedViolations>;

        return $r1;
    }

    static void <clinit>()
    {
        androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Companion $r0;
        androidx.fragment.app.strictmode.FragmentStrictMode$Policy $r1;
        java.util.Set $r2;
        java.util.Map $r3;

        $r0 = new androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Companion;

        specialinvoke $r0.<androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.fragment.app.strictmode.FragmentStrictMode$Policy: androidx.fragment.app.strictmode.FragmentStrictMode$Policy$Companion Companion> = $r0;

        $r1 = new androidx.fragment.app.strictmode.FragmentStrictMode$Policy;

        $r2 = staticinvoke <kotlin.collections.SetsKt: java.util.Set emptySet()>();

        $r3 = staticinvoke <kotlin.collections.MapsKt: java.util.Map emptyMap()>();

        specialinvoke $r1.<androidx.fragment.app.strictmode.FragmentStrictMode$Policy: void <init>(java.util.Set,androidx.fragment.app.strictmode.FragmentStrictMode$OnViolationListener,java.util.Map)>($r2, null, $r3);

        <androidx.fragment.app.strictmode.FragmentStrictMode$Policy: androidx.fragment.app.strictmode.FragmentStrictMode$Policy LAX> = $r1;

        return;
    }

