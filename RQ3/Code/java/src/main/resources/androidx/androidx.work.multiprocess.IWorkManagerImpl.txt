androidx.work.multiprocess.IWorkManagerImpl
<androidx.work.multiprocess.IWorkManagerImpl: java.lang.String DESCRIPTOR>
<androidx.work.multiprocess.IWorkManagerImpl: void enqueueWorkRequests(byte[],androidx.work.multiprocess.IWorkManagerImplCallback)>
<androidx.work.multiprocess.IWorkManagerImpl: void updateUniquePeriodicWorkRequest(java.lang.String,byte[],androidx.work.multiprocess.IWorkManagerImplCallback)>
<androidx.work.multiprocess.IWorkManagerImpl: void enqueueContinuation(byte[],androidx.work.multiprocess.IWorkManagerImplCallback)>
<androidx.work.multiprocess.IWorkManagerImpl: void cancelWorkById(java.lang.String,androidx.work.multiprocess.IWorkManagerImplCallback)>
<androidx.work.multiprocess.IWorkManagerImpl: void cancelAllWorkByTag(java.lang.String,androidx.work.multiprocess.IWorkManagerImplCallback)>
<androidx.work.multiprocess.IWorkManagerImpl: void cancelUniqueWork(java.lang.String,androidx.work.multiprocess.IWorkManagerImplCallback)>
<androidx.work.multiprocess.IWorkManagerImpl: void cancelAllWork(androidx.work.multiprocess.IWorkManagerImplCallback)>
<androidx.work.multiprocess.IWorkManagerImpl: void queryWorkInfo(byte[],androidx.work.multiprocess.IWorkManagerImplCallback)>
<androidx.work.multiprocess.IWorkManagerImpl: void setProgress(byte[],androidx.work.multiprocess.IWorkManagerImplCallback)>
<androidx.work.multiprocess.IWorkManagerImpl: void setForegroundAsync(byte[],androidx.work.multiprocess.IWorkManagerImplCallback)>
androidx.work.multiprocess.IWorkManagerImpl$Default
    public void <init>()
    {
        androidx.work.multiprocess.IWorkManagerImpl$Default r0;

        r0 := @this: androidx.work.multiprocess.IWorkManagerImpl$Default;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void enqueueWorkRequests(byte[], androidx.work.multiprocess.IWorkManagerImplCallback) throws android.os.RemoteException
    {
        androidx.work.multiprocess.IWorkManagerImpl$Default r0;
        byte[] r1;
        androidx.work.multiprocess.IWorkManagerImplCallback r2;

        r0 := @this: androidx.work.multiprocess.IWorkManagerImpl$Default;

        r1 := @parameter0: byte[];

        r2 := @parameter1: androidx.work.multiprocess.IWorkManagerImplCallback;

        return;
    }

    public void updateUniquePeriodicWorkRequest(java.lang.String, byte[], androidx.work.multiprocess.IWorkManagerImplCallback) throws android.os.RemoteException
    {
        androidx.work.multiprocess.IWorkManagerImpl$Default r0;
        java.lang.String r1;
        byte[] r2;
        androidx.work.multiprocess.IWorkManagerImplCallback r3;

        r0 := @this: androidx.work.multiprocess.IWorkManagerImpl$Default;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        r3 := @parameter2: androidx.work.multiprocess.IWorkManagerImplCallback;

        return;
    }

    public void enqueueContinuation(byte[], androidx.work.multiprocess.IWorkManagerImplCallback) throws android.os.RemoteException
    {
        androidx.work.multiprocess.IWorkManagerImpl$Default r0;
        byte[] r1;
        androidx.work.multiprocess.IWorkManagerImplCallback r2;

        r0 := @this: androidx.work.multiprocess.IWorkManagerImpl$Default;

        r1 := @parameter0: byte[];

        r2 := @parameter1: androidx.work.multiprocess.IWorkManagerImplCallback;

        return;
    }

    public void cancelWorkById(java.lang.String, androidx.work.multiprocess.IWorkManagerImplCallback) throws android.os.RemoteException
    {
        androidx.work.multiprocess.IWorkManagerImpl$Default r0;
        java.lang.String r1;
        androidx.work.multiprocess.IWorkManagerImplCallback r2;

        r0 := @this: androidx.work.multiprocess.IWorkManagerImpl$Default;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.work.multiprocess.IWorkManagerImplCallback;

        return;
    }

    public void cancelAllWorkByTag(java.lang.String, androidx.work.multiprocess.IWorkManagerImplCallback) throws android.os.RemoteException
    {
        androidx.work.multiprocess.IWorkManagerImpl$Default r0;
        java.lang.String r1;
        androidx.work.multiprocess.IWorkManagerImplCallback r2;

        r0 := @this: androidx.work.multiprocess.IWorkManagerImpl$Default;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.work.multiprocess.IWorkManagerImplCallback;

        return;
    }

    public void cancelUniqueWork(java.lang.String, androidx.work.multiprocess.IWorkManagerImplCallback) throws android.os.RemoteException
    {
        androidx.work.multiprocess.IWorkManagerImpl$Default r0;
        java.lang.String r1;
        androidx.work.multiprocess.IWorkManagerImplCallback r2;

        r0 := @this: androidx.work.multiprocess.IWorkManagerImpl$Default;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.work.multiprocess.IWorkManagerImplCallback;

        return;
    }

    public void cancelAllWork(androidx.work.multiprocess.IWorkManagerImplCallback) throws android.os.RemoteException
    {
        androidx.work.multiprocess.IWorkManagerImpl$Default r0;
        androidx.work.multiprocess.IWorkManagerImplCallback r1;

        r0 := @this: androidx.work.multiprocess.IWorkManagerImpl$Default;

        r1 := @parameter0: androidx.work.multiprocess.IWorkManagerImplCallback;

        return;
    }

    public void queryWorkInfo(byte[], androidx.work.multiprocess.IWorkManagerImplCallback) throws android.os.RemoteException
    {
        androidx.work.multiprocess.IWorkManagerImpl$Default r0;
        byte[] r1;
        androidx.work.multiprocess.IWorkManagerImplCallback r2;

        r0 := @this: androidx.work.multiprocess.IWorkManagerImpl$Default;

        r1 := @parameter0: byte[];

        r2 := @parameter1: androidx.work.multiprocess.IWorkManagerImplCallback;

        return;
    }

    public void setProgress(byte[], androidx.work.multiprocess.IWorkManagerImplCallback) throws android.os.RemoteException
    {
        androidx.work.multiprocess.IWorkManagerImpl$Default r0;
        byte[] r1;
        androidx.work.multiprocess.IWorkManagerImplCallback r2;

        r0 := @this: androidx.work.multiprocess.IWorkManagerImpl$Default;

        r1 := @parameter0: byte[];

        r2 := @parameter1: androidx.work.multiprocess.IWorkManagerImplCallback;

        return;
    }

    public void setForegroundAsync(byte[], androidx.work.multiprocess.IWorkManagerImplCallback) throws android.os.RemoteException
    {
        androidx.work.multiprocess.IWorkManagerImpl$Default r0;
        byte[] r1;
        androidx.work.multiprocess.IWorkManagerImplCallback r2;

        r0 := @this: androidx.work.multiprocess.IWorkManagerImpl$Default;

        r1 := @parameter0: byte[];

        r2 := @parameter1: androidx.work.multiprocess.IWorkManagerImplCallback;

        return;
    }

    public android.os.IBinder asBinder()
    {
        androidx.work.multiprocess.IWorkManagerImpl$Default r0;

        r0 := @this: androidx.work.multiprocess.IWorkManagerImpl$Default;

        return null;
    }

androidx.work.multiprocess.IWorkManagerImpl$Stub$Proxy
<androidx.work.multiprocess.IWorkManagerImpl$Stub$Proxy: android.os.IBinder mRemote>
    void <init>(android.os.IBinder)
    {
        androidx.work.multiprocess.IWorkManagerImpl$Stub$Proxy r0;
        android.os.IBinder r1;

        r0 := @this: androidx.work.multiprocess.IWorkManagerImpl$Stub$Proxy;

        r1 := @parameter0: android.os.IBinder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.work.multiprocess.IWorkManagerImpl$Stub$Proxy: android.os.IBinder mRemote> = r1;

        return;
    }

    public android.os.IBinder asBinder()
    {
        androidx.work.multiprocess.IWorkManagerImpl$Stub$Proxy r0;
        android.os.IBinder $r1;

        r0 := @this: androidx.work.multiprocess.IWorkManagerImpl$Stub$Proxy;

        $r1 = r0.<androidx.work.multiprocess.IWorkManagerImpl$Stub$Proxy: android.os.IBinder mRemote>;

        return $r1;
    }

    public java.lang.String getInterfaceDescriptor()
    {
        androidx.work.multiprocess.IWorkManagerImpl$Stub$Proxy r0;

        r0 := @this: androidx.work.multiprocess.IWorkManagerImpl$Stub$Proxy;

        return "androidx.work.multiprocess.IWorkManagerImpl";
    }

    public void enqueueWorkRequests(byte[], androidx.work.multiprocess.IWorkManagerImplCallback) throws android.os.RemoteException
    {
        androidx.work.multiprocess.IWorkManagerImpl$Stub$Proxy r0;
        byte[] r1;
        androidx.work.multiprocess.IWorkManagerImplCallback r2;
        android.os.Parcel r3;
        boolean z0;
        java.lang.Throwable r4, $r6;
        android.os.IBinder $r5;

        r0 := @this: androidx.work.multiprocess.IWorkManagerImpl$Stub$Proxy;

        r1 := @parameter0: byte[];

        r2 := @parameter1: androidx.work.multiprocess.IWorkManagerImplCallback;

        r3 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r3.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("androidx.work.multiprocess.IWorkManagerImpl");

        virtualinvoke r3.<android.os.Parcel: void writeByteArray(byte[])>(r1);

        virtualinvoke r3.<android.os.Parcel: void writeStrongInterface(android.os.IInterface)>(r2);

        $r5 = r0.<androidx.work.multiprocess.IWorkManagerImpl$Stub$Proxy: android.os.IBinder mRemote>;

        z0 = interfaceinvoke $r5.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(1, r3, null, 1);

     label2:
        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        goto label5;

     label3:
        $r6 := @caughtexception;

        r4 = $r6;

     label4:
        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        throw r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void updateUniquePeriodicWorkRequest(java.lang.String, byte[], androidx.work.multiprocess.IWorkManagerImplCallback) throws android.os.RemoteException
    {
        androidx.work.multiprocess.IWorkManagerImpl$Stub$Proxy r0;
        java.lang.String r1;
        byte[] r2;
        androidx.work.multiprocess.IWorkManagerImplCallback r3;
        android.os.Parcel r4;
        boolean z0;
        java.lang.Throwable r5, $r7;
        android.os.IBinder $r6;

        r0 := @this: androidx.work.multiprocess.IWorkManagerImpl$Stub$Proxy;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        r3 := @parameter2: androidx.work.multiprocess.IWorkManagerImplCallback;

        r4 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r4.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("androidx.work.multiprocess.IWorkManagerImpl");

        virtualinvoke r4.<android.os.Parcel: void writeString(java.lang.String)>(r1);

        virtualinvoke r4.<android.os.Parcel: void writeByteArray(byte[])>(r2);

        virtualinvoke r4.<android.os.Parcel: void writeStrongInterface(android.os.IInterface)>(r3);

        $r6 = r0.<androidx.work.multiprocess.IWorkManagerImpl$Stub$Proxy: android.os.IBinder mRemote>;

        z0 = interfaceinvoke $r6.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(2, r4, null, 1);

     label2:
        virtualinvoke r4.<android.os.Parcel: void recycle()>();

        goto label5;

     label3:
        $r7 := @caughtexception;

        r5 = $r7;

     label4:
        virtualinvoke r4.<android.os.Parcel: void recycle()>();

        throw r5;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void enqueueContinuation(byte[], androidx.work.multiprocess.IWorkManagerImplCallback) throws android.os.RemoteException
    {
        androidx.work.multiprocess.IWorkManagerImpl$Stub$Proxy r0;
        byte[] r1;
        androidx.work.multiprocess.IWorkManagerImplCallback r2;
        android.os.Parcel r3;
        boolean z0;
        java.lang.Throwable r4, $r6;
        android.os.IBinder $r5;

        r0 := @this: androidx.work.multiprocess.IWorkManagerImpl$Stub$Proxy;

        r1 := @parameter0: byte[];

        r2 := @parameter1: androidx.work.multiprocess.IWorkManagerImplCallback;

        r3 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r3.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("androidx.work.multiprocess.IWorkManagerImpl");

        virtualinvoke r3.<android.os.Parcel: void writeByteArray(byte[])>(r1);

        virtualinvoke r3.<android.os.Parcel: void writeStrongInterface(android.os.IInterface)>(r2);

        $r5 = r0.<androidx.work.multiprocess.IWorkManagerImpl$Stub$Proxy: android.os.IBinder mRemote>;

        z0 = interfaceinvoke $r5.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(3, r3, null, 1);

     label2:
        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        goto label5;

     label3:
        $r6 := @caughtexception;

        r4 = $r6;

     label4:
        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        throw r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void cancelWorkById(java.lang.String, androidx.work.multiprocess.IWorkManagerImplCallback) throws android.os.RemoteException
    {
        androidx.work.multiprocess.IWorkManagerImpl$Stub$Proxy r0;
        java.lang.String r1;
        androidx.work.multiprocess.IWorkManagerImplCallback r2;
        android.os.Parcel r3;
        boolean z0;
        java.lang.Throwable r4, $r6;
        android.os.IBinder $r5;

        r0 := @this: androidx.work.multiprocess.IWorkManagerImpl$Stub$Proxy;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.work.multiprocess.IWorkManagerImplCallback;

        r3 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r3.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("androidx.work.multiprocess.IWorkManagerImpl");

        virtualinvoke r3.<android.os.Parcel: void writeString(java.lang.String)>(r1);

        virtualinvoke r3.<android.os.Parcel: void writeStrongInterface(android.os.IInterface)>(r2);

        $r5 = r0.<androidx.work.multiprocess.IWorkManagerImpl$Stub$Proxy: android.os.IBinder mRemote>;

        z0 = interfaceinvoke $r5.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(4, r3, null, 1);

     label2:
        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        goto label5;

     label3:
        $r6 := @caughtexception;

        r4 = $r6;

     label4:
        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        throw r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void cancelAllWorkByTag(java.lang.String, androidx.work.multiprocess.IWorkManagerImplCallback) throws android.os.RemoteException
    {
        androidx.work.multiprocess.IWorkManagerImpl$Stub$Proxy r0;
        java.lang.String r1;
        androidx.work.multiprocess.IWorkManagerImplCallback r2;
        android.os.Parcel r3;
        boolean z0;
        java.lang.Throwable r4, $r6;
        android.os.IBinder $r5;

        r0 := @this: androidx.work.multiprocess.IWorkManagerImpl$Stub$Proxy;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.work.multiprocess.IWorkManagerImplCallback;

        r3 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r3.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("androidx.work.multiprocess.IWorkManagerImpl");

        virtualinvoke r3.<android.os.Parcel: void writeString(java.lang.String)>(r1);

        virtualinvoke r3.<android.os.Parcel: void writeStrongInterface(android.os.IInterface)>(r2);

        $r5 = r0.<androidx.work.multiprocess.IWorkManagerImpl$Stub$Proxy: android.os.IBinder mRemote>;

        z0 = interfaceinvoke $r5.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(5, r3, null, 1);

     label2:
        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        goto label5;

     label3:
        $r6 := @caughtexception;

        r4 = $r6;

     label4:
        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        throw r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void cancelUniqueWork(java.lang.String, androidx.work.multiprocess.IWorkManagerImplCallback) throws android.os.RemoteException
    {
        androidx.work.multiprocess.IWorkManagerImpl$Stub$Proxy r0;
        java.lang.String r1;
        androidx.work.multiprocess.IWorkManagerImplCallback r2;
        android.os.Parcel r3;
        boolean z0;
        java.lang.Throwable r4, $r6;
        android.os.IBinder $r5;

        r0 := @this: androidx.work.multiprocess.IWorkManagerImpl$Stub$Proxy;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.work.multiprocess.IWorkManagerImplCallback;

        r3 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r3.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("androidx.work.multiprocess.IWorkManagerImpl");

        virtualinvoke r3.<android.os.Parcel: void writeString(java.lang.String)>(r1);

        virtualinvoke r3.<android.os.Parcel: void writeStrongInterface(android.os.IInterface)>(r2);

        $r5 = r0.<androidx.work.multiprocess.IWorkManagerImpl$Stub$Proxy: android.os.IBinder mRemote>;

        z0 = interfaceinvoke $r5.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(6, r3, null, 1);

     label2:
        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        goto label5;

     label3:
        $r6 := @caughtexception;

        r4 = $r6;

     label4:
        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        throw r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void cancelAllWork(androidx.work.multiprocess.IWorkManagerImplCallback) throws android.os.RemoteException
    {
        androidx.work.multiprocess.IWorkManagerImpl$Stub$Proxy r0;
        androidx.work.multiprocess.IWorkManagerImplCallback r1;
        android.os.Parcel r2;
        boolean z0;
        java.lang.Throwable r3, $r5;
        android.os.IBinder $r4;

        r0 := @this: androidx.work.multiprocess.IWorkManagerImpl$Stub$Proxy;

        r1 := @parameter0: androidx.work.multiprocess.IWorkManagerImplCallback;

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r2.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("androidx.work.multiprocess.IWorkManagerImpl");

        virtualinvoke r2.<android.os.Parcel: void writeStrongInterface(android.os.IInterface)>(r1);

        $r4 = r0.<androidx.work.multiprocess.IWorkManagerImpl$Stub$Proxy: android.os.IBinder mRemote>;

        z0 = interfaceinvoke $r4.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(7, r2, null, 1);

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        goto label5;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void queryWorkInfo(byte[], androidx.work.multiprocess.IWorkManagerImplCallback) throws android.os.RemoteException
    {
        androidx.work.multiprocess.IWorkManagerImpl$Stub$Proxy r0;
        byte[] r1;
        androidx.work.multiprocess.IWorkManagerImplCallback r2;
        android.os.Parcel r3;
        boolean z0;
        java.lang.Throwable r4, $r6;
        android.os.IBinder $r5;

        r0 := @this: androidx.work.multiprocess.IWorkManagerImpl$Stub$Proxy;

        r1 := @parameter0: byte[];

        r2 := @parameter1: androidx.work.multiprocess.IWorkManagerImplCallback;

        r3 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r3.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("androidx.work.multiprocess.IWorkManagerImpl");

        virtualinvoke r3.<android.os.Parcel: void writeByteArray(byte[])>(r1);

        virtualinvoke r3.<android.os.Parcel: void writeStrongInterface(android.os.IInterface)>(r2);

        $r5 = r0.<androidx.work.multiprocess.IWorkManagerImpl$Stub$Proxy: android.os.IBinder mRemote>;

        z0 = interfaceinvoke $r5.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(8, r3, null, 1);

     label2:
        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        goto label5;

     label3:
        $r6 := @caughtexception;

        r4 = $r6;

     label4:
        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        throw r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setProgress(byte[], androidx.work.multiprocess.IWorkManagerImplCallback) throws android.os.RemoteException
    {
        androidx.work.multiprocess.IWorkManagerImpl$Stub$Proxy r0;
        byte[] r1;
        androidx.work.multiprocess.IWorkManagerImplCallback r2;
        android.os.Parcel r3;
        boolean z0;
        java.lang.Throwable r4, $r6;
        android.os.IBinder $r5;

        r0 := @this: androidx.work.multiprocess.IWorkManagerImpl$Stub$Proxy;

        r1 := @parameter0: byte[];

        r2 := @parameter1: androidx.work.multiprocess.IWorkManagerImplCallback;

        r3 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r3.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("androidx.work.multiprocess.IWorkManagerImpl");

        virtualinvoke r3.<android.os.Parcel: void writeByteArray(byte[])>(r1);

        virtualinvoke r3.<android.os.Parcel: void writeStrongInterface(android.os.IInterface)>(r2);

        $r5 = r0.<androidx.work.multiprocess.IWorkManagerImpl$Stub$Proxy: android.os.IBinder mRemote>;

        z0 = interfaceinvoke $r5.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(9, r3, null, 1);

     label2:
        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        goto label5;

     label3:
        $r6 := @caughtexception;

        r4 = $r6;

     label4:
        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        throw r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setForegroundAsync(byte[], androidx.work.multiprocess.IWorkManagerImplCallback) throws android.os.RemoteException
    {
        androidx.work.multiprocess.IWorkManagerImpl$Stub$Proxy r0;
        byte[] r1;
        androidx.work.multiprocess.IWorkManagerImplCallback r2;
        android.os.Parcel r3;
        boolean z0;
        java.lang.Throwable r4, $r6;
        android.os.IBinder $r5;

        r0 := @this: androidx.work.multiprocess.IWorkManagerImpl$Stub$Proxy;

        r1 := @parameter0: byte[];

        r2 := @parameter1: androidx.work.multiprocess.IWorkManagerImplCallback;

        r3 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r3.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("androidx.work.multiprocess.IWorkManagerImpl");

        virtualinvoke r3.<android.os.Parcel: void writeByteArray(byte[])>(r1);

        virtualinvoke r3.<android.os.Parcel: void writeStrongInterface(android.os.IInterface)>(r2);

        $r5 = r0.<androidx.work.multiprocess.IWorkManagerImpl$Stub$Proxy: android.os.IBinder mRemote>;

        z0 = interfaceinvoke $r5.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(10, r3, null, 1);

     label2:
        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        goto label5;

     label3:
        $r6 := @caughtexception;

        r4 = $r6;

     label4:
        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        throw r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

androidx.work.multiprocess.IWorkManagerImpl$Stub
<androidx.work.multiprocess.IWorkManagerImpl$Stub: int TRANSACTION_enqueueWorkRequests>
<androidx.work.multiprocess.IWorkManagerImpl$Stub: int TRANSACTION_updateUniquePeriodicWorkRequest>
<androidx.work.multiprocess.IWorkManagerImpl$Stub: int TRANSACTION_enqueueContinuation>
<androidx.work.multiprocess.IWorkManagerImpl$Stub: int TRANSACTION_cancelWorkById>
<androidx.work.multiprocess.IWorkManagerImpl$Stub: int TRANSACTION_cancelAllWorkByTag>
<androidx.work.multiprocess.IWorkManagerImpl$Stub: int TRANSACTION_cancelUniqueWork>
<androidx.work.multiprocess.IWorkManagerImpl$Stub: int TRANSACTION_cancelAllWork>
<androidx.work.multiprocess.IWorkManagerImpl$Stub: int TRANSACTION_queryWorkInfo>
<androidx.work.multiprocess.IWorkManagerImpl$Stub: int TRANSACTION_setProgress>
<androidx.work.multiprocess.IWorkManagerImpl$Stub: int TRANSACTION_setForegroundAsync>
    public void <init>()
    {
        androidx.work.multiprocess.IWorkManagerImpl$Stub r0;

        r0 := @this: androidx.work.multiprocess.IWorkManagerImpl$Stub;

        specialinvoke r0.<android.os.Binder: void <init>()>();

        virtualinvoke r0.<androidx.work.multiprocess.IWorkManagerImpl$Stub: void attachInterface(android.os.IInterface,java.lang.String)>(r0, "androidx.work.multiprocess.IWorkManagerImpl");

        return;
    }

    public static androidx.work.multiprocess.IWorkManagerImpl asInterface(android.os.IBinder)
    {
        android.os.IBinder r0;
        android.os.IInterface r1;
        androidx.work.multiprocess.IWorkManagerImpl$Stub$Proxy $r2;
        boolean $z0;
        androidx.work.multiprocess.IWorkManagerImpl $r3;

        r0 := @parameter0: android.os.IBinder;

        if r0 != null goto label1;

        return null;

     label1:
        r1 = interfaceinvoke r0.<android.os.IBinder: android.os.IInterface queryLocalInterface(java.lang.String)>("androidx.work.multiprocess.IWorkManagerImpl");

        if r1 == null goto label2;

        $z0 = r1 instanceof androidx.work.multiprocess.IWorkManagerImpl;

        if $z0 == 0 goto label2;

        $r3 = (androidx.work.multiprocess.IWorkManagerImpl) r1;

        return $r3;

     label2:
        $r2 = new androidx.work.multiprocess.IWorkManagerImpl$Stub$Proxy;

        specialinvoke $r2.<androidx.work.multiprocess.IWorkManagerImpl$Stub$Proxy: void <init>(android.os.IBinder)>(r0);

        return $r2;
    }

    public android.os.IBinder asBinder()
    {
        androidx.work.multiprocess.IWorkManagerImpl$Stub r0;
        android.os.IBinder r1;

        r0 := @this: androidx.work.multiprocess.IWorkManagerImpl$Stub;

        r1 = (android.os.IBinder) r0;

        return r1;
    }

    public boolean onTransact(int, android.os.Parcel, android.os.Parcel, int) throws android.os.RemoteException
    {
        androidx.work.multiprocess.IWorkManagerImpl$Stub r0;
        int i0, i1;
        android.os.Parcel r1, r2;
        java.lang.String r3, r17, r21, r23, r25;
        androidx.work.multiprocess.IWorkManagerImplCallback r4, r16, r20, r22, r24, r26, r27, r29, r31, r33;
        android.os.IBinder $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        boolean $z0;
        byte[] r15, r18, r19, r28, r30, r32;

        r0 := @this: androidx.work.multiprocess.IWorkManagerImpl$Stub;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Parcel;

        r2 := @parameter2: android.os.Parcel;

        i1 := @parameter3: int;

        r3 = "androidx.work.multiprocess.IWorkManagerImpl";

        if i0 < 1 goto label01;

        if i0 > 16777215 goto label01;

        virtualinvoke r1.<android.os.Parcel: void enforceInterface(java.lang.String)>(r3);

     label01:
        lookupswitch(i0)
        {
            case 1598968902: goto label02;
            default: goto label03;
        };

     label02:
        virtualinvoke r2.<android.os.Parcel: void writeString(java.lang.String)>(r3);

        return 1;

     label03:
        tableswitch(i0)
        {
            case 1: goto label04;
            case 2: goto label05;
            case 3: goto label06;
            case 4: goto label07;
            case 5: goto label08;
            case 6: goto label09;
            case 7: goto label10;
            case 8: goto label11;
            case 9: goto label12;
            case 10: goto label13;
            default: goto label14;
        };

     label04:
        r15 = virtualinvoke r1.<android.os.Parcel: byte[] createByteArray()>();

        $r14 = virtualinvoke r1.<android.os.Parcel: android.os.IBinder readStrongBinder()>();

        r16 = staticinvoke <androidx.work.multiprocess.IWorkManagerImplCallback$Stub: androidx.work.multiprocess.IWorkManagerImplCallback asInterface(android.os.IBinder)>($r14);

        virtualinvoke r0.<androidx.work.multiprocess.IWorkManagerImpl$Stub: void enqueueWorkRequests(byte[],androidx.work.multiprocess.IWorkManagerImplCallback)>(r15, r16);

        goto label15;

     label05:
        r17 = virtualinvoke r1.<android.os.Parcel: java.lang.String readString()>();

        r18 = virtualinvoke r1.<android.os.Parcel: byte[] createByteArray()>();

        $r13 = virtualinvoke r1.<android.os.Parcel: android.os.IBinder readStrongBinder()>();

        r4 = staticinvoke <androidx.work.multiprocess.IWorkManagerImplCallback$Stub: androidx.work.multiprocess.IWorkManagerImplCallback asInterface(android.os.IBinder)>($r13);

        virtualinvoke r0.<androidx.work.multiprocess.IWorkManagerImpl$Stub: void updateUniquePeriodicWorkRequest(java.lang.String,byte[],androidx.work.multiprocess.IWorkManagerImplCallback)>(r17, r18, r4);

        goto label15;

     label06:
        r19 = virtualinvoke r1.<android.os.Parcel: byte[] createByteArray()>();

        $r12 = virtualinvoke r1.<android.os.Parcel: android.os.IBinder readStrongBinder()>();

        r20 = staticinvoke <androidx.work.multiprocess.IWorkManagerImplCallback$Stub: androidx.work.multiprocess.IWorkManagerImplCallback asInterface(android.os.IBinder)>($r12);

        virtualinvoke r0.<androidx.work.multiprocess.IWorkManagerImpl$Stub: void enqueueContinuation(byte[],androidx.work.multiprocess.IWorkManagerImplCallback)>(r19, r20);

        goto label15;

     label07:
        r21 = virtualinvoke r1.<android.os.Parcel: java.lang.String readString()>();

        $r11 = virtualinvoke r1.<android.os.Parcel: android.os.IBinder readStrongBinder()>();

        r22 = staticinvoke <androidx.work.multiprocess.IWorkManagerImplCallback$Stub: androidx.work.multiprocess.IWorkManagerImplCallback asInterface(android.os.IBinder)>($r11);

        virtualinvoke r0.<androidx.work.multiprocess.IWorkManagerImpl$Stub: void cancelWorkById(java.lang.String,androidx.work.multiprocess.IWorkManagerImplCallback)>(r21, r22);

        goto label15;

     label08:
        r23 = virtualinvoke r1.<android.os.Parcel: java.lang.String readString()>();

        $r10 = virtualinvoke r1.<android.os.Parcel: android.os.IBinder readStrongBinder()>();

        r24 = staticinvoke <androidx.work.multiprocess.IWorkManagerImplCallback$Stub: androidx.work.multiprocess.IWorkManagerImplCallback asInterface(android.os.IBinder)>($r10);

        virtualinvoke r0.<androidx.work.multiprocess.IWorkManagerImpl$Stub: void cancelAllWorkByTag(java.lang.String,androidx.work.multiprocess.IWorkManagerImplCallback)>(r23, r24);

        goto label15;

     label09:
        r25 = virtualinvoke r1.<android.os.Parcel: java.lang.String readString()>();

        $r9 = virtualinvoke r1.<android.os.Parcel: android.os.IBinder readStrongBinder()>();

        r26 = staticinvoke <androidx.work.multiprocess.IWorkManagerImplCallback$Stub: androidx.work.multiprocess.IWorkManagerImplCallback asInterface(android.os.IBinder)>($r9);

        virtualinvoke r0.<androidx.work.multiprocess.IWorkManagerImpl$Stub: void cancelUniqueWork(java.lang.String,androidx.work.multiprocess.IWorkManagerImplCallback)>(r25, r26);

        goto label15;

     label10:
        $r8 = virtualinvoke r1.<android.os.Parcel: android.os.IBinder readStrongBinder()>();

        r27 = staticinvoke <androidx.work.multiprocess.IWorkManagerImplCallback$Stub: androidx.work.multiprocess.IWorkManagerImplCallback asInterface(android.os.IBinder)>($r8);

        virtualinvoke r0.<androidx.work.multiprocess.IWorkManagerImpl$Stub: void cancelAllWork(androidx.work.multiprocess.IWorkManagerImplCallback)>(r27);

        goto label15;

     label11:
        r28 = virtualinvoke r1.<android.os.Parcel: byte[] createByteArray()>();

        $r7 = virtualinvoke r1.<android.os.Parcel: android.os.IBinder readStrongBinder()>();

        r29 = staticinvoke <androidx.work.multiprocess.IWorkManagerImplCallback$Stub: androidx.work.multiprocess.IWorkManagerImplCallback asInterface(android.os.IBinder)>($r7);

        virtualinvoke r0.<androidx.work.multiprocess.IWorkManagerImpl$Stub: void queryWorkInfo(byte[],androidx.work.multiprocess.IWorkManagerImplCallback)>(r28, r29);

        goto label15;

     label12:
        r30 = virtualinvoke r1.<android.os.Parcel: byte[] createByteArray()>();

        $r6 = virtualinvoke r1.<android.os.Parcel: android.os.IBinder readStrongBinder()>();

        r31 = staticinvoke <androidx.work.multiprocess.IWorkManagerImplCallback$Stub: androidx.work.multiprocess.IWorkManagerImplCallback asInterface(android.os.IBinder)>($r6);

        virtualinvoke r0.<androidx.work.multiprocess.IWorkManagerImpl$Stub: void setProgress(byte[],androidx.work.multiprocess.IWorkManagerImplCallback)>(r30, r31);

        goto label15;

     label13:
        r32 = virtualinvoke r1.<android.os.Parcel: byte[] createByteArray()>();

        $r5 = virtualinvoke r1.<android.os.Parcel: android.os.IBinder readStrongBinder()>();

        r33 = staticinvoke <androidx.work.multiprocess.IWorkManagerImplCallback$Stub: androidx.work.multiprocess.IWorkManagerImplCallback asInterface(android.os.IBinder)>($r5);

        virtualinvoke r0.<androidx.work.multiprocess.IWorkManagerImpl$Stub: void setForegroundAsync(byte[],androidx.work.multiprocess.IWorkManagerImplCallback)>(r32, r33);

        goto label15;

     label14:
        $z0 = specialinvoke r0.<android.os.Binder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>(i0, r1, r2, i1);

        return $z0;

     label15:
        return 1;
    }

