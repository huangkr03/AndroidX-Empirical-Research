androidx.car.app.CarAppService
<androidx.car.app.CarAppService: java.lang.String SERVICE_INTERFACE>
<androidx.car.app.CarAppService: java.lang.String CATEGORY_NAVIGATION_APP>
<androidx.car.app.CarAppService: java.lang.String CATEGORY_PARKING_APP>
<androidx.car.app.CarAppService: java.lang.String CATEGORY_CHARGING_APP>
<androidx.car.app.CarAppService: java.lang.String CATEGORY_SETTINGS_APP>
<androidx.car.app.CarAppService: java.lang.String AUTO_DRIVE>
<androidx.car.app.CarAppService: androidx.car.app.AppInfo mAppInfo>
<androidx.car.app.CarAppService: androidx.car.app.Session mCurrentSession>
<androidx.car.app.CarAppService: androidx.car.app.validation.HostValidator mHostValidator>
<androidx.car.app.CarAppService: androidx.car.app.HostInfo mHostInfo>
<androidx.car.app.CarAppService: androidx.car.app.HandshakeInfo mHandshakeInfo>
<androidx.car.app.CarAppService: androidx.car.app.CarAppService$CarAppBinder mBinder>
    public void <init>()
    {
        androidx.car.app.CarAppService r0;

        r0 := @this: androidx.car.app.CarAppService;

        specialinvoke r0.<android.app.Service: void <init>()>();

        return;
    }

    public void onCreate()
    {
        androidx.car.app.CarAppService r0;
        androidx.car.app.CarAppService$CarAppBinder $r1;

        r0 := @this: androidx.car.app.CarAppService;

        $r1 = new androidx.car.app.CarAppService$CarAppBinder;

        specialinvoke $r1.<androidx.car.app.CarAppService$CarAppBinder: void <init>(androidx.car.app.CarAppService)>(r0);

        r0.<androidx.car.app.CarAppService: androidx.car.app.CarAppService$CarAppBinder mBinder> = $r1;

        return;
    }

    public void onDestroy()
    {
        androidx.car.app.CarAppService r0;
        androidx.car.app.CarAppService$CarAppBinder $r1, $r2;

        r0 := @this: androidx.car.app.CarAppService;

        $r1 = r0.<androidx.car.app.CarAppService: androidx.car.app.CarAppService$CarAppBinder mBinder>;

        if $r1 == null goto label1;

        $r2 = r0.<androidx.car.app.CarAppService: androidx.car.app.CarAppService$CarAppBinder mBinder>;

        virtualinvoke $r2.<androidx.car.app.CarAppService$CarAppBinder: void destroy()>();

        r0.<androidx.car.app.CarAppService: androidx.car.app.CarAppService$CarAppBinder mBinder> = null;

     label1:
        return;
    }

    public final android.os.IBinder onBind(android.content.Intent)
    {
        androidx.car.app.CarAppService r0;
        android.content.Intent r1;
        androidx.car.app.CarAppService$CarAppBinder $r2;
        java.lang.Object $r3;
        android.os.IBinder $r4;

        r0 := @this: androidx.car.app.CarAppService;

        r1 := @parameter0: android.content.Intent;

        $r2 = r0.<androidx.car.app.CarAppService: androidx.car.app.CarAppService$CarAppBinder mBinder>;

        $r3 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2);

        $r4 = (android.os.IBinder) $r3;

        return $r4;
    }

    public final boolean onUnbind(android.content.Intent)
    {
        androidx.car.app.CarAppService r0;
        android.content.Intent r1;
        boolean $z0, $z1;
        java.lang.Runnable $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: androidx.car.app.CarAppService;

        r1 := @parameter0: android.content.Intent;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("CarApp", 3);

        if $z0 == 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("onUnbind intent: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CarApp", $r6);

     label1:
        $r2 = dynamicinvoke "run" <java.lang.Runnable (androidx.car.app.CarAppService)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.car.app.CarAppService: void lambda$onUnbind$0()>, methodtype: void __METHODTYPE__());

        staticinvoke <androidx.car.app.utils.ThreadUtils: void runOnMain(java.lang.Runnable)>($r2);

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("CarApp", 3);

        if $z1 == 0 goto label2;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CarApp", "onUnbind completed");

     label2:
        return 1;
    }

<androidx.car.app.CarAppService: androidx.car.app.validation.HostValidator createHostValidator()>
<androidx.car.app.CarAppService: androidx.car.app.Session onCreateSession()>
    public final void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        androidx.car.app.CarAppService r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3, r4;
        int i0, i2;
        java.lang.String r5, $r6;
        boolean $z0, $z1;
        java.lang.Runnable $r7;

        r0 := @this: androidx.car.app.CarAppService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        specialinvoke r0.<android.app.Service: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r1, r2, r3);

        r4 = r3;

        i0 = lengthof r4;

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        r5 = r4[i2];

        $r6 = "AUTO_DRIVE";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z0 == 0 goto label3;

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("CarApp", 3);

        if $z1 == 0 goto label2;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CarApp", "Executing onAutoDriveEnabled");

     label2:
        $r7 = dynamicinvoke "run" <java.lang.Runnable (androidx.car.app.CarAppService)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.car.app.CarAppService: void lambda$dump$1()>, methodtype: void __METHODTYPE__());

        staticinvoke <androidx.car.app.utils.ThreadUtils: void runOnMain(java.lang.Runnable)>($r7);

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return;
    }

    public final androidx.car.app.HostInfo getHostInfo()
    {
        androidx.car.app.CarAppService r0;
        androidx.car.app.HostInfo $r1;

        r0 := @this: androidx.car.app.CarAppService;

        $r1 = r0.<androidx.car.app.CarAppService: androidx.car.app.HostInfo mHostInfo>;

        return $r1;
    }

    void setHostInfo(androidx.car.app.HostInfo)
    {
        androidx.car.app.CarAppService r0;
        androidx.car.app.HostInfo r1;

        r0 := @this: androidx.car.app.CarAppService;

        r1 := @parameter0: androidx.car.app.HostInfo;

        r0.<androidx.car.app.CarAppService: androidx.car.app.HostInfo mHostInfo> = r1;

        return;
    }

    public final androidx.car.app.Session getCurrentSession()
    {
        androidx.car.app.CarAppService r0;
        androidx.car.app.Session $r1;

        r0 := @this: androidx.car.app.CarAppService;

        $r1 = r0.<androidx.car.app.CarAppService: androidx.car.app.Session mCurrentSession>;

        return $r1;
    }

    void setCurrentSession(androidx.car.app.Session)
    {
        androidx.car.app.CarAppService r0;
        androidx.car.app.Session r1;

        r0 := @this: androidx.car.app.CarAppService;

        r1 := @parameter0: androidx.car.app.Session;

        r0.<androidx.car.app.CarAppService: androidx.car.app.Session mCurrentSession> = r1;

        return;
    }

    androidx.car.app.AppInfo getAppInfo()
    {
        androidx.car.app.CarAppService r0;
        androidx.car.app.AppInfo $r1, $r2, $r3;
        android.content.Context r4;

        r0 := @this: androidx.car.app.CarAppService;

        $r1 = r0.<androidx.car.app.CarAppService: androidx.car.app.AppInfo mAppInfo>;

        if $r1 != null goto label1;

        r4 = (android.content.Context) r0;

        $r3 = staticinvoke <androidx.car.app.AppInfo: androidx.car.app.AppInfo create(android.content.Context)>(r4);

        r0.<androidx.car.app.CarAppService: androidx.car.app.AppInfo mAppInfo> = $r3;

     label1:
        $r2 = r0.<androidx.car.app.CarAppService: androidx.car.app.AppInfo mAppInfo>;

        return $r2;
    }

    void setAppInfo(androidx.car.app.AppInfo)
    {
        androidx.car.app.CarAppService r0;
        androidx.car.app.AppInfo r1;

        r0 := @this: androidx.car.app.CarAppService;

        r1 := @parameter0: androidx.car.app.AppInfo;

        r0.<androidx.car.app.CarAppService: androidx.car.app.AppInfo mAppInfo> = r1;

        return;
    }

    androidx.car.app.validation.HostValidator getHostValidator()
    {
        androidx.car.app.CarAppService r0;
        androidx.car.app.validation.HostValidator $r1, $r2, $r3;

        r0 := @this: androidx.car.app.CarAppService;

        $r1 = r0.<androidx.car.app.CarAppService: androidx.car.app.validation.HostValidator mHostValidator>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<androidx.car.app.CarAppService: androidx.car.app.validation.HostValidator createHostValidator()>();

        r0.<androidx.car.app.CarAppService: androidx.car.app.validation.HostValidator mHostValidator> = $r3;

     label1:
        $r2 = r0.<androidx.car.app.CarAppService: androidx.car.app.validation.HostValidator mHostValidator>;

        return $r2;
    }

    void setHandshakeInfo(androidx.car.app.HandshakeInfo)
    {
        androidx.car.app.CarAppService r0;
        androidx.car.app.HandshakeInfo r1;
        int i0;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: androidx.car.app.CarAppService;

        r1 := @parameter0: androidx.car.app.HandshakeInfo;

        i0 = virtualinvoke r1.<androidx.car.app.HandshakeInfo: int getHostCarAppApiLevel()>();

        $z0 = staticinvoke <androidx.car.app.versioning.CarAppApiLevels: boolean isValid(int)>(i0);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid Car App API level received: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label1:
        r0.<androidx.car.app.CarAppService: androidx.car.app.HandshakeInfo mHandshakeInfo> = r1;

        return;
    }

    androidx.car.app.HandshakeInfo getHandshakeInfo()
    {
        androidx.car.app.CarAppService r0;
        androidx.car.app.HandshakeInfo $r1;

        r0 := @this: androidx.car.app.CarAppService;

        $r1 = r0.<androidx.car.app.CarAppService: androidx.car.app.HandshakeInfo mHandshakeInfo>;

        return $r1;
    }

    androidx.lifecycle.LifecycleRegistry getLifecycleIfValid()
    {
        androidx.car.app.CarAppService r0;
        androidx.car.app.Session r1;
        androidx.lifecycle.Lifecycle $r2;
        androidx.lifecycle.LifecycleRegistry $r3;

        r0 := @this: androidx.car.app.CarAppService;

        r1 = virtualinvoke r0.<androidx.car.app.CarAppService: androidx.car.app.Session getCurrentSession()>();

        if r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = virtualinvoke r1.<androidx.car.app.Session: androidx.lifecycle.Lifecycle getLifecycleInternal()>();

        $r3 = (androidx.lifecycle.LifecycleRegistry) $r2;

     label2:
        return $r3;
    }

    androidx.lifecycle.LifecycleRegistry getLifecycle()
    {
        androidx.car.app.CarAppService r0;
        androidx.lifecycle.LifecycleRegistry $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: androidx.car.app.CarAppService;

        $r1 = virtualinvoke r0.<androidx.car.app.CarAppService: androidx.lifecycle.LifecycleRegistry getLifecycleIfValid()>();

        $r2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r1);

        $r3 = (androidx.lifecycle.LifecycleRegistry) $r2;

        return $r3;
    }

    private void lambda$dump$1()
    {
        androidx.car.app.CarAppService r0;
        androidx.car.app.Session $r1, $r2;
        androidx.car.app.CarContext $r3;
        java.lang.Object $r4;
        androidx.car.app.navigation.NavigationManager $r5;

        r0 := @this: androidx.car.app.CarAppService;

        $r1 = r0.<androidx.car.app.CarAppService: androidx.car.app.Session mCurrentSession>;

        if $r1 == null goto label1;

        $r2 = r0.<androidx.car.app.CarAppService: androidx.car.app.Session mCurrentSession>;

        $r3 = virtualinvoke $r2.<androidx.car.app.Session: androidx.car.app.CarContext getCarContext()>();

        $r4 = virtualinvoke $r3.<androidx.car.app.CarContext: java.lang.Object getCarService(java.lang.Class)>(class "Landroidx/car/app/navigation/NavigationManager;");

        $r5 = (androidx.car.app.navigation.NavigationManager) $r4;

        virtualinvoke $r5.<androidx.car.app.navigation.NavigationManager: void onAutoDriveEnabled()>();

     label1:
        return;
    }

    private void lambda$onUnbind$0()
    {
        androidx.car.app.CarAppService r0;
        androidx.lifecycle.LifecycleRegistry r1;
        androidx.car.app.Session $r2;
        androidx.lifecycle.Lifecycle$Event $r3;

        r0 := @this: androidx.car.app.CarAppService;

        $r2 = r0.<androidx.car.app.CarAppService: androidx.car.app.Session mCurrentSession>;

        if $r2 == null goto label2;

        r1 = virtualinvoke r0.<androidx.car.app.CarAppService: androidx.lifecycle.LifecycleRegistry getLifecycleIfValid()>();

        if r1 != null goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CarApp", "Null Session when unbinding");

        goto label2;

     label1:
        $r3 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_DESTROY>;

        virtualinvoke r1.<androidx.lifecycle.LifecycleRegistry: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>($r3);

     label2:
        r0.<androidx.car.app.CarAppService: androidx.car.app.Session mCurrentSession> = null;

        return;
    }

androidx.car.app.CarAppService$CarAppBinder
<androidx.car.app.CarAppService$CarAppBinder: androidx.car.app.CarAppService mService>
    void <init>(androidx.car.app.CarAppService)
    {
        androidx.car.app.CarAppService$CarAppBinder r0;
        androidx.car.app.CarAppService r1;

        r0 := @this: androidx.car.app.CarAppService$CarAppBinder;

        r1 := @parameter0: androidx.car.app.CarAppService;

        specialinvoke r0.<androidx.car.app.ICarApp$Stub: void <init>()>();

        r0.<androidx.car.app.CarAppService$CarAppBinder: androidx.car.app.CarAppService mService> = r1;

        return;
    }

    void destroy()
    {
        androidx.car.app.CarAppService$CarAppBinder r0;

        r0 := @this: androidx.car.app.CarAppService$CarAppBinder;

        r0.<androidx.car.app.CarAppService$CarAppBinder: androidx.car.app.CarAppService mService> = null;

        return;
    }

    public void onAppCreate(androidx.car.app.ICarHost, android.content.Intent, android.content.res.Configuration, androidx.car.app.IOnDoneCallback)
    {
        androidx.car.app.CarAppService$CarAppBinder r0;
        androidx.car.app.ICarHost r1;
        android.content.Intent r2;
        android.content.res.Configuration r3;
        androidx.car.app.IOnDoneCallback r4;
        boolean $z0, $z1;
        androidx.car.app.utils.RemoteUtils$HostCall $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: androidx.car.app.CarAppService$CarAppBinder;

        r1 := @parameter0: androidx.car.app.ICarHost;

        r2 := @parameter1: android.content.Intent;

        r3 := @parameter2: android.content.res.Configuration;

        r4 := @parameter3: androidx.car.app.IOnDoneCallback;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("CarApp", 3);

        if $z0 == 0 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("onAppCreate intent: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CarApp", $r9);

     label1:
        $r5 = dynamicinvoke "dispatch" <androidx.car.app.utils.RemoteUtils$HostCall (androidx.car.app.CarAppService$CarAppBinder,androidx.car.app.ICarHost,android.content.res.Configuration,android.content.Intent)>(r0, r1, r3, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.car.app.CarAppService$CarAppBinder: java.lang.Object lambda$onAppCreate$0(androidx.car.app.ICarHost,android.content.res.Configuration,android.content.Intent)>, methodtype: java.lang.Object __METHODTYPE__());

        staticinvoke <androidx.car.app.utils.RemoteUtils: void dispatchCallFromHost(androidx.car.app.IOnDoneCallback,java.lang.String,androidx.car.app.utils.RemoteUtils$HostCall)>(r4, "onAppCreate", $r5);

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("CarApp", 3);

        if $z1 == 0 goto label2;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CarApp", "onAppCreate completed");

     label2:
        return;
    }

    public void onAppStart(androidx.car.app.IOnDoneCallback)
    {
        androidx.car.app.CarAppService$CarAppBinder r0;
        androidx.car.app.IOnDoneCallback r1;
        androidx.car.app.CarAppService r2, $r3;
        java.lang.Object $r4;
        androidx.lifecycle.LifecycleRegistry $r5;
        androidx.car.app.utils.RemoteUtils$HostCall $r6;

        r0 := @this: androidx.car.app.CarAppService$CarAppBinder;

        r1 := @parameter0: androidx.car.app.IOnDoneCallback;

        $r3 = r0.<androidx.car.app.CarAppService$CarAppBinder: androidx.car.app.CarAppService mService>;

        $r4 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3);

        r2 = (androidx.car.app.CarAppService) $r4;

        $r5 = virtualinvoke r2.<androidx.car.app.CarAppService: androidx.lifecycle.LifecycleRegistry getLifecycleIfValid()>();

        $r6 = dynamicinvoke "dispatch" <androidx.car.app.utils.RemoteUtils$HostCall (androidx.car.app.CarAppService)>(r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.car.app.CarAppService$CarAppBinder: java.lang.Object lambda$onAppStart$1(androidx.car.app.CarAppService)>, methodtype: java.lang.Object __METHODTYPE__());

        staticinvoke <androidx.car.app.utils.RemoteUtils: void dispatchCallFromHost(androidx.lifecycle.Lifecycle,androidx.car.app.IOnDoneCallback,java.lang.String,androidx.car.app.utils.RemoteUtils$HostCall)>($r5, r1, "onAppStart", $r6);

        return;
    }

    public void onAppResume(androidx.car.app.IOnDoneCallback)
    {
        androidx.car.app.CarAppService$CarAppBinder r0;
        androidx.car.app.IOnDoneCallback r1;
        androidx.car.app.CarAppService r2, $r3;
        java.lang.Object $r4;
        androidx.lifecycle.LifecycleRegistry $r5;
        androidx.car.app.utils.RemoteUtils$HostCall $r6;

        r0 := @this: androidx.car.app.CarAppService$CarAppBinder;

        r1 := @parameter0: androidx.car.app.IOnDoneCallback;

        $r3 = r0.<androidx.car.app.CarAppService$CarAppBinder: androidx.car.app.CarAppService mService>;

        $r4 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3);

        r2 = (androidx.car.app.CarAppService) $r4;

        $r5 = virtualinvoke r2.<androidx.car.app.CarAppService: androidx.lifecycle.LifecycleRegistry getLifecycleIfValid()>();

        $r6 = dynamicinvoke "dispatch" <androidx.car.app.utils.RemoteUtils$HostCall (androidx.car.app.CarAppService)>(r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.car.app.CarAppService$CarAppBinder: java.lang.Object lambda$onAppResume$2(androidx.car.app.CarAppService)>, methodtype: java.lang.Object __METHODTYPE__());

        staticinvoke <androidx.car.app.utils.RemoteUtils: void dispatchCallFromHost(androidx.lifecycle.Lifecycle,androidx.car.app.IOnDoneCallback,java.lang.String,androidx.car.app.utils.RemoteUtils$HostCall)>($r5, r1, "onAppResume", $r6);

        return;
    }

    public void onAppPause(androidx.car.app.IOnDoneCallback)
    {
        androidx.car.app.CarAppService$CarAppBinder r0;
        androidx.car.app.IOnDoneCallback r1;
        androidx.car.app.CarAppService r2, $r3;
        java.lang.Object $r4;
        androidx.lifecycle.LifecycleRegistry $r5;
        androidx.car.app.utils.RemoteUtils$HostCall $r6;

        r0 := @this: androidx.car.app.CarAppService$CarAppBinder;

        r1 := @parameter0: androidx.car.app.IOnDoneCallback;

        $r3 = r0.<androidx.car.app.CarAppService$CarAppBinder: androidx.car.app.CarAppService mService>;

        $r4 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3);

        r2 = (androidx.car.app.CarAppService) $r4;

        $r5 = virtualinvoke r2.<androidx.car.app.CarAppService: androidx.lifecycle.LifecycleRegistry getLifecycleIfValid()>();

        $r6 = dynamicinvoke "dispatch" <androidx.car.app.utils.RemoteUtils$HostCall (androidx.car.app.CarAppService)>(r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.car.app.CarAppService$CarAppBinder: java.lang.Object lambda$onAppPause$3(androidx.car.app.CarAppService)>, methodtype: java.lang.Object __METHODTYPE__());

        staticinvoke <androidx.car.app.utils.RemoteUtils: void dispatchCallFromHost(androidx.lifecycle.Lifecycle,androidx.car.app.IOnDoneCallback,java.lang.String,androidx.car.app.utils.RemoteUtils$HostCall)>($r5, r1, "onAppPause", $r6);

        return;
    }

    public void onAppStop(androidx.car.app.IOnDoneCallback)
    {
        androidx.car.app.CarAppService$CarAppBinder r0;
        androidx.car.app.IOnDoneCallback r1;
        androidx.car.app.CarAppService r2, $r3;
        java.lang.Object $r4;
        androidx.lifecycle.LifecycleRegistry $r5;
        androidx.car.app.utils.RemoteUtils$HostCall $r6;

        r0 := @this: androidx.car.app.CarAppService$CarAppBinder;

        r1 := @parameter0: androidx.car.app.IOnDoneCallback;

        $r3 = r0.<androidx.car.app.CarAppService$CarAppBinder: androidx.car.app.CarAppService mService>;

        $r4 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3);

        r2 = (androidx.car.app.CarAppService) $r4;

        $r5 = virtualinvoke r2.<androidx.car.app.CarAppService: androidx.lifecycle.LifecycleRegistry getLifecycleIfValid()>();

        $r6 = dynamicinvoke "dispatch" <androidx.car.app.utils.RemoteUtils$HostCall (androidx.car.app.CarAppService)>(r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.car.app.CarAppService$CarAppBinder: java.lang.Object lambda$onAppStop$4(androidx.car.app.CarAppService)>, methodtype: java.lang.Object __METHODTYPE__());

        staticinvoke <androidx.car.app.utils.RemoteUtils: void dispatchCallFromHost(androidx.lifecycle.Lifecycle,androidx.car.app.IOnDoneCallback,java.lang.String,androidx.car.app.utils.RemoteUtils$HostCall)>($r5, r1, "onAppStop", $r6);

        return;
    }

    public void onNewIntent(android.content.Intent, androidx.car.app.IOnDoneCallback)
    {
        androidx.car.app.CarAppService$CarAppBinder r0;
        android.content.Intent r1;
        androidx.car.app.IOnDoneCallback r2;
        androidx.car.app.CarAppService r3, $r4;
        java.lang.Object $r5;
        androidx.lifecycle.LifecycleRegistry $r6;
        androidx.car.app.utils.RemoteUtils$HostCall $r7;

        r0 := @this: androidx.car.app.CarAppService$CarAppBinder;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: androidx.car.app.IOnDoneCallback;

        $r4 = r0.<androidx.car.app.CarAppService$CarAppBinder: androidx.car.app.CarAppService mService>;

        $r5 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r4);

        r3 = (androidx.car.app.CarAppService) $r5;

        $r6 = virtualinvoke r3.<androidx.car.app.CarAppService: androidx.lifecycle.LifecycleRegistry getLifecycleIfValid()>();

        $r7 = dynamicinvoke "dispatch" <androidx.car.app.utils.RemoteUtils$HostCall (androidx.car.app.CarAppService$CarAppBinder,androidx.car.app.CarAppService,android.content.Intent)>(r0, r3, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.car.app.CarAppService$CarAppBinder: java.lang.Object lambda$onNewIntent$5(androidx.car.app.CarAppService,android.content.Intent)>, methodtype: java.lang.Object __METHODTYPE__());

        staticinvoke <androidx.car.app.utils.RemoteUtils: void dispatchCallFromHost(androidx.lifecycle.Lifecycle,androidx.car.app.IOnDoneCallback,java.lang.String,androidx.car.app.utils.RemoteUtils$HostCall)>($r6, r2, "onNewIntent", $r7);

        return;
    }

    public void onConfigurationChanged(android.content.res.Configuration, androidx.car.app.IOnDoneCallback)
    {
        androidx.car.app.CarAppService$CarAppBinder r0;
        android.content.res.Configuration r1;
        androidx.car.app.IOnDoneCallback r2;
        androidx.car.app.CarAppService r3, $r4;
        java.lang.Object $r5;
        androidx.lifecycle.LifecycleRegistry $r6;
        androidx.car.app.utils.RemoteUtils$HostCall $r7;

        r0 := @this: androidx.car.app.CarAppService$CarAppBinder;

        r1 := @parameter0: android.content.res.Configuration;

        r2 := @parameter1: androidx.car.app.IOnDoneCallback;

        $r4 = r0.<androidx.car.app.CarAppService$CarAppBinder: androidx.car.app.CarAppService mService>;

        $r5 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r4);

        r3 = (androidx.car.app.CarAppService) $r5;

        $r6 = virtualinvoke r3.<androidx.car.app.CarAppService: androidx.lifecycle.LifecycleRegistry getLifecycleIfValid()>();

        $r7 = dynamicinvoke "dispatch" <androidx.car.app.utils.RemoteUtils$HostCall (androidx.car.app.CarAppService$CarAppBinder,androidx.car.app.CarAppService,android.content.res.Configuration)>(r0, r3, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.car.app.CarAppService$CarAppBinder: java.lang.Object lambda$onConfigurationChanged$6(androidx.car.app.CarAppService,android.content.res.Configuration)>, methodtype: java.lang.Object __METHODTYPE__());

        staticinvoke <androidx.car.app.utils.RemoteUtils: void dispatchCallFromHost(androidx.lifecycle.Lifecycle,androidx.car.app.IOnDoneCallback,java.lang.String,androidx.car.app.utils.RemoteUtils$HostCall)>($r6, r2, "onConfigurationChanged", $r7);

        return;
    }

    public void getManager(java.lang.String, androidx.car.app.IOnDoneCallback)
    {
        androidx.car.app.CarAppService$CarAppBinder r0;
        java.lang.String r1;
        androidx.car.app.IOnDoneCallback r2;
        java.lang.Runnable $r3;

        r0 := @this: androidx.car.app.CarAppService$CarAppBinder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.car.app.IOnDoneCallback;

        $r3 = dynamicinvoke "run" <java.lang.Runnable (androidx.car.app.CarAppService$CarAppBinder,java.lang.String,androidx.car.app.IOnDoneCallback)>(r0, r1, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.car.app.CarAppService$CarAppBinder: void lambda$getManager$7(java.lang.String,androidx.car.app.IOnDoneCallback)>, methodtype: void __METHODTYPE__());

        staticinvoke <androidx.car.app.utils.ThreadUtils: void runOnMain(java.lang.Runnable)>($r3);

        return;
    }

    public void getAppInfo(androidx.car.app.IOnDoneCallback)
    {
        androidx.car.app.CarAppService$CarAppBinder r0;
        androidx.car.app.IOnDoneCallback r1;
        androidx.car.app.CarAppService $r2, r6;
        java.lang.Object $r3;
        androidx.car.app.AppInfo $r4;
        java.lang.Throwable $r5, r7;

        r0 := @this: androidx.car.app.CarAppService$CarAppBinder;

        r1 := @parameter0: androidx.car.app.IOnDoneCallback;

     label1:
        $r2 = r0.<androidx.car.app.CarAppService$CarAppBinder: androidx.car.app.CarAppService mService>;

        $r3 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2);

        r6 = (androidx.car.app.CarAppService) $r3;

        $r4 = virtualinvoke r6.<androidx.car.app.CarAppService: androidx.car.app.AppInfo getAppInfo()>();

        staticinvoke <androidx.car.app.utils.RemoteUtils: void sendSuccessResponseToHost(androidx.car.app.IOnDoneCallback,java.lang.String,java.lang.Object)>(r1, "getAppInfo", $r4);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r7 = $r5;

        staticinvoke <androidx.car.app.utils.RemoteUtils: void sendFailureResponseToHost(androidx.car.app.IOnDoneCallback,java.lang.String,java.lang.Throwable)>(r1, "getAppInfo", r7);

     label4:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public void onHandshakeCompleted(androidx.car.app.serialization.Bundleable, androidx.car.app.IOnDoneCallback)
    {
        androidx.car.app.CarAppService$CarAppBinder r0;
        androidx.car.app.serialization.Bundleable r1;
        androidx.car.app.IOnDoneCallback r2;
        androidx.car.app.CarAppService r3, $r6;
        java.lang.String r4, $r19, $r26;
        int i0, i1, i2;
        androidx.car.app.HostInfo r5, $r9;
        java.lang.Object $r7, $r8;
        androidx.car.app.validation.HostValidator $r10;
        boolean $z0;
        androidx.car.app.AppInfo $r11;
        java.lang.IllegalArgumentException $r12, $r20;
        java.lang.StringBuilder $r13, $r14, $r15, $r16, $r17, $r18, $r21, $r22, $r23, $r24, $r25;
        java.lang.Throwable $r27, r29;
        androidx.car.app.HandshakeInfo r28;

        r0 := @this: androidx.car.app.CarAppService$CarAppBinder;

        r1 := @parameter0: androidx.car.app.serialization.Bundleable;

        r2 := @parameter1: androidx.car.app.IOnDoneCallback;

        $r6 = r0.<androidx.car.app.CarAppService$CarAppBinder: androidx.car.app.CarAppService mService>;

        $r7 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r6);

        r3 = (androidx.car.app.CarAppService) $r7;

     label1:
        $r8 = virtualinvoke r1.<androidx.car.app.serialization.Bundleable: java.lang.Object get()>();

        r28 = (androidx.car.app.HandshakeInfo) $r8;

        r4 = virtualinvoke r28.<androidx.car.app.HandshakeInfo: java.lang.String getHostPackageName()>();

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r9 = new androidx.car.app.HostInfo;

        specialinvoke $r9.<androidx.car.app.HostInfo: void <init>(java.lang.String,int)>(r4, i0);

        r5 = $r9;

        $r10 = virtualinvoke r3.<androidx.car.app.CarAppService: androidx.car.app.validation.HostValidator getHostValidator()>();

        $z0 = virtualinvoke $r10.<androidx.car.app.validation.HostValidator: boolean isValidHost(androidx.car.app.HostInfo)>(r5);

        if $z0 != 0 goto label3;

        $r20 = new java.lang.IllegalArgumentException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown host \'");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\', uid:");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r26);

        staticinvoke <androidx.car.app.utils.RemoteUtils: void sendFailureResponseToHost(androidx.car.app.IOnDoneCallback,java.lang.String,java.lang.Throwable)>(r2, "onHandshakeCompleted", $r20);

     label2:
        return;

     label3:
        $r11 = virtualinvoke r3.<androidx.car.app.CarAppService: androidx.car.app.AppInfo getAppInfo()>();

        i1 = virtualinvoke $r11.<androidx.car.app.AppInfo: int getMinCarAppApiLevel()>();

        i2 = virtualinvoke r28.<androidx.car.app.HandshakeInfo: int getHostCarAppApiLevel()>();

        if i1 <= i2 goto label5;

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Host API level (");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is less than the app\'s min API level (");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        staticinvoke <androidx.car.app.utils.RemoteUtils: void sendFailureResponseToHost(androidx.car.app.IOnDoneCallback,java.lang.String,java.lang.Throwable)>(r2, "onHandshakeCompleted", $r12);

     label4:
        return;

     label5:
        virtualinvoke r3.<androidx.car.app.CarAppService: void setHostInfo(androidx.car.app.HostInfo)>(r5);

        virtualinvoke r3.<androidx.car.app.CarAppService: void setHandshakeInfo(androidx.car.app.HandshakeInfo)>(r28);

        staticinvoke <androidx.car.app.utils.RemoteUtils: void sendSuccessResponseToHost(androidx.car.app.IOnDoneCallback,java.lang.String,java.lang.Object)>(r2, "onHandshakeCompleted", null);

     label6:
        goto label8;

     label7:
        $r27 := @caughtexception;

        r29 = $r27;

        virtualinvoke r3.<androidx.car.app.CarAppService: void setHostInfo(androidx.car.app.HostInfo)>(null);

        staticinvoke <androidx.car.app.utils.RemoteUtils: void sendFailureResponseToHost(androidx.car.app.IOnDoneCallback,java.lang.String,java.lang.Throwable)>(r2, "onHandshakeCompleted", r29);

     label8:
        return;

        catch androidx.car.app.serialization.BundlerException from label1 to label2 with label7;
        catch java.lang.IllegalArgumentException from label1 to label2 with label7;
        catch androidx.car.app.serialization.BundlerException from label3 to label4 with label7;
        catch java.lang.IllegalArgumentException from label3 to label4 with label7;
        catch androidx.car.app.serialization.BundlerException from label5 to label6 with label7;
        catch java.lang.IllegalArgumentException from label5 to label6 with label7;
    }

    private void onNewIntentInternal(androidx.car.app.Session, android.content.Intent)
    {
        androidx.car.app.CarAppService$CarAppBinder r0;
        androidx.car.app.Session r1;
        android.content.Intent r2;

        r0 := @this: androidx.car.app.CarAppService$CarAppBinder;

        r1 := @parameter0: androidx.car.app.Session;

        r2 := @parameter1: android.content.Intent;

        staticinvoke <androidx.car.app.utils.ThreadUtils: void checkMainThread()>();

        virtualinvoke r1.<androidx.car.app.Session: void onNewIntent(android.content.Intent)>(r2);

        return;
    }

    private void onConfigurationChangedInternal(androidx.car.app.Session, android.content.res.Configuration)
    {
        androidx.car.app.CarAppService$CarAppBinder r0;
        androidx.car.app.Session r1;
        android.content.res.Configuration r2;
        boolean $z0;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: androidx.car.app.CarAppService$CarAppBinder;

        r1 := @parameter0: androidx.car.app.Session;

        r2 := @parameter1: android.content.res.Configuration;

        staticinvoke <androidx.car.app.utils.ThreadUtils: void checkMainThread()>();

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("CarApp", 3);

        if $z0 == 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("onCarConfigurationChanged configuration: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CarApp", $r6);

     label1:
        virtualinvoke r1.<androidx.car.app.Session: void onCarConfigurationChangedInternal(android.content.res.Configuration)>(r2);

        return;
    }

    private void lambda$getManager$7(java.lang.String, androidx.car.app.IOnDoneCallback)
    {
        androidx.car.app.CarAppService$CarAppBinder r0;
        java.lang.String r1, r5, $r21, $r26;
        androidx.car.app.IOnDoneCallback r2;
        androidx.car.app.CarAppService r3, $r6;
        androidx.car.app.Session r4, $r8;
        java.lang.Object $r7, $r9, $r11, $r15;
        int $i0;
        boolean $z0, $z1;
        androidx.car.app.CarContext $r10, $r14;
        androidx.car.app.navigation.NavigationManager $r12;
        androidx.car.app.navigation.INavigationManager$Stub $r13;
        androidx.car.app.AppManager $r16;
        androidx.car.app.IAppManager$Stub $r17;
        java.lang.StringBuilder $r18, $r19, $r20, $r23, $r24, $r25;
        java.security.InvalidParameterException $r22;
        byte b2;

        r0 := @this: androidx.car.app.CarAppService$CarAppBinder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.car.app.IOnDoneCallback;

        $r6 = r0.<androidx.car.app.CarAppService$CarAppBinder: androidx.car.app.CarAppService mService>;

        $r7 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r6);

        r3 = (androidx.car.app.CarAppService) $r7;

        $r8 = virtualinvoke r3.<androidx.car.app.CarAppService: androidx.car.app.Session getCurrentSession()>();

        $r9 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r8);

        r4 = (androidx.car.app.Session) $r9;

        r5 = r1;

        b2 = -1;

        $i0 = virtualinvoke r5.<java.lang.String: int hashCode()>();

        lookupswitch($i0)
        {
            case 96801: goto label1;
            case 1862666772: goto label2;
            default: goto label3;
        };

     label1:
        $z1 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("app");

        if $z1 == 0 goto label3;

        b2 = 0;

        goto label3;

     label2:
        $z0 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("navigation");

        if $z0 == 0 goto label3;

        b2 = 1;

     label3:
        lookupswitch(b2)
        {
            case 0: goto label4;
            case 1: goto label5;
            default: goto label6;
        };

     label4:
        $r14 = virtualinvoke r4.<androidx.car.app.Session: androidx.car.app.CarContext getCarContext()>();

        $r15 = virtualinvoke $r14.<androidx.car.app.CarContext: java.lang.Object getCarService(java.lang.Class)>(class "Landroidx/car/app/AppManager;");

        $r16 = (androidx.car.app.AppManager) $r15;

        $r17 = virtualinvoke $r16.<androidx.car.app.AppManager: androidx.car.app.IAppManager$Stub getIInterface()>();

        staticinvoke <androidx.car.app.utils.RemoteUtils: void sendSuccessResponseToHost(androidx.car.app.IOnDoneCallback,java.lang.String,java.lang.Object)>(r2, "getManager", $r17);

        return;

     label5:
        $r10 = virtualinvoke r4.<androidx.car.app.Session: androidx.car.app.CarContext getCarContext()>();

        $r11 = virtualinvoke $r10.<androidx.car.app.CarContext: java.lang.Object getCarService(java.lang.Class)>(class "Landroidx/car/app/navigation/NavigationManager;");

        $r12 = (androidx.car.app.navigation.NavigationManager) $r11;

        $r13 = virtualinvoke $r12.<androidx.car.app.navigation.NavigationManager: androidx.car.app.navigation.INavigationManager$Stub getIInterface()>();

        staticinvoke <androidx.car.app.utils.RemoteUtils: void sendSuccessResponseToHost(androidx.car.app.IOnDoneCallback,java.lang.String,java.lang.Object)>(r2, "getManager", $r13);

        return;

     label6:
        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%s is not a valid manager");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CarApp", $r21);

        $r22 = new java.security.InvalidParameterException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a valid manager type");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.security.InvalidParameterException: void <init>(java.lang.String)>($r26);

        staticinvoke <androidx.car.app.utils.RemoteUtils: void sendFailureResponseToHost(androidx.car.app.IOnDoneCallback,java.lang.String,java.lang.Throwable)>(r2, "getManager", $r22);

        return;
    }

    private java.lang.Object lambda$onConfigurationChanged$6(androidx.car.app.CarAppService, android.content.res.Configuration) throws androidx.car.app.serialization.BundlerException
    {
        androidx.car.app.CarAppService$CarAppBinder r0;
        androidx.car.app.CarAppService r1;
        android.content.res.Configuration r2;
        androidx.car.app.Session $r3, $r5;
        java.lang.Object $r4;

        r0 := @this: androidx.car.app.CarAppService$CarAppBinder;

        r1 := @parameter0: androidx.car.app.CarAppService;

        r2 := @parameter1: android.content.res.Configuration;

        $r3 = virtualinvoke r1.<androidx.car.app.CarAppService: androidx.car.app.Session getCurrentSession()>();

        $r4 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3);

        $r5 = (androidx.car.app.Session) $r4;

        specialinvoke r0.<androidx.car.app.CarAppService$CarAppBinder: void onConfigurationChangedInternal(androidx.car.app.Session,android.content.res.Configuration)>($r5, r2);

        return null;
    }

    private java.lang.Object lambda$onNewIntent$5(androidx.car.app.CarAppService, android.content.Intent) throws androidx.car.app.serialization.BundlerException
    {
        androidx.car.app.CarAppService$CarAppBinder r0;
        androidx.car.app.CarAppService r1;
        android.content.Intent r2;
        androidx.car.app.Session $r3, $r5;
        java.lang.Object $r4;

        r0 := @this: androidx.car.app.CarAppService$CarAppBinder;

        r1 := @parameter0: androidx.car.app.CarAppService;

        r2 := @parameter1: android.content.Intent;

        $r3 = virtualinvoke r1.<androidx.car.app.CarAppService: androidx.car.app.Session getCurrentSession()>();

        $r4 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3);

        $r5 = (androidx.car.app.Session) $r4;

        specialinvoke r0.<androidx.car.app.CarAppService$CarAppBinder: void onNewIntentInternal(androidx.car.app.Session,android.content.Intent)>($r5, r2);

        return null;
    }

    private static java.lang.Object lambda$onAppStop$4(androidx.car.app.CarAppService) throws androidx.car.app.serialization.BundlerException
    {
        androidx.car.app.CarAppService r0;
        androidx.lifecycle.LifecycleRegistry $r1;
        androidx.lifecycle.Lifecycle$Event $r2;

        r0 := @parameter0: androidx.car.app.CarAppService;

        $r1 = virtualinvoke r0.<androidx.car.app.CarAppService: androidx.lifecycle.LifecycleRegistry getLifecycle()>();

        $r2 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_STOP>;

        virtualinvoke $r1.<androidx.lifecycle.LifecycleRegistry: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>($r2);

        return null;
    }

    private static java.lang.Object lambda$onAppPause$3(androidx.car.app.CarAppService) throws androidx.car.app.serialization.BundlerException
    {
        androidx.car.app.CarAppService r0;
        androidx.lifecycle.LifecycleRegistry $r1;
        androidx.lifecycle.Lifecycle$Event $r2;

        r0 := @parameter0: androidx.car.app.CarAppService;

        $r1 = virtualinvoke r0.<androidx.car.app.CarAppService: androidx.lifecycle.LifecycleRegistry getLifecycle()>();

        $r2 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_PAUSE>;

        virtualinvoke $r1.<androidx.lifecycle.LifecycleRegistry: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>($r2);

        return null;
    }

    private static java.lang.Object lambda$onAppResume$2(androidx.car.app.CarAppService) throws androidx.car.app.serialization.BundlerException
    {
        androidx.car.app.CarAppService r0;
        androidx.lifecycle.LifecycleRegistry $r1;
        androidx.lifecycle.Lifecycle$Event $r2;

        r0 := @parameter0: androidx.car.app.CarAppService;

        $r1 = virtualinvoke r0.<androidx.car.app.CarAppService: androidx.lifecycle.LifecycleRegistry getLifecycle()>();

        $r2 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_RESUME>;

        virtualinvoke $r1.<androidx.lifecycle.LifecycleRegistry: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>($r2);

        return null;
    }

    private static java.lang.Object lambda$onAppStart$1(androidx.car.app.CarAppService) throws androidx.car.app.serialization.BundlerException
    {
        androidx.car.app.CarAppService r0;
        androidx.lifecycle.LifecycleRegistry $r1;
        androidx.lifecycle.Lifecycle$Event $r2;

        r0 := @parameter0: androidx.car.app.CarAppService;

        $r1 = virtualinvoke r0.<androidx.car.app.CarAppService: androidx.lifecycle.LifecycleRegistry getLifecycle()>();

        $r2 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_START>;

        virtualinvoke $r1.<androidx.lifecycle.LifecycleRegistry: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>($r2);

        return null;
    }

    private java.lang.Object lambda$onAppCreate$0(androidx.car.app.ICarHost, android.content.res.Configuration, android.content.Intent) throws androidx.car.app.serialization.BundlerException
    {
        androidx.car.app.CarAppService$CarAppBinder r0;
        androidx.car.app.ICarHost r1;
        android.content.res.Configuration r2;
        android.content.Intent r3;
        androidx.car.app.CarAppService r4, $r7;
        androidx.lifecycle.LifecycleRegistry r5, $r21;
        androidx.lifecycle.Lifecycle$State r6, $r16, $r22, $r23, $r35;
        int i0;
        java.lang.Object $r8, $r11, $r26, $r29, $r32;
        boolean $z0, $z1, $z2;
        androidx.lifecycle.Lifecycle$Event $r9;
        androidx.car.app.CarContext $r10, $r31;
        androidx.car.app.ScreenManager $r12, $r33;
        androidx.car.app.Screen $r13;
        java.lang.StringBuilder $r15, $r17, $r18, $r19, r36;
        java.lang.String $r20;
        androidx.car.app.Session r24;
        androidx.car.app.HandshakeInfo $r25, $r27;
        androidx.car.app.HostInfo $r28, $r30;
        java.util.Deque $r34;
        android.content.Context r37;

        r0 := @this: androidx.car.app.CarAppService$CarAppBinder;

        r1 := @parameter0: androidx.car.app.ICarHost;

        r2 := @parameter1: android.content.res.Configuration;

        r3 := @parameter2: android.content.Intent;

        $r7 = r0.<androidx.car.app.CarAppService$CarAppBinder: androidx.car.app.CarAppService mService>;

        $r8 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r7);

        r4 = (androidx.car.app.CarAppService) $r8;

        r24 = virtualinvoke r4.<androidx.car.app.CarAppService: androidx.car.app.Session getCurrentSession()>();

        if r24 == null goto label1;

        $r21 = virtualinvoke r4.<androidx.car.app.CarAppService: androidx.lifecycle.LifecycleRegistry getLifecycle()>();

        $r22 = virtualinvoke $r21.<androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.Lifecycle$State getCurrentState()>();

        $r23 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State DESTROYED>;

        if $r22 != $r23 goto label2;

     label1:
        r24 = virtualinvoke r4.<androidx.car.app.CarAppService: androidx.car.app.Session onCreateSession()>();

        virtualinvoke r4.<androidx.car.app.CarAppService: void setCurrentSession(androidx.car.app.Session)>(r24);

     label2:
        $r25 = virtualinvoke r4.<androidx.car.app.CarAppService: androidx.car.app.HandshakeInfo getHandshakeInfo()>();

        $r26 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r25);

        $r27 = (androidx.car.app.HandshakeInfo) $r26;

        $r28 = virtualinvoke r4.<androidx.car.app.CarAppService: androidx.car.app.HostInfo getHostInfo()>();

        $r29 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r28);

        $r30 = (androidx.car.app.HostInfo) $r29;

        r37 = (android.content.Context) r4;

        virtualinvoke r24.<androidx.car.app.Session: void configure(android.content.Context,androidx.car.app.HandshakeInfo,androidx.car.app.HostInfo,androidx.car.app.ICarHost,android.content.res.Configuration)>(r37, $r27, $r30, r1, r2);

        r5 = virtualinvoke r4.<androidx.car.app.CarAppService: androidx.lifecycle.LifecycleRegistry getLifecycle()>();

        r6 = virtualinvoke r5.<androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.Lifecycle$State getCurrentState()>();

        $r31 = virtualinvoke r24.<androidx.car.app.Session: androidx.car.app.CarContext getCarContext()>();

        $r32 = virtualinvoke $r31.<androidx.car.app.CarContext: java.lang.Object getCarService(java.lang.Class)>(class "Landroidx/car/app/ScreenManager;");

        $r33 = (androidx.car.app.ScreenManager) $r32;

        $r34 = virtualinvoke $r33.<androidx.car.app.ScreenManager: java.util.Deque getScreenStack()>();

        i0 = interfaceinvoke $r34.<java.util.Deque: int size()>();

        $r35 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State CREATED>;

        $z2 = virtualinvoke r6.<androidx.lifecycle.Lifecycle$State: boolean isAtLeast(androidx.lifecycle.Lifecycle$State)>($r35);

        if $z2 == 0 goto label3;

        if i0 >= 1 goto label5;

     label3:
        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("CarApp", 3);

        if $z0 == 0 goto label4;

        r36 = new java.lang.StringBuilder;

        specialinvoke r36.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("onAppCreate the app was not yet created or the screen stack was empty state: ");

        $r16 = virtualinvoke r5.<androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.Lifecycle$State getCurrentState()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", stack size: ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CarApp", $r20);

     label4:
        $r9 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_CREATE>;

        virtualinvoke r5.<androidx.lifecycle.LifecycleRegistry: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>($r9);

        $r10 = virtualinvoke r24.<androidx.car.app.Session: androidx.car.app.CarContext getCarContext()>();

        $r11 = virtualinvoke $r10.<androidx.car.app.CarContext: java.lang.Object getCarService(java.lang.Class)>(class "Landroidx/car/app/ScreenManager;");

        $r12 = (androidx.car.app.ScreenManager) $r11;

        $r13 = virtualinvoke r24.<androidx.car.app.Session: androidx.car.app.Screen onCreateScreen(android.content.Intent)>(r3);

        virtualinvoke $r12.<androidx.car.app.ScreenManager: void push(androidx.car.app.Screen)>($r13);

        goto label7;

     label5:
        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("CarApp", 3);

        if $z1 == 0 goto label6;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CarApp", "onAppCreate the app was already created");

     label6:
        specialinvoke r0.<androidx.car.app.CarAppService$CarAppBinder: void onNewIntentInternal(androidx.car.app.Session,android.content.Intent)>(r24, r3);

     label7:
        return null;
    }

