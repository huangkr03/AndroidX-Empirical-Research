kotlin.properties.ObservableProperty
<kotlin.properties.ObservableProperty: java.lang.Object value>
    public void <init>(java.lang.Object)
    {
        kotlin.properties.ObservableProperty $r0;
        java.lang.Object $r1;

        $r0 := @this: kotlin.properties.ObservableProperty;

        $r1 := @parameter0: java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<kotlin.properties.ObservableProperty: java.lang.Object value> = $r1;

        return;
    }

    protected void afterChange(kotlin.reflect.KProperty, java.lang.Object, java.lang.Object)
    {
        kotlin.properties.ObservableProperty $r0;
        kotlin.reflect.KProperty $r1;
        java.lang.Object $r2, $r3;

        $r0 := @this: kotlin.properties.ObservableProperty;

        $r1 := @parameter0: kotlin.reflect.KProperty;

        $r3 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "property");

        return;
    }

    protected boolean beforeChange(kotlin.reflect.KProperty, java.lang.Object, java.lang.Object)
    {
        kotlin.properties.ObservableProperty $r0;
        java.lang.Object $r1, $r3;
        kotlin.reflect.KProperty $r2;

        $r0 := @this: kotlin.properties.ObservableProperty;

        $r2 := @parameter0: kotlin.reflect.KProperty;

        $r3 := @parameter1: java.lang.Object;

        $r1 := @parameter2: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "property");

        return 1;
    }

    public java.lang.Object getValue(java.lang.Object, kotlin.reflect.KProperty)
    {
        kotlin.properties.ObservableProperty $r0;
        kotlin.reflect.KProperty $r1;
        java.lang.Object $r2;

        $r0 := @this: kotlin.properties.ObservableProperty;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: kotlin.reflect.KProperty;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "property");

        $r2 = $r0.<kotlin.properties.ObservableProperty: java.lang.Object value>;

        return $r2;
    }

    public void setValue(java.lang.Object, kotlin.reflect.KProperty, java.lang.Object)
    {
        kotlin.properties.ObservableProperty $r0;
        kotlin.reflect.KProperty $r1;
        java.lang.Object $r2, $r3;
        boolean $z0;

        $r0 := @this: kotlin.properties.ObservableProperty;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: kotlin.reflect.KProperty;

        $r2 := @parameter2: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "property");

        $r3 = $r0.<kotlin.properties.ObservableProperty: java.lang.Object value>;

        $z0 = virtualinvoke $r0.<kotlin.properties.ObservableProperty: boolean beforeChange(kotlin.reflect.KProperty,java.lang.Object,java.lang.Object)>($r1, $r3, $r2);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r0.<kotlin.properties.ObservableProperty: java.lang.Object value> = $r2;

        virtualinvoke $r0.<kotlin.properties.ObservableProperty: void afterChange(kotlin.reflect.KProperty,java.lang.Object,java.lang.Object)>($r1, $r3, $r2);

        return;
    }

