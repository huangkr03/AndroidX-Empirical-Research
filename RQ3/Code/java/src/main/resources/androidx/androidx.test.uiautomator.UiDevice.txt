androidx.test.uiautomator.UiDevice
<androidx.test.uiautomator.UiDevice: java.lang.String LOG_TAG>
<androidx.test.uiautomator.UiDevice: long KEY_PRESS_EVENT_TIMEOUT>
<androidx.test.uiautomator.UiDevice: java.util.HashMap mWatchers>
<androidx.test.uiautomator.UiDevice: java.util.List mWatchersTriggers>
<androidx.test.uiautomator.UiDevice: boolean mInWatcherContext>
<androidx.test.uiautomator.UiDevice: android.app.Instrumentation mInstrumentation>
<androidx.test.uiautomator.UiDevice: androidx.test.uiautomator.QueryController mQueryController>
<androidx.test.uiautomator.UiDevice: androidx.test.uiautomator.InteractionController mInteractionController>
<androidx.test.uiautomator.UiDevice: androidx.test.uiautomator.UiDevice sInstance>
<androidx.test.uiautomator.UiDevice: androidx.test.uiautomator.WaitMixin mWaitMixin>
<androidx.test.uiautomator.UiDevice: int API_LEVEL_ACTUAL>
    private void <init>()
    {
        androidx.test.uiautomator.UiDevice r0;
        java.util.HashMap $r1;
        java.util.ArrayList $r2;
        androidx.test.uiautomator.WaitMixin $r3;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<androidx.test.uiautomator.UiDevice: java.util.HashMap mWatchers> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<androidx.test.uiautomator.UiDevice: java.util.List mWatchersTriggers> = $r2;

        r0.<androidx.test.uiautomator.UiDevice: boolean mInWatcherContext> = 0;

        $r3 = new androidx.test.uiautomator.WaitMixin;

        specialinvoke $r3.<androidx.test.uiautomator.WaitMixin: void <init>(java.lang.Object)>(r0);

        r0.<androidx.test.uiautomator.UiDevice: androidx.test.uiautomator.WaitMixin mWaitMixin> = $r3;

        return;
    }

    void <init>(android.app.Instrumentation)
    {
        androidx.test.uiautomator.UiDevice r0;
        android.app.Instrumentation r1;
        android.accessibilityservice.AccessibilityServiceInfo r2;
        java.util.HashMap $r3;
        java.util.ArrayList $r4;
        androidx.test.uiautomator.WaitMixin $r5;
        androidx.test.uiautomator.QueryController $r6;
        androidx.test.uiautomator.InteractionController $r7;
        int $i0, $i1, $i2;
        android.app.UiAutomation $r8, $r9;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        r1 := @parameter0: android.app.Instrumentation;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<androidx.test.uiautomator.UiDevice: java.util.HashMap mWatchers> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<androidx.test.uiautomator.UiDevice: java.util.List mWatchersTriggers> = $r4;

        r0.<androidx.test.uiautomator.UiDevice: boolean mInWatcherContext> = 0;

        $r5 = new androidx.test.uiautomator.WaitMixin;

        specialinvoke $r5.<androidx.test.uiautomator.WaitMixin: void <init>(java.lang.Object)>(r0);

        r0.<androidx.test.uiautomator.UiDevice: androidx.test.uiautomator.WaitMixin mWaitMixin> = $r5;

        r0.<androidx.test.uiautomator.UiDevice: android.app.Instrumentation mInstrumentation> = r1;

        $r6 = new androidx.test.uiautomator.QueryController;

        specialinvoke $r6.<androidx.test.uiautomator.QueryController: void <init>(android.app.Instrumentation)>(r1);

        r0.<androidx.test.uiautomator.UiDevice: androidx.test.uiautomator.QueryController mQueryController> = $r6;

        $r7 = new androidx.test.uiautomator.InteractionController;

        specialinvoke $r7.<androidx.test.uiautomator.InteractionController: void <init>(android.app.Instrumentation)>(r1);

        r0.<androidx.test.uiautomator.UiDevice: androidx.test.uiautomator.InteractionController mInteractionController> = $r7;

        $i0 = <androidx.test.uiautomator.UiDevice: int API_LEVEL_ACTUAL>;

        if $i0 < 21 goto label1;

        $r8 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: android.app.UiAutomation getUiAutomation()>();

        r2 = virtualinvoke $r8.<android.app.UiAutomation: android.accessibilityservice.AccessibilityServiceInfo getServiceInfo()>();

        $i1 = r2.<android.accessibilityservice.AccessibilityServiceInfo: int flags>;

        $i2 = $i1 | 64;

        r2.<android.accessibilityservice.AccessibilityServiceInfo: int flags> = $i2;

        $r9 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: android.app.UiAutomation getUiAutomation()>();

        virtualinvoke $r9.<android.app.UiAutomation: void setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)>(r2);

     label1:
        return;
    }

    boolean isInWatcherContext()
    {
        androidx.test.uiautomator.UiDevice r0;
        boolean $z0;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        $z0 = r0.<androidx.test.uiautomator.UiDevice: boolean mInWatcherContext>;

        return $z0;
    }

    public androidx.test.uiautomator.UiObject findObject(androidx.test.uiautomator.UiSelector)
    {
        androidx.test.uiautomator.UiDevice r0;
        androidx.test.uiautomator.UiSelector r1;
        androidx.test.uiautomator.UiObject $r2;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        r1 := @parameter0: androidx.test.uiautomator.UiSelector;

        $r2 = new androidx.test.uiautomator.UiObject;

        specialinvoke $r2.<androidx.test.uiautomator.UiObject: void <init>(androidx.test.uiautomator.UiDevice,androidx.test.uiautomator.UiSelector)>(r0, r1);

        return $r2;
    }

    public boolean hasObject(androidx.test.uiautomator.BySelector)
    {
        androidx.test.uiautomator.UiDevice r0;
        androidx.test.uiautomator.BySelector r1;
        android.view.accessibility.AccessibilityNodeInfo r2;
        android.view.accessibility.AccessibilityNodeInfo[] $r3;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        r1 := @parameter0: androidx.test.uiautomator.BySelector;

        $r3 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: android.view.accessibility.AccessibilityNodeInfo[] getWindowRoots()>();

        r2 = staticinvoke <androidx.test.uiautomator.ByMatcher: android.view.accessibility.AccessibilityNodeInfo findMatch(androidx.test.uiautomator.UiDevice,androidx.test.uiautomator.BySelector,android.view.accessibility.AccessibilityNodeInfo[])>(r0, r1, $r3);

        if r2 == null goto label1;

        virtualinvoke r2.<android.view.accessibility.AccessibilityNodeInfo: void recycle()>();

        return 1;

     label1:
        return 0;
    }

    public androidx.test.uiautomator.UiObject2 findObject(androidx.test.uiautomator.BySelector)
    {
        androidx.test.uiautomator.UiDevice r0;
        androidx.test.uiautomator.BySelector r1;
        android.view.accessibility.AccessibilityNodeInfo r2;
        android.view.accessibility.AccessibilityNodeInfo[] $r3;
        androidx.test.uiautomator.UiObject2 $r4;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        r1 := @parameter0: androidx.test.uiautomator.BySelector;

        $r3 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: android.view.accessibility.AccessibilityNodeInfo[] getWindowRoots()>();

        r2 = staticinvoke <androidx.test.uiautomator.ByMatcher: android.view.accessibility.AccessibilityNodeInfo findMatch(androidx.test.uiautomator.UiDevice,androidx.test.uiautomator.BySelector,android.view.accessibility.AccessibilityNodeInfo[])>(r0, r1, $r3);

        if r2 == null goto label1;

        $r4 = new androidx.test.uiautomator.UiObject2;

        specialinvoke $r4.<androidx.test.uiautomator.UiObject2: void <init>(androidx.test.uiautomator.UiDevice,androidx.test.uiautomator.BySelector,android.view.accessibility.AccessibilityNodeInfo)>(r0, r1, r2);

        goto label2;

     label1:
        $r4 = null;

     label2:
        return $r4;
    }

    public java.util.List findObjects(androidx.test.uiautomator.BySelector)
    {
        androidx.test.uiautomator.UiDevice r0;
        androidx.test.uiautomator.BySelector r1;
        java.util.ArrayList r2, $r5;
        java.util.Iterator r3;
        android.view.accessibility.AccessibilityNodeInfo r4;
        android.view.accessibility.AccessibilityNodeInfo[] $r6;
        java.util.List $r7;
        boolean $z0;
        java.lang.Object $r8;
        androidx.test.uiautomator.UiObject2 $r9;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        r1 := @parameter0: androidx.test.uiautomator.BySelector;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r2 = $r5;

        $r6 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: android.view.accessibility.AccessibilityNodeInfo[] getWindowRoots()>();

        $r7 = staticinvoke <androidx.test.uiautomator.ByMatcher: java.util.List findMatches(androidx.test.uiautomator.UiDevice,androidx.test.uiautomator.BySelector,android.view.accessibility.AccessibilityNodeInfo[])>(r0, r1, $r6);

        r3 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.view.accessibility.AccessibilityNodeInfo) $r8;

        $r9 = new androidx.test.uiautomator.UiObject2;

        specialinvoke $r9.<androidx.test.uiautomator.UiObject2: void <init>(androidx.test.uiautomator.UiDevice,androidx.test.uiautomator.BySelector,android.view.accessibility.AccessibilityNodeInfo)>(r0, r1, r4);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label1;

     label2:
        return r2;
    }

    public java.lang.Object wait(androidx.test.uiautomator.SearchCondition, long)
    {
        androidx.test.uiautomator.UiDevice r0;
        androidx.test.uiautomator.SearchCondition r1;
        long l0;
        androidx.test.uiautomator.WaitMixin $r2;
        java.lang.Object $r3;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        r1 := @parameter0: androidx.test.uiautomator.SearchCondition;

        l0 := @parameter1: long;

        $r2 = r0.<androidx.test.uiautomator.UiDevice: androidx.test.uiautomator.WaitMixin mWaitMixin>;

        $r3 = virtualinvoke $r2.<androidx.test.uiautomator.WaitMixin: java.lang.Object wait(androidx.test.uiautomator.Condition,long)>(r1, l0);

        return $r3;
    }

    public java.lang.Object performActionAndWait(java.lang.Runnable, androidx.test.uiautomator.EventCondition, long)
    {
        androidx.test.uiautomator.UiDevice r0;
        java.lang.Runnable r1;
        androidx.test.uiautomator.EventCondition r2;
        long l0;
        java.lang.Throwable r3, $r7;
        android.app.UiAutomation $r4;
        androidx.test.uiautomator.UiDevice$EventForwardingFilter $r5;
        java.lang.Object $r6;
        android.view.accessibility.AccessibilityEvent r8;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        r1 := @parameter0: java.lang.Runnable;

        r2 := @parameter1: androidx.test.uiautomator.EventCondition;

        l0 := @parameter2: long;

        r8 = null;

     label1:
        $r4 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: android.app.UiAutomation getUiAutomation()>();

        $r5 = new androidx.test.uiautomator.UiDevice$EventForwardingFilter;

        specialinvoke $r5.<androidx.test.uiautomator.UiDevice$EventForwardingFilter: void <init>(androidx.test.uiautomator.EventCondition)>(r2);

        r8 = virtualinvoke $r4.<android.app.UiAutomation: android.view.accessibility.AccessibilityEvent executeAndWaitForEvent(java.lang.Runnable,android.app.UiAutomation$AccessibilityEventFilter,long)>(r1, $r5, l0);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

     label4:
        if r8 == null goto label5;

        virtualinvoke r8.<android.view.accessibility.AccessibilityEvent: void recycle()>();

     label5:
        $r6 = virtualinvoke r2.<androidx.test.uiautomator.EventCondition: java.lang.Object getResult()>();

        return $r6;

        catch java.util.concurrent.TimeoutException from label1 to label2 with label3;
    }

    public void setCompressedLayoutHeirarchy(boolean)
    {
        androidx.test.uiautomator.UiDevice r0;
        boolean z0;
        android.accessibilityservice.AccessibilityServiceInfo r1;
        android.app.UiAutomation $r2, $r3;
        int $i0, $i1, $i2, $i3;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        z0 := @parameter0: boolean;

        $r2 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: android.app.UiAutomation getUiAutomation()>();

        r1 = virtualinvoke $r2.<android.app.UiAutomation: android.accessibilityservice.AccessibilityServiceInfo getServiceInfo()>();

        if z0 == 0 goto label1;

        $i2 = r1.<android.accessibilityservice.AccessibilityServiceInfo: int flags>;

        $i3 = $i2 & -3;

        r1.<android.accessibilityservice.AccessibilityServiceInfo: int flags> = $i3;

        goto label2;

     label1:
        $i0 = r1.<android.accessibilityservice.AccessibilityServiceInfo: int flags>;

        $i1 = $i0 | 2;

        r1.<android.accessibilityservice.AccessibilityServiceInfo: int flags> = $i1;

     label2:
        $r3 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: android.app.UiAutomation getUiAutomation()>();

        virtualinvoke $r3.<android.app.UiAutomation: void setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)>(r1);

        return;
    }

    public static androidx.test.uiautomator.UiDevice getInstance()
    {
        androidx.test.uiautomator.UiDevice $r0, $r1;
        java.lang.IllegalStateException $r2;

        $r0 = <androidx.test.uiautomator.UiDevice: androidx.test.uiautomator.UiDevice sInstance>;

        if $r0 != null goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("UiDevice singleton not initialized");

        throw $r2;

     label1:
        $r1 = <androidx.test.uiautomator.UiDevice: androidx.test.uiautomator.UiDevice sInstance>;

        return $r1;
    }

    public static androidx.test.uiautomator.UiDevice getInstance(android.app.Instrumentation)
    {
        android.app.Instrumentation r0;
        androidx.test.uiautomator.UiDevice $r1, $r2, $r3;

        r0 := @parameter0: android.app.Instrumentation;

        $r1 = <androidx.test.uiautomator.UiDevice: androidx.test.uiautomator.UiDevice sInstance>;

        if $r1 != null goto label1;

        $r3 = new androidx.test.uiautomator.UiDevice;

        specialinvoke $r3.<androidx.test.uiautomator.UiDevice: void <init>(android.app.Instrumentation)>(r0);

        <androidx.test.uiautomator.UiDevice: androidx.test.uiautomator.UiDevice sInstance> = $r3;

     label1:
        $r2 = <androidx.test.uiautomator.UiDevice: androidx.test.uiautomator.UiDevice sInstance>;

        return $r2;
    }

    public android.graphics.Point getDisplaySizeDp()
    {
        androidx.test.uiautomator.UiDevice r0;
        android.view.Display r1;
        android.graphics.Point r2, $r5;
        android.util.DisplayMetrics r3, $r6;
        float f0, f1, $f2, $f3, $f4, $f5;
        java.lang.Object[] $r4;
        int $i0, $i1, $i2, $i3;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        $r4 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r4);

        r1 = specialinvoke r0.<androidx.test.uiautomator.UiDevice: android.view.Display getDefaultDisplay()>();

        $r5 = new android.graphics.Point;

        specialinvoke $r5.<android.graphics.Point: void <init>()>();

        r2 = $r5;

        virtualinvoke r1.<android.view.Display: void getRealSize(android.graphics.Point)>(r2);

        $r6 = new android.util.DisplayMetrics;

        specialinvoke $r6.<android.util.DisplayMetrics: void <init>()>();

        r3 = $r6;

        virtualinvoke r1.<android.view.Display: void getRealMetrics(android.util.DisplayMetrics)>(r3);

        $i0 = r2.<android.graphics.Point: int x>;

        $f3 = (float) $i0;

        $f2 = r3.<android.util.DisplayMetrics: float density>;

        f0 = $f3 / $f2;

        $i1 = r2.<android.graphics.Point: int y>;

        $f5 = (float) $i1;

        $f4 = r3.<android.util.DisplayMetrics: float density>;

        f1 = $f5 / $f4;

        $i2 = staticinvoke <java.lang.Math: int round(float)>(f0);

        r2.<android.graphics.Point: int x> = $i2;

        $i3 = staticinvoke <java.lang.Math: int round(float)>(f1);

        r2.<android.graphics.Point: int y> = $i3;

        return r2;
    }

    public java.lang.String getProductName()
    {
        androidx.test.uiautomator.UiDevice r0;
        java.lang.Object[] $r1;
        java.lang.String $r2;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r1);

        $r2 = <android.os.Build: java.lang.String PRODUCT>;

        return $r2;
    }

    public java.lang.String getLastTraversedText()
    {
        androidx.test.uiautomator.UiDevice r0;
        java.lang.Object[] $r1;
        androidx.test.uiautomator.QueryController $r2;
        java.lang.String $r3;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r1);

        $r2 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: androidx.test.uiautomator.QueryController getQueryController()>();

        $r3 = virtualinvoke $r2.<androidx.test.uiautomator.QueryController: java.lang.String getLastTraversedText()>();

        return $r3;
    }

    public void clearLastTraversedText()
    {
        androidx.test.uiautomator.UiDevice r0;
        java.lang.Object[] $r1;
        androidx.test.uiautomator.QueryController $r2;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r1);

        $r2 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: androidx.test.uiautomator.QueryController getQueryController()>();

        virtualinvoke $r2.<androidx.test.uiautomator.QueryController: void clearLastTraversedText()>();

        return;
    }

    public boolean pressMenu()
    {
        androidx.test.uiautomator.UiDevice r0;
        java.lang.Object[] $r1;
        androidx.test.uiautomator.InteractionController $r2;
        boolean $z0;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r1);

        virtualinvoke r0.<androidx.test.uiautomator.UiDevice: void waitForIdle()>();

        $r2 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: androidx.test.uiautomator.InteractionController getInteractionController()>();

        $z0 = virtualinvoke $r2.<androidx.test.uiautomator.InteractionController: boolean sendKeyAndWaitForEvent(int,int,int,long)>(82, 0, 2048, 1000L);

        return $z0;
    }

    public boolean pressBack()
    {
        androidx.test.uiautomator.UiDevice r0;
        java.lang.Object[] $r1;
        androidx.test.uiautomator.InteractionController $r2;
        boolean $z0;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r1);

        virtualinvoke r0.<androidx.test.uiautomator.UiDevice: void waitForIdle()>();

        $r2 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: androidx.test.uiautomator.InteractionController getInteractionController()>();

        $z0 = virtualinvoke $r2.<androidx.test.uiautomator.InteractionController: boolean sendKeyAndWaitForEvent(int,int,int,long)>(4, 0, 2048, 1000L);

        return $z0;
    }

    public boolean pressHome()
    {
        androidx.test.uiautomator.UiDevice r0;
        java.lang.Object[] $r1;
        androidx.test.uiautomator.InteractionController $r2;
        boolean $z0;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r1);

        virtualinvoke r0.<androidx.test.uiautomator.UiDevice: void waitForIdle()>();

        $r2 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: androidx.test.uiautomator.InteractionController getInteractionController()>();

        $z0 = virtualinvoke $r2.<androidx.test.uiautomator.InteractionController: boolean sendKeyAndWaitForEvent(int,int,int,long)>(3, 0, 2048, 1000L);

        return $z0;
    }

    public boolean pressSearch()
    {
        androidx.test.uiautomator.UiDevice r0;
        java.lang.Object[] $r1;
        boolean $z0;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r1);

        $z0 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: boolean pressKeyCode(int)>(84);

        return $z0;
    }

    public boolean pressDPadCenter()
    {
        androidx.test.uiautomator.UiDevice r0;
        java.lang.Object[] $r1;
        boolean $z0;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r1);

        $z0 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: boolean pressKeyCode(int)>(23);

        return $z0;
    }

    public boolean pressDPadDown()
    {
        androidx.test.uiautomator.UiDevice r0;
        java.lang.Object[] $r1;
        boolean $z0;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r1);

        $z0 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: boolean pressKeyCode(int)>(20);

        return $z0;
    }

    public boolean pressDPadUp()
    {
        androidx.test.uiautomator.UiDevice r0;
        java.lang.Object[] $r1;
        boolean $z0;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r1);

        $z0 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: boolean pressKeyCode(int)>(19);

        return $z0;
    }

    public boolean pressDPadLeft()
    {
        androidx.test.uiautomator.UiDevice r0;
        java.lang.Object[] $r1;
        boolean $z0;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r1);

        $z0 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: boolean pressKeyCode(int)>(21);

        return $z0;
    }

    public boolean pressDPadRight()
    {
        androidx.test.uiautomator.UiDevice r0;
        java.lang.Object[] $r1;
        boolean $z0;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r1);

        $z0 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: boolean pressKeyCode(int)>(22);

        return $z0;
    }

    public boolean pressDelete()
    {
        androidx.test.uiautomator.UiDevice r0;
        java.lang.Object[] $r1;
        boolean $z0;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r1);

        $z0 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: boolean pressKeyCode(int)>(67);

        return $z0;
    }

    public boolean pressEnter()
    {
        androidx.test.uiautomator.UiDevice r0;
        java.lang.Object[] $r1;
        boolean $z0;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r1);

        $z0 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: boolean pressKeyCode(int)>(66);

        return $z0;
    }

    public boolean pressKeyCode(int)
    {
        androidx.test.uiautomator.UiDevice r0;
        int i0;
        java.lang.Object[] $r1;
        java.lang.Integer $r2;
        androidx.test.uiautomator.InteractionController $r3;
        boolean $z0;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        i0 := @parameter0: int;

        $r1 = newarray (java.lang.Object)[1];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r2;

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r1);

        virtualinvoke r0.<androidx.test.uiautomator.UiDevice: void waitForIdle()>();

        $r3 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: androidx.test.uiautomator.InteractionController getInteractionController()>();

        $z0 = virtualinvoke $r3.<androidx.test.uiautomator.InteractionController: boolean sendKey(int,int)>(i0, 0);

        return $z0;
    }

    public boolean pressKeyCode(int, int)
    {
        androidx.test.uiautomator.UiDevice r0;
        int i0, i1;
        java.lang.Object[] $r1;
        java.lang.Integer $r2, $r3;
        androidx.test.uiautomator.InteractionController $r4;
        boolean $z0;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = newarray (java.lang.Object)[2];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r1[1] = $r3;

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r1);

        virtualinvoke r0.<androidx.test.uiautomator.UiDevice: void waitForIdle()>();

        $r4 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: androidx.test.uiautomator.InteractionController getInteractionController()>();

        $z0 = virtualinvoke $r4.<androidx.test.uiautomator.InteractionController: boolean sendKey(int,int)>(i0, i1);

        return $z0;
    }

    public boolean pressRecentApps() throws android.os.RemoteException
    {
        androidx.test.uiautomator.UiDevice r0;
        java.lang.Object[] $r1;
        androidx.test.uiautomator.InteractionController $r2;
        boolean $z0;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r1);

        virtualinvoke r0.<androidx.test.uiautomator.UiDevice: void waitForIdle()>();

        $r2 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: androidx.test.uiautomator.InteractionController getInteractionController()>();

        $z0 = virtualinvoke $r2.<androidx.test.uiautomator.InteractionController: boolean toggleRecentApps()>();

        return $z0;
    }

    public boolean openNotification()
    {
        androidx.test.uiautomator.UiDevice r0;
        java.lang.Object[] $r1;
        androidx.test.uiautomator.InteractionController $r2;
        boolean $z0;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r1);

        virtualinvoke r0.<androidx.test.uiautomator.UiDevice: void waitForIdle()>();

        $r2 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: androidx.test.uiautomator.InteractionController getInteractionController()>();

        $z0 = virtualinvoke $r2.<androidx.test.uiautomator.InteractionController: boolean openNotification()>();

        return $z0;
    }

    public boolean openQuickSettings()
    {
        androidx.test.uiautomator.UiDevice r0;
        java.lang.Object[] $r1;
        androidx.test.uiautomator.InteractionController $r2;
        boolean $z0;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r1);

        virtualinvoke r0.<androidx.test.uiautomator.UiDevice: void waitForIdle()>();

        $r2 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: androidx.test.uiautomator.InteractionController getInteractionController()>();

        $z0 = virtualinvoke $r2.<androidx.test.uiautomator.InteractionController: boolean openQuickSettings()>();

        return $z0;
    }

    public int getDisplayWidth()
    {
        androidx.test.uiautomator.UiDevice r0;
        android.view.Display r1;
        android.graphics.Point r2, $r4;
        java.lang.Object[] $r3;
        int $i0;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r3);

        r1 = specialinvoke r0.<androidx.test.uiautomator.UiDevice: android.view.Display getDefaultDisplay()>();

        $r4 = new android.graphics.Point;

        specialinvoke $r4.<android.graphics.Point: void <init>()>();

        r2 = $r4;

        virtualinvoke r1.<android.view.Display: void getSize(android.graphics.Point)>(r2);

        $i0 = r2.<android.graphics.Point: int x>;

        return $i0;
    }

    public int getDisplayHeight()
    {
        androidx.test.uiautomator.UiDevice r0;
        android.view.Display r1;
        android.graphics.Point r2, $r4;
        java.lang.Object[] $r3;
        int $i0;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r3);

        r1 = specialinvoke r0.<androidx.test.uiautomator.UiDevice: android.view.Display getDefaultDisplay()>();

        $r4 = new android.graphics.Point;

        specialinvoke $r4.<android.graphics.Point: void <init>()>();

        r2 = $r4;

        virtualinvoke r1.<android.view.Display: void getSize(android.graphics.Point)>(r2);

        $i0 = r2.<android.graphics.Point: int y>;

        return $i0;
    }

    public boolean click(int, int)
    {
        androidx.test.uiautomator.UiDevice r0;
        int i0, i1, $i2, $i3;
        java.lang.Object[] $r1;
        java.lang.Integer $r2, $r3;
        androidx.test.uiautomator.InteractionController $r4;
        boolean $z0;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = newarray (java.lang.Object)[2];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r1[1] = $r3;

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r1);

        $i2 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: int getDisplayWidth()>();

        if i0 >= $i2 goto label1;

        $i3 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: int getDisplayHeight()>();

        if i1 < $i3 goto label2;

     label1:
        return 0;

     label2:
        $r4 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: androidx.test.uiautomator.InteractionController getInteractionController()>();

        $z0 = virtualinvoke $r4.<androidx.test.uiautomator.InteractionController: boolean clickNoSync(int,int)>(i0, i1);

        return $z0;
    }

    public boolean swipe(int, int, int, int, int)
    {
        androidx.test.uiautomator.UiDevice r0;
        int i0, i1, i2, i3, i4;
        java.lang.Object[] $r1;
        java.lang.Integer $r2, $r3, $r4, $r5, $r6;
        androidx.test.uiautomator.InteractionController $r7;
        boolean $z0;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        $r1 = newarray (java.lang.Object)[5];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r1[1] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r1[2] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $r1[3] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        $r1[4] = $r6;

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r1);

        $r7 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: androidx.test.uiautomator.InteractionController getInteractionController()>();

        $z0 = virtualinvoke $r7.<androidx.test.uiautomator.InteractionController: boolean swipe(int,int,int,int,int)>(i0, i1, i2, i3, i4);

        return $z0;
    }

    public boolean drag(int, int, int, int, int)
    {
        androidx.test.uiautomator.UiDevice r0;
        int i0, i1, i2, i3, i4;
        java.lang.Object[] $r1;
        java.lang.Integer $r2, $r3, $r4, $r5, $r6;
        androidx.test.uiautomator.InteractionController $r7;
        boolean $z0;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        $r1 = newarray (java.lang.Object)[5];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r1[1] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r1[2] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $r1[3] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        $r1[4] = $r6;

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r1);

        $r7 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: androidx.test.uiautomator.InteractionController getInteractionController()>();

        $z0 = virtualinvoke $r7.<androidx.test.uiautomator.InteractionController: boolean swipe(int,int,int,int,int,boolean)>(i0, i1, i2, i3, i4, 1);

        return $z0;
    }

    public boolean swipe(android.graphics.Point[], int)
    {
        androidx.test.uiautomator.UiDevice r0;
        android.graphics.Point[] r1;
        int i0;
        java.lang.Object[] $r2;
        java.lang.Integer $r3;
        androidx.test.uiautomator.InteractionController $r4;
        boolean $z0;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        r1 := @parameter0: android.graphics.Point[];

        i0 := @parameter1: int;

        $r2 = newarray (java.lang.Object)[2];

        $r2[0] = r1;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[1] = $r3;

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r2);

        $r4 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: androidx.test.uiautomator.InteractionController getInteractionController()>();

        $z0 = virtualinvoke $r4.<androidx.test.uiautomator.InteractionController: boolean swipe(android.graphics.Point[],int)>(r1, i0);

        return $z0;
    }

    public void waitForIdle()
    {
        androidx.test.uiautomator.UiDevice r0;
        java.lang.Object[] $r1;
        androidx.test.uiautomator.QueryController $r2;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r1);

        $r2 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: androidx.test.uiautomator.QueryController getQueryController()>();

        virtualinvoke $r2.<androidx.test.uiautomator.QueryController: void waitForIdle()>();

        return;
    }

    public void waitForIdle(long)
    {
        androidx.test.uiautomator.UiDevice r0;
        long l0;
        java.lang.Object[] $r1;
        java.lang.Long $r2;
        androidx.test.uiautomator.QueryController $r3;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        l0 := @parameter0: long;

        $r1 = newarray (java.lang.Object)[1];

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r1[0] = $r2;

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r1);

        $r3 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: androidx.test.uiautomator.QueryController getQueryController()>();

        virtualinvoke $r3.<androidx.test.uiautomator.QueryController: void waitForIdle(long)>(l0);

        return;
    }

    public java.lang.String getCurrentActivityName()
    {
        androidx.test.uiautomator.UiDevice r0;
        java.lang.Object[] $r1;
        androidx.test.uiautomator.QueryController $r2;
        java.lang.String $r3;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r1);

        $r2 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: androidx.test.uiautomator.QueryController getQueryController()>();

        $r3 = virtualinvoke $r2.<androidx.test.uiautomator.QueryController: java.lang.String getCurrentActivityName()>();

        return $r3;
    }

    public java.lang.String getCurrentPackageName()
    {
        androidx.test.uiautomator.UiDevice r0;
        java.lang.Object[] $r1;
        androidx.test.uiautomator.QueryController $r2;
        java.lang.String $r3;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r1);

        $r2 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: androidx.test.uiautomator.QueryController getQueryController()>();

        $r3 = virtualinvoke $r2.<androidx.test.uiautomator.QueryController: java.lang.String getCurrentPackageName()>();

        return $r3;
    }

    public void registerWatcher(java.lang.String, androidx.test.uiautomator.UiWatcher)
    {
        androidx.test.uiautomator.UiDevice r0;
        java.lang.String r1;
        androidx.test.uiautomator.UiWatcher r2;
        java.lang.Object[] $r3;
        boolean $z0;
        java.util.HashMap $r4;
        java.lang.IllegalStateException $r6;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.test.uiautomator.UiWatcher;

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = r1;

        $r3[1] = r2;

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r3);

        $z0 = r0.<androidx.test.uiautomator.UiDevice: boolean mInWatcherContext>;

        if $z0 == 0 goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot register new watcher from within another");

        throw $r6;

     label1:
        $r4 = r0.<androidx.test.uiautomator.UiDevice: java.util.HashMap mWatchers>;

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public void removeWatcher(java.lang.String)
    {
        androidx.test.uiautomator.UiDevice r0;
        java.lang.String r1;
        java.lang.Object[] $r2;
        boolean $z0;
        java.util.HashMap $r3;
        java.lang.IllegalStateException $r5;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r2);

        $z0 = r0.<androidx.test.uiautomator.UiDevice: boolean mInWatcherContext>;

        if $z0 == 0 goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot remove a watcher from within another");

        throw $r5;

     label1:
        $r3 = r0.<androidx.test.uiautomator.UiDevice: java.util.HashMap mWatchers>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    public void runWatchers()
    {
        androidx.test.uiautomator.UiDevice r0;
        java.util.Iterator r1;
        java.lang.String r2, $r15, $r18;
        androidx.test.uiautomator.UiWatcher r3;
        java.lang.Throwable r4, r5, $r12, $r13;
        java.lang.Object[] $r6;
        boolean $z0, $z1, $z2;
        java.util.HashMap $r7, $r10;
        java.util.Set $r8;
        java.lang.Object $r9, $r11;
        java.lang.StringBuilder $r14, $r16, $r17;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        $r6 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r6);

        $z0 = r0.<androidx.test.uiautomator.UiDevice: boolean mInWatcherContext>;

        if $z0 == 0 goto label01;

        return;

     label01:
        $r7 = r0.<androidx.test.uiautomator.UiDevice: java.util.HashMap mWatchers>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.util.Set keySet()>();

        r1 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label10;

        $r9 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.lang.String) $r9;

        $r10 = r0.<androidx.test.uiautomator.UiDevice: java.util.HashMap mWatchers>;

        $r11 = virtualinvoke $r10.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (androidx.test.uiautomator.UiWatcher) $r11;

        if r3 == null goto label09;

     label03:
        r0.<androidx.test.uiautomator.UiDevice: boolean mInWatcherContext> = 1;

        $z2 = interfaceinvoke r3.<androidx.test.uiautomator.UiWatcher: boolean checkForCondition()>();

        if $z2 == 0 goto label04;

        specialinvoke r0.<androidx.test.uiautomator.UiDevice: void setWatcherTriggered(java.lang.String)>(r2);

     label04:
        r0.<androidx.test.uiautomator.UiDevice: boolean mInWatcherContext> = 0;

        goto label09;

     label05:
        $r13 := @caughtexception;

        r4 = $r13;

        $r15 = <androidx.test.uiautomator.UiDevice: java.lang.String LOG_TAG>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exceuting watcher: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r15, $r18, r4);

     label06:
        r0.<androidx.test.uiautomator.UiDevice: boolean mInWatcherContext> = 0;

        goto label09;

     label07:
        $r12 := @caughtexception;

        r5 = $r12;

     label08:
        r0.<androidx.test.uiautomator.UiDevice: boolean mInWatcherContext> = 0;

        throw r5;

     label09:
        goto label02;

     label10:
        return;

        catch java.lang.Exception from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    public void resetWatcherTriggers()
    {
        androidx.test.uiautomator.UiDevice r0;
        java.lang.Object[] $r1;
        java.util.List $r2;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r1);

        $r2 = r0.<androidx.test.uiautomator.UiDevice: java.util.List mWatchersTriggers>;

        interfaceinvoke $r2.<java.util.List: void clear()>();

        return;
    }

    public boolean hasWatcherTriggered(java.lang.String)
    {
        androidx.test.uiautomator.UiDevice r0;
        java.lang.String r1;
        java.lang.Object[] $r2;
        java.util.List $r3;
        boolean $z0;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r2);

        $r3 = r0.<androidx.test.uiautomator.UiDevice: java.util.List mWatchersTriggers>;

        $z0 = interfaceinvoke $r3.<java.util.List: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean hasAnyWatcherTriggered()
    {
        androidx.test.uiautomator.UiDevice r0;
        java.lang.Object[] $r1;
        java.util.List $r2;
        int $i0;
        boolean $z0;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r1);

        $r2 = r0.<androidx.test.uiautomator.UiDevice: java.util.List mWatchersTriggers>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void setWatcherTriggered(java.lang.String)
    {
        androidx.test.uiautomator.UiDevice r0;
        java.lang.String r1;
        java.lang.Object[] $r2;
        boolean $z0;
        java.util.List $r3;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r2);

        $z0 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: boolean hasWatcherTriggered(java.lang.String)>(r1);

        if $z0 != 0 goto label1;

        $r3 = r0.<androidx.test.uiautomator.UiDevice: java.util.List mWatchersTriggers>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1);

     label1:
        return;
    }

    public boolean isNaturalOrientation()
    {
        androidx.test.uiautomator.UiDevice r0;
        int i0;
        java.lang.Object[] $r1;
        boolean $z0;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r1);

        virtualinvoke r0.<androidx.test.uiautomator.UiDevice: void waitForIdle()>();

        i0 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: int getDisplayRotation()>();

        if i0 == 0 goto label1;

        if i0 != 2 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public int getDisplayRotation()
    {
        androidx.test.uiautomator.UiDevice r0;
        java.lang.Object[] $r1;
        android.view.Display $r2;
        int $i0;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r1);

        virtualinvoke r0.<androidx.test.uiautomator.UiDevice: void waitForIdle()>();

        $r2 = specialinvoke r0.<androidx.test.uiautomator.UiDevice: android.view.Display getDefaultDisplay()>();

        $i0 = virtualinvoke $r2.<android.view.Display: int getRotation()>();

        return $i0;
    }

    public void freezeRotation() throws android.os.RemoteException
    {
        androidx.test.uiautomator.UiDevice r0;
        java.lang.Object[] $r1;
        androidx.test.uiautomator.InteractionController $r2;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r1);

        $r2 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: androidx.test.uiautomator.InteractionController getInteractionController()>();

        virtualinvoke $r2.<androidx.test.uiautomator.InteractionController: void freezeRotation()>();

        return;
    }

    public void unfreezeRotation() throws android.os.RemoteException
    {
        androidx.test.uiautomator.UiDevice r0;
        java.lang.Object[] $r1;
        androidx.test.uiautomator.InteractionController $r2;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r1);

        $r2 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: androidx.test.uiautomator.InteractionController getInteractionController()>();

        virtualinvoke $r2.<androidx.test.uiautomator.InteractionController: void unfreezeRotation()>();

        return;
    }

    public void setOrientationLeft() throws android.os.RemoteException
    {
        androidx.test.uiautomator.UiDevice r0;
        java.lang.Object[] $r1;
        androidx.test.uiautomator.InteractionController $r2;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r1);

        $r2 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: androidx.test.uiautomator.InteractionController getInteractionController()>();

        virtualinvoke $r2.<androidx.test.uiautomator.InteractionController: void setRotationLeft()>();

        virtualinvoke r0.<androidx.test.uiautomator.UiDevice: void waitForIdle()>();

        return;
    }

    public void setOrientationRight() throws android.os.RemoteException
    {
        androidx.test.uiautomator.UiDevice r0;
        java.lang.Object[] $r1;
        androidx.test.uiautomator.InteractionController $r2;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r1);

        $r2 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: androidx.test.uiautomator.InteractionController getInteractionController()>();

        virtualinvoke $r2.<androidx.test.uiautomator.InteractionController: void setRotationRight()>();

        virtualinvoke r0.<androidx.test.uiautomator.UiDevice: void waitForIdle()>();

        return;
    }

    public void setOrientationNatural() throws android.os.RemoteException
    {
        androidx.test.uiautomator.UiDevice r0;
        java.lang.Object[] $r1;
        androidx.test.uiautomator.InteractionController $r2;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r1);

        $r2 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: androidx.test.uiautomator.InteractionController getInteractionController()>();

        virtualinvoke $r2.<androidx.test.uiautomator.InteractionController: void setRotationNatural()>();

        virtualinvoke r0.<androidx.test.uiautomator.UiDevice: void waitForIdle()>();

        return;
    }

    public void wakeUp() throws android.os.RemoteException
    {
        androidx.test.uiautomator.UiDevice r0;
        java.lang.Object[] $r1;
        androidx.test.uiautomator.InteractionController $r2;
        boolean $z0;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r1);

        $r2 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: androidx.test.uiautomator.InteractionController getInteractionController()>();

        $z0 = virtualinvoke $r2.<androidx.test.uiautomator.InteractionController: boolean wakeDevice()>();

        if $z0 == 0 goto label1;

        staticinvoke <android.os.SystemClock: void sleep(long)>(500L);

     label1:
        return;
    }

    public boolean isScreenOn() throws android.os.RemoteException
    {
        androidx.test.uiautomator.UiDevice r0;
        java.lang.Object[] $r1;
        androidx.test.uiautomator.InteractionController $r2;
        boolean $z0;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r1);

        $r2 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: androidx.test.uiautomator.InteractionController getInteractionController()>();

        $z0 = virtualinvoke $r2.<androidx.test.uiautomator.InteractionController: boolean isScreenOn()>();

        return $z0;
    }

    public void sleep() throws android.os.RemoteException
    {
        androidx.test.uiautomator.UiDevice r0;
        java.lang.Object[] $r1;
        androidx.test.uiautomator.InteractionController $r2;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r1);

        $r2 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: androidx.test.uiautomator.InteractionController getInteractionController()>();

        virtualinvoke $r2.<androidx.test.uiautomator.InteractionController: boolean sleepDevice()>();

        return;
    }

    public void dumpWindowHierarchy(java.lang.String)
    {
        androidx.test.uiautomator.UiDevice r0;
        java.lang.String r1;
        java.lang.Throwable r2, $r7;
        java.lang.Object[] $r3;
        java.io.File $r4, r8;
        boolean $z0;
        android.app.Instrumentation $r5;
        android.content.Context $r6;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        r1 := @parameter0: java.lang.String;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r1;

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r3);

        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>(r1);

        r8 = $r4;

        $z0 = virtualinvoke r8.<java.io.File: boolean isAbsolute()>();

        if $z0 != 0 goto label1;

        $r5 = r0.<androidx.test.uiautomator.UiDevice: android.app.Instrumentation mInstrumentation>;

        $r6 = virtualinvoke $r5.<android.app.Instrumentation: android.content.Context getContext()>();

        r8 = virtualinvoke $r6.<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>(r1);

     label1:
        virtualinvoke r0.<androidx.test.uiautomator.UiDevice: void dumpWindowHierarchy(java.io.File)>(r8);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r2 = $r7;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void dumpWindowHierarchy(java.io.File) throws java.io.IOException
    {
        androidx.test.uiautomator.UiDevice r0;
        java.io.File r1;
        java.io.BufferedOutputStream r2, $r4, $r6;
        java.lang.Throwable r3, $r8;
        java.io.FileOutputStream $r5, $r7;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        r1 := @parameter0: java.io.File;

        $r4 = new java.io.BufferedOutputStream;

        $r5 = new java.io.FileOutputStream;

        specialinvoke $r5.<java.io.FileOutputStream: void <init>(java.io.File)>(r1);

        specialinvoke $r4.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r5);

        r2 = $r4;

     label1:
        $r6 = new java.io.BufferedOutputStream;

        $r7 = new java.io.FileOutputStream;

        specialinvoke $r7.<java.io.FileOutputStream: void <init>(java.io.File)>(r1);

        specialinvoke $r6.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r7);

        virtualinvoke r0.<androidx.test.uiautomator.UiDevice: void dumpWindowHierarchy(java.io.OutputStream)>($r6);

     label2:
        virtualinvoke r2.<java.io.OutputStream: void close()>();

        goto label5;

     label3:
        $r8 := @caughtexception;

        r3 = $r8;

     label4:
        virtualinvoke r2.<java.io.OutputStream: void close()>();

        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void dumpWindowHierarchy(java.io.OutputStream) throws java.io.IOException
    {
        androidx.test.uiautomator.UiDevice r0;
        java.io.OutputStream r1;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        r1 := @parameter0: java.io.OutputStream;

        staticinvoke <androidx.test.uiautomator.AccessibilityNodeInfoDumper: void dumpWindowHierarchy(androidx.test.uiautomator.UiDevice,java.io.OutputStream)>(r0, r1);

        return;
    }

    public boolean waitForWindowUpdate(java.lang.String, long)
    {
        androidx.test.uiautomator.UiDevice r0;
        java.lang.String r1, $r10, $r12;
        long l0;
        androidx.test.uiautomator.UiDevice$1 r2, $r6;
        androidx.test.uiautomator.UiDevice$2 r3, $r7;
        java.lang.Object[] $r4;
        java.lang.Long $r5;
        android.app.UiAutomation $r8;
        boolean $z0;
        java.lang.Throwable $r11, $r13, r14, r15;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = r1;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r4[1] = $r5;

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r4);

        if r1 == null goto label1;

        $r10 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: java.lang.String getCurrentPackageName()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r6 = new androidx.test.uiautomator.UiDevice$1;

        specialinvoke $r6.<androidx.test.uiautomator.UiDevice$1: void <init>(androidx.test.uiautomator.UiDevice)>(r0);

        r2 = $r6;

        $r7 = new androidx.test.uiautomator.UiDevice$2;

        specialinvoke $r7.<androidx.test.uiautomator.UiDevice$2: void <init>(androidx.test.uiautomator.UiDevice,java.lang.String)>(r0, r1);

        r3 = $r7;

     label2:
        $r8 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: android.app.UiAutomation getUiAutomation()>();

        virtualinvoke $r8.<android.app.UiAutomation: android.view.accessibility.AccessibilityEvent executeAndWaitForEvent(java.lang.Runnable,android.app.UiAutomation$AccessibilityEventFilter,long)>(r2, r3, l0);

     label3:
        goto label6;

     label4:
        $r13 := @caughtexception;

        r14 = $r13;

        return 0;

     label5:
        $r11 := @caughtexception;

        r15 = $r11;

        $r12 = <androidx.test.uiautomator.UiDevice: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r12, "waitForWindowUpdate: general exception from bridge", r15);

        return 0;

     label6:
        return 1;

        catch java.util.concurrent.TimeoutException from label2 to label3 with label4;
        catch java.lang.Exception from label2 to label3 with label5;
    }

    public boolean takeScreenshot(java.io.File)
    {
        androidx.test.uiautomator.UiDevice r0;
        java.io.File r1;
        java.lang.Object[] $r2;
        boolean $z0;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        r1 := @parameter0: java.io.File;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r2);

        $z0 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: boolean takeScreenshot(java.io.File,float,int)>(r1, 1.0F, 90);

        return $z0;
    }

    public boolean takeScreenshot(java.io.File, float, int)
    {
        androidx.test.uiautomator.UiDevice r0;
        java.io.File r1;
        float f0;
        int i0;
        android.graphics.Bitmap r2;
        boolean z0;
        java.lang.Throwable r3, r4, r5, $r13, $r14, $r15, $r17, $r18, r20, r21;
        java.lang.Object[] $r6;
        java.lang.Float $r7;
        java.lang.Integer $r8;
        android.app.UiAutomation $r9;
        java.io.BufferedOutputStream $r10, r19;
        java.io.FileOutputStream $r11;
        android.graphics.Bitmap$CompressFormat $r12;
        java.lang.String $r16;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        r1 := @parameter0: java.io.File;

        f0 := @parameter1: float;

        i0 := @parameter2: int;

        $r6 = newarray (java.lang.Object)[3];

        $r6[0] = r1;

        $r7 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        $r6[1] = $r7;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6[2] = $r8;

        staticinvoke <androidx.test.uiautomator.Tracer: void trace(java.lang.Object[])>($r6);

        $r9 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: android.app.UiAutomation getUiAutomation()>();

        r2 = virtualinvoke $r9.<android.app.UiAutomation: android.graphics.Bitmap takeScreenshot()>();

        if r2 != null goto label01;

        return 0;

     label01:
        r19 = null;

     label02:
        $r10 = new java.io.BufferedOutputStream;

        $r11 = new java.io.FileOutputStream;

        specialinvoke $r11.<java.io.FileOutputStream: void <init>(java.io.File)>(r1);

        specialinvoke $r10.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r11);

        r19 = $r10;

        if r19 == null goto label03;

        $r12 = <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat PNG>;

        virtualinvoke r2.<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>($r12, i0, r19);

        virtualinvoke r19.<java.io.BufferedOutputStream: void flush()>();

     label03:
        if r19 == null goto label07;

     label04:
        virtualinvoke r19.<java.io.BufferedOutputStream: void close()>();

     label05:
        goto label07;

     label06:
        $r17 := @caughtexception;

        r20 = $r17;

     label07:
        virtualinvoke r2.<android.graphics.Bitmap: void recycle()>();

        goto label20;

     label08:
        $r15 := @caughtexception;

        r21 = $r15;

        $r16 = <androidx.test.uiautomator.UiDevice: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r16, "failed to save screen shot to file", r21);

        z0 = 0;

     label09:
        if r19 == null goto label13;

     label10:
        virtualinvoke r19.<java.io.BufferedOutputStream: void close()>();

     label11:
        goto label13;

     label12:
        $r18 := @caughtexception;

        r3 = $r18;

     label13:
        virtualinvoke r2.<android.graphics.Bitmap: void recycle()>();

        return z0;

     label14:
        $r14 := @caughtexception;

        r4 = $r14;

     label15:
        if r19 == null goto label19;

     label16:
        virtualinvoke r19.<java.io.BufferedOutputStream: void close()>();

     label17:
        goto label19;

     label18:
        $r13 := @caughtexception;

        r5 = $r13;

     label19:
        virtualinvoke r2.<android.graphics.Bitmap: void recycle()>();

        throw r4;

     label20:
        return 1;

        catch java.io.IOException from label04 to label05 with label06;
        catch java.io.IOException from label02 to label03 with label08;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.io.IOException from label16 to label17 with label18;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    public java.lang.String getLauncherPackageName()
    {
        androidx.test.uiautomator.UiDevice r0;
        android.content.Intent r1, $r4;
        android.content.pm.PackageManager r2;
        android.content.pm.ResolveInfo r3;
        android.app.Instrumentation $r6;
        android.content.Context $r7;
        android.content.pm.ActivityInfo $r8;
        java.lang.String $r9;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        $r4 = new android.content.Intent;

        specialinvoke $r4.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.MAIN");

        r1 = $r4;

        virtualinvoke r1.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>("android.intent.category.HOME");

        $r6 = r0.<androidx.test.uiautomator.UiDevice: android.app.Instrumentation mInstrumentation>;

        $r7 = virtualinvoke $r6.<android.app.Instrumentation: android.content.Context getContext()>();

        r2 = virtualinvoke $r7.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r3 = virtualinvoke r2.<android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)>(r1, 65536);

        $r8 = r3.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r9 = $r8.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        return $r9;
    }

    public java.lang.String executeShellCommand(java.lang.String) throws java.io.IOException
    {
        androidx.test.uiautomator.UiDevice r0;
        java.lang.String r1, $r9, $r10;
        android.os.ParcelFileDescriptor r2;
        byte[] r3;
        int i0, $i1;
        android.os.ParcelFileDescriptor$AutoCloseInputStream r4, $r7;
        java.lang.StringBuffer r5, $r8;
        android.app.UiAutomation $r6;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        r1 := @parameter0: java.lang.String;

        $r6 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: android.app.UiAutomation getUiAutomation()>();

        r2 = virtualinvoke $r6.<android.app.UiAutomation: android.os.ParcelFileDescriptor executeShellCommand(java.lang.String)>(r1);

        r3 = newarray (byte)[512];

        $r7 = new android.os.ParcelFileDescriptor$AutoCloseInputStream;

        specialinvoke $r7.<android.os.ParcelFileDescriptor$AutoCloseInputStream: void <init>(android.os.ParcelFileDescriptor)>(r2);

        r4 = $r7;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        r5 = $r8;

     label1:
        $i1 = virtualinvoke r4.<java.io.FileInputStream: int read(byte[])>(r3);

        i0 = $i1;

        if $i1 == -1 goto label2;

        $r10 = new java.lang.String;

        specialinvoke $r10.<java.lang.String: void <init>(byte[],int,int)>(r3, 0, i0);

        virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        goto label1;

     label2:
        virtualinvoke r4.<java.io.FileInputStream: void close()>();

        $r9 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r9;
    }

    private android.view.Display getDefaultDisplay()
    {
        androidx.test.uiautomator.UiDevice r0;
        android.view.WindowManager r1;
        android.app.Instrumentation $r2;
        android.content.Context $r3;
        java.lang.Object $r4;
        android.view.Display $r5;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        $r2 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: android.app.Instrumentation getInstrumentation()>();

        $r3 = virtualinvoke $r2.<android.app.Instrumentation: android.content.Context getContext()>();

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("window");

        r1 = (android.view.WindowManager) $r4;

        $r5 = interfaceinvoke r1.<android.view.WindowManager: android.view.Display getDefaultDisplay()>();

        return $r5;
    }

    android.view.accessibility.AccessibilityNodeInfo[] getWindowRoots()
    {
        androidx.test.uiautomator.UiDevice r0;
        java.util.HashSet r1, $r6;
        android.view.accessibility.AccessibilityNodeInfo r2, r5;
        java.util.Iterator r3;
        android.view.accessibility.AccessibilityWindowInfo r4;
        android.app.UiAutomation $r7, $r11;
        int $i0, $i1;
        android.view.accessibility.AccessibilityNodeInfo[] $r8, $r10;
        java.lang.Object[] $r9, $r14;
        java.util.List $r12;
        java.lang.Object $r13;
        java.lang.String $r15, $r16, $r17;
        boolean $z2;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        virtualinvoke r0.<androidx.test.uiautomator.UiDevice: void waitForIdle()>();

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        r1 = $r6;

        $r7 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: android.app.UiAutomation getUiAutomation()>();

        r2 = virtualinvoke $r7.<android.app.UiAutomation: android.view.accessibility.AccessibilityNodeInfo getRootInActiveWindow()>();

        if r2 == null goto label1;

        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>(r2);

     label1:
        $i0 = <androidx.test.uiautomator.UiDevice: int API_LEVEL_ACTUAL>;

        if $i0 < 21 goto label4;

        $r11 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: android.app.UiAutomation getUiAutomation()>();

        $r12 = virtualinvoke $r11.<android.app.UiAutomation: java.util.List getWindows()>();

        r3 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r13 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.view.accessibility.AccessibilityWindowInfo) $r13;

        r5 = virtualinvoke r4.<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityNodeInfo getRoot()>();

        if r5 != null goto label3;

        $r15 = <androidx.test.uiautomator.UiDevice: java.lang.String LOG_TAG>;

        $r14 = newarray (java.lang.Object)[1];

        $r16 = virtualinvoke r4.<android.view.accessibility.AccessibilityWindowInfo: java.lang.String toString()>();

        $r14[0] = $r16;

        $r17 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Skipping null root node for window: %s", $r14);

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r15, $r17);

        goto label2;

     label3:
        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>(r5);

        goto label2;

     label4:
        $i1 = interfaceinvoke r1.<java.util.Set: int size()>();

        $r8 = newarray (android.view.accessibility.AccessibilityNodeInfo)[$i1];

        $r9 = interfaceinvoke r1.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        $r10 = (android.view.accessibility.AccessibilityNodeInfo[]) $r9;

        return $r10;
    }

    android.app.Instrumentation getInstrumentation()
    {
        androidx.test.uiautomator.UiDevice r0;
        android.app.Instrumentation $r1;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        $r1 = r0.<androidx.test.uiautomator.UiDevice: android.app.Instrumentation mInstrumentation>;

        return $r1;
    }

    static android.app.UiAutomation getUiAutomation(android.app.Instrumentation)
    {
        android.app.Instrumentation r0;
        int i0, $i1;
        androidx.test.uiautomator.Configurator $r1;
        android.app.UiAutomation $r2, $r4;
        java.lang.String $r3;

        r0 := @parameter0: android.app.Instrumentation;

        $r1 = staticinvoke <androidx.test.uiautomator.Configurator: androidx.test.uiautomator.Configurator getInstance()>();

        i0 = virtualinvoke $r1.<androidx.test.uiautomator.Configurator: int getUiAutomationFlags()>();

        $i1 = <androidx.test.uiautomator.UiDevice: int API_LEVEL_ACTUAL>;

        if $i1 <= 23 goto label1;

        $r4 = virtualinvoke r0.<android.app.Instrumentation: android.app.UiAutomation getUiAutomation(int)>(i0);

        return $r4;

     label1:
        if i0 == 0 goto label2;

        $r3 = <androidx.test.uiautomator.UiDevice: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r3, "UiAutomation flags not supported prior to N - ignoring.");

     label2:
        $r2 = virtualinvoke r0.<android.app.Instrumentation: android.app.UiAutomation getUiAutomation()>();

        return $r2;
    }

    android.app.UiAutomation getUiAutomation()
    {
        androidx.test.uiautomator.UiDevice r0;
        android.app.Instrumentation $r1;
        android.app.UiAutomation $r2;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        $r1 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: android.app.Instrumentation getInstrumentation()>();

        $r2 = staticinvoke <androidx.test.uiautomator.UiDevice: android.app.UiAutomation getUiAutomation(android.app.Instrumentation)>($r1);

        return $r2;
    }

    androidx.test.uiautomator.QueryController getQueryController()
    {
        androidx.test.uiautomator.UiDevice r0;
        androidx.test.uiautomator.QueryController $r1;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        $r1 = r0.<androidx.test.uiautomator.UiDevice: androidx.test.uiautomator.QueryController mQueryController>;

        return $r1;
    }

    androidx.test.uiautomator.InteractionController getInteractionController()
    {
        androidx.test.uiautomator.UiDevice r0;
        androidx.test.uiautomator.InteractionController $r1;

        r0 := @this: androidx.test.uiautomator.UiDevice;

        $r1 = r0.<androidx.test.uiautomator.UiDevice: androidx.test.uiautomator.InteractionController mInteractionController>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1, $r2, $r3;
        int $i0, $i1;
        boolean $z0;
        byte $b2;

        $r0 = class "Landroidx/test/uiautomator/UiDevice;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <androidx.test.uiautomator.UiDevice: java.lang.String LOG_TAG> = $r1;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        $r3 = "REL";

        $r2 = <android.os.Build$VERSION: java.lang.String CODENAME>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $b2 = 0;

        goto label2;

     label1:
        $b2 = 1;

     label2:
        $i1 = $i0 + $b2;

        <androidx.test.uiautomator.UiDevice: int API_LEVEL_ACTUAL> = $i1;

        return;
    }

androidx.test.uiautomator.UiDevice$1
<androidx.test.uiautomator.UiDevice$1: androidx.test.uiautomator.UiDevice this$0>
    void <init>(androidx.test.uiautomator.UiDevice)
    {
        androidx.test.uiautomator.UiDevice$1 r0;
        androidx.test.uiautomator.UiDevice r1;

        r0 := @this: androidx.test.uiautomator.UiDevice$1;

        r1 := @parameter0: androidx.test.uiautomator.UiDevice;

        r0.<androidx.test.uiautomator.UiDevice$1: androidx.test.uiautomator.UiDevice this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        androidx.test.uiautomator.UiDevice$1 r0;

        r0 := @this: androidx.test.uiautomator.UiDevice$1;

        return;
    }

androidx.test.uiautomator.UiDevice$2
<androidx.test.uiautomator.UiDevice$2: java.lang.String val$packageName>
<androidx.test.uiautomator.UiDevice$2: androidx.test.uiautomator.UiDevice this$0>
    void <init>(androidx.test.uiautomator.UiDevice, java.lang.String)
    {
        androidx.test.uiautomator.UiDevice$2 r0;
        androidx.test.uiautomator.UiDevice r1;
        java.lang.String r2;

        r0 := @this: androidx.test.uiautomator.UiDevice$2;

        r1 := @parameter0: androidx.test.uiautomator.UiDevice;

        r2 := @parameter1: java.lang.String;

        r0.<androidx.test.uiautomator.UiDevice$2: androidx.test.uiautomator.UiDevice this$0> = r1;

        r0.<androidx.test.uiautomator.UiDevice$2: java.lang.String val$packageName> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean accept(android.view.accessibility.AccessibilityEvent)
    {
        androidx.test.uiautomator.UiDevice$2 r0;
        android.view.accessibility.AccessibilityEvent r1;
        int $i0;
        java.lang.String $r2, $r3;
        java.lang.CharSequence $r4;
        boolean $z0, $z1;

        r0 := @this: androidx.test.uiautomator.UiDevice$2;

        r1 := @parameter0: android.view.accessibility.AccessibilityEvent;

        $i0 = virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: int getEventType()>();

        if $i0 != 2048 goto label4;

        $r2 = r0.<androidx.test.uiautomator.UiDevice$2: java.lang.String val$packageName>;

        if $r2 == null goto label1;

        $r3 = r0.<androidx.test.uiautomator.UiDevice$2: java.lang.String val$packageName>;

        $r4 = virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: java.lang.CharSequence getPackageName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        return 0;
    }

androidx.test.uiautomator.UiDevice$EventForwardingFilter
<androidx.test.uiautomator.UiDevice$EventForwardingFilter: androidx.test.uiautomator.EventCondition mCondition>
    public void <init>(androidx.test.uiautomator.EventCondition)
    {
        androidx.test.uiautomator.UiDevice$EventForwardingFilter r0;
        androidx.test.uiautomator.EventCondition r1;

        r0 := @this: androidx.test.uiautomator.UiDevice$EventForwardingFilter;

        r1 := @parameter0: androidx.test.uiautomator.EventCondition;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.test.uiautomator.UiDevice$EventForwardingFilter: androidx.test.uiautomator.EventCondition mCondition> = r1;

        return;
    }

    public boolean accept(android.view.accessibility.AccessibilityEvent)
    {
        androidx.test.uiautomator.UiDevice$EventForwardingFilter r0;
        android.view.accessibility.AccessibilityEvent r1;
        androidx.test.uiautomator.EventCondition $r2;
        java.lang.Boolean $r3, $r4;
        boolean $z0;

        r0 := @this: androidx.test.uiautomator.UiDevice$EventForwardingFilter;

        r1 := @parameter0: android.view.accessibility.AccessibilityEvent;

        $r3 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $r2 = r0.<androidx.test.uiautomator.UiDevice$EventForwardingFilter: androidx.test.uiautomator.EventCondition mCondition>;

        $r4 = virtualinvoke $r2.<androidx.test.uiautomator.EventCondition: java.lang.Boolean apply(android.view.accessibility.AccessibilityEvent)>(r1);

        $z0 = virtualinvoke $r3.<java.lang.Boolean: boolean equals(java.lang.Object)>($r4);

        return $z0;
    }

