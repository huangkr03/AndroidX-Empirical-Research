org.junit.runners.BlockJUnit4ClassRunner
<org.junit.runners.BlockJUnit4ClassRunner: java.util.concurrent.ConcurrentHashMap methodDescriptions>
    public void <init>(java.lang.Class) throws org.junit.runners.model.InitializationError
    {
        org.junit.runners.BlockJUnit4ClassRunner $r0;
        java.lang.Class $r1;
        java.util.concurrent.ConcurrentHashMap $r2;

        $r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        $r1 := @parameter0: java.lang.Class;

        specialinvoke $r0.<org.junit.runners.ParentRunner: void <init>(java.lang.Class)>($r1);

        $r2 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        $r0.<org.junit.runners.BlockJUnit4ClassRunner: java.util.concurrent.ConcurrentHashMap methodDescriptions> = $r2;

        return;
    }

    private boolean expectsException(org.junit.Test)
    {
        org.junit.runners.BlockJUnit4ClassRunner $r0;
        org.junit.Test $r1;
        java.lang.Class $r2;

        $r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        $r1 := @parameter0: org.junit.Test;

        $r2 = specialinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: java.lang.Class getExpectedException(org.junit.Test)>($r1);

        if $r2 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    private java.lang.Class getExpectedException(org.junit.Test)
    {
        org.junit.runners.BlockJUnit4ClassRunner $r0;
        org.junit.Test $r1;
        java.lang.Class $r2;

        $r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        $r1 := @parameter0: org.junit.Test;

        if $r1 == null goto label1;

        $r2 = interfaceinvoke $r1.<org.junit.Test: java.lang.Class expected()>();

        if $r2 != class "Lorg/junit/Test$None;" goto label2;

     label1:
        return null;

     label2:
        $r2 = interfaceinvoke $r1.<org.junit.Test: java.lang.Class expected()>();

        return $r2;
    }

    private java.util.List getMethodRules(java.lang.Object)
    {
        org.junit.runners.BlockJUnit4ClassRunner $r0;
        java.lang.Object $r1;
        java.util.List $r2;

        $r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: java.util.List rules(java.lang.Object)>($r1);

        return $r2;
    }

    private long getTimeout(org.junit.Test)
    {
        org.junit.runners.BlockJUnit4ClassRunner $r0;
        org.junit.Test $r1;
        long $l0;

        $r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        $r1 := @parameter0: org.junit.Test;

        if $r1 != null goto label1;

        return 0L;

     label1:
        $l0 = interfaceinvoke $r1.<org.junit.Test: long timeout()>();

        return $l0;
    }

    private boolean hasOneConstructor()
    {
        org.junit.runners.BlockJUnit4ClassRunner $r0;
        org.junit.runners.model.TestClass $r1;
        java.lang.Class $r2;
        java.lang.reflect.Constructor[] $r3;
        int $i0;

        $r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        $r1 = virtualinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.TestClass getTestClass()>();

        $r2 = virtualinvoke $r1.<org.junit.runners.model.TestClass: java.lang.Class getJavaClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>();

        $i0 = lengthof $r3;

        if $i0 != 1 goto label1;

        return 1;

     label1:
        return 0;
    }

    private void validateMethods(java.util.List)
    {
        org.junit.runners.BlockJUnit4ClassRunner $r0;
        java.util.List $r1;
        org.junit.internal.runners.rules.RuleMemberValidator $r2;
        org.junit.runners.model.TestClass $r3;

        $r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        $r1 := @parameter0: java.util.List;

        $r2 = <org.junit.internal.runners.rules.RuleMemberValidator: org.junit.internal.runners.rules.RuleMemberValidator RULE_METHOD_VALIDATOR>;

        $r3 = virtualinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.TestClass getTestClass()>();

        virtualinvoke $r2.<org.junit.internal.runners.rules.RuleMemberValidator: void validate(org.junit.runners.model.TestClass,java.util.List)>($r3, $r1);

        return;
    }

    private org.junit.runners.model.Statement withMethodRules(org.junit.runners.model.FrameworkMethod, java.util.List, java.lang.Object, org.junit.runners.model.Statement)
    {
        org.junit.runners.BlockJUnit4ClassRunner $r0;
        org.junit.runners.model.FrameworkMethod $r1;
        java.util.List $r2, $r5;
        java.lang.Object $r3, $r7;
        org.junit.runners.model.Statement $r4;
        java.util.Iterator $r6;
        boolean $z0;
        org.junit.rules.MethodRule $r8;

        $r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        $r1 := @parameter0: org.junit.runners.model.FrameworkMethod;

        $r2 := @parameter1: java.util.List;

        $r3 := @parameter2: java.lang.Object;

        $r4 := @parameter3: org.junit.runners.model.Statement;

        $r5 = specialinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: java.util.List getMethodRules(java.lang.Object)>($r3);

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (org.junit.rules.MethodRule) $r7;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>($r8);

        if $z0 != 0 goto label1;

        $r4 = interfaceinvoke $r8.<org.junit.rules.MethodRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runners.model.FrameworkMethod,java.lang.Object)>($r4, $r1, $r3);

        goto label1;

     label2:
        return $r4;
    }

    private org.junit.runners.model.Statement withRules(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)
    {
        org.junit.runners.BlockJUnit4ClassRunner $r0;
        org.junit.runners.model.FrameworkMethod $r1;
        java.lang.Object $r2;
        org.junit.runners.model.Statement $r3;
        java.util.List $r4;

        $r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        $r1 := @parameter0: org.junit.runners.model.FrameworkMethod;

        $r2 := @parameter1: java.lang.Object;

        $r3 := @parameter2: org.junit.runners.model.Statement;

        $r4 = virtualinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: java.util.List getTestRules(java.lang.Object)>($r2);

        $r3 = specialinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.Statement withMethodRules(org.junit.runners.model.FrameworkMethod,java.util.List,java.lang.Object,org.junit.runners.model.Statement)>($r1, $r4, $r2, $r3);

        $r3 = specialinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.Statement withTestRules(org.junit.runners.model.FrameworkMethod,java.util.List,org.junit.runners.model.Statement)>($r1, $r4, $r3);

        return $r3;
    }

    private org.junit.runners.model.Statement withTestRules(org.junit.runners.model.FrameworkMethod, java.util.List, org.junit.runners.model.Statement)
    {
        org.junit.runners.BlockJUnit4ClassRunner $r0;
        org.junit.runners.model.FrameworkMethod $r1;
        java.util.List $r2;
        org.junit.runners.model.Statement $r3;
        boolean $z0;
        org.junit.rules.RunRules $r4;
        org.junit.runner.Description $r5;

        $r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        $r1 := @parameter0: org.junit.runners.model.FrameworkMethod;

        $r2 := @parameter1: java.util.List;

        $r3 := @parameter2: org.junit.runners.model.Statement;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return $r3;

     label1:
        $r4 = new org.junit.rules.RunRules;

        $r5 = virtualinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runner.Description describeChild(org.junit.runners.model.FrameworkMethod)>($r1);

        specialinvoke $r4.<org.junit.rules.RunRules: void <init>(org.junit.runners.model.Statement,java.lang.Iterable,org.junit.runner.Description)>($r3, $r2, $r5);

        return $r4;
    }

    protected void collectInitializationErrors(java.util.List)
    {
        org.junit.runners.BlockJUnit4ClassRunner $r0;
        java.util.List $r1;

        $r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        $r1 := @parameter0: java.util.List;

        specialinvoke $r0.<org.junit.runners.ParentRunner: void collectInitializationErrors(java.util.List)>($r1);

        virtualinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: void validateNoNonStaticInnerClass(java.util.List)>($r1);

        virtualinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: void validateConstructor(java.util.List)>($r1);

        virtualinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: void validateInstanceMethods(java.util.List)>($r1);

        virtualinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: void validateFields(java.util.List)>($r1);

        specialinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: void validateMethods(java.util.List)>($r1);

        return;
    }

    protected java.util.List computeTestMethods()
    {
        org.junit.runners.BlockJUnit4ClassRunner $r0;
        org.junit.runners.model.TestClass $r1;
        java.util.List $r2;

        $r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        $r1 = virtualinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.TestClass getTestClass()>();

        $r2 = virtualinvoke $r1.<org.junit.runners.model.TestClass: java.util.List getAnnotatedMethods(java.lang.Class)>(class "Lorg/junit/Test;");

        return $r2;
    }

    protected java.lang.Object createTest() throws java.lang.Exception
    {
        org.junit.runners.BlockJUnit4ClassRunner $r0;
        org.junit.runners.model.TestClass $r1;
        java.lang.reflect.Constructor $r2;
        java.lang.Object[] $r3;
        java.lang.Object $r4;

        $r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        $r1 = virtualinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.TestClass getTestClass()>();

        $r2 = virtualinvoke $r1.<org.junit.runners.model.TestClass: java.lang.reflect.Constructor getOnlyConstructor()>();

        $r3 = newarray (java.lang.Object)[0];

        $r4 = virtualinvoke $r2.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r3);

        return $r4;
    }

    protected volatile org.junit.runner.Description describeChild(java.lang.Object)
    {
        org.junit.runners.BlockJUnit4ClassRunner $r0;
        org.junit.runner.Description $r1;
        java.lang.Object $r2;
        org.junit.runners.model.FrameworkMethod $r3;

        $r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        $r2 := @parameter0: java.lang.Object;

        $r3 = (org.junit.runners.model.FrameworkMethod) $r2;

        $r1 = virtualinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runner.Description describeChild(org.junit.runners.model.FrameworkMethod)>($r3);

        return $r1;
    }

    protected org.junit.runner.Description describeChild(org.junit.runners.model.FrameworkMethod)
    {
        org.junit.runners.BlockJUnit4ClassRunner $r0;
        org.junit.runners.model.FrameworkMethod $r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.lang.Object $r3;
        org.junit.runner.Description $r4;
        org.junit.runners.model.TestClass $r5;
        java.lang.Class $r6;
        java.lang.String $r7;
        java.lang.'annotation'.Annotation[] $r8;

        $r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        $r1 := @parameter0: org.junit.runners.model.FrameworkMethod;

        $r2 = $r0.<org.junit.runners.BlockJUnit4ClassRunner: java.util.concurrent.ConcurrentHashMap methodDescriptions>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (org.junit.runner.Description) $r3;

        if $r4 != null goto label1;

        $r5 = virtualinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.TestClass getTestClass()>();

        $r6 = virtualinvoke $r5.<org.junit.runners.model.TestClass: java.lang.Class getJavaClass()>();

        $r7 = virtualinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: java.lang.String testName(org.junit.runners.model.FrameworkMethod)>($r1);

        $r8 = virtualinvoke $r1.<org.junit.runners.model.FrameworkMethod: java.lang.'annotation'.Annotation[] getAnnotations()>();

        $r4 = staticinvoke <org.junit.runner.Description: org.junit.runner.Description createTestDescription(java.lang.Class,java.lang.String,java.lang.'annotation'.Annotation[])>($r6, $r7, $r8);

        $r2 = $r0.<org.junit.runners.BlockJUnit4ClassRunner: java.util.concurrent.ConcurrentHashMap methodDescriptions>;

        virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r1, $r4);

     label1:
        return $r4;
    }

    protected java.util.List getChildren()
    {
        org.junit.runners.BlockJUnit4ClassRunner $r0;
        java.util.List $r1;

        $r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        $r1 = virtualinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: java.util.List computeTestMethods()>();

        return $r1;
    }

    protected java.util.List getTestRules(java.lang.Object)
    {
        org.junit.runners.BlockJUnit4ClassRunner $r0;
        java.lang.Object $r1;
        org.junit.runners.model.TestClass $r2;
        java.util.List $r3, $r4;

        $r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.TestClass getTestClass()>();

        $r3 = virtualinvoke $r2.<org.junit.runners.model.TestClass: java.util.List getAnnotatedMethodValues(java.lang.Object,java.lang.Class,java.lang.Class)>($r1, class "Lorg/junit/Rule;", class "Lorg/junit/rules/TestRule;");

        $r2 = virtualinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.TestClass getTestClass()>();

        $r4 = virtualinvoke $r2.<org.junit.runners.model.TestClass: java.util.List getAnnotatedFieldValues(java.lang.Object,java.lang.Class,java.lang.Class)>($r1, class "Lorg/junit/Rule;", class "Lorg/junit/rules/TestRule;");

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>($r4);

        return $r3;
    }

    protected volatile boolean isIgnored(java.lang.Object)
    {
        org.junit.runners.BlockJUnit4ClassRunner $r0;
        boolean $z0;
        java.lang.Object $r1;
        org.junit.runners.model.FrameworkMethod $r2;

        $r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (org.junit.runners.model.FrameworkMethod) $r1;

        $z0 = virtualinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: boolean isIgnored(org.junit.runners.model.FrameworkMethod)>($r2);

        return $z0;
    }

    protected boolean isIgnored(org.junit.runners.model.FrameworkMethod)
    {
        org.junit.runners.BlockJUnit4ClassRunner $r0;
        org.junit.runners.model.FrameworkMethod $r1;
        java.lang.'annotation'.Annotation $r2;

        $r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        $r1 := @parameter0: org.junit.runners.model.FrameworkMethod;

        $r2 = virtualinvoke $r1.<org.junit.runners.model.FrameworkMethod: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/junit/Ignore;");

        if $r2 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    protected org.junit.runners.model.Statement methodBlock(org.junit.runners.model.FrameworkMethod)
    {
        org.junit.runners.BlockJUnit4ClassRunner $r0;
        org.junit.runners.model.FrameworkMethod $r1;
        org.junit.runners.BlockJUnit4ClassRunner$2 $r2;
        java.lang.Object $r3;
        org.junit.runners.model.Statement $r4;
        java.lang.Throwable $r5;
        org.junit.internal.runners.statements.Fail $r6;

        $r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        $r1 := @parameter0: org.junit.runners.model.FrameworkMethod;

        $r2 = new org.junit.runners.BlockJUnit4ClassRunner$2;

     label1:
        specialinvoke $r2.<org.junit.runners.BlockJUnit4ClassRunner$2: void <init>(org.junit.runners.BlockJUnit4ClassRunner)>($r0);

        $r3 = virtualinvoke $r2.<org.junit.runners.BlockJUnit4ClassRunner$2: java.lang.Object run()>();

     label2:
        $r4 = virtualinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.Statement methodInvoker(org.junit.runners.model.FrameworkMethod,java.lang.Object)>($r1, $r3);

        $r4 = virtualinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.Statement possiblyExpectingExceptions(org.junit.runners.model.FrameworkMethod,java.lang.Object,org.junit.runners.model.Statement)>($r1, $r3, $r4);

        $r4 = virtualinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.Statement withPotentialTimeout(org.junit.runners.model.FrameworkMethod,java.lang.Object,org.junit.runners.model.Statement)>($r1, $r3, $r4);

        $r4 = virtualinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.Statement withBefores(org.junit.runners.model.FrameworkMethod,java.lang.Object,org.junit.runners.model.Statement)>($r1, $r3, $r4);

        $r4 = virtualinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.Statement withAfters(org.junit.runners.model.FrameworkMethod,java.lang.Object,org.junit.runners.model.Statement)>($r1, $r3, $r4);

        $r4 = specialinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.Statement withRules(org.junit.runners.model.FrameworkMethod,java.lang.Object,org.junit.runners.model.Statement)>($r1, $r3, $r4);

        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.junit.internal.runners.statements.Fail;

        specialinvoke $r6.<org.junit.internal.runners.statements.Fail: void <init>(java.lang.Throwable)>($r5);

        return $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected org.junit.runners.model.Statement methodInvoker(org.junit.runners.model.FrameworkMethod, java.lang.Object)
    {
        org.junit.runners.BlockJUnit4ClassRunner $r0;
        org.junit.runners.model.FrameworkMethod $r1;
        java.lang.Object $r2;
        org.junit.internal.runners.statements.InvokeMethod $r3;

        $r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        $r1 := @parameter0: org.junit.runners.model.FrameworkMethod;

        $r2 := @parameter1: java.lang.Object;

        $r3 = new org.junit.internal.runners.statements.InvokeMethod;

        specialinvoke $r3.<org.junit.internal.runners.statements.InvokeMethod: void <init>(org.junit.runners.model.FrameworkMethod,java.lang.Object)>($r1, $r2);

        return $r3;
    }

    protected org.junit.runners.model.Statement possiblyExpectingExceptions(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)
    {
        org.junit.runners.BlockJUnit4ClassRunner $r0;
        org.junit.runners.model.FrameworkMethod $r1;
        java.lang.Object $r2;
        org.junit.runners.model.Statement $r3;
        java.lang.'annotation'.Annotation $r4;
        org.junit.Test $r5;
        boolean $z0;
        org.junit.internal.runners.statements.ExpectException $r6;
        java.lang.Class $r7;

        $r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        $r1 := @parameter0: org.junit.runners.model.FrameworkMethod;

        $r2 := @parameter1: java.lang.Object;

        $r3 := @parameter2: org.junit.runners.model.Statement;

        $r4 = virtualinvoke $r1.<org.junit.runners.model.FrameworkMethod: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/junit/Test;");

        $r5 = (org.junit.Test) $r4;

        $z0 = specialinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: boolean expectsException(org.junit.Test)>($r5);

        if $z0 == 0 goto label1;

        $r6 = new org.junit.internal.runners.statements.ExpectException;

        $r7 = specialinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: java.lang.Class getExpectedException(org.junit.Test)>($r5);

        specialinvoke $r6.<org.junit.internal.runners.statements.ExpectException: void <init>(org.junit.runners.model.Statement,java.lang.Class)>($r3, $r7);

        return $r6;

     label1:
        return $r3;
    }

    protected java.util.List rules(java.lang.Object)
    {
        org.junit.runners.BlockJUnit4ClassRunner $r0;
        java.lang.Object $r1;
        org.junit.runners.model.TestClass $r2;
        java.util.List $r3, $r4;

        $r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.TestClass getTestClass()>();

        $r3 = virtualinvoke $r2.<org.junit.runners.model.TestClass: java.util.List getAnnotatedMethodValues(java.lang.Object,java.lang.Class,java.lang.Class)>($r1, class "Lorg/junit/Rule;", class "Lorg/junit/rules/MethodRule;");

        $r2 = virtualinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.TestClass getTestClass()>();

        $r4 = virtualinvoke $r2.<org.junit.runners.model.TestClass: java.util.List getAnnotatedFieldValues(java.lang.Object,java.lang.Class,java.lang.Class)>($r1, class "Lorg/junit/Rule;", class "Lorg/junit/rules/MethodRule;");

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>($r4);

        return $r3;
    }

    protected volatile void runChild(java.lang.Object, org.junit.runner.notification.RunNotifier)
    {
        org.junit.runners.BlockJUnit4ClassRunner $r0;
        org.junit.runner.notification.RunNotifier $r1;
        java.lang.Object $r2;
        org.junit.runners.model.FrameworkMethod $r3;

        $r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: org.junit.runner.notification.RunNotifier;

        $r3 = (org.junit.runners.model.FrameworkMethod) $r2;

        virtualinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: void runChild(org.junit.runners.model.FrameworkMethod,org.junit.runner.notification.RunNotifier)>($r3, $r1);

        return;
    }

    protected void runChild(org.junit.runners.model.FrameworkMethod, org.junit.runner.notification.RunNotifier)
    {
        org.junit.runners.BlockJUnit4ClassRunner $r0;
        org.junit.runners.model.FrameworkMethod $r1;
        org.junit.runner.notification.RunNotifier $r2;
        org.junit.runner.Description $r3;
        boolean $z0;
        org.junit.runners.BlockJUnit4ClassRunner$1 $r4;

        $r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        $r1 := @parameter0: org.junit.runners.model.FrameworkMethod;

        $r2 := @parameter1: org.junit.runner.notification.RunNotifier;

        $r3 = virtualinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runner.Description describeChild(org.junit.runners.model.FrameworkMethod)>($r1);

        $z0 = virtualinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: boolean isIgnored(org.junit.runners.model.FrameworkMethod)>($r1);

        if $z0 == 0 goto label1;

        virtualinvoke $r2.<org.junit.runner.notification.RunNotifier: void fireTestIgnored(org.junit.runner.Description)>($r3);

        return;

     label1:
        $r4 = new org.junit.runners.BlockJUnit4ClassRunner$1;

        specialinvoke $r4.<org.junit.runners.BlockJUnit4ClassRunner$1: void <init>(org.junit.runners.BlockJUnit4ClassRunner,org.junit.runners.model.FrameworkMethod)>($r0, $r1);

        virtualinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: void runLeaf(org.junit.runners.model.Statement,org.junit.runner.Description,org.junit.runner.notification.RunNotifier)>($r4, $r3, $r2);

        return;
    }

    protected java.lang.String testName(org.junit.runners.model.FrameworkMethod)
    {
        org.junit.runners.BlockJUnit4ClassRunner $r0;
        org.junit.runners.model.FrameworkMethod $r1;
        java.lang.String $r2;

        $r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        $r1 := @parameter0: org.junit.runners.model.FrameworkMethod;

        $r2 = virtualinvoke $r1.<org.junit.runners.model.FrameworkMethod: java.lang.String getName()>();

        return $r2;
    }

    protected void validateConstructor(java.util.List)
    {
        org.junit.runners.BlockJUnit4ClassRunner $r0;
        java.util.List $r1;

        $r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        $r1 := @parameter0: java.util.List;

        virtualinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: void validateOnlyOneConstructor(java.util.List)>($r1);

        virtualinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: void validateZeroArgConstructor(java.util.List)>($r1);

        return;
    }

    protected void validateFields(java.util.List)
    {
        org.junit.runners.BlockJUnit4ClassRunner $r0;
        java.util.List $r1;
        org.junit.internal.runners.rules.RuleMemberValidator $r2;
        org.junit.runners.model.TestClass $r3;

        $r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        $r1 := @parameter0: java.util.List;

        $r2 = <org.junit.internal.runners.rules.RuleMemberValidator: org.junit.internal.runners.rules.RuleMemberValidator RULE_VALIDATOR>;

        $r3 = virtualinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.TestClass getTestClass()>();

        virtualinvoke $r2.<org.junit.internal.runners.rules.RuleMemberValidator: void validate(org.junit.runners.model.TestClass,java.util.List)>($r3, $r1);

        return;
    }

    protected void validateInstanceMethods(java.util.List)
    {
        org.junit.runners.BlockJUnit4ClassRunner $r0;
        java.util.List $r1, $r2;
        int $i0;
        java.lang.Exception $r3;

        $r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        $r1 := @parameter0: java.util.List;

        virtualinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: void validatePublicVoidNoArgMethods(java.lang.Class,boolean,java.util.List)>(class "Lorg/junit/After;", 0, $r1);

        virtualinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: void validatePublicVoidNoArgMethods(java.lang.Class,boolean,java.util.List)>(class "Lorg/junit/Before;", 0, $r1);

        virtualinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: void validateTestMethods(java.util.List)>($r1);

        $r2 = virtualinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: java.util.List computeTestMethods()>();

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        $r3 = new java.lang.Exception;

        specialinvoke $r3.<java.lang.Exception: void <init>(java.lang.String)>("No runnable methods");

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r3);

     label1:
        return;
    }

    protected void validateNoNonStaticInnerClass(java.util.List)
    {
        org.junit.runners.BlockJUnit4ClassRunner $r0;
        java.util.List $r1;
        java.lang.StringBuilder $r2;
        org.junit.runners.model.TestClass $r3;
        boolean $z0;
        java.lang.String $r4, $r5;
        int $i0;
        java.lang.Exception $r6;

        $r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        $r1 := @parameter0: java.util.List;

        $r3 = virtualinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.TestClass getTestClass()>();

        $z0 = virtualinvoke $r3.<org.junit.runners.model.TestClass: boolean isANonStaticInnerClass()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.TestClass getTestClass()>();

        $r4 = virtualinvoke $r3.<org.junit.runners.model.TestClass: java.lang.String getName()>();

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i0 = $i0 + 31;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The inner class ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not static.");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = new java.lang.Exception;

        specialinvoke $r6.<java.lang.Exception: void <init>(java.lang.String)>($r4);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r6);

     label1:
        return;
    }

    protected void validateOnlyOneConstructor(java.util.List)
    {
        org.junit.runners.BlockJUnit4ClassRunner $r0;
        java.util.List $r1;
        java.lang.Exception $r2;
        boolean $z0;

        $r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        $r1 := @parameter0: java.util.List;

        $z0 = specialinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: boolean hasOneConstructor()>();

        if $z0 != 0 goto label1;

        $r2 = new java.lang.Exception;

        specialinvoke $r2.<java.lang.Exception: void <init>(java.lang.String)>("Test class should have exactly one public constructor");

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

     label1:
        return;
    }

    protected void validateTestMethods(java.util.List)
    {
        org.junit.runners.BlockJUnit4ClassRunner $r0;
        java.util.List $r1;

        $r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        $r1 := @parameter0: java.util.List;

        virtualinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: void validatePublicVoidNoArgMethods(java.lang.Class,boolean,java.util.List)>(class "Lorg/junit/Test;", 0, $r1);

        return;
    }

    protected void validateZeroArgConstructor(java.util.List)
    {
        org.junit.runners.BlockJUnit4ClassRunner $r0;
        java.util.List $r1;
        java.lang.Exception $r2;
        org.junit.runners.model.TestClass $r3;
        boolean $z0;
        java.lang.reflect.Constructor $r4;
        java.lang.Class[] $r5;
        int $i0;

        $r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        $r1 := @parameter0: java.util.List;

        $r3 = virtualinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.TestClass getTestClass()>();

        $z0 = virtualinvoke $r3.<org.junit.runners.model.TestClass: boolean isANonStaticInnerClass()>();

        if $z0 != 0 goto label1;

        $z0 = specialinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: boolean hasOneConstructor()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.TestClass getTestClass()>();

        $r4 = virtualinvoke $r3.<org.junit.runners.model.TestClass: java.lang.reflect.Constructor getOnlyConstructor()>();

        $r5 = virtualinvoke $r4.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r5;

        if $i0 == 0 goto label1;

        $r2 = new java.lang.Exception;

        specialinvoke $r2.<java.lang.Exception: void <init>(java.lang.String)>("Test class should have exactly one public zero-argument constructor");

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

     label1:
        return;
    }

    protected org.junit.runners.model.Statement withAfters(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)
    {
        org.junit.runners.BlockJUnit4ClassRunner $r0;
        org.junit.runners.model.FrameworkMethod $r1;
        java.lang.Object $r2;
        org.junit.runners.model.Statement $r3;
        org.junit.runners.model.TestClass $r4;
        java.util.List $r5;
        boolean $z0;
        org.junit.internal.runners.statements.RunAfters $r6;

        $r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        $r1 := @parameter0: org.junit.runners.model.FrameworkMethod;

        $r2 := @parameter1: java.lang.Object;

        $r3 := @parameter2: org.junit.runners.model.Statement;

        $r4 = virtualinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.TestClass getTestClass()>();

        $r5 = virtualinvoke $r4.<org.junit.runners.model.TestClass: java.util.List getAnnotatedMethods(java.lang.Class)>(class "Lorg/junit/After;");

        $z0 = interfaceinvoke $r5.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return $r3;

     label1:
        $r6 = new org.junit.internal.runners.statements.RunAfters;

        specialinvoke $r6.<org.junit.internal.runners.statements.RunAfters: void <init>(org.junit.runners.model.Statement,java.util.List,java.lang.Object)>($r3, $r5, $r2);

        return $r6;
    }

    protected org.junit.runners.model.Statement withBefores(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)
    {
        org.junit.runners.BlockJUnit4ClassRunner $r0;
        org.junit.runners.model.FrameworkMethod $r1;
        java.lang.Object $r2;
        org.junit.runners.model.Statement $r3;
        org.junit.runners.model.TestClass $r4;
        java.util.List $r5;
        boolean $z0;
        org.junit.internal.runners.statements.RunBefores $r6;

        $r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        $r1 := @parameter0: org.junit.runners.model.FrameworkMethod;

        $r2 := @parameter1: java.lang.Object;

        $r3 := @parameter2: org.junit.runners.model.Statement;

        $r4 = virtualinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.TestClass getTestClass()>();

        $r5 = virtualinvoke $r4.<org.junit.runners.model.TestClass: java.util.List getAnnotatedMethods(java.lang.Class)>(class "Lorg/junit/Before;");

        $z0 = interfaceinvoke $r5.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return $r3;

     label1:
        $r6 = new org.junit.internal.runners.statements.RunBefores;

        specialinvoke $r6.<org.junit.internal.runners.statements.RunBefores: void <init>(org.junit.runners.model.Statement,java.util.List,java.lang.Object)>($r3, $r5, $r2);

        return $r6;
    }

    protected org.junit.runners.model.Statement withPotentialTimeout(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)
    {
        org.junit.runners.BlockJUnit4ClassRunner $r0;
        org.junit.runners.model.FrameworkMethod $r1;
        java.lang.Object $r2;
        java.util.concurrent.TimeUnit $r3;
        org.junit.runners.model.Statement $r4;
        java.lang.'annotation'.Annotation $r5;
        org.junit.Test $r6;
        long $l0;
        byte $b1;
        org.junit.internal.runners.statements.FailOnTimeout$Builder $r7;
        org.junit.internal.runners.statements.FailOnTimeout $r8;

        $r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        $r1 := @parameter0: org.junit.runners.model.FrameworkMethod;

        $r2 := @parameter1: java.lang.Object;

        $r4 := @parameter2: org.junit.runners.model.Statement;

        $r5 = virtualinvoke $r1.<org.junit.runners.model.FrameworkMethod: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/junit/Test;");

        $r6 = (org.junit.Test) $r5;

        $l0 = specialinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner: long getTimeout(org.junit.Test)>($r6);

        $b1 = $l0 cmp 0L;

        if $b1 > 0 goto label1;

        return $r4;

     label1:
        $r7 = staticinvoke <org.junit.internal.runners.statements.FailOnTimeout: org.junit.internal.runners.statements.FailOnTimeout$Builder builder()>();

        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r7 = virtualinvoke $r7.<org.junit.internal.runners.statements.FailOnTimeout$Builder: org.junit.internal.runners.statements.FailOnTimeout$Builder withTimeout(long,java.util.concurrent.TimeUnit)>($l0, $r3);

        $r8 = virtualinvoke $r7.<org.junit.internal.runners.statements.FailOnTimeout$Builder: org.junit.internal.runners.statements.FailOnTimeout build(org.junit.runners.model.Statement)>($r4);

        return $r8;
    }

org.junit.runners.BlockJUnit4ClassRunner$1
<org.junit.runners.BlockJUnit4ClassRunner$1: org.junit.runners.BlockJUnit4ClassRunner this$0>
<org.junit.runners.BlockJUnit4ClassRunner$1: org.junit.runners.model.FrameworkMethod val$method>
    void <init>(org.junit.runners.BlockJUnit4ClassRunner, org.junit.runners.model.FrameworkMethod)
    {
        org.junit.runners.BlockJUnit4ClassRunner$1 $r0;
        org.junit.runners.BlockJUnit4ClassRunner $r1;
        org.junit.runners.model.FrameworkMethod $r2;

        $r0 := @this: org.junit.runners.BlockJUnit4ClassRunner$1;

        $r1 := @parameter0: org.junit.runners.BlockJUnit4ClassRunner;

        $r2 := @parameter1: org.junit.runners.model.FrameworkMethod;

        $r0.<org.junit.runners.BlockJUnit4ClassRunner$1: org.junit.runners.BlockJUnit4ClassRunner this$0> = $r1;

        $r0.<org.junit.runners.BlockJUnit4ClassRunner$1: org.junit.runners.model.FrameworkMethod val$method> = $r2;

        specialinvoke $r0.<org.junit.runners.model.Statement: void <init>()>();

        return;
    }

    public void evaluate() throws java.lang.Throwable
    {
        org.junit.runners.BlockJUnit4ClassRunner$1 $r0;
        org.junit.runners.model.FrameworkMethod $r1;
        org.junit.runners.model.Statement $r2;
        org.junit.runners.BlockJUnit4ClassRunner $r3;

        $r0 := @this: org.junit.runners.BlockJUnit4ClassRunner$1;

        $r3 = $r0.<org.junit.runners.BlockJUnit4ClassRunner$1: org.junit.runners.BlockJUnit4ClassRunner this$0>;

        $r1 = $r0.<org.junit.runners.BlockJUnit4ClassRunner$1: org.junit.runners.model.FrameworkMethod val$method>;

        $r2 = virtualinvoke $r3.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.Statement methodBlock(org.junit.runners.model.FrameworkMethod)>($r1);

        virtualinvoke $r2.<org.junit.runners.model.Statement: void evaluate()>();

        return;
    }

org.junit.runners.BlockJUnit4ClassRunner$2
<org.junit.runners.BlockJUnit4ClassRunner$2: org.junit.runners.BlockJUnit4ClassRunner this$0>
    void <init>(org.junit.runners.BlockJUnit4ClassRunner)
    {
        org.junit.runners.BlockJUnit4ClassRunner$2 $r0;
        org.junit.runners.BlockJUnit4ClassRunner $r1;

        $r0 := @this: org.junit.runners.BlockJUnit4ClassRunner$2;

        $r1 := @parameter0: org.junit.runners.BlockJUnit4ClassRunner;

        $r0.<org.junit.runners.BlockJUnit4ClassRunner$2: org.junit.runners.BlockJUnit4ClassRunner this$0> = $r1;

        specialinvoke $r0.<org.junit.internal.runners.model.ReflectiveCallable: void <init>()>();

        return;
    }

    protected java.lang.Object runReflectiveCall() throws java.lang.Throwable
    {
        org.junit.runners.BlockJUnit4ClassRunner$2 $r0;
        java.lang.Object $r1;
        org.junit.runners.BlockJUnit4ClassRunner $r2;

        $r0 := @this: org.junit.runners.BlockJUnit4ClassRunner$2;

        $r2 = $r0.<org.junit.runners.BlockJUnit4ClassRunner$2: org.junit.runners.BlockJUnit4ClassRunner this$0>;

        $r1 = virtualinvoke $r2.<org.junit.runners.BlockJUnit4ClassRunner: java.lang.Object createTest()>();

        return $r1;
    }

org.junit.runners.BlockJUnit4ClassRunner$RuleCollector-IA
org.junit.runners.BlockJUnit4ClassRunner$RuleCollector
<org.junit.runners.BlockJUnit4ClassRunner$RuleCollector: java.util.List result>
    private void <init>()
    {
        org.junit.runners.BlockJUnit4ClassRunner$RuleCollector $r0;
        java.util.ArrayList r1;
        java.util.List r2;

        $r0 := @this: org.junit.runners.BlockJUnit4ClassRunner$RuleCollector;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        r2 = (java.util.List) r1;

        $r0.<org.junit.runners.BlockJUnit4ClassRunner$RuleCollector: java.util.List result> = r2;

        return;
    }

    void <init>(org.junit.runners.BlockJUnit4ClassRunner$RuleCollector-IA)
    {
        org.junit.runners.BlockJUnit4ClassRunner$RuleCollector $r0;
        org.junit.runners.BlockJUnit4ClassRunner$RuleCollector-IA $r1;

        $r0 := @this: org.junit.runners.BlockJUnit4ClassRunner$RuleCollector;

        $r1 := @parameter0: org.junit.runners.BlockJUnit4ClassRunner$RuleCollector-IA;

        specialinvoke $r0.<org.junit.runners.BlockJUnit4ClassRunner$RuleCollector: void <init>()>();

        return;
    }

    public void accept(org.junit.runners.model.FrameworkMember, java.lang.Object)
    {
        org.junit.runners.BlockJUnit4ClassRunner$RuleCollector $r0;
        java.lang.Object $r1, $r6;
        org.junit.runners.model.FrameworkMember $r2;
        java.lang.'annotation'.Annotation $r3;
        org.junit.Rule $r4;
        java.lang.ThreadLocal $r5;
        org.junit.runners.RuleContainer $r7;
        int $i0;
        java.util.List $r8;

        $r0 := @this: org.junit.runners.BlockJUnit4ClassRunner$RuleCollector;

        $r2 := @parameter0: org.junit.runners.model.FrameworkMember;

        $r1 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke $r2.<org.junit.runners.model.FrameworkMember: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/junit/Rule;");

        $r4 = (org.junit.Rule) $r3;

        if $r4 == null goto label1;

        $r5 = staticinvoke <org.junit.runners.BlockJUnit4ClassRunner: java.lang.ThreadLocal '-$$Nest$sfgetCURRENT_RULE_CONTAINER'()>();

        $r6 = virtualinvoke $r5.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r7 = (org.junit.runners.RuleContainer) $r6;

        if $r7 == null goto label1;

        $i0 = interfaceinvoke $r4.<org.junit.Rule: int order()>();

        virtualinvoke $r7.<org.junit.runners.RuleContainer: void setOrder(java.lang.Object,int)>($r1, $i0);

     label1:
        $r8 = $r0.<org.junit.runners.BlockJUnit4ClassRunner$RuleCollector: java.util.List result>;

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }

