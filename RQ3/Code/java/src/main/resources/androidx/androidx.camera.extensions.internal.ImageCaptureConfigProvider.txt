androidx.camera.extensions.internal.ImageCaptureConfigProvider
<androidx.camera.extensions.internal.ImageCaptureConfigProvider: java.lang.String TAG>
<androidx.camera.extensions.internal.ImageCaptureConfigProvider: androidx.camera.core.impl.Config$Option OPTION_IMAGE_CAPTURE_CONFIG_PROVIDER_MODE>
<androidx.camera.extensions.internal.ImageCaptureConfigProvider: androidx.camera.extensions.internal.VendorExtender mVendorExtender>
<androidx.camera.extensions.internal.ImageCaptureConfigProvider: android.content.Context mContext>
<androidx.camera.extensions.internal.ImageCaptureConfigProvider: int mEffectMode>
    public void <init>(int, androidx.camera.extensions.internal.VendorExtender, android.content.Context)
    {
        androidx.camera.extensions.internal.ImageCaptureConfigProvider r0;
        int i0;
        androidx.camera.extensions.internal.VendorExtender r1;
        android.content.Context r2;

        r0 := @this: androidx.camera.extensions.internal.ImageCaptureConfigProvider;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.camera.extensions.internal.VendorExtender;

        r2 := @parameter2: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.extensions.internal.ImageCaptureConfigProvider: int mEffectMode> = i0;

        r0.<androidx.camera.extensions.internal.ImageCaptureConfigProvider: androidx.camera.extensions.internal.VendorExtender mVendorExtender> = r1;

        r0.<androidx.camera.extensions.internal.ImageCaptureConfigProvider: android.content.Context mContext> = r2;

        return;
    }

    public androidx.camera.core.impl.ImageCaptureConfig getConfig()
    {
        androidx.camera.extensions.internal.ImageCaptureConfigProvider r0;
        androidx.camera.core.ImageCapture$Builder r1, $r2;
        android.content.Context $r3;
        androidx.camera.extensions.internal.VendorExtender $r4;
        int $i0;
        androidx.camera.core.impl.ImageCaptureConfig $r5;

        r0 := @this: androidx.camera.extensions.internal.ImageCaptureConfigProvider;

        $r2 = new androidx.camera.core.ImageCapture$Builder;

        specialinvoke $r2.<androidx.camera.core.ImageCapture$Builder: void <init>()>();

        r1 = $r2;

        $i0 = r0.<androidx.camera.extensions.internal.ImageCaptureConfigProvider: int mEffectMode>;

        $r4 = r0.<androidx.camera.extensions.internal.ImageCaptureConfigProvider: androidx.camera.extensions.internal.VendorExtender mVendorExtender>;

        $r3 = r0.<androidx.camera.extensions.internal.ImageCaptureConfigProvider: android.content.Context mContext>;

        virtualinvoke r0.<androidx.camera.extensions.internal.ImageCaptureConfigProvider: void updateBuilderConfig(androidx.camera.core.ImageCapture$Builder,int,androidx.camera.extensions.internal.VendorExtender,android.content.Context)>(r1, $i0, $r4, $r3);

        $r5 = virtualinvoke r1.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.ImageCaptureConfig getUseCaseConfig()>();

        return $r5;
    }

    void updateBuilderConfig(androidx.camera.core.ImageCapture$Builder, int, androidx.camera.extensions.internal.VendorExtender, android.content.Context)
    {
        androidx.camera.extensions.internal.ImageCaptureConfigProvider r0;
        androidx.camera.core.ImageCapture$Builder r1;
        int i0, $i1, $i2;
        androidx.camera.extensions.internal.VendorExtender r2;
        android.content.Context r3;
        androidx.camera.extensions.impl.CaptureProcessorImpl r4;
        androidx.camera.extensions.internal.ImageCaptureConfigProvider$ImageCaptureEventAdapter r5, r25;
        boolean $z0;
        androidx.camera.extensions.internal.BasicVendorExtender $r7;
        java.lang.Object[] $r11;
        androidx.camera.extensions.impl.ImageCaptureExtenderImpl r18;
        androidx.camera.extensions.internal.AdaptingCaptureProcessor r19, r24;
        androidx.camera.core.impl.MutableConfig $r20;
        androidx.camera.core.impl.Config$Option $r21;
        java.lang.Integer $r22;
        java.util.List r23;
        androidx.camera.camera2.impl.Camera2ImplConfig$Extender r26;
        androidx.camera.camera2.impl.CameraEventCallbacks r27;
        androidx.camera.camera2.impl.CameraEventCallback[] r28;

        r0 := @this: androidx.camera.extensions.internal.ImageCaptureConfigProvider;

        r1 := @parameter0: androidx.camera.core.ImageCapture$Builder;

        i0 := @parameter1: int;

        r2 := @parameter2: androidx.camera.extensions.internal.VendorExtender;

        r3 := @parameter3: android.content.Context;

        $z0 = r2 instanceof androidx.camera.extensions.internal.BasicVendorExtender;

        if $z0 == 0 goto label4;

        $r7 = (androidx.camera.extensions.internal.BasicVendorExtender) r2;

        r18 = virtualinvoke $r7.<androidx.camera.extensions.internal.BasicVendorExtender: androidx.camera.extensions.impl.ImageCaptureExtenderImpl getImageCaptureExtenderImpl()>();

        if r18 == null goto label3;

        r4 = interfaceinvoke r18.<androidx.camera.extensions.impl.ImageCaptureExtenderImpl: androidx.camera.extensions.impl.CaptureProcessorImpl getCaptureProcessor()>();

        r19 = null;

        if r4 == null goto label1;

        r24 = new androidx.camera.extensions.internal.AdaptingCaptureProcessor;

        specialinvoke r24.<androidx.camera.extensions.internal.AdaptingCaptureProcessor: void <init>(androidx.camera.extensions.impl.CaptureProcessorImpl)>(r4);

        r19 = r24;

        virtualinvoke r1.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.ImageCapture$Builder setCaptureProcessor(androidx.camera.core.impl.CaptureProcessor)>(r19);

     label1:
        $i1 = interfaceinvoke r18.<androidx.camera.extensions.impl.ImageCaptureExtenderImpl: int getMaxCaptureStage()>();

        if $i1 <= 0 goto label2;

        $i2 = interfaceinvoke r18.<androidx.camera.extensions.impl.ImageCaptureExtenderImpl: int getMaxCaptureStage()>();

        virtualinvoke r1.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.ImageCapture$Builder setMaxCaptureStages(int)>($i2);

     label2:
        r25 = new androidx.camera.extensions.internal.ImageCaptureConfigProvider$ImageCaptureEventAdapter;

        specialinvoke r25.<androidx.camera.extensions.internal.ImageCaptureConfigProvider$ImageCaptureEventAdapter: void <init>(androidx.camera.extensions.impl.ImageCaptureExtenderImpl,android.content.Context,androidx.camera.extensions.internal.VendorProcessor)>(r18, r3, r19);

        r5 = r25;

        r26 = new androidx.camera.camera2.impl.Camera2ImplConfig$Extender;

        specialinvoke r26.<androidx.camera.camera2.impl.Camera2ImplConfig$Extender: void <init>(androidx.camera.core.ExtendableBuilder)>(r1);

        r27 = new androidx.camera.camera2.impl.CameraEventCallbacks;

        $r11 = newarray (androidx.camera.camera2.impl.CameraEventCallback)[1];

        $r11[0] = r5;

        r28 = (androidx.camera.camera2.impl.CameraEventCallback[]) $r11;

        specialinvoke r27.<androidx.camera.camera2.impl.CameraEventCallbacks: void <init>(androidx.camera.camera2.impl.CameraEventCallback[])>(r28);

        virtualinvoke r26.<androidx.camera.camera2.impl.Camera2ImplConfig$Extender: androidx.camera.camera2.impl.Camera2ImplConfig$Extender setCameraEventCallback(androidx.camera.camera2.impl.CameraEventCallbacks)>(r27);

        virtualinvoke r1.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.ImageCapture$Builder setUseCaseEventCallback(androidx.camera.core.UseCase$EventCallback)>(r5);

        virtualinvoke r1.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.ImageCapture$Builder setCaptureBundle(androidx.camera.core.impl.CaptureBundle)>(r5);

        goto label4;

     label3:
        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String)>("ImageCaptureConfigProvider", "ImageCaptureExtenderImpl is null!");

     label4:
        $r20 = virtualinvoke r1.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r21 = <androidx.camera.extensions.internal.ImageCaptureConfigProvider: androidx.camera.core.impl.Config$Option OPTION_IMAGE_CAPTURE_CONFIG_PROVIDER_MODE>;

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r20.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r21, $r22);

        r23 = interfaceinvoke r2.<androidx.camera.extensions.internal.VendorExtender: java.util.List getSupportedCaptureOutputResolutions()>();

        virtualinvoke r1.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.ImageCapture$Builder setSupportedResolutions(java.util.List)>(r23);

        return;
    }

    public volatile androidx.camera.core.impl.Config getConfig()
    {
        androidx.camera.extensions.internal.ImageCaptureConfigProvider r0;
        androidx.camera.core.impl.ImageCaptureConfig $r1;

        r0 := @this: androidx.camera.extensions.internal.ImageCaptureConfigProvider;

        $r1 = virtualinvoke r0.<androidx.camera.extensions.internal.ImageCaptureConfigProvider: androidx.camera.core.impl.ImageCaptureConfig getConfig()>();

        return $r1;
    }

    static void <clinit>()
    {
        androidx.camera.core.impl.Config$Option $r0;

        $r0 = staticinvoke <androidx.camera.core.impl.Config$Option: androidx.camera.core.impl.Config$Option create(java.lang.String,java.lang.Class)>("camerax.extensions.imageCaptureConfigProvider.mode", class "Ljava/lang/Integer;");

        <androidx.camera.extensions.internal.ImageCaptureConfigProvider: androidx.camera.core.impl.Config$Option OPTION_IMAGE_CAPTURE_CONFIG_PROVIDER_MODE> = $r0;

        return;
    }

androidx.camera.extensions.internal.ImageCaptureConfigProvider$ImageCaptureEventAdapter
<androidx.camera.extensions.internal.ImageCaptureConfigProvider$ImageCaptureEventAdapter: androidx.camera.extensions.impl.ImageCaptureExtenderImpl mImpl>
<androidx.camera.extensions.internal.ImageCaptureConfigProvider$ImageCaptureEventAdapter: android.content.Context mContext>
<androidx.camera.extensions.internal.ImageCaptureConfigProvider$ImageCaptureEventAdapter: androidx.camera.extensions.internal.VendorProcessor mVendorCaptureProcessor>
<androidx.camera.extensions.internal.ImageCaptureConfigProvider$ImageCaptureEventAdapter: androidx.camera.core.CameraInfo mCameraInfo>
    void <init>(androidx.camera.extensions.impl.ImageCaptureExtenderImpl, android.content.Context, androidx.camera.extensions.internal.VendorProcessor)
    {
        androidx.camera.extensions.internal.ImageCaptureConfigProvider$ImageCaptureEventAdapter r0;
        androidx.camera.extensions.impl.ImageCaptureExtenderImpl r1;
        android.content.Context r2;
        androidx.camera.extensions.internal.VendorProcessor r3;

        r0 := @this: androidx.camera.extensions.internal.ImageCaptureConfigProvider$ImageCaptureEventAdapter;

        r1 := @parameter0: androidx.camera.extensions.impl.ImageCaptureExtenderImpl;

        r2 := @parameter1: android.content.Context;

        r3 := @parameter2: androidx.camera.extensions.internal.VendorProcessor;

        specialinvoke r0.<androidx.camera.camera2.impl.CameraEventCallback: void <init>()>();

        r0.<androidx.camera.extensions.internal.ImageCaptureConfigProvider$ImageCaptureEventAdapter: androidx.camera.extensions.impl.ImageCaptureExtenderImpl mImpl> = r1;

        r0.<androidx.camera.extensions.internal.ImageCaptureConfigProvider$ImageCaptureEventAdapter: android.content.Context mContext> = r2;

        r0.<androidx.camera.extensions.internal.ImageCaptureConfigProvider$ImageCaptureEventAdapter: androidx.camera.extensions.internal.VendorProcessor mVendorCaptureProcessor> = r3;

        return;
    }

    public void onAttach(androidx.camera.core.CameraInfo)
    {
        androidx.camera.extensions.internal.ImageCaptureConfigProvider$ImageCaptureEventAdapter r0;
        androidx.camera.core.CameraInfo r1;

        r0 := @this: androidx.camera.extensions.internal.ImageCaptureConfigProvider$ImageCaptureEventAdapter;

        r1 := @parameter0: androidx.camera.core.CameraInfo;

        r0.<androidx.camera.extensions.internal.ImageCaptureConfigProvider$ImageCaptureEventAdapter: androidx.camera.core.CameraInfo mCameraInfo> = r1;

        return;
    }

    public void onDetach()
    {
        androidx.camera.extensions.internal.ImageCaptureConfigProvider$ImageCaptureEventAdapter r0;

        r0 := @this: androidx.camera.extensions.internal.ImageCaptureConfigProvider$ImageCaptureEventAdapter;

        return;
    }

    public androidx.camera.core.impl.CaptureConfig onInitSession()
    {
        androidx.camera.extensions.internal.ImageCaptureConfigProvider$ImageCaptureEventAdapter r0;
        java.lang.String r1;
        android.hardware.camera2.CameraCharacteristics r2;
        androidx.camera.extensions.impl.CaptureStageImpl r3;
        androidx.camera.core.CameraInfo $r4, $r6, $r8;
        androidx.camera.camera2.interop.Camera2CameraInfo $r7;
        android.content.Context $r9;
        androidx.camera.extensions.impl.ImageCaptureExtenderImpl $r10, $r12;
        androidx.camera.extensions.internal.VendorProcessor $r11, $r15;
        int $i0;
        androidx.camera.extensions.internal.AdaptingCaptureStage $r13;
        androidx.camera.core.impl.CaptureConfig $r14;

        r0 := @this: androidx.camera.extensions.internal.ImageCaptureConfigProvider$ImageCaptureEventAdapter;

        $r4 = r0.<androidx.camera.extensions.internal.ImageCaptureConfigProvider$ImageCaptureEventAdapter: androidx.camera.core.CameraInfo mCameraInfo>;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r4, "ImageCaptureConfigProvider was not attached.");

        $r6 = r0.<androidx.camera.extensions.internal.ImageCaptureConfigProvider$ImageCaptureEventAdapter: androidx.camera.core.CameraInfo mCameraInfo>;

        $r7 = staticinvoke <androidx.camera.camera2.interop.Camera2CameraInfo: androidx.camera.camera2.interop.Camera2CameraInfo 'from'(androidx.camera.core.CameraInfo)>($r6);

        r1 = virtualinvoke $r7.<androidx.camera.camera2.interop.Camera2CameraInfo: java.lang.String getCameraId()>();

        $r8 = r0.<androidx.camera.extensions.internal.ImageCaptureConfigProvider$ImageCaptureEventAdapter: androidx.camera.core.CameraInfo mCameraInfo>;

        r2 = staticinvoke <androidx.camera.camera2.interop.Camera2CameraInfo: android.hardware.camera2.CameraCharacteristics extractCameraCharacteristics(androidx.camera.core.CameraInfo)>($r8);

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("ImageCaptureConfigProvider", "ImageCapture onInit");

        $r10 = r0.<androidx.camera.extensions.internal.ImageCaptureConfigProvider$ImageCaptureEventAdapter: androidx.camera.extensions.impl.ImageCaptureExtenderImpl mImpl>;

        $r9 = r0.<androidx.camera.extensions.internal.ImageCaptureConfigProvider$ImageCaptureEventAdapter: android.content.Context mContext>;

        interfaceinvoke $r10.<androidx.camera.extensions.impl.ImageCaptureExtenderImpl: void onInit(java.lang.String,android.hardware.camera2.CameraCharacteristics,android.content.Context)>(r1, r2, $r9);

        $r11 = r0.<androidx.camera.extensions.internal.ImageCaptureConfigProvider$ImageCaptureEventAdapter: androidx.camera.extensions.internal.VendorProcessor mVendorCaptureProcessor>;

        if $r11 == null goto label1;

        $r15 = r0.<androidx.camera.extensions.internal.ImageCaptureConfigProvider$ImageCaptureEventAdapter: androidx.camera.extensions.internal.VendorProcessor mVendorCaptureProcessor>;

        interfaceinvoke $r15.<androidx.camera.extensions.internal.VendorProcessor: void onInit()>();

     label1:
        $r12 = r0.<androidx.camera.extensions.internal.ImageCaptureConfigProvider$ImageCaptureEventAdapter: androidx.camera.extensions.impl.ImageCaptureExtenderImpl mImpl>;

        r3 = interfaceinvoke $r12.<androidx.camera.extensions.impl.ImageCaptureExtenderImpl: androidx.camera.extensions.impl.CaptureStageImpl onPresetSession()>();

        if r3 == null goto label3;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 28 goto label2;

        $r13 = new androidx.camera.extensions.internal.AdaptingCaptureStage;

        specialinvoke $r13.<androidx.camera.extensions.internal.AdaptingCaptureStage: void <init>(androidx.camera.extensions.impl.CaptureStageImpl)>(r3);

        $r14 = virtualinvoke $r13.<androidx.camera.extensions.internal.AdaptingCaptureStage: androidx.camera.core.impl.CaptureConfig getCaptureConfig()>();

        return $r14;

     label2:
        staticinvoke <androidx.camera.core.Logger: void w(java.lang.String,java.lang.String)>("ImageCaptureConfigProvider", "The CaptureRequest parameters returned from onPresetSession() will be passed to the camera device as part of the capture session via SessionConfiguration#setSessionParameters(CaptureRequest) which only supported from API level 28!");

     label3:
        return null;
    }

    public androidx.camera.core.impl.CaptureConfig onEnableSession()
    {
        androidx.camera.extensions.internal.ImageCaptureConfigProvider$ImageCaptureEventAdapter r0;
        androidx.camera.extensions.impl.CaptureStageImpl r1;
        androidx.camera.extensions.impl.ImageCaptureExtenderImpl $r2;
        androidx.camera.extensions.internal.AdaptingCaptureStage $r3;
        androidx.camera.core.impl.CaptureConfig $r4;

        r0 := @this: androidx.camera.extensions.internal.ImageCaptureConfigProvider$ImageCaptureEventAdapter;

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("ImageCaptureConfigProvider", "ImageCapture onEnableSession");

        $r2 = r0.<androidx.camera.extensions.internal.ImageCaptureConfigProvider$ImageCaptureEventAdapter: androidx.camera.extensions.impl.ImageCaptureExtenderImpl mImpl>;

        r1 = interfaceinvoke $r2.<androidx.camera.extensions.impl.ImageCaptureExtenderImpl: androidx.camera.extensions.impl.CaptureStageImpl onEnableSession()>();

        if r1 == null goto label1;

        $r3 = new androidx.camera.extensions.internal.AdaptingCaptureStage;

        specialinvoke $r3.<androidx.camera.extensions.internal.AdaptingCaptureStage: void <init>(androidx.camera.extensions.impl.CaptureStageImpl)>(r1);

        $r4 = virtualinvoke $r3.<androidx.camera.extensions.internal.AdaptingCaptureStage: androidx.camera.core.impl.CaptureConfig getCaptureConfig()>();

        return $r4;

     label1:
        return null;
    }

    public androidx.camera.core.impl.CaptureConfig onDisableSession()
    {
        androidx.camera.extensions.internal.ImageCaptureConfigProvider$ImageCaptureEventAdapter r0;
        androidx.camera.extensions.impl.CaptureStageImpl r1;
        androidx.camera.extensions.impl.ImageCaptureExtenderImpl $r2;
        androidx.camera.extensions.internal.AdaptingCaptureStage $r3;
        androidx.camera.core.impl.CaptureConfig $r4;

        r0 := @this: androidx.camera.extensions.internal.ImageCaptureConfigProvider$ImageCaptureEventAdapter;

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("ImageCaptureConfigProvider", "ImageCapture onDisableSession");

        $r2 = r0.<androidx.camera.extensions.internal.ImageCaptureConfigProvider$ImageCaptureEventAdapter: androidx.camera.extensions.impl.ImageCaptureExtenderImpl mImpl>;

        r1 = interfaceinvoke $r2.<androidx.camera.extensions.impl.ImageCaptureExtenderImpl: androidx.camera.extensions.impl.CaptureStageImpl onDisableSession()>();

        if r1 == null goto label1;

        $r3 = new androidx.camera.extensions.internal.AdaptingCaptureStage;

        specialinvoke $r3.<androidx.camera.extensions.internal.AdaptingCaptureStage: void <init>(androidx.camera.extensions.impl.CaptureStageImpl)>(r1);

        $r4 = virtualinvoke $r3.<androidx.camera.extensions.internal.AdaptingCaptureStage: androidx.camera.core.impl.CaptureConfig getCaptureConfig()>();

        return $r4;

     label1:
        return null;
    }

    public java.util.List getCaptureStages()
    {
        androidx.camera.extensions.internal.ImageCaptureConfigProvider$ImageCaptureEventAdapter r0;
        java.util.List r1;
        java.util.ArrayList r2, $r6;
        java.util.Iterator r3;
        androidx.camera.extensions.impl.CaptureStageImpl r4;
        androidx.camera.extensions.impl.ImageCaptureExtenderImpl $r5;
        boolean $z0, $z1;
        java.lang.Object $r7;
        androidx.camera.extensions.internal.AdaptingCaptureStage $r8;

        r0 := @this: androidx.camera.extensions.internal.ImageCaptureConfigProvider$ImageCaptureEventAdapter;

        $r5 = r0.<androidx.camera.extensions.internal.ImageCaptureConfigProvider$ImageCaptureEventAdapter: androidx.camera.extensions.impl.ImageCaptureExtenderImpl mImpl>;

        r1 = interfaceinvoke $r5.<androidx.camera.extensions.impl.ImageCaptureExtenderImpl: java.util.List getCaptureStages()>();

        if r1 == null goto label3;

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r2 = $r6;

        r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (androidx.camera.extensions.impl.CaptureStageImpl) $r7;

        $r8 = new androidx.camera.extensions.internal.AdaptingCaptureStage;

        specialinvoke $r8.<androidx.camera.extensions.internal.AdaptingCaptureStage: void <init>(androidx.camera.extensions.impl.CaptureStageImpl)>(r4);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

        goto label1;

     label2:
        return r2;

     label3:
        return null;
    }

    public void onDeInitSession()
    {
        androidx.camera.extensions.internal.ImageCaptureConfigProvider$ImageCaptureEventAdapter r0;
        androidx.camera.extensions.internal.VendorProcessor $r1, $r3;
        androidx.camera.extensions.impl.ImageCaptureExtenderImpl $r2;

        r0 := @this: androidx.camera.extensions.internal.ImageCaptureConfigProvider$ImageCaptureEventAdapter;

        $r1 = r0.<androidx.camera.extensions.internal.ImageCaptureConfigProvider$ImageCaptureEventAdapter: androidx.camera.extensions.internal.VendorProcessor mVendorCaptureProcessor>;

        if $r1 == null goto label1;

        $r3 = r0.<androidx.camera.extensions.internal.ImageCaptureConfigProvider$ImageCaptureEventAdapter: androidx.camera.extensions.internal.VendorProcessor mVendorCaptureProcessor>;

        interfaceinvoke $r3.<androidx.camera.extensions.internal.VendorProcessor: void onDeInit()>();

     label1:
        $r2 = r0.<androidx.camera.extensions.internal.ImageCaptureConfigProvider$ImageCaptureEventAdapter: androidx.camera.extensions.impl.ImageCaptureExtenderImpl mImpl>;

        interfaceinvoke $r2.<androidx.camera.extensions.impl.ImageCaptureExtenderImpl: void onDeInit()>();

        return;
    }

