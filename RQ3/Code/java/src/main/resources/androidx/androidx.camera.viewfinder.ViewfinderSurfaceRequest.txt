androidx.camera.viewfinder.ViewfinderSurfaceRequest
<androidx.camera.viewfinder.ViewfinderSurfaceRequest: java.lang.String TAG>
<androidx.camera.viewfinder.ViewfinderSurfaceRequest: android.util.Size mResolution>
<androidx.camera.viewfinder.ViewfinderSurfaceRequest: androidx.camera.viewfinder.internal.surface.ViewfinderSurface mInternalViewfinderSurface>
<androidx.camera.viewfinder.ViewfinderSurfaceRequest: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mRequestCancellationCompleter>
<androidx.camera.viewfinder.ViewfinderSurfaceRequest: com.google.common.util.concurrent.ListenableFuture mSessionStatusFuture>
<androidx.camera.viewfinder.ViewfinderSurfaceRequest: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mSurfaceCompleter>
<androidx.camera.viewfinder.ViewfinderSurfaceRequest: int mLensFacing>
<androidx.camera.viewfinder.ViewfinderSurfaceRequest: int mSensorOrientation>
<androidx.camera.viewfinder.ViewfinderSurfaceRequest: androidx.camera.viewfinder.CameraViewfinder$ImplementationMode mImplementationMode>
<androidx.camera.viewfinder.ViewfinderSurfaceRequest: com.google.common.util.concurrent.ListenableFuture mSurfaceFuture>
    void <init>(android.util.Size, int, int, androidx.camera.viewfinder.CameraViewfinder$ImplementationMode)
    {
        androidx.camera.viewfinder.ViewfinderSurfaceRequest r0;
        android.util.Size r1;
        int i0, i1, $i2;
        androidx.camera.viewfinder.CameraViewfinder$ImplementationMode r2;
        java.lang.String r3;
        java.util.concurrent.atomic.AtomicReference r4, r7, r9, $r17, $r22, $r31;
        com.google.common.util.concurrent.ListenableFuture r5, r10, $r24, $r26, $r33, $r41;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r6, r8, $r20, $r29, $r35, $r37;
        java.lang.StringBuilder $r11, $r12, $r13, $r14, $r15, $r16;
        androidx.concurrent.futures.CallbackToFutureAdapter$Resolver $r18, $r23, $r32;
        java.lang.Object $r19, $r21, $r28, $r30, $r34, $r36;
        androidx.camera.viewfinder.ViewfinderSurfaceRequest$1 $r25;
        java.util.concurrent.Executor $r27, $r42, $r44;
        androidx.camera.viewfinder.ViewfinderSurfaceRequest$2 $r38;
        androidx.camera.viewfinder.internal.surface.ViewfinderSurface $r39;
        androidx.camera.viewfinder.ViewfinderSurfaceRequest$3 $r40;
        java.lang.Runnable $r43;

        r0 := @this: androidx.camera.viewfinder.ViewfinderSurfaceRequest;

        r1 := @parameter0: android.util.Size;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: androidx.camera.viewfinder.CameraViewfinder$ImplementationMode;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: android.util.Size mResolution> = r1;

        r0.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: int mLensFacing> = i0;

        r0.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: int mSensorOrientation> = i1;

        r0.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: androidx.camera.viewfinder.CameraViewfinder$ImplementationMode mImplementationMode> = r2;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SurfaceRequest[size: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", id: ");

        $i2 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        r3 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r17.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>(null);

        r4 = $r17;

        $r18 = dynamicinvoke "attachCompleter" <androidx.concurrent.futures.CallbackToFutureAdapter$Resolver (java.util.concurrent.atomic.AtomicReference,java.lang.String)>(r4, r3) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.viewfinder.ViewfinderSurfaceRequest: java.lang.Object lambda$new$0(java.util.concurrent.atomic.AtomicReference,java.lang.String,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer));

        r5 = staticinvoke <androidx.concurrent.futures.CallbackToFutureAdapter: com.google.common.util.concurrent.ListenableFuture getFuture(androidx.concurrent.futures.CallbackToFutureAdapter$Resolver)>($r18);

        $r19 = virtualinvoke r4.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r20 = (androidx.concurrent.futures.CallbackToFutureAdapter$Completer) $r19;

        $r21 = staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r20);

        r6 = (androidx.concurrent.futures.CallbackToFutureAdapter$Completer) $r21;

        r0.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mRequestCancellationCompleter> = r6;

        $r22 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r22.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>(null);

        r7 = $r22;

        $r23 = dynamicinvoke "attachCompleter" <androidx.concurrent.futures.CallbackToFutureAdapter$Resolver (java.util.concurrent.atomic.AtomicReference,java.lang.String)>(r7, r3) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.viewfinder.ViewfinderSurfaceRequest: java.lang.Object lambda$new$1(java.util.concurrent.atomic.AtomicReference,java.lang.String,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer));

        $r24 = staticinvoke <androidx.concurrent.futures.CallbackToFutureAdapter: com.google.common.util.concurrent.ListenableFuture getFuture(androidx.concurrent.futures.CallbackToFutureAdapter$Resolver)>($r23);

        r0.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: com.google.common.util.concurrent.ListenableFuture mSessionStatusFuture> = $r24;

        $r26 = r0.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: com.google.common.util.concurrent.ListenableFuture mSessionStatusFuture>;

        $r25 = new androidx.camera.viewfinder.ViewfinderSurfaceRequest$1;

        specialinvoke $r25.<androidx.camera.viewfinder.ViewfinderSurfaceRequest$1: void <init>(androidx.camera.viewfinder.ViewfinderSurfaceRequest,androidx.concurrent.futures.CallbackToFutureAdapter$Completer,com.google.common.util.concurrent.ListenableFuture)>(r0, r6, r5);

        $r27 = staticinvoke <androidx.camera.viewfinder.internal.utils.executor.CameraExecutors: java.util.concurrent.Executor directExecutor()>();

        staticinvoke <androidx.camera.viewfinder.internal.utils.futures.Futures: void addCallback(com.google.common.util.concurrent.ListenableFuture,androidx.camera.viewfinder.internal.utils.futures.FutureCallback,java.util.concurrent.Executor)>($r26, $r25, $r27);

        $r28 = virtualinvoke r7.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r29 = (androidx.concurrent.futures.CallbackToFutureAdapter$Completer) $r28;

        $r30 = staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r29);

        r8 = (androidx.concurrent.futures.CallbackToFutureAdapter$Completer) $r30;

        $r31 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r31.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>(null);

        r9 = $r31;

        $r32 = dynamicinvoke "attachCompleter" <androidx.concurrent.futures.CallbackToFutureAdapter$Resolver (java.util.concurrent.atomic.AtomicReference,java.lang.String)>(r9, r3) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.viewfinder.ViewfinderSurfaceRequest: java.lang.Object lambda$new$2(java.util.concurrent.atomic.AtomicReference,java.lang.String,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer));

        $r33 = staticinvoke <androidx.concurrent.futures.CallbackToFutureAdapter: com.google.common.util.concurrent.ListenableFuture getFuture(androidx.concurrent.futures.CallbackToFutureAdapter$Resolver)>($r32);

        r0.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: com.google.common.util.concurrent.ListenableFuture mSurfaceFuture> = $r33;

        $r34 = virtualinvoke r9.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r35 = (androidx.concurrent.futures.CallbackToFutureAdapter$Completer) $r34;

        $r36 = staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r35);

        $r37 = (androidx.concurrent.futures.CallbackToFutureAdapter$Completer) $r36;

        r0.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mSurfaceCompleter> = $r37;

        $r38 = new androidx.camera.viewfinder.ViewfinderSurfaceRequest$2;

        specialinvoke $r38.<androidx.camera.viewfinder.ViewfinderSurfaceRequest$2: void <init>(androidx.camera.viewfinder.ViewfinderSurfaceRequest)>(r0);

        r0.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: androidx.camera.viewfinder.internal.surface.ViewfinderSurface mInternalViewfinderSurface> = $r38;

        $r39 = r0.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: androidx.camera.viewfinder.internal.surface.ViewfinderSurface mInternalViewfinderSurface>;

        r10 = virtualinvoke $r39.<androidx.camera.viewfinder.internal.surface.ViewfinderSurface: com.google.common.util.concurrent.ListenableFuture getTerminationFuture()>();

        $r41 = r0.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: com.google.common.util.concurrent.ListenableFuture mSurfaceFuture>;

        $r40 = new androidx.camera.viewfinder.ViewfinderSurfaceRequest$3;

        specialinvoke $r40.<androidx.camera.viewfinder.ViewfinderSurfaceRequest$3: void <init>(androidx.camera.viewfinder.ViewfinderSurfaceRequest,com.google.common.util.concurrent.ListenableFuture,androidx.concurrent.futures.CallbackToFutureAdapter$Completer,java.lang.String)>(r0, r10, r8, r3);

        $r42 = staticinvoke <androidx.camera.viewfinder.internal.utils.executor.CameraExecutors: java.util.concurrent.Executor directExecutor()>();

        staticinvoke <androidx.camera.viewfinder.internal.utils.futures.Futures: void addCallback(com.google.common.util.concurrent.ListenableFuture,androidx.camera.viewfinder.internal.utils.futures.FutureCallback,java.util.concurrent.Executor)>($r41, $r40, $r42);

        $r43 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.viewfinder.ViewfinderSurfaceRequest)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.viewfinder.ViewfinderSurfaceRequest: void lambda$new$3()>, methodtype: void __METHODTYPE__());

        $r44 = staticinvoke <androidx.camera.viewfinder.internal.utils.executor.CameraExecutors: java.util.concurrent.Executor directExecutor()>();

        interfaceinvoke r10.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r43, $r44);

        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        androidx.camera.viewfinder.ViewfinderSurfaceRequest r0;
        androidx.camera.viewfinder.internal.surface.ViewfinderSurface $r1;

        r0 := @this: androidx.camera.viewfinder.ViewfinderSurfaceRequest;

        $r1 = r0.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: androidx.camera.viewfinder.internal.surface.ViewfinderSurface mInternalViewfinderSurface>;

        virtualinvoke $r1.<androidx.camera.viewfinder.internal.surface.ViewfinderSurface: void close()>();

        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;
    }

    public android.util.Size getResolution()
    {
        androidx.camera.viewfinder.ViewfinderSurfaceRequest r0;
        android.util.Size $r1;

        r0 := @this: androidx.camera.viewfinder.ViewfinderSurfaceRequest;

        $r1 = r0.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: android.util.Size mResolution>;

        return $r1;
    }

    public int getSensorOrientation()
    {
        androidx.camera.viewfinder.ViewfinderSurfaceRequest r0;
        int $i0;

        r0 := @this: androidx.camera.viewfinder.ViewfinderSurfaceRequest;

        $i0 = r0.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: int mSensorOrientation>;

        return $i0;
    }

    public int getLensFacing()
    {
        androidx.camera.viewfinder.ViewfinderSurfaceRequest r0;
        int $i0;

        r0 := @this: androidx.camera.viewfinder.ViewfinderSurfaceRequest;

        $i0 = r0.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: int mLensFacing>;

        return $i0;
    }

    public androidx.camera.viewfinder.CameraViewfinder$ImplementationMode getImplementationMode()
    {
        androidx.camera.viewfinder.ViewfinderSurfaceRequest r0;
        androidx.camera.viewfinder.CameraViewfinder$ImplementationMode $r1;

        r0 := @this: androidx.camera.viewfinder.ViewfinderSurfaceRequest;

        $r1 = r0.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: androidx.camera.viewfinder.CameraViewfinder$ImplementationMode mImplementationMode>;

        return $r1;
    }

    public void markSurfaceSafeToRelease()
    {
        androidx.camera.viewfinder.ViewfinderSurfaceRequest r0;
        androidx.camera.viewfinder.internal.surface.ViewfinderSurface $r1;

        r0 := @this: androidx.camera.viewfinder.ViewfinderSurfaceRequest;

        $r1 = r0.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: androidx.camera.viewfinder.internal.surface.ViewfinderSurface mInternalViewfinderSurface>;

        virtualinvoke $r1.<androidx.camera.viewfinder.internal.surface.ViewfinderSurface: void close()>();

        return;
    }

    androidx.camera.viewfinder.internal.surface.ViewfinderSurface getViewfinderSurface()
    {
        androidx.camera.viewfinder.ViewfinderSurfaceRequest r0;
        androidx.camera.viewfinder.internal.surface.ViewfinderSurface $r1;

        r0 := @this: androidx.camera.viewfinder.ViewfinderSurfaceRequest;

        $r1 = r0.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: androidx.camera.viewfinder.internal.surface.ViewfinderSurface mInternalViewfinderSurface>;

        return $r1;
    }

    void addRequestCancellationListener(java.util.concurrent.Executor, java.lang.Runnable)
    {
        androidx.camera.viewfinder.ViewfinderSurfaceRequest r0;
        java.util.concurrent.Executor r1;
        java.lang.Runnable r2;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer $r3;

        r0 := @this: androidx.camera.viewfinder.ViewfinderSurfaceRequest;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: java.lang.Runnable;

        $r3 = r0.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mRequestCancellationCompleter>;

        virtualinvoke $r3.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: void addCancellationListener(java.lang.Runnable,java.util.concurrent.Executor)>(r2, r1);

        return;
    }

    void provideSurface(android.view.Surface, java.util.concurrent.Executor, androidx.core.util.Consumer)
    {
        androidx.camera.viewfinder.ViewfinderSurfaceRequest r0;
        android.view.Surface r1;
        java.util.concurrent.Executor r2;
        androidx.core.util.Consumer r3;
        java.lang.Throwable r4, $r13;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer $r5;
        boolean $z0, $z1, $z2;
        androidx.camera.viewfinder.ViewfinderSurfaceRequest$4 $r6;
        com.google.common.util.concurrent.ListenableFuture $r7, $r8, $r9, $r10;
        java.lang.Runnable $r12, $r14;

        r0 := @this: androidx.camera.viewfinder.ViewfinderSurfaceRequest;

        r1 := @parameter0: android.view.Surface;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: androidx.core.util.Consumer;

        $r5 = r0.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mSurfaceCompleter>;

        $z0 = virtualinvoke $r5.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean set(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r8 = r0.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: com.google.common.util.concurrent.ListenableFuture mSurfaceFuture>;

        $z1 = interfaceinvoke $r8.<com.google.common.util.concurrent.ListenableFuture: boolean isCancelled()>();

        if $z1 == 0 goto label2;

     label1:
        $r7 = r0.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: com.google.common.util.concurrent.ListenableFuture mSessionStatusFuture>;

        $r6 = new androidx.camera.viewfinder.ViewfinderSurfaceRequest$4;

        specialinvoke $r6.<androidx.camera.viewfinder.ViewfinderSurfaceRequest$4: void <init>(androidx.camera.viewfinder.ViewfinderSurfaceRequest,androidx.core.util.Consumer,android.view.Surface)>(r0, r3, r1);

        staticinvoke <androidx.camera.viewfinder.internal.utils.futures.Futures: void addCallback(com.google.common.util.concurrent.ListenableFuture,androidx.camera.viewfinder.internal.utils.futures.FutureCallback,java.util.concurrent.Executor)>($r7, $r6, r2);

        goto label6;

     label2:
        $r9 = r0.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: com.google.common.util.concurrent.ListenableFuture mSurfaceFuture>;

        $z2 = interfaceinvoke $r9.<com.google.common.util.concurrent.ListenableFuture: boolean isDone()>();

        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean)>($z2);

     label3:
        $r10 = r0.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: com.google.common.util.concurrent.ListenableFuture mSurfaceFuture>;

        interfaceinvoke $r10.<com.google.common.util.concurrent.ListenableFuture: java.lang.Object get()>();

        $r12 = dynamicinvoke "run" <java.lang.Runnable (androidx.core.util.Consumer,android.view.Surface)>(r3, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.viewfinder.ViewfinderSurfaceRequest: void lambda$provideSurface$4(androidx.core.util.Consumer,android.view.Surface)>, methodtype: void __METHODTYPE__());

        interfaceinvoke r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r12);

     label4:
        goto label6;

     label5:
        $r13 := @caughtexception;

        r4 = $r13;

        $r14 = dynamicinvoke "run" <java.lang.Runnable (androidx.core.util.Consumer,android.view.Surface)>(r3, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.viewfinder.ViewfinderSurfaceRequest: void lambda$provideSurface$5(androidx.core.util.Consumer,android.view.Surface)>, methodtype: void __METHODTYPE__());

        interfaceinvoke r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r14);

     label6:
        return;

        catch java.lang.InterruptedException from label3 to label4 with label5;
        catch java.util.concurrent.ExecutionException from label3 to label4 with label5;
    }

    boolean willNotProvideSurface()
    {
        androidx.camera.viewfinder.ViewfinderSurfaceRequest r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer $r2;
        boolean $z0;
        androidx.camera.viewfinder.internal.surface.ViewfinderSurface$SurfaceUnavailableException r3;
        java.lang.Throwable r4;

        r0 := @this: androidx.camera.viewfinder.ViewfinderSurfaceRequest;

        $r2 = r0.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mSurfaceCompleter>;

        r3 = new androidx.camera.viewfinder.internal.surface.ViewfinderSurface$SurfaceUnavailableException;

        specialinvoke r3.<androidx.camera.viewfinder.internal.surface.ViewfinderSurface$SurfaceUnavailableException: void <init>(java.lang.String)>("Surface request will not complete.");

        r4 = (java.lang.Throwable) r3;

        $z0 = virtualinvoke $r2.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean setException(java.lang.Throwable)>(r4);

        return $z0;
    }

    private static void lambda$provideSurface$5(androidx.core.util.Consumer, android.view.Surface)
    {
        androidx.core.util.Consumer r0;
        android.view.Surface r1;
        androidx.camera.viewfinder.ViewfinderSurfaceRequest$Result $r2;

        r0 := @parameter0: androidx.core.util.Consumer;

        r1 := @parameter1: android.view.Surface;

        $r2 = staticinvoke <androidx.camera.viewfinder.ViewfinderSurfaceRequest$Result: androidx.camera.viewfinder.ViewfinderSurfaceRequest$Result of(int,android.view.Surface)>(4, r1);

        interfaceinvoke r0.<androidx.core.util.Consumer: void accept(java.lang.Object)>($r2);

        return;
    }

    private static void lambda$provideSurface$4(androidx.core.util.Consumer, android.view.Surface)
    {
        androidx.core.util.Consumer r0;
        android.view.Surface r1;
        androidx.camera.viewfinder.ViewfinderSurfaceRequest$Result $r2;

        r0 := @parameter0: androidx.core.util.Consumer;

        r1 := @parameter1: android.view.Surface;

        $r2 = staticinvoke <androidx.camera.viewfinder.ViewfinderSurfaceRequest$Result: androidx.camera.viewfinder.ViewfinderSurfaceRequest$Result of(int,android.view.Surface)>(3, r1);

        interfaceinvoke r0.<androidx.core.util.Consumer: void accept(java.lang.Object)>($r2);

        return;
    }

    private void lambda$new$3()
    {
        androidx.camera.viewfinder.ViewfinderSurfaceRequest r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5;
        androidx.camera.viewfinder.internal.surface.ViewfinderSurface $r3;
        java.lang.String $r6;
        com.google.common.util.concurrent.ListenableFuture $r7;

        r0 := @this: androidx.camera.viewfinder.ViewfinderSurfaceRequest;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mInternalViewfinderSurface + ");

        $r3 = r0.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: androidx.camera.viewfinder.internal.surface.ViewfinderSurface mInternalViewfinderSurface>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" terminateFuture triggered");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.viewfinder.internal.utils.Logger: void d(java.lang.String,java.lang.String)>("ViewfinderSurfaceRequest", $r6);

        $r7 = r0.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: com.google.common.util.concurrent.ListenableFuture mSurfaceFuture>;

        interfaceinvoke $r7.<com.google.common.util.concurrent.ListenableFuture: boolean cancel(boolean)>(1);

        return;
    }

    private static java.lang.Object lambda$new$2(java.util.concurrent.atomic.AtomicReference, java.lang.String, androidx.concurrent.futures.CallbackToFutureAdapter$Completer) throws java.lang.Exception
    {
        java.util.concurrent.atomic.AtomicReference r0;
        java.lang.String r1, $r6;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r2;
        java.lang.StringBuilder $r3, $r4, $r5;

        r0 := @parameter0: java.util.concurrent.atomic.AtomicReference;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        virtualinvoke r0.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(r2);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-Surface");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    private static java.lang.Object lambda$new$1(java.util.concurrent.atomic.AtomicReference, java.lang.String, androidx.concurrent.futures.CallbackToFutureAdapter$Completer) throws java.lang.Exception
    {
        java.util.concurrent.atomic.AtomicReference r0;
        java.lang.String r1, $r6;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r2;
        java.lang.StringBuilder $r3, $r4, $r5;

        r0 := @parameter0: java.util.concurrent.atomic.AtomicReference;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        virtualinvoke r0.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(r2);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-status");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    private static java.lang.Object lambda$new$0(java.util.concurrent.atomic.AtomicReference, java.lang.String, androidx.concurrent.futures.CallbackToFutureAdapter$Completer) throws java.lang.Exception
    {
        java.util.concurrent.atomic.AtomicReference r0;
        java.lang.String r1, $r6;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r2;
        java.lang.StringBuilder $r3, $r4, $r5;

        r0 := @parameter0: java.util.concurrent.atomic.AtomicReference;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        virtualinvoke r0.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(r2);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-cancellation");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    static androidx.camera.viewfinder.internal.surface.ViewfinderSurface access$000(androidx.camera.viewfinder.ViewfinderSurfaceRequest)
    {
        androidx.camera.viewfinder.ViewfinderSurfaceRequest r0;
        androidx.camera.viewfinder.internal.surface.ViewfinderSurface $r1;

        r0 := @parameter0: androidx.camera.viewfinder.ViewfinderSurfaceRequest;

        $r1 = r0.<androidx.camera.viewfinder.ViewfinderSurfaceRequest: androidx.camera.viewfinder.internal.surface.ViewfinderSurface mInternalViewfinderSurface>;

        return $r1;
    }

