androidx.compose.ui.test.junit4.AbstractMainTestClock
<androidx.compose.ui.test.junit4.AbstractMainTestClock: kotlinx.coroutines.test.TestCoroutineScheduler testScheduler>
<androidx.compose.ui.test.junit4.AbstractMainTestClock: long frameDelayMillis>
<androidx.compose.ui.test.junit4.AbstractMainTestClock: kotlin.jvm.functions.Function1 runOnUiThread>
<androidx.compose.ui.test.junit4.AbstractMainTestClock: boolean autoAdvance>
    public void <init>(kotlinx.coroutines.test.TestCoroutineScheduler, long, kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.test.junit4.AbstractMainTestClock r0;
        kotlinx.coroutines.test.TestCoroutineScheduler r1;
        long l0;
        kotlin.jvm.functions.Function1 r2;

        r0 := @this: androidx.compose.ui.test.junit4.AbstractMainTestClock;

        r1 := @parameter0: kotlinx.coroutines.test.TestCoroutineScheduler;

        l0 := @parameter1: long;

        r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "testScheduler");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "runOnUiThread");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.ui.test.junit4.AbstractMainTestClock: kotlinx.coroutines.test.TestCoroutineScheduler testScheduler> = r1;

        r0.<androidx.compose.ui.test.junit4.AbstractMainTestClock: long frameDelayMillis> = l0;

        r0.<androidx.compose.ui.test.junit4.AbstractMainTestClock: kotlin.jvm.functions.Function1 runOnUiThread> = r2;

        r0.<androidx.compose.ui.test.junit4.AbstractMainTestClock: boolean autoAdvance> = 1;

        return;
    }

    public long getCurrentTime()
    {
        androidx.compose.ui.test.junit4.AbstractMainTestClock r0;
        kotlinx.coroutines.test.TestCoroutineScheduler $r1;
        long $l0;

        r0 := @this: androidx.compose.ui.test.junit4.AbstractMainTestClock;

        $r1 = r0.<androidx.compose.ui.test.junit4.AbstractMainTestClock: kotlinx.coroutines.test.TestCoroutineScheduler testScheduler>;

        $l0 = virtualinvoke $r1.<kotlinx.coroutines.test.TestCoroutineScheduler: long getCurrentTime()>();

        return $l0;
    }

    public boolean getAutoAdvance()
    {
        androidx.compose.ui.test.junit4.AbstractMainTestClock r0;
        boolean $z0;

        r0 := @this: androidx.compose.ui.test.junit4.AbstractMainTestClock;

        $z0 = r0.<androidx.compose.ui.test.junit4.AbstractMainTestClock: boolean autoAdvance>;

        return $z0;
    }

    public void setAutoAdvance(boolean)
    {
        androidx.compose.ui.test.junit4.AbstractMainTestClock r0;
        boolean z0;

        r0 := @this: androidx.compose.ui.test.junit4.AbstractMainTestClock;

        z0 := @parameter0: boolean;

        r0.<androidx.compose.ui.test.junit4.AbstractMainTestClock: boolean autoAdvance> = z0;

        return;
    }

    public void advanceTimeByFrame()
    {
        androidx.compose.ui.test.junit4.AbstractMainTestClock r0;
        long $l0;

        r0 := @this: androidx.compose.ui.test.junit4.AbstractMainTestClock;

        $l0 = r0.<androidx.compose.ui.test.junit4.AbstractMainTestClock: long frameDelayMillis>;

        specialinvoke r0.<androidx.compose.ui.test.junit4.AbstractMainTestClock: void advanceDispatcher(long)>($l0);

        return;
    }

    public void advanceTimeBy(long, boolean)
    {
        androidx.compose.ui.test.junit4.AbstractMainTestClock r0;
        long l0, l1, $l2, $l3, $l4, $l5;
        boolean z0;
        double $d0, $d1, $d2, $d3;

        r0 := @this: androidx.compose.ui.test.junit4.AbstractMainTestClock;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $l5 = l0;

        goto label2;

     label1:
        $d1 = (double) l0;

        $l2 = r0.<androidx.compose.ui.test.junit4.AbstractMainTestClock: long frameDelayMillis>;

        $d0 = (double) $l2;

        $d2 = $d1 / $d0;

        $d3 = staticinvoke <java.lang.Math: double ceil(double)>($d2);

        $l4 = (long) $d3;

        $l3 = r0.<androidx.compose.ui.test.junit4.AbstractMainTestClock: long frameDelayMillis>;

        $l5 = $l4 * $l3;

     label2:
        l1 = $l5;

        specialinvoke r0.<androidx.compose.ui.test.junit4.AbstractMainTestClock: void advanceDispatcher(long)>(l1);

        return;
    }

    public void advanceTimeUntil(long, kotlin.jvm.functions.Function0)
    {
        androidx.compose.ui.test.junit4.AbstractMainTestClock r0;
        long l0, l1;
        kotlin.jvm.functions.Function0 r1;
        androidx.compose.ui.test.junit4.AbstractMainTestClock$advanceTimeUntil$1 $r2;
        kotlin.jvm.functions.Function1 $r3;

        r0 := @this: androidx.compose.ui.test.junit4.AbstractMainTestClock;

        l0 := @parameter0: long;

        r1 := @parameter1: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "condition");

        l1 = virtualinvoke r0.<androidx.compose.ui.test.junit4.AbstractMainTestClock: long getCurrentTime()>();

        $r3 = r0.<androidx.compose.ui.test.junit4.AbstractMainTestClock: kotlin.jvm.functions.Function1 runOnUiThread>;

        $r2 = new androidx.compose.ui.test.junit4.AbstractMainTestClock$advanceTimeUntil$1;

        specialinvoke $r2.<androidx.compose.ui.test.junit4.AbstractMainTestClock$advanceTimeUntil$1: void <init>(kotlin.jvm.functions.Function0,androidx.compose.ui.test.junit4.AbstractMainTestClock,long,long)>(r1, r0, l1, l0);

        interfaceinvoke $r3.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        return;
    }

    private final void advanceDispatcher(long)
    {
        androidx.compose.ui.test.junit4.AbstractMainTestClock r0;
        long l0;
        androidx.compose.ui.test.junit4.AbstractMainTestClock$advanceDispatcher$1 $r1;
        kotlin.jvm.functions.Function1 $r2;

        r0 := @this: androidx.compose.ui.test.junit4.AbstractMainTestClock;

        l0 := @parameter0: long;

        $r2 = r0.<androidx.compose.ui.test.junit4.AbstractMainTestClock: kotlin.jvm.functions.Function1 runOnUiThread>;

        $r1 = new androidx.compose.ui.test.junit4.AbstractMainTestClock$advanceDispatcher$1;

        specialinvoke $r1.<androidx.compose.ui.test.junit4.AbstractMainTestClock$advanceDispatcher$1: void <init>(androidx.compose.ui.test.junit4.AbstractMainTestClock,long)>(r0, l0);

        interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r1);

        return;
    }

    public static final void access$advanceDispatcher(androidx.compose.ui.test.junit4.AbstractMainTestClock, long)
    {
        androidx.compose.ui.test.junit4.AbstractMainTestClock $r0;
        long l0;

        $r0 := @parameter0: androidx.compose.ui.test.junit4.AbstractMainTestClock;

        l0 := @parameter1: long;

        specialinvoke $r0.<androidx.compose.ui.test.junit4.AbstractMainTestClock: void advanceDispatcher(long)>(l0);

        return;
    }

    public static final long access$getFrameDelayMillis$p(androidx.compose.ui.test.junit4.AbstractMainTestClock)
    {
        androidx.compose.ui.test.junit4.AbstractMainTestClock $r0;
        long $l0;

        $r0 := @parameter0: androidx.compose.ui.test.junit4.AbstractMainTestClock;

        $l0 = $r0.<androidx.compose.ui.test.junit4.AbstractMainTestClock: long frameDelayMillis>;

        return $l0;
    }

    public static final kotlinx.coroutines.test.TestCoroutineScheduler access$getTestScheduler$p(androidx.compose.ui.test.junit4.AbstractMainTestClock)
    {
        androidx.compose.ui.test.junit4.AbstractMainTestClock $r0;
        kotlinx.coroutines.test.TestCoroutineScheduler $r1;

        $r0 := @parameter0: androidx.compose.ui.test.junit4.AbstractMainTestClock;

        $r1 = $r0.<androidx.compose.ui.test.junit4.AbstractMainTestClock: kotlinx.coroutines.test.TestCoroutineScheduler testScheduler>;

        return $r1;
    }

androidx.compose.ui.test.junit4.AbstractMainTestClock$advanceDispatcher$1
<androidx.compose.ui.test.junit4.AbstractMainTestClock$advanceDispatcher$1: androidx.compose.ui.test.junit4.AbstractMainTestClock this$0>
<androidx.compose.ui.test.junit4.AbstractMainTestClock$advanceDispatcher$1: long $millis>
    void <init>(androidx.compose.ui.test.junit4.AbstractMainTestClock, long)
    {
        androidx.compose.ui.test.junit4.AbstractMainTestClock$advanceDispatcher$1 r0;
        androidx.compose.ui.test.junit4.AbstractMainTestClock $r1;
        long $l0;

        r0 := @this: androidx.compose.ui.test.junit4.AbstractMainTestClock$advanceDispatcher$1;

        $r1 := @parameter0: androidx.compose.ui.test.junit4.AbstractMainTestClock;

        $l0 := @parameter1: long;

        r0.<androidx.compose.ui.test.junit4.AbstractMainTestClock$advanceDispatcher$1: androidx.compose.ui.test.junit4.AbstractMainTestClock this$0> = $r1;

        r0.<androidx.compose.ui.test.junit4.AbstractMainTestClock$advanceDispatcher$1: long $millis> = $l0;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.compose.ui.test.junit4.AbstractMainTestClock$advanceDispatcher$1 r0;
        androidx.compose.ui.test.junit4.AbstractMainTestClock $r1, $r3;
        kotlinx.coroutines.test.TestCoroutineScheduler $r2, $r4;
        long $l0;

        r0 := @this: androidx.compose.ui.test.junit4.AbstractMainTestClock$advanceDispatcher$1;

        $r1 = r0.<androidx.compose.ui.test.junit4.AbstractMainTestClock$advanceDispatcher$1: androidx.compose.ui.test.junit4.AbstractMainTestClock this$0>;

        $r2 = staticinvoke <androidx.compose.ui.test.junit4.AbstractMainTestClock: kotlinx.coroutines.test.TestCoroutineScheduler access$getTestScheduler$p(androidx.compose.ui.test.junit4.AbstractMainTestClock)>($r1);

        $l0 = r0.<androidx.compose.ui.test.junit4.AbstractMainTestClock$advanceDispatcher$1: long $millis>;

        virtualinvoke $r2.<kotlinx.coroutines.test.TestCoroutineScheduler: void advanceTimeBy(long)>($l0);

        $r3 = r0.<androidx.compose.ui.test.junit4.AbstractMainTestClock$advanceDispatcher$1: androidx.compose.ui.test.junit4.AbstractMainTestClock this$0>;

        $r4 = staticinvoke <androidx.compose.ui.test.junit4.AbstractMainTestClock: kotlinx.coroutines.test.TestCoroutineScheduler access$getTestScheduler$p(androidx.compose.ui.test.junit4.AbstractMainTestClock)>($r3);

        virtualinvoke $r4.<kotlinx.coroutines.test.TestCoroutineScheduler: void runCurrent()>();

        return;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.ui.test.junit4.AbstractMainTestClock$advanceDispatcher$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.compose.ui.test.junit4.AbstractMainTestClock$advanceDispatcher$1;

        virtualinvoke r0.<androidx.compose.ui.test.junit4.AbstractMainTestClock$advanceDispatcher$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

androidx.compose.ui.test.junit4.AbstractMainTestClock$advanceTimeUntil$1
<androidx.compose.ui.test.junit4.AbstractMainTestClock$advanceTimeUntil$1: kotlin.jvm.functions.Function0 $condition>
<androidx.compose.ui.test.junit4.AbstractMainTestClock$advanceTimeUntil$1: androidx.compose.ui.test.junit4.AbstractMainTestClock this$0>
<androidx.compose.ui.test.junit4.AbstractMainTestClock$advanceTimeUntil$1: long $startTime>
<androidx.compose.ui.test.junit4.AbstractMainTestClock$advanceTimeUntil$1: long $timeoutMillis>
    void <init>(kotlin.jvm.functions.Function0, androidx.compose.ui.test.junit4.AbstractMainTestClock, long, long)
    {
        androidx.compose.ui.test.junit4.AbstractMainTestClock$advanceTimeUntil$1 r0;
        kotlin.jvm.functions.Function0 $r1;
        androidx.compose.ui.test.junit4.AbstractMainTestClock $r2;
        long $l0, $l1;

        r0 := @this: androidx.compose.ui.test.junit4.AbstractMainTestClock$advanceTimeUntil$1;

        $r1 := @parameter0: kotlin.jvm.functions.Function0;

        $r2 := @parameter1: androidx.compose.ui.test.junit4.AbstractMainTestClock;

        $l0 := @parameter2: long;

        $l1 := @parameter3: long;

        r0.<androidx.compose.ui.test.junit4.AbstractMainTestClock$advanceTimeUntil$1: kotlin.jvm.functions.Function0 $condition> = $r1;

        r0.<androidx.compose.ui.test.junit4.AbstractMainTestClock$advanceTimeUntil$1: androidx.compose.ui.test.junit4.AbstractMainTestClock this$0> = $r2;

        r0.<androidx.compose.ui.test.junit4.AbstractMainTestClock$advanceTimeUntil$1: long $startTime> = $l0;

        r0.<androidx.compose.ui.test.junit4.AbstractMainTestClock$advanceTimeUntil$1: long $timeoutMillis> = $l1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.compose.ui.test.junit4.AbstractMainTestClock$advanceTimeUntil$1 r0;
        kotlin.jvm.functions.Function0 $r1;
        java.lang.Object $r2;
        java.lang.Boolean $r3;
        boolean $z0;
        androidx.compose.ui.test.junit4.AbstractMainTestClock $r4, $r5, $r6;
        long $l0, $l1, $l2, $l3, $l4, $l6;
        byte $b5;
        androidx.compose.ui.test.ComposeTimeoutException $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11;
        java.lang.String $r12;

        r0 := @this: androidx.compose.ui.test.junit4.AbstractMainTestClock$advanceTimeUntil$1;

     label1:
        $r1 = r0.<androidx.compose.ui.test.junit4.AbstractMainTestClock$advanceTimeUntil$1: kotlin.jvm.functions.Function0 $condition>;

        $r2 = interfaceinvoke $r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        $r3 = (java.lang.Boolean) $r2;

        $z0 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        $r5 = r0.<androidx.compose.ui.test.junit4.AbstractMainTestClock$advanceTimeUntil$1: androidx.compose.ui.test.junit4.AbstractMainTestClock this$0>;

        $r4 = r0.<androidx.compose.ui.test.junit4.AbstractMainTestClock$advanceTimeUntil$1: androidx.compose.ui.test.junit4.AbstractMainTestClock this$0>;

        $l0 = staticinvoke <androidx.compose.ui.test.junit4.AbstractMainTestClock: long access$getFrameDelayMillis$p(androidx.compose.ui.test.junit4.AbstractMainTestClock)>($r4);

        staticinvoke <androidx.compose.ui.test.junit4.AbstractMainTestClock: void access$advanceDispatcher(androidx.compose.ui.test.junit4.AbstractMainTestClock,long)>($r5, $l0);

        $r6 = r0.<androidx.compose.ui.test.junit4.AbstractMainTestClock$advanceTimeUntil$1: androidx.compose.ui.test.junit4.AbstractMainTestClock this$0>;

        $l1 = virtualinvoke $r6.<androidx.compose.ui.test.junit4.AbstractMainTestClock: long getCurrentTime()>();

        $l2 = r0.<androidx.compose.ui.test.junit4.AbstractMainTestClock$advanceTimeUntil$1: long $startTime>;

        $l4 = $l1 - $l2;

        $l3 = r0.<androidx.compose.ui.test.junit4.AbstractMainTestClock$advanceTimeUntil$1: long $timeoutMillis>;

        $b5 = $l4 cmp $l3;

        if $b5 <= 0 goto label1;

        $r7 = new androidx.compose.ui.test.ComposeTimeoutException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Condition still not satisfied after ");

        $l6 = r0.<androidx.compose.ui.test.junit4.AbstractMainTestClock$advanceTimeUntil$1: long $timeoutMillis>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l6);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<androidx.compose.ui.test.ComposeTimeoutException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label2:
        return;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.ui.test.junit4.AbstractMainTestClock$advanceTimeUntil$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.compose.ui.test.junit4.AbstractMainTestClock$advanceTimeUntil$1;

        virtualinvoke r0.<androidx.compose.ui.test.junit4.AbstractMainTestClock$advanceTimeUntil$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

