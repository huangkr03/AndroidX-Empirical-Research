android.databinding.tool.LayoutXmlProcessor
<android.databinding.tool.LayoutXmlProcessor: java.lang.String RESOURCE_BUNDLE_PACKAGE>
<android.databinding.tool.LayoutXmlProcessor: java.lang.String CLASS_NAME>
<android.databinding.tool.LayoutXmlProcessor: java.io.FilenameFilter LAYOUT_FOLDER_FILTER>
<android.databinding.tool.LayoutXmlProcessor: java.io.FilenameFilter XML_FILE_FILTER>
<android.databinding.tool.LayoutXmlProcessor: android.databinding.tool.writer.JavaFileWriter mFileWriter>
<android.databinding.tool.LayoutXmlProcessor: android.databinding.tool.store.ResourceBundle mResourceBundle>
<android.databinding.tool.LayoutXmlProcessor: boolean mProcessingComplete>
<android.databinding.tool.LayoutXmlProcessor: java.lang.String mBuildId>
<android.databinding.tool.LayoutXmlProcessor: android.databinding.tool.LayoutXmlProcessor$OriginalFileLookup mOriginalFileLookup>
<android.databinding.tool.LayoutXmlProcessor: android.databinding.tool.store.LayoutFileParser mLayoutFileParser>
    public void <init>(java.lang.String, android.databinding.tool.writer.JavaFileWriter, android.databinding.tool.LayoutXmlProcessor$OriginalFileLookup)
    {
        android.databinding.tool.LayoutXmlProcessor r0;
        java.lang.String r1, $r5;
        android.databinding.tool.writer.JavaFileWriter r2;
        android.databinding.tool.LayoutXmlProcessor$OriginalFileLookup r3;
        java.util.UUID $r4;
        android.databinding.tool.store.LayoutFileParser $r6;
        android.databinding.tool.store.ResourceBundle $r7;

        r0 := @this: android.databinding.tool.LayoutXmlProcessor;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.databinding.tool.writer.JavaFileWriter;

        r3 := @parameter2: android.databinding.tool.LayoutXmlProcessor$OriginalFileLookup;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();

        $r5 = virtualinvoke $r4.<java.util.UUID: java.lang.String toString()>();

        r0.<android.databinding.tool.LayoutXmlProcessor: java.lang.String mBuildId> = $r5;

        $r6 = new android.databinding.tool.store.LayoutFileParser;

        specialinvoke $r6.<android.databinding.tool.store.LayoutFileParser: void <init>()>();

        r0.<android.databinding.tool.LayoutXmlProcessor: android.databinding.tool.store.LayoutFileParser mLayoutFileParser> = $r6;

        r0.<android.databinding.tool.LayoutXmlProcessor: android.databinding.tool.writer.JavaFileWriter mFileWriter> = r2;

        $r7 = new android.databinding.tool.store.ResourceBundle;

        specialinvoke $r7.<android.databinding.tool.store.ResourceBundle: void <init>(java.lang.String)>(r1);

        r0.<android.databinding.tool.LayoutXmlProcessor: android.databinding.tool.store.ResourceBundle mResourceBundle> = $r7;

        r0.<android.databinding.tool.LayoutXmlProcessor: android.databinding.tool.LayoutXmlProcessor$OriginalFileLookup mOriginalFileLookup> = r3;

        return;
    }

    private static void processIncrementalInputFiles(android.databinding.tool.LayoutXmlProcessor$ResourceInput, android.databinding.tool.LayoutXmlProcessor$ProcessFileCallback) throws java.io.IOException, javax.xml.parsers.ParserConfigurationException, javax.xml.xpath.XPathExpressionException, org.xml.sax.SAXException
    {
        android.databinding.tool.LayoutXmlProcessor$ResourceInput r0;
        android.databinding.tool.LayoutXmlProcessor$ProcessFileCallback r1;
        java.io.File $r2, $r4, $r6;
        java.util.List $r3, $r5, $r7;

        r0 := @parameter0: android.databinding.tool.LayoutXmlProcessor$ResourceInput;

        r1 := @parameter1: android.databinding.tool.LayoutXmlProcessor$ProcessFileCallback;

        $r2 = virtualinvoke r0.<android.databinding.tool.LayoutXmlProcessor$ResourceInput: java.io.File getRootInputFolder()>();

        $r3 = virtualinvoke r0.<android.databinding.tool.LayoutXmlProcessor$ResourceInput: java.util.List getAdded()>();

        staticinvoke <android.databinding.tool.LayoutXmlProcessor: void processExistingIncrementalFiles(java.io.File,java.util.List,android.databinding.tool.LayoutXmlProcessor$ProcessFileCallback)>($r2, $r3, r1);

        $r4 = virtualinvoke r0.<android.databinding.tool.LayoutXmlProcessor$ResourceInput: java.io.File getRootInputFolder()>();

        $r5 = virtualinvoke r0.<android.databinding.tool.LayoutXmlProcessor$ResourceInput: java.util.List getChanged()>();

        staticinvoke <android.databinding.tool.LayoutXmlProcessor: void processExistingIncrementalFiles(java.io.File,java.util.List,android.databinding.tool.LayoutXmlProcessor$ProcessFileCallback)>($r4, $r5, r1);

        $r6 = virtualinvoke r0.<android.databinding.tool.LayoutXmlProcessor$ResourceInput: java.io.File getRootInputFolder()>();

        $r7 = virtualinvoke r0.<android.databinding.tool.LayoutXmlProcessor$ResourceInput: java.util.List getRemoved()>();

        staticinvoke <android.databinding.tool.LayoutXmlProcessor: void processRemovedIncrementalFiles(java.io.File,java.util.List,android.databinding.tool.LayoutXmlProcessor$ProcessFileCallback)>($r6, $r7, r1);

        return;
    }

    public static java.lang.String exportLayoutNameFromInfoFileName(java.lang.String)
    {
        java.lang.String r0, $r1;
        int $i0;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(45);

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        return $r1;
    }

    private static void processExistingIncrementalFiles(java.io.File, java.util.List, android.databinding.tool.LayoutXmlProcessor$ProcessFileCallback) throws java.io.IOException, javax.xml.xpath.XPathExpressionException, org.xml.sax.SAXException, javax.xml.parsers.ParserConfigurationException
    {
        java.io.File r0, r4, r5;
        java.util.List r1;
        android.databinding.tool.LayoutXmlProcessor$ProcessFileCallback r2;
        java.util.Iterator r3;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r6;
        java.io.FilenameFilter $r7, $r9;
        java.lang.String $r8, $r10;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: android.databinding.tool.LayoutXmlProcessor$ProcessFileCallback;

        r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.io.File) $r6;

        r5 = virtualinvoke r4.<java.io.File: java.io.File getParentFile()>();

        $z1 = virtualinvoke r0.<java.io.File: boolean equals(java.lang.Object)>(r5);

        if $z1 == 0 goto label2;

        $r9 = <android.databinding.tool.LayoutXmlProcessor: java.io.FilenameFilter LAYOUT_FOLDER_FILTER>;

        $r10 = virtualinvoke r4.<java.io.File: java.lang.String getName()>();

        $z3 = interfaceinvoke $r9.<java.io.FilenameFilter: boolean accept(java.io.File,java.lang.String)>(r4, $r10);

        if $z3 != 0 goto label4;

        interfaceinvoke r2.<android.databinding.tool.LayoutXmlProcessor$ProcessFileCallback: void processOtherRootFile(java.io.File)>(r4);

        goto label4;

     label2:
        $r7 = <android.databinding.tool.LayoutXmlProcessor: java.io.FilenameFilter LAYOUT_FOLDER_FILTER>;

        $r8 = virtualinvoke r5.<java.io.File: java.lang.String getName()>();

        $z2 = interfaceinvoke $r7.<java.io.FilenameFilter: boolean accept(java.io.File,java.lang.String)>(r5, $r8);

        if $z2 == 0 goto label3;

        interfaceinvoke r2.<android.databinding.tool.LayoutXmlProcessor$ProcessFileCallback: void processLayoutFile(java.io.File)>(r4);

        goto label4;

     label3:
        interfaceinvoke r2.<android.databinding.tool.LayoutXmlProcessor$ProcessFileCallback: void processOtherFile(java.io.File,java.io.File)>(r5, r4);

     label4:
        goto label1;

     label5:
        return;
    }

    private static void processRemovedIncrementalFiles(java.io.File, java.util.List, android.databinding.tool.LayoutXmlProcessor$ProcessFileCallback) throws java.io.IOException
    {
        java.io.File r0, r4, r5;
        java.util.List r1;
        android.databinding.tool.LayoutXmlProcessor$ProcessFileCallback r2;
        java.util.Iterator r3;
        boolean $z0, $z1, $z2;
        java.lang.Object $r6;
        java.io.FilenameFilter $r7;
        java.lang.String $r8;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: android.databinding.tool.LayoutXmlProcessor$ProcessFileCallback;

        r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.io.File) $r6;

        r5 = virtualinvoke r4.<java.io.File: java.io.File getParentFile()>();

        $z1 = virtualinvoke r0.<java.io.File: boolean equals(java.lang.Object)>(r5);

        if $z1 == 0 goto label2;

        interfaceinvoke r2.<android.databinding.tool.LayoutXmlProcessor$ProcessFileCallback: void processRemovedOtherRootFile(java.io.File)>(r4);

        goto label4;

     label2:
        $r7 = <android.databinding.tool.LayoutXmlProcessor: java.io.FilenameFilter LAYOUT_FOLDER_FILTER>;

        $r8 = virtualinvoke r5.<java.io.File: java.lang.String getName()>();

        $z2 = interfaceinvoke $r7.<java.io.FilenameFilter: boolean accept(java.io.File,java.lang.String)>(r5, $r8);

        if $z2 == 0 goto label3;

        interfaceinvoke r2.<android.databinding.tool.LayoutXmlProcessor$ProcessFileCallback: void processRemovedLayoutFile(java.io.File)>(r4);

        goto label4;

     label3:
        interfaceinvoke r2.<android.databinding.tool.LayoutXmlProcessor$ProcessFileCallback: void processRemovedOtherFile(java.io.File,java.io.File)>(r5, r4);

     label4:
        goto label1;

     label5:
        return;
    }

    private static void processAllInputFiles(android.databinding.tool.LayoutXmlProcessor$ResourceInput, android.databinding.tool.LayoutXmlProcessor$ProcessFileCallback) throws java.io.IOException, javax.xml.xpath.XPathExpressionException, org.xml.sax.SAXException, javax.xml.parsers.ParserConfigurationException
    {
        android.databinding.tool.LayoutXmlProcessor$ResourceInput r0;
        android.databinding.tool.LayoutXmlProcessor$ProcessFileCallback r1;
        java.io.File[] r2, r13, r15;
        int i0, i1, i2, i3, i4, i5;
        java.io.File r3, $r4, $r5, $r7, $r9, r14, r16;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object[] $r6, $r8;
        java.io.FilenameFilter $r10, $r12;
        java.lang.String $r11;

        r0 := @parameter0: android.databinding.tool.LayoutXmlProcessor$ResourceInput;

        r1 := @parameter1: android.databinding.tool.LayoutXmlProcessor$ProcessFileCallback;

        $r4 = virtualinvoke r0.<android.databinding.tool.LayoutXmlProcessor$ResourceInput: java.io.File getRootOutputFolder()>();

        staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r4);

        $r5 = virtualinvoke r0.<android.databinding.tool.LayoutXmlProcessor$ResourceInput: java.io.File getRootOutputFolder()>();

        $z0 = virtualinvoke $r5.<java.io.File: boolean mkdirs()>();

        $r6 = newarray (java.lang.Object)[0];

        staticinvoke <android.databinding.tool.util.Preconditions: void check(boolean,java.lang.String,java.lang.Object[])>($z0, "out dir should be re-created", $r6);

        $r7 = virtualinvoke r0.<android.databinding.tool.LayoutXmlProcessor$ResourceInput: java.io.File getRootInputFolder()>();

        $z1 = virtualinvoke $r7.<java.io.File: boolean isDirectory()>();

        $r8 = newarray (java.lang.Object)[0];

        staticinvoke <android.databinding.tool.util.Preconditions: void check(boolean,java.lang.String,java.lang.Object[])>($z1, "it must be a directory", $r8);

        $r9 = virtualinvoke r0.<android.databinding.tool.LayoutXmlProcessor$ResourceInput: java.io.File getRootInputFolder()>();

        r2 = virtualinvoke $r9.<java.io.File: java.io.File[] listFiles()>();

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label9;

        r3 = r2[i1];

        $z2 = virtualinvoke r3.<java.io.File: boolean isDirectory()>();

        if $z2 == 0 goto label7;

        $r10 = <android.databinding.tool.LayoutXmlProcessor: java.io.FilenameFilter LAYOUT_FOLDER_FILTER>;

        $r11 = virtualinvoke r3.<java.io.File: java.lang.String getName()>();

        $z3 = interfaceinvoke $r10.<java.io.FilenameFilter: boolean accept(java.io.File,java.lang.String)>(r3, $r11);

        if $z3 == 0 goto label4;

        interfaceinvoke r1.<android.databinding.tool.LayoutXmlProcessor$ProcessFileCallback: void processLayoutFolder(java.io.File)>(r3);

        $r12 = <android.databinding.tool.LayoutXmlProcessor: java.io.FilenameFilter XML_FILE_FILTER>;

        r13 = virtualinvoke r3.<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>($r12);

        i2 = lengthof r13;

        i3 = 0;

     label2:
        if i3 >= i2 goto label3;

        r14 = r13[i3];

        interfaceinvoke r1.<android.databinding.tool.LayoutXmlProcessor$ProcessFileCallback: void processLayoutFile(java.io.File)>(r14);

        i3 = i3 + 1;

        goto label2;

     label3:
        goto label8;

     label4:
        interfaceinvoke r1.<android.databinding.tool.LayoutXmlProcessor$ProcessFileCallback: void processOtherFolder(java.io.File)>(r3);

        r15 = virtualinvoke r3.<java.io.File: java.io.File[] listFiles()>();

        i4 = lengthof r15;

        i5 = 0;

     label5:
        if i5 >= i4 goto label6;

        r16 = r15[i5];

        interfaceinvoke r1.<android.databinding.tool.LayoutXmlProcessor$ProcessFileCallback: void processOtherFile(java.io.File,java.io.File)>(r3, r16);

        i5 = i5 + 1;

        goto label5;

     label6:
        goto label8;

     label7:
        interfaceinvoke r1.<android.databinding.tool.LayoutXmlProcessor$ProcessFileCallback: void processOtherRootFile(java.io.File)>(r3);

     label8:
        i1 = i1 + 1;

        goto label1;

     label9:
        return;
    }

    public android.databinding.tool.store.ResourceBundle getResourceBundle()
    {
        android.databinding.tool.LayoutXmlProcessor r0;
        android.databinding.tool.store.ResourceBundle $r1;

        r0 := @this: android.databinding.tool.LayoutXmlProcessor;

        $r1 = r0.<android.databinding.tool.LayoutXmlProcessor: android.databinding.tool.store.ResourceBundle mResourceBundle>;

        return $r1;
    }

    public void processRemovedFile(java.io.File)
    {
        android.databinding.tool.LayoutXmlProcessor r0;
        java.io.File r1;
        android.databinding.tool.store.ResourceBundle $r2;

        r0 := @this: android.databinding.tool.LayoutXmlProcessor;

        r1 := @parameter0: java.io.File;

        $r2 = r0.<android.databinding.tool.LayoutXmlProcessor: android.databinding.tool.store.ResourceBundle mResourceBundle>;

        virtualinvoke $r2.<android.databinding.tool.store.ResourceBundle: void addRemovedFile(java.io.File)>(r1);

        return;
    }

    public boolean processSingleFile(java.io.File, java.io.File) throws javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException, javax.xml.xpath.XPathExpressionException, java.io.IOException
    {
        android.databinding.tool.LayoutXmlProcessor r0;
        java.io.File r1, r2;
        android.databinding.tool.store.ResourceBundle$LayoutFileBundle r3;
        android.databinding.tool.store.ResourceBundle $r4, $r8;
        android.databinding.tool.store.LayoutFileParser $r5;
        java.lang.String $r6;
        android.databinding.tool.LayoutXmlProcessor$OriginalFileLookup $r7;
        boolean $z0;

        r0 := @this: android.databinding.tool.LayoutXmlProcessor;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.io.File;

        $r5 = r0.<android.databinding.tool.LayoutXmlProcessor: android.databinding.tool.store.LayoutFileParser mLayoutFileParser>;

        $r4 = r0.<android.databinding.tool.LayoutXmlProcessor: android.databinding.tool.store.ResourceBundle mResourceBundle>;

        $r6 = virtualinvoke $r4.<android.databinding.tool.store.ResourceBundle: java.lang.String getAppPackage()>();

        $r7 = r0.<android.databinding.tool.LayoutXmlProcessor: android.databinding.tool.LayoutXmlProcessor$OriginalFileLookup mOriginalFileLookup>;

        r3 = virtualinvoke $r5.<android.databinding.tool.store.LayoutFileParser: android.databinding.tool.store.ResourceBundle$LayoutFileBundle parseXml(java.io.File,java.io.File,java.lang.String,android.databinding.tool.LayoutXmlProcessor$OriginalFileLookup)>(r1, r2, $r6, $r7);

        if r3 == null goto label1;

        $z0 = virtualinvoke r3.<android.databinding.tool.store.ResourceBundle$LayoutFileBundle: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r8 = r0.<android.databinding.tool.LayoutXmlProcessor: android.databinding.tool.store.ResourceBundle mResourceBundle>;

        virtualinvoke $r8.<android.databinding.tool.store.ResourceBundle: void addLayoutBundle(android.databinding.tool.store.ResourceBundle$LayoutFileBundle,boolean)>(r3, 1);

        return 1;

     label1:
        return 0;
    }

    public boolean processResources(android.databinding.tool.LayoutXmlProcessor$ResourceInput) throws javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException, javax.xml.xpath.XPathExpressionException, java.io.IOException
    {
        android.databinding.tool.LayoutXmlProcessor r0;
        android.databinding.tool.LayoutXmlProcessor$ResourceInput r1;
        android.databinding.tool.store.LayoutFileParser r2, $r5;
        java.net.URI r3;
        android.databinding.tool.LayoutXmlProcessor$1 r4, $r7;
        boolean $z0, $z1;
        java.io.File $r6;

        r0 := @this: android.databinding.tool.LayoutXmlProcessor;

        r1 := @parameter0: android.databinding.tool.LayoutXmlProcessor$ResourceInput;

        $z0 = r0.<android.databinding.tool.LayoutXmlProcessor: boolean mProcessingComplete>;

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r5 = new android.databinding.tool.store.LayoutFileParser;

        specialinvoke $r5.<android.databinding.tool.store.LayoutFileParser: void <init>()>();

        r2 = $r5;

        $r6 = virtualinvoke r1.<android.databinding.tool.LayoutXmlProcessor$ResourceInput: java.io.File getRootInputFolder()>();

        r3 = virtualinvoke $r6.<java.io.File: java.net.URI toURI()>();

        $r7 = new android.databinding.tool.LayoutXmlProcessor$1;

        specialinvoke $r7.<android.databinding.tool.LayoutXmlProcessor$1: void <init>(android.databinding.tool.LayoutXmlProcessor,java.net.URI,android.databinding.tool.LayoutXmlProcessor$ResourceInput,android.databinding.tool.store.LayoutFileParser)>(r0, r3, r1, r2);

        r4 = $r7;

        $z1 = virtualinvoke r1.<android.databinding.tool.LayoutXmlProcessor$ResourceInput: boolean isIncremental()>();

        if $z1 == 0 goto label2;

        staticinvoke <android.databinding.tool.LayoutXmlProcessor: void processIncrementalInputFiles(android.databinding.tool.LayoutXmlProcessor$ResourceInput,android.databinding.tool.LayoutXmlProcessor$ProcessFileCallback)>(r1, r4);

        goto label3;

     label2:
        staticinvoke <android.databinding.tool.LayoutXmlProcessor: void processAllInputFiles(android.databinding.tool.LayoutXmlProcessor$ResourceInput,android.databinding.tool.LayoutXmlProcessor$ProcessFileCallback)>(r1, r4);

     label3:
        r0.<android.databinding.tool.LayoutXmlProcessor: boolean mProcessingComplete> = 1;

        return 1;
    }

    public static java.lang.String toSystemDependentPath(java.lang.String)
    {
        char $c0, $c1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $c0 = <java.io.File: char separatorChar>;

        if $c0 == 47 goto label1;

        $c1 = <java.io.File: char separatorChar>;

        r0 = virtualinvoke r0.<java.lang.String: java.lang.String replace(char,char)>(47, $c1);

     label1:
        return r0;
    }

    public void writeLayoutInfoFiles(java.io.File) throws javax.xml.bind.JAXBException
    {
        android.databinding.tool.LayoutXmlProcessor r0;
        java.io.File r1;
        android.databinding.tool.writer.JavaFileWriter $r2;

        r0 := @this: android.databinding.tool.LayoutXmlProcessor;

        r1 := @parameter0: java.io.File;

        $r2 = r0.<android.databinding.tool.LayoutXmlProcessor: android.databinding.tool.writer.JavaFileWriter mFileWriter>;

        virtualinvoke r0.<android.databinding.tool.LayoutXmlProcessor: void writeLayoutInfoFiles(java.io.File,android.databinding.tool.writer.JavaFileWriter)>(r1, $r2);

        return;
    }

    public android.databinding.tool.writer.JavaFileWriter getFileWriter()
    {
        android.databinding.tool.LayoutXmlProcessor r0;
        android.databinding.tool.writer.JavaFileWriter $r1;

        r0 := @this: android.databinding.tool.LayoutXmlProcessor;

        $r1 = r0.<android.databinding.tool.LayoutXmlProcessor: android.databinding.tool.writer.JavaFileWriter mFileWriter>;

        return $r1;
    }

    public void writeLayoutInfoFiles(java.io.File, android.databinding.tool.writer.JavaFileWriter) throws javax.xml.bind.JAXBException
    {
        android.databinding.tool.LayoutXmlProcessor r0;
        java.io.File r1, $r10, r17;
        android.databinding.tool.writer.JavaFileWriter r2;
        android.databinding.tool.store.ResourceBundle$LayoutFileBundle r3;
        android.databinding.tool.store.ResourceBundle $r4, $r7;
        java.util.HashMap $r5;
        java.util.Collection $r6;
        boolean $z0, $z1, $z3;
        java.util.List $r8, r14;
        java.lang.Object $r9, $r11, $r12;
        java.util.Iterator r13, r15, r16;
        java.lang.String r18;

        r0 := @this: android.databinding.tool.LayoutXmlProcessor;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: android.databinding.tool.writer.JavaFileWriter;

        $r4 = r0.<android.databinding.tool.LayoutXmlProcessor: android.databinding.tool.store.ResourceBundle mResourceBundle>;

        $r5 = virtualinvoke $r4.<android.databinding.tool.store.ResourceBundle: java.util.HashMap getLayoutBundles()>();

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.util.Collection values()>();

        r13 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r11 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        r14 = (java.util.List) $r11;

        r15 = interfaceinvoke r14.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z3 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label3;

        $r12 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.databinding.tool.store.ResourceBundle$LayoutFileBundle) $r12;

        specialinvoke r0.<android.databinding.tool.LayoutXmlProcessor: void writeXmlFile(android.databinding.tool.writer.JavaFileWriter,java.io.File,android.databinding.tool.store.ResourceBundle$LayoutFileBundle)>(r2, r1, r3);

        goto label2;

     label3:
        goto label1;

     label4:
        $r7 = r0.<android.databinding.tool.LayoutXmlProcessor: android.databinding.tool.store.ResourceBundle mResourceBundle>;

        $r8 = virtualinvoke $r7.<android.databinding.tool.store.ResourceBundle: java.util.List getRemovedFiles()>();

        r16 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r9 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>();

        r17 = (java.io.File) $r9;

        r18 = staticinvoke <android.databinding.tool.LayoutXmlProcessor: java.lang.String generateExportFileName(java.io.File)>(r17);

        $r10 = new java.io.File;

        specialinvoke $r10.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, r18);

        staticinvoke <org.apache.commons.io.FileUtils: boolean deleteQuietly(java.io.File)>($r10);

        goto label5;

     label6:
        return;
    }

    private void writeXmlFile(android.databinding.tool.writer.JavaFileWriter, java.io.File, android.databinding.tool.store.ResourceBundle$LayoutFileBundle) throws javax.xml.bind.JAXBException
    {
        android.databinding.tool.LayoutXmlProcessor r0;
        android.databinding.tool.writer.JavaFileWriter r1;
        java.io.File r2, $r5;
        android.databinding.tool.store.ResourceBundle$LayoutFileBundle r3;
        java.lang.String r4, $r6;

        r0 := @this: android.databinding.tool.LayoutXmlProcessor;

        r1 := @parameter0: android.databinding.tool.writer.JavaFileWriter;

        r2 := @parameter1: java.io.File;

        r3 := @parameter2: android.databinding.tool.store.ResourceBundle$LayoutFileBundle;

        r4 = staticinvoke <android.databinding.tool.LayoutXmlProcessor: java.lang.String generateExportFileName(android.databinding.tool.store.ResourceBundle$LayoutFileBundle)>(r3);

        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>(r2, r4);

        $r6 = virtualinvoke r3.<android.databinding.tool.store.ResourceBundle$LayoutFileBundle: java.lang.String toXML()>();

        virtualinvoke r1.<android.databinding.tool.writer.JavaFileWriter: void writeToFile(java.io.File,java.lang.String)>($r5, $r6);

        return;
    }

    public java.lang.String getInfoClassFullName()
    {
        android.databinding.tool.LayoutXmlProcessor r0;

        r0 := @this: android.databinding.tool.LayoutXmlProcessor;

        return "android.databinding.layouts.DataBindingInfo";
    }

    private static java.lang.String generateExportFileName(android.databinding.tool.store.ResourceBundle$LayoutFileBundle)
    {
        android.databinding.tool.store.ResourceBundle$LayoutFileBundle r0;
        java.lang.String $r1, $r2, $r3;

        r0 := @parameter0: android.databinding.tool.store.ResourceBundle$LayoutFileBundle;

        $r1 = virtualinvoke r0.<android.databinding.tool.store.ResourceBundle$LayoutFileBundle: java.lang.String getFileName()>();

        $r2 = virtualinvoke r0.<android.databinding.tool.store.ResourceBundle$LayoutFileBundle: java.lang.String getDirectory()>();

        $r3 = staticinvoke <android.databinding.tool.LayoutXmlProcessor: java.lang.String generateExportFileName(java.lang.String,java.lang.String)>($r1, $r2);

        return $r3;
    }

    private static java.lang.String generateExportFileName(java.io.File)
    {
        java.io.File r0, $r3;
        java.lang.String r1, $r2, $r4, $r5;
        int $i0;

        r0 := @parameter0: java.io.File;

        r1 = virtualinvoke r0.<java.io.File: java.lang.String getName()>();

        $i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(int)>(46);

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r3 = virtualinvoke r0.<java.io.File: java.io.File getParentFile()>();

        $r4 = virtualinvoke $r3.<java.io.File: java.lang.String getName()>();

        $r5 = staticinvoke <android.databinding.tool.LayoutXmlProcessor: java.lang.String generateExportFileName(java.lang.String,java.lang.String)>($r2, $r4);

        return $r5;
    }

    public static java.lang.String generateExportFileName(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r7;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".xml");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public java.lang.String getPackage()
    {
        android.databinding.tool.LayoutXmlProcessor r0;
        android.databinding.tool.store.ResourceBundle $r1;
        java.lang.String $r2;

        r0 := @this: android.databinding.tool.LayoutXmlProcessor;

        $r1 = r0.<android.databinding.tool.LayoutXmlProcessor: android.databinding.tool.store.ResourceBundle mResourceBundle>;

        $r2 = virtualinvoke $r1.<android.databinding.tool.store.ResourceBundle: java.lang.String getAppPackage()>();

        return $r2;
    }

    public void writeEmptyInfoClass(boolean)
    {
        android.databinding.tool.LayoutXmlProcessor r0;
        boolean z0;
        java.lang.Class r1, $r17;
        java.lang.String r2, $r5, $r8, $r11;
        java.lang.StringBuilder $r3, $r4, $r6, $r7, $r9, $r10, $r12, $r13, $r14, $r15;
        android.databinding.tool.writer.JavaFileWriter $r16;

        r0 := @this: android.databinding.tool.LayoutXmlProcessor;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r17 = class "Landroidx/databinding/BindingBuildInfo;";

        goto label2;

     label1:
        $r17 = class "Landroid/databinding/BindingBuildInfo;";

     label2:
        r1 = $r17;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("package android.databinding.layouts;\n\nimport ");

        $r5 = virtualinvoke r1.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";\n\n@");

        $r8 = virtualinvoke r1.<java.lang.Class: java.lang.String getSimpleName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(buildId=\"");

        $r11 = r0.<android.databinding.tool.LayoutXmlProcessor: java.lang.String mBuildId>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\")\npublic class ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DataBindingInfo");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" {}\n");

        r2 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = r0.<android.databinding.tool.LayoutXmlProcessor: android.databinding.tool.writer.JavaFileWriter mFileWriter>;

        virtualinvoke $r16.<android.databinding.tool.writer.JavaFileWriter: void writeToFile(java.lang.String,java.lang.String)>("android.databinding.layouts.DataBindingInfo", r2);

        return;
    }

    private static boolean lambda$static$1(java.io.File, java.lang.String)
    {
        java.io.File r0;
        java.lang.String r1, $r2;
        boolean $z0;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean endsWith(java.lang.String)>(".xml");

        return $z0;
    }

    private static boolean lambda$static$0(java.io.File, java.lang.String)
    {
        java.io.File r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("layout");

        return $z0;
    }

    static android.databinding.tool.store.ResourceBundle access$000(android.databinding.tool.LayoutXmlProcessor)
    {
        android.databinding.tool.LayoutXmlProcessor r0;
        android.databinding.tool.store.ResourceBundle $r1;

        r0 := @parameter0: android.databinding.tool.LayoutXmlProcessor;

        $r1 = r0.<android.databinding.tool.LayoutXmlProcessor: android.databinding.tool.store.ResourceBundle mResourceBundle>;

        return $r1;
    }

    static android.databinding.tool.LayoutXmlProcessor$OriginalFileLookup access$100(android.databinding.tool.LayoutXmlProcessor)
    {
        android.databinding.tool.LayoutXmlProcessor r0;
        android.databinding.tool.LayoutXmlProcessor$OriginalFileLookup $r1;

        r0 := @parameter0: android.databinding.tool.LayoutXmlProcessor;

        $r1 = r0.<android.databinding.tool.LayoutXmlProcessor: android.databinding.tool.LayoutXmlProcessor$OriginalFileLookup mOriginalFileLookup>;

        return $r1;
    }

    static void <clinit>()
    {
        java.io.FilenameFilter $r0, $r1;

        $r0 = dynamicinvoke "accept" <java.io.FilenameFilter ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: boolean __METHODTYPE__(java.io.File,java.lang.String), methodhandle: "REF_INVOKE_STATIC" <android.databinding.tool.LayoutXmlProcessor: boolean lambda$static$0(java.io.File,java.lang.String)>, methodtype: boolean __METHODTYPE__(java.io.File,java.lang.String));

        <android.databinding.tool.LayoutXmlProcessor: java.io.FilenameFilter LAYOUT_FOLDER_FILTER> = $r0;

        $r1 = dynamicinvoke "accept" <java.io.FilenameFilter ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: boolean __METHODTYPE__(java.io.File,java.lang.String), methodhandle: "REF_INVOKE_STATIC" <android.databinding.tool.LayoutXmlProcessor: boolean lambda$static$1(java.io.File,java.lang.String)>, methodtype: boolean __METHODTYPE__(java.io.File,java.lang.String));

        <android.databinding.tool.LayoutXmlProcessor: java.io.FilenameFilter XML_FILE_FILTER> = $r1;

        return;
    }

android.databinding.tool.LayoutXmlProcessor$1
<android.databinding.tool.LayoutXmlProcessor$1: java.net.URI val$inputRootUri>
<android.databinding.tool.LayoutXmlProcessor$1: android.databinding.tool.LayoutXmlProcessor$ResourceInput val$input>
<android.databinding.tool.LayoutXmlProcessor$1: android.databinding.tool.store.LayoutFileParser val$layoutFileParser>
<android.databinding.tool.LayoutXmlProcessor$1: android.databinding.tool.LayoutXmlProcessor this$0>
    void <init>(android.databinding.tool.LayoutXmlProcessor, java.net.URI, android.databinding.tool.LayoutXmlProcessor$ResourceInput, android.databinding.tool.store.LayoutFileParser)
    {
        android.databinding.tool.LayoutXmlProcessor$1 r0;
        android.databinding.tool.LayoutXmlProcessor r1;
        java.net.URI r2;
        android.databinding.tool.LayoutXmlProcessor$ResourceInput r3;
        android.databinding.tool.store.LayoutFileParser r4;

        r0 := @this: android.databinding.tool.LayoutXmlProcessor$1;

        r1 := @parameter0: android.databinding.tool.LayoutXmlProcessor;

        r2 := @parameter1: java.net.URI;

        r3 := @parameter2: android.databinding.tool.LayoutXmlProcessor$ResourceInput;

        r4 := @parameter3: android.databinding.tool.store.LayoutFileParser;

        r0.<android.databinding.tool.LayoutXmlProcessor$1: android.databinding.tool.LayoutXmlProcessor this$0> = r1;

        r0.<android.databinding.tool.LayoutXmlProcessor$1: java.net.URI val$inputRootUri> = r2;

        r0.<android.databinding.tool.LayoutXmlProcessor$1: android.databinding.tool.LayoutXmlProcessor$ResourceInput val$input> = r3;

        r0.<android.databinding.tool.LayoutXmlProcessor$1: android.databinding.tool.store.LayoutFileParser val$layoutFileParser> = r4;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private java.io.File convertToOutFile(java.io.File)
    {
        android.databinding.tool.LayoutXmlProcessor$1 r0;
        java.io.File r1, $r7, $r9;
        java.lang.String r2, $r6;
        java.net.URI $r3, $r4, $r5;
        android.databinding.tool.LayoutXmlProcessor$ResourceInput $r8;

        r0 := @this: android.databinding.tool.LayoutXmlProcessor$1;

        r1 := @parameter0: java.io.File;

        $r3 = r0.<android.databinding.tool.LayoutXmlProcessor$1: java.net.URI val$inputRootUri>;

        $r4 = virtualinvoke r1.<java.io.File: java.net.URI toURI()>();

        $r5 = virtualinvoke $r3.<java.net.URI: java.net.URI relativize(java.net.URI)>($r4);

        $r6 = virtualinvoke $r5.<java.net.URI: java.lang.String getPath()>();

        r2 = staticinvoke <android.databinding.tool.LayoutXmlProcessor: java.lang.String toSystemDependentPath(java.lang.String)>($r6);

        $r7 = new java.io.File;

        $r8 = r0.<android.databinding.tool.LayoutXmlProcessor$1: android.databinding.tool.LayoutXmlProcessor$ResourceInput val$input>;

        $r9 = virtualinvoke $r8.<android.databinding.tool.LayoutXmlProcessor$ResourceInput: java.io.File getRootOutputFolder()>();

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, r2);

        return $r7;
    }

    public void processLayoutFile(java.io.File) throws javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException, javax.xml.xpath.XPathExpressionException, java.io.IOException
    {
        android.databinding.tool.LayoutXmlProcessor$1 r0;
        java.io.File r1, r2;
        android.databinding.tool.store.ResourceBundle$LayoutFileBundle r3;
        android.databinding.tool.LayoutXmlProcessor $r4, $r8, $r10;
        android.databinding.tool.store.LayoutFileParser $r5;
        android.databinding.tool.store.ResourceBundle $r6, $r11;
        java.lang.String $r7;
        android.databinding.tool.LayoutXmlProcessor$OriginalFileLookup $r9;
        boolean $z0;

        r0 := @this: android.databinding.tool.LayoutXmlProcessor$1;

        r1 := @parameter0: java.io.File;

        r2 = specialinvoke r0.<android.databinding.tool.LayoutXmlProcessor$1: java.io.File convertToOutFile(java.io.File)>(r1);

        $r5 = r0.<android.databinding.tool.LayoutXmlProcessor$1: android.databinding.tool.store.LayoutFileParser val$layoutFileParser>;

        $r4 = r0.<android.databinding.tool.LayoutXmlProcessor$1: android.databinding.tool.LayoutXmlProcessor this$0>;

        $r6 = staticinvoke <android.databinding.tool.LayoutXmlProcessor: android.databinding.tool.store.ResourceBundle access$000(android.databinding.tool.LayoutXmlProcessor)>($r4);

        $r7 = virtualinvoke $r6.<android.databinding.tool.store.ResourceBundle: java.lang.String getAppPackage()>();

        $r8 = r0.<android.databinding.tool.LayoutXmlProcessor$1: android.databinding.tool.LayoutXmlProcessor this$0>;

        $r9 = staticinvoke <android.databinding.tool.LayoutXmlProcessor: android.databinding.tool.LayoutXmlProcessor$OriginalFileLookup access$100(android.databinding.tool.LayoutXmlProcessor)>($r8);

        r3 = virtualinvoke $r5.<android.databinding.tool.store.LayoutFileParser: android.databinding.tool.store.ResourceBundle$LayoutFileBundle parseXml(java.io.File,java.io.File,java.lang.String,android.databinding.tool.LayoutXmlProcessor$OriginalFileLookup)>(r1, r2, $r7, $r9);

        if r3 == null goto label1;

        $z0 = virtualinvoke r3.<android.databinding.tool.store.ResourceBundle$LayoutFileBundle: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r10 = r0.<android.databinding.tool.LayoutXmlProcessor$1: android.databinding.tool.LayoutXmlProcessor this$0>;

        $r11 = staticinvoke <android.databinding.tool.LayoutXmlProcessor: android.databinding.tool.store.ResourceBundle access$000(android.databinding.tool.LayoutXmlProcessor)>($r10);

        virtualinvoke $r11.<android.databinding.tool.store.ResourceBundle: void addLayoutBundle(android.databinding.tool.store.ResourceBundle$LayoutFileBundle,boolean)>(r3, 1);

     label1:
        return;
    }

    public void processOtherFile(java.io.File, java.io.File) throws java.io.IOException
    {
        android.databinding.tool.LayoutXmlProcessor$1 r0;
        java.io.File r1, r2, r3, $r4;
        java.lang.String $r5;

        r0 := @this: android.databinding.tool.LayoutXmlProcessor$1;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.io.File;

        r3 = specialinvoke r0.<android.databinding.tool.LayoutXmlProcessor$1: java.io.File convertToOutFile(java.io.File)>(r1);

        $r4 = new java.io.File;

        $r5 = virtualinvoke r2.<java.io.File: java.lang.String getName()>();

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>(r3, $r5);

        staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>(r2, $r4);

        return;
    }

    public void processRemovedLayoutFile(java.io.File)
    {
        android.databinding.tool.LayoutXmlProcessor$1 r0;
        java.io.File r1, r2;
        android.databinding.tool.LayoutXmlProcessor $r3;
        android.databinding.tool.store.ResourceBundle $r4;

        r0 := @this: android.databinding.tool.LayoutXmlProcessor$1;

        r1 := @parameter0: java.io.File;

        $r3 = r0.<android.databinding.tool.LayoutXmlProcessor$1: android.databinding.tool.LayoutXmlProcessor this$0>;

        $r4 = staticinvoke <android.databinding.tool.LayoutXmlProcessor: android.databinding.tool.store.ResourceBundle access$000(android.databinding.tool.LayoutXmlProcessor)>($r3);

        virtualinvoke $r4.<android.databinding.tool.store.ResourceBundle: void addRemovedFile(java.io.File)>(r1);

        r2 = specialinvoke r0.<android.databinding.tool.LayoutXmlProcessor$1: java.io.File convertToOutFile(java.io.File)>(r1);

        staticinvoke <org.apache.commons.io.FileUtils: boolean deleteQuietly(java.io.File)>(r2);

        return;
    }

    public void processRemovedOtherFile(java.io.File, java.io.File) throws java.io.IOException
    {
        android.databinding.tool.LayoutXmlProcessor$1 r0;
        java.io.File r1, r2, r3, $r4;
        java.lang.String $r5;

        r0 := @this: android.databinding.tool.LayoutXmlProcessor$1;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.io.File;

        r3 = specialinvoke r0.<android.databinding.tool.LayoutXmlProcessor$1: java.io.File convertToOutFile(java.io.File)>(r1);

        $r4 = new java.io.File;

        $r5 = virtualinvoke r2.<java.io.File: java.lang.String getName()>();

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>(r3, $r5);

        staticinvoke <org.apache.commons.io.FileUtils: boolean deleteQuietly(java.io.File)>($r4);

        return;
    }

    public void processOtherFolder(java.io.File)
    {
        android.databinding.tool.LayoutXmlProcessor$1 r0;
        java.io.File r1, $r2;

        r0 := @this: android.databinding.tool.LayoutXmlProcessor$1;

        r1 := @parameter0: java.io.File;

        $r2 = specialinvoke r0.<android.databinding.tool.LayoutXmlProcessor$1: java.io.File convertToOutFile(java.io.File)>(r1);

        virtualinvoke $r2.<java.io.File: boolean mkdirs()>();

        return;
    }

    public void processLayoutFolder(java.io.File)
    {
        android.databinding.tool.LayoutXmlProcessor$1 r0;
        java.io.File r1, $r2;

        r0 := @this: android.databinding.tool.LayoutXmlProcessor$1;

        r1 := @parameter0: java.io.File;

        $r2 = specialinvoke r0.<android.databinding.tool.LayoutXmlProcessor$1: java.io.File convertToOutFile(java.io.File)>(r1);

        virtualinvoke $r2.<java.io.File: boolean mkdirs()>();

        return;
    }

    public void processOtherRootFile(java.io.File) throws java.io.IOException
    {
        android.databinding.tool.LayoutXmlProcessor$1 r0;
        java.io.File r1, r2;
        boolean $z0;

        r0 := @this: android.databinding.tool.LayoutXmlProcessor$1;

        r1 := @parameter0: java.io.File;

        r2 = specialinvoke r0.<android.databinding.tool.LayoutXmlProcessor$1: java.io.File convertToOutFile(java.io.File)>(r1);

        $z0 = virtualinvoke r1.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label1;

        staticinvoke <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File)>(r1, r2);

        goto label2;

     label1:
        staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>(r1, r2);

     label2:
        return;
    }

    public void processRemovedOtherRootFile(java.io.File) throws java.io.IOException
    {
        android.databinding.tool.LayoutXmlProcessor$1 r0;
        java.io.File r1, r2;

        r0 := @this: android.databinding.tool.LayoutXmlProcessor$1;

        r1 := @parameter0: java.io.File;

        r2 = specialinvoke r0.<android.databinding.tool.LayoutXmlProcessor$1: java.io.File convertToOutFile(java.io.File)>(r1);

        staticinvoke <org.apache.commons.io.FileUtils: boolean deleteQuietly(java.io.File)>(r2);

        return;
    }

android.databinding.tool.LayoutXmlProcessor$OriginalFileLookup
<android.databinding.tool.LayoutXmlProcessor$OriginalFileLookup: java.io.File getOriginalFileFor(java.io.File)>
android.databinding.tool.LayoutXmlProcessor$ProcessFileCallback
<android.databinding.tool.LayoutXmlProcessor$ProcessFileCallback: void processLayoutFile(java.io.File)>
<android.databinding.tool.LayoutXmlProcessor$ProcessFileCallback: void processOtherFile(java.io.File,java.io.File)>
<android.databinding.tool.LayoutXmlProcessor$ProcessFileCallback: void processRemovedLayoutFile(java.io.File)>
<android.databinding.tool.LayoutXmlProcessor$ProcessFileCallback: void processRemovedOtherFile(java.io.File,java.io.File)>
<android.databinding.tool.LayoutXmlProcessor$ProcessFileCallback: void processOtherFolder(java.io.File)>
<android.databinding.tool.LayoutXmlProcessor$ProcessFileCallback: void processLayoutFolder(java.io.File)>
<android.databinding.tool.LayoutXmlProcessor$ProcessFileCallback: void processOtherRootFile(java.io.File)>
<android.databinding.tool.LayoutXmlProcessor$ProcessFileCallback: void processRemovedOtherRootFile(java.io.File)>
android.databinding.tool.LayoutXmlProcessor$ResourceInput
<android.databinding.tool.LayoutXmlProcessor$ResourceInput: boolean mIncremental>
<android.databinding.tool.LayoutXmlProcessor$ResourceInput: java.io.File mRootInputFolder>
<android.databinding.tool.LayoutXmlProcessor$ResourceInput: java.io.File mRootOutputFolder>
<android.databinding.tool.LayoutXmlProcessor$ResourceInput: java.util.List mAdded>
<android.databinding.tool.LayoutXmlProcessor$ResourceInput: java.util.List mRemoved>
<android.databinding.tool.LayoutXmlProcessor$ResourceInput: java.util.List mChanged>
    public void <init>(boolean, java.io.File, java.io.File)
    {
        android.databinding.tool.LayoutXmlProcessor$ResourceInput r0;
        boolean z0;
        java.io.File r1, r2;
        java.util.ArrayList $r3, $r4, $r5;

        r0 := @this: android.databinding.tool.LayoutXmlProcessor$ResourceInput;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.io.File;

        r2 := @parameter2: java.io.File;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<android.databinding.tool.LayoutXmlProcessor$ResourceInput: java.util.List mAdded> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<android.databinding.tool.LayoutXmlProcessor$ResourceInput: java.util.List mRemoved> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<android.databinding.tool.LayoutXmlProcessor$ResourceInput: java.util.List mChanged> = $r5;

        r0.<android.databinding.tool.LayoutXmlProcessor$ResourceInput: boolean mIncremental> = z0;

        r0.<android.databinding.tool.LayoutXmlProcessor$ResourceInput: java.io.File mRootInputFolder> = r1;

        r0.<android.databinding.tool.LayoutXmlProcessor$ResourceInput: java.io.File mRootOutputFolder> = r2;

        return;
    }

    public void added(java.io.File)
    {
        android.databinding.tool.LayoutXmlProcessor$ResourceInput r0;
        java.io.File r1;
        java.util.List $r2;

        r0 := @this: android.databinding.tool.LayoutXmlProcessor$ResourceInput;

        r1 := @parameter0: java.io.File;

        $r2 = r0.<android.databinding.tool.LayoutXmlProcessor$ResourceInput: java.util.List mAdded>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removed(java.io.File)
    {
        android.databinding.tool.LayoutXmlProcessor$ResourceInput r0;
        java.io.File r1;
        java.util.List $r2;

        r0 := @this: android.databinding.tool.LayoutXmlProcessor$ResourceInput;

        r1 := @parameter0: java.io.File;

        $r2 = r0.<android.databinding.tool.LayoutXmlProcessor$ResourceInput: java.util.List mRemoved>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void changed(java.io.File)
    {
        android.databinding.tool.LayoutXmlProcessor$ResourceInput r0;
        java.io.File r1;
        java.util.List $r2;

        r0 := @this: android.databinding.tool.LayoutXmlProcessor$ResourceInput;

        r1 := @parameter0: java.io.File;

        $r2 = r0.<android.databinding.tool.LayoutXmlProcessor$ResourceInput: java.util.List mChanged>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public boolean shouldCopy()
    {
        android.databinding.tool.LayoutXmlProcessor$ResourceInput r0;
        java.io.File $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: android.databinding.tool.LayoutXmlProcessor$ResourceInput;

        $r2 = r0.<android.databinding.tool.LayoutXmlProcessor$ResourceInput: java.io.File mRootInputFolder>;

        $r1 = r0.<android.databinding.tool.LayoutXmlProcessor$ResourceInput: java.io.File mRootOutputFolder>;

        $z0 = virtualinvoke $r2.<java.io.File: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    java.util.List getAdded()
    {
        android.databinding.tool.LayoutXmlProcessor$ResourceInput r0;
        java.util.List $r1;

        r0 := @this: android.databinding.tool.LayoutXmlProcessor$ResourceInput;

        $r1 = r0.<android.databinding.tool.LayoutXmlProcessor$ResourceInput: java.util.List mAdded>;

        return $r1;
    }

    java.util.List getRemoved()
    {
        android.databinding.tool.LayoutXmlProcessor$ResourceInput r0;
        java.util.List $r1;

        r0 := @this: android.databinding.tool.LayoutXmlProcessor$ResourceInput;

        $r1 = r0.<android.databinding.tool.LayoutXmlProcessor$ResourceInput: java.util.List mRemoved>;

        return $r1;
    }

    java.util.List getChanged()
    {
        android.databinding.tool.LayoutXmlProcessor$ResourceInput r0;
        java.util.List $r1;

        r0 := @this: android.databinding.tool.LayoutXmlProcessor$ResourceInput;

        $r1 = r0.<android.databinding.tool.LayoutXmlProcessor$ResourceInput: java.util.List mChanged>;

        return $r1;
    }

    java.io.File getRootInputFolder()
    {
        android.databinding.tool.LayoutXmlProcessor$ResourceInput r0;
        java.io.File $r1;

        r0 := @this: android.databinding.tool.LayoutXmlProcessor$ResourceInput;

        $r1 = r0.<android.databinding.tool.LayoutXmlProcessor$ResourceInput: java.io.File mRootInputFolder>;

        return $r1;
    }

    java.io.File getRootOutputFolder()
    {
        android.databinding.tool.LayoutXmlProcessor$ResourceInput r0;
        java.io.File $r1;

        r0 := @this: android.databinding.tool.LayoutXmlProcessor$ResourceInput;

        $r1 = r0.<android.databinding.tool.LayoutXmlProcessor$ResourceInput: java.io.File mRootOutputFolder>;

        return $r1;
    }

    public boolean isIncremental()
    {
        android.databinding.tool.LayoutXmlProcessor$ResourceInput r0;
        boolean $z0;

        r0 := @this: android.databinding.tool.LayoutXmlProcessor$ResourceInput;

        $z0 = r0.<android.databinding.tool.LayoutXmlProcessor$ResourceInput: boolean mIncremental>;

        return $z0;
    }

    public java.lang.String toString()
    {
        android.databinding.tool.LayoutXmlProcessor$ResourceInput r0;
        java.lang.StringBuilder r1, $r2, $r3, $r4, $r5, $r6, $r8, $r9;
        boolean $z0;
        java.io.File $r7, $r10;
        java.util.List $r12, $r13, $r14;
        java.lang.String $r15;

        r0 := @this: android.databinding.tool.LayoutXmlProcessor$ResourceInput;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        r1 = $r2;

        $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ResourceInput{");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mIncremental=");

        $z0 = r0.<android.databinding.tool.LayoutXmlProcessor$ResourceInput: boolean mIncremental>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mRootInputFolder=");

        $r7 = r0.<android.databinding.tool.LayoutXmlProcessor$ResourceInput: java.io.File mRootInputFolder>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mRootOutputFolder=");

        $r10 = r0.<android.databinding.tool.LayoutXmlProcessor$ResourceInput: java.io.File mRootOutputFolder>;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = r0.<android.databinding.tool.LayoutXmlProcessor$ResourceInput: java.util.List mAdded>;

        staticinvoke <android.databinding.tool.LayoutXmlProcessor$ResourceInput: void logFiles(java.lang.StringBuilder,java.lang.String,java.util.List)>(r1, "added", $r12);

        $r13 = r0.<android.databinding.tool.LayoutXmlProcessor$ResourceInput: java.util.List mRemoved>;

        staticinvoke <android.databinding.tool.LayoutXmlProcessor$ResourceInput: void logFiles(java.lang.StringBuilder,java.lang.String,java.util.List)>(r1, "removed", $r13);

        $r14 = r0.<android.databinding.tool.LayoutXmlProcessor$ResourceInput: java.util.List mChanged>;

        staticinvoke <android.databinding.tool.LayoutXmlProcessor$ResourceInput: void logFiles(java.lang.StringBuilder,java.lang.String,java.util.List)>(r1, "changed", $r14);

        $r15 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r15;
    }

    private static void logFiles(java.lang.StringBuilder, java.lang.String, java.util.List)
    {
        java.lang.StringBuilder r0, $r5, $r8;
        java.lang.String r1, $r9;
        java.util.List r2;
        java.util.Iterator r3;
        java.io.File r4;
        boolean $z0;
        java.lang.Object $r7;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.util.List;

        $r5 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n  ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.io.File) $r7;

        $r8 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n   - ");

        $r9 = virtualinvoke r4.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        goto label1;

     label2:
        return;
    }

