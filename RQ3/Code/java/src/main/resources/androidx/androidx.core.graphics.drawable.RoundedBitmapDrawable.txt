androidx.core.graphics.drawable.RoundedBitmapDrawable
<androidx.core.graphics.drawable.RoundedBitmapDrawable: int DEFAULT_PAINT_FLAGS>
<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Bitmap mBitmap>
<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mTargetDensity>
<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mGravity>
<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Paint mPaint>
<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.BitmapShader mBitmapShader>
<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Matrix mShaderMatrix>
<androidx.core.graphics.drawable.RoundedBitmapDrawable: float mCornerRadius>
<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Rect mDstRect>
<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.RectF mDstRectF>
<androidx.core.graphics.drawable.RoundedBitmapDrawable: boolean mApplyGravity>
<androidx.core.graphics.drawable.RoundedBitmapDrawable: boolean mIsCircular>
<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mBitmapWidth>
<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mBitmapHeight>
    public final android.graphics.Paint getPaint()
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable r0;
        android.graphics.Paint $r1;

        r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        $r1 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Paint mPaint>;

        return $r1;
    }

    public final android.graphics.Bitmap getBitmap()
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable r0;
        android.graphics.Bitmap $r1;

        r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        $r1 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Bitmap mBitmap>;

        return $r1;
    }

    private void computeBitmapSize()
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable r0;
        int $i0, $i1, $i2, $i3;
        android.graphics.Bitmap $r1, $r2;

        r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        $r1 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Bitmap mBitmap>;

        $i0 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mTargetDensity>;

        $i1 = virtualinvoke $r1.<android.graphics.Bitmap: int getScaledWidth(int)>($i0);

        r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mBitmapWidth> = $i1;

        $r2 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Bitmap mBitmap>;

        $i2 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mTargetDensity>;

        $i3 = virtualinvoke $r2.<android.graphics.Bitmap: int getScaledHeight(int)>($i2);

        r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mBitmapHeight> = $i3;

        return;
    }

    public void setTargetDensity(android.graphics.Canvas)
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable r0;
        android.graphics.Canvas r1;
        int $i0;

        r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        r1 := @parameter0: android.graphics.Canvas;

        $i0 = virtualinvoke r1.<android.graphics.Canvas: int getDensity()>();

        virtualinvoke r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: void setTargetDensity(int)>($i0);

        return;
    }

    public void setTargetDensity(android.util.DisplayMetrics)
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable r0;
        android.util.DisplayMetrics r1;
        int $i0;

        r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        r1 := @parameter0: android.util.DisplayMetrics;

        $i0 = r1.<android.util.DisplayMetrics: int densityDpi>;

        virtualinvoke r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: void setTargetDensity(int)>($i0);

        return;
    }

    public void setTargetDensity(int)
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable r0;
        int i0, $i1, $i2;
        android.graphics.Bitmap $r1;

        r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        i0 := @parameter0: int;

        $i1 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mTargetDensity>;

        if $i1 == i0 goto label4;

        if i0 != 0 goto label1;

        $i2 = 160;

        goto label2;

     label1:
        $i2 = i0;

     label2:
        r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mTargetDensity> = $i2;

        $r1 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Bitmap mBitmap>;

        if $r1 == null goto label3;

        specialinvoke r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: void computeBitmapSize()>();

     label3:
        virtualinvoke r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: void invalidateSelf()>();

     label4:
        return;
    }

    public int getGravity()
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable r0;
        int $i0;

        r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        $i0 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mGravity>;

        return $i0;
    }

    public void setGravity(int)
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable r0;
        int i0, $i1;

        r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        i0 := @parameter0: int;

        $i1 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mGravity>;

        if $i1 == i0 goto label1;

        r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mGravity> = i0;

        r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: boolean mApplyGravity> = 1;

        virtualinvoke r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: void invalidateSelf()>();

     label1:
        return;
    }

    public void setMipMap(boolean)
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable r0;
        boolean z0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        z0 := @parameter0: boolean;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public boolean hasMipMap()
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public void setAntiAlias(boolean)
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable r0;
        boolean z0;
        android.graphics.Paint $r1;

        r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        z0 := @parameter0: boolean;

        $r1 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Paint mPaint>;

        virtualinvoke $r1.<android.graphics.Paint: void setAntiAlias(boolean)>(z0);

        virtualinvoke r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: void invalidateSelf()>();

        return;
    }

    public boolean hasAntiAlias()
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable r0;
        android.graphics.Paint $r1;
        boolean $z0;

        r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        $r1 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Paint mPaint>;

        $z0 = virtualinvoke $r1.<android.graphics.Paint: boolean isAntiAlias()>();

        return $z0;
    }

    public void setFilterBitmap(boolean)
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable r0;
        boolean z0;
        android.graphics.Paint $r1;

        r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        z0 := @parameter0: boolean;

        $r1 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Paint mPaint>;

        virtualinvoke $r1.<android.graphics.Paint: void setFilterBitmap(boolean)>(z0);

        virtualinvoke r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: void invalidateSelf()>();

        return;
    }

    public void setDither(boolean)
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable r0;
        boolean z0;
        android.graphics.Paint $r1;

        r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        z0 := @parameter0: boolean;

        $r1 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Paint mPaint>;

        virtualinvoke $r1.<android.graphics.Paint: void setDither(boolean)>(z0);

        virtualinvoke r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: void invalidateSelf()>();

        return;
    }

    void gravityCompatApply(int, int, int, android.graphics.Rect, android.graphics.Rect)
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable r0;
        int i0, i1, i2;
        android.graphics.Rect r1, r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: android.graphics.Rect;

        r2 := @parameter4: android.graphics.Rect;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    void updateDstRect()
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        boolean $z0, $z1;
        android.graphics.Rect $r1, $r2, $r3, $r19, $r20, $r21, $r22, $r23, $r24, $r25;
        android.graphics.RectF $r4, $r6, $r7, $r9, $r12;
        android.graphics.BitmapShader $r5, $r15, $r16;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9;
        android.graphics.Matrix $r8, $r10, $r14;
        android.graphics.Bitmap $r11, $r13;
        android.graphics.Paint $r17;

        r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        $z0 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: boolean mApplyGravity>;

        if $z0 == 0 goto label4;

        $z1 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: boolean mIsCircular>;

        if $z1 == 0 goto label1;

        $i10 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mBitmapWidth>;

        $i9 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mBitmapHeight>;

        i0 = staticinvoke <java.lang.Math: int min(int,int)>($i10, $i9);

        $i11 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mGravity>;

        $r19 = virtualinvoke r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Rect getBounds()>();

        $r20 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Rect mDstRect>;

        virtualinvoke r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: void gravityCompatApply(int,int,int,android.graphics.Rect,android.graphics.Rect)>($i11, i0, i0, $r19, $r20);

        $r21 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Rect mDstRect>;

        $i12 = virtualinvoke $r21.<android.graphics.Rect: int width()>();

        $r22 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Rect mDstRect>;

        $i13 = virtualinvoke $r22.<android.graphics.Rect: int height()>();

        i1 = staticinvoke <java.lang.Math: int min(int,int)>($i12, $i13);

        $r23 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Rect mDstRect>;

        $i14 = virtualinvoke $r23.<android.graphics.Rect: int width()>();

        $i15 = $i14 - i1;

        $i16 = $i15 / 2;

        i2 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i16);

        $r24 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Rect mDstRect>;

        $i17 = virtualinvoke $r24.<android.graphics.Rect: int height()>();

        $i18 = $i17 - i1;

        $i19 = $i18 / 2;

        i3 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i19);

        $r25 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Rect mDstRect>;

        virtualinvoke $r25.<android.graphics.Rect: void inset(int,int)>(i2, i3);

        $f8 = (float) i1;

        $f9 = 0.5F * $f8;

        r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: float mCornerRadius> = $f9;

        goto label2;

     label1:
        $i4 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mGravity>;

        $i5 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mBitmapWidth>;

        $i6 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mBitmapHeight>;

        $r1 = virtualinvoke r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Rect getBounds()>();

        $r2 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Rect mDstRect>;

        virtualinvoke r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: void gravityCompatApply(int,int,int,android.graphics.Rect,android.graphics.Rect)>($i4, $i5, $i6, $r1, $r2);

     label2:
        $r4 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.RectF mDstRectF>;

        $r3 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Rect mDstRect>;

        virtualinvoke $r4.<android.graphics.RectF: void set(android.graphics.Rect)>($r3);

        $r5 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.BitmapShader mBitmapShader>;

        if $r5 == null goto label3;

        $r8 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Matrix mShaderMatrix>;

        $r6 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.RectF mDstRectF>;

        $f1 = $r6.<android.graphics.RectF: float left>;

        $r7 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.RectF mDstRectF>;

        $f0 = $r7.<android.graphics.RectF: float top>;

        virtualinvoke $r8.<android.graphics.Matrix: void setTranslate(float,float)>($f1, $f0);

        $r10 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Matrix mShaderMatrix>;

        $r9 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.RectF mDstRectF>;

        $f2 = virtualinvoke $r9.<android.graphics.RectF: float width()>();

        $r11 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Bitmap mBitmap>;

        $i7 = virtualinvoke $r11.<android.graphics.Bitmap: int getWidth()>();

        $f3 = (float) $i7;

        $f4 = $f2 / $f3;

        $r12 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.RectF mDstRectF>;

        $f5 = virtualinvoke $r12.<android.graphics.RectF: float height()>();

        $r13 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Bitmap mBitmap>;

        $i8 = virtualinvoke $r13.<android.graphics.Bitmap: int getHeight()>();

        $f6 = (float) $i8;

        $f7 = $f5 / $f6;

        virtualinvoke $r10.<android.graphics.Matrix: boolean preScale(float,float)>($f4, $f7);

        $r15 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.BitmapShader mBitmapShader>;

        $r14 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Matrix mShaderMatrix>;

        virtualinvoke $r15.<android.graphics.BitmapShader: void setLocalMatrix(android.graphics.Matrix)>($r14);

        $r17 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Paint mPaint>;

        $r16 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.BitmapShader mBitmapShader>;

        virtualinvoke $r17.<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>($r16);

     label3:
        r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: boolean mApplyGravity> = 0;

     label4:
        return;
    }

    public void draw(android.graphics.Canvas)
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable r0;
        android.graphics.Canvas r1;
        android.graphics.Bitmap r2;
        android.graphics.Paint $r3, $r5, $r7;
        android.graphics.Shader $r4;
        float $f0, $f1;
        android.graphics.RectF $r6;
        android.graphics.Rect $r8;

        r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        r1 := @parameter0: android.graphics.Canvas;

        r2 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Bitmap mBitmap>;

        if r2 != null goto label1;

        return;

     label1:
        virtualinvoke r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: void updateDstRect()>();

        $r3 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Paint mPaint>;

        $r4 = virtualinvoke $r3.<android.graphics.Paint: android.graphics.Shader getShader()>();

        if $r4 != null goto label2;

        $r8 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Rect mDstRect>;

        $r7 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Paint mPaint>;

        virtualinvoke r1.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Rect,android.graphics.Paint)>(r2, null, $r8, $r7);

        goto label3;

     label2:
        $r6 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.RectF mDstRectF>;

        $f1 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: float mCornerRadius>;

        $f0 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: float mCornerRadius>;

        $r5 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Paint mPaint>;

        virtualinvoke r1.<android.graphics.Canvas: void drawRoundRect(android.graphics.RectF,float,float,android.graphics.Paint)>($r6, $f1, $f0, $r5);

     label3:
        return;
    }

    public void setAlpha(int)
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable r0;
        int i0, i1;
        android.graphics.Paint $r1, $r2;

        r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Paint mPaint>;

        i1 = virtualinvoke $r1.<android.graphics.Paint: int getAlpha()>();

        if i0 == i1 goto label1;

        $r2 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Paint mPaint>;

        virtualinvoke $r2.<android.graphics.Paint: void setAlpha(int)>(i0);

        virtualinvoke r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: void invalidateSelf()>();

     label1:
        return;
    }

    public int getAlpha()
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable r0;
        android.graphics.Paint $r1;
        int $i0;

        r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        $r1 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Paint mPaint>;

        $i0 = virtualinvoke $r1.<android.graphics.Paint: int getAlpha()>();

        return $i0;
    }

    public void setColorFilter(android.graphics.ColorFilter)
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable r0;
        android.graphics.ColorFilter r1;
        android.graphics.Paint $r2;

        r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        r1 := @parameter0: android.graphics.ColorFilter;

        $r2 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Paint mPaint>;

        virtualinvoke $r2.<android.graphics.Paint: android.graphics.ColorFilter setColorFilter(android.graphics.ColorFilter)>(r1);

        virtualinvoke r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: void invalidateSelf()>();

        return;
    }

    public android.graphics.ColorFilter getColorFilter()
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable r0;
        android.graphics.Paint $r1;
        android.graphics.ColorFilter $r2;

        r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        $r1 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Paint mPaint>;

        $r2 = virtualinvoke $r1.<android.graphics.Paint: android.graphics.ColorFilter getColorFilter()>();

        return $r2;
    }

    public void setCircular(boolean)
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable r0;
        boolean z0;
        android.graphics.BitmapShader $r1;
        android.graphics.Paint $r2;

        r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        z0 := @parameter0: boolean;

        r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: boolean mIsCircular> = z0;

        r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: boolean mApplyGravity> = 1;

        if z0 == 0 goto label1;

        specialinvoke r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: void updateCircularCornerRadius()>();

        $r2 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Paint mPaint>;

        $r1 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.BitmapShader mBitmapShader>;

        virtualinvoke $r2.<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>($r1);

        virtualinvoke r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: void invalidateSelf()>();

        goto label2;

     label1:
        virtualinvoke r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: void setCornerRadius(float)>(0.0F);

     label2:
        return;
    }

    private void updateCircularCornerRadius()
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable r0;
        int i0, $i1, $i2, $i3;
        float $f0;

        r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        $i2 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mBitmapHeight>;

        $i1 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mBitmapWidth>;

        i0 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i1);

        $i3 = i0 / 2;

        $f0 = (float) $i3;

        r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: float mCornerRadius> = $f0;

        return;
    }

    public boolean isCircular()
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable r0;
        boolean $z0;

        r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        $z0 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: boolean mIsCircular>;

        return $z0;
    }

    public void setCornerRadius(float)
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable r0;
        float f0, $f1;
        byte $b0;
        boolean $z0;
        android.graphics.Paint $r1, $r4;
        android.graphics.BitmapShader $r3;

        r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        f0 := @parameter0: float;

        $f1 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: float mCornerRadius>;

        $b0 = $f1 cmpl f0;

        if $b0 != 0 goto label1;

        return;

     label1:
        r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: boolean mIsCircular> = 0;

        $z0 = staticinvoke <androidx.core.graphics.drawable.RoundedBitmapDrawable: boolean isGreaterThanZero(float)>(f0);

        if $z0 == 0 goto label2;

        $r4 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Paint mPaint>;

        $r3 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.BitmapShader mBitmapShader>;

        virtualinvoke $r4.<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>($r3);

        goto label3;

     label2:
        $r1 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Paint mPaint>;

        virtualinvoke $r1.<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>(null);

     label3:
        r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: float mCornerRadius> = f0;

        virtualinvoke r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: void invalidateSelf()>();

        return;
    }

    protected void onBoundsChange(android.graphics.Rect)
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable r0;
        android.graphics.Rect r1;
        boolean $z0;

        r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        r1 := @parameter0: android.graphics.Rect;

        specialinvoke r0.<android.graphics.drawable.Drawable: void onBoundsChange(android.graphics.Rect)>(r1);

        $z0 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: boolean mIsCircular>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: void updateCircularCornerRadius()>();

     label1:
        r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: boolean mApplyGravity> = 1;

        return;
    }

    public float getCornerRadius()
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable r0;
        float $f0;

        r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        $f0 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: float mCornerRadius>;

        return $f0;
    }

    public int getIntrinsicWidth()
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable r0;
        int $i0;

        r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        $i0 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mBitmapWidth>;

        return $i0;
    }

    public int getIntrinsicHeight()
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable r0;
        int $i0;

        r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        $i0 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mBitmapHeight>;

        return $i0;
    }

    public int getOpacity()
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable r0;
        android.graphics.Bitmap r1;
        int $i0, $i1;
        boolean $z0, $z1, $z2;
        android.graphics.Paint $r2;
        float $f0;
        byte $b2;

        r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        $i0 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mGravity>;

        if $i0 != 119 goto label1;

        $z0 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: boolean mIsCircular>;

        if $z0 == 0 goto label2;

     label1:
        return -3;

     label2:
        r1 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Bitmap mBitmap>;

        if r1 == null goto label3;

        $z1 = virtualinvoke r1.<android.graphics.Bitmap: boolean hasAlpha()>();

        if $z1 != 0 goto label3;

        $r2 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Paint mPaint>;

        $i1 = virtualinvoke $r2.<android.graphics.Paint: int getAlpha()>();

        if $i1 < 255 goto label3;

        $f0 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: float mCornerRadius>;

        $z2 = staticinvoke <androidx.core.graphics.drawable.RoundedBitmapDrawable: boolean isGreaterThanZero(float)>($f0);

        if $z2 == 0 goto label4;

     label3:
        $b2 = -3;

        goto label5;

     label4:
        $b2 = -1;

     label5:
        return $b2;
    }

    void <init>(android.content.res.Resources, android.graphics.Bitmap)
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable r0;
        android.content.res.Resources r1;
        android.graphics.Bitmap r2, $r7, $r11;
        android.graphics.Paint $r3;
        android.graphics.Matrix $r4;
        android.graphics.Rect $r5;
        android.graphics.RectF $r6;
        android.graphics.BitmapShader $r8;
        android.graphics.Shader$TileMode $r9, $r10;
        android.util.DisplayMetrics $r12;
        int $i1;

        r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        r1 := @parameter0: android.content.res.Resources;

        r2 := @parameter1: android.graphics.Bitmap;

        specialinvoke r0.<android.graphics.drawable.Drawable: void <init>()>();

        r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mTargetDensity> = 160;

        r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mGravity> = 119;

        $r3 = new android.graphics.Paint;

        specialinvoke $r3.<android.graphics.Paint: void <init>(int)>(3);

        r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Paint mPaint> = $r3;

        $r4 = new android.graphics.Matrix;

        specialinvoke $r4.<android.graphics.Matrix: void <init>()>();

        r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Matrix mShaderMatrix> = $r4;

        $r5 = new android.graphics.Rect;

        specialinvoke $r5.<android.graphics.Rect: void <init>()>();

        r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Rect mDstRect> = $r5;

        $r6 = new android.graphics.RectF;

        specialinvoke $r6.<android.graphics.RectF: void <init>()>();

        r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.RectF mDstRectF> = $r6;

        r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: boolean mApplyGravity> = 1;

        if r1 == null goto label1;

        $r12 = virtualinvoke r1.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $i1 = $r12.<android.util.DisplayMetrics: int densityDpi>;

        r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mTargetDensity> = $i1;

     label1:
        r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Bitmap mBitmap> = r2;

        $r7 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Bitmap mBitmap>;

        if $r7 == null goto label2;

        specialinvoke r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: void computeBitmapSize()>();

        $r8 = new android.graphics.BitmapShader;

        $r11 = r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Bitmap mBitmap>;

        $r10 = <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode CLAMP>;

        $r9 = <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode CLAMP>;

        specialinvoke $r8.<android.graphics.BitmapShader: void <init>(android.graphics.Bitmap,android.graphics.Shader$TileMode,android.graphics.Shader$TileMode)>($r11, $r10, $r9);

        r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.BitmapShader mBitmapShader> = $r8;

        goto label3;

     label2:
        r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mBitmapHeight> = -1;

        r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mBitmapWidth> = -1;

        r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.BitmapShader mBitmapShader> = null;

     label3:
        return;
    }

    private static boolean isGreaterThanZero(float)
    {
        float f0;
        byte $b0;
        boolean $z0;

        f0 := @parameter0: float;

        $b0 = f0 cmpl 0.05F;

        if $b0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

