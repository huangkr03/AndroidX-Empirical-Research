androidx.test.espresso.base.DefaultFailureHandler
<androidx.test.espresso.base.DefaultFailureHandler: java.util.concurrent.atomic.AtomicInteger failureCount>
<androidx.test.espresso.base.DefaultFailureHandler: java.util.List handlers>
<androidx.test.espresso.base.DefaultFailureHandler: androidx.test.platform.io.PlatformTestStorage testStorage>
    static androidx.test.espresso.base.ViewHierarchyExceptionHandler$Truncater getAmbiguousViewMatcherExceptionTruncater()
    {
        androidx.test.espresso.base.DefaultFailureHandler$$ExternalSyntheticLambda0 $r0;

        $r0 = <androidx.test.espresso.base.DefaultFailureHandler$$ExternalSyntheticLambda0: androidx.test.espresso.base.DefaultFailureHandler$$ExternalSyntheticLambda0 INSTANCE>;

        return $r0;
    }

    static androidx.test.espresso.base.ViewHierarchyExceptionHandler$Truncater getNoMatchingViewExceptionTruncater()
    {
        androidx.test.espresso.base.DefaultFailureHandler$$ExternalSyntheticLambda1 $r0;

        $r0 = <androidx.test.espresso.base.DefaultFailureHandler$$ExternalSyntheticLambda1: androidx.test.espresso.base.DefaultFailureHandler$$ExternalSyntheticLambda1 INSTANCE>;

        return $r0;
    }

    static java.lang.Throwable lambda$getAmbiguousViewMatcherExceptionTruncater$1(androidx.test.espresso.AmbiguousViewMatcherException, int, java.lang.String)
    {
        androidx.test.espresso.AmbiguousViewMatcherException r0, $r6;
        int i0;
        java.lang.String r1;
        androidx.test.espresso.AmbiguousViewMatcherException$Builder r2, $r3, $r4, $r5, r7;
        java.lang.Throwable r8;

        r0 := @parameter0: androidx.test.espresso.AmbiguousViewMatcherException;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r7 = new androidx.test.espresso.AmbiguousViewMatcherException$Builder;

        r2 = r7;

        specialinvoke r7.<androidx.test.espresso.AmbiguousViewMatcherException$Builder: void <init>()>();

        $r3 = virtualinvoke r2.<androidx.test.espresso.AmbiguousViewMatcherException$Builder: androidx.test.espresso.AmbiguousViewMatcherException$Builder 'from'(androidx.test.espresso.AmbiguousViewMatcherException)>(r0);

        $r4 = virtualinvoke $r3.<androidx.test.espresso.AmbiguousViewMatcherException$Builder: androidx.test.espresso.AmbiguousViewMatcherException$Builder withMaxMsgLen(int)>(i0);

        $r5 = virtualinvoke $r4.<androidx.test.espresso.AmbiguousViewMatcherException$Builder: androidx.test.espresso.AmbiguousViewMatcherException$Builder withViewHierarchyFile(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<androidx.test.espresso.AmbiguousViewMatcherException$Builder: androidx.test.espresso.AmbiguousViewMatcherException build()>();

        r8 = (java.lang.Throwable) $r6;

        return r8;
    }

    static java.lang.Throwable lambda$getNoMatchingViewExceptionTruncater$0(androidx.test.espresso.NoMatchingViewException, int, java.lang.String)
    {
        androidx.test.espresso.NoMatchingViewException r0, $r6;
        int i0;
        java.lang.String r1;
        androidx.test.espresso.NoMatchingViewException$Builder r2, $r3, $r4, $r5, r7;
        java.lang.Throwable r8;

        r0 := @parameter0: androidx.test.espresso.NoMatchingViewException;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r7 = new androidx.test.espresso.NoMatchingViewException$Builder;

        r2 = r7;

        specialinvoke r7.<androidx.test.espresso.NoMatchingViewException$Builder: void <init>()>();

        $r3 = virtualinvoke r2.<androidx.test.espresso.NoMatchingViewException$Builder: androidx.test.espresso.NoMatchingViewException$Builder 'from'(androidx.test.espresso.NoMatchingViewException)>(r0);

        $r4 = virtualinvoke $r3.<androidx.test.espresso.NoMatchingViewException$Builder: androidx.test.espresso.NoMatchingViewException$Builder withMaxMsgLen(int)>(i0);

        $r5 = virtualinvoke $r4.<androidx.test.espresso.NoMatchingViewException$Builder: androidx.test.espresso.NoMatchingViewException$Builder withViewHierarchyFile(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<androidx.test.espresso.NoMatchingViewException$Builder: androidx.test.espresso.NoMatchingViewException build()>();

        r8 = (java.lang.Throwable) $r6;

        return r8;
    }

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicInteger r0;

        r0 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke r0.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        <androidx.test.espresso.base.DefaultFailureHandler: java.util.concurrent.atomic.AtomicInteger failureCount> = r0;

        return;
    }

    public void <init>(android.content.Context)
    {
        androidx.test.espresso.base.DefaultFailureHandler r0;
        android.content.Context r1;
        androidx.test.platform.io.PlatformTestStorage $r2;

        r0 := @this: androidx.test.espresso.base.DefaultFailureHandler;

        r1 := @parameter0: android.content.Context;

        $r2 = staticinvoke <androidx.test.platform.io.PlatformTestStorageRegistry: androidx.test.platform.io.PlatformTestStorage getInstance()>();

        specialinvoke r0.<androidx.test.espresso.base.DefaultFailureHandler: void <init>(android.content.Context,androidx.test.platform.io.PlatformTestStorage)>(r1, $r2);

        return;
    }

    void <init>(android.content.Context, androidx.test.platform.io.PlatformTestStorage)
    {
        java.util.concurrent.atomic.AtomicInteger $r0, $r2;
        androidx.test.espresso.base.ViewHierarchyExceptionHandler$Truncater $r1, $r3;
        java.lang.Object $r4;
        android.content.Context $r5, r7;
        androidx.test.espresso.base.DefaultFailureHandler r6;
        androidx.test.platform.io.PlatformTestStorage r8;
        java.util.ArrayList r9, r23;
        java.util.List r10, r12, r14, r16, r19, r21, r30;
        androidx.test.espresso.base.ViewHierarchyExceptionHandler r11, r13, r24, r25;
        androidx.test.espresso.base.PerformExceptionHandler r15, r26;
        androidx.test.espresso.base.AssertionErrorHandler r17, r27;
        java.lang.Class[] r18;
        androidx.test.espresso.base.EspressoExceptionHandler r20, r28;
        androidx.test.espresso.base.ThrowableHandler r22, r29;

        r6 := @this: androidx.test.espresso.base.DefaultFailureHandler;

        r7 := @parameter0: android.content.Context;

        r8 := @parameter1: androidx.test.platform.io.PlatformTestStorage;

        specialinvoke r6.<java.lang.Object: void <init>()>();

        r23 = new java.util.ArrayList;

        r9 = r23;

        specialinvoke r23.<java.util.ArrayList: void <init>()>();

        r30 = (java.util.List) r9;

        r6.<androidx.test.espresso.base.DefaultFailureHandler: java.util.List handlers> = r30;

        r6.<androidx.test.espresso.base.DefaultFailureHandler: androidx.test.platform.io.PlatformTestStorage testStorage> = r8;

        r10 = r6.<androidx.test.espresso.base.DefaultFailureHandler: java.util.List handlers>;

        r24 = new androidx.test.espresso.base.ViewHierarchyExceptionHandler;

        r11 = r24;

        $r0 = <androidx.test.espresso.base.DefaultFailureHandler: java.util.concurrent.atomic.AtomicInteger failureCount>;

        $r1 = staticinvoke <androidx.test.espresso.base.DefaultFailureHandler: androidx.test.espresso.base.ViewHierarchyExceptionHandler$Truncater getNoMatchingViewExceptionTruncater()>();

        specialinvoke r24.<androidx.test.espresso.base.ViewHierarchyExceptionHandler: void <init>(androidx.test.platform.io.PlatformTestStorage,java.util.concurrent.atomic.AtomicInteger,java.lang.Class,androidx.test.espresso.base.ViewHierarchyExceptionHandler$Truncater)>(r8, $r0, class "Landroidx/test/espresso/NoMatchingViewException;", $r1);

        interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>(r11);

        r12 = r6.<androidx.test.espresso.base.DefaultFailureHandler: java.util.List handlers>;

        r25 = new androidx.test.espresso.base.ViewHierarchyExceptionHandler;

        r13 = r25;

        $r2 = <androidx.test.espresso.base.DefaultFailureHandler: java.util.concurrent.atomic.AtomicInteger failureCount>;

        $r3 = staticinvoke <androidx.test.espresso.base.DefaultFailureHandler: androidx.test.espresso.base.ViewHierarchyExceptionHandler$Truncater getAmbiguousViewMatcherExceptionTruncater()>();

        specialinvoke r25.<androidx.test.espresso.base.ViewHierarchyExceptionHandler: void <init>(androidx.test.platform.io.PlatformTestStorage,java.util.concurrent.atomic.AtomicInteger,java.lang.Class,androidx.test.espresso.base.ViewHierarchyExceptionHandler$Truncater)>(r8, $r2, class "Landroidx/test/espresso/AmbiguousViewMatcherException;", $r3);

        interfaceinvoke r12.<java.util.List: boolean add(java.lang.Object)>(r13);

        r14 = r6.<androidx.test.espresso.base.DefaultFailureHandler: java.util.List handlers>;

        r26 = new androidx.test.espresso.base.PerformExceptionHandler;

        r15 = r26;

        $r4 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r7);

        $r5 = (android.content.Context) $r4;

        specialinvoke r26.<androidx.test.espresso.base.PerformExceptionHandler: void <init>(android.content.Context,java.lang.Class)>($r5, class "Landroidx/test/espresso/PerformException;");

        interfaceinvoke r14.<java.util.List: boolean add(java.lang.Object)>(r15);

        r16 = r6.<androidx.test.espresso.base.DefaultFailureHandler: java.util.List handlers>;

        r27 = new androidx.test.espresso.base.AssertionErrorHandler;

        r17 = r27;

        r18 = newarray (java.lang.Class)[2];

        r18[0] = class "Ljunit/framework/AssertionFailedError;";

        r18[1] = class "Ljava/lang/AssertionError;";

        specialinvoke r27.<androidx.test.espresso.base.AssertionErrorHandler: void <init>(java.lang.Class[])>(r18);

        interfaceinvoke r16.<java.util.List: boolean add(java.lang.Object)>(r17);

        r19 = r6.<androidx.test.espresso.base.DefaultFailureHandler: java.util.List handlers>;

        r28 = new androidx.test.espresso.base.EspressoExceptionHandler;

        r20 = r28;

        specialinvoke r28.<androidx.test.espresso.base.EspressoExceptionHandler: void <init>(java.lang.Class)>(class "Landroidx/test/espresso/EspressoException;");

        interfaceinvoke r19.<java.util.List: boolean add(java.lang.Object)>(r20);

        r21 = r6.<androidx.test.espresso.base.DefaultFailureHandler: java.util.List handlers>;

        r29 = new androidx.test.espresso.base.ThrowableHandler;

        r22 = r29;

        specialinvoke r29.<androidx.test.espresso.base.ThrowableHandler: void <init>()>();

        interfaceinvoke r21.<java.util.List: boolean add(java.lang.Object)>(r22);

        return;
    }

    public void handle(java.lang.Throwable, org.hamcrest.Matcher)
    {
        java.lang.Throwable r0;
        org.hamcrest.Matcher r1;
        int i0;
        java.util.concurrent.atomic.AtomicInteger $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r7, $r8, r14, r15;
        java.lang.String $r6, $r9;
        java.util.List $r10;
        boolean $z1;
        java.lang.Object $r11;
        androidx.test.espresso.FailureHandler $r12;
        androidx.test.espresso.base.DefaultFailureHandler r13;
        java.util.Iterator r16;

        r13 := @this: androidx.test.espresso.base.DefaultFailureHandler;

        r0 := @parameter0: java.lang.Throwable;

        r1 := @parameter1: org.hamcrest.Matcher;

        $r2 = <androidx.test.espresso.base.DefaultFailureHandler: java.util.concurrent.atomic.AtomicInteger failureCount>;

        i0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("explore-window-hierarchy-");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".xml");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.test.internal.platform.util.TestOutputEmitter: boolean captureWindowHierarchy(java.lang.String)>($r6);

        r15 = new java.lang.StringBuilder;

        specialinvoke r15.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("view-op-error-");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r13.<androidx.test.espresso.base.DefaultFailureHandler: void takeScreenshot(java.lang.String)>($r9);

        $r10 = r13.<androidx.test.espresso.base.DefaultFailureHandler: java.util.List handlers>;

        r16 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r11 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (androidx.test.espresso.FailureHandler) $r11;

        interfaceinvoke $r12.<androidx.test.espresso.FailureHandler: void handle(java.lang.Throwable,org.hamcrest.Matcher)>(r0, r1);

        goto label1;

     label2:
        return;
    }

    private void takeScreenshot(java.lang.String)
    {
        java.lang.String r0, r8;
        boolean z0;
        java.lang.StringBuilder $r1, $r2, r7;
        android.graphics.Bitmap $r3;
        androidx.test.platform.io.PlatformTestStorage $r4;
        java.lang.Throwable $r5, r9;
        androidx.test.espresso.base.DefaultFailureHandler r6;

        r6 := @this: androidx.test.espresso.base.DefaultFailureHandler;

        r0 := @parameter0: java.lang.String;

     label1:
        z0 = staticinvoke <androidx.test.core.app.DeviceCapture: boolean canTakeScreenshot()>();

     label2:
        if z0 == 0 goto label4;

     label3:
        $r3 = staticinvoke <androidx.test.core.app.DeviceCapture: android.graphics.Bitmap takeScreenshotNoSync()>();

        $r4 = r6.<androidx.test.espresso.base.DefaultFailureHandler: androidx.test.platform.io.PlatformTestStorage testStorage>;

        staticinvoke <androidx.test.core.graphics.BitmapStorage: void writeToTestStorage(android.graphics.Bitmap,androidx.test.platform.io.PlatformTestStorage,java.lang.String)>($r3, $r4, r0);

        return;

     label4:
        r7 = new java.lang.StringBuilder;

        specialinvoke r7.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".png");

        r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

     label5:
        staticinvoke <androidx.test.internal.platform.util.TestOutputEmitter: boolean takeScreenshot(java.lang.String)>(r8);

        return;

     label6:
        $r5 := @caughtexception;

        r9 = $r5;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DefaultFailureHandler", "Failed to take screenshot", r9);

        return;

        catch java.lang.RuntimeException from label1 to label2 with label6;
        catch java.lang.Error from label1 to label2 with label6;
        catch java.io.IOException from label1 to label2 with label6;
        catch java.lang.RuntimeException from label3 to label5 with label6;
        catch java.lang.Error from label3 to label5 with label6;
        catch java.io.IOException from label3 to label5 with label6;
        catch java.lang.RuntimeException from label5 to label6 with label6;
        catch java.lang.Error from label5 to label6 with label6;
        catch java.io.IOException from label5 to label6 with label6;
    }

androidx.test.espresso.base.DefaultFailureHandler$$ExternalSyntheticLambda0
<androidx.test.espresso.base.DefaultFailureHandler$$ExternalSyntheticLambda0: androidx.test.espresso.base.DefaultFailureHandler$$ExternalSyntheticLambda0 INSTANCE>
    public final java.lang.Throwable truncateExceptionMessage(java.lang.Object, int, java.lang.String)
    {
        androidx.test.espresso.base.DefaultFailureHandler$$ExternalSyntheticLambda0 r0;
        java.lang.Object r1;
        int i0;
        java.lang.String r2;
        androidx.test.espresso.AmbiguousViewMatcherException $r3;
        java.lang.Throwable $r4;

        r0 := @this: androidx.test.espresso.base.DefaultFailureHandler$$ExternalSyntheticLambda0;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $r3 = (androidx.test.espresso.AmbiguousViewMatcherException) r1;

        $r4 = staticinvoke <androidx.test.espresso.base.DefaultFailureHandler: java.lang.Throwable lambda$getAmbiguousViewMatcherExceptionTruncater$1(androidx.test.espresso.AmbiguousViewMatcherException,int,java.lang.String)>($r3, i0, r2);

        return $r4;
    }

    static void <clinit>()
    {
        androidx.test.espresso.base.DefaultFailureHandler$$ExternalSyntheticLambda0 r0;

        r0 = new androidx.test.espresso.base.DefaultFailureHandler$$ExternalSyntheticLambda0;

        specialinvoke r0.<androidx.test.espresso.base.DefaultFailureHandler$$ExternalSyntheticLambda0: void <init>()>();

        <androidx.test.espresso.base.DefaultFailureHandler$$ExternalSyntheticLambda0: androidx.test.espresso.base.DefaultFailureHandler$$ExternalSyntheticLambda0 INSTANCE> = r0;

        return;
    }

    private void <init>()
    {
        androidx.test.espresso.base.DefaultFailureHandler$$ExternalSyntheticLambda0 r0;

        r0 := @this: androidx.test.espresso.base.DefaultFailureHandler$$ExternalSyntheticLambda0;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

androidx.test.espresso.base.DefaultFailureHandler$$ExternalSyntheticLambda1
<androidx.test.espresso.base.DefaultFailureHandler$$ExternalSyntheticLambda1: androidx.test.espresso.base.DefaultFailureHandler$$ExternalSyntheticLambda1 INSTANCE>
    public final java.lang.Throwable truncateExceptionMessage(java.lang.Object, int, java.lang.String)
    {
        androidx.test.espresso.base.DefaultFailureHandler$$ExternalSyntheticLambda1 r0;
        java.lang.Object r1;
        int i0;
        java.lang.String r2;
        androidx.test.espresso.NoMatchingViewException $r3;
        java.lang.Throwable $r4;

        r0 := @this: androidx.test.espresso.base.DefaultFailureHandler$$ExternalSyntheticLambda1;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $r3 = (androidx.test.espresso.NoMatchingViewException) r1;

        $r4 = staticinvoke <androidx.test.espresso.base.DefaultFailureHandler: java.lang.Throwable lambda$getNoMatchingViewExceptionTruncater$0(androidx.test.espresso.NoMatchingViewException,int,java.lang.String)>($r3, i0, r2);

        return $r4;
    }

    static void <clinit>()
    {
        androidx.test.espresso.base.DefaultFailureHandler$$ExternalSyntheticLambda1 r0;

        r0 = new androidx.test.espresso.base.DefaultFailureHandler$$ExternalSyntheticLambda1;

        specialinvoke r0.<androidx.test.espresso.base.DefaultFailureHandler$$ExternalSyntheticLambda1: void <init>()>();

        <androidx.test.espresso.base.DefaultFailureHandler$$ExternalSyntheticLambda1: androidx.test.espresso.base.DefaultFailureHandler$$ExternalSyntheticLambda1 INSTANCE> = r0;

        return;
    }

    private void <init>()
    {
        androidx.test.espresso.base.DefaultFailureHandler$$ExternalSyntheticLambda1 r0;

        r0 := @this: androidx.test.espresso.base.DefaultFailureHandler$$ExternalSyntheticLambda1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

androidx.test.espresso.base.DefaultFailureHandler$TypedFailureHandler
<androidx.test.espresso.base.DefaultFailureHandler$TypedFailureHandler: java.util.List acceptedTypes>
    public transient void <init>(java.lang.Class[])
    {
        androidx.test.espresso.base.DefaultFailureHandler$TypedFailureHandler r0;
        java.lang.Class[] r1;
        java.util.List $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: androidx.test.espresso.base.DefaultFailureHandler$TypedFailureHandler;

        r1 := @parameter0: java.lang.Class[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        $r3 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        $r4 = (java.util.List) $r3;

        r0.<androidx.test.espresso.base.DefaultFailureHandler$TypedFailureHandler: java.util.List acceptedTypes> = $r4;

        return;
    }

    public void handle(java.lang.Throwable, org.hamcrest.Matcher)
    {
        androidx.test.espresso.base.DefaultFailureHandler$TypedFailureHandler r0;
        java.lang.Throwable r1;
        org.hamcrest.Matcher r2;
        java.util.Iterator r3;
        java.util.List $r4;
        boolean $z0, $z1;
        java.lang.Object $r5;
        java.lang.Class $r6;

        r0 := @this: androidx.test.espresso.base.DefaultFailureHandler$TypedFailureHandler;

        r1 := @parameter0: java.lang.Throwable;

        r2 := @parameter1: org.hamcrest.Matcher;

        if r1 == null goto label2;

        $r4 = r0.<androidx.test.espresso.base.DefaultFailureHandler$TypedFailureHandler: java.util.List acceptedTypes>;

        r3 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.lang.Class) $r5;

        $z1 = virtualinvoke $r6.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1);

        if $z1 == 0 goto label1;

        virtualinvoke r0.<androidx.test.espresso.base.DefaultFailureHandler$TypedFailureHandler: void handleSafely(java.lang.Object,org.hamcrest.Matcher)>(r1, r2);

        return;

     label2:
        return;
    }

<androidx.test.espresso.base.DefaultFailureHandler$TypedFailureHandler: void handleSafely(java.lang.Object,org.hamcrest.Matcher)>
