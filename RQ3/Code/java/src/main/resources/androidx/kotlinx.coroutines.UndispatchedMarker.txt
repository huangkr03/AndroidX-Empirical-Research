kotlinx.coroutines.UndispatchedMarker
<kotlinx.coroutines.UndispatchedMarker: kotlinx.coroutines.UndispatchedMarker INSTANCE>
    static void <clinit>()
    {
        kotlinx.coroutines.UndispatchedMarker $r0;

        $r0 = new kotlinx.coroutines.UndispatchedMarker;

        specialinvoke $r0.<kotlinx.coroutines.UndispatchedMarker: void <init>()>();

        <kotlinx.coroutines.UndispatchedMarker: kotlinx.coroutines.UndispatchedMarker INSTANCE> = $r0;

        return;
    }

    private void <init>()
    {
        kotlinx.coroutines.UndispatchedMarker $r0;

        $r0 := @this: kotlinx.coroutines.UndispatchedMarker;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object fold(java.lang.Object, kotlin.jvm.functions.Function2)
    {
        kotlinx.coroutines.UndispatchedMarker $r0;
        kotlin.jvm.functions.Function2 $r1;
        java.lang.Object $r2;

        $r0 := @this: kotlinx.coroutines.UndispatchedMarker;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        $r2 = staticinvoke <kotlin.coroutines.CoroutineContext$Element$DefaultImpls: java.lang.Object fold(kotlin.coroutines.CoroutineContext$Element,java.lang.Object,kotlin.jvm.functions.Function2)>($r0, $r2, $r1);

        return $r2;
    }

    public kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)
    {
        kotlinx.coroutines.UndispatchedMarker $r0;
        kotlin.coroutines.CoroutineContext$Element $r1;
        kotlin.coroutines.CoroutineContext$Key $r2;

        $r0 := @this: kotlinx.coroutines.UndispatchedMarker;

        $r2 := @parameter0: kotlin.coroutines.CoroutineContext$Key;

        $r1 = staticinvoke <kotlin.coroutines.CoroutineContext$Element$DefaultImpls: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Element,kotlin.coroutines.CoroutineContext$Key)>($r0, $r2);

        return $r1;
    }

    public kotlin.coroutines.CoroutineContext$Key getKey()
    {
        kotlinx.coroutines.UndispatchedMarker $r0;

        $r0 := @this: kotlinx.coroutines.UndispatchedMarker;

        return $r0;
    }

    public kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)
    {
        kotlinx.coroutines.UndispatchedMarker $r0;
        kotlin.coroutines.CoroutineContext $r1;
        kotlin.coroutines.CoroutineContext$Key $r2;

        $r0 := @this: kotlinx.coroutines.UndispatchedMarker;

        $r2 := @parameter0: kotlin.coroutines.CoroutineContext$Key;

        $r1 = staticinvoke <kotlin.coroutines.CoroutineContext$Element$DefaultImpls: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Element,kotlin.coroutines.CoroutineContext$Key)>($r0, $r2);

        return $r1;
    }

    public kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)
    {
        kotlinx.coroutines.UndispatchedMarker $r0;
        kotlin.coroutines.CoroutineContext $r1;

        $r0 := @this: kotlinx.coroutines.UndispatchedMarker;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r1 = staticinvoke <kotlin.coroutines.CoroutineContext$Element$DefaultImpls: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext$Element,kotlin.coroutines.CoroutineContext)>($r0, $r1);

        return $r1;
    }

