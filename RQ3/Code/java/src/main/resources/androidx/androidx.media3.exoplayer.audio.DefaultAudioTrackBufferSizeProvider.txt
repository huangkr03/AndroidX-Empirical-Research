androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider
<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider: int MIN_PCM_BUFFER_DURATION_US>
<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider: int MAX_PCM_BUFFER_DURATION_US>
<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider: int PCM_BUFFER_MULTIPLICATION_FACTOR>
<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider: int PASSTHROUGH_BUFFER_DURATION_US>
<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider: int OFFLOAD_BUFFER_DURATION_US>
<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider: int AC3_BUFFER_MULTIPLICATION_FACTOR>
<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider: int minPcmBufferDurationUs>
<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider: int maxPcmBufferDurationUs>
<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider: int pcmBufferMultiplicationFactor>
<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider: int passthroughBufferDurationUs>
<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider: int offloadBufferDurationUs>
<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider: int ac3BufferMultiplicationFactor>
    protected void <init>(androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder)
    {
        androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider r0;
        androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider;

        r1 := @parameter0: androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder: int access$000(androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder)>(r1);

        r0.<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider: int minPcmBufferDurationUs> = $i0;

        $i1 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder: int access$100(androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder)>(r1);

        r0.<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider: int maxPcmBufferDurationUs> = $i1;

        $i2 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder: int access$200(androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder)>(r1);

        r0.<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider: int pcmBufferMultiplicationFactor> = $i2;

        $i3 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder: int access$300(androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder)>(r1);

        r0.<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider: int passthroughBufferDurationUs> = $i3;

        $i4 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder: int access$400(androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder)>(r1);

        r0.<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider: int offloadBufferDurationUs> = $i4;

        $i5 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder: int access$500(androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder)>(r1);

        r0.<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider: int ac3BufferMultiplicationFactor> = $i5;

        return;
    }

    public int getBufferSizeInBytes(int, int, int, int, int, int, double)
    {
        androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, i10, i11, i12;
        double d0, $d1, $d2;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        d0 := @parameter6: double;

        i10 = virtualinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider: int get1xBufferSizeInBytes(int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5);

        $d1 = (double) i10;

        $d2 = $d1 * d0;

        i11 = (int) $d2;

        i12 = staticinvoke <java.lang.Math: int max(int,int)>(i0, i11);

        $i6 = i12 + i3;

        $i7 = $i6 - 1;

        $i8 = $i7 / i3;

        $i9 = $i8 * i3;

        return $i9;
    }

    protected int get1xBufferSizeInBytes(int, int, int, int, int, int)
    {
        androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        tableswitch(i2)
        {
            case 0: goto label1;
            case 1: goto label3;
            case 2: goto label2;
            default: goto label4;
        };

     label1:
        $i8 = virtualinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider: int getPcmBufferSizeInBytes(int,int,int)>(i0, i4, i3);

        return $i8;

     label2:
        $i6 = virtualinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider: int getPassthroughBufferSizeInBytes(int,int)>(i1, i5);

        return $i6;

     label3:
        $i7 = virtualinvoke r0.<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider: int getOffloadBufferSizeInBytes(int)>(i1);

        return $i7;

     label4:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;
    }

    protected int getPcmBufferSizeInBytes(int, int, int)
    {
        androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $i6 = r0.<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider: int pcmBufferMultiplicationFactor>;

        i3 = i0 * $i6;

        $i7 = r0.<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider: int minPcmBufferDurationUs>;

        i4 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider: int durationUsToBytes(int,int,int)>($i7, i1, i2);

        $i8 = r0.<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider: int maxPcmBufferDurationUs>;

        i5 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider: int durationUsToBytes(int,int,int)>($i8, i1, i2);

        $i9 = staticinvoke <androidx.media3.common.util.Util: int constrainValue(int,int,int)>(i3, i4, i5);

        return $i9;
    }

    protected int getPassthroughBufferSizeInBytes(int, int)
    {
        androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider r0;
        int i0, i1, i2, $i7, $i8, i9, $i10;
        long $l3, $l4, $l5, $l6;
        java.math.RoundingMode $r1;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i9 = r0.<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider: int passthroughBufferDurationUs>;

        if i0 != 5 goto label1;

        $i8 = r0.<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider: int ac3BufferMultiplicationFactor>;

        i9 = i9 * $i8;

     label1:
        if i1 == -1 goto label2;

        $r1 = <java.math.RoundingMode: java.math.RoundingMode CEILING>;

        $i10 = staticinvoke <com.google.common.math.IntMath: int divide(int,int,java.math.RoundingMode)>(i1, 8, $r1);

        goto label3;

     label2:
        $i10 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider: int getMaximumEncodedRateBytesPerSecond(int)>(i0);

     label3:
        i2 = $i10;

        $l4 = (long) i9;

        $l3 = (long) i2;

        $l5 = $l4 * $l3;

        $l6 = $l5 / 1000000L;

        $i7 = staticinvoke <com.google.common.primitives.Ints: int checkedCast(long)>($l6);

        return $i7;
    }

    protected int getOffloadBufferSizeInBytes(int)
    {
        androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider r0;
        int i0, i1, $i2, $i7;
        long $l3, $l4, $l5, $l6;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider;

        i0 := @parameter0: int;

        i1 = staticinvoke <androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider: int getMaximumEncodedRateBytesPerSecond(int)>(i0);

        $i2 = r0.<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider: int offloadBufferDurationUs>;

        $l4 = (long) $i2;

        $l3 = (long) i1;

        $l5 = $l4 * $l3;

        $l6 = $l5 / 1000000L;

        $i7 = staticinvoke <com.google.common.primitives.Ints: int checkedCast(long)>($l6);

        return $i7;
    }

    protected static int durationUsToBytes(int, int, int)
    {
        int i0, i1, i2, $i9;
        long $l3, $l4, $l5, $l6, $l7, $l8;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $l4 = (long) i0;

        $l3 = (long) i1;

        $l6 = $l4 * $l3;

        $l5 = (long) i2;

        $l7 = $l6 * $l5;

        $l8 = $l7 / 1000000L;

        $i9 = staticinvoke <com.google.common.primitives.Ints: int checkedCast(long)>($l8);

        return $i9;
    }

    protected static int getMaximumEncodedRateBytesPerSecond(int)
    {
        int i0;
        java.lang.IllegalArgumentException $r0;

        i0 := @parameter0: int;

        lookupswitch(i0)
        {
            case -1: goto label14;
            case 0: goto label14;
            case 2: goto label14;
            case 3: goto label14;
            case 4: goto label14;
            case 5: goto label07;
            case 6: goto label08;
            case 7: goto label10;
            case 8: goto label11;
            case 9: goto label01;
            case 10: goto label02;
            case 11: goto label03;
            case 12: goto label04;
            case 14: goto label12;
            case 15: goto label06;
            case 16: goto label05;
            case 17: goto label09;
            case 18: goto label08;
            case 20: goto label13;
            case 268435456: goto label14;
            case 536870912: goto label14;
            case 805306368: goto label14;
            case 1073741824: goto label14;
            default: goto label14;
        };

     label01:
        return 40000;

     label02:
        return 100000;

     label03:
        return 16000;

     label04:
        return 7000;

     label05:
        return 256000;

     label06:
        return 8000;

     label07:
        return 80000;

     label08:
        return 768000;

     label09:
        return 336000;

     label10:
        return 192000;

     label11:
        return 2250000;

     label12:
        return 3062500;

     label13:
        return 63750;

     label14:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r0;
    }

androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder
<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder: int minPcmBufferDurationUs>
<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder: int maxPcmBufferDurationUs>
<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder: int pcmBufferMultiplicationFactor>
<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder: int passthroughBufferDurationUs>
<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder: int offloadBufferDurationUs>
<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder: int ac3BufferMultiplicationFactor>
    public void <init>()
    {
        androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder r0;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder: int minPcmBufferDurationUs> = 250000;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder: int maxPcmBufferDurationUs> = 750000;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder: int pcmBufferMultiplicationFactor> = 4;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder: int passthroughBufferDurationUs> = 250000;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder: int offloadBufferDurationUs> = 50000000;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder: int ac3BufferMultiplicationFactor> = 2;

        return;
    }

    public androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder setMinPcmBufferDurationUs(int)
    {
        androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder r0;
        int i0;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder;

        i0 := @parameter0: int;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder: int minPcmBufferDurationUs> = i0;

        return r0;
    }

    public androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder setMaxPcmBufferDurationUs(int)
    {
        androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder r0;
        int i0;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder;

        i0 := @parameter0: int;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder: int maxPcmBufferDurationUs> = i0;

        return r0;
    }

    public androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder setPcmBufferMultiplicationFactor(int)
    {
        androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder r0;
        int i0;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder;

        i0 := @parameter0: int;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder: int pcmBufferMultiplicationFactor> = i0;

        return r0;
    }

    public androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder setPassthroughBufferDurationUs(int)
    {
        androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder r0;
        int i0;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder;

        i0 := @parameter0: int;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder: int passthroughBufferDurationUs> = i0;

        return r0;
    }

    public androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder setOffloadBufferDurationUs(int)
    {
        androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder r0;
        int i0;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder;

        i0 := @parameter0: int;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder: int offloadBufferDurationUs> = i0;

        return r0;
    }

    public androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder setAc3BufferMultiplicationFactor(int)
    {
        androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder r0;
        int i0;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder;

        i0 := @parameter0: int;

        r0.<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder: int ac3BufferMultiplicationFactor> = i0;

        return r0;
    }

    public androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider build()
    {
        androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder r0;
        androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider $r1;

        r0 := @this: androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder;

        $r1 = new androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider;

        specialinvoke $r1.<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider: void <init>(androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder)>(r0);

        return $r1;
    }

    static int access$000(androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder)
    {
        androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder r0;
        int $i0;

        r0 := @parameter0: androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder;

        $i0 = r0.<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder: int minPcmBufferDurationUs>;

        return $i0;
    }

    static int access$100(androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder)
    {
        androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder r0;
        int $i0;

        r0 := @parameter0: androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder;

        $i0 = r0.<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder: int maxPcmBufferDurationUs>;

        return $i0;
    }

    static int access$200(androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder)
    {
        androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder r0;
        int $i0;

        r0 := @parameter0: androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder;

        $i0 = r0.<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder: int pcmBufferMultiplicationFactor>;

        return $i0;
    }

    static int access$300(androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder)
    {
        androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder r0;
        int $i0;

        r0 := @parameter0: androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder;

        $i0 = r0.<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder: int passthroughBufferDurationUs>;

        return $i0;
    }

    static int access$400(androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder)
    {
        androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder r0;
        int $i0;

        r0 := @parameter0: androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder;

        $i0 = r0.<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder: int offloadBufferDurationUs>;

        return $i0;
    }

    static int access$500(androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder)
    {
        androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder r0;
        int $i0;

        r0 := @parameter0: androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder;

        $i0 = r0.<androidx.media3.exoplayer.audio.DefaultAudioTrackBufferSizeProvider$Builder: int ac3BufferMultiplicationFactor>;

        return $i0;
    }

