androidx.compose.runtime.GroupIterator
<androidx.compose.runtime.GroupIterator: androidx.compose.runtime.SlotTable table>
<androidx.compose.runtime.GroupIterator: int end>
<androidx.compose.runtime.GroupIterator: int index>
<androidx.compose.runtime.GroupIterator: int version>
    public void <init>(androidx.compose.runtime.SlotTable, int, int)
    {
        androidx.compose.runtime.GroupIterator r0;
        androidx.compose.runtime.SlotTable r1, $r2, $r3;
        int i0, i1, $i2;
        boolean $z0;
        java.util.ConcurrentModificationException $r4;

        r0 := @this: androidx.compose.runtime.GroupIterator;

        r1 := @parameter0: androidx.compose.runtime.SlotTable;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "table");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.runtime.GroupIterator: androidx.compose.runtime.SlotTable table> = r1;

        r0.<androidx.compose.runtime.GroupIterator: int end> = i1;

        r0.<androidx.compose.runtime.GroupIterator: int index> = i0;

        $r2 = r0.<androidx.compose.runtime.GroupIterator: androidx.compose.runtime.SlotTable table>;

        $i2 = virtualinvoke $r2.<androidx.compose.runtime.SlotTable: int getVersion$runtime_release()>();

        r0.<androidx.compose.runtime.GroupIterator: int version> = $i2;

        $r3 = r0.<androidx.compose.runtime.GroupIterator: androidx.compose.runtime.SlotTable table>;

        $z0 = virtualinvoke $r3.<androidx.compose.runtime.SlotTable: boolean getWriter$runtime_release()>();

        if $z0 == 0 goto label1;

        $r4 = new java.util.ConcurrentModificationException;

        specialinvoke $r4.<java.util.ConcurrentModificationException: void <init>()>();

        throw $r4;

     label1:
        return;
    }

    public final androidx.compose.runtime.SlotTable getTable()
    {
        androidx.compose.runtime.GroupIterator r0;
        androidx.compose.runtime.SlotTable $r1;

        r0 := @this: androidx.compose.runtime.GroupIterator;

        $r1 = r0.<androidx.compose.runtime.GroupIterator: androidx.compose.runtime.SlotTable table>;

        return $r1;
    }

    public final int getEnd()
    {
        androidx.compose.runtime.GroupIterator r0;
        int $i0;

        r0 := @this: androidx.compose.runtime.GroupIterator;

        $i0 = r0.<androidx.compose.runtime.GroupIterator: int end>;

        return $i0;
    }

    public boolean hasNext()
    {
        androidx.compose.runtime.GroupIterator r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.GroupIterator;

        $i1 = r0.<androidx.compose.runtime.GroupIterator: int index>;

        $i0 = r0.<androidx.compose.runtime.GroupIterator: int end>;

        if $i1 >= $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public androidx.compose.runtime.tooling.CompositionGroup next()
    {
        androidx.compose.runtime.GroupIterator r0;
        int i0, $i1, $i2, $i3, $i4;
        androidx.compose.runtime.SlotTable $r1, $r4;
        int[] $r2;
        androidx.compose.runtime.SlotTableGroup $r3;
        androidx.compose.runtime.tooling.CompositionGroup $r5;

        r0 := @this: androidx.compose.runtime.GroupIterator;

        specialinvoke r0.<androidx.compose.runtime.GroupIterator: void validateRead()>();

        i0 = r0.<androidx.compose.runtime.GroupIterator: int index>;

        $i1 = r0.<androidx.compose.runtime.GroupIterator: int index>;

        $r1 = r0.<androidx.compose.runtime.GroupIterator: androidx.compose.runtime.SlotTable table>;

        $r2 = virtualinvoke $r1.<androidx.compose.runtime.SlotTable: int[] getGroups()>();

        $i2 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$groupSize(int[],int)>($r2, i0);

        $i3 = $i1 + $i2;

        r0.<androidx.compose.runtime.GroupIterator: int index> = $i3;

        $r3 = new androidx.compose.runtime.SlotTableGroup;

        $r4 = r0.<androidx.compose.runtime.GroupIterator: androidx.compose.runtime.SlotTable table>;

        $i4 = r0.<androidx.compose.runtime.GroupIterator: int version>;

        specialinvoke $r3.<androidx.compose.runtime.SlotTableGroup: void <init>(androidx.compose.runtime.SlotTable,int,int)>($r4, i0, $i4);

        $r5 = (androidx.compose.runtime.tooling.CompositionGroup) $r3;

        return $r5;
    }

    private final void validateRead()
    {
        androidx.compose.runtime.GroupIterator r0;
        androidx.compose.runtime.SlotTable $r1;
        int $i0, $i1;
        java.util.ConcurrentModificationException $r2;

        r0 := @this: androidx.compose.runtime.GroupIterator;

        $r1 = r0.<androidx.compose.runtime.GroupIterator: androidx.compose.runtime.SlotTable table>;

        $i0 = virtualinvoke $r1.<androidx.compose.runtime.SlotTable: int getVersion$runtime_release()>();

        $i1 = r0.<androidx.compose.runtime.GroupIterator: int version>;

        if $i0 == $i1 goto label1;

        $r2 = new java.util.ConcurrentModificationException;

        specialinvoke $r2.<java.util.ConcurrentModificationException: void <init>()>();

        throw $r2;

     label1:
        return;
    }

    public void remove()
    {
        androidx.compose.runtime.GroupIterator r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: androidx.compose.runtime.GroupIterator;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r1;
    }

    public volatile java.lang.Object next()
    {
        androidx.compose.runtime.GroupIterator r0;
        androidx.compose.runtime.tooling.CompositionGroup $r1;

        r0 := @this: androidx.compose.runtime.GroupIterator;

        $r1 = virtualinvoke r0.<androidx.compose.runtime.GroupIterator: androidx.compose.runtime.tooling.CompositionGroup next()>();

        return $r1;
    }

