kotlinx.coroutines.Delay
<kotlinx.coroutines.Delay: kotlinx.coroutines.DisposableHandle invokeOnTimeout(long,java.lang.Runnable,kotlin.coroutines.CoroutineContext)>
<kotlinx.coroutines.Delay: void scheduleResumeAfterDelay(long,kotlinx.coroutines.CancellableContinuation)>
kotlinx.coroutines.Delay$DefaultImpls
    public static kotlinx.coroutines.DisposableHandle invokeOnTimeout(kotlinx.coroutines.Delay, long, java.lang.Runnable, kotlin.coroutines.CoroutineContext)
    {
        long $l0;
        java.lang.Runnable $r0;
        kotlin.coroutines.CoroutineContext $r1;
        kotlinx.coroutines.Delay $r2;
        kotlinx.coroutines.DisposableHandle $r3;

        $r2 := @parameter0: kotlinx.coroutines.Delay;

        $l0 := @parameter1: long;

        $r0 := @parameter2: java.lang.Runnable;

        $r1 := @parameter3: kotlin.coroutines.CoroutineContext;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "block");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "context");

        $r2 = staticinvoke <kotlinx.coroutines.DefaultExecutorKt: kotlinx.coroutines.Delay getDefaultDelay()>();

        $r3 = interfaceinvoke $r2.<kotlinx.coroutines.Delay: kotlinx.coroutines.DisposableHandle invokeOnTimeout(long,java.lang.Runnable,kotlin.coroutines.CoroutineContext)>($l0, $r0, $r1);

        return $r3;
    }

