androidx.work.impl.background.systemalarm.SystemAlarmDispatcher
<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: java.lang.String TAG>
<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: java.lang.String PROCESS_COMMAND_TAG>
<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: java.lang.String KEY_START_ID>
<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: int DEFAULT_START_ID>
<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: android.content.Context mContext>
<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: androidx.work.impl.utils.taskexecutor.TaskExecutor mTaskExecutor>
<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: androidx.work.impl.utils.WorkTimer mWorkTimer>
<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: androidx.work.impl.Processor mProcessor>
<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: androidx.work.impl.WorkManagerImpl mWorkManager>
<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: androidx.work.impl.background.systemalarm.CommandHandler mCommandHandler>
<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: java.util.List mIntents>
<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: android.content.Intent mCurrentIntent>
<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$CommandsCompletedListener mCompletedListener>
<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: androidx.work.impl.StartStopTokens mStartStopTokens>
    void <init>(android.content.Context)
    {
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher r0;
        android.content.Context r1;

        r0 := @this: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: void <init>(android.content.Context,androidx.work.impl.Processor,androidx.work.impl.WorkManagerImpl)>(r1, null, null);

        return;
    }

    void <init>(android.content.Context, androidx.work.impl.Processor, androidx.work.impl.WorkManagerImpl)
    {
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher r0;
        android.content.Context r1, $r4, $r8;
        androidx.work.impl.Processor r2, $r16, $r21;
        androidx.work.impl.WorkManagerImpl r3, $r10, $r13, $r14, $r20;
        androidx.work.impl.StartStopTokens $r5, $r7;
        androidx.work.impl.background.systemalarm.CommandHandler $r6;
        androidx.work.impl.utils.WorkTimer $r9;
        androidx.work.Configuration $r11;
        androidx.work.RunnableScheduler $r12;
        androidx.work.impl.utils.taskexecutor.TaskExecutor $r15;
        java.util.ArrayList $r17;

        r0 := @this: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: androidx.work.impl.Processor;

        r3 := @parameter2: androidx.work.impl.WorkManagerImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = virtualinvoke r1.<android.content.Context: android.content.Context getApplicationContext()>();

        r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: android.content.Context mContext> = $r4;

        $r5 = new androidx.work.impl.StartStopTokens;

        specialinvoke $r5.<androidx.work.impl.StartStopTokens: void <init>()>();

        r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: androidx.work.impl.StartStopTokens mStartStopTokens> = $r5;

        $r6 = new androidx.work.impl.background.systemalarm.CommandHandler;

        $r8 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: android.content.Context mContext>;

        $r7 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: androidx.work.impl.StartStopTokens mStartStopTokens>;

        specialinvoke $r6.<androidx.work.impl.background.systemalarm.CommandHandler: void <init>(android.content.Context,androidx.work.impl.StartStopTokens)>($r8, $r7);

        r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: androidx.work.impl.background.systemalarm.CommandHandler mCommandHandler> = $r6;

        if r3 == null goto label1;

        $r20 = r3;

        goto label2;

     label1:
        $r20 = staticinvoke <androidx.work.impl.WorkManagerImpl: androidx.work.impl.WorkManagerImpl getInstance(android.content.Context)>(r1);

     label2:
        r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: androidx.work.impl.WorkManagerImpl mWorkManager> = $r20;

        $r9 = new androidx.work.impl.utils.WorkTimer;

        $r10 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: androidx.work.impl.WorkManagerImpl mWorkManager>;

        $r11 = virtualinvoke $r10.<androidx.work.impl.WorkManagerImpl: androidx.work.Configuration getConfiguration()>();

        $r12 = virtualinvoke $r11.<androidx.work.Configuration: androidx.work.RunnableScheduler getRunnableScheduler()>();

        specialinvoke $r9.<androidx.work.impl.utils.WorkTimer: void <init>(androidx.work.RunnableScheduler)>($r12);

        r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: androidx.work.impl.utils.WorkTimer mWorkTimer> = $r9;

        if r2 == null goto label3;

        $r21 = r2;

        goto label4;

     label3:
        $r13 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: androidx.work.impl.WorkManagerImpl mWorkManager>;

        $r21 = virtualinvoke $r13.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.Processor getProcessor()>();

     label4:
        r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: androidx.work.impl.Processor mProcessor> = $r21;

        $r14 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: androidx.work.impl.WorkManagerImpl mWorkManager>;

        $r15 = virtualinvoke $r14.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.utils.taskexecutor.TaskExecutor getWorkTaskExecutor()>();

        r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: androidx.work.impl.utils.taskexecutor.TaskExecutor mTaskExecutor> = $r15;

        $r16 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: androidx.work.impl.Processor mProcessor>;

        virtualinvoke $r16.<androidx.work.impl.Processor: void addExecutionListener(androidx.work.impl.ExecutionListener)>(r0);

        $r17 = new java.util.ArrayList;

        specialinvoke $r17.<java.util.ArrayList: void <init>()>();

        r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: java.util.List mIntents> = $r17;

        r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: android.content.Intent mCurrentIntent> = null;

        return;
    }

    void onDestroy()
    {
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher r0;
        androidx.work.Logger $r1;
        java.lang.String $r2;
        androidx.work.impl.Processor $r3;

        r0 := @this: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher;

        $r1 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r2 = <androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: java.lang.String TAG>;

        virtualinvoke $r1.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r2, "Destroying SystemAlarmDispatcher");

        $r3 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: androidx.work.impl.Processor mProcessor>;

        virtualinvoke $r3.<androidx.work.impl.Processor: void removeExecutionListener(androidx.work.impl.ExecutionListener)>(r0);

        r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$CommandsCompletedListener mCompletedListener> = null;

        return;
    }

    public void onExecuted(androidx.work.impl.model.WorkGenerationalId, boolean)
    {
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher r0;
        androidx.work.impl.model.WorkGenerationalId r1;
        boolean z0;
        androidx.work.impl.utils.taskexecutor.TaskExecutor $r2;
        java.util.concurrent.Executor $r3;
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$AddRunnable $r4;
        android.content.Context $r5;
        android.content.Intent $r6;

        r0 := @this: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher;

        r1 := @parameter0: androidx.work.impl.model.WorkGenerationalId;

        z0 := @parameter1: boolean;

        $r2 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: androidx.work.impl.utils.taskexecutor.TaskExecutor mTaskExecutor>;

        $r3 = interfaceinvoke $r2.<androidx.work.impl.utils.taskexecutor.TaskExecutor: java.util.concurrent.Executor getMainThreadExecutor()>();

        $r4 = new androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$AddRunnable;

        $r5 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: android.content.Context mContext>;

        $r6 = staticinvoke <androidx.work.impl.background.systemalarm.CommandHandler: android.content.Intent createExecutionCompletedIntent(android.content.Context,androidx.work.impl.model.WorkGenerationalId,boolean)>($r5, r1, z0);

        specialinvoke $r4.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$AddRunnable: void <init>(androidx.work.impl.background.systemalarm.SystemAlarmDispatcher,android.content.Intent,int)>(r0, $r6, 0);

        interfaceinvoke $r3.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r4);

        return;
    }

    public boolean add(android.content.Intent, int)
    {
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher r0;
        android.content.Intent r1;
        int i0;
        java.lang.String r2, $r7, $r13, $r14, $r20;
        java.util.List r3, $r16, $r17, $r18;
        boolean z0, $z1, $z2, $z3, $z5, $z6;
        java.lang.Throwable r4, $r21;
        androidx.work.Logger $r5, $r19;
        java.lang.StringBuilder $r6, $r8, $r9, $r10, $r11, $r12;

        r0 := @this: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher;

        r1 := @parameter0: android.content.Intent;

        i0 := @parameter1: int;

        $r5 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r7 = <androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: java.lang.String TAG>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Adding command ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r7, $r13);

        specialinvoke r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: void assertMainThread()>();

        r2 = virtualinvoke r1.<android.content.Intent: java.lang.String getAction()>();

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z1 == 0 goto label01;

        $r19 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r20 = <androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: java.lang.String TAG>;

        virtualinvoke $r19.<androidx.work.Logger: void warning(java.lang.String,java.lang.String)>($r20, "Unknown command. Ignoring");

        return 0;

     label01:
        $r14 = "ACTION_CONSTRAINTS_CHANGED";

        $z2 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z2 == 0 goto label02;

        $z5 = specialinvoke r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: boolean hasIntentWithAction(java.lang.String)>("ACTION_CONSTRAINTS_CHANGED");

        if $z5 == 0 goto label02;

        return 0;

     label02:
        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("KEY_START_ID", i0);

        $r16 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: java.util.List mIntents>;

        r3 = $r16;

        entermonitor $r16;

     label03:
        $r17 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: java.util.List mIntents>;

        $z3 = interfaceinvoke $r17.<java.util.List: boolean isEmpty()>();

        if $z3 != 0 goto label04;

        $z6 = 1;

        goto label05;

     label04:
        $z6 = 0;

     label05:
        z0 = $z6;

        $r18 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: java.util.List mIntents>;

        interfaceinvoke $r18.<java.util.List: boolean add(java.lang.Object)>(r1);

        if z0 != 0 goto label06;

        specialinvoke r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: void processCommand()>();

     label06:
        exitmonitor r3;

     label07:
        goto label10;

     label08:
        $r21 := @caughtexception;

        r4 = $r21;

        exitmonitor r3;

     label09:
        throw r4;

     label10:
        return 1;

        catch java.lang.Throwable from label03 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    void setCompletedListener(androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$CommandsCompletedListener)
    {
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher r0;
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$CommandsCompletedListener r1, $r2;
        androidx.work.Logger $r3;
        java.lang.String $r4;

        r0 := @this: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher;

        r1 := @parameter0: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$CommandsCompletedListener;

        $r2 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$CommandsCompletedListener mCompletedListener>;

        if $r2 == null goto label1;

        $r3 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r4 = <androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: java.lang.String TAG>;

        virtualinvoke $r3.<androidx.work.Logger: void error(java.lang.String,java.lang.String)>($r4, "A completion listener for SystemAlarmDispatcher already exists.");

        return;

     label1:
        r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$CommandsCompletedListener mCompletedListener> = r1;

        return;
    }

    androidx.work.impl.Processor getProcessor()
    {
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher r0;
        androidx.work.impl.Processor $r1;

        r0 := @this: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher;

        $r1 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: androidx.work.impl.Processor mProcessor>;

        return $r1;
    }

    androidx.work.impl.utils.WorkTimer getWorkTimer()
    {
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher r0;
        androidx.work.impl.utils.WorkTimer $r1;

        r0 := @this: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher;

        $r1 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: androidx.work.impl.utils.WorkTimer mWorkTimer>;

        return $r1;
    }

    androidx.work.impl.WorkManagerImpl getWorkManager()
    {
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher r0;
        androidx.work.impl.WorkManagerImpl $r1;

        r0 := @this: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher;

        $r1 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: androidx.work.impl.WorkManagerImpl mWorkManager>;

        return $r1;
    }

    androidx.work.impl.utils.taskexecutor.TaskExecutor getTaskExecutor()
    {
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher r0;
        androidx.work.impl.utils.taskexecutor.TaskExecutor $r1;

        r0 := @this: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher;

        $r1 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: androidx.work.impl.utils.taskexecutor.TaskExecutor mTaskExecutor>;

        return $r1;
    }

    void dequeueAndCheckForCompletion()
    {
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher r0;
        java.util.List r1, $r6, $r10, $r22, $r28;
        androidx.work.impl.utils.taskexecutor.SerialExecutor r2;
        java.lang.Throwable r3, $r27;
        androidx.work.Logger $r4, $r11, $r15;
        java.lang.String $r5, $r12, $r17, $r21;
        android.content.Intent $r7, $r19, $r24, $r25;
        androidx.work.impl.utils.taskexecutor.TaskExecutor $r8;
        androidx.work.impl.background.systemalarm.CommandHandler $r9;
        boolean $z0, $z1, $z2, $z3, $z4;
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$CommandsCompletedListener $r13, $r14;
        java.lang.StringBuilder $r16, $r18, $r20;
        java.lang.Object $r23;
        java.lang.IllegalStateException $r26;

        r0 := @this: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher;

        $r4 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r5 = <androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: java.lang.String TAG>;

        virtualinvoke $r4.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r5, "Checking if commands are complete.");

        specialinvoke r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: void assertMainThread()>();

        $r6 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: java.util.List mIntents>;

        r1 = $r6;

        entermonitor $r6;

     label1:
        $r7 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: android.content.Intent mCurrentIntent>;

        if $r7 == null goto label3;

        $r15 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r17 = <androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: java.lang.String TAG>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removing command ");

        $r19 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: android.content.Intent mCurrentIntent>;

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r17, $r21);

        $r22 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: java.util.List mIntents>;

        $r23 = interfaceinvoke $r22.<java.util.List: java.lang.Object remove(int)>(0);

        $r25 = (android.content.Intent) $r23;

        $r24 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: android.content.Intent mCurrentIntent>;

        $z3 = virtualinvoke $r25.<java.lang.Object: boolean equals(java.lang.Object)>($r24);

        if $z3 != 0 goto label2;

        $r26 = new java.lang.IllegalStateException;

        specialinvoke $r26.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Dequeue-d command is not the first.");

        throw $r26;

     label2:
        r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: android.content.Intent mCurrentIntent> = null;

     label3:
        $r8 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: androidx.work.impl.utils.taskexecutor.TaskExecutor mTaskExecutor>;

        r2 = interfaceinvoke $r8.<androidx.work.impl.utils.taskexecutor.TaskExecutor: androidx.work.impl.utils.taskexecutor.SerialExecutor getSerialTaskExecutor()>();

        $r9 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: androidx.work.impl.background.systemalarm.CommandHandler mCommandHandler>;

        $z0 = virtualinvoke $r9.<androidx.work.impl.background.systemalarm.CommandHandler: boolean hasPendingCommands()>();

        if $z0 != 0 goto label4;

        $r10 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: java.util.List mIntents>;

        $z1 = interfaceinvoke $r10.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label4;

        $z2 = interfaceinvoke r2.<androidx.work.impl.utils.taskexecutor.SerialExecutor: boolean hasPendingTasks()>();

        if $z2 != 0 goto label4;

        $r11 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r12 = <androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: java.lang.String TAG>;

        virtualinvoke $r11.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r12, "No more commands & intents.");

        $r13 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$CommandsCompletedListener mCompletedListener>;

        if $r13 == null goto label5;

        $r14 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$CommandsCompletedListener mCompletedListener>;

        interfaceinvoke $r14.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$CommandsCompletedListener: void onAllCommandsCompleted()>();

        goto label5;

     label4:
        $r28 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: java.util.List mIntents>;

        $z4 = interfaceinvoke $r28.<java.util.List: boolean isEmpty()>();

        if $z4 != 0 goto label5;

        specialinvoke r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: void processCommand()>();

     label5:
        exitmonitor r1;

     label6:
        goto label9;

     label7:
        $r27 := @caughtexception;

        r3 = $r27;

        exitmonitor r1;

     label8:
        throw r3;

     label9:
        return;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    private void processCommand()
    {
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher r0;
        android.os.PowerManager$WakeLock r1;
        java.lang.Throwable r2, $r7;
        android.content.Context $r3;
        androidx.work.impl.WorkManagerImpl $r4;
        androidx.work.impl.utils.taskexecutor.TaskExecutor $r5;
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$1 $r6;

        r0 := @this: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher;

        specialinvoke r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: void assertMainThread()>();

        $r3 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: android.content.Context mContext>;

        r1 = staticinvoke <androidx.work.impl.utils.WakeLocks: android.os.PowerManager$WakeLock newWakeLock(android.content.Context,java.lang.String)>($r3, "ProcessCommand");

     label1:
        virtualinvoke r1.<android.os.PowerManager$WakeLock: void acquire()>();

        $r4 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: androidx.work.impl.WorkManagerImpl mWorkManager>;

        $r5 = virtualinvoke $r4.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.utils.taskexecutor.TaskExecutor getWorkTaskExecutor()>();

        $r6 = new androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$1;

        specialinvoke $r6.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$1: void <init>(androidx.work.impl.background.systemalarm.SystemAlarmDispatcher)>(r0);

        interfaceinvoke $r5.<androidx.work.impl.utils.taskexecutor.TaskExecutor: void executeOnTaskThread(java.lang.Runnable)>($r6);

     label2:
        virtualinvoke r1.<android.os.PowerManager$WakeLock: void release()>();

        goto label4;

     label3:
        $r7 := @caughtexception;

        r2 = $r7;

        virtualinvoke r1.<android.os.PowerManager$WakeLock: void release()>();

        throw r2;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private boolean hasIntentWithAction(java.lang.String)
    {
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher r0;
        java.lang.String r1, $r9;
        java.util.List r2, $r6, $r7;
        java.util.Iterator r3;
        android.content.Intent r4;
        java.lang.Throwable r5, $r10;
        boolean $z0, $z1;
        java.lang.Object $r8;

        r0 := @this: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: void assertMainThread()>();

        $r6 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: java.util.List mIntents>;

        r2 = $r6;

        entermonitor $r6;

     label1:
        $r7 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: java.util.List mIntents>;

        r3 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.content.Intent) $r8;

        $r9 = virtualinvoke r4.<android.content.Intent: java.lang.String getAction()>();

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z1 == 0 goto label4;

        exitmonitor r2;

     label3:
        return 1;

     label4:
        goto label2;

     label5:
        exitmonitor r2;

     label6:
        return 0;

     label7:
        $r10 := @caughtexception;

        r5 = $r10;

        exitmonitor r2;

     label8:
        throw r5;

        catch java.lang.Throwable from label1 to label3 with label7;
        catch java.lang.Throwable from label4 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    private void assertMainThread()
    {
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher r0;
        android.os.Looper $r1;
        java.lang.Thread $r2, $r3;
        java.lang.IllegalStateException $r4;

        r0 := @this: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher;

        $r1 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        $r2 = virtualinvoke $r1.<android.os.Looper: java.lang.Thread getThread()>();

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        if $r2 == $r3 goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Needs to be invoked on the main thread.");

        throw $r4;

     label1:
        return;
    }

    static void <clinit>()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <androidx.work.Logger: java.lang.String tagWithPrefix(java.lang.String)>("SystemAlarmDispatcher");

        <androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: java.lang.String TAG> = $r0;

        return;
    }

androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$1
<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$1: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher this$0>
    void <init>(androidx.work.impl.background.systemalarm.SystemAlarmDispatcher)
    {
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$1 r0;
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher r1;

        r0 := @this: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$1;

        r1 := @parameter0: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher;

        r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$1: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$1 r0;
        android.os.PowerManager$WakeLock r1;
        java.lang.Throwable r2, r3, $r61, $r75, $r91, r93;
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher $r4, $r6, $r8, $r11, $r13, $r15, $r21, $r27, $r43, $r44, $r45, $r56, $r60, $r70, $r74, $r86, $r90;
        java.util.List $r5, $r7, r92;
        java.lang.Object $r9;
        android.content.Intent $r10, $r12, $r14, $r16, $r22, $r46;
        androidx.work.Logger $r17, $r35, $r48, $r62, $r76, $r78;
        java.lang.StringBuilder $r18, $r20, $r23, $r24, $r25, $r28, $r30, $r31, $r32, $r33, $r36, $r38, $r39, $r40, $r41, $r49, $r51, $r52, $r53, $r54, $r63, $r65, $r66, $r67, $r68, $r79, $r81, $r82, $r83, $r84;
        java.lang.String $r19, $r26, $r34, $r37, $r42, $r50, $r55, $r64, $r69, $r77, $r80, $r85, r94;
        android.content.Context $r29;
        androidx.work.impl.background.systemalarm.CommandHandler $r47;
        androidx.work.impl.utils.taskexecutor.TaskExecutor $r57, $r71, $r87;
        java.util.concurrent.Executor $r58, $r72, $r88;
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$DequeueAndCheckForCompletion $r59, $r73, $r89;
        int i0;

        r0 := @this: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$1;

        $r4 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$1: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher this$0>;

        $r5 = $r4.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: java.util.List mIntents>;

        r92 = $r5;

        entermonitor $r5;

     label01:
        $r8 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$1: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher this$0>;

        $r6 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$1: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher this$0>;

        $r7 = $r6.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: java.util.List mIntents>;

        $r9 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(0);

        $r10 = (android.content.Intent) $r9;

        $r8.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: android.content.Intent mCurrentIntent> = $r10;

        exitmonitor r92;

     label02:
        goto label05;

     label03:
        $r91 := @caughtexception;

        r93 = $r91;

        exitmonitor r92;

     label04:
        throw r93;

     label05:
        $r11 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$1: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher this$0>;

        $r12 = $r11.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: android.content.Intent mCurrentIntent>;

        if $r12 == null goto label12;

        $r13 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$1: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher this$0>;

        $r14 = $r13.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: android.content.Intent mCurrentIntent>;

        r94 = virtualinvoke $r14.<android.content.Intent: java.lang.String getAction()>();

        $r15 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$1: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher this$0>;

        $r16 = $r15.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: android.content.Intent mCurrentIntent>;

        i0 = virtualinvoke $r16.<android.content.Intent: int getIntExtra(java.lang.String,int)>("KEY_START_ID", 0);

        $r17 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r19 = <androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: java.lang.String TAG>;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Processing command ");

        $r21 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$1: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher this$0>;

        $r22 = $r21.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: android.content.Intent mCurrentIntent>;

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r17.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r19, $r26);

        $r27 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$1: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher this$0>;

        $r29 = $r27.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: android.content.Context mContext>;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r94);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        r1 = staticinvoke <androidx.work.impl.utils.WakeLocks: android.os.PowerManager$WakeLock newWakeLock(android.content.Context,java.lang.String)>($r29, $r34);

     label06:
        $r35 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r37 = <androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: java.lang.String TAG>;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Acquiring operation wake lock (");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r94);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r35.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r37, $r42);

        virtualinvoke r1.<android.os.PowerManager$WakeLock: void acquire()>();

        $r43 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$1: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher this$0>;

        $r47 = $r43.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: androidx.work.impl.background.systemalarm.CommandHandler mCommandHandler>;

        $r44 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$1: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher this$0>;

        $r46 = $r44.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: android.content.Intent mCurrentIntent>;

        $r45 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$1: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher this$0>;

        virtualinvoke $r47.<androidx.work.impl.background.systemalarm.CommandHandler: void onHandleIntent(android.content.Intent,int,androidx.work.impl.background.systemalarm.SystemAlarmDispatcher)>($r46, i0, $r45);

     label07:
        $r48 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r50 = <androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: java.lang.String TAG>;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r51 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Releasing operation wake lock (");

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r94);

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ");

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r48.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r50, $r55);

        virtualinvoke r1.<android.os.PowerManager$WakeLock: void release()>();

        $r56 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$1: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher this$0>;

        $r57 = $r56.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: androidx.work.impl.utils.taskexecutor.TaskExecutor mTaskExecutor>;

        $r58 = interfaceinvoke $r57.<androidx.work.impl.utils.taskexecutor.TaskExecutor: java.util.concurrent.Executor getMainThreadExecutor()>();

        $r59 = new androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$DequeueAndCheckForCompletion;

        $r60 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$1: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher this$0>;

        specialinvoke $r59.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$DequeueAndCheckForCompletion: void <init>(androidx.work.impl.background.systemalarm.SystemAlarmDispatcher)>($r60);

        interfaceinvoke $r58.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r59);

        goto label12;

     label08:
        $r75 := @caughtexception;

        r2 = $r75;

        $r76 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r77 = <androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: java.lang.String TAG>;

        virtualinvoke $r76.<androidx.work.Logger: void error(java.lang.String,java.lang.String,java.lang.Throwable)>($r77, "Unexpected error in onHandleIntent", r2);

     label09:
        $r78 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r80 = <androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: java.lang.String TAG>;

        $r79 = new java.lang.StringBuilder;

        specialinvoke $r79.<java.lang.StringBuilder: void <init>()>();

        $r81 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Releasing operation wake lock (");

        $r82 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r94);

        $r83 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ");

        $r84 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r85 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r78.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r80, $r85);

        virtualinvoke r1.<android.os.PowerManager$WakeLock: void release()>();

        $r86 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$1: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher this$0>;

        $r87 = $r86.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: androidx.work.impl.utils.taskexecutor.TaskExecutor mTaskExecutor>;

        $r88 = interfaceinvoke $r87.<androidx.work.impl.utils.taskexecutor.TaskExecutor: java.util.concurrent.Executor getMainThreadExecutor()>();

        $r89 = new androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$DequeueAndCheckForCompletion;

        $r90 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$1: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher this$0>;

        specialinvoke $r89.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$DequeueAndCheckForCompletion: void <init>(androidx.work.impl.background.systemalarm.SystemAlarmDispatcher)>($r90);

        interfaceinvoke $r88.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r89);

        goto label12;

     label10:
        $r61 := @caughtexception;

        r3 = $r61;

     label11:
        $r62 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r64 = <androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: java.lang.String TAG>;

        $r63 = new java.lang.StringBuilder;

        specialinvoke $r63.<java.lang.StringBuilder: void <init>()>();

        $r65 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Releasing operation wake lock (");

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r94);

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ");

        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r62.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r64, $r69);

        virtualinvoke r1.<android.os.PowerManager$WakeLock: void release()>();

        $r70 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$1: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher this$0>;

        $r71 = $r70.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: androidx.work.impl.utils.taskexecutor.TaskExecutor mTaskExecutor>;

        $r72 = interfaceinvoke $r71.<androidx.work.impl.utils.taskexecutor.TaskExecutor: java.util.concurrent.Executor getMainThreadExecutor()>();

        $r73 = new androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$DequeueAndCheckForCompletion;

        $r74 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$1: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher this$0>;

        specialinvoke $r73.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$DequeueAndCheckForCompletion: void <init>(androidx.work.impl.background.systemalarm.SystemAlarmDispatcher)>($r74);

        interfaceinvoke $r72.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r73);

        throw r3;

     label12:
        return;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$AddRunnable
<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$AddRunnable: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher mDispatcher>
<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$AddRunnable: android.content.Intent mIntent>
<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$AddRunnable: int mStartId>
    void <init>(androidx.work.impl.background.systemalarm.SystemAlarmDispatcher, android.content.Intent, int)
    {
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$AddRunnable r0;
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher r1;
        android.content.Intent r2;
        int i0;

        r0 := @this: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$AddRunnable;

        r1 := @parameter0: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher;

        r2 := @parameter1: android.content.Intent;

        i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$AddRunnable: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher mDispatcher> = r1;

        r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$AddRunnable: android.content.Intent mIntent> = r2;

        r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$AddRunnable: int mStartId> = i0;

        return;
    }

    public void run()
    {
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$AddRunnable r0;
        int $i0;
        android.content.Intent $r1;
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher $r2;

        r0 := @this: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$AddRunnable;

        $r2 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$AddRunnable: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher mDispatcher>;

        $r1 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$AddRunnable: android.content.Intent mIntent>;

        $i0 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$AddRunnable: int mStartId>;

        virtualinvoke $r2.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: boolean add(android.content.Intent,int)>($r1, $i0);

        return;
    }

androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$CommandsCompletedListener
<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$CommandsCompletedListener: void onAllCommandsCompleted()>
androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$DequeueAndCheckForCompletion
<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$DequeueAndCheckForCompletion: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher mDispatcher>
    void <init>(androidx.work.impl.background.systemalarm.SystemAlarmDispatcher)
    {
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$DequeueAndCheckForCompletion r0;
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher r1;

        r0 := @this: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$DequeueAndCheckForCompletion;

        r1 := @parameter0: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$DequeueAndCheckForCompletion: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher mDispatcher> = r1;

        return;
    }

    public void run()
    {
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$DequeueAndCheckForCompletion r0;
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher $r1;

        r0 := @this: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$DequeueAndCheckForCompletion;

        $r1 = r0.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$DequeueAndCheckForCompletion: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher mDispatcher>;

        virtualinvoke $r1.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: void dequeueAndCheckForCompletion()>();

        return;
    }

