androidx.media3.exoplayer.rtsp.reader.RtpH264Reader
<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: java.lang.String TAG>
<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: int MEDIA_CLOCK_FREQUENCY>
<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: int FU_PAYLOAD_OFFSET>
<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: int RTP_PACKET_TYPE_STAP_A>
<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: int RTP_PACKET_TYPE_FU_A>
<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: int NAL_UNIT_TYPE_IDR>
<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: androidx.media3.common.util.ParsableByteArray fuScratchBuffer>
<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: androidx.media3.common.util.ParsableByteArray nalStartCodeArray>
<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: androidx.media3.exoplayer.rtsp.RtpPayloadFormat payloadFormat>
<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: androidx.media3.extractor.TrackOutput trackOutput>
<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: int bufferFlags>
<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: long firstReceivedTimestamp>
<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: int previousSequenceNumber>
<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: int fragmentedSampleSizeBytes>
<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: long startTimeOffsetUs>
    public void <init>(androidx.media3.exoplayer.rtsp.RtpPayloadFormat)
    {
        androidx.media3.exoplayer.rtsp.reader.RtpH264Reader r0;
        androidx.media3.exoplayer.rtsp.RtpPayloadFormat r1;
        androidx.media3.common.util.ParsableByteArray $r2, $r4;
        byte[] $r3;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpH264Reader;

        r1 := @parameter0: androidx.media3.exoplayer.rtsp.RtpPayloadFormat;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new androidx.media3.common.util.ParsableByteArray;

        $r3 = <androidx.media3.extractor.NalUnitUtil: byte[] NAL_START_CODE>;

        specialinvoke $r2.<androidx.media3.common.util.ParsableByteArray: void <init>(byte[])>($r3);

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: androidx.media3.common.util.ParsableByteArray nalStartCodeArray> = $r2;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: androidx.media3.exoplayer.rtsp.RtpPayloadFormat payloadFormat> = r1;

        $r4 = new androidx.media3.common.util.ParsableByteArray;

        specialinvoke $r4.<androidx.media3.common.util.ParsableByteArray: void <init>()>();

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: androidx.media3.common.util.ParsableByteArray fuScratchBuffer> = $r4;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: long firstReceivedTimestamp> = -9223372036854775807L;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: int previousSequenceNumber> = -1;

        return;
    }

    public void createTracks(androidx.media3.extractor.ExtractorOutput, int)
    {
        androidx.media3.exoplayer.rtsp.reader.RtpH264Reader r0;
        androidx.media3.extractor.ExtractorOutput r1;
        int i0;
        androidx.media3.extractor.TrackOutput $r2, $r3, $r7;
        java.lang.Object $r4;
        androidx.media3.exoplayer.rtsp.RtpPayloadFormat $r5;
        androidx.media3.common.Format $r6;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpH264Reader;

        r1 := @parameter0: androidx.media3.extractor.ExtractorOutput;

        i0 := @parameter1: int;

        $r2 = interfaceinvoke r1.<androidx.media3.extractor.ExtractorOutput: androidx.media3.extractor.TrackOutput track(int,int)>(i0, 2);

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: androidx.media3.extractor.TrackOutput trackOutput> = $r2;

        $r3 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: androidx.media3.extractor.TrackOutput trackOutput>;

        $r4 = staticinvoke <androidx.media3.common.util.Util: java.lang.Object castNonNull(java.lang.Object)>($r3);

        $r7 = (androidx.media3.extractor.TrackOutput) $r4;

        $r5 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: androidx.media3.exoplayer.rtsp.RtpPayloadFormat payloadFormat>;

        $r6 = $r5.<androidx.media3.exoplayer.rtsp.RtpPayloadFormat: androidx.media3.common.Format format>;

        interfaceinvoke $r7.<androidx.media3.extractor.TrackOutput: void format(androidx.media3.common.Format)>($r6);

        return;
    }

    public void onReceivingFirstPacket(long, int)
    {
        androidx.media3.exoplayer.rtsp.reader.RtpH264Reader r0;
        long l0;
        int i1;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpH264Reader;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        return;
    }

    public void consume(androidx.media3.common.util.ParsableByteArray, long, int, boolean) throws androidx.media3.common.ParserException
    {
        androidx.media3.exoplayer.rtsp.reader.RtpH264Reader r0;
        androidx.media3.common.util.ParsableByteArray r1;
        long l0, $l4, $l6, $l7, l10;
        int i1, $i8, $i9;
        boolean z0;
        byte b2, $b3, $b5;
        byte[] $r2;
        androidx.media3.extractor.TrackOutput $r3, $r9;
        java.lang.Object[] $r5;
        java.lang.Integer $r6;
        java.lang.String $r7;
        androidx.media3.common.ParserException $r8, $r11;
        java.lang.Throwable $r10, r12;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpH264Reader;

        r1 := @parameter0: androidx.media3.common.util.ParsableByteArray;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

     label01:
        $r2 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        $b3 = $r2[0];

        b2 = $b3 & 31;

     label02:
        goto label04;

     label03:
        $r10 := @caughtexception;

        r12 = $r10;

        $r11 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedManifest(java.lang.String,java.lang.Throwable)>(null, r12);

        throw $r11;

     label04:
        $r3 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: androidx.media3.extractor.TrackOutput trackOutput>;

        staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkStateNotNull(java.lang.Object)>($r3);

        if b2 <= 0 goto label05;

        if b2 >= 24 goto label05;

        specialinvoke r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: void processSingleNalUnitPacket(androidx.media3.common.util.ParsableByteArray)>(r1);

        goto label08;

     label05:
        if b2 != 24 goto label06;

        specialinvoke r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: void processSingleTimeAggregationPacket(androidx.media3.common.util.ParsableByteArray)>(r1);

        goto label08;

     label06:
        if b2 != 28 goto label07;

        specialinvoke r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: void processFragmentationUnitPacket(androidx.media3.common.util.ParsableByteArray,int)>(r1, i1);

        goto label08;

     label07:
        $r5 = newarray (java.lang.Object)[1];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(b2);

        $r5[0] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("RTP H264 packetization mode [%d] not supported.", $r5);

        $r8 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedManifest(java.lang.String,java.lang.Throwable)>($r7, null);

        throw $r8;

     label08:
        if z0 == 0 goto label10;

        $l4 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: long firstReceivedTimestamp>;

        $b5 = $l4 cmp -9223372036854775807L;

        if $b5 != 0 goto label09;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: long firstReceivedTimestamp> = l0;

     label09:
        $l7 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: long startTimeOffsetUs>;

        $l6 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: long firstReceivedTimestamp>;

        l10 = staticinvoke <androidx.media3.exoplayer.rtsp.reader.RtpReaderUtils: long toSampleTimeUs(long,long,long,int)>($l7, l0, $l6, 90000);

        $r9 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: androidx.media3.extractor.TrackOutput trackOutput>;

        $i9 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: int bufferFlags>;

        $i8 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: int fragmentedSampleSizeBytes>;

        interfaceinvoke $r9.<androidx.media3.extractor.TrackOutput: void sampleMetadata(long,int,int,int,androidx.media3.extractor.TrackOutput$CryptoData)>(l10, $i9, $i8, 0, null);

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: int fragmentedSampleSizeBytes> = 0;

     label10:
        r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: int previousSequenceNumber> = i1;

        return;

        catch java.lang.IndexOutOfBoundsException from label01 to label02 with label03;
    }

    public void seek(long, long)
    {
        androidx.media3.exoplayer.rtsp.reader.RtpH264Reader r0;
        long l0, l1;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpH264Reader;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: long firstReceivedTimestamp> = l0;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: int fragmentedSampleSizeBytes> = 0;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: long startTimeOffsetUs> = l1;

        return;
    }

    private void processSingleNalUnitPacket(androidx.media3.common.util.ParsableByteArray)
    {
        androidx.media3.exoplayer.rtsp.reader.RtpH264Reader r0;
        androidx.media3.common.util.ParsableByteArray r1;
        int i0, $i2, $i3, $i4, $i5, $i6, $i8;
        byte b1, $b7;
        androidx.media3.extractor.TrackOutput $r2;
        byte[] $r3;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpH264Reader;

        r1 := @parameter0: androidx.media3.common.util.ParsableByteArray;

        i0 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int bytesLeft()>();

        $i2 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: int fragmentedSampleSizeBytes>;

        $i3 = specialinvoke r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: int writeStartCode()>();

        $i4 = $i2 + $i3;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: int fragmentedSampleSizeBytes> = $i4;

        $r2 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: androidx.media3.extractor.TrackOutput trackOutput>;

        interfaceinvoke $r2.<androidx.media3.extractor.TrackOutput: void sampleData(androidx.media3.common.util.ParsableByteArray,int)>(r1, i0);

        $i5 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: int fragmentedSampleSizeBytes>;

        $i6 = $i5 + i0;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: int fragmentedSampleSizeBytes> = $i6;

        $r3 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        $b7 = $r3[0];

        b1 = $b7 & 31;

        $i8 = staticinvoke <androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: int getBufferFlagsFromNalType(int)>(b1);

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: int bufferFlags> = $i8;

        return;
    }

    private void processSingleTimeAggregationPacket(androidx.media3.common.util.ParsableByteArray)
    {
        androidx.media3.exoplayer.rtsp.reader.RtpH264Reader r0;
        androidx.media3.common.util.ParsableByteArray r1;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7;
        androidx.media3.extractor.TrackOutput $r2;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpH264Reader;

        r1 := @parameter0: androidx.media3.common.util.ParsableByteArray;

        virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int readUnsignedByte()>();

     label1:
        $i2 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int bytesLeft()>();

        if $i2 <= 4 goto label2;

        i0 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int readUnsignedShort()>();

        $i3 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: int fragmentedSampleSizeBytes>;

        $i4 = specialinvoke r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: int writeStartCode()>();

        $i5 = $i3 + $i4;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: int fragmentedSampleSizeBytes> = $i5;

        $r2 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: androidx.media3.extractor.TrackOutput trackOutput>;

        interfaceinvoke $r2.<androidx.media3.extractor.TrackOutput: void sampleData(androidx.media3.common.util.ParsableByteArray,int)>(r1, i0);

        $i6 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: int fragmentedSampleSizeBytes>;

        $i7 = $i6 + i0;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: int fragmentedSampleSizeBytes> = $i7;

        goto label1;

     label2:
        r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: int bufferFlags> = 0;

        return;
    }

    private void processFragmentationUnitPacket(androidx.media3.common.util.ParsableByteArray, int)
    {
        androidx.media3.exoplayer.rtsp.reader.RtpH264Reader r0;
        androidx.media3.common.util.ParsableByteArray r1, $r4, $r6, $r7, $r8, $r15, $r17;
        int i0, $i8, $i9, $i10, $i12, $i13, $i14, $i15, i17, i18;
        byte b1, b2, $b4, $b7, $b16;
        short s3, $s5, $s6, $s11;
        boolean z0, z1, $z2, $z3;
        byte[] $r2, $r3, $r5, $r14, $r16;
        androidx.media3.extractor.TrackOutput $r9;
        java.lang.Object[] $r10;
        java.lang.Integer $r11, $r12;
        java.lang.String $r13;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpH264Reader;

        r1 := @parameter0: androidx.media3.common.util.ParsableByteArray;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        b1 = $r2[0];

        $r3 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        b2 = $r3[1];

        $s5 = b1 & 224;

        $b4 = b2 & 31;

        s3 = $s5 | $b4;

        $s6 = b2 & 128;

        if $s6 <= 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z0 = $z2;

        $b7 = b2 & 64;

        if $b7 <= 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        z1 = $z3;

        if z0 == 0 goto label5;

        $i13 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: int fragmentedSampleSizeBytes>;

        $i14 = specialinvoke r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: int writeStartCode()>();

        $i15 = $i13 + $i14;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: int fragmentedSampleSizeBytes> = $i15;

        $r14 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        $b16 = (byte) s3;

        $r14[1] = $b16;

        $r15 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: androidx.media3.common.util.ParsableByteArray fuScratchBuffer>;

        $r16 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        virtualinvoke $r15.<androidx.media3.common.util.ParsableByteArray: void reset(byte[])>($r16);

        $r17 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: androidx.media3.common.util.ParsableByteArray fuScratchBuffer>;

        virtualinvoke $r17.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>(1);

        goto label7;

     label5:
        $i8 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: int previousSequenceNumber>;

        i17 = staticinvoke <androidx.media3.exoplayer.rtsp.RtpPacket: int getNextSequenceNumber(int)>($i8);

        if i0 == i17 goto label6;

        $r10 = newarray (java.lang.Object)[2];

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i17);

        $r10[0] = $r11;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r10[1] = $r12;

        $r13 = staticinvoke <androidx.media3.common.util.Util: java.lang.String formatInvariant(java.lang.String,java.lang.Object[])>("Received RTP packet with unexpected sequence number. Expected: %d; received: %d. Dropping packet.", $r10);

        staticinvoke <androidx.media3.common.util.Log: void w(java.lang.String,java.lang.String)>("RtpH264Reader", $r13);

        return;

     label6:
        $r4 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: androidx.media3.common.util.ParsableByteArray fuScratchBuffer>;

        $r5 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        virtualinvoke $r4.<androidx.media3.common.util.ParsableByteArray: void reset(byte[])>($r5);

        $r6 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: androidx.media3.common.util.ParsableByteArray fuScratchBuffer>;

        virtualinvoke $r6.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>(2);

     label7:
        $r7 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: androidx.media3.common.util.ParsableByteArray fuScratchBuffer>;

        i18 = virtualinvoke $r7.<androidx.media3.common.util.ParsableByteArray: int bytesLeft()>();

        $r9 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: androidx.media3.extractor.TrackOutput trackOutput>;

        $r8 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: androidx.media3.common.util.ParsableByteArray fuScratchBuffer>;

        interfaceinvoke $r9.<androidx.media3.extractor.TrackOutput: void sampleData(androidx.media3.common.util.ParsableByteArray,int)>($r8, i18);

        $i9 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: int fragmentedSampleSizeBytes>;

        $i10 = $i9 + i18;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: int fragmentedSampleSizeBytes> = $i10;

        if z1 == 0 goto label8;

        $s11 = s3 & 31;

        $i12 = staticinvoke <androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: int getBufferFlagsFromNalType(int)>($s11);

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: int bufferFlags> = $i12;

     label8:
        return;
    }

    private int writeStartCode()
    {
        androidx.media3.exoplayer.rtsp.reader.RtpH264Reader r0;
        int i0;
        androidx.media3.common.util.ParsableByteArray $r1, $r2, $r5;
        androidx.media3.extractor.TrackOutput $r3, $r6;
        java.lang.Object $r4;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpH264Reader;

        $r1 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: androidx.media3.common.util.ParsableByteArray nalStartCodeArray>;

        virtualinvoke $r1.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>(0);

        $r2 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: androidx.media3.common.util.ParsableByteArray nalStartCodeArray>;

        i0 = virtualinvoke $r2.<androidx.media3.common.util.ParsableByteArray: int bytesLeft()>();

        $r3 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: androidx.media3.extractor.TrackOutput trackOutput>;

        $r4 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r3);

        $r6 = (androidx.media3.extractor.TrackOutput) $r4;

        $r5 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH264Reader: androidx.media3.common.util.ParsableByteArray nalStartCodeArray>;

        interfaceinvoke $r6.<androidx.media3.extractor.TrackOutput: void sampleData(androidx.media3.common.util.ParsableByteArray,int)>($r5, i0);

        return i0;
    }

    private static int getBufferFlagsFromNalType(int)
    {
        int i0;
        byte $b1;

        i0 := @parameter0: int;

        if i0 != 5 goto label1;

        $b1 = 1;

        goto label2;

     label1:
        $b1 = 0;

     label2:
        return $b1;
    }

