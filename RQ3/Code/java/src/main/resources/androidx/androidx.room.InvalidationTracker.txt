androidx.room.InvalidationTracker
<androidx.room.InvalidationTracker: androidx.room.InvalidationTracker$Companion Companion>
<androidx.room.InvalidationTracker: androidx.room.RoomDatabase database>
<androidx.room.InvalidationTracker: java.util.Map shadowTablesMap>
<androidx.room.InvalidationTracker: java.util.Map viewTables>
<androidx.room.InvalidationTracker: java.util.Map tableIdLookup>
<androidx.room.InvalidationTracker: java.lang.String[] tablesNames>
<androidx.room.InvalidationTracker: androidx.room.AutoCloser autoCloser>
<androidx.room.InvalidationTracker: java.util.concurrent.atomic.AtomicBoolean pendingRefresh>
<androidx.room.InvalidationTracker: boolean initialized>
<androidx.room.InvalidationTracker: androidx.sqlite.db.SupportSQLiteStatement cleanupStatement>
<androidx.room.InvalidationTracker: androidx.room.InvalidationTracker$ObservedTableTracker observedTableTracker>
<androidx.room.InvalidationTracker: androidx.room.InvalidationLiveDataContainer invalidationLiveDataContainer>
<androidx.room.InvalidationTracker: androidx.arch.core.internal.SafeIterableMap observerMap>
<androidx.room.InvalidationTracker: androidx.room.MultiInstanceInvalidationClient multiInstanceInvalidationClient>
<androidx.room.InvalidationTracker: java.lang.Object syncTriggersLock>
<androidx.room.InvalidationTracker: java.lang.Object trackerLock>
<androidx.room.InvalidationTracker: java.lang.Runnable refreshRunnable>
<androidx.room.InvalidationTracker: java.lang.String[] TRIGGERS>
<androidx.room.InvalidationTracker: java.lang.String UPDATE_TABLE_NAME>
<androidx.room.InvalidationTracker: java.lang.String TABLE_ID_COLUMN_NAME>
<androidx.room.InvalidationTracker: java.lang.String INVALIDATED_COLUMN_NAME>
<androidx.room.InvalidationTracker: java.lang.String CREATE_TRACKING_TABLE_SQL>
<androidx.room.InvalidationTracker: java.lang.String RESET_UPDATED_TABLES_SQL>
<androidx.room.InvalidationTracker: java.lang.String SELECT_UPDATED_TABLES_SQL>
    public transient void <init>(androidx.room.RoomDatabase, java.util.Map, java.util.Map, java.lang.String[])
    {
        androidx.room.InvalidationTracker r0, r6;
        androidx.room.RoomDatabase r1, $r10;
        java.util.Map r2, r3, $r15, $r23, $r27, $r28, $r33, $r36, $r49;
        java.lang.String[] r4, r41;
        java.lang.String r5, $r22, $r26, $r32, $r35, $r38, r42, r43, r45, $r46, r47, $r48, r53, r54, r55;
        java.util.concurrent.atomic.AtomicBoolean $r7;
        androidx.room.InvalidationTracker$ObservedTableTracker $r8;
        int $i0, $i2, $i3, i4;
        androidx.room.InvalidationLiveDataContainer $r9;
        androidx.arch.core.internal.SafeIterableMap $r11;
        java.lang.Object $r12, $r13, $r19, $r20, $r24, $r29, $r37;
        java.util.LinkedHashMap $r14;
        java.util.Set $r16;
        boolean $z0, $z1, z3;
        androidx.room.InvalidationTracker$refreshRunnable$1 $r17;
        java.lang.Runnable $r18;
        java.util.Locale $r21, $r25, $r31, $r40;
        java.lang.Integer r44;
        java.util.Iterator r50;
        java.util.Map$Entry r51, r52;

        r0 := @this: androidx.room.InvalidationTracker;

        r1 := @parameter0: androidx.room.RoomDatabase;

        r2 := @parameter1: java.util.Map;

        r3 := @parameter2: java.util.Map;

        r4 := @parameter3: java.lang.String[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "database");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "shadowTablesMap");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "viewTables");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "tableNames");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.room.InvalidationTracker: androidx.room.RoomDatabase database> = r1;

        r0.<androidx.room.InvalidationTracker: java.util.Map shadowTablesMap> = r2;

        r0.<androidx.room.InvalidationTracker: java.util.Map viewTables> = r3;

        $r7 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r7.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<androidx.room.InvalidationTracker: java.util.concurrent.atomic.AtomicBoolean pendingRefresh> = $r7;

        $r8 = new androidx.room.InvalidationTracker$ObservedTableTracker;

        $i0 = lengthof r4;

        specialinvoke $r8.<androidx.room.InvalidationTracker$ObservedTableTracker: void <init>(int)>($i0);

        r0.<androidx.room.InvalidationTracker: androidx.room.InvalidationTracker$ObservedTableTracker observedTableTracker> = $r8;

        $r9 = new androidx.room.InvalidationLiveDataContainer;

        $r10 = r0.<androidx.room.InvalidationTracker: androidx.room.RoomDatabase database>;

        specialinvoke $r9.<androidx.room.InvalidationLiveDataContainer: void <init>(androidx.room.RoomDatabase)>($r10);

        r0.<androidx.room.InvalidationTracker: androidx.room.InvalidationLiveDataContainer invalidationLiveDataContainer> = $r9;

        $r11 = new androidx.arch.core.internal.SafeIterableMap;

        specialinvoke $r11.<androidx.arch.core.internal.SafeIterableMap: void <init>()>();

        r0.<androidx.room.InvalidationTracker: androidx.arch.core.internal.SafeIterableMap observerMap> = $r11;

        $r12 = new java.lang.Object;

        specialinvoke $r12.<java.lang.Object: void <init>()>();

        r0.<androidx.room.InvalidationTracker: java.lang.Object syncTriggersLock> = $r12;

        $r13 = new java.lang.Object;

        specialinvoke $r13.<java.lang.Object: void <init>()>();

        r0.<androidx.room.InvalidationTracker: java.lang.Object trackerLock> = $r13;

        $r14 = new java.util.LinkedHashMap;

        specialinvoke $r14.<java.util.LinkedHashMap: void <init>()>();

        $r15 = (java.util.Map) $r14;

        r0.<androidx.room.InvalidationTracker: java.util.Map tableIdLookup> = $r15;

        $i2 = 0;

        $i3 = lengthof r4;

        r41 = newarray (java.lang.String)[$i3];

        r6 = r0;

     label1:
        if $i2 >= $i3 goto label5;

        i4 = $i2;

        r42 = r4[i4];

        $r31 = <java.util.Locale: java.util.Locale US>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r31, "US");

        $r32 = virtualinvoke r42.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r31);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r32, "this as java.lang.String).toLowerCase(locale)");

        r43 = $r32;

        r44 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        $r33 = r0.<androidx.room.InvalidationTracker: java.util.Map tableIdLookup>;

        interfaceinvoke $r33.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r43, r44);

        $r36 = r0.<androidx.room.InvalidationTracker: java.util.Map shadowTablesMap>;

        $r35 = r4[i4];

        $r37 = interfaceinvoke $r36.<java.util.Map: java.lang.Object get(java.lang.Object)>($r35);

        $r38 = (java.lang.String) $r37;

        if $r38 == null goto label2;

        r45 = $r38;

        $r40 = <java.util.Locale: java.util.Locale US>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r40, "US");

        $r46 = virtualinvoke r45.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r40);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r46, "this as java.lang.String).toLowerCase(locale)");

        goto label3;

     label2:
        $r46 = null;

     label3:
        r47 = $r46;

        $r48 = r47;

        if r47 != null goto label4;

        $r48 = r43;

     label4:
        r41[i4] = $r48;

        $i2 = $i2 + 1;

        goto label1;

     label5:
        r6.<androidx.room.InvalidationTracker: java.lang.String[] tablesNames> = r41;

        $r49 = r0.<androidx.room.InvalidationTracker: java.util.Map shadowTablesMap>;

        $r16 = interfaceinvoke $r49.<java.util.Map: java.util.Set entrySet()>();

        r50 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();

     label6:
        $z0 = interfaceinvoke r50.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r19 = interfaceinvoke r50.<java.util.Iterator: java.lang.Object next()>();

        r51 = (java.util.Map$Entry) $r19;

        r52 = r51;

        z3 = 0;

        $r20 = interfaceinvoke r52.<java.util.Map$Entry: java.lang.Object getValue()>();

        r53 = (java.lang.String) $r20;

        $r21 = <java.util.Locale: java.util.Locale US>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r21, "US");

        $r22 = virtualinvoke r53.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r21);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r22, "this as java.lang.String).toLowerCase(locale)");

        r54 = $r22;

        $r23 = r0.<androidx.room.InvalidationTracker: java.util.Map tableIdLookup>;

        $z1 = interfaceinvoke $r23.<java.util.Map: boolean containsKey(java.lang.Object)>(r54);

        if $z1 == 0 goto label7;

        $r24 = interfaceinvoke r52.<java.util.Map$Entry: java.lang.Object getKey()>();

        r5 = (java.lang.String) $r24;

        $r25 = <java.util.Locale: java.util.Locale US>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r25, "US");

        $r26 = virtualinvoke r5.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r25);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r26, "this as java.lang.String).toLowerCase(locale)");

        r55 = $r26;

        $r28 = r0.<androidx.room.InvalidationTracker: java.util.Map tableIdLookup>;

        $r27 = r0.<androidx.room.InvalidationTracker: java.util.Map tableIdLookup>;

        $r29 = staticinvoke <kotlin.collections.MapsKt: java.lang.Object getValue(java.util.Map,java.lang.Object)>($r27, r54);

        interfaceinvoke $r28.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r55, $r29);

     label7:
        goto label6;

     label8:
        $r17 = new androidx.room.InvalidationTracker$refreshRunnable$1;

        specialinvoke $r17.<androidx.room.InvalidationTracker$refreshRunnable$1: void <init>(androidx.room.InvalidationTracker)>(r0);

        $r18 = (java.lang.Runnable) $r17;

        r0.<androidx.room.InvalidationTracker: java.lang.Runnable refreshRunnable> = $r18;

        return;
    }

    public final androidx.room.RoomDatabase getDatabase$room_runtime_release()
    {
        androidx.room.InvalidationTracker r0;
        androidx.room.RoomDatabase $r1;

        r0 := @this: androidx.room.InvalidationTracker;

        $r1 = r0.<androidx.room.InvalidationTracker: androidx.room.RoomDatabase database>;

        return $r1;
    }

    public final java.util.Map getTableIdLookup$room_runtime_release()
    {
        androidx.room.InvalidationTracker r0;
        java.util.Map $r1;

        r0 := @this: androidx.room.InvalidationTracker;

        $r1 = r0.<androidx.room.InvalidationTracker: java.util.Map tableIdLookup>;

        return $r1;
    }

    public final java.lang.String[] getTablesNames$room_runtime_release()
    {
        androidx.room.InvalidationTracker r0;
        java.lang.String[] $r1;

        r0 := @this: androidx.room.InvalidationTracker;

        $r1 = r0.<androidx.room.InvalidationTracker: java.lang.String[] tablesNames>;

        return $r1;
    }

    public final java.util.concurrent.atomic.AtomicBoolean getPendingRefresh()
    {
        androidx.room.InvalidationTracker r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @this: androidx.room.InvalidationTracker;

        $r1 = r0.<androidx.room.InvalidationTracker: java.util.concurrent.atomic.AtomicBoolean pendingRefresh>;

        return $r1;
    }

    public final androidx.sqlite.db.SupportSQLiteStatement getCleanupStatement$room_runtime_release()
    {
        androidx.room.InvalidationTracker r0;
        androidx.sqlite.db.SupportSQLiteStatement $r1;

        r0 := @this: androidx.room.InvalidationTracker;

        $r1 = r0.<androidx.room.InvalidationTracker: androidx.sqlite.db.SupportSQLiteStatement cleanupStatement>;

        return $r1;
    }

    public final void setCleanupStatement$room_runtime_release(androidx.sqlite.db.SupportSQLiteStatement)
    {
        androidx.room.InvalidationTracker r0;
        androidx.sqlite.db.SupportSQLiteStatement r1;

        r0 := @this: androidx.room.InvalidationTracker;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteStatement;

        r0.<androidx.room.InvalidationTracker: androidx.sqlite.db.SupportSQLiteStatement cleanupStatement> = r1;

        return;
    }

    public final androidx.arch.core.internal.SafeIterableMap getObserverMap$room_runtime_release()
    {
        androidx.room.InvalidationTracker r0;
        androidx.arch.core.internal.SafeIterableMap $r1;

        r0 := @this: androidx.room.InvalidationTracker;

        $r1 = r0.<androidx.room.InvalidationTracker: androidx.arch.core.internal.SafeIterableMap observerMap>;

        return $r1;
    }

    public transient void <init>(androidx.room.RoomDatabase, java.lang.String[])
    {
        androidx.room.InvalidationTracker r0;
        androidx.room.RoomDatabase r1;
        java.lang.String[] r2, $r6;
        java.util.Map $r3, $r4;
        int $i0;
        java.lang.Object[] $r5;

        r0 := @this: androidx.room.InvalidationTracker;

        r1 := @parameter0: androidx.room.RoomDatabase;

        r2 := @parameter1: java.lang.String[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "database");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "tableNames");

        $r3 = staticinvoke <kotlin.collections.MapsKt: java.util.Map emptyMap()>();

        $r4 = staticinvoke <kotlin.collections.MapsKt: java.util.Map emptyMap()>();

        $i0 = lengthof r2;

        $r5 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r2, $i0);

        $r6 = (java.lang.String[]) $r5;

        specialinvoke r0.<androidx.room.InvalidationTracker: void <init>(androidx.room.RoomDatabase,java.util.Map,java.util.Map,java.lang.String[])>(r1, $r3, $r4, $r6);

        return;
    }

    public final void setAutoCloser$room_runtime_release(androidx.room.AutoCloser)
    {
        androidx.room.InvalidationTracker r0;
        androidx.room.AutoCloser r1;
        java.lang.Runnable $r2;

        r0 := @this: androidx.room.InvalidationTracker;

        r1 := @parameter0: androidx.room.AutoCloser;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "autoCloser");

        r0.<androidx.room.InvalidationTracker: androidx.room.AutoCloser autoCloser> = r1;

        $r2 = dynamicinvoke "run" <java.lang.Runnable (androidx.room.InvalidationTracker)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_VIRTUAL" <androidx.room.InvalidationTracker: void onAutoCloseCallback$room_runtime_release()>, methodtype: void __METHODTYPE__());

        virtualinvoke r1.<androidx.room.AutoCloser: void setAutoCloseCallback(java.lang.Runnable)>($r2);

        return;
    }

    public final void internalInit$room_runtime_release(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.InvalidationTracker r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        java.lang.Object r2;
        boolean $z0;
        androidx.sqlite.db.SupportSQLiteStatement $r3;
        java.lang.Throwable $r4;
        kotlin.Unit $r5;

        r0 := @this: androidx.room.InvalidationTracker;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "database");

        r2 = r0.<androidx.room.InvalidationTracker: java.lang.Object trackerLock>;

        entermonitor r2;

     label1:
        $z0 = r0.<androidx.room.InvalidationTracker: boolean initialized>;

        if $z0 == 0 goto label3;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ROOM", "Invalidation tracker is initialized twice :/.");

     label2:
        exitmonitor r2;

        return;

     label3:
        interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: void execSQL(java.lang.String)>("PRAGMA temp_store = MEMORY;");

        interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: void execSQL(java.lang.String)>("PRAGMA recursive_triggers=\'ON\';");

        interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: void execSQL(java.lang.String)>("CREATE TEMP TABLE room_table_modification_log (table_id INTEGER PRIMARY KEY, invalidated INTEGER NOT NULL DEFAULT 0)");

        virtualinvoke r0.<androidx.room.InvalidationTracker: void syncTriggers$room_runtime_release(androidx.sqlite.db.SupportSQLiteDatabase)>(r1);

        $r3 = interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: androidx.sqlite.db.SupportSQLiteStatement compileStatement(java.lang.String)>("UPDATE room_table_modification_log SET invalidated = 0 WHERE invalidated = 1");

        r0.<androidx.room.InvalidationTracker: androidx.sqlite.db.SupportSQLiteStatement cleanupStatement> = $r3;

        r0.<androidx.room.InvalidationTracker: boolean initialized> = 1;

        $r5 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label4:
        exitmonitor r2;

        goto label7;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor r2;

        throw $r4;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public final void onAutoCloseCallback$room_runtime_release()
    {
        androidx.room.InvalidationTracker r0;
        java.lang.Object r1;
        androidx.room.InvalidationTracker$ObservedTableTracker $r2;
        java.lang.Throwable $r3;
        kotlin.Unit $r4;

        r0 := @this: androidx.room.InvalidationTracker;

        r1 = r0.<androidx.room.InvalidationTracker: java.lang.Object trackerLock>;

        entermonitor r1;

     label1:
        r0.<androidx.room.InvalidationTracker: boolean initialized> = 0;

        $r2 = r0.<androidx.room.InvalidationTracker: androidx.room.InvalidationTracker$ObservedTableTracker observedTableTracker>;

        virtualinvoke $r2.<androidx.room.InvalidationTracker$ObservedTableTracker: void resetTriggerState()>();

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label2:
        exitmonitor r1;

        goto label5;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

        throw $r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public final void startMultiInstanceInvalidation$room_runtime_release(android.content.Context, java.lang.String, android.content.Intent)
    {
        androidx.room.InvalidationTracker r0;
        android.content.Context r1;
        java.lang.String r2;
        android.content.Intent r3;
        androidx.room.MultiInstanceInvalidationClient $r4;
        androidx.room.RoomDatabase $r5;
        java.util.concurrent.Executor $r6;

        r0 := @this: androidx.room.InvalidationTracker;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.content.Intent;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "context");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "name");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "serviceIntent");

        $r4 = new androidx.room.MultiInstanceInvalidationClient;

        $r5 = r0.<androidx.room.InvalidationTracker: androidx.room.RoomDatabase database>;

        $r6 = virtualinvoke $r5.<androidx.room.RoomDatabase: java.util.concurrent.Executor getQueryExecutor()>();

        specialinvoke $r4.<androidx.room.MultiInstanceInvalidationClient: void <init>(android.content.Context,java.lang.String,android.content.Intent,androidx.room.InvalidationTracker,java.util.concurrent.Executor)>(r1, r2, r3, r0, $r6);

        r0.<androidx.room.InvalidationTracker: androidx.room.MultiInstanceInvalidationClient multiInstanceInvalidationClient> = $r4;

        return;
    }

    public final void stopMultiInstanceInvalidation$room_runtime_release()
    {
        androidx.room.InvalidationTracker r0;
        androidx.room.MultiInstanceInvalidationClient $r1;

        r0 := @this: androidx.room.InvalidationTracker;

        $r1 = r0.<androidx.room.InvalidationTracker: androidx.room.MultiInstanceInvalidationClient multiInstanceInvalidationClient>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<androidx.room.MultiInstanceInvalidationClient: void stop()>();

        goto label1;

     label1:
        r0.<androidx.room.InvalidationTracker: androidx.room.MultiInstanceInvalidationClient multiInstanceInvalidationClient> = null;

        return;
    }

    private final void stopTrackingTable(androidx.sqlite.db.SupportSQLiteDatabase, int)
    {
        androidx.room.InvalidationTracker r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        int i0, i1, i2;
        java.lang.String r2, r4, r5, $r12, $r14;
        java.lang.String[] r3, $r8;
        java.lang.StringBuilder r6, $r9;
        androidx.room.InvalidationTracker$Companion $r11;

        r0 := @this: androidx.room.InvalidationTracker;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        i0 := @parameter1: int;

        $r8 = r0.<androidx.room.InvalidationTracker: java.lang.String[] tablesNames>;

        r2 = $r8[i0];

        r3 = <androidx.room.InvalidationTracker: java.lang.String[] TRIGGERS>;

        i2 = 0;

        i1 = lengthof r3;

     label1:
        if i2 >= i1 goto label2;

        r4 = r3[i2];

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        r6 = $r9;

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DROP TRIGGER IF EXISTS ");

        $r11 = <androidx.room.InvalidationTracker: androidx.room.InvalidationTracker$Companion Companion>;

        $r12 = virtualinvoke $r11.<androidx.room.InvalidationTracker$Companion: java.lang.String getTriggerName$room_runtime_release(java.lang.String,java.lang.String)>(r2, r4);

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r14, "StringBuilder().apply(builderAction).toString()");

        r5 = $r14;

        interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: void execSQL(java.lang.String)>(r5);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    private final void startTrackingTable(androidx.sqlite.db.SupportSQLiteDatabase, int)
    {
        androidx.room.InvalidationTracker r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        int i0, i1, i2;
        java.lang.String r2, r4, r5, $r12, $r17, $r36;
        java.lang.String[] r3, $r13;
        java.lang.StringBuilder r6, $r8, $r9, $r10, $r11, $r14, $r25, $r28, $r30, $r32;
        androidx.room.InvalidationTracker$Companion $r16;

        r0 := @this: androidx.room.InvalidationTracker;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        i0 := @parameter1: int;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("INSERT OR IGNORE INTO room_table_modification_log VALUES(");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", 0)");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: void execSQL(java.lang.String)>($r12);

        $r13 = r0.<androidx.room.InvalidationTracker: java.lang.String[] tablesNames>;

        r2 = $r13[i0];

        r3 = <androidx.room.InvalidationTracker: java.lang.String[] TRIGGERS>;

        i2 = 0;

        i1 = lengthof r3;

     label1:
        if i2 >= i1 goto label2;

        r4 = r3[i2];

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        r6 = $r14;

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CREATE TEMP TRIGGER IF NOT EXISTS ");

        $r16 = <androidx.room.InvalidationTracker: androidx.room.InvalidationTracker$Companion Companion>;

        $r17 = virtualinvoke $r16.<androidx.room.InvalidationTracker$Companion: java.lang.String getTriggerName$room_runtime_release(java.lang.String,java.lang.String)>(r2, r4);

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AFTER ");

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ON `");

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("` BEGIN UPDATE ");

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("room_table_modification_log");

        $r25 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SET ");

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalidated");

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = 1");

        $r28 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" WHERE ");

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("table_id");

        $r30 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ");

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r32 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AND ");

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalidated");

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = 0");

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; END");

        $r36 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r36, "StringBuilder().apply(builderAction).toString()");

        r5 = $r36;

        interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: void execSQL(java.lang.String)>(r5);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public void addObserver(androidx.room.InvalidationTracker$Observer)
    {
        androidx.room.InvalidationTracker r0;
        androidx.room.InvalidationTracker$Observer r1;
        java.lang.String[] r2, $r9;
        int[] r3, $r17;
        int i0, $i1, $i2, $i3, i4;
        java.lang.String r5, r6, r7, $r20, $r27;
        java.util.Collection r8, $r12, r31;
        java.util.ArrayList $r10;
        java.util.List $r11;
        androidx.room.InvalidationTracker$ObserverWrapper $r13, $r34;
        androidx.arch.core.internal.SafeIterableMap $r14, r33;
        java.lang.Object $r15, $r21;
        androidx.room.InvalidationTracker$ObservedTableTracker $r16;
        boolean $z1;
        java.util.Locale $r18;
        java.util.Map $r19;
        java.lang.Integer $r22, $r28;
        java.lang.IllegalArgumentException $r23;
        java.lang.StringBuilder $r24, $r25, $r26;
        java.lang.Throwable $r29;

        r0 := @this: androidx.room.InvalidationTracker;

        r1 := @parameter0: androidx.room.InvalidationTracker$Observer;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "observer");

        $r9 = virtualinvoke r1.<androidx.room.InvalidationTracker$Observer: java.lang.String[] getTables$room_runtime_release()>();

        r2 = specialinvoke r0.<androidx.room.InvalidationTracker: java.lang.String[] resolveViews(java.lang.String[])>($r9);

        $r10 = new java.util.ArrayList;

        $i1 = lengthof r2;

        specialinvoke $r10.<java.util.ArrayList: void <init>(int)>($i1);

        r31 = (java.util.Collection) $r10;

        i4 = 0;

        i0 = lengthof r2;

     label01:
        if i4 >= i0 goto label04;

        r5 = r2[i4];

        r6 = r5;

        r8 = r31;

        $r19 = r0.<androidx.room.InvalidationTracker: java.util.Map tableIdLookup>;

        r7 = r6;

        $r18 = <java.util.Locale: java.util.Locale US>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r18, "US");

        $r20 = virtualinvoke r7.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r18);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r20, "this as java.lang.String).toLowerCase(locale)");

        $r21 = interfaceinvoke $r19.<java.util.Map: java.lang.Object get(java.lang.Object)>($r20);

        $r22 = (java.lang.Integer) $r21;

        if $r22 == null goto label02;

        $i3 = virtualinvoke $r22.<java.lang.Integer: int intValue()>();

        goto label03;

     label02:
        $r23 = new java.lang.IllegalArgumentException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("There is no table with name ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r27);

        throw $r23;

     label03:
        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        interfaceinvoke r8.<java.util.Collection: boolean add(java.lang.Object)>($r28);

        i4 = i4 + 1;

        goto label01;

     label04:
        $r11 = (java.util.List) r31;

        $r12 = (java.util.Collection) $r11;

        r3 = staticinvoke <kotlin.collections.CollectionsKt: int[] toIntArray(java.util.Collection)>($r12);

        $r13 = new androidx.room.InvalidationTracker$ObserverWrapper;

        specialinvoke $r13.<androidx.room.InvalidationTracker$ObserverWrapper: void <init>(androidx.room.InvalidationTracker$Observer,int[],java.lang.String[])>(r1, r3, r2);

        r33 = r0.<androidx.room.InvalidationTracker: androidx.arch.core.internal.SafeIterableMap observerMap>;

        entermonitor r33;

     label05:
        $r14 = r0.<androidx.room.InvalidationTracker: androidx.arch.core.internal.SafeIterableMap observerMap>;

        $r15 = virtualinvoke $r14.<androidx.arch.core.internal.SafeIterableMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r1, $r13);

        $r34 = (androidx.room.InvalidationTracker$ObserverWrapper) $r15;

     label06:
        exitmonitor r33;

        goto label09;

     label07:
        $r29 := @caughtexception;

     label08:
        exitmonitor r33;

        throw $r29;

     label09:
        if $r34 != null goto label10;

        $r16 = r0.<androidx.room.InvalidationTracker: androidx.room.InvalidationTracker$ObservedTableTracker observedTableTracker>;

        $i2 = lengthof r3;

        $r17 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>(r3, $i2);

        $z1 = virtualinvoke $r16.<androidx.room.InvalidationTracker$ObservedTableTracker: boolean onAdded(int[])>($r17);

        if $z1 == 0 goto label10;

        virtualinvoke r0.<androidx.room.InvalidationTracker: void syncTriggers$room_runtime_release()>();

     label10:
        return;

        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    private final java.lang.String[] validateAndResolveTableNames(java.lang.String[])
    {
        androidx.room.InvalidationTracker r0;
        java.lang.String[] r1, r2;
        int i0, i1;
        java.lang.String r4, r5, r6, $r9, $r14, $r15;
        java.util.Locale $r7;
        java.util.Map $r8;
        boolean $z2;
        java.lang.StringBuilder $r10, $r11, $r12;
        java.lang.IllegalArgumentException $r13;

        r0 := @this: androidx.room.InvalidationTracker;

        r1 := @parameter0: java.lang.String[];

        r2 = specialinvoke r0.<androidx.room.InvalidationTracker: java.lang.String[] resolveViews(java.lang.String[])>(r1);

        i1 = 0;

        i0 = lengthof r2;

     label1:
        if i1 >= i0 goto label3;

        r4 = r2[i1];

        r5 = r4;

        $r8 = r0.<androidx.room.InvalidationTracker: java.util.Map tableIdLookup>;

        r6 = r5;

        $r7 = <java.util.Locale: java.util.Locale US>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r7, "US");

        $r9 = virtualinvoke r6.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r7);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r9, "this as java.lang.String).toLowerCase(locale)");

        $z2 = interfaceinvoke $r8.<java.util.Map: boolean containsKey(java.lang.Object)>($r9);

        if $z2 != 0 goto label2;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("There is no table with name ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = new java.lang.IllegalArgumentException;

        $r14 = virtualinvoke $r15.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r13;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return r2;
    }

    private final java.lang.String[] resolveViews(java.lang.String[])
    {
        androidx.room.InvalidationTracker r0;
        java.lang.String[] r1, $r6, $r8;
        int i0, i1;
        java.lang.String r3, r4, $r11, $r14, r19, r20;
        java.util.Set $r5, $r17;
        java.lang.Object[] $r7;
        java.util.Locale $r9, $r12;
        java.util.Map $r10, $r13;
        boolean $z2;
        java.lang.Object $r15;
        java.util.Collection $r16, $r21;

        r0 := @this: androidx.room.InvalidationTracker;

        r1 := @parameter0: java.lang.String[];

        $r17 = staticinvoke <kotlin.collections.SetsKt: java.util.Set createSetBuilder()>();

        i1 = 0;

        i0 = lengthof r1;

     label1:
        if i1 >= i0 goto label4;

        r3 = r1[i1];

        r4 = r3;

        $r10 = r0.<androidx.room.InvalidationTracker: java.util.Map viewTables>;

        r19 = r4;

        $r9 = <java.util.Locale: java.util.Locale US>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r9, "US");

        $r11 = virtualinvoke r19.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r9);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r11, "this as java.lang.String).toLowerCase(locale)");

        $z2 = interfaceinvoke $r10.<java.util.Map: boolean containsKey(java.lang.Object)>($r11);

        if $z2 == 0 goto label2;

        $r13 = r0.<androidx.room.InvalidationTracker: java.util.Map viewTables>;

        r20 = r4;

        $r12 = <java.util.Locale: java.util.Locale US>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r12, "US");

        $r14 = virtualinvoke r20.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r12);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r14, "this as java.lang.String).toLowerCase(locale)");

        $r15 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>($r14);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r15);

        $r16 = (java.util.Collection) $r15;

        interfaceinvoke $r17.<java.util.Set: boolean addAll(java.util.Collection)>($r16);

        goto label3;

     label2:
        interfaceinvoke $r17.<java.util.Set: boolean add(java.lang.Object)>(r4);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        $r5 = staticinvoke <kotlin.collections.SetsKt: java.util.Set build(java.util.Set)>($r17);

        $r21 = (java.util.Collection) $r5;

        $r6 = newarray (java.lang.String)[0];

        $r7 = interfaceinvoke $r21.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r7, "null cannot be cast to non-null type kotlin.Array<T of kotlin.collections.ArraysKt__ArraysJVMKt.toTypedArray>");

        $r8 = (java.lang.String[]) $r7;

        return $r8;
    }

    public void addWeakObserver(androidx.room.InvalidationTracker$Observer)
    {
        androidx.room.InvalidationTracker r0;
        androidx.room.InvalidationTracker$Observer r1, $r3;
        androidx.room.InvalidationTracker$WeakObserver $r2;

        r0 := @this: androidx.room.InvalidationTracker;

        r1 := @parameter0: androidx.room.InvalidationTracker$Observer;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "observer");

        $r2 = new androidx.room.InvalidationTracker$WeakObserver;

        specialinvoke $r2.<androidx.room.InvalidationTracker$WeakObserver: void <init>(androidx.room.InvalidationTracker,androidx.room.InvalidationTracker$Observer)>(r0, r1);

        $r3 = (androidx.room.InvalidationTracker$Observer) $r2;

        virtualinvoke r0.<androidx.room.InvalidationTracker: void addObserver(androidx.room.InvalidationTracker$Observer)>($r3);

        return;
    }

    public void removeObserver(androidx.room.InvalidationTracker$Observer)
    {
        androidx.room.InvalidationTracker r0;
        androidx.room.InvalidationTracker$Observer r1;
        androidx.room.InvalidationTracker$ObserverWrapper r2, $r10;
        int[] r3, $r8;
        androidx.arch.core.internal.SafeIterableMap r4, $r5;
        java.lang.Object $r6;
        androidx.room.InvalidationTracker$ObservedTableTracker $r7;
        int $i0;
        boolean $z0;
        java.lang.Throwable $r9;

        r0 := @this: androidx.room.InvalidationTracker;

        r1 := @parameter0: androidx.room.InvalidationTracker$Observer;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "observer");

        r4 = r0.<androidx.room.InvalidationTracker: androidx.arch.core.internal.SafeIterableMap observerMap>;

        entermonitor r4;

     label1:
        $r5 = r0.<androidx.room.InvalidationTracker: androidx.arch.core.internal.SafeIterableMap observerMap>;

        $r6 = virtualinvoke $r5.<androidx.arch.core.internal.SafeIterableMap: java.lang.Object remove(java.lang.Object)>(r1);

        $r10 = (androidx.room.InvalidationTracker$ObserverWrapper) $r6;

     label2:
        exitmonitor r4;

        goto label5;

     label3:
        $r9 := @caughtexception;

     label4:
        exitmonitor r4;

        throw $r9;

     label5:
        r2 = $r10;

        if r2 == null goto label6;

        $r7 = r0.<androidx.room.InvalidationTracker: androidx.room.InvalidationTracker$ObservedTableTracker observedTableTracker>;

        r3 = virtualinvoke r2.<androidx.room.InvalidationTracker$ObserverWrapper: int[] getTableIds$room_runtime_release()>();

        $i0 = lengthof r3;

        $r8 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>(r3, $i0);

        $z0 = virtualinvoke $r7.<androidx.room.InvalidationTracker$ObservedTableTracker: boolean onRemoved(int[])>($r8);

        if $z0 == 0 goto label6;

        virtualinvoke r0.<androidx.room.InvalidationTracker: void syncTriggers$room_runtime_release()>();

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public final boolean ensureInitialization$room_runtime_release()
    {
        androidx.room.InvalidationTracker r0;
        androidx.room.RoomDatabase $r1, $r2;
        boolean $z0, $z1, $z2;
        androidx.sqlite.db.SupportSQLiteOpenHelper $r3;

        r0 := @this: androidx.room.InvalidationTracker;

        $r1 = r0.<androidx.room.InvalidationTracker: androidx.room.RoomDatabase database>;

        $z0 = virtualinvoke $r1.<androidx.room.RoomDatabase: boolean isOpen()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $z1 = r0.<androidx.room.InvalidationTracker: boolean initialized>;

        if $z1 != 0 goto label2;

        $r2 = r0.<androidx.room.InvalidationTracker: androidx.room.RoomDatabase database>;

        $r3 = virtualinvoke $r2.<androidx.room.RoomDatabase: androidx.sqlite.db.SupportSQLiteOpenHelper getOpenHelper()>();

        interfaceinvoke $r3.<androidx.sqlite.db.SupportSQLiteOpenHelper: androidx.sqlite.db.SupportSQLiteDatabase getWritableDatabase()>();

     label2:
        $z2 = r0.<androidx.room.InvalidationTracker: boolean initialized>;

        if $z2 != 0 goto label3;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ROOM", "database is not initialized even though it is open");

        return 0;

     label3:
        return 1;
    }

    public static void getRefreshRunnable$annotations()
    {
        return;
    }

    public void refreshVersionsAsync()
    {
        androidx.room.InvalidationTracker r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;
        androidx.room.AutoCloser $r2;
        androidx.room.RoomDatabase $r3;
        java.util.concurrent.Executor $r4;
        java.lang.Runnable $r5;

        r0 := @this: androidx.room.InvalidationTracker;

        $r1 = r0.<androidx.room.InvalidationTracker: java.util.concurrent.atomic.AtomicBoolean pendingRefresh>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);

        if $z0 == 0 goto label2;

        $r2 = r0.<androidx.room.InvalidationTracker: androidx.room.AutoCloser autoCloser>;

        if $r2 == null goto label1;

        virtualinvoke $r2.<androidx.room.AutoCloser: androidx.sqlite.db.SupportSQLiteDatabase incrementCountAndEnsureDbIsOpen()>();

        goto label1;

     label1:
        $r3 = r0.<androidx.room.InvalidationTracker: androidx.room.RoomDatabase database>;

        $r4 = virtualinvoke $r3.<androidx.room.RoomDatabase: java.util.concurrent.Executor getQueryExecutor()>();

        $r5 = r0.<androidx.room.InvalidationTracker: java.lang.Runnable refreshRunnable>;

        interfaceinvoke $r4.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r5);

     label2:
        return;
    }

    public void refreshVersionsSync()
    {
        androidx.room.InvalidationTracker r0;
        androidx.room.AutoCloser $r1;
        java.lang.Runnable $r2;

        r0 := @this: androidx.room.InvalidationTracker;

        $r1 = r0.<androidx.room.InvalidationTracker: androidx.room.AutoCloser autoCloser>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<androidx.room.AutoCloser: androidx.sqlite.db.SupportSQLiteDatabase incrementCountAndEnsureDbIsOpen()>();

        goto label1;

     label1:
        virtualinvoke r0.<androidx.room.InvalidationTracker: void syncTriggers$room_runtime_release()>();

        $r2 = r0.<androidx.room.InvalidationTracker: java.lang.Runnable refreshRunnable>;

        interfaceinvoke $r2.<java.lang.Runnable: void run()>();

        return;
    }

    public final transient void notifyObserversByTableNames(java.lang.String[])
    {
        androidx.room.InvalidationTracker r0;
        java.lang.String[] r1;
        androidx.arch.core.internal.SafeIterableMap r2, $r9;
        java.lang.Iterable $r3;
        java.util.Iterator r4;
        java.lang.Object r5, $r10, $r11;
        java.util.Map$Entry r6;
        androidx.room.InvalidationTracker$Observer r7;
        androidx.room.InvalidationTracker$ObserverWrapper r8;
        boolean $z2, $z3;
        java.lang.Throwable $r12;
        kotlin.Unit $r13;

        r0 := @this: androidx.room.InvalidationTracker;

        r1 := @parameter0: java.lang.String[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "tables");

        r2 = r0.<androidx.room.InvalidationTracker: androidx.arch.core.internal.SafeIterableMap observerMap>;

        entermonitor r2;

     label1:
        $r9 = r0.<androidx.room.InvalidationTracker: androidx.arch.core.internal.SafeIterableMap observerMap>;

        $r3 = (java.lang.Iterable) $r9;

        r4 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) r5;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r6, "(observer, wrapper)");

        $r10 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        r7 = (androidx.room.InvalidationTracker$Observer) $r10;

        $r11 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        r8 = (androidx.room.InvalidationTracker$ObserverWrapper) $r11;

        $z3 = virtualinvoke r7.<androidx.room.InvalidationTracker$Observer: boolean isRemote$room_runtime_release()>();

        if $z3 != 0 goto label3;

        virtualinvoke r8.<androidx.room.InvalidationTracker$ObserverWrapper: void notifyByTableNames$room_runtime_release(java.lang.String[])>(r1);

     label3:
        goto label2;

     label4:
        $r13 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label5:
        exitmonitor r2;

        goto label8;

     label6:
        $r12 := @caughtexception;

     label7:
        exitmonitor r2;

        throw $r12;

     label8:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public final void syncTriggers$room_runtime_release(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.InvalidationTracker r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        java.lang.Throwable r2, $r9, $r10, $r11, $r12, $r13, $r14, $r15, r21, r22;
        java.lang.Object r3;
        int[] r4, $r7;
        int i0, i1, i2, i3, $i4, i7, i8;
        boolean $z2;
        androidx.room.RoomDatabase $r5;
        androidx.room.InvalidationTracker$ObservedTableTracker $r6;
        androidx.room.InvalidationTracker$Companion $r8;
        java.util.concurrent.locks.Lock r16;
        kotlin.Unit $r19;

        r0 := @this: androidx.room.InvalidationTracker;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "database");

        $z2 = interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: boolean inTransaction()>();

        if $z2 == 0 goto label01;

        return;

     label01:
        $r5 = r0.<androidx.room.InvalidationTracker: androidx.room.RoomDatabase database>;

        r16 = virtualinvoke $r5.<androidx.room.RoomDatabase: java.util.concurrent.locks.Lock getCloseLock$room_runtime_release()>();

        interfaceinvoke r16.<java.util.concurrent.locks.Lock: void lock()>();

     label02:
        r3 = r0.<androidx.room.InvalidationTracker: java.lang.Object syncTriggersLock>;

        entermonitor r3;

     label03:
        $r6 = r0.<androidx.room.InvalidationTracker: androidx.room.InvalidationTracker$ObservedTableTracker observedTableTracker>;

        $r7 = virtualinvoke $r6.<androidx.room.InvalidationTracker$ObservedTableTracker: int[] getTablesToSync()>();

        if $r7 != null goto label06;

     label04:
        exitmonitor r3;

     label05:
        interfaceinvoke r16.<java.util.concurrent.locks.Lock: void unlock()>();

        return;

     label06:
        r4 = $r7;

        $r8 = <androidx.room.InvalidationTracker: androidx.room.InvalidationTracker$Companion Companion>;

        virtualinvoke $r8.<androidx.room.InvalidationTracker$Companion: void beginTransactionInternal$room_runtime_release(androidx.sqlite.db.SupportSQLiteDatabase)>(r1);

     label07:
        i7 = 0;

        i8 = 0;

        i0 = lengthof r4;

     label08:
        if i8 >= i0 goto label12;

        i1 = r4[i8];

        $i4 = i7;

        i7 = i7 + 1;

        i2 = i1;

        i3 = $i4;

        tableswitch(i2)
        {
            case 1: goto label09;
            case 2: goto label10;
            default: goto label11;
        };

     label09:
        specialinvoke r0.<androidx.room.InvalidationTracker: void startTrackingTable(androidx.sqlite.db.SupportSQLiteDatabase,int)>(r1, i3);

        goto label11;

     label10:
        specialinvoke r0.<androidx.room.InvalidationTracker: void stopTrackingTable(androidx.sqlite.db.SupportSQLiteDatabase,int)>(r1, i3);

     label11:
        i8 = i8 + 1;

        goto label08;

     label12:
        interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: void setTransactionSuccessful()>();

     label13:
        interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: void endTransaction()>();

        goto label16;

     label14:
        $r12 := @caughtexception;

     label15:
        interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: void endTransaction()>();

        throw $r12;

     label16:
        $r19 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label17:
        exitmonitor r3;

        goto label20;

     label18:
        $r11 := @caughtexception;

     label19:
        exitmonitor r3;

        throw $r11;

     label20:
        interfaceinvoke r16.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label25;

     label21:
        $r13 := @caughtexception;

        r2 = $r13;

     label22:
        interfaceinvoke r16.<java.util.concurrent.locks.Lock: void unlock()>();

        throw r2;

     label23:
        $r9 := @caughtexception;

        r21 = $r9;

        $r10 = (java.lang.Throwable) r21;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ROOM", "Cannot run invalidation tracker. Is the db closed?", $r10);

        goto label25;

     label24:
        $r14 := @caughtexception;

        r22 = $r14;

        $r15 = (java.lang.Throwable) r22;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ROOM", "Cannot run invalidation tracker. Is the db closed?", $r15);

     label25:
        return;

        catch java.lang.Throwable from label07 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
        catch java.lang.Throwable from label03 to label04 with label18;
        catch java.lang.Throwable from label06 to label17 with label18;
        catch java.lang.Throwable from label18 to label19 with label18;
        catch java.lang.Throwable from label02 to label05 with label21;
        catch java.lang.Throwable from label06 to label20 with label21;
        catch java.lang.Throwable from label21 to label22 with label21;
        catch java.lang.IllegalStateException from label01 to label23 with label23;
        catch android.database.sqlite.SQLiteException from label01 to label23 with label24;
    }

    public final void syncTriggers$room_runtime_release()
    {
        androidx.room.InvalidationTracker r0;
        androidx.room.RoomDatabase $r1, $r2;
        boolean $z0;
        androidx.sqlite.db.SupportSQLiteOpenHelper $r3;
        androidx.sqlite.db.SupportSQLiteDatabase $r4;

        r0 := @this: androidx.room.InvalidationTracker;

        $r1 = r0.<androidx.room.InvalidationTracker: androidx.room.RoomDatabase database>;

        $z0 = virtualinvoke $r1.<androidx.room.RoomDatabase: boolean isOpen()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = r0.<androidx.room.InvalidationTracker: androidx.room.RoomDatabase database>;

        $r3 = virtualinvoke $r2.<androidx.room.RoomDatabase: androidx.sqlite.db.SupportSQLiteOpenHelper getOpenHelper()>();

        $r4 = interfaceinvoke $r3.<androidx.sqlite.db.SupportSQLiteOpenHelper: androidx.sqlite.db.SupportSQLiteDatabase getWritableDatabase()>();

        virtualinvoke r0.<androidx.room.InvalidationTracker: void syncTriggers$room_runtime_release(androidx.sqlite.db.SupportSQLiteDatabase)>($r4);

        return;
    }

    public androidx.lifecycle.LiveData createLiveData(java.lang.String[], java.util.concurrent.Callable)
    {
        androidx.room.InvalidationTracker r0;
        java.lang.String[] r1;
        java.util.concurrent.Callable r2;
        androidx.lifecycle.LiveData $r3;

        r0 := @this: androidx.room.InvalidationTracker;

        r1 := @parameter0: java.lang.String[];

        r2 := @parameter1: java.util.concurrent.Callable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "tableNames");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "computeFunction");

        $r3 = virtualinvoke r0.<androidx.room.InvalidationTracker: androidx.lifecycle.LiveData createLiveData(java.lang.String[],boolean,java.util.concurrent.Callable)>(r1, 0, r2);

        return $r3;
    }

    public androidx.lifecycle.LiveData createLiveData(java.lang.String[], boolean, java.util.concurrent.Callable)
    {
        androidx.room.InvalidationTracker r0;
        java.lang.String[] r1, $r4;
        boolean z0;
        java.util.concurrent.Callable r2;
        androidx.room.InvalidationLiveDataContainer $r3;
        androidx.lifecycle.LiveData $r5;

        r0 := @this: androidx.room.InvalidationTracker;

        r1 := @parameter0: java.lang.String[];

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.util.concurrent.Callable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "tableNames");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "computeFunction");

        $r3 = r0.<androidx.room.InvalidationTracker: androidx.room.InvalidationLiveDataContainer invalidationLiveDataContainer>;

        $r4 = specialinvoke r0.<androidx.room.InvalidationTracker: java.lang.String[] validateAndResolveTableNames(java.lang.String[])>(r1);

        $r5 = virtualinvoke $r3.<androidx.room.InvalidationLiveDataContainer: androidx.lifecycle.LiveData create(java.lang.String[],boolean,java.util.concurrent.Callable)>($r4, z0, r2);

        return $r5;
    }

    public static final androidx.room.AutoCloser access$getAutoCloser$p(androidx.room.InvalidationTracker)
    {
        androidx.room.InvalidationTracker $r0;
        androidx.room.AutoCloser $r1;

        $r0 := @parameter0: androidx.room.InvalidationTracker;

        $r1 = $r0.<androidx.room.InvalidationTracker: androidx.room.AutoCloser autoCloser>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.String[] r0;
        androidx.room.InvalidationTracker$Companion $r1;

        $r1 = new androidx.room.InvalidationTracker$Companion;

        specialinvoke $r1.<androidx.room.InvalidationTracker$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.room.InvalidationTracker: androidx.room.InvalidationTracker$Companion Companion> = $r1;

        r0 = newarray (java.lang.String)[3];

        r0[0] = "UPDATE";

        r0[1] = "DELETE";

        r0[2] = "INSERT";

        <androidx.room.InvalidationTracker: java.lang.String[] TRIGGERS> = r0;

        return;
    }

androidx.room.InvalidationTracker$Companion
    private void <init>()
    {
        androidx.room.InvalidationTracker$Companion r0;

        r0 := @this: androidx.room.InvalidationTracker$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void getRESET_UPDATED_TABLES_SQL$room_runtime_release$annotations()
    {
        return;
    }

    public static void getSELECT_UPDATED_TABLES_SQL$room_runtime_release$annotations()
    {
        return;
    }

    public final java.lang.String getTriggerName$room_runtime_release(java.lang.String, java.lang.String)
    {
        androidx.room.InvalidationTracker$Companion r0;
        java.lang.String r1, r2, $r9;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8;

        r0 := @this: androidx.room.InvalidationTracker$Companion;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "tableName");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "triggerType");

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("`room_table_modification_trigger_");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(95);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(96);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public final void beginTransactionInternal$room_runtime_release(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.InvalidationTracker$Companion r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        int $i0;
        boolean $z0;

        r0 := @this: androidx.room.InvalidationTracker$Companion;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "database");

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 16 goto label1;

        $z0 = interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: boolean isWriteAheadLoggingEnabled()>();

        if $z0 == 0 goto label1;

        interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: void beginTransactionNonExclusive()>();

        goto label2;

     label1:
        interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: void beginTransaction()>();

     label2:
        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.room.InvalidationTracker$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.room.InvalidationTracker$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.room.InvalidationTracker$Companion: void <init>()>();

        return;
    }

androidx.room.InvalidationTracker$ObservedTableTracker$Companion
    private void <init>()
    {
        androidx.room.InvalidationTracker$ObservedTableTracker$Companion r0;

        r0 := @this: androidx.room.InvalidationTracker$ObservedTableTracker$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.room.InvalidationTracker$ObservedTableTracker$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.room.InvalidationTracker$ObservedTableTracker$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.room.InvalidationTracker$ObservedTableTracker$Companion: void <init>()>();

        return;
    }

androidx.room.InvalidationTracker$ObservedTableTracker
<androidx.room.InvalidationTracker$ObservedTableTracker: androidx.room.InvalidationTracker$ObservedTableTracker$Companion Companion>
<androidx.room.InvalidationTracker$ObservedTableTracker: long[] tableObservers>
<androidx.room.InvalidationTracker$ObservedTableTracker: boolean[] triggerStates>
<androidx.room.InvalidationTracker$ObservedTableTracker: int[] triggerStateChanges>
<androidx.room.InvalidationTracker$ObservedTableTracker: boolean needsSync>
<androidx.room.InvalidationTracker$ObservedTableTracker: int NO_OP>
<androidx.room.InvalidationTracker$ObservedTableTracker: int ADD>
<androidx.room.InvalidationTracker$ObservedTableTracker: int REMOVE>
    public void <init>(int)
    {
        androidx.room.InvalidationTracker$ObservedTableTracker r0;
        int i0;
        long[] $r1;
        boolean[] $r2;
        int[] $r3;

        r0 := @this: androidx.room.InvalidationTracker$ObservedTableTracker;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (long)[i0];

        r0.<androidx.room.InvalidationTracker$ObservedTableTracker: long[] tableObservers> = $r1;

        $r2 = newarray (boolean)[i0];

        r0.<androidx.room.InvalidationTracker$ObservedTableTracker: boolean[] triggerStates> = $r2;

        $r3 = newarray (int)[i0];

        r0.<androidx.room.InvalidationTracker$ObservedTableTracker: int[] triggerStateChanges> = $r3;

        return;
    }

    public final long[] getTableObservers()
    {
        androidx.room.InvalidationTracker$ObservedTableTracker r0;
        long[] $r1;

        r0 := @this: androidx.room.InvalidationTracker$ObservedTableTracker;

        $r1 = r0.<androidx.room.InvalidationTracker$ObservedTableTracker: long[] tableObservers>;

        return $r1;
    }

    public final boolean getNeedsSync()
    {
        androidx.room.InvalidationTracker$ObservedTableTracker r0;
        boolean $z0;

        r0 := @this: androidx.room.InvalidationTracker$ObservedTableTracker;

        $z0 = r0.<androidx.room.InvalidationTracker$ObservedTableTracker: boolean needsSync>;

        return $z0;
    }

    public final void setNeedsSync(boolean)
    {
        androidx.room.InvalidationTracker$ObservedTableTracker r0;
        boolean z0;

        r0 := @this: androidx.room.InvalidationTracker$ObservedTableTracker;

        z0 := @parameter0: boolean;

        r0.<androidx.room.InvalidationTracker$ObservedTableTracker: boolean needsSync> = z0;

        return;
    }

    public final transient boolean onAdded(int[])
    {
        androidx.room.InvalidationTracker$ObservedTableTracker r0, r2;
        int[] r1;
        int i0, i1, i2, i6;
        long l3, $l4;
        long[] $r4, $r5;
        byte $b5;
        boolean z2;
        kotlin.Unit $r6;

        r0 := @this: androidx.room.InvalidationTracker$ObservedTableTracker;

        r1 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "tableIds");

        z2 = 0;

        r2 = r0;

        entermonitor r2;

        i6 = 0;

        i0 = lengthof r1;

     label1:
        if i6 >= i0 goto label3;

        i1 = r1[i6];

        i2 = i1;

        $r4 = r0.<androidx.room.InvalidationTracker$ObservedTableTracker: long[] tableObservers>;

        l3 = $r4[i2];

        $r5 = r0.<androidx.room.InvalidationTracker$ObservedTableTracker: long[] tableObservers>;

        $l4 = l3 + 1L;

        $r5[i2] = $l4;

        $b5 = l3 cmp 0L;

        if $b5 != 0 goto label2;

        r0.<androidx.room.InvalidationTracker$ObservedTableTracker: boolean needsSync> = 1;

        z2 = 1;

     label2:
        i6 = i6 + 1;

        goto label1;

     label3:
        $r6 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        exitmonitor r2;

        goto label4;

     label4:
        return z2;
    }

    public final transient boolean onRemoved(int[])
    {
        androidx.room.InvalidationTracker$ObservedTableTracker r0, r2;
        int[] r1;
        int i0, i1, i2, i6;
        long l3, $l4;
        long[] $r4, $r5;
        byte $b5;
        boolean z2;
        kotlin.Unit $r6;

        r0 := @this: androidx.room.InvalidationTracker$ObservedTableTracker;

        r1 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "tableIds");

        z2 = 0;

        r2 = r0;

        entermonitor r2;

        i6 = 0;

        i0 = lengthof r1;

     label1:
        if i6 >= i0 goto label3;

        i1 = r1[i6];

        i2 = i1;

        $r4 = r0.<androidx.room.InvalidationTracker$ObservedTableTracker: long[] tableObservers>;

        l3 = $r4[i2];

        $r5 = r0.<androidx.room.InvalidationTracker$ObservedTableTracker: long[] tableObservers>;

        $l4 = l3 - 1L;

        $r5[i2] = $l4;

        $b5 = l3 cmp 1L;

        if $b5 != 0 goto label2;

        r0.<androidx.room.InvalidationTracker$ObservedTableTracker: boolean needsSync> = 1;

        z2 = 1;

     label2:
        i6 = i6 + 1;

        goto label1;

     label3:
        $r6 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        exitmonitor r2;

        goto label4;

     label4:
        return z2;
    }

    public final void resetTriggerState()
    {
        androidx.room.InvalidationTracker$ObservedTableTracker r0, r1;
        boolean[] $r2;
        java.lang.Throwable $r3;
        kotlin.Unit $r4;

        r0 := @this: androidx.room.InvalidationTracker$ObservedTableTracker;

        r1 = r0;

        entermonitor r1;

     label1:
        $r2 = r0.<androidx.room.InvalidationTracker$ObservedTableTracker: boolean[] triggerStates>;

        staticinvoke <java.util.Arrays: void fill(boolean[],boolean)>($r2, 0);

        r0.<androidx.room.InvalidationTracker$ObservedTableTracker: boolean needsSync> = 1;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label2:
        exitmonitor r1;

        goto label5;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

        throw $r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public final int[] getTablesToSync()
    {
        androidx.room.InvalidationTracker$ObservedTableTracker r0, r1;
        long[] $r2;
        int i0, i3, $i4, i7, i8;
        long l1, l2;
        boolean z0, $z1, $z2, $z3;
        int[] r3, $r4, $r7, $r9;
        java.lang.Object $r5;
        byte $b5, $b9;
        boolean[] $r6, $r8;
        java.lang.Throwable $r10;

        r0 := @this: androidx.room.InvalidationTracker$ObservedTableTracker;

        r1 = r0;

        entermonitor r1;

     label01:
        $z1 = r0.<androidx.room.InvalidationTracker$ObservedTableTracker: boolean needsSync>;

        if $z1 != 0 goto label03;

     label02:
        exitmonitor r1;

        return null;

     label03:
        $r2 = r0.<androidx.room.InvalidationTracker$ObservedTableTracker: long[] tableObservers>;

        i7 = 0;

        i8 = 0;

        i0 = lengthof $r2;

     label04:
        if i8 >= i0 goto label11;

        l1 = $r2[i8];

        $i4 = i7;

        i7 = i7 + 1;

        l2 = l1;

        i3 = $i4;

        $b5 = l2 cmp 0L;

        if $b5 <= 0 goto label05;

        $z3 = 1;

        goto label06;

     label05:
        $z3 = 0;

     label06:
        z0 = $z3;

        $r6 = r0.<androidx.room.InvalidationTracker$ObservedTableTracker: boolean[] triggerStates>;

        $z2 = $r6[i3];

        if z0 == $z2 goto label09;

        $r9 = r0.<androidx.room.InvalidationTracker$ObservedTableTracker: int[] triggerStateChanges>;

        if z0 == 0 goto label07;

        $b9 = 1;

        goto label08;

     label07:
        $b9 = 2;

     label08:
        $r9[i3] = $b9;

        goto label10;

     label09:
        $r7 = r0.<androidx.room.InvalidationTracker$ObservedTableTracker: int[] triggerStateChanges>;

        $r7[i3] = 0;

     label10:
        $r8 = r0.<androidx.room.InvalidationTracker$ObservedTableTracker: boolean[] triggerStates>;

        $r8[i3] = z0;

        i8 = i8 + 1;

        goto label04;

     label11:
        r0.<androidx.room.InvalidationTracker$ObservedTableTracker: boolean needsSync> = 0;

        $r4 = r0.<androidx.room.InvalidationTracker$ObservedTableTracker: int[] triggerStateChanges>;

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Object clone()>();

        r3 = (int[]) $r5;

     label12:
        exitmonitor r1;

        return r3;

     label13:
        $r10 := @caughtexception;

     label14:
        exitmonitor r1;

        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    static void <clinit>()
    {
        androidx.room.InvalidationTracker$ObservedTableTracker$Companion $r0;

        $r0 = new androidx.room.InvalidationTracker$ObservedTableTracker$Companion;

        specialinvoke $r0.<androidx.room.InvalidationTracker$ObservedTableTracker$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.room.InvalidationTracker$ObservedTableTracker: androidx.room.InvalidationTracker$ObservedTableTracker$Companion Companion> = $r0;

        return;
    }

androidx.room.InvalidationTracker$Observer
<androidx.room.InvalidationTracker$Observer: java.lang.String[] tables>
    public void <init>(java.lang.String[])
    {
        androidx.room.InvalidationTracker$Observer r0;
        java.lang.String[] r1;

        r0 := @this: androidx.room.InvalidationTracker$Observer;

        r1 := @parameter0: java.lang.String[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "tables");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.room.InvalidationTracker$Observer: java.lang.String[] tables> = r1;

        return;
    }

    public final java.lang.String[] getTables$room_runtime_release()
    {
        androidx.room.InvalidationTracker$Observer r0;
        java.lang.String[] $r1;

        r0 := @this: androidx.room.InvalidationTracker$Observer;

        $r1 = r0.<androidx.room.InvalidationTracker$Observer: java.lang.String[] tables>;

        return $r1;
    }

    protected transient void <init>(java.lang.String, java.lang.String[])
    {
        androidx.room.InvalidationTracker$Observer r0, r3;
        java.lang.String r1;
        java.lang.String[] r2, $r6, $r8;
        java.util.Collection $r4, $r11;
        java.util.List $r5, $r9;
        java.lang.Object[] $r7;

        r0 := @this: androidx.room.InvalidationTracker$Observer;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "firstTable");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "rest");

        $r9 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List createListBuilder()>();

        r3 = r0;

        $r4 = (java.util.Collection) $r9;

        staticinvoke <kotlin.collections.CollectionsKt: boolean addAll(java.util.Collection,java.lang.Object[])>($r4, r2);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r5 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List build(java.util.List)>($r9);

        $r11 = (java.util.Collection) $r5;

        $r6 = newarray (java.lang.String)[0];

        $r7 = interfaceinvoke $r11.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r7, "null cannot be cast to non-null type kotlin.Array<T of kotlin.collections.ArraysKt__ArraysJVMKt.toTypedArray>");

        $r8 = (java.lang.String[]) $r7;

        specialinvoke r3.<androidx.room.InvalidationTracker$Observer: void <init>(java.lang.String[])>($r8);

        return;
    }

<androidx.room.InvalidationTracker$Observer: void onInvalidated(java.util.Set)>
    public boolean isRemote$room_runtime_release()
    {
        androidx.room.InvalidationTracker$Observer r0;

        r0 := @this: androidx.room.InvalidationTracker$Observer;

        return 0;
    }

androidx.room.InvalidationTracker$ObserverWrapper
<androidx.room.InvalidationTracker$ObserverWrapper: androidx.room.InvalidationTracker$Observer observer>
<androidx.room.InvalidationTracker$ObserverWrapper: int[] tableIds>
<androidx.room.InvalidationTracker$ObserverWrapper: java.lang.String[] tableNames>
<androidx.room.InvalidationTracker$ObserverWrapper: java.util.Set singleTableSet>
    public void <init>(androidx.room.InvalidationTracker$Observer, int[], java.lang.String[])
    {
        androidx.room.InvalidationTracker$ObserverWrapper r0;
        androidx.room.InvalidationTracker$Observer r1;
        int[] r2, $r6;
        java.lang.String[] r3, $r5, $r7, $r10;
        java.lang.String r4, $r9, $r11;
        int $i0, $i1, $i2;
        java.lang.IllegalStateException $r8;
        boolean $z0, $z1, $z2;
        java.util.Set $r13;

        r0 := @this: androidx.room.InvalidationTracker$ObserverWrapper;

        r1 := @parameter0: androidx.room.InvalidationTracker$Observer;

        r2 := @parameter1: int[];

        r3 := @parameter2: java.lang.String[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "observer");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "tableIds");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "tableNames");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.room.InvalidationTracker$ObserverWrapper: androidx.room.InvalidationTracker$Observer observer> = r1;

        r0.<androidx.room.InvalidationTracker$ObserverWrapper: int[] tableIds> = r2;

        r0.<androidx.room.InvalidationTracker$ObserverWrapper: java.lang.String[] tableNames> = r3;

        $r5 = r0.<androidx.room.InvalidationTracker$ObserverWrapper: java.lang.String[] tableNames>;

        $i0 = lengthof $r5;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        if $z1 == 0 goto label5;

        $r10 = r0.<androidx.room.InvalidationTracker$ObserverWrapper: java.lang.String[] tableNames>;

        $r11 = $r10[0];

        $r13 = staticinvoke <kotlin.collections.SetsKt: java.util.Set setOf(java.lang.Object)>($r11);

        goto label6;

     label5:
        $r13 = staticinvoke <kotlin.collections.SetsKt: java.util.Set emptySet()>();

     label6:
        r0.<androidx.room.InvalidationTracker$ObserverWrapper: java.util.Set singleTableSet> = $r13;

        $r6 = r0.<androidx.room.InvalidationTracker$ObserverWrapper: int[] tableIds>;

        $i2 = lengthof $r6;

        $r7 = r0.<androidx.room.InvalidationTracker$ObserverWrapper: java.lang.String[] tableNames>;

        $i1 = lengthof $r7;

        if $i2 != $i1 goto label7;

        $z2 = 1;

        goto label8;

     label7:
        $z2 = 0;

     label8:
        if $z2 != 0 goto label9;

        r4 = "Check failed.";

        $r8 = new java.lang.IllegalStateException;

        $r9 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label9:
        return;
    }

    public final androidx.room.InvalidationTracker$Observer getObserver$room_runtime_release()
    {
        androidx.room.InvalidationTracker$ObserverWrapper r0;
        androidx.room.InvalidationTracker$Observer $r1;

        r0 := @this: androidx.room.InvalidationTracker$ObserverWrapper;

        $r1 = r0.<androidx.room.InvalidationTracker$ObserverWrapper: androidx.room.InvalidationTracker$Observer observer>;

        return $r1;
    }

    public final int[] getTableIds$room_runtime_release()
    {
        androidx.room.InvalidationTracker$ObserverWrapper r0;
        int[] $r1;

        r0 := @this: androidx.room.InvalidationTracker$ObserverWrapper;

        $r1 = r0.<androidx.room.InvalidationTracker$ObserverWrapper: int[] tableIds>;

        return $r1;
    }

    public final void notifyByTableInvalidStatus$room_runtime_release(java.util.Set)
    {
        androidx.room.InvalidationTracker$ObserverWrapper r0;
        java.util.Set r1, r2, r3, $r13;
        int[] $r5, $r6, $r7;
        int i0, i1, i2, i3, $i4, $i5, $i6, i7, i8;
        java.lang.Integer $r8, $r10;
        boolean $z3, $z4, $z6, $z7;
        androidx.room.InvalidationTracker$Observer $r9;
        java.lang.String[] $r11;
        java.lang.String $r12;
        java.util.Collection $r14;

        r0 := @this: androidx.room.InvalidationTracker$ObserverWrapper;

        r1 := @parameter0: java.util.Set;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "invalidatedTablesIds");

        $r6 = r0.<androidx.room.InvalidationTracker$ObserverWrapper: int[] tableIds>;

        $i4 = lengthof $r6;

        tableswitch($i4)
        {
            case 0: goto label01;
            case 1: goto label02;
            default: goto label04;
        };

     label01:
        $r13 = staticinvoke <kotlin.collections.SetsKt: java.util.Set emptySet()>();

        goto label08;

     label02:
        $r7 = r0.<androidx.room.InvalidationTracker$ObserverWrapper: int[] tableIds>;

        $i5 = $r7[0];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $z3 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r8);

        if $z3 == 0 goto label03;

        $r13 = r0.<androidx.room.InvalidationTracker$ObserverWrapper: java.util.Set singleTableSet>;

        goto label08;

     label03:
        $r13 = staticinvoke <kotlin.collections.SetsKt: java.util.Set emptySet()>();

        goto label08;

     label04:
        r3 = staticinvoke <kotlin.collections.SetsKt: java.util.Set createSetBuilder()>();

        $r5 = r0.<androidx.room.InvalidationTracker$ObserverWrapper: int[] tableIds>;

        i7 = 0;

        i8 = 0;

        i0 = lengthof $r5;

     label05:
        if i8 >= i0 goto label07;

        i1 = $r5[i8];

        $i6 = i7;

        i7 = i7 + 1;

        i2 = i1;

        i3 = $i6;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $z4 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r10);

        if $z4 == 0 goto label06;

        $r11 = r0.<androidx.room.InvalidationTracker$ObserverWrapper: java.lang.String[] tableNames>;

        $r12 = $r11[i3];

        interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>($r12);

     label06:
        i8 = i8 + 1;

        goto label05;

     label07:
        $r13 = staticinvoke <kotlin.collections.SetsKt: java.util.Set build(java.util.Set)>(r3);

     label08:
        r2 = $r13;

        $r14 = (java.util.Collection) r2;

        $z6 = interfaceinvoke $r14.<java.util.Collection: boolean isEmpty()>();

        if $z6 != 0 goto label09;

        $z7 = 1;

        goto label10;

     label09:
        $z7 = 0;

     label10:
        if $z7 == 0 goto label11;

        $r9 = r0.<androidx.room.InvalidationTracker$ObserverWrapper: androidx.room.InvalidationTracker$Observer observer>;

        virtualinvoke $r9.<androidx.room.InvalidationTracker$Observer: void onInvalidated(java.util.Set)>(r2);

     label11:
        return;
    }

    public final void notifyByTableNames$room_runtime_release(java.lang.String[])
    {
        androidx.room.InvalidationTracker$ObserverWrapper r0;
        java.lang.String[] r1, $r5, $r8, $r10;
        java.util.Set r2, $r12, $r16;
        java.lang.String r3, r4, r6, r7, $r11, r14, r15;
        int i0, $i1, $i2, $i3, i4, $i5, i6;
        androidx.room.InvalidationTracker$Observer $r9;
        boolean $z3, $z4, $z8, z10, $z11, $z12;
        java.util.Collection $r19;

        r0 := @this: androidx.room.InvalidationTracker$ObserverWrapper;

        r1 := @parameter0: java.lang.String[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "tables");

        $r8 = r0.<androidx.room.InvalidationTracker$ObserverWrapper: java.lang.String[] tableNames>;

        $i1 = lengthof $r8;

        tableswitch($i1)
        {
            case 0: goto label01;
            case 1: goto label02;
            default: goto label08;
        };

     label01:
        $r12 = staticinvoke <kotlin.collections.SetsKt: java.util.Set emptySet()>();

        goto label14;

     label02:
        $i2 = 0;

        $i3 = lengthof r1;

     label03:
        if $i2 >= $i3 goto label05;

        r14 = r1[$i2];

        r15 = r14;

        $r10 = r0.<androidx.room.InvalidationTracker$ObserverWrapper: java.lang.String[] tableNames>;

        $r11 = $r10[0];

        $z3 = staticinvoke <kotlin.text.StringsKt: boolean equals(java.lang.String,java.lang.String,boolean)>(r15, $r11, 1);

        if $z3 == 0 goto label04;

        $z8 = 1;

        goto label06;

     label04:
        $i2 = $i2 + 1;

        goto label03;

     label05:
        $z8 = 0;

     label06:
        if $z8 == 0 goto label07;

        $r12 = r0.<androidx.room.InvalidationTracker$ObserverWrapper: java.util.Set singleTableSet>;

        goto label14;

     label07:
        $r12 = staticinvoke <kotlin.collections.SetsKt: java.util.Set emptySet()>();

        goto label14;

     label08:
        $r16 = staticinvoke <kotlin.collections.SetsKt: java.util.Set createSetBuilder()>();

        z10 = 0;

        i4 = 0;

        $i5 = lengthof r1;

     label09:
        if i4 >= $i5 goto label13;

        r3 = r1[i4];

        r4 = r3;

        $r5 = r0.<androidx.room.InvalidationTracker$ObserverWrapper: java.lang.String[] tableNames>;

        i6 = 0;

        i0 = lengthof $r5;

     label10:
        if i6 >= i0 goto label12;

        r6 = $r5[i6];

        r7 = r6;

        $z4 = staticinvoke <kotlin.text.StringsKt: boolean equals(java.lang.String,java.lang.String,boolean)>(r7, r4, 1);

        if $z4 == 0 goto label11;

        interfaceinvoke $r16.<java.util.Set: boolean add(java.lang.Object)>(r7);

        goto label11;

     label11:
        i6 = i6 + 1;

        goto label10;

     label12:
        i4 = i4 + 1;

        goto label09;

     label13:
        $r12 = staticinvoke <kotlin.collections.SetsKt: java.util.Set build(java.util.Set)>($r16);

     label14:
        r2 = $r12;

        $r19 = (java.util.Collection) r2;

        $z11 = interfaceinvoke $r19.<java.util.Collection: boolean isEmpty()>();

        if $z11 != 0 goto label15;

        $z12 = 1;

        goto label16;

     label15:
        $z12 = 0;

     label16:
        if $z12 == 0 goto label17;

        $r9 = r0.<androidx.room.InvalidationTracker$ObserverWrapper: androidx.room.InvalidationTracker$Observer observer>;

        virtualinvoke $r9.<androidx.room.InvalidationTracker$Observer: void onInvalidated(java.util.Set)>(r2);

     label17:
        return;
    }

androidx.room.InvalidationTracker$refreshRunnable$1
<androidx.room.InvalidationTracker$refreshRunnable$1: androidx.room.InvalidationTracker this$0>
    void <init>(androidx.room.InvalidationTracker)
    {
        androidx.room.InvalidationTracker$refreshRunnable$1 r0;
        androidx.room.InvalidationTracker $r1;

        r0 := @this: androidx.room.InvalidationTracker$refreshRunnable$1;

        $r1 := @parameter0: androidx.room.InvalidationTracker;

        r0.<androidx.room.InvalidationTracker$refreshRunnable$1: androidx.room.InvalidationTracker this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        androidx.room.InvalidationTracker$refreshRunnable$1 r0;
        java.util.concurrent.locks.Lock r1;
        java.util.Set r2, r43, r45;
        java.lang.Iterable $r3;
        java.util.Iterator r4;
        java.lang.Object r5, $r21;
        java.util.Map$Entry r6;
        androidx.room.InvalidationTracker $r7, $r9, $r10, $r12, $r14, $r17, $r19, $r23, $r25, $r27, $r32, $r35, $r40, r51;
        androidx.room.RoomDatabase $r8, $r13, $r15;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.concurrent.atomic.AtomicBoolean $r11;
        androidx.sqlite.db.SupportSQLiteOpenHelper $r16;
        androidx.room.AutoCloser $r18, $r24, $r26, $r28, $r33, $r36, $r41;
        androidx.arch.core.internal.SafeIterableMap $r20, r50, r52;
        androidx.room.InvalidationTracker$ObserverWrapper $r22;
        java.lang.Throwable $r29, $r30, $r31, $r34, $r37, $r38, $r39, r44, r46, r47, r48;
        androidx.sqlite.db.SupportSQLiteDatabase r42;
        java.util.Collection $r49;
        kotlin.Unit $r53;

        r0 := @this: androidx.room.InvalidationTracker$refreshRunnable$1;

        $r7 = r0.<androidx.room.InvalidationTracker$refreshRunnable$1: androidx.room.InvalidationTracker this$0>;

        $r8 = virtualinvoke $r7.<androidx.room.InvalidationTracker: androidx.room.RoomDatabase getDatabase$room_runtime_release()>();

        r1 = virtualinvoke $r8.<androidx.room.RoomDatabase: java.util.concurrent.locks.Lock getCloseLock$room_runtime_release()>();

        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void lock()>();

     label01:
        $r9 = r0.<androidx.room.InvalidationTracker$refreshRunnable$1: androidx.room.InvalidationTracker this$0>;

        $z0 = virtualinvoke $r9.<androidx.room.InvalidationTracker: boolean ensureInitialization$room_runtime_release()>();

        if $z0 != 0 goto label04;

     label02:
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void unlock()>();

        $r27 = r0.<androidx.room.InvalidationTracker$refreshRunnable$1: androidx.room.InvalidationTracker this$0>;

        $r28 = staticinvoke <androidx.room.InvalidationTracker: androidx.room.AutoCloser access$getAutoCloser$p(androidx.room.InvalidationTracker)>($r27);

        if $r28 == null goto label03;

        virtualinvoke $r28.<androidx.room.AutoCloser: void decrementCountAndScheduleClose()>();

        goto label03;

     label03:
        return;

     label04:
        $r10 = r0.<androidx.room.InvalidationTracker$refreshRunnable$1: androidx.room.InvalidationTracker this$0>;

        $r11 = virtualinvoke $r10.<androidx.room.InvalidationTracker: java.util.concurrent.atomic.AtomicBoolean getPendingRefresh()>();

        $z1 = virtualinvoke $r11.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(1, 0);

        if $z1 != 0 goto label07;

     label05:
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void unlock()>();

        $r25 = r0.<androidx.room.InvalidationTracker$refreshRunnable$1: androidx.room.InvalidationTracker this$0>;

        $r26 = staticinvoke <androidx.room.InvalidationTracker: androidx.room.AutoCloser access$getAutoCloser$p(androidx.room.InvalidationTracker)>($r25);

        if $r26 == null goto label06;

        virtualinvoke $r26.<androidx.room.AutoCloser: void decrementCountAndScheduleClose()>();

        goto label06;

     label06:
        return;

     label07:
        $r12 = r0.<androidx.room.InvalidationTracker$refreshRunnable$1: androidx.room.InvalidationTracker this$0>;

        $r13 = virtualinvoke $r12.<androidx.room.InvalidationTracker: androidx.room.RoomDatabase getDatabase$room_runtime_release()>();

        $z2 = virtualinvoke $r13.<androidx.room.RoomDatabase: boolean inTransaction()>();

        if $z2 == 0 goto label10;

     label08:
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void unlock()>();

        $r23 = r0.<androidx.room.InvalidationTracker$refreshRunnable$1: androidx.room.InvalidationTracker this$0>;

        $r24 = staticinvoke <androidx.room.InvalidationTracker: androidx.room.AutoCloser access$getAutoCloser$p(androidx.room.InvalidationTracker)>($r23);

        if $r24 == null goto label09;

        virtualinvoke $r24.<androidx.room.AutoCloser: void decrementCountAndScheduleClose()>();

        goto label09;

     label09:
        return;

     label10:
        $r14 = r0.<androidx.room.InvalidationTracker$refreshRunnable$1: androidx.room.InvalidationTracker this$0>;

        $r15 = virtualinvoke $r14.<androidx.room.InvalidationTracker: androidx.room.RoomDatabase getDatabase$room_runtime_release()>();

        $r16 = virtualinvoke $r15.<androidx.room.RoomDatabase: androidx.sqlite.db.SupportSQLiteOpenHelper getOpenHelper()>();

        r42 = interfaceinvoke $r16.<androidx.sqlite.db.SupportSQLiteOpenHelper: androidx.sqlite.db.SupportSQLiteDatabase getWritableDatabase()>();

        interfaceinvoke r42.<androidx.sqlite.db.SupportSQLiteDatabase: void beginTransactionNonExclusive()>();

     label11:
        r43 = specialinvoke r0.<androidx.room.InvalidationTracker$refreshRunnable$1: java.util.Set checkUpdatedTable()>();

        interfaceinvoke r42.<androidx.sqlite.db.SupportSQLiteDatabase: void setTransactionSuccessful()>();

     label12:
        interfaceinvoke r42.<androidx.sqlite.db.SupportSQLiteDatabase: void endTransaction()>();

        goto label15;

     label13:
        $r29 := @caughtexception;

        r44 = $r29;

     label14:
        interfaceinvoke r42.<androidx.sqlite.db.SupportSQLiteDatabase: void endTransaction()>();

        throw r44;

     label15:
        r45 = r43;

     label16:
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void unlock()>();

        $r17 = r0.<androidx.room.InvalidationTracker$refreshRunnable$1: androidx.room.InvalidationTracker this$0>;

        $r18 = staticinvoke <androidx.room.InvalidationTracker: androidx.room.AutoCloser access$getAutoCloser$p(androidx.room.InvalidationTracker)>($r17);

        if $r18 == null goto label17;

        virtualinvoke $r18.<androidx.room.AutoCloser: void decrementCountAndScheduleClose()>();

        goto label17;

     label17:
        goto label27;

     label18:
        $r38 := @caughtexception;

        r46 = $r38;

        $r39 = (java.lang.Throwable) r46;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ROOM", "Cannot run invalidation tracker. Is the db closed?", $r39);

        r45 = staticinvoke <kotlin.collections.SetsKt: java.util.Set emptySet()>();

     label19:
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void unlock()>();

        $r40 = r0.<androidx.room.InvalidationTracker$refreshRunnable$1: androidx.room.InvalidationTracker this$0>;

        $r41 = staticinvoke <androidx.room.InvalidationTracker: androidx.room.AutoCloser access$getAutoCloser$p(androidx.room.InvalidationTracker)>($r40);

        if $r41 == null goto label20;

        virtualinvoke $r41.<androidx.room.AutoCloser: void decrementCountAndScheduleClose()>();

        goto label20;

     label20:
        goto label27;

     label21:
        $r30 := @caughtexception;

        r47 = $r30;

        $r31 = (java.lang.Throwable) r47;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ROOM", "Cannot run invalidation tracker. Is the db closed?", $r31);

        r45 = staticinvoke <kotlin.collections.SetsKt: java.util.Set emptySet()>();

     label22:
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void unlock()>();

        $r32 = r0.<androidx.room.InvalidationTracker$refreshRunnable$1: androidx.room.InvalidationTracker this$0>;

        $r33 = staticinvoke <androidx.room.InvalidationTracker: androidx.room.AutoCloser access$getAutoCloser$p(androidx.room.InvalidationTracker)>($r32);

        if $r33 == null goto label23;

        virtualinvoke $r33.<androidx.room.AutoCloser: void decrementCountAndScheduleClose()>();

        goto label23;

     label23:
        goto label27;

     label24:
        $r34 := @caughtexception;

        r48 = $r34;

     label25:
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void unlock()>();

        $r35 = r0.<androidx.room.InvalidationTracker$refreshRunnable$1: androidx.room.InvalidationTracker this$0>;

        $r36 = staticinvoke <androidx.room.InvalidationTracker: androidx.room.AutoCloser access$getAutoCloser$p(androidx.room.InvalidationTracker)>($r35);

        if $r36 == null goto label26;

        virtualinvoke $r36.<androidx.room.AutoCloser: void decrementCountAndScheduleClose()>();

        goto label26;

     label26:
        throw r48;

     label27:
        r2 = r45;

        $r49 = (java.util.Collection) r2;

        $z4 = interfaceinvoke $r49.<java.util.Collection: boolean isEmpty()>();

        if $z4 != 0 goto label28;

        $z5 = 1;

        goto label29;

     label28:
        $z5 = 0;

     label29:
        if $z5 == 0 goto label36;

        $r19 = r0.<androidx.room.InvalidationTracker$refreshRunnable$1: androidx.room.InvalidationTracker this$0>;

        r50 = virtualinvoke $r19.<androidx.room.InvalidationTracker: androidx.arch.core.internal.SafeIterableMap getObserverMap$room_runtime_release()>();

        r51 = r0.<androidx.room.InvalidationTracker$refreshRunnable$1: androidx.room.InvalidationTracker this$0>;

        r52 = r50;

        entermonitor r52;

     label30:
        $r20 = virtualinvoke r51.<androidx.room.InvalidationTracker: androidx.arch.core.internal.SafeIterableMap getObserverMap$room_runtime_release()>();

        $r3 = (java.lang.Iterable) $r20;

        r4 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>();

     label31:
        $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label32;

        r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) r5;

        $r21 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r22 = (androidx.room.InvalidationTracker$ObserverWrapper) $r21;

        virtualinvoke $r22.<androidx.room.InvalidationTracker$ObserverWrapper: void notifyByTableInvalidStatus$room_runtime_release(java.util.Set)>(r2);

        goto label31;

     label32:
        $r53 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label33:
        exitmonitor r52;

        goto label36;

     label34:
        $r37 := @caughtexception;

     label35:
        exitmonitor r52;

        throw $r37;

     label36:
        return;

        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
        catch java.lang.IllegalStateException from label01 to label02 with label18;
        catch java.lang.IllegalStateException from label04 to label05 with label18;
        catch java.lang.IllegalStateException from label07 to label08 with label18;
        catch java.lang.IllegalStateException from label10 to label16 with label18;
        catch android.database.sqlite.SQLiteException from label01 to label02 with label21;
        catch android.database.sqlite.SQLiteException from label04 to label05 with label21;
        catch android.database.sqlite.SQLiteException from label07 to label08 with label21;
        catch android.database.sqlite.SQLiteException from label10 to label16 with label21;
        catch java.lang.Throwable from label01 to label02 with label24;
        catch java.lang.Throwable from label04 to label05 with label24;
        catch java.lang.Throwable from label07 to label08 with label24;
        catch java.lang.Throwable from label10 to label16 with label24;
        catch java.lang.Throwable from label18 to label19 with label24;
        catch java.lang.Throwable from label21 to label22 with label24;
        catch java.lang.Throwable from label24 to label25 with label24;
        catch java.lang.Throwable from label30 to label33 with label34;
        catch java.lang.Throwable from label34 to label35 with label34;
    }

    private final java.util.Set checkUpdatedTable()
    {
        androidx.room.InvalidationTracker$refreshRunnable$1 r0;
        java.util.Set r1, r21;
        android.database.Cursor $r3, r23;
        androidx.room.RoomDatabase $r4;
        androidx.sqlite.db.SimpleSQLiteQuery $r5;
        androidx.sqlite.db.SupportSQLiteQuery $r6;
        int $i0, $i1, $i2;
        boolean $z0, $z1, $z2, $z3;
        java.util.Collection $r7;
        androidx.room.InvalidationTracker $r8, $r10, r20;
        androidx.sqlite.db.SupportSQLiteStatement $r9, r32;
        java.lang.IllegalArgumentException $r11;
        java.lang.String $r12, $r14, r31, r33;
        java.lang.IllegalStateException $r13;
        java.lang.Integer $r15, $r16;
        java.lang.Throwable $r17, $r18, $r19, r25, r26, r27, r30;
        java.io.Closeable r22;
        kotlin.Unit r24, r29;

        r0 := @this: androidx.room.InvalidationTracker$refreshRunnable$1;

        r20 = r0.<androidx.room.InvalidationTracker$refreshRunnable$1: androidx.room.InvalidationTracker this$0>;

        r21 = staticinvoke <kotlin.collections.SetsKt: java.util.Set createSetBuilder()>();

        $r4 = virtualinvoke r20.<androidx.room.InvalidationTracker: androidx.room.RoomDatabase getDatabase$room_runtime_release()>();

        $r5 = new androidx.sqlite.db.SimpleSQLiteQuery;

        specialinvoke $r5.<androidx.sqlite.db.SimpleSQLiteQuery: void <init>(java.lang.String)>("SELECT * FROM room_table_modification_log WHERE invalidated = 1;");

        $r6 = (androidx.sqlite.db.SupportSQLiteQuery) $r5;

        $r3 = staticinvoke <androidx.room.RoomDatabase: android.database.Cursor query$default(androidx.room.RoomDatabase,androidx.sqlite.db.SupportSQLiteQuery,android.os.CancellationSignal,int,java.lang.Object)>($r4, $r6, null, 2, null);

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 <= 15 goto label09;

        r22 = (java.io.Closeable) $r3;

     label01:
        r23 = (android.database.Cursor) r22;

     label02:
        $z2 = interfaceinvoke r23.<android.database.Cursor: boolean moveToNext()>();

        if $z2 == 0 goto label03;

        $i2 = interfaceinvoke r23.<android.database.Cursor: int getInt(int)>(0);

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        interfaceinvoke r21.<java.util.Set: boolean add(java.lang.Object)>($r16);

        goto label02;

     label03:
        r24 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label04:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r22, null);

        goto label08;

     label05:
        $r18 := @caughtexception;

        r25 = $r18;

        r26 = r25;

        throw r25;

     label06:
        $r17 := @caughtexception;

        r27 = $r17;

     label07:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r22, r26);

        throw r27;

     label08:
        goto label14;

     label09:
        $z0 = interfaceinvoke $r3.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label10;

        $i1 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>(0);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        interfaceinvoke r21.<java.util.Set: boolean add(java.lang.Object)>($r15);

        goto label09;

     label10:
        r29 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label11:
        interfaceinvoke $r3.<android.database.Cursor: void close()>();

        goto label14;

     label12:
        $r19 := @caughtexception;

        r30 = $r19;

     label13:
        interfaceinvoke $r3.<android.database.Cursor: void close()>();

        throw r30;

     label14:
        r1 = staticinvoke <kotlin.collections.SetsKt: java.util.Set build(java.util.Set)>(r21);

        $r7 = (java.util.Collection) r1;

        $z1 = interfaceinvoke $r7.<java.util.Collection: boolean isEmpty()>();

        if $z1 != 0 goto label15;

        $z3 = 1;

        goto label16;

     label15:
        $z3 = 0;

     label16:
        if $z3 == 0 goto label19;

        $r8 = r0.<androidx.room.InvalidationTracker$refreshRunnable$1: androidx.room.InvalidationTracker this$0>;

        $r9 = virtualinvoke $r8.<androidx.room.InvalidationTracker: androidx.sqlite.db.SupportSQLiteStatement getCleanupStatement$room_runtime_release()>();

        if $r9 != null goto label17;

        r31 = "Required value was null.";

        $r13 = new java.lang.IllegalStateException;

        $r14 = virtualinvoke r31.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        throw $r13;

     label17:
        $r10 = r0.<androidx.room.InvalidationTracker$refreshRunnable$1: androidx.room.InvalidationTracker this$0>;

        r32 = virtualinvoke $r10.<androidx.room.InvalidationTracker: androidx.sqlite.db.SupportSQLiteStatement getCleanupStatement$room_runtime_release()>();

        if r32 != null goto label18;

        r33 = "Required value was null.";

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = virtualinvoke r33.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r11;

     label18:
        interfaceinvoke r32.<androidx.sqlite.db.SupportSQLiteStatement: int executeUpdateDelete()>();

     label19:
        return r1;

        catch java.lang.Throwable from label01 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label09 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

androidx.room.InvalidationTracker$WeakObserver
<androidx.room.InvalidationTracker$WeakObserver: androidx.room.InvalidationTracker tracker>
<androidx.room.InvalidationTracker$WeakObserver: java.lang.ref.WeakReference delegateRef>
    public void <init>(androidx.room.InvalidationTracker, androidx.room.InvalidationTracker$Observer)
    {
        androidx.room.InvalidationTracker$WeakObserver r0;
        androidx.room.InvalidationTracker r1;
        androidx.room.InvalidationTracker$Observer r2;
        java.lang.String[] $r3;
        java.lang.ref.WeakReference $r4;

        r0 := @this: androidx.room.InvalidationTracker$WeakObserver;

        r1 := @parameter0: androidx.room.InvalidationTracker;

        r2 := @parameter1: androidx.room.InvalidationTracker$Observer;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "tracker");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "delegate");

        $r3 = virtualinvoke r2.<androidx.room.InvalidationTracker$Observer: java.lang.String[] getTables$room_runtime_release()>();

        specialinvoke r0.<androidx.room.InvalidationTracker$Observer: void <init>(java.lang.String[])>($r3);

        r0.<androidx.room.InvalidationTracker$WeakObserver: androidx.room.InvalidationTracker tracker> = r1;

        $r4 = new java.lang.ref.WeakReference;

        specialinvoke $r4.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r2);

        r0.<androidx.room.InvalidationTracker$WeakObserver: java.lang.ref.WeakReference delegateRef> = $r4;

        return;
    }

    public final androidx.room.InvalidationTracker getTracker()
    {
        androidx.room.InvalidationTracker$WeakObserver r0;
        androidx.room.InvalidationTracker $r1;

        r0 := @this: androidx.room.InvalidationTracker$WeakObserver;

        $r1 = r0.<androidx.room.InvalidationTracker$WeakObserver: androidx.room.InvalidationTracker tracker>;

        return $r1;
    }

    public final java.lang.ref.WeakReference getDelegateRef()
    {
        androidx.room.InvalidationTracker$WeakObserver r0;
        java.lang.ref.WeakReference $r1;

        r0 := @this: androidx.room.InvalidationTracker$WeakObserver;

        $r1 = r0.<androidx.room.InvalidationTracker$WeakObserver: java.lang.ref.WeakReference delegateRef>;

        return $r1;
    }

    public void onInvalidated(java.util.Set)
    {
        androidx.room.InvalidationTracker$WeakObserver r0;
        java.util.Set r1;
        androidx.room.InvalidationTracker$Observer r2, $r5;
        java.lang.ref.WeakReference $r3;
        java.lang.Object $r4;
        androidx.room.InvalidationTracker $r6;

        r0 := @this: androidx.room.InvalidationTracker$WeakObserver;

        r1 := @parameter0: java.util.Set;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "tables");

        $r3 = r0.<androidx.room.InvalidationTracker$WeakObserver: java.lang.ref.WeakReference delegateRef>;

        $r4 = virtualinvoke $r3.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r2 = (androidx.room.InvalidationTracker$Observer) $r4;

        if r2 != null goto label1;

        $r6 = r0.<androidx.room.InvalidationTracker$WeakObserver: androidx.room.InvalidationTracker tracker>;

        $r5 = (androidx.room.InvalidationTracker$Observer) r0;

        virtualinvoke $r6.<androidx.room.InvalidationTracker: void removeObserver(androidx.room.InvalidationTracker$Observer)>($r5);

        goto label2;

     label1:
        virtualinvoke r2.<androidx.room.InvalidationTracker$Observer: void onInvalidated(java.util.Set)>(r1);

     label2:
        return;
    }

