androidx.datastore.SingleProcessDataStore
<androidx.datastore.SingleProcessDataStore: kotlinx.coroutines.flow.Flow data>
<androidx.datastore.SingleProcessDataStore: java.lang.String SCRATCH_SUFFIX>
<androidx.datastore.SingleProcessDataStore: kotlin.Lazy file$delegate>
<androidx.datastore.SingleProcessDataStore: java.util.concurrent.atomic.AtomicReference downstreamChannel>
<androidx.datastore.SingleProcessDataStore: java.util.List initTasks>
<androidx.datastore.SingleProcessDataStore: kotlinx.coroutines.channels.SendChannel actor>
<androidx.datastore.SingleProcessDataStore: kotlin.jvm.functions.Function0 produceFile>
<androidx.datastore.SingleProcessDataStore: androidx.datastore.Serializer serializer>
<androidx.datastore.SingleProcessDataStore: androidx.datastore.CorruptionHandler corruptionHandler>
<androidx.datastore.SingleProcessDataStore: kotlinx.coroutines.CoroutineScope scope>
    public kotlinx.coroutines.flow.Flow getData()
    {
        androidx.datastore.SingleProcessDataStore r0;
        kotlinx.coroutines.flow.Flow $r1;

        r0 := @this: androidx.datastore.SingleProcessDataStore;

        $r1 = r0.<androidx.datastore.SingleProcessDataStore: kotlinx.coroutines.flow.Flow data>;

        return $r1;
    }

    public java.lang.Object updateData(kotlin.jvm.functions.Function2, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r0, r55, r56, r57;
        java.lang.Object $r1, r2, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r22, $r26, $r28, $r31, $r44;
        boolean $z1;
        kotlinx.coroutines.channels.BroadcastChannel $r20;
        kotlinx.coroutines.flow.Flow $r21;
        kotlinx.coroutines.CompletableDeferred $r24, $r29;
        java.util.concurrent.atomic.AtomicReference $r25;
        kotlinx.coroutines.channels.SendChannel $r30;
        int $i0, $i1, $i2, $i3, $i4;
        androidx.datastore.SingleProcessDataStore r33, r37, r49;
        kotlin.jvm.functions.Function2 r34, $r43, r48;
        androidx.datastore.SingleProcessDataStore$updateData$1 $r35, r50;
        kotlin.jvm.internal.Ref$ObjectRef r36, r47, r51;
        kotlinx.coroutines.channels.ConflatedBroadcastChannel r38, r46;
        androidx.datastore.SingleProcessDataStore$Message$Update r39, r45, r52;
        kotlinx.coroutines.CoroutineScope $r40;
        kotlin.coroutines.CoroutineContext $r41;
        androidx.datastore.SingleProcessDataStore$updateData$2 r53;
        java.lang.IllegalStateException r54;

        r33 := @this: androidx.datastore.SingleProcessDataStore;

        r34 := @parameter0: kotlin.jvm.functions.Function2;

        $r0 := @parameter1: kotlin.coroutines.Continuation;

        $z1 = $r0 instanceof androidx.datastore.SingleProcessDataStore$updateData$1;

        if $z1 == 0 goto label01;

        $r35 = (androidx.datastore.SingleProcessDataStore$updateData$1) $r0;

        $i0 = $r35.<androidx.datastore.SingleProcessDataStore$updateData$1: int label>;

        $i1 = $i0 & -2147483648;

        if $i1 == 0 goto label01;

        $i2 = $r35.<androidx.datastore.SingleProcessDataStore$updateData$1: int label>;

        $i3 = $i2 - -2147483648;

        $r35.<androidx.datastore.SingleProcessDataStore$updateData$1: int label> = $i3;

        goto label02;

     label01:
        r50 = new androidx.datastore.SingleProcessDataStore$updateData$1;

        specialinvoke r50.<androidx.datastore.SingleProcessDataStore$updateData$1: void <init>(androidx.datastore.SingleProcessDataStore,kotlin.coroutines.Continuation)>(r33, $r0);

        $r35 = r50;

     label02:
        $r1 = $r35.<androidx.datastore.SingleProcessDataStore$updateData$1: java.lang.Object result>;

        r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i4 = $r35.<androidx.datastore.SingleProcessDataStore$updateData$1: int label>;

        tableswitch($i4)
        {
            case 0: goto label03;
            case 1: goto label04;
            case 2: goto label06;
            case 3: goto label08;
            default: goto label10;
        };

     label03:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        r51 = new kotlin.jvm.internal.Ref$ObjectRef;

        specialinvoke r51.<kotlin.jvm.internal.Ref$ObjectRef: void <init>()>();

        r36 = r51;

        $r24 = staticinvoke <kotlinx.coroutines.CompletableDeferredKt: kotlinx.coroutines.CompletableDeferred CompletableDeferred$default(kotlinx.coroutines.Job,int,java.lang.Object)>(null, 1, null);

        r36.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element> = $r24;

        r37 = r33;

        $r25 = staticinvoke <androidx.datastore.SingleProcessDataStore: java.util.concurrent.atomic.AtomicReference access$getDownstreamChannel$p(androidx.datastore.SingleProcessDataStore)>(r37);

        $r26 = virtualinvoke $r25.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r26, "downstreamChannel.get()");

        r38 = (kotlinx.coroutines.channels.ConflatedBroadcastChannel) $r26;

        r52 = new androidx.datastore.SingleProcessDataStore$Message$Update;

        $r28 = r36.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        $r29 = (kotlinx.coroutines.CompletableDeferred) $r28;

        specialinvoke r52.<androidx.datastore.SingleProcessDataStore$Message$Update: void <init>(kotlin.jvm.functions.Function2,kotlinx.coroutines.CompletableDeferred,kotlinx.coroutines.channels.ConflatedBroadcastChannel)>(r34, $r29, r38);

        r39 = r52;

        $r30 = r33.<androidx.datastore.SingleProcessDataStore: kotlinx.coroutines.channels.SendChannel actor>;

        $r35.<androidx.datastore.SingleProcessDataStore$updateData$1: java.lang.Object L$0> = r33;

        $r35.<androidx.datastore.SingleProcessDataStore$updateData$1: java.lang.Object L$1> = r34;

        $r35.<androidx.datastore.SingleProcessDataStore$updateData$1: java.lang.Object L$2> = r36;

        $r35.<androidx.datastore.SingleProcessDataStore$updateData$1: java.lang.Object L$3> = r38;

        $r35.<androidx.datastore.SingleProcessDataStore$updateData$1: java.lang.Object L$4> = r39;

        $r35.<androidx.datastore.SingleProcessDataStore$updateData$1: int label> = 1;

        r55 = (kotlin.coroutines.Continuation) $r35;

        $r31 = interfaceinvoke $r30.<kotlinx.coroutines.channels.SendChannel: java.lang.Object send(java.lang.Object,kotlin.coroutines.Continuation)>(r39, r55);

        if $r31 != r2 goto label05;

        return r2;

     label04:
        $r14 = $r35.<androidx.datastore.SingleProcessDataStore$updateData$1: java.lang.Object L$4>;

        r39 = (androidx.datastore.SingleProcessDataStore$Message$Update) $r14;

        $r15 = $r35.<androidx.datastore.SingleProcessDataStore$updateData$1: java.lang.Object L$3>;

        r38 = (kotlinx.coroutines.channels.ConflatedBroadcastChannel) $r15;

        $r16 = $r35.<androidx.datastore.SingleProcessDataStore$updateData$1: java.lang.Object L$2>;

        r36 = (kotlin.jvm.internal.Ref$ObjectRef) $r16;

        $r17 = $r35.<androidx.datastore.SingleProcessDataStore$updateData$1: java.lang.Object L$1>;

        r34 = (kotlin.jvm.functions.Function2) $r17;

        $r18 = $r35.<androidx.datastore.SingleProcessDataStore$updateData$1: java.lang.Object L$0>;

        r33 = (androidx.datastore.SingleProcessDataStore) $r18;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label05:
        $r19 = virtualinvoke r38.<kotlinx.coroutines.channels.ConflatedBroadcastChannel: java.lang.Object getValueOrNull()>();

        if $r19 != null goto label07;

        $r20 = (kotlinx.coroutines.channels.BroadcastChannel) r38;

        $r21 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow asFlow(kotlinx.coroutines.channels.BroadcastChannel)>($r20);

        $r35.<androidx.datastore.SingleProcessDataStore$updateData$1: java.lang.Object L$0> = r33;

        $r35.<androidx.datastore.SingleProcessDataStore$updateData$1: java.lang.Object L$1> = r34;

        $r35.<androidx.datastore.SingleProcessDataStore$updateData$1: java.lang.Object L$2> = r36;

        $r35.<androidx.datastore.SingleProcessDataStore$updateData$1: java.lang.Object L$3> = r38;

        $r35.<androidx.datastore.SingleProcessDataStore$updateData$1: java.lang.Object L$4> = r39;

        $r35.<androidx.datastore.SingleProcessDataStore$updateData$1: int label> = 2;

        r56 = (kotlin.coroutines.Continuation) $r35;

        $r22 = staticinvoke <kotlinx.coroutines.flow.FlowKt: java.lang.Object first(kotlinx.coroutines.flow.Flow,kotlin.coroutines.Continuation)>($r21, r56);

        if $r22 != r2 goto label07;

        return r2;

     label06:
        $r9 = $r35.<androidx.datastore.SingleProcessDataStore$updateData$1: java.lang.Object L$4>;

        r39 = (androidx.datastore.SingleProcessDataStore$Message$Update) $r9;

        $r10 = $r35.<androidx.datastore.SingleProcessDataStore$updateData$1: java.lang.Object L$3>;

        r38 = (kotlinx.coroutines.channels.ConflatedBroadcastChannel) $r10;

        $r11 = $r35.<androidx.datastore.SingleProcessDataStore$updateData$1: java.lang.Object L$2>;

        r36 = (kotlin.jvm.internal.Ref$ObjectRef) $r11;

        $r12 = $r35.<androidx.datastore.SingleProcessDataStore$updateData$1: java.lang.Object L$1>;

        r34 = (kotlin.jvm.functions.Function2) $r12;

        $r13 = $r35.<androidx.datastore.SingleProcessDataStore$updateData$1: java.lang.Object L$0>;

        r33 = (androidx.datastore.SingleProcessDataStore) $r13;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label07:
        $r40 = r33.<androidx.datastore.SingleProcessDataStore: kotlinx.coroutines.CoroutineScope scope>;

        $r41 = interfaceinvoke $r40.<kotlinx.coroutines.CoroutineScope: kotlin.coroutines.CoroutineContext getCoroutineContext()>();

        r53 = new androidx.datastore.SingleProcessDataStore$updateData$2;

        specialinvoke r53.<androidx.datastore.SingleProcessDataStore$updateData$2: void <init>(kotlin.jvm.internal.Ref$ObjectRef,kotlin.coroutines.Continuation)>(r36, null);

        $r43 = (kotlin.jvm.functions.Function2) r53;

        $r35.<androidx.datastore.SingleProcessDataStore$updateData$1: java.lang.Object L$0> = r33;

        $r35.<androidx.datastore.SingleProcessDataStore$updateData$1: java.lang.Object L$1> = r34;

        $r35.<androidx.datastore.SingleProcessDataStore$updateData$1: java.lang.Object L$2> = r36;

        $r35.<androidx.datastore.SingleProcessDataStore$updateData$1: java.lang.Object L$3> = r38;

        $r35.<androidx.datastore.SingleProcessDataStore$updateData$1: java.lang.Object L$4> = r39;

        $r35.<androidx.datastore.SingleProcessDataStore$updateData$1: int label> = 3;

        r57 = (kotlin.coroutines.Continuation) $r35;

        $r44 = staticinvoke <kotlinx.coroutines.BuildersKt: java.lang.Object withContext(kotlin.coroutines.CoroutineContext,kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation)>($r41, $r43, r57);

        if $r44 != r2 goto label09;

        return r2;

     label08:
        $r4 = $r35.<androidx.datastore.SingleProcessDataStore$updateData$1: java.lang.Object L$4>;

        r45 = (androidx.datastore.SingleProcessDataStore$Message$Update) $r4;

        $r5 = $r35.<androidx.datastore.SingleProcessDataStore$updateData$1: java.lang.Object L$3>;

        r46 = (kotlinx.coroutines.channels.ConflatedBroadcastChannel) $r5;

        $r6 = $r35.<androidx.datastore.SingleProcessDataStore$updateData$1: java.lang.Object L$2>;

        r47 = (kotlin.jvm.internal.Ref$ObjectRef) $r6;

        $r7 = $r35.<androidx.datastore.SingleProcessDataStore$updateData$1: java.lang.Object L$1>;

        r48 = (kotlin.jvm.functions.Function2) $r7;

        $r8 = $r35.<androidx.datastore.SingleProcessDataStore$updateData$1: java.lang.Object L$0>;

        r49 = (androidx.datastore.SingleProcessDataStore) $r8;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r44 = $r1;

     label09:
        return $r44;

     label10:
        r54 = new java.lang.IllegalStateException;

        specialinvoke r54.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r54;
    }

    private final java.io.File getFile()
    {
        androidx.datastore.SingleProcessDataStore r0;
        kotlin.Lazy r1;
        java.lang.Object $r2;
        java.io.File $r3;

        r0 := @this: androidx.datastore.SingleProcessDataStore;

        r1 = r0.<androidx.datastore.SingleProcessDataStore: kotlin.Lazy file$delegate>;

        $r2 = interfaceinvoke r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r3 = (java.io.File) $r2;

        return $r3;
    }

    private final void resetDataChannel(java.lang.Throwable)
    {
        androidx.datastore.SingleProcessDataStore r0;
        java.lang.Throwable r1;
        kotlinx.coroutines.channels.ConflatedBroadcastChannel r2, $r3;
        java.util.concurrent.atomic.AtomicReference $r4;
        java.lang.Object $r5;

        r0 := @this: androidx.datastore.SingleProcessDataStore;

        r1 := @parameter0: java.lang.Throwable;

        $r4 = r0.<androidx.datastore.SingleProcessDataStore: java.util.concurrent.atomic.AtomicReference downstreamChannel>;

        $r3 = new kotlinx.coroutines.channels.ConflatedBroadcastChannel;

        specialinvoke $r3.<kotlinx.coroutines.channels.ConflatedBroadcastChannel: void <init>()>();

        $r5 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>($r3);

        r2 = (kotlinx.coroutines.channels.ConflatedBroadcastChannel) $r5;

        virtualinvoke r2.<kotlinx.coroutines.channels.ConflatedBroadcastChannel: boolean close(java.lang.Throwable)>(r1);

        return;
    }

    final java.lang.Object readAndInitOnce(kotlinx.coroutines.channels.ConflatedBroadcastChannel, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r0, r67, r68;
        java.lang.Object r1, $r2, r3, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r13, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r36, $r46, r51, r54, $r60;
        boolean $z0, $z1;
        kotlin.Unit $r14, $r38, r59;
        kotlinx.coroutines.channels.ConflatedBroadcastChannel $r15, r41;
        java.util.List $r35;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        androidx.datastore.SingleProcessDataStore r40, r58;
        androidx.datastore.SingleProcessDataStore$readAndInitOnce$1 $r42, r61;
        kotlinx.coroutines.sync.Mutex r43, $r55, r57;
        kotlin.jvm.internal.Ref$ObjectRef r44, r45, r62;
        kotlin.jvm.internal.Ref$BooleanRef r47, r63;
        androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1 r48, r56, r64;
        java.lang.Iterable $r49;
        java.util.Iterator $r50;
        kotlin.jvm.functions.Function2 r52, r53;
        androidx.datastore.DataAndHash r65;
        java.lang.IllegalStateException r66;

        r40 := @this: androidx.datastore.SingleProcessDataStore;

        r41 := @parameter0: kotlinx.coroutines.channels.ConflatedBroadcastChannel;

        $r0 := @parameter1: kotlin.coroutines.Continuation;

        $z0 = $r0 instanceof androidx.datastore.SingleProcessDataStore$readAndInitOnce$1;

        if $z0 == 0 goto label01;

        $r42 = (androidx.datastore.SingleProcessDataStore$readAndInitOnce$1) $r0;

        $i0 = $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: int label>;

        $i1 = $i0 & -2147483648;

        if $i1 == 0 goto label01;

        $i2 = $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: int label>;

        $i3 = $i2 - -2147483648;

        $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: int label> = $i3;

        goto label02;

     label01:
        r61 = new androidx.datastore.SingleProcessDataStore$readAndInitOnce$1;

        specialinvoke r61.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: void <init>(androidx.datastore.SingleProcessDataStore,kotlin.coroutines.Continuation)>(r40, $r0);

        $r42 = r61;

     label02:
        $r2 = $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object result>;

        r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i4 = $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: int label>;

        tableswitch($i4)
        {
            case 0: goto label03;
            case 1: goto label05;
            case 2: goto label08;
            case 3: goto label12;
            default: goto label17;
        };

     label03:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

        $r36 = virtualinvoke r41.<kotlinx.coroutines.channels.ConflatedBroadcastChannel: java.lang.Object getValueOrNull()>();

        if $r36 == null goto label04;

        $r38 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r38;

     label04:
        r43 = staticinvoke <kotlinx.coroutines.sync.MutexKt: kotlinx.coroutines.sync.Mutex Mutex$default(boolean,int,java.lang.Object)>(0, 1, null);

        r62 = new kotlin.jvm.internal.Ref$ObjectRef;

        specialinvoke r62.<kotlin.jvm.internal.Ref$ObjectRef: void <init>()>();

        r44 = r62;

        r45 = r44;

        $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$0> = r40;

        $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$1> = r41;

        $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$2> = r43;

        $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$3> = r44;

        $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$4> = r45;

        $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: int label> = 1;

        r67 = (kotlin.coroutines.Continuation) $r42;

        $r46 = virtualinvoke r40.<androidx.datastore.SingleProcessDataStore: java.lang.Object readDataOrHandleCorruption(kotlin.coroutines.Continuation)>(r67);

        if $r46 != r3 goto label06;

        return r3;

     label05:
        $r28 = $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$4>;

        r45 = (kotlin.jvm.internal.Ref$ObjectRef) $r28;

        $r29 = $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$3>;

        r44 = (kotlin.jvm.internal.Ref$ObjectRef) $r29;

        $r30 = $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$2>;

        r43 = (kotlinx.coroutines.sync.Mutex) $r30;

        $r31 = $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$1>;

        r41 = (kotlinx.coroutines.channels.ConflatedBroadcastChannel) $r31;

        $r32 = $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$0>;

        r40 = (androidx.datastore.SingleProcessDataStore) $r32;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

        $r46 = $r2;

     label06:
        r1 = $r46;

        r45.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element> = r1;

        r63 = new kotlin.jvm.internal.Ref$BooleanRef;

        specialinvoke r63.<kotlin.jvm.internal.Ref$BooleanRef: void <init>()>();

        r47 = r63;

        r47.<kotlin.jvm.internal.Ref$BooleanRef: boolean element> = 0;

        r64 = new androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1;

        specialinvoke r64.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1: void <init>(androidx.datastore.SingleProcessDataStore,kotlinx.coroutines.sync.Mutex,kotlin.jvm.internal.Ref$BooleanRef,kotlin.jvm.internal.Ref$ObjectRef)>(r40, r43, r47, r44);

        r48 = r64;

        $r35 = r40.<androidx.datastore.SingleProcessDataStore: java.util.List initTasks>;

        if $r35 == null goto label11;

        $r49 = (java.lang.Iterable) $r35;

        $r50 = interfaceinvoke $r49.<java.lang.Iterable: java.util.Iterator iterator()>();

     label07:
        $z1 = interfaceinvoke $r50.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label10;

        r51 = interfaceinvoke $r50.<java.util.Iterator: java.lang.Object next()>();

        r52 = (kotlin.jvm.functions.Function2) r51;

        $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$0> = r40;

        $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$1> = r41;

        $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$2> = r43;

        $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$3> = r44;

        $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$4> = r47;

        $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$5> = r48;

        $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$6> = $r49;

        $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$7> = $r50;

        $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$8> = r51;

        $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$9> = r52;

        $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: int label> = 2;

        $r27 = interfaceinvoke r52.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>(r48, $r42);

        if $r27 != r3 goto label09;

        return r3;

     label08:
        $r16 = $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$9>;

        r53 = (kotlin.jvm.functions.Function2) $r16;

        r54 = $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$8>;

        $r17 = $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$7>;

        $r50 = (java.util.Iterator) $r17;

        $r18 = $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$6>;

        $r49 = (java.lang.Iterable) $r18;

        $r19 = $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$5>;

        r48 = (androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1) $r19;

        $r20 = $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$4>;

        r47 = (kotlin.jvm.internal.Ref$BooleanRef) $r20;

        $r21 = $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$3>;

        r44 = (kotlin.jvm.internal.Ref$ObjectRef) $r21;

        $r22 = $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$2>;

        r43 = (kotlinx.coroutines.sync.Mutex) $r22;

        $r23 = $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$1>;

        r41 = (kotlinx.coroutines.channels.ConflatedBroadcastChannel) $r23;

        $r24 = $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$0>;

        r40 = (androidx.datastore.SingleProcessDataStore) $r24;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

     label09:
        goto label07;

     label10:
        goto label11;

     label11:
        r40.<androidx.datastore.SingleProcessDataStore: java.util.List initTasks> = null;

        $r55 = r43;

        $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$0> = r40;

        $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$1> = r41;

        $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$2> = r43;

        $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$3> = r44;

        $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$4> = r47;

        $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$5> = r48;

        $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$6> = r43;

        $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: int label> = 3;

        r68 = (kotlin.coroutines.Continuation) $r42;

        $r26 = interfaceinvoke r43.<kotlinx.coroutines.sync.Mutex: java.lang.Object lock(java.lang.Object,kotlin.coroutines.Continuation)>(null, r68);

        if $r26 != r3 goto label13;

        return r3;

     label12:
        $r5 = $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$6>;

        $r55 = (kotlinx.coroutines.sync.Mutex) $r5;

        $r6 = $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$5>;

        r56 = (androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1) $r6;

        $r7 = $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$4>;

        r47 = (kotlin.jvm.internal.Ref$BooleanRef) $r7;

        $r8 = $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$3>;

        r44 = (kotlin.jvm.internal.Ref$ObjectRef) $r8;

        $r9 = $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$2>;

        r57 = (kotlinx.coroutines.sync.Mutex) $r9;

        $r10 = $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$1>;

        r41 = (kotlinx.coroutines.channels.ConflatedBroadcastChannel) $r10;

        $r11 = $r42.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$0>;

        r58 = (androidx.datastore.SingleProcessDataStore) $r11;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

     label13:
        r47.<kotlin.jvm.internal.Ref$BooleanRef: boolean element> = 1;

        r59 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        interfaceinvoke $r55.<kotlinx.coroutines.sync.Mutex: void unlock(java.lang.Object)>(null);

        goto label14;

     label14:
        $r15 = r41;

        r65 = new androidx.datastore.DataAndHash;

        $r13 = r44.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        $r60 = r44.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        if $r60 == null goto label15;

        $i5 = virtualinvoke $r60.<java.lang.Object: int hashCode()>();

        goto label16;

     label15:
        $i5 = 0;

     label16:
        specialinvoke r65.<androidx.datastore.DataAndHash: void <init>(java.lang.Object,int)>($r13, $i5);

        virtualinvoke $r15.<kotlinx.coroutines.channels.ConflatedBroadcastChannel: boolean offer(java.lang.Object)>(r65);

        $r14 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r14;

     label17:
        r66 = new java.lang.IllegalStateException;

        specialinvoke r66.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r66;
    }

    final java.lang.Object readDataOrHandleCorruption(kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r0, r22;
        androidx.datastore.CorruptionException r1;
        java.lang.Object r2, $r4, r5, $r7, $r8, $r9, $r17;
        java.lang.Throwable r3, $r11, $r12, $r13, $r14;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4;
        androidx.datastore.SingleProcessDataStore r15, r18, r19;
        androidx.datastore.SingleProcessDataStore$readDataOrHandleCorruption$1 $r16, r20;
        java.lang.IllegalStateException r21;

        r15 := @this: androidx.datastore.SingleProcessDataStore;

        $r0 := @parameter0: kotlin.coroutines.Continuation;

        $z0 = $r0 instanceof androidx.datastore.SingleProcessDataStore$readDataOrHandleCorruption$1;

        if $z0 == 0 goto label01;

        $r16 = (androidx.datastore.SingleProcessDataStore$readDataOrHandleCorruption$1) $r0;

        $i0 = $r16.<androidx.datastore.SingleProcessDataStore$readDataOrHandleCorruption$1: int label>;

        $i1 = $i0 & -2147483648;

        if $i1 == 0 goto label01;

        $i2 = $r16.<androidx.datastore.SingleProcessDataStore$readDataOrHandleCorruption$1: int label>;

        $i3 = $i2 - -2147483648;

        $r16.<androidx.datastore.SingleProcessDataStore$readDataOrHandleCorruption$1: int label> = $i3;

        goto label02;

     label01:
        r20 = new androidx.datastore.SingleProcessDataStore$readDataOrHandleCorruption$1;

        specialinvoke r20.<androidx.datastore.SingleProcessDataStore$readDataOrHandleCorruption$1: void <init>(androidx.datastore.SingleProcessDataStore,kotlin.coroutines.Continuation)>(r15, $r0);

        $r16 = r20;

     label02:
        $r4 = $r16.<androidx.datastore.SingleProcessDataStore$readDataOrHandleCorruption$1: java.lang.Object result>;

        r5 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i4 = $r16.<androidx.datastore.SingleProcessDataStore$readDataOrHandleCorruption$1: int label>;

        tableswitch($i4)
        {
            case 0: goto label03;
            case 1: goto label04;
            case 2: goto label06;
            default: goto label11;
        };

     label03:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

        $r16.<androidx.datastore.SingleProcessDataStore$readDataOrHandleCorruption$1: java.lang.Object L$0> = r15;

        $r16.<androidx.datastore.SingleProcessDataStore$readDataOrHandleCorruption$1: int label> = 1;

        r22 = (kotlin.coroutines.Continuation) $r16;

        $r17 = virtualinvoke r15.<androidx.datastore.SingleProcessDataStore: java.lang.Object readData(kotlin.coroutines.Continuation)>(r22);

        if $r17 != r5 goto label05;

        return r5;

     label04:
        $r9 = $r16.<androidx.datastore.SingleProcessDataStore$readDataOrHandleCorruption$1: java.lang.Object L$0>;

        r18 = (androidx.datastore.SingleProcessDataStore) $r9;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

        $r17 = $r4;

     label05:
        return $r17;

     label06:
        $r7 = $r16.<androidx.datastore.SingleProcessDataStore$readDataOrHandleCorruption$1: java.lang.Object L$1>;

        r1 = (androidx.datastore.CorruptionException) $r7;

        $r8 = $r16.<androidx.datastore.SingleProcessDataStore$readDataOrHandleCorruption$1: java.lang.Object L$0>;

        r19 = (androidx.datastore.SingleProcessDataStore) $r8;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

        r2 = $r4;

     label07:
        virtualinvoke r19.<androidx.datastore.SingleProcessDataStore: void writeData$datastore_core_release(java.lang.Object)>(r2);

     label08:
        goto label10;

     label09:
        $r11 := @caughtexception;

        r3 = $r11;

        $r13 = (java.lang.Throwable) r1;

        $r12 = (java.lang.Throwable) r3;

        staticinvoke <kotlin.ExceptionsKt: void addSuppressed(java.lang.Throwable,java.lang.Throwable)>($r13, $r12);

        $r14 = (java.lang.Throwable) r1;

        throw $r14;

     label10:
        return r2;

     label11:
        r21 = new java.lang.IllegalStateException;

        specialinvoke r21.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r21;

        catch java.io.IOException from label07 to label08 with label09;
    }

    final java.lang.Object readData(kotlin.coroutines.Continuation)
    {
        androidx.datastore.SingleProcessDataStore r0;
        kotlin.coroutines.Continuation $r1;
        java.lang.Object r2, $r21;
        java.io.FileInputStream $r3, r20;
        java.io.File $r4, $r9;
        java.io.InputStream $r5, $r12;
        androidx.datastore.Serializer $r6, $r13;
        java.lang.Throwable $r7, $r8, $r14, $r15, $r16, $r17, r19, r22, r23, r24, r25, r27, r30;
        boolean $z0, z1, z2, z4, z5;
        java.io.ByteArrayInputStream $r10, $r28;
        byte[] $r11;
        java.io.Closeable r18, r26;

        r0 := @this: androidx.datastore.SingleProcessDataStore;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

     label01:
        $r3 = new java.io.FileInputStream;

        $r4 = specialinvoke r0.<androidx.datastore.SingleProcessDataStore: java.io.File getFile()>();

        specialinvoke $r3.<java.io.FileInputStream: void <init>(java.io.File)>($r4);

        r18 = (java.io.Closeable) $r3;

        z1 = 0;

        z2 = 0;

        r19 = (java.lang.Throwable) null;

     label02:
        r20 = (java.io.FileInputStream) r18;

        $r6 = r0.<androidx.datastore.SingleProcessDataStore: androidx.datastore.Serializer serializer>;

        $r5 = (java.io.InputStream) r20;

        $r21 = interfaceinvoke $r6.<androidx.datastore.Serializer: java.lang.Object readFrom(java.io.InputStream)>($r5);

     label03:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r18, r19);

        return $r21;

     label04:
        $r17 := @caughtexception;

        r22 = $r17;

        r23 = r22;

        throw r22;

     label05:
        $r16 := @caughtexception;

        r24 = $r16;

     label06:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r18, r23);

        throw r24;

     label07:
        $r8 := @caughtexception;

        r25 = $r8;

        $r9 = specialinvoke r0.<androidx.datastore.SingleProcessDataStore: java.io.File getFile()>();

        $z0 = virtualinvoke $r9.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label08;

        $r14 = (java.lang.Throwable) r25;

        throw $r14;

     label08:
        $r10 = new java.io.ByteArrayInputStream;

        $r11 = newarray (byte)[0];

        specialinvoke $r10.<java.io.ByteArrayInputStream: void <init>(byte[])>($r11);

        r26 = (java.io.Closeable) $r10;

        z4 = 0;

        z5 = 0;

        r27 = (java.lang.Throwable) null;

     label09:
        $r28 = (java.io.ByteArrayInputStream) r26;

        $r13 = r0.<androidx.datastore.SingleProcessDataStore: androidx.datastore.Serializer serializer>;

        $r12 = (java.io.InputStream) $r28;

        r2 = interfaceinvoke $r13.<androidx.datastore.Serializer: java.lang.Object readFrom(java.io.InputStream)>($r12);

     label10:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r26, r27);

        return r2;

     label11:
        $r15 := @caughtexception;

        r30 = $r15;

        throw $r15;

     label12:
        $r7 := @caughtexception;

     label13:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r26, r30);

        throw $r7;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
        catch java.io.FileNotFoundException from label01 to label07 with label07;
    }

    final java.lang.Object transformAndWrite(kotlin.jvm.functions.Function2, kotlinx.coroutines.channels.ConflatedBroadcastChannel, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r0;
        java.lang.Object r1, r2, $r3, r4, $r6, $r7, $r8, $r9, $r13, r20, $r21, $r23;
        boolean z0, $z1, $z2;
        androidx.datastore.SingleProcessDataStore$transformAndWrite$1 $r5, $r18;
        androidx.datastore.DataAndHash $r10, r19;
        kotlinx.coroutines.channels.ConflatedBroadcastChannel $r12, r17;
        java.lang.IllegalStateException $r14;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        androidx.datastore.SingleProcessDataStore r15;
        kotlin.jvm.functions.Function2 r16, r22;

        r15 := @this: androidx.datastore.SingleProcessDataStore;

        r16 := @parameter0: kotlin.jvm.functions.Function2;

        r17 := @parameter1: kotlinx.coroutines.channels.ConflatedBroadcastChannel;

        $r0 := @parameter2: kotlin.coroutines.Continuation;

        $z1 = $r0 instanceof androidx.datastore.SingleProcessDataStore$transformAndWrite$1;

        if $z1 == 0 goto label01;

        $r18 = (androidx.datastore.SingleProcessDataStore$transformAndWrite$1) $r0;

        $i0 = $r18.<androidx.datastore.SingleProcessDataStore$transformAndWrite$1: int label>;

        $i1 = $i0 & -2147483648;

        if $i1 == 0 goto label01;

        $i2 = $r18.<androidx.datastore.SingleProcessDataStore$transformAndWrite$1: int label>;

        $i3 = $i2 - -2147483648;

        $r18.<androidx.datastore.SingleProcessDataStore$transformAndWrite$1: int label> = $i3;

        goto label02;

     label01:
        $r5 = new androidx.datastore.SingleProcessDataStore$transformAndWrite$1;

        specialinvoke $r5.<androidx.datastore.SingleProcessDataStore$transformAndWrite$1: void <init>(androidx.datastore.SingleProcessDataStore,kotlin.coroutines.Continuation)>(r15, $r0);

        $r18 = $r5;

     label02:
        $r3 = $r18.<androidx.datastore.SingleProcessDataStore$transformAndWrite$1: java.lang.Object result>;

        r4 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i4 = $r18.<androidx.datastore.SingleProcessDataStore$transformAndWrite$1: int label>;

        tableswitch($i4)
        {
            case 0: goto label03;
            case 1: goto label04;
            default: goto label10;
        };

     label03:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r3);

        $r13 = virtualinvoke r17.<kotlinx.coroutines.channels.ConflatedBroadcastChannel: java.lang.Object getValue()>();

        r19 = (androidx.datastore.DataAndHash) $r13;

        virtualinvoke r19.<androidx.datastore.DataAndHash: void checkHashCode()>();

        r20 = virtualinvoke r19.<androidx.datastore.DataAndHash: java.lang.Object getValue()>();

        $r18.<androidx.datastore.SingleProcessDataStore$transformAndWrite$1: java.lang.Object L$0> = r15;

        $r18.<androidx.datastore.SingleProcessDataStore$transformAndWrite$1: java.lang.Object L$1> = r16;

        $r18.<androidx.datastore.SingleProcessDataStore$transformAndWrite$1: java.lang.Object L$2> = r17;

        $r18.<androidx.datastore.SingleProcessDataStore$transformAndWrite$1: java.lang.Object L$3> = r19;

        $r18.<androidx.datastore.SingleProcessDataStore$transformAndWrite$1: java.lang.Object L$4> = r20;

        $r18.<androidx.datastore.SingleProcessDataStore$transformAndWrite$1: int label> = 1;

        $r21 = interfaceinvoke r16.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>(r20, $r18);

        if $r21 != r4 goto label05;

        return r4;

     label04:
        r20 = $r18.<androidx.datastore.SingleProcessDataStore$transformAndWrite$1: java.lang.Object L$4>;

        $r6 = $r18.<androidx.datastore.SingleProcessDataStore$transformAndWrite$1: java.lang.Object L$3>;

        r19 = (androidx.datastore.DataAndHash) $r6;

        $r7 = $r18.<androidx.datastore.SingleProcessDataStore$transformAndWrite$1: java.lang.Object L$2>;

        r17 = (kotlinx.coroutines.channels.ConflatedBroadcastChannel) $r7;

        $r8 = $r18.<androidx.datastore.SingleProcessDataStore$transformAndWrite$1: java.lang.Object L$1>;

        r22 = (kotlin.jvm.functions.Function2) $r8;

        $r9 = $r18.<androidx.datastore.SingleProcessDataStore$transformAndWrite$1: java.lang.Object L$0>;

        r15 = (androidx.datastore.SingleProcessDataStore) $r9;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r3);

        $r21 = $r3;

     label05:
        r1 = $r21;

        virtualinvoke r19.<androidx.datastore.DataAndHash: void checkHashCode()>();

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r20, r1);

        if $z2 == 0 goto label06;

        $r23 = r20;

        goto label09;

     label06:
        virtualinvoke r15.<androidx.datastore.SingleProcessDataStore: void writeData$datastore_core_release(java.lang.Object)>(r1);

        $r12 = r17;

        $r10 = new androidx.datastore.DataAndHash;

        r2 = r1;

        z0 = 0;

        if r2 == null goto label07;

        $i5 = virtualinvoke r2.<java.lang.Object: int hashCode()>();

        goto label08;

     label07:
        $i5 = 0;

     label08:
        specialinvoke $r10.<androidx.datastore.DataAndHash: void <init>(java.lang.Object,int)>(r1, $i5);

        virtualinvoke $r12.<kotlinx.coroutines.channels.ConflatedBroadcastChannel: boolean offer(java.lang.Object)>($r10);

        $r23 = r1;

     label09:
        return $r23;

     label10:
        $r14 = new java.lang.IllegalStateException;

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r14;
    }

    public final void writeData$datastore_core_release(java.lang.Object)
    {
        androidx.datastore.SingleProcessDataStore r0;
        java.lang.Object r1;
        java.io.File r2, $r3, $r4, $r6, $r16, $r21;
        boolean z0, $z2, $z3, z5;
        java.lang.StringBuilder $r5, $r8, $r10, $r18, $r19, $r20, $r22;
        java.lang.String $r7, $r9, $r11, $r23;
        java.io.FileOutputStream $r12, r31;
        java.io.OutputStream $r13;
        androidx.datastore.Serializer $r14;
        java.io.FileDescriptor $r15;
        java.io.IOException $r17;
        java.lang.Throwable $r24, $r25, $r26, $r27, $r28, r30, r33, r34, r35, r36;
        java.io.Closeable r29;
        kotlin.Unit r32;

        r0 := @this: androidx.datastore.SingleProcessDataStore;

        r1 := @parameter0: java.lang.Object;

        $r3 = specialinvoke r0.<androidx.datastore.SingleProcessDataStore: java.io.File getFile()>();

        specialinvoke r0.<androidx.datastore.SingleProcessDataStore: void createParentDirectories(java.io.File)>($r3);

        $r4 = new java.io.File;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = specialinvoke r0.<androidx.datastore.SingleProcessDataStore: java.io.File getFile()>();

        $r7 = virtualinvoke $r6.<java.io.File: java.lang.String getAbsolutePath()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = r0.<androidx.datastore.SingleProcessDataStore: java.lang.String SCRATCH_SUFFIX>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>($r11);

        r2 = $r4;

     label01:
        $r12 = new java.io.FileOutputStream;

        specialinvoke $r12.<java.io.FileOutputStream: void <init>(java.io.File)>(r2);

        r29 = (java.io.Closeable) $r12;

        z0 = 0;

        z5 = 0;

        r30 = (java.lang.Throwable) null;

     label02:
        r31 = (java.io.FileOutputStream) r29;

        $r14 = r0.<androidx.datastore.SingleProcessDataStore: androidx.datastore.Serializer serializer>;

        $r13 = (java.io.OutputStream) r31;

        interfaceinvoke $r14.<androidx.datastore.Serializer: void writeTo(java.lang.Object,java.io.OutputStream)>(r1, $r13);

        $r15 = virtualinvoke r31.<java.io.FileOutputStream: java.io.FileDescriptor getFD()>();

        virtualinvoke $r15.<java.io.FileDescriptor: void sync()>();

        r32 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label03:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r29, r30);

        goto label07;

     label04:
        $r28 := @caughtexception;

        r33 = $r28;

        r34 = r33;

        throw r33;

     label05:
        $r27 := @caughtexception;

        r35 = $r27;

     label06:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r29, r34);

        throw r35;

     label07:
        $r16 = specialinvoke r0.<androidx.datastore.SingleProcessDataStore: java.io.File getFile()>();

        $z2 = virtualinvoke r2.<java.io.File: boolean renameTo(java.io.File)>($r16);

        if $z2 != 0 goto label10;

        $r17 = new java.io.IOException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" could not be renamed to ");

        $r21 = specialinvoke r0.<androidx.datastore.SingleProcessDataStore: java.io.File getFile()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.io.IOException: void <init>(java.lang.String)>($r23);

        $r24 = (java.lang.Throwable) $r17;

        throw $r24;

     label08:
        $r25 := @caughtexception;

        r36 = $r25;

        $z3 = virtualinvoke r2.<java.io.File: boolean exists()>();

        if $z3 == 0 goto label09;

        virtualinvoke r2.<java.io.File: boolean delete()>();

     label09:
        $r26 = (java.lang.Throwable) r36;

        throw $r26;

     label10:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.io.IOException from label01 to label08 with label08;
    }

    private final void createParentDirectories(java.io.File)
    {
        androidx.datastore.SingleProcessDataStore r0;
        java.io.File $r1, r2, r3, r4, $r5;
        boolean z0, z1, $z4;
        java.io.IOException $r6;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.String $r10;
        java.lang.Throwable $r11;

        r0 := @this: androidx.datastore.SingleProcessDataStore;

        $r1 := @parameter0: java.io.File;

        $r5 = virtualinvoke $r1.<java.io.File: java.io.File getCanonicalFile()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "canonicalFile");

        r2 = virtualinvoke $r5.<java.io.File: java.io.File getParentFile()>();

        if r2 == null goto label2;

        r3 = r2;

        z0 = 0;

        z1 = 0;

        r4 = r3;

        virtualinvoke r4.<java.io.File: boolean mkdirs()>();

        $z4 = virtualinvoke r4.<java.io.File: boolean isDirectory()>();

        if $z4 != 0 goto label1;

        $r6 = new java.io.IOException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to create parent directories of ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r10);

        $r11 = (java.lang.Throwable) $r6;

        throw $r11;

     label1:
        goto label2;

     label2:
        return;
    }

    private final kotlinx.coroutines.channels.ConflatedBroadcastChannel downstreamChannel()
    {
        androidx.datastore.SingleProcessDataStore r0;
        java.util.concurrent.atomic.AtomicReference $r1;
        java.lang.Object $r2;
        kotlinx.coroutines.channels.ConflatedBroadcastChannel $r3;

        r0 := @this: androidx.datastore.SingleProcessDataStore;

        $r1 = staticinvoke <androidx.datastore.SingleProcessDataStore: java.util.concurrent.atomic.AtomicReference access$getDownstreamChannel$p(androidx.datastore.SingleProcessDataStore)>(r0);

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "downstreamChannel.get()");

        $r3 = (kotlinx.coroutines.channels.ConflatedBroadcastChannel) $r2;

        return $r3;
    }

    public void <init>(kotlin.jvm.functions.Function0, androidx.datastore.Serializer, java.util.List, androidx.datastore.CorruptionHandler, kotlinx.coroutines.CoroutineScope)
    {
        androidx.datastore.SingleProcessDataStore r0;
        kotlin.jvm.functions.Function0 r1, $r10;
        androidx.datastore.Serializer r2;
        java.util.List r3, $r15;
        androidx.datastore.CorruptionHandler r4;
        kotlinx.coroutines.CoroutineScope r5, $r17;
        androidx.datastore.SingleProcessDataStore$data$1 $r6;
        kotlin.jvm.functions.Function2 $r7, $r18;
        kotlinx.coroutines.flow.Flow $r8;
        androidx.datastore.SingleProcessDataStore$file$2 $r9;
        kotlin.Lazy $r11;
        java.util.concurrent.atomic.AtomicReference $r12;
        kotlinx.coroutines.channels.ConflatedBroadcastChannel $r13;
        java.lang.Iterable $r14;
        androidx.datastore.SingleProcessDataStore$actor$1 $r16;
        kotlinx.coroutines.channels.SendChannel $r19;

        r0 := @this: androidx.datastore.SingleProcessDataStore;

        r1 := @parameter0: kotlin.jvm.functions.Function0;

        r2 := @parameter1: androidx.datastore.Serializer;

        r3 := @parameter2: java.util.List;

        r4 := @parameter3: androidx.datastore.CorruptionHandler;

        r5 := @parameter4: kotlinx.coroutines.CoroutineScope;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "produceFile");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "serializer");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "initTasksList");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "corruptionHandler");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r5, "scope");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.datastore.SingleProcessDataStore: kotlin.jvm.functions.Function0 produceFile> = r1;

        r0.<androidx.datastore.SingleProcessDataStore: androidx.datastore.Serializer serializer> = r2;

        r0.<androidx.datastore.SingleProcessDataStore: androidx.datastore.CorruptionHandler corruptionHandler> = r4;

        r0.<androidx.datastore.SingleProcessDataStore: kotlinx.coroutines.CoroutineScope scope> = r5;

        $r6 = new androidx.datastore.SingleProcessDataStore$data$1;

        specialinvoke $r6.<androidx.datastore.SingleProcessDataStore$data$1: void <init>(androidx.datastore.SingleProcessDataStore,kotlin.coroutines.Continuation)>(r0, null);

        $r7 = (kotlin.jvm.functions.Function2) $r6;

        $r8 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow flow(kotlin.jvm.functions.Function2)>($r7);

        r0.<androidx.datastore.SingleProcessDataStore: kotlinx.coroutines.flow.Flow data> = $r8;

        r0.<androidx.datastore.SingleProcessDataStore: java.lang.String SCRATCH_SUFFIX> = ".tmp";

        $r9 = new androidx.datastore.SingleProcessDataStore$file$2;

        specialinvoke $r9.<androidx.datastore.SingleProcessDataStore$file$2: void <init>(androidx.datastore.SingleProcessDataStore)>(r0);

        $r10 = (kotlin.jvm.functions.Function0) $r9;

        $r11 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)>($r10);

        r0.<androidx.datastore.SingleProcessDataStore: kotlin.Lazy file$delegate> = $r11;

        $r12 = new java.util.concurrent.atomic.AtomicReference;

        $r13 = new kotlinx.coroutines.channels.ConflatedBroadcastChannel;

        specialinvoke $r13.<kotlinx.coroutines.channels.ConflatedBroadcastChannel: void <init>()>();

        specialinvoke $r12.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>($r13);

        r0.<androidx.datastore.SingleProcessDataStore: java.util.concurrent.atomic.AtomicReference downstreamChannel> = $r12;

        $r14 = (java.lang.Iterable) r3;

        $r15 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List toList(java.lang.Iterable)>($r14);

        r0.<androidx.datastore.SingleProcessDataStore: java.util.List initTasks> = $r15;

        $r17 = r0.<androidx.datastore.SingleProcessDataStore: kotlinx.coroutines.CoroutineScope scope>;

        $r16 = new androidx.datastore.SingleProcessDataStore$actor$1;

        specialinvoke $r16.<androidx.datastore.SingleProcessDataStore$actor$1: void <init>(androidx.datastore.SingleProcessDataStore,kotlin.coroutines.Continuation)>(r0, null);

        $r18 = (kotlin.jvm.functions.Function2) $r16;

        $r19 = staticinvoke <kotlinx.coroutines.channels.ActorKt: kotlinx.coroutines.channels.SendChannel actor$default(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,int,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function2,int,java.lang.Object)>($r17, null, 2147483647, null, null, $r18, 13, null);

        r0.<androidx.datastore.SingleProcessDataStore: kotlinx.coroutines.channels.SendChannel actor> = $r19;

        return;
    }

    public void <init>(kotlin.jvm.functions.Function0, androidx.datastore.Serializer, java.util.List, androidx.datastore.CorruptionHandler, kotlinx.coroutines.CoroutineScope, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.datastore.SingleProcessDataStore r0;
        kotlin.jvm.functions.Function0 r1;
        androidx.datastore.Serializer r2;
        int i0, $i1, $i2, $i3;
        kotlin.jvm.internal.DefaultConstructorMarker r3;
        kotlinx.coroutines.CoroutineDispatcher $r4;
        kotlinx.coroutines.CompletableJob $r5;
        kotlin.coroutines.CoroutineContext $r6, $r7;
        androidx.datastore.handlers.NoOpCorruptionHandler $r8;
        java.util.List r9;
        androidx.datastore.CorruptionHandler r10;
        kotlinx.coroutines.CoroutineScope r11;

        r0 := @this: androidx.datastore.SingleProcessDataStore;

        r1 := @parameter0: kotlin.jvm.functions.Function0;

        r2 := @parameter1: androidx.datastore.Serializer;

        r9 := @parameter2: java.util.List;

        r10 := @parameter3: androidx.datastore.CorruptionHandler;

        r11 := @parameter4: kotlinx.coroutines.CoroutineScope;

        i0 := @parameter5: int;

        r3 := @parameter6: kotlin.jvm.internal.DefaultConstructorMarker;

        $i1 = i0 & 4;

        if $i1 == 0 goto label1;

        r9 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

     label1:
        $i2 = i0 & 8;

        if $i2 == 0 goto label2;

        $r8 = new androidx.datastore.handlers.NoOpCorruptionHandler;

        specialinvoke $r8.<androidx.datastore.handlers.NoOpCorruptionHandler: void <init>()>();

        r10 = (androidx.datastore.CorruptionHandler) $r8;

     label2:
        $i3 = i0 & 16;

        if $i3 == 0 goto label3;

        $r4 = staticinvoke <kotlinx.coroutines.Dispatchers: kotlinx.coroutines.CoroutineDispatcher getIO()>();

        $r5 = staticinvoke <kotlinx.coroutines.SupervisorKt: kotlinx.coroutines.CompletableJob SupervisorJob$default(kotlinx.coroutines.Job,int,java.lang.Object)>(null, 1, null);

        $r6 = (kotlin.coroutines.CoroutineContext) $r5;

        $r7 = virtualinvoke $r4.<kotlinx.coroutines.CoroutineDispatcher: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>($r6);

        r11 = staticinvoke <kotlinx.coroutines.CoroutineScopeKt: kotlinx.coroutines.CoroutineScope CoroutineScope(kotlin.coroutines.CoroutineContext)>($r7);

     label3:
        specialinvoke r0.<androidx.datastore.SingleProcessDataStore: void <init>(kotlin.jvm.functions.Function0,androidx.datastore.Serializer,java.util.List,androidx.datastore.CorruptionHandler,kotlinx.coroutines.CoroutineScope)>(r1, r2, r9, r10, r11);

        return;
    }

    public static final java.util.concurrent.atomic.AtomicReference access$getDownstreamChannel$p(androidx.datastore.SingleProcessDataStore)
    {
        androidx.datastore.SingleProcessDataStore $r0;
        java.util.concurrent.atomic.AtomicReference $r1;

        $r0 := @parameter0: androidx.datastore.SingleProcessDataStore;

        $r1 = $r0.<androidx.datastore.SingleProcessDataStore: java.util.concurrent.atomic.AtomicReference downstreamChannel>;

        return $r1;
    }

    public static final kotlinx.coroutines.channels.ConflatedBroadcastChannel access$downstreamChannel(androidx.datastore.SingleProcessDataStore)
    {
        androidx.datastore.SingleProcessDataStore $r0;
        kotlinx.coroutines.channels.ConflatedBroadcastChannel $r1;

        $r0 := @parameter0: androidx.datastore.SingleProcessDataStore;

        $r1 = specialinvoke $r0.<androidx.datastore.SingleProcessDataStore: kotlinx.coroutines.channels.ConflatedBroadcastChannel downstreamChannel()>();

        return $r1;
    }

    public static final kotlinx.coroutines.channels.SendChannel access$getActor$p(androidx.datastore.SingleProcessDataStore)
    {
        androidx.datastore.SingleProcessDataStore $r0;
        kotlinx.coroutines.channels.SendChannel $r1;

        $r0 := @parameter0: androidx.datastore.SingleProcessDataStore;

        $r1 = $r0.<androidx.datastore.SingleProcessDataStore: kotlinx.coroutines.channels.SendChannel actor>;

        return $r1;
    }

    public static final kotlin.jvm.functions.Function0 access$getProduceFile$p(androidx.datastore.SingleProcessDataStore)
    {
        androidx.datastore.SingleProcessDataStore $r0;
        kotlin.jvm.functions.Function0 $r1;

        $r0 := @parameter0: androidx.datastore.SingleProcessDataStore;

        $r1 = $r0.<androidx.datastore.SingleProcessDataStore: kotlin.jvm.functions.Function0 produceFile>;

        return $r1;
    }

    public static final void access$resetDataChannel(androidx.datastore.SingleProcessDataStore, java.lang.Throwable)
    {
        androidx.datastore.SingleProcessDataStore $r0;
        java.lang.Throwable r1;

        $r0 := @parameter0: androidx.datastore.SingleProcessDataStore;

        r1 := @parameter1: java.lang.Throwable;

        specialinvoke $r0.<androidx.datastore.SingleProcessDataStore: void resetDataChannel(java.lang.Throwable)>(r1);

        return;
    }

androidx.datastore.SingleProcessDataStore$actor$1
<androidx.datastore.SingleProcessDataStore$actor$1: kotlinx.coroutines.channels.ActorScope p$>
<androidx.datastore.SingleProcessDataStore$actor$1: java.lang.Object L$0>
<androidx.datastore.SingleProcessDataStore$actor$1: java.lang.Object L$1>
<androidx.datastore.SingleProcessDataStore$actor$1: java.lang.Object L$2>
<androidx.datastore.SingleProcessDataStore$actor$1: java.lang.Object L$3>
<androidx.datastore.SingleProcessDataStore$actor$1: java.lang.Object L$4>
<androidx.datastore.SingleProcessDataStore$actor$1: int label>
<androidx.datastore.SingleProcessDataStore$actor$1: androidx.datastore.SingleProcessDataStore this$0>
    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.datastore.SingleProcessDataStore$actor$1 r0;
        java.lang.Object $r1, r2, r3, $r4, $r5, $r6, $r7, $r8, $r11, $r15, $r19, $r25, $r27, $r28, $r29, $r30, $r31, $r37, $r40, $r45, $r52, r55;
        boolean z0, $z3, $z4, $z5, z8, z10;
        int $i0;
        java.lang.Boolean $r9;
        java.util.concurrent.atomic.AtomicReference $r10, $r24, $r39;
        kotlinx.coroutines.channels.ConflatedBroadcastChannel $r12, $r16, $r18, $r26, $r41;
        kotlinx.coroutines.channels.BroadcastChannel $r13, $r42;
        kotlin.Unit $r14;
        androidx.datastore.SingleProcessDataStore $r17, $r22, $r35, r51, r57, $r59;
        androidx.datastore.SingleProcessDataStore$Message$Update $r20, $r21;
        kotlin.jvm.functions.Function2 $r23;
        kotlinx.coroutines.channels.Channel $r32;
        java.lang.Throwable $r34, $r36, $r38, r47, r58;
        kotlinx.coroutines.channels.ActorScope $r43, r48, $r53;
        kotlinx.coroutines.channels.ChannelIterator $r44;
        androidx.datastore.SingleProcessDataStore$Message r46, r54;
        kotlinx.coroutines.CompletableDeferred r49;
        kotlin.Result$Companion r50, $r56;
        java.lang.IllegalStateException r60;
        kotlin.coroutines.Continuation r61, r62, r63;

        r0 := @this: androidx.datastore.SingleProcessDataStore$actor$1;

        $r1 := @parameter0: java.lang.Object;

        r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.datastore.SingleProcessDataStore$actor$1: int label>;

        tableswitch($i0)
        {
            case 0: goto label01;
            case 1: goto label05;
            case 2: goto label10;
            case 3: goto label17;
            default: goto label28;
        };

     label01:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r43 = r0.<androidx.datastore.SingleProcessDataStore$actor$1: kotlinx.coroutines.channels.ActorScope p$>;

     label02:
        $r32 = interfaceinvoke $r43.<kotlinx.coroutines.channels.ActorScope: kotlinx.coroutines.channels.Channel getChannel()>();

        $r44 = interfaceinvoke $r32.<kotlinx.coroutines.channels.Channel: kotlinx.coroutines.channels.ChannelIterator iterator()>();

     label03:
        r0.<androidx.datastore.SingleProcessDataStore$actor$1: java.lang.Object L$0> = $r43;

        r0.<androidx.datastore.SingleProcessDataStore$actor$1: java.lang.Object L$1> = $r44;

        r0.<androidx.datastore.SingleProcessDataStore$actor$1: int label> = 1;

        r61 = (kotlin.coroutines.Continuation) r0;

        $r45 = interfaceinvoke $r44.<kotlinx.coroutines.channels.ChannelIterator: java.lang.Object hasNext(kotlin.coroutines.Continuation)>(r61);

     label04:
        if $r45 != r3 goto label07;

        return r3;

     label05:
        $r30 = r0.<androidx.datastore.SingleProcessDataStore$actor$1: java.lang.Object L$1>;

        $r44 = (kotlinx.coroutines.channels.ChannelIterator) $r30;

        $r31 = r0.<androidx.datastore.SingleProcessDataStore$actor$1: java.lang.Object L$0>;

        $r43 = (kotlinx.coroutines.channels.ActorScope) $r31;

     label06:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r45 = $r1;

     label07:
        $r9 = (java.lang.Boolean) $r45;

        $z3 = virtualinvoke $r9.<java.lang.Boolean: boolean booleanValue()>();

        if $z3 == 0 goto label24;

        $r15 = interfaceinvoke $r44.<kotlinx.coroutines.channels.ChannelIterator: java.lang.Object next()>();

        r46 = (androidx.datastore.SingleProcessDataStore$Message) $r15;

        $r16 = virtualinvoke r46.<androidx.datastore.SingleProcessDataStore$Message: kotlinx.coroutines.channels.ConflatedBroadcastChannel getDataChannel()>();

        $z4 = virtualinvoke $r16.<kotlinx.coroutines.channels.ConflatedBroadcastChannel: boolean isClosedForSend()>();

        if $z4 == 0 goto label08;

        goto label23;

     label08:
        $r17 = r0.<androidx.datastore.SingleProcessDataStore$actor$1: androidx.datastore.SingleProcessDataStore this$0>;

        $r18 = virtualinvoke r46.<androidx.datastore.SingleProcessDataStore$Message: kotlinx.coroutines.channels.ConflatedBroadcastChannel getDataChannel()>();

        r0.<androidx.datastore.SingleProcessDataStore$actor$1: java.lang.Object L$0> = $r43;

        r0.<androidx.datastore.SingleProcessDataStore$actor$1: java.lang.Object L$1> = r46;

        r0.<androidx.datastore.SingleProcessDataStore$actor$1: java.lang.Object L$2> = $r44;

        r0.<androidx.datastore.SingleProcessDataStore$actor$1: int label> = 2;

        r62 = (kotlin.coroutines.Continuation) r0;

        $r19 = virtualinvoke $r17.<androidx.datastore.SingleProcessDataStore: java.lang.Object readAndInitOnce(kotlinx.coroutines.channels.ConflatedBroadcastChannel,kotlin.coroutines.Continuation)>($r18, r62);

     label09:
        if $r19 != r3 goto label12;

        return r3;

     label10:
        $r27 = r0.<androidx.datastore.SingleProcessDataStore$actor$1: java.lang.Object L$2>;

        $r44 = (kotlinx.coroutines.channels.ChannelIterator) $r27;

        $r28 = r0.<androidx.datastore.SingleProcessDataStore$actor$1: java.lang.Object L$1>;

        r46 = (androidx.datastore.SingleProcessDataStore$Message) $r28;

        $r29 = r0.<androidx.datastore.SingleProcessDataStore$actor$1: java.lang.Object L$0>;

        $r43 = (kotlinx.coroutines.channels.ActorScope) $r29;

     label11:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label12:
        goto label14;

     label13:
        $r34 := @caughtexception;

        r47 = $r34;

        $r35 = r0.<androidx.datastore.SingleProcessDataStore$actor$1: androidx.datastore.SingleProcessDataStore this$0>;

        staticinvoke <androidx.datastore.SingleProcessDataStore: void access$resetDataChannel(androidx.datastore.SingleProcessDataStore,java.lang.Throwable)>($r35, r47);

        goto label23;

     label14:
        $z5 = r46 instanceof androidx.datastore.SingleProcessDataStore$Message$Update;

        if $z5 == 0 goto label23;

        $r20 = (androidx.datastore.SingleProcessDataStore$Message$Update) r46;

        r48 = $r43;

        r49 = virtualinvoke $r20.<androidx.datastore.SingleProcessDataStore$Message$Update: kotlinx.coroutines.CompletableDeferred getAck()>();

        z0 = 0;

     label15:
        r50 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r22 = r0.<androidx.datastore.SingleProcessDataStore$actor$1: androidx.datastore.SingleProcessDataStore this$0>;

        $r21 = (androidx.datastore.SingleProcessDataStore$Message$Update) r46;

        $r23 = virtualinvoke $r21.<androidx.datastore.SingleProcessDataStore$Message$Update: kotlin.jvm.functions.Function2 getTransform()>();

        r51 = r0.<androidx.datastore.SingleProcessDataStore$actor$1: androidx.datastore.SingleProcessDataStore this$0>;

        $r24 = staticinvoke <androidx.datastore.SingleProcessDataStore: java.util.concurrent.atomic.AtomicReference access$getDownstreamChannel$p(androidx.datastore.SingleProcessDataStore)>(r51);

        $r25 = virtualinvoke $r24.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r25, "downstreamChannel.get()");

        $r26 = (kotlinx.coroutines.channels.ConflatedBroadcastChannel) $r25;

        r0.<androidx.datastore.SingleProcessDataStore$actor$1: java.lang.Object L$0> = $r43;

        r0.<androidx.datastore.SingleProcessDataStore$actor$1: java.lang.Object L$1> = r46;

        r0.<androidx.datastore.SingleProcessDataStore$actor$1: java.lang.Object L$2> = $r44;

        r0.<androidx.datastore.SingleProcessDataStore$actor$1: java.lang.Object L$3> = r48;

        r0.<androidx.datastore.SingleProcessDataStore$actor$1: java.lang.Object L$4> = r49;

        r0.<androidx.datastore.SingleProcessDataStore$actor$1: int label> = 3;

        r63 = (kotlin.coroutines.Continuation) r0;

        $r52 = virtualinvoke $r22.<androidx.datastore.SingleProcessDataStore: java.lang.Object transformAndWrite(kotlin.jvm.functions.Function2,kotlinx.coroutines.channels.ConflatedBroadcastChannel,kotlin.coroutines.Continuation)>($r23, $r26, r63);

     label16:
        if $r52 != r3 goto label19;

        return r3;

     label17:
        $r4 = r0.<androidx.datastore.SingleProcessDataStore$actor$1: java.lang.Object L$4>;

        r49 = (kotlinx.coroutines.CompletableDeferred) $r4;

        $r5 = r0.<androidx.datastore.SingleProcessDataStore$actor$1: java.lang.Object L$3>;

        $r53 = (kotlinx.coroutines.channels.ActorScope) $r5;

        $r6 = r0.<androidx.datastore.SingleProcessDataStore$actor$1: java.lang.Object L$2>;

        $r44 = (kotlinx.coroutines.channels.ChannelIterator) $r6;

        $r7 = r0.<androidx.datastore.SingleProcessDataStore$actor$1: java.lang.Object L$1>;

        r54 = (androidx.datastore.SingleProcessDataStore$Message) $r7;

        $r8 = r0.<androidx.datastore.SingleProcessDataStore$actor$1: java.lang.Object L$0>;

        $r43 = (kotlinx.coroutines.channels.ActorScope) $r8;

     label18:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r52 = $r1;

     label19:
        r55 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r52);

     label20:
        goto label22;

     label21:
        $r36 := @caughtexception;

        $r56 = <kotlin.Result: kotlin.Result$Companion Companion>;

        z8 = 0;

        $r37 = staticinvoke <kotlin.ResultKt: java.lang.Object createFailure(java.lang.Throwable)>($r36);

        r55 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r37);

     label22:
        r2 = r55;

        staticinvoke <kotlinx.coroutines.CompletableDeferredKt: boolean completeWith(kotlinx.coroutines.CompletableDeferred,java.lang.Object)>(r49, r2);

     label23:
        goto label03;

     label24:
        r57 = r0.<androidx.datastore.SingleProcessDataStore$actor$1: androidx.datastore.SingleProcessDataStore this$0>;

        $r10 = staticinvoke <androidx.datastore.SingleProcessDataStore: java.util.concurrent.atomic.AtomicReference access$getDownstreamChannel$p(androidx.datastore.SingleProcessDataStore)>(r57);

        $r11 = virtualinvoke $r10.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r11, "downstreamChannel.get()");

        $r12 = (kotlinx.coroutines.channels.ConflatedBroadcastChannel) $r11;

        $r13 = (kotlinx.coroutines.channels.BroadcastChannel) $r12;

        staticinvoke <kotlinx.coroutines.channels.BroadcastChannel$DefaultImpls: void cancel$default(kotlinx.coroutines.channels.BroadcastChannel,java.util.concurrent.CancellationException,int,java.lang.Object)>($r13, null, 1, null);

        goto label27;

     label25:
        $r38 := @caughtexception;

        r58 = $r38;

     label26:
        $r59 = r0.<androidx.datastore.SingleProcessDataStore$actor$1: androidx.datastore.SingleProcessDataStore this$0>;

        z10 = 0;

        $r39 = staticinvoke <androidx.datastore.SingleProcessDataStore: java.util.concurrent.atomic.AtomicReference access$getDownstreamChannel$p(androidx.datastore.SingleProcessDataStore)>($r59);

        $r40 = virtualinvoke $r39.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r40, "downstreamChannel.get()");

        $r41 = (kotlinx.coroutines.channels.ConflatedBroadcastChannel) $r40;

        $r42 = (kotlinx.coroutines.channels.BroadcastChannel) $r41;

        staticinvoke <kotlinx.coroutines.channels.BroadcastChannel$DefaultImpls: void cancel$default(kotlinx.coroutines.channels.BroadcastChannel,java.util.concurrent.CancellationException,int,java.lang.Object)>($r42, null, 1, null);

        throw r58;

     label27:
        $r14 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r14;

     label28:
        r60 = new java.lang.IllegalStateException;

        specialinvoke r60.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r60;

        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label15 to label16 with label21;
        catch java.lang.Throwable from label18 to label20 with label21;
        catch java.lang.Throwable from label02 to label04 with label25;
        catch java.lang.Throwable from label06 to label09 with label25;
        catch java.lang.Throwable from label11 to label16 with label25;
        catch java.lang.Throwable from label18 to label24 with label25;
        catch java.lang.Throwable from label25 to label26 with label25;
    }

    void <init>(androidx.datastore.SingleProcessDataStore, kotlin.coroutines.Continuation)
    {
        androidx.datastore.SingleProcessDataStore$actor$1 r0;
        androidx.datastore.SingleProcessDataStore r1;
        kotlin.coroutines.Continuation r2;

        r0 := @this: androidx.datastore.SingleProcessDataStore$actor$1;

        r1 := @parameter0: androidx.datastore.SingleProcessDataStore;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.datastore.SingleProcessDataStore$actor$1: androidx.datastore.SingleProcessDataStore this$0> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, r2);

        return;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.datastore.SingleProcessDataStore$actor$1 r0, r3, r8;
        java.lang.Object r1;
        kotlin.coroutines.Continuation r2, r9;
        androidx.datastore.SingleProcessDataStore $r5;
        kotlinx.coroutines.channels.ActorScope $r6, $r7;

        r0 := @this: androidx.datastore.SingleProcessDataStore$actor$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "completion");

        r8 = new androidx.datastore.SingleProcessDataStore$actor$1;

        $r5 = r0.<androidx.datastore.SingleProcessDataStore$actor$1: androidx.datastore.SingleProcessDataStore this$0>;

        specialinvoke r8.<androidx.datastore.SingleProcessDataStore$actor$1: void <init>(androidx.datastore.SingleProcessDataStore,kotlin.coroutines.Continuation)>($r5, r2);

        r3 = r8;

        $r7 = (kotlinx.coroutines.channels.ActorScope) r1;

        $r6 = (kotlinx.coroutines.channels.ActorScope) r1;

        r3.<androidx.datastore.SingleProcessDataStore$actor$1: kotlinx.coroutines.channels.ActorScope p$> = $r6;

        r9 = (kotlin.coroutines.Continuation) r3;

        return r9;
    }

    public final java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.datastore.SingleProcessDataStore$actor$1 r0, $r6;
        java.lang.Object r1, r2, $r7;
        kotlin.coroutines.Continuation $r3, $r4;
        kotlin.Unit $r5;

        r0 := @this: androidx.datastore.SingleProcessDataStore$actor$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = (kotlin.coroutines.Continuation) r2;

        $r4 = virtualinvoke r0.<androidx.datastore.SingleProcessDataStore$actor$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, $r3);

        $r6 = (androidx.datastore.SingleProcessDataStore$actor$1) $r4;

        $r5 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r7 = virtualinvoke $r6.<androidx.datastore.SingleProcessDataStore$actor$1: java.lang.Object invokeSuspend(java.lang.Object)>($r5);

        return $r7;
    }

androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1
<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: java.lang.Object result>
<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: int label>
<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: java.lang.Object L$0>
<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: java.lang.Object L$1>
<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: java.lang.Object L$2>
<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: java.lang.Object L$3>
<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: java.lang.Object L$4>
<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: java.lang.Object L$5>
<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: java.lang.Object L$6>
<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: java.lang.Object L$7>
<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2 this$0>
    public void <init>(androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2, kotlin.coroutines.Continuation)
    {
        androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1 r0;
        androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2 r1;
        kotlin.coroutines.Continuation r2;

        r0 := @this: androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1;

        r1 := @parameter0: androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2 this$0> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>(r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1 r0;
        java.lang.Object $r1, $r3;
        int $i0, $i1;
        androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2 $r2;
        kotlin.coroutines.Continuation r4;

        r0 := @this: androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: java.lang.Object result> = $r1;

        $i0 = r0.<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: int label>;

        $i1 = $i0 | -2147483648;

        r0.<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: int label> = $i1;

        $r2 = r0.<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2 this$0>;

        r4 = (kotlin.coroutines.Continuation) r0;

        $r3 = virtualinvoke $r2.<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2: java.lang.Object emit(java.lang.Object,kotlin.coroutines.Continuation)>(null, r4);

        return $r3;
    }

androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2
<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2: kotlinx.coroutines.flow.FlowCollector $this_unsafeFlow$inlined>
<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2: androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1 this$0>
    public void <init>(kotlinx.coroutines.flow.FlowCollector, androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1)
    {
        androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2 r0;
        kotlinx.coroutines.flow.FlowCollector r1;
        androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1 r2;

        r0 := @this: androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2;

        r1 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        r2 := @parameter1: androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1;

        r0.<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2: kotlinx.coroutines.flow.FlowCollector $this_unsafeFlow$inlined> = r1;

        r0.<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2: androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1 this$0> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object emit(java.lang.Object, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r0, r4, r32;
        java.lang.Object $r1, r2, r6, $r8, $r9, $r10, $r11, $r13, r16, r19, r21, r24, r26, r28;
        kotlinx.coroutines.flow.FlowCollector r3, $r22, $r23;
        androidx.datastore.DataAndHash r5;
        boolean $z3;
        kotlin.Unit $r12;
        int $i0, $i1, $i2, $i3, $i4;
        androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2 r15, r29;
        androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1 $r17, r18, r20, r25, r27, r30;
        java.lang.IllegalStateException r31;

        r15 := @this: androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2;

        r16 := @parameter0: java.lang.Object;

        $r0 := @parameter1: kotlin.coroutines.Continuation;

        $z3 = $r0 instanceof androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1;

        if $z3 == 0 goto label1;

        $r17 = (androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1) $r0;

        $i0 = $r17.<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: int label>;

        $i1 = $i0 & -2147483648;

        if $i1 == 0 goto label1;

        $i2 = $r17.<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: int label>;

        $i3 = $i2 - -2147483648;

        $r17.<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: int label> = $i3;

        goto label2;

     label1:
        r30 = new androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1;

        specialinvoke r30.<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: void <init>(androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2,kotlin.coroutines.Continuation)>(r15, $r0);

        $r17 = r30;

     label2:
        $r1 = $r17.<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: java.lang.Object result>;

        r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i4 = $r17.<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: int label>;

        tableswitch($i4)
        {
            case 0: goto label3;
            case 1: goto label4;
            default: goto label6;
        };

     label3:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        r18 = $r17;

        r19 = r16;

        r20 = $r17;

        r21 = r19;

        $r22 = r15.<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2: kotlinx.coroutines.flow.FlowCollector $this_unsafeFlow$inlined>;

        r3 = $r22;

        r4 = (kotlin.coroutines.Continuation) $r17;

        r5 = (androidx.datastore.DataAndHash) r21;

        r6 = virtualinvoke r5.<androidx.datastore.DataAndHash: java.lang.Object getValue()>();

        $r17.<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: java.lang.Object L$0> = r15;

        $r17.<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: java.lang.Object L$1> = r16;

        $r17.<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: java.lang.Object L$2> = r18;

        $r17.<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: java.lang.Object L$3> = r19;

        $r17.<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: java.lang.Object L$4> = r20;

        $r17.<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: java.lang.Object L$5> = r21;

        $r17.<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: java.lang.Object L$6> = $r22;

        $r17.<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: int label> = 1;

        r32 = (kotlin.coroutines.Continuation) $r17;

        $r13 = interfaceinvoke r3.<kotlinx.coroutines.flow.FlowCollector: java.lang.Object emit(java.lang.Object,kotlin.coroutines.Continuation)>(r6, r32);

        if $r13 != r2 goto label5;

        return r2;

     label4:
        $r8 = $r17.<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: java.lang.Object L$6>;

        $r23 = (kotlinx.coroutines.flow.FlowCollector) $r8;

        r24 = $r17.<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: java.lang.Object L$5>;

        $r9 = $r17.<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: java.lang.Object L$4>;

        r25 = (androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1) $r9;

        r26 = $r17.<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: java.lang.Object L$3>;

        $r10 = $r17.<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: java.lang.Object L$2>;

        r27 = (androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1) $r10;

        r28 = $r17.<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: java.lang.Object L$1>;

        $r11 = $r17.<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2$1: java.lang.Object L$0>;

        r29 = (androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2) $r11;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label5:
        $r12 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r12;

     label6:
        r31 = new java.lang.IllegalStateException;

        specialinvoke r31.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r31;
    }

androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1
<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1: kotlinx.coroutines.flow.Flow $this_unsafeTransform$inlined>
    public void <init>(kotlinx.coroutines.flow.Flow)
    {
        androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1 r0;
        kotlinx.coroutines.flow.Flow r1;

        r0 := @this: androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1;

        r1 := @parameter0: kotlinx.coroutines.flow.Flow;

        r0.<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1: kotlinx.coroutines.flow.Flow $this_unsafeTransform$inlined> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation)
    {
        androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1 r0;
        kotlinx.coroutines.flow.FlowCollector r1, $r7;
        kotlin.coroutines.Continuation $r2, r3, r5;
        kotlinx.coroutines.flow.Flow $r4;
        androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2 $r6;
        java.lang.Object $r8, $r9;
        kotlin.Unit $r10;

        r0 := @this: androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1;

        r1 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r3 = $r2;

        $r4 = r0.<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1: kotlinx.coroutines.flow.Flow $this_unsafeTransform$inlined>;

        r5 = $r2;

        $r6 = new androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2;

        specialinvoke $r6.<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1$2: void <init>(kotlinx.coroutines.flow.FlowCollector,androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1)>(r1, r0);

        $r7 = (kotlinx.coroutines.flow.FlowCollector) $r6;

        $r8 = interfaceinvoke $r4.<kotlinx.coroutines.flow.Flow: java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)>($r7, r5);

        $r9 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r8 != $r9 goto label1;

        return $r8;

     label1:
        $r10 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r10;
    }

androidx.datastore.SingleProcessDataStore$data$1
<androidx.datastore.SingleProcessDataStore$data$1: kotlinx.coroutines.flow.FlowCollector p$>
<androidx.datastore.SingleProcessDataStore$data$1: java.lang.Object L$0>
<androidx.datastore.SingleProcessDataStore$data$1: java.lang.Object L$1>
<androidx.datastore.SingleProcessDataStore$data$1: java.lang.Object L$2>
<androidx.datastore.SingleProcessDataStore$data$1: java.lang.Object L$3>
<androidx.datastore.SingleProcessDataStore$data$1: int label>
<androidx.datastore.SingleProcessDataStore$data$1: androidx.datastore.SingleProcessDataStore this$0>
    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.datastore.SingleProcessDataStore$data$1 r0;
        java.lang.Object $r1, r2, $r3, $r4, $r5, $r6, $r9, $r15;
        int $i0;
        kotlin.Unit $r7;
        java.util.concurrent.atomic.AtomicReference $r8;
        androidx.datastore.SingleProcessDataStore $r10, r18;
        kotlinx.coroutines.channels.SendChannel $r11;
        kotlinx.coroutines.channels.BroadcastChannel $r13;
        kotlinx.coroutines.flow.FlowCollector $r17, r20, r24, $r26;
        kotlinx.coroutines.channels.ConflatedBroadcastChannel r19, r25;
        kotlinx.coroutines.flow.Flow $r21, $r22, $r23;
        androidx.datastore.SingleProcessDataStore$Message$Read r27;
        androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1 r28;
        java.lang.IllegalStateException r29;
        kotlin.coroutines.Continuation r30;

        r0 := @this: androidx.datastore.SingleProcessDataStore$data$1;

        $r1 := @parameter0: java.lang.Object;

        r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.datastore.SingleProcessDataStore$data$1: int label>;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label4;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r17 = r0.<androidx.datastore.SingleProcessDataStore$data$1: kotlinx.coroutines.flow.FlowCollector p$>;

        r18 = r0.<androidx.datastore.SingleProcessDataStore$data$1: androidx.datastore.SingleProcessDataStore this$0>;

        $r8 = staticinvoke <androidx.datastore.SingleProcessDataStore: java.util.concurrent.atomic.AtomicReference access$getDownstreamChannel$p(androidx.datastore.SingleProcessDataStore)>(r18);

        $r9 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r9, "downstreamChannel.get()");

        r19 = (kotlinx.coroutines.channels.ConflatedBroadcastChannel) $r9;

        $r10 = r0.<androidx.datastore.SingleProcessDataStore$data$1: androidx.datastore.SingleProcessDataStore this$0>;

        $r11 = staticinvoke <androidx.datastore.SingleProcessDataStore: kotlinx.coroutines.channels.SendChannel access$getActor$p(androidx.datastore.SingleProcessDataStore)>($r10);

        r27 = new androidx.datastore.SingleProcessDataStore$Message$Read;

        specialinvoke r27.<androidx.datastore.SingleProcessDataStore$Message$Read: void <init>(kotlinx.coroutines.channels.ConflatedBroadcastChannel)>(r19);

        interfaceinvoke $r11.<kotlinx.coroutines.channels.SendChannel: boolean offer(java.lang.Object)>(r27);

        r20 = $r17;

        $r13 = (kotlinx.coroutines.channels.BroadcastChannel) r19;

        $r21 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow asFlow(kotlinx.coroutines.channels.BroadcastChannel)>($r13);

        r28 = new androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1;

        specialinvoke r28.<androidx.datastore.SingleProcessDataStore$data$1$invokeSuspend$$inlined$map$1: void <init>(kotlinx.coroutines.flow.Flow)>($r21);

        $r22 = (kotlinx.coroutines.flow.Flow) r28;

        r0.<androidx.datastore.SingleProcessDataStore$data$1: java.lang.Object L$0> = $r17;

        r0.<androidx.datastore.SingleProcessDataStore$data$1: java.lang.Object L$1> = r19;

        r0.<androidx.datastore.SingleProcessDataStore$data$1: java.lang.Object L$2> = r20;

        r0.<androidx.datastore.SingleProcessDataStore$data$1: java.lang.Object L$3> = $r22;

        r0.<androidx.datastore.SingleProcessDataStore$data$1: int label> = 1;

        r30 = (kotlin.coroutines.Continuation) r0;

        $r15 = interfaceinvoke $r22.<kotlinx.coroutines.flow.Flow: java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)>(r20, r30);

        if $r15 != r2 goto label3;

        return r2;

     label2:
        $r3 = r0.<androidx.datastore.SingleProcessDataStore$data$1: java.lang.Object L$3>;

        $r23 = (kotlinx.coroutines.flow.Flow) $r3;

        $r4 = r0.<androidx.datastore.SingleProcessDataStore$data$1: java.lang.Object L$2>;

        r24 = (kotlinx.coroutines.flow.FlowCollector) $r4;

        $r5 = r0.<androidx.datastore.SingleProcessDataStore$data$1: java.lang.Object L$1>;

        r25 = (kotlinx.coroutines.channels.ConflatedBroadcastChannel) $r5;

        $r6 = r0.<androidx.datastore.SingleProcessDataStore$data$1: java.lang.Object L$0>;

        $r26 = (kotlinx.coroutines.flow.FlowCollector) $r6;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label3:
        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;

     label4:
        r29 = new java.lang.IllegalStateException;

        specialinvoke r29.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r29;
    }

    void <init>(androidx.datastore.SingleProcessDataStore, kotlin.coroutines.Continuation)
    {
        androidx.datastore.SingleProcessDataStore$data$1 r0;
        androidx.datastore.SingleProcessDataStore r1;
        kotlin.coroutines.Continuation r2;

        r0 := @this: androidx.datastore.SingleProcessDataStore$data$1;

        r1 := @parameter0: androidx.datastore.SingleProcessDataStore;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.datastore.SingleProcessDataStore$data$1: androidx.datastore.SingleProcessDataStore this$0> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, r2);

        return;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.datastore.SingleProcessDataStore$data$1 r0, r3, r8;
        java.lang.Object r1;
        kotlin.coroutines.Continuation r2, r9;
        androidx.datastore.SingleProcessDataStore $r5;
        kotlinx.coroutines.flow.FlowCollector $r6, $r7;

        r0 := @this: androidx.datastore.SingleProcessDataStore$data$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "completion");

        r8 = new androidx.datastore.SingleProcessDataStore$data$1;

        $r5 = r0.<androidx.datastore.SingleProcessDataStore$data$1: androidx.datastore.SingleProcessDataStore this$0>;

        specialinvoke r8.<androidx.datastore.SingleProcessDataStore$data$1: void <init>(androidx.datastore.SingleProcessDataStore,kotlin.coroutines.Continuation)>($r5, r2);

        r3 = r8;

        $r7 = (kotlinx.coroutines.flow.FlowCollector) r1;

        $r6 = (kotlinx.coroutines.flow.FlowCollector) r1;

        r3.<androidx.datastore.SingleProcessDataStore$data$1: kotlinx.coroutines.flow.FlowCollector p$> = $r6;

        r9 = (kotlin.coroutines.Continuation) r3;

        return r9;
    }

    public final java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.datastore.SingleProcessDataStore$data$1 r0, $r6;
        java.lang.Object r1, r2, $r7;
        kotlin.coroutines.Continuation $r3, $r4;
        kotlin.Unit $r5;

        r0 := @this: androidx.datastore.SingleProcessDataStore$data$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = (kotlin.coroutines.Continuation) r2;

        $r4 = virtualinvoke r0.<androidx.datastore.SingleProcessDataStore$data$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, $r3);

        $r6 = (androidx.datastore.SingleProcessDataStore$data$1) $r4;

        $r5 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r7 = virtualinvoke $r6.<androidx.datastore.SingleProcessDataStore$data$1: java.lang.Object invokeSuspend(java.lang.Object)>($r5);

        return $r7;
    }

androidx.datastore.SingleProcessDataStore$file$2
<androidx.datastore.SingleProcessDataStore$file$2: androidx.datastore.SingleProcessDataStore this$0>
    public volatile java.lang.Object invoke()
    {
        androidx.datastore.SingleProcessDataStore$file$2 r0;
        java.io.File $r1;

        r0 := @this: androidx.datastore.SingleProcessDataStore$file$2;

        $r1 = virtualinvoke r0.<androidx.datastore.SingleProcessDataStore$file$2: java.io.File invoke()>();

        return $r1;
    }

    public final java.io.File invoke()
    {
        androidx.datastore.SingleProcessDataStore$file$2 r0;
        androidx.datastore.SingleProcessDataStore $r1;
        kotlin.jvm.functions.Function0 $r2;
        java.lang.Object $r3;
        java.io.File $r4;

        r0 := @this: androidx.datastore.SingleProcessDataStore$file$2;

        $r1 = r0.<androidx.datastore.SingleProcessDataStore$file$2: androidx.datastore.SingleProcessDataStore this$0>;

        $r2 = staticinvoke <androidx.datastore.SingleProcessDataStore: kotlin.jvm.functions.Function0 access$getProduceFile$p(androidx.datastore.SingleProcessDataStore)>($r1);

        $r3 = interfaceinvoke $r2.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        $r4 = (java.io.File) $r3;

        return $r4;
    }

    void <init>(androidx.datastore.SingleProcessDataStore)
    {
        androidx.datastore.SingleProcessDataStore$file$2 r0;
        androidx.datastore.SingleProcessDataStore r1;

        r0 := @this: androidx.datastore.SingleProcessDataStore$file$2;

        r1 := @parameter0: androidx.datastore.SingleProcessDataStore;

        r0.<androidx.datastore.SingleProcessDataStore$file$2: androidx.datastore.SingleProcessDataStore this$0> = r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

androidx.datastore.SingleProcessDataStore$Message$Read
<androidx.datastore.SingleProcessDataStore$Message$Read: kotlinx.coroutines.channels.ConflatedBroadcastChannel dataChannel>
    public kotlinx.coroutines.channels.ConflatedBroadcastChannel getDataChannel()
    {
        androidx.datastore.SingleProcessDataStore$Message$Read r0;
        kotlinx.coroutines.channels.ConflatedBroadcastChannel $r1;

        r0 := @this: androidx.datastore.SingleProcessDataStore$Message$Read;

        $r1 = r0.<androidx.datastore.SingleProcessDataStore$Message$Read: kotlinx.coroutines.channels.ConflatedBroadcastChannel dataChannel>;

        return $r1;
    }

    public void <init>(kotlinx.coroutines.channels.ConflatedBroadcastChannel)
    {
        androidx.datastore.SingleProcessDataStore$Message$Read r0;
        kotlinx.coroutines.channels.ConflatedBroadcastChannel r1;

        r0 := @this: androidx.datastore.SingleProcessDataStore$Message$Read;

        r1 := @parameter0: kotlinx.coroutines.channels.ConflatedBroadcastChannel;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "dataChannel");

        specialinvoke r0.<androidx.datastore.SingleProcessDataStore$Message: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        r0.<androidx.datastore.SingleProcessDataStore$Message$Read: kotlinx.coroutines.channels.ConflatedBroadcastChannel dataChannel> = r1;

        return;
    }

androidx.datastore.SingleProcessDataStore$Message$Update
<androidx.datastore.SingleProcessDataStore$Message$Update: kotlin.jvm.functions.Function2 transform>
<androidx.datastore.SingleProcessDataStore$Message$Update: kotlinx.coroutines.CompletableDeferred ack>
<androidx.datastore.SingleProcessDataStore$Message$Update: kotlinx.coroutines.channels.ConflatedBroadcastChannel dataChannel>
    public final kotlin.jvm.functions.Function2 getTransform()
    {
        androidx.datastore.SingleProcessDataStore$Message$Update r0;
        kotlin.jvm.functions.Function2 $r1;

        r0 := @this: androidx.datastore.SingleProcessDataStore$Message$Update;

        $r1 = r0.<androidx.datastore.SingleProcessDataStore$Message$Update: kotlin.jvm.functions.Function2 transform>;

        return $r1;
    }

    public final kotlinx.coroutines.CompletableDeferred getAck()
    {
        androidx.datastore.SingleProcessDataStore$Message$Update r0;
        kotlinx.coroutines.CompletableDeferred $r1;

        r0 := @this: androidx.datastore.SingleProcessDataStore$Message$Update;

        $r1 = r0.<androidx.datastore.SingleProcessDataStore$Message$Update: kotlinx.coroutines.CompletableDeferred ack>;

        return $r1;
    }

    public kotlinx.coroutines.channels.ConflatedBroadcastChannel getDataChannel()
    {
        androidx.datastore.SingleProcessDataStore$Message$Update r0;
        kotlinx.coroutines.channels.ConflatedBroadcastChannel $r1;

        r0 := @this: androidx.datastore.SingleProcessDataStore$Message$Update;

        $r1 = r0.<androidx.datastore.SingleProcessDataStore$Message$Update: kotlinx.coroutines.channels.ConflatedBroadcastChannel dataChannel>;

        return $r1;
    }

    public void <init>(kotlin.jvm.functions.Function2, kotlinx.coroutines.CompletableDeferred, kotlinx.coroutines.channels.ConflatedBroadcastChannel)
    {
        androidx.datastore.SingleProcessDataStore$Message$Update r0;
        kotlin.jvm.functions.Function2 r1;
        kotlinx.coroutines.CompletableDeferred r2;
        kotlinx.coroutines.channels.ConflatedBroadcastChannel r3;

        r0 := @this: androidx.datastore.SingleProcessDataStore$Message$Update;

        r1 := @parameter0: kotlin.jvm.functions.Function2;

        r2 := @parameter1: kotlinx.coroutines.CompletableDeferred;

        r3 := @parameter2: kotlinx.coroutines.channels.ConflatedBroadcastChannel;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "transform");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "ack");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "dataChannel");

        specialinvoke r0.<androidx.datastore.SingleProcessDataStore$Message: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        r0.<androidx.datastore.SingleProcessDataStore$Message$Update: kotlin.jvm.functions.Function2 transform> = r1;

        r0.<androidx.datastore.SingleProcessDataStore$Message$Update: kotlinx.coroutines.CompletableDeferred ack> = r2;

        r0.<androidx.datastore.SingleProcessDataStore$Message$Update: kotlinx.coroutines.channels.ConflatedBroadcastChannel dataChannel> = r3;

        return;
    }

androidx.datastore.SingleProcessDataStore$Message
<androidx.datastore.SingleProcessDataStore$Message: kotlinx.coroutines.channels.ConflatedBroadcastChannel getDataChannel()>
    private void <init>()
    {
        androidx.datastore.SingleProcessDataStore$Message r0;

        r0 := @this: androidx.datastore.SingleProcessDataStore$Message;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.datastore.SingleProcessDataStore$Message r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.datastore.SingleProcessDataStore$Message;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.datastore.SingleProcessDataStore$Message: void <init>()>();

        return;
    }

androidx.datastore.SingleProcessDataStore$readAndInitOnce$1
<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object result>
<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: int label>
<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: androidx.datastore.SingleProcessDataStore this$0>
<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$0>
<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$1>
<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$2>
<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$3>
<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$4>
<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$5>
<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$6>
<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$7>
<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$8>
<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object L$9>
    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.datastore.SingleProcessDataStore$readAndInitOnce$1 r0;
        java.lang.Object $r1, $r3;
        int $i0, $i1;
        androidx.datastore.SingleProcessDataStore $r2;
        kotlin.coroutines.Continuation r4;

        r0 := @this: androidx.datastore.SingleProcessDataStore$readAndInitOnce$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: java.lang.Object result> = $r1;

        $i0 = r0.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: int label>;

        $i1 = $i0 | -2147483648;

        r0.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: int label> = $i1;

        $r2 = r0.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: androidx.datastore.SingleProcessDataStore this$0>;

        r4 = (kotlin.coroutines.Continuation) r0;

        $r3 = virtualinvoke $r2.<androidx.datastore.SingleProcessDataStore: java.lang.Object readAndInitOnce(kotlinx.coroutines.channels.ConflatedBroadcastChannel,kotlin.coroutines.Continuation)>(null, r4);

        return $r3;
    }

    void <init>(androidx.datastore.SingleProcessDataStore, kotlin.coroutines.Continuation)
    {
        androidx.datastore.SingleProcessDataStore$readAndInitOnce$1 r0;
        androidx.datastore.SingleProcessDataStore r1;
        kotlin.coroutines.Continuation r2;

        r0 := @this: androidx.datastore.SingleProcessDataStore$readAndInitOnce$1;

        r1 := @parameter0: androidx.datastore.SingleProcessDataStore;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$1: androidx.datastore.SingleProcessDataStore this$0> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>(r2);

        return;
    }

androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1$updateData$1
<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1$updateData$1: java.lang.Object result>
<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1$updateData$1: int label>
<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1$updateData$1: androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1 this$0>
<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1$updateData$1: java.lang.Object L$0>
<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1$updateData$1: java.lang.Object L$1>
<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1$updateData$1: java.lang.Object L$2>
    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1$updateData$1 r0;
        java.lang.Object $r1, $r3;
        int $i0, $i1;
        androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1 $r2;
        kotlin.coroutines.Continuation r4;

        r0 := @this: androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1$updateData$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1$updateData$1: java.lang.Object result> = $r1;

        $i0 = r0.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1$updateData$1: int label>;

        $i1 = $i0 | -2147483648;

        r0.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1$updateData$1: int label> = $i1;

        $r2 = r0.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1$updateData$1: androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1 this$0>;

        r4 = (kotlin.coroutines.Continuation) r0;

        $r3 = virtualinvoke $r2.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1: java.lang.Object updateData(kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation)>(null, r4);

        return $r3;
    }

    void <init>(androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1, kotlin.coroutines.Continuation)
    {
        androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1$updateData$1 r0;
        androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1 r1;
        kotlin.coroutines.Continuation r2;

        r0 := @this: androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1$updateData$1;

        r1 := @parameter0: androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1$updateData$1: androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1 this$0> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>(r2);

        return;
    }

androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1
<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1: androidx.datastore.SingleProcessDataStore this$0>
<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1: kotlinx.coroutines.sync.Mutex $updateLock>
<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1: kotlin.jvm.internal.Ref$BooleanRef $initializationComplete>
<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1: kotlin.jvm.internal.Ref$ObjectRef $initData>
    public java.lang.Object updateData(kotlin.jvm.functions.Function2, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r0, r35;
        java.lang.Object r1, $r2, r3, $r5, $r6, $r7, $r9, $r13, $r14, $r15, $r18, $r21, $r28, r30;
        boolean $z0, $z1, $z2, $z3;
        kotlin.jvm.internal.Ref$ObjectRef $r8, $r10, $r12, $r17;
        androidx.datastore.SingleProcessDataStore $r11;
        kotlin.jvm.internal.Ref$BooleanRef $r16;
        java.lang.Throwable $r20, $r23, r31;
        int $i0, $i1, $i2, $i3, $i4;
        androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1 r24;
        kotlin.jvm.functions.Function2 r25, r29;
        androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1$updateData$1 $r26, r32;
        kotlinx.coroutines.sync.Mutex $r27;
        java.lang.IllegalStateException r33, r34;

        r24 := @this: androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1;

        r25 := @parameter0: kotlin.jvm.functions.Function2;

        $r0 := @parameter1: kotlin.coroutines.Continuation;

        $z0 = $r0 instanceof androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1$updateData$1;

        if $z0 == 0 goto label01;

        $r26 = (androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1$updateData$1) $r0;

        $i0 = $r26.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1$updateData$1: int label>;

        $i1 = $i0 & -2147483648;

        if $i1 == 0 goto label01;

        $i2 = $r26.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1$updateData$1: int label>;

        $i3 = $i2 - -2147483648;

        $r26.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1$updateData$1: int label> = $i3;

        goto label02;

     label01:
        r32 = new androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1$updateData$1;

        specialinvoke r32.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1$updateData$1: void <init>(androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1,kotlin.coroutines.Continuation)>(r24, $r0);

        $r26 = r32;

     label02:
        $r2 = $r26.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1$updateData$1: java.lang.Object result>;

        r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i4 = $r26.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1$updateData$1: int label>;

        tableswitch($i4)
        {
            case 0: goto label03;
            case 1: goto label04;
            case 2: goto label08;
            default: goto label16;
        };

     label03:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

        $r27 = r24.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1: kotlinx.coroutines.sync.Mutex $updateLock>;

        $r26.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1$updateData$1: java.lang.Object L$0> = r24;

        $r26.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1$updateData$1: java.lang.Object L$1> = r25;

        $r26.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1$updateData$1: java.lang.Object L$2> = $r27;

        $r26.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1$updateData$1: int label> = 1;

        r35 = (kotlin.coroutines.Continuation) $r26;

        $r21 = interfaceinvoke $r27.<kotlinx.coroutines.sync.Mutex: java.lang.Object lock(java.lang.Object,kotlin.coroutines.Continuation)>(null, r35);

        if $r21 != r3 goto label05;

        return r3;

     label04:
        $r13 = $r26.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1$updateData$1: java.lang.Object L$2>;

        $r27 = (kotlinx.coroutines.sync.Mutex) $r13;

        $r14 = $r26.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1$updateData$1: java.lang.Object L$1>;

        r25 = (kotlin.jvm.functions.Function2) $r14;

        $r15 = $r26.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1$updateData$1: java.lang.Object L$0>;

        r24 = (androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1) $r15;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

     label05:
        $r16 = r24.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1: kotlin.jvm.internal.Ref$BooleanRef $initializationComplete>;

        $z3 = $r16.<kotlin.jvm.internal.Ref$BooleanRef: boolean element>;

        if $z3 == 0 goto label06;

        r33 = new java.lang.IllegalStateException;

        specialinvoke r33.<java.lang.IllegalStateException: void <init>(java.lang.String)>("InitializerApi.updateData should not be called after initialization is complete.");

        $r20 = (java.lang.Throwable) r33;

        throw $r20;

     label06:
        $r17 = r24.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1: kotlin.jvm.internal.Ref$ObjectRef $initData>;

        $r18 = $r17.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        $r26.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1$updateData$1: java.lang.Object L$0> = r24;

        $r26.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1$updateData$1: java.lang.Object L$1> = r25;

        $r26.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1$updateData$1: java.lang.Object L$2> = $r27;

        $r26.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1$updateData$1: int label> = 2;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void mark(int)>(6);

        $r28 = interfaceinvoke r25.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r18, $r26);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void mark(int)>(7);

     label07:
        if $r28 != r3 goto label10;

        return r3;

     label08:
        $r5 = $r26.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1$updateData$1: java.lang.Object L$2>;

        $r27 = (kotlinx.coroutines.sync.Mutex) $r5;

        $r6 = $r26.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1$updateData$1: java.lang.Object L$1>;

        r29 = (kotlin.jvm.functions.Function2) $r6;

        $r7 = $r26.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1$updateData$1: java.lang.Object L$0>;

        r24 = (androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1) $r7;

     label09:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

        $r28 = $r2;

     label10:
        r1 = $r28;

        $r8 = r24.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1: kotlin.jvm.internal.Ref$ObjectRef $initData>;

        $r9 = $r8.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r9);

        $z2 = $z1 ^ 1;

        if $z2 == 0 goto label11;

        $r11 = r24.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1: androidx.datastore.SingleProcessDataStore this$0>;

        virtualinvoke $r11.<androidx.datastore.SingleProcessDataStore: void writeData$datastore_core_release(java.lang.Object)>(r1);

        $r12 = r24.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1: kotlin.jvm.internal.Ref$ObjectRef $initData>;

        $r12.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element> = r1;

     label11:
        $r10 = r24.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1: kotlin.jvm.internal.Ref$ObjectRef $initData>;

        r30 = $r10.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

     label12:
        interfaceinvoke $r27.<kotlinx.coroutines.sync.Mutex: void unlock(java.lang.Object)>(null);

        goto label15;

     label13:
        $r23 := @caughtexception;

        r31 = $r23;

     label14:
        interfaceinvoke $r27.<kotlinx.coroutines.sync.Mutex: void unlock(java.lang.Object)>(null);

        throw r31;

     label15:
        return r30;

     label16:
        r34 = new java.lang.IllegalStateException;

        specialinvoke r34.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r34;

        catch java.lang.Throwable from label05 to label07 with label13;
        catch java.lang.Throwable from label09 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    void <init>(androidx.datastore.SingleProcessDataStore, kotlinx.coroutines.sync.Mutex, kotlin.jvm.internal.Ref$BooleanRef, kotlin.jvm.internal.Ref$ObjectRef)
    {
        androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1 r0;
        androidx.datastore.SingleProcessDataStore r1;
        kotlinx.coroutines.sync.Mutex $r2;
        kotlin.jvm.internal.Ref$BooleanRef $r3;
        kotlin.jvm.internal.Ref$ObjectRef $r4;

        r0 := @this: androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1;

        r1 := @parameter0: androidx.datastore.SingleProcessDataStore;

        $r2 := @parameter1: kotlinx.coroutines.sync.Mutex;

        $r3 := @parameter2: kotlin.jvm.internal.Ref$BooleanRef;

        $r4 := @parameter3: kotlin.jvm.internal.Ref$ObjectRef;

        r0.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1: androidx.datastore.SingleProcessDataStore this$0> = r1;

        r0.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1: kotlinx.coroutines.sync.Mutex $updateLock> = $r2;

        r0.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1: kotlin.jvm.internal.Ref$BooleanRef $initializationComplete> = $r3;

        r0.<androidx.datastore.SingleProcessDataStore$readAndInitOnce$api$1: kotlin.jvm.internal.Ref$ObjectRef $initData> = $r4;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

androidx.datastore.SingleProcessDataStore$readDataOrHandleCorruption$1
<androidx.datastore.SingleProcessDataStore$readDataOrHandleCorruption$1: java.lang.Object result>
<androidx.datastore.SingleProcessDataStore$readDataOrHandleCorruption$1: int label>
<androidx.datastore.SingleProcessDataStore$readDataOrHandleCorruption$1: androidx.datastore.SingleProcessDataStore this$0>
<androidx.datastore.SingleProcessDataStore$readDataOrHandleCorruption$1: java.lang.Object L$0>
<androidx.datastore.SingleProcessDataStore$readDataOrHandleCorruption$1: java.lang.Object L$1>
    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.datastore.SingleProcessDataStore$readDataOrHandleCorruption$1 r0;
        java.lang.Object $r1, $r3;
        int $i0, $i1;
        androidx.datastore.SingleProcessDataStore $r2;
        kotlin.coroutines.Continuation r4;

        r0 := @this: androidx.datastore.SingleProcessDataStore$readDataOrHandleCorruption$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.datastore.SingleProcessDataStore$readDataOrHandleCorruption$1: java.lang.Object result> = $r1;

        $i0 = r0.<androidx.datastore.SingleProcessDataStore$readDataOrHandleCorruption$1: int label>;

        $i1 = $i0 | -2147483648;

        r0.<androidx.datastore.SingleProcessDataStore$readDataOrHandleCorruption$1: int label> = $i1;

        $r2 = r0.<androidx.datastore.SingleProcessDataStore$readDataOrHandleCorruption$1: androidx.datastore.SingleProcessDataStore this$0>;

        r4 = (kotlin.coroutines.Continuation) r0;

        $r3 = virtualinvoke $r2.<androidx.datastore.SingleProcessDataStore: java.lang.Object readDataOrHandleCorruption(kotlin.coroutines.Continuation)>(r4);

        return $r3;
    }

    void <init>(androidx.datastore.SingleProcessDataStore, kotlin.coroutines.Continuation)
    {
        androidx.datastore.SingleProcessDataStore$readDataOrHandleCorruption$1 r0;
        androidx.datastore.SingleProcessDataStore r1;
        kotlin.coroutines.Continuation r2;

        r0 := @this: androidx.datastore.SingleProcessDataStore$readDataOrHandleCorruption$1;

        r1 := @parameter0: androidx.datastore.SingleProcessDataStore;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.datastore.SingleProcessDataStore$readDataOrHandleCorruption$1: androidx.datastore.SingleProcessDataStore this$0> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>(r2);

        return;
    }

androidx.datastore.SingleProcessDataStore$transformAndWrite$1
<androidx.datastore.SingleProcessDataStore$transformAndWrite$1: java.lang.Object result>
<androidx.datastore.SingleProcessDataStore$transformAndWrite$1: int label>
<androidx.datastore.SingleProcessDataStore$transformAndWrite$1: androidx.datastore.SingleProcessDataStore this$0>
<androidx.datastore.SingleProcessDataStore$transformAndWrite$1: java.lang.Object L$0>
<androidx.datastore.SingleProcessDataStore$transformAndWrite$1: java.lang.Object L$1>
<androidx.datastore.SingleProcessDataStore$transformAndWrite$1: java.lang.Object L$2>
<androidx.datastore.SingleProcessDataStore$transformAndWrite$1: java.lang.Object L$3>
<androidx.datastore.SingleProcessDataStore$transformAndWrite$1: java.lang.Object L$4>
    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.datastore.SingleProcessDataStore$transformAndWrite$1 r0;
        java.lang.Object $r1, $r3;
        int $i0, $i1;
        androidx.datastore.SingleProcessDataStore $r2;
        kotlin.coroutines.Continuation r4;

        r0 := @this: androidx.datastore.SingleProcessDataStore$transformAndWrite$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.datastore.SingleProcessDataStore$transformAndWrite$1: java.lang.Object result> = $r1;

        $i0 = r0.<androidx.datastore.SingleProcessDataStore$transformAndWrite$1: int label>;

        $i1 = $i0 | -2147483648;

        r0.<androidx.datastore.SingleProcessDataStore$transformAndWrite$1: int label> = $i1;

        $r2 = r0.<androidx.datastore.SingleProcessDataStore$transformAndWrite$1: androidx.datastore.SingleProcessDataStore this$0>;

        r4 = (kotlin.coroutines.Continuation) r0;

        $r3 = virtualinvoke $r2.<androidx.datastore.SingleProcessDataStore: java.lang.Object transformAndWrite(kotlin.jvm.functions.Function2,kotlinx.coroutines.channels.ConflatedBroadcastChannel,kotlin.coroutines.Continuation)>(null, null, r4);

        return $r3;
    }

    void <init>(androidx.datastore.SingleProcessDataStore, kotlin.coroutines.Continuation)
    {
        androidx.datastore.SingleProcessDataStore$transformAndWrite$1 r0;
        androidx.datastore.SingleProcessDataStore r1;
        kotlin.coroutines.Continuation r2;

        r0 := @this: androidx.datastore.SingleProcessDataStore$transformAndWrite$1;

        r1 := @parameter0: androidx.datastore.SingleProcessDataStore;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.datastore.SingleProcessDataStore$transformAndWrite$1: androidx.datastore.SingleProcessDataStore this$0> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>(r2);

        return;
    }

androidx.datastore.SingleProcessDataStore$updateData$1
<androidx.datastore.SingleProcessDataStore$updateData$1: java.lang.Object result>
<androidx.datastore.SingleProcessDataStore$updateData$1: int label>
<androidx.datastore.SingleProcessDataStore$updateData$1: androidx.datastore.SingleProcessDataStore this$0>
<androidx.datastore.SingleProcessDataStore$updateData$1: java.lang.Object L$0>
<androidx.datastore.SingleProcessDataStore$updateData$1: java.lang.Object L$1>
<androidx.datastore.SingleProcessDataStore$updateData$1: java.lang.Object L$2>
<androidx.datastore.SingleProcessDataStore$updateData$1: java.lang.Object L$3>
<androidx.datastore.SingleProcessDataStore$updateData$1: java.lang.Object L$4>
    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.datastore.SingleProcessDataStore$updateData$1 r0;
        java.lang.Object $r1, $r3;
        int $i0, $i1;
        androidx.datastore.SingleProcessDataStore $r2;
        kotlin.coroutines.Continuation r4;

        r0 := @this: androidx.datastore.SingleProcessDataStore$updateData$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.datastore.SingleProcessDataStore$updateData$1: java.lang.Object result> = $r1;

        $i0 = r0.<androidx.datastore.SingleProcessDataStore$updateData$1: int label>;

        $i1 = $i0 | -2147483648;

        r0.<androidx.datastore.SingleProcessDataStore$updateData$1: int label> = $i1;

        $r2 = r0.<androidx.datastore.SingleProcessDataStore$updateData$1: androidx.datastore.SingleProcessDataStore this$0>;

        r4 = (kotlin.coroutines.Continuation) r0;

        $r3 = virtualinvoke $r2.<androidx.datastore.SingleProcessDataStore: java.lang.Object updateData(kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation)>(null, r4);

        return $r3;
    }

    void <init>(androidx.datastore.SingleProcessDataStore, kotlin.coroutines.Continuation)
    {
        androidx.datastore.SingleProcessDataStore$updateData$1 r0;
        androidx.datastore.SingleProcessDataStore r1;
        kotlin.coroutines.Continuation r2;

        r0 := @this: androidx.datastore.SingleProcessDataStore$updateData$1;

        r1 := @parameter0: androidx.datastore.SingleProcessDataStore;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.datastore.SingleProcessDataStore$updateData$1: androidx.datastore.SingleProcessDataStore this$0> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>(r2);

        return;
    }

androidx.datastore.SingleProcessDataStore$updateData$2
<androidx.datastore.SingleProcessDataStore$updateData$2: kotlinx.coroutines.CoroutineScope p$>
<androidx.datastore.SingleProcessDataStore$updateData$2: java.lang.Object L$0>
<androidx.datastore.SingleProcessDataStore$updateData$2: int label>
<androidx.datastore.SingleProcessDataStore$updateData$2: kotlin.jvm.internal.Ref$ObjectRef $ack>
    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.datastore.SingleProcessDataStore$updateData$2 r0;
        java.lang.Object $r1, r2, $r3, $r5, $r9;
        int $i0;
        kotlin.jvm.internal.Ref$ObjectRef $r4;
        kotlinx.coroutines.CompletableDeferred $r6;
        kotlinx.coroutines.CoroutineScope $r8, $r10;
        java.lang.IllegalStateException r11;
        kotlin.coroutines.Continuation r12;

        r0 := @this: androidx.datastore.SingleProcessDataStore$updateData$2;

        $r1 := @parameter0: java.lang.Object;

        r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.datastore.SingleProcessDataStore$updateData$2: int label>;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label4;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r8 = r0.<androidx.datastore.SingleProcessDataStore$updateData$2: kotlinx.coroutines.CoroutineScope p$>;

        $r4 = r0.<androidx.datastore.SingleProcessDataStore$updateData$2: kotlin.jvm.internal.Ref$ObjectRef $ack>;

        $r5 = $r4.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        $r6 = (kotlinx.coroutines.CompletableDeferred) $r5;

        r0.<androidx.datastore.SingleProcessDataStore$updateData$2: java.lang.Object L$0> = $r8;

        r0.<androidx.datastore.SingleProcessDataStore$updateData$2: int label> = 1;

        r12 = (kotlin.coroutines.Continuation) r0;

        $r9 = interfaceinvoke $r6.<kotlinx.coroutines.CompletableDeferred: java.lang.Object await(kotlin.coroutines.Continuation)>(r12);

        if $r9 != r2 goto label3;

        return r2;

     label2:
        $r3 = r0.<androidx.datastore.SingleProcessDataStore$updateData$2: java.lang.Object L$0>;

        $r10 = (kotlinx.coroutines.CoroutineScope) $r3;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r9 = $r1;

     label3:
        return $r9;

     label4:
        r11 = new java.lang.IllegalStateException;

        specialinvoke r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r11;
    }

    void <init>(kotlin.jvm.internal.Ref$ObjectRef, kotlin.coroutines.Continuation)
    {
        androidx.datastore.SingleProcessDataStore$updateData$2 r0;
        kotlin.jvm.internal.Ref$ObjectRef r1;
        kotlin.coroutines.Continuation r2;

        r0 := @this: androidx.datastore.SingleProcessDataStore$updateData$2;

        r1 := @parameter0: kotlin.jvm.internal.Ref$ObjectRef;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.datastore.SingleProcessDataStore$updateData$2: kotlin.jvm.internal.Ref$ObjectRef $ack> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, r2);

        return;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.datastore.SingleProcessDataStore$updateData$2 r0, r3, r8;
        java.lang.Object r1;
        kotlin.coroutines.Continuation r2, r9;
        kotlin.jvm.internal.Ref$ObjectRef $r5;
        kotlinx.coroutines.CoroutineScope $r6, $r7;

        r0 := @this: androidx.datastore.SingleProcessDataStore$updateData$2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "completion");

        r8 = new androidx.datastore.SingleProcessDataStore$updateData$2;

        $r5 = r0.<androidx.datastore.SingleProcessDataStore$updateData$2: kotlin.jvm.internal.Ref$ObjectRef $ack>;

        specialinvoke r8.<androidx.datastore.SingleProcessDataStore$updateData$2: void <init>(kotlin.jvm.internal.Ref$ObjectRef,kotlin.coroutines.Continuation)>($r5, r2);

        r3 = r8;

        $r7 = (kotlinx.coroutines.CoroutineScope) r1;

        $r6 = (kotlinx.coroutines.CoroutineScope) r1;

        r3.<androidx.datastore.SingleProcessDataStore$updateData$2: kotlinx.coroutines.CoroutineScope p$> = $r6;

        r9 = (kotlin.coroutines.Continuation) r3;

        return r9;
    }

    public final java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.datastore.SingleProcessDataStore$updateData$2 r0, $r6;
        java.lang.Object r1, r2, $r7;
        kotlin.coroutines.Continuation $r3, $r4;
        kotlin.Unit $r5;

        r0 := @this: androidx.datastore.SingleProcessDataStore$updateData$2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = (kotlin.coroutines.Continuation) r2;

        $r4 = virtualinvoke r0.<androidx.datastore.SingleProcessDataStore$updateData$2: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, $r3);

        $r6 = (androidx.datastore.SingleProcessDataStore$updateData$2) $r4;

        $r5 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r7 = virtualinvoke $r6.<androidx.datastore.SingleProcessDataStore$updateData$2: java.lang.Object invokeSuspend(java.lang.Object)>($r5);

        return $r7;
    }

