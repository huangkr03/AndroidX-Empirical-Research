androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl
<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl: androidx.work.ExistingWorkPolicy[] sValues>
<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl: androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo mInfo>
<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl: android.os.Parcelable$Creator CREATOR>
    public void <init>(androidx.work.impl.WorkContinuationImpl)
    {
        androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl r0;
        androidx.work.impl.WorkContinuationImpl r1;
        androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo $r2;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl;

        r1 := @parameter0: androidx.work.impl.WorkContinuationImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo;

        specialinvoke $r2.<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo: void <init>(androidx.work.impl.WorkContinuationImpl)>(r1);

        r0.<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl: androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo mInfo> = $r2;

        return;
    }

    public void <init>(androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo)
    {
        androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl r0;
        androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo r1;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl;

        r1 := @parameter0: androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl: androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo mInfo> = r1;

        return;
    }

    public androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo getInfo()
    {
        androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl r0;
        androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo $r1;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl;

        $r1 = r0.<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl: androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo mInfo>;

        return $r1;
    }

    protected void <init>(android.os.Parcel)
    {
        androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl r0, r5;
        android.os.Parcel r1;
        boolean z0, z3;
        int i0, i1, i2, i3, i4;
        androidx.work.ExistingWorkPolicy r2;
        java.util.ArrayList r3, $r7, $r10, r18;
        java.lang.ClassLoader r4;
        androidx.work.ExistingWorkPolicy[] $r6;
        java.lang.Class $r8;
        androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo $r9, $r12;
        android.os.Parcelable $r11, $r13;
        androidx.work.WorkRequest $r14;
        java.lang.String r15;
        androidx.work.multiprocess.parcelable.ParcelableWorkRequest r16;
        androidx.work.impl.WorkRequestHolder r17;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl;

        r1 := @parameter0: android.os.Parcel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r15 = null;

        z0 = staticinvoke <androidx.work.multiprocess.parcelable.ParcelUtils: boolean readBooleanValue(android.os.Parcel)>(r1);

        if z0 == 0 goto label1;

        r15 = virtualinvoke r1.<android.os.Parcel: java.lang.String readString()>();

     label1:
        i0 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        $r6 = <androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl: androidx.work.ExistingWorkPolicy[] sValues>;

        r2 = $r6[i0];

        i1 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>(i1);

        r3 = $r7;

        $r8 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r4 = virtualinvoke $r8.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        i2 = 0;

     label2:
        if i2 >= i1 goto label3;

        $r13 = virtualinvoke r1.<android.os.Parcel: android.os.Parcelable readParcelable(java.lang.ClassLoader)>(r4);

        r16 = (androidx.work.multiprocess.parcelable.ParcelableWorkRequest) $r13;

        $r14 = virtualinvoke r16.<androidx.work.multiprocess.parcelable.ParcelableWorkRequest: androidx.work.WorkRequest getWorkRequest()>();

        r17 = (androidx.work.impl.WorkRequestHolder) $r14;

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r17);

        i2 = i2 + 1;

        goto label2;

     label3:
        r18 = null;

        z3 = staticinvoke <androidx.work.multiprocess.parcelable.ParcelUtils: boolean readBooleanValue(android.os.Parcel)>(r1);

        if z3 == 0 goto label5;

        i3 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>(int)>(i3);

        r18 = $r10;

        i4 = 0;

     label4:
        if i4 >= i3 goto label5;

        $r11 = virtualinvoke r1.<android.os.Parcel: android.os.Parcelable readParcelable(java.lang.ClassLoader)>(r4);

        r5 = (androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl) $r11;

        $r12 = virtualinvoke r5.<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl: androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo getInfo()>();

        interfaceinvoke r18.<java.util.List: boolean add(java.lang.Object)>($r12);

        i4 = i4 + 1;

        goto label4;

     label5:
        $r9 = new androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo;

        specialinvoke $r9.<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo: void <init>(java.lang.String,androidx.work.ExistingWorkPolicy,java.util.List,java.util.List)>(r15, r2, r3, r18);

        r0.<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl: androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo mInfo> = $r9;

        return;
    }

    public int describeContents()
    {
        androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl r0;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl;

        return 0;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl r0, r5, $r10;
        android.os.Parcel r1;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        java.lang.String r2;
        boolean z0, $z1, $z2, $z3, $z4, $z5, z6;
        androidx.work.ExistingWorkPolicy r3;
        java.util.List r4, r17;
        androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo $r6, $r7, $r8, $r9, $r12;
        java.lang.Object $r11, $r13;
        androidx.work.multiprocess.parcelable.ParcelableWorkRequest $r14, r16;
        androidx.work.WorkRequest r15;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        $r6 = r0.<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl: androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo mInfo>;

        r2 = virtualinvoke $r6.<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo: java.lang.String getName()>();

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z1 != 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        z0 = $z4;

        staticinvoke <androidx.work.multiprocess.parcelable.ParcelUtils: void writeBooleanValue(android.os.Parcel,boolean)>(r1, z0);

        if z0 == 0 goto label3;

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>(r2);

     label3:
        $r7 = r0.<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl: androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo mInfo>;

        r3 = virtualinvoke $r7.<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo: androidx.work.ExistingWorkPolicy getExistingWorkPolicy()>();

        $i1 = virtualinvoke r3.<androidx.work.ExistingWorkPolicy: int ordinal()>();

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i1);

        $r8 = r0.<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl: androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo mInfo>;

        r4 = virtualinvoke $r8.<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo: java.util.List getWork()>();

        $i2 = interfaceinvoke r4.<java.util.List: int size()>();

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i2);

        $z2 = interfaceinvoke r4.<java.util.List: boolean isEmpty()>();

        if $z2 != 0 goto label5;

        i6 = 0;

     label4:
        $i5 = interfaceinvoke r4.<java.util.List: int size()>();

        if i6 >= $i5 goto label5;

        $r13 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i6);

        r15 = (androidx.work.WorkRequest) $r13;

        $r14 = new androidx.work.multiprocess.parcelable.ParcelableWorkRequest;

        specialinvoke $r14.<androidx.work.multiprocess.parcelable.ParcelableWorkRequest: void <init>(androidx.work.WorkRequest)>(r15);

        r16 = $r14;

        virtualinvoke r1.<android.os.Parcel: void writeParcelable(android.os.Parcelable,int)>(r16, i0);

        i6 = i6 + 1;

        goto label4;

     label5:
        $r9 = r0.<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl: androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo mInfo>;

        r17 = virtualinvoke $r9.<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo: java.util.List getParentInfos()>();

        if r17 == null goto label6;

        $z3 = interfaceinvoke r17.<java.util.List: boolean isEmpty()>();

        if $z3 != 0 goto label6;

        $z5 = 1;

        goto label7;

     label6:
        $z5 = 0;

     label7:
        z6 = $z5;

        staticinvoke <androidx.work.multiprocess.parcelable.ParcelUtils: void writeBooleanValue(android.os.Parcel,boolean)>(r1, z6);

        if z6 == 0 goto label9;

        $i3 = interfaceinvoke r17.<java.util.List: int size()>();

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i3);

        i7 = 0;

     label8:
        $i4 = interfaceinvoke r17.<java.util.List: int size()>();

        if i7 >= $i4 goto label9;

        $r10 = new androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl;

        $r11 = interfaceinvoke r17.<java.util.List: java.lang.Object get(int)>(i7);

        $r12 = (androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo) $r11;

        specialinvoke $r10.<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl: void <init>(androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo)>($r12);

        r5 = $r10;

        virtualinvoke r1.<android.os.Parcel: void writeParcelable(android.os.Parcelable,int)>(r5, i0);

        i7 = i7 + 1;

        goto label8;

     label9:
        return;
    }

    public androidx.work.impl.WorkContinuationImpl toWorkContinuationImpl(androidx.work.impl.WorkManagerImpl)
    {
        androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl r0;
        androidx.work.impl.WorkManagerImpl r1;
        androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo $r2;
        androidx.work.impl.WorkContinuationImpl $r3;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl;

        r1 := @parameter0: androidx.work.impl.WorkManagerImpl;

        $r2 = r0.<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl: androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo mInfo>;

        $r3 = virtualinvoke $r2.<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo: androidx.work.impl.WorkContinuationImpl toWorkContinuationImpl(androidx.work.impl.WorkManagerImpl)>(r1);

        return $r3;
    }

    static void <clinit>()
    {
        androidx.work.ExistingWorkPolicy[] $r0;
        androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$1 $r1;

        $r0 = staticinvoke <androidx.work.ExistingWorkPolicy: androidx.work.ExistingWorkPolicy[] values()>();

        <androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl: androidx.work.ExistingWorkPolicy[] sValues> = $r0;

        $r1 = new androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$1;

        specialinvoke $r1.<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$1: void <init>()>();

        <androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl: android.os.Parcelable$Creator CREATOR> = $r1;

        return;
    }

androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$1
    void <init>()
    {
        androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$1 r0;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl createFromParcel(android.os.Parcel)
    {
        androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$1 r0;
        android.os.Parcel r1;
        androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl $r2;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$1;

        r1 := @parameter0: android.os.Parcel;

        $r2 = new androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl;

        specialinvoke $r2.<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl: void <init>(android.os.Parcel)>(r1);

        return $r2;
    }

    public androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl[] newArray(int)
    {
        androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$1 r0;
        int i0;
        androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl[] $r1;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$1;

        i0 := @parameter0: int;

        $r1 = newarray (androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl)[i0];

        return $r1;
    }

    public volatile java.lang.Object[] newArray(int)
    {
        androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$1 r0;
        int i0;
        androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl[] $r1;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$1;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$1: androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl[] newArray(int)>(i0);

        return $r1;
    }

    public volatile java.lang.Object createFromParcel(android.os.Parcel)
    {
        androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$1 r0;
        android.os.Parcel r1;
        androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl $r2;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$1;

        r1 := @parameter0: android.os.Parcel;

        $r2 = virtualinvoke r0.<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$1: androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl createFromParcel(android.os.Parcel)>(r1);

        return $r2;
    }

androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo
<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo: java.lang.String mName>
<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo: androidx.work.ExistingWorkPolicy mWorkPolicy>
<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo: java.util.List mRequests>
<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo: java.util.List mParents>
    public void <init>(androidx.work.impl.WorkContinuationImpl)
    {
        androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo r0, $r10;
        androidx.work.impl.WorkContinuationImpl r1, r4;
        java.util.List r2, $r7, $r11;
        java.util.Iterator r3;
        java.lang.String $r5;
        androidx.work.ExistingWorkPolicy $r6;
        java.util.ArrayList $r8;
        int $i0;
        boolean $z0;
        java.lang.Object $r9;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo;

        r1 := @parameter0: androidx.work.impl.WorkContinuationImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = virtualinvoke r1.<androidx.work.impl.WorkContinuationImpl: java.lang.String getName()>();

        r0.<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo: java.lang.String mName> = $r5;

        $r6 = virtualinvoke r1.<androidx.work.impl.WorkContinuationImpl: androidx.work.ExistingWorkPolicy getExistingWorkPolicy()>();

        r0.<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo: androidx.work.ExistingWorkPolicy mWorkPolicy> = $r6;

        $r7 = virtualinvoke r1.<androidx.work.impl.WorkContinuationImpl: java.util.List getWork()>();

        r0.<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo: java.util.List mRequests> = $r7;

        r2 = virtualinvoke r1.<androidx.work.impl.WorkContinuationImpl: java.util.List getParents()>();

        r0.<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo: java.util.List mParents> = null;

        if r2 == null goto label2;

        $r8 = new java.util.ArrayList;

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>($i0);

        r0.<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo: java.util.List mParents> = $r8;

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (androidx.work.impl.WorkContinuationImpl) $r9;

        $r11 = r0.<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo: java.util.List mParents>;

        $r10 = new androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo;

        specialinvoke $r10.<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo: void <init>(androidx.work.impl.WorkContinuationImpl)>(r4);

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r10);

        goto label1;

     label2:
        return;
    }

    public void <init>(java.lang.String, androidx.work.ExistingWorkPolicy, java.util.List, java.util.List)
    {
        androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo r0;
        java.lang.String r1;
        androidx.work.ExistingWorkPolicy r2;
        java.util.List r3, r4;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.work.ExistingWorkPolicy;

        r3 := @parameter2: java.util.List;

        r4 := @parameter3: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo: java.lang.String mName> = r1;

        r0.<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo: androidx.work.ExistingWorkPolicy mWorkPolicy> = r2;

        r0.<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo: java.util.List mRequests> = r3;

        r0.<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo: java.util.List mParents> = r4;

        return;
    }

    public java.lang.String getName()
    {
        androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo r0;
        java.lang.String $r1;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo;

        $r1 = r0.<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo: java.lang.String mName>;

        return $r1;
    }

    public androidx.work.ExistingWorkPolicy getExistingWorkPolicy()
    {
        androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo r0;
        androidx.work.ExistingWorkPolicy $r1;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo;

        $r1 = r0.<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo: androidx.work.ExistingWorkPolicy mWorkPolicy>;

        return $r1;
    }

    public java.util.List getWork()
    {
        androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo r0;
        java.util.List $r1;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo;

        $r1 = r0.<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo: java.util.List mRequests>;

        return $r1;
    }

    public java.util.List getParentInfos()
    {
        androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo r0;
        java.util.List $r1;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo;

        $r1 = r0.<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo: java.util.List mParents>;

        return $r1;
    }

    public androidx.work.impl.WorkContinuationImpl toWorkContinuationImpl(androidx.work.impl.WorkManagerImpl)
    {
        androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo r0;
        androidx.work.impl.WorkManagerImpl r1;
        androidx.work.impl.WorkContinuationImpl $r2;
        java.lang.String $r3;
        androidx.work.ExistingWorkPolicy $r4;
        java.util.List $r5, $r6, $r7;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo;

        r1 := @parameter0: androidx.work.impl.WorkManagerImpl;

        $r2 = new androidx.work.impl.WorkContinuationImpl;

        $r3 = virtualinvoke r0.<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo: java.lang.String getName()>();

        $r4 = virtualinvoke r0.<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo: androidx.work.ExistingWorkPolicy getExistingWorkPolicy()>();

        $r5 = virtualinvoke r0.<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo: java.util.List getWork()>();

        $r6 = virtualinvoke r0.<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo: java.util.List getParentInfos()>();

        $r7 = staticinvoke <androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo: java.util.List parents(androidx.work.impl.WorkManagerImpl,java.util.List)>(r1, $r6);

        specialinvoke $r2.<androidx.work.impl.WorkContinuationImpl: void <init>(androidx.work.impl.WorkManagerImpl,java.lang.String,androidx.work.ExistingWorkPolicy,java.util.List,java.util.List)>(r1, $r3, $r4, $r5, $r7);

        return $r2;
    }

    private static java.util.List parents(androidx.work.impl.WorkManagerImpl, java.util.List)
    {
        androidx.work.impl.WorkManagerImpl r0;
        java.util.List r1, $r10, $r11, $r12;
        java.util.ArrayList r2, $r5;
        java.util.Iterator r3;
        androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo r4;
        int $i0;
        boolean $z0;
        java.lang.Object $r6;
        androidx.work.impl.WorkContinuationImpl $r7;
        java.lang.String $r8;
        androidx.work.ExistingWorkPolicy $r9;

        r0 := @parameter0: androidx.work.impl.WorkManagerImpl;

        r1 := @parameter1: java.util.List;

        if r1 != null goto label1;

        return null;

     label1:
        $r5 = new java.util.ArrayList;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>($i0);

        r2 = $r5;

        r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo) $r6;

        $r7 = new androidx.work.impl.WorkContinuationImpl;

        $r8 = virtualinvoke r4.<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo: java.lang.String getName()>();

        $r9 = virtualinvoke r4.<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo: androidx.work.ExistingWorkPolicy getExistingWorkPolicy()>();

        $r10 = virtualinvoke r4.<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo: java.util.List getWork()>();

        $r11 = virtualinvoke r4.<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo: java.util.List getParentInfos()>();

        $r12 = staticinvoke <androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl$WorkContinuationImplInfo: java.util.List parents(androidx.work.impl.WorkManagerImpl,java.util.List)>(r0, $r11);

        specialinvoke $r7.<androidx.work.impl.WorkContinuationImpl: void <init>(androidx.work.impl.WorkManagerImpl,java.lang.String,androidx.work.ExistingWorkPolicy,java.util.List,java.util.List)>(r0, $r8, $r9, $r10, $r12);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label2;

     label3:
        return r2;
    }

