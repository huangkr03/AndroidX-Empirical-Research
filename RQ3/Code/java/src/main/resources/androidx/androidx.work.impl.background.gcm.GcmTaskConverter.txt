androidx.work.impl.background.gcm.GcmTaskConverter
<androidx.work.impl.background.gcm.GcmTaskConverter: long EXECUTION_WINDOW_SIZE_IN_SECONDS>
<androidx.work.impl.background.gcm.GcmTaskConverter: java.lang.String EXTRA_WORK_GENERATION>
    public void <init>()
    {
        androidx.work.impl.background.gcm.GcmTaskConverter r0;

        r0 := @this: androidx.work.impl.background.gcm.GcmTaskConverter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    com.google.android.gms.gcm.OneoffTask convert(androidx.work.impl.model.WorkSpec)
    {
        androidx.work.impl.background.gcm.GcmTaskConverter r0;
        androidx.work.impl.model.WorkSpec r1;
        android.os.Bundle r2, $r4;
        com.google.android.gms.gcm.OneoffTask$Builder r3, $r5, $r6, $r8, $r9, $r10;
        long l0, l1, l2, $l4, $l5, $l6, $l7;
        int $i3;
        java.lang.String $r7;
        java.util.concurrent.TimeUnit $r12, $r13, $r14, $r15;
        com.google.android.gms.gcm.OneoffTask $r18;

        r0 := @this: androidx.work.impl.background.gcm.GcmTaskConverter;

        r1 := @parameter0: androidx.work.impl.model.WorkSpec;

        $r4 = new android.os.Bundle;

        specialinvoke $r4.<android.os.Bundle: void <init>()>();

        r2 = $r4;

        $i3 = virtualinvoke r1.<androidx.work.impl.model.WorkSpec: int getGeneration()>();

        virtualinvoke r2.<android.os.Bundle: void putInt(java.lang.String,int)>("androidx.work.impl.background.gcm.GENERATION", $i3);

        $r5 = new com.google.android.gms.gcm.OneoffTask$Builder;

        specialinvoke $r5.<com.google.android.gms.gcm.OneoffTask$Builder: void <init>()>();

        r3 = $r5;

        $r6 = virtualinvoke r3.<com.google.android.gms.gcm.OneoffTask$Builder: com.google.android.gms.gcm.OneoffTask$Builder setService(java.lang.Class)>(class "Landroidx/work/impl/background/gcm/WorkManagerGcmService;");

        $r7 = r1.<androidx.work.impl.model.WorkSpec: java.lang.String id>;

        $r8 = virtualinvoke $r6.<com.google.android.gms.gcm.OneoffTask$Builder: com.google.android.gms.gcm.OneoffTask$Builder setTag(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<com.google.android.gms.gcm.OneoffTask$Builder: com.google.android.gms.gcm.OneoffTask$Builder setUpdateCurrent(boolean)>(1);

        $r10 = virtualinvoke $r9.<com.google.android.gms.gcm.OneoffTask$Builder: com.google.android.gms.gcm.OneoffTask$Builder setExtras(android.os.Bundle)>(r2);

        virtualinvoke $r10.<com.google.android.gms.gcm.OneoffTask$Builder: com.google.android.gms.gcm.OneoffTask$Builder setPersisted(boolean)>(0);

        $r12 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $l4 = virtualinvoke r0.<androidx.work.impl.background.gcm.GcmTaskConverter: long now()>();

        $r13 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        l0 = virtualinvoke $r12.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($l4, $r13);

        $r14 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $l5 = virtualinvoke r1.<androidx.work.impl.model.WorkSpec: long calculateNextRunTime()>();

        $r15 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        l1 = virtualinvoke $r14.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($l5, $r15);

        $l6 = l1 - l0;

        l2 = staticinvoke <java.lang.Math: long max(long,long)>($l6, 0L);

        $l7 = l2 + 5L;

        virtualinvoke r3.<com.google.android.gms.gcm.OneoffTask$Builder: com.google.android.gms.gcm.OneoffTask$Builder setExecutionWindow(long,long)>(l2, $l7);

        staticinvoke <androidx.work.impl.background.gcm.GcmTaskConverter: com.google.android.gms.gcm.Task$Builder applyConstraints(com.google.android.gms.gcm.Task$Builder,androidx.work.impl.model.WorkSpec)>(r3, r1);

        $r18 = virtualinvoke r3.<com.google.android.gms.gcm.OneoffTask$Builder: com.google.android.gms.gcm.OneoffTask build()>();

        return $r18;
    }

    public long now()
    {
        androidx.work.impl.background.gcm.GcmTaskConverter r0;
        long $l0;

        r0 := @this: androidx.work.impl.background.gcm.GcmTaskConverter;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        return $l0;
    }

    private static com.google.android.gms.gcm.Task$Builder applyConstraints(com.google.android.gms.gcm.Task$Builder, androidx.work.impl.model.WorkSpec)
    {
        com.google.android.gms.gcm.Task$Builder r0;
        androidx.work.impl.model.WorkSpec r1;
        androidx.work.Constraints r2;
        androidx.work.NetworkType r3, $r12;
        boolean $z0, $z1;
        int[] $r6;
        int $i0, $i1, $i2;

        r0 := @parameter0: com.google.android.gms.gcm.Task$Builder;

        r1 := @parameter1: androidx.work.impl.model.WorkSpec;

        virtualinvoke r0.<com.google.android.gms.gcm.Task$Builder: com.google.android.gms.gcm.Task$Builder setRequiresCharging(boolean)>(0);

        virtualinvoke r0.<com.google.android.gms.gcm.Task$Builder: com.google.android.gms.gcm.Task$Builder setRequiredNetwork(int)>(2);

        $z0 = virtualinvoke r1.<androidx.work.impl.model.WorkSpec: boolean hasConstraints()>();

        if $z0 == 0 goto label7;

        r2 = r1.<androidx.work.impl.model.WorkSpec: androidx.work.Constraints constraints>;

        r3 = virtualinvoke r2.<androidx.work.Constraints: androidx.work.NetworkType getRequiredNetworkType()>();

        $r6 = <androidx.work.impl.background.gcm.GcmTaskConverter$1: int[] $SwitchMap$androidx$work$NetworkType>;

        $i0 = virtualinvoke r3.<androidx.work.NetworkType: int ordinal()>();

        $i1 = $r6[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label1;
            case 3: goto label1;
            case 4: goto label2;
            case 5: goto label3;
            default: goto label4;
        };

     label1:
        virtualinvoke r0.<com.google.android.gms.gcm.Task$Builder: com.google.android.gms.gcm.Task$Builder setRequiredNetwork(int)>(0);

        goto label5;

     label2:
        virtualinvoke r0.<com.google.android.gms.gcm.Task$Builder: com.google.android.gms.gcm.Task$Builder setRequiredNetwork(int)>(1);

        goto label5;

     label3:
        virtualinvoke r0.<com.google.android.gms.gcm.Task$Builder: com.google.android.gms.gcm.Task$Builder setRequiredNetwork(int)>(2);

        goto label5;

     label4:
        $i2 = <android.os.Build$VERSION: int SDK_INT>;

        if $i2 < 30 goto label5;

        $r12 = <androidx.work.NetworkType: androidx.work.NetworkType TEMPORARILY_UNMETERED>;

        if r3 != $r12 goto label5;

        virtualinvoke r0.<com.google.android.gms.gcm.Task$Builder: com.google.android.gms.gcm.Task$Builder setRequiredNetwork(int)>(2);

     label5:
        $z1 = virtualinvoke r2.<androidx.work.Constraints: boolean requiresCharging()>();

        if $z1 == 0 goto label6;

        virtualinvoke r0.<com.google.android.gms.gcm.Task$Builder: com.google.android.gms.gcm.Task$Builder setRequiresCharging(boolean)>(1);

        goto label7;

     label6:
        virtualinvoke r0.<com.google.android.gms.gcm.Task$Builder: com.google.android.gms.gcm.Task$Builder setRequiresCharging(boolean)>(0);

     label7:
        return r0;
    }

androidx.work.impl.background.gcm.GcmTaskConverter$1
<androidx.work.impl.background.gcm.GcmTaskConverter$1: int[] $SwitchMap$androidx$work$NetworkType>
    static void <clinit>()
    {
        androidx.work.NetworkType[] $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        int[] $r1, $r3, $r5, $r7, $r9, $r11;
        androidx.work.NetworkType $r2, $r4, $r6, $r8, $r10;
        java.lang.Throwable $r12, $r13, $r14, $r15, $r16, r17, r18, r19, r20, r21;

        $r0 = staticinvoke <androidx.work.NetworkType: androidx.work.NetworkType[] values()>();

        $i0 = lengthof $r0;

        $r1 = newarray (int)[$i0];

        <androidx.work.impl.background.gcm.GcmTaskConverter$1: int[] $SwitchMap$androidx$work$NetworkType> = $r1;

     label01:
        $r3 = <androidx.work.impl.background.gcm.GcmTaskConverter$1: int[] $SwitchMap$androidx$work$NetworkType>;

        $r2 = <androidx.work.NetworkType: androidx.work.NetworkType METERED>;

        $i1 = virtualinvoke $r2.<androidx.work.NetworkType: int ordinal()>();

        $r3[$i1] = 1;

     label02:
        goto label04;

     label03:
        $r16 := @caughtexception;

        r17 = $r16;

     label04:
        $r5 = <androidx.work.impl.background.gcm.GcmTaskConverter$1: int[] $SwitchMap$androidx$work$NetworkType>;

        $r4 = <androidx.work.NetworkType: androidx.work.NetworkType NOT_ROAMING>;

        $i2 = virtualinvoke $r4.<androidx.work.NetworkType: int ordinal()>();

        $r5[$i2] = 2;

     label05:
        goto label07;

     label06:
        $r15 := @caughtexception;

        r18 = $r15;

     label07:
        $r7 = <androidx.work.impl.background.gcm.GcmTaskConverter$1: int[] $SwitchMap$androidx$work$NetworkType>;

        $r6 = <androidx.work.NetworkType: androidx.work.NetworkType CONNECTED>;

        $i3 = virtualinvoke $r6.<androidx.work.NetworkType: int ordinal()>();

        $r7[$i3] = 3;

     label08:
        goto label10;

     label09:
        $r14 := @caughtexception;

        r19 = $r14;

     label10:
        $r9 = <androidx.work.impl.background.gcm.GcmTaskConverter$1: int[] $SwitchMap$androidx$work$NetworkType>;

        $r8 = <androidx.work.NetworkType: androidx.work.NetworkType UNMETERED>;

        $i4 = virtualinvoke $r8.<androidx.work.NetworkType: int ordinal()>();

        $r9[$i4] = 4;

     label11:
        goto label13;

     label12:
        $r13 := @caughtexception;

        r20 = $r13;

     label13:
        $r11 = <androidx.work.impl.background.gcm.GcmTaskConverter$1: int[] $SwitchMap$androidx$work$NetworkType>;

        $r10 = <androidx.work.NetworkType: androidx.work.NetworkType NOT_REQUIRED>;

        $i5 = virtualinvoke $r10.<androidx.work.NetworkType: int ordinal()>();

        $r11[$i5] = 5;

     label14:
        goto label16;

     label15:
        $r12 := @caughtexception;

        r21 = $r12;

     label16:
        return;

        catch java.lang.NoSuchFieldError from label01 to label02 with label03;
        catch java.lang.NoSuchFieldError from label04 to label05 with label06;
        catch java.lang.NoSuchFieldError from label07 to label08 with label09;
        catch java.lang.NoSuchFieldError from label10 to label11 with label12;
        catch java.lang.NoSuchFieldError from label13 to label14 with label15;
    }

