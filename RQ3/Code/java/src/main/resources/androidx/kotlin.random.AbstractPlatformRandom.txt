kotlin.random.AbstractPlatformRandom
    public void <init>()
    {
        kotlin.random.AbstractPlatformRandom $r0;

        $r0 := @this: kotlin.random.AbstractPlatformRandom;

        specialinvoke $r0.<kotlin.random.Random: void <init>()>();

        return;
    }

<kotlin.random.AbstractPlatformRandom: java.util.Random getImpl()>
    public int nextBits(int)
    {
        kotlin.random.AbstractPlatformRandom $r0;
        int $i0, $i1;
        java.util.Random $r1;

        $r0 := @this: kotlin.random.AbstractPlatformRandom;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke $r0.<kotlin.random.AbstractPlatformRandom: java.util.Random getImpl()>();

        $i1 = virtualinvoke $r1.<java.util.Random: int nextInt()>();

        $i0 = staticinvoke <kotlin.random.RandomKt: int takeUpperBits(int,int)>($i1, $i0);

        return $i0;
    }

    public boolean nextBoolean()
    {
        kotlin.random.AbstractPlatformRandom $r0;
        java.util.Random $r1;
        boolean $z0;

        $r0 := @this: kotlin.random.AbstractPlatformRandom;

        $r1 = virtualinvoke $r0.<kotlin.random.AbstractPlatformRandom: java.util.Random getImpl()>();

        $z0 = virtualinvoke $r1.<java.util.Random: boolean nextBoolean()>();

        return $z0;
    }

    public byte[] nextBytes(byte[])
    {
        kotlin.random.AbstractPlatformRandom $r0;
        byte[] $r1;
        java.util.Random $r2;

        $r0 := @this: kotlin.random.AbstractPlatformRandom;

        $r1 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "array");

        $r2 = virtualinvoke $r0.<kotlin.random.AbstractPlatformRandom: java.util.Random getImpl()>();

        virtualinvoke $r2.<java.util.Random: void nextBytes(byte[])>($r1);

        return $r1;
    }

    public double nextDouble()
    {
        kotlin.random.AbstractPlatformRandom $r0;
        java.util.Random $r1;
        double $d0;

        $r0 := @this: kotlin.random.AbstractPlatformRandom;

        $r1 = virtualinvoke $r0.<kotlin.random.AbstractPlatformRandom: java.util.Random getImpl()>();

        $d0 = virtualinvoke $r1.<java.util.Random: double nextDouble()>();

        return $d0;
    }

    public float nextFloat()
    {
        kotlin.random.AbstractPlatformRandom $r0;
        java.util.Random $r1;
        float $f0;

        $r0 := @this: kotlin.random.AbstractPlatformRandom;

        $r1 = virtualinvoke $r0.<kotlin.random.AbstractPlatformRandom: java.util.Random getImpl()>();

        $f0 = virtualinvoke $r1.<java.util.Random: float nextFloat()>();

        return $f0;
    }

    public int nextInt()
    {
        kotlin.random.AbstractPlatformRandom $r0;
        java.util.Random $r1;
        int $i0;

        $r0 := @this: kotlin.random.AbstractPlatformRandom;

        $r1 = virtualinvoke $r0.<kotlin.random.AbstractPlatformRandom: java.util.Random getImpl()>();

        $i0 = virtualinvoke $r1.<java.util.Random: int nextInt()>();

        return $i0;
    }

    public int nextInt(int)
    {
        kotlin.random.AbstractPlatformRandom $r0;
        int $i0;
        java.util.Random $r1;

        $r0 := @this: kotlin.random.AbstractPlatformRandom;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke $r0.<kotlin.random.AbstractPlatformRandom: java.util.Random getImpl()>();

        $i0 = virtualinvoke $r1.<java.util.Random: int nextInt(int)>($i0);

        return $i0;
    }

    public long nextLong()
    {
        kotlin.random.AbstractPlatformRandom $r0;
        java.util.Random $r1;
        long $l0;

        $r0 := @this: kotlin.random.AbstractPlatformRandom;

        $r1 = virtualinvoke $r0.<kotlin.random.AbstractPlatformRandom: java.util.Random getImpl()>();

        $l0 = virtualinvoke $r1.<java.util.Random: long nextLong()>();

        return $l0;
    }

