androidx.camera.camera2.internal.FocusMeteringControl
<androidx.camera.camera2.internal.FocusMeteringControl: long AUTO_FOCUS_TIMEOUT_DURATION>
<androidx.camera.camera2.internal.FocusMeteringControl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>
<androidx.camera.camera2.internal.FocusMeteringControl: java.util.concurrent.Executor mExecutor>
<androidx.camera.camera2.internal.FocusMeteringControl: java.util.concurrent.ScheduledExecutorService mScheduler>
<androidx.camera.camera2.internal.FocusMeteringControl: boolean mIsActive>
<androidx.camera.camera2.internal.FocusMeteringControl: android.util.Rational mPreviewAspectRatio>
<androidx.camera.camera2.internal.FocusMeteringControl: android.hardware.camera2.params.MeteringRectangle[] EMPTY_RECTANGLES>
<androidx.camera.camera2.internal.FocusMeteringControl: androidx.camera.camera2.internal.compat.workaround.MeteringRegionCorrection mMeteringRegionCorrection>
<androidx.camera.camera2.internal.FocusMeteringControl: boolean mIsInAfAutoMode>
<androidx.camera.camera2.internal.FocusMeteringControl: java.lang.Integer mCurrentAfState>
<androidx.camera.camera2.internal.FocusMeteringControl: java.util.concurrent.ScheduledFuture mAutoCancelHandle>
<androidx.camera.camera2.internal.FocusMeteringControl: java.util.concurrent.ScheduledFuture mAutoFocusTimeoutHandle>
<androidx.camera.camera2.internal.FocusMeteringControl: long mFocusTimeoutCounter>
<androidx.camera.camera2.internal.FocusMeteringControl: boolean mIsAutoFocusCompleted>
<androidx.camera.camera2.internal.FocusMeteringControl: boolean mIsFocusSuccessful>
<androidx.camera.camera2.internal.FocusMeteringControl: int mTemplate>
<androidx.camera.camera2.internal.FocusMeteringControl: androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener mSessionListenerForFocus>
<androidx.camera.camera2.internal.FocusMeteringControl: androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener mSessionListenerForCancel>
<androidx.camera.camera2.internal.FocusMeteringControl: android.hardware.camera2.params.MeteringRectangle[] mAfRects>
<androidx.camera.camera2.internal.FocusMeteringControl: android.hardware.camera2.params.MeteringRectangle[] mAeRects>
<androidx.camera.camera2.internal.FocusMeteringControl: android.hardware.camera2.params.MeteringRectangle[] mAwbRects>
<androidx.camera.camera2.internal.FocusMeteringControl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mRunningActionCompleter>
<androidx.camera.camera2.internal.FocusMeteringControl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mRunningCancelCompleter>
    void <init>(androidx.camera.camera2.internal.Camera2CameraControlImpl, java.util.concurrent.ScheduledExecutorService, java.util.concurrent.Executor, androidx.camera.core.impl.Quirks)
    {
        androidx.camera.camera2.internal.FocusMeteringControl r0;
        androidx.camera.camera2.internal.Camera2CameraControlImpl r1;
        java.util.concurrent.ScheduledExecutorService r2;
        java.util.concurrent.Executor r3;
        androidx.camera.core.impl.Quirks r4;
        java.lang.Integer $r5;
        android.hardware.camera2.params.MeteringRectangle[] $r6, $r7, $r8;
        androidx.camera.camera2.internal.compat.workaround.MeteringRegionCorrection $r9;

        r0 := @this: androidx.camera.camera2.internal.FocusMeteringControl;

        r1 := @parameter0: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        r2 := @parameter1: java.util.concurrent.ScheduledExecutorService;

        r3 := @parameter2: java.util.concurrent.Executor;

        r4 := @parameter3: androidx.camera.core.impl.Quirks;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: boolean mIsActive> = 0;

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: android.util.Rational mPreviewAspectRatio> = null;

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: boolean mIsInAfAutoMode> = 0;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: java.lang.Integer mCurrentAfState> = $r5;

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: long mFocusTimeoutCounter> = 0L;

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: boolean mIsAutoFocusCompleted> = 0;

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: boolean mIsFocusSuccessful> = 0;

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: int mTemplate> = 1;

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener mSessionListenerForFocus> = null;

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener mSessionListenerForCancel> = null;

        $r6 = <androidx.camera.camera2.internal.FocusMeteringControl: android.hardware.camera2.params.MeteringRectangle[] EMPTY_RECTANGLES>;

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: android.hardware.camera2.params.MeteringRectangle[] mAfRects> = $r6;

        $r7 = <androidx.camera.camera2.internal.FocusMeteringControl: android.hardware.camera2.params.MeteringRectangle[] EMPTY_RECTANGLES>;

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: android.hardware.camera2.params.MeteringRectangle[] mAeRects> = $r7;

        $r8 = <androidx.camera.camera2.internal.FocusMeteringControl: android.hardware.camera2.params.MeteringRectangle[] EMPTY_RECTANGLES>;

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: android.hardware.camera2.params.MeteringRectangle[] mAwbRects> = $r8;

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mRunningActionCompleter> = null;

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mRunningCancelCompleter> = null;

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl> = r1;

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: java.util.concurrent.Executor mExecutor> = r3;

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: java.util.concurrent.ScheduledExecutorService mScheduler> = r2;

        $r9 = new androidx.camera.camera2.internal.compat.workaround.MeteringRegionCorrection;

        specialinvoke $r9.<androidx.camera.camera2.internal.compat.workaround.MeteringRegionCorrection: void <init>(androidx.camera.core.impl.Quirks)>(r4);

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.camera.camera2.internal.compat.workaround.MeteringRegionCorrection mMeteringRegionCorrection> = $r9;

        return;
    }

    void setActive(boolean)
    {
        androidx.camera.camera2.internal.FocusMeteringControl r0;
        boolean z0, $z1, $z2;

        r0 := @this: androidx.camera.camera2.internal.FocusMeteringControl;

        z0 := @parameter0: boolean;

        $z1 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: boolean mIsActive>;

        if z0 != $z1 goto label1;

        return;

     label1:
        r0.<androidx.camera.camera2.internal.FocusMeteringControl: boolean mIsActive> = z0;

        $z2 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: boolean mIsActive>;

        if $z2 != 0 goto label2;

        virtualinvoke r0.<androidx.camera.camera2.internal.FocusMeteringControl: void cancelFocusAndMeteringWithoutAsyncResult()>();

     label2:
        return;
    }

    public void setPreviewAspectRatio(android.util.Rational)
    {
        androidx.camera.camera2.internal.FocusMeteringControl r0;
        android.util.Rational r1;

        r0 := @this: androidx.camera.camera2.internal.FocusMeteringControl;

        r1 := @parameter0: android.util.Rational;

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: android.util.Rational mPreviewAspectRatio> = r1;

        return;
    }

    private android.util.Rational getDefaultAspectRatio()
    {
        androidx.camera.camera2.internal.FocusMeteringControl r0;
        android.graphics.Rect r1;
        android.util.Rational $r2, $r4, $r5;
        androidx.camera.camera2.internal.Camera2CameraControlImpl $r3;
        int $i0, $i1;

        r0 := @this: androidx.camera.camera2.internal.FocusMeteringControl;

        $r2 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: android.util.Rational mPreviewAspectRatio>;

        if $r2 == null goto label1;

        $r5 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: android.util.Rational mPreviewAspectRatio>;

        return $r5;

     label1:
        $r3 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>;

        r1 = virtualinvoke $r3.<androidx.camera.camera2.internal.Camera2CameraControlImpl: android.graphics.Rect getCropSensorRegion()>();

        $r4 = new android.util.Rational;

        $i0 = virtualinvoke r1.<android.graphics.Rect: int width()>();

        $i1 = virtualinvoke r1.<android.graphics.Rect: int height()>();

        specialinvoke $r4.<android.util.Rational: void <init>(int,int)>($i0, $i1);

        return $r4;
    }

    void setTemplate(int)
    {
        androidx.camera.camera2.internal.FocusMeteringControl r0;
        int i0;

        r0 := @this: androidx.camera.camera2.internal.FocusMeteringControl;

        i0 := @parameter0: int;

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: int mTemplate> = i0;

        return;
    }

    void addFocusMeteringOptions(androidx.camera.camera2.impl.Camera2ImplConfig$Builder)
    {
        androidx.camera.camera2.internal.FocusMeteringControl r0;
        androidx.camera.camera2.impl.Camera2ImplConfig$Builder r1;
        int i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0;
        androidx.camera.camera2.internal.Camera2CameraControlImpl $r2;
        android.hardware.camera2.CaptureRequest$Key $r3, $r10, $r13, $r16;
        java.lang.Integer $r4;
        android.hardware.camera2.params.MeteringRectangle[] $r6, $r7, $r8, $r9, $r12, $r15;

        r0 := @this: androidx.camera.camera2.internal.FocusMeteringControl;

        r1 := @parameter0: androidx.camera.camera2.impl.Camera2ImplConfig$Builder;

        $z0 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: boolean mIsInAfAutoMode>;

        if $z0 == 0 goto label1;

        $i5 = 1;

        goto label2;

     label1:
        $i5 = virtualinvoke r0.<androidx.camera.camera2.internal.FocusMeteringControl: int getDefaultAfMode()>();

     label2:
        i0 = $i5;

        $r3 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AF_MODE>;

        $r2 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>;

        $i1 = virtualinvoke $r2.<androidx.camera.camera2.internal.Camera2CameraControlImpl: int getSupportedAfMode(int)>(i0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke r1.<androidx.camera.camera2.impl.Camera2ImplConfig$Builder: androidx.camera.camera2.impl.Camera2ImplConfig$Builder setCaptureRequestOption(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r3, $r4);

        $r6 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: android.hardware.camera2.params.MeteringRectangle[] mAfRects>;

        $i2 = lengthof $r6;

        if $i2 == 0 goto label3;

        $r16 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AF_REGIONS>;

        $r15 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: android.hardware.camera2.params.MeteringRectangle[] mAfRects>;

        virtualinvoke r1.<androidx.camera.camera2.impl.Camera2ImplConfig$Builder: androidx.camera.camera2.impl.Camera2ImplConfig$Builder setCaptureRequestOption(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r16, $r15);

     label3:
        $r7 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: android.hardware.camera2.params.MeteringRectangle[] mAeRects>;

        $i3 = lengthof $r7;

        if $i3 == 0 goto label4;

        $r13 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_REGIONS>;

        $r12 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: android.hardware.camera2.params.MeteringRectangle[] mAeRects>;

        virtualinvoke r1.<androidx.camera.camera2.impl.Camera2ImplConfig$Builder: androidx.camera.camera2.impl.Camera2ImplConfig$Builder setCaptureRequestOption(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r13, $r12);

     label4:
        $r8 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: android.hardware.camera2.params.MeteringRectangle[] mAwbRects>;

        $i4 = lengthof $r8;

        if $i4 == 0 goto label5;

        $r10 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AWB_REGIONS>;

        $r9 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: android.hardware.camera2.params.MeteringRectangle[] mAwbRects>;

        virtualinvoke r1.<androidx.camera.camera2.impl.Camera2ImplConfig$Builder: androidx.camera.camera2.impl.Camera2ImplConfig$Builder setCaptureRequestOption(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r10, $r9);

     label5:
        return;
    }

    private static boolean isValid(androidx.camera.core.MeteringPoint)
    {
        androidx.camera.core.MeteringPoint r0;
        float $f0, $f1, $f2, $f3;
        byte $b0, $b1, $b2, $b3;
        boolean $z0;

        r0 := @parameter0: androidx.camera.core.MeteringPoint;

        $f0 = virtualinvoke r0.<androidx.camera.core.MeteringPoint: float getX()>();

        $b0 = $f0 cmpl 0.0F;

        if $b0 < 0 goto label1;

        $f1 = virtualinvoke r0.<androidx.camera.core.MeteringPoint: float getX()>();

        $b1 = $f1 cmpg 1.0F;

        if $b1 > 0 goto label1;

        $f2 = virtualinvoke r0.<androidx.camera.core.MeteringPoint: float getY()>();

        $b2 = $f2 cmpl 0.0F;

        if $b2 < 0 goto label1;

        $f3 = virtualinvoke r0.<androidx.camera.core.MeteringPoint: float getY()>();

        $b3 = $f3 cmpg 1.0F;

        if $b3 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static android.graphics.PointF getFovAdjustedPoint(androidx.camera.core.MeteringPoint, android.util.Rational, android.util.Rational, int, androidx.camera.camera2.internal.compat.workaround.MeteringRegionCorrection)
    {
        androidx.camera.core.MeteringPoint r0;
        android.util.Rational r1, r2, $r5, r6;
        int i0, $i1;
        androidx.camera.camera2.internal.compat.workaround.MeteringRegionCorrection r3;
        android.graphics.PointF r4;
        boolean $z0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, f8, f9, f10, f11;

        r0 := @parameter0: androidx.camera.core.MeteringPoint;

        r1 := @parameter1: android.util.Rational;

        r2 := @parameter2: android.util.Rational;

        i0 := @parameter3: int;

        r3 := @parameter4: androidx.camera.camera2.internal.compat.workaround.MeteringRegionCorrection;

        r6 = r2;

        $r5 = virtualinvoke r0.<androidx.camera.core.MeteringPoint: android.util.Rational getSurfaceAspectRatio()>();

        if $r5 == null goto label1;

        r6 = virtualinvoke r0.<androidx.camera.core.MeteringPoint: android.util.Rational getSurfaceAspectRatio()>();

     label1:
        r4 = virtualinvoke r3.<androidx.camera.camera2.internal.compat.workaround.MeteringRegionCorrection: android.graphics.PointF getCorrectedPoint(androidx.camera.core.MeteringPoint,int)>(r0, i0);

        $z0 = virtualinvoke r6.<android.util.Rational: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label3;

        $i1 = virtualinvoke r6.<android.util.Rational: int compareTo(android.util.Rational)>(r1);

        if $i1 <= 0 goto label2;

        $d6 = virtualinvoke r6.<android.util.Rational: double doubleValue()>();

        $d7 = virtualinvoke r1.<android.util.Rational: double doubleValue()>();

        $d8 = $d6 / $d7;

        f8 = (float) $d8;

        $d9 = (double) f8;

        $d10 = $d9 - 1.0;

        $d11 = $d10 / 2.0;

        f9 = (float) $d11;

        $f4 = r4.<android.graphics.PointF: float y>;

        $f6 = f9 + $f4;

        $f5 = 1.0F / f8;

        $f7 = $f6 * $f5;

        r4.<android.graphics.PointF: float y> = $f7;

        goto label3;

     label2:
        $d0 = virtualinvoke r1.<android.util.Rational: double doubleValue()>();

        $d1 = virtualinvoke r6.<android.util.Rational: double doubleValue()>();

        $d2 = $d0 / $d1;

        f10 = (float) $d2;

        $d3 = (double) f10;

        $d4 = $d3 - 1.0;

        $d5 = $d4 / 2.0;

        f11 = (float) $d5;

        $f0 = r4.<android.graphics.PointF: float x>;

        $f2 = f11 + $f0;

        $f1 = 1.0F / f10;

        $f3 = $f2 * $f1;

        r4.<android.graphics.PointF: float x> = $f3;

     label3:
        return r4;
    }

    private static android.hardware.camera2.params.MeteringRectangle getMeteringRect(androidx.camera.core.MeteringPoint, android.graphics.PointF, android.graphics.Rect)
    {
        androidx.camera.core.MeteringPoint r0;
        android.graphics.PointF r1;
        android.graphics.Rect r2, r3, $r4;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15;
        android.hardware.camera2.params.MeteringRectangle $r5;

        r0 := @parameter0: androidx.camera.core.MeteringPoint;

        r1 := @parameter1: android.graphics.PointF;

        r2 := @parameter2: android.graphics.Rect;

        $i4 = r2.<android.graphics.Rect: int left>;

        $f0 = (float) $i4;

        $f1 = r1.<android.graphics.PointF: float x>;

        $i5 = virtualinvoke r2.<android.graphics.Rect: int width()>();

        $f2 = (float) $i5;

        $f3 = $f1 * $f2;

        $f4 = $f0 + $f3;

        i0 = (int) $f4;

        $i6 = r2.<android.graphics.Rect: int top>;

        $f5 = (float) $i6;

        $f6 = r1.<android.graphics.PointF: float y>;

        $i7 = virtualinvoke r2.<android.graphics.Rect: int height()>();

        $f7 = (float) $i7;

        $f8 = $f6 * $f7;

        $f9 = $f5 + $f8;

        i1 = (int) $f9;

        $f10 = virtualinvoke r0.<androidx.camera.core.MeteringPoint: float getSize()>();

        $i8 = virtualinvoke r2.<android.graphics.Rect: int width()>();

        $f11 = (float) $i8;

        $f12 = $f10 * $f11;

        i2 = (int) $f12;

        $f13 = virtualinvoke r0.<androidx.camera.core.MeteringPoint: float getSize()>();

        $i9 = virtualinvoke r2.<android.graphics.Rect: int height()>();

        $f14 = (float) $i9;

        $f15 = $f13 * $f14;

        i3 = (int) $f15;

        $r4 = new android.graphics.Rect;

        $i10 = i2 / 2;

        $i17 = i0 - $i10;

        $i11 = i3 / 2;

        $i16 = i1 - $i11;

        $i12 = i2 / 2;

        $i15 = i0 + $i12;

        $i13 = i3 / 2;

        $i14 = i1 + $i13;

        specialinvoke $r4.<android.graphics.Rect: void <init>(int,int,int,int)>($i17, $i16, $i15, $i14);

        r3 = $r4;

        $i20 = r3.<android.graphics.Rect: int left>;

        $i19 = r2.<android.graphics.Rect: int right>;

        $i18 = r2.<android.graphics.Rect: int left>;

        $i21 = staticinvoke <androidx.camera.camera2.internal.FocusMeteringControl: int rangeLimit(int,int,int)>($i20, $i19, $i18);

        r3.<android.graphics.Rect: int left> = $i21;

        $i24 = r3.<android.graphics.Rect: int right>;

        $i23 = r2.<android.graphics.Rect: int right>;

        $i22 = r2.<android.graphics.Rect: int left>;

        $i25 = staticinvoke <androidx.camera.camera2.internal.FocusMeteringControl: int rangeLimit(int,int,int)>($i24, $i23, $i22);

        r3.<android.graphics.Rect: int right> = $i25;

        $i28 = r3.<android.graphics.Rect: int top>;

        $i27 = r2.<android.graphics.Rect: int bottom>;

        $i26 = r2.<android.graphics.Rect: int top>;

        $i29 = staticinvoke <androidx.camera.camera2.internal.FocusMeteringControl: int rangeLimit(int,int,int)>($i28, $i27, $i26);

        r3.<android.graphics.Rect: int top> = $i29;

        $i32 = r3.<android.graphics.Rect: int bottom>;

        $i31 = r2.<android.graphics.Rect: int bottom>;

        $i30 = r2.<android.graphics.Rect: int top>;

        $i33 = staticinvoke <androidx.camera.camera2.internal.FocusMeteringControl: int rangeLimit(int,int,int)>($i32, $i31, $i30);

        r3.<android.graphics.Rect: int bottom> = $i33;

        $r5 = new android.hardware.camera2.params.MeteringRectangle;

        specialinvoke $r5.<android.hardware.camera2.params.MeteringRectangle: void <init>(android.graphics.Rect,int)>(r3, 1000);

        return $r5;
    }

    private static int rangeLimit(int, int, int)
    {
        int i0, i1, i2, $i3, $i4;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>(i0, i2);

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>($i3, i1);

        return $i4;
    }

    com.google.common.util.concurrent.ListenableFuture startFocusAndMetering(androidx.camera.core.FocusMeteringAction)
    {
        androidx.camera.camera2.internal.FocusMeteringControl r0;
        androidx.camera.core.FocusMeteringAction r1;
        com.google.common.util.concurrent.ListenableFuture $r2;

        r0 := @this: androidx.camera.camera2.internal.FocusMeteringControl;

        r1 := @parameter0: androidx.camera.core.FocusMeteringAction;

        $r2 = virtualinvoke r0.<androidx.camera.camera2.internal.FocusMeteringControl: com.google.common.util.concurrent.ListenableFuture startFocusAndMetering(androidx.camera.core.FocusMeteringAction,long)>(r1, 5000L);

        return $r2;
    }

    com.google.common.util.concurrent.ListenableFuture startFocusAndMetering(androidx.camera.core.FocusMeteringAction, long)
    {
        androidx.camera.camera2.internal.FocusMeteringControl r0;
        androidx.camera.core.FocusMeteringAction r1;
        long l0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Resolver $r2;
        com.google.common.util.concurrent.ListenableFuture $r3;

        r0 := @this: androidx.camera.camera2.internal.FocusMeteringControl;

        r1 := @parameter0: androidx.camera.core.FocusMeteringAction;

        l0 := @parameter1: long;

        $r2 = dynamicinvoke "attachCompleter" <androidx.concurrent.futures.CallbackToFutureAdapter$Resolver (androidx.camera.camera2.internal.FocusMeteringControl,androidx.camera.core.FocusMeteringAction,long)>(r0, r1, l0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.FocusMeteringControl: java.lang.Object lambda$startFocusAndMetering$1(androidx.camera.core.FocusMeteringAction,long,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer));

        $r3 = staticinvoke <androidx.concurrent.futures.CallbackToFutureAdapter: com.google.common.util.concurrent.ListenableFuture getFuture(androidx.concurrent.futures.CallbackToFutureAdapter$Resolver)>($r2);

        return $r3;
    }

    private java.util.List getMeteringRectangles(java.util.List, int, android.util.Rational, android.graphics.Rect, int)
    {
        androidx.camera.camera2.internal.FocusMeteringControl r0;
        java.util.List r1, $r10, $r13;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        android.util.Rational r2, r5, $r12;
        android.graphics.Rect r3;
        java.util.ArrayList r4, $r11;
        java.util.Iterator r6;
        androidx.camera.core.MeteringPoint r7;
        android.graphics.PointF r8;
        android.hardware.camera2.params.MeteringRectangle r9;
        boolean $z0, $z1, $z3;
        java.lang.Object $r14;
        androidx.camera.camera2.internal.compat.workaround.MeteringRegionCorrection $r15;

        r0 := @this: androidx.camera.camera2.internal.FocusMeteringControl;

        r1 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        r2 := @parameter2: android.util.Rational;

        r3 := @parameter3: android.graphics.Rect;

        i1 := @parameter4: int;

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        if i0 != 0 goto label2;

     label1:
        $r10 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r10;

     label2:
        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        r4 = $r11;

        $r12 = new android.util.Rational;

        $i2 = virtualinvoke r3.<android.graphics.Rect: int width()>();

        $i3 = virtualinvoke r3.<android.graphics.Rect: int height()>();

        specialinvoke $r12.<android.util.Rational: void <init>(int,int)>($i2, $i3);

        r5 = $r12;

        r6 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z3 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label7;

        $r14 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (androidx.camera.core.MeteringPoint) $r14;

        $i4 = interfaceinvoke r4.<java.util.List: int size()>();

        if $i4 != i0 goto label4;

        goto label7;

     label4:
        $z1 = staticinvoke <androidx.camera.camera2.internal.FocusMeteringControl: boolean isValid(androidx.camera.core.MeteringPoint)>(r7);

        if $z1 != 0 goto label5;

        goto label3;

     label5:
        $r15 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.camera.camera2.internal.compat.workaround.MeteringRegionCorrection mMeteringRegionCorrection>;

        r8 = staticinvoke <androidx.camera.camera2.internal.FocusMeteringControl: android.graphics.PointF getFovAdjustedPoint(androidx.camera.core.MeteringPoint,android.util.Rational,android.util.Rational,int,androidx.camera.camera2.internal.compat.workaround.MeteringRegionCorrection)>(r7, r5, r2, i1, $r15);

        r9 = staticinvoke <androidx.camera.camera2.internal.FocusMeteringControl: android.hardware.camera2.params.MeteringRectangle getMeteringRect(androidx.camera.core.MeteringPoint,android.graphics.PointF,android.graphics.Rect)>(r7, r8, r3);

        $i5 = virtualinvoke r9.<android.hardware.camera2.params.MeteringRectangle: int getWidth()>();

        if $i5 == 0 goto label3;

        $i6 = virtualinvoke r9.<android.hardware.camera2.params.MeteringRectangle: int getHeight()>();

        if $i6 != 0 goto label6;

        goto label3;

     label6:
        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r9);

        goto label3;

     label7:
        $r13 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r4);

        return $r13;
    }

    void startFocusAndMeteringInternal(androidx.concurrent.futures.CallbackToFutureAdapter$Completer, androidx.camera.core.FocusMeteringAction, long)
    {
        androidx.camera.camera2.internal.FocusMeteringControl r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r1;
        androidx.camera.core.FocusMeteringAction r2;
        long l0;
        android.graphics.Rect r3;
        android.util.Rational r4;
        java.util.List r5, r6, r7, $r9, $r11, $r13;
        boolean $z0, $z1, $z2, $z3;
        androidx.camera.camera2.internal.Camera2CameraControlImpl $r8, $r10, $r12, $r14;
        int $i1, $i2, $i3;
        java.lang.IllegalArgumentException $r15;
        androidx.camera.core.CameraControl$OperationCanceledException $r16;
        android.hardware.camera2.params.MeteringRectangle[] $r17, $r19, $r20, $r22, $r23, $r25;
        java.lang.Object[] $r18, $r21, $r24;

        r0 := @this: androidx.camera.camera2.internal.FocusMeteringControl;

        r1 := @parameter0: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        r2 := @parameter1: androidx.camera.core.FocusMeteringAction;

        l0 := @parameter2: long;

        $z0 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: boolean mIsActive>;

        if $z0 != 0 goto label1;

        $r16 = new androidx.camera.core.CameraControl$OperationCanceledException;

        specialinvoke $r16.<androidx.camera.core.CameraControl$OperationCanceledException: void <init>(java.lang.String)>("Camera is not active.");

        virtualinvoke r1.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean setException(java.lang.Throwable)>($r16);

        return;

     label1:
        $r8 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>;

        r3 = virtualinvoke $r8.<androidx.camera.camera2.internal.Camera2CameraControlImpl: android.graphics.Rect getCropSensorRegion()>();

        r4 = specialinvoke r0.<androidx.camera.camera2.internal.FocusMeteringControl: android.util.Rational getDefaultAspectRatio()>();

        $r9 = virtualinvoke r2.<androidx.camera.core.FocusMeteringAction: java.util.List getMeteringPointsAf()>();

        $r10 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>;

        $i1 = virtualinvoke $r10.<androidx.camera.camera2.internal.Camera2CameraControlImpl: int getMaxAfRegionCount()>();

        r5 = specialinvoke r0.<androidx.camera.camera2.internal.FocusMeteringControl: java.util.List getMeteringRectangles(java.util.List,int,android.util.Rational,android.graphics.Rect,int)>($r9, $i1, r4, r3, 1);

        $r11 = virtualinvoke r2.<androidx.camera.core.FocusMeteringAction: java.util.List getMeteringPointsAe()>();

        $r12 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>;

        $i2 = virtualinvoke $r12.<androidx.camera.camera2.internal.Camera2CameraControlImpl: int getMaxAeRegionCount()>();

        r6 = specialinvoke r0.<androidx.camera.camera2.internal.FocusMeteringControl: java.util.List getMeteringRectangles(java.util.List,int,android.util.Rational,android.graphics.Rect,int)>($r11, $i2, r4, r3, 2);

        $r13 = virtualinvoke r2.<androidx.camera.core.FocusMeteringAction: java.util.List getMeteringPointsAwb()>();

        $r14 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>;

        $i3 = virtualinvoke $r14.<androidx.camera.camera2.internal.Camera2CameraControlImpl: int getMaxAwbRegionCount()>();

        r7 = specialinvoke r0.<androidx.camera.camera2.internal.FocusMeteringControl: java.util.List getMeteringRectangles(java.util.List,int,android.util.Rational,android.graphics.Rect,int)>($r13, $i3, r4, r3, 4);

        $z1 = interfaceinvoke r5.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label2;

        $z2 = interfaceinvoke r6.<java.util.List: boolean isEmpty()>();

        if $z2 == 0 goto label2;

        $z3 = interfaceinvoke r7.<java.util.List: boolean isEmpty()>();

        if $z3 == 0 goto label2;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("None of the specified AF/AE/AWB MeteringPoints is supported on this camera.");

        virtualinvoke r1.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean setException(java.lang.Throwable)>($r15);

        return;

     label2:
        specialinvoke r0.<androidx.camera.camera2.internal.FocusMeteringControl: void failActionFuture(java.lang.String)>("Cancelled by another startFocusAndMetering()");

        specialinvoke r0.<androidx.camera.camera2.internal.FocusMeteringControl: void failCancelFuture(java.lang.String)>("Cancelled by another startFocusAndMetering()");

        specialinvoke r0.<androidx.camera.camera2.internal.FocusMeteringControl: void disableAutoCancel()>();

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mRunningActionCompleter> = r1;

        $r17 = <androidx.camera.camera2.internal.FocusMeteringControl: android.hardware.camera2.params.MeteringRectangle[] EMPTY_RECTANGLES>;

        $r18 = interfaceinvoke r5.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r17);

        $r19 = (android.hardware.camera2.params.MeteringRectangle[]) $r18;

        $r20 = <androidx.camera.camera2.internal.FocusMeteringControl: android.hardware.camera2.params.MeteringRectangle[] EMPTY_RECTANGLES>;

        $r21 = interfaceinvoke r6.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r20);

        $r22 = (android.hardware.camera2.params.MeteringRectangle[]) $r21;

        $r23 = <androidx.camera.camera2.internal.FocusMeteringControl: android.hardware.camera2.params.MeteringRectangle[] EMPTY_RECTANGLES>;

        $r24 = interfaceinvoke r7.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r23);

        $r25 = (android.hardware.camera2.params.MeteringRectangle[]) $r24;

        specialinvoke r0.<androidx.camera.camera2.internal.FocusMeteringControl: void executeMeteringAction(android.hardware.camera2.params.MeteringRectangle[],android.hardware.camera2.params.MeteringRectangle[],android.hardware.camera2.params.MeteringRectangle[],androidx.camera.core.FocusMeteringAction,long)>($r19, $r22, $r25, r2, l0);

        return;
    }

    void triggerAf(androidx.concurrent.futures.CallbackToFutureAdapter$Completer, boolean)
    {
        androidx.camera.camera2.internal.FocusMeteringControl r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r1;
        boolean z0, $z1;
        androidx.camera.core.impl.CaptureConfig$Builder r2, r20;
        androidx.camera.camera2.impl.Camera2ImplConfig$Builder r3, r21;
        int $i0, $i1;
        android.hardware.camera2.CaptureRequest$Key $r6, $r15;
        java.lang.Integer $r7, $r16;
        androidx.camera.camera2.impl.Camera2ImplConfig $r9;
        androidx.camera.camera2.internal.Camera2CameraControlImpl $r11, $r14;
        androidx.camera.core.impl.CaptureConfig $r12;
        java.util.List $r13;
        androidx.camera.core.CameraControl$OperationCanceledException r19;
        androidx.camera.camera2.internal.FocusMeteringControl$1 r22;
        androidx.camera.core.impl.Config r23;

        r0 := @this: androidx.camera.camera2.internal.FocusMeteringControl;

        r1 := @parameter0: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        z0 := @parameter1: boolean;

        $z1 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: boolean mIsActive>;

        if $z1 != 0 goto label2;

        if r1 == null goto label1;

        r19 = new androidx.camera.core.CameraControl$OperationCanceledException;

        specialinvoke r19.<androidx.camera.core.CameraControl$OperationCanceledException: void <init>(java.lang.String)>("Camera is not active.");

        virtualinvoke r1.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean setException(java.lang.Throwable)>(r19);

     label1:
        return;

     label2:
        r20 = new androidx.camera.core.impl.CaptureConfig$Builder;

        specialinvoke r20.<androidx.camera.core.impl.CaptureConfig$Builder: void <init>()>();

        r2 = r20;

        $i0 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: int mTemplate>;

        virtualinvoke r2.<androidx.camera.core.impl.CaptureConfig$Builder: void setTemplateType(int)>($i0);

        virtualinvoke r2.<androidx.camera.core.impl.CaptureConfig$Builder: void setUseRepeatingSurface(boolean)>(1);

        r21 = new androidx.camera.camera2.impl.Camera2ImplConfig$Builder;

        specialinvoke r21.<androidx.camera.camera2.impl.Camera2ImplConfig$Builder: void <init>()>();

        r3 = r21;

        $r6 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AF_TRIGGER>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r3.<androidx.camera.camera2.impl.Camera2ImplConfig$Builder: androidx.camera.camera2.impl.Camera2ImplConfig$Builder setCaptureRequestOption(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r6, $r7);

        if z0 == 0 goto label3;

        $r15 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_MODE>;

        $r14 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>;

        $i1 = virtualinvoke $r14.<androidx.camera.camera2.internal.Camera2CameraControlImpl: int getSupportedAeMode(int)>(1);

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke r3.<androidx.camera.camera2.impl.Camera2ImplConfig$Builder: androidx.camera.camera2.impl.Camera2ImplConfig$Builder setCaptureRequestOption(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r15, $r16);

     label3:
        $r9 = virtualinvoke r3.<androidx.camera.camera2.impl.Camera2ImplConfig$Builder: androidx.camera.camera2.impl.Camera2ImplConfig build()>();

        r23 = (androidx.camera.core.impl.Config) $r9;

        virtualinvoke r2.<androidx.camera.core.impl.CaptureConfig$Builder: void addImplementationOptions(androidx.camera.core.impl.Config)>(r23);

        r22 = new androidx.camera.camera2.internal.FocusMeteringControl$1;

        specialinvoke r22.<androidx.camera.camera2.internal.FocusMeteringControl$1: void <init>(androidx.camera.camera2.internal.FocusMeteringControl,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>(r0, r1);

        virtualinvoke r2.<androidx.camera.core.impl.CaptureConfig$Builder: void addCameraCaptureCallback(androidx.camera.core.impl.CameraCaptureCallback)>(r22);

        $r11 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>;

        $r12 = virtualinvoke r2.<androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.CaptureConfig build()>();

        $r13 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r12);

        virtualinvoke $r11.<androidx.camera.camera2.internal.Camera2CameraControlImpl: void submitCaptureRequestsInternal(java.util.List)>($r13);

        return;
    }

    void triggerAePrecapture(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)
    {
        androidx.camera.camera2.internal.FocusMeteringControl r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r1;
        androidx.camera.core.impl.CaptureConfig$Builder r2, r16;
        androidx.camera.camera2.impl.Camera2ImplConfig$Builder r3, r17;
        boolean $z0;
        int $i0;
        android.hardware.camera2.CaptureRequest$Key $r6;
        java.lang.Integer $r7;
        androidx.camera.camera2.impl.Camera2ImplConfig $r9;
        androidx.camera.camera2.internal.Camera2CameraControlImpl $r11;
        androidx.camera.core.impl.CaptureConfig $r12;
        java.util.List $r13;
        androidx.camera.core.CameraControl$OperationCanceledException r15;
        androidx.camera.camera2.internal.FocusMeteringControl$2 r18;
        androidx.camera.core.impl.Config r19;

        r0 := @this: androidx.camera.camera2.internal.FocusMeteringControl;

        r1 := @parameter0: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        $z0 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: boolean mIsActive>;

        if $z0 != 0 goto label2;

        if r1 == null goto label1;

        r15 = new androidx.camera.core.CameraControl$OperationCanceledException;

        specialinvoke r15.<androidx.camera.core.CameraControl$OperationCanceledException: void <init>(java.lang.String)>("Camera is not active.");

        virtualinvoke r1.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean setException(java.lang.Throwable)>(r15);

     label1:
        return;

     label2:
        r16 = new androidx.camera.core.impl.CaptureConfig$Builder;

        specialinvoke r16.<androidx.camera.core.impl.CaptureConfig$Builder: void <init>()>();

        r2 = r16;

        $i0 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: int mTemplate>;

        virtualinvoke r2.<androidx.camera.core.impl.CaptureConfig$Builder: void setTemplateType(int)>($i0);

        virtualinvoke r2.<androidx.camera.core.impl.CaptureConfig$Builder: void setUseRepeatingSurface(boolean)>(1);

        r17 = new androidx.camera.camera2.impl.Camera2ImplConfig$Builder;

        specialinvoke r17.<androidx.camera.camera2.impl.Camera2ImplConfig$Builder: void <init>()>();

        r3 = r17;

        $r6 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_PRECAPTURE_TRIGGER>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r3.<androidx.camera.camera2.impl.Camera2ImplConfig$Builder: androidx.camera.camera2.impl.Camera2ImplConfig$Builder setCaptureRequestOption(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r6, $r7);

        $r9 = virtualinvoke r3.<androidx.camera.camera2.impl.Camera2ImplConfig$Builder: androidx.camera.camera2.impl.Camera2ImplConfig build()>();

        r19 = (androidx.camera.core.impl.Config) $r9;

        virtualinvoke r2.<androidx.camera.core.impl.CaptureConfig$Builder: void addImplementationOptions(androidx.camera.core.impl.Config)>(r19);

        r18 = new androidx.camera.camera2.internal.FocusMeteringControl$2;

        specialinvoke r18.<androidx.camera.camera2.internal.FocusMeteringControl$2: void <init>(androidx.camera.camera2.internal.FocusMeteringControl,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>(r0, r1);

        virtualinvoke r2.<androidx.camera.core.impl.CaptureConfig$Builder: void addCameraCaptureCallback(androidx.camera.core.impl.CameraCaptureCallback)>(r18);

        $r11 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>;

        $r12 = virtualinvoke r2.<androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.CaptureConfig build()>();

        $r13 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r12);

        virtualinvoke $r11.<androidx.camera.camera2.internal.Camera2CameraControlImpl: void submitCaptureRequestsInternal(java.util.List)>($r13);

        return;
    }

    void cancelAfAeTrigger(boolean, boolean)
    {
        androidx.camera.camera2.internal.FocusMeteringControl r0;
        boolean z0, z1, $z2;
        androidx.camera.core.impl.CaptureConfig$Builder r1, r15;
        androidx.camera.camera2.impl.Camera2ImplConfig$Builder r2, r16;
        int $i0, $i1;
        android.hardware.camera2.CaptureRequest$Key $r5, $r8;
        java.lang.Integer $r6, $r9;
        androidx.camera.camera2.impl.Camera2ImplConfig $r11;
        androidx.camera.camera2.internal.Camera2CameraControlImpl $r12;
        androidx.camera.core.impl.CaptureConfig $r13;
        java.util.List $r14;
        androidx.camera.core.impl.Config r17;

        r0 := @this: androidx.camera.camera2.internal.FocusMeteringControl;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $z2 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: boolean mIsActive>;

        if $z2 != 0 goto label1;

        return;

     label1:
        r15 = new androidx.camera.core.impl.CaptureConfig$Builder;

        specialinvoke r15.<androidx.camera.core.impl.CaptureConfig$Builder: void <init>()>();

        r1 = r15;

        virtualinvoke r1.<androidx.camera.core.impl.CaptureConfig$Builder: void setUseRepeatingSurface(boolean)>(1);

        $i0 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: int mTemplate>;

        virtualinvoke r1.<androidx.camera.core.impl.CaptureConfig$Builder: void setTemplateType(int)>($i0);

        r16 = new androidx.camera.camera2.impl.Camera2ImplConfig$Builder;

        specialinvoke r16.<androidx.camera.camera2.impl.Camera2ImplConfig$Builder: void <init>()>();

        r2 = r16;

        if z0 == 0 goto label2;

        $r8 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AF_TRIGGER>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        virtualinvoke r2.<androidx.camera.camera2.impl.Camera2ImplConfig$Builder: androidx.camera.camera2.impl.Camera2ImplConfig$Builder setCaptureRequestOption(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r8, $r9);

     label2:
        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 < 23 goto label3;

        if z1 == 0 goto label3;

        $r5 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_PRECAPTURE_TRIGGER>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        virtualinvoke r2.<androidx.camera.camera2.impl.Camera2ImplConfig$Builder: androidx.camera.camera2.impl.Camera2ImplConfig$Builder setCaptureRequestOption(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r5, $r6);

     label3:
        $r11 = virtualinvoke r2.<androidx.camera.camera2.impl.Camera2ImplConfig$Builder: androidx.camera.camera2.impl.Camera2ImplConfig build()>();

        r17 = (androidx.camera.core.impl.Config) $r11;

        virtualinvoke r1.<androidx.camera.core.impl.CaptureConfig$Builder: void addImplementationOptions(androidx.camera.core.impl.Config)>(r17);

        $r12 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>;

        $r13 = virtualinvoke r1.<androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.CaptureConfig build()>();

        $r14 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r13);

        virtualinvoke $r12.<androidx.camera.camera2.internal.Camera2CameraControlImpl: void submitCaptureRequestsInternal(java.util.List)>($r14);

        return;
    }

    private void disableAutoCancel()
    {
        androidx.camera.camera2.internal.FocusMeteringControl r0;
        java.util.concurrent.ScheduledFuture $r1, $r2;

        r0 := @this: androidx.camera.camera2.internal.FocusMeteringControl;

        $r1 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: java.util.concurrent.ScheduledFuture mAutoCancelHandle>;

        if $r1 == null goto label1;

        $r2 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: java.util.concurrent.ScheduledFuture mAutoCancelHandle>;

        interfaceinvoke $r2.<java.util.concurrent.ScheduledFuture: boolean cancel(boolean)>(1);

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: java.util.concurrent.ScheduledFuture mAutoCancelHandle> = null;

     label1:
        return;
    }

    private void clearAutoFocusTimeoutHandle()
    {
        androidx.camera.camera2.internal.FocusMeteringControl r0;
        java.util.concurrent.ScheduledFuture $r1, $r2;

        r0 := @this: androidx.camera.camera2.internal.FocusMeteringControl;

        $r1 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: java.util.concurrent.ScheduledFuture mAutoFocusTimeoutHandle>;

        if $r1 == null goto label1;

        $r2 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: java.util.concurrent.ScheduledFuture mAutoFocusTimeoutHandle>;

        interfaceinvoke $r2.<java.util.concurrent.ScheduledFuture: boolean cancel(boolean)>(1);

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: java.util.concurrent.ScheduledFuture mAutoFocusTimeoutHandle> = null;

     label1:
        return;
    }

    int getDefaultAfMode()
    {
        androidx.camera.camera2.internal.FocusMeteringControl r0;
        int $i0;

        r0 := @this: androidx.camera.camera2.internal.FocusMeteringControl;

        $i0 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: int mTemplate>;

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 3: goto label1;
            default: goto label2;
        };

     label1:
        return 3;

     label2:
        return 4;
    }

    private boolean isAfModeSupported()
    {
        androidx.camera.camera2.internal.FocusMeteringControl r0;
        androidx.camera.camera2.internal.Camera2CameraControlImpl $r1;
        int $i0;
        boolean $z0;

        r0 := @this: androidx.camera.camera2.internal.FocusMeteringControl;

        $r1 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>;

        $i0 = virtualinvoke $r1.<androidx.camera.camera2.internal.Camera2CameraControlImpl: int getSupportedAfMode(int)>(1);

        if $i0 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    void completeActionFuture(boolean)
    {
        androidx.camera.camera2.internal.FocusMeteringControl r0;
        boolean z0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer $r1, $r2;
        androidx.camera.core.FocusMeteringResult $r3;

        r0 := @this: androidx.camera.camera2.internal.FocusMeteringControl;

        z0 := @parameter0: boolean;

        specialinvoke r0.<androidx.camera.camera2.internal.FocusMeteringControl: void clearAutoFocusTimeoutHandle()>();

        $r1 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mRunningActionCompleter>;

        if $r1 == null goto label1;

        $r2 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mRunningActionCompleter>;

        $r3 = staticinvoke <androidx.camera.core.FocusMeteringResult: androidx.camera.core.FocusMeteringResult create(boolean)>(z0);

        virtualinvoke $r2.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean set(java.lang.Object)>($r3);

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mRunningActionCompleter> = null;

     label1:
        return;
    }

    private void failActionFuture(java.lang.String)
    {
        androidx.camera.camera2.internal.FocusMeteringControl r0;
        java.lang.String r1;
        androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener $r2;
        androidx.camera.camera2.internal.Camera2CameraControlImpl $r3;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer $r4, $r6;
        androidx.camera.core.CameraControl$OperationCanceledException $r5;

        r0 := @this: androidx.camera.camera2.internal.FocusMeteringControl;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>;

        $r2 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener mSessionListenerForFocus>;

        virtualinvoke $r3.<androidx.camera.camera2.internal.Camera2CameraControlImpl: void removeCaptureResultListener(androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener)>($r2);

        $r4 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mRunningActionCompleter>;

        if $r4 == null goto label1;

        $r6 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mRunningActionCompleter>;

        $r5 = new androidx.camera.core.CameraControl$OperationCanceledException;

        specialinvoke $r5.<androidx.camera.core.CameraControl$OperationCanceledException: void <init>(java.lang.String)>(r1);

        virtualinvoke $r6.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean setException(java.lang.Throwable)>($r5);

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mRunningActionCompleter> = null;

     label1:
        return;
    }

    private void failCancelFuture(java.lang.String)
    {
        androidx.camera.camera2.internal.FocusMeteringControl r0;
        java.lang.String r1;
        androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener $r2;
        androidx.camera.camera2.internal.Camera2CameraControlImpl $r3;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer $r4, $r6;
        androidx.camera.core.CameraControl$OperationCanceledException $r5;

        r0 := @this: androidx.camera.camera2.internal.FocusMeteringControl;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>;

        $r2 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener mSessionListenerForCancel>;

        virtualinvoke $r3.<androidx.camera.camera2.internal.Camera2CameraControlImpl: void removeCaptureResultListener(androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener)>($r2);

        $r4 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mRunningCancelCompleter>;

        if $r4 == null goto label1;

        $r6 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mRunningCancelCompleter>;

        $r5 = new androidx.camera.core.CameraControl$OperationCanceledException;

        specialinvoke $r5.<androidx.camera.core.CameraControl$OperationCanceledException: void <init>(java.lang.String)>(r1);

        virtualinvoke $r6.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean setException(java.lang.Throwable)>($r5);

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mRunningCancelCompleter> = null;

     label1:
        return;
    }

    private void completeCancelFuture()
    {
        androidx.camera.camera2.internal.FocusMeteringControl r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer $r1, $r2;

        r0 := @this: androidx.camera.camera2.internal.FocusMeteringControl;

        $r1 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mRunningCancelCompleter>;

        if $r1 == null goto label1;

        $r2 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mRunningCancelCompleter>;

        virtualinvoke $r2.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean set(java.lang.Object)>(null);

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mRunningCancelCompleter> = null;

     label1:
        return;
    }

    private void executeMeteringAction(android.hardware.camera2.params.MeteringRectangle[], android.hardware.camera2.params.MeteringRectangle[], android.hardware.camera2.params.MeteringRectangle[], androidx.camera.core.FocusMeteringAction, long)
    {
        androidx.camera.camera2.internal.FocusMeteringControl r0;
        android.hardware.camera2.params.MeteringRectangle[] r1, r2, r3;
        androidx.camera.core.FocusMeteringAction r4;
        long l0, l1, $l2, $l3, $l4, l5;
        boolean z0, $z1, $z2;
        java.lang.Runnable r5, r6;
        androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener $r7, $r11, $r12;
        androidx.camera.camera2.internal.Camera2CameraControlImpl $r8, $r9, $r13, $r20;
        java.lang.Integer $r10;
        java.util.concurrent.TimeUnit $r14, $r18;
        java.util.concurrent.ScheduledExecutorService $r15, $r17;
        java.util.concurrent.ScheduledFuture $r16, $r19;

        r0 := @this: androidx.camera.camera2.internal.FocusMeteringControl;

        r1 := @parameter0: android.hardware.camera2.params.MeteringRectangle[];

        r2 := @parameter1: android.hardware.camera2.params.MeteringRectangle[];

        r3 := @parameter2: android.hardware.camera2.params.MeteringRectangle[];

        r4 := @parameter3: androidx.camera.core.FocusMeteringAction;

        l0 := @parameter4: long;

        $r8 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>;

        $r7 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener mSessionListenerForFocus>;

        virtualinvoke $r8.<androidx.camera.camera2.internal.Camera2CameraControlImpl: void removeCaptureResultListener(androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener)>($r7);

        specialinvoke r0.<androidx.camera.camera2.internal.FocusMeteringControl: void disableAutoCancel()>();

        specialinvoke r0.<androidx.camera.camera2.internal.FocusMeteringControl: void clearAutoFocusTimeoutHandle()>();

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: android.hardware.camera2.params.MeteringRectangle[] mAfRects> = r1;

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: android.hardware.camera2.params.MeteringRectangle[] mAeRects> = r2;

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: android.hardware.camera2.params.MeteringRectangle[] mAwbRects> = r3;

        $z1 = specialinvoke r0.<androidx.camera.camera2.internal.FocusMeteringControl: boolean shouldTriggerAF()>();

        if $z1 == 0 goto label1;

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: boolean mIsInAfAutoMode> = 1;

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: boolean mIsAutoFocusCompleted> = 0;

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: boolean mIsFocusSuccessful> = 0;

        $r20 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>;

        l5 = virtualinvoke $r20.<androidx.camera.camera2.internal.Camera2CameraControlImpl: long updateSessionConfigSynchronous()>();

        virtualinvoke r0.<androidx.camera.camera2.internal.FocusMeteringControl: void triggerAf(androidx.concurrent.futures.CallbackToFutureAdapter$Completer,boolean)>(null, 1);

        goto label2;

     label1:
        r0.<androidx.camera.camera2.internal.FocusMeteringControl: boolean mIsInAfAutoMode> = 0;

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: boolean mIsAutoFocusCompleted> = 1;

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: boolean mIsFocusSuccessful> = 0;

        $r9 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>;

        l5 = virtualinvoke $r9.<androidx.camera.camera2.internal.Camera2CameraControlImpl: long updateSessionConfigSynchronous()>();

     label2:
        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: java.lang.Integer mCurrentAfState> = $r10;

        z0 = specialinvoke r0.<androidx.camera.camera2.internal.FocusMeteringControl: boolean isAfModeSupported()>();

        $r11 = dynamicinvoke "onCaptureResult" <androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener (androidx.camera.camera2.internal.FocusMeteringControl,boolean,long)>(r0, z0, l5) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: boolean __METHODTYPE__(android.hardware.camera2.TotalCaptureResult), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.FocusMeteringControl: boolean lambda$executeMeteringAction$2(boolean,long,android.hardware.camera2.TotalCaptureResult)>, methodtype: boolean __METHODTYPE__(android.hardware.camera2.TotalCaptureResult));

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener mSessionListenerForFocus> = $r11;

        $r13 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>;

        $r12 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener mSessionListenerForFocus>;

        virtualinvoke $r13.<androidx.camera.camera2.internal.Camera2CameraControlImpl: void addCaptureResultListener(androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener)>($r12);

        $l2 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: long mFocusTimeoutCounter>;

        $l3 = $l2 + 1L;

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: long mFocusTimeoutCounter> = $l3;

        l1 = $l3;

        r5 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.camera2.internal.FocusMeteringControl,long)>(r0, l1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.FocusMeteringControl: void lambda$executeMeteringAction$4(long)>, methodtype: void __METHODTYPE__());

        $r15 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: java.util.concurrent.ScheduledExecutorService mScheduler>;

        $r14 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r16 = interfaceinvoke $r15.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>(r5, l0, $r14);

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: java.util.concurrent.ScheduledFuture mAutoFocusTimeoutHandle> = $r16;

        $z2 = virtualinvoke r4.<androidx.camera.core.FocusMeteringAction: boolean isAutoCancelEnabled()>();

        if $z2 == 0 goto label3;

        r6 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.camera2.internal.FocusMeteringControl,long)>(r0, l1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.FocusMeteringControl: void lambda$executeMeteringAction$6(long)>, methodtype: void __METHODTYPE__());

        $r17 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: java.util.concurrent.ScheduledExecutorService mScheduler>;

        $l4 = virtualinvoke r4.<androidx.camera.core.FocusMeteringAction: long getAutoCancelDurationInMillis()>();

        $r18 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r19 = interfaceinvoke $r17.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>(r6, $l4, $r18);

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: java.util.concurrent.ScheduledFuture mAutoCancelHandle> = $r19;

     label3:
        return;
    }

    private boolean shouldTriggerAF()
    {
        androidx.camera.camera2.internal.FocusMeteringControl r0;
        android.hardware.camera2.params.MeteringRectangle[] $r1;
        int $i0;
        boolean $z0;

        r0 := @this: androidx.camera.camera2.internal.FocusMeteringControl;

        $r1 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: android.hardware.camera2.params.MeteringRectangle[] mAfRects>;

        $i0 = lengthof $r1;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    com.google.common.util.concurrent.ListenableFuture cancelFocusAndMetering()
    {
        androidx.camera.camera2.internal.FocusMeteringControl r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Resolver $r1;
        com.google.common.util.concurrent.ListenableFuture $r2;

        r0 := @this: androidx.camera.camera2.internal.FocusMeteringControl;

        $r1 = dynamicinvoke "attachCompleter" <androidx.concurrent.futures.CallbackToFutureAdapter$Resolver (androidx.camera.camera2.internal.FocusMeteringControl)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.FocusMeteringControl: java.lang.Object lambda$cancelFocusAndMetering$8(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer));

        $r2 = staticinvoke <androidx.concurrent.futures.CallbackToFutureAdapter: com.google.common.util.concurrent.ListenableFuture getFuture(androidx.concurrent.futures.CallbackToFutureAdapter$Resolver)>($r1);

        return $r2;
    }

    void cancelFocusAndMeteringWithoutAsyncResult()
    {
        androidx.camera.camera2.internal.FocusMeteringControl r0;

        r0 := @this: androidx.camera.camera2.internal.FocusMeteringControl;

        virtualinvoke r0.<androidx.camera.camera2.internal.FocusMeteringControl: void cancelFocusAndMeteringInternal(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>(null);

        return;
    }

    void cancelFocusAndMeteringInternal(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)
    {
        androidx.camera.camera2.internal.FocusMeteringControl r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r1, $r6;
        long l0;
        int i1, $i2;
        boolean $z0;
        android.hardware.camera2.params.MeteringRectangle[] $r2, $r3, $r4;
        androidx.camera.camera2.internal.Camera2CameraControlImpl $r5, $r7, $r10;
        androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener $r8, $r9;

        r0 := @this: androidx.camera.camera2.internal.FocusMeteringControl;

        r1 := @parameter0: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        specialinvoke r0.<androidx.camera.camera2.internal.FocusMeteringControl: void failCancelFuture(java.lang.String)>("Cancelled by another cancelFocusAndMetering()");

        specialinvoke r0.<androidx.camera.camera2.internal.FocusMeteringControl: void failActionFuture(java.lang.String)>("Cancelled by cancelFocusAndMetering()");

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mRunningCancelCompleter> = r1;

        specialinvoke r0.<androidx.camera.camera2.internal.FocusMeteringControl: void disableAutoCancel()>();

        specialinvoke r0.<androidx.camera.camera2.internal.FocusMeteringControl: void clearAutoFocusTimeoutHandle()>();

        $z0 = specialinvoke r0.<androidx.camera.camera2.internal.FocusMeteringControl: boolean shouldTriggerAF()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<androidx.camera.camera2.internal.FocusMeteringControl: void cancelAfAeTrigger(boolean,boolean)>(1, 0);

     label1:
        $r2 = <androidx.camera.camera2.internal.FocusMeteringControl: android.hardware.camera2.params.MeteringRectangle[] EMPTY_RECTANGLES>;

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: android.hardware.camera2.params.MeteringRectangle[] mAfRects> = $r2;

        $r3 = <androidx.camera.camera2.internal.FocusMeteringControl: android.hardware.camera2.params.MeteringRectangle[] EMPTY_RECTANGLES>;

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: android.hardware.camera2.params.MeteringRectangle[] mAeRects> = $r3;

        $r4 = <androidx.camera.camera2.internal.FocusMeteringControl: android.hardware.camera2.params.MeteringRectangle[] EMPTY_RECTANGLES>;

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: android.hardware.camera2.params.MeteringRectangle[] mAwbRects> = $r4;

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: boolean mIsInAfAutoMode> = 0;

        $r5 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>;

        l0 = virtualinvoke $r5.<androidx.camera.camera2.internal.Camera2CameraControlImpl: long updateSessionConfigSynchronous()>();

        $r6 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mRunningCancelCompleter>;

        if $r6 == null goto label2;

        $r7 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>;

        $i2 = virtualinvoke r0.<androidx.camera.camera2.internal.FocusMeteringControl: int getDefaultAfMode()>();

        i1 = virtualinvoke $r7.<androidx.camera.camera2.internal.Camera2CameraControlImpl: int getSupportedAfMode(int)>($i2);

        $r8 = dynamicinvoke "onCaptureResult" <androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener (androidx.camera.camera2.internal.FocusMeteringControl,int,long)>(r0, i1, l0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: boolean __METHODTYPE__(android.hardware.camera2.TotalCaptureResult), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.FocusMeteringControl: boolean lambda$cancelFocusAndMeteringInternal$9(int,long,android.hardware.camera2.TotalCaptureResult)>, methodtype: boolean __METHODTYPE__(android.hardware.camera2.TotalCaptureResult));

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener mSessionListenerForCancel> = $r8;

        $r10 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>;

        $r9 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener mSessionListenerForCancel>;

        virtualinvoke $r10.<androidx.camera.camera2.internal.Camera2CameraControlImpl: void addCaptureResultListener(androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener)>($r9);

     label2:
        return;
    }

    boolean isFocusMeteringSupported(androidx.camera.core.FocusMeteringAction)
    {
        androidx.camera.camera2.internal.FocusMeteringControl r0;
        androidx.camera.core.FocusMeteringAction r1;
        android.graphics.Rect r2;
        android.util.Rational r3;
        java.util.List r4, r5, r6, $r8, $r10, $r12;
        androidx.camera.camera2.internal.Camera2CameraControlImpl $r7, $r9, $r11, $r13;
        int $i0, $i1, $i2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: androidx.camera.camera2.internal.FocusMeteringControl;

        r1 := @parameter0: androidx.camera.core.FocusMeteringAction;

        $r7 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>;

        r2 = virtualinvoke $r7.<androidx.camera.camera2.internal.Camera2CameraControlImpl: android.graphics.Rect getCropSensorRegion()>();

        r3 = specialinvoke r0.<androidx.camera.camera2.internal.FocusMeteringControl: android.util.Rational getDefaultAspectRatio()>();

        $r8 = virtualinvoke r1.<androidx.camera.core.FocusMeteringAction: java.util.List getMeteringPointsAf()>();

        $r9 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>;

        $i0 = virtualinvoke $r9.<androidx.camera.camera2.internal.Camera2CameraControlImpl: int getMaxAfRegionCount()>();

        r4 = specialinvoke r0.<androidx.camera.camera2.internal.FocusMeteringControl: java.util.List getMeteringRectangles(java.util.List,int,android.util.Rational,android.graphics.Rect,int)>($r8, $i0, r3, r2, 1);

        $r10 = virtualinvoke r1.<androidx.camera.core.FocusMeteringAction: java.util.List getMeteringPointsAe()>();

        $r11 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>;

        $i1 = virtualinvoke $r11.<androidx.camera.camera2.internal.Camera2CameraControlImpl: int getMaxAeRegionCount()>();

        r5 = specialinvoke r0.<androidx.camera.camera2.internal.FocusMeteringControl: java.util.List getMeteringRectangles(java.util.List,int,android.util.Rational,android.graphics.Rect,int)>($r10, $i1, r3, r2, 2);

        $r12 = virtualinvoke r1.<androidx.camera.core.FocusMeteringAction: java.util.List getMeteringPointsAwb()>();

        $r13 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>;

        $i2 = virtualinvoke $r13.<androidx.camera.camera2.internal.Camera2CameraControlImpl: int getMaxAwbRegionCount()>();

        r6 = specialinvoke r0.<androidx.camera.camera2.internal.FocusMeteringControl: java.util.List getMeteringRectangles(java.util.List,int,android.util.Rational,android.graphics.Rect,int)>($r12, $i2, r3, r2, 4);

        $z0 = interfaceinvoke r4.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $z1 = interfaceinvoke r5.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        $z2 = interfaceinvoke r6.<java.util.List: boolean isEmpty()>();

        if $z2 != 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    private boolean lambda$cancelFocusAndMeteringInternal$9(int, long, android.hardware.camera2.TotalCaptureResult)
    {
        androidx.camera.camera2.internal.FocusMeteringControl r0;
        int i0, $i2;
        long l1;
        android.hardware.camera2.TotalCaptureResult r1;
        java.lang.Integer r2;
        android.hardware.camera2.CaptureResult$Key $r3;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: androidx.camera.camera2.internal.FocusMeteringControl;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        r1 := @parameter2: android.hardware.camera2.TotalCaptureResult;

        $r3 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AF_MODE>;

        $r4 = virtualinvoke r1.<android.hardware.camera2.TotalCaptureResult: java.lang.Object get(android.hardware.camera2.CaptureResult$Key)>($r3);

        r2 = (java.lang.Integer) $r4;

        $i2 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        if $i2 != i0 goto label1;

        $z0 = staticinvoke <androidx.camera.camera2.internal.Camera2CameraControlImpl: boolean isSessionUpdated(android.hardware.camera2.TotalCaptureResult,long)>(r1, l1);

        if $z0 == 0 goto label1;

        specialinvoke r0.<androidx.camera.camera2.internal.FocusMeteringControl: void completeCancelFuture()>();

        return 1;

     label1:
        return 0;
    }

    private java.lang.Object lambda$cancelFocusAndMetering$8(androidx.concurrent.futures.CallbackToFutureAdapter$Completer) throws java.lang.Exception
    {
        androidx.camera.camera2.internal.FocusMeteringControl r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r1;
        java.util.concurrent.Executor $r2;
        java.lang.Runnable $r3;

        r0 := @this: androidx.camera.camera2.internal.FocusMeteringControl;

        r1 := @parameter0: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        $r2 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: java.util.concurrent.Executor mExecutor>;

        $r3 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.camera2.internal.FocusMeteringControl,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.FocusMeteringControl: void lambda$cancelFocusAndMetering$7(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r3);

        return "cancelFocusAndMetering";
    }

    private void lambda$cancelFocusAndMetering$7(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)
    {
        androidx.camera.camera2.internal.FocusMeteringControl r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r1;

        r0 := @this: androidx.camera.camera2.internal.FocusMeteringControl;

        r1 := @parameter0: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        virtualinvoke r0.<androidx.camera.camera2.internal.FocusMeteringControl: void cancelFocusAndMeteringInternal(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>(r1);

        return;
    }

    private void lambda$executeMeteringAction$6(long)
    {
        androidx.camera.camera2.internal.FocusMeteringControl r0;
        long l0;
        java.util.concurrent.Executor $r1;
        java.lang.Runnable $r2;

        r0 := @this: androidx.camera.camera2.internal.FocusMeteringControl;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: java.util.concurrent.Executor mExecutor>;

        $r2 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.camera2.internal.FocusMeteringControl,long)>(r0, l0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.FocusMeteringControl: void lambda$executeMeteringAction$5(long)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r2);

        return;
    }

    private void lambda$executeMeteringAction$5(long)
    {
        androidx.camera.camera2.internal.FocusMeteringControl r0;
        long l0, $l1;
        byte $b2;

        r0 := @this: androidx.camera.camera2.internal.FocusMeteringControl;

        l0 := @parameter0: long;

        $l1 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: long mFocusTimeoutCounter>;

        $b2 = l0 cmp $l1;

        if $b2 != 0 goto label1;

        virtualinvoke r0.<androidx.camera.camera2.internal.FocusMeteringControl: void cancelFocusAndMeteringWithoutAsyncResult()>();

     label1:
        return;
    }

    private void lambda$executeMeteringAction$4(long)
    {
        androidx.camera.camera2.internal.FocusMeteringControl r0;
        long l0;
        java.util.concurrent.Executor $r1;
        java.lang.Runnable $r2;

        r0 := @this: androidx.camera.camera2.internal.FocusMeteringControl;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: java.util.concurrent.Executor mExecutor>;

        $r2 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.camera2.internal.FocusMeteringControl,long)>(r0, l0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.FocusMeteringControl: void lambda$executeMeteringAction$3(long)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r2);

        return;
    }

    private void lambda$executeMeteringAction$3(long)
    {
        androidx.camera.camera2.internal.FocusMeteringControl r0;
        long l0, $l1;
        byte $b2;
        boolean $z0;

        r0 := @this: androidx.camera.camera2.internal.FocusMeteringControl;

        l0 := @parameter0: long;

        $l1 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: long mFocusTimeoutCounter>;

        $b2 = l0 cmp $l1;

        if $b2 != 0 goto label1;

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: boolean mIsFocusSuccessful> = 0;

        $z0 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: boolean mIsFocusSuccessful>;

        virtualinvoke r0.<androidx.camera.camera2.internal.FocusMeteringControl: void completeActionFuture(boolean)>($z0);

     label1:
        return;
    }

    private boolean lambda$executeMeteringAction$2(boolean, long, android.hardware.camera2.TotalCaptureResult)
    {
        androidx.camera.camera2.internal.FocusMeteringControl r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        long l0;
        android.hardware.camera2.TotalCaptureResult r1;
        java.lang.Integer r2, $r5, $r6;
        android.hardware.camera2.CaptureResult$Key $r3;
        java.lang.Object $r4;
        int $i1, $i2, $i3;

        r0 := @this: androidx.camera.camera2.internal.FocusMeteringControl;

        z0 := @parameter0: boolean;

        l0 := @parameter1: long;

        r1 := @parameter2: android.hardware.camera2.TotalCaptureResult;

        $r3 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AF_STATE>;

        $r4 = virtualinvoke r1.<android.hardware.camera2.TotalCaptureResult: java.lang.Object get(android.hardware.camera2.CaptureResult$Key)>($r3);

        r2 = (java.lang.Integer) $r4;

        $z1 = specialinvoke r0.<androidx.camera.camera2.internal.FocusMeteringControl: boolean shouldTriggerAF()>();

        if $z1 == 0 goto label4;

        if z0 == 0 goto label1;

        if r2 != null goto label2;

     label1:
        r0.<androidx.camera.camera2.internal.FocusMeteringControl: boolean mIsFocusSuccessful> = 1;

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: boolean mIsAutoFocusCompleted> = 1;

        goto label4;

     label2:
        $r6 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: java.lang.Integer mCurrentAfState>;

        $i1 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        if $i1 != 3 goto label4;

        $i2 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        if $i2 != 4 goto label3;

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: boolean mIsFocusSuccessful> = 1;

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: boolean mIsAutoFocusCompleted> = 1;

        goto label4;

     label3:
        $i3 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        if $i3 != 5 goto label4;

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: boolean mIsFocusSuccessful> = 0;

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: boolean mIsAutoFocusCompleted> = 1;

     label4:
        $z5 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: boolean mIsAutoFocusCompleted>;

        if $z5 == 0 goto label5;

        $z3 = staticinvoke <androidx.camera.camera2.internal.Camera2CameraControlImpl: boolean isSessionUpdated(android.hardware.camera2.TotalCaptureResult,long)>(r1, l0);

        if $z3 == 0 goto label5;

        $z4 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: boolean mIsFocusSuccessful>;

        virtualinvoke r0.<androidx.camera.camera2.internal.FocusMeteringControl: void completeActionFuture(boolean)>($z4);

        return 1;

     label5:
        $r5 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: java.lang.Integer mCurrentAfState>;

        $z2 = virtualinvoke $r5.<java.lang.Integer: boolean equals(java.lang.Object)>(r2);

        if $z2 != 0 goto label6;

        if r2 == null goto label6;

        r0.<androidx.camera.camera2.internal.FocusMeteringControl: java.lang.Integer mCurrentAfState> = r2;

     label6:
        return 0;
    }

    private java.lang.Object lambda$startFocusAndMetering$1(androidx.camera.core.FocusMeteringAction, long, androidx.concurrent.futures.CallbackToFutureAdapter$Completer) throws java.lang.Exception
    {
        androidx.camera.camera2.internal.FocusMeteringControl r0;
        androidx.camera.core.FocusMeteringAction r1;
        long l0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r2;
        java.util.concurrent.Executor $r3;
        java.lang.Runnable $r4;

        r0 := @this: androidx.camera.camera2.internal.FocusMeteringControl;

        r1 := @parameter0: androidx.camera.core.FocusMeteringAction;

        l0 := @parameter1: long;

        r2 := @parameter2: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        $r3 = r0.<androidx.camera.camera2.internal.FocusMeteringControl: java.util.concurrent.Executor mExecutor>;

        $r4 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.camera2.internal.FocusMeteringControl,androidx.concurrent.futures.CallbackToFutureAdapter$Completer,androidx.camera.core.FocusMeteringAction,long)>(r0, r2, r1, l0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.FocusMeteringControl: void lambda$startFocusAndMetering$0(androidx.concurrent.futures.CallbackToFutureAdapter$Completer,androidx.camera.core.FocusMeteringAction,long)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r3.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r4);

        return "startFocusAndMetering";
    }

    private void lambda$startFocusAndMetering$0(androidx.concurrent.futures.CallbackToFutureAdapter$Completer, androidx.camera.core.FocusMeteringAction, long)
    {
        androidx.camera.camera2.internal.FocusMeteringControl r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r1;
        androidx.camera.core.FocusMeteringAction r2;
        long l0;

        r0 := @this: androidx.camera.camera2.internal.FocusMeteringControl;

        r1 := @parameter0: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        r2 := @parameter1: androidx.camera.core.FocusMeteringAction;

        l0 := @parameter2: long;

        virtualinvoke r0.<androidx.camera.camera2.internal.FocusMeteringControl: void startFocusAndMeteringInternal(androidx.concurrent.futures.CallbackToFutureAdapter$Completer,androidx.camera.core.FocusMeteringAction,long)>(r1, r2, l0);

        return;
    }

    static void <clinit>()
    {
        android.hardware.camera2.params.MeteringRectangle[] $r0;

        $r0 = newarray (android.hardware.camera2.params.MeteringRectangle)[0];

        <androidx.camera.camera2.internal.FocusMeteringControl: android.hardware.camera2.params.MeteringRectangle[] EMPTY_RECTANGLES> = $r0;

        return;
    }

androidx.camera.camera2.internal.FocusMeteringControl$1
<androidx.camera.camera2.internal.FocusMeteringControl$1: androidx.concurrent.futures.CallbackToFutureAdapter$Completer val$completer>
<androidx.camera.camera2.internal.FocusMeteringControl$1: androidx.camera.camera2.internal.FocusMeteringControl this$0>
    void <init>(androidx.camera.camera2.internal.FocusMeteringControl, androidx.concurrent.futures.CallbackToFutureAdapter$Completer)
    {
        androidx.camera.camera2.internal.FocusMeteringControl$1 r0;
        androidx.camera.camera2.internal.FocusMeteringControl r1;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r2;

        r0 := @this: androidx.camera.camera2.internal.FocusMeteringControl$1;

        r1 := @parameter0: androidx.camera.camera2.internal.FocusMeteringControl;

        r2 := @parameter1: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        r0.<androidx.camera.camera2.internal.FocusMeteringControl$1: androidx.camera.camera2.internal.FocusMeteringControl this$0> = r1;

        r0.<androidx.camera.camera2.internal.FocusMeteringControl$1: androidx.concurrent.futures.CallbackToFutureAdapter$Completer val$completer> = r2;

        specialinvoke r0.<androidx.camera.core.impl.CameraCaptureCallback: void <init>()>();

        return;
    }

    public void onCaptureCompleted(androidx.camera.core.impl.CameraCaptureResult)
    {
        androidx.camera.camera2.internal.FocusMeteringControl$1 r0;
        androidx.camera.core.impl.CameraCaptureResult r1;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer $r2, $r3;

        r0 := @this: androidx.camera.camera2.internal.FocusMeteringControl$1;

        r1 := @parameter0: androidx.camera.core.impl.CameraCaptureResult;

        $r2 = r0.<androidx.camera.camera2.internal.FocusMeteringControl$1: androidx.concurrent.futures.CallbackToFutureAdapter$Completer val$completer>;

        if $r2 == null goto label1;

        $r3 = r0.<androidx.camera.camera2.internal.FocusMeteringControl$1: androidx.concurrent.futures.CallbackToFutureAdapter$Completer val$completer>;

        virtualinvoke $r3.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean set(java.lang.Object)>(r1);

     label1:
        return;
    }

    public void onCaptureFailed(androidx.camera.core.impl.CameraCaptureFailure)
    {
        androidx.camera.camera2.internal.FocusMeteringControl$1 r0;
        androidx.camera.core.impl.CameraCaptureFailure r1;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer $r2, $r4;
        androidx.camera.core.impl.CameraControlInternal$CameraControlException $r3;

        r0 := @this: androidx.camera.camera2.internal.FocusMeteringControl$1;

        r1 := @parameter0: androidx.camera.core.impl.CameraCaptureFailure;

        $r2 = r0.<androidx.camera.camera2.internal.FocusMeteringControl$1: androidx.concurrent.futures.CallbackToFutureAdapter$Completer val$completer>;

        if $r2 == null goto label1;

        $r4 = r0.<androidx.camera.camera2.internal.FocusMeteringControl$1: androidx.concurrent.futures.CallbackToFutureAdapter$Completer val$completer>;

        $r3 = new androidx.camera.core.impl.CameraControlInternal$CameraControlException;

        specialinvoke $r3.<androidx.camera.core.impl.CameraControlInternal$CameraControlException: void <init>(androidx.camera.core.impl.CameraCaptureFailure)>(r1);

        virtualinvoke $r4.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean setException(java.lang.Throwable)>($r3);

     label1:
        return;
    }

    public void onCaptureCancelled()
    {
        androidx.camera.camera2.internal.FocusMeteringControl$1 r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer $r1, $r3;
        androidx.camera.core.CameraControl$OperationCanceledException $r2;

        r0 := @this: androidx.camera.camera2.internal.FocusMeteringControl$1;

        $r1 = r0.<androidx.camera.camera2.internal.FocusMeteringControl$1: androidx.concurrent.futures.CallbackToFutureAdapter$Completer val$completer>;

        if $r1 == null goto label1;

        $r3 = r0.<androidx.camera.camera2.internal.FocusMeteringControl$1: androidx.concurrent.futures.CallbackToFutureAdapter$Completer val$completer>;

        $r2 = new androidx.camera.core.CameraControl$OperationCanceledException;

        specialinvoke $r2.<androidx.camera.core.CameraControl$OperationCanceledException: void <init>(java.lang.String)>("Camera is closed");

        virtualinvoke $r3.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean setException(java.lang.Throwable)>($r2);

     label1:
        return;
    }

androidx.camera.camera2.internal.FocusMeteringControl$2
<androidx.camera.camera2.internal.FocusMeteringControl$2: androidx.concurrent.futures.CallbackToFutureAdapter$Completer val$completer>
<androidx.camera.camera2.internal.FocusMeteringControl$2: androidx.camera.camera2.internal.FocusMeteringControl this$0>
    void <init>(androidx.camera.camera2.internal.FocusMeteringControl, androidx.concurrent.futures.CallbackToFutureAdapter$Completer)
    {
        androidx.camera.camera2.internal.FocusMeteringControl$2 r0;
        androidx.camera.camera2.internal.FocusMeteringControl r1;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r2;

        r0 := @this: androidx.camera.camera2.internal.FocusMeteringControl$2;

        r1 := @parameter0: androidx.camera.camera2.internal.FocusMeteringControl;

        r2 := @parameter1: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        r0.<androidx.camera.camera2.internal.FocusMeteringControl$2: androidx.camera.camera2.internal.FocusMeteringControl this$0> = r1;

        r0.<androidx.camera.camera2.internal.FocusMeteringControl$2: androidx.concurrent.futures.CallbackToFutureAdapter$Completer val$completer> = r2;

        specialinvoke r0.<androidx.camera.core.impl.CameraCaptureCallback: void <init>()>();

        return;
    }

    public void onCaptureCompleted(androidx.camera.core.impl.CameraCaptureResult)
    {
        androidx.camera.camera2.internal.FocusMeteringControl$2 r0;
        androidx.camera.core.impl.CameraCaptureResult r1;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer $r2, $r3;

        r0 := @this: androidx.camera.camera2.internal.FocusMeteringControl$2;

        r1 := @parameter0: androidx.camera.core.impl.CameraCaptureResult;

        $r2 = r0.<androidx.camera.camera2.internal.FocusMeteringControl$2: androidx.concurrent.futures.CallbackToFutureAdapter$Completer val$completer>;

        if $r2 == null goto label1;

        $r3 = r0.<androidx.camera.camera2.internal.FocusMeteringControl$2: androidx.concurrent.futures.CallbackToFutureAdapter$Completer val$completer>;

        virtualinvoke $r3.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean set(java.lang.Object)>(null);

     label1:
        return;
    }

    public void onCaptureFailed(androidx.camera.core.impl.CameraCaptureFailure)
    {
        androidx.camera.camera2.internal.FocusMeteringControl$2 r0;
        androidx.camera.core.impl.CameraCaptureFailure r1;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer $r2, $r4;
        androidx.camera.core.impl.CameraControlInternal$CameraControlException $r3;

        r0 := @this: androidx.camera.camera2.internal.FocusMeteringControl$2;

        r1 := @parameter0: androidx.camera.core.impl.CameraCaptureFailure;

        $r2 = r0.<androidx.camera.camera2.internal.FocusMeteringControl$2: androidx.concurrent.futures.CallbackToFutureAdapter$Completer val$completer>;

        if $r2 == null goto label1;

        $r4 = r0.<androidx.camera.camera2.internal.FocusMeteringControl$2: androidx.concurrent.futures.CallbackToFutureAdapter$Completer val$completer>;

        $r3 = new androidx.camera.core.impl.CameraControlInternal$CameraControlException;

        specialinvoke $r3.<androidx.camera.core.impl.CameraControlInternal$CameraControlException: void <init>(androidx.camera.core.impl.CameraCaptureFailure)>(r1);

        virtualinvoke $r4.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean setException(java.lang.Throwable)>($r3);

     label1:
        return;
    }

    public void onCaptureCancelled()
    {
        androidx.camera.camera2.internal.FocusMeteringControl$2 r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer $r1, $r3;
        androidx.camera.core.CameraControl$OperationCanceledException $r2;

        r0 := @this: androidx.camera.camera2.internal.FocusMeteringControl$2;

        $r1 = r0.<androidx.camera.camera2.internal.FocusMeteringControl$2: androidx.concurrent.futures.CallbackToFutureAdapter$Completer val$completer>;

        if $r1 == null goto label1;

        $r3 = r0.<androidx.camera.camera2.internal.FocusMeteringControl$2: androidx.concurrent.futures.CallbackToFutureAdapter$Completer val$completer>;

        $r2 = new androidx.camera.core.CameraControl$OperationCanceledException;

        specialinvoke $r2.<androidx.camera.core.CameraControl$OperationCanceledException: void <init>(java.lang.String)>("Camera is closed");

        virtualinvoke $r3.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean setException(java.lang.Throwable)>($r2);

     label1:
        return;
    }

