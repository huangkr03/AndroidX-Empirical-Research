kotlinx.coroutines.scheduling.CoroutineScheduler
<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.CoroutineScheduler$Companion Companion>
<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.Symbol NOT_IN_STACK>
<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.atomicfu.AtomicBoolean _isTerminated>
<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.atomicfu.AtomicLong controlState>
<kotlinx.coroutines.scheduling.CoroutineScheduler: int corePoolSize>
<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalBlockingQueue>
<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalCpuQueue>
<kotlinx.coroutines.scheduling.CoroutineScheduler: long idleWorkerKeepAliveNs>
<kotlinx.coroutines.scheduling.CoroutineScheduler: int maxPoolSize>
<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.atomicfu.AtomicLong parkedWorkersStack>
<kotlinx.coroutines.scheduling.CoroutineScheduler: java.lang.String schedulerName>
<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.ResizableAtomicArray workers>
    static void <clinit>()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Companion $r0;
        kotlinx.coroutines.internal.Symbol $r1;

        $r0 = new kotlinx.coroutines.scheduling.CoroutineScheduler$Companion;

        specialinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.CoroutineScheduler$Companion Companion> = $r0;

        $r1 = new kotlinx.coroutines.internal.Symbol;

        specialinvoke $r1.<kotlinx.coroutines.internal.Symbol: void <init>(java.lang.String)>("NOT_IN_STACK");

        <kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.Symbol NOT_IN_STACK> = $r1;

        return;
    }

    public void <init>(int, int, long, java.lang.String)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler $r0;
        int $i0, $i1;
        long $l2;
        java.lang.String $r1;
        boolean $z0, $z1;
        byte $b3;
        kotlinx.coroutines.scheduling.GlobalQueue $r2;
        kotlinx.atomicfu.AtomicLong $r3;
        kotlinx.coroutines.internal.ResizableAtomicArray $r4;
        kotlinx.atomicfu.AtomicBoolean $r5;
        java.lang.StringBuilder $r6;
        java.lang.IllegalArgumentException $r7;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $l2 := @parameter2: long;

        $r1 := @parameter3: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "schedulerName");

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int corePoolSize> = $i0;

        $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int maxPoolSize> = $i1;

        $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: long idleWorkerKeepAliveNs> = $l2;

        $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: java.lang.String schedulerName> = $r1;

        $z0 = 1;

        if $i0 <= 0 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        if $z1 == 0 goto label12;

        if $i1 < $i0 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        if $z1 == 0 goto label11;

        if $i1 > 2097150 goto label05;

        $z1 = 1;

        goto label06;

     label05:
        $z1 = 0;

     label06:
        if $z1 == 0 goto label10;

        $b3 = $l2 cmp 0L;

        if $b3 <= 0 goto label07;

        goto label08;

     label07:
        $z0 = 0;

     label08:
        if $z0 == 0 goto label09;

        $r2 = new kotlinx.coroutines.scheduling.GlobalQueue;

        specialinvoke $r2.<kotlinx.coroutines.scheduling.GlobalQueue: void <init>()>();

        $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalCpuQueue> = $r2;

        $r2 = new kotlinx.coroutines.scheduling.GlobalQueue;

        specialinvoke $r2.<kotlinx.coroutines.scheduling.GlobalQueue: void <init>()>();

        $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalBlockingQueue> = $r2;

        $r3 = staticinvoke <kotlinx.atomicfu.AtomicFU: kotlinx.atomicfu.AtomicLong atomic(long)>(0L);

        $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.atomicfu.AtomicLong parkedWorkersStack> = $r3;

        $r4 = new kotlinx.coroutines.internal.ResizableAtomicArray;

        $i1 = $i0 + 1;

        specialinvoke $r4.<kotlinx.coroutines.internal.ResizableAtomicArray: void <init>(int)>($i1);

        $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.ResizableAtomicArray workers> = $r4;

        $l2 = (long) $i0;

        $l2 = $l2 << 42;

        $r3 = staticinvoke <kotlinx.atomicfu.AtomicFU: kotlinx.atomicfu.AtomicLong atomic(long)>($l2);

        $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.atomicfu.AtomicLong controlState> = $r3;

        $r5 = staticinvoke <kotlinx.atomicfu.AtomicFU: kotlinx.atomicfu.AtomicBoolean atomic(boolean)>(0);

        $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.atomicfu.AtomicBoolean _isTerminated> = $r5;

        return;

     label09:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Idle worker keep alive time ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be positive");

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = new java.lang.IllegalArgumentException;

        $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r7;

     label10:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Max pool size ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should not exceed maximal supported number of threads 2097150");

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = new java.lang.IllegalArgumentException;

        $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r7;

     label11:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Max pool size ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should be greater than or equals to core pool size ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = new java.lang.IllegalArgumentException;

        $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r7;

     label12:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Core pool size ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should be at least 1");

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = new java.lang.IllegalArgumentException;

        $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r7;
    }

    public static final kotlinx.atomicfu.AtomicLong access$getControlState$p(kotlinx.coroutines.scheduling.CoroutineScheduler)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler $r0;
        kotlinx.atomicfu.AtomicLong r1;

        $r0 := @parameter0: kotlinx.coroutines.scheduling.CoroutineScheduler;

        r1 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.atomicfu.AtomicLong controlState>;

        return r1;
    }

    private final boolean addToGlobalQueue(kotlinx.coroutines.scheduling.Task)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler $r0;
        kotlinx.coroutines.scheduling.Task $r1;
        kotlinx.coroutines.scheduling.TaskContext $r2;
        int $i0;
        boolean $z0;
        kotlinx.coroutines.scheduling.GlobalQueue $r3;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r1 := @parameter0: kotlinx.coroutines.scheduling.Task;

        $r2 = $r1.<kotlinx.coroutines.scheduling.Task: kotlinx.coroutines.scheduling.TaskContext taskContext>;

        $i0 = interfaceinvoke $r2.<kotlinx.coroutines.scheduling.TaskContext: int getTaskMode()>();

        $z0 = 1;

        if $i0 != 1 goto label1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $r3 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalBlockingQueue>;

        $z0 = virtualinvoke $r3.<kotlinx.coroutines.scheduling.GlobalQueue: boolean addLast(java.lang.Object)>($r1);

        return $z0;

     label3:
        $r3 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalCpuQueue>;

        $z0 = virtualinvoke $r3.<kotlinx.coroutines.scheduling.GlobalQueue: boolean addLast(java.lang.Object)>($r1);

        return $z0;
    }

    private final int createNewWorker()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler $r0;
        int $i0, $i3, $i4;
        kotlinx.coroutines.internal.ResizableAtomicArray $r1, $r3;
        boolean $z0, $z1;
        kotlinx.atomicfu.AtomicLong $r2;
        long $l1, $l2;
        java.lang.Object $r4;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.String $r7;
        java.lang.Throwable $r8;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r1 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.ResizableAtomicArray workers>;

        entermonitor $r1;

     label01:
        $z0 = virtualinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean isTerminated()>();

     label02:
        if $z0 == 0 goto label03;

        exitmonitor $r1;

        return -1;

     label03:
        $r2 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.atomicfu.AtomicLong controlState>;

        $l1 = virtualinvoke $r2.<kotlinx.atomicfu.AtomicLong: long getValue()>();

        $l2 = $l1 & 2097151L;

        $i0 = (int) $l2;

        $l1 = $l1 & 4398044413952L;

        $l1 = $l1 >> 21;

        $i3 = (int) $l1;

        $i3 = $i0 - $i3;

        $z0 = 0;

        $i3 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtLeast(int,int)>($i3, 0);

        $i4 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int corePoolSize>;

     label04:
        if $i3 < $i4 goto label05;

        exitmonitor $r1;

        return 0;

     label05:
        $i4 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int maxPoolSize>;

     label06:
        if $i0 < $i4 goto label07;

        exitmonitor $r1;

        return 0;

     label07:
        $r2 = staticinvoke <kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.atomicfu.AtomicLong access$getControlState$p(kotlinx.coroutines.scheduling.CoroutineScheduler)>($r0);

        $l1 = virtualinvoke $r2.<kotlinx.atomicfu.AtomicLong: long getValue()>();

        $l1 = $l1 & 2097151L;

        $i0 = (int) $l1;

        $i4 = $i0 + 1;

        $r3 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.ResizableAtomicArray workers>;

        $r4 = virtualinvoke $r3.<kotlinx.coroutines.internal.ResizableAtomicArray: java.lang.Object get(int)>($i4);

        if $r4 != null goto label08;

        $z1 = 1;

        goto label09;

     label08:
        $z1 = 0;

     label09:
        if $z1 == 0 goto label13;

        $r5 = new kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        specialinvoke $r5.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void <init>(kotlinx.coroutines.scheduling.CoroutineScheduler,int)>($r0, $i4);

        $r3 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.ResizableAtomicArray workers>;

        virtualinvoke $r3.<kotlinx.coroutines.internal.ResizableAtomicArray: void setSynchronized(int,java.lang.Object)>($i4, $r5);

        $r2 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.atomicfu.AtomicLong controlState>;

        $l1 = virtualinvoke $r2.<kotlinx.atomicfu.AtomicLong: long incrementAndGet()>();

        $l1 = 2097151L & $l1;

        $i0 = (int) $l1;

        if $i4 != $i0 goto label10;

        $z0 = 1;

        goto label10;

     label10:
        if $z0 == 0 goto label12;

        virtualinvoke $r5.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void start()>();

     label11:
        exitmonitor $r1;

        $i3 = $i3 + 1;

        return $i3;

     label12:
        $r6 = new java.lang.IllegalArgumentException;

        $r7 = "Failed requirement.";

        $r7 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label13:
        $r6 = new java.lang.IllegalArgumentException;

        $r7 = "Failed requirement.";

        $r7 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label14:
        $r8 := @caughtexception;

        exitmonitor $r1;

        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label07 to label11 with label14;
        catch java.lang.Throwable from label12 to label14 with label14;
    }

    private final kotlinx.coroutines.scheduling.CoroutineScheduler$Worker currentWorker()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler $r0, $r3;
        java.lang.Thread $r1;
        boolean $z0;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r2;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z0 = $r1 instanceof kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        if $z0 == 0 goto label1;

        $r2 = (kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) $r1;

        goto label2;

     label1:
        $r2 = null;

     label2:
        if $r2 == null goto label3;

        $r3 = staticinvoke <kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler access$getThis$0$p(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)>($r2);

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r3, $r0);

        if $z0 == 0 goto label3;

        return $r2;

     label3:
        return null;
    }

    public static void dispatch$default(kotlinx.coroutines.scheduling.CoroutineScheduler, java.lang.Runnable, kotlinx.coroutines.scheduling.TaskContext, boolean, int, java.lang.Object)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler $r0;
        java.lang.Runnable $r1;
        kotlinx.coroutines.scheduling.TaskContext $r2;
        boolean $z0;
        int $i0, $i1;
        java.lang.Object $r3;

        $r0 := @parameter0: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r1 := @parameter1: java.lang.Runnable;

        $r2 := @parameter2: kotlinx.coroutines.scheduling.TaskContext;

        $z0 := @parameter3: boolean;

        $i0 := @parameter4: int;

        $r3 := @parameter5: java.lang.Object;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label1;

        $r2 = <kotlinx.coroutines.scheduling.TasksKt: kotlinx.coroutines.scheduling.TaskContext NonBlockingContext>;

     label1:
        $i0 = $i0 & 4;

        if $i0 == 0 goto label2;

        $z0 = 0;

     label2:
        virtualinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: void dispatch(java.lang.Runnable,kotlinx.coroutines.scheduling.TaskContext,boolean)>($r1, $r2, $z0);

        return;
    }

    private final int parkedWorkersStackNextIndex(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler $r0;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r1;
        java.lang.Object $r2;
        kotlinx.coroutines.internal.Symbol $r3;
        int $i0;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r1 := @parameter0: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $r2 = virtualinvoke $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: java.lang.Object getNextParkedWorker()>();

     label1:
        $r3 = <kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.Symbol NOT_IN_STACK>;

        if $r2 != $r3 goto label2;

        return -1;

     label2:
        if $r2 != null goto label3;

        return 0;

     label3:
        $r1 = (kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) $r2;

        $i0 = virtualinvoke $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int getIndexInArray()>();

        if $i0 == 0 goto label4;

        return $i0;

     label4:
        $r2 = virtualinvoke $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: java.lang.Object getNextParkedWorker()>();

        goto label1;
    }

    private final kotlinx.coroutines.scheduling.CoroutineScheduler$Worker parkedWorkersStackPop()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler $r0;
        int $i0;
        kotlinx.atomicfu.AtomicLong $r1, $r2;
        long $l1, $l2, $l3;
        kotlinx.coroutines.internal.ResizableAtomicArray $r3;
        java.lang.Object $r4;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r5;
        boolean $z0;
        kotlinx.coroutines.internal.Symbol $r6;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r2 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.atomicfu.AtomicLong parkedWorkersStack>;

     label1:
        $l2 = virtualinvoke $r2.<kotlinx.atomicfu.AtomicLong: long getValue()>();

        $r3 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.ResizableAtomicArray workers>;

        $l1 = 2097151L & $l2;

        $i0 = (int) $l1;

        $r4 = virtualinvoke $r3.<kotlinx.coroutines.internal.ResizableAtomicArray: java.lang.Object get(int)>($i0);

        $r5 = (kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) $r4;

        if $r5 != null goto label2;

        return null;

     label2:
        $l1 = 2097152L + $l2;

        $l3 = $l1 & -2097152L;

        $i0 = specialinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int parkedWorkersStackNextIndex(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)>($r5);

        if $i0 < 0 goto label1;

        $r1 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.atomicfu.AtomicLong parkedWorkersStack>;

        $l1 = (long) $i0;

        $l1 = $l3 | $l1;

        $z0 = virtualinvoke $r1.<kotlinx.atomicfu.AtomicLong: boolean compareAndSet(long,long)>($l2, $l1);

        if $z0 == 0 goto label1;

        $r6 = <kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.Symbol NOT_IN_STACK>;

        virtualinvoke $r5.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void setNextParkedWorker(java.lang.Object)>($r6);

        return $r5;
    }

    private final void signalBlockingWork(boolean)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler $r0;
        boolean $z0;
        kotlinx.atomicfu.AtomicLong $r1;
        long $l0;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $z0 := @parameter0: boolean;

        $r1 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.atomicfu.AtomicLong controlState>;

        $l0 = virtualinvoke $r1.<kotlinx.atomicfu.AtomicLong: long addAndGet(long)>(2097152L);

        if $z0 == 0 goto label1;

        return;

     label1:
        $z0 = specialinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean tryUnpark()>();

        if $z0 == 0 goto label2;

        return;

     label2:
        $z0 = specialinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean tryCreateWorker(long)>($l0);

        if $z0 == 0 goto label3;

        return;

     label3:
        specialinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean tryUnpark()>();

        return;
    }

    private final kotlinx.coroutines.scheduling.Task submitToLocalQueue(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker, kotlinx.coroutines.scheduling.Task, boolean)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler $r0;
        kotlinx.coroutines.scheduling.Task $r1;
        boolean $z0;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r2;
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState $r3, $r4;
        kotlinx.coroutines.scheduling.TaskContext $r5;
        int $i0;
        kotlinx.coroutines.scheduling.WorkQueue $r6;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r2 := @parameter0: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $r1 := @parameter1: kotlinx.coroutines.scheduling.Task;

        $z0 := @parameter2: boolean;

        if $r2 != null goto label1;

        return $r1;

     label1:
        $r3 = $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state>;

        $r4 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState TERMINATED>;

        if $r3 != $r4 goto label2;

        return $r1;

     label2:
        $r5 = $r1.<kotlinx.coroutines.scheduling.Task: kotlinx.coroutines.scheduling.TaskContext taskContext>;

        $i0 = interfaceinvoke $r5.<kotlinx.coroutines.scheduling.TaskContext: int getTaskMode()>();

        if $i0 != 0 goto label3;

        $r3 = $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state>;

        $r4 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState BLOCKING>;

        if $r3 != $r4 goto label3;

        return $r1;

     label3:
        $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean mayHaveLocalTasks> = 1;

        $r6 = $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.WorkQueue localQueue>;

        $r1 = virtualinvoke $r6.<kotlinx.coroutines.scheduling.WorkQueue: kotlinx.coroutines.scheduling.Task add(kotlinx.coroutines.scheduling.Task,boolean)>($r1, $z0);

        return $r1;
    }

    private final boolean tryCreateWorker(long)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler $r0;
        long $l0, $l1;
        int $i2, $i3;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $l0 := @parameter0: long;

        $l1 = 2097151L & $l0;

        $i2 = (int) $l1;

        $l0 = $l0 & 4398044413952L;

        $l0 = $l0 >> 21;

        $i3 = (int) $l0;

        $i2 = $i2 - $i3;

        $i2 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtLeast(int,int)>($i2, 0);

        $i3 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int corePoolSize>;

        if $i2 >= $i3 goto label2;

        $i2 = specialinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int createNewWorker()>();

        if $i2 != 1 goto label1;

        $i3 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int corePoolSize>;

        if $i3 <= 1 goto label1;

        specialinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int createNewWorker()>();

     label1:
        if $i2 <= 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    static boolean tryCreateWorker$default(kotlinx.coroutines.scheduling.CoroutineScheduler, long, int, java.lang.Object)
    {
        java.lang.Object $r0;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r1;
        long $l0;
        int $i1;
        kotlinx.atomicfu.AtomicLong $r2;
        boolean $z0;

        $r1 := @parameter0: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $l0 := @parameter1: long;

        $i1 := @parameter2: int;

        $r0 := @parameter3: java.lang.Object;

        $i1 = $i1 & 1;

        if $i1 == 0 goto label1;

        $r2 = $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.atomicfu.AtomicLong controlState>;

        $l0 = virtualinvoke $r2.<kotlinx.atomicfu.AtomicLong: long getValue()>();

     label1:
        $z0 = specialinvoke $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean tryCreateWorker(long)>($l0);

        return $z0;
    }

    private final boolean tryUnpark()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler $r0;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r1;
        kotlinx.atomicfu.AtomicInt $r2;
        boolean $z0;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

     label1:
        $r1 = specialinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker parkedWorkersStackPop()>();

        if $r1 != null goto label2;

        return 0;

     label2:
        $r2 = virtualinvoke $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.atomicfu.AtomicInt getWorkerCtl()>();

        $z0 = virtualinvoke $r2.<kotlinx.atomicfu.AtomicInt: boolean compareAndSet(int,int)>(-1, 0);

        if $z0 == 0 goto label1;

        staticinvoke <java.util.concurrent.locks.LockSupport: void unpark(java.lang.Thread)>($r1);

        return 1;
    }

    public void close()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler $r0;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        virtualinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: void shutdown(long)>(10000L);

        return;
    }

    public final kotlinx.coroutines.scheduling.Task createTask(java.lang.Runnable, kotlinx.coroutines.scheduling.TaskContext)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler $r0;
        kotlinx.coroutines.scheduling.TaskContext $r1;
        long $l0;
        java.lang.Runnable $r2;
        kotlinx.coroutines.scheduling.SchedulerTimeSource $r3;
        boolean $z0;
        kotlinx.coroutines.scheduling.Task $r4;
        kotlinx.coroutines.scheduling.TaskImpl $r5;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r2 := @parameter0: java.lang.Runnable;

        $r1 := @parameter1: kotlinx.coroutines.scheduling.TaskContext;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "block");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "taskContext");

        $r3 = <kotlinx.coroutines.scheduling.TasksKt: kotlinx.coroutines.scheduling.SchedulerTimeSource schedulerTimeSource>;

        $l0 = virtualinvoke $r3.<kotlinx.coroutines.scheduling.SchedulerTimeSource: long nanoTime()>();

        $z0 = $r2 instanceof kotlinx.coroutines.scheduling.Task;

        if $z0 == 0 goto label1;

        $r4 = (kotlinx.coroutines.scheduling.Task) $r2;

        $r4.<kotlinx.coroutines.scheduling.Task: long submissionTime> = $l0;

        $r4.<kotlinx.coroutines.scheduling.Task: kotlinx.coroutines.scheduling.TaskContext taskContext> = $r1;

        return $r4;

     label1:
        $r5 = new kotlinx.coroutines.scheduling.TaskImpl;

        specialinvoke $r5.<kotlinx.coroutines.scheduling.TaskImpl: void <init>(java.lang.Runnable,long,kotlinx.coroutines.scheduling.TaskContext)>($r2, $l0, $r1);

        return $r5;
    }

    public final void dispatch(java.lang.Runnable, kotlinx.coroutines.scheduling.TaskContext, boolean)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler $r0;
        java.lang.Runnable $r1;
        kotlinx.coroutines.scheduling.TaskContext $r2;
        boolean $z0, $z1;
        kotlinx.coroutines.AbstractTimeSource $r3;
        kotlinx.coroutines.scheduling.Task $r4, $r6;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r5;
        java.util.concurrent.RejectedExecutionException $r7;
        java.lang.String $r8;
        java.lang.StringBuilder $r9;
        int $i0;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r1 := @parameter0: java.lang.Runnable;

        $r2 := @parameter1: kotlinx.coroutines.scheduling.TaskContext;

        $z0 := @parameter2: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "block");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "taskContext");

        $r3 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

        if $r3 == null goto label1;

        virtualinvoke $r3.<kotlinx.coroutines.AbstractTimeSource: void trackTask()>();

     label1:
        $r4 = virtualinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.Task createTask(java.lang.Runnable,kotlinx.coroutines.scheduling.TaskContext)>($r1, $r2);

        $r5 = specialinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker currentWorker()>();

        $r6 = specialinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.Task submitToLocalQueue(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker,kotlinx.coroutines.scheduling.Task,boolean)>($r5, $r4, $z0);

        if $r6 == null goto label3;

        $z1 = specialinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean addToGlobalQueue(kotlinx.coroutines.scheduling.Task)>($r6);

        if $z1 == 0 goto label2;

        goto label3;

     label2:
        $r7 = new java.util.concurrent.RejectedExecutionException;

        $r8 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: java.lang.String schedulerName>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was terminated");

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.util.concurrent.RejectedExecutionException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label3:
        if $z0 == 0 goto label4;

        if $r5 == null goto label4;

        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        $r2 = $r4.<kotlinx.coroutines.scheduling.Task: kotlinx.coroutines.scheduling.TaskContext taskContext>;

        $i0 = interfaceinvoke $r2.<kotlinx.coroutines.scheduling.TaskContext: int getTaskMode()>();

        if $i0 != 0 goto label7;

        if $z0 == 0 goto label6;

        return;

     label6:
        virtualinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: void signalCpuWork()>();

        return;

     label7:
        specialinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: void signalBlockingWork(boolean)>($z0);

        return;
    }

    public void execute(java.lang.Runnable)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler $r0;
        java.lang.Runnable $r1;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r1 := @parameter0: java.lang.Runnable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "command");

        staticinvoke <kotlinx.coroutines.scheduling.CoroutineScheduler: void dispatch$default(kotlinx.coroutines.scheduling.CoroutineScheduler,java.lang.Runnable,kotlinx.coroutines.scheduling.TaskContext,boolean,int,java.lang.Object)>($r0, $r1, null, 0, 6, null);

        return;
    }

    public final boolean isTerminated()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler $r0;
        boolean $z0;
        kotlinx.atomicfu.AtomicBoolean $r1;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r1 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.atomicfu.AtomicBoolean _isTerminated>;

        $z0 = virtualinvoke $r1.<kotlinx.atomicfu.AtomicBoolean: boolean getValue()>();

        return $z0;
    }

    public final boolean parkedWorkersStackPush(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler $r0;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r1;
        java.lang.Object $r2;
        kotlinx.coroutines.internal.Symbol $r3;
        kotlinx.atomicfu.AtomicLong $r4, $r7;
        long $l0, $l1, $l4;
        int $i2, $i3;
        boolean $z0;
        java.lang.AssertionError $r5;
        kotlinx.coroutines.internal.ResizableAtomicArray $r6;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r1 := @parameter0: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "worker");

        $r2 = virtualinvoke $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: java.lang.Object getNextParkedWorker()>();

        $r3 = <kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.Symbol NOT_IN_STACK>;

        if $r2 == $r3 goto label1;

        return 0;

     label1:
        $r4 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.atomicfu.AtomicLong parkedWorkersStack>;

     label2:
        $l0 = virtualinvoke $r4.<kotlinx.atomicfu.AtomicLong: long getValue()>();

        $l1 = 2097151L & $l0;

        $i2 = (int) $l1;

        $l1 = 2097152L + $l0;

        $l1 = $l1 & -2097152L;

        $i3 = virtualinvoke $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int getIndexInArray()>();

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label6;

        if $i3 == 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        if $z0 == 0 goto label5;

        goto label6;

     label5:
        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label6:
        $r6 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.ResizableAtomicArray workers>;

        $r2 = virtualinvoke $r6.<kotlinx.coroutines.internal.ResizableAtomicArray: java.lang.Object get(int)>($i2);

        virtualinvoke $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void setNextParkedWorker(java.lang.Object)>($r2);

        $r7 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.atomicfu.AtomicLong parkedWorkersStack>;

        $l4 = (long) $i3;

        $l1 = $l1 | $l4;

        $z0 = virtualinvoke $r7.<kotlinx.atomicfu.AtomicLong: boolean compareAndSet(long,long)>($l0, $l1);

        if $z0 == 0 goto label2;

        return 1;
    }

    public final void parkedWorkersStackTopUpdate(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker, int, int)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler $r0;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r1;
        int $i0, $i1, $i4;
        kotlinx.atomicfu.AtomicLong $r2, $r3;
        long $l2, $l3, $l5;
        boolean $z0;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r1 := @parameter0: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "worker");

        $r2 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.atomicfu.AtomicLong parkedWorkersStack>;

     label1:
        $l2 = virtualinvoke $r2.<kotlinx.atomicfu.AtomicLong: long getValue()>();

        $l3 = 2097151L & $l2;

        $i4 = (int) $l3;

        $l3 = 2097152L + $l2;

        $l3 = $l3 & -2097152L;

        if $i4 != $i0 goto label3;

        if $i1 != 0 goto label2;

        $i4 = specialinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int parkedWorkersStackNextIndex(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)>($r1);

        goto label3;

     label2:
        $i4 = $i1;

     label3:
        if $i4 < 0 goto label1;

        $r3 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.atomicfu.AtomicLong parkedWorkersStack>;

        $l5 = (long) $i4;

        $l3 = $l3 | $l5;

        $z0 = virtualinvoke $r3.<kotlinx.atomicfu.AtomicLong: boolean compareAndSet(long,long)>($l2, $l3);

        if $z0 == 0 goto label1;

        return;
    }

    public final void runSafely(kotlinx.coroutines.scheduling.Task)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler $r0;
        kotlinx.coroutines.scheduling.Task $r1;
        kotlinx.coroutines.AbstractTimeSource $r2, $r3;
        java.lang.Throwable $r4, $r7;
        java.lang.Thread $r5;
        java.lang.Thread$UncaughtExceptionHandler $r6;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r1 := @parameter0: kotlinx.coroutines.scheduling.Task;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "task");

     label01:
        virtualinvoke $r1.<kotlinx.coroutines.scheduling.Task: void run()>();

     label02:
        $r2 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

        $r3 = $r2;

        if $r2 == null goto label07;

     label03:
        virtualinvoke $r3.<kotlinx.coroutines.AbstractTimeSource: void unTrackTask()>();

        return;

     label04:
        $r4 := @caughtexception;

        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

     label05:
        $r6 = virtualinvoke $r5.<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()>();

        interfaceinvoke $r6.<java.lang.Thread$UncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)>($r5, $r4);

     label06:
        $r2 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

        $r3 = $r2;

        if $r2 == null goto label12;

        goto label03;

     label07:
        return;

     label08:
        $r7 := @caughtexception;

        $r3 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

        if $r3 != null goto label09;

        goto label10;

     label09:
        virtualinvoke $r3.<kotlinx.coroutines.AbstractTimeSource: void unTrackTask()>();

     label10:
        goto label11;

     label11:
        throw $r7;

     label12:
        return;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label05 to label06 with label08;
    }

    public final void shutdown(long)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler $r0;
        int $i0, $i3;
        long $l1, $l2;
        kotlinx.atomicfu.AtomicBoolean $r1;
        boolean $z0, $z1;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r2, $r6;
        kotlinx.coroutines.internal.ResizableAtomicArray $r3;
        kotlinx.atomicfu.AtomicLong $r4;
        java.lang.Object $r5;
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState $r7, $r8;
        java.lang.AssertionError $r9;
        kotlinx.coroutines.scheduling.WorkQueue $r10;
        kotlinx.coroutines.scheduling.GlobalQueue $r11;
        kotlinx.coroutines.scheduling.Task $r12, $r13;
        java.lang.Throwable $r14;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $l1 := @parameter0: long;

        $r1 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.atomicfu.AtomicBoolean _isTerminated>;

        $z0 = 0;

        $z1 = virtualinvoke $r1.<kotlinx.atomicfu.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);

        if $z1 != 0 goto label01;

        return;

     label01:
        $r2 = specialinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker currentWorker()>();

        $r3 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.ResizableAtomicArray workers>;

        entermonitor $r3;

     label02:
        $r4 = staticinvoke <kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.atomicfu.AtomicLong access$getControlState$p(kotlinx.coroutines.scheduling.CoroutineScheduler)>($r0);

        $l2 = virtualinvoke $r4.<kotlinx.atomicfu.AtomicLong: long getValue()>();

     label03:
        $l2 = $l2 & 2097151L;

        $i0 = (int) $l2;

        exitmonitor $r3;

        if $i0 <= 0 goto label12;

        $i3 = 1;

     label04:
        $r3 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.ResizableAtomicArray workers>;

        $r5 = virtualinvoke $r3.<kotlinx.coroutines.internal.ResizableAtomicArray: java.lang.Object get(int)>($i3);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r5);

        $r6 = (kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) $r5;

        if $r6 == $r2 goto label11;

     label05:
        $z1 = virtualinvoke $r6.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean isAlive()>();

        if $z1 == 0 goto label06;

        staticinvoke <java.util.concurrent.locks.LockSupport: void unpark(java.lang.Thread)>($r6);

        virtualinvoke $r6.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void join(long)>($l1);

        goto label05;

     label06:
        $r7 = $r6.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state>;

        $z1 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z1 == 0 goto label10;

        $r8 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState TERMINATED>;

        if $r7 != $r8 goto label07;

        $z1 = 1;

        goto label08;

     label07:
        $z1 = 0;

     label08:
        if $z1 == 0 goto label09;

        goto label10;

     label09:
        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label10:
        $r10 = $r6.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.WorkQueue localQueue>;

        $r11 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalBlockingQueue>;

        virtualinvoke $r10.<kotlinx.coroutines.scheduling.WorkQueue: void offloadAllWorkTo(kotlinx.coroutines.scheduling.GlobalQueue)>($r11);

     label11:
        if $i3 == $i0 goto label12;

        $i3 = $i3 + 1;

        goto label04;

     label12:
        $r11 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalBlockingQueue>;

        virtualinvoke $r11.<kotlinx.coroutines.scheduling.GlobalQueue: void close()>();

        $r11 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalCpuQueue>;

        virtualinvoke $r11.<kotlinx.coroutines.scheduling.GlobalQueue: void close()>();

     label13:
        if $r2 == null goto label14;

        $r12 = virtualinvoke $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.Task findTask(boolean)>(1);

        $r13 = $r12;

        if $r12 != null goto label19;

     label14:
        $r11 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalCpuQueue>;

        $r5 = virtualinvoke $r11.<kotlinx.coroutines.scheduling.GlobalQueue: java.lang.Object removeFirstOrNull()>();

        $r13 = (kotlinx.coroutines.scheduling.Task) $r5;

        if $r13 != null goto label19;

        $r11 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalBlockingQueue>;

        $r5 = virtualinvoke $r11.<kotlinx.coroutines.scheduling.GlobalQueue: java.lang.Object removeFirstOrNull()>();

        $r13 = (kotlinx.coroutines.scheduling.Task) $r5;

        if $r13 != null goto label19;

        if $r2 == null goto label15;

        $r7 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState TERMINATED>;

        virtualinvoke $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean tryReleaseCpu(kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState)>($r7);

     label15:
        $z1 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z1 == 0 goto label18;

        $r4 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.atomicfu.AtomicLong controlState>;

        $l1 = virtualinvoke $r4.<kotlinx.atomicfu.AtomicLong: long getValue()>();

        $l1 = $l1 & 9223367638808264704L;

        $l1 = $l1 >> 42;

        $i0 = (int) $l1;

        $i3 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int corePoolSize>;

        if $i0 != $i3 goto label16;

        $z0 = 1;

     label16:
        if $z0 == 0 goto label17;

        goto label18;

     label17:
        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label18:
        $r4 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.atomicfu.AtomicLong parkedWorkersStack>;

        virtualinvoke $r4.<kotlinx.atomicfu.AtomicLong: void setValue(long)>(0L);

        $r4 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.atomicfu.AtomicLong controlState>;

        virtualinvoke $r4.<kotlinx.atomicfu.AtomicLong: void setValue(long)>(0L);

        return;

     label19:
        virtualinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: void runSafely(kotlinx.coroutines.scheduling.Task)>($r13);

        goto label13;

     label20:
        $r14 := @caughtexception;

        exitmonitor $r3;

        goto label21;

     label21:
        throw $r14;

        catch java.lang.Throwable from label02 to label03 with label20;
    }

    public final void signalCpuWork()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler $r0;
        boolean $z0;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $z0 = specialinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean tryUnpark()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $z0 = staticinvoke <kotlinx.coroutines.scheduling.CoroutineScheduler: boolean tryCreateWorker$default(kotlinx.coroutines.scheduling.CoroutineScheduler,long,int,java.lang.Object)>($r0, 0L, 1, null);

        if $z0 == 0 goto label2;

        return;

     label2:
        specialinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean tryUnpark()>();

        return;
    }

    public java.lang.String toString()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10;
        java.util.ArrayList $r1, r13;
        kotlinx.coroutines.internal.ResizableAtomicArray $r2;
        java.lang.Object $r3;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r4;
        kotlinx.coroutines.scheduling.WorkQueue $r5;
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState $r6;
        int[] $r7;
        java.lang.StringBuilder $r8, r14;
        java.lang.String $r9, $r11;
        kotlinx.atomicfu.AtomicLong $r10;
        long $l9, $l11;
        kotlinx.coroutines.scheduling.GlobalQueue $r12;
        java.util.Collection r15;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        r13 = new java.util.ArrayList;

        $r1 = r13;

        specialinvoke r13.<java.util.ArrayList: void <init>()>();

        $r2 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.ResizableAtomicArray workers>;

        $i1 = virtualinvoke $r2.<kotlinx.coroutines.internal.ResizableAtomicArray: int currentLength()>();

        $i2 = 0;

        $i3 = 0;

        $i4 = 0;

        $i5 = 0;

        $i6 = 0;

        $i0 = 1;

     label01:
        if $i0 >= $i1 goto label11;

        $r2 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.ResizableAtomicArray workers>;

        $r3 = virtualinvoke $r2.<kotlinx.coroutines.internal.ResizableAtomicArray: java.lang.Object get(int)>($i0);

        $r4 = (kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) $r3;

        if $r4 != null goto label02;

        goto label05;

     label02:
        $r5 = $r4.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.WorkQueue localQueue>;

        $i7 = virtualinvoke $r5.<kotlinx.coroutines.scheduling.WorkQueue: int getSize$third_party_kotlin_kotlinx_coroutines_kotlinx_coroutines()>();

        $r6 = $r4.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state>;

        $r7 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i8 = virtualinvoke $r6.<kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: int ordinal()>();

        $i8 = $r7[$i8];

        lookupswitch($i8)
        {
            case 1: goto label09;
            case 2: goto label08;
            case 3: goto label07;
            case 4: goto label06;
            case 5: goto label04;
            default: goto label03;
        };

     label03:
        goto label05;

     label04:
        $i6 = $i6 + 1;

     label05:
        goto label10;

     label06:
        $i5 = $i5 + 1;

        if $i7 <= 0 goto label05;

        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("d");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        r15 = (java.util.Collection) $r1;

        interfaceinvoke r15.<java.util.Collection: boolean add(java.lang.Object)>($r9);

        goto label10;

     label07:
        $i2 = $i2 + 1;

        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("c");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        r15 = (java.util.Collection) $r1;

        interfaceinvoke r15.<java.util.Collection: boolean add(java.lang.Object)>($r9);

        goto label10;

     label08:
        $i3 = $i3 + 1;

        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("b");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        r15 = (java.util.Collection) $r1;

        interfaceinvoke r15.<java.util.Collection: boolean add(java.lang.Object)>($r9);

        goto label10;

     label09:
        $i4 = $i4 + 1;

     label10:
        $i0 = $i0 + 1;

        goto label01;

     label11:
        $r10 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.atomicfu.AtomicLong controlState>;

        $l9 = virtualinvoke $r10.<kotlinx.atomicfu.AtomicLong: long getValue()>();

        $r9 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: java.lang.String schedulerName>;

        $r11 = staticinvoke <kotlinx.coroutines.DebugStringsKt: java.lang.String getHexAddress(java.lang.Object)>($r0);

        $i7 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int corePoolSize>;

        $i0 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int maxPoolSize>;

        $r12 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalCpuQueue>;

        $i8 = virtualinvoke $r12.<kotlinx.coroutines.scheduling.GlobalQueue: int getSize()>();

        $r12 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalBlockingQueue>;

        $i10 = virtualinvoke $r12.<kotlinx.coroutines.scheduling.GlobalQueue: int getSize()>();

        $i1 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int corePoolSize>;

        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[Pool Size {core = ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", max = ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}, Worker States {CPU = ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", blocking = ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", parked = ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", dormant = ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", terminated = ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}, running workers queues = ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", global CPU queue size = ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", global blocking queue size = ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", Control State {created workers= ");

        $l11 = 2097151L & $l9;

        $i2 = (int) $l11;

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", blocking tasks = ");

        $l11 = 4398044413952L & $l9;

        $l11 = $l11 >> 21;

        $i2 = (int) $l11;

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", CPUs acquired = ");

        $l9 = 9223367638808264704L & $l9;

        $l9 = $l9 >> 42;

        $i2 = (int) $l9;

        $i2 = $i1 - $i2;

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}]");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

kotlinx.coroutines.scheduling.CoroutineScheduler$Companion
    private void <init>()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Companion $r0;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Companion;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Companion $r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Companion: void <init>()>();

        return;
    }

kotlinx.coroutines.scheduling.CoroutineScheduler$WhenMappings
<kotlinx.coroutines.scheduling.CoroutineScheduler$WhenMappings: int[] $EnumSwitchMapping$0>
    static void <clinit>()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState[] $r0;
        int $i0;
        int[] $r1;
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState $r2;

        $r0 = staticinvoke <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState[] values()>();

        $i0 = lengthof $r0;

        $r1 = newarray (int)[$i0];

        $r2 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState PARKING>;

        $i0 = virtualinvoke $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: int ordinal()>();

        $r1[$i0] = 1;

        $r2 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState BLOCKING>;

        $i0 = virtualinvoke $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: int ordinal()>();

        $r1[$i0] = 2;

        $r2 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState CPU_ACQUIRED>;

        $i0 = virtualinvoke $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: int ordinal()>();

        $r1[$i0] = 3;

        $r2 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState DORMANT>;

        $i0 = virtualinvoke $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: int ordinal()>();

        $r1[$i0] = 4;

        $r2 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState TERMINATED>;

        $i0 = virtualinvoke $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: int ordinal()>();

        $r1[$i0] = 5;

        <kotlinx.coroutines.scheduling.CoroutineScheduler$WhenMappings: int[] $EnumSwitchMapping$0> = $r1;

        return;
    }

kotlinx.coroutines.scheduling.CoroutineScheduler$Worker
<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int indexInArray>
<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.WorkQueue localQueue>
<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean mayHaveLocalTasks>
<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: long minDelayUntilStealableTaskNs>
<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: java.lang.Object nextParkedWorker>
<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int rngState>
<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state>
<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: long terminationDeadline>
<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>
<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.atomicfu.AtomicInt workerCtl>
    private void <init>(kotlinx.coroutines.scheduling.CoroutineScheduler)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r0;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r1;
        kotlinx.coroutines.scheduling.WorkQueue $r2;
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState $r3;
        kotlinx.atomicfu.AtomicInt $r4;
        kotlinx.coroutines.internal.Symbol $r5;
        kotlin.random.Random$Default $r6;
        int $i0;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $r1 := @parameter0: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0> = $r1;

        specialinvoke $r0.<java.lang.Thread: void <init>()>();

        virtualinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void setDaemon(boolean)>(1);

        $r2 = new kotlinx.coroutines.scheduling.WorkQueue;

        specialinvoke $r2.<kotlinx.coroutines.scheduling.WorkQueue: void <init>()>();

        $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.WorkQueue localQueue> = $r2;

        $r3 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState DORMANT>;

        $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state> = $r3;

        $r4 = staticinvoke <kotlinx.atomicfu.AtomicFU: kotlinx.atomicfu.AtomicInt atomic(int)>(0);

        $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.atomicfu.AtomicInt workerCtl> = $r4;

        $r5 = <kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.Symbol NOT_IN_STACK>;

        $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: java.lang.Object nextParkedWorker> = $r5;

        $r6 = <kotlin.random.Random: kotlin.random.Random$Default Default>;

        $i0 = virtualinvoke $r6.<kotlin.random.Random$Default: int nextInt()>();

        $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int rngState> = $i0;

        return;
    }

    public void <init>(kotlinx.coroutines.scheduling.CoroutineScheduler, int)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r0;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r1;
        int $i0;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $r1 := @parameter0: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $i0 := @parameter1: int;

        specialinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void <init>(kotlinx.coroutines.scheduling.CoroutineScheduler)>($r1);

        virtualinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void setIndexInArray(int)>($i0);

        return;
    }

    public static final kotlinx.coroutines.scheduling.CoroutineScheduler access$getThis$0$p(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r0;
        kotlinx.coroutines.scheduling.CoroutineScheduler r1;

        $r0 := @parameter0: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        r1 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        return r1;
    }

    private final void afterTask(int)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r0;
        int $i0;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r1;
        kotlinx.atomicfu.AtomicLong $r2;
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState $r3, $r4;
        boolean $z0;
        java.lang.AssertionError $r5;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return;

     label1:
        $r1 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $r2 = staticinvoke <kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.atomicfu.AtomicLong access$getControlState$p(kotlinx.coroutines.scheduling.CoroutineScheduler)>($r1);

        virtualinvoke $r2.<kotlinx.atomicfu.AtomicLong: long addAndGet(long)>(-2097152L);

        $r3 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state>;

        $r4 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState TERMINATED>;

        if $r3 == $r4 goto label6;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label5;

        $r4 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState BLOCKING>;

        if $r3 != $r4 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 == 0 goto label4;

        goto label5;

     label4:
        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label5:
        $r3 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState DORMANT>;

        $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state> = $r3;

     label6:
        return;
    }

    private final void beforeTask(int)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r0;
        boolean $z0;
        int $i0;
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState $r1;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r2;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return;

     label1:
        $r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState BLOCKING>;

        $z0 = virtualinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean tryReleaseCpu(kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState)>($r1);

        if $z0 == 0 goto label2;

        $r2 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        virtualinvoke $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler: void signalCpuWork()>();

     label2:
        return;
    }

    private final void executeTask(kotlinx.coroutines.scheduling.Task)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r0;
        kotlinx.coroutines.scheduling.Task $r1;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r2;
        int $i0;
        kotlinx.coroutines.scheduling.TaskContext $r3;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $r1 := @parameter0: kotlinx.coroutines.scheduling.Task;

        $r3 = $r1.<kotlinx.coroutines.scheduling.Task: kotlinx.coroutines.scheduling.TaskContext taskContext>;

        $i0 = interfaceinvoke $r3.<kotlinx.coroutines.scheduling.TaskContext: int getTaskMode()>();

        specialinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void idleReset(int)>($i0);

        specialinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void beforeTask(int)>($i0);

        $r2 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        virtualinvoke $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler: void runSafely(kotlinx.coroutines.scheduling.Task)>($r1);

        specialinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void afterTask(int)>($i0);

        return;
    }

    private final kotlinx.coroutines.scheduling.Task findAnyTask(boolean)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r0;
        boolean $z0;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r1;
        int $i0;
        kotlinx.coroutines.scheduling.Task $r2;
        kotlinx.coroutines.scheduling.WorkQueue $r3;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label5;

        $r1 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $i0 = $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler: int corePoolSize>;

        $i0 = $i0 + $i0;

        $i0 = virtualinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int nextInt(int)>($i0);

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $r2 = specialinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.Task pollGlobalQueues()>();

        if $r2 == null goto label3;

        return $r2;

     label3:
        $r3 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.WorkQueue localQueue>;

        $r2 = virtualinvoke $r3.<kotlinx.coroutines.scheduling.WorkQueue: kotlinx.coroutines.scheduling.Task poll()>();

        if $r2 == null goto label4;

        return $r2;

     label4:
        if $z0 != 0 goto label6;

        $r2 = specialinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.Task pollGlobalQueues()>();

        if $r2 == null goto label6;

        return $r2;

     label5:
        $r2 = specialinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.Task pollGlobalQueues()>();

        if $r2 == null goto label6;

        return $r2;

     label6:
        $r2 = specialinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.Task trySteal(boolean)>(0);

        return $r2;
    }

    private final void idleReset(int)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r0;
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState $r1, $r2;
        boolean $z0;
        int $i0;
        java.lang.AssertionError $r3;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $i0 := @parameter0: int;

        $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: long terminationDeadline> = 0L;

        $r2 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state>;

        $r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState PARKING>;

        if $r2 != $r1 goto label5;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label4;

        $z0 = 1;

        if $i0 != 1 goto label1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        goto label4;

     label3:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label4:
        $r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState BLOCKING>;

        $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state> = $r1;

     label5:
        return;
    }

    private final boolean inStack()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r0;
        kotlinx.coroutines.internal.Symbol $r1;
        java.lang.Object $r2;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $r2 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: java.lang.Object nextParkedWorker>;

        $r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.Symbol NOT_IN_STACK>;

        if $r2 == $r1 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final void park()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r0;
        long $l0, $l2;
        byte $b1;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r1;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $l0 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: long terminationDeadline>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

        $r1 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $l2 = $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler: long idleWorkerKeepAliveNs>;

        $l0 = $l0 + $l2;

        $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: long terminationDeadline> = $l0;

     label1:
        $r1 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $l0 = $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler: long idleWorkerKeepAliveNs>;

        staticinvoke <java.util.concurrent.locks.LockSupport: void parkNanos(long)>($l0);

        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

        $l2 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: long terminationDeadline>;

        $l0 = $l0 - $l2;

        $b1 = $l0 cmp 0L;

        if $b1 < 0 goto label2;

        $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: long terminationDeadline> = 0L;

        specialinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void tryTerminateWorker()>();

     label2:
        return;
    }

    private final kotlinx.coroutines.scheduling.Task pollGlobalQueues()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r0;
        int $i0;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r1;
        kotlinx.coroutines.scheduling.GlobalQueue $r2;
        java.lang.Object $r3;
        kotlinx.coroutines.scheduling.Task $r4;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $i0 = virtualinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int nextInt(int)>(2);

        if $i0 != 0 goto label2;

        $r1 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $r2 = $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalCpuQueue>;

        $r3 = virtualinvoke $r2.<kotlinx.coroutines.scheduling.GlobalQueue: java.lang.Object removeFirstOrNull()>();

        $r4 = (kotlinx.coroutines.scheduling.Task) $r3;

        if $r4 == null goto label1;

        return $r4;

     label1:
        $r1 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $r2 = $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalBlockingQueue>;

        $r3 = virtualinvoke $r2.<kotlinx.coroutines.scheduling.GlobalQueue: java.lang.Object removeFirstOrNull()>();

        $r4 = (kotlinx.coroutines.scheduling.Task) $r3;

        return $r4;

     label2:
        $r1 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $r2 = $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalBlockingQueue>;

        $r3 = virtualinvoke $r2.<kotlinx.coroutines.scheduling.GlobalQueue: java.lang.Object removeFirstOrNull()>();

        $r4 = (kotlinx.coroutines.scheduling.Task) $r3;

        if $r4 == null goto label3;

        return $r4;

     label3:
        $r1 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $r2 = $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalCpuQueue>;

        $r3 = virtualinvoke $r2.<kotlinx.coroutines.scheduling.GlobalQueue: java.lang.Object removeFirstOrNull()>();

        $r4 = (kotlinx.coroutines.scheduling.Task) $r3;

        return $r4;
    }

    private final void runWorker()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r0;
        long $l0;
        boolean $z0, $z1;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r1;
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState $r2, $r3;
        kotlinx.coroutines.scheduling.Task $r4;
        byte $b1;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $z0 = 0;

     label1:
        $r1 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $z1 = virtualinvoke $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean isTerminated()>();

        if $z1 != 0 goto label5;

        $r2 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state>;

        $r3 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState TERMINATED>;

        if $r2 == $r3 goto label5;

        $z1 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean mayHaveLocalTasks>;

        $r4 = virtualinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.Task findTask(boolean)>($z1);

        if $r4 == null goto label2;

        $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: long minDelayUntilStealableTaskNs> = 0L;

        specialinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void executeTask(kotlinx.coroutines.scheduling.Task)>($r4);

        $z0 = 0;

        goto label1;

     label2:
        $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean mayHaveLocalTasks> = 0;

        $l0 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: long minDelayUntilStealableTaskNs>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label4;

        if $z0 != 0 goto label3;

        $z0 = 1;

        goto label1;

     label3:
        $r2 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState PARKING>;

        virtualinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean tryReleaseCpu(kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState)>($r2);

        staticinvoke <java.lang.Thread: boolean interrupted()>();

        $l0 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: long minDelayUntilStealableTaskNs>;

        staticinvoke <java.util.concurrent.locks.LockSupport: void parkNanos(long)>($l0);

        $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: long minDelayUntilStealableTaskNs> = 0L;

        $z0 = 0;

        goto label1;

     label4:
        specialinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void tryPark()>();

        goto label1;

     label5:
        $r2 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState TERMINATED>;

        virtualinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean tryReleaseCpu(kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState)>($r2);

        return;
    }

    private final boolean tryAcquireCpuPermit()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r0;
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState $r1, $r2;
        boolean $z0, $z1;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r3;
        kotlinx.atomicfu.AtomicLong $r4, $r5;
        long $l0, $l1;
        int $i2;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $r1 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state>;

        $r2 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState CPU_ACQUIRED>;

        $z0 = 1;

        if $r1 != $r2 goto label1;

        goto label6;

     label1:
        $r3 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $r4 = staticinvoke <kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.atomicfu.AtomicLong access$getControlState$p(kotlinx.coroutines.scheduling.CoroutineScheduler)>($r3);

     label2:
        $l0 = virtualinvoke $r4.<kotlinx.atomicfu.AtomicLong: long getValue()>();

        $l1 = 9223367638808264704L & $l0;

        $l1 = $l1 >> 42;

        $i2 = (int) $l1;

        if $i2 != 0 goto label3;

        $z1 = 0;

        goto label4;

     label3:
        $r5 = staticinvoke <kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.atomicfu.AtomicLong access$getControlState$p(kotlinx.coroutines.scheduling.CoroutineScheduler)>($r3);

        $l1 = -4398046511104L + $l0;

        $z1 = virtualinvoke $r5.<kotlinx.atomicfu.AtomicLong: boolean compareAndSet(long,long)>($l0, $l1);

        if $z1 == 0 goto label2;

        $z1 = 1;

     label4:
        if $z1 == 0 goto label5;

        $r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState CPU_ACQUIRED>;

        $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state> = $r1;

        goto label6;

     label5:
        $z0 = 0;

     label6:
        return $z0;
    }

    private final void tryPark()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r0;
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState $r1, $r6;
        boolean $z0;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r2;
        kotlinx.coroutines.scheduling.WorkQueue $r3;
        int $i0;
        java.lang.AssertionError $r4;
        kotlinx.atomicfu.AtomicInt $r5;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $z0 = specialinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean inStack()>();

        if $z0 != 0 goto label1;

        $r2 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        virtualinvoke $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean parkedWorkersStackPush(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)>($r0);

        return;

     label1:
        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label5;

        $r3 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.WorkQueue localQueue>;

        $i0 = virtualinvoke $r3.<kotlinx.coroutines.scheduling.WorkQueue: int getSize$third_party_kotlin_kotlinx_coroutines_kotlinx_coroutines()>();

        if $i0 != 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 == 0 goto label4;

        goto label5;

     label4:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label5:
        $r5 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.atomicfu.AtomicInt workerCtl>;

        virtualinvoke $r5.<kotlinx.atomicfu.AtomicInt: void setValue(int)>(-1);

     label6:
        $z0 = specialinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean inStack()>();

        if $z0 == 0 goto label8;

        $r5 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.atomicfu.AtomicInt workerCtl>;

        $i0 = virtualinvoke $r5.<kotlinx.atomicfu.AtomicInt: int getValue()>();

        if $i0 != -1 goto label8;

        $r2 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $z0 = virtualinvoke $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean isTerminated()>();

        if $z0 != 0 goto label8;

        $r6 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state>;

        $r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState TERMINATED>;

        if $r6 != $r1 goto label7;

        return;

     label7:
        $r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState PARKING>;

        virtualinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean tryReleaseCpu(kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState)>($r1);

        staticinvoke <java.lang.Thread: boolean interrupted()>();

        specialinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void park()>();

        goto label6;

     label8:
        return;
    }

    private final kotlinx.coroutines.scheduling.Task trySteal(boolean)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r0, $r7;
        boolean $z0, $z1;
        byte $b0;
        kotlinx.coroutines.scheduling.WorkQueue $r1, $r8;
        int $i1, $i3, $i4, $i5;
        java.lang.AssertionError $r2;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r3;
        kotlinx.atomicfu.AtomicLong $r4;
        long $l2, $l6;
        kotlinx.coroutines.internal.ResizableAtomicArray $r5;
        java.lang.Object $r6;
        kotlinx.coroutines.scheduling.Task $r9;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $z0 := @parameter0: boolean;

        $z1 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z1 == 0 goto label04;

        $r1 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.WorkQueue localQueue>;

        $i1 = virtualinvoke $r1.<kotlinx.coroutines.scheduling.WorkQueue: int getSize$third_party_kotlin_kotlinx_coroutines_kotlinx_coroutines()>();

        if $i1 != 0 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        if $z1 == 0 goto label03;

        goto label04;

     label03:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label04:
        $r3 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $r4 = staticinvoke <kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.atomicfu.AtomicLong access$getControlState$p(kotlinx.coroutines.scheduling.CoroutineScheduler)>($r3);

        $l2 = virtualinvoke $r4.<kotlinx.atomicfu.AtomicLong: long getValue()>();

        $l2 = $l2 & 2097151L;

        $i1 = (int) $l2;

        if $i1 >= 2 goto label05;

        return null;

     label05:
        $i3 = virtualinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int nextInt(int)>($i1);

        $r3 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $l2 = 9223372036854775807L;

        $i4 = 0;

     label06:
        if $i4 >= $i1 goto label16;

        $i3 = $i3 + 1;

        if $i3 <= $i1 goto label07;

        $i3 = 1;

     label07:
        $r5 = $r3.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.ResizableAtomicArray workers>;

        $r6 = virtualinvoke $r5.<kotlinx.coroutines.internal.ResizableAtomicArray: java.lang.Object get(int)>($i3);

        $r7 = (kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) $r6;

        if $r7 == null goto label15;

        if $r7 == $r0 goto label15;

        $z1 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z1 == 0 goto label11;

        $r1 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.WorkQueue localQueue>;

        $i5 = virtualinvoke $r1.<kotlinx.coroutines.scheduling.WorkQueue: int getSize$third_party_kotlin_kotlinx_coroutines_kotlinx_coroutines()>();

        if $i5 != 0 goto label08;

        $z1 = 1;

        goto label09;

     label08:
        $z1 = 0;

     label09:
        if $z1 == 0 goto label10;

        goto label11;

     label10:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label11:
        if $z0 == 0 goto label12;

        $r1 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.WorkQueue localQueue>;

        $r8 = $r7.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.WorkQueue localQueue>;

        $l6 = virtualinvoke $r1.<kotlinx.coroutines.scheduling.WorkQueue: long tryStealBlockingFrom(kotlinx.coroutines.scheduling.WorkQueue)>($r8);

        goto label13;

     label12:
        $r1 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.WorkQueue localQueue>;

        $r8 = $r7.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.WorkQueue localQueue>;

        $l6 = virtualinvoke $r1.<kotlinx.coroutines.scheduling.WorkQueue: long tryStealFrom(kotlinx.coroutines.scheduling.WorkQueue)>($r8);

     label13:
        $b0 = $l6 cmp -1L;

        if $b0 != 0 goto label14;

        $r1 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.WorkQueue localQueue>;

        $r9 = virtualinvoke $r1.<kotlinx.coroutines.scheduling.WorkQueue: kotlinx.coroutines.scheduling.Task poll()>();

        return $r9;

     label14:
        $b0 = $l6 cmp 0L;

        if $b0 <= 0 goto label15;

        $l2 = staticinvoke <java.lang.Math: long min(long,long)>($l2, $l6);

        goto label15;

     label15:
        $i4 = $i4 + 1;

        goto label06;

     label16:
        $b0 = $l2 cmp 9223372036854775807L;

        if $b0 == 0 goto label17;

        goto label18;

     label17:
        $l2 = 0L;

     label18:
        $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: long minDelayUntilStealableTaskNs> = $l2;

        return null;
    }

    private final void tryTerminateWorker()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r0, $r7;
        kotlinx.coroutines.internal.ResizableAtomicArray $r1, $r3;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r2;
        boolean $z0;
        kotlinx.atomicfu.AtomicLong $r4;
        long $l0;
        int $i1, $i2;
        kotlinx.atomicfu.AtomicInt $r5;
        java.lang.Object $r6;
        kotlin.Unit $r8;
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState $r9;
        java.lang.Throwable $r10;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $r2 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $r3 = $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.ResizableAtomicArray workers>;

        $r2 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        entermonitor $r3;

     label01:
        $z0 = virtualinvoke $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean isTerminated()>();

     label02:
        if $z0 == 0 goto label03;

        exitmonitor $r3;

        return;

     label03:
        $r4 = staticinvoke <kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.atomicfu.AtomicLong access$getControlState$p(kotlinx.coroutines.scheduling.CoroutineScheduler)>($r2);

        $l0 = virtualinvoke $r4.<kotlinx.atomicfu.AtomicLong: long getValue()>();

        $l0 = $l0 & 2097151L;

        $i1 = (int) $l0;

        $i2 = $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler: int corePoolSize>;

     label04:
        if $i1 > $i2 goto label05;

        exitmonitor $r3;

        return;

     label05:
        $r5 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.atomicfu.AtomicInt workerCtl>;

        $z0 = virtualinvoke $r5.<kotlinx.atomicfu.AtomicInt: boolean compareAndSet(int,int)>(-1, 1);

     label06:
        if $z0 != 0 goto label07;

        exitmonitor $r3;

        return;

     label07:
        $i1 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int indexInArray>;

        virtualinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void setIndexInArray(int)>(0);

        virtualinvoke $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler: void parkedWorkersStackTopUpdate(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker,int,int)>($r0, $i1, 0);

        $r4 = staticinvoke <kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.atomicfu.AtomicLong access$getControlState$p(kotlinx.coroutines.scheduling.CoroutineScheduler)>($r2);

        $l0 = virtualinvoke $r4.<kotlinx.atomicfu.AtomicLong: long getAndDecrement()>();

        $l0 = 2097151L & $l0;

        $i2 = (int) $l0;

        if $i2 == $i1 goto label08;

        $r1 = $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.ResizableAtomicArray workers>;

        $r6 = virtualinvoke $r1.<kotlinx.coroutines.internal.ResizableAtomicArray: java.lang.Object get(int)>($i2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r6);

        $r7 = (kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) $r6;

        $r1 = $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.ResizableAtomicArray workers>;

        virtualinvoke $r1.<kotlinx.coroutines.internal.ResizableAtomicArray: void setSynchronized(int,java.lang.Object)>($i1, $r7);

        virtualinvoke $r7.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void setIndexInArray(int)>($i1);

        virtualinvoke $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler: void parkedWorkersStackTopUpdate(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker,int,int)>($r7, $i2, $i1);

     label08:
        $r1 = $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.ResizableAtomicArray workers>;

        virtualinvoke $r1.<kotlinx.coroutines.internal.ResizableAtomicArray: void setSynchronized(int,java.lang.Object)>($i2, null);

        $r8 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label09:
        exitmonitor $r3;

        $r9 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState TERMINATED>;

        $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state> = $r9;

        return;

     label10:
        $r10 := @caughtexception;

        exitmonitor $r3;

        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label09 with label10;
    }

    public final kotlinx.coroutines.scheduling.Task findTask(boolean)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r0;
        boolean $z0, $z1;
        kotlinx.coroutines.scheduling.Task $r1, $r3;
        kotlinx.coroutines.scheduling.WorkQueue $r2;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r4;
        kotlinx.coroutines.scheduling.GlobalQueue $r5;
        java.lang.Object $r6;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $z0 := @parameter0: boolean;

        $z1 = specialinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean tryAcquireCpuPermit()>();

        if $z1 == 0 goto label1;

        $r1 = specialinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.Task findAnyTask(boolean)>($z0);

        return $r1;

     label1:
        if $z0 == 0 goto label2;

        $r2 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.WorkQueue localQueue>;

        $r1 = virtualinvoke $r2.<kotlinx.coroutines.scheduling.WorkQueue: kotlinx.coroutines.scheduling.Task poll()>();

        $r3 = $r1;

        if $r1 != null goto label3;

        $r4 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $r5 = $r4.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalBlockingQueue>;

        $r6 = virtualinvoke $r5.<kotlinx.coroutines.scheduling.GlobalQueue: java.lang.Object removeFirstOrNull()>();

        $r3 = (kotlinx.coroutines.scheduling.Task) $r6;

        goto label3;

     label2:
        $r4 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $r5 = $r4.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalBlockingQueue>;

        $r6 = virtualinvoke $r5.<kotlinx.coroutines.scheduling.GlobalQueue: java.lang.Object removeFirstOrNull()>();

        $r3 = (kotlinx.coroutines.scheduling.Task) $r6;

     label3:
        if $r3 != null goto label4;

        $r1 = specialinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.Task trySteal(boolean)>(1);

        return $r1;

     label4:
        return $r3;
    }

    public final int getIndexInArray()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r0;
        int i0;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        i0 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int indexInArray>;

        return i0;
    }

    public final java.lang.Object getNextParkedWorker()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r0;
        java.lang.Object r1;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        r1 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: java.lang.Object nextParkedWorker>;

        return r1;
    }

    public final kotlinx.atomicfu.AtomicInt getWorkerCtl()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r0;
        kotlinx.atomicfu.AtomicInt r1;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        r1 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.atomicfu.AtomicInt workerCtl>;

        return r1;
    }

    public final int nextInt(int)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r0;
        int $i0, $i1, $i2, $i3;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $i1 := @parameter0: int;

        $i0 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int rngState>;

        $i2 = $i0 << 13;

        $i0 = $i0 ^ $i2;

        $i2 = $i0 >> 17;

        $i0 = $i0 ^ $i2;

        $i2 = $i0 << 5;

        $i2 = $i0 ^ $i2;

        $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int rngState> = $i2;

        $i3 = $i1 + -1;

        $i0 = $i3 & $i1;

        if $i0 != 0 goto label1;

        $i1 = $i2 & $i3;

        return $i1;

     label1:
        $i0 = $i2 & 2147483647;

        $i1 = $i0 % $i1;

        return $i1;
    }

    public void run()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r0;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        specialinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void runWorker()>();

        return;
    }

    public final void setIndexInArray(int)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r0;
        int $i0;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r1;
        java.lang.String $r2, $r3;
        java.lang.StringBuilder $r4;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $i0 := @parameter0: int;

        $r1 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $r2 = $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler: java.lang.String schedulerName>;

        if $i0 != 0 goto label1;

        $r3 = "TERMINATED";

        goto label2;

     label1:
        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-worker-");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void setName(java.lang.String)>($r2);

        $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int indexInArray> = $i0;

        return;
    }

    public final void setNextParkedWorker(java.lang.Object)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r0;
        java.lang.Object $r1;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $r1 := @parameter0: java.lang.Object;

        $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: java.lang.Object nextParkedWorker> = $r1;

        return;
    }

    public final boolean tryReleaseCpu(kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r0;
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState $r1, $r3, $r4;
        kotlinx.atomicfu.AtomicLong $r2;
        boolean $z0;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r5;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $r1 := @parameter0: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "newState");

        $r3 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state>;

        $r4 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState CPU_ACQUIRED>;

        if $r3 != $r4 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $r5 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $r2 = staticinvoke <kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.atomicfu.AtomicLong access$getControlState$p(kotlinx.coroutines.scheduling.CoroutineScheduler)>($r5);

        virtualinvoke $r2.<kotlinx.atomicfu.AtomicLong: long addAndGet(long)>(4398046511104L);

     label3:
        if $r3 == $r1 goto label4;

        $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state> = $r1;

     label4:
        return $z0;
    }

kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState
<kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState[] $VALUES>
<kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState BLOCKING>
<kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState CPU_ACQUIRED>
<kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState DORMANT>
<kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState PARKING>
<kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState TERMINATED>
    private static final kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState[] $values()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState[] $r0;
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState $r1;

        $r0 = newarray (kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState)[5];

        $r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState CPU_ACQUIRED>;

        $r0[0] = $r1;

        $r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState BLOCKING>;

        $r0[1] = $r1;

        $r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState PARKING>;

        $r0[2] = $r1;

        $r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState DORMANT>;

        $r0[3] = $r1;

        $r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState TERMINATED>;

        $r0[4] = $r1;

        return $r0;
    }

    static void <clinit>()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState[] $r0;
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState $r1;

        $r1 = new kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState;

        specialinvoke $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: void <init>(java.lang.String,int)>("CPU_ACQUIRED", 0);

        <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState CPU_ACQUIRED> = $r1;

        $r1 = new kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState;

        specialinvoke $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: void <init>(java.lang.String,int)>("BLOCKING", 1);

        <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState BLOCKING> = $r1;

        $r1 = new kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState;

        specialinvoke $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: void <init>(java.lang.String,int)>("PARKING", 2);

        <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState PARKING> = $r1;

        $r1 = new kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState;

        specialinvoke $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: void <init>(java.lang.String,int)>("DORMANT", 3);

        <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState DORMANT> = $r1;

        $r1 = new kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState;

        specialinvoke $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: void <init>(java.lang.String,int)>("TERMINATED", 4);

        <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState TERMINATED> = $r1;

        $r0 = staticinvoke <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState[] $values()>();

        <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState[] $VALUES> = $r0;

        return;
    }

    private void <init>(java.lang.String, int)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState $r0;
        java.lang.String $r1;
        int $i0;

        $r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        specialinvoke $r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0);

        return;
    }

    public static kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState[] values()
    {
        java.lang.Object $r0;
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState[] $r1;

        $r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState[] $VALUES>;

        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState[]) $r0;

        return $r1;
    }

