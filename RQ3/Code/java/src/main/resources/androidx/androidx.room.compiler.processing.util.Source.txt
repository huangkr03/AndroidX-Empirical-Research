androidx.room.compiler.processing.util.Source
<androidx.room.compiler.processing.util.Source: androidx.room.compiler.processing.util.Source$Companion Companion>
    private void <init>()
    {
        androidx.room.compiler.processing.util.Source r0;

        r0 := @this: androidx.room.compiler.processing.util.Source;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

<androidx.room.compiler.processing.util.Source: java.lang.String getRelativePath()>
<androidx.room.compiler.processing.util.Source: java.lang.String getContents()>
<androidx.room.compiler.processing.util.Source: javax.tools.JavaFileObject toJFO()>
    public java.lang.String toString()
    {
        androidx.room.compiler.processing.util.Source r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5;
        java.lang.String $r3, $r6;

        r0 := @this: androidx.room.compiler.processing.util.Source;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SourceFile[");

        $r3 = virtualinvoke r0.<androidx.room.compiler.processing.util.Source: java.lang.String getRelativePath()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public boolean equals(java.lang.Object)
    {
        androidx.room.compiler.processing.util.Source r0, $r3, $r6;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        java.lang.String $r2, $r4, $r5, $r7;

        r0 := @this: androidx.room.compiler.processing.util.Source;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof androidx.room.compiler.processing.util.Source;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r2 = virtualinvoke r0.<androidx.room.compiler.processing.util.Source: java.lang.String getRelativePath()>();

        $r3 = (androidx.room.compiler.processing.util.Source) r1;

        $r4 = virtualinvoke $r3.<androidx.room.compiler.processing.util.Source: java.lang.String getRelativePath()>();

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, $r4);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        $r5 = virtualinvoke r0.<androidx.room.compiler.processing.util.Source: java.lang.String getContents()>();

        $r6 = (androidx.room.compiler.processing.util.Source) r1;

        $r7 = virtualinvoke $r6.<androidx.room.compiler.processing.util.Source: java.lang.String getContents()>();

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r5, $r7);

        if $z2 != 0 goto label4;

        return 0;

     label4:
        return 1;
    }

    public int hashCode()
    {
        androidx.room.compiler.processing.util.Source r0;
        java.lang.String $r1, $r2;
        int $i0, $i1, i2, i3;

        r0 := @this: androidx.room.compiler.processing.util.Source;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.util.Source: java.lang.String getRelativePath()>();

        i2 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        $i0 = 31 * i2;

        $r2 = virtualinvoke r0.<androidx.room.compiler.processing.util.Source: java.lang.String getContents()>();

        $i1 = virtualinvoke $r2.<java.lang.String: int hashCode()>();

        i3 = $i0 + $i1;

        return i3;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.room.compiler.processing.util.Source r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.room.compiler.processing.util.Source;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.room.compiler.processing.util.Source: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        androidx.room.compiler.processing.util.Source$Companion $r0;

        $r0 = new androidx.room.compiler.processing.util.Source$Companion;

        specialinvoke $r0.<androidx.room.compiler.processing.util.Source$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.room.compiler.processing.util.Source: androidx.room.compiler.processing.util.Source$Companion Companion> = $r0;

        return;
    }

androidx.room.compiler.processing.util.Source$Companion
    private void <init>()
    {
        androidx.room.compiler.processing.util.Source$Companion r0;

        r0 := @this: androidx.room.compiler.processing.util.Source$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final androidx.room.compiler.processing.util.Source java(java.lang.String, java.lang.String)
    {
        androidx.room.compiler.processing.util.Source$Companion r0;
        java.lang.String r1, r2;
        androidx.room.compiler.processing.util.Source$JavaSource $r3;
        androidx.room.compiler.processing.util.Source $r4;

        r0 := @this: androidx.room.compiler.processing.util.Source$Companion;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "qName");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "code");

        $r3 = new androidx.room.compiler.processing.util.Source$JavaSource;

        specialinvoke $r3.<androidx.room.compiler.processing.util.Source$JavaSource: void <init>(java.lang.String,java.lang.String)>(r1, r2);

        $r4 = (androidx.room.compiler.processing.util.Source) $r3;

        return $r4;
    }

    public final androidx.room.compiler.processing.util.Source kotlin(java.lang.String, java.lang.String)
    {
        androidx.room.compiler.processing.util.Source$Companion r0;
        java.lang.String r1, r2;
        androidx.room.compiler.processing.util.Source$KotlinSource $r3;
        androidx.room.compiler.processing.util.Source $r4;

        r0 := @this: androidx.room.compiler.processing.util.Source$Companion;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "filePath");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "code");

        $r3 = new androidx.room.compiler.processing.util.Source$KotlinSource;

        specialinvoke $r3.<androidx.room.compiler.processing.util.Source$KotlinSource: void <init>(java.lang.String,java.lang.String)>(r1, r2);

        $r4 = (androidx.room.compiler.processing.util.Source) $r3;

        return $r4;
    }

    public final androidx.room.compiler.processing.util.Source fromJavaFileObject(javax.tools.JavaFileObject)
    {
        androidx.room.compiler.processing.util.Source$Companion r0;
        javax.tools.JavaFileObject r1;
        java.net.URI r2;
        java.lang.String r3, $r5, $r6, $r7, $r14, $r15, $r16, r21, $r25, r26, r27, $r28;
        java.io.Reader $r4, r20;
        boolean $z0, $z1;
        int $i0;
        androidx.room.compiler.processing.util.Source $r8;
        java.lang.StringBuilder $r9, $r10, $r11, $r12;
        java.lang.IllegalStateException $r13;
        java.lang.Throwable $r17, $r18, r22, r23, r24;
        java.io.Closeable r19;

        r0 := @this: androidx.room.compiler.processing.util.Source$Companion;

        r1 := @parameter0: javax.tools.JavaFileObject;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "javaFileObject");

        r2 = interfaceinvoke r1.<javax.tools.JavaFileObject: java.net.URI toUri()>();

        $r4 = interfaceinvoke r1.<javax.tools.JavaFileObject: java.io.Reader openReader(boolean)>(1);

        r19 = (java.io.Closeable) $r4;

     label1:
        r20 = (java.io.Reader) r19;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r20, "it");

        r21 = staticinvoke <kotlin.io.TextStreamsKt: java.lang.String readText(java.io.Reader)>(r20);

     label2:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r19, null);

        goto label6;

     label3:
        $r18 := @caughtexception;

        r22 = $r18;

        r23 = r22;

        throw r22;

     label4:
        $r17 := @caughtexception;

        r24 = $r17;

     label5:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r19, r23);

        throw r24;

     label6:
        r3 = r21;

        $r5 = virtualinvoke r2.<java.net.URI: java.lang.String getScheme()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r5, "mem");

        if $z0 == 0 goto label7;

        $r15 = virtualinvoke r2.<java.net.URI: java.lang.String getPath()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r15, "uri.path");

        $r16 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>($r15, "SOURCE_OUTPUT/", null, 2, null);

        $r25 = staticinvoke <kotlin.text.StringsKt: java.lang.String replace$default(java.lang.String,char,char,boolean,int,java.lang.Object)>($r16, 47, 46, 0, 4, null);

        goto label8;

     label7:
        $r6 = virtualinvoke r2.<java.net.URI: java.lang.String getPath()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "uri.path");

        $r25 = staticinvoke <kotlin.text.StringsKt: java.lang.String replace$default(java.lang.String,char,char,boolean,int,java.lang.Object)>($r6, 47, 46, 0, 4, null);

     label8:
        r26 = $r25;

        r27 = ".java";

        $z1 = staticinvoke <kotlin.text.StringsKt: boolean endsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>(r26, ".java", 0, 2, null);

        if $z1 != 0 goto label9;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected a java source file, ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not seem like one");

        $r28 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = new java.lang.IllegalStateException;

        $r14 = virtualinvoke $r28.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        throw $r13;

     label9:
        $i0 = virtualinvoke r27.<java.lang.String: int length()>();

        $r7 = staticinvoke <kotlin.text.StringsKt: java.lang.String dropLast(java.lang.String,int)>(r26, $i0);

        $r8 = virtualinvoke r0.<androidx.room.compiler.processing.util.Source$Companion: androidx.room.compiler.processing.util.Source java(java.lang.String,java.lang.String)>($r7, r3);

        return $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public final androidx.room.compiler.processing.util.Source loadKotlinSource(java.io.File, java.lang.String)
    {
        androidx.room.compiler.processing.util.Source$Companion r0;
        java.io.File r1;
        java.lang.String r2, r3, $r4, $r7, $r8;
        boolean $z0, $z1, $z2;
        androidx.room.compiler.processing.util.Source $r5;
        java.lang.IllegalStateException $r6;

        r0 := @this: androidx.room.compiler.processing.util.Source$Companion;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "file");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "relativePath");

        $z0 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $r8 = virtualinvoke r1.<java.io.File: java.lang.String getName()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r8, "file.name");

        $z1 = staticinvoke <kotlin.text.StringsKt: boolean endsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r8, ".kt", 0, 2, null);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        if $z2 != 0 goto label3;

        r3 = "Check failed.";

        $r6 = new java.lang.IllegalStateException;

        $r7 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label3:
        $r4 = staticinvoke <kotlin.io.FilesKt: java.lang.String readText$default(java.io.File,java.nio.charset.Charset,int,java.lang.Object)>(r1, null, 1, null);

        $r5 = virtualinvoke r0.<androidx.room.compiler.processing.util.Source$Companion: androidx.room.compiler.processing.util.Source kotlin(java.lang.String,java.lang.String)>(r2, $r4);

        return $r5;
    }

    public final androidx.room.compiler.processing.util.Source loadJavaSource(java.io.File, java.lang.String)
    {
        androidx.room.compiler.processing.util.Source$Companion r0;
        java.io.File r1;
        java.lang.String r2, r3, $r4, $r7, $r8;
        boolean $z0, $z1, $z2;
        androidx.room.compiler.processing.util.Source $r5;
        java.lang.IllegalStateException $r6;

        r0 := @this: androidx.room.compiler.processing.util.Source$Companion;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "file");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "qName");

        $z0 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $r8 = virtualinvoke r1.<java.io.File: java.lang.String getName()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r8, "file.name");

        $z1 = staticinvoke <kotlin.text.StringsKt: boolean endsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r8, ".java", 0, 2, null);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        if $z2 != 0 goto label3;

        r3 = "Check failed.";

        $r6 = new java.lang.IllegalStateException;

        $r7 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label3:
        $r4 = staticinvoke <kotlin.io.FilesKt: java.lang.String readText$default(java.io.File,java.nio.charset.Charset,int,java.lang.Object)>(r1, null, 1, null);

        $r5 = virtualinvoke r0.<androidx.room.compiler.processing.util.Source$Companion: androidx.room.compiler.processing.util.Source java(java.lang.String,java.lang.String)>(r2, $r4);

        return $r5;
    }

    public final androidx.room.compiler.processing.util.Source load(java.io.File, java.lang.String, java.lang.String)
    {
        androidx.room.compiler.processing.util.Source$Companion r0;
        java.io.File r1;
        java.lang.String r2, r3, $r4, $r5, $r9, $r11, $r12, $r15, $r18, $r19;
        boolean $z0, $z1, $z2;
        java.lang.IllegalStateException $r6, $r17;
        java.lang.StringBuilder $r7, $r8, $r10, $r13, $r14, $r16;
        androidx.room.compiler.processing.util.Source $r20;

        r0 := @this: androidx.room.compiler.processing.util.Source$Companion;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "file");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "qName");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "relativePath");

        $z0 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file does not exist: ");

        $r15 = virtualinvoke r1.<java.io.File: java.lang.String getCanonicalPath()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = new java.lang.IllegalStateException;

        $r18 = virtualinvoke $r19.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r18);

        throw $r17;

     label1:
        $r4 = virtualinvoke r1.<java.io.File: java.lang.String getName()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "file.name");

        $z1 = staticinvoke <kotlin.text.StringsKt: boolean endsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r4, ".kt", 0, 2, null);

        if $z1 == 0 goto label2;

        $r20 = virtualinvoke r0.<androidx.room.compiler.processing.util.Source$Companion: androidx.room.compiler.processing.util.Source loadKotlinSource(java.io.File,java.lang.String)>(r1, r3);

        goto label4;

     label2:
        $r5 = virtualinvoke r1.<java.io.File: java.lang.String getName()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "file.name");

        $z2 = staticinvoke <kotlin.text.StringsKt: boolean endsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r5, ".java", 0, 2, null);

        if $z2 == 0 goto label3;

        $r20 = virtualinvoke r0.<androidx.room.compiler.processing.util.Source$Companion: androidx.room.compiler.processing.util.Source loadJavaSource(java.io.File,java.lang.String)>(r1, r2);

        goto label4;

     label3:
        $r6 = new java.lang.IllegalStateException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid file extension ");

        $r9 = virtualinvoke r1.<java.io.File: java.lang.String getName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = virtualinvoke $r11.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw $r6;

     label4:
        return $r20;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.room.compiler.processing.util.Source$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.room.compiler.processing.util.Source$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.room.compiler.processing.util.Source$Companion: void <init>()>();

        return;
    }

androidx.room.compiler.processing.util.Source$JavaSource
<androidx.room.compiler.processing.util.Source$JavaSource: java.lang.String qName>
<androidx.room.compiler.processing.util.Source$JavaSource: java.lang.String contents>
    public void <init>(java.lang.String, java.lang.String)
    {
        androidx.room.compiler.processing.util.Source$JavaSource r0;
        java.lang.String r1, r2;

        r0 := @this: androidx.room.compiler.processing.util.Source$JavaSource;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "qName");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "contents");

        specialinvoke r0.<androidx.room.compiler.processing.util.Source: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        r0.<androidx.room.compiler.processing.util.Source$JavaSource: java.lang.String qName> = r1;

        r0.<androidx.room.compiler.processing.util.Source$JavaSource: java.lang.String contents> = r2;

        return;
    }

    public final java.lang.String getQName()
    {
        androidx.room.compiler.processing.util.Source$JavaSource r0;
        java.lang.String $r1;

        r0 := @this: androidx.room.compiler.processing.util.Source$JavaSource;

        $r1 = r0.<androidx.room.compiler.processing.util.Source$JavaSource: java.lang.String qName>;

        return $r1;
    }

    public java.lang.String getContents()
    {
        androidx.room.compiler.processing.util.Source$JavaSource r0;
        java.lang.String $r1;

        r0 := @this: androidx.room.compiler.processing.util.Source$JavaSource;

        $r1 = r0.<androidx.room.compiler.processing.util.Source$JavaSource: java.lang.String contents>;

        return $r1;
    }

    public javax.tools.JavaFileObject toJFO()
    {
        androidx.room.compiler.processing.util.Source$JavaSource r0;
        java.lang.String $r1, $r2;
        javax.tools.JavaFileObject $r3;

        r0 := @this: androidx.room.compiler.processing.util.Source$JavaSource;

        $r1 = r0.<androidx.room.compiler.processing.util.Source$JavaSource: java.lang.String qName>;

        $r2 = virtualinvoke r0.<androidx.room.compiler.processing.util.Source$JavaSource: java.lang.String getContents()>();

        $r3 = staticinvoke <com.google.testing.compile.JavaFileObjects: javax.tools.JavaFileObject forSourceString(java.lang.String,java.lang.String)>($r1, $r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "forSourceString(\n       \u2026   contents\n            )");

        return $r3;
    }

    public java.lang.String getRelativePath()
    {
        androidx.room.compiler.processing.util.Source$JavaSource r0;
        java.lang.StringBuilder $r1, $r5, $r6;
        java.lang.String $r2, $r3, $r4, $r7;

        r0 := @this: androidx.room.compiler.processing.util.Source$JavaSource;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = r0.<androidx.room.compiler.processing.util.Source$JavaSource: java.lang.String qName>;

        $r2 = <java.io.File: java.lang.String separator>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "separator");

        $r4 = staticinvoke <kotlin.text.StringsKt: java.lang.String replace$default(java.lang.String,java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r3, ".", $r2, 0, 4, null);

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".java");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

androidx.room.compiler.processing.util.Source$KotlinSource
<androidx.room.compiler.processing.util.Source$KotlinSource: java.lang.String relativePath>
<androidx.room.compiler.processing.util.Source$KotlinSource: java.lang.String contents>
    public void <init>(java.lang.String, java.lang.String)
    {
        androidx.room.compiler.processing.util.Source$KotlinSource r0;
        java.lang.String r1, r2;

        r0 := @this: androidx.room.compiler.processing.util.Source$KotlinSource;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "relativePath");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "contents");

        specialinvoke r0.<androidx.room.compiler.processing.util.Source: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        r0.<androidx.room.compiler.processing.util.Source$KotlinSource: java.lang.String relativePath> = r1;

        r0.<androidx.room.compiler.processing.util.Source$KotlinSource: java.lang.String contents> = r2;

        return;
    }

    public java.lang.String getRelativePath()
    {
        androidx.room.compiler.processing.util.Source$KotlinSource r0;
        java.lang.String $r1;

        r0 := @this: androidx.room.compiler.processing.util.Source$KotlinSource;

        $r1 = r0.<androidx.room.compiler.processing.util.Source$KotlinSource: java.lang.String relativePath>;

        return $r1;
    }

    public java.lang.String getContents()
    {
        androidx.room.compiler.processing.util.Source$KotlinSource r0;
        java.lang.String $r1;

        r0 := @this: androidx.room.compiler.processing.util.Source$KotlinSource;

        $r1 = r0.<androidx.room.compiler.processing.util.Source$KotlinSource: java.lang.String contents>;

        return $r1;
    }

    public javax.tools.JavaFileObject toJFO()
    {
        androidx.room.compiler.processing.util.Source$KotlinSource r0;
        java.lang.IllegalStateException $r1;

        r0 := @this: androidx.room.compiler.processing.util.Source$KotlinSource;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("cannot include kotlin code in javac compilation");

        throw $r1;
    }

