androidx.compose.ui.node.LookaheadCapablePlaceable
<androidx.compose.ui.node.LookaheadCapablePlaceable: boolean isShallowPlacing>
<androidx.compose.ui.node.LookaheadCapablePlaceable: boolean isPlacingForAlignment>
    public void <init>()
    {
        androidx.compose.ui.node.LookaheadCapablePlaceable r0;

        r0 := @this: androidx.compose.ui.node.LookaheadCapablePlaceable;

        specialinvoke r0.<androidx.compose.ui.layout.Placeable: void <init>()>();

        return;
    }

<androidx.compose.ui.node.LookaheadCapablePlaceable: long getPosition-nOcc-ac()>
<androidx.compose.ui.node.LookaheadCapablePlaceable: androidx.compose.ui.node.LookaheadCapablePlaceable getChild()>
<androidx.compose.ui.node.LookaheadCapablePlaceable: androidx.compose.ui.node.LookaheadCapablePlaceable getParent()>
<androidx.compose.ui.node.LookaheadCapablePlaceable: boolean getHasMeasureResult()>
<androidx.compose.ui.node.LookaheadCapablePlaceable: androidx.compose.ui.node.LayoutNode getLayoutNode()>
<androidx.compose.ui.node.LookaheadCapablePlaceable: androidx.compose.ui.layout.LayoutCoordinates getCoordinates()>
    public final int get(androidx.compose.ui.layout.AlignmentLine)
    {
        androidx.compose.ui.node.LookaheadCapablePlaceable r0;
        androidx.compose.ui.layout.AlignmentLine r1;
        int i0, $i2, $i5;
        boolean $z0, $z1;
        long $l1, $l3;

        r0 := @this: androidx.compose.ui.node.LookaheadCapablePlaceable;

        r1 := @parameter0: androidx.compose.ui.layout.AlignmentLine;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "alignmentLine");

        $z0 = virtualinvoke r0.<androidx.compose.ui.node.LookaheadCapablePlaceable: boolean getHasMeasureResult()>();

        if $z0 != 0 goto label1;

        return -2147483648;

     label1:
        i0 = virtualinvoke r0.<androidx.compose.ui.node.LookaheadCapablePlaceable: int calculateAlignmentLine(androidx.compose.ui.layout.AlignmentLine)>(r1);

        if i0 != -2147483648 goto label2;

        return -2147483648;

     label2:
        $z1 = r1 instanceof androidx.compose.ui.layout.VerticalAlignmentLine;

        if $z1 == 0 goto label3;

        $l3 = virtualinvoke r0.<androidx.compose.ui.node.LookaheadCapablePlaceable: long getApparentToRealOffset-nOcc-ac()>();

        $i5 = staticinvoke <androidx.compose.ui.unit.IntOffset: int getX-impl(long)>($l3);

        goto label4;

     label3:
        $l1 = virtualinvoke r0.<androidx.compose.ui.node.LookaheadCapablePlaceable: long getApparentToRealOffset-nOcc-ac()>();

        $i5 = staticinvoke <androidx.compose.ui.unit.IntOffset: int getY-impl(long)>($l1);

     label4:
        $i2 = i0 + $i5;

        return $i2;
    }

<androidx.compose.ui.node.LookaheadCapablePlaceable: int calculateAlignmentLine(androidx.compose.ui.layout.AlignmentLine)>
    public final boolean isShallowPlacing$ui_release()
    {
        androidx.compose.ui.node.LookaheadCapablePlaceable r0;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.LookaheadCapablePlaceable;

        $z0 = r0.<androidx.compose.ui.node.LookaheadCapablePlaceable: boolean isShallowPlacing>;

        return $z0;
    }

    public final void setShallowPlacing$ui_release(boolean)
    {
        androidx.compose.ui.node.LookaheadCapablePlaceable r0;
        boolean z0;

        r0 := @this: androidx.compose.ui.node.LookaheadCapablePlaceable;

        z0 := @parameter0: boolean;

        r0.<androidx.compose.ui.node.LookaheadCapablePlaceable: boolean isShallowPlacing> = z0;

        return;
    }

<androidx.compose.ui.node.LookaheadCapablePlaceable: androidx.compose.ui.layout.MeasureResult getMeasureResult$ui_release()>
<androidx.compose.ui.node.LookaheadCapablePlaceable: void replace$ui_release()>
<androidx.compose.ui.node.LookaheadCapablePlaceable: androidx.compose.ui.node.AlignmentLinesOwner getAlignmentLinesOwner()>
    public final boolean isPlacingForAlignment$ui_release()
    {
        androidx.compose.ui.node.LookaheadCapablePlaceable r0;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.LookaheadCapablePlaceable;

        $z0 = r0.<androidx.compose.ui.node.LookaheadCapablePlaceable: boolean isPlacingForAlignment>;

        return $z0;
    }

    public final void setPlacingForAlignment$ui_release(boolean)
    {
        androidx.compose.ui.node.LookaheadCapablePlaceable r0;
        boolean z0;

        r0 := @this: androidx.compose.ui.node.LookaheadCapablePlaceable;

        z0 := @parameter0: boolean;

        r0.<androidx.compose.ui.node.LookaheadCapablePlaceable: boolean isPlacingForAlignment> = z0;

        return;
    }

    protected final void invalidateAlignmentLinesFromPositionChange(androidx.compose.ui.node.NodeCoordinator)
    {
        androidx.compose.ui.node.LookaheadCapablePlaceable r0;
        androidx.compose.ui.node.NodeCoordinator $r1, $r2;
        androidx.compose.ui.node.LayoutNode $r3, $r9;
        boolean $z0;
        androidx.compose.ui.node.AlignmentLinesOwner $r4, $r5, $r7;
        androidx.compose.ui.node.AlignmentLines $r6, $r8;

        r0 := @this: androidx.compose.ui.node.LookaheadCapablePlaceable;

        $r1 := @parameter0: androidx.compose.ui.node.NodeCoordinator;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator getWrapped$ui_release()>();

        if $r2 == null goto label1;

        $r9 = virtualinvoke $r2.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        goto label2;

     label1:
        $r9 = null;

     label2:
        $r3 = virtualinvoke $r1.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r9, $r3);

        if $z0 != 0 goto label3;

        $r7 = virtualinvoke $r1.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.AlignmentLinesOwner getAlignmentLinesOwner()>();

        $r8 = interfaceinvoke $r7.<androidx.compose.ui.node.AlignmentLinesOwner: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        virtualinvoke $r8.<androidx.compose.ui.node.AlignmentLines: void onAlignmentsChanged()>();

        goto label4;

     label3:
        $r4 = virtualinvoke $r1.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.AlignmentLinesOwner getAlignmentLinesOwner()>();

        $r5 = interfaceinvoke $r4.<androidx.compose.ui.node.AlignmentLinesOwner: androidx.compose.ui.node.AlignmentLinesOwner getParentAlignmentLinesOwner()>();

        if $r5 == null goto label4;

        $r6 = interfaceinvoke $r5.<androidx.compose.ui.node.AlignmentLinesOwner: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        if $r6 == null goto label4;

        virtualinvoke $r6.<androidx.compose.ui.node.AlignmentLines: void onAlignmentsChanged()>();

        goto label4;

     label4:
        return;
    }

