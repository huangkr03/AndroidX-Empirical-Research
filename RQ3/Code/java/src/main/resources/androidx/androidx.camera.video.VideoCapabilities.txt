androidx.camera.video.VideoCapabilities
<androidx.camera.video.VideoCapabilities: java.lang.String TAG>
<androidx.camera.video.VideoCapabilities: java.util.Map mSupportedProfileMap>
<androidx.camera.video.VideoCapabilities: java.util.TreeMap mAreaSortedSizeToQualityMap>
<androidx.camera.video.VideoCapabilities: androidx.camera.core.impl.CamcorderProfileProxy mHighestProfile>
<androidx.camera.video.VideoCapabilities: androidx.camera.core.impl.CamcorderProfileProxy mLowestProfile>
    void <init>(androidx.camera.core.impl.CameraInfoInternal)
    {
        androidx.camera.video.VideoCapabilities r0;
        androidx.camera.core.impl.CameraInfoInternal r1;
        androidx.camera.core.impl.CamcorderProfileProvider r2;
        androidx.camera.video.Quality r3;
        int i0, $i1, $i2;
        androidx.camera.core.impl.CamcorderProfileProxy r4, $r15, $r17, $r20;
        android.util.Size r5, $r22;
        java.util.LinkedHashMap $r6;
        java.util.TreeMap $r7, $r29;
        androidx.camera.core.impl.utils.CompareSizesByArea $r8;
        java.util.List $r9;
        java.util.Map $r10, $r12, $r27;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.ArrayDeque $r11, r32;
        java.util.Collection $r13;
        java.lang.Object $r14, $r16, $r18, $r21;
        androidx.camera.video.Quality$ConstantQuality $r19;
        java.lang.StringBuilder $r23, $r24, $r25;
        java.lang.String $r26;
        java.util.Iterator r31;

        r0 := @this: androidx.camera.video.VideoCapabilities;

        r1 := @parameter0: androidx.camera.core.impl.CameraInfoInternal;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r6 = new java.util.LinkedHashMap;

        specialinvoke $r6.<java.util.LinkedHashMap: void <init>()>();

        r0.<androidx.camera.video.VideoCapabilities: java.util.Map mSupportedProfileMap> = $r6;

        $r7 = new java.util.TreeMap;

        $r8 = new androidx.camera.core.impl.utils.CompareSizesByArea;

        specialinvoke $r8.<androidx.camera.core.impl.utils.CompareSizesByArea: void <init>()>();

        specialinvoke $r7.<java.util.TreeMap: void <init>(java.util.Comparator)>($r8);

        r0.<androidx.camera.video.VideoCapabilities: java.util.TreeMap mAreaSortedSizeToQualityMap> = $r7;

        r2 = interfaceinvoke r1.<androidx.camera.core.impl.CameraInfoInternal: androidx.camera.core.impl.CamcorderProfileProvider getCamcorderProfileProvider()>();

        $r9 = staticinvoke <androidx.camera.video.Quality: java.util.List getSortedQualities()>();

        r31 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z4 = interfaceinvoke r31.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label3;

        $r18 = interfaceinvoke r31.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.camera.video.Quality) $r18;

        $z1 = r3 instanceof androidx.camera.video.Quality$ConstantQuality;

        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z1, "Currently only support ConstantQuality");

        $r19 = (androidx.camera.video.Quality$ConstantQuality) r3;

        i0 = virtualinvoke $r19.<androidx.camera.video.Quality$ConstantQuality: int getValue()>();

        $z2 = interfaceinvoke r2.<androidx.camera.core.impl.CamcorderProfileProvider: boolean hasProfile(int)>(i0);

        if $z2 == 0 goto label1;

        $z3 = specialinvoke r0.<androidx.camera.video.VideoCapabilities: boolean isDeviceValidQuality(androidx.camera.video.Quality)>(r3);

        if $z3 != 0 goto label2;

        goto label1;

     label2:
        $r20 = interfaceinvoke r2.<androidx.camera.core.impl.CamcorderProfileProvider: androidx.camera.core.impl.CamcorderProfileProxy get(int)>(i0);

        $r21 = staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r20);

        r4 = (androidx.camera.core.impl.CamcorderProfileProxy) $r21;

        $r22 = new android.util.Size;

        $i1 = virtualinvoke r4.<androidx.camera.core.impl.CamcorderProfileProxy: int getVideoFrameWidth()>();

        $i2 = virtualinvoke r4.<androidx.camera.core.impl.CamcorderProfileProxy: int getVideoFrameHeight()>();

        specialinvoke $r22.<android.util.Size: void <init>(int,int)>($i1, $i2);

        r5 = $r22;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("profile = ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("VideoCapabilities", $r26);

        $r27 = r0.<androidx.camera.video.VideoCapabilities: java.util.Map mSupportedProfileMap>;

        interfaceinvoke $r27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r4);

        $r29 = r0.<androidx.camera.video.VideoCapabilities: java.util.TreeMap mAreaSortedSizeToQualityMap>;

        virtualinvoke $r29.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r3);

        goto label1;

     label3:
        $r10 = r0.<androidx.camera.video.VideoCapabilities: java.util.Map mSupportedProfileMap>;

        $z0 = interfaceinvoke $r10.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label4;

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String)>("VideoCapabilities", "No supported CamcorderProfile");

        r0.<androidx.camera.video.VideoCapabilities: androidx.camera.core.impl.CamcorderProfileProxy mLowestProfile> = null;

        r0.<androidx.camera.video.VideoCapabilities: androidx.camera.core.impl.CamcorderProfileProxy mHighestProfile> = null;

        goto label5;

     label4:
        $r11 = new java.util.ArrayDeque;

        $r12 = r0.<androidx.camera.video.VideoCapabilities: java.util.Map mSupportedProfileMap>;

        $r13 = interfaceinvoke $r12.<java.util.Map: java.util.Collection values()>();

        specialinvoke $r11.<java.util.ArrayDeque: void <init>(java.util.Collection)>($r13);

        r32 = $r11;

        $r14 = interfaceinvoke r32.<java.util.Deque: java.lang.Object peekFirst()>();

        $r15 = (androidx.camera.core.impl.CamcorderProfileProxy) $r14;

        r0.<androidx.camera.video.VideoCapabilities: androidx.camera.core.impl.CamcorderProfileProxy mHighestProfile> = $r15;

        $r16 = interfaceinvoke r32.<java.util.Deque: java.lang.Object peekLast()>();

        $r17 = (androidx.camera.core.impl.CamcorderProfileProxy) $r16;

        r0.<androidx.camera.video.VideoCapabilities: androidx.camera.core.impl.CamcorderProfileProxy mLowestProfile> = $r17;

     label5:
        return;
    }

    public static androidx.camera.video.VideoCapabilities 'from'(androidx.camera.core.CameraInfo)
    {
        androidx.camera.core.CameraInfo r0;
        androidx.camera.video.VideoCapabilities $r1;
        androidx.camera.core.impl.CameraInfoInternal $r2;

        r0 := @parameter0: androidx.camera.core.CameraInfo;

        $r1 = new androidx.camera.video.VideoCapabilities;

        $r2 = (androidx.camera.core.impl.CameraInfoInternal) r0;

        specialinvoke $r1.<androidx.camera.video.VideoCapabilities: void <init>(androidx.camera.core.impl.CameraInfoInternal)>($r2);

        return $r1;
    }

    public java.util.List getSupportedQualities()
    {
        androidx.camera.video.VideoCapabilities r0;
        java.util.ArrayList $r1;
        java.util.Map $r2;
        java.util.Set $r3;

        r0 := @this: androidx.camera.video.VideoCapabilities;

        $r1 = new java.util.ArrayList;

        $r2 = r0.<androidx.camera.video.VideoCapabilities: java.util.Map mSupportedProfileMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        return $r1;
    }

    public boolean isQualitySupported(androidx.camera.video.Quality)
    {
        androidx.camera.video.VideoCapabilities r0;
        androidx.camera.video.Quality r1;
        androidx.camera.core.impl.CamcorderProfileProxy $r2;
        boolean $z0;

        r0 := @this: androidx.camera.video.VideoCapabilities;

        r1 := @parameter0: androidx.camera.video.Quality;

        staticinvoke <androidx.camera.video.VideoCapabilities: void checkQualityConstantsOrThrow(androidx.camera.video.Quality)>(r1);

        $r2 = virtualinvoke r0.<androidx.camera.video.VideoCapabilities: androidx.camera.core.impl.CamcorderProfileProxy getProfile(androidx.camera.video.Quality)>(r1);

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public androidx.camera.core.impl.CamcorderProfileProxy getProfile(androidx.camera.video.Quality)
    {
        androidx.camera.video.VideoCapabilities r0;
        androidx.camera.video.Quality r1, $r2, $r3;
        java.util.Map $r4;
        java.lang.Object $r5;
        androidx.camera.core.impl.CamcorderProfileProxy $r6, $r7, $r8;

        r0 := @this: androidx.camera.video.VideoCapabilities;

        r1 := @parameter0: androidx.camera.video.Quality;

        staticinvoke <androidx.camera.video.VideoCapabilities: void checkQualityConstantsOrThrow(androidx.camera.video.Quality)>(r1);

        $r2 = <androidx.camera.video.Quality: androidx.camera.video.Quality HIGHEST>;

        if r1 != $r2 goto label1;

        $r8 = r0.<androidx.camera.video.VideoCapabilities: androidx.camera.core.impl.CamcorderProfileProxy mHighestProfile>;

        return $r8;

     label1:
        $r3 = <androidx.camera.video.Quality: androidx.camera.video.Quality LOWEST>;

        if r1 != $r3 goto label2;

        $r7 = r0.<androidx.camera.video.VideoCapabilities: androidx.camera.core.impl.CamcorderProfileProxy mLowestProfile>;

        return $r7;

     label2:
        $r4 = r0.<androidx.camera.video.VideoCapabilities: java.util.Map mSupportedProfileMap>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r6 = (androidx.camera.core.impl.CamcorderProfileProxy) $r5;

        return $r6;
    }

    public androidx.camera.core.impl.CamcorderProfileProxy findHighestSupportedCamcorderProfileFor(android.util.Size)
    {
        androidx.camera.video.VideoCapabilities r0;
        android.util.Size r1;
        androidx.camera.video.Quality r2, $r9;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7;
        java.lang.String $r8;
        java.lang.AssertionError $r10;
        androidx.camera.core.impl.CamcorderProfileProxy r11;

        r0 := @this: androidx.camera.video.VideoCapabilities;

        r1 := @parameter0: android.util.Size;

        r11 = null;

        r2 = virtualinvoke r0.<androidx.camera.video.VideoCapabilities: androidx.camera.video.Quality findHighestSupportedQualityFor(android.util.Size)>(r1);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using supported quality of ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for size ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("VideoCapabilities", $r8);

        $r9 = <androidx.camera.video.Quality: androidx.camera.video.Quality NONE>;

        if r2 == $r9 goto label1;

        r11 = virtualinvoke r0.<androidx.camera.video.VideoCapabilities: androidx.camera.core.impl.CamcorderProfileProxy getProfile(androidx.camera.video.Quality)>(r2);

        if r11 != null goto label1;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>("Camera advertised available quality but did not produce CamcorderProfile for advertised quality.");

        throw $r10;

     label1:
        return r11;
    }

    public androidx.camera.video.Quality findHighestSupportedQualityFor(android.util.Size)
    {
        androidx.camera.video.VideoCapabilities r0;
        android.util.Size r1;
        java.util.Map$Entry r2, r3;
        java.util.TreeMap $r4, $r5;
        androidx.camera.video.Quality $r6, $r8, $r10;
        java.lang.Object $r7, $r9;

        r0 := @this: androidx.camera.video.VideoCapabilities;

        r1 := @parameter0: android.util.Size;

        $r4 = r0.<androidx.camera.video.VideoCapabilities: java.util.TreeMap mAreaSortedSizeToQualityMap>;

        r2 = virtualinvoke $r4.<java.util.TreeMap: java.util.Map$Entry ceilingEntry(java.lang.Object)>(r1);

        if r2 == null goto label1;

        $r9 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (androidx.camera.video.Quality) $r9;

        return $r10;

     label1:
        $r5 = r0.<androidx.camera.video.VideoCapabilities: java.util.TreeMap mAreaSortedSizeToQualityMap>;

        r3 = virtualinvoke $r5.<java.util.TreeMap: java.util.Map$Entry floorEntry(java.lang.Object)>(r1);

        if r3 == null goto label2;

        $r7 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = (androidx.camera.video.Quality) $r7;

        return $r8;

     label2:
        $r6 = <androidx.camera.video.Quality: androidx.camera.video.Quality NONE>;

        return $r6;
    }

    private static void checkQualityConstantsOrThrow(androidx.camera.video.Quality)
    {
        androidx.camera.video.Quality r0;
        boolean $z0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;

        r0 := @parameter0: androidx.camera.video.Quality;

        $z0 = staticinvoke <androidx.camera.video.Quality: boolean containsQuality(androidx.camera.video.Quality)>(r0);

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown quality: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.core.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, $r4);

        return;
    }

    private boolean isDeviceValidQuality(androidx.camera.video.Quality)
    {
        androidx.camera.video.VideoCapabilities r0;
        androidx.camera.video.Quality r1;
        java.util.List r2;
        java.util.Iterator r3;
        java.lang.Class r4;
        androidx.camera.video.internal.compat.quirk.VideoQualityQuirk r5;
        java.lang.Class[] $r6;
        boolean $z0, $z1;
        java.lang.Object $r7;
        androidx.camera.core.impl.Quirk $r8;

        r0 := @this: androidx.camera.video.VideoCapabilities;

        r1 := @parameter0: androidx.camera.video.Quality;

        $r6 = newarray (java.lang.Class)[3];

        $r6[0] = class "Landroidx/camera/video/internal/compat/quirk/ExcludeStretchedVideoQualityQuirk;";

        $r6[1] = class "Landroidx/camera/video/internal/compat/quirk/ReportedVideoQualityNotSupportedQuirk;";

        $r6[2] = class "Landroidx/camera/video/internal/compat/quirk/VideoEncoderCrashQuirk;";

        r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Class) $r7;

        $r8 = staticinvoke <androidx.camera.video.internal.compat.quirk.DeviceQuirks: androidx.camera.core.impl.Quirk get(java.lang.Class)>(r4);

        r5 = (androidx.camera.video.internal.compat.quirk.VideoQualityQuirk) $r8;

        if r5 == null goto label2;

        $z1 = interfaceinvoke r5.<androidx.camera.video.internal.compat.quirk.VideoQualityQuirk: boolean isProblematicVideoQuality(androidx.camera.video.Quality)>(r1);

        if $z1 == 0 goto label2;

        return 0;

     label2:
        goto label1;

     label3:
        return 1;
    }

