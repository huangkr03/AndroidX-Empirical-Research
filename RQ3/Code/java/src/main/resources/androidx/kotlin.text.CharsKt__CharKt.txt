kotlin.text.CharsKt__CharKt
    public void <init>()
    {
        kotlin.text.CharsKt__CharKt $r0;

        $r0 := @this: kotlin.text.CharsKt__CharKt;

        specialinvoke $r0.<kotlin.text.CharsKt__CharJVMKt: void <init>()>();

        return;
    }

    public static final char digitToChar(int)
    {
        int $i0;
        kotlin.ranges.IntRange $r0;
        boolean $z0;
        char $c1;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $i0 := @parameter0: int;

        $r0 = new kotlin.ranges.IntRange;

        specialinvoke $r0.<kotlin.ranges.IntRange: void <init>(int,int)>(0, 9);

        $z0 = virtualinvoke $r0.<kotlin.ranges.IntRange: boolean contains(int)>($i0);

        if $z0 == 0 goto label1;

        $i0 = $i0 + 48;

        $c1 = (char) $i0;

        return $c1;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Int ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a decimal digit");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;
    }

    public static final char digitToChar(int, int)
    {
        int $i0, $i1;
        kotlin.ranges.IntRange $r0;
        boolean $z0;
        char $c2;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 = new kotlin.ranges.IntRange;

        specialinvoke $r0.<kotlin.ranges.IntRange: void <init>(int,int)>(2, 36);

        $z0 = virtualinvoke $r0.<kotlin.ranges.IntRange: boolean contains(int)>($i1);

        if $z0 == 0 goto label3;

        if $i0 < 0 goto label2;

        if $i0 >= $i1 goto label2;

        if $i0 >= 10 goto label1;

        $i0 = $i0 + 48;

        $c2 = (char) $i0;

        return $c2;

     label1:
        $i0 = $i0 + 65;

        $c2 = (char) $i0;

        $i0 = $c2 + -10;

        $c2 = (char) $i0;

        return $c2;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Digit ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not represent a valid digit in radix ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label3:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid radix: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Valid radix values are in range 2..36");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;
    }

    public static final int digitToInt(char)
    {
        char $c0;
        int $i1;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $c0 := @parameter0: char;

        $i1 = staticinvoke <kotlin.text.CharsKt: int digitOf(char,int)>($c0, 10);

        if $i1 < 0 goto label1;

        return $i1;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Char ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a decimal digit");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r0;
    }

    public static final int digitToInt(char, int)
    {
        int $i0;
        char $c1;
        java.lang.Integer $r0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $c1 := @parameter0: char;

        $i0 := @parameter1: int;

        $r0 = staticinvoke <kotlin.text.CharsKt: java.lang.Integer digitToIntOrNull(char,int)>($c1, $i0);

        if $r0 == null goto label1;

        $i0 = virtualinvoke $r0.<java.lang.Integer: int intValue()>();

        return $i0;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Char ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a digit in the given radix=");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;
    }

    public static final java.lang.Integer digitToIntOrNull(char)
    {
        char $c0;
        int $i1;
        java.lang.Integer $r0;
        boolean $z0;

        $c0 := @parameter0: char;

        $i1 = staticinvoke <kotlin.text.CharsKt: int digitOf(char,int)>($c0, 10);

        $r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $i1 = virtualinvoke $r0.<java.lang.Number: int intValue()>();

        if $i1 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        return $r0;

     label3:
        return null;
    }

    public static final java.lang.Integer digitToIntOrNull(char, int)
    {
        char $c0;
        int $i1;
        java.lang.Integer $r0;
        boolean $z0;

        $c0 := @parameter0: char;

        $i1 := @parameter1: int;

        staticinvoke <kotlin.text.CharsKt: int checkRadix(int)>($i1);

        $i1 = staticinvoke <kotlin.text.CharsKt: int digitOf(char,int)>($c0, $i1);

        $r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $i1 = virtualinvoke $r0.<java.lang.Number: int intValue()>();

        if $i1 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        return $r0;

     label3:
        return null;
    }

    public static final boolean equals(char, char, boolean)
    {
        boolean $z0;
        char $c0, $c1;

        $c0 := @parameter0: char;

        $c1 := @parameter1: char;

        $z0 := @parameter2: boolean;

        if $c0 != $c1 goto label1;

        return 1;

     label1:
        if $z0 != 0 goto label2;

        return 0;

     label2:
        $c0 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c0);

        $c1 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c1);

        if $c0 == $c1 goto label4;

        $c0 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c0);

        $c1 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c1);

        if $c0 != $c1 goto label3;

        return 1;

     label3:
        return 0;

     label4:
        return 1;
    }

    public static boolean equals$default(char, char, boolean, int, java.lang.Object)
    {
        char $c0, $c1;
        java.lang.Object $r0;
        boolean $z0;
        int $i2;

        $c1 := @parameter0: char;

        $c0 := @parameter1: char;

        $z0 := @parameter2: boolean;

        $i2 := @parameter3: int;

        $r0 := @parameter4: java.lang.Object;

        $i2 = $i2 & 2;

        if $i2 == 0 goto label1;

        $z0 = 0;

     label1:
        $z0 = staticinvoke <kotlin.text.CharsKt: boolean equals(char,char,boolean)>($c1, $c0, $z0);

        return $z0;
    }

    public static final boolean isSurrogate(char)
    {
        kotlin.ranges.CharRange $r0;
        boolean $z0;
        char $c0;

        $c0 := @parameter0: char;

        $r0 = new kotlin.ranges.CharRange;

        specialinvoke $r0.<kotlin.ranges.CharRange: void <init>(char,char)>(55296, 57343);

        $z0 = virtualinvoke $r0.<kotlin.ranges.CharRange: boolean contains(char)>($c0);

        return $z0;
    }

    private static final java.lang.String plus(char, java.lang.String)
    {
        java.lang.String $r0;
        char $c0;
        java.lang.StringBuilder $r1;

        $c0 := @parameter0: char;

        $r0 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "other");

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;
    }

    public static final java.lang.String titlecase(char)
    {
        java.lang.String $r0;
        char $c0;

        $c0 := @parameter0: char;

        $r0 = staticinvoke <kotlin.text._OneToManyTitlecaseMappingsKt: java.lang.String titlecaseImpl(char)>($c0);

        return $r0;
    }

