androidx.compose.animation.core.FloatAnimationSpec
<androidx.compose.animation.core.FloatAnimationSpec: float getValueFromNanos(long,float,float,float)>
<androidx.compose.animation.core.FloatAnimationSpec: float getVelocityFromNanos(long,float,float,float)>
    public float getEndVelocity(float, float, float)
    {
        androidx.compose.animation.core.FloatAnimationSpec r0;
        float f0, f1, f2, $f3;
        long $l0;

        r0 := @this: androidx.compose.animation.core.FloatAnimationSpec;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        $l0 = interfaceinvoke r0.<androidx.compose.animation.core.FloatAnimationSpec: long getDurationNanos(float,float,float)>(f0, f1, f2);

        $f3 = interfaceinvoke r0.<androidx.compose.animation.core.FloatAnimationSpec: float getVelocityFromNanos(long,float,float,float)>($l0, f0, f1, f2);

        return $f3;
    }

<androidx.compose.animation.core.FloatAnimationSpec: long getDurationNanos(float,float,float)>
    public androidx.compose.animation.core.VectorizedFloatAnimationSpec vectorize(androidx.compose.animation.core.TwoWayConverter)
    {
        androidx.compose.animation.core.FloatAnimationSpec r0;
        androidx.compose.animation.core.TwoWayConverter r1;
        androidx.compose.animation.core.VectorizedFloatAnimationSpec $r2;

        r0 := @this: androidx.compose.animation.core.FloatAnimationSpec;

        r1 := @parameter0: androidx.compose.animation.core.TwoWayConverter;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "converter");

        $r2 = new androidx.compose.animation.core.VectorizedFloatAnimationSpec;

        specialinvoke $r2.<androidx.compose.animation.core.VectorizedFloatAnimationSpec: void <init>(androidx.compose.animation.core.FloatAnimationSpec)>(r0);

        return $r2;
    }

    public volatile androidx.compose.animation.core.VectorizedAnimationSpec vectorize(androidx.compose.animation.core.TwoWayConverter)
    {
        androidx.compose.animation.core.FloatAnimationSpec r0;
        androidx.compose.animation.core.TwoWayConverter r1;
        androidx.compose.animation.core.VectorizedFloatAnimationSpec $r2;
        androidx.compose.animation.core.VectorizedAnimationSpec $r3;

        r0 := @this: androidx.compose.animation.core.FloatAnimationSpec;

        r1 := @parameter0: androidx.compose.animation.core.TwoWayConverter;

        $r2 = interfaceinvoke r0.<androidx.compose.animation.core.FloatAnimationSpec: androidx.compose.animation.core.VectorizedFloatAnimationSpec vectorize(androidx.compose.animation.core.TwoWayConverter)>(r1);

        $r3 = (androidx.compose.animation.core.VectorizedAnimationSpec) $r2;

        return $r3;
    }

    public static float access$getEndVelocity$jd(androidx.compose.animation.core.FloatAnimationSpec, float, float, float)
    {
        androidx.compose.animation.core.FloatAnimationSpec $r0;
        float f0, f1, f2, $f3;

        $r0 := @parameter0: androidx.compose.animation.core.FloatAnimationSpec;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        f2 := @parameter3: float;

        $f3 = specialinvoke $r0.<androidx.compose.animation.core.FloatAnimationSpec: float getEndVelocity(float,float,float)>(f0, f1, f2);

        return $f3;
    }

    public static androidx.compose.animation.core.VectorizedFloatAnimationSpec access$vectorize$jd(androidx.compose.animation.core.FloatAnimationSpec, androidx.compose.animation.core.TwoWayConverter)
    {
        androidx.compose.animation.core.FloatAnimationSpec $r0;
        androidx.compose.animation.core.TwoWayConverter r1;
        androidx.compose.animation.core.VectorizedFloatAnimationSpec $r2;

        $r0 := @parameter0: androidx.compose.animation.core.FloatAnimationSpec;

        r1 := @parameter1: androidx.compose.animation.core.TwoWayConverter;

        $r2 = specialinvoke $r0.<androidx.compose.animation.core.FloatAnimationSpec: androidx.compose.animation.core.VectorizedFloatAnimationSpec vectorize(androidx.compose.animation.core.TwoWayConverter)>(r1);

        return $r2;
    }

androidx.compose.animation.core.FloatAnimationSpec$DefaultImpls
    public static float getEndVelocity(androidx.compose.animation.core.FloatAnimationSpec, float, float, float)
    {
        androidx.compose.animation.core.FloatAnimationSpec $r0;
        float f0, f1, f2, $f3;

        $r0 := @parameter0: androidx.compose.animation.core.FloatAnimationSpec;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        f2 := @parameter3: float;

        $f3 = staticinvoke <androidx.compose.animation.core.FloatAnimationSpec: float access$getEndVelocity$jd(androidx.compose.animation.core.FloatAnimationSpec,float,float,float)>($r0, f0, f1, f2);

        return $f3;
    }

    public static androidx.compose.animation.core.VectorizedFloatAnimationSpec vectorize(androidx.compose.animation.core.FloatAnimationSpec, androidx.compose.animation.core.TwoWayConverter)
    {
        androidx.compose.animation.core.FloatAnimationSpec $r0;
        androidx.compose.animation.core.TwoWayConverter r1;
        androidx.compose.animation.core.VectorizedFloatAnimationSpec $r2;

        $r0 := @parameter0: androidx.compose.animation.core.FloatAnimationSpec;

        r1 := @parameter1: androidx.compose.animation.core.TwoWayConverter;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "converter");

        $r2 = staticinvoke <androidx.compose.animation.core.FloatAnimationSpec: androidx.compose.animation.core.VectorizedFloatAnimationSpec access$vectorize$jd(androidx.compose.animation.core.FloatAnimationSpec,androidx.compose.animation.core.TwoWayConverter)>($r0, r1);

        return $r2;
    }

