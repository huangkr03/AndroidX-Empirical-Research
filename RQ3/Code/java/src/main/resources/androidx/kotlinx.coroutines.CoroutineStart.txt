kotlinx.coroutines.CoroutineStart
<kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart[] $VALUES>
<kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart ATOMIC>
<kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart DEFAULT>
<kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart LAZY>
<kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart UNDISPATCHED>
    private static final kotlinx.coroutines.CoroutineStart[] $values()
    {
        kotlinx.coroutines.CoroutineStart[] $r0;
        kotlinx.coroutines.CoroutineStart $r1;

        $r0 = newarray (kotlinx.coroutines.CoroutineStart)[4];

        $r1 = <kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart DEFAULT>;

        $r0[0] = $r1;

        $r1 = <kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart LAZY>;

        $r0[1] = $r1;

        $r1 = <kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart ATOMIC>;

        $r0[2] = $r1;

        $r1 = <kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart UNDISPATCHED>;

        $r0[3] = $r1;

        return $r0;
    }

    static void <clinit>()
    {
        kotlinx.coroutines.CoroutineStart[] $r0;
        kotlinx.coroutines.CoroutineStart $r1;

        $r1 = new kotlinx.coroutines.CoroutineStart;

        specialinvoke $r1.<kotlinx.coroutines.CoroutineStart: void <init>(java.lang.String,int)>("DEFAULT", 0);

        <kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart DEFAULT> = $r1;

        $r1 = new kotlinx.coroutines.CoroutineStart;

        specialinvoke $r1.<kotlinx.coroutines.CoroutineStart: void <init>(java.lang.String,int)>("LAZY", 1);

        <kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart LAZY> = $r1;

        $r1 = new kotlinx.coroutines.CoroutineStart;

        specialinvoke $r1.<kotlinx.coroutines.CoroutineStart: void <init>(java.lang.String,int)>("ATOMIC", 2);

        <kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart ATOMIC> = $r1;

        $r1 = new kotlinx.coroutines.CoroutineStart;

        specialinvoke $r1.<kotlinx.coroutines.CoroutineStart: void <init>(java.lang.String,int)>("UNDISPATCHED", 3);

        <kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart UNDISPATCHED> = $r1;

        $r0 = staticinvoke <kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart[] $values()>();

        <kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart[] $VALUES> = $r0;

        return;
    }

    private void <init>(java.lang.String, int)
    {
        kotlinx.coroutines.CoroutineStart $r0;
        java.lang.String $r1;
        int $i0;

        $r0 := @this: kotlinx.coroutines.CoroutineStart;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        specialinvoke $r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0);

        return;
    }

    public static kotlinx.coroutines.CoroutineStart[] values()
    {
        java.lang.Object $r0;
        kotlinx.coroutines.CoroutineStart[] $r1;

        $r1 = <kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart[] $VALUES>;

        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (kotlinx.coroutines.CoroutineStart[]) $r0;

        return $r1;
    }

    public final void invoke(kotlin.jvm.functions.Function2, java.lang.Object, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.CoroutineStart $r0;
        java.lang.Object $r1;
        kotlin.coroutines.Continuation $r2;
        int $i0;
        kotlin.jvm.functions.Function2 $r3;
        int[] $r4;
        kotlin.NoWhenBranchMatchedException r5;
        java.lang.Throwable r6;

        $r0 := @this: kotlinx.coroutines.CoroutineStart;

        $r3 := @parameter0: kotlin.jvm.functions.Function2;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: kotlin.coroutines.Continuation;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "block");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "completion");

        $r4 = <kotlinx.coroutines.CoroutineStart$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i0 = virtualinvoke $r0.<kotlinx.coroutines.CoroutineStart: int ordinal()>();

        $i0 = $r4[$i0];

        lookupswitch($i0)
        {
            case 1: goto label5;
            case 2: goto label4;
            case 3: goto label3;
            case 4: goto label2;
            default: goto label1;
        };

     label1:
        r5 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke r5.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        r6 = (java.lang.Throwable) r5;

        throw r6;

     label2:
        return;

     label3:
        staticinvoke <kotlinx.coroutines.intrinsics.UndispatchedKt: void startCoroutineUndispatched(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation)>($r3, $r1, $r2);

        return;

     label4:
        staticinvoke <kotlin.coroutines.ContinuationKt: void startCoroutine(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation)>($r3, $r1, $r2);

        return;

     label5:
        staticinvoke <kotlinx.coroutines.intrinsics.CancellableKt: void startCoroutineCancellable$default(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r3, $r1, $r2, null, 4, null);

        return;
    }

    public final boolean isLazy()
    {
        kotlinx.coroutines.CoroutineStart $r0, $r1;

        $r0 := @this: kotlinx.coroutines.CoroutineStart;

        $r1 = <kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart LAZY>;

        if $r0 != $r1 goto label1;

        return 1;

     label1:
        return 0;
    }

