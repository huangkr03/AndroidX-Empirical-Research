androidx.browser.browseractions.BrowserServiceFileProvider
<androidx.browser.browseractions.BrowserServiceFileProvider: java.lang.String TAG>
<androidx.browser.browseractions.BrowserServiceFileProvider: java.lang.String AUTHORITY_SUFFIX>
<androidx.browser.browseractions.BrowserServiceFileProvider: java.lang.String CONTENT_SCHEME>
<androidx.browser.browseractions.BrowserServiceFileProvider: java.lang.String FILE_SUB_DIR>
<androidx.browser.browseractions.BrowserServiceFileProvider: java.lang.String FILE_SUB_DIR_NAME>
<androidx.browser.browseractions.BrowserServiceFileProvider: java.lang.String FILE_EXTENSION>
<androidx.browser.browseractions.BrowserServiceFileProvider: java.lang.String CLIP_DATA_LABEL>
<androidx.browser.browseractions.BrowserServiceFileProvider: java.lang.String LAST_CLEANUP_TIME_KEY>
<androidx.browser.browseractions.BrowserServiceFileProvider: java.lang.Object sFileCleanupLock>
    public void <init>()
    {
        androidx.browser.browseractions.BrowserServiceFileProvider r0;

        r0 := @this: androidx.browser.browseractions.BrowserServiceFileProvider;

        specialinvoke r0.<androidx.core.content.FileProvider: void <init>()>();

        return;
    }

    public static androidx.concurrent.futures.ResolvableFuture saveBitmap(android.content.Context, android.graphics.Bitmap, java.lang.String, int)
    {
        android.content.Context r0;
        android.graphics.Bitmap r1;
        java.lang.String r2, r3, $r9;
        int i0;
        android.net.Uri r4;
        androidx.concurrent.futures.ResolvableFuture r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r10;
        androidx.browser.browseractions.BrowserServiceFileProvider$FileSaveTask $r11;
        java.lang.String[] $r12;
        java.util.concurrent.Executor $r13;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.graphics.Bitmap;

        r2 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r9 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        r3 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        r4 = staticinvoke <androidx.browser.browseractions.BrowserServiceFileProvider: android.net.Uri generateUri(android.content.Context,java.lang.String)>(r0, r3);

        r5 = staticinvoke <androidx.concurrent.futures.ResolvableFuture: androidx.concurrent.futures.ResolvableFuture create()>();

        $r11 = new androidx.browser.browseractions.BrowserServiceFileProvider$FileSaveTask;

        specialinvoke $r11.<androidx.browser.browseractions.BrowserServiceFileProvider$FileSaveTask: void <init>(android.content.Context,java.lang.String,android.graphics.Bitmap,android.net.Uri,androidx.concurrent.futures.ResolvableFuture)>(r0, r3, r1, r4, r5);

        $r13 = <android.os.AsyncTask: java.util.concurrent.Executor THREAD_POOL_EXECUTOR>;

        $r12 = newarray (java.lang.String)[0];

        virtualinvoke $r11.<androidx.browser.browseractions.BrowserServiceFileProvider$FileSaveTask: android.os.AsyncTask executeOnExecutor(java.util.concurrent.Executor,java.lang.Object[])>($r13, $r12);

        return r5;
    }

    private static android.net.Uri generateUri(android.content.Context, java.lang.String)
    {
        android.content.Context r0;
        java.lang.String r1, r2, $r10, $r13;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r9, $r11, $r12;
        android.net.Uri$Builder $r7, $r8, $r14, $r15;
        android.net.Uri $r16;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("image_provider_images/");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".png");

        r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = new android.net.Uri$Builder;

        specialinvoke $r7.<android.net.Uri$Builder: void <init>()>();

        $r8 = virtualinvoke $r7.<android.net.Uri$Builder: android.net.Uri$Builder scheme(java.lang.String)>("content");

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke r0.<android.content.Context: java.lang.String getPackageName()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".image_provider");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = virtualinvoke $r8.<android.net.Uri$Builder: android.net.Uri$Builder authority(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<android.net.Uri$Builder: android.net.Uri$Builder path(java.lang.String)>(r2);

        $r16 = virtualinvoke $r15.<android.net.Uri$Builder: android.net.Uri build()>();

        return $r16;
    }

    public static void grantReadPermission(android.content.Intent, java.util.List, android.content.Context)
    {
        android.content.Intent r0;
        java.util.List r1;
        android.content.Context r2;
        android.content.ContentResolver r3;
        android.content.ClipData r4;
        int $i0, $i1, i2;
        java.lang.Object $r6, $r9;
        android.net.Uri $r7, $r10;
        android.content.ClipData$Item $r8;

        r0 := @parameter0: android.content.Intent;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: android.content.Context;

        if r1 == null goto label1;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 != 0 goto label2;

     label1:
        return;

     label2:
        r3 = virtualinvoke r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        virtualinvoke r0.<android.content.Intent: android.content.Intent addFlags(int)>(1);

        $r6 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r7 = (android.net.Uri) $r6;

        r4 = staticinvoke <android.content.ClipData: android.content.ClipData newUri(android.content.ContentResolver,java.lang.CharSequence,android.net.Uri)>(r3, "image_provider_uris", $r7);

        i2 = 1;

     label3:
        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if i2 >= $i1 goto label4;

        $r8 = new android.content.ClipData$Item;

        $r9 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i2);

        $r10 = (android.net.Uri) $r9;

        specialinvoke $r8.<android.content.ClipData$Item: void <init>(android.net.Uri)>($r10);

        virtualinvoke r4.<android.content.ClipData: void addItem(android.content.ClipData$Item)>($r8);

        i2 = i2 + 1;

        goto label3;

     label4:
        virtualinvoke r0.<android.content.Intent: void setClipData(android.content.ClipData)>(r4);

        return;
    }

    public static com.google.common.util.concurrent.ListenableFuture loadBitmap(android.content.ContentResolver, android.net.Uri)
    {
        android.content.ContentResolver r0;
        android.net.Uri r1;
        androidx.concurrent.futures.ResolvableFuture r2;
        androidx.browser.browseractions.BrowserServiceFileProvider$1 $r3;
        java.util.concurrent.Executor $r4;

        r0 := @parameter0: android.content.ContentResolver;

        r1 := @parameter1: android.net.Uri;

        r2 = staticinvoke <androidx.concurrent.futures.ResolvableFuture: androidx.concurrent.futures.ResolvableFuture create()>();

        $r4 = <android.os.AsyncTask: java.util.concurrent.Executor THREAD_POOL_EXECUTOR>;

        $r3 = new androidx.browser.browseractions.BrowserServiceFileProvider$1;

        specialinvoke $r3.<androidx.browser.browseractions.BrowserServiceFileProvider$1: void <init>(android.content.ContentResolver,android.net.Uri,androidx.concurrent.futures.ResolvableFuture)>(r0, r1, r2);

        interfaceinvoke $r4.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r3);

        return r2;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <androidx.browser.browseractions.BrowserServiceFileProvider: java.lang.Object sFileCleanupLock> = $r0;

        return;
    }

androidx.browser.browseractions.BrowserServiceFileProvider$1
<androidx.browser.browseractions.BrowserServiceFileProvider$1: android.content.ContentResolver val$resolver>
<androidx.browser.browseractions.BrowserServiceFileProvider$1: android.net.Uri val$uri>
<androidx.browser.browseractions.BrowserServiceFileProvider$1: androidx.concurrent.futures.ResolvableFuture val$result>
    void <init>(android.content.ContentResolver, android.net.Uri, androidx.concurrent.futures.ResolvableFuture)
    {
        androidx.browser.browseractions.BrowserServiceFileProvider$1 r0;
        android.content.ContentResolver r1;
        android.net.Uri r2;
        androidx.concurrent.futures.ResolvableFuture r3;

        r0 := @this: androidx.browser.browseractions.BrowserServiceFileProvider$1;

        r1 := @parameter0: android.content.ContentResolver;

        r2 := @parameter1: android.net.Uri;

        r3 := @parameter2: androidx.concurrent.futures.ResolvableFuture;

        r0.<androidx.browser.browseractions.BrowserServiceFileProvider$1: android.content.ContentResolver val$resolver> = r1;

        r0.<androidx.browser.browseractions.BrowserServiceFileProvider$1: android.net.Uri val$uri> = r2;

        r0.<androidx.browser.browseractions.BrowserServiceFileProvider$1: androidx.concurrent.futures.ResolvableFuture val$result> = r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        androidx.browser.browseractions.BrowserServiceFileProvider$1 r0;
        java.io.FileDescriptor r1;
        android.graphics.Bitmap r2;
        android.net.Uri $r3;
        android.content.ContentResolver $r4;
        androidx.concurrent.futures.ResolvableFuture $r5, $r7, $r9, $r11;
        java.io.IOException $r6;
        java.io.FileNotFoundException $r8;
        java.lang.Throwable $r10, r13;
        android.os.ParcelFileDescriptor r12;

        r0 := @this: androidx.browser.browseractions.BrowserServiceFileProvider$1;

     label1:
        $r4 = r0.<androidx.browser.browseractions.BrowserServiceFileProvider$1: android.content.ContentResolver val$resolver>;

        $r3 = r0.<androidx.browser.browseractions.BrowserServiceFileProvider$1: android.net.Uri val$uri>;

        r12 = virtualinvoke $r4.<android.content.ContentResolver: android.os.ParcelFileDescriptor openFileDescriptor(android.net.Uri,java.lang.String)>($r3, "r");

        if r12 != null goto label3;

        $r9 = r0.<androidx.browser.browseractions.BrowserServiceFileProvider$1: androidx.concurrent.futures.ResolvableFuture val$result>;

        $r8 = new java.io.FileNotFoundException;

        specialinvoke $r8.<java.io.FileNotFoundException: void <init>()>();

        virtualinvoke $r9.<androidx.concurrent.futures.ResolvableFuture: boolean setException(java.lang.Throwable)>($r8);

     label2:
        return;

     label3:
        r1 = virtualinvoke r12.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        r2 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor)>(r1);

        virtualinvoke r12.<android.os.ParcelFileDescriptor: void close()>();

        if r2 != null goto label5;

        $r7 = r0.<androidx.browser.browseractions.BrowserServiceFileProvider$1: androidx.concurrent.futures.ResolvableFuture val$result>;

        $r6 = new java.io.IOException;

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("File could not be decoded.");

        virtualinvoke $r7.<androidx.concurrent.futures.ResolvableFuture: boolean setException(java.lang.Throwable)>($r6);

     label4:
        return;

     label5:
        $r5 = r0.<androidx.browser.browseractions.BrowserServiceFileProvider$1: androidx.concurrent.futures.ResolvableFuture val$result>;

        virtualinvoke $r5.<androidx.concurrent.futures.ResolvableFuture: boolean set(java.lang.Object)>(r2);

     label6:
        goto label8;

     label7:
        $r10 := @caughtexception;

        r13 = $r10;

        $r11 = r0.<androidx.browser.browseractions.BrowserServiceFileProvider$1: androidx.concurrent.futures.ResolvableFuture val$result>;

        virtualinvoke $r11.<androidx.concurrent.futures.ResolvableFuture: boolean setException(java.lang.Throwable)>(r13);

     label8:
        return;

        catch java.io.IOException from label1 to label2 with label7;
        catch java.io.IOException from label3 to label4 with label7;
        catch java.io.IOException from label5 to label6 with label7;
    }

androidx.browser.browseractions.BrowserServiceFileProvider$FileCleanupTask
<androidx.browser.browseractions.BrowserServiceFileProvider$FileCleanupTask: android.content.Context mAppContext>
<androidx.browser.browseractions.BrowserServiceFileProvider$FileCleanupTask: long IMAGE_RETENTION_DURATION>
<androidx.browser.browseractions.BrowserServiceFileProvider$FileCleanupTask: long CLEANUP_REQUIRED_TIME_SPAN>
<androidx.browser.browseractions.BrowserServiceFileProvider$FileCleanupTask: long DELETION_FAILED_REATTEMPT_DURATION>
    void <init>(android.content.Context)
    {
        androidx.browser.browseractions.BrowserServiceFileProvider$FileCleanupTask r0;
        android.content.Context r1, $r2;

        r0 := @this: androidx.browser.browseractions.BrowserServiceFileProvider$FileCleanupTask;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.os.AsyncTask: void <init>()>();

        $r2 = virtualinvoke r1.<android.content.Context: android.content.Context getApplicationContext()>();

        r0.<androidx.browser.browseractions.BrowserServiceFileProvider$FileCleanupTask: android.content.Context mAppContext> = $r2;

        return;
    }

    protected transient java.lang.Void doInBackground(java.lang.Void[])
    {
        androidx.browser.browseractions.BrowserServiceFileProvider$FileCleanupTask r0;
        java.lang.Void[] r1;
        android.content.SharedPreferences r2;
        java.lang.Object r3, $r15;
        java.io.File r4, r6, $r16, $r18, $r22;
        java.io.File[] r5, r26;
        long l0, l2, $l3, $l4, $l5, $l6, $l7, $l8, l12;
        int i1, i11;
        java.lang.Throwable r7, $r25;
        java.lang.StringBuilder $r8, $r12, $r13, $r20, $r21, $r23;
        android.content.Context $r9, $r10, $r17;
        java.lang.String $r11, $r14, $r24;
        boolean $z0, $z1, $z2, $z3, z4;
        byte $b9;
        android.content.SharedPreferences$Editor r27;

        r0 := @this: androidx.browser.browseractions.BrowserServiceFileProvider$FileCleanupTask;

        r1 := @parameter0: java.lang.Void[];

        $r9 = r0.<androidx.browser.browseractions.BrowserServiceFileProvider$FileCleanupTask: android.content.Context mAppContext>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = r0.<androidx.browser.browseractions.BrowserServiceFileProvider$FileCleanupTask: android.content.Context mAppContext>;

        $r11 = virtualinvoke $r10.<android.content.Context: java.lang.String getPackageName()>();

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".image_provider");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        r2 = virtualinvoke $r9.<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>($r14, 0);

        $z0 = staticinvoke <androidx.browser.browseractions.BrowserServiceFileProvider$FileCleanupTask: boolean shouldCleanUp(android.content.SharedPreferences)>(r2);

        if $z0 != 0 goto label01;

        return null;

     label01:
        $r15 = <androidx.browser.browseractions.BrowserServiceFileProvider: java.lang.Object sFileCleanupLock>;

        r3 = $r15;

        entermonitor $r15;

     label02:
        z4 = 1;

        $r16 = new java.io.File;

        $r17 = r0.<androidx.browser.browseractions.BrowserServiceFileProvider$FileCleanupTask: android.content.Context mAppContext>;

        $r18 = virtualinvoke $r17.<android.content.Context: java.io.File getFilesDir()>();

        specialinvoke $r16.<java.io.File: void <init>(java.io.File,java.lang.String)>($r18, "image_provider");

        r4 = $r16;

        $z1 = virtualinvoke r4.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label04;

        exitmonitor r3;

     label03:
        return null;

     label04:
        r5 = virtualinvoke r4.<java.io.File: java.io.File[] listFiles()>();

        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l4 = <androidx.browser.browseractions.BrowserServiceFileProvider$FileCleanupTask: long IMAGE_RETENTION_DURATION>;

        l0 = $l3 - $l4;

        r26 = r5;

        i1 = lengthof r26;

        i11 = 0;

     label05:
        if i11 >= i1 goto label08;

        r6 = r26[i11];

        $z2 = staticinvoke <androidx.browser.browseractions.BrowserServiceFileProvider$FileCleanupTask: boolean isImageFile(java.io.File)>(r6);

        if $z2 != 0 goto label06;

        goto label07;

     label06:
        l2 = virtualinvoke r6.<java.io.File: long lastModified()>();

        $b9 = l2 cmp l0;

        if $b9 >= 0 goto label07;

        $z3 = virtualinvoke r6.<java.io.File: boolean delete()>();

        if $z3 != 0 goto label07;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Fail to delete image: ");

        $r22 = virtualinvoke r6.<java.io.File: java.io.File getAbsoluteFile()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("BrowserServiceFP", $r24);

        z4 = 0;

     label07:
        i11 = i11 + 1;

        goto label05;

     label08:
        if z4 == 0 goto label09;

        l12 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        goto label10;

     label09:
        $l5 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l6 = <androidx.browser.browseractions.BrowserServiceFileProvider$FileCleanupTask: long CLEANUP_REQUIRED_TIME_SPAN>;

        $l8 = $l5 - $l6;

        $l7 = <androidx.browser.browseractions.BrowserServiceFileProvider$FileCleanupTask: long DELETION_FAILED_REATTEMPT_DURATION>;

        l12 = $l8 + $l7;

     label10:
        r27 = interfaceinvoke r2.<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>();

        interfaceinvoke r27.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putLong(java.lang.String,long)>("last_cleanup_time", l12);

        interfaceinvoke r27.<android.content.SharedPreferences$Editor: void apply()>();

        exitmonitor r3;

     label11:
        goto label14;

     label12:
        $r25 := @caughtexception;

        r7 = $r25;

        exitmonitor r3;

     label13:
        throw r7;

     label14:
        return null;

        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label04 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    private static boolean isImageFile(java.io.File)
    {
        java.io.File r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @parameter0: java.io.File;

        r1 = virtualinvoke r0.<java.io.File: java.lang.String getName()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>("..png");

        return $z0;
    }

    private static boolean shouldCleanUp(android.content.SharedPreferences)
    {
        android.content.SharedPreferences r0;
        long l0, $l1, $l2, $l3, $l4;
        byte $b5;
        boolean $z0;

        r0 := @parameter0: android.content.SharedPreferences;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l0 = interfaceinvoke r0.<android.content.SharedPreferences: long getLong(java.lang.String,long)>("last_cleanup_time", $l1);

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l3 = <androidx.browser.browseractions.BrowserServiceFileProvider$FileCleanupTask: long CLEANUP_REQUIRED_TIME_SPAN>;

        $l4 = l0 + $l3;

        $b5 = $l2 cmp $l4;

        if $b5 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected volatile java.lang.Object doInBackground(java.lang.Object[])
    {
        androidx.browser.browseractions.BrowserServiceFileProvider$FileCleanupTask r0;
        java.lang.Object[] r1;
        java.lang.Void[] $r2;
        java.lang.Void $r3;

        r0 := @this: androidx.browser.browseractions.BrowserServiceFileProvider$FileCleanupTask;

        r1 := @parameter0: java.lang.Object[];

        $r2 = (java.lang.Void[]) r1;

        $r3 = virtualinvoke r0.<androidx.browser.browseractions.BrowserServiceFileProvider$FileCleanupTask: java.lang.Void doInBackground(java.lang.Void[])>($r2);

        return $r3;
    }

    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r0, $r1, $r2;
        long $l0, $l1, $l2;

        $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit DAYS>;

        $l0 = virtualinvoke $r0.<java.util.concurrent.TimeUnit: long toMillis(long)>(7L);

        <androidx.browser.browseractions.BrowserServiceFileProvider$FileCleanupTask: long IMAGE_RETENTION_DURATION> = $l0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit DAYS>;

        $l1 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(7L);

        <androidx.browser.browseractions.BrowserServiceFileProvider$FileCleanupTask: long CLEANUP_REQUIRED_TIME_SPAN> = $l1;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit DAYS>;

        $l2 = virtualinvoke $r2.<java.util.concurrent.TimeUnit: long toMillis(long)>(1L);

        <androidx.browser.browseractions.BrowserServiceFileProvider$FileCleanupTask: long DELETION_FAILED_REATTEMPT_DURATION> = $l2;

        return;
    }

androidx.browser.browseractions.BrowserServiceFileProvider$FileSaveTask
<androidx.browser.browseractions.BrowserServiceFileProvider$FileSaveTask: android.content.Context mAppContext>
<androidx.browser.browseractions.BrowserServiceFileProvider$FileSaveTask: java.lang.String mFilename>
<androidx.browser.browseractions.BrowserServiceFileProvider$FileSaveTask: android.graphics.Bitmap mBitmap>
<androidx.browser.browseractions.BrowserServiceFileProvider$FileSaveTask: android.net.Uri mFileUri>
<androidx.browser.browseractions.BrowserServiceFileProvider$FileSaveTask: androidx.concurrent.futures.ResolvableFuture mResultFuture>
    void <init>(android.content.Context, java.lang.String, android.graphics.Bitmap, android.net.Uri, androidx.concurrent.futures.ResolvableFuture)
    {
        androidx.browser.browseractions.BrowserServiceFileProvider$FileSaveTask r0;
        android.content.Context r1, $r6;
        java.lang.String r2;
        android.graphics.Bitmap r3;
        android.net.Uri r4;
        androidx.concurrent.futures.ResolvableFuture r5;

        r0 := @this: androidx.browser.browseractions.BrowserServiceFileProvider$FileSaveTask;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.graphics.Bitmap;

        r4 := @parameter3: android.net.Uri;

        r5 := @parameter4: androidx.concurrent.futures.ResolvableFuture;

        specialinvoke r0.<android.os.AsyncTask: void <init>()>();

        $r6 = virtualinvoke r1.<android.content.Context: android.content.Context getApplicationContext()>();

        r0.<androidx.browser.browseractions.BrowserServiceFileProvider$FileSaveTask: android.content.Context mAppContext> = $r6;

        r0.<androidx.browser.browseractions.BrowserServiceFileProvider$FileSaveTask: java.lang.String mFilename> = r2;

        r0.<androidx.browser.browseractions.BrowserServiceFileProvider$FileSaveTask: android.graphics.Bitmap mBitmap> = r3;

        r0.<androidx.browser.browseractions.BrowserServiceFileProvider$FileSaveTask: android.net.Uri mFileUri> = r4;

        r0.<androidx.browser.browseractions.BrowserServiceFileProvider$FileSaveTask: androidx.concurrent.futures.ResolvableFuture mResultFuture> = r5;

        return;
    }

    protected transient java.lang.Void doInBackground(java.lang.String[])
    {
        androidx.browser.browseractions.BrowserServiceFileProvider$FileSaveTask r0;
        java.lang.String[] r1;

        r0 := @this: androidx.browser.browseractions.BrowserServiceFileProvider$FileSaveTask;

        r1 := @parameter0: java.lang.String[];

        specialinvoke r0.<androidx.browser.browseractions.BrowserServiceFileProvider$FileSaveTask: void saveFileIfNeededBlocking()>();

        return null;
    }

    protected void onPostExecute(java.lang.Void)
    {
        androidx.browser.browseractions.BrowserServiceFileProvider$FileSaveTask r0;
        java.lang.Void r1;
        androidx.browser.browseractions.BrowserServiceFileProvider$FileCleanupTask $r2;
        android.content.Context $r3;
        java.lang.Void[] $r4;
        java.util.concurrent.Executor $r5;

        r0 := @this: androidx.browser.browseractions.BrowserServiceFileProvider$FileSaveTask;

        r1 := @parameter0: java.lang.Void;

        $r2 = new androidx.browser.browseractions.BrowserServiceFileProvider$FileCleanupTask;

        $r3 = r0.<androidx.browser.browseractions.BrowserServiceFileProvider$FileSaveTask: android.content.Context mAppContext>;

        specialinvoke $r2.<androidx.browser.browseractions.BrowserServiceFileProvider$FileCleanupTask: void <init>(android.content.Context)>($r3);

        $r5 = <android.os.AsyncTask: java.util.concurrent.Executor SERIAL_EXECUTOR>;

        $r4 = newarray (java.lang.Void)[0];

        virtualinvoke $r2.<androidx.browser.browseractions.BrowserServiceFileProvider$FileCleanupTask: android.os.AsyncTask executeOnExecutor(java.util.concurrent.Executor,java.lang.Object[])>($r5, $r4);

        return;
    }

    private void saveFileIfNeededBlocking()
    {
        androidx.browser.browseractions.BrowserServiceFileProvider$FileSaveTask r0;
        java.io.File r1, r3, $r5, $r7, $r9;
        java.lang.Object r2, $r8;
        java.lang.Throwable r4, $r19;
        android.content.Context $r6;
        boolean $z0, $z1, $z4;
        java.lang.StringBuilder $r10, $r12, $r13;
        java.lang.String $r11, $r14;
        long $l0;
        android.net.Uri $r15;
        androidx.concurrent.futures.ResolvableFuture $r16, $r18;
        java.io.IOException $r17;

        r0 := @this: androidx.browser.browseractions.BrowserServiceFileProvider$FileSaveTask;

        $r5 = new java.io.File;

        $r6 = r0.<androidx.browser.browseractions.BrowserServiceFileProvider$FileSaveTask: android.content.Context mAppContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: java.io.File getFilesDir()>();

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, "image_provider");

        r1 = $r5;

        $r8 = <androidx.browser.browseractions.BrowserServiceFileProvider: java.lang.Object sFileCleanupLock>;

        r2 = $r8;

        entermonitor $r8;

     label1:
        $z0 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label3;

        $z4 = virtualinvoke r1.<java.io.File: boolean mkdir()>();

        if $z4 != 0 goto label3;

        $r18 = r0.<androidx.browser.browseractions.BrowserServiceFileProvider$FileSaveTask: androidx.concurrent.futures.ResolvableFuture mResultFuture>;

        $r17 = new java.io.IOException;

        specialinvoke $r17.<java.io.IOException: void <init>(java.lang.String)>("Could not create file directory.");

        virtualinvoke $r18.<androidx.concurrent.futures.ResolvableFuture: boolean setException(java.lang.Throwable)>($r17);

        exitmonitor r2;

     label2:
        return;

     label3:
        $r9 = new java.io.File;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = r0.<androidx.browser.browseractions.BrowserServiceFileProvider$FileSaveTask: java.lang.String mFilename>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".png");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r14);

        r3 = $r9;

        $z1 = virtualinvoke r3.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label4;

        $r16 = r0.<androidx.browser.browseractions.BrowserServiceFileProvider$FileSaveTask: androidx.concurrent.futures.ResolvableFuture mResultFuture>;

        $r15 = r0.<androidx.browser.browseractions.BrowserServiceFileProvider$FileSaveTask: android.net.Uri mFileUri>;

        virtualinvoke $r16.<androidx.concurrent.futures.ResolvableFuture: boolean set(java.lang.Object)>($r15);

        goto label5;

     label4:
        specialinvoke r0.<androidx.browser.browseractions.BrowserServiceFileProvider$FileSaveTask: void saveFileBlocking(java.io.File)>(r3);

     label5:
        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        virtualinvoke r3.<java.io.File: boolean setLastModified(long)>($l0);

        exitmonitor r2;

     label6:
        goto label9;

     label7:
        $r19 := @caughtexception;

        r4 = $r19;

        exitmonitor r2;

     label8:
        throw r4;

     label9:
        return;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    private void saveFileBlocking(java.io.File)
    {
        androidx.browser.browseractions.BrowserServiceFileProvider$FileSaveTask r0;
        java.io.File r1;
        java.lang.Throwable r2, $r13, $r15, r20;
        int $i0;
        java.io.FileOutputStream $r3, r17, r19;
        android.graphics.Bitmap$CompressFormat $r4, $r9;
        android.graphics.Bitmap $r5, $r10;
        android.net.Uri $r6, $r11;
        androidx.concurrent.futures.ResolvableFuture $r7, $r12, $r14, $r16;
        androidx.core.util.AtomicFile $r8, r18;

        r0 := @this: androidx.browser.browseractions.BrowserServiceFileProvider$FileSaveTask;

        r1 := @parameter0: java.io.File;

        r17 = null;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 22 goto label5;

        $r8 = new androidx.core.util.AtomicFile;

        specialinvoke $r8.<androidx.core.util.AtomicFile: void <init>(java.io.File)>(r1);

        r18 = $r8;

     label1:
        r17 = virtualinvoke r18.<androidx.core.util.AtomicFile: java.io.FileOutputStream startWrite()>();

        $r10 = r0.<androidx.browser.browseractions.BrowserServiceFileProvider$FileSaveTask: android.graphics.Bitmap mBitmap>;

        $r9 = <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat PNG>;

        virtualinvoke $r10.<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>($r9, 100, r17);

        virtualinvoke r17.<java.io.FileOutputStream: void close()>();

        virtualinvoke r18.<androidx.core.util.AtomicFile: void finishWrite(java.io.FileOutputStream)>(r17);

        $r12 = r0.<androidx.browser.browseractions.BrowserServiceFileProvider$FileSaveTask: androidx.concurrent.futures.ResolvableFuture mResultFuture>;

        $r11 = r0.<androidx.browser.browseractions.BrowserServiceFileProvider$FileSaveTask: android.net.Uri mFileUri>;

        virtualinvoke $r12.<androidx.concurrent.futures.ResolvableFuture: boolean set(java.lang.Object)>($r11);

     label2:
        goto label4;

     label3:
        $r13 := @caughtexception;

        r2 = $r13;

        virtualinvoke r18.<androidx.core.util.AtomicFile: void failWrite(java.io.FileOutputStream)>(r17);

        $r14 = r0.<androidx.browser.browseractions.BrowserServiceFileProvider$FileSaveTask: androidx.concurrent.futures.ResolvableFuture mResultFuture>;

        virtualinvoke $r14.<androidx.concurrent.futures.ResolvableFuture: boolean setException(java.lang.Throwable)>(r2);

     label4:
        goto label8;

     label5:
        $r3 = new java.io.FileOutputStream;

        specialinvoke $r3.<java.io.FileOutputStream: void <init>(java.io.File)>(r1);

        r19 = $r3;

        $r5 = r0.<androidx.browser.browseractions.BrowserServiceFileProvider$FileSaveTask: android.graphics.Bitmap mBitmap>;

        $r4 = <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat PNG>;

        virtualinvoke $r5.<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>($r4, 100, r19);

        virtualinvoke r19.<java.io.FileOutputStream: void close()>();

        $r7 = r0.<androidx.browser.browseractions.BrowserServiceFileProvider$FileSaveTask: androidx.concurrent.futures.ResolvableFuture mResultFuture>;

        $r6 = r0.<androidx.browser.browseractions.BrowserServiceFileProvider$FileSaveTask: android.net.Uri mFileUri>;

        virtualinvoke $r7.<androidx.concurrent.futures.ResolvableFuture: boolean set(java.lang.Object)>($r6);

     label6:
        goto label8;

     label7:
        $r15 := @caughtexception;

        r20 = $r15;

        $r16 = r0.<androidx.browser.browseractions.BrowserServiceFileProvider$FileSaveTask: androidx.concurrent.futures.ResolvableFuture mResultFuture>;

        virtualinvoke $r16.<androidx.concurrent.futures.ResolvableFuture: boolean setException(java.lang.Throwable)>(r20);

     label8:
        return;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.io.IOException from label5 to label6 with label7;
    }

    protected volatile void onPostExecute(java.lang.Object)
    {
        androidx.browser.browseractions.BrowserServiceFileProvider$FileSaveTask r0;
        java.lang.Object r1;
        java.lang.Void $r2;

        r0 := @this: androidx.browser.browseractions.BrowserServiceFileProvider$FileSaveTask;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Void) r1;

        virtualinvoke r0.<androidx.browser.browseractions.BrowserServiceFileProvider$FileSaveTask: void onPostExecute(java.lang.Void)>($r2);

        return;
    }

    protected volatile java.lang.Object doInBackground(java.lang.Object[])
    {
        androidx.browser.browseractions.BrowserServiceFileProvider$FileSaveTask r0;
        java.lang.Object[] r1;
        java.lang.String[] $r2;
        java.lang.Void $r3;

        r0 := @this: androidx.browser.browseractions.BrowserServiceFileProvider$FileSaveTask;

        r1 := @parameter0: java.lang.Object[];

        $r2 = (java.lang.String[]) r1;

        $r3 = virtualinvoke r0.<androidx.browser.browseractions.BrowserServiceFileProvider$FileSaveTask: java.lang.Void doInBackground(java.lang.String[])>($r2);

        return $r3;
    }

