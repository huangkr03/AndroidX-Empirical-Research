okio.ByteString
<okio.ByteString: okio.ByteString$Companion Companion>
<okio.ByteString: okio.ByteString EMPTY>
<okio.ByteString: long serialVersionUID>
<okio.ByteString: byte[] data>
<okio.ByteString: int hashCode>
<okio.ByteString: java.lang.String utf8>
    static void <clinit>()
    {
        okio.ByteString$Companion $r0;
        okio.ByteString $r1;
        byte[] $r2;

        $r0 = new okio.ByteString$Companion;

        specialinvoke $r0.<okio.ByteString$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <okio.ByteString: okio.ByteString$Companion Companion> = $r0;

        $r1 = new okio.ByteString;

        $r2 = newarray (byte)[0];

        specialinvoke $r1.<okio.ByteString: void <init>(byte[])>($r2);

        <okio.ByteString: okio.ByteString EMPTY> = $r1;

        return;
    }

    public void <init>(byte[])
    {
        okio.ByteString $r0;
        byte[] $r1;

        $r0 := @this: okio.ByteString;

        $r1 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "data");

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<okio.ByteString: byte[] data> = $r1;

        return;
    }

    public static final okio.ByteString encodeUtf8(java.lang.String)
    {
        okio.ByteString$Companion $r0;
        okio.ByteString $r1;
        java.lang.String $r2;

        $r2 := @parameter0: java.lang.String;

        $r0 = <okio.ByteString: okio.ByteString$Companion Companion>;

        $r1 = virtualinvoke $r0.<okio.ByteString$Companion: okio.ByteString encodeUtf8(java.lang.String)>($r2);

        return $r1;
    }

    public static final transient okio.ByteString of(byte[])
    {
        okio.ByteString$Companion $r0;
        okio.ByteString $r1;
        byte[] $r2;

        $r2 := @parameter0: byte[];

        $r0 = <okio.ByteString: okio.ByteString$Companion Companion>;

        $r1 = virtualinvoke $r0.<okio.ByteString$Companion: okio.ByteString of(byte[])>($r2);

        return $r1;
    }

    private final void readObject(java.io.ObjectInputStream) throws java.io.IOException
    {
        okio.ByteString $r0, $r3;
        java.io.ObjectInputStream $r1;
        int $i0;
        okio.ByteString$Companion $r2;
        java.lang.Class $r4;
        java.lang.reflect.Field $r5;
        byte[] $r6;

        $r0 := @this: okio.ByteString;

        $r1 := @parameter0: java.io.ObjectInputStream;

        $i0 = virtualinvoke $r1.<java.io.ObjectInputStream: int readInt()>();

        $r2 = <okio.ByteString: okio.ByteString$Companion Companion>;

        $r3 = virtualinvoke $r2.<okio.ByteString$Companion: okio.ByteString read(java.io.InputStream,int)>($r1, $i0);

        $r4 = class "Lokio/ByteString;";

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("data");

        virtualinvoke $r5.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        $r6 = $r3.<okio.ByteString: byte[] data>;

        virtualinvoke $r5.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>($r0, $r6);

        return;
    }

    private final void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        okio.ByteString $r0;
        java.io.ObjectOutputStream $r1;
        byte[] $r2;
        int $i0;

        $r0 := @this: okio.ByteString;

        $r1 := @parameter0: java.io.ObjectOutputStream;

        $r2 = $r0.<okio.ByteString: byte[] data>;

        $i0 = lengthof $r2;

        virtualinvoke $r1.<java.io.ObjectOutputStream: void writeInt(int)>($i0);

        $r2 = $r0.<okio.ByteString: byte[] data>;

        virtualinvoke $r1.<java.io.ObjectOutputStream: void write(byte[])>($r2);

        return;
    }

    public java.lang.String base64()
    {
        okio.ByteString $r0;
        byte[] $r1;
        java.lang.String $r2;

        $r0 := @this: okio.ByteString;

        $r1 = virtualinvoke $r0.<okio.ByteString: byte[] getData$third_party_java_src_okio_okio()>();

        $r2 = staticinvoke <okio._Base64Kt: java.lang.String encodeBase64$default(byte[],byte[],int,java.lang.Object)>($r1, null, 1, null);

        return $r2;
    }

    public volatile int compareTo(java.lang.Object)
    {
        okio.ByteString $r0, $r2;
        int $i0;
        java.lang.Object $r1;

        $r0 := @this: okio.ByteString;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (okio.ByteString) $r1;

        $i0 = virtualinvoke $r0.<okio.ByteString: int compareTo(okio.ByteString)>($r2);

        return $i0;
    }

    public int compareTo(okio.ByteString)
    {
        okio.ByteString $r0, $r1;
        int $i0, $i1, $i2, $i4;
        byte $b3, $b5;
        short $s6, $s7;

        $r0 := @this: okio.ByteString;

        $r1 := @parameter0: okio.ByteString;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "other");

        $i0 = virtualinvoke $r0.<okio.ByteString: int size()>();

        $i1 = virtualinvoke $r1.<okio.ByteString: int size()>();

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        $b3 = 0;

        $i4 = 0;

     label1:
        if $i4 >= $i2 goto label4;

        $b5 = virtualinvoke $r0.<okio.ByteString: byte getByte(int)>($i4);

        $s6 = $b5 & 255;

        $b5 = virtualinvoke $r1.<okio.ByteString: byte getByte(int)>($i4);

        $s7 = $b5 & 255;

        if $s6 != $s7 goto label2;

        $i4 = $i4 + 1;

        goto label1;

     label2:
        if $s6 >= $s7 goto label3;

        $b3 = -1;

        goto label7;

     label3:
        $b3 = 1;

        goto label7;

     label4:
        if $i0 != $i1 goto label5;

        goto label7;

     label5:
        if $i0 >= $i1 goto label6;

        $b3 = -1;

        goto label7;

     label6:
        $b3 = 1;

     label7:
        return $b3;
    }

    public boolean equals(java.lang.Object)
    {
        okio.ByteString $r0, $r2;
        java.lang.Object $r1;
        boolean $z0, $z1;
        int $i0, $i1;
        byte[] $r3, $r4;

        $r0 := @this: okio.ByteString;

        $r1 := @parameter0: java.lang.Object;

        $z0 = 1;

        if $r1 != $r0 goto label1;

        goto label4;

     label1:
        $z1 = $r1 instanceof okio.ByteString;

        if $z1 == 0 goto label3;

        $r2 = (okio.ByteString) $r1;

        $i0 = virtualinvoke $r2.<okio.ByteString: int size()>();

        $r3 = virtualinvoke $r0.<okio.ByteString: byte[] getData$third_party_java_src_okio_okio()>();

        $i1 = lengthof $r3;

        if $i0 != $i1 goto label2;

        $r3 = virtualinvoke $r0.<okio.ByteString: byte[] getData$third_party_java_src_okio_okio()>();

        $r4 = virtualinvoke $r0.<okio.ByteString: byte[] getData$third_party_java_src_okio_okio()>();

        $i0 = lengthof $r4;

        $z1 = virtualinvoke $r2.<okio.ByteString: boolean rangeEquals(int,byte[],int,int)>(0, $r3, 0, $i0);

        if $z1 == 0 goto label2;

        goto label4;

     label2:
        $z0 = 0;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    public final byte getByte(int)
    {
        okio.ByteString $r0;
        byte $b0;
        int $i1;

        $r0 := @this: okio.ByteString;

        $i1 := @parameter0: int;

        $b0 = virtualinvoke $r0.<okio.ByteString: byte internalGet$third_party_java_src_okio_okio(int)>($i1);

        return $b0;
    }

    public final byte[] getData$third_party_java_src_okio_okio()
    {
        okio.ByteString $r0;
        byte[] r1;

        $r0 := @this: okio.ByteString;

        r1 = $r0.<okio.ByteString: byte[] data>;

        return r1;
    }

    public final int getHashCode$third_party_java_src_okio_okio()
    {
        okio.ByteString $r0;
        int i0;

        $r0 := @this: okio.ByteString;

        i0 = $r0.<okio.ByteString: int hashCode>;

        return i0;
    }

    public int getSize$third_party_java_src_okio_okio()
    {
        okio.ByteString $r0;
        byte[] $r1;
        int $i0;

        $r0 := @this: okio.ByteString;

        $r1 = virtualinvoke $r0.<okio.ByteString: byte[] getData$third_party_java_src_okio_okio()>();

        $i0 = lengthof $r1;

        return $i0;
    }

    public final java.lang.String getUtf8$third_party_java_src_okio_okio()
    {
        okio.ByteString $r0;
        java.lang.String r1;

        $r0 := @this: okio.ByteString;

        r1 = $r0.<okio.ByteString: java.lang.String utf8>;

        return r1;
    }

    public int hashCode()
    {
        okio.ByteString $r0;
        int $i0;
        byte[] $r1;

        $r0 := @this: okio.ByteString;

        $i0 = virtualinvoke $r0.<okio.ByteString: int getHashCode$third_party_java_src_okio_okio()>();

        if $i0 == 0 goto label1;

        return $i0;

     label1:
        $r1 = virtualinvoke $r0.<okio.ByteString: byte[] getData$third_party_java_src_okio_okio()>();

        $i0 = staticinvoke <java.util.Arrays: int hashCode(byte[])>($r1);

        virtualinvoke $r0.<okio.ByteString: void setHashCode$third_party_java_src_okio_okio(int)>($i0);

        return $i0;
    }

    public java.lang.String hex()
    {
        okio.ByteString $r0;
        int $i0, $i1, $i2, $i3;
        byte[] $r1;
        char[] $r2, $r3;
        byte $b4, $b5;
        char $c6;
        java.lang.String $r4;

        $r0 := @this: okio.ByteString;

        $r1 = virtualinvoke $r0.<okio.ByteString: byte[] getData$third_party_java_src_okio_okio()>();

        $i0 = lengthof $r1;

        $i0 = $i0 + $i0;

        $r2 = newarray (char)[$i0];

        $r1 = virtualinvoke $r0.<okio.ByteString: byte[] getData$third_party_java_src_okio_okio()>();

        $i0 = lengthof $r1;

        $i2 = 0;

        $i3 = 0;

     label1:
        if $i2 >= $i0 goto label2;

        $b4 = $r1[$i2];

        $i1 = $i3 + 1;

        $r3 = staticinvoke <okio.internal._ByteStringKt: char[] getHEX_DIGIT_CHARS()>();

        $b5 = $b4 >> 4;

        $b5 = $b5 & 15;

        $c6 = $r3[$b5];

        $r2[$i3] = $c6;

        $i3 = $i1 + 1;

        $r3 = staticinvoke <okio.internal._ByteStringKt: char[] getHEX_DIGIT_CHARS()>();

        $b4 = $b4 & 15;

        $c6 = $r3[$b4];

        $r2[$i1] = $c6;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        $r4 = staticinvoke <kotlin.text.StringsKt: java.lang.String concatToString(char[])>($r2);

        return $r4;
    }

    public byte[] internalArray$third_party_java_src_okio_okio()
    {
        okio.ByteString $r0;
        byte[] $r1;

        $r0 := @this: okio.ByteString;

        $r1 = virtualinvoke $r0.<okio.ByteString: byte[] getData$third_party_java_src_okio_okio()>();

        return $r1;
    }

    public byte internalGet$third_party_java_src_okio_okio(int)
    {
        okio.ByteString $r0;
        byte[] $r1;
        int $i0;
        byte $b1;

        $r0 := @this: okio.ByteString;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke $r0.<okio.ByteString: byte[] getData$third_party_java_src_okio_okio()>();

        $b1 = $r1[$i0];

        return $b1;
    }

    public boolean rangeEquals(int, okio.ByteString, int, int)
    {
        okio.ByteString $r0, $r1;
        int $i0, $i1, $i2;
        byte[] $r2;
        boolean $z0;

        $r0 := @this: okio.ByteString;

        $i2 := @parameter0: int;

        $r1 := @parameter1: okio.ByteString;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "other");

        $r2 = virtualinvoke $r0.<okio.ByteString: byte[] getData$third_party_java_src_okio_okio()>();

        $z0 = virtualinvoke $r1.<okio.ByteString: boolean rangeEquals(int,byte[],int,int)>($i0, $r2, $i2, $i1);

        return $z0;
    }

    public boolean rangeEquals(int, byte[], int, int)
    {
        okio.ByteString $r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        $r0 := @this: okio.ByteString;

        $i2 := @parameter0: int;

        $r1 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "other");

        if $i2 < 0 goto label1;

        $r2 = virtualinvoke $r0.<okio.ByteString: byte[] getData$third_party_java_src_okio_okio()>();

        $i3 = lengthof $r2;

        $i3 = $i3 - $i1;

        if $i2 > $i3 goto label1;

        if $i0 < 0 goto label1;

        $i3 = lengthof $r1;

        $i3 = $i3 - $i1;

        if $i0 > $i3 goto label1;

        $r2 = virtualinvoke $r0.<okio.ByteString: byte[] getData$third_party_java_src_okio_okio()>();

        $z0 = staticinvoke <okio._UtilKt: boolean arrayRangeEquals(byte[],int,byte[],int,int)>($r2, $i2, $r1, $i0, $i1);

        if $z0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final void setHashCode$third_party_java_src_okio_okio(int)
    {
        okio.ByteString $r0;
        int $i0;

        $r0 := @this: okio.ByteString;

        $i0 := @parameter0: int;

        $r0.<okio.ByteString: int hashCode> = $i0;

        return;
    }

    public final void setUtf8$third_party_java_src_okio_okio(java.lang.String)
    {
        okio.ByteString $r0;
        java.lang.String $r1;

        $r0 := @this: okio.ByteString;

        $r1 := @parameter0: java.lang.String;

        $r0.<okio.ByteString: java.lang.String utf8> = $r1;

        return;
    }

    public final int size()
    {
        okio.ByteString $r0;
        int $i0;

        $r0 := @this: okio.ByteString;

        $i0 = virtualinvoke $r0.<okio.ByteString: int getSize$third_party_java_src_okio_okio()>();

        return $i0;
    }

    public final boolean startsWith(okio.ByteString)
    {
        okio.ByteString $r0, $r1;
        int $i0;
        boolean $z0;

        $r0 := @this: okio.ByteString;

        $r1 := @parameter0: okio.ByteString;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "prefix");

        $i0 = virtualinvoke $r1.<okio.ByteString: int size()>();

        $z0 = virtualinvoke $r0.<okio.ByteString: boolean rangeEquals(int,okio.ByteString,int,int)>(0, $r1, 0, $i0);

        return $z0;
    }

    public okio.ByteString toAsciiLowercase()
    {
        okio.ByteString $r0;
        int $i0, $i1, $i3;
        byte[] $r1;
        byte $b2;

        $r0 := @this: okio.ByteString;

        $i0 = 0;

     label1:
        $r1 = virtualinvoke $r0.<okio.ByteString: byte[] getData$third_party_java_src_okio_okio()>();

        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label8;

        $r1 = virtualinvoke $r0.<okio.ByteString: byte[] getData$third_party_java_src_okio_okio()>();

        $b2 = $r1[$i0];

        if $b2 < 65 goto label7;

        if $b2 <= 90 goto label2;

        goto label7;

     label2:
        $r1 = virtualinvoke $r0.<okio.ByteString: byte[] getData$third_party_java_src_okio_okio()>();

        $i1 = lengthof $r1;

        $r1 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>($r1, $i1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "copyOf(this, size)");

        $i1 = $i0 + 1;

        $i3 = $b2 + 32;

        $b2 = (byte) $i3;

        $r1[$i0] = $b2;

     label3:
        $i0 = lengthof $r1;

        if $i1 >= $i0 goto label6;

        $b2 = $r1[$i1];

        if $b2 < 65 goto label5;

        if $b2 <= 90 goto label4;

        goto label5;

     label4:
        $i0 = $b2 + 32;

        $b2 = (byte) $i0;

        $r1[$i1] = $b2;

        $i1 = $i1 + 1;

        goto label3;

     label5:
        $i1 = $i1 + 1;

        goto label3;

     label6:
        $r0 = new okio.ByteString;

        specialinvoke $r0.<okio.ByteString: void <init>(byte[])>($r1);

        return $r0;

     label7:
        $i0 = $i0 + 1;

        goto label1;

     label8:
        return $r0;
    }

    public byte[] toByteArray()
    {
        okio.ByteString $r0;
        byte[] $r1;
        int $i0;

        $r0 := @this: okio.ByteString;

        $r1 = virtualinvoke $r0.<okio.ByteString: byte[] getData$third_party_java_src_okio_okio()>();

        $i0 = lengthof $r1;

        $r1 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>($r1, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "copyOf(this, size)");

        return $r1;
    }

    public java.lang.String toString()
    {
        okio.ByteString $r0, $r4;
        byte[] $r1;
        int $i0, $i1, $i2;
        boolean $z0, $z1;
        java.lang.String $r2, $r6;
        java.lang.StringBuilder $r3;
        java.lang.IllegalArgumentException $r5;

        $r0 := @this: okio.ByteString;

        $r1 = virtualinvoke $r0.<okio.ByteString: byte[] getData$third_party_java_src_okio_okio()>();

        $i0 = lengthof $r1;

        $z0 = 1;

        if $i0 != 0 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        if $z1 == 0 goto label03;

        return "[size=0]";

     label03:
        $r1 = virtualinvoke $r0.<okio.ByteString: byte[] getData$third_party_java_src_okio_okio()>();

        $i0 = staticinvoke <okio.internal._ByteStringKt: int access$codePointIndexToCharIndex(byte[],int)>($r1, 64);

        if $i0 != -1 goto label13;

        $r1 = virtualinvoke $r0.<okio.ByteString: byte[] getData$third_party_java_src_okio_okio()>();

        $i0 = lengthof $r1;

        if $i0 > 64 goto label04;

        $r2 = virtualinvoke $r0.<okio.ByteString: java.lang.String hex()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[hex=");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;

     label04:
        $r1 = virtualinvoke $r0.<okio.ByteString: byte[] getData$third_party_java_src_okio_okio()>();

        $i0 = lengthof $r1;

        $i1 = staticinvoke <okio._UtilKt: int resolveDefaultParameter(okio.ByteString,int)>($r0, 64);

        $r1 = virtualinvoke $r0.<okio.ByteString: byte[] getData$third_party_java_src_okio_okio()>();

        $i2 = lengthof $r1;

        if $i1 > $i2 goto label05;

        $z1 = 1;

        goto label06;

     label05:
        $z1 = 0;

     label06:
        if $z1 == 0 goto label12;

        if $i1 < 0 goto label07;

        goto label08;

     label07:
        $z0 = 0;

     label08:
        if $z0 == 0 goto label11;

        $r1 = virtualinvoke $r0.<okio.ByteString: byte[] getData$third_party_java_src_okio_okio()>();

        $i2 = lengthof $r1;

        if $i1 == $i2 goto label09;

        $r4 = new okio.ByteString;

        $r1 = virtualinvoke $r0.<okio.ByteString: byte[] getData$third_party_java_src_okio_okio()>();

        $r1 = staticinvoke <kotlin.collections.ArraysKt: byte[] copyOfRange(byte[],int,int)>($r1, 0, $i1);

        specialinvoke $r4.<okio.ByteString: void <init>(byte[])>($r1);

        goto label10;

     label09:
        $r4 = $r0;

     label10:
        $r2 = virtualinvoke $r4.<okio.ByteString: java.lang.String hex()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[size=");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" hex=");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\u2026]");

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;

     label11:
        $r5 = new java.lang.IllegalArgumentException;

        $r2 = "endIndex < beginIndex";

        $r2 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r5;

     label12:
        $r1 = virtualinvoke $r0.<okio.ByteString: byte[] getData$third_party_java_src_okio_okio()>();

        $i0 = lengthof $r1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("endIndex > length(");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = new java.lang.IllegalArgumentException;

        $r2 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r5;

     label13:
        $r2 = virtualinvoke $r0.<okio.ByteString: java.lang.String utf8()>();

        $r6 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "this as java.lang.String\u2026ing(startIndex, endIndex)");

        $r6 = staticinvoke <kotlin.text.StringsKt: java.lang.String replace$default(java.lang.String,java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r6, "\\", "\\\\", 0, 4, null);

        $r6 = staticinvoke <kotlin.text.StringsKt: java.lang.String replace$default(java.lang.String,java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r6, "\n", "\\n", 0, 4, null);

        $r6 = staticinvoke <kotlin.text.StringsKt: java.lang.String replace$default(java.lang.String,java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r6, "\r", "\\r", 0, 4, null);

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label14;

        $r1 = virtualinvoke $r0.<okio.ByteString: byte[] getData$third_party_java_src_okio_okio()>();

        $i0 = lengthof $r1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[size=");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" text=");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\u2026]");

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;

     label14:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[text=");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public java.lang.String utf8()
    {
        okio.ByteString $r0;
        java.lang.String $r1;
        byte[] $r2;

        $r0 := @this: okio.ByteString;

        $r1 = virtualinvoke $r0.<okio.ByteString: java.lang.String getUtf8$third_party_java_src_okio_okio()>();

        if $r1 != null goto label1;

        $r2 = virtualinvoke $r0.<okio.ByteString: byte[] internalArray$third_party_java_src_okio_okio()>();

        $r1 = staticinvoke <okio._JvmPlatformKt: java.lang.String toUtf8String(byte[])>($r2);

        virtualinvoke $r0.<okio.ByteString: void setUtf8$third_party_java_src_okio_okio(java.lang.String)>($r1);

     label1:
        return $r1;
    }

    public void write$third_party_java_src_okio_okio(okio.Buffer, int, int)
    {
        okio.ByteString $r0;
        okio.Buffer $r1;
        int $i0, $i1;

        $r0 := @this: okio.ByteString;

        $r1 := @parameter0: okio.Buffer;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "buffer");

        staticinvoke <okio.internal._ByteStringKt: void commonWrite(okio.ByteString,okio.Buffer,int,int)>($r0, $r1, $i0, $i1);

        return;
    }

okio.ByteString$Companion
    private void <init>()
    {
        okio.ByteString$Companion $r0;

        $r0 := @this: okio.ByteString$Companion;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        okio.ByteString$Companion $r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        $r0 := @this: okio.ByteString$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke $r0.<okio.ByteString$Companion: void <init>()>();

        return;
    }

    public final okio.ByteString encodeUtf8(java.lang.String)
    {
        okio.ByteString$Companion $r0;
        java.lang.String $r1;
        byte[] $r2;
        okio.ByteString $r3;

        $r0 := @this: okio.ByteString$Companion;

        $r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $r3 = new okio.ByteString;

        $r2 = staticinvoke <okio._JvmPlatformKt: byte[] asUtf8ToByteArray(java.lang.String)>($r1);

        specialinvoke $r3.<okio.ByteString: void <init>(byte[])>($r2);

        virtualinvoke $r3.<okio.ByteString: void setUtf8$third_party_java_src_okio_okio(java.lang.String)>($r1);

        return $r3;
    }

    public final transient okio.ByteString of(byte[])
    {
        okio.ByteString$Companion $r0;
        byte[] $r1;
        okio.ByteString $r2;
        int $i0;

        $r0 := @this: okio.ByteString$Companion;

        $r1 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "data");

        $r2 = new okio.ByteString;

        $i0 = lengthof $r1;

        $r1 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>($r1, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "copyOf(this, size)");

        specialinvoke $r2.<okio.ByteString: void <init>(byte[])>($r1);

        return $r2;
    }

    public final okio.ByteString read(java.io.InputStream, int) throws java.io.IOException
    {
        okio.ByteString$Companion $r0;
        java.io.InputStream $r1;
        int $i0, $i1, $i2;
        boolean $z0;
        byte[] $r2;
        java.io.EOFException $r3;
        okio.ByteString $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        java.lang.IllegalArgumentException $r7;

        $r0 := @this: okio.ByteString$Companion;

        $r1 := @parameter0: java.io.InputStream;

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $i1 = 0;

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label6;

        $r2 = newarray (byte)[$i0];

     label3:
        if $i1 >= $i0 goto label5;

        $i2 = $i0 - $i1;

        $i2 = virtualinvoke $r1.<java.io.InputStream: int read(byte[],int,int)>($r2, $i1, $i2);

        if $i2 == -1 goto label4;

        $i1 = $i1 + $i2;

        goto label3;

     label4:
        $r3 = new java.io.EOFException;

        specialinvoke $r3.<java.io.EOFException: void <init>()>();

        throw $r3;

     label5:
        $r4 = new okio.ByteString;

        specialinvoke $r4.<okio.ByteString: void <init>(byte[])>($r2);

        return $r4;

     label6:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("byteCount < 0: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        goto label7;

     label7:
        throw $r7;
    }

