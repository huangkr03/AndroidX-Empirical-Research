androidx.work.impl.background.greedy.GreedyScheduler
<androidx.work.impl.background.greedy.GreedyScheduler: java.lang.String TAG>
<androidx.work.impl.background.greedy.GreedyScheduler: android.content.Context mContext>
<androidx.work.impl.background.greedy.GreedyScheduler: androidx.work.impl.WorkManagerImpl mWorkManagerImpl>
<androidx.work.impl.background.greedy.GreedyScheduler: androidx.work.impl.constraints.WorkConstraintsTracker mWorkConstraintsTracker>
<androidx.work.impl.background.greedy.GreedyScheduler: java.util.Set mConstrainedWorkSpecs>
<androidx.work.impl.background.greedy.GreedyScheduler: androidx.work.impl.background.greedy.DelayedWorkTracker mDelayedWorkTracker>
<androidx.work.impl.background.greedy.GreedyScheduler: boolean mRegisteredExecutionListener>
<androidx.work.impl.background.greedy.GreedyScheduler: java.lang.Object mLock>
<androidx.work.impl.background.greedy.GreedyScheduler: androidx.work.impl.StartStopTokens mStartStopTokens>
<androidx.work.impl.background.greedy.GreedyScheduler: java.lang.Boolean mInDefaultProcess>
    public void <init>(android.content.Context, androidx.work.Configuration, androidx.work.impl.constraints.trackers.Trackers, androidx.work.impl.WorkManagerImpl)
    {
        androidx.work.impl.background.greedy.GreedyScheduler r0;
        android.content.Context r1;
        androidx.work.Configuration r2;
        androidx.work.impl.constraints.trackers.Trackers r3;
        androidx.work.impl.WorkManagerImpl r4;
        java.util.HashSet $r5;
        androidx.work.impl.StartStopTokens $r6;
        androidx.work.impl.constraints.WorkConstraintsTrackerImpl $r7;
        androidx.work.impl.background.greedy.DelayedWorkTracker $r8;
        androidx.work.RunnableScheduler $r9;
        java.lang.Object $r10;

        r0 := @this: androidx.work.impl.background.greedy.GreedyScheduler;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: androidx.work.Configuration;

        r3 := @parameter2: androidx.work.impl.constraints.trackers.Trackers;

        r4 := @parameter3: androidx.work.impl.WorkManagerImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        r0.<androidx.work.impl.background.greedy.GreedyScheduler: java.util.Set mConstrainedWorkSpecs> = $r5;

        $r6 = new androidx.work.impl.StartStopTokens;

        specialinvoke $r6.<androidx.work.impl.StartStopTokens: void <init>()>();

        r0.<androidx.work.impl.background.greedy.GreedyScheduler: androidx.work.impl.StartStopTokens mStartStopTokens> = $r6;

        r0.<androidx.work.impl.background.greedy.GreedyScheduler: android.content.Context mContext> = r1;

        r0.<androidx.work.impl.background.greedy.GreedyScheduler: androidx.work.impl.WorkManagerImpl mWorkManagerImpl> = r4;

        $r7 = new androidx.work.impl.constraints.WorkConstraintsTrackerImpl;

        specialinvoke $r7.<androidx.work.impl.constraints.WorkConstraintsTrackerImpl: void <init>(androidx.work.impl.constraints.trackers.Trackers,androidx.work.impl.constraints.WorkConstraintsCallback)>(r3, r0);

        r0.<androidx.work.impl.background.greedy.GreedyScheduler: androidx.work.impl.constraints.WorkConstraintsTracker mWorkConstraintsTracker> = $r7;

        $r8 = new androidx.work.impl.background.greedy.DelayedWorkTracker;

        $r9 = virtualinvoke r2.<androidx.work.Configuration: androidx.work.RunnableScheduler getRunnableScheduler()>();

        specialinvoke $r8.<androidx.work.impl.background.greedy.DelayedWorkTracker: void <init>(androidx.work.impl.background.greedy.GreedyScheduler,androidx.work.RunnableScheduler)>(r0, $r9);

        r0.<androidx.work.impl.background.greedy.GreedyScheduler: androidx.work.impl.background.greedy.DelayedWorkTracker mDelayedWorkTracker> = $r8;

        $r10 = new java.lang.Object;

        specialinvoke $r10.<java.lang.Object: void <init>()>();

        r0.<androidx.work.impl.background.greedy.GreedyScheduler: java.lang.Object mLock> = $r10;

        return;
    }

    public void <init>(android.content.Context, androidx.work.impl.WorkManagerImpl, androidx.work.impl.constraints.WorkConstraintsTracker)
    {
        androidx.work.impl.background.greedy.GreedyScheduler r0;
        android.content.Context r1;
        androidx.work.impl.WorkManagerImpl r2;
        androidx.work.impl.constraints.WorkConstraintsTracker r3;
        java.util.HashSet $r4;
        androidx.work.impl.StartStopTokens $r5;
        java.lang.Object $r6;

        r0 := @this: androidx.work.impl.background.greedy.GreedyScheduler;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: androidx.work.impl.WorkManagerImpl;

        r3 := @parameter2: androidx.work.impl.constraints.WorkConstraintsTracker;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        r0.<androidx.work.impl.background.greedy.GreedyScheduler: java.util.Set mConstrainedWorkSpecs> = $r4;

        $r5 = new androidx.work.impl.StartStopTokens;

        specialinvoke $r5.<androidx.work.impl.StartStopTokens: void <init>()>();

        r0.<androidx.work.impl.background.greedy.GreedyScheduler: androidx.work.impl.StartStopTokens mStartStopTokens> = $r5;

        r0.<androidx.work.impl.background.greedy.GreedyScheduler: android.content.Context mContext> = r1;

        r0.<androidx.work.impl.background.greedy.GreedyScheduler: androidx.work.impl.WorkManagerImpl mWorkManagerImpl> = r2;

        r0.<androidx.work.impl.background.greedy.GreedyScheduler: androidx.work.impl.constraints.WorkConstraintsTracker mWorkConstraintsTracker> = r3;

        $r6 = new java.lang.Object;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        r0.<androidx.work.impl.background.greedy.GreedyScheduler: java.lang.Object mLock> = $r6;

        return;
    }

    public void setDelayedWorkTracker(androidx.work.impl.background.greedy.DelayedWorkTracker)
    {
        androidx.work.impl.background.greedy.GreedyScheduler r0;
        androidx.work.impl.background.greedy.DelayedWorkTracker r1;

        r0 := @this: androidx.work.impl.background.greedy.GreedyScheduler;

        r1 := @parameter0: androidx.work.impl.background.greedy.DelayedWorkTracker;

        r0.<androidx.work.impl.background.greedy.GreedyScheduler: androidx.work.impl.background.greedy.DelayedWorkTracker mDelayedWorkTracker> = r1;

        return;
    }

    public boolean hasLimitedSchedulingSlots()
    {
        androidx.work.impl.background.greedy.GreedyScheduler r0;

        r0 := @this: androidx.work.impl.background.greedy.GreedyScheduler;

        return 0;
    }

    public transient void schedule(androidx.work.impl.model.WorkSpec[])
    {
        androidx.work.impl.background.greedy.GreedyScheduler r0;
        androidx.work.impl.model.WorkSpec[] r1, r58;
        java.util.HashSet r2, r3, $r9, $r10;
        androidx.work.impl.model.WorkSpec r4;
        androidx.work.impl.model.WorkGenerationalId r5, $r25;
        long l0, l1;
        java.lang.Throwable r6, $r57;
        java.lang.Boolean $r7, $r8;
        boolean $z0, $z1, $z3, $z4, $z5, $z8, $z9;
        java.lang.Object $r11, r59;
        androidx.work.Logger $r12, $r26, $r38, $r46, $r55;
        java.lang.StringBuilder $r13, $r15, $r16, $r27, $r29, $r31, $r39, $r41, $r42, $r43, $r47, $r49, $r50, $r51;
        java.lang.String $r14, $r17, $r28, $r30, $r32, $r36, $r40, $r44, $r48, $r52, $r56, r60;
        java.util.Set $r18, $r19;
        androidx.work.impl.constraints.WorkConstraintsTracker $r20;
        androidx.work.impl.StartStopTokens $r21, $r24, $r33;
        androidx.work.WorkInfo$State $r22, $r23;
        byte $b2;
        androidx.work.impl.WorkManagerImpl $r34;
        androidx.work.impl.StartStopToken $r35;
        int $i3, $i4, i5, i6;
        androidx.work.Constraints $r37, $r45;
        androidx.work.impl.background.greedy.DelayedWorkTracker $r53, $r54;

        r0 := @this: androidx.work.impl.background.greedy.GreedyScheduler;

        r1 := @parameter0: androidx.work.impl.model.WorkSpec[];

        $r7 = r0.<androidx.work.impl.background.greedy.GreedyScheduler: java.lang.Boolean mInDefaultProcess>;

        if $r7 != null goto label01;

        specialinvoke r0.<androidx.work.impl.background.greedy.GreedyScheduler: void checkDefaultProcess()>();

     label01:
        $r8 = r0.<androidx.work.impl.background.greedy.GreedyScheduler: java.lang.Boolean mInDefaultProcess>;

        $z0 = virtualinvoke $r8.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label02;

        $r55 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r56 = <androidx.work.impl.background.greedy.GreedyScheduler: java.lang.String TAG>;

        virtualinvoke $r55.<androidx.work.Logger: void info(java.lang.String,java.lang.String)>($r56, "Ignoring schedule request in a secondary process");

        return;

     label02:
        specialinvoke r0.<androidx.work.impl.background.greedy.GreedyScheduler: void registerExecutionListenerIfNeeded()>();

        $r9 = new java.util.HashSet;

        specialinvoke $r9.<java.util.HashSet: void <init>()>();

        r2 = $r9;

        $r10 = new java.util.HashSet;

        specialinvoke $r10.<java.util.HashSet: void <init>()>();

        r3 = $r10;

        r58 = r1;

        i5 = lengthof r58;

        i6 = 0;

     label03:
        if i6 >= i5 goto label10;

        r4 = r58[i6];

        r5 = staticinvoke <androidx.work.impl.model.WorkSpecKt: androidx.work.impl.model.WorkGenerationalId generationalId(androidx.work.impl.model.WorkSpec)>(r4);

        $r21 = r0.<androidx.work.impl.background.greedy.GreedyScheduler: androidx.work.impl.StartStopTokens mStartStopTokens>;

        $z3 = virtualinvoke $r21.<androidx.work.impl.StartStopTokens: boolean contains(androidx.work.impl.model.WorkGenerationalId)>(r5);

        if $z3 == 0 goto label04;

        goto label09;

     label04:
        l0 = virtualinvoke r4.<androidx.work.impl.model.WorkSpec: long calculateNextRunTime()>();

        l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r23 = r4.<androidx.work.impl.model.WorkSpec: androidx.work.WorkInfo$State state>;

        $r22 = <androidx.work.WorkInfo$State: androidx.work.WorkInfo$State ENQUEUED>;

        if $r23 != $r22 goto label09;

        $b2 = l1 cmp l0;

        if $b2 >= 0 goto label05;

        $r53 = r0.<androidx.work.impl.background.greedy.GreedyScheduler: androidx.work.impl.background.greedy.DelayedWorkTracker mDelayedWorkTracker>;

        if $r53 == null goto label09;

        $r54 = r0.<androidx.work.impl.background.greedy.GreedyScheduler: androidx.work.impl.background.greedy.DelayedWorkTracker mDelayedWorkTracker>;

        virtualinvoke $r54.<androidx.work.impl.background.greedy.DelayedWorkTracker: void schedule(androidx.work.impl.model.WorkSpec)>(r4);

        goto label09;

     label05:
        $z4 = virtualinvoke r4.<androidx.work.impl.model.WorkSpec: boolean hasConstraints()>();

        if $z4 == 0 goto label08;

        $i3 = <android.os.Build$VERSION: int SDK_INT>;

        if $i3 < 23 goto label06;

        $r45 = r4.<androidx.work.impl.model.WorkSpec: androidx.work.Constraints constraints>;

        $z9 = virtualinvoke $r45.<androidx.work.Constraints: boolean requiresDeviceIdle()>();

        if $z9 == 0 goto label06;

        $r46 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r48 = <androidx.work.impl.background.greedy.GreedyScheduler: java.lang.String TAG>;

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        $r49 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring ");

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Requires device idle.");

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r46.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r48, $r52);

        goto label09;

     label06:
        $i4 = <android.os.Build$VERSION: int SDK_INT>;

        if $i4 < 24 goto label07;

        $r37 = r4.<androidx.work.impl.model.WorkSpec: androidx.work.Constraints constraints>;

        $z8 = virtualinvoke $r37.<androidx.work.Constraints: boolean hasContentUriTriggers()>();

        if $z8 == 0 goto label07;

        $r38 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r40 = <androidx.work.impl.background.greedy.GreedyScheduler: java.lang.String TAG>;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring ");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Requires ContentUri triggers.");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r38.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r40, $r44);

        goto label09;

     label07:
        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>(r4);

        $r36 = r4.<androidx.work.impl.model.WorkSpec: java.lang.String id>;

        interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>($r36);

        goto label09;

     label08:
        $r24 = r0.<androidx.work.impl.background.greedy.GreedyScheduler: androidx.work.impl.StartStopTokens mStartStopTokens>;

        $r25 = staticinvoke <androidx.work.impl.model.WorkSpecKt: androidx.work.impl.model.WorkGenerationalId generationalId(androidx.work.impl.model.WorkSpec)>(r4);

        $z5 = virtualinvoke $r24.<androidx.work.impl.StartStopTokens: boolean contains(androidx.work.impl.model.WorkGenerationalId)>($r25);

        if $z5 != 0 goto label09;

        $r26 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r28 = <androidx.work.impl.background.greedy.GreedyScheduler: java.lang.String TAG>;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Starting work for ");

        $r30 = r4.<androidx.work.impl.model.WorkSpec: java.lang.String id>;

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r26.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r28, $r32);

        $r34 = r0.<androidx.work.impl.background.greedy.GreedyScheduler: androidx.work.impl.WorkManagerImpl mWorkManagerImpl>;

        $r33 = r0.<androidx.work.impl.background.greedy.GreedyScheduler: androidx.work.impl.StartStopTokens mStartStopTokens>;

        $r35 = virtualinvoke $r33.<androidx.work.impl.StartStopTokens: androidx.work.impl.StartStopToken tokenFor(androidx.work.impl.model.WorkSpec)>(r4);

        virtualinvoke $r34.<androidx.work.impl.WorkManagerImpl: void startWork(androidx.work.impl.StartStopToken)>($r35);

     label09:
        i6 = i6 + 1;

        goto label03;

     label10:
        $r11 = r0.<androidx.work.impl.background.greedy.GreedyScheduler: java.lang.Object mLock>;

        r59 = $r11;

        entermonitor $r11;

     label11:
        $z1 = interfaceinvoke r2.<java.util.Set: boolean isEmpty()>();

        if $z1 != 0 goto label12;

        r60 = staticinvoke <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>(",", r3);

        $r12 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r14 = <androidx.work.impl.background.greedy.GreedyScheduler: java.lang.String TAG>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Starting tracking for ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r60);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r14, $r17);

        $r18 = r0.<androidx.work.impl.background.greedy.GreedyScheduler: java.util.Set mConstrainedWorkSpecs>;

        interfaceinvoke $r18.<java.util.Set: boolean addAll(java.util.Collection)>(r2);

        $r20 = r0.<androidx.work.impl.background.greedy.GreedyScheduler: androidx.work.impl.constraints.WorkConstraintsTracker mWorkConstraintsTracker>;

        $r19 = r0.<androidx.work.impl.background.greedy.GreedyScheduler: java.util.Set mConstrainedWorkSpecs>;

        interfaceinvoke $r20.<androidx.work.impl.constraints.WorkConstraintsTracker: void replace(java.lang.Iterable)>($r19);

     label12:
        exitmonitor r59;

     label13:
        goto label16;

     label14:
        $r57 := @caughtexception;

        r6 = $r57;

        exitmonitor r59;

     label15:
        throw r6;

     label16:
        return;

        catch java.lang.Throwable from label11 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    private void checkDefaultProcess()
    {
        androidx.work.impl.background.greedy.GreedyScheduler r0;
        androidx.work.Configuration r1;
        androidx.work.impl.WorkManagerImpl $r2;
        android.content.Context $r3;
        boolean $z0;
        java.lang.Boolean $r4;

        r0 := @this: androidx.work.impl.background.greedy.GreedyScheduler;

        $r2 = r0.<androidx.work.impl.background.greedy.GreedyScheduler: androidx.work.impl.WorkManagerImpl mWorkManagerImpl>;

        r1 = virtualinvoke $r2.<androidx.work.impl.WorkManagerImpl: androidx.work.Configuration getConfiguration()>();

        $r3 = r0.<androidx.work.impl.background.greedy.GreedyScheduler: android.content.Context mContext>;

        $z0 = staticinvoke <androidx.work.impl.utils.ProcessUtils: boolean isDefaultProcess(android.content.Context,androidx.work.Configuration)>($r3, r1);

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        r0.<androidx.work.impl.background.greedy.GreedyScheduler: java.lang.Boolean mInDefaultProcess> = $r4;

        return;
    }

    public void cancel(java.lang.String)
    {
        androidx.work.impl.background.greedy.GreedyScheduler r0;
        java.lang.String r1, $r8, $r11, $r19;
        java.util.Iterator r2;
        androidx.work.impl.StartStopToken r3;
        java.lang.Boolean $r4, $r5;
        boolean $z0, $z1;
        androidx.work.Logger $r6, $r18;
        java.lang.StringBuilder $r7, $r9, $r10;
        androidx.work.impl.background.greedy.DelayedWorkTracker $r12, $r17;
        androidx.work.impl.StartStopTokens $r13;
        java.util.List $r14;
        java.lang.Object $r15;
        androidx.work.impl.WorkManagerImpl $r16;

        r0 := @this: androidx.work.impl.background.greedy.GreedyScheduler;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<androidx.work.impl.background.greedy.GreedyScheduler: java.lang.Boolean mInDefaultProcess>;

        if $r4 != null goto label1;

        specialinvoke r0.<androidx.work.impl.background.greedy.GreedyScheduler: void checkDefaultProcess()>();

     label1:
        $r5 = r0.<androidx.work.impl.background.greedy.GreedyScheduler: java.lang.Boolean mInDefaultProcess>;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        $r18 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r19 = <androidx.work.impl.background.greedy.GreedyScheduler: java.lang.String TAG>;

        virtualinvoke $r18.<androidx.work.Logger: void info(java.lang.String,java.lang.String)>($r19, "Ignoring schedule request in non-main process");

        return;

     label2:
        specialinvoke r0.<androidx.work.impl.background.greedy.GreedyScheduler: void registerExecutionListenerIfNeeded()>();

        $r6 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r8 = <androidx.work.impl.background.greedy.GreedyScheduler: java.lang.String TAG>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cancelling work ID ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r8, $r11);

        $r12 = r0.<androidx.work.impl.background.greedy.GreedyScheduler: androidx.work.impl.background.greedy.DelayedWorkTracker mDelayedWorkTracker>;

        if $r12 == null goto label3;

        $r17 = r0.<androidx.work.impl.background.greedy.GreedyScheduler: androidx.work.impl.background.greedy.DelayedWorkTracker mDelayedWorkTracker>;

        virtualinvoke $r17.<androidx.work.impl.background.greedy.DelayedWorkTracker: void unschedule(java.lang.String)>(r1);

     label3:
        $r13 = r0.<androidx.work.impl.background.greedy.GreedyScheduler: androidx.work.impl.StartStopTokens mStartStopTokens>;

        $r14 = virtualinvoke $r13.<androidx.work.impl.StartStopTokens: java.util.List remove(java.lang.String)>(r1);

        r2 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r15 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.work.impl.StartStopToken) $r15;

        $r16 = r0.<androidx.work.impl.background.greedy.GreedyScheduler: androidx.work.impl.WorkManagerImpl mWorkManagerImpl>;

        virtualinvoke $r16.<androidx.work.impl.WorkManagerImpl: void stopWork(androidx.work.impl.StartStopToken)>(r3);

        goto label4;

     label5:
        return;
    }

    public void onAllConstraintsMet(java.util.List)
    {
        androidx.work.impl.background.greedy.GreedyScheduler r0;
        java.util.List r1;
        java.util.Iterator r2;
        androidx.work.impl.model.WorkSpec r3;
        androidx.work.impl.model.WorkGenerationalId r4;
        boolean $z0, $z1;
        java.lang.Object $r5;
        androidx.work.impl.StartStopTokens $r6, $r13;
        androidx.work.Logger $r7;
        java.lang.StringBuilder $r8, $r10, $r11;
        java.lang.String $r9, $r12;
        androidx.work.impl.WorkManagerImpl $r14;
        androidx.work.impl.StartStopToken $r15;

        r0 := @this: androidx.work.impl.background.greedy.GreedyScheduler;

        r1 := @parameter0: java.util.List;

        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.work.impl.model.WorkSpec) $r5;

        r4 = staticinvoke <androidx.work.impl.model.WorkSpecKt: androidx.work.impl.model.WorkGenerationalId generationalId(androidx.work.impl.model.WorkSpec)>(r3);

        $r6 = r0.<androidx.work.impl.background.greedy.GreedyScheduler: androidx.work.impl.StartStopTokens mStartStopTokens>;

        $z1 = virtualinvoke $r6.<androidx.work.impl.StartStopTokens: boolean contains(androidx.work.impl.model.WorkGenerationalId)>(r4);

        if $z1 != 0 goto label2;

        $r7 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r9 = <androidx.work.impl.background.greedy.GreedyScheduler: java.lang.String TAG>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Constraints met: Scheduling work ID ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r9, $r12);

        $r14 = r0.<androidx.work.impl.background.greedy.GreedyScheduler: androidx.work.impl.WorkManagerImpl mWorkManagerImpl>;

        $r13 = r0.<androidx.work.impl.background.greedy.GreedyScheduler: androidx.work.impl.StartStopTokens mStartStopTokens>;

        $r15 = virtualinvoke $r13.<androidx.work.impl.StartStopTokens: androidx.work.impl.StartStopToken tokenFor(androidx.work.impl.model.WorkGenerationalId)>(r4);

        virtualinvoke $r14.<androidx.work.impl.WorkManagerImpl: void startWork(androidx.work.impl.StartStopToken)>($r15);

     label2:
        goto label1;

     label3:
        return;
    }

    public void onAllConstraintsNotMet(java.util.List)
    {
        androidx.work.impl.background.greedy.GreedyScheduler r0;
        java.util.List r1;
        java.util.Iterator r2;
        androidx.work.impl.model.WorkSpec r3;
        androidx.work.impl.model.WorkGenerationalId r4;
        androidx.work.impl.StartStopToken r5;
        boolean $z0;
        java.lang.Object $r6;
        androidx.work.Logger $r7;
        java.lang.StringBuilder $r8, $r10, $r11;
        java.lang.String $r9, $r12;
        androidx.work.impl.StartStopTokens $r13;
        androidx.work.impl.WorkManagerImpl $r14;

        r0 := @this: androidx.work.impl.background.greedy.GreedyScheduler;

        r1 := @parameter0: java.util.List;

        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.work.impl.model.WorkSpec) $r6;

        r4 = staticinvoke <androidx.work.impl.model.WorkSpecKt: androidx.work.impl.model.WorkGenerationalId generationalId(androidx.work.impl.model.WorkSpec)>(r3);

        $r7 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r9 = <androidx.work.impl.background.greedy.GreedyScheduler: java.lang.String TAG>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Constraints not met: Cancelling work ID ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r9, $r12);

        $r13 = r0.<androidx.work.impl.background.greedy.GreedyScheduler: androidx.work.impl.StartStopTokens mStartStopTokens>;

        r5 = virtualinvoke $r13.<androidx.work.impl.StartStopTokens: androidx.work.impl.StartStopToken remove(androidx.work.impl.model.WorkGenerationalId)>(r4);

        if r5 == null goto label2;

        $r14 = r0.<androidx.work.impl.background.greedy.GreedyScheduler: androidx.work.impl.WorkManagerImpl mWorkManagerImpl>;

        virtualinvoke $r14.<androidx.work.impl.WorkManagerImpl: void stopWork(androidx.work.impl.StartStopToken)>(r5);

     label2:
        goto label1;

     label3:
        return;
    }

    public void onExecuted(androidx.work.impl.model.WorkGenerationalId, boolean)
    {
        androidx.work.impl.background.greedy.GreedyScheduler r0;
        androidx.work.impl.model.WorkGenerationalId r1;
        boolean z0;
        androidx.work.impl.StartStopTokens $r2;

        r0 := @this: androidx.work.impl.background.greedy.GreedyScheduler;

        r1 := @parameter0: androidx.work.impl.model.WorkGenerationalId;

        z0 := @parameter1: boolean;

        $r2 = r0.<androidx.work.impl.background.greedy.GreedyScheduler: androidx.work.impl.StartStopTokens mStartStopTokens>;

        virtualinvoke $r2.<androidx.work.impl.StartStopTokens: androidx.work.impl.StartStopToken remove(androidx.work.impl.model.WorkGenerationalId)>(r1);

        specialinvoke r0.<androidx.work.impl.background.greedy.GreedyScheduler: void removeConstraintTrackingFor(androidx.work.impl.model.WorkGenerationalId)>(r1);

        return;
    }

    private void removeConstraintTrackingFor(androidx.work.impl.model.WorkGenerationalId)
    {
        androidx.work.impl.background.greedy.GreedyScheduler r0;
        androidx.work.impl.model.WorkGenerationalId r1, $r9;
        java.lang.Object r2, $r6, $r8;
        java.util.Iterator r3;
        androidx.work.impl.model.WorkSpec r4;
        java.lang.Throwable r5, $r19;
        java.util.Set $r7, $r16, $r17;
        boolean $z0, $z1;
        androidx.work.Logger $r10;
        java.lang.StringBuilder $r11, $r13, $r14;
        java.lang.String $r12, $r15;
        androidx.work.impl.constraints.WorkConstraintsTracker $r18;

        r0 := @this: androidx.work.impl.background.greedy.GreedyScheduler;

        r1 := @parameter0: androidx.work.impl.model.WorkGenerationalId;

        $r6 = r0.<androidx.work.impl.background.greedy.GreedyScheduler: java.lang.Object mLock>;

        r2 = $r6;

        entermonitor $r6;

     label1:
        $r7 = r0.<androidx.work.impl.background.greedy.GreedyScheduler: java.util.Set mConstrainedWorkSpecs>;

        r3 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (androidx.work.impl.model.WorkSpec) $r8;

        $r9 = staticinvoke <androidx.work.impl.model.WorkSpecKt: androidx.work.impl.model.WorkGenerationalId generationalId(androidx.work.impl.model.WorkSpec)>(r4);

        $z1 = virtualinvoke $r9.<androidx.work.impl.model.WorkGenerationalId: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label3;

        $r10 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r12 = <androidx.work.impl.background.greedy.GreedyScheduler: java.lang.String TAG>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Stopping tracking for ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r12, $r15);

        $r16 = r0.<androidx.work.impl.background.greedy.GreedyScheduler: java.util.Set mConstrainedWorkSpecs>;

        interfaceinvoke $r16.<java.util.Set: boolean remove(java.lang.Object)>(r4);

        $r18 = r0.<androidx.work.impl.background.greedy.GreedyScheduler: androidx.work.impl.constraints.WorkConstraintsTracker mWorkConstraintsTracker>;

        $r17 = r0.<androidx.work.impl.background.greedy.GreedyScheduler: java.util.Set mConstrainedWorkSpecs>;

        interfaceinvoke $r18.<androidx.work.impl.constraints.WorkConstraintsTracker: void replace(java.lang.Iterable)>($r17);

        goto label4;

     label3:
        goto label2;

     label4:
        exitmonitor r2;

     label5:
        goto label8;

     label6:
        $r19 := @caughtexception;

        r5 = $r19;

        exitmonitor r2;

     label7:
        throw r5;

     label8:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private void registerExecutionListenerIfNeeded()
    {
        androidx.work.impl.background.greedy.GreedyScheduler r0;
        boolean $z0;
        androidx.work.impl.WorkManagerImpl $r1;
        androidx.work.impl.Processor $r2;

        r0 := @this: androidx.work.impl.background.greedy.GreedyScheduler;

        $z0 = r0.<androidx.work.impl.background.greedy.GreedyScheduler: boolean mRegisteredExecutionListener>;

        if $z0 != 0 goto label1;

        $r1 = r0.<androidx.work.impl.background.greedy.GreedyScheduler: androidx.work.impl.WorkManagerImpl mWorkManagerImpl>;

        $r2 = virtualinvoke $r1.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.Processor getProcessor()>();

        virtualinvoke $r2.<androidx.work.impl.Processor: void addExecutionListener(androidx.work.impl.ExecutionListener)>(r0);

        r0.<androidx.work.impl.background.greedy.GreedyScheduler: boolean mRegisteredExecutionListener> = 1;

     label1:
        return;
    }

    static void <clinit>()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <androidx.work.Logger: java.lang.String tagWithPrefix(java.lang.String)>("GreedyScheduler");

        <androidx.work.impl.background.greedy.GreedyScheduler: java.lang.String TAG> = $r0;

        return;
    }

