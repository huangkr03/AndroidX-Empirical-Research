com.google.common.base.Joiner
<com.google.common.base.Joiner: java.lang.String separator>
    private void <init>(java.lang.String)
    {
        com.google.common.base.Joiner $r0;
        java.lang.Object $r1;
        java.lang.String $r2;

        $r0 := @this: com.google.common.base.Joiner;

        $r2 := @parameter0: java.lang.String;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        $r2 = (java.lang.String) $r1;

        $r0.<com.google.common.base.Joiner: java.lang.String separator> = $r2;

        return;
    }

    public static com.google.common.base.Joiner on(char)
    {
        com.google.common.base.Joiner $r0;
        java.lang.String $r1;
        char $c0;

        $c0 := @parameter0: char;

        $r0 = new com.google.common.base.Joiner;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c0);

        specialinvoke $r0.<com.google.common.base.Joiner: void <init>(java.lang.String)>($r1);

        return $r0;
    }

    public java.lang.Appendable appendTo(java.lang.Appendable, java.util.Iterator) throws java.io.IOException
    {
        com.google.common.base.Joiner $r0;
        java.lang.Appendable $r1;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3;
        java.lang.CharSequence $r4;
        java.lang.String $r5;

        $r0 := @this: com.google.common.base.Joiner;

        $r1 := @parameter0: java.lang.Appendable;

        $r2 := @parameter1: java.util.Iterator;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = virtualinvoke $r0.<com.google.common.base.Joiner: java.lang.CharSequence toString(java.lang.Object)>($r3);

        interfaceinvoke $r1.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r4);

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = $r0.<com.google.common.base.Joiner: java.lang.String separator>;

        interfaceinvoke $r1.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r5);

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = virtualinvoke $r0.<com.google.common.base.Joiner: java.lang.CharSequence toString(java.lang.Object)>($r3);

        interfaceinvoke $r1.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r4);

        goto label1;

     label2:
        return $r1;
    }

    public final java.lang.StringBuilder appendTo(java.lang.StringBuilder, java.util.Iterator)
    {
        com.google.common.base.Joiner $r0;
        java.lang.StringBuilder $r1;
        java.util.Iterator $r2;
        java.lang.Throwable $r3;
        java.lang.AssertionError $r4;

        $r0 := @this: com.google.common.base.Joiner;

        $r1 := @parameter0: java.lang.StringBuilder;

        $r2 := @parameter1: java.util.Iterator;

     label1:
        virtualinvoke $r0.<com.google.common.base.Joiner: java.lang.Appendable appendTo(java.lang.Appendable,java.util.Iterator)>($r1, $r2);

     label2:
        return $r1;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>($r3);

        throw $r4;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public final java.lang.String join(java.lang.Iterable)
    {
        com.google.common.base.Joiner $r0;
        java.lang.Iterable $r1;
        java.util.Iterator $r2;
        java.lang.String $r3;

        $r0 := @this: com.google.common.base.Joiner;

        $r1 := @parameter0: java.lang.Iterable;

        $r2 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r3 = virtualinvoke $r0.<com.google.common.base.Joiner: java.lang.String join(java.util.Iterator)>($r2);

        return $r3;
    }

    public final java.lang.String join(java.util.Iterator)
    {
        com.google.common.base.Joiner $r0;
        java.lang.StringBuilder $r1;
        java.util.Iterator $r2;
        java.lang.String $r3;

        $r0 := @this: com.google.common.base.Joiner;

        $r2 := @parameter0: java.util.Iterator;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<com.google.common.base.Joiner: java.lang.StringBuilder appendTo(java.lang.StringBuilder,java.util.Iterator)>($r1, $r2);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    java.lang.CharSequence toString(java.lang.Object)
    {
        com.google.common.base.Joiner $r0;
        boolean $z0;
        java.lang.String $r1;
        java.lang.Object $r2;
        java.lang.CharSequence $r3;

        $r0 := @this: com.google.common.base.Joiner;

        $r2 := @parameter0: java.lang.Object;

        virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = $r2 instanceof java.lang.CharSequence;

        if $z0 == 0 goto label1;

        $r3 = (java.lang.CharSequence) $r2;

        return $r3;

     label1:
        $r1 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

