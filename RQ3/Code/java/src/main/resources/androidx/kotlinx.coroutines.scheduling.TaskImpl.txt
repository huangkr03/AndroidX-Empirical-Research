kotlinx.coroutines.scheduling.TaskImpl
<kotlinx.coroutines.scheduling.TaskImpl: java.lang.Runnable block>
    public void <init>(java.lang.Runnable, long, kotlinx.coroutines.scheduling.TaskContext)
    {
        kotlinx.coroutines.scheduling.TaskImpl $r0;
        java.lang.Runnable $r1;
        long $l0;
        kotlinx.coroutines.scheduling.TaskContext $r2;

        $r0 := @this: kotlinx.coroutines.scheduling.TaskImpl;

        $r1 := @parameter0: java.lang.Runnable;

        $l0 := @parameter1: long;

        $r2 := @parameter2: kotlinx.coroutines.scheduling.TaskContext;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "block");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "taskContext");

        specialinvoke $r0.<kotlinx.coroutines.scheduling.Task: void <init>(long,kotlinx.coroutines.scheduling.TaskContext)>($l0, $r2);

        $r0.<kotlinx.coroutines.scheduling.TaskImpl: java.lang.Runnable block> = $r1;

        return;
    }

    public void run()
    {
        kotlinx.coroutines.scheduling.TaskImpl $r0;
        kotlinx.coroutines.scheduling.TaskContext $r1;
        java.lang.Runnable $r2;
        java.lang.Throwable $r3;

        $r0 := @this: kotlinx.coroutines.scheduling.TaskImpl;

        $r2 = $r0.<kotlinx.coroutines.scheduling.TaskImpl: java.lang.Runnable block>;

     label1:
        interfaceinvoke $r2.<java.lang.Runnable: void run()>();

     label2:
        $r1 = $r0.<kotlinx.coroutines.scheduling.TaskImpl: kotlinx.coroutines.scheduling.TaskContext taskContext>;

        interfaceinvoke $r1.<kotlinx.coroutines.scheduling.TaskContext: void afterTask()>();

        return;

     label3:
        $r3 := @caughtexception;

        $r1 = $r0.<kotlinx.coroutines.scheduling.TaskImpl: kotlinx.coroutines.scheduling.TaskContext taskContext>;

        interfaceinvoke $r1.<kotlinx.coroutines.scheduling.TaskContext: void afterTask()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.lang.String toString()
    {
        kotlinx.coroutines.scheduling.TaskImpl $r0;
        long $l0;
        kotlinx.coroutines.scheduling.TaskContext $r1;
        java.lang.Runnable $r2;
        java.lang.String $r3, $r4;
        java.lang.StringBuilder $r5;

        $r0 := @this: kotlinx.coroutines.scheduling.TaskImpl;

        $r2 = $r0.<kotlinx.coroutines.scheduling.TaskImpl: java.lang.Runnable block>;

        $r3 = staticinvoke <kotlinx.coroutines.DebugStringsKt: java.lang.String getClassSimpleName(java.lang.Object)>($r2);

        $r2 = $r0.<kotlinx.coroutines.scheduling.TaskImpl: java.lang.Runnable block>;

        $r4 = staticinvoke <kotlinx.coroutines.DebugStringsKt: java.lang.String getHexAddress(java.lang.Object)>($r2);

        $l0 = $r0.<kotlinx.coroutines.scheduling.TaskImpl: long submissionTime>;

        $r1 = $r0.<kotlinx.coroutines.scheduling.TaskImpl: kotlinx.coroutines.scheduling.TaskContext taskContext>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Task[");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

