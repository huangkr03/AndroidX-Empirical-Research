androidx.compose.compiler.plugins.kotlin.ComposableCallCheckerKt
    public static final boolean isComposableInvocation(org.jetbrains.kotlin.resolve.calls.model.ResolvedCall)
    {
        org.jetbrains.kotlin.resolve.calls.model.ResolvedCall $r0, $r15, $r20;
        org.jetbrains.kotlin.descriptors.CallableDescriptor r1, r2, $r16, $r21;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        org.jetbrains.kotlin.descriptors.annotations.Annotated $r3, $r6, $r7, $r22;
        org.jetbrains.kotlin.descriptors.PropertyGetterDescriptor $r4;
        org.jetbrains.kotlin.descriptors.PropertyDescriptor $r5;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r8, $r9;
        org.jetbrains.kotlin.name.Name $r10, $r11;
        org.jetbrains.kotlin.resolve.scopes.receivers.ReceiverValue $r12;
        org.jetbrains.kotlin.types.KotlinType $r13, $r18;
        org.jetbrains.kotlin.resolve.calls.model.VariableAsFunctionResolvedCall $r14, $r19;
        org.jetbrains.kotlin.descriptors.VariableDescriptor $r17;

        $r0 := @parameter0: org.jetbrains.kotlin.resolve.calls.model.ResolvedCall;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$isComposableInvocation");

        $z0 = $r0 instanceof org.jetbrains.kotlin.resolve.calls.model.VariableAsFunctionResolvedCall;

        if $z0 == 0 goto label03;

        $r14 = (org.jetbrains.kotlin.resolve.calls.model.VariableAsFunctionResolvedCall) $r0;

        $r15 = interfaceinvoke $r14.<org.jetbrains.kotlin.resolve.calls.model.VariableAsFunctionResolvedCall: org.jetbrains.kotlin.resolve.calls.model.ResolvedCall getVariableCall()>();

        $r16 = interfaceinvoke $r15.<org.jetbrains.kotlin.resolve.calls.model.ResolvedCall: org.jetbrains.kotlin.descriptors.CallableDescriptor getCandidateDescriptor()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r16, "variableCall.candidateDescriptor");

        $r17 = (org.jetbrains.kotlin.descriptors.VariableDescriptor) $r16;

        $r18 = interfaceinvoke $r17.<org.jetbrains.kotlin.descriptors.VariableDescriptor: org.jetbrains.kotlin.types.KotlinType getType()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r18, "variableCall.candidateDescriptor.type");

        $z8 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeFqNamesKt: boolean hasComposableAnnotation(org.jetbrains.kotlin.types.KotlinType)>($r18);

        if $z8 == 0 goto label01;

        return 1;

     label01:
        $r19 = (org.jetbrains.kotlin.resolve.calls.model.VariableAsFunctionResolvedCall) $r0;

        $r20 = interfaceinvoke $r19.<org.jetbrains.kotlin.resolve.calls.model.VariableAsFunctionResolvedCall: org.jetbrains.kotlin.resolve.calls.model.ResolvedCall getFunctionCall()>();

        $r21 = interfaceinvoke $r20.<org.jetbrains.kotlin.resolve.calls.model.ResolvedCall: org.jetbrains.kotlin.descriptors.CallableDescriptor getResultingDescriptor()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r21, "functionCall.resultingDescriptor");

        $r22 = (org.jetbrains.kotlin.descriptors.annotations.Annotated) $r21;

        $z9 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeFqNamesKt: boolean hasComposableAnnotation(org.jetbrains.kotlin.descriptors.annotations.Annotated)>($r22);

        if $z9 == 0 goto label02;

        return 1;

     label02:
        return 0;

     label03:
        r1 = interfaceinvoke $r0.<org.jetbrains.kotlin.resolve.calls.model.ResolvedCall: org.jetbrains.kotlin.descriptors.CallableDescriptor getCandidateDescriptor()>();

        $z1 = r1 instanceof org.jetbrains.kotlin.descriptors.FunctionDescriptor;

        if $z1 == 0 goto label06;

        $r8 = (org.jetbrains.kotlin.descriptors.FunctionDescriptor) r1;

        $z5 = interfaceinvoke $r8.<org.jetbrains.kotlin.descriptors.FunctionDescriptor: boolean isOperator()>();

        if $z5 == 0 goto label06;

        $r9 = (org.jetbrains.kotlin.descriptors.FunctionDescriptor) r1;

        $r10 = interfaceinvoke $r9.<org.jetbrains.kotlin.descriptors.FunctionDescriptor: org.jetbrains.kotlin.name.Name getName()>();

        $r11 = <org.jetbrains.kotlin.util.OperatorNameConventions: org.jetbrains.kotlin.name.Name INVOKE>;

        $z6 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r10, $r11);

        if $z6 == 0 goto label06;

        $r12 = interfaceinvoke $r0.<org.jetbrains.kotlin.resolve.calls.model.ResolvedCall: org.jetbrains.kotlin.resolve.scopes.receivers.ReceiverValue getDispatchReceiver()>();

        if $r12 == null goto label04;

        $r13 = interfaceinvoke $r12.<org.jetbrains.kotlin.resolve.scopes.receivers.ReceiverValue: org.jetbrains.kotlin.types.KotlinType getType()>();

        if $r13 == null goto label04;

        $z7 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeFqNamesKt: boolean hasComposableAnnotation(org.jetbrains.kotlin.types.KotlinType)>($r13);

        if $z7 != 1 goto label06;

        goto label05;

     label04:
        goto label06;

     label05:
        return 1;

     label06:
        r2 = r1;

        $z10 = r2 instanceof org.jetbrains.kotlin.descriptors.ValueParameterDescriptor;

        if $z10 == 0 goto label07;

        $z11 = 0;

        goto label11;

     label07:
        $z2 = r2 instanceof org.jetbrains.kotlin.descriptors.impl.LocalVariableDescriptor;

        if $z2 == 0 goto label08;

        $z11 = 0;

        goto label11;

     label08:
        $z3 = r2 instanceof org.jetbrains.kotlin.descriptors.PropertyDescriptor;

        if $z3 == 0 goto label09;

        $r7 = (org.jetbrains.kotlin.descriptors.annotations.Annotated) r1;

        $z11 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeFqNamesKt: boolean hasComposableAnnotation(org.jetbrains.kotlin.descriptors.annotations.Annotated)>($r7);

        goto label11;

     label09:
        $z4 = r2 instanceof org.jetbrains.kotlin.descriptors.PropertyGetterDescriptor;

        if $z4 == 0 goto label10;

        $r4 = (org.jetbrains.kotlin.descriptors.PropertyGetterDescriptor) r1;

        $r5 = interfaceinvoke $r4.<org.jetbrains.kotlin.descriptors.PropertyGetterDescriptor: org.jetbrains.kotlin.descriptors.PropertyDescriptor getCorrespondingProperty()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "candidateDescriptor.correspondingProperty");

        $r6 = (org.jetbrains.kotlin.descriptors.annotations.Annotated) $r5;

        $z11 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeFqNamesKt: boolean hasComposableAnnotation(org.jetbrains.kotlin.descriptors.annotations.Annotated)>($r6);

        goto label11;

     label10:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r1, "candidateDescriptor");

        $r3 = (org.jetbrains.kotlin.descriptors.annotations.Annotated) r1;

        $z11 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeFqNamesKt: boolean hasComposableAnnotation(org.jetbrains.kotlin.descriptors.annotations.Annotated)>($r3);

     label11:
        return $z11;
    }

    public static final boolean isMarkedAsComposable(org.jetbrains.kotlin.descriptors.CallableDescriptor)
    {
        org.jetbrains.kotlin.descriptors.CallableDescriptor $r0, r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.jetbrains.kotlin.descriptors.annotations.Annotated $r2, $r3, $r10;
        org.jetbrains.kotlin.descriptors.impl.LocalVariableDescriptor $r4;
        org.jetbrains.kotlin.types.KotlinType $r5, $r7;
        org.jetbrains.kotlin.descriptors.ValueParameterDescriptor $r6;
        org.jetbrains.kotlin.descriptors.PropertyGetterDescriptor $r8;
        org.jetbrains.kotlin.descriptors.PropertyDescriptor $r9;

        $r0 := @parameter0: org.jetbrains.kotlin.descriptors.CallableDescriptor;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$isMarkedAsComposable");

        r1 = $r0;

        $z0 = r1 instanceof org.jetbrains.kotlin.descriptors.PropertyGetterDescriptor;

        if $z0 == 0 goto label1;

        $r8 = (org.jetbrains.kotlin.descriptors.PropertyGetterDescriptor) $r0;

        $r9 = interfaceinvoke $r8.<org.jetbrains.kotlin.descriptors.PropertyGetterDescriptor: org.jetbrains.kotlin.descriptors.PropertyDescriptor getCorrespondingProperty()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r9, "correspondingProperty");

        $r10 = (org.jetbrains.kotlin.descriptors.annotations.Annotated) $r9;

        $z4 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeFqNamesKt: boolean hasComposableAnnotation(org.jetbrains.kotlin.descriptors.annotations.Annotated)>($r10);

        goto label5;

     label1:
        $z1 = r1 instanceof org.jetbrains.kotlin.descriptors.ValueParameterDescriptor;

        if $z1 == 0 goto label2;

        $r6 = (org.jetbrains.kotlin.descriptors.ValueParameterDescriptor) $r0;

        $r7 = interfaceinvoke $r6.<org.jetbrains.kotlin.descriptors.ValueParameterDescriptor: org.jetbrains.kotlin.types.KotlinType getType()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r7, "type");

        $z4 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeFqNamesKt: boolean hasComposableAnnotation(org.jetbrains.kotlin.types.KotlinType)>($r7);

        goto label5;

     label2:
        $z2 = r1 instanceof org.jetbrains.kotlin.descriptors.impl.LocalVariableDescriptor;

        if $z2 == 0 goto label3;

        $r4 = (org.jetbrains.kotlin.descriptors.impl.LocalVariableDescriptor) $r0;

        $r5 = virtualinvoke $r4.<org.jetbrains.kotlin.descriptors.impl.LocalVariableDescriptor: org.jetbrains.kotlin.types.KotlinType getType()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "type");

        $z4 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeFqNamesKt: boolean hasComposableAnnotation(org.jetbrains.kotlin.types.KotlinType)>($r5);

        goto label5;

     label3:
        $z3 = r1 instanceof org.jetbrains.kotlin.descriptors.PropertyDescriptor;

        if $z3 == 0 goto label4;

        $r3 = (org.jetbrains.kotlin.descriptors.annotations.Annotated) $r0;

        $z4 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeFqNamesKt: boolean hasComposableAnnotation(org.jetbrains.kotlin.descriptors.annotations.Annotated)>($r3);

        goto label5;

     label4:
        $r2 = (org.jetbrains.kotlin.descriptors.annotations.Annotated) $r0;

        $z4 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeFqNamesKt: boolean hasComposableAnnotation(org.jetbrains.kotlin.descriptors.annotations.Annotated)>($r2);

     label5:
        return $z4;
    }

    public static final boolean isComposableCallable(org.jetbrains.kotlin.descriptors.CallableDescriptor, org.jetbrains.kotlin.resolve.BindingContext)
    {
        org.jetbrains.kotlin.descriptors.CallableDescriptor $r0;
        org.jetbrains.kotlin.resolve.BindingContext r1;
        org.jetbrains.kotlin.psi.KtFunctionLiteral r2, $r6;
        org.jetbrains.kotlin.psi.KtLambdaExpression r3;
        org.jetbrains.kotlin.descriptors.ValueParameterDescriptor r4, $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.jetbrains.kotlin.descriptors.DeclarationDescriptor $r5;
        java.util.List $r7;
        org.jetbrains.kotlin.psi.KtFunction $r8;
        org.jetbrains.kotlin.types.KotlinType $r10;
        androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices $r11, $r17;
        org.jetbrains.kotlin.util.slicedMap.WritableSlice $r12, $r18;
        org.jetbrains.kotlin.util.slicedMap.ReadOnlySlice $r13, $r19;
        java.lang.Object $r14, $r20;
        java.lang.Boolean $r15, $r16, $r21, $r22;
        org.jetbrains.kotlin.com.intellij.psi.PsiElement $r23, $r24;

        $r0 := @parameter0: org.jetbrains.kotlin.descriptors.CallableDescriptor;

        r1 := @parameter1: org.jetbrains.kotlin.resolve.BindingContext;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$isComposableCallable");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "bindingContext");

        $z0 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposableCallCheckerKt: boolean isMarkedAsComposable(org.jetbrains.kotlin.descriptors.CallableDescriptor)>($r0);

        if $z0 == 0 goto label01;

        return 1;

     label01:
        $z1 = $r0 instanceof org.jetbrains.kotlin.descriptors.FunctionDescriptor;

        if $z1 == 0 goto label02;

        $r17 = <androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices: androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices INSTANCE>;

        $r18 = virtualinvoke $r17.<androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices: org.jetbrains.kotlin.util.slicedMap.WritableSlice getINFERRED_COMPOSABLE_DESCRIPTOR()>();

        $r19 = (org.jetbrains.kotlin.util.slicedMap.ReadOnlySlice) $r18;

        $r20 = interfaceinvoke r1.<org.jetbrains.kotlin.resolve.BindingContext: java.lang.Object get(org.jetbrains.kotlin.util.slicedMap.ReadOnlySlice,java.lang.Object)>($r19, $r0);

        $r21 = (java.lang.Boolean) $r20;

        $r22 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z7 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r21, $r22);

        if $z7 == 0 goto label02;

        return 1;

     label02:
        $r5 = (org.jetbrains.kotlin.descriptors.DeclarationDescriptor) $r0;

        $r23 = staticinvoke <org.jetbrains.kotlin.js.resolve.diagnostics.SourceLocationUtilsKt: org.jetbrains.kotlin.com.intellij.psi.PsiElement findPsi(org.jetbrains.kotlin.descriptors.DeclarationDescriptor)>($r5);

        $z2 = $r23 instanceof org.jetbrains.kotlin.psi.KtFunctionLiteral;

        if $z2 != 0 goto label03;

        $r23 = null;

     label03:
        $r6 = (org.jetbrains.kotlin.psi.KtFunctionLiteral) $r23;

        if $r6 == null goto label04;

        goto label05;

     label04:
        return 0;

     label05:
        r2 = $r6;

        $r7 = virtualinvoke r2.<org.jetbrains.kotlin.psi.KtFunctionLiteral: java.util.List getAnnotationEntries()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r7, "functionLiteral.annotationEntries");

        $z3 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposableCallCheckerKt: boolean hasComposableAnnotation(java.util.List,org.jetbrains.kotlin.resolve.BindingContext)>($r7, r1);

        if $z3 == 0 goto label06;

        return 1;

     label06:
        $r24 = virtualinvoke r2.<org.jetbrains.kotlin.psi.KtFunctionLiteral: org.jetbrains.kotlin.com.intellij.psi.PsiElement getParent()>();

        $z4 = $r24 instanceof org.jetbrains.kotlin.psi.KtLambdaExpression;

        if $z4 != 0 goto label07;

        $r24 = null;

     label07:
        r3 = (org.jetbrains.kotlin.psi.KtLambdaExpression) $r24;

        if r3 == null goto label08;

        $r11 = <androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices: androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices INSTANCE>;

        $r12 = virtualinvoke $r11.<androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices: org.jetbrains.kotlin.util.slicedMap.WritableSlice getINFERRED_COMPOSABLE_LITERAL()>();

        $r13 = (org.jetbrains.kotlin.util.slicedMap.ReadOnlySlice) $r12;

        $r14 = interfaceinvoke r1.<org.jetbrains.kotlin.resolve.BindingContext: java.lang.Object get(org.jetbrains.kotlin.util.slicedMap.ReadOnlySlice,java.lang.Object)>($r13, r3);

        $r15 = (java.lang.Boolean) $r14;

        $r16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z6 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r15, $r16);

        if $z6 == 0 goto label08;

        return 1;

     label08:
        $r8 = (org.jetbrains.kotlin.psi.KtFunction) r2;

        $r9 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposableCallCheckerKt: org.jetbrains.kotlin.descriptors.ValueParameterDescriptor getArgumentDescriptor(org.jetbrains.kotlin.psi.KtFunction,org.jetbrains.kotlin.resolve.BindingContext)>($r8, r1);

        if $r9 == null goto label09;

        goto label10;

     label09:
        return 0;

     label10:
        r4 = $r9;

        $r10 = interfaceinvoke r4.<org.jetbrains.kotlin.descriptors.ValueParameterDescriptor: org.jetbrains.kotlin.types.KotlinType getType()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r10, "arg.type");

        $z5 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeFqNamesKt: boolean hasComposableAnnotation(org.jetbrains.kotlin.types.KotlinType)>($r10);

        return $z5;
    }

    public static final boolean allowsComposableCalls(org.jetbrains.kotlin.descriptors.FunctionDescriptor, org.jetbrains.kotlin.resolve.BindingContext)
    {
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r0;
        org.jetbrains.kotlin.resolve.BindingContext r1;
        org.jetbrains.kotlin.descriptors.CallableDescriptor $r2;
        boolean $z0, $z1;
        androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices $r3;
        org.jetbrains.kotlin.util.slicedMap.WritableSlice $r4;
        org.jetbrains.kotlin.util.slicedMap.ReadOnlySlice $r5;
        java.lang.Object $r6;
        java.lang.Boolean $r7, $r8;

        $r0 := @parameter0: org.jetbrains.kotlin.descriptors.FunctionDescriptor;

        r1 := @parameter1: org.jetbrains.kotlin.resolve.BindingContext;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$allowsComposableCalls");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "bindingContext");

        $r2 = (org.jetbrains.kotlin.descriptors.CallableDescriptor) $r0;

        $z0 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposableCallCheckerKt: boolean isComposableCallable(org.jetbrains.kotlin.descriptors.CallableDescriptor,org.jetbrains.kotlin.resolve.BindingContext)>($r2, r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r3 = <androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices: androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices INSTANCE>;

        $r4 = virtualinvoke $r3.<androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices: org.jetbrains.kotlin.util.slicedMap.WritableSlice getLAMBDA_CAPABLE_OF_COMPOSER_CAPTURE()>();

        $r5 = (org.jetbrains.kotlin.util.slicedMap.ReadOnlySlice) $r4;

        $r6 = interfaceinvoke r1.<org.jetbrains.kotlin.resolve.BindingContext: java.lang.Object get(org.jetbrains.kotlin.util.slicedMap.ReadOnlySlice,java.lang.Object)>($r5, $r0);

        $r7 = (java.lang.Boolean) $r6;

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r7, $r8);

        return $z1;
    }

    private static final org.jetbrains.kotlin.descriptors.ValueParameterDescriptor getArgumentDescriptor(org.jetbrains.kotlin.psi.KtFunction, org.jetbrains.kotlin.resolve.BindingContext)
    {
        org.jetbrains.kotlin.psi.KtFunction r0;
        org.jetbrains.kotlin.resolve.BindingContext r1;
        org.jetbrains.kotlin.psi.KtExpression r2, $r6, $r7, $r11;
        org.jetbrains.kotlin.resolve.calls.model.ResolvedCall r3, $r9;
        org.jetbrains.kotlin.psi.ValueArgument r4, $r12;
        org.jetbrains.kotlin.resolve.calls.model.ArgumentMatch r5, $r13;
        org.jetbrains.kotlin.psi.KtElement $r8;
        org.jetbrains.kotlin.psi.Call $r10;
        boolean $z0;
        org.jetbrains.kotlin.descriptors.ValueParameterDescriptor $r14;
        org.jetbrains.kotlin.resolve.calls.model.ArgumentMapping $r15;

        r0 := @parameter0: org.jetbrains.kotlin.psi.KtFunction;

        r1 := @parameter1: org.jetbrains.kotlin.resolve.BindingContext;

        $r6 = (org.jetbrains.kotlin.psi.KtExpression) r0;

        $r7 = staticinvoke <org.jetbrains.kotlin.psi.KtPsiUtil: org.jetbrains.kotlin.psi.KtExpression getParentCallIfPresent(org.jetbrains.kotlin.psi.KtExpression)>($r6);

        if $r7 == null goto label1;

        goto label2;

     label1:
        return null;

     label2:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r7, "KtPsiUtil.getParentCallI\u2026(argument) ?: return null");

        r2 = $r7;

        $r8 = (org.jetbrains.kotlin.psi.KtElement) r2;

        $r9 = staticinvoke <org.jetbrains.kotlin.resolve.calls.callUtil.CallUtilKt: org.jetbrains.kotlin.resolve.calls.model.ResolvedCall getResolvedCall(org.jetbrains.kotlin.psi.KtElement,org.jetbrains.kotlin.resolve.BindingContext)>($r8, r1);

        if $r9 == null goto label3;

        goto label4;

     label3:
        return null;

     label4:
        r3 = $r9;

        $r10 = interfaceinvoke r3.<org.jetbrains.kotlin.resolve.calls.model.ResolvedCall: org.jetbrains.kotlin.psi.Call getCall()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r10, "resolvedCall.call");

        $r11 = (org.jetbrains.kotlin.psi.KtExpression) r0;

        $r12 = staticinvoke <org.jetbrains.kotlin.resolve.calls.callUtil.CallUtilKt: org.jetbrains.kotlin.psi.ValueArgument getValueArgumentForExpression(org.jetbrains.kotlin.psi.Call,org.jetbrains.kotlin.psi.KtExpression)>($r10, $r11);

        if $r12 == null goto label5;

        goto label6;

     label5:
        return null;

     label6:
        r4 = $r12;

        $r15 = interfaceinvoke r3.<org.jetbrains.kotlin.resolve.calls.model.ResolvedCall: org.jetbrains.kotlin.resolve.calls.model.ArgumentMapping getArgumentMapping(org.jetbrains.kotlin.psi.ValueArgument)>(r4);

        $z0 = $r15 instanceof org.jetbrains.kotlin.resolve.calls.model.ArgumentMatch;

        if $z0 != 0 goto label7;

        $r15 = null;

     label7:
        $r13 = (org.jetbrains.kotlin.resolve.calls.model.ArgumentMatch) $r15;

        if $r13 == null goto label8;

        goto label9;

     label8:
        return null;

     label9:
        r5 = $r13;

        $r14 = interfaceinvoke r5.<org.jetbrains.kotlin.resolve.calls.model.ArgumentMatch: org.jetbrains.kotlin.descriptors.ValueParameterDescriptor getValueParameter()>();

        return $r14;
    }

    public static final boolean hasComposableAnnotation(java.util.List, org.jetbrains.kotlin.resolve.BindingContext)
    {
        java.util.List $r0;
        org.jetbrains.kotlin.resolve.BindingContext r1;
        java.util.Iterator r2;
        org.jetbrains.kotlin.psi.KtAnnotationEntry r3;
        org.jetbrains.kotlin.descriptors.annotations.AnnotationDescriptor r4, $r9;
        boolean $z0, $z1;
        java.lang.Object $r5, $r8;
        org.jetbrains.kotlin.util.slicedMap.WritableSlice $r6;
        org.jetbrains.kotlin.util.slicedMap.ReadOnlySlice $r7;

        $r0 := @parameter0: java.util.List;

        r1 := @parameter1: org.jetbrains.kotlin.resolve.BindingContext;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$hasComposableAnnotation");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "bindingContext");

        r2 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.jetbrains.kotlin.psi.KtAnnotationEntry) $r5;

        $r6 = <org.jetbrains.kotlin.resolve.BindingContext: org.jetbrains.kotlin.util.slicedMap.WritableSlice ANNOTATION>;

        $r7 = (org.jetbrains.kotlin.util.slicedMap.ReadOnlySlice) $r6;

        $r8 = interfaceinvoke r1.<org.jetbrains.kotlin.resolve.BindingContext: java.lang.Object get(org.jetbrains.kotlin.util.slicedMap.ReadOnlySlice,java.lang.Object)>($r7, r3);

        $r9 = (org.jetbrains.kotlin.descriptors.annotations.AnnotationDescriptor) $r8;

        if $r9 == null goto label2;

        goto label3;

     label2:
        goto label4;

     label3:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r9, "bindingContext.get(Bindi\u2026ATION, entry) ?: continue");

        r4 = $r9;

        $z1 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeFqNamesKt: boolean isComposableAnnotation(org.jetbrains.kotlin.descriptors.annotations.AnnotationDescriptor)>(r4);

        if $z1 == 0 goto label4;

        return 1;

     label4:
        goto label1;

     label5:
        return 0;
    }

    public static final org.jetbrains.kotlin.descriptors.ValueParameterDescriptor access$getArgumentDescriptor(org.jetbrains.kotlin.psi.KtFunction, org.jetbrains.kotlin.resolve.BindingContext)
    {
        org.jetbrains.kotlin.psi.KtFunction r0;
        org.jetbrains.kotlin.resolve.BindingContext r1;
        org.jetbrains.kotlin.descriptors.ValueParameterDescriptor $r2;

        r0 := @parameter0: org.jetbrains.kotlin.psi.KtFunction;

        r1 := @parameter1: org.jetbrains.kotlin.resolve.BindingContext;

        $r2 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposableCallCheckerKt: org.jetbrains.kotlin.descriptors.ValueParameterDescriptor getArgumentDescriptor(org.jetbrains.kotlin.psi.KtFunction,org.jetbrains.kotlin.resolve.BindingContext)>(r0, r1);

        return $r2;
    }

