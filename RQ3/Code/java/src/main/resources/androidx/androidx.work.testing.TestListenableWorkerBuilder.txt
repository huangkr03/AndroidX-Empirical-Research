androidx.work.testing.TestListenableWorkerBuilder
<androidx.work.testing.TestListenableWorkerBuilder: android.content.Context mContext>
<androidx.work.testing.TestListenableWorkerBuilder: java.lang.Class mWorkerClass>
<androidx.work.testing.TestListenableWorkerBuilder: java.lang.String mWorkerName>
<androidx.work.testing.TestListenableWorkerBuilder: java.util.UUID mId>
<androidx.work.testing.TestListenableWorkerBuilder: androidx.work.Data mInputData>
<androidx.work.testing.TestListenableWorkerBuilder: java.util.List mTags>
<androidx.work.testing.TestListenableWorkerBuilder: int mRunAttemptCount>
<androidx.work.testing.TestListenableWorkerBuilder: androidx.work.WorkerParameters$RuntimeExtras mRuntimeExtras>
<androidx.work.testing.TestListenableWorkerBuilder: androidx.work.WorkerFactory mWorkerFactory>
<androidx.work.testing.TestListenableWorkerBuilder: androidx.work.impl.utils.taskexecutor.TaskExecutor mTaskExecutor>
<androidx.work.testing.TestListenableWorkerBuilder: java.util.concurrent.Executor mExecutor>
<androidx.work.testing.TestListenableWorkerBuilder: androidx.work.ProgressUpdater mProgressUpdater>
<androidx.work.testing.TestListenableWorkerBuilder: androidx.work.ForegroundUpdater mForegroundUpdater>
<androidx.work.testing.TestListenableWorkerBuilder: int mGeneration>
    void <init>(android.content.Context, java.lang.Class)
    {
        androidx.work.testing.TestListenableWorkerBuilder r0;
        android.content.Context r1;
        java.lang.Class r2, $r3;
        java.lang.String $r4;
        java.util.UUID $r5;
        androidx.work.Data $r6;
        java.util.List $r7;
        androidx.work.WorkerFactory $r9;
        androidx.work.impl.utils.taskexecutor.TaskExecutor $r11;
        androidx.work.impl.utils.taskexecutor.SerialExecutor $r12;
        androidx.work.WorkerParameters$RuntimeExtras r15;
        androidx.work.testing.InstantWorkTaskExecutor r16;
        androidx.work.testing.TestProgressUpdater r17;
        androidx.work.testing.TestForegroundUpdater r18;
        java.util.concurrent.Executor r19;

        r0 := @this: androidx.work.testing.TestListenableWorkerBuilder;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.work.testing.TestListenableWorkerBuilder: android.content.Context mContext> = r1;

        r0.<androidx.work.testing.TestListenableWorkerBuilder: java.lang.Class mWorkerClass> = r2;

        $r3 = r0.<androidx.work.testing.TestListenableWorkerBuilder: java.lang.Class mWorkerClass>;

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        r0.<androidx.work.testing.TestListenableWorkerBuilder: java.lang.String mWorkerName> = $r4;

        $r5 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();

        r0.<androidx.work.testing.TestListenableWorkerBuilder: java.util.UUID mId> = $r5;

        $r6 = <androidx.work.Data: androidx.work.Data EMPTY>;

        r0.<androidx.work.testing.TestListenableWorkerBuilder: androidx.work.Data mInputData> = $r6;

        $r7 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<androidx.work.testing.TestListenableWorkerBuilder: java.util.List mTags> = $r7;

        r0.<androidx.work.testing.TestListenableWorkerBuilder: int mRunAttemptCount> = 1;

        r15 = new androidx.work.WorkerParameters$RuntimeExtras;

        specialinvoke r15.<androidx.work.WorkerParameters$RuntimeExtras: void <init>()>();

        r0.<androidx.work.testing.TestListenableWorkerBuilder: androidx.work.WorkerParameters$RuntimeExtras mRuntimeExtras> = r15;

        $r9 = staticinvoke <androidx.work.WorkerFactory: androidx.work.WorkerFactory getDefaultWorkerFactory()>();

        r0.<androidx.work.testing.TestListenableWorkerBuilder: androidx.work.WorkerFactory mWorkerFactory> = $r9;

        r16 = new androidx.work.testing.InstantWorkTaskExecutor;

        specialinvoke r16.<androidx.work.testing.InstantWorkTaskExecutor: void <init>()>();

        r0.<androidx.work.testing.TestListenableWorkerBuilder: androidx.work.impl.utils.taskexecutor.TaskExecutor mTaskExecutor> = r16;

        $r11 = r0.<androidx.work.testing.TestListenableWorkerBuilder: androidx.work.impl.utils.taskexecutor.TaskExecutor mTaskExecutor>;

        $r12 = interfaceinvoke $r11.<androidx.work.impl.utils.taskexecutor.TaskExecutor: androidx.work.impl.utils.taskexecutor.SerialExecutor getSerialTaskExecutor()>();

        r19 = (java.util.concurrent.Executor) $r12;

        r0.<androidx.work.testing.TestListenableWorkerBuilder: java.util.concurrent.Executor mExecutor> = r19;

        r17 = new androidx.work.testing.TestProgressUpdater;

        specialinvoke r17.<androidx.work.testing.TestProgressUpdater: void <init>()>();

        r0.<androidx.work.testing.TestListenableWorkerBuilder: androidx.work.ProgressUpdater mProgressUpdater> = r17;

        r18 = new androidx.work.testing.TestForegroundUpdater;

        specialinvoke r18.<androidx.work.testing.TestForegroundUpdater: void <init>()>();

        r0.<androidx.work.testing.TestListenableWorkerBuilder: androidx.work.ForegroundUpdater mForegroundUpdater> = r18;

        return;
    }

    android.content.Context getApplicationContext()
    {
        androidx.work.testing.TestListenableWorkerBuilder r0;
        android.content.Context $r1;

        r0 := @this: androidx.work.testing.TestListenableWorkerBuilder;

        $r1 = r0.<androidx.work.testing.TestListenableWorkerBuilder: android.content.Context mContext>;

        return $r1;
    }

    java.lang.Class getWorkerClass()
    {
        androidx.work.testing.TestListenableWorkerBuilder r0;
        java.lang.Class $r1;

        r0 := @this: androidx.work.testing.TestListenableWorkerBuilder;

        $r1 = r0.<androidx.work.testing.TestListenableWorkerBuilder: java.lang.Class mWorkerClass>;

        return $r1;
    }

    java.lang.String getWorkerName()
    {
        androidx.work.testing.TestListenableWorkerBuilder r0;
        java.lang.String $r1;

        r0 := @this: androidx.work.testing.TestListenableWorkerBuilder;

        $r1 = r0.<androidx.work.testing.TestListenableWorkerBuilder: java.lang.String mWorkerName>;

        return $r1;
    }

    androidx.work.WorkerParameters$RuntimeExtras getRuntimeExtras()
    {
        androidx.work.testing.TestListenableWorkerBuilder r0;
        androidx.work.WorkerParameters$RuntimeExtras $r1;

        r0 := @this: androidx.work.testing.TestListenableWorkerBuilder;

        $r1 = r0.<androidx.work.testing.TestListenableWorkerBuilder: androidx.work.WorkerParameters$RuntimeExtras mRuntimeExtras>;

        return $r1;
    }

    androidx.work.impl.utils.taskexecutor.TaskExecutor getTaskExecutor()
    {
        androidx.work.testing.TestListenableWorkerBuilder r0;
        androidx.work.impl.utils.taskexecutor.TaskExecutor $r1;

        r0 := @this: androidx.work.testing.TestListenableWorkerBuilder;

        $r1 = r0.<androidx.work.testing.TestListenableWorkerBuilder: androidx.work.impl.utils.taskexecutor.TaskExecutor mTaskExecutor>;

        return $r1;
    }

    java.util.concurrent.Executor getExecutor()
    {
        androidx.work.testing.TestListenableWorkerBuilder r0;
        java.util.concurrent.Executor $r1;

        r0 := @this: androidx.work.testing.TestListenableWorkerBuilder;

        $r1 = r0.<androidx.work.testing.TestListenableWorkerBuilder: java.util.concurrent.Executor mExecutor>;

        return $r1;
    }

    androidx.work.ProgressUpdater getProgressUpdater()
    {
        androidx.work.testing.TestListenableWorkerBuilder r0;
        androidx.work.ProgressUpdater $r1;

        r0 := @this: androidx.work.testing.TestListenableWorkerBuilder;

        $r1 = r0.<androidx.work.testing.TestListenableWorkerBuilder: androidx.work.ProgressUpdater mProgressUpdater>;

        return $r1;
    }

    androidx.work.ForegroundUpdater getForegroundUpdater()
    {
        androidx.work.testing.TestListenableWorkerBuilder r0;
        androidx.work.ForegroundUpdater $r1;

        r0 := @this: androidx.work.testing.TestListenableWorkerBuilder;

        $r1 = r0.<androidx.work.testing.TestListenableWorkerBuilder: androidx.work.ForegroundUpdater mForegroundUpdater>;

        return $r1;
    }

    public androidx.work.testing.TestListenableWorkerBuilder setId(java.util.UUID)
    {
        androidx.work.testing.TestListenableWorkerBuilder r0;
        java.util.UUID r1;

        r0 := @this: androidx.work.testing.TestListenableWorkerBuilder;

        r1 := @parameter0: java.util.UUID;

        r0.<androidx.work.testing.TestListenableWorkerBuilder: java.util.UUID mId> = r1;

        return r0;
    }

    public androidx.work.testing.TestListenableWorkerBuilder setInputData(androidx.work.Data)
    {
        androidx.work.testing.TestListenableWorkerBuilder r0;
        androidx.work.Data r1;

        r0 := @this: androidx.work.testing.TestListenableWorkerBuilder;

        r1 := @parameter0: androidx.work.Data;

        r0.<androidx.work.testing.TestListenableWorkerBuilder: androidx.work.Data mInputData> = r1;

        return r0;
    }

    public androidx.work.testing.TestListenableWorkerBuilder setTags(java.util.List)
    {
        androidx.work.testing.TestListenableWorkerBuilder r0;
        java.util.List r1;

        r0 := @this: androidx.work.testing.TestListenableWorkerBuilder;

        r1 := @parameter0: java.util.List;

        r0.<androidx.work.testing.TestListenableWorkerBuilder: java.util.List mTags> = r1;

        return r0;
    }

    public androidx.work.testing.TestListenableWorkerBuilder setRunAttemptCount(int)
    {
        androidx.work.testing.TestListenableWorkerBuilder r0;
        int i0;

        r0 := @this: androidx.work.testing.TestListenableWorkerBuilder;

        i0 := @parameter0: int;

        r0.<androidx.work.testing.TestListenableWorkerBuilder: int mRunAttemptCount> = i0;

        return r0;
    }

    public androidx.work.testing.TestListenableWorkerBuilder setTriggeredContentUris(java.util.List)
    {
        androidx.work.testing.TestListenableWorkerBuilder r0;
        java.util.List r1;
        androidx.work.WorkerParameters$RuntimeExtras $r2;

        r0 := @this: androidx.work.testing.TestListenableWorkerBuilder;

        r1 := @parameter0: java.util.List;

        $r2 = r0.<androidx.work.testing.TestListenableWorkerBuilder: androidx.work.WorkerParameters$RuntimeExtras mRuntimeExtras>;

        $r2.<androidx.work.WorkerParameters$RuntimeExtras: java.util.List triggeredContentUris> = r1;

        return r0;
    }

    public androidx.work.testing.TestListenableWorkerBuilder setTriggeredContentAuthorities(java.util.List)
    {
        androidx.work.testing.TestListenableWorkerBuilder r0;
        java.util.List r1;
        androidx.work.WorkerParameters$RuntimeExtras $r2;

        r0 := @this: androidx.work.testing.TestListenableWorkerBuilder;

        r1 := @parameter0: java.util.List;

        $r2 = r0.<androidx.work.testing.TestListenableWorkerBuilder: androidx.work.WorkerParameters$RuntimeExtras mRuntimeExtras>;

        $r2.<androidx.work.WorkerParameters$RuntimeExtras: java.util.List triggeredContentAuthorities> = r1;

        return r0;
    }

    public androidx.work.testing.TestListenableWorkerBuilder setNetwork(android.net.Network)
    {
        androidx.work.testing.TestListenableWorkerBuilder r0;
        android.net.Network r1;
        androidx.work.WorkerParameters$RuntimeExtras $r2;

        r0 := @this: androidx.work.testing.TestListenableWorkerBuilder;

        r1 := @parameter0: android.net.Network;

        $r2 = r0.<androidx.work.testing.TestListenableWorkerBuilder: androidx.work.WorkerParameters$RuntimeExtras mRuntimeExtras>;

        $r2.<androidx.work.WorkerParameters$RuntimeExtras: android.net.Network network> = r1;

        return r0;
    }

    public androidx.work.testing.TestListenableWorkerBuilder setWorkerFactory(androidx.work.WorkerFactory)
    {
        androidx.work.testing.TestListenableWorkerBuilder r0;
        androidx.work.WorkerFactory r1;

        r0 := @this: androidx.work.testing.TestListenableWorkerBuilder;

        r1 := @parameter0: androidx.work.WorkerFactory;

        r0.<androidx.work.testing.TestListenableWorkerBuilder: androidx.work.WorkerFactory mWorkerFactory> = r1;

        return r0;
    }

    public androidx.work.testing.TestListenableWorkerBuilder setProgressUpdater(androidx.work.ProgressUpdater)
    {
        androidx.work.testing.TestListenableWorkerBuilder r0;
        androidx.work.ProgressUpdater r1;

        r0 := @this: androidx.work.testing.TestListenableWorkerBuilder;

        r1 := @parameter0: androidx.work.ProgressUpdater;

        r0.<androidx.work.testing.TestListenableWorkerBuilder: androidx.work.ProgressUpdater mProgressUpdater> = r1;

        return r0;
    }

    public androidx.work.testing.TestListenableWorkerBuilder setForegroundUpdater(androidx.work.ForegroundUpdater)
    {
        androidx.work.testing.TestListenableWorkerBuilder r0;
        androidx.work.ForegroundUpdater r1;

        r0 := @this: androidx.work.testing.TestListenableWorkerBuilder;

        r1 := @parameter0: androidx.work.ForegroundUpdater;

        r0.<androidx.work.testing.TestListenableWorkerBuilder: androidx.work.ForegroundUpdater mForegroundUpdater> = r1;

        return r0;
    }

    androidx.work.testing.TestListenableWorkerBuilder setExecutor(java.util.concurrent.Executor)
    {
        androidx.work.testing.TestListenableWorkerBuilder r0;
        java.util.concurrent.Executor r1;

        r0 := @this: androidx.work.testing.TestListenableWorkerBuilder;

        r1 := @parameter0: java.util.concurrent.Executor;

        r0.<androidx.work.testing.TestListenableWorkerBuilder: java.util.concurrent.Executor mExecutor> = r1;

        return r0;
    }

    androidx.work.testing.TestListenableWorkerBuilder setGeneration(int)
    {
        androidx.work.testing.TestListenableWorkerBuilder r0;
        int i0;

        r0 := @this: androidx.work.testing.TestListenableWorkerBuilder;

        i0 := @parameter0: int;

        r0.<androidx.work.testing.TestListenableWorkerBuilder: int mGeneration> = i0;

        return r0;
    }

    public androidx.work.ListenableWorker build()
    {
        androidx.work.testing.TestListenableWorkerBuilder r0;
        androidx.work.WorkerParameters r1, $r4;
        androidx.work.WorkerFactory r2, $r11;
        androidx.work.ListenableWorker r3;
        java.util.UUID $r5;
        androidx.work.Data $r6;
        java.util.List $r7;
        androidx.work.WorkerParameters$RuntimeExtras $r8;
        int $i0, $i1;
        java.util.concurrent.Executor $r9;
        androidx.work.impl.utils.taskexecutor.TaskExecutor $r10;
        androidx.work.ProgressUpdater $r12;
        androidx.work.ForegroundUpdater $r13;
        android.content.Context $r14;
        java.lang.String $r15, $r27, $r31, $r33;
        java.lang.Class $r16, $r17, $r21, $r24;
        boolean $z0;
        java.lang.IllegalStateException $r18, $r28;
        java.lang.StringBuilder $r19, $r20, $r22, $r23, $r25, $r26, $r29, $r30, $r32;

        r0 := @this: androidx.work.testing.TestListenableWorkerBuilder;

        $r4 = new androidx.work.WorkerParameters;

        $r5 = r0.<androidx.work.testing.TestListenableWorkerBuilder: java.util.UUID mId>;

        $r6 = r0.<androidx.work.testing.TestListenableWorkerBuilder: androidx.work.Data mInputData>;

        $r7 = r0.<androidx.work.testing.TestListenableWorkerBuilder: java.util.List mTags>;

        $r8 = virtualinvoke r0.<androidx.work.testing.TestListenableWorkerBuilder: androidx.work.WorkerParameters$RuntimeExtras getRuntimeExtras()>();

        $i0 = r0.<androidx.work.testing.TestListenableWorkerBuilder: int mRunAttemptCount>;

        $i1 = r0.<androidx.work.testing.TestListenableWorkerBuilder: int mGeneration>;

        $r9 = virtualinvoke r0.<androidx.work.testing.TestListenableWorkerBuilder: java.util.concurrent.Executor getExecutor()>();

        $r10 = virtualinvoke r0.<androidx.work.testing.TestListenableWorkerBuilder: androidx.work.impl.utils.taskexecutor.TaskExecutor getTaskExecutor()>();

        $r11 = r0.<androidx.work.testing.TestListenableWorkerBuilder: androidx.work.WorkerFactory mWorkerFactory>;

        $r12 = virtualinvoke r0.<androidx.work.testing.TestListenableWorkerBuilder: androidx.work.ProgressUpdater getProgressUpdater()>();

        $r13 = virtualinvoke r0.<androidx.work.testing.TestListenableWorkerBuilder: androidx.work.ForegroundUpdater getForegroundUpdater()>();

        specialinvoke $r4.<androidx.work.WorkerParameters: void <init>(java.util.UUID,androidx.work.Data,java.util.Collection,androidx.work.WorkerParameters$RuntimeExtras,int,int,java.util.concurrent.Executor,androidx.work.impl.utils.taskexecutor.TaskExecutor,androidx.work.WorkerFactory,androidx.work.ProgressUpdater,androidx.work.ForegroundUpdater)>($r5, $r6, $r7, $r8, $i0, $i1, $r9, $r10, $r11, $r12, $r13);

        r1 = $r4;

        r2 = virtualinvoke r1.<androidx.work.WorkerParameters: androidx.work.WorkerFactory getWorkerFactory()>();

        $r14 = virtualinvoke r0.<androidx.work.testing.TestListenableWorkerBuilder: android.content.Context getApplicationContext()>();

        $r15 = virtualinvoke r0.<androidx.work.testing.TestListenableWorkerBuilder: java.lang.String getWorkerName()>();

        r3 = virtualinvoke r2.<androidx.work.WorkerFactory: androidx.work.ListenableWorker createWorkerWithDefaultFallback(android.content.Context,java.lang.String,androidx.work.WorkerParameters)>($r14, $r15, r1);

        if r3 != null goto label1;

        $r28 = new java.lang.IllegalStateException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not create an instance of ListenableWorker ");

        $r31 = virtualinvoke r0.<androidx.work.testing.TestListenableWorkerBuilder: java.lang.String getWorkerName()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r33);

        throw $r28;

     label1:
        $r16 = virtualinvoke r0.<androidx.work.testing.TestListenableWorkerBuilder: java.lang.Class getWorkerClass()>();

        $r17 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r16.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r17);

        if $z0 != 0 goto label2;

        $r18 = new java.lang.IllegalStateException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected worker type ");

        $r21 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (expected ");

        $r24 = virtualinvoke r0.<androidx.work.testing.TestListenableWorkerBuilder: java.lang.Class getWorkerClass()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" )");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r27);

        throw $r18;

     label2:
        return r3;
    }

    public static androidx.work.testing.TestListenableWorkerBuilder 'from'(android.content.Context, androidx.work.WorkRequest)
    {
        android.content.Context r0, $r9;
        androidx.work.WorkRequest r1;
        androidx.work.impl.model.WorkSpec r2;
        java.lang.String r3;
        java.util.ArrayList r4, $r5;
        java.util.Set $r6, $r7;
        int $i0;
        androidx.work.testing.TestListenableWorkerBuilder $r8, $r11, $r12, $r14;
        java.util.UUID $r10;
        androidx.work.Data $r13;
        java.lang.Throwable $r15, r18;
        java.lang.RuntimeException $r16;
        java.lang.Class r17;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: androidx.work.WorkRequest;

        r2 = virtualinvoke r1.<androidx.work.WorkRequest: androidx.work.impl.model.WorkSpec getWorkSpec()>();

        r3 = r2.<androidx.work.impl.model.WorkSpec: java.lang.String workerClassName>;

     label1:
        r17 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r3);

        $r5 = new java.util.ArrayList;

        $r6 = virtualinvoke r1.<androidx.work.WorkRequest: java.util.Set getTags()>();

        $i0 = interfaceinvoke $r6.<java.util.Set: int size()>();

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>($i0);

        r4 = $r5;

        $r7 = virtualinvoke r1.<androidx.work.WorkRequest: java.util.Set getTags()>();

        interfaceinvoke r4.<java.util.List: boolean addAll(java.util.Collection)>($r7);

        $r8 = new androidx.work.testing.TestListenableWorkerBuilder;

        $r9 = virtualinvoke r0.<android.content.Context: android.content.Context getApplicationContext()>();

        specialinvoke $r8.<androidx.work.testing.TestListenableWorkerBuilder: void <init>(android.content.Context,java.lang.Class)>($r9, r17);

        $r10 = virtualinvoke r1.<androidx.work.WorkRequest: java.util.UUID getId()>();

        $r11 = virtualinvoke $r8.<androidx.work.testing.TestListenableWorkerBuilder: androidx.work.testing.TestListenableWorkerBuilder setId(java.util.UUID)>($r10);

        $r12 = virtualinvoke $r11.<androidx.work.testing.TestListenableWorkerBuilder: androidx.work.testing.TestListenableWorkerBuilder setTags(java.util.List)>(r4);

        $r13 = r2.<androidx.work.impl.model.WorkSpec: androidx.work.Data input>;

        $r14 = virtualinvoke $r12.<androidx.work.testing.TestListenableWorkerBuilder: androidx.work.testing.TestListenableWorkerBuilder setInputData(androidx.work.Data)>($r13);

     label2:
        return $r14;

     label3:
        $r15 := @caughtexception;

        r18 = $r15;

        $r16 = new java.lang.RuntimeException;

        specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Cannot find class", r18);

        throw $r16;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public static androidx.work.testing.TestListenableWorkerBuilder 'from'(android.content.Context, java.lang.Class)
    {
        android.content.Context r0;
        java.lang.Class r1;
        androidx.work.testing.TestListenableWorkerBuilder $r2;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.Class;

        $r2 = new androidx.work.testing.TestListenableWorkerBuilder;

        specialinvoke $r2.<androidx.work.testing.TestListenableWorkerBuilder: void <init>(android.content.Context,java.lang.Class)>(r0, r1);

        return $r2;
    }

