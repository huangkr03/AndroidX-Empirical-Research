androidx.test.orchestrator.listeners.result.TestRunResult
<androidx.test.orchestrator.listeners.result.TestRunResult: java.lang.String LOG_TAG>
<androidx.test.orchestrator.listeners.result.TestRunResult: java.lang.String testRunName>
<androidx.test.orchestrator.listeners.result.TestRunResult: java.util.Map testResults>
<androidx.test.orchestrator.listeners.result.TestRunResult: java.util.Map runMetrics>
<androidx.test.orchestrator.listeners.result.TestRunResult: boolean isRunComplete>
<androidx.test.orchestrator.listeners.result.TestRunResult: long elapsedTime>
<androidx.test.orchestrator.listeners.result.TestRunResult: int[] statusCounts>
<androidx.test.orchestrator.listeners.result.TestRunResult: boolean isCountDirty>
<androidx.test.orchestrator.listeners.result.TestRunResult: java.lang.String runFailureError>
<androidx.test.orchestrator.listeners.result.TestRunResult: boolean aggregateMetrics>
    public int getNumAllFailedTests()
    {
        androidx.test.orchestrator.listeners.result.TestRunResult r0;
        androidx.test.orchestrator.listeners.result.TestResult$TestStatus $r1;
        int $i0;

        r0 := @this: androidx.test.orchestrator.listeners.result.TestRunResult;

        $r1 = <androidx.test.orchestrator.listeners.result.TestResult$TestStatus: androidx.test.orchestrator.listeners.result.TestResult$TestStatus FAILURE>;

        $i0 = virtualinvoke r0.<androidx.test.orchestrator.listeners.result.TestRunResult: int getNumTestsInState(androidx.test.orchestrator.listeners.result.TestResult$TestStatus)>($r1);

        return $i0;
    }

    public int getNumCompleteTests()
    {
        androidx.test.orchestrator.listeners.result.TestRunResult r0;
        int $i0, $i1, $i2;
        androidx.test.orchestrator.listeners.result.TestResult$TestStatus $r1;

        r0 := @this: androidx.test.orchestrator.listeners.result.TestRunResult;

        $i0 = virtualinvoke r0.<androidx.test.orchestrator.listeners.result.TestRunResult: int getNumTests()>();

        $r1 = <androidx.test.orchestrator.listeners.result.TestResult$TestStatus: androidx.test.orchestrator.listeners.result.TestResult$TestStatus INCOMPLETE>;

        $i1 = virtualinvoke r0.<androidx.test.orchestrator.listeners.result.TestRunResult: int getNumTestsInState(androidx.test.orchestrator.listeners.result.TestResult$TestStatus)>($r1);

        $i2 = $i0 - $i1;

        return $i2;
    }

    public int getNumTests()
    {
        androidx.test.orchestrator.listeners.result.TestRunResult r0;
        java.util.Map $r1;
        int $i0;

        r0 := @this: androidx.test.orchestrator.listeners.result.TestRunResult;

        $r1 = r0.<androidx.test.orchestrator.listeners.result.TestRunResult: java.util.Map testResults>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }

    public int getNumTestsInState(androidx.test.orchestrator.listeners.result.TestResult$TestStatus)
    {
        androidx.test.orchestrator.listeners.result.TestRunResult r0;
        androidx.test.orchestrator.listeners.result.TestResult$TestStatus r1, $r9;
        androidx.test.orchestrator.listeners.result.TestResult r2;
        boolean $z0, $z1;
        int[] $r3, $r4, $r8, $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.util.Map $r5;
        java.util.Collection $r6;
        java.lang.Object $r7;
        java.util.Iterator r11;

        r0 := @this: androidx.test.orchestrator.listeners.result.TestRunResult;

        r1 := @parameter0: androidx.test.orchestrator.listeners.result.TestResult$TestStatus;

        $z0 = r0.<androidx.test.orchestrator.listeners.result.TestRunResult: boolean isCountDirty>;

        if $z0 == 0 goto label5;

        i6 = 0;

     label1:
        $r4 = r0.<androidx.test.orchestrator.listeners.result.TestRunResult: int[] statusCounts>;

        $i2 = lengthof $r4;

        if i6 >= $i2 goto label2;

        $r10 = r0.<androidx.test.orchestrator.listeners.result.TestRunResult: int[] statusCounts>;

        $r10[i6] = 0;

        i6 = i6 + 1;

        goto label1;

     label2:
        $r5 = r0.<androidx.test.orchestrator.listeners.result.TestRunResult: java.util.Map testResults>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Collection values()>();

        r11 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r7 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        r2 = (androidx.test.orchestrator.listeners.result.TestResult) $r7;

        $r8 = r0.<androidx.test.orchestrator.listeners.result.TestRunResult: int[] statusCounts>;

        $r9 = virtualinvoke r2.<androidx.test.orchestrator.listeners.result.TestResult: androidx.test.orchestrator.listeners.result.TestResult$TestStatus getStatus()>();

        $i3 = virtualinvoke $r9.<androidx.test.orchestrator.listeners.result.TestResult$TestStatus: int ordinal()>();

        $i4 = $r8[$i3];

        $i5 = $i4 + 1;

        $r8[$i3] = $i5;

        goto label3;

     label4:
        r0.<androidx.test.orchestrator.listeners.result.TestRunResult: boolean isCountDirty> = 0;

     label5:
        $r3 = r0.<androidx.test.orchestrator.listeners.result.TestRunResult: int[] statusCounts>;

        $i0 = virtualinvoke r1.<androidx.test.orchestrator.listeners.result.TestResult$TestStatus: int ordinal()>();

        $i1 = $r3[$i0];

        return $i1;
    }

    public long getElapsedTime()
    {
        androidx.test.orchestrator.listeners.result.TestRunResult r0;
        long $l0;

        r0 := @this: androidx.test.orchestrator.listeners.result.TestRunResult;

        $l0 = r0.<androidx.test.orchestrator.listeners.result.TestRunResult: long elapsedTime>;

        return $l0;
    }

    private java.lang.String combineValues(java.lang.String, java.lang.String)
    {
        androidx.test.orchestrator.listeners.result.TestRunResult r0;
        java.lang.String r1, r2, $r3, $r6;
        long $l0, $l1, $l2, $l3, $l4;
        java.lang.Throwable $r4, $r5, r9, r12;
        double $d0, $d1, $d2, $d3, $d4;
        java.lang.Long r7, r8;
        java.lang.Double r10, r11;

        r0 := @this: androidx.test.orchestrator.listeners.result.TestRunResult;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        if r1 == null goto label7;

     label1:
        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r1);

        r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r2);

        r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $l2 = virtualinvoke r7.<java.lang.Long: long longValue()>();

        $l3 = virtualinvoke r8.<java.lang.Long: long longValue()>();

        $l4 = $l2 + $l3;

        $r3 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l4);

     label2:
        return $r3;

     label3:
        $r5 := @caughtexception;

        r9 = $r5;

     label4:
        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r1);

        r10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r2);

        r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $d2 = virtualinvoke r10.<java.lang.Double: double doubleValue()>();

        $d3 = virtualinvoke r11.<java.lang.Double: double doubleValue()>();

        $d4 = $d2 + $d3;

        $r6 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d4);

     label5:
        return $r6;

     label6:
        $r4 := @caughtexception;

        r12 = $r4;

     label7:
        return r2;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
        catch java.lang.NumberFormatException from label4 to label5 with label6;
    }

    public java.lang.String getName()
    {
        androidx.test.orchestrator.listeners.result.TestRunResult r0;
        java.lang.String $r1;

        r0 := @this: androidx.test.orchestrator.listeners.result.TestRunResult;

        $r1 = r0.<androidx.test.orchestrator.listeners.result.TestRunResult: java.lang.String testRunName>;

        return $r1;
    }

    public java.lang.String getRunFailureMessage()
    {
        androidx.test.orchestrator.listeners.result.TestRunResult r0;
        java.lang.String $r1;

        r0 := @this: androidx.test.orchestrator.listeners.result.TestRunResult;

        $r1 = r0.<androidx.test.orchestrator.listeners.result.TestRunResult: java.lang.String runFailureError>;

        return $r1;
    }

    public java.lang.String getTextSummary()
    {
        androidx.test.orchestrator.listeners.result.TestRunResult r0;
        java.lang.StringBuilder r1, $r4;
        androidx.test.orchestrator.listeners.result.TestResult$TestStatus[] r2;
        int i0, i1, $i2, i3;
        androidx.test.orchestrator.listeners.result.TestResult$TestStatus r3;
        java.lang.Object[] $r5, $r10;
        java.lang.Integer $r6, $r13;
        java.lang.String $r7, $r9, $r11, $r12, $r14;

        r0 := @this: androidx.test.orchestrator.listeners.result.TestRunResult;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        r1 = $r4;

        $r5 = newarray (java.lang.Object)[1];

        $i2 = virtualinvoke r0.<androidx.test.orchestrator.listeners.result.TestRunResult: int getNumTests()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r5[0] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Total tests %d, ", $r5);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        r2 = staticinvoke <androidx.test.orchestrator.listeners.result.TestResult$TestStatus: androidx.test.orchestrator.listeners.result.TestResult$TestStatus[] values()>();

        i0 = lengthof r2;

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        r3 = r2[i3];

        i1 = virtualinvoke r0.<androidx.test.orchestrator.listeners.result.TestRunResult: int getNumTestsInState(androidx.test.orchestrator.listeners.result.TestResult$TestStatus)>(r3);

        if i1 <= 0 goto label2;

        $r10 = newarray (java.lang.Object)[2];

        $r11 = virtualinvoke r3.<androidx.test.orchestrator.listeners.result.TestResult$TestStatus: java.lang.String toString()>();

        $r12 = virtualinvoke $r11.<java.lang.String: java.lang.String toLowerCase()>();

        $r10[0] = $r12;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r10[1] = $r13;

        $r14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s %d, ", $r10);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public java.util.Map getRunMetrics()
    {
        androidx.test.orchestrator.listeners.result.TestRunResult r0;
        java.util.Map $r1;

        r0 := @this: androidx.test.orchestrator.listeners.result.TestRunResult;

        $r1 = r0.<androidx.test.orchestrator.listeners.result.TestRunResult: java.util.Map runMetrics>;

        return $r1;
    }

    public java.util.Map getTestResults()
    {
        androidx.test.orchestrator.listeners.result.TestRunResult r0;
        java.util.Map $r1;

        r0 := @this: androidx.test.orchestrator.listeners.result.TestRunResult;

        $r1 = r0.<androidx.test.orchestrator.listeners.result.TestRunResult: java.util.Map testResults>;

        return $r1;
    }

    public java.util.Set getCompletedTests()
    {
        androidx.test.orchestrator.listeners.result.TestRunResult r0;
        java.util.LinkedHashSet r1, $r4;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.util.Map $r5;
        java.util.Set $r6;
        boolean $z0, $z1;
        java.lang.Object $r7, $r8, $r12;
        androidx.test.orchestrator.listeners.result.TestResult $r9;
        androidx.test.orchestrator.listeners.result.TestResult$TestStatus $r10, $r11;
        androidx.test.orchestrator.listeners.result.TestIdentifier $r13;

        r0 := @this: androidx.test.orchestrator.listeners.result.TestRunResult;

        $r4 = new java.util.LinkedHashSet;

        specialinvoke $r4.<java.util.LinkedHashSet: void <init>()>();

        r1 = $r4;

        $r5 = virtualinvoke r0.<androidx.test.orchestrator.listeners.result.TestRunResult: java.util.Map getTestResults()>();

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r7;

        $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r9 = (androidx.test.orchestrator.listeners.result.TestResult) $r8;

        $r10 = virtualinvoke $r9.<androidx.test.orchestrator.listeners.result.TestResult: androidx.test.orchestrator.listeners.result.TestResult$TestStatus getStatus()>();

        $r11 = <androidx.test.orchestrator.listeners.result.TestResult$TestStatus: androidx.test.orchestrator.listeners.result.TestResult$TestStatus INCOMPLETE>;

        $z1 = virtualinvoke $r10.<androidx.test.orchestrator.listeners.result.TestResult$TestStatus: boolean equals(java.lang.Object)>($r11);

        if $z1 != 0 goto label2;

        $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r13 = (androidx.test.orchestrator.listeners.result.TestIdentifier) $r12;

        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>($r13);

     label2:
        goto label1;

     label3:
        return r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        $r0 = class "Landroidx/test/orchestrator/listeners/result/TestRunResult;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <androidx.test.orchestrator.listeners.result.TestRunResult: java.lang.String LOG_TAG> = $r1;

        return;
    }

    public void <init>()
    {
        androidx.test.orchestrator.listeners.result.TestRunResult r0;
        java.util.LinkedHashMap $r1;
        java.util.HashMap $r2;
        androidx.test.orchestrator.listeners.result.TestResult$TestStatus[] $r3;
        int $i0;
        int[] $r4;

        r0 := @this: androidx.test.orchestrator.listeners.result.TestRunResult;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>();

        r0.<androidx.test.orchestrator.listeners.result.TestRunResult: java.util.Map testResults> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<androidx.test.orchestrator.listeners.result.TestRunResult: java.util.Map runMetrics> = $r2;

        r0.<androidx.test.orchestrator.listeners.result.TestRunResult: boolean isRunComplete> = 0;

        r0.<androidx.test.orchestrator.listeners.result.TestRunResult: long elapsedTime> = 0L;

        $r3 = staticinvoke <androidx.test.orchestrator.listeners.result.TestResult$TestStatus: androidx.test.orchestrator.listeners.result.TestResult$TestStatus[] values()>();

        $i0 = lengthof $r3;

        $r4 = newarray (int)[$i0];

        r0.<androidx.test.orchestrator.listeners.result.TestRunResult: int[] statusCounts> = $r4;

        r0.<androidx.test.orchestrator.listeners.result.TestRunResult: boolean isCountDirty> = 1;

        r0.<androidx.test.orchestrator.listeners.result.TestRunResult: java.lang.String runFailureError> = null;

        r0.<androidx.test.orchestrator.listeners.result.TestRunResult: boolean aggregateMetrics> = 0;

        r0.<androidx.test.orchestrator.listeners.result.TestRunResult: java.lang.String testRunName> = "not started";

        return;
    }

    private void addTestResult(androidx.test.orchestrator.listeners.result.TestIdentifier, androidx.test.orchestrator.listeners.result.TestResult)
    {
        androidx.test.orchestrator.listeners.result.TestRunResult r0;
        androidx.test.orchestrator.listeners.result.TestIdentifier r1;
        androidx.test.orchestrator.listeners.result.TestResult r2;
        java.util.Map $r3;

        r0 := @this: androidx.test.orchestrator.listeners.result.TestRunResult;

        r1 := @parameter0: androidx.test.orchestrator.listeners.result.TestIdentifier;

        r2 := @parameter1: androidx.test.orchestrator.listeners.result.TestResult;

        r0.<androidx.test.orchestrator.listeners.result.TestRunResult: boolean isCountDirty> = 1;

        $r3 = r0.<androidx.test.orchestrator.listeners.result.TestRunResult: java.util.Map testResults>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public void setAggregateMetrics(boolean)
    {
        androidx.test.orchestrator.listeners.result.TestRunResult r0;
        boolean z0;

        r0 := @this: androidx.test.orchestrator.listeners.result.TestRunResult;

        z0 := @parameter0: boolean;

        r0.<androidx.test.orchestrator.listeners.result.TestRunResult: boolean aggregateMetrics> = z0;

        return;
    }

    public void setRunComplete(boolean)
    {
        androidx.test.orchestrator.listeners.result.TestRunResult r0;
        boolean z0;

        r0 := @this: androidx.test.orchestrator.listeners.result.TestRunResult;

        z0 := @parameter0: boolean;

        r0.<androidx.test.orchestrator.listeners.result.TestRunResult: boolean isRunComplete> = z0;

        return;
    }

    public void testAssumptionFailure(androidx.test.orchestrator.listeners.result.TestIdentifier, java.lang.String)
    {
        androidx.test.orchestrator.listeners.result.TestRunResult r0;
        androidx.test.orchestrator.listeners.result.TestIdentifier r1;
        java.lang.String r2;
        androidx.test.orchestrator.listeners.result.TestResult$TestStatus $r3;

        r0 := @this: androidx.test.orchestrator.listeners.result.TestRunResult;

        r1 := @parameter0: androidx.test.orchestrator.listeners.result.TestIdentifier;

        r2 := @parameter1: java.lang.String;

        $r3 = <androidx.test.orchestrator.listeners.result.TestResult$TestStatus: androidx.test.orchestrator.listeners.result.TestResult$TestStatus ASSUMPTION_FAILURE>;

        specialinvoke r0.<androidx.test.orchestrator.listeners.result.TestRunResult: void updateTestResult(androidx.test.orchestrator.listeners.result.TestIdentifier,androidx.test.orchestrator.listeners.result.TestResult$TestStatus,java.lang.String)>(r1, $r3, r2);

        return;
    }

    public void testEnded(androidx.test.orchestrator.listeners.result.TestIdentifier, java.util.Map)
    {
        androidx.test.orchestrator.listeners.result.TestRunResult r0;
        androidx.test.orchestrator.listeners.result.TestIdentifier r1;
        java.util.Map r2, $r3;
        java.lang.Object $r4;
        androidx.test.orchestrator.listeners.result.TestResult$TestStatus $r5, $r6, $r7;
        boolean $z0;
        long $l0;
        androidx.test.orchestrator.listeners.result.TestResult $r9, r10;

        r0 := @this: androidx.test.orchestrator.listeners.result.TestRunResult;

        r1 := @parameter0: androidx.test.orchestrator.listeners.result.TestIdentifier;

        r2 := @parameter1: java.util.Map;

        $r3 = r0.<androidx.test.orchestrator.listeners.result.TestRunResult: java.util.Map testResults>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r10 = (androidx.test.orchestrator.listeners.result.TestResult) $r4;

        if r10 != null goto label1;

        $r9 = new androidx.test.orchestrator.listeners.result.TestResult;

        specialinvoke $r9.<androidx.test.orchestrator.listeners.result.TestResult: void <init>()>();

        r10 = $r9;

     label1:
        $r5 = virtualinvoke r10.<androidx.test.orchestrator.listeners.result.TestResult: androidx.test.orchestrator.listeners.result.TestResult$TestStatus getStatus()>();

        $r6 = <androidx.test.orchestrator.listeners.result.TestResult$TestStatus: androidx.test.orchestrator.listeners.result.TestResult$TestStatus INCOMPLETE>;

        $z0 = virtualinvoke $r5.<androidx.test.orchestrator.listeners.result.TestResult$TestStatus: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label2;

        $r7 = <androidx.test.orchestrator.listeners.result.TestResult$TestStatus: androidx.test.orchestrator.listeners.result.TestResult$TestStatus PASSED>;

        virtualinvoke r10.<androidx.test.orchestrator.listeners.result.TestResult: androidx.test.orchestrator.listeners.result.TestResult setStatus(androidx.test.orchestrator.listeners.result.TestResult$TestStatus)>($r7);

     label2:
        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        virtualinvoke r10.<androidx.test.orchestrator.listeners.result.TestResult: void setEndTime(long)>($l0);

        virtualinvoke r10.<androidx.test.orchestrator.listeners.result.TestResult: void setMetrics(java.util.Map)>(r2);

        specialinvoke r0.<androidx.test.orchestrator.listeners.result.TestRunResult: void addTestResult(androidx.test.orchestrator.listeners.result.TestIdentifier,androidx.test.orchestrator.listeners.result.TestResult)>(r1, r10);

        return;
    }

    public void testFailed(androidx.test.orchestrator.listeners.result.TestIdentifier, java.lang.String)
    {
        androidx.test.orchestrator.listeners.result.TestRunResult r0;
        androidx.test.orchestrator.listeners.result.TestIdentifier r1;
        java.lang.String r2;
        androidx.test.orchestrator.listeners.result.TestResult$TestStatus $r3;

        r0 := @this: androidx.test.orchestrator.listeners.result.TestRunResult;

        r1 := @parameter0: androidx.test.orchestrator.listeners.result.TestIdentifier;

        r2 := @parameter1: java.lang.String;

        $r3 = <androidx.test.orchestrator.listeners.result.TestResult$TestStatus: androidx.test.orchestrator.listeners.result.TestResult$TestStatus FAILURE>;

        specialinvoke r0.<androidx.test.orchestrator.listeners.result.TestRunResult: void updateTestResult(androidx.test.orchestrator.listeners.result.TestIdentifier,androidx.test.orchestrator.listeners.result.TestResult$TestStatus,java.lang.String)>(r1, $r3, r2);

        return;
    }

    public void testIgnored(androidx.test.orchestrator.listeners.result.TestIdentifier)
    {
        androidx.test.orchestrator.listeners.result.TestRunResult r0;
        androidx.test.orchestrator.listeners.result.TestIdentifier r1;
        androidx.test.orchestrator.listeners.result.TestResult$TestStatus $r2;

        r0 := @this: androidx.test.orchestrator.listeners.result.TestRunResult;

        r1 := @parameter0: androidx.test.orchestrator.listeners.result.TestIdentifier;

        $r2 = <androidx.test.orchestrator.listeners.result.TestResult$TestStatus: androidx.test.orchestrator.listeners.result.TestResult$TestStatus IGNORED>;

        specialinvoke r0.<androidx.test.orchestrator.listeners.result.TestRunResult: void updateTestResult(androidx.test.orchestrator.listeners.result.TestIdentifier,androidx.test.orchestrator.listeners.result.TestResult$TestStatus,java.lang.String)>(r1, $r2, null);

        return;
    }

    public void testRunEnded(long, java.util.Map)
    {
        androidx.test.orchestrator.listeners.result.TestRunResult r0;
        long l0, $l1, $l2;
        java.util.Map r1, $r6, $r10, $r15;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.lang.String r4, r5, $r14, $r17;
        boolean $z0, $z1;
        java.util.Set $r7;
        java.lang.Object $r9, $r11, $r12, $r13, $r16;

        r0 := @this: androidx.test.orchestrator.listeners.result.TestRunResult;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.Map;

        $z0 = r0.<androidx.test.orchestrator.listeners.result.TestRunResult: boolean aggregateMetrics>;

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r9;

        $r10 = r0.<androidx.test.orchestrator.listeners.result.TestRunResult: java.util.Map runMetrics>;

        $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r12 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>($r11);

        r4 = (java.lang.String) $r12;

        $r13 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r14 = (java.lang.String) $r13;

        r5 = specialinvoke r0.<androidx.test.orchestrator.listeners.result.TestRunResult: java.lang.String combineValues(java.lang.String,java.lang.String)>(r4, $r14);

        $r15 = r0.<androidx.test.orchestrator.listeners.result.TestRunResult: java.util.Map runMetrics>;

        $r16 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r17 = (java.lang.String) $r16;

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, r5);

        goto label1;

     label2:
        goto label4;

     label3:
        $r6 = r0.<androidx.test.orchestrator.listeners.result.TestRunResult: java.util.Map runMetrics>;

        interfaceinvoke $r6.<java.util.Map: void putAll(java.util.Map)>(r1);

     label4:
        $l1 = r0.<androidx.test.orchestrator.listeners.result.TestRunResult: long elapsedTime>;

        $l2 = $l1 + l0;

        r0.<androidx.test.orchestrator.listeners.result.TestRunResult: long elapsedTime> = $l2;

        r0.<androidx.test.orchestrator.listeners.result.TestRunResult: boolean isRunComplete> = 1;

        return;
    }

    public void testRunFailed(java.lang.String)
    {
        androidx.test.orchestrator.listeners.result.TestRunResult r0;
        java.lang.String r1;

        r0 := @this: androidx.test.orchestrator.listeners.result.TestRunResult;

        r1 := @parameter0: java.lang.String;

        r0.<androidx.test.orchestrator.listeners.result.TestRunResult: java.lang.String runFailureError> = r1;

        return;
    }

    public void testRunStarted(java.lang.String, int)
    {
        androidx.test.orchestrator.listeners.result.TestRunResult r0;
        java.lang.String r1;
        int i0;

        r0 := @this: androidx.test.orchestrator.listeners.result.TestRunResult;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r0.<androidx.test.orchestrator.listeners.result.TestRunResult: java.lang.String testRunName> = r1;

        r0.<androidx.test.orchestrator.listeners.result.TestRunResult: boolean isRunComplete> = 0;

        r0.<androidx.test.orchestrator.listeners.result.TestRunResult: java.lang.String runFailureError> = null;

        return;
    }

    public void testRunStopped(long)
    {
        androidx.test.orchestrator.listeners.result.TestRunResult r0;
        long l0, $l1, $l2;

        r0 := @this: androidx.test.orchestrator.listeners.result.TestRunResult;

        l0 := @parameter0: long;

        $l1 = r0.<androidx.test.orchestrator.listeners.result.TestRunResult: long elapsedTime>;

        $l2 = $l1 + l0;

        r0.<androidx.test.orchestrator.listeners.result.TestRunResult: long elapsedTime> = $l2;

        r0.<androidx.test.orchestrator.listeners.result.TestRunResult: boolean isRunComplete> = 1;

        return;
    }

    public void testStarted(androidx.test.orchestrator.listeners.result.TestIdentifier)
    {
        androidx.test.orchestrator.listeners.result.TestRunResult r0;
        androidx.test.orchestrator.listeners.result.TestIdentifier r1;
        androidx.test.orchestrator.listeners.result.TestResult $r2;

        r0 := @this: androidx.test.orchestrator.listeners.result.TestRunResult;

        r1 := @parameter0: androidx.test.orchestrator.listeners.result.TestIdentifier;

        $r2 = new androidx.test.orchestrator.listeners.result.TestResult;

        specialinvoke $r2.<androidx.test.orchestrator.listeners.result.TestResult: void <init>()>();

        specialinvoke r0.<androidx.test.orchestrator.listeners.result.TestRunResult: void addTestResult(androidx.test.orchestrator.listeners.result.TestIdentifier,androidx.test.orchestrator.listeners.result.TestResult)>(r1, $r2);

        return;
    }

    private void updateTestResult(androidx.test.orchestrator.listeners.result.TestIdentifier, androidx.test.orchestrator.listeners.result.TestResult$TestStatus, java.lang.String)
    {
        androidx.test.orchestrator.listeners.result.TestRunResult r0;
        androidx.test.orchestrator.listeners.result.TestIdentifier r1;
        androidx.test.orchestrator.listeners.result.TestResult$TestStatus r2;
        java.lang.String r3, $r8, $r9, $r10;
        java.util.Map $r4;
        java.lang.Object $r5;
        java.lang.Object[] $r7;
        androidx.test.orchestrator.listeners.result.TestResult $r11, r12;

        r0 := @this: androidx.test.orchestrator.listeners.result.TestRunResult;

        r1 := @parameter0: androidx.test.orchestrator.listeners.result.TestIdentifier;

        r2 := @parameter1: androidx.test.orchestrator.listeners.result.TestResult$TestStatus;

        r3 := @parameter2: java.lang.String;

        $r4 = r0.<androidx.test.orchestrator.listeners.result.TestRunResult: java.util.Map testResults>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r12 = (androidx.test.orchestrator.listeners.result.TestResult) $r5;

        if r12 != null goto label1;

        $r8 = <androidx.test.orchestrator.listeners.result.TestRunResult: java.lang.String LOG_TAG>;

        $r7 = newarray (java.lang.Object)[3];

        $r9 = virtualinvoke r2.<androidx.test.orchestrator.listeners.result.TestResult$TestStatus: java.lang.String name()>();

        $r7[0] = $r9;

        $r7[1] = r1;

        $r7[2] = r3;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("received test event %s without test start for %s. trace: %s", $r7);

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r8, $r10);

        $r11 = new androidx.test.orchestrator.listeners.result.TestResult;

        specialinvoke $r11.<androidx.test.orchestrator.listeners.result.TestResult: void <init>()>();

        r12 = $r11;

     label1:
        virtualinvoke r12.<androidx.test.orchestrator.listeners.result.TestResult: androidx.test.orchestrator.listeners.result.TestResult setStatus(androidx.test.orchestrator.listeners.result.TestResult$TestStatus)>(r2);

        virtualinvoke r12.<androidx.test.orchestrator.listeners.result.TestResult: void setStackTrace(java.lang.String)>(r3);

        specialinvoke r0.<androidx.test.orchestrator.listeners.result.TestRunResult: void addTestResult(androidx.test.orchestrator.listeners.result.TestIdentifier,androidx.test.orchestrator.listeners.result.TestResult)>(r1, r12);

        return;
    }

    public boolean hasFailedTests()
    {
        androidx.test.orchestrator.listeners.result.TestRunResult r0;
        int $i0;
        boolean $z0;

        r0 := @this: androidx.test.orchestrator.listeners.result.TestRunResult;

        $i0 = virtualinvoke r0.<androidx.test.orchestrator.listeners.result.TestRunResult: int getNumAllFailedTests()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isRunComplete()
    {
        androidx.test.orchestrator.listeners.result.TestRunResult r0;
        boolean $z0;

        r0 := @this: androidx.test.orchestrator.listeners.result.TestRunResult;

        $z0 = r0.<androidx.test.orchestrator.listeners.result.TestRunResult: boolean isRunComplete>;

        return $z0;
    }

    public boolean isRunFailure()
    {
        androidx.test.orchestrator.listeners.result.TestRunResult r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: androidx.test.orchestrator.listeners.result.TestRunResult;

        $r1 = r0.<androidx.test.orchestrator.listeners.result.TestRunResult: java.lang.String runFailureError>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

