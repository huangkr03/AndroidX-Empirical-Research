kotlinx.coroutines.internal.ResizableAtomicArray
<kotlinx.coroutines.internal.ResizableAtomicArray: java.util.concurrent.atomic.AtomicReferenceArray array>
    public void <init>(int)
    {
        kotlinx.coroutines.internal.ResizableAtomicArray $r0;
        int $i0;
        java.util.concurrent.atomic.AtomicReferenceArray $r1;

        $r0 := @this: kotlinx.coroutines.internal.ResizableAtomicArray;

        $i0 := @parameter0: int;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicReferenceArray;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(int)>($i0);

        $r0.<kotlinx.coroutines.internal.ResizableAtomicArray: java.util.concurrent.atomic.AtomicReferenceArray array> = $r1;

        return;
    }

    public final int currentLength()
    {
        kotlinx.coroutines.internal.ResizableAtomicArray $r0;
        int $i0;
        java.util.concurrent.atomic.AtomicReferenceArray $r1;

        $r0 := @this: kotlinx.coroutines.internal.ResizableAtomicArray;

        $r1 = $r0.<kotlinx.coroutines.internal.ResizableAtomicArray: java.util.concurrent.atomic.AtomicReferenceArray array>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();

        return $i0;
    }

    public final java.lang.Object get(int)
    {
        kotlinx.coroutines.internal.ResizableAtomicArray $r0;
        java.util.concurrent.atomic.AtomicReferenceArray $r1;
        int $i0, $i1;
        java.lang.Object $r2;

        $r0 := @this: kotlinx.coroutines.internal.ResizableAtomicArray;

        $i0 := @parameter0: int;

        $r1 = $r0.<kotlinx.coroutines.internal.ResizableAtomicArray: java.util.concurrent.atomic.AtomicReferenceArray array>;

        $i1 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();

        if $i0 >= $i1 goto label1;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i0);

        return $r2;

     label1:
        return null;
    }

    public final void setSynchronized(int, java.lang.Object)
    {
        kotlinx.coroutines.internal.ResizableAtomicArray $r0;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r1, $r4;
        java.util.concurrent.atomic.AtomicReferenceArray $r2, $r3;

        $r0 := @this: kotlinx.coroutines.internal.ResizableAtomicArray;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Object;

        $r2 = $r0.<kotlinx.coroutines.internal.ResizableAtomicArray: java.util.concurrent.atomic.AtomicReferenceArray array>;

        $i1 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();

        if $i0 >= $i1 goto label1;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>($i0, $r1);

        return;

     label1:
        $r3 = new java.util.concurrent.atomic.AtomicReferenceArray;

        $i2 = $i0 + 1;

        $i3 = $i1 + $i1;

        $i2 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtLeast(int,int)>($i2, $i3);

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(int)>($i2);

        $i2 = 0;

     label2:
        if $i2 >= $i1 goto label3;

        $r4 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i2);

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>($i2, $r4);

        $i2 = $i2 + 1;

        goto label2;

     label3:
        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>($i0, $r1);

        $r0.<kotlinx.coroutines.internal.ResizableAtomicArray: java.util.concurrent.atomic.AtomicReferenceArray array> = $r3;

        return;
    }

