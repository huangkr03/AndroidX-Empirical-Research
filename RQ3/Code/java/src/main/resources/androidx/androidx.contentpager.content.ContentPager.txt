androidx.contentpager.content.ContentPager
<androidx.contentpager.content.ContentPager: java.lang.String CURSOR_DISPOSITION>
<androidx.contentpager.content.ContentPager: int CURSOR_DISPOSITION_COPIED>
<androidx.contentpager.content.ContentPager: int CURSOR_DISPOSITION_PAGED>
<androidx.contentpager.content.ContentPager: int CURSOR_DISPOSITION_REPAGED>
<androidx.contentpager.content.ContentPager: int CURSOR_DISPOSITION_WRAPPED>
<androidx.contentpager.content.ContentPager: java.lang.String EXTRA_HONORED_ARGS>
<androidx.contentpager.content.ContentPager: java.lang.String EXTRA_TOTAL_COUNT>
<androidx.contentpager.content.ContentPager: java.lang.String QUERY_ARG_OFFSET>
<androidx.contentpager.content.ContentPager: java.lang.String QUERY_ARG_LIMIT>
<androidx.contentpager.content.ContentPager: java.lang.String EXTRA_REQUESTED_LIMIT>
<androidx.contentpager.content.ContentPager: java.lang.String EXTRA_SUGGESTED_LIMIT>
<androidx.contentpager.content.ContentPager: boolean DEBUG>
<androidx.contentpager.content.ContentPager: java.lang.String TAG>
<androidx.contentpager.content.ContentPager: int DEFAULT_CURSOR_CACHE_SIZE>
<androidx.contentpager.content.ContentPager: androidx.contentpager.content.ContentPager$QueryRunner mQueryRunner>
<androidx.contentpager.content.ContentPager: androidx.contentpager.content.ContentPager$QueryRunner$Callback mQueryCallback>
<androidx.contentpager.content.ContentPager: android.content.ContentResolver mResolver>
<androidx.contentpager.content.ContentPager: java.lang.Object mContentLock>
<androidx.contentpager.content.ContentPager: java.util.Set mActiveQueries>
<androidx.contentpager.content.ContentPager: androidx.contentpager.content.ContentPager$CursorCache mCursorCache>
<androidx.contentpager.content.ContentPager: androidx.contentpager.content.ContentPager$Stats mStats>
    public void <init>(android.content.ContentResolver, androidx.contentpager.content.ContentPager$QueryRunner)
    {
        androidx.contentpager.content.ContentPager r0;
        android.content.ContentResolver r1;
        androidx.contentpager.content.ContentPager$QueryRunner r2;

        r0 := @this: androidx.contentpager.content.ContentPager;

        r1 := @parameter0: android.content.ContentResolver;

        r2 := @parameter1: androidx.contentpager.content.ContentPager$QueryRunner;

        specialinvoke r0.<androidx.contentpager.content.ContentPager: void <init>(android.content.ContentResolver,androidx.contentpager.content.ContentPager$QueryRunner,int)>(r1, r2, 1);

        return;
    }

    public void <init>(android.content.ContentResolver, androidx.contentpager.content.ContentPager$QueryRunner, int)
    {
        androidx.contentpager.content.ContentPager r0;
        android.content.ContentResolver r1;
        androidx.contentpager.content.ContentPager$QueryRunner r2;
        int i0;
        java.lang.Object $r3;
        java.util.HashSet $r4;
        androidx.contentpager.content.ContentPager$Stats $r5;
        androidx.contentpager.content.ContentPager$1 $r6;
        androidx.contentpager.content.ContentPager$CursorCache $r7;
        boolean $z0, $z1, $z2;

        r0 := @this: androidx.contentpager.content.ContentPager;

        r1 := @parameter0: android.content.ContentResolver;

        r2 := @parameter1: androidx.contentpager.content.ContentPager$QueryRunner;

        i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<androidx.contentpager.content.ContentPager: java.lang.Object mContentLock> = $r3;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        r0.<androidx.contentpager.content.ContentPager: java.util.Set mActiveQueries> = $r4;

        $r5 = new androidx.contentpager.content.ContentPager$Stats;

        specialinvoke $r5.<androidx.contentpager.content.ContentPager$Stats: void <init>()>();

        r0.<androidx.contentpager.content.ContentPager: androidx.contentpager.content.ContentPager$Stats mStats> = $r5;

        if r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.core.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "\'resolver\' argument cannot be null.");

        if r2 == null goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <androidx.core.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "\'queryRunner\' argument cannot be null.");

        if i0 <= 0 goto label5;

        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        staticinvoke <androidx.core.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z2, "\'cursorCacheSize\' argument must be greater than 0.");

        r0.<androidx.contentpager.content.ContentPager: android.content.ContentResolver mResolver> = r1;

        r0.<androidx.contentpager.content.ContentPager: androidx.contentpager.content.ContentPager$QueryRunner mQueryRunner> = r2;

        $r6 = new androidx.contentpager.content.ContentPager$1;

        specialinvoke $r6.<androidx.contentpager.content.ContentPager$1: void <init>(androidx.contentpager.content.ContentPager)>(r0);

        r0.<androidx.contentpager.content.ContentPager: androidx.contentpager.content.ContentPager$QueryRunner$Callback mQueryCallback> = $r6;

        $r7 = new androidx.contentpager.content.ContentPager$CursorCache;

        specialinvoke $r7.<androidx.contentpager.content.ContentPager$CursorCache: void <init>(int)>(i0);

        r0.<androidx.contentpager.content.ContentPager: androidx.contentpager.content.ContentPager$CursorCache mCursorCache> = $r7;

        return;
    }

    public androidx.contentpager.content.Query query(android.net.Uri, java.lang.String[], android.os.Bundle, android.os.CancellationSignal, androidx.contentpager.content.ContentPager$ContentCallback)
    {
        androidx.contentpager.content.ContentPager r0;
        android.net.Uri r1;
        java.lang.String[] r2;
        android.os.Bundle r3;
        android.os.CancellationSignal r4;
        androidx.contentpager.content.ContentPager$ContentCallback r5;
        androidx.contentpager.content.Query r6, $r9;
        java.lang.Object r7, $r11;
        java.lang.Throwable r8, $r15;
        androidx.contentpager.content.ContentPager$QueryRunner $r10, $r14;
        boolean $z0, $z2, $z3, $z4;
        java.util.Set $r12;
        androidx.contentpager.content.ContentPager$QueryRunner$Callback $r13;

        r0 := @this: androidx.contentpager.content.ContentPager;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: android.os.Bundle;

        r4 := @parameter3: android.os.CancellationSignal;

        r5 := @parameter4: androidx.contentpager.content.ContentPager$ContentCallback;

        if r1 == null goto label01;

        $z2 = 1;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        staticinvoke <androidx.core.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z2, "\'uri\' argument cannot be null.");

        if r3 == null goto label03;

        $z3 = 1;

        goto label04;

     label03:
        $z3 = 0;

     label04:
        staticinvoke <androidx.core.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z3, "\'queryArgs\' argument cannot be null.");

        if r5 == null goto label05;

        $z4 = 1;

        goto label06;

     label05:
        $z4 = 0;

     label06:
        staticinvoke <androidx.core.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z4, "\'callback\' argument cannot be null.");

        $r9 = new androidx.contentpager.content.Query;

        specialinvoke $r9.<androidx.contentpager.content.Query: void <init>(android.net.Uri,java.lang.String[],android.os.Bundle,android.os.CancellationSignal,androidx.contentpager.content.ContentPager$ContentCallback)>(r1, r2, r3, r4, r5);

        r6 = $r9;

        $r10 = r0.<androidx.contentpager.content.ContentPager: androidx.contentpager.content.ContentPager$QueryRunner mQueryRunner>;

        $z0 = interfaceinvoke $r10.<androidx.contentpager.content.ContentPager$QueryRunner: boolean isRunning(androidx.contentpager.content.Query)>(r6);

        if $z0 != 0 goto label12;

        $r11 = r0.<androidx.contentpager.content.ContentPager: java.lang.Object mContentLock>;

        r7 = $r11;

        entermonitor $r11;

     label07:
        $r12 = r0.<androidx.contentpager.content.ContentPager: java.util.Set mActiveQueries>;

        interfaceinvoke $r12.<java.util.Set: boolean add(java.lang.Object)>(r6);

        exitmonitor r7;

     label08:
        goto label11;

     label09:
        $r15 := @caughtexception;

        r8 = $r15;

        exitmonitor r7;

     label10:
        throw r8;

     label11:
        $r14 = r0.<androidx.contentpager.content.ContentPager: androidx.contentpager.content.ContentPager$QueryRunner mQueryRunner>;

        $r13 = r0.<androidx.contentpager.content.ContentPager: androidx.contentpager.content.ContentPager$QueryRunner$Callback mQueryCallback>;

        interfaceinvoke $r14.<androidx.contentpager.content.ContentPager$QueryRunner: void query(androidx.contentpager.content.Query,androidx.contentpager.content.ContentPager$QueryRunner$Callback)>(r6, $r13);

     label12:
        return r6;

        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public void reset()
    {
        androidx.contentpager.content.ContentPager r0;
        java.lang.Object r1, $r5, $r9;
        java.util.Iterator r2;
        androidx.contentpager.content.Query r3;
        java.lang.Throwable r4, $r11;
        androidx.contentpager.content.ContentPager$CursorCache $r6;
        java.util.Set $r7, $r8;
        boolean $z0;
        androidx.contentpager.content.ContentPager$QueryRunner $r10;

        r0 := @this: androidx.contentpager.content.ContentPager;

        $r5 = r0.<androidx.contentpager.content.ContentPager: java.lang.Object mContentLock>;

        r1 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<androidx.contentpager.content.ContentPager: androidx.contentpager.content.ContentPager$CursorCache mCursorCache>;

        virtualinvoke $r6.<androidx.contentpager.content.ContentPager$CursorCache: void evictAll()>();

        $r7 = r0.<androidx.contentpager.content.ContentPager: java.util.Set mActiveQueries>;

        r2 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.contentpager.content.Query) $r9;

        $r10 = r0.<androidx.contentpager.content.ContentPager: androidx.contentpager.content.ContentPager$QueryRunner mQueryRunner>;

        interfaceinvoke $r10.<androidx.contentpager.content.ContentPager$QueryRunner: void cancel(androidx.contentpager.content.Query)>(r3);

        virtualinvoke r3.<androidx.contentpager.content.Query: void cancel()>();

        goto label2;

     label3:
        $r8 = r0.<androidx.contentpager.content.ContentPager: java.util.Set mActiveQueries>;

        interfaceinvoke $r8.<java.util.Set: void clear()>();

        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r11 := @caughtexception;

        r4 = $r11;

        exitmonitor r1;

     label6:
        throw r4;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    android.database.Cursor loadContentInBackground(androidx.contentpager.content.Query)
    {
        androidx.contentpager.content.ContentPager r0;
        androidx.contentpager.content.Query r1;
        java.lang.Throwable r2, $r20, $r21, r23;
        androidx.contentpager.content.ContentPager$Stats $r3, $r8;
        java.lang.Object $r4, $r9, r22, r25;
        androidx.contentpager.content.ContentPager$CursorCache $r5, $r10;
        android.net.Uri $r6, $r11;
        boolean $z0, $z1;
        android.content.ContentResolver $r7;
        android.database.Cursor $r13, $r14, $r19, r24;
        java.lang.StringBuilder $r15, $r16, $r17;
        java.lang.String $r18;

        r0 := @this: androidx.contentpager.content.ContentPager;

        r1 := @parameter0: androidx.contentpager.content.Query;

        $r3 = r0.<androidx.contentpager.content.ContentPager: androidx.contentpager.content.ContentPager$Stats mStats>;

        virtualinvoke $r3.<androidx.contentpager.content.ContentPager$Stats: void increment(java.lang.String)>("android-support:extra-total-queries");

        $r4 = r0.<androidx.contentpager.content.ContentPager: java.lang.Object mContentLock>;

        r22 = $r4;

        entermonitor $r4;

     label01:
        $r5 = r0.<androidx.contentpager.content.ContentPager: androidx.contentpager.content.ContentPager$CursorCache mCursorCache>;

        $r6 = virtualinvoke r1.<androidx.contentpager.content.Query: android.net.Uri getUri()>();

        $z0 = virtualinvoke $r5.<androidx.contentpager.content.ContentPager$CursorCache: boolean hasEntry(android.net.Uri)>($r6);

        if $z0 == 0 goto label03;

        $r19 = specialinvoke r0.<androidx.contentpager.content.ContentPager: android.database.Cursor createPagedCursor(androidx.contentpager.content.Query)>(r1);

        exitmonitor r22;

     label02:
        return $r19;

     label03:
        exitmonitor r22;

     label04:
        goto label07;

     label05:
        $r21 := @caughtexception;

        r23 = $r21;

        exitmonitor r22;

     label06:
        throw r23;

     label07:
        $r7 = r0.<androidx.contentpager.content.ContentPager: android.content.ContentResolver mResolver>;

        r24 = virtualinvoke r1.<androidx.contentpager.content.Query: android.database.Cursor run(android.content.ContentResolver)>($r7);

        $r8 = r0.<androidx.contentpager.content.ContentPager: androidx.contentpager.content.ContentPager$Stats mStats>;

        virtualinvoke $r8.<androidx.contentpager.content.ContentPager$Stats: void increment(java.lang.String)>("android-support:extra-resolved-queries");

        if r24 != null goto label08;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Query resulted in null cursor. ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ContentPager", $r18);

        return null;

     label08:
        $z1 = specialinvoke r0.<androidx.contentpager.content.ContentPager: boolean isProviderPaged(android.database.Cursor)>(r24);

        if $z1 == 0 goto label09;

        $r14 = specialinvoke r0.<androidx.contentpager.content.ContentPager: android.database.Cursor processProviderPagedCursor(androidx.contentpager.content.Query,android.database.Cursor)>(r1, r24);

        return $r14;

     label09:
        $r9 = r0.<androidx.contentpager.content.ContentPager: java.lang.Object mContentLock>;

        r25 = $r9;

        entermonitor $r9;

     label10:
        $r10 = r0.<androidx.contentpager.content.ContentPager: androidx.contentpager.content.ContentPager$CursorCache mCursorCache>;

        $r11 = virtualinvoke r1.<androidx.contentpager.content.Query: android.net.Uri getUri()>();

        virtualinvoke $r10.<androidx.contentpager.content.ContentPager$CursorCache: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, r24);

        $r13 = specialinvoke r0.<androidx.contentpager.content.ContentPager: android.database.Cursor createPagedCursor(androidx.contentpager.content.Query)>(r1);

        exitmonitor r25;

     label11:
        return $r13;

     label12:
        $r20 := @caughtexception;

        r2 = $r20;

        exitmonitor r25;

     label13:
        throw r2;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    private android.database.Cursor createPagedCursor(androidx.contentpager.content.Query)
    {
        androidx.contentpager.content.ContentPager r0;
        androidx.contentpager.content.Query r1;
        android.database.Cursor r2, r14, r15;
        androidx.contentpager.content.ContentPager$CursorCache $r3;
        android.net.Uri $r4;
        java.lang.Object $r5, r9;
        androidx.contentpager.content.ContentPager$Stats $r6, $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13;
        boolean $z0;
        android.os.Bundle $r11;
        androidx.contentpager.content.ContentPager$CursorView r12;
        androidx.contentpager.content.InMemoryCursor r13;

        r0 := @this: androidx.contentpager.content.ContentPager;

        r1 := @parameter0: androidx.contentpager.content.Query;

        $r3 = r0.<androidx.contentpager.content.ContentPager: androidx.contentpager.content.ContentPager$CursorCache mCursorCache>;

        $r4 = virtualinvoke r1.<androidx.contentpager.content.Query: android.net.Uri getUri()>();

        $r5 = virtualinvoke $r3.<androidx.contentpager.content.ContentPager$CursorCache: java.lang.Object get(java.lang.Object)>($r4);

        r2 = (android.database.Cursor) $r5;

        if r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z0, "No un-paged cursor in cache, or can\'t retrieve it.");

        $r6 = r0.<androidx.contentpager.content.ContentPager: androidx.contentpager.content.ContentPager$Stats mStats>;

        virtualinvoke $r6.<androidx.contentpager.content.ContentPager$Stats: void increment(java.lang.String)>("android-support:extra-compat-paged");

        $i0 = virtualinvoke r1.<androidx.contentpager.content.Query: int getLimit()>();

        $i1 = interfaceinvoke r2.<android.database.Cursor: int getCount()>();

        i13 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        $i2 = virtualinvoke r1.<androidx.contentpager.content.Query: int getOffset()>();

        $i3 = virtualinvoke r1.<androidx.contentpager.content.Query: int getLimit()>();

        $i4 = $i2 + $i3;

        $i5 = interfaceinvoke r2.<android.database.Cursor: int getCount()>();

        if $i4 <= $i5 goto label3;

        $i11 = interfaceinvoke r2.<android.database.Cursor: int getCount()>();

        $i12 = virtualinvoke r1.<androidx.contentpager.content.Query: int getLimit()>();

        i13 = $i11 % $i12;

     label3:
        $i6 = virtualinvoke r1.<androidx.contentpager.content.Query: int getOffset()>();

        if $i6 != 0 goto label4;

        $i8 = interfaceinvoke r2.<android.database.Cursor: int getCount()>();

        $i9 = virtualinvoke r1.<androidx.contentpager.content.Query: int getLimit()>();

        if $i8 >= $i9 goto label4;

        r12 = new androidx.contentpager.content.ContentPager$CursorView;

        $i10 = interfaceinvoke r2.<android.database.Cursor: int getCount()>();

        specialinvoke r12.<androidx.contentpager.content.ContentPager$CursorView: void <init>(android.database.Cursor,int,int)>(r2, $i10, 4);

        r9 = r12;

        goto label5;

     label4:
        r13 = new androidx.contentpager.content.InMemoryCursor;

        $i7 = virtualinvoke r1.<androidx.contentpager.content.Query: int getOffset()>();

        specialinvoke r13.<androidx.contentpager.content.InMemoryCursor: void <init>(android.database.Cursor,int,int,int)>(r2, $i7, i13, 1);

        r9 = r13;

     label5:
        $r10 = r0.<androidx.contentpager.content.ContentPager: androidx.contentpager.content.ContentPager$Stats mStats>;

        r14 = (android.database.Cursor) r9;

        $r11 = interfaceinvoke r14.<android.database.Cursor: android.os.Bundle getExtras()>();

        virtualinvoke $r10.<androidx.contentpager.content.ContentPager$Stats: void includeStats(android.os.Bundle)>($r11);

        r15 = (android.database.Cursor) r9;

        return r15;
    }

    private android.database.Cursor processProviderPagedCursor(androidx.contentpager.content.Query, android.database.Cursor)
    {
        androidx.contentpager.content.ContentPager r0;
        androidx.contentpager.content.Query r1;
        android.database.Cursor r2, r10, r11;
        android.database.CursorWindow r3;
        byte b0, $b6;
        androidx.contentpager.content.ContentPager$CursorView r4, r9;
        android.os.Bundle r5;
        int $i1, $i2, $i3, $i4, i5;
        androidx.contentpager.content.ContentPager$Stats $r7, $r8;
        double $d0, $d1;

        r0 := @this: androidx.contentpager.content.ContentPager;

        r1 := @parameter0: androidx.contentpager.content.Query;

        r2 := @parameter1: android.database.Cursor;

        r3 = specialinvoke r0.<androidx.contentpager.content.ContentPager: android.database.CursorWindow getWindow(android.database.Cursor)>(r2);

        i5 = interfaceinvoke r2.<android.database.Cursor: int getCount()>();

        if r3 == null goto label1;

        i5 = virtualinvoke r3.<android.database.CursorWindow: int getNumRows()>();

     label1:
        $i1 = interfaceinvoke r2.<android.database.Cursor: int getCount()>();

        if $i1 > i5 goto label2;

        $b6 = 2;

        goto label3;

     label2:
        $b6 = 3;

     label3:
        b0 = $b6;

        r9 = new androidx.contentpager.content.ContentPager$CursorView;

        specialinvoke r9.<androidx.contentpager.content.ContentPager$CursorView: void <init>(android.database.Cursor,int,int)>(r2, i5, b0);

        r4 = r9;

        r10 = (android.database.Cursor) r4;

        r5 = interfaceinvoke r10.<android.database.Cursor: android.os.Bundle getExtras()>();

        $i2 = interfaceinvoke r2.<android.database.Cursor: int getCount()>();

        if $i2 <= i5 goto label4;

        $i3 = virtualinvoke r1.<androidx.contentpager.content.Query: int getLimit()>();

        virtualinvoke r5.<android.os.Bundle: void putInt(java.lang.String,int)>("android-support:extra-ignored-limit", $i3);

        $d0 = (double) i5;

        $d1 = $d0 * 0.85;

        $i4 = (int) $d1;

        virtualinvoke r5.<android.os.Bundle: void putInt(java.lang.String,int)>("android-support:extra-suggested-limit", $i4);

     label4:
        $r7 = r0.<androidx.contentpager.content.ContentPager: androidx.contentpager.content.ContentPager$Stats mStats>;

        virtualinvoke $r7.<androidx.contentpager.content.ContentPager$Stats: void increment(java.lang.String)>("android-support:extra-provider-paged");

        $r8 = r0.<androidx.contentpager.content.ContentPager: androidx.contentpager.content.ContentPager$Stats mStats>;

        virtualinvoke $r8.<androidx.contentpager.content.ContentPager$Stats: void includeStats(android.os.Bundle)>(r5);

        r11 = (android.database.Cursor) r4;

        return r11;
    }

    private android.database.CursorWindow getWindow(android.database.Cursor)
    {
        androidx.contentpager.content.ContentPager r0;
        android.database.Cursor r1, $r5;
        boolean $z0, $z1;
        android.database.CrossProcessCursor $r2;
        android.database.CursorWindow $r3, $r6;
        android.database.CursorWrapper $r4;

        r0 := @this: androidx.contentpager.content.ContentPager;

        r1 := @parameter0: android.database.Cursor;

        $z0 = r1 instanceof android.database.CursorWrapper;

        if $z0 == 0 goto label1;

        $r4 = (android.database.CursorWrapper) r1;

        $r5 = virtualinvoke $r4.<android.database.CursorWrapper: android.database.Cursor getWrappedCursor()>();

        $r6 = specialinvoke r0.<androidx.contentpager.content.ContentPager: android.database.CursorWindow getWindow(android.database.Cursor)>($r5);

        return $r6;

     label1:
        $z1 = r1 instanceof android.database.CrossProcessCursor;

        if $z1 == 0 goto label2;

        $r2 = (android.database.CrossProcessCursor) r1;

        $r3 = interfaceinvoke $r2.<android.database.CrossProcessCursor: android.database.CursorWindow getWindow()>();

        return $r3;

     label2:
        return null;
    }

    void onCursorReady(androidx.contentpager.content.Query, android.database.Cursor)
    {
        androidx.contentpager.content.ContentPager r0;
        androidx.contentpager.content.Query r1;
        android.database.Cursor r2;
        java.lang.Object r3, $r5;
        java.lang.Throwable r4, $r8;
        java.util.Set $r6;
        androidx.contentpager.content.ContentPager$ContentCallback $r7;

        r0 := @this: androidx.contentpager.content.ContentPager;

        r1 := @parameter0: androidx.contentpager.content.Query;

        r2 := @parameter1: android.database.Cursor;

        $r5 = r0.<androidx.contentpager.content.ContentPager: java.lang.Object mContentLock>;

        r3 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<androidx.contentpager.content.ContentPager: java.util.Set mActiveQueries>;

        interfaceinvoke $r6.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        exitmonitor r3;

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        r4 = $r8;

        exitmonitor r3;

     label4:
        throw r4;

     label5:
        $r7 = virtualinvoke r1.<androidx.contentpager.content.Query: androidx.contentpager.content.ContentPager$ContentCallback getCallback()>();

        interfaceinvoke $r7.<androidx.contentpager.content.ContentPager$ContentCallback: void onCursorReady(androidx.contentpager.content.Query,android.database.Cursor)>(r1, r2);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private boolean isProviderPaged(android.database.Cursor)
    {
        androidx.contentpager.content.ContentPager r0;
        android.database.Cursor r1;
        java.lang.String[] r2;
        boolean $z0, $z1, $z2, $z3;
        android.os.Bundle r3, $r4, r5;

        r0 := @this: androidx.contentpager.content.ContentPager;

        r1 := @parameter0: android.database.Cursor;

        r3 = interfaceinvoke r1.<android.database.Cursor: android.os.Bundle getExtras()>();

        if r3 == null goto label1;

        $r4 = r3;

        goto label2;

     label1:
        $r4 = <android.os.Bundle: android.os.Bundle EMPTY>;

     label2:
        r5 = $r4;

        r2 = virtualinvoke r5.<android.os.Bundle: java.lang.String[] getStringArray(java.lang.String)>("android.content.extra.HONORED_ARGS");

        $z0 = virtualinvoke r5.<android.os.Bundle: boolean containsKey(java.lang.String)>("android.content.extra.TOTAL_COUNT");

        if $z0 == 0 goto label3;

        if r2 == null goto label3;

        $z1 = staticinvoke <androidx.contentpager.content.ContentPager: boolean contains(java.lang.Object[],java.lang.Object)>(r2, "android:query-arg-offset");

        if $z1 == 0 goto label3;

        $z2 = staticinvoke <androidx.contentpager.content.ContentPager: boolean contains(java.lang.Object[],java.lang.Object)>(r2, "android:query-arg-limit");

        if $z2 == 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;
    }

    private static boolean contains(java.lang.Object[], java.lang.Object)
    {
        java.lang.Object[] r0, r2;
        java.lang.Object r1, r3;
        int i0, i1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.Object;

        r2 = r0;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r2[i1];

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r3);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    static android.os.Bundle buildExtras(android.os.Bundle, int, int)
    {
        int i0, i1, $i2;
        android.os.Bundle $r0, $r2, r3;
        boolean $z0, $z1;
        java.lang.String[] $r1;

        r3 := @parameter0: android.os.Bundle;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r3 == null goto label1;

        $r2 = <android.os.Bundle: android.os.Bundle EMPTY>;

        if r3 != $r2 goto label2;

     label1:
        $r0 = new android.os.Bundle;

        specialinvoke $r0.<android.os.Bundle: void <init>()>();

        r3 = $r0;

        goto label3;

     label2:
        $i2 = <android.os.Build$VERSION: int SDK_INT>;

        if $i2 < 26 goto label3;

        r3 = virtualinvoke r3.<android.os.Bundle: android.os.Bundle deepCopy()>();

     label3:
        virtualinvoke r3.<android.os.Bundle: void putInt(java.lang.String,int)>("androidx.appcompat.widget.CURSOR_DISPOSITION", i1);

        $z1 = virtualinvoke r3.<android.os.Bundle: boolean containsKey(java.lang.String)>("android.content.extra.TOTAL_COUNT");

        if $z1 != 0 goto label4;

        virtualinvoke r3.<android.os.Bundle: void putInt(java.lang.String,int)>("android.content.extra.TOTAL_COUNT", i0);

     label4:
        $z0 = virtualinvoke r3.<android.os.Bundle: boolean containsKey(java.lang.String)>("android.content.extra.HONORED_ARGS");

        if $z0 != 0 goto label5;

        $r1 = newarray (java.lang.String)[2];

        $r1[0] = "android:query-arg-offset";

        $r1[1] = "android:query-arg-limit";

        virtualinvoke r3.<android.os.Bundle: void putStringArray(java.lang.String,java.lang.String[])>("android.content.extra.HONORED_ARGS", $r1);

     label5:
        return r3;
    }

    public static android.os.Bundle createArgs(int, int)
    {
        int i0, i1;
        android.os.Bundle r0, $r1;
        boolean $z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.core.util.Preconditions: void checkArgument(boolean)>($z0);

        $r1 = new android.os.Bundle;

        specialinvoke $r1.<android.os.Bundle: void <init>()>();

        r0 = $r1;

        virtualinvoke r0.<android.os.Bundle: void putInt(java.lang.String,int)>("android:query-arg-offset", i0);

        virtualinvoke r0.<android.os.Bundle: void putInt(java.lang.String,int)>("android:query-arg-limit", i1);

        return r0;
    }

androidx.contentpager.content.ContentPager$1
<androidx.contentpager.content.ContentPager$1: androidx.contentpager.content.ContentPager this$0>
    void <init>(androidx.contentpager.content.ContentPager)
    {
        androidx.contentpager.content.ContentPager$1 r0;
        androidx.contentpager.content.ContentPager r1;

        r0 := @this: androidx.contentpager.content.ContentPager$1;

        r1 := @parameter0: androidx.contentpager.content.ContentPager;

        r0.<androidx.contentpager.content.ContentPager$1: androidx.contentpager.content.ContentPager this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public android.database.Cursor runQueryInBackground(androidx.contentpager.content.Query)
    {
        androidx.contentpager.content.ContentPager$1 r0;
        androidx.contentpager.content.Query r1;
        androidx.contentpager.content.ContentPager $r2;
        android.database.Cursor $r3;

        r0 := @this: androidx.contentpager.content.ContentPager$1;

        r1 := @parameter0: androidx.contentpager.content.Query;

        $r2 = r0.<androidx.contentpager.content.ContentPager$1: androidx.contentpager.content.ContentPager this$0>;

        $r3 = virtualinvoke $r2.<androidx.contentpager.content.ContentPager: android.database.Cursor loadContentInBackground(androidx.contentpager.content.Query)>(r1);

        return $r3;
    }

    public void onQueryFinished(androidx.contentpager.content.Query, android.database.Cursor)
    {
        androidx.contentpager.content.ContentPager$1 r0;
        androidx.contentpager.content.Query r1;
        android.database.Cursor r2;
        androidx.contentpager.content.ContentPager $r3;

        r0 := @this: androidx.contentpager.content.ContentPager$1;

        r1 := @parameter0: androidx.contentpager.content.Query;

        r2 := @parameter1: android.database.Cursor;

        $r3 = r0.<androidx.contentpager.content.ContentPager$1: androidx.contentpager.content.ContentPager this$0>;

        virtualinvoke $r3.<androidx.contentpager.content.ContentPager: void onCursorReady(androidx.contentpager.content.Query,android.database.Cursor)>(r1, r2);

        return;
    }

androidx.contentpager.content.ContentPager$ContentCallback
<androidx.contentpager.content.ContentPager$ContentCallback: void onCursorReady(androidx.contentpager.content.Query,android.database.Cursor)>
androidx.contentpager.content.ContentPager$CursorCache
    void <init>(int)
    {
        androidx.contentpager.content.ContentPager$CursorCache r0;
        int i0;

        r0 := @this: androidx.contentpager.content.ContentPager$CursorCache;

        i0 := @parameter0: int;

        specialinvoke r0.<androidx.collection.LruCache: void <init>(int)>(i0);

        return;
    }

    protected void entryRemoved(boolean, android.net.Uri, android.database.Cursor, android.database.Cursor)
    {
        androidx.contentpager.content.ContentPager$CursorCache r0;
        boolean z0, $z1;
        android.net.Uri r1;
        android.database.Cursor r2, r3;

        r0 := @this: androidx.contentpager.content.ContentPager$CursorCache;

        z0 := @parameter0: boolean;

        r1 := @parameter1: android.net.Uri;

        r2 := @parameter2: android.database.Cursor;

        r3 := @parameter3: android.database.Cursor;

        $z1 = interfaceinvoke r2.<android.database.Cursor: boolean isClosed()>();

        if $z1 != 0 goto label1;

        interfaceinvoke r2.<android.database.Cursor: void close()>();

     label1:
        return;
    }

    boolean hasEntry(android.net.Uri)
    {
        androidx.contentpager.content.ContentPager$CursorCache r0;
        android.net.Uri r1;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: androidx.contentpager.content.ContentPager$CursorCache;

        r1 := @parameter0: android.net.Uri;

        $r2 = virtualinvoke r0.<androidx.contentpager.content.ContentPager$CursorCache: java.lang.Object get(java.lang.Object)>(r1);

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected volatile void entryRemoved(boolean, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.contentpager.content.ContentPager$CursorCache r0;
        boolean z0;
        java.lang.Object r1, r2, r3;
        android.database.Cursor $r4, $r5;
        android.net.Uri $r6;

        r0 := @this: androidx.contentpager.content.ContentPager$CursorCache;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        $r6 = (android.net.Uri) r1;

        $r5 = (android.database.Cursor) r2;

        $r4 = (android.database.Cursor) r3;

        virtualinvoke r0.<androidx.contentpager.content.ContentPager$CursorCache: void entryRemoved(boolean,android.net.Uri,android.database.Cursor,android.database.Cursor)>(z0, $r6, $r5, $r4);

        return;
    }

androidx.contentpager.content.ContentPager$CursorDisposition
androidx.contentpager.content.ContentPager$CursorView
<androidx.contentpager.content.ContentPager$CursorView: android.os.Bundle mExtras>
<androidx.contentpager.content.ContentPager$CursorView: int mSize>
    void <init>(android.database.Cursor, int, int)
    {
        androidx.contentpager.content.ContentPager$CursorView r0;
        android.database.Cursor r1;
        int i0, i1, $i2;
        android.os.Bundle $r2, $r3;

        r0 := @this: androidx.contentpager.content.ContentPager$CursorView;

        r1 := @parameter0: android.database.Cursor;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<android.database.CursorWrapper: void <init>(android.database.Cursor)>(r1);

        r0.<androidx.contentpager.content.ContentPager$CursorView: int mSize> = i0;

        $r2 = interfaceinvoke r1.<android.database.Cursor: android.os.Bundle getExtras()>();

        $i2 = interfaceinvoke r1.<android.database.Cursor: int getCount()>();

        $r3 = staticinvoke <androidx.contentpager.content.ContentPager: android.os.Bundle buildExtras(android.os.Bundle,int,int)>($r2, $i2, i1);

        r0.<androidx.contentpager.content.ContentPager$CursorView: android.os.Bundle mExtras> = $r3;

        return;
    }

    public int getCount()
    {
        androidx.contentpager.content.ContentPager$CursorView r0;
        int $i0;

        r0 := @this: androidx.contentpager.content.ContentPager$CursorView;

        $i0 = r0.<androidx.contentpager.content.ContentPager$CursorView: int mSize>;

        return $i0;
    }

    public android.os.Bundle getExtras()
    {
        androidx.contentpager.content.ContentPager$CursorView r0;
        android.os.Bundle $r1;

        r0 := @this: androidx.contentpager.content.ContentPager$CursorView;

        $r1 = r0.<androidx.contentpager.content.ContentPager$CursorView: android.os.Bundle mExtras>;

        return $r1;
    }

androidx.contentpager.content.ContentPager$QueryRunner$Callback
<androidx.contentpager.content.ContentPager$QueryRunner$Callback: android.database.Cursor runQueryInBackground(androidx.contentpager.content.Query)>
<androidx.contentpager.content.ContentPager$QueryRunner$Callback: void onQueryFinished(androidx.contentpager.content.Query,android.database.Cursor)>
androidx.contentpager.content.ContentPager$QueryRunner
<androidx.contentpager.content.ContentPager$QueryRunner: void query(androidx.contentpager.content.Query,androidx.contentpager.content.ContentPager$QueryRunner$Callback)>
<androidx.contentpager.content.ContentPager$QueryRunner: boolean isRunning(androidx.contentpager.content.Query)>
<androidx.contentpager.content.ContentPager$QueryRunner: void cancel(androidx.contentpager.content.Query)>
androidx.contentpager.content.ContentPager$Stats
<androidx.contentpager.content.ContentPager$Stats: java.lang.String EXTRA_TOTAL_QUERIES>
<androidx.contentpager.content.ContentPager$Stats: java.lang.String EXTRA_RESOLVED_QUERIES>
<androidx.contentpager.content.ContentPager$Stats: java.lang.String EXTRA_COMPAT_PAGED>
<androidx.contentpager.content.ContentPager$Stats: java.lang.String EXTRA_PROVIDER_PAGED>
<androidx.contentpager.content.ContentPager$Stats: int mTotalQueries>
<androidx.contentpager.content.ContentPager$Stats: int mResolvedQueries>
<androidx.contentpager.content.ContentPager$Stats: int mCompatPaged>
<androidx.contentpager.content.ContentPager$Stats: int mProviderPaged>
    void <init>()
    {
        androidx.contentpager.content.ContentPager$Stats r0;

        r0 := @this: androidx.contentpager.content.ContentPager$Stats;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    void increment(java.lang.String)
    {
        androidx.contentpager.content.ContentPager$Stats r0;
        java.lang.String r1, r2, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        byte b9;

        r0 := @this: androidx.contentpager.content.ContentPager$Stats;

        r1 := @parameter0: java.lang.String;

        r2 = r1;

        b9 = -1;

        $i0 = virtualinvoke r2.<java.lang.String: int hashCode()>();

        lookupswitch($i0)
        {
            case -1110670352: goto label03;
            case 970286167: goto label01;
            case 1523311063: goto label02;
            case 1981484447: goto label04;
            default: goto label05;
        };

     label01:
        $z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("android-support:extra-total-queries");

        if $z2 == 0 goto label05;

        b9 = 0;

        goto label05;

     label02:
        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("android-support:extra-resolved-queries");

        if $z1 == 0 goto label05;

        b9 = 1;

        goto label05;

     label03:
        $z3 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("android-support:extra-compat-paged");

        if $z3 == 0 goto label05;

        b9 = 2;

        goto label05;

     label04:
        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("android-support:extra-provider-paged");

        if $z0 == 0 goto label05;

        b9 = 3;

     label05:
        tableswitch(b9)
        {
            case 0: goto label06;
            case 1: goto label07;
            case 2: goto label08;
            case 3: goto label09;
            default: goto label10;
        };

     label06:
        $i7 = r0.<androidx.contentpager.content.ContentPager$Stats: int mTotalQueries>;

        $i8 = $i7 + 1;

        r0.<androidx.contentpager.content.ContentPager$Stats: int mTotalQueries> = $i8;

        goto label11;

     label07:
        $i5 = r0.<androidx.contentpager.content.ContentPager$Stats: int mResolvedQueries>;

        $i6 = $i5 + 1;

        r0.<androidx.contentpager.content.ContentPager$Stats: int mResolvedQueries> = $i6;

        goto label11;

     label08:
        $i3 = r0.<androidx.contentpager.content.ContentPager$Stats: int mCompatPaged>;

        $i4 = $i3 + 1;

        r0.<androidx.contentpager.content.ContentPager$Stats: int mCompatPaged> = $i4;

        goto label11;

     label09:
        $i1 = r0.<androidx.contentpager.content.ContentPager$Stats: int mProviderPaged>;

        $i2 = $i1 + 1;

        r0.<androidx.contentpager.content.ContentPager$Stats: int mProviderPaged> = $i2;

        goto label11;

     label10:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown property: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label11:
        return;
    }

    void includeStats(android.os.Bundle)
    {
        androidx.contentpager.content.ContentPager$Stats r0;
        android.os.Bundle r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: androidx.contentpager.content.ContentPager$Stats;

        r1 := @parameter0: android.os.Bundle;

        $i0 = r0.<androidx.contentpager.content.ContentPager$Stats: int mTotalQueries>;

        virtualinvoke r1.<android.os.Bundle: void putInt(java.lang.String,int)>("android-support:extra-total-queries", $i0);

        $i1 = r0.<androidx.contentpager.content.ContentPager$Stats: int mResolvedQueries>;

        virtualinvoke r1.<android.os.Bundle: void putInt(java.lang.String,int)>("android-support:extra-resolved-queries", $i1);

        $i2 = r0.<androidx.contentpager.content.ContentPager$Stats: int mCompatPaged>;

        virtualinvoke r1.<android.os.Bundle: void putInt(java.lang.String,int)>("android-support:extra-compat-paged", $i2);

        $i3 = r0.<androidx.contentpager.content.ContentPager$Stats: int mProviderPaged>;

        virtualinvoke r1.<android.os.Bundle: void putInt(java.lang.String,int)>("android-support:extra-provider-paged", $i3);

        return;
    }

