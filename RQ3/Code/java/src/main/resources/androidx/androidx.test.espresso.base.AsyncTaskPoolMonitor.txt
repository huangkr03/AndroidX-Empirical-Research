androidx.test.espresso.base.AsyncTaskPoolMonitor
<androidx.test.espresso.base.AsyncTaskPoolMonitor: java.util.concurrent.atomic.AtomicReference monitor>
<androidx.test.espresso.base.AsyncTaskPoolMonitor: java.util.concurrent.ThreadPoolExecutor pool>
<androidx.test.espresso.base.AsyncTaskPoolMonitor: java.util.concurrent.atomic.AtomicInteger activeBarrierChecks>
    androidx.test.espresso.base.IdleNotifier asIdleNotifier()
    {
        androidx.test.espresso.base.AsyncTaskPoolMonitor r0;
        androidx.test.espresso.base.AsyncTaskPoolMonitor$1 r1;

        r0 := @this: androidx.test.espresso.base.AsyncTaskPoolMonitor;

        r1 = new androidx.test.espresso.base.AsyncTaskPoolMonitor$1;

        specialinvoke r1.<androidx.test.espresso.base.AsyncTaskPoolMonitor$1: void <init>(androidx.test.espresso.base.AsyncTaskPoolMonitor)>(r0);

        return r1;
    }

    static volatile java.util.concurrent.ThreadPoolExecutor '-$$Nest$fgetpool'(androidx.test.espresso.base.AsyncTaskPoolMonitor)
    {
        androidx.test.espresso.base.AsyncTaskPoolMonitor r0;
        java.util.concurrent.ThreadPoolExecutor $r1;

        r0 := @parameter0: androidx.test.espresso.base.AsyncTaskPoolMonitor;

        $r1 = r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor: java.util.concurrent.ThreadPoolExecutor pool>;

        return $r1;
    }

    static volatile java.util.concurrent.atomic.AtomicInteger '-$$Nest$fgetactiveBarrierChecks'(androidx.test.espresso.base.AsyncTaskPoolMonitor)
    {
        androidx.test.espresso.base.AsyncTaskPoolMonitor r0;
        java.util.concurrent.atomic.AtomicInteger $r1;

        r0 := @parameter0: androidx.test.espresso.base.AsyncTaskPoolMonitor;

        $r1 = r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor: java.util.concurrent.atomic.AtomicInteger activeBarrierChecks>;

        return $r1;
    }

    static volatile java.util.concurrent.atomic.AtomicReference '-$$Nest$fgetmonitor'(androidx.test.espresso.base.AsyncTaskPoolMonitor)
    {
        androidx.test.espresso.base.AsyncTaskPoolMonitor r0;
        java.util.concurrent.atomic.AtomicReference $r1;

        r0 := @parameter0: androidx.test.espresso.base.AsyncTaskPoolMonitor;

        $r1 = r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor: java.util.concurrent.atomic.AtomicReference monitor>;

        return $r1;
    }

    void <init>(java.util.concurrent.ThreadPoolExecutor)
    {
        androidx.test.espresso.base.AsyncTaskPoolMonitor r0;
        java.util.concurrent.ThreadPoolExecutor r1, $r3;
        java.lang.Object $r2;
        java.util.concurrent.atomic.AtomicReference r4;
        java.util.concurrent.atomic.AtomicInteger r5;

        r0 := @this: androidx.test.espresso.base.AsyncTaskPoolMonitor;

        r1 := @parameter0: java.util.concurrent.ThreadPoolExecutor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r4 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke r4.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>(null);

        r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor: java.util.concurrent.atomic.AtomicReference monitor> = r4;

        r5 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke r5.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor: java.util.concurrent.atomic.AtomicInteger activeBarrierChecks> = r5;

        $r2 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.util.concurrent.ThreadPoolExecutor) $r2;

        r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor: java.util.concurrent.ThreadPoolExecutor pool> = $r3;

        return;
    }

    void cancelIdleMonitor()
    {
        java.util.concurrent.atomic.AtomicReference $r0;
        java.lang.Object $r1;
        androidx.test.espresso.base.AsyncTaskPoolMonitor r2;
        androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor r3;

        r2 := @this: androidx.test.espresso.base.AsyncTaskPoolMonitor;

        $r0 = r2.<androidx.test.espresso.base.AsyncTaskPoolMonitor: java.util.concurrent.atomic.AtomicReference monitor>;

        $r1 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(null);

        r3 = (androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor) $r1;

        if r3 == null goto label1;

        staticinvoke <androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor: void '-$$Nest$mpoison'(androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor)>(r3);

        return;

     label1:
        return;
    }

    void notifyWhenIdle(java.lang.Runnable)
    {
        androidx.test.espresso.base.AsyncTaskPoolMonitor r0;
        java.lang.Runnable r1;
        androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor r2;
        java.util.concurrent.atomic.AtomicReference $r4;
        boolean $z0;

        r0 := @this: androidx.test.espresso.base.AsyncTaskPoolMonitor;

        r1 := @parameter0: java.lang.Runnable;

        staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r2 = new androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor;

        specialinvoke r2.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor: void <init>(androidx.test.espresso.base.AsyncTaskPoolMonitor,java.lang.Runnable,androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor-IA)>(r0, r1, null);

        $r4 = r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor: java.util.concurrent.atomic.AtomicReference monitor>;

        $z0 = staticinvoke <androidx.test.espresso.base.AsyncTaskPoolMonitor$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReference,java.lang.Object,java.lang.Object)>($r4, null, r2);

        staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "cannot monitor for idle recursively!");

        staticinvoke <androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor: void '-$$Nest$mmonitorForIdle'(androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor)>(r2);

        return;
    }

    boolean isIdleNow()
    {
        int i0, $i1, i2;
        java.util.concurrent.ThreadPoolExecutor $r0, $r2;
        java.util.concurrent.BlockingQueue $r1;
        boolean $z0, z1;
        java.util.concurrent.atomic.AtomicReference $r3;
        java.lang.Object $r4;
        java.util.concurrent.atomic.AtomicInteger $r5;
        androidx.test.espresso.base.AsyncTaskPoolMonitor r6;

        r6 := @this: androidx.test.espresso.base.AsyncTaskPoolMonitor;

        $r0 = r6.<androidx.test.espresso.base.AsyncTaskPoolMonitor: java.util.concurrent.ThreadPoolExecutor pool>;

        $r1 = virtualinvoke $r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue getQueue()>();

        $z0 = interfaceinvoke $r1.<java.util.concurrent.BlockingQueue: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = r6.<androidx.test.espresso.base.AsyncTaskPoolMonitor: java.util.concurrent.ThreadPoolExecutor pool>;

        i0 = virtualinvoke $r2.<java.util.concurrent.ThreadPoolExecutor: int getActiveCount()>();

        if i0 == 0 goto label6;

        $r3 = r6.<androidx.test.espresso.base.AsyncTaskPoolMonitor: java.util.concurrent.atomic.AtomicReference monitor>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        if $r4 != null goto label5;

        $r5 = r6.<androidx.test.espresso.base.AsyncTaskPoolMonitor: java.util.concurrent.atomic.AtomicInteger activeBarrierChecks>;

        $i1 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        i2 = i0 - $i1;

     label2:
        if i2 != 0 goto label4;

        z1 = 1;

     label3:
        return z1;

     label4:
        z1 = 0;

        goto label3;

     label5:
        i2 = i0;

        goto label2;

     label6:
        i2 = i0;

        goto label2;
    }

androidx.test.espresso.base.AsyncTaskPoolMonitor$$ExternalSyntheticBackportWithForwarding0
    public static boolean m(java.util.concurrent.atomic.AtomicReference, java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicReference r0;
        java.lang.Object r1, r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.util.concurrent.atomic.AtomicReference;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

     label1:
        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(r1, r2);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $r3 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        if $r3 == r1 goto label1;

        return 0;
    }

androidx.test.espresso.base.AsyncTaskPoolMonitor$1
<androidx.test.espresso.base.AsyncTaskPoolMonitor$1: androidx.test.espresso.base.AsyncTaskPoolMonitor this$0>
    void <init>(androidx.test.espresso.base.AsyncTaskPoolMonitor)
    {
        androidx.test.espresso.base.AsyncTaskPoolMonitor$1 r0;
        androidx.test.espresso.base.AsyncTaskPoolMonitor r1;

        r0 := @this: androidx.test.espresso.base.AsyncTaskPoolMonitor$1;

        r1 := @parameter0: androidx.test.espresso.base.AsyncTaskPoolMonitor;

        r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$1: androidx.test.espresso.base.AsyncTaskPoolMonitor this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void cancelCallback()
    {
        androidx.test.espresso.base.AsyncTaskPoolMonitor$1 r0;
        androidx.test.espresso.base.AsyncTaskPoolMonitor $r1;

        r0 := @this: androidx.test.espresso.base.AsyncTaskPoolMonitor$1;

        $r1 = r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$1: androidx.test.espresso.base.AsyncTaskPoolMonitor this$0>;

        virtualinvoke $r1.<androidx.test.espresso.base.AsyncTaskPoolMonitor: void cancelIdleMonitor()>();

        return;
    }

    public volatile void registerNotificationCallback(java.lang.Object)
    {
        androidx.test.espresso.base.AsyncTaskPoolMonitor$1 r0;
        java.lang.Object r1;
        java.lang.Runnable $r2;

        r0 := @this: androidx.test.espresso.base.AsyncTaskPoolMonitor$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Runnable) r1;

        virtualinvoke r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$1: void registerNotificationCallback(java.lang.Runnable)>($r2);

        return;
    }

    public void registerNotificationCallback(java.lang.Runnable)
    {
        androidx.test.espresso.base.AsyncTaskPoolMonitor$1 r0;
        java.lang.Runnable r1;
        androidx.test.espresso.base.AsyncTaskPoolMonitor $r2;

        r0 := @this: androidx.test.espresso.base.AsyncTaskPoolMonitor$1;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$1: androidx.test.espresso.base.AsyncTaskPoolMonitor this$0>;

        virtualinvoke $r2.<androidx.test.espresso.base.AsyncTaskPoolMonitor: void notifyWhenIdle(java.lang.Runnable)>(r1);

        return;
    }

    public boolean isIdleNow()
    {
        androidx.test.espresso.base.AsyncTaskPoolMonitor$1 r0;
        androidx.test.espresso.base.AsyncTaskPoolMonitor $r1;
        boolean $z0;

        r0 := @this: androidx.test.espresso.base.AsyncTaskPoolMonitor$1;

        $r1 = r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$1: androidx.test.espresso.base.AsyncTaskPoolMonitor this$0>;

        $z0 = virtualinvoke $r1.<androidx.test.espresso.base.AsyncTaskPoolMonitor: boolean isIdleNow()>();

        return $z0;
    }

androidx.test.espresso.base.AsyncTaskPoolMonitor$BarrierRestarter
<androidx.test.espresso.base.AsyncTaskPoolMonitor$BarrierRestarter: java.util.concurrent.CyclicBarrier barrier>
<androidx.test.espresso.base.AsyncTaskPoolMonitor$BarrierRestarter: java.util.concurrent.atomic.AtomicInteger barrierGeneration>
    void <init>(java.util.concurrent.CyclicBarrier, java.util.concurrent.atomic.AtomicInteger)
    {
        androidx.test.espresso.base.AsyncTaskPoolMonitor$BarrierRestarter r0;
        java.util.concurrent.CyclicBarrier r1;
        java.util.concurrent.atomic.AtomicInteger r2;

        r0 := @this: androidx.test.espresso.base.AsyncTaskPoolMonitor$BarrierRestarter;

        r1 := @parameter0: java.util.concurrent.CyclicBarrier;

        r2 := @parameter1: java.util.concurrent.atomic.AtomicInteger;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$BarrierRestarter: java.util.concurrent.CyclicBarrier barrier> = r1;

        r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$BarrierRestarter: java.util.concurrent.atomic.AtomicInteger barrierGeneration> = r2;

        return;
    }

    synchronized void restart(int)
    {
        androidx.test.espresso.base.AsyncTaskPoolMonitor$BarrierRestarter r0;
        int i0, $i1;
        java.util.concurrent.atomic.AtomicInteger $r1;
        boolean $z0;
        java.util.concurrent.CyclicBarrier $r2;

        r0 := @this: androidx.test.espresso.base.AsyncTaskPoolMonitor$BarrierRestarter;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$BarrierRestarter: java.util.concurrent.atomic.AtomicInteger barrierGeneration>;

        $i1 = i0 + 1;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(i0, $i1);

        if $z0 == 0 goto label1;

        $r2 = r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$BarrierRestarter: java.util.concurrent.CyclicBarrier barrier>;

        virtualinvoke $r2.<java.util.concurrent.CyclicBarrier: void reset()>();

        return;

     label1:
        return;
    }

androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor$$ExternalSyntheticBackportWithForwarding0
    public static boolean m(java.util.concurrent.atomic.AtomicReference, java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicReference r0;
        java.lang.Object r1, r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.util.concurrent.atomic.AtomicReference;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

     label1:
        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(r1, r2);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $r3 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        if $r3 == r1 goto label1;

        return 0;
    }

androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor$1$$ExternalSyntheticBackportWithForwarding0
    public static boolean m(java.util.concurrent.atomic.AtomicReference, java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicReference r0;
        java.lang.Object r1, r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.util.concurrent.atomic.AtomicReference;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

     label1:
        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(r1, r2);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $r3 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        if $r3 == r1 goto label1;

        return 0;
    }

androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor$1
<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor$1: androidx.test.espresso.base.AsyncTaskPoolMonitor val$this$0>
<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor$1: java.lang.Runnable val$onIdle>
<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor$1: androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor this$1>
    void <init>(androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor, androidx.test.espresso.base.AsyncTaskPoolMonitor, java.lang.Runnable)
    {
        androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor$1 r0;
        androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor r1;
        androidx.test.espresso.base.AsyncTaskPoolMonitor r2;
        java.lang.Runnable r3;

        r0 := @this: androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor$1;

        r1 := @parameter0: androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor;

        r2 := @parameter1: androidx.test.espresso.base.AsyncTaskPoolMonitor;

        r3 := @parameter2: java.lang.Runnable;

        r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor$1: androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor this$1> = r1;

        r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor$1: androidx.test.espresso.base.AsyncTaskPoolMonitor val$this$0> = r2;

        r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor$1: java.lang.Runnable val$onIdle> = r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor$1 r0;
        androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor $r1, $r5, $r6, $r9;
        androidx.test.espresso.base.AsyncTaskPoolMonitor $r2, $r7;
        java.util.concurrent.ThreadPoolExecutor $r3;
        java.util.concurrent.BlockingQueue $r4;
        boolean $z0;
        java.util.concurrent.atomic.AtomicReference $r8;
        java.lang.Runnable $r10;

        r0 := @this: androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor$1;

        $r1 = r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor$1: androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor this$1>;

        $r2 = $r1.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor: androidx.test.espresso.base.AsyncTaskPoolMonitor this$0>;

        $r3 = staticinvoke <androidx.test.espresso.base.AsyncTaskPoolMonitor: java.util.concurrent.ThreadPoolExecutor '-$$Nest$fgetpool'(androidx.test.espresso.base.AsyncTaskPoolMonitor)>($r2);

        $r4 = virtualinvoke $r3.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue getQueue()>();

        $z0 = interfaceinvoke $r4.<java.util.concurrent.BlockingQueue: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r6 = r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor$1: androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor this$1>;

        $r7 = $r6.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor: androidx.test.espresso.base.AsyncTaskPoolMonitor this$0>;

        $r8 = staticinvoke <androidx.test.espresso.base.AsyncTaskPoolMonitor: java.util.concurrent.atomic.AtomicReference '-$$Nest$fgetmonitor'(androidx.test.espresso.base.AsyncTaskPoolMonitor)>($r7);

        $r9 = r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor$1: androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor this$1>;

        staticinvoke <androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor$1$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReference,java.lang.Object,java.lang.Object)>($r8, $r9, null);

        $r10 = r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor$1: java.lang.Runnable val$onIdle>;

        interfaceinvoke $r10.<java.lang.Runnable: void run()>();

        return;

     label1:
        $r5 = r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor$1: androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor this$1>;

        staticinvoke <androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor: void '-$$Nest$mmonitorForIdle'(androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor)>($r5);

        return;
    }

androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor$2
<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor$2: androidx.test.espresso.base.AsyncTaskPoolMonitor$BarrierRestarter val$restarter>
<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor$2: androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor this$1>
    void <init>(androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor, androidx.test.espresso.base.AsyncTaskPoolMonitor$BarrierRestarter)
    {
        androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor$2 r0;
        androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor r1;
        androidx.test.espresso.base.AsyncTaskPoolMonitor$BarrierRestarter r2;

        r0 := @this: androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor$2;

        r1 := @parameter0: androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor;

        r2 := @parameter1: androidx.test.espresso.base.AsyncTaskPoolMonitor$BarrierRestarter;

        r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor$2: androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor this$1> = r1;

        r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor$2: androidx.test.espresso.base.AsyncTaskPoolMonitor$BarrierRestarter val$restarter> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor$2 r0;
        androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor $r1, $r4, $r6, $r8, $r13, $r17, $r22, $r25;
        androidx.test.espresso.base.AsyncTaskPoolMonitor $r2, $r9, $r14, $r18, $r23;
        java.util.concurrent.atomic.AtomicInteger $r3, $r5, $r10, $r15, $r19, $r24;
        java.util.concurrent.CyclicBarrier $r7;
        java.lang.Throwable $r11, $r16, $r20, r26;
        androidx.test.espresso.base.AsyncTaskPoolMonitor$BarrierRestarter $r12, $r21;
        boolean $z0;
        int i6;

        r0 := @this: androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor$2;

     label01:
        $r25 = r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor$2: androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor this$1>;

        $z0 = staticinvoke <androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor: boolean '-$$Nest$fgetpoisoned'(androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor)>($r25);

        if $z0 != 0 goto label04;

        $r1 = r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor$2: androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor this$1>;

        $r2 = $r1.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor: androidx.test.espresso.base.AsyncTaskPoolMonitor this$0>;

        $r3 = staticinvoke <androidx.test.espresso.base.AsyncTaskPoolMonitor: java.util.concurrent.atomic.AtomicInteger '-$$Nest$fgetactiveBarrierChecks'(androidx.test.espresso.base.AsyncTaskPoolMonitor)>($r2);

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        $r4 = r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor$2: androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor this$1>;

        $r5 = staticinvoke <androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor: java.util.concurrent.atomic.AtomicInteger '-$$Nest$fgetbarrierGeneration'(androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor)>($r4);

        i6 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicInteger: int get()>();

     label02:
        $r6 = r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor$2: androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor this$1>;

        $r7 = staticinvoke <androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor: java.util.concurrent.CyclicBarrier '-$$Nest$fgetbarrier'(androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor)>($r6);

        virtualinvoke $r7.<java.util.concurrent.CyclicBarrier: int await()>();

     label03:
        $r8 = r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor$2: androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor this$1>;

        $r9 = $r8.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor: androidx.test.espresso.base.AsyncTaskPoolMonitor this$0>;

        $r10 = staticinvoke <androidx.test.espresso.base.AsyncTaskPoolMonitor: java.util.concurrent.atomic.AtomicInteger '-$$Nest$fgetactiveBarrierChecks'(androidx.test.espresso.base.AsyncTaskPoolMonitor)>($r9);

        virtualinvoke $r10.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        return;

     label04:
        return;

     label05:
        $r11 := @caughtexception;

     label06:
        $r12 = r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor$2: androidx.test.espresso.base.AsyncTaskPoolMonitor$BarrierRestarter val$restarter>;

        virtualinvoke $r12.<androidx.test.espresso.base.AsyncTaskPoolMonitor$BarrierRestarter: void restart(int)>(i6);

     label07:
        $r13 = r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor$2: androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor this$1>;

        $r14 = $r13.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor: androidx.test.espresso.base.AsyncTaskPoolMonitor this$0>;

        $r15 = staticinvoke <androidx.test.espresso.base.AsyncTaskPoolMonitor: java.util.concurrent.atomic.AtomicInteger '-$$Nest$fgetactiveBarrierChecks'(androidx.test.espresso.base.AsyncTaskPoolMonitor)>($r14);

        virtualinvoke $r15.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        goto label01;

     label08:
        $r20 := @caughtexception;

     label09:
        $r21 = r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor$2: androidx.test.espresso.base.AsyncTaskPoolMonitor$BarrierRestarter val$restarter>;

        virtualinvoke $r21.<androidx.test.espresso.base.AsyncTaskPoolMonitor$BarrierRestarter: void restart(int)>(i6);

        goto label11;

     label10:
        $r16 := @caughtexception;

        r26 = $r16;

        $r17 = r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor$2: androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor this$1>;

        $r18 = $r17.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor: androidx.test.espresso.base.AsyncTaskPoolMonitor this$0>;

        $r19 = staticinvoke <androidx.test.espresso.base.AsyncTaskPoolMonitor: java.util.concurrent.atomic.AtomicInteger '-$$Nest$fgetactiveBarrierChecks'(androidx.test.espresso.base.AsyncTaskPoolMonitor)>($r18);

        virtualinvoke $r19.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        throw r26;

     label11:
        $r22 = r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor$2: androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor this$1>;

        $r23 = $r22.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor: androidx.test.espresso.base.AsyncTaskPoolMonitor this$0>;

        $r24 = staticinvoke <androidx.test.espresso.base.AsyncTaskPoolMonitor: java.util.concurrent.atomic.AtomicInteger '-$$Nest$fgetactiveBarrierChecks'(androidx.test.espresso.base.AsyncTaskPoolMonitor)>($r23);

        virtualinvoke $r24.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        goto label01;

        catch java.lang.InterruptedException from label02 to label03 with label05;
        catch java.util.concurrent.BrokenBarrierException from label02 to label03 with label08;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label09 to label10 with label10;
    }

androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor-IA
androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor
<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor: java.lang.Runnable onIdle>
<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor: java.util.concurrent.atomic.AtomicInteger barrierGeneration>
<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor: java.util.concurrent.CyclicBarrier barrier>
<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor: boolean poisoned>
<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor: androidx.test.espresso.base.AsyncTaskPoolMonitor this$0>
    static volatile java.util.concurrent.CyclicBarrier '-$$Nest$fgetbarrier'(androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor)
    {
        androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor r0;
        java.util.concurrent.CyclicBarrier $r1;

        r0 := @parameter0: androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor;

        $r1 = r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor: java.util.concurrent.CyclicBarrier barrier>;

        return $r1;
    }

    static volatile java.util.concurrent.atomic.AtomicInteger '-$$Nest$fgetbarrierGeneration'(androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor)
    {
        androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor r0;
        java.util.concurrent.atomic.AtomicInteger $r1;

        r0 := @parameter0: androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor;

        $r1 = r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor: java.util.concurrent.atomic.AtomicInteger barrierGeneration>;

        return $r1;
    }

    static volatile void '-$$Nest$mmonitorForIdle'(androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor)
    {
        androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor r0;

        r0 := @parameter0: androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor;

        specialinvoke r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor: void monitorForIdle()>();

        return;
    }

    static volatile void '-$$Nest$mpoison'(androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor)
    {
        androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor r0;

        r0 := @parameter0: androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor;

        specialinvoke r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor: void poison()>();

        return;
    }

    private void <init>(androidx.test.espresso.base.AsyncTaskPoolMonitor, java.lang.Runnable)
    {
        androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor r0;
        androidx.test.espresso.base.AsyncTaskPoolMonitor r1;
        java.lang.Runnable r2, $r5;
        androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor$1 r3;
        java.lang.Object $r4;
        java.util.concurrent.atomic.AtomicInteger r6;
        java.util.concurrent.CyclicBarrier r7;
        java.util.concurrent.ThreadPoolExecutor r8;
        int i0;

        r0 := @this: androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor;

        r1 := @parameter0: androidx.test.espresso.base.AsyncTaskPoolMonitor;

        r2 := @parameter1: java.lang.Runnable;

        r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor: androidx.test.espresso.base.AsyncTaskPoolMonitor this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r6 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke r6.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor: java.util.concurrent.atomic.AtomicInteger barrierGeneration> = r6;

        $r4 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r5 = (java.lang.Runnable) $r4;

        r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor: java.lang.Runnable onIdle> = $r5;

        r7 = new java.util.concurrent.CyclicBarrier;

        r8 = staticinvoke <androidx.test.espresso.base.AsyncTaskPoolMonitor: java.util.concurrent.ThreadPoolExecutor '-$$Nest$fgetpool'(androidx.test.espresso.base.AsyncTaskPoolMonitor)>(r1);

        i0 = virtualinvoke r8.<java.util.concurrent.ThreadPoolExecutor: int getCorePoolSize()>();

        r3 = new androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor$1;

        specialinvoke r3.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor$1: void <init>(androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor,androidx.test.espresso.base.AsyncTaskPoolMonitor,java.lang.Runnable)>(r0, r1, r2);

        specialinvoke r7.<java.util.concurrent.CyclicBarrier: void <init>(int,java.lang.Runnable)>(i0, r3);

        r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor: java.util.concurrent.CyclicBarrier barrier> = r7;

        return;
    }

    void <init>(androidx.test.espresso.base.AsyncTaskPoolMonitor, java.lang.Runnable, androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor-IA)
    {
        androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor r0;
        androidx.test.espresso.base.AsyncTaskPoolMonitor r1;
        java.lang.Runnable r2;
        androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor-IA r3;

        r0 := @this: androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor;

        r1 := @parameter0: androidx.test.espresso.base.AsyncTaskPoolMonitor;

        r2 := @parameter1: java.lang.Runnable;

        r3 := @parameter2: androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor-IA;

        specialinvoke r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor: void <init>(androidx.test.espresso.base.AsyncTaskPoolMonitor,java.lang.Runnable)>(r1, r2);

        return;
    }

    private void monitorForIdle()
    {
        androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor r0;
        int i0, i1;
        androidx.test.espresso.base.AsyncTaskPoolMonitor$BarrierRestarter r1;
        androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor$2 r2;
        boolean $z0, $z1;
        androidx.test.espresso.base.AsyncTaskPoolMonitor $r3, $r4, $r8, r11;
        java.util.concurrent.ThreadPoolExecutor $r5, r12;
        java.util.concurrent.atomic.AtomicInteger $r6;
        java.util.concurrent.CyclicBarrier $r7;
        java.util.concurrent.atomic.AtomicReference $r9;
        java.lang.Runnable $r10;

        r0 := @this: androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor;

        $z0 = r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor: boolean poisoned>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor: androidx.test.espresso.base.AsyncTaskPoolMonitor this$0>;

        $z1 = virtualinvoke $r3.<androidx.test.espresso.base.AsyncTaskPoolMonitor: boolean isIdleNow()>();

        if $z1 == 0 goto label2;

        $r8 = r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor: androidx.test.espresso.base.AsyncTaskPoolMonitor this$0>;

        $r9 = staticinvoke <androidx.test.espresso.base.AsyncTaskPoolMonitor: java.util.concurrent.atomic.AtomicReference '-$$Nest$fgetmonitor'(androidx.test.espresso.base.AsyncTaskPoolMonitor)>($r8);

        staticinvoke <androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReference,java.lang.Object,java.lang.Object)>($r9, r0, null);

        $r10 = r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor: java.lang.Runnable onIdle>;

        interfaceinvoke $r10.<java.lang.Runnable: void run()>();

        return;

     label2:
        $r4 = r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor: androidx.test.espresso.base.AsyncTaskPoolMonitor this$0>;

        $r5 = staticinvoke <androidx.test.espresso.base.AsyncTaskPoolMonitor: java.util.concurrent.ThreadPoolExecutor '-$$Nest$fgetpool'(androidx.test.espresso.base.AsyncTaskPoolMonitor)>($r4);

        i0 = virtualinvoke $r5.<java.util.concurrent.ThreadPoolExecutor: int getCorePoolSize()>();

        r1 = new androidx.test.espresso.base.AsyncTaskPoolMonitor$BarrierRestarter;

        $r7 = r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor: java.util.concurrent.CyclicBarrier barrier>;

        $r6 = r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor: java.util.concurrent.atomic.AtomicInteger barrierGeneration>;

        specialinvoke r1.<androidx.test.espresso.base.AsyncTaskPoolMonitor$BarrierRestarter: void <init>(java.util.concurrent.CyclicBarrier,java.util.concurrent.atomic.AtomicInteger)>($r7, $r6);

        i1 = 0;

     label3:
        if i1 >= i0 goto label4;

        r11 = r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor: androidx.test.espresso.base.AsyncTaskPoolMonitor this$0>;

        r12 = staticinvoke <androidx.test.espresso.base.AsyncTaskPoolMonitor: java.util.concurrent.ThreadPoolExecutor '-$$Nest$fgetpool'(androidx.test.espresso.base.AsyncTaskPoolMonitor)>(r11);

        r2 = new androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor$2;

        specialinvoke r2.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor$2: void <init>(androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor,androidx.test.espresso.base.AsyncTaskPoolMonitor$BarrierRestarter)>(r0, r1);

        virtualinvoke r12.<java.util.concurrent.ThreadPoolExecutor: void execute(java.lang.Runnable)>(r2);

        i1 = i1 + 1;

        goto label3;

     label4:
        return;
    }

    private void poison()
    {
        androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor r0;
        java.util.concurrent.CyclicBarrier $r1;

        r0 := @this: androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor;

        r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor: boolean poisoned> = 1;

        $r1 = r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor: java.util.concurrent.CyclicBarrier barrier>;

        virtualinvoke $r1.<java.util.concurrent.CyclicBarrier: void reset()>();

        return;
    }

    static volatile boolean '-$$Nest$fgetpoisoned'(androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor)
    {
        androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor r0;
        boolean $z0;

        r0 := @parameter0: androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor;

        $z0 = r0.<androidx.test.espresso.base.AsyncTaskPoolMonitor$IdleMonitor: boolean poisoned>;

        return $z0;
    }

