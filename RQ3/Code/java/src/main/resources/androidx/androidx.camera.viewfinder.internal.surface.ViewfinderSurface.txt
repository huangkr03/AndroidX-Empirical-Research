androidx.camera.viewfinder.internal.surface.ViewfinderSurface
<androidx.camera.viewfinder.internal.surface.ViewfinderSurface: java.lang.String TAG>
<androidx.camera.viewfinder.internal.surface.ViewfinderSurface: java.lang.Object mLock>
<androidx.camera.viewfinder.internal.surface.ViewfinderSurface: com.google.common.util.concurrent.ListenableFuture mTerminationFuture>
<androidx.camera.viewfinder.internal.surface.ViewfinderSurface: boolean mClosed>
<androidx.camera.viewfinder.internal.surface.ViewfinderSurface: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mTerminationCompleter>
    public void <init>()
    {
        androidx.camera.viewfinder.internal.surface.ViewfinderSurface r0;
        java.lang.Object $r1;
        androidx.concurrent.futures.CallbackToFutureAdapter$Resolver $r2;
        com.google.common.util.concurrent.ListenableFuture $r3;

        r0 := @this: androidx.camera.viewfinder.internal.surface.ViewfinderSurface;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.viewfinder.internal.surface.ViewfinderSurface: java.lang.Object mLock> = $r1;

        r0.<androidx.camera.viewfinder.internal.surface.ViewfinderSurface: boolean mClosed> = 0;

        $r2 = dynamicinvoke "attachCompleter" <androidx.concurrent.futures.CallbackToFutureAdapter$Resolver (androidx.camera.viewfinder.internal.surface.ViewfinderSurface)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.viewfinder.internal.surface.ViewfinderSurface: java.lang.Object lambda$new$0(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer));

        $r3 = staticinvoke <androidx.concurrent.futures.CallbackToFutureAdapter: com.google.common.util.concurrent.ListenableFuture getFuture(androidx.concurrent.futures.CallbackToFutureAdapter$Resolver)>($r2);

        r0.<androidx.camera.viewfinder.internal.surface.ViewfinderSurface: com.google.common.util.concurrent.ListenableFuture mTerminationFuture> = $r3;

        return;
    }

    public final com.google.common.util.concurrent.ListenableFuture getSurface()
    {
        androidx.camera.viewfinder.internal.surface.ViewfinderSurface r0;
        com.google.common.util.concurrent.ListenableFuture $r1;

        r0 := @this: androidx.camera.viewfinder.internal.surface.ViewfinderSurface;

        $r1 = virtualinvoke r0.<androidx.camera.viewfinder.internal.surface.ViewfinderSurface: com.google.common.util.concurrent.ListenableFuture provideSurfaceAsync()>();

        return $r1;
    }

    public com.google.common.util.concurrent.ListenableFuture getTerminationFuture()
    {
        androidx.camera.viewfinder.internal.surface.ViewfinderSurface r0;
        com.google.common.util.concurrent.ListenableFuture $r1, $r2;

        r0 := @this: androidx.camera.viewfinder.internal.surface.ViewfinderSurface;

        $r1 = r0.<androidx.camera.viewfinder.internal.surface.ViewfinderSurface: com.google.common.util.concurrent.ListenableFuture mTerminationFuture>;

        $r2 = staticinvoke <androidx.camera.viewfinder.internal.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture nonCancellationPropagating(com.google.common.util.concurrent.ListenableFuture)>($r1);

        return $r2;
    }

    public void close()
    {
        androidx.camera.viewfinder.internal.surface.ViewfinderSurface r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r8;
        boolean $z0;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r9;

        r0 := @this: androidx.camera.viewfinder.internal.surface.ViewfinderSurface;

        r9 = null;

        $r3 = r0.<androidx.camera.viewfinder.internal.surface.ViewfinderSurface: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = r0.<androidx.camera.viewfinder.internal.surface.ViewfinderSurface: boolean mClosed>;

        if $z0 != 0 goto label2;

        r0.<androidx.camera.viewfinder.internal.surface.ViewfinderSurface: boolean mClosed> = 1;

        r9 = r0.<androidx.camera.viewfinder.internal.surface.ViewfinderSurface: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mTerminationCompleter>;

        r0.<androidx.camera.viewfinder.internal.surface.ViewfinderSurface: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mTerminationCompleter> = null;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("surface closed,  closed=true ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.viewfinder.internal.utils.Logger: void d(java.lang.String,java.lang.String)>("ViewfinderSurface", $r7);

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        if r9 == null goto label7;

        virtualinvoke r9.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean set(java.lang.Object)>(null);

     label7:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

<androidx.camera.viewfinder.internal.surface.ViewfinderSurface: com.google.common.util.concurrent.ListenableFuture provideSurfaceAsync()>
    private java.lang.Object lambda$new$0(androidx.concurrent.futures.CallbackToFutureAdapter$Completer) throws java.lang.Exception
    {
        androidx.camera.viewfinder.internal.surface.ViewfinderSurface r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r1;
        java.lang.Object r2, $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;
        java.lang.String $r8;

        r0 := @this: androidx.camera.viewfinder.internal.surface.ViewfinderSurface;

        r1 := @parameter0: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        $r3 = r0.<androidx.camera.viewfinder.internal.surface.ViewfinderSurface: java.lang.Object mLock>;

        r2 = $r3;

        entermonitor $r3;

        r0.<androidx.camera.viewfinder.internal.surface.ViewfinderSurface: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mTerminationCompleter> = r1;

        exitmonitor r2;

        goto label1;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ViewfinderSurface-termination(");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

androidx.camera.viewfinder.internal.surface.ViewfinderSurface$SurfaceUnavailableException
    public void <init>(java.lang.String)
    {
        androidx.camera.viewfinder.internal.surface.ViewfinderSurface$SurfaceUnavailableException r0;
        java.lang.String r1;

        r0 := @this: androidx.camera.viewfinder.internal.surface.ViewfinderSurface$SurfaceUnavailableException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Exception: void <init>(java.lang.String)>(r1);

        return;
    }

