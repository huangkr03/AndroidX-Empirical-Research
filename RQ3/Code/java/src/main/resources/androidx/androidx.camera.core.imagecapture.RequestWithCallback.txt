androidx.camera.core.imagecapture.RequestWithCallback
<androidx.camera.core.imagecapture.RequestWithCallback: androidx.camera.core.imagecapture.TakePictureRequest mTakePictureRequest>
<androidx.camera.core.imagecapture.RequestWithCallback: com.google.common.util.concurrent.ListenableFuture mCaptureFuture>
<androidx.camera.core.imagecapture.RequestWithCallback: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mCaptureCompleter>
<androidx.camera.core.imagecapture.RequestWithCallback: boolean mIsComplete>
<androidx.camera.core.imagecapture.RequestWithCallback: boolean mIsAborted>
    void <init>(androidx.camera.core.imagecapture.TakePictureRequest)
    {
        androidx.camera.core.imagecapture.RequestWithCallback r0;
        androidx.camera.core.imagecapture.TakePictureRequest r1;
        androidx.concurrent.futures.CallbackToFutureAdapter$Resolver $r2;
        com.google.common.util.concurrent.ListenableFuture $r3;

        r0 := @this: androidx.camera.core.imagecapture.RequestWithCallback;

        r1 := @parameter0: androidx.camera.core.imagecapture.TakePictureRequest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.core.imagecapture.RequestWithCallback: boolean mIsComplete> = 0;

        r0.<androidx.camera.core.imagecapture.RequestWithCallback: boolean mIsAborted> = 0;

        r0.<androidx.camera.core.imagecapture.RequestWithCallback: androidx.camera.core.imagecapture.TakePictureRequest mTakePictureRequest> = r1;

        $r2 = dynamicinvoke "attachCompleter" <androidx.concurrent.futures.CallbackToFutureAdapter$Resolver (androidx.camera.core.imagecapture.RequestWithCallback)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.imagecapture.RequestWithCallback: java.lang.Object lambda$new$0(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer));

        $r3 = staticinvoke <androidx.concurrent.futures.CallbackToFutureAdapter: com.google.common.util.concurrent.ListenableFuture getFuture(androidx.concurrent.futures.CallbackToFutureAdapter$Resolver)>($r2);

        r0.<androidx.camera.core.imagecapture.RequestWithCallback: com.google.common.util.concurrent.ListenableFuture mCaptureFuture> = $r3;

        return;
    }

    public void onImageCaptured()
    {
        androidx.camera.core.imagecapture.RequestWithCallback r0;
        boolean $z0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer $r1;

        r0 := @this: androidx.camera.core.imagecapture.RequestWithCallback;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $z0 = r0.<androidx.camera.core.imagecapture.RequestWithCallback: boolean mIsAborted>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = r0.<androidx.camera.core.imagecapture.RequestWithCallback: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mCaptureCompleter>;

        virtualinvoke $r1.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean set(java.lang.Object)>(null);

        return;
    }

    public void onFinalResult(androidx.camera.core.ImageCapture$OutputFileResults)
    {
        androidx.camera.core.imagecapture.RequestWithCallback r0;
        androidx.camera.core.ImageCapture$OutputFileResults r1;
        boolean $z0;
        androidx.camera.core.imagecapture.TakePictureRequest $r2;

        r0 := @this: androidx.camera.core.imagecapture.RequestWithCallback;

        r1 := @parameter0: androidx.camera.core.ImageCapture$OutputFileResults;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $z0 = r0.<androidx.camera.core.imagecapture.RequestWithCallback: boolean mIsAborted>;

        if $z0 == 0 goto label1;

        return;

     label1:
        specialinvoke r0.<androidx.camera.core.imagecapture.RequestWithCallback: void checkOnImageCaptured()>();

        specialinvoke r0.<androidx.camera.core.imagecapture.RequestWithCallback: void markComplete()>();

        $r2 = r0.<androidx.camera.core.imagecapture.RequestWithCallback: androidx.camera.core.imagecapture.TakePictureRequest mTakePictureRequest>;

        virtualinvoke $r2.<androidx.camera.core.imagecapture.TakePictureRequest: void onResult(androidx.camera.core.ImageCapture$OutputFileResults)>(r1);

        return;
    }

    public void onFinalResult(androidx.camera.core.ImageProxy)
    {
        androidx.camera.core.imagecapture.RequestWithCallback r0;
        androidx.camera.core.ImageProxy r1;
        boolean $z0;
        androidx.camera.core.imagecapture.TakePictureRequest $r2;

        r0 := @this: androidx.camera.core.imagecapture.RequestWithCallback;

        r1 := @parameter0: androidx.camera.core.ImageProxy;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $z0 = r0.<androidx.camera.core.imagecapture.RequestWithCallback: boolean mIsAborted>;

        if $z0 == 0 goto label1;

        return;

     label1:
        specialinvoke r0.<androidx.camera.core.imagecapture.RequestWithCallback: void checkOnImageCaptured()>();

        specialinvoke r0.<androidx.camera.core.imagecapture.RequestWithCallback: void markComplete()>();

        $r2 = r0.<androidx.camera.core.imagecapture.RequestWithCallback: androidx.camera.core.imagecapture.TakePictureRequest mTakePictureRequest>;

        virtualinvoke $r2.<androidx.camera.core.imagecapture.TakePictureRequest: void onResult(androidx.camera.core.ImageProxy)>(r1);

        return;
    }

    public void onProcessFailure(androidx.camera.core.ImageCaptureException)
    {
        androidx.camera.core.imagecapture.RequestWithCallback r0;
        androidx.camera.core.ImageCaptureException r1;
        boolean $z0;

        r0 := @this: androidx.camera.core.imagecapture.RequestWithCallback;

        r1 := @parameter0: androidx.camera.core.ImageCaptureException;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $z0 = r0.<androidx.camera.core.imagecapture.RequestWithCallback: boolean mIsAborted>;

        if $z0 == 0 goto label1;

        return;

     label1:
        specialinvoke r0.<androidx.camera.core.imagecapture.RequestWithCallback: void checkOnImageCaptured()>();

        specialinvoke r0.<androidx.camera.core.imagecapture.RequestWithCallback: void markComplete()>();

        specialinvoke r0.<androidx.camera.core.imagecapture.RequestWithCallback: void onFailure(androidx.camera.core.ImageCaptureException)>(r1);

        return;
    }

    public boolean isAborted()
    {
        androidx.camera.core.imagecapture.RequestWithCallback r0;
        boolean $z0;

        r0 := @this: androidx.camera.core.imagecapture.RequestWithCallback;

        $z0 = r0.<androidx.camera.core.imagecapture.RequestWithCallback: boolean mIsAborted>;

        return $z0;
    }

    public void onCaptureFailure(androidx.camera.core.ImageCaptureException)
    {
        androidx.camera.core.imagecapture.RequestWithCallback r0;
        androidx.camera.core.ImageCaptureException r1;
        boolean $z0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer $r2;

        r0 := @this: androidx.camera.core.imagecapture.RequestWithCallback;

        r1 := @parameter0: androidx.camera.core.ImageCaptureException;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $z0 = r0.<androidx.camera.core.imagecapture.RequestWithCallback: boolean mIsAborted>;

        if $z0 == 0 goto label1;

        return;

     label1:
        specialinvoke r0.<androidx.camera.core.imagecapture.RequestWithCallback: void markComplete()>();

        $r2 = r0.<androidx.camera.core.imagecapture.RequestWithCallback: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mCaptureCompleter>;

        virtualinvoke $r2.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean set(java.lang.Object)>(null);

        specialinvoke r0.<androidx.camera.core.imagecapture.RequestWithCallback: void onFailure(androidx.camera.core.ImageCaptureException)>(r1);

        return;
    }

    void abort(androidx.camera.core.ImageCaptureException)
    {
        androidx.camera.core.imagecapture.RequestWithCallback r0;
        androidx.camera.core.ImageCaptureException r1;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer $r2;

        r0 := @this: androidx.camera.core.imagecapture.RequestWithCallback;

        r1 := @parameter0: androidx.camera.core.ImageCaptureException;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        r0.<androidx.camera.core.imagecapture.RequestWithCallback: boolean mIsAborted> = 1;

        $r2 = r0.<androidx.camera.core.imagecapture.RequestWithCallback: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mCaptureCompleter>;

        virtualinvoke $r2.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean set(java.lang.Object)>(null);

        specialinvoke r0.<androidx.camera.core.imagecapture.RequestWithCallback: void onFailure(androidx.camera.core.ImageCaptureException)>(r1);

        return;
    }

    com.google.common.util.concurrent.ListenableFuture getCaptureFuture()
    {
        androidx.camera.core.imagecapture.RequestWithCallback r0;
        com.google.common.util.concurrent.ListenableFuture $r1;

        r0 := @this: androidx.camera.core.imagecapture.RequestWithCallback;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r1 = r0.<androidx.camera.core.imagecapture.RequestWithCallback: com.google.common.util.concurrent.ListenableFuture mCaptureFuture>;

        return $r1;
    }

    private void checkOnImageCaptured()
    {
        androidx.camera.core.imagecapture.RequestWithCallback r0;
        com.google.common.util.concurrent.ListenableFuture $r1;
        boolean $z0;

        r0 := @this: androidx.camera.core.imagecapture.RequestWithCallback;

        $r1 = r0.<androidx.camera.core.imagecapture.RequestWithCallback: com.google.common.util.concurrent.ListenableFuture mCaptureFuture>;

        $z0 = interfaceinvoke $r1.<com.google.common.util.concurrent.ListenableFuture: boolean isDone()>();

        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z0, "onImageCaptured() must be called before onFinalResult()");

        return;
    }

    private void markComplete()
    {
        androidx.camera.core.imagecapture.RequestWithCallback r0;
        boolean $z0, $z1;

        r0 := @this: androidx.camera.core.imagecapture.RequestWithCallback;

        $z0 = r0.<androidx.camera.core.imagecapture.RequestWithCallback: boolean mIsComplete>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z1, "The callback can only complete once.");

        r0.<androidx.camera.core.imagecapture.RequestWithCallback: boolean mIsComplete> = 1;

        return;
    }

    private void onFailure(androidx.camera.core.ImageCaptureException)
    {
        androidx.camera.core.imagecapture.RequestWithCallback r0;
        androidx.camera.core.ImageCaptureException r1;
        androidx.camera.core.imagecapture.TakePictureRequest $r2;

        r0 := @this: androidx.camera.core.imagecapture.RequestWithCallback;

        r1 := @parameter0: androidx.camera.core.ImageCaptureException;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r2 = r0.<androidx.camera.core.imagecapture.RequestWithCallback: androidx.camera.core.imagecapture.TakePictureRequest mTakePictureRequest>;

        virtualinvoke $r2.<androidx.camera.core.imagecapture.TakePictureRequest: void onError(androidx.camera.core.ImageCaptureException)>(r1);

        return;
    }

    private java.lang.Object lambda$new$0(androidx.concurrent.futures.CallbackToFutureAdapter$Completer) throws java.lang.Exception
    {
        androidx.camera.core.imagecapture.RequestWithCallback r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r1;

        r0 := @this: androidx.camera.core.imagecapture.RequestWithCallback;

        r1 := @parameter0: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        r0.<androidx.camera.core.imagecapture.RequestWithCallback: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mCaptureCompleter> = r1;

        return "CaptureCompleteFuture";
    }

