androidx.ui.core.LayoutTreeConsistencyChecker
<androidx.ui.core.LayoutTreeConsistencyChecker: androidx.ui.core.LayoutNode root>
<androidx.ui.core.LayoutTreeConsistencyChecker: kotlin.jvm.functions.Function0 duringMeasureLayout>
<androidx.ui.core.LayoutTreeConsistencyChecker: androidx.ui.core.DepthSortedSet relayoutNodes>
<androidx.ui.core.LayoutTreeConsistencyChecker: java.util.List postponedMeasureRequests>
    public void <init>(androidx.ui.core.LayoutNode, kotlin.jvm.functions.Function0, androidx.ui.core.DepthSortedSet, java.util.List)
    {
        androidx.ui.core.LayoutTreeConsistencyChecker r0;
        androidx.ui.core.LayoutNode r1;
        kotlin.jvm.functions.Function0 r2;
        androidx.ui.core.DepthSortedSet r3;
        java.util.List r4;

        r0 := @this: androidx.ui.core.LayoutTreeConsistencyChecker;

        r1 := @parameter0: androidx.ui.core.LayoutNode;

        r2 := @parameter1: kotlin.jvm.functions.Function0;

        r3 := @parameter2: androidx.ui.core.DepthSortedSet;

        r4 := @parameter3: java.util.List;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "root");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "duringMeasureLayout");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "relayoutNodes");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "postponedMeasureRequests");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.ui.core.LayoutTreeConsistencyChecker: androidx.ui.core.LayoutNode root> = r1;

        r0.<androidx.ui.core.LayoutTreeConsistencyChecker: kotlin.jvm.functions.Function0 duringMeasureLayout> = r2;

        r0.<androidx.ui.core.LayoutTreeConsistencyChecker: androidx.ui.core.DepthSortedSet relayoutNodes> = r3;

        r0.<androidx.ui.core.LayoutTreeConsistencyChecker: java.util.List postponedMeasureRequests> = r4;

        return;
    }

    public final void assertConsistent()
    {
        androidx.ui.core.LayoutTreeConsistencyChecker r0;
        boolean z0, $z1, $z2;
        androidx.ui.core.LayoutNode $r1;
        androidx.ui.core.ComponentNode $r2;
        androidx.ui.core.DepthSortedSet $r3;
        java.lang.String $r4;
        java.lang.IllegalStateException $r5;

        r0 := @this: androidx.ui.core.LayoutTreeConsistencyChecker;

        $r1 = r0.<androidx.ui.core.LayoutTreeConsistencyChecker: androidx.ui.core.LayoutNode root>;

        $r2 = (androidx.ui.core.ComponentNode) $r1;

        $z1 = specialinvoke r0.<androidx.ui.core.LayoutTreeConsistencyChecker: boolean isTreeConsistent(androidx.ui.core.ComponentNode)>($r2);

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z0 = $z2;

        if z0 == 0 goto label3;

        specialinvoke r0.<androidx.ui.core.LayoutTreeConsistencyChecker: void logTree()>();

        $r3 = r0.<androidx.ui.core.LayoutTreeConsistencyChecker: androidx.ui.core.DepthSortedSet relayoutNodes>;

        $r4 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("List of relayoutNodes: ", $r3);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("AndroidOwner", $r4);

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Inconsistency found! See the printed tree");

        throw $r5;

     label3:
        return;
    }

    private final boolean isTreeConsistent(androidx.ui.core.ComponentNode)
    {
        androidx.ui.core.LayoutTreeConsistencyChecker r0;
        androidx.ui.core.ComponentNode r1, r2, r3;
        int i0, i1, i2, i3;
        boolean $z2, $z3, $z4;
        androidx.ui.core.LayoutNode $r4;

        r0 := @this: androidx.ui.core.LayoutTreeConsistencyChecker;

        r1 := @parameter0: androidx.ui.core.ComponentNode;

        $z2 = r1 instanceof androidx.ui.core.LayoutNode;

        if $z2 == 0 goto label1;

        $r4 = (androidx.ui.core.LayoutNode) r1;

        $z4 = specialinvoke r0.<androidx.ui.core.LayoutTreeConsistencyChecker: boolean consistentLayoutState(androidx.ui.core.LayoutNode)>($r4);

        if $z4 != 0 goto label1;

        return 0;

     label1:
        r2 = r1;

        i0 = virtualinvoke r2.<androidx.ui.core.ComponentNode: int getCount()>();

        i3 = 0;

        i1 = i0 + -1;

        if i0 == -2147483648 goto label4;

        if i3 > i1 goto label4;

     label2:
        i2 = i3;

        i3 = i3 + 1;

        r3 = virtualinvoke r2.<androidx.ui.core.ComponentNode: androidx.ui.core.ComponentNode get(int)>(i2);

        $z3 = specialinvoke r0.<androidx.ui.core.LayoutTreeConsistencyChecker: boolean isTreeConsistent(androidx.ui.core.ComponentNode)>(r3);

        if $z3 != 0 goto label3;

        return 0;

     label3:
        if i3 <= i1 goto label2;

     label4:
        return 1;
    }

    private final boolean consistentLayoutState(androidx.ui.core.LayoutNode)
    {
        androidx.ui.core.LayoutTreeConsistencyChecker r0;
        androidx.ui.core.LayoutNode $r1, r2, $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18;
        java.util.List $r4;
        long $l0, $l1;
        byte $b2;
        androidx.ui.core.ComponentNode $r5, $r7;
        androidx.ui.core.DepthSortedSet $r6, $r8;

        r0 := @this: androidx.ui.core.LayoutTreeConsistencyChecker;

        $r1 := @parameter0: androidx.ui.core.LayoutNode;

        $r3 = r0.<androidx.ui.core.LayoutTreeConsistencyChecker: androidx.ui.core.LayoutNode root>;

        if $r1 != $r3 goto label01;

        $z15 = virtualinvoke $r1.<androidx.ui.core.LayoutNode: boolean getNeedsRemeasure()>();

        if $z15 == 0 goto label01;

        $r8 = r0.<androidx.ui.core.LayoutTreeConsistencyChecker: androidx.ui.core.DepthSortedSet relayoutNodes>;

        $r7 = (androidx.ui.core.ComponentNode) $r1;

        $z16 = virtualinvoke $r8.<androidx.ui.core.DepthSortedSet: boolean contains(androidx.ui.core.ComponentNode)>($r7);

        return $z16;

     label01:
        r2 = virtualinvoke $r1.<androidx.ui.core.LayoutNode: androidx.ui.core.LayoutNode getParentLayoutNode()>();

        if r2 == null goto label15;

        $z0 = virtualinvoke $r1.<androidx.ui.core.LayoutNode: boolean isPlaced()>();

        if $z0 == 0 goto label15;

        $z1 = virtualinvoke $r1.<androidx.ui.core.LayoutNode: boolean getNeedsRelayout()>();

        if $z1 == 0 goto label05;

        $z10 = virtualinvoke $r1.<androidx.ui.core.LayoutNode: boolean getNeedsRemeasure()>();

        if $z10 == 0 goto label02;

        return 0;

     label02:
        $z11 = virtualinvoke r2.<androidx.ui.core.LayoutNode: boolean getNeedsRelayout()>();

        if $z11 != 0 goto label03;

        $z12 = virtualinvoke r2.<androidx.ui.core.LayoutNode: boolean getNeedsRemeasure()>();

        if $z12 != 0 goto label03;

        $z13 = virtualinvoke r2.<androidx.ui.core.LayoutNode: boolean isMeasuring()>();

        if $z13 == 0 goto label04;

     label03:
        return 1;

     label04:
        $r6 = r0.<androidx.ui.core.LayoutTreeConsistencyChecker: androidx.ui.core.DepthSortedSet relayoutNodes>;

        $r5 = (androidx.ui.core.ComponentNode) $r1;

        $z14 = virtualinvoke $r6.<androidx.ui.core.DepthSortedSet: boolean contains(androidx.ui.core.ComponentNode)>($r5);

        return $z14;

     label05:
        $z2 = virtualinvoke $r1.<androidx.ui.core.LayoutNode: boolean getNeedsRemeasure()>();

        if $z2 == 0 goto label15;

        $r4 = r0.<androidx.ui.core.LayoutTreeConsistencyChecker: java.util.List postponedMeasureRequests>;

        $z3 = interfaceinvoke $r4.<java.util.List: boolean contains(java.lang.Object)>($r1);

        if $z3 == 0 goto label06;

        return 1;

     label06:
        $z4 = virtualinvoke r2.<androidx.ui.core.LayoutNode: boolean isMeasuring()>();

        if $z4 != 0 goto label07;

        $z5 = virtualinvoke r2.<androidx.ui.core.LayoutNode: boolean isLayingOut()>();

        if $z5 == 0 goto label10;

     label07:
        $l0 = virtualinvoke r2.<androidx.ui.core.LayoutNode: long getMeasureIteration$ui_platform_release()>();

        $l1 = virtualinvoke $r1.<androidx.ui.core.LayoutNode: long getMeasureIteration$ui_platform_release()>();

        $b2 = $l0 cmp $l1;

        if $b2 == 0 goto label08;

        $z17 = 1;

        goto label09;

     label08:
        $z17 = 0;

     label09:
        return $z17;

     label10:
        $z6 = virtualinvoke $r1.<androidx.ui.core.LayoutNode: boolean getAffectsParentSize()>();

        if $z6 == 0 goto label11;

        $z9 = virtualinvoke r2.<androidx.ui.core.LayoutNode: boolean getNeedsRemeasure()>();

        return $z9;

     label11:
        $z7 = virtualinvoke r2.<androidx.ui.core.LayoutNode: boolean getNeedsRelayout()>();

        if $z7 != 0 goto label12;

        $z8 = virtualinvoke r2.<androidx.ui.core.LayoutNode: boolean getNeedsRemeasure()>();

        if $z8 == 0 goto label13;

     label12:
        $z18 = 1;

        goto label14;

     label13:
        $z18 = 0;

     label14:
        return $z18;

     label15:
        return 1;
    }

    private final java.lang.String nodeToString(androidx.ui.core.ComponentNode)
    {
        androidx.ui.core.LayoutTreeConsistencyChecker r0;
        androidx.ui.core.ComponentNode r1;
        java.lang.String r2, $r26;
        java.lang.StringBuilder r3, $r5, $r21, $r22, $r24, $r25;
        boolean z0, z1, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        androidx.ui.core.LayoutNode $r7, $r8, $r9, $r13, $r14, $r15, $r16, $r23;
        kotlin.jvm.functions.Function0 $r10;
        java.lang.Object $r11;
        java.lang.Boolean $r12;
        long $l0;

        r0 := @this: androidx.ui.core.LayoutTreeConsistencyChecker;

        r1 := @parameter0: androidx.ui.core.ComponentNode;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        r3 = $r5;

        z0 = 0;

        z1 = 0;

        $z3 = r1 instanceof androidx.ui.core.LayoutNode;

        if $z3 == 0 goto label8;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = (androidx.ui.core.LayoutNode) r1;

        $z4 = virtualinvoke $r7.<androidx.ui.core.LayoutNode: boolean getNeedsRemeasure()>();

        if $z4 == 0 goto label1;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[needsRemeasure]");

     label1:
        $r8 = (androidx.ui.core.LayoutNode) r1;

        $z5 = virtualinvoke $r8.<androidx.ui.core.LayoutNode: boolean getNeedsRelayout()>();

        if $z5 == 0 goto label2;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[needsRelayout]");

     label2:
        $r9 = (androidx.ui.core.LayoutNode) r1;

        $z6 = virtualinvoke $r9.<androidx.ui.core.LayoutNode: boolean isMeasuring()>();

        if $z6 == 0 goto label3;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[isMeasuring]");

     label3:
        $r10 = r0.<androidx.ui.core.LayoutTreeConsistencyChecker: kotlin.jvm.functions.Function0 duringMeasureLayout>;

        $r11 = interfaceinvoke $r10.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        $r12 = (java.lang.Boolean) $r11;

        $z7 = virtualinvoke $r12.<java.lang.Boolean: boolean booleanValue()>();

        if $z7 == 0 goto label4;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[#");

        $r23 = (androidx.ui.core.LayoutNode) r1;

        $l0 = virtualinvoke $r23.<androidx.ui.core.LayoutNode: long getMeasureIteration$ui_platform_release()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

     label4:
        $r13 = (androidx.ui.core.LayoutNode) r1;

        $z8 = virtualinvoke $r13.<androidx.ui.core.LayoutNode: boolean isLayingOut()>();

        if $z8 == 0 goto label5;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[isLayingOut]");

     label5:
        $r14 = (androidx.ui.core.LayoutNode) r1;

        $z9 = virtualinvoke $r14.<androidx.ui.core.LayoutNode: boolean isPlaced()>();

        if $z9 != 0 goto label6;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[!isPlaced]");

     label6:
        $r15 = (androidx.ui.core.LayoutNode) r1;

        $z10 = virtualinvoke $r15.<androidx.ui.core.LayoutNode: boolean getAffectsParentSize()>();

        if $z10 == 0 goto label7;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[affectsParentSize]");

     label7:
        $r16 = (androidx.ui.core.LayoutNode) r1;

        $z11 = specialinvoke r0.<androidx.ui.core.LayoutTreeConsistencyChecker: boolean consistentLayoutState(androidx.ui.core.LayoutNode)>($r16);

        if $z11 != 0 goto label8;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[INCONSISTENT]");

     label8:
        r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r2, "with(StringBuilder()) {\n            if (node is LayoutNode) {\n                append(node)\n                if (node.needsRemeasure) append(\"[needsRemeasure]\")\n                if (node.needsRelayout) append(\"[needsRelayout]\")\n                if (node.isMeasuring) append(\"[isMeasuring]\")\n                if (duringMeasureLayout()) append(\"[#${node.measureIteration}]\")\n                if (node.isLayingOut) append(\"[isLayingOut]\")\n                if (!node.isPlaced) append(\"[!isPlaced]\")\n                if (node.affectsParentSize) append(\"[affectsParentSize]\")\n                if (!node.consistentLayoutState()) {\n                    append(\"[INCONSISTENT]\")\n                }\n            }\n            toString()\n        }");

        return r2;
    }

    private final void logTree()
    {
        androidx.ui.core.LayoutTreeConsistencyChecker r0;
        androidx.ui.core.LayoutNode $r1;
        androidx.ui.core.ComponentNode $r2;

        r0 := @this: androidx.ui.core.LayoutTreeConsistencyChecker;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("AndroidOwner", "Tree state:");

        $r1 = r0.<androidx.ui.core.LayoutTreeConsistencyChecker: androidx.ui.core.LayoutNode root>;

        $r2 = (androidx.ui.core.ComponentNode) $r1;

        staticinvoke <androidx.ui.core.LayoutTreeConsistencyChecker: void logTree$printSubTree(androidx.ui.core.LayoutTreeConsistencyChecker,androidx.ui.core.ComponentNode,int)>(r0, $r2, 0);

        return;
    }

    private static final void logTree$printSubTree(androidx.ui.core.LayoutTreeConsistencyChecker, androidx.ui.core.ComponentNode, int)
    {
        androidx.ui.core.LayoutTreeConsistencyChecker $r0;
        androidx.ui.core.ComponentNode r1, r4, r21;
        int i0, i1, i2, $i3, $i4, $i6, i7, i8, $i9, $i10, i11, i12;
        kotlin.jvm.internal.Ref$ObjectRef r2, $r5;
        java.lang.String r3, $r16;
        kotlin.jvm.internal.Ref$IntRef $r6, $r8, $r10, $r18, $r20;
        java.lang.Object $r7, $r9, $r17, $r19;
        java.lang.StringBuilder $r11, r15;
        java.lang.CharSequence r14;
        boolean $z2;

        $r0 := @parameter0: androidx.ui.core.LayoutTreeConsistencyChecker;

        r1 := @parameter1: androidx.ui.core.ComponentNode;

        i0 := @parameter2: int;

        $r5 = new kotlin.jvm.internal.Ref$ObjectRef;

        specialinvoke $r5.<kotlin.jvm.internal.Ref$ObjectRef: void <init>()>();

        r2 = $r5;

        $r6 = new kotlin.jvm.internal.Ref$IntRef;

        specialinvoke $r6.<kotlin.jvm.internal.Ref$IntRef: void <init>()>();

        r2.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element> = $r6;

        $r7 = r2.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        $r8 = (kotlin.jvm.internal.Ref$IntRef) $r7;

        $r8.<kotlin.jvm.internal.Ref$IntRef: int element> = i0;

        r3 = specialinvoke $r0.<androidx.ui.core.LayoutTreeConsistencyChecker: java.lang.String nodeToString(androidx.ui.core.ComponentNode)>(r1);

        r14 = (java.lang.CharSequence) r3;

        $i3 = interfaceinvoke r14.<java.lang.CharSequence: int length()>();

        if $i3 <= 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        if $z2 == 0 goto label5;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        r15 = $r11;

        $i6 = 0;

        i7 = i0 + -1;

        if i0 == -2147483648 goto label4;

        if 0 > i7 goto label4;

     label3:
        i8 = $i6;

        $i6 = $i6 + 1;

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("..");

        if $i6 <= i7 goto label3;

     label4:
        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r16 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r15);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("AndroidOwner", $r16);

        $r17 = r2.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        $r18 = (kotlin.jvm.internal.Ref$IntRef) $r17;

        $r19 = r2.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        $r20 = (kotlin.jvm.internal.Ref$IntRef) $r19;

        $i9 = $r20.<kotlin.jvm.internal.Ref$IntRef: int element>;

        $i10 = $i9 + 1;

        $r18.<kotlin.jvm.internal.Ref$IntRef: int element> = $i10;

     label5:
        r21 = r1;

        i11 = virtualinvoke r21.<androidx.ui.core.ComponentNode: int getCount()>();

        i12 = 0;

        i1 = i11 + -1;

        if i11 == -2147483648 goto label7;

        if i12 > i1 goto label7;

     label6:
        i2 = i12;

        i12 = i12 + 1;

        r4 = virtualinvoke r21.<androidx.ui.core.ComponentNode: androidx.ui.core.ComponentNode get(int)>(i2);

        $r9 = r2.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        $r10 = (kotlin.jvm.internal.Ref$IntRef) $r9;

        $i4 = $r10.<kotlin.jvm.internal.Ref$IntRef: int element>;

        staticinvoke <androidx.ui.core.LayoutTreeConsistencyChecker: void logTree$printSubTree(androidx.ui.core.LayoutTreeConsistencyChecker,androidx.ui.core.ComponentNode,int)>($r0, r4, $i4);

        if i12 <= i1 goto label6;

     label7:
        return;
    }

