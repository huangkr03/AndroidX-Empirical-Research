androidx.work.impl.background.systemjob.SystemJobInfoConverter
<androidx.work.impl.background.systemjob.SystemJobInfoConverter: java.lang.String TAG>
<androidx.work.impl.background.systemjob.SystemJobInfoConverter: java.lang.String EXTRA_WORK_SPEC_ID>
<androidx.work.impl.background.systemjob.SystemJobInfoConverter: java.lang.String EXTRA_IS_PERIODIC>
<androidx.work.impl.background.systemjob.SystemJobInfoConverter: java.lang.String EXTRA_WORK_SPEC_GENERATION>
<androidx.work.impl.background.systemjob.SystemJobInfoConverter: android.content.ComponentName mWorkServiceComponent>
    void <init>(android.content.Context)
    {
        androidx.work.impl.background.systemjob.SystemJobInfoConverter r0;
        android.content.Context r1, r2;
        android.content.ComponentName $r3;

        r0 := @this: androidx.work.impl.background.systemjob.SystemJobInfoConverter;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r2 = virtualinvoke r1.<android.content.Context: android.content.Context getApplicationContext()>();

        $r3 = new android.content.ComponentName;

        specialinvoke $r3.<android.content.ComponentName: void <init>(android.content.Context,java.lang.Class)>(r2, class "Landroidx/work/impl/background/systemjob/SystemJobService;");

        r0.<androidx.work.impl.background.systemjob.SystemJobInfoConverter: android.content.ComponentName mWorkServiceComponent> = $r3;

        return;
    }

    android.app.job.JobInfo convert(androidx.work.impl.model.WorkSpec, int)
    {
        androidx.work.impl.background.systemjob.SystemJobInfoConverter r0;
        androidx.work.impl.model.WorkSpec r1;
        int i0, $i3, $i5, $i7, $i15, $i16, $i17;
        androidx.work.Constraints r2;
        android.os.PersistableBundle r3, $r5;
        android.app.job.JobInfo$Builder r4, $r7, $r9, $r10;
        long l1, l2, $l8, $l9, $l10, l13, $l14;
        java.lang.String $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, z11, $z12, z13;
        android.content.ComponentName $r8;
        androidx.work.NetworkType $r11;
        byte $b4, $b6, $b11, b12;
        java.util.Set $r16;
        java.lang.Object $r19;
        android.app.job.JobInfo$TriggerContentUri $r20;
        androidx.work.BackoffPolicy $r25, $r26;
        java.util.Iterator r28;
        androidx.work.Constraints$ContentUriTrigger r29;
        android.app.job.JobInfo $r30;

        r0 := @this: androidx.work.impl.background.systemjob.SystemJobInfoConverter;

        r1 := @parameter0: androidx.work.impl.model.WorkSpec;

        i0 := @parameter1: int;

        r2 = r1.<androidx.work.impl.model.WorkSpec: androidx.work.Constraints constraints>;

        $r5 = new android.os.PersistableBundle;

        specialinvoke $r5.<android.os.PersistableBundle: void <init>()>();

        r3 = $r5;

        $r6 = r1.<androidx.work.impl.model.WorkSpec: java.lang.String id>;

        virtualinvoke r3.<android.os.PersistableBundle: void putString(java.lang.String,java.lang.String)>("EXTRA_WORK_SPEC_ID", $r6);

        $i3 = virtualinvoke r1.<androidx.work.impl.model.WorkSpec: int getGeneration()>();

        virtualinvoke r3.<android.os.PersistableBundle: void putInt(java.lang.String,int)>("EXTRA_WORK_SPEC_GENERATION", $i3);

        $z0 = virtualinvoke r1.<androidx.work.impl.model.WorkSpec: boolean isPeriodic()>();

        virtualinvoke r3.<android.os.PersistableBundle: void putBoolean(java.lang.String,boolean)>("EXTRA_IS_PERIODIC", $z0);

        $r7 = new android.app.job.JobInfo$Builder;

        $r8 = r0.<androidx.work.impl.background.systemjob.SystemJobInfoConverter: android.content.ComponentName mWorkServiceComponent>;

        specialinvoke $r7.<android.app.job.JobInfo$Builder: void <init>(int,android.content.ComponentName)>(i0, $r8);

        $z1 = virtualinvoke r2.<androidx.work.Constraints: boolean requiresCharging()>();

        $r9 = virtualinvoke $r7.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setRequiresCharging(boolean)>($z1);

        $z2 = virtualinvoke r2.<androidx.work.Constraints: boolean requiresDeviceIdle()>();

        $r10 = virtualinvoke $r9.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setRequiresDeviceIdle(boolean)>($z2);

        r4 = virtualinvoke $r10.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setExtras(android.os.PersistableBundle)>(r3);

        $r11 = virtualinvoke r2.<androidx.work.Constraints: androidx.work.NetworkType getRequiredNetworkType()>();

        staticinvoke <androidx.work.impl.background.systemjob.SystemJobInfoConverter: void setRequiredNetwork(android.app.job.JobInfo$Builder,androidx.work.NetworkType)>(r4, $r11);

        $z3 = virtualinvoke r2.<androidx.work.Constraints: boolean requiresDeviceIdle()>();

        if $z3 != 0 goto label03;

        $r26 = r1.<androidx.work.impl.model.WorkSpec: androidx.work.BackoffPolicy backoffPolicy>;

        $r25 = <androidx.work.BackoffPolicy: androidx.work.BackoffPolicy LINEAR>;

        if $r26 != $r25 goto label01;

        $b11 = 0;

        goto label02;

     label01:
        $b11 = 1;

     label02:
        b12 = $b11;

        $l10 = r1.<androidx.work.impl.model.WorkSpec: long backoffDelayDuration>;

        virtualinvoke r4.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setBackoffCriteria(long,int)>($l10, b12);

     label03:
        l13 = virtualinvoke r1.<androidx.work.impl.model.WorkSpec: long calculateNextRunTime()>();

        l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l14 = l13 - l1;

        l2 = staticinvoke <java.lang.Math: long max(long,long)>($l14, 0L);

        $i15 = <android.os.Build$VERSION: int SDK_INT>;

        if $i15 > 28 goto label04;

        virtualinvoke r4.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setMinimumLatency(long)>(l2);

        goto label06;

     label04:
        $b4 = l2 cmp 0L;

        if $b4 <= 0 goto label05;

        virtualinvoke r4.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setMinimumLatency(long)>(l2);

        goto label06;

     label05:
        $z4 = r1.<androidx.work.impl.model.WorkSpec: boolean expedited>;

        if $z4 != 0 goto label06;

        virtualinvoke r4.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setImportantWhileForeground(boolean)>(1);

     label06:
        $i16 = <android.os.Build$VERSION: int SDK_INT>;

        if $i16 < 24 goto label09;

        $z8 = virtualinvoke r2.<androidx.work.Constraints: boolean hasContentUriTriggers()>();

        if $z8 == 0 goto label09;

        $r16 = virtualinvoke r2.<androidx.work.Constraints: java.util.Set getContentUriTriggers()>();

        r28 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();

     label07:
        $z9 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label08;

        $r19 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>();

        r29 = (androidx.work.Constraints$ContentUriTrigger) $r19;

        $r20 = staticinvoke <androidx.work.impl.background.systemjob.SystemJobInfoConverter: android.app.job.JobInfo$TriggerContentUri convertContentUriTrigger(androidx.work.Constraints$ContentUriTrigger)>(r29);

        virtualinvoke r4.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder addTriggerContentUri(android.app.job.JobInfo$TriggerContentUri)>($r20);

        goto label07;

     label08:
        $l8 = virtualinvoke r2.<androidx.work.Constraints: long getContentTriggerUpdateDelayMillis()>();

        virtualinvoke r4.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setTriggerContentUpdateDelay(long)>($l8);

        $l9 = virtualinvoke r2.<androidx.work.Constraints: long getContentTriggerMaxDelayMillis()>();

        virtualinvoke r4.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setTriggerContentMaxDelay(long)>($l9);

     label09:
        virtualinvoke r4.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setPersisted(boolean)>(0);

        $i17 = <android.os.Build$VERSION: int SDK_INT>;

        if $i17 < 26 goto label10;

        $z6 = virtualinvoke r2.<androidx.work.Constraints: boolean requiresBatteryNotLow()>();

        virtualinvoke r4.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setRequiresBatteryNotLow(boolean)>($z6);

        $z7 = virtualinvoke r2.<androidx.work.Constraints: boolean requiresStorageNotLow()>();

        virtualinvoke r4.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setRequiresStorageNotLow(boolean)>($z7);

     label10:
        $i5 = r1.<androidx.work.impl.model.WorkSpec: int runAttemptCount>;

        if $i5 <= 0 goto label11;

        $z10 = 1;

        goto label12;

     label11:
        $z10 = 0;

     label12:
        z11 = $z10;

        $b6 = l2 cmp 0L;

        if $b6 <= 0 goto label13;

        $z12 = 1;

        goto label14;

     label13:
        $z12 = 0;

     label14:
        z13 = $z12;

        $i7 = <android.os.Build$VERSION: int SDK_INT>;

        if $i7 < 31 goto label15;

        $z5 = r1.<androidx.work.impl.model.WorkSpec: boolean expedited>;

        if $z5 == 0 goto label15;

        if z11 != 0 goto label15;

        if z13 != 0 goto label15;

        virtualinvoke r4.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setExpedited(boolean)>(1);

     label15:
        $r30 = virtualinvoke r4.<android.app.job.JobInfo$Builder: android.app.job.JobInfo build()>();

        return $r30;
    }

    private static android.app.job.JobInfo$TriggerContentUri convertContentUriTrigger(androidx.work.Constraints$ContentUriTrigger)
    {
        androidx.work.Constraints$ContentUriTrigger r0;
        byte b0, $b1;
        boolean $z0;
        android.app.job.JobInfo$TriggerContentUri $r1;
        android.net.Uri $r2;

        r0 := @parameter0: androidx.work.Constraints$ContentUriTrigger;

        $z0 = virtualinvoke r0.<androidx.work.Constraints$ContentUriTrigger: boolean isTriggeredForDescendants()>();

        if $z0 == 0 goto label1;

        $b1 = 1;

        goto label2;

     label1:
        $b1 = 0;

     label2:
        b0 = $b1;

        $r1 = new android.app.job.JobInfo$TriggerContentUri;

        $r2 = virtualinvoke r0.<androidx.work.Constraints$ContentUriTrigger: android.net.Uri getUri()>();

        specialinvoke $r1.<android.app.job.JobInfo$TriggerContentUri: void <init>(android.net.Uri,int)>($r2, b0);

        return $r1;
    }

    static void setRequiredNetwork(android.app.job.JobInfo$Builder, androidx.work.NetworkType)
    {
        android.app.job.JobInfo$Builder r0;
        androidx.work.NetworkType r1, $r4;
        android.net.NetworkRequest r2;
        int $i0, $i1;
        android.net.NetworkRequest$Builder $r5, $r6;

        r0 := @parameter0: android.app.job.JobInfo$Builder;

        r1 := @parameter1: androidx.work.NetworkType;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 30 goto label1;

        $r4 = <androidx.work.NetworkType: androidx.work.NetworkType TEMPORARILY_UNMETERED>;

        if r1 != $r4 goto label1;

        $r5 = new android.net.NetworkRequest$Builder;

        specialinvoke $r5.<android.net.NetworkRequest$Builder: void <init>()>();

        $r6 = virtualinvoke $r5.<android.net.NetworkRequest$Builder: android.net.NetworkRequest$Builder addCapability(int)>(25);

        r2 = virtualinvoke $r6.<android.net.NetworkRequest$Builder: android.net.NetworkRequest build()>();

        virtualinvoke r0.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setRequiredNetwork(android.net.NetworkRequest)>(r2);

        goto label2;

     label1:
        $i1 = staticinvoke <androidx.work.impl.background.systemjob.SystemJobInfoConverter: int convertNetworkType(androidx.work.NetworkType)>(r1);

        virtualinvoke r0.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setRequiredNetworkType(int)>($i1);

     label2:
        return;
    }

    static int convertNetworkType(androidx.work.NetworkType)
    {
        androidx.work.NetworkType r0;
        int[] $r1;
        int $i0, $i1, $i2, $i3;
        androidx.work.Logger $r2;
        java.lang.String $r3, $r7;
        java.lang.StringBuilder $r4, $r5, $r6;

        r0 := @parameter0: androidx.work.NetworkType;

        $r1 = <androidx.work.impl.background.systemjob.SystemJobInfoConverter$1: int[] $SwitchMap$androidx$work$NetworkType>;

        $i0 = virtualinvoke r0.<androidx.work.NetworkType: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label5;
            default: goto label6;
        };

     label1:
        return 0;

     label2:
        return 1;

     label3:
        return 2;

     label4:
        $i3 = <android.os.Build$VERSION: int SDK_INT>;

        if $i3 < 24 goto label6;

        return 3;

     label5:
        $i2 = <android.os.Build$VERSION: int SDK_INT>;

        if $i2 < 26 goto label6;

        return 4;

     label6:
        $r2 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r3 = <androidx.work.impl.background.systemjob.SystemJobInfoConverter: java.lang.String TAG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("API version too low. Cannot convert network type value ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r3, $r7);

        return 1;
    }

    static void <clinit>()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <androidx.work.Logger: java.lang.String tagWithPrefix(java.lang.String)>("SystemJobInfoConverter");

        <androidx.work.impl.background.systemjob.SystemJobInfoConverter: java.lang.String TAG> = $r0;

        return;
    }

androidx.work.impl.background.systemjob.SystemJobInfoConverter$1
<androidx.work.impl.background.systemjob.SystemJobInfoConverter$1: int[] $SwitchMap$androidx$work$NetworkType>
    static void <clinit>()
    {
        androidx.work.NetworkType[] $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        int[] $r1, $r3, $r5, $r7, $r9, $r11;
        androidx.work.NetworkType $r2, $r4, $r6, $r8, $r10;
        java.lang.Throwable $r12, $r13, $r14, $r15, $r16, r17, r18, r19, r20, r21;

        $r0 = staticinvoke <androidx.work.NetworkType: androidx.work.NetworkType[] values()>();

        $i0 = lengthof $r0;

        $r1 = newarray (int)[$i0];

        <androidx.work.impl.background.systemjob.SystemJobInfoConverter$1: int[] $SwitchMap$androidx$work$NetworkType> = $r1;

     label01:
        $r3 = <androidx.work.impl.background.systemjob.SystemJobInfoConverter$1: int[] $SwitchMap$androidx$work$NetworkType>;

        $r2 = <androidx.work.NetworkType: androidx.work.NetworkType NOT_REQUIRED>;

        $i1 = virtualinvoke $r2.<androidx.work.NetworkType: int ordinal()>();

        $r3[$i1] = 1;

     label02:
        goto label04;

     label03:
        $r13 := @caughtexception;

        r17 = $r13;

     label04:
        $r5 = <androidx.work.impl.background.systemjob.SystemJobInfoConverter$1: int[] $SwitchMap$androidx$work$NetworkType>;

        $r4 = <androidx.work.NetworkType: androidx.work.NetworkType CONNECTED>;

        $i2 = virtualinvoke $r4.<androidx.work.NetworkType: int ordinal()>();

        $r5[$i2] = 2;

     label05:
        goto label07;

     label06:
        $r15 := @caughtexception;

        r18 = $r15;

     label07:
        $r7 = <androidx.work.impl.background.systemjob.SystemJobInfoConverter$1: int[] $SwitchMap$androidx$work$NetworkType>;

        $r6 = <androidx.work.NetworkType: androidx.work.NetworkType UNMETERED>;

        $i3 = virtualinvoke $r6.<androidx.work.NetworkType: int ordinal()>();

        $r7[$i3] = 3;

     label08:
        goto label10;

     label09:
        $r12 := @caughtexception;

        r19 = $r12;

     label10:
        $r9 = <androidx.work.impl.background.systemjob.SystemJobInfoConverter$1: int[] $SwitchMap$androidx$work$NetworkType>;

        $r8 = <androidx.work.NetworkType: androidx.work.NetworkType NOT_ROAMING>;

        $i4 = virtualinvoke $r8.<androidx.work.NetworkType: int ordinal()>();

        $r9[$i4] = 4;

     label11:
        goto label13;

     label12:
        $r14 := @caughtexception;

        r20 = $r14;

     label13:
        $r11 = <androidx.work.impl.background.systemjob.SystemJobInfoConverter$1: int[] $SwitchMap$androidx$work$NetworkType>;

        $r10 = <androidx.work.NetworkType: androidx.work.NetworkType METERED>;

        $i5 = virtualinvoke $r10.<androidx.work.NetworkType: int ordinal()>();

        $r11[$i5] = 5;

     label14:
        goto label16;

     label15:
        $r16 := @caughtexception;

        r21 = $r16;

     label16:
        return;

        catch java.lang.NoSuchFieldError from label01 to label02 with label03;
        catch java.lang.NoSuchFieldError from label04 to label05 with label06;
        catch java.lang.NoSuchFieldError from label07 to label08 with label09;
        catch java.lang.NoSuchFieldError from label10 to label11 with label12;
        catch java.lang.NoSuchFieldError from label13 to label14 with label15;
    }

