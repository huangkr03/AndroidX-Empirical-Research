androidx.room.compiler.processing.ksp.KSTypeKotlinPoetExtKt
<androidx.room.compiler.processing.ksp.KSTypeKotlinPoetExtKt: com.squareup.kotlinpoet.ClassName ERROR_KTYPE_NAME>
    public static final com.squareup.kotlinpoet.ClassName getERROR_KTYPE_NAME()
    {
        com.squareup.kotlinpoet.ClassName $r0;

        $r0 = <androidx.room.compiler.processing.ksp.KSTypeKotlinPoetExtKt: com.squareup.kotlinpoet.ClassName ERROR_KTYPE_NAME>;

        return $r0;
    }

    public static final com.squareup.kotlinpoet.TypeName asKTypeName(com.google.devtools.ksp.symbol.KSTypeReference, com.google.devtools.ksp.processing.Resolver)
    {
        com.google.devtools.ksp.symbol.KSTypeReference $r0;
        com.google.devtools.ksp.processing.Resolver r1;
        java.util.LinkedHashMap $r2;
        com.squareup.kotlinpoet.TypeName $r3;

        $r0 := @parameter0: com.google.devtools.ksp.symbol.KSTypeReference;

        r1 := @parameter1: com.google.devtools.ksp.processing.Resolver;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "resolver");

        $r2 = new java.util.LinkedHashMap;

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>()>();

        $r3 = staticinvoke <androidx.room.compiler.processing.ksp.KSTypeKotlinPoetExtKt: com.squareup.kotlinpoet.TypeName asKTypeName(com.google.devtools.ksp.symbol.KSTypeReference,com.google.devtools.ksp.processing.Resolver,java.util.LinkedHashMap)>($r0, r1, $r2);

        return $r3;
    }

    private static final com.squareup.kotlinpoet.TypeName asKTypeName(com.google.devtools.ksp.symbol.KSTypeReference, com.google.devtools.ksp.processing.Resolver, java.util.LinkedHashMap)
    {
        com.google.devtools.ksp.symbol.KSTypeReference $r0;
        com.google.devtools.ksp.processing.Resolver r1;
        java.util.LinkedHashMap r2;
        com.google.devtools.ksp.symbol.KSType $r3;
        com.squareup.kotlinpoet.ClassName $r4;
        com.squareup.kotlinpoet.TypeName $r5;

        $r0 := @parameter0: com.google.devtools.ksp.symbol.KSTypeReference;

        r1 := @parameter1: com.google.devtools.ksp.processing.Resolver;

        r2 := @parameter2: java.util.LinkedHashMap;

        if $r0 != null goto label1;

        $r4 = <androidx.room.compiler.processing.ksp.KSTypeKotlinPoetExtKt: com.squareup.kotlinpoet.ClassName ERROR_KTYPE_NAME>;

        $r5 = (com.squareup.kotlinpoet.TypeName) $r4;

        goto label2;

     label1:
        $r3 = interfaceinvoke $r0.<com.google.devtools.ksp.symbol.KSTypeReference: com.google.devtools.ksp.symbol.KSType resolve()>();

        $r5 = staticinvoke <androidx.room.compiler.processing.ksp.KSTypeKotlinPoetExtKt: com.squareup.kotlinpoet.TypeName asKTypeName(com.google.devtools.ksp.symbol.KSType,com.google.devtools.ksp.processing.Resolver,java.util.LinkedHashMap)>($r3, r1, r2);

     label2:
        return $r5;
    }

    public static final com.squareup.kotlinpoet.TypeName asKTypeName(com.google.devtools.ksp.symbol.KSDeclaration, com.google.devtools.ksp.processing.Resolver)
    {
        com.google.devtools.ksp.symbol.KSDeclaration $r0;
        com.google.devtools.ksp.processing.Resolver r1;
        java.util.LinkedHashMap $r2;
        com.squareup.kotlinpoet.TypeName $r3;

        $r0 := @parameter0: com.google.devtools.ksp.symbol.KSDeclaration;

        r1 := @parameter1: com.google.devtools.ksp.processing.Resolver;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "resolver");

        $r2 = new java.util.LinkedHashMap;

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>()>();

        $r3 = staticinvoke <androidx.room.compiler.processing.ksp.KSTypeKotlinPoetExtKt: com.squareup.kotlinpoet.TypeName asKTypeName(com.google.devtools.ksp.symbol.KSDeclaration,com.google.devtools.ksp.processing.Resolver,java.util.LinkedHashMap)>($r0, r1, $r2);

        return $r3;
    }

    private static final com.squareup.kotlinpoet.TypeName asKTypeName(com.google.devtools.ksp.symbol.KSDeclaration, com.google.devtools.ksp.processing.Resolver, java.util.LinkedHashMap)
    {
        com.google.devtools.ksp.symbol.KSDeclaration $r0;
        com.google.devtools.ksp.processing.Resolver r1;
        java.util.LinkedHashMap r2;
        java.lang.String r3, r4, $r10, $r28;
        java.util.List r5, $r16;
        java.util.Collection r6;
        boolean $z1, $z2, $z3;
        com.google.devtools.ksp.symbol.KSName $r7;
        com.squareup.kotlinpoet.ClassName $r8, $r12;
        com.squareup.kotlinpoet.TypeName $r9, $r22, $r24, $r27;
        int $i0, $i1, $i2;
        java.lang.CharSequence $r11;
        kotlin.jvm.internal.SpreadBuilder $r13, r30;
        java.lang.Object $r14;
        java.lang.Iterable $r15;
        java.lang.String[] $r17, $r19, $r21;
        java.lang.Object[] $r18, $r20;
        com.google.devtools.ksp.symbol.KSTypeParameter $r23;
        com.google.devtools.ksp.symbol.KSTypeAlias $r25;
        com.google.devtools.ksp.symbol.KSTypeReference $r26;
        char[] r29;

        $r0 := @parameter0: com.google.devtools.ksp.symbol.KSDeclaration;

        r1 := @parameter1: com.google.devtools.ksp.processing.Resolver;

        r2 := @parameter2: java.util.LinkedHashMap;

        $z1 = $r0 instanceof com.google.devtools.ksp.symbol.KSTypeAlias;

        if $z1 == 0 goto label1;

        $r25 = (com.google.devtools.ksp.symbol.KSTypeAlias) $r0;

        $r26 = interfaceinvoke $r25.<com.google.devtools.ksp.symbol.KSTypeAlias: com.google.devtools.ksp.symbol.KSTypeReference getType()>();

        $r27 = staticinvoke <androidx.room.compiler.processing.ksp.KSTypeKotlinPoetExtKt: com.squareup.kotlinpoet.TypeName asKTypeName(com.google.devtools.ksp.symbol.KSTypeReference,com.google.devtools.ksp.processing.Resolver,java.util.LinkedHashMap)>($r26, r1, r2);

        return $r27;

     label1:
        $z2 = $r0 instanceof com.google.devtools.ksp.symbol.KSTypeParameter;

        if $z2 == 0 goto label2;

        $r23 = (com.google.devtools.ksp.symbol.KSTypeParameter) $r0;

        $r24 = staticinvoke <androidx.room.compiler.processing.ksp.KSTypeKotlinPoetExtKt: com.squareup.kotlinpoet.TypeName asKTypeName(com.google.devtools.ksp.symbol.KSTypeParameter,com.google.devtools.ksp.processing.Resolver,java.util.LinkedHashMap)>($r23, r1, r2);

        return $r24;

     label2:
        $r7 = interfaceinvoke $r0.<com.google.devtools.ksp.symbol.KSDeclaration: com.google.devtools.ksp.symbol.KSName getQualifiedName()>();

        if $r7 == null goto label3;

        $r10 = interfaceinvoke $r7.<com.google.devtools.ksp.symbol.KSName: java.lang.String asString()>();

        if $r10 != null goto label4;

     label3:
        $r8 = <androidx.room.compiler.processing.ksp.KSTypeKotlinPoetExtKt: com.squareup.kotlinpoet.ClassName ERROR_KTYPE_NAME>;

        $r9 = (com.squareup.kotlinpoet.TypeName) $r8;

        return $r9;

     label4:
        r3 = $r10;

        r4 = staticinvoke <androidx.room.compiler.processing.ksp.KSTypeExtKt: java.lang.String getNormalizedPackageName(com.google.devtools.ksp.symbol.KSDeclaration)>($r0);

        $z3 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r4, "");

        if $z3 == 0 goto label5;

        $r28 = r3;

        goto label6;

     label5:
        $i0 = virtualinvoke r4.<java.lang.String: int length()>();

        $i1 = $i0 + 1;

        $r28 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>($i1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r28, "this as java.lang.String).substring(startIndex)");

     label6:
        $r11 = (java.lang.CharSequence) $r28;

        r29 = newarray (char)[1];

        r29[0] = 46;

        r5 = staticinvoke <kotlin.text.StringsKt: java.util.List split$default(java.lang.CharSequence,char[],boolean,int,int,java.lang.Object)>($r11, r29, 0, 0, 6, null);

        $r12 = new com.squareup.kotlinpoet.ClassName;

        $r13 = new kotlin.jvm.internal.SpreadBuilder;

        specialinvoke $r13.<kotlin.jvm.internal.SpreadBuilder: void <init>(int)>(2);

        r30 = $r13;

        $r14 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object first(java.util.List)>(r5);

        virtualinvoke r30.<kotlin.jvm.internal.SpreadBuilder: void add(java.lang.Object)>($r14);

        $r15 = (java.lang.Iterable) r5;

        $r16 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List drop(java.lang.Iterable,int)>($r15, 1);

        r6 = (java.util.Collection) $r16;

        $r17 = newarray (java.lang.String)[0];

        $r18 = interfaceinvoke r6.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r17);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r18, "null cannot be cast to non-null type kotlin.Array<T of kotlin.collections.ArraysKt__ArraysJVMKt.toTypedArray>");

        virtualinvoke r30.<kotlin.jvm.internal.SpreadBuilder: void addSpread(java.lang.Object)>($r18);

        $i2 = virtualinvoke r30.<kotlin.jvm.internal.SpreadBuilder: int size()>();

        $r19 = newarray (java.lang.String)[$i2];

        $r20 = virtualinvoke r30.<kotlin.jvm.internal.SpreadBuilder: java.lang.Object[] toArray(java.lang.Object[])>($r19);

        $r21 = (java.lang.String[]) $r20;

        specialinvoke $r12.<com.squareup.kotlinpoet.ClassName: void <init>(java.lang.String,java.lang.String[])>(r4, $r21);

        $r22 = (com.squareup.kotlinpoet.TypeName) $r12;

        return $r22;
    }

    private static final com.squareup.kotlinpoet.TypeName asKTypeName(com.google.devtools.ksp.symbol.KSTypeParameter, com.google.devtools.ksp.processing.Resolver, java.util.LinkedHashMap)
    {
        com.google.devtools.ksp.symbol.KSTypeParameter $r0;
        com.google.devtools.ksp.processing.Resolver r1;
        java.util.LinkedHashMap r2;
        com.google.devtools.ksp.symbol.KSName $r3, $r8, $r11, $r18;
        java.lang.Object $r4;
        com.squareup.kotlinpoet.ClassName $r5, $r22;
        com.squareup.kotlinpoet.TypeName $r6, $r7, $r20, $r23, $r24, r25, r26;
        java.lang.String $r9;
        java.util.Map $r10;
        kotlin.sequences.Sequence $r13, $r16;
        androidx.room.compiler.processing.ksp.KSTypeKotlinPoetExtKt$asKTypeName$resolvedBounds$1 $r14;
        kotlin.jvm.functions.Function1 $r15;
        java.util.Collection $r17, $r21;
        boolean $z1, $z4;
        com.squareup.kotlinpoet.TypeName[] r27;
        java.util.List r28, r30;
        com.squareup.kotlinpoet.TypeVariableName r29;

        $r0 := @parameter0: com.google.devtools.ksp.symbol.KSTypeParameter;

        r1 := @parameter1: com.google.devtools.ksp.processing.Resolver;

        r2 := @parameter2: java.util.LinkedHashMap;

        $r3 = interfaceinvoke $r0.<com.google.devtools.ksp.symbol.KSTypeParameter: com.google.devtools.ksp.symbol.KSName getName()>();

        $r4 = virtualinvoke r2.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>($r3);

        r25 = (com.squareup.kotlinpoet.TypeName) $r4;

        if r25 == null goto label1;

        r26 = r25;

        return r26;

     label1:
        r27 = newarray (com.squareup.kotlinpoet.TypeName)[1];

        $r5 = <com.squareup.kotlinpoet.TypeNames: com.squareup.kotlinpoet.ClassName ANY>;

        $r6 = (com.squareup.kotlinpoet.TypeName) $r5;

        $r7 = staticinvoke <com.squareup.kotlinpoet.TypeName: com.squareup.kotlinpoet.TypeName copy$default(com.squareup.kotlinpoet.TypeName,boolean,java.util.List,int,java.lang.Object)>($r6, 1, null, 2, null);

        r27[0] = $r7;

        r28 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List mutableListOf(java.lang.Object[])>(r27);

        $r8 = interfaceinvoke $r0.<com.google.devtools.ksp.symbol.KSTypeParameter: com.google.devtools.ksp.symbol.KSName getName()>();

        $r9 = interfaceinvoke $r8.<com.google.devtools.ksp.symbol.KSName: java.lang.String asString()>();

        r29 = staticinvoke <androidx.room.compiler.processing.ksp.KSTypeKotlinPoetExtKt: com.squareup.kotlinpoet.TypeVariableName createModifiableTypeVariableName(java.lang.String,java.util.List)>($r9, r28);

        $r10 = (java.util.Map) r2;

        $r11 = interfaceinvoke $r0.<com.google.devtools.ksp.symbol.KSTypeParameter: com.google.devtools.ksp.symbol.KSName getName()>();

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, r29);

        $r13 = interfaceinvoke $r0.<com.google.devtools.ksp.symbol.KSTypeParameter: kotlin.sequences.Sequence getBounds()>();

        $r14 = new androidx.room.compiler.processing.ksp.KSTypeKotlinPoetExtKt$asKTypeName$resolvedBounds$1;

        specialinvoke $r14.<androidx.room.compiler.processing.ksp.KSTypeKotlinPoetExtKt$asKTypeName$resolvedBounds$1: void <init>(com.google.devtools.ksp.processing.Resolver,java.util.LinkedHashMap)>(r1, r2);

        $r15 = (kotlin.jvm.functions.Function1) $r14;

        $r16 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence map(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1)>($r13, $r15);

        r30 = staticinvoke <kotlin.sequences.SequencesKt: java.util.List toList(kotlin.sequences.Sequence)>($r16);

        $r17 = (java.util.Collection) r30;

        $z1 = interfaceinvoke $r17.<java.util.Collection: boolean isEmpty()>();

        if $z1 != 0 goto label2;

        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        if $z4 == 0 goto label4;

        $r21 = (java.util.Collection) r30;

        interfaceinvoke r28.<java.util.List: boolean addAll(java.util.Collection)>($r21);

        $r22 = <com.squareup.kotlinpoet.TypeNames: com.squareup.kotlinpoet.ClassName ANY>;

        $r23 = (com.squareup.kotlinpoet.TypeName) $r22;

        $r24 = staticinvoke <com.squareup.kotlinpoet.TypeName: com.squareup.kotlinpoet.TypeName copy$default(com.squareup.kotlinpoet.TypeName,boolean,java.util.List,int,java.lang.Object)>($r23, 1, null, 2, null);

        interfaceinvoke r28.<java.util.List: boolean remove(java.lang.Object)>($r24);

     label4:
        $r18 = interfaceinvoke $r0.<com.google.devtools.ksp.symbol.KSTypeParameter: com.google.devtools.ksp.symbol.KSName getName()>();

        virtualinvoke r2.<java.util.LinkedHashMap: java.lang.Object remove(java.lang.Object)>($r18);

        $r20 = (com.squareup.kotlinpoet.TypeName) r29;

        return $r20;
    }

    public static final com.squareup.kotlinpoet.TypeName asKTypeName(com.google.devtools.ksp.symbol.KSTypeArgument, com.google.devtools.ksp.processing.Resolver)
    {
        com.google.devtools.ksp.symbol.KSTypeArgument $r0;
        com.google.devtools.ksp.processing.Resolver r1;
        java.util.LinkedHashMap $r2;
        com.squareup.kotlinpoet.TypeName $r3;

        $r0 := @parameter0: com.google.devtools.ksp.symbol.KSTypeArgument;

        r1 := @parameter1: com.google.devtools.ksp.processing.Resolver;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "resolver");

        $r2 = new java.util.LinkedHashMap;

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>()>();

        $r3 = staticinvoke <androidx.room.compiler.processing.ksp.KSTypeKotlinPoetExtKt: com.squareup.kotlinpoet.TypeName asKTypeName(com.google.devtools.ksp.symbol.KSTypeArgument,com.google.devtools.ksp.processing.Resolver,java.util.LinkedHashMap)>($r0, r1, $r2);

        return $r3;
    }

    private static final com.squareup.kotlinpoet.TypeName asKTypeName(com.google.devtools.ksp.symbol.KSTypeArgument, com.google.devtools.ksp.processing.Resolver, java.util.LinkedHashMap)
    {
        com.google.devtools.ksp.symbol.KSTypeArgument $r0;
        com.google.devtools.ksp.processing.Resolver r1;
        java.util.LinkedHashMap r2;
        com.google.devtools.ksp.symbol.Variance $r3;
        int[] $r4;
        int $i0, $i1;
        com.squareup.kotlinpoet.WildcardTypeName $r5, $r8, $r11, $r15;
        com.squareup.kotlinpoet.WildcardTypeName$Companion $r6, $r9, $r13;
        com.squareup.kotlinpoet.TypeName $r7, $r10, $r14, $r16;
        com.google.devtools.ksp.symbol.KSAnnotated $r12;
        boolean $z0;

        $r0 := @parameter0: com.google.devtools.ksp.symbol.KSTypeArgument;

        r1 := @parameter1: com.google.devtools.ksp.processing.Resolver;

        r2 := @parameter2: java.util.LinkedHashMap;

        $r3 = interfaceinvoke $r0.<com.google.devtools.ksp.symbol.KSTypeArgument: com.google.devtools.ksp.symbol.Variance getVariance()>();

        $r4 = <androidx.room.compiler.processing.ksp.KSTypeKotlinPoetExtKt$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i0 = virtualinvoke $r3.<com.google.devtools.ksp.symbol.Variance: int ordinal()>();

        $i1 = $r4[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            default: goto label4;
        };

     label1:
        $r9 = <com.squareup.kotlinpoet.WildcardTypeName: com.squareup.kotlinpoet.WildcardTypeName$Companion Companion>;

        $r10 = staticinvoke <androidx.room.compiler.processing.ksp.KSTypeKotlinPoetExtKt: com.squareup.kotlinpoet.TypeName asKTypeName$resolveTypeName(com.google.devtools.ksp.symbol.KSTypeArgument,com.google.devtools.ksp.processing.Resolver,java.util.LinkedHashMap)>($r0, r1, r2);

        $r11 = virtualinvoke $r9.<com.squareup.kotlinpoet.WildcardTypeName$Companion: com.squareup.kotlinpoet.WildcardTypeName consumerOf(com.squareup.kotlinpoet.TypeName)>($r10);

        $r16 = (com.squareup.kotlinpoet.TypeName) $r11;

        goto label6;

     label2:
        $r6 = <com.squareup.kotlinpoet.WildcardTypeName: com.squareup.kotlinpoet.WildcardTypeName$Companion Companion>;

        $r7 = staticinvoke <androidx.room.compiler.processing.ksp.KSTypeKotlinPoetExtKt: com.squareup.kotlinpoet.TypeName asKTypeName$resolveTypeName(com.google.devtools.ksp.symbol.KSTypeArgument,com.google.devtools.ksp.processing.Resolver,java.util.LinkedHashMap)>($r0, r1, r2);

        $r8 = virtualinvoke $r6.<com.squareup.kotlinpoet.WildcardTypeName$Companion: com.squareup.kotlinpoet.WildcardTypeName producerOf(com.squareup.kotlinpoet.TypeName)>($r7);

        $r16 = (com.squareup.kotlinpoet.TypeName) $r8;

        goto label6;

     label3:
        $r5 = <com.squareup.kotlinpoet.TypeNames: com.squareup.kotlinpoet.WildcardTypeName STAR>;

        $r16 = (com.squareup.kotlinpoet.TypeName) $r5;

        goto label6;

     label4:
        $r12 = (com.google.devtools.ksp.symbol.KSAnnotated) $r0;

        $z0 = staticinvoke <androidx.room.compiler.processing.ksp.KSTypeExtKt: boolean hasJvmWildcardAnnotation(com.google.devtools.ksp.symbol.KSAnnotated)>($r12);

        if $z0 == 0 goto label5;

        $r13 = <com.squareup.kotlinpoet.WildcardTypeName: com.squareup.kotlinpoet.WildcardTypeName$Companion Companion>;

        $r14 = staticinvoke <androidx.room.compiler.processing.ksp.KSTypeKotlinPoetExtKt: com.squareup.kotlinpoet.TypeName asKTypeName$resolveTypeName(com.google.devtools.ksp.symbol.KSTypeArgument,com.google.devtools.ksp.processing.Resolver,java.util.LinkedHashMap)>($r0, r1, r2);

        $r15 = virtualinvoke $r13.<com.squareup.kotlinpoet.WildcardTypeName$Companion: com.squareup.kotlinpoet.WildcardTypeName consumerOf(com.squareup.kotlinpoet.TypeName)>($r14);

        $r16 = (com.squareup.kotlinpoet.TypeName) $r15;

        goto label6;

     label5:
        $r16 = staticinvoke <androidx.room.compiler.processing.ksp.KSTypeKotlinPoetExtKt: com.squareup.kotlinpoet.TypeName asKTypeName$resolveTypeName(com.google.devtools.ksp.symbol.KSTypeArgument,com.google.devtools.ksp.processing.Resolver,java.util.LinkedHashMap)>($r0, r1, r2);

     label6:
        return $r16;
    }

    public static final com.squareup.kotlinpoet.TypeName asKTypeName(com.google.devtools.ksp.symbol.KSType, com.google.devtools.ksp.processing.Resolver)
    {
        com.google.devtools.ksp.symbol.KSType $r0;
        com.google.devtools.ksp.processing.Resolver r1;
        java.util.LinkedHashMap $r2;
        com.squareup.kotlinpoet.TypeName $r3;

        $r0 := @parameter0: com.google.devtools.ksp.symbol.KSType;

        r1 := @parameter1: com.google.devtools.ksp.processing.Resolver;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "resolver");

        $r2 = new java.util.LinkedHashMap;

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>()>();

        $r3 = staticinvoke <androidx.room.compiler.processing.ksp.KSTypeKotlinPoetExtKt: com.squareup.kotlinpoet.TypeName asKTypeName(com.google.devtools.ksp.symbol.KSType,com.google.devtools.ksp.processing.Resolver,java.util.LinkedHashMap)>($r0, r1, $r2);

        return $r3;
    }

    private static final com.squareup.kotlinpoet.TypeName asKTypeName(com.google.devtools.ksp.symbol.KSType, com.google.devtools.ksp.processing.Resolver, java.util.LinkedHashMap)
    {
        com.google.devtools.ksp.symbol.KSType $r0;
        com.google.devtools.ksp.processing.Resolver r1;
        java.util.LinkedHashMap r2;
        java.util.List r3, $r9, $r12;
        java.util.Collection r4, r8, $r10;
        java.util.Iterator r5;
        java.lang.Object r6;
        com.google.devtools.ksp.symbol.KSTypeArgument r7;
        boolean $z3, $z4, $z5, $z6, $z8, $z10;
        com.google.devtools.ksp.symbol.KSDeclaration $r11, $r14;
        java.util.ArrayList $r13;
        int $i0;
        com.squareup.kotlinpoet.ClassName $r15;
        com.squareup.kotlinpoet.ParameterizedTypeName$Companion $r16;
        com.squareup.kotlinpoet.ParameterizedTypeName $r17;
        java.lang.StringBuilder $r18, $r19, $r20;
        java.lang.IllegalStateException $r21;
        java.lang.String $r22, $r26;
        com.squareup.kotlinpoet.TypeName $r23, $r25, $r27, $r28;
        java.lang.Iterable $r24;

        $r0 := @parameter0: com.google.devtools.ksp.symbol.KSType;

        r1 := @parameter1: com.google.devtools.ksp.processing.Resolver;

        r2 := @parameter2: java.util.LinkedHashMap;

        $r9 = interfaceinvoke $r0.<com.google.devtools.ksp.symbol.KSType: java.util.List getArguments()>();

        $r10 = (java.util.Collection) $r9;

        $z3 = interfaceinvoke $r10.<java.util.Collection: boolean isEmpty()>();

        if $z3 != 0 goto label1;

        $z8 = 1;

        goto label2;

     label1:
        $z8 = 0;

     label2:
        if $z8 == 0 goto label6;

        $z4 = interfaceinvoke r1.<com.google.devtools.ksp.processing.Resolver: boolean isJavaRawType(com.google.devtools.ksp.symbol.KSType)>($r0);

        if $z4 != 0 goto label6;

        $r12 = interfaceinvoke $r0.<com.google.devtools.ksp.symbol.KSType: java.util.List getArguments()>();

        $r24 = (java.lang.Iterable) $r12;

        $r13 = new java.util.ArrayList;

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r24, 10);

        specialinvoke $r13.<java.util.ArrayList: void <init>(int)>($i0);

        r4 = (java.util.Collection) $r13;

        r5 = interfaceinvoke $r24.<java.lang.Iterable: java.util.Iterator iterator()>();

     label3:
        $z5 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label4;

        r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.google.devtools.ksp.symbol.KSTypeArgument) r6;

        r8 = r4;

        $r23 = staticinvoke <androidx.room.compiler.processing.ksp.KSTypeKotlinPoetExtKt: com.squareup.kotlinpoet.TypeName asKTypeName(com.google.devtools.ksp.symbol.KSTypeArgument,com.google.devtools.ksp.processing.Resolver,java.util.LinkedHashMap)>(r7, r1, r2);

        interfaceinvoke r8.<java.util.Collection: boolean add(java.lang.Object)>($r23);

        goto label3;

     label4:
        r3 = (java.util.List) r4;

        $r14 = interfaceinvoke $r0.<com.google.devtools.ksp.symbol.KSType: com.google.devtools.ksp.symbol.KSDeclaration getDeclaration()>();

        $r25 = staticinvoke <androidx.room.compiler.processing.ksp.KSTypeKotlinPoetExtKt: com.squareup.kotlinpoet.TypeName asKTypeName(com.google.devtools.ksp.symbol.KSDeclaration,com.google.devtools.ksp.processing.Resolver,java.util.LinkedHashMap)>($r14, r1, r2);

        $z6 = $r25 instanceof com.squareup.kotlinpoet.ClassName;

        if $z6 != 0 goto label5;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected type name for KSType: ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r25);

        $r26 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r21 = new java.lang.IllegalStateException;

        $r22 = virtualinvoke $r26.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r22);

        throw $r21;

     label5:
        $r16 = <com.squareup.kotlinpoet.ParameterizedTypeName: com.squareup.kotlinpoet.ParameterizedTypeName$Companion Companion>;

        $r15 = (com.squareup.kotlinpoet.ClassName) $r25;

        $r17 = virtualinvoke $r16.<com.squareup.kotlinpoet.ParameterizedTypeName$Companion: com.squareup.kotlinpoet.ParameterizedTypeName get(com.squareup.kotlinpoet.ClassName,java.util.List)>($r15, r3);

        $r27 = (com.squareup.kotlinpoet.TypeName) $r17;

        goto label7;

     label6:
        $r11 = interfaceinvoke $r0.<com.google.devtools.ksp.symbol.KSType: com.google.devtools.ksp.symbol.KSDeclaration getDeclaration()>();

        $r27 = staticinvoke <androidx.room.compiler.processing.ksp.KSTypeKotlinPoetExtKt: com.squareup.kotlinpoet.TypeName asKTypeName(com.google.devtools.ksp.symbol.KSDeclaration,com.google.devtools.ksp.processing.Resolver,java.util.LinkedHashMap)>($r11, r1, r2);

     label7:
        $z10 = interfaceinvoke $r0.<com.google.devtools.ksp.symbol.KSType: boolean isMarkedNullable()>();

        $r28 = staticinvoke <com.squareup.kotlinpoet.TypeName: com.squareup.kotlinpoet.TypeName copy$default(com.squareup.kotlinpoet.TypeName,boolean,java.util.List,int,java.lang.Object)>($r27, $z10, null, 2, null);

        return $r28;
    }

    private static final com.squareup.kotlinpoet.TypeVariableName createModifiableTypeVariableName(java.lang.String, java.util.List)
    {
        java.lang.String r0;
        java.util.List r1;
        com.squareup.kotlinpoet.TypeVariableName $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.List;

        $r2 = staticinvoke <androidx.room.compiler.processing.ksp.KTypeVariableNameFactory: com.squareup.kotlinpoet.TypeVariableName newInstance(java.lang.String,java.util.List)>(r0, r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "newInstance(name, bounds)");

        return $r2;
    }

    private static final com.squareup.kotlinpoet.TypeName asKTypeName$resolveTypeName(com.google.devtools.ksp.symbol.KSTypeArgument, com.google.devtools.ksp.processing.Resolver, java.util.LinkedHashMap)
    {
        com.google.devtools.ksp.symbol.KSTypeArgument $r0;
        com.google.devtools.ksp.processing.Resolver $r1;
        java.util.LinkedHashMap $r2;
        com.google.devtools.ksp.symbol.KSTypeReference $r3;
        com.squareup.kotlinpoet.TypeName $r4;

        $r0 := @parameter0: com.google.devtools.ksp.symbol.KSTypeArgument;

        $r1 := @parameter1: com.google.devtools.ksp.processing.Resolver;

        $r2 := @parameter2: java.util.LinkedHashMap;

        $r3 = interfaceinvoke $r0.<com.google.devtools.ksp.symbol.KSTypeArgument: com.google.devtools.ksp.symbol.KSTypeReference getType()>();

        $r4 = staticinvoke <androidx.room.compiler.processing.ksp.KSTypeKotlinPoetExtKt: com.squareup.kotlinpoet.TypeName asKTypeName(com.google.devtools.ksp.symbol.KSTypeReference,com.google.devtools.ksp.processing.Resolver,java.util.LinkedHashMap)>($r3, $r1, $r2);

        return $r4;
    }

    public static final com.squareup.kotlinpoet.TypeName access$asKTypeName(com.google.devtools.ksp.symbol.KSTypeReference, com.google.devtools.ksp.processing.Resolver, java.util.LinkedHashMap)
    {
        com.google.devtools.ksp.symbol.KSTypeReference $r0;
        com.google.devtools.ksp.processing.Resolver r1;
        java.util.LinkedHashMap r2;
        com.squareup.kotlinpoet.TypeName $r3;

        $r0 := @parameter0: com.google.devtools.ksp.symbol.KSTypeReference;

        r1 := @parameter1: com.google.devtools.ksp.processing.Resolver;

        r2 := @parameter2: java.util.LinkedHashMap;

        $r3 = staticinvoke <androidx.room.compiler.processing.ksp.KSTypeKotlinPoetExtKt: com.squareup.kotlinpoet.TypeName asKTypeName(com.google.devtools.ksp.symbol.KSTypeReference,com.google.devtools.ksp.processing.Resolver,java.util.LinkedHashMap)>($r0, r1, r2);

        return $r3;
    }

    static void <clinit>()
    {
        java.lang.String[] r0;
        com.squareup.kotlinpoet.ClassName $r1;

        $r1 = new com.squareup.kotlinpoet.ClassName;

        r0 = newarray (java.lang.String)[1];

        r0[0] = "NonExistentClass";

        specialinvoke $r1.<com.squareup.kotlinpoet.ClassName: void <init>(java.lang.String,java.lang.String[])>("error", r0);

        <androidx.room.compiler.processing.ksp.KSTypeKotlinPoetExtKt: com.squareup.kotlinpoet.ClassName ERROR_KTYPE_NAME> = $r1;

        return;
    }

