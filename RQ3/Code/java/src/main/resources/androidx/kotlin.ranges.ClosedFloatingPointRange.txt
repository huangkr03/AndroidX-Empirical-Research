kotlin.ranges.ClosedFloatingPointRange
<kotlin.ranges.ClosedFloatingPointRange: boolean contains(java.lang.Comparable)>
<kotlin.ranges.ClosedFloatingPointRange: boolean isEmpty()>
<kotlin.ranges.ClosedFloatingPointRange: boolean lessThanOrEquals(java.lang.Comparable,java.lang.Comparable)>
kotlin.ranges.ClosedFloatingPointRange$DefaultImpls
    public static boolean contains(kotlin.ranges.ClosedFloatingPointRange, java.lang.Comparable)
    {
        java.lang.Comparable $r0, $r2;
        kotlin.ranges.ClosedFloatingPointRange $r1;
        boolean $z0;

        $r1 := @parameter0: kotlin.ranges.ClosedFloatingPointRange;

        $r0 := @parameter1: java.lang.Comparable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "value");

        $r2 = interfaceinvoke $r1.<kotlin.ranges.ClosedFloatingPointRange: java.lang.Comparable getStart()>();

        $z0 = interfaceinvoke $r1.<kotlin.ranges.ClosedFloatingPointRange: boolean lessThanOrEquals(java.lang.Comparable,java.lang.Comparable)>($r2, $r0);

        if $z0 == 0 goto label1;

        $r2 = interfaceinvoke $r1.<kotlin.ranges.ClosedFloatingPointRange: java.lang.Comparable getEndInclusive()>();

        $z0 = interfaceinvoke $r1.<kotlin.ranges.ClosedFloatingPointRange: boolean lessThanOrEquals(java.lang.Comparable,java.lang.Comparable)>($r0, $r2);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static boolean isEmpty(kotlin.ranges.ClosedFloatingPointRange)
    {
        kotlin.ranges.ClosedFloatingPointRange $r0;
        java.lang.Comparable $r1, $r2;
        boolean $z0;

        $r0 := @parameter0: kotlin.ranges.ClosedFloatingPointRange;

        $r1 = interfaceinvoke $r0.<kotlin.ranges.ClosedFloatingPointRange: java.lang.Comparable getStart()>();

        $r2 = interfaceinvoke $r0.<kotlin.ranges.ClosedFloatingPointRange: java.lang.Comparable getEndInclusive()>();

        $z0 = interfaceinvoke $r0.<kotlin.ranges.ClosedFloatingPointRange: boolean lessThanOrEquals(java.lang.Comparable,java.lang.Comparable)>($r1, $r2);

        $z0 = $z0 ^ 1;

        return $z0;
    }

