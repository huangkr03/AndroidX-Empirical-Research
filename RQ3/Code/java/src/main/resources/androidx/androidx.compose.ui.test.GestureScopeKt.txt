androidx.compose.ui.test.GestureScopeKt
<androidx.compose.ui.test.GestureScopeKt: float edgeFuzzFactor>
<androidx.compose.ui.test.GestureScopeKt: long doubleClickDelayMillis>
<androidx.compose.ui.test.GestureScopeKt: long LongPressTimeoutMillis>
    public static final int getWidth(androidx.compose.ui.test.GestureScope)
    {
        androidx.compose.ui.test.GestureScope $r0;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        int $i0;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $i0 = interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: int getWidth()>();

        return $i0;
    }

    public static void getWidth$annotations(androidx.compose.ui.test.GestureScope)
    {
        androidx.compose.ui.test.GestureScope r0;

        r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        return;
    }

    public static final int getHeight(androidx.compose.ui.test.GestureScope)
    {
        androidx.compose.ui.test.GestureScope $r0;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        int $i0;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $i0 = interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: int getHeight()>();

        return $i0;
    }

    public static void getHeight$annotations(androidx.compose.ui.test.GestureScope)
    {
        androidx.compose.ui.test.GestureScope r0;

        r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        return;
    }

    public static final float getLeft(androidx.compose.ui.test.GestureScope)
    {
        androidx.compose.ui.test.GestureScope $r0;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        float $f0;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $f0 = interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: float getLeft()>();

        return $f0;
    }

    public static void getLeft$annotations(androidx.compose.ui.test.GestureScope)
    {
        androidx.compose.ui.test.GestureScope r0;

        r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        return;
    }

    public static final float getTop(androidx.compose.ui.test.GestureScope)
    {
        androidx.compose.ui.test.GestureScope $r0;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        float $f0;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $f0 = interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: float getTop()>();

        return $f0;
    }

    public static void getTop$annotations(androidx.compose.ui.test.GestureScope)
    {
        androidx.compose.ui.test.GestureScope r0;

        r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        return;
    }

    public static final float getCenterX(androidx.compose.ui.test.GestureScope)
    {
        androidx.compose.ui.test.GestureScope $r0;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        float $f0;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $f0 = interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: float getCenterX()>();

        return $f0;
    }

    public static void getCenterX$annotations(androidx.compose.ui.test.GestureScope)
    {
        androidx.compose.ui.test.GestureScope r0;

        r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        return;
    }

    public static final float getCenterY(androidx.compose.ui.test.GestureScope)
    {
        androidx.compose.ui.test.GestureScope $r0;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        float $f0;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $f0 = interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: float getCenterY()>();

        return $f0;
    }

    public static void getCenterY$annotations(androidx.compose.ui.test.GestureScope)
    {
        androidx.compose.ui.test.GestureScope r0;

        r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        return;
    }

    public static final float getRight(androidx.compose.ui.test.GestureScope)
    {
        androidx.compose.ui.test.GestureScope $r0;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        float $f0;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $f0 = interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: float getRight()>();

        return $f0;
    }

    public static void getRight$annotations(androidx.compose.ui.test.GestureScope)
    {
        androidx.compose.ui.test.GestureScope r0;

        r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        return;
    }

    public static final float getBottom(androidx.compose.ui.test.GestureScope)
    {
        androidx.compose.ui.test.GestureScope $r0;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        float $f0;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $f0 = interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: float getBottom()>();

        return $f0;
    }

    public static void getBottom$annotations(androidx.compose.ui.test.GestureScope)
    {
        androidx.compose.ui.test.GestureScope r0;

        r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        return;
    }

    public static final long getTopLeft(androidx.compose.ui.test.GestureScope)
    {
        androidx.compose.ui.test.GestureScope $r0;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        long $l0;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $l0 = interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: long getTopLeft-F1C5BW0()>();

        return $l0;
    }

    public static void getTopLeft$annotations(androidx.compose.ui.test.GestureScope)
    {
        androidx.compose.ui.test.GestureScope r0;

        r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        return;
    }

    public static final long getTopCenter(androidx.compose.ui.test.GestureScope)
    {
        androidx.compose.ui.test.GestureScope $r0;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        long $l0;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $l0 = interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: long getTopCenter-F1C5BW0()>();

        return $l0;
    }

    public static void getTopCenter$annotations(androidx.compose.ui.test.GestureScope)
    {
        androidx.compose.ui.test.GestureScope r0;

        r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        return;
    }

    public static final long getTopRight(androidx.compose.ui.test.GestureScope)
    {
        androidx.compose.ui.test.GestureScope $r0;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        long $l0;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $l0 = interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: long getTopRight-F1C5BW0()>();

        return $l0;
    }

    public static void getTopRight$annotations(androidx.compose.ui.test.GestureScope)
    {
        androidx.compose.ui.test.GestureScope r0;

        r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        return;
    }

    public static final long getCenterLeft(androidx.compose.ui.test.GestureScope)
    {
        androidx.compose.ui.test.GestureScope $r0;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        long $l0;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $l0 = interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: long getCenterLeft-F1C5BW0()>();

        return $l0;
    }

    public static void getCenterLeft$annotations(androidx.compose.ui.test.GestureScope)
    {
        androidx.compose.ui.test.GestureScope r0;

        r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        return;
    }

    public static final long getCenter(androidx.compose.ui.test.GestureScope)
    {
        androidx.compose.ui.test.GestureScope $r0;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        long $l0;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $l0 = interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: long getCenter-F1C5BW0()>();

        return $l0;
    }

    public static void getCenter$annotations(androidx.compose.ui.test.GestureScope)
    {
        androidx.compose.ui.test.GestureScope r0;

        r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        return;
    }

    public static final long getCenterRight(androidx.compose.ui.test.GestureScope)
    {
        androidx.compose.ui.test.GestureScope $r0;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        long $l0;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $l0 = interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: long getCenterRight-F1C5BW0()>();

        return $l0;
    }

    public static void getCenterRight$annotations(androidx.compose.ui.test.GestureScope)
    {
        androidx.compose.ui.test.GestureScope r0;

        r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        return;
    }

    public static final long getBottomLeft(androidx.compose.ui.test.GestureScope)
    {
        androidx.compose.ui.test.GestureScope $r0;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        long $l0;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $l0 = interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: long getBottomLeft-F1C5BW0()>();

        return $l0;
    }

    public static void getBottomLeft$annotations(androidx.compose.ui.test.GestureScope)
    {
        androidx.compose.ui.test.GestureScope r0;

        r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        return;
    }

    public static final long getBottomCenter(androidx.compose.ui.test.GestureScope)
    {
        androidx.compose.ui.test.GestureScope $r0;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        long $l0;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $l0 = interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: long getBottomCenter-F1C5BW0()>();

        return $l0;
    }

    public static void getBottomCenter$annotations(androidx.compose.ui.test.GestureScope)
    {
        androidx.compose.ui.test.GestureScope r0;

        r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        return;
    }

    public static final long getBottomRight(androidx.compose.ui.test.GestureScope)
    {
        androidx.compose.ui.test.GestureScope $r0;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        long $l0;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $l0 = interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: long getBottomRight-F1C5BW0()>();

        return $l0;
    }

    public static void getBottomRight$annotations(androidx.compose.ui.test.GestureScope)
    {
        androidx.compose.ui.test.GestureScope r0;

        r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        return;
    }

    public static final long percentOffset(androidx.compose.ui.test.GestureScope, float, float)
    {
        androidx.compose.ui.test.GestureScope $r0;
        float f0, f1;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        long $l0;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $l0 = interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: long percentOffset-dBAh8RU(float,float)>(f0, f1);

        return $l0;
    }

    public static long percentOffset$default(androidx.compose.ui.test.GestureScope, float, float, int, java.lang.Object)
    {
        androidx.compose.ui.test.GestureScope r0;
        int i0, $i1, $i2;
        java.lang.Object r1;
        long $l3;
        float f0, f1;

        r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        i0 := @parameter3: int;

        r1 := @parameter4: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        f0 = 0.0F;

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        f1 = 0.0F;

     label2:
        $l3 = staticinvoke <androidx.compose.ui.test.GestureScopeKt: long percentOffset(androidx.compose.ui.test.GestureScope,float,float)>(r0, f0, f1);

        return $l3;
    }

    public static final void click-Uv8p0NA(androidx.compose.ui.test.GestureScope, long)
    {
        androidx.compose.ui.test.GestureScope $r0;
        long l0;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        androidx.compose.ui.test.GestureScopeKt$click$1 $r2;
        kotlin.jvm.functions.Function1 $r3;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        l0 := @parameter1: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$click");

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $r2 = new androidx.compose.ui.test.GestureScopeKt$click$1;

        specialinvoke $r2.<androidx.compose.ui.test.GestureScopeKt$click$1: void <init>(long)>(l0);

        $r3 = (kotlin.jvm.functions.Function1) $r2;

        interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: void touch(kotlin.jvm.functions.Function1)>($r3);

        return;
    }

    public static void click-Uv8p0NA$default(androidx.compose.ui.test.GestureScope, long, int, java.lang.Object)
    {
        androidx.compose.ui.test.GestureScope r0;
        int i0, $i1;
        java.lang.Object r1;
        long l2;

        r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        l2 := @parameter1: long;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        l2 = staticinvoke <androidx.compose.ui.test.GestureScopeKt: long getCenter(androidx.compose.ui.test.GestureScope)>(r0);

     label1:
        staticinvoke <androidx.compose.ui.test.GestureScopeKt: void click-Uv8p0NA(androidx.compose.ui.test.GestureScope,long)>(r0, l2);

        return;
    }

    public static final void longClick-d-4ec7I(androidx.compose.ui.test.GestureScope, long, long)
    {
        androidx.compose.ui.test.GestureScope $r0;
        long l0, l1;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        androidx.compose.ui.test.GestureScopeKt$longClick$1 $r2;
        kotlin.jvm.functions.Function1 $r3;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$longClick");

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $r2 = new androidx.compose.ui.test.GestureScopeKt$longClick$1;

        specialinvoke $r2.<androidx.compose.ui.test.GestureScopeKt$longClick$1: void <init>(long,long)>(l0, l1);

        $r3 = (kotlin.jvm.functions.Function1) $r2;

        interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: void touch(kotlin.jvm.functions.Function1)>($r3);

        return;
    }

    public static void longClick-d-4ec7I$default(androidx.compose.ui.test.GestureScope, long, long, int, java.lang.Object)
    {
        androidx.compose.ui.test.GestureScope r0;
        int i0, $i1, $i2;
        java.lang.Object r1;
        long l3, l4;

        r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        l3 := @parameter1: long;

        l4 := @parameter2: long;

        i0 := @parameter3: int;

        r1 := @parameter4: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        l3 = staticinvoke <androidx.compose.ui.test.GestureScopeKt: long getCenter(androidx.compose.ui.test.GestureScope)>(r0);

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        l4 = 600L;

     label2:
        staticinvoke <androidx.compose.ui.test.GestureScopeKt: void longClick-d-4ec7I(androidx.compose.ui.test.GestureScope,long,long)>(r0, l3, l4);

        return;
    }

    public static final void doubleClick-d-4ec7I(androidx.compose.ui.test.GestureScope, long, long)
    {
        androidx.compose.ui.test.GestureScope $r0;
        long l0, l1;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        androidx.compose.ui.test.GestureScopeKt$doubleClick$1 $r2;
        kotlin.jvm.functions.Function1 $r3;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$doubleClick");

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $r2 = new androidx.compose.ui.test.GestureScopeKt$doubleClick$1;

        specialinvoke $r2.<androidx.compose.ui.test.GestureScopeKt$doubleClick$1: void <init>(long,long)>(l0, l1);

        $r3 = (kotlin.jvm.functions.Function1) $r2;

        interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: void touch(kotlin.jvm.functions.Function1)>($r3);

        return;
    }

    public static void doubleClick-d-4ec7I$default(androidx.compose.ui.test.GestureScope, long, long, int, java.lang.Object)
    {
        androidx.compose.ui.test.GestureScope r0;
        int i0, $i1, $i2;
        java.lang.Object r1;
        long l3, l4;

        r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        l3 := @parameter1: long;

        l4 := @parameter2: long;

        i0 := @parameter3: int;

        r1 := @parameter4: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        l3 = staticinvoke <androidx.compose.ui.test.GestureScopeKt: long getCenter(androidx.compose.ui.test.GestureScope)>(r0);

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        l4 = 145L;

     label2:
        staticinvoke <androidx.compose.ui.test.GestureScopeKt: void doubleClick-d-4ec7I(androidx.compose.ui.test.GestureScope,long,long)>(r0, l3, l4);

        return;
    }

    public static final void swipe-DUneCvk(androidx.compose.ui.test.GestureScope, long, long, long)
    {
        androidx.compose.ui.test.GestureScope $r0;
        long l0, l1, l2;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        androidx.compose.ui.test.GestureScopeKt$swipe$1 $r2;
        kotlin.jvm.functions.Function1 $r3;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        l2 := @parameter3: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$swipe");

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $r2 = new androidx.compose.ui.test.GestureScopeKt$swipe$1;

        specialinvoke $r2.<androidx.compose.ui.test.GestureScopeKt$swipe$1: void <init>(long,long,long)>(l0, l1, l2);

        $r3 = (kotlin.jvm.functions.Function1) $r2;

        interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: void touch(kotlin.jvm.functions.Function1)>($r3);

        return;
    }

    public static void swipe-DUneCvk$default(androidx.compose.ui.test.GestureScope, long, long, long, int, java.lang.Object)
    {
        androidx.compose.ui.test.GestureScope r0;
        long l0, l1, l4;
        int i2, $i3;
        java.lang.Object r1;

        r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        l4 := @parameter3: long;

        i2 := @parameter4: int;

        r1 := @parameter5: java.lang.Object;

        $i3 = i2 & 4;

        if $i3 == 0 goto label1;

        l4 = 200L;

     label1:
        staticinvoke <androidx.compose.ui.test.GestureScopeKt: void swipe-DUneCvk(androidx.compose.ui.test.GestureScope,long,long,long)>(r0, l0, l1, l4);

        return;
    }

    public static final void pinch-_QUENCA(androidx.compose.ui.test.GestureScope, long, long, long, long, long)
    {
        androidx.compose.ui.test.GestureScope $r0;
        long l0, l1, l2, l3, l4;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        androidx.compose.ui.test.GestureScopeKt$pinch$1 $r2;
        kotlin.jvm.functions.Function1 $r3;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        l2 := @parameter3: long;

        l3 := @parameter4: long;

        l4 := @parameter5: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$pinch");

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $r2 = new androidx.compose.ui.test.GestureScopeKt$pinch$1;

        specialinvoke $r2.<androidx.compose.ui.test.GestureScopeKt$pinch$1: void <init>(long,long,long,long,long)>(l0, l1, l2, l3, l4);

        $r3 = (kotlin.jvm.functions.Function1) $r2;

        interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: void touch(kotlin.jvm.functions.Function1)>($r3);

        return;
    }

    public static void pinch-_QUENCA$default(androidx.compose.ui.test.GestureScope, long, long, long, long, long, int, java.lang.Object)
    {
        androidx.compose.ui.test.GestureScope r0;
        long l0, l1, l2, l3, l6;
        int i4, $i5;
        java.lang.Object r1;

        r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        l2 := @parameter3: long;

        l3 := @parameter4: long;

        l6 := @parameter5: long;

        i4 := @parameter6: int;

        r1 := @parameter7: java.lang.Object;

        $i5 = i4 & 16;

        if $i5 == 0 goto label1;

        l6 = 400L;

     label1:
        staticinvoke <androidx.compose.ui.test.GestureScopeKt: void pinch-_QUENCA(androidx.compose.ui.test.GestureScope,long,long,long,long,long)>(r0, l0, l1, l2, l3, l6);

        return;
    }

    public static final void swipeWithVelocity-5iVPX68(androidx.compose.ui.test.GestureScope, long, long, float, long)
    {
        androidx.compose.ui.test.GestureScope $r0;
        long l0, l1, l2;
        float f0;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        androidx.compose.ui.test.GestureScopeKt$swipeWithVelocity$1 $r2;
        kotlin.jvm.functions.Function1 $r3;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        f0 := @parameter3: float;

        l2 := @parameter4: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$swipeWithVelocity");

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $r2 = new androidx.compose.ui.test.GestureScopeKt$swipeWithVelocity$1;

        specialinvoke $r2.<androidx.compose.ui.test.GestureScopeKt$swipeWithVelocity$1: void <init>(long,long,float,long)>(l0, l1, f0, l2);

        $r3 = (kotlin.jvm.functions.Function1) $r2;

        interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: void touch(kotlin.jvm.functions.Function1)>($r3);

        return;
    }

    public static void swipeWithVelocity-5iVPX68$default(androidx.compose.ui.test.GestureScope, long, long, float, long, int, java.lang.Object)
    {
        androidx.compose.ui.test.GestureScope r0;
        long l0, l1, l4;
        float f0;
        int i2, $i3;
        java.lang.Object r1;

        r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        f0 := @parameter3: float;

        l4 := @parameter4: long;

        i2 := @parameter5: int;

        r1 := @parameter6: java.lang.Object;

        $i3 = i2 & 8;

        if $i3 == 0 goto label1;

        l4 = 200L;

     label1:
        staticinvoke <androidx.compose.ui.test.GestureScopeKt: void swipeWithVelocity-5iVPX68(androidx.compose.ui.test.GestureScope,long,long,float,long)>(r0, l0, l1, f0, l4);

        return;
    }

    public static final void swipeUp(androidx.compose.ui.test.GestureScope)
    {
        androidx.compose.ui.test.GestureScope $r0;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        androidx.compose.ui.test.GestureScopeKt$swipeUp$1 $r2;
        kotlin.jvm.functions.Function1 $r3;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $r2 = <androidx.compose.ui.test.GestureScopeKt$swipeUp$1: androidx.compose.ui.test.GestureScopeKt$swipeUp$1 INSTANCE>;

        $r3 = (kotlin.jvm.functions.Function1) $r2;

        interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: void touch(kotlin.jvm.functions.Function1)>($r3);

        return;
    }

    public static final void swipeUp(androidx.compose.ui.test.GestureScope, float, float, long)
    {
        androidx.compose.ui.test.GestureScope $r0;
        float f0, f1;
        long l0;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        androidx.compose.ui.test.GestureScopeKt$swipeUp$2 $r2;
        kotlin.jvm.functions.Function1 $r3;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        l0 := @parameter3: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $r2 = new androidx.compose.ui.test.GestureScopeKt$swipeUp$2;

        specialinvoke $r2.<androidx.compose.ui.test.GestureScopeKt$swipeUp$2: void <init>(float,float,long)>(f0, f1, l0);

        $r3 = (kotlin.jvm.functions.Function1) $r2;

        interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: void touch(kotlin.jvm.functions.Function1)>($r3);

        return;
    }

    public static void swipeUp$default(androidx.compose.ui.test.GestureScope, float, float, long, int, java.lang.Object)
    {
        androidx.compose.ui.test.GestureScope r0;
        int i0, $i1, $i2, $i3;
        java.lang.Object r1;
        androidx.compose.ui.test.MultiModalInjectionScope $r2;
        float f0, f1;
        long l4;

        r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        l4 := @parameter3: long;

        i0 := @parameter4: int;

        r1 := @parameter5: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        f0 = staticinvoke <androidx.compose.ui.test.GestureScopeKt: float getBottomFuzzed(androidx.compose.ui.test.GestureScope)>(r0);

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        $r2 = virtualinvoke r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        f1 = interfaceinvoke $r2.<androidx.compose.ui.test.MultiModalInjectionScope: float getTop()>();

     label2:
        $i3 = i0 & 4;

        if $i3 == 0 goto label3;

        l4 = 200L;

     label3:
        staticinvoke <androidx.compose.ui.test.GestureScopeKt: void swipeUp(androidx.compose.ui.test.GestureScope,float,float,long)>(r0, f0, f1, l4);

        return;
    }

    public static final void swipeDown(androidx.compose.ui.test.GestureScope)
    {
        androidx.compose.ui.test.GestureScope $r0;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        androidx.compose.ui.test.GestureScopeKt$swipeDown$1 $r2;
        kotlin.jvm.functions.Function1 $r3;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $r2 = <androidx.compose.ui.test.GestureScopeKt$swipeDown$1: androidx.compose.ui.test.GestureScopeKt$swipeDown$1 INSTANCE>;

        $r3 = (kotlin.jvm.functions.Function1) $r2;

        interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: void touch(kotlin.jvm.functions.Function1)>($r3);

        return;
    }

    public static final void swipeDown(androidx.compose.ui.test.GestureScope, float, float, long)
    {
        androidx.compose.ui.test.GestureScope $r0;
        float f0, f1;
        long l0;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        androidx.compose.ui.test.GestureScopeKt$swipeDown$2 $r2;
        kotlin.jvm.functions.Function1 $r3;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        l0 := @parameter3: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $r2 = new androidx.compose.ui.test.GestureScopeKt$swipeDown$2;

        specialinvoke $r2.<androidx.compose.ui.test.GestureScopeKt$swipeDown$2: void <init>(float,float,long)>(f0, f1, l0);

        $r3 = (kotlin.jvm.functions.Function1) $r2;

        interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: void touch(kotlin.jvm.functions.Function1)>($r3);

        return;
    }

    public static void swipeDown$default(androidx.compose.ui.test.GestureScope, float, float, long, int, java.lang.Object)
    {
        androidx.compose.ui.test.GestureScope r0;
        int i0, $i1, $i2, $i3;
        java.lang.Object r1;
        androidx.compose.ui.test.MultiModalInjectionScope $r2;
        float f0, f1;
        long l4;

        r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        l4 := @parameter3: long;

        i0 := @parameter4: int;

        r1 := @parameter5: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        f0 = staticinvoke <androidx.compose.ui.test.GestureScopeKt: float getTopFuzzed(androidx.compose.ui.test.GestureScope)>(r0);

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        $r2 = virtualinvoke r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        f1 = interfaceinvoke $r2.<androidx.compose.ui.test.MultiModalInjectionScope: float getBottom()>();

     label2:
        $i3 = i0 & 4;

        if $i3 == 0 goto label3;

        l4 = 200L;

     label3:
        staticinvoke <androidx.compose.ui.test.GestureScopeKt: void swipeDown(androidx.compose.ui.test.GestureScope,float,float,long)>(r0, f0, f1, l4);

        return;
    }

    public static final void swipeLeft(androidx.compose.ui.test.GestureScope)
    {
        androidx.compose.ui.test.GestureScope $r0;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        androidx.compose.ui.test.GestureScopeKt$swipeLeft$1 $r2;
        kotlin.jvm.functions.Function1 $r3;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $r2 = <androidx.compose.ui.test.GestureScopeKt$swipeLeft$1: androidx.compose.ui.test.GestureScopeKt$swipeLeft$1 INSTANCE>;

        $r3 = (kotlin.jvm.functions.Function1) $r2;

        interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: void touch(kotlin.jvm.functions.Function1)>($r3);

        return;
    }

    public static final void swipeLeft(androidx.compose.ui.test.GestureScope, float, float, long)
    {
        androidx.compose.ui.test.GestureScope $r0;
        float f0, f1;
        long l0;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        androidx.compose.ui.test.GestureScopeKt$swipeLeft$2 $r2;
        kotlin.jvm.functions.Function1 $r3;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        l0 := @parameter3: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $r2 = new androidx.compose.ui.test.GestureScopeKt$swipeLeft$2;

        specialinvoke $r2.<androidx.compose.ui.test.GestureScopeKt$swipeLeft$2: void <init>(float,float,long)>(f0, f1, l0);

        $r3 = (kotlin.jvm.functions.Function1) $r2;

        interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: void touch(kotlin.jvm.functions.Function1)>($r3);

        return;
    }

    public static void swipeLeft$default(androidx.compose.ui.test.GestureScope, float, float, long, int, java.lang.Object)
    {
        androidx.compose.ui.test.GestureScope r0;
        int i0, $i1, $i2, $i3;
        java.lang.Object r1;
        androidx.compose.ui.test.MultiModalInjectionScope $r2;
        float f0, f1;
        long l4;

        r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        l4 := @parameter3: long;

        i0 := @parameter4: int;

        r1 := @parameter5: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        f0 = staticinvoke <androidx.compose.ui.test.GestureScopeKt: float getRightFuzzed(androidx.compose.ui.test.GestureScope)>(r0);

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        $r2 = virtualinvoke r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        f1 = interfaceinvoke $r2.<androidx.compose.ui.test.MultiModalInjectionScope: float getLeft()>();

     label2:
        $i3 = i0 & 4;

        if $i3 == 0 goto label3;

        l4 = 200L;

     label3:
        staticinvoke <androidx.compose.ui.test.GestureScopeKt: void swipeLeft(androidx.compose.ui.test.GestureScope,float,float,long)>(r0, f0, f1, l4);

        return;
    }

    public static final void swipeRight(androidx.compose.ui.test.GestureScope)
    {
        androidx.compose.ui.test.GestureScope $r0;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        androidx.compose.ui.test.GestureScopeKt$swipeRight$1 $r2;
        kotlin.jvm.functions.Function1 $r3;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $r2 = <androidx.compose.ui.test.GestureScopeKt$swipeRight$1: androidx.compose.ui.test.GestureScopeKt$swipeRight$1 INSTANCE>;

        $r3 = (kotlin.jvm.functions.Function1) $r2;

        interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: void touch(kotlin.jvm.functions.Function1)>($r3);

        return;
    }

    public static final void swipeRight(androidx.compose.ui.test.GestureScope, float, float, long)
    {
        androidx.compose.ui.test.GestureScope $r0;
        float f0, f1;
        long l0;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        androidx.compose.ui.test.GestureScopeKt$swipeRight$2 $r2;
        kotlin.jvm.functions.Function1 $r3;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        l0 := @parameter3: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $r2 = new androidx.compose.ui.test.GestureScopeKt$swipeRight$2;

        specialinvoke $r2.<androidx.compose.ui.test.GestureScopeKt$swipeRight$2: void <init>(float,float,long)>(f0, f1, l0);

        $r3 = (kotlin.jvm.functions.Function1) $r2;

        interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: void touch(kotlin.jvm.functions.Function1)>($r3);

        return;
    }

    public static void swipeRight$default(androidx.compose.ui.test.GestureScope, float, float, long, int, java.lang.Object)
    {
        androidx.compose.ui.test.GestureScope r0;
        int i0, $i1, $i2, $i3;
        java.lang.Object r1;
        androidx.compose.ui.test.MultiModalInjectionScope $r2;
        float f0, f1;
        long l4;

        r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        l4 := @parameter3: long;

        i0 := @parameter4: int;

        r1 := @parameter5: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        f0 = staticinvoke <androidx.compose.ui.test.GestureScopeKt: float getLeftFuzzed(androidx.compose.ui.test.GestureScope)>(r0);

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        $r2 = virtualinvoke r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        f1 = interfaceinvoke $r2.<androidx.compose.ui.test.MultiModalInjectionScope: float getRight()>();

     label2:
        $i3 = i0 & 4;

        if $i3 == 0 goto label3;

        l4 = 200L;

     label3:
        staticinvoke <androidx.compose.ui.test.GestureScopeKt: void swipeRight(androidx.compose.ui.test.GestureScope,float,float,long)>(r0, f0, f1, l4);

        return;
    }

    private static final float getStartFuzzed(int)
    {
        int $i0, $i1;
        float $f0, $f1, $f2;

        $i0 := @parameter0: int;

        $f0 = (float) $i0;

        $f1 = $f0 * 0.083F;

        $i1 = staticinvoke <kotlin.math.MathKt: int roundToInt(float)>($f1);

        $f2 = (float) $i1;

        return $f2;
    }

    private static final float getEndFuzzed(int)
    {
        int $i0, $i1;
        float $f0, $f1, $f2;

        $i0 := @parameter0: int;

        $f0 = (float) $i0;

        $f1 = $f0 * 0.917F;

        $i1 = staticinvoke <kotlin.math.MathKt: int roundToInt(float)>($f1);

        $f2 = (float) $i1;

        return $f2;
    }

    private static final float getLeftFuzzed(androidx.compose.ui.test.GestureScope)
    {
        androidx.compose.ui.test.GestureScope $r0;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        int $i0;
        float $f0;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $i0 = interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: int getWidth()>();

        $f0 = staticinvoke <androidx.compose.ui.test.GestureScopeKt: float getStartFuzzed(int)>($i0);

        return $f0;
    }

    private static final float getTopFuzzed(androidx.compose.ui.test.GestureScope)
    {
        androidx.compose.ui.test.GestureScope $r0;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        int $i0;
        float $f0;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $i0 = interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: int getHeight()>();

        $f0 = staticinvoke <androidx.compose.ui.test.GestureScopeKt: float getStartFuzzed(int)>($i0);

        return $f0;
    }

    private static final float getRightFuzzed(androidx.compose.ui.test.GestureScope)
    {
        androidx.compose.ui.test.GestureScope $r0;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        int $i0;
        float $f0;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $i0 = interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: int getWidth()>();

        $f0 = staticinvoke <androidx.compose.ui.test.GestureScopeKt: float getEndFuzzed(int)>($i0);

        return $f0;
    }

    private static final float getBottomFuzzed(androidx.compose.ui.test.GestureScope)
    {
        androidx.compose.ui.test.GestureScope $r0;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        int $i0;
        float $f0;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $i0 = interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: int getHeight()>();

        $f0 = staticinvoke <androidx.compose.ui.test.GestureScopeKt: float getEndFuzzed(int)>($i0);

        return $f0;
    }

    public static final void down-0AR0LA0(androidx.compose.ui.test.GestureScope, int, long)
    {
        androidx.compose.ui.test.GestureScope $r0;
        int i0;
        long l1;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        androidx.compose.ui.test.GestureScopeKt$down$1 $r2;
        kotlin.jvm.functions.Function1 $r3;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$down");

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $r2 = new androidx.compose.ui.test.GestureScopeKt$down$1;

        specialinvoke $r2.<androidx.compose.ui.test.GestureScopeKt$down$1: void <init>(int,long)>(i0, l1);

        $r3 = (kotlin.jvm.functions.Function1) $r2;

        interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: void touch(kotlin.jvm.functions.Function1)>($r3);

        return;
    }

    public static final void down-Uv8p0NA(androidx.compose.ui.test.GestureScope, long)
    {
        androidx.compose.ui.test.GestureScope $r0;
        long l0;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        androidx.compose.ui.test.GestureScopeKt$down$2 $r2;
        kotlin.jvm.functions.Function1 $r3;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        l0 := @parameter1: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$down");

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $r2 = new androidx.compose.ui.test.GestureScopeKt$down$2;

        specialinvoke $r2.<androidx.compose.ui.test.GestureScopeKt$down$2: void <init>(long)>(l0);

        $r3 = (kotlin.jvm.functions.Function1) $r2;

        interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: void touch(kotlin.jvm.functions.Function1)>($r3);

        return;
    }

    public static final void moveTo-0AR0LA0(androidx.compose.ui.test.GestureScope, int, long)
    {
        androidx.compose.ui.test.GestureScope $r0;
        int i0;
        long l1;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        androidx.compose.ui.test.GestureScopeKt$moveTo$1 $r2;
        kotlin.jvm.functions.Function1 $r3;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$moveTo");

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $r2 = new androidx.compose.ui.test.GestureScopeKt$moveTo$1;

        specialinvoke $r2.<androidx.compose.ui.test.GestureScopeKt$moveTo$1: void <init>(int,long)>(i0, l1);

        $r3 = (kotlin.jvm.functions.Function1) $r2;

        interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: void touch(kotlin.jvm.functions.Function1)>($r3);

        return;
    }

    public static final void moveTo-Uv8p0NA(androidx.compose.ui.test.GestureScope, long)
    {
        androidx.compose.ui.test.GestureScope $r0;
        long l0;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        androidx.compose.ui.test.GestureScopeKt$moveTo$2 $r2;
        kotlin.jvm.functions.Function1 $r3;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        l0 := @parameter1: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$moveTo");

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $r2 = new androidx.compose.ui.test.GestureScopeKt$moveTo$2;

        specialinvoke $r2.<androidx.compose.ui.test.GestureScopeKt$moveTo$2: void <init>(long)>(l0);

        $r3 = (kotlin.jvm.functions.Function1) $r2;

        interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: void touch(kotlin.jvm.functions.Function1)>($r3);

        return;
    }

    public static final void movePointerTo-0AR0LA0(androidx.compose.ui.test.GestureScope, int, long)
    {
        androidx.compose.ui.test.GestureScope $r0;
        int i0;
        long l1;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        androidx.compose.ui.test.GestureScopeKt$movePointerTo$1 $r2;
        kotlin.jvm.functions.Function1 $r3;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$movePointerTo");

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $r2 = new androidx.compose.ui.test.GestureScopeKt$movePointerTo$1;

        specialinvoke $r2.<androidx.compose.ui.test.GestureScopeKt$movePointerTo$1: void <init>(int,long)>(i0, l1);

        $r3 = (kotlin.jvm.functions.Function1) $r2;

        interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: void touch(kotlin.jvm.functions.Function1)>($r3);

        return;
    }

    public static final void moveBy-0AR0LA0(androidx.compose.ui.test.GestureScope, int, long)
    {
        androidx.compose.ui.test.GestureScope $r0;
        int i0;
        long l1;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        androidx.compose.ui.test.GestureScopeKt$moveBy$1 $r2;
        kotlin.jvm.functions.Function1 $r3;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$moveBy");

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $r2 = new androidx.compose.ui.test.GestureScopeKt$moveBy$1;

        specialinvoke $r2.<androidx.compose.ui.test.GestureScopeKt$moveBy$1: void <init>(int,long)>(i0, l1);

        $r3 = (kotlin.jvm.functions.Function1) $r2;

        interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: void touch(kotlin.jvm.functions.Function1)>($r3);

        return;
    }

    public static final void moveBy-Uv8p0NA(androidx.compose.ui.test.GestureScope, long)
    {
        androidx.compose.ui.test.GestureScope $r0;
        long l0;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        androidx.compose.ui.test.GestureScopeKt$moveBy$2 $r2;
        kotlin.jvm.functions.Function1 $r3;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        l0 := @parameter1: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$moveBy");

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $r2 = new androidx.compose.ui.test.GestureScopeKt$moveBy$2;

        specialinvoke $r2.<androidx.compose.ui.test.GestureScopeKt$moveBy$2: void <init>(long)>(l0);

        $r3 = (kotlin.jvm.functions.Function1) $r2;

        interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: void touch(kotlin.jvm.functions.Function1)>($r3);

        return;
    }

    public static final void movePointerBy-0AR0LA0(androidx.compose.ui.test.GestureScope, int, long)
    {
        androidx.compose.ui.test.GestureScope $r0;
        int i0;
        long l1;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        androidx.compose.ui.test.GestureScopeKt$movePointerBy$1 $r2;
        kotlin.jvm.functions.Function1 $r3;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$movePointerBy");

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $r2 = new androidx.compose.ui.test.GestureScopeKt$movePointerBy$1;

        specialinvoke $r2.<androidx.compose.ui.test.GestureScopeKt$movePointerBy$1: void <init>(int,long)>(i0, l1);

        $r3 = (kotlin.jvm.functions.Function1) $r2;

        interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: void touch(kotlin.jvm.functions.Function1)>($r3);

        return;
    }

    public static final void move(androidx.compose.ui.test.GestureScope)
    {
        androidx.compose.ui.test.GestureScope $r0;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        androidx.compose.ui.test.GestureScopeKt$move$1 $r2;
        kotlin.jvm.functions.Function1 $r3;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $r2 = <androidx.compose.ui.test.GestureScopeKt$move$1: androidx.compose.ui.test.GestureScopeKt$move$1 INSTANCE>;

        $r3 = (kotlin.jvm.functions.Function1) $r2;

        interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: void touch(kotlin.jvm.functions.Function1)>($r3);

        return;
    }

    public static final void up(androidx.compose.ui.test.GestureScope, int)
    {
        androidx.compose.ui.test.GestureScope $r0;
        int i0;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        androidx.compose.ui.test.GestureScopeKt$up$1 $r2;
        kotlin.jvm.functions.Function1 $r3;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $r2 = new androidx.compose.ui.test.GestureScopeKt$up$1;

        specialinvoke $r2.<androidx.compose.ui.test.GestureScopeKt$up$1: void <init>(int)>(i0);

        $r3 = (kotlin.jvm.functions.Function1) $r2;

        interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: void touch(kotlin.jvm.functions.Function1)>($r3);

        return;
    }

    public static void up$default(androidx.compose.ui.test.GestureScope, int, int, java.lang.Object)
    {
        androidx.compose.ui.test.GestureScope r0;
        int i0, $i1, i2;
        java.lang.Object r1;

        r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        i2 = 0;

     label1:
        staticinvoke <androidx.compose.ui.test.GestureScopeKt: void up(androidx.compose.ui.test.GestureScope,int)>(r0, i2);

        return;
    }

    public static final void cancel(androidx.compose.ui.test.GestureScope)
    {
        androidx.compose.ui.test.GestureScope $r0;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        androidx.compose.ui.test.GestureScopeKt$cancel$1 $r2;
        kotlin.jvm.functions.Function1 $r3;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $r2 = <androidx.compose.ui.test.GestureScopeKt$cancel$1: androidx.compose.ui.test.GestureScopeKt$cancel$1 INSTANCE>;

        $r3 = (kotlin.jvm.functions.Function1) $r2;

        interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: void touch(kotlin.jvm.functions.Function1)>($r3);

        return;
    }

    public static final void advanceEventTime(androidx.compose.ui.test.GestureScope, long)
    {
        androidx.compose.ui.test.GestureScope $r0;
        long l0;
        androidx.compose.ui.test.MultiModalInjectionScope $r1;
        androidx.compose.ui.test.GestureScopeKt$advanceEventTime$1 $r2;
        kotlin.jvm.functions.Function1 $r3;

        $r0 := @parameter0: androidx.compose.ui.test.GestureScope;

        l0 := @parameter1: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.GestureScope: androidx.compose.ui.test.MultiModalInjectionScope getDelegateScope()>();

        $r2 = new androidx.compose.ui.test.GestureScopeKt$advanceEventTime$1;

        specialinvoke $r2.<androidx.compose.ui.test.GestureScopeKt$advanceEventTime$1: void <init>(long)>(l0);

        $r3 = (kotlin.jvm.functions.Function1) $r2;

        interfaceinvoke $r1.<androidx.compose.ui.test.MultiModalInjectionScope: void touch(kotlin.jvm.functions.Function1)>($r3);

        return;
    }

