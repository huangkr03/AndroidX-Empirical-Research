kotlin.collections.builders.MapBuilderKeys
<kotlin.collections.builders.MapBuilderKeys: kotlin.collections.builders.MapBuilder backing>
    public void <init>(kotlin.collections.builders.MapBuilder)
    {
        kotlin.collections.builders.MapBuilderKeys $r0;
        kotlin.collections.builders.MapBuilder $r1;

        $r0 := @this: kotlin.collections.builders.MapBuilderKeys;

        $r1 := @parameter0: kotlin.collections.builders.MapBuilder;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "backing");

        specialinvoke $r0.<kotlin.collections.AbstractMutableSet: void <init>()>();

        $r0.<kotlin.collections.builders.MapBuilderKeys: kotlin.collections.builders.MapBuilder backing> = $r1;

        return;
    }

    public boolean add(java.lang.Object)
    {
        kotlin.collections.builders.MapBuilderKeys $r0;
        java.lang.Object $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: kotlin.collections.builders.MapBuilderKeys;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public boolean addAll(java.util.Collection)
    {
        kotlin.collections.builders.MapBuilderKeys $r0;
        java.util.Collection $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: kotlin.collections.builders.MapBuilderKeys;

        $r1 := @parameter0: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "elements");

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void clear()
    {
        kotlin.collections.builders.MapBuilderKeys $r0;
        kotlin.collections.builders.MapBuilder $r1;

        $r0 := @this: kotlin.collections.builders.MapBuilderKeys;

        $r1 = $r0.<kotlin.collections.builders.MapBuilderKeys: kotlin.collections.builders.MapBuilder backing>;

        virtualinvoke $r1.<kotlin.collections.builders.MapBuilder: void clear()>();

        return;
    }

    public boolean contains(java.lang.Object)
    {
        kotlin.collections.builders.MapBuilderKeys $r0;
        kotlin.collections.builders.MapBuilder $r1;
        boolean $z0;
        java.lang.Object $r2;

        $r0 := @this: kotlin.collections.builders.MapBuilderKeys;

        $r2 := @parameter0: java.lang.Object;

        $r1 = $r0.<kotlin.collections.builders.MapBuilderKeys: kotlin.collections.builders.MapBuilder backing>;

        $z0 = virtualinvoke $r1.<kotlin.collections.builders.MapBuilder: boolean containsKey(java.lang.Object)>($r2);

        return $z0;
    }

    public int getSize()
    {
        kotlin.collections.builders.MapBuilderKeys $r0;
        int $i0;
        kotlin.collections.builders.MapBuilder $r1;

        $r0 := @this: kotlin.collections.builders.MapBuilderKeys;

        $r1 = $r0.<kotlin.collections.builders.MapBuilderKeys: kotlin.collections.builders.MapBuilder backing>;

        $i0 = virtualinvoke $r1.<kotlin.collections.builders.MapBuilder: int size()>();

        return $i0;
    }

    public boolean isEmpty()
    {
        kotlin.collections.builders.MapBuilderKeys $r0;
        boolean $z0;
        kotlin.collections.builders.MapBuilder $r1;

        $r0 := @this: kotlin.collections.builders.MapBuilderKeys;

        $r1 = $r0.<kotlin.collections.builders.MapBuilderKeys: kotlin.collections.builders.MapBuilder backing>;

        $z0 = virtualinvoke $r1.<kotlin.collections.builders.MapBuilder: boolean isEmpty()>();

        return $z0;
    }

    public java.util.Iterator iterator()
    {
        kotlin.collections.builders.MapBuilderKeys $r0;
        kotlin.collections.builders.MapBuilder$KeysItr $r1;
        kotlin.collections.builders.MapBuilder $r2;

        $r0 := @this: kotlin.collections.builders.MapBuilderKeys;

        $r2 = $r0.<kotlin.collections.builders.MapBuilderKeys: kotlin.collections.builders.MapBuilder backing>;

        $r1 = virtualinvoke $r2.<kotlin.collections.builders.MapBuilder: kotlin.collections.builders.MapBuilder$KeysItr keysIterator$kotlin_stdlib()>();

        return $r1;
    }

    public boolean remove(java.lang.Object)
    {
        kotlin.collections.builders.MapBuilderKeys $r0;
        kotlin.collections.builders.MapBuilder $r1;
        int $i0;
        java.lang.Object $r2;

        $r0 := @this: kotlin.collections.builders.MapBuilderKeys;

        $r2 := @parameter0: java.lang.Object;

        $r1 = $r0.<kotlin.collections.builders.MapBuilderKeys: kotlin.collections.builders.MapBuilder backing>;

        $i0 = virtualinvoke $r1.<kotlin.collections.builders.MapBuilder: int removeKey$kotlin_stdlib(java.lang.Object)>($r2);

        if $i0 < 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean removeAll(java.util.Collection)
    {
        kotlin.collections.builders.MapBuilderKeys $r0;
        boolean $z0;
        java.util.Collection $r1;
        kotlin.collections.builders.MapBuilder $r2;

        $r0 := @this: kotlin.collections.builders.MapBuilderKeys;

        $r1 := @parameter0: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "elements");

        $r2 = $r0.<kotlin.collections.builders.MapBuilderKeys: kotlin.collections.builders.MapBuilder backing>;

        virtualinvoke $r2.<kotlin.collections.builders.MapBuilder: void checkIsMutable$kotlin_stdlib()>();

        $z0 = specialinvoke $r0.<kotlin.collections.AbstractMutableSet: boolean removeAll(java.util.Collection)>($r1);

        return $z0;
    }

    public boolean retainAll(java.util.Collection)
    {
        kotlin.collections.builders.MapBuilderKeys $r0;
        boolean $z0;
        java.util.Collection $r1;
        kotlin.collections.builders.MapBuilder $r2;

        $r0 := @this: kotlin.collections.builders.MapBuilderKeys;

        $r1 := @parameter0: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "elements");

        $r2 = $r0.<kotlin.collections.builders.MapBuilderKeys: kotlin.collections.builders.MapBuilder backing>;

        virtualinvoke $r2.<kotlin.collections.builders.MapBuilder: void checkIsMutable$kotlin_stdlib()>();

        $z0 = specialinvoke $r0.<kotlin.collections.AbstractMutableSet: boolean retainAll(java.util.Collection)>($r1);

        return $z0;
    }

