androidx.compose.compiler.plugins.kotlin.TryCatchComposableChecker
    public void registerModuleComponents(org.jetbrains.kotlin.container.StorageComponentContainer, org.jetbrains.kotlin.platform.TargetPlatform, org.jetbrains.kotlin.descriptors.ModuleDescriptor)
    {
        androidx.compose.compiler.plugins.kotlin.TryCatchComposableChecker r0;
        org.jetbrains.kotlin.container.StorageComponentContainer r1;
        org.jetbrains.kotlin.platform.TargetPlatform r2;
        org.jetbrains.kotlin.descriptors.ModuleDescriptor r3;
        boolean $z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.TryCatchComposableChecker;

        r1 := @parameter0: org.jetbrains.kotlin.container.StorageComponentContainer;

        r2 := @parameter1: org.jetbrains.kotlin.platform.TargetPlatform;

        r3 := @parameter2: org.jetbrains.kotlin.descriptors.ModuleDescriptor;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "container");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "platform");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "moduleDescriptor");

        $z0 = staticinvoke <org.jetbrains.kotlin.platform.jvm.JvmPlatformKt: boolean isJvm(org.jetbrains.kotlin.platform.TargetPlatform)>(r2);

        if $z0 != 0 goto label1;

        return;

     label1:
        staticinvoke <org.jetbrains.kotlin.container.DslKt: void useInstance(org.jetbrains.kotlin.container.StorageComponentContainer,java.lang.Object)>(r1, r0);

        return;
    }

    public void check(org.jetbrains.kotlin.resolve.calls.model.ResolvedCall, org.jetbrains.kotlin.com.intellij.psi.PsiElement, org.jetbrains.kotlin.resolve.calls.checkers.CallCheckerContext)
    {
        androidx.compose.compiler.plugins.kotlin.TryCatchComposableChecker r0;
        org.jetbrains.kotlin.resolve.calls.model.ResolvedCall r1;
        org.jetbrains.kotlin.com.intellij.psi.PsiElement r2, r6, $r14, r18, r19;
        org.jetbrains.kotlin.resolve.calls.checkers.CallCheckerContext r3;
        org.jetbrains.kotlin.resolve.BindingTrace r4;
        org.jetbrains.kotlin.psi.KtElement r5, $r9;
        java.lang.Throwable r7, $r17;
        org.jetbrains.kotlin.psi.Call $r8;
        boolean $z0, $z1, $z2;
        org.jetbrains.kotlin.psi.KtTryExpression $r10, $r12;
        org.jetbrains.kotlin.psi.KtBlockExpression $r11;
        org.jetbrains.kotlin.diagnostics.DiagnosticFactory0 $r13;
        org.jetbrains.kotlin.diagnostics.SimpleDiagnostic $r15;
        org.jetbrains.kotlin.diagnostics.Diagnostic $r16;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.TryCatchComposableChecker;

        r1 := @parameter0: org.jetbrains.kotlin.resolve.calls.model.ResolvedCall;

        r2 := @parameter1: org.jetbrains.kotlin.com.intellij.psi.PsiElement;

        r3 := @parameter2: org.jetbrains.kotlin.resolve.calls.checkers.CallCheckerContext;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "resolvedCall");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "reportOn");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "context");

        r4 = virtualinvoke r3.<org.jetbrains.kotlin.resolve.calls.checkers.CallCheckerContext: org.jetbrains.kotlin.resolve.BindingTrace getTrace()>();

        $r8 = interfaceinvoke r1.<org.jetbrains.kotlin.resolve.calls.model.ResolvedCall: org.jetbrains.kotlin.psi.Call getCall()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r8, "resolvedCall.call");

        $r9 = interfaceinvoke $r8.<org.jetbrains.kotlin.psi.Call: org.jetbrains.kotlin.psi.KtElement getCallElement()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r9, "resolvedCall.call.callElement");

        r5 = $r9;

        $z0 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposableCallCheckerKt: boolean isComposableInvocation(org.jetbrains.kotlin.resolve.calls.model.ResolvedCall)>(r1);

        if $z0 == 0 goto label6;

        r18 = (org.jetbrains.kotlin.com.intellij.psi.PsiElement) r5;

     label1:
        if r18 == null goto label6;

        r6 = interfaceinvoke r18.<org.jetbrains.kotlin.com.intellij.psi.PsiElement: org.jetbrains.kotlin.com.intellij.psi.PsiElement getParent()>();

        $z1 = r6 instanceof org.jetbrains.kotlin.psi.KtTryExpression;

        if $z1 == 0 goto label2;

        $r10 = (org.jetbrains.kotlin.psi.KtTryExpression) r6;

        $r11 = virtualinvoke $r10.<org.jetbrains.kotlin.psi.KtTryExpression: org.jetbrains.kotlin.psi.KtBlockExpression getTryBlock()>();

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r18, $r11);

        if $z2 == 0 goto label2;

        $r13 = <androidx.compose.compiler.plugins.kotlin.ComposeErrors: org.jetbrains.kotlin.diagnostics.DiagnosticFactory0 ILLEGAL_TRY_CATCH_AROUND_COMPOSABLE>;

        $r12 = (org.jetbrains.kotlin.psi.KtTryExpression) r6;

        $r14 = virtualinvoke $r12.<org.jetbrains.kotlin.psi.KtTryExpression: org.jetbrains.kotlin.com.intellij.psi.PsiElement getTryKeyword()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r14);

        $r15 = virtualinvoke $r13.<org.jetbrains.kotlin.diagnostics.DiagnosticFactory0: org.jetbrains.kotlin.diagnostics.SimpleDiagnostic on(org.jetbrains.kotlin.com.intellij.psi.PsiElement)>($r14);

        $r16 = (org.jetbrains.kotlin.diagnostics.Diagnostic) $r15;

        interfaceinvoke r4.<org.jetbrains.kotlin.resolve.BindingTrace: void report(org.jetbrains.kotlin.diagnostics.Diagnostic)>($r16);

     label2:
        r19 = interfaceinvoke r18.<org.jetbrains.kotlin.com.intellij.psi.PsiElement: org.jetbrains.kotlin.com.intellij.psi.PsiElement getParent()>();

     label3:
        goto label5;

     label4:
        $r17 := @caughtexception;

        r7 = $r17;

        r19 = null;

     label5:
        r18 = r19;

        goto label1;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public void <init>()
    {
        androidx.compose.compiler.plugins.kotlin.TryCatchComposableChecker r0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.TryCatchComposableChecker;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

