androidx.camera.camera2.internal.ZslControlImpl
<androidx.camera.camera2.internal.ZslControlImpl: java.lang.String TAG>
<androidx.camera.camera2.internal.ZslControlImpl: int RING_BUFFER_CAPACITY>
<androidx.camera.camera2.internal.ZslControlImpl: int MAX_IMAGES>
<androidx.camera.camera2.internal.ZslControlImpl: java.util.Map mReprocessingInputSizeMap>
<androidx.camera.camera2.internal.ZslControlImpl: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat mCameraCharacteristicsCompat>
<androidx.camera.camera2.internal.ZslControlImpl: androidx.camera.core.internal.utils.ZslRingBuffer mImageRingBuffer>
<androidx.camera.camera2.internal.ZslControlImpl: boolean mIsZslDisabledByUseCaseConfig>
<androidx.camera.camera2.internal.ZslControlImpl: boolean mIsZslDisabledByFlashMode>
<androidx.camera.camera2.internal.ZslControlImpl: boolean mIsPrivateReprocessingSupported>
<androidx.camera.camera2.internal.ZslControlImpl: androidx.camera.core.SafeCloseImageReaderProxy mReprocessingImageReader>
<androidx.camera.camera2.internal.ZslControlImpl: androidx.camera.core.impl.CameraCaptureCallback mMetadataMatchingCaptureCallback>
<androidx.camera.camera2.internal.ZslControlImpl: androidx.camera.core.impl.DeferrableSurface mReprocessingImageDeferrableSurface>
<androidx.camera.camera2.internal.ZslControlImpl: android.media.ImageWriter mReprocessingImageWriter>
    void <init>(androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat)
    {
        androidx.camera.camera2.internal.ZslControlImpl r0;
        androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat r1, $r2, $r3;
        boolean $z0;
        java.util.Map $r4;
        androidx.camera.core.internal.utils.ZslRingBuffer $r5;
        androidx.camera.core.internal.utils.RingBuffer$OnRemoveCallback $r6;

        r0 := @this: androidx.camera.camera2.internal.ZslControlImpl;

        r1 := @parameter0: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.camera2.internal.ZslControlImpl: boolean mIsZslDisabledByUseCaseConfig> = 0;

        r0.<androidx.camera.camera2.internal.ZslControlImpl: boolean mIsZslDisabledByFlashMode> = 0;

        r0.<androidx.camera.camera2.internal.ZslControlImpl: boolean mIsPrivateReprocessingSupported> = 0;

        r0.<androidx.camera.camera2.internal.ZslControlImpl: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat mCameraCharacteristicsCompat> = r1;

        $r2 = r0.<androidx.camera.camera2.internal.ZslControlImpl: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat mCameraCharacteristicsCompat>;

        $z0 = staticinvoke <androidx.camera.camera2.internal.ZslUtil: boolean isCapabilitySupported(androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat,int)>($r2, 4);

        r0.<androidx.camera.camera2.internal.ZslControlImpl: boolean mIsPrivateReprocessingSupported> = $z0;

        $r3 = r0.<androidx.camera.camera2.internal.ZslControlImpl: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat mCameraCharacteristicsCompat>;

        $r4 = specialinvoke r0.<androidx.camera.camera2.internal.ZslControlImpl: java.util.Map createReprocessingInputSizeMap(androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat)>($r3);

        r0.<androidx.camera.camera2.internal.ZslControlImpl: java.util.Map mReprocessingInputSizeMap> = $r4;

        $r5 = new androidx.camera.core.internal.utils.ZslRingBuffer;

        $r6 = dynamicinvoke "onRemove" <androidx.camera.core.internal.utils.RingBuffer$OnRemoveCallback ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.camera2.internal.ZslControlImpl: void lambda$new$0(androidx.camera.core.ImageProxy)>, methodtype: void __METHODTYPE__(androidx.camera.core.ImageProxy));

        specialinvoke $r5.<androidx.camera.core.internal.utils.ZslRingBuffer: void <init>(int,androidx.camera.core.internal.utils.RingBuffer$OnRemoveCallback)>(3, $r6);

        r0.<androidx.camera.camera2.internal.ZslControlImpl: androidx.camera.core.internal.utils.ZslRingBuffer mImageRingBuffer> = $r5;

        return;
    }

    public void setZslDisabledByUserCaseConfig(boolean)
    {
        androidx.camera.camera2.internal.ZslControlImpl r0;
        boolean z0;

        r0 := @this: androidx.camera.camera2.internal.ZslControlImpl;

        z0 := @parameter0: boolean;

        r0.<androidx.camera.camera2.internal.ZslControlImpl: boolean mIsZslDisabledByUseCaseConfig> = z0;

        return;
    }

    public boolean isZslDisabledByUserCaseConfig()
    {
        androidx.camera.camera2.internal.ZslControlImpl r0;
        boolean $z0;

        r0 := @this: androidx.camera.camera2.internal.ZslControlImpl;

        $z0 = r0.<androidx.camera.camera2.internal.ZslControlImpl: boolean mIsZslDisabledByUseCaseConfig>;

        return $z0;
    }

    public void setZslDisabledByFlashMode(boolean)
    {
        androidx.camera.camera2.internal.ZslControlImpl r0;
        boolean z0;

        r0 := @this: androidx.camera.camera2.internal.ZslControlImpl;

        z0 := @parameter0: boolean;

        r0.<androidx.camera.camera2.internal.ZslControlImpl: boolean mIsZslDisabledByFlashMode> = z0;

        return;
    }

    public boolean isZslDisabledByFlashMode()
    {
        androidx.camera.camera2.internal.ZslControlImpl r0;
        boolean $z0;

        r0 := @this: androidx.camera.camera2.internal.ZslControlImpl;

        $z0 = r0.<androidx.camera.camera2.internal.ZslControlImpl: boolean mIsZslDisabledByFlashMode>;

        return $z0;
    }

    public void addZslConfig(androidx.camera.core.impl.SessionConfig$Builder)
    {
        androidx.camera.camera2.internal.ZslControlImpl r0;
        androidx.camera.core.impl.SessionConfig$Builder r1;
        byte b0;
        android.util.Size r2, $r20;
        androidx.camera.core.MetadataImageReader r3, $r12;
        androidx.camera.core.SafeCloseImageReaderProxy r4, $r14, $r18, $r21, $r22, $r35, $r36, $r37;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Map $r5, $r6, $r9;
        java.lang.Integer $r7, $r10;
        androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat $r8;
        java.lang.Object $r11;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        androidx.camera.core.impl.CameraCaptureCallback $r13, $r30;
        androidx.camera.core.impl.ImageReaderProxy$OnImageAvailableListener $r15;
        java.util.concurrent.Executor $r16;
        androidx.camera.core.impl.ImmediateSurface $r17;
        android.view.Surface $r19;
        androidx.camera.core.impl.DeferrableSurface $r23, $r28;
        com.google.common.util.concurrent.ListenableFuture $r24;
        java.lang.Runnable $r26;
        java.util.concurrent.ScheduledExecutorService $r27;
        androidx.camera.camera2.internal.ZslControlImpl$1 $r32;
        android.hardware.camera2.params.InputConfiguration $r34;

        r0 := @this: androidx.camera.camera2.internal.ZslControlImpl;

        r1 := @parameter0: androidx.camera.core.impl.SessionConfig$Builder;

        specialinvoke r0.<androidx.camera.camera2.internal.ZslControlImpl: void cleanup()>();

        $z0 = r0.<androidx.camera.camera2.internal.ZslControlImpl: boolean mIsZslDisabledByUseCaseConfig>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $z1 = r0.<androidx.camera.camera2.internal.ZslControlImpl: boolean mIsPrivateReprocessingSupported>;

        if $z1 == 0 goto label2;

        $r5 = r0.<androidx.camera.camera2.internal.ZslControlImpl: java.util.Map mReprocessingInputSizeMap>;

        $z2 = interfaceinvoke $r5.<java.util.Map: boolean isEmpty()>();

        if $z2 != 0 goto label2;

        $r6 = r0.<androidx.camera.camera2.internal.ZslControlImpl: java.util.Map mReprocessingInputSizeMap>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(34);

        $z3 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>($r7);

        if $z3 == 0 goto label2;

        $r8 = r0.<androidx.camera.camera2.internal.ZslControlImpl: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat mCameraCharacteristicsCompat>;

        $z4 = specialinvoke r0.<androidx.camera.camera2.internal.ZslControlImpl: boolean isJpegValidOutputForInputFormat(androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat,int)>($r8, 34);

        if $z4 != 0 goto label3;

     label2:
        return;

     label3:
        b0 = 34;

        $r9 = r0.<androidx.camera.camera2.internal.ZslControlImpl: java.util.Map mReprocessingInputSizeMap>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(b0);

        $r11 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);

        r2 = (android.util.Size) $r11;

        $r12 = new androidx.camera.core.MetadataImageReader;

        $i1 = virtualinvoke r2.<android.util.Size: int getWidth()>();

        $i2 = virtualinvoke r2.<android.util.Size: int getHeight()>();

        specialinvoke $r12.<androidx.camera.core.MetadataImageReader: void <init>(int,int,int,int)>($i1, $i2, b0, 9);

        r3 = $r12;

        $r13 = virtualinvoke r3.<androidx.camera.core.MetadataImageReader: androidx.camera.core.impl.CameraCaptureCallback getCameraCaptureCallback()>();

        r0.<androidx.camera.camera2.internal.ZslControlImpl: androidx.camera.core.impl.CameraCaptureCallback mMetadataMatchingCaptureCallback> = $r13;

        $r14 = new androidx.camera.core.SafeCloseImageReaderProxy;

        specialinvoke $r14.<androidx.camera.core.SafeCloseImageReaderProxy: void <init>(androidx.camera.core.impl.ImageReaderProxy)>(r3);

        r0.<androidx.camera.camera2.internal.ZslControlImpl: androidx.camera.core.SafeCloseImageReaderProxy mReprocessingImageReader> = $r14;

        $r15 = dynamicinvoke "onImageAvailable" <androidx.camera.core.impl.ImageReaderProxy$OnImageAvailableListener (androidx.camera.camera2.internal.ZslControlImpl)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(androidx.camera.core.impl.ImageReaderProxy), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.ZslControlImpl: void lambda$addZslConfig$1(androidx.camera.core.impl.ImageReaderProxy)>, methodtype: void __METHODTYPE__(androidx.camera.core.impl.ImageReaderProxy));

        $r16 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor ioExecutor()>();

        virtualinvoke r3.<androidx.camera.core.MetadataImageReader: void setOnImageAvailableListener(androidx.camera.core.impl.ImageReaderProxy$OnImageAvailableListener,java.util.concurrent.Executor)>($r15, $r16);

        $r17 = new androidx.camera.core.impl.ImmediateSurface;

        $r18 = r0.<androidx.camera.camera2.internal.ZslControlImpl: androidx.camera.core.SafeCloseImageReaderProxy mReprocessingImageReader>;

        $r19 = virtualinvoke $r18.<androidx.camera.core.SafeCloseImageReaderProxy: android.view.Surface getSurface()>();

        $r20 = new android.util.Size;

        $r21 = r0.<androidx.camera.camera2.internal.ZslControlImpl: androidx.camera.core.SafeCloseImageReaderProxy mReprocessingImageReader>;

        $i3 = virtualinvoke $r21.<androidx.camera.core.SafeCloseImageReaderProxy: int getWidth()>();

        $r22 = r0.<androidx.camera.camera2.internal.ZslControlImpl: androidx.camera.core.SafeCloseImageReaderProxy mReprocessingImageReader>;

        $i4 = virtualinvoke $r22.<androidx.camera.core.SafeCloseImageReaderProxy: int getHeight()>();

        specialinvoke $r20.<android.util.Size: void <init>(int,int)>($i3, $i4);

        specialinvoke $r17.<androidx.camera.core.impl.ImmediateSurface: void <init>(android.view.Surface,android.util.Size,int)>($r19, $r20, b0);

        r0.<androidx.camera.camera2.internal.ZslControlImpl: androidx.camera.core.impl.DeferrableSurface mReprocessingImageDeferrableSurface> = $r17;

        r4 = r0.<androidx.camera.camera2.internal.ZslControlImpl: androidx.camera.core.SafeCloseImageReaderProxy mReprocessingImageReader>;

        $r23 = r0.<androidx.camera.camera2.internal.ZslControlImpl: androidx.camera.core.impl.DeferrableSurface mReprocessingImageDeferrableSurface>;

        $r24 = virtualinvoke $r23.<androidx.camera.core.impl.DeferrableSurface: com.google.common.util.concurrent.ListenableFuture getTerminationFuture()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r4);

        $r26 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.core.SafeCloseImageReaderProxy)>(r4) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_VIRTUAL" <androidx.camera.core.SafeCloseImageReaderProxy: void safeClose()>, methodtype: void __METHODTYPE__());

        $r27 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.ScheduledExecutorService mainThreadExecutor()>();

        interfaceinvoke $r24.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r26, $r27);

        $r28 = r0.<androidx.camera.camera2.internal.ZslControlImpl: androidx.camera.core.impl.DeferrableSurface mReprocessingImageDeferrableSurface>;

        virtualinvoke r1.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder addSurface(androidx.camera.core.impl.DeferrableSurface)>($r28);

        $r30 = r0.<androidx.camera.camera2.internal.ZslControlImpl: androidx.camera.core.impl.CameraCaptureCallback mMetadataMatchingCaptureCallback>;

        virtualinvoke r1.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder addCameraCaptureCallback(androidx.camera.core.impl.CameraCaptureCallback)>($r30);

        $r32 = new androidx.camera.camera2.internal.ZslControlImpl$1;

        specialinvoke $r32.<androidx.camera.camera2.internal.ZslControlImpl$1: void <init>(androidx.camera.camera2.internal.ZslControlImpl)>(r0);

        virtualinvoke r1.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder addSessionStateCallback(android.hardware.camera2.CameraCaptureSession$StateCallback)>($r32);

        $r34 = new android.hardware.camera2.params.InputConfiguration;

        $r35 = r0.<androidx.camera.camera2.internal.ZslControlImpl: androidx.camera.core.SafeCloseImageReaderProxy mReprocessingImageReader>;

        $i5 = virtualinvoke $r35.<androidx.camera.core.SafeCloseImageReaderProxy: int getWidth()>();

        $r36 = r0.<androidx.camera.camera2.internal.ZslControlImpl: androidx.camera.core.SafeCloseImageReaderProxy mReprocessingImageReader>;

        $i6 = virtualinvoke $r36.<androidx.camera.core.SafeCloseImageReaderProxy: int getHeight()>();

        $r37 = r0.<androidx.camera.camera2.internal.ZslControlImpl: androidx.camera.core.SafeCloseImageReaderProxy mReprocessingImageReader>;

        $i7 = virtualinvoke $r37.<androidx.camera.core.SafeCloseImageReaderProxy: int getImageFormat()>();

        specialinvoke $r34.<android.hardware.camera2.params.InputConfiguration: void <init>(int,int,int)>($i5, $i6, $i7);

        virtualinvoke r1.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder setInputConfiguration(android.hardware.camera2.params.InputConfiguration)>($r34);

        return;
    }

    public androidx.camera.core.ImageProxy dequeueImageFromBuffer()
    {
        androidx.camera.camera2.internal.ZslControlImpl r0;
        java.lang.Throwable r1, $r4;
        androidx.camera.core.internal.utils.ZslRingBuffer $r2;
        java.lang.Object $r3;
        androidx.camera.core.ImageProxy r5;

        r0 := @this: androidx.camera.camera2.internal.ZslControlImpl;

        r5 = null;

     label1:
        $r2 = r0.<androidx.camera.camera2.internal.ZslControlImpl: androidx.camera.core.internal.utils.ZslRingBuffer mImageRingBuffer>;

        $r3 = virtualinvoke $r2.<androidx.camera.core.internal.utils.ZslRingBuffer: java.lang.Object dequeue()>();

        r5 = (androidx.camera.core.ImageProxy) $r3;

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String)>("ZslControlImpl", "dequeueImageFromBuffer no such element");

     label4:
        return r5;

        catch java.util.NoSuchElementException from label1 to label2 with label3;
    }

    public boolean enqueueImageToImageWriter(androidx.camera.core.ImageProxy)
    {
        androidx.camera.camera2.internal.ZslControlImpl r0;
        androidx.camera.core.ImageProxy r1;
        android.media.Image r2;
        java.lang.Throwable r3, $r6;
        int $i0;
        android.media.ImageWriter $r4, $r5;
        java.lang.StringBuilder $r7, $r8, $r10;
        java.lang.String $r9, $r11;

        r0 := @this: androidx.camera.camera2.internal.ZslControlImpl;

        r1 := @parameter0: androidx.camera.core.ImageProxy;

        r2 = interfaceinvoke r1.<androidx.camera.core.ImageProxy: android.media.Image getImage()>();

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 23 goto label5;

        $r4 = r0.<androidx.camera.camera2.internal.ZslControlImpl: android.media.ImageWriter mReprocessingImageWriter>;

        if $r4 == null goto label5;

        if r2 == null goto label5;

     label1:
        $r5 = r0.<androidx.camera.camera2.internal.ZslControlImpl: android.media.ImageWriter mReprocessingImageWriter>;

        staticinvoke <androidx.camera.core.internal.compat.ImageWriterCompat: void queueInputImage(android.media.ImageWriter,android.media.Image)>($r5, r2);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("enqueueImageToImageWriter throws IllegalStateException = ");

        $r9 = virtualinvoke r3.<java.lang.IllegalStateException: java.lang.String getMessage()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String)>("ZslControlImpl", $r11);

        return 0;

     label4:
        return 1;

     label5:
        return 0;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    private void cleanup()
    {
        androidx.camera.camera2.internal.ZslControlImpl r0;
        androidx.camera.core.internal.utils.ZslRingBuffer r1;
        boolean $z0;
        com.google.common.util.concurrent.ListenableFuture $r2;
        java.lang.Runnable $r4;
        java.util.concurrent.ScheduledExecutorService $r5;
        java.lang.Object $r6;
        androidx.camera.core.ImageProxy r7;
        androidx.camera.core.impl.DeferrableSurface r8;
        androidx.camera.core.SafeCloseImageReaderProxy r9;
        android.media.ImageWriter r10;

        r0 := @this: androidx.camera.camera2.internal.ZslControlImpl;

        r1 = r0.<androidx.camera.camera2.internal.ZslControlImpl: androidx.camera.core.internal.utils.ZslRingBuffer mImageRingBuffer>;

     label1:
        $z0 = virtualinvoke r1.<androidx.camera.core.internal.utils.ZslRingBuffer: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r6 = virtualinvoke r1.<androidx.camera.core.internal.utils.ZslRingBuffer: java.lang.Object dequeue()>();

        r7 = (androidx.camera.core.ImageProxy) $r6;

        interfaceinvoke r7.<androidx.camera.core.ImageProxy: void close()>();

        goto label1;

     label2:
        r8 = r0.<androidx.camera.camera2.internal.ZslControlImpl: androidx.camera.core.impl.DeferrableSurface mReprocessingImageDeferrableSurface>;

        if r8 == null goto label4;

        r9 = r0.<androidx.camera.camera2.internal.ZslControlImpl: androidx.camera.core.SafeCloseImageReaderProxy mReprocessingImageReader>;

        if r9 == null goto label3;

        $r2 = virtualinvoke r8.<androidx.camera.core.impl.DeferrableSurface: com.google.common.util.concurrent.ListenableFuture getTerminationFuture()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r9);

        $r4 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.core.SafeCloseImageReaderProxy)>(r9) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_VIRTUAL" <androidx.camera.core.SafeCloseImageReaderProxy: void safeClose()>, methodtype: void __METHODTYPE__());

        $r5 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.ScheduledExecutorService mainThreadExecutor()>();

        interfaceinvoke $r2.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r4, $r5);

        r0.<androidx.camera.camera2.internal.ZslControlImpl: androidx.camera.core.SafeCloseImageReaderProxy mReprocessingImageReader> = null;

     label3:
        virtualinvoke r8.<androidx.camera.core.impl.DeferrableSurface: void close()>();

        r0.<androidx.camera.camera2.internal.ZslControlImpl: androidx.camera.core.impl.DeferrableSurface mReprocessingImageDeferrableSurface> = null;

     label4:
        r10 = r0.<androidx.camera.camera2.internal.ZslControlImpl: android.media.ImageWriter mReprocessingImageWriter>;

        if r10 == null goto label5;

        virtualinvoke r10.<android.media.ImageWriter: void close()>();

        r0.<androidx.camera.camera2.internal.ZslControlImpl: android.media.ImageWriter mReprocessingImageWriter> = null;

     label5:
        return;
    }

    private java.util.Map createReprocessingInputSizeMap(androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat)
    {
        androidx.camera.camera2.internal.ZslControlImpl r0;
        androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat r1;
        android.hardware.camera2.params.StreamConfigurationMap r2;
        java.util.HashMap r3, $r8, $r10;
        int[] r4, $r9;
        int i0, i1, i2;
        android.util.Size[] r5;
        android.hardware.camera2.CameraCharacteristics$Key $r6;
        java.lang.Object $r7;
        androidx.camera.core.impl.utils.CompareSizesByArea $r11;
        java.lang.Integer $r12;
        android.util.Size $r13;

        r0 := @this: androidx.camera.camera2.internal.ZslControlImpl;

        r1 := @parameter0: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat;

        $r6 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_STREAM_CONFIGURATION_MAP>;

        $r7 = virtualinvoke r1.<androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r6);

        r2 = (android.hardware.camera2.params.StreamConfigurationMap) $r7;

        if r2 == null goto label1;

        $r9 = virtualinvoke r2.<android.hardware.camera2.params.StreamConfigurationMap: int[] getInputFormats()>();

        if $r9 != null goto label2;

     label1:
        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        return $r8;

     label2:
        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        r3 = $r10;

        r4 = virtualinvoke r2.<android.hardware.camera2.params.StreamConfigurationMap: int[] getInputFormats()>();

        i0 = lengthof r4;

        i2 = 0;

     label3:
        if i2 >= i0 goto label5;

        i1 = r4[i2];

        r5 = virtualinvoke r2.<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getInputSizes(int)>(i1);

        if r5 == null goto label4;

        $r11 = new androidx.camera.core.impl.utils.CompareSizesByArea;

        specialinvoke $r11.<androidx.camera.core.impl.utils.CompareSizesByArea: void <init>(boolean)>(1);

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r5, $r11);

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r13 = r5[0];

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r13);

     label4:
        i2 = i2 + 1;

        goto label3;

     label5:
        return r3;
    }

    private boolean isJpegValidOutputForInputFormat(androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat, int)
    {
        androidx.camera.camera2.internal.ZslControlImpl r0;
        androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat r1;
        int i0, i1, i2, i3;
        android.hardware.camera2.params.StreamConfigurationMap r2;
        int[] r3, r4;
        android.hardware.camera2.CameraCharacteristics$Key $r5;
        java.lang.Object $r6;

        r0 := @this: androidx.camera.camera2.internal.ZslControlImpl;

        r1 := @parameter0: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat;

        i0 := @parameter1: int;

        $r5 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_STREAM_CONFIGURATION_MAP>;

        $r6 = virtualinvoke r1.<androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r5);

        r2 = (android.hardware.camera2.params.StreamConfigurationMap) $r6;

        if r2 != null goto label1;

        return 0;

     label1:
        r3 = virtualinvoke r2.<android.hardware.camera2.params.StreamConfigurationMap: int[] getValidOutputFormatsForInput(int)>(i0);

        if r3 != null goto label2;

        return 0;

     label2:
        r4 = r3;

        i1 = lengthof r4;

        i3 = 0;

     label3:
        if i3 >= i1 goto label5;

        i2 = r4[i3];

        if i2 != 256 goto label4;

        return 1;

     label4:
        i3 = i3 + 1;

        goto label3;

     label5:
        return 0;
    }

    private void lambda$addZslConfig$1(androidx.camera.core.impl.ImageReaderProxy)
    {
        androidx.camera.camera2.internal.ZslControlImpl r0;
        androidx.camera.core.impl.ImageReaderProxy r1;
        androidx.camera.core.internal.utils.ZslRingBuffer $r2;
        java.lang.Throwable $r3, r10;
        java.lang.StringBuilder $r4, $r5, $r7;
        java.lang.String $r6, $r8;
        androidx.camera.core.ImageProxy r9;

        r0 := @this: androidx.camera.camera2.internal.ZslControlImpl;

        r1 := @parameter0: androidx.camera.core.impl.ImageReaderProxy;

     label1:
        r9 = interfaceinvoke r1.<androidx.camera.core.impl.ImageReaderProxy: androidx.camera.core.ImageProxy acquireLatestImage()>();

        if r9 == null goto label2;

        $r2 = r0.<androidx.camera.camera2.internal.ZslControlImpl: androidx.camera.core.internal.utils.ZslRingBuffer mImageRingBuffer>;

        virtualinvoke $r2.<androidx.camera.core.internal.utils.ZslRingBuffer: void enqueue(androidx.camera.core.ImageProxy)>(r9);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r10 = $r3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to acquire latest image IllegalStateException = ");

        $r6 = virtualinvoke r10.<java.lang.IllegalStateException: java.lang.String getMessage()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String)>("ZslControlImpl", $r8);

     label4:
        return;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    private static void lambda$new$0(androidx.camera.core.ImageProxy)
    {
        androidx.camera.core.ImageProxy r0;

        r0 := @parameter0: androidx.camera.core.ImageProxy;

        interfaceinvoke r0.<androidx.camera.core.ImageProxy: void close()>();

        return;
    }

androidx.camera.camera2.internal.ZslControlImpl$1
<androidx.camera.camera2.internal.ZslControlImpl$1: androidx.camera.camera2.internal.ZslControlImpl this$0>
    void <init>(androidx.camera.camera2.internal.ZslControlImpl)
    {
        androidx.camera.camera2.internal.ZslControlImpl$1 r0;
        androidx.camera.camera2.internal.ZslControlImpl r1;

        r0 := @this: androidx.camera.camera2.internal.ZslControlImpl$1;

        r1 := @parameter0: androidx.camera.camera2.internal.ZslControlImpl;

        r0.<androidx.camera.camera2.internal.ZslControlImpl$1: androidx.camera.camera2.internal.ZslControlImpl this$0> = r1;

        specialinvoke r0.<android.hardware.camera2.CameraCaptureSession$StateCallback: void <init>()>();

        return;
    }

    public void onConfigured(android.hardware.camera2.CameraCaptureSession)
    {
        androidx.camera.camera2.internal.ZslControlImpl$1 r0;
        android.hardware.camera2.CameraCaptureSession r1;
        android.view.Surface r2;
        androidx.camera.camera2.internal.ZslControlImpl $r3;
        android.media.ImageWriter $r4;

        r0 := @this: androidx.camera.camera2.internal.ZslControlImpl$1;

        r1 := @parameter0: android.hardware.camera2.CameraCaptureSession;

        r2 = virtualinvoke r1.<android.hardware.camera2.CameraCaptureSession: android.view.Surface getInputSurface()>();

        if r2 == null goto label1;

        $r3 = r0.<androidx.camera.camera2.internal.ZslControlImpl$1: androidx.camera.camera2.internal.ZslControlImpl this$0>;

        $r4 = staticinvoke <androidx.camera.core.internal.compat.ImageWriterCompat: android.media.ImageWriter newInstance(android.view.Surface,int)>(r2, 1);

        $r3.<androidx.camera.camera2.internal.ZslControlImpl: android.media.ImageWriter mReprocessingImageWriter> = $r4;

     label1:
        return;
    }

    public void onConfigureFailed(android.hardware.camera2.CameraCaptureSession)
    {
        androidx.camera.camera2.internal.ZslControlImpl$1 r0;
        android.hardware.camera2.CameraCaptureSession r1;

        r0 := @this: androidx.camera.camera2.internal.ZslControlImpl$1;

        r1 := @parameter0: android.hardware.camera2.CameraCaptureSession;

        return;
    }

