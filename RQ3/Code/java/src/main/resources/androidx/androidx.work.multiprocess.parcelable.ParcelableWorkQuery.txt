androidx.work.multiprocess.parcelable.ParcelableWorkQuery
<androidx.work.multiprocess.parcelable.ParcelableWorkQuery: androidx.work.WorkQuery mWorkQuery>
<androidx.work.multiprocess.parcelable.ParcelableWorkQuery: android.os.Parcelable$Creator CREATOR>
    public void <init>(androidx.work.WorkQuery)
    {
        androidx.work.multiprocess.parcelable.ParcelableWorkQuery r0;
        androidx.work.WorkQuery r1;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableWorkQuery;

        r1 := @parameter0: androidx.work.WorkQuery;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.work.multiprocess.parcelable.ParcelableWorkQuery: androidx.work.WorkQuery mWorkQuery> = r1;

        return;
    }

    protected void <init>(android.os.Parcel)
    {
        androidx.work.multiprocess.parcelable.ParcelableWorkQuery r0;
        android.os.Parcel r1;
        java.util.ArrayList r2, r14, r16, r17;
        androidx.work.WorkQuery$Builder $r3, $r4, $r5, $r6;
        androidx.work.WorkQuery $r7;
        int $i0, i1, i2, i3, i4;
        androidx.work.WorkInfo$State $r9;
        java.lang.String $r11;
        java.util.UUID $r12;
        java.lang.Object r13, r15;
        java.util.List r18, r19, r20, r21;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableWorkQuery;

        r1 := @parameter0: android.os.Parcel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r13 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        i1 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        if i1 <= 0 goto label2;

        r16 = new java.util.ArrayList;

        specialinvoke r16.<java.util.ArrayList: void <init>(int)>(i1);

        r13 = r16;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        $r11 = virtualinvoke r1.<android.os.Parcel: java.lang.String readString()>();

        $r12 = staticinvoke <java.util.UUID: java.util.UUID fromString(java.lang.String)>($r11);

        r18 = (java.util.List) r13;

        interfaceinvoke r18.<java.util.List: boolean add(java.lang.Object)>($r12);

        i2 = i2 + 1;

        goto label1;

     label2:
        r14 = virtualinvoke r1.<android.os.Parcel: java.util.ArrayList createStringArrayList()>();

        r2 = virtualinvoke r1.<android.os.Parcel: java.util.ArrayList createStringArrayList()>();

        r15 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        i3 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        if i3 <= 0 goto label4;

        r17 = new java.util.ArrayList;

        specialinvoke r17.<java.util.ArrayList: void <init>(int)>(i3);

        r15 = r17;

        i4 = 0;

     label3:
        if i4 >= i3 goto label4;

        $i0 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        $r9 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: androidx.work.WorkInfo$State intToState(int)>($i0);

        r19 = (java.util.List) r15;

        interfaceinvoke r19.<java.util.List: boolean add(java.lang.Object)>($r9);

        i4 = i4 + 1;

        goto label3;

     label4:
        r20 = (java.util.List) r13;

        $r3 = staticinvoke <androidx.work.WorkQuery$Builder: androidx.work.WorkQuery$Builder fromIds(java.util.List)>(r20);

        $r4 = virtualinvoke $r3.<androidx.work.WorkQuery$Builder: androidx.work.WorkQuery$Builder addUniqueWorkNames(java.util.List)>(r14);

        $r5 = virtualinvoke $r4.<androidx.work.WorkQuery$Builder: androidx.work.WorkQuery$Builder addTags(java.util.List)>(r2);

        r21 = (java.util.List) r15;

        $r6 = virtualinvoke $r5.<androidx.work.WorkQuery$Builder: androidx.work.WorkQuery$Builder addStates(java.util.List)>(r21);

        $r7 = virtualinvoke $r6.<androidx.work.WorkQuery$Builder: androidx.work.WorkQuery build()>();

        r0.<androidx.work.multiprocess.parcelable.ParcelableWorkQuery: androidx.work.WorkQuery mWorkQuery> = $r7;

        return;
    }

    public androidx.work.WorkQuery getWorkQuery()
    {
        androidx.work.multiprocess.parcelable.ParcelableWorkQuery r0;
        androidx.work.WorkQuery $r1;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableWorkQuery;

        $r1 = r0.<androidx.work.multiprocess.parcelable.ParcelableWorkQuery: androidx.work.WorkQuery mWorkQuery>;

        return $r1;
    }

    public int describeContents()
    {
        androidx.work.multiprocess.parcelable.ParcelableWorkQuery r0;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableWorkQuery;

        return 0;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        androidx.work.multiprocess.parcelable.ParcelableWorkQuery r0;
        android.os.Parcel r1;
        int i0, $i1, $i2, $i3;
        java.util.List r2, r3, r15, r16;
        java.util.Iterator r4, r13;
        androidx.work.WorkInfo$State r5;
        androidx.work.WorkQuery $r6, $r7, $r8, $r9;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r10, $r11;
        java.lang.String $r12;
        java.util.UUID r14;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableWorkQuery;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        $r6 = r0.<androidx.work.multiprocess.parcelable.ParcelableWorkQuery: androidx.work.WorkQuery mWorkQuery>;

        r2 = virtualinvoke $r6.<androidx.work.WorkQuery: java.util.List getIds()>();

        $i1 = interfaceinvoke r2.<java.util.List: int size()>();

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i1);

        $z0 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        r13 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label2;

        $r11 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        r14 = (java.util.UUID) $r11;

        $r12 = virtualinvoke r14.<java.util.UUID: java.lang.String toString()>();

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>($r12);

        goto label1;

     label2:
        $r7 = r0.<androidx.work.multiprocess.parcelable.ParcelableWorkQuery: androidx.work.WorkQuery mWorkQuery>;

        r15 = virtualinvoke $r7.<androidx.work.WorkQuery: java.util.List getUniqueWorkNames()>();

        virtualinvoke r1.<android.os.Parcel: void writeStringList(java.util.List)>(r15);

        $r8 = r0.<androidx.work.multiprocess.parcelable.ParcelableWorkQuery: androidx.work.WorkQuery mWorkQuery>;

        r16 = virtualinvoke $r8.<androidx.work.WorkQuery: java.util.List getTags()>();

        virtualinvoke r1.<android.os.Parcel: void writeStringList(java.util.List)>(r16);

        $r9 = r0.<androidx.work.multiprocess.parcelable.ParcelableWorkQuery: androidx.work.WorkQuery mWorkQuery>;

        r3 = virtualinvoke $r9.<androidx.work.WorkQuery: java.util.List getStates()>();

        $i2 = interfaceinvoke r3.<java.util.List: int size()>();

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i2);

        $z1 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label4;

        r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (androidx.work.WorkInfo$State) $r10;

        $i3 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: int stateToInt(androidx.work.WorkInfo$State)>(r5);

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i3);

        goto label3;

     label4:
        return;
    }

    static void <clinit>()
    {
        androidx.work.multiprocess.parcelable.ParcelableWorkQuery$1 $r0;

        $r0 = new androidx.work.multiprocess.parcelable.ParcelableWorkQuery$1;

        specialinvoke $r0.<androidx.work.multiprocess.parcelable.ParcelableWorkQuery$1: void <init>()>();

        <androidx.work.multiprocess.parcelable.ParcelableWorkQuery: android.os.Parcelable$Creator CREATOR> = $r0;

        return;
    }

androidx.work.multiprocess.parcelable.ParcelableWorkQuery$1
    void <init>()
    {
        androidx.work.multiprocess.parcelable.ParcelableWorkQuery$1 r0;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableWorkQuery$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public androidx.work.multiprocess.parcelable.ParcelableWorkQuery createFromParcel(android.os.Parcel)
    {
        androidx.work.multiprocess.parcelable.ParcelableWorkQuery$1 r0;
        android.os.Parcel r1;
        androidx.work.multiprocess.parcelable.ParcelableWorkQuery $r2;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableWorkQuery$1;

        r1 := @parameter0: android.os.Parcel;

        $r2 = new androidx.work.multiprocess.parcelable.ParcelableWorkQuery;

        specialinvoke $r2.<androidx.work.multiprocess.parcelable.ParcelableWorkQuery: void <init>(android.os.Parcel)>(r1);

        return $r2;
    }

    public androidx.work.multiprocess.parcelable.ParcelableWorkQuery[] newArray(int)
    {
        androidx.work.multiprocess.parcelable.ParcelableWorkQuery$1 r0;
        int i0;
        androidx.work.multiprocess.parcelable.ParcelableWorkQuery[] $r1;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableWorkQuery$1;

        i0 := @parameter0: int;

        $r1 = newarray (androidx.work.multiprocess.parcelable.ParcelableWorkQuery)[i0];

        return $r1;
    }

    public volatile java.lang.Object[] newArray(int)
    {
        androidx.work.multiprocess.parcelable.ParcelableWorkQuery$1 r0;
        int i0;
        androidx.work.multiprocess.parcelable.ParcelableWorkQuery[] $r1;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableWorkQuery$1;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.work.multiprocess.parcelable.ParcelableWorkQuery$1: androidx.work.multiprocess.parcelable.ParcelableWorkQuery[] newArray(int)>(i0);

        return $r1;
    }

    public volatile java.lang.Object createFromParcel(android.os.Parcel)
    {
        androidx.work.multiprocess.parcelable.ParcelableWorkQuery$1 r0;
        android.os.Parcel r1;
        androidx.work.multiprocess.parcelable.ParcelableWorkQuery $r2;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableWorkQuery$1;

        r1 := @parameter0: android.os.Parcel;

        $r2 = virtualinvoke r0.<androidx.work.multiprocess.parcelable.ParcelableWorkQuery$1: androidx.work.multiprocess.parcelable.ParcelableWorkQuery createFromParcel(android.os.Parcel)>(r1);

        return $r2;
    }

