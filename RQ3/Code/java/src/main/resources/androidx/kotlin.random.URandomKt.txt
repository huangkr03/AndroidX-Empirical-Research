kotlin.random.URandomKt
    public static final void checkUIntRangeBounds-J1ME1BU(int, int)
    {
        int $i0, $i1, $i2;
        boolean $z0;
        kotlin.UInt $r0, $r1;
        java.lang.String $r2;
        java.lang.IllegalArgumentException $r3;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = staticinvoke <kotlin.UnsignedKt: int uintCompare(int,int)>($i1, $i0);

        if $i2 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        return;

     label3:
        $r0 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r1 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i1);

        $r2 = staticinvoke <kotlin.random.RandomKt: java.lang.String boundsErrorMessage(java.lang.Object,java.lang.Object)>($r0, $r1);

        $r3 = new java.lang.IllegalArgumentException;

        $r2 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r3;
    }

    public static final void checkULongRangeBounds-eb3DHEI(long, long)
    {
        long $l0, $l1;
        int $i2;
        boolean $z0;
        kotlin.ULong $r0, $r1;
        java.lang.String $r2;
        java.lang.IllegalArgumentException $r3;

        $l1 := @parameter0: long;

        $l0 := @parameter1: long;

        $i2 = staticinvoke <kotlin.UnsignedKt: int ulongCompare(long,long)>($l0, $l1);

        if $i2 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        return;

     label3:
        $r0 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l1);

        $r1 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r2 = staticinvoke <kotlin.random.RandomKt: java.lang.String boundsErrorMessage(java.lang.Object,java.lang.Object)>($r0, $r1);

        $r3 = new java.lang.IllegalArgumentException;

        $r2 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r3;
    }

    public static final byte[] nextUBytes(kotlin.random.Random, int)
    {
        int $i0;
        kotlin.random.Random $r0;
        byte[] $r1;

        $r0 := @parameter0: kotlin.random.Random;

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = virtualinvoke $r0.<kotlin.random.Random: byte[] nextBytes(int)>($i0);

        $r1 = staticinvoke <kotlin.UByteArray: byte[] constructor-impl(byte[])>($r1);

        return $r1;
    }

    public static final byte[] nextUBytes-EVgfTAA(kotlin.random.Random, byte[])
    {
        kotlin.random.Random $r0;
        byte[] $r1;

        $r0 := @parameter0: kotlin.random.Random;

        $r1 := @parameter1: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$nextUBytes");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "array");

        virtualinvoke $r0.<kotlin.random.Random: byte[] nextBytes(byte[])>($r1);

        return $r1;
    }

    public static final byte[] nextUBytes-Wvrt4B4(kotlin.random.Random, byte[], int, int)
    {
        kotlin.random.Random $r0;
        byte[] $r1;
        int $i0, $i1;

        $r0 := @parameter0: kotlin.random.Random;

        $r1 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$nextUBytes");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "array");

        virtualinvoke $r0.<kotlin.random.Random: byte[] nextBytes(byte[],int,int)>($r1, $i0, $i1);

        return $r1;
    }

    public static byte[] nextUBytes-Wvrt4B4$default(kotlin.random.Random, byte[], int, int, int, java.lang.Object)
    {
        byte[] $r0;
        kotlin.random.Random $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r2;

        $r1 := @parameter0: kotlin.random.Random;

        $r0 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $r2 := @parameter5: java.lang.Object;

        $i3 = $i2 & 2;

        if $i3 == 0 goto label1;

        $i0 = 0;

     label1:
        $i2 = $i2 & 4;

        if $i2 == 0 goto label2;

        $i1 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

     label2:
        $r0 = staticinvoke <kotlin.random.URandomKt: byte[] nextUBytes-Wvrt4B4(kotlin.random.Random,byte[],int,int)>($r1, $r0, $i0, $i1);

        return $r0;
    }

    public static final int nextUInt(kotlin.random.Random)
    {
        kotlin.random.Random $r0;
        int $i0;

        $r0 := @parameter0: kotlin.random.Random;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $i0 = virtualinvoke $r0.<kotlin.random.Random: int nextInt()>();

        $i0 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($i0);

        return $i0;
    }

    public static final int nextUInt(kotlin.random.Random, kotlin.ranges.UIntRange)
    {
        kotlin.random.Random $r0;
        kotlin.ranges.UIntRange $r1;
        boolean $z0;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        $r0 := @parameter0: kotlin.random.Random;

        $r1 := @parameter1: kotlin.ranges.UIntRange;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "range");

        $z0 = virtualinvoke $r1.<kotlin.ranges.UIntRange: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $i0 = virtualinvoke $r1.<kotlin.ranges.UIntRange: int getLast-pVg5ArA()>();

        $i0 = staticinvoke <kotlin.UnsignedKt: int uintCompare(int,int)>($i0, -1);

        if $i0 >= 0 goto label1;

        $i0 = virtualinvoke $r1.<kotlin.ranges.UIntRange: int getFirst-pVg5ArA()>();

        $i1 = virtualinvoke $r1.<kotlin.ranges.UIntRange: int getLast-pVg5ArA()>();

        $i1 = $i1 + 1;

        $i1 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($i1);

        $i0 = staticinvoke <kotlin.random.URandomKt: int nextUInt-a8DCA5k(kotlin.random.Random,int,int)>($r0, $i0, $i1);

        return $i0;

     label1:
        $i0 = virtualinvoke $r1.<kotlin.ranges.UIntRange: int getFirst-pVg5ArA()>();

        $i0 = staticinvoke <kotlin.UnsignedKt: int uintCompare(int,int)>($i0, 0);

        if $i0 <= 0 goto label2;

        $i0 = virtualinvoke $r1.<kotlin.ranges.UIntRange: int getFirst-pVg5ArA()>();

        $i0 = $i0 + -1;

        $i0 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($i0);

        $i1 = virtualinvoke $r1.<kotlin.ranges.UIntRange: int getLast-pVg5ArA()>();

        $i0 = staticinvoke <kotlin.random.URandomKt: int nextUInt-a8DCA5k(kotlin.random.Random,int,int)>($r0, $i0, $i1);

        $i0 = $i0 + 1;

        $i0 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($i0);

        return $i0;

     label2:
        $i0 = staticinvoke <kotlin.random.URandomKt: int nextUInt(kotlin.random.Random)>($r0);

        return $i0;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot get random in empty range: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;
    }

    public static final int nextUInt-a8DCA5k(kotlin.random.Random, int, int)
    {
        kotlin.random.Random $r0;
        int $i0, $i1;

        $r0 := @parameter0: kotlin.random.Random;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$nextUInt");

        staticinvoke <kotlin.random.URandomKt: void checkUIntRangeBounds-J1ME1BU(int,int)>($i0, $i1);

        $i0 = $i0 ^ -2147483648;

        $i1 = $i1 ^ -2147483648;

        $i0 = virtualinvoke $r0.<kotlin.random.Random: int nextInt(int,int)>($i0, $i1);

        $i0 = $i0 ^ -2147483648;

        $i0 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($i0);

        return $i0;
    }

    public static final int nextUInt-qCasIEU(kotlin.random.Random, int)
    {
        int $i0;
        kotlin.random.Random $r0;

        $r0 := @parameter0: kotlin.random.Random;

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$nextUInt");

        $i0 = staticinvoke <kotlin.random.URandomKt: int nextUInt-a8DCA5k(kotlin.random.Random,int,int)>($r0, 0, $i0);

        return $i0;
    }

    public static final long nextULong(kotlin.random.Random)
    {
        kotlin.random.Random $r0;
        long $l0;

        $r0 := @parameter0: kotlin.random.Random;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $l0 = virtualinvoke $r0.<kotlin.random.Random: long nextLong()>();

        $l0 = staticinvoke <kotlin.ULong: long constructor-impl(long)>($l0);

        return $l0;
    }

    public static final long nextULong(kotlin.random.Random, kotlin.ranges.ULongRange)
    {
        kotlin.random.Random $r0;
        kotlin.ranges.ULongRange $r1;
        boolean $z0;
        long $l0, $l2, $l3;
        int $i1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        $r0 := @parameter0: kotlin.random.Random;

        $r1 := @parameter1: kotlin.ranges.ULongRange;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "range");

        $z0 = virtualinvoke $r1.<kotlin.ranges.ULongRange: boolean isEmpty()>();

        if $z0 != 0 goto label5;

        $l0 = virtualinvoke $r1.<kotlin.ranges.ULongRange: long getLast-s-VKNKU()>();

        $i1 = staticinvoke <kotlin.UnsignedKt: int ulongCompare(long,long)>($l0, -1L);

        if $i1 >= 0 goto label2;

        $l0 = virtualinvoke $r1.<kotlin.ranges.ULongRange: long getFirst-s-VKNKU()>();

        $l2 = virtualinvoke $r1.<kotlin.ranges.ULongRange: long getLast-s-VKNKU()>();

        $l3 = staticinvoke <kotlin.ULong: long constructor-impl(long)>(1L);

        $l2 = $l2 + $l3;

        $l2 = staticinvoke <kotlin.ULong: long constructor-impl(long)>($l2);

        $l0 = staticinvoke <kotlin.random.URandomKt: long nextULong-jmpaW-c(kotlin.random.Random,long,long)>($r0, $l0, $l2);

     label1:
        goto label4;

     label2:
        $l0 = virtualinvoke $r1.<kotlin.ranges.ULongRange: long getFirst-s-VKNKU()>();

        $i1 = staticinvoke <kotlin.UnsignedKt: int ulongCompare(long,long)>($l0, 0L);

        if $i1 <= 0 goto label3;

        $l0 = virtualinvoke $r1.<kotlin.ranges.ULongRange: long getFirst-s-VKNKU()>();

        $l2 = staticinvoke <kotlin.ULong: long constructor-impl(long)>(1L);

        $l0 = $l0 - $l2;

        $l0 = staticinvoke <kotlin.ULong: long constructor-impl(long)>($l0);

        $l2 = virtualinvoke $r1.<kotlin.ranges.ULongRange: long getLast-s-VKNKU()>();

        $l0 = staticinvoke <kotlin.random.URandomKt: long nextULong-jmpaW-c(kotlin.random.Random,long,long)>($r0, $l0, $l2);

        $l2 = staticinvoke <kotlin.ULong: long constructor-impl(long)>(1L);

        $l0 = $l0 + $l2;

        $l0 = staticinvoke <kotlin.ULong: long constructor-impl(long)>($l0);

        goto label4;

     label3:
        $l0 = staticinvoke <kotlin.random.URandomKt: long nextULong(kotlin.random.Random)>($r0);

        goto label1;

     label4:
        return $l0;

     label5:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot get random in empty range: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        goto label6;

     label6:
        throw $r2;
    }

    public static final long nextULong-V1Xi4fY(kotlin.random.Random, long)
    {
        long $l0;
        kotlin.random.Random $r0;

        $r0 := @parameter0: kotlin.random.Random;

        $l0 := @parameter1: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$nextULong");

        $l0 = staticinvoke <kotlin.random.URandomKt: long nextULong-jmpaW-c(kotlin.random.Random,long,long)>($r0, 0L, $l0);

        return $l0;
    }

    public static final long nextULong-jmpaW-c(kotlin.random.Random, long, long)
    {
        kotlin.random.Random $r0;
        long $l0, $l1;

        $r0 := @parameter0: kotlin.random.Random;

        $l0 := @parameter1: long;

        $l1 := @parameter2: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$nextULong");

        staticinvoke <kotlin.random.URandomKt: void checkULongRangeBounds-eb3DHEI(long,long)>($l0, $l1);

        $l0 = $l0 ^ -9223372036854775808L;

        $l1 = $l1 ^ -9223372036854775808L;

        $l0 = virtualinvoke $r0.<kotlin.random.Random: long nextLong(long,long)>($l0, $l1);

        $l0 = $l0 ^ -9223372036854775808L;

        $l0 = staticinvoke <kotlin.ULong: long constructor-impl(long)>($l0);

        return $l0;
    }

