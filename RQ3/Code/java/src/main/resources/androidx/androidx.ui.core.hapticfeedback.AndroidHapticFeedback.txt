androidx.ui.core.hapticfeedback.AndroidHapticFeedback
<androidx.ui.core.hapticfeedback.AndroidHapticFeedback: android.view.View view>
    public void <init>(android.view.View)
    {
        androidx.ui.core.hapticfeedback.AndroidHapticFeedback r0;
        android.view.View r1;

        r0 := @this: androidx.ui.core.hapticfeedback.AndroidHapticFeedback;

        r1 := @parameter0: android.view.View;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "view");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.ui.core.hapticfeedback.AndroidHapticFeedback: android.view.View view> = r1;

        return;
    }

    public void performHapticFeedback(androidx.ui.core.hapticfeedback.HapticFeedbackType)
    {
        androidx.ui.core.hapticfeedback.AndroidHapticFeedback r0;
        androidx.ui.core.hapticfeedback.HapticFeedbackType r1, r2;
        int i0, $i1;
        int[] $r3;
        android.view.View $r4, $r5;
        kotlin.NoWhenBranchMatchedException $r6;

        r0 := @this: androidx.ui.core.hapticfeedback.AndroidHapticFeedback;

        r1 := @parameter0: androidx.ui.core.hapticfeedback.HapticFeedbackType;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "hapticFeedbackType");

        r2 = r1;

        $r3 = <androidx.ui.core.hapticfeedback.AndroidHapticFeedback$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i1 = virtualinvoke r2.<androidx.ui.core.hapticfeedback.HapticFeedbackType: int ordinal()>();

        i0 = $r3[$i1];

        tableswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label3;
        };

     label1:
        $r5 = r0.<androidx.ui.core.hapticfeedback.AndroidHapticFeedback: android.view.View view>;

        virtualinvoke $r5.<android.view.View: boolean performHapticFeedback(int)>(0);

        goto label4;

     label2:
        $r4 = r0.<androidx.ui.core.hapticfeedback.AndroidHapticFeedback: android.view.View view>;

        virtualinvoke $r4.<android.view.View: boolean performHapticFeedback(int)>(9);

        goto label4;

     label3:
        $r6 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke $r6.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        throw $r6;

     label4:
        return;
    }

androidx.ui.core.hapticfeedback.AndroidHapticFeedback$WhenMappings
<androidx.ui.core.hapticfeedback.AndroidHapticFeedback$WhenMappings: int[] $EnumSwitchMapping$0>
    public static final void <clinit>()
    {
        int[] r0;
        androidx.ui.core.hapticfeedback.HapticFeedbackType[] $r1;
        int $i0, $i1, $i2;
        androidx.ui.core.hapticfeedback.HapticFeedbackType $r2, $r3;

        $r1 = staticinvoke <androidx.ui.core.hapticfeedback.HapticFeedbackType: androidx.ui.core.hapticfeedback.HapticFeedbackType[] values()>();

        $i0 = lengthof $r1;

        r0 = newarray (int)[$i0];

        $r2 = <androidx.ui.core.hapticfeedback.HapticFeedbackType: androidx.ui.core.hapticfeedback.HapticFeedbackType LongPress>;

        $i1 = virtualinvoke $r2.<androidx.ui.core.hapticfeedback.HapticFeedbackType: int ordinal()>();

        r0[$i1] = 1;

        $r3 = <androidx.ui.core.hapticfeedback.HapticFeedbackType: androidx.ui.core.hapticfeedback.HapticFeedbackType TextHandleMove>;

        $i2 = virtualinvoke $r3.<androidx.ui.core.hapticfeedback.HapticFeedbackType: int ordinal()>();

        r0[$i2] = 2;

        <androidx.ui.core.hapticfeedback.AndroidHapticFeedback$WhenMappings: int[] $EnumSwitchMapping$0> = r0;

        return;
    }

