kotlin.jvm.internal.PrimitiveSpreadBuilder
<kotlin.jvm.internal.PrimitiveSpreadBuilder: int position>
<kotlin.jvm.internal.PrimitiveSpreadBuilder: int size>
<kotlin.jvm.internal.PrimitiveSpreadBuilder: java.lang.Object[] spreads>
    public void <init>(int)
    {
        kotlin.jvm.internal.PrimitiveSpreadBuilder $r0;
        int $i0;
        java.lang.Object[] $r1;

        $r0 := @this: kotlin.jvm.internal.PrimitiveSpreadBuilder;

        $i0 := @parameter0: int;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<kotlin.jvm.internal.PrimitiveSpreadBuilder: int size> = $i0;

        $r1 = newarray (java.lang.Object)[$i0];

        $r0.<kotlin.jvm.internal.PrimitiveSpreadBuilder: java.lang.Object[] spreads> = $r1;

        return;
    }

    private static void getSpreads$annotations()
    {
        return;
    }

    public final void addSpread(java.lang.Object)
    {
        kotlin.jvm.internal.PrimitiveSpreadBuilder $r0;
        java.lang.Object $r1;
        int $i0, $i1;
        java.lang.Object[] $r2;

        $r0 := @this: kotlin.jvm.internal.PrimitiveSpreadBuilder;

        $r1 := @parameter0: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "spreadArgument");

        $r2 = $r0.<kotlin.jvm.internal.PrimitiveSpreadBuilder: java.lang.Object[] spreads>;

        $i0 = $r0.<kotlin.jvm.internal.PrimitiveSpreadBuilder: int position>;

        $i1 = $i0 + 1;

        $r0.<kotlin.jvm.internal.PrimitiveSpreadBuilder: int position> = $i1;

        $r2[$i0] = $r1;

        return;
    }

    protected final int getPosition()
    {
        kotlin.jvm.internal.PrimitiveSpreadBuilder $r0;
        int i0;

        $r0 := @this: kotlin.jvm.internal.PrimitiveSpreadBuilder;

        i0 = $r0.<kotlin.jvm.internal.PrimitiveSpreadBuilder: int position>;

        return i0;
    }

<kotlin.jvm.internal.PrimitiveSpreadBuilder: int getSize(java.lang.Object)>
    protected final void setPosition(int)
    {
        kotlin.jvm.internal.PrimitiveSpreadBuilder $r0;
        int $i0;

        $r0 := @this: kotlin.jvm.internal.PrimitiveSpreadBuilder;

        $i0 := @parameter0: int;

        $r0.<kotlin.jvm.internal.PrimitiveSpreadBuilder: int position> = $i0;

        return;
    }

    protected final int size()
    {
        kotlin.jvm.internal.PrimitiveSpreadBuilder $r0;
        java.lang.Object[] $r1;
        kotlin.ranges.IntRange $r2;
        int $i0, $i1;
        kotlin.collections.IntIterator $r3;
        boolean $z0;
        java.lang.Object $r4;

        $r0 := @this: kotlin.jvm.internal.PrimitiveSpreadBuilder;

        $r2 = new kotlin.ranges.IntRange;

        $i0 = $r0.<kotlin.jvm.internal.PrimitiveSpreadBuilder: int size>;

        $i1 = $i0 + -1;

        $i0 = 0;

        specialinvoke $r2.<kotlin.ranges.IntRange: void <init>(int,int)>(0, $i1);

        $r3 = virtualinvoke $r2.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r3.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $i1 = virtualinvoke $r3.<kotlin.collections.IntIterator: int nextInt()>();

        $r1 = $r0.<kotlin.jvm.internal.PrimitiveSpreadBuilder: java.lang.Object[] spreads>;

        $r4 = $r1[$i1];

        if $r4 == null goto label2;

        $i1 = virtualinvoke $r0.<kotlin.jvm.internal.PrimitiveSpreadBuilder: int getSize(java.lang.Object)>($r4);

        goto label3;

     label2:
        $i1 = 1;

     label3:
        $i0 = $i0 + $i1;

        goto label1;

     label4:
        return $i0;
    }

    protected final java.lang.Object toArray(java.lang.Object, java.lang.Object)
    {
        kotlin.jvm.internal.PrimitiveSpreadBuilder $r0;
        java.lang.Object $r1, $r2, $r6;
        int $i0, $i1, $i2, $i3;
        kotlin.ranges.IntRange $r3;
        kotlin.collections.IntIterator $r4;
        boolean $z0;
        java.lang.Object[] $r5;

        $r0 := @this: kotlin.jvm.internal.PrimitiveSpreadBuilder;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "values");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "result");

        $r3 = new kotlin.ranges.IntRange;

        $i1 = $r0.<kotlin.jvm.internal.PrimitiveSpreadBuilder: int size>;

        $i1 = $i1 + -1;

        specialinvoke $r3.<kotlin.ranges.IntRange: void <init>(int,int)>(0, $i1);

        $r4 = virtualinvoke $r3.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

        $i2 = 0;

        $i1 = 0;

     label1:
        $z0 = virtualinvoke $r4.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i3 = virtualinvoke $r4.<kotlin.collections.IntIterator: int nextInt()>();

        $r5 = $r0.<kotlin.jvm.internal.PrimitiveSpreadBuilder: java.lang.Object[] spreads>;

        $r6 = $r5[$i3];

        if $r6 == null goto label1;

        if $i2 >= $i3 goto label2;

        $i0 = $i3 - $i2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i2, $r2, $i1, $i0);

        $i1 = $i1 + $i0;

     label2:
        $i2 = virtualinvoke $r0.<kotlin.jvm.internal.PrimitiveSpreadBuilder: int getSize(java.lang.Object)>($r6);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, $r2, $i1, $i2);

        $i1 = $i1 + $i2;

        $i2 = $i3 + 1;

        goto label1;

     label3:
        $i3 = $r0.<kotlin.jvm.internal.PrimitiveSpreadBuilder: int size>;

        if $i2 >= $i3 goto label4;

        $i3 = $i3 - $i2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i2, $r2, $i1, $i3);

     label4:
        return $r2;
    }

