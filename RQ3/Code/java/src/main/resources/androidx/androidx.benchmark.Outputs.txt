androidx.benchmark.Outputs
<androidx.benchmark.Outputs: androidx.benchmark.Outputs INSTANCE>
<androidx.benchmark.Outputs: java.text.SimpleDateFormat formatter>
<androidx.benchmark.Outputs: java.io.File outputDirectory>
<androidx.benchmark.Outputs: java.io.File dirUsableByAppAndShell>
    private void <init>()
    {
        androidx.benchmark.Outputs r0;

        r0 := @this: androidx.benchmark.Outputs;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final java.io.File getOutputDirectory()
    {
        androidx.benchmark.Outputs r0;
        java.io.File $r1;

        r0 := @this: androidx.benchmark.Outputs;

        $r1 = <androidx.benchmark.Outputs: java.io.File outputDirectory>;

        return $r1;
    }

    public final java.io.File getDirUsableByAppAndShell()
    {
        androidx.benchmark.Outputs r0;
        java.io.File $r1;

        r0 := @this: androidx.benchmark.Outputs;

        $r1 = <androidx.benchmark.Outputs: java.io.File dirUsableByAppAndShell>;

        return $r1;
    }

    public final java.lang.String writeFile(java.lang.String, java.lang.String, boolean, kotlin.jvm.functions.Function1)
    {
        androidx.benchmark.Outputs r0;
        java.lang.String r1, r2, r4, r6, $r18, $r27, $r32, $r35, $r38, $r42, $r45, $r48, r52, r54, r55, r61, r62;
        boolean z0, z1, $z2, $z5;
        kotlin.jvm.functions.Function1 r3;
        java.io.File r5, $r7, $r8, $r9, $r10, $r12, $r21, r49, r50, r57, r58;
        java.lang.StringBuilder $r13, $r14, $r15, $r16, $r17, $r22, $r23, $r24, $r25, $r26, $r30, $r31, $r33, $r34, $r36, $r37, $r40, $r41, $r43, $r44, $r46, $r47;
        java.lang.Throwable $r20, $r29, $r39, r51, r56, r59;
        androidx.benchmark.InstrumentationResults $r53, $r60;

        r0 := @this: androidx.benchmark.Outputs;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r3 := @parameter3: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "fileName");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "reportKey");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "block");

        r4 = virtualinvoke r0.<androidx.benchmark.Outputs: java.lang.String sanitizeFilename(java.lang.String)>(r1);

        $r8 = <androidx.benchmark.Outputs: java.io.File dirUsableByAppAndShell>;

        $r7 = <androidx.benchmark.Outputs: java.io.File outputDirectory>;

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r8, $r7);

        if $z2 != 0 goto label01;

        $z5 = 1;

        goto label02;

     label01:
        $z5 = 0;

     label02:
        z1 = $z5;

        $r9 = new java.io.File;

        $r10 = <androidx.benchmark.Outputs: java.io.File dirUsableByAppAndShell>;

        specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>($r10, r4);

        r5 = $r9;

     label03:
        interfaceinvoke r3.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r5);

     label04:
        r49 = r5;

        if z1 == 0 goto label08;

        r50 = <androidx.benchmark.Outputs: java.io.File outputDirectory>;

        $r12 = new java.io.File;

        specialinvoke $r12.<java.io.File: void <init>(java.io.File,java.lang.String)>(r50, r4);

        r49 = $r12;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Copying ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r49);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Benchmark", $r18);

     label05:
        virtualinvoke r49.<java.io.File: boolean mkdirs()>();

        staticinvoke <kotlin.io.FilesKt: java.io.File copyTo$default(java.io.File,java.io.File,boolean,int,int,java.lang.Object)>(r5, r49, 1, 0, 4, null);

     label06:
        goto label08;

     label07:
        $r39 := @caughtexception;

        r51 = $r39;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n                        Unable to copy files to ");

        $r42 = virtualinvoke r49.<java.io.File: java.lang.String getAbsolutePath()>();

        $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r42);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".\n                        Please pull the Macrobenchmark results manually by using:\n                        adb pull ");

        $r45 = virtualinvoke r5.<java.io.File: java.lang.String getAbsolutePath()>();

        $r46 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r45);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n                    ");

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        r52 = staticinvoke <kotlin.text.StringsKt: java.lang.String trimIndent(java.lang.String)>($r48);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Benchmark", r52, r51);

        r49 = r5;

     label08:
        $r53 = <androidx.benchmark.InstrumentationResults: androidx.benchmark.InstrumentationResults INSTANCE>;

        r54 = virtualinvoke r49.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r54, "destination.absolutePath");

        virtualinvoke $r53.<androidx.benchmark.InstrumentationResults: void reportAdditionalFileToCopy(java.lang.String,java.lang.String,boolean)>(r2, r54, z0);

        r55 = virtualinvoke r49.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r55, "destination.absolutePath");

        return r55;

     label09:
        $r20 := @caughtexception;

        r56 = $r20;

     label10:
        r57 = r5;

        if z1 == 0 goto label14;

        r58 = <androidx.benchmark.Outputs: java.io.File outputDirectory>;

        $r21 = new java.io.File;

        specialinvoke $r21.<java.io.File: void <init>(java.io.File,java.lang.String)>(r58, r4);

        r57 = $r21;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Copying ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r57);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Benchmark", $r27);

     label11:
        virtualinvoke r57.<java.io.File: boolean mkdirs()>();

        staticinvoke <kotlin.io.FilesKt: java.io.File copyTo$default(java.io.File,java.io.File,boolean,int,int,java.lang.Object)>(r5, r57, 1, 0, 4, null);

     label12:
        goto label14;

     label13:
        $r29 := @caughtexception;

        r59 = $r29;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n                        Unable to copy files to ");

        $r32 = virtualinvoke r57.<java.io.File: java.lang.String getAbsolutePath()>();

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".\n                        Please pull the Macrobenchmark results manually by using:\n                        adb pull ");

        $r35 = virtualinvoke r5.<java.io.File: java.lang.String getAbsolutePath()>();

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n                    ");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        r6 = staticinvoke <kotlin.text.StringsKt: java.lang.String trimIndent(java.lang.String)>($r38);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Benchmark", r6, r59);

        r57 = r5;

     label14:
        $r60 = <androidx.benchmark.InstrumentationResults: androidx.benchmark.InstrumentationResults INSTANCE>;

        r61 = virtualinvoke r57.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r61, "destination.absolutePath");

        virtualinvoke $r60.<androidx.benchmark.InstrumentationResults: void reportAdditionalFileToCopy(java.lang.String,java.lang.String,boolean)>(r2, r61, z0);

        r62 = virtualinvoke r57.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r62, "destination.absolutePath");

        return r62;

        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public static java.lang.String writeFile$default(androidx.benchmark.Outputs, java.lang.String, java.lang.String, boolean, kotlin.jvm.functions.Function1, int, java.lang.Object)
    {
        androidx.benchmark.Outputs r0;
        java.lang.String r1, r2, $r5;
        kotlin.jvm.functions.Function1 r3;
        int i0, $i1;
        java.lang.Object r4;
        boolean z0;

        r0 := @parameter0: androidx.benchmark.Outputs;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        r3 := @parameter4: kotlin.jvm.functions.Function1;

        i0 := @parameter5: int;

        r4 := @parameter6: java.lang.Object;

        $i1 = i0 & 4;

        if $i1 == 0 goto label1;

        z0 = 0;

     label1:
        $r5 = virtualinvoke r0.<androidx.benchmark.Outputs: java.lang.String writeFile(java.lang.String,java.lang.String,boolean,kotlin.jvm.functions.Function1)>(r1, r2, z0, r3);

        return $r5;
    }

    public final java.lang.String sanitizeFilename(java.lang.String)
    {
        androidx.benchmark.Outputs r0;
        java.lang.String r1, $r2, $r3, $r4;

        r0 := @this: androidx.benchmark.Outputs;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "filename");

        $r2 = staticinvoke <kotlin.text.StringsKt: java.lang.String replace$default(java.lang.String,java.lang.String,java.lang.String,boolean,int,java.lang.Object)>(r1, " ", "", 0, 4, null);

        $r3 = staticinvoke <kotlin.text.StringsKt: java.lang.String replace$default(java.lang.String,java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r2, "(", "[", 0, 4, null);

        $r4 = staticinvoke <kotlin.text.StringsKt: java.lang.String replace$default(java.lang.String,java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r3, ")", "]", 0, 4, null);

        return $r4;
    }

    public final java.io.File testOutputFile(java.lang.String)
    {
        androidx.benchmark.Outputs r0;
        java.lang.String r1;
        java.io.File $r2, $r3;

        r0 := @this: androidx.benchmark.Outputs;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "filename");

        $r2 = new java.io.File;

        $r3 = <androidx.benchmark.Outputs: java.io.File outputDirectory>;

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, r1);

        return $r2;
    }

    public final java.lang.String dateToFileName(java.util.Date)
    {
        androidx.benchmark.Outputs r0;
        java.util.Date r1;
        java.lang.String r2;
        java.text.SimpleDateFormat $r3;

        r0 := @this: androidx.benchmark.Outputs;

        r1 := @parameter0: java.util.Date;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "date");

        $r3 = <androidx.benchmark.Outputs: java.text.SimpleDateFormat formatter>;

        r2 = virtualinvoke $r3.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>(r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r2, "formatter.format(date)");

        return r2;
    }

    public static java.lang.String dateToFileName$default(androidx.benchmark.Outputs, java.util.Date, int, java.lang.Object)
    {
        androidx.benchmark.Outputs r0;
        int i0, $i1;
        java.lang.Object r1;
        java.lang.String $r2;
        java.util.Date $r3, r4;

        r0 := @parameter0: androidx.benchmark.Outputs;

        r4 := @parameter1: java.util.Date;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        $r3 = new java.util.Date;

        specialinvoke $r3.<java.util.Date: void <init>()>();

        r4 = $r3;

     label1:
        $r2 = virtualinvoke r0.<androidx.benchmark.Outputs: java.lang.String dateToFileName(java.util.Date)>(r4);

        return $r2;
    }

    public final java.lang.String relativePathFor(java.lang.String)
    {
        androidx.benchmark.Outputs r0;
        java.lang.String r1, $r4, $r5, $r12, $r14, $r15, r17, $r18, r19, $r20;
        boolean z0, $z1, $z2;
        java.io.File $r2, $r3, $r13;
        java.lang.CharSequence $r6, $r16;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;
        java.lang.IllegalStateException $r11;

        r0 := @this: androidx.benchmark.Outputs;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "path");

        $r2 = <androidx.benchmark.Outputs: java.io.File outputDirectory>;

        r17 = virtualinvoke $r2.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r17, "outputDirectory.absolutePath");

        z0 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>(r1, r17, 0, 2, null);

        if z0 == 0 goto label1;

        $r13 = <androidx.benchmark.Outputs: java.io.File outputDirectory>;

        $r14 = virtualinvoke $r13.<java.io.File: java.lang.String getAbsolutePath()>();

        $r15 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>($r14, "/");

        $r16 = (java.lang.CharSequence) $r15;

        $r18 = staticinvoke <kotlin.text.StringsKt: java.lang.String removePrefix(java.lang.String,java.lang.CharSequence)>(r1, $r16);

        goto label2;

     label1:
        $r3 = <androidx.benchmark.Outputs: java.io.File dirUsableByAppAndShell>;

        $r4 = virtualinvoke $r3.<java.io.File: java.lang.String getAbsolutePath()>();

        $r5 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>($r4, "/");

        $r6 = (java.lang.CharSequence) $r5;

        $r18 = staticinvoke <kotlin.text.StringsKt: java.lang.String removePrefix(java.lang.String,java.lang.CharSequence)>(r1, $r6);

     label2:
        r19 = $r18;

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r19, r1);

        if $z1 != 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        if $z2 != 0 goto label5;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" == ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r20 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = new java.lang.IllegalStateException;

        $r12 = virtualinvoke $r20.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw $r11;

     label5:
        return r19;
    }

    static void <clinit>()
    {
        android.content.Context r0, $r7, $r19;
        java.lang.String r1, $r10, $r12, $r15;
        androidx.benchmark.Outputs $r2, $r8, $r13, $r16;
        java.text.SimpleDateFormat $r3, $r4;
        java.util.TimeZone $r5;
        int $i0, $i1;
        android.app.Instrumentation $r6, $r18, $r20;
        java.io.File $r9, $r14, $r21, r22, $r23, r24, $r25;
        androidx.benchmark.Arguments $r11;
        java.lang.IllegalStateException $r17;

        $r2 = new androidx.benchmark.Outputs;

        specialinvoke $r2.<androidx.benchmark.Outputs: void <init>()>();

        <androidx.benchmark.Outputs: androidx.benchmark.Outputs INSTANCE> = $r2;

        $r3 = new java.text.SimpleDateFormat;

        specialinvoke $r3.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd-HH-mm-ss");

        <androidx.benchmark.Outputs: java.text.SimpleDateFormat formatter> = $r3;

        $r4 = <androidx.benchmark.Outputs: java.text.SimpleDateFormat formatter>;

        $r5 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("UTC");

        virtualinvoke $r4.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>($r5);

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 29 goto label1;

        $r20 = staticinvoke <androidx.test.platform.app.InstrumentationRegistry: android.app.Instrumentation getInstrumentation()>();

        r0 = virtualinvoke $r20.<android.app.Instrumentation: android.content.Context getContext()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r0, "getInstrumentation().context");

        $r21 = staticinvoke <androidx.benchmark.Api21Kt: java.io.File getFirstMountedMediaDir(android.content.Context)>(r0);

        goto label3;

     label1:
        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 > 22 goto label2;

        $r18 = staticinvoke <androidx.test.platform.app.InstrumentationRegistry: android.app.Instrumentation getInstrumentation()>();

        $r19 = virtualinvoke $r18.<android.app.Instrumentation: android.content.Context getContext()>();

        $r21 = virtualinvoke $r19.<android.content.Context: java.io.File getCacheDir()>();

        goto label3;

     label2:
        $r6 = staticinvoke <androidx.test.platform.app.InstrumentationRegistry: android.app.Instrumentation getInstrumentation()>();

        $r7 = virtualinvoke $r6.<android.app.Instrumentation: android.content.Context getContext()>();

        $r21 = virtualinvoke $r7.<android.content.Context: java.io.File getExternalCacheDir()>();

     label3:
        r22 = $r21;

        if r22 != null goto label4;

        $r17 = new java.lang.IllegalStateException;

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unable to select a directory for writing files, additionalTestOutputDir argument required to declare output dir.");

        throw $r17;

     label4:
        <androidx.benchmark.Outputs: java.io.File dirUsableByAppAndShell> = r22;

        $r8 = <androidx.benchmark.Outputs: androidx.benchmark.Outputs INSTANCE>;

        $r9 = <androidx.benchmark.Outputs: java.io.File dirUsableByAppAndShell>;

        $r10 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Usable output directory: ", $r9);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Benchmark", $r10);

        $r11 = <androidx.benchmark.Arguments: androidx.benchmark.Arguments INSTANCE>;

        $r12 = virtualinvoke $r11.<androidx.benchmark.Arguments: java.lang.String getAdditionalTestOutputDir$benchmark_common_release()>();

        if $r12 != null goto label5;

        $r23 = null;

        goto label6;

     label5:
        r1 = $r12;

        $r23 = new java.io.File;

        specialinvoke $r23.<java.io.File: void <init>(java.lang.String)>(r1);

     label6:
        r24 = $r23;

        if r24 != null goto label7;

        $r16 = <androidx.benchmark.Outputs: androidx.benchmark.Outputs INSTANCE>;

        $r25 = <androidx.benchmark.Outputs: java.io.File dirUsableByAppAndShell>;

        goto label8;

     label7:
        $r25 = r24;

     label8:
        <androidx.benchmark.Outputs: java.io.File outputDirectory> = $r25;

        $r13 = <androidx.benchmark.Outputs: androidx.benchmark.Outputs INSTANCE>;

        $r14 = <androidx.benchmark.Outputs: java.io.File outputDirectory>;

        $r15 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Output Directory: ", $r14);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Benchmark", $r15);

        return;
    }

