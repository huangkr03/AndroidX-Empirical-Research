kotlin.collections.AbstractList
<kotlin.collections.AbstractList: kotlin.collections.AbstractList$Companion Companion>
    static void <clinit>()
    {
        kotlin.collections.AbstractList$Companion $r0;

        $r0 = new kotlin.collections.AbstractList$Companion;

        specialinvoke $r0.<kotlin.collections.AbstractList$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <kotlin.collections.AbstractList: kotlin.collections.AbstractList$Companion Companion> = $r0;

        return;
    }

    protected void <init>()
    {
        kotlin.collections.AbstractList $r0;

        $r0 := @this: kotlin.collections.AbstractList;

        specialinvoke $r0.<kotlin.collections.AbstractCollection: void <init>()>();

        return;
    }

    public void add(int, java.lang.Object)
    {
        kotlin.collections.AbstractList $r0;
        int $i0;
        java.lang.Object $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: kotlin.collections.AbstractList;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean addAll(int, java.util.Collection)
    {
        kotlin.collections.AbstractList $r0;
        int $i0;
        java.util.Collection $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: kotlin.collections.AbstractList;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.util.Collection;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean equals(java.lang.Object)
    {
        kotlin.collections.AbstractList $r0;
        boolean $z0;
        java.lang.Object $r1;
        kotlin.collections.AbstractList$Companion $r2;
        java.util.Collection $r3;

        $r0 := @this: kotlin.collections.AbstractList;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != $r0 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof java.util.List;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r2 = <kotlin.collections.AbstractList: kotlin.collections.AbstractList$Companion Companion>;

        $r3 = (java.util.Collection) $r1;

        $z0 = virtualinvoke $r2.<kotlin.collections.AbstractList$Companion: boolean orderedEquals$kotlin_stdlib(java.util.Collection,java.util.Collection)>($r0, $r3);

        return $z0;
    }

<kotlin.collections.AbstractList: java.lang.Object get(int)>
<kotlin.collections.AbstractList: int getSize()>
    public int hashCode()
    {
        kotlin.collections.AbstractList $r0;
        int $i0;
        kotlin.collections.AbstractList$Companion $r1;

        $r0 := @this: kotlin.collections.AbstractList;

        $r1 = <kotlin.collections.AbstractList: kotlin.collections.AbstractList$Companion Companion>;

        $i0 = virtualinvoke $r1.<kotlin.collections.AbstractList$Companion: int orderedHashCode$kotlin_stdlib(java.util.Collection)>($r0);

        return $i0;
    }

    public int indexOf(java.lang.Object)
    {
        kotlin.collections.AbstractList $r0;
        java.lang.Object $r1, $r3;
        java.util.Iterator $r2;
        int $i0;
        boolean $z0;

        $r0 := @this: kotlin.collections.AbstractList;

        $r1 := @parameter0: java.lang.Object;

        $r2 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

        $i0 = 0;

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r3, $r1);

        if $z0 == 0 goto label2;

        return $i0;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return -1;
    }

    public java.util.Iterator iterator()
    {
        kotlin.collections.AbstractList $r0;
        kotlin.collections.AbstractList$IteratorImpl $r1;

        $r0 := @this: kotlin.collections.AbstractList;

        $r1 = new kotlin.collections.AbstractList$IteratorImpl;

        specialinvoke $r1.<kotlin.collections.AbstractList$IteratorImpl: void <init>(kotlin.collections.AbstractList)>($r0);

        return $r1;
    }

    public int lastIndexOf(java.lang.Object)
    {
        kotlin.collections.AbstractList $r0;
        java.lang.Object $r1, $r3;
        int $i0;
        java.util.ListIterator $r2;
        boolean $z0;

        $r0 := @this: kotlin.collections.AbstractList;

        $r1 := @parameter0: java.lang.Object;

        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        $r2 = interfaceinvoke $r0.<java.util.List: java.util.ListIterator listIterator(int)>($i0);

     label1:
        $z0 = interfaceinvoke $r2.<java.util.ListIterator: boolean hasPrevious()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.ListIterator: java.lang.Object previous()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r3, $r1);

        if $z0 == 0 goto label1;

        $i0 = interfaceinvoke $r2.<java.util.ListIterator: int nextIndex()>();

        return $i0;

     label2:
        return -1;
    }

    public java.util.ListIterator listIterator()
    {
        kotlin.collections.AbstractList $r0;
        kotlin.collections.AbstractList$ListIteratorImpl $r1;

        $r0 := @this: kotlin.collections.AbstractList;

        $r1 = new kotlin.collections.AbstractList$ListIteratorImpl;

        specialinvoke $r1.<kotlin.collections.AbstractList$ListIteratorImpl: void <init>(kotlin.collections.AbstractList,int)>($r0, 0);

        return $r1;
    }

    public java.util.ListIterator listIterator(int)
    {
        kotlin.collections.AbstractList $r0;
        int $i0;
        kotlin.collections.AbstractList$ListIteratorImpl $r1;

        $r0 := @this: kotlin.collections.AbstractList;

        $i0 := @parameter0: int;

        $r1 = new kotlin.collections.AbstractList$ListIteratorImpl;

        specialinvoke $r1.<kotlin.collections.AbstractList$ListIteratorImpl: void <init>(kotlin.collections.AbstractList,int)>($r0, $i0);

        return $r1;
    }

    public java.lang.Object remove(int)
    {
        kotlin.collections.AbstractList $r0;
        int $i0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: kotlin.collections.AbstractList;

        $i0 := @parameter0: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r1;
    }

    public java.lang.Object set(int, java.lang.Object)
    {
        kotlin.collections.AbstractList $r0;
        int $i0;
        java.lang.Object $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: kotlin.collections.AbstractList;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public java.util.List subList(int, int)
    {
        kotlin.collections.AbstractList $r0;
        int $i0, $i1;
        kotlin.collections.AbstractList$SubList $r1;

        $r0 := @this: kotlin.collections.AbstractList;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = new kotlin.collections.AbstractList$SubList;

        specialinvoke $r1.<kotlin.collections.AbstractList$SubList: void <init>(kotlin.collections.AbstractList,int,int)>($r0, $i0, $i1);

        return $r1;
    }

