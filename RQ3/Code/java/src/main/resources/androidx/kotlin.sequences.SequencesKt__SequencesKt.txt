kotlin.sequences.SequencesKt__SequencesKt
    public void <init>()
    {
        kotlin.sequences.SequencesKt__SequencesKt $r0;

        $r0 := @this: kotlin.sequences.SequencesKt__SequencesKt;

        specialinvoke $r0.<kotlin.sequences.SequencesKt__SequencesJVMKt: void <init>()>();

        return;
    }

    private static final kotlin.sequences.Sequence Sequence(kotlin.jvm.functions.Function0)
    {
        kotlin.jvm.functions.Function0 $r0;
        kotlin.sequences.SequencesKt__SequencesKt$Sequence$1 $r1;

        $r0 := @parameter0: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "iterator");

        $r1 = new kotlin.sequences.SequencesKt__SequencesKt$Sequence$1;

        specialinvoke $r1.<kotlin.sequences.SequencesKt__SequencesKt$Sequence$1: void <init>(kotlin.jvm.functions.Function0)>($r0);

        return $r1;
    }

    public static final kotlin.sequences.Sequence asSequence(java.util.Iterator)
    {
        kotlin.sequences.Sequence $r0;
        java.util.Iterator $r1;
        kotlin.sequences.SequencesKt__SequencesKt$asSequence$$inlined$Sequence$1 $r2;

        $r1 := @parameter0: java.util.Iterator;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $r2 = new kotlin.sequences.SequencesKt__SequencesKt$asSequence$$inlined$Sequence$1;

        specialinvoke $r2.<kotlin.sequences.SequencesKt__SequencesKt$asSequence$$inlined$Sequence$1: void <init>(java.util.Iterator)>($r1);

        $r0 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence constrainOnce(kotlin.sequences.Sequence)>($r2);

        return $r0;
    }

    public static final kotlin.sequences.Sequence constrainOnce(kotlin.sequences.Sequence)
    {
        kotlin.sequences.Sequence $r0;
        boolean $z0;
        kotlin.sequences.ConstrainedOnceSequence $r1;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $z0 = $r0 instanceof kotlin.sequences.ConstrainedOnceSequence;

        if $z0 == 0 goto label1;

        return $r0;

     label1:
        $r1 = new kotlin.sequences.ConstrainedOnceSequence;

        specialinvoke $r1.<kotlin.sequences.ConstrainedOnceSequence: void <init>(kotlin.sequences.Sequence)>($r0);

        return $r1;
    }

    public static final kotlin.sequences.Sequence emptySequence()
    {
        kotlin.sequences.EmptySequence r0;

        r0 = <kotlin.sequences.EmptySequence: kotlin.sequences.EmptySequence INSTANCE>;

        return r0;
    }

    public static final kotlin.sequences.Sequence flatMapIndexed(kotlin.sequences.Sequence, kotlin.jvm.functions.Function2, kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function2 $r0;
        kotlin.jvm.functions.Function1 $r1;
        kotlin.sequences.Sequence $r2;
        kotlin.sequences.SequencesKt__SequencesKt$flatMapIndexed$1 $r3;

        $r2 := @parameter0: kotlin.sequences.Sequence;

        $r0 := @parameter1: kotlin.jvm.functions.Function2;

        $r1 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "source");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "transform");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "iterator");

        $r3 = new kotlin.sequences.SequencesKt__SequencesKt$flatMapIndexed$1;

        specialinvoke $r3.<kotlin.sequences.SequencesKt__SequencesKt$flatMapIndexed$1: void <init>(kotlin.sequences.Sequence,kotlin.jvm.functions.Function2,kotlin.jvm.functions.Function1,kotlin.coroutines.Continuation)>($r2, $r0, $r1, null);

        $r2 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence sequence(kotlin.jvm.functions.Function2)>($r3);

        return $r2;
    }

    public static final kotlin.sequences.Sequence flatten(kotlin.sequences.Sequence)
    {
        kotlin.sequences.Sequence $r0;
        kotlin.sequences.SequencesKt__SequencesKt$flatten$1 $r1;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = <kotlin.sequences.SequencesKt__SequencesKt$flatten$1: kotlin.sequences.SequencesKt__SequencesKt$flatten$1 INSTANCE>;

        $r0 = staticinvoke <kotlin.sequences.SequencesKt__SequencesKt: kotlin.sequences.Sequence flatten$SequencesKt__SequencesKt(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1)>($r0, $r1);

        return $r0;
    }

    private static final kotlin.sequences.Sequence flatten$SequencesKt__SequencesKt(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        kotlin.sequences.SequencesKt__SequencesKt$flatten$3 $r1;
        kotlin.sequences.Sequence $r2;
        boolean $z0;
        kotlin.sequences.TransformingSequence $r3;
        kotlin.sequences.FlatteningSequence $r4;

        $r2 := @parameter0: kotlin.sequences.Sequence;

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        $z0 = $r2 instanceof kotlin.sequences.TransformingSequence;

        if $z0 == 0 goto label1;

        $r3 = (kotlin.sequences.TransformingSequence) $r2;

        $r2 = virtualinvoke $r3.<kotlin.sequences.TransformingSequence: kotlin.sequences.Sequence flatten$kotlin_stdlib(kotlin.jvm.functions.Function1)>($r0);

        return $r2;

     label1:
        $r4 = new kotlin.sequences.FlatteningSequence;

        $r1 = <kotlin.sequences.SequencesKt__SequencesKt$flatten$3: kotlin.sequences.SequencesKt__SequencesKt$flatten$3 INSTANCE>;

        specialinvoke $r4.<kotlin.sequences.FlatteningSequence: void <init>(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1)>($r2, $r1, $r0);

        return $r4;
    }

    public static final kotlin.sequences.Sequence flattenSequenceOfIterable(kotlin.sequences.Sequence)
    {
        kotlin.sequences.Sequence $r0;
        kotlin.sequences.SequencesKt__SequencesKt$flatten$2 $r1;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = <kotlin.sequences.SequencesKt__SequencesKt$flatten$2: kotlin.sequences.SequencesKt__SequencesKt$flatten$2 INSTANCE>;

        $r0 = staticinvoke <kotlin.sequences.SequencesKt__SequencesKt: kotlin.sequences.Sequence flatten$SequencesKt__SequencesKt(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1)>($r0, $r1);

        return $r0;
    }

    public static final kotlin.sequences.Sequence generateSequence(java.lang.Object, kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        kotlin.sequences.SequencesKt__SequencesKt$generateSequence$2 $r1;
        java.lang.Object $r2;
        kotlin.sequences.GeneratorSequence $r3;
        kotlin.sequences.EmptySequence r4;

        $r2 := @parameter0: java.lang.Object;

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "nextFunction");

        if $r2 != null goto label1;

        r4 = <kotlin.sequences.EmptySequence: kotlin.sequences.EmptySequence INSTANCE>;

        return r4;

     label1:
        $r3 = new kotlin.sequences.GeneratorSequence;

        $r1 = new kotlin.sequences.SequencesKt__SequencesKt$generateSequence$2;

        specialinvoke $r1.<kotlin.sequences.SequencesKt__SequencesKt$generateSequence$2: void <init>(java.lang.Object)>($r2);

        specialinvoke $r3.<kotlin.sequences.GeneratorSequence: void <init>(kotlin.jvm.functions.Function0,kotlin.jvm.functions.Function1)>($r1, $r0);

        return $r3;
    }

    public static final kotlin.sequences.Sequence generateSequence(kotlin.jvm.functions.Function0)
    {
        kotlin.sequences.SequencesKt__SequencesKt$generateSequence$1 $r0;
        kotlin.sequences.Sequence $r1;
        kotlin.jvm.functions.Function0 $r2;
        kotlin.sequences.GeneratorSequence $r3;

        $r2 := @parameter0: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "nextFunction");

        $r3 = new kotlin.sequences.GeneratorSequence;

        $r0 = new kotlin.sequences.SequencesKt__SequencesKt$generateSequence$1;

        specialinvoke $r0.<kotlin.sequences.SequencesKt__SequencesKt$generateSequence$1: void <init>(kotlin.jvm.functions.Function0)>($r2);

        specialinvoke $r3.<kotlin.sequences.GeneratorSequence: void <init>(kotlin.jvm.functions.Function0,kotlin.jvm.functions.Function1)>($r2, $r0);

        $r1 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence constrainOnce(kotlin.sequences.Sequence)>($r3);

        return $r1;
    }

    public static final kotlin.sequences.Sequence generateSequence(kotlin.jvm.functions.Function0, kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function0 $r0;
        kotlin.jvm.functions.Function1 $r1;
        kotlin.sequences.GeneratorSequence $r2;

        $r0 := @parameter0: kotlin.jvm.functions.Function0;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "seedFunction");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "nextFunction");

        $r2 = new kotlin.sequences.GeneratorSequence;

        specialinvoke $r2.<kotlin.sequences.GeneratorSequence: void <init>(kotlin.jvm.functions.Function0,kotlin.jvm.functions.Function1)>($r0, $r1);

        return $r2;
    }

    public static final kotlin.sequences.Sequence ifEmpty(kotlin.sequences.Sequence, kotlin.jvm.functions.Function0)
    {
        kotlin.jvm.functions.Function0 $r0;
        kotlin.sequences.Sequence $r1;
        kotlin.sequences.SequencesKt__SequencesKt$ifEmpty$1 $r2;

        $r1 := @parameter0: kotlin.sequences.Sequence;

        $r0 := @parameter1: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "defaultValue");

        $r2 = new kotlin.sequences.SequencesKt__SequencesKt$ifEmpty$1;

        specialinvoke $r2.<kotlin.sequences.SequencesKt__SequencesKt$ifEmpty$1: void <init>(kotlin.sequences.Sequence,kotlin.jvm.functions.Function0,kotlin.coroutines.Continuation)>($r1, $r0, null);

        $r1 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence sequence(kotlin.jvm.functions.Function2)>($r2);

        return $r1;
    }

    private static final kotlin.sequences.Sequence orEmpty(kotlin.sequences.Sequence)
    {
        kotlin.sequences.Sequence $r0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        if $r0 != null goto label1;

        $r0 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence emptySequence()>();

     label1:
        return $r0;
    }

    public static final transient kotlin.sequences.Sequence sequenceOf(java.lang.Object[])
    {
        java.lang.Object[] $r0;
        int $i0;
        boolean $z0;
        kotlin.sequences.Sequence $r1;

        $r0 := @parameter0: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "elements");

        $i0 = lengthof $r0;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $r1 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence emptySequence()>();

        return $r1;

     label3:
        $r1 = staticinvoke <kotlin.collections.ArraysKt: kotlin.sequences.Sequence asSequence(java.lang.Object[])>($r0);

        return $r1;
    }

    public static final kotlin.sequences.Sequence shuffled(kotlin.sequences.Sequence)
    {
        kotlin.sequences.Sequence $r0;
        kotlin.random.Random$Default $r1;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = <kotlin.random.Random: kotlin.random.Random$Default Default>;

        $r0 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence shuffled(kotlin.sequences.Sequence,kotlin.random.Random)>($r0, $r1);

        return $r0;
    }

    public static final kotlin.sequences.Sequence shuffled(kotlin.sequences.Sequence, kotlin.random.Random)
    {
        kotlin.random.Random $r0;
        kotlin.sequences.Sequence $r1;
        kotlin.sequences.SequencesKt__SequencesKt$shuffled$1 $r2;

        $r1 := @parameter0: kotlin.sequences.Sequence;

        $r0 := @parameter1: kotlin.random.Random;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "random");

        $r2 = new kotlin.sequences.SequencesKt__SequencesKt$shuffled$1;

        specialinvoke $r2.<kotlin.sequences.SequencesKt__SequencesKt$shuffled$1: void <init>(kotlin.sequences.Sequence,kotlin.random.Random,kotlin.coroutines.Continuation)>($r1, $r0, null);

        $r1 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence sequence(kotlin.jvm.functions.Function2)>($r2);

        return $r1;
    }

    public static final kotlin.Pair unzip(kotlin.sequences.Sequence)
    {
        java.util.ArrayList $r0, $r2;
        kotlin.sequences.Sequence $r1;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        kotlin.Pair $r5;

        $r1 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r3 = interfaceinvoke $r1.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (kotlin.Pair) $r4;

        $r4 = virtualinvoke $r5.<kotlin.Pair: java.lang.Object getFirst()>();

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        $r4 = virtualinvoke $r5.<kotlin.Pair: java.lang.Object getSecond()>();

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        goto label1;

     label2:
        $r5 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r2, $r0);

        return $r5;
    }

