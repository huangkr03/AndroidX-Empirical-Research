androidx.work.multiprocess.RemoteWorkManagerClient
<androidx.work.multiprocess.RemoteWorkManagerClient: long SESSION_TIMEOUT_MILLIS>
<androidx.work.multiprocess.RemoteWorkManagerClient: java.lang.String TAG>
<androidx.work.multiprocess.RemoteWorkManagerClient: androidx.work.multiprocess.RemoteWorkManagerClient$Session mSession>
<androidx.work.multiprocess.RemoteWorkManagerClient: android.content.Context mContext>
<androidx.work.multiprocess.RemoteWorkManagerClient: androidx.work.impl.WorkManagerImpl mWorkManager>
<androidx.work.multiprocess.RemoteWorkManagerClient: java.util.concurrent.Executor mExecutor>
<androidx.work.multiprocess.RemoteWorkManagerClient: java.lang.Object mLock>
<androidx.work.multiprocess.RemoteWorkManagerClient: long mSessionIndex>
<androidx.work.multiprocess.RemoteWorkManagerClient: long mSessionTimeout>
<androidx.work.multiprocess.RemoteWorkManagerClient: android.os.Handler mHandler>
<androidx.work.multiprocess.RemoteWorkManagerClient: androidx.work.multiprocess.RemoteWorkManagerClient$SessionTracker mSessionTracker>
    public void <init>(android.content.Context, androidx.work.impl.WorkManagerImpl)
    {
        androidx.work.multiprocess.RemoteWorkManagerClient r0;
        android.content.Context r1;
        androidx.work.impl.WorkManagerImpl r2;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerClient;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: androidx.work.impl.WorkManagerImpl;

        specialinvoke r0.<androidx.work.multiprocess.RemoteWorkManagerClient: void <init>(android.content.Context,androidx.work.impl.WorkManagerImpl,long)>(r1, r2, 60000L);

        return;
    }

    public void <init>(android.content.Context, androidx.work.impl.WorkManagerImpl, long)
    {
        androidx.work.multiprocess.RemoteWorkManagerClient r0;
        android.content.Context r1, $r3;
        androidx.work.impl.WorkManagerImpl r2, $r4;
        long l0;
        androidx.work.impl.utils.taskexecutor.TaskExecutor $r5;
        androidx.work.impl.utils.taskexecutor.SerialExecutor $r6;
        java.lang.Object $r7;
        androidx.work.multiprocess.RemoteWorkManagerClient$SessionTracker $r8;
        android.os.Looper $r9;
        android.os.Handler $r10;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerClient;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: androidx.work.impl.WorkManagerImpl;

        l0 := @parameter2: long;

        specialinvoke r0.<androidx.work.multiprocess.RemoteWorkManager: void <init>()>();

        $r3 = virtualinvoke r1.<android.content.Context: android.content.Context getApplicationContext()>();

        r0.<androidx.work.multiprocess.RemoteWorkManagerClient: android.content.Context mContext> = $r3;

        r0.<androidx.work.multiprocess.RemoteWorkManagerClient: androidx.work.impl.WorkManagerImpl mWorkManager> = r2;

        $r4 = r0.<androidx.work.multiprocess.RemoteWorkManagerClient: androidx.work.impl.WorkManagerImpl mWorkManager>;

        $r5 = virtualinvoke $r4.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.utils.taskexecutor.TaskExecutor getWorkTaskExecutor()>();

        $r6 = interfaceinvoke $r5.<androidx.work.impl.utils.taskexecutor.TaskExecutor: androidx.work.impl.utils.taskexecutor.SerialExecutor getSerialTaskExecutor()>();

        r0.<androidx.work.multiprocess.RemoteWorkManagerClient: java.util.concurrent.Executor mExecutor> = $r6;

        $r7 = new java.lang.Object;

        specialinvoke $r7.<java.lang.Object: void <init>()>();

        r0.<androidx.work.multiprocess.RemoteWorkManagerClient: java.lang.Object mLock> = $r7;

        r0.<androidx.work.multiprocess.RemoteWorkManagerClient: androidx.work.multiprocess.RemoteWorkManagerClient$Session mSession> = null;

        $r8 = new androidx.work.multiprocess.RemoteWorkManagerClient$SessionTracker;

        specialinvoke $r8.<androidx.work.multiprocess.RemoteWorkManagerClient$SessionTracker: void <init>(androidx.work.multiprocess.RemoteWorkManagerClient)>(r0);

        r0.<androidx.work.multiprocess.RemoteWorkManagerClient: androidx.work.multiprocess.RemoteWorkManagerClient$SessionTracker mSessionTracker> = $r8;

        r0.<androidx.work.multiprocess.RemoteWorkManagerClient: long mSessionTimeout> = l0;

        $r9 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        $r10 = staticinvoke <androidx.core.os.HandlerCompat: android.os.Handler createAsync(android.os.Looper)>($r9);

        r0.<androidx.work.multiprocess.RemoteWorkManagerClient: android.os.Handler mHandler> = $r10;

        return;
    }

    public com.google.common.util.concurrent.ListenableFuture enqueue(androidx.work.WorkRequest)
    {
        androidx.work.multiprocess.RemoteWorkManagerClient r0;
        androidx.work.WorkRequest r1;
        java.util.List $r2;
        com.google.common.util.concurrent.ListenableFuture $r3;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerClient;

        r1 := @parameter0: androidx.work.WorkRequest;

        $r2 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r1);

        $r3 = virtualinvoke r0.<androidx.work.multiprocess.RemoteWorkManagerClient: com.google.common.util.concurrent.ListenableFuture enqueue(java.util.List)>($r2);

        return $r3;
    }

    public com.google.common.util.concurrent.ListenableFuture enqueue(java.util.List)
    {
        androidx.work.multiprocess.RemoteWorkManagerClient r0;
        java.util.List r1;
        com.google.common.util.concurrent.ListenableFuture r2, $r6;
        androidx.work.multiprocess.RemoteWorkManagerClient$1 $r3;
        java.util.concurrent.Executor $r4;
        androidx.arch.core.util.Function $r5;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerClient;

        r1 := @parameter0: java.util.List;

        $r3 = new androidx.work.multiprocess.RemoteWorkManagerClient$1;

        specialinvoke $r3.<androidx.work.multiprocess.RemoteWorkManagerClient$1: void <init>(androidx.work.multiprocess.RemoteWorkManagerClient,java.util.List)>(r0, r1);

        r2 = virtualinvoke r0.<androidx.work.multiprocess.RemoteWorkManagerClient: com.google.common.util.concurrent.ListenableFuture execute(androidx.work.multiprocess.RemoteDispatcher)>($r3);

        $r5 = <androidx.work.multiprocess.RemoteClientUtils: androidx.arch.core.util.Function sVoidMapper>;

        $r4 = r0.<androidx.work.multiprocess.RemoteWorkManagerClient: java.util.concurrent.Executor mExecutor>;

        $r6 = staticinvoke <androidx.work.multiprocess.RemoteClientUtils: com.google.common.util.concurrent.ListenableFuture map(com.google.common.util.concurrent.ListenableFuture,androidx.arch.core.util.Function,java.util.concurrent.Executor)>(r2, $r5, $r4);

        return $r6;
    }

    public com.google.common.util.concurrent.ListenableFuture enqueueUniqueWork(java.lang.String, androidx.work.ExistingWorkPolicy, java.util.List)
    {
        androidx.work.multiprocess.RemoteWorkManagerClient r0;
        java.lang.String r1;
        androidx.work.ExistingWorkPolicy r2;
        java.util.List r3;
        androidx.work.multiprocess.RemoteWorkContinuation $r4;
        com.google.common.util.concurrent.ListenableFuture $r5;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerClient;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.work.ExistingWorkPolicy;

        r3 := @parameter2: java.util.List;

        $r4 = virtualinvoke r0.<androidx.work.multiprocess.RemoteWorkManagerClient: androidx.work.multiprocess.RemoteWorkContinuation beginUniqueWork(java.lang.String,androidx.work.ExistingWorkPolicy,java.util.List)>(r1, r2, r3);

        $r5 = virtualinvoke $r4.<androidx.work.multiprocess.RemoteWorkContinuation: com.google.common.util.concurrent.ListenableFuture enqueue()>();

        return $r5;
    }

    public com.google.common.util.concurrent.ListenableFuture enqueueUniquePeriodicWork(java.lang.String, androidx.work.ExistingPeriodicWorkPolicy, androidx.work.PeriodicWorkRequest)
    {
        androidx.work.multiprocess.RemoteWorkManagerClient r0;
        java.lang.String r1;
        androidx.work.ExistingPeriodicWorkPolicy r2, $r4;
        androidx.work.PeriodicWorkRequest r3;
        androidx.work.impl.WorkManagerImpl $r5;
        com.google.common.util.concurrent.ListenableFuture $r6, $r10, r11;
        androidx.work.multiprocess.RemoteDispatcher $r7;
        java.util.concurrent.Executor $r8;
        androidx.arch.core.util.Function $r9;
        androidx.work.impl.WorkContinuationImpl r12;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerClient;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.work.ExistingPeriodicWorkPolicy;

        r3 := @parameter2: androidx.work.PeriodicWorkRequest;

        $r4 = <androidx.work.ExistingPeriodicWorkPolicy: androidx.work.ExistingPeriodicWorkPolicy UPDATE>;

        if r2 != $r4 goto label1;

        $r7 = dynamicinvoke "execute" <androidx.work.multiprocess.RemoteDispatcher (androidx.work.PeriodicWorkRequest,java.lang.String)>(r3, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Object,androidx.work.multiprocess.IWorkManagerImplCallback), methodhandle: "REF_INVOKE_STATIC" <androidx.work.multiprocess.RemoteWorkManagerClient: void lambda$enqueueUniquePeriodicWork$0(androidx.work.PeriodicWorkRequest,java.lang.String,androidx.work.multiprocess.IWorkManagerImpl,androidx.work.multiprocess.IWorkManagerImplCallback)>, methodtype: void __METHODTYPE__(androidx.work.multiprocess.IWorkManagerImpl,androidx.work.multiprocess.IWorkManagerImplCallback));

        r11 = virtualinvoke r0.<androidx.work.multiprocess.RemoteWorkManagerClient: com.google.common.util.concurrent.ListenableFuture execute(androidx.work.multiprocess.RemoteDispatcher)>($r7);

        $r9 = <androidx.work.multiprocess.RemoteClientUtils: androidx.arch.core.util.Function sVoidMapper>;

        $r8 = r0.<androidx.work.multiprocess.RemoteWorkManagerClient: java.util.concurrent.Executor mExecutor>;

        $r10 = staticinvoke <androidx.work.multiprocess.RemoteClientUtils: com.google.common.util.concurrent.ListenableFuture map(com.google.common.util.concurrent.ListenableFuture,androidx.arch.core.util.Function,java.util.concurrent.Executor)>(r11, $r9, $r8);

        return $r10;

     label1:
        $r5 = r0.<androidx.work.multiprocess.RemoteWorkManagerClient: androidx.work.impl.WorkManagerImpl mWorkManager>;

        r12 = virtualinvoke $r5.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.WorkContinuationImpl createWorkContinuationForUniquePeriodicWork(java.lang.String,androidx.work.ExistingPeriodicWorkPolicy,androidx.work.PeriodicWorkRequest)>(r1, r2, r3);

        $r6 = virtualinvoke r0.<androidx.work.multiprocess.RemoteWorkManagerClient: com.google.common.util.concurrent.ListenableFuture enqueue(androidx.work.WorkContinuation)>(r12);

        return $r6;
    }

    public androidx.work.multiprocess.RemoteWorkContinuation beginWith(java.util.List)
    {
        androidx.work.multiprocess.RemoteWorkManagerClient r0;
        java.util.List r1;
        androidx.work.multiprocess.RemoteWorkContinuationImpl $r2;
        androidx.work.impl.WorkManagerImpl $r3;
        androidx.work.WorkContinuation $r4;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerClient;

        r1 := @parameter0: java.util.List;

        $r2 = new androidx.work.multiprocess.RemoteWorkContinuationImpl;

        $r3 = r0.<androidx.work.multiprocess.RemoteWorkManagerClient: androidx.work.impl.WorkManagerImpl mWorkManager>;

        $r4 = virtualinvoke $r3.<androidx.work.impl.WorkManagerImpl: androidx.work.WorkContinuation beginWith(java.util.List)>(r1);

        specialinvoke $r2.<androidx.work.multiprocess.RemoteWorkContinuationImpl: void <init>(androidx.work.multiprocess.RemoteWorkManagerClient,androidx.work.WorkContinuation)>(r0, $r4);

        return $r2;
    }

    public androidx.work.multiprocess.RemoteWorkContinuation beginUniqueWork(java.lang.String, androidx.work.ExistingWorkPolicy, java.util.List)
    {
        androidx.work.multiprocess.RemoteWorkManagerClient r0;
        java.lang.String r1;
        androidx.work.ExistingWorkPolicy r2;
        java.util.List r3;
        androidx.work.multiprocess.RemoteWorkContinuationImpl $r4;
        androidx.work.impl.WorkManagerImpl $r5;
        androidx.work.WorkContinuation $r6;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerClient;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.work.ExistingWorkPolicy;

        r3 := @parameter2: java.util.List;

        $r4 = new androidx.work.multiprocess.RemoteWorkContinuationImpl;

        $r5 = r0.<androidx.work.multiprocess.RemoteWorkManagerClient: androidx.work.impl.WorkManagerImpl mWorkManager>;

        $r6 = virtualinvoke $r5.<androidx.work.impl.WorkManagerImpl: androidx.work.WorkContinuation beginUniqueWork(java.lang.String,androidx.work.ExistingWorkPolicy,java.util.List)>(r1, r2, r3);

        specialinvoke $r4.<androidx.work.multiprocess.RemoteWorkContinuationImpl: void <init>(androidx.work.multiprocess.RemoteWorkManagerClient,androidx.work.WorkContinuation)>(r0, $r6);

        return $r4;
    }

    public com.google.common.util.concurrent.ListenableFuture enqueue(androidx.work.WorkContinuation)
    {
        androidx.work.multiprocess.RemoteWorkManagerClient r0;
        androidx.work.WorkContinuation r1;
        com.google.common.util.concurrent.ListenableFuture r2, $r6;
        androidx.work.multiprocess.RemoteWorkManagerClient$2 $r3;
        java.util.concurrent.Executor $r4;
        androidx.arch.core.util.Function $r5;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerClient;

        r1 := @parameter0: androidx.work.WorkContinuation;

        $r3 = new androidx.work.multiprocess.RemoteWorkManagerClient$2;

        specialinvoke $r3.<androidx.work.multiprocess.RemoteWorkManagerClient$2: void <init>(androidx.work.multiprocess.RemoteWorkManagerClient,androidx.work.WorkContinuation)>(r0, r1);

        r2 = virtualinvoke r0.<androidx.work.multiprocess.RemoteWorkManagerClient: com.google.common.util.concurrent.ListenableFuture execute(androidx.work.multiprocess.RemoteDispatcher)>($r3);

        $r5 = <androidx.work.multiprocess.RemoteClientUtils: androidx.arch.core.util.Function sVoidMapper>;

        $r4 = r0.<androidx.work.multiprocess.RemoteWorkManagerClient: java.util.concurrent.Executor mExecutor>;

        $r6 = staticinvoke <androidx.work.multiprocess.RemoteClientUtils: com.google.common.util.concurrent.ListenableFuture map(com.google.common.util.concurrent.ListenableFuture,androidx.arch.core.util.Function,java.util.concurrent.Executor)>(r2, $r5, $r4);

        return $r6;
    }

    public com.google.common.util.concurrent.ListenableFuture cancelWorkById(java.util.UUID)
    {
        androidx.work.multiprocess.RemoteWorkManagerClient r0;
        java.util.UUID r1;
        com.google.common.util.concurrent.ListenableFuture r2, $r6;
        androidx.work.multiprocess.RemoteWorkManagerClient$3 $r3;
        java.util.concurrent.Executor $r4;
        androidx.arch.core.util.Function $r5;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerClient;

        r1 := @parameter0: java.util.UUID;

        $r3 = new androidx.work.multiprocess.RemoteWorkManagerClient$3;

        specialinvoke $r3.<androidx.work.multiprocess.RemoteWorkManagerClient$3: void <init>(androidx.work.multiprocess.RemoteWorkManagerClient,java.util.UUID)>(r0, r1);

        r2 = virtualinvoke r0.<androidx.work.multiprocess.RemoteWorkManagerClient: com.google.common.util.concurrent.ListenableFuture execute(androidx.work.multiprocess.RemoteDispatcher)>($r3);

        $r5 = <androidx.work.multiprocess.RemoteClientUtils: androidx.arch.core.util.Function sVoidMapper>;

        $r4 = r0.<androidx.work.multiprocess.RemoteWorkManagerClient: java.util.concurrent.Executor mExecutor>;

        $r6 = staticinvoke <androidx.work.multiprocess.RemoteClientUtils: com.google.common.util.concurrent.ListenableFuture map(com.google.common.util.concurrent.ListenableFuture,androidx.arch.core.util.Function,java.util.concurrent.Executor)>(r2, $r5, $r4);

        return $r6;
    }

    public com.google.common.util.concurrent.ListenableFuture cancelAllWorkByTag(java.lang.String)
    {
        androidx.work.multiprocess.RemoteWorkManagerClient r0;
        java.lang.String r1;
        com.google.common.util.concurrent.ListenableFuture r2, $r6;
        androidx.work.multiprocess.RemoteWorkManagerClient$4 $r3;
        java.util.concurrent.Executor $r4;
        androidx.arch.core.util.Function $r5;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerClient;

        r1 := @parameter0: java.lang.String;

        $r3 = new androidx.work.multiprocess.RemoteWorkManagerClient$4;

        specialinvoke $r3.<androidx.work.multiprocess.RemoteWorkManagerClient$4: void <init>(androidx.work.multiprocess.RemoteWorkManagerClient,java.lang.String)>(r0, r1);

        r2 = virtualinvoke r0.<androidx.work.multiprocess.RemoteWorkManagerClient: com.google.common.util.concurrent.ListenableFuture execute(androidx.work.multiprocess.RemoteDispatcher)>($r3);

        $r5 = <androidx.work.multiprocess.RemoteClientUtils: androidx.arch.core.util.Function sVoidMapper>;

        $r4 = r0.<androidx.work.multiprocess.RemoteWorkManagerClient: java.util.concurrent.Executor mExecutor>;

        $r6 = staticinvoke <androidx.work.multiprocess.RemoteClientUtils: com.google.common.util.concurrent.ListenableFuture map(com.google.common.util.concurrent.ListenableFuture,androidx.arch.core.util.Function,java.util.concurrent.Executor)>(r2, $r5, $r4);

        return $r6;
    }

    public com.google.common.util.concurrent.ListenableFuture cancelUniqueWork(java.lang.String)
    {
        androidx.work.multiprocess.RemoteWorkManagerClient r0;
        java.lang.String r1;
        com.google.common.util.concurrent.ListenableFuture r2, $r6;
        androidx.work.multiprocess.RemoteWorkManagerClient$5 $r3;
        java.util.concurrent.Executor $r4;
        androidx.arch.core.util.Function $r5;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerClient;

        r1 := @parameter0: java.lang.String;

        $r3 = new androidx.work.multiprocess.RemoteWorkManagerClient$5;

        specialinvoke $r3.<androidx.work.multiprocess.RemoteWorkManagerClient$5: void <init>(androidx.work.multiprocess.RemoteWorkManagerClient,java.lang.String)>(r0, r1);

        r2 = virtualinvoke r0.<androidx.work.multiprocess.RemoteWorkManagerClient: com.google.common.util.concurrent.ListenableFuture execute(androidx.work.multiprocess.RemoteDispatcher)>($r3);

        $r5 = <androidx.work.multiprocess.RemoteClientUtils: androidx.arch.core.util.Function sVoidMapper>;

        $r4 = r0.<androidx.work.multiprocess.RemoteWorkManagerClient: java.util.concurrent.Executor mExecutor>;

        $r6 = staticinvoke <androidx.work.multiprocess.RemoteClientUtils: com.google.common.util.concurrent.ListenableFuture map(com.google.common.util.concurrent.ListenableFuture,androidx.arch.core.util.Function,java.util.concurrent.Executor)>(r2, $r5, $r4);

        return $r6;
    }

    public com.google.common.util.concurrent.ListenableFuture cancelAllWork()
    {
        androidx.work.multiprocess.RemoteWorkManagerClient r0;
        com.google.common.util.concurrent.ListenableFuture r1, $r5;
        androidx.work.multiprocess.RemoteWorkManagerClient$6 $r2;
        java.util.concurrent.Executor $r3;
        androidx.arch.core.util.Function $r4;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerClient;

        $r2 = new androidx.work.multiprocess.RemoteWorkManagerClient$6;

        specialinvoke $r2.<androidx.work.multiprocess.RemoteWorkManagerClient$6: void <init>(androidx.work.multiprocess.RemoteWorkManagerClient)>(r0);

        r1 = virtualinvoke r0.<androidx.work.multiprocess.RemoteWorkManagerClient: com.google.common.util.concurrent.ListenableFuture execute(androidx.work.multiprocess.RemoteDispatcher)>($r2);

        $r4 = <androidx.work.multiprocess.RemoteClientUtils: androidx.arch.core.util.Function sVoidMapper>;

        $r3 = r0.<androidx.work.multiprocess.RemoteWorkManagerClient: java.util.concurrent.Executor mExecutor>;

        $r5 = staticinvoke <androidx.work.multiprocess.RemoteClientUtils: com.google.common.util.concurrent.ListenableFuture map(com.google.common.util.concurrent.ListenableFuture,androidx.arch.core.util.Function,java.util.concurrent.Executor)>(r1, $r4, $r3);

        return $r5;
    }

    public com.google.common.util.concurrent.ListenableFuture getWorkInfos(androidx.work.WorkQuery)
    {
        androidx.work.multiprocess.RemoteWorkManagerClient r0;
        androidx.work.WorkQuery r1;
        com.google.common.util.concurrent.ListenableFuture r2, $r6;
        androidx.work.multiprocess.RemoteWorkManagerClient$7 $r3;
        androidx.work.multiprocess.RemoteWorkManagerClient$8 $r4;
        java.util.concurrent.Executor $r5;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerClient;

        r1 := @parameter0: androidx.work.WorkQuery;

        $r3 = new androidx.work.multiprocess.RemoteWorkManagerClient$7;

        specialinvoke $r3.<androidx.work.multiprocess.RemoteWorkManagerClient$7: void <init>(androidx.work.multiprocess.RemoteWorkManagerClient,androidx.work.WorkQuery)>(r0, r1);

        r2 = virtualinvoke r0.<androidx.work.multiprocess.RemoteWorkManagerClient: com.google.common.util.concurrent.ListenableFuture execute(androidx.work.multiprocess.RemoteDispatcher)>($r3);

        $r4 = new androidx.work.multiprocess.RemoteWorkManagerClient$8;

        specialinvoke $r4.<androidx.work.multiprocess.RemoteWorkManagerClient$8: void <init>(androidx.work.multiprocess.RemoteWorkManagerClient)>(r0);

        $r5 = r0.<androidx.work.multiprocess.RemoteWorkManagerClient: java.util.concurrent.Executor mExecutor>;

        $r6 = staticinvoke <androidx.work.multiprocess.RemoteClientUtils: com.google.common.util.concurrent.ListenableFuture map(com.google.common.util.concurrent.ListenableFuture,androidx.arch.core.util.Function,java.util.concurrent.Executor)>(r2, $r4, $r5);

        return $r6;
    }

    public com.google.common.util.concurrent.ListenableFuture setProgress(java.util.UUID, androidx.work.Data)
    {
        androidx.work.multiprocess.RemoteWorkManagerClient r0;
        java.util.UUID r1;
        androidx.work.Data r2;
        com.google.common.util.concurrent.ListenableFuture r3, $r7;
        androidx.work.multiprocess.RemoteWorkManagerClient$9 $r4;
        java.util.concurrent.Executor $r5;
        androidx.arch.core.util.Function $r6;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerClient;

        r1 := @parameter0: java.util.UUID;

        r2 := @parameter1: androidx.work.Data;

        $r4 = new androidx.work.multiprocess.RemoteWorkManagerClient$9;

        specialinvoke $r4.<androidx.work.multiprocess.RemoteWorkManagerClient$9: void <init>(androidx.work.multiprocess.RemoteWorkManagerClient,java.util.UUID,androidx.work.Data)>(r0, r1, r2);

        r3 = virtualinvoke r0.<androidx.work.multiprocess.RemoteWorkManagerClient: com.google.common.util.concurrent.ListenableFuture execute(androidx.work.multiprocess.RemoteDispatcher)>($r4);

        $r6 = <androidx.work.multiprocess.RemoteClientUtils: androidx.arch.core.util.Function sVoidMapper>;

        $r5 = r0.<androidx.work.multiprocess.RemoteWorkManagerClient: java.util.concurrent.Executor mExecutor>;

        $r7 = staticinvoke <androidx.work.multiprocess.RemoteClientUtils: com.google.common.util.concurrent.ListenableFuture map(com.google.common.util.concurrent.ListenableFuture,androidx.arch.core.util.Function,java.util.concurrent.Executor)>(r3, $r6, $r5);

        return $r7;
    }

    public com.google.common.util.concurrent.ListenableFuture setForegroundAsync(java.lang.String, androidx.work.ForegroundInfo)
    {
        androidx.work.multiprocess.RemoteWorkManagerClient r0;
        java.lang.String r1;
        androidx.work.ForegroundInfo r2;
        com.google.common.util.concurrent.ListenableFuture r3, $r7;
        androidx.work.multiprocess.RemoteWorkManagerClient$10 $r4;
        java.util.concurrent.Executor $r5;
        androidx.arch.core.util.Function $r6;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerClient;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.work.ForegroundInfo;

        $r4 = new androidx.work.multiprocess.RemoteWorkManagerClient$10;

        specialinvoke $r4.<androidx.work.multiprocess.RemoteWorkManagerClient$10: void <init>(androidx.work.multiprocess.RemoteWorkManagerClient,java.lang.String,androidx.work.ForegroundInfo)>(r0, r1, r2);

        r3 = virtualinvoke r0.<androidx.work.multiprocess.RemoteWorkManagerClient: com.google.common.util.concurrent.ListenableFuture execute(androidx.work.multiprocess.RemoteDispatcher)>($r4);

        $r6 = <androidx.work.multiprocess.RemoteClientUtils: androidx.arch.core.util.Function sVoidMapper>;

        $r5 = r0.<androidx.work.multiprocess.RemoteWorkManagerClient: java.util.concurrent.Executor mExecutor>;

        $r7 = staticinvoke <androidx.work.multiprocess.RemoteClientUtils: com.google.common.util.concurrent.ListenableFuture map(com.google.common.util.concurrent.ListenableFuture,androidx.arch.core.util.Function,java.util.concurrent.Executor)>(r3, $r6, $r5);

        return $r7;
    }

    public com.google.common.util.concurrent.ListenableFuture execute(androidx.work.multiprocess.RemoteDispatcher)
    {
        androidx.work.multiprocess.RemoteWorkManagerClient r0;
        androidx.work.multiprocess.RemoteDispatcher r1;
        com.google.common.util.concurrent.ListenableFuture $r2, $r4;
        androidx.work.multiprocess.RemoteWorkManagerClient$SessionRemoteCallback $r3;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerClient;

        r1 := @parameter0: androidx.work.multiprocess.RemoteDispatcher;

        $r2 = virtualinvoke r0.<androidx.work.multiprocess.RemoteWorkManagerClient: com.google.common.util.concurrent.ListenableFuture getSession()>();

        $r3 = new androidx.work.multiprocess.RemoteWorkManagerClient$SessionRemoteCallback;

        specialinvoke $r3.<androidx.work.multiprocess.RemoteWorkManagerClient$SessionRemoteCallback: void <init>(androidx.work.multiprocess.RemoteWorkManagerClient)>(r0);

        $r4 = virtualinvoke r0.<androidx.work.multiprocess.RemoteWorkManagerClient: com.google.common.util.concurrent.ListenableFuture execute(com.google.common.util.concurrent.ListenableFuture,androidx.work.multiprocess.RemoteDispatcher,androidx.work.multiprocess.RemoteCallback)>($r2, r1, $r3);

        return $r4;
    }

    public com.google.common.util.concurrent.ListenableFuture getSession()
    {
        androidx.work.multiprocess.RemoteWorkManagerClient r0;
        android.content.Context $r1;
        android.content.Intent $r2;
        com.google.common.util.concurrent.ListenableFuture $r3;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerClient;

        $r1 = r0.<androidx.work.multiprocess.RemoteWorkManagerClient: android.content.Context mContext>;

        $r2 = staticinvoke <androidx.work.multiprocess.RemoteWorkManagerClient: android.content.Intent newIntent(android.content.Context)>($r1);

        $r3 = virtualinvoke r0.<androidx.work.multiprocess.RemoteWorkManagerClient: com.google.common.util.concurrent.ListenableFuture getSession(android.content.Intent)>($r2);

        return $r3;
    }

    public android.content.Context getContext()
    {
        androidx.work.multiprocess.RemoteWorkManagerClient r0;
        android.content.Context $r1;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerClient;

        $r1 = r0.<androidx.work.multiprocess.RemoteWorkManagerClient: android.content.Context mContext>;

        return $r1;
    }

    public long getSessionTimeout()
    {
        androidx.work.multiprocess.RemoteWorkManagerClient r0;
        long $l0;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerClient;

        $l0 = r0.<androidx.work.multiprocess.RemoteWorkManagerClient: long mSessionTimeout>;

        return $l0;
    }

    public androidx.work.multiprocess.RemoteWorkManagerClient$Session getCurrentSession()
    {
        androidx.work.multiprocess.RemoteWorkManagerClient r0;
        androidx.work.multiprocess.RemoteWorkManagerClient$Session $r1;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerClient;

        $r1 = r0.<androidx.work.multiprocess.RemoteWorkManagerClient: androidx.work.multiprocess.RemoteWorkManagerClient$Session mSession>;

        return $r1;
    }

    public android.os.Handler getSessionHandler()
    {
        androidx.work.multiprocess.RemoteWorkManagerClient r0;
        android.os.Handler $r1;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerClient;

        $r1 = r0.<androidx.work.multiprocess.RemoteWorkManagerClient: android.os.Handler mHandler>;

        return $r1;
    }

    public androidx.work.multiprocess.RemoteWorkManagerClient$SessionTracker getSessionTracker()
    {
        androidx.work.multiprocess.RemoteWorkManagerClient r0;
        androidx.work.multiprocess.RemoteWorkManagerClient$SessionTracker $r1;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerClient;

        $r1 = r0.<androidx.work.multiprocess.RemoteWorkManagerClient: androidx.work.multiprocess.RemoteWorkManagerClient$SessionTracker mSessionTracker>;

        return $r1;
    }

    public java.lang.Object getSessionLock()
    {
        androidx.work.multiprocess.RemoteWorkManagerClient r0;
        java.lang.Object $r1;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerClient;

        $r1 = r0.<androidx.work.multiprocess.RemoteWorkManagerClient: java.lang.Object mLock>;

        return $r1;
    }

    public java.util.concurrent.Executor getExecutor()
    {
        androidx.work.multiprocess.RemoteWorkManagerClient r0;
        java.util.concurrent.Executor $r1;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerClient;

        $r1 = r0.<androidx.work.multiprocess.RemoteWorkManagerClient: java.util.concurrent.Executor mExecutor>;

        return $r1;
    }

    public long getSessionIndex()
    {
        androidx.work.multiprocess.RemoteWorkManagerClient r0;
        long $l0;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerClient;

        $l0 = r0.<androidx.work.multiprocess.RemoteWorkManagerClient: long mSessionIndex>;

        return $l0;
    }

    com.google.common.util.concurrent.ListenableFuture execute(com.google.common.util.concurrent.ListenableFuture, androidx.work.multiprocess.RemoteDispatcher, androidx.work.multiprocess.RemoteCallback)
    {
        androidx.work.multiprocess.RemoteWorkManagerClient r0;
        com.google.common.util.concurrent.ListenableFuture r1, $r6;
        androidx.work.multiprocess.RemoteDispatcher r2;
        androidx.work.multiprocess.RemoteCallback r3;
        androidx.work.multiprocess.RemoteWorkManagerClient$11 $r4;
        java.util.concurrent.Executor $r5;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerClient;

        r1 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        r2 := @parameter1: androidx.work.multiprocess.RemoteDispatcher;

        r3 := @parameter2: androidx.work.multiprocess.RemoteCallback;

        $r4 = new androidx.work.multiprocess.RemoteWorkManagerClient$11;

        specialinvoke $r4.<androidx.work.multiprocess.RemoteWorkManagerClient$11: void <init>(androidx.work.multiprocess.RemoteWorkManagerClient,com.google.common.util.concurrent.ListenableFuture,androidx.work.multiprocess.RemoteCallback,androidx.work.multiprocess.RemoteDispatcher)>(r0, r1, r3, r2);

        $r5 = r0.<androidx.work.multiprocess.RemoteWorkManagerClient: java.util.concurrent.Executor mExecutor>;

        interfaceinvoke r1.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r4, $r5);

        $r6 = virtualinvoke r3.<androidx.work.multiprocess.RemoteCallback: com.google.common.util.concurrent.ListenableFuture getFuture()>();

        return $r6;
    }

    com.google.common.util.concurrent.ListenableFuture getSession(android.content.Intent)
    {
        androidx.work.multiprocess.RemoteWorkManagerClient r0;
        android.content.Intent r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r13, $r14, r16;
        long $l0, $l1;
        androidx.work.multiprocess.RemoteWorkManagerClient$Session $r5, $r8, $r9, $r12, $r15, $r19;
        androidx.work.Logger $r6;
        java.lang.String $r7;
        android.content.Context $r10;
        java.lang.RuntimeException $r11;
        boolean z0;
        android.os.Handler $r17;
        androidx.work.multiprocess.RemoteWorkManagerClient$SessionTracker $r18;
        androidx.work.impl.utils.futures.SettableFuture $r20;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerClient;

        r1 := @parameter0: android.content.Intent;

        $r4 = r0.<androidx.work.multiprocess.RemoteWorkManagerClient: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $l0 = r0.<androidx.work.multiprocess.RemoteWorkManagerClient: long mSessionIndex>;

        $l1 = $l0 + 1L;

        r0.<androidx.work.multiprocess.RemoteWorkManagerClient: long mSessionIndex> = $l1;

        $r5 = r0.<androidx.work.multiprocess.RemoteWorkManagerClient: androidx.work.multiprocess.RemoteWorkManagerClient$Session mSession>;

        if $r5 != null goto label5;

        $r6 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r7 = <androidx.work.multiprocess.RemoteWorkManagerClient: java.lang.String TAG>;

        virtualinvoke $r6.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r7, "Creating a new session");

        $r8 = new androidx.work.multiprocess.RemoteWorkManagerClient$Session;

        specialinvoke $r8.<androidx.work.multiprocess.RemoteWorkManagerClient$Session: void <init>(androidx.work.multiprocess.RemoteWorkManagerClient)>(r0);

        r0.<androidx.work.multiprocess.RemoteWorkManagerClient: androidx.work.multiprocess.RemoteWorkManagerClient$Session mSession> = $r8;

     label2:
        $r10 = r0.<androidx.work.multiprocess.RemoteWorkManagerClient: android.content.Context mContext>;

        $r9 = r0.<androidx.work.multiprocess.RemoteWorkManagerClient: androidx.work.multiprocess.RemoteWorkManagerClient$Session mSession>;

        z0 = virtualinvoke $r10.<android.content.Context: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>(r1, $r9, 1);

        if z0 != 0 goto label3;

        $r12 = r0.<androidx.work.multiprocess.RemoteWorkManagerClient: androidx.work.multiprocess.RemoteWorkManagerClient$Session mSession>;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String)>("Unable to bind to service");

        specialinvoke r0.<androidx.work.multiprocess.RemoteWorkManagerClient: void unableToBind(androidx.work.multiprocess.RemoteWorkManagerClient$Session,java.lang.Throwable)>($r12, $r11);

     label3:
        goto label5;

     label4:
        $r14 := @caughtexception;

        r16 = $r14;

        $r15 = r0.<androidx.work.multiprocess.RemoteWorkManagerClient: androidx.work.multiprocess.RemoteWorkManagerClient$Session mSession>;

        specialinvoke r0.<androidx.work.multiprocess.RemoteWorkManagerClient: void unableToBind(androidx.work.multiprocess.RemoteWorkManagerClient$Session,java.lang.Throwable)>($r15, r16);

     label5:
        $r17 = r0.<androidx.work.multiprocess.RemoteWorkManagerClient: android.os.Handler mHandler>;

        $r18 = r0.<androidx.work.multiprocess.RemoteWorkManagerClient: androidx.work.multiprocess.RemoteWorkManagerClient$SessionTracker mSessionTracker>;

        virtualinvoke $r17.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r18);

        $r19 = r0.<androidx.work.multiprocess.RemoteWorkManagerClient: androidx.work.multiprocess.RemoteWorkManagerClient$Session mSession>;

        $r20 = $r19.<androidx.work.multiprocess.RemoteWorkManagerClient$Session: androidx.work.impl.utils.futures.SettableFuture mFuture>;

        exitmonitor r2;

     label6:
        return $r20;

     label7:
        $r13 := @caughtexception;

        r3 = $r13;

        exitmonitor r2;

     label8:
        throw r3;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public void cleanUp()
    {
        androidx.work.multiprocess.RemoteWorkManagerClient r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r6;
        androidx.work.Logger $r4;
        java.lang.String $r5;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerClient;

        $r3 = r0.<androidx.work.multiprocess.RemoteWorkManagerClient: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r5 = <androidx.work.multiprocess.RemoteWorkManagerClient: java.lang.String TAG>;

        virtualinvoke $r4.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r5, "Cleaning up.");

        r0.<androidx.work.multiprocess.RemoteWorkManagerClient: androidx.work.multiprocess.RemoteWorkManagerClient$Session mSession> = null;

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void unableToBind(androidx.work.multiprocess.RemoteWorkManagerClient$Session, java.lang.Throwable)
    {
        androidx.work.multiprocess.RemoteWorkManagerClient r0;
        androidx.work.multiprocess.RemoteWorkManagerClient$Session r1;
        java.lang.Throwable r2;
        androidx.work.Logger $r3;
        java.lang.String $r4;
        androidx.work.impl.utils.futures.SettableFuture $r5;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerClient;

        r1 := @parameter0: androidx.work.multiprocess.RemoteWorkManagerClient$Session;

        r2 := @parameter1: java.lang.Throwable;

        $r3 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r4 = <androidx.work.multiprocess.RemoteWorkManagerClient: java.lang.String TAG>;

        virtualinvoke $r3.<androidx.work.Logger: void error(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Unable to bind to service", r2);

        $r5 = r1.<androidx.work.multiprocess.RemoteWorkManagerClient$Session: androidx.work.impl.utils.futures.SettableFuture mFuture>;

        virtualinvoke $r5.<androidx.work.impl.utils.futures.SettableFuture: boolean setException(java.lang.Throwable)>(r2);

        return;
    }

    private static android.content.Intent newIntent(android.content.Context)
    {
        android.content.Context r0;
        android.content.Intent $r1;

        r0 := @parameter0: android.content.Context;

        $r1 = new android.content.Intent;

        specialinvoke $r1.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>(r0, class "Landroidx/work/multiprocess/RemoteWorkManagerService;");

        return $r1;
    }

    private static void lambda$enqueueUniquePeriodicWork$0(androidx.work.PeriodicWorkRequest, java.lang.String, androidx.work.multiprocess.IWorkManagerImpl, androidx.work.multiprocess.IWorkManagerImplCallback) throws java.lang.Throwable
    {
        androidx.work.PeriodicWorkRequest r0;
        java.lang.String r1;
        androidx.work.multiprocess.IWorkManagerImpl r2;
        androidx.work.multiprocess.IWorkManagerImplCallback r3;
        byte[] r4;
        androidx.work.multiprocess.parcelable.ParcelableWorkRequest $r5;

        r0 := @parameter0: androidx.work.PeriodicWorkRequest;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: androidx.work.multiprocess.IWorkManagerImpl;

        r3 := @parameter3: androidx.work.multiprocess.IWorkManagerImplCallback;

        $r5 = new androidx.work.multiprocess.parcelable.ParcelableWorkRequest;

        specialinvoke $r5.<androidx.work.multiprocess.parcelable.ParcelableWorkRequest: void <init>(androidx.work.WorkRequest)>(r0);

        r4 = staticinvoke <androidx.work.multiprocess.parcelable.ParcelConverters: byte[] marshall(android.os.Parcelable)>($r5);

        interfaceinvoke r2.<androidx.work.multiprocess.IWorkManagerImpl: void updateUniquePeriodicWorkRequest(java.lang.String,byte[],androidx.work.multiprocess.IWorkManagerImplCallback)>(r1, r4, r3);

        return;
    }

    static void <clinit>()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <androidx.work.Logger: java.lang.String tagWithPrefix(java.lang.String)>("RemoteWorkManagerClient");

        <androidx.work.multiprocess.RemoteWorkManagerClient: java.lang.String TAG> = $r0;

        return;
    }

