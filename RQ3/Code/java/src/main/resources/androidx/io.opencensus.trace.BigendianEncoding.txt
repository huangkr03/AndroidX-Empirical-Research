io.opencensus.trace.BigendianEncoding
<io.opencensus.trace.BigendianEncoding: byte[] DECODING>
<io.opencensus.trace.BigendianEncoding: char[] ENCODING>
    static void <clinit>()
    {
        char[] $r0;
        byte[] $r1;

        $r0 = staticinvoke <io.opencensus.trace.BigendianEncoding: char[] buildEncodingArray()>();

        <io.opencensus.trace.BigendianEncoding: char[] ENCODING> = $r0;

        $r1 = staticinvoke <io.opencensus.trace.BigendianEncoding: byte[] buildDecodingArray()>();

        <io.opencensus.trace.BigendianEncoding: byte[] DECODING> = $r1;

        return;
    }

    private static byte[] buildDecodingArray()
    {
        byte[] $r0;
        int $i0, $i1;
        java.lang.String $r1;
        char $c2;
        byte $b3;

        $r0 = newarray (byte)[128];

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r0, -1);

        $i0 = 0;

     label1:
        $r1 = "0123456789abcdef";

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label2;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

        $b3 = (byte) $i0;

        $r0[$c2] = $b3;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return $r0;
    }

    private static char[] buildEncodingArray()
    {
        int $i0, $i1, $i3;
        char[] $r0;
        java.lang.String $r1;
        char $c2;

        $r0 = newarray (char)[512];

        $i1 = 0;

     label1:
        if $i1 >= 256 goto label2;

        $i0 = $i1 >>> 4;

        $r1 = "0123456789abcdef";

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

        $r0[$i1] = $c2;

        $i3 = $i1 | 256;

        $i0 = $i1 & 15;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

        $r0[$i3] = $c2;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $r0;
    }

    private static void byteToBase16(byte, char[], int)
    {
        char[] $r0, $r1;
        char $c0;
        byte $b1;
        int $i2;
        short $s3;

        $b1 := @parameter0: byte;

        $r0 := @parameter1: char[];

        $i2 := @parameter2: int;

        $s3 = $b1 & 255;

        $r1 = <io.opencensus.trace.BigendianEncoding: char[] ENCODING>;

        $c0 = $r1[$s3];

        $r0[$i2] = $c0;

        $i2 = $i2 + 1;

        $s3 = $s3 | 256;

        $c0 = $r1[$s3];

        $r0[$i2] = $c0;

        return;
    }

    static long longFromByteArray(byte[], int)
    {
        byte[] $r0;
        int $i0, $i1, $i2;
        boolean $z0;
        byte $b3;
        long $l4, $l5;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 = lengthof $r0;

        $i2 = $i0 + 8;

        if $i1 < $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <io.opencensus.internal.Utils: void checkArgument(boolean,java.lang.Object)>($z0, "array too small");

        $b3 = $r0[$i0];

        $l4 = (long) $b3;

        $l4 = $l4 & 255L;

        $l4 = $l4 << 56;

        $i1 = $i0 + 1;

        $b3 = $r0[$i1];

        $l5 = (long) $b3;

        $l5 = $l5 & 255L;

        $l5 = $l5 << 48;

        $l4 = $l4 | $l5;

        $i1 = $i0 + 2;

        $b3 = $r0[$i1];

        $l5 = (long) $b3;

        $l5 = $l5 & 255L;

        $l5 = $l5 << 40;

        $l4 = $l4 | $l5;

        $i1 = $i0 + 3;

        $b3 = $r0[$i1];

        $l5 = (long) $b3;

        $l5 = $l5 & 255L;

        $l5 = $l5 << 32;

        $l4 = $l4 | $l5;

        $i1 = $i0 + 4;

        $b3 = $r0[$i1];

        $l5 = (long) $b3;

        $l5 = $l5 & 255L;

        $l5 = $l5 << 24;

        $l4 = $l4 | $l5;

        $i1 = $i0 + 5;

        $b3 = $r0[$i1];

        $l5 = (long) $b3;

        $l5 = $l5 & 255L;

        $l5 = $l5 << 16;

        $l4 = $l4 | $l5;

        $i1 = $i0 + 6;

        $b3 = $r0[$i1];

        $l5 = (long) $b3;

        $l5 = $l5 & 255L;

        $l5 = $l5 << 8;

        $l4 = $l4 | $l5;

        $i0 = $i0 + 7;

        $b3 = $r0[$i0];

        $l5 = (long) $b3;

        $l5 = $l5 & 255L;

        $l4 = $l5 | $l4;

        return $l4;
    }

    static void longToBase16String(long, char[], int)
    {
        int $i0, $i2;
        char[] $r0;
        long $l1, $l3;
        byte $b4;

        $l1 := @parameter0: long;

        $r0 := @parameter1: char[];

        $i2 := @parameter2: int;

        $l3 = $l1 >> 56;

        $l3 = $l3 & 255L;

        $i0 = (int) $l3;

        $b4 = (byte) $i0;

        staticinvoke <io.opencensus.trace.BigendianEncoding: void byteToBase16(byte,char[],int)>($b4, $r0, $i2);

        $l3 = $l1 >> 48;

        $l3 = $l3 & 255L;

        $i0 = (int) $l3;

        $b4 = (byte) $i0;

        $i0 = $i2 + 2;

        staticinvoke <io.opencensus.trace.BigendianEncoding: void byteToBase16(byte,char[],int)>($b4, $r0, $i0);

        $l3 = $l1 >> 40;

        $l3 = $l3 & 255L;

        $i0 = (int) $l3;

        $b4 = (byte) $i0;

        $i0 = $i2 + 4;

        staticinvoke <io.opencensus.trace.BigendianEncoding: void byteToBase16(byte,char[],int)>($b4, $r0, $i0);

        $l3 = $l1 >> 32;

        $l3 = $l3 & 255L;

        $i0 = (int) $l3;

        $b4 = (byte) $i0;

        $i0 = $i2 + 6;

        staticinvoke <io.opencensus.trace.BigendianEncoding: void byteToBase16(byte,char[],int)>($b4, $r0, $i0);

        $l3 = $l1 >> 24;

        $l3 = $l3 & 255L;

        $i0 = (int) $l3;

        $b4 = (byte) $i0;

        $i0 = $i2 + 8;

        staticinvoke <io.opencensus.trace.BigendianEncoding: void byteToBase16(byte,char[],int)>($b4, $r0, $i0);

        $l3 = $l1 >> 16;

        $l3 = $l3 & 255L;

        $i0 = (int) $l3;

        $b4 = (byte) $i0;

        $i0 = $i2 + 10;

        staticinvoke <io.opencensus.trace.BigendianEncoding: void byteToBase16(byte,char[],int)>($b4, $r0, $i0);

        $l3 = $l1 >> 8;

        $l3 = $l3 & 255L;

        $i0 = (int) $l3;

        $b4 = (byte) $i0;

        $i0 = $i2 + 12;

        staticinvoke <io.opencensus.trace.BigendianEncoding: void byteToBase16(byte,char[],int)>($b4, $r0, $i0);

        $l1 = $l1 & 255L;

        $i0 = (int) $l1;

        $b4 = (byte) $i0;

        $i2 = $i2 + 14;

        staticinvoke <io.opencensus.trace.BigendianEncoding: void byteToBase16(byte,char[],int)>($b4, $r0, $i2);

        return;
    }

    static void longToByteArray(long, byte[], int)
    {
        int $i0, $i1, $i3;
        byte[] $r0;
        long $l2, $l4;
        boolean $z0;
        byte $b5;

        $l2 := @parameter0: long;

        $r0 := @parameter1: byte[];

        $i1 := @parameter2: int;

        $i0 = lengthof $r0;

        $i3 = $i1 + 8;

        if $i0 < $i3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <io.opencensus.internal.Utils: void checkArgument(boolean,java.lang.Object)>($z0, "array too small");

        $i0 = $i1 + 7;

        $l4 = $l2 & 255L;

        $i3 = (int) $l4;

        $b5 = (byte) $i3;

        $r0[$i0] = $b5;

        $i0 = $i1 + 6;

        $l4 = $l2 >> 8;

        $l4 = $l4 & 255L;

        $i3 = (int) $l4;

        $b5 = (byte) $i3;

        $r0[$i0] = $b5;

        $i0 = $i1 + 5;

        $l4 = $l2 >> 16;

        $l4 = $l4 & 255L;

        $i3 = (int) $l4;

        $b5 = (byte) $i3;

        $r0[$i0] = $b5;

        $i0 = $i1 + 4;

        $l4 = $l2 >> 24;

        $l4 = $l4 & 255L;

        $i3 = (int) $l4;

        $b5 = (byte) $i3;

        $r0[$i0] = $b5;

        $i0 = $i1 + 3;

        $l4 = $l2 >> 32;

        $l4 = $l4 & 255L;

        $i3 = (int) $l4;

        $b5 = (byte) $i3;

        $r0[$i0] = $b5;

        $i0 = $i1 + 2;

        $l4 = $l2 >> 40;

        $l4 = $l4 & 255L;

        $i3 = (int) $l4;

        $b5 = (byte) $i3;

        $r0[$i0] = $b5;

        $i0 = $i1 + 1;

        $l4 = $l2 >> 48;

        $l4 = $l4 & 255L;

        $i3 = (int) $l4;

        $b5 = (byte) $i3;

        $r0[$i0] = $b5;

        $l2 = $l2 >> 56;

        $l2 = $l2 & 255L;

        $i0 = (int) $l2;

        $b5 = (byte) $i0;

        $r0[$i1] = $b5;

        return;
    }

