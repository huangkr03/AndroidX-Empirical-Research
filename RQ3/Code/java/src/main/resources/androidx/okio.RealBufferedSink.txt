okio.RealBufferedSink
<okio.RealBufferedSink: okio.Buffer bufferField>
<okio.RealBufferedSink: boolean closed>
<okio.RealBufferedSink: okio.Sink sink>
    public void <init>(okio.Sink)
    {
        okio.RealBufferedSink $r0;
        okio.Sink $r1;
        okio.Buffer $r2;

        $r0 := @this: okio.RealBufferedSink;

        $r1 := @parameter0: okio.Sink;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "sink");

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<okio.RealBufferedSink: okio.Sink sink> = $r1;

        $r2 = new okio.Buffer;

        specialinvoke $r2.<okio.Buffer: void <init>()>();

        $r0.<okio.RealBufferedSink: okio.Buffer bufferField> = $r2;

        return;
    }

    public void close()
    {
        okio.RealBufferedSink $r0;
        okio.Buffer $r1;
        byte $b0;
        boolean $z0;
        long $l1;
        java.lang.Throwable $r2, $r4;
        okio.Sink $r3;

        $r0 := @this: okio.RealBufferedSink;

        $z0 = $r0.<okio.RealBufferedSink: boolean closed>;

        if $z0 != 0 goto label13;

        $r1 = $r0.<okio.RealBufferedSink: okio.Buffer bufferField>;

     label01:
        $l1 = virtualinvoke $r1.<okio.Buffer: long size()>();

     label02:
        $r2 = null;

        $b0 = $l1 cmp 0L;

        if $b0 <= 0 goto label05;

        $r3 = $r0.<okio.RealBufferedSink: okio.Sink sink>;

        $r1 = $r0.<okio.RealBufferedSink: okio.Buffer bufferField>;

     label03:
        $l1 = virtualinvoke $r1.<okio.Buffer: long size()>();

        interfaceinvoke $r3.<okio.Sink: void write(okio.Buffer,long)>($r1, $l1);

     label04:
        goto label07;

     label05:
        goto label07;

     label06:
        $r2 := @caughtexception;

     label07:
        $r3 = $r0.<okio.RealBufferedSink: okio.Sink sink>;

     label08:
        interfaceinvoke $r3.<okio.Sink: void close()>();

     label09:
        goto label11;

     label10:
        $r4 := @caughtexception;

        if $r2 != null goto label11;

        $r2 = $r4;

     label11:
        $r0.<okio.RealBufferedSink: boolean closed> = 1;

        if $r2 != null goto label12;

        return;

     label12:
        throw $r2;

     label13:
        return;

        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    public okio.BufferedSink emitCompleteSegments()
    {
        okio.RealBufferedSink $r0;
        okio.Buffer $r1;
        byte $b0;
        boolean $z0;
        long $l1;
        okio.Sink $r2;
        java.lang.IllegalStateException $r3;
        java.lang.String $r4;

        $r0 := @this: okio.RealBufferedSink;

        $z0 = $r0.<okio.RealBufferedSink: boolean closed>;

        if $z0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label4;

        $r1 = $r0.<okio.RealBufferedSink: okio.Buffer bufferField>;

        $l1 = virtualinvoke $r1.<okio.Buffer: long completeSegmentByteCount()>();

        $b0 = $l1 cmp 0L;

        if $b0 <= 0 goto label3;

        $r2 = $r0.<okio.RealBufferedSink: okio.Sink sink>;

        $r1 = $r0.<okio.RealBufferedSink: okio.Buffer bufferField>;

        interfaceinvoke $r2.<okio.Sink: void write(okio.Buffer,long)>($r1, $l1);

     label3:
        return $r0;

     label4:
        $r3 = new java.lang.IllegalStateException;

        $r4 = "closed";

        $r4 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r3;
    }

    public void flush()
    {
        okio.RealBufferedSink $r0;
        byte $b0;
        boolean $z0;
        okio.Buffer $r1;
        long $l1;
        okio.Sink $r2;
        java.lang.IllegalStateException $r3;
        java.lang.String $r4;

        $r0 := @this: okio.RealBufferedSink;

        $z0 = $r0.<okio.RealBufferedSink: boolean closed>;

        if $z0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label4;

        $r1 = $r0.<okio.RealBufferedSink: okio.Buffer bufferField>;

        $l1 = virtualinvoke $r1.<okio.Buffer: long size()>();

        $b0 = $l1 cmp 0L;

        if $b0 <= 0 goto label3;

        $r2 = $r0.<okio.RealBufferedSink: okio.Sink sink>;

        $r1 = $r0.<okio.RealBufferedSink: okio.Buffer bufferField>;

        $l1 = virtualinvoke $r1.<okio.Buffer: long size()>();

        interfaceinvoke $r2.<okio.Sink: void write(okio.Buffer,long)>($r1, $l1);

     label3:
        $r2 = $r0.<okio.RealBufferedSink: okio.Sink sink>;

        interfaceinvoke $r2.<okio.Sink: void flush()>();

        return;

     label4:
        $r3 = new java.lang.IllegalStateException;

        $r4 = "closed";

        $r4 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r3;
    }

    public boolean isOpen()
    {
        okio.RealBufferedSink $r0;
        boolean $z0;

        $r0 := @this: okio.RealBufferedSink;

        $z0 = $r0.<okio.RealBufferedSink: boolean closed>;

        $z0 = $z0 ^ 1;

        return $z0;
    }

    public java.lang.String toString()
    {
        okio.RealBufferedSink $r0;
        okio.Sink $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $r0 := @this: okio.RealBufferedSink;

        $r1 = $r0.<okio.RealBufferedSink: okio.Sink sink>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("buffer(");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public int write(java.nio.ByteBuffer)
    {
        okio.RealBufferedSink $r0;
        java.nio.ByteBuffer $r1;
        boolean $z0;
        okio.Buffer $r2;
        int $i0;
        java.lang.IllegalStateException $r3;
        java.lang.String $r4;

        $r0 := @this: okio.RealBufferedSink;

        $r1 := @parameter0: java.nio.ByteBuffer;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "source");

        $z0 = $r0.<okio.RealBufferedSink: boolean closed>;

        if $z0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $r2 = $r0.<okio.RealBufferedSink: okio.Buffer bufferField>;

        $i0 = virtualinvoke $r2.<okio.Buffer: int write(java.nio.ByteBuffer)>($r1);

        virtualinvoke $r0.<okio.RealBufferedSink: okio.BufferedSink emitCompleteSegments()>();

        return $i0;

     label3:
        $r3 = new java.lang.IllegalStateException;

        $r4 = "closed";

        $r4 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r3;
    }

    public okio.BufferedSink write(byte[])
    {
        okio.RealBufferedSink $r0;
        byte[] $r1;
        boolean $z0;
        okio.Buffer $r2;
        okio.BufferedSink $r3;
        java.lang.IllegalStateException $r4;
        java.lang.String $r5;

        $r0 := @this: okio.RealBufferedSink;

        $r1 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "source");

        $z0 = $r0.<okio.RealBufferedSink: boolean closed>;

        if $z0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $r2 = $r0.<okio.RealBufferedSink: okio.Buffer bufferField>;

        virtualinvoke $r2.<okio.Buffer: okio.Buffer write(byte[])>($r1);

        $r3 = virtualinvoke $r0.<okio.RealBufferedSink: okio.BufferedSink emitCompleteSegments()>();

        return $r3;

     label3:
        $r4 = new java.lang.IllegalStateException;

        $r5 = "closed";

        $r5 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    public void write(okio.Buffer, long)
    {
        okio.RealBufferedSink $r0;
        java.lang.String $r1;
        okio.Buffer $r2, $r3;
        long $l0;
        boolean $z0;
        java.lang.IllegalStateException $r4;

        $r0 := @this: okio.RealBufferedSink;

        $r2 := @parameter0: okio.Buffer;

        $l0 := @parameter1: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "source");

        $z0 = $r0.<okio.RealBufferedSink: boolean closed>;

        if $z0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $r3 = $r0.<okio.RealBufferedSink: okio.Buffer bufferField>;

        virtualinvoke $r3.<okio.Buffer: void write(okio.Buffer,long)>($r2, $l0);

        virtualinvoke $r0.<okio.RealBufferedSink: okio.BufferedSink emitCompleteSegments()>();

        return;

     label3:
        $r4 = new java.lang.IllegalStateException;

        $r1 = "closed";

        $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r1);

        throw $r4;
    }

    public okio.BufferedSink writeByte(int)
    {
        okio.RealBufferedSink $r0;
        int $i0;
        boolean $z0;
        okio.Buffer $r1;
        okio.BufferedSink $r2;
        java.lang.IllegalStateException $r3;
        java.lang.String $r4;

        $r0 := @this: okio.RealBufferedSink;

        $i0 := @parameter0: int;

        $z0 = $r0.<okio.RealBufferedSink: boolean closed>;

        if $z0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $r1 = $r0.<okio.RealBufferedSink: okio.Buffer bufferField>;

        virtualinvoke $r1.<okio.Buffer: okio.Buffer writeByte(int)>($i0);

        $r2 = virtualinvoke $r0.<okio.RealBufferedSink: okio.BufferedSink emitCompleteSegments()>();

        return $r2;

     label3:
        $r3 = new java.lang.IllegalStateException;

        $r4 = "closed";

        $r4 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r3;
    }

    public okio.BufferedSink writeInt(int)
    {
        okio.RealBufferedSink $r0;
        int $i0;
        boolean $z0;
        okio.Buffer $r1;
        okio.BufferedSink $r2;
        java.lang.IllegalStateException $r3;
        java.lang.String $r4;

        $r0 := @this: okio.RealBufferedSink;

        $i0 := @parameter0: int;

        $z0 = $r0.<okio.RealBufferedSink: boolean closed>;

        if $z0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $r1 = $r0.<okio.RealBufferedSink: okio.Buffer bufferField>;

        virtualinvoke $r1.<okio.Buffer: okio.Buffer writeInt(int)>($i0);

        $r2 = virtualinvoke $r0.<okio.RealBufferedSink: okio.BufferedSink emitCompleteSegments()>();

        return $r2;

     label3:
        $r3 = new java.lang.IllegalStateException;

        $r4 = "closed";

        $r4 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r3;
    }

    public okio.BufferedSink writeShort(int)
    {
        okio.RealBufferedSink $r0;
        int $i0;
        boolean $z0;
        okio.Buffer $r1;
        okio.BufferedSink $r2;
        java.lang.IllegalStateException $r3;
        java.lang.String $r4;

        $r0 := @this: okio.RealBufferedSink;

        $i0 := @parameter0: int;

        $z0 = $r0.<okio.RealBufferedSink: boolean closed>;

        if $z0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $r1 = $r0.<okio.RealBufferedSink: okio.Buffer bufferField>;

        virtualinvoke $r1.<okio.Buffer: okio.Buffer writeShort(int)>($i0);

        $r2 = virtualinvoke $r0.<okio.RealBufferedSink: okio.BufferedSink emitCompleteSegments()>();

        return $r2;

     label3:
        $r3 = new java.lang.IllegalStateException;

        $r4 = "closed";

        $r4 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r3;
    }

    public okio.BufferedSink writeUtf8(java.lang.String)
    {
        okio.RealBufferedSink $r0;
        java.lang.String $r1;
        boolean $z0;
        okio.Buffer $r2;
        okio.BufferedSink $r3;
        java.lang.IllegalStateException $r4;

        $r0 := @this: okio.RealBufferedSink;

        $r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "string");

        $z0 = $r0.<okio.RealBufferedSink: boolean closed>;

        if $z0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $r2 = $r0.<okio.RealBufferedSink: okio.Buffer bufferField>;

        virtualinvoke $r2.<okio.Buffer: okio.Buffer writeUtf8(java.lang.String)>($r1);

        $r3 = virtualinvoke $r0.<okio.RealBufferedSink: okio.BufferedSink emitCompleteSegments()>();

        return $r3;

     label3:
        $r4 = new java.lang.IllegalStateException;

        $r1 = "closed";

        $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r1);

        throw $r4;
    }

