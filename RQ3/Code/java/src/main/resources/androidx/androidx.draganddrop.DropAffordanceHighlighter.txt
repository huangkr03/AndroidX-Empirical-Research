androidx.draganddrop.DropAffordanceHighlighter
<androidx.draganddrop.DropAffordanceHighlighter: float FILL_OPACITY_INACTIVE>
<androidx.draganddrop.DropAffordanceHighlighter: float FILL_OPACITY_ACTIVE>
<androidx.draganddrop.DropAffordanceHighlighter: float STROKE_OPACITY_INACTIVE>
<androidx.draganddrop.DropAffordanceHighlighter: int STROKE_OPACITY_ACTIVE>
<androidx.draganddrop.DropAffordanceHighlighter: int STROKE_WIDTH_DP>
<androidx.draganddrop.DropAffordanceHighlighter: int DEFAULT_CORNER_RADIUS_DP>
<androidx.draganddrop.DropAffordanceHighlighter: int DEFAULT_COLOR>
<androidx.draganddrop.DropAffordanceHighlighter: int DEFAULT_GRAVITY>
<androidx.draganddrop.DropAffordanceHighlighter: boolean mDragInProgress>
<androidx.draganddrop.DropAffordanceHighlighter: android.view.View mViewToHighlight>
<androidx.draganddrop.DropAffordanceHighlighter: androidx.core.util.Predicate mEligibilityPredicate>
<androidx.draganddrop.DropAffordanceHighlighter: boolean mAcceptDragsWithLocalState>
<androidx.draganddrop.DropAffordanceHighlighter: android.graphics.drawable.Drawable mHighlightAffordance>
<androidx.draganddrop.DropAffordanceHighlighter: android.graphics.drawable.Drawable mSelectedAffordance>
<androidx.draganddrop.DropAffordanceHighlighter: java.util.Set mViewsWithDragFocus>
<androidx.draganddrop.DropAffordanceHighlighter: android.graphics.drawable.Drawable mOriginalForeground>
<androidx.draganddrop.DropAffordanceHighlighter: int mOriginalForegroundGravity>
<androidx.draganddrop.DropAffordanceHighlighter: android.graphics.BlendMode mOriginalForegroundTintBlendMode>
<androidx.draganddrop.DropAffordanceHighlighter: android.content.res.ColorStateList mOriginalForegroundTintList>
<androidx.draganddrop.DropAffordanceHighlighter: android.graphics.PorterDuff$Mode mOriginalForegroundTintMode>
    void <init>(android.view.View, androidx.core.util.Predicate, boolean, int, int)
    {
        androidx.draganddrop.DropAffordanceHighlighter r0;
        android.view.View r1, $r4, $r7;
        androidx.core.util.Predicate r2;
        boolean z0;
        int i0, i1, i2, i3, i4, i5;
        java.util.HashSet $r3;
        android.content.Context $r5, $r8;
        android.graphics.drawable.GradientDrawable $r6, $r9;

        r0 := @this: androidx.draganddrop.DropAffordanceHighlighter;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: androidx.core.util.Predicate;

        z0 := @parameter2: boolean;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.draganddrop.DropAffordanceHighlighter: boolean mDragInProgress> = 0;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r0.<androidx.draganddrop.DropAffordanceHighlighter: java.util.Set mViewsWithDragFocus> = $r3;

        r0.<androidx.draganddrop.DropAffordanceHighlighter: int mOriginalForegroundGravity> = 119;

        r0.<androidx.draganddrop.DropAffordanceHighlighter: android.view.View mViewToHighlight> = r1;

        r0.<androidx.draganddrop.DropAffordanceHighlighter: androidx.core.util.Predicate mEligibilityPredicate> = r2;

        r0.<androidx.draganddrop.DropAffordanceHighlighter: boolean mAcceptDragsWithLocalState> = z0;

        i2 = staticinvoke <androidx.draganddrop.DropAffordanceHighlighter: int colorWithOpacity(int,float)>(i0, 0.2F);

        i3 = staticinvoke <androidx.draganddrop.DropAffordanceHighlighter: int colorWithOpacity(int,float)>(i0, 0.65F);

        i4 = staticinvoke <androidx.draganddrop.DropAffordanceHighlighter: int colorWithOpacity(int,float)>(i0, 0.4F);

        i5 = staticinvoke <androidx.draganddrop.DropAffordanceHighlighter: int colorWithOpacity(int,float)>(i0, 1.0F);

        $r4 = r0.<androidx.draganddrop.DropAffordanceHighlighter: android.view.View mViewToHighlight>;

        $r5 = virtualinvoke $r4.<android.view.View: android.content.Context getContext()>();

        $r6 = staticinvoke <androidx.draganddrop.DropAffordanceHighlighter: android.graphics.drawable.GradientDrawable makeDrawable(android.content.Context,int,int,int)>($r5, i2, i4, i1);

        r0.<androidx.draganddrop.DropAffordanceHighlighter: android.graphics.drawable.Drawable mHighlightAffordance> = $r6;

        $r7 = r0.<androidx.draganddrop.DropAffordanceHighlighter: android.view.View mViewToHighlight>;

        $r8 = virtualinvoke $r7.<android.view.View: android.content.Context getContext()>();

        $r9 = staticinvoke <androidx.draganddrop.DropAffordanceHighlighter: android.graphics.drawable.GradientDrawable makeDrawable(android.content.Context,int,int,int)>($r8, i3, i5, i1);

        r0.<androidx.draganddrop.DropAffordanceHighlighter: android.graphics.drawable.Drawable mSelectedAffordance> = $r9;

        return;
    }

    static androidx.draganddrop.DropAffordanceHighlighter$Builder forView(android.view.View, androidx.core.util.Predicate)
    {
        android.view.View r0;
        androidx.core.util.Predicate r1;
        androidx.draganddrop.DropAffordanceHighlighter$Builder $r4;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: androidx.core.util.Predicate;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = new androidx.draganddrop.DropAffordanceHighlighter$Builder;

        specialinvoke $r4.<androidx.draganddrop.DropAffordanceHighlighter$Builder: void <init>(android.view.View,androidx.core.util.Predicate)>(r0, r1);

        return $r4;
    }

    boolean onDrag(android.view.View, android.view.DragEvent)
    {
        androidx.draganddrop.DropAffordanceHighlighter r0;
        android.view.View r1;
        android.view.DragEvent r2;
        int i0;
        boolean $z0, $z1, $z2;
        androidx.core.util.Predicate $r3;
        android.content.ClipDescription $r4;
        java.lang.Object $r5;

        r0 := @this: androidx.draganddrop.DropAffordanceHighlighter;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.DragEvent;

        $z0 = r0.<androidx.draganddrop.DropAffordanceHighlighter: boolean mAcceptDragsWithLocalState>;

        if $z0 != 0 goto label1;

        $r5 = virtualinvoke r2.<android.view.DragEvent: java.lang.Object getLocalState()>();

        if $r5 == null goto label1;

        return 0;

     label1:
        i0 = virtualinvoke r2.<android.view.DragEvent: int getAction()>();

        if i0 == 4 goto label2;

        $r3 = r0.<androidx.draganddrop.DropAffordanceHighlighter: androidx.core.util.Predicate mEligibilityPredicate>;

        $r4 = virtualinvoke r2.<android.view.DragEvent: android.content.ClipDescription getClipDescription()>();

        $z1 = interfaceinvoke $r3.<androidx.core.util.Predicate: boolean test(java.lang.Object)>($r4);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        specialinvoke r0.<androidx.draganddrop.DropAffordanceHighlighter: void handleDragEvent(android.view.View,int)>(r1, i0);

        if i0 != 1 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;
    }

    private static int colorWithOpacity(int, float)
    {
        int i0, $i1, $i2, $i3, $i4;
        float f0, $f1;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        $i3 = 16777215 & i0;

        $f1 = 255.0F * f0;

        $i1 = (int) $f1;

        $i2 = $i1 << 24;

        $i4 = $i3 | $i2;

        return $i4;
    }

    private void handleDragEvent(android.view.View, int)
    {
        androidx.draganddrop.DropAffordanceHighlighter r0;
        android.view.View r1, $r5, $r7;
        int i0;
        java.util.Set $r2, $r3, $r8, $r9;
        boolean $z1, $z3, $z4, $z5;
        android.graphics.drawable.Drawable $r4, $r6;

        r0 := @this: androidx.draganddrop.DropAffordanceHighlighter;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        tableswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label5;
            case 3: goto label5;
            case 4: goto label2;
            case 5: goto label3;
            case 6: goto label4;
            default: goto label5;
        };

     label1:
        $z4 = r0.<androidx.draganddrop.DropAffordanceHighlighter: boolean mDragInProgress>;

        if $z4 != 0 goto label5;

        r0.<androidx.draganddrop.DropAffordanceHighlighter: boolean mDragInProgress> = 1;

        specialinvoke r0.<androidx.draganddrop.DropAffordanceHighlighter: void backUpOriginalForeground()>();

        goto label5;

     label2:
        $z3 = r0.<androidx.draganddrop.DropAffordanceHighlighter: boolean mDragInProgress>;

        if $z3 == 0 goto label5;

        r0.<androidx.draganddrop.DropAffordanceHighlighter: boolean mDragInProgress> = 0;

        specialinvoke r0.<androidx.draganddrop.DropAffordanceHighlighter: void restoreOriginalForeground()>();

        $r9 = r0.<androidx.draganddrop.DropAffordanceHighlighter: java.util.Set mViewsWithDragFocus>;

        interfaceinvoke $r9.<java.util.Set: void clear()>();

        goto label5;

     label3:
        $r8 = r0.<androidx.draganddrop.DropAffordanceHighlighter: java.util.Set mViewsWithDragFocus>;

        interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>(r1);

        goto label5;

     label4:
        $r2 = r0.<androidx.draganddrop.DropAffordanceHighlighter: java.util.Set mViewsWithDragFocus>;

        interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>(r1);

     label5:
        $z5 = r0.<androidx.draganddrop.DropAffordanceHighlighter: boolean mDragInProgress>;

        if $z5 == 0 goto label7;

        $r3 = r0.<androidx.draganddrop.DropAffordanceHighlighter: java.util.Set mViewsWithDragFocus>;

        $z1 = interfaceinvoke $r3.<java.util.Set: boolean isEmpty()>();

        if $z1 != 0 goto label6;

        $r7 = r0.<androidx.draganddrop.DropAffordanceHighlighter: android.view.View mViewToHighlight>;

        $r6 = r0.<androidx.draganddrop.DropAffordanceHighlighter: android.graphics.drawable.Drawable mSelectedAffordance>;

        virtualinvoke $r7.<android.view.View: void setForeground(android.graphics.drawable.Drawable)>($r6);

        goto label7;

     label6:
        $r5 = r0.<androidx.draganddrop.DropAffordanceHighlighter: android.view.View mViewToHighlight>;

        $r4 = r0.<androidx.draganddrop.DropAffordanceHighlighter: android.graphics.drawable.Drawable mHighlightAffordance>;

        virtualinvoke $r5.<android.view.View: void setForeground(android.graphics.drawable.Drawable)>($r4);

     label7:
        return;
    }

    private static android.graphics.drawable.GradientDrawable makeDrawable(android.content.Context, int, int, int)
    {
        android.content.Context r0;
        int i0, i1, i2, $i3;
        android.graphics.drawable.GradientDrawable r1, $r2;
        float $f0;

        r0 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r2 = new android.graphics.drawable.GradientDrawable;

        specialinvoke $r2.<android.graphics.drawable.GradientDrawable: void <init>()>();

        r1 = $r2;

        virtualinvoke r1.<android.graphics.drawable.GradientDrawable: void setShape(int)>(0);

        virtualinvoke r1.<android.graphics.drawable.GradientDrawable: void setColor(int)>(i0);

        $i3 = staticinvoke <androidx.draganddrop.DropAffordanceHighlighter: int dpToPx(android.content.Context,int)>(r0, 3);

        virtualinvoke r1.<android.graphics.drawable.GradientDrawable: void setStroke(int,int)>($i3, i1);

        $f0 = (float) i2;

        virtualinvoke r1.<android.graphics.drawable.GradientDrawable: void setCornerRadius(float)>($f0);

        return r1;
    }

    static int dpToPx(android.content.Context, int)
    {
        android.content.Context r0;
        int i0, $i1, $i2;
        float $f0, $f1, $f2;
        android.content.res.Resources $r1;
        android.util.DisplayMetrics $r2;

        r0 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        $i1 = staticinvoke <java.lang.Math: int max(int,int)>(0, i0);

        $f0 = (float) $i1;

        $r1 = virtualinvoke r0.<android.content.Context: android.content.res.Resources getResources()>();

        $r2 = virtualinvoke $r1.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $f1 = $r2.<android.util.DisplayMetrics: float density>;

        $f2 = $f0 * $f1;

        $i2 = staticinvoke <java.lang.Math: int round(float)>($f2);

        return $i2;
    }

    private void backUpOriginalForeground()
    {
        androidx.draganddrop.DropAffordanceHighlighter r0;
        android.view.View $r1, $r3, $r4, $r6, $r8, $r9, $r10;
        android.graphics.drawable.Drawable $r2;
        int $i0, $i1;
        android.content.res.ColorStateList $r5;
        android.graphics.PorterDuff$Mode $r7;

        r0 := @this: androidx.draganddrop.DropAffordanceHighlighter;

        $r1 = r0.<androidx.draganddrop.DropAffordanceHighlighter: android.view.View mViewToHighlight>;

        $r2 = virtualinvoke $r1.<android.view.View: android.graphics.drawable.Drawable getForeground()>();

        r0.<androidx.draganddrop.DropAffordanceHighlighter: android.graphics.drawable.Drawable mOriginalForeground> = $r2;

        $r3 = r0.<androidx.draganddrop.DropAffordanceHighlighter: android.view.View mViewToHighlight>;

        $i0 = virtualinvoke $r3.<android.view.View: int getForegroundGravity()>();

        r0.<androidx.draganddrop.DropAffordanceHighlighter: int mOriginalForegroundGravity> = $i0;

        $r4 = r0.<androidx.draganddrop.DropAffordanceHighlighter: android.view.View mViewToHighlight>;

        $r5 = virtualinvoke $r4.<android.view.View: android.content.res.ColorStateList getForegroundTintList()>();

        r0.<androidx.draganddrop.DropAffordanceHighlighter: android.content.res.ColorStateList mOriginalForegroundTintList> = $r5;

        $r6 = r0.<androidx.draganddrop.DropAffordanceHighlighter: android.view.View mViewToHighlight>;

        $r7 = virtualinvoke $r6.<android.view.View: android.graphics.PorterDuff$Mode getForegroundTintMode()>();

        r0.<androidx.draganddrop.DropAffordanceHighlighter: android.graphics.PorterDuff$Mode mOriginalForegroundTintMode> = $r7;

        $r8 = r0.<androidx.draganddrop.DropAffordanceHighlighter: android.view.View mViewToHighlight>;

        virtualinvoke $r8.<android.view.View: void setForegroundGravity(int)>(119);

        $r9 = r0.<androidx.draganddrop.DropAffordanceHighlighter: android.view.View mViewToHighlight>;

        virtualinvoke $r9.<android.view.View: void setForegroundTintList(android.content.res.ColorStateList)>(null);

        $r10 = r0.<androidx.draganddrop.DropAffordanceHighlighter: android.view.View mViewToHighlight>;

        virtualinvoke $r10.<android.view.View: void setForegroundTintMode(android.graphics.PorterDuff$Mode)>(null);

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 < 29 goto label1;

        staticinvoke <androidx.draganddrop.DropAffordanceHighlighter$Api29BackUpImpl: void backUp(androidx.draganddrop.DropAffordanceHighlighter)>(r0);

     label1:
        return;
    }

    private void restoreOriginalForeground()
    {
        androidx.draganddrop.DropAffordanceHighlighter r0;
        android.graphics.drawable.Drawable $r1;
        android.view.View $r2, $r3, $r5, $r7;
        int $i0, $i1;
        android.content.res.ColorStateList $r4;
        android.graphics.PorterDuff$Mode $r6;

        r0 := @this: androidx.draganddrop.DropAffordanceHighlighter;

        $r2 = r0.<androidx.draganddrop.DropAffordanceHighlighter: android.view.View mViewToHighlight>;

        $r1 = r0.<androidx.draganddrop.DropAffordanceHighlighter: android.graphics.drawable.Drawable mOriginalForeground>;

        virtualinvoke $r2.<android.view.View: void setForeground(android.graphics.drawable.Drawable)>($r1);

        $r3 = r0.<androidx.draganddrop.DropAffordanceHighlighter: android.view.View mViewToHighlight>;

        $i0 = r0.<androidx.draganddrop.DropAffordanceHighlighter: int mOriginalForegroundGravity>;

        virtualinvoke $r3.<android.view.View: void setForegroundGravity(int)>($i0);

        $r5 = r0.<androidx.draganddrop.DropAffordanceHighlighter: android.view.View mViewToHighlight>;

        $r4 = r0.<androidx.draganddrop.DropAffordanceHighlighter: android.content.res.ColorStateList mOriginalForegroundTintList>;

        virtualinvoke $r5.<android.view.View: void setForegroundTintList(android.content.res.ColorStateList)>($r4);

        $r7 = r0.<androidx.draganddrop.DropAffordanceHighlighter: android.view.View mViewToHighlight>;

        $r6 = r0.<androidx.draganddrop.DropAffordanceHighlighter: android.graphics.PorterDuff$Mode mOriginalForegroundTintMode>;

        virtualinvoke $r7.<android.view.View: void setForegroundTintMode(android.graphics.PorterDuff$Mode)>($r6);

        r0.<androidx.draganddrop.DropAffordanceHighlighter: android.graphics.drawable.Drawable mOriginalForeground> = null;

        r0.<androidx.draganddrop.DropAffordanceHighlighter: int mOriginalForegroundGravity> = 119;

        r0.<androidx.draganddrop.DropAffordanceHighlighter: android.content.res.ColorStateList mOriginalForegroundTintList> = null;

        r0.<androidx.draganddrop.DropAffordanceHighlighter: android.graphics.PorterDuff$Mode mOriginalForegroundTintMode> = null;

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 < 29 goto label1;

        staticinvoke <androidx.draganddrop.DropAffordanceHighlighter$Api29RestoreImpl: void restore(androidx.draganddrop.DropAffordanceHighlighter)>(r0);

     label1:
        return;
    }

androidx.draganddrop.DropAffordanceHighlighter$Api29BackUpImpl
    private void <init>()
    {
        androidx.draganddrop.DropAffordanceHighlighter$Api29BackUpImpl r0;

        r0 := @this: androidx.draganddrop.DropAffordanceHighlighter$Api29BackUpImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void backUp(androidx.draganddrop.DropAffordanceHighlighter)
    {
        androidx.draganddrop.DropAffordanceHighlighter r0;
        android.view.View $r1, $r3;
        android.graphics.BlendMode $r2;

        r0 := @parameter0: androidx.draganddrop.DropAffordanceHighlighter;

        $r1 = r0.<androidx.draganddrop.DropAffordanceHighlighter: android.view.View mViewToHighlight>;

        $r2 = virtualinvoke $r1.<android.view.View: android.graphics.BlendMode getForegroundTintBlendMode()>();

        r0.<androidx.draganddrop.DropAffordanceHighlighter: android.graphics.BlendMode mOriginalForegroundTintBlendMode> = $r2;

        $r3 = r0.<androidx.draganddrop.DropAffordanceHighlighter: android.view.View mViewToHighlight>;

        virtualinvoke $r3.<android.view.View: void setForegroundTintBlendMode(android.graphics.BlendMode)>(null);

        return;
    }

androidx.draganddrop.DropAffordanceHighlighter$Api29RestoreImpl
    private void <init>()
    {
        androidx.draganddrop.DropAffordanceHighlighter$Api29RestoreImpl r0;

        r0 := @this: androidx.draganddrop.DropAffordanceHighlighter$Api29RestoreImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void restore(androidx.draganddrop.DropAffordanceHighlighter)
    {
        androidx.draganddrop.DropAffordanceHighlighter r0;
        android.graphics.BlendMode $r1;
        android.view.View $r2;

        r0 := @parameter0: androidx.draganddrop.DropAffordanceHighlighter;

        $r2 = r0.<androidx.draganddrop.DropAffordanceHighlighter: android.view.View mViewToHighlight>;

        $r1 = r0.<androidx.draganddrop.DropAffordanceHighlighter: android.graphics.BlendMode mOriginalForegroundTintBlendMode>;

        virtualinvoke $r2.<android.view.View: void setForegroundTintBlendMode(android.graphics.BlendMode)>($r1);

        r0.<androidx.draganddrop.DropAffordanceHighlighter: android.graphics.BlendMode mOriginalForegroundTintBlendMode> = null;

        return;
    }

androidx.draganddrop.DropAffordanceHighlighter$Builder
<androidx.draganddrop.DropAffordanceHighlighter$Builder: android.view.View mViewToHighlight>
<androidx.draganddrop.DropAffordanceHighlighter$Builder: androidx.core.util.Predicate mEligibilityPredicate>
<androidx.draganddrop.DropAffordanceHighlighter$Builder: boolean mAcceptDragsWithLocalState>
<androidx.draganddrop.DropAffordanceHighlighter$Builder: int mCornerRadiusPx>
<androidx.draganddrop.DropAffordanceHighlighter$Builder: int mHighlightColor>
<androidx.draganddrop.DropAffordanceHighlighter$Builder: boolean mHighlightColorHasBeenSupplied>
    void <init>(android.view.View, androidx.core.util.Predicate)
    {
        androidx.draganddrop.DropAffordanceHighlighter$Builder r0;
        android.view.View r1;
        androidx.core.util.Predicate r2;
        android.content.Context $r3;
        int $i0;

        r0 := @this: androidx.draganddrop.DropAffordanceHighlighter$Builder;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: androidx.core.util.Predicate;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.draganddrop.DropAffordanceHighlighter$Builder: boolean mHighlightColorHasBeenSupplied> = 0;

        r0.<androidx.draganddrop.DropAffordanceHighlighter$Builder: android.view.View mViewToHighlight> = r1;

        r0.<androidx.draganddrop.DropAffordanceHighlighter$Builder: androidx.core.util.Predicate mEligibilityPredicate> = r2;

        $r3 = virtualinvoke r1.<android.view.View: android.content.Context getContext()>();

        $i0 = staticinvoke <androidx.draganddrop.DropAffordanceHighlighter: int dpToPx(android.content.Context,int)>($r3, 16);

        r0.<androidx.draganddrop.DropAffordanceHighlighter$Builder: int mCornerRadiusPx> = $i0;

        return;
    }

    androidx.draganddrop.DropAffordanceHighlighter$Builder setHighlightColor(int)
    {
        androidx.draganddrop.DropAffordanceHighlighter$Builder r0;
        int i0;

        r0 := @this: androidx.draganddrop.DropAffordanceHighlighter$Builder;

        i0 := @parameter0: int;

        r0.<androidx.draganddrop.DropAffordanceHighlighter$Builder: int mHighlightColor> = i0;

        r0.<androidx.draganddrop.DropAffordanceHighlighter$Builder: boolean mHighlightColorHasBeenSupplied> = 1;

        return r0;
    }

    androidx.draganddrop.DropAffordanceHighlighter$Builder setHighlightCornerRadiusPx(int)
    {
        androidx.draganddrop.DropAffordanceHighlighter$Builder r0;
        int i0;

        r0 := @this: androidx.draganddrop.DropAffordanceHighlighter$Builder;

        i0 := @parameter0: int;

        r0.<androidx.draganddrop.DropAffordanceHighlighter$Builder: int mCornerRadiusPx> = i0;

        return r0;
    }

    androidx.draganddrop.DropAffordanceHighlighter$Builder shouldAcceptDragsWithLocalState(boolean)
    {
        androidx.draganddrop.DropAffordanceHighlighter$Builder r0;
        boolean z0;

        r0 := @this: androidx.draganddrop.DropAffordanceHighlighter$Builder;

        z0 := @parameter0: boolean;

        r0.<androidx.draganddrop.DropAffordanceHighlighter$Builder: boolean mAcceptDragsWithLocalState> = z0;

        return r0;
    }

    androidx.draganddrop.DropAffordanceHighlighter build()
    {
        androidx.draganddrop.DropAffordanceHighlighter$Builder r0;
        androidx.draganddrop.DropAffordanceHighlighter $r1;
        android.view.View $r2;
        androidx.core.util.Predicate $r3;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: androidx.draganddrop.DropAffordanceHighlighter$Builder;

        $r1 = new androidx.draganddrop.DropAffordanceHighlighter;

        $r2 = r0.<androidx.draganddrop.DropAffordanceHighlighter$Builder: android.view.View mViewToHighlight>;

        $r3 = r0.<androidx.draganddrop.DropAffordanceHighlighter$Builder: androidx.core.util.Predicate mEligibilityPredicate>;

        $z0 = r0.<androidx.draganddrop.DropAffordanceHighlighter$Builder: boolean mAcceptDragsWithLocalState>;

        $i0 = specialinvoke r0.<androidx.draganddrop.DropAffordanceHighlighter$Builder: int getHighlightColor()>();

        $i1 = r0.<androidx.draganddrop.DropAffordanceHighlighter$Builder: int mCornerRadiusPx>;

        specialinvoke $r1.<androidx.draganddrop.DropAffordanceHighlighter: void <init>(android.view.View,androidx.core.util.Predicate,boolean,int,int)>($r2, $r3, $z0, $i0, $i1);

        return $r1;
    }

    private int getHighlightColor()
    {
        androidx.draganddrop.DropAffordanceHighlighter$Builder r0;
        android.content.res.TypedArray r1;
        int i0, $i1, $i2;
        java.lang.Throwable r2, $r6;
        boolean $z0;
        android.view.View $r3;
        android.content.Context $r4;
        int[] $r5;

        r0 := @this: androidx.draganddrop.DropAffordanceHighlighter$Builder;

        $z0 = r0.<androidx.draganddrop.DropAffordanceHighlighter$Builder: boolean mHighlightColorHasBeenSupplied>;

        if $z0 == 0 goto label1;

        $i2 = r0.<androidx.draganddrop.DropAffordanceHighlighter$Builder: int mHighlightColor>;

        return $i2;

     label1:
        $r3 = r0.<androidx.draganddrop.DropAffordanceHighlighter$Builder: android.view.View mViewToHighlight>;

        $r4 = virtualinvoke $r3.<android.view.View: android.content.Context getContext()>();

        $r5 = newarray (int)[1];

        $i1 = <androidx.appcompat.R$attr: int colorAccent>;

        $r5[0] = $i1;

        r1 = virtualinvoke $r4.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int[])>($r5);

     label2:
        i0 = virtualinvoke r1.<android.content.res.TypedArray: int getColor(int,int)>(0, -16738680);

     label3:
        virtualinvoke r1.<android.content.res.TypedArray: void recycle()>();

        return i0;

     label4:
        $r6 := @caughtexception;

        r2 = $r6;

        virtualinvoke r1.<android.content.res.TypedArray: void recycle()>();

        throw r2;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

