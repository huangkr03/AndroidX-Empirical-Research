kotlin.coroutines.jvm.internal.ModuleNameRetriever
<kotlin.coroutines.jvm.internal.ModuleNameRetriever: kotlin.coroutines.jvm.internal.ModuleNameRetriever INSTANCE>
<kotlin.coroutines.jvm.internal.ModuleNameRetriever: kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache cache>
<kotlin.coroutines.jvm.internal.ModuleNameRetriever: kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache notOnJava9>
    static void <clinit>()
    {
        kotlin.coroutines.jvm.internal.ModuleNameRetriever $r0;
        kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache $r1;

        $r0 = new kotlin.coroutines.jvm.internal.ModuleNameRetriever;

        specialinvoke $r0.<kotlin.coroutines.jvm.internal.ModuleNameRetriever: void <init>()>();

        <kotlin.coroutines.jvm.internal.ModuleNameRetriever: kotlin.coroutines.jvm.internal.ModuleNameRetriever INSTANCE> = $r0;

        $r1 = new kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache;

        specialinvoke $r1.<kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache: void <init>(java.lang.reflect.Method,java.lang.reflect.Method,java.lang.reflect.Method)>(null, null, null);

        <kotlin.coroutines.jvm.internal.ModuleNameRetriever: kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache notOnJava9> = $r1;

        return;
    }

    private void <init>()
    {
        kotlin.coroutines.jvm.internal.ModuleNameRetriever $r0;

        $r0 := @this: kotlin.coroutines.jvm.internal.ModuleNameRetriever;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    private final kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache buildCache(kotlin.coroutines.jvm.internal.BaseContinuationImpl)
    {
        kotlin.coroutines.jvm.internal.ModuleNameRetriever $r0;
        kotlin.coroutines.jvm.internal.BaseContinuationImpl $r1;
        java.lang.Class $r2;
        java.lang.Class[] $r3;
        java.lang.reflect.Method $r4, $r6, $r7;
        java.lang.ClassLoader $r5;
        kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache $r8;
        java.lang.Throwable $r9;

        $r0 := @this: kotlin.coroutines.jvm.internal.ModuleNameRetriever;

        $r1 := @parameter0: kotlin.coroutines.jvm.internal.BaseContinuationImpl;

        $r2 = class "Ljava/lang/Class;";

        $r3 = newarray (java.lang.Class)[0];

     label1:
        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("getModule", $r3);

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r2 = virtualinvoke $r5.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("java.lang.Module");

     label2:
        $r3 = newarray (java.lang.Class)[0];

     label3:
        $r6 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("getDescriptor", $r3);

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r2 = virtualinvoke $r5.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("java.lang.module.ModuleDescriptor");

     label4:
        $r3 = newarray (java.lang.Class)[0];

     label5:
        $r7 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("name", $r3);

     label6:
        $r8 = new kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache;

     label7:
        specialinvoke $r8.<kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache: void <init>(java.lang.reflect.Method,java.lang.reflect.Method,java.lang.reflect.Method)>($r4, $r6, $r7);

     label8:
        <kotlin.coroutines.jvm.internal.ModuleNameRetriever: kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache cache> = $r8;

        return $r8;

     label9:
        $r9 := @caughtexception;

        $r8 = <kotlin.coroutines.jvm.internal.ModuleNameRetriever: kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache notOnJava9>;

        <kotlin.coroutines.jvm.internal.ModuleNameRetriever: kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache cache> = $r8;

        return $r8;

        catch java.lang.Exception from label1 to label2 with label9;
        catch java.lang.Exception from label3 to label4 with label9;
        catch java.lang.Exception from label5 to label6 with label9;
        catch java.lang.Exception from label7 to label8 with label9;
    }

    public final java.lang.String getModuleName(kotlin.coroutines.jvm.internal.BaseContinuationImpl)
    {
        kotlin.coroutines.jvm.internal.ModuleNameRetriever $r0;
        kotlin.coroutines.jvm.internal.BaseContinuationImpl $r1;
        kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache $r2, $r3;
        java.lang.reflect.Method $r4;
        java.lang.Class $r5;
        java.lang.Object[] $r6;
        java.lang.Object $r7;
        boolean $z0;
        java.lang.String $r8;

        $r0 := @this: kotlin.coroutines.jvm.internal.ModuleNameRetriever;

        $r1 := @parameter0: kotlin.coroutines.jvm.internal.BaseContinuationImpl;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "continuation");

        $r2 = <kotlin.coroutines.jvm.internal.ModuleNameRetriever: kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache cache>;

        if $r2 != null goto label01;

        $r2 = specialinvoke $r0.<kotlin.coroutines.jvm.internal.ModuleNameRetriever: kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache buildCache(kotlin.coroutines.jvm.internal.BaseContinuationImpl)>($r1);

     label01:
        $r3 = <kotlin.coroutines.jvm.internal.ModuleNameRetriever: kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache notOnJava9>;

        if $r2 != $r3 goto label02;

        return null;

     label02:
        $r4 = $r2.<kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache: java.lang.reflect.Method getModuleMethod>;

        if $r4 == null goto label03;

        $r5 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = newarray (java.lang.Object)[0];

        $r7 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r5, $r6);

        goto label04;

     label03:
        $r7 = null;

     label04:
        if $r7 != null goto label05;

        return null;

     label05:
        $r4 = $r2.<kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache: java.lang.reflect.Method getDescriptorMethod>;

        if $r4 == null goto label06;

        $r6 = newarray (java.lang.Object)[0];

        $r7 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r7, $r6);

        goto label07;

     label06:
        $r7 = null;

     label07:
        if $r7 != null goto label08;

        return null;

     label08:
        $r4 = $r2.<kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache: java.lang.reflect.Method nameMethod>;

        if $r4 == null goto label09;

        $r6 = newarray (java.lang.Object)[0];

        $r7 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r7, $r6);

        goto label10;

     label09:
        $r7 = null;

     label10:
        $z0 = $r7 instanceof java.lang.String;

        if $z0 == 0 goto label11;

        $r8 = (java.lang.String) $r7;

        return $r8;

     label11:
        return null;
    }

kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache
<kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache: java.lang.reflect.Method getDescriptorMethod>
<kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache: java.lang.reflect.Method getModuleMethod>
<kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache: java.lang.reflect.Method nameMethod>
    public void <init>(java.lang.reflect.Method, java.lang.reflect.Method, java.lang.reflect.Method)
    {
        kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache $r0;
        java.lang.reflect.Method $r1, $r2, $r3;

        $r0 := @this: kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache;

        $r1 := @parameter0: java.lang.reflect.Method;

        $r2 := @parameter1: java.lang.reflect.Method;

        $r3 := @parameter2: java.lang.reflect.Method;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache: java.lang.reflect.Method getModuleMethod> = $r1;

        $r0.<kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache: java.lang.reflect.Method getDescriptorMethod> = $r2;

        $r0.<kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache: java.lang.reflect.Method nameMethod> = $r3;

        return;
    }

