androidx.transition.TransitionUtils
<androidx.transition.TransitionUtils: int MAX_IMAGE_SIZE>
<androidx.transition.TransitionUtils: boolean HAS_IS_ATTACHED_TO_WINDOW>
<androidx.transition.TransitionUtils: boolean HAS_OVERLAY>
<androidx.transition.TransitionUtils: boolean HAS_PICTURE_BITMAP>
    static android.view.View copyViewImage(android.view.ViewGroup, android.view.View, android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1, r2, r15;
        android.graphics.Matrix r3, r12;
        android.graphics.RectF r4, r13;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        android.widget.ImageView r5, r14;
        android.graphics.Bitmap r6;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        android.content.Context $r10;
        android.widget.ImageView$ScaleType $r11;

        r0 := @parameter0: android.view.ViewGroup;

        r1 := @parameter1: android.view.View;

        r2 := @parameter2: android.view.View;

        r12 = new android.graphics.Matrix;

        specialinvoke r12.<android.graphics.Matrix: void <init>()>();

        r3 = r12;

        $i6 = virtualinvoke r2.<android.view.View: int getScrollX()>();

        $i7 = neg $i6;

        $f0 = (float) $i7;

        $i8 = virtualinvoke r2.<android.view.View: int getScrollY()>();

        $i9 = neg $i8;

        $f1 = (float) $i9;

        virtualinvoke r3.<android.graphics.Matrix: void setTranslate(float,float)>($f0, $f1);

        staticinvoke <androidx.transition.ViewUtils: void transformMatrixToGlobal(android.view.View,android.graphics.Matrix)>(r1, r3);

        r15 = (android.view.View) r0;

        staticinvoke <androidx.transition.ViewUtils: void transformMatrixToLocal(android.view.View,android.graphics.Matrix)>(r15, r3);

        r13 = new android.graphics.RectF;

        $i10 = virtualinvoke r1.<android.view.View: int getWidth()>();

        $f2 = (float) $i10;

        $i11 = virtualinvoke r1.<android.view.View: int getHeight()>();

        $f3 = (float) $i11;

        specialinvoke r13.<android.graphics.RectF: void <init>(float,float,float,float)>(0.0F, 0.0F, $f2, $f3);

        r4 = r13;

        virtualinvoke r3.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>(r4);

        $f4 = r4.<android.graphics.RectF: float left>;

        i0 = staticinvoke <java.lang.Math: int round(float)>($f4);

        $f5 = r4.<android.graphics.RectF: float top>;

        i1 = staticinvoke <java.lang.Math: int round(float)>($f5);

        $f6 = r4.<android.graphics.RectF: float right>;

        i2 = staticinvoke <java.lang.Math: int round(float)>($f6);

        $f7 = r4.<android.graphics.RectF: float bottom>;

        i3 = staticinvoke <java.lang.Math: int round(float)>($f7);

        r14 = new android.widget.ImageView;

        $r10 = virtualinvoke r1.<android.view.View: android.content.Context getContext()>();

        specialinvoke r14.<android.widget.ImageView: void <init>(android.content.Context)>($r10);

        r5 = r14;

        $r11 = <android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType CENTER_CROP>;

        virtualinvoke r5.<android.widget.ImageView: void setScaleType(android.widget.ImageView$ScaleType)>($r11);

        r6 = staticinvoke <androidx.transition.TransitionUtils: android.graphics.Bitmap createViewBitmap(android.view.View,android.graphics.Matrix,android.graphics.RectF,android.view.ViewGroup)>(r1, r3, r4, r0);

        if r6 == null goto label1;

        virtualinvoke r5.<android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>(r6);

     label1:
        $i12 = i2 - i0;

        i4 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>($i12, 1073741824);

        $i13 = i3 - i1;

        i5 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>($i13, 1073741824);

        virtualinvoke r5.<android.widget.ImageView: void measure(int,int)>(i4, i5);

        virtualinvoke r5.<android.widget.ImageView: void layout(int,int,int,int)>(i0, i1, i2, i3);

        return r5;
    }

    private static android.graphics.Bitmap createViewBitmap(android.view.View, android.graphics.Matrix, android.graphics.RectF, android.view.ViewGroup)
    {
        android.view.View r0;
        android.graphics.Matrix r1;
        android.graphics.RectF r2;
        android.view.ViewGroup r3, r11;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12;
        android.graphics.Canvas r4, $r7, r14;
        boolean $z0, $z1, $z4, $z5, $z6, z7, $z8, z9, $z10;
        android.view.ViewGroupOverlay $r5, $r10;
        int $i0, i1, i2, i3, i4, i5;
        android.graphics.Bitmap$Config $r6;
        android.graphics.Picture $r8, r13;
        android.view.ViewParent $r9;
        android.graphics.Bitmap r12;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: android.graphics.Matrix;

        r2 := @parameter2: android.graphics.RectF;

        r3 := @parameter3: android.view.ViewGroup;

        $z0 = <androidx.transition.TransitionUtils: boolean HAS_IS_ATTACHED_TO_WINDOW>;

        if $z0 == 0 goto label05;

        $z5 = virtualinvoke r0.<android.view.View: boolean isAttachedToWindow()>();

        if $z5 != 0 goto label01;

        $z6 = 1;

        goto label02;

     label01:
        $z6 = 0;

     label02:
        z7 = $z6;

        if r3 != null goto label03;

        $z8 = 0;

        goto label04;

     label03:
        $z8 = virtualinvoke r3.<android.view.ViewGroup: boolean isAttachedToWindow()>();

     label04:
        z9 = $z8;

        goto label06;

     label05:
        z7 = 0;

        z9 = 0;

     label06:
        r11 = null;

        i1 = 0;

        $z1 = <androidx.transition.TransitionUtils: boolean HAS_OVERLAY>;

        if $z1 == 0 goto label08;

        if z7 == 0 goto label08;

        if z9 != 0 goto label07;

        return null;

     label07:
        $r9 = virtualinvoke r0.<android.view.View: android.view.ViewParent getParent()>();

        r11 = (android.view.ViewGroup) $r9;

        i1 = virtualinvoke r11.<android.view.ViewGroup: int indexOfChild(android.view.View)>(r0);

        $r10 = virtualinvoke r3.<android.view.ViewGroup: android.view.ViewGroupOverlay getOverlay()>();

        virtualinvoke $r10.<android.view.ViewGroupOverlay: void add(android.view.View)>(r0);

     label08:
        r12 = null;

        $f11 = virtualinvoke r2.<android.graphics.RectF: float width()>();

        i2 = staticinvoke <java.lang.Math: int round(float)>($f11);

        $f12 = virtualinvoke r2.<android.graphics.RectF: float height()>();

        i3 = staticinvoke <java.lang.Math: int round(float)>($f12);

        if i2 <= 0 goto label10;

        if i3 <= 0 goto label10;

        $i0 = i2 * i3;

        $f1 = (float) $i0;

        $f2 = 1048576.0F / $f1;

        f0 = staticinvoke <java.lang.Math: float min(float,float)>(1.0F, $f2);

        $f3 = (float) i2;

        $f4 = $f3 * f0;

        i4 = staticinvoke <java.lang.Math: int round(float)>($f4);

        $f5 = (float) i3;

        $f6 = $f5 * f0;

        i5 = staticinvoke <java.lang.Math: int round(float)>($f6);

        $f7 = r2.<android.graphics.RectF: float left>;

        $f10 = neg $f7;

        $f8 = r2.<android.graphics.RectF: float top>;

        $f9 = neg $f8;

        virtualinvoke r1.<android.graphics.Matrix: boolean postTranslate(float,float)>($f10, $f9);

        virtualinvoke r1.<android.graphics.Matrix: boolean postScale(float,float)>(f0, f0);

        $z4 = <androidx.transition.TransitionUtils: boolean HAS_PICTURE_BITMAP>;

        if $z4 == 0 goto label09;

        $r8 = new android.graphics.Picture;

        specialinvoke $r8.<android.graphics.Picture: void <init>()>();

        r13 = $r8;

        r4 = virtualinvoke r13.<android.graphics.Picture: android.graphics.Canvas beginRecording(int,int)>(i4, i5);

        virtualinvoke r4.<android.graphics.Canvas: void concat(android.graphics.Matrix)>(r1);

        virtualinvoke r0.<android.view.View: void draw(android.graphics.Canvas)>(r4);

        virtualinvoke r13.<android.graphics.Picture: void endRecording()>();

        r12 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Picture)>(r13);

        goto label10;

     label09:
        $r6 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        r12 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>(i4, i5, $r6);

        $r7 = new android.graphics.Canvas;

        specialinvoke $r7.<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>(r12);

        r14 = $r7;

        virtualinvoke r14.<android.graphics.Canvas: void concat(android.graphics.Matrix)>(r1);

        virtualinvoke r0.<android.view.View: void draw(android.graphics.Canvas)>(r14);

     label10:
        $z10 = <androidx.transition.TransitionUtils: boolean HAS_OVERLAY>;

        if $z10 == 0 goto label11;

        if z7 == 0 goto label11;

        $r5 = virtualinvoke r3.<android.view.ViewGroup: android.view.ViewGroupOverlay getOverlay()>();

        virtualinvoke $r5.<android.view.ViewGroupOverlay: void remove(android.view.View)>(r0);

        virtualinvoke r11.<android.view.ViewGroup: void addView(android.view.View,int)>(r0, i1);

     label11:
        return r12;
    }

    static android.animation.Animator mergeAnimators(android.animation.Animator, android.animation.Animator)
    {
        android.animation.Animator r0, r1;
        android.animation.AnimatorSet r2, $r3;
        android.animation.Animator[] $r4;

        r0 := @parameter0: android.animation.Animator;

        r1 := @parameter1: android.animation.Animator;

        if r0 != null goto label1;

        return r1;

     label1:
        if r1 != null goto label2;

        return r0;

     label2:
        $r3 = new android.animation.AnimatorSet;

        specialinvoke $r3.<android.animation.AnimatorSet: void <init>()>();

        r2 = $r3;

        $r4 = newarray (android.animation.Animator)[2];

        $r4[0] = r0;

        $r4[1] = r1;

        virtualinvoke r2.<android.animation.AnimatorSet: void playTogether(android.animation.Animator[])>($r4);

        return r2;
    }

    private void <init>()
    {
        androidx.transition.TransitionUtils r0;

        r0 := @this: androidx.transition.TransitionUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        int $i0, $i1, $i2;
        boolean $z0, $z1, $z2;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 19 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        <androidx.transition.TransitionUtils: boolean HAS_IS_ATTACHED_TO_WINDOW> = $z0;

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 < 18 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        <androidx.transition.TransitionUtils: boolean HAS_OVERLAY> = $z1;

        $i2 = <android.os.Build$VERSION: int SDK_INT>;

        if $i2 < 28 goto label5;

        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        <androidx.transition.TransitionUtils: boolean HAS_PICTURE_BITMAP> = $z2;

        return;
    }

androidx.transition.TransitionUtils$MatrixEvaluator
<androidx.transition.TransitionUtils$MatrixEvaluator: float[] mTempStartValues>
<androidx.transition.TransitionUtils$MatrixEvaluator: float[] mTempEndValues>
<androidx.transition.TransitionUtils$MatrixEvaluator: android.graphics.Matrix mTempMatrix>
    void <init>()
    {
        androidx.transition.TransitionUtils$MatrixEvaluator r0;
        float[] $r1, $r2;
        android.graphics.Matrix $r3;

        r0 := @this: androidx.transition.TransitionUtils$MatrixEvaluator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (float)[9];

        r0.<androidx.transition.TransitionUtils$MatrixEvaluator: float[] mTempStartValues> = $r1;

        $r2 = newarray (float)[9];

        r0.<androidx.transition.TransitionUtils$MatrixEvaluator: float[] mTempEndValues> = $r2;

        $r3 = new android.graphics.Matrix;

        specialinvoke $r3.<android.graphics.Matrix: void <init>()>();

        r0.<androidx.transition.TransitionUtils$MatrixEvaluator: android.graphics.Matrix mTempMatrix> = $r3;

        return;
    }

    public android.graphics.Matrix evaluate(float, android.graphics.Matrix, android.graphics.Matrix)
    {
        androidx.transition.TransitionUtils$MatrixEvaluator r0;
        float f0, f1, $f2, $f3, $f4, $f5, $f6;
        android.graphics.Matrix r1, r2, $r6, $r7;
        float[] $r3, $r4, $r5, $r8, $r9, $r10, $r11;
        int i0;

        r0 := @this: androidx.transition.TransitionUtils$MatrixEvaluator;

        f0 := @parameter0: float;

        r1 := @parameter1: android.graphics.Matrix;

        r2 := @parameter2: android.graphics.Matrix;

        $r3 = r0.<androidx.transition.TransitionUtils$MatrixEvaluator: float[] mTempStartValues>;

        virtualinvoke r1.<android.graphics.Matrix: void getValues(float[])>($r3);

        $r4 = r0.<androidx.transition.TransitionUtils$MatrixEvaluator: float[] mTempEndValues>;

        virtualinvoke r2.<android.graphics.Matrix: void getValues(float[])>($r4);

        i0 = 0;

     label1:
        if i0 >= 9 goto label2;

        $r8 = r0.<androidx.transition.TransitionUtils$MatrixEvaluator: float[] mTempEndValues>;

        $f3 = $r8[i0];

        $r9 = r0.<androidx.transition.TransitionUtils$MatrixEvaluator: float[] mTempStartValues>;

        $f2 = $r9[i0];

        f1 = $f3 - $f2;

        $r11 = r0.<androidx.transition.TransitionUtils$MatrixEvaluator: float[] mTempEndValues>;

        $r10 = r0.<androidx.transition.TransitionUtils$MatrixEvaluator: float[] mTempStartValues>;

        $f5 = $r10[i0];

        $f4 = f0 * f1;

        $f6 = $f5 + $f4;

        $r11[i0] = $f6;

        i0 = i0 + 1;

        goto label1;

     label2:
        $r6 = r0.<androidx.transition.TransitionUtils$MatrixEvaluator: android.graphics.Matrix mTempMatrix>;

        $r5 = r0.<androidx.transition.TransitionUtils$MatrixEvaluator: float[] mTempEndValues>;

        virtualinvoke $r6.<android.graphics.Matrix: void setValues(float[])>($r5);

        $r7 = r0.<androidx.transition.TransitionUtils$MatrixEvaluator: android.graphics.Matrix mTempMatrix>;

        return $r7;
    }

    public volatile java.lang.Object evaluate(float, java.lang.Object, java.lang.Object)
    {
        androidx.transition.TransitionUtils$MatrixEvaluator r0;
        float f0;
        java.lang.Object r1, r2;
        android.graphics.Matrix $r3, $r4, $r5;

        r0 := @this: androidx.transition.TransitionUtils$MatrixEvaluator;

        f0 := @parameter0: float;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        $r4 = (android.graphics.Matrix) r1;

        $r3 = (android.graphics.Matrix) r2;

        $r5 = virtualinvoke r0.<androidx.transition.TransitionUtils$MatrixEvaluator: android.graphics.Matrix evaluate(float,android.graphics.Matrix,android.graphics.Matrix)>(f0, $r4, $r3);

        return $r5;
    }

