io.opencensus.trace.AutoValue_MessageEvent
<io.opencensus.trace.AutoValue_MessageEvent: long compressedMessageSize>
<io.opencensus.trace.AutoValue_MessageEvent: long messageId>
<io.opencensus.trace.AutoValue_MessageEvent: io.opencensus.trace.MessageEvent$Type type>
<io.opencensus.trace.AutoValue_MessageEvent: long uncompressedMessageSize>
    private void <init>(io.opencensus.trace.MessageEvent$Type, long, long, long)
    {
        io.opencensus.trace.AutoValue_MessageEvent $r0;
        io.opencensus.trace.MessageEvent$Type $r1;
        long $l0, $l1, $l2;

        $r0 := @this: io.opencensus.trace.AutoValue_MessageEvent;

        $r1 := @parameter0: io.opencensus.trace.MessageEvent$Type;

        $l0 := @parameter1: long;

        $l1 := @parameter2: long;

        $l2 := @parameter3: long;

        specialinvoke $r0.<io.opencensus.trace.MessageEvent: void <init>()>();

        $r0.<io.opencensus.trace.AutoValue_MessageEvent: io.opencensus.trace.MessageEvent$Type type> = $r1;

        $r0.<io.opencensus.trace.AutoValue_MessageEvent: long messageId> = $l0;

        $r0.<io.opencensus.trace.AutoValue_MessageEvent: long uncompressedMessageSize> = $l1;

        $r0.<io.opencensus.trace.AutoValue_MessageEvent: long compressedMessageSize> = $l2;

        return;
    }

    void <init>(io.opencensus.trace.MessageEvent$Type, long, long, long, io.opencensus.trace.AutoValue_MessageEvent$1)
    {
        io.opencensus.trace.AutoValue_MessageEvent $r0;
        io.opencensus.trace.MessageEvent$Type $r1;
        long $l0, $l1, $l2;
        io.opencensus.trace.AutoValue_MessageEvent$1 $r2;

        $r0 := @this: io.opencensus.trace.AutoValue_MessageEvent;

        $r1 := @parameter0: io.opencensus.trace.MessageEvent$Type;

        $l0 := @parameter1: long;

        $l1 := @parameter2: long;

        $l2 := @parameter3: long;

        $r2 := @parameter4: io.opencensus.trace.AutoValue_MessageEvent$1;

        specialinvoke $r0.<io.opencensus.trace.AutoValue_MessageEvent: void <init>(io.opencensus.trace.MessageEvent$Type,long,long,long)>($r1, $l0, $l1, $l2);

        return;
    }

    public boolean equals(java.lang.Object)
    {
        io.opencensus.trace.AutoValue_MessageEvent $r0;
        java.lang.Object $r1;
        boolean $z0, $z1;
        io.opencensus.trace.MessageEvent $r2;
        io.opencensus.trace.MessageEvent$Type $r3, $r4;
        long $l0, $l1;
        byte $b2;

        $r0 := @this: io.opencensus.trace.AutoValue_MessageEvent;

        $r1 := @parameter0: java.lang.Object;

        $z0 = 1;

        if $r1 != $r0 goto label1;

        return 1;

     label1:
        $z1 = $r1 instanceof io.opencensus.trace.MessageEvent;

        if $z1 == 0 goto label4;

        $r2 = (io.opencensus.trace.MessageEvent) $r1;

        $r3 = $r0.<io.opencensus.trace.AutoValue_MessageEvent: io.opencensus.trace.MessageEvent$Type type>;

        $r4 = virtualinvoke $r2.<io.opencensus.trace.MessageEvent: io.opencensus.trace.MessageEvent$Type getType()>();

        $z1 = virtualinvoke $r3.<io.opencensus.trace.MessageEvent$Type: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label2;

        $l0 = $r0.<io.opencensus.trace.AutoValue_MessageEvent: long messageId>;

        $l1 = virtualinvoke $r2.<io.opencensus.trace.MessageEvent: long getMessageId()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label2;

        $l0 = $r0.<io.opencensus.trace.AutoValue_MessageEvent: long uncompressedMessageSize>;

        $l1 = virtualinvoke $r2.<io.opencensus.trace.MessageEvent: long getUncompressedMessageSize()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label2;

        $l0 = $r0.<io.opencensus.trace.AutoValue_MessageEvent: long compressedMessageSize>;

        $l1 = virtualinvoke $r2.<io.opencensus.trace.MessageEvent: long getCompressedMessageSize()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label2;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;

     label4:
        return 0;
    }

    public long getCompressedMessageSize()
    {
        io.opencensus.trace.AutoValue_MessageEvent $r0;
        long l0;

        $r0 := @this: io.opencensus.trace.AutoValue_MessageEvent;

        l0 = $r0.<io.opencensus.trace.AutoValue_MessageEvent: long compressedMessageSize>;

        return l0;
    }

    public long getMessageId()
    {
        io.opencensus.trace.AutoValue_MessageEvent $r0;
        long l0;

        $r0 := @this: io.opencensus.trace.AutoValue_MessageEvent;

        l0 = $r0.<io.opencensus.trace.AutoValue_MessageEvent: long messageId>;

        return l0;
    }

    public io.opencensus.trace.MessageEvent$Type getType()
    {
        io.opencensus.trace.AutoValue_MessageEvent $r0;
        io.opencensus.trace.MessageEvent$Type r1;

        $r0 := @this: io.opencensus.trace.AutoValue_MessageEvent;

        r1 = $r0.<io.opencensus.trace.AutoValue_MessageEvent: io.opencensus.trace.MessageEvent$Type type>;

        return r1;
    }

    public long getUncompressedMessageSize()
    {
        io.opencensus.trace.AutoValue_MessageEvent $r0;
        long l0;

        $r0 := @this: io.opencensus.trace.AutoValue_MessageEvent;

        l0 = $r0.<io.opencensus.trace.AutoValue_MessageEvent: long uncompressedMessageSize>;

        return l0;
    }

    public int hashCode()
    {
        io.opencensus.trace.AutoValue_MessageEvent $r0;
        int $i0, $i3;
        io.opencensus.trace.MessageEvent$Type $r1;
        long $l1, $l2;

        $r0 := @this: io.opencensus.trace.AutoValue_MessageEvent;

        $r1 = $r0.<io.opencensus.trace.AutoValue_MessageEvent: io.opencensus.trace.MessageEvent$Type type>;

        $i0 = virtualinvoke $r1.<io.opencensus.trace.MessageEvent$Type: int hashCode()>();

        $i0 = $i0 ^ 1000003;

        $i0 = $i0 * 1000003;

        $l1 = $r0.<io.opencensus.trace.AutoValue_MessageEvent: long messageId>;

        $l2 = $l1 >>> 32;

        $l1 = $l1 ^ $l2;

        $i3 = (int) $l1;

        $i0 = $i0 ^ $i3;

        $i0 = $i0 * 1000003;

        $l1 = $r0.<io.opencensus.trace.AutoValue_MessageEvent: long uncompressedMessageSize>;

        $l2 = $l1 >>> 32;

        $l1 = $l1 ^ $l2;

        $i3 = (int) $l1;

        $i0 = $i0 ^ $i3;

        $i0 = $i0 * 1000003;

        $l1 = $r0.<io.opencensus.trace.AutoValue_MessageEvent: long compressedMessageSize>;

        $l2 = $l1 >>> 32;

        $l1 = $l1 ^ $l2;

        $i3 = (int) $l1;

        $i0 = $i0 ^ $i3;

        return $i0;
    }

    public java.lang.String toString()
    {
        io.opencensus.trace.AutoValue_MessageEvent $r0;
        java.lang.StringBuilder $r1;
        io.opencensus.trace.MessageEvent$Type $r2;
        long $l0;
        java.lang.String $r3;

        $r0 := @this: io.opencensus.trace.AutoValue_MessageEvent;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MessageEvent{type=");

        $r2 = $r0.<io.opencensus.trace.AutoValue_MessageEvent: io.opencensus.trace.MessageEvent$Type type>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", messageId=");

        $l0 = $r0.<io.opencensus.trace.AutoValue_MessageEvent: long messageId>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uncompressedMessageSize=");

        $l0 = $r0.<io.opencensus.trace.AutoValue_MessageEvent: long uncompressedMessageSize>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", compressedMessageSize=");

        $l0 = $r0.<io.opencensus.trace.AutoValue_MessageEvent: long compressedMessageSize>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

