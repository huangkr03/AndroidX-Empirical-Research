androidx.datastore.DataStoreSingletonDelegate
<androidx.datastore.DataStoreSingletonDelegate: java.lang.String fileName>
<androidx.datastore.DataStoreSingletonDelegate: androidx.datastore.core.Serializer serializer>
<androidx.datastore.DataStoreSingletonDelegate: androidx.datastore.core.handlers.ReplaceFileCorruptionHandler corruptionHandler>
<androidx.datastore.DataStoreSingletonDelegate: kotlin.jvm.functions.Function1 produceMigrations>
<androidx.datastore.DataStoreSingletonDelegate: kotlinx.coroutines.CoroutineScope scope>
<androidx.datastore.DataStoreSingletonDelegate: java.lang.Object lock>
<androidx.datastore.DataStoreSingletonDelegate: androidx.datastore.core.DataStore INSTANCE>
    public void <init>(java.lang.String, androidx.datastore.core.Serializer, androidx.datastore.core.handlers.ReplaceFileCorruptionHandler, kotlin.jvm.functions.Function1, kotlinx.coroutines.CoroutineScope)
    {
        androidx.datastore.DataStoreSingletonDelegate r0;
        java.lang.String r1;
        androidx.datastore.core.Serializer r2;
        androidx.datastore.core.handlers.ReplaceFileCorruptionHandler r3;
        kotlin.jvm.functions.Function1 r4;
        kotlinx.coroutines.CoroutineScope r5;
        java.lang.Object $r6;

        r0 := @this: androidx.datastore.DataStoreSingletonDelegate;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.datastore.core.Serializer;

        r3 := @parameter2: androidx.datastore.core.handlers.ReplaceFileCorruptionHandler;

        r4 := @parameter3: kotlin.jvm.functions.Function1;

        r5 := @parameter4: kotlinx.coroutines.CoroutineScope;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "fileName");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "serializer");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "produceMigrations");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r5, "scope");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.datastore.DataStoreSingletonDelegate: java.lang.String fileName> = r1;

        r0.<androidx.datastore.DataStoreSingletonDelegate: androidx.datastore.core.Serializer serializer> = r2;

        r0.<androidx.datastore.DataStoreSingletonDelegate: androidx.datastore.core.handlers.ReplaceFileCorruptionHandler corruptionHandler> = r3;

        r0.<androidx.datastore.DataStoreSingletonDelegate: kotlin.jvm.functions.Function1 produceMigrations> = r4;

        r0.<androidx.datastore.DataStoreSingletonDelegate: kotlinx.coroutines.CoroutineScope scope> = r5;

        $r6 = new java.lang.Object;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        r0.<androidx.datastore.DataStoreSingletonDelegate: java.lang.Object lock> = $r6;

        return;
    }

    public androidx.datastore.core.DataStore getValue(android.content.Context, kotlin.reflect.KProperty)
    {
        androidx.datastore.DataStoreSingletonDelegate r0;
        android.content.Context r1, r17;
        kotlin.reflect.KProperty r2;
        androidx.datastore.core.DataStore r3, $r9, $r15, r18, r19, $r20;
        java.lang.Object r4, $r11;
        boolean z0, z2;
        androidx.datastore.core.Serializer r5;
        androidx.datastore.core.handlers.ReplaceFileCorruptionHandler r6;
        java.util.List r7;
        kotlinx.coroutines.CoroutineScope r8;
        kotlin.jvm.functions.Function1 $r10;
        androidx.datastore.DataStoreSingletonDelegate$getValue$1$1 $r12;
        androidx.datastore.core.DataStoreFactory $r13;
        kotlin.jvm.functions.Function0 $r14;
        java.lang.Throwable $r16, r21;

        r0 := @this: androidx.datastore.DataStoreSingletonDelegate;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: kotlin.reflect.KProperty;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "thisRef");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "property");

        r3 = r0.<androidx.datastore.DataStoreSingletonDelegate: androidx.datastore.core.DataStore INSTANCE>;

        if r3 != null goto label6;

        r4 = r0.<androidx.datastore.DataStoreSingletonDelegate: java.lang.Object lock>;

        z0 = 0;

        z2 = 0;

        entermonitor r4;

     label1:
        $r9 = r0.<androidx.datastore.DataStoreSingletonDelegate: androidx.datastore.core.DataStore INSTANCE>;

        if $r9 != null goto label2;

        r17 = virtualinvoke r1.<android.content.Context: android.content.Context getApplicationContext()>();

        r5 = r0.<androidx.datastore.DataStoreSingletonDelegate: androidx.datastore.core.Serializer serializer>;

        r6 = r0.<androidx.datastore.DataStoreSingletonDelegate: androidx.datastore.core.handlers.ReplaceFileCorruptionHandler corruptionHandler>;

        $r10 = r0.<androidx.datastore.DataStoreSingletonDelegate: kotlin.jvm.functions.Function1 produceMigrations>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r17, "applicationContext");

        $r11 = interfaceinvoke $r10.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r17);

        r7 = (java.util.List) $r11;

        r8 = r0.<androidx.datastore.DataStoreSingletonDelegate: kotlinx.coroutines.CoroutineScope scope>;

        $r13 = <androidx.datastore.core.DataStoreFactory: androidx.datastore.core.DataStoreFactory INSTANCE>;

        $r12 = new androidx.datastore.DataStoreSingletonDelegate$getValue$1$1;

        specialinvoke $r12.<androidx.datastore.DataStoreSingletonDelegate$getValue$1$1: void <init>(android.content.Context,androidx.datastore.DataStoreSingletonDelegate)>(r17, r0);

        $r14 = (kotlin.jvm.functions.Function0) $r12;

        $r15 = virtualinvoke $r13.<androidx.datastore.core.DataStoreFactory: androidx.datastore.core.DataStore create(androidx.datastore.core.Serializer,androidx.datastore.core.handlers.ReplaceFileCorruptionHandler,java.util.List,kotlinx.coroutines.CoroutineScope,kotlin.jvm.functions.Function0)>(r5, r6, r7, r8, $r14);

        r0.<androidx.datastore.DataStoreSingletonDelegate: androidx.datastore.core.DataStore INSTANCE> = $r15;

     label2:
        r18 = r0.<androidx.datastore.DataStoreSingletonDelegate: androidx.datastore.core.DataStore INSTANCE>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>(r18);

        r19 = r18;

     label3:
        exitmonitor r4;

        $r20 = r19;

        goto label7;

     label4:
        $r16 := @caughtexception;

        r21 = $r16;

     label5:
        exitmonitor r4;

        throw r21;

     label6:
        $r20 = r3;

     label7:
        return $r20;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public volatile java.lang.Object getValue(java.lang.Object, kotlin.reflect.KProperty)
    {
        androidx.datastore.DataStoreSingletonDelegate r0;
        java.lang.Object r1;
        kotlin.reflect.KProperty r2;
        android.content.Context $r3;
        androidx.datastore.core.DataStore $r4;

        r0 := @this: androidx.datastore.DataStoreSingletonDelegate;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: kotlin.reflect.KProperty;

        $r3 = (android.content.Context) r1;

        $r4 = virtualinvoke r0.<androidx.datastore.DataStoreSingletonDelegate: androidx.datastore.core.DataStore getValue(android.content.Context,kotlin.reflect.KProperty)>($r3, r2);

        return $r4;
    }

    public static final java.lang.String access$getFileName$p(androidx.datastore.DataStoreSingletonDelegate)
    {
        androidx.datastore.DataStoreSingletonDelegate $r0;
        java.lang.String $r1;

        $r0 := @parameter0: androidx.datastore.DataStoreSingletonDelegate;

        $r1 = $r0.<androidx.datastore.DataStoreSingletonDelegate: java.lang.String fileName>;

        return $r1;
    }

androidx.datastore.DataStoreSingletonDelegate$getValue$1$1
<androidx.datastore.DataStoreSingletonDelegate$getValue$1$1: android.content.Context $applicationContext>
<androidx.datastore.DataStoreSingletonDelegate$getValue$1$1: androidx.datastore.DataStoreSingletonDelegate this$0>
    void <init>(android.content.Context, androidx.datastore.DataStoreSingletonDelegate)
    {
        androidx.datastore.DataStoreSingletonDelegate$getValue$1$1 r0;
        android.content.Context $r1;
        androidx.datastore.DataStoreSingletonDelegate $r2;

        r0 := @this: androidx.datastore.DataStoreSingletonDelegate$getValue$1$1;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: androidx.datastore.DataStoreSingletonDelegate;

        r0.<androidx.datastore.DataStoreSingletonDelegate$getValue$1$1: android.content.Context $applicationContext> = $r1;

        r0.<androidx.datastore.DataStoreSingletonDelegate$getValue$1$1: androidx.datastore.DataStoreSingletonDelegate this$0> = $r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final java.io.File invoke()
    {
        androidx.datastore.DataStoreSingletonDelegate$getValue$1$1 r0;
        android.content.Context r1;
        androidx.datastore.DataStoreSingletonDelegate $r2;
        java.lang.String $r3;
        java.io.File $r4;

        r0 := @this: androidx.datastore.DataStoreSingletonDelegate$getValue$1$1;

        r1 = r0.<androidx.datastore.DataStoreSingletonDelegate$getValue$1$1: android.content.Context $applicationContext>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r1, "applicationContext");

        $r2 = r0.<androidx.datastore.DataStoreSingletonDelegate$getValue$1$1: androidx.datastore.DataStoreSingletonDelegate this$0>;

        $r3 = staticinvoke <androidx.datastore.DataStoreSingletonDelegate: java.lang.String access$getFileName$p(androidx.datastore.DataStoreSingletonDelegate)>($r2);

        $r4 = staticinvoke <androidx.datastore.DataStoreFile: java.io.File dataStoreFile(android.content.Context,java.lang.String)>(r1, $r3);

        return $r4;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.datastore.DataStoreSingletonDelegate$getValue$1$1 r0;
        java.io.File $r1;

        r0 := @this: androidx.datastore.DataStoreSingletonDelegate$getValue$1$1;

        $r1 = virtualinvoke r0.<androidx.datastore.DataStoreSingletonDelegate$getValue$1$1: java.io.File invoke()>();

        return $r1;
    }

