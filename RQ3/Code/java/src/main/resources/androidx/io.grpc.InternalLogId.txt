io.grpc.InternalLogId
<io.grpc.InternalLogId: java.util.concurrent.atomic.AtomicLong idAlloc>
<io.grpc.InternalLogId: java.lang.String details>
<io.grpc.InternalLogId: long id>
<io.grpc.InternalLogId: java.lang.String typeName>
    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicLong $r0;

        $r0 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        <io.grpc.InternalLogId: java.util.concurrent.atomic.AtomicLong idAlloc> = $r0;

        return;
    }

    void <init>(java.lang.String, java.lang.String, long)
    {
        io.grpc.InternalLogId $r0;
        java.lang.String $r1, $r2;
        long $l0;
        boolean $z0;

        $r0 := @this: io.grpc.InternalLogId;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $l0 := @parameter2: long;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r1, "typeName");

        $z0 = virtualinvoke $r1.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "empty type");

        $r0.<io.grpc.InternalLogId: java.lang.String typeName> = $r1;

        $r0.<io.grpc.InternalLogId: java.lang.String details> = $r2;

        $r0.<io.grpc.InternalLogId: long id> = $l0;

        return;
    }

    public static io.grpc.InternalLogId allocate(java.lang.Class, java.lang.String)
    {
        java.lang.String $r0, $r2;
        java.lang.Class $r1;
        io.grpc.InternalLogId $r3;

        $r1 := @parameter0: java.lang.Class;

        $r0 := @parameter1: java.lang.String;

        $r2 = staticinvoke <io.grpc.InternalLogId: java.lang.String getClassName(java.lang.Class)>($r1);

        $r3 = staticinvoke <io.grpc.InternalLogId: io.grpc.InternalLogId allocate(java.lang.String,java.lang.String)>($r2, $r0);

        return $r3;
    }

    public static io.grpc.InternalLogId allocate(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;
        io.grpc.InternalLogId $r2;
        long $l0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 = new io.grpc.InternalLogId;

        $l0 = staticinvoke <io.grpc.InternalLogId: long getNextId()>();

        specialinvoke $r2.<io.grpc.InternalLogId: void <init>(java.lang.String,java.lang.String,long)>($r0, $r1, $l0);

        return $r2;
    }

    private static java.lang.String getClassName(java.lang.Class)
    {
        java.lang.Class $r0, $r2;
        java.lang.Object $r1;
        java.lang.String $r3, $r5;
        boolean $z0;
        java.lang.Package $r4;
        int $i0;

        $r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r0, "type");

        $r2 = (java.lang.Class) $r1;

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getSimpleName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        return $r3;

     label1:
        $r3 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r0.<java.lang.Class: java.lang.Package getPackage()>();

        $r5 = virtualinvoke $r4.<java.lang.Package: java.lang.String getName()>();

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i0 = $i0 + 1;

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>($i0);

        return $r3;
    }

    static long getNextId()
    {
        long $l0;
        java.util.concurrent.atomic.AtomicLong $r0;

        $r0 = <io.grpc.InternalLogId: java.util.concurrent.atomic.AtomicLong idAlloc>;

        $l0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        return $l0;
    }

    public long getId()
    {
        io.grpc.InternalLogId $r0;
        long l0;

        $r0 := @this: io.grpc.InternalLogId;

        l0 = $r0.<io.grpc.InternalLogId: long id>;

        return l0;
    }

    public java.lang.String shortName()
    {
        io.grpc.InternalLogId $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        long $l0;

        $r0 := @this: io.grpc.InternalLogId;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = $r0.<io.grpc.InternalLogId: java.lang.String typeName>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        $l0 = $r0.<io.grpc.InternalLogId: long id>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public java.lang.String toString()
    {
        io.grpc.InternalLogId $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $r0 := @this: io.grpc.InternalLogId;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<io.grpc.InternalLogId: java.lang.String shortName()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = $r0.<io.grpc.InternalLogId: java.lang.String details>;

        if $r2 == null goto label1;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": (");

        $r2 = $r0.<io.grpc.InternalLogId: java.lang.String details>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

     label1:
        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

