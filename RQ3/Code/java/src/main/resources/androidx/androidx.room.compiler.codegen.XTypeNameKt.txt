androidx.room.compiler.codegen.XTypeNameKt
    public static final androidx.room.compiler.codegen.XClassName asClassName(kotlin.reflect.KClass)
    {
        kotlin.reflect.KClass $r0;
        com.squareup.javapoet.ClassName r1, $r8;
        com.squareup.kotlinpoet.ClassName r2;
        java.lang.Class $r3, $r4, $r7;
        boolean $z0;
        androidx.room.compiler.codegen.XClassName $r5;
        androidx.room.compiler.processing.XNullability $r6;

        $r0 := @parameter0: kotlin.reflect.KClass;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r3 = staticinvoke <kotlin.jvm.JvmClassMappingKt: java.lang.Class getJavaClass(kotlin.reflect.KClass)>($r0);

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label1;

        $r7 = staticinvoke <kotlin.jvm.JvmClassMappingKt: java.lang.Class getJavaClass(kotlin.reflect.KClass)>($r0);

        $r8 = staticinvoke <androidx.room.compiler.codegen.XTypeNameKt: com.squareup.javapoet.ClassName getBoxedJClassName(java.lang.Class)>($r7);

        goto label2;

     label1:
        $r4 = staticinvoke <kotlin.jvm.JvmClassMappingKt: java.lang.Class getJavaClass(kotlin.reflect.KClass)>($r0);

        $r8 = staticinvoke <com.squareup.javapoet.ClassName: com.squareup.javapoet.ClassName get(java.lang.Class)>($r4);

     label2:
        r1 = $r8;

        r2 = staticinvoke <com.squareup.kotlinpoet.ClassNames: com.squareup.kotlinpoet.ClassName get(kotlin.reflect.KClass)>($r0);

        $r5 = new androidx.room.compiler.codegen.XClassName;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r1, "jClassName");

        $r6 = <androidx.room.compiler.processing.XNullability: androidx.room.compiler.processing.XNullability NONNULL>;

        specialinvoke $r5.<androidx.room.compiler.codegen.XClassName: void <init>(com.squareup.javapoet.ClassName,com.squareup.kotlinpoet.ClassName,androidx.room.compiler.processing.XNullability)>(r1, r2, $r6);

        return $r5;
    }

    private static final com.squareup.javapoet.ClassName getBoxedJClassName(java.lang.Class)
    {
        java.lang.Class r0, r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.IllegalStateException $r11;
        java.lang.StringBuilder $r12, $r13, $r14;
        java.lang.String $r15, $r16;
        com.squareup.javapoet.TypeName $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r34;
        com.squareup.javapoet.ClassName $r41;

        r0 := @parameter0: java.lang.Class;

        r1 = r0;

        $r2 = <java.lang.Void: java.lang.Class TYPE>;

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r2);

        if $z0 == 0 goto label01;

        $r31 = <com.squareup.javapoet.TypeName: com.squareup.javapoet.TypeName VOID>;

        $r32 = virtualinvoke $r31.<com.squareup.javapoet.TypeName: com.squareup.javapoet.TypeName box()>();

        $r34 = $r32;

        goto label10;

     label01:
        $r3 = <java.lang.Boolean: java.lang.Class TYPE>;

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r3);

        if $z1 == 0 goto label02;

        $r29 = <com.squareup.javapoet.TypeName: com.squareup.javapoet.TypeName BOOLEAN>;

        $r30 = virtualinvoke $r29.<com.squareup.javapoet.TypeName: com.squareup.javapoet.TypeName box()>();

        $r34 = $r30;

        goto label10;

     label02:
        $r4 = <java.lang.Byte: java.lang.Class TYPE>;

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r4);

        if $z2 == 0 goto label03;

        $r27 = <com.squareup.javapoet.TypeName: com.squareup.javapoet.TypeName BYTE>;

        $r28 = virtualinvoke $r27.<com.squareup.javapoet.TypeName: com.squareup.javapoet.TypeName box()>();

        $r34 = $r28;

        goto label10;

     label03:
        $r5 = <java.lang.Short: java.lang.Class TYPE>;

        $z3 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r5);

        if $z3 == 0 goto label04;

        $r25 = <com.squareup.javapoet.TypeName: com.squareup.javapoet.TypeName SHORT>;

        $r26 = virtualinvoke $r25.<com.squareup.javapoet.TypeName: com.squareup.javapoet.TypeName box()>();

        $r34 = $r26;

        goto label10;

     label04:
        $r6 = <java.lang.Integer: java.lang.Class TYPE>;

        $z4 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r6);

        if $z4 == 0 goto label05;

        $r23 = <com.squareup.javapoet.TypeName: com.squareup.javapoet.TypeName INT>;

        $r24 = virtualinvoke $r23.<com.squareup.javapoet.TypeName: com.squareup.javapoet.TypeName box()>();

        $r34 = $r24;

        goto label10;

     label05:
        $r7 = <java.lang.Long: java.lang.Class TYPE>;

        $z5 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r7);

        if $z5 == 0 goto label06;

        $r21 = <com.squareup.javapoet.TypeName: com.squareup.javapoet.TypeName LONG>;

        $r22 = virtualinvoke $r21.<com.squareup.javapoet.TypeName: com.squareup.javapoet.TypeName box()>();

        $r34 = $r22;

        goto label10;

     label06:
        $r8 = <java.lang.Character: java.lang.Class TYPE>;

        $z6 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r8);

        if $z6 == 0 goto label07;

        $r19 = <com.squareup.javapoet.TypeName: com.squareup.javapoet.TypeName CHAR>;

        $r20 = virtualinvoke $r19.<com.squareup.javapoet.TypeName: com.squareup.javapoet.TypeName box()>();

        $r34 = $r20;

        goto label10;

     label07:
        $r9 = <java.lang.Float: java.lang.Class TYPE>;

        $z7 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r9);

        if $z7 == 0 goto label08;

        $r18 = <com.squareup.javapoet.TypeName: com.squareup.javapoet.TypeName FLOAT>;

        $r34 = virtualinvoke $r18.<com.squareup.javapoet.TypeName: com.squareup.javapoet.TypeName box()>();

        goto label10;

     label08:
        $r10 = <java.lang.Double: java.lang.Class TYPE>;

        $z8 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r10);

        if $z8 == 0 goto label09;

        $r17 = <com.squareup.javapoet.TypeName: com.squareup.javapoet.TypeName DOUBLE>;

        $r34 = virtualinvoke $r17.<com.squareup.javapoet.TypeName: com.squareup.javapoet.TypeName box()>();

        goto label10;

     label09:
        $r11 = new java.lang.IllegalStateException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t get JTypeName from java.lang.Class: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = virtualinvoke $r15.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r16);

        throw $r11;

     label10:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r34, "null cannot be cast to non-null type com.squareup.javapoet.ClassName{ com.squareup.kotlinpoet.javapoet.TypeAliasesKt.JClassName }");

        $r41 = (com.squareup.javapoet.ClassName) $r34;

        return $r41;
    }

    public static final androidx.room.compiler.codegen.XTypeName asPrimitiveTypeName(kotlin.reflect.KClass)
    {
        kotlin.reflect.KClass $r0;
        com.squareup.javapoet.TypeName r1;
        java.lang.Class $r2, $r3;
        boolean $z0;
        com.squareup.kotlinpoet.TypeName $r4;
        androidx.room.compiler.codegen.XTypeName$Companion $r5;
        androidx.room.compiler.codegen.XTypeName $r6;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.IllegalArgumentException $r10;
        java.lang.String $r11, $r12;
        com.squareup.kotlinpoet.ClassName $r13;

        $r0 := @parameter0: kotlin.reflect.KClass;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r2 = staticinvoke <kotlin.jvm.JvmClassMappingKt: java.lang.Class getJavaClass(kotlin.reflect.KClass)>($r0);

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isPrimitive()>();

        if $z0 != 0 goto label1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not represent a primitive.");

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = virtualinvoke $r12.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r10;

     label1:
        $r3 = staticinvoke <kotlin.jvm.JvmClassMappingKt: java.lang.Class getJavaClass(kotlin.reflect.KClass)>($r0);

        r1 = staticinvoke <androidx.room.compiler.codegen.XTypeNameKt: com.squareup.javapoet.TypeName getPrimitiveJTypeName(java.lang.Class)>($r3);

        $r13 = staticinvoke <com.squareup.kotlinpoet.TypeNames: com.squareup.kotlinpoet.ClassName get(kotlin.reflect.KClass)>($r0);

        $r5 = <androidx.room.compiler.codegen.XTypeName: androidx.room.compiler.codegen.XTypeName$Companion Companion>;

        $r4 = (com.squareup.kotlinpoet.TypeName) $r13;

        $r6 = staticinvoke <androidx.room.compiler.codegen.XTypeName$Companion: androidx.room.compiler.codegen.XTypeName invoke$default(androidx.room.compiler.codegen.XTypeName$Companion,com.squareup.javapoet.TypeName,com.squareup.kotlinpoet.TypeName,androidx.room.compiler.processing.XNullability,int,java.lang.Object)>($r5, r1, $r4, null, 4, null);

        return $r6;
    }

    private static final com.squareup.javapoet.TypeName getPrimitiveJTypeName(java.lang.Class)
    {
        java.lang.Class r0, r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.IllegalStateException $r11;
        java.lang.StringBuilder $r12, $r13, $r14;
        java.lang.String $r15, $r16;
        com.squareup.javapoet.TypeName $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24;

        r0 := @parameter0: java.lang.Class;

        r1 = r0;

        $r2 = <java.lang.Void: java.lang.Class TYPE>;

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r2);

        if $z0 == 0 goto label01;

        $r23 = <com.squareup.javapoet.TypeName: com.squareup.javapoet.TypeName VOID>;

        $r24 = $r23;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r23, "VOID");

        goto label10;

     label01:
        $r3 = <java.lang.Boolean: java.lang.Class TYPE>;

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r3);

        if $z1 == 0 goto label02;

        $r22 = <com.squareup.javapoet.TypeName: com.squareup.javapoet.TypeName BOOLEAN>;

        $r24 = $r22;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r22, "BOOLEAN");

        goto label10;

     label02:
        $r4 = <java.lang.Byte: java.lang.Class TYPE>;

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r4);

        if $z2 == 0 goto label03;

        $r21 = <com.squareup.javapoet.TypeName: com.squareup.javapoet.TypeName BYTE>;

        $r24 = $r21;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r21, "BYTE");

        goto label10;

     label03:
        $r5 = <java.lang.Short: java.lang.Class TYPE>;

        $z3 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r5);

        if $z3 == 0 goto label04;

        $r20 = <com.squareup.javapoet.TypeName: com.squareup.javapoet.TypeName SHORT>;

        $r24 = $r20;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r20, "SHORT");

        goto label10;

     label04:
        $r6 = <java.lang.Integer: java.lang.Class TYPE>;

        $z4 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r6);

        if $z4 == 0 goto label05;

        $r19 = <com.squareup.javapoet.TypeName: com.squareup.javapoet.TypeName INT>;

        $r24 = $r19;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r19, "INT");

        goto label10;

     label05:
        $r7 = <java.lang.Long: java.lang.Class TYPE>;

        $z5 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r7);

        if $z5 == 0 goto label06;

        $r18 = <com.squareup.javapoet.TypeName: com.squareup.javapoet.TypeName LONG>;

        $r24 = $r18;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r18, "LONG");

        goto label10;

     label06:
        $r8 = <java.lang.Character: java.lang.Class TYPE>;

        $z6 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r8);

        if $z6 == 0 goto label07;

        $r17 = <com.squareup.javapoet.TypeName: com.squareup.javapoet.TypeName CHAR>;

        $r24 = $r17;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r17, "CHAR");

        goto label10;

     label07:
        $r9 = <java.lang.Float: java.lang.Class TYPE>;

        $z7 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r9);

        if $z7 == 0 goto label08;

        $r24 = <com.squareup.javapoet.TypeName: com.squareup.javapoet.TypeName FLOAT>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r24, "FLOAT");

        goto label10;

     label08:
        $r10 = <java.lang.Double: java.lang.Class TYPE>;

        $z8 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r10);

        if $z8 == 0 goto label09;

        $r24 = <com.squareup.javapoet.TypeName: com.squareup.javapoet.TypeName DOUBLE>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r24, "DOUBLE");

        goto label10;

     label09:
        $r11 = new java.lang.IllegalStateException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t get JTypeName from java.lang.Class: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = virtualinvoke $r15.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r16);

        throw $r11;

     label10:
        return $r24;
    }

    public static final com.squareup.javapoet.TypeName toJavaPoet(androidx.room.compiler.codegen.XTypeName)
    {
        androidx.room.compiler.codegen.XTypeName $r0;
        com.squareup.javapoet.TypeName $r1;

        $r0 := @parameter0: androidx.room.compiler.codegen.XTypeName;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = virtualinvoke $r0.<androidx.room.compiler.codegen.XTypeName: com.squareup.javapoet.TypeName getJava$room_compiler_processing()>();

        return $r1;
    }

    public static final com.squareup.javapoet.ClassName toJavaPoet(androidx.room.compiler.codegen.XClassName)
    {
        androidx.room.compiler.codegen.XClassName $r0;
        com.squareup.javapoet.ClassName $r1;

        $r0 := @parameter0: androidx.room.compiler.codegen.XClassName;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = virtualinvoke $r0.<androidx.room.compiler.codegen.XClassName: com.squareup.javapoet.ClassName getJava$room_compiler_processing()>();

        return $r1;
    }

