androidx.benchmark.BenchmarkState
<androidx.benchmark.BenchmarkState: androidx.benchmark.BenchmarkState$Companion Companion>
<androidx.benchmark.BenchmarkState: java.util.List stages>
<androidx.benchmark.BenchmarkState: androidx.benchmark.MetricsContainer metrics>
<androidx.benchmark.BenchmarkState: java.lang.String traceUniqueName>
<androidx.benchmark.BenchmarkState: int warmupRepeats>
<androidx.benchmark.BenchmarkState: int iterationsRemaining>
<androidx.benchmark.BenchmarkState: int iterationsPerRepeat>
<androidx.benchmark.BenchmarkState: int state>
<androidx.benchmark.BenchmarkState: androidx.benchmark.WarmupManager warmupManager>
<androidx.benchmark.BenchmarkState: boolean paused>
<androidx.benchmark.BenchmarkState: long thermalThrottleSleepSeconds>
<androidx.benchmark.BenchmarkState: long totalRunTimeStartNs>
<androidx.benchmark.BenchmarkState: long totalRunTimeNs>
<androidx.benchmark.BenchmarkState: int repeatCount>
<androidx.benchmark.BenchmarkState: boolean simplifiedTimingOnlyMode>
<androidx.benchmark.BenchmarkState: int throttleRemainingRetries>
<androidx.benchmark.BenchmarkState: java.util.List metricResults>
<androidx.benchmark.BenchmarkState: androidx.benchmark.Profiler profiler>
<androidx.benchmark.BenchmarkState: androidx.benchmark.Profiler$ResultFile profilerResult>
<androidx.benchmark.BenchmarkState: java.lang.String TAG>
<androidx.benchmark.BenchmarkState: int NOT_STARTED>
<androidx.benchmark.BenchmarkState: int RUNNING_WARMUP_STAGE>
<androidx.benchmark.BenchmarkState: int RUNNING_TIME_STAGE>
<androidx.benchmark.BenchmarkState: int RUNNING_ALLOCATION_STAGE>
<androidx.benchmark.BenchmarkState: int FINISHED>
<androidx.benchmark.BenchmarkState: int REPEAT_COUNT_TIME>
<androidx.benchmark.BenchmarkState: int REPEAT_COUNT_ALLOCATION>
<androidx.benchmark.BenchmarkState: java.lang.Integer OVERRIDE_ITERATIONS>
<androidx.benchmark.BenchmarkState: long REPEAT_DURATION_TARGET_NS>
<androidx.benchmark.BenchmarkState: int MAX_TEST_ITERATIONS>
<androidx.benchmark.BenchmarkState: int MIN_TEST_ITERATIONS>
<androidx.benchmark.BenchmarkState: int THROTTLE_MAX_RETRIES>
<androidx.benchmark.BenchmarkState: long THROTTLE_BACKOFF_S>
<androidx.benchmark.BenchmarkState: boolean firstBenchmark>
    public void <init>(boolean)
    {
        androidx.benchmark.BenchmarkState r0;
        boolean z0;
        androidx.benchmark.MetricsContainer[] r1;
        androidx.benchmark.MetricsContainer $r2, $r5, $r8, $r14;
        androidx.benchmark.TimeCapture $r3, $r6;
        androidx.benchmark.MetricCapture $r4, $r7, $r10;
        int $i0;
        androidx.benchmark.AllocationCountCapture $r9;
        java.util.List $r11, $r12, $r17;
        java.lang.Object $r13;
        androidx.benchmark.WarmupManager $r15;
        java.util.ArrayList $r16;
        androidx.benchmark.Arguments $r18;
        androidx.benchmark.MetricCapture[] r20, r21, r22;
        androidx.benchmark.Profiler $r23;

        r0 := @this: androidx.benchmark.BenchmarkState;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r1 = newarray (androidx.benchmark.MetricsContainer)[3];

        $r2 = new androidx.benchmark.MetricsContainer;

        r20 = newarray (androidx.benchmark.MetricCapture)[1];

        $r3 = new androidx.benchmark.TimeCapture;

        specialinvoke $r3.<androidx.benchmark.TimeCapture: void <init>()>();

        $r4 = (androidx.benchmark.MetricCapture) $r3;

        r20[0] = $r4;

        specialinvoke $r2.<androidx.benchmark.MetricsContainer: void <init>(androidx.benchmark.MetricCapture[],int)>(r20, 1);

        r1[0] = $r2;

        $r5 = new androidx.benchmark.MetricsContainer;

        r21 = newarray (androidx.benchmark.MetricCapture)[1];

        $r6 = new androidx.benchmark.TimeCapture;

        specialinvoke $r6.<androidx.benchmark.TimeCapture: void <init>()>();

        $r7 = (androidx.benchmark.MetricCapture) $r6;

        r21[0] = $r7;

        $i0 = <androidx.benchmark.BenchmarkState: int REPEAT_COUNT_TIME>;

        specialinvoke $r5.<androidx.benchmark.MetricsContainer: void <init>(androidx.benchmark.MetricCapture[],int)>(r21, $i0);

        r1[1] = $r5;

        $r8 = new androidx.benchmark.MetricsContainer;

        r22 = newarray (androidx.benchmark.MetricCapture)[1];

        $r9 = new androidx.benchmark.AllocationCountCapture;

        specialinvoke $r9.<androidx.benchmark.AllocationCountCapture: void <init>()>();

        $r10 = (androidx.benchmark.MetricCapture) $r9;

        r22[0] = $r10;

        specialinvoke $r8.<androidx.benchmark.MetricsContainer: void <init>(androidx.benchmark.MetricCapture[],int)>(r22, 5);

        r1[2] = $r8;

        $r11 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object[])>(r1);

        r0.<androidx.benchmark.BenchmarkState: java.util.List stages> = $r11;

        $r12 = r0.<androidx.benchmark.BenchmarkState: java.util.List stages>;

        $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(0);

        $r14 = (androidx.benchmark.MetricsContainer) $r13;

        r0.<androidx.benchmark.BenchmarkState: androidx.benchmark.MetricsContainer metrics> = $r14;

        r0.<androidx.benchmark.BenchmarkState: java.lang.String traceUniqueName> = "benchmark";

        r0.<androidx.benchmark.BenchmarkState: int iterationsRemaining> = -1;

        r0.<androidx.benchmark.BenchmarkState: int iterationsPerRepeat> = 1;

        r0.<androidx.benchmark.BenchmarkState: int state> = -1;

        $r15 = new androidx.benchmark.WarmupManager;

        specialinvoke $r15.<androidx.benchmark.WarmupManager: void <init>()>();

        r0.<androidx.benchmark.BenchmarkState: androidx.benchmark.WarmupManager warmupManager> = $r15;

        r0.<androidx.benchmark.BenchmarkState: int throttleRemainingRetries> = 2;

        $r16 = new java.util.ArrayList;

        specialinvoke $r16.<java.util.ArrayList: void <init>()>();

        $r17 = (java.util.List) $r16;

        r0.<androidx.benchmark.BenchmarkState: java.util.List metricResults> = $r17;

        r0.<androidx.benchmark.BenchmarkState: boolean simplifiedTimingOnlyMode> = z0;

        if z0 == 0 goto label1;

        $r23 = null;

        goto label2;

     label1:
        $r18 = <androidx.benchmark.Arguments: androidx.benchmark.Arguments INSTANCE>;

        $r23 = virtualinvoke $r18.<androidx.benchmark.Arguments: androidx.benchmark.Profiler getProfiler$benchmark_common_release()>();

     label2:
        r0.<androidx.benchmark.BenchmarkState: androidx.benchmark.Profiler profiler> = $r23;

        return;
    }

    public void <init>()
    {
        androidx.benchmark.BenchmarkState r0;
        androidx.benchmark.MetricsContainer[] r1;
        androidx.benchmark.MetricsContainer $r2, $r5, $r8, $r14;
        androidx.benchmark.TimeCapture $r3, $r6;
        androidx.benchmark.MetricCapture $r4, $r7, $r10;
        int $i0;
        androidx.benchmark.AllocationCountCapture $r9;
        java.util.List $r11, $r12, $r17;
        java.lang.Object $r13;
        androidx.benchmark.WarmupManager $r15;
        java.util.ArrayList $r16;
        androidx.benchmark.Arguments $r18;
        androidx.benchmark.Profiler $r19;
        androidx.benchmark.MetricCapture[] r20, r21, r22;

        r0 := @this: androidx.benchmark.BenchmarkState;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r1 = newarray (androidx.benchmark.MetricsContainer)[3];

        $r2 = new androidx.benchmark.MetricsContainer;

        r20 = newarray (androidx.benchmark.MetricCapture)[1];

        $r3 = new androidx.benchmark.TimeCapture;

        specialinvoke $r3.<androidx.benchmark.TimeCapture: void <init>()>();

        $r4 = (androidx.benchmark.MetricCapture) $r3;

        r20[0] = $r4;

        specialinvoke $r2.<androidx.benchmark.MetricsContainer: void <init>(androidx.benchmark.MetricCapture[],int)>(r20, 1);

        r1[0] = $r2;

        $r5 = new androidx.benchmark.MetricsContainer;

        r21 = newarray (androidx.benchmark.MetricCapture)[1];

        $r6 = new androidx.benchmark.TimeCapture;

        specialinvoke $r6.<androidx.benchmark.TimeCapture: void <init>()>();

        $r7 = (androidx.benchmark.MetricCapture) $r6;

        r21[0] = $r7;

        $i0 = <androidx.benchmark.BenchmarkState: int REPEAT_COUNT_TIME>;

        specialinvoke $r5.<androidx.benchmark.MetricsContainer: void <init>(androidx.benchmark.MetricCapture[],int)>(r21, $i0);

        r1[1] = $r5;

        $r8 = new androidx.benchmark.MetricsContainer;

        r22 = newarray (androidx.benchmark.MetricCapture)[1];

        $r9 = new androidx.benchmark.AllocationCountCapture;

        specialinvoke $r9.<androidx.benchmark.AllocationCountCapture: void <init>()>();

        $r10 = (androidx.benchmark.MetricCapture) $r9;

        r22[0] = $r10;

        specialinvoke $r8.<androidx.benchmark.MetricsContainer: void <init>(androidx.benchmark.MetricCapture[],int)>(r22, 5);

        r1[2] = $r8;

        $r11 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object[])>(r1);

        r0.<androidx.benchmark.BenchmarkState: java.util.List stages> = $r11;

        $r12 = r0.<androidx.benchmark.BenchmarkState: java.util.List stages>;

        $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(0);

        $r14 = (androidx.benchmark.MetricsContainer) $r13;

        r0.<androidx.benchmark.BenchmarkState: androidx.benchmark.MetricsContainer metrics> = $r14;

        r0.<androidx.benchmark.BenchmarkState: java.lang.String traceUniqueName> = "benchmark";

        r0.<androidx.benchmark.BenchmarkState: int iterationsRemaining> = -1;

        r0.<androidx.benchmark.BenchmarkState: int iterationsPerRepeat> = 1;

        r0.<androidx.benchmark.BenchmarkState: int state> = -1;

        $r15 = new androidx.benchmark.WarmupManager;

        specialinvoke $r15.<androidx.benchmark.WarmupManager: void <init>()>();

        r0.<androidx.benchmark.BenchmarkState: androidx.benchmark.WarmupManager warmupManager> = $r15;

        r0.<androidx.benchmark.BenchmarkState: int throttleRemainingRetries> = 2;

        $r16 = new java.util.ArrayList;

        specialinvoke $r16.<java.util.ArrayList: void <init>()>();

        $r17 = (java.util.List) $r16;

        r0.<androidx.benchmark.BenchmarkState: java.util.List metricResults> = $r17;

        r0.<androidx.benchmark.BenchmarkState: boolean simplifiedTimingOnlyMode> = 0;

        $r18 = <androidx.benchmark.Arguments: androidx.benchmark.Arguments INSTANCE>;

        $r19 = virtualinvoke $r18.<androidx.benchmark.Arguments: androidx.benchmark.Profiler getProfiler$benchmark_common_release()>();

        r0.<androidx.benchmark.BenchmarkState: androidx.benchmark.Profiler profiler> = $r19;

        return;
    }

    public final java.lang.String getTraceUniqueName()
    {
        androidx.benchmark.BenchmarkState r0;
        java.lang.String $r1;

        r0 := @this: androidx.benchmark.BenchmarkState;

        $r1 = r0.<androidx.benchmark.BenchmarkState: java.lang.String traceUniqueName>;

        return $r1;
    }

    public final void setTraceUniqueName(java.lang.String)
    {
        androidx.benchmark.BenchmarkState r0;
        java.lang.String r1;

        r0 := @this: androidx.benchmark.BenchmarkState;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<set-?>");

        r0.<androidx.benchmark.BenchmarkState: java.lang.String traceUniqueName> = r1;

        return;
    }

    public static void getIterationsRemaining$annotations()
    {
        return;
    }

    public final double getMinTimeNanos()
    {
        androidx.benchmark.BenchmarkState r0;
        java.lang.Iterable $r1;
        java.util.Iterator r2;
        java.lang.Object r3;
        androidx.benchmark.MetricResult r4, $r8;
        java.util.List $r5;
        boolean $z2, $z3;
        java.util.NoSuchElementException $r6;
        java.lang.String $r7;
        double $d0;

        r0 := @this: androidx.benchmark.BenchmarkState;

        specialinvoke r0.<androidx.benchmark.BenchmarkState: void checkState()>();

        $r5 = r0.<androidx.benchmark.BenchmarkState: java.util.List metricResults>;

        $r1 = (java.lang.Iterable) $r5;

        r2 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (androidx.benchmark.MetricResult) r3;

        $r7 = virtualinvoke r4.<androidx.benchmark.MetricResult: java.lang.String getName()>();

        $z3 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r7, "timeNs");

        if $z3 == 0 goto label1;

        goto label3;

     label2:
        $r6 = new java.util.NoSuchElementException;

        specialinvoke $r6.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Collection contains no element matching the predicate.");

        throw $r6;

     label3:
        $r8 = (androidx.benchmark.MetricResult) r3;

        $d0 = virtualinvoke $r8.<androidx.benchmark.MetricResult: double getMin()>();

        return $d0;
    }

    private final void checkState()
    {
        androidx.benchmark.BenchmarkState r0, r7, r8;
        java.lang.String r1, r2;
        int $i0, $i1;
        androidx.benchmark.ThreadPriority $r3, $r5;
        java.lang.IllegalStateException $r4, $r6;
        boolean $z0, z1, $z4, z5;

        r0 := @this: androidx.benchmark.BenchmarkState;

        r7 = r0;

        $i0 = r0.<androidx.benchmark.BenchmarkState: int state>;

        if $i0 == -1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        z1 = $z0;

        if z1 != 0 goto label3;

        $r5 = <androidx.benchmark.ThreadPriority: androidx.benchmark.ThreadPriority INSTANCE>;

        virtualinvoke $r5.<androidx.benchmark.ThreadPriority: void resetBumpedThread()>();

        r1 = "Attempting to interact with a benchmark that wasn\'t started!";

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>(r1);

        throw $r6;

     label3:
        r8 = r0;

        $i1 = r0.<androidx.benchmark.BenchmarkState: int state>;

        if $i1 != 3 goto label4;

        $z4 = 1;

        goto label5;

     label4:
        $z4 = 0;

     label5:
        z5 = $z4;

        if z5 != 0 goto label6;

        $r3 = <androidx.benchmark.ThreadPriority: androidx.benchmark.ThreadPriority INSTANCE>;

        virtualinvoke $r3.<androidx.benchmark.ThreadPriority: void resetBumpedThread()>();

        r2 = "The benchmark hasn\'t finished! In Java, use while(BenchmarkState.keepRunning()) to ensure keepRunning() returns false before ending your test. In Kotlin, just use benchmarkRule.measureRepeated {} to avoid the problem.";

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>(r2);

        throw $r4;

     label6:
        return;
    }

    public final void pauseTiming()
    {
        androidx.benchmark.BenchmarkState r0, r1;
        boolean z0, $z3, $z4;
        java.lang.String r2;
        int $i0;
        androidx.benchmark.MetricsContainer $r3;
        androidx.benchmark.ThreadPriority $r4;
        java.lang.IllegalStateException $r5;

        r0 := @this: androidx.benchmark.BenchmarkState;

        r1 = r0;

        $z3 = r0.<androidx.benchmark.BenchmarkState: boolean paused>;

        if $z3 != 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        z0 = $z4;

        if z0 != 0 goto label3;

        $r4 = <androidx.benchmark.ThreadPriority: androidx.benchmark.ThreadPriority INSTANCE>;

        virtualinvoke $r4.<androidx.benchmark.ThreadPriority: void resetBumpedThread()>();

        r2 = "Unable to pause the benchmark. The benchmark has already paused.";

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>(r2);

        throw $r5;

     label3:
        $i0 = r0.<androidx.benchmark.BenchmarkState: int state>;

        if $i0 == 0 goto label4;

        $r3 = r0.<androidx.benchmark.BenchmarkState: androidx.benchmark.MetricsContainer metrics>;

        virtualinvoke $r3.<androidx.benchmark.MetricsContainer: void capturePaused()>();

     label4:
        r0.<androidx.benchmark.BenchmarkState: boolean paused> = 1;

        return;
    }

    public final void resumeTiming()
    {
        androidx.benchmark.BenchmarkState r0, r1;
        boolean z0;
        java.lang.String r2;
        int $i0;
        androidx.benchmark.MetricsContainer $r3;
        androidx.benchmark.ThreadPriority $r4;
        java.lang.IllegalStateException $r5;

        r0 := @this: androidx.benchmark.BenchmarkState;

        r1 = r0;

        z0 = r0.<androidx.benchmark.BenchmarkState: boolean paused>;

        if z0 != 0 goto label1;

        $r4 = <androidx.benchmark.ThreadPriority: androidx.benchmark.ThreadPriority INSTANCE>;

        virtualinvoke $r4.<androidx.benchmark.ThreadPriority: void resetBumpedThread()>();

        r2 = "Unable to resume the benchmark. The benchmark is already running.";

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>(r2);

        throw $r5;

     label1:
        $i0 = r0.<androidx.benchmark.BenchmarkState: int state>;

        if $i0 == 0 goto label2;

        $r3 = r0.<androidx.benchmark.BenchmarkState: androidx.benchmark.MetricsContainer metrics>;

        virtualinvoke $r3.<androidx.benchmark.MetricsContainer: void captureResumed()>();

     label2:
        r0.<androidx.benchmark.BenchmarkState: boolean paused> = 0;

        return;
    }

    private final void beginRunningStage()
    {
        androidx.benchmark.BenchmarkState r0;
        int $i0, $i1, $i2;
        java.util.List $r1;
        java.lang.Object $r2;
        androidx.benchmark.MetricsContainer $r3, $r4, $r13;
        androidx.benchmark.UserspaceTracing $r5, $r8, $r11;
        androidx.benchmark.Profiler $r6;
        java.lang.String $r7;
        java.lang.Runtime $r10;
        androidx.benchmark.Profiler$ResultFile $r12;

        r0 := @this: androidx.benchmark.BenchmarkState;

        $r1 = r0.<androidx.benchmark.BenchmarkState: java.util.List stages>;

        $i0 = r0.<androidx.benchmark.BenchmarkState: int state>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r3 = (androidx.benchmark.MetricsContainer) $r2;

        r0.<androidx.benchmark.BenchmarkState: androidx.benchmark.MetricsContainer metrics> = $r3;

        r0.<androidx.benchmark.BenchmarkState: int repeatCount> = 0;

        $r4 = r0.<androidx.benchmark.BenchmarkState: androidx.benchmark.MetricsContainer metrics>;

        virtualinvoke $r4.<androidx.benchmark.MetricsContainer: void captureInit()>();

        $i1 = r0.<androidx.benchmark.BenchmarkState: int state>;

        tableswitch($i1)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label5;
            default: goto label6;
        };

     label1:
        $r10 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        virtualinvoke $r10.<java.lang.Runtime: void gc()>();

        r0.<androidx.benchmark.BenchmarkState: int iterationsPerRepeat> = 1;

        $r11 = <androidx.benchmark.UserspaceTracing: androidx.benchmark.UserspaceTracing INSTANCE>;

        staticinvoke <androidx.benchmark.UserspaceTracing: void beginSection$default(androidx.benchmark.UserspaceTracing,java.lang.String,long,int,java.lang.Object)>($r11, "Warmup", 0L, 2, null);

        goto label6;

     label2:
        $r6 = r0.<androidx.benchmark.BenchmarkState: androidx.benchmark.Profiler profiler>;

        if $r6 != null goto label3;

        $r12 = null;

        goto label4;

     label3:
        $r7 = r0.<androidx.benchmark.BenchmarkState: java.lang.String traceUniqueName>;

        $r12 = virtualinvoke $r6.<androidx.benchmark.Profiler: androidx.benchmark.Profiler$ResultFile start(java.lang.String)>($r7);

     label4:
        r0.<androidx.benchmark.BenchmarkState: androidx.benchmark.Profiler$ResultFile profilerResult> = $r12;

        $r8 = <androidx.benchmark.UserspaceTracing: androidx.benchmark.UserspaceTracing INSTANCE>;

        staticinvoke <androidx.benchmark.UserspaceTracing: void beginSection$default(androidx.benchmark.UserspaceTracing,java.lang.String,long,int,java.lang.Object)>($r8, "Benchmark Time", 0L, 2, null);

        goto label6;

     label5:
        $r5 = <androidx.benchmark.UserspaceTracing: androidx.benchmark.UserspaceTracing INSTANCE>;

        staticinvoke <androidx.benchmark.UserspaceTracing: void beginSection$default(androidx.benchmark.UserspaceTracing,java.lang.String,long,int,java.lang.Object)>($r5, "Benchmark Allocations", 0L, 2, null);

     label6:
        $i2 = r0.<androidx.benchmark.BenchmarkState: int iterationsPerRepeat>;

        r0.<androidx.benchmark.BenchmarkState: int iterationsRemaining> = $i2;

        $r13 = r0.<androidx.benchmark.BenchmarkState: androidx.benchmark.MetricsContainer metrics>;

        virtualinvoke $r13.<androidx.benchmark.MetricsContainer: void captureStart()>();

        return;
    }

    private final boolean endRunningStage()
    {
        androidx.benchmark.BenchmarkState r0;
        androidx.benchmark.Profiler r1, $r7, $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i9, $i10, i11, $i12;
        androidx.benchmark.MetricsContainer $r3, $r13;
        java.util.List $r4, $r5;
        java.util.Collection $r6;
        boolean $z2, $z3, $z4, $z5, $z6;
        androidx.benchmark.Arguments $r8, $r9;
        java.lang.String $r11;
        androidx.benchmark.UserspaceTracing $r14;

        r0 := @this: androidx.benchmark.BenchmarkState;

        $i0 = r0.<androidx.benchmark.BenchmarkState: int state>;

        if $i0 == 0 goto label03;

        $z5 = r0.<androidx.benchmark.BenchmarkState: boolean simplifiedTimingOnlyMode>;

        if $z5 != 0 goto label03;

        $i4 = r0.<androidx.benchmark.BenchmarkState: int throttleRemainingRetries>;

        if $i4 <= 0 goto label03;

        $z6 = specialinvoke r0.<androidx.benchmark.BenchmarkState: boolean sleepIfThermalThrottled(long)>(90L);

        if $z6 == 0 goto label03;

        $r10 = r0.<androidx.benchmark.BenchmarkState: androidx.benchmark.Profiler profiler>;

        if $r10 != null goto label01;

        goto label02;

     label01:
        r1 = $r10;

        virtualinvoke r1.<androidx.benchmark.Profiler: void stop()>();

        $r11 = virtualinvoke r0.<androidx.benchmark.BenchmarkState: java.lang.String getTraceUniqueName()>();

        virtualinvoke r1.<androidx.benchmark.Profiler: androidx.benchmark.Profiler$ResultFile start(java.lang.String)>($r11);

     label02:
        $i5 = r0.<androidx.benchmark.BenchmarkState: int throttleRemainingRetries>;

        $i6 = $i5 - 1;

        r0.<androidx.benchmark.BenchmarkState: int throttleRemainingRetries> = $i6;

        $r13 = r0.<androidx.benchmark.BenchmarkState: androidx.benchmark.MetricsContainer metrics>;

        virtualinvoke $r13.<androidx.benchmark.MetricsContainer: void captureInit()>();

        r0.<androidx.benchmark.BenchmarkState: int repeatCount> = 0;

        return 0;

     label03:
        $r14 = <androidx.benchmark.UserspaceTracing: androidx.benchmark.UserspaceTracing INSTANCE>;

        staticinvoke <androidx.benchmark.UserspaceTracing: void endSection$default(androidx.benchmark.UserspaceTracing,long,int,java.lang.Object)>($r14, 0L, 1, null);

        $i7 = r0.<androidx.benchmark.BenchmarkState: int state>;

        tableswitch($i7)
        {
            case 0: goto label04;
            case 1: goto label05;
            case 2: goto label05;
            default: goto label06;
        };

     label04:
        $i2 = r0.<androidx.benchmark.BenchmarkState: int repeatCount>;

        r0.<androidx.benchmark.BenchmarkState: int warmupRepeats> = $i2;

        $i3 = specialinvoke r0.<androidx.benchmark.BenchmarkState: int computeMaxIterations()>();

        r0.<androidx.benchmark.BenchmarkState: int iterationsPerRepeat> = $i3;

        goto label06;

     label05:
        $r4 = r0.<androidx.benchmark.BenchmarkState: java.util.List metricResults>;

        $r3 = r0.<androidx.benchmark.BenchmarkState: androidx.benchmark.MetricsContainer metrics>;

        $i1 = r0.<androidx.benchmark.BenchmarkState: int iterationsPerRepeat>;

        $r5 = virtualinvoke $r3.<androidx.benchmark.MetricsContainer: java.util.List captureFinished(int)>($i1);

        $r6 = (java.util.Collection) $r5;

        interfaceinvoke $r4.<java.util.List: boolean addAll(java.util.Collection)>($r6);

     label06:
        i8 = r0.<androidx.benchmark.BenchmarkState: int state>;

        $i9 = i8 + 1;

        r0.<androidx.benchmark.BenchmarkState: int state> = $i9;

        $i10 = r0.<androidx.benchmark.BenchmarkState: int state>;

        if $i10 != 2 goto label10;

        $r7 = r0.<androidx.benchmark.BenchmarkState: androidx.benchmark.Profiler profiler>;

        if $r7 != null goto label07;

        goto label08;

     label07:
        virtualinvoke $r7.<androidx.benchmark.Profiler: void stop()>();

     label08:
        $z2 = r0.<androidx.benchmark.BenchmarkState: boolean simplifiedTimingOnlyMode>;

        if $z2 != 0 goto label09;

        $r8 = <androidx.benchmark.Arguments: androidx.benchmark.Arguments INSTANCE>;

        $z3 = virtualinvoke $r8.<androidx.benchmark.Arguments: boolean getStartupMode$benchmark_common_release()>();

        if $z3 != 0 goto label09;

        $r9 = <androidx.benchmark.Arguments: androidx.benchmark.Arguments INSTANCE>;

        $z4 = virtualinvoke $r9.<androidx.benchmark.Arguments: boolean getDryRunMode$benchmark_common_release()>();

        if $z4 == 0 goto label10;

     label09:
        i11 = r0.<androidx.benchmark.BenchmarkState: int state>;

        $i12 = i11 + 1;

        r0.<androidx.benchmark.BenchmarkState: int state> = $i12;

     label10:
        return 1;
    }

    private final boolean startNextRepeat()
    {
        androidx.benchmark.BenchmarkState r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10;
        androidx.benchmark.MetricsContainer $r1, $r2, $r3, $r9;
        boolean $z0, $z1;
        androidx.benchmark.WarmupManager $r4;
        long[][] $r5;
        java.lang.Object[] $r6;
        java.lang.Object $r7;
        long[] $r8;
        long $l9;

        r0 := @this: androidx.benchmark.BenchmarkState;

        $r1 = r0.<androidx.benchmark.BenchmarkState: androidx.benchmark.MetricsContainer metrics>;

        virtualinvoke $r1.<androidx.benchmark.MetricsContainer: void captureStop()>();

        i0 = r0.<androidx.benchmark.BenchmarkState: int repeatCount>;

        $i1 = i0 + 1;

        r0.<androidx.benchmark.BenchmarkState: int repeatCount> = $i1;

        $i2 = r0.<androidx.benchmark.BenchmarkState: int state>;

        if $i2 != 0 goto label1;

        $r2 = r0.<androidx.benchmark.BenchmarkState: androidx.benchmark.MetricsContainer metrics>;

        virtualinvoke $r2.<androidx.benchmark.MetricsContainer: void captureInit()>();

        $r4 = r0.<androidx.benchmark.BenchmarkState: androidx.benchmark.WarmupManager warmupManager>;

        $r3 = r0.<androidx.benchmark.BenchmarkState: androidx.benchmark.MetricsContainer metrics>;

        $r5 = virtualinvoke $r3.<androidx.benchmark.MetricsContainer: long[][] getData$benchmark_common_release()>();

        $r6 = (java.lang.Object[]) $r5;

        $r7 = staticinvoke <kotlin.collections.ArraysKt: java.lang.Object last(java.lang.Object[])>($r6);

        $r8 = (long[]) $r7;

        $l9 = $r8[0];

        $z1 = virtualinvoke $r4.<androidx.benchmark.WarmupManager: boolean onNextIteration(long)>($l9);

        if $z1 == 0 goto label5;

        specialinvoke r0.<androidx.benchmark.BenchmarkState: boolean endRunningStage()>();

        specialinvoke r0.<androidx.benchmark.BenchmarkState: void beginRunningStage()>();

        goto label5;

     label1:
        $i3 = r0.<androidx.benchmark.BenchmarkState: int state>;

        if $i3 != 1 goto label2;

        $i8 = r0.<androidx.benchmark.BenchmarkState: int repeatCount>;

        $i7 = <androidx.benchmark.BenchmarkState: int REPEAT_COUNT_TIME>;

        if $i8 >= $i7 goto label3;

     label2:
        $i4 = r0.<androidx.benchmark.BenchmarkState: int state>;

        if $i4 != 2 goto label5;

        $i5 = r0.<androidx.benchmark.BenchmarkState: int repeatCount>;

        if $i5 < 5 goto label5;

     label3:
        $z0 = specialinvoke r0.<androidx.benchmark.BenchmarkState: boolean endRunningStage()>();

        if $z0 == 0 goto label5;

        $i6 = r0.<androidx.benchmark.BenchmarkState: int state>;

        if $i6 != 3 goto label4;

        specialinvoke r0.<androidx.benchmark.BenchmarkState: void afterBenchmark()>();

        return 0;

     label4:
        specialinvoke r0.<androidx.benchmark.BenchmarkState: void beginRunningStage()>();

     label5:
        $i10 = r0.<androidx.benchmark.BenchmarkState: int iterationsPerRepeat>;

        r0.<androidx.benchmark.BenchmarkState: int iterationsRemaining> = $i10;

        $r9 = r0.<androidx.benchmark.BenchmarkState: androidx.benchmark.MetricsContainer metrics>;

        virtualinvoke $r9.<androidx.benchmark.MetricsContainer: void captureStart()>();

        return 1;
    }

    public final boolean keepRunningInline()
    {
        androidx.benchmark.BenchmarkState r0;
        int i0, $i1, $i2;
        boolean $z1;

        r0 := @this: androidx.benchmark.BenchmarkState;

        $i1 = r0.<androidx.benchmark.BenchmarkState: int iterationsRemaining>;

        if $i1 <= 1 goto label1;

        i0 = r0.<androidx.benchmark.BenchmarkState: int iterationsRemaining>;

        $i2 = i0 + -1;

        r0.<androidx.benchmark.BenchmarkState: int iterationsRemaining> = $i2;

        return 1;

     label1:
        $z1 = virtualinvoke r0.<androidx.benchmark.BenchmarkState: boolean keepRunningInternal()>();

        return $z1;
    }

    public final boolean keepRunning()
    {
        androidx.benchmark.BenchmarkState r0;
        int i0, $i1, $i2;
        boolean $z0;

        r0 := @this: androidx.benchmark.BenchmarkState;

        $i1 = r0.<androidx.benchmark.BenchmarkState: int iterationsRemaining>;

        if $i1 <= 1 goto label1;

        i0 = r0.<androidx.benchmark.BenchmarkState: int iterationsRemaining>;

        $i2 = i0 + -1;

        r0.<androidx.benchmark.BenchmarkState: int iterationsRemaining> = $i2;

        return 1;

     label1:
        $z0 = virtualinvoke r0.<androidx.benchmark.BenchmarkState: boolean keepRunningInternal()>();

        return $z0;
    }

    private final void check(boolean, kotlin.jvm.functions.Function0)
    {
        androidx.benchmark.BenchmarkState r0;
        boolean z0;
        kotlin.jvm.functions.Function0 r1;
        androidx.benchmark.ThreadPriority $r2;
        java.lang.IllegalStateException $r3;
        java.lang.Object $r4;
        java.lang.String $r5;

        r0 := @this: androidx.benchmark.BenchmarkState;

        z0 := @parameter0: boolean;

        r1 := @parameter1: kotlin.jvm.functions.Function0;

        if z0 != 0 goto label1;

        $r2 = <androidx.benchmark.ThreadPriority: androidx.benchmark.ThreadPriority INSTANCE>;

        virtualinvoke $r2.<androidx.benchmark.ThreadPriority: void resetBumpedThread()>();

        $r3 = new java.lang.IllegalStateException;

        $r4 = interfaceinvoke r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        $r5 = (java.lang.String) $r4;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label1:
        return;
    }

    public final boolean keepRunningInternal()
    {
        androidx.benchmark.BenchmarkState r0;
        int i0, $i1, $i2, $i3;
        boolean $z0;
        java.lang.IllegalStateException $r1;

        r0 := @this: androidx.benchmark.BenchmarkState;

        $i1 = r0.<androidx.benchmark.BenchmarkState: int state>;

        tableswitch($i1)
        {
            case -1: goto label1;
            case 0: goto label2;
            case 1: goto label2;
            case 2: goto label2;
            default: goto label4;
        };

     label1:
        specialinvoke r0.<androidx.benchmark.BenchmarkState: void beforeBenchmark()>();

        specialinvoke r0.<androidx.benchmark.BenchmarkState: void beginRunningStage()>();

        return 1;

     label2:
        i0 = r0.<androidx.benchmark.BenchmarkState: int iterationsRemaining>;

        $i2 = i0 + -1;

        r0.<androidx.benchmark.BenchmarkState: int iterationsRemaining> = $i2;

        $i3 = r0.<androidx.benchmark.BenchmarkState: int iterationsRemaining>;

        if $i3 > 0 goto label3;

        specialinvoke r0.<androidx.benchmark.BenchmarkState: void throwIfPaused()>();

        $z0 = specialinvoke r0.<androidx.benchmark.BenchmarkState: boolean startNextRepeat()>();

        return $z0;

     label3:
        return 1;

     label4:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The benchmark is in an invalid state.");

        throw $r1;
    }

    private final void beforeBenchmark()
    {
        androidx.benchmark.BenchmarkState r0;
        androidx.benchmark.Errors $r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        androidx.benchmark.BenchmarkState$Companion $r2;
        long $l0;
        androidx.benchmark.Arguments $r3, $r4, $r7;
        androidx.benchmark.ThrottleDetector $r5;
        androidx.benchmark.ThreadPriority $r6;
        java.lang.AssertionError $r8;

        r0 := @this: androidx.benchmark.BenchmarkState;

        $r1 = <androidx.benchmark.Errors: androidx.benchmark.Errors INSTANCE>;

        virtualinvoke $r1.<androidx.benchmark.Errors: void throwIfError()>();

        $z0 = <androidx.benchmark.BenchmarkState: boolean firstBenchmark>;

        if $z0 != 0 goto label1;

        $r7 = <androidx.benchmark.Arguments: androidx.benchmark.Arguments INSTANCE>;

        $z4 = virtualinvoke $r7.<androidx.benchmark.Arguments: boolean getStartupMode$benchmark_common_release()>();

        if $z4 == 0 goto label1;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>(java.lang.Object)>("Error - multiple benchmarks in startup mode. Only one benchmark may be run per \'am instrument\' call, to ensure result isolation.");

        throw $r8;

     label1:
        $r2 = <androidx.benchmark.BenchmarkState: androidx.benchmark.BenchmarkState$Companion Companion>;

        <androidx.benchmark.BenchmarkState: boolean firstBenchmark> = 0;

        r0.<androidx.benchmark.BenchmarkState: long thermalThrottleSleepSeconds> = 0L;

        $z1 = r0.<androidx.benchmark.BenchmarkState: boolean simplifiedTimingOnlyMode>;

        if $z1 != 0 goto label2;

        $r5 = <androidx.benchmark.ThrottleDetector: androidx.benchmark.ThrottleDetector INSTANCE>;

        virtualinvoke $r5.<androidx.benchmark.ThrottleDetector: void computeThrottleBaselineIfNeeded()>();

        $r6 = <androidx.benchmark.ThreadPriority: androidx.benchmark.ThreadPriority INSTANCE>;

        virtualinvoke $r6.<androidx.benchmark.ThreadPriority: void bumpCurrentThreadPriority()>();

     label2:
        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

        r0.<androidx.benchmark.BenchmarkState: long totalRunTimeStartNs> = $l0;

        r0.<androidx.benchmark.BenchmarkState: int state> = 0;

        $r3 = <androidx.benchmark.Arguments: androidx.benchmark.Arguments INSTANCE>;

        $z2 = virtualinvoke $r3.<androidx.benchmark.Arguments: boolean getDryRunMode$benchmark_common_release()>();

        if $z2 != 0 goto label3;

        $r4 = <androidx.benchmark.Arguments: androidx.benchmark.Arguments INSTANCE>;

        $z3 = virtualinvoke $r4.<androidx.benchmark.Arguments: boolean getStartupMode$benchmark_common_release()>();

        if $z3 == 0 goto label4;

     label3:
        r0.<androidx.benchmark.BenchmarkState: int state> = 1;

     label4:
        return;
    }

    private final void afterBenchmark()
    {
        androidx.benchmark.BenchmarkState r0;
        long $l0, $l1, $l2;
        boolean $z0;
        androidx.benchmark.WarmupManager $r1;
        int $i3;
        androidx.benchmark.ThrottleDetector $r2;
        androidx.benchmark.ThreadPriority $r3;

        r0 := @this: androidx.benchmark.BenchmarkState;

        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

        $l1 = r0.<androidx.benchmark.BenchmarkState: long totalRunTimeStartNs>;

        $l2 = $l0 - $l1;

        r0.<androidx.benchmark.BenchmarkState: long totalRunTimeNs> = $l2;

        $z0 = r0.<androidx.benchmark.BenchmarkState: boolean simplifiedTimingOnlyMode>;

        if $z0 != 0 goto label1;

        $r3 = <androidx.benchmark.ThreadPriority: androidx.benchmark.ThreadPriority INSTANCE>;

        virtualinvoke $r3.<androidx.benchmark.ThreadPriority: void resetBumpedThread()>();

     label1:
        $r1 = r0.<androidx.benchmark.BenchmarkState: androidx.benchmark.WarmupManager warmupManager>;

        virtualinvoke $r1.<androidx.benchmark.WarmupManager: void logInfo()>();

        $i3 = r0.<androidx.benchmark.BenchmarkState: int throttleRemainingRetries>;

        if $i3 != 0 goto label2;

        $r2 = <androidx.benchmark.ThrottleDetector: androidx.benchmark.ThrottleDetector INSTANCE>;

        virtualinvoke $r2.<androidx.benchmark.ThrottleDetector: void resetThrottleBaseline()>();

     label2:
        return;
    }

    private final int computeMaxIterations()
    {
        androidx.benchmark.BenchmarkState r0;
        java.lang.Integer r1;
        long $l0;
        androidx.benchmark.WarmupManager $r2;
        float $f0, $f1, $f2;
        int $i1, $i2;

        r0 := @this: androidx.benchmark.BenchmarkState;

        r1 = <androidx.benchmark.BenchmarkState: java.lang.Integer OVERRIDE_ITERATIONS>;

        if r1 != null goto label1;

        $l0 = <androidx.benchmark.BenchmarkState: long REPEAT_DURATION_TARGET_NS>;

        $f0 = (float) $l0;

        $r2 = r0.<androidx.benchmark.BenchmarkState: androidx.benchmark.WarmupManager warmupManager>;

        $f1 = virtualinvoke $r2.<androidx.benchmark.WarmupManager: float getEstimatedIterationTimeNs()>();

        $f2 = $f0 / $f1;

        $i1 = (int) $f2;

        $i2 = staticinvoke <kotlin.ranges.RangesKt: int coerceIn(int,int,int)>($i1, 1, 1000000);

        goto label2;

     label1:
        $i2 = virtualinvoke r1.<java.lang.Integer: int intValue()>();

     label2:
        return $i2;
    }

    private final void throwIfPaused()
    {
        androidx.benchmark.BenchmarkState r0, r1;
        boolean z0, $z3, $z4;
        java.lang.String r2;
        androidx.benchmark.ThreadPriority $r3;
        java.lang.IllegalStateException $r4;

        r0 := @this: androidx.benchmark.BenchmarkState;

        r1 = r0;

        $z3 = r0.<androidx.benchmark.BenchmarkState: boolean paused>;

        if $z3 != 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        z0 = $z4;

        if z0 != 0 goto label3;

        $r3 = <androidx.benchmark.ThreadPriority: androidx.benchmark.ThreadPriority INSTANCE>;

        virtualinvoke $r3.<androidx.benchmark.ThreadPriority: void resetBumpedThread()>();

        r2 = "Benchmark loop finished in paused state. Call BenchmarkState.resumeTiming() before BenchmarkState.keepRunning().";

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>(r2);

        throw $r4;

     label3:
        return;
    }

    private final androidx.benchmark.BenchmarkResult getReport(java.lang.String, java.lang.String)
    {
        androidx.benchmark.BenchmarkState r0;
        java.lang.String r1, r2;
        androidx.benchmark.BenchmarkResult $r3;
        int $i0, $i2;
        long $l1, $l3;
        java.util.List $r4;

        r0 := @this: androidx.benchmark.BenchmarkState;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = new androidx.benchmark.BenchmarkResult;

        $l3 = r0.<androidx.benchmark.BenchmarkState: long totalRunTimeNs>;

        $r4 = r0.<androidx.benchmark.BenchmarkState: java.util.List metricResults>;

        $i2 = r0.<androidx.benchmark.BenchmarkState: int iterationsPerRepeat>;

        $l1 = r0.<androidx.benchmark.BenchmarkState: long thermalThrottleSleepSeconds>;

        $i0 = r0.<androidx.benchmark.BenchmarkState: int warmupRepeats>;

        specialinvoke $r3.<androidx.benchmark.BenchmarkResult: void <init>(java.lang.String,java.lang.String,long,java.util.List,int,long,int)>(r2, r1, $l3, $r4, $i2, $l1, $i0);

        return $r3;
    }

    public final androidx.benchmark.BenchmarkResult getReport$benchmark_common_release()
    {
        androidx.benchmark.BenchmarkState r0;
        kotlin.Unit $r1;
        androidx.benchmark.BenchmarkResult $r2;

        r0 := @this: androidx.benchmark.BenchmarkState;

        specialinvoke r0.<androidx.benchmark.BenchmarkState: void checkState()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r2 = specialinvoke r0.<androidx.benchmark.BenchmarkState: androidx.benchmark.BenchmarkResult getReport(java.lang.String,java.lang.String)>("", "");

        return $r2;
    }

    public final android.os.Bundle getFullStatusReport$benchmark_common_release(java.lang.String, boolean, java.lang.String)
    {
        androidx.benchmark.BenchmarkState r0;
        java.lang.String r1, r2, r4, r6, $r14, $r21, $r23, $r26, $r27, r30, $r49, $r51, $r53, r54, r56;
        boolean z0, $z2, $z3, $z4, z10, z11, $z12, z13;
        androidx.benchmark.MetricResult r3, $r17, r34, r41;
        double d0, $d1, $d2, $d3;
        java.lang.Double r5, $r46, r47, $r52;
        java.lang.StringBuilder $r7, $r8, $r11, $r12, $r13, r29;
        java.util.List $r9, $r16, $r24, r36;
        java.util.ArrayList $r10;
        int $i0, $i1;
        android.os.Bundle $r15;
        androidx.benchmark.InstrumentationResults $r18, $r50, r55;
        androidx.benchmark.Outputs $r19;
        androidx.benchmark.Profiler$ResultFile $r20;
        androidx.benchmark.Errors $r25;
        java.lang.Iterable $r28, $r38, r42;
        java.util.Collection r31, r35;
        java.util.Iterator r32, r39, r43;
        java.lang.Object r33, $r40, $r44, $r45;
        androidx.benchmark.InstrumentationResultScope $r48, r57;

        r0 := @this: androidx.benchmark.BenchmarkState;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "key");

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = r0.<androidx.benchmark.BenchmarkState: java.util.List metricResults>;

        $r28 = (java.lang.Iterable) $r9;

        r29 = $r8;

        r30 = "Benchmark";

        $r10 = new java.util.ArrayList;

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r28, 10);

        specialinvoke $r10.<java.util.ArrayList: void <init>(int)>($i0);

        r31 = (java.util.Collection) $r10;

        r32 = interfaceinvoke $r28.<java.lang.Iterable: java.util.Iterator iterator()>();

     label01:
        $z2 = interfaceinvoke r32.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label02;

        r33 = interfaceinvoke r32.<java.util.Iterator: java.lang.Object next()>();

        r34 = (androidx.benchmark.MetricResult) r33;

        r35 = r31;

        $r27 = virtualinvoke r34.<androidx.benchmark.MetricResult: java.lang.String getSummary$benchmark_common_release()>();

        interfaceinvoke r35.<java.util.Collection: boolean add(java.lang.Object)>($r27);

        goto label01;

     label02:
        r36 = (java.util.List) r31;

        $r11 = virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r36);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("count=");

        $i1 = r0.<androidx.benchmark.BenchmarkState: int iterationsPerRepeat>;

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>(r30, $r14);

        $r15 = new android.os.Bundle;

        specialinvoke $r15.<android.os.Bundle: void <init>()>();

        if z0 == 0 goto label04;

        $r24 = r0.<androidx.benchmark.BenchmarkState: java.util.List metricResults>;

        $r38 = (java.lang.Iterable) $r24;

        r39 = interfaceinvoke $r38.<java.lang.Iterable: java.util.Iterator iterator()>();

     label03:
        $z4 = interfaceinvoke r39.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label04;

        $r40 = interfaceinvoke r39.<java.util.Iterator: java.lang.Object next()>();

        r41 = (androidx.benchmark.MetricResult) $r40;

        z10 = 0;

        $r25 = <androidx.benchmark.Errors: androidx.benchmark.Errors INSTANCE>;

        $r26 = virtualinvoke $r25.<androidx.benchmark.Errors: java.lang.String getPREFIX()>();

        virtualinvoke r41.<androidx.benchmark.MetricResult: void putInBundle(android.os.Bundle,java.lang.String)>($r15, $r26);

        goto label03;

     label04:
        $d2 = virtualinvoke r0.<androidx.benchmark.BenchmarkState: double getMinTimeNanos()>();

        $r16 = r0.<androidx.benchmark.BenchmarkState: java.util.List metricResults>;

        r42 = (java.lang.Iterable) $r16;

        z11 = 0;

        r43 = interfaceinvoke r42.<java.lang.Iterable: java.util.Iterator iterator()>();

     label05:
        $z12 = interfaceinvoke r43.<java.util.Iterator: boolean hasNext()>();

        if $z12 == 0 goto label06;

        $r44 = interfaceinvoke r43.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.benchmark.MetricResult) $r44;

        $r23 = virtualinvoke r3.<androidx.benchmark.MetricResult: java.lang.String getName()>();

        $z3 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r23, "allocationCount");

        if $z3 == 0 goto label05;

        $r45 = $r44;

        goto label07;

     label06:
        $r45 = null;

     label07:
        $r17 = (androidx.benchmark.MetricResult) $r45;

        if $r17 != null goto label08;

        $r46 = null;

        goto label09;

     label08:
        $d1 = virtualinvoke $r17.<androidx.benchmark.MetricResult: double getMedian()>();

        $r46 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

     label09:
        r47 = $r46;

        $r48 = new androidx.benchmark.InstrumentationResultScope;

        specialinvoke $r48.<androidx.benchmark.InstrumentationResultScope: void <init>(android.os.Bundle)>($r15);

        $r18 = <androidx.benchmark.InstrumentationResults: androidx.benchmark.InstrumentationResults INSTANCE>;

        $r49 = virtualinvoke $r18.<androidx.benchmark.InstrumentationResults: java.lang.String ideSummaryLineWrapped$benchmark_common_release(java.lang.String,double,java.lang.Double,java.lang.String,androidx.benchmark.Profiler$ResultFile)>(r1, $d2, r47, null, null);

        $r50 = <androidx.benchmark.InstrumentationResults: androidx.benchmark.InstrumentationResults INSTANCE>;

        $r51 = r1;

        $d3 = $d2;

        $r52 = r47;

        if r2 != null goto label10;

        $r53 = null;

        goto label11;

     label10:
        r54 = r2;

        r5 = r47;

        d0 = $d2;

        r4 = r1;

        r55 = $r50;

        r56 = $r49;

        r57 = $r48;

        z13 = 0;

        $r19 = <androidx.benchmark.Outputs: androidx.benchmark.Outputs INSTANCE>;

        r6 = virtualinvoke $r19.<androidx.benchmark.Outputs: java.lang.String relativePathFor(java.lang.String)>(r54);

        $r48 = r57;

        $r49 = r56;

        $r50 = r55;

        $r51 = r4;

        $d3 = d0;

        $r52 = r5;

        $r53 = r6;

     label11:
        $r20 = r0.<androidx.benchmark.BenchmarkState: androidx.benchmark.Profiler$ResultFile profilerResult>;

        $r21 = virtualinvoke $r50.<androidx.benchmark.InstrumentationResults: java.lang.String ideSummaryLineWrapped$benchmark_common_release(java.lang.String,double,java.lang.Double,java.lang.String,androidx.benchmark.Profiler$ResultFile)>($r51, $d3, $r52, $r53, $r20);

        virtualinvoke $r48.<androidx.benchmark.InstrumentationResultScope: void ideSummaryRecord(java.lang.String,java.lang.String)>($r49, $r21);

        return $r15;
    }

    private final boolean sleepIfThermalThrottled(long)
    {
        androidx.benchmark.BenchmarkState r0;
        long l0, l1, l2, $l4, $l5, $l6, $l7, $l8;
        androidx.benchmark.ThrottleDetector $r1;
        boolean $z0, $z1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        java.lang.String $r6;
        java.util.concurrent.TimeUnit $r7, $r8;

        r0 := @this: androidx.benchmark.BenchmarkState;

        l0 := @parameter0: long;

        $r1 = <androidx.benchmark.ThrottleDetector: androidx.benchmark.ThrottleDetector INSTANCE>;

        $z0 = virtualinvoke $r1.<androidx.benchmark.ThrottleDetector: boolean isDeviceThermalThrottled()>();

        if $z0 == 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("THERMAL THROTTLE DETECTED, SLEEPING FOR ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SECONDS");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Benchmark", $r6);

        l1 = staticinvoke <java.lang.System: long nanoTime()>();

        $r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $l4 = virtualinvoke $r7.<java.util.concurrent.TimeUnit: long toMillis(long)>(l0);

        staticinvoke <java.lang.Thread: void sleep(long)>($l4);

        $l5 = staticinvoke <java.lang.System: long nanoTime()>();

        l2 = $l5 - l1;

        $l6 = r0.<androidx.benchmark.BenchmarkState: long thermalThrottleSleepSeconds>;

        $r8 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        $l7 = virtualinvoke $r8.<java.util.concurrent.TimeUnit: long toSeconds(long)>(l2);

        $l8 = $l6 + $l7;

        r0.<androidx.benchmark.BenchmarkState: long thermalThrottleSleepSeconds> = $l8;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public final void report(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        androidx.benchmark.BenchmarkState r0;
        java.lang.String r1, r2, r3, r4, r5, $r9, $r18, $r19;
        android.os.Bundle r6;
        int $i0;
        java.lang.StringBuilder $r7, $r10, $r11, $r12, $r13;
        androidx.benchmark.Errors $r8, $r16;
        androidx.benchmark.Arguments $r14;
        boolean $z0, $z1;
        androidx.benchmark.InstrumentationResults $r15;
        androidx.benchmark.ResultWriter $r17;
        androidx.benchmark.BenchmarkResult $r20;

        r0 := @this: androidx.benchmark.BenchmarkState;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "fullClassName");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "simpleClassName");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "methodName");

        $i0 = r0.<androidx.benchmark.BenchmarkState: int state>;

        if $i0 != -1 goto label1;

        return;

     label1:
        specialinvoke r0.<androidx.benchmark.BenchmarkState: void checkState()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = <androidx.benchmark.Errors: androidx.benchmark.Errors INSTANCE>;

        $r9 = virtualinvoke $r8.<androidx.benchmark.Errors: java.lang.String getPREFIX()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        r5 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = <androidx.benchmark.Arguments: androidx.benchmark.Arguments INSTANCE>;

        $z0 = virtualinvoke $r14.<androidx.benchmark.Arguments: boolean getDryRunMode$benchmark_common_release()>();

        if $z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        r6 = virtualinvoke r0.<androidx.benchmark.BenchmarkState: android.os.Bundle getFullStatusReport$benchmark_common_release(java.lang.String,boolean,java.lang.String)>(r5, $z1, r4);

        $r15 = <androidx.benchmark.InstrumentationResults: androidx.benchmark.InstrumentationResults INSTANCE>;

        virtualinvoke $r15.<androidx.benchmark.InstrumentationResults: void reportBundle$benchmark_common_release(android.os.Bundle)>(r6);

        $r17 = <androidx.benchmark.ResultWriter: androidx.benchmark.ResultWriter INSTANCE>;

        $r16 = <androidx.benchmark.Errors: androidx.benchmark.Errors INSTANCE>;

        $r18 = virtualinvoke $r16.<androidx.benchmark.Errors: java.lang.String getPREFIX()>();

        $r19 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>($r18, r3);

        $r20 = specialinvoke r0.<androidx.benchmark.BenchmarkState: androidx.benchmark.BenchmarkResult getReport(java.lang.String,java.lang.String)>($r19, r1);

        virtualinvoke $r17.<androidx.benchmark.ResultWriter: void appendReport(androidx.benchmark.BenchmarkResult)>($r20);

        return;
    }

    public static final void reportData(java.lang.String, java.lang.String, long, java.util.List, int, long, int)
    {
        java.lang.String r0, r1;
        long l0, l2;
        java.util.List r2;
        int i1, i3;
        androidx.benchmark.BenchmarkState$Companion $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        r2 := @parameter3: java.util.List;

        i1 := @parameter4: int;

        l2 := @parameter5: long;

        i3 := @parameter6: int;

        $r3 = <androidx.benchmark.BenchmarkState: androidx.benchmark.BenchmarkState$Companion Companion>;

        virtualinvoke $r3.<androidx.benchmark.BenchmarkState$Companion: void reportData(java.lang.String,java.lang.String,long,java.util.List,int,long,int)>(r0, r1, l0, r2, i1, l2, i3);

        return;
    }

    public static final int access$getREPEAT_COUNT_TIME$cp()
    {
        int $i0;

        $i0 = <androidx.benchmark.BenchmarkState: int REPEAT_COUNT_TIME>;

        return $i0;
    }

    public static final long access$getREPEAT_DURATION_TARGET_NS$cp()
    {
        long $l0;

        $l0 = <androidx.benchmark.BenchmarkState: long REPEAT_DURATION_TARGET_NS>;

        return $l0;
    }

    static void <clinit>()
    {
        androidx.benchmark.BenchmarkState$Companion $r0;
        androidx.benchmark.Arguments $r1, $r2, $r4, $r6, $r9, $r10, $r12, $r14, $r15, $r17;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        androidx.benchmark.Profiler $r3, $r11, $r18;
        java.lang.Boolean $r5, $r19;
        java.util.concurrent.TimeUnit $r7, $r8;
        long $l0, $l1, $l3, $l5;
        int $i2;
        java.lang.Integer $r13, $r16;
        byte $b4;

        $r0 = new androidx.benchmark.BenchmarkState$Companion;

        specialinvoke $r0.<androidx.benchmark.BenchmarkState$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.benchmark.BenchmarkState: androidx.benchmark.BenchmarkState$Companion Companion> = $r0;

        $r1 = <androidx.benchmark.Arguments: androidx.benchmark.Arguments INSTANCE>;

        $z0 = virtualinvoke $r1.<androidx.benchmark.Arguments: boolean getDryRunMode$benchmark_common_release()>();

        if $z0 == 0 goto label01;

        $b4 = 1;

        goto label07;

     label01:
        $r2 = <androidx.benchmark.Arguments: androidx.benchmark.Arguments INSTANCE>;

        $r3 = virtualinvoke $r2.<androidx.benchmark.Arguments: androidx.benchmark.Profiler getProfiler$benchmark_common_release()>();

        if $r3 != null goto label02;

        $z7 = 0;

        goto label04;

     label02:
        $z1 = virtualinvoke $r3.<androidx.benchmark.Profiler: boolean getRequiresSingleMeasurementIteration()>();

        if $z1 != 1 goto label03;

        $z7 = 1;

        goto label04;

     label03:
        $z7 = 0;

     label04:
        if $z7 == 0 goto label05;

        $b4 = 1;

        goto label07;

     label05:
        $r4 = <androidx.benchmark.Arguments: androidx.benchmark.Arguments INSTANCE>;

        $z2 = virtualinvoke $r4.<androidx.benchmark.Arguments: boolean getStartupMode$benchmark_common_release()>();

        if $z2 == 0 goto label06;

        $b4 = 10;

        goto label07;

     label06:
        $b4 = 50;

     label07:
        <androidx.benchmark.BenchmarkState: int REPEAT_COUNT_TIME> = $b4;

        $r15 = <androidx.benchmark.Arguments: androidx.benchmark.Arguments INSTANCE>;

        $z8 = virtualinvoke $r15.<androidx.benchmark.Arguments: boolean getDryRunMode$benchmark_common_release()>();

        if $z8 != 0 goto label11;

        $r9 = <androidx.benchmark.Arguments: androidx.benchmark.Arguments INSTANCE>;

        $z5 = virtualinvoke $r9.<androidx.benchmark.Arguments: boolean getStartupMode$benchmark_common_release()>();

        if $z5 != 0 goto label11;

        $r10 = <androidx.benchmark.Arguments: androidx.benchmark.Arguments INSTANCE>;

        $r11 = virtualinvoke $r10.<androidx.benchmark.Arguments: androidx.benchmark.Profiler getProfiler$benchmark_common_release()>();

        if $r11 != null goto label08;

        $z9 = 0;

        goto label10;

     label08:
        $z6 = virtualinvoke $r11.<androidx.benchmark.Profiler: boolean getRequiresSingleMeasurementIteration()>();

        if $z6 != 1 goto label09;

        $z9 = 1;

        goto label10;

     label09:
        $z9 = 0;

     label10:
        if $z9 == 0 goto label12;

     label11:
        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        goto label14;

     label12:
        $r12 = <androidx.benchmark.Arguments: androidx.benchmark.Arguments INSTANCE>;

        $r13 = virtualinvoke $r12.<androidx.benchmark.Arguments: java.lang.Integer getIterations$benchmark_common_release()>();

        if $r13 == null goto label13;

        $r14 = <androidx.benchmark.Arguments: androidx.benchmark.Arguments INSTANCE>;

        $r16 = virtualinvoke $r14.<androidx.benchmark.Arguments: java.lang.Integer getIterations$benchmark_common_release()>();

        goto label14;

     label13:
        $r16 = null;

     label14:
        <androidx.benchmark.BenchmarkState: java.lang.Integer OVERRIDE_ITERATIONS> = $r16;

        $r17 = <androidx.benchmark.Arguments: androidx.benchmark.Arguments INSTANCE>;

        $r18 = virtualinvoke $r17.<androidx.benchmark.Arguments: androidx.benchmark.Profiler getProfiler$benchmark_common_release()>();

        if $r18 != null goto label15;

        $r19 = null;

        goto label16;

     label15:
        $z3 = virtualinvoke $r18.<androidx.benchmark.Profiler: boolean getRequiresExtraRuntime()>();

        $r19 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3);

     label16:
        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z4 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r19, $r5);

        if $z4 == 0 goto label17;

        $r8 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $l5 = virtualinvoke $r8.<java.util.concurrent.TimeUnit: long toNanos(long)>(50L);

        goto label18;

     label17:
        $r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r6 = <androidx.benchmark.Arguments: androidx.benchmark.Arguments INSTANCE>;

        $l0 = virtualinvoke $r6.<androidx.benchmark.Arguments: long getProfilerSampleDurationSeconds$benchmark_common_release()>();

        $l1 = virtualinvoke $r7.<java.util.concurrent.TimeUnit: long toNanos(long)>($l0);

        $i2 = <androidx.benchmark.BenchmarkState: int REPEAT_COUNT_TIME>;

        $l3 = (long) $i2;

        $l5 = $l1 / $l3;

     label18:
        <androidx.benchmark.BenchmarkState: long REPEAT_DURATION_TARGET_NS> = $l5;

        <androidx.benchmark.BenchmarkState: boolean firstBenchmark> = 1;

        return;
    }

androidx.benchmark.BenchmarkState$Companion$ExperimentalExternalReport
androidx.benchmark.BenchmarkState$Companion$reportData$1
<androidx.benchmark.BenchmarkState$Companion$reportData$1: java.lang.String $fullTestName>
<androidx.benchmark.BenchmarkState$Companion$reportData$1: androidx.benchmark.BenchmarkResult $report>
    void <init>(java.lang.String, androidx.benchmark.BenchmarkResult)
    {
        androidx.benchmark.BenchmarkState$Companion$reportData$1 r0;
        java.lang.String $r1;
        androidx.benchmark.BenchmarkResult $r2;

        r0 := @this: androidx.benchmark.BenchmarkState$Companion$reportData$1;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: androidx.benchmark.BenchmarkResult;

        r0.<androidx.benchmark.BenchmarkState$Companion$reportData$1: java.lang.String $fullTestName> = $r1;

        r0.<androidx.benchmark.BenchmarkState$Companion$reportData$1: androidx.benchmark.BenchmarkResult $report> = $r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(androidx.benchmark.InstrumentationResultScope)
    {
        androidx.benchmark.BenchmarkState$Companion$reportData$1 r0;
        androidx.benchmark.InstrumentationResultScope $r1;
        androidx.benchmark.BenchmarkResult $r2;
        androidx.benchmark.InstrumentationResults $r3;
        java.lang.String $r4, $r6;
        androidx.benchmark.MetricResult $r5;
        double $d0;

        r0 := @this: androidx.benchmark.BenchmarkState$Companion$reportData$1;

        $r1 := @parameter0: androidx.benchmark.InstrumentationResultScope;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$instrumentationReport");

        $r3 = <androidx.benchmark.InstrumentationResults: androidx.benchmark.InstrumentationResults INSTANCE>;

        $r4 = r0.<androidx.benchmark.BenchmarkState$Companion$reportData$1: java.lang.String $fullTestName>;

        $r2 = r0.<androidx.benchmark.BenchmarkState$Companion$reportData$1: androidx.benchmark.BenchmarkResult $report>;

        $r5 = virtualinvoke $r2.<androidx.benchmark.BenchmarkResult: androidx.benchmark.MetricResult getMetricResult(java.lang.String)>("timeNs");

        $d0 = virtualinvoke $r5.<androidx.benchmark.MetricResult: double getMin()>();

        $r6 = virtualinvoke $r3.<androidx.benchmark.InstrumentationResults: java.lang.String ideSummaryLineWrapped$benchmark_common_release(java.lang.String,double,java.lang.Double,java.lang.String,androidx.benchmark.Profiler$ResultFile)>($r4, $d0, null, null, null);

        staticinvoke <androidx.benchmark.InstrumentationResultScope: void ideSummaryRecord$default(androidx.benchmark.InstrumentationResultScope,java.lang.String,java.lang.String,int,java.lang.Object)>($r1, $r6, null, 2, null);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.benchmark.BenchmarkState$Companion$reportData$1 r0;
        java.lang.Object r1;
        androidx.benchmark.InstrumentationResultScope $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.benchmark.BenchmarkState$Companion$reportData$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.benchmark.InstrumentationResultScope) r1;

        virtualinvoke r0.<androidx.benchmark.BenchmarkState$Companion$reportData$1: void invoke(androidx.benchmark.InstrumentationResultScope)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

androidx.benchmark.BenchmarkState$Companion
    private void <init>()
    {
        androidx.benchmark.BenchmarkState$Companion r0;

        r0 := @this: androidx.benchmark.BenchmarkState$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final int getREPEAT_COUNT_TIME$benchmark_common_release()
    {
        androidx.benchmark.BenchmarkState$Companion r0;
        int $i0;

        r0 := @this: androidx.benchmark.BenchmarkState$Companion;

        $i0 = staticinvoke <androidx.benchmark.BenchmarkState: int access$getREPEAT_COUNT_TIME$cp()>();

        return $i0;
    }

    public static void getREPEAT_COUNT_TIME$benchmark_common_release$annotations()
    {
        return;
    }

    public final long getREPEAT_DURATION_TARGET_NS$benchmark_common_release()
    {
        androidx.benchmark.BenchmarkState$Companion r0;
        long $l0;

        r0 := @this: androidx.benchmark.BenchmarkState$Companion;

        $l0 = staticinvoke <androidx.benchmark.BenchmarkState: long access$getREPEAT_DURATION_TARGET_NS$cp()>();

        return $l0;
    }

    public final void reportData(java.lang.String, java.lang.String, long, java.util.List, int, long, int)
    {
        androidx.benchmark.BenchmarkState$Companion r0;
        java.lang.String r1, r2, r6, $r16, $r26;
        long l0, l2;
        java.util.List r3, $r14;
        int i1, i3, $i4, $i5, $i6;
        androidx.benchmark.MetricsContainer r4, $r7;
        androidx.benchmark.BenchmarkResult r5, $r13;
        long[][] $r8, $r9;
        java.lang.Object[] $r10;
        java.util.Collection $r11;
        long[] $r12;
        androidx.benchmark.Errors $r15;
        java.lang.CharSequence $r17;
        androidx.benchmark.BenchmarkState$Companion$reportData$1 $r18;
        androidx.benchmark.InstrumentationResults $r19;
        kotlin.jvm.functions.Function1 $r20;
        androidx.benchmark.ResultWriter $r21;
        java.lang.StringBuilder $r22, $r23, $r24, $r25;
        boolean $z0;

        r0 := @this: androidx.benchmark.BenchmarkState$Companion;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        r3 := @parameter3: java.util.List;

        i1 := @parameter4: int;

        l2 := @parameter5: long;

        i3 := @parameter6: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "className");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "testName");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "dataNs");

        $r7 = new androidx.benchmark.MetricsContainer;

        $i4 = interfaceinvoke r3.<java.util.List: int size()>();

        specialinvoke $r7.<androidx.benchmark.MetricsContainer: void <init>(androidx.benchmark.MetricCapture[],int,int,kotlin.jvm.internal.DefaultConstructorMarker)>(null, $i4, 1, null);

        r4 = $r7;

        $r8 = virtualinvoke r4.<androidx.benchmark.MetricsContainer: long[][] getData$benchmark_common_release()>();

        $r9 = virtualinvoke r4.<androidx.benchmark.MetricsContainer: long[][] getData$benchmark_common_release()>();

        $r10 = (java.lang.Object[]) $r9;

        $i5 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(java.lang.Object[])>($r10);

        $r11 = (java.util.Collection) r3;

        $r12 = staticinvoke <kotlin.collections.CollectionsKt: long[] toLongArray(java.util.Collection)>($r11);

        $r8[$i5] = $r12;

        $r13 = new androidx.benchmark.BenchmarkResult;

        $r14 = virtualinvoke r4.<androidx.benchmark.MetricsContainer: java.util.List captureFinished(int)>(1);

        specialinvoke $r13.<androidx.benchmark.BenchmarkResult: void <init>(java.lang.String,java.lang.String,long,java.util.List,int,long,int)>(r1, r2, l0, $r14, i3, l2, i1);

        r5 = $r13;

        $r15 = <androidx.benchmark.Errors: androidx.benchmark.Errors INSTANCE>;

        $r16 = virtualinvoke $r15.<androidx.benchmark.Errors: java.lang.String getPREFIX()>();

        $r17 = (java.lang.CharSequence) r1;

        $i6 = interfaceinvoke $r17.<java.lang.CharSequence: int length()>();

        if $i6 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label4;

     label3:
        $r26 = r2;

     label4:
        r6 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>($r16, $r26);

        $r19 = <androidx.benchmark.InstrumentationResults: androidx.benchmark.InstrumentationResults INSTANCE>;

        $r18 = new androidx.benchmark.BenchmarkState$Companion$reportData$1;

        specialinvoke $r18.<androidx.benchmark.BenchmarkState$Companion$reportData$1: void <init>(java.lang.String,androidx.benchmark.BenchmarkResult)>(r6, r5);

        $r20 = (kotlin.jvm.functions.Function1) $r18;

        virtualinvoke $r19.<androidx.benchmark.InstrumentationResults: void instrumentationReport(kotlin.jvm.functions.Function1)>($r20);

        $r21 = <androidx.benchmark.ResultWriter: androidx.benchmark.ResultWriter INSTANCE>;

        virtualinvoke $r21.<androidx.benchmark.ResultWriter: void appendReport(androidx.benchmark.BenchmarkResult)>(r5);

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.benchmark.BenchmarkState$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.benchmark.BenchmarkState$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.benchmark.BenchmarkState$Companion: void <init>()>();

        return;
    }

androidx.benchmark.BenchmarkState$Report
<androidx.benchmark.BenchmarkState$Report: androidx.benchmark.Stats stats>
<androidx.benchmark.BenchmarkState$Report: java.lang.String className>
<androidx.benchmark.BenchmarkState$Report: java.lang.String testName>
<androidx.benchmark.BenchmarkState$Report: java.util.List data>
<androidx.benchmark.BenchmarkState$Report: int repeatIterations>
<androidx.benchmark.BenchmarkState$Report: long thermalThrottleSleepSeconds>
<androidx.benchmark.BenchmarkState$Report: int warmupIterations>
    public final androidx.benchmark.Stats getStats()
    {
        androidx.benchmark.BenchmarkState$Report r0;
        androidx.benchmark.Stats $r1;

        r0 := @this: androidx.benchmark.BenchmarkState$Report;

        $r1 = r0.<androidx.benchmark.BenchmarkState$Report: androidx.benchmark.Stats stats>;

        return $r1;
    }

    public final java.lang.String getClassName()
    {
        androidx.benchmark.BenchmarkState$Report r0;
        java.lang.String $r1;

        r0 := @this: androidx.benchmark.BenchmarkState$Report;

        $r1 = r0.<androidx.benchmark.BenchmarkState$Report: java.lang.String className>;

        return $r1;
    }

    public final java.lang.String getTestName()
    {
        androidx.benchmark.BenchmarkState$Report r0;
        java.lang.String $r1;

        r0 := @this: androidx.benchmark.BenchmarkState$Report;

        $r1 = r0.<androidx.benchmark.BenchmarkState$Report: java.lang.String testName>;

        return $r1;
    }

    public final java.util.List getData()
    {
        androidx.benchmark.BenchmarkState$Report r0;
        java.util.List $r1;

        r0 := @this: androidx.benchmark.BenchmarkState$Report;

        $r1 = r0.<androidx.benchmark.BenchmarkState$Report: java.util.List data>;

        return $r1;
    }

    public final int getRepeatIterations()
    {
        androidx.benchmark.BenchmarkState$Report r0;
        int $i0;

        r0 := @this: androidx.benchmark.BenchmarkState$Report;

        $i0 = r0.<androidx.benchmark.BenchmarkState$Report: int repeatIterations>;

        return $i0;
    }

    public final long getThermalThrottleSleepSeconds()
    {
        androidx.benchmark.BenchmarkState$Report r0;
        long $l0;

        r0 := @this: androidx.benchmark.BenchmarkState$Report;

        $l0 = r0.<androidx.benchmark.BenchmarkState$Report: long thermalThrottleSleepSeconds>;

        return $l0;
    }

    public final int getWarmupIterations()
    {
        androidx.benchmark.BenchmarkState$Report r0;
        int $i0;

        r0 := @this: androidx.benchmark.BenchmarkState$Report;

        $i0 = r0.<androidx.benchmark.BenchmarkState$Report: int warmupIterations>;

        return $i0;
    }

    public void <init>(java.lang.String, java.lang.String, java.util.List, int, long, int)
    {
        androidx.benchmark.BenchmarkState$Report r0;
        java.lang.String r1, r2;
        java.util.List r3, $r5;
        int i0, i2;
        long l1;
        androidx.benchmark.Stats $r4;

        r0 := @this: androidx.benchmark.BenchmarkState$Report;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.List;

        i0 := @parameter3: int;

        l1 := @parameter4: long;

        i2 := @parameter5: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>(r1, "className");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>(r2, "testName");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>(r3, "data");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.benchmark.BenchmarkState$Report: java.lang.String className> = r1;

        r0.<androidx.benchmark.BenchmarkState$Report: java.lang.String testName> = r2;

        r0.<androidx.benchmark.BenchmarkState$Report: java.util.List data> = r3;

        r0.<androidx.benchmark.BenchmarkState$Report: int repeatIterations> = i0;

        r0.<androidx.benchmark.BenchmarkState$Report: long thermalThrottleSleepSeconds> = l1;

        r0.<androidx.benchmark.BenchmarkState$Report: int warmupIterations> = i2;

        $r4 = new androidx.benchmark.Stats;

        $r5 = r0.<androidx.benchmark.BenchmarkState$Report: java.util.List data>;

        specialinvoke $r4.<androidx.benchmark.Stats: void <init>(java.util.List)>($r5);

        r0.<androidx.benchmark.BenchmarkState$Report: androidx.benchmark.Stats stats> = $r4;

        return;
    }

    public final java.lang.String component1()
    {
        androidx.benchmark.BenchmarkState$Report r0;
        java.lang.String $r1;

        r0 := @this: androidx.benchmark.BenchmarkState$Report;

        $r1 = r0.<androidx.benchmark.BenchmarkState$Report: java.lang.String className>;

        return $r1;
    }

    public final java.lang.String component2()
    {
        androidx.benchmark.BenchmarkState$Report r0;
        java.lang.String $r1;

        r0 := @this: androidx.benchmark.BenchmarkState$Report;

        $r1 = r0.<androidx.benchmark.BenchmarkState$Report: java.lang.String testName>;

        return $r1;
    }

    public final java.util.List component3()
    {
        androidx.benchmark.BenchmarkState$Report r0;
        java.util.List $r1;

        r0 := @this: androidx.benchmark.BenchmarkState$Report;

        $r1 = r0.<androidx.benchmark.BenchmarkState$Report: java.util.List data>;

        return $r1;
    }

    public final int component4()
    {
        androidx.benchmark.BenchmarkState$Report r0;
        int $i0;

        r0 := @this: androidx.benchmark.BenchmarkState$Report;

        $i0 = r0.<androidx.benchmark.BenchmarkState$Report: int repeatIterations>;

        return $i0;
    }

    public final long component5()
    {
        androidx.benchmark.BenchmarkState$Report r0;
        long $l0;

        r0 := @this: androidx.benchmark.BenchmarkState$Report;

        $l0 = r0.<androidx.benchmark.BenchmarkState$Report: long thermalThrottleSleepSeconds>;

        return $l0;
    }

    public final int component6()
    {
        androidx.benchmark.BenchmarkState$Report r0;
        int $i0;

        r0 := @this: androidx.benchmark.BenchmarkState$Report;

        $i0 = r0.<androidx.benchmark.BenchmarkState$Report: int warmupIterations>;

        return $i0;
    }

    public final androidx.benchmark.BenchmarkState$Report copy(java.lang.String, java.lang.String, java.util.List, int, long, int)
    {
        androidx.benchmark.BenchmarkState$Report r0, $r4;
        java.lang.String r1, r2;
        java.util.List r3;
        int i0, i2;
        long l1;

        r0 := @this: androidx.benchmark.BenchmarkState$Report;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.List;

        i0 := @parameter3: int;

        l1 := @parameter4: long;

        i2 := @parameter5: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>(r1, "className");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>(r2, "testName");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>(r3, "data");

        $r4 = new androidx.benchmark.BenchmarkState$Report;

        specialinvoke $r4.<androidx.benchmark.BenchmarkState$Report: void <init>(java.lang.String,java.lang.String,java.util.List,int,long,int)>(r1, r2, r3, i0, l1, i2);

        return $r4;
    }

    public static androidx.benchmark.BenchmarkState$Report copy$default(androidx.benchmark.BenchmarkState$Report, java.lang.String, java.lang.String, java.util.List, int, long, int, int, java.lang.Object)
    {
        androidx.benchmark.BenchmarkState$Report r0, $r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i9;
        java.lang.Object r1;
        java.lang.String r3, r4;
        java.util.List r5;
        long l8;

        r0 := @parameter0: androidx.benchmark.BenchmarkState$Report;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        r5 := @parameter3: java.util.List;

        i7 := @parameter4: int;

        l8 := @parameter5: long;

        i9 := @parameter6: int;

        i0 := @parameter7: int;

        r1 := @parameter8: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        r3 = r0.<androidx.benchmark.BenchmarkState$Report: java.lang.String className>;

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        r4 = r0.<androidx.benchmark.BenchmarkState$Report: java.lang.String testName>;

     label2:
        $i3 = i0 & 4;

        if $i3 == 0 goto label3;

        r5 = r0.<androidx.benchmark.BenchmarkState$Report: java.util.List data>;

     label3:
        $i4 = i0 & 8;

        if $i4 == 0 goto label4;

        i7 = r0.<androidx.benchmark.BenchmarkState$Report: int repeatIterations>;

     label4:
        $i5 = i0 & 16;

        if $i5 == 0 goto label5;

        l8 = r0.<androidx.benchmark.BenchmarkState$Report: long thermalThrottleSleepSeconds>;

     label5:
        $i6 = i0 & 32;

        if $i6 == 0 goto label6;

        i9 = r0.<androidx.benchmark.BenchmarkState$Report: int warmupIterations>;

     label6:
        $r2 = virtualinvoke r0.<androidx.benchmark.BenchmarkState$Report: androidx.benchmark.BenchmarkState$Report copy(java.lang.String,java.lang.String,java.util.List,int,long,int)>(r3, r4, r5, i7, l8, i9);

        return $r2;
    }

    public java.lang.String toString()
    {
        androidx.benchmark.BenchmarkState$Report r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r7, $r8, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17;
        java.lang.String $r3, $r6, $r18;
        java.util.List $r9;
        int $i0, $i2;
        long $l1;

        r0 := @this: androidx.benchmark.BenchmarkState$Report;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Report(className=");

        $r3 = r0.<androidx.benchmark.BenchmarkState$Report: java.lang.String className>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", testName=");

        $r6 = r0.<androidx.benchmark.BenchmarkState$Report: java.lang.String testName>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", data=");

        $r9 = r0.<androidx.benchmark.BenchmarkState$Report: java.util.List data>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", repeatIterations=");

        $i0 = r0.<androidx.benchmark.BenchmarkState$Report: int repeatIterations>;

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", thermalThrottleSleepSeconds=");

        $l1 = r0.<androidx.benchmark.BenchmarkState$Report: long thermalThrottleSleepSeconds>;

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", warmupIterations=");

        $i2 = r0.<androidx.benchmark.BenchmarkState$Report: int warmupIterations>;

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r18;
    }

    public int hashCode()
    {
        androidx.benchmark.BenchmarkState$Report r0;
        java.lang.String $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        java.util.List $r3;
        long $l7, $l8, $l9;

        r0 := @this: androidx.benchmark.BenchmarkState$Report;

        $r1 = r0.<androidx.benchmark.BenchmarkState$Report: java.lang.String className>;

        if $r1 == null goto label1;

        $i16 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        goto label2;

     label1:
        $i16 = 0;

     label2:
        $i0 = $i16 * 31;

        $r2 = r0.<androidx.benchmark.BenchmarkState$Report: java.lang.String testName>;

        if $r2 == null goto label3;

        $i17 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        goto label4;

     label3:
        $i17 = 0;

     label4:
        $i1 = $i0 + $i17;

        $i2 = $i1 * 31;

        $r3 = r0.<androidx.benchmark.BenchmarkState$Report: java.util.List data>;

        if $r3 == null goto label5;

        $i18 = virtualinvoke $r3.<java.lang.Object: int hashCode()>();

        goto label6;

     label5:
        $i18 = 0;

     label6:
        $i3 = $i2 + $i18;

        $i5 = $i3 * 31;

        $i4 = r0.<androidx.benchmark.BenchmarkState$Report: int repeatIterations>;

        $i6 = $i5 + $i4;

        $i11 = $i6 * 31;

        $l7 = r0.<androidx.benchmark.BenchmarkState$Report: long thermalThrottleSleepSeconds>;

        $l8 = $l7 >>> 32;

        $l9 = $l7 ^ $l8;

        $i10 = (int) $l9;

        $i12 = $i11 + $i10;

        $i14 = $i12 * 31;

        $i13 = r0.<androidx.benchmark.BenchmarkState$Report: int warmupIterations>;

        $i15 = $i14 + $i13;

        return $i15;
    }

    public boolean equals(java.lang.Object)
    {
        androidx.benchmark.BenchmarkState$Report r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.String $r3, $r4, $r5, $r6;
        java.util.List $r7, $r8;
        int $i0, $i1, $i5, $i6;
        long $l2, $l3;
        byte $b4;

        r0 := @this: androidx.benchmark.BenchmarkState$Report;

        r1 := @parameter0: java.lang.Object;

        if r0 == r1 goto label7;

        $z0 = r1 instanceof androidx.benchmark.BenchmarkState$Report;

        if $z0 == 0 goto label8;

        r2 = (androidx.benchmark.BenchmarkState$Report) r1;

        $r4 = r0.<androidx.benchmark.BenchmarkState$Report: java.lang.String className>;

        $r3 = r2.<androidx.benchmark.BenchmarkState$Report: java.lang.String className>;

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, $r3);

        if $z1 == 0 goto label8;

        $r6 = r0.<androidx.benchmark.BenchmarkState$Report: java.lang.String testName>;

        $r5 = r2.<androidx.benchmark.BenchmarkState$Report: java.lang.String testName>;

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r6, $r5);

        if $z2 == 0 goto label8;

        $r8 = r0.<androidx.benchmark.BenchmarkState$Report: java.util.List data>;

        $r7 = r2.<androidx.benchmark.BenchmarkState$Report: java.util.List data>;

        $z3 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r8, $r7);

        if $z3 == 0 goto label8;

        $i1 = r0.<androidx.benchmark.BenchmarkState$Report: int repeatIterations>;

        $i0 = r2.<androidx.benchmark.BenchmarkState$Report: int repeatIterations>;

        if $i1 != $i0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        if $z4 == 0 goto label8;

        $l3 = r0.<androidx.benchmark.BenchmarkState$Report: long thermalThrottleSleepSeconds>;

        $l2 = r2.<androidx.benchmark.BenchmarkState$Report: long thermalThrottleSleepSeconds>;

        $b4 = $l3 cmp $l2;

        if $b4 != 0 goto label3;

        $z5 = 1;

        goto label4;

     label3:
        $z5 = 0;

     label4:
        if $z5 == 0 goto label8;

        $i6 = r0.<androidx.benchmark.BenchmarkState$Report: int warmupIterations>;

        $i5 = r2.<androidx.benchmark.BenchmarkState$Report: int warmupIterations>;

        if $i6 != $i5 goto label5;

        $z6 = 1;

        goto label6;

     label5:
        $z6 = 0;

     label6:
        if $z6 == 0 goto label8;

     label7:
        return 1;

     label8:
        return 0;
    }

