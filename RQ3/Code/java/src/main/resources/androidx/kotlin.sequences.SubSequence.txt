kotlin.sequences.SubSequence
<kotlin.sequences.SubSequence: int endIndex>
<kotlin.sequences.SubSequence: kotlin.sequences.Sequence sequence>
<kotlin.sequences.SubSequence: int startIndex>
    public void <init>(kotlin.sequences.Sequence, int, int)
    {
        kotlin.sequences.SubSequence $r0;
        kotlin.sequences.Sequence $r1;
        int $i0, $i1;
        boolean $z0, $z1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r4;

        $r0 := @this: kotlin.sequences.SubSequence;

        $r1 := @parameter0: kotlin.sequences.Sequence;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "sequence");

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<kotlin.sequences.SubSequence: kotlin.sequences.Sequence sequence> = $r1;

        $r0.<kotlin.sequences.SubSequence: int startIndex> = $i0;

        $r0.<kotlin.sequences.SubSequence: int endIndex> = $i1;

        $z0 = 1;

        if $i0 < 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 == 0 goto label9;

        if $i1 < 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        if $z1 == 0 goto label8;

        if $i1 < $i0 goto label5;

        goto label6;

     label5:
        $z0 = 0;

     label6:
        if $z0 == 0 goto label7;

        return;

     label7:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("endIndex should be not less than startIndex, but was ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" < ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.IllegalArgumentException;

        $r3 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r4;

     label8:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("endIndex should be non-negative, but is ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.IllegalArgumentException;

        $r3 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r4;

     label9:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("startIndex should be non-negative, but is ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.IllegalArgumentException;

        $r3 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r4;
    }

    public static final int access$getEndIndex$p(kotlin.sequences.SubSequence)
    {
        kotlin.sequences.SubSequence $r0;
        int i0;

        $r0 := @parameter0: kotlin.sequences.SubSequence;

        i0 = $r0.<kotlin.sequences.SubSequence: int endIndex>;

        return i0;
    }

    public static final kotlin.sequences.Sequence access$getSequence$p(kotlin.sequences.SubSequence)
    {
        kotlin.sequences.SubSequence $r0;
        kotlin.sequences.Sequence r1;

        $r0 := @parameter0: kotlin.sequences.SubSequence;

        r1 = $r0.<kotlin.sequences.SubSequence: kotlin.sequences.Sequence sequence>;

        return r1;
    }

    public static final int access$getStartIndex$p(kotlin.sequences.SubSequence)
    {
        kotlin.sequences.SubSequence $r0;
        int i0;

        $r0 := @parameter0: kotlin.sequences.SubSequence;

        i0 = $r0.<kotlin.sequences.SubSequence: int startIndex>;

        return i0;
    }

    private final int getCount()
    {
        kotlin.sequences.SubSequence $r0;
        int $i0, $i1;

        $r0 := @this: kotlin.sequences.SubSequence;

        $i1 = $r0.<kotlin.sequences.SubSequence: int endIndex>;

        $i0 = $r0.<kotlin.sequences.SubSequence: int startIndex>;

        $i0 = $i1 - $i0;

        return $i0;
    }

    public kotlin.sequences.Sequence drop(int)
    {
        kotlin.sequences.SubSequence $r0, $r2;
        kotlin.sequences.Sequence $r1;
        int $i0, $i1;

        $r0 := @this: kotlin.sequences.SubSequence;

        $i0 := @parameter0: int;

        $i1 = specialinvoke $r0.<kotlin.sequences.SubSequence: int getCount()>();

        if $i0 < $i1 goto label1;

        $r1 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence emptySequence()>();

        return $r1;

     label1:
        $r2 = new kotlin.sequences.SubSequence;

        $r1 = $r0.<kotlin.sequences.SubSequence: kotlin.sequences.Sequence sequence>;

        $i1 = $r0.<kotlin.sequences.SubSequence: int startIndex>;

        $i0 = $i1 + $i0;

        $i1 = $r0.<kotlin.sequences.SubSequence: int endIndex>;

        specialinvoke $r2.<kotlin.sequences.SubSequence: void <init>(kotlin.sequences.Sequence,int,int)>($r1, $i0, $i1);

        return $r2;
    }

    public java.util.Iterator iterator()
    {
        kotlin.sequences.SubSequence $r0;
        kotlin.sequences.SubSequence$iterator$1 $r1;

        $r0 := @this: kotlin.sequences.SubSequence;

        $r1 = new kotlin.sequences.SubSequence$iterator$1;

        specialinvoke $r1.<kotlin.sequences.SubSequence$iterator$1: void <init>(kotlin.sequences.SubSequence)>($r0);

        return $r1;
    }

    public kotlin.sequences.Sequence take(int)
    {
        kotlin.sequences.SubSequence $r0, $r2;
        kotlin.sequences.Sequence $r1;
        int $i0, $i1;

        $r0 := @this: kotlin.sequences.SubSequence;

        $i1 := @parameter0: int;

        $i0 = specialinvoke $r0.<kotlin.sequences.SubSequence: int getCount()>();

        if $i1 < $i0 goto label1;

        return $r0;

     label1:
        $r2 = new kotlin.sequences.SubSequence;

        $r1 = $r0.<kotlin.sequences.SubSequence: kotlin.sequences.Sequence sequence>;

        $i0 = $r0.<kotlin.sequences.SubSequence: int startIndex>;

        $i1 = $i1 + $i0;

        specialinvoke $r2.<kotlin.sequences.SubSequence: void <init>(kotlin.sequences.Sequence,int,int)>($r1, $i0, $i1);

        return $r2;
    }

kotlin.sequences.SubSequence$iterator$1
<kotlin.sequences.SubSequence$iterator$1: java.util.Iterator iterator>
<kotlin.sequences.SubSequence$iterator$1: int position>
<kotlin.sequences.SubSequence$iterator$1: kotlin.sequences.SubSequence this$0>
    void <init>(kotlin.sequences.SubSequence)
    {
        kotlin.sequences.SubSequence$iterator$1 $r0;
        kotlin.sequences.SubSequence $r1;
        kotlin.sequences.Sequence $r2;
        java.util.Iterator $r3;

        $r0 := @this: kotlin.sequences.SubSequence$iterator$1;

        $r1 := @parameter0: kotlin.sequences.SubSequence;

        $r0.<kotlin.sequences.SubSequence$iterator$1: kotlin.sequences.SubSequence this$0> = $r1;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <kotlin.sequences.SubSequence: kotlin.sequences.Sequence access$getSequence$p(kotlin.sequences.SubSequence)>($r1);

        $r3 = interfaceinvoke $r2.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $r0.<kotlin.sequences.SubSequence$iterator$1: java.util.Iterator iterator> = $r3;

        return;
    }

    private final void drop()
    {
        kotlin.sequences.SubSequence$iterator$1 $r0;
        int $i0, $i1;
        kotlin.sequences.SubSequence $r1;
        java.util.Iterator $r2;
        boolean $z0;

        $r0 := @this: kotlin.sequences.SubSequence$iterator$1;

     label1:
        $i0 = $r0.<kotlin.sequences.SubSequence$iterator$1: int position>;

        $r1 = $r0.<kotlin.sequences.SubSequence$iterator$1: kotlin.sequences.SubSequence this$0>;

        $i1 = staticinvoke <kotlin.sequences.SubSequence: int access$getStartIndex$p(kotlin.sequences.SubSequence)>($r1);

        if $i0 >= $i1 goto label2;

        $r2 = $r0.<kotlin.sequences.SubSequence$iterator$1: java.util.Iterator iterator>;

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = $r0.<kotlin.sequences.SubSequence$iterator$1: java.util.Iterator iterator>;

        interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $i0 = $r0.<kotlin.sequences.SubSequence$iterator$1: int position>;

        $i0 = $i0 + 1;

        $r0.<kotlin.sequences.SubSequence$iterator$1: int position> = $i0;

        goto label1;

     label2:
        return;
    }

    public final java.util.Iterator getIterator()
    {
        kotlin.sequences.SubSequence$iterator$1 $r0;
        java.util.Iterator r1;

        $r0 := @this: kotlin.sequences.SubSequence$iterator$1;

        r1 = $r0.<kotlin.sequences.SubSequence$iterator$1: java.util.Iterator iterator>;

        return r1;
    }

    public final int getPosition()
    {
        kotlin.sequences.SubSequence$iterator$1 $r0;
        int i0;

        $r0 := @this: kotlin.sequences.SubSequence$iterator$1;

        i0 = $r0.<kotlin.sequences.SubSequence$iterator$1: int position>;

        return i0;
    }

    public boolean hasNext()
    {
        kotlin.sequences.SubSequence$iterator$1 $r0;
        int $i0, $i1;
        kotlin.sequences.SubSequence $r1;
        java.util.Iterator $r2;
        boolean $z0;

        $r0 := @this: kotlin.sequences.SubSequence$iterator$1;

        specialinvoke $r0.<kotlin.sequences.SubSequence$iterator$1: void drop()>();

        $i0 = $r0.<kotlin.sequences.SubSequence$iterator$1: int position>;

        $r1 = $r0.<kotlin.sequences.SubSequence$iterator$1: kotlin.sequences.SubSequence this$0>;

        $i1 = staticinvoke <kotlin.sequences.SubSequence: int access$getEndIndex$p(kotlin.sequences.SubSequence)>($r1);

        if $i0 >= $i1 goto label1;

        $r2 = $r0.<kotlin.sequences.SubSequence$iterator$1: java.util.Iterator iterator>;

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.Object next()
    {
        kotlin.sequences.SubSequence$iterator$1 $r0;
        int $i0, $i1;
        kotlin.sequences.SubSequence $r1;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        java.util.NoSuchElementException $r4;

        $r0 := @this: kotlin.sequences.SubSequence$iterator$1;

        specialinvoke $r0.<kotlin.sequences.SubSequence$iterator$1: void drop()>();

        $i0 = $r0.<kotlin.sequences.SubSequence$iterator$1: int position>;

        $r1 = $r0.<kotlin.sequences.SubSequence$iterator$1: kotlin.sequences.SubSequence this$0>;

        $i1 = staticinvoke <kotlin.sequences.SubSequence: int access$getEndIndex$p(kotlin.sequences.SubSequence)>($r1);

        if $i0 >= $i1 goto label1;

        $i0 = $r0.<kotlin.sequences.SubSequence$iterator$1: int position>;

        $i0 = $i0 + 1;

        $r0.<kotlin.sequences.SubSequence$iterator$1: int position> = $i0;

        $r2 = $r0.<kotlin.sequences.SubSequence$iterator$1: java.util.Iterator iterator>;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        return $r3;

     label1:
        $r4 = new java.util.NoSuchElementException;

        specialinvoke $r4.<java.util.NoSuchElementException: void <init>()>();

        throw $r4;
    }

    public void remove()
    {
        kotlin.sequences.SubSequence$iterator$1 $r0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: kotlin.sequences.SubSequence$iterator$1;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r1;
    }

    public final void setPosition(int)
    {
        kotlin.sequences.SubSequence$iterator$1 $r0;
        int $i0;

        $r0 := @this: kotlin.sequences.SubSequence$iterator$1;

        $i0 := @parameter0: int;

        $r0.<kotlin.sequences.SubSequence$iterator$1: int position> = $i0;

        return;
    }

