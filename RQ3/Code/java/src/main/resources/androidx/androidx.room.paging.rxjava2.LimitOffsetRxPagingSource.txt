androidx.room.paging.rxjava2.LimitOffsetRxPagingSource
<androidx.room.paging.rxjava2.LimitOffsetRxPagingSource: androidx.room.RoomSQLiteQuery sourceQuery>
<androidx.room.paging.rxjava2.LimitOffsetRxPagingSource: androidx.room.RoomDatabase db>
<androidx.room.paging.rxjava2.LimitOffsetRxPagingSource: java.util.concurrent.atomic.AtomicInteger itemCount>
<androidx.room.paging.rxjava2.LimitOffsetRxPagingSource: androidx.room.paging.util.ThreadSafeInvalidationObserver observer>
    public transient void <init>(androidx.room.RoomSQLiteQuery, androidx.room.RoomDatabase, java.lang.String[])
    {
        androidx.room.paging.rxjava2.LimitOffsetRxPagingSource r0;
        androidx.room.RoomSQLiteQuery r1;
        androidx.room.RoomDatabase r2;
        java.lang.String[] r3;
        java.util.concurrent.atomic.AtomicInteger $r4;
        androidx.room.paging.util.ThreadSafeInvalidationObserver $r5;
        androidx.room.paging.rxjava2.LimitOffsetRxPagingSource$observer$1 $r6;
        kotlin.jvm.functions.Function0 $r7;

        r0 := @this: androidx.room.paging.rxjava2.LimitOffsetRxPagingSource;

        r1 := @parameter0: androidx.room.RoomSQLiteQuery;

        r2 := @parameter1: androidx.room.RoomDatabase;

        r3 := @parameter2: java.lang.String[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "sourceQuery");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "db");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "tables");

        specialinvoke r0.<androidx.paging.rxjava2.RxPagingSource: void <init>()>();

        r0.<androidx.room.paging.rxjava2.LimitOffsetRxPagingSource: androidx.room.RoomSQLiteQuery sourceQuery> = r1;

        r0.<androidx.room.paging.rxjava2.LimitOffsetRxPagingSource: androidx.room.RoomDatabase db> = r2;

        $r4 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(-1);

        r0.<androidx.room.paging.rxjava2.LimitOffsetRxPagingSource: java.util.concurrent.atomic.AtomicInteger itemCount> = $r4;

        $r5 = new androidx.room.paging.util.ThreadSafeInvalidationObserver;

        $r6 = new androidx.room.paging.rxjava2.LimitOffsetRxPagingSource$observer$1;

        specialinvoke $r6.<androidx.room.paging.rxjava2.LimitOffsetRxPagingSource$observer$1: void <init>(androidx.room.paging.rxjava2.LimitOffsetRxPagingSource)>(r0);

        $r7 = (kotlin.jvm.functions.Function0) $r6;

        specialinvoke $r5.<androidx.room.paging.util.ThreadSafeInvalidationObserver: void <init>(java.lang.String[],kotlin.jvm.functions.Function0)>(r3, $r7);

        r0.<androidx.room.paging.rxjava2.LimitOffsetRxPagingSource: androidx.room.paging.util.ThreadSafeInvalidationObserver observer> = $r5;

        return;
    }

    public transient void <init>(androidx.sqlite.db.SupportSQLiteQuery, androidx.room.RoomDatabase, java.lang.String[])
    {
        androidx.room.paging.rxjava2.LimitOffsetRxPagingSource r0;
        androidx.sqlite.db.SupportSQLiteQuery r1;
        androidx.room.RoomDatabase r2;
        java.lang.String[] r3, $r7;
        androidx.room.RoomSQLiteQuery$Companion $r4;
        androidx.room.RoomSQLiteQuery $r5;
        int $i0;
        java.lang.Object[] $r6;

        r0 := @this: androidx.room.paging.rxjava2.LimitOffsetRxPagingSource;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteQuery;

        r2 := @parameter1: androidx.room.RoomDatabase;

        r3 := @parameter2: java.lang.String[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "supportSQLiteQuery");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "db");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "tables");

        $r4 = <androidx.room.RoomSQLiteQuery: androidx.room.RoomSQLiteQuery$Companion Companion>;

        $r5 = virtualinvoke $r4.<androidx.room.RoomSQLiteQuery$Companion: androidx.room.RoomSQLiteQuery copyFrom(androidx.sqlite.db.SupportSQLiteQuery)>(r1);

        $i0 = lengthof r3;

        $r6 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r3, $i0);

        $r7 = (java.lang.String[]) $r6;

        specialinvoke r0.<androidx.room.paging.rxjava2.LimitOffsetRxPagingSource: void <init>(androidx.room.RoomSQLiteQuery,androidx.room.RoomDatabase,java.lang.String[])>($r5, r2, $r7);

        return;
    }

    public final java.util.concurrent.atomic.AtomicInteger getItemCount$room_paging_rxjava2_release()
    {
        androidx.room.paging.rxjava2.LimitOffsetRxPagingSource r0;
        java.util.concurrent.atomic.AtomicInteger $r1;

        r0 := @this: androidx.room.paging.rxjava2.LimitOffsetRxPagingSource;

        $r1 = r0.<androidx.room.paging.rxjava2.LimitOffsetRxPagingSource: java.util.concurrent.atomic.AtomicInteger itemCount>;

        return $r1;
    }

    public static void getItemCount$room_paging_rxjava2_release$annotations()
    {
        return;
    }

    public final androidx.room.paging.util.ThreadSafeInvalidationObserver getObserver$room_paging_rxjava2_release()
    {
        androidx.room.paging.rxjava2.LimitOffsetRxPagingSource r0;
        androidx.room.paging.util.ThreadSafeInvalidationObserver $r1;

        r0 := @this: androidx.room.paging.rxjava2.LimitOffsetRxPagingSource;

        $r1 = r0.<androidx.room.paging.rxjava2.LimitOffsetRxPagingSource: androidx.room.paging.util.ThreadSafeInvalidationObserver observer>;

        return $r1;
    }

    public static void getObserver$room_paging_rxjava2_release$annotations()
    {
        return;
    }

    public io.reactivex.Single loadSingle(androidx.paging.PagingSource$LoadParams)
    {
        androidx.room.paging.rxjava2.LimitOffsetRxPagingSource r0;
        androidx.paging.PagingSource$LoadParams r1;
        io.reactivex.Scheduler r2, $r5;
        androidx.room.RoomDatabase $r3;
        java.util.concurrent.Executor $r4;
        java.util.concurrent.Callable $r6;
        io.reactivex.Single $r7, $r8;

        r0 := @this: androidx.room.paging.rxjava2.LimitOffsetRxPagingSource;

        r1 := @parameter0: androidx.paging.PagingSource$LoadParams;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "params");

        $r3 = r0.<androidx.room.paging.rxjava2.LimitOffsetRxPagingSource: androidx.room.RoomDatabase db>;

        $r4 = virtualinvoke $r3.<androidx.room.RoomDatabase: java.util.concurrent.Executor getQueryExecutor()>();

        $r5 = staticinvoke <io.reactivex.schedulers.Schedulers: io.reactivex.Scheduler 'from'(java.util.concurrent.Executor)>($r4);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "from(db.queryExecutor)");

        r2 = $r5;

        $r6 = dynamicinvoke "call" <java.util.concurrent.Callable (androidx.room.paging.rxjava2.LimitOffsetRxPagingSource,androidx.paging.PagingSource$LoadParams)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.room.paging.rxjava2.LimitOffsetRxPagingSource: androidx.paging.PagingSource$LoadResult loadSingle$lambda$0(androidx.room.paging.rxjava2.LimitOffsetRxPagingSource,androidx.paging.PagingSource$LoadParams)>, methodtype: androidx.paging.PagingSource$LoadResult __METHODTYPE__());

        $r7 = staticinvoke <androidx.room.RxRoom: io.reactivex.Single createSingle(java.util.concurrent.Callable)>($r6);

        $r8 = virtualinvoke $r7.<io.reactivex.Single: io.reactivex.Single subscribeOn(io.reactivex.Scheduler)>(r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r8, "createSingle {\n         \u2026 }.subscribeOn(scheduler)");

        return $r8;
    }

    private final androidx.paging.PagingSource$LoadResult initialLoad(androidx.paging.PagingSource$LoadParams)
    {
        androidx.room.paging.rxjava2.LimitOffsetRxPagingSource r0;
        androidx.paging.PagingSource$LoadParams r1;
        androidx.room.RoomDatabase $r2;
        java.util.concurrent.Callable $r3;
        java.lang.Object $r4;
        androidx.paging.PagingSource$LoadResult $r5;

        r0 := @this: androidx.room.paging.rxjava2.LimitOffsetRxPagingSource;

        r1 := @parameter0: androidx.paging.PagingSource$LoadParams;

        $r2 = r0.<androidx.room.paging.rxjava2.LimitOffsetRxPagingSource: androidx.room.RoomDatabase db>;

        $r3 = dynamicinvoke "call" <java.util.concurrent.Callable (androidx.room.paging.rxjava2.LimitOffsetRxPagingSource,androidx.paging.PagingSource$LoadParams)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.room.paging.rxjava2.LimitOffsetRxPagingSource: androidx.paging.PagingSource$LoadResult initialLoad$lambda$1(androidx.room.paging.rxjava2.LimitOffsetRxPagingSource,androidx.paging.PagingSource$LoadParams)>, methodtype: androidx.paging.PagingSource$LoadResult __METHODTYPE__());

        $r4 = virtualinvoke $r2.<androidx.room.RoomDatabase: java.lang.Object runInTransaction(java.util.concurrent.Callable)>($r3);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "db.runInTransaction(\n   \u2026)\n            }\n        )");

        $r5 = (androidx.paging.PagingSource$LoadResult) $r4;

        return $r5;
    }

    private final androidx.paging.PagingSource$LoadResult nonInitialLoad(int, androidx.paging.PagingSource$LoadParams)
    {
        androidx.room.paging.rxjava2.LimitOffsetRxPagingSource r0;
        int i0;
        androidx.paging.PagingSource$LoadParams r1;
        androidx.paging.PagingSource$LoadResult r2, $r10;
        androidx.room.paging.rxjava2.LimitOffsetRxPagingSource$nonInitialLoad$result$1 $r3;
        androidx.room.RoomSQLiteQuery $r4;
        androidx.room.RoomDatabase $r5, $r7;
        kotlin.jvm.functions.Function1 $r6;
        androidx.room.InvalidationTracker $r8;
        boolean $z0;
        androidx.paging.PagingSource$LoadResult$Invalid $r9;

        r0 := @this: androidx.room.paging.rxjava2.LimitOffsetRxPagingSource;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.paging.PagingSource$LoadParams;

        $r4 = r0.<androidx.room.paging.rxjava2.LimitOffsetRxPagingSource: androidx.room.RoomSQLiteQuery sourceQuery>;

        $r5 = r0.<androidx.room.paging.rxjava2.LimitOffsetRxPagingSource: androidx.room.RoomDatabase db>;

        $r3 = new androidx.room.paging.rxjava2.LimitOffsetRxPagingSource$nonInitialLoad$result$1;

        specialinvoke $r3.<androidx.room.paging.rxjava2.LimitOffsetRxPagingSource$nonInitialLoad$result$1: void <init>(java.lang.Object)>(r0);

        $r6 = (kotlin.jvm.functions.Function1) $r3;

        r2 = staticinvoke <androidx.room.paging.util.RoomPagingUtilKt: androidx.paging.PagingSource$LoadResult queryDatabase$default(androidx.paging.PagingSource$LoadParams,androidx.room.RoomSQLiteQuery,androidx.room.RoomDatabase,int,android.os.CancellationSignal,kotlin.jvm.functions.Function1,int,java.lang.Object)>(r1, $r4, $r5, i0, null, $r6, 16, null);

        $r7 = r0.<androidx.room.paging.rxjava2.LimitOffsetRxPagingSource: androidx.room.RoomDatabase db>;

        $r8 = virtualinvoke $r7.<androidx.room.RoomDatabase: androidx.room.InvalidationTracker getInvalidationTracker()>();

        virtualinvoke $r8.<androidx.room.InvalidationTracker: void refreshVersionsSync()>();

        $z0 = virtualinvoke r0.<androidx.room.paging.rxjava2.LimitOffsetRxPagingSource: boolean getInvalid()>();

        if $z0 == 0 goto label1;

        $r9 = staticinvoke <androidx.room.paging.util.RoomPagingUtilKt: androidx.paging.PagingSource$LoadResult$Invalid getINVALID()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r9, "null cannot be cast to non-null type androidx.paging.PagingSource.LoadResult.Invalid<kotlin.Int, Value of androidx.room.paging.rxjava2.LimitOffsetRxPagingSource>");

        $r10 = (androidx.paging.PagingSource$LoadResult) $r9;

        goto label2;

     label1:
        $r10 = r2;

     label2:
        return $r10;
    }

<androidx.room.paging.rxjava2.LimitOffsetRxPagingSource: java.util.List convertRows(android.database.Cursor)>
    public java.lang.Integer getRefreshKey(androidx.paging.PagingState)
    {
        androidx.room.paging.rxjava2.LimitOffsetRxPagingSource r0;
        androidx.paging.PagingState r1;
        java.lang.Integer $r2;

        r0 := @this: androidx.room.paging.rxjava2.LimitOffsetRxPagingSource;

        r1 := @parameter0: androidx.paging.PagingState;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "state");

        $r2 = staticinvoke <androidx.room.paging.util.RoomPagingUtilKt: java.lang.Integer getClippedRefreshKey(androidx.paging.PagingState)>(r1);

        return $r2;
    }

    public boolean getJumpingSupported()
    {
        androidx.room.paging.rxjava2.LimitOffsetRxPagingSource r0;

        r0 := @this: androidx.room.paging.rxjava2.LimitOffsetRxPagingSource;

        return 1;
    }

    private static final androidx.paging.PagingSource$LoadResult loadSingle$lambda$0(androidx.room.paging.rxjava2.LimitOffsetRxPagingSource, androidx.paging.PagingSource$LoadParams)
    {
        androidx.room.paging.rxjava2.LimitOffsetRxPagingSource r0;
        androidx.paging.PagingSource$LoadParams $r1;
        int i0;
        androidx.room.RoomDatabase $r2;
        androidx.room.paging.util.ThreadSafeInvalidationObserver $r3;
        java.util.concurrent.atomic.AtomicInteger $r4;
        androidx.paging.PagingSource$LoadResult $r5;

        r0 := @parameter0: androidx.room.paging.rxjava2.LimitOffsetRxPagingSource;

        $r1 := @parameter1: androidx.paging.PagingSource$LoadParams;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$params");

        $r3 = r0.<androidx.room.paging.rxjava2.LimitOffsetRxPagingSource: androidx.room.paging.util.ThreadSafeInvalidationObserver observer>;

        $r2 = r0.<androidx.room.paging.rxjava2.LimitOffsetRxPagingSource: androidx.room.RoomDatabase db>;

        virtualinvoke $r3.<androidx.room.paging.util.ThreadSafeInvalidationObserver: void registerIfNecessary(androidx.room.RoomDatabase)>($r2);

        $r4 = r0.<androidx.room.paging.rxjava2.LimitOffsetRxPagingSource: java.util.concurrent.atomic.AtomicInteger itemCount>;

        i0 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        if i0 != -1 goto label1;

        $r5 = specialinvoke r0.<androidx.room.paging.rxjava2.LimitOffsetRxPagingSource: androidx.paging.PagingSource$LoadResult initialLoad(androidx.paging.PagingSource$LoadParams)>($r1);

        goto label2;

     label1:
        $r5 = specialinvoke r0.<androidx.room.paging.rxjava2.LimitOffsetRxPagingSource: androidx.paging.PagingSource$LoadResult nonInitialLoad(int,androidx.paging.PagingSource$LoadParams)>(i0, $r1);

     label2:
        return $r5;
    }

    private static final androidx.paging.PagingSource$LoadResult initialLoad$lambda$1(androidx.room.paging.rxjava2.LimitOffsetRxPagingSource, androidx.paging.PagingSource$LoadParams)
    {
        androidx.room.paging.rxjava2.LimitOffsetRxPagingSource r0;
        androidx.paging.PagingSource$LoadParams $r1;
        int i0;
        androidx.room.RoomDatabase $r2, $r7;
        androidx.room.RoomSQLiteQuery $r3, $r6;
        java.util.concurrent.atomic.AtomicInteger $r4;
        androidx.room.paging.rxjava2.LimitOffsetRxPagingSource$initialLoad$1$1 $r5;
        kotlin.jvm.functions.Function1 $r8;
        androidx.paging.PagingSource$LoadResult $r9;

        r0 := @parameter0: androidx.room.paging.rxjava2.LimitOffsetRxPagingSource;

        $r1 := @parameter1: androidx.paging.PagingSource$LoadParams;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$params");

        $r3 = r0.<androidx.room.paging.rxjava2.LimitOffsetRxPagingSource: androidx.room.RoomSQLiteQuery sourceQuery>;

        $r2 = r0.<androidx.room.paging.rxjava2.LimitOffsetRxPagingSource: androidx.room.RoomDatabase db>;

        i0 = staticinvoke <androidx.room.paging.util.RoomPagingUtilKt: int queryItemCount(androidx.room.RoomSQLiteQuery,androidx.room.RoomDatabase)>($r3, $r2);

        $r4 = r0.<androidx.room.paging.rxjava2.LimitOffsetRxPagingSource: java.util.concurrent.atomic.AtomicInteger itemCount>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: void set(int)>(i0);

        $r6 = r0.<androidx.room.paging.rxjava2.LimitOffsetRxPagingSource: androidx.room.RoomSQLiteQuery sourceQuery>;

        $r7 = r0.<androidx.room.paging.rxjava2.LimitOffsetRxPagingSource: androidx.room.RoomDatabase db>;

        $r5 = new androidx.room.paging.rxjava2.LimitOffsetRxPagingSource$initialLoad$1$1;

        specialinvoke $r5.<androidx.room.paging.rxjava2.LimitOffsetRxPagingSource$initialLoad$1$1: void <init>(java.lang.Object)>(r0);

        $r8 = (kotlin.jvm.functions.Function1) $r5;

        $r9 = staticinvoke <androidx.room.paging.util.RoomPagingUtilKt: androidx.paging.PagingSource$LoadResult queryDatabase$default(androidx.paging.PagingSource$LoadParams,androidx.room.RoomSQLiteQuery,androidx.room.RoomDatabase,int,android.os.CancellationSignal,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r1, $r6, $r7, i0, null, $r8, 16, null);

        return $r9;
    }

    public volatile java.lang.Object getRefreshKey(androidx.paging.PagingState)
    {
        androidx.room.paging.rxjava2.LimitOffsetRxPagingSource r0;
        androidx.paging.PagingState r1;
        java.lang.Integer $r2;

        r0 := @this: androidx.room.paging.rxjava2.LimitOffsetRxPagingSource;

        r1 := @parameter0: androidx.paging.PagingState;

        $r2 = virtualinvoke r0.<androidx.room.paging.rxjava2.LimitOffsetRxPagingSource: java.lang.Integer getRefreshKey(androidx.paging.PagingState)>(r1);

        return $r2;
    }

androidx.room.paging.rxjava2.LimitOffsetRxPagingSource$initialLoad$1$1
    void <init>(java.lang.Object)
    {
        androidx.room.paging.rxjava2.LimitOffsetRxPagingSource$initialLoad$1$1 r0;
        java.lang.Object r1;

        r0 := @this: androidx.room.paging.rxjava2.LimitOffsetRxPagingSource$initialLoad$1$1;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<kotlin.jvm.internal.FunctionReferenceImpl: void <init>(int,java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int)>(1, r1, class "Landroidx/room/paging/rxjava2/LimitOffsetRxPagingSource;", "convertRows", "convertRows(Landroid/database/Cursor;)Ljava/util/List;", 0);

        return;
    }

    public final java.util.List invoke(android.database.Cursor)
    {
        androidx.room.paging.rxjava2.LimitOffsetRxPagingSource$initialLoad$1$1 r0;
        android.database.Cursor r1;
        java.lang.Object $r2;
        androidx.room.paging.rxjava2.LimitOffsetRxPagingSource $r3;
        java.util.List $r4;

        r0 := @this: androidx.room.paging.rxjava2.LimitOffsetRxPagingSource$initialLoad$1$1;

        r1 := @parameter0: android.database.Cursor;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "p0");

        $r2 = r0.<androidx.room.paging.rxjava2.LimitOffsetRxPagingSource$initialLoad$1$1: java.lang.Object receiver>;

        $r3 = (androidx.room.paging.rxjava2.LimitOffsetRxPagingSource) $r2;

        $r4 = virtualinvoke $r3.<androidx.room.paging.rxjava2.LimitOffsetRxPagingSource: java.util.List convertRows(android.database.Cursor)>(r1);

        return $r4;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.paging.rxjava2.LimitOffsetRxPagingSource$initialLoad$1$1 r0;
        java.lang.Object r1;
        android.database.Cursor $r2;
        java.util.List $r3;

        r0 := @this: androidx.room.paging.rxjava2.LimitOffsetRxPagingSource$initialLoad$1$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.database.Cursor) r1;

        $r3 = virtualinvoke r0.<androidx.room.paging.rxjava2.LimitOffsetRxPagingSource$initialLoad$1$1: java.util.List invoke(android.database.Cursor)>($r2);

        return $r3;
    }

androidx.room.paging.rxjava2.LimitOffsetRxPagingSource$nonInitialLoad$result$1
    void <init>(java.lang.Object)
    {
        androidx.room.paging.rxjava2.LimitOffsetRxPagingSource$nonInitialLoad$result$1 r0;
        java.lang.Object r1;

        r0 := @this: androidx.room.paging.rxjava2.LimitOffsetRxPagingSource$nonInitialLoad$result$1;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<kotlin.jvm.internal.FunctionReferenceImpl: void <init>(int,java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int)>(1, r1, class "Landroidx/room/paging/rxjava2/LimitOffsetRxPagingSource;", "convertRows", "convertRows(Landroid/database/Cursor;)Ljava/util/List;", 0);

        return;
    }

    public final java.util.List invoke(android.database.Cursor)
    {
        androidx.room.paging.rxjava2.LimitOffsetRxPagingSource$nonInitialLoad$result$1 r0;
        android.database.Cursor r1;
        java.lang.Object $r2;
        androidx.room.paging.rxjava2.LimitOffsetRxPagingSource $r3;
        java.util.List $r4;

        r0 := @this: androidx.room.paging.rxjava2.LimitOffsetRxPagingSource$nonInitialLoad$result$1;

        r1 := @parameter0: android.database.Cursor;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "p0");

        $r2 = r0.<androidx.room.paging.rxjava2.LimitOffsetRxPagingSource$nonInitialLoad$result$1: java.lang.Object receiver>;

        $r3 = (androidx.room.paging.rxjava2.LimitOffsetRxPagingSource) $r2;

        $r4 = virtualinvoke $r3.<androidx.room.paging.rxjava2.LimitOffsetRxPagingSource: java.util.List convertRows(android.database.Cursor)>(r1);

        return $r4;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.paging.rxjava2.LimitOffsetRxPagingSource$nonInitialLoad$result$1 r0;
        java.lang.Object r1;
        android.database.Cursor $r2;
        java.util.List $r3;

        r0 := @this: androidx.room.paging.rxjava2.LimitOffsetRxPagingSource$nonInitialLoad$result$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.database.Cursor) r1;

        $r3 = virtualinvoke r0.<androidx.room.paging.rxjava2.LimitOffsetRxPagingSource$nonInitialLoad$result$1: java.util.List invoke(android.database.Cursor)>($r2);

        return $r3;
    }

androidx.room.paging.rxjava2.LimitOffsetRxPagingSource$observer$1
<androidx.room.paging.rxjava2.LimitOffsetRxPagingSource$observer$1: androidx.room.paging.rxjava2.LimitOffsetRxPagingSource this$0>
    void <init>(androidx.room.paging.rxjava2.LimitOffsetRxPagingSource)
    {
        androidx.room.paging.rxjava2.LimitOffsetRxPagingSource$observer$1 r0;
        androidx.room.paging.rxjava2.LimitOffsetRxPagingSource $r1;

        r0 := @this: androidx.room.paging.rxjava2.LimitOffsetRxPagingSource$observer$1;

        $r1 := @parameter0: androidx.room.paging.rxjava2.LimitOffsetRxPagingSource;

        r0.<androidx.room.paging.rxjava2.LimitOffsetRxPagingSource$observer$1: androidx.room.paging.rxjava2.LimitOffsetRxPagingSource this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.room.paging.rxjava2.LimitOffsetRxPagingSource$observer$1 r0;
        androidx.room.paging.rxjava2.LimitOffsetRxPagingSource $r1;

        r0 := @this: androidx.room.paging.rxjava2.LimitOffsetRxPagingSource$observer$1;

        $r1 = r0.<androidx.room.paging.rxjava2.LimitOffsetRxPagingSource$observer$1: androidx.room.paging.rxjava2.LimitOffsetRxPagingSource this$0>;

        virtualinvoke $r1.<androidx.room.paging.rxjava2.LimitOffsetRxPagingSource: void invalidate()>();

        return;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.room.paging.rxjava2.LimitOffsetRxPagingSource$observer$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.room.paging.rxjava2.LimitOffsetRxPagingSource$observer$1;

        virtualinvoke r0.<androidx.room.paging.rxjava2.LimitOffsetRxPagingSource$observer$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

