androidx.room.compiler.processing.ksp.DefaultKspType
    public void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv, com.google.devtools.ksp.symbol.KSType, androidx.room.compiler.processing.ksp.KspJvmTypeResolver)
    {
        androidx.room.compiler.processing.ksp.DefaultKspType r0;
        androidx.room.compiler.processing.ksp.KspProcessingEnv r1;
        com.google.devtools.ksp.symbol.KSType r2;
        androidx.room.compiler.processing.ksp.KspJvmTypeResolver r3;

        r0 := @this: androidx.room.compiler.processing.ksp.DefaultKspType;

        r1 := @parameter0: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        r2 := @parameter1: com.google.devtools.ksp.symbol.KSType;

        r3 := @parameter2: androidx.room.compiler.processing.ksp.KspJvmTypeResolver;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "env");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "ksType");

        specialinvoke r0.<androidx.room.compiler.processing.ksp.KspType: void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv,com.google.devtools.ksp.symbol.KSType,androidx.room.compiler.processing.ksp.KspJvmTypeResolver)>(r1, r2, r3);

        return;
    }

    protected com.squareup.javapoet.TypeName resolveJTypeName()
    {
        androidx.room.compiler.processing.ksp.DefaultKspType r0;
        com.google.devtools.ksp.symbol.KSType $r1;
        androidx.room.compiler.processing.ksp.KspProcessingEnv $r2;
        com.google.devtools.ksp.processing.Resolver $r3;
        com.squareup.javapoet.TypeName $r4, $r5;

        r0 := @this: androidx.room.compiler.processing.ksp.DefaultKspType;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.DefaultKspType: com.google.devtools.ksp.symbol.KSType getKsType()>();

        $r2 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.DefaultKspType: androidx.room.compiler.processing.ksp.KspProcessingEnv getEnv()>();

        $r3 = virtualinvoke $r2.<androidx.room.compiler.processing.ksp.KspProcessingEnv: com.google.devtools.ksp.processing.Resolver getResolver()>();

        $r4 = staticinvoke <androidx.room.compiler.processing.ksp.KSTypeJavaPoetExtKt: com.squareup.javapoet.TypeName asJTypeName(com.google.devtools.ksp.symbol.KSType,com.google.devtools.ksp.processing.Resolver)>($r1, $r3);

        $r5 = staticinvoke <androidx.room.compiler.processing.JavaPoetExtKt: com.squareup.javapoet.TypeName tryBox(com.squareup.javapoet.TypeName)>($r4);

        return $r5;
    }

    protected com.squareup.kotlinpoet.TypeName resolveKTypeName()
    {
        androidx.room.compiler.processing.ksp.DefaultKspType r0;
        com.google.devtools.ksp.symbol.KSType $r1;
        androidx.room.compiler.processing.ksp.KspProcessingEnv $r2;
        com.google.devtools.ksp.processing.Resolver $r3;
        com.squareup.kotlinpoet.TypeName $r4;

        r0 := @this: androidx.room.compiler.processing.ksp.DefaultKspType;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.DefaultKspType: com.google.devtools.ksp.symbol.KSType getKsType()>();

        $r2 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.DefaultKspType: androidx.room.compiler.processing.ksp.KspProcessingEnv getEnv()>();

        $r3 = virtualinvoke $r2.<androidx.room.compiler.processing.ksp.KspProcessingEnv: com.google.devtools.ksp.processing.Resolver getResolver()>();

        $r4 = staticinvoke <androidx.room.compiler.processing.ksp.KSTypeKotlinPoetExtKt: com.squareup.kotlinpoet.TypeName asKTypeName(com.google.devtools.ksp.symbol.KSType,com.google.devtools.ksp.processing.Resolver)>($r1, $r3);

        return $r4;
    }

    public androidx.room.compiler.processing.ksp.DefaultKspType boxed()
    {
        androidx.room.compiler.processing.ksp.DefaultKspType r0;

        r0 := @this: androidx.room.compiler.processing.ksp.DefaultKspType;

        return r0;
    }

    protected androidx.room.compiler.processing.ksp.KspType copyWithNullability(androidx.room.compiler.processing.XNullability)
    {
        androidx.room.compiler.processing.ksp.DefaultKspType r0, $r2;
        androidx.room.compiler.processing.XNullability r1;
        androidx.room.compiler.processing.ksp.KspProcessingEnv $r3;
        com.google.devtools.ksp.symbol.KSType $r4, $r5;
        androidx.room.compiler.processing.ksp.KspJvmTypeResolver $r6;
        androidx.room.compiler.processing.ksp.KspType $r7;

        r0 := @this: androidx.room.compiler.processing.ksp.DefaultKspType;

        r1 := @parameter0: androidx.room.compiler.processing.XNullability;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "nullability");

        $r2 = new androidx.room.compiler.processing.ksp.DefaultKspType;

        $r3 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.DefaultKspType: androidx.room.compiler.processing.ksp.KspProcessingEnv getEnv()>();

        $r4 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.DefaultKspType: com.google.devtools.ksp.symbol.KSType getKsType()>();

        $r5 = staticinvoke <androidx.room.compiler.processing.ksp.KSTypeExtKt: com.google.devtools.ksp.symbol.KSType withNullability(com.google.devtools.ksp.symbol.KSType,androidx.room.compiler.processing.XNullability)>($r4, r1);

        $r6 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.DefaultKspType: androidx.room.compiler.processing.ksp.KspJvmTypeResolver getJvmTypeResolver()>();

        specialinvoke $r2.<androidx.room.compiler.processing.ksp.DefaultKspType: void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv,com.google.devtools.ksp.symbol.KSType,androidx.room.compiler.processing.ksp.KspJvmTypeResolver)>($r3, $r5, $r6);

        $r7 = (androidx.room.compiler.processing.ksp.KspType) $r2;

        return $r7;
    }

    public androidx.room.compiler.processing.ksp.KspType copyWithJvmTypeResolver(androidx.room.compiler.processing.ksp.KspJvmTypeResolver)
    {
        androidx.room.compiler.processing.ksp.DefaultKspType r0, $r2;
        androidx.room.compiler.processing.ksp.KspJvmTypeResolver r1;
        androidx.room.compiler.processing.ksp.KspProcessingEnv $r3;
        com.google.devtools.ksp.symbol.KSType $r4;
        androidx.room.compiler.processing.ksp.KspType $r5;

        r0 := @this: androidx.room.compiler.processing.ksp.DefaultKspType;

        r1 := @parameter0: androidx.room.compiler.processing.ksp.KspJvmTypeResolver;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "jvmTypeResolver");

        $r2 = new androidx.room.compiler.processing.ksp.DefaultKspType;

        $r3 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.DefaultKspType: androidx.room.compiler.processing.ksp.KspProcessingEnv getEnv()>();

        $r4 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.DefaultKspType: com.google.devtools.ksp.symbol.KSType getKsType()>();

        specialinvoke $r2.<androidx.room.compiler.processing.ksp.DefaultKspType: void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv,com.google.devtools.ksp.symbol.KSType,androidx.room.compiler.processing.ksp.KspJvmTypeResolver)>($r3, $r4, r1);

        $r5 = (androidx.room.compiler.processing.ksp.KspType) $r2;

        return $r5;
    }

    public volatile androidx.room.compiler.processing.ksp.KspType boxed()
    {
        androidx.room.compiler.processing.ksp.DefaultKspType r0, $r1;
        androidx.room.compiler.processing.ksp.KspType $r2;

        r0 := @this: androidx.room.compiler.processing.ksp.DefaultKspType;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.DefaultKspType: androidx.room.compiler.processing.ksp.DefaultKspType boxed()>();

        $r2 = (androidx.room.compiler.processing.ksp.KspType) $r1;

        return $r2;
    }

    public volatile androidx.room.compiler.processing.XType boxed()
    {
        androidx.room.compiler.processing.ksp.DefaultKspType r0, $r1;
        androidx.room.compiler.processing.XType $r2;

        r0 := @this: androidx.room.compiler.processing.ksp.DefaultKspType;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.DefaultKspType: androidx.room.compiler.processing.ksp.DefaultKspType boxed()>();

        $r2 = (androidx.room.compiler.processing.XType) $r1;

        return $r2;
    }

