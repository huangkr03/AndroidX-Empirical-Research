androidx.health.platform.client.impl.error.ErrorStatusConverterKt
<androidx.health.platform.client.impl.error.ErrorStatusConverterKt: java.util.Map errorCodeExceptionMap>
    public static final java.util.Map getErrorCodeExceptionMap()
    {
        java.util.Map $r0;

        $r0 = <androidx.health.platform.client.impl.error.ErrorStatusConverterKt: java.util.Map errorCodeExceptionMap>;

        return $r0;
    }

    public static final java.lang.Exception toException(androidx.health.platform.client.error.ErrorStatus)
    {
        androidx.health.platform.client.error.ErrorStatus $r0;
        kotlin.reflect.KClass r1, r2, r3, $r10, $r11, $r12, $r13;
        java.util.Map $r4;
        int $i0, $i1;
        java.lang.Integer $r5;
        java.lang.Object $r6;
        java.lang.UnsupportedOperationException $r7, $r14;
        java.lang.String $r8, $r15, $r17, $r19, $r20, $r22;
        java.lang.Exception $r9, $r23;
        boolean $z1, $z2, $z3, $z4;
        java.io.IOException $r16;
        java.lang.IllegalArgumentException $r18;
        java.lang.SecurityException $r21;
        android.os.RemoteException $r24;

        $r0 := @parameter0: androidx.health.platform.client.error.ErrorStatus;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r4 = <androidx.health.platform.client.impl.error.ErrorStatusConverterKt: java.util.Map errorCodeExceptionMap>;

        $i0 = virtualinvoke $r0.<androidx.health.platform.client.error.ErrorStatus: int getErrorCode()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        r1 = (kotlin.reflect.KClass) $r6;

        if r1 == null goto label8;

        r2 = r1;

        r3 = r2;

        $r10 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Ljava/lang/SecurityException;");

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r3, $r10);

        if $z1 == 0 goto label1;

        $r21 = new java.lang.SecurityException;

        $r22 = virtualinvoke $r0.<androidx.health.platform.client.error.ErrorStatus: java.lang.String getErrorMessage()>();

        specialinvoke $r21.<java.lang.SecurityException: void <init>(java.lang.String)>($r22);

        $r23 = (java.lang.Exception) $r21;

        goto label7;

     label1:
        $r11 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroid/os/RemoteException;");

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r3, $r11);

        if $z2 == 0 goto label4;

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 <= 24 goto label2;

        $r24 = new android.os.RemoteException;

        $r20 = virtualinvoke $r0.<androidx.health.platform.client.error.ErrorStatus: java.lang.String getErrorMessage()>();

        specialinvoke $r24.<android.os.RemoteException: void <init>(java.lang.String)>($r20);

        goto label3;

     label2:
        $r24 = new android.os.RemoteException;

        specialinvoke $r24.<android.os.RemoteException: void <init>()>();

     label3:
        $r23 = (java.lang.Exception) $r24;

        goto label7;

     label4:
        $r12 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Ljava/lang/IllegalArgumentException;");

        $z3 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r3, $r12);

        if $z3 == 0 goto label5;

        $r18 = new java.lang.IllegalArgumentException;

        $r19 = virtualinvoke $r0.<androidx.health.platform.client.error.ErrorStatus: java.lang.String getErrorMessage()>();

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        $r23 = (java.lang.Exception) $r18;

        goto label7;

     label5:
        $r13 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Ljava/io/IOException;");

        $z4 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r3, $r13);

        if $z4 == 0 goto label6;

        $r16 = new java.io.IOException;

        $r17 = virtualinvoke $r0.<androidx.health.platform.client.error.ErrorStatus: java.lang.String getErrorMessage()>();

        specialinvoke $r16.<java.io.IOException: void <init>(java.lang.String)>($r17);

        $r23 = (java.lang.Exception) $r16;

        goto label7;

     label6:
        $r14 = new java.lang.UnsupportedOperationException;

        $r15 = virtualinvoke $r0.<androidx.health.platform.client.error.ErrorStatus: java.lang.String getErrorMessage()>();

        specialinvoke $r14.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r15);

        $r23 = (java.lang.Exception) $r14;

     label7:
        return $r23;

     label8:
        $r7 = new java.lang.UnsupportedOperationException;

        $r8 = virtualinvoke $r0.<androidx.health.platform.client.error.ErrorStatus: java.lang.String getErrorMessage()>();

        specialinvoke $r7.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r8);

        $r9 = (java.lang.Exception) $r7;

        return $r9;
    }

    static void <clinit>()
    {
        kotlin.Pair[] r0;
        java.lang.Integer $r1, $r4, $r7, $r10, $r13, $r16, $r19, $r22, $r25, $r28, $r31, $r34, $r37, $r40;
        kotlin.reflect.KClass $r2, $r5, $r8, $r11, $r14, $r17, $r20, $r23, $r26, $r29, $r32, $r35, $r38, $r41;
        kotlin.Pair $r3, $r6, $r9, $r12, $r15, $r18, $r21, $r24, $r27, $r30, $r33, $r36, $r39, $r42;
        java.util.Map $r43;

        r0 = newarray (kotlin.Pair)[14];

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r2 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Ljava/lang/UnsupportedOperationException;");

        $r3 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r1, $r2);

        r0[0] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r5 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Ljava/lang/UnsupportedOperationException;");

        $r6 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r4, $r5);

        r0[1] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r8 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Ljava/lang/UnsupportedOperationException;");

        $r9 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r7, $r8);

        r0[2] = $r9;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r11 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Ljava/lang/SecurityException;");

        $r12 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r10, $r11);

        r0[3] = $r12;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10000);

        $r14 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Ljava/lang/SecurityException;");

        $r15 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r13, $r14);

        r0[4] = $r15;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10001);

        $r17 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Ljava/lang/SecurityException;");

        $r18 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r16, $r17);

        r0[5] = $r18;

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10002);

        $r20 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Ljava/lang/IllegalArgumentException;");

        $r21 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r19, $r20);

        r0[6] = $r21;

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10003);

        $r23 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Ljava/lang/SecurityException;");

        $r24 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r22, $r23);

        r0[7] = $r24;

        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10004);

        $r26 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Ljava/lang/SecurityException;");

        $r27 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r25, $r26);

        r0[8] = $r27;

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10005);

        $r29 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroid/os/RemoteException;");

        $r30 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r28, $r29);

        r0[9] = $r30;

        $r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10006);

        $r32 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Ljava/io/IOException;");

        $r33 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r31, $r32);

        r0[10] = $r33;

        $r34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10007);

        $r35 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroid/os/RemoteException;");

        $r36 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r34, $r35);

        r0[11] = $r36;

        $r37 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10008);

        $r38 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroid/os/RemoteException;");

        $r39 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r37, $r38);

        r0[12] = $r39;

        $r40 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10010);

        $r41 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroid/os/RemoteException;");

        $r42 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r40, $r41);

        r0[13] = $r42;

        $r43 = staticinvoke <kotlin.collections.MapsKt: java.util.Map mapOf(kotlin.Pair[])>(r0);

        <androidx.health.platform.client.impl.error.ErrorStatusConverterKt: java.util.Map errorCodeExceptionMap> = $r43;

        return;
    }

