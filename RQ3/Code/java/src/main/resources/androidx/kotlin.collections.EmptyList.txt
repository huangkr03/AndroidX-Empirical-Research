kotlin.collections.EmptyList
<kotlin.collections.EmptyList: kotlin.collections.EmptyList INSTANCE>
<kotlin.collections.EmptyList: long serialVersionUID>
    static void <clinit>()
    {
        kotlin.collections.EmptyList $r0;

        $r0 = new kotlin.collections.EmptyList;

        specialinvoke $r0.<kotlin.collections.EmptyList: void <init>()>();

        <kotlin.collections.EmptyList: kotlin.collections.EmptyList INSTANCE> = $r0;

        return;
    }

    private void <init>()
    {
        kotlin.collections.EmptyList $r0;

        $r0 := @this: kotlin.collections.EmptyList;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    private final java.lang.Object readResolve()
    {
        kotlin.collections.EmptyList $r0;

        $r0 := @this: kotlin.collections.EmptyList;

        $r0 = <kotlin.collections.EmptyList: kotlin.collections.EmptyList INSTANCE>;

        return $r0;
    }

    public volatile void add(int, java.lang.Object)
    {
        kotlin.collections.EmptyList $r0;
        int $i0;
        java.lang.Object $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: kotlin.collections.EmptyList;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public void add(int, java.lang.Void)
    {
        kotlin.collections.EmptyList $r0;
        int $i0;
        java.lang.Void $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: kotlin.collections.EmptyList;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Void;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public volatile boolean add(java.lang.Object)
    {
        kotlin.collections.EmptyList $r0;
        java.lang.Object $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: kotlin.collections.EmptyList;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean add(java.lang.Void)
    {
        kotlin.collections.EmptyList $r0;
        java.lang.Void $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: kotlin.collections.EmptyList;

        $r1 := @parameter0: java.lang.Void;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean addAll(int, java.util.Collection)
    {
        kotlin.collections.EmptyList $r0;
        int $i0;
        java.util.Collection $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: kotlin.collections.EmptyList;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.util.Collection;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean addAll(java.util.Collection)
    {
        kotlin.collections.EmptyList $r0;
        java.util.Collection $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: kotlin.collections.EmptyList;

        $r1 := @parameter0: java.util.Collection;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public void clear()
    {
        kotlin.collections.EmptyList $r0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: kotlin.collections.EmptyList;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r1;
    }

    public final volatile boolean contains(java.lang.Object)
    {
        kotlin.collections.EmptyList $r0;
        boolean $z0;
        java.lang.Object $r1;
        java.lang.Void $r2;

        $r0 := @this: kotlin.collections.EmptyList;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof java.lang.Void;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = (java.lang.Void) $r1;

        $z0 = virtualinvoke $r0.<kotlin.collections.EmptyList: boolean contains(java.lang.Void)>($r2);

        return $z0;
    }

    public boolean contains(java.lang.Void)
    {
        kotlin.collections.EmptyList $r0;
        java.lang.Void $r1;

        $r0 := @this: kotlin.collections.EmptyList;

        $r1 := @parameter0: java.lang.Void;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "element");

        return 0;
    }

    public boolean containsAll(java.util.Collection)
    {
        kotlin.collections.EmptyList $r0;
        boolean $z0;
        java.util.Collection $r1;

        $r0 := @this: kotlin.collections.EmptyList;

        $r1 := @parameter0: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "elements");

        $z0 = interfaceinvoke $r1.<java.util.Collection: boolean isEmpty()>();

        return $z0;
    }

    public boolean equals(java.lang.Object)
    {
        kotlin.collections.EmptyList $r0;
        boolean $z0;
        java.lang.Object $r1;
        java.util.List $r2;

        $r0 := @this: kotlin.collections.EmptyList;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof java.util.List;

        if $z0 == 0 goto label1;

        $r2 = (java.util.List) $r1;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public volatile java.lang.Object get(int)
    {
        kotlin.collections.EmptyList $r0;
        java.lang.Void $r1;
        int $i0;

        $r0 := @this: kotlin.collections.EmptyList;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke $r0.<kotlin.collections.EmptyList: java.lang.Void get(int)>($i0);

        return $r1;
    }

    public java.lang.Void get(int)
    {
        kotlin.collections.EmptyList $r0;
        java.lang.IndexOutOfBoundsException $r1;
        int $i0;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $r0 := @this: kotlin.collections.EmptyList;

        $i0 := @parameter0: int;

        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Empty list doesn\'t contain element at index ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r3);

        throw $r1;
    }

    public int getSize()
    {
        kotlin.collections.EmptyList $r0;

        $r0 := @this: kotlin.collections.EmptyList;

        return 0;
    }

    public int hashCode()
    {
        kotlin.collections.EmptyList $r0;

        $r0 := @this: kotlin.collections.EmptyList;

        return 1;
    }

    public final volatile int indexOf(java.lang.Object)
    {
        kotlin.collections.EmptyList $r0;
        boolean $z0;
        int $i0;
        java.lang.Object $r1;
        java.lang.Void $r2;

        $r0 := @this: kotlin.collections.EmptyList;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof java.lang.Void;

        if $z0 != 0 goto label1;

        return -1;

     label1:
        $r2 = (java.lang.Void) $r1;

        $i0 = virtualinvoke $r0.<kotlin.collections.EmptyList: int indexOf(java.lang.Void)>($r2);

        return $i0;
    }

    public int indexOf(java.lang.Void)
    {
        kotlin.collections.EmptyList $r0;
        java.lang.Void $r1;

        $r0 := @this: kotlin.collections.EmptyList;

        $r1 := @parameter0: java.lang.Void;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "element");

        return -1;
    }

    public boolean isEmpty()
    {
        kotlin.collections.EmptyList $r0;

        $r0 := @this: kotlin.collections.EmptyList;

        return 1;
    }

    public java.util.Iterator iterator()
    {
        kotlin.collections.EmptyList $r0;
        kotlin.collections.EmptyIterator r1;
        java.util.Iterator r2;

        $r0 := @this: kotlin.collections.EmptyList;

        r1 = <kotlin.collections.EmptyIterator: kotlin.collections.EmptyIterator INSTANCE>;

        r2 = (java.util.Iterator) r1;

        return r2;
    }

    public final volatile int lastIndexOf(java.lang.Object)
    {
        kotlin.collections.EmptyList $r0;
        boolean $z0;
        int $i0;
        java.lang.Object $r1;
        java.lang.Void $r2;

        $r0 := @this: kotlin.collections.EmptyList;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof java.lang.Void;

        if $z0 != 0 goto label1;

        return -1;

     label1:
        $r2 = (java.lang.Void) $r1;

        $i0 = virtualinvoke $r0.<kotlin.collections.EmptyList: int lastIndexOf(java.lang.Void)>($r2);

        return $i0;
    }

    public int lastIndexOf(java.lang.Void)
    {
        kotlin.collections.EmptyList $r0;
        java.lang.Void $r1;

        $r0 := @this: kotlin.collections.EmptyList;

        $r1 := @parameter0: java.lang.Void;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "element");

        return -1;
    }

    public java.util.ListIterator listIterator()
    {
        kotlin.collections.EmptyList $r0;
        kotlin.collections.EmptyIterator r1;

        $r0 := @this: kotlin.collections.EmptyList;

        r1 = <kotlin.collections.EmptyIterator: kotlin.collections.EmptyIterator INSTANCE>;

        return r1;
    }

    public java.util.ListIterator listIterator(int)
    {
        kotlin.collections.EmptyList $r0;
        java.lang.IndexOutOfBoundsException $r1;
        int $i0;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        kotlin.collections.EmptyIterator r4;

        $r0 := @this: kotlin.collections.EmptyList;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        r4 = <kotlin.collections.EmptyIterator: kotlin.collections.EmptyIterator INSTANCE>;

        return r4;

     label1:
        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Index: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r3);

        throw $r1;
    }

    public volatile java.lang.Object remove(int)
    {
        kotlin.collections.EmptyList $r0;
        int $i0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: kotlin.collections.EmptyList;

        $i0 := @parameter0: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r1;
    }

    public java.lang.Void remove(int)
    {
        kotlin.collections.EmptyList $r0;
        int $i0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: kotlin.collections.EmptyList;

        $i0 := @parameter0: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r1;
    }

    public boolean remove(java.lang.Object)
    {
        kotlin.collections.EmptyList $r0;
        java.lang.Object $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: kotlin.collections.EmptyList;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean removeAll(java.util.Collection)
    {
        kotlin.collections.EmptyList $r0;
        java.util.Collection $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: kotlin.collections.EmptyList;

        $r1 := @parameter0: java.util.Collection;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean retainAll(java.util.Collection)
    {
        kotlin.collections.EmptyList $r0;
        java.util.Collection $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: kotlin.collections.EmptyList;

        $r1 := @parameter0: java.util.Collection;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public volatile java.lang.Object set(int, java.lang.Object)
    {
        kotlin.collections.EmptyList $r0;
        int $i0;
        java.lang.Object $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: kotlin.collections.EmptyList;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public java.lang.Void set(int, java.lang.Void)
    {
        kotlin.collections.EmptyList $r0;
        int $i0;
        java.lang.Void $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: kotlin.collections.EmptyList;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Void;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public final volatile int size()
    {
        kotlin.collections.EmptyList $r0;
        int $i0;

        $r0 := @this: kotlin.collections.EmptyList;

        $i0 = virtualinvoke $r0.<kotlin.collections.EmptyList: int getSize()>();

        return $i0;
    }

    public java.util.List subList(int, int)
    {
        kotlin.collections.EmptyList $r0;
        int $i0, $i1;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $r0 := @this: kotlin.collections.EmptyList;

        $i1 := @parameter0: int;

        $i0 := @parameter1: int;

        if $i1 != 0 goto label1;

        if $i0 != 0 goto label1;

        return $r0;

     label1:
        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fromIndex: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", toIndex: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r3);

        throw $r1;
    }

    public java.lang.Object[] toArray()
    {
        kotlin.collections.EmptyList $r0;
        java.lang.Object[] $r1;
        java.util.Collection r2;

        $r0 := @this: kotlin.collections.EmptyList;

        r2 = (java.util.Collection) $r0;

        $r1 = staticinvoke <kotlin.jvm.internal.CollectionToArray: java.lang.Object[] toArray(java.util.Collection)>(r2);

        return $r1;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        kotlin.collections.EmptyList $r0;
        java.lang.Object[] $r1;
        java.util.Collection r2;

        $r0 := @this: kotlin.collections.EmptyList;

        $r1 := @parameter0: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "array");

        r2 = (java.util.Collection) $r0;

        $r1 = staticinvoke <kotlin.jvm.internal.CollectionToArray: java.lang.Object[] toArray(java.util.Collection,java.lang.Object[])>(r2, $r1);

        return $r1;
    }

    public java.lang.String toString()
    {
        kotlin.collections.EmptyList $r0;

        $r0 := @this: kotlin.collections.EmptyList;

        return "[]";
    }

