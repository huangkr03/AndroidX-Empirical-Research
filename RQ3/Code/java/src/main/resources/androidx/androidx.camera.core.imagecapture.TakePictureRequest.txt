androidx.camera.core.imagecapture.TakePictureRequest
    public void <init>()
    {
        androidx.camera.core.imagecapture.TakePictureRequest r0;

        r0 := @this: androidx.camera.core.imagecapture.TakePictureRequest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

<androidx.camera.core.imagecapture.TakePictureRequest: java.util.concurrent.Executor getAppExecutor()>
<androidx.camera.core.imagecapture.TakePictureRequest: androidx.camera.core.ImageCapture$OnImageCapturedCallback getInMemoryCallback()>
<androidx.camera.core.imagecapture.TakePictureRequest: androidx.camera.core.ImageCapture$OnImageSavedCallback getOnDiskCallback()>
<androidx.camera.core.imagecapture.TakePictureRequest: androidx.camera.core.ImageCapture$OutputFileOptions getOutputFileOptions()>
<androidx.camera.core.imagecapture.TakePictureRequest: android.graphics.Rect getCropRect()>
<androidx.camera.core.imagecapture.TakePictureRequest: android.graphics.Matrix getSensorToBufferTransform()>
<androidx.camera.core.imagecapture.TakePictureRequest: int getRotationDegrees()>
<androidx.camera.core.imagecapture.TakePictureRequest: int getJpegQuality()>
<androidx.camera.core.imagecapture.TakePictureRequest: int getCaptureMode()>
<androidx.camera.core.imagecapture.TakePictureRequest: java.util.List getSessionConfigCameraCaptureCallbacks()>
    void onError(androidx.camera.core.ImageCaptureException)
    {
        androidx.camera.core.imagecapture.TakePictureRequest r0;
        androidx.camera.core.ImageCaptureException r1;
        java.util.concurrent.Executor $r2;
        java.lang.Runnable $r3;

        r0 := @this: androidx.camera.core.imagecapture.TakePictureRequest;

        r1 := @parameter0: androidx.camera.core.ImageCaptureException;

        $r2 = virtualinvoke r0.<androidx.camera.core.imagecapture.TakePictureRequest: java.util.concurrent.Executor getAppExecutor()>();

        $r3 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.core.imagecapture.TakePictureRequest,androidx.camera.core.ImageCaptureException)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.imagecapture.TakePictureRequest: void lambda$onError$0(androidx.camera.core.ImageCaptureException)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r3);

        return;
    }

    void onResult(androidx.camera.core.ImageCapture$OutputFileResults)
    {
        androidx.camera.core.imagecapture.TakePictureRequest r0;
        androidx.camera.core.ImageCapture$OutputFileResults r1;
        java.util.concurrent.Executor $r2;
        java.lang.Runnable $r3;

        r0 := @this: androidx.camera.core.imagecapture.TakePictureRequest;

        r1 := @parameter0: androidx.camera.core.ImageCapture$OutputFileResults;

        $r2 = virtualinvoke r0.<androidx.camera.core.imagecapture.TakePictureRequest: java.util.concurrent.Executor getAppExecutor()>();

        $r3 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.core.imagecapture.TakePictureRequest,androidx.camera.core.ImageCapture$OutputFileResults)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.imagecapture.TakePictureRequest: void lambda$onResult$1(androidx.camera.core.ImageCapture$OutputFileResults)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r3);

        return;
    }

    void onResult(androidx.camera.core.ImageProxy)
    {
        androidx.camera.core.imagecapture.TakePictureRequest r0;
        androidx.camera.core.ImageProxy r1;
        java.util.concurrent.Executor $r2;
        java.lang.Runnable $r3;

        r0 := @this: androidx.camera.core.imagecapture.TakePictureRequest;

        r1 := @parameter0: androidx.camera.core.ImageProxy;

        $r2 = virtualinvoke r0.<androidx.camera.core.imagecapture.TakePictureRequest: java.util.concurrent.Executor getAppExecutor()>();

        $r3 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.core.imagecapture.TakePictureRequest,androidx.camera.core.ImageProxy)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.imagecapture.TakePictureRequest: void lambda$onResult$2(androidx.camera.core.ImageProxy)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r3);

        return;
    }

    public static androidx.camera.core.imagecapture.TakePictureRequest of(java.util.concurrent.Executor, androidx.camera.core.ImageCapture$OnImageCapturedCallback, androidx.camera.core.ImageCapture$OnImageSavedCallback, androidx.camera.core.ImageCapture$OutputFileOptions, android.graphics.Rect, android.graphics.Matrix, int, int, int, java.util.List)
    {
        java.util.concurrent.Executor r0;
        androidx.camera.core.ImageCapture$OnImageCapturedCallback r1;
        androidx.camera.core.ImageCapture$OnImageSavedCallback r2;
        androidx.camera.core.ImageCapture$OutputFileOptions r3;
        android.graphics.Rect r4;
        android.graphics.Matrix r5;
        int i0, i1, i2;
        java.util.List r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        androidx.camera.core.imagecapture.AutoValue_TakePictureRequest $r7;

        r0 := @parameter0: java.util.concurrent.Executor;

        r1 := @parameter1: androidx.camera.core.ImageCapture$OnImageCapturedCallback;

        r2 := @parameter2: androidx.camera.core.ImageCapture$OnImageSavedCallback;

        r3 := @parameter3: androidx.camera.core.ImageCapture$OutputFileOptions;

        r4 := @parameter4: android.graphics.Rect;

        r5 := @parameter5: android.graphics.Matrix;

        i0 := @parameter6: int;

        i1 := @parameter7: int;

        i2 := @parameter8: int;

        r6 := @parameter9: java.util.List;

        if r2 != null goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        if r3 != null goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        if $z0 != $z1 goto label05;

        $z2 = 1;

        goto label06;

     label05:
        $z2 = 0;

     label06:
        staticinvoke <androidx.core.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z2, "onDiskCallback and outputFileOptions should be both null or both non-null.");

        if r2 != null goto label07;

        $z3 = 1;

        goto label08;

     label07:
        $z3 = 0;

     label08:
        if r1 != null goto label09;

        $z4 = 1;

        goto label10;

     label09:
        $z4 = 0;

     label10:
        $z5 = $z3 ^ $z4;

        staticinvoke <androidx.core.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z5, "One and only one on-disk or in-memory callback should be present.");

        $r7 = new androidx.camera.core.imagecapture.AutoValue_TakePictureRequest;

        specialinvoke $r7.<androidx.camera.core.imagecapture.AutoValue_TakePictureRequest: void <init>(java.util.concurrent.Executor,androidx.camera.core.ImageCapture$OnImageCapturedCallback,androidx.camera.core.ImageCapture$OnImageSavedCallback,androidx.camera.core.ImageCapture$OutputFileOptions,android.graphics.Rect,android.graphics.Matrix,int,int,int,java.util.List)>(r0, r1, r2, r3, r4, r5, i0, i1, i2, r6);

        return $r7;
    }

    private void lambda$onResult$2(androidx.camera.core.ImageProxy)
    {
        androidx.camera.core.imagecapture.TakePictureRequest r0;
        androidx.camera.core.ImageProxy r1, $r6;
        androidx.camera.core.ImageCapture$OnImageCapturedCallback $r2, $r4;
        java.lang.Object $r3, $r5;

        r0 := @this: androidx.camera.core.imagecapture.TakePictureRequest;

        r1 := @parameter0: androidx.camera.core.ImageProxy;

        $r2 = virtualinvoke r0.<androidx.camera.core.imagecapture.TakePictureRequest: androidx.camera.core.ImageCapture$OnImageCapturedCallback getInMemoryCallback()>();

        $r3 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2);

        $r4 = (androidx.camera.core.ImageCapture$OnImageCapturedCallback) $r3;

        $r5 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r6 = (androidx.camera.core.ImageProxy) $r5;

        virtualinvoke $r4.<androidx.camera.core.ImageCapture$OnImageCapturedCallback: void onCaptureSuccess(androidx.camera.core.ImageProxy)>($r6);

        return;
    }

    private void lambda$onResult$1(androidx.camera.core.ImageCapture$OutputFileResults)
    {
        androidx.camera.core.imagecapture.TakePictureRequest r0;
        androidx.camera.core.ImageCapture$OutputFileResults r1, $r6;
        androidx.camera.core.ImageCapture$OnImageSavedCallback $r2, $r4;
        java.lang.Object $r3, $r5;

        r0 := @this: androidx.camera.core.imagecapture.TakePictureRequest;

        r1 := @parameter0: androidx.camera.core.ImageCapture$OutputFileResults;

        $r2 = virtualinvoke r0.<androidx.camera.core.imagecapture.TakePictureRequest: androidx.camera.core.ImageCapture$OnImageSavedCallback getOnDiskCallback()>();

        $r3 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2);

        $r4 = (androidx.camera.core.ImageCapture$OnImageSavedCallback) $r3;

        $r5 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r6 = (androidx.camera.core.ImageCapture$OutputFileResults) $r5;

        interfaceinvoke $r4.<androidx.camera.core.ImageCapture$OnImageSavedCallback: void onImageSaved(androidx.camera.core.ImageCapture$OutputFileResults)>($r6);

        return;
    }

    private void lambda$onError$0(androidx.camera.core.ImageCaptureException)
    {
        androidx.camera.core.imagecapture.TakePictureRequest r0;
        androidx.camera.core.ImageCaptureException r1;
        boolean z0, z1, $z2, $z3;
        androidx.camera.core.ImageCapture$OnImageCapturedCallback $r2, $r8, $r10;
        androidx.camera.core.ImageCapture$OnImageSavedCallback $r3, $r5, $r7;
        java.lang.IllegalStateException $r4;
        java.lang.Object $r6, $r9;

        r0 := @this: androidx.camera.core.imagecapture.TakePictureRequest;

        r1 := @parameter0: androidx.camera.core.ImageCaptureException;

        $r2 = virtualinvoke r0.<androidx.camera.core.imagecapture.TakePictureRequest: androidx.camera.core.ImageCapture$OnImageCapturedCallback getInMemoryCallback()>();

        if $r2 == null goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z0 = $z2;

        $r3 = virtualinvoke r0.<androidx.camera.core.imagecapture.TakePictureRequest: androidx.camera.core.ImageCapture$OnImageSavedCallback getOnDiskCallback()>();

        if $r3 == null goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        z1 = $z3;

        if z0 == 0 goto label5;

        if z1 != 0 goto label5;

        $r8 = virtualinvoke r0.<androidx.camera.core.imagecapture.TakePictureRequest: androidx.camera.core.ImageCapture$OnImageCapturedCallback getInMemoryCallback()>();

        $r9 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r8);

        $r10 = (androidx.camera.core.ImageCapture$OnImageCapturedCallback) $r9;

        virtualinvoke $r10.<androidx.camera.core.ImageCapture$OnImageCapturedCallback: void onError(androidx.camera.core.ImageCaptureException)>(r1);

        goto label7;

     label5:
        if z1 == 0 goto label6;

        if z0 != 0 goto label6;

        $r5 = virtualinvoke r0.<androidx.camera.core.imagecapture.TakePictureRequest: androidx.camera.core.ImageCapture$OnImageSavedCallback getOnDiskCallback()>();

        $r6 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r5);

        $r7 = (androidx.camera.core.ImageCapture$OnImageSavedCallback) $r6;

        interfaceinvoke $r7.<androidx.camera.core.ImageCapture$OnImageSavedCallback: void onError(androidx.camera.core.ImageCaptureException)>(r1);

        goto label7;

     label6:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("One and only one callback is allowed.");

        throw $r4;

     label7:
        return;
    }

