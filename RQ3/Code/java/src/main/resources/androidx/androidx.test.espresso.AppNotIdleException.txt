androidx.test.espresso.AppNotIdleException
    public static androidx.test.espresso.AppNotIdleException create(java.util.List, java.lang.String)
    {
        java.util.Locale r0;
        java.lang.Object[] r1;
        androidx.test.espresso.core.internal.deps.guava.base.Joiner $r2;
        java.lang.String $r3, r5, r6;
        java.util.List r4;
        androidx.test.espresso.AppNotIdleException r7, r8;
        java.lang.Iterable r9;

        r4 := @parameter0: java.util.List;

        r5 := @parameter1: java.lang.String;

        r0 = <java.util.Locale: java.util.Locale ROOT>;

        r1 = newarray (java.lang.Object)[2];

        r1[0] = r5;

        $r2 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Joiner: androidx.test.espresso.core.internal.deps.guava.base.Joiner on(java.lang.String)>(",");

        r9 = (java.lang.Iterable) r4;

        $r3 = virtualinvoke $r2.<androidx.test.espresso.core.internal.deps.guava.base.Joiner: java.lang.String join(java.lang.Iterable)>(r9);

        r1[1] = $r3;

        r6 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(r0, "%s The following Idle Conditions failed %s.", r1);

        r8 = new androidx.test.espresso.AppNotIdleException;

        r7 = r8;

        specialinvoke r8.<androidx.test.espresso.AppNotIdleException: void <init>(java.lang.String)>(r6);

        return r7;
    }

    public static androidx.test.espresso.AppNotIdleException create(java.util.List, int, int)
    {
        int i0, i1;
        java.lang.Object[] r0;
        android.os.Looper $r1, $r2;
        java.lang.Integer $r3, $r4;
        androidx.test.espresso.core.internal.deps.guava.base.Joiner $r5;
        java.lang.String $r6, r9;
        java.util.List r7;
        boolean z0;
        java.util.Locale r8;
        androidx.test.espresso.AppNotIdleException r10, r11;
        java.lang.Iterable r12;

        r7 := @parameter0: java.util.List;

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        $r1 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r2 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        if $r1 != $r2 goto label2;

        z0 = 1;

     label1:
        staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: void checkState(boolean)>(z0);

        r8 = <java.util.Locale: java.util.Locale ROOT>;

        r0 = newarray (java.lang.Object)[3];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r0[0] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        r0[1] = $r4;

        $r5 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Joiner: androidx.test.espresso.core.internal.deps.guava.base.Joiner on(java.lang.String)>(",");

        r12 = (java.lang.Iterable) r7;

        $r6 = virtualinvoke $r5.<androidx.test.espresso.core.internal.deps.guava.base.Joiner: java.lang.String join(java.lang.Iterable)>(r12);

        r0[2] = $r6;

        r9 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(r8, "App not idle within timeout of %s seconds evenafter trying for %s iterations. The following Idle Conditions failed %s", r0);

        r11 = new androidx.test.espresso.AppNotIdleException;

        r10 = r11;

        specialinvoke r11.<androidx.test.espresso.AppNotIdleException: void <init>(java.lang.String)>(r9);

        return r10;

     label2:
        z0 = 0;

        goto label1;
    }

    private void <init>(java.lang.String)
    {
        androidx.test.espresso.AppNotIdleException r0;
        java.lang.String r1;

        r0 := @this: androidx.test.espresso.AppNotIdleException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String)>(r1);

        staticinvoke <androidx.test.internal.platform.util.TestOutputEmitter: void dumpThreadStates(java.lang.String)>("ThreadState-AppNotIdleException.txt");

        return;
    }

