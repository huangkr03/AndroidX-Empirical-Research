androidx.sqlite.db.SupportSQLiteOpenHelper
<androidx.sqlite.db.SupportSQLiteOpenHelper: java.lang.String getDatabaseName()>
<androidx.sqlite.db.SupportSQLiteOpenHelper: void setWriteAheadLoggingEnabled(boolean)>
<androidx.sqlite.db.SupportSQLiteOpenHelper: androidx.sqlite.db.SupportSQLiteDatabase getWritableDatabase()>
<androidx.sqlite.db.SupportSQLiteOpenHelper: androidx.sqlite.db.SupportSQLiteDatabase getReadableDatabase()>
<androidx.sqlite.db.SupportSQLiteOpenHelper: void close()>
androidx.sqlite.db.SupportSQLiteOpenHelper$Callback$Companion
    private void <init>()
    {
        androidx.sqlite.db.SupportSQLiteOpenHelper$Callback$Companion r0;

        r0 := @this: androidx.sqlite.db.SupportSQLiteOpenHelper$Callback$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.sqlite.db.SupportSQLiteOpenHelper$Callback$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.sqlite.db.SupportSQLiteOpenHelper$Callback$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.sqlite.db.SupportSQLiteOpenHelper$Callback$Companion: void <init>()>();

        return;
    }

androidx.sqlite.db.SupportSQLiteOpenHelper$Callback
<androidx.sqlite.db.SupportSQLiteOpenHelper$Callback: androidx.sqlite.db.SupportSQLiteOpenHelper$Callback$Companion Companion>
<androidx.sqlite.db.SupportSQLiteOpenHelper$Callback: int version>
<androidx.sqlite.db.SupportSQLiteOpenHelper$Callback: java.lang.String TAG>
    public void <init>(int)
    {
        androidx.sqlite.db.SupportSQLiteOpenHelper$Callback r0;
        int i0;

        r0 := @this: androidx.sqlite.db.SupportSQLiteOpenHelper$Callback;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.sqlite.db.SupportSQLiteOpenHelper$Callback: int version> = i0;

        return;
    }

    public void onConfigure(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.sqlite.db.SupportSQLiteOpenHelper$Callback r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;

        r0 := @this: androidx.sqlite.db.SupportSQLiteOpenHelper$Callback;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "db");

        return;
    }

<androidx.sqlite.db.SupportSQLiteOpenHelper$Callback: void onCreate(androidx.sqlite.db.SupportSQLiteDatabase)>
<androidx.sqlite.db.SupportSQLiteOpenHelper$Callback: void onUpgrade(androidx.sqlite.db.SupportSQLiteDatabase,int,int)>
    public void onDowngrade(androidx.sqlite.db.SupportSQLiteDatabase, int, int)
    {
        androidx.sqlite.db.SupportSQLiteOpenHelper$Callback r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        int i0, i1;
        android.database.sqlite.SQLiteException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7;
        java.lang.String $r8;

        r0 := @this: androidx.sqlite.db.SupportSQLiteOpenHelper$Callback;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "db");

        $r2 = new android.database.sqlite.SQLiteException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t downgrade database from version ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<android.database.sqlite.SQLiteException: void <init>(java.lang.String)>($r8);

        throw $r2;
    }

    public void onOpen(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.sqlite.db.SupportSQLiteOpenHelper$Callback r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;

        r0 := @this: androidx.sqlite.db.SupportSQLiteOpenHelper$Callback;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "db");

        return;
    }

    public void onCorruption(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.sqlite.db.SupportSQLiteOpenHelper$Callback r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        java.lang.String r2, $r7, $r8, $r10, $r11, $r15, $r17, r26, r32;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        boolean $z1, $z2, $z3, z7, z8, z9;
        java.lang.Object $r9, $r16, r24, r30;
        java.lang.Throwable $r12, $r14, $r18, r20, r21, r27;
        java.util.List r19;
        java.lang.Iterable $r22, $r28;
        java.util.Iterator r23, r29;
        android.util.Pair r25, $r31;

        r0 := @this: androidx.sqlite.db.SupportSQLiteOpenHelper$Callback;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "db");

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Corruption reported by sqlite on database: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".path");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("SupportSQLite", $r7);

        $z1 = interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: boolean isOpen()>();

        if $z1 != 0 goto label02;

        $r11 = interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: java.lang.String getPath()>();

        if $r11 == null goto label01;

        r2 = $r11;

        specialinvoke r0.<androidx.sqlite.db.SupportSQLiteOpenHelper$Callback: void deleteDatabaseFile(java.lang.String)>(r2);

        goto label01;

     label01:
        return;

     label02:
        r19 = null;

     label03:
        r19 = interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: java.util.List getAttachedDbs()>();

     label04:
        goto label06;

     label05:
        $r18 := @caughtexception;

        r20 = $r18;

     label06:
        interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: void close()>();

     label07:
        goto label09;

     label08:
        $r12 := @caughtexception;

        r21 = $r12;

     label09:
        if r19 == null goto label12;

        $r22 = (java.lang.Iterable) r19;

        r23 = interfaceinvoke $r22.<java.lang.Iterable: java.util.Iterator iterator()>();

     label10:
        $z2 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label11;

        r24 = interfaceinvoke r23.<java.util.Iterator: java.lang.Object next()>();

        r25 = (android.util.Pair) r24;

        $r9 = r25.<android.util.Pair: java.lang.Object second>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r9, "p.second");

        $r10 = (java.lang.String) $r9;

        specialinvoke r0.<androidx.sqlite.db.SupportSQLiteOpenHelper$Callback: void deleteDatabaseFile(java.lang.String)>($r10);

        goto label10;

     label11:
        goto label13;

     label12:
        $r8 = interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: java.lang.String getPath()>();

        if $r8 == null goto label13;

        r26 = $r8;

        z7 = 0;

        specialinvoke r0.<androidx.sqlite.db.SupportSQLiteOpenHelper$Callback: void deleteDatabaseFile(java.lang.String)>(r26);

        goto label13;

     label13:
        goto label20;

     label14:
        $r14 := @caughtexception;

        r27 = $r14;

     label15:
        if r19 == null goto label18;

        $r28 = (java.lang.Iterable) r19;

        z8 = 0;

        r29 = interfaceinvoke $r28.<java.lang.Iterable: java.util.Iterator iterator()>();

     label16:
        $z3 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label17;

        r30 = interfaceinvoke r29.<java.util.Iterator: java.lang.Object next()>();

        $r31 = (android.util.Pair) r30;

        $r16 = $r31.<android.util.Pair: java.lang.Object second>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r16, "p.second");

        $r17 = (java.lang.String) $r16;

        specialinvoke r0.<androidx.sqlite.db.SupportSQLiteOpenHelper$Callback: void deleteDatabaseFile(java.lang.String)>($r17);

        goto label16;

     label17:
        goto label19;

     label18:
        $r15 = interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: java.lang.String getPath()>();

        if $r15 == null goto label19;

        r32 = $r15;

        z9 = 0;

        specialinvoke r0.<androidx.sqlite.db.SupportSQLiteOpenHelper$Callback: void deleteDatabaseFile(java.lang.String)>(r32);

        goto label19;

     label19:
        throw r27;

     label20:
        return;

        catch android.database.sqlite.SQLiteException from label03 to label04 with label05;
        catch java.io.IOException from label06 to label07 with label08;
        catch java.lang.Throwable from label03 to label09 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    private final void deleteDatabaseFile(java.lang.String)
    {
        androidx.sqlite.db.SupportSQLiteOpenHelper$Callback r0;
        java.lang.String r1, $r4, $r9, $r14;
        java.lang.CharSequence $r2, $r3, $r5;
        int i0, $i1, $i2, $i3, $i5, $i7, i10, i11, $i12;
        boolean $z3, z5, $z6, z7, $z8, $z9;
        java.lang.StringBuilder $r6, $r7, $r8, $r11, $r12, $r13;
        java.io.File $r10, $r15;
        java.lang.Throwable $r16, $r17, $r18, $r19;
        char c13;

        r0 := @this: androidx.sqlite.db.SupportSQLiteOpenHelper$Callback;

        r1 := @parameter0: java.lang.String;

        $z3 = staticinvoke <kotlin.text.StringsKt: boolean equals(java.lang.String,java.lang.String,boolean)>(r1, ":memory:", 1);

        if $z3 != 0 goto label12;

        $r2 = (java.lang.CharSequence) r1;

        i10 = 0;

        $i1 = interfaceinvoke $r2.<java.lang.CharSequence: int length()>();

        i11 = $i1 - 1;

        z5 = 0;

     label01:
        if i10 > i11 goto label09;

        if z5 != 0 goto label02;

        $i12 = i10;

        goto label03;

     label02:
        $i12 = i11;

     label03:
        i0 = $i12;

        c13 = interfaceinvoke $r2.<java.lang.CharSequence: char charAt(int)>(i0);

        $i7 = staticinvoke <kotlin.jvm.internal.Intrinsics: int compare(int,int)>(c13, 32);

        if $i7 > 0 goto label04;

        $z6 = 1;

        goto label05;

     label04:
        $z6 = 0;

     label05:
        z7 = $z6;

        if z5 != 0 goto label07;

        if z7 != 0 goto label06;

        z5 = 1;

        goto label01;

     label06:
        i10 = i10 + 1;

        goto label01;

     label07:
        if z7 != 0 goto label08;

        goto label09;

     label08:
        i11 = i11 + -1;

        goto label01;

     label09:
        $i2 = i11 + 1;

        $r3 = interfaceinvoke $r2.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(i10, $i2);

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        $r5 = (java.lang.CharSequence) $r4;

        $i3 = interfaceinvoke $r5.<java.lang.CharSequence: int length()>();

        if $i3 != 0 goto label10;

        $z8 = 1;

        goto label11;

     label10:
        $z8 = 0;

     label11:
        if $z8 == 0 goto label13;

     label12:
        return;

     label13:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("deleting the database file: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("SupportSQLite", $r9);

     label14:
        $i5 = <android.os.Build$VERSION: int SDK_INT>;

        if $i5 < 16 goto label15;

        $r15 = new java.io.File;

        specialinvoke $r15.<java.io.File: void <init>(java.lang.String)>(r1);

        staticinvoke <androidx.sqlite.db.SupportSQLiteCompat$Api16Impl: boolean deleteDatabase(java.io.File)>($r15);

        goto label20;

     label15:
        $r10 = new java.io.File;

        specialinvoke $r10.<java.io.File: void <init>(java.lang.String)>(r1);

        $z9 = virtualinvoke $r10.<java.io.File: boolean delete()>();

        if $z9 != 0 goto label20;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not delete the database file ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("SupportSQLite", $r14);

     label16:
        goto label20;

     label17:
        $r16 := @caughtexception;

        $r17 = (java.lang.Throwable) $r16;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SupportSQLite", "error while deleting corrupted database file", $r17);

     label18:
        goto label20;

     label19:
        $r18 := @caughtexception;

        $r19 = (java.lang.Throwable) $r18;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("SupportSQLite", "delete failed: ", $r19);

     label20:
        return;

        catch java.lang.Exception from label15 to label16 with label17;
        catch java.lang.Exception from label14 to label18 with label19;
    }

    static void <clinit>()
    {
        androidx.sqlite.db.SupportSQLiteOpenHelper$Callback$Companion $r0;

        $r0 = new androidx.sqlite.db.SupportSQLiteOpenHelper$Callback$Companion;

        specialinvoke $r0.<androidx.sqlite.db.SupportSQLiteOpenHelper$Callback$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.sqlite.db.SupportSQLiteOpenHelper$Callback: androidx.sqlite.db.SupportSQLiteOpenHelper$Callback$Companion Companion> = $r0;

        return;
    }

androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder
<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder: android.content.Context context>
<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder: java.lang.String name>
<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder: androidx.sqlite.db.SupportSQLiteOpenHelper$Callback callback>
<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder: boolean useNoBackupDirectory>
<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder: boolean allowDataLossOnRecovery>
    public void <init>(android.content.Context)
    {
        androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder r0;
        android.content.Context r1;

        r0 := @this: androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder;

        r1 := @parameter0: android.content.Context;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "context");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder: android.content.Context context> = r1;

        return;
    }

    public androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration build()
    {
        androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder r0;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Callback r1;
        boolean $z0, $z1, $z2, $z4, $z5;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration $r2;
        java.lang.String $r3, $r6, $r7, $r9, $r10, $r12;
        android.content.Context $r4;
        java.lang.IllegalArgumentException $r5, $r8;
        int $i0;
        java.lang.CharSequence $r11;

        r0 := @this: androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder;

        r1 = r0.<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder: androidx.sqlite.db.SupportSQLiteOpenHelper$Callback callback>;

        if r1 != null goto label1;

        $r10 = "Must set a callback to create the configuration.";

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = virtualinvoke $r10.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label1:
        $z0 = r0.<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder: boolean useNoBackupDirectory>;

        if $z0 == 0 goto label5;

        $r7 = r0.<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder: java.lang.String name>;

        $r11 = (java.lang.CharSequence) $r7;

        if $r11 == null goto label2;

        $i0 = interfaceinvoke $r11.<java.lang.CharSequence: int length()>();

        if $i0 != 0 goto label3;

     label2:
        $z4 = 1;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        if $z4 != 0 goto label6;

     label5:
        $z5 = 1;

        goto label7;

     label6:
        $z5 = 0;

     label7:
        if $z5 != 0 goto label8;

        $r12 = "Must set a non-null database name to a configuration that uses the no backup directory.";

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r12.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label8:
        $r2 = new androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration;

        $r4 = r0.<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder: android.content.Context context>;

        $r3 = r0.<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder: java.lang.String name>;

        $z2 = r0.<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder: boolean useNoBackupDirectory>;

        $z1 = r0.<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder: boolean allowDataLossOnRecovery>;

        specialinvoke $r2.<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration: void <init>(android.content.Context,java.lang.String,androidx.sqlite.db.SupportSQLiteOpenHelper$Callback,boolean,boolean)>($r4, $r3, r1, $z2, $z1);

        return $r2;
    }

    public androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder name(java.lang.String)
    {
        androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder r0, r2, $r3, $r4;
        java.lang.String r1;

        r0 := @this: androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder;

        r1 := @parameter0: java.lang.String;

        r2 = r0;

        $r3 = (androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder) r2;

        $r3.<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder: java.lang.String name> = r1;

        $r4 = (androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder) r2;

        return $r4;
    }

    public androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder callback(androidx.sqlite.db.SupportSQLiteOpenHelper$Callback)
    {
        androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder r0, r2, $r3, $r4;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Callback r1;

        r0 := @this: androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteOpenHelper$Callback;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "callback");

        r2 = r0;

        $r3 = (androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder) r2;

        $r3.<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder: androidx.sqlite.db.SupportSQLiteOpenHelper$Callback callback> = r1;

        $r4 = (androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder) r2;

        return $r4;
    }

    public androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder noBackupDirectory(boolean)
    {
        androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder r0, r1, $r2, $r3;
        boolean z0;

        r0 := @this: androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder;

        z0 := @parameter0: boolean;

        r1 = r0;

        $r2 = (androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder) r1;

        $r2.<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder: boolean useNoBackupDirectory> = z0;

        $r3 = (androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder) r1;

        return $r3;
    }

    public androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder allowDataLossOnRecovery(boolean)
    {
        androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder r0, r1, $r2, $r3;
        boolean z0;

        r0 := @this: androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder;

        z0 := @parameter0: boolean;

        r1 = r0;

        $r2 = (androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder) r1;

        $r2.<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder: boolean allowDataLossOnRecovery> = z0;

        $r3 = (androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder) r1;

        return $r3;
    }

androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Companion
    private void <init>()
    {
        androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Companion r0;

        r0 := @this: androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder builder(android.content.Context)
    {
        androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Companion r0;
        android.content.Context r1;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder $r2;

        r0 := @this: androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Companion;

        r1 := @parameter0: android.content.Context;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "context");

        $r2 = new androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder;

        specialinvoke $r2.<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder: void <init>(android.content.Context)>(r1);

        return $r2;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Companion: void <init>()>();

        return;
    }

androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration
<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration: androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Companion Companion>
<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration: android.content.Context context>
<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration: java.lang.String name>
<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration: androidx.sqlite.db.SupportSQLiteOpenHelper$Callback callback>
<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration: boolean useNoBackupDirectory>
<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration: boolean allowDataLossOnRecovery>
    public void <init>(android.content.Context, java.lang.String, androidx.sqlite.db.SupportSQLiteOpenHelper$Callback, boolean, boolean)
    {
        androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration r0;
        android.content.Context r1;
        java.lang.String r2;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Callback r3;
        boolean z0, z1;

        r0 := @this: androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: androidx.sqlite.db.SupportSQLiteOpenHelper$Callback;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "context");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "callback");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration: android.content.Context context> = r1;

        r0.<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration: java.lang.String name> = r2;

        r0.<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration: androidx.sqlite.db.SupportSQLiteOpenHelper$Callback callback> = r3;

        r0.<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration: boolean useNoBackupDirectory> = z0;

        r0.<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration: boolean allowDataLossOnRecovery> = z1;

        return;
    }

    public void <init>(android.content.Context, java.lang.String, androidx.sqlite.db.SupportSQLiteOpenHelper$Callback, boolean, boolean, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration r0;
        android.content.Context r1;
        java.lang.String r2;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Callback r3;
        int i0, $i1, $i2;
        kotlin.jvm.internal.DefaultConstructorMarker r4;
        boolean z0, z1;

        r0 := @this: androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: androidx.sqlite.db.SupportSQLiteOpenHelper$Callback;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        i0 := @parameter5: int;

        r4 := @parameter6: kotlin.jvm.internal.DefaultConstructorMarker;

        $i1 = i0 & 8;

        if $i1 == 0 goto label1;

        z0 = 0;

     label1:
        $i2 = i0 & 16;

        if $i2 == 0 goto label2;

        z1 = 0;

     label2:
        specialinvoke r0.<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration: void <init>(android.content.Context,java.lang.String,androidx.sqlite.db.SupportSQLiteOpenHelper$Callback,boolean,boolean)>(r1, r2, r3, z0, z1);

        return;
    }

    public static final androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder builder(android.content.Context)
    {
        android.content.Context r0;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Companion $r1;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder $r2;

        r0 := @parameter0: android.content.Context;

        $r1 = <androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration: androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Companion Companion>;

        $r2 = virtualinvoke $r1.<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Companion: androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder builder(android.content.Context)>(r0);

        return $r2;
    }

    static void <clinit>()
    {
        androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Companion $r0;

        $r0 = new androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Companion;

        specialinvoke $r0.<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration: androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Companion Companion> = $r0;

        return;
    }

androidx.sqlite.db.SupportSQLiteOpenHelper$Factory
<androidx.sqlite.db.SupportSQLiteOpenHelper$Factory: androidx.sqlite.db.SupportSQLiteOpenHelper create(androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration)>
