androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor
<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor: androidx.media3.exoplayer.hls.HlsExtractorFactory FACTORY>
<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor: androidx.media3.exoplayer.source.mediaparser.OutputConsumerAdapterV30 outputConsumerAdapter>
<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor: androidx.media3.exoplayer.source.mediaparser.InputReaderAdapterV30 inputReaderAdapter>
<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor: android.media.MediaParser mediaParser>
<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor: androidx.media3.common.Format format>
<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor: boolean overrideInBandCaptionDeclarations>
<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor: com.google.common.collect.ImmutableList muxedCaptionMediaFormats>
<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor: androidx.media3.exoplayer.analytics.PlayerId playerId>
<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor: int pendingSkipBytes>
    public void <init>(android.media.MediaParser, androidx.media3.exoplayer.source.mediaparser.OutputConsumerAdapterV30, androidx.media3.common.Format, boolean, com.google.common.collect.ImmutableList, int, androidx.media3.exoplayer.analytics.PlayerId)
    {
        androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor r0;
        android.media.MediaParser r1;
        androidx.media3.exoplayer.source.mediaparser.OutputConsumerAdapterV30 r2;
        androidx.media3.common.Format r3;
        boolean z0;
        com.google.common.collect.ImmutableList r4;
        int i0;
        androidx.media3.exoplayer.analytics.PlayerId r5;
        androidx.media3.exoplayer.source.mediaparser.InputReaderAdapterV30 $r6;

        r0 := @this: androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor;

        r1 := @parameter0: android.media.MediaParser;

        r2 := @parameter1: androidx.media3.exoplayer.source.mediaparser.OutputConsumerAdapterV30;

        r3 := @parameter2: androidx.media3.common.Format;

        z0 := @parameter3: boolean;

        r4 := @parameter4: com.google.common.collect.ImmutableList;

        i0 := @parameter5: int;

        r5 := @parameter6: androidx.media3.exoplayer.analytics.PlayerId;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor: android.media.MediaParser mediaParser> = r1;

        r0.<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor: androidx.media3.exoplayer.source.mediaparser.OutputConsumerAdapterV30 outputConsumerAdapter> = r2;

        r0.<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor: boolean overrideInBandCaptionDeclarations> = z0;

        r0.<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor: com.google.common.collect.ImmutableList muxedCaptionMediaFormats> = r4;

        r0.<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor: androidx.media3.common.Format format> = r3;

        r0.<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor: androidx.media3.exoplayer.analytics.PlayerId playerId> = r5;

        r0.<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor: int pendingSkipBytes> = i0;

        $r6 = new androidx.media3.exoplayer.source.mediaparser.InputReaderAdapterV30;

        specialinvoke $r6.<androidx.media3.exoplayer.source.mediaparser.InputReaderAdapterV30: void <init>()>();

        r0.<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor: androidx.media3.exoplayer.source.mediaparser.InputReaderAdapterV30 inputReaderAdapter> = $r6;

        return;
    }

    public void init(androidx.media3.extractor.ExtractorOutput)
    {
        androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor r0;
        androidx.media3.extractor.ExtractorOutput r1;
        androidx.media3.exoplayer.source.mediaparser.OutputConsumerAdapterV30 $r2;

        r0 := @this: androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor;

        r1 := @parameter0: androidx.media3.extractor.ExtractorOutput;

        $r2 = r0.<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor: androidx.media3.exoplayer.source.mediaparser.OutputConsumerAdapterV30 outputConsumerAdapter>;

        virtualinvoke $r2.<androidx.media3.exoplayer.source.mediaparser.OutputConsumerAdapterV30: void setExtractorOutput(androidx.media3.extractor.ExtractorOutput)>(r1);

        return;
    }

    public boolean read(androidx.media3.extractor.ExtractorInput) throws java.io.IOException
    {
        androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor r0;
        androidx.media3.extractor.ExtractorInput r1;
        int $i0;
        androidx.media3.exoplayer.source.mediaparser.InputReaderAdapterV30 $r2, $r3;
        long $l1;
        android.media.MediaParser $r4;
        boolean $z0;
        android.media.MediaParser$SeekableInputReader r5;

        r0 := @this: androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor;

        r1 := @parameter0: androidx.media3.extractor.ExtractorInput;

        $i0 = r0.<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor: int pendingSkipBytes>;

        interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: void skipFully(int)>($i0);

        r0.<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor: int pendingSkipBytes> = 0;

        $r2 = r0.<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor: androidx.media3.exoplayer.source.mediaparser.InputReaderAdapterV30 inputReaderAdapter>;

        $l1 = interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: long getLength()>();

        virtualinvoke $r2.<androidx.media3.exoplayer.source.mediaparser.InputReaderAdapterV30: void setDataReader(androidx.media3.common.DataReader,long)>(r1, $l1);

        $r4 = r0.<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor: android.media.MediaParser mediaParser>;

        $r3 = r0.<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor: androidx.media3.exoplayer.source.mediaparser.InputReaderAdapterV30 inputReaderAdapter>;

        r5 = (android.media.MediaParser$SeekableInputReader) $r3;

        $z0 = virtualinvoke $r4.<android.media.MediaParser: boolean advance(android.media.MediaParser$SeekableInputReader)>(r5);

        return $z0;
    }

    public boolean isPackedAudioExtractor()
    {
        androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor r0;
        java.lang.String r1, $r3, $r4, $r5, $r6;
        android.media.MediaParser $r2;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor;

        $r2 = r0.<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor: android.media.MediaParser mediaParser>;

        r1 = virtualinvoke $r2.<android.media.MediaParser: java.lang.String getParserName()>();

        $r3 = "android.media.mediaparser.Ac3Parser";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r4 = "android.media.mediaparser.Ac4Parser";

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 != 0 goto label1;

        $r5 = "android.media.mediaparser.AdtsParser";

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 != 0 goto label1;

        $r6 = "android.media.mediaparser.Mp3Parser";

        $z3 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z3 == 0 goto label2;

     label1:
        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        return $z4;
    }

    public boolean isReusable()
    {
        androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor r0;
        java.lang.String r1, $r3, $r4;
        android.media.MediaParser $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor;

        $r2 = r0.<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor: android.media.MediaParser mediaParser>;

        r1 = virtualinvoke $r2.<android.media.MediaParser: java.lang.String getParserName()>();

        $r3 = "android.media.mediaparser.FragmentedMp4Parser";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r4 = "android.media.mediaparser.TsParser";

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public androidx.media3.exoplayer.hls.HlsMediaChunkExtractor recreate()
    {
        androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor r0, $r1;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String[] $r2;
        android.media.MediaParser $r3, $r9;
        androidx.media3.exoplayer.source.mediaparser.OutputConsumerAdapterV30 $r4, $r13;
        androidx.media3.common.Format $r5, $r12;
        com.google.common.collect.ImmutableList $r6, $r11;
        androidx.media3.exoplayer.analytics.PlayerId $r7, $r10;
        java.lang.String $r8;

        r0 := @this: androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor;

        $z0 = virtualinvoke r0.<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor: boolean isReusable()>();

        if $z0 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z3);

        $r1 = new androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor;

        $r4 = r0.<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor: androidx.media3.exoplayer.source.mediaparser.OutputConsumerAdapterV30 outputConsumerAdapter>;

        $r5 = r0.<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor: androidx.media3.common.Format format>;

        $z1 = r0.<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor: boolean overrideInBandCaptionDeclarations>;

        $r6 = r0.<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor: com.google.common.collect.ImmutableList muxedCaptionMediaFormats>;

        $r7 = r0.<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor: androidx.media3.exoplayer.analytics.PlayerId playerId>;

        $r2 = newarray (java.lang.String)[1];

        $r3 = r0.<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor: android.media.MediaParser mediaParser>;

        $r8 = virtualinvoke $r3.<android.media.MediaParser: java.lang.String getParserName()>();

        $r2[0] = $r8;

        $r9 = staticinvoke <androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor: android.media.MediaParser createMediaParserInstance(android.media.MediaParser$OutputConsumer,androidx.media3.common.Format,boolean,com.google.common.collect.ImmutableList,androidx.media3.exoplayer.analytics.PlayerId,java.lang.String[])>($r4, $r5, $z1, $r6, $r7, $r2);

        $r13 = r0.<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor: androidx.media3.exoplayer.source.mediaparser.OutputConsumerAdapterV30 outputConsumerAdapter>;

        $r12 = r0.<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor: androidx.media3.common.Format format>;

        $z2 = r0.<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor: boolean overrideInBandCaptionDeclarations>;

        $r11 = r0.<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor: com.google.common.collect.ImmutableList muxedCaptionMediaFormats>;

        $r10 = r0.<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor: androidx.media3.exoplayer.analytics.PlayerId playerId>;

        specialinvoke $r1.<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor: void <init>(android.media.MediaParser,androidx.media3.exoplayer.source.mediaparser.OutputConsumerAdapterV30,androidx.media3.common.Format,boolean,com.google.common.collect.ImmutableList,int,androidx.media3.exoplayer.analytics.PlayerId)>($r9, $r13, $r12, $z2, $r11, 0, $r10);

        return $r1;
    }

    public void onTruncatedSegmentParsed()
    {
        androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor r0;
        android.media.MediaParser$SeekPoint $r1;
        android.media.MediaParser $r2;

        r0 := @this: androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor;

        $r2 = r0.<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor: android.media.MediaParser mediaParser>;

        $r1 = <android.media.MediaParser$SeekPoint: android.media.MediaParser$SeekPoint START>;

        virtualinvoke $r2.<android.media.MediaParser: void seek(android.media.MediaParser$SeekPoint)>($r1);

        return;
    }

    private static transient android.media.MediaParser createMediaParserInstance(android.media.MediaParser$OutputConsumer, androidx.media3.common.Format, boolean, com.google.common.collect.ImmutableList, androidx.media3.exoplayer.analytics.PlayerId, java.lang.String[])
    {
        android.media.MediaParser$OutputConsumer r0;
        androidx.media3.common.Format r1;
        boolean z0, $z1, $z2, $z3;
        com.google.common.collect.ImmutableList r2;
        androidx.media3.exoplayer.analytics.PlayerId r3;
        java.lang.String[] r4;
        android.media.MediaParser r5, $r28;
        java.lang.String r6, $r19, $r20, $r21, $r22, $r27;
        int $i0, $i1;
        java.lang.Boolean $r8, $r10, $r12, $r14, $r16, $r23, $r25;

        r0 := @parameter0: android.media.MediaParser$OutputConsumer;

        r1 := @parameter1: androidx.media3.common.Format;

        z0 := @parameter2: boolean;

        r2 := @parameter3: com.google.common.collect.ImmutableList;

        r3 := @parameter4: androidx.media3.exoplayer.analytics.PlayerId;

        r4 := @parameter5: java.lang.String[];

        $i0 = lengthof r4;

        if $i0 != 1 goto label1;

        $r27 = r4[0];

        $r28 = staticinvoke <android.media.MediaParser: android.media.MediaParser createByName(java.lang.String,android.media.MediaParser$OutputConsumer)>($r27, r0);

        goto label2;

     label1:
        $r28 = staticinvoke <android.media.MediaParser: android.media.MediaParser create(android.media.MediaParser$OutputConsumer,java.lang.String[])>(r0, r4);

     label2:
        r5 = $r28;

        virtualinvoke r5.<android.media.MediaParser: android.media.MediaParser setParameter(java.lang.String,java.lang.Object)>("android.media.mediaParser.exposeCaptionFormats", r2);

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        virtualinvoke r5.<android.media.MediaParser: android.media.MediaParser setParameter(java.lang.String,java.lang.Object)>("android.media.mediaParser.overrideInBandCaptionDeclarations", $r8);

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke r5.<android.media.MediaParser: android.media.MediaParser setParameter(java.lang.String,java.lang.Object)>("android.media.mediaparser.inBandCryptoInfo", $r10);

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke r5.<android.media.MediaParser: android.media.MediaParser setParameter(java.lang.String,java.lang.Object)>("android.media.mediaparser.eagerlyExposeTrackType", $r12);

        $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke r5.<android.media.MediaParser: android.media.MediaParser setParameter(java.lang.String,java.lang.Object)>("android.media.mediaparser.ignoreTimestampOffset", $r14);

        $r16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke r5.<android.media.MediaParser: android.media.MediaParser setParameter(java.lang.String,java.lang.Object)>("android.media.mediaparser.ts.ignoreSpliceInfoStream", $r16);

        virtualinvoke r5.<android.media.MediaParser: android.media.MediaParser setParameter(java.lang.String,java.lang.Object)>("android.media.mediaparser.ts.mode", "hls");

        r6 = r1.<androidx.media3.common.Format: java.lang.String codecs>;

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r6);

        if $z1 != 0 goto label4;

        $r19 = "audio/mp4a-latm";

        $r20 = staticinvoke <androidx.media3.common.MimeTypes: java.lang.String getAudioMediaMimeType(java.lang.String)>(r6);

        $z2 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>($r20);

        if $z2 != 0 goto label3;

        $r25 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke r5.<android.media.MediaParser: android.media.MediaParser setParameter(java.lang.String,java.lang.Object)>("android.media.mediaparser.ts.ignoreAacStream", $r25);

     label3:
        $r21 = "video/avc";

        $r22 = staticinvoke <androidx.media3.common.MimeTypes: java.lang.String getVideoMediaMimeType(java.lang.String)>(r6);

        $z3 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>($r22);

        if $z3 != 0 goto label4;

        $r23 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke r5.<android.media.MediaParser: android.media.MediaParser setParameter(java.lang.String,java.lang.Object)>("android.media.mediaparser.ts.ignoreAvcStream", $r23);

     label4:
        $i1 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i1 < 31 goto label5;

        staticinvoke <androidx.media3.exoplayer.source.mediaparser.MediaParserUtil: void setLogSessionIdOnMediaParser(android.media.MediaParser,androidx.media3.exoplayer.analytics.PlayerId)>(r5, r3);

     label5:
        return r5;
    }

    private static androidx.media3.exoplayer.hls.HlsMediaChunkExtractor lambda$static$0(android.net.Uri, androidx.media3.common.Format, java.util.List, androidx.media3.common.util.TimestampAdjuster, java.util.Map, androidx.media3.extractor.ExtractorInput, androidx.media3.exoplayer.analytics.PlayerId) throws java.io.IOException
    {
        android.net.Uri r0;
        androidx.media3.common.Format r1, $r14, $r24;
        java.util.List r2, r38;
        androidx.media3.common.util.TimestampAdjuster r3;
        java.util.Map r4;
        androidx.media3.extractor.ExtractorInput r5;
        androidx.media3.exoplayer.analytics.PlayerId r6;
        boolean z0, $z2;
        com.google.common.collect.ImmutableList$Builder r7;
        androidx.media3.exoplayer.source.mediaparser.OutputConsumerAdapterV30 r8, r35;
        android.media.MediaParser r9;
        androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor$PeekingInputReader r10, r36;
        java.lang.String $r11, $r20, $r29;
        int $i0, $i1, $i2, i3;
        androidx.media3.common.Format$Builder $r13, r34;
        android.media.MediaFormat $r15, $r25;
        java.lang.String[] $r18;
        java.lang.Object $r23, $r31;
        com.google.common.collect.ImmutableList r30;
        androidx.media3.exoplayer.hls.WebvttExtractor r32;
        androidx.media3.exoplayer.hls.BundledHlsMediaChunkExtractor r33;
        androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor r37;

        r0 := @parameter0: android.net.Uri;

        r1 := @parameter1: androidx.media3.common.Format;

        r2 := @parameter2: java.util.List;

        r3 := @parameter3: androidx.media3.common.util.TimestampAdjuster;

        r4 := @parameter4: java.util.Map;

        r5 := @parameter5: androidx.media3.extractor.ExtractorInput;

        r6 := @parameter6: androidx.media3.exoplayer.analytics.PlayerId;

        $r11 = r1.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        $i0 = staticinvoke <androidx.media3.common.FileTypes: int inferFileTypeFromMimeType(java.lang.String)>($r11);

        if $i0 != 13 goto label1;

        r33 = new androidx.media3.exoplayer.hls.BundledHlsMediaChunkExtractor;

        r32 = new androidx.media3.exoplayer.hls.WebvttExtractor;

        $r29 = r1.<androidx.media3.common.Format: java.lang.String language>;

        specialinvoke r32.<androidx.media3.exoplayer.hls.WebvttExtractor: void <init>(java.lang.String,androidx.media3.common.util.TimestampAdjuster)>($r29, r3);

        specialinvoke r33.<androidx.media3.exoplayer.hls.BundledHlsMediaChunkExtractor: void <init>(androidx.media3.extractor.Extractor,androidx.media3.common.Format,androidx.media3.common.util.TimestampAdjuster)>(r32, r1, r3);

        return r33;

     label1:
        if r2 == null goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        z0 = $z2;

        r7 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList$Builder builder()>();

        if r2 == null goto label6;

        i3 = 0;

     label4:
        $i2 = interfaceinvoke r2.<java.util.List: int size()>();

        if i3 >= $i2 goto label5;

        $r23 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i3);

        $r24 = (androidx.media3.common.Format) $r23;

        $r25 = staticinvoke <androidx.media3.exoplayer.source.mediaparser.MediaParserUtil: android.media.MediaFormat toCaptionsMediaFormat(androidx.media3.common.Format)>($r24);

        virtualinvoke r7.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList$Builder add(java.lang.Object)>($r25);

        i3 = i3 + 1;

        goto label4;

     label5:
        goto label7;

     label6:
        r34 = new androidx.media3.common.Format$Builder;

        specialinvoke r34.<androidx.media3.common.Format$Builder: void <init>()>();

        $r13 = virtualinvoke r34.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setSampleMimeType(java.lang.String)>("application/cea-608");

        $r14 = virtualinvoke $r13.<androidx.media3.common.Format$Builder: androidx.media3.common.Format build()>();

        $r15 = staticinvoke <androidx.media3.exoplayer.source.mediaparser.MediaParserUtil: android.media.MediaFormat toCaptionsMediaFormat(androidx.media3.common.Format)>($r14);

        virtualinvoke r7.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList$Builder add(java.lang.Object)>($r15);

     label7:
        r30 = virtualinvoke r7.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList build()>();

        r35 = new androidx.media3.exoplayer.source.mediaparser.OutputConsumerAdapterV30;

        specialinvoke r35.<androidx.media3.exoplayer.source.mediaparser.OutputConsumerAdapterV30: void <init>()>();

        r8 = r35;

        if r2 == null goto label8;

        $r31 = r2;

        goto label9;

     label8:
        $r31 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of()>();

     label9:
        r38 = (java.util.List) $r31;

        virtualinvoke r8.<androidx.media3.exoplayer.source.mediaparser.OutputConsumerAdapterV30: void setMuxedCaptionFormats(java.util.List)>(r38);

        virtualinvoke r8.<androidx.media3.exoplayer.source.mediaparser.OutputConsumerAdapterV30: void setTimestampAdjuster(androidx.media3.common.util.TimestampAdjuster)>(r3);

        $r18 = newarray (java.lang.String)[6];

        $r18[0] = "android.media.mediaparser.FragmentedMp4Parser";

        $r18[1] = "android.media.mediaparser.Ac3Parser";

        $r18[2] = "android.media.mediaparser.Ac4Parser";

        $r18[3] = "android.media.mediaparser.AdtsParser";

        $r18[4] = "android.media.mediaparser.Mp3Parser";

        $r18[5] = "android.media.mediaparser.TsParser";

        r9 = staticinvoke <androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor: android.media.MediaParser createMediaParserInstance(android.media.MediaParser$OutputConsumer,androidx.media3.common.Format,boolean,com.google.common.collect.ImmutableList,androidx.media3.exoplayer.analytics.PlayerId,java.lang.String[])>(r8, r1, z0, r30, r6, $r18);

        r36 = new androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor$PeekingInputReader;

        specialinvoke r36.<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor$PeekingInputReader: void <init>(androidx.media3.extractor.ExtractorInput,androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor$1)>(r5, null);

        r10 = r36;

        virtualinvoke r9.<android.media.MediaParser: boolean advance(android.media.MediaParser$SeekableInputReader)>(r10);

        $r20 = virtualinvoke r9.<android.media.MediaParser: java.lang.String getParserName()>();

        virtualinvoke r8.<androidx.media3.exoplayer.source.mediaparser.OutputConsumerAdapterV30: void setSelectedParserName(java.lang.String)>($r20);

        r37 = new androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor;

        $i1 = staticinvoke <androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor$PeekingInputReader: int access$100(androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor$PeekingInputReader)>(r10);

        specialinvoke r37.<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor: void <init>(android.media.MediaParser,androidx.media3.exoplayer.source.mediaparser.OutputConsumerAdapterV30,androidx.media3.common.Format,boolean,com.google.common.collect.ImmutableList,int,androidx.media3.exoplayer.analytics.PlayerId)>(r9, r8, r1, z0, r30, $i1, r6);

        return r37;
    }

    static void <clinit>()
    {
        androidx.media3.exoplayer.hls.HlsExtractorFactory $r0;

        $r0 = dynamicinvoke "createExtractor" <androidx.media3.exoplayer.hls.HlsExtractorFactory ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: androidx.media3.exoplayer.hls.HlsMediaChunkExtractor __METHODTYPE__(android.net.Uri,androidx.media3.common.Format,java.util.List,androidx.media3.common.util.TimestampAdjuster,java.util.Map,androidx.media3.extractor.ExtractorInput,androidx.media3.exoplayer.analytics.PlayerId), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor: androidx.media3.exoplayer.hls.HlsMediaChunkExtractor lambda$static$0(android.net.Uri,androidx.media3.common.Format,java.util.List,androidx.media3.common.util.TimestampAdjuster,java.util.Map,androidx.media3.extractor.ExtractorInput,androidx.media3.exoplayer.analytics.PlayerId)>, methodtype: androidx.media3.exoplayer.hls.HlsMediaChunkExtractor __METHODTYPE__(android.net.Uri,androidx.media3.common.Format,java.util.List,androidx.media3.common.util.TimestampAdjuster,java.util.Map,androidx.media3.extractor.ExtractorInput,androidx.media3.exoplayer.analytics.PlayerId));

        <androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor: androidx.media3.exoplayer.hls.HlsExtractorFactory FACTORY> = $r0;

        return;
    }

androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor$1
androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor$PeekingInputReader
<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor$PeekingInputReader: androidx.media3.extractor.ExtractorInput extractorInput>
<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor$PeekingInputReader: int totalPeekedBytes>
    private void <init>(androidx.media3.extractor.ExtractorInput)
    {
        androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor$PeekingInputReader r0;
        androidx.media3.extractor.ExtractorInput r1;

        r0 := @this: androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor$PeekingInputReader;

        r1 := @parameter0: androidx.media3.extractor.ExtractorInput;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor$PeekingInputReader: androidx.media3.extractor.ExtractorInput extractorInput> = r1;

        return;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor$PeekingInputReader r0;
        byte[] r1;
        int i0, i1, i2, $i3, $i4;
        androidx.media3.extractor.ExtractorInput $r2;

        r0 := @this: androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor$PeekingInputReader;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor$PeekingInputReader: androidx.media3.extractor.ExtractorInput extractorInput>;

        i2 = interfaceinvoke $r2.<androidx.media3.extractor.ExtractorInput: int peek(byte[],int,int)>(r1, i0, i1);

        $i3 = r0.<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor$PeekingInputReader: int totalPeekedBytes>;

        $i4 = $i3 + i2;

        r0.<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor$PeekingInputReader: int totalPeekedBytes> = $i4;

        return i2;
    }

    public long getPosition()
    {
        androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor$PeekingInputReader r0;
        androidx.media3.extractor.ExtractorInput $r1;
        long $l0;

        r0 := @this: androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor$PeekingInputReader;

        $r1 = r0.<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor$PeekingInputReader: androidx.media3.extractor.ExtractorInput extractorInput>;

        $l0 = interfaceinvoke $r1.<androidx.media3.extractor.ExtractorInput: long getPeekPosition()>();

        return $l0;
    }

    public long getLength()
    {
        androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor$PeekingInputReader r0;
        androidx.media3.extractor.ExtractorInput $r1;
        long $l0;

        r0 := @this: androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor$PeekingInputReader;

        $r1 = r0.<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor$PeekingInputReader: androidx.media3.extractor.ExtractorInput extractorInput>;

        $l0 = interfaceinvoke $r1.<androidx.media3.extractor.ExtractorInput: long getLength()>();

        return $l0;
    }

    public void seekToPosition(long)
    {
        androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor$PeekingInputReader r0;
        long l0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor$PeekingInputReader;

        l0 := @parameter0: long;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    void <init>(androidx.media3.extractor.ExtractorInput, androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor$1)
    {
        androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor$PeekingInputReader r0;
        androidx.media3.extractor.ExtractorInput r1;
        androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor$1 r2;

        r0 := @this: androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor$PeekingInputReader;

        r1 := @parameter0: androidx.media3.extractor.ExtractorInput;

        r2 := @parameter1: androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor$1;

        specialinvoke r0.<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor$PeekingInputReader: void <init>(androidx.media3.extractor.ExtractorInput)>(r1);

        return;
    }

    static int access$100(androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor$PeekingInputReader)
    {
        androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor$PeekingInputReader r0;
        int $i0;

        r0 := @parameter0: androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor$PeekingInputReader;

        $i0 = r0.<androidx.media3.exoplayer.hls.MediaParserHlsMediaChunkExtractor$PeekingInputReader: int totalPeekedBytes>;

        return $i0;
    }

