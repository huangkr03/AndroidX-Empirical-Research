kotlin.collections.builders.MapBuilder
<kotlin.collections.builders.MapBuilder: kotlin.collections.builders.MapBuilder$Companion Companion>
<kotlin.collections.builders.MapBuilder: int INITIAL_CAPACITY>
<kotlin.collections.builders.MapBuilder: int INITIAL_MAX_PROBE_DISTANCE>
<kotlin.collections.builders.MapBuilder: int MAGIC>
<kotlin.collections.builders.MapBuilder: int TOMBSTONE>
<kotlin.collections.builders.MapBuilder: kotlin.collections.builders.MapBuilderEntries entriesView>
<kotlin.collections.builders.MapBuilder: int[] hashArray>
<kotlin.collections.builders.MapBuilder: int hashShift>
<kotlin.collections.builders.MapBuilder: boolean isReadOnly>
<kotlin.collections.builders.MapBuilder: java.lang.Object[] keysArray>
<kotlin.collections.builders.MapBuilder: kotlin.collections.builders.MapBuilderKeys keysView>
<kotlin.collections.builders.MapBuilder: int length>
<kotlin.collections.builders.MapBuilder: int maxProbeDistance>
<kotlin.collections.builders.MapBuilder: int[] presenceArray>
<kotlin.collections.builders.MapBuilder: int size>
<kotlin.collections.builders.MapBuilder: java.lang.Object[] valuesArray>
<kotlin.collections.builders.MapBuilder: kotlin.collections.builders.MapBuilderValues valuesView>
    static void <clinit>()
    {
        kotlin.collections.builders.MapBuilder$Companion $r0;

        $r0 = new kotlin.collections.builders.MapBuilder$Companion;

        specialinvoke $r0.<kotlin.collections.builders.MapBuilder$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <kotlin.collections.builders.MapBuilder: kotlin.collections.builders.MapBuilder$Companion Companion> = $r0;

        return;
    }

    public void <init>()
    {
        kotlin.collections.builders.MapBuilder $r0;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        specialinvoke $r0.<kotlin.collections.builders.MapBuilder: void <init>(int)>(8);

        return;
    }

    public void <init>(int)
    {
        kotlin.collections.builders.MapBuilder $r0;
        int[] $r1, $r2;
        int $i0;
        java.lang.Object[] $r3;
        kotlin.collections.builders.MapBuilder$Companion $r4;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        $i0 := @parameter0: int;

        $r3 = staticinvoke <kotlin.collections.builders.ListBuilderKt: java.lang.Object[] arrayOfUninitializedElements(int)>($i0);

        $r1 = newarray (int)[$i0];

        $r4 = <kotlin.collections.builders.MapBuilder: kotlin.collections.builders.MapBuilder$Companion Companion>;

        $i0 = staticinvoke <kotlin.collections.builders.MapBuilder$Companion: int access$computeHashSize(kotlin.collections.builders.MapBuilder$Companion,int)>($r4, $i0);

        $r2 = newarray (int)[$i0];

        specialinvoke $r0.<kotlin.collections.builders.MapBuilder: void <init>(java.lang.Object[],java.lang.Object[],int[],int[],int,int)>($r3, null, $r1, $r2, 2, 0);

        return;
    }

    private void <init>(java.lang.Object[], java.lang.Object[], int[], int[], int, int)
    {
        kotlin.collections.builders.MapBuilder $r0;
        int[] $r1, $r2;
        int $i0, $i1;
        java.lang.Object[] $r3, $r4;
        kotlin.collections.builders.MapBuilder$Companion $r5;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        $r3 := @parameter0: java.lang.Object[];

        $r4 := @parameter1: java.lang.Object[];

        $r1 := @parameter2: int[];

        $r2 := @parameter3: int[];

        $i0 := @parameter4: int;

        $i1 := @parameter5: int;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<kotlin.collections.builders.MapBuilder: java.lang.Object[] keysArray> = $r3;

        $r0.<kotlin.collections.builders.MapBuilder: java.lang.Object[] valuesArray> = $r4;

        $r0.<kotlin.collections.builders.MapBuilder: int[] presenceArray> = $r1;

        $r0.<kotlin.collections.builders.MapBuilder: int[] hashArray> = $r2;

        $r0.<kotlin.collections.builders.MapBuilder: int maxProbeDistance> = $i0;

        $r0.<kotlin.collections.builders.MapBuilder: int length> = $i1;

        $r5 = <kotlin.collections.builders.MapBuilder: kotlin.collections.builders.MapBuilder$Companion Companion>;

        $i0 = specialinvoke $r0.<kotlin.collections.builders.MapBuilder: int getHashSize()>();

        $i0 = staticinvoke <kotlin.collections.builders.MapBuilder$Companion: int access$computeShift(kotlin.collections.builders.MapBuilder$Companion,int)>($r5, $i0);

        $r0.<kotlin.collections.builders.MapBuilder: int hashShift> = $i0;

        return;
    }

    public static final java.lang.Object[] access$allocateValuesArray(kotlin.collections.builders.MapBuilder)
    {
        java.lang.Object[] $r0;
        kotlin.collections.builders.MapBuilder $r1;

        $r1 := @parameter0: kotlin.collections.builders.MapBuilder;

        $r0 = specialinvoke $r1.<kotlin.collections.builders.MapBuilder: java.lang.Object[] allocateValuesArray()>();

        return $r0;
    }

    public static final java.lang.Object[] access$getKeysArray$p(kotlin.collections.builders.MapBuilder)
    {
        kotlin.collections.builders.MapBuilder $r0;
        java.lang.Object[] r1;

        $r0 := @parameter0: kotlin.collections.builders.MapBuilder;

        r1 = $r0.<kotlin.collections.builders.MapBuilder: java.lang.Object[] keysArray>;

        return r1;
    }

    public static final int access$getLength$p(kotlin.collections.builders.MapBuilder)
    {
        kotlin.collections.builders.MapBuilder $r0;
        int i0;

        $r0 := @parameter0: kotlin.collections.builders.MapBuilder;

        i0 = $r0.<kotlin.collections.builders.MapBuilder: int length>;

        return i0;
    }

    public static final int[] access$getPresenceArray$p(kotlin.collections.builders.MapBuilder)
    {
        kotlin.collections.builders.MapBuilder $r0;
        int[] r1;

        $r0 := @parameter0: kotlin.collections.builders.MapBuilder;

        r1 = $r0.<kotlin.collections.builders.MapBuilder: int[] presenceArray>;

        return r1;
    }

    public static final java.lang.Object[] access$getValuesArray$p(kotlin.collections.builders.MapBuilder)
    {
        kotlin.collections.builders.MapBuilder $r0;
        java.lang.Object[] r1;

        $r0 := @parameter0: kotlin.collections.builders.MapBuilder;

        r1 = $r0.<kotlin.collections.builders.MapBuilder: java.lang.Object[] valuesArray>;

        return r1;
    }

    public static final void access$removeKeyAt(kotlin.collections.builders.MapBuilder, int)
    {
        kotlin.collections.builders.MapBuilder $r0;
        int $i0;

        $r0 := @parameter0: kotlin.collections.builders.MapBuilder;

        $i0 := @parameter1: int;

        specialinvoke $r0.<kotlin.collections.builders.MapBuilder: void removeKeyAt(int)>($i0);

        return;
    }

    private final java.lang.Object[] allocateValuesArray()
    {
        kotlin.collections.builders.MapBuilder $r0;
        java.lang.Object[] $r1;
        int $i0;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        $r1 = $r0.<kotlin.collections.builders.MapBuilder: java.lang.Object[] valuesArray>;

        if $r1 == null goto label1;

        return $r1;

     label1:
        $i0 = specialinvoke $r0.<kotlin.collections.builders.MapBuilder: int getCapacity()>();

        $r1 = staticinvoke <kotlin.collections.builders.ListBuilderKt: java.lang.Object[] arrayOfUninitializedElements(int)>($i0);

        $r0.<kotlin.collections.builders.MapBuilder: java.lang.Object[] valuesArray> = $r1;

        return $r1;
    }

    private final void compact()
    {
        kotlin.collections.builders.MapBuilder $r0;
        java.lang.Object[] $r1, $r4;
        java.lang.Object $r2;
        int $i0, $i1, $i2;
        int[] $r3;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        $r1 = $r0.<kotlin.collections.builders.MapBuilder: java.lang.Object[] valuesArray>;

        $i0 = 0;

        $i1 = 0;

     label1:
        $i2 = $r0.<kotlin.collections.builders.MapBuilder: int length>;

        if $i0 >= $i2 goto label4;

        $r3 = $r0.<kotlin.collections.builders.MapBuilder: int[] presenceArray>;

        $i2 = $r3[$i0];

        if $i2 < 0 goto label3;

        $r4 = $r0.<kotlin.collections.builders.MapBuilder: java.lang.Object[] keysArray>;

        $r2 = $r4[$i0];

        $r4[$i1] = $r2;

        if $r1 == null goto label2;

        $r2 = $r1[$i0];

        $r1[$i1] = $r2;

     label2:
        $i1 = $i1 + 1;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        $r4 = $r0.<kotlin.collections.builders.MapBuilder: java.lang.Object[] keysArray>;

        staticinvoke <kotlin.collections.builders.ListBuilderKt: void resetRange(java.lang.Object[],int,int)>($r4, $i1, $i2);

        if $r1 == null goto label5;

        $i0 = $r0.<kotlin.collections.builders.MapBuilder: int length>;

        staticinvoke <kotlin.collections.builders.ListBuilderKt: void resetRange(java.lang.Object[],int,int)>($r1, $i1, $i0);

     label5:
        $r0.<kotlin.collections.builders.MapBuilder: int length> = $i1;

        return;
    }

    private final boolean contentEquals(java.util.Map)
    {
        kotlin.collections.builders.MapBuilder $r0;
        java.util.Map $r1;
        int $i0, $i1;
        java.util.Set $r2;
        boolean $z0;
        java.util.Collection r3;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        $r1 := @parameter0: java.util.Map;

        $i0 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder: int size()>();

        $i1 = interfaceinvoke $r1.<java.util.Map: int size()>();

        if $i0 != $i1 goto label1;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        r3 = (java.util.Collection) $r2;

        $z0 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder: boolean containsAllEntries$kotlin_stdlib(java.util.Collection)>(r3);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final void ensureCapacity(int)
    {
        kotlin.collections.builders.MapBuilder $r0;
        int $i0, $i1;
        java.lang.Object[] $r1;
        int[] $r2;
        kotlin.collections.builders.MapBuilder$Companion $r3;
        java.lang.OutOfMemoryError $r4;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label6;

        $i1 = specialinvoke $r0.<kotlin.collections.builders.MapBuilder: int getCapacity()>();

        if $i0 <= $i1 goto label4;

        $i1 = specialinvoke $r0.<kotlin.collections.builders.MapBuilder: int getCapacity()>();

        $i1 = $i1 * 3;

        $i1 = $i1 / 2;

        if $i0 > $i1 goto label1;

        $i0 = $i1;

     label1:
        $r1 = $r0.<kotlin.collections.builders.MapBuilder: java.lang.Object[] keysArray>;

        $r1 = staticinvoke <kotlin.collections.builders.ListBuilderKt: java.lang.Object[] copyOfUninitializedElements(java.lang.Object[],int)>($r1, $i0);

        $r0.<kotlin.collections.builders.MapBuilder: java.lang.Object[] keysArray> = $r1;

        $r1 = $r0.<kotlin.collections.builders.MapBuilder: java.lang.Object[] valuesArray>;

        if $r1 == null goto label2;

        $r1 = staticinvoke <kotlin.collections.builders.ListBuilderKt: java.lang.Object[] copyOfUninitializedElements(java.lang.Object[],int)>($r1, $i0);

        goto label3;

     label2:
        $r1 = null;

     label3:
        $r0.<kotlin.collections.builders.MapBuilder: java.lang.Object[] valuesArray> = $r1;

        $r2 = $r0.<kotlin.collections.builders.MapBuilder: int[] presenceArray>;

        $r2 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r2, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "copyOf(this, newSize)");

        $r0.<kotlin.collections.builders.MapBuilder: int[] presenceArray> = $r2;

        $r3 = <kotlin.collections.builders.MapBuilder: kotlin.collections.builders.MapBuilder$Companion Companion>;

        $i0 = staticinvoke <kotlin.collections.builders.MapBuilder$Companion: int access$computeHashSize(kotlin.collections.builders.MapBuilder$Companion,int)>($r3, $i0);

        $i1 = specialinvoke $r0.<kotlin.collections.builders.MapBuilder: int getHashSize()>();

        if $i0 <= $i1 goto label5;

        specialinvoke $r0.<kotlin.collections.builders.MapBuilder: void rehash(int)>($i0);

        return;

     label4:
        $i1 = $r0.<kotlin.collections.builders.MapBuilder: int length>;

        $i0 = $i1 + $i0;

        $i1 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder: int size()>();

        $i0 = $i0 - $i1;

        $i1 = specialinvoke $r0.<kotlin.collections.builders.MapBuilder: int getCapacity()>();

        if $i0 <= $i1 goto label8;

        $i0 = specialinvoke $r0.<kotlin.collections.builders.MapBuilder: int getHashSize()>();

        specialinvoke $r0.<kotlin.collections.builders.MapBuilder: void rehash(int)>($i0);

     label5:
        return;

     label6:
        $r4 = new java.lang.OutOfMemoryError;

        specialinvoke $r4.<java.lang.OutOfMemoryError: void <init>()>();

        goto label7;

     label7:
        throw $r4;

     label8:
        return;
    }

    private final void ensureExtraCapacity(int)
    {
        kotlin.collections.builders.MapBuilder $r0;
        int $i0, $i1;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        $i0 := @parameter0: int;

        $i1 = $r0.<kotlin.collections.builders.MapBuilder: int length>;

        $i0 = $i1 + $i0;

        specialinvoke $r0.<kotlin.collections.builders.MapBuilder: void ensureCapacity(int)>($i0);

        return;
    }

    private final int findKey(java.lang.Object)
    {
        kotlin.collections.builders.MapBuilder $r0;
        java.lang.Object $r1, $r4;
        int $i0, $i1, $i2;
        int[] $r2;
        java.lang.Object[] $r3;
        boolean $z0;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        $r1 := @parameter0: java.lang.Object;

        $i1 = specialinvoke $r0.<kotlin.collections.builders.MapBuilder: int hash(java.lang.Object)>($r1);

        $i0 = $r0.<kotlin.collections.builders.MapBuilder: int maxProbeDistance>;

     label1:
        $r2 = $r0.<kotlin.collections.builders.MapBuilder: int[] hashArray>;

        $i2 = $r2[$i1];

        if $i2 != 0 goto label2;

        return -1;

     label2:
        if $i2 <= 0 goto label3;

        $r3 = $r0.<kotlin.collections.builders.MapBuilder: java.lang.Object[] keysArray>;

        $i2 = $i2 + -1;

        $r4 = $r3[$i2];

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, $r1);

        if $z0 == 0 goto label3;

        return $i2;

     label3:
        $i0 = $i0 + -1;

        if $i0 >= 0 goto label4;

        return -1;

     label4:
        if $i1 != 0 goto label5;

        $i1 = specialinvoke $r0.<kotlin.collections.builders.MapBuilder: int getHashSize()>();

        $i1 = $i1 + -1;

        goto label1;

     label5:
        $i1 = $i1 + -1;

        goto label1;
    }

    private final int findValue(java.lang.Object)
    {
        kotlin.collections.builders.MapBuilder $r0;
        java.lang.Object $r1, $r4;
        boolean $z0;
        int $i0, $i1;
        int[] $r2;
        java.lang.Object[] $r3;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        $r1 := @parameter0: java.lang.Object;

        $i0 = $r0.<kotlin.collections.builders.MapBuilder: int length>;

     label1:
        $i0 = $i0 + -1;

        if $i0 < 0 goto label2;

        $r2 = $r0.<kotlin.collections.builders.MapBuilder: int[] presenceArray>;

        $i1 = $r2[$i0];

        if $i1 < 0 goto label1;

        $r3 = $r0.<kotlin.collections.builders.MapBuilder: java.lang.Object[] valuesArray>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r3);

        $r4 = $r3[$i0];

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, $r1);

        if $z0 == 0 goto label1;

        return $i0;

     label2:
        return -1;
    }

    private final int getCapacity()
    {
        kotlin.collections.builders.MapBuilder $r0;
        java.lang.Object[] $r1;
        int $i0;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        $r1 = $r0.<kotlin.collections.builders.MapBuilder: java.lang.Object[] keysArray>;

        $i0 = lengthof $r1;

        return $i0;
    }

    private final int getHashSize()
    {
        kotlin.collections.builders.MapBuilder $r0;
        int[] $r1;
        int $i0;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        $r1 = $r0.<kotlin.collections.builders.MapBuilder: int[] hashArray>;

        $i0 = lengthof $r1;

        return $i0;
    }

    private final int hash(java.lang.Object)
    {
        kotlin.collections.builders.MapBuilder $r0;
        int $i0, $i1;
        java.lang.Object $r1;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        $r1 := @parameter0: java.lang.Object;

        if $r1 == null goto label1;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        goto label2;

     label1:
        $i0 = 0;

     label2:
        $i0 = $i0 * -1640531527;

        $i1 = $r0.<kotlin.collections.builders.MapBuilder: int hashShift>;

        $i0 = $i0 >>> $i1;

        return $i0;
    }

    private final boolean putAllEntries(java.util.Collection)
    {
        kotlin.collections.builders.MapBuilder $r0;
        java.util.Collection $r1;
        boolean $z0, $z1;
        int $i0;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        java.util.Map$Entry $r4;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        $r1 := @parameter0: java.util.Collection;

        $z0 = interfaceinvoke $r1.<java.util.Collection: boolean isEmpty()>();

        $z1 = 0;

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $i0 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        specialinvoke $r0.<kotlin.collections.builders.MapBuilder: void ensureExtraCapacity(int)>($i0);

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.util.Map$Entry) $r3;

        $z0 = specialinvoke $r0.<kotlin.collections.builders.MapBuilder: boolean putEntry(java.util.Map$Entry)>($r4);

        if $z0 == 0 goto label2;

        $z1 = 1;

        goto label2;

     label3:
        return $z1;
    }

    private final boolean putEntry(java.util.Map$Entry)
    {
        kotlin.collections.builders.MapBuilder $r0;
        java.util.Map$Entry $r1;
        java.lang.Object $r2, $r4;
        int $i0;
        java.lang.Object[] $r3;
        boolean $z0;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        $r1 := @parameter0: java.util.Map$Entry;

        $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        $i0 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder: int addKey$kotlin_stdlib(java.lang.Object)>($r2);

        $r3 = specialinvoke $r0.<kotlin.collections.builders.MapBuilder: java.lang.Object[] allocateValuesArray()>();

        if $i0 < 0 goto label1;

        $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r3[$i0] = $r2;

        return 1;

     label1:
        $i0 = neg $i0;

        $i0 = $i0 + -1;

        $r2 = $r3[$i0];

        $r4 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, $r2);

        if $z0 != 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r3[$i0] = $r2;

        return 1;

     label2:
        return 0;
    }

    private final boolean putRehash(int)
    {
        kotlin.collections.builders.MapBuilder $r0;
        int $i0, $i1, $i2, $i3;
        java.lang.Object[] $r1;
        java.lang.Object $r2;
        int[] $r3;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        $i1 := @parameter0: int;

        $r1 = $r0.<kotlin.collections.builders.MapBuilder: java.lang.Object[] keysArray>;

        $r2 = $r1[$i1];

        $i2 = specialinvoke $r0.<kotlin.collections.builders.MapBuilder: int hash(java.lang.Object)>($r2);

        $i3 = $r0.<kotlin.collections.builders.MapBuilder: int maxProbeDistance>;

     label1:
        $r3 = $r0.<kotlin.collections.builders.MapBuilder: int[] hashArray>;

        $i0 = $r3[$i2];

        if $i0 != 0 goto label2;

        $i3 = $i1 + 1;

        $r3[$i2] = $i3;

        $r3 = $r0.<kotlin.collections.builders.MapBuilder: int[] presenceArray>;

        $r3[$i1] = $i2;

        return 1;

     label2:
        $i3 = $i3 + -1;

        if $i3 >= 0 goto label3;

        return 0;

     label3:
        if $i2 != 0 goto label4;

        $i2 = specialinvoke $r0.<kotlin.collections.builders.MapBuilder: int getHashSize()>();

        $i2 = $i2 + -1;

        goto label1;

     label4:
        $i2 = $i2 + -1;

        goto label1;
    }

    private final void rehash(int)
    {
        kotlin.collections.builders.MapBuilder $r0;
        int $i0, $i1, $i2;
        int[] $r1;
        kotlin.collections.builders.MapBuilder$Companion $r2;
        boolean $z0;
        java.lang.IllegalStateException $r3;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        $i0 := @parameter0: int;

        $i1 = $r0.<kotlin.collections.builders.MapBuilder: int length>;

        $i2 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder: int size()>();

        if $i1 <= $i2 goto label1;

        specialinvoke $r0.<kotlin.collections.builders.MapBuilder: void compact()>();

     label1:
        $i2 = specialinvoke $r0.<kotlin.collections.builders.MapBuilder: int getHashSize()>();

        $i1 = 0;

        if $i0 == $i2 goto label2;

        $r1 = newarray (int)[$i0];

        $r0.<kotlin.collections.builders.MapBuilder: int[] hashArray> = $r1;

        $r2 = <kotlin.collections.builders.MapBuilder: kotlin.collections.builders.MapBuilder$Companion Companion>;

        $i0 = staticinvoke <kotlin.collections.builders.MapBuilder$Companion: int access$computeShift(kotlin.collections.builders.MapBuilder$Companion,int)>($r2, $i0);

        $r0.<kotlin.collections.builders.MapBuilder: int hashShift> = $i0;

        goto label3;

     label2:
        $r1 = $r0.<kotlin.collections.builders.MapBuilder: int[] hashArray>;

        $i0 = specialinvoke $r0.<kotlin.collections.builders.MapBuilder: int getHashSize()>();

        staticinvoke <kotlin.collections.ArraysKt: void fill(int[],int,int,int)>($r1, 0, 0, $i0);

     label3:
        $i0 = $r0.<kotlin.collections.builders.MapBuilder: int length>;

        if $i1 >= $i0 goto label5;

        $z0 = specialinvoke $r0.<kotlin.collections.builders.MapBuilder: boolean putRehash(int)>($i1);

        if $z0 == 0 goto label4;

        $i1 = $i1 + 1;

        goto label3;

     label4:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("This cannot happen with fixed magic multiplier and grow-only hash array. Have object hashCodes changed?");

        throw $r3;

     label5:
        return;
    }

    private final void removeHashAt(int)
    {
        kotlin.collections.builders.MapBuilder $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        int[] $r1;
        java.lang.Object[] $r2;
        java.lang.Object $r3;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        $i2 := @parameter0: int;

        $i3 = $r0.<kotlin.collections.builders.MapBuilder: int maxProbeDistance>;

        $i3 = $i3 + $i3;

        $i4 = specialinvoke $r0.<kotlin.collections.builders.MapBuilder: int getHashSize()>();

        $i4 = $i4 / 2;

        $i3 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtMost(int,int)>($i3, $i4);

        $i4 = 0;

        $i5 = $i2;

     label1:
        if $i2 != 0 goto label2;

        $i2 = specialinvoke $r0.<kotlin.collections.builders.MapBuilder: int getHashSize()>();

        $i2 = $i2 + -1;

        goto label3;

     label2:
        $i2 = $i2 + -1;

     label3:
        $i4 = $i4 + 1;

        $i0 = $r0.<kotlin.collections.builders.MapBuilder: int maxProbeDistance>;

        if $i4 <= $i0 goto label4;

        $r1 = $r0.<kotlin.collections.builders.MapBuilder: int[] hashArray>;

        $r1[$i5] = 0;

        return;

     label4:
        $r1 = $r0.<kotlin.collections.builders.MapBuilder: int[] hashArray>;

        $i0 = $r1[$i2];

        if $i0 != 0 goto label5;

        $r1[$i5] = 0;

        return;

     label5:
        if $i0 >= 0 goto label7;

        $r1[$i5] = -1;

     label6:
        $i5 = $i2;

        $i4 = 0;

        goto label8;

     label7:
        $r2 = $r0.<kotlin.collections.builders.MapBuilder: java.lang.Object[] keysArray>;

        $i1 = $i0 + -1;

        $r3 = $r2[$i1];

        $i6 = specialinvoke $r0.<kotlin.collections.builders.MapBuilder: int hash(java.lang.Object)>($r3);

        $i6 = $i6 - $i2;

        $i7 = specialinvoke $r0.<kotlin.collections.builders.MapBuilder: int getHashSize()>();

        $i7 = $i7 + -1;

        $i6 = $i6 & $i7;

        if $i6 < $i4 goto label8;

        $r1 = $r0.<kotlin.collections.builders.MapBuilder: int[] hashArray>;

        $r1[$i5] = $i0;

        $r1 = $r0.<kotlin.collections.builders.MapBuilder: int[] presenceArray>;

        $r1[$i1] = $i5;

        goto label6;

     label8:
        $i3 = $i3 + -1;

        if $i3 >= 0 goto label1;

        $r1 = $r0.<kotlin.collections.builders.MapBuilder: int[] hashArray>;

        $r1[$i5] = -1;

        return;
    }

    private final void removeKeyAt(int)
    {
        kotlin.collections.builders.MapBuilder $r0;
        int $i0, $i1;
        java.lang.Object[] $r1;
        int[] $r2;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        $i0 := @parameter0: int;

        $r1 = $r0.<kotlin.collections.builders.MapBuilder: java.lang.Object[] keysArray>;

        staticinvoke <kotlin.collections.builders.ListBuilderKt: void resetAt(java.lang.Object[],int)>($r1, $i0);

        $r2 = $r0.<kotlin.collections.builders.MapBuilder: int[] presenceArray>;

        $i1 = $r2[$i0];

        specialinvoke $r0.<kotlin.collections.builders.MapBuilder: void removeHashAt(int)>($i1);

        $r2 = $r0.<kotlin.collections.builders.MapBuilder: int[] presenceArray>;

        $r2[$i0] = -1;

        $i0 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder: int size()>();

        $i0 = $i0 + -1;

        $r0.<kotlin.collections.builders.MapBuilder: int size> = $i0;

        return;
    }

    private final java.lang.Object writeReplace()
    {
        kotlin.collections.builders.MapBuilder $r0;
        boolean $z0;
        kotlin.collections.builders.SerializedMap $r1;
        java.io.NotSerializableException $r2;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        $z0 = $r0.<kotlin.collections.builders.MapBuilder: boolean isReadOnly>;

        if $z0 == 0 goto label1;

        $r1 = new kotlin.collections.builders.SerializedMap;

        specialinvoke $r1.<kotlin.collections.builders.SerializedMap: void <init>(java.util.Map)>($r0);

        return $r1;

     label1:
        $r2 = new java.io.NotSerializableException;

        specialinvoke $r2.<java.io.NotSerializableException: void <init>(java.lang.String)>("The map cannot be serialized while it is being built.");

        throw $r2;
    }

    public final int addKey$kotlin_stdlib(java.lang.Object)
    {
        kotlin.collections.builders.MapBuilder $r0;
        java.lang.Object $r1, $r4;
        int $i0, $i1, $i2, $i3, $i4;
        int[] $r2;
        java.lang.Object[] $r3;
        boolean $z0;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        $r1 := @parameter0: java.lang.Object;

        virtualinvoke $r0.<kotlin.collections.builders.MapBuilder: void checkIsMutable$kotlin_stdlib()>();

     label1:
        $i0 = specialinvoke $r0.<kotlin.collections.builders.MapBuilder: int hash(java.lang.Object)>($r1);

        $i1 = $r0.<kotlin.collections.builders.MapBuilder: int maxProbeDistance>;

        $i1 = $i1 + $i1;

        $i2 = specialinvoke $r0.<kotlin.collections.builders.MapBuilder: int getHashSize()>();

        $i2 = $i2 / 2;

        $i2 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtMost(int,int)>($i1, $i2);

        $i1 = 0;

     label2:
        $r2 = $r0.<kotlin.collections.builders.MapBuilder: int[] hashArray>;

        $i3 = $r2[$i0];

        if $i3 > 0 goto label4;

        $i2 = $r0.<kotlin.collections.builders.MapBuilder: int length>;

        $i3 = specialinvoke $r0.<kotlin.collections.builders.MapBuilder: int getCapacity()>();

        if $i2 < $i3 goto label3;

        specialinvoke $r0.<kotlin.collections.builders.MapBuilder: void ensureExtraCapacity(int)>(1);

        goto label1;

     label3:
        $i2 = $r0.<kotlin.collections.builders.MapBuilder: int length>;

        $i3 = $i2 + 1;

        $r0.<kotlin.collections.builders.MapBuilder: int length> = $i3;

        $r3 = $r0.<kotlin.collections.builders.MapBuilder: java.lang.Object[] keysArray>;

        $r3[$i2] = $r1;

        $r2 = $r0.<kotlin.collections.builders.MapBuilder: int[] presenceArray>;

        $r2[$i2] = $i0;

        $r2 = $r0.<kotlin.collections.builders.MapBuilder: int[] hashArray>;

        $r2[$i0] = $i3;

        $i0 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder: int size()>();

        $i0 = $i0 + 1;

        $r0.<kotlin.collections.builders.MapBuilder: int size> = $i0;

        $i0 = $r0.<kotlin.collections.builders.MapBuilder: int maxProbeDistance>;

        if $i1 <= $i0 goto label8;

        $r0.<kotlin.collections.builders.MapBuilder: int maxProbeDistance> = $i1;

        return $i2;

     label4:
        $r3 = $r0.<kotlin.collections.builders.MapBuilder: java.lang.Object[] keysArray>;

        $i4 = $i3 + -1;

        $r4 = $r3[$i4];

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, $r1);

        if $z0 == 0 goto label5;

        $i0 = neg $i3;

        return $i0;

     label5:
        $i1 = $i1 + 1;

        if $i1 <= $i2 goto label6;

        $i0 = specialinvoke $r0.<kotlin.collections.builders.MapBuilder: int getHashSize()>();

        $i0 = $i0 + $i0;

        specialinvoke $r0.<kotlin.collections.builders.MapBuilder: void rehash(int)>($i0);

        goto label1;

     label6:
        if $i0 != 0 goto label7;

        $i0 = specialinvoke $r0.<kotlin.collections.builders.MapBuilder: int getHashSize()>();

        $i0 = $i0 + -1;

        goto label2;

     label7:
        $i0 = $i0 + -1;

        goto label2;

     label8:
        return $i2;
    }

    public final java.util.Map build()
    {
        kotlin.collections.builders.MapBuilder $r0;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        virtualinvoke $r0.<kotlin.collections.builders.MapBuilder: void checkIsMutable$kotlin_stdlib()>();

        $r0.<kotlin.collections.builders.MapBuilder: boolean isReadOnly> = 1;

        return $r0;
    }

    public final void checkIsMutable$kotlin_stdlib()
    {
        kotlin.collections.builders.MapBuilder $r0;
        boolean $z0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        $z0 = $r0.<kotlin.collections.builders.MapBuilder: boolean isReadOnly>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public void clear()
    {
        kotlin.collections.builders.MapBuilder $r0;
        int[] $r1, $r2;
        int $i0, $i1;
        kotlin.ranges.IntRange $r3;
        kotlin.collections.IntIterator $r4;
        boolean $z0;
        java.lang.Object[] $r5;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        virtualinvoke $r0.<kotlin.collections.builders.MapBuilder: void checkIsMutable$kotlin_stdlib()>();

        $r3 = new kotlin.ranges.IntRange;

        $i0 = $r0.<kotlin.collections.builders.MapBuilder: int length>;

        $i0 = $i0 + -1;

        specialinvoke $r3.<kotlin.ranges.IntRange: void <init>(int,int)>(0, $i0);

        $r4 = virtualinvoke $r3.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r4.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r4.<kotlin.collections.IntIterator: int nextInt()>();

        $r1 = $r0.<kotlin.collections.builders.MapBuilder: int[] presenceArray>;

        $i0 = $r1[$i1];

        if $i0 < 0 goto label1;

        $r2 = $r0.<kotlin.collections.builders.MapBuilder: int[] hashArray>;

        $r2[$i0] = 0;

        $r1[$i1] = -1;

        goto label1;

     label2:
        $r5 = $r0.<kotlin.collections.builders.MapBuilder: java.lang.Object[] keysArray>;

        $i0 = $r0.<kotlin.collections.builders.MapBuilder: int length>;

        staticinvoke <kotlin.collections.builders.ListBuilderKt: void resetRange(java.lang.Object[],int,int)>($r5, 0, $i0);

        $r5 = $r0.<kotlin.collections.builders.MapBuilder: java.lang.Object[] valuesArray>;

        if $r5 == null goto label3;

        $i0 = $r0.<kotlin.collections.builders.MapBuilder: int length>;

        staticinvoke <kotlin.collections.builders.ListBuilderKt: void resetRange(java.lang.Object[],int,int)>($r5, 0, $i0);

     label3:
        $r0.<kotlin.collections.builders.MapBuilder: int size> = 0;

        $r0.<kotlin.collections.builders.MapBuilder: int length> = 0;

        return;
    }

    public final boolean containsAllEntries$kotlin_stdlib(java.util.Collection)
    {
        kotlin.collections.builders.MapBuilder $r0;
        java.util.Collection $r1;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3;
        java.util.Map$Entry $r4;
        java.lang.Throwable $r5;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        $r1 := @parameter0: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "m");

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        if $r3 == null goto label5;

     label2:
        $r4 = (java.util.Map$Entry) $r3;

        $z0 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder: boolean containsEntry$kotlin_stdlib(java.util.Map$Entry)>($r4);

     label3:
        if $z0 != 0 goto label1;

        return 0;

     label4:
        $r5 := @caughtexception;

     label5:
        return 0;

     label6:
        return 1;

        catch java.lang.ClassCastException from label2 to label3 with label4;
    }

    public final boolean containsEntry$kotlin_stdlib(java.util.Map$Entry)
    {
        kotlin.collections.builders.MapBuilder $r0;
        java.lang.Object[] $r1;
        java.util.Map$Entry $r2;
        java.lang.Object $r3, $r4;
        int $i0;
        boolean $z0;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        $r2 := @parameter0: java.util.Map$Entry;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "entry");

        $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        $i0 = specialinvoke $r0.<kotlin.collections.builders.MapBuilder: int findKey(java.lang.Object)>($r3);

        if $i0 >= 0 goto label1;

        return 0;

     label1:
        $r1 = $r0.<kotlin.collections.builders.MapBuilder: java.lang.Object[] valuesArray>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r1);

        $r3 = $r1[$i0];

        $r4 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r3, $r4);

        return $z0;
    }

    public boolean containsKey(java.lang.Object)
    {
        kotlin.collections.builders.MapBuilder $r0;
        int $i0;
        java.lang.Object $r1;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        $r1 := @parameter0: java.lang.Object;

        $i0 = specialinvoke $r0.<kotlin.collections.builders.MapBuilder: int findKey(java.lang.Object)>($r1);

        if $i0 < 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean containsValue(java.lang.Object)
    {
        kotlin.collections.builders.MapBuilder $r0;
        int $i0;
        java.lang.Object $r1;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        $r1 := @parameter0: java.lang.Object;

        $i0 = specialinvoke $r0.<kotlin.collections.builders.MapBuilder: int findValue(java.lang.Object)>($r1);

        if $i0 < 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final kotlin.collections.builders.MapBuilder$EntriesItr entriesIterator$kotlin_stdlib()
    {
        kotlin.collections.builders.MapBuilder $r0;
        kotlin.collections.builders.MapBuilder$EntriesItr $r1;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        $r1 = new kotlin.collections.builders.MapBuilder$EntriesItr;

        specialinvoke $r1.<kotlin.collections.builders.MapBuilder$EntriesItr: void <init>(kotlin.collections.builders.MapBuilder)>($r0);

        return $r1;
    }

    public final volatile java.util.Set entrySet()
    {
        kotlin.collections.builders.MapBuilder $r0;
        java.util.Set $r1;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        $r1 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder: java.util.Set getEntries()>();

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        kotlin.collections.builders.MapBuilder $r0;
        boolean $z0;
        java.lang.Object $r1;
        java.util.Map $r2;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        $r1 := @parameter0: java.lang.Object;

        if $r1 == $r0 goto label2;

        $z0 = $r1 instanceof java.util.Map;

        if $z0 == 0 goto label1;

        $r2 = (java.util.Map) $r1;

        $z0 = specialinvoke $r0.<kotlin.collections.builders.MapBuilder: boolean contentEquals(java.util.Map)>($r2);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = 1;

     label3:
        return $z0;
    }

    public java.lang.Object get(java.lang.Object)
    {
        kotlin.collections.builders.MapBuilder $r0;
        java.lang.Object[] $r1;
        int $i0;
        java.lang.Object $r2;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        $r2 := @parameter0: java.lang.Object;

        $i0 = specialinvoke $r0.<kotlin.collections.builders.MapBuilder: int findKey(java.lang.Object)>($r2);

        if $i0 >= 0 goto label1;

        return null;

     label1:
        $r1 = $r0.<kotlin.collections.builders.MapBuilder: java.lang.Object[] valuesArray>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r1);

        $r2 = $r1[$i0];

        return $r2;
    }

    public java.util.Set getEntries()
    {
        kotlin.collections.builders.MapBuilder $r0;
        kotlin.collections.builders.MapBuilderEntries $r1;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        $r1 = $r0.<kotlin.collections.builders.MapBuilder: kotlin.collections.builders.MapBuilderEntries entriesView>;

        if $r1 != null goto label1;

        $r1 = new kotlin.collections.builders.MapBuilderEntries;

        specialinvoke $r1.<kotlin.collections.builders.MapBuilderEntries: void <init>(kotlin.collections.builders.MapBuilder)>($r0);

        $r0.<kotlin.collections.builders.MapBuilder: kotlin.collections.builders.MapBuilderEntries entriesView> = $r1;

     label1:
        return $r1;
    }

    public java.util.Set getKeys()
    {
        kotlin.collections.builders.MapBuilder $r0;
        kotlin.collections.builders.MapBuilderKeys $r1;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        $r1 = $r0.<kotlin.collections.builders.MapBuilder: kotlin.collections.builders.MapBuilderKeys keysView>;

        if $r1 != null goto label1;

        $r1 = new kotlin.collections.builders.MapBuilderKeys;

        specialinvoke $r1.<kotlin.collections.builders.MapBuilderKeys: void <init>(kotlin.collections.builders.MapBuilder)>($r0);

        $r0.<kotlin.collections.builders.MapBuilder: kotlin.collections.builders.MapBuilderKeys keysView> = $r1;

     label1:
        return $r1;
    }

    public int getSize()
    {
        kotlin.collections.builders.MapBuilder $r0;
        int i0;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        i0 = $r0.<kotlin.collections.builders.MapBuilder: int size>;

        return i0;
    }

    public java.util.Collection getValues()
    {
        kotlin.collections.builders.MapBuilder $r0;
        kotlin.collections.builders.MapBuilderValues $r1;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        $r1 = $r0.<kotlin.collections.builders.MapBuilder: kotlin.collections.builders.MapBuilderValues valuesView>;

        if $r1 != null goto label1;

        $r1 = new kotlin.collections.builders.MapBuilderValues;

        specialinvoke $r1.<kotlin.collections.builders.MapBuilderValues: void <init>(kotlin.collections.builders.MapBuilder)>($r0);

        $r0.<kotlin.collections.builders.MapBuilder: kotlin.collections.builders.MapBuilderValues valuesView> = $r1;

     label1:
        return $r1;
    }

    public int hashCode()
    {
        kotlin.collections.builders.MapBuilder $r0;
        kotlin.collections.builders.MapBuilder$EntriesItr $r1;
        int $i0, $i1;
        boolean $z0;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        $r1 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder: kotlin.collections.builders.MapBuilder$EntriesItr entriesIterator$kotlin_stdlib()>();

        $i0 = 0;

     label1:
        $z0 = virtualinvoke $r1.<kotlin.collections.builders.MapBuilder$EntriesItr: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r1.<kotlin.collections.builders.MapBuilder$EntriesItr: int nextHashCode$kotlin_stdlib()>();

        $i0 = $i0 + $i1;

        goto label1;

     label2:
        return $i0;
    }

    public boolean isEmpty()
    {
        kotlin.collections.builders.MapBuilder $r0;
        int $i0;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        $i0 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder: int size()>();

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final boolean isReadOnly$kotlin_stdlib()
    {
        kotlin.collections.builders.MapBuilder $r0;
        boolean z0;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        z0 = $r0.<kotlin.collections.builders.MapBuilder: boolean isReadOnly>;

        return z0;
    }

    public final volatile java.util.Set keySet()
    {
        kotlin.collections.builders.MapBuilder $r0;
        java.util.Set $r1;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        $r1 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder: java.util.Set getKeys()>();

        return $r1;
    }

    public final kotlin.collections.builders.MapBuilder$KeysItr keysIterator$kotlin_stdlib()
    {
        kotlin.collections.builders.MapBuilder $r0;
        kotlin.collections.builders.MapBuilder$KeysItr $r1;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        $r1 = new kotlin.collections.builders.MapBuilder$KeysItr;

        specialinvoke $r1.<kotlin.collections.builders.MapBuilder$KeysItr: void <init>(kotlin.collections.builders.MapBuilder)>($r0);

        return $r1;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        kotlin.collections.builders.MapBuilder $r0;
        java.lang.Object $r1, $r2;
        int $i0;
        java.lang.Object[] $r3;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        virtualinvoke $r0.<kotlin.collections.builders.MapBuilder: void checkIsMutable$kotlin_stdlib()>();

        $i0 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder: int addKey$kotlin_stdlib(java.lang.Object)>($r2);

        $r3 = specialinvoke $r0.<kotlin.collections.builders.MapBuilder: java.lang.Object[] allocateValuesArray()>();

        if $i0 >= 0 goto label1;

        $i0 = neg $i0;

        $i0 = $i0 + -1;

        $r2 = $r3[$i0];

        $r3[$i0] = $r1;

        return $r2;

     label1:
        $r3[$i0] = $r1;

        return null;
    }

    public void putAll(java.util.Map)
    {
        kotlin.collections.builders.MapBuilder $r0;
        java.util.Set $r1;
        java.util.Map $r2;
        java.util.Collection r3;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        $r2 := @parameter0: java.util.Map;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "from");

        virtualinvoke $r0.<kotlin.collections.builders.MapBuilder: void checkIsMutable$kotlin_stdlib()>();

        $r1 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        r3 = (java.util.Collection) $r1;

        specialinvoke $r0.<kotlin.collections.builders.MapBuilder: boolean putAllEntries(java.util.Collection)>(r3);

        return;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        kotlin.collections.builders.MapBuilder $r0;
        java.lang.Object[] $r1;
        java.lang.Object $r2;
        int $i0;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        $r2 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder: int removeKey$kotlin_stdlib(java.lang.Object)>($r2);

        if $i0 >= 0 goto label1;

        return null;

     label1:
        $r1 = $r0.<kotlin.collections.builders.MapBuilder: java.lang.Object[] valuesArray>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r1);

        $r2 = $r1[$i0];

        staticinvoke <kotlin.collections.builders.ListBuilderKt: void resetAt(java.lang.Object[],int)>($r1, $i0);

        return $r2;
    }

    public final boolean removeEntry$kotlin_stdlib(java.util.Map$Entry)
    {
        kotlin.collections.builders.MapBuilder $r0;
        java.util.Map$Entry $r1;
        java.lang.Object $r2, $r4;
        int $i0;
        java.lang.Object[] $r3;
        boolean $z0;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        $r1 := @parameter0: java.util.Map$Entry;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "entry");

        virtualinvoke $r0.<kotlin.collections.builders.MapBuilder: void checkIsMutable$kotlin_stdlib()>();

        $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        $i0 = specialinvoke $r0.<kotlin.collections.builders.MapBuilder: int findKey(java.lang.Object)>($r2);

        if $i0 >= 0 goto label1;

        return 0;

     label1:
        $r3 = $r0.<kotlin.collections.builders.MapBuilder: java.lang.Object[] valuesArray>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r3);

        $r2 = $r3[$i0];

        $r4 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, $r4);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        specialinvoke $r0.<kotlin.collections.builders.MapBuilder: void removeKeyAt(int)>($i0);

        return 1;
    }

    public final int removeKey$kotlin_stdlib(java.lang.Object)
    {
        kotlin.collections.builders.MapBuilder $r0;
        int $i0;
        java.lang.Object $r1;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        $r1 := @parameter0: java.lang.Object;

        virtualinvoke $r0.<kotlin.collections.builders.MapBuilder: void checkIsMutable$kotlin_stdlib()>();

        $i0 = specialinvoke $r0.<kotlin.collections.builders.MapBuilder: int findKey(java.lang.Object)>($r1);

        if $i0 >= 0 goto label1;

        return -1;

     label1:
        specialinvoke $r0.<kotlin.collections.builders.MapBuilder: void removeKeyAt(int)>($i0);

        return $i0;
    }

    public final boolean removeValue$kotlin_stdlib(java.lang.Object)
    {
        kotlin.collections.builders.MapBuilder $r0;
        int $i0;
        java.lang.Object $r1;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        $r1 := @parameter0: java.lang.Object;

        virtualinvoke $r0.<kotlin.collections.builders.MapBuilder: void checkIsMutable$kotlin_stdlib()>();

        $i0 = specialinvoke $r0.<kotlin.collections.builders.MapBuilder: int findValue(java.lang.Object)>($r1);

        if $i0 >= 0 goto label1;

        return 0;

     label1:
        specialinvoke $r0.<kotlin.collections.builders.MapBuilder: void removeKeyAt(int)>($i0);

        return 1;
    }

    public final volatile int size()
    {
        kotlin.collections.builders.MapBuilder $r0;
        int $i0;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        $i0 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder: int getSize()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        kotlin.collections.builders.MapBuilder $r0;
        java.lang.StringBuilder $r1;
        int $i0;
        kotlin.collections.builders.MapBuilder$EntriesItr $r2;
        boolean $z0;
        java.lang.String $r3;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        $r1 = new java.lang.StringBuilder;

        $i0 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder: int size()>();

        $i0 = $i0 * 3;

        $i0 = $i0 + 2;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{");

        $r2 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder: kotlin.collections.builders.MapBuilder$EntriesItr entriesIterator$kotlin_stdlib()>();

        $i0 = 0;

     label1:
        $z0 = virtualinvoke $r2.<kotlin.collections.builders.MapBuilder$EntriesItr: boolean hasNext()>();

        if $z0 == 0 goto label3;

        if $i0 <= 0 goto label2;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        virtualinvoke $r2.<kotlin.collections.builders.MapBuilder$EntriesItr: void nextAppendString(java.lang.StringBuilder)>($r1);

        $i0 = $i0 + 1;

        goto label1;

     label3:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "sb.toString()");

        return $r3;
    }

    public final volatile java.util.Collection values()
    {
        kotlin.collections.builders.MapBuilder $r0;
        java.util.Collection $r1;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        $r1 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder: java.util.Collection getValues()>();

        return $r1;
    }

    public final kotlin.collections.builders.MapBuilder$ValuesItr valuesIterator$kotlin_stdlib()
    {
        kotlin.collections.builders.MapBuilder $r0;
        kotlin.collections.builders.MapBuilder$ValuesItr $r1;

        $r0 := @this: kotlin.collections.builders.MapBuilder;

        $r1 = new kotlin.collections.builders.MapBuilder$ValuesItr;

        specialinvoke $r1.<kotlin.collections.builders.MapBuilder$ValuesItr: void <init>(kotlin.collections.builders.MapBuilder)>($r0);

        return $r1;
    }

kotlin.collections.builders.MapBuilder$Companion
    private void <init>()
    {
        kotlin.collections.builders.MapBuilder$Companion $r0;

        $r0 := @this: kotlin.collections.builders.MapBuilder$Companion;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        kotlin.collections.builders.MapBuilder$Companion $r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        $r0 := @this: kotlin.collections.builders.MapBuilder$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke $r0.<kotlin.collections.builders.MapBuilder$Companion: void <init>()>();

        return;
    }

    public static final int access$computeHashSize(kotlin.collections.builders.MapBuilder$Companion, int)
    {
        int $i0;
        kotlin.collections.builders.MapBuilder$Companion $r0;

        $r0 := @parameter0: kotlin.collections.builders.MapBuilder$Companion;

        $i0 := @parameter1: int;

        $i0 = specialinvoke $r0.<kotlin.collections.builders.MapBuilder$Companion: int computeHashSize(int)>($i0);

        return $i0;
    }

    public static final int access$computeShift(kotlin.collections.builders.MapBuilder$Companion, int)
    {
        int $i0;
        kotlin.collections.builders.MapBuilder$Companion $r0;

        $r0 := @parameter0: kotlin.collections.builders.MapBuilder$Companion;

        $i0 := @parameter1: int;

        $i0 = specialinvoke $r0.<kotlin.collections.builders.MapBuilder$Companion: int computeShift(int)>($i0);

        return $i0;
    }

    private final int computeHashSize(int)
    {
        kotlin.collections.builders.MapBuilder$Companion $r0;
        int $i0;

        $r0 := @this: kotlin.collections.builders.MapBuilder$Companion;

        $i0 := @parameter0: int;

        $i0 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtLeast(int,int)>($i0, 1);

        $i0 = $i0 * 3;

        $i0 = staticinvoke <java.lang.Integer: int highestOneBit(int)>($i0);

        return $i0;
    }

    private final int computeShift(int)
    {
        kotlin.collections.builders.MapBuilder$Companion $r0;
        int $i0;

        $r0 := @this: kotlin.collections.builders.MapBuilder$Companion;

        $i0 := @parameter0: int;

        $i0 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i0);

        $i0 = $i0 + 1;

        return $i0;
    }

kotlin.collections.builders.MapBuilder$EntriesItr
    public void <init>(kotlin.collections.builders.MapBuilder)
    {
        kotlin.collections.builders.MapBuilder$EntriesItr $r0;
        kotlin.collections.builders.MapBuilder $r1;

        $r0 := @this: kotlin.collections.builders.MapBuilder$EntriesItr;

        $r1 := @parameter0: kotlin.collections.builders.MapBuilder;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "map");

        specialinvoke $r0.<kotlin.collections.builders.MapBuilder$Itr: void <init>(kotlin.collections.builders.MapBuilder)>($r1);

        return;
    }

    public volatile java.lang.Object next()
    {
        kotlin.collections.builders.MapBuilder$EntriesItr $r0;
        kotlin.collections.builders.MapBuilder$EntryRef $r1;

        $r0 := @this: kotlin.collections.builders.MapBuilder$EntriesItr;

        $r1 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$EntriesItr: kotlin.collections.builders.MapBuilder$EntryRef next()>();

        return $r1;
    }

    public kotlin.collections.builders.MapBuilder$EntryRef next()
    {
        kotlin.collections.builders.MapBuilder$EntriesItr $r0;
        int $i0, $i1;
        kotlin.collections.builders.MapBuilder $r1;
        kotlin.collections.builders.MapBuilder$EntryRef $r2;
        java.util.NoSuchElementException $r3;

        $r0 := @this: kotlin.collections.builders.MapBuilder$EntriesItr;

        $i0 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$EntriesItr: int getIndex$kotlin_stdlib()>();

        $r1 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$EntriesItr: kotlin.collections.builders.MapBuilder getMap$kotlin_stdlib()>();

        $i1 = staticinvoke <kotlin.collections.builders.MapBuilder: int access$getLength$p(kotlin.collections.builders.MapBuilder)>($r1);

        if $i0 >= $i1 goto label1;

        $i0 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$EntriesItr: int getIndex$kotlin_stdlib()>();

        $i1 = $i0 + 1;

        virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$EntriesItr: void setIndex$kotlin_stdlib(int)>($i1);

        virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$EntriesItr: void setLastIndex$kotlin_stdlib(int)>($i0);

        $r2 = new kotlin.collections.builders.MapBuilder$EntryRef;

        $r1 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$EntriesItr: kotlin.collections.builders.MapBuilder getMap$kotlin_stdlib()>();

        $i0 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$EntriesItr: int getLastIndex$kotlin_stdlib()>();

        specialinvoke $r2.<kotlin.collections.builders.MapBuilder$EntryRef: void <init>(kotlin.collections.builders.MapBuilder,int)>($r1, $i0);

        virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$EntriesItr: void initNext$kotlin_stdlib()>();

        return $r2;

     label1:
        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();

        throw $r3;
    }

    public final void nextAppendString(java.lang.StringBuilder)
    {
        kotlin.collections.builders.MapBuilder$EntriesItr $r0;
        java.lang.StringBuilder $r1;
        int $i0, $i1;
        kotlin.collections.builders.MapBuilder $r2;
        java.lang.Object[] $r3;
        java.lang.Object $r4;
        boolean $z0;
        java.util.NoSuchElementException $r5;

        $r0 := @this: kotlin.collections.builders.MapBuilder$EntriesItr;

        $r1 := @parameter0: java.lang.StringBuilder;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "sb");

        $i0 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$EntriesItr: int getIndex$kotlin_stdlib()>();

        $r2 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$EntriesItr: kotlin.collections.builders.MapBuilder getMap$kotlin_stdlib()>();

        $i1 = staticinvoke <kotlin.collections.builders.MapBuilder: int access$getLength$p(kotlin.collections.builders.MapBuilder)>($r2);

        if $i0 >= $i1 goto label5;

        $i0 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$EntriesItr: int getIndex$kotlin_stdlib()>();

        $i1 = $i0 + 1;

        virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$EntriesItr: void setIndex$kotlin_stdlib(int)>($i1);

        virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$EntriesItr: void setLastIndex$kotlin_stdlib(int)>($i0);

        $r2 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$EntriesItr: kotlin.collections.builders.MapBuilder getMap$kotlin_stdlib()>();

        $r3 = staticinvoke <kotlin.collections.builders.MapBuilder: java.lang.Object[] access$getKeysArray$p(kotlin.collections.builders.MapBuilder)>($r2);

        $i0 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$EntriesItr: int getLastIndex$kotlin_stdlib()>();

        $r4 = $r3[$i0];

        $r2 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$EntriesItr: kotlin.collections.builders.MapBuilder getMap$kotlin_stdlib()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, $r2);

        if $z0 == 0 goto label1;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(this Map)");

        goto label2;

     label1:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

     label2:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        $r2 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$EntriesItr: kotlin.collections.builders.MapBuilder getMap$kotlin_stdlib()>();

        $r3 = staticinvoke <kotlin.collections.builders.MapBuilder: java.lang.Object[] access$getValuesArray$p(kotlin.collections.builders.MapBuilder)>($r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r3);

        $i0 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$EntriesItr: int getLastIndex$kotlin_stdlib()>();

        $r4 = $r3[$i0];

        $r2 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$EntriesItr: kotlin.collections.builders.MapBuilder getMap$kotlin_stdlib()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, $r2);

        if $z0 == 0 goto label3;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(this Map)");

        goto label4;

     label3:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

     label4:
        virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$EntriesItr: void initNext$kotlin_stdlib()>();

        return;

     label5:
        $r5 = new java.util.NoSuchElementException;

        specialinvoke $r5.<java.util.NoSuchElementException: void <init>()>();

        throw $r5;
    }

    public final int nextHashCode$kotlin_stdlib()
    {
        kotlin.collections.builders.MapBuilder$EntriesItr $r0;
        int $i0, $i1, $i2;
        kotlin.collections.builders.MapBuilder $r1;
        java.lang.Object[] $r2;
        java.lang.Object $r3;
        java.util.NoSuchElementException $r4;

        $r0 := @this: kotlin.collections.builders.MapBuilder$EntriesItr;

        $i0 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$EntriesItr: int getIndex$kotlin_stdlib()>();

        $r1 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$EntriesItr: kotlin.collections.builders.MapBuilder getMap$kotlin_stdlib()>();

        $i1 = staticinvoke <kotlin.collections.builders.MapBuilder: int access$getLength$p(kotlin.collections.builders.MapBuilder)>($r1);

        if $i0 >= $i1 goto label4;

        $i0 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$EntriesItr: int getIndex$kotlin_stdlib()>();

        $i1 = $i0 + 1;

        virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$EntriesItr: void setIndex$kotlin_stdlib(int)>($i1);

        virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$EntriesItr: void setLastIndex$kotlin_stdlib(int)>($i0);

        $r1 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$EntriesItr: kotlin.collections.builders.MapBuilder getMap$kotlin_stdlib()>();

        $r2 = staticinvoke <kotlin.collections.builders.MapBuilder: java.lang.Object[] access$getKeysArray$p(kotlin.collections.builders.MapBuilder)>($r1);

        $i0 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$EntriesItr: int getLastIndex$kotlin_stdlib()>();

        $r3 = $r2[$i0];

        $i0 = 0;

        if $r3 == null goto label1;

        $i1 = virtualinvoke $r3.<java.lang.Object: int hashCode()>();

        goto label2;

     label1:
        $i1 = 0;

     label2:
        $r1 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$EntriesItr: kotlin.collections.builders.MapBuilder getMap$kotlin_stdlib()>();

        $r2 = staticinvoke <kotlin.collections.builders.MapBuilder: java.lang.Object[] access$getValuesArray$p(kotlin.collections.builders.MapBuilder)>($r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r2);

        $i2 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$EntriesItr: int getLastIndex$kotlin_stdlib()>();

        $r3 = $r2[$i2];

        if $r3 == null goto label3;

        $i0 = virtualinvoke $r3.<java.lang.Object: int hashCode()>();

        goto label3;

     label3:
        virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$EntriesItr: void initNext$kotlin_stdlib()>();

        $i0 = $i1 ^ $i0;

        return $i0;

     label4:
        $r4 = new java.util.NoSuchElementException;

        specialinvoke $r4.<java.util.NoSuchElementException: void <init>()>();

        throw $r4;
    }

kotlin.collections.builders.MapBuilder$EntryRef
<kotlin.collections.builders.MapBuilder$EntryRef: int index>
<kotlin.collections.builders.MapBuilder$EntryRef: kotlin.collections.builders.MapBuilder map>
    public void <init>(kotlin.collections.builders.MapBuilder, int)
    {
        kotlin.collections.builders.MapBuilder$EntryRef $r0;
        kotlin.collections.builders.MapBuilder $r1;
        int $i0;

        $r0 := @this: kotlin.collections.builders.MapBuilder$EntryRef;

        $r1 := @parameter0: kotlin.collections.builders.MapBuilder;

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "map");

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<kotlin.collections.builders.MapBuilder$EntryRef: kotlin.collections.builders.MapBuilder map> = $r1;

        $r0.<kotlin.collections.builders.MapBuilder$EntryRef: int index> = $i0;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        kotlin.collections.builders.MapBuilder$EntryRef $r0;
        java.lang.Object $r1, $r3, $r4;
        boolean $z0;
        java.util.Map$Entry $r2;

        $r0 := @this: kotlin.collections.builders.MapBuilder$EntryRef;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof java.util.Map$Entry;

        if $z0 == 0 goto label1;

        $r2 = (java.util.Map$Entry) $r1;

        $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r4 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$EntryRef: java.lang.Object getKey()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r3, $r4);

        if $z0 == 0 goto label1;

        $r2 = (java.util.Map$Entry) $r1;

        $r1 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r3 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$EntryRef: java.lang.Object getValue()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r1, $r3);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.Object getKey()
    {
        kotlin.collections.builders.MapBuilder$EntryRef $r0;
        int $i0;
        java.lang.Object[] $r1;
        kotlin.collections.builders.MapBuilder $r2;
        java.lang.Object $r3;

        $r0 := @this: kotlin.collections.builders.MapBuilder$EntryRef;

        $r2 = $r0.<kotlin.collections.builders.MapBuilder$EntryRef: kotlin.collections.builders.MapBuilder map>;

        $r1 = staticinvoke <kotlin.collections.builders.MapBuilder: java.lang.Object[] access$getKeysArray$p(kotlin.collections.builders.MapBuilder)>($r2);

        $i0 = $r0.<kotlin.collections.builders.MapBuilder$EntryRef: int index>;

        $r3 = $r1[$i0];

        return $r3;
    }

    public java.lang.Object getValue()
    {
        kotlin.collections.builders.MapBuilder$EntryRef $r0;
        int $i0;
        java.lang.Object[] $r1;
        kotlin.collections.builders.MapBuilder $r2;
        java.lang.Object $r3;

        $r0 := @this: kotlin.collections.builders.MapBuilder$EntryRef;

        $r2 = $r0.<kotlin.collections.builders.MapBuilder$EntryRef: kotlin.collections.builders.MapBuilder map>;

        $r1 = staticinvoke <kotlin.collections.builders.MapBuilder: java.lang.Object[] access$getValuesArray$p(kotlin.collections.builders.MapBuilder)>($r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r1);

        $i0 = $r0.<kotlin.collections.builders.MapBuilder$EntryRef: int index>;

        $r3 = $r1[$i0];

        return $r3;
    }

    public int hashCode()
    {
        kotlin.collections.builders.MapBuilder$EntryRef $r0;
        java.lang.Object $r1;
        int $i0, $i1;

        $r0 := @this: kotlin.collections.builders.MapBuilder$EntryRef;

        $r1 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$EntryRef: java.lang.Object getKey()>();

        $i0 = 0;

        if $r1 == null goto label1;

        $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        goto label2;

     label1:
        $i1 = 0;

     label2:
        $r1 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$EntryRef: java.lang.Object getValue()>();

        if $r1 == null goto label3;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

     label3:
        $i0 = $i1 ^ $i0;

        return $i0;
    }

    public java.lang.Object setValue(java.lang.Object)
    {
        kotlin.collections.builders.MapBuilder$EntryRef $r0;
        java.lang.Object $r1, $r2;
        int $i0;
        java.lang.Object[] $r3;
        kotlin.collections.builders.MapBuilder $r4;

        $r0 := @this: kotlin.collections.builders.MapBuilder$EntryRef;

        $r1 := @parameter0: java.lang.Object;

        $r4 = $r0.<kotlin.collections.builders.MapBuilder$EntryRef: kotlin.collections.builders.MapBuilder map>;

        virtualinvoke $r4.<kotlin.collections.builders.MapBuilder: void checkIsMutable$kotlin_stdlib()>();

        $r4 = $r0.<kotlin.collections.builders.MapBuilder$EntryRef: kotlin.collections.builders.MapBuilder map>;

        $r3 = staticinvoke <kotlin.collections.builders.MapBuilder: java.lang.Object[] access$allocateValuesArray(kotlin.collections.builders.MapBuilder)>($r4);

        $i0 = $r0.<kotlin.collections.builders.MapBuilder$EntryRef: int index>;

        $r2 = $r3[$i0];

        $r3[$i0] = $r1;

        return $r2;
    }

    public java.lang.String toString()
    {
        kotlin.collections.builders.MapBuilder$EntryRef $r0;
        java.lang.StringBuilder $r1;
        java.lang.Object $r2;
        java.lang.String $r3;

        $r0 := @this: kotlin.collections.builders.MapBuilder$EntryRef;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$EntryRef: java.lang.Object getKey()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        $r2 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$EntryRef: java.lang.Object getValue()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

kotlin.collections.builders.MapBuilder$Itr
<kotlin.collections.builders.MapBuilder$Itr: int index>
<kotlin.collections.builders.MapBuilder$Itr: int lastIndex>
<kotlin.collections.builders.MapBuilder$Itr: kotlin.collections.builders.MapBuilder map>
    public void <init>(kotlin.collections.builders.MapBuilder)
    {
        kotlin.collections.builders.MapBuilder$Itr $r0;
        kotlin.collections.builders.MapBuilder $r1;

        $r0 := @this: kotlin.collections.builders.MapBuilder$Itr;

        $r1 := @parameter0: kotlin.collections.builders.MapBuilder;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "map");

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<kotlin.collections.builders.MapBuilder$Itr: kotlin.collections.builders.MapBuilder map> = $r1;

        $r0.<kotlin.collections.builders.MapBuilder$Itr: int lastIndex> = -1;

        virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$Itr: void initNext$kotlin_stdlib()>();

        return;
    }

    public final int getIndex$kotlin_stdlib()
    {
        kotlin.collections.builders.MapBuilder$Itr $r0;
        int i0;

        $r0 := @this: kotlin.collections.builders.MapBuilder$Itr;

        i0 = $r0.<kotlin.collections.builders.MapBuilder$Itr: int index>;

        return i0;
    }

    public final int getLastIndex$kotlin_stdlib()
    {
        kotlin.collections.builders.MapBuilder$Itr $r0;
        int i0;

        $r0 := @this: kotlin.collections.builders.MapBuilder$Itr;

        i0 = $r0.<kotlin.collections.builders.MapBuilder$Itr: int lastIndex>;

        return i0;
    }

    public final kotlin.collections.builders.MapBuilder getMap$kotlin_stdlib()
    {
        kotlin.collections.builders.MapBuilder$Itr $r0;
        kotlin.collections.builders.MapBuilder r1;

        $r0 := @this: kotlin.collections.builders.MapBuilder$Itr;

        r1 = $r0.<kotlin.collections.builders.MapBuilder$Itr: kotlin.collections.builders.MapBuilder map>;

        return r1;
    }

    public final boolean hasNext()
    {
        kotlin.collections.builders.MapBuilder$Itr $r0;
        int $i0, $i1;
        kotlin.collections.builders.MapBuilder $r1;

        $r0 := @this: kotlin.collections.builders.MapBuilder$Itr;

        $i1 = $r0.<kotlin.collections.builders.MapBuilder$Itr: int index>;

        $r1 = $r0.<kotlin.collections.builders.MapBuilder$Itr: kotlin.collections.builders.MapBuilder map>;

        $i0 = staticinvoke <kotlin.collections.builders.MapBuilder: int access$getLength$p(kotlin.collections.builders.MapBuilder)>($r1);

        if $i1 >= $i0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final void initNext$kotlin_stdlib()
    {
        kotlin.collections.builders.MapBuilder$Itr $r0;
        int $i0, $i1;
        kotlin.collections.builders.MapBuilder $r1;
        int[] $r2;

        $r0 := @this: kotlin.collections.builders.MapBuilder$Itr;

     label1:
        $i0 = $r0.<kotlin.collections.builders.MapBuilder$Itr: int index>;

        $r1 = $r0.<kotlin.collections.builders.MapBuilder$Itr: kotlin.collections.builders.MapBuilder map>;

        $i1 = staticinvoke <kotlin.collections.builders.MapBuilder: int access$getLength$p(kotlin.collections.builders.MapBuilder)>($r1);

        if $i0 >= $i1 goto label2;

        $r1 = $r0.<kotlin.collections.builders.MapBuilder$Itr: kotlin.collections.builders.MapBuilder map>;

        $r2 = staticinvoke <kotlin.collections.builders.MapBuilder: int[] access$getPresenceArray$p(kotlin.collections.builders.MapBuilder)>($r1);

        $i0 = $r0.<kotlin.collections.builders.MapBuilder$Itr: int index>;

        $i1 = $r2[$i0];

        if $i1 >= 0 goto label2;

        $i0 = $i0 + 1;

        $r0.<kotlin.collections.builders.MapBuilder$Itr: int index> = $i0;

        goto label1;

     label2:
        return;
    }

    public final void remove()
    {
        kotlin.collections.builders.MapBuilder$Itr $r0;
        int $i0;
        java.lang.String $r1;
        boolean $z0;
        kotlin.collections.builders.MapBuilder $r2;
        java.lang.IllegalStateException $r3;

        $r0 := @this: kotlin.collections.builders.MapBuilder$Itr;

        $i0 = $r0.<kotlin.collections.builders.MapBuilder$Itr: int lastIndex>;

        if $i0 == -1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $r2 = $r0.<kotlin.collections.builders.MapBuilder$Itr: kotlin.collections.builders.MapBuilder map>;

        virtualinvoke $r2.<kotlin.collections.builders.MapBuilder: void checkIsMutable$kotlin_stdlib()>();

        $r2 = $r0.<kotlin.collections.builders.MapBuilder$Itr: kotlin.collections.builders.MapBuilder map>;

        $i0 = $r0.<kotlin.collections.builders.MapBuilder$Itr: int lastIndex>;

        staticinvoke <kotlin.collections.builders.MapBuilder: void access$removeKeyAt(kotlin.collections.builders.MapBuilder,int)>($r2, $i0);

        $r0.<kotlin.collections.builders.MapBuilder$Itr: int lastIndex> = -1;

        return;

     label3:
        $r3 = new java.lang.IllegalStateException;

        $r1 = "Call next() before removing element from the iterator.";

        $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r1);

        throw $r3;
    }

    public final void setIndex$kotlin_stdlib(int)
    {
        kotlin.collections.builders.MapBuilder$Itr $r0;
        int $i0;

        $r0 := @this: kotlin.collections.builders.MapBuilder$Itr;

        $i0 := @parameter0: int;

        $r0.<kotlin.collections.builders.MapBuilder$Itr: int index> = $i0;

        return;
    }

    public final void setLastIndex$kotlin_stdlib(int)
    {
        kotlin.collections.builders.MapBuilder$Itr $r0;
        int $i0;

        $r0 := @this: kotlin.collections.builders.MapBuilder$Itr;

        $i0 := @parameter0: int;

        $r0.<kotlin.collections.builders.MapBuilder$Itr: int lastIndex> = $i0;

        return;
    }

kotlin.collections.builders.MapBuilder$KeysItr
    public void <init>(kotlin.collections.builders.MapBuilder)
    {
        kotlin.collections.builders.MapBuilder$KeysItr $r0;
        kotlin.collections.builders.MapBuilder $r1;

        $r0 := @this: kotlin.collections.builders.MapBuilder$KeysItr;

        $r1 := @parameter0: kotlin.collections.builders.MapBuilder;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "map");

        specialinvoke $r0.<kotlin.collections.builders.MapBuilder$Itr: void <init>(kotlin.collections.builders.MapBuilder)>($r1);

        return;
    }

    public java.lang.Object next()
    {
        kotlin.collections.builders.MapBuilder$KeysItr $r0;
        int $i0, $i1;
        kotlin.collections.builders.MapBuilder $r1;
        java.lang.Object[] $r2;
        java.lang.Object $r3;
        java.util.NoSuchElementException $r4;

        $r0 := @this: kotlin.collections.builders.MapBuilder$KeysItr;

        $i0 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$KeysItr: int getIndex$kotlin_stdlib()>();

        $r1 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$KeysItr: kotlin.collections.builders.MapBuilder getMap$kotlin_stdlib()>();

        $i1 = staticinvoke <kotlin.collections.builders.MapBuilder: int access$getLength$p(kotlin.collections.builders.MapBuilder)>($r1);

        if $i0 >= $i1 goto label1;

        $i0 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$KeysItr: int getIndex$kotlin_stdlib()>();

        $i1 = $i0 + 1;

        virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$KeysItr: void setIndex$kotlin_stdlib(int)>($i1);

        virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$KeysItr: void setLastIndex$kotlin_stdlib(int)>($i0);

        $r1 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$KeysItr: kotlin.collections.builders.MapBuilder getMap$kotlin_stdlib()>();

        $r2 = staticinvoke <kotlin.collections.builders.MapBuilder: java.lang.Object[] access$getKeysArray$p(kotlin.collections.builders.MapBuilder)>($r1);

        $i0 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$KeysItr: int getLastIndex$kotlin_stdlib()>();

        $r3 = $r2[$i0];

        virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$KeysItr: void initNext$kotlin_stdlib()>();

        return $r3;

     label1:
        $r4 = new java.util.NoSuchElementException;

        specialinvoke $r4.<java.util.NoSuchElementException: void <init>()>();

        throw $r4;
    }

kotlin.collections.builders.MapBuilder$ValuesItr
    public void <init>(kotlin.collections.builders.MapBuilder)
    {
        kotlin.collections.builders.MapBuilder$ValuesItr $r0;
        kotlin.collections.builders.MapBuilder $r1;

        $r0 := @this: kotlin.collections.builders.MapBuilder$ValuesItr;

        $r1 := @parameter0: kotlin.collections.builders.MapBuilder;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "map");

        specialinvoke $r0.<kotlin.collections.builders.MapBuilder$Itr: void <init>(kotlin.collections.builders.MapBuilder)>($r1);

        return;
    }

    public java.lang.Object next()
    {
        kotlin.collections.builders.MapBuilder$ValuesItr $r0;
        int $i0, $i1;
        kotlin.collections.builders.MapBuilder $r1;
        java.lang.Object[] $r2;
        java.lang.Object $r3;
        java.util.NoSuchElementException $r4;

        $r0 := @this: kotlin.collections.builders.MapBuilder$ValuesItr;

        $i0 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$ValuesItr: int getIndex$kotlin_stdlib()>();

        $r1 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$ValuesItr: kotlin.collections.builders.MapBuilder getMap$kotlin_stdlib()>();

        $i1 = staticinvoke <kotlin.collections.builders.MapBuilder: int access$getLength$p(kotlin.collections.builders.MapBuilder)>($r1);

        if $i0 >= $i1 goto label1;

        $i0 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$ValuesItr: int getIndex$kotlin_stdlib()>();

        $i1 = $i0 + 1;

        virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$ValuesItr: void setIndex$kotlin_stdlib(int)>($i1);

        virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$ValuesItr: void setLastIndex$kotlin_stdlib(int)>($i0);

        $r1 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$ValuesItr: kotlin.collections.builders.MapBuilder getMap$kotlin_stdlib()>();

        $r2 = staticinvoke <kotlin.collections.builders.MapBuilder: java.lang.Object[] access$getValuesArray$p(kotlin.collections.builders.MapBuilder)>($r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r2);

        $i0 = virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$ValuesItr: int getLastIndex$kotlin_stdlib()>();

        $r3 = $r2[$i0];

        virtualinvoke $r0.<kotlin.collections.builders.MapBuilder$ValuesItr: void initNext$kotlin_stdlib()>();

        return $r3;

     label1:
        $r4 = new java.util.NoSuchElementException;

        specialinvoke $r4.<java.util.NoSuchElementException: void <init>()>();

        throw $r4;
    }

