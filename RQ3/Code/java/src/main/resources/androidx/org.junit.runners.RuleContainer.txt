org.junit.runners.RuleContainer
<org.junit.runners.RuleContainer: java.util.Comparator ENTRY_COMPARATOR>
<org.junit.runners.RuleContainer: java.util.List methodRules>
<org.junit.runners.RuleContainer: java.util.IdentityHashMap orderValues>
<org.junit.runners.RuleContainer: java.util.List testRules>
    static void <clinit>()
    {
        org.junit.runners.RuleContainer$1 $r0;

        $r0 = new org.junit.runners.RuleContainer$1;

        specialinvoke $r0.<org.junit.runners.RuleContainer$1: void <init>()>();

        <org.junit.runners.RuleContainer: java.util.Comparator ENTRY_COMPARATOR> = $r0;

        return;
    }

    void <init>()
    {
        org.junit.runners.RuleContainer $r0;
        java.util.IdentityHashMap r1;
        java.util.ArrayList r2;
        java.util.List r3;

        $r0 := @this: org.junit.runners.RuleContainer;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        r1 = new java.util.IdentityHashMap;

        specialinvoke r1.<java.util.IdentityHashMap: void <init>()>();

        $r0.<org.junit.runners.RuleContainer: java.util.IdentityHashMap orderValues> = r1;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        r3 = (java.util.List) r2;

        $r0.<org.junit.runners.RuleContainer: java.util.List testRules> = r3;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        r3 = (java.util.List) r2;

        $r0.<org.junit.runners.RuleContainer: java.util.List methodRules> = r3;

        return;
    }

    private java.util.List getSortedEntries()
    {
        org.junit.runners.RuleContainer $r0;
        java.util.ArrayList $r1, r10;
        java.util.List $r2;
        int $i0, $i1;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        org.junit.rules.MethodRule $r5;
        java.util.IdentityHashMap $r6;
        java.lang.Integer $r7;
        org.junit.rules.TestRule $r8;
        java.util.Comparator $r9;
        org.junit.runners.RuleContainer$RuleEntry r11;

        $r0 := @this: org.junit.runners.RuleContainer;

        r10 = new java.util.ArrayList;

        $r1 = r10;

        $r2 = $r0.<org.junit.runners.RuleContainer: java.util.List methodRules>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $r2 = $r0.<org.junit.runners.RuleContainer: java.util.List testRules>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i0 = $i0 + $i1;

        specialinvoke r10.<java.util.ArrayList: void <init>(int)>($i0);

        $r2 = $r0.<org.junit.runners.RuleContainer: java.util.List methodRules>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.junit.rules.MethodRule) $r4;

        r11 = new org.junit.runners.RuleContainer$RuleEntry;

        $r6 = $r0.<org.junit.runners.RuleContainer: java.util.IdentityHashMap orderValues>;

        $r4 = virtualinvoke $r6.<java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>($r5);

        $r7 = (java.lang.Integer) $r4;

        specialinvoke r11.<org.junit.runners.RuleContainer$RuleEntry: void <init>(java.lang.Object,int,java.lang.Integer)>($r5, 0, $r7);

        $r2 = (java.util.List) $r1;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r11);

        goto label1;

     label2:
        $r2 = $r0.<org.junit.runners.RuleContainer: java.util.List testRules>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (org.junit.rules.TestRule) $r4;

        r11 = new org.junit.runners.RuleContainer$RuleEntry;

        $r6 = $r0.<org.junit.runners.RuleContainer: java.util.IdentityHashMap orderValues>;

        $r4 = virtualinvoke $r6.<java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>($r8);

        $r7 = (java.lang.Integer) $r4;

        specialinvoke r11.<org.junit.runners.RuleContainer$RuleEntry: void <init>(java.lang.Object,int,java.lang.Integer)>($r8, 1, $r7);

        $r2 = (java.util.List) $r1;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r11);

        goto label3;

     label4:
        $r9 = <org.junit.runners.RuleContainer: java.util.Comparator ENTRY_COMPARATOR>;

        $r2 = (java.util.List) $r1;

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r2, $r9);

        $r2 = (java.util.List) $r1;

        return $r2;
    }

    public void add(org.junit.rules.MethodRule)
    {
        org.junit.runners.RuleContainer $r0;
        org.junit.rules.MethodRule $r1;
        java.util.List $r2;

        $r0 := @this: org.junit.runners.RuleContainer;

        $r1 := @parameter0: org.junit.rules.MethodRule;

        $r2 = $r0.<org.junit.runners.RuleContainer: java.util.List methodRules>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }

    public void add(org.junit.rules.TestRule)
    {
        org.junit.runners.RuleContainer $r0;
        org.junit.rules.TestRule $r1;
        java.util.List $r2;

        $r0 := @this: org.junit.runners.RuleContainer;

        $r1 := @parameter0: org.junit.rules.TestRule;

        $r2 = $r0.<org.junit.runners.RuleContainer: java.util.List testRules>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }

    public org.junit.runners.model.Statement apply(org.junit.runners.model.FrameworkMethod, org.junit.runner.Description, java.lang.Object, org.junit.runners.model.Statement)
    {
        org.junit.runners.RuleContainer $r0;
        org.junit.runners.model.FrameworkMethod $r1;
        org.junit.runner.Description $r2;
        java.lang.Object $r3, $r7;
        int $i0;
        org.junit.runners.model.Statement $r4;
        java.util.List $r5;
        boolean $z0;
        java.util.Iterator $r6;
        org.junit.runners.RuleContainer$RuleEntry $r8;
        org.junit.rules.TestRule $r9;
        org.junit.rules.MethodRule $r10;

        $r0 := @this: org.junit.runners.RuleContainer;

        $r1 := @parameter0: org.junit.runners.model.FrameworkMethod;

        $r2 := @parameter1: org.junit.runner.Description;

        $r3 := @parameter2: java.lang.Object;

        $r4 := @parameter3: org.junit.runners.model.Statement;

        $r5 = $r0.<org.junit.runners.RuleContainer: java.util.List methodRules>;

        $z0 = interfaceinvoke $r5.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r5 = $r0.<org.junit.runners.RuleContainer: java.util.List testRules>;

        $z0 = interfaceinvoke $r5.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return $r4;

     label1:
        $r5 = specialinvoke $r0.<org.junit.runners.RuleContainer: java.util.List getSortedEntries()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (org.junit.runners.RuleContainer$RuleEntry) $r7;

        $i0 = $r8.<org.junit.runners.RuleContainer$RuleEntry: int type>;

        if $i0 != 1 goto label3;

        $r7 = $r8.<org.junit.runners.RuleContainer$RuleEntry: java.lang.Object rule>;

        $r9 = (org.junit.rules.TestRule) $r7;

        $r4 = interfaceinvoke $r9.<org.junit.rules.TestRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>($r4, $r2);

        goto label2;

     label3:
        $r7 = $r8.<org.junit.runners.RuleContainer$RuleEntry: java.lang.Object rule>;

        $r10 = (org.junit.rules.MethodRule) $r7;

        $r4 = interfaceinvoke $r10.<org.junit.rules.MethodRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runners.model.FrameworkMethod,java.lang.Object)>($r4, $r1, $r3);

        goto label2;

     label4:
        return $r4;
    }

    public void setOrder(java.lang.Object, int)
    {
        org.junit.runners.RuleContainer $r0;
        java.lang.Object $r1;
        java.util.IdentityHashMap $r2;
        java.lang.Integer $r3;
        int $i0;

        $r0 := @this: org.junit.runners.RuleContainer;

        $r1 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        $r2 = $r0.<org.junit.runners.RuleContainer: java.util.IdentityHashMap orderValues>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke $r2.<java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r3);

        return;
    }

org.junit.runners.RuleContainer$1
    void <init>()
    {
        org.junit.runners.RuleContainer$1 $r0;

        $r0 := @this: org.junit.runners.RuleContainer$1;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    private int compareInt(int, int)
    {
        org.junit.runners.RuleContainer$1 $r0;
        int $i0, $i1;

        $r0 := @this: org.junit.runners.RuleContainer$1;

        $i1 := @parameter0: int;

        $i0 := @parameter1: int;

        if $i1 >= $i0 goto label1;

        return 1;

     label1:
        if $i1 != $i0 goto label2;

        return 0;

     label2:
        return -1;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        org.junit.runners.RuleContainer$1 $r0;
        int $i0;
        java.lang.Object $r1, $r2;
        org.junit.runners.RuleContainer$RuleEntry $r3, $r4;

        $r0 := @this: org.junit.runners.RuleContainer$1;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = (org.junit.runners.RuleContainer$RuleEntry) $r1;

        $r4 = (org.junit.runners.RuleContainer$RuleEntry) $r2;

        $i0 = virtualinvoke $r0.<org.junit.runners.RuleContainer$1: int compare(org.junit.runners.RuleContainer$RuleEntry,org.junit.runners.RuleContainer$RuleEntry)>($r3, $r4);

        return $i0;
    }

    public int compare(org.junit.runners.RuleContainer$RuleEntry, org.junit.runners.RuleContainer$RuleEntry)
    {
        org.junit.runners.RuleContainer$1 $r0;
        int $i0, $i1;
        org.junit.runners.RuleContainer$RuleEntry $r1, $r2;

        $r0 := @this: org.junit.runners.RuleContainer$1;

        $r1 := @parameter0: org.junit.runners.RuleContainer$RuleEntry;

        $r2 := @parameter1: org.junit.runners.RuleContainer$RuleEntry;

        $i1 = $r1.<org.junit.runners.RuleContainer$RuleEntry: int order>;

        $i0 = $r2.<org.junit.runners.RuleContainer$RuleEntry: int order>;

        $i0 = specialinvoke $r0.<org.junit.runners.RuleContainer$1: int compareInt(int,int)>($i1, $i0);

        if $i0 == 0 goto label1;

        return $i0;

     label1:
        $i0 = $r1.<org.junit.runners.RuleContainer$RuleEntry: int type>;

        $i1 = $r2.<org.junit.runners.RuleContainer$RuleEntry: int type>;

        $i0 = $i0 - $i1;

        return $i0;
    }

org.junit.runners.RuleContainer$RuleEntry
<org.junit.runners.RuleContainer$RuleEntry: int order>
<org.junit.runners.RuleContainer$RuleEntry: java.lang.Object rule>
<org.junit.runners.RuleContainer$RuleEntry: int type>
    void <init>(java.lang.Object, int, java.lang.Integer)
    {
        org.junit.runners.RuleContainer$RuleEntry $r0;
        int $i0;
        java.lang.Integer $r1;
        java.lang.Object $r2;

        $r0 := @this: org.junit.runners.RuleContainer$RuleEntry;

        $r2 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.lang.Integer;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<org.junit.runners.RuleContainer$RuleEntry: java.lang.Object rule> = $r2;

        $r0.<org.junit.runners.RuleContainer$RuleEntry: int type> = $i0;

        if $r1 == null goto label1;

        $i0 = virtualinvoke $r1.<java.lang.Integer: int intValue()>();

        goto label2;

     label1:
        $i0 = -1;

     label2:
        $r0.<org.junit.runners.RuleContainer$RuleEntry: int order> = $i0;

        return;
    }

