androidx.media3.transformer.VideoTranscodingSamplePipeline
<androidx.media3.transformer.VideoTranscodingSamplePipeline: int maxPendingFrameCount>
<androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.decoder.DecoderInputBuffer decoderInputBuffer>
<androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.transformer.Codec decoder>
<androidx.media3.transformer.VideoTranscodingSamplePipeline: java.util.ArrayList decodeOnlyPresentationTimestamps>
<androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.common.FrameProcessor frameProcessor>
<androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper encoderWrapper>
<androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.decoder.DecoderInputBuffer encoderOutputBuffer>
    public void <init>(android.content.Context, androidx.media3.common.Format, long, long, androidx.media3.transformer.TransformationRequest, com.google.common.collect.ImmutableList, androidx.media3.common.FrameProcessor$Factory, androidx.media3.transformer.Codec$DecoderFactory, androidx.media3.transformer.Codec$EncoderFactory, androidx.media3.transformer.MuxerWrapper, androidx.media3.transformer.FallbackListener, androidx.media3.transformer.Transformer$AsyncErrorListener, androidx.media3.common.DebugViewProvider) throws androidx.media3.transformer.TransformationException
    {
        androidx.media3.transformer.VideoTranscodingSamplePipeline r0;
        android.content.Context r1;
        long l0, l1;
        androidx.media3.transformer.TransformationRequest r2;
        com.google.common.collect.ImmutableList r3, $r16, $r18;
        androidx.media3.common.FrameProcessor$Factory r4;
        androidx.media3.transformer.Codec$DecoderFactory r5;
        androidx.media3.transformer.Codec$EncoderFactory r6;
        androidx.media3.transformer.MuxerWrapper r7;
        androidx.media3.transformer.FallbackListener r8;
        androidx.media3.transformer.Transformer$AsyncErrorListener r9;
        androidx.media3.common.DebugViewProvider r10;
        int i2, i3, $i4, $i5, $i7, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        com.google.common.collect.ImmutableList$Builder r11, r56;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7;
        androidx.media3.common.ColorInfo $r12, $r20, $r24, $r26, $r32;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6;
        byte $b6, $b8, $b9;
        androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper $r19, $r25, r58;
        androidx.media3.common.FrameProcessor $r21, $r23, $r47;
        androidx.media3.effect.Presentation $r27;
        androidx.media3.transformer.TransformationException $r30, $r35, $r37;
        androidx.media3.common.Format$Builder $r31, $r33;
        java.lang.Throwable $r36, r46, r61, r62, r63;
        androidx.media3.common.Format r38;
        androidx.media3.effect.ScaleToFitTransformation$Builder $r43, $r44, r57;
        androidx.media3.effect.ScaleToFitTransformation $r45;
        android.view.Surface $r48;
        androidx.media3.transformer.Codec $r49, $r50;
        java.lang.IllegalArgumentException r51, r52;
        androidx.media3.decoder.DecoderInputBuffer r53, r54;
        java.util.ArrayList r55;
        androidx.media3.transformer.VideoTranscodingSamplePipeline$1 r59;
        androidx.media3.common.FrameInfo r60;

        r0 := @this: androidx.media3.transformer.VideoTranscodingSamplePipeline;

        r1 := @parameter0: android.content.Context;

        r38 := @parameter1: androidx.media3.common.Format;

        l0 := @parameter2: long;

        l1 := @parameter3: long;

        r2 := @parameter4: androidx.media3.transformer.TransformationRequest;

        r3 := @parameter5: com.google.common.collect.ImmutableList;

        r4 := @parameter6: androidx.media3.common.FrameProcessor$Factory;

        r5 := @parameter7: androidx.media3.transformer.Codec$DecoderFactory;

        r6 := @parameter8: androidx.media3.transformer.Codec$EncoderFactory;

        r7 := @parameter9: androidx.media3.transformer.MuxerWrapper;

        r8 := @parameter10: androidx.media3.transformer.FallbackListener;

        r9 := @parameter11: androidx.media3.transformer.Transformer$AsyncErrorListener;

        r10 := @parameter12: androidx.media3.common.DebugViewProvider;

        $z0 = r2.<androidx.media3.transformer.TransformationRequest: boolean flattenForSlowMotion>;

        specialinvoke r0.<androidx.media3.transformer.BaseSamplePipeline: void <init>(androidx.media3.common.Format,long,long,boolean,androidx.media3.transformer.MuxerWrapper)>(r38, l0, l1, $z0, r7);

        $r12 = r38.<androidx.media3.common.Format: androidx.media3.common.ColorInfo colorInfo>;

        $z1 = staticinvoke <androidx.media3.common.ColorInfo: boolean isTransferHdr(androidx.media3.common.ColorInfo)>($r12);

        if $z1 == 0 goto label04;

        $z4 = r2.<androidx.media3.transformer.TransformationRequest: boolean forceInterpretHdrVideoAsSdr>;

        if $z4 == 0 goto label02;

        $i11 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i11 >= 29 goto label01;

        r51 = new java.lang.IllegalArgumentException;

        specialinvoke r51.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Interpreting HDR video as SDR is not supported.");

        $r35 = staticinvoke <androidx.media3.transformer.TransformationException: androidx.media3.transformer.TransformationException createForCodec(java.lang.Throwable,boolean,boolean,androidx.media3.common.Format,java.lang.String,int)>(r51, 1, 1, r38, null, 3004);

        r61 = (java.lang.Throwable) $r35;

        throw r61;

     label01:
        $r31 = virtualinvoke r38.<androidx.media3.common.Format: androidx.media3.common.Format$Builder buildUpon()>();

        $r32 = <androidx.media3.common.ColorInfo: androidx.media3.common.ColorInfo SDR_BT709_LIMITED>;

        $r33 = virtualinvoke $r31.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setColorInfo(androidx.media3.common.ColorInfo)>($r32);

        r38 = virtualinvoke $r33.<androidx.media3.common.Format$Builder: androidx.media3.common.Format build()>();

        goto label04;

     label02:
        $i10 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i10 < 31 goto label03;

        $z5 = staticinvoke <androidx.media3.transformer.VideoTranscodingSamplePipeline: boolean deviceNeedsNoToneMappingWorkaround()>();

        if $z5 == 0 goto label04;

     label03:
        r52 = new java.lang.IllegalArgumentException;

        specialinvoke r52.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HDR editing and tone mapping is not supported.");

        $r30 = staticinvoke <androidx.media3.transformer.TransformationException: androidx.media3.transformer.TransformationException createForCodec(java.lang.Throwable,boolean,boolean,androidx.media3.common.Format,java.lang.String,int)>(r52, 1, 0, r38, null, 4004);

        r62 = (java.lang.Throwable) $r30;

        throw r62;

     label04:
        r53 = new androidx.media3.decoder.DecoderInputBuffer;

        specialinvoke r53.<androidx.media3.decoder.DecoderInputBuffer: void <init>(int)>(0);

        r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.decoder.DecoderInputBuffer decoderInputBuffer> = r53;

        r54 = new androidx.media3.decoder.DecoderInputBuffer;

        specialinvoke r54.<androidx.media3.decoder.DecoderInputBuffer: void <init>(int)>(0);

        r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.decoder.DecoderInputBuffer encoderOutputBuffer> = r54;

        r55 = new java.util.ArrayList;

        specialinvoke r55.<java.util.ArrayList: void <init>()>();

        r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: java.util.ArrayList decodeOnlyPresentationTimestamps> = r55;

        $i12 = r38.<androidx.media3.common.Format: int rotationDegrees>;

        $i13 = $i12 % 180;

        if $i13 != 0 goto label05;

        $i14 = r38.<androidx.media3.common.Format: int width>;

        goto label06;

     label05:
        $i14 = r38.<androidx.media3.common.Format: int height>;

     label06:
        i2 = $i14;

        $i4 = r38.<androidx.media3.common.Format: int rotationDegrees>;

        $i5 = $i4 % 180;

        if $i5 != 0 goto label07;

        $i15 = r38.<androidx.media3.common.Format: int height>;

        goto label08;

     label07:
        $i15 = r38.<androidx.media3.common.Format: int width>;

     label08:
        i3 = $i15;

        r56 = new com.google.common.collect.ImmutableList$Builder;

        specialinvoke r56.<com.google.common.collect.ImmutableList$Builder: void <init>()>();

        r11 = virtualinvoke r56.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList$Builder addAll(java.lang.Iterable)>(r3);

        $f0 = r2.<androidx.media3.transformer.TransformationRequest: float scaleX>;

        $b6 = $f0 cmpl 1.0F;

        if $b6 != 0 goto label09;

        $f2 = r2.<androidx.media3.transformer.TransformationRequest: float scaleY>;

        $b8 = $f2 cmpl 1.0F;

        if $b8 != 0 goto label09;

        $f3 = r2.<androidx.media3.transformer.TransformationRequest: float rotationDegrees>;

        $b9 = $f3 cmpl 0.0F;

        if $b9 == 0 goto label10;

     label09:
        r57 = new androidx.media3.effect.ScaleToFitTransformation$Builder;

        specialinvoke r57.<androidx.media3.effect.ScaleToFitTransformation$Builder: void <init>()>();

        $f4 = r2.<androidx.media3.transformer.TransformationRequest: float scaleX>;

        $f5 = r2.<androidx.media3.transformer.TransformationRequest: float scaleY>;

        $r43 = virtualinvoke r57.<androidx.media3.effect.ScaleToFitTransformation$Builder: androidx.media3.effect.ScaleToFitTransformation$Builder setScale(float,float)>($f4, $f5);

        $f6 = r2.<androidx.media3.transformer.TransformationRequest: float rotationDegrees>;

        $r44 = virtualinvoke $r43.<androidx.media3.effect.ScaleToFitTransformation$Builder: androidx.media3.effect.ScaleToFitTransformation$Builder setRotationDegrees(float)>($f6);

        $r45 = virtualinvoke $r44.<androidx.media3.effect.ScaleToFitTransformation$Builder: androidx.media3.effect.ScaleToFitTransformation build()>();

        virtualinvoke r11.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList$Builder add(java.lang.Object)>($r45);

     label10:
        $i16 = r2.<androidx.media3.transformer.TransformationRequest: int outputHeight>;

        if $i16 == -1 goto label11;

        $i7 = r2.<androidx.media3.transformer.TransformationRequest: int outputHeight>;

        $r27 = staticinvoke <androidx.media3.effect.Presentation: androidx.media3.effect.Presentation createForHeight(int)>($i7);

        virtualinvoke r11.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList$Builder add(java.lang.Object)>($r27);

     label11:
        r58 = new androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper;

        $r16 = virtualinvoke r7.<androidx.media3.transformer.MuxerWrapper: com.google.common.collect.ImmutableList getSupportedSampleMimeTypes(int)>(2);

        specialinvoke r58.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: void <init>(androidx.media3.transformer.Codec$EncoderFactory,androidx.media3.common.Format,java.util.List,androidx.media3.transformer.TransformationRequest,androidx.media3.transformer.FallbackListener)>(r6, r38, $r16, r2, r8);

        r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper encoderWrapper> = r58;

     label12:
        r59 = new androidx.media3.transformer.VideoTranscodingSamplePipeline$1;

        specialinvoke r59.<androidx.media3.transformer.VideoTranscodingSamplePipeline$1: void <init>(androidx.media3.transformer.VideoTranscodingSamplePipeline,androidx.media3.transformer.Transformer$AsyncErrorListener)>(r0, r9);

        $r18 = virtualinvoke r11.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList build()>();

        $r19 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper encoderWrapper>;

        $r20 = virtualinvoke $r19.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.common.ColorInfo getSupportedInputColor()>();

        $r21 = interfaceinvoke r4.<androidx.media3.common.FrameProcessor$Factory: androidx.media3.common.FrameProcessor create(android.content.Context,androidx.media3.common.FrameProcessor$Listener,java.util.List,androidx.media3.common.DebugViewProvider,androidx.media3.common.ColorInfo,boolean)>(r1, r59, $r18, r10, $r20, 1);

        r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.common.FrameProcessor frameProcessor> = $r21;

     label13:
        goto label15;

     label14:
        $r36 := @caughtexception;

        r46 = $r36;

        $r37 = staticinvoke <androidx.media3.transformer.TransformationException: androidx.media3.transformer.TransformationException createForFrameProcessingException(androidx.media3.common.FrameProcessingException,int)>(r46, 5001);

        r63 = (java.lang.Throwable) $r37;

        throw r63;

     label15:
        $r23 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.common.FrameProcessor frameProcessor>;

        r60 = new androidx.media3.common.FrameInfo;

        $f1 = r38.<androidx.media3.common.Format: float pixelWidthHeightRatio>;

        specialinvoke r60.<androidx.media3.common.FrameInfo: void <init>(int,int,float,long)>(i2, i3, $f1, l0);

        interfaceinvoke $r23.<androidx.media3.common.FrameProcessor: void setInputFrameInfo(androidx.media3.common.FrameInfo)>(r60);

        $r24 = r38.<androidx.media3.common.Format: androidx.media3.common.ColorInfo colorInfo>;

        $z2 = staticinvoke <androidx.media3.common.ColorInfo: boolean isTransferHdr(androidx.media3.common.ColorInfo)>($r24);

        if $z2 == 0 goto label16;

        $r25 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper encoderWrapper>;

        $r26 = virtualinvoke $r25.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.common.ColorInfo getSupportedInputColor()>();

        $z3 = staticinvoke <androidx.media3.common.ColorInfo: boolean isTransferHdr(androidx.media3.common.ColorInfo)>($r26);

        if $z3 != 0 goto label16;

        $z6 = 1;

        goto label17;

     label16:
        $z6 = 0;

     label17:
        z7 = $z6;

        $r47 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.common.FrameProcessor frameProcessor>;

        $r48 = interfaceinvoke $r47.<androidx.media3.common.FrameProcessor: android.view.Surface getInputSurface()>();

        $r49 = interfaceinvoke r5.<androidx.media3.transformer.Codec$DecoderFactory: androidx.media3.transformer.Codec createForVideoDecoding(androidx.media3.common.Format,android.view.Surface,boolean)>(r38, $r48, z7);

        r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.transformer.Codec decoder> = $r49;

        $r50 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.transformer.Codec decoder>;

        $i17 = interfaceinvoke $r50.<androidx.media3.transformer.Codec: int getMaxPendingFrameCount()>();

        r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: int maxPendingFrameCount> = $i17;

        return;

        catch androidx.media3.common.FrameProcessingException from label12 to label13 with label14;
    }

    public void release()
    {
        androidx.media3.transformer.VideoTranscodingSamplePipeline r0;
        androidx.media3.common.FrameProcessor $r1;
        androidx.media3.transformer.Codec $r2;
        androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper $r3;

        r0 := @this: androidx.media3.transformer.VideoTranscodingSamplePipeline;

        $r1 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.common.FrameProcessor frameProcessor>;

        interfaceinvoke $r1.<androidx.media3.common.FrameProcessor: void release()>();

        $r2 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.transformer.Codec decoder>;

        interfaceinvoke $r2.<androidx.media3.transformer.Codec: void release()>();

        $r3 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper encoderWrapper>;

        virtualinvoke $r3.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: void release()>();

        return;
    }

    protected androidx.media3.decoder.DecoderInputBuffer dequeueInputBufferInternal() throws androidx.media3.transformer.TransformationException
    {
        androidx.media3.transformer.VideoTranscodingSamplePipeline r0;
        androidx.media3.decoder.DecoderInputBuffer $r1, $r3;
        androidx.media3.transformer.Codec $r2;
        boolean $z0;

        r0 := @this: androidx.media3.transformer.VideoTranscodingSamplePipeline;

        $r2 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.transformer.Codec decoder>;

        $r1 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.decoder.DecoderInputBuffer decoderInputBuffer>;

        $z0 = interfaceinvoke $r2.<androidx.media3.transformer.Codec: boolean maybeDequeueInputBuffer(androidx.media3.decoder.DecoderInputBuffer)>($r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.decoder.DecoderInputBuffer decoderInputBuffer>;

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    protected void queueInputBufferInternal() throws androidx.media3.transformer.TransformationException
    {
        androidx.media3.transformer.VideoTranscodingSamplePipeline r0;
        androidx.media3.decoder.DecoderInputBuffer $r1, $r2, $r4;
        boolean $z0;
        androidx.media3.transformer.Codec $r3;
        long $l0;
        java.util.ArrayList $r5;
        java.lang.Long $r6;

        r0 := @this: androidx.media3.transformer.VideoTranscodingSamplePipeline;

        $r1 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.decoder.DecoderInputBuffer decoderInputBuffer>;

        $z0 = virtualinvoke $r1.<androidx.media3.decoder.DecoderInputBuffer: boolean isDecodeOnly()>();

        if $z0 == 0 goto label1;

        $r5 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: java.util.ArrayList decodeOnlyPresentationTimestamps>;

        $r4 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.decoder.DecoderInputBuffer decoderInputBuffer>;

        $l0 = $r4.<androidx.media3.decoder.DecoderInputBuffer: long timeUs>;

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

     label1:
        $r3 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.transformer.Codec decoder>;

        $r2 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.decoder.DecoderInputBuffer decoderInputBuffer>;

        interfaceinvoke $r3.<androidx.media3.transformer.Codec: void queueInputBuffer(androidx.media3.decoder.DecoderInputBuffer)>($r2);

        return;
    }

    protected boolean processDataUpToMuxer() throws androidx.media3.transformer.TransformationException
    {
        androidx.media3.transformer.VideoTranscodingSamplePipeline r0;
        androidx.media3.transformer.Codec $r1, $r2;
        boolean $z0, $z1, $z2, z3;
        androidx.media3.common.FrameProcessor $r3;

        r0 := @this: androidx.media3.transformer.VideoTranscodingSamplePipeline;

        $r1 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.transformer.Codec decoder>;

        $z0 = interfaceinvoke $r1.<androidx.media3.transformer.Codec: boolean isEnded()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        z3 = 0;

     label2:
        $z1 = specialinvoke r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: boolean maybeProcessDecoderOutput()>();

        if $z1 == 0 goto label3;

        z3 = 1;

        goto label2;

     label3:
        $r2 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.transformer.Codec decoder>;

        $z2 = interfaceinvoke $r2.<androidx.media3.transformer.Codec: boolean isEnded()>();

        if $z2 == 0 goto label4;

        $r3 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.common.FrameProcessor frameProcessor>;

        interfaceinvoke $r3.<androidx.media3.common.FrameProcessor: void signalEndOfInput()>();

     label4:
        return z3;
    }

    protected androidx.media3.common.Format getMuxerInputFormat() throws androidx.media3.transformer.TransformationException
    {
        androidx.media3.transformer.VideoTranscodingSamplePipeline r0;
        androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper $r1;
        androidx.media3.common.Format $r2;

        r0 := @this: androidx.media3.transformer.VideoTranscodingSamplePipeline;

        $r1 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper encoderWrapper>;

        $r2 = virtualinvoke $r1.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.common.Format getOutputFormat()>();

        return $r2;
    }

    protected androidx.media3.decoder.DecoderInputBuffer getMuxerInputBuffer() throws androidx.media3.transformer.TransformationException
    {
        androidx.media3.transformer.VideoTranscodingSamplePipeline r0;
        android.media.MediaCodec$BufferInfo r1, $r8;
        androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper $r2, $r7;
        androidx.media3.decoder.DecoderInputBuffer $r3, $r5, $r10, $r11, $r12;
        java.nio.ByteBuffer $r4, $r6;
        java.lang.Object $r9;
        long $l0;
        int $i1;

        r0 := @this: androidx.media3.transformer.VideoTranscodingSamplePipeline;

        $r3 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.decoder.DecoderInputBuffer encoderOutputBuffer>;

        $r2 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper encoderWrapper>;

        $r4 = virtualinvoke $r2.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: java.nio.ByteBuffer getOutputBuffer()>();

        $r3.<androidx.media3.decoder.DecoderInputBuffer: java.nio.ByteBuffer data> = $r4;

        $r5 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.decoder.DecoderInputBuffer encoderOutputBuffer>;

        $r6 = $r5.<androidx.media3.decoder.DecoderInputBuffer: java.nio.ByteBuffer data>;

        if $r6 != null goto label1;

        return null;

     label1:
        $r7 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper encoderWrapper>;

        $r8 = virtualinvoke $r7.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: android.media.MediaCodec$BufferInfo getOutputBufferInfo()>();

        $r9 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r8);

        r1 = (android.media.MediaCodec$BufferInfo) $r9;

        $r10 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.decoder.DecoderInputBuffer encoderOutputBuffer>;

        $l0 = r1.<android.media.MediaCodec$BufferInfo: long presentationTimeUs>;

        $r10.<androidx.media3.decoder.DecoderInputBuffer: long timeUs> = $l0;

        $r11 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.decoder.DecoderInputBuffer encoderOutputBuffer>;

        $i1 = r1.<android.media.MediaCodec$BufferInfo: int flags>;

        virtualinvoke $r11.<androidx.media3.decoder.DecoderInputBuffer: void setFlags(int)>($i1);

        $r12 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.decoder.DecoderInputBuffer encoderOutputBuffer>;

        return $r12;
    }

    protected void releaseMuxerInputBuffer() throws androidx.media3.transformer.TransformationException
    {
        androidx.media3.transformer.VideoTranscodingSamplePipeline r0;
        androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper $r1;

        r0 := @this: androidx.media3.transformer.VideoTranscodingSamplePipeline;

        $r1 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper encoderWrapper>;

        virtualinvoke $r1.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: void releaseOutputBuffer(boolean)>(0);

        return;
    }

    protected boolean isMuxerInputEnded()
    {
        androidx.media3.transformer.VideoTranscodingSamplePipeline r0;
        androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper $r1;
        boolean $z0;

        r0 := @this: androidx.media3.transformer.VideoTranscodingSamplePipeline;

        $r1 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper encoderWrapper>;

        $z0 = virtualinvoke $r1.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: boolean isEnded()>();

        return $z0;
    }

    private static androidx.media3.transformer.TransformationRequest createSupportedTransformationRequest(androidx.media3.transformer.TransformationRequest, boolean, androidx.media3.common.Format, androidx.media3.common.Format, boolean)
    {
        androidx.media3.transformer.TransformationRequest r0, $r7;
        boolean z0, z1, $z2, $z3, $z4;
        androidx.media3.common.Format r1, r2;
        androidx.media3.transformer.TransformationRequest$Builder r3, $r5, $r6, $r8;
        java.lang.String $r4, $r10, $r11;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @parameter0: androidx.media3.transformer.TransformationRequest;

        z0 := @parameter1: boolean;

        r1 := @parameter2: androidx.media3.common.Format;

        r2 := @parameter3: androidx.media3.common.Format;

        z1 := @parameter4: boolean;

        $z2 = r0.<androidx.media3.transformer.TransformationRequest: boolean enableRequestSdrToneMapping>;

        if $z2 != z1 goto label3;

        $r11 = r1.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        $r10 = r2.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        $z3 = staticinvoke <androidx.media3.common.util.Util: boolean areEqual(java.lang.Object,java.lang.Object)>($r11, $r10);

        if $z3 == 0 goto label3;

        if z0 == 0 goto label1;

        $i3 = r1.<androidx.media3.common.Format: int width>;

        $i2 = r2.<androidx.media3.common.Format: int width>;

        if $i3 != $i2 goto label3;

        goto label2;

     label1:
        $i1 = r1.<androidx.media3.common.Format: int height>;

        $i0 = r2.<androidx.media3.common.Format: int height>;

        if $i1 != $i0 goto label3;

     label2:
        return r0;

     label3:
        r3 = virtualinvoke r0.<androidx.media3.transformer.TransformationRequest: androidx.media3.transformer.TransformationRequest$Builder buildUpon()>();

        $z4 = r0.<androidx.media3.transformer.TransformationRequest: boolean enableRequestSdrToneMapping>;

        if $z4 == z1 goto label4;

        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>(z1);

        $r8 = virtualinvoke r3.<androidx.media3.transformer.TransformationRequest$Builder: androidx.media3.transformer.TransformationRequest$Builder setEnableRequestSdrToneMapping(boolean)>(1);

        virtualinvoke $r8.<androidx.media3.transformer.TransformationRequest$Builder: androidx.media3.transformer.TransformationRequest$Builder experimental_setEnableHdrEditing(boolean)>(0);

     label4:
        $r4 = r2.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        $r5 = virtualinvoke r3.<androidx.media3.transformer.TransformationRequest$Builder: androidx.media3.transformer.TransformationRequest$Builder setVideoMimeType(java.lang.String)>($r4);

        if z0 == 0 goto label5;

        $i4 = r1.<androidx.media3.common.Format: int width>;

        goto label6;

     label5:
        $i4 = r1.<androidx.media3.common.Format: int height>;

     label6:
        $r6 = virtualinvoke $r5.<androidx.media3.transformer.TransformationRequest$Builder: androidx.media3.transformer.TransformationRequest$Builder setResolution(int)>($i4);

        $r7 = virtualinvoke $r6.<androidx.media3.transformer.TransformationRequest$Builder: androidx.media3.transformer.TransformationRequest build()>();

        return $r7;
    }

    private static boolean deviceNeedsNoToneMappingWorkaround()
    {
        java.lang.String $r0, $r1, $r2;
        boolean $z0, $z1, $z2, $z3;

        $r0 = <androidx.media3.common.util.Util: java.lang.String MANUFACTURER>;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("Google");

        if $z0 == 0 goto label2;

        $r1 = <android.os.Build: java.lang.String ID>;

        $z1 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("TP1A");

        if $z1 != 0 goto label1;

        $r2 = <android.os.Build: java.lang.String ID>;

        $z2 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("rwd9.220429.053");

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    private boolean maybeProcessDecoderOutput() throws androidx.media3.transformer.TransformationException
    {
        androidx.media3.transformer.VideoTranscodingSamplePipeline r0;
        android.media.MediaCodec$BufferInfo r1;
        androidx.media3.transformer.Codec $r2, $r4, $r6;
        long $l0;
        boolean $z0;
        int $i1, $i2, $i3;
        androidx.media3.common.FrameProcessor $r3, $r5;

        r0 := @this: androidx.media3.transformer.VideoTranscodingSamplePipeline;

        $r2 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.transformer.Codec decoder>;

        r1 = interfaceinvoke $r2.<androidx.media3.transformer.Codec: android.media.MediaCodec$BufferInfo getOutputBufferInfo()>();

        if r1 != null goto label1;

        return 0;

     label1:
        $l0 = r1.<android.media.MediaCodec$BufferInfo: long presentationTimeUs>;

        $z0 = specialinvoke r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: boolean isDecodeOnlyBuffer(long)>($l0);

        if $z0 == 0 goto label2;

        $r6 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.transformer.Codec decoder>;

        interfaceinvoke $r6.<androidx.media3.transformer.Codec: void releaseOutputBuffer(boolean)>(0);

        return 1;

     label2:
        $i1 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: int maxPendingFrameCount>;

        if $i1 == 2147483647 goto label3;

        $r5 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.common.FrameProcessor frameProcessor>;

        $i2 = interfaceinvoke $r5.<androidx.media3.common.FrameProcessor: int getPendingInputFrameCount()>();

        $i3 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: int maxPendingFrameCount>;

        if $i2 != $i3 goto label3;

        return 0;

     label3:
        $r3 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.common.FrameProcessor frameProcessor>;

        interfaceinvoke $r3.<androidx.media3.common.FrameProcessor: void registerInputFrame()>();

        $r4 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.transformer.Codec decoder>;

        interfaceinvoke $r4.<androidx.media3.transformer.Codec: void releaseOutputBuffer(boolean)>(1);

        return 1;
    }

    private boolean isDecodeOnlyBuffer(long)
    {
        androidx.media3.transformer.VideoTranscodingSamplePipeline r0;
        long l0, $l2;
        int i1, i4;
        java.util.ArrayList $r1, $r2, $r5;
        java.lang.Object $r3;
        java.lang.Long $r4;
        byte $b3;

        r0 := @this: androidx.media3.transformer.VideoTranscodingSamplePipeline;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: java.util.ArrayList decodeOnlyPresentationTimestamps>;

        i1 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        i4 = 0;

     label1:
        if i4 >= i1 goto label3;

        $r2 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: java.util.ArrayList decodeOnlyPresentationTimestamps>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        $r4 = (java.lang.Long) $r3;

        $l2 = virtualinvoke $r4.<java.lang.Long: long longValue()>();

        $b3 = $l2 cmp l0;

        if $b3 != 0 goto label2;

        $r5 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: java.util.ArrayList decodeOnlyPresentationTimestamps>;

        virtualinvoke $r5.<java.util.ArrayList: java.lang.Object remove(int)>(i4);

        return 1;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        return 0;
    }

    static androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper access$000(androidx.media3.transformer.VideoTranscodingSamplePipeline)
    {
        androidx.media3.transformer.VideoTranscodingSamplePipeline r0;
        androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper $r1;

        r0 := @parameter0: androidx.media3.transformer.VideoTranscodingSamplePipeline;

        $r1 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper encoderWrapper>;

        return $r1;
    }

    static androidx.media3.common.FrameProcessor access$100(androidx.media3.transformer.VideoTranscodingSamplePipeline)
    {
        androidx.media3.transformer.VideoTranscodingSamplePipeline r0;
        androidx.media3.common.FrameProcessor $r1;

        r0 := @parameter0: androidx.media3.transformer.VideoTranscodingSamplePipeline;

        $r1 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.common.FrameProcessor frameProcessor>;

        return $r1;
    }

    static androidx.media3.transformer.TransformationRequest access$200(androidx.media3.transformer.TransformationRequest, boolean, androidx.media3.common.Format, androidx.media3.common.Format, boolean)
    {
        androidx.media3.transformer.TransformationRequest r0, $r3;
        boolean z0, z1;
        androidx.media3.common.Format r1, r2;

        r0 := @parameter0: androidx.media3.transformer.TransformationRequest;

        z0 := @parameter1: boolean;

        r1 := @parameter2: androidx.media3.common.Format;

        r2 := @parameter3: androidx.media3.common.Format;

        z1 := @parameter4: boolean;

        $r3 = staticinvoke <androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.transformer.TransformationRequest createSupportedTransformationRequest(androidx.media3.transformer.TransformationRequest,boolean,androidx.media3.common.Format,androidx.media3.common.Format,boolean)>(r0, z0, r1, r2, z1);

        return $r3;
    }

androidx.media3.transformer.VideoTranscodingSamplePipeline$1
<androidx.media3.transformer.VideoTranscodingSamplePipeline$1: androidx.media3.transformer.Transformer$AsyncErrorListener val$asyncErrorListener>
<androidx.media3.transformer.VideoTranscodingSamplePipeline$1: androidx.media3.transformer.VideoTranscodingSamplePipeline this$0>
    void <init>(androidx.media3.transformer.VideoTranscodingSamplePipeline, androidx.media3.transformer.Transformer$AsyncErrorListener)
    {
        androidx.media3.transformer.VideoTranscodingSamplePipeline$1 r0;
        androidx.media3.transformer.VideoTranscodingSamplePipeline r1;
        androidx.media3.transformer.Transformer$AsyncErrorListener r2;

        r0 := @this: androidx.media3.transformer.VideoTranscodingSamplePipeline$1;

        r1 := @parameter0: androidx.media3.transformer.VideoTranscodingSamplePipeline;

        r2 := @parameter1: androidx.media3.transformer.Transformer$AsyncErrorListener;

        r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$1: androidx.media3.transformer.VideoTranscodingSamplePipeline this$0> = r1;

        r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$1: androidx.media3.transformer.Transformer$AsyncErrorListener val$asyncErrorListener> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onOutputSizeChanged(int, int)
    {
        androidx.media3.transformer.VideoTranscodingSamplePipeline$1 r0;
        int i0, i1;
        androidx.media3.transformer.VideoTranscodingSamplePipeline $r1, $r4;
        androidx.media3.common.FrameProcessor $r2, $r5;
        java.lang.Object $r3;
        androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper $r6;
        androidx.media3.common.SurfaceInfo $r7;

        r0 := @this: androidx.media3.transformer.VideoTranscodingSamplePipeline$1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$1: androidx.media3.transformer.VideoTranscodingSamplePipeline this$0>;

        $r2 = staticinvoke <androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.common.FrameProcessor access$100(androidx.media3.transformer.VideoTranscodingSamplePipeline)>($r1);

        $r3 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        $r5 = (androidx.media3.common.FrameProcessor) $r3;

        $r4 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$1: androidx.media3.transformer.VideoTranscodingSamplePipeline this$0>;

        $r6 = staticinvoke <androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper access$000(androidx.media3.transformer.VideoTranscodingSamplePipeline)>($r4);

        $r7 = virtualinvoke $r6.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.common.SurfaceInfo getSurfaceInfo(int,int)>(i0, i1);

        interfaceinvoke $r5.<androidx.media3.common.FrameProcessor: void setOutputSurfaceInfo(androidx.media3.common.SurfaceInfo)>($r7);

        goto label1;

     label1:
        return;
    }

    public void onOutputFrameAvailable(long)
    {
        androidx.media3.transformer.VideoTranscodingSamplePipeline$1 r0;
        long l0;

        r0 := @this: androidx.media3.transformer.VideoTranscodingSamplePipeline$1;

        l0 := @parameter0: long;

        return;
    }

    public void onFrameProcessingError(androidx.media3.common.FrameProcessingException)
    {
        androidx.media3.transformer.VideoTranscodingSamplePipeline$1 r0;
        androidx.media3.common.FrameProcessingException r1;
        androidx.media3.transformer.Transformer$AsyncErrorListener $r2;
        androidx.media3.transformer.TransformationException $r3;

        r0 := @this: androidx.media3.transformer.VideoTranscodingSamplePipeline$1;

        r1 := @parameter0: androidx.media3.common.FrameProcessingException;

        $r2 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$1: androidx.media3.transformer.Transformer$AsyncErrorListener val$asyncErrorListener>;

        $r3 = staticinvoke <androidx.media3.transformer.TransformationException: androidx.media3.transformer.TransformationException createForFrameProcessingException(androidx.media3.common.FrameProcessingException,int)>(r1, 5001);

        interfaceinvoke $r2.<androidx.media3.transformer.Transformer$AsyncErrorListener: void onTransformationException(androidx.media3.transformer.TransformationException)>($r3);

        return;
    }

    public void onFrameProcessingEnded()
    {
        androidx.media3.transformer.VideoTranscodingSamplePipeline$1 r0;
        androidx.media3.transformer.VideoTranscodingSamplePipeline $r1;
        androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper $r2;

        r0 := @this: androidx.media3.transformer.VideoTranscodingSamplePipeline$1;

        $r1 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$1: androidx.media3.transformer.VideoTranscodingSamplePipeline this$0>;

        $r2 = staticinvoke <androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper access$000(androidx.media3.transformer.VideoTranscodingSamplePipeline)>($r1);

        virtualinvoke $r2.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: void signalEndOfInputStream()>();

        goto label1;

     label1:
        return;
    }

androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper
<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: java.lang.String TAG>
<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.transformer.Codec$EncoderFactory encoderFactory>
<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.common.Format inputFormat>
<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: java.util.List allowedOutputMimeTypes>
<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.transformer.TransformationRequest transformationRequest>
<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.transformer.FallbackListener fallbackListener>
<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: java.lang.String requestedOutputMimeType>
<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: com.google.common.collect.ImmutableList supportedEncoderNamesForHdrEditing>
<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.common.SurfaceInfo encoderSurfaceInfo>
<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.transformer.Codec encoder>
<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: int outputRotationDegrees>
<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: boolean releaseEncoder>
    public void <init>(androidx.media3.transformer.Codec$EncoderFactory, androidx.media3.common.Format, java.util.List, androidx.media3.transformer.TransformationRequest, androidx.media3.transformer.FallbackListener)
    {
        androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper r0;
        androidx.media3.transformer.Codec$EncoderFactory r1;
        androidx.media3.common.Format r2;
        java.util.List r3;
        androidx.media3.transformer.TransformationRequest r4;
        androidx.media3.transformer.FallbackListener r5;
        java.lang.String $r6, $r7, $r10, $r13;
        java.lang.Object $r8;
        androidx.media3.common.ColorInfo $r9;
        com.google.common.collect.ImmutableList $r11;

        r0 := @this: androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper;

        r1 := @parameter0: androidx.media3.transformer.Codec$EncoderFactory;

        r2 := @parameter1: androidx.media3.common.Format;

        r3 := @parameter2: java.util.List;

        r4 := @parameter3: androidx.media3.transformer.TransformationRequest;

        r5 := @parameter4: androidx.media3.transformer.FallbackListener;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.transformer.Codec$EncoderFactory encoderFactory> = r1;

        r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.common.Format inputFormat> = r2;

        r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: java.util.List allowedOutputMimeTypes> = r3;

        r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.transformer.TransformationRequest transformationRequest> = r4;

        r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.transformer.FallbackListener fallbackListener> = r5;

        $r6 = r4.<androidx.media3.transformer.TransformationRequest: java.lang.String videoMimeType>;

        if $r6 == null goto label1;

        $r13 = r4.<androidx.media3.transformer.TransformationRequest: java.lang.String videoMimeType>;

        goto label2;

     label1:
        $r7 = r2.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        $r8 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r7);

        $r13 = (java.lang.String) $r8;

     label2:
        r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: java.lang.String requestedOutputMimeType> = $r13;

        $r10 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: java.lang.String requestedOutputMimeType>;

        $r9 = r2.<androidx.media3.common.Format: androidx.media3.common.ColorInfo colorInfo>;

        $r11 = staticinvoke <androidx.media3.transformer.EncoderUtil: com.google.common.collect.ImmutableList getSupportedEncoderNamesForHdrEditing(java.lang.String,androidx.media3.common.ColorInfo)>($r10, $r9);

        r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: com.google.common.collect.ImmutableList supportedEncoderNamesForHdrEditing> = $r11;

        return;
    }

    public androidx.media3.common.ColorInfo getSupportedInputColor()
    {
        androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper r0;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7;
        androidx.media3.transformer.TransformationRequest $r1, $r10;
        androidx.media3.common.Format $r2, $r4, $r8;
        androidx.media3.common.ColorInfo $r3, $r5, $r6, $r7, $r9;
        com.google.common.collect.ImmutableList $r11;

        r0 := @this: androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper;

        $r1 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.transformer.TransformationRequest transformationRequest>;

        $z2 = $r1.<androidx.media3.transformer.TransformationRequest: boolean enableHdrEditing>;

        if $z2 == 0 goto label1;

        $r10 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.transformer.TransformationRequest transformationRequest>;

        $z4 = $r10.<androidx.media3.transformer.TransformationRequest: boolean enableRequestSdrToneMapping>;

        if $z4 != 0 goto label1;

        $r11 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: com.google.common.collect.ImmutableList supportedEncoderNamesForHdrEditing>;

        $z5 = virtualinvoke $r11.<com.google.common.collect.ImmutableList: boolean isEmpty()>();

        if $z5 != 0 goto label1;

        $z6 = 1;

        goto label2;

     label1:
        $z6 = 0;

     label2:
        z0 = $z6;

        if z0 != 0 goto label3;

        $r8 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.common.Format inputFormat>;

        $r9 = $r8.<androidx.media3.common.Format: androidx.media3.common.ColorInfo colorInfo>;

        $z3 = staticinvoke <androidx.media3.common.ColorInfo: boolean isTransferHdr(androidx.media3.common.ColorInfo)>($r9);

        if $z3 == 0 goto label3;

        $z7 = 1;

        goto label4;

     label3:
        $z7 = 0;

     label4:
        z1 = $z7;

        if z1 == 0 goto label5;

        $r7 = <androidx.media3.common.ColorInfo: androidx.media3.common.ColorInfo SDR_BT709_LIMITED>;

        return $r7;

     label5:
        $r2 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.common.Format inputFormat>;

        $r3 = $r2.<androidx.media3.common.Format: androidx.media3.common.ColorInfo colorInfo>;

        if $r3 != null goto label6;

        staticinvoke <androidx.media3.common.util.Log: void d(java.lang.String,java.lang.String)>("EncoderWrapper", "colorInfo is null. Defaulting to SDR_BT709_LIMITED.");

        $r6 = <androidx.media3.common.ColorInfo: androidx.media3.common.ColorInfo SDR_BT709_LIMITED>;

        return $r6;

     label6:
        $r4 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.common.Format inputFormat>;

        $r5 = $r4.<androidx.media3.common.Format: androidx.media3.common.ColorInfo colorInfo>;

        return $r5;
    }

    public androidx.media3.common.SurfaceInfo getSurfaceInfo(int, int) throws androidx.media3.transformer.TransformationException
    {
        androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper r0;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        androidx.media3.common.Format r1, $r7, $r18, r33;
        androidx.media3.common.SurfaceInfo $r2, $r20, $r32, r43;
        androidx.media3.common.Format$Builder $r4, $r5, $r6, $r8, $r10, $r12, r40;
        float $f0;
        java.lang.String $r9, $r23, $r24, $r27;
        androidx.media3.common.ColorInfo $r11, $r17, $r19, $r22;
        java.util.List $r13;
        androidx.media3.transformer.Codec$EncoderFactory $r14;
        androidx.media3.transformer.Codec $r15, $r16, $r21, $r25, $r38;
        com.google.common.collect.ImmutableList $r26;
        androidx.media3.transformer.TransformationException $r29, $r31;
        int i0, i1, i2, $i3, $i4, $i5;
        androidx.media3.transformer.FallbackListener $r34;
        androidx.media3.transformer.TransformationRequest $r35, $r36;
        android.view.Surface $r39;
        java.lang.IllegalStateException r41, r42;
        java.lang.Throwable r44, r45;

        r0 := @this: androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z2 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: boolean releaseEncoder>;

        if $z2 == 0 goto label01;

        return null;

     label01:
        $r2 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.common.SurfaceInfo encoderSurfaceInfo>;

        if $r2 == null goto label02;

        $r32 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.common.SurfaceInfo encoderSurfaceInfo>;

        return $r32;

     label02:
        if i0 >= i1 goto label03;

        $z8 = 1;

        goto label04;

     label03:
        $z8 = 0;

     label04:
        z0 = $z8;

        if z0 == 0 goto label05;

        i2 = i0;

        i0 = i1;

        i1 = i2;

        r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: int outputRotationDegrees> = 90;

     label05:
        r40 = new androidx.media3.common.Format$Builder;

        specialinvoke r40.<androidx.media3.common.Format$Builder: void <init>()>();

        $r4 = virtualinvoke r40.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setWidth(int)>(i0);

        $r5 = virtualinvoke $r4.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setHeight(int)>(i1);

        $r6 = virtualinvoke $r5.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setRotationDegrees(int)>(0);

        $r7 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.common.Format inputFormat>;

        $f0 = $r7.<androidx.media3.common.Format: float frameRate>;

        $r8 = virtualinvoke $r6.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setFrameRate(float)>($f0);

        $r9 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: java.lang.String requestedOutputMimeType>;

        $r10 = virtualinvoke $r8.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setSampleMimeType(java.lang.String)>($r9);

        $r11 = virtualinvoke r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.common.ColorInfo getSupportedInputColor()>();

        $r12 = virtualinvoke $r10.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setColorInfo(androidx.media3.common.ColorInfo)>($r11);

        r33 = virtualinvoke $r12.<androidx.media3.common.Format$Builder: androidx.media3.common.Format build()>();

        $r14 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.transformer.Codec$EncoderFactory encoderFactory>;

        $r13 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: java.util.List allowedOutputMimeTypes>;

        $r15 = interfaceinvoke $r14.<androidx.media3.transformer.Codec$EncoderFactory: androidx.media3.transformer.Codec createForVideoEncoding(androidx.media3.common.Format,java.util.List)>(r33, $r13);

        r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.transformer.Codec encoder> = $r15;

        $r16 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.transformer.Codec encoder>;

        r1 = interfaceinvoke $r16.<androidx.media3.transformer.Codec: androidx.media3.common.Format getConfigurationFormat()>();

        $r17 = r33.<androidx.media3.common.Format: androidx.media3.common.ColorInfo colorInfo>;

        $z3 = staticinvoke <androidx.media3.common.ColorInfo: boolean isTransferHdr(androidx.media3.common.ColorInfo)>($r17);

        if $z3 == 0 goto label07;

        $r24 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: java.lang.String requestedOutputMimeType>;

        $r23 = r1.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        $z6 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>($r23);

        if $z6 != 0 goto label06;

        r41 = new java.lang.IllegalStateException;

        specialinvoke r41.<java.lang.IllegalStateException: void <init>(java.lang.String)>("MIME type fallback unsupported with HDR editing");

        $r31 = specialinvoke r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.transformer.TransformationException createEncodingException(java.lang.Exception,androidx.media3.common.Format)>(r41, r1);

        r44 = (java.lang.Throwable) $r31;

        throw r44;

     label06:
        $r26 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: com.google.common.collect.ImmutableList supportedEncoderNamesForHdrEditing>;

        $r25 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.transformer.Codec encoder>;

        $r27 = interfaceinvoke $r25.<androidx.media3.transformer.Codec: java.lang.String getName()>();

        $z7 = virtualinvoke $r26.<com.google.common.collect.ImmutableList: boolean contains(java.lang.Object)>($r27);

        if $z7 != 0 goto label07;

        r42 = new java.lang.IllegalStateException;

        specialinvoke r42.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Selected encoder doesn\'t support HDR editing");

        $r29 = specialinvoke r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.transformer.TransformationException createEncodingException(java.lang.Exception,androidx.media3.common.Format)>(r42, r1);

        r45 = (java.lang.Throwable) $r29;

        throw r45;

     label07:
        $r18 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.common.Format inputFormat>;

        $r19 = $r18.<androidx.media3.common.Format: androidx.media3.common.ColorInfo colorInfo>;

        $z4 = staticinvoke <androidx.media3.common.ColorInfo: boolean isTransferHdr(androidx.media3.common.ColorInfo)>($r19);

        if $z4 == 0 goto label08;

        $r22 = r33.<androidx.media3.common.Format: androidx.media3.common.ColorInfo colorInfo>;

        $z5 = staticinvoke <androidx.media3.common.ColorInfo: boolean isTransferHdr(androidx.media3.common.ColorInfo)>($r22);

        if $z5 != 0 goto label08;

        $z9 = 1;

        goto label09;

     label08:
        $z9 = 0;

     label09:
        z1 = $z9;

        $r34 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.transformer.FallbackListener fallbackListener>;

        $r35 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.transformer.TransformationRequest transformationRequest>;

        $r36 = staticinvoke <androidx.media3.transformer.VideoTranscodingSamplePipeline: androidx.media3.transformer.TransformationRequest access$200(androidx.media3.transformer.TransformationRequest,boolean,androidx.media3.common.Format,androidx.media3.common.Format,boolean)>($r35, z0, r33, r1, z1);

        virtualinvoke $r34.<androidx.media3.transformer.FallbackListener: void onTransformationRequestFinalized(androidx.media3.transformer.TransformationRequest)>($r36);

        r43 = new androidx.media3.common.SurfaceInfo;

        $r38 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.transformer.Codec encoder>;

        $r39 = interfaceinvoke $r38.<androidx.media3.transformer.Codec: android.view.Surface getInputSurface()>();

        $i3 = r1.<androidx.media3.common.Format: int width>;

        $i4 = r1.<androidx.media3.common.Format: int height>;

        $i5 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: int outputRotationDegrees>;

        specialinvoke r43.<androidx.media3.common.SurfaceInfo: void <init>(android.view.Surface,int,int,int)>($r39, $i3, $i4, $i5);

        r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.common.SurfaceInfo encoderSurfaceInfo> = r43;

        $z10 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: boolean releaseEncoder>;

        if $z10 == 0 goto label10;

        $r21 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.transformer.Codec encoder>;

        interfaceinvoke $r21.<androidx.media3.transformer.Codec: void release()>();

     label10:
        $r20 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.common.SurfaceInfo encoderSurfaceInfo>;

        return $r20;
    }

    public void signalEndOfInputStream() throws androidx.media3.transformer.TransformationException
    {
        androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper r0;
        androidx.media3.transformer.Codec $r1, $r2;

        r0 := @this: androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper;

        $r1 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.transformer.Codec encoder>;

        if $r1 == null goto label1;

        $r2 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.transformer.Codec encoder>;

        interfaceinvoke $r2.<androidx.media3.transformer.Codec: void signalEndOfInputStream()>();

     label1:
        return;
    }

    public androidx.media3.common.Format getOutputFormat() throws androidx.media3.transformer.TransformationException
    {
        androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper r0;
        androidx.media3.transformer.Codec $r1, $r2;
        int $i0, $i1;
        androidx.media3.common.Format$Builder $r3, $r4;
        androidx.media3.common.Format r5;

        r0 := @this: androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper;

        $r1 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.transformer.Codec encoder>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.transformer.Codec encoder>;

        r5 = interfaceinvoke $r2.<androidx.media3.transformer.Codec: androidx.media3.common.Format getOutputFormat()>();

        if r5 == null goto label2;

        $i0 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: int outputRotationDegrees>;

        if $i0 == 0 goto label2;

        $r3 = virtualinvoke r5.<androidx.media3.common.Format: androidx.media3.common.Format$Builder buildUpon()>();

        $i1 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: int outputRotationDegrees>;

        $r4 = virtualinvoke $r3.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setRotationDegrees(int)>($i1);

        r5 = virtualinvoke $r4.<androidx.media3.common.Format$Builder: androidx.media3.common.Format build()>();

     label2:
        return r5;
    }

    public java.nio.ByteBuffer getOutputBuffer() throws androidx.media3.transformer.TransformationException
    {
        androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper r0;
        androidx.media3.transformer.Codec $r1, $r2;
        java.nio.ByteBuffer $r3;

        r0 := @this: androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper;

        $r1 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.transformer.Codec encoder>;

        if $r1 == null goto label1;

        $r2 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.transformer.Codec encoder>;

        $r3 = interfaceinvoke $r2.<androidx.media3.transformer.Codec: java.nio.ByteBuffer getOutputBuffer()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public android.media.MediaCodec$BufferInfo getOutputBufferInfo() throws androidx.media3.transformer.TransformationException
    {
        androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper r0;
        androidx.media3.transformer.Codec $r1, $r2;
        android.media.MediaCodec$BufferInfo $r3;

        r0 := @this: androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper;

        $r1 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.transformer.Codec encoder>;

        if $r1 == null goto label1;

        $r2 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.transformer.Codec encoder>;

        $r3 = interfaceinvoke $r2.<androidx.media3.transformer.Codec: android.media.MediaCodec$BufferInfo getOutputBufferInfo()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public void releaseOutputBuffer(boolean) throws androidx.media3.transformer.TransformationException
    {
        androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper r0;
        boolean z0;
        androidx.media3.transformer.Codec $r1, $r2;

        r0 := @this: androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper;

        z0 := @parameter0: boolean;

        $r1 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.transformer.Codec encoder>;

        if $r1 == null goto label1;

        $r2 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.transformer.Codec encoder>;

        interfaceinvoke $r2.<androidx.media3.transformer.Codec: void releaseOutputBuffer(boolean)>(z0);

     label1:
        return;
    }

    public boolean isEnded()
    {
        androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper r0;
        androidx.media3.transformer.Codec $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper;

        $r1 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.transformer.Codec encoder>;

        if $r1 == null goto label1;

        $r2 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.transformer.Codec encoder>;

        $z0 = interfaceinvoke $r2.<androidx.media3.transformer.Codec: boolean isEnded()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public void release()
    {
        androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper r0;
        androidx.media3.transformer.Codec $r1, $r2;

        r0 := @this: androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper;

        $r1 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.transformer.Codec encoder>;

        if $r1 == null goto label1;

        $r2 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.transformer.Codec encoder>;

        interfaceinvoke $r2.<androidx.media3.transformer.Codec: void release()>();

     label1:
        r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: boolean releaseEncoder> = 1;

        return;
    }

    private androidx.media3.transformer.TransformationException createEncodingException(java.lang.Exception, androidx.media3.common.Format)
    {
        androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper r0;
        java.lang.Exception r1;
        androidx.media3.common.Format r2;
        androidx.media3.transformer.Codec $r3, $r5;
        java.lang.Object $r4;
        java.lang.String $r6;
        androidx.media3.transformer.TransformationException $r7;
        java.lang.Throwable r8;

        r0 := @this: androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper;

        r1 := @parameter0: java.lang.Exception;

        r2 := @parameter1: androidx.media3.common.Format;

        $r3 = r0.<androidx.media3.transformer.VideoTranscodingSamplePipeline$EncoderWrapper: androidx.media3.transformer.Codec encoder>;

        $r4 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r3);

        $r5 = (androidx.media3.transformer.Codec) $r4;

        $r6 = interfaceinvoke $r5.<androidx.media3.transformer.Codec: java.lang.String getName()>();

        r8 = (java.lang.Throwable) r1;

        $r7 = staticinvoke <androidx.media3.transformer.TransformationException: androidx.media3.transformer.TransformationException createForCodec(java.lang.Throwable,boolean,boolean,androidx.media3.common.Format,java.lang.String,int)>(r8, 1, 0, r2, $r6, 4002);

        return $r7;
    }

