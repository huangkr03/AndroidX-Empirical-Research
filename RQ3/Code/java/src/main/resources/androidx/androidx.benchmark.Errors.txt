androidx.benchmark.Errors
<androidx.benchmark.Errors: androidx.benchmark.Errors INSTANCE>
<androidx.benchmark.Errors: java.lang.String TAG>
<androidx.benchmark.Errors: java.lang.String PREFIX>
<androidx.benchmark.Errors: java.lang.String UNSUPPRESSED_WARNING_MESSAGE>
<androidx.benchmark.Errors: java.lang.String warningString>
<androidx.benchmark.Errors: int MINIMUM_BATTERY_PERCENT>
<androidx.benchmark.Errors: boolean isEmulator>
<androidx.benchmark.Errors: boolean isDeviceRooted>
    private void <init>()
    {
        androidx.benchmark.Errors r0;

        r0 := @this: androidx.benchmark.Errors;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final java.lang.String trimMarginWrapNewlines$benchmark_common_release(java.lang.String)
    {
        androidx.benchmark.Errors r0;
        java.lang.String $r1, $r4, $r7;
        java.lang.StringBuilder $r2, $r3, $r5, $r6;

        r0 := @this: androidx.benchmark.Errors;

        $r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r4 = staticinvoke <kotlin.text.StringsKt: java.lang.String trimMargin$default(java.lang.String,java.lang.String,int,java.lang.Object)>($r1, null, 1, null);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" \n");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public final java.lang.String toDisplayString$benchmark_common_release(java.util.Set)
    {
        androidx.benchmark.Errors r0;
        java.util.Set $r1;
        java.lang.Iterable $r2, $r4, $r7;
        java.util.List $r3, $r5;
        java.lang.CharSequence $r6;
        java.lang.String $r8;

        r0 := @this: androidx.benchmark.Errors;

        $r1 := @parameter0: java.util.Set;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $r2 = (java.lang.Iterable) $r1;

        $r3 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List toList(java.lang.Iterable)>($r2);

        $r4 = (java.lang.Iterable) $r3;

        $r5 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List sorted(java.lang.Iterable)>($r4);

        $r7 = (java.lang.Iterable) $r5;

        $r6 = (java.lang.CharSequence) " ";

        $r8 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.String joinToString$default(java.lang.Iterable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r7, $r6, null, null, 0, null, null, 62, null);

        return $r8;
    }

    public final java.lang.String getPREFIX()
    {
        androidx.benchmark.Errors r0;
        java.lang.String $r1;

        r0 := @this: androidx.benchmark.Errors;

        $r1 = <androidx.benchmark.Errors: java.lang.String PREFIX>;

        return $r1;
    }

    public final java.lang.String acquireWarningStringForLogging()
    {
        androidx.benchmark.Errors r0;
        java.lang.String r1;

        r0 := @this: androidx.benchmark.Errors;

        r1 = <androidx.benchmark.Errors: java.lang.String warningString>;

        <androidx.benchmark.Errors: java.lang.String warningString> = null;

        return r1;
    }

    public final boolean isEmulator()
    {
        androidx.benchmark.Errors r0;
        boolean $z0;

        r0 := @this: androidx.benchmark.Errors;

        $z0 = <androidx.benchmark.Errors: boolean isEmulator>;

        return $z0;
    }

    public final void throwIfError()
    {
        androidx.benchmark.Errors r0;
        androidx.benchmark.Arguments $r1, $r2, $r5;
        boolean $z0;
        java.lang.String $r3, $r6, $r7, $r9;
        java.lang.AssertionError $r4, $r8;

        r0 := @this: androidx.benchmark.Errors;

        $r1 = <androidx.benchmark.Arguments: androidx.benchmark.Arguments INSTANCE>;

        $z0 = virtualinvoke $r1.<androidx.benchmark.Arguments: boolean getDryRunMode$benchmark_common_release()>();

        if $z0 != 0 goto label1;

        $r7 = <androidx.benchmark.Errors: java.lang.String UNSUPPRESSED_WARNING_MESSAGE>;

        if $r7 == null goto label1;

        $r8 = new java.lang.AssertionError;

        $r9 = <androidx.benchmark.Errors: java.lang.String UNSUPPRESSED_WARNING_MESSAGE>;

        specialinvoke $r8.<java.lang.AssertionError: void <init>(java.lang.Object)>($r9);

        throw $r8;

     label1:
        $r2 = <androidx.benchmark.Arguments: androidx.benchmark.Arguments INSTANCE>;

        $r3 = virtualinvoke $r2.<androidx.benchmark.Arguments: java.lang.String getError$benchmark_common_release()>();

        if $r3 == null goto label2;

        $r4 = new java.lang.AssertionError;

        $r5 = <androidx.benchmark.Arguments: androidx.benchmark.Arguments INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.benchmark.Arguments: java.lang.String getError$benchmark_common_release()>();

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>($r6);

        throw $r4;

     label2:
        return;
    }

    static void <clinit>()
    {
        java.util.Collection r0, $r33, $r141, $r146;
        androidx.benchmark.Errors $r1, $r5, $r13, $r20, $r36, $r41, $r50, $r58, $r66, $r69, $r76, $r82, $r86, $r89, $r91, $r93, $r95, $r97;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30;
        android.app.Instrumentation $r2;
        androidx.benchmark.Arguments $r3, $r9, $r27, $r40, $r131;
        androidx.benchmark.Profiler $r4, $r10, $r132;
        java.lang.CharSequence $r6, $r7, $r19, $r22, $r49, $r51, $r100, $r101, $r102, $r103, $r104, $r105, $r106, $r107;
        java.lang.String $r8, $r17, $r18, $r21, $r37, $r43, $r48, $r64, $r65, $r67, $r73, $r74, $r80, $r81, $r83, $r87, $r90, $r92, $r94, $r96, $r98, $r108, $r109, $r110, $r111, $r112, $r113, $r114, $r115, $r116, r119, r120, r123, r124, r125, $r138, r144, $r149, $r155;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, $i14, i15, i16, i17;
        java.lang.Class $r11;
        java.lang.StringBuilder $r12, $r14, $r15, $r16, $r34, $r35, $r38, $r39, $r44, $r45, $r46, $r47, $r57, $r59, $r60, $r61, $r62, $r63, $r68, $r70, $r71, $r72, $r75, $r77, $r78, $r79;
        java.util.List $r23, $r25, $r52, $r54;
        java.util.ArrayList $r24, $r53;
        java.lang.Iterable $r26, $r29, $r31, $r32, $r55, $r140;
        java.util.Set $r28, $r30, $r42, $r150, $r151, $r152, $r153, $r154;
        java.lang.Integer $r56;
        androidx.benchmark.IsolationActivity$Companion $r84, $r85, $r128;
        androidx.benchmark.CpuInfo $r88, $r127;
        java.io.File $r99;
        java.lang.String[] $r117, r118, $r139;
        android.content.Context $r121;
        android.content.pm.ApplicationInfo $r122;
        android.os.Bundle r126;
        java.util.concurrent.atomic.AtomicReference $r129;
        java.lang.Object $r130, r143, r148;
        androidx.benchmark.StackSamplingSimpleperf $r133;
        android.content.IntentFilter $r134, r135;
        android.content.Intent $r136;
        java.util.Iterator r142, r147;
        char[] $r145;

        $r1 = new androidx.benchmark.Errors;

        specialinvoke $r1.<androidx.benchmark.Errors: void <init>()>();

        <androidx.benchmark.Errors: androidx.benchmark.Errors INSTANCE> = $r1;

        $r109 = <android.os.Build: java.lang.String FINGERPRINT>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r109, "FINGERPRINT");

        $z0 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r109, "generic", 0, 2, null);

        if $z0 != 0 goto label02;

        $r110 = <android.os.Build: java.lang.String FINGERPRINT>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r110, "FINGERPRINT");

        $z13 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r110, "unknown", 0, 2, null);

        if $z13 != 0 goto label02;

        $r111 = <android.os.Build: java.lang.String MODEL>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r111, "MODEL");

        $r101 = (java.lang.CharSequence) $r111;

        $r100 = (java.lang.CharSequence) "google_sdk";

        $z14 = staticinvoke <kotlin.text.StringsKt: boolean contains$default(java.lang.CharSequence,java.lang.CharSequence,boolean,int,java.lang.Object)>($r101, $r100, 0, 2, null);

        if $z14 != 0 goto label02;

        $r112 = <android.os.Build: java.lang.String MODEL>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r112, "MODEL");

        $r103 = (java.lang.CharSequence) $r112;

        $r102 = (java.lang.CharSequence) "Emulator";

        $z15 = staticinvoke <kotlin.text.StringsKt: boolean contains$default(java.lang.CharSequence,java.lang.CharSequence,boolean,int,java.lang.Object)>($r103, $r102, 0, 2, null);

        if $z15 != 0 goto label02;

        $r113 = <android.os.Build: java.lang.String MODEL>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r113, "MODEL");

        $r105 = (java.lang.CharSequence) $r113;

        $r104 = (java.lang.CharSequence) "Android SDK built for x86";

        $z16 = staticinvoke <kotlin.text.StringsKt: boolean contains$default(java.lang.CharSequence,java.lang.CharSequence,boolean,int,java.lang.Object)>($r105, $r104, 0, 2, null);

        if $z16 != 0 goto label02;

        $r114 = <android.os.Build: java.lang.String MANUFACTURER>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r114, "MANUFACTURER");

        $r107 = (java.lang.CharSequence) $r114;

        $r106 = (java.lang.CharSequence) "Genymotion";

        $z17 = staticinvoke <kotlin.text.StringsKt: boolean contains$default(java.lang.CharSequence,java.lang.CharSequence,boolean,int,java.lang.Object)>($r107, $r106, 0, 2, null);

        if $z17 != 0 goto label02;

        $r115 = <android.os.Build: java.lang.String BRAND>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r115, "BRAND");

        $z18 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r115, "generic", 0, 2, null);

        if $z18 == 0 goto label01;

        $r116 = <android.os.Build: java.lang.String DEVICE>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r116, "DEVICE");

        $z20 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r116, "generic", 0, 2, null);

        if $z20 != 0 goto label02;

     label01:
        $r108 = <android.os.Build: java.lang.String PRODUCT>;

        $z19 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>("google_sdk", $r108);

        if $z19 == 0 goto label03;

     label02:
        $z21 = 1;

        goto label04;

     label03:
        $z21 = 0;

     label04:
        <androidx.benchmark.Errors: boolean isEmulator> = $z21;

        $r117 = newarray (java.lang.String)[10];

        $r117[0] = "/system/app/Superuser.apk";

        $r117[1] = "/sbin/su";

        $r117[2] = "/system/bin/su";

        $r117[3] = "/system/xbin/su";

        $r117[4] = "/data/local/xbin/su";

        $r117[5] = "/data/local/bin/su";

        $r117[6] = "/system/sd/xbin/su";

        $r117[7] = "/system/bin/failsafe/su";

        $r117[8] = "/data/local/su";

        $r117[9] = "/su/bin/su";

        r118 = $r117;

        i12 = 0;

        i13 = lengthof r118;

     label05:
        if i12 >= i13 goto label06;

        r119 = r118[i12];

        i12 = i12 + 1;

        r120 = r119;

        $r99 = new java.io.File;

        specialinvoke $r99.<java.io.File: void <init>(java.lang.String)>(r120);

        $z12 = virtualinvoke $r99.<java.io.File: boolean exists()>();

        if $z12 == 0 goto label05;

        $z22 = 1;

        goto label07;

     label06:
        $z22 = 0;

     label07:
        <androidx.benchmark.Errors: boolean isDeviceRooted> = $z22;

        $r2 = staticinvoke <androidx.test.platform.app.InstrumentationRegistry: android.app.Instrumentation getInstrumentation()>();

        $r121 = virtualinvoke $r2.<android.app.Instrumentation: android.content.Context getTargetContext()>();

        $r122 = virtualinvoke $r121.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        r123 = "";

        r124 = "";

        $r3 = <androidx.benchmark.Arguments: androidx.benchmark.Arguments INSTANCE>;

        $r4 = virtualinvoke $r3.<androidx.benchmark.Arguments: androidx.benchmark.Profiler getProfiler$benchmark_common_release()>();

        if $r4 != null goto label08;

        $z23 = 0;

        goto label10;

     label08:
        $z1 = virtualinvoke $r4.<androidx.benchmark.Profiler: boolean getRequiresDebuggable()>();

        if $z1 != 1 goto label09;

        $z23 = 1;

        goto label10;

     label09:
        $z23 = 0;

     label10:
        if $z23 != 0 goto label11;

        $i10 = $r122.<android.content.pm.ApplicationInfo: int flags>;

        $i11 = $i10 & 2;

        if $i11 == 0 goto label11;

        r123 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("", "DEBUGGABLE_");

        $r97 = <androidx.benchmark.Errors: androidx.benchmark.Errors INSTANCE>;

        $r98 = virtualinvoke $r97.<androidx.benchmark.Errors: java.lang.String trimMarginWrapNewlines$benchmark_common_release(java.lang.String)>("\n                |WARNING: Debuggable Benchmark\n                |    Benchmark is running with debuggable=true, which drastically reduces\n                |    runtime performance in order to support debugging features. Run\n                |    benchmarks with debuggable=false. Debuggable affects execution speed\n                |    in ways that mean benchmark improvements might not carry over to a\n                |    real user\'s experience (or even regress release performance).\n            ");

        r124 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("", $r98);

     label11:
        $r5 = <androidx.benchmark.Errors: androidx.benchmark.Errors INSTANCE>;

        $z24 = <androidx.benchmark.Errors: boolean isEmulator>;

        if $z24 == 0 goto label12;

        r123 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>(r123, "EMULATOR_");

        $r95 = <androidx.benchmark.Errors: androidx.benchmark.Errors INSTANCE>;

        $r96 = virtualinvoke $r95.<androidx.benchmark.Errors: java.lang.String trimMarginWrapNewlines$benchmark_common_release(java.lang.String)>("\n                |WARNING: Running on Emulator\n                |    Benchmark is running on an emulator, which is not representative of\n                |    real user devices. Use a physical device to benchmark. Emulator\n                |    benchmark improvements might not carry over to a real user\'s\n                |    experience (or even regress real device performance).\n            ");

        r124 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>(r124, $r96);

     label12:
        r125 = <android.os.Build: java.lang.String FINGERPRINT>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r125, "FINGERPRINT");

        $r7 = (java.lang.CharSequence) r125;

        $r6 = (java.lang.CharSequence) ":eng/";

        $z2 = staticinvoke <kotlin.text.StringsKt: boolean contains$default(java.lang.CharSequence,java.lang.CharSequence,boolean,int,java.lang.Object)>($r7, $r6, 0, 2, null);

        if $z2 == 0 goto label13;

        r123 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>(r123, "ENG-BUILD_");

        $r93 = <androidx.benchmark.Errors: androidx.benchmark.Errors INSTANCE>;

        $r94 = virtualinvoke $r93.<androidx.benchmark.Errors: java.lang.String trimMarginWrapNewlines$benchmark_common_release(java.lang.String)>("\n                |WARNING: Running on Eng Build\n                |    Benchmark is running on device flashed with a \'-eng\' build. Eng builds\n                |    of the platform drastically reduce performance to enable testing\n                |    changes quickly. For this reason they should not be used for\n                |    benchmarking. Use a \'-user\' or \'-userdebug\' system image.\n            ");

        r124 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>(r124, $r94);

     label13:
        r126 = staticinvoke <androidx.test.platform.app.InstrumentationRegistry: android.os.Bundle getArguments()>();

        $r8 = virtualinvoke r126.<android.os.Bundle: java.lang.String getString(java.lang.String)>("coverage");

        $z3 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r8, "true");

        if $z3 == 0 goto label14;

        r123 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>(r123, "CODE-COVERAGE_");

        $r91 = <androidx.benchmark.Errors: androidx.benchmark.Errors INSTANCE>;

        $r92 = virtualinvoke $r91.<androidx.benchmark.Errors: java.lang.String trimMarginWrapNewlines$benchmark_common_release(java.lang.String)>("\n                |WARNING: Code coverage enabled\n                |    Benchmark is running with code coverage enabled, which typically alters the dex\n                |    in a way that can affect performance. Ensure that code coverage is disabled by\n                |    setting testCoverageEnabled to false in the buildType your benchmarks run in.\n            ");

        r124 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>(r124, $r92);

     label14:
        $z4 = <androidx.benchmark.Errors: boolean isDeviceRooted>;

        if $z4 == 0 goto label15;

        $r88 = <androidx.benchmark.CpuInfo: androidx.benchmark.CpuInfo INSTANCE>;

        $z11 = virtualinvoke $r88.<androidx.benchmark.CpuInfo: boolean getLocked()>();

        if $z11 != 0 goto label15;

        r123 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>(r123, "UNLOCKED_");

        $r89 = <androidx.benchmark.Errors: androidx.benchmark.Errors INSTANCE>;

        $r90 = virtualinvoke $r89.<androidx.benchmark.Errors: java.lang.String trimMarginWrapNewlines$benchmark_common_release(java.lang.String)>("\n                |WARNING: Unlocked CPU clocks\n                |    Benchmark appears to be running on a rooted device with unlocked CPU\n                |    clocks. Unlocked CPU clocks can lead to inconsistent results due to\n                |    dynamic frequency scaling, and thermal throttling. On a rooted device,\n                |    lock your device clocks to a stable frequency with `./gradlew lockClocks`\n            ");

        r124 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>(r124, $r90);

     label15:
        $r127 = <androidx.benchmark.CpuInfo: androidx.benchmark.CpuInfo INSTANCE>;

        $z25 = virtualinvoke $r127.<androidx.benchmark.CpuInfo: boolean getLocked()>();

        if $z25 != 0 goto label16;

        $r84 = <androidx.benchmark.IsolationActivity: androidx.benchmark.IsolationActivity$Companion Companion>;

        $z9 = virtualinvoke $r84.<androidx.benchmark.IsolationActivity$Companion: boolean isSustainedPerformanceModeSupported$benchmark_common_release()>();

        if $z9 == 0 goto label16;

        $r85 = <androidx.benchmark.IsolationActivity: androidx.benchmark.IsolationActivity$Companion Companion>;

        $z10 = virtualinvoke $r85.<androidx.benchmark.IsolationActivity$Companion: boolean getSustainedPerformanceModeInUse$benchmark_common_release()>();

        if $z10 != 0 goto label16;

        r123 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>(r123, "UNSUSTAINED-ACTIVITY-MISSING_");

        $r86 = <androidx.benchmark.Errors: androidx.benchmark.Errors INSTANCE>;

        $r87 = virtualinvoke $r86.<androidx.benchmark.Errors: java.lang.String trimMarginWrapNewlines$benchmark_common_release(java.lang.String)>("\n                |WARNING: Cannot use SustainedPerformanceMode without IsolationActivity\n                |    Benchmark running on device that supports Window.setSustainedPerformanceMode,\n                |    but not launching IsolationActivity via the AndroidBenchmarkRunner. This\n                |    Activity is required to limit CPU clock max frequency, to prevent thermal\n                |    throttling. To fix this, add the following to your benchmark module-level\n                |    build.gradle:\n                |        android.defaultConfig.testInstrumentationRunner\n                |            = \"androidx.benchmark.junit4.AndroidBenchmarkRunner\"\n            ");

        r124 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>(r124, $r87);

        goto label17;

     label16:
        $r128 = <androidx.benchmark.IsolationActivity: androidx.benchmark.IsolationActivity$Companion Companion>;

        $r129 = virtualinvoke $r128.<androidx.benchmark.IsolationActivity$Companion: java.util.concurrent.atomic.AtomicReference getSingleton$benchmark_common_release()>();

        $r130 = virtualinvoke $r129.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        if $r130 != null goto label17;

        r123 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>(r123, "ACTIVITY-MISSING_");

        $r82 = <androidx.benchmark.Errors: androidx.benchmark.Errors INSTANCE>;

        $r83 = virtualinvoke $r82.<androidx.benchmark.Errors: java.lang.String trimMarginWrapNewlines$benchmark_common_release(java.lang.String)>("\n                |WARNING: Not using IsolationActivity via AndroidBenchmarkRunner\n                |    AndroidBenchmarkRunner should be used to isolate benchmarks from interference\n                |    from other visible apps. To fix this, add the following to your module-level\n                |    build.gradle:\n                |        android.defaultConfig.testInstrumentationRunner\n                |            = \"androidx.benchmark.junit4.AndroidBenchmarkRunner\"\n            ");

        r124 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>(r124, $r83);

     label17:
        $r131 = <androidx.benchmark.Arguments: androidx.benchmark.Arguments INSTANCE>;

        $r132 = virtualinvoke $r131.<androidx.benchmark.Arguments: androidx.benchmark.Profiler getProfiler$benchmark_common_release()>();

        $r133 = <androidx.benchmark.StackSamplingSimpleperf: androidx.benchmark.StackSamplingSimpleperf INSTANCE>;

        $z26 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r132, $r133);

        if $z26 == 0 goto label20;

        $i5 = <android.os.Build$VERSION: int SDK_INT>;

        if $i5 >= 28 goto label18;

        r123 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>(r123, "SIMPLEPERF_");

        $r76 = <androidx.benchmark.Errors: androidx.benchmark.Errors INSTANCE>;

        $r75 = new java.lang.StringBuilder;

        specialinvoke $r75.<java.lang.StringBuilder: void <init>()>();

        $r77 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n                    |ERROR: Cannot use Simpleperf on this device\'s API level (");

        $i9 = <android.os.Build$VERSION: int SDK_INT>;

        $r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")\n                    |    Simpleperf prior to API 28 (P) requires AOT compilation, and isn\'t \n                    |    currently supported by the benchmark library.\n                ");

        $r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.String toString()>();

        $r81 = virtualinvoke $r76.<androidx.benchmark.Errors: java.lang.String trimMarginWrapNewlines$benchmark_common_release(java.lang.String)>($r80);

        r124 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>(r124, $r81);

        goto label20;

     label18:
        $i6 = <android.os.Build$VERSION: int SDK_INT>;

        if $i6 != 28 goto label19;

        $z8 = <androidx.benchmark.Errors: boolean isDeviceRooted>;

        if $z8 != 0 goto label19;

        r123 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>(r123, "SIMPLEPERF_");

        $r69 = <androidx.benchmark.Errors: androidx.benchmark.Errors INSTANCE>;

        $r68 = new java.lang.StringBuilder;

        specialinvoke $r68.<java.lang.StringBuilder: void <init>()>();

        $r70 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n                    |ERROR: Cannot use Simpleperf on this device\'s API level (");

        $i8 = <android.os.Build$VERSION: int SDK_INT>;

        $r71 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")\n                    |    without root. Simpleperf on API 28 (P) can only be used on a rooted device,\n                    |    or when the APK is debuggable. Debuggable performance measurements should\n                    |    be avoided, due to measurement inaccuracy.\n                ");

        $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.String toString()>();

        $r74 = virtualinvoke $r69.<androidx.benchmark.Errors: java.lang.String trimMarginWrapNewlines$benchmark_common_release(java.lang.String)>($r73);

        r124 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>(r124, $r74);

        goto label20;

     label19:
        $i7 = <android.os.Build$VERSION: int SDK_INT>;

        if $i7 < 29 goto label20;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r121, "context");

        $z7 = staticinvoke <androidx.benchmark.Api29Kt: boolean isProfileableByShell(android.content.Context)>($r121);

        if $z7 != 0 goto label20;

        r123 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>(r123, "SIMPLEPERF_");

        $r66 = <androidx.benchmark.Errors: androidx.benchmark.Errors INSTANCE>;

        $r67 = virtualinvoke $r66.<androidx.benchmark.Errors: java.lang.String trimMarginWrapNewlines$benchmark_common_release(java.lang.String)>("\n                    |ERROR: Apk must be profileable to use simpleperf.\n                    |    ensure you put <profileable android:shell=\"true\"/> within the\n                    |    <application ...> tag of your benchmark module\n                ");

        r124 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>(r124, $r67);

     label20:
        $r134 = new android.content.IntentFilter;

        specialinvoke $r134.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.BATTERY_CHANGED");

        r135 = $r134;

        $r136 = virtualinvoke $r121.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>(null, r135);

        if $r136 != null goto label21;

        $i14 = 100;

        goto label22;

     label21:
        i15 = virtualinvoke $r136.<android.content.Intent: int getIntExtra(java.lang.String,int)>("level", 100);

        i16 = virtualinvoke $r136.<android.content.Intent: int getIntExtra(java.lang.String,int)>("scale", 100);

        $i0 = i15 * 100;

        $i14 = $i0 / i16;

     label22:
        i17 = $i14;

        if i17 >= 25 goto label23;

        r123 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>(r123, "LOW-BATTERY_");

        $r58 = <androidx.benchmark.Errors: androidx.benchmark.Errors INSTANCE>;

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>()>();

        $r59 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n                |WARNING: Device has low battery (");

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i17);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%)\n                |    When battery is low, devices will often reduce performance (e.g. disabling big\n                |    cores) to save remaining battery. This occurs even when they are plugged in.\n                |    Wait for your battery to charge to at least 25%.\n                |    Currently at ");

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i17);

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%.\n            ");

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>();

        $r65 = virtualinvoke $r58.<androidx.benchmark.Errors: java.lang.String trimMarginWrapNewlines$benchmark_common_release(java.lang.String)>($r64);

        r124 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>(r124, $r65);

     label23:
        $r9 = <androidx.benchmark.Arguments: androidx.benchmark.Arguments INSTANCE>;

        $r10 = virtualinvoke $r9.<androidx.benchmark.Arguments: androidx.benchmark.Profiler getProfiler$benchmark_common_release()>();

        if $r10 != null goto label24;

        goto label25;

     label24:
        $r11 = virtualinvoke $r10.<java.lang.Object: java.lang.Class getClass()>();

        $r138 = virtualinvoke $r11.<java.lang.Class: java.lang.String getSimpleName()>();

        r123 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>(r123, "PROFILED_");

        $r13 = <androidx.benchmark.Errors: androidx.benchmark.Errors INSTANCE>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n                |WARNING: Using profiler=");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r138);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", results will be affected.\n            ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = virtualinvoke $r13.<androidx.benchmark.Errors: java.lang.String trimMarginWrapNewlines$benchmark_common_release(java.lang.String)>($r17);

        r124 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>(r124, $r18);

     label25:
        <androidx.benchmark.Errors: java.lang.String PREFIX> = r123;

        $r19 = (java.lang.CharSequence) r124;

        $i1 = interfaceinvoke $r19.<java.lang.CharSequence: int length()>();

        if $i1 <= 0 goto label26;

        $z27 = 1;

        goto label27;

     label26:
        $z27 = 0;

     label27:
        if $z27 == 0 goto label30;

        $r50 = <androidx.benchmark.Errors: androidx.benchmark.Errors INSTANCE>;

        <androidx.benchmark.Errors: java.lang.String warningString> = r124;

        $r51 = (java.lang.CharSequence) r124;

        $r139 = newarray (java.lang.String)[1];

        $r139[0] = "\n";

        $r52 = staticinvoke <kotlin.text.StringsKt: java.util.List split$default(java.lang.CharSequence,java.lang.String[],boolean,int,int,java.lang.Object)>($r51, $r139, 0, 0, 6, null);

        $r140 = (java.lang.Iterable) $r52;

        $r53 = new java.util.ArrayList;

        $i3 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r140, 10);

        specialinvoke $r53.<java.util.ArrayList: void <init>(int)>($i3);

        $r141 = (java.util.Collection) $r53;

        r142 = interfaceinvoke $r140.<java.lang.Iterable: java.util.Iterator iterator()>();

     label28:
        $z6 = interfaceinvoke r142.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label29;

        r143 = interfaceinvoke r142.<java.util.Iterator: java.lang.Object next()>();

        r144 = (java.lang.String) r143;

        r0 = $r141;

        $i4 = staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Benchmark", r144);

        $r56 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        interfaceinvoke r0.<java.util.Collection: boolean add(java.lang.Object)>($r56);

        goto label28;

     label29:
        $r54 = (java.util.List) $r141;

     label30:
        $r20 = <androidx.benchmark.Errors: androidx.benchmark.Errors INSTANCE>;

        $r21 = <androidx.benchmark.Errors: java.lang.String PREFIX>;

        $r22 = (java.lang.CharSequence) $r21;

        $r145 = newarray (char)[1];

        $r145[0] = 95;

        $r23 = staticinvoke <kotlin.text.StringsKt: java.util.List split$default(java.lang.CharSequence,char[],boolean,int,int,java.lang.Object)>($r22, $r145, 0, 0, 6, null);

        $r24 = new java.util.ArrayList;

        specialinvoke $r24.<java.util.ArrayList: void <init>()>();

        $r146 = (java.util.Collection) $r24;

        $r55 = (java.lang.Iterable) $r23;

        r147 = interfaceinvoke $r55.<java.lang.Iterable: java.util.Iterator iterator()>();

     label31:
        $z28 = interfaceinvoke r147.<java.util.Iterator: boolean hasNext()>();

        if $z28 == 0 goto label34;

        r148 = interfaceinvoke r147.<java.util.Iterator: java.lang.Object next()>();

        $r149 = (java.lang.String) r148;

        $r49 = (java.lang.CharSequence) $r149;

        $i2 = interfaceinvoke $r49.<java.lang.CharSequence: int length()>();

        if $i2 <= 0 goto label32;

        $z29 = 1;

        goto label33;

     label32:
        $z29 = 0;

     label33:
        if $z29 == 0 goto label31;

        interfaceinvoke $r146.<java.util.Collection: boolean add(java.lang.Object)>(r148);

        goto label31;

     label34:
        $r25 = (java.util.List) $r146;

        $r26 = (java.lang.Iterable) $r25;

        $r150 = staticinvoke <kotlin.collections.CollectionsKt: java.util.Set toSet(java.lang.Iterable)>($r26);

        $r151 = staticinvoke <kotlin.collections.SetsKt: java.util.Set setOf(java.lang.Object)>("PROFILED");

        $r152 = staticinvoke <kotlin.collections.SetsKt: java.util.Set setOf(java.lang.Object)>("SIMPLEPERF");

        $r27 = <androidx.benchmark.Arguments: androidx.benchmark.Arguments INSTANCE>;

        $r28 = virtualinvoke $r27.<androidx.benchmark.Arguments: java.util.Set getSuppressedErrors()>();

        $r29 = (java.lang.Iterable) $r151;

        $r30 = staticinvoke <kotlin.collections.SetsKt: java.util.Set plus(java.util.Set,java.lang.Iterable)>($r28, $r29);

        $r31 = (java.lang.Iterable) $r152;

        $r153 = staticinvoke <kotlin.collections.SetsKt: java.util.Set minus(java.util.Set,java.lang.Iterable)>($r30, $r31);

        $r32 = (java.lang.Iterable) $r153;

        $r154 = staticinvoke <kotlin.collections.SetsKt: java.util.Set minus(java.util.Set,java.lang.Iterable)>($r150, $r32);

        $r33 = (java.util.Collection) $r154;

        $z5 = interfaceinvoke $r33.<java.util.Collection: boolean isEmpty()>();

        if $z5 != 0 goto label35;

        $z30 = 1;

        goto label36;

     label35:
        $z30 = 0;

     label36:
        if $z30 == 0 goto label37;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n                |ERRORS (not suppressed): ");

        $r36 = <androidx.benchmark.Errors: androidx.benchmark.Errors INSTANCE>;

        $r37 = virtualinvoke $r36.<androidx.benchmark.Errors: java.lang.String toDisplayString$benchmark_common_release(java.util.Set)>($r154);

        $r38 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n                |(Suppressed errors: ");

        $r41 = <androidx.benchmark.Errors: androidx.benchmark.Errors INSTANCE>;

        $r40 = <androidx.benchmark.Arguments: androidx.benchmark.Arguments INSTANCE>;

        $r42 = virtualinvoke $r40.<androidx.benchmark.Arguments: java.util.Set getSuppressedErrors()>();

        $r43 = virtualinvoke $r41.<androidx.benchmark.Errors: java.lang.String toDisplayString$benchmark_common_release(java.util.Set)>($r42);

        $r44 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")\n                |");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r124);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n                |While you can suppress these errors (turning them into warnings)\n                |PLEASE NOTE THAT EACH SUPPRESSED ERROR COMPROMISES ACCURACY\n                |\n                |// Sample suppression, in a benchmark module\'s build.gradle:\n                |android {\n                |    defaultConfig {\n                |        // Enable measuring on an emulator, or devices with low battery\n                |        testInstrumentationRunnerArguments[\"androidx.benchmark.suppressErrors\"] = \"EMULATOR,LOW-BATTERY\"\n                |    }\n                |}\n            ");

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        $r155 = staticinvoke <kotlin.text.StringsKt: java.lang.String trimMargin$default(java.lang.String,java.lang.String,int,java.lang.Object)>($r48, null, 1, null);

        goto label38;

     label37:
        $r155 = (java.lang.String) null;

     label38:
        <androidx.benchmark.Errors: java.lang.String UNSUPPRESSED_WARNING_MESSAGE> = $r155;

        return;
    }

