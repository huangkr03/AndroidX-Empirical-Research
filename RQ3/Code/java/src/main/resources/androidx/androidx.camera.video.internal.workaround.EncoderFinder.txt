androidx.camera.video.internal.workaround.EncoderFinder
<androidx.camera.video.internal.workaround.EncoderFinder: java.lang.String TAG>
<androidx.camera.video.internal.workaround.EncoderFinder: boolean mShouldRemoveKeyFrameRate>
    public void <init>()
    {
        androidx.camera.video.internal.workaround.EncoderFinder r0;
        androidx.camera.video.internal.compat.quirk.MediaFormatMustNotUseFrameRateToFindEncoderQuirk r1;
        androidx.camera.core.impl.Quirk $r2;
        boolean $z0;

        r0 := @this: androidx.camera.video.internal.workaround.EncoderFinder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <androidx.camera.video.internal.compat.quirk.DeviceQuirks: androidx.camera.core.impl.Quirk get(java.lang.Class)>(class "Landroidx/camera/video/internal/compat/quirk/MediaFormatMustNotUseFrameRateToFindEncoderQuirk;");

        r1 = (androidx.camera.video.internal.compat.quirk.MediaFormatMustNotUseFrameRateToFindEncoderQuirk) $r2;

        if r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        r0.<androidx.camera.video.internal.workaround.EncoderFinder: boolean mShouldRemoveKeyFrameRate> = $z0;

        return;
    }

    public android.media.MediaCodec findEncoder(android.media.MediaFormat) throws androidx.camera.video.internal.encoder.InvalidConfigException
    {
        androidx.camera.video.internal.workaround.EncoderFinder r0;
        android.media.MediaFormat r1;
        android.media.MediaCodecList r2, r22;
        java.lang.String r3, r4, $r7, $r17, r18, r20;
        boolean $z0, z1;
        java.lang.Object[] $r6;
        java.lang.Throwable $r8, r21, r25;
        java.lang.StringBuilder $r11, $r12, $r13, $r14, $r15, $r16, r23;
        android.media.MediaCodec r19;
        androidx.camera.video.internal.encoder.InvalidConfigException r24;

        r0 := @this: androidx.camera.video.internal.workaround.EncoderFinder;

        r1 := @parameter0: android.media.MediaFormat;

        r22 = new android.media.MediaCodecList;

        specialinvoke r22.<android.media.MediaCodecList: void <init>(int)>(1);

        r2 = r22;

        r3 = virtualinvoke r0.<androidx.camera.video.internal.workaround.EncoderFinder: java.lang.String findEncoderForFormat(android.media.MediaFormat,android.media.MediaCodecList)>(r1, r2);

     label1:
        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r3);

        if $z0 == 0 goto label2;

        r18 = virtualinvoke r1.<android.media.MediaFormat: java.lang.String getString(java.lang.String)>("mime");

        r19 = staticinvoke <android.media.MediaCodec: android.media.MediaCodec createEncoderByType(java.lang.String)>(r18);

        r20 = staticinvoke <androidx.camera.video.internal.DebugUtils: java.lang.String dumpCodecCapabilities(java.lang.String,android.media.MediaCodec,android.media.MediaFormat)>(r18, r19, r1);

        $r6 = newarray (java.lang.Object)[2];

        $r6[0] = r1;

        $r6[1] = r20;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("No encoder found that supports requested MediaFormat %s. Create encoder by MIME type. Dump codec info:\n%s", $r6);

        staticinvoke <androidx.camera.core.Logger: void w(java.lang.String,java.lang.String)>("EncoderFinder", $r7);

        goto label3;

     label2:
        r19 = staticinvoke <android.media.MediaCodec: android.media.MediaCodec createByCodecName(java.lang.String)>(r3);

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

        r21 = $r8;

        z1 = specialinvoke r0.<androidx.camera.video.internal.workaround.EncoderFinder: boolean shouldCreateCodecByType(android.media.MediaFormat)>(r1);

        r4 = staticinvoke <androidx.camera.video.internal.DebugUtils: java.lang.String dumpMediaCodecListForFormat(android.media.MediaCodecList,android.media.MediaFormat)>(r2, r1);

        r24 = new androidx.camera.video.internal.encoder.InvalidConfigException;

        r23 = new java.lang.StringBuilder;

        specialinvoke r23.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Encoder cannot created: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", isMediaFormatInQuirk: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r24.<androidx.camera.video.internal.encoder.InvalidConfigException: void <init>(java.lang.String,java.lang.Throwable)>($r17, r21);

        r25 = (java.lang.Throwable) r24;

        throw r25;

     label5:
        return r19;

        catch java.io.IOException from label1 to label3 with label4;
        catch java.lang.NullPointerException from label1 to label3 with label4;
        catch java.lang.IllegalArgumentException from label1 to label3 with label4;
    }

    java.lang.String findEncoderForFormat(android.media.MediaFormat, android.media.MediaCodecList)
    {
        androidx.camera.video.internal.workaround.EncoderFinder r0;
        android.media.MediaFormat r1;
        android.media.MediaCodecList r2;
        java.lang.String r3, r9;
        java.lang.Throwable r4, $r6;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        android.media.MediaCodecInfo[] $r5;
        java.lang.Integer r7, r8;

        r0 := @this: androidx.camera.video.internal.workaround.EncoderFinder;

        r1 := @parameter0: android.media.MediaFormat;

        r2 := @parameter1: android.media.MediaCodecList;

        r7 = null;

        r8 = null;

     label01:
        $z0 = r0.<androidx.camera.video.internal.workaround.EncoderFinder: boolean mShouldRemoveKeyFrameRate>;

        if $z0 == 0 goto label02;

        $z2 = virtualinvoke r1.<android.media.MediaFormat: boolean containsKey(java.lang.String)>("frame-rate");

        if $z2 == 0 goto label02;

        $i3 = virtualinvoke r1.<android.media.MediaFormat: int getInteger(java.lang.String)>("frame-rate");

        r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        virtualinvoke r1.<android.media.MediaFormat: void setString(java.lang.String,java.lang.String)>("frame-rate", null);

     label02:
        $i6 = <android.os.Build$VERSION: int SDK_INT>;

        if $i6 > 23 goto label03;

        $z1 = virtualinvoke r1.<android.media.MediaFormat: boolean containsKey(java.lang.String)>("aac-profile");

        if $z1 == 0 goto label03;

        $i2 = virtualinvoke r1.<android.media.MediaFormat: int getInteger(java.lang.String)>("aac-profile");

        r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        virtualinvoke r1.<android.media.MediaFormat: void setString(java.lang.String,java.lang.String)>("aac-profile", null);

     label03:
        r9 = virtualinvoke r2.<android.media.MediaCodecList: java.lang.String findEncoderForFormat(android.media.MediaFormat)>(r1);

        if r9 != null goto label04;

        $r5 = virtualinvoke r2.<android.media.MediaCodecList: android.media.MediaCodecInfo[] getCodecInfos()>();

        r9 = specialinvoke r0.<androidx.camera.video.internal.workaround.EncoderFinder: java.lang.String findEncoderWithNearestCompatibleBitrate(android.media.MediaFormat,android.media.MediaCodecInfo[])>(r1, $r5);

     label04:
        r3 = r9;

     label05:
        if r7 == null goto label06;

        $i1 = virtualinvoke r7.<java.lang.Integer: int intValue()>();

        virtualinvoke r1.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("frame-rate", $i1);

     label06:
        if r8 == null goto label07;

        $i0 = virtualinvoke r8.<java.lang.Integer: int intValue()>();

        virtualinvoke r1.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("aac-profile", $i0);

     label07:
        return r3;

     label08:
        $r6 := @caughtexception;

        r4 = $r6;

     label09:
        if r7 == null goto label10;

        $i5 = virtualinvoke r7.<java.lang.Integer: int intValue()>();

        virtualinvoke r1.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("frame-rate", $i5);

     label10:
        if r8 == null goto label11;

        $i4 = virtualinvoke r8.<java.lang.Integer: int intValue()>();

        virtualinvoke r1.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("aac-profile", $i4);

     label11:
        throw r4;

        catch java.lang.Throwable from label01 to label05 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    private java.lang.String findEncoderWithNearestCompatibleBitrate(android.media.MediaFormat, android.media.MediaCodecInfo[])
    {
        androidx.camera.video.internal.workaround.EncoderFinder r0;
        android.media.MediaFormat r1;
        android.media.MediaCodecInfo[] r2, r4;
        java.lang.String r3, $r9, r18;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        android.media.MediaCodecInfo r5;
        java.lang.Throwable r6, $r13, $r14, r19;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object[] $r7;
        java.lang.Integer $r8, $r12, r15;
        android.util.Range $r10;
        java.lang.Comparable $r11;
        android.media.MediaCodecInfo$CodecCapabilities r16;
        android.media.MediaCodecInfo$VideoCapabilities r17;

        r0 := @this: androidx.camera.video.internal.workaround.EncoderFinder;

        r1 := @parameter0: android.media.MediaFormat;

        r2 := @parameter1: android.media.MediaCodecInfo[];

        r3 = virtualinvoke r1.<android.media.MediaFormat: java.lang.String getString(java.lang.String)>("mime");

        if r3 != null goto label01;

        staticinvoke <androidx.camera.core.Logger: void w(java.lang.String,java.lang.String)>("EncoderFinder", "MediaFormat does not contain mime info.");

        return null;

     label01:
        r4 = r2;

        i0 = lengthof r4;

        i6 = 0;

     label02:
        if i6 >= i0 goto label19;

        r5 = r4[i6];

        $z0 = virtualinvoke r5.<android.media.MediaCodecInfo: boolean isEncoder()>();

        if $z0 != 0 goto label03;

        goto label18;

     label03:
        r15 = null;

     label04:
        r16 = virtualinvoke r5.<android.media.MediaCodecInfo: android.media.MediaCodecInfo$CodecCapabilities getCapabilitiesForType(java.lang.String)>(r3);

        if r16 == null goto label05;

        $z2 = 1;

        goto label06;

     label05:
        $z2 = 0;

     label06:
        staticinvoke <androidx.core.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z2, "MIME type is not supported");

        i7 = -1;

        $z1 = virtualinvoke r1.<android.media.MediaFormat: boolean containsKey(java.lang.String)>("bitrate");

        if $z1 == 0 goto label09;

        r17 = virtualinvoke r16.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$VideoCapabilities getVideoCapabilities()>();

        if r17 == null goto label07;

        $z3 = 1;

        goto label08;

     label07:
        $z3 = 0;

     label08:
        staticinvoke <androidx.core.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z3, "Not video codec");

        $i3 = virtualinvoke r1.<android.media.MediaFormat: int getInteger(java.lang.String)>("bitrate");

        r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r10 = virtualinvoke r17.<android.media.MediaCodecInfo$VideoCapabilities: android.util.Range getBitrateRange()>();

        $r11 = virtualinvoke $r10.<android.util.Range: java.lang.Comparable clamp(java.lang.Comparable)>(r15);

        $r12 = (java.lang.Integer) $r11;

        i7 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        virtualinvoke r1.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("bitrate", i7);

     label09:
        $z4 = virtualinvoke r16.<android.media.MediaCodecInfo$CodecCapabilities: boolean isFormatSupported(android.media.MediaFormat)>(r1);

        if $z4 == 0 goto label12;

        $r7 = newarray (java.lang.Object)[2];

        $r7[0] = r15;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i7);

        $r7[1] = $r8;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("No encoder found that supports requested bitrate. Adjusting bitrate to nearest supported bitrate [requested: %dbps, nearest: %dbps]", $r7);

        staticinvoke <androidx.camera.core.Logger: void w(java.lang.String,java.lang.String)>("EncoderFinder", $r9);

        r18 = virtualinvoke r5.<android.media.MediaCodecInfo: java.lang.String getName()>();

     label10:
        if r15 == null goto label11;

        $i2 = virtualinvoke r15.<java.lang.Integer: int intValue()>();

        virtualinvoke r1.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("bitrate", $i2);

     label11:
        return r18;

     label12:
        if r15 == null goto label18;

        $i1 = virtualinvoke r15.<java.lang.Integer: int intValue()>();

        virtualinvoke r1.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("bitrate", $i1);

        goto label18;

     label13:
        $r13 := @caughtexception;

        r19 = $r13;

     label14:
        if r15 == null goto label18;

        $i4 = virtualinvoke r15.<java.lang.Integer: int intValue()>();

        virtualinvoke r1.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("bitrate", $i4);

        goto label18;

     label15:
        $r14 := @caughtexception;

        r6 = $r14;

     label16:
        if r15 == null goto label17;

        $i5 = virtualinvoke r15.<java.lang.Integer: int intValue()>();

        virtualinvoke r1.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("bitrate", $i5);

     label17:
        throw r6;

     label18:
        i6 = i6 + 1;

        goto label02;

     label19:
        return null;

        catch java.lang.IllegalArgumentException from label04 to label10 with label13;
        catch java.lang.Throwable from label04 to label10 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    private boolean shouldCreateCodecByType(android.media.MediaFormat)
    {
        androidx.camera.video.internal.workaround.EncoderFinder r0;
        android.media.MediaFormat r1;
        androidx.camera.video.internal.compat.quirk.MediaCodecInfoReportIncorrectInfoQuirk r2;
        androidx.camera.core.impl.Quirk $r3;
        boolean $z0;

        r0 := @this: androidx.camera.video.internal.workaround.EncoderFinder;

        r1 := @parameter0: android.media.MediaFormat;

        $r3 = staticinvoke <androidx.camera.video.internal.compat.quirk.DeviceQuirks: androidx.camera.core.impl.Quirk get(java.lang.Class)>(class "Landroidx/camera/video/internal/compat/quirk/MediaCodecInfoReportIncorrectInfoQuirk;");

        r2 = (androidx.camera.video.internal.compat.quirk.MediaCodecInfoReportIncorrectInfoQuirk) $r3;

        if r2 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r2.<androidx.camera.video.internal.compat.quirk.MediaCodecInfoReportIncorrectInfoQuirk: boolean isUnSupportMediaCodecInfo(android.media.MediaFormat)>(r1);

        return $z0;
    }

