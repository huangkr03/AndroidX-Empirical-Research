kotlin.jvm.internal.TypeReference
<kotlin.jvm.internal.TypeReference: kotlin.jvm.internal.TypeReference$Companion Companion>
<kotlin.jvm.internal.TypeReference: int IS_MARKED_NULLABLE>
<kotlin.jvm.internal.TypeReference: int IS_MUTABLE_COLLECTION_TYPE>
<kotlin.jvm.internal.TypeReference: int IS_NOTHING_TYPE>
<kotlin.jvm.internal.TypeReference: java.util.List arguments>
<kotlin.jvm.internal.TypeReference: kotlin.reflect.KClassifier classifier>
<kotlin.jvm.internal.TypeReference: int flags>
<kotlin.jvm.internal.TypeReference: kotlin.reflect.KType platformTypeUpperBound>
    static void <clinit>()
    {
        kotlin.jvm.internal.TypeReference$Companion $r0;

        $r0 = new kotlin.jvm.internal.TypeReference$Companion;

        specialinvoke $r0.<kotlin.jvm.internal.TypeReference$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <kotlin.jvm.internal.TypeReference: kotlin.jvm.internal.TypeReference$Companion Companion> = $r0;

        return;
    }

    public void <init>(kotlin.reflect.KClassifier, java.util.List, kotlin.reflect.KType, int)
    {
        kotlin.jvm.internal.TypeReference $r0;
        kotlin.reflect.KClassifier $r1;
        java.util.List $r2;
        kotlin.reflect.KType $r3;
        int $i0;

        $r0 := @this: kotlin.jvm.internal.TypeReference;

        $r1 := @parameter0: kotlin.reflect.KClassifier;

        $r2 := @parameter1: java.util.List;

        $r3 := @parameter2: kotlin.reflect.KType;

        $i0 := @parameter3: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "classifier");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "arguments");

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<kotlin.jvm.internal.TypeReference: kotlin.reflect.KClassifier classifier> = $r1;

        $r0.<kotlin.jvm.internal.TypeReference: java.util.List arguments> = $r2;

        $r0.<kotlin.jvm.internal.TypeReference: kotlin.reflect.KType platformTypeUpperBound> = $r3;

        $r0.<kotlin.jvm.internal.TypeReference: int flags> = $i0;

        return;
    }

    public void <init>(kotlin.reflect.KClassifier, java.util.List, boolean)
    {
        kotlin.jvm.internal.TypeReference $r0;
        kotlin.reflect.KClassifier $r1;
        java.util.List $r2;
        boolean $z0;
        int i0;

        $r0 := @this: kotlin.jvm.internal.TypeReference;

        $r1 := @parameter0: kotlin.reflect.KClassifier;

        $r2 := @parameter1: java.util.List;

        $z0 := @parameter2: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "classifier");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "arguments");

        i0 = (int) $z0;

        specialinvoke $r0.<kotlin.jvm.internal.TypeReference: void <init>(kotlin.reflect.KClassifier,java.util.List,kotlin.reflect.KType,int)>($r1, $r2, null, i0);

        return;
    }

    public static final java.lang.String access$asString(kotlin.jvm.internal.TypeReference, kotlin.reflect.KTypeProjection)
    {
        kotlin.reflect.KTypeProjection $r0;
        java.lang.String $r1;
        kotlin.jvm.internal.TypeReference $r2;

        $r2 := @parameter0: kotlin.jvm.internal.TypeReference;

        $r0 := @parameter1: kotlin.reflect.KTypeProjection;

        $r1 = specialinvoke $r2.<kotlin.jvm.internal.TypeReference: java.lang.String asString(kotlin.reflect.KTypeProjection)>($r0);

        return $r1;
    }

    private final java.lang.String asString(kotlin.reflect.KTypeProjection)
    {
        kotlin.jvm.internal.TypeReference $r0;
        kotlin.reflect.KTypeProjection $r1;
        kotlin.reflect.KVariance $r2;
        kotlin.reflect.KType $r3;
        boolean $z0;
        java.lang.String $r4, $r5;
        int[] $r6;
        int $i0;
        java.lang.StringBuilder $r7, r9;
        kotlin.NoWhenBranchMatchedException r8;
        java.lang.Throwable r10;

        $r0 := @this: kotlin.jvm.internal.TypeReference;

        $r1 := @parameter0: kotlin.reflect.KTypeProjection;

        $r2 = virtualinvoke $r1.<kotlin.reflect.KTypeProjection: kotlin.reflect.KVariance getVariance()>();

        if $r2 != null goto label1;

        return "*";

     label1:
        $r3 = virtualinvoke $r1.<kotlin.reflect.KTypeProjection: kotlin.reflect.KType getType()>();

        $z0 = $r3 instanceof kotlin.jvm.internal.TypeReference;

        if $z0 == 0 goto label2;

        $r0 = (kotlin.jvm.internal.TypeReference) $r3;

        goto label3;

     label2:
        $r0 = null;

     label3:
        if $r0 == null goto label4;

        $r4 = specialinvoke $r0.<kotlin.jvm.internal.TypeReference: java.lang.String asString(boolean)>(1);

        $r5 = $r4;

        if $r4 != null goto label5;

     label4:
        $r3 = virtualinvoke $r1.<kotlin.reflect.KTypeProjection: kotlin.reflect.KType getType()>();

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

     label5:
        $r2 = virtualinvoke $r1.<kotlin.reflect.KTypeProjection: kotlin.reflect.KVariance getVariance()>();

        $r6 = <kotlin.jvm.internal.TypeReference$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i0 = virtualinvoke $r2.<kotlin.reflect.KVariance: int ordinal()>();

        $i0 = $r6[$i0];

        lookupswitch($i0)
        {
            case 1: goto label9;
            case 2: goto label8;
            case 3: goto label7;
            default: goto label6;
        };

     label6:
        r8 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke r8.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        r10 = (java.lang.Throwable) r8;

        throw r10;

     label7:
        r9 = new java.lang.StringBuilder;

        specialinvoke r9.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("out ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label8:
        r9 = new java.lang.StringBuilder;

        specialinvoke r9.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("in ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label9:
        return $r5;
    }

    private final java.lang.String asString(boolean)
    {
        kotlin.jvm.internal.TypeReference $r0;
        boolean $z0, $z1;
        kotlin.reflect.KClassifier $r1;
        java.lang.Class $r2;
        kotlin.reflect.KClass $r3;
        java.lang.String $r4, $r6, $r7;
        int $i0;
        java.util.List $r5;
        java.lang.StringBuilder $r8, r11;
        kotlin.reflect.KType $r9;
        kotlin.jvm.internal.TypeReference$asString$args$1 r10;
        java.lang.Iterable r12;

        $r0 := @this: kotlin.jvm.internal.TypeReference;

        $z0 := @parameter0: boolean;

        $r1 = virtualinvoke $r0.<kotlin.jvm.internal.TypeReference: kotlin.reflect.KClassifier getClassifier()>();

        $z1 = $r1 instanceof kotlin.reflect.KClass;

        $r2 = null;

        if $z1 == 0 goto label01;

        $r3 = (kotlin.reflect.KClass) $r1;

        goto label02;

     label01:
        $r3 = null;

     label02:
        if $r3 == null goto label03;

        $r2 = staticinvoke <kotlin.jvm.JvmClassMappingKt: java.lang.Class getJavaClass(kotlin.reflect.KClass)>($r3);

        goto label03;

     label03:
        if $r2 != null goto label04;

        $r1 = virtualinvoke $r0.<kotlin.jvm.internal.TypeReference: kotlin.reflect.KClassifier getClassifier()>();

        $r4 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        goto label08;

     label04:
        $i0 = $r0.<kotlin.jvm.internal.TypeReference: int flags>;

        $i0 = $i0 & 4;

        if $i0 == 0 goto label05;

        $r4 = "kotlin.Nothing";

        goto label08;

     label05:
        $z1 = virtualinvoke $r2.<java.lang.Class: boolean isArray()>();

        if $z1 == 0 goto label06;

        $r4 = specialinvoke $r0.<kotlin.jvm.internal.TypeReference: java.lang.String getArrayClassName(java.lang.Class)>($r2);

        goto label08;

     label06:
        if $z0 == 0 goto label07;

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label07;

        $r1 = virtualinvoke $r0.<kotlin.jvm.internal.TypeReference: kotlin.reflect.KClassifier getClassifier()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r1, "null cannot be cast to non-null type kotlin.reflect.KClass<*>");

        $r3 = (kotlin.reflect.KClass) $r1;

        $r2 = staticinvoke <kotlin.jvm.JvmClassMappingKt: java.lang.Class getJavaObjectType(kotlin.reflect.KClass)>($r3);

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        goto label08;

     label07:
        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

     label08:
        $r5 = virtualinvoke $r0.<kotlin.jvm.internal.TypeReference: java.util.List getArguments()>();

        $z0 = interfaceinvoke $r5.<java.util.List: boolean isEmpty()>();

        $r6 = "";

        if $z0 == 0 goto label09;

        $r7 = "";

        goto label10;

     label09:
        $r5 = virtualinvoke $r0.<kotlin.jvm.internal.TypeReference: java.util.List getArguments()>();

        r10 = new kotlin.jvm.internal.TypeReference$asString$args$1;

        specialinvoke r10.<kotlin.jvm.internal.TypeReference$asString$args$1: void <init>(kotlin.jvm.internal.TypeReference)>($r0);

        r12 = (java.lang.Iterable) $r5;

        $r7 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.String joinToString$default(java.lang.Iterable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,kotlin.jvm.functions.Function1,int,java.lang.Object)>(r12, ", ", "<", ">", 0, null, r10, 24, null);

     label10:
        $z0 = virtualinvoke $r0.<kotlin.jvm.internal.TypeReference: boolean isMarkedNullable()>();

        if $z0 == 0 goto label11;

        $r6 = "?";

        goto label11;

     label11:
        r11 = new java.lang.StringBuilder;

        specialinvoke r11.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r4 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = $r0.<kotlin.jvm.internal.TypeReference: kotlin.reflect.KType platformTypeUpperBound>;

        $z0 = $r9 instanceof kotlin.jvm.internal.TypeReference;

        if $z0 == 0 goto label14;

        $r0 = (kotlin.jvm.internal.TypeReference) $r9;

        $r6 = specialinvoke $r0.<kotlin.jvm.internal.TypeReference: java.lang.String asString(boolean)>(1);

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r6, $r4);

        if $z0 == 0 goto label12;

        goto label14;

     label12:
        r11 = new java.lang.StringBuilder;

        specialinvoke r11.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(63);

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r6, $r7);

        if $z0 == 0 goto label13;

        r11 = new java.lang.StringBuilder;

        specialinvoke r11.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(33);

        $r4 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label13:
        r11 = new java.lang.StringBuilder;

        specialinvoke r11.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("..");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r4 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

     label14:
        return $r4;
    }

    private final java.lang.String getArrayClassName(java.lang.Class)
    {
        kotlin.jvm.internal.TypeReference $r0;
        java.lang.Class $r1;
        boolean $z0;

        $r0 := @this: kotlin.jvm.internal.TypeReference;

        $r1 := @parameter0: java.lang.Class;

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r1, class "[Z");

        if $z0 == 0 goto label1;

        return "kotlin.BooleanArray";

     label1:
        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r1, class "[C");

        if $z0 == 0 goto label2;

        return "kotlin.CharArray";

     label2:
        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r1, class "[B");

        if $z0 == 0 goto label3;

        return "kotlin.ByteArray";

     label3:
        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r1, class "[S");

        if $z0 == 0 goto label4;

        return "kotlin.ShortArray";

     label4:
        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r1, class "[I");

        if $z0 == 0 goto label5;

        return "kotlin.IntArray";

     label5:
        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r1, class "[F");

        if $z0 == 0 goto label6;

        return "kotlin.FloatArray";

     label6:
        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r1, class "[J");

        if $z0 == 0 goto label7;

        return "kotlin.LongArray";

     label7:
        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r1, class "[D");

        if $z0 == 0 goto label8;

        return "kotlin.DoubleArray";

     label8:
        return "kotlin.Array";
    }

    public static void getFlags$kotlin_stdlib$annotations()
    {
        return;
    }

    public static void getPlatformTypeUpperBound$kotlin_stdlib$annotations()
    {
        return;
    }

    public boolean equals(java.lang.Object)
    {
        kotlin.jvm.internal.TypeReference $r0, $r3;
        java.lang.Object $r1;
        boolean $z0;
        kotlin.reflect.KClassifier $r2, $r4;
        java.util.List $r5, $r6;
        kotlin.reflect.KType $r7, $r8;
        int $i0, $i1;

        $r0 := @this: kotlin.jvm.internal.TypeReference;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof kotlin.jvm.internal.TypeReference;

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r0.<kotlin.jvm.internal.TypeReference: kotlin.reflect.KClassifier getClassifier()>();

        $r3 = (kotlin.jvm.internal.TypeReference) $r1;

        $r4 = virtualinvoke $r3.<kotlin.jvm.internal.TypeReference: kotlin.reflect.KClassifier getClassifier()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, $r4);

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke $r0.<kotlin.jvm.internal.TypeReference: java.util.List getArguments()>();

        $r3 = (kotlin.jvm.internal.TypeReference) $r1;

        $r6 = virtualinvoke $r3.<kotlin.jvm.internal.TypeReference: java.util.List getArguments()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r5, $r6);

        if $z0 == 0 goto label1;

        $r7 = $r0.<kotlin.jvm.internal.TypeReference: kotlin.reflect.KType platformTypeUpperBound>;

        $r3 = (kotlin.jvm.internal.TypeReference) $r1;

        $r8 = $r3.<kotlin.jvm.internal.TypeReference: kotlin.reflect.KType platformTypeUpperBound>;

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r7, $r8);

        if $z0 == 0 goto label1;

        $i0 = $r0.<kotlin.jvm.internal.TypeReference: int flags>;

        $r0 = (kotlin.jvm.internal.TypeReference) $r1;

        $i1 = $r0.<kotlin.jvm.internal.TypeReference: int flags>;

        if $i0 != $i1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.util.List getAnnotations()
    {
        kotlin.jvm.internal.TypeReference $r0;
        java.util.List $r1;

        $r0 := @this: kotlin.jvm.internal.TypeReference;

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        return $r1;
    }

    public java.util.List getArguments()
    {
        kotlin.jvm.internal.TypeReference $r0;
        java.util.List r1;

        $r0 := @this: kotlin.jvm.internal.TypeReference;

        r1 = $r0.<kotlin.jvm.internal.TypeReference: java.util.List arguments>;

        return r1;
    }

    public kotlin.reflect.KClassifier getClassifier()
    {
        kotlin.jvm.internal.TypeReference $r0;
        kotlin.reflect.KClassifier r1;

        $r0 := @this: kotlin.jvm.internal.TypeReference;

        r1 = $r0.<kotlin.jvm.internal.TypeReference: kotlin.reflect.KClassifier classifier>;

        return r1;
    }

    public final int getFlags$kotlin_stdlib()
    {
        kotlin.jvm.internal.TypeReference $r0;
        int i0;

        $r0 := @this: kotlin.jvm.internal.TypeReference;

        i0 = $r0.<kotlin.jvm.internal.TypeReference: int flags>;

        return i0;
    }

    public final kotlin.reflect.KType getPlatformTypeUpperBound$kotlin_stdlib()
    {
        kotlin.jvm.internal.TypeReference $r0;
        kotlin.reflect.KType r1;

        $r0 := @this: kotlin.jvm.internal.TypeReference;

        r1 = $r0.<kotlin.jvm.internal.TypeReference: kotlin.reflect.KType platformTypeUpperBound>;

        return r1;
    }

    public int hashCode()
    {
        kotlin.jvm.internal.TypeReference $r0;
        kotlin.reflect.KClassifier $r1;
        int $i0, $i1;
        java.util.List $r2;
        java.lang.Integer $r3;

        $r0 := @this: kotlin.jvm.internal.TypeReference;

        $r1 = virtualinvoke $r0.<kotlin.jvm.internal.TypeReference: kotlin.reflect.KClassifier getClassifier()>();

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i0 = $i0 * 31;

        $r2 = virtualinvoke $r0.<kotlin.jvm.internal.TypeReference: java.util.List getArguments()>();

        $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i0 = $i0 + $i1;

        $i0 = $i0 * 31;

        $i1 = $r0.<kotlin.jvm.internal.TypeReference: int flags>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $i1 = virtualinvoke $r3.<java.lang.Object: int hashCode()>();

        $i0 = $i0 + $i1;

        return $i0;
    }

    public boolean isMarkedNullable()
    {
        kotlin.jvm.internal.TypeReference $r0;
        int $i0;

        $r0 := @this: kotlin.jvm.internal.TypeReference;

        $i0 = $r0.<kotlin.jvm.internal.TypeReference: int flags>;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.String toString()
    {
        kotlin.jvm.internal.TypeReference $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $r0 := @this: kotlin.jvm.internal.TypeReference;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = specialinvoke $r0.<kotlin.jvm.internal.TypeReference: java.lang.String asString(boolean)>(0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (Kotlin reflection is not available)");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

kotlin.jvm.internal.TypeReference$asString$args$1
<kotlin.jvm.internal.TypeReference$asString$args$1: kotlin.jvm.internal.TypeReference this$0>
    void <init>(kotlin.jvm.internal.TypeReference)
    {
        kotlin.jvm.internal.TypeReference$asString$args$1 $r0;
        kotlin.jvm.internal.TypeReference $r1;

        $r0 := @this: kotlin.jvm.internal.TypeReference$asString$args$1;

        $r1 := @parameter0: kotlin.jvm.internal.TypeReference;

        $r0.<kotlin.jvm.internal.TypeReference$asString$args$1: kotlin.jvm.internal.TypeReference this$0> = $r1;

        specialinvoke $r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.CharSequence invoke(kotlin.reflect.KTypeProjection)
    {
        kotlin.jvm.internal.TypeReference$asString$args$1 $r0;
        java.lang.String $r1;
        kotlin.reflect.KTypeProjection $r2;
        kotlin.jvm.internal.TypeReference $r3;

        $r0 := @this: kotlin.jvm.internal.TypeReference$asString$args$1;

        $r2 := @parameter0: kotlin.reflect.KTypeProjection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "it");

        $r3 = $r0.<kotlin.jvm.internal.TypeReference$asString$args$1: kotlin.jvm.internal.TypeReference this$0>;

        $r1 = staticinvoke <kotlin.jvm.internal.TypeReference: java.lang.String access$asString(kotlin.jvm.internal.TypeReference,kotlin.reflect.KTypeProjection)>($r3, $r2);

        return $r1;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        kotlin.jvm.internal.TypeReference$asString$args$1 $r0;
        java.lang.CharSequence $r1;
        java.lang.Object $r2;
        kotlin.reflect.KTypeProjection $r3;

        $r0 := @this: kotlin.jvm.internal.TypeReference$asString$args$1;

        $r2 := @parameter0: java.lang.Object;

        $r3 = (kotlin.reflect.KTypeProjection) $r2;

        $r1 = virtualinvoke $r0.<kotlin.jvm.internal.TypeReference$asString$args$1: java.lang.CharSequence invoke(kotlin.reflect.KTypeProjection)>($r3);

        return $r1;
    }

kotlin.jvm.internal.TypeReference$Companion
    private void <init>()
    {
        kotlin.jvm.internal.TypeReference$Companion $r0;

        $r0 := @this: kotlin.jvm.internal.TypeReference$Companion;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        kotlin.jvm.internal.TypeReference$Companion $r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        $r0 := @this: kotlin.jvm.internal.TypeReference$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke $r0.<kotlin.jvm.internal.TypeReference$Companion: void <init>()>();

        return;
    }

kotlin.jvm.internal.TypeReference$WhenMappings
<kotlin.jvm.internal.TypeReference$WhenMappings: int[] $EnumSwitchMapping$0>
    static void <clinit>()
    {
        kotlin.reflect.KVariance[] $r0;
        int $i0;
        int[] $r1;
        kotlin.reflect.KVariance $r2;

        $r0 = staticinvoke <kotlin.reflect.KVariance: kotlin.reflect.KVariance[] values()>();

        $i0 = lengthof $r0;

        $r1 = newarray (int)[$i0];

        $r2 = <kotlin.reflect.KVariance: kotlin.reflect.KVariance INVARIANT>;

        $i0 = virtualinvoke $r2.<kotlin.reflect.KVariance: int ordinal()>();

        $r1[$i0] = 1;

        $r2 = <kotlin.reflect.KVariance: kotlin.reflect.KVariance IN>;

        $i0 = virtualinvoke $r2.<kotlin.reflect.KVariance: int ordinal()>();

        $r1[$i0] = 2;

        $r2 = <kotlin.reflect.KVariance: kotlin.reflect.KVariance OUT>;

        $i0 = virtualinvoke $r2.<kotlin.reflect.KVariance: int ordinal()>();

        $r1[$i0] = 3;

        <kotlin.jvm.internal.TypeReference$WhenMappings: int[] $EnumSwitchMapping$0> = $r1;

        return;
    }

