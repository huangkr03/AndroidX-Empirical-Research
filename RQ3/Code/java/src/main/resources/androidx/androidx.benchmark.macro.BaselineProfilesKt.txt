androidx.benchmark.macro.BaselineProfilesKt
    public static final void collectBaselineProfile(java.lang.String, java.lang.String, kotlin.jvm.functions.Function1)
    {
        java.lang.String r0, r1, $r22, $r24, $r25, $r28, $r34, $r36, $r40, $r41, r42, r45, $r46, $r47, r48, r49;
        kotlin.jvm.functions.Function1 r2, $r32;
        long l0;
        androidx.benchmark.macro.MacrobenchmarkScope r3, $r7;
        androidx.benchmark.macro.CompilationMode$Partial r4, $r8;
        java.lang.String[] r5;
        int $i1;
        androidx.benchmark.Shell $r6, $r23;
        boolean $z0, $z1;
        androidx.benchmark.macro.BaselineProfileMode $r9;
        androidx.benchmark.UserspaceTracing $r10, $r13, $r39;
        androidx.benchmark.macro.BaselineProfilesKt$collectBaselineProfile$3$1 $r11;
        kotlin.jvm.functions.Function0 $r12;
        java.lang.StringBuilder $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21;
        java.lang.CharSequence $r26, $r27;
        java.util.List $r29;
        androidx.benchmark.macro.BaselineProfilesKt$collectBaselineProfile$4 $r30;
        androidx.benchmark.InstrumentationResults $r31;
        java.lang.IllegalArgumentException $r33, $r35;
        java.lang.Throwable $r37, $r38, r44, r50;
        kotlin.Unit r43;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "uniqueName");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "packageName");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "profileBlock");

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 < 28 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        if $z1 != 0 goto label03;

        $r40 = "Baseline Profile Collection requires API 28 or higher.";

        $r35 = new java.lang.IllegalArgumentException;

        $r36 = virtualinvoke $r40.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r35.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r36);

        throw $r35;

     label03:
        $r6 = <androidx.benchmark.Shell: androidx.benchmark.Shell INSTANCE>;

        $z0 = virtualinvoke $r6.<androidx.benchmark.Shell: boolean isSessionRooted()>();

        if $z0 != 0 goto label04;

        $r41 = "Baseline Profile Collection requires a rooted device, and a rooted adb session. Use `adb root`.";

        $r33 = new java.lang.IllegalArgumentException;

        $r34 = virtualinvoke $r41.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r33.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r34);

        throw $r33;

     label04:
        l0 = staticinvoke <java.lang.System: long nanoTime()>();

        $r7 = new androidx.benchmark.macro.MacrobenchmarkScope;

        specialinvoke $r7.<androidx.benchmark.macro.MacrobenchmarkScope: void <init>(java.lang.String,boolean)>(r1, 1);

        r3 = $r7;

        $r8 = new androidx.benchmark.macro.CompilationMode$Partial;

        $r9 = <androidx.benchmark.macro.BaselineProfileMode: androidx.benchmark.macro.BaselineProfileMode Disable>;

        specialinvoke $r8.<androidx.benchmark.macro.CompilationMode$Partial: void <init>(androidx.benchmark.macro.BaselineProfileMode,int)>($r9, 3);

        r4 = $r8;

        virtualinvoke r3.<androidx.benchmark.macro.MacrobenchmarkScope: void killProcess()>();

     label05:
        r42 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("compile ", r1);

        $r10 = <androidx.benchmark.UserspaceTracing: androidx.benchmark.UserspaceTracing INSTANCE>;

        staticinvoke <androidx.benchmark.UserspaceTracing: void beginSection$default(androidx.benchmark.UserspaceTracing,java.lang.String,long,int,java.lang.Object)>($r10, r42, 0L, 2, null);

     label06:
        $r11 = new androidx.benchmark.macro.BaselineProfilesKt$collectBaselineProfile$3$1;

        specialinvoke $r11.<androidx.benchmark.macro.BaselineProfilesKt$collectBaselineProfile$3$1: void <init>(kotlin.jvm.functions.Function1,androidx.benchmark.macro.MacrobenchmarkScope)>(r2, r3);

        $r12 = (kotlin.jvm.functions.Function0) $r11;

        virtualinvoke r4.<androidx.benchmark.macro.CompilationMode$Partial: void resetAndCompile$benchmark_macro_release(java.lang.String,kotlin.jvm.functions.Function0)>(r1, $r12);

        r43 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label07:
        $r13 = <androidx.benchmark.UserspaceTracing: androidx.benchmark.UserspaceTracing INSTANCE>;

        staticinvoke <androidx.benchmark.UserspaceTracing: void endSection$default(androidx.benchmark.UserspaceTracing,long,int,java.lang.Object)>($r13, 0L, 1, null);

        goto label10;

     label08:
        $r38 := @caughtexception;

        r44 = $r38;

     label09:
        $r39 = <androidx.benchmark.UserspaceTracing: androidx.benchmark.UserspaceTracing INSTANCE>;

        staticinvoke <androidx.benchmark.UserspaceTracing: void endSection$default(androidx.benchmark.UserspaceTracing,long,int,java.lang.Object)>($r39, 0L, 1, null);

        throw r44;

     label10:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/data/misc/profiles/ref/");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/primary.prof");

        r45 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/data/misc/profiles/cur/0/");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/primary.prof");

        $r46 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Reference profile location: ", r45);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Benchmark", $r22);

        $r23 = <androidx.benchmark.Shell: androidx.benchmark.Shell INSTANCE>;

        $r24 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("pm path ", r1);

        $r47 = staticinvoke <androidx.benchmark.Shell: java.lang.String executeScript$default(androidx.benchmark.Shell,java.lang.String,java.lang.String,int,java.lang.Object)>($r23, $r24, null, 2, null);

        $r25 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>($r47, "package:", null, 2, null);

        $r26 = (java.lang.CharSequence) $r25;

        $r27 = staticinvoke <kotlin.text.StringsKt: java.lang.CharSequence trim(java.lang.CharSequence)>($r26);

        r48 = virtualinvoke $r27.<java.lang.Object: java.lang.String toString()>();

        $r28 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("APK Path: ", r48);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Benchmark", $r28);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Benchmark", "Converting to human readable profile format");

        r5 = newarray (java.lang.String)[2];

        r5[0] = r45;

        r5[1] = $r46;

        $r29 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object[])>(r5);

        r49 = staticinvoke <androidx.benchmark.macro.BaselineProfilesKt: java.lang.String profile(java.lang.String,java.util.List)>(r48, $r29);

        $r31 = <androidx.benchmark.InstrumentationResults: androidx.benchmark.InstrumentationResults INSTANCE>;

        $r30 = new androidx.benchmark.macro.BaselineProfilesKt$collectBaselineProfile$4;

        specialinvoke $r30.<androidx.benchmark.macro.BaselineProfilesKt$collectBaselineProfile$4: void <init>(java.lang.String,long,java.lang.String)>(r0, l0, r49);

        $r32 = (kotlin.jvm.functions.Function1) $r30;

        virtualinvoke $r31.<androidx.benchmark.InstrumentationResults: void instrumentationReport(kotlin.jvm.functions.Function1)>($r32);

     label11:
        virtualinvoke r3.<androidx.benchmark.macro.MacrobenchmarkScope: void killProcess()>();

        goto label14;

     label12:
        $r37 := @caughtexception;

        r50 = $r37;

     label13:
        virtualinvoke r3.<androidx.benchmark.macro.MacrobenchmarkScope: void killProcess()>();

        throw r50;

     label14:
        return;

        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.Throwable from label05 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    private static final java.lang.String profile(java.lang.String, java.util.List)
    {
        java.lang.String r0, r3, r4, $r7, $r14, $r16;
        java.util.List r1;
        java.util.Iterator r2;
        boolean $z0, $z1, $z2;
        java.lang.IllegalStateException $r5;
        java.lang.Object $r6;
        java.lang.StringBuilder $r8, $r10, $r11, $r12, $r13;
        androidx.benchmark.Shell $r9;
        java.lang.CharSequence $r15;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.List;

        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r6;

        $r7 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Using profile location: ", r3);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Benchmark", $r7);

        $r9 = <androidx.benchmark.Shell: androidx.benchmark.Shell INSTANCE>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("profman --dump-classes-and-methods --profile-file=");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --apk=");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        r4 = staticinvoke <androidx.benchmark.Shell: java.lang.String executeScript$default(androidx.benchmark.Shell,java.lang.String,java.lang.String,int,java.lang.Object)>($r9, $r14, null, 2, null);

        $r15 = (java.lang.CharSequence) r4;

        $z1 = staticinvoke <kotlin.text.StringsKt: boolean isBlank(java.lang.CharSequence)>($r15);

        if $z1 != 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        if $z2 == 0 goto label1;

        $r16 = staticinvoke <androidx.benchmark.macro.BaselineProfilesKt: java.lang.String filterProfileRulesToTargetP(java.lang.String)>(r4);

        return $r16;

     label4:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The profile is empty.");

        throw $r5;
    }

    public static final java.lang.String filterProfileRulesToTargetP(java.lang.String)
    {
        java.lang.String r0, r7, $r12;
        java.util.List r1, r2;
        java.lang.Iterable $r3, $r11;
        java.util.Collection r4;
        java.util.Iterator r5;
        java.lang.Object r6;
        java.lang.CharSequence $r8, $r10, $r13, $r14;
        java.util.ArrayList $r9;
        boolean $z3, $z5, $z6;

        r0 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "profile");

        $r8 = (java.lang.CharSequence) r0;

        r1 = staticinvoke <kotlin.text.StringsKt: java.util.List lines(java.lang.CharSequence)>($r8);

        $r3 = (java.lang.Iterable) r1;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r4 = (java.util.Collection) $r9;

        r5 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z5 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label4;

        r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) r6;

        $z3 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>(r7, "[", 0, 2, null);

        if $z3 == 0 goto label2;

        $z6 = 1;

        goto label3;

     label2:
        $r14 = (java.lang.CharSequence) r7;

        $r13 = (java.lang.CharSequence) "+";

        $z6 = staticinvoke <kotlin.text.StringsKt: boolean contains$default(java.lang.CharSequence,java.lang.CharSequence,boolean,int,java.lang.Object)>($r14, $r13, 0, 2, null);

     label3:
        if $z6 != 0 goto label1;

        interfaceinvoke r4.<java.util.Collection: boolean add(java.lang.Object)>(r6);

        goto label1;

     label4:
        r2 = (java.util.List) r4;

        $r11 = (java.lang.Iterable) r2;

        $r10 = (java.lang.CharSequence) "\n";

        $r12 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.String joinToString$default(java.lang.Iterable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r11, $r10, null, null, 0, null, null, 62, null);

        return $r12;
    }

    private static final java.lang.String summaryRecord(long, java.lang.String, java.lang.String)
    {
        long l0;
        java.lang.String r0, r1, r2, $r4, $r5, $r14, $r15;
        androidx.benchmark.Outputs $r3;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;

        l0 := @parameter0: long;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        $r3 = <androidx.benchmark.Outputs: androidx.benchmark.Outputs INSTANCE>;

        $r4 = virtualinvoke $r3.<androidx.benchmark.Outputs: java.lang.String relativePathFor(java.lang.String)>(r1);

        $r5 = staticinvoke <kotlin.text.StringsKt: java.lang.String replace$default(java.lang.String,java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r4, "(", "\\(", 0, 4, null);

        r2 = staticinvoke <kotlin.text.StringsKt: java.lang.String replace$default(java.lang.String,java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r5, ")", "\\)", 0, 4, null);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n        Total run time Ns: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".\n        Baseline profile [results](file://");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")\n\n        To copy the profile use:\n        adb pull \"");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" .\n    ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = staticinvoke <kotlin.text.StringsKt: java.lang.String trimIndent(java.lang.String)>($r14);

        return $r15;
    }

    public static final java.lang.String access$summaryRecord(long, java.lang.String, java.lang.String)
    {
        long l0;
        java.lang.String r0, r1, $r2;

        l0 := @parameter0: long;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        $r2 = staticinvoke <androidx.benchmark.macro.BaselineProfilesKt: java.lang.String summaryRecord(long,java.lang.String,java.lang.String)>(l0, r0, r1);

        return $r2;
    }

