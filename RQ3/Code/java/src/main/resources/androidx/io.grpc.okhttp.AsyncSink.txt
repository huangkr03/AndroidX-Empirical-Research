io.grpc.okhttp.AsyncSink
<io.grpc.okhttp.AsyncSink: okio.Buffer buffer>
<io.grpc.okhttp.AsyncSink: boolean closed>
<io.grpc.okhttp.AsyncSink: boolean controlFramesExceeded>
<io.grpc.okhttp.AsyncSink: int controlFramesInWrite>
<io.grpc.okhttp.AsyncSink: boolean flushEnqueued>
<io.grpc.okhttp.AsyncSink: java.lang.Object lock>
<io.grpc.okhttp.AsyncSink: int maxQueuedControlFrames>
<io.grpc.okhttp.AsyncSink: int queuedControlFrames>
<io.grpc.okhttp.AsyncSink: io.grpc.internal.SerializingExecutor serializingExecutor>
<io.grpc.okhttp.AsyncSink: okio.Sink sink>
<io.grpc.okhttp.AsyncSink: java.net.Socket socket>
<io.grpc.okhttp.AsyncSink: io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler transportExceptionHandler>
<io.grpc.okhttp.AsyncSink: boolean writeEnqueued>
    static volatile okio.Buffer '-$$Nest$fgetbuffer'(io.grpc.okhttp.AsyncSink)
    {
        io.grpc.okhttp.AsyncSink $r0;
        okio.Buffer r1;

        $r0 := @parameter0: io.grpc.okhttp.AsyncSink;

        r1 = $r0.<io.grpc.okhttp.AsyncSink: okio.Buffer buffer>;

        return r1;
    }

    static volatile int '-$$Nest$fgetcontrolFramesInWrite'(io.grpc.okhttp.AsyncSink)
    {
        io.grpc.okhttp.AsyncSink $r0;
        int i0;

        $r0 := @parameter0: io.grpc.okhttp.AsyncSink;

        i0 = $r0.<io.grpc.okhttp.AsyncSink: int controlFramesInWrite>;

        return i0;
    }

    static volatile java.lang.Object '-$$Nest$fgetlock'(io.grpc.okhttp.AsyncSink)
    {
        io.grpc.okhttp.AsyncSink $r0;
        java.lang.Object r1;

        $r0 := @parameter0: io.grpc.okhttp.AsyncSink;

        r1 = $r0.<io.grpc.okhttp.AsyncSink: java.lang.Object lock>;

        return r1;
    }

    static volatile int '-$$Nest$fgetqueuedControlFrames'(io.grpc.okhttp.AsyncSink)
    {
        io.grpc.okhttp.AsyncSink $r0;
        int i0;

        $r0 := @parameter0: io.grpc.okhttp.AsyncSink;

        i0 = $r0.<io.grpc.okhttp.AsyncSink: int queuedControlFrames>;

        return i0;
    }

    static volatile okio.Sink '-$$Nest$fgetsink'(io.grpc.okhttp.AsyncSink)
    {
        io.grpc.okhttp.AsyncSink $r0;
        okio.Sink r1;

        $r0 := @parameter0: io.grpc.okhttp.AsyncSink;

        r1 = $r0.<io.grpc.okhttp.AsyncSink: okio.Sink sink>;

        return r1;
    }

    static volatile java.net.Socket '-$$Nest$fgetsocket'(io.grpc.okhttp.AsyncSink)
    {
        io.grpc.okhttp.AsyncSink $r0;
        java.net.Socket r1;

        $r0 := @parameter0: io.grpc.okhttp.AsyncSink;

        r1 = $r0.<io.grpc.okhttp.AsyncSink: java.net.Socket socket>;

        return r1;
    }

    static volatile io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler '-$$Nest$fgettransportExceptionHandler'(io.grpc.okhttp.AsyncSink)
    {
        io.grpc.okhttp.AsyncSink $r0;
        io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler r1;

        $r0 := @parameter0: io.grpc.okhttp.AsyncSink;

        r1 = $r0.<io.grpc.okhttp.AsyncSink: io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler transportExceptionHandler>;

        return r1;
    }

    static volatile void '-$$Nest$fputcontrolFramesInWrite'(io.grpc.okhttp.AsyncSink, int)
    {
        io.grpc.okhttp.AsyncSink $r0;
        int $i0;

        $r0 := @parameter0: io.grpc.okhttp.AsyncSink;

        $i0 := @parameter1: int;

        $r0.<io.grpc.okhttp.AsyncSink: int controlFramesInWrite> = $i0;

        return;
    }

    static volatile void '-$$Nest$fputflushEnqueued'(io.grpc.okhttp.AsyncSink, boolean)
    {
        io.grpc.okhttp.AsyncSink $r0;
        boolean $z0;

        $r0 := @parameter0: io.grpc.okhttp.AsyncSink;

        $z0 := @parameter1: boolean;

        $r0.<io.grpc.okhttp.AsyncSink: boolean flushEnqueued> = $z0;

        return;
    }

    static volatile void '-$$Nest$fputqueuedControlFrames'(io.grpc.okhttp.AsyncSink, int)
    {
        io.grpc.okhttp.AsyncSink $r0;
        int $i0;

        $r0 := @parameter0: io.grpc.okhttp.AsyncSink;

        $i0 := @parameter1: int;

        $r0.<io.grpc.okhttp.AsyncSink: int queuedControlFrames> = $i0;

        return;
    }

    static volatile void '-$$Nest$fputwriteEnqueued'(io.grpc.okhttp.AsyncSink, boolean)
    {
        io.grpc.okhttp.AsyncSink $r0;
        boolean $z0;

        $r0 := @parameter0: io.grpc.okhttp.AsyncSink;

        $z0 := @parameter1: boolean;

        $r0.<io.grpc.okhttp.AsyncSink: boolean writeEnqueued> = $z0;

        return;
    }

    private void <init>(io.grpc.internal.SerializingExecutor, io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler, int)
    {
        io.grpc.okhttp.AsyncSink $r0;
        io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler $r1;
        int $i0;
        io.grpc.internal.SerializingExecutor $r2;
        java.lang.Object $r3;
        okio.Buffer $r4;

        $r0 := @this: io.grpc.okhttp.AsyncSink;

        $r2 := @parameter0: io.grpc.internal.SerializingExecutor;

        $r1 := @parameter1: io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler;

        $i0 := @parameter2: int;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        $r0.<io.grpc.okhttp.AsyncSink: java.lang.Object lock> = $r3;

        $r4 = new okio.Buffer;

        specialinvoke $r4.<okio.Buffer: void <init>()>();

        $r0.<io.grpc.okhttp.AsyncSink: okio.Buffer buffer> = $r4;

        $r0.<io.grpc.okhttp.AsyncSink: boolean writeEnqueued> = 0;

        $r0.<io.grpc.okhttp.AsyncSink: boolean flushEnqueued> = 0;

        $r0.<io.grpc.okhttp.AsyncSink: boolean closed> = 0;

        $r3 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r2, "executor");

        $r2 = (io.grpc.internal.SerializingExecutor) $r3;

        $r0.<io.grpc.okhttp.AsyncSink: io.grpc.internal.SerializingExecutor serializingExecutor> = $r2;

        $r3 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r1, "exceptionHandler");

        $r1 = (io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler) $r3;

        $r0.<io.grpc.okhttp.AsyncSink: io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler transportExceptionHandler> = $r1;

        $r0.<io.grpc.okhttp.AsyncSink: int maxQueuedControlFrames> = $i0;

        return;
    }

    static io.grpc.okhttp.AsyncSink sink(io.grpc.internal.SerializingExecutor, io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler, int)
    {
        io.grpc.internal.SerializingExecutor $r0;
        io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler $r1;
        int $i0;
        io.grpc.okhttp.AsyncSink $r2;

        $r0 := @parameter0: io.grpc.internal.SerializingExecutor;

        $r1 := @parameter1: io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler;

        $i0 := @parameter2: int;

        $r2 = new io.grpc.okhttp.AsyncSink;

        specialinvoke $r2.<io.grpc.okhttp.AsyncSink: void <init>(io.grpc.internal.SerializingExecutor,io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler,int)>($r0, $r1, $i0);

        return $r2;
    }

    void becomeConnected(okio.Sink, java.net.Socket)
    {
        io.grpc.okhttp.AsyncSink $r0;
        java.net.Socket $r1;
        okio.Sink $r2, $r3;
        boolean $z0;
        java.lang.Object $r4;

        $r0 := @this: io.grpc.okhttp.AsyncSink;

        $r2 := @parameter0: okio.Sink;

        $r1 := @parameter1: java.net.Socket;

        $r3 = $r0.<io.grpc.okhttp.AsyncSink: okio.Sink sink>;

        if $r3 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "AsyncSink\'s becomeConnected should only be called once.");

        $r4 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r2, "sink");

        $r2 = (okio.Sink) $r4;

        $r0.<io.grpc.okhttp.AsyncSink: okio.Sink sink> = $r2;

        $r4 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r1, "socket");

        $r1 = (java.net.Socket) $r4;

        $r0.<io.grpc.okhttp.AsyncSink: java.net.Socket socket> = $r1;

        return;
    }

    public void close()
    {
        io.grpc.okhttp.AsyncSink $r0;
        io.grpc.okhttp.AsyncSink$3 $r1;
        boolean $z0;
        io.grpc.internal.SerializingExecutor $r2;

        $r0 := @this: io.grpc.okhttp.AsyncSink;

        $z0 = $r0.<io.grpc.okhttp.AsyncSink: boolean closed>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r0.<io.grpc.okhttp.AsyncSink: boolean closed> = 1;

        $r2 = $r0.<io.grpc.okhttp.AsyncSink: io.grpc.internal.SerializingExecutor serializingExecutor>;

        $r1 = new io.grpc.okhttp.AsyncSink$3;

        specialinvoke $r1.<io.grpc.okhttp.AsyncSink$3: void <init>(io.grpc.okhttp.AsyncSink)>($r0);

        virtualinvoke $r2.<io.grpc.internal.SerializingExecutor: void execute(java.lang.Runnable)>($r1);

        return;
    }

    public void flush() throws java.io.IOException
    {
        io.grpc.okhttp.AsyncSink $r0;
        boolean $z0;
        java.lang.Object $r1;
        io.grpc.internal.SerializingExecutor $r2;
        io.grpc.okhttp.AsyncSink$2 $r3, r5;
        java.lang.Throwable $r4;
        java.io.IOException r6;

        $r0 := @this: io.grpc.okhttp.AsyncSink;

        $z0 = $r0.<io.grpc.okhttp.AsyncSink: boolean closed>;

        if $z0 != 0 goto label7;

        staticinvoke <io.perfmark.PerfMark: void startTask(java.lang.String)>("AsyncSink.flush");

        $r1 = $r0.<io.grpc.okhttp.AsyncSink: java.lang.Object lock>;

     label1:
        entermonitor $r1;

     label2:
        $z0 = $r0.<io.grpc.okhttp.AsyncSink: boolean flushEnqueued>;

        if $z0 == 0 goto label3;

        exitmonitor $r1;

        staticinvoke <io.perfmark.PerfMark: void stopTask(java.lang.String)>("AsyncSink.flush");

        return;

     label3:
        $r0.<io.grpc.okhttp.AsyncSink: boolean flushEnqueued> = 1;

        exitmonitor $r1;

        $r2 = $r0.<io.grpc.okhttp.AsyncSink: io.grpc.internal.SerializingExecutor serializingExecutor>;

        r5 = new io.grpc.okhttp.AsyncSink$2;

        $r3 = r5;

     label4:
        specialinvoke r5.<io.grpc.okhttp.AsyncSink$2: void <init>(io.grpc.okhttp.AsyncSink)>($r0);

        virtualinvoke $r2.<io.grpc.internal.SerializingExecutor: void execute(java.lang.Runnable)>($r3);

     label5:
        staticinvoke <io.perfmark.PerfMark: void stopTask(java.lang.String)>("AsyncSink.flush");

        return;

     label6:
        $r4 := @caughtexception;

        staticinvoke <io.perfmark.PerfMark: void stopTask(java.lang.String)>("AsyncSink.flush");

        throw $r4;

     label7:
        r6 = new java.io.IOException;

        specialinvoke r6.<java.io.IOException: void <init>(java.lang.String)>("closed");

        $r4 = (java.lang.Throwable) r6;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    io.grpc.okhttp.internal.framed.FrameWriter limitControlFramesWriter(io.grpc.okhttp.internal.framed.FrameWriter)
    {
        io.grpc.okhttp.AsyncSink $r0;
        io.grpc.okhttp.internal.framed.FrameWriter $r1;
        io.grpc.okhttp.AsyncSink$LimitControlFramesWriter $r2;

        $r0 := @this: io.grpc.okhttp.AsyncSink;

        $r1 := @parameter0: io.grpc.okhttp.internal.framed.FrameWriter;

        $r2 = new io.grpc.okhttp.AsyncSink$LimitControlFramesWriter;

        specialinvoke $r2.<io.grpc.okhttp.AsyncSink$LimitControlFramesWriter: void <init>(io.grpc.okhttp.AsyncSink,io.grpc.okhttp.internal.framed.FrameWriter)>($r0, $r1);

        return $r2;
    }

    public void write(okio.Buffer, long) throws java.io.IOException
    {
        io.grpc.okhttp.AsyncSink $r0;
        long $l0;
        okio.Buffer $r1, $r3;
        boolean $z0, $z1;
        java.lang.Object $r2;
        int $i1, $i2;
        byte $b3;
        java.net.Socket $r4;
        java.lang.Throwable $r5, $r9, $r10;
        io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler $r6;
        io.grpc.internal.SerializingExecutor $r7;
        io.grpc.okhttp.AsyncSink$1 $r8, r11;
        java.io.IOException r12;

        $r0 := @this: io.grpc.okhttp.AsyncSink;

        $r1 := @parameter0: okio.Buffer;

        $l0 := @parameter1: long;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r1, "source");

        $z0 = $r0.<io.grpc.okhttp.AsyncSink: boolean closed>;

        if $z0 != 0 goto label18;

        staticinvoke <io.perfmark.PerfMark: void startTask(java.lang.String)>("AsyncSink.write");

        $r2 = $r0.<io.grpc.okhttp.AsyncSink: java.lang.Object lock>;

     label01:
        entermonitor $r2;

     label02:
        $r3 = $r0.<io.grpc.okhttp.AsyncSink: okio.Buffer buffer>;

        virtualinvoke $r3.<okio.Buffer: void write(okio.Buffer,long)>($r1, $l0);

        $i1 = $r0.<io.grpc.okhttp.AsyncSink: int queuedControlFrames>;

        $i2 = $r0.<io.grpc.okhttp.AsyncSink: int controlFramesInWrite>;

        $i1 = $i1 + $i2;

        $r0.<io.grpc.okhttp.AsyncSink: int queuedControlFrames> = $i1;

        $z0 = 0;

        $r0.<io.grpc.okhttp.AsyncSink: int controlFramesInWrite> = 0;

        $z1 = $r0.<io.grpc.okhttp.AsyncSink: boolean controlFramesExceeded>;

        if $z1 != 0 goto label03;

        $i2 = $r0.<io.grpc.okhttp.AsyncSink: int maxQueuedControlFrames>;

        if $i1 <= $i2 goto label03;

        $r0.<io.grpc.okhttp.AsyncSink: boolean controlFramesExceeded> = 1;

        $z0 = 1;

        goto label05;

     label03:
        $z1 = $r0.<io.grpc.okhttp.AsyncSink: boolean writeEnqueued>;

        if $z1 != 0 goto label14;

        $z1 = $r0.<io.grpc.okhttp.AsyncSink: boolean flushEnqueued>;

        if $z1 != 0 goto label14;

        $r1 = $r0.<io.grpc.okhttp.AsyncSink: okio.Buffer buffer>;

        $l0 = virtualinvoke $r1.<okio.Buffer: long completeSegmentByteCount()>();

        $b3 = $l0 cmp 0L;

        if $b3 > 0 goto label04;

        goto label14;

     label04:
        $r0.<io.grpc.okhttp.AsyncSink: boolean writeEnqueued> = 1;

     label05:
        exitmonitor $r2;

        if $z0 == 0 goto label11;

        $r4 = $r0.<io.grpc.okhttp.AsyncSink: java.net.Socket socket>;

     label06:
        virtualinvoke $r4.<java.net.Socket: void close()>();

     label07:
        goto label10;

     label08:
        $r5 := @caughtexception;

        $r6 = $r0.<io.grpc.okhttp.AsyncSink: io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler transportExceptionHandler>;

     label09:
        interfaceinvoke $r6.<io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler: void onException(java.lang.Throwable)>($r5);

     label10:
        staticinvoke <io.perfmark.PerfMark: void stopTask(java.lang.String)>("AsyncSink.write");

        return;

     label11:
        $r7 = $r0.<io.grpc.okhttp.AsyncSink: io.grpc.internal.SerializingExecutor serializingExecutor>;

        r11 = new io.grpc.okhttp.AsyncSink$1;

        $r8 = r11;

     label12:
        specialinvoke r11.<io.grpc.okhttp.AsyncSink$1: void <init>(io.grpc.okhttp.AsyncSink)>($r0);

        virtualinvoke $r7.<io.grpc.internal.SerializingExecutor: void execute(java.lang.Runnable)>($r8);

     label13:
        staticinvoke <io.perfmark.PerfMark: void stopTask(java.lang.String)>("AsyncSink.write");

        return;

     label14:
        exitmonitor $r2;

        staticinvoke <io.perfmark.PerfMark: void stopTask(java.lang.String)>("AsyncSink.write");

        return;

     label15:
        $r9 := @caughtexception;

        exitmonitor $r2;

     label16:
        throw $r9;

     label17:
        $r10 := @caughtexception;

        staticinvoke <io.perfmark.PerfMark: void stopTask(java.lang.String)>("AsyncSink.write");

        throw $r10;

     label18:
        r12 = new java.io.IOException;

        specialinvoke r12.<java.io.IOException: void <init>(java.lang.String)>("closed");

        $r5 = (java.lang.Throwable) r12;

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label02 to label05 with label15;
        catch java.io.IOException from label06 to label07 with label08;
        catch java.lang.Throwable from label06 to label07 with label17;
        catch java.lang.Throwable from label09 to label10 with label17;
        catch java.lang.Throwable from label12 to label13 with label17;
        catch java.lang.Throwable from label16 to label17 with label17;
    }

io.grpc.okhttp.AsyncSink$1
<io.grpc.okhttp.AsyncSink$1: io.perfmark.Link link>
<io.grpc.okhttp.AsyncSink$1: io.grpc.okhttp.AsyncSink this$0>
    void <init>(io.grpc.okhttp.AsyncSink)
    {
        io.grpc.okhttp.AsyncSink$1 $r0;
        io.perfmark.Link $r1;
        io.grpc.okhttp.AsyncSink $r2;

        $r0 := @this: io.grpc.okhttp.AsyncSink$1;

        $r2 := @parameter0: io.grpc.okhttp.AsyncSink;

        $r0.<io.grpc.okhttp.AsyncSink$1: io.grpc.okhttp.AsyncSink this$0> = $r2;

        specialinvoke $r0.<io.grpc.okhttp.AsyncSink$WriteRunnable: void <init>(io.grpc.okhttp.AsyncSink,io.grpc.okhttp.AsyncSink$WriteRunnable-IA)>($r2, null);

        $r1 = staticinvoke <io.perfmark.PerfMark: io.perfmark.Link linkOut()>();

        $r0.<io.grpc.okhttp.AsyncSink$1: io.perfmark.Link link> = $r1;

        return;
    }

    public void doRun() throws java.io.IOException
    {
        io.grpc.okhttp.AsyncSink$1 $r0;
        io.perfmark.Link $r1;
        okio.Buffer $r2, $r5, $r6;
        io.grpc.okhttp.AsyncSink $r3;
        java.lang.Object $r4;
        long $l0;
        int $i1, $i2;
        okio.Sink $r7;
        java.lang.Throwable $r8, $r9;

        $r0 := @this: io.grpc.okhttp.AsyncSink$1;

        staticinvoke <io.perfmark.PerfMark: void startTask(java.lang.String)>("WriteRunnable.runWrite");

        $r1 = $r0.<io.grpc.okhttp.AsyncSink$1: io.perfmark.Link link>;

        staticinvoke <io.perfmark.PerfMark: void linkIn(io.perfmark.Link)>($r1);

        $r2 = new okio.Buffer;

        specialinvoke $r2.<okio.Buffer: void <init>()>();

        $r3 = $r0.<io.grpc.okhttp.AsyncSink$1: io.grpc.okhttp.AsyncSink this$0>;

        $r4 = staticinvoke <io.grpc.okhttp.AsyncSink: java.lang.Object '-$$Nest$fgetlock'(io.grpc.okhttp.AsyncSink)>($r3);

     label01:
        entermonitor $r4;

     label02:
        $r3 = $r0.<io.grpc.okhttp.AsyncSink$1: io.grpc.okhttp.AsyncSink this$0>;

        $r5 = staticinvoke <io.grpc.okhttp.AsyncSink: okio.Buffer '-$$Nest$fgetbuffer'(io.grpc.okhttp.AsyncSink)>($r3);

        $r3 = $r0.<io.grpc.okhttp.AsyncSink$1: io.grpc.okhttp.AsyncSink this$0>;

        $r6 = staticinvoke <io.grpc.okhttp.AsyncSink: okio.Buffer '-$$Nest$fgetbuffer'(io.grpc.okhttp.AsyncSink)>($r3);

        $l0 = virtualinvoke $r6.<okio.Buffer: long completeSegmentByteCount()>();

        virtualinvoke $r2.<okio.Buffer: void write(okio.Buffer,long)>($r5, $l0);

        $r3 = $r0.<io.grpc.okhttp.AsyncSink$1: io.grpc.okhttp.AsyncSink this$0>;

        staticinvoke <io.grpc.okhttp.AsyncSink: void '-$$Nest$fputwriteEnqueued'(io.grpc.okhttp.AsyncSink,boolean)>($r3, 0);

        $r3 = $r0.<io.grpc.okhttp.AsyncSink$1: io.grpc.okhttp.AsyncSink this$0>;

        $i1 = staticinvoke <io.grpc.okhttp.AsyncSink: int '-$$Nest$fgetqueuedControlFrames'(io.grpc.okhttp.AsyncSink)>($r3);

     label03:
        exitmonitor $r4;

        $r3 = $r0.<io.grpc.okhttp.AsyncSink$1: io.grpc.okhttp.AsyncSink this$0>;

        $r7 = staticinvoke <io.grpc.okhttp.AsyncSink: okio.Sink '-$$Nest$fgetsink'(io.grpc.okhttp.AsyncSink)>($r3);

     label04:
        $l0 = virtualinvoke $r2.<okio.Buffer: long size()>();

        interfaceinvoke $r7.<okio.Sink: void write(okio.Buffer,long)>($r2, $l0);

     label05:
        $r3 = $r0.<io.grpc.okhttp.AsyncSink$1: io.grpc.okhttp.AsyncSink this$0>;

        $r4 = staticinvoke <io.grpc.okhttp.AsyncSink: java.lang.Object '-$$Nest$fgetlock'(io.grpc.okhttp.AsyncSink)>($r3);

     label06:
        entermonitor $r4;

     label07:
        $r3 = $r0.<io.grpc.okhttp.AsyncSink$1: io.grpc.okhttp.AsyncSink this$0>;

        $i2 = staticinvoke <io.grpc.okhttp.AsyncSink: int '-$$Nest$fgetqueuedControlFrames'(io.grpc.okhttp.AsyncSink)>($r3);

        $i1 = $i2 - $i1;

        staticinvoke <io.grpc.okhttp.AsyncSink: void '-$$Nest$fputqueuedControlFrames'(io.grpc.okhttp.AsyncSink,int)>($r3, $i1);

        exitmonitor $r4;

        staticinvoke <io.perfmark.PerfMark: void stopTask(java.lang.String)>("WriteRunnable.runWrite");

        return;

     label08:
        $r8 := @caughtexception;

        exitmonitor $r4;

     label09:
        throw $r8;

     label10:
        $r9 := @caughtexception;

        staticinvoke <io.perfmark.PerfMark: void stopTask(java.lang.String)>("WriteRunnable.runWrite");

        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label09 to label10 with label10;
    }

io.grpc.okhttp.AsyncSink$2
<io.grpc.okhttp.AsyncSink$2: io.perfmark.Link link>
<io.grpc.okhttp.AsyncSink$2: io.grpc.okhttp.AsyncSink this$0>
    void <init>(io.grpc.okhttp.AsyncSink)
    {
        io.grpc.okhttp.AsyncSink$2 $r0;
        io.perfmark.Link $r1;
        io.grpc.okhttp.AsyncSink $r2;

        $r0 := @this: io.grpc.okhttp.AsyncSink$2;

        $r2 := @parameter0: io.grpc.okhttp.AsyncSink;

        $r0.<io.grpc.okhttp.AsyncSink$2: io.grpc.okhttp.AsyncSink this$0> = $r2;

        specialinvoke $r0.<io.grpc.okhttp.AsyncSink$WriteRunnable: void <init>(io.grpc.okhttp.AsyncSink,io.grpc.okhttp.AsyncSink$WriteRunnable-IA)>($r2, null);

        $r1 = staticinvoke <io.perfmark.PerfMark: io.perfmark.Link linkOut()>();

        $r0.<io.grpc.okhttp.AsyncSink$2: io.perfmark.Link link> = $r1;

        return;
    }

    public void doRun() throws java.io.IOException
    {
        io.grpc.okhttp.AsyncSink$2 $r0;
        io.perfmark.Link $r1;
        okio.Buffer $r2, $r5, $r6;
        io.grpc.okhttp.AsyncSink $r3;
        java.lang.Object $r4;
        long $l0;
        okio.Sink $r7;
        java.lang.Throwable $r8, $r9;

        $r0 := @this: io.grpc.okhttp.AsyncSink$2;

        staticinvoke <io.perfmark.PerfMark: void startTask(java.lang.String)>("WriteRunnable.runFlush");

        $r1 = $r0.<io.grpc.okhttp.AsyncSink$2: io.perfmark.Link link>;

        staticinvoke <io.perfmark.PerfMark: void linkIn(io.perfmark.Link)>($r1);

        $r2 = new okio.Buffer;

        specialinvoke $r2.<okio.Buffer: void <init>()>();

        $r3 = $r0.<io.grpc.okhttp.AsyncSink$2: io.grpc.okhttp.AsyncSink this$0>;

        $r4 = staticinvoke <io.grpc.okhttp.AsyncSink: java.lang.Object '-$$Nest$fgetlock'(io.grpc.okhttp.AsyncSink)>($r3);

     label01:
        entermonitor $r4;

     label02:
        $r3 = $r0.<io.grpc.okhttp.AsyncSink$2: io.grpc.okhttp.AsyncSink this$0>;

        $r5 = staticinvoke <io.grpc.okhttp.AsyncSink: okio.Buffer '-$$Nest$fgetbuffer'(io.grpc.okhttp.AsyncSink)>($r3);

        $r3 = $r0.<io.grpc.okhttp.AsyncSink$2: io.grpc.okhttp.AsyncSink this$0>;

        $r6 = staticinvoke <io.grpc.okhttp.AsyncSink: okio.Buffer '-$$Nest$fgetbuffer'(io.grpc.okhttp.AsyncSink)>($r3);

        $l0 = virtualinvoke $r6.<okio.Buffer: long size()>();

        virtualinvoke $r2.<okio.Buffer: void write(okio.Buffer,long)>($r5, $l0);

        $r3 = $r0.<io.grpc.okhttp.AsyncSink$2: io.grpc.okhttp.AsyncSink this$0>;

        staticinvoke <io.grpc.okhttp.AsyncSink: void '-$$Nest$fputflushEnqueued'(io.grpc.okhttp.AsyncSink,boolean)>($r3, 0);

     label03:
        exitmonitor $r4;

        $r3 = $r0.<io.grpc.okhttp.AsyncSink$2: io.grpc.okhttp.AsyncSink this$0>;

        $r7 = staticinvoke <io.grpc.okhttp.AsyncSink: okio.Sink '-$$Nest$fgetsink'(io.grpc.okhttp.AsyncSink)>($r3);

     label04:
        $l0 = virtualinvoke $r2.<okio.Buffer: long size()>();

        interfaceinvoke $r7.<okio.Sink: void write(okio.Buffer,long)>($r2, $l0);

     label05:
        $r3 = $r0.<io.grpc.okhttp.AsyncSink$2: io.grpc.okhttp.AsyncSink this$0>;

        $r7 = staticinvoke <io.grpc.okhttp.AsyncSink: okio.Sink '-$$Nest$fgetsink'(io.grpc.okhttp.AsyncSink)>($r3);

     label06:
        interfaceinvoke $r7.<okio.Sink: void flush()>();

     label07:
        staticinvoke <io.perfmark.PerfMark: void stopTask(java.lang.String)>("WriteRunnable.runFlush");

        return;

     label08:
        $r8 := @caughtexception;

        exitmonitor $r4;

     label09:
        throw $r8;

     label10:
        $r9 := @caughtexception;

        staticinvoke <io.perfmark.PerfMark: void stopTask(java.lang.String)>("WriteRunnable.runFlush");

        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label09 to label10 with label10;
    }

io.grpc.okhttp.AsyncSink$3
<io.grpc.okhttp.AsyncSink$3: io.grpc.okhttp.AsyncSink this$0>
    void <init>(io.grpc.okhttp.AsyncSink)
    {
        io.grpc.okhttp.AsyncSink$3 $r0;
        io.grpc.okhttp.AsyncSink $r1;

        $r0 := @this: io.grpc.okhttp.AsyncSink$3;

        $r1 := @parameter0: io.grpc.okhttp.AsyncSink;

        $r0.<io.grpc.okhttp.AsyncSink$3: io.grpc.okhttp.AsyncSink this$0> = $r1;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        io.grpc.okhttp.AsyncSink$3 $r0;
        byte $b0;
        io.grpc.okhttp.AsyncSink $r1;
        okio.Sink $r2;
        okio.Buffer $r3, $r4;
        long $l1;
        java.lang.Throwable $r5, $r7, $r9;
        io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler $r6;
        java.net.Socket $r8;

        $r0 := @this: io.grpc.okhttp.AsyncSink$3;

        $r1 = $r0.<io.grpc.okhttp.AsyncSink$3: io.grpc.okhttp.AsyncSink this$0>;

        $r2 = staticinvoke <io.grpc.okhttp.AsyncSink: okio.Sink '-$$Nest$fgetsink'(io.grpc.okhttp.AsyncSink)>($r1);

        if $r2 == null goto label06;

        $r1 = $r0.<io.grpc.okhttp.AsyncSink$3: io.grpc.okhttp.AsyncSink this$0>;

        $r3 = staticinvoke <io.grpc.okhttp.AsyncSink: okio.Buffer '-$$Nest$fgetbuffer'(io.grpc.okhttp.AsyncSink)>($r1);

     label01:
        $l1 = virtualinvoke $r3.<okio.Buffer: long size()>();

     label02:
        $b0 = $l1 cmp 0L;

        if $b0 <= 0 goto label06;

        $r1 = $r0.<io.grpc.okhttp.AsyncSink$3: io.grpc.okhttp.AsyncSink this$0>;

        $r2 = staticinvoke <io.grpc.okhttp.AsyncSink: okio.Sink '-$$Nest$fgetsink'(io.grpc.okhttp.AsyncSink)>($r1);

        $r1 = $r0.<io.grpc.okhttp.AsyncSink$3: io.grpc.okhttp.AsyncSink this$0>;

        $r3 = staticinvoke <io.grpc.okhttp.AsyncSink: okio.Buffer '-$$Nest$fgetbuffer'(io.grpc.okhttp.AsyncSink)>($r1);

        $r1 = $r0.<io.grpc.okhttp.AsyncSink$3: io.grpc.okhttp.AsyncSink this$0>;

        $r4 = staticinvoke <io.grpc.okhttp.AsyncSink: okio.Buffer '-$$Nest$fgetbuffer'(io.grpc.okhttp.AsyncSink)>($r1);

     label03:
        $l1 = virtualinvoke $r4.<okio.Buffer: long size()>();

        interfaceinvoke $r2.<okio.Sink: void write(okio.Buffer,long)>($r3, $l1);

     label04:
        goto label06;

     label05:
        $r5 := @caughtexception;

        $r1 = $r0.<io.grpc.okhttp.AsyncSink$3: io.grpc.okhttp.AsyncSink this$0>;

        $r6 = staticinvoke <io.grpc.okhttp.AsyncSink: io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler '-$$Nest$fgettransportExceptionHandler'(io.grpc.okhttp.AsyncSink)>($r1);

        interfaceinvoke $r6.<io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler: void onException(java.lang.Throwable)>($r5);

     label06:
        $r1 = $r0.<io.grpc.okhttp.AsyncSink$3: io.grpc.okhttp.AsyncSink this$0>;

        $r3 = staticinvoke <io.grpc.okhttp.AsyncSink: okio.Buffer '-$$Nest$fgetbuffer'(io.grpc.okhttp.AsyncSink)>($r1);

        virtualinvoke $r3.<okio.Buffer: void close()>();

        $r1 = $r0.<io.grpc.okhttp.AsyncSink$3: io.grpc.okhttp.AsyncSink this$0>;

        $r2 = staticinvoke <io.grpc.okhttp.AsyncSink: okio.Sink '-$$Nest$fgetsink'(io.grpc.okhttp.AsyncSink)>($r1);

        if $r2 == null goto label10;

        $r1 = $r0.<io.grpc.okhttp.AsyncSink$3: io.grpc.okhttp.AsyncSink this$0>;

        $r2 = staticinvoke <io.grpc.okhttp.AsyncSink: okio.Sink '-$$Nest$fgetsink'(io.grpc.okhttp.AsyncSink)>($r1);

     label07:
        interfaceinvoke $r2.<okio.Sink: void close()>();

     label08:
        goto label10;

     label09:
        $r7 := @caughtexception;

        $r1 = $r0.<io.grpc.okhttp.AsyncSink$3: io.grpc.okhttp.AsyncSink this$0>;

        $r6 = staticinvoke <io.grpc.okhttp.AsyncSink: io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler '-$$Nest$fgettransportExceptionHandler'(io.grpc.okhttp.AsyncSink)>($r1);

        interfaceinvoke $r6.<io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler: void onException(java.lang.Throwable)>($r7);

     label10:
        $r1 = $r0.<io.grpc.okhttp.AsyncSink$3: io.grpc.okhttp.AsyncSink this$0>;

        $r8 = staticinvoke <io.grpc.okhttp.AsyncSink: java.net.Socket '-$$Nest$fgetsocket'(io.grpc.okhttp.AsyncSink)>($r1);

        if $r8 == null goto label14;

        $r1 = $r0.<io.grpc.okhttp.AsyncSink$3: io.grpc.okhttp.AsyncSink this$0>;

        $r8 = staticinvoke <io.grpc.okhttp.AsyncSink: java.net.Socket '-$$Nest$fgetsocket'(io.grpc.okhttp.AsyncSink)>($r1);

     label11:
        virtualinvoke $r8.<java.net.Socket: void close()>();

     label12:
        return;

     label13:
        $r9 := @caughtexception;

        $r1 = $r0.<io.grpc.okhttp.AsyncSink$3: io.grpc.okhttp.AsyncSink this$0>;

        $r6 = staticinvoke <io.grpc.okhttp.AsyncSink: io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler '-$$Nest$fgettransportExceptionHandler'(io.grpc.okhttp.AsyncSink)>($r1);

        interfaceinvoke $r6.<io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler: void onException(java.lang.Throwable)>($r9);

     label14:
        return;

        catch java.io.IOException from label01 to label02 with label05;
        catch java.io.IOException from label03 to label04 with label05;
        catch java.io.IOException from label07 to label08 with label09;
        catch java.io.IOException from label11 to label12 with label13;
    }

io.grpc.okhttp.AsyncSink$LimitControlFramesWriter
<io.grpc.okhttp.AsyncSink$LimitControlFramesWriter: io.grpc.okhttp.AsyncSink this$0>
    public void <init>(io.grpc.okhttp.AsyncSink, io.grpc.okhttp.internal.framed.FrameWriter)
    {
        io.grpc.okhttp.AsyncSink$LimitControlFramesWriter $r0;
        io.grpc.okhttp.AsyncSink $r1;
        io.grpc.okhttp.internal.framed.FrameWriter $r2;

        $r0 := @this: io.grpc.okhttp.AsyncSink$LimitControlFramesWriter;

        $r1 := @parameter0: io.grpc.okhttp.AsyncSink;

        $r2 := @parameter1: io.grpc.okhttp.internal.framed.FrameWriter;

        $r0.<io.grpc.okhttp.AsyncSink$LimitControlFramesWriter: io.grpc.okhttp.AsyncSink this$0> = $r1;

        specialinvoke $r0.<io.grpc.okhttp.ForwardingFrameWriter: void <init>(io.grpc.okhttp.internal.framed.FrameWriter)>($r2);

        return;
    }

    public void ackSettings(io.grpc.okhttp.internal.framed.Settings) throws java.io.IOException
    {
        io.grpc.okhttp.AsyncSink$LimitControlFramesWriter $r0;
        io.grpc.okhttp.internal.framed.Settings $r1;
        io.grpc.okhttp.AsyncSink $r2;
        int $i0;

        $r0 := @this: io.grpc.okhttp.AsyncSink$LimitControlFramesWriter;

        $r1 := @parameter0: io.grpc.okhttp.internal.framed.Settings;

        $r2 = $r0.<io.grpc.okhttp.AsyncSink$LimitControlFramesWriter: io.grpc.okhttp.AsyncSink this$0>;

        $i0 = staticinvoke <io.grpc.okhttp.AsyncSink: int '-$$Nest$fgetcontrolFramesInWrite'(io.grpc.okhttp.AsyncSink)>($r2);

        $i0 = $i0 + 1;

        staticinvoke <io.grpc.okhttp.AsyncSink: void '-$$Nest$fputcontrolFramesInWrite'(io.grpc.okhttp.AsyncSink,int)>($r2, $i0);

        specialinvoke $r0.<io.grpc.okhttp.ForwardingFrameWriter: void ackSettings(io.grpc.okhttp.internal.framed.Settings)>($r1);

        return;
    }

    public void ping(boolean, int, int) throws java.io.IOException
    {
        io.grpc.okhttp.AsyncSink$LimitControlFramesWriter $r0;
        boolean $z0;
        int $i0, $i1, $i2;
        io.grpc.okhttp.AsyncSink $r1;

        $r0 := @this: io.grpc.okhttp.AsyncSink$LimitControlFramesWriter;

        $z0 := @parameter0: boolean;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $z0 == 0 goto label1;

        $r1 = $r0.<io.grpc.okhttp.AsyncSink$LimitControlFramesWriter: io.grpc.okhttp.AsyncSink this$0>;

        $i2 = staticinvoke <io.grpc.okhttp.AsyncSink: int '-$$Nest$fgetcontrolFramesInWrite'(io.grpc.okhttp.AsyncSink)>($r1);

        $i2 = $i2 + 1;

        staticinvoke <io.grpc.okhttp.AsyncSink: void '-$$Nest$fputcontrolFramesInWrite'(io.grpc.okhttp.AsyncSink,int)>($r1, $i2);

     label1:
        specialinvoke $r0.<io.grpc.okhttp.ForwardingFrameWriter: void ping(boolean,int,int)>($z0, $i0, $i1);

        return;
    }

    public void rstStream(int, io.grpc.okhttp.internal.framed.ErrorCode) throws java.io.IOException
    {
        io.grpc.okhttp.AsyncSink$LimitControlFramesWriter $r0;
        int $i0, $i1;
        io.grpc.okhttp.internal.framed.ErrorCode $r1;
        io.grpc.okhttp.AsyncSink $r2;

        $r0 := @this: io.grpc.okhttp.AsyncSink$LimitControlFramesWriter;

        $i0 := @parameter0: int;

        $r1 := @parameter1: io.grpc.okhttp.internal.framed.ErrorCode;

        $r2 = $r0.<io.grpc.okhttp.AsyncSink$LimitControlFramesWriter: io.grpc.okhttp.AsyncSink this$0>;

        $i1 = staticinvoke <io.grpc.okhttp.AsyncSink: int '-$$Nest$fgetcontrolFramesInWrite'(io.grpc.okhttp.AsyncSink)>($r2);

        $i1 = $i1 + 1;

        staticinvoke <io.grpc.okhttp.AsyncSink: void '-$$Nest$fputcontrolFramesInWrite'(io.grpc.okhttp.AsyncSink,int)>($r2, $i1);

        specialinvoke $r0.<io.grpc.okhttp.ForwardingFrameWriter: void rstStream(int,io.grpc.okhttp.internal.framed.ErrorCode)>($i0, $r1);

        return;
    }

io.grpc.okhttp.AsyncSink$WriteRunnable-IA
io.grpc.okhttp.AsyncSink$WriteRunnable
<io.grpc.okhttp.AsyncSink$WriteRunnable: io.grpc.okhttp.AsyncSink this$0>
    private void <init>(io.grpc.okhttp.AsyncSink)
    {
        io.grpc.okhttp.AsyncSink$WriteRunnable $r0;
        io.grpc.okhttp.AsyncSink $r1;

        $r0 := @this: io.grpc.okhttp.AsyncSink$WriteRunnable;

        $r1 := @parameter0: io.grpc.okhttp.AsyncSink;

        $r0.<io.grpc.okhttp.AsyncSink$WriteRunnable: io.grpc.okhttp.AsyncSink this$0> = $r1;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    void <init>(io.grpc.okhttp.AsyncSink, io.grpc.okhttp.AsyncSink$WriteRunnable-IA)
    {
        io.grpc.okhttp.AsyncSink$WriteRunnable $r0;
        io.grpc.okhttp.AsyncSink $r1;
        io.grpc.okhttp.AsyncSink$WriteRunnable-IA $r2;

        $r0 := @this: io.grpc.okhttp.AsyncSink$WriteRunnable;

        $r1 := @parameter0: io.grpc.okhttp.AsyncSink;

        $r2 := @parameter1: io.grpc.okhttp.AsyncSink$WriteRunnable-IA;

        specialinvoke $r0.<io.grpc.okhttp.AsyncSink$WriteRunnable: void <init>(io.grpc.okhttp.AsyncSink)>($r1);

        return;
    }

<io.grpc.okhttp.AsyncSink$WriteRunnable: void doRun()>
    public final void run()
    {
        io.grpc.okhttp.AsyncSink$WriteRunnable $r0;
        io.grpc.okhttp.AsyncSink $r1;
        okio.Sink $r2;
        java.lang.Throwable $r3;
        io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler $r4;
        java.io.IOException r5;

        $r0 := @this: io.grpc.okhttp.AsyncSink$WriteRunnable;

        $r1 = $r0.<io.grpc.okhttp.AsyncSink$WriteRunnable: io.grpc.okhttp.AsyncSink this$0>;

        $r2 = staticinvoke <io.grpc.okhttp.AsyncSink: okio.Sink '-$$Nest$fgetsink'(io.grpc.okhttp.AsyncSink)>($r1);

        if $r2 == null goto label3;

     label1:
        virtualinvoke $r0.<io.grpc.okhttp.AsyncSink$WriteRunnable: void doRun()>();

     label2:
        return;

     label3:
        r5 = new java.io.IOException;

     label4:
        specialinvoke r5.<java.io.IOException: void <init>(java.lang.String)>("Unable to perform write due to unavailable sink.");

     label5:
        $r3 = (java.lang.Throwable) r5;

     label6:
        throw $r3;

     label7:
        $r3 := @caughtexception;

        $r1 = $r0.<io.grpc.okhttp.AsyncSink$WriteRunnable: io.grpc.okhttp.AsyncSink this$0>;

        $r4 = staticinvoke <io.grpc.okhttp.AsyncSink: io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler '-$$Nest$fgettransportExceptionHandler'(io.grpc.okhttp.AsyncSink)>($r1);

        interfaceinvoke $r4.<io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler: void onException(java.lang.Throwable)>($r3);

        return;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Exception from label4 to label5 with label7;
        catch java.lang.Exception from label6 to label7 with label7;
    }

