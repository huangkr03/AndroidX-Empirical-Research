android.databinding.annotationprocessor.ProcessMethodAdapters
<android.databinding.annotationprocessor.ProcessMethodAdapters: java.lang.String INVERSE_BINDING_EVENT_ATTR_SUFFIX>
    public void <init>()
    {
        android.databinding.annotationprocessor.ProcessMethodAdapters r0;

        r0 := @this: android.databinding.annotationprocessor.ProcessMethodAdapters;

        specialinvoke r0.<android.databinding.annotationprocessor.ProcessDataBinding$ProcessingStep: void <init>()>();

        return;
    }

    public boolean onHandleStep(javax.'annotation'.processing.RoundEnvironment, javax.'annotation'.processing.ProcessingEnvironment, android.databinding.tool.DataBindingCompilerArgs)
    {
        android.databinding.annotationprocessor.ProcessMethodAdapters r0;
        javax.'annotation'.processing.RoundEnvironment r1;
        javax.'annotation'.processing.ProcessingEnvironment r2;
        android.databinding.tool.DataBindingCompilerArgs r3;
        android.databinding.tool.reflection.ModelAnalyzer r4;
        android.databinding.tool.store.SetterStore r5;
        java.lang.Object[] $r6, $r7, $r11;
        java.lang.String $r8;
        java.lang.Throwable $r9, $r10, r12, r13;

        r0 := @this: android.databinding.annotationprocessor.ProcessMethodAdapters;

        r1 := @parameter0: javax.'annotation'.processing.RoundEnvironment;

        r2 := @parameter1: javax.'annotation'.processing.ProcessingEnvironment;

        r3 := @parameter2: android.databinding.tool.DataBindingCompilerArgs;

        $r6 = newarray (java.lang.Object)[0];

        staticinvoke <android.databinding.tool.util.L: void d(java.lang.String,java.lang.Object[])>("processing adapters", $r6);

        r4 = staticinvoke <android.databinding.tool.reflection.ModelAnalyzer: android.databinding.tool.reflection.ModelAnalyzer getInstance()>();

        $r7 = newarray (java.lang.Object)[0];

        staticinvoke <android.databinding.tool.util.Preconditions: void checkNotNull(java.lang.Object,java.lang.String,java.lang.Object[])>(r4, "Model analyzer should be initialized first", $r7);

        r5 = staticinvoke <android.databinding.tool.store.SetterStore: android.databinding.tool.store.SetterStore get()>();

        specialinvoke r0.<android.databinding.annotationprocessor.ProcessMethodAdapters: void clearIncrementalClasses(javax.'annotation'.processing.RoundEnvironment,android.databinding.tool.store.SetterStore)>(r1, r5);

        specialinvoke r0.<android.databinding.annotationprocessor.ProcessMethodAdapters: void addBindingAdapters(javax.'annotation'.processing.RoundEnvironment,javax.'annotation'.processing.ProcessingEnvironment,android.databinding.tool.store.SetterStore)>(r1, r2, r5);

        specialinvoke r0.<android.databinding.annotationprocessor.ProcessMethodAdapters: void addRenamed(javax.'annotation'.processing.RoundEnvironment,android.databinding.tool.store.SetterStore)>(r1, r5);

        specialinvoke r0.<android.databinding.annotationprocessor.ProcessMethodAdapters: void addConversions(javax.'annotation'.processing.RoundEnvironment,android.databinding.tool.store.SetterStore)>(r1, r5);

        specialinvoke r0.<android.databinding.annotationprocessor.ProcessMethodAdapters: void addUntaggable(javax.'annotation'.processing.RoundEnvironment,android.databinding.tool.store.SetterStore)>(r1, r5);

        specialinvoke r0.<android.databinding.annotationprocessor.ProcessMethodAdapters: void addInverseAdapters(javax.'annotation'.processing.RoundEnvironment,javax.'annotation'.processing.ProcessingEnvironment,android.databinding.tool.store.SetterStore)>(r1, r2, r5);

        specialinvoke r0.<android.databinding.annotationprocessor.ProcessMethodAdapters: void addInverseBindingMethods(javax.'annotation'.processing.RoundEnvironment,android.databinding.tool.store.SetterStore)>(r1, r5);

        specialinvoke r0.<android.databinding.annotationprocessor.ProcessMethodAdapters: void addInverseMethods(javax.'annotation'.processing.RoundEnvironment,javax.'annotation'.processing.ProcessingEnvironment,android.databinding.tool.store.SetterStore)>(r1, r2, r5);

     label1:
        $r8 = virtualinvoke r3.<android.databinding.tool.DataBindingCompilerArgs: java.lang.String getModulePackage()>();

        virtualinvoke r5.<android.databinding.tool.store.SetterStore: void write(java.lang.String,javax.'annotation'.processing.ProcessingEnvironment)>($r8, r2);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        r12 = $r10;

        $r11 = newarray (java.lang.Object)[0];

        staticinvoke <android.databinding.tool.util.L: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r12, "Could not write BindingAdapter intermediate file.", $r11);

     label4:
        goto label6;

     label5:
        $r9 := @caughtexception;

        r13 = $r9;

     label6:
        return 1;

        catch java.io.IOException from label1 to label2 with label3;
        catch android.databinding.tool.util.LoggedErrorException from label1 to label4 with label5;
    }

    public void onProcessingOver(javax.'annotation'.processing.RoundEnvironment, javax.'annotation'.processing.ProcessingEnvironment, android.databinding.tool.DataBindingCompilerArgs)
    {
        android.databinding.annotationprocessor.ProcessMethodAdapters r0;
        javax.'annotation'.processing.RoundEnvironment r1;
        javax.'annotation'.processing.ProcessingEnvironment r2;
        android.databinding.tool.DataBindingCompilerArgs r3;

        r0 := @this: android.databinding.annotationprocessor.ProcessMethodAdapters;

        r1 := @parameter0: javax.'annotation'.processing.RoundEnvironment;

        r2 := @parameter1: javax.'annotation'.processing.ProcessingEnvironment;

        r3 := @parameter2: android.databinding.tool.DataBindingCompilerArgs;

        return;
    }

    private void addBindingAdapters(javax.'annotation'.processing.RoundEnvironment, javax.'annotation'.processing.ProcessingEnvironment, android.databinding.tool.store.SetterStore)
    {
        android.databinding.annotationprocessor.ProcessMethodAdapters r0;
        javax.'annotation'.processing.RoundEnvironment r1;
        javax.'annotation'.processing.ProcessingEnvironment r2;
        android.databinding.tool.store.SetterStore r3;
        android.databinding.tool.LibTypes r4;
        java.lang.Class r5;
        java.util.Iterator r6;
        javax.lang.model.element.Element r7;
        javax.lang.model.element.ExecutableElement r8;
        java.util.List r9, $r11;
        boolean z0, $z1, $z2, $z3, $z4, z5;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i14;
        android.databinding.tool.reflection.ModelAnalyzer $r10;
        java.lang.Object $r12, $r28, $r31;
        javax.lang.model.element.ElementKind $r13, $r14;
        java.lang.Object[] $r15, $r23, $r34, $r37, $r40;
        java.util.Set $r16;
        javax.lang.model.element.Modifier $r17;
        java.lang.String[] $r18, $r19, $r20, $r21, $r22;
        java.lang.Integer $r24, $r25, $r26, $r27, $r35, $r36;
        javax.lang.model.element.VariableElement $r29, $r32;
        javax.lang.model.type.TypeMirror $r30, $r33;
        java.lang.Throwable $r38, $r39, r44, r45;
        android.databinding.tool.BindingAdapterCompat r41;
        byte $b13;
        javax.lang.model.util.Types r42;
        java.lang.String r43;

        r0 := @this: android.databinding.annotationprocessor.ProcessMethodAdapters;

        r1 := @parameter0: javax.'annotation'.processing.RoundEnvironment;

        r2 := @parameter1: javax.'annotation'.processing.ProcessingEnvironment;

        r3 := @parameter2: android.databinding.tool.store.SetterStore;

        $r10 = staticinvoke <android.databinding.tool.reflection.ModelAnalyzer: android.databinding.tool.reflection.ModelAnalyzer getInstance()>();

        r4 = $r10.<android.databinding.tool.reflection.ModelAnalyzer: android.databinding.tool.LibTypes libTypes>;

        r5 = virtualinvoke r4.<android.databinding.tool.LibTypes: java.lang.Class getBindingAdapterClass()>();

        $r11 = staticinvoke <android.databinding.annotationprocessor.AnnotationUtil: java.util.List getElementsAnnotatedWith(javax.'annotation'.processing.RoundEnvironment,java.lang.Class)>(r1, r5);

        r6 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z4 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label25;

        $r12 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (javax.lang.model.element.Element) $r12;

     label02:
        $r13 = interfaceinvoke r7.<javax.lang.model.element.Element: javax.lang.model.element.ElementKind getKind()>();

        $r14 = <javax.lang.model.element.ElementKind: javax.lang.model.element.ElementKind METHOD>;

        if $r13 != $r14 goto label03;

        $r16 = interfaceinvoke r7.<javax.lang.model.element.Element: java.util.Set getModifiers()>();

        $r17 = <javax.lang.model.element.Modifier: javax.lang.model.element.Modifier PUBLIC>;

        $z1 = interfaceinvoke $r16.<java.util.Set: boolean contains(java.lang.Object)>($r17);

        if $z1 != 0 goto label05;

     label03:
        $r15 = newarray (java.lang.Object)[1];

        $r15[0] = r7;

        staticinvoke <android.databinding.tool.util.L: void e(javax.lang.model.element.Element,java.lang.String,java.lang.Object[])>(r7, "@BindingAdapter on invalid element: %s", $r15);

     label04:
        goto label01;

     label05:
        r41 = staticinvoke <android.databinding.tool.BindingAdapterCompat: android.databinding.tool.BindingAdapterCompat create(javax.lang.model.element.Element)>(r7);

        r8 = (javax.lang.model.element.ExecutableElement) r7;

        r9 = interfaceinvoke r8.<javax.lang.model.element.ExecutableElement: java.util.List getParameters()>();

        $r18 = virtualinvoke r41.<android.databinding.tool.BindingAdapterCompat: java.lang.String[] getAttributes()>();

        $i3 = lengthof $r18;

        if $i3 != 0 goto label07;

        $r37 = newarray (java.lang.Object)[1];

        $r37[0] = r7;

        staticinvoke <android.databinding.tool.util.L: void e(javax.lang.model.element.Element,java.lang.String,java.lang.Object[])>(r7, "@BindingAdapter requires at least one attribute. %s", $r37);

     label06:
        goto label01;

     label07:
        z0 = staticinvoke <android.databinding.annotationprocessor.ProcessMethodAdapters: boolean takesComponent(javax.lang.model.element.ExecutableElement,javax.'annotation'.processing.ProcessingEnvironment)>(r8, r2);

        if z0 == 0 goto label08;

        $b13 = 1;

        goto label09;

     label08:
        $b13 = 0;

     label09:
        i0 = 1 + $b13;

        $r19 = virtualinvoke r41.<android.databinding.tool.BindingAdapterCompat: java.lang.String[] getAttributes()>();

        i1 = lengthof $r19;

        $i4 = interfaceinvoke r9.<java.util.List: int size()>();

        i2 = $i4 - i0;

        $i5 = 2 * i1;

        if i2 != $i5 goto label15;

        r42 = interfaceinvoke r2.<javax.'annotation'.processing.ProcessingEnvironment: javax.lang.model.util.Types getTypeUtils()>();

        z5 = 0;

        i14 = i0;

     label10:
        $i7 = i1 + i0;

        if i14 >= $i7 goto label12;

        $r28 = interfaceinvoke r9.<java.util.List: java.lang.Object get(int)>(i14);

        $r29 = (javax.lang.model.element.VariableElement) $r28;

        $r30 = interfaceinvoke $r29.<javax.lang.model.element.VariableElement: javax.lang.model.type.TypeMirror asType()>();

        $i8 = i14 + i1;

        $r31 = interfaceinvoke r9.<java.util.List: java.lang.Object get(int)>($i8);

        $r32 = (javax.lang.model.element.VariableElement) $r31;

        $r33 = interfaceinvoke $r32.<javax.lang.model.element.VariableElement: javax.lang.model.type.TypeMirror asType()>();

        $z3 = interfaceinvoke r42.<javax.lang.model.util.Types: boolean isSameType(javax.lang.model.type.TypeMirror,javax.lang.model.type.TypeMirror)>($r30, $r33);

        if $z3 != 0 goto label11;

        $r34 = newarray (java.lang.Object)[3];

        $r34[0] = r8;

        $i9 = i14 + 1;

        $r35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        $r34[1] = $r35;

        $i10 = i14 + i1;

        $i11 = $i10 + 1;

        $r36 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i11);

        $r34[2] = $r36;

        staticinvoke <android.databinding.tool.util.L: void e(javax.lang.model.element.Element,java.lang.String,java.lang.Object[])>(r8, "BindingAdapter %s: old values should be followed by new values. Parameter %d must be the same type as parameter %d.", $r34);

        z5 = 1;

        goto label12;

     label11:
        i14 = i14 + 1;

        goto label10;

     label12:
        if z5 == 0 goto label14;

     label13:
        goto label01;

     label14:
        goto label17;

     label15:
        if i2 == i1 goto label17;

        $r23 = newarray (java.lang.Object)[5];

        $r23[0] = r8;

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r23[1] = $r24;

        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r23[2] = $r25;

        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r23[3] = $r26;

        $i6 = i1 * 2;

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        $r23[4] = $r27;

        staticinvoke <android.databinding.tool.util.L: void e(javax.lang.model.element.Element,java.lang.String,java.lang.Object[])>(r7, "@BindingAdapter %s has %d attributes and %d value parameters. There should be %d or %d value parameters.", $r23);

     label16:
        goto label01;

     label17:
        $r20 = virtualinvoke r41.<android.databinding.tool.BindingAdapterCompat: java.lang.String[] getAttributes()>();

        staticinvoke <android.databinding.annotationprocessor.ProcessMethodAdapters: void warnAttributeNamespaces(javax.lang.model.element.Element,java.lang.String[])>(r7, $r20);

     label18:
        if i1 != 1 goto label19;

        $r22 = virtualinvoke r41.<android.databinding.tool.BindingAdapterCompat: java.lang.String[] getAttributes()>();

        r43 = $r22[0];

        virtualinvoke r3.<android.databinding.tool.store.SetterStore: void addBindingAdapter(javax.'annotation'.processing.ProcessingEnvironment,java.lang.String,javax.lang.model.element.ExecutableElement,boolean)>(r2, r43, r8, z0);

        goto label20;

     label19:
        $r21 = virtualinvoke r41.<android.databinding.tool.BindingAdapterCompat: java.lang.String[] getAttributes()>();

        $z2 = virtualinvoke r41.<android.databinding.tool.BindingAdapterCompat: boolean getRequireAll()>();

        virtualinvoke r3.<android.databinding.tool.store.SetterStore: void addBindingAdapter(javax.'annotation'.processing.ProcessingEnvironment,java.lang.String[],javax.lang.model.element.ExecutableElement,boolean,boolean)>(r2, $r21, r8, z0, $z2);

     label20:
        goto label22;

     label21:
        $r39 := @caughtexception;

        r44 = $r39;

        $r40 = newarray (java.lang.Object)[1];

        $r40[0] = r7;

        staticinvoke <android.databinding.tool.util.L: void e(javax.lang.model.element.Element,java.lang.String,java.lang.Object[])>(r7, "@BindingAdapter for duplicate View and parameter type: %s", $r40);

     label22:
        goto label24;

     label23:
        $r38 := @caughtexception;

        r45 = $r38;

     label24:
        goto label01;

     label25:
        return;

        catch java.lang.IllegalArgumentException from label18 to label20 with label21;
        catch android.databinding.tool.util.LoggedErrorException from label02 to label04 with label23;
        catch android.databinding.tool.util.LoggedErrorException from label05 to label06 with label23;
        catch android.databinding.tool.util.LoggedErrorException from label07 to label13 with label23;
        catch android.databinding.tool.util.LoggedErrorException from label14 to label16 with label23;
        catch android.databinding.tool.util.LoggedErrorException from label17 to label22 with label23;
    }

    private static boolean takesComponent(javax.lang.model.element.ExecutableElement, javax.'annotation'.processing.ProcessingEnvironment)
    {
        javax.lang.model.element.ExecutableElement r0;
        javax.'annotation'.processing.ProcessingEnvironment r1;
        java.util.List r2;
        javax.lang.model.util.Elements r3;
        javax.lang.model.type.TypeMirror r4, r5, r20, r21;
        javax.lang.model.util.Types r6;
        android.databinding.tool.reflection.ModelAnalyzer r7;
        javax.lang.model.element.TypeElement $r8, $r18;
        int $i0, $i1;
        java.lang.Object $r9, $r13;
        javax.lang.model.element.VariableElement $r10, $r14;
        javax.lang.model.type.TypeKind $r11, $r12;
        boolean $z0, $z1, $z2;
        java.lang.Object[] $r15, $r19;
        android.databinding.tool.LibTypes $r16;
        java.lang.String $r17;

        r0 := @parameter0: javax.lang.model.element.ExecutableElement;

        r1 := @parameter1: javax.'annotation'.processing.ProcessingEnvironment;

        r2 = interfaceinvoke r0.<javax.lang.model.element.ExecutableElement: java.util.List getParameters()>();

        r3 = interfaceinvoke r1.<javax.'annotation'.processing.ProcessingEnvironment: javax.lang.model.util.Elements getElementUtils()>();

        $r8 = interfaceinvoke r3.<javax.lang.model.util.Elements: javax.lang.model.element.TypeElement getTypeElement(java.lang.CharSequence)>("android.view.View");

        r4 = interfaceinvoke $r8.<javax.lang.model.element.TypeElement: javax.lang.model.type.TypeMirror asType()>();

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i0 >= 2 goto label1;

        return 0;

     label1:
        $r9 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(0);

        $r10 = (javax.lang.model.element.VariableElement) $r9;

        r5 = interfaceinvoke $r10.<javax.lang.model.element.VariableElement: javax.lang.model.type.TypeMirror asType()>();

        r6 = interfaceinvoke r1.<javax.'annotation'.processing.ProcessingEnvironment: javax.lang.model.util.Types getTypeUtils()>();

        $r11 = interfaceinvoke r5.<javax.lang.model.type.TypeMirror: javax.lang.model.type.TypeKind getKind()>();

        $r12 = <javax.lang.model.type.TypeKind: javax.lang.model.type.TypeKind DECLARED>;

        if $r11 != $r12 goto label2;

        $z2 = interfaceinvoke r6.<javax.lang.model.util.Types: boolean isAssignable(javax.lang.model.type.TypeMirror,javax.lang.model.type.TypeMirror)>(r5, r4);

        if $z2 == 0 goto label2;

        return 0;

     label2:
        r7 = staticinvoke <android.databinding.tool.reflection.ModelAnalyzer: android.databinding.tool.reflection.ModelAnalyzer getInstance()>();

        $i1 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i1 >= 3 goto label4;

        $r16 = r7.<android.databinding.tool.reflection.ModelAnalyzer: android.databinding.tool.LibTypes libTypes>;

        $r17 = virtualinvoke $r16.<android.databinding.tool.LibTypes: java.lang.String getViewStubProxy()>();

        $r18 = interfaceinvoke r3.<javax.lang.model.util.Elements: javax.lang.model.element.TypeElement getTypeElement(java.lang.CharSequence)>($r17);

        r20 = interfaceinvoke $r18.<javax.lang.model.element.TypeElement: javax.lang.model.type.TypeMirror asType()>();

        $z1 = interfaceinvoke r6.<javax.lang.model.util.Types: boolean isAssignable(javax.lang.model.type.TypeMirror,javax.lang.model.type.TypeMirror)>(r5, r20);

        if $z1 != 0 goto label3;

        $r19 = newarray (java.lang.Object)[1];

        $r19[0] = r0;

        staticinvoke <android.databinding.tool.util.L: void e(javax.lang.model.element.Element,java.lang.String,java.lang.Object[])>(r0, "@BindingAdapter %s is applied to a method that has two parameters, the first must be a View type:", $r19);

     label3:
        return 0;

     label4:
        $r13 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(1);

        $r14 = (javax.lang.model.element.VariableElement) $r13;

        r21 = interfaceinvoke $r14.<javax.lang.model.element.VariableElement: javax.lang.model.type.TypeMirror asType()>();

        $z0 = interfaceinvoke r6.<javax.lang.model.util.Types: boolean isAssignable(javax.lang.model.type.TypeMirror,javax.lang.model.type.TypeMirror)>(r21, r4);

        if $z0 == 0 goto label5;

        return 1;

     label5:
        $r15 = newarray (java.lang.Object)[1];

        $r15[0] = r0;

        staticinvoke <android.databinding.tool.util.L: void e(javax.lang.model.element.Element,java.lang.String,java.lang.Object[])>(r0, "@BindingAdapter %s is applied to a method that doesn\'t take a View subclass as the first or second parameter. When a BindingAdapter uses a DataBindingComponent, the component parameter is first and the View parameter is second, otherwise the View parameter is first.", $r15);

        return 0;
    }

    private static void warnAttributeNamespace(javax.lang.model.element.Element, java.lang.String)
    {
        javax.lang.model.element.Element r0;
        java.lang.String r1;
        boolean $z0, $z1;
        java.lang.Object[] $r2;

        r0 := @parameter0: javax.lang.model.element.Element;

        r1 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>(":");

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("android:");

        if $z1 != 0 goto label1;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        staticinvoke <android.databinding.tool.util.L: void w(javax.lang.model.element.Element,java.lang.String,java.lang.Object[])>(r0, "Application namespace for attribute %s will be ignored.", $r2);

     label1:
        return;
    }

    private static void warnAttributeNamespaces(javax.lang.model.element.Element, java.lang.String[])
    {
        javax.lang.model.element.Element r0;
        java.lang.String[] r1, r2;
        int i0, i1;
        java.lang.String r3;

        r0 := @parameter0: javax.lang.model.element.Element;

        r1 := @parameter1: java.lang.String[];

        r2 = r1;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = r2[i1];

        staticinvoke <android.databinding.annotationprocessor.ProcessMethodAdapters: void warnAttributeNamespace(javax.lang.model.element.Element,java.lang.String)>(r0, r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void addRenamed(javax.'annotation'.processing.RoundEnvironment, android.databinding.tool.store.SetterStore)
    {
        android.databinding.annotationprocessor.ProcessMethodAdapters r0;
        javax.'annotation'.processing.RoundEnvironment r1;
        android.databinding.tool.store.SetterStore r2;
        android.databinding.tool.LibTypes r3;
        java.lang.Class r4;
        java.util.Iterator r5, r8;
        javax.lang.model.element.Element r6;
        android.databinding.tool.BindingMethodsCompat r7;
        android.databinding.tool.BindingMethodsCompat$BindingMethodCompat r9;
        java.lang.String r10, r11, r19;
        android.databinding.tool.reflection.ModelAnalyzer $r12;
        java.util.List $r13, $r15;
        boolean $z0, $z1;
        java.lang.Object $r14, $r16;
        javax.lang.model.element.TypeElement $r17;
        java.lang.Throwable $r18, r20;

        r0 := @this: android.databinding.annotationprocessor.ProcessMethodAdapters;

        r1 := @parameter0: javax.'annotation'.processing.RoundEnvironment;

        r2 := @parameter1: android.databinding.tool.store.SetterStore;

        $r12 = staticinvoke <android.databinding.tool.reflection.ModelAnalyzer: android.databinding.tool.reflection.ModelAnalyzer getInstance()>();

        r3 = $r12.<android.databinding.tool.reflection.ModelAnalyzer: android.databinding.tool.LibTypes libTypes>;

        r4 = virtualinvoke r3.<android.databinding.tool.LibTypes: java.lang.Class getBindingMethodsClass()>();

        $r13 = staticinvoke <android.databinding.annotationprocessor.AnnotationUtil: java.util.List getElementsAnnotatedWith(javax.'annotation'.processing.RoundEnvironment,java.lang.Class)>(r1, r4);

        r5 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r14 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (javax.lang.model.element.Element) $r14;

        r7 = staticinvoke <android.databinding.tool.BindingMethodsCompat: android.databinding.tool.BindingMethodsCompat create(javax.lang.model.element.Element)>(r6);

        $r15 = virtualinvoke r7.<android.databinding.tool.BindingMethodsCompat: java.util.List getMethods()>();

        r8 = interfaceinvoke $r15.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r16 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r9 = (android.databinding.tool.BindingMethodsCompat$BindingMethodCompat) $r16;

     label3:
        r19 = virtualinvoke r9.<android.databinding.tool.BindingMethodsCompat$BindingMethodCompat: java.lang.String getAttribute()>();

        r10 = virtualinvoke r9.<android.databinding.tool.BindingMethodsCompat$BindingMethodCompat: java.lang.String getMethod()>();

        staticinvoke <android.databinding.annotationprocessor.ProcessMethodAdapters: void warnAttributeNamespace(javax.lang.model.element.Element,java.lang.String)>(r6, r19);

        r11 = virtualinvoke r9.<android.databinding.tool.BindingMethodsCompat$BindingMethodCompat: java.lang.String getType()>();

        $r17 = (javax.lang.model.element.TypeElement) r6;

        virtualinvoke r2.<android.databinding.tool.store.SetterStore: void addRenamedMethod(java.lang.String,java.lang.String,java.lang.String,javax.lang.model.element.TypeElement)>(r19, r11, r10, $r17);

     label4:
        goto label6;

     label5:
        $r18 := @caughtexception;

        r20 = $r18;

     label6:
        goto label2;

     label7:
        goto label1;

     label8:
        return;

        catch android.databinding.tool.util.LoggedErrorException from label3 to label4 with label5;
    }

    private void addConversions(javax.'annotation'.processing.RoundEnvironment, android.databinding.tool.store.SetterStore)
    {
        android.databinding.annotationprocessor.ProcessMethodAdapters r0;
        javax.'annotation'.processing.RoundEnvironment r1;
        android.databinding.tool.store.SetterStore r2;
        java.lang.Class r3;
        java.util.Iterator r4;
        javax.lang.model.element.Element r5;
        android.databinding.tool.reflection.ModelAnalyzer $r6;
        android.databinding.tool.LibTypes $r7;
        java.util.List $r8, $r16;
        java.lang.Object $r9;
        javax.lang.model.element.ElementKind $r10, $r11;
        java.util.Set $r12, $r14;
        javax.lang.model.element.Modifier $r13, $r15;
        boolean $z0, $z1, $z2;
        int $i0;
        javax.lang.model.type.TypeMirror $r17;
        javax.lang.model.type.TypeKind $r18, $r19;
        java.lang.Object[] $r20, $r21, $r23;
        java.lang.Throwable $r22, r25;
        javax.lang.model.element.ExecutableElement r24;

        r0 := @this: android.databinding.annotationprocessor.ProcessMethodAdapters;

        r1 := @parameter0: javax.'annotation'.processing.RoundEnvironment;

        r2 := @parameter1: android.databinding.tool.store.SetterStore;

        $r6 = staticinvoke <android.databinding.tool.reflection.ModelAnalyzer: android.databinding.tool.reflection.ModelAnalyzer getInstance()>();

        $r7 = $r6.<android.databinding.tool.reflection.ModelAnalyzer: android.databinding.tool.LibTypes libTypes>;

        r3 = virtualinvoke $r7.<android.databinding.tool.LibTypes: java.lang.Class getBindingConversionClass()>();

        $r8 = staticinvoke <android.databinding.annotationprocessor.AnnotationUtil: java.util.List getElementsAnnotatedWith(javax.'annotation'.processing.RoundEnvironment,java.lang.Class)>(r1, r3);

        r4 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label13;

        $r9 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (javax.lang.model.element.Element) $r9;

     label02:
        $r10 = interfaceinvoke r5.<javax.lang.model.element.Element: javax.lang.model.element.ElementKind getKind()>();

        $r11 = <javax.lang.model.element.ElementKind: javax.lang.model.element.ElementKind METHOD>;

        if $r10 != $r11 goto label03;

        $r12 = interfaceinvoke r5.<javax.lang.model.element.Element: java.util.Set getModifiers()>();

        $r13 = <javax.lang.model.element.Modifier: javax.lang.model.element.Modifier STATIC>;

        $z0 = interfaceinvoke $r12.<java.util.Set: boolean contains(java.lang.Object)>($r13);

        if $z0 == 0 goto label03;

        $r14 = interfaceinvoke r5.<javax.lang.model.element.Element: java.util.Set getModifiers()>();

        $r15 = <javax.lang.model.element.Modifier: javax.lang.model.element.Modifier PUBLIC>;

        $z1 = interfaceinvoke $r14.<java.util.Set: boolean contains(java.lang.Object)>($r15);

        if $z1 != 0 goto label05;

     label03:
        $r23 = newarray (java.lang.Object)[1];

        $r23[0] = r5;

        staticinvoke <android.databinding.tool.util.L: void e(javax.lang.model.element.Element,java.lang.String,java.lang.Object[])>(r5, "@BindingConversion is only allowed on public static methods %s", $r23);

     label04:
        goto label01;

     label05:
        r24 = (javax.lang.model.element.ExecutableElement) r5;

        $r16 = interfaceinvoke r24.<javax.lang.model.element.ExecutableElement: java.util.List getParameters()>();

        $i0 = interfaceinvoke $r16.<java.util.List: int size()>();

        if $i0 == 1 goto label07;

        $r21 = newarray (java.lang.Object)[1];

        $r21[0] = r5;

        staticinvoke <android.databinding.tool.util.L: void e(javax.lang.model.element.Element,java.lang.String,java.lang.Object[])>(r5, "@BindingConversion method should have one parameter %s", $r21);

     label06:
        goto label01;

     label07:
        $r17 = interfaceinvoke r24.<javax.lang.model.element.ExecutableElement: javax.lang.model.type.TypeMirror getReturnType()>();

        $r18 = interfaceinvoke $r17.<javax.lang.model.type.TypeMirror: javax.lang.model.type.TypeKind getKind()>();

        $r19 = <javax.lang.model.type.TypeKind: javax.lang.model.type.TypeKind VOID>;

        if $r18 != $r19 goto label09;

        $r20 = newarray (java.lang.Object)[1];

        $r20[0] = r5;

        staticinvoke <android.databinding.tool.util.L: void e(javax.lang.model.element.Element,java.lang.String,java.lang.Object[])>(r5, "@BindingConversion method must return a value %s", $r20);

     label08:
        goto label01;

     label09:
        virtualinvoke r2.<android.databinding.tool.store.SetterStore: void addConversionMethod(javax.lang.model.element.ExecutableElement)>(r24);

     label10:
        goto label12;

     label11:
        $r22 := @caughtexception;

        r25 = $r22;

     label12:
        goto label01;

     label13:
        return;

        catch android.databinding.tool.util.LoggedErrorException from label02 to label04 with label11;
        catch android.databinding.tool.util.LoggedErrorException from label05 to label06 with label11;
        catch android.databinding.tool.util.LoggedErrorException from label07 to label08 with label11;
        catch android.databinding.tool.util.LoggedErrorException from label09 to label10 with label11;
    }

    private void addInverseAdapters(javax.'annotation'.processing.RoundEnvironment, javax.'annotation'.processing.ProcessingEnvironment, android.databinding.tool.store.SetterStore)
    {
        android.databinding.annotationprocessor.ProcessMethodAdapters r0;
        javax.'annotation'.processing.RoundEnvironment r1;
        javax.'annotation'.processing.ProcessingEnvironment r2;
        android.databinding.tool.store.SetterStore r3;
        android.databinding.tool.LibTypes r4;
        java.lang.Class r5;
        java.util.Iterator r6;
        javax.lang.model.element.Element r7;
        android.databinding.tool.InverseBindingAdapterCompat r8;
        java.lang.String r9, r10, $r20, $r26, $r35;
        boolean z0, $z1, $z2, $z3;
        byte b0, $b2;
        int i1;
        java.lang.Throwable r11, $r31, $r32, r36;
        android.databinding.tool.reflection.ModelAnalyzer $r12;
        java.util.List $r13, $r21;
        java.lang.Object $r14;
        java.util.Set $r15;
        javax.lang.model.element.Modifier $r16;
        javax.lang.model.type.TypeMirror $r17;
        javax.lang.model.type.TypeKind $r18, $r19;
        java.lang.Object[] $r22, $r29, $r30, $r33;
        java.lang.Integer $r23, $r24;
        java.lang.StringBuilder $r25, $r27, $r28;
        javax.lang.model.element.ExecutableElement r34;

        r0 := @this: android.databinding.annotationprocessor.ProcessMethodAdapters;

        r1 := @parameter0: javax.'annotation'.processing.RoundEnvironment;

        r2 := @parameter1: javax.'annotation'.processing.ProcessingEnvironment;

        r3 := @parameter2: android.databinding.tool.store.SetterStore;

        $r12 = staticinvoke <android.databinding.tool.reflection.ModelAnalyzer: android.databinding.tool.reflection.ModelAnalyzer getInstance()>();

        r4 = $r12.<android.databinding.tool.reflection.ModelAnalyzer: android.databinding.tool.LibTypes libTypes>;

        r5 = virtualinvoke r4.<android.databinding.tool.LibTypes: java.lang.Class getInverseBindingAdapterClass()>();

        $r13 = staticinvoke <android.databinding.annotationprocessor.AnnotationUtil: java.util.List getElementsAnnotatedWith(javax.'annotation'.processing.RoundEnvironment,java.lang.Class)>(r1, r5);

        r6 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z3 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label18;

        $r14 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (javax.lang.model.element.Element) $r14;

     label02:
        $r15 = interfaceinvoke r7.<javax.lang.model.element.Element: java.util.Set getModifiers()>();

        $r16 = <javax.lang.model.element.Modifier: javax.lang.model.element.Modifier PUBLIC>;

        $z1 = interfaceinvoke $r15.<java.util.Set: boolean contains(java.lang.Object)>($r16);

        if $z1 != 0 goto label04;

        $r30 = newarray (java.lang.Object)[0];

        staticinvoke <android.databinding.tool.util.L: void e(javax.lang.model.element.Element,java.lang.String,java.lang.Object[])>(r7, "@InverseBindingAdapter must be associated with a public method", $r30);

     label03:
        goto label01;

     label04:
        r34 = (javax.lang.model.element.ExecutableElement) r7;

        $r17 = interfaceinvoke r34.<javax.lang.model.element.ExecutableElement: javax.lang.model.type.TypeMirror getReturnType()>();

        $r18 = interfaceinvoke $r17.<javax.lang.model.type.TypeMirror: javax.lang.model.type.TypeKind getKind()>();

        $r19 = <javax.lang.model.type.TypeKind: javax.lang.model.type.TypeKind VOID>;

        if $r18 != $r19 goto label06;

        $r29 = newarray (java.lang.Object)[0];

        staticinvoke <android.databinding.tool.util.L: void e(javax.lang.model.element.Element,java.lang.String,java.lang.Object[])>(r7, "@InverseBindingAdapter must have a non-void return type", $r29);

     label05:
        goto label01;

     label06:
        r8 = staticinvoke <android.databinding.tool.InverseBindingAdapterCompat: android.databinding.tool.InverseBindingAdapterCompat create(javax.lang.model.element.Element)>(r34);

        r9 = virtualinvoke r8.<android.databinding.tool.InverseBindingAdapterCompat: java.lang.String getAttribute()>();

        staticinvoke <android.databinding.annotationprocessor.ProcessMethodAdapters: void warnAttributeNamespace(javax.lang.model.element.Element,java.lang.String)>(r7, r9);

        $r20 = virtualinvoke r8.<android.databinding.tool.InverseBindingAdapterCompat: java.lang.String getEvent()>();

        $z2 = virtualinvoke $r20.<java.lang.String: boolean isEmpty()>();

        if $z2 == 0 goto label07;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke r8.<android.databinding.tool.InverseBindingAdapterCompat: java.lang.String getAttribute()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AttrChanged");

        $r35 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label08;

     label07:
        $r35 = virtualinvoke r8.<android.databinding.tool.InverseBindingAdapterCompat: java.lang.String getEvent()>();

     label08:
        r10 = $r35;

        staticinvoke <android.databinding.annotationprocessor.ProcessMethodAdapters: void warnAttributeNamespace(javax.lang.model.element.Element,java.lang.String)>(r7, r10);

        z0 = staticinvoke <android.databinding.annotationprocessor.ProcessMethodAdapters: boolean takesComponent(javax.lang.model.element.ExecutableElement,javax.'annotation'.processing.ProcessingEnvironment)>(r34, r2);

        if z0 == 0 goto label09;

        $b2 = 2;

        goto label10;

     label09:
        $b2 = 1;

     label10:
        b0 = $b2;

        $r21 = interfaceinvoke r34.<javax.lang.model.element.ExecutableElement: java.util.List getParameters()>();

        i1 = interfaceinvoke $r21.<java.util.List: int size()>();

        if i1 == b0 goto label12;

        $r22 = newarray (java.lang.Object)[3];

        $r22[0] = r7;

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r22[1] = $r23;

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(b0);

        $r22[2] = $r24;

        staticinvoke <android.databinding.tool.util.L: void e(javax.lang.model.element.Element,java.lang.String,java.lang.Object[])>(r7, "@InverseBindingAdapter %s takes %s parameters, but %s parameters were expected", $r22);

     label11:
        goto label01;

     label12:
        virtualinvoke r3.<android.databinding.tool.store.SetterStore: void addInverseAdapter(javax.'annotation'.processing.ProcessingEnvironment,java.lang.String,java.lang.String,javax.lang.model.element.ExecutableElement,boolean)>(r2, r9, r10, r34, z0);

     label13:
        goto label15;

     label14:
        $r32 := @caughtexception;

        r11 = $r32;

        $r33 = newarray (java.lang.Object)[1];

        $r33[0] = r7;

        staticinvoke <android.databinding.tool.util.L: void e(javax.lang.model.element.Element,java.lang.String,java.lang.Object[])>(r7, "@InverseBindingAdapter for duplicate View and parameter type: %s", $r33);

     label15:
        goto label17;

     label16:
        $r31 := @caughtexception;

        r36 = $r31;

     label17:
        goto label01;

     label18:
        return;

        catch java.lang.IllegalArgumentException from label12 to label13 with label14;
        catch android.databinding.tool.util.LoggedErrorException from label02 to label03 with label16;
        catch android.databinding.tool.util.LoggedErrorException from label04 to label05 with label16;
        catch android.databinding.tool.util.LoggedErrorException from label06 to label11 with label16;
        catch android.databinding.tool.util.LoggedErrorException from label12 to label15 with label16;
    }

    private void addInverseBindingMethods(javax.'annotation'.processing.RoundEnvironment, android.databinding.tool.store.SetterStore)
    {
        android.databinding.annotationprocessor.ProcessMethodAdapters r0;
        javax.'annotation'.processing.RoundEnvironment r1;
        android.databinding.tool.store.SetterStore r2;
        android.databinding.tool.LibTypes r3;
        java.lang.Class r4;
        java.util.Iterator r5, r8;
        javax.lang.model.element.Element r6;
        android.databinding.tool.InverseBindingMethodsCompat r7;
        android.databinding.tool.InverseBindingMethodsCompat$InverseBindingMethodCompat r9;
        java.lang.String r10, r11, r12, $r18, $r21, r25, $r26;
        android.databinding.tool.reflection.ModelAnalyzer $r13;
        java.util.List $r14, $r16;
        boolean $z0, $z1, $z2;
        java.lang.Object $r15, $r17;
        javax.lang.model.element.TypeElement $r19;
        java.lang.StringBuilder $r20, $r22, $r23;
        java.lang.Throwable $r24, r27;

        r0 := @this: android.databinding.annotationprocessor.ProcessMethodAdapters;

        r1 := @parameter0: javax.'annotation'.processing.RoundEnvironment;

        r2 := @parameter1: android.databinding.tool.store.SetterStore;

        $r13 = staticinvoke <android.databinding.tool.reflection.ModelAnalyzer: android.databinding.tool.reflection.ModelAnalyzer getInstance()>();

        r3 = $r13.<android.databinding.tool.reflection.ModelAnalyzer: android.databinding.tool.LibTypes libTypes>;

        r4 = virtualinvoke r3.<android.databinding.tool.LibTypes: java.lang.Class getInverseBindingMethodsClass()>();

        $r14 = staticinvoke <android.databinding.annotationprocessor.AnnotationUtil: java.util.List getElementsAnnotatedWith(javax.'annotation'.processing.RoundEnvironment,java.lang.Class)>(r1, r4);

        r5 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r15 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (javax.lang.model.element.Element) $r15;

        r7 = staticinvoke <android.databinding.tool.InverseBindingMethodsCompat: android.databinding.tool.InverseBindingMethodsCompat create(javax.lang.model.element.Element)>(r6);

        $r16 = virtualinvoke r7.<android.databinding.tool.InverseBindingMethodsCompat: java.util.List getMethods()>();

        r8 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label09;

        $r17 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r9 = (android.databinding.tool.InverseBindingMethodsCompat$InverseBindingMethodCompat) $r17;

     label03:
        r25 = virtualinvoke r9.<android.databinding.tool.InverseBindingMethodsCompat$InverseBindingMethodCompat: java.lang.String getAttribute()>();

        r10 = virtualinvoke r9.<android.databinding.tool.InverseBindingMethodsCompat$InverseBindingMethodCompat: java.lang.String getMethod()>();

        $r18 = virtualinvoke r9.<android.databinding.tool.InverseBindingMethodsCompat$InverseBindingMethodCompat: java.lang.String getEvent()>();

        $z2 = virtualinvoke $r18.<java.lang.String: boolean isEmpty()>();

        if $z2 == 0 goto label04;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke r9.<android.databinding.tool.InverseBindingMethodsCompat$InverseBindingMethodCompat: java.lang.String getAttribute()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AttrChanged");

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label05;

     label04:
        $r26 = virtualinvoke r9.<android.databinding.tool.InverseBindingMethodsCompat$InverseBindingMethodCompat: java.lang.String getEvent()>();

     label05:
        r11 = $r26;

        staticinvoke <android.databinding.annotationprocessor.ProcessMethodAdapters: void warnAttributeNamespace(javax.lang.model.element.Element,java.lang.String)>(r6, r25);

        staticinvoke <android.databinding.annotationprocessor.ProcessMethodAdapters: void warnAttributeNamespace(javax.lang.model.element.Element,java.lang.String)>(r6, r11);

        r12 = virtualinvoke r9.<android.databinding.tool.InverseBindingMethodsCompat$InverseBindingMethodCompat: java.lang.String getType()>();

        $r19 = (javax.lang.model.element.TypeElement) r6;

        virtualinvoke r2.<android.databinding.tool.store.SetterStore: void addInverseBindingMethod(java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.lang.model.element.TypeElement)>(r25, r11, r12, r10, $r19);

     label06:
        goto label08;

     label07:
        $r24 := @caughtexception;

        r27 = $r24;

     label08:
        goto label02;

     label09:
        goto label01;

     label10:
        return;

        catch android.databinding.tool.util.LoggedErrorException from label03 to label06 with label07;
    }

    private void addInverseMethods(javax.'annotation'.processing.RoundEnvironment, javax.'annotation'.processing.ProcessingEnvironment, android.databinding.tool.store.SetterStore)
    {
        android.databinding.annotationprocessor.ProcessMethodAdapters r0;
        javax.'annotation'.processing.RoundEnvironment r1;
        javax.'annotation'.processing.ProcessingEnvironment r2;
        android.databinding.tool.store.SetterStore r3;
        android.databinding.tool.LibTypes r4;
        java.lang.Class r5;
        java.util.Iterator r6;
        javax.lang.model.element.Element r7;
        android.databinding.tool.InverseMethodCompat r8;
        java.lang.String r9, $r19, $r27;
        android.databinding.tool.reflection.ModelAnalyzer $r10;
        java.util.List $r11, $r18;
        java.lang.Object $r12;
        java.util.Set $r13;
        javax.lang.model.element.Modifier $r14;
        boolean $z0, $z1, $z2, $z3;
        javax.lang.model.type.TypeMirror $r15;
        javax.lang.model.type.TypeKind $r16, $r17;
        java.lang.Object[] $r20, $r21, $r22, $r23, $r26;
        java.lang.Throwable $r24, $r25, r30, r31;
        javax.lang.model.element.ExecutableElement r28, r29;

        r0 := @this: android.databinding.annotationprocessor.ProcessMethodAdapters;

        r1 := @parameter0: javax.'annotation'.processing.RoundEnvironment;

        r2 := @parameter1: javax.'annotation'.processing.ProcessingEnvironment;

        r3 := @parameter2: android.databinding.tool.store.SetterStore;

        $r10 = staticinvoke <android.databinding.tool.reflection.ModelAnalyzer: android.databinding.tool.reflection.ModelAnalyzer getInstance()>();

        r4 = $r10.<android.databinding.tool.reflection.ModelAnalyzer: android.databinding.tool.LibTypes libTypes>;

        r5 = virtualinvoke r4.<android.databinding.tool.LibTypes: java.lang.Class getInverseMethodClass()>();

        $r11 = staticinvoke <android.databinding.annotationprocessor.AnnotationUtil: java.util.List getElementsAnnotatedWith(javax.'annotation'.processing.RoundEnvironment,java.lang.Class)>(r1, r5);

        r6 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z3 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label16;

        $r12 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (javax.lang.model.element.Element) $r12;

     label02:
        $r13 = interfaceinvoke r7.<javax.lang.model.element.Element: java.util.Set getModifiers()>();

        $r14 = <javax.lang.model.element.Modifier: javax.lang.model.element.Modifier PUBLIC>;

        $z0 = interfaceinvoke $r13.<java.util.Set: boolean contains(java.lang.Object)>($r14);

        if $z0 != 0 goto label04;

        $r23 = newarray (java.lang.Object)[0];

        staticinvoke <android.databinding.tool.util.L: void e(javax.lang.model.element.Element,java.lang.String,java.lang.Object[])>(r7, "@InverseMethods must be associated with a public method", $r23);

     label03:
        goto label01;

     label04:
        r28 = (javax.lang.model.element.ExecutableElement) r7;

        $r15 = interfaceinvoke r28.<javax.lang.model.element.ExecutableElement: javax.lang.model.type.TypeMirror getReturnType()>();

        $r16 = interfaceinvoke $r15.<javax.lang.model.type.TypeMirror: javax.lang.model.type.TypeKind getKind()>();

        $r17 = <javax.lang.model.type.TypeKind: javax.lang.model.type.TypeKind VOID>;

        if $r16 != $r17 goto label06;

        $r22 = newarray (java.lang.Object)[0];

        staticinvoke <android.databinding.tool.util.L: void e(javax.lang.model.element.Element,java.lang.String,java.lang.Object[])>(r7, "@InverseMethods must have a non-void return type", $r22);

     label05:
        goto label01;

     label06:
        r8 = staticinvoke <android.databinding.tool.InverseMethodCompat: android.databinding.tool.InverseMethodCompat create(javax.lang.model.element.Element)>(r28);

        r9 = virtualinvoke r8.<android.databinding.tool.InverseMethodCompat: java.lang.String getValue()>();

        $z1 = staticinvoke <android.databinding.tool.util.StringUtils: boolean isNotBlank(java.lang.CharSequence)>(r9);

        if $z1 != 0 goto label08;

        $r21 = newarray (java.lang.Object)[0];

        staticinvoke <android.databinding.tool.util.L: void e(javax.lang.model.element.Element,java.lang.String,java.lang.Object[])>(r7, "@InverseMethod must supply a value containing the name of the method to call when going from View value to bound value", $r21);

     label07:
        goto label01;

     label08:
        $r18 = interfaceinvoke r28.<javax.lang.model.element.ExecutableElement: java.util.List getParameters()>();

        $z2 = interfaceinvoke $r18.<java.util.List: boolean isEmpty()>();

        if $z2 == 0 goto label10;

        $r20 = newarray (java.lang.Object)[0];

        staticinvoke <android.databinding.tool.util.L: void e(javax.lang.model.element.Element,java.lang.String,java.lang.Object[])>(r7, "@InverseMethods must have at least one parameter.", $r20);

     label09:
        goto label01;

     label10:
        $r19 = virtualinvoke r8.<android.databinding.tool.InverseMethodCompat: java.lang.String getValue()>();

        r29 = specialinvoke r0.<android.databinding.annotationprocessor.ProcessMethodAdapters: javax.lang.model.element.ExecutableElement findInverseOf(javax.'annotation'.processing.ProcessingEnvironment,javax.lang.model.element.ExecutableElement,java.lang.String)>(r2, r28, $r19);

        virtualinvoke r3.<android.databinding.tool.store.SetterStore: void addInverseMethod(javax.'annotation'.processing.ProcessingEnvironment,javax.lang.model.element.ExecutableElement,javax.lang.model.element.ExecutableElement)>(r2, r28, r29);

     label11:
        goto label13;

     label12:
        $r25 := @caughtexception;

        r30 = $r25;

        $r26 = newarray (java.lang.Object)[1];

        $r27 = virtualinvoke r30.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        $r26[0] = $r27;

        staticinvoke <android.databinding.tool.util.L: void e(javax.lang.model.element.Element,java.lang.String,java.lang.Object[])>(r7, "%s", $r26);

     label13:
        goto label15;

     label14:
        $r24 := @caughtexception;

        r31 = $r24;

     label15:
        goto label01;

     label16:
        return;

        catch java.lang.IllegalArgumentException from label10 to label11 with label12;
        catch android.databinding.tool.util.LoggedErrorException from label02 to label03 with label14;
        catch android.databinding.tool.util.LoggedErrorException from label04 to label05 with label14;
        catch android.databinding.tool.util.LoggedErrorException from label06 to label07 with label14;
        catch android.databinding.tool.util.LoggedErrorException from label08 to label09 with label14;
        catch android.databinding.tool.util.LoggedErrorException from label10 to label13 with label14;
    }

    private javax.lang.model.element.ExecutableElement findInverseOf(javax.'annotation'.processing.ProcessingEnvironment, javax.lang.model.element.ExecutableElement, java.lang.String) throws java.lang.IllegalArgumentException
    {
        android.databinding.annotationprocessor.ProcessMethodAdapters r0;
        javax.'annotation'.processing.ProcessingEnvironment r1;
        javax.lang.model.element.ExecutableElement r2, r64;
        java.lang.String r3, $r21, $r32, $r45, $r48, $r55, $r71, r72;
        javax.lang.model.element.TypeElement r4;
        java.util.List r5, r7, $r11;
        javax.lang.model.util.Types r6;
        javax.lang.model.type.TypeMirror r8, $r13, $r25, $r33, $r36, $r51, $r52, $r58, $r61, r65, r66, r67, r68, r69, r73;
        javax.lang.model.element.Element $r9, r63;
        javax.lang.model.util.Elements $r10;
        java.lang.StringBuilder $r12, r70;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12;
        java.util.Set $r15, $r37, $r39, $r41;
        javax.lang.model.element.Modifier $r16, $r38, $r40, $r42;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, z9;
        java.lang.Object $r17, $r23, $r28, $r34, $r49, $r56, $r59;
        javax.lang.model.element.VariableElement $r18, $r24, $r35, $r50, $r57, $r60;
        java.lang.IllegalArgumentException $r19, $r43, $r46, $r53;
        java.lang.Object[] $r20, $r44, $r47, $r54;
        javax.lang.model.element.ElementKind $r29, $r30;
        javax.lang.model.element.Name $r31;
        java.util.Iterator r62;

        r0 := @this: android.databinding.annotationprocessor.ProcessMethodAdapters;

        r1 := @parameter0: javax.'annotation'.processing.ProcessingEnvironment;

        r2 := @parameter1: javax.lang.model.element.ExecutableElement;

        r3 := @parameter2: java.lang.String;

        $r9 = interfaceinvoke r2.<javax.lang.model.element.ExecutableElement: javax.lang.model.element.Element getEnclosingElement()>();

        r4 = (javax.lang.model.element.TypeElement) $r9;

        r5 = interfaceinvoke r2.<javax.lang.model.element.ExecutableElement: java.util.List getParameters()>();

        r6 = interfaceinvoke r1.<javax.'annotation'.processing.ProcessingEnvironment: javax.lang.model.util.Types getTypeUtils()>();

        $r10 = interfaceinvoke r1.<javax.'annotation'.processing.ProcessingEnvironment: javax.lang.model.util.Elements getElementUtils()>();

        $r11 = interfaceinvoke $r10.<javax.lang.model.util.Elements: java.util.List getAllMembers(javax.lang.model.element.TypeElement)>(r4);

        r62 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z7 = interfaceinvoke r62.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label10;

        $r28 = interfaceinvoke r62.<java.util.Iterator: java.lang.Object next()>();

        r63 = (javax.lang.model.element.Element) $r28;

        $r29 = interfaceinvoke r63.<javax.lang.model.element.Element: javax.lang.model.element.ElementKind getKind()>();

        $r30 = <javax.lang.model.element.ElementKind: javax.lang.model.element.ElementKind METHOD>;

        if $r29 != $r30 goto label09;

        r64 = (javax.lang.model.element.ExecutableElement) r63;

        $r31 = interfaceinvoke r64.<javax.lang.model.element.ExecutableElement: javax.lang.model.element.Name getSimpleName()>();

        $r32 = virtualinvoke $r31.<java.lang.Object: java.lang.String toString()>();

        $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>($r32);

        if $z1 != 0 goto label02;

        goto label01;

     label02:
        r7 = interfaceinvoke r64.<javax.lang.model.element.ExecutableElement: java.util.List getParameters()>();

        z8 = 1;

        i11 = 0;

     label03:
        $i5 = interfaceinvoke r5.<java.util.List: int size()>();

        $i6 = $i5 - 1;

        if i11 >= $i6 goto label05;

        $r56 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(i11);

        $r57 = (javax.lang.model.element.VariableElement) $r56;

        $r58 = interfaceinvoke $r57.<javax.lang.model.element.VariableElement: javax.lang.model.type.TypeMirror asType()>();

        r65 = interfaceinvoke r6.<javax.lang.model.util.Types: javax.lang.model.type.TypeMirror erasure(javax.lang.model.type.TypeMirror)>($r58);

        $r59 = interfaceinvoke r7.<java.util.List: java.lang.Object get(int)>(i11);

        $r60 = (javax.lang.model.element.VariableElement) $r59;

        $r61 = interfaceinvoke $r60.<javax.lang.model.element.VariableElement: javax.lang.model.type.TypeMirror asType()>();

        r8 = interfaceinvoke r6.<javax.lang.model.util.Types: javax.lang.model.type.TypeMirror erasure(javax.lang.model.type.TypeMirror)>($r61);

        $z6 = interfaceinvoke r6.<javax.lang.model.util.Types: boolean isSameType(javax.lang.model.type.TypeMirror,javax.lang.model.type.TypeMirror)>(r65, r8);

        if $z6 != 0 goto label04;

        z8 = 0;

        goto label05;

     label04:
        i11 = i11 + 1;

        goto label03;

     label05:
        if z8 == 0 goto label09;

        $r33 = interfaceinvoke r2.<javax.lang.model.element.ExecutableElement: javax.lang.model.type.TypeMirror getReturnType()>();

        r66 = interfaceinvoke r6.<javax.lang.model.util.Types: javax.lang.model.type.TypeMirror erasure(javax.lang.model.type.TypeMirror)>($r33);

        $i7 = interfaceinvoke r7.<java.util.List: int size()>();

        $i8 = $i7 - 1;

        $r34 = interfaceinvoke r7.<java.util.List: java.lang.Object get(int)>($i8);

        $r35 = (javax.lang.model.element.VariableElement) $r34;

        $r36 = interfaceinvoke $r35.<javax.lang.model.element.VariableElement: javax.lang.model.type.TypeMirror asType()>();

        r67 = interfaceinvoke r6.<javax.lang.model.util.Types: javax.lang.model.type.TypeMirror erasure(javax.lang.model.type.TypeMirror)>($r36);

        z9 = interfaceinvoke r6.<javax.lang.model.util.Types: boolean isSameType(javax.lang.model.type.TypeMirror,javax.lang.model.type.TypeMirror)>(r66, r67);

        if z9 == 0 goto label06;

        $i9 = interfaceinvoke r5.<java.util.List: int size()>();

        $i10 = $i9 - 1;

        $r49 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>($i10);

        $r50 = (javax.lang.model.element.VariableElement) $r49;

        $r51 = interfaceinvoke $r50.<javax.lang.model.element.VariableElement: javax.lang.model.type.TypeMirror asType()>();

        r68 = interfaceinvoke r6.<javax.lang.model.util.Types: javax.lang.model.type.TypeMirror erasure(javax.lang.model.type.TypeMirror)>($r51);

        $r52 = interfaceinvoke r64.<javax.lang.model.element.ExecutableElement: javax.lang.model.type.TypeMirror getReturnType()>();

        r69 = interfaceinvoke r6.<javax.lang.model.util.Types: javax.lang.model.type.TypeMirror erasure(javax.lang.model.type.TypeMirror)>($r52);

        $z5 = interfaceinvoke r6.<javax.lang.model.util.Types: boolean isSameType(javax.lang.model.type.TypeMirror,javax.lang.model.type.TypeMirror)>(r68, r69);

        if $z5 != 0 goto label06;

        $r53 = new java.lang.IllegalArgumentException;

        $r54 = newarray (java.lang.Object)[3];

        $r54[0] = r64;

        $r54[1] = r68;

        $r54[2] = r69;

        $r55 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Declared InverseMethod (\'%s\') does not have the correct return type. Expected \'%s\' but was \'%s\'", $r54);

        specialinvoke $r53.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r55);

        throw $r53;

     label06:
        $r37 = interfaceinvoke r2.<javax.lang.model.element.ExecutableElement: java.util.Set getModifiers()>();

        $r38 = <javax.lang.model.element.Modifier: javax.lang.model.element.Modifier STATIC>;

        $z2 = interfaceinvoke $r37.<java.util.Set: boolean contains(java.lang.Object)>($r38);

        $r39 = interfaceinvoke r64.<javax.lang.model.element.ExecutableElement: java.util.Set getModifiers()>();

        $r40 = <javax.lang.model.element.Modifier: javax.lang.model.element.Modifier STATIC>;

        $z3 = interfaceinvoke $r39.<java.util.Set: boolean contains(java.lang.Object)>($r40);

        if $z2 == $z3 goto label07;

        $r46 = new java.lang.IllegalArgumentException;

        $r47 = newarray (java.lang.Object)[2];

        $r47[0] = r2;

        $r47[1] = r64;

        $r48 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("\'%s\' declared instance method is different from its InverseMethod \'%s\'. Make them both static or instance methods.", $r47);

        specialinvoke $r46.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r48);

        throw $r46;

     label07:
        $r41 = interfaceinvoke r64.<javax.lang.model.element.ExecutableElement: java.util.Set getModifiers()>();

        $r42 = <javax.lang.model.element.Modifier: javax.lang.model.element.Modifier PUBLIC>;

        $z4 = interfaceinvoke $r41.<java.util.Set: boolean contains(java.lang.Object)>($r42);

        if $z4 != 0 goto label08;

        $r43 = new java.lang.IllegalArgumentException;

        $r44 = newarray (java.lang.Object)[1];

        $r44[0] = r64;

        $r45 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("InverseMethod must be declared public \'%s\'", $r44);

        specialinvoke $r43.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r45);

        throw $r43;

     label08:
        return r64;

     label09:
        goto label01;

     label10:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        r70 = $r12;

        i12 = 0;

     label11:
        $i0 = interfaceinvoke r5.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        if i12 >= $i1 goto label13;

        if i12 == 0 goto label12;

        virtualinvoke r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label12:
        $r23 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(i12);

        $r24 = (javax.lang.model.element.VariableElement) $r23;

        $r25 = interfaceinvoke $r24.<javax.lang.model.element.VariableElement: javax.lang.model.type.TypeMirror asType()>();

        virtualinvoke r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r25);

        i12 = i12 + 1;

        goto label11;

     label13:
        $i2 = interfaceinvoke r5.<java.util.List: int size()>();

        if $i2 == 1 goto label14;

        virtualinvoke r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label14:
        $r13 = interfaceinvoke r2.<javax.lang.model.element.ExecutableElement: javax.lang.model.type.TypeMirror getReturnType()>();

        virtualinvoke r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = interfaceinvoke r2.<javax.lang.model.element.ExecutableElement: java.util.Set getModifiers()>();

        $r16 = <javax.lang.model.element.Modifier: javax.lang.model.element.Modifier STATIC>;

        $z0 = interfaceinvoke $r15.<java.util.Set: boolean contains(java.lang.Object)>($r16);

        if $z0 == 0 goto label15;

        $r71 = "static ";

        goto label16;

     label15:
        $r71 = "";

     label16:
        r72 = $r71;

        $i3 = interfaceinvoke r5.<java.util.List: int size()>();

        $i4 = $i3 - 1;

        $r17 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>($i4);

        $r18 = (javax.lang.model.element.VariableElement) $r17;

        r73 = interfaceinvoke $r18.<javax.lang.model.element.VariableElement: javax.lang.model.type.TypeMirror asType()>();

        $r19 = new java.lang.IllegalArgumentException;

        $r20 = newarray (java.lang.Object)[4];

        $r20[0] = r72;

        $r20[1] = r73;

        $r20[2] = r3;

        $r20[3] = r70;

        $r21 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Could not find inverse method: public %s%s %s(%s)", $r20);

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21);

        throw $r19;
    }

    private void addUntaggable(javax.'annotation'.processing.RoundEnvironment, android.databinding.tool.store.SetterStore)
    {
        android.databinding.annotationprocessor.ProcessMethodAdapters r0;
        javax.'annotation'.processing.RoundEnvironment r1;
        android.databinding.tool.store.SetterStore r2;
        android.databinding.tool.LibTypes r3;
        java.lang.Class r4;
        java.util.Iterator r5;
        javax.lang.model.element.Element r6;
        android.databinding.tool.reflection.ModelAnalyzer $r7;
        java.util.List $r8;
        boolean $z0;
        java.lang.Object $r9;
        java.lang.String[] $r10;
        javax.lang.model.element.TypeElement $r11;
        java.lang.Throwable $r12, r14;
        android.databinding.tool.UntaggableCompat r13;

        r0 := @this: android.databinding.annotationprocessor.ProcessMethodAdapters;

        r1 := @parameter0: javax.'annotation'.processing.RoundEnvironment;

        r2 := @parameter1: android.databinding.tool.store.SetterStore;

        $r7 = staticinvoke <android.databinding.tool.reflection.ModelAnalyzer: android.databinding.tool.reflection.ModelAnalyzer getInstance()>();

        r3 = $r7.<android.databinding.tool.reflection.ModelAnalyzer: android.databinding.tool.LibTypes libTypes>;

        r4 = virtualinvoke r3.<android.databinding.tool.LibTypes: java.lang.Class getUntaggableClass()>();

        $r8 = staticinvoke <android.databinding.annotationprocessor.AnnotationUtil: java.util.List getElementsAnnotatedWith(javax.'annotation'.processing.RoundEnvironment,java.lang.Class)>(r1, r4);

        r5 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r9 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (javax.lang.model.element.Element) $r9;

     label2:
        r13 = staticinvoke <android.databinding.tool.UntaggableCompat: android.databinding.tool.UntaggableCompat create(javax.lang.model.element.Element)>(r6);

        $r10 = virtualinvoke r13.<android.databinding.tool.UntaggableCompat: java.lang.String[] getValue()>();

        $r11 = (javax.lang.model.element.TypeElement) r6;

        virtualinvoke r2.<android.databinding.tool.store.SetterStore: void addUntaggableTypes(java.lang.String[],javax.lang.model.element.TypeElement)>($r10, $r11);

     label3:
        goto label5;

     label4:
        $r12 := @caughtexception;

        r14 = $r12;

     label5:
        goto label1;

     label6:
        return;

        catch android.databinding.tool.util.LoggedErrorException from label2 to label3 with label4;
    }

    private void clearIncrementalClasses(javax.'annotation'.processing.RoundEnvironment, android.databinding.tool.store.SetterStore)
    {
        android.databinding.annotationprocessor.ProcessMethodAdapters r0;
        javax.'annotation'.processing.RoundEnvironment r1;
        android.databinding.tool.store.SetterStore r2;
        java.util.HashSet r3, $r6;
        android.databinding.tool.LibTypes r4;
        javax.lang.model.element.TypeElement r5, $r17, $r22, $r26;
        android.databinding.tool.reflection.ModelAnalyzer $r7;
        java.lang.Class $r8, $r10, $r12, $r14;
        java.util.List $r9, $r11, $r13, $r15;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r16, $r20, $r25, $r29;
        javax.lang.model.element.Name $r18, $r23, $r27, $r31;
        java.lang.String $r19, $r24, $r28, $r32;
        javax.lang.model.element.Element $r21, $r30, r34, r36, r38, r40;
        java.util.Iterator r33, r35, r37, r39;

        r0 := @this: android.databinding.annotationprocessor.ProcessMethodAdapters;

        r1 := @parameter0: javax.'annotation'.processing.RoundEnvironment;

        r2 := @parameter1: android.databinding.tool.store.SetterStore;

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        r3 = $r6;

        $r7 = staticinvoke <android.databinding.tool.reflection.ModelAnalyzer: android.databinding.tool.reflection.ModelAnalyzer getInstance()>();

        r4 = $r7.<android.databinding.tool.reflection.ModelAnalyzer: android.databinding.tool.LibTypes libTypes>;

        $r8 = virtualinvoke r4.<android.databinding.tool.LibTypes: java.lang.Class getBindingAdapterClass()>();

        $r9 = staticinvoke <android.databinding.annotationprocessor.AnnotationUtil: java.util.List getElementsAnnotatedWith(javax.'annotation'.processing.RoundEnvironment,java.lang.Class)>(r1, $r8);

        r33 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r33.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r29 = interfaceinvoke r33.<java.util.Iterator: java.lang.Object next()>();

        r34 = (javax.lang.model.element.Element) $r29;

        $r30 = interfaceinvoke r34.<javax.lang.model.element.Element: javax.lang.model.element.Element getEnclosingElement()>();

        r5 = (javax.lang.model.element.TypeElement) $r30;

        $r31 = interfaceinvoke r5.<javax.lang.model.element.TypeElement: javax.lang.model.element.Name getQualifiedName()>();

        $r32 = virtualinvoke $r31.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r3.<java.util.HashSet: boolean add(java.lang.Object)>($r32);

        goto label1;

     label2:
        $r10 = virtualinvoke r4.<android.databinding.tool.LibTypes: java.lang.Class getBindingMethodsClass()>();

        $r11 = staticinvoke <android.databinding.annotationprocessor.AnnotationUtil: java.util.List getElementsAnnotatedWith(javax.'annotation'.processing.RoundEnvironment,java.lang.Class)>(r1, $r10);

        r35 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r25 = interfaceinvoke r35.<java.util.Iterator: java.lang.Object next()>();

        r36 = (javax.lang.model.element.Element) $r25;

        $r26 = (javax.lang.model.element.TypeElement) r36;

        $r27 = interfaceinvoke $r26.<javax.lang.model.element.TypeElement: javax.lang.model.element.Name getQualifiedName()>();

        $r28 = virtualinvoke $r27.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r3.<java.util.HashSet: boolean add(java.lang.Object)>($r28);

        goto label3;

     label4:
        $r12 = virtualinvoke r4.<android.databinding.tool.LibTypes: java.lang.Class getBindingConversionClass()>();

        $r13 = staticinvoke <android.databinding.annotationprocessor.AnnotationUtil: java.util.List getElementsAnnotatedWith(javax.'annotation'.processing.RoundEnvironment,java.lang.Class)>(r1, $r12);

        r37 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke r37.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r20 = interfaceinvoke r37.<java.util.Iterator: java.lang.Object next()>();

        r38 = (javax.lang.model.element.Element) $r20;

        $r21 = interfaceinvoke r38.<javax.lang.model.element.Element: javax.lang.model.element.Element getEnclosingElement()>();

        $r22 = (javax.lang.model.element.TypeElement) $r21;

        $r23 = interfaceinvoke $r22.<javax.lang.model.element.TypeElement: javax.lang.model.element.Name getQualifiedName()>();

        $r24 = virtualinvoke $r23.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r3.<java.util.HashSet: boolean add(java.lang.Object)>($r24);

        goto label5;

     label6:
        $r14 = virtualinvoke r4.<android.databinding.tool.LibTypes: java.lang.Class getUntaggableClass()>();

        $r15 = staticinvoke <android.databinding.annotationprocessor.AnnotationUtil: java.util.List getElementsAnnotatedWith(javax.'annotation'.processing.RoundEnvironment,java.lang.Class)>(r1, $r14);

        r39 = interfaceinvoke $r15.<java.util.List: java.util.Iterator iterator()>();

     label7:
        $z3 = interfaceinvoke r39.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label8;

        $r16 = interfaceinvoke r39.<java.util.Iterator: java.lang.Object next()>();

        r40 = (javax.lang.model.element.Element) $r16;

        $r17 = (javax.lang.model.element.TypeElement) r40;

        $r18 = interfaceinvoke $r17.<javax.lang.model.element.TypeElement: javax.lang.model.element.Name getQualifiedName()>();

        $r19 = virtualinvoke $r18.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r3.<java.util.HashSet: boolean add(java.lang.Object)>($r19);

        goto label7;

     label8:
        virtualinvoke r2.<android.databinding.tool.store.SetterStore: void clear(java.util.Set)>(r3);

        return;
    }

