androidx.compose.runtime.SlotTable
<androidx.compose.runtime.SlotTable: int[] groups>
<androidx.compose.runtime.SlotTable: int groupsSize>
<androidx.compose.runtime.SlotTable: java.lang.Object[] slots>
<androidx.compose.runtime.SlotTable: int slotsSize>
<androidx.compose.runtime.SlotTable: int readers>
<androidx.compose.runtime.SlotTable: boolean writer>
<androidx.compose.runtime.SlotTable: int version>
<androidx.compose.runtime.SlotTable: java.util.ArrayList anchors>
    public void <init>()
    {
        androidx.compose.runtime.SlotTable r0, r2;
        java.lang.Object[] r1;
        int i0, i1;
        int[] $r3;
        java.util.ArrayList $r4;

        r0 := @this: androidx.compose.runtime.SlotTable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = newarray (int)[0];

        r0.<androidx.compose.runtime.SlotTable: int[] groups> = $r3;

        i1 = 0;

        r1 = newarray (java.lang.Object)[0];

        r2 = r0;

     label1:
        if i1 >= 0 goto label2;

        i0 = i1;

        r1[i0] = null;

        i1 = i1 + 1;

        goto label1;

     label2:
        r2.<androidx.compose.runtime.SlotTable: java.lang.Object[] slots> = r1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<androidx.compose.runtime.SlotTable: java.util.ArrayList anchors> = $r4;

        return;
    }

    public final int[] getGroups()
    {
        androidx.compose.runtime.SlotTable r0;
        int[] $r1;

        r0 := @this: androidx.compose.runtime.SlotTable;

        $r1 = r0.<androidx.compose.runtime.SlotTable: int[] groups>;

        return $r1;
    }

    public final int getGroupsSize()
    {
        androidx.compose.runtime.SlotTable r0;
        int $i0;

        r0 := @this: androidx.compose.runtime.SlotTable;

        $i0 = r0.<androidx.compose.runtime.SlotTable: int groupsSize>;

        return $i0;
    }

    public final java.lang.Object[] getSlots()
    {
        androidx.compose.runtime.SlotTable r0;
        java.lang.Object[] $r1;

        r0 := @this: androidx.compose.runtime.SlotTable;

        $r1 = r0.<androidx.compose.runtime.SlotTable: java.lang.Object[] slots>;

        return $r1;
    }

    public final int getSlotsSize()
    {
        androidx.compose.runtime.SlotTable r0;
        int $i0;

        r0 := @this: androidx.compose.runtime.SlotTable;

        $i0 = r0.<androidx.compose.runtime.SlotTable: int slotsSize>;

        return $i0;
    }

    public final boolean getWriter$runtime_release()
    {
        androidx.compose.runtime.SlotTable r0;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.SlotTable;

        $z0 = r0.<androidx.compose.runtime.SlotTable: boolean writer>;

        return $z0;
    }

    public final int getVersion$runtime_release()
    {
        androidx.compose.runtime.SlotTable r0;
        int $i0;

        r0 := @this: androidx.compose.runtime.SlotTable;

        $i0 = r0.<androidx.compose.runtime.SlotTable: int version>;

        return $i0;
    }

    public final void setVersion$runtime_release(int)
    {
        androidx.compose.runtime.SlotTable r0;
        int i0;

        r0 := @this: androidx.compose.runtime.SlotTable;

        i0 := @parameter0: int;

        r0.<androidx.compose.runtime.SlotTable: int version> = i0;

        return;
    }

    public final java.util.ArrayList getAnchors$runtime_release()
    {
        androidx.compose.runtime.SlotTable r0;
        java.util.ArrayList $r1;

        r0 := @this: androidx.compose.runtime.SlotTable;

        $r1 = r0.<androidx.compose.runtime.SlotTable: java.util.ArrayList anchors>;

        return $r1;
    }

    public final void setAnchors$runtime_release(java.util.ArrayList)
    {
        androidx.compose.runtime.SlotTable r0;
        java.util.ArrayList r1;

        r0 := @this: androidx.compose.runtime.SlotTable;

        r1 := @parameter0: java.util.ArrayList;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<set-?>");

        r0.<androidx.compose.runtime.SlotTable: java.util.ArrayList anchors> = r1;

        return;
    }

    public boolean isEmpty()
    {
        androidx.compose.runtime.SlotTable r0;
        int $i0;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.SlotTable;

        $i0 = r0.<androidx.compose.runtime.SlotTable: int groupsSize>;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final java.lang.Object read(kotlin.jvm.functions.Function1)
    {
        androidx.compose.runtime.SlotTable r0;
        kotlin.jvm.functions.Function1 r1;
        androidx.compose.runtime.SlotReader r2;
        java.lang.Object r3;
        java.lang.Throwable r4, $r5;

        r0 := @this: androidx.compose.runtime.SlotTable;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        r2 = virtualinvoke r0.<androidx.compose.runtime.SlotTable: androidx.compose.runtime.SlotReader openReader()>();

     label1:
        r3 = interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r2);

     label2:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        virtualinvoke r2.<androidx.compose.runtime.SlotReader: void close()>();

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        goto label5;

     label3:
        $r5 := @caughtexception;

        r4 = $r5;

     label4:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        virtualinvoke r2.<androidx.compose.runtime.SlotReader: void close()>();

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw r4;

     label5:
        return r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public final java.lang.Object write(kotlin.jvm.functions.Function1)
    {
        androidx.compose.runtime.SlotTable r0;
        kotlin.jvm.functions.Function1 r1;
        androidx.compose.runtime.SlotWriter r2;
        java.lang.Object r3;
        java.lang.Throwable r4, $r5;

        r0 := @this: androidx.compose.runtime.SlotTable;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        r2 = virtualinvoke r0.<androidx.compose.runtime.SlotTable: androidx.compose.runtime.SlotWriter openWriter()>();

     label1:
        r3 = interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r2);

     label2:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        virtualinvoke r2.<androidx.compose.runtime.SlotWriter: void close()>();

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        goto label5;

     label3:
        $r5 := @caughtexception;

        r4 = $r5;

     label4:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        virtualinvoke r2.<androidx.compose.runtime.SlotWriter: void close()>();

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw r4;

     label5:
        return r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public final androidx.compose.runtime.SlotReader openReader()
    {
        androidx.compose.runtime.SlotTable r0;
        int i0, $i1;
        boolean $z0;
        java.lang.String $r3, $r4;
        java.lang.IllegalStateException r5;
        androidx.compose.runtime.SlotReader r6;
        java.lang.Throwable r7;

        r0 := @this: androidx.compose.runtime.SlotTable;

        $z0 = r0.<androidx.compose.runtime.SlotTable: boolean writer>;

        if $z0 == 0 goto label1;

        r5 = new java.lang.IllegalStateException;

        $r3 = "Cannot read while a writer is pending";

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        r7 = (java.lang.Throwable) r5;

        throw r7;

     label1:
        i0 = r0.<androidx.compose.runtime.SlotTable: int readers>;

        $i1 = i0 + 1;

        r0.<androidx.compose.runtime.SlotTable: int readers> = $i1;

        r6 = new androidx.compose.runtime.SlotReader;

        specialinvoke r6.<androidx.compose.runtime.SlotReader: void <init>(androidx.compose.runtime.SlotTable)>(r0);

        return r6;
    }

    public final androidx.compose.runtime.SlotWriter openWriter()
    {
        androidx.compose.runtime.SlotTable r0;
        boolean $z0, $z1, z2, $z5, z6;
        int $i0, $i1, i2;
        androidx.compose.runtime.SlotWriter $r1;
        java.lang.String $r2, $r5, $r8, $r9;
        kotlin.KotlinNothingValueException $r4, $r7;

        r0 := @this: androidx.compose.runtime.SlotTable;

        $z0 = r0.<androidx.compose.runtime.SlotTable: boolean writer>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        z2 = $z1;

        if z2 != 0 goto label3;

        $r8 = "Cannot start a writer when another writer is pending";

        $r5 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r5);

        $r7 = new kotlin.KotlinNothingValueException;

        specialinvoke $r7.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r7;

     label3:
        $i0 = r0.<androidx.compose.runtime.SlotTable: int readers>;

        if $i0 > 0 goto label4;

        $z5 = 1;

        goto label5;

     label4:
        $z5 = 0;

     label5:
        z6 = $z5;

        if z6 != 0 goto label6;

        $r9 = "Cannot start a writer when a reader is pending";

        $r2 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r2);

        $r4 = new kotlin.KotlinNothingValueException;

        specialinvoke $r4.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r4;

     label6:
        r0.<androidx.compose.runtime.SlotTable: boolean writer> = 1;

        i2 = r0.<androidx.compose.runtime.SlotTable: int version>;

        $i1 = i2 + 1;

        r0.<androidx.compose.runtime.SlotTable: int version> = $i1;

        $r1 = new androidx.compose.runtime.SlotWriter;

        specialinvoke $r1.<androidx.compose.runtime.SlotWriter: void <init>(androidx.compose.runtime.SlotTable)>(r0);

        return $r1;
    }

    public final androidx.compose.runtime.Anchor anchor(int)
    {
        androidx.compose.runtime.SlotTable r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        boolean $z0, $z1, z2, $z5;
        java.lang.Object $r1;
        androidx.compose.runtime.Anchor $r2, $r12;
        java.lang.IllegalArgumentException $r3;
        java.lang.String $r4, $r5, $r8, $r9;
        kotlin.KotlinNothingValueException $r7;
        java.util.ArrayList r10;

        r0 := @this: androidx.compose.runtime.SlotTable;

        i0 := @parameter0: int;

        $z0 = r0.<androidx.compose.runtime.SlotTable: boolean writer>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        z2 = $z1;

        if z2 != 0 goto label3;

        $r8 = "use active SlotWriter to create an anchor location instead ";

        $r5 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r5);

        $r7 = new kotlin.KotlinNothingValueException;

        specialinvoke $r7.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r7;

     label3:
        if 0 > i0 goto label5;

        $i4 = r0.<androidx.compose.runtime.SlotTable: int groupsSize>;

        if i0 >= $i4 goto label4;

        $z5 = 1;

        goto label6;

     label4:
        $z5 = 0;

        goto label6;

     label5:
        $z5 = 0;

     label6:
        if $z5 != 0 goto label7;

        $r9 = "Parameter index is out of range";

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label7:
        r10 = r0.<androidx.compose.runtime.SlotTable: java.util.ArrayList anchors>;

        $i5 = r0.<androidx.compose.runtime.SlotTable: int groupsSize>;

        i1 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$search(java.util.ArrayList,int,int)>(r10, i0, $i5);

        if i1 >= 0 goto label8;

        $r2 = new androidx.compose.runtime.Anchor;

        specialinvoke $r2.<androidx.compose.runtime.Anchor: void <init>(int)>(i0);

        $i2 = i1 + 1;

        $i3 = neg $i2;

        virtualinvoke r10.<java.util.ArrayList: void add(int,java.lang.Object)>($i3, $r2);

        $r12 = $r2;

        goto label9;

     label8:
        $r1 = virtualinvoke r10.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "get(location)");

        $r12 = (androidx.compose.runtime.Anchor) $r1;

     label9:
        return $r12;
    }

    public final int anchorIndex(androidx.compose.runtime.Anchor)
    {
        androidx.compose.runtime.SlotTable r0;
        androidx.compose.runtime.Anchor r1;
        boolean z0, $z1, $z2, $z3;
        int $i0;
        java.lang.IllegalArgumentException $r2;
        java.lang.String $r3, $r4, $r7, $r8;
        kotlin.KotlinNothingValueException $r6;

        r0 := @this: androidx.compose.runtime.SlotTable;

        r1 := @parameter0: androidx.compose.runtime.Anchor;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "anchor");

        $z1 = r0.<androidx.compose.runtime.SlotTable: boolean writer>;

        if $z1 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        z0 = $z3;

        if z0 != 0 goto label3;

        $r7 = "Use active SlotWriter to determine anchor location instead";

        $r4 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r4);

        $r6 = new kotlin.KotlinNothingValueException;

        specialinvoke $r6.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r6;

     label3:
        $z2 = virtualinvoke r1.<androidx.compose.runtime.Anchor: boolean getValid()>();

        if $z2 != 0 goto label4;

        $r8 = "Anchor refers to a group that was removed";

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label4:
        $i0 = virtualinvoke r1.<androidx.compose.runtime.Anchor: int getLocation$runtime_release()>();

        return $i0;
    }

    public final boolean ownsAnchor(androidx.compose.runtime.Anchor)
    {
        androidx.compose.runtime.SlotTable r0;
        androidx.compose.runtime.Anchor r1;
        int i0, $i1, $i2;
        boolean $z1, $z2, $z3, $z4;
        java.util.ArrayList $r2, $r3;
        java.lang.Object $r4;

        r0 := @this: androidx.compose.runtime.SlotTable;

        r1 := @parameter0: androidx.compose.runtime.Anchor;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "anchor");

        $z1 = virtualinvoke r1.<androidx.compose.runtime.Anchor: boolean getValid()>();

        if $z1 == 0 goto label3;

        $r2 = r0.<androidx.compose.runtime.SlotTable: java.util.ArrayList anchors>;

        $i1 = virtualinvoke r1.<androidx.compose.runtime.Anchor: int getLocation$runtime_release()>();

        $i2 = r0.<androidx.compose.runtime.SlotTable: int groupsSize>;

        i0 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$search(java.util.ArrayList,int,int)>($r2, $i1, $i2);

        if i0 < 0 goto label1;

        $r3 = r0.<androidx.compose.runtime.SlotTable: java.util.ArrayList anchors>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, r1);

        if $z2 == 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        if $z3 == 0 goto label3;

        $z4 = 1;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        return $z4;
    }

    public final boolean groupContainsAnchor(int, androidx.compose.runtime.Anchor)
    {
        androidx.compose.runtime.SlotTable r0;
        int i0, $i1, $i2, i3, $i4;
        androidx.compose.runtime.Anchor r1;
        boolean $z0, $z1, $z2, z3, $z6, z7, $z10, $z11;
        int[] $r2;
        java.lang.String $r3, $r6, $r9, $r10;
        kotlin.KotlinNothingValueException $r5, $r8;

        r0 := @this: androidx.compose.runtime.SlotTable;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.compose.runtime.Anchor;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "anchor");

        $z0 = r0.<androidx.compose.runtime.SlotTable: boolean writer>;

        if $z0 != 0 goto label01;

        $z2 = 1;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        z3 = $z2;

        if z3 != 0 goto label03;

        $r9 = "Writer is active";

        $r6 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r6);

        $r8 = new kotlin.KotlinNothingValueException;

        specialinvoke $r8.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r8;

     label03:
        if 0 > i0 goto label05;

        $i2 = r0.<androidx.compose.runtime.SlotTable: int groupsSize>;

        if i0 >= $i2 goto label04;

        $z6 = 1;

        goto label06;

     label04:
        $z6 = 0;

        goto label06;

     label05:
        $z6 = 0;

     label06:
        z7 = $z6;

        if z7 != 0 goto label07;

        $r10 = "Invalid group index";

        $r3 = virtualinvoke $r10.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r3);

        $r5 = new kotlin.KotlinNothingValueException;

        specialinvoke $r5.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r5;

     label07:
        $z1 = virtualinvoke r0.<androidx.compose.runtime.SlotTable: boolean ownsAnchor(androidx.compose.runtime.Anchor)>(r1);

        if $z1 == 0 goto label11;

        $r2 = r0.<androidx.compose.runtime.SlotTable: int[] groups>;

        $i1 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$groupSize(int[],int)>($r2, i0);

        i3 = i0 + $i1;

        $i4 = virtualinvoke r1.<androidx.compose.runtime.Anchor: int getLocation$runtime_release()>();

        if i0 > $i4 goto label09;

        if $i4 >= i3 goto label08;

        $z10 = 1;

        goto label10;

     label08:
        $z10 = 0;

        goto label10;

     label09:
        $z10 = 0;

     label10:
        if $z10 == 0 goto label11;

        $z11 = 1;

        goto label12;

     label11:
        $z11 = 0;

     label12:
        return $z11;
    }

    public final void close$runtime_release(androidx.compose.runtime.SlotReader)
    {
        androidx.compose.runtime.SlotTable r0, $r2;
        androidx.compose.runtime.SlotReader r1;
        int $i0, $i1, i2;
        java.lang.String $r3, $r6;
        kotlin.KotlinNothingValueException $r5;
        boolean $z1, z2;

        r0 := @this: androidx.compose.runtime.SlotTable;

        r1 := @parameter0: androidx.compose.runtime.SlotReader;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "reader");

        $r2 = virtualinvoke r1.<androidx.compose.runtime.SlotReader: androidx.compose.runtime.SlotTable getTable$runtime_release()>();

        if $r2 != r0 goto label1;

        $i1 = r0.<androidx.compose.runtime.SlotTable: int readers>;

        if $i1 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        z2 = $z1;

        if z2 != 0 goto label3;

        $r6 = "Unexpected reader close()";

        $r3 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r3);

        $r5 = new kotlin.KotlinNothingValueException;

        specialinvoke $r5.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r5;

     label3:
        i2 = r0.<androidx.compose.runtime.SlotTable: int readers>;

        $i0 = i2 + -1;

        r0.<androidx.compose.runtime.SlotTable: int readers> = $i0;

        return;
    }

    public final void close$runtime_release(androidx.compose.runtime.SlotWriter, int[], int, java.lang.Object[], int, java.util.ArrayList)
    {
        androidx.compose.runtime.SlotTable r0, $r5;
        androidx.compose.runtime.SlotWriter r1;
        int[] r2;
        int i0, i1;
        java.lang.Object[] r3;
        java.util.ArrayList r4;
        java.lang.IllegalArgumentException $r6;
        java.lang.String $r7, $r8;
        boolean $z0, $z1;

        r0 := @this: androidx.compose.runtime.SlotTable;

        r1 := @parameter0: androidx.compose.runtime.SlotWriter;

        r2 := @parameter1: int[];

        i0 := @parameter2: int;

        r3 := @parameter3: java.lang.Object[];

        i1 := @parameter4: int;

        r4 := @parameter5: java.util.ArrayList;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "writer");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "groups");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "slots");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "anchors");

        $r5 = virtualinvoke r1.<androidx.compose.runtime.SlotWriter: androidx.compose.runtime.SlotTable getTable$runtime_release()>();

        if $r5 != r0 goto label1;

        $z0 = r0.<androidx.compose.runtime.SlotTable: boolean writer>;

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 != 0 goto label3;

        $r8 = "Unexpected writer close()";

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label3:
        r0.<androidx.compose.runtime.SlotTable: boolean writer> = 0;

        virtualinvoke r0.<androidx.compose.runtime.SlotTable: void setTo$runtime_release(int[],int,java.lang.Object[],int,java.util.ArrayList)>(r2, i0, r3, i1, r4);

        return;
    }

    public final void setTo$runtime_release(int[], int, java.lang.Object[], int, java.util.ArrayList)
    {
        androidx.compose.runtime.SlotTable r0;
        int[] r1;
        int i0, i1;
        java.lang.Object[] r2;
        java.util.ArrayList r3;

        r0 := @this: androidx.compose.runtime.SlotTable;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object[];

        i1 := @parameter3: int;

        r3 := @parameter4: java.util.ArrayList;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "groups");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "slots");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "anchors");

        r0.<androidx.compose.runtime.SlotTable: int[] groups> = r1;

        r0.<androidx.compose.runtime.SlotTable: int groupsSize> = i0;

        r0.<androidx.compose.runtime.SlotTable: java.lang.Object[] slots> = r2;

        r0.<androidx.compose.runtime.SlotTable: int slotsSize> = i1;

        r0.<androidx.compose.runtime.SlotTable: java.util.ArrayList anchors> = r3;

        return;
    }

    public final java.util.List invalidateGroupsWithKey$runtime_release(int)
    {
        androidx.compose.runtime.SlotTable r0, r11, r16;
        int i0, i1, $i3, $i4, i5;
        java.util.List r1, r2, $r21;
        kotlin.jvm.internal.Ref$BooleanRef r3, $r8;
        java.lang.Object r4;
        androidx.compose.runtime.Anchor r5;
        java.util.ArrayList $r6, $r7;
        boolean $z1;
        java.lang.Throwable $r9, $r10, r20;
        androidx.compose.runtime.SlotReader r12, r13;
        kotlin.Unit $r14;
        androidx.compose.runtime.SlotWriter r17, r18;

        r0 := @this: androidx.compose.runtime.SlotTable;

        i0 := @parameter0: int;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r1 = (java.util.List) $r6;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r2 = (java.util.List) $r7;

        $r8 = new kotlin.jvm.internal.Ref$BooleanRef;

        specialinvoke $r8.<kotlin.jvm.internal.Ref$BooleanRef: void <init>()>();

        r3 = $r8;

        r3.<kotlin.jvm.internal.Ref$BooleanRef: boolean element> = 1;

        r11 = r0;

        r12 = virtualinvoke r11.<androidx.compose.runtime.SlotTable: androidx.compose.runtime.SlotReader openReader()>();

     label01:
        r13 = r12;

        staticinvoke <androidx.compose.runtime.SlotTable: void invalidateGroupsWithKey$lambda-14$scanGroup(androidx.compose.runtime.SlotReader,int,java.util.List,kotlin.jvm.internal.Ref$BooleanRef,androidx.compose.runtime.SlotTable,java.util.List)>(r13, i0, r1, r3, r0, r2);

        $r14 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label02:
        virtualinvoke r12.<androidx.compose.runtime.SlotReader: void close()>();

        goto label05;

     label03:
        $r9 := @caughtexception;

     label04:
        virtualinvoke r12.<androidx.compose.runtime.SlotReader: void close()>();

        throw $r9;

     label05:
        r16 = r0;

        r17 = virtualinvoke r16.<androidx.compose.runtime.SlotTable: androidx.compose.runtime.SlotWriter openWriter()>();

     label06:
        r18 = r17;

        virtualinvoke r18.<androidx.compose.runtime.SlotWriter: void startGroup()>();

        i5 = 0;

        i1 = interfaceinvoke r1.<java.util.List: int size()>();

     label07:
        if i5 >= i1 goto label09;

        r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i5);

        r5 = (androidx.compose.runtime.Anchor) r4;

        $i3 = virtualinvoke r5.<androidx.compose.runtime.Anchor: int toIndexFor(androidx.compose.runtime.SlotWriter)>(r18);

        $i4 = virtualinvoke r18.<androidx.compose.runtime.SlotWriter: int getCurrentGroup()>();

        if $i3 < $i4 goto label08;

        virtualinvoke r18.<androidx.compose.runtime.SlotWriter: void seek(androidx.compose.runtime.Anchor)>(r5);

        virtualinvoke r18.<androidx.compose.runtime.SlotWriter: void bashGroup$runtime_release()>();

     label08:
        i5 = i5 + 1;

        goto label07;

     label09:
        virtualinvoke r18.<androidx.compose.runtime.SlotWriter: void skipToGroupEnd()>();

        virtualinvoke r18.<androidx.compose.runtime.SlotWriter: int endGroup()>();

     label10:
        virtualinvoke r17.<androidx.compose.runtime.SlotWriter: void close()>();

        goto label13;

     label11:
        $r10 := @caughtexception;

        r20 = $r10;

     label12:
        virtualinvoke r17.<androidx.compose.runtime.SlotWriter: void close()>();

        throw r20;

     label13:
        $z1 = r3.<kotlin.jvm.internal.Ref$BooleanRef: boolean element>;

        if $z1 == 0 goto label14;

        $r21 = r2;

        goto label15;

     label14:
        $r21 = null;

     label15:
        return $r21;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch java.lang.Throwable from label06 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public final boolean containsMark()
    {
        androidx.compose.runtime.SlotTable r0;
        int $i0;
        int[] $r1;
        boolean $z0, $z1;

        r0 := @this: androidx.compose.runtime.SlotTable;

        $i0 = r0.<androidx.compose.runtime.SlotTable: int groupsSize>;

        if $i0 <= 0 goto label1;

        $r1 = r0.<androidx.compose.runtime.SlotTable: int[] groups>;

        $z0 = staticinvoke <androidx.compose.runtime.SlotTableKt: boolean access$containsMark(int[],int)>($r1, 0);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private final androidx.compose.runtime.RecomposeScopeImpl findEffectiveRecomposeScope(int)
    {
        androidx.compose.runtime.SlotTable r0;
        int i0, i1;
        java.util.Iterator r1;
        java.lang.Object r2;
        androidx.compose.runtime.DataIterator $r3;
        boolean $z0, $z1;
        int[] $r4;
        androidx.compose.runtime.RecomposeScopeImpl $r5;

        r0 := @this: androidx.compose.runtime.SlotTable;

        i0 := @parameter0: int;

        i1 = i0;

     label1:
        if i1 <= 0 goto label4;

        $r3 = new androidx.compose.runtime.DataIterator;

        specialinvoke $r3.<androidx.compose.runtime.DataIterator: void <init>(androidx.compose.runtime.SlotTable,int)>(r0, i1);

        r1 = virtualinvoke $r3.<androidx.compose.runtime.DataIterator: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $z1 = r2 instanceof androidx.compose.runtime.RecomposeScopeImpl;

        if $z1 == 0 goto label2;

        $r5 = (androidx.compose.runtime.RecomposeScopeImpl) r2;

        return $r5;

     label3:
        $r4 = r0.<androidx.compose.runtime.SlotTable: int[] groups>;

        i1 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$parentAnchor(int[],int)>($r4, i1);

        goto label1;

     label4:
        return null;
    }

    private final boolean invalidateGroup(int)
    {
        androidx.compose.runtime.SlotTable r0;
        int i0, i1;
        java.util.Iterator r1;
        java.lang.Object r2;
        androidx.compose.runtime.DataIterator $r3;
        boolean $z0, $z1, $z2;
        int[] $r4;
        androidx.compose.runtime.RecomposeScopeImpl $r5, $r6;
        androidx.compose.runtime.InvalidationResult $r7, $r8;

        r0 := @this: androidx.compose.runtime.SlotTable;

        i0 := @parameter0: int;

        i1 = i0;

     label1:
        if i1 < 0 goto label6;

        $r3 = new androidx.compose.runtime.DataIterator;

        specialinvoke $r3.<androidx.compose.runtime.DataIterator: void <init>(androidx.compose.runtime.SlotTable,int)>(r0, i1);

        r1 = virtualinvoke $r3.<androidx.compose.runtime.DataIterator: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $z1 = r2 instanceof androidx.compose.runtime.RecomposeScopeImpl;

        if $z1 == 0 goto label2;

        $r5 = (androidx.compose.runtime.RecomposeScopeImpl) r2;

        virtualinvoke $r5.<androidx.compose.runtime.RecomposeScopeImpl: void setRequiresRecompose(boolean)>(1);

        $r6 = (androidx.compose.runtime.RecomposeScopeImpl) r2;

        $r7 = virtualinvoke $r6.<androidx.compose.runtime.RecomposeScopeImpl: androidx.compose.runtime.InvalidationResult invalidateForResult(java.lang.Object)>(null);

        $r8 = <androidx.compose.runtime.InvalidationResult: androidx.compose.runtime.InvalidationResult IGNORED>;

        if $r7 == $r8 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;

     label5:
        $r4 = r0.<androidx.compose.runtime.SlotTable: int[] groups>;

        i1 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$parentAnchor(int[],int)>($r4, i1);

        goto label1;

     label6:
        return 0;
    }

    public final void verifyWellFormed()
    {
        androidx.compose.runtime.SlotTable r0;
        kotlin.jvm.internal.Ref$IntRef r1, r22;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i15, i16;
        java.lang.Object r2;
        androidx.compose.runtime.Anchor r3;
        java.util.ArrayList $r5;
        java.lang.String $r7, $r9, $r16, $r18, $r20, $r21;
        java.lang.StringBuilder $r11, $r12, $r13, $r14, r23;
        int[] $r17;
        boolean $z2, z4, $z5, $z7;
        java.util.List $r19;
        java.lang.IllegalStateException r24;
        java.lang.IllegalArgumentException r25, r26;
        java.lang.Throwable r27;

        r0 := @this: androidx.compose.runtime.SlotTable;

        r22 = new kotlin.jvm.internal.Ref$IntRef;

        specialinvoke r22.<kotlin.jvm.internal.Ref$IntRef: void <init>()>();

        r1 = r22;

        $i2 = r0.<androidx.compose.runtime.SlotTable: int groupsSize>;

        if $i2 <= 0 goto label05;

     label01:
        $i5 = r1.<kotlin.jvm.internal.Ref$IntRef: int element>;

        $i4 = r0.<androidx.compose.runtime.SlotTable: int groupsSize>;

        if $i5 >= $i4 goto label02;

        $i11 = r1.<kotlin.jvm.internal.Ref$IntRef: int element>;

        $r17 = r0.<androidx.compose.runtime.SlotTable: int[] groups>;

        $i10 = r1.<kotlin.jvm.internal.Ref$IntRef: int element>;

        $i12 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$groupSize(int[],int)>($r17, $i10);

        $i13 = $i11 + $i12;

        staticinvoke <androidx.compose.runtime.SlotTable: int verifyWellFormed$validateGroup(kotlin.jvm.internal.Ref$IntRef,androidx.compose.runtime.SlotTable,int,int)>(r1, r0, -1, $i13);

        goto label01;

     label02:
        $i7 = r1.<kotlin.jvm.internal.Ref$IntRef: int element>;

        $i6 = r0.<androidx.compose.runtime.SlotTable: int groupsSize>;

        if $i7 != $i6 goto label03;

        $z2 = 1;

        goto label04;

     label03:
        $z2 = 0;

     label04:
        if $z2 != 0 goto label05;

        r23 = new java.lang.StringBuilder;

        specialinvoke r23.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incomplete group at root ");

        $i8 = r1.<kotlin.jvm.internal.Ref$IntRef: int element>;

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" expected to be ");

        $i9 = r0.<androidx.compose.runtime.SlotTable: int groupsSize>;

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        r24 = new java.lang.IllegalStateException;

        $r16 = virtualinvoke $r18.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r24.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r16);

        r27 = (java.lang.Throwable) r24;

        throw r27;

     label05:
        z4 = 0;

        i15 = -1;

        $r5 = r0.<androidx.compose.runtime.SlotTable: java.util.ArrayList anchors>;

        $r19 = (java.util.List) $r5;

        i16 = 0;

        i0 = interfaceinvoke $r19.<java.util.List: int size()>();

     label06:
        if i16 >= i0 goto label14;

        r2 = interfaceinvoke $r19.<java.util.List: java.lang.Object get(int)>(i16);

        r3 = (androidx.compose.runtime.Anchor) r2;

        i1 = virtualinvoke r3.<androidx.compose.runtime.Anchor: int toIndexFor(androidx.compose.runtime.SlotTable)>(r0);

        if 0 > i1 goto label08;

        $i3 = r0.<androidx.compose.runtime.SlotTable: int groupsSize>;

        if i1 > $i3 goto label07;

        $z5 = 1;

        goto label09;

     label07:
        $z5 = 0;

        goto label09;

     label08:
        $z5 = 0;

     label09:
        if $z5 != 0 goto label10;

        $r20 = "Invalid anchor, location out of bound";

        r25 = new java.lang.IllegalArgumentException;

        $r9 = virtualinvoke $r20.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw r25;

     label10:
        if i15 >= i1 goto label11;

        $z7 = 1;

        goto label12;

     label11:
        $z7 = 0;

     label12:
        if $z7 != 0 goto label13;

        $r21 = "Anchor is out of order";

        r26 = new java.lang.IllegalArgumentException;

        $r7 = virtualinvoke $r21.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r26.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw r26;

     label13:
        i15 = i1;

        i16 = i16 + 1;

        goto label06;

     label14:
        return;
    }

    public final java.lang.String asString()
    {
        androidx.compose.runtime.SlotTable r0;
        java.lang.StringBuilder r1, $r3;
        int i0, $i1, i2;
        boolean $z1;
        java.lang.String $r4, $r8;

        r0 := @this: androidx.compose.runtime.SlotTable;

        $z1 = r0.<androidx.compose.runtime.SlotTable: boolean writer>;

        if $z1 == 0 goto label1;

        $r8 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        goto label5;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        r1 = $r3;

        $r4 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        i0 = r0.<androidx.compose.runtime.SlotTable: int groupsSize>;

        if i0 <= 0 goto label3;

        i2 = 0;

     label2:
        if i2 >= i0 goto label4;

        $i1 = specialinvoke r0.<androidx.compose.runtime.SlotTable: int emitGroup(java.lang.StringBuilder,int,int)>(r1, i2, 0);

        i2 = i2 + $i1;

        goto label2;

     label3:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<EMPTY>");

     label4:
        $r8 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r8, "StringBuilder().apply(builderAction).toString()");

     label5:
        return $r8;
    }

    private final int emitGroup(java.lang.StringBuilder, int, int)
    {
        androidx.compose.runtime.SlotTable r0;
        java.lang.StringBuilder $r1, $r15, $r16, $r17, $r18, $r19, $r20, $r37, $r38, $r42, $r45, $r46, $r50, $r53, $r54, $r58;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13, i14, $i15, i16, i17, i18, i19;
        int[] $r5, $r7, $r9, $r13, $r14, $r24, $r25, $r26, $r27, $r39, $r47, $r55;
        boolean $z0, $z1, $z2, $z3, $z4, $z6;
        java.lang.String $r21, $r34, $r43, $r51, $r59;
        java.lang.Object[] $r32, $r40, $r48, $r56;
        java.lang.Object $r33, $r41, $r49, $r57;

        r0 := @this: androidx.compose.runtime.SlotTable;

        $r1 := @parameter0: java.lang.StringBuilder;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i11 = 0;

     label01:
        if i11 >= i1 goto label02;

        i12 = i11;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        i11 = i11 + 1;

        goto label01;

     label02:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Group(");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") key=");

        $r5 = r0.<androidx.compose.runtime.SlotTable: int[] groups>;

        $i2 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$key(int[],int)>($r5, i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r7 = r0.<androidx.compose.runtime.SlotTable: int[] groups>;

        i13 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$groupSize(int[],int)>($r7, i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", nodes=");

        $r9 = r0.<androidx.compose.runtime.SlotTable: int[] groups>;

        $i3 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$nodeCount(int[],int)>($r9, i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", size=");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i13);

        $r13 = r0.<androidx.compose.runtime.SlotTable: int[] groups>;

        $z0 = staticinvoke <androidx.compose.runtime.SlotTableKt: boolean access$hasMark(int[],int)>($r13, i0);

        if $z0 == 0 goto label03;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mark");

     label03:
        $r14 = r0.<androidx.compose.runtime.SlotTable: int[] groups>;

        $z1 = staticinvoke <androidx.compose.runtime.SlotTableKt: boolean access$containsMark(int[],int)>($r14, i0);

        if $z1 == 0 goto label04;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", contains mark");

     label04:
        i14 = staticinvoke <androidx.compose.runtime.SlotTable: int emitGroup$dataIndex(androidx.compose.runtime.SlotTable,int)>(r0, i0);

        $i4 = i0 + 1;

        $i15 = staticinvoke <androidx.compose.runtime.SlotTable: int emitGroup$dataIndex(androidx.compose.runtime.SlotTable,int)>(r0, $i4);

        if 0 > i14 goto label06;

        if i14 > $i15 goto label05;

        $z6 = 1;

        goto label07;

     label05:
        $z6 = 0;

        goto label07;

     label06:
        $z6 = 0;

     label07:
        if $z6 == 0 goto label14;

        $i7 = r0.<androidx.compose.runtime.SlotTable: int slotsSize>;

        if $i15 > $i7 goto label14;

        $r24 = r0.<androidx.compose.runtime.SlotTable: int[] groups>;

        $z2 = staticinvoke <androidx.compose.runtime.SlotTableKt: boolean access$hasObjectKey(int[],int)>($r24, i0);

        if $z2 == 0 goto label08;

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" objectKey=");

        $r56 = r0.<androidx.compose.runtime.SlotTable: java.lang.Object[] slots>;

        $r55 = r0.<androidx.compose.runtime.SlotTable: int[] groups>;

        $i10 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$objectKeyIndex(int[],int)>($r55, i0);

        $r57 = $r56[$i10];

        $r58 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r57);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r59);

     label08:
        $r25 = r0.<androidx.compose.runtime.SlotTable: int[] groups>;

        $z3 = staticinvoke <androidx.compose.runtime.SlotTableKt: boolean access$isNode(int[],int)>($r25, i0);

        if $z3 == 0 goto label09;

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" node=");

        $r48 = r0.<androidx.compose.runtime.SlotTable: java.lang.Object[] slots>;

        $r47 = r0.<androidx.compose.runtime.SlotTable: int[] groups>;

        $i9 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$nodeIndex(int[],int)>($r47, i0);

        $r49 = $r48[$i9];

        $r50 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r49);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r51);

     label09:
        $r26 = r0.<androidx.compose.runtime.SlotTable: int[] groups>;

        $z4 = staticinvoke <androidx.compose.runtime.SlotTableKt: boolean access$hasAux(int[],int)>($r26, i0);

        if $z4 == 0 goto label10;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" aux=");

        $r40 = r0.<androidx.compose.runtime.SlotTable: java.lang.Object[] slots>;

        $r39 = r0.<androidx.compose.runtime.SlotTable: int[] groups>;

        $i8 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$auxIndex(int[],int)>($r39, i0);

        $r41 = $r40[$i8];

        $r42 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r41);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

     label10:
        $r27 = r0.<androidx.compose.runtime.SlotTable: int[] groups>;

        i16 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$slotAnchor(int[],int)>($r27, i0);

        if i16 >= $i15 goto label15;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", slots=[");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i16);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        i17 = i16;

     label11:
        if i17 >= $i15 goto label13;

        if i17 == i16 goto label12;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label12:
        $r32 = r0.<androidx.compose.runtime.SlotTable: java.lang.Object[] slots>;

        $r33 = $r32[i17];

        $r34 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r33);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        i17 = i17 + 1;

        goto label11;

     label13:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        goto label15;

     label14:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", *invalid data offsets ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i14);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i15);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(42);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

     label15:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        i18 = i0 + 1;

        i19 = i0 + i13;

     label16:
        if i18 >= i19 goto label17;

        $i5 = i1 + 1;

        $i6 = specialinvoke r0.<androidx.compose.runtime.SlotTable: int emitGroup(java.lang.StringBuilder,int,int)>($r1, i18, $i5);

        i18 = i18 + $i6;

        goto label16;

     label17:
        return i13;
    }

    private final java.util.List keys()
    {
        androidx.compose.runtime.SlotTable r0;
        int $i0, $i1;
        int[] $r1;
        java.util.List $r2;

        r0 := @this: androidx.compose.runtime.SlotTable;

        $r1 = r0.<androidx.compose.runtime.SlotTable: int[] groups>;

        $i0 = r0.<androidx.compose.runtime.SlotTable: int groupsSize>;

        $i1 = $i0 * 5;

        $r2 = staticinvoke <androidx.compose.runtime.SlotTableKt: java.util.List access$keys(int[],int)>($r1, $i1);

        return $r2;
    }

    private final java.util.List nodes()
    {
        androidx.compose.runtime.SlotTable r0;
        int $i0, $i1;
        int[] $r1;
        java.util.List $r2;

        r0 := @this: androidx.compose.runtime.SlotTable;

        $r1 = r0.<androidx.compose.runtime.SlotTable: int[] groups>;

        $i0 = r0.<androidx.compose.runtime.SlotTable: int groupsSize>;

        $i1 = $i0 * 5;

        $r2 = staticinvoke <androidx.compose.runtime.SlotTableKt: java.util.List access$nodeCounts(int[],int)>($r1, $i1);

        return $r2;
    }

    private final java.util.List parentIndexes()
    {
        androidx.compose.runtime.SlotTable r0;
        int $i0, $i1;
        int[] $r1;
        java.util.List $r2;

        r0 := @this: androidx.compose.runtime.SlotTable;

        $r1 = r0.<androidx.compose.runtime.SlotTable: int[] groups>;

        $i0 = r0.<androidx.compose.runtime.SlotTable: int groupsSize>;

        $i1 = $i0 * 5;

        $r2 = staticinvoke <androidx.compose.runtime.SlotTableKt: java.util.List access$parentAnchors(int[],int)>($r1, $i1);

        return $r2;
    }

    private final java.util.List dataIndexes()
    {
        androidx.compose.runtime.SlotTable r0;
        int $i0, $i1;
        int[] $r1;
        java.util.List $r2;

        r0 := @this: androidx.compose.runtime.SlotTable;

        $r1 = r0.<androidx.compose.runtime.SlotTable: int[] groups>;

        $i0 = r0.<androidx.compose.runtime.SlotTable: int groupsSize>;

        $i1 = $i0 * 5;

        $r2 = staticinvoke <androidx.compose.runtime.SlotTableKt: java.util.List access$dataAnchors(int[],int)>($r1, $i1);

        return $r2;
    }

    private final java.util.List groupSizes()
    {
        androidx.compose.runtime.SlotTable r0;
        int $i0, $i1;
        int[] $r1;
        java.util.List $r2;

        r0 := @this: androidx.compose.runtime.SlotTable;

        $r1 = r0.<androidx.compose.runtime.SlotTable: int[] groups>;

        $i0 = r0.<androidx.compose.runtime.SlotTable: int groupsSize>;

        $i1 = $i0 * 5;

        $r2 = staticinvoke <androidx.compose.runtime.SlotTableKt: java.util.List access$groupSizes(int[],int)>($r1, $i1);

        return $r2;
    }

    public final java.util.List slotsOf$runtime_release(int)
    {
        androidx.compose.runtime.SlotTable r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        int[] $r1, $r6;
        java.lang.Object[] $r2, $r3;
        java.util.List $r4, $r5;

        r0 := @this: androidx.compose.runtime.SlotTable;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.compose.runtime.SlotTable: int[] groups>;

        i1 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$dataAnchor(int[],int)>($r1, i0);

        $i4 = i0 + 1;

        $i3 = r0.<androidx.compose.runtime.SlotTable: int groupsSize>;

        if $i4 >= $i3 goto label1;

        $r6 = r0.<androidx.compose.runtime.SlotTable: int[] groups>;

        $i5 = i0 + 1;

        $i6 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$dataAnchor(int[],int)>($r6, $i5);

        goto label2;

     label1:
        $r2 = r0.<androidx.compose.runtime.SlotTable: java.lang.Object[] slots>;

        $i6 = lengthof $r2;

     label2:
        i2 = $i6;

        $r3 = r0.<androidx.compose.runtime.SlotTable: java.lang.Object[] slots>;

        $r4 = staticinvoke <kotlin.collections.ArraysKt: java.util.List toList(java.lang.Object[])>($r3);

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.List subList(int,int)>(i1, i2);

        return $r5;
    }

    public java.lang.Iterable getCompositionGroups()
    {
        androidx.compose.runtime.SlotTable r0;
        java.lang.Iterable $r1;

        r0 := @this: androidx.compose.runtime.SlotTable;

        $r1 = (java.lang.Iterable) r0;

        return $r1;
    }

    public java.util.Iterator iterator()
    {
        androidx.compose.runtime.SlotTable r0;
        androidx.compose.runtime.GroupIterator $r1;
        int $i0;
        java.util.Iterator $r2;

        r0 := @this: androidx.compose.runtime.SlotTable;

        $r1 = new androidx.compose.runtime.GroupIterator;

        $i0 = r0.<androidx.compose.runtime.SlotTable: int groupsSize>;

        specialinvoke $r1.<androidx.compose.runtime.GroupIterator: void <init>(androidx.compose.runtime.SlotTable,int,int)>(r0, 0, $i0);

        $r2 = (java.util.Iterator) $r1;

        return $r2;
    }

    public androidx.compose.runtime.tooling.CompositionGroup find(java.lang.Object)
    {
        androidx.compose.runtime.SlotTable r0;
        java.lang.Object r1;
        androidx.compose.runtime.SlotTableGroup $r2;
        androidx.compose.runtime.tooling.CompositionGroup $r3;

        r0 := @this: androidx.compose.runtime.SlotTable;

        r1 := @parameter0: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "identityToFind");

        $r2 = new androidx.compose.runtime.SlotTableGroup;

        specialinvoke $r2.<androidx.compose.runtime.SlotTableGroup: void <init>(androidx.compose.runtime.SlotTable,int,int,int,kotlin.jvm.internal.DefaultConstructorMarker)>(r0, 0, 0, 4, null);

        $r3 = virtualinvoke $r2.<androidx.compose.runtime.SlotTableGroup: androidx.compose.runtime.tooling.CompositionGroup find(java.lang.Object)>(r1);

        return $r3;
    }

    private static final void invalidateGroupsWithKey$lambda-14$scanGroup(androidx.compose.runtime.SlotReader, int, java.util.List, kotlin.jvm.internal.Ref$BooleanRef, androidx.compose.runtime.SlotTable, java.util.List)
    {
        androidx.compose.runtime.SlotReader $r0;
        int $i0, i1, $i3;
        java.util.List r1, r4;
        kotlin.jvm.internal.Ref$BooleanRef r2;
        androidx.compose.runtime.SlotTable r3;
        androidx.compose.runtime.RecomposeScopeImpl r5;
        boolean $z0, $z2;
        androidx.compose.runtime.Anchor $r6;

        $r0 := @parameter0: androidx.compose.runtime.SlotReader;

        $i0 := @parameter1: int;

        r1 := @parameter2: java.util.List;

        r2 := @parameter3: kotlin.jvm.internal.Ref$BooleanRef;

        r3 := @parameter4: androidx.compose.runtime.SlotTable;

        r4 := @parameter5: java.util.List;

        i1 = virtualinvoke $r0.<androidx.compose.runtime.SlotReader: int getGroupKey()>();

        if i1 != $i0 goto label3;

        $r6 = staticinvoke <androidx.compose.runtime.SlotReader: androidx.compose.runtime.Anchor anchor$default(androidx.compose.runtime.SlotReader,int,int,java.lang.Object)>($r0, 0, 1, null);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r6);

        $z2 = r2.<kotlin.jvm.internal.Ref$BooleanRef: boolean element>;

        if $z2 == 0 goto label2;

        $i3 = virtualinvoke $r0.<androidx.compose.runtime.SlotReader: int getCurrentGroup()>();

        r5 = specialinvoke r3.<androidx.compose.runtime.SlotTable: androidx.compose.runtime.RecomposeScopeImpl findEffectiveRecomposeScope(int)>($i3);

        if r5 == null goto label1;

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r5);

        goto label2;

     label1:
        r2.<kotlin.jvm.internal.Ref$BooleanRef: boolean element> = 0;

        interfaceinvoke r4.<java.util.List: void clear()>();

     label2:
        virtualinvoke $r0.<androidx.compose.runtime.SlotReader: int skipGroup()>();

        return;

     label3:
        virtualinvoke $r0.<androidx.compose.runtime.SlotReader: void startGroup()>();

     label4:
        $z0 = virtualinvoke $r0.<androidx.compose.runtime.SlotReader: boolean isGroupEnd()>();

        if $z0 != 0 goto label5;

        staticinvoke <androidx.compose.runtime.SlotTable: void invalidateGroupsWithKey$lambda-14$scanGroup(androidx.compose.runtime.SlotReader,int,java.util.List,kotlin.jvm.internal.Ref$BooleanRef,androidx.compose.runtime.SlotTable,java.util.List)>($r0, $i0, r1, r2, r3, r4);

        goto label4;

     label5:
        virtualinvoke $r0.<androidx.compose.runtime.SlotReader: void endGroup()>();

        return;
    }

    private static final int verifyWellFormed$validateGroup(kotlin.jvm.internal.Ref$IntRef, androidx.compose.runtime.SlotTable, int, int)
    {
        kotlin.jvm.internal.Ref$IntRef r0;
        androidx.compose.runtime.SlotTable r1;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, i22, i23, $i24, $i25, $i26, $i31, $i32, $i33;
        int[] $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r22, $r46, $r95;
        java.lang.Object[] $r6, $r47;
        boolean $z0, $z1, $z2, $z3, $z4, $z6, $z8, $z10, $z12, $z14, $z16, $z17, $z19, $z20, $z22, $z24, $z26;
        java.lang.StringBuilder $r15, $r16, $r17, $r18, $r19, $r24, $r25, $r26, $r27, $r28, $r29, $r33, $r34, $r35, $r36, $r37, $r38, $r42, $r43, $r50, $r51, $r55, $r56, $r60, $r61, $r65, $r66, $r67, $r71, $r72, $r76, $r77, $r81, $r82, $r83, $r84, $r85, $r86, r101, r103, r105, r107, r109, r111, r113, r115, r117, r119, r121;
        java.lang.String $r21, $r31, $r40, $r45, $r53, $r58, $r63, $r69, $r74, $r79, $r88, $r89, $r90, $r91, $r92, $r93, $r94, $r96, $r97, $r98, $r99, $r100;
        java.lang.Object $r48;
        byte $b28, $b29, $b30;
        java.lang.IllegalStateException r102, r104, r106, r108, r110, r112, r114, r116, r118, r120, r122;
        java.lang.Throwable r123, r124, r125, r126, r127, r128, r129, r130, r131, r132, r133;

        r0 := @parameter0: kotlin.jvm.internal.Ref$IntRef;

        r1 := @parameter1: androidx.compose.runtime.SlotTable;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i22 = r0.<kotlin.jvm.internal.Ref$IntRef: int element>;

        $i7 = i22 + 1;

        r0.<kotlin.jvm.internal.Ref$IntRef: int element> = $i7;

        i2 = i22;

        $r2 = r1.<androidx.compose.runtime.SlotTable: int[] groups>;

        i23 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$parentAnchor(int[],int)>($r2, i2);

        if i23 != i0 goto label01;

        $z4 = 1;

        goto label02;

     label01:
        $z4 = 0;

     label02:
        if $z4 != 0 goto label03;

        r101 = new java.lang.StringBuilder;

        specialinvoke r101.<java.lang.StringBuilder: void <init>()>();

        $r81 = virtualinvoke r101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid parent index detected at ");

        $r82 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r83 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", expected parent index to be ");

        $r84 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r85 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" found ");

        $r86 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i23);

        $r89 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.String toString()>();

        r102 = new java.lang.IllegalStateException;

        $r88 = virtualinvoke $r89.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r102.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r88);

        r123 = (java.lang.Throwable) r102;

        throw r123;

     label03:
        $r3 = r1.<androidx.compose.runtime.SlotTable: int[] groups>;

        $i8 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$groupSize(int[],int)>($r3, i2);

        i3 = i2 + $i8;

        $i9 = r1.<androidx.compose.runtime.SlotTable: int groupsSize>;

        if i3 > $i9 goto label04;

        $z6 = 1;

        goto label05;

     label04:
        $z6 = 0;

     label05:
        if $z6 != 0 goto label06;

        r103 = new java.lang.StringBuilder;

        specialinvoke r103.<java.lang.StringBuilder: void <init>()>();

        $r76 = virtualinvoke r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("A group extends past the end of the table at ");

        $r77 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r90 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.String toString()>();

        r104 = new java.lang.IllegalStateException;

        $r79 = virtualinvoke $r90.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r104.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r79);

        r124 = (java.lang.Throwable) r104;

        throw r124;

     label06:
        if i3 > i1 goto label07;

        $z8 = 1;

        goto label08;

     label07:
        $z8 = 0;

     label08:
        if $z8 != 0 goto label09;

        r105 = new java.lang.StringBuilder;

        specialinvoke r105.<java.lang.StringBuilder: void <init>()>();

        $r71 = virtualinvoke r105.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("A group extends past its parent group at ");

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r91 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.String toString()>();

        r106 = new java.lang.IllegalStateException;

        $r74 = virtualinvoke $r91.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r106.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r74);

        r125 = (java.lang.Throwable) r106;

        throw r125;

     label09:
        $r4 = r1.<androidx.compose.runtime.SlotTable: int[] groups>;

        $i24 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$dataAnchor(int[],int)>($r4, i2);

        $i10 = r1.<androidx.compose.runtime.SlotTable: int groupsSize>;

        $i11 = $i10 - 1;

        if i2 < $i11 goto label10;

        $i25 = r1.<androidx.compose.runtime.SlotTable: int slotsSize>;

        goto label11;

     label10:
        $r5 = r1.<androidx.compose.runtime.SlotTable: int[] groups>;

        $i12 = i2 + 1;

        $i25 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$dataAnchor(int[],int)>($r5, $i12);

     label11:
        $i26 = $i25;

        $r6 = r1.<androidx.compose.runtime.SlotTable: java.lang.Object[] slots>;

        $i13 = lengthof $r6;

        if $i25 > $i13 goto label12;

        $z10 = 1;

        goto label13;

     label12:
        $z10 = 0;

     label13:
        if $z10 != 0 goto label14;

        r107 = new java.lang.StringBuilder;

        specialinvoke r107.<java.lang.StringBuilder: void <init>()>();

        $r65 = virtualinvoke r107.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Slots for ");

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" extend past the end of the slot table");

        $r92 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>();

        r108 = new java.lang.IllegalStateException;

        $r69 = virtualinvoke $r92.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r108.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r69);

        r126 = (java.lang.Throwable) r108;

        throw r126;

     label14:
        if $i24 > $i26 goto label15;

        $z12 = 1;

        goto label16;

     label15:
        $z12 = 0;

     label16:
        if $z12 != 0 goto label17;

        r109 = new java.lang.StringBuilder;

        specialinvoke r109.<java.lang.StringBuilder: void <init>()>();

        $r60 = virtualinvoke r109.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid data anchor at ");

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r93 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();

        r110 = new java.lang.IllegalStateException;

        $r63 = virtualinvoke $r93.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r110.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r63);

        r127 = (java.lang.Throwable) r110;

        throw r127;

     label17:
        $r7 = r1.<androidx.compose.runtime.SlotTable: int[] groups>;

        i4 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$slotAnchor(int[],int)>($r7, i2);

        if i4 > $i26 goto label18;

        $z14 = 1;

        goto label19;

     label18:
        $z14 = 0;

     label19:
        if $z14 != 0 goto label20;

        r111 = new java.lang.StringBuilder;

        specialinvoke r111.<java.lang.StringBuilder: void <init>()>();

        $r55 = virtualinvoke r111.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Slots start out of range at ");

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r94 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        r112 = new java.lang.IllegalStateException;

        $r58 = virtualinvoke $r94.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r112.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r58);

        r128 = (java.lang.Throwable) r112;

        throw r128;

     label20:
        $r8 = r1.<androidx.compose.runtime.SlotTable: int[] groups>;

        $z0 = staticinvoke <androidx.compose.runtime.SlotTableKt: boolean access$isNode(int[],int)>($r8, i2);

        if $z0 == 0 goto label21;

        $b28 = 1;

        goto label22;

     label21:
        $b28 = 0;

     label22:
        $r9 = r1.<androidx.compose.runtime.SlotTable: int[] groups>;

        $z1 = staticinvoke <androidx.compose.runtime.SlotTableKt: boolean access$hasObjectKey(int[],int)>($r9, i2);

        if $z1 == 0 goto label23;

        $b29 = 1;

        goto label24;

     label23:
        $b29 = 0;

     label24:
        $i14 = $b28 + $b29;

        $r95 = r1.<androidx.compose.runtime.SlotTable: int[] groups>;

        $z16 = staticinvoke <androidx.compose.runtime.SlotTableKt: boolean access$hasAux(int[],int)>($r95, i2);

        if $z16 == 0 goto label25;

        $b30 = 1;

        goto label26;

     label25:
        $b30 = 0;

     label26:
        $i15 = $i26 - $i24;

        $i20 = $i14 + $b30;

        if $i15 < $i20 goto label27;

        $z17 = 1;

        goto label28;

     label27:
        $z17 = 0;

     label28:
        if $z17 != 0 goto label29;

        r113 = new java.lang.StringBuilder;

        specialinvoke r113.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke r113.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not enough slots added for group ");

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r96 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        r114 = new java.lang.IllegalStateException;

        $r53 = virtualinvoke $r96.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r114.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r53);

        r129 = (java.lang.Throwable) r114;

        throw r129;

     label29:
        $r10 = r1.<androidx.compose.runtime.SlotTable: int[] groups>;

        $z19 = staticinvoke <androidx.compose.runtime.SlotTableKt: boolean access$isNode(int[],int)>($r10, i2);

        if $z19 == 0 goto label30;

        $r47 = r1.<androidx.compose.runtime.SlotTable: java.lang.Object[] slots>;

        $r46 = r1.<androidx.compose.runtime.SlotTable: int[] groups>;

        $i19 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$nodeIndex(int[],int)>($r46, i2);

        $r48 = $r47[$i19];

        if $r48 == null goto label31;

     label30:
        $z20 = 1;

        goto label32;

     label31:
        $z20 = 0;

     label32:
        if $z20 != 0 goto label33;

        r115 = new java.lang.StringBuilder;

        specialinvoke r115.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke r115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No node recorded for a node group at ");

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r97 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        r116 = new java.lang.IllegalStateException;

        $r45 = virtualinvoke $r97.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r116.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r45);

        r130 = (java.lang.Throwable) r116;

        throw r130;

     label33:
        $i31 = 0;

     label34:
        $i16 = r0.<kotlin.jvm.internal.Ref$IntRef: int element>;

        if $i16 >= i3 goto label35;

        $i18 = staticinvoke <androidx.compose.runtime.SlotTable: int verifyWellFormed$validateGroup(kotlin.jvm.internal.Ref$IntRef,androidx.compose.runtime.SlotTable,int,int)>(r0, r1, i2, i3);

        $i31 = $i31 + $i18;

        goto label34;

     label35:
        $r11 = r1.<androidx.compose.runtime.SlotTable: int[] groups>;

        $i32 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$nodeCount(int[],int)>($r11, i2);

        $r12 = r1.<androidx.compose.runtime.SlotTable: int[] groups>;

        i5 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$groupSize(int[],int)>($r12, i2);

        if $i32 != $i31 goto label36;

        $z22 = 1;

        goto label37;

     label36:
        $z22 = 0;

     label37:
        if $z22 != 0 goto label38;

        r117 = new java.lang.StringBuilder;

        specialinvoke r117.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke r117.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incorrect node count detected at ");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", expected ");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i32);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", received ");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i31);

        $r98 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        r118 = new java.lang.IllegalStateException;

        $r40 = virtualinvoke $r98.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r118.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r40);

        r131 = (java.lang.Throwable) r118;

        throw r131;

     label38:
        $i17 = r0.<kotlin.jvm.internal.Ref$IntRef: int element>;

        i6 = $i17 - i2;

        if i5 != i6 goto label39;

        $z24 = 1;

        goto label40;

     label39:
        $z24 = 0;

     label40:
        if $z24 != 0 goto label41;

        r119 = new java.lang.StringBuilder;

        specialinvoke r119.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke r119.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incorrect slot count detected at ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", expected ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", received ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r99 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        r120 = new java.lang.IllegalStateException;

        $r31 = virtualinvoke $r99.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r120.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r31);

        r132 = (java.lang.Throwable) r120;

        throw r132;

     label41:
        $r13 = r1.<androidx.compose.runtime.SlotTable: int[] groups>;

        $z2 = staticinvoke <androidx.compose.runtime.SlotTableKt: boolean access$containsAnyMark(int[],int)>($r13, i2);

        if $z2 == 0 goto label45;

        if i2 <= 0 goto label42;

        $r22 = r1.<androidx.compose.runtime.SlotTable: int[] groups>;

        $z3 = staticinvoke <androidx.compose.runtime.SlotTableKt: boolean access$containsMark(int[],int)>($r22, i0);

        if $z3 == 0 goto label43;

     label42:
        $z26 = 1;

        goto label44;

     label43:
        $z26 = 0;

     label44:
        if $z26 != 0 goto label45;

        r121 = new java.lang.StringBuilder;

        specialinvoke r121.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke r121.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected group ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to record it contains a mark because ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does");

        $r100 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        r122 = new java.lang.IllegalStateException;

        $r21 = virtualinvoke $r100.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r122.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r21);

        r133 = (java.lang.Throwable) r122;

        throw r133;

     label45:
        if $z19 == 0 goto label46;

        $i33 = 1;

        goto label47;

     label46:
        $i33 = $i31;

     label47:
        return $i33;
    }

    private static final int emitGroup$dataIndex(androidx.compose.runtime.SlotTable, int)
    {
        androidx.compose.runtime.SlotTable r0;
        int i0, $i1, $i2;
        int[] $r1;

        r0 := @parameter0: androidx.compose.runtime.SlotTable;

        i0 := @parameter1: int;

        $i1 = r0.<androidx.compose.runtime.SlotTable: int groupsSize>;

        if i0 < $i1 goto label1;

        $i2 = r0.<androidx.compose.runtime.SlotTable: int slotsSize>;

        goto label2;

     label1:
        $r1 = r0.<androidx.compose.runtime.SlotTable: int[] groups>;

        $i2 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$dataAnchor(int[],int)>($r1, i0);

     label2:
        return $i2;
    }

