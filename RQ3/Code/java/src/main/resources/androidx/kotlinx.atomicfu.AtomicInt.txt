kotlinx.atomicfu.AtomicInt
<kotlinx.atomicfu.AtomicInt: kotlinx.atomicfu.AtomicInt$Companion Companion>
<kotlinx.atomicfu.AtomicInt: java.util.concurrent.atomic.AtomicIntegerFieldUpdater FU>
<kotlinx.atomicfu.AtomicInt: kotlinx.atomicfu.TraceBase trace>
<kotlinx.atomicfu.AtomicInt: int value>
    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r0;
        kotlinx.atomicfu.AtomicInt$Companion $r1;

        $r1 = new kotlinx.atomicfu.AtomicInt$Companion;

        specialinvoke $r1.<kotlinx.atomicfu.AtomicInt$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <kotlinx.atomicfu.AtomicInt: kotlinx.atomicfu.AtomicInt$Companion Companion> = $r1;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lkotlinx/atomicfu/AtomicInt;", "value");

        <kotlinx.atomicfu.AtomicInt: java.util.concurrent.atomic.AtomicIntegerFieldUpdater FU> = $r0;

        return;
    }

    public void <init>(int, kotlinx.atomicfu.TraceBase)
    {
        kotlinx.atomicfu.AtomicInt $r0;
        int $i0;
        kotlinx.atomicfu.TraceBase $r1;

        $r0 := @this: kotlinx.atomicfu.AtomicInt;

        $i0 := @parameter0: int;

        $r1 := @parameter1: kotlinx.atomicfu.TraceBase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "trace");

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<kotlinx.atomicfu.AtomicInt: kotlinx.atomicfu.TraceBase trace> = $r1;

        $r0.<kotlinx.atomicfu.AtomicInt: int value> = $i0;

        return;
    }

    public final boolean compareAndSet(int, int)
    {
        kotlinx.atomicfu.AtomicInt $r0;
        int $i0, $i1;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r1;
        boolean $z0;
        kotlinx.atomicfu.TraceBase $r2;
        kotlinx.atomicfu.TraceBase$None $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        $r0 := @this: kotlinx.atomicfu.AtomicInt;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = <kotlinx.atomicfu.AtomicInt: java.util.concurrent.atomic.AtomicIntegerFieldUpdater FU>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>($r0, $i0, $i1);

        if $z0 == 0 goto label1;

        $r2 = $r0.<kotlinx.atomicfu.AtomicInt: kotlinx.atomicfu.TraceBase trace>;

        $r3 = <kotlinx.atomicfu.TraceBase$None: kotlinx.atomicfu.TraceBase$None INSTANCE>;

        if $r2 == $r3 goto label1;

        $r2 = $r0.<kotlinx.atomicfu.AtomicInt: kotlinx.atomicfu.TraceBase trace>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CAS(");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<kotlinx.atomicfu.TraceBase: void append(java.lang.Object)>($r5);

     label1:
        return $z0;
    }

    public final int decrementAndGet()
    {
        kotlinx.atomicfu.AtomicInt $r0;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r1;
        int $i0;
        kotlinx.atomicfu.TraceBase $r2;
        kotlinx.atomicfu.TraceBase$None $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        $r0 := @this: kotlinx.atomicfu.AtomicInt;

        $r1 = <kotlinx.atomicfu.AtomicInt: java.util.concurrent.atomic.AtomicIntegerFieldUpdater FU>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int decrementAndGet(java.lang.Object)>($r0);

        $r2 = $r0.<kotlinx.atomicfu.AtomicInt: kotlinx.atomicfu.TraceBase trace>;

        $r3 = <kotlinx.atomicfu.TraceBase$None: kotlinx.atomicfu.TraceBase$None INSTANCE>;

        if $r2 == $r3 goto label1;

        $r2 = $r0.<kotlinx.atomicfu.AtomicInt: kotlinx.atomicfu.TraceBase trace>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("decAndGet():");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<kotlinx.atomicfu.TraceBase: void append(java.lang.Object)>($r5);

     label1:
        return $i0;
    }

    public final int getValue()
    {
        kotlinx.atomicfu.AtomicInt $r0;
        int i0;

        $r0 := @this: kotlinx.atomicfu.AtomicInt;

        i0 = $r0.<kotlinx.atomicfu.AtomicInt: int value>;

        return i0;
    }

    public final int incrementAndGet()
    {
        kotlinx.atomicfu.AtomicInt $r0;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r1;
        int $i0;
        kotlinx.atomicfu.TraceBase $r2;
        kotlinx.atomicfu.TraceBase$None $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        $r0 := @this: kotlinx.atomicfu.AtomicInt;

        $r1 = <kotlinx.atomicfu.AtomicInt: java.util.concurrent.atomic.AtomicIntegerFieldUpdater FU>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int incrementAndGet(java.lang.Object)>($r0);

        $r2 = $r0.<kotlinx.atomicfu.AtomicInt: kotlinx.atomicfu.TraceBase trace>;

        $r3 = <kotlinx.atomicfu.TraceBase$None: kotlinx.atomicfu.TraceBase$None INSTANCE>;

        if $r2 == $r3 goto label1;

        $r2 = $r0.<kotlinx.atomicfu.AtomicInt: kotlinx.atomicfu.TraceBase trace>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("incAndGet():");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<kotlinx.atomicfu.TraceBase: void append(java.lang.Object)>($r5);

     label1:
        return $i0;
    }

    public final void setValue(int)
    {
        kotlinx.atomicfu.AtomicInt $r0;
        int $i0;
        kotlinx.atomicfu.TraceBase $r1;
        kotlinx.atomicfu.TraceBase$None $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        $r0 := @this: kotlinx.atomicfu.AtomicInt;

        $i0 := @parameter0: int;

        $r0.<kotlinx.atomicfu.AtomicInt: int value> = $i0;

        $r1 = $r0.<kotlinx.atomicfu.AtomicInt: kotlinx.atomicfu.TraceBase trace>;

        $r2 = <kotlinx.atomicfu.TraceBase$None: kotlinx.atomicfu.TraceBase$None INSTANCE>;

        if $r1 == $r2 goto label1;

        $r1 = $r0.<kotlinx.atomicfu.AtomicInt: kotlinx.atomicfu.TraceBase trace>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("set(");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<kotlinx.atomicfu.TraceBase: void append(java.lang.Object)>($r4);

     label1:
        return;
    }

    public java.lang.String toString()
    {
        kotlinx.atomicfu.AtomicInt $r0;
        java.lang.String $r1;
        int $i0;

        $r0 := @this: kotlinx.atomicfu.AtomicInt;

        $i0 = $r0.<kotlinx.atomicfu.AtomicInt: int value>;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        return $r1;
    }

