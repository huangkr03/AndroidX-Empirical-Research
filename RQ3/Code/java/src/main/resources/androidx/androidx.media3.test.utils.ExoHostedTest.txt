androidx.media3.test.utils.ExoHostedTest
<androidx.media3.test.utils.ExoHostedTest: long MAX_PLAYING_TIME_DISCREPANCY_MS>
<androidx.media3.test.utils.ExoHostedTest: long EXPECTED_PLAYING_TIME_MEDIA_DURATION_MS>
<androidx.media3.test.utils.ExoHostedTest: long EXPECTED_PLAYING_TIME_UNSET>
<androidx.media3.test.utils.ExoHostedTest: java.lang.String tag>
<androidx.media3.test.utils.ExoHostedTest: boolean failOnPlayerError>
<androidx.media3.test.utils.ExoHostedTest: long expectedPlayingTimeMs>
<androidx.media3.test.utils.ExoHostedTest: androidx.media3.exoplayer.DecoderCounters videoDecoderCounters>
<androidx.media3.test.utils.ExoHostedTest: androidx.media3.exoplayer.DecoderCounters audioDecoderCounters>
<androidx.media3.test.utils.ExoHostedTest: android.os.ConditionVariable testFinished>
<androidx.media3.test.utils.ExoHostedTest: androidx.media3.test.utils.ActionSchedule pendingSchedule>
<androidx.media3.test.utils.ExoHostedTest: androidx.media3.exoplayer.ExoPlayer player>
<androidx.media3.test.utils.ExoHostedTest: androidx.media3.common.util.HandlerWrapper actionHandler>
<androidx.media3.test.utils.ExoHostedTest: androidx.media3.exoplayer.trackselection.DefaultTrackSelector trackSelector>
<androidx.media3.test.utils.ExoHostedTest: android.view.Surface surface>
<androidx.media3.test.utils.ExoHostedTest: androidx.media3.exoplayer.ExoPlaybackException playerError>
<androidx.media3.test.utils.ExoHostedTest: long totalPlayingTimeMs>
<androidx.media3.test.utils.ExoHostedTest: long lastPlayingStartTimeMs>
<androidx.media3.test.utils.ExoHostedTest: long sourceDurationMs>
    public void <init>(java.lang.String, boolean)
    {
        androidx.media3.test.utils.ExoHostedTest r0;
        java.lang.String r1;
        boolean z0;
        long $l0;

        r0 := @this: androidx.media3.test.utils.ExoHostedTest;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $l0 = -2L;

        goto label2;

     label1:
        $l0 = -1L;

     label2:
        specialinvoke r0.<androidx.media3.test.utils.ExoHostedTest: void <init>(java.lang.String,long,boolean)>(r1, $l0, 1);

        return;
    }

    public void <init>(java.lang.String, long, boolean)
    {
        androidx.media3.test.utils.ExoHostedTest r0;
        java.lang.String r1;
        long l0;
        boolean z0;
        android.os.ConditionVariable $r2;
        androidx.media3.exoplayer.DecoderCounters $r3, $r4;

        r0 := @this: androidx.media3.test.utils.ExoHostedTest;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.test.utils.ExoHostedTest: java.lang.String tag> = r1;

        r0.<androidx.media3.test.utils.ExoHostedTest: long expectedPlayingTimeMs> = l0;

        r0.<androidx.media3.test.utils.ExoHostedTest: boolean failOnPlayerError> = z0;

        $r2 = new android.os.ConditionVariable;

        specialinvoke $r2.<android.os.ConditionVariable: void <init>()>();

        r0.<androidx.media3.test.utils.ExoHostedTest: android.os.ConditionVariable testFinished> = $r2;

        $r3 = new androidx.media3.exoplayer.DecoderCounters;

        specialinvoke $r3.<androidx.media3.exoplayer.DecoderCounters: void <init>()>();

        r0.<androidx.media3.test.utils.ExoHostedTest: androidx.media3.exoplayer.DecoderCounters videoDecoderCounters> = $r3;

        $r4 = new androidx.media3.exoplayer.DecoderCounters;

        specialinvoke $r4.<androidx.media3.exoplayer.DecoderCounters: void <init>()>();

        r0.<androidx.media3.test.utils.ExoHostedTest: androidx.media3.exoplayer.DecoderCounters audioDecoderCounters> = $r4;

        return;
    }

    public final void setSchedule(androidx.media3.test.utils.ActionSchedule)
    {
        androidx.media3.test.utils.ExoHostedTest r0;
        androidx.media3.test.utils.ActionSchedule r1;
        boolean $z0;
        androidx.media3.common.util.HandlerWrapper $r2;
        android.view.Surface $r3;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector $r4;
        androidx.media3.exoplayer.ExoPlayer $r5;

        r0 := @this: androidx.media3.test.utils.ExoHostedTest;

        r1 := @parameter0: androidx.media3.test.utils.ActionSchedule;

        $z0 = specialinvoke r0.<androidx.media3.test.utils.ExoHostedTest: boolean isStarted()>();

        if $z0 != 0 goto label1;

        r0.<androidx.media3.test.utils.ExoHostedTest: androidx.media3.test.utils.ActionSchedule pendingSchedule> = r1;

        goto label2;

     label1:
        $r5 = r0.<androidx.media3.test.utils.ExoHostedTest: androidx.media3.exoplayer.ExoPlayer player>;

        $r4 = r0.<androidx.media3.test.utils.ExoHostedTest: androidx.media3.exoplayer.trackselection.DefaultTrackSelector trackSelector>;

        $r3 = r0.<androidx.media3.test.utils.ExoHostedTest: android.view.Surface surface>;

        $r2 = r0.<androidx.media3.test.utils.ExoHostedTest: androidx.media3.common.util.HandlerWrapper actionHandler>;

        virtualinvoke r1.<androidx.media3.test.utils.ActionSchedule: void start(androidx.media3.exoplayer.ExoPlayer,androidx.media3.exoplayer.trackselection.DefaultTrackSelector,android.view.Surface,androidx.media3.common.util.HandlerWrapper,androidx.media3.test.utils.ActionSchedule$Callback)>($r5, $r4, $r3, $r2, null);

     label2:
        return;
    }

    public final void onStart(androidx.media3.test.utils.HostActivity, android.view.Surface, android.widget.FrameLayout)
    {
        androidx.media3.test.utils.ExoHostedTest r0;
        androidx.media3.test.utils.HostActivity r1;
        android.view.Surface r2;
        android.widget.FrameLayout r3;
        androidx.media3.exoplayer.drm.DrmSessionManager r4;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector $r5, $r6, $r21;
        androidx.media3.exoplayer.ExoPlayer $r7, $r8, $r9, $r12, $r17, $r19, $r22;
        java.lang.String $r11;
        androidx.media3.common.util.Clock $r13;
        android.os.Looper $r14;
        androidx.media3.common.util.HandlerWrapper $r15, $r20;
        androidx.media3.test.utils.ActionSchedule $r16, $r23;
        androidx.media3.exoplayer.source.MediaSource $r18;
        androidx.media3.exoplayer.util.EventLogger r24;
        androidx.media3.exoplayer.trackselection.MappingTrackSelector r25;
        androidx.media3.exoplayer.analytics.AnalyticsListener r26;

        r0 := @this: androidx.media3.test.utils.ExoHostedTest;

        r1 := @parameter0: androidx.media3.test.utils.HostActivity;

        r2 := @parameter1: android.view.Surface;

        r3 := @parameter2: android.widget.FrameLayout;

        r0.<androidx.media3.test.utils.ExoHostedTest: android.view.Surface surface> = r2;

        $r5 = virtualinvoke r0.<androidx.media3.test.utils.ExoHostedTest: androidx.media3.exoplayer.trackselection.DefaultTrackSelector buildTrackSelector(androidx.media3.test.utils.HostActivity)>(r1);

        r0.<androidx.media3.test.utils.ExoHostedTest: androidx.media3.exoplayer.trackselection.DefaultTrackSelector trackSelector> = $r5;

        $r6 = r0.<androidx.media3.test.utils.ExoHostedTest: androidx.media3.exoplayer.trackselection.DefaultTrackSelector trackSelector>;

        r25 = (androidx.media3.exoplayer.trackselection.MappingTrackSelector) $r6;

        $r7 = virtualinvoke r0.<androidx.media3.test.utils.ExoHostedTest: androidx.media3.exoplayer.ExoPlayer buildExoPlayer(androidx.media3.test.utils.HostActivity,android.view.Surface,androidx.media3.exoplayer.trackselection.MappingTrackSelector)>(r1, r2, r25);

        r0.<androidx.media3.test.utils.ExoHostedTest: androidx.media3.exoplayer.ExoPlayer player> = $r7;

        $r8 = r0.<androidx.media3.test.utils.ExoHostedTest: androidx.media3.exoplayer.ExoPlayer player>;

        interfaceinvoke $r8.<androidx.media3.exoplayer.ExoPlayer: void play()>();

        $r9 = r0.<androidx.media3.test.utils.ExoHostedTest: androidx.media3.exoplayer.ExoPlayer player>;

        interfaceinvoke $r9.<androidx.media3.exoplayer.ExoPlayer: void addAnalyticsListener(androidx.media3.exoplayer.analytics.AnalyticsListener)>(r0);

        $r12 = r0.<androidx.media3.test.utils.ExoHostedTest: androidx.media3.exoplayer.ExoPlayer player>;

        r24 = new androidx.media3.exoplayer.util.EventLogger;

        $r11 = r0.<androidx.media3.test.utils.ExoHostedTest: java.lang.String tag>;

        specialinvoke r24.<androidx.media3.exoplayer.util.EventLogger: void <init>(java.lang.String)>($r11);

        r26 = (androidx.media3.exoplayer.analytics.AnalyticsListener) r24;

        interfaceinvoke $r12.<androidx.media3.exoplayer.ExoPlayer: void addAnalyticsListener(androidx.media3.exoplayer.analytics.AnalyticsListener)>(r26);

        $r13 = <androidx.media3.common.util.Clock: androidx.media3.common.util.Clock DEFAULT>;

        $r14 = staticinvoke <androidx.media3.common.util.Util: android.os.Looper getCurrentOrMainLooper()>();

        $r15 = interfaceinvoke $r13.<androidx.media3.common.util.Clock: androidx.media3.common.util.HandlerWrapper createHandler(android.os.Looper,android.os.Handler$Callback)>($r14, null);

        r0.<androidx.media3.test.utils.ExoHostedTest: androidx.media3.common.util.HandlerWrapper actionHandler> = $r15;

        $r16 = r0.<androidx.media3.test.utils.ExoHostedTest: androidx.media3.test.utils.ActionSchedule pendingSchedule>;

        if $r16 == null goto label1;

        $r23 = r0.<androidx.media3.test.utils.ExoHostedTest: androidx.media3.test.utils.ActionSchedule pendingSchedule>;

        $r22 = r0.<androidx.media3.test.utils.ExoHostedTest: androidx.media3.exoplayer.ExoPlayer player>;

        $r21 = r0.<androidx.media3.test.utils.ExoHostedTest: androidx.media3.exoplayer.trackselection.DefaultTrackSelector trackSelector>;

        $r20 = r0.<androidx.media3.test.utils.ExoHostedTest: androidx.media3.common.util.HandlerWrapper actionHandler>;

        virtualinvoke $r23.<androidx.media3.test.utils.ActionSchedule: void start(androidx.media3.exoplayer.ExoPlayer,androidx.media3.exoplayer.trackselection.DefaultTrackSelector,android.view.Surface,androidx.media3.common.util.HandlerWrapper,androidx.media3.test.utils.ActionSchedule$Callback)>($r22, $r21, r2, $r20, null);

        r0.<androidx.media3.test.utils.ExoHostedTest: androidx.media3.test.utils.ActionSchedule pendingSchedule> = null;

     label1:
        r4 = virtualinvoke r0.<androidx.media3.test.utils.ExoHostedTest: androidx.media3.exoplayer.drm.DrmSessionManager buildDrmSessionManager()>();

        $r17 = r0.<androidx.media3.test.utils.ExoHostedTest: androidx.media3.exoplayer.ExoPlayer player>;

        $r18 = virtualinvoke r0.<androidx.media3.test.utils.ExoHostedTest: androidx.media3.exoplayer.source.MediaSource buildSource(androidx.media3.test.utils.HostActivity,androidx.media3.exoplayer.drm.DrmSessionManager,android.widget.FrameLayout)>(r1, r4, r3);

        interfaceinvoke $r17.<androidx.media3.exoplayer.ExoPlayer: void setMediaSource(androidx.media3.exoplayer.source.MediaSource)>($r18);

        $r19 = r0.<androidx.media3.test.utils.ExoHostedTest: androidx.media3.exoplayer.ExoPlayer player>;

        interfaceinvoke $r19.<androidx.media3.exoplayer.ExoPlayer: void prepare()>();

        return;
    }

    public final boolean blockUntilStopped(long)
    {
        androidx.media3.test.utils.ExoHostedTest r0;
        long l0;
        android.os.ConditionVariable $r1;
        boolean $z0;

        r0 := @this: androidx.media3.test.utils.ExoHostedTest;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.media3.test.utils.ExoHostedTest: android.os.ConditionVariable testFinished>;

        $z0 = virtualinvoke $r1.<android.os.ConditionVariable: boolean block(long)>(l0);

        return $z0;
    }

    public final boolean forceStop()
    {
        androidx.media3.test.utils.ExoHostedTest r0;
        boolean $z0;

        r0 := @this: androidx.media3.test.utils.ExoHostedTest;

        $z0 = specialinvoke r0.<androidx.media3.test.utils.ExoHostedTest: boolean stopTest()>();

        return $z0;
    }

    public final void onFinished()
    {
        androidx.media3.test.utils.ExoHostedTest r0;
        long l0, l1, l2, $l3, $l5, $l7, $l8, $l10, $l12;
        boolean $z0, $z1;
        androidx.media3.exoplayer.DecoderCounters $r1, $r2, $r12, $r13;
        byte $b4, $b6, $b9, $b11;
        java.lang.Object[] $r3;
        java.lang.Long $r4, $r5;
        androidx.media3.exoplayer.ExoPlaybackException $r6, $r8;
        java.lang.RuntimeException $r7;
        com.google.common.truth.StandardSubjectBuilder $r9;
        java.lang.Boolean $r10;
        com.google.common.truth.BooleanSubject $r11;

        r0 := @this: androidx.media3.test.utils.ExoHostedTest;

        $z0 = r0.<androidx.media3.test.utils.ExoHostedTest: boolean failOnPlayerError>;

        if $z0 == 0 goto label1;

        $r6 = r0.<androidx.media3.test.utils.ExoHostedTest: androidx.media3.exoplayer.ExoPlaybackException playerError>;

        if $r6 == null goto label1;

        $r7 = new java.lang.RuntimeException;

        $r8 = r0.<androidx.media3.test.utils.ExoHostedTest: androidx.media3.exoplayer.ExoPlaybackException playerError>;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r8);

        throw $r7;

     label1:
        $r2 = r0.<androidx.media3.test.utils.ExoHostedTest: androidx.media3.exoplayer.DecoderCounters audioDecoderCounters>;

        $r1 = r0.<androidx.media3.test.utils.ExoHostedTest: androidx.media3.exoplayer.DecoderCounters videoDecoderCounters>;

        virtualinvoke r0.<androidx.media3.test.utils.ExoHostedTest: void logMetrics(androidx.media3.exoplayer.DecoderCounters,androidx.media3.exoplayer.DecoderCounters)>($r2, $r1);

        $l3 = r0.<androidx.media3.test.utils.ExoHostedTest: long expectedPlayingTimeMs>;

        $b4 = $l3 cmp -1L;

        if $b4 == 0 goto label6;

        $l5 = r0.<androidx.media3.test.utils.ExoHostedTest: long expectedPlayingTimeMs>;

        $b6 = $l5 cmp -2L;

        if $b6 != 0 goto label2;

        $l12 = r0.<androidx.media3.test.utils.ExoHostedTest: long sourceDurationMs>;

        goto label3;

     label2:
        $l12 = r0.<androidx.media3.test.utils.ExoHostedTest: long expectedPlayingTimeMs>;

     label3:
        l0 = $l12;

        l1 = l0 - 5000L;

        l2 = l0 + 5000L;

        $r3 = newarray (java.lang.Object)[2];

        $l7 = r0.<androidx.media3.test.utils.ExoHostedTest: long totalPlayingTimeMs>;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l7);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r3[1] = $r5;

        $r9 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.StandardSubjectBuilder assertWithMessage(java.lang.String,java.lang.Object[])>("Total playing time: %sms. Expected: %sms", $r3);

        $l8 = r0.<androidx.media3.test.utils.ExoHostedTest: long totalPlayingTimeMs>;

        $b9 = l1 cmp $l8;

        if $b9 > 0 goto label4;

        $l10 = r0.<androidx.media3.test.utils.ExoHostedTest: long totalPlayingTimeMs>;

        $b11 = $l10 cmp l2;

        if $b11 > 0 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        $r11 = virtualinvoke $r9.<com.google.common.truth.StandardSubjectBuilder: com.google.common.truth.BooleanSubject that(java.lang.Boolean)>($r10);

        virtualinvoke $r11.<com.google.common.truth.BooleanSubject: void isTrue()>();

     label6:
        $r12 = r0.<androidx.media3.test.utils.ExoHostedTest: androidx.media3.exoplayer.DecoderCounters audioDecoderCounters>;

        $r13 = r0.<androidx.media3.test.utils.ExoHostedTest: androidx.media3.exoplayer.DecoderCounters videoDecoderCounters>;

        virtualinvoke r0.<androidx.media3.test.utils.ExoHostedTest: void assertPassed(androidx.media3.exoplayer.DecoderCounters,androidx.media3.exoplayer.DecoderCounters)>($r12, $r13);

        return;
    }

    public void onEvents(androidx.media3.common.Player, androidx.media3.exoplayer.analytics.AnalyticsListener$Events)
    {
        androidx.media3.test.utils.ExoHostedTest r0;
        androidx.media3.common.Player r1;
        androidx.media3.exoplayer.analytics.AnalyticsListener$Events r2;
        int i0;
        boolean $z0, $z1, $z3, $z4;
        androidx.media3.common.PlaybackException $r3;
        java.lang.Object $r4;
        androidx.media3.exoplayer.ExoPlaybackException $r5, $r6;
        long $l1, $l2, $l3, $l4, $l5, $l6;

        r0 := @this: androidx.media3.test.utils.ExoHostedTest;

        r1 := @parameter0: androidx.media3.common.Player;

        r2 := @parameter1: androidx.media3.exoplayer.analytics.AnalyticsListener$Events;

        $z0 = virtualinvoke r2.<androidx.media3.exoplayer.analytics.AnalyticsListener$Events: boolean contains(int)>(7);

        if $z0 == 0 goto label2;

        $z3 = interfaceinvoke r1.<androidx.media3.common.Player: boolean isPlaying()>();

        if $z3 == 0 goto label1;

        $l6 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r0.<androidx.media3.test.utils.ExoHostedTest: long lastPlayingStartTimeMs> = $l6;

        goto label2;

     label1:
        $l1 = r0.<androidx.media3.test.utils.ExoHostedTest: long totalPlayingTimeMs>;

        $l2 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l3 = r0.<androidx.media3.test.utils.ExoHostedTest: long lastPlayingStartTimeMs>;

        $l4 = $l2 - $l3;

        $l5 = $l1 + $l4;

        r0.<androidx.media3.test.utils.ExoHostedTest: long totalPlayingTimeMs> = $l5;

     label2:
        $z4 = virtualinvoke r2.<androidx.media3.exoplayer.analytics.AnalyticsListener$Events: boolean contains(int)>(10);

        if $z4 == 0 goto label3;

        $r3 = interfaceinvoke r1.<androidx.media3.common.Player: androidx.media3.common.PlaybackException getPlayerError()>();

        $r4 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r3);

        $r5 = (androidx.media3.exoplayer.ExoPlaybackException) $r4;

        r0.<androidx.media3.test.utils.ExoHostedTest: androidx.media3.exoplayer.ExoPlaybackException playerError> = $r5;

        $r6 = r0.<androidx.media3.test.utils.ExoHostedTest: androidx.media3.exoplayer.ExoPlaybackException playerError>;

        virtualinvoke r0.<androidx.media3.test.utils.ExoHostedTest: void onPlayerErrorInternal(androidx.media3.exoplayer.ExoPlaybackException)>($r6);

     label3:
        $z1 = virtualinvoke r2.<androidx.media3.exoplayer.analytics.AnalyticsListener$Events: boolean contains(int)>(4);

        if $z1 == 0 goto label5;

        i0 = interfaceinvoke r1.<androidx.media3.common.Player: int getPlaybackState()>();

        if i0 == 4 goto label4;

        if i0 != 1 goto label5;

     label4:
        specialinvoke r0.<androidx.media3.test.utils.ExoHostedTest: boolean stopTest()>();

     label5:
        return;
    }

    public void onAudioDisabled(androidx.media3.exoplayer.analytics.AnalyticsListener$EventTime, androidx.media3.exoplayer.DecoderCounters)
    {
        androidx.media3.test.utils.ExoHostedTest r0;
        androidx.media3.exoplayer.analytics.AnalyticsListener$EventTime r1;
        androidx.media3.exoplayer.DecoderCounters r2, $r3;

        r0 := @this: androidx.media3.test.utils.ExoHostedTest;

        r1 := @parameter0: androidx.media3.exoplayer.analytics.AnalyticsListener$EventTime;

        r2 := @parameter1: androidx.media3.exoplayer.DecoderCounters;

        $r3 = r0.<androidx.media3.test.utils.ExoHostedTest: androidx.media3.exoplayer.DecoderCounters audioDecoderCounters>;

        virtualinvoke $r3.<androidx.media3.exoplayer.DecoderCounters: void merge(androidx.media3.exoplayer.DecoderCounters)>(r2);

        return;
    }

    public void onVideoDisabled(androidx.media3.exoplayer.analytics.AnalyticsListener$EventTime, androidx.media3.exoplayer.DecoderCounters)
    {
        androidx.media3.test.utils.ExoHostedTest r0;
        androidx.media3.exoplayer.analytics.AnalyticsListener$EventTime r1;
        androidx.media3.exoplayer.DecoderCounters r2, $r3;

        r0 := @this: androidx.media3.test.utils.ExoHostedTest;

        r1 := @parameter0: androidx.media3.exoplayer.analytics.AnalyticsListener$EventTime;

        r2 := @parameter1: androidx.media3.exoplayer.DecoderCounters;

        $r3 = r0.<androidx.media3.test.utils.ExoHostedTest: androidx.media3.exoplayer.DecoderCounters videoDecoderCounters>;

        virtualinvoke $r3.<androidx.media3.exoplayer.DecoderCounters: void merge(androidx.media3.exoplayer.DecoderCounters)>(r2);

        return;
    }

    private boolean stopTest()
    {
        androidx.media3.test.utils.ExoHostedTest r0;
        boolean $z0;
        androidx.media3.common.util.HandlerWrapper $r1, $r5;
        androidx.media3.exoplayer.ExoPlayer $r2, $r3;
        long $l0;
        android.os.ConditionVariable $r4;
        java.lang.Runnable $r7;

        r0 := @this: androidx.media3.test.utils.ExoHostedTest;

        $z0 = specialinvoke r0.<androidx.media3.test.utils.ExoHostedTest: boolean isStarted()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = r0.<androidx.media3.test.utils.ExoHostedTest: androidx.media3.common.util.HandlerWrapper actionHandler>;

        interfaceinvoke $r1.<androidx.media3.common.util.HandlerWrapper: void removeCallbacksAndMessages(java.lang.Object)>(null);

        $r2 = r0.<androidx.media3.test.utils.ExoHostedTest: androidx.media3.exoplayer.ExoPlayer player>;

        $l0 = interfaceinvoke $r2.<androidx.media3.exoplayer.ExoPlayer: long getDuration()>();

        r0.<androidx.media3.test.utils.ExoHostedTest: long sourceDurationMs> = $l0;

        $r3 = r0.<androidx.media3.test.utils.ExoHostedTest: androidx.media3.exoplayer.ExoPlayer player>;

        interfaceinvoke $r3.<androidx.media3.exoplayer.ExoPlayer: void release()>();

        $r5 = r0.<androidx.media3.test.utils.ExoHostedTest: androidx.media3.common.util.HandlerWrapper actionHandler>;

        $r4 = r0.<androidx.media3.test.utils.ExoHostedTest: android.os.ConditionVariable testFinished>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r4);

        $r7 = dynamicinvoke "run" <java.lang.Runnable (android.os.ConditionVariable)>($r4) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_VIRTUAL" <android.os.ConditionVariable: void open()>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r5.<androidx.media3.common.util.HandlerWrapper: boolean post(java.lang.Runnable)>($r7);

        return 1;
    }

    protected androidx.media3.exoplayer.drm.DrmSessionManager buildDrmSessionManager()
    {
        androidx.media3.test.utils.ExoHostedTest r0;
        androidx.media3.exoplayer.drm.DrmSessionManager $r1;

        r0 := @this: androidx.media3.test.utils.ExoHostedTest;

        $r1 = <androidx.media3.exoplayer.drm.DrmSessionManager: androidx.media3.exoplayer.drm.DrmSessionManager DRM_UNSUPPORTED>;

        return $r1;
    }

    protected androidx.media3.exoplayer.trackselection.DefaultTrackSelector buildTrackSelector(androidx.media3.test.utils.HostActivity)
    {
        androidx.media3.test.utils.ExoHostedTest r0;
        androidx.media3.test.utils.HostActivity r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r3;
        android.content.Context r4;

        r0 := @this: androidx.media3.test.utils.ExoHostedTest;

        r1 := @parameter0: androidx.media3.test.utils.HostActivity;

        r3 = new androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r4 = (android.content.Context) r1;

        specialinvoke r3.<androidx.media3.exoplayer.trackselection.DefaultTrackSelector: void <init>(android.content.Context)>(r4);

        return r3;
    }

    protected androidx.media3.exoplayer.ExoPlayer buildExoPlayer(androidx.media3.test.utils.HostActivity, android.view.Surface, androidx.media3.exoplayer.trackselection.MappingTrackSelector)
    {
        androidx.media3.test.utils.ExoHostedTest r0;
        androidx.media3.test.utils.HostActivity r1;
        android.view.Surface r2;
        androidx.media3.exoplayer.trackselection.MappingTrackSelector r3;
        androidx.media3.exoplayer.DefaultRenderersFactory r4, r11;
        androidx.media3.exoplayer.ExoPlayer r5;
        androidx.media3.exoplayer.ExoPlayer$Builder $r10, r12;
        android.content.Context r13, r14;
        androidx.media3.exoplayer.RenderersFactory r15;

        r0 := @this: androidx.media3.test.utils.ExoHostedTest;

        r1 := @parameter0: androidx.media3.test.utils.HostActivity;

        r2 := @parameter1: android.view.Surface;

        r3 := @parameter2: androidx.media3.exoplayer.trackselection.MappingTrackSelector;

        r11 = new androidx.media3.exoplayer.DefaultRenderersFactory;

        r13 = (android.content.Context) r1;

        specialinvoke r11.<androidx.media3.exoplayer.DefaultRenderersFactory: void <init>(android.content.Context)>(r13);

        r4 = r11;

        virtualinvoke r4.<androidx.media3.exoplayer.DefaultRenderersFactory: androidx.media3.exoplayer.DefaultRenderersFactory setExtensionRendererMode(int)>(0);

        virtualinvoke r4.<androidx.media3.exoplayer.DefaultRenderersFactory: androidx.media3.exoplayer.DefaultRenderersFactory setAllowedVideoJoiningTimeMs(long)>(0L);

        r12 = new androidx.media3.exoplayer.ExoPlayer$Builder;

        r14 = (android.content.Context) r1;

        r15 = (androidx.media3.exoplayer.RenderersFactory) r4;

        specialinvoke r12.<androidx.media3.exoplayer.ExoPlayer$Builder: void <init>(android.content.Context,androidx.media3.exoplayer.RenderersFactory)>(r14, r15);

        $r10 = virtualinvoke r12.<androidx.media3.exoplayer.ExoPlayer$Builder: androidx.media3.exoplayer.ExoPlayer$Builder setTrackSelector(androidx.media3.exoplayer.trackselection.TrackSelector)>(r3);

        r5 = virtualinvoke $r10.<androidx.media3.exoplayer.ExoPlayer$Builder: androidx.media3.exoplayer.ExoPlayer build()>();

        interfaceinvoke r5.<androidx.media3.exoplayer.ExoPlayer: void setVideoSurface(android.view.Surface)>(r2);

        return r5;
    }

<androidx.media3.test.utils.ExoHostedTest: androidx.media3.exoplayer.source.MediaSource buildSource(androidx.media3.test.utils.HostActivity,androidx.media3.exoplayer.drm.DrmSessionManager,android.widget.FrameLayout)>
    protected void onPlayerErrorInternal(androidx.media3.exoplayer.ExoPlaybackException)
    {
        androidx.media3.test.utils.ExoHostedTest r0;
        androidx.media3.exoplayer.ExoPlaybackException r1;

        r0 := @this: androidx.media3.test.utils.ExoHostedTest;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlaybackException;

        return;
    }

    protected void logMetrics(androidx.media3.exoplayer.DecoderCounters, androidx.media3.exoplayer.DecoderCounters)
    {
        androidx.media3.test.utils.ExoHostedTest r0;
        androidx.media3.exoplayer.DecoderCounters r1, r2;

        r0 := @this: androidx.media3.test.utils.ExoHostedTest;

        r1 := @parameter0: androidx.media3.exoplayer.DecoderCounters;

        r2 := @parameter1: androidx.media3.exoplayer.DecoderCounters;

        return;
    }

    protected void assertPassed(androidx.media3.exoplayer.DecoderCounters, androidx.media3.exoplayer.DecoderCounters)
    {
        androidx.media3.test.utils.ExoHostedTest r0;
        androidx.media3.exoplayer.DecoderCounters r1, r2;

        r0 := @this: androidx.media3.test.utils.ExoHostedTest;

        r1 := @parameter0: androidx.media3.exoplayer.DecoderCounters;

        r2 := @parameter1: androidx.media3.exoplayer.DecoderCounters;

        return;
    }

    private boolean isStarted()
    {
        androidx.media3.test.utils.ExoHostedTest r0;
        androidx.media3.exoplayer.ExoPlayer $r1;
        androidx.media3.common.util.HandlerWrapper $r2;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector $r4;
        android.view.Surface $r6;

        r0 := @this: androidx.media3.test.utils.ExoHostedTest;

        $r1 = r0.<androidx.media3.test.utils.ExoHostedTest: androidx.media3.exoplayer.ExoPlayer player>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<androidx.media3.test.utils.ExoHostedTest: androidx.media3.common.util.HandlerWrapper actionHandler>;

        staticinvoke <androidx.media3.common.util.Util: java.lang.Object castNonNull(java.lang.Object)>($r2);

        $r4 = r0.<androidx.media3.test.utils.ExoHostedTest: androidx.media3.exoplayer.trackselection.DefaultTrackSelector trackSelector>;

        staticinvoke <androidx.media3.common.util.Util: java.lang.Object castNonNull(java.lang.Object)>($r4);

        $r6 = r0.<androidx.media3.test.utils.ExoHostedTest: android.view.Surface surface>;

        staticinvoke <androidx.media3.common.util.Util: java.lang.Object castNonNull(java.lang.Object)>($r6);

        return 1;
    }

    static void <clinit>()
    {
        <androidx.media3.exoplayer.audio.DefaultAudioSink: boolean failOnSpuriousAudioTimestamp> = 1;

        return;
    }

