androidx.room.RoomTrackingLiveData
<androidx.room.RoomTrackingLiveData: androidx.room.RoomDatabase database>
<androidx.room.RoomTrackingLiveData: androidx.room.InvalidationLiveDataContainer container>
<androidx.room.RoomTrackingLiveData: boolean inTransaction>
<androidx.room.RoomTrackingLiveData: java.util.concurrent.Callable computeFunction>
<androidx.room.RoomTrackingLiveData: androidx.room.InvalidationTracker$Observer observer>
<androidx.room.RoomTrackingLiveData: java.util.concurrent.atomic.AtomicBoolean invalid>
<androidx.room.RoomTrackingLiveData: java.util.concurrent.atomic.AtomicBoolean computing>
<androidx.room.RoomTrackingLiveData: java.util.concurrent.atomic.AtomicBoolean registeredObserver>
<androidx.room.RoomTrackingLiveData: java.lang.Runnable refreshRunnable>
<androidx.room.RoomTrackingLiveData: java.lang.Runnable invalidationRunnable>
    public void <init>(androidx.room.RoomDatabase, androidx.room.InvalidationLiveDataContainer, boolean, java.util.concurrent.Callable, java.lang.String[])
    {
        androidx.room.RoomTrackingLiveData r0;
        androidx.room.RoomDatabase r1;
        androidx.room.InvalidationLiveDataContainer r2;
        boolean z0;
        java.util.concurrent.Callable r3;
        java.lang.String[] r4;
        androidx.room.RoomTrackingLiveData$observer$1 $r5;
        androidx.room.InvalidationTracker$Observer $r6;
        java.util.concurrent.atomic.AtomicBoolean $r7, $r8, $r9;
        java.lang.Runnable $r10, $r11;

        r0 := @this: androidx.room.RoomTrackingLiveData;

        r1 := @parameter0: androidx.room.RoomDatabase;

        r2 := @parameter1: androidx.room.InvalidationLiveDataContainer;

        z0 := @parameter2: boolean;

        r3 := @parameter3: java.util.concurrent.Callable;

        r4 := @parameter4: java.lang.String[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "database");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "container");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "computeFunction");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "tableNames");

        specialinvoke r0.<androidx.lifecycle.LiveData: void <init>()>();

        r0.<androidx.room.RoomTrackingLiveData: androidx.room.RoomDatabase database> = r1;

        r0.<androidx.room.RoomTrackingLiveData: androidx.room.InvalidationLiveDataContainer container> = r2;

        r0.<androidx.room.RoomTrackingLiveData: boolean inTransaction> = z0;

        r0.<androidx.room.RoomTrackingLiveData: java.util.concurrent.Callable computeFunction> = r3;

        $r5 = new androidx.room.RoomTrackingLiveData$observer$1;

        specialinvoke $r5.<androidx.room.RoomTrackingLiveData$observer$1: void <init>(java.lang.String[],androidx.room.RoomTrackingLiveData)>(r4, r0);

        $r6 = (androidx.room.InvalidationTracker$Observer) $r5;

        r0.<androidx.room.RoomTrackingLiveData: androidx.room.InvalidationTracker$Observer observer> = $r6;

        $r7 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r7.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(1);

        r0.<androidx.room.RoomTrackingLiveData: java.util.concurrent.atomic.AtomicBoolean invalid> = $r7;

        $r8 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r8.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<androidx.room.RoomTrackingLiveData: java.util.concurrent.atomic.AtomicBoolean computing> = $r8;

        $r9 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r9.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<androidx.room.RoomTrackingLiveData: java.util.concurrent.atomic.AtomicBoolean registeredObserver> = $r9;

        $r10 = dynamicinvoke "run" <java.lang.Runnable (androidx.room.RoomTrackingLiveData)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.room.RoomTrackingLiveData: void refreshRunnable$lambda$0(androidx.room.RoomTrackingLiveData)>, methodtype: void __METHODTYPE__());

        r0.<androidx.room.RoomTrackingLiveData: java.lang.Runnable refreshRunnable> = $r10;

        $r11 = dynamicinvoke "run" <java.lang.Runnable (androidx.room.RoomTrackingLiveData)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.room.RoomTrackingLiveData: void invalidationRunnable$lambda$1(androidx.room.RoomTrackingLiveData)>, methodtype: void __METHODTYPE__());

        r0.<androidx.room.RoomTrackingLiveData: java.lang.Runnable invalidationRunnable> = $r11;

        return;
    }

    public final androidx.room.RoomDatabase getDatabase()
    {
        androidx.room.RoomTrackingLiveData r0;
        androidx.room.RoomDatabase $r1;

        r0 := @this: androidx.room.RoomTrackingLiveData;

        $r1 = r0.<androidx.room.RoomTrackingLiveData: androidx.room.RoomDatabase database>;

        return $r1;
    }

    public final boolean getInTransaction()
    {
        androidx.room.RoomTrackingLiveData r0;
        boolean $z0;

        r0 := @this: androidx.room.RoomTrackingLiveData;

        $z0 = r0.<androidx.room.RoomTrackingLiveData: boolean inTransaction>;

        return $z0;
    }

    public final java.util.concurrent.Callable getComputeFunction()
    {
        androidx.room.RoomTrackingLiveData r0;
        java.util.concurrent.Callable $r1;

        r0 := @this: androidx.room.RoomTrackingLiveData;

        $r1 = r0.<androidx.room.RoomTrackingLiveData: java.util.concurrent.Callable computeFunction>;

        return $r1;
    }

    public final androidx.room.InvalidationTracker$Observer getObserver()
    {
        androidx.room.RoomTrackingLiveData r0;
        androidx.room.InvalidationTracker$Observer $r1;

        r0 := @this: androidx.room.RoomTrackingLiveData;

        $r1 = r0.<androidx.room.RoomTrackingLiveData: androidx.room.InvalidationTracker$Observer observer>;

        return $r1;
    }

    public final java.util.concurrent.atomic.AtomicBoolean getInvalid()
    {
        androidx.room.RoomTrackingLiveData r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @this: androidx.room.RoomTrackingLiveData;

        $r1 = r0.<androidx.room.RoomTrackingLiveData: java.util.concurrent.atomic.AtomicBoolean invalid>;

        return $r1;
    }

    public final java.util.concurrent.atomic.AtomicBoolean getComputing()
    {
        androidx.room.RoomTrackingLiveData r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @this: androidx.room.RoomTrackingLiveData;

        $r1 = r0.<androidx.room.RoomTrackingLiveData: java.util.concurrent.atomic.AtomicBoolean computing>;

        return $r1;
    }

    public final java.util.concurrent.atomic.AtomicBoolean getRegisteredObserver()
    {
        androidx.room.RoomTrackingLiveData r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @this: androidx.room.RoomTrackingLiveData;

        $r1 = r0.<androidx.room.RoomTrackingLiveData: java.util.concurrent.atomic.AtomicBoolean registeredObserver>;

        return $r1;
    }

    public final java.lang.Runnable getRefreshRunnable()
    {
        androidx.room.RoomTrackingLiveData r0;
        java.lang.Runnable $r1;

        r0 := @this: androidx.room.RoomTrackingLiveData;

        $r1 = r0.<androidx.room.RoomTrackingLiveData: java.lang.Runnable refreshRunnable>;

        return $r1;
    }

    public final java.lang.Runnable getInvalidationRunnable()
    {
        androidx.room.RoomTrackingLiveData r0;
        java.lang.Runnable $r1;

        r0 := @this: androidx.room.RoomTrackingLiveData;

        $r1 = r0.<androidx.room.RoomTrackingLiveData: java.lang.Runnable invalidationRunnable>;

        return $r1;
    }

    protected void onActive()
    {
        androidx.room.RoomTrackingLiveData r0;
        androidx.room.InvalidationLiveDataContainer $r1;
        androidx.lifecycle.LiveData $r2;
        java.util.concurrent.Executor $r3;
        java.lang.Runnable $r4;

        r0 := @this: androidx.room.RoomTrackingLiveData;

        specialinvoke r0.<androidx.lifecycle.LiveData: void onActive()>();

        $r1 = r0.<androidx.room.RoomTrackingLiveData: androidx.room.InvalidationLiveDataContainer container>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>(r0, "null cannot be cast to non-null type androidx.lifecycle.LiveData<kotlin.Any>");

        $r2 = (androidx.lifecycle.LiveData) r0;

        virtualinvoke $r1.<androidx.room.InvalidationLiveDataContainer: void onActive(androidx.lifecycle.LiveData)>($r2);

        $r3 = virtualinvoke r0.<androidx.room.RoomTrackingLiveData: java.util.concurrent.Executor getQueryExecutor()>();

        $r4 = r0.<androidx.room.RoomTrackingLiveData: java.lang.Runnable refreshRunnable>;

        interfaceinvoke $r3.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r4);

        return;
    }

    protected void onInactive()
    {
        androidx.room.RoomTrackingLiveData r0;
        androidx.room.InvalidationLiveDataContainer $r1;
        androidx.lifecycle.LiveData $r2;

        r0 := @this: androidx.room.RoomTrackingLiveData;

        specialinvoke r0.<androidx.lifecycle.LiveData: void onInactive()>();

        $r1 = r0.<androidx.room.RoomTrackingLiveData: androidx.room.InvalidationLiveDataContainer container>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>(r0, "null cannot be cast to non-null type androidx.lifecycle.LiveData<kotlin.Any>");

        $r2 = (androidx.lifecycle.LiveData) r0;

        virtualinvoke $r1.<androidx.room.InvalidationLiveDataContainer: void onInactive(androidx.lifecycle.LiveData)>($r2);

        return;
    }

    public final java.util.concurrent.Executor getQueryExecutor()
    {
        androidx.room.RoomTrackingLiveData r0;
        boolean $z0;
        androidx.room.RoomDatabase $r1, $r2;
        java.util.concurrent.Executor $r3;

        r0 := @this: androidx.room.RoomTrackingLiveData;

        $z0 = r0.<androidx.room.RoomTrackingLiveData: boolean inTransaction>;

        if $z0 == 0 goto label1;

        $r2 = r0.<androidx.room.RoomTrackingLiveData: androidx.room.RoomDatabase database>;

        $r3 = virtualinvoke $r2.<androidx.room.RoomDatabase: java.util.concurrent.Executor getTransactionExecutor()>();

        goto label2;

     label1:
        $r1 = r0.<androidx.room.RoomTrackingLiveData: androidx.room.RoomDatabase database>;

        $r3 = virtualinvoke $r1.<androidx.room.RoomDatabase: java.util.concurrent.Executor getQueryExecutor()>();

     label2:
        return $r3;
    }

    private static final void refreshRunnable$lambda$0(androidx.room.RoomTrackingLiveData)
    {
        androidx.room.RoomTrackingLiveData r0;
        java.lang.Throwable r1, $r10, $r12, $r14, r17;
        java.util.concurrent.atomic.AtomicBoolean $r2, $r3, $r4, $r5, $r11, $r15;
        boolean $z0, $z1, $z2, z3, z4, $z5;
        java.util.concurrent.Callable $r6;
        androidx.room.RoomDatabase $r7;
        androidx.room.InvalidationTracker $r8;
        androidx.room.InvalidationTracker$Observer $r9;
        java.lang.RuntimeException $r13;
        java.lang.Object r16;

        r0 := @parameter0: androidx.room.RoomTrackingLiveData;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        $r2 = r0.<androidx.room.RoomTrackingLiveData: java.util.concurrent.atomic.AtomicBoolean registeredObserver>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);

        if $z0 == 0 goto label01;

        $r7 = r0.<androidx.room.RoomTrackingLiveData: androidx.room.RoomDatabase database>;

        $r8 = virtualinvoke $r7.<androidx.room.RoomDatabase: androidx.room.InvalidationTracker getInvalidationTracker()>();

        $r9 = r0.<androidx.room.RoomTrackingLiveData: androidx.room.InvalidationTracker$Observer observer>;

        virtualinvoke $r8.<androidx.room.InvalidationTracker: void addWeakObserver(androidx.room.InvalidationTracker$Observer)>($r9);

     label01:
        z3 = 0;

     label02:
        z4 = 0;

        $r15 = r0.<androidx.room.RoomTrackingLiveData: java.util.concurrent.atomic.AtomicBoolean computing>;

        $z5 = virtualinvoke $r15.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);

        if $z5 == 0 goto label12;

     label03:
        r16 = null;

     label04:
        $r4 = r0.<androidx.room.RoomTrackingLiveData: java.util.concurrent.atomic.AtomicBoolean invalid>;

        $z2 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(1, 0);

        if $z2 == 0 goto label08;

        z4 = 1;

     label05:
        $r6 = r0.<androidx.room.RoomTrackingLiveData: java.util.concurrent.Callable computeFunction>;

        r16 = interfaceinvoke $r6.<java.util.concurrent.Callable: java.lang.Object call()>();

     label06:
        goto label04;

     label07:
        $r12 := @caughtexception;

        r1 = $r12;

        $r13 = new java.lang.RuntimeException;

        $r14 = (java.lang.Throwable) r1;

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Exception while computing database live data.", $r14);

        throw $r13;

     label08:
        if z4 == 0 goto label09;

        virtualinvoke r0.<androidx.room.RoomTrackingLiveData: void postValue(java.lang.Object)>(r16);

     label09:
        $r5 = r0.<androidx.room.RoomTrackingLiveData: java.util.concurrent.atomic.AtomicBoolean computing>;

        virtualinvoke $r5.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

        goto label12;

     label10:
        $r10 := @caughtexception;

        r17 = $r10;

     label11:
        $r11 = r0.<androidx.room.RoomTrackingLiveData: java.util.concurrent.atomic.AtomicBoolean computing>;

        virtualinvoke $r11.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

        throw r17;

     label12:
        if z4 == 0 goto label13;

        $r3 = r0.<androidx.room.RoomTrackingLiveData: java.util.concurrent.atomic.AtomicBoolean invalid>;

        $z1 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z1 != 0 goto label02;

     label13:
        return;

        catch java.lang.Exception from label05 to label06 with label07;
        catch java.lang.Throwable from label03 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    private static final void invalidationRunnable$lambda$1(androidx.room.RoomTrackingLiveData)
    {
        androidx.room.RoomTrackingLiveData r0;
        boolean z0, $z1;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        java.util.concurrent.Executor $r2;
        java.lang.Runnable $r3;

        r0 := @parameter0: androidx.room.RoomTrackingLiveData;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        z0 = virtualinvoke r0.<androidx.room.RoomTrackingLiveData: boolean hasActiveObservers()>();

        $r1 = r0.<androidx.room.RoomTrackingLiveData: java.util.concurrent.atomic.AtomicBoolean invalid>;

        $z1 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);

        if $z1 == 0 goto label1;

        if z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<androidx.room.RoomTrackingLiveData: java.util.concurrent.Executor getQueryExecutor()>();

        $r3 = r0.<androidx.room.RoomTrackingLiveData: java.lang.Runnable refreshRunnable>;

        interfaceinvoke $r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r3);

     label1:
        return;
    }

androidx.room.RoomTrackingLiveData$observer$1
<androidx.room.RoomTrackingLiveData$observer$1: androidx.room.RoomTrackingLiveData this$0>
    void <init>(java.lang.String[], androidx.room.RoomTrackingLiveData)
    {
        androidx.room.RoomTrackingLiveData$observer$1 r0;
        java.lang.String[] $r1;
        androidx.room.RoomTrackingLiveData $r2;

        r0 := @this: androidx.room.RoomTrackingLiveData$observer$1;

        $r1 := @parameter0: java.lang.String[];

        $r2 := @parameter1: androidx.room.RoomTrackingLiveData;

        r0.<androidx.room.RoomTrackingLiveData$observer$1: androidx.room.RoomTrackingLiveData this$0> = $r2;

        specialinvoke r0.<androidx.room.InvalidationTracker$Observer: void <init>(java.lang.String[])>($r1);

        return;
    }

    public void onInvalidated(java.util.Set)
    {
        androidx.room.RoomTrackingLiveData$observer$1 r0;
        java.util.Set r1;
        androidx.arch.core.executor.ArchTaskExecutor $r2;
        androidx.room.RoomTrackingLiveData $r3;
        java.lang.Runnable $r4;

        r0 := @this: androidx.room.RoomTrackingLiveData$observer$1;

        r1 := @parameter0: java.util.Set;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "tables");

        $r2 = staticinvoke <androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.ArchTaskExecutor getInstance()>();

        $r3 = r0.<androidx.room.RoomTrackingLiveData$observer$1: androidx.room.RoomTrackingLiveData this$0>;

        $r4 = virtualinvoke $r3.<androidx.room.RoomTrackingLiveData: java.lang.Runnable getInvalidationRunnable()>();

        virtualinvoke $r2.<androidx.arch.core.executor.ArchTaskExecutor: void executeOnMainThread(java.lang.Runnable)>($r4);

        return;
    }

