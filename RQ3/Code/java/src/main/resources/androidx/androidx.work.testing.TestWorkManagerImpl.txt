androidx.work.testing.TestWorkManagerImpl
<androidx.work.testing.TestWorkManagerImpl: androidx.work.testing.TestScheduler mScheduler>
    void <init>(android.content.Context, androidx.work.Configuration, androidx.work.impl.utils.taskexecutor.SerialExecutor)
    {
        androidx.work.testing.TestWorkManagerImpl r0;
        android.content.Context r1;
        androidx.work.Configuration r2;
        androidx.work.impl.utils.taskexecutor.SerialExecutor r3;
        androidx.work.testing.TestWorkManagerImpl$1 $r4;
        androidx.work.impl.Processor $r5;
        androidx.work.testing.TestScheduler $r6;

        r0 := @this: androidx.work.testing.TestWorkManagerImpl;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: androidx.work.Configuration;

        r3 := @parameter2: androidx.work.impl.utils.taskexecutor.SerialExecutor;

        $r4 = new androidx.work.testing.TestWorkManagerImpl$1;

        specialinvoke $r4.<androidx.work.testing.TestWorkManagerImpl$1: void <init>(androidx.work.impl.utils.taskexecutor.SerialExecutor)>(r3);

        specialinvoke r0.<androidx.work.impl.WorkManagerImpl: void <init>(android.content.Context,androidx.work.Configuration,androidx.work.impl.utils.taskexecutor.TaskExecutor,boolean)>(r1, r2, $r4, 1);

        $r5 = virtualinvoke r0.<androidx.work.testing.TestWorkManagerImpl: androidx.work.impl.Processor getProcessor()>();

        $r6 = r0.<androidx.work.testing.TestWorkManagerImpl: androidx.work.testing.TestScheduler mScheduler>;

        virtualinvoke $r5.<androidx.work.impl.Processor: void addExecutionListener(androidx.work.impl.ExecutionListener)>($r6);

        return;
    }

    public java.util.List createSchedulers(android.content.Context, androidx.work.Configuration, androidx.work.impl.constraints.trackers.Trackers)
    {
        androidx.work.testing.TestWorkManagerImpl r0;
        android.content.Context r1;
        androidx.work.Configuration r2;
        androidx.work.impl.constraints.trackers.Trackers r3;
        androidx.work.testing.TestScheduler $r4, $r5;
        java.util.List $r6;

        r0 := @this: androidx.work.testing.TestWorkManagerImpl;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: androidx.work.Configuration;

        r3 := @parameter2: androidx.work.impl.constraints.trackers.Trackers;

        $r4 = new androidx.work.testing.TestScheduler;

        specialinvoke $r4.<androidx.work.testing.TestScheduler: void <init>(android.content.Context)>(r1);

        r0.<androidx.work.testing.TestWorkManagerImpl: androidx.work.testing.TestScheduler mScheduler> = $r4;

        $r5 = r0.<androidx.work.testing.TestWorkManagerImpl: androidx.work.testing.TestScheduler mScheduler>;

        $r6 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r5);

        return $r6;
    }

    public void setAllConstraintsMet(java.util.UUID)
    {
        androidx.work.testing.TestWorkManagerImpl r0;
        java.util.UUID r1;
        androidx.work.testing.TestScheduler $r2;

        r0 := @this: androidx.work.testing.TestWorkManagerImpl;

        r1 := @parameter0: java.util.UUID;

        $r2 = r0.<androidx.work.testing.TestWorkManagerImpl: androidx.work.testing.TestScheduler mScheduler>;

        virtualinvoke $r2.<androidx.work.testing.TestScheduler: void setAllConstraintsMet(java.util.UUID)>(r1);

        return;
    }

    public void setInitialDelayMet(java.util.UUID)
    {
        androidx.work.testing.TestWorkManagerImpl r0;
        java.util.UUID r1;
        androidx.work.testing.TestScheduler $r2;

        r0 := @this: androidx.work.testing.TestWorkManagerImpl;

        r1 := @parameter0: java.util.UUID;

        $r2 = r0.<androidx.work.testing.TestWorkManagerImpl: androidx.work.testing.TestScheduler mScheduler>;

        virtualinvoke $r2.<androidx.work.testing.TestScheduler: void setInitialDelayMet(java.util.UUID)>(r1);

        return;
    }

    public void setPeriodDelayMet(java.util.UUID)
    {
        androidx.work.testing.TestWorkManagerImpl r0;
        java.util.UUID r1;
        androidx.work.testing.TestScheduler $r2;

        r0 := @this: androidx.work.testing.TestWorkManagerImpl;

        r1 := @parameter0: java.util.UUID;

        $r2 = r0.<androidx.work.testing.TestWorkManagerImpl: androidx.work.testing.TestScheduler mScheduler>;

        virtualinvoke $r2.<androidx.work.testing.TestScheduler: void setPeriodDelayMet(java.util.UUID)>(r1);

        return;
    }

androidx.work.testing.TestWorkManagerImpl$1
<androidx.work.testing.TestWorkManagerImpl$1: java.util.concurrent.Executor mSynchronousExecutor>
<androidx.work.testing.TestWorkManagerImpl$1: androidx.work.impl.utils.taskexecutor.SerialExecutor val$serialExecutor>
    void <init>(androidx.work.impl.utils.taskexecutor.SerialExecutor)
    {
        androidx.work.testing.TestWorkManagerImpl$1 r0;
        androidx.work.impl.utils.taskexecutor.SerialExecutor r1;
        androidx.work.testing.SynchronousExecutor $r2;

        r0 := @this: androidx.work.testing.TestWorkManagerImpl$1;

        r1 := @parameter0: androidx.work.impl.utils.taskexecutor.SerialExecutor;

        r0.<androidx.work.testing.TestWorkManagerImpl$1: androidx.work.impl.utils.taskexecutor.SerialExecutor val$serialExecutor> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new androidx.work.testing.SynchronousExecutor;

        specialinvoke $r2.<androidx.work.testing.SynchronousExecutor: void <init>()>();

        r0.<androidx.work.testing.TestWorkManagerImpl$1: java.util.concurrent.Executor mSynchronousExecutor> = $r2;

        return;
    }

    public java.util.concurrent.Executor getMainThreadExecutor()
    {
        androidx.work.testing.TestWorkManagerImpl$1 r0;
        java.util.concurrent.Executor $r1;

        r0 := @this: androidx.work.testing.TestWorkManagerImpl$1;

        $r1 = r0.<androidx.work.testing.TestWorkManagerImpl$1: java.util.concurrent.Executor mSynchronousExecutor>;

        return $r1;
    }

    public androidx.work.impl.utils.taskexecutor.SerialExecutor getSerialTaskExecutor()
    {
        androidx.work.testing.TestWorkManagerImpl$1 r0;
        androidx.work.impl.utils.taskexecutor.SerialExecutor $r1;

        r0 := @this: androidx.work.testing.TestWorkManagerImpl$1;

        $r1 = r0.<androidx.work.testing.TestWorkManagerImpl$1: androidx.work.impl.utils.taskexecutor.SerialExecutor val$serialExecutor>;

        return $r1;
    }

