androidx.compose.Stack
<androidx.compose.Stack: java.util.ArrayList backing>
    public void <init>()
    {
        androidx.compose.Stack r0;
        java.util.ArrayList $r1;

        r0 := @this: androidx.compose.Stack;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<androidx.compose.Stack: java.util.ArrayList backing> = $r1;

        return;
    }

    public final int getSize()
    {
        androidx.compose.Stack r0;
        java.util.ArrayList $r1;
        int $i0;

        r0 := @this: androidx.compose.Stack;

        $r1 = r0.<androidx.compose.Stack: java.util.ArrayList backing>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        return $i0;
    }

    public final boolean push(java.lang.Object)
    {
        androidx.compose.Stack r0;
        java.lang.Object r1;
        java.util.ArrayList $r2;
        boolean $z0;

        r0 := @this: androidx.compose.Stack;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<androidx.compose.Stack: java.util.ArrayList backing>;

        $z0 = virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        return $z0;
    }

    public final java.lang.Object pop()
    {
        androidx.compose.Stack r0;
        java.util.ArrayList $r1;
        int $i0, $i1;
        java.lang.Object $r2;

        r0 := @this: androidx.compose.Stack;

        $r1 = r0.<androidx.compose.Stack: java.util.ArrayList backing>;

        $i0 = virtualinvoke r0.<androidx.compose.Stack: int getSize()>();

        $i1 = $i0 - 1;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object remove(int)>($i1);

        return $r2;
    }

    public final java.lang.Object peek()
    {
        androidx.compose.Stack r0;
        java.util.ArrayList $r1;
        int $i0, $i1;
        java.lang.Object $r2;

        r0 := @this: androidx.compose.Stack;

        $r1 = r0.<androidx.compose.Stack: java.util.ArrayList backing>;

        $i0 = virtualinvoke r0.<androidx.compose.Stack: int getSize()>();

        $i1 = $i0 - 1;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        return $r2;
    }

    public final java.lang.Object peek(int)
    {
        androidx.compose.Stack r0;
        int i0;
        java.util.ArrayList $r1;
        java.lang.Object $r2;

        r0 := @this: androidx.compose.Stack;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.compose.Stack: java.util.ArrayList backing>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        return $r2;
    }

    public final boolean isEmpty()
    {
        androidx.compose.Stack r0;
        java.util.ArrayList $r1;
        boolean $z0;

        r0 := @this: androidx.compose.Stack;

        $r1 = r0.<androidx.compose.Stack: java.util.ArrayList backing>;

        $z0 = virtualinvoke $r1.<java.util.ArrayList: boolean isEmpty()>();

        return $z0;
    }

    public final boolean isNotEmpty()
    {
        androidx.compose.Stack r0;
        boolean $z0, $z1;

        r0 := @this: androidx.compose.Stack;

        $z0 = virtualinvoke r0.<androidx.compose.Stack: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public final void clear()
    {
        androidx.compose.Stack r0;
        java.util.ArrayList $r1;

        r0 := @this: androidx.compose.Stack;

        $r1 = r0.<androidx.compose.Stack: java.util.ArrayList backing>;

        virtualinvoke $r1.<java.util.ArrayList: void clear()>();

        return;
    }

    public final java.lang.Object[] toArray()
    {
        androidx.compose.Stack r0;
        int i0, i1, i2;
        java.lang.Object[] r1;
        java.util.ArrayList $r2, $r3;
        java.lang.Object $r4;

        r0 := @this: androidx.compose.Stack;

        i2 = 0;

        $r2 = r0.<androidx.compose.Stack: java.util.ArrayList backing>;

        i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        r1 = newarray (java.lang.Object)[i0];

     label1:
        if i2 >= i0 goto label2;

        i1 = i2;

        $r3 = r0.<androidx.compose.Stack: java.util.ArrayList backing>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r1[i1] = $r4;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

