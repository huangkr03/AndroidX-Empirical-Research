androidx.media2.session.MediaBrowser
<androidx.media2.session.MediaBrowser: java.lang.String TAG>
<androidx.media2.session.MediaBrowser: boolean DEBUG>
    void <init>(android.content.Context, androidx.media2.session.SessionToken, android.os.Bundle, java.util.concurrent.Executor, androidx.media2.session.MediaBrowser$BrowserCallback)
    {
        androidx.media2.session.MediaBrowser r0;
        android.content.Context r1;
        androidx.media2.session.SessionToken r2;
        android.os.Bundle r3;
        java.util.concurrent.Executor r4;
        androidx.media2.session.MediaBrowser$BrowserCallback r5;

        r0 := @this: androidx.media2.session.MediaBrowser;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: androidx.media2.session.SessionToken;

        r3 := @parameter2: android.os.Bundle;

        r4 := @parameter3: java.util.concurrent.Executor;

        r5 := @parameter4: androidx.media2.session.MediaBrowser$BrowserCallback;

        specialinvoke r0.<androidx.media2.session.MediaController: void <init>(android.content.Context,androidx.media2.session.SessionToken,android.os.Bundle,java.util.concurrent.Executor,androidx.media2.session.MediaController$ControllerCallback)>(r1, r2, r3, r4, r5);

        return;
    }

    void <init>(android.content.Context, android.support.v4.media.session.MediaSessionCompat$Token, android.os.Bundle, java.util.concurrent.Executor, androidx.media2.session.MediaBrowser$BrowserCallback)
    {
        androidx.media2.session.MediaBrowser r0;
        android.content.Context r1;
        android.support.v4.media.session.MediaSessionCompat$Token r2;
        android.os.Bundle r3;
        java.util.concurrent.Executor r4;
        androidx.media2.session.MediaBrowser$BrowserCallback r5;

        r0 := @this: androidx.media2.session.MediaBrowser;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.support.v4.media.session.MediaSessionCompat$Token;

        r3 := @parameter2: android.os.Bundle;

        r4 := @parameter3: java.util.concurrent.Executor;

        r5 := @parameter4: androidx.media2.session.MediaBrowser$BrowserCallback;

        specialinvoke r0.<androidx.media2.session.MediaController: void <init>(android.content.Context,android.support.v4.media.session.MediaSessionCompat$Token,android.os.Bundle,java.util.concurrent.Executor,androidx.media2.session.MediaController$ControllerCallback)>(r1, r2, r3, r4, r5);

        return;
    }

    androidx.media2.session.MediaBrowser$MediaBrowserImpl createImpl(android.content.Context, androidx.media2.session.SessionToken, android.os.Bundle)
    {
        androidx.media2.session.MediaBrowser r0;
        android.content.Context r1;
        androidx.media2.session.SessionToken r2;
        android.os.Bundle r3;
        boolean $z0;
        androidx.media2.session.MediaBrowserImplBase $r4;
        androidx.media2.session.MediaBrowserImplLegacy $r5;

        r0 := @this: androidx.media2.session.MediaBrowser;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: androidx.media2.session.SessionToken;

        r3 := @parameter2: android.os.Bundle;

        $z0 = virtualinvoke r2.<androidx.media2.session.SessionToken: boolean isLegacySession()>();

        if $z0 == 0 goto label1;

        $r5 = new androidx.media2.session.MediaBrowserImplLegacy;

        specialinvoke $r5.<androidx.media2.session.MediaBrowserImplLegacy: void <init>(android.content.Context,androidx.media2.session.MediaBrowser,androidx.media2.session.SessionToken)>(r1, r0, r2);

        return $r5;

     label1:
        $r4 = new androidx.media2.session.MediaBrowserImplBase;

        specialinvoke $r4.<androidx.media2.session.MediaBrowserImplBase: void <init>(android.content.Context,androidx.media2.session.MediaController,androidx.media2.session.SessionToken,android.os.Bundle)>(r1, r0, r2, r3);

        return $r4;
    }

    androidx.media2.session.MediaBrowser$MediaBrowserImpl getImpl()
    {
        androidx.media2.session.MediaBrowser r0;
        androidx.media2.session.MediaController$MediaControllerImpl $r1;
        androidx.media2.session.MediaBrowser$MediaBrowserImpl $r2;

        r0 := @this: androidx.media2.session.MediaBrowser;

        $r1 = specialinvoke r0.<androidx.media2.session.MediaController: androidx.media2.session.MediaController$MediaControllerImpl getImpl()>();

        $r2 = (androidx.media2.session.MediaBrowser$MediaBrowserImpl) $r1;

        return $r2;
    }

    public com.google.common.util.concurrent.ListenableFuture getLibraryRoot(androidx.media2.session.MediaLibraryService$LibraryParams)
    {
        androidx.media2.session.MediaBrowser r0;
        androidx.media2.session.MediaLibraryService$LibraryParams r1;
        boolean $z0;
        com.google.common.util.concurrent.ListenableFuture $r2, $r4;
        androidx.media2.session.MediaBrowser$MediaBrowserImpl $r3;

        r0 := @this: androidx.media2.session.MediaBrowser;

        r1 := @parameter0: androidx.media2.session.MediaLibraryService$LibraryParams;

        $z0 = virtualinvoke r0.<androidx.media2.session.MediaBrowser: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r0.<androidx.media2.session.MediaBrowser: androidx.media2.session.MediaBrowser$MediaBrowserImpl getImpl()>();

        $r4 = interfaceinvoke $r3.<androidx.media2.session.MediaBrowser$MediaBrowserImpl: com.google.common.util.concurrent.ListenableFuture getLibraryRoot(androidx.media2.session.MediaLibraryService$LibraryParams)>(r1);

        return $r4;

     label1:
        $r2 = staticinvoke <androidx.media2.session.MediaBrowser: com.google.common.util.concurrent.ListenableFuture createDisconnectedFuture()>();

        return $r2;
    }

    public com.google.common.util.concurrent.ListenableFuture subscribe(java.lang.String, androidx.media2.session.MediaLibraryService$LibraryParams)
    {
        androidx.media2.session.MediaBrowser r0;
        java.lang.String r1;
        androidx.media2.session.MediaLibraryService$LibraryParams r2;
        boolean $z0, $z1;
        com.google.common.util.concurrent.ListenableFuture $r3, $r5;
        androidx.media2.session.MediaBrowser$MediaBrowserImpl $r4;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: androidx.media2.session.MediaBrowser;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.media2.session.MediaLibraryService$LibraryParams;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("parentId shouldn\'t be empty");

        throw $r6;

     label1:
        $z1 = virtualinvoke r0.<androidx.media2.session.MediaBrowser: boolean isConnected()>();

        if $z1 == 0 goto label2;

        $r4 = virtualinvoke r0.<androidx.media2.session.MediaBrowser: androidx.media2.session.MediaBrowser$MediaBrowserImpl getImpl()>();

        $r5 = interfaceinvoke $r4.<androidx.media2.session.MediaBrowser$MediaBrowserImpl: com.google.common.util.concurrent.ListenableFuture subscribe(java.lang.String,androidx.media2.session.MediaLibraryService$LibraryParams)>(r1, r2);

        return $r5;

     label2:
        $r3 = staticinvoke <androidx.media2.session.MediaBrowser: com.google.common.util.concurrent.ListenableFuture createDisconnectedFuture()>();

        return $r3;
    }

    public com.google.common.util.concurrent.ListenableFuture unsubscribe(java.lang.String)
    {
        androidx.media2.session.MediaBrowser r0;
        java.lang.String r1;
        boolean $z0, $z1;
        com.google.common.util.concurrent.ListenableFuture $r2, $r4;
        androidx.media2.session.MediaBrowser$MediaBrowserImpl $r3;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: androidx.media2.session.MediaBrowser;

        r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("parentId shouldn\'t be empty");

        throw $r5;

     label1:
        $z1 = virtualinvoke r0.<androidx.media2.session.MediaBrowser: boolean isConnected()>();

        if $z1 == 0 goto label2;

        $r3 = virtualinvoke r0.<androidx.media2.session.MediaBrowser: androidx.media2.session.MediaBrowser$MediaBrowserImpl getImpl()>();

        $r4 = interfaceinvoke $r3.<androidx.media2.session.MediaBrowser$MediaBrowserImpl: com.google.common.util.concurrent.ListenableFuture unsubscribe(java.lang.String)>(r1);

        return $r4;

     label2:
        $r2 = staticinvoke <androidx.media2.session.MediaBrowser: com.google.common.util.concurrent.ListenableFuture createDisconnectedFuture()>();

        return $r2;
    }

    public com.google.common.util.concurrent.ListenableFuture getChildren(java.lang.String, int, int, androidx.media2.session.MediaLibraryService$LibraryParams)
    {
        androidx.media2.session.MediaBrowser r0;
        java.lang.String r1;
        int i0, i1;
        androidx.media2.session.MediaLibraryService$LibraryParams r2;
        boolean $z0, $z1;
        com.google.common.util.concurrent.ListenableFuture $r3, $r5;
        androidx.media2.session.MediaBrowser$MediaBrowserImpl $r4;
        java.lang.IllegalArgumentException $r6, $r7, $r8;

        r0 := @this: androidx.media2.session.MediaBrowser;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: androidx.media2.session.MediaLibraryService$LibraryParams;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("parentId shouldn\'t be empty");

        throw $r8;

     label1:
        if i0 >= 0 goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("page shouldn\'t be negative");

        throw $r7;

     label2:
        if i1 >= 1 goto label3;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("pageSize shouldn\'t be less than 1");

        throw $r6;

     label3:
        $z1 = virtualinvoke r0.<androidx.media2.session.MediaBrowser: boolean isConnected()>();

        if $z1 == 0 goto label4;

        $r4 = virtualinvoke r0.<androidx.media2.session.MediaBrowser: androidx.media2.session.MediaBrowser$MediaBrowserImpl getImpl()>();

        $r5 = interfaceinvoke $r4.<androidx.media2.session.MediaBrowser$MediaBrowserImpl: com.google.common.util.concurrent.ListenableFuture getChildren(java.lang.String,int,int,androidx.media2.session.MediaLibraryService$LibraryParams)>(r1, i0, i1, r2);

        return $r5;

     label4:
        $r3 = staticinvoke <androidx.media2.session.MediaBrowser: com.google.common.util.concurrent.ListenableFuture createDisconnectedFuture()>();

        return $r3;
    }

    public com.google.common.util.concurrent.ListenableFuture getItem(java.lang.String)
    {
        androidx.media2.session.MediaBrowser r0;
        java.lang.String r1;
        boolean $z0, $z1;
        com.google.common.util.concurrent.ListenableFuture $r2, $r4;
        androidx.media2.session.MediaBrowser$MediaBrowserImpl $r3;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: androidx.media2.session.MediaBrowser;

        r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("mediaId shouldn\'t be empty");

        throw $r5;

     label1:
        $z1 = virtualinvoke r0.<androidx.media2.session.MediaBrowser: boolean isConnected()>();

        if $z1 == 0 goto label2;

        $r3 = virtualinvoke r0.<androidx.media2.session.MediaBrowser: androidx.media2.session.MediaBrowser$MediaBrowserImpl getImpl()>();

        $r4 = interfaceinvoke $r3.<androidx.media2.session.MediaBrowser$MediaBrowserImpl: com.google.common.util.concurrent.ListenableFuture getItem(java.lang.String)>(r1);

        return $r4;

     label2:
        $r2 = staticinvoke <androidx.media2.session.MediaBrowser: com.google.common.util.concurrent.ListenableFuture createDisconnectedFuture()>();

        return $r2;
    }

    public com.google.common.util.concurrent.ListenableFuture search(java.lang.String, androidx.media2.session.MediaLibraryService$LibraryParams)
    {
        androidx.media2.session.MediaBrowser r0;
        java.lang.String r1;
        androidx.media2.session.MediaLibraryService$LibraryParams r2;
        boolean $z0, $z1;
        com.google.common.util.concurrent.ListenableFuture $r3, $r5;
        androidx.media2.session.MediaBrowser$MediaBrowserImpl $r4;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: androidx.media2.session.MediaBrowser;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.media2.session.MediaLibraryService$LibraryParams;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("query shouldn\'t be empty");

        throw $r6;

     label1:
        $z1 = virtualinvoke r0.<androidx.media2.session.MediaBrowser: boolean isConnected()>();

        if $z1 == 0 goto label2;

        $r4 = virtualinvoke r0.<androidx.media2.session.MediaBrowser: androidx.media2.session.MediaBrowser$MediaBrowserImpl getImpl()>();

        $r5 = interfaceinvoke $r4.<androidx.media2.session.MediaBrowser$MediaBrowserImpl: com.google.common.util.concurrent.ListenableFuture search(java.lang.String,androidx.media2.session.MediaLibraryService$LibraryParams)>(r1, r2);

        return $r5;

     label2:
        $r3 = staticinvoke <androidx.media2.session.MediaBrowser: com.google.common.util.concurrent.ListenableFuture createDisconnectedFuture()>();

        return $r3;
    }

    public com.google.common.util.concurrent.ListenableFuture getSearchResult(java.lang.String, int, int, androidx.media2.session.MediaLibraryService$LibraryParams)
    {
        androidx.media2.session.MediaBrowser r0;
        java.lang.String r1;
        int i0, i1;
        androidx.media2.session.MediaLibraryService$LibraryParams r2;
        boolean $z0, $z1;
        com.google.common.util.concurrent.ListenableFuture $r3, $r5;
        androidx.media2.session.MediaBrowser$MediaBrowserImpl $r4;
        java.lang.IllegalArgumentException $r6, $r7, $r8;

        r0 := @this: androidx.media2.session.MediaBrowser;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: androidx.media2.session.MediaLibraryService$LibraryParams;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("query shouldn\'t be empty");

        throw $r8;

     label1:
        if i0 >= 0 goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("page shouldn\'t be negative");

        throw $r7;

     label2:
        if i1 >= 1 goto label3;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("pageSize shouldn\'t be less than 1");

        throw $r6;

     label3:
        $z1 = virtualinvoke r0.<androidx.media2.session.MediaBrowser: boolean isConnected()>();

        if $z1 == 0 goto label4;

        $r4 = virtualinvoke r0.<androidx.media2.session.MediaBrowser: androidx.media2.session.MediaBrowser$MediaBrowserImpl getImpl()>();

        $r5 = interfaceinvoke $r4.<androidx.media2.session.MediaBrowser$MediaBrowserImpl: com.google.common.util.concurrent.ListenableFuture getSearchResult(java.lang.String,int,int,androidx.media2.session.MediaLibraryService$LibraryParams)>(r1, i0, i1, r2);

        return $r5;

     label4:
        $r3 = staticinvoke <androidx.media2.session.MediaBrowser: com.google.common.util.concurrent.ListenableFuture createDisconnectedFuture()>();

        return $r3;
    }

    void notifyBrowserCallback(androidx.media2.session.MediaBrowser$BrowserCallbackRunnable)
    {
        androidx.media2.session.MediaBrowser r0;
        androidx.media2.session.MediaBrowser$BrowserCallbackRunnable r1;
        androidx.media2.session.MediaController$ControllerCallback $r2;
        java.util.concurrent.Executor $r3, $r5;
        androidx.media2.session.MediaBrowser$1 $r4;

        r0 := @this: androidx.media2.session.MediaBrowser;

        r1 := @parameter0: androidx.media2.session.MediaBrowser$BrowserCallbackRunnable;

        $r2 = r0.<androidx.media2.session.MediaBrowser: androidx.media2.session.MediaController$ControllerCallback mPrimaryCallback>;

        if $r2 == null goto label1;

        $r3 = r0.<androidx.media2.session.MediaBrowser: java.util.concurrent.Executor mPrimaryCallbackExecutor>;

        if $r3 == null goto label1;

        $r5 = r0.<androidx.media2.session.MediaBrowser: java.util.concurrent.Executor mPrimaryCallbackExecutor>;

        $r4 = new androidx.media2.session.MediaBrowser$1;

        specialinvoke $r4.<androidx.media2.session.MediaBrowser$1: void <init>(androidx.media2.session.MediaBrowser,androidx.media2.session.MediaBrowser$BrowserCallbackRunnable)>(r0, r1);

        interfaceinvoke $r5.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r4);

     label1:
        return;
    }

    private static com.google.common.util.concurrent.ListenableFuture createDisconnectedFuture()
    {
        com.google.common.util.concurrent.ListenableFuture $r0;

        $r0 = staticinvoke <androidx.media2.session.LibraryResult: com.google.common.util.concurrent.ListenableFuture createFutureWithResult(int)>(-100);

        return $r0;
    }

    volatile androidx.media2.session.MediaController$MediaControllerImpl getImpl()
    {
        androidx.media2.session.MediaBrowser r0;
        androidx.media2.session.MediaBrowser$MediaBrowserImpl $r1;

        r0 := @this: androidx.media2.session.MediaBrowser;

        $r1 = virtualinvoke r0.<androidx.media2.session.MediaBrowser: androidx.media2.session.MediaBrowser$MediaBrowserImpl getImpl()>();

        return $r1;
    }

    volatile androidx.media2.session.MediaController$MediaControllerImpl createImpl(android.content.Context, androidx.media2.session.SessionToken, android.os.Bundle)
    {
        androidx.media2.session.MediaBrowser r0;
        android.content.Context r1;
        androidx.media2.session.SessionToken r2;
        android.os.Bundle r3;
        androidx.media2.session.MediaBrowser$MediaBrowserImpl $r4;

        r0 := @this: androidx.media2.session.MediaBrowser;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: androidx.media2.session.SessionToken;

        r3 := @parameter2: android.os.Bundle;

        $r4 = virtualinvoke r0.<androidx.media2.session.MediaBrowser: androidx.media2.session.MediaBrowser$MediaBrowserImpl createImpl(android.content.Context,androidx.media2.session.SessionToken,android.os.Bundle)>(r1, r2, r3);

        return $r4;
    }

    static void <clinit>()
    {
        boolean $z0;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("MediaBrowser", 3);

        <androidx.media2.session.MediaBrowser: boolean DEBUG> = $z0;

        return;
    }

androidx.media2.session.MediaBrowser$1
<androidx.media2.session.MediaBrowser$1: androidx.media2.session.MediaBrowser$BrowserCallbackRunnable val$callbackRunnable>
<androidx.media2.session.MediaBrowser$1: androidx.media2.session.MediaBrowser this$0>
    void <init>(androidx.media2.session.MediaBrowser, androidx.media2.session.MediaBrowser$BrowserCallbackRunnable)
    {
        androidx.media2.session.MediaBrowser$1 r0;
        androidx.media2.session.MediaBrowser r1;
        androidx.media2.session.MediaBrowser$BrowserCallbackRunnable r2;

        r0 := @this: androidx.media2.session.MediaBrowser$1;

        r1 := @parameter0: androidx.media2.session.MediaBrowser;

        r2 := @parameter1: androidx.media2.session.MediaBrowser$BrowserCallbackRunnable;

        r0.<androidx.media2.session.MediaBrowser$1: androidx.media2.session.MediaBrowser this$0> = r1;

        r0.<androidx.media2.session.MediaBrowser$1: androidx.media2.session.MediaBrowser$BrowserCallbackRunnable val$callbackRunnable> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        androidx.media2.session.MediaBrowser$1 r0;
        androidx.media2.session.MediaBrowser $r1;
        androidx.media2.session.MediaController$ControllerCallback $r2;
        androidx.media2.session.MediaBrowser$BrowserCallback $r3;
        androidx.media2.session.MediaBrowser$BrowserCallbackRunnable $r4;

        r0 := @this: androidx.media2.session.MediaBrowser$1;

        $r4 = r0.<androidx.media2.session.MediaBrowser$1: androidx.media2.session.MediaBrowser$BrowserCallbackRunnable val$callbackRunnable>;

        $r1 = r0.<androidx.media2.session.MediaBrowser$1: androidx.media2.session.MediaBrowser this$0>;

        $r2 = $r1.<androidx.media2.session.MediaBrowser: androidx.media2.session.MediaController$ControllerCallback mPrimaryCallback>;

        $r3 = (androidx.media2.session.MediaBrowser$BrowserCallback) $r2;

        interfaceinvoke $r4.<androidx.media2.session.MediaBrowser$BrowserCallbackRunnable: void run(androidx.media2.session.MediaBrowser$BrowserCallback)>($r3);

        return;
    }

androidx.media2.session.MediaBrowser$BrowserCallback
    public void <init>()
    {
        androidx.media2.session.MediaBrowser$BrowserCallback r0;

        r0 := @this: androidx.media2.session.MediaBrowser$BrowserCallback;

        specialinvoke r0.<androidx.media2.session.MediaController$ControllerCallback: void <init>()>();

        return;
    }

    public void onChildrenChanged(androidx.media2.session.MediaBrowser, java.lang.String, int, androidx.media2.session.MediaLibraryService$LibraryParams)
    {
        androidx.media2.session.MediaBrowser$BrowserCallback r0;
        androidx.media2.session.MediaBrowser r1;
        java.lang.String r2;
        int i0;
        androidx.media2.session.MediaLibraryService$LibraryParams r3;

        r0 := @this: androidx.media2.session.MediaBrowser$BrowserCallback;

        r1 := @parameter0: androidx.media2.session.MediaBrowser;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: androidx.media2.session.MediaLibraryService$LibraryParams;

        return;
    }

    public void onSearchResultChanged(androidx.media2.session.MediaBrowser, java.lang.String, int, androidx.media2.session.MediaLibraryService$LibraryParams)
    {
        androidx.media2.session.MediaBrowser$BrowserCallback r0;
        androidx.media2.session.MediaBrowser r1;
        java.lang.String r2;
        int i0;
        androidx.media2.session.MediaLibraryService$LibraryParams r3;

        r0 := @this: androidx.media2.session.MediaBrowser$BrowserCallback;

        r1 := @parameter0: androidx.media2.session.MediaBrowser;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: androidx.media2.session.MediaLibraryService$LibraryParams;

        return;
    }

androidx.media2.session.MediaBrowser$BrowserCallbackRunnable
<androidx.media2.session.MediaBrowser$BrowserCallbackRunnable: void run(androidx.media2.session.MediaBrowser$BrowserCallback)>
androidx.media2.session.MediaBrowser$Builder
    public void <init>(android.content.Context)
    {
        androidx.media2.session.MediaBrowser$Builder r0;
        android.content.Context r1;

        r0 := @this: androidx.media2.session.MediaBrowser$Builder;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<androidx.media2.session.MediaController$BuilderBase: void <init>(android.content.Context)>(r1);

        return;
    }

    public androidx.media2.session.MediaBrowser$Builder setSessionToken(androidx.media2.session.SessionToken)
    {
        androidx.media2.session.MediaBrowser$Builder r0, $r3;
        androidx.media2.session.SessionToken r1;
        androidx.media2.session.MediaController$BuilderBase $r2;

        r0 := @this: androidx.media2.session.MediaBrowser$Builder;

        r1 := @parameter0: androidx.media2.session.SessionToken;

        $r2 = specialinvoke r0.<androidx.media2.session.MediaController$BuilderBase: androidx.media2.session.MediaController$BuilderBase setSessionToken(androidx.media2.session.SessionToken)>(r1);

        $r3 = (androidx.media2.session.MediaBrowser$Builder) $r2;

        return $r3;
    }

    public androidx.media2.session.MediaBrowser$Builder setSessionCompatToken(android.support.v4.media.session.MediaSessionCompat$Token)
    {
        androidx.media2.session.MediaBrowser$Builder r0, $r3;
        android.support.v4.media.session.MediaSessionCompat$Token r1;
        androidx.media2.session.MediaController$BuilderBase $r2;

        r0 := @this: androidx.media2.session.MediaBrowser$Builder;

        r1 := @parameter0: android.support.v4.media.session.MediaSessionCompat$Token;

        $r2 = specialinvoke r0.<androidx.media2.session.MediaController$BuilderBase: androidx.media2.session.MediaController$BuilderBase setSessionCompatToken(android.support.v4.media.session.MediaSessionCompat$Token)>(r1);

        $r3 = (androidx.media2.session.MediaBrowser$Builder) $r2;

        return $r3;
    }

    public androidx.media2.session.MediaBrowser$Builder setControllerCallback(java.util.concurrent.Executor, androidx.media2.session.MediaBrowser$BrowserCallback)
    {
        androidx.media2.session.MediaBrowser$Builder r0, $r4;
        java.util.concurrent.Executor r1;
        androidx.media2.session.MediaBrowser$BrowserCallback r2;
        androidx.media2.session.MediaController$BuilderBase $r3;

        r0 := @this: androidx.media2.session.MediaBrowser$Builder;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: androidx.media2.session.MediaBrowser$BrowserCallback;

        $r3 = specialinvoke r0.<androidx.media2.session.MediaController$BuilderBase: androidx.media2.session.MediaController$BuilderBase setControllerCallback(java.util.concurrent.Executor,androidx.media2.session.MediaController$ControllerCallback)>(r1, r2);

        $r4 = (androidx.media2.session.MediaBrowser$Builder) $r3;

        return $r4;
    }

    public androidx.media2.session.MediaBrowser$Builder setConnectionHints(android.os.Bundle)
    {
        androidx.media2.session.MediaBrowser$Builder r0, $r3;
        android.os.Bundle r1;
        androidx.media2.session.MediaController$BuilderBase $r2;

        r0 := @this: androidx.media2.session.MediaBrowser$Builder;

        r1 := @parameter0: android.os.Bundle;

        $r2 = specialinvoke r0.<androidx.media2.session.MediaController$BuilderBase: androidx.media2.session.MediaController$BuilderBase setConnectionHints(android.os.Bundle)>(r1);

        $r3 = (androidx.media2.session.MediaBrowser$Builder) $r2;

        return $r3;
    }

    public androidx.media2.session.MediaBrowser build()
    {
        androidx.media2.session.MediaBrowser$Builder r0;
        androidx.media2.session.SessionToken $r1, $r2, $r15;
        androidx.media2.session.MediaBrowser $r3, $r10;
        androidx.media2.session.MediaController$ControllerCallback $r4, $r11;
        androidx.media2.session.MediaBrowser$BrowserCallback $r5, $r12;
        java.util.concurrent.Executor $r6, $r13;
        android.os.Bundle $r7, $r14;
        android.support.v4.media.session.MediaSessionCompat$Token $r8, $r17;
        android.content.Context $r9, $r16;
        java.lang.IllegalArgumentException $r18;

        r0 := @this: androidx.media2.session.MediaBrowser$Builder;

        $r1 = r0.<androidx.media2.session.MediaBrowser$Builder: androidx.media2.session.SessionToken mToken>;

        if $r1 != null goto label1;

        $r17 = r0.<androidx.media2.session.MediaBrowser$Builder: android.support.v4.media.session.MediaSessionCompat$Token mCompatToken>;

        if $r17 != null goto label1;

        $r18 = new java.lang.IllegalArgumentException;

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("token and compat token shouldn\'t be both null");

        throw $r18;

     label1:
        $r2 = r0.<androidx.media2.session.MediaBrowser$Builder: androidx.media2.session.SessionToken mToken>;

        if $r2 == null goto label2;

        $r10 = new androidx.media2.session.MediaBrowser;

        $r16 = r0.<androidx.media2.session.MediaBrowser$Builder: android.content.Context mContext>;

        $r15 = r0.<androidx.media2.session.MediaBrowser$Builder: androidx.media2.session.SessionToken mToken>;

        $r14 = r0.<androidx.media2.session.MediaBrowser$Builder: android.os.Bundle mConnectionHints>;

        $r13 = r0.<androidx.media2.session.MediaBrowser$Builder: java.util.concurrent.Executor mCallbackExecutor>;

        $r11 = r0.<androidx.media2.session.MediaBrowser$Builder: androidx.media2.session.MediaController$ControllerCallback mCallback>;

        $r12 = (androidx.media2.session.MediaBrowser$BrowserCallback) $r11;

        specialinvoke $r10.<androidx.media2.session.MediaBrowser: void <init>(android.content.Context,androidx.media2.session.SessionToken,android.os.Bundle,java.util.concurrent.Executor,androidx.media2.session.MediaBrowser$BrowserCallback)>($r16, $r15, $r14, $r13, $r12);

        return $r10;

     label2:
        $r3 = new androidx.media2.session.MediaBrowser;

        $r9 = r0.<androidx.media2.session.MediaBrowser$Builder: android.content.Context mContext>;

        $r8 = r0.<androidx.media2.session.MediaBrowser$Builder: android.support.v4.media.session.MediaSessionCompat$Token mCompatToken>;

        $r7 = r0.<androidx.media2.session.MediaBrowser$Builder: android.os.Bundle mConnectionHints>;

        $r6 = r0.<androidx.media2.session.MediaBrowser$Builder: java.util.concurrent.Executor mCallbackExecutor>;

        $r4 = r0.<androidx.media2.session.MediaBrowser$Builder: androidx.media2.session.MediaController$ControllerCallback mCallback>;

        $r5 = (androidx.media2.session.MediaBrowser$BrowserCallback) $r4;

        specialinvoke $r3.<androidx.media2.session.MediaBrowser: void <init>(android.content.Context,android.support.v4.media.session.MediaSessionCompat$Token,android.os.Bundle,java.util.concurrent.Executor,androidx.media2.session.MediaBrowser$BrowserCallback)>($r9, $r8, $r7, $r6, $r5);

        return $r3;
    }

    public volatile androidx.media2.session.MediaController build()
    {
        androidx.media2.session.MediaBrowser$Builder r0;
        androidx.media2.session.MediaBrowser $r1;

        r0 := @this: androidx.media2.session.MediaBrowser$Builder;

        $r1 = virtualinvoke r0.<androidx.media2.session.MediaBrowser$Builder: androidx.media2.session.MediaBrowser build()>();

        return $r1;
    }

    public volatile androidx.media2.session.MediaController$BuilderBase setControllerCallback(java.util.concurrent.Executor, androidx.media2.session.MediaController$ControllerCallback)
    {
        androidx.media2.session.MediaBrowser$Builder r0, $r4;
        java.util.concurrent.Executor r1;
        androidx.media2.session.MediaController$ControllerCallback r2;
        androidx.media2.session.MediaBrowser$BrowserCallback $r3;

        r0 := @this: androidx.media2.session.MediaBrowser$Builder;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: androidx.media2.session.MediaController$ControllerCallback;

        $r3 = (androidx.media2.session.MediaBrowser$BrowserCallback) r2;

        $r4 = virtualinvoke r0.<androidx.media2.session.MediaBrowser$Builder: androidx.media2.session.MediaBrowser$Builder setControllerCallback(java.util.concurrent.Executor,androidx.media2.session.MediaBrowser$BrowserCallback)>(r1, $r3);

        return $r4;
    }

    public volatile androidx.media2.session.MediaController$BuilderBase setConnectionHints(android.os.Bundle)
    {
        androidx.media2.session.MediaBrowser$Builder r0, $r2;
        android.os.Bundle r1;

        r0 := @this: androidx.media2.session.MediaBrowser$Builder;

        r1 := @parameter0: android.os.Bundle;

        $r2 = virtualinvoke r0.<androidx.media2.session.MediaBrowser$Builder: androidx.media2.session.MediaBrowser$Builder setConnectionHints(android.os.Bundle)>(r1);

        return $r2;
    }

    public volatile androidx.media2.session.MediaController$BuilderBase setSessionCompatToken(android.support.v4.media.session.MediaSessionCompat$Token)
    {
        androidx.media2.session.MediaBrowser$Builder r0, $r2;
        android.support.v4.media.session.MediaSessionCompat$Token r1;

        r0 := @this: androidx.media2.session.MediaBrowser$Builder;

        r1 := @parameter0: android.support.v4.media.session.MediaSessionCompat$Token;

        $r2 = virtualinvoke r0.<androidx.media2.session.MediaBrowser$Builder: androidx.media2.session.MediaBrowser$Builder setSessionCompatToken(android.support.v4.media.session.MediaSessionCompat$Token)>(r1);

        return $r2;
    }

    public volatile androidx.media2.session.MediaController$BuilderBase setSessionToken(androidx.media2.session.SessionToken)
    {
        androidx.media2.session.MediaBrowser$Builder r0, $r2;
        androidx.media2.session.SessionToken r1;

        r0 := @this: androidx.media2.session.MediaBrowser$Builder;

        r1 := @parameter0: androidx.media2.session.SessionToken;

        $r2 = virtualinvoke r0.<androidx.media2.session.MediaBrowser$Builder: androidx.media2.session.MediaBrowser$Builder setSessionToken(androidx.media2.session.SessionToken)>(r1);

        return $r2;
    }

androidx.media2.session.MediaBrowser$MediaBrowserImpl
<androidx.media2.session.MediaBrowser$MediaBrowserImpl: com.google.common.util.concurrent.ListenableFuture getLibraryRoot(androidx.media2.session.MediaLibraryService$LibraryParams)>
<androidx.media2.session.MediaBrowser$MediaBrowserImpl: com.google.common.util.concurrent.ListenableFuture subscribe(java.lang.String,androidx.media2.session.MediaLibraryService$LibraryParams)>
<androidx.media2.session.MediaBrowser$MediaBrowserImpl: com.google.common.util.concurrent.ListenableFuture unsubscribe(java.lang.String)>
<androidx.media2.session.MediaBrowser$MediaBrowserImpl: com.google.common.util.concurrent.ListenableFuture getChildren(java.lang.String,int,int,androidx.media2.session.MediaLibraryService$LibraryParams)>
<androidx.media2.session.MediaBrowser$MediaBrowserImpl: com.google.common.util.concurrent.ListenableFuture getItem(java.lang.String)>
<androidx.media2.session.MediaBrowser$MediaBrowserImpl: com.google.common.util.concurrent.ListenableFuture search(java.lang.String,androidx.media2.session.MediaLibraryService$LibraryParams)>
<androidx.media2.session.MediaBrowser$MediaBrowserImpl: com.google.common.util.concurrent.ListenableFuture getSearchResult(java.lang.String,int,int,androidx.media2.session.MediaLibraryService$LibraryParams)>
