androidx.test.uiautomator.Tracer
<androidx.test.uiautomator.Tracer: java.lang.String UNKNOWN_METHOD_STRING>
<androidx.test.uiautomator.Tracer: java.lang.String UIAUTOMATOR_PACKAGE>
<androidx.test.uiautomator.Tracer: int CALLER_LOCATION>
<androidx.test.uiautomator.Tracer: int METHOD_TO_TRACE_LOCATION>
<androidx.test.uiautomator.Tracer: int MIN_STACK_TRACE_LENGTH>
<androidx.test.uiautomator.Tracer: androidx.test.uiautomator.Tracer$Mode mCurrentMode>
<androidx.test.uiautomator.Tracer: java.util.List mSinks>
<androidx.test.uiautomator.Tracer: java.io.File mOutputFile>
<androidx.test.uiautomator.Tracer: androidx.test.uiautomator.Tracer mInstance>
    public void <init>()
    {
        androidx.test.uiautomator.Tracer r0;
        androidx.test.uiautomator.Tracer$Mode $r1;
        java.util.ArrayList $r2;

        r0 := @this: androidx.test.uiautomator.Tracer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <androidx.test.uiautomator.Tracer$Mode: androidx.test.uiautomator.Tracer$Mode NONE>;

        r0.<androidx.test.uiautomator.Tracer: androidx.test.uiautomator.Tracer$Mode mCurrentMode> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<androidx.test.uiautomator.Tracer: java.util.List mSinks> = $r2;

        return;
    }

    public static androidx.test.uiautomator.Tracer getInstance()
    {
        androidx.test.uiautomator.Tracer $r0, $r1, $r2;

        $r0 = <androidx.test.uiautomator.Tracer: androidx.test.uiautomator.Tracer mInstance>;

        if $r0 != null goto label1;

        $r2 = new androidx.test.uiautomator.Tracer;

        specialinvoke $r2.<androidx.test.uiautomator.Tracer: void <init>()>();

        <androidx.test.uiautomator.Tracer: androidx.test.uiautomator.Tracer mInstance> = $r2;

     label1:
        $r1 = <androidx.test.uiautomator.Tracer: androidx.test.uiautomator.Tracer mInstance>;

        return $r1;
    }

    public void setOutputMode(androidx.test.uiautomator.Tracer$Mode)
    {
        androidx.test.uiautomator.Tracer r0;
        androidx.test.uiautomator.Tracer$Mode r1;
        java.lang.Throwable r2, $r18;
        int[] $r3;
        int $i0, $i1;
        androidx.test.uiautomator.Tracer$LogcatSink $r4, $r11;
        java.util.List $r5, $r9, $r12, $r16;
        java.io.File $r6, $r8, $r13, $r15;
        androidx.test.uiautomator.Tracer$FileSink $r7, $r14;
        java.lang.IllegalArgumentException $r10, $r17;
        java.lang.StringBuilder $r19, $r20, $r22;
        java.lang.String $r21, $r23;

        r0 := @this: androidx.test.uiautomator.Tracer;

        r1 := @parameter0: androidx.test.uiautomator.Tracer$Mode;

        specialinvoke r0.<androidx.test.uiautomator.Tracer: void closeSinks()>();

        r0.<androidx.test.uiautomator.Tracer: androidx.test.uiautomator.Tracer$Mode mCurrentMode> = r1;

     label1:
        $r3 = <androidx.test.uiautomator.Tracer$1: int[] $SwitchMap$android$support$test$uiautomator$Tracer$Mode>;

        $i0 = virtualinvoke r1.<androidx.test.uiautomator.Tracer$Mode: int ordinal()>();

        $i1 = $r3[$i0];

        tableswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label4;
            case 3: goto label5;
            default: goto label7;
        };

     label2:
        $r13 = r0.<androidx.test.uiautomator.Tracer: java.io.File mOutputFile>;

        if $r13 != null goto label3;

        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Please provide a filename before attempting write trace to a file");

        throw $r17;

     label3:
        $r16 = r0.<androidx.test.uiautomator.Tracer: java.util.List mSinks>;

        $r14 = new androidx.test.uiautomator.Tracer$FileSink;

        $r15 = r0.<androidx.test.uiautomator.Tracer: java.io.File mOutputFile>;

        specialinvoke $r14.<androidx.test.uiautomator.Tracer$FileSink: void <init>(androidx.test.uiautomator.Tracer,java.io.File)>(r0, $r15);

        interfaceinvoke $r16.<java.util.List: boolean add(java.lang.Object)>($r14);

        goto label7;

     label4:
        $r12 = r0.<androidx.test.uiautomator.Tracer: java.util.List mSinks>;

        $r11 = new androidx.test.uiautomator.Tracer$LogcatSink;

        specialinvoke $r11.<androidx.test.uiautomator.Tracer$LogcatSink: void <init>(androidx.test.uiautomator.Tracer,androidx.test.uiautomator.Tracer$1)>(r0, null);

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r11);

        goto label7;

     label5:
        $r5 = r0.<androidx.test.uiautomator.Tracer: java.util.List mSinks>;

        $r4 = new androidx.test.uiautomator.Tracer$LogcatSink;

        specialinvoke $r4.<androidx.test.uiautomator.Tracer$LogcatSink: void <init>(androidx.test.uiautomator.Tracer,androidx.test.uiautomator.Tracer$1)>(r0, null);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r4);

        $r6 = r0.<androidx.test.uiautomator.Tracer: java.io.File mOutputFile>;

        if $r6 != null goto label6;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Please provide a filename before attempting write trace to a file");

        throw $r10;

     label6:
        $r9 = r0.<androidx.test.uiautomator.Tracer: java.util.List mSinks>;

        $r7 = new androidx.test.uiautomator.Tracer$FileSink;

        $r8 = r0.<androidx.test.uiautomator.Tracer: java.io.File mOutputFile>;

        specialinvoke $r7.<androidx.test.uiautomator.Tracer$FileSink: void <init>(androidx.test.uiautomator.Tracer,java.io.File)>(r0, $r8);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label7;

     label7:
        goto label9;

     label8:
        $r18 := @caughtexception;

        r2 = $r18;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not open log file: ");

        $r21 = virtualinvoke r2.<java.io.FileNotFoundException: java.lang.String getMessage()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Tracer", $r23);

     label9:
        return;

        catch java.io.FileNotFoundException from label1 to label7 with label8;
    }

    private void closeSinks()
    {
        androidx.test.uiautomator.Tracer r0;
        java.util.Iterator r1;
        androidx.test.uiautomator.Tracer$TracerSink r2;
        java.util.List $r3, $r4;
        boolean $z0;
        java.lang.Object $r5;

        r0 := @this: androidx.test.uiautomator.Tracer;

        $r3 = r0.<androidx.test.uiautomator.Tracer: java.util.List mSinks>;

        r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (androidx.test.uiautomator.Tracer$TracerSink) $r5;

        interfaceinvoke r2.<androidx.test.uiautomator.Tracer$TracerSink: void close()>();

        goto label1;

     label2:
        $r4 = r0.<androidx.test.uiautomator.Tracer: java.util.List mSinks>;

        interfaceinvoke $r4.<java.util.List: void clear()>();

        return;
    }

    public void setOutputFilename(java.lang.String)
    {
        androidx.test.uiautomator.Tracer r0;
        java.lang.String r1;
        java.io.File $r2;

        r0 := @this: androidx.test.uiautomator.Tracer;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(r1);

        r0.<androidx.test.uiautomator.Tracer: java.io.File mOutputFile> = $r2;

        return;
    }

    private void doTrace(java.lang.Object[])
    {
        androidx.test.uiautomator.Tracer r0;
        java.lang.Object[] r1, $r5;
        java.lang.String r2, $r6, $r7;
        androidx.test.uiautomator.Tracer$Mode $r3, $r4;

        r0 := @this: androidx.test.uiautomator.Tracer;

        r1 := @parameter0: java.lang.Object[];

        $r4 = r0.<androidx.test.uiautomator.Tracer: androidx.test.uiautomator.Tracer$Mode mCurrentMode>;

        $r3 = <androidx.test.uiautomator.Tracer$Mode: androidx.test.uiautomator.Tracer$Mode NONE>;

        if $r4 != $r3 goto label1;

        return;

     label1:
        r2 = staticinvoke <androidx.test.uiautomator.Tracer: java.lang.String getCaller()>();

        if r2 != null goto label2;

        return;

     label2:
        $r5 = newarray (java.lang.Object)[2];

        $r5[0] = r2;

        $r6 = staticinvoke <androidx.test.uiautomator.Tracer: java.lang.String join(java.lang.String,java.lang.Object[])>(", ", r1);

        $r5[1] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s (%s)", $r5);

        specialinvoke r0.<androidx.test.uiautomator.Tracer: void log(java.lang.String)>($r7);

        return;
    }

    private void log(java.lang.String)
    {
        androidx.test.uiautomator.Tracer r0;
        java.lang.String r1;
        java.util.Iterator r2;
        androidx.test.uiautomator.Tracer$TracerSink r3;
        java.util.List $r4;
        boolean $z0;
        java.lang.Object $r5;

        r0 := @this: androidx.test.uiautomator.Tracer;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<androidx.test.uiautomator.Tracer: java.util.List mSinks>;

        r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.test.uiautomator.Tracer$TracerSink) $r5;

        interfaceinvoke r3.<androidx.test.uiautomator.Tracer$TracerSink: void log(java.lang.String)>(r1);

        goto label1;

     label2:
        return;
    }

    public boolean isTracingEnabled()
    {
        androidx.test.uiautomator.Tracer r0;
        androidx.test.uiautomator.Tracer$Mode $r1, $r2;
        boolean $z0;

        r0 := @this: androidx.test.uiautomator.Tracer;

        $r2 = r0.<androidx.test.uiautomator.Tracer: androidx.test.uiautomator.Tracer$Mode mCurrentMode>;

        $r1 = <androidx.test.uiautomator.Tracer$Mode: androidx.test.uiautomator.Tracer$Mode NONE>;

        if $r2 == $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static transient void trace(java.lang.Object[])
    {
        java.lang.Object[] r0;
        androidx.test.uiautomator.Tracer $r1;

        r0 := @parameter0: java.lang.Object[];

        $r1 = staticinvoke <androidx.test.uiautomator.Tracer: androidx.test.uiautomator.Tracer getInstance()>();

        specialinvoke $r1.<androidx.test.uiautomator.Tracer: void doTrace(java.lang.Object[])>(r0);

        return;
    }

    private static java.lang.String join(java.lang.String, java.lang.Object[])
    {
        java.lang.String r0, $r5, $r6, $r9;
        java.lang.Object[] r1;
        java.lang.StringBuilder r2, $r3;
        int $i0, $i1, i2;
        java.lang.Object $r4, $r8;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object[];

        $i0 = lengthof r1;

        if $i0 != 0 goto label1;

        return "";

     label1:
        $r3 = new java.lang.StringBuilder;

        $r4 = r1[0];

        $r5 = staticinvoke <androidx.test.uiautomator.Tracer: java.lang.String objectToString(java.lang.Object)>($r4);

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>($r5);

        r2 = $r3;

        i2 = 1;

     label2:
        $i1 = lengthof r1;

        if i2 >= $i1 goto label3;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r8 = r1[i2];

        $r9 = staticinvoke <androidx.test.uiautomator.Tracer: java.lang.String objectToString(java.lang.Object)>($r8);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        i2 = i2 + 1;

        goto label2;

     label3:
        $r6 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    private static java.lang.String objectToString(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.Class $r1;
        boolean $z0, $z1;
        java.lang.String $r2, $r5;
        java.lang.Object[] $r3, $r4;

        r0 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label2;

        $z1 = r0 instanceof java.lang.Object[];

        if $z1 == 0 goto label1;

        $r3 = (java.lang.Object[]) r0;

        $r4 = (java.lang.Object[]) $r3;

        $r5 = staticinvoke <java.util.Arrays: java.lang.String deepToString(java.lang.Object[])>($r4);

        return $r5;

     label1:
        return "[...]";

     label2:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    private static java.lang.String getCaller()
    {
        java.lang.StackTraceElement[] r0;
        java.lang.StackTraceElement r1, r2;
        java.lang.String r3, $r5, $r6, $r7, $r8, $r10, $r11, $r12, $r14;
        java.lang.Thread $r4;
        int $i0, $i1, $i2, $i3, $i4, i5;
        boolean $z0;
        java.lang.Object[] $r9;
        java.lang.Integer $r13;

        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r0 = virtualinvoke $r4.<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>();

        $i0 = lengthof r0;

        if $i0 >= 7 goto label1;

        return "(unknown method)";

     label1:
        r1 = r0[5];

        r2 = r0[6];

        $r5 = virtualinvoke r2.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("androidx.test.uiautomator");

        if $z0 == 0 goto label2;

        return null;

     label2:
        $r6 = virtualinvoke r1.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        i5 = virtualinvoke $r6.<java.lang.String: int lastIndexOf(int)>(46);

        if i5 >= 0 goto label3;

        i5 = 0;

     label3:
        $i1 = i5 + 1;

        $r7 = virtualinvoke r1.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $i2 = virtualinvoke $r7.<java.lang.String: int length()>();

        if $i1 < $i2 goto label4;

        return "(unknown method)";

     label4:
        $r8 = virtualinvoke r1.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $i3 = i5 + 1;

        r3 = virtualinvoke $r8.<java.lang.String: java.lang.String substring(int)>($i3);

        $r9 = newarray (java.lang.Object)[5];

        $r9[0] = r3;

        $r10 = virtualinvoke r1.<java.lang.StackTraceElement: java.lang.String getMethodName()>();

        $r9[1] = $r10;

        $r11 = virtualinvoke r2.<java.lang.StackTraceElement: java.lang.String getMethodName()>();

        $r9[2] = $r11;

        $r12 = virtualinvoke r2.<java.lang.StackTraceElement: java.lang.String getFileName()>();

        $r9[3] = $r12;

        $i4 = virtualinvoke r2.<java.lang.StackTraceElement: int getLineNumber()>();

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r9[4] = $r13;

        $r14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s.%s from %s() at %s:%d", $r9);

        return $r14;
    }

    static void <clinit>()
    {
        <androidx.test.uiautomator.Tracer: androidx.test.uiautomator.Tracer mInstance> = null;

        return;
    }

androidx.test.uiautomator.Tracer$1
<androidx.test.uiautomator.Tracer$1: int[] $SwitchMap$android$support$test$uiautomator$Tracer$Mode>
    static void <clinit>()
    {
        androidx.test.uiautomator.Tracer$Mode[] $r0;
        int $i0, $i1, $i2, $i3;
        int[] $r1, $r3, $r5, $r7;
        androidx.test.uiautomator.Tracer$Mode $r2, $r4, $r6;
        java.lang.Throwable $r8, $r9, $r10, r11, r12, r13;

        $r0 = staticinvoke <androidx.test.uiautomator.Tracer$Mode: androidx.test.uiautomator.Tracer$Mode[] values()>();

        $i0 = lengthof $r0;

        $r1 = newarray (int)[$i0];

        <androidx.test.uiautomator.Tracer$1: int[] $SwitchMap$android$support$test$uiautomator$Tracer$Mode> = $r1;

     label01:
        $r3 = <androidx.test.uiautomator.Tracer$1: int[] $SwitchMap$android$support$test$uiautomator$Tracer$Mode>;

        $r2 = <androidx.test.uiautomator.Tracer$Mode: androidx.test.uiautomator.Tracer$Mode FILE>;

        $i1 = virtualinvoke $r2.<androidx.test.uiautomator.Tracer$Mode: int ordinal()>();

        $r3[$i1] = 1;

     label02:
        goto label04;

     label03:
        $r10 := @caughtexception;

        r11 = $r10;

     label04:
        $r5 = <androidx.test.uiautomator.Tracer$1: int[] $SwitchMap$android$support$test$uiautomator$Tracer$Mode>;

        $r4 = <androidx.test.uiautomator.Tracer$Mode: androidx.test.uiautomator.Tracer$Mode LOGCAT>;

        $i2 = virtualinvoke $r4.<androidx.test.uiautomator.Tracer$Mode: int ordinal()>();

        $r5[$i2] = 2;

     label05:
        goto label07;

     label06:
        $r9 := @caughtexception;

        r12 = $r9;

     label07:
        $r7 = <androidx.test.uiautomator.Tracer$1: int[] $SwitchMap$android$support$test$uiautomator$Tracer$Mode>;

        $r6 = <androidx.test.uiautomator.Tracer$Mode: androidx.test.uiautomator.Tracer$Mode ALL>;

        $i3 = virtualinvoke $r6.<androidx.test.uiautomator.Tracer$Mode: int ordinal()>();

        $r7[$i3] = 3;

     label08:
        goto label10;

     label09:
        $r8 := @caughtexception;

        r13 = $r8;

     label10:
        return;

        catch java.lang.NoSuchFieldError from label01 to label02 with label03;
        catch java.lang.NoSuchFieldError from label04 to label05 with label06;
        catch java.lang.NoSuchFieldError from label07 to label08 with label09;
    }

androidx.test.uiautomator.Tracer$FileSink
<androidx.test.uiautomator.Tracer$FileSink: java.io.PrintWriter mOut>
<androidx.test.uiautomator.Tracer$FileSink: java.text.SimpleDateFormat mDateFormat>
<androidx.test.uiautomator.Tracer$FileSink: androidx.test.uiautomator.Tracer this$0>
    public void <init>(androidx.test.uiautomator.Tracer, java.io.File) throws java.io.FileNotFoundException
    {
        androidx.test.uiautomator.Tracer$FileSink r0;
        androidx.test.uiautomator.Tracer r1;
        java.io.File r2;
        java.io.PrintWriter $r3;
        java.text.SimpleDateFormat $r4;
        java.util.Locale $r5;

        r0 := @this: androidx.test.uiautomator.Tracer$FileSink;

        r1 := @parameter0: androidx.test.uiautomator.Tracer;

        r2 := @parameter1: java.io.File;

        r0.<androidx.test.uiautomator.Tracer$FileSink: androidx.test.uiautomator.Tracer this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.io.PrintWriter;

        specialinvoke $r3.<java.io.PrintWriter: void <init>(java.io.File)>(r2);

        r0.<androidx.test.uiautomator.Tracer$FileSink: java.io.PrintWriter mOut> = $r3;

        $r4 = new java.text.SimpleDateFormat;

        $r5 = <java.util.Locale: java.util.Locale US>;

        specialinvoke $r4.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>("yyyy-MM-dd HH:mm:ss", $r5);

        r0.<androidx.test.uiautomator.Tracer$FileSink: java.text.SimpleDateFormat mDateFormat> = $r4;

        return;
    }

    public void log(java.lang.String)
    {
        androidx.test.uiautomator.Tracer$FileSink r0;
        java.lang.String r1, $r6;
        java.lang.Object[] $r2;
        java.util.Date $r3;
        java.io.PrintWriter $r4;
        java.text.SimpleDateFormat $r5;

        r0 := @this: androidx.test.uiautomator.Tracer$FileSink;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<androidx.test.uiautomator.Tracer$FileSink: java.io.PrintWriter mOut>;

        $r2 = newarray (java.lang.Object)[2];

        $r5 = r0.<androidx.test.uiautomator.Tracer$FileSink: java.text.SimpleDateFormat mDateFormat>;

        $r3 = new java.util.Date;

        specialinvoke $r3.<java.util.Date: void <init>()>();

        $r6 = virtualinvoke $r5.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r3);

        $r2[0] = $r6;

        $r2[1] = r1;

        virtualinvoke $r4.<java.io.PrintWriter: java.io.PrintWriter printf(java.lang.String,java.lang.Object[])>("%s %s\n", $r2);

        return;
    }

    public void close()
    {
        androidx.test.uiautomator.Tracer$FileSink r0;
        java.io.PrintWriter $r1;

        r0 := @this: androidx.test.uiautomator.Tracer$FileSink;

        $r1 = r0.<androidx.test.uiautomator.Tracer$FileSink: java.io.PrintWriter mOut>;

        virtualinvoke $r1.<java.io.PrintWriter: void close()>();

        return;
    }

androidx.test.uiautomator.Tracer$LogcatSink
<androidx.test.uiautomator.Tracer$LogcatSink: java.lang.String LOGCAT_TAG>
<androidx.test.uiautomator.Tracer$LogcatSink: androidx.test.uiautomator.Tracer this$0>
    private void <init>(androidx.test.uiautomator.Tracer)
    {
        androidx.test.uiautomator.Tracer$LogcatSink r0;
        androidx.test.uiautomator.Tracer r1;

        r0 := @this: androidx.test.uiautomator.Tracer$LogcatSink;

        r1 := @parameter0: androidx.test.uiautomator.Tracer;

        r0.<androidx.test.uiautomator.Tracer$LogcatSink: androidx.test.uiautomator.Tracer this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void log(java.lang.String)
    {
        androidx.test.uiautomator.Tracer$LogcatSink r0;
        java.lang.String r1;

        r0 := @this: androidx.test.uiautomator.Tracer$LogcatSink;

        r1 := @parameter0: java.lang.String;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("UiAutomatorTrace", r1);

        return;
    }

    public void close()
    {
        androidx.test.uiautomator.Tracer$LogcatSink r0;

        r0 := @this: androidx.test.uiautomator.Tracer$LogcatSink;

        return;
    }

    void <init>(androidx.test.uiautomator.Tracer, androidx.test.uiautomator.Tracer$1)
    {
        androidx.test.uiautomator.Tracer$LogcatSink r0;
        androidx.test.uiautomator.Tracer r1;
        androidx.test.uiautomator.Tracer$1 r2;

        r0 := @this: androidx.test.uiautomator.Tracer$LogcatSink;

        r1 := @parameter0: androidx.test.uiautomator.Tracer;

        r2 := @parameter1: androidx.test.uiautomator.Tracer$1;

        specialinvoke r0.<androidx.test.uiautomator.Tracer$LogcatSink: void <init>(androidx.test.uiautomator.Tracer)>(r1);

        return;
    }

androidx.test.uiautomator.Tracer$Mode
<androidx.test.uiautomator.Tracer$Mode: androidx.test.uiautomator.Tracer$Mode NONE>
<androidx.test.uiautomator.Tracer$Mode: androidx.test.uiautomator.Tracer$Mode FILE>
<androidx.test.uiautomator.Tracer$Mode: androidx.test.uiautomator.Tracer$Mode LOGCAT>
<androidx.test.uiautomator.Tracer$Mode: androidx.test.uiautomator.Tracer$Mode ALL>
<androidx.test.uiautomator.Tracer$Mode: androidx.test.uiautomator.Tracer$Mode[] $VALUES>
    public static androidx.test.uiautomator.Tracer$Mode[] values()
    {
        androidx.test.uiautomator.Tracer$Mode[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <androidx.test.uiautomator.Tracer$Mode: androidx.test.uiautomator.Tracer$Mode[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (androidx.test.uiautomator.Tracer$Mode[]) $r1;

        return $r2;
    }

    public static androidx.test.uiautomator.Tracer$Mode valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        androidx.test.uiautomator.Tracer$Mode $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroidx/test/uiautomator/Tracer$Mode;", r0);

        $r2 = (androidx.test.uiautomator.Tracer$Mode) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        androidx.test.uiautomator.Tracer$Mode r0;
        java.lang.String r1;
        int i0;

        r0 := @this: androidx.test.uiautomator.Tracer$Mode;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    static void <clinit>()
    {
        androidx.test.uiautomator.Tracer$Mode $r0, $r1, $r2, $r3, $r5, $r6, $r7, $r8;
        androidx.test.uiautomator.Tracer$Mode[] $r4;

        $r0 = new androidx.test.uiautomator.Tracer$Mode;

        specialinvoke $r0.<androidx.test.uiautomator.Tracer$Mode: void <init>(java.lang.String,int)>("NONE", 0);

        <androidx.test.uiautomator.Tracer$Mode: androidx.test.uiautomator.Tracer$Mode NONE> = $r0;

        $r1 = new androidx.test.uiautomator.Tracer$Mode;

        specialinvoke $r1.<androidx.test.uiautomator.Tracer$Mode: void <init>(java.lang.String,int)>("FILE", 1);

        <androidx.test.uiautomator.Tracer$Mode: androidx.test.uiautomator.Tracer$Mode FILE> = $r1;

        $r2 = new androidx.test.uiautomator.Tracer$Mode;

        specialinvoke $r2.<androidx.test.uiautomator.Tracer$Mode: void <init>(java.lang.String,int)>("LOGCAT", 2);

        <androidx.test.uiautomator.Tracer$Mode: androidx.test.uiautomator.Tracer$Mode LOGCAT> = $r2;

        $r3 = new androidx.test.uiautomator.Tracer$Mode;

        specialinvoke $r3.<androidx.test.uiautomator.Tracer$Mode: void <init>(java.lang.String,int)>("ALL", 3);

        <androidx.test.uiautomator.Tracer$Mode: androidx.test.uiautomator.Tracer$Mode ALL> = $r3;

        $r4 = newarray (androidx.test.uiautomator.Tracer$Mode)[4];

        $r5 = <androidx.test.uiautomator.Tracer$Mode: androidx.test.uiautomator.Tracer$Mode NONE>;

        $r4[0] = $r5;

        $r6 = <androidx.test.uiautomator.Tracer$Mode: androidx.test.uiautomator.Tracer$Mode FILE>;

        $r4[1] = $r6;

        $r7 = <androidx.test.uiautomator.Tracer$Mode: androidx.test.uiautomator.Tracer$Mode LOGCAT>;

        $r4[2] = $r7;

        $r8 = <androidx.test.uiautomator.Tracer$Mode: androidx.test.uiautomator.Tracer$Mode ALL>;

        $r4[3] = $r8;

        <androidx.test.uiautomator.Tracer$Mode: androidx.test.uiautomator.Tracer$Mode[] $VALUES> = $r4;

        return;
    }

androidx.test.uiautomator.Tracer$TracerSink
<androidx.test.uiautomator.Tracer$TracerSink: void log(java.lang.String)>
<androidx.test.uiautomator.Tracer$TracerSink: void close()>
