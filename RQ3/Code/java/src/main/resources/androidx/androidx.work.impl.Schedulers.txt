androidx.work.impl.Schedulers
<androidx.work.impl.Schedulers: java.lang.String GCM_SCHEDULER>
<androidx.work.impl.Schedulers: java.lang.String TAG>
    public static void schedule(androidx.work.Configuration, androidx.work.impl.WorkDatabase, java.util.List)
    {
        androidx.work.Configuration r0;
        androidx.work.impl.WorkDatabase r1;
        java.util.List r2, r4, r5;
        androidx.work.impl.model.WorkSpecDao r3;
        androidx.work.impl.model.WorkSpec r6;
        java.lang.Throwable r7, $r14;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.Object[] $r8, $r10;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object $r9, $r11, $r12;
        java.lang.String $r13;
        long l8;
        java.util.Iterator r15, r18, r22;
        androidx.work.impl.model.WorkSpec[] r16, r17, r20, r21;
        androidx.work.impl.Scheduler r19, r23;

        r0 := @parameter0: androidx.work.Configuration;

        r1 := @parameter1: androidx.work.impl.WorkDatabase;

        r2 := @parameter2: java.util.List;

        if r2 == null goto label01;

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i0 != 0 goto label02;

     label01:
        return;

     label02:
        r3 = virtualinvoke r1.<androidx.work.impl.WorkDatabase: androidx.work.impl.model.WorkSpecDao workSpecDao()>();

        virtualinvoke r1.<androidx.work.impl.WorkDatabase: void beginTransaction()>();

     label03:
        $i1 = virtualinvoke r0.<androidx.work.Configuration: int getMaxSchedulerLimit()>();

        r4 = interfaceinvoke r3.<androidx.work.impl.model.WorkSpecDao: java.util.List getEligibleWorkForScheduling(int)>($i1);

        r5 = interfaceinvoke r3.<androidx.work.impl.model.WorkSpecDao: java.util.List getAllEligibleWorkSpecsForScheduling(int)>(200);

        if r4 == null goto label05;

        $i6 = interfaceinvoke r4.<java.util.List: int size()>();

        if $i6 <= 0 goto label05;

        l8 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r15 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z4 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label05;

        $r12 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        r6 = (androidx.work.impl.model.WorkSpec) $r12;

        $r13 = r6.<androidx.work.impl.model.WorkSpec: java.lang.String id>;

        interfaceinvoke r3.<androidx.work.impl.model.WorkSpecDao: int markWorkSpecScheduled(java.lang.String,long)>($r13, l8);

        goto label04;

     label05:
        virtualinvoke r1.<androidx.work.impl.WorkDatabase: void setTransactionSuccessful()>();

     label06:
        virtualinvoke r1.<androidx.work.impl.WorkDatabase: void endTransaction()>();

        goto label09;

     label07:
        $r14 := @caughtexception;

        r7 = $r14;

     label08:
        virtualinvoke r1.<androidx.work.impl.WorkDatabase: void endTransaction()>();

        throw r7;

     label09:
        if r4 == null goto label12;

        $i4 = interfaceinvoke r4.<java.util.List: int size()>();

        if $i4 <= 0 goto label12;

        $i5 = interfaceinvoke r4.<java.util.List: int size()>();

        r16 = newarray (androidx.work.impl.model.WorkSpec)[$i5];

        $r10 = interfaceinvoke r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r16);

        r17 = (androidx.work.impl.model.WorkSpec[]) $r10;

        r18 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z2 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label12;

        $r11 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>();

        r19 = (androidx.work.impl.Scheduler) $r11;

        $z3 = interfaceinvoke r19.<androidx.work.impl.Scheduler: boolean hasLimitedSchedulingSlots()>();

        if $z3 == 0 goto label11;

        interfaceinvoke r19.<androidx.work.impl.Scheduler: void schedule(androidx.work.impl.model.WorkSpec[])>(r17);

     label11:
        goto label10;

     label12:
        if r5 == null goto label15;

        $i2 = interfaceinvoke r5.<java.util.List: int size()>();

        if $i2 <= 0 goto label15;

        $i3 = interfaceinvoke r5.<java.util.List: int size()>();

        r20 = newarray (androidx.work.impl.model.WorkSpec)[$i3];

        $r8 = interfaceinvoke r5.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r20);

        r21 = (androidx.work.impl.model.WorkSpec[]) $r8;

        r22 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label13:
        $z0 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label15;

        $r9 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>();

        r23 = (androidx.work.impl.Scheduler) $r9;

        $z1 = interfaceinvoke r23.<androidx.work.impl.Scheduler: boolean hasLimitedSchedulingSlots()>();

        if $z1 != 0 goto label14;

        interfaceinvoke r23.<androidx.work.impl.Scheduler: void schedule(androidx.work.impl.model.WorkSpec[])>(r21);

     label14:
        goto label13;

     label15:
        return;

        catch java.lang.Throwable from label03 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    static androidx.work.impl.Scheduler createBestAvailableBackgroundScheduler(android.content.Context, androidx.work.impl.WorkManagerImpl)
    {
        android.content.Context r0;
        androidx.work.impl.WorkManagerImpl r1;
        int $i0;
        androidx.work.impl.background.systemalarm.SystemAlarmScheduler $r2;
        androidx.work.Logger $r3, $r6;
        java.lang.String $r4, $r7;
        androidx.work.impl.background.systemjob.SystemJobScheduler $r5;
        androidx.work.impl.Scheduler r8;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: androidx.work.impl.WorkManagerImpl;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 23 goto label1;

        $r5 = new androidx.work.impl.background.systemjob.SystemJobScheduler;

        specialinvoke $r5.<androidx.work.impl.background.systemjob.SystemJobScheduler: void <init>(android.content.Context,androidx.work.impl.WorkManagerImpl)>(r0, r1);

        r8 = $r5;

        staticinvoke <androidx.work.impl.utils.PackageManagerHelper: void setComponentEnabled(android.content.Context,java.lang.Class,boolean)>(r0, class "Landroidx/work/impl/background/systemjob/SystemJobService;", 1);

        $r6 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r7 = <androidx.work.impl.Schedulers: java.lang.String TAG>;

        virtualinvoke $r6.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r7, "Created SystemJobScheduler and enabled SystemJobService");

        goto label2;

     label1:
        r8 = staticinvoke <androidx.work.impl.Schedulers: androidx.work.impl.Scheduler tryCreateGcmBasedScheduler(android.content.Context)>(r0);

        if r8 != null goto label2;

        $r2 = new androidx.work.impl.background.systemalarm.SystemAlarmScheduler;

        specialinvoke $r2.<androidx.work.impl.background.systemalarm.SystemAlarmScheduler: void <init>(android.content.Context)>(r0);

        r8 = $r2;

        staticinvoke <androidx.work.impl.utils.PackageManagerHelper: void setComponentEnabled(android.content.Context,java.lang.Class,boolean)>(r0, class "Landroidx/work/impl/background/systemalarm/SystemAlarmService;", 1);

        $r3 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r4 = <androidx.work.impl.Schedulers: java.lang.String TAG>;

        virtualinvoke $r3.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r4, "Created SystemAlarmScheduler");

     label2:
        return r8;
    }

    private static androidx.work.impl.Scheduler tryCreateGcmBasedScheduler(android.content.Context)
    {
        android.content.Context r0;
        androidx.work.impl.Scheduler r1;
        java.lang.Class[] $r2;
        java.lang.reflect.Constructor $r3;
        java.lang.Object[] $r4;
        java.lang.Object $r5;
        androidx.work.Logger $r6, $r9;
        java.lang.String $r7, $r10;
        java.lang.Throwable $r8, r12;
        java.lang.Class r11;

        r0 := @parameter0: android.content.Context;

     label1:
        r11 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("androidx.work.impl.background.gcm.GcmScheduler");

        $r2 = newarray (java.lang.Class)[1];

        $r2[0] = class "Landroid/content/Context;";

        $r3 = virtualinvoke r11.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r2);

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r0;

        $r5 = virtualinvoke $r3.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r4);

        r1 = (androidx.work.impl.Scheduler) $r5;

        $r6 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r7 = <androidx.work.impl.Schedulers: java.lang.String TAG>;

        virtualinvoke $r6.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r7, "Created androidx.work.impl.background.gcm.GcmScheduler");

     label2:
        return r1;

     label3:
        $r8 := @caughtexception;

        r12 = $r8;

        $r9 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r10 = <androidx.work.impl.Schedulers: java.lang.String TAG>;

        virtualinvoke $r9.<androidx.work.Logger: void debug(java.lang.String,java.lang.String,java.lang.Throwable)>($r10, "Unable to create GCM Scheduler", r12);

        return null;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void <init>()
    {
        androidx.work.impl.Schedulers r0;

        r0 := @this: androidx.work.impl.Schedulers;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <androidx.work.Logger: java.lang.String tagWithPrefix(java.lang.String)>("Schedulers");

        <androidx.work.impl.Schedulers: java.lang.String TAG> = $r0;

        return;
    }

