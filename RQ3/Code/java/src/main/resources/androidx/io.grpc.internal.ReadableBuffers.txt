io.grpc.internal.ReadableBuffers
<io.grpc.internal.ReadableBuffers: io.grpc.internal.ReadableBuffer EMPTY_BUFFER>
    static void <clinit>()
    {
        io.grpc.internal.ReadableBuffers$ByteArrayWrapper $r0;
        byte[] $r1;

        $r0 = new io.grpc.internal.ReadableBuffers$ByteArrayWrapper;

        $r1 = newarray (byte)[0];

        specialinvoke $r0.<io.grpc.internal.ReadableBuffers$ByteArrayWrapper: void <init>(byte[])>($r1);

        <io.grpc.internal.ReadableBuffers: io.grpc.internal.ReadableBuffer EMPTY_BUFFER> = $r0;

        return;
    }

    public static io.grpc.internal.ReadableBuffer empty()
    {
        io.grpc.internal.ReadableBuffer r0;

        r0 = <io.grpc.internal.ReadableBuffers: io.grpc.internal.ReadableBuffer EMPTY_BUFFER>;

        return r0;
    }

    public static io.grpc.internal.ReadableBuffer ignoreClose(io.grpc.internal.ReadableBuffer)
    {
        io.grpc.internal.ReadableBuffer $r0;
        io.grpc.internal.ReadableBuffers$1 $r1;

        $r0 := @parameter0: io.grpc.internal.ReadableBuffer;

        $r1 = new io.grpc.internal.ReadableBuffers$1;

        specialinvoke $r1.<io.grpc.internal.ReadableBuffers$1: void <init>(io.grpc.internal.ReadableBuffer)>($r0);

        return $r1;
    }

    public static java.io.InputStream openStream(io.grpc.internal.ReadableBuffer, boolean)
    {
        boolean $z0;
        io.grpc.internal.ReadableBuffers$BufferInputStream $r0;
        io.grpc.internal.ReadableBuffer $r1;

        $r1 := @parameter0: io.grpc.internal.ReadableBuffer;

        $z0 := @parameter1: boolean;

        $r0 = new io.grpc.internal.ReadableBuffers$BufferInputStream;

        if $z0 != 0 goto label1;

        $r1 = staticinvoke <io.grpc.internal.ReadableBuffers: io.grpc.internal.ReadableBuffer ignoreClose(io.grpc.internal.ReadableBuffer)>($r1);

     label1:
        specialinvoke $r0.<io.grpc.internal.ReadableBuffers$BufferInputStream: void <init>(io.grpc.internal.ReadableBuffer)>($r1);

        return $r0;
    }

    public static byte[] readArray(io.grpc.internal.ReadableBuffer)
    {
        io.grpc.internal.ReadableBuffer $r0;
        byte[] $r1;
        int $i0;

        $r0 := @parameter0: io.grpc.internal.ReadableBuffer;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r0, "buffer");

        $i0 = interfaceinvoke $r0.<io.grpc.internal.ReadableBuffer: int readableBytes()>();

        $r1 = newarray (byte)[$i0];

        interfaceinvoke $r0.<io.grpc.internal.ReadableBuffer: void readBytes(byte[],int,int)>($r1, 0, $i0);

        return $r1;
    }

    public static java.lang.String readAsString(io.grpc.internal.ReadableBuffer, java.nio.charset.Charset)
    {
        java.nio.charset.Charset $r0;
        byte[] $r1;
        io.grpc.internal.ReadableBuffer $r2;
        java.lang.String $r3;

        $r2 := @parameter0: io.grpc.internal.ReadableBuffer;

        $r0 := @parameter1: java.nio.charset.Charset;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r0, "charset");

        $r1 = staticinvoke <io.grpc.internal.ReadableBuffers: byte[] readArray(io.grpc.internal.ReadableBuffer)>($r2);

        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>($r1, $r0);

        return $r3;
    }

    public static io.grpc.internal.ReadableBuffer wrap(byte[], int, int)
    {
        byte[] $r0;
        int $i0, $i1;
        io.grpc.internal.ReadableBuffers$ByteArrayWrapper $r1;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 = new io.grpc.internal.ReadableBuffers$ByteArrayWrapper;

        specialinvoke $r1.<io.grpc.internal.ReadableBuffers$ByteArrayWrapper: void <init>(byte[],int,int)>($r0, $i0, $i1);

        return $r1;
    }

io.grpc.internal.ReadableBuffers$1
    void <init>(io.grpc.internal.ReadableBuffer)
    {
        io.grpc.internal.ReadableBuffers$1 $r0;
        io.grpc.internal.ReadableBuffer $r1;

        $r0 := @this: io.grpc.internal.ReadableBuffers$1;

        $r1 := @parameter0: io.grpc.internal.ReadableBuffer;

        specialinvoke $r0.<io.grpc.internal.ForwardingReadableBuffer: void <init>(io.grpc.internal.ReadableBuffer)>($r1);

        return;
    }

    public void close()
    {
        io.grpc.internal.ReadableBuffers$1 $r0;

        $r0 := @this: io.grpc.internal.ReadableBuffers$1;

        return;
    }

io.grpc.internal.ReadableBuffers$BufferInputStream
<io.grpc.internal.ReadableBuffers$BufferInputStream: io.grpc.internal.ReadableBuffer buffer>
    public void <init>(io.grpc.internal.ReadableBuffer)
    {
        io.grpc.internal.ReadableBuffers$BufferInputStream $r0;
        java.lang.Object $r1;
        io.grpc.internal.ReadableBuffer $r2;

        $r0 := @this: io.grpc.internal.ReadableBuffers$BufferInputStream;

        $r2 := @parameter0: io.grpc.internal.ReadableBuffer;

        specialinvoke $r0.<java.io.InputStream: void <init>()>();

        $r1 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r2, "buffer");

        $r2 = (io.grpc.internal.ReadableBuffer) $r1;

        $r0.<io.grpc.internal.ReadableBuffers$BufferInputStream: io.grpc.internal.ReadableBuffer buffer> = $r2;

        return;
    }

    public int available() throws java.io.IOException
    {
        io.grpc.internal.ReadableBuffers$BufferInputStream $r0;
        int $i0;
        io.grpc.internal.ReadableBuffer $r1;

        $r0 := @this: io.grpc.internal.ReadableBuffers$BufferInputStream;

        $r1 = $r0.<io.grpc.internal.ReadableBuffers$BufferInputStream: io.grpc.internal.ReadableBuffer buffer>;

        $i0 = interfaceinvoke $r1.<io.grpc.internal.ReadableBuffer: int readableBytes()>();

        return $i0;
    }

    public void close() throws java.io.IOException
    {
        io.grpc.internal.ReadableBuffers$BufferInputStream $r0;
        io.grpc.internal.ReadableBuffer $r1;

        $r0 := @this: io.grpc.internal.ReadableBuffers$BufferInputStream;

        $r1 = $r0.<io.grpc.internal.ReadableBuffers$BufferInputStream: io.grpc.internal.ReadableBuffer buffer>;

        interfaceinvoke $r1.<io.grpc.internal.ReadableBuffer: void close()>();

        return;
    }

    public void mark(int)
    {
        io.grpc.internal.ReadableBuffers$BufferInputStream $r0;
        int $i0;
        io.grpc.internal.ReadableBuffer $r1;

        $r0 := @this: io.grpc.internal.ReadableBuffers$BufferInputStream;

        $i0 := @parameter0: int;

        $r1 = $r0.<io.grpc.internal.ReadableBuffers$BufferInputStream: io.grpc.internal.ReadableBuffer buffer>;

        interfaceinvoke $r1.<io.grpc.internal.ReadableBuffer: void mark()>();

        return;
    }

    public boolean markSupported()
    {
        io.grpc.internal.ReadableBuffers$BufferInputStream $r0;
        boolean $z0;
        io.grpc.internal.ReadableBuffer $r1;

        $r0 := @this: io.grpc.internal.ReadableBuffers$BufferInputStream;

        $r1 = $r0.<io.grpc.internal.ReadableBuffers$BufferInputStream: io.grpc.internal.ReadableBuffer buffer>;

        $z0 = interfaceinvoke $r1.<io.grpc.internal.ReadableBuffer: boolean markSupported()>();

        return $z0;
    }

    public int read()
    {
        io.grpc.internal.ReadableBuffers$BufferInputStream $r0;
        io.grpc.internal.ReadableBuffer $r1;
        int $i0;

        $r0 := @this: io.grpc.internal.ReadableBuffers$BufferInputStream;

        $r1 = $r0.<io.grpc.internal.ReadableBuffers$BufferInputStream: io.grpc.internal.ReadableBuffer buffer>;

        $i0 = interfaceinvoke $r1.<io.grpc.internal.ReadableBuffer: int readableBytes()>();

        if $i0 != 0 goto label1;

        return -1;

     label1:
        $r1 = $r0.<io.grpc.internal.ReadableBuffers$BufferInputStream: io.grpc.internal.ReadableBuffer buffer>;

        $i0 = interfaceinvoke $r1.<io.grpc.internal.ReadableBuffer: int readUnsignedByte()>();

        return $i0;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        io.grpc.internal.ReadableBuffers$BufferInputStream $r0;
        int $i0, $i1, $i2;
        byte[] $r1;
        io.grpc.internal.ReadableBuffer $r2;

        $r0 := @this: io.grpc.internal.ReadableBuffers$BufferInputStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = $r0.<io.grpc.internal.ReadableBuffers$BufferInputStream: io.grpc.internal.ReadableBuffer buffer>;

        $i2 = interfaceinvoke $r2.<io.grpc.internal.ReadableBuffer: int readableBytes()>();

        if $i2 != 0 goto label1;

        return -1;

     label1:
        $r2 = $r0.<io.grpc.internal.ReadableBuffers$BufferInputStream: io.grpc.internal.ReadableBuffer buffer>;

        $i2 = interfaceinvoke $r2.<io.grpc.internal.ReadableBuffer: int readableBytes()>();

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i1);

        $r2 = $r0.<io.grpc.internal.ReadableBuffers$BufferInputStream: io.grpc.internal.ReadableBuffer buffer>;

        interfaceinvoke $r2.<io.grpc.internal.ReadableBuffer: void readBytes(byte[],int,int)>($r1, $i0, $i1);

        return $i1;
    }

    public void reset() throws java.io.IOException
    {
        io.grpc.internal.ReadableBuffers$BufferInputStream $r0;
        io.grpc.internal.ReadableBuffer $r1;

        $r0 := @this: io.grpc.internal.ReadableBuffers$BufferInputStream;

        $r1 = $r0.<io.grpc.internal.ReadableBuffers$BufferInputStream: io.grpc.internal.ReadableBuffer buffer>;

        interfaceinvoke $r1.<io.grpc.internal.ReadableBuffer: void reset()>();

        return;
    }

    public long skip(long) throws java.io.IOException
    {
        io.grpc.internal.ReadableBuffers$BufferInputStream $r0;
        int $i0;
        long $l1, $l2;
        io.grpc.internal.ReadableBuffer $r1;

        $r0 := @this: io.grpc.internal.ReadableBuffers$BufferInputStream;

        $l1 := @parameter0: long;

        $r1 = $r0.<io.grpc.internal.ReadableBuffers$BufferInputStream: io.grpc.internal.ReadableBuffer buffer>;

        $i0 = interfaceinvoke $r1.<io.grpc.internal.ReadableBuffer: int readableBytes()>();

        $l2 = (long) $i0;

        $l1 = staticinvoke <java.lang.Math: long min(long,long)>($l2, $l1);

        $i0 = (int) $l1;

        $r1 = $r0.<io.grpc.internal.ReadableBuffers$BufferInputStream: io.grpc.internal.ReadableBuffer buffer>;

        interfaceinvoke $r1.<io.grpc.internal.ReadableBuffer: void skipBytes(int)>($i0);

        $l1 = (long) $i0;

        return $l1;
    }

io.grpc.internal.ReadableBuffers$ByteArrayWrapper
<io.grpc.internal.ReadableBuffers$ByteArrayWrapper: byte[] bytes>
<io.grpc.internal.ReadableBuffers$ByteArrayWrapper: int end>
<io.grpc.internal.ReadableBuffers$ByteArrayWrapper: int mark>
<io.grpc.internal.ReadableBuffers$ByteArrayWrapper: int offset>
    void <init>(byte[])
    {
        io.grpc.internal.ReadableBuffers$ByteArrayWrapper $r0;
        byte[] $r1;
        int $i0;

        $r0 := @this: io.grpc.internal.ReadableBuffers$ByteArrayWrapper;

        $r1 := @parameter0: byte[];

        $i0 = lengthof $r1;

        specialinvoke $r0.<io.grpc.internal.ReadableBuffers$ByteArrayWrapper: void <init>(byte[],int,int)>($r1, 0, $i0);

        return;
    }

    void <init>(byte[], int, int)
    {
        io.grpc.internal.ReadableBuffers$ByteArrayWrapper $r0;
        int $i0, $i1, $i2;
        java.lang.Object $r1;
        byte[] $r2;
        boolean $z0, $z1;

        $r0 := @this: io.grpc.internal.ReadableBuffers$ByteArrayWrapper;

        $r2 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        specialinvoke $r0.<io.grpc.internal.AbstractReadableBuffer: void <init>()>();

        $r0.<io.grpc.internal.ReadableBuffers$ByteArrayWrapper: int mark> = -1;

        $z0 = 1;

        if $i0 < 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "offset must be >= 0");

        if $i1 < 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "length must be >= 0");

        $i1 = $i1 + $i0;

        $i2 = lengthof $r2;

        if $i1 > $i2 goto label5;

        goto label6;

     label5:
        $z0 = 0;

     label6:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "offset + length exceeds array boundary");

        $r1 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r2, "bytes");

        $r2 = (byte[]) $r1;

        $r0.<io.grpc.internal.ReadableBuffers$ByteArrayWrapper: byte[] bytes> = $r2;

        $r0.<io.grpc.internal.ReadableBuffers$ByteArrayWrapper: int offset> = $i0;

        $r0.<io.grpc.internal.ReadableBuffers$ByteArrayWrapper: int end> = $i1;

        return;
    }

    public void mark()
    {
        io.grpc.internal.ReadableBuffers$ByteArrayWrapper $r0;
        int $i0;

        $r0 := @this: io.grpc.internal.ReadableBuffers$ByteArrayWrapper;

        $i0 = $r0.<io.grpc.internal.ReadableBuffers$ByteArrayWrapper: int offset>;

        $r0.<io.grpc.internal.ReadableBuffers$ByteArrayWrapper: int mark> = $i0;

        return;
    }

    public boolean markSupported()
    {
        io.grpc.internal.ReadableBuffers$ByteArrayWrapper $r0;

        $r0 := @this: io.grpc.internal.ReadableBuffers$ByteArrayWrapper;

        return 1;
    }

    public volatile io.grpc.internal.ReadableBuffer readBytes(int)
    {
        io.grpc.internal.ReadableBuffers$ByteArrayWrapper $r0;
        int $i0;

        $r0 := @this: io.grpc.internal.ReadableBuffers$ByteArrayWrapper;

        $i0 := @parameter0: int;

        $r0 = virtualinvoke $r0.<io.grpc.internal.ReadableBuffers$ByteArrayWrapper: io.grpc.internal.ReadableBuffers$ByteArrayWrapper readBytes(int)>($i0);

        return $r0;
    }

    public io.grpc.internal.ReadableBuffers$ByteArrayWrapper readBytes(int)
    {
        io.grpc.internal.ReadableBuffers$ByteArrayWrapper $r0, $r2;
        int $i0, $i1, $i2;
        byte[] $r1;

        $r0 := @this: io.grpc.internal.ReadableBuffers$ByteArrayWrapper;

        $i0 := @parameter0: int;

        virtualinvoke $r0.<io.grpc.internal.ReadableBuffers$ByteArrayWrapper: void checkReadable(int)>($i0);

        $i1 = $r0.<io.grpc.internal.ReadableBuffers$ByteArrayWrapper: int offset>;

        $i2 = $i1 + $i0;

        $r0.<io.grpc.internal.ReadableBuffers$ByteArrayWrapper: int offset> = $i2;

        $r2 = new io.grpc.internal.ReadableBuffers$ByteArrayWrapper;

        $r1 = $r0.<io.grpc.internal.ReadableBuffers$ByteArrayWrapper: byte[] bytes>;

        specialinvoke $r2.<io.grpc.internal.ReadableBuffers$ByteArrayWrapper: void <init>(byte[],int,int)>($r1, $i1, $i0);

        return $r2;
    }

    public void readBytes(java.io.OutputStream, int) throws java.io.IOException
    {
        io.grpc.internal.ReadableBuffers$ByteArrayWrapper $r0;
        int $i0, $i1;
        byte[] $r1;
        java.io.OutputStream $r2;

        $r0 := @this: io.grpc.internal.ReadableBuffers$ByteArrayWrapper;

        $r2 := @parameter0: java.io.OutputStream;

        $i0 := @parameter1: int;

        virtualinvoke $r0.<io.grpc.internal.ReadableBuffers$ByteArrayWrapper: void checkReadable(int)>($i0);

        $r1 = $r0.<io.grpc.internal.ReadableBuffers$ByteArrayWrapper: byte[] bytes>;

        $i1 = $r0.<io.grpc.internal.ReadableBuffers$ByteArrayWrapper: int offset>;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>($r1, $i1, $i0);

        $i1 = $r0.<io.grpc.internal.ReadableBuffers$ByteArrayWrapper: int offset>;

        $i0 = $i1 + $i0;

        $r0.<io.grpc.internal.ReadableBuffers$ByteArrayWrapper: int offset> = $i0;

        return;
    }

    public void readBytes(java.nio.ByteBuffer)
    {
        io.grpc.internal.ReadableBuffers$ByteArrayWrapper $r0;
        byte[] $r1;
        int $i0, $i1;
        java.nio.ByteBuffer $r2;

        $r0 := @this: io.grpc.internal.ReadableBuffers$ByteArrayWrapper;

        $r2 := @parameter0: java.nio.ByteBuffer;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r2, "dest");

        $i1 = virtualinvoke $r2.<java.nio.ByteBuffer: int remaining()>();

        virtualinvoke $r0.<io.grpc.internal.ReadableBuffers$ByteArrayWrapper: void checkReadable(int)>($i1);

        $r1 = $r0.<io.grpc.internal.ReadableBuffers$ByteArrayWrapper: byte[] bytes>;

        $i0 = $r0.<io.grpc.internal.ReadableBuffers$ByteArrayWrapper: int offset>;

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>($r1, $i0, $i1);

        $i0 = $r0.<io.grpc.internal.ReadableBuffers$ByteArrayWrapper: int offset>;

        $i1 = $i0 + $i1;

        $r0.<io.grpc.internal.ReadableBuffers$ByteArrayWrapper: int offset> = $i1;

        return;
    }

    public void readBytes(byte[], int, int)
    {
        io.grpc.internal.ReadableBuffers$ByteArrayWrapper $r0;
        int $i0, $i1, $i2;
        byte[] $r1, $r2;

        $r0 := @this: io.grpc.internal.ReadableBuffers$ByteArrayWrapper;

        $r2 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 = $r0.<io.grpc.internal.ReadableBuffers$ByteArrayWrapper: byte[] bytes>;

        $i2 = $r0.<io.grpc.internal.ReadableBuffers$ByteArrayWrapper: int offset>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i2, $r2, $i0, $i1);

        $i0 = $r0.<io.grpc.internal.ReadableBuffers$ByteArrayWrapper: int offset>;

        $i0 = $i0 + $i1;

        $r0.<io.grpc.internal.ReadableBuffers$ByteArrayWrapper: int offset> = $i0;

        return;
    }

    public int readUnsignedByte()
    {
        io.grpc.internal.ReadableBuffers$ByteArrayWrapper $r0;
        int $i0, $i1;
        byte[] $r1;
        byte $b2;
        short $s3;

        $r0 := @this: io.grpc.internal.ReadableBuffers$ByteArrayWrapper;

        virtualinvoke $r0.<io.grpc.internal.ReadableBuffers$ByteArrayWrapper: void checkReadable(int)>(1);

        $r1 = $r0.<io.grpc.internal.ReadableBuffers$ByteArrayWrapper: byte[] bytes>;

        $i0 = $r0.<io.grpc.internal.ReadableBuffers$ByteArrayWrapper: int offset>;

        $i1 = $i0 + 1;

        $r0.<io.grpc.internal.ReadableBuffers$ByteArrayWrapper: int offset> = $i1;

        $b2 = $r1[$i0];

        $s3 = $b2 & 255;

        return $s3;
    }

    public int readableBytes()
    {
        io.grpc.internal.ReadableBuffers$ByteArrayWrapper $r0;
        int $i0, $i1;

        $r0 := @this: io.grpc.internal.ReadableBuffers$ByteArrayWrapper;

        $i1 = $r0.<io.grpc.internal.ReadableBuffers$ByteArrayWrapper: int end>;

        $i0 = $r0.<io.grpc.internal.ReadableBuffers$ByteArrayWrapper: int offset>;

        $i0 = $i1 - $i0;

        return $i0;
    }

    public void reset()
    {
        io.grpc.internal.ReadableBuffers$ByteArrayWrapper $r0;
        int $i0;
        java.nio.InvalidMarkException $r1;

        $r0 := @this: io.grpc.internal.ReadableBuffers$ByteArrayWrapper;

        $i0 = $r0.<io.grpc.internal.ReadableBuffers$ByteArrayWrapper: int mark>;

        if $i0 == -1 goto label1;

        $r0.<io.grpc.internal.ReadableBuffers$ByteArrayWrapper: int offset> = $i0;

        return;

     label1:
        $r1 = new java.nio.InvalidMarkException;

        specialinvoke $r1.<java.nio.InvalidMarkException: void <init>()>();

        throw $r1;
    }

    public void skipBytes(int)
    {
        io.grpc.internal.ReadableBuffers$ByteArrayWrapper $r0;
        int $i0, $i1;

        $r0 := @this: io.grpc.internal.ReadableBuffers$ByteArrayWrapper;

        $i0 := @parameter0: int;

        virtualinvoke $r0.<io.grpc.internal.ReadableBuffers$ByteArrayWrapper: void checkReadable(int)>($i0);

        $i1 = $r0.<io.grpc.internal.ReadableBuffers$ByteArrayWrapper: int offset>;

        $i0 = $i1 + $i0;

        $r0.<io.grpc.internal.ReadableBuffers$ByteArrayWrapper: int offset> = $i0;

        return;
    }

