androidx.car.app.activity.renderer.surface.TemplateSurfaceView
<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: boolean SUPPORTS_SURFACE_CONTROL>
<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: androidx.car.app.activity.renderer.surface.OnCreateInputConnectionListener mOnCreateInputConnectionListener>
<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: androidx.car.app.activity.renderer.surface.ISurfaceControl mSurfaceControl>
<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: android.view.SurfaceControlViewHost$SurfacePackage mSurfacePackage>
<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: boolean mIsInInputMode>
<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: androidx.car.app.activity.ServiceDispatcher mServiceDispatcher>
<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: androidx.car.app.activity.CarAppViewModel mViewModel>
<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: android.view.inputmethod.InputMethodManager mInputMethodManager>
<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: androidx.car.app.activity.renderer.surface.SurfaceWrapperProvider mSurfaceWrapperProvider>
<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: android.view.ViewTreeObserver$OnTouchModeChangeListener mOnTouchModeChangeListener>
    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        androidx.car.app.activity.renderer.surface.TemplateSurfaceView r0;
        android.content.Context r1, $r3;
        android.util.AttributeSet r2;
        java.lang.Object $r4;
        android.view.inputmethod.InputMethodManager $r5;
        androidx.car.app.activity.renderer.surface.SurfaceWrapperProvider $r6;
        androidx.car.app.activity.renderer.surface.TemplateSurfaceView$1 $r7;

        r0 := @this: androidx.car.app.activity.renderer.surface.TemplateSurfaceView;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<android.view.SurfaceView: void <init>(android.content.Context,android.util.AttributeSet,int)>(r1, r2, 0);

        $r3 = virtualinvoke r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: android.content.Context getContext()>();

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("input_method");

        $r5 = (android.view.inputmethod.InputMethodManager) $r4;

        r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: android.view.inputmethod.InputMethodManager mInputMethodManager> = $r5;

        $r6 = new androidx.car.app.activity.renderer.surface.SurfaceWrapperProvider;

        specialinvoke $r6.<androidx.car.app.activity.renderer.surface.SurfaceWrapperProvider: void <init>(androidx.car.app.activity.renderer.surface.TemplateSurfaceView)>(r0);

        r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: androidx.car.app.activity.renderer.surface.SurfaceWrapperProvider mSurfaceWrapperProvider> = $r6;

        $r7 = new androidx.car.app.activity.renderer.surface.TemplateSurfaceView$1;

        specialinvoke $r7.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView$1: void <init>(androidx.car.app.activity.renderer.surface.TemplateSurfaceView)>(r0);

        r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: android.view.ViewTreeObserver$OnTouchModeChangeListener mOnTouchModeChangeListener> = $r7;

        return;
    }

    public void setServiceDispatcher(androidx.car.app.activity.ServiceDispatcher)
    {
        androidx.car.app.activity.renderer.surface.TemplateSurfaceView r0;
        androidx.car.app.activity.ServiceDispatcher r1;

        r0 := @this: androidx.car.app.activity.renderer.surface.TemplateSurfaceView;

        r1 := @parameter0: androidx.car.app.activity.ServiceDispatcher;

        r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: androidx.car.app.activity.ServiceDispatcher mServiceDispatcher> = r1;

        return;
    }

    public void setViewModel(androidx.car.app.activity.CarAppViewModel)
    {
        androidx.car.app.activity.renderer.surface.TemplateSurfaceView r0;
        androidx.car.app.activity.CarAppViewModel r1;

        r0 := @this: androidx.car.app.activity.renderer.surface.TemplateSurfaceView;

        r1 := @parameter0: androidx.car.app.activity.CarAppViewModel;

        r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: androidx.car.app.activity.CarAppViewModel mViewModel> = r1;

        return;
    }

    public void setOnCreateInputConnectionListener(androidx.car.app.activity.renderer.surface.OnCreateInputConnectionListener)
    {
        androidx.car.app.activity.renderer.surface.TemplateSurfaceView r0;
        androidx.car.app.activity.renderer.surface.OnCreateInputConnectionListener r1;

        r0 := @this: androidx.car.app.activity.renderer.surface.TemplateSurfaceView;

        r1 := @parameter0: androidx.car.app.activity.renderer.surface.OnCreateInputConnectionListener;

        r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: androidx.car.app.activity.renderer.surface.OnCreateInputConnectionListener mOnCreateInputConnectionListener> = r1;

        return;
    }

    public android.os.IBinder getSurfaceToken()
    {
        androidx.car.app.activity.renderer.surface.TemplateSurfaceView r0;
        boolean $z0;
        android.os.IBinder $r1;

        r0 := @this: androidx.car.app.activity.renderer.surface.TemplateSurfaceView;

        $z0 = <androidx.car.app.activity.renderer.surface.TemplateSurfaceView: boolean SUPPORTS_SURFACE_CONTROL>;

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <androidx.car.app.activity.renderer.surface.TemplateSurfaceView$Api30Impl: android.os.IBinder getHostToken(androidx.car.app.activity.renderer.surface.TemplateSurfaceView)>(r0);

        return $r1;

     label1:
        return null;
    }

    protected void onFocusChanged(boolean, int, android.graphics.Rect)
    {
        androidx.car.app.activity.renderer.surface.TemplateSurfaceView r0;
        boolean z0;
        int i0;
        android.graphics.Rect r1;
        androidx.car.app.activity.renderer.surface.ISurfaceControl r2;
        androidx.car.app.activity.ServiceDispatcher $r3, $r5;
        androidx.car.app.activity.ServiceDispatcher$OneWayCall $r6;

        r0 := @this: androidx.car.app.activity.renderer.surface.TemplateSurfaceView;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        r1 := @parameter2: android.graphics.Rect;

        specialinvoke r0.<android.view.SurfaceView: void onFocusChanged(boolean,int,android.graphics.Rect)>(z0, i0, r1);

        $r3 = r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: androidx.car.app.activity.ServiceDispatcher mServiceDispatcher>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3);

        r2 = r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: androidx.car.app.activity.renderer.surface.ISurfaceControl mSurfaceControl>;

        if r2 == null goto label1;

        $r5 = r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: androidx.car.app.activity.ServiceDispatcher mServiceDispatcher>;

        $r6 = dynamicinvoke "invoke" <androidx.car.app.activity.ServiceDispatcher$OneWayCall (androidx.car.app.activity.renderer.surface.TemplateSurfaceView,androidx.car.app.activity.renderer.surface.ISurfaceControl,boolean)>(r0, r2, z0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.car.app.activity.renderer.surface.TemplateSurfaceView: void lambda$onFocusChanged$0(androidx.car.app.activity.renderer.surface.ISurfaceControl,boolean)>, methodtype: void __METHODTYPE__());

        virtualinvoke $r5.<androidx.car.app.activity.ServiceDispatcher: void dispatch(java.lang.String,androidx.car.app.activity.ServiceDispatcher$OneWayCall)>("onWindowFocusChanged", $r6);

     label1:
        return;
    }

    public android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)
    {
        androidx.car.app.activity.renderer.surface.TemplateSurfaceView r0;
        android.view.inputmethod.EditorInfo r1, r3;
        androidx.car.app.activity.renderer.IProxyInputConnection r2;
        androidx.car.app.activity.ServiceDispatcher $r5, $r9, $r14;
        boolean $z0;
        androidx.car.app.activity.renderer.surface.OnCreateInputConnectionListener $r7, $r8;
        androidx.car.app.activity.ServiceDispatcher$ReturnCall $r11;
        java.lang.Object $r12;
        androidx.car.app.activity.renderer.surface.RemoteProxyInputConnection r15;
        android.view.inputmethod.InputConnection r16;

        r0 := @this: androidx.car.app.activity.renderer.surface.TemplateSurfaceView;

        r1 := @parameter0: android.view.inputmethod.EditorInfo;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r5 = r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: androidx.car.app.activity.ServiceDispatcher mServiceDispatcher>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r5);

        $z0 = r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: boolean mIsInInputMode>;

        if $z0 == 0 goto label1;

        $r7 = r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: androidx.car.app.activity.renderer.surface.OnCreateInputConnectionListener mOnCreateInputConnectionListener>;

        if $r7 != null goto label2;

     label1:
        return null;

     label2:
        $r8 = r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: androidx.car.app.activity.renderer.surface.OnCreateInputConnectionListener mOnCreateInputConnectionListener>;

        r2 = interfaceinvoke $r8.<androidx.car.app.activity.renderer.surface.OnCreateInputConnectionListener: androidx.car.app.activity.renderer.IProxyInputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)>(r1);

        if r2 != null goto label3;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CarApp.Act", "InputConnectionListener has not been received yet. Canceling the input");

        virtualinvoke r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: void onStopInput()>();

        return null;

     label3:
        $r9 = r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: androidx.car.app.activity.ServiceDispatcher mServiceDispatcher>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        $r11 = dynamicinvoke "invoke" <androidx.car.app.activity.ServiceDispatcher$ReturnCall (androidx.car.app.activity.renderer.IProxyInputConnection)>(r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(), methodhandle: "REF_INVOKE_INTERFACE" <androidx.car.app.activity.renderer.IProxyInputConnection: android.view.inputmethod.EditorInfo getEditorInfo()>, methodtype: android.view.inputmethod.EditorInfo __METHODTYPE__());

        $r12 = virtualinvoke $r9.<androidx.car.app.activity.ServiceDispatcher: java.lang.Object fetch(java.lang.String,java.lang.Object,androidx.car.app.activity.ServiceDispatcher$ReturnCall)>("getEditorInfo", null, $r11);

        r3 = (android.view.inputmethod.EditorInfo) $r12;

        if r3 != null goto label4;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CarApp.Act", "Unable to retrieve host EditorInfo");

        return null;

     label4:
        specialinvoke r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: void copyEditorInfo(android.view.inputmethod.EditorInfo,android.view.inputmethod.EditorInfo)>(r3, r1);

        r15 = new androidx.car.app.activity.renderer.surface.RemoteProxyInputConnection;

        $r14 = r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: androidx.car.app.activity.ServiceDispatcher mServiceDispatcher>;

        specialinvoke r15.<androidx.car.app.activity.renderer.surface.RemoteProxyInputConnection: void <init>(androidx.car.app.activity.ServiceDispatcher,androidx.car.app.activity.renderer.IProxyInputConnection)>($r14, r2);

        r16 = (android.view.inputmethod.InputConnection) r15;

        return r16;
    }

    private void copyEditorInfo(android.view.inputmethod.EditorInfo, android.view.inputmethod.EditorInfo)
    {
        androidx.car.app.activity.renderer.surface.TemplateSurfaceView r0;
        android.view.inputmethod.EditorInfo r1, r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String $r5, $r9, $r10;
        java.lang.CharSequence $r6, $r7, $r8;
        android.os.Bundle $r11;
        android.os.LocaleList $r12;
        java.lang.String[] $r13;

        r0 := @this: androidx.car.app.activity.renderer.surface.TemplateSurfaceView;

        r1 := @parameter0: android.view.inputmethod.EditorInfo;

        r2 := @parameter1: android.view.inputmethod.EditorInfo;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        $i0 = r1.<android.view.inputmethod.EditorInfo: int inputType>;

        r2.<android.view.inputmethod.EditorInfo: int inputType> = $i0;

        $i1 = r1.<android.view.inputmethod.EditorInfo: int imeOptions>;

        r2.<android.view.inputmethod.EditorInfo: int imeOptions> = $i1;

        $r5 = r1.<android.view.inputmethod.EditorInfo: java.lang.String privateImeOptions>;

        r2.<android.view.inputmethod.EditorInfo: java.lang.String privateImeOptions> = $r5;

        $r6 = r1.<android.view.inputmethod.EditorInfo: java.lang.CharSequence actionLabel>;

        r2.<android.view.inputmethod.EditorInfo: java.lang.CharSequence actionLabel> = $r6;

        $i2 = r1.<android.view.inputmethod.EditorInfo: int actionId>;

        r2.<android.view.inputmethod.EditorInfo: int actionId> = $i2;

        $i3 = r1.<android.view.inputmethod.EditorInfo: int initialSelStart>;

        r2.<android.view.inputmethod.EditorInfo: int initialSelStart> = $i3;

        $i4 = r1.<android.view.inputmethod.EditorInfo: int initialSelEnd>;

        r2.<android.view.inputmethod.EditorInfo: int initialSelEnd> = $i4;

        $i5 = r1.<android.view.inputmethod.EditorInfo: int initialCapsMode>;

        r2.<android.view.inputmethod.EditorInfo: int initialCapsMode> = $i5;

        $r7 = r1.<android.view.inputmethod.EditorInfo: java.lang.CharSequence hintText>;

        r2.<android.view.inputmethod.EditorInfo: java.lang.CharSequence hintText> = $r7;

        $r8 = r1.<android.view.inputmethod.EditorInfo: java.lang.CharSequence label>;

        r2.<android.view.inputmethod.EditorInfo: java.lang.CharSequence label> = $r8;

        $r9 = r1.<android.view.inputmethod.EditorInfo: java.lang.String packageName>;

        r2.<android.view.inputmethod.EditorInfo: java.lang.String packageName> = $r9;

        $i6 = r1.<android.view.inputmethod.EditorInfo: int fieldId>;

        r2.<android.view.inputmethod.EditorInfo: int fieldId> = $i6;

        $r10 = r1.<android.view.inputmethod.EditorInfo: java.lang.String fieldName>;

        r2.<android.view.inputmethod.EditorInfo: java.lang.String fieldName> = $r10;

        $r11 = r1.<android.view.inputmethod.EditorInfo: android.os.Bundle extras>;

        r2.<android.view.inputmethod.EditorInfo: android.os.Bundle extras> = $r11;

        $r12 = r1.<android.view.inputmethod.EditorInfo: android.os.LocaleList hintLocales>;

        r2.<android.view.inputmethod.EditorInfo: android.os.LocaleList hintLocales> = $r12;

        $r13 = r1.<android.view.inputmethod.EditorInfo: java.lang.String[] contentMimeTypes>;

        r2.<android.view.inputmethod.EditorInfo: java.lang.String[] contentMimeTypes> = $r13;

        return;
    }

    public void onStartInput()
    {
        androidx.car.app.activity.renderer.surface.TemplateSurfaceView r0;
        boolean $z0;
        android.view.inputmethod.InputMethodManager $r1, $r2;
        android.view.View r3, r4;

        r0 := @this: androidx.car.app.activity.renderer.surface.TemplateSurfaceView;

        $z0 = virtualinvoke r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: boolean hasFocus()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: boolean requestFocus()>();

     label1:
        r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: boolean mIsInInputMode> = 1;

        $r1 = r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: android.view.inputmethod.InputMethodManager mInputMethodManager>;

        r3 = (android.view.View) r0;

        virtualinvoke $r1.<android.view.inputmethod.InputMethodManager: void restartInput(android.view.View)>(r3);

        $r2 = r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: android.view.inputmethod.InputMethodManager mInputMethodManager>;

        r4 = (android.view.View) r0;

        virtualinvoke $r2.<android.view.inputmethod.InputMethodManager: boolean showSoftInput(android.view.View,int)>(r4, 0);

        return;
    }

    public void onStopInput()
    {
        androidx.car.app.activity.renderer.surface.TemplateSurfaceView r0;
        boolean $z0;
        android.view.inputmethod.InputMethodManager $r1, $r3;
        android.os.IBinder $r2;
        android.view.View r4;

        r0 := @this: androidx.car.app.activity.renderer.surface.TemplateSurfaceView;

        $z0 = r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: boolean mIsInInputMode>;

        if $z0 == 0 goto label1;

        r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: boolean mIsInInputMode> = 0;

        $r1 = r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: android.view.inputmethod.InputMethodManager mInputMethodManager>;

        $r2 = virtualinvoke r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: android.os.IBinder getWindowToken()>();

        virtualinvoke $r1.<android.view.inputmethod.InputMethodManager: boolean hideSoftInputFromWindow(android.os.IBinder,int)>($r2, 0);

        $r3 = r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: android.view.inputmethod.InputMethodManager mInputMethodManager>;

        r4 = (android.view.View) r0;

        virtualinvoke $r3.<android.view.inputmethod.InputMethodManager: void restartInput(android.view.View)>(r4);

     label1:
        return;
    }

    public void onUpdateSelection(int, int, int, int)
    {
        androidx.car.app.activity.renderer.surface.TemplateSurfaceView r0;
        int i0, i1, i2, i3;
        android.view.inputmethod.InputMethodManager $r1;
        android.view.View r2;

        r0 := @this: androidx.car.app.activity.renderer.surface.TemplateSurfaceView;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r1 = r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: android.view.inputmethod.InputMethodManager mInputMethodManager>;

        r2 = (android.view.View) r0;

        virtualinvoke $r1.<android.view.inputmethod.InputMethodManager: void updateSelection(android.view.View,int,int,int,int)>(r2, i0, i1, i2, i3);

        return;
    }

    public boolean onCheckIsTextEditor()
    {
        androidx.car.app.activity.renderer.surface.TemplateSurfaceView r0;
        boolean $z0;

        r0 := @this: androidx.car.app.activity.renderer.surface.TemplateSurfaceView;

        $z0 = r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: boolean mIsInInputMode>;

        return $z0;
    }

    public java.lang.CharSequence getAccessibilityClassName()
    {
        androidx.car.app.activity.renderer.surface.TemplateSurfaceView r0;
        java.lang.Class $r1;
        java.lang.String $r2;

        r0 := @this: androidx.car.app.activity.renderer.surface.TemplateSurfaceView;

        $r1 = class "Landroid/view/SurfaceView;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        return $r2;
    }

    public boolean checkInputConnectionProxy(android.view.View)
    {
        androidx.car.app.activity.renderer.surface.TemplateSurfaceView r0;
        android.view.View r1;
        boolean $z0;

        r0 := @this: androidx.car.app.activity.renderer.surface.TemplateSurfaceView;

        r1 := @parameter0: android.view.View;

        $z0 = r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: boolean mIsInInputMode>;

        return $z0;
    }

    public void setSurfacePackage(java.lang.Object)
    {
        androidx.car.app.activity.renderer.surface.TemplateSurfaceView r0;
        java.lang.Object r1;
        androidx.car.app.activity.CarAppViewModel $r2, $r9;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        androidx.car.app.activity.ErrorHandler$ErrorType $r8;
        androidx.car.app.activity.renderer.surface.LegacySurfacePackage $r10;
        android.view.SurfaceControlViewHost$SurfacePackage $r11;

        r0 := @this: androidx.car.app.activity.renderer.surface.TemplateSurfaceView;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: androidx.car.app.activity.CarAppViewModel mViewModel>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2);

        $z0 = <androidx.car.app.activity.renderer.surface.TemplateSurfaceView: boolean SUPPORTS_SURFACE_CONTROL>;

        if $z0 == 0 goto label1;

        $z2 = r1 instanceof android.view.SurfaceControlViewHost$SurfacePackage;

        if $z2 == 0 goto label1;

        $r11 = (android.view.SurfaceControlViewHost$SurfacePackage) r1;

        specialinvoke r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: void setSurfacePackage(android.view.SurfaceControlViewHost$SurfacePackage)>($r11);

        goto label3;

     label1:
        $z1 = r1 instanceof androidx.car.app.activity.renderer.surface.LegacySurfacePackage;

        if $z1 == 0 goto label2;

        $r10 = (androidx.car.app.activity.renderer.surface.LegacySurfacePackage) r1;

        specialinvoke r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: void setSurfacePackage(androidx.car.app.activity.renderer.surface.LegacySurfacePackage)>($r10);

        goto label3;

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized surface package: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CarApp.Act", $r7);

        $r9 = r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: androidx.car.app.activity.CarAppViewModel mViewModel>;

        $r8 = <androidx.car.app.activity.ErrorHandler$ErrorType: androidx.car.app.activity.ErrorHandler$ErrorType HOST_INCOMPATIBLE>;

        virtualinvoke $r9.<androidx.car.app.activity.CarAppViewModel: void onError(androidx.car.app.activity.ErrorHandler$ErrorType)>($r8);

     label3:
        return;
    }

    private void setSurfacePackage(androidx.car.app.activity.renderer.surface.LegacySurfacePackage)
    {
        androidx.car.app.activity.renderer.surface.TemplateSurfaceView r0;
        androidx.car.app.activity.renderer.surface.LegacySurfacePackage r1;
        androidx.car.app.activity.renderer.surface.ISurfaceControl r2;
        androidx.car.app.activity.renderer.surface.SurfaceWrapper r3;
        androidx.car.app.activity.ServiceDispatcher $r4, $r7;
        androidx.car.app.activity.renderer.surface.SurfaceWrapperProvider $r6;
        androidx.car.app.activity.ServiceDispatcher$OneWayCall $r8;
        android.view.View$OnTouchListener $r9;

        r0 := @this: androidx.car.app.activity.renderer.surface.TemplateSurfaceView;

        r1 := @parameter0: androidx.car.app.activity.renderer.surface.LegacySurfacePackage;

        $r4 = r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: androidx.car.app.activity.ServiceDispatcher mServiceDispatcher>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r4);

        r2 = virtualinvoke r1.<androidx.car.app.activity.renderer.surface.LegacySurfacePackage: androidx.car.app.activity.renderer.surface.ISurfaceControl getSurfaceControl()>();

        $r6 = r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: androidx.car.app.activity.renderer.surface.SurfaceWrapperProvider mSurfaceWrapperProvider>;

        r3 = virtualinvoke $r6.<androidx.car.app.activity.renderer.surface.SurfaceWrapperProvider: androidx.car.app.activity.renderer.surface.SurfaceWrapper createSurfaceWrapper()>();

        $r7 = r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: androidx.car.app.activity.ServiceDispatcher mServiceDispatcher>;

        $r8 = dynamicinvoke "invoke" <androidx.car.app.activity.ServiceDispatcher$OneWayCall (androidx.car.app.activity.renderer.surface.ISurfaceControl,androidx.car.app.activity.renderer.surface.SurfaceWrapper)>(r2, r3) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.car.app.activity.renderer.surface.TemplateSurfaceView: void lambda$setSurfacePackage$1(androidx.car.app.activity.renderer.surface.ISurfaceControl,androidx.car.app.activity.renderer.surface.SurfaceWrapper)>, methodtype: void __METHODTYPE__());

        virtualinvoke $r7.<androidx.car.app.activity.ServiceDispatcher: void dispatch(java.lang.String,androidx.car.app.activity.ServiceDispatcher$OneWayCall)>("setSurfaceWrapper", $r8);

        r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: androidx.car.app.activity.renderer.surface.ISurfaceControl mSurfaceControl> = r2;

        $r9 = dynamicinvoke "onTouch" <android.view.View$OnTouchListener (androidx.car.app.activity.renderer.surface.TemplateSurfaceView)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: boolean __METHODTYPE__(android.view.View,android.view.MotionEvent), methodhandle: "REF_INVOKE_SPECIAL" <androidx.car.app.activity.renderer.surface.TemplateSurfaceView: boolean lambda$setSurfacePackage$2(android.view.View,android.view.MotionEvent)>, methodtype: boolean __METHODTYPE__(android.view.View,android.view.MotionEvent));

        virtualinvoke r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: void setOnTouchListener(android.view.View$OnTouchListener)>($r9);

        return;
    }

    private void setSurfacePackage(android.view.SurfaceControlViewHost$SurfacePackage)
    {
        androidx.car.app.activity.renderer.surface.TemplateSurfaceView r0;
        android.view.SurfaceControlViewHost$SurfacePackage r1, $r2, $r3;

        r0 := @this: androidx.car.app.activity.renderer.surface.TemplateSurfaceView;

        r1 := @parameter0: android.view.SurfaceControlViewHost$SurfacePackage;

        $r2 = r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: android.view.SurfaceControlViewHost$SurfacePackage mSurfacePackage>;

        if $r2 == null goto label1;

        $r3 = r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: android.view.SurfaceControlViewHost$SurfacePackage mSurfacePackage>;

        staticinvoke <androidx.car.app.activity.renderer.surface.TemplateSurfaceView$Api30Impl: void releaseSurfacePackage(android.view.SurfaceControlViewHost$SurfacePackage)>($r3);

     label1:
        r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: android.view.SurfaceControlViewHost$SurfacePackage mSurfacePackage> = r1;

        staticinvoke <androidx.car.app.activity.renderer.surface.TemplateSurfaceView$Api30Impl: void setSurfacePackage(androidx.car.app.activity.renderer.surface.TemplateSurfaceView,android.view.SurfaceControlViewHost$SurfacePackage)>(r0, r1);

        return;
    }

    protected void onAttachedToWindow()
    {
        androidx.car.app.activity.renderer.surface.TemplateSurfaceView r0;
        android.view.ViewTreeObserver $r1;
        android.view.ViewTreeObserver$OnTouchModeChangeListener $r2;

        r0 := @this: androidx.car.app.activity.renderer.surface.TemplateSurfaceView;

        specialinvoke r0.<android.view.SurfaceView: void onAttachedToWindow()>();

        $r1 = virtualinvoke r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: android.view.ViewTreeObserver getViewTreeObserver()>();

        $r2 = r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: android.view.ViewTreeObserver$OnTouchModeChangeListener mOnTouchModeChangeListener>;

        virtualinvoke $r1.<android.view.ViewTreeObserver: void addOnTouchModeChangeListener(android.view.ViewTreeObserver$OnTouchModeChangeListener)>($r2);

        return;
    }

    protected void onDetachedFromWindow()
    {
        androidx.car.app.activity.renderer.surface.TemplateSurfaceView r0;
        android.view.ViewTreeObserver $r1;
        android.view.ViewTreeObserver$OnTouchModeChangeListener $r2;

        r0 := @this: androidx.car.app.activity.renderer.surface.TemplateSurfaceView;

        specialinvoke r0.<android.view.SurfaceView: void onDetachedFromWindow()>();

        $r1 = virtualinvoke r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: android.view.ViewTreeObserver getViewTreeObserver()>();

        $r2 = r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: android.view.ViewTreeObserver$OnTouchModeChangeListener mOnTouchModeChangeListener>;

        virtualinvoke $r1.<android.view.ViewTreeObserver: void removeOnTouchModeChangeListener(android.view.ViewTreeObserver$OnTouchModeChangeListener)>($r2);

        return;
    }

    boolean handleTouchEvent(android.view.MotionEvent)
    {
        androidx.car.app.activity.renderer.surface.TemplateSurfaceView r0;
        android.view.MotionEvent r1, r2, $r7;
        androidx.car.app.activity.renderer.surface.ISurfaceControl r3;
        androidx.car.app.activity.ServiceDispatcher $r4, $r8;
        java.lang.Object $r6;
        androidx.car.app.activity.ServiceDispatcher$OneWayCall $r9;

        r0 := @this: androidx.car.app.activity.renderer.surface.TemplateSurfaceView;

        r1 := @parameter0: android.view.MotionEvent;

        $r4 = r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: androidx.car.app.activity.ServiceDispatcher mServiceDispatcher>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r4);

        $r6 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r7 = (android.view.MotionEvent) $r6;

        r2 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(android.view.MotionEvent)>($r7);

        r3 = r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: androidx.car.app.activity.renderer.surface.ISurfaceControl mSurfaceControl>;

        if r3 == null goto label1;

        $r8 = r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: androidx.car.app.activity.ServiceDispatcher mServiceDispatcher>;

        $r9 = dynamicinvoke "invoke" <androidx.car.app.activity.ServiceDispatcher$OneWayCall (androidx.car.app.activity.renderer.surface.ISurfaceControl,android.view.MotionEvent)>(r3, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.car.app.activity.renderer.surface.TemplateSurfaceView: void lambda$handleTouchEvent$3(androidx.car.app.activity.renderer.surface.ISurfaceControl,android.view.MotionEvent)>, methodtype: void __METHODTYPE__());

        virtualinvoke $r8.<androidx.car.app.activity.ServiceDispatcher: void dispatch(java.lang.String,androidx.car.app.activity.ServiceDispatcher$OneWayCall)>("onTouchEvent", $r9);

        return 1;

     label1:
        return 0;
    }

    public boolean dispatchKeyEvent(android.view.KeyEvent)
    {
        androidx.car.app.activity.renderer.surface.TemplateSurfaceView r0;
        android.view.KeyEvent r1;
        androidx.car.app.activity.renderer.surface.ISurfaceControl r2;
        boolean $z0;
        androidx.car.app.activity.ServiceDispatcher $r3, $r5;
        java.lang.Object $r4;
        androidx.car.app.activity.ServiceDispatcher$OneWayCall $r6;

        r0 := @this: androidx.car.app.activity.renderer.surface.TemplateSurfaceView;

        r1 := @parameter0: android.view.KeyEvent;

        r2 = r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: androidx.car.app.activity.renderer.surface.ISurfaceControl mSurfaceControl>;

        if r2 == null goto label1;

        $r3 = r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: androidx.car.app.activity.ServiceDispatcher mServiceDispatcher>;

        $r4 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3);

        $r5 = (androidx.car.app.activity.ServiceDispatcher) $r4;

        $r6 = dynamicinvoke "invoke" <androidx.car.app.activity.ServiceDispatcher$OneWayCall (androidx.car.app.activity.renderer.surface.ISurfaceControl,android.view.KeyEvent)>(r2, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.car.app.activity.renderer.surface.TemplateSurfaceView: void lambda$dispatchKeyEvent$4(androidx.car.app.activity.renderer.surface.ISurfaceControl,android.view.KeyEvent)>, methodtype: void __METHODTYPE__());

        virtualinvoke $r5.<androidx.car.app.activity.ServiceDispatcher: void dispatch(java.lang.String,androidx.car.app.activity.ServiceDispatcher$OneWayCall)>("onKeyEvent", $r6);

        return 1;

     label1:
        $z0 = specialinvoke r0.<android.view.SurfaceView: boolean dispatchKeyEvent(android.view.KeyEvent)>(r1);

        return $z0;
    }

    private static void lambda$dispatchKeyEvent$4(androidx.car.app.activity.renderer.surface.ISurfaceControl, android.view.KeyEvent) throws android.os.RemoteException, androidx.car.app.serialization.BundlerException
    {
        androidx.car.app.activity.renderer.surface.ISurfaceControl r0;
        android.view.KeyEvent r1;

        r0 := @parameter0: androidx.car.app.activity.renderer.surface.ISurfaceControl;

        r1 := @parameter1: android.view.KeyEvent;

        interfaceinvoke r0.<androidx.car.app.activity.renderer.surface.ISurfaceControl: void onKeyEvent(android.view.KeyEvent)>(r1);

        return;
    }

    private static void lambda$handleTouchEvent$3(androidx.car.app.activity.renderer.surface.ISurfaceControl, android.view.MotionEvent) throws android.os.RemoteException, androidx.car.app.serialization.BundlerException
    {
        androidx.car.app.activity.renderer.surface.ISurfaceControl r0;
        android.view.MotionEvent r1;

        r0 := @parameter0: androidx.car.app.activity.renderer.surface.ISurfaceControl;

        r1 := @parameter1: android.view.MotionEvent;

        interfaceinvoke r0.<androidx.car.app.activity.renderer.surface.ISurfaceControl: void onTouchEvent(android.view.MotionEvent)>(r1);

        return;
    }

    private boolean lambda$setSurfacePackage$2(android.view.View, android.view.MotionEvent)
    {
        androidx.car.app.activity.renderer.surface.TemplateSurfaceView r0;
        android.view.View r1;
        android.view.MotionEvent r2;
        boolean $z0;

        r0 := @this: androidx.car.app.activity.renderer.surface.TemplateSurfaceView;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.MotionEvent;

        $z0 = virtualinvoke r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: boolean handleTouchEvent(android.view.MotionEvent)>(r2);

        return $z0;
    }

    private static void lambda$setSurfacePackage$1(androidx.car.app.activity.renderer.surface.ISurfaceControl, androidx.car.app.activity.renderer.surface.SurfaceWrapper) throws android.os.RemoteException, androidx.car.app.serialization.BundlerException
    {
        androidx.car.app.activity.renderer.surface.ISurfaceControl r0;
        androidx.car.app.activity.renderer.surface.SurfaceWrapper r1;
        androidx.car.app.serialization.Bundleable $r2;

        r0 := @parameter0: androidx.car.app.activity.renderer.surface.ISurfaceControl;

        r1 := @parameter1: androidx.car.app.activity.renderer.surface.SurfaceWrapper;

        $r2 = staticinvoke <androidx.car.app.serialization.Bundleable: androidx.car.app.serialization.Bundleable create(java.lang.Object)>(r1);

        interfaceinvoke r0.<androidx.car.app.activity.renderer.surface.ISurfaceControl: void setSurfaceWrapper(androidx.car.app.serialization.Bundleable)>($r2);

        return;
    }

    private void lambda$onFocusChanged$0(androidx.car.app.activity.renderer.surface.ISurfaceControl, boolean) throws android.os.RemoteException, androidx.car.app.serialization.BundlerException
    {
        androidx.car.app.activity.renderer.surface.TemplateSurfaceView r0;
        androidx.car.app.activity.renderer.surface.ISurfaceControl r1;
        boolean z0, $z1;

        r0 := @this: androidx.car.app.activity.renderer.surface.TemplateSurfaceView;

        r1 := @parameter0: androidx.car.app.activity.renderer.surface.ISurfaceControl;

        z0 := @parameter1: boolean;

        $z1 = virtualinvoke r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: boolean isInTouchMode()>();

        interfaceinvoke r1.<androidx.car.app.activity.renderer.surface.ISurfaceControl: void onWindowFocusChanged(boolean,boolean)>(z0, $z1);

        return;
    }

    static void <clinit>()
    {
        int $i0;
        boolean $z0;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 30 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        <androidx.car.app.activity.renderer.surface.TemplateSurfaceView: boolean SUPPORTS_SURFACE_CONTROL> = $z0;

        return;
    }

androidx.car.app.activity.renderer.surface.TemplateSurfaceView$1
<androidx.car.app.activity.renderer.surface.TemplateSurfaceView$1: androidx.car.app.activity.renderer.surface.TemplateSurfaceView this$0>
    void <init>(androidx.car.app.activity.renderer.surface.TemplateSurfaceView)
    {
        androidx.car.app.activity.renderer.surface.TemplateSurfaceView$1 r0;
        androidx.car.app.activity.renderer.surface.TemplateSurfaceView r1;

        r0 := @this: androidx.car.app.activity.renderer.surface.TemplateSurfaceView$1;

        r1 := @parameter0: androidx.car.app.activity.renderer.surface.TemplateSurfaceView;

        r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView$1: androidx.car.app.activity.renderer.surface.TemplateSurfaceView this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onTouchModeChanged(boolean)
    {
        androidx.car.app.activity.renderer.surface.TemplateSurfaceView$1 r0;
        boolean z0;
        androidx.car.app.activity.renderer.surface.ISurfaceControl r1;
        androidx.car.app.activity.renderer.surface.TemplateSurfaceView $r2, $r5, $r6;
        androidx.car.app.activity.ServiceDispatcher $r3, $r7;
        androidx.car.app.activity.ServiceDispatcher$OneWayCall $r8;

        r0 := @this: androidx.car.app.activity.renderer.surface.TemplateSurfaceView$1;

        z0 := @parameter0: boolean;

        $r2 = r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView$1: androidx.car.app.activity.renderer.surface.TemplateSurfaceView this$0>;

        $r3 = $r2.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: androidx.car.app.activity.ServiceDispatcher mServiceDispatcher>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3);

        $r5 = r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView$1: androidx.car.app.activity.renderer.surface.TemplateSurfaceView this$0>;

        r1 = $r5.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: androidx.car.app.activity.renderer.surface.ISurfaceControl mSurfaceControl>;

        if r1 == null goto label1;

        $r6 = r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView$1: androidx.car.app.activity.renderer.surface.TemplateSurfaceView this$0>;

        $r7 = $r6.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: androidx.car.app.activity.ServiceDispatcher mServiceDispatcher>;

        $r8 = dynamicinvoke "invoke" <androidx.car.app.activity.ServiceDispatcher$OneWayCall (androidx.car.app.activity.renderer.surface.TemplateSurfaceView$1,androidx.car.app.activity.renderer.surface.ISurfaceControl,boolean)>(r0, r1, z0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.car.app.activity.renderer.surface.TemplateSurfaceView$1: void lambda$onTouchModeChanged$0(androidx.car.app.activity.renderer.surface.ISurfaceControl,boolean)>, methodtype: void __METHODTYPE__());

        virtualinvoke $r7.<androidx.car.app.activity.ServiceDispatcher: void dispatch(java.lang.String,androidx.car.app.activity.ServiceDispatcher$OneWayCall)>("onWindowFocusChanged", $r8);

     label1:
        return;
    }

    private void lambda$onTouchModeChanged$0(androidx.car.app.activity.renderer.surface.ISurfaceControl, boolean) throws android.os.RemoteException, androidx.car.app.serialization.BundlerException
    {
        androidx.car.app.activity.renderer.surface.TemplateSurfaceView$1 r0;
        androidx.car.app.activity.renderer.surface.ISurfaceControl r1;
        boolean z0, $z1;
        androidx.car.app.activity.renderer.surface.TemplateSurfaceView $r2;

        r0 := @this: androidx.car.app.activity.renderer.surface.TemplateSurfaceView$1;

        r1 := @parameter0: androidx.car.app.activity.renderer.surface.ISurfaceControl;

        z0 := @parameter1: boolean;

        $r2 = r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView$1: androidx.car.app.activity.renderer.surface.TemplateSurfaceView this$0>;

        $z1 = virtualinvoke $r2.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: boolean hasFocus()>();

        interfaceinvoke r1.<androidx.car.app.activity.renderer.surface.ISurfaceControl: void onWindowFocusChanged(boolean,boolean)>($z1, z0);

        return;
    }

androidx.car.app.activity.renderer.surface.TemplateSurfaceView$Api30Impl
    private void <init>()
    {
        androidx.car.app.activity.renderer.surface.TemplateSurfaceView$Api30Impl r0;

        r0 := @this: androidx.car.app.activity.renderer.surface.TemplateSurfaceView$Api30Impl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static android.os.IBinder getHostToken(androidx.car.app.activity.renderer.surface.TemplateSurfaceView)
    {
        androidx.car.app.activity.renderer.surface.TemplateSurfaceView r0;
        android.os.IBinder $r1;

        r0 := @parameter0: androidx.car.app.activity.renderer.surface.TemplateSurfaceView;

        $r1 = virtualinvoke r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: android.os.IBinder getHostToken()>();

        return $r1;
    }

    static void setSurfacePackage(androidx.car.app.activity.renderer.surface.TemplateSurfaceView, android.view.SurfaceControlViewHost$SurfacePackage)
    {
        androidx.car.app.activity.renderer.surface.TemplateSurfaceView r0;
        android.view.SurfaceControlViewHost$SurfacePackage r1;

        r0 := @parameter0: androidx.car.app.activity.renderer.surface.TemplateSurfaceView;

        r1 := @parameter1: android.view.SurfaceControlViewHost$SurfacePackage;

        virtualinvoke r0.<androidx.car.app.activity.renderer.surface.TemplateSurfaceView: void setChildSurfacePackage(android.view.SurfaceControlViewHost$SurfacePackage)>(r1);

        return;
    }

    public static void releaseSurfacePackage(android.view.SurfaceControlViewHost$SurfacePackage)
    {
        android.view.SurfaceControlViewHost$SurfacePackage r0;

        r0 := @parameter0: android.view.SurfaceControlViewHost$SurfacePackage;

        virtualinvoke r0.<android.view.SurfaceControlViewHost$SurfacePackage: void release()>();

        return;
    }

