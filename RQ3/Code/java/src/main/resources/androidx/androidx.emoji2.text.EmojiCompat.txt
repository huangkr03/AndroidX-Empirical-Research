androidx.emoji2.text.EmojiCompat
<androidx.emoji2.text.EmojiCompat: java.lang.String EDITOR_INFO_METAVERSION_KEY>
<androidx.emoji2.text.EmojiCompat: java.lang.String EDITOR_INFO_REPLACE_ALL_KEY>
<androidx.emoji2.text.EmojiCompat: int LOAD_STATE_DEFAULT>
<androidx.emoji2.text.EmojiCompat: int LOAD_STATE_LOADING>
<androidx.emoji2.text.EmojiCompat: int LOAD_STATE_SUCCEEDED>
<androidx.emoji2.text.EmojiCompat: int LOAD_STATE_FAILED>
<androidx.emoji2.text.EmojiCompat: int REPLACE_STRATEGY_DEFAULT>
<androidx.emoji2.text.EmojiCompat: int REPLACE_STRATEGY_ALL>
<androidx.emoji2.text.EmojiCompat: int REPLACE_STRATEGY_NON_EXISTENT>
<androidx.emoji2.text.EmojiCompat: int LOAD_STRATEGY_DEFAULT>
<androidx.emoji2.text.EmojiCompat: int LOAD_STRATEGY_MANUAL>
<androidx.emoji2.text.EmojiCompat: int EMOJI_UNSUPPORTED>
<androidx.emoji2.text.EmojiCompat: int EMOJI_SUPPORTED>
<androidx.emoji2.text.EmojiCompat: int EMOJI_FALLBACK>
<androidx.emoji2.text.EmojiCompat: int EMOJI_COUNT_UNLIMITED>
<androidx.emoji2.text.EmojiCompat: java.lang.Object INSTANCE_LOCK>
<androidx.emoji2.text.EmojiCompat: java.lang.Object CONFIG_LOCK>
<androidx.emoji2.text.EmojiCompat: androidx.emoji2.text.EmojiCompat sInstance>
<androidx.emoji2.text.EmojiCompat: boolean sHasDoneDefaultConfigLookup>
<androidx.emoji2.text.EmojiCompat: java.util.concurrent.locks.ReadWriteLock mInitLock>
<androidx.emoji2.text.EmojiCompat: java.util.Set mInitCallbacks>
<androidx.emoji2.text.EmojiCompat: int mLoadState>
<androidx.emoji2.text.EmojiCompat: android.os.Handler mMainHandler>
<androidx.emoji2.text.EmojiCompat: androidx.emoji2.text.EmojiCompat$CompatInternal mHelper>
<androidx.emoji2.text.EmojiCompat: androidx.emoji2.text.EmojiCompat$MetadataRepoLoader mMetadataLoader>
<androidx.emoji2.text.EmojiCompat: boolean mReplaceAll>
<androidx.emoji2.text.EmojiCompat: boolean mUseEmojiAsDefaultStyle>
<androidx.emoji2.text.EmojiCompat: int[] mEmojiAsDefaultStyleExceptions>
<androidx.emoji2.text.EmojiCompat: boolean mEmojiSpanIndicatorEnabled>
<androidx.emoji2.text.EmojiCompat: int mEmojiSpanIndicatorColor>
<androidx.emoji2.text.EmojiCompat: int mMetadataLoadStrategy>
<androidx.emoji2.text.EmojiCompat: androidx.emoji2.text.EmojiCompat$GlyphChecker mGlyphChecker>
<androidx.emoji2.text.EmojiCompat: java.lang.String NOT_INITIALIZED_ERROR_TEXT>
    private void <init>(androidx.emoji2.text.EmojiCompat$Config)
    {
        androidx.emoji2.text.EmojiCompat r0;
        androidx.emoji2.text.EmojiCompat$Config r1;
        boolean $z0, $z1, $z2, $z3;
        int[] $r3;
        int $i0, $i1, $i2;
        androidx.emoji2.text.EmojiCompat$MetadataRepoLoader $r4;
        androidx.emoji2.text.EmojiCompat$GlyphChecker $r5;
        android.os.Looper $r7;
        java.util.Set $r9, $r11, $r12, $r13;
        androidx.emoji2.text.EmojiCompat$CompatInternal $r14, r18;
        java.util.concurrent.locks.ReentrantReadWriteLock r15;
        android.os.Handler r16;
        androidx.collection.ArraySet r17;
        androidx.emoji2.text.EmojiCompat$CompatInternal19 r19;

        r0 := @this: androidx.emoji2.text.EmojiCompat;

        r1 := @parameter0: androidx.emoji2.text.EmojiCompat$Config;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r15 = new java.util.concurrent.locks.ReentrantReadWriteLock;

        specialinvoke r15.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>();

        r0.<androidx.emoji2.text.EmojiCompat: java.util.concurrent.locks.ReadWriteLock mInitLock> = r15;

        r0.<androidx.emoji2.text.EmojiCompat: int mLoadState> = 3;

        $z0 = r1.<androidx.emoji2.text.EmojiCompat$Config: boolean mReplaceAll>;

        r0.<androidx.emoji2.text.EmojiCompat: boolean mReplaceAll> = $z0;

        $z1 = r1.<androidx.emoji2.text.EmojiCompat$Config: boolean mUseEmojiAsDefaultStyle>;

        r0.<androidx.emoji2.text.EmojiCompat: boolean mUseEmojiAsDefaultStyle> = $z1;

        $r3 = r1.<androidx.emoji2.text.EmojiCompat$Config: int[] mEmojiAsDefaultStyleExceptions>;

        r0.<androidx.emoji2.text.EmojiCompat: int[] mEmojiAsDefaultStyleExceptions> = $r3;

        $z2 = r1.<androidx.emoji2.text.EmojiCompat$Config: boolean mEmojiSpanIndicatorEnabled>;

        r0.<androidx.emoji2.text.EmojiCompat: boolean mEmojiSpanIndicatorEnabled> = $z2;

        $i0 = r1.<androidx.emoji2.text.EmojiCompat$Config: int mEmojiSpanIndicatorColor>;

        r0.<androidx.emoji2.text.EmojiCompat: int mEmojiSpanIndicatorColor> = $i0;

        $r4 = r1.<androidx.emoji2.text.EmojiCompat$Config: androidx.emoji2.text.EmojiCompat$MetadataRepoLoader mMetadataLoader>;

        r0.<androidx.emoji2.text.EmojiCompat: androidx.emoji2.text.EmojiCompat$MetadataRepoLoader mMetadataLoader> = $r4;

        $i1 = r1.<androidx.emoji2.text.EmojiCompat$Config: int mMetadataLoadStrategy>;

        r0.<androidx.emoji2.text.EmojiCompat: int mMetadataLoadStrategy> = $i1;

        $r5 = r1.<androidx.emoji2.text.EmojiCompat$Config: androidx.emoji2.text.EmojiCompat$GlyphChecker mGlyphChecker>;

        r0.<androidx.emoji2.text.EmojiCompat: androidx.emoji2.text.EmojiCompat$GlyphChecker mGlyphChecker> = $r5;

        r16 = new android.os.Handler;

        $r7 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke r16.<android.os.Handler: void <init>(android.os.Looper)>($r7);

        r0.<androidx.emoji2.text.EmojiCompat: android.os.Handler mMainHandler> = r16;

        r17 = new androidx.collection.ArraySet;

        specialinvoke r17.<androidx.collection.ArraySet: void <init>()>();

        r0.<androidx.emoji2.text.EmojiCompat: java.util.Set mInitCallbacks> = r17;

        $r9 = r1.<androidx.emoji2.text.EmojiCompat$Config: java.util.Set mInitCallbacks>;

        if $r9 == null goto label1;

        $r11 = r1.<androidx.emoji2.text.EmojiCompat$Config: java.util.Set mInitCallbacks>;

        $z3 = interfaceinvoke $r11.<java.util.Set: boolean isEmpty()>();

        if $z3 != 0 goto label1;

        $r13 = r0.<androidx.emoji2.text.EmojiCompat: java.util.Set mInitCallbacks>;

        $r12 = r1.<androidx.emoji2.text.EmojiCompat$Config: java.util.Set mInitCallbacks>;

        interfaceinvoke $r13.<java.util.Set: boolean addAll(java.util.Collection)>($r12);

     label1:
        $i2 = <android.os.Build$VERSION: int SDK_INT>;

        if $i2 >= 19 goto label2;

        r18 = new androidx.emoji2.text.EmojiCompat$CompatInternal;

        $r14 = r18;

        specialinvoke r18.<androidx.emoji2.text.EmojiCompat$CompatInternal: void <init>(androidx.emoji2.text.EmojiCompat)>(r0);

        goto label3;

     label2:
        r19 = new androidx.emoji2.text.EmojiCompat$CompatInternal19;

        $r14 = r19;

        specialinvoke r19.<androidx.emoji2.text.EmojiCompat$CompatInternal19: void <init>(androidx.emoji2.text.EmojiCompat)>(r0);

     label3:
        r0.<androidx.emoji2.text.EmojiCompat: androidx.emoji2.text.EmojiCompat$CompatInternal mHelper> = $r14;

        specialinvoke r0.<androidx.emoji2.text.EmojiCompat: void loadMetadata()>();

        return;
    }

    public static androidx.emoji2.text.EmojiCompat init(android.content.Context)
    {
        android.content.Context r0;
        androidx.emoji2.text.EmojiCompat $r1;

        r0 := @parameter0: android.content.Context;

        $r1 = staticinvoke <androidx.emoji2.text.EmojiCompat: androidx.emoji2.text.EmojiCompat init(android.content.Context,androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory)>(r0, null);

        return $r1;
    }

    public static androidx.emoji2.text.EmojiCompat init(android.content.Context, androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory)
    {
        android.content.Context r0;
        androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory r1, $r8, r9;
        androidx.emoji2.text.EmojiCompat$Config r2;
        java.lang.Throwable r3, $r7;
        boolean $z0, $z1;
        java.lang.Object $r4, r10;
        androidx.emoji2.text.EmojiCompat $r6, $r11;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory;

        $z0 = <androidx.emoji2.text.EmojiCompat: boolean sHasDoneDefaultConfigLookup>;

        if $z0 == 0 goto label1;

        $r6 = <androidx.emoji2.text.EmojiCompat: androidx.emoji2.text.EmojiCompat sInstance>;

        return $r6;

     label1:
        if r1 == null goto label2;

        $r8 = r1;

        goto label3;

     label2:
        $r8 = new androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory;

        specialinvoke $r8.<androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory: void <init>(androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper)>(null);

     label3:
        r9 = $r8;

        r2 = virtualinvoke r9.<androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory: androidx.emoji2.text.EmojiCompat$Config create(android.content.Context)>(r0);

        $r4 = <androidx.emoji2.text.EmojiCompat: java.lang.Object CONFIG_LOCK>;

        r10 = $r4;

        entermonitor $r4;

     label4:
        $z1 = <androidx.emoji2.text.EmojiCompat: boolean sHasDoneDefaultConfigLookup>;

        if $z1 != 0 goto label6;

        if r2 == null goto label5;

        staticinvoke <androidx.emoji2.text.EmojiCompat: androidx.emoji2.text.EmojiCompat init(androidx.emoji2.text.EmojiCompat$Config)>(r2);

     label5:
        <androidx.emoji2.text.EmojiCompat: boolean sHasDoneDefaultConfigLookup> = 1;

     label6:
        $r11 = <androidx.emoji2.text.EmojiCompat: androidx.emoji2.text.EmojiCompat sInstance>;

        exitmonitor r10;

     label7:
        return $r11;

     label8:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r10;

     label9:
        throw r3;

        catch java.lang.Throwable from label4 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }

    public static androidx.emoji2.text.EmojiCompat init(androidx.emoji2.text.EmojiCompat$Config)
    {
        androidx.emoji2.text.EmojiCompat$Config r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        androidx.emoji2.text.EmojiCompat $r4, r6;

        r0 := @parameter0: androidx.emoji2.text.EmojiCompat$Config;

        r6 = <androidx.emoji2.text.EmojiCompat: androidx.emoji2.text.EmojiCompat sInstance>;

        if r6 != null goto label6;

        $r3 = <androidx.emoji2.text.EmojiCompat: java.lang.Object INSTANCE_LOCK>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        r6 = <androidx.emoji2.text.EmojiCompat: androidx.emoji2.text.EmojiCompat sInstance>;

        if r6 != null goto label2;

        $r4 = new androidx.emoji2.text.EmojiCompat;

        specialinvoke $r4.<androidx.emoji2.text.EmojiCompat: void <init>(androidx.emoji2.text.EmojiCompat$Config)>(r0);

        r6 = $r4;

        <androidx.emoji2.text.EmojiCompat: androidx.emoji2.text.EmojiCompat sInstance> = r6;

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return r6;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public static boolean isConfigured()
    {
        androidx.emoji2.text.EmojiCompat $r0;
        boolean $z0;

        $r0 = <androidx.emoji2.text.EmojiCompat: androidx.emoji2.text.EmojiCompat sInstance>;

        if $r0 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static androidx.emoji2.text.EmojiCompat reset(androidx.emoji2.text.EmojiCompat$Config)
    {
        androidx.emoji2.text.EmojiCompat$Config r0;
        java.lang.Object r1, $r4;
        androidx.emoji2.text.EmojiCompat r2, $r5;
        java.lang.Throwable r3, $r6;

        r0 := @parameter0: androidx.emoji2.text.EmojiCompat$Config;

        $r4 = <androidx.emoji2.text.EmojiCompat: java.lang.Object INSTANCE_LOCK>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        $r5 = new androidx.emoji2.text.EmojiCompat;

        specialinvoke $r5.<androidx.emoji2.text.EmojiCompat: void <init>(androidx.emoji2.text.EmojiCompat$Config)>(r0);

        r2 = $r5;

        <androidx.emoji2.text.EmojiCompat: androidx.emoji2.text.EmojiCompat sInstance> = r2;

        exitmonitor r1;

     label2:
        return r2;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r1;

     label4:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static androidx.emoji2.text.EmojiCompat reset(androidx.emoji2.text.EmojiCompat)
    {
        androidx.emoji2.text.EmojiCompat r0, $r3;
        java.lang.Object r1, $r2;

        r0 := @parameter0: androidx.emoji2.text.EmojiCompat;

        $r2 = <androidx.emoji2.text.EmojiCompat: java.lang.Object INSTANCE_LOCK>;

        r1 = $r2;

        entermonitor $r2;

        <androidx.emoji2.text.EmojiCompat: androidx.emoji2.text.EmojiCompat sInstance> = r0;

        $r3 = <androidx.emoji2.text.EmojiCompat: androidx.emoji2.text.EmojiCompat sInstance>;

        exitmonitor r1;

        return $r3;
    }

    public static void skipDefaultConfigurationLookup(boolean)
    {
        boolean z0;
        java.lang.Object r0, $r1;

        z0 := @parameter0: boolean;

        $r1 = <androidx.emoji2.text.EmojiCompat: java.lang.Object CONFIG_LOCK>;

        r0 = $r1;

        entermonitor $r1;

        <androidx.emoji2.text.EmojiCompat: boolean sHasDoneDefaultConfigLookup> = z0;

        exitmonitor r0;

        goto label1;

     label1:
        return;
    }

    public static androidx.emoji2.text.EmojiCompat get()
    {
        java.lang.Object r0, $r3;
        androidx.emoji2.text.EmojiCompat r1;
        java.lang.Throwable r2, $r5;
        boolean $z0;

        $r3 = <androidx.emoji2.text.EmojiCompat: java.lang.Object INSTANCE_LOCK>;

        r0 = $r3;

        entermonitor $r3;

     label1:
        r1 = <androidx.emoji2.text.EmojiCompat: androidx.emoji2.text.EmojiCompat sInstance>;

        if r1 == null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z0, "EmojiCompat is not initialized.\n\nYou must initialize EmojiCompat prior to referencing the EmojiCompat instance.\n\nThe most likely cause of this error is disabling the EmojiCompatInitializer\neither explicitly in AndroidManifest.xml, or by including\nandroidx.emoji2:emoji2-bundled.\n\nAutomatic initialization is typically performed by EmojiCompatInitializer. If\nyou are not expecting to initialize EmojiCompat manually in your application,\nplease check to ensure it has not been removed from your APK\'s manifest. You can\ndo this in Android Studio using Build > Analyze APK.\n\nIn the APK Analyzer, ensure that the startup entry for\nEmojiCompatInitializer and InitializationProvider is present in\n AndroidManifest.xml. If it is missing or contains tools:node=\"remove\", and you\nintend to use automatic configuration, verify:\n\n  1. Your application does not include emoji2-bundled\n  2. All modules do not contain an exclusion manifest rule for\n     EmojiCompatInitializer or InitializationProvider. For more information\n     about manifest exclusions see the documentation for the androidx startup\n     library.\n\nIf you intend to use emoji2-bundled, please call EmojiCompat.init. You can\nlearn more in the documentation for BundledEmojiCompatConfig.\n\nIf you intended to perform manual configuration, it is recommended that you call\nEmojiCompat.init immediately on application startup.\n\nIf you still cannot resolve this issue, please open a bug with your specific\nconfiguration to help improve error message.");

        exitmonitor r0;

     label4:
        return r1;

     label5:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r0;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void load()
    {
        androidx.emoji2.text.EmojiCompat r0;
        int $i0, $i1;
        boolean $z0, $z1;
        java.util.concurrent.locks.ReadWriteLock $r1, $r3, $r6;
        java.util.concurrent.locks.Lock $r2, $r4, $r7;
        androidx.emoji2.text.EmojiCompat$CompatInternal $r5;

        r0 := @this: androidx.emoji2.text.EmojiCompat;

        $i0 = r0.<androidx.emoji2.text.EmojiCompat: int mMetadataLoadStrategy>;

        if $i0 != 1 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z1, "Set metadataLoadStrategy to LOAD_STRATEGY_MANUAL to execute manual loading");

        $z0 = specialinvoke r0.<androidx.emoji2.text.EmojiCompat: boolean isInitialized()>();

        if $z0 == 0 goto label3;

        return;

     label3:
        $r1 = r0.<androidx.emoji2.text.EmojiCompat: java.util.concurrent.locks.ReadWriteLock mInitLock>;

        $r2 = interfaceinvoke $r1.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void lock()>();

        $i1 = r0.<androidx.emoji2.text.EmojiCompat: int mLoadState>;

        if $i1 != 0 goto label4;

        $r6 = r0.<androidx.emoji2.text.EmojiCompat: java.util.concurrent.locks.ReadWriteLock mInitLock>;

        $r7 = interfaceinvoke $r6.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r7.<java.util.concurrent.locks.Lock: void unlock()>();

        return;

     label4:
        r0.<androidx.emoji2.text.EmojiCompat: int mLoadState> = 0;

        $r3 = r0.<androidx.emoji2.text.EmojiCompat: java.util.concurrent.locks.ReadWriteLock mInitLock>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label5;

     label5:
        $r5 = r0.<androidx.emoji2.text.EmojiCompat: androidx.emoji2.text.EmojiCompat$CompatInternal mHelper>;

        virtualinvoke $r5.<androidx.emoji2.text.EmojiCompat$CompatInternal: void loadMetadata()>();

        return;
    }

    private void loadMetadata()
    {
        androidx.emoji2.text.EmojiCompat r0;
        java.util.concurrent.locks.ReadWriteLock $r1, $r3;
        java.util.concurrent.locks.Lock $r2, $r4;
        int $i0, $i1;
        androidx.emoji2.text.EmojiCompat$CompatInternal $r5;

        r0 := @this: androidx.emoji2.text.EmojiCompat;

        $r1 = r0.<androidx.emoji2.text.EmojiCompat: java.util.concurrent.locks.ReadWriteLock mInitLock>;

        $r2 = interfaceinvoke $r1.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void lock()>();

        $i0 = r0.<androidx.emoji2.text.EmojiCompat: int mMetadataLoadStrategy>;

        if $i0 != 0 goto label1;

        r0.<androidx.emoji2.text.EmojiCompat: int mLoadState> = 0;

     label1:
        $r3 = r0.<androidx.emoji2.text.EmojiCompat: java.util.concurrent.locks.ReadWriteLock mInitLock>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label2;

     label2:
        $i1 = virtualinvoke r0.<androidx.emoji2.text.EmojiCompat: int getLoadState()>();

        if $i1 != 0 goto label3;

        $r5 = r0.<androidx.emoji2.text.EmojiCompat: androidx.emoji2.text.EmojiCompat$CompatInternal mHelper>;

        virtualinvoke $r5.<androidx.emoji2.text.EmojiCompat$CompatInternal: void loadMetadata()>();

     label3:
        return;
    }

    void onMetadataLoadSuccess()
    {
        androidx.emoji2.text.EmojiCompat r0;
        java.util.ArrayList r1, $r3;
        java.lang.Throwable r2, $r12;
        java.util.concurrent.locks.ReadWriteLock $r4, $r8, $r13;
        java.util.concurrent.locks.Lock $r5, $r9, $r14;
        java.util.Set $r6, $r7;
        androidx.emoji2.text.EmojiCompat$ListenerDispatcher $r10;
        int $i0;
        android.os.Handler $r11;

        r0 := @this: androidx.emoji2.text.EmojiCompat;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r1 = $r3;

        $r4 = r0.<androidx.emoji2.text.EmojiCompat: java.util.concurrent.locks.ReadWriteLock mInitLock>;

        $r5 = interfaceinvoke $r4.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r5.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        r0.<androidx.emoji2.text.EmojiCompat: int mLoadState> = 1;

        $r6 = r0.<androidx.emoji2.text.EmojiCompat: java.util.Set mInitCallbacks>;

        interfaceinvoke r1.<java.util.Collection: boolean addAll(java.util.Collection)>($r6);

        $r7 = r0.<androidx.emoji2.text.EmojiCompat: java.util.Set mInitCallbacks>;

        interfaceinvoke $r7.<java.util.Set: void clear()>();

     label2:
        $r8 = r0.<androidx.emoji2.text.EmojiCompat: java.util.concurrent.locks.ReadWriteLock mInitLock>;

        $r9 = interfaceinvoke $r8.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r9.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label4;

     label3:
        $r12 := @caughtexception;

        r2 = $r12;

        $r13 = r0.<androidx.emoji2.text.EmojiCompat: java.util.concurrent.locks.ReadWriteLock mInitLock>;

        $r14 = interfaceinvoke $r13.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r14.<java.util.concurrent.locks.Lock: void unlock()>();

        throw r2;

     label4:
        $r11 = r0.<androidx.emoji2.text.EmojiCompat: android.os.Handler mMainHandler>;

        $r10 = new androidx.emoji2.text.EmojiCompat$ListenerDispatcher;

        $i0 = r0.<androidx.emoji2.text.EmojiCompat: int mLoadState>;

        specialinvoke $r10.<androidx.emoji2.text.EmojiCompat$ListenerDispatcher: void <init>(java.util.Collection,int)>(r1, $i0);

        virtualinvoke $r11.<android.os.Handler: boolean post(java.lang.Runnable)>($r10);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    void onMetadataLoadFailed(java.lang.Throwable)
    {
        androidx.emoji2.text.EmojiCompat r0;
        java.lang.Throwable r1, r3, $r13;
        java.util.ArrayList r2, $r4;
        java.util.concurrent.locks.ReadWriteLock $r5, $r9, $r14;
        java.util.concurrent.locks.Lock $r6, $r10, $r15;
        java.util.Set $r7, $r8;
        androidx.emoji2.text.EmojiCompat$ListenerDispatcher $r11;
        int $i0;
        android.os.Handler $r12;

        r0 := @this: androidx.emoji2.text.EmojiCompat;

        r1 := @parameter0: java.lang.Throwable;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r2 = $r4;

        $r5 = r0.<androidx.emoji2.text.EmojiCompat: java.util.concurrent.locks.ReadWriteLock mInitLock>;

        $r6 = interfaceinvoke $r5.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r6.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        r0.<androidx.emoji2.text.EmojiCompat: int mLoadState> = 2;

        $r7 = r0.<androidx.emoji2.text.EmojiCompat: java.util.Set mInitCallbacks>;

        interfaceinvoke r2.<java.util.Collection: boolean addAll(java.util.Collection)>($r7);

        $r8 = r0.<androidx.emoji2.text.EmojiCompat: java.util.Set mInitCallbacks>;

        interfaceinvoke $r8.<java.util.Set: void clear()>();

     label2:
        $r9 = r0.<androidx.emoji2.text.EmojiCompat: java.util.concurrent.locks.ReadWriteLock mInitLock>;

        $r10 = interfaceinvoke $r9.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r10.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label4;

     label3:
        $r13 := @caughtexception;

        r3 = $r13;

        $r14 = r0.<androidx.emoji2.text.EmojiCompat: java.util.concurrent.locks.ReadWriteLock mInitLock>;

        $r15 = interfaceinvoke $r14.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r15.<java.util.concurrent.locks.Lock: void unlock()>();

        throw r3;

     label4:
        $r12 = r0.<androidx.emoji2.text.EmojiCompat: android.os.Handler mMainHandler>;

        $r11 = new androidx.emoji2.text.EmojiCompat$ListenerDispatcher;

        $i0 = r0.<androidx.emoji2.text.EmojiCompat: int mLoadState>;

        specialinvoke $r11.<androidx.emoji2.text.EmojiCompat$ListenerDispatcher: void <init>(java.util.Collection,int,java.lang.Throwable)>(r2, $i0, r1);

        virtualinvoke $r12.<android.os.Handler: boolean post(java.lang.Runnable)>($r11);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void registerInitCallback(androidx.emoji2.text.EmojiCompat$InitCallback)
    {
        androidx.emoji2.text.EmojiCompat r0;
        androidx.emoji2.text.EmojiCompat$InitCallback r1;
        java.lang.Throwable r2, $r11;
        java.util.concurrent.locks.ReadWriteLock $r4, $r8, $r12;
        java.util.concurrent.locks.Lock $r5, $r9, $r13;
        int $i0, $i1, $i2;
        androidx.emoji2.text.EmojiCompat$ListenerDispatcher $r6;
        android.os.Handler $r7;
        java.util.Set $r10;

        r0 := @this: androidx.emoji2.text.EmojiCompat;

        r1 := @parameter0: androidx.emoji2.text.EmojiCompat$InitCallback;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "initCallback cannot be null");

        $r4 = r0.<androidx.emoji2.text.EmojiCompat: java.util.concurrent.locks.ReadWriteLock mInitLock>;

        $r5 = interfaceinvoke $r4.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r5.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $i0 = r0.<androidx.emoji2.text.EmojiCompat: int mLoadState>;

        if $i0 == 1 goto label2;

        $i2 = r0.<androidx.emoji2.text.EmojiCompat: int mLoadState>;

        if $i2 != 2 goto label3;

     label2:
        $r7 = r0.<androidx.emoji2.text.EmojiCompat: android.os.Handler mMainHandler>;

        $r6 = new androidx.emoji2.text.EmojiCompat$ListenerDispatcher;

        $i1 = r0.<androidx.emoji2.text.EmojiCompat: int mLoadState>;

        specialinvoke $r6.<androidx.emoji2.text.EmojiCompat$ListenerDispatcher: void <init>(androidx.emoji2.text.EmojiCompat$InitCallback,int)>(r1, $i1);

        virtualinvoke $r7.<android.os.Handler: boolean post(java.lang.Runnable)>($r6);

        goto label4;

     label3:
        $r10 = r0.<androidx.emoji2.text.EmojiCompat: java.util.Set mInitCallbacks>;

        interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>(r1);

     label4:
        $r8 = r0.<androidx.emoji2.text.EmojiCompat: java.util.concurrent.locks.ReadWriteLock mInitLock>;

        $r9 = interfaceinvoke $r8.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r9.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label6;

     label5:
        $r11 := @caughtexception;

        r2 = $r11;

        $r12 = r0.<androidx.emoji2.text.EmojiCompat: java.util.concurrent.locks.ReadWriteLock mInitLock>;

        $r13 = interfaceinvoke $r12.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r13.<java.util.concurrent.locks.Lock: void unlock()>();

        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
    }

    public void unregisterInitCallback(androidx.emoji2.text.EmojiCompat$InitCallback)
    {
        androidx.emoji2.text.EmojiCompat r0;
        androidx.emoji2.text.EmojiCompat$InitCallback r1;
        java.lang.Throwable r2, $r9;
        java.util.concurrent.locks.ReadWriteLock $r4, $r7, $r10;
        java.util.concurrent.locks.Lock $r5, $r8, $r11;
        java.util.Set $r6;

        r0 := @this: androidx.emoji2.text.EmojiCompat;

        r1 := @parameter0: androidx.emoji2.text.EmojiCompat$InitCallback;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "initCallback cannot be null");

        $r4 = r0.<androidx.emoji2.text.EmojiCompat: java.util.concurrent.locks.ReadWriteLock mInitLock>;

        $r5 = interfaceinvoke $r4.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r5.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $r6 = r0.<androidx.emoji2.text.EmojiCompat: java.util.Set mInitCallbacks>;

        interfaceinvoke $r6.<java.util.Set: boolean remove(java.lang.Object)>(r1);

     label2:
        $r7 = r0.<androidx.emoji2.text.EmojiCompat: java.util.concurrent.locks.ReadWriteLock mInitLock>;

        $r8 = interfaceinvoke $r7.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r8.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label4;

     label3:
        $r9 := @caughtexception;

        r2 = $r9;

        $r10 = r0.<androidx.emoji2.text.EmojiCompat: java.util.concurrent.locks.ReadWriteLock mInitLock>;

        $r11 = interfaceinvoke $r10.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r11.<java.util.concurrent.locks.Lock: void unlock()>();

        throw r2;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public int getLoadState()
    {
        androidx.emoji2.text.EmojiCompat r0;
        int i0;
        java.util.concurrent.locks.ReadWriteLock $r1, $r3;
        java.util.concurrent.locks.Lock $r2, $r4;

        r0 := @this: androidx.emoji2.text.EmojiCompat;

        $r1 = r0.<androidx.emoji2.text.EmojiCompat: java.util.concurrent.locks.ReadWriteLock mInitLock>;

        $r2 = interfaceinvoke $r1.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void lock()>();

        i0 = r0.<androidx.emoji2.text.EmojiCompat: int mLoadState>;

        $r3 = r0.<androidx.emoji2.text.EmojiCompat: java.util.concurrent.locks.ReadWriteLock mInitLock>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        return i0;
    }

    private boolean isInitialized()
    {
        androidx.emoji2.text.EmojiCompat r0;
        int $i0;
        boolean $z0;

        r0 := @this: androidx.emoji2.text.EmojiCompat;

        $i0 = virtualinvoke r0.<androidx.emoji2.text.EmojiCompat: int getLoadState()>();

        if $i0 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isEmojiSpanIndicatorEnabled()
    {
        androidx.emoji2.text.EmojiCompat r0;
        boolean $z0;

        r0 := @this: androidx.emoji2.text.EmojiCompat;

        $z0 = r0.<androidx.emoji2.text.EmojiCompat: boolean mEmojiSpanIndicatorEnabled>;

        return $z0;
    }

    public int getEmojiSpanIndicatorColor()
    {
        androidx.emoji2.text.EmojiCompat r0;
        int $i0;

        r0 := @this: androidx.emoji2.text.EmojiCompat;

        $i0 = r0.<androidx.emoji2.text.EmojiCompat: int mEmojiSpanIndicatorColor>;

        return $i0;
    }

    public static boolean handleOnKeyDown(android.text.Editable, int, android.view.KeyEvent)
    {
        android.text.Editable r0;
        int i0, $i1;
        android.view.KeyEvent r1;
        boolean $z0;

        r0 := @parameter0: android.text.Editable;

        i0 := @parameter1: int;

        r1 := @parameter2: android.view.KeyEvent;

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 < 19 goto label1;

        $z0 = staticinvoke <androidx.emoji2.text.EmojiProcessor: boolean handleOnKeyDown(android.text.Editable,int,android.view.KeyEvent)>(r0, i0, r1);

        return $z0;

     label1:
        return 0;
    }

    public static boolean handleDeleteSurroundingText(android.view.inputmethod.InputConnection, android.text.Editable, int, int, boolean)
    {
        android.view.inputmethod.InputConnection r0;
        android.text.Editable r1;
        int i0, i1, $i2;
        boolean z0, $z1;

        r0 := @parameter0: android.view.inputmethod.InputConnection;

        r1 := @parameter1: android.text.Editable;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        z0 := @parameter4: boolean;

        $i2 = <android.os.Build$VERSION: int SDK_INT>;

        if $i2 < 19 goto label1;

        $z1 = staticinvoke <androidx.emoji2.text.EmojiProcessor: boolean handleDeleteSurroundingText(android.view.inputmethod.InputConnection,android.text.Editable,int,int,boolean)>(r0, r1, i0, i1, z0);

        return $z1;

     label1:
        return 0;
    }

    public boolean hasEmojiGlyph(java.lang.CharSequence)
    {
        androidx.emoji2.text.EmojiCompat r0;
        java.lang.CharSequence r1;
        boolean $z0, $z1;
        androidx.emoji2.text.EmojiCompat$CompatInternal $r3;

        r0 := @this: androidx.emoji2.text.EmojiCompat;

        r1 := @parameter0: java.lang.CharSequence;

        $z0 = specialinvoke r0.<androidx.emoji2.text.EmojiCompat: boolean isInitialized()>();

        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z0, "Not initialized yet");

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "sequence cannot be null");

        $r3 = r0.<androidx.emoji2.text.EmojiCompat: androidx.emoji2.text.EmojiCompat$CompatInternal mHelper>;

        $z1 = virtualinvoke $r3.<androidx.emoji2.text.EmojiCompat$CompatInternal: boolean hasEmojiGlyph(java.lang.CharSequence)>(r1);

        return $z1;
    }

    public boolean hasEmojiGlyph(java.lang.CharSequence, int)
    {
        androidx.emoji2.text.EmojiCompat r0;
        java.lang.CharSequence r1;
        int i0;
        boolean $z0, $z1;
        androidx.emoji2.text.EmojiCompat$CompatInternal $r3;

        r0 := @this: androidx.emoji2.text.EmojiCompat;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<androidx.emoji2.text.EmojiCompat: boolean isInitialized()>();

        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z0, "Not initialized yet");

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "sequence cannot be null");

        $r3 = r0.<androidx.emoji2.text.EmojiCompat: androidx.emoji2.text.EmojiCompat$CompatInternal mHelper>;

        $z1 = virtualinvoke $r3.<androidx.emoji2.text.EmojiCompat$CompatInternal: boolean hasEmojiGlyph(java.lang.CharSequence,int)>(r1, i0);

        return $z1;
    }

    public int getEmojiMatch(java.lang.CharSequence, int)
    {
        androidx.emoji2.text.EmojiCompat r0;
        java.lang.CharSequence r1;
        int i0, $i1;
        boolean $z0;
        androidx.emoji2.text.EmojiCompat$CompatInternal $r3;

        r0 := @this: androidx.emoji2.text.EmojiCompat;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<androidx.emoji2.text.EmojiCompat: boolean isInitialized()>();

        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z0, "Not initialized yet");

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "sequence cannot be null");

        $r3 = r0.<androidx.emoji2.text.EmojiCompat: androidx.emoji2.text.EmojiCompat$CompatInternal mHelper>;

        $i1 = virtualinvoke $r3.<androidx.emoji2.text.EmojiCompat$CompatInternal: int getEmojiMatch(java.lang.CharSequence,int)>(r1, i0);

        return $i1;
    }

    public java.lang.CharSequence process(java.lang.CharSequence)
    {
        androidx.emoji2.text.EmojiCompat r0;
        java.lang.CharSequence r1, $r2;
        int i0, $i1;

        r0 := @this: androidx.emoji2.text.EmojiCompat;

        r1 := @parameter0: java.lang.CharSequence;

        if r1 != null goto label1;

        $i1 = 0;

        goto label2;

     label1:
        $i1 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

     label2:
        i0 = $i1;

        $r2 = virtualinvoke r0.<androidx.emoji2.text.EmojiCompat: java.lang.CharSequence process(java.lang.CharSequence,int,int)>(r1, 0, i0);

        return $r2;
    }

    public java.lang.CharSequence process(java.lang.CharSequence, int, int)
    {
        androidx.emoji2.text.EmojiCompat r0;
        java.lang.CharSequence r1, $r2;
        int i0, i1;

        r0 := @this: androidx.emoji2.text.EmojiCompat;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = virtualinvoke r0.<androidx.emoji2.text.EmojiCompat: java.lang.CharSequence process(java.lang.CharSequence,int,int,int)>(r1, i0, i1, 2147483647);

        return $r2;
    }

    public java.lang.CharSequence process(java.lang.CharSequence, int, int, int)
    {
        androidx.emoji2.text.EmojiCompat r0;
        java.lang.CharSequence r1, $r2;
        int i0, i1, i2;

        r0 := @this: androidx.emoji2.text.EmojiCompat;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r2 = virtualinvoke r0.<androidx.emoji2.text.EmojiCompat: java.lang.CharSequence process(java.lang.CharSequence,int,int,int,int)>(r1, i0, i1, i2, 0);

        return $r2;
    }

    public java.lang.CharSequence process(java.lang.CharSequence, int, int, int, int)
    {
        androidx.emoji2.text.EmojiCompat r0;
        java.lang.CharSequence r1, $r3;
        int i0, i1, i2, i3, $i7, $i8, $i9;
        boolean $z0, $z1, $z2, $z3, z4;
        androidx.emoji2.text.EmojiCompat$CompatInternal $r2;

        r0 := @this: androidx.emoji2.text.EmojiCompat;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $z0 = specialinvoke r0.<androidx.emoji2.text.EmojiCompat: boolean isInitialized()>();

        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z0, "Not initialized yet");

        staticinvoke <androidx.core.util.Preconditions: int checkArgumentNonnegative(int,java.lang.String)>(i0, "start cannot be negative");

        staticinvoke <androidx.core.util.Preconditions: int checkArgumentNonnegative(int,java.lang.String)>(i1, "end cannot be negative");

        staticinvoke <androidx.core.util.Preconditions: int checkArgumentNonnegative(int,java.lang.String)>(i2, "maxEmojiCount cannot be negative");

        if i0 > i1 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        staticinvoke <androidx.core.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "start should be <= than end");

        if r1 != null goto label03;

        return null;

     label03:
        $i7 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if i0 > $i7 goto label04;

        $z2 = 1;

        goto label05;

     label04:
        $z2 = 0;

     label05:
        staticinvoke <androidx.core.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z2, "start should be < than charSequence length");

        $i8 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if i1 > $i8 goto label06;

        $z3 = 1;

        goto label07;

     label06:
        $z3 = 0;

     label07:
        staticinvoke <androidx.core.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z3, "end should be < than charSequence length");

        $i9 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if $i9 == 0 goto label08;

        if i0 != i1 goto label09;

     label08:
        return r1;

     label09:
        tableswitch(i3)
        {
            case 0: goto label12;
            case 1: goto label10;
            case 2: goto label11;
            default: goto label12;
        };

     label10:
        z4 = 1;

        goto label13;

     label11:
        z4 = 0;

        goto label13;

     label12:
        z4 = r0.<androidx.emoji2.text.EmojiCompat: boolean mReplaceAll>;

     label13:
        $r2 = r0.<androidx.emoji2.text.EmojiCompat: androidx.emoji2.text.EmojiCompat$CompatInternal mHelper>;

        $r3 = virtualinvoke $r2.<androidx.emoji2.text.EmojiCompat$CompatInternal: java.lang.CharSequence process(java.lang.CharSequence,int,int,int,boolean)>(r1, i0, i1, i2, z4);

        return $r3;
    }

    public java.lang.String getAssetSignature()
    {
        androidx.emoji2.text.EmojiCompat r0;
        boolean $z0;
        androidx.emoji2.text.EmojiCompat$CompatInternal $r1;
        java.lang.String $r2;

        r0 := @this: androidx.emoji2.text.EmojiCompat;

        $z0 = specialinvoke r0.<androidx.emoji2.text.EmojiCompat: boolean isInitialized()>();

        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z0, "Not initialized yet");

        $r1 = r0.<androidx.emoji2.text.EmojiCompat: androidx.emoji2.text.EmojiCompat$CompatInternal mHelper>;

        $r2 = virtualinvoke $r1.<androidx.emoji2.text.EmojiCompat$CompatInternal: java.lang.String getAssetSignature()>();

        return $r2;
    }

    public void updateEditorInfo(android.view.inputmethod.EditorInfo)
    {
        androidx.emoji2.text.EmojiCompat r0;
        android.view.inputmethod.EditorInfo r1;
        boolean $z0;
        android.os.Bundle $r2, $r4;
        androidx.emoji2.text.EmojiCompat$CompatInternal $r3;

        r0 := @this: androidx.emoji2.text.EmojiCompat;

        r1 := @parameter0: android.view.inputmethod.EditorInfo;

        $z0 = specialinvoke r0.<androidx.emoji2.text.EmojiCompat: boolean isInitialized()>();

        if $z0 == 0 goto label1;

        if r1 != null goto label2;

     label1:
        return;

     label2:
        $r2 = r1.<android.view.inputmethod.EditorInfo: android.os.Bundle extras>;

        if $r2 != null goto label3;

        $r4 = new android.os.Bundle;

        specialinvoke $r4.<android.os.Bundle: void <init>()>();

        r1.<android.view.inputmethod.EditorInfo: android.os.Bundle extras> = $r4;

     label3:
        $r3 = r0.<androidx.emoji2.text.EmojiCompat: androidx.emoji2.text.EmojiCompat$CompatInternal mHelper>;

        virtualinvoke $r3.<androidx.emoji2.text.EmojiCompat$CompatInternal: void updateEditorInfoAttrs(android.view.inputmethod.EditorInfo)>(r1);

        return;
    }

    static androidx.emoji2.text.EmojiCompat$GlyphChecker access$000(androidx.emoji2.text.EmojiCompat)
    {
        androidx.emoji2.text.EmojiCompat r0;
        androidx.emoji2.text.EmojiCompat$GlyphChecker $r1;

        r0 := @parameter0: androidx.emoji2.text.EmojiCompat;

        $r1 = r0.<androidx.emoji2.text.EmojiCompat: androidx.emoji2.text.EmojiCompat$GlyphChecker mGlyphChecker>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Object $r0, $r1;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <androidx.emoji2.text.EmojiCompat: java.lang.Object INSTANCE_LOCK> = $r0;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        <androidx.emoji2.text.EmojiCompat: java.lang.Object CONFIG_LOCK> = $r1;

        return;
    }

