androidx.room.compiler.processing.SyntheticProcessorImpl
<androidx.room.compiler.processing.SyntheticProcessorImpl: kotlin.Result result>
<androidx.room.compiler.processing.SyntheticProcessorImpl: java.util.List invocationInstances>
<androidx.room.compiler.processing.SyntheticProcessorImpl: java.util.List nextRunHandlers>
    public void <init>(java.util.List)
    {
        androidx.room.compiler.processing.SyntheticProcessorImpl r0;
        java.util.List r1, $r3, $r5;
        java.util.ArrayList $r2;
        java.util.Collection $r4;

        r0 := @this: androidx.room.compiler.processing.SyntheticProcessorImpl;

        r1 := @parameter0: java.util.List;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "handlers");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = (java.util.List) $r2;

        r0.<androidx.room.compiler.processing.SyntheticProcessorImpl: java.util.List invocationInstances> = $r3;

        $r4 = (java.util.Collection) r1;

        $r5 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List toMutableList(java.util.Collection)>($r4);

        r0.<androidx.room.compiler.processing.SyntheticProcessorImpl: java.util.List nextRunHandlers> = $r5;

        return;
    }

    public java.util.List getInvocationInstances()
    {
        androidx.room.compiler.processing.SyntheticProcessorImpl r0;
        java.util.List $r1;

        r0 := @this: androidx.room.compiler.processing.SyntheticProcessorImpl;

        $r1 = r0.<androidx.room.compiler.processing.SyntheticProcessorImpl: java.util.List invocationInstances>;

        return $r1;
    }

    public final java.util.List processingSteps$room_compiler_processing_testing()
    {
        androidx.room.compiler.processing.SyntheticProcessorImpl r0;
        androidx.room.compiler.processing.SyntheticProcessorImpl$processingSteps$1 $r1;
        java.util.List $r2;

        r0 := @this: androidx.room.compiler.processing.SyntheticProcessorImpl;

        $r1 = new androidx.room.compiler.processing.SyntheticProcessorImpl$processingSteps$1;

        specialinvoke $r1.<androidx.room.compiler.processing.SyntheticProcessorImpl$processingSteps$1: void <init>()>();

        $r2 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r1);

        return $r2;
    }

    public final void postRound$room_compiler_processing_testing(androidx.room.compiler.processing.XProcessingEnv, androidx.room.compiler.processing.XRoundEnv)
    {
        androidx.room.compiler.processing.SyntheticProcessorImpl r0;
        androidx.room.compiler.processing.XProcessingEnv r1;
        androidx.room.compiler.processing.XRoundEnv r2;
        boolean $z0;
        androidx.room.compiler.processing.util.XTestInvocation $r3;

        r0 := @this: androidx.room.compiler.processing.SyntheticProcessorImpl;

        r1 := @parameter0: androidx.room.compiler.processing.XProcessingEnv;

        r2 := @parameter1: androidx.room.compiler.processing.XRoundEnv;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "env");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "round");

        $z0 = virtualinvoke r0.<androidx.room.compiler.processing.SyntheticProcessorImpl: boolean canRunAnotherRound()>();

        if $z0 == 0 goto label1;

        $r3 = new androidx.room.compiler.processing.util.XTestInvocation;

        specialinvoke $r3.<androidx.room.compiler.processing.util.XTestInvocation: void <init>(androidx.room.compiler.processing.XProcessingEnv,androidx.room.compiler.processing.XRoundEnv)>(r1, r2);

        virtualinvoke r0.<androidx.room.compiler.processing.SyntheticProcessorImpl: void runNextRound(androidx.room.compiler.processing.util.XTestInvocation)>($r3);

     label1:
        return;
    }

    public boolean expectsAnotherRound()
    {
        androidx.room.compiler.processing.SyntheticProcessorImpl r0;
        java.util.List $r1;
        java.util.Collection $r2;
        boolean $z0, $z1;

        r0 := @this: androidx.room.compiler.processing.SyntheticProcessorImpl;

        $r1 = r0.<androidx.room.compiler.processing.SyntheticProcessorImpl: java.util.List nextRunHandlers>;

        $r2 = (java.util.Collection) $r1;

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public final boolean canRunAnotherRound()
    {
        androidx.room.compiler.processing.SyntheticProcessorImpl r0;
        kotlin.Result $r1;
        boolean $z0;
        java.lang.Object $r2;
        java.lang.Throwable $r3;

        r0 := @this: androidx.room.compiler.processing.SyntheticProcessorImpl;

        $r1 = r0.<androidx.room.compiler.processing.SyntheticProcessorImpl: kotlin.Result result>;

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<kotlin.Result: java.lang.Object unbox-impl()>();

        $r3 = staticinvoke <kotlin.Result: java.lang.Throwable exceptionOrNull-impl(java.lang.Object)>($r2);

        goto label2;

     label1:
        $r3 = null;

     label2:
        if $r3 == null goto label3;

        return 0;

     label3:
        $z0 = virtualinvoke r0.<androidx.room.compiler.processing.SyntheticProcessorImpl: boolean expectsAnotherRound()>();

        return $z0;
    }

    public java.lang.Throwable getProcessingException()
    {
        androidx.room.compiler.processing.SyntheticProcessorImpl r0;
        java.lang.Object r1;
        java.lang.Throwable r2, r3, $r6, $r8;
        kotlin.Result $r4;
        java.lang.AssertionError $r5, $r7;
        boolean $z1;

        r0 := @this: androidx.room.compiler.processing.SyntheticProcessorImpl;

        $r4 = r0.<androidx.room.compiler.processing.SyntheticProcessorImpl: kotlin.Result result>;

        if $r4 == null goto label1;

        goto label2;

     label1:
        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>("processor didn\'t run");

        $r6 = (java.lang.Throwable) $r5;

        return $r6;

     label2:
        r1 = virtualinvoke $r4.<kotlin.Result: java.lang.Object unbox-impl()>();

        r2 = staticinvoke <kotlin.Result: java.lang.Throwable exceptionOrNull-impl(java.lang.Object)>(r1);

        if r2 == null goto label3;

        r3 = r2;

        return r3;

     label3:
        $z1 = staticinvoke <kotlin.Result: boolean isFailure-impl(java.lang.Object)>(r1);

        if $z1 == 0 goto label4;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>("processor failed but no exception is reported");

        $r8 = (java.lang.Throwable) $r7;

        return $r8;

     label4:
        return null;
    }

    public final void runNextRound(androidx.room.compiler.processing.util.XTestInvocation)
    {
        androidx.room.compiler.processing.SyntheticProcessorImpl r0, r4;
        androidx.room.compiler.processing.util.XTestInvocation r1;
        kotlin.jvm.functions.Function1 r2;
        java.lang.Throwable r3, $r16;
        java.util.List $r5, $r7, $r9;
        java.util.Collection $r6;
        boolean $z0, $z2;
        java.lang.Object $r8, $r18, $r20;
        kotlin.Result$Companion $r10, $r17;
        kotlin.Unit $r12;
        kotlin.Result $r13;
        java.lang.IllegalStateException $r14;
        java.lang.String $r15, $r19;

        r0 := @this: androidx.room.compiler.processing.SyntheticProcessorImpl;

        r1 := @parameter0: androidx.room.compiler.processing.util.XTestInvocation;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "invocation");

        $r5 = r0.<androidx.room.compiler.processing.SyntheticProcessorImpl: java.util.List nextRunHandlers>;

        $r6 = (java.util.Collection) $r5;

        $z0 = interfaceinvoke $r6.<java.util.Collection: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        if $z2 != 0 goto label3;

        $r19 = "Called run next round w/o a runner to handle it. Looks like a testing infra bug";

        $r14 = new java.lang.IllegalStateException;

        $r15 = virtualinvoke $r19.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r15);

        throw $r14;

     label3:
        $r7 = r0.<androidx.room.compiler.processing.SyntheticProcessorImpl: java.util.List nextRunHandlers>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object remove(int)>(0);

        r2 = (kotlin.jvm.functions.Function1) $r8;

        $r9 = virtualinvoke r0.<androidx.room.compiler.processing.SyntheticProcessorImpl: java.util.List getInvocationInstances()>();

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>(r1);

        r4 = r0;

     label4:
        $r10 = <kotlin.Result: kotlin.Result$Companion Companion>;

        interfaceinvoke r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r1);

        virtualinvoke r1.<androidx.room.compiler.processing.util.XTestInvocation: void dispose()>();

        $r12 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r20 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r12);

     label5:
        goto label7;

     label6:
        $r16 := @caughtexception;

        r3 = $r16;

        $r17 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r18 = staticinvoke <kotlin.ResultKt: java.lang.Object createFailure(java.lang.Throwable)>(r3);

        $r20 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r18);

     label7:
        $r13 = staticinvoke <kotlin.Result: kotlin.Result box-impl(java.lang.Object)>($r20);

        r4.<androidx.room.compiler.processing.SyntheticProcessorImpl: kotlin.Result result> = $r13;

        return;

        catch java.lang.Throwable from label4 to label5 with label6;
    }

androidx.room.compiler.processing.SyntheticProcessorImpl$processingSteps$1
    void <init>()
    {
        androidx.room.compiler.processing.SyntheticProcessorImpl$processingSteps$1 r0;

        r0 := @this: androidx.room.compiler.processing.SyntheticProcessorImpl$processingSteps$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.util.Set annotations()
    {
        androidx.room.compiler.processing.SyntheticProcessorImpl$processingSteps$1 r0;
        java.util.Set $r1;

        r0 := @this: androidx.room.compiler.processing.SyntheticProcessorImpl$processingSteps$1;

        $r1 = staticinvoke <kotlin.collections.SetsKt: java.util.Set setOf(java.lang.Object)>("*");

        return $r1;
    }

    public java.util.Set process(androidx.room.compiler.processing.XProcessingEnv, java.util.Map, boolean)
    {
        androidx.room.compiler.processing.SyntheticProcessorImpl$processingSteps$1 r0;
        androidx.room.compiler.processing.XProcessingEnv r1;
        java.util.Map r2;
        boolean z0;
        java.util.Set $r3;

        r0 := @this: androidx.room.compiler.processing.SyntheticProcessorImpl$processingSteps$1;

        r1 := @parameter0: androidx.room.compiler.processing.XProcessingEnv;

        r2 := @parameter1: java.util.Map;

        z0 := @parameter2: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "env");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "elementsByAnnotation");

        $r3 = staticinvoke <kotlin.collections.SetsKt: java.util.Set emptySet()>();

        return $r3;
    }

