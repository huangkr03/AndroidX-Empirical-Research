androidx.slice.compat.SliceProviderCompat
<androidx.slice.compat.SliceProviderCompat: java.lang.String PERMS_PREFIX>
<androidx.slice.compat.SliceProviderCompat: java.lang.String TAG>
<androidx.slice.compat.SliceProviderCompat: java.lang.String DATA_PREFIX>
<androidx.slice.compat.SliceProviderCompat: java.lang.String ALL_FILES>
<androidx.slice.compat.SliceProviderCompat: long SLICE_BIND_ANR>
<androidx.slice.compat.SliceProviderCompat: java.lang.String METHOD_SLICE>
<androidx.slice.compat.SliceProviderCompat: java.lang.String METHOD_MAP_INTENT>
<androidx.slice.compat.SliceProviderCompat: java.lang.String METHOD_PIN>
<androidx.slice.compat.SliceProviderCompat: java.lang.String METHOD_UNPIN>
<androidx.slice.compat.SliceProviderCompat: java.lang.String METHOD_GET_PINNED_SPECS>
<androidx.slice.compat.SliceProviderCompat: java.lang.String METHOD_MAP_ONLY_INTENT>
<androidx.slice.compat.SliceProviderCompat: java.lang.String METHOD_GET_DESCENDANTS>
<androidx.slice.compat.SliceProviderCompat: java.lang.String METHOD_CHECK_PERMISSION>
<androidx.slice.compat.SliceProviderCompat: java.lang.String METHOD_GRANT_PERMISSION>
<androidx.slice.compat.SliceProviderCompat: java.lang.String METHOD_REVOKE_PERMISSION>
<androidx.slice.compat.SliceProviderCompat: java.lang.String EXTRA_BIND_URI>
<androidx.slice.compat.SliceProviderCompat: java.lang.String EXTRA_INTENT>
<androidx.slice.compat.SliceProviderCompat: java.lang.String EXTRA_SLICE>
<androidx.slice.compat.SliceProviderCompat: java.lang.String EXTRA_SUPPORTED_SPECS>
<androidx.slice.compat.SliceProviderCompat: java.lang.String EXTRA_SUPPORTED_SPECS_REVS>
<androidx.slice.compat.SliceProviderCompat: java.lang.String EXTRA_PKG>
<androidx.slice.compat.SliceProviderCompat: java.lang.String EXTRA_PROVIDER_PKG>
<androidx.slice.compat.SliceProviderCompat: java.lang.String EXTRA_SLICE_DESCENDANTS>
<androidx.slice.compat.SliceProviderCompat: java.lang.String EXTRA_UID>
<androidx.slice.compat.SliceProviderCompat: java.lang.String EXTRA_PID>
<androidx.slice.compat.SliceProviderCompat: java.lang.String EXTRA_RESULT>
<androidx.slice.compat.SliceProviderCompat: java.lang.String ARG_SUPPORTS_VERSIONED_PARCELABLE>
<androidx.slice.compat.SliceProviderCompat: android.os.Handler mHandler>
<androidx.slice.compat.SliceProviderCompat: android.content.Context mContext>
<androidx.slice.compat.SliceProviderCompat: java.lang.String mCallback>
<androidx.slice.compat.SliceProviderCompat: androidx.slice.SliceProvider mProvider>
<androidx.slice.compat.SliceProviderCompat: androidx.slice.compat.CompatPinnedList mPinnedList>
<androidx.slice.compat.SliceProviderCompat: androidx.slice.compat.CompatPermissionManager mPermissionManager>
<androidx.slice.compat.SliceProviderCompat: java.lang.Runnable mAnr>
    public void <init>(androidx.slice.SliceProvider, androidx.slice.compat.CompatPermissionManager, android.content.Context)
    {
        androidx.slice.compat.SliceProviderCompat r0;
        androidx.slice.SliceProvider r1;
        androidx.slice.compat.CompatPermissionManager r2;
        android.content.Context r3, $r14, $r17;
        java.lang.String r4, $r12;
        android.content.SharedPreferences r5;
        android.os.Handler $r6;
        android.os.Looper $r7;
        androidx.slice.compat.SliceProviderCompat$1 $r8;
        java.lang.StringBuilder $r9, $r10, $r13;
        java.lang.Class $r11;
        java.util.Set $r15, r21;
        boolean $z0;
        androidx.slice.compat.CompatPinnedList $r16;
        android.support.v4.util.ArraySet $r18, r22;
        android.content.SharedPreferences$Editor $r19, $r20;

        r0 := @this: androidx.slice.compat.SliceProviderCompat;

        r1 := @parameter0: androidx.slice.SliceProvider;

        r2 := @parameter1: androidx.slice.compat.CompatPermissionManager;

        r3 := @parameter2: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r6 = new android.os.Handler;

        $r7 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $r6.<android.os.Handler: void <init>(android.os.Looper)>($r7);

        r0.<androidx.slice.compat.SliceProviderCompat: android.os.Handler mHandler> = $r6;

        $r8 = new androidx.slice.compat.SliceProviderCompat$1;

        specialinvoke $r8.<androidx.slice.compat.SliceProviderCompat$1: void <init>(androidx.slice.compat.SliceProviderCompat)>(r0);

        r0.<androidx.slice.compat.SliceProviderCompat: java.lang.Runnable mAnr> = $r8;

        r0.<androidx.slice.compat.SliceProviderCompat: androidx.slice.SliceProvider mProvider> = r1;

        r0.<androidx.slice.compat.SliceProviderCompat: android.content.Context mContext> = r3;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("slice_data_");

        $r11 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        r4 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = r0.<androidx.slice.compat.SliceProviderCompat: android.content.Context mContext>;

        r5 = virtualinvoke $r14.<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>("slice_data_all_slice_files", 0);

        $r15 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        r21 = interfaceinvoke r5.<android.content.SharedPreferences: java.util.Set getStringSet(java.lang.String,java.util.Set)>("slice_data_all_slice_files", $r15);

        $z0 = interfaceinvoke r21.<java.util.Set: boolean contains(java.lang.Object)>(r4);

        if $z0 != 0 goto label1;

        $r18 = new android.support.v4.util.ArraySet;

        specialinvoke $r18.<android.support.v4.util.ArraySet: void <init>(java.util.Collection)>(r21);

        r22 = $r18;

        interfaceinvoke r22.<java.util.Set: boolean add(java.lang.Object)>(r4);

        $r19 = interfaceinvoke r5.<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>();

        $r20 = interfaceinvoke $r19.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putStringSet(java.lang.String,java.util.Set)>("slice_data_all_slice_files", r22);

        interfaceinvoke $r20.<android.content.SharedPreferences$Editor: boolean commit()>();

     label1:
        $r16 = new androidx.slice.compat.CompatPinnedList;

        $r17 = r0.<androidx.slice.compat.SliceProviderCompat: android.content.Context mContext>;

        specialinvoke $r16.<androidx.slice.compat.CompatPinnedList: void <init>(android.content.Context,java.lang.String)>($r17, r4);

        r0.<androidx.slice.compat.SliceProviderCompat: androidx.slice.compat.CompatPinnedList mPinnedList> = $r16;

        r0.<androidx.slice.compat.SliceProviderCompat: androidx.slice.compat.CompatPermissionManager mPermissionManager> = r2;

        return;
    }

    private android.content.Context getContext()
    {
        androidx.slice.compat.SliceProviderCompat r0;
        android.content.Context $r1;

        r0 := @this: androidx.slice.compat.SliceProviderCompat;

        $r1 = r0.<androidx.slice.compat.SliceProviderCompat: android.content.Context mContext>;

        return $r1;
    }

    public java.lang.String getCallingPackage()
    {
        androidx.slice.compat.SliceProviderCompat r0;
        androidx.slice.SliceProvider $r1;
        java.lang.String $r2;

        r0 := @this: androidx.slice.compat.SliceProviderCompat;

        $r1 = r0.<androidx.slice.compat.SliceProviderCompat: androidx.slice.SliceProvider mProvider>;

        $r2 = virtualinvoke $r1.<androidx.slice.SliceProvider: java.lang.String getCallingPackage()>();

        return $r2;
    }

    public android.os.Bundle call(java.lang.String, java.lang.String, android.os.Bundle)
    {
        androidx.slice.compat.SliceProviderCompat r0;
        java.lang.String r1, r2, $r24, $r35, $r36, $r42, $r44, r67, r69, r79, r81;
        android.os.Bundle r3, $r11, $r14, $r18, $r31, $r34, $r43, r52, $r54, r57, $r61, r64, r71, r74, r77;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        android.os.Parcelable $r4, $r7, $r10, $r13, $r17, $r25, $r27, $r29, $r32, $r41, $r53, $r60;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        androidx.slice.compat.CompatPermissionManager $r5, $r8, $r12;
        java.lang.SecurityException $r6, $r9;
        java.util.ArrayList $r15;
        java.util.Collection $r16;
        androidx.slice.compat.CompatPinnedList $r19, $r26, $r28;
        java.lang.IllegalStateException $r20;
        java.lang.StringBuilder $r21, $r22, $r23;
        androidx.slice.SliceProvider $r30, $r33;
        android.net.Uri r49, r56, r63, r65, r68, r70, r73, r75, r78, r80;
        java.util.Set r50, r58, r66;
        androidx.slice.Slice r51, r59;
        android.content.Intent r55, r62;
        android.support.v4.util.ArraySet r72;

        r0 := @this: androidx.slice.compat.SliceProviderCompat;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Bundle;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("bind_slice");

        if $z0 == 0 goto label07;

        $r41 = virtualinvoke r3.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("slice_uri");

        r49 = (android.net.Uri) $r41;

        r50 = staticinvoke <androidx.slice.compat.SliceProviderCompat: java.util.Set getSpecs(android.os.Bundle)>(r3);

        $r42 = virtualinvoke r0.<androidx.slice.compat.SliceProviderCompat: java.lang.String getCallingPackage()>();

        r51 = specialinvoke r0.<androidx.slice.compat.SliceProviderCompat: androidx.slice.Slice handleBindSlice(android.net.Uri,java.util.Set,java.lang.String)>(r49, r50, $r42);

        $r43 = new android.os.Bundle;

        specialinvoke $r43.<android.os.Bundle: void <init>()>();

        r52 = $r43;

        $r44 = "supports_versioned_parcelable";

        $z13 = virtualinvoke $r44.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z13 == 0 goto label03;

        if r51 == null goto label01;

        $r53 = staticinvoke <androidx.versionedparcelable.ParcelUtils: android.os.Parcelable toParcelable(androidx.versionedparcelable.VersionedParcelable)>(r51);

        goto label02;

     label01:
        $r53 = null;

     label02:
        virtualinvoke r52.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("slice", $r53);

        goto label06;

     label03:
        if r51 == null goto label04;

        $r54 = virtualinvoke r51.<androidx.slice.Slice: android.os.Bundle toBundle()>();

        goto label05;

     label04:
        $r54 = null;

     label05:
        virtualinvoke r52.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("slice", $r54);

     label06:
        return r52;

     label07:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("map_slice");

        if $z1 == 0 goto label16;

        $r32 = virtualinvoke r3.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("slice_intent");

        r55 = (android.content.Intent) $r32;

        $r33 = r0.<androidx.slice.compat.SliceProviderCompat: androidx.slice.SliceProvider mProvider>;

        r56 = virtualinvoke $r33.<androidx.slice.SliceProvider: android.net.Uri onMapIntentToUri(android.content.Intent)>(r55);

        $r34 = new android.os.Bundle;

        specialinvoke $r34.<android.os.Bundle: void <init>()>();

        r57 = $r34;

        if r56 == null goto label14;

        r58 = staticinvoke <androidx.slice.compat.SliceProviderCompat: java.util.Set getSpecs(android.os.Bundle)>(r3);

        $r35 = virtualinvoke r0.<androidx.slice.compat.SliceProviderCompat: java.lang.String getCallingPackage()>();

        r59 = specialinvoke r0.<androidx.slice.compat.SliceProviderCompat: androidx.slice.Slice handleBindSlice(android.net.Uri,java.util.Set,java.lang.String)>(r56, r58, $r35);

        $r36 = "supports_versioned_parcelable";

        $z12 = virtualinvoke $r36.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z12 == 0 goto label10;

        if r59 == null goto label08;

        $r60 = staticinvoke <androidx.versionedparcelable.ParcelUtils: android.os.Parcelable toParcelable(androidx.versionedparcelable.VersionedParcelable)>(r59);

        goto label09;

     label08:
        $r60 = null;

     label09:
        virtualinvoke r57.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("slice", $r60);

        goto label13;

     label10:
        if r59 == null goto label11;

        $r61 = virtualinvoke r59.<androidx.slice.Slice: android.os.Bundle toBundle()>();

        goto label12;

     label11:
        $r61 = null;

     label12:
        virtualinvoke r57.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("slice", $r61);

     label13:
        goto label15;

     label14:
        virtualinvoke r57.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("slice", null);

     label15:
        return r57;

     label16:
        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("map_only");

        if $z2 == 0 goto label17;

        $r29 = virtualinvoke r3.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("slice_intent");

        r62 = (android.content.Intent) $r29;

        $r30 = r0.<androidx.slice.compat.SliceProviderCompat: androidx.slice.SliceProvider mProvider>;

        r63 = virtualinvoke $r30.<androidx.slice.SliceProvider: android.net.Uri onMapIntentToUri(android.content.Intent)>(r62);

        $r31 = new android.os.Bundle;

        specialinvoke $r31.<android.os.Bundle: void <init>()>();

        r64 = $r31;

        virtualinvoke r64.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("slice", r63);

        return r64;

     label17:
        $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("pin_slice");

        if $z3 == 0 goto label19;

        $r27 = virtualinvoke r3.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("slice_uri");

        r65 = (android.net.Uri) $r27;

        r66 = staticinvoke <androidx.slice.compat.SliceProviderCompat: java.util.Set getSpecs(android.os.Bundle)>(r3);

        r67 = virtualinvoke r3.<android.os.Bundle: java.lang.String getString(java.lang.String)>("pkg");

        $r28 = r0.<androidx.slice.compat.SliceProviderCompat: androidx.slice.compat.CompatPinnedList mPinnedList>;

        $z11 = virtualinvoke $r28.<androidx.slice.compat.CompatPinnedList: boolean addPin(android.net.Uri,java.lang.String,java.util.Set)>(r65, r67, r66);

        if $z11 == 0 goto label18;

        specialinvoke r0.<androidx.slice.compat.SliceProviderCompat: void handleSlicePinned(android.net.Uri)>(r65);

     label18:
        return null;

     label19:
        $z4 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("unpin_slice");

        if $z4 == 0 goto label21;

        $r25 = virtualinvoke r3.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("slice_uri");

        r68 = (android.net.Uri) $r25;

        r69 = virtualinvoke r3.<android.os.Bundle: java.lang.String getString(java.lang.String)>("pkg");

        $r26 = r0.<androidx.slice.compat.SliceProviderCompat: androidx.slice.compat.CompatPinnedList mPinnedList>;

        $z10 = virtualinvoke $r26.<androidx.slice.compat.CompatPinnedList: boolean removePin(android.net.Uri,java.lang.String)>(r68, r69);

        if $z10 == 0 goto label20;

        specialinvoke r0.<androidx.slice.compat.SliceProviderCompat: void handleSliceUnpinned(android.net.Uri)>(r68);

     label20:
        return null;

     label21:
        $z5 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("get_specs");

        if $z5 == 0 goto label23;

        $r17 = virtualinvoke r3.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("slice_uri");

        r70 = (android.net.Uri) $r17;

        $r18 = new android.os.Bundle;

        specialinvoke $r18.<android.os.Bundle: void <init>()>();

        r71 = $r18;

        $r19 = r0.<androidx.slice.compat.SliceProviderCompat: androidx.slice.compat.CompatPinnedList mPinnedList>;

        r72 = virtualinvoke $r19.<androidx.slice.compat.CompatPinnedList: android.support.v4.util.ArraySet getSpecs(android.net.Uri)>(r70);

        $i5 = virtualinvoke r72.<android.support.v4.util.ArraySet: int size()>();

        if $i5 != 0 goto label22;

        $r20 = new java.lang.IllegalStateException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r70);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not pinned");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r24);

        throw $r20;

     label22:
        staticinvoke <androidx.slice.compat.SliceProviderCompat: void addSpecs(android.os.Bundle,java.util.Set)>(r71, r72);

        return r71;

     label23:
        $z6 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("get_descendants");

        if $z6 == 0 goto label24;

        $r13 = virtualinvoke r3.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("slice_uri");

        r73 = (android.net.Uri) $r13;

        $r14 = new android.os.Bundle;

        specialinvoke $r14.<android.os.Bundle: void <init>()>();

        r74 = $r14;

        $r15 = new java.util.ArrayList;

        $r16 = specialinvoke r0.<androidx.slice.compat.SliceProviderCompat: java.util.Collection handleGetDescendants(android.net.Uri)>(r73);

        specialinvoke $r15.<java.util.ArrayList: void <init>(java.util.Collection)>($r16);

        virtualinvoke r74.<android.os.Bundle: void putParcelableArrayList(java.lang.String,java.util.ArrayList)>("slice_descendants", $r15);

        return r74;

     label24:
        $z7 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("check_perms");

        if $z7 == 0 goto label25;

        $r10 = virtualinvoke r3.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("slice_uri");

        r75 = (android.net.Uri) $r10;

        virtualinvoke r3.<android.os.Bundle: java.lang.String getString(java.lang.String)>("pkg");

        i6 = virtualinvoke r3.<android.os.Bundle: int getInt(java.lang.String)>("pid");

        i7 = virtualinvoke r3.<android.os.Bundle: int getInt(java.lang.String)>("uid");

        $r11 = new android.os.Bundle;

        specialinvoke $r11.<android.os.Bundle: void <init>()>();

        r77 = $r11;

        $r12 = r0.<androidx.slice.compat.SliceProviderCompat: androidx.slice.compat.CompatPermissionManager mPermissionManager>;

        $i4 = virtualinvoke $r12.<androidx.slice.compat.CompatPermissionManager: int checkSlicePermission(android.net.Uri,int,int)>(r75, i6, i7);

        virtualinvoke r77.<android.os.Bundle: void putInt(java.lang.String,int)>("result", $i4);

        return r77;

     label25:
        $z8 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("grant_perms");

        if $z8 == 0 goto label27;

        $r7 = virtualinvoke r3.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("slice_uri");

        r78 = (android.net.Uri) $r7;

        r79 = virtualinvoke r3.<android.os.Bundle: java.lang.String getString(java.lang.String)>("pkg");

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i3 = staticinvoke <android.os.Process: int myUid()>();

        if $i2 == $i3 goto label26;

        $r9 = new java.lang.SecurityException;

        specialinvoke $r9.<java.lang.SecurityException: void <init>(java.lang.String)>("Only the owning process can manage slice permissions");

        throw $r9;

     label26:
        $r8 = r0.<androidx.slice.compat.SliceProviderCompat: androidx.slice.compat.CompatPermissionManager mPermissionManager>;

        virtualinvoke $r8.<androidx.slice.compat.CompatPermissionManager: void grantSlicePermission(android.net.Uri,java.lang.String)>(r78, r79);

        goto label29;

     label27:
        $z9 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("revoke_perms");

        if $z9 == 0 goto label29;

        $r4 = virtualinvoke r3.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("slice_uri");

        r80 = (android.net.Uri) $r4;

        r81 = virtualinvoke r3.<android.os.Bundle: java.lang.String getString(java.lang.String)>("pkg");

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i1 = staticinvoke <android.os.Process: int myUid()>();

        if $i0 == $i1 goto label28;

        $r6 = new java.lang.SecurityException;

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>("Only the owning process can manage slice permissions");

        throw $r6;

     label28:
        $r5 = r0.<androidx.slice.compat.SliceProviderCompat: androidx.slice.compat.CompatPermissionManager mPermissionManager>;

        virtualinvoke $r5.<androidx.slice.compat.CompatPermissionManager: void revokeSlicePermission(android.net.Uri,java.lang.String)>(r80, r81);

     label29:
        return null;
    }

    private java.util.Collection handleGetDescendants(android.net.Uri)
    {
        androidx.slice.compat.SliceProviderCompat r0;
        android.net.Uri r1;
        androidx.slice.SliceProvider $r2;
        java.util.Collection $r3;

        r0 := @this: androidx.slice.compat.SliceProviderCompat;

        r1 := @parameter0: android.net.Uri;

        r0.<androidx.slice.compat.SliceProviderCompat: java.lang.String mCallback> = "onGetSliceDescendants";

        $r2 = r0.<androidx.slice.compat.SliceProviderCompat: androidx.slice.SliceProvider mProvider>;

        $r3 = virtualinvoke $r2.<androidx.slice.SliceProvider: java.util.Collection onGetSliceDescendants(android.net.Uri)>(r1);

        return $r3;
    }

    private void handleSlicePinned(android.net.Uri)
    {
        androidx.slice.compat.SliceProviderCompat r0;
        android.net.Uri r1;
        java.lang.Throwable r2, $r9;
        java.lang.Runnable $r3, $r7, $r10;
        android.os.Handler $r4, $r8, $r11;
        androidx.slice.SliceProvider $r5, $r6;

        r0 := @this: androidx.slice.compat.SliceProviderCompat;

        r1 := @parameter0: android.net.Uri;

        r0.<androidx.slice.compat.SliceProviderCompat: java.lang.String mCallback> = "onSlicePinned";

        $r4 = r0.<androidx.slice.compat.SliceProviderCompat: android.os.Handler mHandler>;

        $r3 = r0.<androidx.slice.compat.SliceProviderCompat: java.lang.Runnable mAnr>;

        virtualinvoke $r4.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r3, 2000L);

     label1:
        $r5 = r0.<androidx.slice.compat.SliceProviderCompat: androidx.slice.SliceProvider mProvider>;

        virtualinvoke $r5.<androidx.slice.SliceProvider: void onSlicePinned(android.net.Uri)>(r1);

        $r6 = r0.<androidx.slice.compat.SliceProviderCompat: androidx.slice.SliceProvider mProvider>;

        virtualinvoke $r6.<androidx.slice.SliceProvider: void handleSlicePinned(android.net.Uri)>(r1);

     label2:
        $r8 = r0.<androidx.slice.compat.SliceProviderCompat: android.os.Handler mHandler>;

        $r7 = r0.<androidx.slice.compat.SliceProviderCompat: java.lang.Runnable mAnr>;

        virtualinvoke $r8.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r7);

        goto label4;

     label3:
        $r9 := @caughtexception;

        r2 = $r9;

        $r11 = r0.<androidx.slice.compat.SliceProviderCompat: android.os.Handler mHandler>;

        $r10 = r0.<androidx.slice.compat.SliceProviderCompat: java.lang.Runnable mAnr>;

        virtualinvoke $r11.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r10);

        throw r2;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void handleSliceUnpinned(android.net.Uri)
    {
        androidx.slice.compat.SliceProviderCompat r0;
        android.net.Uri r1;
        java.lang.Throwable r2, $r9;
        java.lang.Runnable $r3, $r7, $r10;
        android.os.Handler $r4, $r8, $r11;
        androidx.slice.SliceProvider $r5, $r6;

        r0 := @this: androidx.slice.compat.SliceProviderCompat;

        r1 := @parameter0: android.net.Uri;

        r0.<androidx.slice.compat.SliceProviderCompat: java.lang.String mCallback> = "onSliceUnpinned";

        $r4 = r0.<androidx.slice.compat.SliceProviderCompat: android.os.Handler mHandler>;

        $r3 = r0.<androidx.slice.compat.SliceProviderCompat: java.lang.Runnable mAnr>;

        virtualinvoke $r4.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r3, 2000L);

     label1:
        $r5 = r0.<androidx.slice.compat.SliceProviderCompat: androidx.slice.SliceProvider mProvider>;

        virtualinvoke $r5.<androidx.slice.SliceProvider: void onSliceUnpinned(android.net.Uri)>(r1);

        $r6 = r0.<androidx.slice.compat.SliceProviderCompat: androidx.slice.SliceProvider mProvider>;

        virtualinvoke $r6.<androidx.slice.SliceProvider: void handleSliceUnpinned(android.net.Uri)>(r1);

     label2:
        $r8 = r0.<androidx.slice.compat.SliceProviderCompat: android.os.Handler mHandler>;

        $r7 = r0.<androidx.slice.compat.SliceProviderCompat: java.lang.Runnable mAnr>;

        virtualinvoke $r8.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r7);

        goto label4;

     label3:
        $r9 := @caughtexception;

        r2 = $r9;

        $r11 = r0.<androidx.slice.compat.SliceProviderCompat: android.os.Handler mHandler>;

        $r10 = r0.<androidx.slice.compat.SliceProviderCompat: java.lang.Runnable mAnr>;

        virtualinvoke $r11.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r10);

        throw r2;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private androidx.slice.Slice handleBindSlice(android.net.Uri, java.util.Set, java.lang.String)
    {
        androidx.slice.compat.SliceProviderCompat r0;
        android.net.Uri r1;
        java.util.Set r2;
        java.lang.String r3, r4, $r12;
        android.content.Context $r5, $r10;
        android.content.pm.PackageManager $r6;
        int $i0, $i1, $i2, $i3;
        androidx.slice.compat.CompatPermissionManager $r7;
        androidx.slice.Slice $r8, $r11;

        r0 := @this: androidx.slice.compat.SliceProviderCompat;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.util.Set;

        r3 := @parameter2: java.lang.String;

        if r3 == null goto label1;

        $r12 = r3;

        goto label2;

     label1:
        $r5 = specialinvoke r0.<androidx.slice.compat.SliceProviderCompat: android.content.Context getContext()>();

        $r6 = virtualinvoke $r5.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r12 = virtualinvoke $r6.<android.content.pm.PackageManager: java.lang.String getNameForUid(int)>($i0);

     label2:
        r4 = $r12;

        $r7 = r0.<androidx.slice.compat.SliceProviderCompat: androidx.slice.compat.CompatPermissionManager mPermissionManager>;

        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i3 = virtualinvoke $r7.<androidx.slice.compat.CompatPermissionManager: int checkSlicePermission(android.net.Uri,int,int)>(r1, $i1, $i2);

        if $i3 == 0 goto label3;

        $r10 = specialinvoke r0.<androidx.slice.compat.SliceProviderCompat: android.content.Context getContext()>();

        $r11 = staticinvoke <androidx.slice.SliceProvider: androidx.slice.Slice createPermissionSlice(android.content.Context,android.net.Uri,java.lang.String)>($r10, r1, r4);

        return $r11;

     label3:
        $r8 = specialinvoke r0.<androidx.slice.compat.SliceProviderCompat: androidx.slice.Slice onBindSliceStrict(android.net.Uri,java.util.Set)>(r1, r2);

        return $r8;
    }

    private androidx.slice.Slice onBindSliceStrict(android.net.Uri, java.util.Set)
    {
        androidx.slice.compat.SliceProviderCompat r0;
        android.net.Uri r1;
        java.util.Set r2;
        android.os.StrictMode$ThreadPolicy r3, $r11;
        java.lang.Throwable r4, r5, $r15, $r16, $r25, r29;
        java.lang.Runnable $r6, $r13, $r23, $r26;
        android.os.Handler $r7, $r14, $r24, $r27;
        android.os.StrictMode$ThreadPolicy$Builder $r8, $r9, $r10;
        androidx.slice.SliceProvider $r12;
        java.lang.StringBuilder $r17, $r18, $r20, $r21;
        java.lang.String $r19, $r22;
        androidx.slice.Slice r28;

        r0 := @this: androidx.slice.compat.SliceProviderCompat;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.util.Set;

        r3 = staticinvoke <android.os.StrictMode: android.os.StrictMode$ThreadPolicy getThreadPolicy()>();

        r0.<androidx.slice.compat.SliceProviderCompat: java.lang.String mCallback> = "onBindSlice";

        $r7 = r0.<androidx.slice.compat.SliceProviderCompat: android.os.Handler mHandler>;

        $r6 = r0.<androidx.slice.compat.SliceProviderCompat: java.lang.Runnable mAnr>;

        virtualinvoke $r7.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r6, 2000L);

     label01:
        $r8 = new android.os.StrictMode$ThreadPolicy$Builder;

        specialinvoke $r8.<android.os.StrictMode$ThreadPolicy$Builder: void <init>()>();

        $r9 = virtualinvoke $r8.<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder detectAll()>();

        $r10 = virtualinvoke $r9.<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder penaltyDeath()>();

        $r11 = virtualinvoke $r10.<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy build()>();

        staticinvoke <android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>($r11);

        staticinvoke <androidx.slice.SliceProvider: void setSpecs(java.util.Set)>(r2);

     label02:
        $r12 = r0.<androidx.slice.compat.SliceProviderCompat: androidx.slice.SliceProvider mProvider>;

        r28 = virtualinvoke $r12.<androidx.slice.SliceProvider: androidx.slice.Slice onBindSlice(android.net.Uri)>(r1);

     label03:
        staticinvoke <androidx.slice.SliceProvider: void setSpecs(java.util.Set)>(null);

        $r14 = r0.<androidx.slice.compat.SliceProviderCompat: android.os.Handler mHandler>;

        $r13 = r0.<androidx.slice.compat.SliceProviderCompat: java.lang.Runnable mAnr>;

        virtualinvoke $r14.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r13);

     label04:
        staticinvoke <android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>(r3);

        return r28;

     label05:
        $r16 := @caughtexception;

        r29 = $r16;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Slice with URI ");

        $r19 = virtualinvoke r1.<android.net.Uri: java.lang.String toString()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is invalid.");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("SliceProviderCompat", $r22, r29);

     label06:
        staticinvoke <androidx.slice.SliceProvider: void setSpecs(java.util.Set)>(null);

        $r24 = r0.<androidx.slice.compat.SliceProviderCompat: android.os.Handler mHandler>;

        $r23 = r0.<androidx.slice.compat.SliceProviderCompat: java.lang.Runnable mAnr>;

        virtualinvoke $r24.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r23);

     label07:
        staticinvoke <android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>(r3);

        return null;

     label08:
        $r25 := @caughtexception;

        r4 = $r25;

     label09:
        staticinvoke <androidx.slice.SliceProvider: void setSpecs(java.util.Set)>(null);

        $r27 = r0.<androidx.slice.compat.SliceProviderCompat: android.os.Handler mHandler>;

        $r26 = r0.<androidx.slice.compat.SliceProviderCompat: java.lang.Runnable mAnr>;

        virtualinvoke $r27.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r26);

        throw r4;

     label10:
        $r15 := @caughtexception;

        r5 = $r15;

     label11:
        staticinvoke <android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>(r3);

        throw r5;

        catch java.lang.Exception from label02 to label03 with label05;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.Throwable from label01 to label04 with label10;
        catch java.lang.Throwable from label05 to label07 with label10;
        catch java.lang.Throwable from label08 to label11 with label10;
    }

    public static androidx.slice.Slice bindSlice(android.content.Context, android.net.Uri, java.util.Set)
    {
        android.content.Context r0;
        android.net.Uri r1;
        java.util.Set r2;
        androidx.slice.compat.SliceProviderCompat$ProviderHolder r3;
        java.lang.Throwable r4, $r19, $r20, r26;
        android.content.ContentResolver $r5;
        android.content.ContentProviderClient $r6, $r8;
        android.os.Bundle $r7, $r13, r21, r22;
        java.lang.Class $r9;
        java.lang.ClassLoader $r10;
        boolean $z0;
        androidx.versionedparcelable.VersionedParcelable $r11;
        androidx.slice.Slice $r12, r24, r25;
        java.lang.IllegalArgumentException $r14;
        java.lang.StringBuilder $r15, $r16, $r17;
        java.lang.String $r18;
        android.os.Parcelable r23;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.net.Uri;

        r2 := @parameter2: java.util.Set;

        $r5 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r3 = staticinvoke <androidx.slice.compat.SliceProviderCompat: androidx.slice.compat.SliceProviderCompat$ProviderHolder acquireClient(android.content.ContentResolver,android.net.Uri)>($r5, r1);

        $r6 = r3.<androidx.slice.compat.SliceProviderCompat$ProviderHolder: android.content.ContentProviderClient mProvider>;

        if $r6 != null goto label01;

        $r14 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown URI ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r14;

     label01:
        $r7 = new android.os.Bundle;

        specialinvoke $r7.<android.os.Bundle: void <init>()>();

        r21 = $r7;

        virtualinvoke r21.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("slice_uri", r1);

        staticinvoke <androidx.slice.compat.SliceProviderCompat: void addSpecs(android.os.Bundle,java.util.Set)>(r21, r2);

        $r8 = r3.<androidx.slice.compat.SliceProviderCompat$ProviderHolder: android.content.ContentProviderClient mProvider>;

        r22 = virtualinvoke $r8.<android.content.ContentProviderClient: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)>("bind_slice", "supports_versioned_parcelable", r21);

        if r22 != null goto label03;

     label02:
        return null;

     label03:
        $r9 = class "Landroidx/slice/compat/SliceProviderCompat;";

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        virtualinvoke r22.<android.os.Bundle: void setClassLoader(java.lang.ClassLoader)>($r10);

        r23 = virtualinvoke r22.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("slice");

        if r23 != null goto label05;

     label04:
        return null;

     label05:
        $z0 = r23 instanceof android.os.Bundle;

        if $z0 == 0 goto label07;

        $r12 = new androidx.slice.Slice;

        $r13 = (android.os.Bundle) r23;

        specialinvoke $r12.<androidx.slice.Slice: void <init>(android.os.Bundle)>($r13);

        r24 = $r12;

     label06:
        return r24;

     label07:
        $r11 = staticinvoke <androidx.versionedparcelable.ParcelUtils: androidx.versionedparcelable.VersionedParcelable fromParcelable(android.os.Parcelable)>(r23);

        r25 = (androidx.slice.Slice) $r11;

     label08:
        return r25;

     label09:
        $r20 := @caughtexception;

        r26 = $r20;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SliceProviderCompat", "Unable to bind slice", r26);

     label10:
        return null;

     label11:
        $r19 := @caughtexception;

        r4 = $r19;

     label12:
        throw r4;

        catch android.os.RemoteException from label01 to label02 with label09;
        catch android.os.RemoteException from label03 to label04 with label09;
        catch android.os.RemoteException from label05 to label06 with label09;
        catch android.os.RemoteException from label07 to label08 with label09;
        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public static void addSpecs(android.os.Bundle, java.util.Set)
    {
        android.os.Bundle r0;
        java.util.Set r1;
        java.util.ArrayList r2, r3, $r6, $r7;
        java.util.Iterator r4;
        androidx.slice.SliceSpec r5;
        boolean $z0;
        java.lang.Object $r8;
        java.lang.String $r9;
        int $i0;
        java.lang.Integer $r10;

        r0 := @parameter0: android.os.Bundle;

        r1 := @parameter1: java.util.Set;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r2 = $r6;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r3 = $r7;

        r4 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (androidx.slice.SliceSpec) $r8;

        $r9 = virtualinvoke r5.<androidx.slice.SliceSpec: java.lang.String getType()>();

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r9);

        $i0 = virtualinvoke r5.<androidx.slice.SliceSpec: int getRevision()>();

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r10);

        goto label1;

     label2:
        virtualinvoke r0.<android.os.Bundle: void putStringArrayList(java.lang.String,java.util.ArrayList)>("specs", r2);

        virtualinvoke r0.<android.os.Bundle: void putIntegerArrayList(java.lang.String,java.util.ArrayList)>("revs", r3);

        return;
    }

    public static java.util.Set getSpecs(android.os.Bundle)
    {
        android.os.Bundle r0;
        android.support.v4.util.ArraySet r1, $r4;
        java.util.ArrayList r2, r3;
        int $i0, $i1, i2;
        androidx.slice.SliceSpec $r5;
        java.lang.Object $r6, $r8;
        java.lang.String $r7;
        java.lang.Integer $r9;

        r0 := @parameter0: android.os.Bundle;

        $r4 = new android.support.v4.util.ArraySet;

        specialinvoke $r4.<android.support.v4.util.ArraySet: void <init>()>();

        r1 = $r4;

        r2 = virtualinvoke r0.<android.os.Bundle: java.util.ArrayList getStringArrayList(java.lang.String)>("specs");

        r3 = virtualinvoke r0.<android.os.Bundle: java.util.ArrayList getIntegerArrayList(java.lang.String)>("revs");

        if r2 == null goto label2;

        if r3 == null goto label2;

        i2 = 0;

     label1:
        $i0 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        if i2 >= $i0 goto label2;

        $r5 = new androidx.slice.SliceSpec;

        $r6 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r7 = (java.lang.String) $r6;

        $r8 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r9 = (java.lang.Integer) $r8;

        $i1 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        specialinvoke $r5.<androidx.slice.SliceSpec: void <init>(java.lang.String,int)>($r7, $i1);

        virtualinvoke r1.<android.support.v4.util.ArraySet: boolean add(java.lang.Object)>($r5);

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    public static androidx.slice.Slice bindSlice(android.content.Context, android.content.Intent, java.util.Set)
    {
        android.content.Context r0;
        android.content.Intent r1, r5, $r15;
        java.util.Set r2;
        android.content.ContentResolver r3;
        android.net.Uri r4, r7, $r26, $r53;
        java.util.List r6;
        androidx.slice.compat.SliceProviderCompat$ProviderHolder r8;
        android.os.Bundle r9, $r20, $r22, $r24, $r35, $r42, r57;
        android.os.Parcelable r10;
        android.content.ComponentName $r12;
        java.lang.Object[] $r13;
        java.lang.String $r14, $r25, $r47, $r49, $r50, $r52, r56;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        android.content.pm.PackageManager $r16, $r17;
        android.content.pm.ActivityInfo $r18, $r19, $r21, $r23;
        androidx.slice.Slice $r27, $r40, $r41, $r51;
        java.lang.Object $r28;
        android.content.pm.ResolveInfo $r29, r55;
        android.content.pm.ProviderInfo $r30;
        android.net.Uri$Builder $r31, $r32, $r33;
        android.content.ContentProviderClient $r34, $r36;
        java.lang.Class $r37;
        java.lang.ClassLoader $r38;
        androidx.versionedparcelable.VersionedParcelable $r39;
        java.lang.IllegalArgumentException $r43;
        java.lang.StringBuilder $r44, $r45, $r46;
        java.lang.Throwable $r54, r58;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.content.Intent;

        r2 := @parameter2: java.util.Set;

        staticinvoke <android.support.v4.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "intent");

        $r12 = virtualinvoke r1.<android.content.Intent: android.content.ComponentName getComponent()>();

        if $r12 != null goto label01;

        $r52 = virtualinvoke r1.<android.content.Intent: java.lang.String getPackage()>();

        if $r52 != null goto label01;

        $r53 = virtualinvoke r1.<android.content.Intent: android.net.Uri getData()>();

        if $r53 == null goto label02;

     label01:
        $z5 = 1;

        goto label03;

     label02:
        $z5 = 0;

     label03:
        $r13 = newarray (java.lang.Object)[1];

        $r13[0] = r1;

        $r14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Slice intent must be explicit %s", $r13);

        staticinvoke <android.support.v4.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z5, $r14);

        r3 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r4 = virtualinvoke r1.<android.content.Intent: android.net.Uri getData()>();

        if r4 == null goto label04;

        $r49 = "vnd.android.slice";

        $r50 = virtualinvoke r3.<android.content.ContentResolver: java.lang.String getType(android.net.Uri)>(r4);

        $z4 = virtualinvoke $r49.<java.lang.String: boolean equals(java.lang.Object)>($r50);

        if $z4 == 0 goto label04;

        $r51 = staticinvoke <androidx.slice.compat.SliceProviderCompat: androidx.slice.Slice bindSlice(android.content.Context,android.net.Uri,java.util.Set)>(r0, r4, r2);

        return $r51;

     label04:
        $r15 = new android.content.Intent;

        specialinvoke $r15.<android.content.Intent: void <init>(android.content.Intent)>(r1);

        r5 = $r15;

        $z0 = virtualinvoke r5.<android.content.Intent: boolean hasCategory(java.lang.String)>("android.app.slice.category.SLICE");

        if $z0 != 0 goto label05;

        virtualinvoke r5.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>("android.app.slice.category.SLICE");

     label05:
        $r16 = virtualinvoke r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r6 = virtualinvoke $r16.<android.content.pm.PackageManager: java.util.List queryIntentContentProviders(android.content.Intent,int)>(r5, 0);

        if r6 == null goto label06;

        $z2 = interfaceinvoke r6.<java.util.List: boolean isEmpty()>();

        if $z2 == 0 goto label08;

     label06:
        $r17 = virtualinvoke r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r55 = virtualinvoke $r17.<android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)>(r1, 128);

        if r55 == null goto label07;

        $r18 = r55.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        if $r18 == null goto label07;

        $r19 = r55.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r20 = $r19.<android.content.pm.ActivityInfo: android.os.Bundle metaData>;

        if $r20 == null goto label07;

        $r21 = r55.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r22 = $r21.<android.content.pm.ActivityInfo: android.os.Bundle metaData>;

        $z1 = virtualinvoke $r22.<android.os.Bundle: boolean containsKey(java.lang.String)>("android.metadata.SLICE_URI");

        if $z1 == 0 goto label07;

        $r23 = r55.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r24 = $r23.<android.content.pm.ActivityInfo: android.os.Bundle metaData>;

        $r25 = virtualinvoke $r24.<android.os.Bundle: java.lang.String getString(java.lang.String)>("android.metadata.SLICE_URI");

        $r26 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r25);

        $r27 = staticinvoke <androidx.slice.compat.SliceProviderCompat: androidx.slice.Slice bindSlice(android.content.Context,android.net.Uri,java.util.Set)>(r0, $r26, r2);

        return $r27;

     label07:
        return null;

     label08:
        $r28 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(0);

        $r29 = (android.content.pm.ResolveInfo) $r28;

        $r30 = $r29.<android.content.pm.ResolveInfo: android.content.pm.ProviderInfo providerInfo>;

        r56 = $r30.<android.content.pm.ProviderInfo: java.lang.String authority>;

        $r31 = new android.net.Uri$Builder;

        specialinvoke $r31.<android.net.Uri$Builder: void <init>()>();

        $r32 = virtualinvoke $r31.<android.net.Uri$Builder: android.net.Uri$Builder scheme(java.lang.String)>("content");

        $r33 = virtualinvoke $r32.<android.net.Uri$Builder: android.net.Uri$Builder authority(java.lang.String)>(r56);

        r7 = virtualinvoke $r33.<android.net.Uri$Builder: android.net.Uri build()>();

        r8 = staticinvoke <androidx.slice.compat.SliceProviderCompat: androidx.slice.compat.SliceProviderCompat$ProviderHolder acquireClient(android.content.ContentResolver,android.net.Uri)>(r3, r7);

        $r34 = r8.<androidx.slice.compat.SliceProviderCompat$ProviderHolder: android.content.ContentProviderClient mProvider>;

        if $r34 != null goto label09;

        $r43 = new java.lang.IllegalArgumentException;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown URI ");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r43.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r47);

        throw $r43;

     label09:
        $r35 = new android.os.Bundle;

        specialinvoke $r35.<android.os.Bundle: void <init>()>();

        r57 = $r35;

        virtualinvoke r57.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("slice_intent", r1);

        staticinvoke <androidx.slice.compat.SliceProviderCompat: void addSpecs(android.os.Bundle,java.util.Set)>(r57, r2);

        $r36 = r8.<androidx.slice.compat.SliceProviderCompat$ProviderHolder: android.content.ContentProviderClient mProvider>;

        r9 = virtualinvoke $r36.<android.content.ContentProviderClient: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)>("map_slice", "supports_versioned_parcelable", r57);

        if r9 != null goto label11;

     label10:
        return null;

     label11:
        $r37 = class "Landroidx/slice/compat/SliceProviderCompat;";

        $r38 = virtualinvoke $r37.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        virtualinvoke r9.<android.os.Bundle: void setClassLoader(java.lang.ClassLoader)>($r38);

        r10 = virtualinvoke r9.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("slice");

        if r10 != null goto label13;

     label12:
        return null;

     label13:
        $z3 = r10 instanceof android.os.Bundle;

        if $z3 == 0 goto label15;

        $r41 = new androidx.slice.Slice;

        $r42 = (android.os.Bundle) r10;

        specialinvoke $r41.<androidx.slice.Slice: void <init>(android.os.Bundle)>($r42);

     label14:
        return $r41;

     label15:
        $r39 = staticinvoke <androidx.versionedparcelable.ParcelUtils: androidx.versionedparcelable.VersionedParcelable fromParcelable(android.os.Parcelable)>(r10);

        $r40 = (androidx.slice.Slice) $r39;

     label16:
        return $r40;

     label17:
        $r54 := @caughtexception;

        r58 = $r54;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SliceProviderCompat", "Unable to bind slice", r58);

        return null;

        catch android.os.RemoteException from label09 to label10 with label17;
        catch android.os.RemoteException from label11 to label12 with label17;
        catch android.os.RemoteException from label13 to label14 with label17;
        catch android.os.RemoteException from label15 to label16 with label17;
    }

    public static void pinSlice(android.content.Context, android.net.Uri, java.util.Set)
    {
        android.content.Context r0;
        android.net.Uri r1;
        java.util.Set r2;
        androidx.slice.compat.SliceProviderCompat$ProviderHolder r3;
        android.content.ContentResolver $r4;
        android.content.ContentProviderClient $r5, $r8;
        android.os.Bundle $r6, r16;
        java.lang.String $r7, $r14;
        java.lang.IllegalArgumentException $r10;
        java.lang.StringBuilder $r11, $r12, $r13;
        java.lang.Throwable $r15, r17;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.net.Uri;

        r2 := @parameter2: java.util.Set;

        $r4 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r3 = staticinvoke <androidx.slice.compat.SliceProviderCompat: androidx.slice.compat.SliceProviderCompat$ProviderHolder acquireClient(android.content.ContentResolver,android.net.Uri)>($r4, r1);

        $r5 = r3.<androidx.slice.compat.SliceProviderCompat$ProviderHolder: android.content.ContentProviderClient mProvider>;

        if $r5 != null goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown URI ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label1:
        $r6 = new android.os.Bundle;

        specialinvoke $r6.<android.os.Bundle: void <init>()>();

        r16 = $r6;

        virtualinvoke r16.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("slice_uri", r1);

        $r7 = virtualinvoke r0.<android.content.Context: java.lang.String getPackageName()>();

        virtualinvoke r16.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("pkg", $r7);

        staticinvoke <androidx.slice.compat.SliceProviderCompat: void addSpecs(android.os.Bundle,java.util.Set)>(r16, r2);

        $r8 = r3.<androidx.slice.compat.SliceProviderCompat$ProviderHolder: android.content.ContentProviderClient mProvider>;

        virtualinvoke $r8.<android.content.ContentProviderClient: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)>("pin_slice", "supports_versioned_parcelable", r16);

     label2:
        goto label4;

     label3:
        $r15 := @caughtexception;

        r17 = $r15;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SliceProviderCompat", "Unable to pin slice", r17);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static void unpinSlice(android.content.Context, android.net.Uri, java.util.Set)
    {
        android.content.Context r0;
        android.net.Uri r1;
        java.util.Set r2;
        androidx.slice.compat.SliceProviderCompat$ProviderHolder r3;
        java.util.List $r4;
        boolean $z0;
        android.content.ContentResolver $r5;
        android.content.ContentProviderClient $r6, $r9;
        android.os.Bundle $r7, r17;
        java.lang.String $r8, $r15;
        java.lang.IllegalArgumentException $r11;
        java.lang.StringBuilder $r12, $r13, $r14;
        java.lang.Throwable $r16, r18;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.net.Uri;

        r2 := @parameter2: java.util.Set;

        $r4 = staticinvoke <androidx.slice.compat.SliceProviderCompat: java.util.List getPinnedSlices(android.content.Context)>(r0);

        $z0 = interfaceinvoke $r4.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label4;

        $r5 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r3 = staticinvoke <androidx.slice.compat.SliceProviderCompat: androidx.slice.compat.SliceProviderCompat$ProviderHolder acquireClient(android.content.ContentResolver,android.net.Uri)>($r5, r1);

        $r6 = r3.<androidx.slice.compat.SliceProviderCompat$ProviderHolder: android.content.ContentProviderClient mProvider>;

        if $r6 != null goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown URI ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r11;

     label1:
        $r7 = new android.os.Bundle;

        specialinvoke $r7.<android.os.Bundle: void <init>()>();

        r17 = $r7;

        virtualinvoke r17.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("slice_uri", r1);

        $r8 = virtualinvoke r0.<android.content.Context: java.lang.String getPackageName()>();

        virtualinvoke r17.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("pkg", $r8);

        staticinvoke <androidx.slice.compat.SliceProviderCompat: void addSpecs(android.os.Bundle,java.util.Set)>(r17, r2);

        $r9 = r3.<androidx.slice.compat.SliceProviderCompat$ProviderHolder: android.content.ContentProviderClient mProvider>;

        virtualinvoke $r9.<android.content.ContentProviderClient: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)>("unpin_slice", "supports_versioned_parcelable", r17);

     label2:
        goto label4;

     label3:
        $r16 := @caughtexception;

        r18 = $r16;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SliceProviderCompat", "Unable to unpin slice", r18);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static java.util.Set getPinnedSpecs(android.content.Context, android.net.Uri)
    {
        android.content.Context r0;
        android.net.Uri r1;
        androidx.slice.compat.SliceProviderCompat$ProviderHolder r2;
        android.os.Bundle r3, $r6, r15;
        android.content.ContentResolver $r4;
        android.content.ContentProviderClient $r5, $r7;
        java.util.Set $r8;
        java.lang.IllegalArgumentException $r9;
        java.lang.StringBuilder $r10, $r11, $r12;
        java.lang.String $r13;
        java.lang.Throwable $r14, r16;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.net.Uri;

        $r4 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r2 = staticinvoke <androidx.slice.compat.SliceProviderCompat: androidx.slice.compat.SliceProviderCompat$ProviderHolder acquireClient(android.content.ContentResolver,android.net.Uri)>($r4, r1);

        $r5 = r2.<androidx.slice.compat.SliceProviderCompat$ProviderHolder: android.content.ContentProviderClient mProvider>;

        if $r5 != null goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown URI ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label1:
        $r6 = new android.os.Bundle;

        specialinvoke $r6.<android.os.Bundle: void <init>()>();

        r15 = $r6;

        virtualinvoke r15.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("slice_uri", r1);

        $r7 = r2.<androidx.slice.compat.SliceProviderCompat$ProviderHolder: android.content.ContentProviderClient mProvider>;

        r3 = virtualinvoke $r7.<android.content.ContentProviderClient: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)>("get_specs", "supports_versioned_parcelable", r15);

        if r3 == null goto label3;

        $r8 = staticinvoke <androidx.slice.compat.SliceProviderCompat: java.util.Set getSpecs(android.os.Bundle)>(r3);

     label2:
        return $r8;

     label3:
        goto label5;

     label4:
        $r14 := @caughtexception;

        r16 = $r14;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SliceProviderCompat", "Unable to get pinned specs", r16);

     label5:
        return null;

        catch android.os.RemoteException from label1 to label2 with label4;
    }

    public static android.net.Uri mapIntentToUri(android.content.Context, android.content.Intent)
    {
        android.content.Context r0;
        android.content.Intent r1, r4, $r14;
        android.content.ContentResolver r2;
        android.net.Uri r3, r6, r8, $r25, $r44;
        java.util.List r5;
        android.os.Bundle r7, $r19, $r21, $r23, $r33, r54;
        java.lang.Throwable r9, r10, $r45, $r46, $r47, $r48, $r49, $r50, r55, r56, r57;
        android.content.ComponentName $r11;
        java.lang.Object[] $r12;
        java.lang.String $r13, $r24, $r40, $r41, $r42, $r43, r52;
        boolean $z0, $z1, $z2, $z3, $z4;
        android.content.pm.PackageManager $r15, $r16;
        android.content.pm.ActivityInfo $r17, $r18, $r20, $r22;
        java.lang.Object $r26;
        android.content.pm.ResolveInfo $r27, r51;
        android.content.pm.ProviderInfo $r28;
        android.net.Uri$Builder $r29, $r30, $r31;
        android.content.ContentProviderClient $r32, $r34;
        android.os.Parcelable $r35;
        java.lang.IllegalArgumentException $r36;
        java.lang.StringBuilder $r37, $r38, $r39;
        androidx.slice.compat.SliceProviderCompat$ProviderHolder r53;
        java.lang.NullPointerException r58, r59;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.content.Intent;

        staticinvoke <android.support.v4.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "intent");

        $r11 = virtualinvoke r1.<android.content.Intent: android.content.ComponentName getComponent()>();

        if $r11 != null goto label01;

        $r43 = virtualinvoke r1.<android.content.Intent: java.lang.String getPackage()>();

        if $r43 != null goto label01;

        $r44 = virtualinvoke r1.<android.content.Intent: android.net.Uri getData()>();

        if $r44 == null goto label02;

     label01:
        $z4 = 1;

        goto label03;

     label02:
        $z4 = 0;

     label03:
        $r12 = newarray (java.lang.Object)[1];

        $r12[0] = r1;

        $r13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Slice intent must be explicit %s", $r12);

        staticinvoke <android.support.v4.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z4, $r13);

        r2 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r3 = virtualinvoke r1.<android.content.Intent: android.net.Uri getData()>();

        if r3 == null goto label04;

        $r41 = "vnd.android.slice";

        $r42 = virtualinvoke r2.<android.content.ContentResolver: java.lang.String getType(android.net.Uri)>(r3);

        $z3 = virtualinvoke $r41.<java.lang.String: boolean equals(java.lang.Object)>($r42);

        if $z3 == 0 goto label04;

        return r3;

     label04:
        $r14 = new android.content.Intent;

        specialinvoke $r14.<android.content.Intent: void <init>(android.content.Intent)>(r1);

        r4 = $r14;

        $z0 = virtualinvoke r4.<android.content.Intent: boolean hasCategory(java.lang.String)>("android.app.slice.category.SLICE");

        if $z0 != 0 goto label05;

        virtualinvoke r4.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>("android.app.slice.category.SLICE");

     label05:
        $r15 = virtualinvoke r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r5 = virtualinvoke $r15.<android.content.pm.PackageManager: java.util.List queryIntentContentProviders(android.content.Intent,int)>(r4, 0);

        if r5 == null goto label06;

        $z2 = interfaceinvoke r5.<java.util.List: boolean isEmpty()>();

        if $z2 == 0 goto label08;

     label06:
        $r16 = virtualinvoke r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r51 = virtualinvoke $r16.<android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)>(r1, 128);

        if r51 == null goto label07;

        $r17 = r51.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        if $r17 == null goto label07;

        $r18 = r51.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r19 = $r18.<android.content.pm.ActivityInfo: android.os.Bundle metaData>;

        if $r19 == null goto label07;

        $r20 = r51.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r21 = $r20.<android.content.pm.ActivityInfo: android.os.Bundle metaData>;

        $z1 = virtualinvoke $r21.<android.os.Bundle: boolean containsKey(java.lang.String)>("android.metadata.SLICE_URI");

        if $z1 == 0 goto label07;

        $r22 = r51.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r23 = $r22.<android.content.pm.ActivityInfo: android.os.Bundle metaData>;

        $r24 = virtualinvoke $r23.<android.os.Bundle: java.lang.String getString(java.lang.String)>("android.metadata.SLICE_URI");

        $r25 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r24);

        return $r25;

     label07:
        return null;

     label08:
        $r26 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(0);

        $r27 = (android.content.pm.ResolveInfo) $r26;

        $r28 = $r27.<android.content.pm.ResolveInfo: android.content.pm.ProviderInfo providerInfo>;

        r52 = $r28.<android.content.pm.ProviderInfo: java.lang.String authority>;

        $r29 = new android.net.Uri$Builder;

        specialinvoke $r29.<android.net.Uri$Builder: void <init>()>();

        $r30 = virtualinvoke $r29.<android.net.Uri$Builder: android.net.Uri$Builder scheme(java.lang.String)>("content");

        $r31 = virtualinvoke $r30.<android.net.Uri$Builder: android.net.Uri$Builder authority(java.lang.String)>(r52);

        r6 = virtualinvoke $r31.<android.net.Uri$Builder: android.net.Uri build()>();

     label09:
        r53 = staticinvoke <androidx.slice.compat.SliceProviderCompat: androidx.slice.compat.SliceProviderCompat$ProviderHolder acquireClient(android.content.ContentResolver,android.net.Uri)>(r2, r6);

     label10:
        $r32 = r53.<androidx.slice.compat.SliceProviderCompat$ProviderHolder: android.content.ContentProviderClient mProvider>;

        if $r32 != null goto label11;

        $r36 = new java.lang.IllegalArgumentException;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown URI ");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r36.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r40);

        throw $r36;

     label11:
        $r33 = new android.os.Bundle;

        specialinvoke $r33.<android.os.Bundle: void <init>()>();

        r54 = $r33;

        virtualinvoke r54.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("slice_intent", r1);

        $r34 = r53.<androidx.slice.compat.SliceProviderCompat$ProviderHolder: android.content.ContentProviderClient mProvider>;

        r7 = virtualinvoke $r34.<android.content.ContentProviderClient: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)>("map_only", "supports_versioned_parcelable", r54);

        if r7 == null goto label18;

        $r35 = virtualinvoke r7.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("slice");

        r8 = (android.net.Uri) $r35;

     label12:
        if r53 == null goto label17;

        if null == null goto label16;

     label13:
        virtualinvoke r53.<androidx.slice.compat.SliceProviderCompat$ProviderHolder: void close()>();

     label14:
        goto label17;

     label15:
        $r50 := @caughtexception;

        r58 = new java.lang.NullPointerException;

        specialinvoke r58.<java.lang.NullPointerException: void <init>(java.lang.String)>("This statement would have triggered an Exception: virtualinvoke l9#8.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l13)");

        throw r58;

     label16:
        virtualinvoke r53.<androidx.slice.compat.SliceProviderCompat$ProviderHolder: void close()>();

     label17:
        return r8;

     label18:
        if r53 == null goto label31;

        if null == null goto label22;

     label19:
        virtualinvoke r53.<androidx.slice.compat.SliceProviderCompat$ProviderHolder: void close()>();

     label20:
        goto label31;

     label21:
        $r46 := @caughtexception;

        r59 = new java.lang.NullPointerException;

        specialinvoke r59.<java.lang.NullPointerException: void <init>(java.lang.String)>("This statement would have triggered an Exception: virtualinvoke l9#8.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(extras#13)");

        throw r59;

     label22:
        virtualinvoke r53.<androidx.slice.compat.SliceProviderCompat$ProviderHolder: void close()>();

        goto label31;

     label23:
        $r47 := @caughtexception;

        r55 = $r47;

        r56 = r55;

        throw r55;

     label24:
        $r48 := @caughtexception;

        r9 = $r48;

     label25:
        if r53 == null goto label30;

        if r56 == null goto label29;

     label26:
        virtualinvoke r53.<androidx.slice.compat.SliceProviderCompat$ProviderHolder: void close()>();

     label27:
        goto label30;

     label28:
        $r49 := @caughtexception;

        r10 = $r49;

        virtualinvoke r56.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r10);

        goto label30;

     label29:
        virtualinvoke r53.<androidx.slice.compat.SliceProviderCompat$ProviderHolder: void close()>();

     label30:
        throw r9;

     label31:
        goto label33;

     label32:
        $r45 := @caughtexception;

        r57 = $r45;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SliceProviderCompat", "Unable to map slice", r57);

     label33:
        return null;

        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label10 to label12 with label23;
        catch java.lang.Throwable from label26 to label27 with label28;
        catch java.lang.Throwable from label23 to label25 with label24;
        catch android.os.RemoteException from label09 to label17 with label32;
        catch android.os.RemoteException from label18 to label31 with label32;
    }

    public static java.util.Collection getSliceDescendants(android.content.Context, android.net.Uri)
    {
        android.content.Context r0;
        android.net.Uri r1;
        android.content.ContentResolver r2;
        android.os.Bundle r3, $r7, r17;
        java.util.ArrayList r4;
        java.lang.Throwable r5, r6, $r10, $r11, $r12, $r13, $r14, $r15, r18, r19, r20;
        android.content.ContentProviderClient $r8;
        java.util.List $r9;
        androidx.slice.compat.SliceProviderCompat$ProviderHolder r16;
        java.lang.NullPointerException r21, r22;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.net.Uri;

        r2 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

     label01:
        r16 = staticinvoke <androidx.slice.compat.SliceProviderCompat: androidx.slice.compat.SliceProviderCompat$ProviderHolder acquireClient(android.content.ContentResolver,android.net.Uri)>(r2, r1);

     label02:
        $r7 = new android.os.Bundle;

        specialinvoke $r7.<android.os.Bundle: void <init>()>();

        r17 = $r7;

        virtualinvoke r17.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("slice_uri", r1);

        $r8 = r16.<androidx.slice.compat.SliceProviderCompat$ProviderHolder: android.content.ContentProviderClient mProvider>;

        r3 = virtualinvoke $r8.<android.content.ContentProviderClient: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)>("get_descendants", "supports_versioned_parcelable", r17);

        if r3 == null goto label09;

        r4 = virtualinvoke r3.<android.os.Bundle: java.util.ArrayList getParcelableArrayList(java.lang.String)>("slice_descendants");

     label03:
        if r16 == null goto label08;

        if null == null goto label07;

     label04:
        virtualinvoke r16.<androidx.slice.compat.SliceProviderCompat$ProviderHolder: void close()>();

     label05:
        goto label08;

     label06:
        $r11 := @caughtexception;

        r21 = new java.lang.NullPointerException;

        specialinvoke r21.<java.lang.NullPointerException: void <init>(java.lang.String)>("This statement would have triggered an Exception: virtualinvoke l4#2.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l8)");

        throw r21;

     label07:
        virtualinvoke r16.<androidx.slice.compat.SliceProviderCompat$ProviderHolder: void close()>();

     label08:
        return r4;

     label09:
        if r16 == null goto label22;

        if null == null goto label13;

     label10:
        virtualinvoke r16.<androidx.slice.compat.SliceProviderCompat$ProviderHolder: void close()>();

     label11:
        goto label22;

     label12:
        $r12 := @caughtexception;

        r22 = new java.lang.NullPointerException;

        specialinvoke r22.<java.lang.NullPointerException: void <init>(java.lang.String)>("This statement would have triggered an Exception: virtualinvoke l4#2.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(extras#7)");

        throw r22;

     label13:
        virtualinvoke r16.<androidx.slice.compat.SliceProviderCompat$ProviderHolder: void close()>();

        goto label22;

     label14:
        $r14 := @caughtexception;

        r18 = $r14;

        r19 = r18;

        throw r18;

     label15:
        $r10 := @caughtexception;

        r5 = $r10;

     label16:
        if r16 == null goto label21;

        if r19 == null goto label20;

     label17:
        virtualinvoke r16.<androidx.slice.compat.SliceProviderCompat$ProviderHolder: void close()>();

     label18:
        goto label21;

     label19:
        $r13 := @caughtexception;

        r6 = $r13;

        virtualinvoke r19.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r6);

        goto label21;

     label20:
        virtualinvoke r16.<androidx.slice.compat.SliceProviderCompat$ProviderHolder: void close()>();

     label21:
        throw r5;

     label22:
        goto label24;

     label23:
        $r15 := @caughtexception;

        r20 = $r15;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SliceProviderCompat", "Unable to get slice descendants", r20);

     label24:
        $r9 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r9;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Throwable from label14 to label16 with label15;
        catch android.os.RemoteException from label01 to label08 with label23;
        catch android.os.RemoteException from label09 to label22 with label23;
    }

    public static int checkSlicePermission(android.content.Context, java.lang.String, android.net.Uri, int, int)
    {
        android.content.Context r0;
        java.lang.String r1;
        android.net.Uri r2;
        int i0, i1, i2;
        android.content.ContentResolver r3;
        android.os.Bundle r4, $r7, r16;
        java.lang.Throwable r5, r6, $r9, $r10, $r11, $r12, $r13, $r14, r17, r18, r19;
        android.content.ContentProviderClient $r8;
        androidx.slice.compat.SliceProviderCompat$ProviderHolder r15;
        java.lang.NullPointerException r20, r21;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.net.Uri;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        r3 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

     label01:
        r15 = staticinvoke <androidx.slice.compat.SliceProviderCompat: androidx.slice.compat.SliceProviderCompat$ProviderHolder acquireClient(android.content.ContentResolver,android.net.Uri)>(r3, r2);

     label02:
        $r7 = new android.os.Bundle;

        specialinvoke $r7.<android.os.Bundle: void <init>()>();

        r16 = $r7;

        virtualinvoke r16.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("slice_uri", r2);

        virtualinvoke r16.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("pkg", r1);

        virtualinvoke r16.<android.os.Bundle: void putInt(java.lang.String,int)>("pid", i0);

        virtualinvoke r16.<android.os.Bundle: void putInt(java.lang.String,int)>("uid", i1);

        $r8 = r15.<androidx.slice.compat.SliceProviderCompat$ProviderHolder: android.content.ContentProviderClient mProvider>;

        r4 = virtualinvoke $r8.<android.content.ContentProviderClient: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)>("check_perms", "supports_versioned_parcelable", r16);

        if r4 == null goto label09;

        i2 = virtualinvoke r4.<android.os.Bundle: int getInt(java.lang.String)>("result");

     label03:
        if r15 == null goto label08;

        if null == null goto label07;

     label04:
        virtualinvoke r15.<androidx.slice.compat.SliceProviderCompat$ProviderHolder: void close()>();

     label05:
        goto label08;

     label06:
        $r11 := @caughtexception;

        r20 = new java.lang.NullPointerException;

        specialinvoke r20.<java.lang.NullPointerException: void <init>(java.lang.String)>("This statement would have triggered an Exception: virtualinvoke l7#2.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l11)");

        throw r20;

     label07:
        virtualinvoke r15.<androidx.slice.compat.SliceProviderCompat$ProviderHolder: void close()>();

     label08:
        return i2;

     label09:
        if r15 == null goto label22;

        if null == null goto label13;

     label10:
        virtualinvoke r15.<androidx.slice.compat.SliceProviderCompat$ProviderHolder: void close()>();

     label11:
        goto label22;

     label12:
        $r13 := @caughtexception;

        r21 = new java.lang.NullPointerException;

        specialinvoke r21.<java.lang.NullPointerException: void <init>(java.lang.String)>("This statement would have triggered an Exception: virtualinvoke l7#2.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(extras#7)");

        throw r21;

     label13:
        virtualinvoke r15.<androidx.slice.compat.SliceProviderCompat$ProviderHolder: void close()>();

        goto label22;

     label14:
        $r10 := @caughtexception;

        r17 = $r10;

        r18 = r17;

        throw r17;

     label15:
        $r14 := @caughtexception;

        r5 = $r14;

     label16:
        if r15 == null goto label21;

        if r18 == null goto label20;

     label17:
        virtualinvoke r15.<androidx.slice.compat.SliceProviderCompat$ProviderHolder: void close()>();

     label18:
        goto label21;

     label19:
        $r12 := @caughtexception;

        r6 = $r12;

        virtualinvoke r18.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r6);

        goto label21;

     label20:
        virtualinvoke r15.<androidx.slice.compat.SliceProviderCompat$ProviderHolder: void close()>();

     label21:
        throw r5;

     label22:
        goto label24;

     label23:
        $r9 := @caughtexception;

        r19 = $r9;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SliceProviderCompat", "Unable to check slice permission", r19);

     label24:
        return -1;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Throwable from label14 to label16 with label15;
        catch android.os.RemoteException from label01 to label08 with label23;
        catch android.os.RemoteException from label09 to label22 with label23;
    }

    public static void grantSlicePermission(android.content.Context, java.lang.String, java.lang.String, android.net.Uri)
    {
        android.content.Context r0;
        java.lang.String r1, r2;
        android.net.Uri r3;
        android.content.ContentResolver r4;
        java.lang.Throwable r5, r6, $r9, $r10, $r11, $r12, $r13, r16, r17, r18;
        android.os.Bundle $r7, r15;
        android.content.ContentProviderClient $r8;
        androidx.slice.compat.SliceProviderCompat$ProviderHolder r14;
        java.lang.NullPointerException r19;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: android.net.Uri;

        r4 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

     label01:
        r14 = staticinvoke <androidx.slice.compat.SliceProviderCompat: androidx.slice.compat.SliceProviderCompat$ProviderHolder acquireClient(android.content.ContentResolver,android.net.Uri)>(r4, r3);

     label02:
        $r7 = new android.os.Bundle;

        specialinvoke $r7.<android.os.Bundle: void <init>()>();

        r15 = $r7;

        virtualinvoke r15.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("slice_uri", r3);

        virtualinvoke r15.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("provider_pkg", r1);

        virtualinvoke r15.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("pkg", r2);

        $r8 = r14.<androidx.slice.compat.SliceProviderCompat$ProviderHolder: android.content.ContentProviderClient mProvider>;

        virtualinvoke $r8.<android.content.ContentProviderClient: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)>("grant_perms", "supports_versioned_parcelable", r15);

     label03:
        if r14 == null goto label16;

        if null == null goto label07;

     label04:
        virtualinvoke r14.<androidx.slice.compat.SliceProviderCompat$ProviderHolder: void close()>();

     label05:
        goto label16;

     label06:
        $r13 := @caughtexception;

        r19 = new java.lang.NullPointerException;

        specialinvoke r19.<java.lang.NullPointerException: void <init>(java.lang.String)>("This statement would have triggered an Exception: virtualinvoke l6#2.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(extras#4)");

        throw r19;

     label07:
        virtualinvoke r14.<androidx.slice.compat.SliceProviderCompat$ProviderHolder: void close()>();

        goto label16;

     label08:
        $r12 := @caughtexception;

        r16 = $r12;

        r17 = r16;

        throw r16;

     label09:
        $r11 := @caughtexception;

        r5 = $r11;

     label10:
        if r14 == null goto label15;

        if r17 == null goto label14;

     label11:
        virtualinvoke r14.<androidx.slice.compat.SliceProviderCompat$ProviderHolder: void close()>();

     label12:
        goto label15;

     label13:
        $r10 := @caughtexception;

        r6 = $r10;

        virtualinvoke r17.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r6);

        goto label15;

     label14:
        virtualinvoke r14.<androidx.slice.compat.SliceProviderCompat$ProviderHolder: void close()>();

     label15:
        throw r5;

     label16:
        goto label18;

     label17:
        $r9 := @caughtexception;

        r18 = $r9;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SliceProviderCompat", "Unable to get slice descendants", r18);

     label18:
        return;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label08 to label10 with label09;
        catch android.os.RemoteException from label01 to label16 with label17;
    }

    public static void revokeSlicePermission(android.content.Context, java.lang.String, java.lang.String, android.net.Uri)
    {
        android.content.Context r0;
        java.lang.String r1, r2;
        android.net.Uri r3;
        android.content.ContentResolver r4;
        java.lang.Throwable r5, r6, $r9, $r10, $r11, $r12, $r13, r16, r17, r18;
        android.os.Bundle $r7, r15;
        android.content.ContentProviderClient $r8;
        androidx.slice.compat.SliceProviderCompat$ProviderHolder r14;
        java.lang.NullPointerException r19;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: android.net.Uri;

        r4 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

     label01:
        r14 = staticinvoke <androidx.slice.compat.SliceProviderCompat: androidx.slice.compat.SliceProviderCompat$ProviderHolder acquireClient(android.content.ContentResolver,android.net.Uri)>(r4, r3);

     label02:
        $r7 = new android.os.Bundle;

        specialinvoke $r7.<android.os.Bundle: void <init>()>();

        r15 = $r7;

        virtualinvoke r15.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("slice_uri", r3);

        virtualinvoke r15.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("provider_pkg", r1);

        virtualinvoke r15.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("pkg", r2);

        $r8 = r14.<androidx.slice.compat.SliceProviderCompat$ProviderHolder: android.content.ContentProviderClient mProvider>;

        virtualinvoke $r8.<android.content.ContentProviderClient: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)>("revoke_perms", "supports_versioned_parcelable", r15);

     label03:
        if r14 == null goto label16;

        if null == null goto label07;

     label04:
        virtualinvoke r14.<androidx.slice.compat.SliceProviderCompat$ProviderHolder: void close()>();

     label05:
        goto label16;

     label06:
        $r9 := @caughtexception;

        r19 = new java.lang.NullPointerException;

        specialinvoke r19.<java.lang.NullPointerException: void <init>(java.lang.String)>("This statement would have triggered an Exception: virtualinvoke l6#2.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(extras#4)");

        throw r19;

     label07:
        virtualinvoke r14.<androidx.slice.compat.SliceProviderCompat$ProviderHolder: void close()>();

        goto label16;

     label08:
        $r13 := @caughtexception;

        r16 = $r13;

        r17 = r16;

        throw r16;

     label09:
        $r10 := @caughtexception;

        r5 = $r10;

     label10:
        if r14 == null goto label15;

        if r17 == null goto label14;

     label11:
        virtualinvoke r14.<androidx.slice.compat.SliceProviderCompat$ProviderHolder: void close()>();

     label12:
        goto label15;

     label13:
        $r12 := @caughtexception;

        r6 = $r12;

        virtualinvoke r17.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r6);

        goto label15;

     label14:
        virtualinvoke r14.<androidx.slice.compat.SliceProviderCompat$ProviderHolder: void close()>();

     label15:
        throw r5;

     label16:
        goto label18;

     label17:
        $r11 := @caughtexception;

        r18 = $r11;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SliceProviderCompat", "Unable to get slice descendants", r18);

     label18:
        return;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label08 to label10 with label09;
        catch android.os.RemoteException from label01 to label16 with label17;
    }

    public static java.util.List getPinnedSlices(android.content.Context)
    {
        android.content.Context r0;
        java.util.ArrayList r1, $r6;
        android.content.SharedPreferences r2;
        java.util.Set r3, $r7;
        java.util.Iterator r4;
        java.lang.String r5;
        boolean $z0;
        java.lang.Object $r8;
        androidx.slice.compat.CompatPinnedList $r9;
        java.util.List $r10;

        r0 := @parameter0: android.content.Context;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r1 = $r6;

        r2 = virtualinvoke r0.<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>("slice_data_all_slice_files", 0);

        $r7 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        r3 = interfaceinvoke r2.<android.content.SharedPreferences: java.util.Set getStringSet(java.lang.String,java.util.Set)>("slice_data_all_slice_files", $r7);

        r4 = interfaceinvoke r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r8;

        $r9 = new androidx.slice.compat.CompatPinnedList;

        specialinvoke $r9.<androidx.slice.compat.CompatPinnedList: void <init>(android.content.Context,java.lang.String)>(r0, r5);

        $r10 = virtualinvoke $r9.<androidx.slice.compat.CompatPinnedList: java.util.List getPinnedSlices()>();

        virtualinvoke r1.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r10);

        goto label1;

     label2:
        return r1;
    }

    private static androidx.slice.compat.SliceProviderCompat$ProviderHolder acquireClient(android.content.ContentResolver, android.net.Uri)
    {
        android.content.ContentResolver r0;
        android.net.Uri r1;
        android.content.ContentProviderClient r2;
        androidx.slice.compat.SliceProviderCompat$ProviderHolder $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;

        r0 := @parameter0: android.content.ContentResolver;

        r1 := @parameter1: android.net.Uri;

        r2 = virtualinvoke r0.<android.content.ContentResolver: android.content.ContentProviderClient acquireUnstableContentProviderClient(android.net.Uri)>(r1);

        if r2 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No provider found for ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label1:
        $r3 = new androidx.slice.compat.SliceProviderCompat$ProviderHolder;

        specialinvoke $r3.<androidx.slice.compat.SliceProviderCompat$ProviderHolder: void <init>(android.content.ContentProviderClient)>(r2);

        return $r3;
    }

