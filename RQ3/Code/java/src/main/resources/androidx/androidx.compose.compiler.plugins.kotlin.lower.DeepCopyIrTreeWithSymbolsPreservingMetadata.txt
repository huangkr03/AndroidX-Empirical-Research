androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata
<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>
<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper symbolRemapper>
<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: org.jetbrains.kotlin.ir.util.TypeRemapper typeRemapper>
<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: org.jetbrains.kotlin.ir.util.TypeTranslator typeTranslator>
    public org.jetbrains.kotlin.ir.declarations.IrClass visitClass(org.jetbrains.kotlin.ir.declarations.IrClass)
    {
        androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata r0;
        org.jetbrains.kotlin.ir.declarations.IrClass r1, r2, r3;
        boolean z0, z1;
        org.jetbrains.kotlin.ir.declarations.IrMetadataSourceOwner $r4;
        org.jetbrains.kotlin.ir.IrElement $r5;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata;

        r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrClass;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "declaration");

        r2 = specialinvoke r0.<org.jetbrains.kotlin.ir.util.DeepCopyIrTreeWithSymbols: org.jetbrains.kotlin.ir.declarations.IrClass visitClass(org.jetbrains.kotlin.ir.declarations.IrClass)>(r1);

        z0 = 0;

        z1 = 0;

        r3 = r2;

        $r5 = (org.jetbrains.kotlin.ir.IrElement) r3;

        $r4 = (org.jetbrains.kotlin.ir.declarations.IrMetadataSourceOwner) r1;

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: void copyMetadataFrom(org.jetbrains.kotlin.ir.IrElement,org.jetbrains.kotlin.ir.declarations.IrMetadataSourceOwner)>($r5, $r4);

        return r2;
    }

    public volatile org.jetbrains.kotlin.ir.IrStatement visitClass(org.jetbrains.kotlin.ir.declarations.IrClass)
    {
        androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata r0;
        org.jetbrains.kotlin.ir.declarations.IrClass r1, $r2;
        org.jetbrains.kotlin.ir.IrStatement $r3;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata;

        r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrClass;

        $r2 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: org.jetbrains.kotlin.ir.declarations.IrClass visitClass(org.jetbrains.kotlin.ir.declarations.IrClass)>(r1);

        $r3 = (org.jetbrains.kotlin.ir.IrStatement) $r2;

        return $r3;
    }

    public org.jetbrains.kotlin.ir.IrStatement visitFunction(org.jetbrains.kotlin.ir.declarations.IrFunction)
    {
        androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata r0;
        org.jetbrains.kotlin.ir.declarations.IrFunction r1;
        org.jetbrains.kotlin.ir.IrStatement r2, r3;
        boolean z0, z1;
        org.jetbrains.kotlin.ir.declarations.IrMetadataSourceOwner $r4;
        org.jetbrains.kotlin.ir.IrElement $r5;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata;

        r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrFunction;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "declaration");

        r2 = specialinvoke r0.<org.jetbrains.kotlin.ir.util.DeepCopyIrTreeWithSymbols: org.jetbrains.kotlin.ir.IrStatement visitFunction(org.jetbrains.kotlin.ir.declarations.IrFunction)>(r1);

        z0 = 0;

        z1 = 0;

        r3 = r2;

        $r5 = (org.jetbrains.kotlin.ir.IrElement) r3;

        $r4 = (org.jetbrains.kotlin.ir.declarations.IrMetadataSourceOwner) r1;

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: void copyMetadataFrom(org.jetbrains.kotlin.ir.IrElement,org.jetbrains.kotlin.ir.declarations.IrMetadataSourceOwner)>($r5, $r4);

        return r2;
    }

    public org.jetbrains.kotlin.ir.declarations.IrSimpleFunction visitSimpleFunction(org.jetbrains.kotlin.ir.declarations.IrSimpleFunction)
    {
        androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata r0;
        org.jetbrains.kotlin.ir.declarations.IrSimpleFunction r1, r2, r3;
        boolean z0, z1;
        org.jetbrains.kotlin.ir.symbols.IrPropertySymbol $r4;
        org.jetbrains.kotlin.ir.declarations.IrMetadataSourceOwner $r5;
        org.jetbrains.kotlin.ir.IrElement $r6;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata;

        r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrSimpleFunction;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "declaration");

        r2 = specialinvoke r0.<org.jetbrains.kotlin.ir.util.DeepCopyIrTreeWithSymbols: org.jetbrains.kotlin.ir.declarations.IrSimpleFunction visitSimpleFunction(org.jetbrains.kotlin.ir.declarations.IrSimpleFunction)>(r1);

        z0 = 0;

        z1 = 0;

        r3 = r2;

        $r4 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: org.jetbrains.kotlin.ir.symbols.IrPropertySymbol getCorrespondingPropertySymbol()>();

        interfaceinvoke r3.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: void setCorrespondingPropertySymbol(org.jetbrains.kotlin.ir.symbols.IrPropertySymbol)>($r4);

        $r6 = (org.jetbrains.kotlin.ir.IrElement) r3;

        $r5 = (org.jetbrains.kotlin.ir.declarations.IrMetadataSourceOwner) r1;

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: void copyMetadataFrom(org.jetbrains.kotlin.ir.IrElement,org.jetbrains.kotlin.ir.declarations.IrMetadataSourceOwner)>($r6, $r5);

        return r2;
    }

    public volatile org.jetbrains.kotlin.ir.IrStatement visitSimpleFunction(org.jetbrains.kotlin.ir.declarations.IrSimpleFunction)
    {
        androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata r0;
        org.jetbrains.kotlin.ir.declarations.IrSimpleFunction r1, $r2;
        org.jetbrains.kotlin.ir.IrStatement $r3;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata;

        r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrSimpleFunction;

        $r2 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: org.jetbrains.kotlin.ir.declarations.IrSimpleFunction visitSimpleFunction(org.jetbrains.kotlin.ir.declarations.IrSimpleFunction)>(r1);

        $r3 = (org.jetbrains.kotlin.ir.IrStatement) $r2;

        return $r3;
    }

    public org.jetbrains.kotlin.ir.declarations.IrField visitField(org.jetbrains.kotlin.ir.declarations.IrField)
    {
        androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata r0;
        org.jetbrains.kotlin.ir.declarations.IrField r1, r2, r3;
        boolean z0, z1;
        org.jetbrains.kotlin.ir.declarations.impl.IrFieldImpl $r4;
        org.jetbrains.kotlin.ir.declarations.MetadataSource$Property $r5;
        java.lang.NullPointerException $r6;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata;

        r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrField;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "declaration");

        r2 = specialinvoke r0.<org.jetbrains.kotlin.ir.util.DeepCopyIrTreeWithSymbols: org.jetbrains.kotlin.ir.declarations.IrField visitField(org.jetbrains.kotlin.ir.declarations.IrField)>(r1);

        z0 = 0;

        z1 = 0;

        r3 = r2;

        if r3 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type org.jetbrains.kotlin.ir.declarations.impl.IrFieldImpl");

        throw $r6;

     label1:
        $r4 = (org.jetbrains.kotlin.ir.declarations.impl.IrFieldImpl) r3;

        $r5 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.declarations.IrField: org.jetbrains.kotlin.ir.declarations.MetadataSource$Property getMetadata()>();

        virtualinvoke $r4.<org.jetbrains.kotlin.ir.declarations.impl.IrFieldImpl: void setMetadata(org.jetbrains.kotlin.ir.declarations.MetadataSource$Property)>($r5);

        return r2;
    }

    public volatile org.jetbrains.kotlin.ir.IrStatement visitField(org.jetbrains.kotlin.ir.declarations.IrField)
    {
        androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata r0;
        org.jetbrains.kotlin.ir.declarations.IrField r1, $r2;
        org.jetbrains.kotlin.ir.IrStatement $r3;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata;

        r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrField;

        $r2 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: org.jetbrains.kotlin.ir.declarations.IrField visitField(org.jetbrains.kotlin.ir.declarations.IrField)>(r1);

        $r3 = (org.jetbrains.kotlin.ir.IrStatement) $r2;

        return $r3;
    }

    public org.jetbrains.kotlin.ir.declarations.IrProperty visitProperty(org.jetbrains.kotlin.ir.declarations.IrProperty)
    {
        androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata r0;
        org.jetbrains.kotlin.ir.declarations.IrProperty r1, r2, r3;
        boolean z0, z1;
        org.jetbrains.kotlin.ir.declarations.IrMetadataSourceOwner $r4;
        org.jetbrains.kotlin.ir.IrElement $r5;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata;

        r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrProperty;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "declaration");

        r2 = specialinvoke r0.<org.jetbrains.kotlin.ir.util.DeepCopyIrTreeWithSymbols: org.jetbrains.kotlin.ir.declarations.IrProperty visitProperty(org.jetbrains.kotlin.ir.declarations.IrProperty)>(r1);

        z0 = 0;

        z1 = 0;

        r3 = r2;

        $r5 = (org.jetbrains.kotlin.ir.IrElement) r3;

        $r4 = (org.jetbrains.kotlin.ir.declarations.IrMetadataSourceOwner) r1;

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: void copyMetadataFrom(org.jetbrains.kotlin.ir.IrElement,org.jetbrains.kotlin.ir.declarations.IrMetadataSourceOwner)>($r5, $r4);

        return r2;
    }

    public volatile org.jetbrains.kotlin.ir.IrStatement visitProperty(org.jetbrains.kotlin.ir.declarations.IrProperty)
    {
        androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata r0;
        org.jetbrains.kotlin.ir.declarations.IrProperty r1, $r2;
        org.jetbrains.kotlin.ir.IrStatement $r3;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata;

        r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrProperty;

        $r2 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: org.jetbrains.kotlin.ir.declarations.IrProperty visitProperty(org.jetbrains.kotlin.ir.declarations.IrProperty)>(r1);

        $r3 = (org.jetbrains.kotlin.ir.IrStatement) $r2;

        return $r3;
    }

    public org.jetbrains.kotlin.ir.declarations.IrFile visitFile(org.jetbrains.kotlin.ir.declarations.IrFile)
    {
        androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata r0;
        org.jetbrains.kotlin.ir.declarations.IrFile r1, r2, r3;
        boolean z0, z1, $z3;
        org.jetbrains.kotlin.ir.declarations.impl.IrFileImpl $r4;
        org.jetbrains.kotlin.ir.declarations.MetadataSource$File $r5;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata;

        r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrFile;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "declaration");

        r2 = specialinvoke r0.<org.jetbrains.kotlin.ir.util.DeepCopyIrTreeWithSymbols: org.jetbrains.kotlin.ir.declarations.IrFile visitFile(org.jetbrains.kotlin.ir.declarations.IrFile)>(r1);

        z0 = 0;

        z1 = 0;

        r3 = r2;

        $z3 = r3 instanceof org.jetbrains.kotlin.ir.declarations.impl.IrFileImpl;

        if $z3 == 0 goto label1;

        $r4 = (org.jetbrains.kotlin.ir.declarations.impl.IrFileImpl) r3;

        $r5 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.declarations.IrFile: org.jetbrains.kotlin.ir.declarations.MetadataSource$File getMetadata()>();

        virtualinvoke $r4.<org.jetbrains.kotlin.ir.declarations.impl.IrFileImpl: void setMetadata(org.jetbrains.kotlin.ir.declarations.MetadataSource$File)>($r5);

     label1:
        return r2;
    }

    public org.jetbrains.kotlin.ir.expressions.IrConstructorCall visitConstructorCall(org.jetbrains.kotlin.ir.expressions.IrConstructorCall)
    {
        androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata r0;
        org.jetbrains.kotlin.ir.expressions.IrConstructorCall r1, $r6, $r29;
        org.jetbrains.kotlin.ir.declarations.IrConstructor r2, r3, r38, r39;
        org.jetbrains.kotlin.ir.symbols.IrConstructorSymbol $r4, $r5, $r16, $r33, r40;
        boolean $z1, $z2, $z3, z4, z5, z7, z8;
        org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin $r7;
        org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin$IR_EXTERNAL_DECLARATION_STUB $r8;
        org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper $r9, $r14;
        org.jetbrains.kotlin.ir.declarations.IrDeclarationParent $r10, $r12;
        org.jetbrains.kotlin.ir.IrElement $r11;
        org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol $r15;
        org.jetbrains.kotlin.ir.expressions.impl.IrConstructorCallImpl $r17, r41;
        int $i0, $i1, $i2, $i3, $i4;
        org.jetbrains.kotlin.ir.types.IrType $r18, $r19;
        org.jetbrains.kotlin.ir.expressions.IrStatementOrigin $r20, $r21;
        org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression $r22, $r23, $r24, $r25;
        org.jetbrains.kotlin.ir.declarations.IrAttributeContainer $r26, $r27, $r28;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r30;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContextImpl $r31;
        org.jetbrains.kotlin.ir.linkage.IrDeserializer $r32;
        org.jetbrains.kotlin.ir.symbols.IrSymbol $r34;
        java.lang.NullPointerException $r36;
        org.jetbrains.kotlin.ir.declarations.IrFunction $r37;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrConstructorCall;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "expression");

        $r4 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrConstructorCall: org.jetbrains.kotlin.ir.symbols.IrConstructorSymbol getSymbol()>();

        $z1 = interfaceinvoke $r4.<org.jetbrains.kotlin.ir.symbols.IrConstructorSymbol: boolean isBound()>();

        if $z1 != 0 goto label2;

        $r30 = r0.<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        if $r30 != null goto label1;

        $r36 = new java.lang.NullPointerException;

        specialinvoke $r36.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type org.jetbrains.kotlin.backend.common.extensions.IrPluginContextImpl");

        throw $r36;

     label1:
        $r31 = (org.jetbrains.kotlin.backend.common.extensions.IrPluginContextImpl) $r30;

        $r32 = virtualinvoke $r31.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContextImpl: org.jetbrains.kotlin.ir.linkage.IrDeserializer getLinker()>();

        $r33 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrConstructorCall: org.jetbrains.kotlin.ir.symbols.IrConstructorSymbol getSymbol()>();

        $r34 = (org.jetbrains.kotlin.ir.symbols.IrSymbol) $r33;

        interfaceinvoke $r32.<org.jetbrains.kotlin.ir.linkage.IrDeserializer: org.jetbrains.kotlin.ir.declarations.IrDeclaration getDeclaration(org.jetbrains.kotlin.ir.symbols.IrSymbol)>($r34);

     label2:
        $r5 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrConstructorCall: org.jetbrains.kotlin.ir.symbols.IrConstructorSymbol getSymbol()>();

        $r37 = interfaceinvoke $r5.<org.jetbrains.kotlin.ir.symbols.IrConstructorSymbol: org.jetbrains.kotlin.ir.declarations.IrFunction getOwner()>();

        $z2 = $r37 instanceof org.jetbrains.kotlin.ir.declarations.IrConstructor;

        if $z2 != 0 goto label3;

        $r37 = null;

     label3:
        r2 = (org.jetbrains.kotlin.ir.declarations.IrConstructor) $r37;

        if r2 == null goto label4;

        $r7 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.declarations.IrConstructor: org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin getOrigin()>();

        $r8 = <org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin$IR_EXTERNAL_DECLARATION_STUB: org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin$IR_EXTERNAL_DECLARATION_STUB INSTANCE>;

        $z3 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r7, $r8);

        if $z3 == 0 goto label4;

        $r9 = r0.<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper symbolRemapper>;

        virtualinvoke $r9.<org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper: void visitConstructor(org.jetbrains.kotlin.ir.declarations.IrConstructor)>(r2);

        r38 = specialinvoke r0.<org.jetbrains.kotlin.ir.util.DeepCopyIrTreeWithSymbols: org.jetbrains.kotlin.ir.declarations.IrConstructor visitConstructor(org.jetbrains.kotlin.ir.declarations.IrConstructor)>(r2);

        z4 = 0;

        z5 = 0;

        r39 = r38;

        $r10 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.declarations.IrConstructor: org.jetbrains.kotlin.ir.declarations.IrDeclarationParent getParent()>();

        interfaceinvoke r39.<org.jetbrains.kotlin.ir.declarations.IrConstructor: void setParent(org.jetbrains.kotlin.ir.declarations.IrDeclarationParent)>($r10);

        $r11 = (org.jetbrains.kotlin.ir.IrElement) r39;

        $r12 = interfaceinvoke r39.<org.jetbrains.kotlin.ir.declarations.IrConstructor: org.jetbrains.kotlin.ir.declarations.IrDeclarationParent getParent()>();

        staticinvoke <org.jetbrains.kotlin.ir.util.PatchDeclarationParentsKt: org.jetbrains.kotlin.ir.IrElement patchDeclarationParents(org.jetbrains.kotlin.ir.IrElement,org.jetbrains.kotlin.ir.declarations.IrDeclarationParent)>($r11, $r12);

        r3 = r38;

        $r14 = r0.<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper symbolRemapper>;

        $r15 = interfaceinvoke r3.<org.jetbrains.kotlin.ir.declarations.IrConstructor: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getSymbol()>();

        $r16 = (org.jetbrains.kotlin.ir.symbols.IrConstructorSymbol) $r15;

        r40 = virtualinvoke $r14.<org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper: org.jetbrains.kotlin.ir.symbols.IrConstructorSymbol getReferencedConstructor(org.jetbrains.kotlin.ir.symbols.IrConstructorSymbol)>($r16);

        $r17 = new org.jetbrains.kotlin.ir.expressions.impl.IrConstructorCallImpl;

        $i0 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrConstructorCall: int getStartOffset()>();

        $i1 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrConstructorCall: int getEndOffset()>();

        $r18 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrConstructorCall: org.jetbrains.kotlin.ir.types.IrType getType()>();

        $r19 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: org.jetbrains.kotlin.ir.types.IrType remapType(org.jetbrains.kotlin.ir.types.IrType)>($r18);

        $i2 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrConstructorCall: int getTypeArgumentsCount()>();

        $i3 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrConstructorCall: int getConstructorTypeArgumentsCount()>();

        $i4 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrConstructorCall: int getValueArgumentsCount()>();

        $r20 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrConstructorCall: org.jetbrains.kotlin.ir.expressions.IrStatementOrigin getOrigin()>();

        $r21 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: org.jetbrains.kotlin.ir.expressions.IrStatementOrigin mapStatementOrigin(org.jetbrains.kotlin.ir.expressions.IrStatementOrigin)>($r20);

        specialinvoke $r17.<org.jetbrains.kotlin.ir.expressions.impl.IrConstructorCallImpl: void <init>(int,int,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.symbols.IrConstructorSymbol,int,int,int,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin)>($i0, $i1, $r19, r40, $i2, $i3, $i4, $r21);

        r41 = $r17;

        z7 = 0;

        z8 = 0;

        $r23 = (org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression) r41;

        $r22 = (org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression) r1;

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: void copyRemappedTypeArgumentsFrom(org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression,org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression)>($r23, $r22);

        $r25 = (org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression) r41;

        $r24 = (org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression) r1;

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: void transformValueArguments(org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression,org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression)>($r25, $r24);

        $r27 = (org.jetbrains.kotlin.ir.declarations.IrAttributeContainer) r41;

        $r26 = (org.jetbrains.kotlin.ir.declarations.IrAttributeContainer) r1;

        $r28 = staticinvoke <org.jetbrains.kotlin.ir.declarations.IrAttributeContainerKt: org.jetbrains.kotlin.ir.declarations.IrAttributeContainer copyAttributes(org.jetbrains.kotlin.ir.declarations.IrAttributeContainer,org.jetbrains.kotlin.ir.declarations.IrAttributeContainer)>($r27, $r26);

        $r29 = (org.jetbrains.kotlin.ir.expressions.IrConstructorCall) $r28;

        return $r29;

     label4:
        $r6 = specialinvoke r0.<org.jetbrains.kotlin.ir.util.DeepCopyIrTreeWithSymbols: org.jetbrains.kotlin.ir.expressions.IrConstructorCall visitConstructorCall(org.jetbrains.kotlin.ir.expressions.IrConstructorCall)>(r1);

        return $r6;
    }

    public volatile org.jetbrains.kotlin.ir.expressions.IrExpression visitConstructorCall(org.jetbrains.kotlin.ir.expressions.IrConstructorCall)
    {
        androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata r0;
        org.jetbrains.kotlin.ir.expressions.IrConstructorCall r1, $r2;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r3;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrConstructorCall;

        $r2 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: org.jetbrains.kotlin.ir.expressions.IrConstructorCall visitConstructorCall(org.jetbrains.kotlin.ir.expressions.IrConstructorCall)>(r1);

        $r3 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r2;

        return $r3;
    }

    public org.jetbrains.kotlin.ir.expressions.IrCall visitCall(org.jetbrains.kotlin.ir.expressions.IrCall)
    {
        androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata r0;
        org.jetbrains.kotlin.ir.expressions.IrCall r1, $r10, $r116, r124, r125;
        org.jetbrains.kotlin.ir.declarations.IrSimpleFunction r2, $r30, $r31, $r102, r103, r106, r121;
        org.jetbrains.kotlin.descriptors.ClassDescriptor r3, $r49, $r51;
        java.lang.Object r4, r99, r113;
        org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol r5, r6, $r22, $r79, r115, r123;
        org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol $r7, $r8, $r21, $r78;
        boolean $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z22, z23, z28, z29, z32, z33, z34, z35;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r9, $r63;
        org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin $r11, $r38, $r62;
        org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin$IR_EXTERNAL_DECLARATION_STUB $r12;
        org.jetbrains.kotlin.ir.symbols.IrPropertySymbol $r13, $r16, $r27, $r36, $r37;
        org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper $r14, $r20, $r29, $r65, $r77;
        org.jetbrains.kotlin.ir.declarations.IrDeclarationParent $r15, $r18, $r32, $r34, $r67, $r74;
        org.jetbrains.kotlin.ir.IrElement $r17, $r33, $r73;
        org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression $r23, $r24, $r25, $r26, $r80, $r81, $r82, $r83;
        org.jetbrains.kotlin.ir.declarations.IrSymbolOwner $r28, $r66;
        org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin$FAKE_OVERRIDE $r39;
        org.jetbrains.kotlin.types.SimpleType $r40, $r44;
        org.jetbrains.kotlin.types.KotlinType $r41, $r89;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r42;
        org.jetbrains.kotlin.ir.types.IrType $r43, $r64, $r90;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r45, $r47;
        org.jetbrains.kotlin.ir.util.ReferenceSymbolTable $r46;
        org.jetbrains.kotlin.builtins.KotlinBuiltIns $r48;
        int $i0, $i1, $i2, $i3;
        org.jetbrains.kotlin.descriptors.ClassifierDescriptor $r50;
        org.jetbrains.kotlin.resolve.scopes.MemberScope $r52;
        org.jetbrains.kotlin.name.Name $r53, $r55, $r87;
        java.lang.String $r54, $r88, r96;
        org.jetbrains.kotlin.incremental.components.NoLookupLocation $r56;
        org.jetbrains.kotlin.incremental.components.LookupLocation $r57;
        java.util.Collection $r58, r107, r109;
        java.util.NoSuchElementException $r59;
        java.lang.Throwable $r60, $r85;
        org.jetbrains.kotlin.ir.declarations.impl.IrFunctionImpl $r61;
        java.util.List $r68, $r72, r94, r110;
        java.util.ArrayList $r69;
        org.jetbrains.kotlin.ir.declarations.IrValueParameter $r70, $r71;
        org.jetbrains.kotlin.ir.expressions.IrBody $r76;
        java.lang.AssertionError $r84;
        org.jetbrains.kotlin.ir.declarations.IrFunction $r86, $r92;
        org.jetbrains.kotlin.descriptors.DeclarationDescriptor $r93;
        org.jetbrains.kotlin.ir.symbols.IrClassSymbol r95;
        java.lang.Iterable $r97, r105, r111;
        java.util.Iterator $r98, $r108, $r112;
        org.jetbrains.kotlin.descriptors.CallableMemberDescriptor r100;
        org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor r101;
        org.jetbrains.kotlin.descriptors.ValueParameterDescriptor $r114;
        org.jetbrains.kotlin.ir.declarations.IrProperty r118, r119, r120;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrCall;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "expression");

        $r7 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getSymbol()>();

        $r92 = interfaceinvoke $r7.<org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol: org.jetbrains.kotlin.ir.declarations.IrFunction getOwner()>();

        $z1 = $r92 instanceof org.jetbrains.kotlin.ir.declarations.IrSimpleFunction;

        if $z1 != 0 goto label01;

        $r92 = null;

     label01:
        r2 = (org.jetbrains.kotlin.ir.declarations.IrSimpleFunction) $r92;

        $r8 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getSymbol()>();

        $r9 = interfaceinvoke $r8.<org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol: org.jetbrains.kotlin.descriptors.FunctionDescriptor getDescriptor()>();

        $r93 = interfaceinvoke $r9.<org.jetbrains.kotlin.descriptors.FunctionDescriptor: org.jetbrains.kotlin.descriptors.DeclarationDescriptor getContainingDeclaration()>();

        $z2 = $r93 instanceof org.jetbrains.kotlin.descriptors.ClassDescriptor;

        if $z2 != 0 goto label02;

        $r93 = null;

     label02:
        r3 = (org.jetbrains.kotlin.descriptors.ClassDescriptor) $r93;

        if r2 == null goto label15;

        $r38 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin getOrigin()>();

        $r39 = <org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin$FAKE_OVERRIDE: org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin$FAKE_OVERRIDE INSTANCE>;

        $z4 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r38, $r39);

        if $z4 == 0 goto label15;

        if r3 == null goto label15;

        $r40 = interfaceinvoke r3.<org.jetbrains.kotlin.descriptors.ClassDescriptor: org.jetbrains.kotlin.types.SimpleType getDefaultType()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r40, "containingClass.defaultType");

        $r41 = (org.jetbrains.kotlin.types.KotlinType) $r40;

        $z5 = staticinvoke <org.jetbrains.kotlin.builtins.FunctionTypesKt: boolean isFunctionType(org.jetbrains.kotlin.types.KotlinType)>($r41);

        if $z5 == 0 goto label15;

        $r42 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.expressions.IrExpression getDispatchReceiver()>();

        if $r42 == null goto label03;

        $r43 = interfaceinvoke $r42.<org.jetbrains.kotlin.ir.expressions.IrExpression: org.jetbrains.kotlin.ir.types.IrType getType()>();

        if $r43 == null goto label03;

        $z6 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: boolean isComposable(org.jetbrains.kotlin.ir.types.IrType)>($r43);

        if $z6 != 1 goto label15;

        goto label04;

     label03:
        goto label15;

     label04:
        $r44 = interfaceinvoke r3.<org.jetbrains.kotlin.descriptors.ClassDescriptor: org.jetbrains.kotlin.types.SimpleType getDefaultType()>();

        r94 = virtualinvoke $r44.<org.jetbrains.kotlin.types.SimpleType: java.util.List getArguments()>();

        $r45 = r0.<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r46 = interfaceinvoke $r45.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.ir.util.ReferenceSymbolTable getSymbolTable()>();

        $r47 = r0.<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context>;

        $r48 = interfaceinvoke $r47.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.builtins.KotlinBuiltIns getBuiltIns()>();

        $i0 = interfaceinvoke r94.<java.util.List: int size()>();

        $r49 = virtualinvoke $r48.<org.jetbrains.kotlin.builtins.KotlinBuiltIns: org.jetbrains.kotlin.descriptors.ClassDescriptor getFunction(int)>($i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r49, "context.builtIns\n       \u2026ction(typeArguments.size)");

        r95 = interfaceinvoke $r46.<org.jetbrains.kotlin.ir.util.ReferenceSymbolTable: org.jetbrains.kotlin.ir.symbols.IrClassSymbol referenceClass(org.jetbrains.kotlin.descriptors.ClassDescriptor)>($r49);

        $r50 = interfaceinvoke r95.<org.jetbrains.kotlin.ir.symbols.IrClassSymbol: org.jetbrains.kotlin.descriptors.ClassifierDescriptor getDescriptor()>();

        $r51 = (org.jetbrains.kotlin.descriptors.ClassDescriptor) $r50;

        $r52 = interfaceinvoke $r51.<org.jetbrains.kotlin.descriptors.ClassDescriptor: org.jetbrains.kotlin.resolve.scopes.MemberScope getUnsubstitutedMemberScope()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r52, "newFnClass\n             \u2026.unsubstitutedMemberScope");

        $r53 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: org.jetbrains.kotlin.name.Name getName()>();

        $r54 = virtualinvoke $r53.<org.jetbrains.kotlin.name.Name: java.lang.String getIdentifier()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r54, "ownerFn.name.identifier");

        r96 = $r54;

        $r55 = staticinvoke <org.jetbrains.kotlin.name.Name: org.jetbrains.kotlin.name.Name identifier(java.lang.String)>(r96);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r55, "Name.identifier(name)");

        $r56 = <org.jetbrains.kotlin.incremental.components.NoLookupLocation: org.jetbrains.kotlin.incremental.components.NoLookupLocation FROM_BACKEND>;

        $r57 = (org.jetbrains.kotlin.incremental.components.LookupLocation) $r56;

        $r58 = interfaceinvoke $r52.<org.jetbrains.kotlin.resolve.scopes.MemberScope: java.util.Collection getContributedFunctions(org.jetbrains.kotlin.name.Name,org.jetbrains.kotlin.incremental.components.LookupLocation)>($r55, $r57);

        $r97 = (java.lang.Iterable) $r58;

        $r98 = interfaceinvoke $r97.<java.lang.Iterable: java.util.Iterator iterator()>();

     label05:
        $z7 = interfaceinvoke $r98.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label06;

        r99 = interfaceinvoke $r98.<java.util.Iterator: java.lang.Object next()>();

        r100 = (org.jetbrains.kotlin.descriptors.CallableMemberDescriptor) r99;

        if 1 == 0 goto label05;

        goto label07;

     label06:
        $r59 = new java.util.NoSuchElementException;

        specialinvoke $r59.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Collection contains no element matching the predicate.");

        $r60 = (java.lang.Throwable) $r59;

        throw $r60;

     label07:
        r101 = (org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor) r99;

        $r61 = new org.jetbrains.kotlin.ir.declarations.impl.IrFunctionImpl;

        $i1 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: int getStartOffset()>();

        $i2 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: int getEndOffset()>();

        $r62 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin getOrigin()>();

        $r63 = (org.jetbrains.kotlin.descriptors.FunctionDescriptor) r101;

        $r64 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.types.IrType getType()>();

        specialinvoke $r61.<org.jetbrains.kotlin.ir.declarations.impl.IrFunctionImpl: void <init>(int,int,org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin,org.jetbrains.kotlin.descriptors.FunctionDescriptor,org.jetbrains.kotlin.ir.types.IrType)>($i1, $i2, $r62, $r63, $r64);

        $r102 = (org.jetbrains.kotlin.ir.declarations.IrSimpleFunction) $r61;

        $r65 = r0.<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper symbolRemapper>;

        virtualinvoke $r65.<org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper: void visitSimpleFunction(org.jetbrains.kotlin.ir.declarations.IrSimpleFunction)>($r102);

        r103 = specialinvoke r0.<org.jetbrains.kotlin.ir.util.DeepCopyIrTreeWithSymbols: org.jetbrains.kotlin.ir.declarations.IrSimpleFunction visitSimpleFunction(org.jetbrains.kotlin.ir.declarations.IrSimpleFunction)>($r102);

        $r66 = interfaceinvoke r95.<org.jetbrains.kotlin.ir.symbols.IrClassSymbol: org.jetbrains.kotlin.ir.declarations.IrSymbolOwner getOwner()>();

        $r67 = (org.jetbrains.kotlin.ir.declarations.IrDeclarationParent) $r66;

        interfaceinvoke r103.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: void setParent(org.jetbrains.kotlin.ir.declarations.IrDeclarationParent)>($r67);

        $r68 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: java.util.List getOverriddenSymbols()>();

        r105 = (java.lang.Iterable) $r68;

        r106 = r103;

        $r69 = new java.util.ArrayList;

        $i3 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>(r105, 10);

        specialinvoke $r69.<java.util.ArrayList: void <init>(int)>($i3);

        r107 = (java.util.Collection) $r69;

        $r108 = interfaceinvoke r105.<java.lang.Iterable: java.util.Iterator iterator()>();

     label08:
        $z8 = interfaceinvoke $r108.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label09;

        r4 = interfaceinvoke $r108.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol) r4;

        r109 = r107;

        r6 = r5;

        interfaceinvoke r109.<java.util.Collection: boolean add(java.lang.Object)>(r6);

        goto label08;

     label09:
        r110 = (java.util.List) r107;

        interfaceinvoke r106.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: void setOverriddenSymbols(java.util.List)>(r110);

        $r70 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: org.jetbrains.kotlin.ir.declarations.IrValueParameter getDispatchReceiverParameter()>();

        interfaceinvoke r103.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: void setDispatchReceiverParameter(org.jetbrains.kotlin.ir.declarations.IrValueParameter)>($r70);

        $r71 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: org.jetbrains.kotlin.ir.declarations.IrValueParameter getExtensionReceiverParameter()>();

        interfaceinvoke r103.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: void setExtensionReceiverParameter(org.jetbrains.kotlin.ir.declarations.IrValueParameter)>($r71);

        $r72 = interfaceinvoke r101.<org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor: java.util.List getValueParameters()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r72, "newDescriptor.valueParameters");

        r111 = (java.lang.Iterable) $r72;

        $r112 = interfaceinvoke r111.<java.lang.Iterable: java.util.Iterator iterator()>();

     label10:
        $z9 = interfaceinvoke $r112.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label11;

        r113 = interfaceinvoke $r112.<java.util.Iterator: java.lang.Object next()>();

        $r114 = (org.jetbrains.kotlin.descriptors.ValueParameterDescriptor) r113;

        $r86 = (org.jetbrains.kotlin.ir.declarations.IrFunction) r103;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r114, "p");

        $r87 = interfaceinvoke $r114.<org.jetbrains.kotlin.descriptors.ValueParameterDescriptor: org.jetbrains.kotlin.name.Name getName()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r87, "p.name");

        $r88 = virtualinvoke $r87.<org.jetbrains.kotlin.name.Name: java.lang.String getIdentifier()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r88, "p.name.identifier");

        $r89 = interfaceinvoke $r114.<org.jetbrains.kotlin.descriptors.ValueParameterDescriptor: org.jetbrains.kotlin.types.KotlinType getType()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r89, "p.type");

        $r90 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: org.jetbrains.kotlin.ir.types.IrType toIrType(org.jetbrains.kotlin.types.KotlinType)>($r89);

        staticinvoke <org.jetbrains.kotlin.ir.builders.declarations.DeclarationBuildersKt: org.jetbrains.kotlin.ir.declarations.IrValueParameter addValueParameter$default(org.jetbrains.kotlin.ir.declarations.IrFunction,java.lang.String,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin,int,java.lang.Object)>($r86, $r88, $r90, null, 4, null);

        goto label10;

     label11:
        $r73 = (org.jetbrains.kotlin.ir.IrElement) r103;

        $r74 = interfaceinvoke r103.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: org.jetbrains.kotlin.ir.declarations.IrDeclarationParent getParent()>();

        staticinvoke <org.jetbrains.kotlin.ir.util.PatchDeclarationParentsKt: org.jetbrains.kotlin.ir.IrElement patchDeclarationParents(org.jetbrains.kotlin.ir.IrElement,org.jetbrains.kotlin.ir.declarations.IrDeclarationParent)>($r73, $r74);

        $r76 = interfaceinvoke r103.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: org.jetbrains.kotlin.ir.expressions.IrBody getBody()>();

        if $r76 != null goto label12;

        $z22 = 1;

        goto label13;

     label12:
        $z22 = 0;

     label13:
        z23 = $z22;

        $z10 = <kotlin._Assertions: boolean ENABLED>;

        if $z10 == 0 goto label14;

        if z23 != 0 goto label14;

        $r84 = new java.lang.AssertionError;

        specialinvoke $r84.<java.lang.AssertionError: void <init>(java.lang.Object)>("expected body to be null");

        $r85 = (java.lang.Throwable) $r84;

        throw $r85;

     label14:
        $r77 = r0.<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper symbolRemapper>;

        $r78 = interfaceinvoke r103.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getSymbol()>();

        $r79 = (org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol) $r78;

        r115 = virtualinvoke $r77.<org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper: org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol getReferencedSimpleFunction(org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol)>($r79);

        $r116 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: org.jetbrains.kotlin.ir.expressions.IrCall shallowCopyCall(org.jetbrains.kotlin.ir.expressions.IrCall,org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol)>(r1, r115);

        z28 = 0;

        $r81 = (org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression) $r116;

        $r80 = (org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression) r1;

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: void copyRemappedTypeArgumentsFrom(org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression,org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression)>($r81, $r80);

        $r83 = (org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression) $r116;

        $r82 = (org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression) r1;

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: void transformValueArguments(org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression,org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression)>($r83, $r82);

        return $r116;

     label15:
        if r2 == null goto label20;

        $r11 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin getOrigin()>();

        $r12 = <org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin$IR_EXTERNAL_DECLARATION_STUB: org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin$IR_EXTERNAL_DECLARATION_STUB INSTANCE>;

        $z3 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r11, $r12);

        if $z3 == 0 goto label20;

        $r13 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: org.jetbrains.kotlin.ir.symbols.IrPropertySymbol getCorrespondingPropertySymbol()>();

        if $r13 == null goto label18;

        $r27 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: org.jetbrains.kotlin.ir.symbols.IrPropertySymbol getCorrespondingPropertySymbol()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r27);

        $r28 = interfaceinvoke $r27.<org.jetbrains.kotlin.ir.symbols.IrPropertySymbol: org.jetbrains.kotlin.ir.declarations.IrSymbolOwner getOwner()>();

        r118 = (org.jetbrains.kotlin.ir.declarations.IrProperty) $r28;

        $r29 = r0.<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper symbolRemapper>;

        virtualinvoke $r29.<org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper: void visitProperty(org.jetbrains.kotlin.ir.declarations.IrProperty)>(r118);

        r119 = specialinvoke r0.<org.jetbrains.kotlin.ir.util.DeepCopyIrTreeWithSymbols: org.jetbrains.kotlin.ir.declarations.IrProperty visitProperty(org.jetbrains.kotlin.ir.declarations.IrProperty)>(r118);

        z29 = 0;

        r120 = r119;

        $r30 = interfaceinvoke r120.<org.jetbrains.kotlin.ir.declarations.IrProperty: org.jetbrains.kotlin.ir.declarations.IrSimpleFunction getGetter()>();

        if $r30 == null goto label16;

        $r37 = interfaceinvoke r120.<org.jetbrains.kotlin.ir.declarations.IrProperty: org.jetbrains.kotlin.ir.symbols.IrPropertySymbol getSymbol()>();

        interfaceinvoke $r30.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: void setCorrespondingPropertySymbol(org.jetbrains.kotlin.ir.symbols.IrPropertySymbol)>($r37);

        goto label16;

     label16:
        $r31 = interfaceinvoke r120.<org.jetbrains.kotlin.ir.declarations.IrProperty: org.jetbrains.kotlin.ir.declarations.IrSimpleFunction getSetter()>();

        if $r31 == null goto label17;

        $r36 = interfaceinvoke r120.<org.jetbrains.kotlin.ir.declarations.IrProperty: org.jetbrains.kotlin.ir.symbols.IrPropertySymbol getSymbol()>();

        interfaceinvoke $r31.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: void setCorrespondingPropertySymbol(org.jetbrains.kotlin.ir.symbols.IrPropertySymbol)>($r36);

        goto label17;

     label17:
        $r32 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: org.jetbrains.kotlin.ir.declarations.IrDeclarationParent getParent()>();

        interfaceinvoke r120.<org.jetbrains.kotlin.ir.declarations.IrProperty: void setParent(org.jetbrains.kotlin.ir.declarations.IrDeclarationParent)>($r32);

        $r33 = (org.jetbrains.kotlin.ir.IrElement) r120;

        $r34 = interfaceinvoke r120.<org.jetbrains.kotlin.ir.declarations.IrProperty: org.jetbrains.kotlin.ir.declarations.IrDeclarationParent getParent()>();

        staticinvoke <org.jetbrains.kotlin.ir.util.PatchDeclarationParentsKt: org.jetbrains.kotlin.ir.IrElement patchDeclarationParents(org.jetbrains.kotlin.ir.IrElement,org.jetbrains.kotlin.ir.declarations.IrDeclarationParent)>($r33, $r34);

        goto label19;

     label18:
        $r14 = r0.<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper symbolRemapper>;

        virtualinvoke $r14.<org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper: void visitSimpleFunction(org.jetbrains.kotlin.ir.declarations.IrSimpleFunction)>(r2);

        r121 = specialinvoke r0.<org.jetbrains.kotlin.ir.util.DeepCopyIrTreeWithSymbols: org.jetbrains.kotlin.ir.declarations.IrSimpleFunction visitSimpleFunction(org.jetbrains.kotlin.ir.declarations.IrSimpleFunction)>(r2);

        z32 = 0;

        z33 = 0;

        z34 = 0;

        $r15 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: org.jetbrains.kotlin.ir.declarations.IrDeclarationParent getParent()>();

        interfaceinvoke r121.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: void setParent(org.jetbrains.kotlin.ir.declarations.IrDeclarationParent)>($r15);

        $r16 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: org.jetbrains.kotlin.ir.symbols.IrPropertySymbol getCorrespondingPropertySymbol()>();

        interfaceinvoke r121.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: void setCorrespondingPropertySymbol(org.jetbrains.kotlin.ir.symbols.IrPropertySymbol)>($r16);

        $r17 = (org.jetbrains.kotlin.ir.IrElement) r121;

        $r18 = interfaceinvoke r121.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: org.jetbrains.kotlin.ir.declarations.IrDeclarationParent getParent()>();

        staticinvoke <org.jetbrains.kotlin.ir.util.PatchDeclarationParentsKt: org.jetbrains.kotlin.ir.IrElement patchDeclarationParents(org.jetbrains.kotlin.ir.IrElement,org.jetbrains.kotlin.ir.declarations.IrDeclarationParent)>($r17, $r18);

     label19:
        $r20 = r0.<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper symbolRemapper>;

        $r21 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getSymbol()>();

        $r22 = (org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol) $r21;

        r123 = virtualinvoke $r20.<org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper: org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol getReferencedSimpleFunction(org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol)>($r22);

        r124 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: org.jetbrains.kotlin.ir.expressions.IrCall shallowCopyCall(org.jetbrains.kotlin.ir.expressions.IrCall,org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol)>(r1, r123);

        z35 = 0;

        r125 = r124;

        $r24 = (org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression) r125;

        $r23 = (org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression) r1;

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: void copyRemappedTypeArgumentsFrom(org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression,org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression)>($r24, $r23);

        $r26 = (org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression) r125;

        $r25 = (org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression) r1;

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: void transformValueArguments(org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression,org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression)>($r26, $r25);

        return r124;

     label20:
        $r10 = specialinvoke r0.<org.jetbrains.kotlin.ir.util.DeepCopyIrTreeWithSymbols: org.jetbrains.kotlin.ir.expressions.IrCall visitCall(org.jetbrains.kotlin.ir.expressions.IrCall)>(r1);

        return $r10;
    }

    public volatile org.jetbrains.kotlin.ir.expressions.IrExpression visitCall(org.jetbrains.kotlin.ir.expressions.IrCall)
    {
        androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata r0;
        org.jetbrains.kotlin.ir.expressions.IrCall r1, $r2;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r3;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrCall;

        $r2 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: org.jetbrains.kotlin.ir.expressions.IrCall visitCall(org.jetbrains.kotlin.ir.expressions.IrCall)>(r1);

        $r3 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r2;

        return $r3;
    }

    private final org.jetbrains.kotlin.ir.expressions.IrCall shallowCopyCall(org.jetbrains.kotlin.ir.expressions.IrCall, org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol)
    {
        androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata r0;
        org.jetbrains.kotlin.ir.expressions.IrCall r1, $r18;
        org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol r2;
        org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl r3, $r4;
        boolean z0, z1;
        int $i0, $i1, $i2, $i3;
        org.jetbrains.kotlin.ir.types.IrType $r5, $r6;
        org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol $r7;
        org.jetbrains.kotlin.ir.expressions.IrStatementOrigin $r8, $r9;
        org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper $r10;
        org.jetbrains.kotlin.ir.symbols.IrClassSymbol $r11, $r12;
        org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression $r13, $r14;
        org.jetbrains.kotlin.ir.declarations.IrAttributeContainer $r15, $r16, $r17;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrCall;

        r2 := @parameter1: org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol;

        $r4 = new org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl;

        $i0 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrCall: int getStartOffset()>();

        $i1 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrCall: int getEndOffset()>();

        $r5 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.types.IrType getType()>();

        $r6 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: org.jetbrains.kotlin.ir.types.IrType remapType(org.jetbrains.kotlin.ir.types.IrType)>($r5);

        $r7 = (org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol) r2;

        $i2 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrCall: int getTypeArgumentsCount()>();

        $i3 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrCall: int getValueArgumentsCount()>();

        $r8 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.expressions.IrStatementOrigin getOrigin()>();

        $r9 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: org.jetbrains.kotlin.ir.expressions.IrStatementOrigin mapStatementOrigin(org.jetbrains.kotlin.ir.expressions.IrStatementOrigin)>($r8);

        $r10 = r0.<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper symbolRemapper>;

        $r11 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.symbols.IrClassSymbol getSuperQualifierSymbol()>();

        $r12 = virtualinvoke $r10.<org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper: org.jetbrains.kotlin.ir.symbols.IrClassSymbol getReferencedClassOrNull(org.jetbrains.kotlin.ir.symbols.IrClassSymbol)>($r11);

        specialinvoke $r4.<org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl: void <init>(int,int,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol,int,int,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,org.jetbrains.kotlin.ir.symbols.IrClassSymbol)>($i0, $i1, $r6, $r7, $i2, $i3, $r9, $r12);

        r3 = $r4;

        z0 = 0;

        z1 = 0;

        $r14 = (org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression) r3;

        $r13 = (org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression) r1;

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: void copyRemappedTypeArgumentsFrom(org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression,org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression)>($r14, $r13);

        $r16 = (org.jetbrains.kotlin.ir.declarations.IrAttributeContainer) r3;

        $r15 = (org.jetbrains.kotlin.ir.declarations.IrAttributeContainer) r1;

        $r17 = staticinvoke <org.jetbrains.kotlin.ir.declarations.IrAttributeContainerKt: org.jetbrains.kotlin.ir.declarations.IrAttributeContainer copyAttributes(org.jetbrains.kotlin.ir.declarations.IrAttributeContainer,org.jetbrains.kotlin.ir.declarations.IrAttributeContainer)>($r16, $r15);

        $r18 = (org.jetbrains.kotlin.ir.expressions.IrCall) $r17;

        return $r18;
    }

    private final void copyRemappedTypeArgumentsFrom(org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression, org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression)
    {
        androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata r0;
        org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression $r1, r2;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;
        boolean $z0, $z1, z2, z3;
        org.jetbrains.kotlin.ir.types.IrType $r3, $r14;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r10;
        java.lang.AssertionError $r11;
        java.lang.Throwable $r12;
        java.lang.String $r13;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression;

        r2 := @parameter1: org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression;

        $i0 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression: int getTypeArgumentsCount()>();

        $i1 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression: int getTypeArgumentsCount()>();

        if $i0 != $i1 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        z2 = $z1;

        z3 = 0;

        $z0 = <kotlin._Assertions: boolean ENABLED>;

        if $z0 == 0 goto label3;

        if z2 != 0 goto label3;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mismatching type arguments: ");

        $i3 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression: int getTypeArgumentsCount()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" vs ");

        $i4 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression: int getTypeArgumentsCount()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>(java.lang.Object)>($r13);

        $r12 = (java.lang.Throwable) $r11;

        throw $r12;

     label3:
        i5 = 0;

        i6 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression: int getTypeArgumentsCount()>();

     label4:
        if i5 >= i6 goto label7;

        $i2 = i5;

        $r3 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression: org.jetbrains.kotlin.ir.types.IrType getTypeArgument(int)>(i5);

        if $r3 == null goto label5;

        $r14 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: org.jetbrains.kotlin.ir.types.IrType remapType(org.jetbrains.kotlin.ir.types.IrType)>($r3);

        goto label6;

     label5:
        $r14 = null;

     label6:
        interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression: void putTypeArgument(int,org.jetbrains.kotlin.ir.types.IrType)>($i2, $r14);

        i5 = i5 + 1;

        goto label4;

     label7:
        return;
    }

    private final void transformValueArguments(org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression, org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression)
    {
        androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata r0;
        org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression $r1, r2;
        int i0, $i1, i2;
        org.jetbrains.kotlin.ir.IrElement $r3, $r8, $r10;
        org.jetbrains.kotlin.ir.util.DeepCopyIrTreeWithSymbols r4;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r6, $r9, $r13;
        org.jetbrains.kotlin.ir.visitors.IrElementTransformer $r7;
        java.lang.NullPointerException $r12;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression;

        r2 := @parameter1: org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression;

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression transformReceiverArguments(org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression,org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression)>($r1, r2);

        i2 = 0;

        i0 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression: int getValueArgumentsCount()>();

     label1:
        if i2 >= i0 goto label5;

        $i1 = i2;

        $r6 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression: org.jetbrains.kotlin.ir.expressions.IrExpression getValueArgument(int)>(i2);

        if $r6 == null goto label3;

        $r3 = (org.jetbrains.kotlin.ir.IrElement) $r6;

        r4 = (org.jetbrains.kotlin.ir.util.DeepCopyIrTreeWithSymbols) r0;

        $r7 = (org.jetbrains.kotlin.ir.visitors.IrElementTransformer) r4;

        $r8 = interfaceinvoke $r3.<org.jetbrains.kotlin.ir.IrElement: org.jetbrains.kotlin.ir.IrElement transform(org.jetbrains.kotlin.ir.visitors.IrElementTransformer,java.lang.Object)>($r7, null);

        if $r8 != null goto label2;

        $r12 = new java.lang.NullPointerException;

        specialinvoke $r12.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type org.jetbrains.kotlin.ir.expressions.IrExpression");

        throw $r12;

     label2:
        $r9 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r8;

        $r10 = (org.jetbrains.kotlin.ir.IrElement) $r9;

        $r13 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r10;

        goto label4;

     label3:
        $r13 = null;

     label4:
        interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression: void putValueArgument(int,org.jetbrains.kotlin.ir.expressions.IrExpression)>($i1, $r13);

        i2 = i2 + 1;

        goto label1;

     label5:
        return;
    }

    private final org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression transformReceiverArguments(org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression, org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression)
    {
        androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata r0;
        org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression $r1, r2, r3;
        boolean z0, z1;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r5, $r6, $r9, $r15, $r21, $r24;
        org.jetbrains.kotlin.ir.visitors.IrElementTransformer $r7, $r13;
        org.jetbrains.kotlin.ir.IrElement $r8, $r10, $r14, $r16, $r19, $r22;
        java.lang.NullPointerException $r12, $r18;
        org.jetbrains.kotlin.ir.util.DeepCopyIrTreeWithSymbols r20, r23;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression;

        r2 := @parameter1: org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression;

        r3 = $r1;

        z0 = 0;

        z1 = 0;

        $r5 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression: org.jetbrains.kotlin.ir.expressions.IrExpression getDispatchReceiver()>();

        if $r5 == null goto label2;

        $r19 = (org.jetbrains.kotlin.ir.IrElement) $r5;

        r20 = (org.jetbrains.kotlin.ir.util.DeepCopyIrTreeWithSymbols) r0;

        $r13 = (org.jetbrains.kotlin.ir.visitors.IrElementTransformer) r20;

        $r14 = interfaceinvoke $r19.<org.jetbrains.kotlin.ir.IrElement: org.jetbrains.kotlin.ir.IrElement transform(org.jetbrains.kotlin.ir.visitors.IrElementTransformer,java.lang.Object)>($r13, null);

        if $r14 != null goto label1;

        $r18 = new java.lang.NullPointerException;

        specialinvoke $r18.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type org.jetbrains.kotlin.ir.expressions.IrExpression");

        throw $r18;

     label1:
        $r15 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r14;

        $r16 = (org.jetbrains.kotlin.ir.IrElement) $r15;

        $r21 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r16;

        goto label3;

     label2:
        $r21 = null;

     label3:
        interfaceinvoke r3.<org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression: void setDispatchReceiver(org.jetbrains.kotlin.ir.expressions.IrExpression)>($r21);

        $r6 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression: org.jetbrains.kotlin.ir.expressions.IrExpression getExtensionReceiver()>();

        if $r6 == null goto label5;

        $r22 = (org.jetbrains.kotlin.ir.IrElement) $r6;

        r23 = (org.jetbrains.kotlin.ir.util.DeepCopyIrTreeWithSymbols) r0;

        $r7 = (org.jetbrains.kotlin.ir.visitors.IrElementTransformer) r23;

        $r8 = interfaceinvoke $r22.<org.jetbrains.kotlin.ir.IrElement: org.jetbrains.kotlin.ir.IrElement transform(org.jetbrains.kotlin.ir.visitors.IrElementTransformer,java.lang.Object)>($r7, null);

        if $r8 != null goto label4;

        $r12 = new java.lang.NullPointerException;

        specialinvoke $r12.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type org.jetbrains.kotlin.ir.expressions.IrExpression");

        throw $r12;

     label4:
        $r9 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r8;

        $r10 = (org.jetbrains.kotlin.ir.IrElement) $r9;

        $r24 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r10;

        goto label6;

     label5:
        $r24 = null;

     label6:
        interfaceinvoke r3.<org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression: void setExtensionReceiver(org.jetbrains.kotlin.ir.expressions.IrExpression)>($r24);

        return r3;
    }

    private final void copyMetadataFrom(org.jetbrains.kotlin.ir.IrElement, org.jetbrains.kotlin.ir.declarations.IrMetadataSourceOwner)
    {
        androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata r0;
        org.jetbrains.kotlin.ir.IrElement $r1, r3;
        org.jetbrains.kotlin.ir.declarations.IrMetadataSourceOwner r2;
        boolean $z0, $z1, $z2;
        org.jetbrains.kotlin.ir.declarations.impl.IrClassImpl $r4;
        org.jetbrains.kotlin.ir.declarations.MetadataSource $r5, $r7, $r9;
        org.jetbrains.kotlin.ir.declarations.impl.IrFunctionBase $r6;
        org.jetbrains.kotlin.ir.declarations.impl.IrPropertyImpl $r8;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.IrElement;

        r2 := @parameter1: org.jetbrains.kotlin.ir.declarations.IrMetadataSourceOwner;

        r3 = $r1;

        $z0 = r3 instanceof org.jetbrains.kotlin.ir.declarations.impl.IrPropertyImpl;

        if $z0 == 0 goto label1;

        $r8 = (org.jetbrains.kotlin.ir.declarations.impl.IrPropertyImpl) $r1;

        $r9 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.declarations.IrMetadataSourceOwner: org.jetbrains.kotlin.ir.declarations.MetadataSource getMetadata()>();

        virtualinvoke $r8.<org.jetbrains.kotlin.ir.declarations.impl.IrPropertyImpl: void setMetadata(org.jetbrains.kotlin.ir.declarations.MetadataSource)>($r9);

        goto label3;

     label1:
        $z1 = r3 instanceof org.jetbrains.kotlin.ir.declarations.impl.IrFunctionBase;

        if $z1 == 0 goto label2;

        $r6 = (org.jetbrains.kotlin.ir.declarations.impl.IrFunctionBase) $r1;

        $r7 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.declarations.IrMetadataSourceOwner: org.jetbrains.kotlin.ir.declarations.MetadataSource getMetadata()>();

        virtualinvoke $r6.<org.jetbrains.kotlin.ir.declarations.impl.IrFunctionBase: void setMetadata(org.jetbrains.kotlin.ir.declarations.MetadataSource)>($r7);

        goto label3;

     label2:
        $z2 = r3 instanceof org.jetbrains.kotlin.ir.declarations.impl.IrClassImpl;

        if $z2 == 0 goto label3;

        $r4 = (org.jetbrains.kotlin.ir.declarations.impl.IrClassImpl) $r1;

        $r5 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.declarations.IrMetadataSourceOwner: org.jetbrains.kotlin.ir.declarations.MetadataSource getMetadata()>();

        virtualinvoke $r4.<org.jetbrains.kotlin.ir.declarations.impl.IrClassImpl: void setMetadata(org.jetbrains.kotlin.ir.declarations.MetadataSource)>($r5);

        goto label3;

     label3:
        return;
    }

    private final boolean isComposable(org.jetbrains.kotlin.ir.types.IrType)
    {
        androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata r0;
        org.jetbrains.kotlin.ir.types.IrType $r1;
        java.util.List $r2;
        androidx.compose.compiler.plugins.kotlin.ComposeFqNames $r3;
        org.jetbrains.kotlin.name.FqName $r4;
        boolean $z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.types.IrType;

        $r2 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.types.IrType: java.util.List getAnnotations()>();

        $r3 = <androidx.compose.compiler.plugins.kotlin.ComposeFqNames: androidx.compose.compiler.plugins.kotlin.ComposeFqNames INSTANCE>;

        $r4 = virtualinvoke $r3.<androidx.compose.compiler.plugins.kotlin.ComposeFqNames: org.jetbrains.kotlin.name.FqName getComposable()>();

        $z0 = staticinvoke <org.jetbrains.kotlin.ir.util.AdditionalIrUtilsKt: boolean hasAnnotation(java.util.List,org.jetbrains.kotlin.name.FqName)>($r2, $r4);

        return $z0;
    }

    private final org.jetbrains.kotlin.ir.types.IrType toIrType(org.jetbrains.kotlin.types.KotlinType)
    {
        androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata r0;
        org.jetbrains.kotlin.types.KotlinType $r1;
        org.jetbrains.kotlin.ir.util.TypeTranslator $r2;
        org.jetbrains.kotlin.ir.types.IrType $r3;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata;

        $r1 := @parameter0: org.jetbrains.kotlin.types.KotlinType;

        $r2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: org.jetbrains.kotlin.ir.util.TypeTranslator typeTranslator>;

        $r3 = virtualinvoke $r2.<org.jetbrains.kotlin.ir.util.TypeTranslator: org.jetbrains.kotlin.ir.types.IrType translateType(org.jetbrains.kotlin.types.KotlinType)>($r1);

        return $r3;
    }

    public void <init>(org.jetbrains.kotlin.backend.common.extensions.IrPluginContext, org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper, org.jetbrains.kotlin.ir.util.TypeRemapper, org.jetbrains.kotlin.ir.util.TypeTranslator, org.jetbrains.kotlin.ir.util.SymbolRenamer)
    {
        androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata r0;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext r1;
        org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper r2;
        org.jetbrains.kotlin.ir.util.TypeRemapper r3;
        org.jetbrains.kotlin.ir.util.TypeTranslator r4;
        org.jetbrains.kotlin.ir.util.SymbolRenamer r5;
        org.jetbrains.kotlin.ir.util.SymbolRemapper $r6;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata;

        r1 := @parameter0: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext;

        r2 := @parameter1: org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper;

        r3 := @parameter2: org.jetbrains.kotlin.ir.util.TypeRemapper;

        r4 := @parameter3: org.jetbrains.kotlin.ir.util.TypeTranslator;

        r5 := @parameter4: org.jetbrains.kotlin.ir.util.SymbolRenamer;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "context");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "symbolRemapper");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "typeRemapper");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "typeTranslator");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r5, "symbolRenamer");

        $r6 = (org.jetbrains.kotlin.ir.util.SymbolRemapper) r2;

        specialinvoke r0.<org.jetbrains.kotlin.ir.util.DeepCopyIrTreeWithSymbols: void <init>(org.jetbrains.kotlin.ir.util.SymbolRemapper,org.jetbrains.kotlin.ir.util.TypeRemapper,org.jetbrains.kotlin.ir.util.SymbolRenamer)>($r6, r3, r5);

        r0.<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext context> = r1;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper symbolRemapper> = r2;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: org.jetbrains.kotlin.ir.util.TypeRemapper typeRemapper> = r3;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: org.jetbrains.kotlin.ir.util.TypeTranslator typeTranslator> = r4;

        return;
    }

    public void <init>(org.jetbrains.kotlin.backend.common.extensions.IrPluginContext, org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper, org.jetbrains.kotlin.ir.util.TypeRemapper, org.jetbrains.kotlin.ir.util.TypeTranslator, org.jetbrains.kotlin.ir.util.SymbolRenamer, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata r0;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext r1;
        org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper r2;
        org.jetbrains.kotlin.ir.util.TypeRemapper r3;
        org.jetbrains.kotlin.ir.util.TypeTranslator r4;
        int i0, $i1;
        kotlin.jvm.internal.DefaultConstructorMarker r5;
        org.jetbrains.kotlin.ir.util.SymbolRenamer$DEFAULT $r6;
        org.jetbrains.kotlin.ir.util.SymbolRenamer r7;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata;

        r1 := @parameter0: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext;

        r2 := @parameter1: org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper;

        r3 := @parameter2: org.jetbrains.kotlin.ir.util.TypeRemapper;

        r4 := @parameter3: org.jetbrains.kotlin.ir.util.TypeTranslator;

        r7 := @parameter4: org.jetbrains.kotlin.ir.util.SymbolRenamer;

        i0 := @parameter5: int;

        r5 := @parameter6: kotlin.jvm.internal.DefaultConstructorMarker;

        $i1 = i0 & 16;

        if $i1 == 0 goto label1;

        $r6 = <org.jetbrains.kotlin.ir.util.SymbolRenamer$DEFAULT: org.jetbrains.kotlin.ir.util.SymbolRenamer$DEFAULT INSTANCE>;

        r7 = (org.jetbrains.kotlin.ir.util.SymbolRenamer) $r6;

     label1:
        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.DeepCopyIrTreeWithSymbolsPreservingMetadata: void <init>(org.jetbrains.kotlin.backend.common.extensions.IrPluginContext,org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper,org.jetbrains.kotlin.ir.util.TypeRemapper,org.jetbrains.kotlin.ir.util.TypeTranslator,org.jetbrains.kotlin.ir.util.SymbolRenamer)>(r1, r2, r3, r4, r7);

        return;
    }

