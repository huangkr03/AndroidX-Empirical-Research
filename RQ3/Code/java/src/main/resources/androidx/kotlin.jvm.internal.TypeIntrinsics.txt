kotlin.jvm.internal.TypeIntrinsics
    public void <init>()
    {
        kotlin.jvm.internal.TypeIntrinsics $r0;

        $r0 := @this: kotlin.jvm.internal.TypeIntrinsics;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.Collection asMutableCollection(java.lang.Object)
    {
        java.util.Collection $r0;
        java.lang.Object $r1;
        boolean $z0;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof kotlin.jvm.internal.markers.KMappedMarker;

        if $z0 == 0 goto label1;

        $z0 = $r1 instanceof kotlin.jvm.internal.markers.KMutableCollection;

        if $z0 != 0 goto label1;

        staticinvoke <kotlin.jvm.internal.TypeIntrinsics: void throwCce(java.lang.Object,java.lang.String)>($r1, "kotlin.collections.MutableCollection");

     label1:
        $r0 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: java.util.Collection castToCollection(java.lang.Object)>($r1);

        return $r0;
    }

    public static java.util.Collection asMutableCollection(java.lang.Object, java.lang.String)
    {
        java.lang.String $r0;
        java.util.Collection $r1;
        java.lang.Object $r2;
        boolean $z0;

        $r2 := @parameter0: java.lang.Object;

        $r0 := @parameter1: java.lang.String;

        $z0 = $r2 instanceof kotlin.jvm.internal.markers.KMappedMarker;

        if $z0 == 0 goto label1;

        $z0 = $r2 instanceof kotlin.jvm.internal.markers.KMutableCollection;

        if $z0 != 0 goto label1;

        staticinvoke <kotlin.jvm.internal.TypeIntrinsics: void throwCce(java.lang.String)>($r0);

     label1:
        $r1 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: java.util.Collection castToCollection(java.lang.Object)>($r2);

        return $r1;
    }

    public static java.lang.Iterable asMutableIterable(java.lang.Object)
    {
        java.lang.Iterable $r0;
        java.lang.Object $r1;
        boolean $z0;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof kotlin.jvm.internal.markers.KMappedMarker;

        if $z0 == 0 goto label1;

        $z0 = $r1 instanceof kotlin.jvm.internal.markers.KMutableIterable;

        if $z0 != 0 goto label1;

        staticinvoke <kotlin.jvm.internal.TypeIntrinsics: void throwCce(java.lang.Object,java.lang.String)>($r1, "kotlin.collections.MutableIterable");

     label1:
        $r0 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: java.lang.Iterable castToIterable(java.lang.Object)>($r1);

        return $r0;
    }

    public static java.lang.Iterable asMutableIterable(java.lang.Object, java.lang.String)
    {
        java.lang.String $r0;
        java.lang.Iterable $r1;
        java.lang.Object $r2;
        boolean $z0;

        $r2 := @parameter0: java.lang.Object;

        $r0 := @parameter1: java.lang.String;

        $z0 = $r2 instanceof kotlin.jvm.internal.markers.KMappedMarker;

        if $z0 == 0 goto label1;

        $z0 = $r2 instanceof kotlin.jvm.internal.markers.KMutableIterable;

        if $z0 != 0 goto label1;

        staticinvoke <kotlin.jvm.internal.TypeIntrinsics: void throwCce(java.lang.String)>($r0);

     label1:
        $r1 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: java.lang.Iterable castToIterable(java.lang.Object)>($r2);

        return $r1;
    }

    public static java.util.Iterator asMutableIterator(java.lang.Object)
    {
        java.util.Iterator $r0;
        java.lang.Object $r1;
        boolean $z0;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof kotlin.jvm.internal.markers.KMappedMarker;

        if $z0 == 0 goto label1;

        $z0 = $r1 instanceof kotlin.jvm.internal.markers.KMutableIterator;

        if $z0 != 0 goto label1;

        staticinvoke <kotlin.jvm.internal.TypeIntrinsics: void throwCce(java.lang.Object,java.lang.String)>($r1, "kotlin.collections.MutableIterator");

     label1:
        $r0 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: java.util.Iterator castToIterator(java.lang.Object)>($r1);

        return $r0;
    }

    public static java.util.Iterator asMutableIterator(java.lang.Object, java.lang.String)
    {
        java.lang.String $r0;
        java.util.Iterator $r1;
        java.lang.Object $r2;
        boolean $z0;

        $r2 := @parameter0: java.lang.Object;

        $r0 := @parameter1: java.lang.String;

        $z0 = $r2 instanceof kotlin.jvm.internal.markers.KMappedMarker;

        if $z0 == 0 goto label1;

        $z0 = $r2 instanceof kotlin.jvm.internal.markers.KMutableIterator;

        if $z0 != 0 goto label1;

        staticinvoke <kotlin.jvm.internal.TypeIntrinsics: void throwCce(java.lang.String)>($r0);

     label1:
        $r1 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: java.util.Iterator castToIterator(java.lang.Object)>($r2);

        return $r1;
    }

    public static java.util.List asMutableList(java.lang.Object)
    {
        java.util.List $r0;
        java.lang.Object $r1;
        boolean $z0;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof kotlin.jvm.internal.markers.KMappedMarker;

        if $z0 == 0 goto label1;

        $z0 = $r1 instanceof kotlin.jvm.internal.markers.KMutableList;

        if $z0 != 0 goto label1;

        staticinvoke <kotlin.jvm.internal.TypeIntrinsics: void throwCce(java.lang.Object,java.lang.String)>($r1, "kotlin.collections.MutableList");

     label1:
        $r0 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: java.util.List castToList(java.lang.Object)>($r1);

        return $r0;
    }

    public static java.util.List asMutableList(java.lang.Object, java.lang.String)
    {
        java.lang.String $r0;
        java.util.List $r1;
        java.lang.Object $r2;
        boolean $z0;

        $r2 := @parameter0: java.lang.Object;

        $r0 := @parameter1: java.lang.String;

        $z0 = $r2 instanceof kotlin.jvm.internal.markers.KMappedMarker;

        if $z0 == 0 goto label1;

        $z0 = $r2 instanceof kotlin.jvm.internal.markers.KMutableList;

        if $z0 != 0 goto label1;

        staticinvoke <kotlin.jvm.internal.TypeIntrinsics: void throwCce(java.lang.String)>($r0);

     label1:
        $r1 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: java.util.List castToList(java.lang.Object)>($r2);

        return $r1;
    }

    public static java.util.ListIterator asMutableListIterator(java.lang.Object)
    {
        java.util.ListIterator $r0;
        java.lang.Object $r1;
        boolean $z0;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof kotlin.jvm.internal.markers.KMappedMarker;

        if $z0 == 0 goto label1;

        $z0 = $r1 instanceof kotlin.jvm.internal.markers.KMutableListIterator;

        if $z0 != 0 goto label1;

        staticinvoke <kotlin.jvm.internal.TypeIntrinsics: void throwCce(java.lang.Object,java.lang.String)>($r1, "kotlin.collections.MutableListIterator");

     label1:
        $r0 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: java.util.ListIterator castToListIterator(java.lang.Object)>($r1);

        return $r0;
    }

    public static java.util.ListIterator asMutableListIterator(java.lang.Object, java.lang.String)
    {
        java.lang.String $r0;
        java.util.ListIterator $r1;
        java.lang.Object $r2;
        boolean $z0;

        $r2 := @parameter0: java.lang.Object;

        $r0 := @parameter1: java.lang.String;

        $z0 = $r2 instanceof kotlin.jvm.internal.markers.KMappedMarker;

        if $z0 == 0 goto label1;

        $z0 = $r2 instanceof kotlin.jvm.internal.markers.KMutableListIterator;

        if $z0 != 0 goto label1;

        staticinvoke <kotlin.jvm.internal.TypeIntrinsics: void throwCce(java.lang.String)>($r0);

     label1:
        $r1 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: java.util.ListIterator castToListIterator(java.lang.Object)>($r2);

        return $r1;
    }

    public static java.util.Map asMutableMap(java.lang.Object)
    {
        java.util.Map $r0;
        java.lang.Object $r1;
        boolean $z0;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof kotlin.jvm.internal.markers.KMappedMarker;

        if $z0 == 0 goto label1;

        $z0 = $r1 instanceof kotlin.jvm.internal.markers.KMutableMap;

        if $z0 != 0 goto label1;

        staticinvoke <kotlin.jvm.internal.TypeIntrinsics: void throwCce(java.lang.Object,java.lang.String)>($r1, "kotlin.collections.MutableMap");

     label1:
        $r0 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: java.util.Map castToMap(java.lang.Object)>($r1);

        return $r0;
    }

    public static java.util.Map asMutableMap(java.lang.Object, java.lang.String)
    {
        java.lang.String $r0;
        java.util.Map $r1;
        java.lang.Object $r2;
        boolean $z0;

        $r2 := @parameter0: java.lang.Object;

        $r0 := @parameter1: java.lang.String;

        $z0 = $r2 instanceof kotlin.jvm.internal.markers.KMappedMarker;

        if $z0 == 0 goto label1;

        $z0 = $r2 instanceof kotlin.jvm.internal.markers.KMutableMap;

        if $z0 != 0 goto label1;

        staticinvoke <kotlin.jvm.internal.TypeIntrinsics: void throwCce(java.lang.String)>($r0);

     label1:
        $r1 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: java.util.Map castToMap(java.lang.Object)>($r2);

        return $r1;
    }

    public static java.util.Map$Entry asMutableMapEntry(java.lang.Object)
    {
        java.util.Map$Entry $r0;
        java.lang.Object $r1;
        boolean $z0;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof kotlin.jvm.internal.markers.KMappedMarker;

        if $z0 == 0 goto label1;

        $z0 = $r1 instanceof kotlin.jvm.internal.markers.KMutableMap$Entry;

        if $z0 != 0 goto label1;

        staticinvoke <kotlin.jvm.internal.TypeIntrinsics: void throwCce(java.lang.Object,java.lang.String)>($r1, "kotlin.collections.MutableMap.MutableEntry");

     label1:
        $r0 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: java.util.Map$Entry castToMapEntry(java.lang.Object)>($r1);

        return $r0;
    }

    public static java.util.Map$Entry asMutableMapEntry(java.lang.Object, java.lang.String)
    {
        java.lang.String $r0;
        java.util.Map$Entry $r1;
        java.lang.Object $r2;
        boolean $z0;

        $r2 := @parameter0: java.lang.Object;

        $r0 := @parameter1: java.lang.String;

        $z0 = $r2 instanceof kotlin.jvm.internal.markers.KMappedMarker;

        if $z0 == 0 goto label1;

        $z0 = $r2 instanceof kotlin.jvm.internal.markers.KMutableMap$Entry;

        if $z0 != 0 goto label1;

        staticinvoke <kotlin.jvm.internal.TypeIntrinsics: void throwCce(java.lang.String)>($r0);

     label1:
        $r1 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: java.util.Map$Entry castToMapEntry(java.lang.Object)>($r2);

        return $r1;
    }

    public static java.util.Set asMutableSet(java.lang.Object)
    {
        java.util.Set $r0;
        java.lang.Object $r1;
        boolean $z0;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof kotlin.jvm.internal.markers.KMappedMarker;

        if $z0 == 0 goto label1;

        $z0 = $r1 instanceof kotlin.jvm.internal.markers.KMutableSet;

        if $z0 != 0 goto label1;

        staticinvoke <kotlin.jvm.internal.TypeIntrinsics: void throwCce(java.lang.Object,java.lang.String)>($r1, "kotlin.collections.MutableSet");

     label1:
        $r0 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: java.util.Set castToSet(java.lang.Object)>($r1);

        return $r0;
    }

    public static java.util.Set asMutableSet(java.lang.Object, java.lang.String)
    {
        java.lang.String $r0;
        java.util.Set $r1;
        java.lang.Object $r2;
        boolean $z0;

        $r2 := @parameter0: java.lang.Object;

        $r0 := @parameter1: java.lang.String;

        $z0 = $r2 instanceof kotlin.jvm.internal.markers.KMappedMarker;

        if $z0 == 0 goto label1;

        $z0 = $r2 instanceof kotlin.jvm.internal.markers.KMutableSet;

        if $z0 != 0 goto label1;

        staticinvoke <kotlin.jvm.internal.TypeIntrinsics: void throwCce(java.lang.String)>($r0);

     label1:
        $r1 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: java.util.Set castToSet(java.lang.Object)>($r2);

        return $r1;
    }

    public static java.lang.Object beforeCheckcastToFunctionOfArity(java.lang.Object, int)
    {
        java.lang.Object $r0;
        int $i0;
        boolean $z0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $r0 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        if $r0 == null goto label1;

        $z0 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: boolean isFunctionOfArity(java.lang.Object,int)>($r0, $i0);

        if $z0 != 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("kotlin.jvm.functions.Function");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <kotlin.jvm.internal.TypeIntrinsics: void throwCce(java.lang.Object,java.lang.String)>($r0, $r2);

     label1:
        return $r0;
    }

    public static java.lang.Object beforeCheckcastToFunctionOfArity(java.lang.Object, int, java.lang.String)
    {
        java.lang.Object $r0;
        java.lang.String $r1;
        boolean $z0;
        int $i0;

        $r0 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.lang.String;

        if $r0 == null goto label1;

        $z0 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: boolean isFunctionOfArity(java.lang.Object,int)>($r0, $i0);

        if $z0 != 0 goto label1;

        staticinvoke <kotlin.jvm.internal.TypeIntrinsics: void throwCce(java.lang.String)>($r1);

     label1:
        return $r0;
    }

    public static java.util.Collection castToCollection(java.lang.Object)
    {
        java.lang.ClassCastException $r0;
        java.lang.Object $r1;
        java.util.Collection $r2;
        java.lang.Throwable $r3;

        $r1 := @parameter0: java.lang.Object;

     label1:
        $r2 = (java.util.Collection) $r1;

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r0 = (java.lang.ClassCastException) $r3;

        $r0 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: java.lang.ClassCastException throwCce(java.lang.ClassCastException)>($r0);

        throw $r0;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public static java.lang.Iterable castToIterable(java.lang.Object)
    {
        java.lang.ClassCastException $r0;
        java.lang.Object $r1;
        java.lang.Iterable $r2;
        java.lang.Throwable $r3;

        $r1 := @parameter0: java.lang.Object;

     label1:
        $r2 = (java.lang.Iterable) $r1;

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r0 = (java.lang.ClassCastException) $r3;

        $r0 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: java.lang.ClassCastException throwCce(java.lang.ClassCastException)>($r0);

        throw $r0;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public static java.util.Iterator castToIterator(java.lang.Object)
    {
        java.lang.ClassCastException $r0;
        java.lang.Object $r1;
        java.util.Iterator $r2;
        java.lang.Throwable $r3;

        $r1 := @parameter0: java.lang.Object;

     label1:
        $r2 = (java.util.Iterator) $r1;

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r0 = (java.lang.ClassCastException) $r3;

        $r0 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: java.lang.ClassCastException throwCce(java.lang.ClassCastException)>($r0);

        throw $r0;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public static java.util.List castToList(java.lang.Object)
    {
        java.lang.ClassCastException $r0;
        java.lang.Object $r1;
        java.util.List $r2;
        java.lang.Throwable $r3;

        $r1 := @parameter0: java.lang.Object;

     label1:
        $r2 = (java.util.List) $r1;

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r0 = (java.lang.ClassCastException) $r3;

        $r0 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: java.lang.ClassCastException throwCce(java.lang.ClassCastException)>($r0);

        throw $r0;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public static java.util.ListIterator castToListIterator(java.lang.Object)
    {
        java.lang.ClassCastException $r0;
        java.lang.Object $r1;
        java.util.ListIterator $r2;
        java.lang.Throwable $r3;

        $r1 := @parameter0: java.lang.Object;

     label1:
        $r2 = (java.util.ListIterator) $r1;

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r0 = (java.lang.ClassCastException) $r3;

        $r0 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: java.lang.ClassCastException throwCce(java.lang.ClassCastException)>($r0);

        throw $r0;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public static java.util.Map castToMap(java.lang.Object)
    {
        java.lang.ClassCastException $r0;
        java.lang.Object $r1;
        java.util.Map $r2;
        java.lang.Throwable $r3;

        $r1 := @parameter0: java.lang.Object;

     label1:
        $r2 = (java.util.Map) $r1;

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r0 = (java.lang.ClassCastException) $r3;

        $r0 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: java.lang.ClassCastException throwCce(java.lang.ClassCastException)>($r0);

        throw $r0;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public static java.util.Map$Entry castToMapEntry(java.lang.Object)
    {
        java.lang.ClassCastException $r0;
        java.lang.Object $r1;
        java.util.Map$Entry $r2;
        java.lang.Throwable $r3;

        $r1 := @parameter0: java.lang.Object;

     label1:
        $r2 = (java.util.Map$Entry) $r1;

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r0 = (java.lang.ClassCastException) $r3;

        $r0 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: java.lang.ClassCastException throwCce(java.lang.ClassCastException)>($r0);

        throw $r0;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public static java.util.Set castToSet(java.lang.Object)
    {
        java.lang.ClassCastException $r0;
        java.lang.Object $r1;
        java.util.Set $r2;
        java.lang.Throwable $r3;

        $r1 := @parameter0: java.lang.Object;

     label1:
        $r2 = (java.util.Set) $r1;

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r0 = (java.lang.ClassCastException) $r3;

        $r0 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: java.lang.ClassCastException throwCce(java.lang.ClassCastException)>($r0);

        throw $r0;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public static int getFunctionArity(java.lang.Object)
    {
        int $i0;
        java.lang.Object $r0;
        boolean $z0;
        kotlin.jvm.internal.FunctionBase $r1;

        $r0 := @parameter0: java.lang.Object;

        $z0 = $r0 instanceof kotlin.jvm.internal.FunctionBase;

        if $z0 == 0 goto label01;

        $r1 = (kotlin.jvm.internal.FunctionBase) $r0;

        $i0 = interfaceinvoke $r1.<kotlin.jvm.internal.FunctionBase: int getArity()>();

        return $i0;

     label01:
        $z0 = $r0 instanceof kotlin.jvm.functions.Function0;

        if $z0 == 0 goto label02;

        return 0;

     label02:
        $z0 = $r0 instanceof kotlin.jvm.functions.Function1;

        if $z0 == 0 goto label03;

        return 1;

     label03:
        $z0 = $r0 instanceof kotlin.jvm.functions.Function2;

        if $z0 == 0 goto label04;

        return 2;

     label04:
        $z0 = $r0 instanceof kotlin.jvm.functions.Function3;

        if $z0 == 0 goto label05;

        return 3;

     label05:
        $z0 = $r0 instanceof kotlin.jvm.functions.Function4;

        if $z0 == 0 goto label06;

        return 4;

     label06:
        $z0 = $r0 instanceof kotlin.jvm.functions.Function5;

        if $z0 == 0 goto label07;

        return 5;

     label07:
        $z0 = $r0 instanceof kotlin.jvm.functions.Function6;

        if $z0 == 0 goto label08;

        return 6;

     label08:
        $z0 = $r0 instanceof kotlin.jvm.functions.Function7;

        if $z0 == 0 goto label09;

        return 7;

     label09:
        $z0 = $r0 instanceof kotlin.jvm.functions.Function8;

        if $z0 == 0 goto label10;

        return 8;

     label10:
        $z0 = $r0 instanceof kotlin.jvm.functions.Function9;

        if $z0 == 0 goto label11;

        return 9;

     label11:
        $z0 = $r0 instanceof kotlin.jvm.functions.Function10;

        if $z0 == 0 goto label12;

        return 10;

     label12:
        $z0 = $r0 instanceof kotlin.jvm.functions.Function11;

        if $z0 == 0 goto label13;

        return 11;

     label13:
        $z0 = $r0 instanceof kotlin.jvm.functions.Function12;

        if $z0 == 0 goto label14;

        return 12;

     label14:
        $z0 = $r0 instanceof kotlin.jvm.functions.Function13;

        if $z0 == 0 goto label15;

        return 13;

     label15:
        $z0 = $r0 instanceof kotlin.jvm.functions.Function14;

        if $z0 == 0 goto label16;

        return 14;

     label16:
        $z0 = $r0 instanceof kotlin.jvm.functions.Function15;

        if $z0 == 0 goto label17;

        return 15;

     label17:
        $z0 = $r0 instanceof kotlin.jvm.functions.Function16;

        if $z0 == 0 goto label18;

        return 16;

     label18:
        $z0 = $r0 instanceof kotlin.jvm.functions.Function17;

        if $z0 == 0 goto label19;

        return 17;

     label19:
        $z0 = $r0 instanceof kotlin.jvm.functions.Function18;

        if $z0 == 0 goto label20;

        return 18;

     label20:
        $z0 = $r0 instanceof kotlin.jvm.functions.Function19;

        if $z0 == 0 goto label21;

        return 19;

     label21:
        $z0 = $r0 instanceof kotlin.jvm.functions.Function20;

        if $z0 == 0 goto label22;

        return 20;

     label22:
        $z0 = $r0 instanceof kotlin.jvm.functions.Function21;

        if $z0 == 0 goto label23;

        return 21;

     label23:
        $z0 = $r0 instanceof kotlin.jvm.functions.Function22;

        if $z0 == 0 goto label24;

        return 22;

     label24:
        return -1;
    }

    public static boolean isFunctionOfArity(java.lang.Object, int)
    {
        int $i0, $i1;
        boolean $z0;
        java.lang.Object $r0;

        $r0 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        $z0 = $r0 instanceof kotlin.Function;

        if $z0 == 0 goto label1;

        $i1 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: int getFunctionArity(java.lang.Object)>($r0);

        if $i1 != $i0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static boolean isMutableCollection(java.lang.Object)
    {
        java.lang.Object $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

        $z0 = $r0 instanceof java.util.Collection;

        if $z0 == 0 goto label2;

        $z0 = $r0 instanceof kotlin.jvm.internal.markers.KMappedMarker;

        if $z0 == 0 goto label1;

        $z0 = $r0 instanceof kotlin.jvm.internal.markers.KMutableCollection;

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public static boolean isMutableIterable(java.lang.Object)
    {
        java.lang.Object $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

        $z0 = $r0 instanceof java.lang.Iterable;

        if $z0 == 0 goto label2;

        $z0 = $r0 instanceof kotlin.jvm.internal.markers.KMappedMarker;

        if $z0 == 0 goto label1;

        $z0 = $r0 instanceof kotlin.jvm.internal.markers.KMutableIterable;

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public static boolean isMutableIterator(java.lang.Object)
    {
        java.lang.Object $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

        $z0 = $r0 instanceof java.util.Iterator;

        if $z0 == 0 goto label2;

        $z0 = $r0 instanceof kotlin.jvm.internal.markers.KMappedMarker;

        if $z0 == 0 goto label1;

        $z0 = $r0 instanceof kotlin.jvm.internal.markers.KMutableIterator;

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public static boolean isMutableList(java.lang.Object)
    {
        java.lang.Object $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

        $z0 = $r0 instanceof java.util.List;

        if $z0 == 0 goto label2;

        $z0 = $r0 instanceof kotlin.jvm.internal.markers.KMappedMarker;

        if $z0 == 0 goto label1;

        $z0 = $r0 instanceof kotlin.jvm.internal.markers.KMutableList;

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public static boolean isMutableListIterator(java.lang.Object)
    {
        java.lang.Object $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

        $z0 = $r0 instanceof java.util.ListIterator;

        if $z0 == 0 goto label2;

        $z0 = $r0 instanceof kotlin.jvm.internal.markers.KMappedMarker;

        if $z0 == 0 goto label1;

        $z0 = $r0 instanceof kotlin.jvm.internal.markers.KMutableListIterator;

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public static boolean isMutableMap(java.lang.Object)
    {
        java.lang.Object $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

        $z0 = $r0 instanceof java.util.Map;

        if $z0 == 0 goto label2;

        $z0 = $r0 instanceof kotlin.jvm.internal.markers.KMappedMarker;

        if $z0 == 0 goto label1;

        $z0 = $r0 instanceof kotlin.jvm.internal.markers.KMutableMap;

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public static boolean isMutableMapEntry(java.lang.Object)
    {
        java.lang.Object $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

        $z0 = $r0 instanceof java.util.Map$Entry;

        if $z0 == 0 goto label2;

        $z0 = $r0 instanceof kotlin.jvm.internal.markers.KMappedMarker;

        if $z0 == 0 goto label1;

        $z0 = $r0 instanceof kotlin.jvm.internal.markers.KMutableMap$Entry;

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public static boolean isMutableSet(java.lang.Object)
    {
        java.lang.Object $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

        $z0 = $r0 instanceof java.util.Set;

        if $z0 == 0 goto label2;

        $z0 = $r0 instanceof kotlin.jvm.internal.markers.KMappedMarker;

        if $z0 == 0 goto label1;

        $z0 = $r0 instanceof kotlin.jvm.internal.markers.KMutableSet;

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private static java.lang.Throwable sanitizeStackTrace(java.lang.Throwable)
    {
        java.lang.Throwable $r0;
        java.lang.Class $r1;
        java.lang.String $r2;

        $r0 := @parameter0: java.lang.Throwable;

        $r1 = class "Lkotlin/jvm/internal/TypeIntrinsics;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r0 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.Throwable sanitizeStackTrace(java.lang.Throwable,java.lang.String)>($r0, $r2);

        return $r0;
    }

    public static java.lang.ClassCastException throwCce(java.lang.ClassCastException)
    {
        java.lang.Throwable $r0;
        java.lang.ClassCastException $r1;

        $r1 := @parameter0: java.lang.ClassCastException;

        $r0 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: java.lang.Throwable sanitizeStackTrace(java.lang.Throwable)>($r1);

        $r1 = (java.lang.ClassCastException) $r0;

        throw $r1;
    }

    public static void throwCce(java.lang.Object, java.lang.String)
    {
        java.lang.String $r0, $r2;
        java.lang.Object $r1;
        java.lang.Class $r3;
        java.lang.StringBuilder $r4;

        $r1 := @parameter0: java.lang.Object;

        $r0 := @parameter1: java.lang.String;

        if $r1 != null goto label1;

        $r2 = "null";

        goto label2;

     label1:
        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be cast to ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <kotlin.jvm.internal.TypeIntrinsics: void throwCce(java.lang.String)>($r0);

        return;
    }

    public static void throwCce(java.lang.String)
    {
        java.lang.ClassCastException $r0;
        java.lang.String $r1;

        $r1 := @parameter0: java.lang.String;

        $r0 = new java.lang.ClassCastException;

        specialinvoke $r0.<java.lang.ClassCastException: void <init>(java.lang.String)>($r1);

        $r0 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: java.lang.ClassCastException throwCce(java.lang.ClassCastException)>($r0);

        throw $r0;
    }

