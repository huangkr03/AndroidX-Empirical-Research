androidx.work.multiprocess.RemoteListenableWorker
<androidx.work.multiprocess.RemoteListenableWorker: java.lang.String TAG>
<androidx.work.multiprocess.RemoteListenableWorker: java.lang.String ARGUMENT_PACKAGE_NAME>
<androidx.work.multiprocess.RemoteListenableWorker: java.lang.String ARGUMENT_CLASS_NAME>
<androidx.work.multiprocess.RemoteListenableWorker: androidx.work.WorkerParameters mWorkerParameters>
<androidx.work.multiprocess.RemoteListenableWorker: androidx.work.multiprocess.ListenableWorkerImplClient mClient>
<androidx.work.multiprocess.RemoteListenableWorker: java.lang.String mWorkerClassName>
<androidx.work.multiprocess.RemoteListenableWorker: android.content.ComponentName mComponentName>
    public void <init>(android.content.Context, androidx.work.WorkerParameters)
    {
        androidx.work.multiprocess.RemoteListenableWorker r0;
        android.content.Context r1;
        androidx.work.WorkerParameters r2;
        androidx.work.multiprocess.ListenableWorkerImplClient $r3;
        java.util.concurrent.Executor $r4;

        r0 := @this: androidx.work.multiprocess.RemoteListenableWorker;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: androidx.work.WorkerParameters;

        specialinvoke r0.<androidx.work.ListenableWorker: void <init>(android.content.Context,androidx.work.WorkerParameters)>(r1, r2);

        r0.<androidx.work.multiprocess.RemoteListenableWorker: androidx.work.WorkerParameters mWorkerParameters> = r2;

        $r3 = new androidx.work.multiprocess.ListenableWorkerImplClient;

        $r4 = virtualinvoke r0.<androidx.work.multiprocess.RemoteListenableWorker: java.util.concurrent.Executor getBackgroundExecutor()>();

        specialinvoke $r3.<androidx.work.multiprocess.ListenableWorkerImplClient: void <init>(android.content.Context,java.util.concurrent.Executor)>(r1, $r4);

        r0.<androidx.work.multiprocess.RemoteListenableWorker: androidx.work.multiprocess.ListenableWorkerImplClient mClient> = $r3;

        return;
    }

    public final com.google.common.util.concurrent.ListenableFuture startWork()
    {
        androidx.work.multiprocess.RemoteListenableWorker r0;
        androidx.work.impl.utils.futures.SettableFuture r1;
        androidx.work.Data r2;
        java.lang.String r3, r4, r5, $r18, $r21, r23, r24;
        com.google.common.util.concurrent.ListenableFuture r6, $r16;
        androidx.work.WorkerParameters $r7;
        java.util.UUID $r8;
        boolean $z0, $z1;
        android.content.ComponentName $r9, $r13;
        android.content.Context $r10;
        androidx.work.multiprocess.RemoteListenableWorker$1 $r11;
        androidx.work.multiprocess.ListenableWorkerImplClient $r12;
        androidx.work.multiprocess.RemoteListenableWorker$2 $r14;
        java.util.concurrent.Executor $r15;
        androidx.work.Logger $r17, $r20;
        java.lang.IllegalArgumentException $r19, $r22;
        androidx.work.impl.WorkManagerImpl r25;

        r0 := @this: androidx.work.multiprocess.RemoteListenableWorker;

        r1 = staticinvoke <androidx.work.impl.utils.futures.SettableFuture: androidx.work.impl.utils.futures.SettableFuture create()>();

        r2 = virtualinvoke r0.<androidx.work.multiprocess.RemoteListenableWorker: androidx.work.Data getInputData()>();

        $r7 = r0.<androidx.work.multiprocess.RemoteListenableWorker: androidx.work.WorkerParameters mWorkerParameters>;

        $r8 = virtualinvoke $r7.<androidx.work.WorkerParameters: java.util.UUID getId()>();

        r3 = virtualinvoke $r8.<java.util.UUID: java.lang.String toString()>();

        r4 = virtualinvoke r2.<androidx.work.Data: java.lang.String getString(java.lang.String)>("androidx.work.impl.workers.RemoteListenableWorker.ARGUMENT_PACKAGE_NAME");

        r5 = virtualinvoke r2.<androidx.work.Data: java.lang.String getString(java.lang.String)>("androidx.work.impl.workers.RemoteListenableWorker.ARGUMENT_CLASS_NAME");

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r4);

        if $z0 == 0 goto label1;

        r23 = "Need to specify a package name for the Remote Service.";

        $r20 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r21 = <androidx.work.multiprocess.RemoteListenableWorker: java.lang.String TAG>;

        virtualinvoke $r20.<androidx.work.Logger: void error(java.lang.String,java.lang.String)>($r21, r23);

        $r22 = new java.lang.IllegalArgumentException;

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r23);

        virtualinvoke r1.<androidx.work.impl.utils.futures.SettableFuture: boolean setException(java.lang.Throwable)>($r22);

        return r1;

     label1:
        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r5);

        if $z1 == 0 goto label2;

        r24 = "Need to specify a class name for the Remote Service.";

        $r17 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r18 = <androidx.work.multiprocess.RemoteListenableWorker: java.lang.String TAG>;

        virtualinvoke $r17.<androidx.work.Logger: void error(java.lang.String,java.lang.String)>($r18, r24);

        $r19 = new java.lang.IllegalArgumentException;

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r24);

        virtualinvoke r1.<androidx.work.impl.utils.futures.SettableFuture: boolean setException(java.lang.Throwable)>($r19);

        return r1;

     label2:
        $r9 = new android.content.ComponentName;

        specialinvoke $r9.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>(r4, r5);

        r0.<androidx.work.multiprocess.RemoteListenableWorker: android.content.ComponentName mComponentName> = $r9;

        $r10 = virtualinvoke r0.<androidx.work.multiprocess.RemoteListenableWorker: android.content.Context getApplicationContext()>();

        r25 = staticinvoke <androidx.work.impl.WorkManagerImpl: androidx.work.impl.WorkManagerImpl getInstance(android.content.Context)>($r10);

        $r12 = r0.<androidx.work.multiprocess.RemoteListenableWorker: androidx.work.multiprocess.ListenableWorkerImplClient mClient>;

        $r13 = r0.<androidx.work.multiprocess.RemoteListenableWorker: android.content.ComponentName mComponentName>;

        $r11 = new androidx.work.multiprocess.RemoteListenableWorker$1;

        specialinvoke $r11.<androidx.work.multiprocess.RemoteListenableWorker$1: void <init>(androidx.work.multiprocess.RemoteListenableWorker,androidx.work.impl.WorkManagerImpl,java.lang.String)>(r0, r25, r3);

        r6 = virtualinvoke $r12.<androidx.work.multiprocess.ListenableWorkerImplClient: com.google.common.util.concurrent.ListenableFuture execute(android.content.ComponentName,androidx.work.multiprocess.RemoteDispatcher)>($r13, $r11);

        $r14 = new androidx.work.multiprocess.RemoteListenableWorker$2;

        specialinvoke $r14.<androidx.work.multiprocess.RemoteListenableWorker$2: void <init>(androidx.work.multiprocess.RemoteListenableWorker)>(r0);

        $r15 = virtualinvoke r0.<androidx.work.multiprocess.RemoteListenableWorker: java.util.concurrent.Executor getBackgroundExecutor()>();

        $r16 = staticinvoke <androidx.work.multiprocess.RemoteClientUtils: com.google.common.util.concurrent.ListenableFuture map(com.google.common.util.concurrent.ListenableFuture,androidx.arch.core.util.Function,java.util.concurrent.Executor)>(r6, $r14, $r15);

        return $r16;
    }

<androidx.work.multiprocess.RemoteListenableWorker: com.google.common.util.concurrent.ListenableFuture startRemoteWork()>
    public void onStopped()
    {
        androidx.work.multiprocess.RemoteListenableWorker r0;
        android.content.ComponentName $r1, $r4;
        androidx.work.multiprocess.RemoteListenableWorker$3 $r2;
        androidx.work.multiprocess.ListenableWorkerImplClient $r3;

        r0 := @this: androidx.work.multiprocess.RemoteListenableWorker;

        specialinvoke r0.<androidx.work.ListenableWorker: void onStopped()>();

        $r1 = r0.<androidx.work.multiprocess.RemoteListenableWorker: android.content.ComponentName mComponentName>;

        if $r1 == null goto label1;

        $r3 = r0.<androidx.work.multiprocess.RemoteListenableWorker: androidx.work.multiprocess.ListenableWorkerImplClient mClient>;

        $r4 = r0.<androidx.work.multiprocess.RemoteListenableWorker: android.content.ComponentName mComponentName>;

        $r2 = new androidx.work.multiprocess.RemoteListenableWorker$3;

        specialinvoke $r2.<androidx.work.multiprocess.RemoteListenableWorker$3: void <init>(androidx.work.multiprocess.RemoteListenableWorker)>(r0);

        virtualinvoke $r3.<androidx.work.multiprocess.ListenableWorkerImplClient: com.google.common.util.concurrent.ListenableFuture execute(android.content.ComponentName,androidx.work.multiprocess.RemoteDispatcher)>($r4, $r2);

     label1:
        return;
    }

    static void <clinit>()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <androidx.work.Logger: java.lang.String tagWithPrefix(java.lang.String)>("RemoteListenableWorker");

        <androidx.work.multiprocess.RemoteListenableWorker: java.lang.String TAG> = $r0;

        return;
    }

androidx.work.multiprocess.RemoteListenableWorker$1
<androidx.work.multiprocess.RemoteListenableWorker$1: androidx.work.impl.WorkManagerImpl val$workManager>
<androidx.work.multiprocess.RemoteListenableWorker$1: java.lang.String val$id>
<androidx.work.multiprocess.RemoteListenableWorker$1: androidx.work.multiprocess.RemoteListenableWorker this$0>
    void <init>(androidx.work.multiprocess.RemoteListenableWorker, androidx.work.impl.WorkManagerImpl, java.lang.String)
    {
        androidx.work.multiprocess.RemoteListenableWorker$1 r0;
        androidx.work.multiprocess.RemoteListenableWorker r1;
        androidx.work.impl.WorkManagerImpl r2;
        java.lang.String r3;

        r0 := @this: androidx.work.multiprocess.RemoteListenableWorker$1;

        r1 := @parameter0: androidx.work.multiprocess.RemoteListenableWorker;

        r2 := @parameter1: androidx.work.impl.WorkManagerImpl;

        r3 := @parameter2: java.lang.String;

        r0.<androidx.work.multiprocess.RemoteListenableWorker$1: androidx.work.multiprocess.RemoteListenableWorker this$0> = r1;

        r0.<androidx.work.multiprocess.RemoteListenableWorker$1: androidx.work.impl.WorkManagerImpl val$workManager> = r2;

        r0.<androidx.work.multiprocess.RemoteListenableWorker$1: java.lang.String val$id> = r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void execute(androidx.work.multiprocess.IListenableWorkerImpl, androidx.work.multiprocess.IWorkManagerImplCallback) throws android.os.RemoteException
    {
        androidx.work.multiprocess.RemoteListenableWorker$1 r0;
        androidx.work.multiprocess.IListenableWorkerImpl r1;
        androidx.work.multiprocess.IWorkManagerImplCallback r2;
        androidx.work.impl.model.WorkSpec r3;
        androidx.work.multiprocess.parcelable.ParcelableRemoteWorkRequest r4, $r12;
        byte[] r5;
        androidx.work.impl.WorkManagerImpl $r6;
        androidx.work.impl.WorkDatabase $r7;
        androidx.work.impl.model.WorkSpecDao $r8;
        java.lang.String $r9, $r10, $r15;
        androidx.work.multiprocess.RemoteListenableWorker $r11, $r13;
        androidx.work.WorkerParameters $r14;

        r0 := @this: androidx.work.multiprocess.RemoteListenableWorker$1;

        r1 := @parameter0: androidx.work.multiprocess.IListenableWorkerImpl;

        r2 := @parameter1: androidx.work.multiprocess.IWorkManagerImplCallback;

        $r6 = r0.<androidx.work.multiprocess.RemoteListenableWorker$1: androidx.work.impl.WorkManagerImpl val$workManager>;

        $r7 = virtualinvoke $r6.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.WorkDatabase getWorkDatabase()>();

        $r8 = virtualinvoke $r7.<androidx.work.impl.WorkDatabase: androidx.work.impl.model.WorkSpecDao workSpecDao()>();

        $r9 = r0.<androidx.work.multiprocess.RemoteListenableWorker$1: java.lang.String val$id>;

        r3 = interfaceinvoke $r8.<androidx.work.impl.model.WorkSpecDao: androidx.work.impl.model.WorkSpec getWorkSpec(java.lang.String)>($r9);

        $r11 = r0.<androidx.work.multiprocess.RemoteListenableWorker$1: androidx.work.multiprocess.RemoteListenableWorker this$0>;

        $r10 = r3.<androidx.work.impl.model.WorkSpec: java.lang.String workerClassName>;

        $r11.<androidx.work.multiprocess.RemoteListenableWorker: java.lang.String mWorkerClassName> = $r10;

        $r12 = new androidx.work.multiprocess.parcelable.ParcelableRemoteWorkRequest;

        $r15 = r3.<androidx.work.impl.model.WorkSpec: java.lang.String workerClassName>;

        $r13 = r0.<androidx.work.multiprocess.RemoteListenableWorker$1: androidx.work.multiprocess.RemoteListenableWorker this$0>;

        $r14 = $r13.<androidx.work.multiprocess.RemoteListenableWorker: androidx.work.WorkerParameters mWorkerParameters>;

        specialinvoke $r12.<androidx.work.multiprocess.parcelable.ParcelableRemoteWorkRequest: void <init>(java.lang.String,androidx.work.WorkerParameters)>($r15, $r14);

        r4 = $r12;

        r5 = staticinvoke <androidx.work.multiprocess.parcelable.ParcelConverters: byte[] marshall(android.os.Parcelable)>(r4);

        interfaceinvoke r1.<androidx.work.multiprocess.IListenableWorkerImpl: void startWork(byte[],androidx.work.multiprocess.IWorkManagerImplCallback)>(r5, r2);

        return;
    }

    public volatile void execute(java.lang.Object, androidx.work.multiprocess.IWorkManagerImplCallback) throws java.lang.Throwable
    {
        androidx.work.multiprocess.RemoteListenableWorker$1 r0;
        java.lang.Object r1;
        androidx.work.multiprocess.IWorkManagerImplCallback r2;
        androidx.work.multiprocess.IListenableWorkerImpl $r3;

        r0 := @this: androidx.work.multiprocess.RemoteListenableWorker$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: androidx.work.multiprocess.IWorkManagerImplCallback;

        $r3 = (androidx.work.multiprocess.IListenableWorkerImpl) r1;

        virtualinvoke r0.<androidx.work.multiprocess.RemoteListenableWorker$1: void execute(androidx.work.multiprocess.IListenableWorkerImpl,androidx.work.multiprocess.IWorkManagerImplCallback)>($r3, r2);

        return;
    }

androidx.work.multiprocess.RemoteListenableWorker$2
<androidx.work.multiprocess.RemoteListenableWorker$2: androidx.work.multiprocess.RemoteListenableWorker this$0>
    void <init>(androidx.work.multiprocess.RemoteListenableWorker)
    {
        androidx.work.multiprocess.RemoteListenableWorker$2 r0;
        androidx.work.multiprocess.RemoteListenableWorker r1;

        r0 := @this: androidx.work.multiprocess.RemoteListenableWorker$2;

        r1 := @parameter0: androidx.work.multiprocess.RemoteListenableWorker;

        r0.<androidx.work.multiprocess.RemoteListenableWorker$2: androidx.work.multiprocess.RemoteListenableWorker this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public androidx.work.ListenableWorker$Result apply(byte[])
    {
        androidx.work.multiprocess.RemoteListenableWorker$2 r0;
        byte[] r1;
        androidx.work.multiprocess.parcelable.ParcelableResult r2;
        android.os.Parcelable$Creator $r3;
        java.lang.Object $r4;
        androidx.work.Logger $r5;
        java.lang.String $r6;
        androidx.work.multiprocess.RemoteListenableWorker $r7;
        androidx.work.multiprocess.ListenableWorkerImplClient $r8;
        androidx.work.ListenableWorker$Result $r9;

        r0 := @this: androidx.work.multiprocess.RemoteListenableWorker$2;

        r1 := @parameter0: byte[];

        $r3 = <androidx.work.multiprocess.parcelable.ParcelableResult: android.os.Parcelable$Creator CREATOR>;

        $r4 = staticinvoke <androidx.work.multiprocess.parcelable.ParcelConverters: java.lang.Object unmarshall(byte[],android.os.Parcelable$Creator)>(r1, $r3);

        r2 = (androidx.work.multiprocess.parcelable.ParcelableResult) $r4;

        $r5 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r6 = <androidx.work.multiprocess.RemoteListenableWorker: java.lang.String TAG>;

        virtualinvoke $r5.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r6, "Cleaning up");

        $r7 = r0.<androidx.work.multiprocess.RemoteListenableWorker$2: androidx.work.multiprocess.RemoteListenableWorker this$0>;

        $r8 = $r7.<androidx.work.multiprocess.RemoteListenableWorker: androidx.work.multiprocess.ListenableWorkerImplClient mClient>;

        virtualinvoke $r8.<androidx.work.multiprocess.ListenableWorkerImplClient: void unbindService()>();

        $r9 = virtualinvoke r2.<androidx.work.multiprocess.parcelable.ParcelableResult: androidx.work.ListenableWorker$Result getResult()>();

        return $r9;
    }

    public volatile java.lang.Object apply(java.lang.Object)
    {
        androidx.work.multiprocess.RemoteListenableWorker$2 r0;
        java.lang.Object r1;
        byte[] $r2;
        androidx.work.ListenableWorker$Result $r3;

        r0 := @this: androidx.work.multiprocess.RemoteListenableWorker$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = (byte[]) r1;

        $r3 = virtualinvoke r0.<androidx.work.multiprocess.RemoteListenableWorker$2: androidx.work.ListenableWorker$Result apply(byte[])>($r2);

        return $r3;
    }

androidx.work.multiprocess.RemoteListenableWorker$3
<androidx.work.multiprocess.RemoteListenableWorker$3: androidx.work.multiprocess.RemoteListenableWorker this$0>
    void <init>(androidx.work.multiprocess.RemoteListenableWorker)
    {
        androidx.work.multiprocess.RemoteListenableWorker$3 r0;
        androidx.work.multiprocess.RemoteListenableWorker r1;

        r0 := @this: androidx.work.multiprocess.RemoteListenableWorker$3;

        r1 := @parameter0: androidx.work.multiprocess.RemoteListenableWorker;

        r0.<androidx.work.multiprocess.RemoteListenableWorker$3: androidx.work.multiprocess.RemoteListenableWorker this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void execute(androidx.work.multiprocess.IListenableWorkerImpl, androidx.work.multiprocess.IWorkManagerImplCallback) throws android.os.RemoteException
    {
        androidx.work.multiprocess.RemoteListenableWorker$3 r0;
        androidx.work.multiprocess.IListenableWorkerImpl r1;
        androidx.work.multiprocess.IWorkManagerImplCallback r2;
        androidx.work.multiprocess.parcelable.ParcelableWorkerParameters r3, $r5;
        byte[] r4;
        androidx.work.multiprocess.RemoteListenableWorker $r6;
        androidx.work.WorkerParameters $r7;

        r0 := @this: androidx.work.multiprocess.RemoteListenableWorker$3;

        r1 := @parameter0: androidx.work.multiprocess.IListenableWorkerImpl;

        r2 := @parameter1: androidx.work.multiprocess.IWorkManagerImplCallback;

        $r5 = new androidx.work.multiprocess.parcelable.ParcelableWorkerParameters;

        $r6 = r0.<androidx.work.multiprocess.RemoteListenableWorker$3: androidx.work.multiprocess.RemoteListenableWorker this$0>;

        $r7 = $r6.<androidx.work.multiprocess.RemoteListenableWorker: androidx.work.WorkerParameters mWorkerParameters>;

        specialinvoke $r5.<androidx.work.multiprocess.parcelable.ParcelableWorkerParameters: void <init>(androidx.work.WorkerParameters)>($r7);

        r3 = $r5;

        r4 = staticinvoke <androidx.work.multiprocess.parcelable.ParcelConverters: byte[] marshall(android.os.Parcelable)>(r3);

        interfaceinvoke r1.<androidx.work.multiprocess.IListenableWorkerImpl: void interrupt(byte[],androidx.work.multiprocess.IWorkManagerImplCallback)>(r4, r2);

        return;
    }

    public volatile void execute(java.lang.Object, androidx.work.multiprocess.IWorkManagerImplCallback) throws java.lang.Throwable
    {
        androidx.work.multiprocess.RemoteListenableWorker$3 r0;
        java.lang.Object r1;
        androidx.work.multiprocess.IWorkManagerImplCallback r2;
        androidx.work.multiprocess.IListenableWorkerImpl $r3;

        r0 := @this: androidx.work.multiprocess.RemoteListenableWorker$3;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: androidx.work.multiprocess.IWorkManagerImplCallback;

        $r3 = (androidx.work.multiprocess.IListenableWorkerImpl) r1;

        virtualinvoke r0.<androidx.work.multiprocess.RemoteListenableWorker$3: void execute(androidx.work.multiprocess.IListenableWorkerImpl,androidx.work.multiprocess.IWorkManagerImplCallback)>($r3, r2);

        return;
    }

