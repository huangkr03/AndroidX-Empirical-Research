androidx.ui.core.ErrorMessages
<androidx.ui.core.ErrorMessages: java.lang.String message>
<androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages ComponentNodeHasParent>
<androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages SizeAlreadyExists>
<androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages NoSizeAfterLayout>
<androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages OnlyComponents>
<androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages NoMovingSingleElements>
<androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages NoChild>
<androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages IndexOutOfRange>
<androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages CountOutOfRange>
<androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages SingleChildOnlyOneNode>
<androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages OwnerAlreadyAttached>
<androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages ParentOwnerMustMatchChild>
<androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages OwnerAlreadyDetached>
<androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages IllegalMoveOperation>
<androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages CannotFindLayoutInParent>
<androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages ChildrenUnsupported>
<androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages NodeShouldBeAttached>
<androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages[] $VALUES>
    private void <init>(java.lang.String, int, java.lang.String)
    {
        androidx.ui.core.ErrorMessages r0;
        java.lang.String r1, r2;
        int i0;

        r0 := @this: androidx.ui.core.ErrorMessages;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        r0.<androidx.ui.core.ErrorMessages: java.lang.String message> = r2;

        return;
    }

    public final java.lang.String getMessage()
    {
        androidx.ui.core.ErrorMessages r0;
        java.lang.String $r1;

        r0 := @this: androidx.ui.core.ErrorMessages;

        $r1 = r0.<androidx.ui.core.ErrorMessages: java.lang.String message>;

        return $r1;
    }

    public final void validateState(boolean)
    {
        androidx.ui.core.ErrorMessages r0, r1;
        boolean z0;
        java.lang.IllegalStateException $r2;
        java.lang.String $r3;

        r0 := @this: androidx.ui.core.ErrorMessages;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label1;

        r1 = r0;

        $r2 = new java.lang.IllegalStateException;

        $r3 = virtualinvoke r1.<androidx.ui.core.ErrorMessages: java.lang.String getMessage()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        return;
    }

    public final java.lang.Void state()
    {
        androidx.ui.core.ErrorMessages r0;
        java.lang.IllegalStateException $r1;
        java.lang.String $r2;

        r0 := @this: androidx.ui.core.ErrorMessages;

        $r1 = new java.lang.IllegalStateException;

        $r2 = virtualinvoke r0.<androidx.ui.core.ErrorMessages: java.lang.String getMessage()>();

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r2);

        throw $r1;
    }

    public final transient java.lang.Void state(int[])
    {
        androidx.ui.core.ErrorMessages r0;
        int[] r1;
        java.lang.String r2, r3, r4, $r6;
        int $i0, $i1, $i2;
        java.lang.Object[] $r5, r8, r9, r10;
        java.lang.IllegalStateException $r7;
        boolean z1;

        r0 := @this: androidx.ui.core.ErrorMessages;

        r1 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "args");

        r2 = virtualinvoke r0.<androidx.ui.core.ErrorMessages: java.lang.String getMessage()>();

        r8 = staticinvoke <androidx.ui.core.ErrorMessages: java.lang.Object[] access$toAnyArray(androidx.ui.core.ErrorMessages,int[])>(r0, r1);

        $i0 = lengthof r8;

        r9 = newarray (java.lang.Object)[$i0];

        $i1 = lengthof r8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r8, 0, r9, 0, $i1);

        r10 = r9;

        z1 = 0;

        $i2 = lengthof r10;

        $r5 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r10, $i2);

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r2, $r5);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "java.lang.String.format(this, *args)");

        r3 = $r6;

        r4 = r3;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>(r4);

        throw $r7;
    }

    public final void validateArg(boolean, int)
    {
        androidx.ui.core.ErrorMessages r0, r1;
        boolean z0, z3;
        int i0, $i1, $i2, $i3;
        java.lang.String r2, r3, r4, $r6;
        java.lang.Object[] $r5, r10, r11, r12;
        java.lang.IllegalArgumentException $r7;
        int[] r8, r9;

        r0 := @this: androidx.ui.core.ErrorMessages;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        if z0 != 0 goto label1;

        r1 = r0;

        r8 = newarray (int)[1];

        r8[0] = i0;

        r9 = r8;

        r2 = virtualinvoke r1.<androidx.ui.core.ErrorMessages: java.lang.String getMessage()>();

        r10 = staticinvoke <androidx.ui.core.ErrorMessages: java.lang.Object[] access$toAnyArray(androidx.ui.core.ErrorMessages,int[])>(r1, r9);

        $i1 = lengthof r10;

        r11 = newarray (java.lang.Object)[$i1];

        $i2 = lengthof r10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r10, 0, r11, 0, $i2);

        r12 = r11;

        z3 = 0;

        $i3 = lengthof r12;

        $r5 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r12, $i3);

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r2, $r5);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "java.lang.String.format(this, *args)");

        r3 = $r6;

        r4 = r3;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r4);

        throw $r7;

     label1:
        return;
    }

    public final transient void validateArgs(boolean, int[])
    {
        androidx.ui.core.ErrorMessages r0, r2;
        boolean z0, z3;
        int[] r1, r9, r10;
        java.lang.String r3, r4, r5, $r7;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Object[] $r6, r11, r12, r13;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: androidx.ui.core.ErrorMessages;

        z0 := @parameter0: boolean;

        r1 := @parameter1: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "values");

        if z0 != 0 goto label1;

        r2 = r0;

        $i0 = lengthof r1;

        r9 = newarray (int)[$i0];

        $i1 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r9, 0, $i1);

        r10 = r9;

        r3 = virtualinvoke r2.<androidx.ui.core.ErrorMessages: java.lang.String getMessage()>();

        r11 = staticinvoke <androidx.ui.core.ErrorMessages: java.lang.Object[] access$toAnyArray(androidx.ui.core.ErrorMessages,int[])>(r2, r10);

        $i2 = lengthof r11;

        r12 = newarray (java.lang.Object)[$i2];

        $i3 = lengthof r11;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r11, 0, r12, 0, $i3);

        r13 = r12;

        z3 = 0;

        $i4 = lengthof r13;

        $r6 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r13, $i4);

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r3, $r6);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r7, "java.lang.String.format(this, *args)");

        r4 = $r7;

        r5 = r4;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r5);

        throw $r8;

     label1:
        return;
    }

    public final java.lang.Void arg()
    {
        androidx.ui.core.ErrorMessages r0;
        java.lang.IllegalArgumentException $r1;
        java.lang.String $r2;

        r0 := @this: androidx.ui.core.ErrorMessages;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = virtualinvoke r0.<androidx.ui.core.ErrorMessages: java.lang.String getMessage()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r1;
    }

    public final transient java.lang.Void arg(int[])
    {
        androidx.ui.core.ErrorMessages r0;
        int[] r1;
        java.lang.String r2, r3, r4, $r6;
        int $i0, $i1, $i2;
        java.lang.Object[] $r5, r8, r9, r10;
        java.lang.IllegalArgumentException $r7;
        boolean z1;

        r0 := @this: androidx.ui.core.ErrorMessages;

        r1 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "args");

        r2 = virtualinvoke r0.<androidx.ui.core.ErrorMessages: java.lang.String getMessage()>();

        r8 = staticinvoke <androidx.ui.core.ErrorMessages: java.lang.Object[] access$toAnyArray(androidx.ui.core.ErrorMessages,int[])>(r0, r1);

        $i0 = lengthof r8;

        r9 = newarray (java.lang.Object)[$i0];

        $i1 = lengthof r8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r8, 0, r9, 0, $i1);

        r10 = r9;

        z1 = 0;

        $i2 = lengthof r10;

        $r5 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r10, $i2);

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r2, $r5);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "java.lang.String.format(this, *args)");

        r3 = $r6;

        r4 = r3;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r4);

        throw $r7;
    }

    public final java.lang.Void unsupported()
    {
        androidx.ui.core.ErrorMessages r0;
        java.lang.UnsupportedOperationException $r1;
        java.lang.String $r2;

        r0 := @this: androidx.ui.core.ErrorMessages;

        $r1 = new java.lang.UnsupportedOperationException;

        $r2 = virtualinvoke r0.<androidx.ui.core.ErrorMessages: java.lang.String getMessage()>();

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r2);

        throw $r1;
    }

    private final java.lang.Object[] toAnyArray(int[])
    {
        androidx.ui.core.ErrorMessages r0;
        int[] r1, r3;
        java.util.Collection r2, r4, $r12;
        int i0, i1, i2, $i3, i4;
        java.lang.Integer r5;
        java.util.ArrayList $r6;
        java.util.List $r7;
        java.lang.Object[] $r8, $r9;
        java.lang.NullPointerException $r10;

        r0 := @this: androidx.ui.core.ErrorMessages;

        r1 := @parameter0: int[];

        $r6 = new java.util.ArrayList;

        $i3 = lengthof r1;

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>($i3);

        r2 = (java.util.Collection) $r6;

        r3 = r1;

        i0 = lengthof r3;

        i4 = 0;

     label1:
        if i4 >= i0 goto label2;

        i1 = r3[i4];

        i2 = i1;

        r4 = r2;

        r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        interfaceinvoke r4.<java.util.Collection: boolean add(java.lang.Object)>(r5);

        i4 = i4 + 1;

        goto label1;

     label2:
        $r7 = (java.util.List) r2;

        $r12 = (java.util.Collection) $r7;

        $r8 = newarray (java.lang.Object)[0];

        $r9 = interfaceinvoke $r12.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        if $r9 != null goto label3;

        $r10 = new java.lang.NullPointerException;

        specialinvoke $r10.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlin.Array<T>");

        throw $r10;

     label3:
        return $r9;
    }

    public static final androidx.ui.core.ErrorMessages[] values()
    {
        androidx.ui.core.ErrorMessages[] r0, r1;
        int $i0, $i1;

        r0 = <androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages[] $VALUES>;

        $i0 = lengthof r0;

        r1 = newarray (androidx.ui.core.ErrorMessages)[$i0];

        $i1 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i1);

        return r1;
    }

    public static final androidx.ui.core.ErrorMessages valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        androidx.ui.core.ErrorMessages $r2;

        r0 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "value");

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroidx/ui/core/ErrorMessages;", r0);

        $r2 = (androidx.ui.core.ErrorMessages) $r1;

        return $r2;
    }

    public static final java.lang.Object[] access$toAnyArray(androidx.ui.core.ErrorMessages, int[])
    {
        androidx.ui.core.ErrorMessages $r0;
        int[] r1;
        java.lang.Object[] $r2;

        $r0 := @parameter0: androidx.ui.core.ErrorMessages;

        r1 := @parameter1: int[];

        $r2 = specialinvoke $r0.<androidx.ui.core.ErrorMessages: java.lang.Object[] toAnyArray(int[])>(r1);

        return $r2;
    }

    public static final void <clinit>()
    {
        androidx.ui.core.ErrorMessages[] r0;
        androidx.ui.core.ErrorMessages $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32;

        $r1 = new androidx.ui.core.ErrorMessages;

        specialinvoke $r1.<androidx.ui.core.ErrorMessages: void <init>(java.lang.String,int,java.lang.String)>("ComponentNodeHasParent", 0, "Inserting an instance that already has a parent");

        <androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages ComponentNodeHasParent> = $r1;

        $r2 = new androidx.ui.core.ErrorMessages;

        specialinvoke $r2.<androidx.ui.core.ErrorMessages: void <init>(java.lang.String,int,java.lang.String)>("SizeAlreadyExists", 1, "Layout can only be used once within a MeasureBox");

        <androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages SizeAlreadyExists> = $r2;

        $r3 = new androidx.ui.core.ErrorMessages;

        specialinvoke $r3.<androidx.ui.core.ErrorMessages: void <init>(java.lang.String,int,java.lang.String)>("NoSizeAfterLayout", 2, "MeasureBox requires one Layout element");

        <androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages NoSizeAfterLayout> = $r3;

        $r4 = new androidx.ui.core.ErrorMessages;

        specialinvoke $r4.<androidx.ui.core.ErrorMessages: void <init>(java.lang.String,int,java.lang.String)>("OnlyComponents", 3, "Don\'t know how to add a non-composable element to the hierarchy");

        <androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages OnlyComponents> = $r4;

        $r5 = new androidx.ui.core.ErrorMessages;

        specialinvoke $r5.<androidx.ui.core.ErrorMessages: void <init>(java.lang.String,int,java.lang.String)>("NoMovingSingleElements", 4, "Cannot move elements that contain a maximum of one child");

        <androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages NoMovingSingleElements> = $r5;

        $r6 = new androidx.ui.core.ErrorMessages;

        specialinvoke $r6.<androidx.ui.core.ErrorMessages: void <init>(java.lang.String,int,java.lang.String)>("NoChild", 5, "There is no child in this node");

        <androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages NoChild> = $r6;

        $r7 = new androidx.ui.core.ErrorMessages;

        specialinvoke $r7.<androidx.ui.core.ErrorMessages: void <init>(java.lang.String,int,java.lang.String)>("IndexOutOfRange", 6, "index %1$d is out of range");

        <androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages IndexOutOfRange> = $r7;

        $r8 = new androidx.ui.core.ErrorMessages;

        specialinvoke $r8.<androidx.ui.core.ErrorMessages: void <init>(java.lang.String,int,java.lang.String)>("CountOutOfRange", 7, "count %1$d is out of range");

        <androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages CountOutOfRange> = $r8;

        $r9 = new androidx.ui.core.ErrorMessages;

        specialinvoke $r9.<androidx.ui.core.ErrorMessages: void <init>(java.lang.String,int,java.lang.String)>("SingleChildOnlyOneNode", 8, "Only one child node is allowed");

        <androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages SingleChildOnlyOneNode> = $r9;

        $r10 = new androidx.ui.core.ErrorMessages;

        specialinvoke $r10.<androidx.ui.core.ErrorMessages: void <init>(java.lang.String,int,java.lang.String)>("OwnerAlreadyAttached", 9, "Attaching to an owner when it is already attached");

        <androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages OwnerAlreadyAttached> = $r10;

        $r11 = new androidx.ui.core.ErrorMessages;

        specialinvoke $r11.<androidx.ui.core.ErrorMessages: void <init>(java.lang.String,int,java.lang.String)>("ParentOwnerMustMatchChild", 10, "Attaching to a different owner than parent");

        <androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages ParentOwnerMustMatchChild> = $r11;

        $r12 = new androidx.ui.core.ErrorMessages;

        specialinvoke $r12.<androidx.ui.core.ErrorMessages: void <init>(java.lang.String,int,java.lang.String)>("OwnerAlreadyDetached", 11, "Detaching a node that is already detached");

        <androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages OwnerAlreadyDetached> = $r12;

        $r13 = new androidx.ui.core.ErrorMessages;

        specialinvoke $r13.<androidx.ui.core.ErrorMessages: void <init>(java.lang.String,int,java.lang.String)>("IllegalMoveOperation", 12, "Moving %1$d items from %2$d to %3$d is not legal");

        <androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages IllegalMoveOperation> = $r13;

        $r14 = new androidx.ui.core.ErrorMessages;

        specialinvoke $r14.<androidx.ui.core.ErrorMessages: void <init>(java.lang.String,int,java.lang.String)>("CannotFindLayoutInParent", 13, "Parent layout does not contain this layout as a child");

        <androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages CannotFindLayoutInParent> = $r14;

        $r15 = new androidx.ui.core.ErrorMessages;

        specialinvoke $r15.<androidx.ui.core.ErrorMessages: void <init>(java.lang.String,int,java.lang.String)>("ChildrenUnsupported", 14, "Draw does not have children");

        <androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages ChildrenUnsupported> = $r15;

        $r16 = new androidx.ui.core.ErrorMessages;

        specialinvoke $r16.<androidx.ui.core.ErrorMessages: void <init>(java.lang.String,int,java.lang.String)>("NodeShouldBeAttached", 15, "Node should be attached to an owner");

        <androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages NodeShouldBeAttached> = $r16;

        r0 = newarray (androidx.ui.core.ErrorMessages)[16];

        $r17 = <androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages ComponentNodeHasParent>;

        r0[0] = $r17;

        $r18 = <androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages SizeAlreadyExists>;

        r0[1] = $r18;

        $r19 = <androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages NoSizeAfterLayout>;

        r0[2] = $r19;

        $r20 = <androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages OnlyComponents>;

        r0[3] = $r20;

        $r21 = <androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages NoMovingSingleElements>;

        r0[4] = $r21;

        $r22 = <androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages NoChild>;

        r0[5] = $r22;

        $r23 = <androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages IndexOutOfRange>;

        r0[6] = $r23;

        $r24 = <androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages CountOutOfRange>;

        r0[7] = $r24;

        $r25 = <androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages SingleChildOnlyOneNode>;

        r0[8] = $r25;

        $r26 = <androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages OwnerAlreadyAttached>;

        r0[9] = $r26;

        $r27 = <androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages ParentOwnerMustMatchChild>;

        r0[10] = $r27;

        $r28 = <androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages OwnerAlreadyDetached>;

        r0[11] = $r28;

        $r29 = <androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages IllegalMoveOperation>;

        r0[12] = $r29;

        $r30 = <androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages CannotFindLayoutInParent>;

        r0[13] = $r30;

        $r31 = <androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages ChildrenUnsupported>;

        r0[14] = $r31;

        $r32 = <androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages NodeShouldBeAttached>;

        r0[15] = $r32;

        <androidx.ui.core.ErrorMessages: androidx.ui.core.ErrorMessages[] $VALUES> = r0;

        return;
    }

