androidx.compose.animation.core.SpringSpec
<androidx.compose.animation.core.SpringSpec: float dampingRatio>
<androidx.compose.animation.core.SpringSpec: float stiffness>
<androidx.compose.animation.core.SpringSpec: java.lang.Object visibilityThreshold>
    public void <init>(float, float, java.lang.Object)
    {
        androidx.compose.animation.core.SpringSpec r0;
        float f0, f1;
        java.lang.Object r1;

        r0 := @this: androidx.compose.animation.core.SpringSpec;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        r1 := @parameter2: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.animation.core.SpringSpec: float dampingRatio> = f0;

        r0.<androidx.compose.animation.core.SpringSpec: float stiffness> = f1;

        r0.<androidx.compose.animation.core.SpringSpec: java.lang.Object visibilityThreshold> = r1;

        return;
    }

    public void <init>(float, float, java.lang.Object, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.compose.animation.core.SpringSpec r0;
        int i0, $i1, $i2, $i3;
        kotlin.jvm.internal.DefaultConstructorMarker r1;
        float f0, f1;
        java.lang.Object r2;

        r0 := @this: androidx.compose.animation.core.SpringSpec;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        r2 := @parameter2: java.lang.Object;

        i0 := @parameter3: int;

        r1 := @parameter4: kotlin.jvm.internal.DefaultConstructorMarker;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        f0 = 1.0F;

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        f1 = 1500.0F;

     label2:
        $i3 = i0 & 4;

        if $i3 == 0 goto label3;

        r2 = null;

     label3:
        specialinvoke r0.<androidx.compose.animation.core.SpringSpec: void <init>(float,float,java.lang.Object)>(f0, f1, r2);

        return;
    }

    public final float getDampingRatio()
    {
        androidx.compose.animation.core.SpringSpec r0;
        float $f0;

        r0 := @this: androidx.compose.animation.core.SpringSpec;

        $f0 = r0.<androidx.compose.animation.core.SpringSpec: float dampingRatio>;

        return $f0;
    }

    public final float getStiffness()
    {
        androidx.compose.animation.core.SpringSpec r0;
        float $f0;

        r0 := @this: androidx.compose.animation.core.SpringSpec;

        $f0 = r0.<androidx.compose.animation.core.SpringSpec: float stiffness>;

        return $f0;
    }

    public final java.lang.Object getVisibilityThreshold()
    {
        androidx.compose.animation.core.SpringSpec r0;
        java.lang.Object $r1;

        r0 := @this: androidx.compose.animation.core.SpringSpec;

        $r1 = r0.<androidx.compose.animation.core.SpringSpec: java.lang.Object visibilityThreshold>;

        return $r1;
    }

    public androidx.compose.animation.core.VectorizedSpringSpec vectorize(androidx.compose.animation.core.TwoWayConverter)
    {
        androidx.compose.animation.core.SpringSpec r0;
        androidx.compose.animation.core.TwoWayConverter r1;
        androidx.compose.animation.core.VectorizedSpringSpec $r2;
        java.lang.Object $r3;
        float $f0, $f1;
        androidx.compose.animation.core.AnimationVector $r4;

        r0 := @this: androidx.compose.animation.core.SpringSpec;

        r1 := @parameter0: androidx.compose.animation.core.TwoWayConverter;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "converter");

        $r2 = new androidx.compose.animation.core.VectorizedSpringSpec;

        $f0 = r0.<androidx.compose.animation.core.SpringSpec: float dampingRatio>;

        $f1 = r0.<androidx.compose.animation.core.SpringSpec: float stiffness>;

        $r3 = r0.<androidx.compose.animation.core.SpringSpec: java.lang.Object visibilityThreshold>;

        $r4 = staticinvoke <androidx.compose.animation.core.AnimationSpecKt: androidx.compose.animation.core.AnimationVector access$convert(androidx.compose.animation.core.TwoWayConverter,java.lang.Object)>(r1, $r3);

        specialinvoke $r2.<androidx.compose.animation.core.VectorizedSpringSpec: void <init>(float,float,androidx.compose.animation.core.AnimationVector)>($f0, $f1, $r4);

        return $r2;
    }

    public boolean equals(java.lang.Object)
    {
        androidx.compose.animation.core.SpringSpec r0, $r2, $r3, $r4;
        java.lang.Object r1, $r5, $r6;
        boolean $z0, $z1, $z2, $z3, $z4;
        float $f0, $f1, $f2, $f3;
        byte $b0, $b1;

        r0 := @this: androidx.compose.animation.core.SpringSpec;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof androidx.compose.animation.core.SpringSpec;

        if $z0 == 0 goto label6;

        $r2 = (androidx.compose.animation.core.SpringSpec) r1;

        $f1 = $r2.<androidx.compose.animation.core.SpringSpec: float dampingRatio>;

        $f0 = r0.<androidx.compose.animation.core.SpringSpec: float dampingRatio>;

        $b0 = $f1 cmpg $f0;

        if $b0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        if $z2 == 0 goto label5;

        $r3 = (androidx.compose.animation.core.SpringSpec) r1;

        $f3 = $r3.<androidx.compose.animation.core.SpringSpec: float stiffness>;

        $f2 = r0.<androidx.compose.animation.core.SpringSpec: float stiffness>;

        $b1 = $f3 cmpg $f2;

        if $b1 != 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        if $z3 == 0 goto label5;

        $r4 = (androidx.compose.animation.core.SpringSpec) r1;

        $r6 = $r4.<androidx.compose.animation.core.SpringSpec: java.lang.Object visibilityThreshold>;

        $r5 = r0.<androidx.compose.animation.core.SpringSpec: java.lang.Object visibilityThreshold>;

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r6, $r5);

        if $z1 == 0 goto label5;

        $z4 = 1;

        goto label7;

     label5:
        $z4 = 0;

        goto label7;

     label6:
        $z4 = 0;

     label7:
        return $z4;
    }

    public int hashCode()
    {
        androidx.compose.animation.core.SpringSpec r0;
        java.lang.Object $r1;
        float $f0, $f1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: androidx.compose.animation.core.SpringSpec;

        $r1 = r0.<androidx.compose.animation.core.SpringSpec: java.lang.Object visibilityThreshold>;

        if $r1 == null goto label1;

        $i6 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        goto label2;

     label1:
        $i6 = 0;

     label2:
        $i0 = $i6 * 31;

        $f0 = r0.<androidx.compose.animation.core.SpringSpec: float dampingRatio>;

        $i1 = staticinvoke <java.lang.Float: int hashCode(float)>($f0);

        $i2 = $i0 + $i1;

        $i3 = $i2 * 31;

        $f1 = r0.<androidx.compose.animation.core.SpringSpec: float stiffness>;

        $i4 = staticinvoke <java.lang.Float: int hashCode(float)>($f1);

        $i5 = $i3 + $i4;

        return $i5;
    }

    public void <init>()
    {
        androidx.compose.animation.core.SpringSpec r0;

        r0 := @this: androidx.compose.animation.core.SpringSpec;

        specialinvoke r0.<androidx.compose.animation.core.SpringSpec: void <init>(float,float,java.lang.Object,int,kotlin.jvm.internal.DefaultConstructorMarker)>(0.0F, 0.0F, null, 7, null);

        return;
    }

    public volatile androidx.compose.animation.core.VectorizedFiniteAnimationSpec vectorize(androidx.compose.animation.core.TwoWayConverter)
    {
        androidx.compose.animation.core.SpringSpec r0;
        androidx.compose.animation.core.TwoWayConverter r1;
        androidx.compose.animation.core.VectorizedSpringSpec $r2;
        androidx.compose.animation.core.VectorizedFiniteAnimationSpec $r3;

        r0 := @this: androidx.compose.animation.core.SpringSpec;

        r1 := @parameter0: androidx.compose.animation.core.TwoWayConverter;

        $r2 = virtualinvoke r0.<androidx.compose.animation.core.SpringSpec: androidx.compose.animation.core.VectorizedSpringSpec vectorize(androidx.compose.animation.core.TwoWayConverter)>(r1);

        $r3 = (androidx.compose.animation.core.VectorizedFiniteAnimationSpec) $r2;

        return $r3;
    }

    public volatile androidx.compose.animation.core.VectorizedAnimationSpec vectorize(androidx.compose.animation.core.TwoWayConverter)
    {
        androidx.compose.animation.core.SpringSpec r0;
        androidx.compose.animation.core.TwoWayConverter r1;
        androidx.compose.animation.core.VectorizedSpringSpec $r2;
        androidx.compose.animation.core.VectorizedAnimationSpec $r3;

        r0 := @this: androidx.compose.animation.core.SpringSpec;

        r1 := @parameter0: androidx.compose.animation.core.TwoWayConverter;

        $r2 = virtualinvoke r0.<androidx.compose.animation.core.SpringSpec: androidx.compose.animation.core.VectorizedSpringSpec vectorize(androidx.compose.animation.core.TwoWayConverter)>(r1);

        $r3 = (androidx.compose.animation.core.VectorizedAnimationSpec) $r2;

        return $r3;
    }

