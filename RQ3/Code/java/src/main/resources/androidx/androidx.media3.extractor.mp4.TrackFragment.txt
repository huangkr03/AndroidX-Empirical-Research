androidx.media3.extractor.mp4.TrackFragment
<androidx.media3.extractor.mp4.TrackFragment: androidx.media3.extractor.mp4.DefaultSampleValues header>
<androidx.media3.extractor.mp4.TrackFragment: long atomPosition>
<androidx.media3.extractor.mp4.TrackFragment: long dataPosition>
<androidx.media3.extractor.mp4.TrackFragment: long auxiliaryDataPosition>
<androidx.media3.extractor.mp4.TrackFragment: int trunCount>
<androidx.media3.extractor.mp4.TrackFragment: int sampleCount>
<androidx.media3.extractor.mp4.TrackFragment: long[] trunDataPosition>
<androidx.media3.extractor.mp4.TrackFragment: int[] trunLength>
<androidx.media3.extractor.mp4.TrackFragment: int[] sampleSizeTable>
<androidx.media3.extractor.mp4.TrackFragment: long[] samplePresentationTimesUs>
<androidx.media3.extractor.mp4.TrackFragment: boolean[] sampleIsSyncFrameTable>
<androidx.media3.extractor.mp4.TrackFragment: boolean definesEncryptionData>
<androidx.media3.extractor.mp4.TrackFragment: boolean[] sampleHasSubsampleEncryptionTable>
<androidx.media3.extractor.mp4.TrackFragment: androidx.media3.extractor.mp4.TrackEncryptionBox trackEncryptionBox>
<androidx.media3.extractor.mp4.TrackFragment: androidx.media3.common.util.ParsableByteArray sampleEncryptionData>
<androidx.media3.extractor.mp4.TrackFragment: boolean sampleEncryptionDataNeedsFill>
<androidx.media3.extractor.mp4.TrackFragment: long nextFragmentDecodeTime>
<androidx.media3.extractor.mp4.TrackFragment: boolean nextFragmentDecodeTimeIncludesMoov>
    public void <init>()
    {
        androidx.media3.extractor.mp4.TrackFragment r0;
        long[] $r1, $r4;
        int[] $r2, $r3;
        boolean[] $r5, $r6;
        androidx.media3.common.util.ParsableByteArray $r7;

        r0 := @this: androidx.media3.extractor.mp4.TrackFragment;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (long)[0];

        r0.<androidx.media3.extractor.mp4.TrackFragment: long[] trunDataPosition> = $r1;

        $r2 = newarray (int)[0];

        r0.<androidx.media3.extractor.mp4.TrackFragment: int[] trunLength> = $r2;

        $r3 = newarray (int)[0];

        r0.<androidx.media3.extractor.mp4.TrackFragment: int[] sampleSizeTable> = $r3;

        $r4 = newarray (long)[0];

        r0.<androidx.media3.extractor.mp4.TrackFragment: long[] samplePresentationTimesUs> = $r4;

        $r5 = newarray (boolean)[0];

        r0.<androidx.media3.extractor.mp4.TrackFragment: boolean[] sampleIsSyncFrameTable> = $r5;

        $r6 = newarray (boolean)[0];

        r0.<androidx.media3.extractor.mp4.TrackFragment: boolean[] sampleHasSubsampleEncryptionTable> = $r6;

        $r7 = new androidx.media3.common.util.ParsableByteArray;

        specialinvoke $r7.<androidx.media3.common.util.ParsableByteArray: void <init>()>();

        r0.<androidx.media3.extractor.mp4.TrackFragment: androidx.media3.common.util.ParsableByteArray sampleEncryptionData> = $r7;

        return;
    }

    public void reset()
    {
        androidx.media3.extractor.mp4.TrackFragment r0;

        r0 := @this: androidx.media3.extractor.mp4.TrackFragment;

        r0.<androidx.media3.extractor.mp4.TrackFragment: int trunCount> = 0;

        r0.<androidx.media3.extractor.mp4.TrackFragment: long nextFragmentDecodeTime> = 0L;

        r0.<androidx.media3.extractor.mp4.TrackFragment: boolean nextFragmentDecodeTimeIncludesMoov> = 0;

        r0.<androidx.media3.extractor.mp4.TrackFragment: boolean definesEncryptionData> = 0;

        r0.<androidx.media3.extractor.mp4.TrackFragment: boolean sampleEncryptionDataNeedsFill> = 0;

        r0.<androidx.media3.extractor.mp4.TrackFragment: androidx.media3.extractor.mp4.TrackEncryptionBox trackEncryptionBox> = null;

        return;
    }

    public void initTables(int, int)
    {
        androidx.media3.extractor.mp4.TrackFragment r0;
        int i0, i1, i2, $i3, $i4, $i5;
        int[] $r1, $r2, $r3, $r8;
        long[] $r4, $r7;
        boolean[] $r5, $r6;

        r0 := @this: androidx.media3.extractor.mp4.TrackFragment;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0.<androidx.media3.extractor.mp4.TrackFragment: int trunCount> = i0;

        r0.<androidx.media3.extractor.mp4.TrackFragment: int sampleCount> = i1;

        $r1 = r0.<androidx.media3.extractor.mp4.TrackFragment: int[] trunLength>;

        $i3 = lengthof $r1;

        if $i3 >= i0 goto label1;

        $r7 = newarray (long)[i0];

        r0.<androidx.media3.extractor.mp4.TrackFragment: long[] trunDataPosition> = $r7;

        $r8 = newarray (int)[i0];

        r0.<androidx.media3.extractor.mp4.TrackFragment: int[] trunLength> = $r8;

     label1:
        $r2 = r0.<androidx.media3.extractor.mp4.TrackFragment: int[] sampleSizeTable>;

        $i4 = lengthof $r2;

        if $i4 >= i1 goto label2;

        $i5 = i1 * 125;

        i2 = $i5 / 100;

        $r3 = newarray (int)[i2];

        r0.<androidx.media3.extractor.mp4.TrackFragment: int[] sampleSizeTable> = $r3;

        $r4 = newarray (long)[i2];

        r0.<androidx.media3.extractor.mp4.TrackFragment: long[] samplePresentationTimesUs> = $r4;

        $r5 = newarray (boolean)[i2];

        r0.<androidx.media3.extractor.mp4.TrackFragment: boolean[] sampleIsSyncFrameTable> = $r5;

        $r6 = newarray (boolean)[i2];

        r0.<androidx.media3.extractor.mp4.TrackFragment: boolean[] sampleHasSubsampleEncryptionTable> = $r6;

     label2:
        return;
    }

    public void initEncryptionData(int)
    {
        androidx.media3.extractor.mp4.TrackFragment r0;
        int i0;
        androidx.media3.common.util.ParsableByteArray $r1;

        r0 := @this: androidx.media3.extractor.mp4.TrackFragment;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.media3.extractor.mp4.TrackFragment: androidx.media3.common.util.ParsableByteArray sampleEncryptionData>;

        virtualinvoke $r1.<androidx.media3.common.util.ParsableByteArray: void reset(int)>(i0);

        r0.<androidx.media3.extractor.mp4.TrackFragment: boolean definesEncryptionData> = 1;

        r0.<androidx.media3.extractor.mp4.TrackFragment: boolean sampleEncryptionDataNeedsFill> = 1;

        return;
    }

    public void fillEncryptionData(androidx.media3.extractor.ExtractorInput) throws java.io.IOException
    {
        androidx.media3.extractor.mp4.TrackFragment r0;
        androidx.media3.extractor.ExtractorInput r1;
        androidx.media3.common.util.ParsableByteArray $r2, $r4, $r5;
        byte[] $r3;
        int $i0;

        r0 := @this: androidx.media3.extractor.mp4.TrackFragment;

        r1 := @parameter0: androidx.media3.extractor.ExtractorInput;

        $r2 = r0.<androidx.media3.extractor.mp4.TrackFragment: androidx.media3.common.util.ParsableByteArray sampleEncryptionData>;

        $r3 = virtualinvoke $r2.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        $r4 = r0.<androidx.media3.extractor.mp4.TrackFragment: androidx.media3.common.util.ParsableByteArray sampleEncryptionData>;

        $i0 = virtualinvoke $r4.<androidx.media3.common.util.ParsableByteArray: int limit()>();

        interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: void readFully(byte[],int,int)>($r3, 0, $i0);

        $r5 = r0.<androidx.media3.extractor.mp4.TrackFragment: androidx.media3.common.util.ParsableByteArray sampleEncryptionData>;

        virtualinvoke $r5.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>(0);

        r0.<androidx.media3.extractor.mp4.TrackFragment: boolean sampleEncryptionDataNeedsFill> = 0;

        return;
    }

    public void fillEncryptionData(androidx.media3.common.util.ParsableByteArray)
    {
        androidx.media3.extractor.mp4.TrackFragment r0;
        androidx.media3.common.util.ParsableByteArray r1, $r2, $r4, $r5;
        byte[] $r3;
        int $i0;

        r0 := @this: androidx.media3.extractor.mp4.TrackFragment;

        r1 := @parameter0: androidx.media3.common.util.ParsableByteArray;

        $r2 = r0.<androidx.media3.extractor.mp4.TrackFragment: androidx.media3.common.util.ParsableByteArray sampleEncryptionData>;

        $r3 = virtualinvoke $r2.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        $r4 = r0.<androidx.media3.extractor.mp4.TrackFragment: androidx.media3.common.util.ParsableByteArray sampleEncryptionData>;

        $i0 = virtualinvoke $r4.<androidx.media3.common.util.ParsableByteArray: int limit()>();

        virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: void readBytes(byte[],int,int)>($r3, 0, $i0);

        $r5 = r0.<androidx.media3.extractor.mp4.TrackFragment: androidx.media3.common.util.ParsableByteArray sampleEncryptionData>;

        virtualinvoke $r5.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>(0);

        r0.<androidx.media3.extractor.mp4.TrackFragment: boolean sampleEncryptionDataNeedsFill> = 0;

        return;
    }

    public long getSamplePresentationTimeUs(int)
    {
        androidx.media3.extractor.mp4.TrackFragment r0;
        int i0;
        long[] $r1;
        long $l1;

        r0 := @this: androidx.media3.extractor.mp4.TrackFragment;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.media3.extractor.mp4.TrackFragment: long[] samplePresentationTimesUs>;

        $l1 = $r1[i0];

        return $l1;
    }

    public boolean sampleHasSubsampleEncryptionTable(int)
    {
        androidx.media3.extractor.mp4.TrackFragment r0;
        int i0;
        boolean $z0, $z1, $z2;
        boolean[] $r1;

        r0 := @this: androidx.media3.extractor.mp4.TrackFragment;

        i0 := @parameter0: int;

        $z0 = r0.<androidx.media3.extractor.mp4.TrackFragment: boolean definesEncryptionData>;

        if $z0 == 0 goto label1;

        $r1 = r0.<androidx.media3.extractor.mp4.TrackFragment: boolean[] sampleHasSubsampleEncryptionTable>;

        $z1 = $r1[i0];

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

