androidx.remotecallback.CallbackHandlerRegistry
<androidx.remotecallback.CallbackHandlerRegistry: androidx.remotecallback.CallbackHandlerRegistry sInstance>
<androidx.remotecallback.CallbackHandlerRegistry: java.lang.String TAG>
<androidx.remotecallback.CallbackHandlerRegistry: androidx.collection.ArrayMap mClsLookup>
    public void <init>()
    {
        androidx.remotecallback.CallbackHandlerRegistry r0;
        androidx.collection.ArrayMap $r1;

        r0 := @this: androidx.remotecallback.CallbackHandlerRegistry;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new androidx.collection.ArrayMap;

        specialinvoke $r1.<androidx.collection.ArrayMap: void <init>()>();

        r0.<androidx.remotecallback.CallbackHandlerRegistry: androidx.collection.ArrayMap mClsLookup> = $r1;

        return;
    }

    public androidx.remotecallback.CallbackReceiver getAndResetStub(java.lang.Class, android.content.Context, java.lang.String)
    {
        androidx.remotecallback.CallbackHandlerRegistry r0;
        java.lang.Class r1;
        android.content.Context r2;
        java.lang.String r3;
        androidx.remotecallback.CallbackHandlerRegistry$ClsHandler r4;
        androidx.remotecallback.CallbackReceiver $r5, $r6;

        r0 := @this: androidx.remotecallback.CallbackHandlerRegistry;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: android.content.Context;

        r3 := @parameter2: java.lang.String;

        virtualinvoke r0.<androidx.remotecallback.CallbackHandlerRegistry: void ensureInitialized(java.lang.Class)>(r1);

        r4 = specialinvoke r0.<androidx.remotecallback.CallbackHandlerRegistry: androidx.remotecallback.CallbackHandlerRegistry$ClsHandler findMap(java.lang.Class)>(r1);

        $r5 = r4.<androidx.remotecallback.CallbackHandlerRegistry$ClsHandler: androidx.remotecallback.CallbackReceiver mCallStub>;

        specialinvoke r0.<androidx.remotecallback.CallbackHandlerRegistry: void initStub(androidx.remotecallback.CallbackReceiver,java.lang.Class,android.content.Context,java.lang.String)>($r5, r1, r2, r3);

        $r6 = r4.<androidx.remotecallback.CallbackHandlerRegistry$ClsHandler: androidx.remotecallback.CallbackReceiver mCallStub>;

        return $r6;
    }

    private void initStub(androidx.remotecallback.CallbackReceiver, java.lang.Class, android.content.Context, java.lang.String)
    {
        androidx.remotecallback.CallbackHandlerRegistry r0;
        androidx.remotecallback.CallbackReceiver r1;
        java.lang.Class r2;
        android.content.Context r3;
        java.lang.String r4, $r6;
        androidx.remotecallback.CallbackHandlerRegistry$ClsHandler r5;
        boolean $z0;

        r0 := @this: androidx.remotecallback.CallbackHandlerRegistry;

        r1 := @parameter0: androidx.remotecallback.CallbackReceiver;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: android.content.Context;

        r4 := @parameter3: java.lang.String;

        r5 = specialinvoke r0.<androidx.remotecallback.CallbackHandlerRegistry: androidx.remotecallback.CallbackHandlerRegistry$ClsHandler findMap(java.lang.Class)>(r2);

        r5.<androidx.remotecallback.CallbackHandlerRegistry$ClsHandler: android.content.Context mContext> = r3;

        $z0 = r1 instanceof android.content.ContentProvider;

        if $z0 == 0 goto label1;

        $r6 = specialinvoke r0.<androidx.remotecallback.CallbackHandlerRegistry: java.lang.String determineAuthority(android.content.Context,java.lang.String,java.lang.Class)>(r3, r4, r2);

        r5.<androidx.remotecallback.CallbackHandlerRegistry$ClsHandler: java.lang.String mAuthority> = $r6;

        goto label2;

     label1:
        r5.<androidx.remotecallback.CallbackHandlerRegistry$ClsHandler: java.lang.String mAuthority> = null;

     label2:
        return;
    }

    private java.lang.String determineAuthority(android.content.Context, java.lang.String, java.lang.Class)
    {
        androidx.remotecallback.CallbackHandlerRegistry r0;
        android.content.Context r1;
        java.lang.String r2, $r6, $r7, $r8, $r13;
        java.lang.Class r3;
        android.content.pm.PackageManager $r4;
        android.content.ComponentName $r5;
        java.lang.Throwable $r9, r15;
        java.lang.StringBuilder $r10, $r11, $r12;
        android.content.pm.ProviderInfo r14;

        r0 := @this: androidx.remotecallback.CallbackHandlerRegistry;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Class;

        if r2 == null goto label1;

        return r2;

     label1:
        $r4 = virtualinvoke r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r5 = new android.content.ComponentName;

        $r6 = virtualinvoke r1.<android.content.Context: java.lang.String getPackageName()>();

        $r7 = virtualinvoke r3.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r5.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>($r6, $r7);

        r14 = virtualinvoke $r4.<android.content.pm.PackageManager: android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,int)>($r5, 0);

        $r8 = r14.<android.content.pm.ProviderInfo: java.lang.String authority>;

     label2:
        return $r8;

     label3:
        $r9 := @caughtexception;

        r15 = $r9;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t find provider ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("CallbackHandlerRegistry", $r13, r15);

        return null;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
    }

    void ensureInitialized(java.lang.Class)
    {
        androidx.remotecallback.CallbackHandlerRegistry r0, r2;
        java.lang.Class r1;
        java.lang.Throwable r3, $r6;
        androidx.collection.ArrayMap $r5;
        boolean $z0;

        r0 := @this: androidx.remotecallback.CallbackHandlerRegistry;

        r1 := @parameter0: java.lang.Class;

        r2 = r0;

        entermonitor r0;

     label1:
        $r5 = r0.<androidx.remotecallback.CallbackHandlerRegistry: androidx.collection.ArrayMap mClsLookup>;

        $z0 = virtualinvoke $r5.<androidx.collection.ArrayMap: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

        specialinvoke r0.<androidx.remotecallback.CallbackHandlerRegistry: void runInit(java.lang.Class)>(r1);

     label2:
        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void invokeCallback(android.content.Context, androidx.remotecallback.CallbackReceiver, android.content.Intent)
    {
        androidx.remotecallback.CallbackHandlerRegistry r0;
        android.content.Context r1;
        androidx.remotecallback.CallbackReceiver r2;
        android.content.Intent r3;
        android.os.Bundle $r4;

        r0 := @this: androidx.remotecallback.CallbackHandlerRegistry;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: androidx.remotecallback.CallbackReceiver;

        r3 := @parameter2: android.content.Intent;

        $r4 = virtualinvoke r3.<android.content.Intent: android.os.Bundle getExtras()>();

        virtualinvoke r0.<androidx.remotecallback.CallbackHandlerRegistry: void invokeCallback(android.content.Context,androidx.remotecallback.CallbackReceiver,android.os.Bundle)>(r1, r2, $r4);

        return;
    }

    public void invokeCallback(android.content.Context, androidx.remotecallback.CallbackReceiver, android.os.Bundle)
    {
        androidx.remotecallback.CallbackHandlerRegistry r0;
        android.content.Context r1;
        androidx.remotecallback.CallbackReceiver r2;
        android.os.Bundle r3;
        java.lang.Class r4;
        androidx.remotecallback.CallbackHandlerRegistry$ClsHandler r5;
        java.lang.String r6, $r14, $r16, $r19, $r21;
        androidx.remotecallback.CallbackHandlerRegistry$CallbackHandler r7;
        androidx.collection.ArrayMap $r8;
        java.lang.Object $r9;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r15, $r17, $r18, $r20;

        r0 := @this: androidx.remotecallback.CallbackHandlerRegistry;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: androidx.remotecallback.CallbackReceiver;

        r3 := @parameter2: android.os.Bundle;

        r4 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        virtualinvoke r0.<androidx.remotecallback.CallbackHandlerRegistry: void ensureInitialized(java.lang.Class)>(r4);

        r5 = specialinvoke r0.<androidx.remotecallback.CallbackHandlerRegistry: androidx.remotecallback.CallbackHandlerRegistry$ClsHandler findMap(java.lang.Class)>(r4);

        if r5 != null goto label1;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No map found for ");

        $r19 = virtualinvoke r4.<java.lang.Class: java.lang.String getName()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CallbackHandlerRegistry", $r21);

        return;

     label1:
        r6 = virtualinvoke r3.<android.os.Bundle: java.lang.String getString(java.lang.String)>("remotecallback.method");

        $r8 = r5.<androidx.remotecallback.CallbackHandlerRegistry$ClsHandler: androidx.collection.ArrayMap mHandlers>;

        $r9 = virtualinvoke $r8.<androidx.collection.ArrayMap: java.lang.Object get(java.lang.Object)>(r6);

        r7 = (androidx.remotecallback.CallbackHandlerRegistry$CallbackHandler) $r9;

        if r7 != null goto label2;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No handler found for ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on ");

        $r14 = virtualinvoke r4.<java.lang.Class: java.lang.String getName()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CallbackHandlerRegistry", $r16);

        return;

     label2:
        interfaceinvoke r7.<androidx.remotecallback.CallbackHandlerRegistry$CallbackHandler: void executeCallback(android.content.Context,androidx.remotecallback.CallbackReceiver,android.os.Bundle)>(r1, r2, r3);

        return;
    }

    private androidx.remotecallback.CallbackHandlerRegistry$ClsHandler findMap(java.lang.Class)
    {
        androidx.remotecallback.CallbackHandlerRegistry r0, r3;
        java.lang.Class r1, $r8, $r9;
        androidx.remotecallback.CallbackHandlerRegistry$ClsHandler r2, $r10;
        java.lang.Throwable r4, $r11;
        androidx.collection.ArrayMap $r6;
        java.lang.Object $r7;

        r0 := @this: androidx.remotecallback.CallbackHandlerRegistry;

        r1 := @parameter0: java.lang.Class;

        r3 = r0;

        entermonitor r0;

     label1:
        $r6 = r0.<androidx.remotecallback.CallbackHandlerRegistry: androidx.collection.ArrayMap mClsLookup>;

        $r7 = virtualinvoke $r6.<androidx.collection.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (androidx.remotecallback.CallbackHandlerRegistry$ClsHandler) $r7;

        exitmonitor r3;

     label2:
        goto label5;

     label3:
        $r11 := @caughtexception;

        r4 = $r11;

        exitmonitor r3;

     label4:
        throw r4;

     label5:
        if r2 == null goto label6;

        return r2;

     label6:
        $r8 = virtualinvoke r1.<java.lang.Class: java.lang.Class getSuperclass()>();

        if $r8 == null goto label7;

        $r9 = virtualinvoke r1.<java.lang.Class: java.lang.Class getSuperclass()>();

        $r10 = specialinvoke r0.<androidx.remotecallback.CallbackHandlerRegistry: androidx.remotecallback.CallbackHandlerRegistry$ClsHandler findMap(java.lang.Class)>($r9);

        return $r10;

     label7:
        return null;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void runInit(java.lang.Class)
    {
        androidx.remotecallback.CallbackHandlerRegistry r0;
        java.lang.Class r1, $r5;
        androidx.remotecallback.CallbackHandlerRegistry$ClsHandler $r2, r41;
        androidx.collection.ArrayMap $r3;
        java.lang.Class[] $r6;
        java.lang.reflect.Constructor $r7;
        java.lang.Object[] $r8;
        java.lang.Object $r9;
        androidx.remotecallback.CallbackReceiver $r10;
        java.lang.Throwable $r11, $r17, $r23, $r29, $r35, r42, r43, r44, r45, r46;
        java.lang.StringBuilder $r12, $r13, $r15, $r18, $r19, $r21, $r24, $r25, $r27, $r30, $r31, $r33, $r36, $r37, $r39;
        java.lang.String $r14, $r16, $r20, $r22, $r26, $r28, $r32, $r34, $r38, $r40;

        r0 := @this: androidx.remotecallback.CallbackHandlerRegistry;

        r1 := @parameter0: java.lang.Class;

     label1:
        $r2 = new androidx.remotecallback.CallbackHandlerRegistry$ClsHandler;

        specialinvoke $r2.<androidx.remotecallback.CallbackHandlerRegistry$ClsHandler: void <init>()>();

        r41 = $r2;

        $r3 = r0.<androidx.remotecallback.CallbackHandlerRegistry: androidx.collection.ArrayMap mClsLookup>;

        virtualinvoke $r3.<androidx.collection.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r41);

        $r5 = staticinvoke <androidx.remotecallback.CallbackHandlerRegistry: java.lang.Class findInitClass(java.lang.Class)>(r1);

        $r6 = newarray (java.lang.Class)[0];

        $r7 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r6);

        $r8 = newarray (java.lang.Object)[0];

        $r9 = virtualinvoke $r7.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r8);

        $r10 = (androidx.remotecallback.CallbackReceiver) $r9;

        r41.<androidx.remotecallback.CallbackHandlerRegistry$ClsHandler: androidx.remotecallback.CallbackReceiver mCallStub> = $r10;

     label2:
        goto label8;

     label3:
        $r35 := @caughtexception;

        r42 = $r35;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to initialize ");

        $r38 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r39 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("CallbackHandlerRegistry", $r40, r42);

        goto label8;

     label4:
        $r17 := @caughtexception;

        r43 = $r17;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to initialize ");

        $r20 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("CallbackHandlerRegistry", $r22, r43);

        goto label8;

     label5:
        $r11 := @caughtexception;

        r44 = $r11;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to initialize ");

        $r14 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("CallbackHandlerRegistry", $r16, r44);

        goto label8;

     label6:
        $r29 := @caughtexception;

        r45 = $r29;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to initialize ");

        $r32 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("CallbackHandlerRegistry", $r34, r45);

        goto label8;

     label7:
        $r23 := @caughtexception;

        r46 = $r23;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to initialize ");

        $r26 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("CallbackHandlerRegistry", $r28, r46);

     label8:
        return;

        catch java.lang.InstantiationException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label5;
        catch java.lang.NoSuchMethodException from label1 to label2 with label6;
        catch java.lang.ClassNotFoundException from label1 to label2 with label7;
    }

    private void registerHandler(java.lang.Class, java.lang.String, androidx.remotecallback.CallbackHandlerRegistry$CallbackHandler)
    {
        androidx.remotecallback.CallbackHandlerRegistry r0;
        java.lang.Class r1;
        java.lang.String r2;
        androidx.remotecallback.CallbackHandlerRegistry$CallbackHandler r3;
        androidx.remotecallback.CallbackHandlerRegistry$ClsHandler r4;
        androidx.collection.ArrayMap $r5, $r7;
        java.lang.Object $r6;
        java.lang.IllegalStateException $r9;

        r0 := @this: androidx.remotecallback.CallbackHandlerRegistry;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: androidx.remotecallback.CallbackHandlerRegistry$CallbackHandler;

        $r5 = r0.<androidx.remotecallback.CallbackHandlerRegistry: androidx.collection.ArrayMap mClsLookup>;

        $r6 = virtualinvoke $r5.<androidx.collection.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (androidx.remotecallback.CallbackHandlerRegistry$ClsHandler) $r6;

        if r4 != null goto label1;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("registerHandler called before init was run");

        throw $r9;

     label1:
        $r7 = r4.<androidx.remotecallback.CallbackHandlerRegistry$ClsHandler: androidx.collection.ArrayMap mHandlers>;

        virtualinvoke $r7.<androidx.collection.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);

        return;
    }

    private static java.lang.Class findInitClass(java.lang.Class) throws java.lang.ClassNotFoundException
    {
        java.lang.Class r0, $r7;
        java.lang.String r1, r2, $r5;
        java.lang.Package $r3;
        java.lang.Object[] $r4;
        java.lang.ClassLoader $r6;

        r0 := @parameter0: java.lang.Class;

        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.Package getPackage()>();

        r1 = virtualinvoke $r3.<java.lang.Package: java.lang.String getName()>();

        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = r1;

        $r5 = virtualinvoke r0.<java.lang.Class: java.lang.String getSimpleName()>();

        $r4[1] = $r5;

        r2 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s.%sInitializer", $r4);

        $r6 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r7 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r2, 0, $r6);

        return $r7;
    }

    public static void registerCallbackHandler(java.lang.Class, java.lang.String, androidx.remotecallback.CallbackHandlerRegistry$CallbackHandler)
    {
        java.lang.Class r0;
        java.lang.String r1;
        androidx.remotecallback.CallbackHandlerRegistry$CallbackHandler r2;
        androidx.remotecallback.CallbackHandlerRegistry $r3;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: androidx.remotecallback.CallbackHandlerRegistry$CallbackHandler;

        $r3 = <androidx.remotecallback.CallbackHandlerRegistry: androidx.remotecallback.CallbackHandlerRegistry sInstance>;

        specialinvoke $r3.<androidx.remotecallback.CallbackHandlerRegistry: void registerHandler(java.lang.Class,java.lang.String,androidx.remotecallback.CallbackHandlerRegistry$CallbackHandler)>(r0, r1, r2);

        return;
    }

    public static androidx.remotecallback.RemoteCallback stubToRemoteCallback(androidx.remotecallback.CallbackReceiver, java.lang.Class, android.os.Bundle, java.lang.String)
    {
        androidx.remotecallback.CallbackReceiver r0;
        java.lang.Class r1;
        android.os.Bundle r2;
        java.lang.String r3, r6;
        androidx.remotecallback.CallbackHandlerRegistry$ClsHandler r4;
        android.content.Context r5;
        boolean $z0;
        androidx.remotecallback.CallbackHandlerRegistry $r7;
        androidx.remotecallback.CallbackBase $r8;
        androidx.remotecallback.RemoteCallback $r9;
        java.lang.IllegalArgumentException $r10;

        r0 := @parameter0: androidx.remotecallback.CallbackReceiver;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: android.os.Bundle;

        r3 := @parameter3: java.lang.String;

        $z0 = r0 instanceof androidx.remotecallback.CallbackBase;

        if $z0 != 0 goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("May only be called on classes that extend a *WithCallbacks base class.");

        throw $r10;

     label1:
        $r7 = <androidx.remotecallback.CallbackHandlerRegistry: androidx.remotecallback.CallbackHandlerRegistry sInstance>;

        r4 = specialinvoke $r7.<androidx.remotecallback.CallbackHandlerRegistry: androidx.remotecallback.CallbackHandlerRegistry$ClsHandler findMap(java.lang.Class)>(r1);

        r5 = r4.<androidx.remotecallback.CallbackHandlerRegistry$ClsHandler: android.content.Context mContext>;

        r6 = r4.<androidx.remotecallback.CallbackHandlerRegistry$ClsHandler: java.lang.String mAuthority>;

        r4.<androidx.remotecallback.CallbackHandlerRegistry$ClsHandler: android.content.Context mContext> = null;

        r4.<androidx.remotecallback.CallbackHandlerRegistry$ClsHandler: java.lang.String mAuthority> = null;

        $r8 = (androidx.remotecallback.CallbackBase) r0;

        $r9 = interfaceinvoke $r8.<androidx.remotecallback.CallbackBase: androidx.remotecallback.RemoteCallback toRemoteCallback(java.lang.Class,android.content.Context,java.lang.String,android.os.Bundle,java.lang.String)>(r1, r5, r6, r2, r3);

        return $r9;
    }

    static void <clinit>()
    {
        androidx.remotecallback.CallbackHandlerRegistry $r0;

        $r0 = new androidx.remotecallback.CallbackHandlerRegistry;

        specialinvoke $r0.<androidx.remotecallback.CallbackHandlerRegistry: void <init>()>();

        <androidx.remotecallback.CallbackHandlerRegistry: androidx.remotecallback.CallbackHandlerRegistry sInstance> = $r0;

        return;
    }

androidx.remotecallback.CallbackHandlerRegistry$CallbackHandler
<androidx.remotecallback.CallbackHandlerRegistry$CallbackHandler: void executeCallback(android.content.Context,androidx.remotecallback.CallbackReceiver,android.os.Bundle)>
androidx.remotecallback.CallbackHandlerRegistry$ClsHandler
<androidx.remotecallback.CallbackHandlerRegistry$ClsHandler: androidx.collection.ArrayMap mHandlers>
<androidx.remotecallback.CallbackHandlerRegistry$ClsHandler: java.lang.String mAuthority>
<androidx.remotecallback.CallbackHandlerRegistry$ClsHandler: android.content.Context mContext>
<androidx.remotecallback.CallbackHandlerRegistry$ClsHandler: androidx.remotecallback.CallbackReceiver mCallStub>
    void <init>()
    {
        androidx.remotecallback.CallbackHandlerRegistry$ClsHandler r0;
        androidx.collection.ArrayMap $r1;

        r0 := @this: androidx.remotecallback.CallbackHandlerRegistry$ClsHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new androidx.collection.ArrayMap;

        specialinvoke $r1.<androidx.collection.ArrayMap: void <init>()>();

        r0.<androidx.remotecallback.CallbackHandlerRegistry$ClsHandler: androidx.collection.ArrayMap mHandlers> = $r1;

        return;
    }

