kotlin.io.FileTreeWalk
<kotlin.io.FileTreeWalk: kotlin.io.FileWalkDirection direction>
<kotlin.io.FileTreeWalk: int maxDepth>
<kotlin.io.FileTreeWalk: kotlin.jvm.functions.Function1 onEnter>
<kotlin.io.FileTreeWalk: kotlin.jvm.functions.Function2 onFail>
<kotlin.io.FileTreeWalk: kotlin.jvm.functions.Function1 onLeave>
<kotlin.io.FileTreeWalk: java.io.File start>
    public void <init>(java.io.File, kotlin.io.FileWalkDirection)
    {
        kotlin.io.FileTreeWalk $r0;
        java.io.File $r1;
        kotlin.io.FileWalkDirection $r2;

        $r0 := @this: kotlin.io.FileTreeWalk;

        $r1 := @parameter0: java.io.File;

        $r2 := @parameter1: kotlin.io.FileWalkDirection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "start");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "direction");

        specialinvoke $r0.<kotlin.io.FileTreeWalk: void <init>(java.io.File,kotlin.io.FileWalkDirection,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function2,int,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r1, $r2, null, null, null, 0, 32, null);

        return;
    }

    public void <init>(java.io.File, kotlin.io.FileWalkDirection, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        kotlin.io.FileTreeWalk $r0;
        java.io.File $r1;
        kotlin.jvm.internal.DefaultConstructorMarker $r2;
        kotlin.io.FileWalkDirection $r3;
        int $i0;

        $r0 := @this: kotlin.io.FileTreeWalk;

        $r1 := @parameter0: java.io.File;

        $r3 := @parameter1: kotlin.io.FileWalkDirection;

        $i0 := @parameter2: int;

        $r2 := @parameter3: kotlin.jvm.internal.DefaultConstructorMarker;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label1;

        $r3 = <kotlin.io.FileWalkDirection: kotlin.io.FileWalkDirection TOP_DOWN>;

     label1:
        specialinvoke $r0.<kotlin.io.FileTreeWalk: void <init>(java.io.File,kotlin.io.FileWalkDirection)>($r1, $r3);

        return;
    }

    private void <init>(java.io.File, kotlin.io.FileWalkDirection, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function2, int)
    {
        kotlin.io.FileTreeWalk $r0;
        java.io.File $r1;
        kotlin.io.FileWalkDirection $r2;
        kotlin.jvm.functions.Function1 $r3, $r4;
        kotlin.jvm.functions.Function2 $r5;
        int $i0;

        $r0 := @this: kotlin.io.FileTreeWalk;

        $r1 := @parameter0: java.io.File;

        $r2 := @parameter1: kotlin.io.FileWalkDirection;

        $r3 := @parameter2: kotlin.jvm.functions.Function1;

        $r4 := @parameter3: kotlin.jvm.functions.Function1;

        $r5 := @parameter4: kotlin.jvm.functions.Function2;

        $i0 := @parameter5: int;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<kotlin.io.FileTreeWalk: java.io.File start> = $r1;

        $r0.<kotlin.io.FileTreeWalk: kotlin.io.FileWalkDirection direction> = $r2;

        $r0.<kotlin.io.FileTreeWalk: kotlin.jvm.functions.Function1 onEnter> = $r3;

        $r0.<kotlin.io.FileTreeWalk: kotlin.jvm.functions.Function1 onLeave> = $r4;

        $r0.<kotlin.io.FileTreeWalk: kotlin.jvm.functions.Function2 onFail> = $r5;

        $r0.<kotlin.io.FileTreeWalk: int maxDepth> = $i0;

        return;
    }

    void <init>(java.io.File, kotlin.io.FileWalkDirection, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function2, int, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        kotlin.io.FileTreeWalk $r0;
        java.io.File $r1;
        kotlin.jvm.functions.Function1 $r2, $r3;
        kotlin.jvm.functions.Function2 $r4;
        int $i0, $i1, $i2;
        kotlin.io.FileWalkDirection $r5;
        kotlin.jvm.internal.DefaultConstructorMarker $r6;

        $r0 := @this: kotlin.io.FileTreeWalk;

        $r1 := @parameter0: java.io.File;

        $r5 := @parameter1: kotlin.io.FileWalkDirection;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        $r3 := @parameter3: kotlin.jvm.functions.Function1;

        $r4 := @parameter4: kotlin.jvm.functions.Function2;

        $i1 := @parameter5: int;

        $i0 := @parameter6: int;

        $r6 := @parameter7: kotlin.jvm.internal.DefaultConstructorMarker;

        $i2 = $i0 & 2;

        if $i2 == 0 goto label1;

        $r5 = <kotlin.io.FileWalkDirection: kotlin.io.FileWalkDirection TOP_DOWN>;

        goto label1;

     label1:
        $i0 = $i0 & 32;

        if $i0 == 0 goto label2;

        $i1 = 2147483647;

        goto label2;

     label2:
        specialinvoke $r0.<kotlin.io.FileTreeWalk: void <init>(java.io.File,kotlin.io.FileWalkDirection,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function2,int)>($r1, $r5, $r2, $r3, $r4, $i1);

        return;
    }

    public static final kotlin.io.FileWalkDirection access$getDirection$p(kotlin.io.FileTreeWalk)
    {
        kotlin.io.FileTreeWalk $r0;
        kotlin.io.FileWalkDirection r1;

        $r0 := @parameter0: kotlin.io.FileTreeWalk;

        r1 = $r0.<kotlin.io.FileTreeWalk: kotlin.io.FileWalkDirection direction>;

        return r1;
    }

    public static final int access$getMaxDepth$p(kotlin.io.FileTreeWalk)
    {
        kotlin.io.FileTreeWalk $r0;
        int i0;

        $r0 := @parameter0: kotlin.io.FileTreeWalk;

        i0 = $r0.<kotlin.io.FileTreeWalk: int maxDepth>;

        return i0;
    }

    public static final kotlin.jvm.functions.Function1 access$getOnEnter$p(kotlin.io.FileTreeWalk)
    {
        kotlin.io.FileTreeWalk $r0;
        kotlin.jvm.functions.Function1 r1;

        $r0 := @parameter0: kotlin.io.FileTreeWalk;

        r1 = $r0.<kotlin.io.FileTreeWalk: kotlin.jvm.functions.Function1 onEnter>;

        return r1;
    }

    public static final kotlin.jvm.functions.Function2 access$getOnFail$p(kotlin.io.FileTreeWalk)
    {
        kotlin.io.FileTreeWalk $r0;
        kotlin.jvm.functions.Function2 r1;

        $r0 := @parameter0: kotlin.io.FileTreeWalk;

        r1 = $r0.<kotlin.io.FileTreeWalk: kotlin.jvm.functions.Function2 onFail>;

        return r1;
    }

    public static final kotlin.jvm.functions.Function1 access$getOnLeave$p(kotlin.io.FileTreeWalk)
    {
        kotlin.io.FileTreeWalk $r0;
        kotlin.jvm.functions.Function1 r1;

        $r0 := @parameter0: kotlin.io.FileTreeWalk;

        r1 = $r0.<kotlin.io.FileTreeWalk: kotlin.jvm.functions.Function1 onLeave>;

        return r1;
    }

    public static final java.io.File access$getStart$p(kotlin.io.FileTreeWalk)
    {
        kotlin.io.FileTreeWalk $r0;
        java.io.File r1;

        $r0 := @parameter0: kotlin.io.FileTreeWalk;

        r1 = $r0.<kotlin.io.FileTreeWalk: java.io.File start>;

        return r1;
    }

    public java.util.Iterator iterator()
    {
        kotlin.io.FileTreeWalk $r0;
        kotlin.io.FileTreeWalk$FileTreeWalkIterator $r1;

        $r0 := @this: kotlin.io.FileTreeWalk;

        $r1 = new kotlin.io.FileTreeWalk$FileTreeWalkIterator;

        specialinvoke $r1.<kotlin.io.FileTreeWalk$FileTreeWalkIterator: void <init>(kotlin.io.FileTreeWalk)>($r0);

        return $r1;
    }

    public final kotlin.io.FileTreeWalk maxDepth(int)
    {
        kotlin.io.FileTreeWalk $r0, $r4;
        kotlin.jvm.functions.Function1 $r1, $r2;
        kotlin.jvm.functions.Function2 $r3;
        int $i0;
        java.io.File $r5;
        kotlin.io.FileWalkDirection $r6;
        java.lang.IllegalArgumentException $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r9;

        $r0 := @this: kotlin.io.FileTreeWalk;

        $i0 := @parameter0: int;

        if $i0 <= 0 goto label1;

        $r4 = new kotlin.io.FileTreeWalk;

        $r5 = $r0.<kotlin.io.FileTreeWalk: java.io.File start>;

        $r6 = $r0.<kotlin.io.FileTreeWalk: kotlin.io.FileWalkDirection direction>;

        $r1 = $r0.<kotlin.io.FileTreeWalk: kotlin.jvm.functions.Function1 onEnter>;

        $r2 = $r0.<kotlin.io.FileTreeWalk: kotlin.jvm.functions.Function1 onLeave>;

        $r3 = $r0.<kotlin.io.FileTreeWalk: kotlin.jvm.functions.Function2 onFail>;

        specialinvoke $r4.<kotlin.io.FileTreeWalk: void <init>(java.io.File,kotlin.io.FileWalkDirection,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function2,int)>($r5, $r6, $r1, $r2, $r3, $i0);

        return $r4;

     label1:
        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("depth must be positive, but was ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r7;
    }

    public final kotlin.io.FileTreeWalk onEnter(kotlin.jvm.functions.Function1)
    {
        kotlin.io.FileTreeWalk $r0, $r6;
        kotlin.jvm.functions.Function1 $r1, $r4;
        java.io.File $r2;
        kotlin.io.FileWalkDirection $r3;
        kotlin.jvm.functions.Function2 $r5;
        int $i0;

        $r0 := @this: kotlin.io.FileTreeWalk;

        $r1 := @parameter0: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "function");

        $r6 = new kotlin.io.FileTreeWalk;

        $r2 = $r0.<kotlin.io.FileTreeWalk: java.io.File start>;

        $r3 = $r0.<kotlin.io.FileTreeWalk: kotlin.io.FileWalkDirection direction>;

        $r4 = $r0.<kotlin.io.FileTreeWalk: kotlin.jvm.functions.Function1 onLeave>;

        $r5 = $r0.<kotlin.io.FileTreeWalk: kotlin.jvm.functions.Function2 onFail>;

        $i0 = $r0.<kotlin.io.FileTreeWalk: int maxDepth>;

        specialinvoke $r6.<kotlin.io.FileTreeWalk: void <init>(java.io.File,kotlin.io.FileWalkDirection,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function2,int)>($r2, $r3, $r1, $r4, $r5, $i0);

        return $r6;
    }

    public final kotlin.io.FileTreeWalk onFail(kotlin.jvm.functions.Function2)
    {
        kotlin.io.FileTreeWalk $r0, $r6;
        kotlin.jvm.functions.Function2 $r1;
        java.io.File $r2;
        kotlin.io.FileWalkDirection $r3;
        kotlin.jvm.functions.Function1 $r4, $r5;
        int $i0;

        $r0 := @this: kotlin.io.FileTreeWalk;

        $r1 := @parameter0: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "function");

        $r6 = new kotlin.io.FileTreeWalk;

        $r2 = $r0.<kotlin.io.FileTreeWalk: java.io.File start>;

        $r3 = $r0.<kotlin.io.FileTreeWalk: kotlin.io.FileWalkDirection direction>;

        $r4 = $r0.<kotlin.io.FileTreeWalk: kotlin.jvm.functions.Function1 onEnter>;

        $r5 = $r0.<kotlin.io.FileTreeWalk: kotlin.jvm.functions.Function1 onLeave>;

        $i0 = $r0.<kotlin.io.FileTreeWalk: int maxDepth>;

        specialinvoke $r6.<kotlin.io.FileTreeWalk: void <init>(java.io.File,kotlin.io.FileWalkDirection,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function2,int)>($r2, $r3, $r4, $r5, $r1, $i0);

        return $r6;
    }

    public final kotlin.io.FileTreeWalk onLeave(kotlin.jvm.functions.Function1)
    {
        kotlin.io.FileTreeWalk $r0, $r6;
        kotlin.jvm.functions.Function1 $r1, $r4;
        java.io.File $r2;
        kotlin.io.FileWalkDirection $r3;
        kotlin.jvm.functions.Function2 $r5;
        int $i0;

        $r0 := @this: kotlin.io.FileTreeWalk;

        $r1 := @parameter0: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "function");

        $r6 = new kotlin.io.FileTreeWalk;

        $r2 = $r0.<kotlin.io.FileTreeWalk: java.io.File start>;

        $r3 = $r0.<kotlin.io.FileTreeWalk: kotlin.io.FileWalkDirection direction>;

        $r4 = $r0.<kotlin.io.FileTreeWalk: kotlin.jvm.functions.Function1 onEnter>;

        $r5 = $r0.<kotlin.io.FileTreeWalk: kotlin.jvm.functions.Function2 onFail>;

        $i0 = $r0.<kotlin.io.FileTreeWalk: int maxDepth>;

        specialinvoke $r6.<kotlin.io.FileTreeWalk: void <init>(java.io.File,kotlin.io.FileWalkDirection,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function2,int)>($r2, $r3, $r4, $r1, $r5, $i0);

        return $r6;
    }

kotlin.io.FileTreeWalk$DirectoryState
    public void <init>(java.io.File)
    {
        kotlin.io.FileTreeWalk$DirectoryState $r0;
        java.io.File $r1;

        $r0 := @this: kotlin.io.FileTreeWalk$DirectoryState;

        $r1 := @parameter0: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "rootDir");

        specialinvoke $r0.<kotlin.io.FileTreeWalk$WalkState: void <init>(java.io.File)>($r1);

        return;
    }

kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState
<kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState: boolean failed>
<kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState: int fileIndex>
<kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState: java.io.File[] fileList>
<kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState: boolean rootVisited>
<kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState: kotlin.io.FileTreeWalk$FileTreeWalkIterator this$0>
    public void <init>(kotlin.io.FileTreeWalk$FileTreeWalkIterator, java.io.File)
    {
        kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState $r0;
        kotlin.io.FileTreeWalk$FileTreeWalkIterator $r1;
        java.io.File $r2;

        $r0 := @this: kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState;

        $r1 := @parameter0: kotlin.io.FileTreeWalk$FileTreeWalkIterator;

        $r2 := @parameter1: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "rootDir");

        $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState: kotlin.io.FileTreeWalk$FileTreeWalkIterator this$0> = $r1;

        specialinvoke $r0.<kotlin.io.FileTreeWalk$DirectoryState: void <init>(java.io.File)>($r2);

        return;
    }

    public java.io.File step()
    {
        kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState $r0;
        kotlin.io.AccessDeniedException $r1;
        boolean $z0, $z1;
        java.io.File[] $r2;
        kotlin.io.FileTreeWalk$FileTreeWalkIterator $r3;
        kotlin.io.FileTreeWalk $r4;
        kotlin.jvm.functions.Function1 $r5;
        java.io.File $r6, $r10;
        java.lang.Object $r7;
        java.lang.Boolean $r8;
        kotlin.jvm.functions.Function2 $r9;
        int $i0, $i1;

        $r0 := @this: kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState;

        $z0 = $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState: boolean failed>;

        if $z0 != 0 goto label4;

        $r2 = $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState: java.io.File[] fileList>;

        if $r2 != null goto label4;

        $r3 = $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState: kotlin.io.FileTreeWalk$FileTreeWalkIterator this$0>;

        $r4 = $r3.<kotlin.io.FileTreeWalk$FileTreeWalkIterator: kotlin.io.FileTreeWalk this$0>;

        $r5 = staticinvoke <kotlin.io.FileTreeWalk: kotlin.jvm.functions.Function1 access$getOnEnter$p(kotlin.io.FileTreeWalk)>($r4);

        $z0 = 0;

        if $r5 == null goto label1;

        $r6 = virtualinvoke $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState: java.io.File getRoot()>();

        $r7 = interfaceinvoke $r5.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r6);

        $r8 = (java.lang.Boolean) $r7;

        $z1 = virtualinvoke $r8.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 != 0 goto label1;

        $z0 = 1;

        goto label1;

     label1:
        if $z0 == 0 goto label2;

        return null;

     label2:
        $r6 = virtualinvoke $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState: java.io.File getRoot()>();

        $r2 = virtualinvoke $r6.<java.io.File: java.io.File[] listFiles()>();

        $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState: java.io.File[] fileList> = $r2;

        if $r2 != null goto label4;

        $r3 = $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState: kotlin.io.FileTreeWalk$FileTreeWalkIterator this$0>;

        $r4 = $r3.<kotlin.io.FileTreeWalk$FileTreeWalkIterator: kotlin.io.FileTreeWalk this$0>;

        $r9 = staticinvoke <kotlin.io.FileTreeWalk: kotlin.jvm.functions.Function2 access$getOnFail$p(kotlin.io.FileTreeWalk)>($r4);

        if $r9 == null goto label3;

        $r6 = virtualinvoke $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState: java.io.File getRoot()>();

        $r1 = new kotlin.io.AccessDeniedException;

        $r10 = virtualinvoke $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState: java.io.File getRoot()>();

        specialinvoke $r1.<kotlin.io.AccessDeniedException: void <init>(java.io.File,java.io.File,java.lang.String,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r10, null, "Cannot list files in a directory", 2, null);

        interfaceinvoke $r9.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r6, $r1);

     label3:
        $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState: boolean failed> = 1;

     label4:
        $r2 = $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState: java.io.File[] fileList>;

        if $r2 == null goto label5;

        $i0 = $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState: int fileIndex>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r2);

        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label5;

        $r2 = $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState: java.io.File[] fileList>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r2);

        $i0 = $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState: int fileIndex>;

        $i1 = $i0 + 1;

        $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState: int fileIndex> = $i1;

        $r6 = $r2[$i0];

        return $r6;

     label5:
        $z0 = $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState: boolean rootVisited>;

        if $z0 != 0 goto label6;

        $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState: boolean rootVisited> = 1;

        $r6 = virtualinvoke $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState: java.io.File getRoot()>();

        return $r6;

     label6:
        $r3 = $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState: kotlin.io.FileTreeWalk$FileTreeWalkIterator this$0>;

        $r4 = $r3.<kotlin.io.FileTreeWalk$FileTreeWalkIterator: kotlin.io.FileTreeWalk this$0>;

        $r5 = staticinvoke <kotlin.io.FileTreeWalk: kotlin.jvm.functions.Function1 access$getOnLeave$p(kotlin.io.FileTreeWalk)>($r4);

        if $r5 == null goto label7;

        $r6 = virtualinvoke $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState: java.io.File getRoot()>();

        interfaceinvoke $r5.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r6);

     label7:
        return null;
    }

kotlin.io.FileTreeWalk$FileTreeWalkIterator$SingleFileState
<kotlin.io.FileTreeWalk$FileTreeWalkIterator$SingleFileState: kotlin.io.FileTreeWalk$FileTreeWalkIterator this$0>
<kotlin.io.FileTreeWalk$FileTreeWalkIterator$SingleFileState: boolean visited>
    public void <init>(kotlin.io.FileTreeWalk$FileTreeWalkIterator, java.io.File)
    {
        kotlin.io.FileTreeWalk$FileTreeWalkIterator$SingleFileState $r0;
        kotlin.io.FileTreeWalk$FileTreeWalkIterator $r1;
        java.io.File $r2;

        $r0 := @this: kotlin.io.FileTreeWalk$FileTreeWalkIterator$SingleFileState;

        $r1 := @parameter0: kotlin.io.FileTreeWalk$FileTreeWalkIterator;

        $r2 := @parameter1: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "rootFile");

        $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$SingleFileState: kotlin.io.FileTreeWalk$FileTreeWalkIterator this$0> = $r1;

        specialinvoke $r0.<kotlin.io.FileTreeWalk$WalkState: void <init>(java.io.File)>($r2);

        return;
    }

    public java.io.File step()
    {
        kotlin.io.FileTreeWalk$FileTreeWalkIterator$SingleFileState $r0;
        java.io.File $r1;
        boolean $z0;

        $r0 := @this: kotlin.io.FileTreeWalk$FileTreeWalkIterator$SingleFileState;

        $z0 = $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$SingleFileState: boolean visited>;

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$SingleFileState: boolean visited> = 1;

        $r1 = virtualinvoke $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$SingleFileState: java.io.File getRoot()>();

        return $r1;
    }

kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState
<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: int fileIndex>
<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: java.io.File[] fileList>
<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: boolean rootVisited>
<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: kotlin.io.FileTreeWalk$FileTreeWalkIterator this$0>
    public void <init>(kotlin.io.FileTreeWalk$FileTreeWalkIterator, java.io.File)
    {
        kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState $r0;
        kotlin.io.FileTreeWalk$FileTreeWalkIterator $r1;
        java.io.File $r2;

        $r0 := @this: kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState;

        $r1 := @parameter0: kotlin.io.FileTreeWalk$FileTreeWalkIterator;

        $r2 := @parameter1: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "rootDir");

        $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: kotlin.io.FileTreeWalk$FileTreeWalkIterator this$0> = $r1;

        specialinvoke $r0.<kotlin.io.FileTreeWalk$DirectoryState: void <init>(java.io.File)>($r2);

        return;
    }

    public java.io.File step()
    {
        kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState $r0;
        kotlin.io.AccessDeniedException $r1;
        boolean $z0, $z1;
        kotlin.io.FileTreeWalk$FileTreeWalkIterator $r2;
        kotlin.io.FileTreeWalk $r3;
        kotlin.jvm.functions.Function1 $r4;
        java.io.File $r5, $r10;
        java.lang.Object $r6;
        java.lang.Boolean $r7;
        java.io.File[] $r8;
        int $i0, $i1;
        kotlin.jvm.functions.Function2 $r9;

        $r0 := @this: kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState;

        $z0 = $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: boolean rootVisited>;

        if $z0 != 0 goto label3;

        $r2 = $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: kotlin.io.FileTreeWalk$FileTreeWalkIterator this$0>;

        $r3 = $r2.<kotlin.io.FileTreeWalk$FileTreeWalkIterator: kotlin.io.FileTreeWalk this$0>;

        $r4 = staticinvoke <kotlin.io.FileTreeWalk: kotlin.jvm.functions.Function1 access$getOnEnter$p(kotlin.io.FileTreeWalk)>($r3);

        $z0 = 0;

        if $r4 == null goto label1;

        $r5 = virtualinvoke $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: java.io.File getRoot()>();

        $r6 = interfaceinvoke $r4.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r5);

        $r7 = (java.lang.Boolean) $r6;

        $z1 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 != 0 goto label1;

        $z0 = 1;

        goto label1;

     label1:
        if $z0 == 0 goto label2;

        return null;

     label2:
        $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: boolean rootVisited> = 1;

        $r5 = virtualinvoke $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: java.io.File getRoot()>();

        return $r5;

     label3:
        $r8 = $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: java.io.File[] fileList>;

        if $r8 == null goto label5;

        $i0 = $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: int fileIndex>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r8);

        $i1 = lengthof $r8;

        if $i0 >= $i1 goto label4;

        goto label5;

     label4:
        $r2 = $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: kotlin.io.FileTreeWalk$FileTreeWalkIterator this$0>;

        $r3 = $r2.<kotlin.io.FileTreeWalk$FileTreeWalkIterator: kotlin.io.FileTreeWalk this$0>;

        $r4 = staticinvoke <kotlin.io.FileTreeWalk: kotlin.jvm.functions.Function1 access$getOnLeave$p(kotlin.io.FileTreeWalk)>($r3);

        if $r4 == null goto label9;

        $r5 = virtualinvoke $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: java.io.File getRoot()>();

        interfaceinvoke $r4.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r5);

        return null;

     label5:
        $r8 = $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: java.io.File[] fileList>;

        if $r8 != null goto label8;

        $r5 = virtualinvoke $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: java.io.File getRoot()>();

        $r8 = virtualinvoke $r5.<java.io.File: java.io.File[] listFiles()>();

        $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: java.io.File[] fileList> = $r8;

        if $r8 != null goto label6;

        $r2 = $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: kotlin.io.FileTreeWalk$FileTreeWalkIterator this$0>;

        $r3 = $r2.<kotlin.io.FileTreeWalk$FileTreeWalkIterator: kotlin.io.FileTreeWalk this$0>;

        $r9 = staticinvoke <kotlin.io.FileTreeWalk: kotlin.jvm.functions.Function2 access$getOnFail$p(kotlin.io.FileTreeWalk)>($r3);

        if $r9 == null goto label6;

        $r5 = virtualinvoke $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: java.io.File getRoot()>();

        $r1 = new kotlin.io.AccessDeniedException;

        $r10 = virtualinvoke $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: java.io.File getRoot()>();

        specialinvoke $r1.<kotlin.io.AccessDeniedException: void <init>(java.io.File,java.io.File,java.lang.String,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r10, null, "Cannot list files in a directory", 2, null);

        interfaceinvoke $r9.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r5, $r1);

     label6:
        $r8 = $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: java.io.File[] fileList>;

        if $r8 == null goto label7;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r8);

        $i0 = lengthof $r8;

        if $i0 != 0 goto label8;

     label7:
        $r2 = $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: kotlin.io.FileTreeWalk$FileTreeWalkIterator this$0>;

        $r3 = $r2.<kotlin.io.FileTreeWalk$FileTreeWalkIterator: kotlin.io.FileTreeWalk this$0>;

        $r4 = staticinvoke <kotlin.io.FileTreeWalk: kotlin.jvm.functions.Function1 access$getOnLeave$p(kotlin.io.FileTreeWalk)>($r3);

        if $r4 == null goto label9;

        $r5 = virtualinvoke $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: java.io.File getRoot()>();

        interfaceinvoke $r4.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r5);

        return null;

     label8:
        $r8 = $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: java.io.File[] fileList>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r8);

        $i0 = $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: int fileIndex>;

        $i1 = $i0 + 1;

        $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: int fileIndex> = $i1;

        $r5 = $r8[$i0];

        return $r5;

     label9:
        return null;
    }

kotlin.io.FileTreeWalk$FileTreeWalkIterator$WhenMappings
<kotlin.io.FileTreeWalk$FileTreeWalkIterator$WhenMappings: int[] $EnumSwitchMapping$0>
    static void <clinit>()
    {
        kotlin.io.FileWalkDirection[] $r0;
        int $i0;
        int[] $r1;
        kotlin.io.FileWalkDirection $r2;

        $r0 = staticinvoke <kotlin.io.FileWalkDirection: kotlin.io.FileWalkDirection[] values()>();

        $i0 = lengthof $r0;

        $r1 = newarray (int)[$i0];

        $r2 = <kotlin.io.FileWalkDirection: kotlin.io.FileWalkDirection TOP_DOWN>;

        $i0 = virtualinvoke $r2.<kotlin.io.FileWalkDirection: int ordinal()>();

        $r1[$i0] = 1;

        $r2 = <kotlin.io.FileWalkDirection: kotlin.io.FileWalkDirection BOTTOM_UP>;

        $i0 = virtualinvoke $r2.<kotlin.io.FileWalkDirection: int ordinal()>();

        $r1[$i0] = 2;

        <kotlin.io.FileTreeWalk$FileTreeWalkIterator$WhenMappings: int[] $EnumSwitchMapping$0> = $r1;

        return;
    }

kotlin.io.FileTreeWalk$FileTreeWalkIterator
<kotlin.io.FileTreeWalk$FileTreeWalkIterator: java.util.ArrayDeque state>
<kotlin.io.FileTreeWalk$FileTreeWalkIterator: kotlin.io.FileTreeWalk this$0>
    public void <init>(kotlin.io.FileTreeWalk)
    {
        kotlin.io.FileTreeWalk$FileTreeWalkIterator $r0;
        java.util.ArrayDeque $r1;
        kotlin.io.FileTreeWalk $r2;
        java.io.File $r3;
        boolean $z0;
        kotlin.io.FileTreeWalk$DirectoryState $r4;
        kotlin.io.FileTreeWalk$FileTreeWalkIterator$SingleFileState $r5;

        $r0 := @this: kotlin.io.FileTreeWalk$FileTreeWalkIterator;

        $r2 := @parameter0: kotlin.io.FileTreeWalk;

        $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator: kotlin.io.FileTreeWalk this$0> = $r2;

        specialinvoke $r0.<kotlin.collections.AbstractIterator: void <init>()>();

        $r1 = new java.util.ArrayDeque;

        specialinvoke $r1.<java.util.ArrayDeque: void <init>()>();

        $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator: java.util.ArrayDeque state> = $r1;

        $r3 = staticinvoke <kotlin.io.FileTreeWalk: java.io.File access$getStart$p(kotlin.io.FileTreeWalk)>($r2);

        $z0 = virtualinvoke $r3.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <kotlin.io.FileTreeWalk: java.io.File access$getStart$p(kotlin.io.FileTreeWalk)>($r2);

        $r4 = specialinvoke $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator: kotlin.io.FileTreeWalk$DirectoryState directoryState(java.io.File)>($r3);

        virtualinvoke $r1.<java.util.ArrayDeque: void push(java.lang.Object)>($r4);

        return;

     label1:
        $r3 = staticinvoke <kotlin.io.FileTreeWalk: java.io.File access$getStart$p(kotlin.io.FileTreeWalk)>($r2);

        $z0 = virtualinvoke $r3.<java.io.File: boolean isFile()>();

        if $z0 == 0 goto label2;

        $r5 = new kotlin.io.FileTreeWalk$FileTreeWalkIterator$SingleFileState;

        $r3 = staticinvoke <kotlin.io.FileTreeWalk: java.io.File access$getStart$p(kotlin.io.FileTreeWalk)>($r2);

        specialinvoke $r5.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$SingleFileState: void <init>(kotlin.io.FileTreeWalk$FileTreeWalkIterator,java.io.File)>($r0, $r3);

        virtualinvoke $r1.<java.util.ArrayDeque: void push(java.lang.Object)>($r5);

        return;

     label2:
        virtualinvoke $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator: void done()>();

        return;
    }

    private final kotlin.io.FileTreeWalk$DirectoryState directoryState(java.io.File)
    {
        kotlin.io.FileTreeWalk$FileTreeWalkIterator $r0;
        int[] $r1;
        java.io.File $r2;
        kotlin.io.FileTreeWalk $r3;
        kotlin.io.FileWalkDirection $r4;
        int $i0;
        kotlin.io.FileTreeWalk$DirectoryState $r5;
        kotlin.NoWhenBranchMatchedException r6;
        kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState r7;
        kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState r8;
        java.lang.Throwable r9;

        $r0 := @this: kotlin.io.FileTreeWalk$FileTreeWalkIterator;

        $r2 := @parameter0: java.io.File;

        $r3 = $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator: kotlin.io.FileTreeWalk this$0>;

        $r4 = staticinvoke <kotlin.io.FileTreeWalk: kotlin.io.FileWalkDirection access$getDirection$p(kotlin.io.FileTreeWalk)>($r3);

        $r1 = <kotlin.io.FileTreeWalk$FileTreeWalkIterator$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i0 = virtualinvoke $r4.<kotlin.io.FileWalkDirection: int ordinal()>();

        $i0 = $r1[$i0];

        lookupswitch($i0)
        {
            case 1: goto label3;
            case 2: goto label2;
            default: goto label1;
        };

     label1:
        r6 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke r6.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        r9 = (java.lang.Throwable) r6;

        throw r9;

     label2:
        r7 = new kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState;

        $r5 = r7;

        specialinvoke r7.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState: void <init>(kotlin.io.FileTreeWalk$FileTreeWalkIterator,java.io.File)>($r0, $r2);

        goto label4;

     label3:
        r8 = new kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState;

        $r5 = r8;

        specialinvoke r8.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: void <init>(kotlin.io.FileTreeWalk$FileTreeWalkIterator,java.io.File)>($r0, $r2);

     label4:
        return $r5;
    }

    private final java.io.File gotoNext()
    {
        kotlin.io.FileTreeWalk$FileTreeWalkIterator $r0;
        java.util.ArrayDeque $r1;
        java.lang.Object $r2;
        kotlin.io.FileTreeWalk$WalkState $r3;
        java.io.File $r4, $r5;
        boolean $z0;
        int $i0, $i1;
        kotlin.io.FileTreeWalk $r6;
        kotlin.io.FileTreeWalk$DirectoryState $r7;

        $r0 := @this: kotlin.io.FileTreeWalk$FileTreeWalkIterator;

     label1:
        $r1 = $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator: java.util.ArrayDeque state>;

        $r2 = virtualinvoke $r1.<java.util.ArrayDeque: java.lang.Object peek()>();

        $r3 = (kotlin.io.FileTreeWalk$WalkState) $r2;

        if $r3 != null goto label2;

        return null;

     label2:
        $r4 = virtualinvoke $r3.<kotlin.io.FileTreeWalk$WalkState: java.io.File step()>();

        if $r4 != null goto label3;

        $r1 = $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator: java.util.ArrayDeque state>;

        virtualinvoke $r1.<java.util.ArrayDeque: java.lang.Object pop()>();

        goto label1;

     label3:
        $r5 = virtualinvoke $r3.<kotlin.io.FileTreeWalk$WalkState: java.io.File getRoot()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, $r5);

        if $z0 != 0 goto label5;

        $z0 = virtualinvoke $r4.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label5;

        $r1 = $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator: java.util.ArrayDeque state>;

        $i0 = virtualinvoke $r1.<java.util.ArrayDeque: int size()>();

        $r6 = $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator: kotlin.io.FileTreeWalk this$0>;

        $i1 = staticinvoke <kotlin.io.FileTreeWalk: int access$getMaxDepth$p(kotlin.io.FileTreeWalk)>($r6);

        if $i0 < $i1 goto label4;

        return $r4;

     label4:
        $r1 = $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator: java.util.ArrayDeque state>;

        $r7 = specialinvoke $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator: kotlin.io.FileTreeWalk$DirectoryState directoryState(java.io.File)>($r4);

        virtualinvoke $r1.<java.util.ArrayDeque: void push(java.lang.Object)>($r7);

        goto label1;

     label5:
        return $r4;
    }

    protected void computeNext()
    {
        kotlin.io.FileTreeWalk$FileTreeWalkIterator $r0;
        java.io.File $r1;

        $r0 := @this: kotlin.io.FileTreeWalk$FileTreeWalkIterator;

        $r1 = specialinvoke $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator: java.io.File gotoNext()>();

        if $r1 == null goto label1;

        virtualinvoke $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator: void setNext(java.lang.Object)>($r1);

        return;

     label1:
        virtualinvoke $r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator: void done()>();

        return;
    }

kotlin.io.FileTreeWalk$WalkState
<kotlin.io.FileTreeWalk$WalkState: java.io.File root>
    public void <init>(java.io.File)
    {
        kotlin.io.FileTreeWalk$WalkState $r0;
        java.io.File $r1;

        $r0 := @this: kotlin.io.FileTreeWalk$WalkState;

        $r1 := @parameter0: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "root");

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<kotlin.io.FileTreeWalk$WalkState: java.io.File root> = $r1;

        return;
    }

    public final java.io.File getRoot()
    {
        kotlin.io.FileTreeWalk$WalkState $r0;
        java.io.File r1;

        $r0 := @this: kotlin.io.FileTreeWalk$WalkState;

        r1 = $r0.<kotlin.io.FileTreeWalk$WalkState: java.io.File root>;

        return r1;
    }

<kotlin.io.FileTreeWalk$WalkState: java.io.File step()>
