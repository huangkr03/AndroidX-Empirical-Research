androidx.compose.material.ripple.RippleHostView
<androidx.compose.material.ripple.RippleHostView: androidx.compose.material.ripple.RippleHostView$Companion Companion>
<androidx.compose.material.ripple.RippleHostView: androidx.compose.material.ripple.UnprojectedRipple ripple>
<androidx.compose.material.ripple.RippleHostView: java.lang.Boolean bounded>
<androidx.compose.material.ripple.RippleHostView: java.lang.Long lastRippleStateChangeTimeMillis>
<androidx.compose.material.ripple.RippleHostView: java.lang.Runnable resetRippleRunnable>
<androidx.compose.material.ripple.RippleHostView: kotlin.jvm.functions.Function0 onInvalidateRipple>
<androidx.compose.material.ripple.RippleHostView: long MinimumRippleStateChangeTime>
<androidx.compose.material.ripple.RippleHostView: long ResetRippleDelayDuration>
<androidx.compose.material.ripple.RippleHostView: int[] PressedState>
<androidx.compose.material.ripple.RippleHostView: int[] RestingState>
    public void <init>(android.content.Context)
    {
        androidx.compose.material.ripple.RippleHostView r0;
        android.content.Context r1;

        r0 := @this: androidx.compose.material.ripple.RippleHostView;

        r1 := @parameter0: android.content.Context;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "context");

        specialinvoke r0.<android.view.View: void <init>(android.content.Context)>(r1);

        return;
    }

    protected void onMeasure(int, int)
    {
        androidx.compose.material.ripple.RippleHostView r0;
        int i0, i1;

        r0 := @this: androidx.compose.material.ripple.RippleHostView;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        virtualinvoke r0.<androidx.compose.material.ripple.RippleHostView: void setMeasuredDimension(int,int)>(0, 0);

        return;
    }

    protected void onLayout(boolean, int, int, int, int)
    {
        androidx.compose.material.ripple.RippleHostView r0;
        boolean z0;
        int i0, i1, i2, i3;

        r0 := @this: androidx.compose.material.ripple.RippleHostView;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        return;
    }

    public void refreshDrawableState()
    {
        androidx.compose.material.ripple.RippleHostView r0;

        r0 := @this: androidx.compose.material.ripple.RippleHostView;

        return;
    }

    private final void createRipple(boolean)
    {
        androidx.compose.material.ripple.RippleHostView r0, r2;
        boolean z0;
        androidx.compose.material.ripple.UnprojectedRipple r1, $r3;
        android.graphics.drawable.Drawable $r4;

        r0 := @this: androidx.compose.material.ripple.RippleHostView;

        z0 := @parameter0: boolean;

        $r3 = new androidx.compose.material.ripple.UnprojectedRipple;

        specialinvoke $r3.<androidx.compose.material.ripple.UnprojectedRipple: void <init>(boolean)>(z0);

        r1 = $r3;

        r2 = r0;

        $r4 = (android.graphics.drawable.Drawable) r1;

        virtualinvoke r0.<androidx.compose.material.ripple.RippleHostView: void setBackground(android.graphics.drawable.Drawable)>($r4);

        r2.<androidx.compose.material.ripple.RippleHostView: androidx.compose.material.ripple.UnprojectedRipple ripple> = r1;

        return;
    }

    public void invalidateDrawable(android.graphics.drawable.Drawable)
    {
        androidx.compose.material.ripple.RippleHostView r0;
        android.graphics.drawable.Drawable r1;
        kotlin.jvm.functions.Function0 $r2;

        r0 := @this: androidx.compose.material.ripple.RippleHostView;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "who");

        $r2 = r0.<androidx.compose.material.ripple.RippleHostView: kotlin.jvm.functions.Function0 onInvalidateRipple>;

        if $r2 == null goto label1;

        interfaceinvoke $r2.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        goto label1;

     label1:
        return;
    }

    public final void addRipple-KOepWvA(androidx.compose.foundation.interaction.PressInteraction$Press, boolean, long, int, long, float, kotlin.jvm.functions.Function0)
    {
        androidx.compose.material.ripple.RippleHostView r0;
        androidx.compose.foundation.interaction.PressInteraction$Press r1;
        boolean z0, $z1;
        long l0, l2, $l5, $l6;
        int i1, $i3, $i4;
        float f0, $f1, $f2, $f3, $f4;
        kotlin.jvm.functions.Function0 r2;
        androidx.compose.material.ripple.UnprojectedRipple r3, $r4, $r10;
        java.lang.Boolean $r5, $r8, $r9;
        android.graphics.Rect $r6, $r7;

        r0 := @this: androidx.compose.material.ripple.RippleHostView;

        r1 := @parameter0: androidx.compose.foundation.interaction.PressInteraction$Press;

        z0 := @parameter1: boolean;

        l0 := @parameter2: long;

        i1 := @parameter3: int;

        l2 := @parameter4: long;

        f0 := @parameter5: float;

        r2 := @parameter6: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "interaction");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "onInvalidateRipple");

        $r4 = r0.<androidx.compose.material.ripple.RippleHostView: androidx.compose.material.ripple.UnprojectedRipple ripple>;

        if $r4 == null goto label1;

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r9 = r0.<androidx.compose.material.ripple.RippleHostView: java.lang.Boolean bounded>;

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r8, $r9);

        if $z1 != 0 goto label2;

     label1:
        specialinvoke r0.<androidx.compose.material.ripple.RippleHostView: void createRipple(boolean)>(z0);

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        r0.<androidx.compose.material.ripple.RippleHostView: java.lang.Boolean bounded> = $r5;

     label2:
        $r10 = r0.<androidx.compose.material.ripple.RippleHostView: androidx.compose.material.ripple.UnprojectedRipple ripple>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r10);

        r3 = $r10;

        r0.<androidx.compose.material.ripple.RippleHostView: kotlin.jvm.functions.Function0 onInvalidateRipple> = r2;

        virtualinvoke r0.<androidx.compose.material.ripple.RippleHostView: void updateRippleProperties-biQXAtU(long,int,long,float)>(l0, i1, l2, f0);

        if z0 == 0 goto label3;

        $l5 = virtualinvoke r1.<androidx.compose.foundation.interaction.PressInteraction$Press: long getPressPosition-F1C5BW0()>();

        $f3 = staticinvoke <androidx.compose.ui.geometry.Offset: float getX-impl(long)>($l5);

        $l6 = virtualinvoke r1.<androidx.compose.foundation.interaction.PressInteraction$Press: long getPressPosition-F1C5BW0()>();

        $f4 = staticinvoke <androidx.compose.ui.geometry.Offset: float getY-impl(long)>($l6);

        virtualinvoke r3.<androidx.compose.material.ripple.UnprojectedRipple: void setHotspot(float,float)>($f3, $f4);

        goto label4;

     label3:
        $r6 = virtualinvoke r3.<androidx.compose.material.ripple.UnprojectedRipple: android.graphics.Rect getBounds()>();

        $i3 = virtualinvoke $r6.<android.graphics.Rect: int centerX()>();

        $f1 = (float) $i3;

        $r7 = virtualinvoke r3.<androidx.compose.material.ripple.UnprojectedRipple: android.graphics.Rect getBounds()>();

        $i4 = virtualinvoke $r7.<android.graphics.Rect: int centerY()>();

        $f2 = (float) $i4;

        virtualinvoke r3.<androidx.compose.material.ripple.UnprojectedRipple: void setHotspot(float,float)>($f1, $f2);

     label4:
        specialinvoke r0.<androidx.compose.material.ripple.RippleHostView: void setRippleState(boolean)>(1);

        return;
    }

    public final void removeRipple()
    {
        androidx.compose.material.ripple.RippleHostView r0;

        r0 := @this: androidx.compose.material.ripple.RippleHostView;

        specialinvoke r0.<androidx.compose.material.ripple.RippleHostView: void setRippleState(boolean)>(0);

        return;
    }

    public final void updateRippleProperties-biQXAtU(long, int, long, float)
    {
        androidx.compose.material.ripple.RippleHostView r0;
        long l0, l2;
        int i1, $i3, $i4, $i5, $i6;
        float f0;
        androidx.compose.material.ripple.UnprojectedRipple r1, $r3;
        android.graphics.Rect r2;
        androidx.compose.ui.geometry.Rect $r4;

        r0 := @this: androidx.compose.material.ripple.RippleHostView;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        l2 := @parameter2: long;

        f0 := @parameter3: float;

        $r3 = r0.<androidx.compose.material.ripple.RippleHostView: androidx.compose.material.ripple.UnprojectedRipple ripple>;

        if $r3 != null goto label1;

        return;

     label1:
        r1 = $r3;

        virtualinvoke r1.<androidx.compose.material.ripple.UnprojectedRipple: void trySetRadius(int)>(i1);

        virtualinvoke r1.<androidx.compose.material.ripple.UnprojectedRipple: void setColor-DxMtmZc(long,float)>(l2, f0);

        $r4 = staticinvoke <androidx.compose.ui.geometry.SizeKt: androidx.compose.ui.geometry.Rect toRect-uvyYCjk(long)>(l0);

        r2 = staticinvoke <androidx.compose.ui.graphics.RectHelper_androidKt: android.graphics.Rect toAndroidRect(androidx.compose.ui.geometry.Rect)>($r4);

        $i3 = r2.<android.graphics.Rect: int left>;

        virtualinvoke r0.<androidx.compose.material.ripple.RippleHostView: void setLeft(int)>($i3);

        $i4 = r2.<android.graphics.Rect: int top>;

        virtualinvoke r0.<androidx.compose.material.ripple.RippleHostView: void setTop(int)>($i4);

        $i5 = r2.<android.graphics.Rect: int right>;

        virtualinvoke r0.<androidx.compose.material.ripple.RippleHostView: void setRight(int)>($i5);

        $i6 = r2.<android.graphics.Rect: int bottom>;

        virtualinvoke r0.<androidx.compose.material.ripple.RippleHostView: void setBottom(int)>($i6);

        virtualinvoke r1.<androidx.compose.material.ripple.UnprojectedRipple: void setBounds(android.graphics.Rect)>(r2);

        return;
    }

    public final void disposeRipple()
    {
        androidx.compose.material.ripple.RippleHostView r0;
        androidx.compose.material.ripple.UnprojectedRipple r1, $r3, $r8;
        java.lang.Runnable $r2, $r6, $r7;
        int[] $r4;
        android.graphics.drawable.Drawable $r5;

        r0 := @this: androidx.compose.material.ripple.RippleHostView;

        r0.<androidx.compose.material.ripple.RippleHostView: kotlin.jvm.functions.Function0 onInvalidateRipple> = null;

        $r2 = r0.<androidx.compose.material.ripple.RippleHostView: java.lang.Runnable resetRippleRunnable>;

        if $r2 == null goto label1;

        $r6 = r0.<androidx.compose.material.ripple.RippleHostView: java.lang.Runnable resetRippleRunnable>;

        virtualinvoke r0.<androidx.compose.material.ripple.RippleHostView: boolean removeCallbacks(java.lang.Runnable)>($r6);

        $r7 = r0.<androidx.compose.material.ripple.RippleHostView: java.lang.Runnable resetRippleRunnable>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r7);

        interfaceinvoke $r7.<java.lang.Runnable: void run()>();

        goto label3;

     label1:
        $r3 = r0.<androidx.compose.material.ripple.RippleHostView: androidx.compose.material.ripple.UnprojectedRipple ripple>;

        if $r3 != null goto label2;

        goto label3;

     label2:
        $r4 = <androidx.compose.material.ripple.RippleHostView: int[] RestingState>;

        virtualinvoke $r3.<androidx.compose.material.ripple.UnprojectedRipple: boolean setState(int[])>($r4);

     label3:
        $r8 = r0.<androidx.compose.material.ripple.RippleHostView: androidx.compose.material.ripple.UnprojectedRipple ripple>;

        if $r8 != null goto label4;

        return;

     label4:
        r1 = $r8;

        virtualinvoke r1.<androidx.compose.material.ripple.UnprojectedRipple: boolean setVisible(boolean,boolean)>(0, 0);

        $r5 = (android.graphics.drawable.Drawable) r1;

        virtualinvoke r0.<androidx.compose.material.ripple.RippleHostView: void unscheduleDrawable(android.graphics.drawable.Drawable)>($r5);

        return;
    }

    private final void setRippleState(boolean)
    {
        androidx.compose.material.ripple.RippleHostView r0;
        boolean z0;
        long l0, l1, $l4;
        java.lang.Runnable $r1, $r4, $r5, r6;
        java.lang.Long $r2, $r9;
        androidx.compose.material.ripple.UnprojectedRipple $r3;
        byte $b2;
        int[] $r7, r8;

        r0 := @this: androidx.compose.material.ripple.RippleHostView;

        z0 := @parameter0: boolean;

        l0 = staticinvoke <android.view.animation.AnimationUtils: long currentAnimationTimeMillis()>();

        $r1 = r0.<androidx.compose.material.ripple.RippleHostView: java.lang.Runnable resetRippleRunnable>;

        if $r1 == null goto label1;

        r6 = $r1;

        virtualinvoke r0.<androidx.compose.material.ripple.RippleHostView: boolean removeCallbacks(java.lang.Runnable)>(r6);

        interfaceinvoke r6.<java.lang.Runnable: void run()>();

        goto label1;

     label1:
        $r2 = r0.<androidx.compose.material.ripple.RippleHostView: java.lang.Long lastRippleStateChangeTimeMillis>;

        if $r2 == null goto label2;

        $l4 = virtualinvoke $r2.<java.lang.Long: long longValue()>();

        goto label3;

     label2:
        $l4 = 0L;

     label3:
        l1 = l0 - $l4;

        if z0 != 0 goto label4;

        $b2 = l1 cmp 5L;

        if $b2 >= 0 goto label4;

        $r4 = dynamicinvoke "run" <java.lang.Runnable (androidx.compose.material.ripple.RippleHostView)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.compose.material.ripple.RippleHostView: void setRippleState$lambda-2(androidx.compose.material.ripple.RippleHostView)>, methodtype: void __METHODTYPE__());

        r0.<androidx.compose.material.ripple.RippleHostView: java.lang.Runnable resetRippleRunnable> = $r4;

        $r5 = r0.<androidx.compose.material.ripple.RippleHostView: java.lang.Runnable resetRippleRunnable>;

        virtualinvoke r0.<androidx.compose.material.ripple.RippleHostView: boolean postDelayed(java.lang.Runnable,long)>($r5, 50L);

        goto label8;

     label4:
        if z0 == 0 goto label5;

        $r7 = <androidx.compose.material.ripple.RippleHostView: int[] PressedState>;

        goto label6;

     label5:
        $r7 = <androidx.compose.material.ripple.RippleHostView: int[] RestingState>;

     label6:
        r8 = $r7;

        $r3 = r0.<androidx.compose.material.ripple.RippleHostView: androidx.compose.material.ripple.UnprojectedRipple ripple>;

        if $r3 != null goto label7;

        goto label8;

     label7:
        virtualinvoke $r3.<androidx.compose.material.ripple.UnprojectedRipple: boolean setState(int[])>(r8);

     label8:
        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        r0.<androidx.compose.material.ripple.RippleHostView: java.lang.Long lastRippleStateChangeTimeMillis> = $r9;

        return;
    }

    private static final void setRippleState$lambda-2(androidx.compose.material.ripple.RippleHostView)
    {
        androidx.compose.material.ripple.RippleHostView r0;
        androidx.compose.material.ripple.UnprojectedRipple $r1;
        int[] $r2;

        r0 := @parameter0: androidx.compose.material.ripple.RippleHostView;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        $r1 = r0.<androidx.compose.material.ripple.RippleHostView: androidx.compose.material.ripple.UnprojectedRipple ripple>;

        if $r1 != null goto label1;

        goto label2;

     label1:
        $r2 = <androidx.compose.material.ripple.RippleHostView: int[] RestingState>;

        virtualinvoke $r1.<androidx.compose.material.ripple.UnprojectedRipple: boolean setState(int[])>($r2);

     label2:
        r0.<androidx.compose.material.ripple.RippleHostView: java.lang.Runnable resetRippleRunnable> = null;

        return;
    }

    static void <clinit>()
    {
        int[] r0, $r2;
        androidx.compose.material.ripple.RippleHostView$Companion $r1;

        $r1 = new androidx.compose.material.ripple.RippleHostView$Companion;

        specialinvoke $r1.<androidx.compose.material.ripple.RippleHostView$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.compose.material.ripple.RippleHostView: androidx.compose.material.ripple.RippleHostView$Companion Companion> = $r1;

        r0 = newarray (int)[2];

        r0[0] = 16842919;

        r0[1] = 16842910;

        <androidx.compose.material.ripple.RippleHostView: int[] PressedState> = r0;

        $r2 = newarray (int)[0];

        <androidx.compose.material.ripple.RippleHostView: int[] RestingState> = $r2;

        return;
    }

androidx.compose.material.ripple.RippleHostView$Companion
    private void <init>()
    {
        androidx.compose.material.ripple.RippleHostView$Companion r0;

        r0 := @this: androidx.compose.material.ripple.RippleHostView$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.compose.material.ripple.RippleHostView$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.compose.material.ripple.RippleHostView$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.compose.material.ripple.RippleHostView$Companion: void <init>()>();

        return;
    }

