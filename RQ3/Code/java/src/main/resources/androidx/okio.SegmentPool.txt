okio.SegmentPool
<okio.SegmentPool: int HASH_BUCKET_COUNT>
<okio.SegmentPool: okio.SegmentPool INSTANCE>
<okio.SegmentPool: okio.Segment LOCK>
<okio.SegmentPool: int MAX_SIZE>
<okio.SegmentPool: java.util.concurrent.atomic.AtomicReference[] hashBuckets>
    static void <clinit>()
    {
        okio.SegmentPool $r0;
        okio.Segment $r1;
        int $i0, $i1;
        byte[] $r2;
        java.lang.Runtime $r3;
        java.util.concurrent.atomic.AtomicReference[] $r4;
        java.util.concurrent.atomic.AtomicReference $r5;

        $r0 = new okio.SegmentPool;

        specialinvoke $r0.<okio.SegmentPool: void <init>()>();

        <okio.SegmentPool: okio.SegmentPool INSTANCE> = $r0;

        <okio.SegmentPool: int MAX_SIZE> = 65536;

        $r1 = new okio.Segment;

        $i0 = 0;

        $r2 = newarray (byte)[0];

        specialinvoke $r1.<okio.Segment: void <init>(byte[],int,int,boolean,boolean)>($r2, 0, 0, 0, 0);

        <okio.SegmentPool: okio.Segment LOCK> = $r1;

        $r3 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $i1 = virtualinvoke $r3.<java.lang.Runtime: int availableProcessors()>();

        $i1 = $i1 + $i1;

        $i1 = $i1 + -1;

        $i1 = staticinvoke <java.lang.Integer: int highestOneBit(int)>($i1);

        <okio.SegmentPool: int HASH_BUCKET_COUNT> = $i1;

        $r4 = newarray (java.util.concurrent.atomic.AtomicReference)[$i1];

     label1:
        if $i0 >= $i1 goto label2;

        $r5 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r5.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        $r4[$i0] = $r5;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        <okio.SegmentPool: java.util.concurrent.atomic.AtomicReference[] hashBuckets> = $r4;

        return;
    }

    private void <init>()
    {
        okio.SegmentPool $r0;

        $r0 := @this: okio.SegmentPool;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    private final java.util.concurrent.atomic.AtomicReference firstRef()
    {
        okio.SegmentPool $r0;
        int $i0;
        java.util.concurrent.atomic.AtomicReference[] $r1;
        java.lang.Thread $r2;
        long $l1, $l2;
        java.util.concurrent.atomic.AtomicReference $r3;

        $r0 := @this: okio.SegmentPool;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $l1 = virtualinvoke $r2.<java.lang.Thread: long getId()>();

        $i0 = <okio.SegmentPool: int HASH_BUCKET_COUNT>;

        $r1 = <okio.SegmentPool: java.util.concurrent.atomic.AtomicReference[] hashBuckets>;

        $l2 = (long) $i0;

        $l2 = $l2 + -1L;

        $l1 = $l1 & $l2;

        $i0 = (int) $l1;

        $r3 = $r1[$i0];

        return $r3;
    }

    public static final void recycle(okio.Segment)
    {
        int $i0, $i1;
        okio.Segment $r0, $r1, $r5;
        boolean $z0;
        okio.SegmentPool $r2;
        java.util.concurrent.atomic.AtomicReference $r3;
        java.lang.Object $r4;
        java.lang.IllegalArgumentException $r6;
        java.lang.String $r7;

        $r0 := @parameter0: okio.Segment;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "segment");

        $r1 = $r0.<okio.Segment: okio.Segment next>;

        if $r1 != null goto label1;

        $r1 = $r0.<okio.Segment: okio.Segment prev>;

        if $r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label8;

        $z0 = $r0.<okio.Segment: boolean shared>;

        if $z0 == 0 goto label3;

        return;

     label3:
        $r2 = <okio.SegmentPool: okio.SegmentPool INSTANCE>;

        $r3 = specialinvoke $r2.<okio.SegmentPool: java.util.concurrent.atomic.AtomicReference firstRef()>();

        $r1 = <okio.SegmentPool: okio.Segment LOCK>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>($r1);

        $r5 = (okio.Segment) $r4;

        if $r5 != $r1 goto label4;

        return;

     label4:
        if $r5 == null goto label5;

        $i1 = $r5.<okio.Segment: int limit>;

        goto label6;

     label5:
        $i1 = 0;

     label6:
        $i0 = <okio.SegmentPool: int MAX_SIZE>;

        if $i1 < $i0 goto label7;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r5);

        return;

     label7:
        $r0.<okio.Segment: okio.Segment next> = $r5;

        $r0.<okio.Segment: int pos> = 0;

        $i0 = $i1 + 8192;

        $r0.<okio.Segment: int limit> = $i0;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r0);

        return;

     label8:
        $r6 = new java.lang.IllegalArgumentException;

        $r7 = "Failed requirement.";

        $r7 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    public static final okio.Segment take()
    {
        okio.Segment $r0, $r4;
        okio.SegmentPool $r1;
        java.util.concurrent.atomic.AtomicReference $r2;
        java.lang.Object $r3;

        $r1 = <okio.SegmentPool: okio.SegmentPool INSTANCE>;

        $r2 = specialinvoke $r1.<okio.SegmentPool: java.util.concurrent.atomic.AtomicReference firstRef()>();

        $r0 = <okio.SegmentPool: okio.Segment LOCK>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>($r0);

        $r4 = (okio.Segment) $r3;

        if $r4 != $r0 goto label1;

        $r4 = new okio.Segment;

        specialinvoke $r4.<okio.Segment: void <init>()>();

        return $r4;

     label1:
        if $r4 != null goto label2;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(null);

        $r4 = new okio.Segment;

        specialinvoke $r4.<okio.Segment: void <init>()>();

        return $r4;

     label2:
        $r0 = $r4.<okio.Segment: okio.Segment next>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r0);

        $r4.<okio.Segment: okio.Segment next> = null;

        $r4.<okio.Segment: int limit> = 0;

        return $r4;
    }

