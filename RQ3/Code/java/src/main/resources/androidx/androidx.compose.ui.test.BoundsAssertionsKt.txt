androidx.compose.ui.test.BoundsAssertionsKt
    public static final androidx.compose.ui.test.SemanticsNodeInteraction assertWidthIsEqualTo-3ABfNKs(androidx.compose.ui.test.SemanticsNodeInteraction, float)
    {
        androidx.compose.ui.test.SemanticsNodeInteraction $r0, $r3;
        float f0;
        androidx.compose.ui.test.BoundsAssertionsKt$assertWidthIsEqualTo$1 $r1;
        kotlin.jvm.functions.Function1 $r2;

        $r0 := @parameter0: androidx.compose.ui.test.SemanticsNodeInteraction;

        f0 := @parameter1: float;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$assertWidthIsEqualTo");

        $r1 = new androidx.compose.ui.test.BoundsAssertionsKt$assertWidthIsEqualTo$1;

        specialinvoke $r1.<androidx.compose.ui.test.BoundsAssertionsKt$assertWidthIsEqualTo$1: void <init>(float)>(f0);

        $r2 = (kotlin.jvm.functions.Function1) $r1;

        $r3 = staticinvoke <androidx.compose.ui.test.BoundsAssertionsKt: androidx.compose.ui.test.SemanticsNodeInteraction withUnclippedBoundsInRoot(androidx.compose.ui.test.SemanticsNodeInteraction,kotlin.jvm.functions.Function1)>($r0, $r2);

        return $r3;
    }

    public static final androidx.compose.ui.test.SemanticsNodeInteraction assertHeightIsEqualTo-3ABfNKs(androidx.compose.ui.test.SemanticsNodeInteraction, float)
    {
        androidx.compose.ui.test.SemanticsNodeInteraction $r0, $r3;
        float f0;
        androidx.compose.ui.test.BoundsAssertionsKt$assertHeightIsEqualTo$1 $r1;
        kotlin.jvm.functions.Function1 $r2;

        $r0 := @parameter0: androidx.compose.ui.test.SemanticsNodeInteraction;

        f0 := @parameter1: float;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$assertHeightIsEqualTo");

        $r1 = new androidx.compose.ui.test.BoundsAssertionsKt$assertHeightIsEqualTo$1;

        specialinvoke $r1.<androidx.compose.ui.test.BoundsAssertionsKt$assertHeightIsEqualTo$1: void <init>(float)>(f0);

        $r2 = (kotlin.jvm.functions.Function1) $r1;

        $r3 = staticinvoke <androidx.compose.ui.test.BoundsAssertionsKt: androidx.compose.ui.test.SemanticsNodeInteraction withUnclippedBoundsInRoot(androidx.compose.ui.test.SemanticsNodeInteraction,kotlin.jvm.functions.Function1)>($r0, $r2);

        return $r3;
    }

    public static final androidx.compose.ui.test.SemanticsNodeInteraction assertTouchWidthIsEqualTo-3ABfNKs(androidx.compose.ui.test.SemanticsNodeInteraction, float)
    {
        androidx.compose.ui.test.SemanticsNodeInteraction $r0, $r3;
        float f0;
        androidx.compose.ui.test.BoundsAssertionsKt$assertTouchWidthIsEqualTo$1 $r1;
        kotlin.jvm.functions.Function1 $r2;

        $r0 := @parameter0: androidx.compose.ui.test.SemanticsNodeInteraction;

        f0 := @parameter1: float;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$assertTouchWidthIsEqualTo");

        $r1 = new androidx.compose.ui.test.BoundsAssertionsKt$assertTouchWidthIsEqualTo$1;

        specialinvoke $r1.<androidx.compose.ui.test.BoundsAssertionsKt$assertTouchWidthIsEqualTo$1: void <init>(float)>(f0);

        $r2 = (kotlin.jvm.functions.Function1) $r1;

        $r3 = staticinvoke <androidx.compose.ui.test.BoundsAssertionsKt: androidx.compose.ui.test.SemanticsNodeInteraction withTouchBoundsInRoot(androidx.compose.ui.test.SemanticsNodeInteraction,kotlin.jvm.functions.Function1)>($r0, $r2);

        return $r3;
    }

    public static final androidx.compose.ui.test.SemanticsNodeInteraction assertTouchHeightIsEqualTo-3ABfNKs(androidx.compose.ui.test.SemanticsNodeInteraction, float)
    {
        androidx.compose.ui.test.SemanticsNodeInteraction $r0, $r3;
        float f0;
        androidx.compose.ui.test.BoundsAssertionsKt$assertTouchHeightIsEqualTo$1 $r1;
        kotlin.jvm.functions.Function1 $r2;

        $r0 := @parameter0: androidx.compose.ui.test.SemanticsNodeInteraction;

        f0 := @parameter1: float;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$assertTouchHeightIsEqualTo");

        $r1 = new androidx.compose.ui.test.BoundsAssertionsKt$assertTouchHeightIsEqualTo$1;

        specialinvoke $r1.<androidx.compose.ui.test.BoundsAssertionsKt$assertTouchHeightIsEqualTo$1: void <init>(float)>(f0);

        $r2 = (kotlin.jvm.functions.Function1) $r1;

        $r3 = staticinvoke <androidx.compose.ui.test.BoundsAssertionsKt: androidx.compose.ui.test.SemanticsNodeInteraction withTouchBoundsInRoot(androidx.compose.ui.test.SemanticsNodeInteraction,kotlin.jvm.functions.Function1)>($r0, $r2);

        return $r3;
    }

    public static final androidx.compose.ui.test.SemanticsNodeInteraction assertWidthIsAtLeast-3ABfNKs(androidx.compose.ui.test.SemanticsNodeInteraction, float)
    {
        androidx.compose.ui.test.SemanticsNodeInteraction $r0, $r3;
        float f0;
        androidx.compose.ui.test.BoundsAssertionsKt$assertWidthIsAtLeast$1 $r1;
        kotlin.jvm.functions.Function1 $r2;

        $r0 := @parameter0: androidx.compose.ui.test.SemanticsNodeInteraction;

        f0 := @parameter1: float;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$assertWidthIsAtLeast");

        $r1 = new androidx.compose.ui.test.BoundsAssertionsKt$assertWidthIsAtLeast$1;

        specialinvoke $r1.<androidx.compose.ui.test.BoundsAssertionsKt$assertWidthIsAtLeast$1: void <init>(float)>(f0);

        $r2 = (kotlin.jvm.functions.Function1) $r1;

        $r3 = staticinvoke <androidx.compose.ui.test.BoundsAssertionsKt: androidx.compose.ui.test.SemanticsNodeInteraction withUnclippedBoundsInRoot(androidx.compose.ui.test.SemanticsNodeInteraction,kotlin.jvm.functions.Function1)>($r0, $r2);

        return $r3;
    }

    public static final androidx.compose.ui.test.SemanticsNodeInteraction assertHeightIsAtLeast-3ABfNKs(androidx.compose.ui.test.SemanticsNodeInteraction, float)
    {
        androidx.compose.ui.test.SemanticsNodeInteraction $r0, $r3;
        float f0;
        androidx.compose.ui.test.BoundsAssertionsKt$assertHeightIsAtLeast$1 $r1;
        kotlin.jvm.functions.Function1 $r2;

        $r0 := @parameter0: androidx.compose.ui.test.SemanticsNodeInteraction;

        f0 := @parameter1: float;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$assertHeightIsAtLeast");

        $r1 = new androidx.compose.ui.test.BoundsAssertionsKt$assertHeightIsAtLeast$1;

        specialinvoke $r1.<androidx.compose.ui.test.BoundsAssertionsKt$assertHeightIsAtLeast$1: void <init>(float)>(f0);

        $r2 = (kotlin.jvm.functions.Function1) $r1;

        $r3 = staticinvoke <androidx.compose.ui.test.BoundsAssertionsKt: androidx.compose.ui.test.SemanticsNodeInteraction withUnclippedBoundsInRoot(androidx.compose.ui.test.SemanticsNodeInteraction,kotlin.jvm.functions.Function1)>($r0, $r2);

        return $r3;
    }

    public static final androidx.compose.ui.test.SemanticsNodeInteraction assertPositionInRootIsEqualTo-VpY3zN4(androidx.compose.ui.test.SemanticsNodeInteraction, float, float)
    {
        androidx.compose.ui.test.SemanticsNodeInteraction $r0, $r3;
        float f0, f1;
        androidx.compose.ui.test.BoundsAssertionsKt$assertPositionInRootIsEqualTo$1 $r1;
        kotlin.jvm.functions.Function1 $r2;

        $r0 := @parameter0: androidx.compose.ui.test.SemanticsNodeInteraction;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$assertPositionInRootIsEqualTo");

        $r1 = new androidx.compose.ui.test.BoundsAssertionsKt$assertPositionInRootIsEqualTo$1;

        specialinvoke $r1.<androidx.compose.ui.test.BoundsAssertionsKt$assertPositionInRootIsEqualTo$1: void <init>(float,float)>(f0, f1);

        $r2 = (kotlin.jvm.functions.Function1) $r1;

        $r3 = staticinvoke <androidx.compose.ui.test.BoundsAssertionsKt: androidx.compose.ui.test.SemanticsNodeInteraction withUnclippedBoundsInRoot(androidx.compose.ui.test.SemanticsNodeInteraction,kotlin.jvm.functions.Function1)>($r0, $r2);

        return $r3;
    }

    public static final androidx.compose.ui.test.SemanticsNodeInteraction assertTopPositionInRootIsEqualTo-3ABfNKs(androidx.compose.ui.test.SemanticsNodeInteraction, float)
    {
        androidx.compose.ui.test.SemanticsNodeInteraction $r0, $r3;
        float f0;
        androidx.compose.ui.test.BoundsAssertionsKt$assertTopPositionInRootIsEqualTo$1 $r1;
        kotlin.jvm.functions.Function1 $r2;

        $r0 := @parameter0: androidx.compose.ui.test.SemanticsNodeInteraction;

        f0 := @parameter1: float;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$assertTopPositionInRootIsEqualTo");

        $r1 = new androidx.compose.ui.test.BoundsAssertionsKt$assertTopPositionInRootIsEqualTo$1;

        specialinvoke $r1.<androidx.compose.ui.test.BoundsAssertionsKt$assertTopPositionInRootIsEqualTo$1: void <init>(float)>(f0);

        $r2 = (kotlin.jvm.functions.Function1) $r1;

        $r3 = staticinvoke <androidx.compose.ui.test.BoundsAssertionsKt: androidx.compose.ui.test.SemanticsNodeInteraction withUnclippedBoundsInRoot(androidx.compose.ui.test.SemanticsNodeInteraction,kotlin.jvm.functions.Function1)>($r0, $r2);

        return $r3;
    }

    public static final androidx.compose.ui.test.SemanticsNodeInteraction assertLeftPositionInRootIsEqualTo-3ABfNKs(androidx.compose.ui.test.SemanticsNodeInteraction, float)
    {
        androidx.compose.ui.test.SemanticsNodeInteraction $r0, $r3;
        float f0;
        androidx.compose.ui.test.BoundsAssertionsKt$assertLeftPositionInRootIsEqualTo$1 $r1;
        kotlin.jvm.functions.Function1 $r2;

        $r0 := @parameter0: androidx.compose.ui.test.SemanticsNodeInteraction;

        f0 := @parameter1: float;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$assertLeftPositionInRootIsEqualTo");

        $r1 = new androidx.compose.ui.test.BoundsAssertionsKt$assertLeftPositionInRootIsEqualTo$1;

        specialinvoke $r1.<androidx.compose.ui.test.BoundsAssertionsKt$assertLeftPositionInRootIsEqualTo$1: void <init>(float)>(f0);

        $r2 = (kotlin.jvm.functions.Function1) $r1;

        $r3 = staticinvoke <androidx.compose.ui.test.BoundsAssertionsKt: androidx.compose.ui.test.SemanticsNodeInteraction withUnclippedBoundsInRoot(androidx.compose.ui.test.SemanticsNodeInteraction,kotlin.jvm.functions.Function1)>($r0, $r2);

        return $r3;
    }

    public static final androidx.compose.ui.unit.DpRect getUnclippedBoundsInRoot(androidx.compose.ui.test.SemanticsNodeInteraction)
    {
        androidx.compose.ui.test.SemanticsNodeInteraction $r0;
        kotlin.jvm.internal.Ref$ObjectRef r1, $r2;
        androidx.compose.ui.test.BoundsAssertionsKt$getUnclippedBoundsInRoot$1 $r3;
        kotlin.jvm.functions.Function1 $r4;
        java.lang.Object $r6, $r7;
        androidx.compose.ui.unit.DpRect $r8;

        $r0 := @parameter0: androidx.compose.ui.test.SemanticsNodeInteraction;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r2 = new kotlin.jvm.internal.Ref$ObjectRef;

        specialinvoke $r2.<kotlin.jvm.internal.Ref$ObjectRef: void <init>()>();

        r1 = $r2;

        $r3 = new androidx.compose.ui.test.BoundsAssertionsKt$getUnclippedBoundsInRoot$1;

        specialinvoke $r3.<androidx.compose.ui.test.BoundsAssertionsKt$getUnclippedBoundsInRoot$1: void <init>(kotlin.jvm.internal.Ref$ObjectRef)>(r1);

        $r4 = (kotlin.jvm.functions.Function1) $r3;

        staticinvoke <androidx.compose.ui.test.BoundsAssertionsKt: androidx.compose.ui.test.SemanticsNodeInteraction withUnclippedBoundsInRoot(androidx.compose.ui.test.SemanticsNodeInteraction,kotlin.jvm.functions.Function1)>($r0, $r4);

        $r6 = r1.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        if $r6 != null goto label1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void throwUninitializedPropertyAccessException(java.lang.String)>("bounds");

        $r8 = null;

        goto label2;

     label1:
        $r7 = r1.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        $r8 = (androidx.compose.ui.unit.DpRect) $r7;

     label2:
        return $r8;
    }

    public static final androidx.compose.ui.unit.DpRect getBoundsInRoot(androidx.compose.ui.test.SemanticsNodeInteraction)
    {
        androidx.compose.ui.test.SemanticsNodeInteraction $r0;
        androidx.compose.ui.semantics.SemanticsNode r1;
        androidx.compose.ui.unit.Density $r2;
        androidx.compose.ui.geometry.Rect r3;
        androidx.compose.ui.layout.LayoutInfo $r4;
        androidx.compose.ui.unit.DpRect $r5;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;

        $r0 := @parameter0: androidx.compose.ui.test.SemanticsNodeInteraction;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        r1 = virtualinvoke $r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.semantics.SemanticsNode fetchSemanticsNode(java.lang.String)>("Failed to retrieve bounds of the node.");

        $r4 = virtualinvoke r1.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.layout.LayoutInfo getLayoutInfo()>();

        $r2 = interfaceinvoke $r4.<androidx.compose.ui.layout.LayoutInfo: androidx.compose.ui.unit.Density getDensity()>();

        r3 = virtualinvoke r1.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.geometry.Rect getBoundsInRoot()>();

        $r5 = new androidx.compose.ui.unit.DpRect;

        $f0 = virtualinvoke r3.<androidx.compose.ui.geometry.Rect: float getLeft()>();

        $f1 = interfaceinvoke $r2.<androidx.compose.ui.unit.Density: float toDp-u2uoSUM(float)>($f0);

        $f2 = virtualinvoke r3.<androidx.compose.ui.geometry.Rect: float getTop()>();

        $f3 = interfaceinvoke $r2.<androidx.compose.ui.unit.Density: float toDp-u2uoSUM(float)>($f2);

        $f4 = virtualinvoke r3.<androidx.compose.ui.geometry.Rect: float getRight()>();

        $f5 = interfaceinvoke $r2.<androidx.compose.ui.unit.Density: float toDp-u2uoSUM(float)>($f4);

        $f6 = virtualinvoke r3.<androidx.compose.ui.geometry.Rect: float getBottom()>();

        $f7 = interfaceinvoke $r2.<androidx.compose.ui.unit.Density: float toDp-u2uoSUM(float)>($f6);

        specialinvoke $r5.<androidx.compose.ui.unit.DpRect: void <init>(float,float,float,float,kotlin.jvm.internal.DefaultConstructorMarker)>($f1, $f3, $f5, $f7, null);

        return $r5;
    }

    public static final float getAlignmentLinePosition(androidx.compose.ui.test.SemanticsNodeInteraction, androidx.compose.ui.layout.AlignmentLine)
    {
        androidx.compose.ui.test.SemanticsNodeInteraction $r0;
        androidx.compose.ui.layout.AlignmentLine r1;
        androidx.compose.ui.test.BoundsAssertionsKt$getAlignmentLinePosition$1 $r2;
        kotlin.jvm.functions.Function2 $r3;
        java.lang.Object $r4;
        androidx.compose.ui.unit.Dp $r5;
        float $f0;

        $r0 := @parameter0: androidx.compose.ui.test.SemanticsNodeInteraction;

        r1 := @parameter1: androidx.compose.ui.layout.AlignmentLine;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "alignmentLine");

        $r2 = new androidx.compose.ui.test.BoundsAssertionsKt$getAlignmentLinePosition$1;

        specialinvoke $r2.<androidx.compose.ui.test.BoundsAssertionsKt$getAlignmentLinePosition$1: void <init>(androidx.compose.ui.layout.AlignmentLine)>(r1);

        $r3 = (kotlin.jvm.functions.Function2) $r2;

        $r4 = staticinvoke <androidx.compose.ui.test.BoundsAssertionsKt: java.lang.Object withDensity(androidx.compose.ui.test.SemanticsNodeInteraction,kotlin.jvm.functions.Function2)>($r0, $r3);

        $r5 = (androidx.compose.ui.unit.Dp) $r4;

        $f0 = virtualinvoke $r5.<androidx.compose.ui.unit.Dp: float unbox-impl()>();

        return $f0;
    }

    private static final java.lang.Object withDensity(androidx.compose.ui.test.SemanticsNodeInteraction, kotlin.jvm.functions.Function2)
    {
        androidx.compose.ui.test.SemanticsNodeInteraction $r0;
        kotlin.jvm.functions.Function2 r1;
        androidx.compose.ui.semantics.SemanticsNode r2;
        androidx.compose.ui.unit.Density r3;
        androidx.compose.ui.layout.LayoutInfo $r4;
        java.lang.Object $r5;

        $r0 := @parameter0: androidx.compose.ui.test.SemanticsNodeInteraction;

        r1 := @parameter1: kotlin.jvm.functions.Function2;

        r2 = virtualinvoke $r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.semantics.SemanticsNode fetchSemanticsNode(java.lang.String)>("Failed to retrieve density for the node.");

        $r4 = virtualinvoke r2.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.layout.LayoutInfo getLayoutInfo()>();

        r3 = interfaceinvoke $r4.<androidx.compose.ui.layout.LayoutInfo: androidx.compose.ui.unit.Density getDensity()>();

        $r5 = interfaceinvoke r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>(r3, r2);

        return $r5;
    }

    private static final androidx.compose.ui.test.SemanticsNodeInteraction withUnclippedBoundsInRoot(androidx.compose.ui.test.SemanticsNodeInteraction, kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.test.SemanticsNodeInteraction $r0;
        kotlin.jvm.functions.Function1 r1;
        androidx.compose.ui.semantics.SemanticsNode r2;
        androidx.compose.ui.unit.DpRect r3, $r7;
        androidx.compose.ui.unit.Density $r4;
        androidx.compose.ui.geometry.Rect r5;
        androidx.compose.ui.layout.LayoutInfo $r6;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;

        $r0 := @parameter0: androidx.compose.ui.test.SemanticsNodeInteraction;

        r1 := @parameter1: kotlin.jvm.functions.Function1;

        r2 = virtualinvoke $r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.semantics.SemanticsNode fetchSemanticsNode(java.lang.String)>("Failed to retrieve bounds of the node.");

        $r6 = virtualinvoke r2.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.layout.LayoutInfo getLayoutInfo()>();

        $r4 = interfaceinvoke $r6.<androidx.compose.ui.layout.LayoutInfo: androidx.compose.ui.unit.Density getDensity()>();

        r5 = staticinvoke <androidx.compose.ui.test.BoundsAssertionsKt: androidx.compose.ui.geometry.Rect getUnclippedBoundsInRoot(androidx.compose.ui.semantics.SemanticsNode)>(r2);

        $r7 = new androidx.compose.ui.unit.DpRect;

        $f0 = virtualinvoke r5.<androidx.compose.ui.geometry.Rect: float getLeft()>();

        $f1 = interfaceinvoke $r4.<androidx.compose.ui.unit.Density: float toDp-u2uoSUM(float)>($f0);

        $f2 = virtualinvoke r5.<androidx.compose.ui.geometry.Rect: float getTop()>();

        $f3 = interfaceinvoke $r4.<androidx.compose.ui.unit.Density: float toDp-u2uoSUM(float)>($f2);

        $f4 = virtualinvoke r5.<androidx.compose.ui.geometry.Rect: float getRight()>();

        $f5 = interfaceinvoke $r4.<androidx.compose.ui.unit.Density: float toDp-u2uoSUM(float)>($f4);

        $f6 = virtualinvoke r5.<androidx.compose.ui.geometry.Rect: float getBottom()>();

        $f7 = interfaceinvoke $r4.<androidx.compose.ui.unit.Density: float toDp-u2uoSUM(float)>($f6);

        specialinvoke $r7.<androidx.compose.ui.unit.DpRect: void <init>(float,float,float,float,kotlin.jvm.internal.DefaultConstructorMarker)>($f1, $f3, $f5, $f7, null);

        r3 = $r7;

        interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r3);

        return $r0;
    }

    private static final androidx.compose.ui.test.SemanticsNodeInteraction withTouchBoundsInRoot(androidx.compose.ui.test.SemanticsNodeInteraction, kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.test.SemanticsNodeInteraction $r0;
        kotlin.jvm.functions.Function1 r1;
        androidx.compose.ui.semantics.SemanticsNode r2;
        androidx.compose.ui.unit.DpRect r3, $r7;
        androidx.compose.ui.unit.Density $r4;
        androidx.compose.ui.geometry.Rect r5;
        androidx.compose.ui.layout.LayoutInfo $r6;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;

        $r0 := @parameter0: androidx.compose.ui.test.SemanticsNodeInteraction;

        r1 := @parameter1: kotlin.jvm.functions.Function1;

        r2 = virtualinvoke $r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.semantics.SemanticsNode fetchSemanticsNode(java.lang.String)>("Failed to retrieve bounds of the node.");

        $r6 = virtualinvoke r2.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.layout.LayoutInfo getLayoutInfo()>();

        $r4 = interfaceinvoke $r6.<androidx.compose.ui.layout.LayoutInfo: androidx.compose.ui.unit.Density getDensity()>();

        r5 = virtualinvoke r2.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.geometry.Rect getTouchBoundsInRoot()>();

        $r7 = new androidx.compose.ui.unit.DpRect;

        $f0 = virtualinvoke r5.<androidx.compose.ui.geometry.Rect: float getLeft()>();

        $f1 = interfaceinvoke $r4.<androidx.compose.ui.unit.Density: float toDp-u2uoSUM(float)>($f0);

        $f2 = virtualinvoke r5.<androidx.compose.ui.geometry.Rect: float getTop()>();

        $f3 = interfaceinvoke $r4.<androidx.compose.ui.unit.Density: float toDp-u2uoSUM(float)>($f2);

        $f4 = virtualinvoke r5.<androidx.compose.ui.geometry.Rect: float getRight()>();

        $f5 = interfaceinvoke $r4.<androidx.compose.ui.unit.Density: float toDp-u2uoSUM(float)>($f4);

        $f6 = virtualinvoke r5.<androidx.compose.ui.geometry.Rect: float getBottom()>();

        $f7 = interfaceinvoke $r4.<androidx.compose.ui.unit.Density: float toDp-u2uoSUM(float)>($f6);

        specialinvoke $r7.<androidx.compose.ui.unit.DpRect: void <init>(float,float,float,float,kotlin.jvm.internal.DefaultConstructorMarker)>($f1, $f3, $f5, $f7, null);

        r3 = $r7;

        interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r3);

        return $r0;
    }

    private static final androidx.compose.ui.geometry.Rect getUnclippedBoundsInRoot(androidx.compose.ui.semantics.SemanticsNode)
    {
        androidx.compose.ui.semantics.SemanticsNode $r0;
        float f0;
        androidx.compose.ui.layout.LayoutInfo $r1;
        boolean $z1;
        androidx.compose.ui.unit.Dp$Companion $r2;
        long $l0, $l1, $l2;
        androidx.compose.ui.geometry.Rect $r3;

        $r0 := @parameter0: androidx.compose.ui.semantics.SemanticsNode;

        $r1 = virtualinvoke $r0.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.layout.LayoutInfo getLayoutInfo()>();

        $z1 = interfaceinvoke $r1.<androidx.compose.ui.layout.LayoutInfo: boolean isPlaced()>();

        if $z1 == 0 goto label1;

        $l0 = virtualinvoke $r0.<androidx.compose.ui.semantics.SemanticsNode: long getPositionInRoot-F1C5BW0()>();

        $l1 = virtualinvoke $r0.<androidx.compose.ui.semantics.SemanticsNode: long getSize-YbymL2g()>();

        $l2 = staticinvoke <androidx.compose.ui.unit.IntSizeKt: long toSize-ozmzZPI(long)>($l1);

        $r3 = staticinvoke <androidx.compose.ui.geometry.RectKt: androidx.compose.ui.geometry.Rect Rect-tz77jQw(long,long)>($l0, $l2);

        goto label2;

     label1:
        $r2 = <androidx.compose.ui.unit.Dp: androidx.compose.ui.unit.Dp$Companion Companion>;

        f0 = virtualinvoke $r2.<androidx.compose.ui.unit.Dp$Companion: float getUnspecified-D9Ej5fM()>();

        $r3 = new androidx.compose.ui.geometry.Rect;

        specialinvoke $r3.<androidx.compose.ui.geometry.Rect: void <init>(float,float,float,float)>(f0, f0, f0, f0);

     label2:
        return $r3;
    }

    private static final boolean isWithinTolerance-2z7ARbQ(float, float, float)
    {
        float $f0, f1, f2, $f3, $f4;
        boolean $z0, $z1, $z4;
        byte $b0, $b1;

        $f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f1);

        if $z0 == 0 goto label1;

        $z4 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f0);

        goto label5;

     label1:
        $z1 = staticinvoke <java.lang.Float: boolean isInfinite(float)>(f1);

        if $z1 == 0 goto label3;

        $b1 = $f0 cmpg f1;

        if $b1 != 0 goto label2;

        $z4 = 1;

        goto label5;

     label2:
        $z4 = 0;

        goto label5;

     label3:
        $f3 = $f0 - f1;

        $f4 = staticinvoke <java.lang.Math: float abs(float)>($f3);

        $b0 = $f4 cmpg f2;

        if $b0 > 0 goto label4;

        $z4 = 1;

        goto label5;

     label4:
        $z4 = 0;

     label5:
        return $z4;
    }

    public static final void assertIsEqualTo-cWfXhoU(float, float, java.lang.String, float)
    {
        float $f0, f1, f2;
        java.lang.String r0, $r6, $r9, $r12, $r15;
        boolean $z0;
        java.lang.AssertionError $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r7, $r8, $r10, $r11, $r13, $r14;

        $f0 := @parameter0: float;

        f1 := @parameter1: float;

        r0 := @parameter2: java.lang.String;

        f2 := @parameter3: float;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "subject");

        $z0 = staticinvoke <androidx.compose.ui.test.BoundsAssertionsKt: boolean isWithinTolerance-2z7ARbQ(float,float,float)>($f0, f1, f2);

        if $z0 != 0 goto label1;

        $r1 = new java.lang.AssertionError;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Actual ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is ");

        $r6 = staticinvoke <androidx.compose.ui.unit.Dp: java.lang.String toString-impl(float)>($f0);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", expected ");

        $r9 = staticinvoke <androidx.compose.ui.unit.Dp: java.lang.String toString-impl(float)>(f1);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (tolerance: ");

        $r12 = staticinvoke <androidx.compose.ui.unit.Dp: java.lang.String toString-impl(float)>(f2);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>($r15);

        throw $r1;

     label1:
        return;
    }

    public static void assertIsEqualTo-cWfXhoU$default(float, float, java.lang.String, float, int, java.lang.Object)
    {
        float f0, f1, f2;
        java.lang.String r0;
        int i0, $i1;
        java.lang.Object r1;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        r0 := @parameter2: java.lang.String;

        f2 := @parameter3: float;

        i0 := @parameter4: int;

        r1 := @parameter5: java.lang.Object;

        $i1 = i0 & 4;

        if $i1 == 0 goto label1;

        f2 = staticinvoke <androidx.compose.ui.unit.Dp: float constructor-impl(float)>(0.5F);

     label1:
        staticinvoke <androidx.compose.ui.test.BoundsAssertionsKt: void assertIsEqualTo-cWfXhoU(float,float,java.lang.String,float)>(f0, f1, r0, f2);

        return;
    }

    private static final void assertIsAtLeast-cWfXhoU(float, float, java.lang.String, float)
    {
        float $f0, f1, f2;
        java.lang.String r0, $r6, $r9, $r12, $r15;
        boolean $z1, $z2;
        java.lang.AssertionError $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r7, $r8, $r10, $r11, $r13, $r14;
        int $i0;

        $f0 := @parameter0: float;

        f1 := @parameter1: float;

        r0 := @parameter2: java.lang.String;

        f2 := @parameter3: float;

        $z1 = staticinvoke <androidx.compose.ui.test.BoundsAssertionsKt: boolean isWithinTolerance-2z7ARbQ(float,float,float)>($f0, f1, f2);

        if $z1 != 0 goto label2;

        $z2 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f0);

        if $z2 != 0 goto label1;

        $i0 = staticinvoke <androidx.compose.ui.unit.Dp: int compareTo-0680j_4(float,float)>($f0, f1);

        if $i0 > 0 goto label2;

     label1:
        $r1 = new java.lang.AssertionError;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Actual ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is ");

        $r6 = staticinvoke <androidx.compose.ui.unit.Dp: java.lang.String toString-impl(float)>($f0);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", expected at least ");

        $r9 = staticinvoke <androidx.compose.ui.unit.Dp: java.lang.String toString-impl(float)>(f1);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (tolerance: ");

        $r12 = staticinvoke <androidx.compose.ui.unit.Dp: java.lang.String toString-impl(float)>(f2);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>($r15);

        throw $r1;

     label2:
        return;
    }

    static void assertIsAtLeast-cWfXhoU$default(float, float, java.lang.String, float, int, java.lang.Object)
    {
        float f0, f1, f2;
        java.lang.String r0;
        int i0, $i1;
        java.lang.Object r1;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        r0 := @parameter2: java.lang.String;

        f2 := @parameter3: float;

        i0 := @parameter4: int;

        r1 := @parameter5: java.lang.Object;

        $i1 = i0 & 4;

        if $i1 == 0 goto label1;

        f2 = staticinvoke <androidx.compose.ui.unit.Dp: float constructor-impl(float)>(0.5F);

     label1:
        staticinvoke <androidx.compose.ui.test.BoundsAssertionsKt: void assertIsAtLeast-cWfXhoU(float,float,java.lang.String,float)>(f0, f1, r0, f2);

        return;
    }

