androidx.benchmark.macro.MetricResultExtensionsKt
    public static final java.util.List mergeToSingleMetricResults(java.util.List)
    {
        java.util.List $r0, r10, $r12, $r17, $r20, $r64;
        java.util.Set r1, $r16, $r27, $r42;
        java.util.Collection r2, r44, $r58, r62;
        java.lang.Iterable $r3, $r13, $r43, r48, $r49, $r65;
        java.util.Iterator r4, $r45, r51, r59;
        java.lang.Object r5, r6, r9, $r21, $r22, $r23, $r28, r46, r52;
        int i0, i1, $i2, $i3, $i4, $i5, i7, i8, i9;
        java.util.Map r7, r47, r54, $r56, r57;
        java.lang.Double r8, $r29, $r55;
        java.util.ArrayList $r11, $r15, $r25;
        boolean $z5, $z6, $z7, $z9, $z10;
        java.util.LinkedHashMap $r14, r50;
        androidx.benchmark.macro.MetricResultExtensionsKt$mergeToSingleMetricResults$$inlined$sortedBy$1 $r18;
        java.util.Comparator $r19;
        androidx.benchmark.MetricResult $r24;
        double $d0;
        java.lang.IllegalStateException $r30;
        java.lang.StringBuilder $r31, $r32, $r33, $r34, $r37, $r38, $r39, $r40;
        java.lang.String $r35, $r36, $r41, $r53, $r63;
        java.util.Map$Entry r60;

        $r0 := @parameter0: java.util.List;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r43 = (java.lang.Iterable) $r0;

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        r44 = (java.util.Collection) $r11;

        $r45 = interfaceinvoke $r43.<java.lang.Iterable: java.util.Iterator iterator()>();

     label01:
        $z5 = interfaceinvoke $r45.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label02;

        r46 = interfaceinvoke $r45.<java.util.Iterator: java.lang.Object next()>();

        r47 = (java.util.Map) r46;

        $r42 = interfaceinvoke r47.<java.util.Map: java.util.Set keySet()>();

        r48 = (java.lang.Iterable) $r42;

        staticinvoke <kotlin.collections.CollectionsKt: boolean addAll(java.util.Collection,java.lang.Iterable)>(r44, r48);

        goto label01;

     label02:
        $r12 = (java.util.List) r44;

        $r13 = (java.lang.Iterable) $r12;

        r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.Set toSet(java.lang.Iterable)>($r13);

        $r49 = (java.lang.Iterable) r1;

        $r14 = new java.util.LinkedHashMap;

        $i2 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r49, 10);

        $i3 = staticinvoke <kotlin.collections.MapsKt: int mapCapacity(int)>($i2);

        $i4 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtLeast(int,int)>($i3, 16);

        specialinvoke $r14.<java.util.LinkedHashMap: void <init>(int)>($i4);

        r50 = $r14;

        r51 = interfaceinvoke $r49.<java.lang.Iterable: java.util.Iterator iterator()>();

     label03:
        $z6 = interfaceinvoke r51.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label12;

        r52 = interfaceinvoke r51.<java.util.Iterator: java.lang.Object next()>();

        $r53 = (java.lang.String) r52;

        r9 = r52;

        r54 = (java.util.Map) r50;

        $r25 = new java.util.ArrayList;

        specialinvoke $r25.<java.util.ArrayList: void <init>()>();

        r2 = (java.util.Collection) $r25;

        $r3 = (java.lang.Iterable) $r0;

        i7 = 0;

        r4 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>();

     label04:
        $z9 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label11;

        r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        i8 = i7;

        i7 = i8 + 1;

        i9 = i8;

        if i9 >= 0 goto label05;

        staticinvoke <kotlin.collections.CollectionsKt: void throwIndexOverflow()>();

     label05:
        r6 = r5;

        i0 = i9;

        r7 = (java.util.Map) r6;

        i1 = i0;

        $r27 = interfaceinvoke r7.<java.util.Map: java.util.Set keySet()>();

        $z10 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r27, r1);

        if $z10 != 0 goto label06;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Skipping results from iter ");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", it didn\'t capture all metrics");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Benchmark", $r41);

        $r55 = (java.lang.Double) null;

        goto label08;

     label06:
        $r28 = interfaceinvoke r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r53);

        $r29 = (java.lang.Double) $r28;

        if $r29 != null goto label07;

        $r30 = new java.lang.IllegalStateException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Metric ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r53);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not observed in iteration");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        $r36 = virtualinvoke $r35.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r30.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r36);

        throw $r30;

     label07:
        $d0 = virtualinvoke $r29.<java.lang.Double: double doubleValue()>();

        $r55 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

     label08:
        if $r55 != null goto label09;

        goto label10;

     label09:
        r8 = $r55;

        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>(r8);

     label10:
        goto label04;

     label11:
        r10 = (java.util.List) r2;

        interfaceinvoke r54.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, r10);

        goto label03;

     label12:
        $r56 = (java.util.Map) r50;

        r57 = $r56;

        $r15 = new java.util.ArrayList;

        $i5 = interfaceinvoke $r56.<java.util.Map: int size()>();

        specialinvoke $r15.<java.util.ArrayList: void <init>(int)>($i5);

        $r58 = (java.util.Collection) $r15;

        $r16 = interfaceinvoke r57.<java.util.Map: java.util.Set entrySet()>();

        r59 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();

     label13:
        $z7 = interfaceinvoke r59.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label14;

        $r21 = interfaceinvoke r59.<java.util.Iterator: java.lang.Object next()>();

        r60 = (java.util.Map$Entry) $r21;

        r62 = $r58;

        $r22 = interfaceinvoke r60.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r63 = (java.lang.String) $r22;

        $r23 = interfaceinvoke r60.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r64 = (java.util.List) $r23;

        $r24 = new androidx.benchmark.MetricResult;

        specialinvoke $r24.<androidx.benchmark.MetricResult: void <init>(java.lang.String,java.util.List,java.util.List,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r63, $r64, null, 4, null);

        interfaceinvoke r62.<java.util.Collection: boolean add(java.lang.Object)>($r24);

        goto label13;

     label14:
        $r17 = (java.util.List) $r58;

        $r65 = (java.lang.Iterable) $r17;

        $r18 = new androidx.benchmark.macro.MetricResultExtensionsKt$mergeToSingleMetricResults$$inlined$sortedBy$1;

        specialinvoke $r18.<androidx.benchmark.macro.MetricResultExtensionsKt$mergeToSingleMetricResults$$inlined$sortedBy$1: void <init>()>();

        $r19 = (java.util.Comparator) $r18;

        $r20 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List sortedWith(java.lang.Iterable,java.util.Comparator)>($r65, $r19);

        return $r20;
    }

    public static final java.util.List mergeToSampledMetricResults(java.util.List)
    {
        java.util.List $r0, r7, r9, $r11, $r16, $r19, $r25, $r59;
        java.util.Set r1, $r15, $r37;
        java.util.Collection r2, r6, r39, $r53, r57;
        java.util.Iterator r3, $r40, r46, r54;
        java.lang.Object r4, r8, $r20, $r21, $r22, $r28, r41, r47;
        java.util.Map r5, r42, r49, $r51, r52;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8;
        java.util.ArrayList $r10, $r14, $r26;
        boolean $z2, $z3, $z4, $z6;
        java.lang.Iterable $r12, $r24, $r38, r43, $r44, $r50, $r60;
        java.util.LinkedHashMap $r13, r45;
        androidx.benchmark.macro.MetricResultExtensionsKt$mergeToSampledMetricResults$$inlined$sortedBy$1 $r17;
        java.util.Comparator $r18;
        androidx.benchmark.MetricResult $r23;
        java.lang.IllegalStateException $r29;
        java.lang.StringBuilder $r30, $r31, $r32, $r33, $r34;
        java.lang.String $r35, $r48, $r58;
        java.util.Map$Entry r55;

        $r0 := @parameter0: java.util.List;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r38 = (java.lang.Iterable) $r0;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        r39 = (java.util.Collection) $r10;

        $r40 = interfaceinvoke $r38.<java.lang.Iterable: java.util.Iterator iterator()>();

     label01:
        $z2 = interfaceinvoke $r40.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label02;

        r41 = interfaceinvoke $r40.<java.util.Iterator: java.lang.Object next()>();

        r42 = (java.util.Map) r41;

        $r37 = interfaceinvoke r42.<java.util.Map: java.util.Set keySet()>();

        r43 = (java.lang.Iterable) $r37;

        staticinvoke <kotlin.collections.CollectionsKt: boolean addAll(java.util.Collection,java.lang.Iterable)>(r39, r43);

        goto label01;

     label02:
        $r11 = (java.util.List) r39;

        $r12 = (java.lang.Iterable) $r11;

        r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.Set toSet(java.lang.Iterable)>($r12);

        $r44 = (java.lang.Iterable) r1;

        $r13 = new java.util.LinkedHashMap;

        $i1 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r44, 10);

        $i2 = staticinvoke <kotlin.collections.MapsKt: int mapCapacity(int)>($i1);

        $i3 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtLeast(int,int)>($i2, 16);

        specialinvoke $r13.<java.util.LinkedHashMap: void <init>(int)>($i3);

        r45 = $r13;

        r46 = interfaceinvoke $r44.<java.lang.Iterable: java.util.Iterator iterator()>();

     label03:
        $z3 = interfaceinvoke r46.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label08;

        r47 = interfaceinvoke r46.<java.util.Iterator: java.lang.Object next()>();

        $r48 = (java.lang.String) r47;

        r8 = r47;

        r49 = (java.util.Map) r45;

        $r50 = (java.lang.Iterable) $r0;

        $r26 = new java.util.ArrayList;

        $i5 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r50, 10);

        specialinvoke $r26.<java.util.ArrayList: void <init>(int)>($i5);

        r2 = (java.util.Collection) $r26;

        i6 = 0;

        r3 = interfaceinvoke $r50.<java.lang.Iterable: java.util.Iterator iterator()>();

     label04:
        $z6 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label07;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        i7 = i6;

        i6 = i7 + 1;

        i8 = i7;

        if i8 >= 0 goto label05;

        staticinvoke <kotlin.collections.CollectionsKt: void throwIndexOverflow()>();

     label05:
        r5 = (java.util.Map) r4;

        i0 = i8;

        r6 = r2;

        $r28 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r48);

        r7 = (java.util.List) $r28;

        if r7 != null goto label06;

        $r29 = new java.lang.IllegalStateException;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Iteration ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" didn\'t capture metric ");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r48);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r35);

        throw $r29;

     label06:
        interfaceinvoke r6.<java.util.Collection: boolean add(java.lang.Object)>(r7);

        goto label04;

     label07:
        r9 = (java.util.List) r2;

        interfaceinvoke r49.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r9);

        goto label03;

     label08:
        $r51 = (java.util.Map) r45;

        r52 = $r51;

        $r14 = new java.util.ArrayList;

        $i4 = interfaceinvoke $r51.<java.util.Map: int size()>();

        specialinvoke $r14.<java.util.ArrayList: void <init>(int)>($i4);

        $r53 = (java.util.Collection) $r14;

        $r15 = interfaceinvoke r52.<java.util.Map: java.util.Set entrySet()>();

        r54 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();

     label09:
        $z4 = interfaceinvoke r54.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label10;

        $r20 = interfaceinvoke r54.<java.util.Iterator: java.lang.Object next()>();

        r55 = (java.util.Map$Entry) $r20;

        r57 = $r53;

        $r21 = interfaceinvoke r55.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r58 = (java.lang.String) $r21;

        $r22 = interfaceinvoke r55.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r59 = (java.util.List) $r22;

        $r23 = new androidx.benchmark.MetricResult;

        $r24 = (java.lang.Iterable) $r59;

        $r25 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List flatten(java.lang.Iterable)>($r24);

        specialinvoke $r23.<androidx.benchmark.MetricResult: void <init>(java.lang.String,java.util.List,java.util.List)>($r58, $r25, $r59);

        interfaceinvoke r57.<java.util.Collection: boolean add(java.lang.Object)>($r23);

        goto label09;

     label10:
        $r16 = (java.util.List) $r53;

        $r60 = (java.lang.Iterable) $r16;

        $r17 = new androidx.benchmark.macro.MetricResultExtensionsKt$mergeToSampledMetricResults$$inlined$sortedBy$1;

        specialinvoke $r17.<androidx.benchmark.macro.MetricResultExtensionsKt$mergeToSampledMetricResults$$inlined$sortedBy$1: void <init>()>();

        $r18 = (java.util.Comparator) $r17;

        $r19 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List sortedWith(java.lang.Iterable,java.util.Comparator)>($r60, $r18);

        return $r19;
    }

