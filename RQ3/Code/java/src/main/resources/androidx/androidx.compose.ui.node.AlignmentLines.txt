androidx.compose.ui.node.AlignmentLines
<androidx.compose.ui.node.AlignmentLines: androidx.compose.ui.node.AlignmentLinesOwner alignmentLinesOwner>
<androidx.compose.ui.node.AlignmentLines: boolean dirty>
<androidx.compose.ui.node.AlignmentLines: boolean usedDuringParentMeasurement>
<androidx.compose.ui.node.AlignmentLines: boolean usedDuringParentLayout>
<androidx.compose.ui.node.AlignmentLines: boolean previousUsedDuringParentLayout>
<androidx.compose.ui.node.AlignmentLines: boolean usedByModifierMeasurement>
<androidx.compose.ui.node.AlignmentLines: boolean usedByModifierLayout>
<androidx.compose.ui.node.AlignmentLines: androidx.compose.ui.node.AlignmentLinesOwner queryOwner>
<androidx.compose.ui.node.AlignmentLines: java.util.Map alignmentLineMap>
    private void <init>(androidx.compose.ui.node.AlignmentLinesOwner)
    {
        androidx.compose.ui.node.AlignmentLines r0;
        androidx.compose.ui.node.AlignmentLinesOwner r1;
        java.util.HashMap $r2;
        java.util.Map $r3;

        r0 := @this: androidx.compose.ui.node.AlignmentLines;

        r1 := @parameter0: androidx.compose.ui.node.AlignmentLinesOwner;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.ui.node.AlignmentLines: androidx.compose.ui.node.AlignmentLinesOwner alignmentLinesOwner> = r1;

        r0.<androidx.compose.ui.node.AlignmentLines: boolean dirty> = 1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        $r3 = (java.util.Map) $r2;

        r0.<androidx.compose.ui.node.AlignmentLines: java.util.Map alignmentLineMap> = $r3;

        return;
    }

    public final androidx.compose.ui.node.AlignmentLinesOwner getAlignmentLinesOwner()
    {
        androidx.compose.ui.node.AlignmentLines r0;
        androidx.compose.ui.node.AlignmentLinesOwner $r1;

        r0 := @this: androidx.compose.ui.node.AlignmentLines;

        $r1 = r0.<androidx.compose.ui.node.AlignmentLines: androidx.compose.ui.node.AlignmentLinesOwner alignmentLinesOwner>;

        return $r1;
    }

    public final boolean getDirty$ui_release()
    {
        androidx.compose.ui.node.AlignmentLines r0;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.AlignmentLines;

        $z0 = r0.<androidx.compose.ui.node.AlignmentLines: boolean dirty>;

        return $z0;
    }

    public final void setDirty$ui_release(boolean)
    {
        androidx.compose.ui.node.AlignmentLines r0;
        boolean z0;

        r0 := @this: androidx.compose.ui.node.AlignmentLines;

        z0 := @parameter0: boolean;

        r0.<androidx.compose.ui.node.AlignmentLines: boolean dirty> = z0;

        return;
    }

    public final boolean getUsedDuringParentMeasurement$ui_release()
    {
        androidx.compose.ui.node.AlignmentLines r0;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.AlignmentLines;

        $z0 = r0.<androidx.compose.ui.node.AlignmentLines: boolean usedDuringParentMeasurement>;

        return $z0;
    }

    public final void setUsedDuringParentMeasurement$ui_release(boolean)
    {
        androidx.compose.ui.node.AlignmentLines r0;
        boolean z0;

        r0 := @this: androidx.compose.ui.node.AlignmentLines;

        z0 := @parameter0: boolean;

        r0.<androidx.compose.ui.node.AlignmentLines: boolean usedDuringParentMeasurement> = z0;

        return;
    }

    public final boolean getUsedDuringParentLayout$ui_release()
    {
        androidx.compose.ui.node.AlignmentLines r0;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.AlignmentLines;

        $z0 = r0.<androidx.compose.ui.node.AlignmentLines: boolean usedDuringParentLayout>;

        return $z0;
    }

    public final void setUsedDuringParentLayout$ui_release(boolean)
    {
        androidx.compose.ui.node.AlignmentLines r0;
        boolean z0;

        r0 := @this: androidx.compose.ui.node.AlignmentLines;

        z0 := @parameter0: boolean;

        r0.<androidx.compose.ui.node.AlignmentLines: boolean usedDuringParentLayout> = z0;

        return;
    }

    public final boolean getPreviousUsedDuringParentLayout$ui_release()
    {
        androidx.compose.ui.node.AlignmentLines r0;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.AlignmentLines;

        $z0 = r0.<androidx.compose.ui.node.AlignmentLines: boolean previousUsedDuringParentLayout>;

        return $z0;
    }

    public final void setPreviousUsedDuringParentLayout$ui_release(boolean)
    {
        androidx.compose.ui.node.AlignmentLines r0;
        boolean z0;

        r0 := @this: androidx.compose.ui.node.AlignmentLines;

        z0 := @parameter0: boolean;

        r0.<androidx.compose.ui.node.AlignmentLines: boolean previousUsedDuringParentLayout> = z0;

        return;
    }

    public final boolean getUsedByModifierMeasurement$ui_release()
    {
        androidx.compose.ui.node.AlignmentLines r0;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.AlignmentLines;

        $z0 = r0.<androidx.compose.ui.node.AlignmentLines: boolean usedByModifierMeasurement>;

        return $z0;
    }

    public final void setUsedByModifierMeasurement$ui_release(boolean)
    {
        androidx.compose.ui.node.AlignmentLines r0;
        boolean z0;

        r0 := @this: androidx.compose.ui.node.AlignmentLines;

        z0 := @parameter0: boolean;

        r0.<androidx.compose.ui.node.AlignmentLines: boolean usedByModifierMeasurement> = z0;

        return;
    }

    public final boolean getUsedByModifierLayout$ui_release()
    {
        androidx.compose.ui.node.AlignmentLines r0;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.AlignmentLines;

        $z0 = r0.<androidx.compose.ui.node.AlignmentLines: boolean usedByModifierLayout>;

        return $z0;
    }

    public final void setUsedByModifierLayout$ui_release(boolean)
    {
        androidx.compose.ui.node.AlignmentLines r0;
        boolean z0;

        r0 := @this: androidx.compose.ui.node.AlignmentLines;

        z0 := @parameter0: boolean;

        r0.<androidx.compose.ui.node.AlignmentLines: boolean usedByModifierLayout> = z0;

        return;
    }

    public final boolean getQueried$ui_release()
    {
        androidx.compose.ui.node.AlignmentLines r0;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: androidx.compose.ui.node.AlignmentLines;

        $z0 = r0.<androidx.compose.ui.node.AlignmentLines: boolean usedDuringParentMeasurement>;

        if $z0 != 0 goto label1;

        $z1 = r0.<androidx.compose.ui.node.AlignmentLines: boolean previousUsedDuringParentLayout>;

        if $z1 != 0 goto label1;

        $z2 = r0.<androidx.compose.ui.node.AlignmentLines: boolean usedByModifierMeasurement>;

        if $z2 != 0 goto label1;

        $z3 = r0.<androidx.compose.ui.node.AlignmentLines: boolean usedByModifierLayout>;

        if $z3 == 0 goto label2;

     label1:
        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        return $z4;
    }

    public final boolean getRequired$ui_release()
    {
        androidx.compose.ui.node.AlignmentLines r0;
        androidx.compose.ui.node.AlignmentLinesOwner $r1;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.AlignmentLines;

        virtualinvoke r0.<androidx.compose.ui.node.AlignmentLines: void recalculateQueryOwner()>();

        $r1 = r0.<androidx.compose.ui.node.AlignmentLines: androidx.compose.ui.node.AlignmentLinesOwner queryOwner>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final void recalculateQueryOwner()
    {
        androidx.compose.ui.node.AlignmentLines r0, $r6, $r7, $r9, $r10, $r11;
        androidx.compose.ui.node.AlignmentLinesOwner r1, r2, r3, $r4, $r5, $r8, $r13, $r14;
        boolean $z0, $z1, $z2;

        r0 := @this: androidx.compose.ui.node.AlignmentLines;

        $z0 = virtualinvoke r0.<androidx.compose.ui.node.AlignmentLines: boolean getQueried$ui_release()>();

        if $z0 == 0 goto label1;

        $r13 = r0.<androidx.compose.ui.node.AlignmentLines: androidx.compose.ui.node.AlignmentLinesOwner alignmentLinesOwner>;

        goto label8;

     label1:
        $r4 = r0.<androidx.compose.ui.node.AlignmentLines: androidx.compose.ui.node.AlignmentLinesOwner alignmentLinesOwner>;

        $r5 = interfaceinvoke $r4.<androidx.compose.ui.node.AlignmentLinesOwner: androidx.compose.ui.node.AlignmentLinesOwner getParentAlignmentLinesOwner()>();

        if $r5 != null goto label2;

        return;

     label2:
        r1 = $r5;

        $r6 = interfaceinvoke r1.<androidx.compose.ui.node.AlignmentLinesOwner: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        r2 = $r6.<androidx.compose.ui.node.AlignmentLines: androidx.compose.ui.node.AlignmentLinesOwner queryOwner>;

        if r2 == null goto label3;

        $r11 = interfaceinvoke r2.<androidx.compose.ui.node.AlignmentLinesOwner: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        $z2 = virtualinvoke $r11.<androidx.compose.ui.node.AlignmentLines: boolean getQueried$ui_release()>();

        if $z2 == 0 goto label3;

        $r13 = r2;

        goto label8;

     label3:
        r3 = r0.<androidx.compose.ui.node.AlignmentLines: androidx.compose.ui.node.AlignmentLinesOwner queryOwner>;

        if r3 == null goto label4;

        $r7 = interfaceinvoke r3.<androidx.compose.ui.node.AlignmentLinesOwner: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        $z1 = virtualinvoke $r7.<androidx.compose.ui.node.AlignmentLines: boolean getQueried$ui_release()>();

        if $z1 == 0 goto label5;

     label4:
        return;

     label5:
        $r8 = interfaceinvoke r3.<androidx.compose.ui.node.AlignmentLinesOwner: androidx.compose.ui.node.AlignmentLinesOwner getParentAlignmentLinesOwner()>();

        if $r8 == null goto label6;

        $r10 = interfaceinvoke $r8.<androidx.compose.ui.node.AlignmentLinesOwner: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        if $r10 == null goto label6;

        virtualinvoke $r10.<androidx.compose.ui.node.AlignmentLines: void recalculateQueryOwner()>();

        goto label6;

     label6:
        $r14 = interfaceinvoke r3.<androidx.compose.ui.node.AlignmentLinesOwner: androidx.compose.ui.node.AlignmentLinesOwner getParentAlignmentLinesOwner()>();

        if $r14 == null goto label7;

        $r9 = interfaceinvoke $r14.<androidx.compose.ui.node.AlignmentLinesOwner: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        if $r9 == null goto label7;

        $r13 = $r9.<androidx.compose.ui.node.AlignmentLines: androidx.compose.ui.node.AlignmentLinesOwner queryOwner>;

        goto label8;

     label7:
        $r13 = null;

     label8:
        r0.<androidx.compose.ui.node.AlignmentLines: androidx.compose.ui.node.AlignmentLinesOwner queryOwner> = $r13;

        return;
    }

    public final java.util.Map getLastCalculation()
    {
        androidx.compose.ui.node.AlignmentLines r0;
        java.util.Map $r1;

        r0 := @this: androidx.compose.ui.node.AlignmentLines;

        $r1 = r0.<androidx.compose.ui.node.AlignmentLines: java.util.Map alignmentLineMap>;

        return $r1;
    }

<androidx.compose.ui.node.AlignmentLines: java.util.Map getAlignmentLinesMap(androidx.compose.ui.node.NodeCoordinator)>
<androidx.compose.ui.node.AlignmentLines: int getPositionFor(androidx.compose.ui.node.NodeCoordinator,androidx.compose.ui.layout.AlignmentLine)>
    private final void addAlignmentLine(androidx.compose.ui.layout.AlignmentLine, int, androidx.compose.ui.node.NodeCoordinator)
    {
        androidx.compose.ui.node.AlignmentLines r0;
        androidx.compose.ui.layout.AlignmentLine r1;
        int i0, $i1, i3, $i4, i5, $i6;
        androidx.compose.ui.node.NodeCoordinator r2, r12, $r13, $r15;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        boolean $z0, $z1, $z2, $z3;
        java.util.Map $r3, $r4, $r7, $r11;
        java.lang.Integer $r5;
        java.lang.Object $r8;
        java.lang.Number $r9;
        long l2;
        androidx.compose.ui.node.AlignmentLinesOwner $r14;

        r0 := @this: androidx.compose.ui.node.AlignmentLines;

        r1 := @parameter0: androidx.compose.ui.layout.AlignmentLine;

        i0 := @parameter1: int;

        r2 := @parameter2: androidx.compose.ui.node.NodeCoordinator;

        $f1 = (float) i0;

        $f0 = (float) i0;

        l2 = staticinvoke <androidx.compose.ui.geometry.OffsetKt: long Offset(float,float)>($f1, $f0);

        r12 = r2;

     label1:
        l2 = virtualinvoke r0.<androidx.compose.ui.node.AlignmentLines: long calculatePositionInParent-R5De75A(androidx.compose.ui.node.NodeCoordinator,long)>(r12, l2);

        $r13 = virtualinvoke r12.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator getWrappedBy$ui_release()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r13);

        r12 = $r13;

        $r14 = r0.<androidx.compose.ui.node.AlignmentLines: androidx.compose.ui.node.AlignmentLinesOwner alignmentLinesOwner>;

        $r15 = interfaceinvoke $r14.<androidx.compose.ui.node.AlignmentLinesOwner: androidx.compose.ui.node.NodeCoordinator getInnerCoordinator()>();

        $z3 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r12, $r15);

        if $z3 != 0 goto label2;

        $r11 = virtualinvoke r0.<androidx.compose.ui.node.AlignmentLines: java.util.Map getAlignmentLinesMap(androidx.compose.ui.node.NodeCoordinator)>(r12);

        $z2 = interfaceinvoke $r11.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z2 == 0 goto label1;

        i3 = virtualinvoke r0.<androidx.compose.ui.node.AlignmentLines: int getPositionFor(androidx.compose.ui.node.NodeCoordinator,androidx.compose.ui.layout.AlignmentLine)>(r12, r1);

        $f5 = (float) i3;

        $f4 = (float) i3;

        l2 = staticinvoke <androidx.compose.ui.geometry.OffsetKt: long Offset(float,float)>($f5, $f4);

        goto label1;

     label2:
        $z0 = r1 instanceof androidx.compose.ui.layout.HorizontalAlignmentLine;

        if $z0 == 0 goto label3;

        $f3 = staticinvoke <androidx.compose.ui.geometry.Offset: float getY-impl(long)>(l2);

        $i4 = staticinvoke <kotlin.math.MathKt: int roundToInt(float)>($f3);

        goto label4;

     label3:
        $f2 = staticinvoke <androidx.compose.ui.geometry.Offset: float getX-impl(long)>(l2);

        $i4 = staticinvoke <kotlin.math.MathKt: int roundToInt(float)>($f2);

     label4:
        i5 = $i4;

        $r4 = r0.<androidx.compose.ui.node.AlignmentLines: java.util.Map alignmentLineMap>;

        $r3 = r0.<androidx.compose.ui.node.AlignmentLines: java.util.Map alignmentLineMap>;

        $z1 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z1 == 0 goto label5;

        $r7 = r0.<androidx.compose.ui.node.AlignmentLines: java.util.Map alignmentLineMap>;

        $r8 = staticinvoke <kotlin.collections.MapsKt: java.lang.Object getValue(java.util.Map,java.lang.Object)>($r7, r1);

        $r9 = (java.lang.Number) $r8;

        $i1 = virtualinvoke $r9.<java.lang.Number: int intValue()>();

        $i6 = staticinvoke <androidx.compose.ui.layout.AlignmentLineKt: int merge(androidx.compose.ui.layout.AlignmentLine,int,int)>(r1, $i1, i5);

        goto label6;

     label5:
        $i6 = i5;

     label6:
        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r5);

        return;
    }

    public final void recalculate()
    {
        androidx.compose.ui.node.AlignmentLines r0;
        java.util.Map $r1, $r6, $r8;
        androidx.compose.ui.node.AlignmentLines$recalculate$1 $r2;
        androidx.compose.ui.node.AlignmentLinesOwner $r3, $r5;
        kotlin.jvm.functions.Function1 $r4;
        androidx.compose.ui.node.NodeCoordinator $r7;

        r0 := @this: androidx.compose.ui.node.AlignmentLines;

        $r1 = r0.<androidx.compose.ui.node.AlignmentLines: java.util.Map alignmentLineMap>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        $r3 = r0.<androidx.compose.ui.node.AlignmentLines: androidx.compose.ui.node.AlignmentLinesOwner alignmentLinesOwner>;

        $r2 = new androidx.compose.ui.node.AlignmentLines$recalculate$1;

        specialinvoke $r2.<androidx.compose.ui.node.AlignmentLines$recalculate$1: void <init>(androidx.compose.ui.node.AlignmentLines)>(r0);

        $r4 = (kotlin.jvm.functions.Function1) $r2;

        interfaceinvoke $r3.<androidx.compose.ui.node.AlignmentLinesOwner: void forEachChildAlignmentLinesOwner(kotlin.jvm.functions.Function1)>($r4);

        $r6 = r0.<androidx.compose.ui.node.AlignmentLines: java.util.Map alignmentLineMap>;

        $r5 = r0.<androidx.compose.ui.node.AlignmentLines: androidx.compose.ui.node.AlignmentLinesOwner alignmentLinesOwner>;

        $r7 = interfaceinvoke $r5.<androidx.compose.ui.node.AlignmentLinesOwner: androidx.compose.ui.node.NodeCoordinator getInnerCoordinator()>();

        $r8 = virtualinvoke r0.<androidx.compose.ui.node.AlignmentLines: java.util.Map getAlignmentLinesMap(androidx.compose.ui.node.NodeCoordinator)>($r7);

        interfaceinvoke $r6.<java.util.Map: void putAll(java.util.Map)>($r8);

        r0.<androidx.compose.ui.node.AlignmentLines: boolean dirty> = 0;

        return;
    }

    public final void reset$ui_release()
    {
        androidx.compose.ui.node.AlignmentLines r0;

        r0 := @this: androidx.compose.ui.node.AlignmentLines;

        r0.<androidx.compose.ui.node.AlignmentLines: boolean dirty> = 1;

        r0.<androidx.compose.ui.node.AlignmentLines: boolean usedDuringParentMeasurement> = 0;

        r0.<androidx.compose.ui.node.AlignmentLines: boolean previousUsedDuringParentLayout> = 0;

        r0.<androidx.compose.ui.node.AlignmentLines: boolean usedDuringParentLayout> = 0;

        r0.<androidx.compose.ui.node.AlignmentLines: boolean usedByModifierMeasurement> = 0;

        r0.<androidx.compose.ui.node.AlignmentLines: boolean usedByModifierLayout> = 0;

        r0.<androidx.compose.ui.node.AlignmentLines: androidx.compose.ui.node.AlignmentLinesOwner queryOwner> = null;

        return;
    }

    public final void onAlignmentsChanged()
    {
        androidx.compose.ui.node.AlignmentLines r0, $r4;
        androidx.compose.ui.node.AlignmentLinesOwner r1, $r2, $r3, $r5;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: androidx.compose.ui.node.AlignmentLines;

        r0.<androidx.compose.ui.node.AlignmentLines: boolean dirty> = 1;

        $r2 = r0.<androidx.compose.ui.node.AlignmentLines: androidx.compose.ui.node.AlignmentLinesOwner alignmentLinesOwner>;

        $r3 = interfaceinvoke $r2.<androidx.compose.ui.node.AlignmentLinesOwner: androidx.compose.ui.node.AlignmentLinesOwner getParentAlignmentLinesOwner()>();

        if $r3 != null goto label1;

        return;

     label1:
        r1 = $r3;

        $z0 = r0.<androidx.compose.ui.node.AlignmentLines: boolean usedDuringParentMeasurement>;

        if $z0 == 0 goto label2;

        interfaceinvoke r1.<androidx.compose.ui.node.AlignmentLinesOwner: void requestMeasure()>();

        goto label4;

     label2:
        $z1 = r0.<androidx.compose.ui.node.AlignmentLines: boolean previousUsedDuringParentLayout>;

        if $z1 != 0 goto label3;

        $z3 = r0.<androidx.compose.ui.node.AlignmentLines: boolean usedDuringParentLayout>;

        if $z3 == 0 goto label4;

     label3:
        interfaceinvoke r1.<androidx.compose.ui.node.AlignmentLinesOwner: void requestLayout()>();

     label4:
        $z4 = r0.<androidx.compose.ui.node.AlignmentLines: boolean usedByModifierMeasurement>;

        if $z4 == 0 goto label5;

        $r5 = r0.<androidx.compose.ui.node.AlignmentLines: androidx.compose.ui.node.AlignmentLinesOwner alignmentLinesOwner>;

        interfaceinvoke $r5.<androidx.compose.ui.node.AlignmentLinesOwner: void requestMeasure()>();

     label5:
        $z2 = r0.<androidx.compose.ui.node.AlignmentLines: boolean usedByModifierLayout>;

        if $z2 == 0 goto label6;

        interfaceinvoke r1.<androidx.compose.ui.node.AlignmentLinesOwner: void requestLayout()>();

     label6:
        $r4 = interfaceinvoke r1.<androidx.compose.ui.node.AlignmentLinesOwner: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        virtualinvoke $r4.<androidx.compose.ui.node.AlignmentLines: void onAlignmentsChanged()>();

        return;
    }

<androidx.compose.ui.node.AlignmentLines: long calculatePositionInParent-R5De75A(androidx.compose.ui.node.NodeCoordinator,long)>
    public void <init>(androidx.compose.ui.node.AlignmentLinesOwner, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.compose.ui.node.AlignmentLines r0;
        androidx.compose.ui.node.AlignmentLinesOwner r1;
        kotlin.jvm.internal.DefaultConstructorMarker $r2;

        r0 := @this: androidx.compose.ui.node.AlignmentLines;

        r1 := @parameter0: androidx.compose.ui.node.AlignmentLinesOwner;

        $r2 := @parameter1: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.compose.ui.node.AlignmentLines: void <init>(androidx.compose.ui.node.AlignmentLinesOwner)>(r1);

        return;
    }

    public static final java.util.Map access$getAlignmentLineMap$p(androidx.compose.ui.node.AlignmentLines)
    {
        androidx.compose.ui.node.AlignmentLines $r0;
        java.util.Map $r1;

        $r0 := @parameter0: androidx.compose.ui.node.AlignmentLines;

        $r1 = $r0.<androidx.compose.ui.node.AlignmentLines: java.util.Map alignmentLineMap>;

        return $r1;
    }

    public static final void access$addAlignmentLine(androidx.compose.ui.node.AlignmentLines, androidx.compose.ui.layout.AlignmentLine, int, androidx.compose.ui.node.NodeCoordinator)
    {
        androidx.compose.ui.node.AlignmentLines $r0;
        androidx.compose.ui.layout.AlignmentLine r1;
        int i0;
        androidx.compose.ui.node.NodeCoordinator r2;

        $r0 := @parameter0: androidx.compose.ui.node.AlignmentLines;

        r1 := @parameter1: androidx.compose.ui.layout.AlignmentLine;

        i0 := @parameter2: int;

        r2 := @parameter3: androidx.compose.ui.node.NodeCoordinator;

        specialinvoke $r0.<androidx.compose.ui.node.AlignmentLines: void addAlignmentLine(androidx.compose.ui.layout.AlignmentLine,int,androidx.compose.ui.node.NodeCoordinator)>(r1, i0, r2);

        return;
    }

androidx.compose.ui.node.AlignmentLines$recalculate$1
<androidx.compose.ui.node.AlignmentLines$recalculate$1: androidx.compose.ui.node.AlignmentLines this$0>
    void <init>(androidx.compose.ui.node.AlignmentLines)
    {
        androidx.compose.ui.node.AlignmentLines$recalculate$1 r0;
        androidx.compose.ui.node.AlignmentLines $r1;

        r0 := @this: androidx.compose.ui.node.AlignmentLines$recalculate$1;

        $r1 := @parameter0: androidx.compose.ui.node.AlignmentLines;

        r0.<androidx.compose.ui.node.AlignmentLines$recalculate$1: androidx.compose.ui.node.AlignmentLines this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(androidx.compose.ui.node.AlignmentLinesOwner)
    {
        androidx.compose.ui.node.AlignmentLines$recalculate$1 r0;
        androidx.compose.ui.node.AlignmentLinesOwner r1, $r8;
        int i0, $i1;
        boolean $z0, $z1, $z2, $z3, $z4;
        androidx.compose.ui.node.AlignmentLines $r2, $r3, $r7, $r10, $r20, $r27;
        java.util.Set $r4, $r12;
        androidx.compose.ui.node.NodeCoordinator $r5, $r6, $r9, $r13, $r18, $r25;
        java.util.Map $r11, $r19;
        java.lang.Object $r14, $r15, $r16, r29;
        java.lang.Number $r17;
        java.util.Iterator $r21, r28;
        java.util.Map$Entry r22, r23;
        androidx.compose.ui.layout.AlignmentLine r24, $r30;
        java.lang.Iterable $r26;

        r0 := @this: androidx.compose.ui.node.AlignmentLines$recalculate$1;

        r1 := @parameter0: androidx.compose.ui.node.AlignmentLinesOwner;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "childOwner");

        $z0 = interfaceinvoke r1.<androidx.compose.ui.node.AlignmentLinesOwner: boolean isPlaced()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = interfaceinvoke r1.<androidx.compose.ui.node.AlignmentLinesOwner: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        $z1 = virtualinvoke $r2.<androidx.compose.ui.node.AlignmentLines: boolean getDirty$ui_release()>();

        if $z1 == 0 goto label2;

        interfaceinvoke r1.<androidx.compose.ui.node.AlignmentLinesOwner: void layoutChildren()>();

     label2:
        $r3 = interfaceinvoke r1.<androidx.compose.ui.node.AlignmentLinesOwner: androidx.compose.ui.node.AlignmentLines getAlignmentLines()>();

        $r19 = staticinvoke <androidx.compose.ui.node.AlignmentLines: java.util.Map access$getAlignmentLineMap$p(androidx.compose.ui.node.AlignmentLines)>($r3);

        $r20 = r0.<androidx.compose.ui.node.AlignmentLines$recalculate$1: androidx.compose.ui.node.AlignmentLines this$0>;

        $r4 = interfaceinvoke $r19.<java.util.Map: java.util.Set entrySet()>();

        $r21 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z4 = interfaceinvoke $r21.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label4;

        $r14 = interfaceinvoke $r21.<java.util.Iterator: java.lang.Object next()>();

        r22 = (java.util.Map$Entry) $r14;

        r23 = r22;

        $r15 = interfaceinvoke r23.<java.util.Map$Entry: java.lang.Object getKey()>();

        r24 = (androidx.compose.ui.layout.AlignmentLine) $r15;

        $r16 = interfaceinvoke r23.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r17 = (java.lang.Number) $r16;

        i0 = virtualinvoke $r17.<java.lang.Number: int intValue()>();

        $r18 = interfaceinvoke r1.<androidx.compose.ui.node.AlignmentLinesOwner: androidx.compose.ui.node.NodeCoordinator getInnerCoordinator()>();

        staticinvoke <androidx.compose.ui.node.AlignmentLines: void access$addAlignmentLine(androidx.compose.ui.node.AlignmentLines,androidx.compose.ui.layout.AlignmentLine,int,androidx.compose.ui.node.NodeCoordinator)>($r20, r24, i0, $r18);

        goto label3;

     label4:
        $r5 = interfaceinvoke r1.<androidx.compose.ui.node.AlignmentLinesOwner: androidx.compose.ui.node.NodeCoordinator getInnerCoordinator()>();

        $r6 = virtualinvoke $r5.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator getWrappedBy$ui_release()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r6);

        $r25 = $r6;

     label5:
        $r7 = r0.<androidx.compose.ui.node.AlignmentLines$recalculate$1: androidx.compose.ui.node.AlignmentLines this$0>;

        $r8 = virtualinvoke $r7.<androidx.compose.ui.node.AlignmentLines: androidx.compose.ui.node.AlignmentLinesOwner getAlignmentLinesOwner()>();

        $r9 = interfaceinvoke $r8.<androidx.compose.ui.node.AlignmentLinesOwner: androidx.compose.ui.node.NodeCoordinator getInnerCoordinator()>();

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r25, $r9);

        if $z2 != 0 goto label8;

        $r10 = r0.<androidx.compose.ui.node.AlignmentLines$recalculate$1: androidx.compose.ui.node.AlignmentLines this$0>;

        $r11 = virtualinvoke $r10.<androidx.compose.ui.node.AlignmentLines: java.util.Map getAlignmentLinesMap(androidx.compose.ui.node.NodeCoordinator)>($r25);

        $r12 = interfaceinvoke $r11.<java.util.Map: java.util.Set keySet()>();

        $r26 = (java.lang.Iterable) $r12;

        $r27 = r0.<androidx.compose.ui.node.AlignmentLines$recalculate$1: androidx.compose.ui.node.AlignmentLines this$0>;

        r28 = interfaceinvoke $r26.<java.lang.Iterable: java.util.Iterator iterator()>();

     label6:
        $z3 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label7;

        r29 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>();

        $r30 = (androidx.compose.ui.layout.AlignmentLine) r29;

        $i1 = virtualinvoke $r27.<androidx.compose.ui.node.AlignmentLines: int getPositionFor(androidx.compose.ui.node.NodeCoordinator,androidx.compose.ui.layout.AlignmentLine)>($r25, $r30);

        staticinvoke <androidx.compose.ui.node.AlignmentLines: void access$addAlignmentLine(androidx.compose.ui.node.AlignmentLines,androidx.compose.ui.layout.AlignmentLine,int,androidx.compose.ui.node.NodeCoordinator)>($r27, $r30, $i1, $r25);

        goto label6;

     label7:
        $r13 = virtualinvoke $r25.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.NodeCoordinator getWrappedBy$ui_release()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r13);

        $r25 = $r13;

        goto label5;

     label8:
        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.ui.node.AlignmentLines$recalculate$1 r0;
        java.lang.Object r1;
        androidx.compose.ui.node.AlignmentLinesOwner $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.compose.ui.node.AlignmentLines$recalculate$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.ui.node.AlignmentLinesOwner) r1;

        virtualinvoke r0.<androidx.compose.ui.node.AlignmentLines$recalculate$1: void invoke(androidx.compose.ui.node.AlignmentLinesOwner)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

