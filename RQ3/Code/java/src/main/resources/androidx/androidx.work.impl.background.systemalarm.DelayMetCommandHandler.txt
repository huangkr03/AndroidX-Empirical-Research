androidx.work.impl.background.systemalarm.DelayMetCommandHandler
<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: java.lang.String TAG>
<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: int STATE_INITIAL>
<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: int STATE_START_REQUESTED>
<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: int STATE_STOP_REQUESTED>
<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: android.content.Context mContext>
<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: int mStartId>
<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: androidx.work.impl.model.WorkGenerationalId mWorkGenerationalId>
<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher mDispatcher>
<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: androidx.work.impl.constraints.WorkConstraintsTrackerImpl mWorkConstraintsTracker>
<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: java.lang.Object mLock>
<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: int mCurrentState>
<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: java.util.concurrent.Executor mSerialExecutor>
<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: java.util.concurrent.Executor mMainThreadExecutor>
<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: android.os.PowerManager$WakeLock mWakeLock>
<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: boolean mHasConstraints>
<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: androidx.work.impl.StartStopToken mToken>
    void <init>(android.content.Context, int, androidx.work.impl.background.systemalarm.SystemAlarmDispatcher, androidx.work.impl.StartStopToken)
    {
        androidx.work.impl.background.systemalarm.DelayMetCommandHandler r0;
        android.content.Context r1;
        int i0;
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher r2;
        androidx.work.impl.StartStopToken r3;
        androidx.work.impl.constraints.trackers.Trackers r4;
        androidx.work.impl.model.WorkGenerationalId $r5;
        androidx.work.impl.WorkManagerImpl $r6;
        androidx.work.impl.utils.taskexecutor.TaskExecutor $r7, $r9;
        androidx.work.impl.utils.taskexecutor.SerialExecutor $r8;
        java.util.concurrent.Executor $r10;
        androidx.work.impl.constraints.WorkConstraintsTrackerImpl $r11;
        java.lang.Object $r12;

        r0 := @this: androidx.work.impl.background.systemalarm.DelayMetCommandHandler;

        r1 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        r2 := @parameter2: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher;

        r3 := @parameter3: androidx.work.impl.StartStopToken;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: android.content.Context mContext> = r1;

        r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: int mStartId> = i0;

        r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher mDispatcher> = r2;

        $r5 = virtualinvoke r3.<androidx.work.impl.StartStopToken: androidx.work.impl.model.WorkGenerationalId getId()>();

        r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: androidx.work.impl.model.WorkGenerationalId mWorkGenerationalId> = $r5;

        r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: androidx.work.impl.StartStopToken mToken> = r3;

        $r6 = virtualinvoke r2.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: androidx.work.impl.WorkManagerImpl getWorkManager()>();

        r4 = virtualinvoke $r6.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.constraints.trackers.Trackers getTrackers()>();

        $r7 = virtualinvoke r2.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: androidx.work.impl.utils.taskexecutor.TaskExecutor getTaskExecutor()>();

        $r8 = interfaceinvoke $r7.<androidx.work.impl.utils.taskexecutor.TaskExecutor: androidx.work.impl.utils.taskexecutor.SerialExecutor getSerialTaskExecutor()>();

        r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: java.util.concurrent.Executor mSerialExecutor> = $r8;

        $r9 = virtualinvoke r2.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: androidx.work.impl.utils.taskexecutor.TaskExecutor getTaskExecutor()>();

        $r10 = interfaceinvoke $r9.<androidx.work.impl.utils.taskexecutor.TaskExecutor: java.util.concurrent.Executor getMainThreadExecutor()>();

        r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: java.util.concurrent.Executor mMainThreadExecutor> = $r10;

        $r11 = new androidx.work.impl.constraints.WorkConstraintsTrackerImpl;

        specialinvoke $r11.<androidx.work.impl.constraints.WorkConstraintsTrackerImpl: void <init>(androidx.work.impl.constraints.trackers.Trackers,androidx.work.impl.constraints.WorkConstraintsCallback)>(r4, r0);

        r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: androidx.work.impl.constraints.WorkConstraintsTrackerImpl mWorkConstraintsTracker> = $r11;

        r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: boolean mHasConstraints> = 0;

        r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: int mCurrentState> = 0;

        $r12 = new java.lang.Object;

        specialinvoke $r12.<java.lang.Object: void <init>()>();

        r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: java.lang.Object mLock> = $r12;

        return;
    }

    public void onAllConstraintsMet(java.util.List)
    {
        androidx.work.impl.background.systemalarm.DelayMetCommandHandler r0;
        java.util.List r1;
        java.util.Iterator r2;
        androidx.work.impl.model.WorkSpec r3;
        boolean $z0, $z1;
        java.lang.Object $r4;
        androidx.work.impl.model.WorkGenerationalId $r5, $r6;
        java.util.concurrent.Executor $r7;
        java.lang.Runnable $r8;

        r0 := @this: androidx.work.impl.background.systemalarm.DelayMetCommandHandler;

        r1 := @parameter0: java.util.List;

        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.work.impl.model.WorkSpec) $r4;

        $r5 = staticinvoke <androidx.work.impl.model.WorkSpecKt: androidx.work.impl.model.WorkGenerationalId generationalId(androidx.work.impl.model.WorkSpec)>(r3);

        $r6 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: androidx.work.impl.model.WorkGenerationalId mWorkGenerationalId>;

        $z1 = virtualinvoke $r5.<androidx.work.impl.model.WorkGenerationalId: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label2;

        $r7 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: java.util.concurrent.Executor mSerialExecutor>;

        $r8 = dynamicinvoke "run" <java.lang.Runnable (androidx.work.impl.background.systemalarm.DelayMetCommandHandler)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.work.impl.background.systemalarm.DelayMetCommandHandler: void startWork()>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r7.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r8);

        return;

     label2:
        goto label1;

     label3:
        return;
    }

    private void startWork()
    {
        androidx.work.impl.background.systemalarm.DelayMetCommandHandler r0;
        boolean z0;
        int $i0;
        androidx.work.Logger $r1, $r8;
        java.lang.StringBuilder $r2, $r4, $r6, $r9, $r11, $r13;
        java.lang.String $r3, $r7, $r10, $r14;
        androidx.work.impl.model.WorkGenerationalId $r5, $r12, $r20;
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher $r15, $r18;
        androidx.work.impl.Processor $r16;
        androidx.work.impl.StartStopToken $r17;
        androidx.work.impl.utils.WorkTimer $r19;

        r0 := @this: androidx.work.impl.background.systemalarm.DelayMetCommandHandler;

        $i0 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: int mCurrentState>;

        if $i0 != 0 goto label3;

        r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: int mCurrentState> = 1;

        $r8 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r10 = <androidx.work.impl.background.systemalarm.DelayMetCommandHandler: java.lang.String TAG>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("onAllConstraintsMet for ");

        $r12 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: androidx.work.impl.model.WorkGenerationalId mWorkGenerationalId>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r10, $r14);

        $r15 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher mDispatcher>;

        $r16 = virtualinvoke $r15.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: androidx.work.impl.Processor getProcessor()>();

        $r17 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: androidx.work.impl.StartStopToken mToken>;

        z0 = virtualinvoke $r16.<androidx.work.impl.Processor: boolean startWork(androidx.work.impl.StartStopToken)>($r17);

        if z0 == 0 goto label1;

        $r18 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher mDispatcher>;

        $r19 = virtualinvoke $r18.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: androidx.work.impl.utils.WorkTimer getWorkTimer()>();

        $r20 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: androidx.work.impl.model.WorkGenerationalId mWorkGenerationalId>;

        virtualinvoke $r19.<androidx.work.impl.utils.WorkTimer: void startTimer(androidx.work.impl.model.WorkGenerationalId,long,androidx.work.impl.utils.WorkTimer$TimeLimitExceededListener)>($r20, 600000L, r0);

        goto label2;

     label1:
        specialinvoke r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: void cleanUp()>();

     label2:
        goto label4;

     label3:
        $r1 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r3 = <androidx.work.impl.background.systemalarm.DelayMetCommandHandler: java.lang.String TAG>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Already started work for ");

        $r5 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: androidx.work.impl.model.WorkGenerationalId mWorkGenerationalId>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r3, $r7);

     label4:
        return;
    }

    void onExecuted(boolean)
    {
        androidx.work.impl.background.systemalarm.DelayMetCommandHandler r0;
        boolean z0, $z1;
        androidx.work.Logger $r1;
        java.lang.StringBuilder $r2, $r4, $r6, $r7, $r8;
        java.lang.String $r3, $r9;
        androidx.work.impl.model.WorkGenerationalId $r5, $r14;
        android.content.Context $r10, $r15;
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$AddRunnable $r11, $r16;
        int $i0, $i1;
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher $r12, $r17;
        java.util.concurrent.Executor $r13, $r18;
        android.content.Intent r19, r20;

        r0 := @this: androidx.work.impl.background.systemalarm.DelayMetCommandHandler;

        z0 := @parameter0: boolean;

        $r1 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r3 = <androidx.work.impl.background.systemalarm.DelayMetCommandHandler: java.lang.String TAG>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("onExecuted ");

        $r5 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: androidx.work.impl.model.WorkGenerationalId mWorkGenerationalId>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r3, $r9);

        specialinvoke r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: void cleanUp()>();

        if z0 == 0 goto label1;

        $r15 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: android.content.Context mContext>;

        $r14 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: androidx.work.impl.model.WorkGenerationalId mWorkGenerationalId>;

        r19 = staticinvoke <androidx.work.impl.background.systemalarm.CommandHandler: android.content.Intent createScheduleWorkIntent(android.content.Context,androidx.work.impl.model.WorkGenerationalId)>($r15, $r14);

        $r18 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: java.util.concurrent.Executor mMainThreadExecutor>;

        $r16 = new androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$AddRunnable;

        $r17 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher mDispatcher>;

        $i1 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: int mStartId>;

        specialinvoke $r16.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$AddRunnable: void <init>(androidx.work.impl.background.systemalarm.SystemAlarmDispatcher,android.content.Intent,int)>($r17, r19, $i1);

        interfaceinvoke $r18.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r16);

     label1:
        $z1 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: boolean mHasConstraints>;

        if $z1 == 0 goto label2;

        $r10 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: android.content.Context mContext>;

        r20 = staticinvoke <androidx.work.impl.background.systemalarm.CommandHandler: android.content.Intent createConstraintsChangedIntent(android.content.Context)>($r10);

        $r13 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: java.util.concurrent.Executor mMainThreadExecutor>;

        $r11 = new androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$AddRunnable;

        $r12 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher mDispatcher>;

        $i0 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: int mStartId>;

        specialinvoke $r11.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$AddRunnable: void <init>(androidx.work.impl.background.systemalarm.SystemAlarmDispatcher,android.content.Intent,int)>($r12, r20, $i0);

        interfaceinvoke $r13.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r11);

     label2:
        return;
    }

    public void onTimeLimitExceeded(androidx.work.impl.model.WorkGenerationalId)
    {
        androidx.work.impl.background.systemalarm.DelayMetCommandHandler r0;
        androidx.work.impl.model.WorkGenerationalId r1;
        androidx.work.Logger $r2;
        java.lang.StringBuilder $r3, $r5, $r6;
        java.lang.String $r4, $r7;
        java.util.concurrent.Executor $r8;
        java.lang.Runnable $r9;

        r0 := @this: androidx.work.impl.background.systemalarm.DelayMetCommandHandler;

        r1 := @parameter0: androidx.work.impl.model.WorkGenerationalId;

        $r2 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r4 = <androidx.work.impl.background.systemalarm.DelayMetCommandHandler: java.lang.String TAG>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exceeded time limits on execution for ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r4, $r7);

        $r8 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: java.util.concurrent.Executor mSerialExecutor>;

        $r9 = dynamicinvoke "run" <java.lang.Runnable (androidx.work.impl.background.systemalarm.DelayMetCommandHandler)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.work.impl.background.systemalarm.DelayMetCommandHandler: void stopWork()>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r8.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r9);

        return;
    }

    public void onAllConstraintsNotMet(java.util.List)
    {
        androidx.work.impl.background.systemalarm.DelayMetCommandHandler r0;
        java.util.List r1;
        java.util.concurrent.Executor $r2;
        java.lang.Runnable $r3;

        r0 := @this: androidx.work.impl.background.systemalarm.DelayMetCommandHandler;

        r1 := @parameter0: java.util.List;

        $r2 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: java.util.concurrent.Executor mSerialExecutor>;

        $r3 = dynamicinvoke "run" <java.lang.Runnable (androidx.work.impl.background.systemalarm.DelayMetCommandHandler)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.work.impl.background.systemalarm.DelayMetCommandHandler: void stopWork()>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r3);

        return;
    }

    void handleProcessWork()
    {
        androidx.work.impl.background.systemalarm.DelayMetCommandHandler r0;
        java.lang.String r1, $r10, $r14, $r20, $r30, $r33;
        androidx.work.impl.model.WorkSpec r2;
        androidx.work.impl.model.WorkGenerationalId $r3;
        java.lang.StringBuilder $r4, $r6, $r7, $r8, $r9, $r13, $r15, $r17, $r18, $r19, $r29, $r31, $r32;
        android.content.Context $r5;
        int $i0;
        android.os.PowerManager$WakeLock $r11, $r16, $r21;
        androidx.work.Logger $r12, $r28;
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher $r22;
        androidx.work.impl.WorkManagerImpl $r23;
        androidx.work.impl.WorkDatabase $r24;
        androidx.work.impl.model.WorkSpecDao $r25;
        boolean $z0, $z1;
        androidx.work.impl.constraints.WorkConstraintsTrackerImpl $r26;
        java.util.List $r27, $r34;
        java.util.concurrent.Executor $r35;
        java.lang.Runnable $r36;

        r0 := @this: androidx.work.impl.background.systemalarm.DelayMetCommandHandler;

        $r3 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: androidx.work.impl.model.WorkGenerationalId mWorkGenerationalId>;

        r1 = virtualinvoke $r3.<androidx.work.impl.model.WorkGenerationalId: java.lang.String getWorkSpecId()>();

        $r5 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: android.content.Context mContext>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $i0 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: int mStartId>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = staticinvoke <androidx.work.impl.utils.WakeLocks: android.os.PowerManager$WakeLock newWakeLock(android.content.Context,java.lang.String)>($r5, $r10);

        r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: android.os.PowerManager$WakeLock mWakeLock> = $r11;

        $r12 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r14 = <androidx.work.impl.background.systemalarm.DelayMetCommandHandler: java.lang.String TAG>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Acquiring wakelock ");

        $r16 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: android.os.PowerManager$WakeLock mWakeLock>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("for WorkSpec ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r14, $r20);

        $r21 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r21.<android.os.PowerManager$WakeLock: void acquire()>();

        $r22 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher mDispatcher>;

        $r23 = virtualinvoke $r22.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: androidx.work.impl.WorkManagerImpl getWorkManager()>();

        $r24 = virtualinvoke $r23.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.WorkDatabase getWorkDatabase()>();

        $r25 = virtualinvoke $r24.<androidx.work.impl.WorkDatabase: androidx.work.impl.model.WorkSpecDao workSpecDao()>();

        r2 = interfaceinvoke $r25.<androidx.work.impl.model.WorkSpecDao: androidx.work.impl.model.WorkSpec getWorkSpec(java.lang.String)>(r1);

        if r2 != null goto label1;

        $r35 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: java.util.concurrent.Executor mSerialExecutor>;

        $r36 = dynamicinvoke "run" <java.lang.Runnable (androidx.work.impl.background.systemalarm.DelayMetCommandHandler)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.work.impl.background.systemalarm.DelayMetCommandHandler: void stopWork()>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r35.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r36);

        return;

     label1:
        $z0 = virtualinvoke r2.<androidx.work.impl.model.WorkSpec: boolean hasConstraints()>();

        r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: boolean mHasConstraints> = $z0;

        $z1 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: boolean mHasConstraints>;

        if $z1 != 0 goto label2;

        $r28 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r30 = <androidx.work.impl.background.systemalarm.DelayMetCommandHandler: java.lang.String TAG>;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No constraints for ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r28.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r30, $r33);

        $r34 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r2);

        virtualinvoke r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: void onAllConstraintsMet(java.util.List)>($r34);

        goto label3;

     label2:
        $r26 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: androidx.work.impl.constraints.WorkConstraintsTrackerImpl mWorkConstraintsTracker>;

        $r27 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r2);

        virtualinvoke $r26.<androidx.work.impl.constraints.WorkConstraintsTrackerImpl: void replace(java.lang.Iterable)>($r27);

     label3:
        return;
    }

    private void stopWork()
    {
        androidx.work.impl.background.systemalarm.DelayMetCommandHandler r0;
        java.lang.String r1, $r7, $r10, $r13, $r16, $r25, $r28, $r32, $r35, $r39;
        android.content.Intent r2, r3;
        androidx.work.impl.model.WorkGenerationalId $r4, $r17, $r24, $r40;
        int $i0, $i1, $i2;
        androidx.work.Logger $r5, $r11, $r26, $r33;
        java.lang.StringBuilder $r6, $r8, $r9, $r12, $r14, $r15, $r27, $r29, $r30, $r31, $r34, $r36, $r37, $r38;
        android.content.Context $r18, $r41;
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$AddRunnable $r19, $r42;
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher $r20, $r22, $r43;
        java.util.concurrent.Executor $r21, $r44;
        androidx.work.impl.Processor $r23;
        boolean $z0;

        r0 := @this: androidx.work.impl.background.systemalarm.DelayMetCommandHandler;

        $r4 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: androidx.work.impl.model.WorkGenerationalId mWorkGenerationalId>;

        r1 = virtualinvoke $r4.<androidx.work.impl.model.WorkGenerationalId: java.lang.String getWorkSpecId()>();

        $i0 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: int mCurrentState>;

        if $i0 >= 2 goto label3;

        r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: int mCurrentState> = 2;

        $r11 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r13 = <androidx.work.impl.background.systemalarm.DelayMetCommandHandler: java.lang.String TAG>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Stopping work for WorkSpec ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r13, $r16);

        $r18 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: android.content.Context mContext>;

        $r17 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: androidx.work.impl.model.WorkGenerationalId mWorkGenerationalId>;

        r2 = staticinvoke <androidx.work.impl.background.systemalarm.CommandHandler: android.content.Intent createStopWorkIntent(android.content.Context,androidx.work.impl.model.WorkGenerationalId)>($r18, $r17);

        $r21 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: java.util.concurrent.Executor mMainThreadExecutor>;

        $r19 = new androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$AddRunnable;

        $r20 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher mDispatcher>;

        $i1 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: int mStartId>;

        specialinvoke $r19.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$AddRunnable: void <init>(androidx.work.impl.background.systemalarm.SystemAlarmDispatcher,android.content.Intent,int)>($r20, r2, $i1);

        interfaceinvoke $r21.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r19);

        $r22 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher mDispatcher>;

        $r23 = virtualinvoke $r22.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: androidx.work.impl.Processor getProcessor()>();

        $r24 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: androidx.work.impl.model.WorkGenerationalId mWorkGenerationalId>;

        $r25 = virtualinvoke $r24.<androidx.work.impl.model.WorkGenerationalId: java.lang.String getWorkSpecId()>();

        $z0 = virtualinvoke $r23.<androidx.work.impl.Processor: boolean isEnqueued(java.lang.String)>($r25);

        if $z0 == 0 goto label1;

        $r33 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r35 = <androidx.work.impl.background.systemalarm.DelayMetCommandHandler: java.lang.String TAG>;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WorkSpec ");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" needs to be rescheduled");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r33.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r35, $r39);

        $r41 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: android.content.Context mContext>;

        $r40 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: androidx.work.impl.model.WorkGenerationalId mWorkGenerationalId>;

        r3 = staticinvoke <androidx.work.impl.background.systemalarm.CommandHandler: android.content.Intent createScheduleWorkIntent(android.content.Context,androidx.work.impl.model.WorkGenerationalId)>($r41, $r40);

        $r44 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: java.util.concurrent.Executor mMainThreadExecutor>;

        $r42 = new androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$AddRunnable;

        $r43 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher mDispatcher>;

        $i2 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: int mStartId>;

        specialinvoke $r42.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$AddRunnable: void <init>(androidx.work.impl.background.systemalarm.SystemAlarmDispatcher,android.content.Intent,int)>($r43, r3, $i2);

        interfaceinvoke $r44.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r42);

        goto label2;

     label1:
        $r26 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r28 = <androidx.work.impl.background.systemalarm.DelayMetCommandHandler: java.lang.String TAG>;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Processor does not have WorkSpec ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". No need to reschedule");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r26.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r28, $r32);

     label2:
        goto label4;

     label3:
        $r5 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r7 = <androidx.work.impl.background.systemalarm.DelayMetCommandHandler: java.lang.String TAG>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Already stopped work for ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r7, $r10);

     label4:
        return;
    }

    private void cleanUp()
    {
        androidx.work.impl.background.systemalarm.DelayMetCommandHandler r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r21;
        androidx.work.impl.constraints.WorkConstraintsTrackerImpl $r4;
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher $r5;
        androidx.work.impl.utils.WorkTimer $r6;
        androidx.work.impl.model.WorkGenerationalId $r7, $r17;
        android.os.PowerManager$WakeLock $r8, $r9, $r14, $r20;
        boolean $z0;
        androidx.work.Logger $r10;
        java.lang.StringBuilder $r11, $r13, $r15, $r16, $r18;
        java.lang.String $r12, $r19;

        r0 := @this: androidx.work.impl.background.systemalarm.DelayMetCommandHandler;

        $r3 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: androidx.work.impl.constraints.WorkConstraintsTrackerImpl mWorkConstraintsTracker>;

        virtualinvoke $r4.<androidx.work.impl.constraints.WorkConstraintsTrackerImpl: void reset()>();

        $r5 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: androidx.work.impl.background.systemalarm.SystemAlarmDispatcher mDispatcher>;

        $r6 = virtualinvoke $r5.<androidx.work.impl.background.systemalarm.SystemAlarmDispatcher: androidx.work.impl.utils.WorkTimer getWorkTimer()>();

        $r7 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: androidx.work.impl.model.WorkGenerationalId mWorkGenerationalId>;

        virtualinvoke $r6.<androidx.work.impl.utils.WorkTimer: void stopTimer(androidx.work.impl.model.WorkGenerationalId)>($r7);

        $r8 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: android.os.PowerManager$WakeLock mWakeLock>;

        if $r8 == null goto label2;

        $r9 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: android.os.PowerManager$WakeLock mWakeLock>;

        $z0 = virtualinvoke $r9.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if $z0 == 0 goto label2;

        $r10 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r12 = <androidx.work.impl.background.systemalarm.DelayMetCommandHandler: java.lang.String TAG>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Releasing wakelock ");

        $r14 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: android.os.PowerManager$WakeLock mWakeLock>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("for WorkSpec ");

        $r17 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: androidx.work.impl.model.WorkGenerationalId mWorkGenerationalId>;

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r12, $r19);

        $r20 = r0.<androidx.work.impl.background.systemalarm.DelayMetCommandHandler: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r20.<android.os.PowerManager$WakeLock: void release()>();

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r21 := @caughtexception;

        r2 = $r21;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    static void <clinit>()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <androidx.work.Logger: java.lang.String tagWithPrefix(java.lang.String)>("DelayMetCommandHandler");

        <androidx.work.impl.background.systemalarm.DelayMetCommandHandler: java.lang.String TAG> = $r0;

        return;
    }

