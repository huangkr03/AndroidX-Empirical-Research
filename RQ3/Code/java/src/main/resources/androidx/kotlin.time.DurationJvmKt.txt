kotlin.time.DurationJvmKt
<kotlin.time.DurationJvmKt: boolean durationAssertionsEnabled>
<kotlin.time.DurationJvmKt: java.lang.ThreadLocal[] precisionFormats>
    static void <clinit>()
    {
        java.lang.ThreadLocal[] $r0;
        java.lang.ThreadLocal $r1;
        int $i0;

        $i0 = 0;

        <kotlin.time.DurationJvmKt: boolean durationAssertionsEnabled> = 0;

        $r0 = newarray (java.lang.ThreadLocal)[4];

     label1:
        if $i0 >= 4 goto label2;

        $r1 = new java.lang.ThreadLocal;

        specialinvoke $r1.<java.lang.ThreadLocal: void <init>()>();

        $r0[$i0] = $r1;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        <kotlin.time.DurationJvmKt: java.lang.ThreadLocal[] precisionFormats> = $r0;

        return;
    }

    private static final java.text.DecimalFormat createFormatForDecimals(int)
    {
        java.text.DecimalFormat $r0;
        int $i0;
        java.math.RoundingMode $r1;

        $i0 := @parameter0: int;

        $r0 = new java.text.DecimalFormat;

        specialinvoke $r0.<java.text.DecimalFormat: void <init>(java.lang.String)>("0");

        if $i0 <= 0 goto label1;

        virtualinvoke $r0.<java.text.DecimalFormat: void setMinimumFractionDigits(int)>($i0);

     label1:
        $r1 = <java.math.RoundingMode: java.math.RoundingMode HALF_UP>;

        virtualinvoke $r0.<java.text.DecimalFormat: void setRoundingMode(java.math.RoundingMode)>($r1);

        return $r0;
    }

    public static final java.lang.String formatToExactDecimals(double, int)
    {
        double $d0;
        int $i0, $i1;
        java.lang.ThreadLocal[] $r0;
        java.lang.ThreadLocal $r1;
        java.lang.Object $r2, $r3;
        java.text.DecimalFormat $r4;
        java.lang.String $r5;

        $d0 := @parameter0: double;

        $i0 := @parameter1: int;

        $r0 = <kotlin.time.DurationJvmKt: java.lang.ThreadLocal[] precisionFormats>;

        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label3;

        $r1 = $r0[$i0];

        $r2 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r3 = $r2;

        if $r2 != null goto label1;

        $r4 = staticinvoke <kotlin.time.DurationJvmKt: java.text.DecimalFormat createFormatForDecimals(int)>($i0);

        $r3 = $r4;

        virtualinvoke $r1.<java.lang.ThreadLocal: void set(java.lang.Object)>($r4);

        goto label2;

     label1:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "get() ?: default().also(this::set)");

     label2:
        $r4 = (java.text.DecimalFormat) $r3;

        goto label4;

     label3:
        $r4 = staticinvoke <kotlin.time.DurationJvmKt: java.text.DecimalFormat createFormatForDecimals(int)>($i0);

     label4:
        $r5 = virtualinvoke $r4.<java.text.DecimalFormat: java.lang.String format(double)>($d0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "format.format(value)");

        return $r5;
    }

    public static final java.lang.String formatUpToDecimals(double, int)
    {
        int $i0;
        double $d0;
        java.text.DecimalFormat $r0;
        java.lang.String $r1;

        $d0 := @parameter0: double;

        $i0 := @parameter1: int;

        $r0 = staticinvoke <kotlin.time.DurationJvmKt: java.text.DecimalFormat createFormatForDecimals(int)>(0);

        virtualinvoke $r0.<java.text.DecimalFormat: void setMaximumFractionDigits(int)>($i0);

        $r1 = virtualinvoke $r0.<java.text.DecimalFormat: java.lang.String format(double)>($d0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "createFormatForDecimals(\u2026 }\n        .format(value)");

        return $r1;
    }

    public static final boolean getDurationAssertionsEnabled()
    {
        boolean z0;

        z0 = <kotlin.time.DurationJvmKt: boolean durationAssertionsEnabled>;

        return z0;
    }

