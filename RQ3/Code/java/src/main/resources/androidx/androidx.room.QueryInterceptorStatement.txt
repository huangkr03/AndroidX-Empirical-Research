androidx.room.QueryInterceptorStatement
<androidx.room.QueryInterceptorStatement: androidx.sqlite.db.SupportSQLiteStatement delegate>
<androidx.room.QueryInterceptorStatement: java.lang.String sqlStatement>
<androidx.room.QueryInterceptorStatement: java.util.concurrent.Executor queryCallbackExecutor>
<androidx.room.QueryInterceptorStatement: androidx.room.RoomDatabase$QueryCallback queryCallback>
<androidx.room.QueryInterceptorStatement: java.util.List bindArgsCache>
    public void <init>(androidx.sqlite.db.SupportSQLiteStatement, java.lang.String, java.util.concurrent.Executor, androidx.room.RoomDatabase$QueryCallback)
    {
        androidx.room.QueryInterceptorStatement r0;
        androidx.sqlite.db.SupportSQLiteStatement r1;
        java.lang.String r2;
        java.util.concurrent.Executor r3;
        androidx.room.RoomDatabase$QueryCallback r4;
        java.util.ArrayList $r5;
        java.util.List $r6;

        r0 := @this: androidx.room.QueryInterceptorStatement;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteStatement;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.concurrent.Executor;

        r4 := @parameter3: androidx.room.RoomDatabase$QueryCallback;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "delegate");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "sqlStatement");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "queryCallbackExecutor");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "queryCallback");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.room.QueryInterceptorStatement: androidx.sqlite.db.SupportSQLiteStatement delegate> = r1;

        r0.<androidx.room.QueryInterceptorStatement: java.lang.String sqlStatement> = r2;

        r0.<androidx.room.QueryInterceptorStatement: java.util.concurrent.Executor queryCallbackExecutor> = r3;

        r0.<androidx.room.QueryInterceptorStatement: androidx.room.RoomDatabase$QueryCallback queryCallback> = r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = (java.util.List) $r5;

        r0.<androidx.room.QueryInterceptorStatement: java.util.List bindArgsCache> = $r6;

        return;
    }

    public void close()
    {
        androidx.room.QueryInterceptorStatement r0;
        androidx.sqlite.db.SupportSQLiteStatement $r1;

        r0 := @this: androidx.room.QueryInterceptorStatement;

        $r1 = r0.<androidx.room.QueryInterceptorStatement: androidx.sqlite.db.SupportSQLiteStatement delegate>;

        interfaceinvoke $r1.<androidx.sqlite.db.SupportSQLiteStatement: void close()>();

        return;
    }

    public void execute()
    {
        androidx.room.QueryInterceptorStatement r0;
        java.util.concurrent.Executor $r1;
        java.lang.Runnable $r2;
        androidx.sqlite.db.SupportSQLiteStatement $r3;

        r0 := @this: androidx.room.QueryInterceptorStatement;

        $r1 = r0.<androidx.room.QueryInterceptorStatement: java.util.concurrent.Executor queryCallbackExecutor>;

        $r2 = dynamicinvoke "run" <java.lang.Runnable (androidx.room.QueryInterceptorStatement)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.room.QueryInterceptorStatement: void execute$lambda$0(androidx.room.QueryInterceptorStatement)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r2);

        $r3 = r0.<androidx.room.QueryInterceptorStatement: androidx.sqlite.db.SupportSQLiteStatement delegate>;

        interfaceinvoke $r3.<androidx.sqlite.db.SupportSQLiteStatement: void execute()>();

        return;
    }

    public int executeUpdateDelete()
    {
        androidx.room.QueryInterceptorStatement r0;
        java.util.concurrent.Executor $r1;
        java.lang.Runnable $r2;
        androidx.sqlite.db.SupportSQLiteStatement $r3;
        int $i0;

        r0 := @this: androidx.room.QueryInterceptorStatement;

        $r1 = r0.<androidx.room.QueryInterceptorStatement: java.util.concurrent.Executor queryCallbackExecutor>;

        $r2 = dynamicinvoke "run" <java.lang.Runnable (androidx.room.QueryInterceptorStatement)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.room.QueryInterceptorStatement: void executeUpdateDelete$lambda$1(androidx.room.QueryInterceptorStatement)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r2);

        $r3 = r0.<androidx.room.QueryInterceptorStatement: androidx.sqlite.db.SupportSQLiteStatement delegate>;

        $i0 = interfaceinvoke $r3.<androidx.sqlite.db.SupportSQLiteStatement: int executeUpdateDelete()>();

        return $i0;
    }

    public long executeInsert()
    {
        androidx.room.QueryInterceptorStatement r0;
        java.util.concurrent.Executor $r1;
        java.lang.Runnable $r2;
        androidx.sqlite.db.SupportSQLiteStatement $r3;
        long $l0;

        r0 := @this: androidx.room.QueryInterceptorStatement;

        $r1 = r0.<androidx.room.QueryInterceptorStatement: java.util.concurrent.Executor queryCallbackExecutor>;

        $r2 = dynamicinvoke "run" <java.lang.Runnable (androidx.room.QueryInterceptorStatement)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.room.QueryInterceptorStatement: void executeInsert$lambda$2(androidx.room.QueryInterceptorStatement)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r2);

        $r3 = r0.<androidx.room.QueryInterceptorStatement: androidx.sqlite.db.SupportSQLiteStatement delegate>;

        $l0 = interfaceinvoke $r3.<androidx.sqlite.db.SupportSQLiteStatement: long executeInsert()>();

        return $l0;
    }

    public long simpleQueryForLong()
    {
        androidx.room.QueryInterceptorStatement r0;
        java.util.concurrent.Executor $r1;
        java.lang.Runnable $r2;
        androidx.sqlite.db.SupportSQLiteStatement $r3;
        long $l0;

        r0 := @this: androidx.room.QueryInterceptorStatement;

        $r1 = r0.<androidx.room.QueryInterceptorStatement: java.util.concurrent.Executor queryCallbackExecutor>;

        $r2 = dynamicinvoke "run" <java.lang.Runnable (androidx.room.QueryInterceptorStatement)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.room.QueryInterceptorStatement: void simpleQueryForLong$lambda$3(androidx.room.QueryInterceptorStatement)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r2);

        $r3 = r0.<androidx.room.QueryInterceptorStatement: androidx.sqlite.db.SupportSQLiteStatement delegate>;

        $l0 = interfaceinvoke $r3.<androidx.sqlite.db.SupportSQLiteStatement: long simpleQueryForLong()>();

        return $l0;
    }

    public java.lang.String simpleQueryForString()
    {
        androidx.room.QueryInterceptorStatement r0;
        java.util.concurrent.Executor $r1;
        java.lang.Runnable $r2;
        androidx.sqlite.db.SupportSQLiteStatement $r3;
        java.lang.String $r4;

        r0 := @this: androidx.room.QueryInterceptorStatement;

        $r1 = r0.<androidx.room.QueryInterceptorStatement: java.util.concurrent.Executor queryCallbackExecutor>;

        $r2 = dynamicinvoke "run" <java.lang.Runnable (androidx.room.QueryInterceptorStatement)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.room.QueryInterceptorStatement: void simpleQueryForString$lambda$4(androidx.room.QueryInterceptorStatement)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r2);

        $r3 = r0.<androidx.room.QueryInterceptorStatement: androidx.sqlite.db.SupportSQLiteStatement delegate>;

        $r4 = interfaceinvoke $r3.<androidx.sqlite.db.SupportSQLiteStatement: java.lang.String simpleQueryForString()>();

        return $r4;
    }

    public void bindNull(int)
    {
        androidx.room.QueryInterceptorStatement r0;
        int i0, $i1;
        java.lang.Object[] r1, $r4, $r5, $r6;
        java.util.Collection r2;
        java.util.List $r3;
        androidx.sqlite.db.SupportSQLiteStatement $r7;

        r0 := @this: androidx.room.QueryInterceptorStatement;

        i0 := @parameter0: int;

        $r3 = r0.<androidx.room.QueryInterceptorStatement: java.util.List bindArgsCache>;

        r2 = (java.util.Collection) $r3;

        $r4 = newarray (java.lang.Object)[0];

        $r5 = interfaceinvoke r2.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r5, "null cannot be cast to non-null type kotlin.Array<T of kotlin.collections.ArraysKt__ArraysJVMKt.toTypedArray>");

        r1 = $r5;

        $i1 = lengthof r1;

        $r6 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r1, $i1);

        specialinvoke r0.<androidx.room.QueryInterceptorStatement: void saveArgsToCache(int,java.lang.Object)>(i0, $r6);

        $r7 = r0.<androidx.room.QueryInterceptorStatement: androidx.sqlite.db.SupportSQLiteStatement delegate>;

        interfaceinvoke $r7.<androidx.sqlite.db.SupportSQLiteStatement: void bindNull(int)>(i0);

        return;
    }

    public void bindLong(int, long)
    {
        androidx.room.QueryInterceptorStatement r0;
        int i0;
        long l1;
        java.lang.Long $r1;
        androidx.sqlite.db.SupportSQLiteStatement $r2;

        r0 := @this: androidx.room.QueryInterceptorStatement;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        specialinvoke r0.<androidx.room.QueryInterceptorStatement: void saveArgsToCache(int,java.lang.Object)>(i0, $r1);

        $r2 = r0.<androidx.room.QueryInterceptorStatement: androidx.sqlite.db.SupportSQLiteStatement delegate>;

        interfaceinvoke $r2.<androidx.sqlite.db.SupportSQLiteStatement: void bindLong(int,long)>(i0, l1);

        return;
    }

    public void bindDouble(int, double)
    {
        androidx.room.QueryInterceptorStatement r0;
        int i0;
        double d0;
        java.lang.Double $r1;
        androidx.sqlite.db.SupportSQLiteStatement $r2;

        r0 := @this: androidx.room.QueryInterceptorStatement;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        specialinvoke r0.<androidx.room.QueryInterceptorStatement: void saveArgsToCache(int,java.lang.Object)>(i0, $r1);

        $r2 = r0.<androidx.room.QueryInterceptorStatement: androidx.sqlite.db.SupportSQLiteStatement delegate>;

        interfaceinvoke $r2.<androidx.sqlite.db.SupportSQLiteStatement: void bindDouble(int,double)>(i0, d0);

        return;
    }

    public void bindString(int, java.lang.String)
    {
        androidx.room.QueryInterceptorStatement r0;
        int i0;
        java.lang.String r1;
        androidx.sqlite.db.SupportSQLiteStatement $r2;

        r0 := @this: androidx.room.QueryInterceptorStatement;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "value");

        specialinvoke r0.<androidx.room.QueryInterceptorStatement: void saveArgsToCache(int,java.lang.Object)>(i0, r1);

        $r2 = r0.<androidx.room.QueryInterceptorStatement: androidx.sqlite.db.SupportSQLiteStatement delegate>;

        interfaceinvoke $r2.<androidx.sqlite.db.SupportSQLiteStatement: void bindString(int,java.lang.String)>(i0, r1);

        return;
    }

    public void bindBlob(int, byte[])
    {
        androidx.room.QueryInterceptorStatement r0;
        int i0;
        byte[] r1;
        androidx.sqlite.db.SupportSQLiteStatement $r2;

        r0 := @this: androidx.room.QueryInterceptorStatement;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "value");

        specialinvoke r0.<androidx.room.QueryInterceptorStatement: void saveArgsToCache(int,java.lang.Object)>(i0, r1);

        $r2 = r0.<androidx.room.QueryInterceptorStatement: androidx.sqlite.db.SupportSQLiteStatement delegate>;

        interfaceinvoke $r2.<androidx.sqlite.db.SupportSQLiteStatement: void bindBlob(int,byte[])>(i0, r1);

        return;
    }

    public void clearBindings()
    {
        androidx.room.QueryInterceptorStatement r0;
        java.util.List $r1;
        androidx.sqlite.db.SupportSQLiteStatement $r2;

        r0 := @this: androidx.room.QueryInterceptorStatement;

        $r1 = r0.<androidx.room.QueryInterceptorStatement: java.util.List bindArgsCache>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        $r2 = r0.<androidx.room.QueryInterceptorStatement: androidx.sqlite.db.SupportSQLiteStatement delegate>;

        interfaceinvoke $r2.<androidx.sqlite.db.SupportSQLiteStatement: void clearBindings()>();

        return;
    }

    private final void saveArgsToCache(int, java.lang.Object)
    {
        androidx.room.QueryInterceptorStatement r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, i7;
        java.lang.Object r1;
        java.util.List $r2, $r3, $r5, $r6;

        r0 := @this: androidx.room.QueryInterceptorStatement;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        i1 = i0 - 1;

        $r2 = r0.<androidx.room.QueryInterceptorStatement: java.util.List bindArgsCache>;

        $i4 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i1 < $i4 goto label2;

        $r5 = r0.<androidx.room.QueryInterceptorStatement: java.util.List bindArgsCache>;

        $i5 = interfaceinvoke $r5.<java.util.List: int size()>();

        $i6 = i1 - $i5;

        i2 = $i6 + 1;

        i7 = 0;

     label1:
        if i7 >= i2 goto label2;

        i3 = i7;

        $r6 = r0.<androidx.room.QueryInterceptorStatement: java.util.List bindArgsCache>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(null);

        i7 = i7 + 1;

        goto label1;

     label2:
        $r3 = r0.<androidx.room.QueryInterceptorStatement: java.util.List bindArgsCache>;

        interfaceinvoke $r3.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i1, r1);

        return;
    }

    private static final void execute$lambda$0(androidx.room.QueryInterceptorStatement)
    {
        androidx.room.QueryInterceptorStatement r0;
        java.util.List $r1;
        java.lang.String $r2;
        androidx.room.RoomDatabase$QueryCallback $r3;

        r0 := @parameter0: androidx.room.QueryInterceptorStatement;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        $r3 = r0.<androidx.room.QueryInterceptorStatement: androidx.room.RoomDatabase$QueryCallback queryCallback>;

        $r2 = r0.<androidx.room.QueryInterceptorStatement: java.lang.String sqlStatement>;

        $r1 = r0.<androidx.room.QueryInterceptorStatement: java.util.List bindArgsCache>;

        interfaceinvoke $r3.<androidx.room.RoomDatabase$QueryCallback: void onQuery(java.lang.String,java.util.List)>($r2, $r1);

        return;
    }

    private static final void executeUpdateDelete$lambda$1(androidx.room.QueryInterceptorStatement)
    {
        androidx.room.QueryInterceptorStatement r0;
        java.util.List $r1;
        java.lang.String $r2;
        androidx.room.RoomDatabase$QueryCallback $r3;

        r0 := @parameter0: androidx.room.QueryInterceptorStatement;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        $r3 = r0.<androidx.room.QueryInterceptorStatement: androidx.room.RoomDatabase$QueryCallback queryCallback>;

        $r2 = r0.<androidx.room.QueryInterceptorStatement: java.lang.String sqlStatement>;

        $r1 = r0.<androidx.room.QueryInterceptorStatement: java.util.List bindArgsCache>;

        interfaceinvoke $r3.<androidx.room.RoomDatabase$QueryCallback: void onQuery(java.lang.String,java.util.List)>($r2, $r1);

        return;
    }

    private static final void executeInsert$lambda$2(androidx.room.QueryInterceptorStatement)
    {
        androidx.room.QueryInterceptorStatement r0;
        java.util.List $r1;
        java.lang.String $r2;
        androidx.room.RoomDatabase$QueryCallback $r3;

        r0 := @parameter0: androidx.room.QueryInterceptorStatement;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        $r3 = r0.<androidx.room.QueryInterceptorStatement: androidx.room.RoomDatabase$QueryCallback queryCallback>;

        $r2 = r0.<androidx.room.QueryInterceptorStatement: java.lang.String sqlStatement>;

        $r1 = r0.<androidx.room.QueryInterceptorStatement: java.util.List bindArgsCache>;

        interfaceinvoke $r3.<androidx.room.RoomDatabase$QueryCallback: void onQuery(java.lang.String,java.util.List)>($r2, $r1);

        return;
    }

    private static final void simpleQueryForLong$lambda$3(androidx.room.QueryInterceptorStatement)
    {
        androidx.room.QueryInterceptorStatement r0;
        java.util.List $r1;
        java.lang.String $r2;
        androidx.room.RoomDatabase$QueryCallback $r3;

        r0 := @parameter0: androidx.room.QueryInterceptorStatement;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        $r3 = r0.<androidx.room.QueryInterceptorStatement: androidx.room.RoomDatabase$QueryCallback queryCallback>;

        $r2 = r0.<androidx.room.QueryInterceptorStatement: java.lang.String sqlStatement>;

        $r1 = r0.<androidx.room.QueryInterceptorStatement: java.util.List bindArgsCache>;

        interfaceinvoke $r3.<androidx.room.RoomDatabase$QueryCallback: void onQuery(java.lang.String,java.util.List)>($r2, $r1);

        return;
    }

    private static final void simpleQueryForString$lambda$4(androidx.room.QueryInterceptorStatement)
    {
        androidx.room.QueryInterceptorStatement r0;
        java.util.List $r1;
        java.lang.String $r2;
        androidx.room.RoomDatabase$QueryCallback $r3;

        r0 := @parameter0: androidx.room.QueryInterceptorStatement;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        $r3 = r0.<androidx.room.QueryInterceptorStatement: androidx.room.RoomDatabase$QueryCallback queryCallback>;

        $r2 = r0.<androidx.room.QueryInterceptorStatement: java.lang.String sqlStatement>;

        $r1 = r0.<androidx.room.QueryInterceptorStatement: java.util.List bindArgsCache>;

        interfaceinvoke $r3.<androidx.room.RoomDatabase$QueryCallback: void onQuery(java.lang.String,java.util.List)>($r2, $r1);

        return;
    }

