androidx.camera.camera2.internal.compat.workaround.ForceCloseCaptureSession
<androidx.camera.camera2.internal.compat.workaround.ForceCloseCaptureSession: androidx.camera.camera2.internal.compat.quirk.CaptureSessionOnClosedNotCalledQuirk mCaptureSessionOnClosedNotCalledQuirk>
    public void <init>(androidx.camera.core.impl.Quirks)
    {
        androidx.camera.camera2.internal.compat.workaround.ForceCloseCaptureSession r0;
        androidx.camera.core.impl.Quirks r1;
        androidx.camera.core.impl.Quirk $r2;
        androidx.camera.camera2.internal.compat.quirk.CaptureSessionOnClosedNotCalledQuirk $r3;

        r0 := @this: androidx.camera.camera2.internal.compat.workaround.ForceCloseCaptureSession;

        r1 := @parameter0: androidx.camera.core.impl.Quirks;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke r1.<androidx.camera.core.impl.Quirks: androidx.camera.core.impl.Quirk get(java.lang.Class)>(class "Landroidx/camera/camera2/internal/compat/quirk/CaptureSessionOnClosedNotCalledQuirk;");

        $r3 = (androidx.camera.camera2.internal.compat.quirk.CaptureSessionOnClosedNotCalledQuirk) $r2;

        r0.<androidx.camera.camera2.internal.compat.workaround.ForceCloseCaptureSession: androidx.camera.camera2.internal.compat.quirk.CaptureSessionOnClosedNotCalledQuirk mCaptureSessionOnClosedNotCalledQuirk> = $r3;

        return;
    }

    public boolean shouldForceClose()
    {
        androidx.camera.camera2.internal.compat.workaround.ForceCloseCaptureSession r0;
        androidx.camera.camera2.internal.compat.quirk.CaptureSessionOnClosedNotCalledQuirk $r1;
        boolean $z0;

        r0 := @this: androidx.camera.camera2.internal.compat.workaround.ForceCloseCaptureSession;

        $r1 = r0.<androidx.camera.camera2.internal.compat.workaround.ForceCloseCaptureSession: androidx.camera.camera2.internal.compat.quirk.CaptureSessionOnClosedNotCalledQuirk mCaptureSessionOnClosedNotCalledQuirk>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void onSessionConfigured(androidx.camera.camera2.internal.SynchronizedCaptureSession, java.util.List, java.util.List, androidx.camera.camera2.internal.compat.workaround.ForceCloseCaptureSession$OnConfigured)
    {
        androidx.camera.camera2.internal.compat.workaround.ForceCloseCaptureSession r0;
        androidx.camera.camera2.internal.SynchronizedCaptureSession r1, r11, r14;
        java.util.List r2, r3;
        androidx.camera.camera2.internal.compat.workaround.ForceCloseCaptureSession$OnConfigured r4;
        boolean $z0, $z1, $z3, $z5;
        java.util.LinkedHashSet $r5, $r7, r9, r12;
        java.lang.Object $r6, $r8;
        java.util.Iterator r10, r13;

        r0 := @this: androidx.camera.camera2.internal.compat.workaround.ForceCloseCaptureSession;

        r1 := @parameter0: androidx.camera.camera2.internal.SynchronizedCaptureSession;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: java.util.List;

        r4 := @parameter3: androidx.camera.camera2.internal.compat.workaround.ForceCloseCaptureSession$OnConfigured;

        $z0 = virtualinvoke r0.<androidx.camera.camera2.internal.compat.workaround.ForceCloseCaptureSession: boolean shouldForceClose()>();

        if $z0 == 0 goto label4;

        $r7 = new java.util.LinkedHashSet;

        specialinvoke $r7.<java.util.LinkedHashSet: void <init>()>();

        r9 = $r7;

        r10 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label3;

        $r8 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r11 = (androidx.camera.camera2.internal.SynchronizedCaptureSession) $r8;

        if r11 != r1 goto label2;

        goto label3;

     label2:
        interfaceinvoke r9.<java.util.Set: boolean add(java.lang.Object)>(r11);

        goto label1;

     label3:
        specialinvoke r0.<androidx.camera.camera2.internal.compat.workaround.ForceCloseCaptureSession: void forceOnConfigureFailed(java.util.Set)>(r9);

     label4:
        interfaceinvoke r4.<androidx.camera.camera2.internal.compat.workaround.ForceCloseCaptureSession$OnConfigured: void run(androidx.camera.camera2.internal.SynchronizedCaptureSession)>(r1);

        $z5 = virtualinvoke r0.<androidx.camera.camera2.internal.compat.workaround.ForceCloseCaptureSession: boolean shouldForceClose()>();

        if $z5 == 0 goto label8;

        $r5 = new java.util.LinkedHashSet;

        specialinvoke $r5.<java.util.LinkedHashSet: void <init>()>();

        r12 = $r5;

        r13 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r6 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        r14 = (androidx.camera.camera2.internal.SynchronizedCaptureSession) $r6;

        if r14 != r1 goto label6;

        goto label7;

     label6:
        interfaceinvoke r12.<java.util.Set: boolean add(java.lang.Object)>(r14);

        goto label5;

     label7:
        specialinvoke r0.<androidx.camera.camera2.internal.compat.workaround.ForceCloseCaptureSession: void forceOnClosed(java.util.Set)>(r12);

     label8:
        return;
    }

    private void forceOnConfigureFailed(java.util.Set)
    {
        androidx.camera.camera2.internal.compat.workaround.ForceCloseCaptureSession r0;
        java.util.Set r1;
        java.util.Iterator r2;
        androidx.camera.camera2.internal.SynchronizedCaptureSession r3;
        boolean $z0;
        java.lang.Object $r4;
        androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback $r5;

        r0 := @this: androidx.camera.camera2.internal.compat.workaround.ForceCloseCaptureSession;

        r1 := @parameter0: java.util.Set;

        r2 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.camera.camera2.internal.SynchronizedCaptureSession) $r4;

        $r5 = interfaceinvoke r3.<androidx.camera.camera2.internal.SynchronizedCaptureSession: androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback getStateCallback()>();

        virtualinvoke $r5.<androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback: void onConfigureFailed(androidx.camera.camera2.internal.SynchronizedCaptureSession)>(r3);

        goto label1;

     label2:
        return;
    }

    private void forceOnClosed(java.util.Set)
    {
        androidx.camera.camera2.internal.compat.workaround.ForceCloseCaptureSession r0;
        java.util.Set r1;
        java.util.Iterator r2;
        androidx.camera.camera2.internal.SynchronizedCaptureSession r3;
        boolean $z0;
        java.lang.Object $r4;
        androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback $r5;

        r0 := @this: androidx.camera.camera2.internal.compat.workaround.ForceCloseCaptureSession;

        r1 := @parameter0: java.util.Set;

        r2 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.camera.camera2.internal.SynchronizedCaptureSession) $r4;

        $r5 = interfaceinvoke r3.<androidx.camera.camera2.internal.SynchronizedCaptureSession: androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback getStateCallback()>();

        virtualinvoke $r5.<androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback: void onClosed(androidx.camera.camera2.internal.SynchronizedCaptureSession)>(r3);

        goto label1;

     label2:
        return;
    }

androidx.camera.camera2.internal.compat.workaround.ForceCloseCaptureSession$OnConfigured
<androidx.camera.camera2.internal.compat.workaround.ForceCloseCaptureSession$OnConfigured: void run(androidx.camera.camera2.internal.SynchronizedCaptureSession)>
