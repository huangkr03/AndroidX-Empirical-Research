androidx.compose.compiler.plugins.kotlin.ComposeTypeResolutionInterceptorExtension
    public org.jetbrains.kotlin.descriptors.impl.AnonymousFunctionDescriptor interceptFunctionLiteralDescriptor(org.jetbrains.kotlin.psi.KtLambdaExpression, org.jetbrains.kotlin.types.expressions.ExpressionTypingContext, org.jetbrains.kotlin.descriptors.impl.AnonymousFunctionDescriptor)
    {
        androidx.compose.compiler.plugins.kotlin.ComposeTypeResolutionInterceptorExtension r0;
        org.jetbrains.kotlin.psi.KtLambdaExpression r1;
        org.jetbrains.kotlin.types.expressions.ExpressionTypingContext r2;
        org.jetbrains.kotlin.descriptors.impl.AnonymousFunctionDescriptor r3;
        org.jetbrains.kotlin.types.KotlinType $r4;
        boolean $z0;
        androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices $r5;
        org.jetbrains.kotlin.resolve.BindingTrace $r6;
        org.jetbrains.kotlin.util.slicedMap.WritableSlice $r7;
        java.lang.Boolean $r8;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.ComposeTypeResolutionInterceptorExtension;

        r1 := @parameter0: org.jetbrains.kotlin.psi.KtLambdaExpression;

        r2 := @parameter1: org.jetbrains.kotlin.types.expressions.ExpressionTypingContext;

        r3 := @parameter2: org.jetbrains.kotlin.descriptors.impl.AnonymousFunctionDescriptor;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "expression");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "context");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "descriptor");

        $r4 = r2.<org.jetbrains.kotlin.types.expressions.ExpressionTypingContext: org.jetbrains.kotlin.types.KotlinType expectedType>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "context.expectedType");

        $z0 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeFqNamesKt: boolean hasComposableAnnotation(org.jetbrains.kotlin.types.KotlinType)>($r4);

        if $z0 == 0 goto label1;

        $r6 = r2.<org.jetbrains.kotlin.types.expressions.ExpressionTypingContext: org.jetbrains.kotlin.resolve.BindingTrace trace>;

        $r5 = <androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices: androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices INSTANCE>;

        $r7 = virtualinvoke $r5.<androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices: org.jetbrains.kotlin.util.slicedMap.WritableSlice getINFERRED_COMPOSABLE_DESCRIPTOR()>();

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r6.<org.jetbrains.kotlin.resolve.BindingTrace: void record(org.jetbrains.kotlin.util.slicedMap.WritableSlice,java.lang.Object,java.lang.Object)>($r7, r3, $r8);

     label1:
        return r3;
    }

    public org.jetbrains.kotlin.types.KotlinType interceptType(org.jetbrains.kotlin.psi.KtElement, org.jetbrains.kotlin.types.expressions.ExpressionTypingContext, org.jetbrains.kotlin.types.KotlinType)
    {
        androidx.compose.compiler.plugins.kotlin.ComposeTypeResolutionInterceptorExtension r0;
        org.jetbrains.kotlin.psi.KtElement r1;
        org.jetbrains.kotlin.types.expressions.ExpressionTypingContext r2;
        org.jetbrains.kotlin.types.KotlinType r3, $r16, $r17;
        org.jetbrains.kotlin.types.SimpleType $r4;
        boolean $z0, $z1, $z2;
        org.jetbrains.kotlin.psi.KtExpression $r5;
        java.util.List $r6;
        org.jetbrains.kotlin.resolve.BindingTrace $r7, $r10;
        org.jetbrains.kotlin.resolve.BindingContext $r8;
        androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices $r9;
        org.jetbrains.kotlin.util.slicedMap.WritableSlice $r11;
        java.lang.Boolean $r12;
        org.jetbrains.kotlin.resolve.scopes.LexicalScope $r13;
        org.jetbrains.kotlin.descriptors.DeclarationDescriptor $r14;
        org.jetbrains.kotlin.descriptors.ModuleDescriptor $r15;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.ComposeTypeResolutionInterceptorExtension;

        r1 := @parameter0: org.jetbrains.kotlin.psi.KtElement;

        r2 := @parameter1: org.jetbrains.kotlin.types.expressions.ExpressionTypingContext;

        r3 := @parameter2: org.jetbrains.kotlin.types.KotlinType;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "element");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "context");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "resultType");

        $r4 = <org.jetbrains.kotlin.types.TypeUtils: org.jetbrains.kotlin.types.SimpleType NO_EXPECTED_TYPE>;

        if r3 != $r4 goto label1;

        return r3;

     label1:
        $z0 = r1 instanceof org.jetbrains.kotlin.psi.KtLambdaExpression;

        if $z0 != 0 goto label2;

        return r3;

     label2:
        $r5 = (org.jetbrains.kotlin.psi.KtExpression) r1;

        $r6 = staticinvoke <org.jetbrains.kotlin.psi.psiUtil.KtPsiUtilKt: java.util.List getAnnotationEntries(org.jetbrains.kotlin.psi.KtExpression)>($r5);

        $r7 = r2.<org.jetbrains.kotlin.types.expressions.ExpressionTypingContext: org.jetbrains.kotlin.resolve.BindingTrace trace>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r7, "context.trace");

        $r8 = interfaceinvoke $r7.<org.jetbrains.kotlin.resolve.BindingTrace: org.jetbrains.kotlin.resolve.BindingContext getBindingContext()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r8, "context.trace.bindingContext");

        $z1 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposableCallCheckerKt: boolean hasComposableAnnotation(java.util.List,org.jetbrains.kotlin.resolve.BindingContext)>($r6, $r8);

        if $z1 != 0 goto label3;

        $r17 = r2.<org.jetbrains.kotlin.types.expressions.ExpressionTypingContext: org.jetbrains.kotlin.types.KotlinType expectedType>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r17, "context.expectedType");

        $z2 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeFqNamesKt: boolean hasComposableAnnotation(org.jetbrains.kotlin.types.KotlinType)>($r17);

        if $z2 == 0 goto label4;

     label3:
        $r10 = r2.<org.jetbrains.kotlin.types.expressions.ExpressionTypingContext: org.jetbrains.kotlin.resolve.BindingTrace trace>;

        $r9 = <androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices: androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices INSTANCE>;

        $r11 = virtualinvoke $r9.<androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices: org.jetbrains.kotlin.util.slicedMap.WritableSlice getINFERRED_COMPOSABLE_LITERAL()>();

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r10.<org.jetbrains.kotlin.resolve.BindingTrace: void record(org.jetbrains.kotlin.util.slicedMap.WritableSlice,java.lang.Object,java.lang.Object)>($r11, r1, $r12);

        $r13 = r2.<org.jetbrains.kotlin.types.expressions.ExpressionTypingContext: org.jetbrains.kotlin.resolve.scopes.LexicalScope scope>;

        $r14 = interfaceinvoke $r13.<org.jetbrains.kotlin.resolve.scopes.LexicalScope: org.jetbrains.kotlin.descriptors.DeclarationDescriptor getOwnerDescriptor()>();

        $r15 = staticinvoke <org.jetbrains.kotlin.resolve.descriptorUtil.DescriptorUtilsKt: org.jetbrains.kotlin.descriptors.ModuleDescriptor getModule(org.jetbrains.kotlin.descriptors.DeclarationDescriptor)>($r14);

        $r16 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeFqNamesKt: org.jetbrains.kotlin.types.KotlinType makeComposable(org.jetbrains.kotlin.types.KotlinType,org.jetbrains.kotlin.descriptors.ModuleDescriptor)>(r3, $r15);

        return $r16;

     label4:
        return r3;
    }

    public void <init>()
    {
        androidx.compose.compiler.plugins.kotlin.ComposeTypeResolutionInterceptorExtension r0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.ComposeTypeResolutionInterceptorExtension;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

