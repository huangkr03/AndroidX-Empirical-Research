androidx.benchmark.macro.perfetto.PerfettoTraceProcessor
<androidx.benchmark.macro.perfetto.PerfettoTraceProcessor: androidx.benchmark.macro.perfetto.PerfettoTraceProcessor INSTANCE>
<androidx.benchmark.macro.perfetto.PerfettoTraceProcessor: java.lang.String TAG>
<androidx.benchmark.macro.perfetto.PerfettoTraceProcessor: kotlin.Lazy shellPath$delegate>
    private void <init>()
    {
        androidx.benchmark.macro.perfetto.PerfettoTraceProcessor r0;

        r0 := @this: androidx.benchmark.macro.perfetto.PerfettoTraceProcessor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final java.lang.String getShellPath()
    {
        androidx.benchmark.macro.perfetto.PerfettoTraceProcessor r0;
        kotlin.Lazy r1;
        java.lang.Object $r2;
        java.lang.String $r3;

        r0 := @this: androidx.benchmark.macro.perfetto.PerfettoTraceProcessor;

        r1 = <androidx.benchmark.macro.perfetto.PerfettoTraceProcessor: kotlin.Lazy shellPath$delegate>;

        $r2 = interfaceinvoke r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    private final void validateTracePath(java.lang.String)
    {
        androidx.benchmark.macro.perfetto.PerfettoTraceProcessor r0;
        java.lang.String r1, $r5, $r6;
        java.lang.CharSequence $r2, $r3;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: androidx.benchmark.macro.perfetto.PerfettoTraceProcessor;

        r1 := @parameter0: java.lang.String;

        $r3 = (java.lang.CharSequence) r1;

        $r2 = (java.lang.CharSequence) " ";

        $z0 = staticinvoke <kotlin.text.StringsKt: boolean contains$default(java.lang.CharSequence,java.lang.CharSequence,boolean,int,java.lang.Object)>($r3, $r2, 0, 2, null);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 != 0 goto label3;

        $r6 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Trace path must not contain spaces: ", r1);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label3:
        return;
    }

    public final java.lang.String getJsonMetrics(java.lang.String, java.lang.String)
    {
        androidx.benchmark.macro.perfetto.PerfettoTraceProcessor r0;
        java.lang.String r1, r2, r3, r4, r5, $r9, $r16, $r19, $r23, $r26, $r28, $r31;
        java.lang.CharSequence $r6, $r7, $r20, $r21, $r24;
        boolean $z1, $z2, $z5;
        java.lang.StringBuilder $r8, $r10, $r11, $r12, $r13, $r14, $r15;
        androidx.benchmark.UserspaceTracing $r17, $r22, $r30;
        androidx.benchmark.Shell $r18;
        int $i2;
        java.lang.IllegalStateException $r25;
        java.lang.IllegalArgumentException $r27;
        java.lang.Throwable $r29;

        r0 := @this: androidx.benchmark.macro.perfetto.PerfettoTraceProcessor;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "absoluteTracePath");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "metric");

        specialinvoke r0.<androidx.benchmark.macro.perfetto.PerfettoTraceProcessor: void validateTracePath(java.lang.String)>(r1);

        $r7 = (java.lang.CharSequence) r2;

        $r6 = (java.lang.CharSequence) " ";

        $z1 = staticinvoke <kotlin.text.StringsKt: boolean contains$default(java.lang.CharSequence,java.lang.CharSequence,boolean,int,java.lang.Object)>($r7, $r6, 0, 2, null);

        if $z1 != 0 goto label01;

        $z2 = 1;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        if $z2 != 0 goto label03;

        $r31 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Metric must not contain spaces: ", r2);

        $r27 = new java.lang.IllegalArgumentException;

        $r28 = virtualinvoke $r31.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r27.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r28);

        throw $r27;

     label03:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke r0.<androidx.benchmark.macro.perfetto.PerfettoTraceProcessor: java.lang.String getShellPath()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --run-metric ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --metrics-output=json");

        r3 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Executing command ", r3);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("PerfettoTraceProcessor", $r16);

        r4 = "trace_processor_shell";

        $r17 = <androidx.benchmark.UserspaceTracing: androidx.benchmark.UserspaceTracing INSTANCE>;

        staticinvoke <androidx.benchmark.UserspaceTracing: void beginSection$default(androidx.benchmark.UserspaceTracing,java.lang.String,long,int,java.lang.Object)>($r17, r4, 0L, 2, null);

     label04:
        $r18 = <androidx.benchmark.Shell: androidx.benchmark.Shell INSTANCE>;

        $r19 = virtualinvoke $r18.<androidx.benchmark.Shell: java.lang.String executeCommand(java.lang.String)>(r3);

        $r20 = (java.lang.CharSequence) $r19;

        $r21 = staticinvoke <kotlin.text.StringsKt: java.lang.CharSequence trim(java.lang.CharSequence)>($r20);

        r5 = virtualinvoke $r21.<java.lang.Object: java.lang.String toString()>();

     label05:
        $r22 = <androidx.benchmark.UserspaceTracing: androidx.benchmark.UserspaceTracing INSTANCE>;

        staticinvoke <androidx.benchmark.UserspaceTracing: void endSection$default(androidx.benchmark.UserspaceTracing,long,int,java.lang.Object)>($r22, 0L, 1, null);

        goto label08;

     label06:
        $r29 := @caughtexception;

     label07:
        $r30 = <androidx.benchmark.UserspaceTracing: androidx.benchmark.UserspaceTracing INSTANCE>;

        staticinvoke <androidx.benchmark.UserspaceTracing: void endSection$default(androidx.benchmark.UserspaceTracing,long,int,java.lang.Object)>($r30, 0L, 1, null);

        throw $r29;

     label08:
        $r23 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Trace Processor result: \n\n ", r5);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("PerfettoTraceProcessor", $r23);

        $r24 = (java.lang.CharSequence) r5;

        $i2 = interfaceinvoke $r24.<java.lang.CharSequence: int length()>();

        if $i2 != 0 goto label09;

        $z5 = 1;

        goto label10;

     label09:
        $z5 = 0;

     label10:
        if $z5 == 0 goto label11;

        $r25 = new java.lang.IllegalStateException;

        $r26 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Empty json result from Trace Processor - possibly malformed command? Command: ", r3);

        specialinvoke $r25.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r26);

        throw $r25;

     label11:
        return r5;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
    }

    public final transient java.util.List querySlices(java.lang.String, java.lang.String[])
    {
        androidx.benchmark.macro.perfetto.PerfettoTraceProcessor r0;
        java.lang.String r1, r3, $r12, $r13, $r14;
        java.lang.String[] r2;
        androidx.benchmark.macro.perfetto.PerfettoTraceProcessor$querySlices$whereClause$1 $r4;
        kotlin.jvm.functions.Function1 $r5;
        java.lang.CharSequence $r6;
        java.lang.StringBuilder $r7, $r9, $r10, $r11;
        androidx.benchmark.macro.perfetto.Slice$Companion $r8;
        java.util.List $r15;

        r0 := @this: androidx.benchmark.macro.perfetto.PerfettoTraceProcessor;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "absoluteTracePath");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "sliceNames");

        $r6 = (java.lang.CharSequence) " OR ";

        $r4 = <androidx.benchmark.macro.perfetto.PerfettoTraceProcessor$querySlices$whereClause$1: androidx.benchmark.macro.perfetto.PerfettoTraceProcessor$querySlices$whereClause$1 INSTANCE>;

        $r5 = (kotlin.jvm.functions.Function1) $r4;

        r3 = staticinvoke <kotlin.collections.ArraysKt: java.lang.String joinToString$default(java.lang.Object[],java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,kotlin.jvm.functions.Function1,int,java.lang.Object)>(r2, $r6, null, null, 0, null, $r5, 30, null);

        $r8 = <androidx.benchmark.macro.perfetto.Slice: androidx.benchmark.macro.perfetto.Slice$Companion Companion>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n                SELECT slice.name,ts,dur\n                FROM slice\n                WHERE ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n            ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = staticinvoke <kotlin.text.StringsKt: java.lang.String trimMargin$default(java.lang.String,java.lang.String,int,java.lang.Object)>($r12, null, 1, null);

        $r14 = virtualinvoke r0.<androidx.benchmark.macro.perfetto.PerfettoTraceProcessor: java.lang.String rawQuery$benchmark_macro_release(java.lang.String,java.lang.String)>(r1, $r13);

        $r15 = virtualinvoke $r8.<androidx.benchmark.macro.perfetto.Slice$Companion: java.util.List parseListFromQueryResult(java.lang.String)>($r14);

        return $r15;
    }

    public final java.lang.String rawQuery$benchmark_macro_release(java.lang.String, java.lang.String)
    {
        androidx.benchmark.macro.perfetto.PerfettoTraceProcessor r0;
        java.lang.String r1, r2, r4, $r9, $r12, r22, r23, r25;
        java.io.File r3, $r5, $r7;
        androidx.benchmark.Outputs $r6;
        java.lang.StringBuilder $r8, $r10, $r11, $r13, $r14, $r15;
        androidx.benchmark.UserspaceTracing $r16, $r18, $r21;
        androidx.benchmark.Shell $r17;
        java.lang.Throwable $r19, $r20, r26;

        r0 := @this: androidx.benchmark.macro.perfetto.PerfettoTraceProcessor;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "absoluteTracePath");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "query");

        specialinvoke r0.<androidx.benchmark.macro.perfetto.PerfettoTraceProcessor: void validateTracePath(java.lang.String)>(r1);

        $r5 = new java.io.File;

        $r6 = <androidx.benchmark.Outputs: androidx.benchmark.Outputs INSTANCE>;

        $r7 = virtualinvoke $r6.<androidx.benchmark.Outputs: java.io.File getDirUsableByAppAndShell()>();

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, "trace_processor_query.sql");

        r3 = $r5;

     label1:
        staticinvoke <kotlin.io.FilesKt: void writeText$default(java.io.File,java.lang.String,java.nio.charset.Charset,int,java.lang.Object)>(r3, r2, null, 2, null);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke r0.<androidx.benchmark.macro.perfetto.PerfettoTraceProcessor: java.lang.String getShellPath()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --query-file ");

        $r12 = virtualinvoke r3.<java.io.File: java.lang.String getAbsolutePath()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r22 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        r23 = "trace_processor_shell";

        $r16 = <androidx.benchmark.UserspaceTracing: androidx.benchmark.UserspaceTracing INSTANCE>;

        staticinvoke <androidx.benchmark.UserspaceTracing: void beginSection$default(androidx.benchmark.UserspaceTracing,java.lang.String,long,int,java.lang.Object)>($r16, r23, 0L, 2, null);

     label2:
        $r17 = <androidx.benchmark.Shell: androidx.benchmark.Shell INSTANCE>;

        r4 = virtualinvoke $r17.<androidx.benchmark.Shell: java.lang.String executeCommand(java.lang.String)>(r22);

     label3:
        $r18 = <androidx.benchmark.UserspaceTracing: androidx.benchmark.UserspaceTracing INSTANCE>;

        staticinvoke <androidx.benchmark.UserspaceTracing: void endSection$default(androidx.benchmark.UserspaceTracing,long,int,java.lang.Object)>($r18, 0L, 1, null);

        goto label6;

     label4:
        $r20 := @caughtexception;

     label5:
        $r21 = <androidx.benchmark.UserspaceTracing: androidx.benchmark.UserspaceTracing INSTANCE>;

        staticinvoke <androidx.benchmark.UserspaceTracing: void endSection$default(androidx.benchmark.UserspaceTracing,long,int,java.lang.Object)>($r21, 0L, 1, null);

        throw $r20;

     label6:
        r25 = r4;

     label7:
        virtualinvoke r3.<java.io.File: boolean delete()>();

        return r25;

     label8:
        $r19 := @caughtexception;

        r26 = $r19;

     label9:
        virtualinvoke r3.<java.io.File: boolean delete()>();

        throw r26;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
        catch java.lang.Throwable from label1 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }

    public final java.lang.String processNameLikePkg$benchmark_macro_release(java.lang.String)
    {
        androidx.benchmark.macro.perfetto.PerfettoTraceProcessor r0;
        java.lang.String r1, $r8;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r7;

        r0 := @this: androidx.benchmark.macro.perfetto.PerfettoTraceProcessor;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "pkg");

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(process.name LIKE \"");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" OR process.name LIKE \"");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":%\")");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    static void <clinit>()
    {
        androidx.benchmark.macro.perfetto.PerfettoTraceProcessor $r0;
        androidx.benchmark.macro.perfetto.PerfettoTraceProcessor$shellPath$2 $r1;
        kotlin.jvm.functions.Function0 $r2;
        kotlin.Lazy $r3;

        $r0 = new androidx.benchmark.macro.perfetto.PerfettoTraceProcessor;

        specialinvoke $r0.<androidx.benchmark.macro.perfetto.PerfettoTraceProcessor: void <init>()>();

        <androidx.benchmark.macro.perfetto.PerfettoTraceProcessor: androidx.benchmark.macro.perfetto.PerfettoTraceProcessor INSTANCE> = $r0;

        $r1 = <androidx.benchmark.macro.perfetto.PerfettoTraceProcessor$shellPath$2: androidx.benchmark.macro.perfetto.PerfettoTraceProcessor$shellPath$2 INSTANCE>;

        $r2 = (kotlin.jvm.functions.Function0) $r1;

        $r3 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)>($r2);

        <androidx.benchmark.macro.perfetto.PerfettoTraceProcessor: kotlin.Lazy shellPath$delegate> = $r3;

        return;
    }

androidx.benchmark.macro.perfetto.PerfettoTraceProcessor$querySlices$whereClause$1
<androidx.benchmark.macro.perfetto.PerfettoTraceProcessor$querySlices$whereClause$1: androidx.benchmark.macro.perfetto.PerfettoTraceProcessor$querySlices$whereClause$1 INSTANCE>
    void <init>()
    {
        androidx.benchmark.macro.perfetto.PerfettoTraceProcessor$querySlices$whereClause$1 r0;

        r0 := @this: androidx.benchmark.macro.perfetto.PerfettoTraceProcessor$querySlices$whereClause$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.CharSequence invoke(java.lang.String)
    {
        androidx.benchmark.macro.perfetto.PerfettoTraceProcessor$querySlices$whereClause$1 r0;
        java.lang.String r1, $r6;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        java.lang.CharSequence $r7;

        r0 := @this: androidx.benchmark.macro.perfetto.PerfettoTraceProcessor$querySlices$whereClause$1;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("slice.name LIKE \"");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = (java.lang.CharSequence) $r6;

        return $r7;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.benchmark.macro.perfetto.PerfettoTraceProcessor$querySlices$whereClause$1 r0;
        java.lang.Object r1;
        java.lang.String $r2;
        java.lang.CharSequence $r3;

        r0 := @this: androidx.benchmark.macro.perfetto.PerfettoTraceProcessor$querySlices$whereClause$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.String) r1;

        $r3 = virtualinvoke r0.<androidx.benchmark.macro.perfetto.PerfettoTraceProcessor$querySlices$whereClause$1: java.lang.CharSequence invoke(java.lang.String)>($r2);

        return $r3;
    }

    static void <clinit>()
    {
        androidx.benchmark.macro.perfetto.PerfettoTraceProcessor$querySlices$whereClause$1 $r0;

        $r0 = new androidx.benchmark.macro.perfetto.PerfettoTraceProcessor$querySlices$whereClause$1;

        specialinvoke $r0.<androidx.benchmark.macro.perfetto.PerfettoTraceProcessor$querySlices$whereClause$1: void <init>()>();

        <androidx.benchmark.macro.perfetto.PerfettoTraceProcessor$querySlices$whereClause$1: androidx.benchmark.macro.perfetto.PerfettoTraceProcessor$querySlices$whereClause$1 INSTANCE> = $r0;

        return;
    }

androidx.benchmark.macro.perfetto.PerfettoTraceProcessor$shellPath$2
<androidx.benchmark.macro.perfetto.PerfettoTraceProcessor$shellPath$2: androidx.benchmark.macro.perfetto.PerfettoTraceProcessor$shellPath$2 INSTANCE>
    void <init>()
    {
        androidx.benchmark.macro.perfetto.PerfettoTraceProcessor$shellPath$2 r0;

        r0 := @this: androidx.benchmark.macro.perfetto.PerfettoTraceProcessor$shellPath$2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final java.lang.String invoke()
    {
        androidx.benchmark.macro.perfetto.PerfettoTraceProcessor$shellPath$2 r0;
        androidx.benchmark.perfetto.PerfettoHelper$Companion $r1;
        java.lang.String $r2;

        r0 := @this: androidx.benchmark.macro.perfetto.PerfettoTraceProcessor$shellPath$2;

        $r1 = <androidx.benchmark.perfetto.PerfettoHelper: androidx.benchmark.perfetto.PerfettoHelper$Companion Companion>;

        $r2 = virtualinvoke $r1.<androidx.benchmark.perfetto.PerfettoHelper$Companion: java.lang.String createExecutable(java.lang.String)>("trace_processor_shell");

        return $r2;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.benchmark.macro.perfetto.PerfettoTraceProcessor$shellPath$2 r0;
        java.lang.String $r1;

        r0 := @this: androidx.benchmark.macro.perfetto.PerfettoTraceProcessor$shellPath$2;

        $r1 = virtualinvoke r0.<androidx.benchmark.macro.perfetto.PerfettoTraceProcessor$shellPath$2: java.lang.String invoke()>();

        return $r1;
    }

    static void <clinit>()
    {
        androidx.benchmark.macro.perfetto.PerfettoTraceProcessor$shellPath$2 $r0;

        $r0 = new androidx.benchmark.macro.perfetto.PerfettoTraceProcessor$shellPath$2;

        specialinvoke $r0.<androidx.benchmark.macro.perfetto.PerfettoTraceProcessor$shellPath$2: void <init>()>();

        <androidx.benchmark.macro.perfetto.PerfettoTraceProcessor$shellPath$2: androidx.benchmark.macro.perfetto.PerfettoTraceProcessor$shellPath$2 INSTANCE> = $r0;

        return;
    }

