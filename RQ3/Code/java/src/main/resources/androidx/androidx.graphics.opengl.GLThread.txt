androidx.graphics.opengl.GLThread
<androidx.graphics.opengl.GLThread: androidx.graphics.opengl.GLThread$Companion Companion>
<androidx.graphics.opengl.GLThread: kotlin.jvm.functions.Function0 mEglSpecFactory>
<androidx.graphics.opengl.GLThread: kotlin.jvm.functions.Function1 mEglConfigFactory>
<androidx.graphics.opengl.GLThread: java.util.concurrent.atomic.AtomicBoolean mIsTearingDown>
<androidx.graphics.opengl.GLThread: androidx.graphics.opengl.egl.EGLManager mEglManager>
<androidx.graphics.opengl.GLThread: java.util.HashMap mSurfaceSessions>
<androidx.graphics.opengl.GLThread: android.os.Handler mHandler>
<androidx.graphics.opengl.GLThread: java.util.HashSet mEglContextCallback>
<androidx.graphics.opengl.GLThread: boolean DEBUG>
<androidx.graphics.opengl.GLThread: java.lang.String TAG>
    public void <init>(java.lang.String, kotlin.jvm.functions.Function0, kotlin.jvm.functions.Function1)
    {
        androidx.graphics.opengl.GLThread r0;
        java.lang.String r1;
        kotlin.jvm.functions.Function0 r2;
        kotlin.jvm.functions.Function1 r3;
        java.util.concurrent.atomic.AtomicBoolean $r4;
        java.util.HashMap $r5;
        java.util.HashSet $r6;

        r0 := @this: androidx.graphics.opengl.GLThread;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: kotlin.jvm.functions.Function0;

        r3 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "name");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "mEglSpecFactory");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "mEglConfigFactory");

        specialinvoke r0.<android.os.HandlerThread: void <init>(java.lang.String)>(r1);

        r0.<androidx.graphics.opengl.GLThread: kotlin.jvm.functions.Function0 mEglSpecFactory> = r2;

        r0.<androidx.graphics.opengl.GLThread: kotlin.jvm.functions.Function1 mEglConfigFactory> = r3;

        $r4 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<androidx.graphics.opengl.GLThread: java.util.concurrent.atomic.AtomicBoolean mIsTearingDown> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<androidx.graphics.opengl.GLThread: java.util.HashMap mSurfaceSessions> = $r5;

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        r0.<androidx.graphics.opengl.GLThread: java.util.HashSet mEglContextCallback> = $r6;

        return;
    }

    public void <init>(java.lang.String, kotlin.jvm.functions.Function0, kotlin.jvm.functions.Function1, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.graphics.opengl.GLThread r0;
        kotlin.jvm.functions.Function0 r1;
        kotlin.jvm.functions.Function1 r2;
        int i0, $i1;
        kotlin.jvm.internal.DefaultConstructorMarker r3;
        java.lang.String r4;

        r0 := @this: androidx.graphics.opengl.GLThread;

        r4 := @parameter0: java.lang.String;

        r1 := @parameter1: kotlin.jvm.functions.Function0;

        r2 := @parameter2: kotlin.jvm.functions.Function1;

        i0 := @parameter3: int;

        r3 := @parameter4: kotlin.jvm.internal.DefaultConstructorMarker;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        r4 = "GLThread";

     label1:
        specialinvoke r0.<androidx.graphics.opengl.GLThread: void <init>(java.lang.String,kotlin.jvm.functions.Function0,kotlin.jvm.functions.Function1)>(r4, r1, r2);

        return;
    }

    public void start()
    {
        androidx.graphics.opengl.GLThread r0;
        android.os.Handler $r1;
        android.os.Looper $r2;

        r0 := @this: androidx.graphics.opengl.GLThread;

        specialinvoke r0.<android.os.HandlerThread: void start()>();

        $r1 = new android.os.Handler;

        $r2 = virtualinvoke r0.<androidx.graphics.opengl.GLThread: android.os.Looper getLooper()>();

        specialinvoke $r1.<android.os.Handler: void <init>(android.os.Looper)>($r2);

        r0.<androidx.graphics.opengl.GLThread: android.os.Handler mHandler> = $r1;

        return;
    }

    public final void attachSurface(int, android.view.Surface, int, int, androidx.graphics.opengl.GLRenderer$RenderCallback)
    {
        androidx.graphics.opengl.GLThread r0, r3;
        int i0, i1, i2;
        android.view.Surface r1;
        androidx.graphics.opengl.GLRenderer$RenderCallback r2;
        android.os.Handler r4, $r5;
        java.util.concurrent.atomic.AtomicBoolean $r6;
        boolean $z2;
        java.lang.Integer $r7;
        java.lang.Runnable $r8;
        java.lang.IllegalStateException $r9;

        r0 := @this: androidx.graphics.opengl.GLThread;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.Surface;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r2 := @parameter4: androidx.graphics.opengl.GLRenderer$RenderCallback;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "renderer");

        r3 = r0;

        $r5 = r3.<androidx.graphics.opengl.GLThread: android.os.Handler mHandler>;

        if $r5 != null goto label1;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Did you forget to call GLThread.start()?");

        throw $r9;

     label1:
        r4 = $r5;

        $r6 = r3.<androidx.graphics.opengl.GLThread: java.util.concurrent.atomic.AtomicBoolean mIsTearingDown>;

        $z2 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z2 != 0 goto label2;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r8 = dynamicinvoke "run" <java.lang.Runnable (androidx.graphics.opengl.GLThread,int,android.view.Surface,androidx.graphics.opengl.GLRenderer$RenderCallback,int,int)>(r0, i0, r1, r2, i1, i2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.graphics.opengl.GLThread: void attachSurface$lambda$2$lambda$1(androidx.graphics.opengl.GLThread,int,android.view.Surface,androidx.graphics.opengl.GLRenderer$RenderCallback,int,int)>, methodtype: void __METHODTYPE__());

        specialinvoke r0.<androidx.graphics.opengl.GLThread: void post(android.os.Handler,java.lang.Object,java.lang.Runnable)>(r4, $r7, $r8);

     label2:
        return;
    }

    public final void resizeSurface(int, int, int, java.lang.Runnable)
    {
        androidx.graphics.opengl.GLThread r0, r2;
        int i0, i1, i2;
        java.lang.Runnable r1, $r7;
        android.os.Handler r3, $r4;
        java.util.concurrent.atomic.AtomicBoolean $r5;
        boolean $z2;
        java.lang.Integer $r6;
        java.lang.IllegalStateException $r8;

        r0 := @this: androidx.graphics.opengl.GLThread;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: java.lang.Runnable;

        r2 = r0;

        $r4 = r2.<androidx.graphics.opengl.GLThread: android.os.Handler mHandler>;

        if $r4 != null goto label1;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Did you forget to call GLThread.start()?");

        throw $r8;

     label1:
        r3 = $r4;

        $r5 = r2.<androidx.graphics.opengl.GLThread: java.util.concurrent.atomic.AtomicBoolean mIsTearingDown>;

        $z2 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z2 != 0 goto label2;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r7 = dynamicinvoke "run" <java.lang.Runnable (androidx.graphics.opengl.GLThread,int,int,int,java.lang.Runnable)>(r0, i0, i1, i2, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.graphics.opengl.GLThread: void resizeSurface$lambda$4$lambda$3(androidx.graphics.opengl.GLThread,int,int,int,java.lang.Runnable)>, methodtype: void __METHODTYPE__());

        specialinvoke r0.<androidx.graphics.opengl.GLThread: void post(android.os.Handler,java.lang.Object,java.lang.Runnable)>(r3, $r6, $r7);

     label2:
        return;
    }

    public static void resizeSurface$default(androidx.graphics.opengl.GLThread, int, int, int, java.lang.Runnable, int, java.lang.Object)
    {
        androidx.graphics.opengl.GLThread r0;
        int i0, i1, i2, i3, $i4;
        java.lang.Object r1;
        java.lang.Runnable r2;

        r0 := @parameter0: androidx.graphics.opengl.GLThread;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r2 := @parameter4: java.lang.Runnable;

        i3 := @parameter5: int;

        r1 := @parameter6: java.lang.Object;

        $i4 = i3 & 8;

        if $i4 == 0 goto label1;

        r2 = null;

     label1:
        virtualinvoke r0.<androidx.graphics.opengl.GLThread: void resizeSurface(int,int,int,java.lang.Runnable)>(i0, i1, i2, r2);

        return;
    }

    public final void addEGLCallbacks(java.util.ArrayList)
    {
        androidx.graphics.opengl.GLThread r0, r2;
        java.util.ArrayList r1;
        android.os.Handler r3, $r4;
        java.util.concurrent.atomic.AtomicBoolean $r5;
        boolean $z2;
        java.lang.Runnable $r6;
        java.lang.IllegalStateException $r7;

        r0 := @this: androidx.graphics.opengl.GLThread;

        r1 := @parameter0: java.util.ArrayList;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "callbacks");

        r2 = r0;

        $r4 = r2.<androidx.graphics.opengl.GLThread: android.os.Handler mHandler>;

        if $r4 != null goto label1;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Did you forget to call GLThread.start()?");

        throw $r7;

     label1:
        r3 = $r4;

        $r5 = r2.<androidx.graphics.opengl.GLThread: java.util.concurrent.atomic.AtomicBoolean mIsTearingDown>;

        $z2 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z2 != 0 goto label2;

        $r6 = dynamicinvoke "run" <java.lang.Runnable (androidx.graphics.opengl.GLThread,java.util.ArrayList)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.graphics.opengl.GLThread: void addEGLCallbacks$lambda$7$lambda$6(androidx.graphics.opengl.GLThread,java.util.ArrayList)>, methodtype: void __METHODTYPE__());

        virtualinvoke r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r6);

     label2:
        return;
    }

    public final void addEGLCallback(androidx.graphics.opengl.GLRenderer$EGLContextCallback)
    {
        androidx.graphics.opengl.GLThread r0, r2;
        androidx.graphics.opengl.GLRenderer$EGLContextCallback r1;
        android.os.Handler r3, $r4;
        java.util.concurrent.atomic.AtomicBoolean $r5;
        boolean $z2;
        java.lang.Runnable $r6;
        java.lang.IllegalStateException $r7;

        r0 := @this: androidx.graphics.opengl.GLThread;

        r1 := @parameter0: androidx.graphics.opengl.GLRenderer$EGLContextCallback;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "callbacks");

        r2 = r0;

        $r4 = r2.<androidx.graphics.opengl.GLThread: android.os.Handler mHandler>;

        if $r4 != null goto label1;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Did you forget to call GLThread.start()?");

        throw $r7;

     label1:
        r3 = $r4;

        $r5 = r2.<androidx.graphics.opengl.GLThread: java.util.concurrent.atomic.AtomicBoolean mIsTearingDown>;

        $z2 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z2 != 0 goto label2;

        $r6 = dynamicinvoke "run" <java.lang.Runnable (androidx.graphics.opengl.GLThread,androidx.graphics.opengl.GLRenderer$EGLContextCallback)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.graphics.opengl.GLThread: void addEGLCallback$lambda$10$lambda$9(androidx.graphics.opengl.GLThread,androidx.graphics.opengl.GLRenderer$EGLContextCallback)>, methodtype: void __METHODTYPE__());

        virtualinvoke r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r6);

     label2:
        return;
    }

    public final void removeEGLCallback(androidx.graphics.opengl.GLRenderer$EGLContextCallback)
    {
        androidx.graphics.opengl.GLThread r0, r2;
        androidx.graphics.opengl.GLRenderer$EGLContextCallback r1;
        android.os.Handler r3, $r4;
        java.util.concurrent.atomic.AtomicBoolean $r5;
        boolean $z2;
        java.lang.Runnable $r6;
        java.lang.IllegalStateException $r7;

        r0 := @this: androidx.graphics.opengl.GLThread;

        r1 := @parameter0: androidx.graphics.opengl.GLRenderer$EGLContextCallback;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "callbacks");

        r2 = r0;

        $r4 = r2.<androidx.graphics.opengl.GLThread: android.os.Handler mHandler>;

        if $r4 != null goto label1;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Did you forget to call GLThread.start()?");

        throw $r7;

     label1:
        r3 = $r4;

        $r5 = r2.<androidx.graphics.opengl.GLThread: java.util.concurrent.atomic.AtomicBoolean mIsTearingDown>;

        $z2 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z2 != 0 goto label2;

        $r6 = dynamicinvoke "run" <java.lang.Runnable (androidx.graphics.opengl.GLThread,androidx.graphics.opengl.GLRenderer$EGLContextCallback)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.graphics.opengl.GLThread: void removeEGLCallback$lambda$12$lambda$11(androidx.graphics.opengl.GLThread,androidx.graphics.opengl.GLRenderer$EGLContextCallback)>, methodtype: void __METHODTYPE__());

        virtualinvoke r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r6);

     label2:
        return;
    }

    public final void detachSurface(int, boolean, java.lang.Runnable)
    {
        androidx.graphics.opengl.GLThread r0, r2;
        int i0;
        boolean z0, $z3;
        java.lang.Runnable r1, $r13;
        android.os.Handler r3, $r10;
        java.lang.StringBuilder $r5, $r7, $r8;
        androidx.graphics.opengl.GLThread$Companion $r6;
        java.lang.String $r9;
        java.util.concurrent.atomic.AtomicBoolean $r11;
        java.lang.Integer $r12, $r14;
        java.lang.IllegalStateException $r15;

        r0 := @this: androidx.graphics.opengl.GLThread;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.lang.Runnable;

        $r6 = <androidx.graphics.opengl.GLThread: androidx.graphics.opengl.GLThread$Companion Companion>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dispatching request to detach surface w/ token: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<androidx.graphics.opengl.GLThread$Companion: void log$graphics_core_release(java.lang.String)>($r9);

        r2 = r0;

        $r10 = r2.<androidx.graphics.opengl.GLThread: android.os.Handler mHandler>;

        if $r10 != null goto label1;

        $r15 = new java.lang.IllegalStateException;

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Did you forget to call GLThread.start()?");

        throw $r15;

     label1:
        r3 = $r10;

        $r11 = r2.<androidx.graphics.opengl.GLThread: java.util.concurrent.atomic.AtomicBoolean mIsTearingDown>;

        $z3 = virtualinvoke $r11.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z3 != 0 goto label3;

        if z0 == 0 goto label2;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke r3.<android.os.Handler: void removeCallbacksAndMessages(java.lang.Object)>($r14);

     label2:
        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r13 = dynamicinvoke "run" <java.lang.Runnable (androidx.graphics.opengl.GLThread,int,java.lang.Runnable)>(r0, i0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.graphics.opengl.GLThread: void detachSurface$lambda$14$lambda$13(androidx.graphics.opengl.GLThread,int,java.lang.Runnable)>, methodtype: void __METHODTYPE__());

        specialinvoke r0.<androidx.graphics.opengl.GLThread: void post(android.os.Handler,java.lang.Object,java.lang.Runnable)>(r3, $r12, $r13);

     label3:
        return;
    }

    public final void tearDown(boolean, java.lang.Runnable)
    {
        androidx.graphics.opengl.GLThread r0, r2;
        boolean z0, $z3;
        java.lang.Runnable r1, $r7;
        android.os.Handler r3, $r5;
        java.util.concurrent.atomic.AtomicBoolean $r6, $r8;
        java.lang.IllegalStateException $r9;

        r0 := @this: androidx.graphics.opengl.GLThread;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.Runnable;

        r2 = r0;

        $r5 = r2.<androidx.graphics.opengl.GLThread: android.os.Handler mHandler>;

        if $r5 != null goto label1;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Did you forget to call GLThread.start()?");

        throw $r9;

     label1:
        r3 = $r5;

        $r6 = r2.<androidx.graphics.opengl.GLThread: java.util.concurrent.atomic.AtomicBoolean mIsTearingDown>;

        $z3 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z3 != 0 goto label3;

        if z0 == 0 goto label2;

        virtualinvoke r3.<android.os.Handler: void removeCallbacksAndMessages(java.lang.Object)>(null);

     label2:
        $r7 = dynamicinvoke "run" <java.lang.Runnable (androidx.graphics.opengl.GLThread,java.lang.Runnable)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.graphics.opengl.GLThread: void tearDown$lambda$16$lambda$15(androidx.graphics.opengl.GLThread,java.lang.Runnable)>, methodtype: void __METHODTYPE__());

        virtualinvoke r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r7);

        $r8 = r0.<androidx.graphics.opengl.GLThread: java.util.concurrent.atomic.AtomicBoolean mIsTearingDown>;

        virtualinvoke $r8.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

     label3:
        return;
    }

    public final void requestRender(int, java.lang.Runnable)
    {
        androidx.graphics.opengl.GLThread r0, r2;
        int i0;
        java.lang.Runnable r1, $r12;
        android.os.Handler r3, $r9;
        java.lang.StringBuilder $r4, $r6, $r7;
        androidx.graphics.opengl.GLThread$Companion $r5;
        java.lang.String $r8;
        java.util.concurrent.atomic.AtomicBoolean $r10;
        boolean $z2;
        java.lang.Integer $r11;
        java.lang.IllegalStateException $r13;

        r0 := @this: androidx.graphics.opengl.GLThread;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Runnable;

        $r5 = <androidx.graphics.opengl.GLThread: androidx.graphics.opengl.GLThread$Companion Companion>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dispatching request to render for token: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<androidx.graphics.opengl.GLThread$Companion: void log$graphics_core_release(java.lang.String)>($r8);

        r2 = r0;

        $r9 = r2.<androidx.graphics.opengl.GLThread: android.os.Handler mHandler>;

        if $r9 != null goto label1;

        $r13 = new java.lang.IllegalStateException;

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Did you forget to call GLThread.start()?");

        throw $r13;

     label1:
        r3 = $r9;

        $r10 = r2.<androidx.graphics.opengl.GLThread: java.util.concurrent.atomic.AtomicBoolean mIsTearingDown>;

        $z2 = virtualinvoke $r10.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z2 != 0 goto label2;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r12 = dynamicinvoke "run" <java.lang.Runnable (androidx.graphics.opengl.GLThread,int,java.lang.Runnable)>(r0, i0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.graphics.opengl.GLThread: void requestRender$lambda$18$lambda$17(androidx.graphics.opengl.GLThread,int,java.lang.Runnable)>, methodtype: void __METHODTYPE__());

        specialinvoke r0.<androidx.graphics.opengl.GLThread: void post(android.os.Handler,java.lang.Object,java.lang.Runnable)>(r3, $r11, $r12);

     label2:
        return;
    }

    public static void requestRender$default(androidx.graphics.opengl.GLThread, int, java.lang.Runnable, int, java.lang.Object)
    {
        androidx.graphics.opengl.GLThread r0;
        int i0, i1, $i2;
        java.lang.Object r1;
        java.lang.Runnable r2;

        r0 := @parameter0: androidx.graphics.opengl.GLThread;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Runnable;

        i1 := @parameter3: int;

        r1 := @parameter4: java.lang.Object;

        $i2 = i1 & 2;

        if $i2 == 0 goto label1;

        r2 = null;

     label1:
        virtualinvoke r0.<androidx.graphics.opengl.GLThread: void requestRender(int,java.lang.Runnable)>(i0, r2);

        return;
    }

    public final androidx.graphics.opengl.egl.EGLManager obtainEGLManager()
    {
        androidx.graphics.opengl.GLThread r0;
        androidx.graphics.opengl.egl.EGLManager r1, r2, $r6, $r15;
        android.opengl.EGLConfig r3;
        java.util.Iterator r4;
        androidx.graphics.opengl.GLRenderer$EGLContextCallback r5;
        kotlin.jvm.functions.Function0 $r7;
        java.lang.Object $r8, $r11, $r14;
        androidx.graphics.opengl.egl.EGLSpec $r9;
        kotlin.jvm.functions.Function1 $r10;
        java.util.HashSet $r13;
        boolean $z1;

        r0 := @this: androidx.graphics.opengl.GLThread;

        $r15 = r0.<androidx.graphics.opengl.GLThread: androidx.graphics.opengl.egl.EGLManager mEglManager>;

        if $r15 != null goto label3;

        $r6 = new androidx.graphics.opengl.egl.EGLManager;

        $r7 = r0.<androidx.graphics.opengl.GLThread: kotlin.jvm.functions.Function0 mEglSpecFactory>;

        $r8 = interfaceinvoke $r7.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        $r9 = (androidx.graphics.opengl.egl.EGLSpec) $r8;

        specialinvoke $r6.<androidx.graphics.opengl.egl.EGLManager: void <init>(androidx.graphics.opengl.egl.EGLSpec)>($r9);

        r1 = $r6;

        r2 = r1;

        virtualinvoke r2.<androidx.graphics.opengl.egl.EGLManager: void initialize()>();

        $r10 = r0.<androidx.graphics.opengl.GLThread: kotlin.jvm.functions.Function1 mEglConfigFactory>;

        $r11 = interfaceinvoke $r10.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r2);

        r3 = (android.opengl.EGLConfig) $r11;

        virtualinvoke r2.<androidx.graphics.opengl.egl.EGLManager: android.opengl.EGLContext createContext(android.opengl.EGLConfig)>(r3);

        $r13 = r0.<androidx.graphics.opengl.GLThread: java.util.HashSet mEglContextCallback>;

        r4 = virtualinvoke $r13.<java.util.HashSet: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (androidx.graphics.opengl.GLRenderer$EGLContextCallback) $r14;

        interfaceinvoke r5.<androidx.graphics.opengl.GLRenderer$EGLContextCallback: void onEGLContextCreated(androidx.graphics.opengl.egl.EGLManager)>(r2);

        goto label1;

     label2:
        r0.<androidx.graphics.opengl.GLThread: androidx.graphics.opengl.egl.EGLManager mEglManager> = r2;

        $r15 = r1;

     label3:
        return $r15;
    }

    private final void disposeSurfaceSession(androidx.graphics.opengl.GLThread$SurfaceSession)
    {
        androidx.graphics.opengl.GLThread r0;
        androidx.graphics.opengl.GLThread$SurfaceSession r1;
        android.opengl.EGLSurface r2, $r3;
        boolean $z0;
        androidx.graphics.opengl.egl.EGLManager $r4;
        androidx.graphics.opengl.egl.EGLSpec $r5;

        r0 := @this: androidx.graphics.opengl.GLThread;

        r1 := @parameter0: androidx.graphics.opengl.GLThread$SurfaceSession;

        r2 = virtualinvoke r1.<androidx.graphics.opengl.GLThread$SurfaceSession: android.opengl.EGLSurface getEglSurface()>();

        if r2 == null goto label1;

        $r3 = <android.opengl.EGL14: android.opengl.EGLSurface EGL_NO_SURFACE>;

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r2, $r3);

        if $z0 != 0 goto label1;

        $r4 = virtualinvoke r0.<androidx.graphics.opengl.GLThread: androidx.graphics.opengl.egl.EGLManager obtainEGLManager()>();

        $r5 = virtualinvoke $r4.<androidx.graphics.opengl.egl.EGLManager: androidx.graphics.opengl.egl.EGLSpec getEGLSpec()>();

        interfaceinvoke $r5.<androidx.graphics.opengl.egl.EGLSpec: boolean eglDestroySurface(android.opengl.EGLSurface)>(r2);

        virtualinvoke r1.<androidx.graphics.opengl.GLThread$SurfaceSession: void setEglSurface(android.opengl.EGLSurface)>(null);

     label1:
        return;
    }

    private final android.opengl.EGLSurface obtainEGLSurfaceForSession(androidx.graphics.opengl.GLThread$SurfaceSession)
    {
        androidx.graphics.opengl.GLThread r0;
        androidx.graphics.opengl.GLThread$SurfaceSession r1;
        android.opengl.EGLSurface r2, r3, $r4, $r7;
        android.view.Surface $r5;
        int $i0, $i1;
        androidx.graphics.opengl.GLRenderer$RenderCallback $r6;

        r0 := @this: androidx.graphics.opengl.GLThread;

        r1 := @parameter0: androidx.graphics.opengl.GLThread$SurfaceSession;

        $r4 = virtualinvoke r1.<androidx.graphics.opengl.GLThread$SurfaceSession: android.opengl.EGLSurface getEglSurface()>();

        if $r4 == null goto label1;

        $r7 = virtualinvoke r1.<androidx.graphics.opengl.GLThread$SurfaceSession: android.opengl.EGLSurface getEglSurface()>();

        goto label2;

     label1:
        $r5 = virtualinvoke r1.<androidx.graphics.opengl.GLThread$SurfaceSession: android.view.Surface getSurface()>();

        $i0 = virtualinvoke r1.<androidx.graphics.opengl.GLThread$SurfaceSession: int getWidth()>();

        $i1 = virtualinvoke r1.<androidx.graphics.opengl.GLThread$SurfaceSession: int getHeight()>();

        $r6 = virtualinvoke r1.<androidx.graphics.opengl.GLThread$SurfaceSession: androidx.graphics.opengl.GLRenderer$RenderCallback getSurfaceRenderer()>();

        r2 = specialinvoke r0.<androidx.graphics.opengl.GLThread: android.opengl.EGLSurface createEGLSurfaceForSession(android.view.Surface,int,int,androidx.graphics.opengl.GLRenderer$RenderCallback)>($r5, $i0, $i1, $r6);

        r3 = r2;

        virtualinvoke r1.<androidx.graphics.opengl.GLThread$SurfaceSession: void setEglSurface(android.opengl.EGLSurface)>(r3);

        $r7 = r2;

     label2:
        return $r7;
    }

    private final android.opengl.EGLSurface createEGLSurfaceForSession(android.view.Surface, int, int, androidx.graphics.opengl.GLRenderer$RenderCallback)
    {
        androidx.graphics.opengl.GLThread r0;
        android.view.Surface r1;
        int i0, i1;
        androidx.graphics.opengl.GLRenderer$RenderCallback r2;
        androidx.graphics.opengl.egl.EGLManager $r3;
        androidx.graphics.opengl.egl.EGLSpec $r4;
        android.opengl.EGLConfig $r5;
        android.opengl.EGLSurface $r6;

        r0 := @this: androidx.graphics.opengl.GLThread;

        r1 := @parameter0: android.view.Surface;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: androidx.graphics.opengl.GLRenderer$RenderCallback;

        $r3 = virtualinvoke r0.<androidx.graphics.opengl.GLThread: androidx.graphics.opengl.egl.EGLManager obtainEGLManager()>();

        if r1 == null goto label1;

        $r4 = virtualinvoke $r3.<androidx.graphics.opengl.egl.EGLManager: androidx.graphics.opengl.egl.EGLSpec getEGLSpec()>();

        $r5 = virtualinvoke $r3.<androidx.graphics.opengl.egl.EGLManager: android.opengl.EGLConfig getEGLConfig()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r5);

        $r6 = interfaceinvoke r2.<androidx.graphics.opengl.GLRenderer$RenderCallback: android.opengl.EGLSurface onSurfaceCreated(androidx.graphics.opengl.egl.EGLSpec,android.opengl.EGLConfig,android.view.Surface,int,int)>($r4, $r5, r1, i0, i1);

        goto label2;

     label1:
        $r6 = (android.opengl.EGLSurface) null;

     label2:
        return $r6;
    }

    private final void releaseResourcesInternalAndQuit(java.lang.Runnable)
    {
        androidx.graphics.opengl.GLThread r0;
        java.lang.Runnable r1;
        androidx.graphics.opengl.egl.EGLManager r2;
        java.util.HashMap $r3, $r6;
        java.util.Map $r4;
        java.util.Set $r5;
        boolean $z0, $z2;
        java.util.HashSet $r7, $r8;
        java.lang.Object $r9, $r10, $r11;
        androidx.graphics.opengl.GLThread$SurfaceSession $r12;
        java.util.Iterator r13, r15;
        java.util.Map$Entry r14;
        androidx.graphics.opengl.GLRenderer$EGLContextCallback r16;

        r0 := @this: androidx.graphics.opengl.GLThread;

        r1 := @parameter0: java.lang.Runnable;

        r2 = virtualinvoke r0.<androidx.graphics.opengl.GLThread: androidx.graphics.opengl.egl.EGLManager obtainEGLManager()>();

        $r3 = r0.<androidx.graphics.opengl.GLThread: java.util.HashMap mSurfaceSessions>;

        $r4 = (java.util.Map) $r3;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set entrySet()>();

        r13 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r10 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        r14 = (java.util.Map$Entry) $r10;

        $r11 = interfaceinvoke r14.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r12 = (androidx.graphics.opengl.GLThread$SurfaceSession) $r11;

        specialinvoke r0.<androidx.graphics.opengl.GLThread: void disposeSurfaceSession(androidx.graphics.opengl.GLThread$SurfaceSession)>($r12);

        goto label1;

     label2:
        if r1 == null goto label3;

        interfaceinvoke r1.<java.lang.Runnable: void run()>();

        goto label3;

     label3:
        $r6 = r0.<androidx.graphics.opengl.GLThread: java.util.HashMap mSurfaceSessions>;

        virtualinvoke $r6.<java.util.HashMap: void clear()>();

        $r7 = r0.<androidx.graphics.opengl.GLThread: java.util.HashSet mEglContextCallback>;

        r15 = virtualinvoke $r7.<java.util.HashSet: java.util.Iterator iterator()>();

     label4:
        $z2 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r9 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        r16 = (androidx.graphics.opengl.GLRenderer$EGLContextCallback) $r9;

        interfaceinvoke r16.<androidx.graphics.opengl.GLRenderer$EGLContextCallback: void onEGLContextDestroyed(androidx.graphics.opengl.egl.EGLManager)>(r2);

        goto label4;

     label5:
        $r8 = r0.<androidx.graphics.opengl.GLThread: java.util.HashSet mEglContextCallback>;

        virtualinvoke $r8.<java.util.HashSet: void clear()>();

        virtualinvoke r2.<androidx.graphics.opengl.egl.EGLManager: void release()>();

        r0.<androidx.graphics.opengl.GLThread: androidx.graphics.opengl.egl.EGLManager mEglManager> = null;

        virtualinvoke r0.<androidx.graphics.opengl.GLThread: boolean quit()>();

        return;
    }

    private final void requestRenderInternal(int)
    {
        androidx.graphics.opengl.GLThread r0;
        int i0, i1, i2;
        androidx.graphics.opengl.GLThread$SurfaceSession r1, $r12;
        androidx.graphics.opengl.egl.EGLManager r2;
        android.opengl.EGLSurface r3, $r13;
        java.lang.StringBuilder $r4, $r6, $r7;
        androidx.graphics.opengl.GLThread$Companion $r5;
        java.lang.String $r8;
        java.util.HashMap $r9;
        java.lang.Integer $r10;
        java.lang.Object $r11;
        androidx.graphics.opengl.GLRenderer$RenderCallback $r14;

        r0 := @this: androidx.graphics.opengl.GLThread;

        i0 := @parameter0: int;

        $r5 = <androidx.graphics.opengl.GLThread: androidx.graphics.opengl.GLThread$Companion Companion>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requesting render for token: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<androidx.graphics.opengl.GLThread$Companion: void log$graphics_core_release(java.lang.String)>($r8);

        $r9 = r0.<androidx.graphics.opengl.GLThread: java.util.HashMap mSurfaceSessions>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r11 = virtualinvoke $r9.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r10);

        $r12 = (androidx.graphics.opengl.GLThread$SurfaceSession) $r11;

        if $r12 == null goto label5;

        r1 = $r12;

        r2 = virtualinvoke r0.<androidx.graphics.opengl.GLThread: androidx.graphics.opengl.egl.EGLManager obtainEGLManager()>();

        r3 = specialinvoke r0.<androidx.graphics.opengl.GLThread: android.opengl.EGLSurface obtainEGLSurfaceForSession(androidx.graphics.opengl.GLThread$SurfaceSession)>(r1);

        if r3 == null goto label1;

        staticinvoke <androidx.graphics.opengl.egl.EGLManager: boolean makeCurrent$default(androidx.graphics.opengl.egl.EGLManager,android.opengl.EGLSurface,android.opengl.EGLSurface,int,java.lang.Object)>(r2, r3, null, 2, null);

        goto label2;

     label1:
        $r13 = virtualinvoke r2.<androidx.graphics.opengl.egl.EGLManager: android.opengl.EGLSurface getDefaultSurface()>();

        staticinvoke <androidx.graphics.opengl.egl.EGLManager: boolean makeCurrent$default(androidx.graphics.opengl.egl.EGLManager,android.opengl.EGLSurface,android.opengl.EGLSurface,int,java.lang.Object)>(r2, $r13, null, 2, null);

     label2:
        i1 = virtualinvoke r1.<androidx.graphics.opengl.GLThread$SurfaceSession: int getWidth()>();

        i2 = virtualinvoke r1.<androidx.graphics.opengl.GLThread$SurfaceSession: int getHeight()>();

        if i1 <= 0 goto label3;

        if i2 <= 0 goto label3;

        $r14 = virtualinvoke r1.<androidx.graphics.opengl.GLThread$SurfaceSession: androidx.graphics.opengl.GLRenderer$RenderCallback getSurfaceRenderer()>();

        interfaceinvoke $r14.<androidx.graphics.opengl.GLRenderer$RenderCallback: void onDrawFrame(androidx.graphics.opengl.egl.EGLManager)>(r2);

     label3:
        if r3 == null goto label4;

        virtualinvoke r2.<androidx.graphics.opengl.egl.EGLManager: void swapAndFlushBuffers()>();

     label4:
        goto label5;

     label5:
        return;
    }

    private final void attachSurfaceSessionInternal(androidx.graphics.opengl.GLThread$SurfaceSession)
    {
        androidx.graphics.opengl.GLThread r0;
        androidx.graphics.opengl.GLThread$SurfaceSession r1;
        java.util.HashMap $r2;
        java.util.Map $r3;
        int $i0;
        java.lang.Integer $r4;

        r0 := @this: androidx.graphics.opengl.GLThread;

        r1 := @parameter0: androidx.graphics.opengl.GLThread$SurfaceSession;

        $r2 = r0.<androidx.graphics.opengl.GLThread: java.util.HashMap mSurfaceSessions>;

        $r3 = (java.util.Map) $r2;

        $i0 = virtualinvoke r1.<androidx.graphics.opengl.GLThread$SurfaceSession: int getSurfaceToken()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r1);

        return;
    }

    private final void resizeSurfaceSessionInternal(int, int, int)
    {
        androidx.graphics.opengl.GLThread r0;
        int i0, i1, i2;
        androidx.graphics.opengl.GLThread$SurfaceSession r1, r2, $r7;
        java.util.HashMap $r4;
        java.lang.Integer $r5;
        java.lang.Object $r6;

        r0 := @this: androidx.graphics.opengl.GLThread;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r4 = r0.<androidx.graphics.opengl.GLThread: java.util.HashMap mSurfaceSessions>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r5);

        $r7 = (androidx.graphics.opengl.GLThread$SurfaceSession) $r6;

        if $r7 == null goto label1;

        r1 = $r7;

        r2 = r1;

        virtualinvoke r2.<androidx.graphics.opengl.GLThread$SurfaceSession: void setWidth(int)>(i1);

        virtualinvoke r2.<androidx.graphics.opengl.GLThread$SurfaceSession: void setHeight(int)>(i2);

        specialinvoke r0.<androidx.graphics.opengl.GLThread: void disposeSurfaceSession(androidx.graphics.opengl.GLThread$SurfaceSession)>(r1);

        specialinvoke r0.<androidx.graphics.opengl.GLThread: android.opengl.EGLSurface obtainEGLSurfaceForSession(androidx.graphics.opengl.GLThread$SurfaceSession)>(r1);

        goto label1;

     label1:
        return;
    }

    private final void detachSurfaceSessionInternal(int, java.lang.Runnable)
    {
        androidx.graphics.opengl.GLThread r0;
        int i0;
        java.lang.Runnable r1;
        androidx.graphics.opengl.GLThread$SurfaceSession r2;
        java.util.HashMap $r3;
        java.lang.Integer $r4;
        java.lang.Object $r5;

        r0 := @this: androidx.graphics.opengl.GLThread;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Runnable;

        $r3 = r0.<androidx.graphics.opengl.GLThread: java.util.HashMap mSurfaceSessions>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r4);

        r2 = (androidx.graphics.opengl.GLThread$SurfaceSession) $r5;

        if r2 == null goto label1;

        specialinvoke r0.<androidx.graphics.opengl.GLThread: void disposeSurfaceSession(androidx.graphics.opengl.GLThread$SurfaceSession)>(r2);

     label1:
        if r1 == null goto label2;

        interfaceinvoke r1.<java.lang.Runnable: void run()>();

        goto label2;

     label2:
        return;
    }

    private final void withHandler(kotlin.jvm.functions.Function1)
    {
        androidx.graphics.opengl.GLThread r0;
        kotlin.jvm.functions.Function1 r1;
        android.os.Handler r2, $r3;
        java.util.concurrent.atomic.AtomicBoolean $r4;
        boolean $z1;
        java.lang.IllegalStateException $r6;

        r0 := @this: androidx.graphics.opengl.GLThread;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        $r3 = r0.<androidx.graphics.opengl.GLThread: android.os.Handler mHandler>;

        if $r3 != null goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Did you forget to call GLThread.start()?");

        throw $r6;

     label1:
        r2 = $r3;

        $r4 = r0.<androidx.graphics.opengl.GLThread: java.util.concurrent.atomic.AtomicBoolean mIsTearingDown>;

        $z1 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z1 != 0 goto label2;

        interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r2);

     label2:
        return;
    }

    private final void post(android.os.Handler, java.lang.Object, java.lang.Runnable)
    {
        androidx.graphics.opengl.GLThread r0;
        android.os.Handler $r1;
        java.lang.Object r2;
        java.lang.Runnable r3;
        long $l0;

        r0 := @this: androidx.graphics.opengl.GLThread;

        $r1 := @parameter0: android.os.Handler;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Runnable;

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        virtualinvoke $r1.<android.os.Handler: boolean postAtTime(java.lang.Runnable,java.lang.Object,long)>(r3, r2, $l0);

        return;
    }

    private static final void attachSurface$lambda$2$lambda$1(androidx.graphics.opengl.GLThread, int, android.view.Surface, androidx.graphics.opengl.GLRenderer$RenderCallback, int, int)
    {
        androidx.graphics.opengl.GLThread r0, r5;
        int $i0, $i1, $i2;
        android.view.Surface $r1;
        androidx.graphics.opengl.GLRenderer$RenderCallback $r2;
        androidx.graphics.opengl.GLThread$SurfaceSession r3, $r6;

        r0 := @parameter0: androidx.graphics.opengl.GLThread;

        $i0 := @parameter1: int;

        $r1 := @parameter2: android.view.Surface;

        $r2 := @parameter3: androidx.graphics.opengl.GLRenderer$RenderCallback;

        $i1 := @parameter4: int;

        $i2 := @parameter5: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "$renderer");

        $r6 = new androidx.graphics.opengl.GLThread$SurfaceSession;

        specialinvoke $r6.<androidx.graphics.opengl.GLThread$SurfaceSession: void <init>(int,android.view.Surface,androidx.graphics.opengl.GLRenderer$RenderCallback)>($i0, $r1, $r2);

        r3 = $r6;

        r5 = r0;

        virtualinvoke r3.<androidx.graphics.opengl.GLThread$SurfaceSession: void setWidth(int)>($i1);

        virtualinvoke r3.<androidx.graphics.opengl.GLThread$SurfaceSession: void setHeight(int)>($i2);

        specialinvoke r5.<androidx.graphics.opengl.GLThread: void attachSurfaceSessionInternal(androidx.graphics.opengl.GLThread$SurfaceSession)>(r3);

        return;
    }

    private static final void resizeSurface$lambda$4$lambda$3(androidx.graphics.opengl.GLThread, int, int, int, java.lang.Runnable)
    {
        androidx.graphics.opengl.GLThread r0;
        int $i0, $i1, $i2;
        java.lang.Runnable $r1;

        r0 := @parameter0: androidx.graphics.opengl.GLThread;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $r1 := @parameter4: java.lang.Runnable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        specialinvoke r0.<androidx.graphics.opengl.GLThread: void resizeSurfaceSessionInternal(int,int,int)>($i0, $i1, $i2);

        specialinvoke r0.<androidx.graphics.opengl.GLThread: void requestRenderInternal(int)>($i0);

        if $r1 == null goto label1;

        interfaceinvoke $r1.<java.lang.Runnable: void run()>();

        goto label1;

     label1:
        return;
    }

    private static final void addEGLCallbacks$lambda$7$lambda$6(androidx.graphics.opengl.GLThread, java.util.ArrayList)
    {
        androidx.graphics.opengl.GLThread r0;
        java.util.ArrayList $r1;
        androidx.graphics.opengl.egl.EGLManager r2, $r7;
        java.util.Iterator r3;
        androidx.graphics.opengl.GLRenderer$EGLContextCallback r4;
        java.util.Collection $r5;
        java.util.HashSet $r6;
        boolean $z2;
        java.lang.Object $r8;

        r0 := @parameter0: androidx.graphics.opengl.GLThread;

        $r1 := @parameter1: java.util.ArrayList;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$callbacks");

        $r6 = r0.<androidx.graphics.opengl.GLThread: java.util.HashSet mEglContextCallback>;

        $r5 = (java.util.Collection) $r1;

        virtualinvoke $r6.<java.util.HashSet: boolean addAll(java.util.Collection)>($r5);

        $r7 = r0.<androidx.graphics.opengl.GLThread: androidx.graphics.opengl.egl.EGLManager mEglManager>;

        if $r7 == null goto label3;

        r2 = $r7;

        r3 = virtualinvoke $r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (androidx.graphics.opengl.GLRenderer$EGLContextCallback) $r8;

        interfaceinvoke r4.<androidx.graphics.opengl.GLRenderer$EGLContextCallback: void onEGLContextCreated(androidx.graphics.opengl.egl.EGLManager)>(r2);

        goto label1;

     label2:
        goto label3;

     label3:
        return;
    }

    private static final void addEGLCallback$lambda$10$lambda$9(androidx.graphics.opengl.GLThread, androidx.graphics.opengl.GLRenderer$EGLContextCallback)
    {
        androidx.graphics.opengl.GLThread r0;
        androidx.graphics.opengl.GLRenderer$EGLContextCallback $r1;
        androidx.graphics.opengl.egl.EGLManager r2, $r4;
        java.util.HashSet $r3;

        r0 := @parameter0: androidx.graphics.opengl.GLThread;

        $r1 := @parameter1: androidx.graphics.opengl.GLRenderer$EGLContextCallback;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$callbacks");

        $r3 = r0.<androidx.graphics.opengl.GLThread: java.util.HashSet mEglContextCallback>;

        virtualinvoke $r3.<java.util.HashSet: boolean add(java.lang.Object)>($r1);

        $r4 = r0.<androidx.graphics.opengl.GLThread: androidx.graphics.opengl.egl.EGLManager mEglManager>;

        if $r4 == null goto label1;

        r2 = $r4;

        interfaceinvoke $r1.<androidx.graphics.opengl.GLRenderer$EGLContextCallback: void onEGLContextCreated(androidx.graphics.opengl.egl.EGLManager)>(r2);

        goto label1;

     label1:
        return;
    }

    private static final void removeEGLCallback$lambda$12$lambda$11(androidx.graphics.opengl.GLThread, androidx.graphics.opengl.GLRenderer$EGLContextCallback)
    {
        androidx.graphics.opengl.GLThread r0;
        androidx.graphics.opengl.GLRenderer$EGLContextCallback $r1;
        java.util.HashSet $r2;

        r0 := @parameter0: androidx.graphics.opengl.GLThread;

        $r1 := @parameter1: androidx.graphics.opengl.GLRenderer$EGLContextCallback;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$callbacks");

        $r2 = r0.<androidx.graphics.opengl.GLThread: java.util.HashSet mEglContextCallback>;

        virtualinvoke $r2.<java.util.HashSet: boolean remove(java.lang.Object)>($r1);

        return;
    }

    private static final void detachSurface$lambda$14$lambda$13(androidx.graphics.opengl.GLThread, int, java.lang.Runnable)
    {
        androidx.graphics.opengl.GLThread r0;
        int $i0;
        java.lang.Runnable $r1;

        r0 := @parameter0: androidx.graphics.opengl.GLThread;

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.lang.Runnable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        specialinvoke r0.<androidx.graphics.opengl.GLThread: void detachSurfaceSessionInternal(int,java.lang.Runnable)>($i0, $r1);

        return;
    }

    private static final void tearDown$lambda$16$lambda$15(androidx.graphics.opengl.GLThread, java.lang.Runnable)
    {
        androidx.graphics.opengl.GLThread r0;
        java.lang.Runnable $r1;

        r0 := @parameter0: androidx.graphics.opengl.GLThread;

        $r1 := @parameter1: java.lang.Runnable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        specialinvoke r0.<androidx.graphics.opengl.GLThread: void releaseResourcesInternalAndQuit(java.lang.Runnable)>($r1);

        return;
    }

    private static final void requestRender$lambda$18$lambda$17(androidx.graphics.opengl.GLThread, int, java.lang.Runnable)
    {
        androidx.graphics.opengl.GLThread r0;
        int $i0;
        java.lang.Runnable $r1;

        r0 := @parameter0: androidx.graphics.opengl.GLThread;

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.lang.Runnable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        specialinvoke r0.<androidx.graphics.opengl.GLThread: void requestRenderInternal(int)>($i0);

        if $r1 == null goto label1;

        interfaceinvoke $r1.<java.lang.Runnable: void run()>();

        goto label1;

     label1:
        return;
    }

    static void <clinit>()
    {
        androidx.graphics.opengl.GLThread$Companion $r0;

        $r0 = new androidx.graphics.opengl.GLThread$Companion;

        specialinvoke $r0.<androidx.graphics.opengl.GLThread$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.graphics.opengl.GLThread: androidx.graphics.opengl.GLThread$Companion Companion> = $r0;

        return;
    }

androidx.graphics.opengl.GLThread$Companion
    private void <init>()
    {
        androidx.graphics.opengl.GLThread$Companion r0;

        r0 := @this: androidx.graphics.opengl.GLThread$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final void log$graphics_core_release(java.lang.String)
    {
        androidx.graphics.opengl.GLThread$Companion r0;
        java.lang.String r1;

        r0 := @this: androidx.graphics.opengl.GLThread$Companion;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "msg");

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("GLThread", r1);

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.graphics.opengl.GLThread$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.graphics.opengl.GLThread$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.graphics.opengl.GLThread$Companion: void <init>()>();

        return;
    }

androidx.graphics.opengl.GLThread$SurfaceSession
<androidx.graphics.opengl.GLThread$SurfaceSession: int surfaceToken>
<androidx.graphics.opengl.GLThread$SurfaceSession: android.view.Surface surface>
<androidx.graphics.opengl.GLThread$SurfaceSession: androidx.graphics.opengl.GLRenderer$RenderCallback surfaceRenderer>
<androidx.graphics.opengl.GLThread$SurfaceSession: android.opengl.EGLSurface eglSurface>
<androidx.graphics.opengl.GLThread$SurfaceSession: int width>
<androidx.graphics.opengl.GLThread$SurfaceSession: int height>
    public void <init>(int, android.view.Surface, androidx.graphics.opengl.GLRenderer$RenderCallback)
    {
        androidx.graphics.opengl.GLThread$SurfaceSession r0;
        int i0;
        android.view.Surface r1;
        androidx.graphics.opengl.GLRenderer$RenderCallback r2;

        r0 := @this: androidx.graphics.opengl.GLThread$SurfaceSession;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.Surface;

        r2 := @parameter2: androidx.graphics.opengl.GLRenderer$RenderCallback;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "surfaceRenderer");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.graphics.opengl.GLThread$SurfaceSession: int surfaceToken> = i0;

        r0.<androidx.graphics.opengl.GLThread$SurfaceSession: android.view.Surface surface> = r1;

        r0.<androidx.graphics.opengl.GLThread$SurfaceSession: androidx.graphics.opengl.GLRenderer$RenderCallback surfaceRenderer> = r2;

        return;
    }

    public final int getSurfaceToken()
    {
        androidx.graphics.opengl.GLThread$SurfaceSession r0;
        int $i0;

        r0 := @this: androidx.graphics.opengl.GLThread$SurfaceSession;

        $i0 = r0.<androidx.graphics.opengl.GLThread$SurfaceSession: int surfaceToken>;

        return $i0;
    }

    public final android.view.Surface getSurface()
    {
        androidx.graphics.opengl.GLThread$SurfaceSession r0;
        android.view.Surface $r1;

        r0 := @this: androidx.graphics.opengl.GLThread$SurfaceSession;

        $r1 = r0.<androidx.graphics.opengl.GLThread$SurfaceSession: android.view.Surface surface>;

        return $r1;
    }

    public final androidx.graphics.opengl.GLRenderer$RenderCallback getSurfaceRenderer()
    {
        androidx.graphics.opengl.GLThread$SurfaceSession r0;
        androidx.graphics.opengl.GLRenderer$RenderCallback $r1;

        r0 := @this: androidx.graphics.opengl.GLThread$SurfaceSession;

        $r1 = r0.<androidx.graphics.opengl.GLThread$SurfaceSession: androidx.graphics.opengl.GLRenderer$RenderCallback surfaceRenderer>;

        return $r1;
    }

    public final android.opengl.EGLSurface getEglSurface()
    {
        androidx.graphics.opengl.GLThread$SurfaceSession r0;
        android.opengl.EGLSurface $r1;

        r0 := @this: androidx.graphics.opengl.GLThread$SurfaceSession;

        $r1 = r0.<androidx.graphics.opengl.GLThread$SurfaceSession: android.opengl.EGLSurface eglSurface>;

        return $r1;
    }

    public final void setEglSurface(android.opengl.EGLSurface)
    {
        androidx.graphics.opengl.GLThread$SurfaceSession r0;
        android.opengl.EGLSurface r1;

        r0 := @this: androidx.graphics.opengl.GLThread$SurfaceSession;

        r1 := @parameter0: android.opengl.EGLSurface;

        r0.<androidx.graphics.opengl.GLThread$SurfaceSession: android.opengl.EGLSurface eglSurface> = r1;

        return;
    }

    public final int getWidth()
    {
        androidx.graphics.opengl.GLThread$SurfaceSession r0;
        int $i0;

        r0 := @this: androidx.graphics.opengl.GLThread$SurfaceSession;

        $i0 = r0.<androidx.graphics.opengl.GLThread$SurfaceSession: int width>;

        return $i0;
    }

    public final void setWidth(int)
    {
        androidx.graphics.opengl.GLThread$SurfaceSession r0;
        int i0;

        r0 := @this: androidx.graphics.opengl.GLThread$SurfaceSession;

        i0 := @parameter0: int;

        r0.<androidx.graphics.opengl.GLThread$SurfaceSession: int width> = i0;

        return;
    }

    public final int getHeight()
    {
        androidx.graphics.opengl.GLThread$SurfaceSession r0;
        int $i0;

        r0 := @this: androidx.graphics.opengl.GLThread$SurfaceSession;

        $i0 = r0.<androidx.graphics.opengl.GLThread$SurfaceSession: int height>;

        return $i0;
    }

    public final void setHeight(int)
    {
        androidx.graphics.opengl.GLThread$SurfaceSession r0;
        int i0;

        r0 := @this: androidx.graphics.opengl.GLThread$SurfaceSession;

        i0 := @parameter0: int;

        r0.<androidx.graphics.opengl.GLThread$SurfaceSession: int height> = i0;

        return;
    }

