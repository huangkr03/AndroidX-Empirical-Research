androidx.compose.ui.viewinterop.AndroidViewHolder
<androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.compose.ui.input.nestedscroll.NestedScrollDispatcher dispatcher>
<androidx.compose.ui.viewinterop.AndroidViewHolder: android.view.View view>
<androidx.compose.ui.viewinterop.AndroidViewHolder: kotlin.jvm.functions.Function0 update>
<androidx.compose.ui.viewinterop.AndroidViewHolder: boolean hasUpdateBlock>
<androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.compose.ui.Modifier modifier>
<androidx.compose.ui.viewinterop.AndroidViewHolder: kotlin.jvm.functions.Function1 onModifierChanged>
<androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.compose.ui.unit.Density density>
<androidx.compose.ui.viewinterop.AndroidViewHolder: kotlin.jvm.functions.Function1 onDensityChanged>
<androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.lifecycle.LifecycleOwner lifecycleOwner>
<androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.savedstate.SavedStateRegistryOwner savedStateRegistryOwner>
<androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.compose.runtime.snapshots.SnapshotStateObserver snapshotObserver>
<androidx.compose.ui.viewinterop.AndroidViewHolder: kotlin.jvm.functions.Function1 onCommitAffectingUpdate>
<androidx.compose.ui.viewinterop.AndroidViewHolder: kotlin.jvm.functions.Function0 runUpdate>
<androidx.compose.ui.viewinterop.AndroidViewHolder: kotlin.jvm.functions.Function1 onRequestDisallowInterceptTouchEvent>
<androidx.compose.ui.viewinterop.AndroidViewHolder: int[] location>
<androidx.compose.ui.viewinterop.AndroidViewHolder: int lastWidthMeasureSpec>
<androidx.compose.ui.viewinterop.AndroidViewHolder: int lastHeightMeasureSpec>
<androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.core.view.NestedScrollingParentHelper nestedScrollingParentHelper>
<androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.compose.ui.node.LayoutNode layoutNode>
    public void <init>(android.content.Context, androidx.compose.runtime.CompositionContext, androidx.compose.ui.input.nestedscroll.NestedScrollDispatcher)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder r0, r7, r48;
        android.content.Context r1;
        androidx.compose.runtime.CompositionContext r2, r47;
        androidx.compose.ui.input.nestedscroll.NestedScrollDispatcher r3;
        androidx.compose.ui.node.LayoutNode r4, $r23;
        androidx.compose.ui.Modifier r5, $r11, $r25, $r26, $r29, $r32, $r33;
        kotlin.jvm.internal.Ref$ObjectRef r6, $r39;
        androidx.compose.ui.viewinterop.AndroidViewHolder$update$1 $r8;
        kotlin.jvm.functions.Function0 $r9, $r19;
        androidx.compose.ui.Modifier$Companion $r10, $r24;
        androidx.compose.ui.unit.Density $r12, $r36;
        androidx.compose.runtime.snapshots.SnapshotStateObserver $r13;
        androidx.compose.ui.viewinterop.AndroidViewHolder$snapshotObserver$1 $r14;
        kotlin.jvm.functions.Function1 $r15, $r17, $r28, $r31, $r35, $r38, $r41, $r43;
        androidx.compose.ui.viewinterop.AndroidViewHolder$onCommitAffectingUpdate$1 $r16;
        androidx.compose.ui.viewinterop.AndroidViewHolder$runUpdate$1 $r18;
        int[] $r20;
        androidx.core.view.NestedScrollingParentHelper $r21;
        android.view.ViewGroup $r22;
        androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$coreModifier$1 $r27;
        androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$coreModifier$2 $r30;
        androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$1 $r34;
        androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$2 $r37;
        androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$3 $r40;
        androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$4 $r42;
        androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5 $r44;
        androidx.compose.ui.layout.MeasurePolicy $r45;
        android.view.View $r46;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: androidx.compose.runtime.CompositionContext;

        r3 := @parameter2: androidx.compose.ui.input.nestedscroll.NestedScrollDispatcher;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "context");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "dispatcher");

        specialinvoke r0.<android.view.ViewGroup: void <init>(android.content.Context)>(r1);

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.compose.ui.input.nestedscroll.NestedScrollDispatcher dispatcher> = r3;

        if r2 == null goto label1;

        r47 = r2;

        $r46 = (android.view.View) r0;

        staticinvoke <androidx.compose.ui.platform.WindowRecomposer_androidKt: void setCompositionContext(android.view.View,androidx.compose.runtime.CompositionContext)>($r46, r47);

        goto label1;

     label1:
        virtualinvoke r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: void setSaveFromParentEnabled(boolean)>(0);

        $r8 = <androidx.compose.ui.viewinterop.AndroidViewHolder$update$1: androidx.compose.ui.viewinterop.AndroidViewHolder$update$1 INSTANCE>;

        $r9 = (kotlin.jvm.functions.Function0) $r8;

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: kotlin.jvm.functions.Function0 update> = $r9;

        $r10 = <androidx.compose.ui.Modifier: androidx.compose.ui.Modifier$Companion Companion>;

        $r11 = (androidx.compose.ui.Modifier) $r10;

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.compose.ui.Modifier modifier> = $r11;

        $r12 = staticinvoke <androidx.compose.ui.unit.DensityKt: androidx.compose.ui.unit.Density Density$default(float,float,int,java.lang.Object)>(1.0F, 0.0F, 2, null);

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.compose.ui.unit.Density density> = $r12;

        $r13 = new androidx.compose.runtime.snapshots.SnapshotStateObserver;

        $r14 = new androidx.compose.ui.viewinterop.AndroidViewHolder$snapshotObserver$1;

        specialinvoke $r14.<androidx.compose.ui.viewinterop.AndroidViewHolder$snapshotObserver$1: void <init>(androidx.compose.ui.viewinterop.AndroidViewHolder)>(r0);

        $r15 = (kotlin.jvm.functions.Function1) $r14;

        specialinvoke $r13.<androidx.compose.runtime.snapshots.SnapshotStateObserver: void <init>(kotlin.jvm.functions.Function1)>($r15);

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.compose.runtime.snapshots.SnapshotStateObserver snapshotObserver> = $r13;

        $r16 = new androidx.compose.ui.viewinterop.AndroidViewHolder$onCommitAffectingUpdate$1;

        specialinvoke $r16.<androidx.compose.ui.viewinterop.AndroidViewHolder$onCommitAffectingUpdate$1: void <init>(androidx.compose.ui.viewinterop.AndroidViewHolder)>(r0);

        $r17 = (kotlin.jvm.functions.Function1) $r16;

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: kotlin.jvm.functions.Function1 onCommitAffectingUpdate> = $r17;

        $r18 = new androidx.compose.ui.viewinterop.AndroidViewHolder$runUpdate$1;

        specialinvoke $r18.<androidx.compose.ui.viewinterop.AndroidViewHolder$runUpdate$1: void <init>(androidx.compose.ui.viewinterop.AndroidViewHolder)>(r0);

        $r19 = (kotlin.jvm.functions.Function0) $r18;

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: kotlin.jvm.functions.Function0 runUpdate> = $r19;

        $r20 = newarray (int)[2];

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: int[] location> = $r20;

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: int lastWidthMeasureSpec> = -2147483648;

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: int lastHeightMeasureSpec> = -2147483648;

        $r21 = new androidx.core.view.NestedScrollingParentHelper;

        $r22 = (android.view.ViewGroup) r0;

        specialinvoke $r21.<androidx.core.view.NestedScrollingParentHelper: void <init>(android.view.ViewGroup)>($r22);

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.core.view.NestedScrollingParentHelper nestedScrollingParentHelper> = $r21;

        r48 = (androidx.compose.ui.viewinterop.AndroidViewHolder) r0;

        r7 = r0;

        $r23 = new androidx.compose.ui.node.LayoutNode;

        specialinvoke $r23.<androidx.compose.ui.node.LayoutNode: void <init>(boolean,int,int,kotlin.jvm.internal.DefaultConstructorMarker)>(0, 0, 3, null);

        r4 = $r23;

        $r24 = <androidx.compose.ui.Modifier: androidx.compose.ui.Modifier$Companion Companion>;

        $r25 = (androidx.compose.ui.Modifier) $r24;

        $r26 = staticinvoke <androidx.compose.ui.input.pointer.PointerInteropFilter_androidKt: androidx.compose.ui.Modifier pointerInteropFilter(androidx.compose.ui.Modifier,androidx.compose.ui.viewinterop.AndroidViewHolder)>($r25, r48);

        $r27 = new androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$coreModifier$1;

        specialinvoke $r27.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$coreModifier$1: void <init>(androidx.compose.ui.node.LayoutNode,androidx.compose.ui.viewinterop.AndroidViewHolder)>(r4, r0);

        $r28 = (kotlin.jvm.functions.Function1) $r27;

        $r29 = staticinvoke <androidx.compose.ui.draw.DrawModifierKt: androidx.compose.ui.Modifier drawBehind(androidx.compose.ui.Modifier,kotlin.jvm.functions.Function1)>($r26, $r28);

        $r30 = new androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$coreModifier$2;

        specialinvoke $r30.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$coreModifier$2: void <init>(androidx.compose.ui.viewinterop.AndroidViewHolder,androidx.compose.ui.node.LayoutNode)>(r48, r4);

        $r31 = (kotlin.jvm.functions.Function1) $r30;

        r5 = staticinvoke <androidx.compose.ui.layout.OnGloballyPositionedModifierKt: androidx.compose.ui.Modifier onGloballyPositioned(androidx.compose.ui.Modifier,kotlin.jvm.functions.Function1)>($r29, $r31);

        $r32 = r48.<androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.compose.ui.Modifier modifier>;

        $r33 = interfaceinvoke $r32.<androidx.compose.ui.Modifier: androidx.compose.ui.Modifier then(androidx.compose.ui.Modifier)>(r5);

        virtualinvoke r4.<androidx.compose.ui.node.LayoutNode: void setModifier(androidx.compose.ui.Modifier)>($r33);

        $r34 = new androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$1;

        specialinvoke $r34.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$1: void <init>(androidx.compose.ui.node.LayoutNode,androidx.compose.ui.Modifier)>(r4, r5);

        $r35 = (kotlin.jvm.functions.Function1) $r34;

        r48.<androidx.compose.ui.viewinterop.AndroidViewHolder: kotlin.jvm.functions.Function1 onModifierChanged> = $r35;

        $r36 = r48.<androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.compose.ui.unit.Density density>;

        virtualinvoke r4.<androidx.compose.ui.node.LayoutNode: void setDensity(androidx.compose.ui.unit.Density)>($r36);

        $r37 = new androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$2;

        specialinvoke $r37.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$2: void <init>(androidx.compose.ui.node.LayoutNode)>(r4);

        $r38 = (kotlin.jvm.functions.Function1) $r37;

        r48.<androidx.compose.ui.viewinterop.AndroidViewHolder: kotlin.jvm.functions.Function1 onDensityChanged> = $r38;

        $r39 = new kotlin.jvm.internal.Ref$ObjectRef;

        specialinvoke $r39.<kotlin.jvm.internal.Ref$ObjectRef: void <init>()>();

        r6 = $r39;

        $r40 = new androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$3;

        specialinvoke $r40.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$3: void <init>(androidx.compose.ui.viewinterop.AndroidViewHolder,androidx.compose.ui.node.LayoutNode,kotlin.jvm.internal.Ref$ObjectRef)>(r48, r4, r6);

        $r41 = (kotlin.jvm.functions.Function1) $r40;

        virtualinvoke r4.<androidx.compose.ui.node.LayoutNode: void setOnAttach$ui_release(kotlin.jvm.functions.Function1)>($r41);

        $r42 = new androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$4;

        specialinvoke $r42.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$4: void <init>(androidx.compose.ui.viewinterop.AndroidViewHolder,kotlin.jvm.internal.Ref$ObjectRef)>(r48, r6);

        $r43 = (kotlin.jvm.functions.Function1) $r42;

        virtualinvoke r4.<androidx.compose.ui.node.LayoutNode: void setOnDetach$ui_release(kotlin.jvm.functions.Function1)>($r43);

        $r44 = new androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5;

        specialinvoke $r44.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5: void <init>(androidx.compose.ui.viewinterop.AndroidViewHolder,androidx.compose.ui.node.LayoutNode)>(r48, r4);

        $r45 = (androidx.compose.ui.layout.MeasurePolicy) $r44;

        virtualinvoke r4.<androidx.compose.ui.node.LayoutNode: void setMeasurePolicy(androidx.compose.ui.layout.MeasurePolicy)>($r45);

        r7.<androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.compose.ui.node.LayoutNode layoutNode> = r4;

        return;
    }

    public final android.view.View getView()
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder r0;
        android.view.View $r1;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder;

        $r1 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: android.view.View view>;

        return $r1;
    }

    public final void setView$ui_release(android.view.View)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder r0;
        android.view.View r1, $r2;
        kotlin.jvm.functions.Function0 $r3;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder;

        r1 := @parameter0: android.view.View;

        $r2 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: android.view.View view>;

        if r1 == $r2 goto label1;

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: android.view.View view> = r1;

        virtualinvoke r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: void removeAllViewsInLayout()>();

        if r1 == null goto label1;

        virtualinvoke r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: void addView(android.view.View)>(r1);

        $r3 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: kotlin.jvm.functions.Function0 runUpdate>;

        interfaceinvoke $r3.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

     label1:
        return;
    }

    public final kotlin.jvm.functions.Function0 getUpdate()
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder r0;
        kotlin.jvm.functions.Function0 $r1;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder;

        $r1 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: kotlin.jvm.functions.Function0 update>;

        return $r1;
    }

    protected final void setUpdate(kotlin.jvm.functions.Function0)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder r0;
        kotlin.jvm.functions.Function0 r1, $r2;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder;

        r1 := @parameter0: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "value");

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: kotlin.jvm.functions.Function0 update> = r1;

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: boolean hasUpdateBlock> = 1;

        $r2 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: kotlin.jvm.functions.Function0 runUpdate>;

        interfaceinvoke $r2.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        return;
    }

    public final androidx.compose.ui.Modifier getModifier()
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder r0;
        androidx.compose.ui.Modifier $r1;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder;

        $r1 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.compose.ui.Modifier modifier>;

        return $r1;
    }

    public final void setModifier(androidx.compose.ui.Modifier)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder r0;
        androidx.compose.ui.Modifier r1, $r2;
        kotlin.jvm.functions.Function1 $r3;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder;

        r1 := @parameter0: androidx.compose.ui.Modifier;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "value");

        $r2 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.compose.ui.Modifier modifier>;

        if r1 == $r2 goto label1;

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.compose.ui.Modifier modifier> = r1;

        $r3 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: kotlin.jvm.functions.Function1 onModifierChanged>;

        if $r3 == null goto label1;

        interfaceinvoke $r3.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r1);

        goto label1;

     label1:
        return;
    }

    public final kotlin.jvm.functions.Function1 getOnModifierChanged$ui_release()
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder r0;
        kotlin.jvm.functions.Function1 $r1;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder;

        $r1 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: kotlin.jvm.functions.Function1 onModifierChanged>;

        return $r1;
    }

    public final void setOnModifierChanged$ui_release(kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder r0;
        kotlin.jvm.functions.Function1 r1;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: kotlin.jvm.functions.Function1 onModifierChanged> = r1;

        return;
    }

    public final androidx.compose.ui.unit.Density getDensity()
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder r0;
        androidx.compose.ui.unit.Density $r1;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder;

        $r1 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.compose.ui.unit.Density density>;

        return $r1;
    }

    public final void setDensity(androidx.compose.ui.unit.Density)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder r0;
        androidx.compose.ui.unit.Density r1, $r2;
        kotlin.jvm.functions.Function1 $r3;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder;

        r1 := @parameter0: androidx.compose.ui.unit.Density;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "value");

        $r2 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.compose.ui.unit.Density density>;

        if r1 == $r2 goto label1;

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.compose.ui.unit.Density density> = r1;

        $r3 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: kotlin.jvm.functions.Function1 onDensityChanged>;

        if $r3 == null goto label1;

        interfaceinvoke $r3.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r1);

        goto label1;

     label1:
        return;
    }

    public final kotlin.jvm.functions.Function1 getOnDensityChanged$ui_release()
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder r0;
        kotlin.jvm.functions.Function1 $r1;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder;

        $r1 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: kotlin.jvm.functions.Function1 onDensityChanged>;

        return $r1;
    }

    public final void setOnDensityChanged$ui_release(kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder r0;
        kotlin.jvm.functions.Function1 r1;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: kotlin.jvm.functions.Function1 onDensityChanged> = r1;

        return;
    }

    public final androidx.lifecycle.LifecycleOwner getLifecycleOwner()
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder r0;
        androidx.lifecycle.LifecycleOwner $r1;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder;

        $r1 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.lifecycle.LifecycleOwner lifecycleOwner>;

        return $r1;
    }

    public final void setLifecycleOwner(androidx.lifecycle.LifecycleOwner)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder r0;
        androidx.lifecycle.LifecycleOwner r1, $r2;
        android.view.View $r3;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder;

        r1 := @parameter0: androidx.lifecycle.LifecycleOwner;

        $r2 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.lifecycle.LifecycleOwner lifecycleOwner>;

        if r1 == $r2 goto label1;

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.lifecycle.LifecycleOwner lifecycleOwner> = r1;

        $r3 = (android.view.View) r0;

        staticinvoke <androidx.lifecycle.ViewTreeLifecycleOwner: void set(android.view.View,androidx.lifecycle.LifecycleOwner)>($r3, r1);

     label1:
        return;
    }

    public final androidx.savedstate.SavedStateRegistryOwner getSavedStateRegistryOwner()
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder r0;
        androidx.savedstate.SavedStateRegistryOwner $r1;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder;

        $r1 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.savedstate.SavedStateRegistryOwner savedStateRegistryOwner>;

        return $r1;
    }

    public final void setSavedStateRegistryOwner(androidx.savedstate.SavedStateRegistryOwner)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder r0;
        androidx.savedstate.SavedStateRegistryOwner r1, $r2;
        android.view.View $r3;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder;

        r1 := @parameter0: androidx.savedstate.SavedStateRegistryOwner;

        $r2 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.savedstate.SavedStateRegistryOwner savedStateRegistryOwner>;

        if r1 == $r2 goto label1;

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.savedstate.SavedStateRegistryOwner savedStateRegistryOwner> = r1;

        $r3 = (android.view.View) r0;

        staticinvoke <androidx.savedstate.ViewTreeSavedStateRegistryOwner: void set(android.view.View,androidx.savedstate.SavedStateRegistryOwner)>($r3, r1);

     label1:
        return;
    }

    public final kotlin.jvm.functions.Function1 getOnRequestDisallowInterceptTouchEvent$ui_release()
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder r0;
        kotlin.jvm.functions.Function1 $r1;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder;

        $r1 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: kotlin.jvm.functions.Function1 onRequestDisallowInterceptTouchEvent>;

        return $r1;
    }

    public final void setOnRequestDisallowInterceptTouchEvent$ui_release(kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder r0;
        kotlin.jvm.functions.Function1 r1;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: kotlin.jvm.functions.Function1 onRequestDisallowInterceptTouchEvent> = r1;

        return;
    }

    protected void onMeasure(int, int)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder r0;
        int i0, i1, $i2, $i4, $i5;
        android.view.View $r1, $r2, $r3;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: android.view.View view>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<android.view.View: void measure(int,int)>(i0, i1);

        goto label1;

     label1:
        $r2 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: android.view.View view>;

        if $r2 == null goto label2;

        $i2 = virtualinvoke $r2.<android.view.View: int getMeasuredWidth()>();

        $i4 = $i2;

        goto label3;

     label2:
        $i4 = 0;

     label3:
        $r3 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: android.view.View view>;

        if $r3 == null goto label4;

        $i5 = virtualinvoke $r3.<android.view.View: int getMeasuredHeight()>();

        goto label5;

     label4:
        $i5 = 0;

     label5:
        virtualinvoke r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: void setMeasuredDimension(int,int)>($i4, $i5);

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: int lastWidthMeasureSpec> = i0;

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: int lastHeightMeasureSpec> = i1;

        return;
    }

    public final void remeasure()
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder;

        $i0 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: int lastWidthMeasureSpec>;

        if $i0 == -2147483648 goto label1;

        $i1 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: int lastHeightMeasureSpec>;

        if $i1 != -2147483648 goto label2;

     label1:
        return;

     label2:
        $i3 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: int lastWidthMeasureSpec>;

        $i2 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: int lastHeightMeasureSpec>;

        virtualinvoke r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: void measure(int,int)>($i3, $i2);

        return;
    }

    protected void onLayout(boolean, int, int, int, int)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder r0;
        boolean z0;
        int i0, i1, i2, i3, $i4, $i5;
        android.view.View $r1;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $r1 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: android.view.View view>;

        if $r1 == null goto label1;

        $i5 = i2 - i0;

        $i4 = i3 - i1;

        virtualinvoke $r1.<android.view.View: void layout(int,int,int,int)>(0, 0, $i5, $i4);

        goto label1;

     label1:
        return;
    }

    public android.view.ViewGroup$LayoutParams getLayoutParams()
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder r0;
        android.view.View $r1;
        android.view.ViewGroup$LayoutParams $r2;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder;

        $r1 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: android.view.View view>;

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        if $r2 != null goto label2;

     label1:
        $r2 = new android.view.ViewGroup$LayoutParams;

        specialinvoke $r2.<android.view.ViewGroup$LayoutParams: void <init>(int,int)>(-1, -1);

     label2:
        return $r2;
    }

    public void requestDisallowInterceptTouchEvent(boolean)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder r0;
        boolean z0;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Boolean $r2;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder;

        z0 := @parameter0: boolean;

        $r1 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: kotlin.jvm.functions.Function1 onRequestDisallowInterceptTouchEvent>;

        if $r1 == null goto label1;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        goto label1;

     label1:
        specialinvoke r0.<android.view.ViewGroup: void requestDisallowInterceptTouchEvent(boolean)>(z0);

        return;
    }

    protected void onAttachedToWindow()
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder r0;
        androidx.compose.runtime.snapshots.SnapshotStateObserver $r1;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder;

        specialinvoke r0.<android.view.ViewGroup: void onAttachedToWindow()>();

        $r1 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.compose.runtime.snapshots.SnapshotStateObserver snapshotObserver>;

        virtualinvoke $r1.<androidx.compose.runtime.snapshots.SnapshotStateObserver: void start()>();

        return;
    }

    protected void onDetachedFromWindow()
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder r0;
        androidx.compose.runtime.snapshots.SnapshotStateObserver $r1, $r2;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder;

        specialinvoke r0.<android.view.ViewGroup: void onDetachedFromWindow()>();

        $r1 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.compose.runtime.snapshots.SnapshotStateObserver snapshotObserver>;

        virtualinvoke $r1.<androidx.compose.runtime.snapshots.SnapshotStateObserver: void stop()>();

        $r2 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.compose.runtime.snapshots.SnapshotStateObserver snapshotObserver>;

        virtualinvoke $r2.<androidx.compose.runtime.snapshots.SnapshotStateObserver: void clear()>();

        return;
    }

    public android.view.ViewParent invalidateChildInParent(int[], android.graphics.Rect)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder r0;
        int[] r1;
        android.graphics.Rect r2;
        androidx.compose.ui.node.LayoutNode $r4;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder;

        r1 := @parameter0: int[];

        r2 := @parameter1: android.graphics.Rect;

        specialinvoke r0.<android.view.ViewGroup: android.view.ViewParent invalidateChildInParent(int[],android.graphics.Rect)>(r1, r2);

        $r4 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.compose.ui.node.LayoutNode layoutNode>;

        virtualinvoke $r4.<androidx.compose.ui.node.LayoutNode: void invalidateLayer$ui_release()>();

        return null;
    }

    public void onDescendantInvalidated(android.view.View, android.view.View)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder r0;
        android.view.View r1, r2;
        androidx.compose.ui.node.LayoutNode $r3;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "child");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "target");

        specialinvoke r0.<android.view.ViewGroup: void onDescendantInvalidated(android.view.View,android.view.View)>(r1, r2);

        $r3 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.compose.ui.node.LayoutNode layoutNode>;

        virtualinvoke $r3.<androidx.compose.ui.node.LayoutNode: void invalidateLayer$ui_release()>();

        return;
    }

    protected void onWindowVisibilityChanged(int)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder r0;
        int i0, $i1;
        androidx.compose.ui.node.LayoutNode $r1;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder;

        i0 := @parameter0: int;

        specialinvoke r0.<android.view.ViewGroup: void onWindowVisibilityChanged(int)>(i0);

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 >= 23 goto label1;

        if i0 != 0 goto label1;

        $r1 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.compose.ui.node.LayoutNode layoutNode>;

        virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: void invalidateLayer$ui_release()>();

     label1:
        return;
    }

    public boolean gatherTransparentRegion(android.graphics.Region)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder r0;
        android.graphics.Region r1;
        int[] $r2, $r3, $r4, $r5, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        android.graphics.Region$Op $r7;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder;

        r1 := @parameter0: android.graphics.Region;

        if r1 != null goto label1;

        return 1;

     label1:
        $r2 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: int[] location>;

        virtualinvoke r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: void getLocationInWindow(int[])>($r2);

        $r3 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: int[] location>;

        $i0 = $r3[0];

        $r4 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: int[] location>;

        $i1 = $r4[1];

        $r5 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: int[] location>;

        $i2 = $r5[0];

        $i3 = virtualinvoke r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: int getWidth()>();

        $i4 = $i2 + $i3;

        $r6 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: int[] location>;

        $i5 = $r6[1];

        $i6 = virtualinvoke r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: int getHeight()>();

        $i7 = $i5 + $i6;

        $r7 = <android.graphics.Region$Op: android.graphics.Region$Op DIFFERENCE>;

        virtualinvoke r1.<android.graphics.Region: boolean op(int,int,int,int,android.graphics.Region$Op)>($i0, $i1, $i4, $i7, $r7);

        return 1;
    }

    public final androidx.compose.ui.node.LayoutNode getLayoutNode()
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder r0;
        androidx.compose.ui.node.LayoutNode $r1;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder;

        $r1 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.compose.ui.node.LayoutNode layoutNode>;

        return $r1;
    }

    private final int obtainMeasureSpec(int, int, int)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder r0;
        int i0, i1, i2, $i3, $i4;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        if i2 >= 0 goto label1;

        if i0 != i1 goto label2;

     label1:
        $i3 = staticinvoke <kotlin.ranges.RangesKt: int coerceIn(int,int,int)>(i2, i0, i1);

        $i4 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>($i3, 1073741824);

        goto label5;

     label2:
        if i2 != -2 goto label3;

        if i1 == 2147483647 goto label3;

        $i4 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(i1, -2147483648);

        goto label5;

     label3:
        if i2 != -1 goto label4;

        if i1 == 2147483647 goto label4;

        $i4 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(i1, 1073741824);

        goto label5;

     label4:
        $i4 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(0, 0);

     label5:
        return $i4;
    }

    public boolean shouldDelayChildPressedState()
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder r0;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder;

        return 1;
    }

    public boolean onStartNestedScroll(android.view.View, android.view.View, int, int)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder r0;
        android.view.View r1, r2;
        int i0, i1, $i2, $i3;
        boolean $z0;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "child");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "target");

        $i2 = i0 & 2;

        if $i2 != 0 goto label1;

        $i3 = i0 & 1;

        if $i3 == 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public int getNestedScrollAxes()
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder r0;
        androidx.core.view.NestedScrollingParentHelper $r1;
        int $i0;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder;

        $r1 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.core.view.NestedScrollingParentHelper nestedScrollingParentHelper>;

        $i0 = virtualinvoke $r1.<androidx.core.view.NestedScrollingParentHelper: int getNestedScrollAxes()>();

        return $i0;
    }

    public void onNestedScrollAccepted(android.view.View, android.view.View, int, int)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder r0;
        android.view.View r1, r2;
        int i0, i1;
        androidx.core.view.NestedScrollingParentHelper $r3;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "child");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "target");

        $r3 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.core.view.NestedScrollingParentHelper nestedScrollingParentHelper>;

        virtualinvoke $r3.<androidx.core.view.NestedScrollingParentHelper: void onNestedScrollAccepted(android.view.View,android.view.View,int,int)>(r1, r2, i0, i1);

        return;
    }

    public void onStopNestedScroll(android.view.View, int)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder r0;
        android.view.View r1;
        int i0;
        androidx.core.view.NestedScrollingParentHelper $r2;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "target");

        $r2 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.core.view.NestedScrollingParentHelper nestedScrollingParentHelper>;

        virtualinvoke $r2.<androidx.core.view.NestedScrollingParentHelper: void onStopNestedScroll(android.view.View,int)>(r1, i0);

        return;
    }

    public void onNestedScroll(android.view.View, int, int, int, int, int, int[])
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder r0;
        android.view.View r1;
        int i0, i1, i2, i3, i4, $i8, $i9, $i10;
        int[] r2;
        long l5, $l6, $l7;
        boolean $z0;
        androidx.compose.ui.input.nestedscroll.NestedScrollDispatcher $r3;
        float $f0, $f1, $f2, $f3, $f4, $f5;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        r2 := @parameter6: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "target");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "consumed");

        $z0 = virtualinvoke r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: boolean isNestedScrollingEnabled()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.compose.ui.input.nestedscroll.NestedScrollDispatcher dispatcher>;

        $f0 = staticinvoke <androidx.compose.ui.viewinterop.AndroidViewHolder_androidKt: float access$toComposeOffset(int)>(i0);

        $f1 = staticinvoke <androidx.compose.ui.viewinterop.AndroidViewHolder_androidKt: float access$toComposeOffset(int)>(i1);

        $l6 = staticinvoke <androidx.compose.ui.geometry.OffsetKt: long Offset(float,float)>($f0, $f1);

        $f2 = staticinvoke <androidx.compose.ui.viewinterop.AndroidViewHolder_androidKt: float access$toComposeOffset(int)>(i2);

        $f3 = staticinvoke <androidx.compose.ui.viewinterop.AndroidViewHolder_androidKt: float access$toComposeOffset(int)>(i3);

        $l7 = staticinvoke <androidx.compose.ui.geometry.OffsetKt: long Offset(float,float)>($f2, $f3);

        $i8 = staticinvoke <androidx.compose.ui.viewinterop.AndroidViewHolder_androidKt: int access$toNestedScrollSource(int)>(i4);

        l5 = virtualinvoke $r3.<androidx.compose.ui.input.nestedscroll.NestedScrollDispatcher: long dispatchPostScroll-DzOQY0M(long,long,int)>($l6, $l7, $i8);

        $f4 = staticinvoke <androidx.compose.ui.geometry.Offset: float getX-impl(long)>(l5);

        $i9 = staticinvoke <androidx.compose.ui.platform.NestedScrollInteropConnectionKt: int composeToViewOffset(float)>($f4);

        r2[0] = $i9;

        $f5 = staticinvoke <androidx.compose.ui.geometry.Offset: float getY-impl(long)>(l5);

        $i10 = staticinvoke <androidx.compose.ui.platform.NestedScrollInteropConnectionKt: int composeToViewOffset(float)>($f5);

        r2[1] = $i10;

        return;
    }

    public void onNestedScroll(android.view.View, int, int, int, int, int)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder r0;
        android.view.View r1;
        int i0, i1, i2, i3, i4, $i7;
        boolean $z0;
        androidx.compose.ui.input.nestedscroll.NestedScrollDispatcher $r2;
        float $f0, $f1, $f2, $f3;
        long $l5, $l6;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "target");

        $z0 = virtualinvoke r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: boolean isNestedScrollingEnabled()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.compose.ui.input.nestedscroll.NestedScrollDispatcher dispatcher>;

        $f0 = staticinvoke <androidx.compose.ui.viewinterop.AndroidViewHolder_androidKt: float access$toComposeOffset(int)>(i0);

        $f1 = staticinvoke <androidx.compose.ui.viewinterop.AndroidViewHolder_androidKt: float access$toComposeOffset(int)>(i1);

        $l5 = staticinvoke <androidx.compose.ui.geometry.OffsetKt: long Offset(float,float)>($f0, $f1);

        $f2 = staticinvoke <androidx.compose.ui.viewinterop.AndroidViewHolder_androidKt: float access$toComposeOffset(int)>(i2);

        $f3 = staticinvoke <androidx.compose.ui.viewinterop.AndroidViewHolder_androidKt: float access$toComposeOffset(int)>(i3);

        $l6 = staticinvoke <androidx.compose.ui.geometry.OffsetKt: long Offset(float,float)>($f2, $f3);

        $i7 = staticinvoke <androidx.compose.ui.viewinterop.AndroidViewHolder_androidKt: int access$toNestedScrollSource(int)>(i4);

        virtualinvoke $r2.<androidx.compose.ui.input.nestedscroll.NestedScrollDispatcher: long dispatchPostScroll-DzOQY0M(long,long,int)>($l5, $l6, $i7);

        return;
    }

    public void onNestedPreScroll(android.view.View, int, int, int[], int)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder r0;
        android.view.View r1;
        int i0, i1, i2, $i5, $i6, $i7;
        int[] r2;
        long l3, $l4;
        boolean $z0;
        androidx.compose.ui.input.nestedscroll.NestedScrollDispatcher $r3;
        float $f0, $f1, $f2, $f3;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: int[];

        i2 := @parameter4: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "target");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "consumed");

        $z0 = virtualinvoke r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: boolean isNestedScrollingEnabled()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.compose.ui.input.nestedscroll.NestedScrollDispatcher dispatcher>;

        $f0 = staticinvoke <androidx.compose.ui.viewinterop.AndroidViewHolder_androidKt: float access$toComposeOffset(int)>(i0);

        $f1 = staticinvoke <androidx.compose.ui.viewinterop.AndroidViewHolder_androidKt: float access$toComposeOffset(int)>(i1);

        $l4 = staticinvoke <androidx.compose.ui.geometry.OffsetKt: long Offset(float,float)>($f0, $f1);

        $i5 = staticinvoke <androidx.compose.ui.viewinterop.AndroidViewHolder_androidKt: int access$toNestedScrollSource(int)>(i2);

        l3 = virtualinvoke $r3.<androidx.compose.ui.input.nestedscroll.NestedScrollDispatcher: long dispatchPreScroll-OzD1aCk(long,int)>($l4, $i5);

        $f2 = staticinvoke <androidx.compose.ui.geometry.Offset: float getX-impl(long)>(l3);

        $i6 = staticinvoke <androidx.compose.ui.platform.NestedScrollInteropConnectionKt: int composeToViewOffset(float)>($f2);

        r2[0] = $i6;

        $f3 = staticinvoke <androidx.compose.ui.geometry.Offset: float getY-impl(long)>(l3);

        $i7 = staticinvoke <androidx.compose.ui.platform.NestedScrollInteropConnectionKt: int composeToViewOffset(float)>($f3);

        r2[1] = $i7;

        return;
    }

    public boolean onNestedFling(android.view.View, float, float, boolean)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder r0;
        android.view.View r1;
        float f0, f1, $f2, $f3;
        boolean z0, $z1;
        long l0;
        androidx.compose.ui.input.nestedscroll.NestedScrollDispatcher $r2;
        kotlinx.coroutines.CoroutineScope $r3;
        androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedFling$1 $r4;
        kotlin.jvm.functions.Function2 $r5;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder;

        r1 := @parameter0: android.view.View;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        z0 := @parameter3: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "target");

        $z1 = virtualinvoke r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: boolean isNestedScrollingEnabled()>();

        if $z1 != 0 goto label1;

        return 0;

     label1:
        $f2 = staticinvoke <androidx.compose.ui.viewinterop.AndroidViewHolder_androidKt: float access$toComposeVelocity(float)>(f0);

        $f3 = staticinvoke <androidx.compose.ui.viewinterop.AndroidViewHolder_androidKt: float access$toComposeVelocity(float)>(f1);

        l0 = staticinvoke <androidx.compose.ui.unit.VelocityKt: long Velocity(float,float)>($f2, $f3);

        $r2 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.compose.ui.input.nestedscroll.NestedScrollDispatcher dispatcher>;

        $r3 = virtualinvoke $r2.<androidx.compose.ui.input.nestedscroll.NestedScrollDispatcher: kotlinx.coroutines.CoroutineScope getCoroutineScope()>();

        $r4 = new androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedFling$1;

        specialinvoke $r4.<androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedFling$1: void <init>(boolean,androidx.compose.ui.viewinterop.AndroidViewHolder,long,kotlin.coroutines.Continuation)>(z0, r0, l0, null);

        $r5 = (kotlin.jvm.functions.Function2) $r4;

        staticinvoke <kotlinx.coroutines.BuildersKt: kotlinx.coroutines.Job launch$default(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2,int,java.lang.Object)>($r3, null, null, $r5, 3, null);

        return 0;
    }

    public boolean onNestedPreFling(android.view.View, float, float)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder r0;
        android.view.View r1;
        float f0, f1, $f2, $f3;
        long l0;
        boolean $z0;
        androidx.compose.ui.input.nestedscroll.NestedScrollDispatcher $r2;
        kotlinx.coroutines.CoroutineScope $r3;
        androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedPreFling$1 $r4;
        kotlin.jvm.functions.Function2 $r5;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder;

        r1 := @parameter0: android.view.View;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "target");

        $z0 = virtualinvoke r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: boolean isNestedScrollingEnabled()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $f2 = staticinvoke <androidx.compose.ui.viewinterop.AndroidViewHolder_androidKt: float access$toComposeVelocity(float)>(f0);

        $f3 = staticinvoke <androidx.compose.ui.viewinterop.AndroidViewHolder_androidKt: float access$toComposeVelocity(float)>(f1);

        l0 = staticinvoke <androidx.compose.ui.unit.VelocityKt: long Velocity(float,float)>($f2, $f3);

        $r2 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.compose.ui.input.nestedscroll.NestedScrollDispatcher dispatcher>;

        $r3 = virtualinvoke $r2.<androidx.compose.ui.input.nestedscroll.NestedScrollDispatcher: kotlinx.coroutines.CoroutineScope getCoroutineScope()>();

        $r4 = new androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedPreFling$1;

        specialinvoke $r4.<androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedPreFling$1: void <init>(androidx.compose.ui.viewinterop.AndroidViewHolder,long,kotlin.coroutines.Continuation)>(r0, l0, null);

        $r5 = (kotlin.jvm.functions.Function2) $r4;

        staticinvoke <kotlinx.coroutines.BuildersKt: kotlinx.coroutines.Job launch$default(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2,int,java.lang.Object)>($r3, null, null, $r5, 3, null);

        return 0;
    }

    public boolean isNestedScrollingEnabled()
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder r0;
        android.view.View $r1;
        boolean $z0;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder;

        $r1 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: android.view.View view>;

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<android.view.View: boolean isNestedScrollingEnabled()>();

        goto label2;

     label1:
        $z0 = specialinvoke r0.<android.view.ViewGroup: boolean isNestedScrollingEnabled()>();

     label2:
        return $z0;
    }

    public static final androidx.compose.ui.input.nestedscroll.NestedScrollDispatcher access$getDispatcher$p(androidx.compose.ui.viewinterop.AndroidViewHolder)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder $r0;
        androidx.compose.ui.input.nestedscroll.NestedScrollDispatcher $r1;

        $r0 := @parameter0: androidx.compose.ui.viewinterop.AndroidViewHolder;

        $r1 = $r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.compose.ui.input.nestedscroll.NestedScrollDispatcher dispatcher>;

        return $r1;
    }

    public static final kotlin.jvm.functions.Function0 access$getRunUpdate$p(androidx.compose.ui.viewinterop.AndroidViewHolder)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder $r0;
        kotlin.jvm.functions.Function0 $r1;

        $r0 := @parameter0: androidx.compose.ui.viewinterop.AndroidViewHolder;

        $r1 = $r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: kotlin.jvm.functions.Function0 runUpdate>;

        return $r1;
    }

    public static final boolean access$getHasUpdateBlock$p(androidx.compose.ui.viewinterop.AndroidViewHolder)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder $r0;
        boolean $z0;

        $r0 := @parameter0: androidx.compose.ui.viewinterop.AndroidViewHolder;

        $z0 = $r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: boolean hasUpdateBlock>;

        return $z0;
    }

    public static final androidx.compose.runtime.snapshots.SnapshotStateObserver access$getSnapshotObserver$p(androidx.compose.ui.viewinterop.AndroidViewHolder)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder $r0;
        androidx.compose.runtime.snapshots.SnapshotStateObserver $r1;

        $r0 := @parameter0: androidx.compose.ui.viewinterop.AndroidViewHolder;

        $r1 = $r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.compose.runtime.snapshots.SnapshotStateObserver snapshotObserver>;

        return $r1;
    }

    public static final kotlin.jvm.functions.Function1 access$getOnCommitAffectingUpdate$p(androidx.compose.ui.viewinterop.AndroidViewHolder)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder $r0;
        kotlin.jvm.functions.Function1 $r1;

        $r0 := @parameter0: androidx.compose.ui.viewinterop.AndroidViewHolder;

        $r1 = $r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: kotlin.jvm.functions.Function1 onCommitAffectingUpdate>;

        return $r1;
    }

    public static final int access$obtainMeasureSpec(androidx.compose.ui.viewinterop.AndroidViewHolder, int, int, int)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder $r0;
        int i0, i1, i2, $i3;

        $r0 := @parameter0: androidx.compose.ui.viewinterop.AndroidViewHolder;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $i3 = specialinvoke $r0.<androidx.compose.ui.viewinterop.AndroidViewHolder: int obtainMeasureSpec(int,int,int)>(i0, i1, i2);

        return $i3;
    }

androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$1
<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$1: androidx.compose.ui.node.LayoutNode $layoutNode>
<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$1: androidx.compose.ui.Modifier $coreModifier>
    void <init>(androidx.compose.ui.node.LayoutNode, androidx.compose.ui.Modifier)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$1 r0;
        androidx.compose.ui.node.LayoutNode $r1;
        androidx.compose.ui.Modifier $r2;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$1;

        $r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        $r2 := @parameter1: androidx.compose.ui.Modifier;

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$1: androidx.compose.ui.node.LayoutNode $layoutNode> = $r1;

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$1: androidx.compose.ui.Modifier $coreModifier> = $r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(androidx.compose.ui.Modifier)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$1 r0;
        androidx.compose.ui.Modifier r1, $r2, $r4;
        androidx.compose.ui.node.LayoutNode $r3;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$1;

        r1 := @parameter0: androidx.compose.ui.Modifier;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        $r3 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$1: androidx.compose.ui.node.LayoutNode $layoutNode>;

        $r2 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$1: androidx.compose.ui.Modifier $coreModifier>;

        $r4 = interfaceinvoke r1.<androidx.compose.ui.Modifier: androidx.compose.ui.Modifier then(androidx.compose.ui.Modifier)>($r2);

        virtualinvoke $r3.<androidx.compose.ui.node.LayoutNode: void setModifier(androidx.compose.ui.Modifier)>($r4);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$1 r0;
        java.lang.Object r1;
        androidx.compose.ui.Modifier $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.ui.Modifier) r1;

        virtualinvoke r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$1: void invoke(androidx.compose.ui.Modifier)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$2
<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$2: androidx.compose.ui.node.LayoutNode $layoutNode>
    void <init>(androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$2 r0;
        androidx.compose.ui.node.LayoutNode $r1;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$2;

        $r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$2: androidx.compose.ui.node.LayoutNode $layoutNode> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(androidx.compose.ui.unit.Density)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$2 r0;
        androidx.compose.ui.unit.Density r1;
        androidx.compose.ui.node.LayoutNode $r2;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$2;

        r1 := @parameter0: androidx.compose.ui.unit.Density;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        $r2 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$2: androidx.compose.ui.node.LayoutNode $layoutNode>;

        virtualinvoke $r2.<androidx.compose.ui.node.LayoutNode: void setDensity(androidx.compose.ui.unit.Density)>(r1);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$2 r0;
        java.lang.Object r1;
        androidx.compose.ui.unit.Density $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.ui.unit.Density) r1;

        virtualinvoke r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$2: void invoke(androidx.compose.ui.unit.Density)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$3
<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$3: androidx.compose.ui.viewinterop.AndroidViewHolder $this_run>
<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$3: androidx.compose.ui.node.LayoutNode $layoutNode>
<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$3: kotlin.jvm.internal.Ref$ObjectRef $viewRemovedOnDetach>
    void <init>(androidx.compose.ui.viewinterop.AndroidViewHolder, androidx.compose.ui.node.LayoutNode, kotlin.jvm.internal.Ref$ObjectRef)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$3 r0;
        androidx.compose.ui.viewinterop.AndroidViewHolder $r1;
        androidx.compose.ui.node.LayoutNode $r2;
        kotlin.jvm.internal.Ref$ObjectRef $r3;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$3;

        $r1 := @parameter0: androidx.compose.ui.viewinterop.AndroidViewHolder;

        $r2 := @parameter1: androidx.compose.ui.node.LayoutNode;

        $r3 := @parameter2: kotlin.jvm.internal.Ref$ObjectRef;

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$3: androidx.compose.ui.viewinterop.AndroidViewHolder $this_run> = $r1;

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$3: androidx.compose.ui.node.LayoutNode $layoutNode> = $r2;

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$3: kotlin.jvm.internal.Ref$ObjectRef $viewRemovedOnDetach> = $r3;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(androidx.compose.ui.node.Owner)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$3 r0;
        androidx.compose.ui.node.Owner r1;
        boolean $z0;
        kotlin.jvm.internal.Ref$ObjectRef $r2, $r4;
        java.lang.Object $r3, $r5;
        android.view.View $r6;
        androidx.compose.ui.viewinterop.AndroidViewHolder $r7, $r9;
        androidx.compose.ui.node.LayoutNode $r8;
        androidx.compose.ui.platform.AndroidComposeView $r10;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$3;

        r1 := @parameter0: androidx.compose.ui.node.Owner;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "owner");

        $z0 = r1 instanceof androidx.compose.ui.platform.AndroidComposeView;

        if $z0 == 0 goto label1;

        $r10 = (androidx.compose.ui.platform.AndroidComposeView) r1;

        goto label2;

     label1:
        $r10 = null;

     label2:
        if $r10 == null goto label3;

        $r9 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$3: androidx.compose.ui.viewinterop.AndroidViewHolder $this_run>;

        $r8 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$3: androidx.compose.ui.node.LayoutNode $layoutNode>;

        virtualinvoke $r10.<androidx.compose.ui.platform.AndroidComposeView: void addAndroidView(androidx.compose.ui.viewinterop.AndroidViewHolder,androidx.compose.ui.node.LayoutNode)>($r9, $r8);

        goto label3;

     label3:
        $r2 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$3: kotlin.jvm.internal.Ref$ObjectRef $viewRemovedOnDetach>;

        $r3 = $r2.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        if $r3 == null goto label4;

        $r7 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$3: androidx.compose.ui.viewinterop.AndroidViewHolder $this_run>;

        $r4 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$3: kotlin.jvm.internal.Ref$ObjectRef $viewRemovedOnDetach>;

        $r5 = $r4.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        $r6 = (android.view.View) $r5;

        virtualinvoke $r7.<androidx.compose.ui.viewinterop.AndroidViewHolder: void setView$ui_release(android.view.View)>($r6);

     label4:
        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$3 r0;
        java.lang.Object r1;
        androidx.compose.ui.node.Owner $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$3;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.ui.node.Owner) r1;

        virtualinvoke r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$3: void invoke(androidx.compose.ui.node.Owner)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$4
<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$4: androidx.compose.ui.viewinterop.AndroidViewHolder $this_run>
<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$4: kotlin.jvm.internal.Ref$ObjectRef $viewRemovedOnDetach>
    void <init>(androidx.compose.ui.viewinterop.AndroidViewHolder, kotlin.jvm.internal.Ref$ObjectRef)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$4 r0;
        androidx.compose.ui.viewinterop.AndroidViewHolder $r1;
        kotlin.jvm.internal.Ref$ObjectRef $r2;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$4;

        $r1 := @parameter0: androidx.compose.ui.viewinterop.AndroidViewHolder;

        $r2 := @parameter1: kotlin.jvm.internal.Ref$ObjectRef;

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$4: androidx.compose.ui.viewinterop.AndroidViewHolder $this_run> = $r1;

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$4: kotlin.jvm.internal.Ref$ObjectRef $viewRemovedOnDetach> = $r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(androidx.compose.ui.node.Owner)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$4 r0;
        androidx.compose.ui.node.Owner r1;
        boolean $z0;
        androidx.compose.ui.viewinterop.AndroidViewHolder $r2, $r5, $r6;
        kotlin.jvm.internal.Ref$ObjectRef $r3;
        android.view.View $r4;
        androidx.compose.ui.platform.AndroidComposeView $r7;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$4;

        r1 := @parameter0: androidx.compose.ui.node.Owner;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "owner");

        $z0 = r1 instanceof androidx.compose.ui.platform.AndroidComposeView;

        if $z0 == 0 goto label1;

        $r7 = (androidx.compose.ui.platform.AndroidComposeView) r1;

        goto label2;

     label1:
        $r7 = null;

     label2:
        if $r7 == null goto label3;

        $r6 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$4: androidx.compose.ui.viewinterop.AndroidViewHolder $this_run>;

        virtualinvoke $r7.<androidx.compose.ui.platform.AndroidComposeView: void removeAndroidView(androidx.compose.ui.viewinterop.AndroidViewHolder)>($r6);

        goto label3;

     label3:
        $r3 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$4: kotlin.jvm.internal.Ref$ObjectRef $viewRemovedOnDetach>;

        $r2 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$4: androidx.compose.ui.viewinterop.AndroidViewHolder $this_run>;

        $r4 = virtualinvoke $r2.<androidx.compose.ui.viewinterop.AndroidViewHolder: android.view.View getView()>();

        $r3.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element> = $r4;

        $r5 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$4: androidx.compose.ui.viewinterop.AndroidViewHolder $this_run>;

        virtualinvoke $r5.<androidx.compose.ui.viewinterop.AndroidViewHolder: void setView$ui_release(android.view.View)>(null);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$4 r0;
        java.lang.Object r1;
        androidx.compose.ui.node.Owner $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$4;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.ui.node.Owner) r1;

        virtualinvoke r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$4: void invoke(androidx.compose.ui.node.Owner)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5$measure$1
<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5$measure$1: androidx.compose.ui.viewinterop.AndroidViewHolder $this_run>
<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5$measure$1: androidx.compose.ui.node.LayoutNode $layoutNode>
    void <init>(androidx.compose.ui.viewinterop.AndroidViewHolder, androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5$measure$1 r0;
        androidx.compose.ui.viewinterop.AndroidViewHolder $r1;
        androidx.compose.ui.node.LayoutNode $r2;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5$measure$1;

        $r1 := @parameter0: androidx.compose.ui.viewinterop.AndroidViewHolder;

        $r2 := @parameter1: androidx.compose.ui.node.LayoutNode;

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5$measure$1: androidx.compose.ui.viewinterop.AndroidViewHolder $this_run> = $r1;

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5$measure$1: androidx.compose.ui.node.LayoutNode $layoutNode> = $r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(androidx.compose.ui.layout.Placeable$PlacementScope)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5$measure$1 r0;
        androidx.compose.ui.layout.Placeable$PlacementScope $r1;
        androidx.compose.ui.viewinterop.AndroidViewHolder $r2;
        androidx.compose.ui.node.LayoutNode $r3;
        android.view.View $r4;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5$measure$1;

        $r1 := @parameter0: androidx.compose.ui.layout.Placeable$PlacementScope;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$layout");

        $r2 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5$measure$1: androidx.compose.ui.viewinterop.AndroidViewHolder $this_run>;

        $r4 = (android.view.View) $r2;

        $r3 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5$measure$1: androidx.compose.ui.node.LayoutNode $layoutNode>;

        staticinvoke <androidx.compose.ui.viewinterop.AndroidViewHolder_androidKt: void access$layoutAccordingTo(android.view.View,androidx.compose.ui.node.LayoutNode)>($r4, $r3);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5$measure$1 r0;
        java.lang.Object r1;
        androidx.compose.ui.layout.Placeable$PlacementScope $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5$measure$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.ui.layout.Placeable$PlacementScope) r1;

        virtualinvoke r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5$measure$1: void invoke(androidx.compose.ui.layout.Placeable$PlacementScope)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5
<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5: androidx.compose.ui.viewinterop.AndroidViewHolder $this_run>
<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5: androidx.compose.ui.node.LayoutNode $layoutNode>
    void <init>(androidx.compose.ui.viewinterop.AndroidViewHolder, androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5 r0;
        androidx.compose.ui.viewinterop.AndroidViewHolder $r1;
        androidx.compose.ui.node.LayoutNode $r2;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5;

        $r1 := @parameter0: androidx.compose.ui.viewinterop.AndroidViewHolder;

        $r2 := @parameter1: androidx.compose.ui.node.LayoutNode;

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5: androidx.compose.ui.viewinterop.AndroidViewHolder $this_run> = $r1;

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5: androidx.compose.ui.node.LayoutNode $layoutNode> = $r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public androidx.compose.ui.layout.MeasureResult measure-3p2s80s(androidx.compose.ui.layout.MeasureScope, java.util.List, long)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5 r0;
        androidx.compose.ui.layout.MeasureScope $r1;
        java.util.List r2;
        long l0;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        androidx.compose.ui.viewinterop.AndroidViewHolder $r3, $r4, $r5, $r7, $r8, $r10, $r11, $r14, $r17, $r19;
        android.view.ViewGroup$LayoutParams $r6, $r9;
        androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5$measure$1 $r12;
        androidx.compose.ui.node.LayoutNode $r13;
        kotlin.jvm.functions.Function1 $r15;
        androidx.compose.ui.layout.MeasureResult $r16;
        android.view.View $r18, $r20;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5;

        $r1 := @parameter0: androidx.compose.ui.layout.MeasureScope;

        r2 := @parameter1: java.util.List;

        l0 := @parameter2: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$measure");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "measurables");

        $i1 = staticinvoke <androidx.compose.ui.unit.Constraints: int getMinWidth-impl(long)>(l0);

        if $i1 == 0 goto label1;

        $r19 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5: androidx.compose.ui.viewinterop.AndroidViewHolder $this_run>;

        $r20 = virtualinvoke $r19.<androidx.compose.ui.viewinterop.AndroidViewHolder: android.view.View getChildAt(int)>(0);

        $i14 = staticinvoke <androidx.compose.ui.unit.Constraints: int getMinWidth-impl(long)>(l0);

        virtualinvoke $r20.<android.view.View: void setMinimumWidth(int)>($i14);

     label1:
        $i2 = staticinvoke <androidx.compose.ui.unit.Constraints: int getMinHeight-impl(long)>(l0);

        if $i2 == 0 goto label2;

        $r17 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5: androidx.compose.ui.viewinterop.AndroidViewHolder $this_run>;

        $r18 = virtualinvoke $r17.<androidx.compose.ui.viewinterop.AndroidViewHolder: android.view.View getChildAt(int)>(0);

        $i13 = staticinvoke <androidx.compose.ui.unit.Constraints: int getMinHeight-impl(long)>(l0);

        virtualinvoke $r18.<android.view.View: void setMinimumHeight(int)>($i13);

     label2:
        $r3 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5: androidx.compose.ui.viewinterop.AndroidViewHolder $this_run>;

        $r4 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5: androidx.compose.ui.viewinterop.AndroidViewHolder $this_run>;

        $i3 = staticinvoke <androidx.compose.ui.unit.Constraints: int getMinWidth-impl(long)>(l0);

        $i4 = staticinvoke <androidx.compose.ui.unit.Constraints: int getMaxWidth-impl(long)>(l0);

        $r5 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5: androidx.compose.ui.viewinterop.AndroidViewHolder $this_run>;

        $r6 = virtualinvoke $r5.<androidx.compose.ui.viewinterop.AndroidViewHolder: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r6);

        $i5 = $r6.<android.view.ViewGroup$LayoutParams: int width>;

        $i6 = staticinvoke <androidx.compose.ui.viewinterop.AndroidViewHolder: int access$obtainMeasureSpec(androidx.compose.ui.viewinterop.AndroidViewHolder,int,int,int)>($r4, $i3, $i4, $i5);

        $r7 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5: androidx.compose.ui.viewinterop.AndroidViewHolder $this_run>;

        $i7 = staticinvoke <androidx.compose.ui.unit.Constraints: int getMinHeight-impl(long)>(l0);

        $i8 = staticinvoke <androidx.compose.ui.unit.Constraints: int getMaxHeight-impl(long)>(l0);

        $r8 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5: androidx.compose.ui.viewinterop.AndroidViewHolder $this_run>;

        $r9 = virtualinvoke $r8.<androidx.compose.ui.viewinterop.AndroidViewHolder: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r9);

        $i9 = $r9.<android.view.ViewGroup$LayoutParams: int height>;

        $i10 = staticinvoke <androidx.compose.ui.viewinterop.AndroidViewHolder: int access$obtainMeasureSpec(androidx.compose.ui.viewinterop.AndroidViewHolder,int,int,int)>($r7, $i7, $i8, $i9);

        virtualinvoke $r3.<androidx.compose.ui.viewinterop.AndroidViewHolder: void measure(int,int)>($i6, $i10);

        $r10 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5: androidx.compose.ui.viewinterop.AndroidViewHolder $this_run>;

        $i11 = virtualinvoke $r10.<androidx.compose.ui.viewinterop.AndroidViewHolder: int getMeasuredWidth()>();

        $r11 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5: androidx.compose.ui.viewinterop.AndroidViewHolder $this_run>;

        $i12 = virtualinvoke $r11.<androidx.compose.ui.viewinterop.AndroidViewHolder: int getMeasuredHeight()>();

        $r12 = new androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5$measure$1;

        $r14 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5: androidx.compose.ui.viewinterop.AndroidViewHolder $this_run>;

        $r13 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5: androidx.compose.ui.node.LayoutNode $layoutNode>;

        specialinvoke $r12.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5$measure$1: void <init>(androidx.compose.ui.viewinterop.AndroidViewHolder,androidx.compose.ui.node.LayoutNode)>($r14, $r13);

        $r15 = (kotlin.jvm.functions.Function1) $r12;

        $r16 = staticinvoke <androidx.compose.ui.layout.MeasureScope: androidx.compose.ui.layout.MeasureResult layout$default(androidx.compose.ui.layout.MeasureScope,int,int,java.util.Map,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r1, $i11, $i12, null, $r15, 4, null);

        return $r16;
    }

    public int minIntrinsicWidth(androidx.compose.ui.layout.IntrinsicMeasureScope, java.util.List, int)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5 r0;
        androidx.compose.ui.layout.IntrinsicMeasureScope $r1;
        java.util.List r2;
        int i0, $i1;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5;

        $r1 := @parameter0: androidx.compose.ui.layout.IntrinsicMeasureScope;

        r2 := @parameter1: java.util.List;

        i0 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "measurables");

        $i1 = specialinvoke r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5: int intrinsicWidth(int)>(i0);

        return $i1;
    }

    public int maxIntrinsicWidth(androidx.compose.ui.layout.IntrinsicMeasureScope, java.util.List, int)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5 r0;
        androidx.compose.ui.layout.IntrinsicMeasureScope $r1;
        java.util.List r2;
        int i0, $i1;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5;

        $r1 := @parameter0: androidx.compose.ui.layout.IntrinsicMeasureScope;

        r2 := @parameter1: java.util.List;

        i0 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "measurables");

        $i1 = specialinvoke r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5: int intrinsicWidth(int)>(i0);

        return $i1;
    }

    private final int intrinsicWidth(int)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5 r0;
        int i0, $i1, $i2, $i3, $i4;
        androidx.compose.ui.viewinterop.AndroidViewHolder $r1, $r2, $r3, $r5;
        android.view.ViewGroup$LayoutParams $r4;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5: androidx.compose.ui.viewinterop.AndroidViewHolder $this_run>;

        $i1 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(0, 0);

        $r3 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5: androidx.compose.ui.viewinterop.AndroidViewHolder $this_run>;

        $r2 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5: androidx.compose.ui.viewinterop.AndroidViewHolder $this_run>;

        $r4 = virtualinvoke $r2.<androidx.compose.ui.viewinterop.AndroidViewHolder: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r4);

        $i2 = $r4.<android.view.ViewGroup$LayoutParams: int height>;

        $i3 = staticinvoke <androidx.compose.ui.viewinterop.AndroidViewHolder: int access$obtainMeasureSpec(androidx.compose.ui.viewinterop.AndroidViewHolder,int,int,int)>($r3, 0, i0, $i2);

        virtualinvoke $r1.<androidx.compose.ui.viewinterop.AndroidViewHolder: void measure(int,int)>($i1, $i3);

        $r5 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5: androidx.compose.ui.viewinterop.AndroidViewHolder $this_run>;

        $i4 = virtualinvoke $r5.<androidx.compose.ui.viewinterop.AndroidViewHolder: int getMeasuredWidth()>();

        return $i4;
    }

    public int minIntrinsicHeight(androidx.compose.ui.layout.IntrinsicMeasureScope, java.util.List, int)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5 r0;
        androidx.compose.ui.layout.IntrinsicMeasureScope $r1;
        java.util.List r2;
        int i0, $i1;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5;

        $r1 := @parameter0: androidx.compose.ui.layout.IntrinsicMeasureScope;

        r2 := @parameter1: java.util.List;

        i0 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "measurables");

        $i1 = specialinvoke r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5: int intrinsicHeight(int)>(i0);

        return $i1;
    }

    public int maxIntrinsicHeight(androidx.compose.ui.layout.IntrinsicMeasureScope, java.util.List, int)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5 r0;
        androidx.compose.ui.layout.IntrinsicMeasureScope $r1;
        java.util.List r2;
        int i0, $i1;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5;

        $r1 := @parameter0: androidx.compose.ui.layout.IntrinsicMeasureScope;

        r2 := @parameter1: java.util.List;

        i0 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "measurables");

        $i1 = specialinvoke r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5: int intrinsicHeight(int)>(i0);

        return $i1;
    }

    private final int intrinsicHeight(int)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5 r0;
        int i0, $i1, $i2, $i3, $i4;
        androidx.compose.ui.viewinterop.AndroidViewHolder $r1, $r2, $r3, $r5;
        android.view.ViewGroup$LayoutParams $r4;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5;

        i0 := @parameter0: int;

        $r2 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5: androidx.compose.ui.viewinterop.AndroidViewHolder $this_run>;

        $r3 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5: androidx.compose.ui.viewinterop.AndroidViewHolder $this_run>;

        $r1 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5: androidx.compose.ui.viewinterop.AndroidViewHolder $this_run>;

        $r4 = virtualinvoke $r1.<androidx.compose.ui.viewinterop.AndroidViewHolder: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r4);

        $i1 = $r4.<android.view.ViewGroup$LayoutParams: int width>;

        $i2 = staticinvoke <androidx.compose.ui.viewinterop.AndroidViewHolder: int access$obtainMeasureSpec(androidx.compose.ui.viewinterop.AndroidViewHolder,int,int,int)>($r3, 0, i0, $i1);

        $i3 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(0, 0);

        virtualinvoke $r2.<androidx.compose.ui.viewinterop.AndroidViewHolder: void measure(int,int)>($i2, $i3);

        $r5 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$5: androidx.compose.ui.viewinterop.AndroidViewHolder $this_run>;

        $i4 = virtualinvoke $r5.<androidx.compose.ui.viewinterop.AndroidViewHolder: int getMeasuredHeight()>();

        return $i4;
    }

androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$coreModifier$1
<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$coreModifier$1: androidx.compose.ui.node.LayoutNode $layoutNode>
<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$coreModifier$1: androidx.compose.ui.viewinterop.AndroidViewHolder this$0>
    void <init>(androidx.compose.ui.node.LayoutNode, androidx.compose.ui.viewinterop.AndroidViewHolder)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$coreModifier$1 r0;
        androidx.compose.ui.node.LayoutNode $r1;
        androidx.compose.ui.viewinterop.AndroidViewHolder $r2;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$coreModifier$1;

        $r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        $r2 := @parameter1: androidx.compose.ui.viewinterop.AndroidViewHolder;

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$coreModifier$1: androidx.compose.ui.node.LayoutNode $layoutNode> = $r1;

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$coreModifier$1: androidx.compose.ui.viewinterop.AndroidViewHolder this$0> = $r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(androidx.compose.ui.graphics.drawscope.DrawScope)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$coreModifier$1 r0;
        androidx.compose.ui.graphics.drawscope.DrawScope $r1;
        androidx.compose.ui.node.LayoutNode r2;
        androidx.compose.ui.viewinterop.AndroidViewHolder r3;
        androidx.compose.ui.graphics.Canvas r4;
        androidx.compose.ui.node.Owner r5;
        androidx.compose.ui.platform.AndroidComposeView r6, $r9;
        androidx.compose.ui.graphics.drawscope.DrawContext $r7;
        boolean $z2;
        android.graphics.Canvas $r8;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$coreModifier$1;

        $r1 := @parameter0: androidx.compose.ui.graphics.drawscope.DrawScope;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$drawBehind");

        r2 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$coreModifier$1: androidx.compose.ui.node.LayoutNode $layoutNode>;

        r3 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$coreModifier$1: androidx.compose.ui.viewinterop.AndroidViewHolder this$0>;

        $r7 = interfaceinvoke $r1.<androidx.compose.ui.graphics.drawscope.DrawScope: androidx.compose.ui.graphics.drawscope.DrawContext getDrawContext()>();

        r4 = interfaceinvoke $r7.<androidx.compose.ui.graphics.drawscope.DrawContext: androidx.compose.ui.graphics.Canvas getCanvas()>();

        r5 = virtualinvoke r2.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.Owner getOwner$ui_release()>();

        $z2 = r5 instanceof androidx.compose.ui.platform.AndroidComposeView;

        if $z2 == 0 goto label1;

        $r9 = (androidx.compose.ui.platform.AndroidComposeView) r5;

        goto label2;

     label1:
        $r9 = null;

     label2:
        r6 = $r9;

        if r6 == null goto label3;

        $r8 = staticinvoke <androidx.compose.ui.graphics.AndroidCanvas_androidKt: android.graphics.Canvas getNativeCanvas(androidx.compose.ui.graphics.Canvas)>(r4);

        virtualinvoke r6.<androidx.compose.ui.platform.AndroidComposeView: void drawAndroidView(androidx.compose.ui.viewinterop.AndroidViewHolder,android.graphics.Canvas)>(r3, $r8);

     label3:
        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$coreModifier$1 r0;
        java.lang.Object r1;
        androidx.compose.ui.graphics.drawscope.DrawScope $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$coreModifier$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.ui.graphics.drawscope.DrawScope) r1;

        virtualinvoke r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$coreModifier$1: void invoke(androidx.compose.ui.graphics.drawscope.DrawScope)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$coreModifier$2
<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$coreModifier$2: androidx.compose.ui.viewinterop.AndroidViewHolder $this_run>
<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$coreModifier$2: androidx.compose.ui.node.LayoutNode $layoutNode>
    void <init>(androidx.compose.ui.viewinterop.AndroidViewHolder, androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$coreModifier$2 r0;
        androidx.compose.ui.viewinterop.AndroidViewHolder $r1;
        androidx.compose.ui.node.LayoutNode $r2;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$coreModifier$2;

        $r1 := @parameter0: androidx.compose.ui.viewinterop.AndroidViewHolder;

        $r2 := @parameter1: androidx.compose.ui.node.LayoutNode;

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$coreModifier$2: androidx.compose.ui.viewinterop.AndroidViewHolder $this_run> = $r1;

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$coreModifier$2: androidx.compose.ui.node.LayoutNode $layoutNode> = $r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(androidx.compose.ui.layout.LayoutCoordinates)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$coreModifier$2 r0;
        androidx.compose.ui.layout.LayoutCoordinates r1;
        androidx.compose.ui.viewinterop.AndroidViewHolder $r2;
        androidx.compose.ui.node.LayoutNode $r3;
        android.view.View $r4;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$coreModifier$2;

        r1 := @parameter0: androidx.compose.ui.layout.LayoutCoordinates;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        $r2 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$coreModifier$2: androidx.compose.ui.viewinterop.AndroidViewHolder $this_run>;

        $r4 = (android.view.View) $r2;

        $r3 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$coreModifier$2: androidx.compose.ui.node.LayoutNode $layoutNode>;

        staticinvoke <androidx.compose.ui.viewinterop.AndroidViewHolder_androidKt: void access$layoutAccordingTo(android.view.View,androidx.compose.ui.node.LayoutNode)>($r4, $r3);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$coreModifier$2 r0;
        java.lang.Object r1;
        androidx.compose.ui.layout.LayoutCoordinates $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$coreModifier$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.ui.layout.LayoutCoordinates) r1;

        virtualinvoke r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$layoutNode$1$coreModifier$2: void invoke(androidx.compose.ui.layout.LayoutCoordinates)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

androidx.compose.ui.viewinterop.AndroidViewHolder$onCommitAffectingUpdate$1
<androidx.compose.ui.viewinterop.AndroidViewHolder$onCommitAffectingUpdate$1: androidx.compose.ui.viewinterop.AndroidViewHolder this$0>
    void <init>(androidx.compose.ui.viewinterop.AndroidViewHolder)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$onCommitAffectingUpdate$1 r0;
        androidx.compose.ui.viewinterop.AndroidViewHolder $r1;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$onCommitAffectingUpdate$1;

        $r1 := @parameter0: androidx.compose.ui.viewinterop.AndroidViewHolder;

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$onCommitAffectingUpdate$1: androidx.compose.ui.viewinterop.AndroidViewHolder this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(androidx.compose.ui.viewinterop.AndroidViewHolder)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$onCommitAffectingUpdate$1 r0;
        androidx.compose.ui.viewinterop.AndroidViewHolder r1, $r2, $r4;
        android.os.Handler $r3;
        kotlin.jvm.functions.Function0 $r5;
        java.lang.Runnable $r6;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$onCommitAffectingUpdate$1;

        r1 := @parameter0: androidx.compose.ui.viewinterop.AndroidViewHolder;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        $r2 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$onCommitAffectingUpdate$1: androidx.compose.ui.viewinterop.AndroidViewHolder this$0>;

        $r3 = virtualinvoke $r2.<androidx.compose.ui.viewinterop.AndroidViewHolder: android.os.Handler getHandler()>();

        $r4 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$onCommitAffectingUpdate$1: androidx.compose.ui.viewinterop.AndroidViewHolder this$0>;

        $r5 = staticinvoke <androidx.compose.ui.viewinterop.AndroidViewHolder: kotlin.jvm.functions.Function0 access$getRunUpdate$p(androidx.compose.ui.viewinterop.AndroidViewHolder)>($r4);

        $r6 = dynamicinvoke "run" <java.lang.Runnable (kotlin.jvm.functions.Function0)>($r5) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.compose.ui.viewinterop.AndroidViewHolder$onCommitAffectingUpdate$1: void invoke$lambda-0(kotlin.jvm.functions.Function0)>, methodtype: void __METHODTYPE__());

        virtualinvoke $r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r6);

        return;
    }

    private static final void invoke$lambda-0(kotlin.jvm.functions.Function0)
    {
        kotlin.jvm.functions.Function0 $r0;

        $r0 := @parameter0: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$tmp0");

        interfaceinvoke $r0.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$onCommitAffectingUpdate$1 r0;
        java.lang.Object r1;
        androidx.compose.ui.viewinterop.AndroidViewHolder $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$onCommitAffectingUpdate$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.ui.viewinterop.AndroidViewHolder) r1;

        virtualinvoke r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$onCommitAffectingUpdate$1: void invoke(androidx.compose.ui.viewinterop.AndroidViewHolder)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedFling$1
<androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedFling$1: int label>
<androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedFling$1: boolean $consumed>
<androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedFling$1: androidx.compose.ui.viewinterop.AndroidViewHolder this$0>
<androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedFling$1: long $viewVelocity>
    void <init>(boolean, androidx.compose.ui.viewinterop.AndroidViewHolder, long, kotlin.coroutines.Continuation)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedFling$1 r0;
        boolean $z0;
        androidx.compose.ui.viewinterop.AndroidViewHolder $r1;
        long $l0;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedFling$1;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: androidx.compose.ui.viewinterop.AndroidViewHolder;

        $l0 := @parameter2: long;

        $r2 := @parameter3: kotlin.coroutines.Continuation;

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedFling$1: boolean $consumed> = $z0;

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedFling$1: androidx.compose.ui.viewinterop.AndroidViewHolder this$0> = $r1;

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedFling$1: long $viewVelocity> = $l0;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedFling$1 r0;
        java.lang.Object $r1, r2, $r7, $r12;
        int $i0;
        boolean $z0;
        androidx.compose.ui.viewinterop.AndroidViewHolder $r3, $r8;
        androidx.compose.ui.input.nestedscroll.NestedScrollDispatcher $r4, $r9;
        androidx.compose.ui.unit.Velocity$Companion $r5, $r10;
        long $l1, $l2, $l3, $l4;
        kotlin.coroutines.Continuation $r6, $r11;
        java.lang.IllegalStateException $r13;
        kotlin.Unit $r14;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedFling$1;

        $r1 := @parameter0: java.lang.Object;

        r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedFling$1: int label>;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label5;
            default: goto label7;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $z0 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedFling$1: boolean $consumed>;

        if $z0 != 0 goto label4;

        $r8 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedFling$1: androidx.compose.ui.viewinterop.AndroidViewHolder this$0>;

        $r9 = staticinvoke <androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.compose.ui.input.nestedscroll.NestedScrollDispatcher access$getDispatcher$p(androidx.compose.ui.viewinterop.AndroidViewHolder)>($r8);

        $r10 = <androidx.compose.ui.unit.Velocity: androidx.compose.ui.unit.Velocity$Companion Companion>;

        $l3 = virtualinvoke $r10.<androidx.compose.ui.unit.Velocity$Companion: long getZero-9UxMQ8M()>();

        $l4 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedFling$1: long $viewVelocity>;

        $r11 = (kotlin.coroutines.Continuation) r0;

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedFling$1: int label> = 1;

        $r12 = virtualinvoke $r9.<androidx.compose.ui.input.nestedscroll.NestedScrollDispatcher: java.lang.Object dispatchPostFling-RZ2iAVY(long,long,kotlin.coroutines.Continuation)>($l3, $l4, $r11);

        if $r12 != r2 goto label3;

        return r2;

     label2:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label3:
        goto label6;

     label4:
        $r3 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedFling$1: androidx.compose.ui.viewinterop.AndroidViewHolder this$0>;

        $r4 = staticinvoke <androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.compose.ui.input.nestedscroll.NestedScrollDispatcher access$getDispatcher$p(androidx.compose.ui.viewinterop.AndroidViewHolder)>($r3);

        $l1 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedFling$1: long $viewVelocity>;

        $r5 = <androidx.compose.ui.unit.Velocity: androidx.compose.ui.unit.Velocity$Companion Companion>;

        $l2 = virtualinvoke $r5.<androidx.compose.ui.unit.Velocity$Companion: long getZero-9UxMQ8M()>();

        $r6 = (kotlin.coroutines.Continuation) r0;

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedFling$1: int label> = 2;

        $r7 = virtualinvoke $r4.<androidx.compose.ui.input.nestedscroll.NestedScrollDispatcher: java.lang.Object dispatchPostFling-RZ2iAVY(long,long,kotlin.coroutines.Continuation)>($l1, $l2, $r6);

        if $r7 != r2 goto label6;

        return r2;

     label5:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label6:
        $r14 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r14;

     label7:
        $r13 = new java.lang.IllegalStateException;

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r13;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedFling$1 r0, $r3;
        java.lang.Object r1;
        kotlin.coroutines.Continuation $r2, $r5;
        long $l0;
        androidx.compose.ui.viewinterop.AndroidViewHolder $r4;
        boolean $z0;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedFling$1;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = new androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedFling$1;

        $z0 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedFling$1: boolean $consumed>;

        $r4 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedFling$1: androidx.compose.ui.viewinterop.AndroidViewHolder this$0>;

        $l0 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedFling$1: long $viewVelocity>;

        specialinvoke $r3.<androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedFling$1: void <init>(boolean,androidx.compose.ui.viewinterop.AndroidViewHolder,long,kotlin.coroutines.Continuation)>($z0, $r4, $l0, $r2);

        $r5 = (kotlin.coroutines.Continuation) $r3;

        return $r5;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.Continuation)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedFling$1 r0, $r5;
        kotlinx.coroutines.CoroutineScope r1;
        kotlin.coroutines.Continuation r2, $r3;
        kotlin.Unit $r4;
        java.lang.Object $r6;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedFling$1;

        r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = virtualinvoke r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedFling$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, r2);

        $r5 = (androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedFling$1) $r3;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedFling$1: java.lang.Object invokeSuspend(java.lang.Object)>($r4);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedFling$1 r0;
        java.lang.Object r1, r2, $r5;
        kotlin.coroutines.Continuation $r3;
        kotlinx.coroutines.CoroutineScope $r4;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedFling$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (kotlinx.coroutines.CoroutineScope) r1;

        $r3 = (kotlin.coroutines.Continuation) r2;

        $r5 = virtualinvoke r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedFling$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)>($r4, $r3);

        return $r5;
    }

androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedPreFling$1
<androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedPreFling$1: int label>
<androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedPreFling$1: androidx.compose.ui.viewinterop.AndroidViewHolder this$0>
<androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedPreFling$1: long $toBeConsumed>
    void <init>(androidx.compose.ui.viewinterop.AndroidViewHolder, long, kotlin.coroutines.Continuation)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedPreFling$1 r0;
        androidx.compose.ui.viewinterop.AndroidViewHolder $r1;
        long $l0;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedPreFling$1;

        $r1 := @parameter0: androidx.compose.ui.viewinterop.AndroidViewHolder;

        $l0 := @parameter1: long;

        $r2 := @parameter2: kotlin.coroutines.Continuation;

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedPreFling$1: androidx.compose.ui.viewinterop.AndroidViewHolder this$0> = $r1;

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedPreFling$1: long $toBeConsumed> = $l0;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedPreFling$1 r0;
        java.lang.Object $r1, r2, $r7;
        int $i0;
        kotlin.Unit $r3;
        androidx.compose.ui.viewinterop.AndroidViewHolder $r4;
        androidx.compose.ui.input.nestedscroll.NestedScrollDispatcher $r5;
        long $l1;
        kotlin.coroutines.Continuation $r6;
        java.lang.IllegalStateException $r8;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedPreFling$1;

        $r1 := @parameter0: java.lang.Object;

        r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedPreFling$1: int label>;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label4;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r4 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedPreFling$1: androidx.compose.ui.viewinterop.AndroidViewHolder this$0>;

        $r5 = staticinvoke <androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.compose.ui.input.nestedscroll.NestedScrollDispatcher access$getDispatcher$p(androidx.compose.ui.viewinterop.AndroidViewHolder)>($r4);

        $l1 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedPreFling$1: long $toBeConsumed>;

        $r6 = (kotlin.coroutines.Continuation) r0;

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedPreFling$1: int label> = 1;

        $r7 = virtualinvoke $r5.<androidx.compose.ui.input.nestedscroll.NestedScrollDispatcher: java.lang.Object dispatchPreFling-QWom1Mo(long,kotlin.coroutines.Continuation)>($l1, $r6);

        if $r7 != r2 goto label3;

        return r2;

     label2:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label3:
        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;

     label4:
        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r8;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedPreFling$1 r0, $r3;
        java.lang.Object r1;
        kotlin.coroutines.Continuation $r2, $r5;
        long $l0;
        androidx.compose.ui.viewinterop.AndroidViewHolder $r4;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedPreFling$1;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = new androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedPreFling$1;

        $r4 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedPreFling$1: androidx.compose.ui.viewinterop.AndroidViewHolder this$0>;

        $l0 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedPreFling$1: long $toBeConsumed>;

        specialinvoke $r3.<androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedPreFling$1: void <init>(androidx.compose.ui.viewinterop.AndroidViewHolder,long,kotlin.coroutines.Continuation)>($r4, $l0, $r2);

        $r5 = (kotlin.coroutines.Continuation) $r3;

        return $r5;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.Continuation)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedPreFling$1 r0, $r5;
        kotlinx.coroutines.CoroutineScope r1;
        kotlin.coroutines.Continuation r2, $r3;
        kotlin.Unit $r4;
        java.lang.Object $r6;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedPreFling$1;

        r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = virtualinvoke r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedPreFling$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, r2);

        $r5 = (androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedPreFling$1) $r3;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedPreFling$1: java.lang.Object invokeSuspend(java.lang.Object)>($r4);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedPreFling$1 r0;
        java.lang.Object r1, r2, $r5;
        kotlin.coroutines.Continuation $r3;
        kotlinx.coroutines.CoroutineScope $r4;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedPreFling$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (kotlinx.coroutines.CoroutineScope) r1;

        $r3 = (kotlin.coroutines.Continuation) r2;

        $r5 = virtualinvoke r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$onNestedPreFling$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)>($r4, $r3);

        return $r5;
    }

androidx.compose.ui.viewinterop.AndroidViewHolder$runUpdate$1
<androidx.compose.ui.viewinterop.AndroidViewHolder$runUpdate$1: androidx.compose.ui.viewinterop.AndroidViewHolder this$0>
    void <init>(androidx.compose.ui.viewinterop.AndroidViewHolder)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$runUpdate$1 r0;
        androidx.compose.ui.viewinterop.AndroidViewHolder $r1;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$runUpdate$1;

        $r1 := @parameter0: androidx.compose.ui.viewinterop.AndroidViewHolder;

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$runUpdate$1: androidx.compose.ui.viewinterop.AndroidViewHolder this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$runUpdate$1 r0;
        androidx.compose.ui.viewinterop.AndroidViewHolder $r1, $r2, $r4, $r5, $r7;
        boolean $z0;
        androidx.compose.runtime.snapshots.SnapshotStateObserver $r3;
        kotlin.jvm.functions.Function1 $r6;
        kotlin.jvm.functions.Function0 $r8;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$runUpdate$1;

        $r1 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$runUpdate$1: androidx.compose.ui.viewinterop.AndroidViewHolder this$0>;

        $z0 = staticinvoke <androidx.compose.ui.viewinterop.AndroidViewHolder: boolean access$getHasUpdateBlock$p(androidx.compose.ui.viewinterop.AndroidViewHolder)>($r1);

        if $z0 == 0 goto label1;

        $r2 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$runUpdate$1: androidx.compose.ui.viewinterop.AndroidViewHolder this$0>;

        $r3 = staticinvoke <androidx.compose.ui.viewinterop.AndroidViewHolder: androidx.compose.runtime.snapshots.SnapshotStateObserver access$getSnapshotObserver$p(androidx.compose.ui.viewinterop.AndroidViewHolder)>($r2);

        $r5 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$runUpdate$1: androidx.compose.ui.viewinterop.AndroidViewHolder this$0>;

        $r4 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$runUpdate$1: androidx.compose.ui.viewinterop.AndroidViewHolder this$0>;

        $r6 = staticinvoke <androidx.compose.ui.viewinterop.AndroidViewHolder: kotlin.jvm.functions.Function1 access$getOnCommitAffectingUpdate$p(androidx.compose.ui.viewinterop.AndroidViewHolder)>($r4);

        $r7 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$runUpdate$1: androidx.compose.ui.viewinterop.AndroidViewHolder this$0>;

        $r8 = virtualinvoke $r7.<androidx.compose.ui.viewinterop.AndroidViewHolder: kotlin.jvm.functions.Function0 getUpdate()>();

        virtualinvoke $r3.<androidx.compose.runtime.snapshots.SnapshotStateObserver: void observeReads(java.lang.Object,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function0)>($r5, $r6, $r8);

     label1:
        return;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$runUpdate$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$runUpdate$1;

        virtualinvoke r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$runUpdate$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

androidx.compose.ui.viewinterop.AndroidViewHolder$snapshotObserver$1
<androidx.compose.ui.viewinterop.AndroidViewHolder$snapshotObserver$1: androidx.compose.ui.viewinterop.AndroidViewHolder this$0>
    void <init>(androidx.compose.ui.viewinterop.AndroidViewHolder)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$snapshotObserver$1 r0;
        androidx.compose.ui.viewinterop.AndroidViewHolder $r1;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$snapshotObserver$1;

        $r1 := @parameter0: androidx.compose.ui.viewinterop.AndroidViewHolder;

        r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$snapshotObserver$1: androidx.compose.ui.viewinterop.AndroidViewHolder this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(kotlin.jvm.functions.Function0)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$snapshotObserver$1 r0;
        kotlin.jvm.functions.Function0 r1;
        androidx.compose.ui.viewinterop.AndroidViewHolder $r2, $r6;
        android.os.Handler $r3, $r7;
        android.os.Looper $r4, $r5;
        java.lang.Runnable $r8;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$snapshotObserver$1;

        r1 := @parameter0: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "command");

        $r2 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$snapshotObserver$1: androidx.compose.ui.viewinterop.AndroidViewHolder this$0>;

        $r3 = virtualinvoke $r2.<androidx.compose.ui.viewinterop.AndroidViewHolder: android.os.Handler getHandler()>();

        $r4 = virtualinvoke $r3.<android.os.Handler: android.os.Looper getLooper()>();

        $r5 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if $r4 != $r5 goto label1;

        interfaceinvoke r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        goto label2;

     label1:
        $r6 = r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$snapshotObserver$1: androidx.compose.ui.viewinterop.AndroidViewHolder this$0>;

        $r7 = virtualinvoke $r6.<androidx.compose.ui.viewinterop.AndroidViewHolder: android.os.Handler getHandler()>();

        $r8 = dynamicinvoke "run" <java.lang.Runnable (kotlin.jvm.functions.Function0)>(r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.compose.ui.viewinterop.AndroidViewHolder$snapshotObserver$1: void invoke$lambda-0(kotlin.jvm.functions.Function0)>, methodtype: void __METHODTYPE__());

        virtualinvoke $r7.<android.os.Handler: boolean post(java.lang.Runnable)>($r8);

     label2:
        return;
    }

    private static final void invoke$lambda-0(kotlin.jvm.functions.Function0)
    {
        kotlin.jvm.functions.Function0 $r0;

        $r0 := @parameter0: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$tmp0");

        interfaceinvoke $r0.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$snapshotObserver$1 r0;
        java.lang.Object r1;
        kotlin.jvm.functions.Function0 $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$snapshotObserver$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (kotlin.jvm.functions.Function0) r1;

        virtualinvoke r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$snapshotObserver$1: void invoke(kotlin.jvm.functions.Function0)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

androidx.compose.ui.viewinterop.AndroidViewHolder$update$1
<androidx.compose.ui.viewinterop.AndroidViewHolder$update$1: androidx.compose.ui.viewinterop.AndroidViewHolder$update$1 INSTANCE>
    void <init>()
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$update$1 r0;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$update$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$update$1 r0;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$update$1;

        return;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$update$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.compose.ui.viewinterop.AndroidViewHolder$update$1;

        virtualinvoke r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$update$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

    static void <clinit>()
    {
        androidx.compose.ui.viewinterop.AndroidViewHolder$update$1 $r0;

        $r0 = new androidx.compose.ui.viewinterop.AndroidViewHolder$update$1;

        specialinvoke $r0.<androidx.compose.ui.viewinterop.AndroidViewHolder$update$1: void <init>()>();

        <androidx.compose.ui.viewinterop.AndroidViewHolder$update$1: androidx.compose.ui.viewinterop.AndroidViewHolder$update$1 INSTANCE> = $r0;

        return;
    }

