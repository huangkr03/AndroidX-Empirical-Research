kotlin.comparisons.ComparisonsKt___ComparisonsJvmKt
    public void <init>()
    {
        kotlin.comparisons.ComparisonsKt___ComparisonsJvmKt $r0;

        $r0 := @this: kotlin.comparisons.ComparisonsKt___ComparisonsJvmKt;

        specialinvoke $r0.<kotlin.comparisons.ComparisonsKt__ComparisonsKt: void <init>()>();

        return;
    }

    private static final byte maxOf(byte, byte)
    {
        byte $b0, $b2;
        int $i1;

        $b2 := @parameter0: byte;

        $b0 := @parameter1: byte;

        $i1 = staticinvoke <java.lang.Math: int max(int,int)>($b2, $b0);

        $b2 = (byte) $i1;

        return $b2;
    }

    private static final byte maxOf(byte, byte, byte)
    {
        byte $b0, $b1, $b2;
        int $i3;

        $b1 := @parameter0: byte;

        $b2 := @parameter1: byte;

        $b0 := @parameter2: byte;

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>($b2, $b0);

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>($b1, $i3);

        $b1 = (byte) $i3;

        return $b1;
    }

    public static final transient byte maxOf(byte, byte[])
    {
        byte[] $r0;
        byte $b0, $b2;
        int $i1, $i3, $i4;

        $b2 := @parameter0: byte;

        $r0 := @parameter1: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "other");

        $i3 = lengthof $r0;

        $i4 = 0;

     label1:
        if $i4 >= $i3 goto label2;

        $b0 = $r0[$i4];

        $i1 = staticinvoke <java.lang.Math: int max(int,int)>($b2, $b0);

        $b2 = (byte) $i1;

        $i4 = $i4 + 1;

        goto label1;

     label2:
        return $b2;
    }

    private static final double maxOf(double, double)
    {
        double $d0, $d1;

        $d1 := @parameter0: double;

        $d0 := @parameter1: double;

        $d1 = staticinvoke <java.lang.Math: double max(double,double)>($d1, $d0);

        return $d1;
    }

    private static final double maxOf(double, double, double)
    {
        double $d0, $d1, $d2;

        $d1 := @parameter0: double;

        $d2 := @parameter1: double;

        $d0 := @parameter2: double;

        $d2 = staticinvoke <java.lang.Math: double max(double,double)>($d2, $d0);

        $d1 = staticinvoke <java.lang.Math: double max(double,double)>($d1, $d2);

        return $d1;
    }

    public static final transient double maxOf(double, double[])
    {
        double[] $r0;
        double $d0, $d1;
        int $i0, $i1;

        $d1 := @parameter0: double;

        $r0 := @parameter1: double[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "other");

        $i0 = lengthof $r0;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $d0 = $r0[$i1];

        $d1 = staticinvoke <java.lang.Math: double max(double,double)>($d1, $d0);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $d1;
    }

    private static final float maxOf(float, float)
    {
        float $f0, $f1;

        $f1 := @parameter0: float;

        $f0 := @parameter1: float;

        $f1 = staticinvoke <java.lang.Math: float max(float,float)>($f1, $f0);

        return $f1;
    }

    private static final float maxOf(float, float, float)
    {
        float $f0, $f1, $f2;

        $f1 := @parameter0: float;

        $f2 := @parameter1: float;

        $f0 := @parameter2: float;

        $f2 = staticinvoke <java.lang.Math: float max(float,float)>($f2, $f0);

        $f1 = staticinvoke <java.lang.Math: float max(float,float)>($f1, $f2);

        return $f1;
    }

    public static final transient float maxOf(float, float[])
    {
        float[] $r0;
        float $f0, $f1;
        int $i0, $i1;

        $f1 := @parameter0: float;

        $r0 := @parameter1: float[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "other");

        $i0 = lengthof $r0;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $f0 = $r0[$i1];

        $f1 = staticinvoke <java.lang.Math: float max(float,float)>($f1, $f0);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $f1;
    }

    private static final int maxOf(int, int)
    {
        int $i0, $i1;

        $i1 := @parameter0: int;

        $i0 := @parameter1: int;

        $i1 = staticinvoke <java.lang.Math: int max(int,int)>($i1, $i0);

        return $i1;
    }

    private static final int maxOf(int, int, int)
    {
        int $i0, $i1, $i2;

        $i1 := @parameter0: int;

        $i2 := @parameter1: int;

        $i0 := @parameter2: int;

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i2, $i0);

        $i1 = staticinvoke <java.lang.Math: int max(int,int)>($i1, $i2);

        return $i1;
    }

    public static final transient int maxOf(int, int[])
    {
        int[] $r0;
        int $i0, $i1, $i2, $i3;

        $i1 := @parameter0: int;

        $r0 := @parameter1: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "other");

        $i2 = lengthof $r0;

        $i3 = 0;

     label1:
        if $i3 >= $i2 goto label2;

        $i0 = $r0[$i3];

        $i1 = staticinvoke <java.lang.Math: int max(int,int)>($i1, $i0);

        $i3 = $i3 + 1;

        goto label1;

     label2:
        return $i1;
    }

    private static final long maxOf(long, long)
    {
        long $l0, $l1;

        $l1 := @parameter0: long;

        $l0 := @parameter1: long;

        $l1 = staticinvoke <java.lang.Math: long max(long,long)>($l1, $l0);

        return $l1;
    }

    private static final long maxOf(long, long, long)
    {
        long $l0, $l1, $l2;

        $l1 := @parameter0: long;

        $l2 := @parameter1: long;

        $l0 := @parameter2: long;

        $l2 = staticinvoke <java.lang.Math: long max(long,long)>($l2, $l0);

        $l1 = staticinvoke <java.lang.Math: long max(long,long)>($l1, $l2);

        return $l1;
    }

    public static final transient long maxOf(long, long[])
    {
        long[] $r0;
        long $l0, $l1;
        int $i2, $i3;

        $l1 := @parameter0: long;

        $r0 := @parameter1: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "other");

        $i2 = lengthof $r0;

        $i3 = 0;

     label1:
        if $i3 >= $i2 goto label2;

        $l0 = $r0[$i3];

        $l1 = staticinvoke <java.lang.Math: long max(long,long)>($l1, $l0);

        $i3 = $i3 + 1;

        goto label1;

     label2:
        return $l1;
    }

    public static final java.lang.Comparable maxOf(java.lang.Comparable, java.lang.Comparable)
    {
        java.lang.Comparable $r0, $r1;
        int $i0;

        $r0 := @parameter0: java.lang.Comparable;

        $r1 := @parameter1: java.lang.Comparable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "a");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "b");

        $i0 = interfaceinvoke $r0.<java.lang.Comparable: int compareTo(java.lang.Object)>($r1);

        if $i0 < 0 goto label1;

        return $r0;

     label1:
        return $r1;
    }

    public static final java.lang.Comparable maxOf(java.lang.Comparable, java.lang.Comparable, java.lang.Comparable)
    {
        java.lang.Comparable $r0, $r1, $r2;

        $r1 := @parameter0: java.lang.Comparable;

        $r2 := @parameter1: java.lang.Comparable;

        $r0 := @parameter2: java.lang.Comparable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "a");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "b");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "c");

        $r2 = staticinvoke <kotlin.comparisons.ComparisonsKt: java.lang.Comparable maxOf(java.lang.Comparable,java.lang.Comparable)>($r2, $r0);

        $r1 = staticinvoke <kotlin.comparisons.ComparisonsKt: java.lang.Comparable maxOf(java.lang.Comparable,java.lang.Comparable)>($r1, $r2);

        return $r1;
    }

    public static final transient java.lang.Comparable maxOf(java.lang.Comparable, java.lang.Comparable[])
    {
        java.lang.Comparable[] $r0;
        java.lang.Comparable $r1, $r2;
        int $i0, $i1;

        $r2 := @parameter0: java.lang.Comparable;

        $r0 := @parameter1: java.lang.Comparable[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "a");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "other");

        $i0 = lengthof $r0;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r1 = $r0[$i1];

        $r2 = staticinvoke <kotlin.comparisons.ComparisonsKt: java.lang.Comparable maxOf(java.lang.Comparable,java.lang.Comparable)>($r2, $r1);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $r2;
    }

    private static final short maxOf(short, short)
    {
        short $s0, $s2;
        int $i1;

        $s2 := @parameter0: short;

        $s0 := @parameter1: short;

        $i1 = staticinvoke <java.lang.Math: int max(int,int)>($s2, $s0);

        $s2 = (short) $i1;

        return $s2;
    }

    private static final short maxOf(short, short, short)
    {
        short $s0, $s1, $s2;
        int $i3;

        $s1 := @parameter0: short;

        $s2 := @parameter1: short;

        $s0 := @parameter2: short;

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>($s2, $s0);

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>($s1, $i3);

        $s1 = (short) $i3;

        return $s1;
    }

    public static final transient short maxOf(short, short[])
    {
        short[] $r0;
        short $s0, $s2;
        int $i1, $i3, $i4;

        $s2 := @parameter0: short;

        $r0 := @parameter1: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "other");

        $i3 = lengthof $r0;

        $i4 = 0;

     label1:
        if $i4 >= $i3 goto label2;

        $s0 = $r0[$i4];

        $i1 = staticinvoke <java.lang.Math: int max(int,int)>($s2, $s0);

        $s2 = (short) $i1;

        $i4 = $i4 + 1;

        goto label1;

     label2:
        return $s2;
    }

    private static final byte minOf(byte, byte)
    {
        byte $b0, $b2;
        int $i1;

        $b2 := @parameter0: byte;

        $b0 := @parameter1: byte;

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($b2, $b0);

        $b2 = (byte) $i1;

        return $b2;
    }

    private static final byte minOf(byte, byte, byte)
    {
        byte $b0, $b1, $b2;
        int $i3;

        $b1 := @parameter0: byte;

        $b2 := @parameter1: byte;

        $b0 := @parameter2: byte;

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($b2, $b0);

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($b1, $i3);

        $b1 = (byte) $i3;

        return $b1;
    }

    public static final transient byte minOf(byte, byte[])
    {
        byte[] $r0;
        byte $b0, $b2;
        int $i1, $i3, $i4;

        $b2 := @parameter0: byte;

        $r0 := @parameter1: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "other");

        $i3 = lengthof $r0;

        $i4 = 0;

     label1:
        if $i4 >= $i3 goto label2;

        $b0 = $r0[$i4];

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($b2, $b0);

        $b2 = (byte) $i1;

        $i4 = $i4 + 1;

        goto label1;

     label2:
        return $b2;
    }

    private static final double minOf(double, double)
    {
        double $d0, $d1;

        $d1 := @parameter0: double;

        $d0 := @parameter1: double;

        $d1 = staticinvoke <java.lang.Math: double min(double,double)>($d1, $d0);

        return $d1;
    }

    private static final double minOf(double, double, double)
    {
        double $d0, $d1, $d2;

        $d1 := @parameter0: double;

        $d2 := @parameter1: double;

        $d0 := @parameter2: double;

        $d2 = staticinvoke <java.lang.Math: double min(double,double)>($d2, $d0);

        $d1 = staticinvoke <java.lang.Math: double min(double,double)>($d1, $d2);

        return $d1;
    }

    public static final transient double minOf(double, double[])
    {
        double[] $r0;
        double $d0, $d1;
        int $i0, $i1;

        $d1 := @parameter0: double;

        $r0 := @parameter1: double[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "other");

        $i0 = lengthof $r0;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $d0 = $r0[$i1];

        $d1 = staticinvoke <java.lang.Math: double min(double,double)>($d1, $d0);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $d1;
    }

    private static final float minOf(float, float)
    {
        float $f0, $f1;

        $f1 := @parameter0: float;

        $f0 := @parameter1: float;

        $f1 = staticinvoke <java.lang.Math: float min(float,float)>($f1, $f0);

        return $f1;
    }

    private static final float minOf(float, float, float)
    {
        float $f0, $f1, $f2;

        $f1 := @parameter0: float;

        $f2 := @parameter1: float;

        $f0 := @parameter2: float;

        $f2 = staticinvoke <java.lang.Math: float min(float,float)>($f2, $f0);

        $f1 = staticinvoke <java.lang.Math: float min(float,float)>($f1, $f2);

        return $f1;
    }

    public static final transient float minOf(float, float[])
    {
        float[] $r0;
        float $f0, $f1;
        int $i0, $i1;

        $f1 := @parameter0: float;

        $r0 := @parameter1: float[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "other");

        $i0 = lengthof $r0;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $f0 = $r0[$i1];

        $f1 = staticinvoke <java.lang.Math: float min(float,float)>($f1, $f0);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $f1;
    }

    private static final int minOf(int, int)
    {
        int $i0, $i1;

        $i1 := @parameter0: int;

        $i0 := @parameter1: int;

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i0);

        return $i1;
    }

    private static final int minOf(int, int, int)
    {
        int $i0, $i1, $i2;

        $i1 := @parameter0: int;

        $i2 := @parameter1: int;

        $i0 := @parameter2: int;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i0);

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i2);

        return $i1;
    }

    public static final transient int minOf(int, int[])
    {
        int[] $r0;
        int $i0, $i1, $i2, $i3;

        $i1 := @parameter0: int;

        $r0 := @parameter1: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "other");

        $i2 = lengthof $r0;

        $i3 = 0;

     label1:
        if $i3 >= $i2 goto label2;

        $i0 = $r0[$i3];

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i0);

        $i3 = $i3 + 1;

        goto label1;

     label2:
        return $i1;
    }

    private static final long minOf(long, long)
    {
        long $l0, $l1;

        $l1 := @parameter0: long;

        $l0 := @parameter1: long;

        $l1 = staticinvoke <java.lang.Math: long min(long,long)>($l1, $l0);

        return $l1;
    }

    private static final long minOf(long, long, long)
    {
        long $l0, $l1, $l2;

        $l1 := @parameter0: long;

        $l2 := @parameter1: long;

        $l0 := @parameter2: long;

        $l2 = staticinvoke <java.lang.Math: long min(long,long)>($l2, $l0);

        $l1 = staticinvoke <java.lang.Math: long min(long,long)>($l1, $l2);

        return $l1;
    }

    public static final transient long minOf(long, long[])
    {
        long[] $r0;
        long $l0, $l1;
        int $i2, $i3;

        $l1 := @parameter0: long;

        $r0 := @parameter1: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "other");

        $i2 = lengthof $r0;

        $i3 = 0;

     label1:
        if $i3 >= $i2 goto label2;

        $l0 = $r0[$i3];

        $l1 = staticinvoke <java.lang.Math: long min(long,long)>($l1, $l0);

        $i3 = $i3 + 1;

        goto label1;

     label2:
        return $l1;
    }

    public static final java.lang.Comparable minOf(java.lang.Comparable, java.lang.Comparable)
    {
        java.lang.Comparable $r0, $r1;
        int $i0;

        $r0 := @parameter0: java.lang.Comparable;

        $r1 := @parameter1: java.lang.Comparable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "a");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "b");

        $i0 = interfaceinvoke $r0.<java.lang.Comparable: int compareTo(java.lang.Object)>($r1);

        if $i0 > 0 goto label1;

        return $r0;

     label1:
        return $r1;
    }

    public static final java.lang.Comparable minOf(java.lang.Comparable, java.lang.Comparable, java.lang.Comparable)
    {
        java.lang.Comparable $r0, $r1, $r2;

        $r1 := @parameter0: java.lang.Comparable;

        $r2 := @parameter1: java.lang.Comparable;

        $r0 := @parameter2: java.lang.Comparable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "a");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "b");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "c");

        $r2 = staticinvoke <kotlin.comparisons.ComparisonsKt: java.lang.Comparable minOf(java.lang.Comparable,java.lang.Comparable)>($r2, $r0);

        $r1 = staticinvoke <kotlin.comparisons.ComparisonsKt: java.lang.Comparable minOf(java.lang.Comparable,java.lang.Comparable)>($r1, $r2);

        return $r1;
    }

    public static final transient java.lang.Comparable minOf(java.lang.Comparable, java.lang.Comparable[])
    {
        java.lang.Comparable[] $r0;
        java.lang.Comparable $r1, $r2;
        int $i0, $i1;

        $r2 := @parameter0: java.lang.Comparable;

        $r0 := @parameter1: java.lang.Comparable[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "a");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "other");

        $i0 = lengthof $r0;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r1 = $r0[$i1];

        $r2 = staticinvoke <kotlin.comparisons.ComparisonsKt: java.lang.Comparable minOf(java.lang.Comparable,java.lang.Comparable)>($r2, $r1);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $r2;
    }

    private static final short minOf(short, short)
    {
        short $s0, $s2;
        int $i1;

        $s2 := @parameter0: short;

        $s0 := @parameter1: short;

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($s2, $s0);

        $s2 = (short) $i1;

        return $s2;
    }

    private static final short minOf(short, short, short)
    {
        short $s0, $s1, $s2;
        int $i3;

        $s1 := @parameter0: short;

        $s2 := @parameter1: short;

        $s0 := @parameter2: short;

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($s2, $s0);

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($s1, $i3);

        $s1 = (short) $i3;

        return $s1;
    }

    public static final transient short minOf(short, short[])
    {
        short[] $r0;
        short $s0, $s2;
        int $i1, $i3, $i4;

        $s2 := @parameter0: short;

        $r0 := @parameter1: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "other");

        $i3 = lengthof $r0;

        $i4 = 0;

     label1:
        if $i4 >= $i3 goto label2;

        $s0 = $r0[$i4];

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($s2, $s0);

        $s2 = (short) $i1;

        $i4 = $i4 + 1;

        goto label1;

     label2:
        return $s2;
    }

