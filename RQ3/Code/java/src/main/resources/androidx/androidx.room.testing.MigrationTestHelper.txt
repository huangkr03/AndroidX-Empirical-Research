androidx.room.testing.MigrationTestHelper
<androidx.room.testing.MigrationTestHelper: java.lang.String TAG>
<androidx.room.testing.MigrationTestHelper: java.lang.String mAssetsFolder>
<androidx.room.testing.MigrationTestHelper: androidx.sqlite.db.SupportSQLiteOpenHelper$Factory mOpenFactory>
<androidx.room.testing.MigrationTestHelper: java.util.List mManagedDatabases>
<androidx.room.testing.MigrationTestHelper: java.util.List mManagedRoomDatabases>
<androidx.room.testing.MigrationTestHelper: boolean mTestStarted>
<androidx.room.testing.MigrationTestHelper: android.app.Instrumentation mInstrumentation>
<androidx.room.testing.MigrationTestHelper: java.util.List mSpecs>
<androidx.room.testing.MigrationTestHelper: java.lang.Class mDatabaseClass>
<androidx.room.testing.MigrationTestHelper: androidx.room.DatabaseConfiguration mDatabaseConfiguration>
    public void <init>(android.app.Instrumentation, java.lang.String)
    {
        androidx.room.testing.MigrationTestHelper r0;
        android.app.Instrumentation r1;
        java.lang.String r2;
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelperFactory $r3;

        r0 := @this: androidx.room.testing.MigrationTestHelper;

        r1 := @parameter0: android.app.Instrumentation;

        r2 := @parameter1: java.lang.String;

        $r3 = new androidx.sqlite.db.framework.FrameworkSQLiteOpenHelperFactory;

        specialinvoke $r3.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelperFactory: void <init>()>();

        specialinvoke r0.<androidx.room.testing.MigrationTestHelper: void <init>(android.app.Instrumentation,java.lang.String,androidx.sqlite.db.SupportSQLiteOpenHelper$Factory)>(r1, r2, $r3);

        return;
    }

    public void <init>(android.app.Instrumentation, java.lang.String, androidx.sqlite.db.SupportSQLiteOpenHelper$Factory)
    {
        androidx.room.testing.MigrationTestHelper r0;
        android.app.Instrumentation r1;
        java.lang.String r2;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Factory r3;
        java.util.ArrayList $r4, $r5, $r6;

        r0 := @this: androidx.room.testing.MigrationTestHelper;

        r1 := @parameter0: android.app.Instrumentation;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: androidx.sqlite.db.SupportSQLiteOpenHelper$Factory;

        specialinvoke r0.<org.junit.rules.TestWatcher: void <init>()>();

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<androidx.room.testing.MigrationTestHelper: java.util.List mManagedDatabases> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<androidx.room.testing.MigrationTestHelper: java.util.List mManagedRoomDatabases> = $r5;

        r0.<androidx.room.testing.MigrationTestHelper: android.app.Instrumentation mInstrumentation> = r1;

        r0.<androidx.room.testing.MigrationTestHelper: java.lang.String mAssetsFolder> = r2;

        r0.<androidx.room.testing.MigrationTestHelper: androidx.sqlite.db.SupportSQLiteOpenHelper$Factory mOpenFactory> = r3;

        r0.<androidx.room.testing.MigrationTestHelper: java.lang.Class mDatabaseClass> = null;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<androidx.room.testing.MigrationTestHelper: java.util.List mSpecs> = $r6;

        return;
    }

    public void <init>(android.app.Instrumentation, java.lang.Class)
    {
        androidx.room.testing.MigrationTestHelper r0;
        android.app.Instrumentation r1;
        java.lang.Class r2;
        java.util.ArrayList $r3;
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelperFactory $r4;

        r0 := @this: androidx.room.testing.MigrationTestHelper;

        r1 := @parameter0: android.app.Instrumentation;

        r2 := @parameter1: java.lang.Class;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = new androidx.sqlite.db.framework.FrameworkSQLiteOpenHelperFactory;

        specialinvoke $r4.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelperFactory: void <init>()>();

        specialinvoke r0.<androidx.room.testing.MigrationTestHelper: void <init>(android.app.Instrumentation,java.lang.Class,java.util.List,androidx.sqlite.db.SupportSQLiteOpenHelper$Factory)>(r1, r2, $r3, $r4);

        return;
    }

    public void <init>(android.app.Instrumentation, java.lang.Class, java.util.List)
    {
        androidx.room.testing.MigrationTestHelper r0;
        android.app.Instrumentation r1;
        java.lang.Class r2;
        java.util.List r3;
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelperFactory $r4;

        r0 := @this: androidx.room.testing.MigrationTestHelper;

        r1 := @parameter0: android.app.Instrumentation;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: java.util.List;

        $r4 = new androidx.sqlite.db.framework.FrameworkSQLiteOpenHelperFactory;

        specialinvoke $r4.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelperFactory: void <init>()>();

        specialinvoke r0.<androidx.room.testing.MigrationTestHelper: void <init>(android.app.Instrumentation,java.lang.Class,java.util.List,androidx.sqlite.db.SupportSQLiteOpenHelper$Factory)>(r1, r2, r3, $r4);

        return;
    }

    public void <init>(android.app.Instrumentation, java.lang.Class, java.util.List, androidx.sqlite.db.SupportSQLiteOpenHelper$Factory)
    {
        androidx.room.testing.MigrationTestHelper r0;
        android.app.Instrumentation r1;
        java.lang.Class r2;
        java.util.List r3;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Factory r4;
        java.util.ArrayList $r5, $r6;
        boolean $z0;
        int $i0, $i1;
        java.lang.String r7;

        r0 := @this: androidx.room.testing.MigrationTestHelper;

        r1 := @parameter0: android.app.Instrumentation;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: java.util.List;

        r4 := @parameter3: androidx.sqlite.db.SupportSQLiteOpenHelper$Factory;

        specialinvoke r0.<org.junit.rules.TestWatcher: void <init>()>();

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<androidx.room.testing.MigrationTestHelper: java.util.List mManagedDatabases> = $r5;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<androidx.room.testing.MigrationTestHelper: java.util.List mManagedRoomDatabases> = $r6;

        r7 = virtualinvoke r2.<java.lang.Class: java.lang.String getCanonicalName()>();

        r0.<androidx.room.testing.MigrationTestHelper: android.app.Instrumentation mInstrumentation> = r1;

        $z0 = virtualinvoke r7.<java.lang.String: boolean endsWith(java.lang.String)>("/");

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r7.<java.lang.String: int length()>();

        $i1 = $i0 - 1;

        r7 = virtualinvoke r7.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

     label1:
        r0.<androidx.room.testing.MigrationTestHelper: java.lang.String mAssetsFolder> = r7;

        r0.<androidx.room.testing.MigrationTestHelper: androidx.sqlite.db.SupportSQLiteOpenHelper$Factory mOpenFactory> = r4;

        r0.<androidx.room.testing.MigrationTestHelper: java.lang.Class mDatabaseClass> = r2;

        r0.<androidx.room.testing.MigrationTestHelper: java.util.List mSpecs> = r3;

        return;
    }

    protected void starting(org.junit.runner.Description)
    {
        androidx.room.testing.MigrationTestHelper r0;
        org.junit.runner.Description r1;

        r0 := @this: androidx.room.testing.MigrationTestHelper;

        r1 := @parameter0: org.junit.runner.Description;

        specialinvoke r0.<org.junit.rules.TestWatcher: void starting(org.junit.runner.Description)>(r1);

        r0.<androidx.room.testing.MigrationTestHelper: boolean mTestStarted> = 1;

        return;
    }

    public androidx.sqlite.db.SupportSQLiteDatabase createDatabase(java.lang.String, int) throws java.io.IOException
    {
        androidx.room.testing.MigrationTestHelper r0;
        java.lang.String r1, $r24, $r26, $r31;
        int i0;
        java.io.File r2;
        androidx.room.migration.bundle.SchemaBundle r3;
        androidx.room.RoomDatabase$MigrationContainer r4, $r9;
        androidx.room.DatabaseConfiguration r5, $r10;
        androidx.room.RoomOpenHelper r6, $r20;
        android.app.Instrumentation $r7, $r11;
        android.content.Context $r8, $r12;
        boolean $z0, $z1;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Factory $r13;
        androidx.room.RoomDatabase$JournalMode $r14;
        java.util.concurrent.Executor $r15, $r16;
        java.util.Set $r17;
        java.util.List $r18, $r19;
        androidx.room.testing.MigrationTestHelper$CreatingDelegate $r21;
        androidx.room.migration.bundle.DatabaseBundle $r22, $r23, $r25;
        androidx.sqlite.db.SupportSQLiteDatabase $r27;
        java.lang.StringBuilder $r28, $r29, $r30;
        java.lang.IllegalStateException $r32;

        r0 := @this: androidx.room.testing.MigrationTestHelper;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r7 = r0.<androidx.room.testing.MigrationTestHelper: android.app.Instrumentation mInstrumentation>;

        $r8 = virtualinvoke $r7.<android.app.Instrumentation: android.content.Context getTargetContext()>();

        r2 = virtualinvoke $r8.<android.content.Context: java.io.File getDatabasePath(java.lang.String)>(r1);

        $z0 = virtualinvoke r2.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("deleting database file ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("MigrationTestHelper", $r31);

        $z1 = virtualinvoke r2.<java.io.File: boolean delete()>();

        if $z1 != 0 goto label1;

        $r32 = new java.lang.IllegalStateException;

        specialinvoke $r32.<java.lang.IllegalStateException: void <init>(java.lang.String)>("There is a database file and I could not delete it. Make sure you don\'t have any open connections to that database before calling this method.");

        throw $r32;

     label1:
        r3 = specialinvoke r0.<androidx.room.testing.MigrationTestHelper: androidx.room.migration.bundle.SchemaBundle loadSchema(int)>(i0);

        $r9 = new androidx.room.RoomDatabase$MigrationContainer;

        specialinvoke $r9.<androidx.room.RoomDatabase$MigrationContainer: void <init>()>();

        r4 = $r9;

        $r10 = new androidx.room.DatabaseConfiguration;

        $r11 = r0.<androidx.room.testing.MigrationTestHelper: android.app.Instrumentation mInstrumentation>;

        $r12 = virtualinvoke $r11.<android.app.Instrumentation: android.content.Context getTargetContext()>();

        $r13 = r0.<androidx.room.testing.MigrationTestHelper: androidx.sqlite.db.SupportSQLiteOpenHelper$Factory mOpenFactory>;

        $r14 = <androidx.room.RoomDatabase$JournalMode: androidx.room.RoomDatabase$JournalMode TRUNCATE>;

        $r15 = staticinvoke <androidx.arch.core.executor.ArchTaskExecutor: java.util.concurrent.Executor getIOThreadExecutor()>();

        $r16 = staticinvoke <androidx.arch.core.executor.ArchTaskExecutor: java.util.concurrent.Executor getIOThreadExecutor()>();

        $r17 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        $r18 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r19 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        specialinvoke $r10.<androidx.room.DatabaseConfiguration: void <init>(android.content.Context,java.lang.String,androidx.sqlite.db.SupportSQLiteOpenHelper$Factory,androidx.room.RoomDatabase$MigrationContainer,java.util.List,boolean,androidx.room.RoomDatabase$JournalMode,java.util.concurrent.Executor,java.util.concurrent.Executor,android.content.Intent,boolean,boolean,java.util.Set,java.lang.String,java.io.File,java.util.concurrent.Callable,androidx.room.RoomDatabase$PrepackagedDatabaseCallback,java.util.List,java.util.List)>($r12, r1, $r13, r4, null, 1, $r14, $r15, $r16, null, 1, 0, $r17, null, null, null, null, $r18, $r19);

        r5 = $r10;

        $r20 = new androidx.room.RoomOpenHelper;

        $r21 = new androidx.room.testing.MigrationTestHelper$CreatingDelegate;

        $r22 = virtualinvoke r3.<androidx.room.migration.bundle.SchemaBundle: androidx.room.migration.bundle.DatabaseBundle getDatabase()>();

        specialinvoke $r21.<androidx.room.testing.MigrationTestHelper$CreatingDelegate: void <init>(androidx.room.migration.bundle.DatabaseBundle)>($r22);

        $r23 = virtualinvoke r3.<androidx.room.migration.bundle.SchemaBundle: androidx.room.migration.bundle.DatabaseBundle getDatabase()>();

        $r24 = virtualinvoke $r23.<androidx.room.migration.bundle.DatabaseBundle: java.lang.String getIdentityHash()>();

        $r25 = virtualinvoke r3.<androidx.room.migration.bundle.SchemaBundle: androidx.room.migration.bundle.DatabaseBundle getDatabase()>();

        $r26 = virtualinvoke $r25.<androidx.room.migration.bundle.DatabaseBundle: java.lang.String getIdentityHash()>();

        specialinvoke $r20.<androidx.room.RoomOpenHelper: void <init>(androidx.room.DatabaseConfiguration,androidx.room.RoomOpenHelper$Delegate,java.lang.String,java.lang.String)>(r5, $r21, $r24, $r26);

        r6 = $r20;

        $r27 = specialinvoke r0.<androidx.room.testing.MigrationTestHelper: androidx.sqlite.db.SupportSQLiteDatabase openDatabase(java.lang.String,androidx.room.RoomOpenHelper)>(r1, r6);

        return $r27;
    }

    public transient androidx.sqlite.db.SupportSQLiteDatabase runMigrationsAndValidate(java.lang.String, int, boolean, androidx.room.migration.Migration[]) throws java.io.IOException
    {
        androidx.room.testing.MigrationTestHelper r0;
        java.lang.String r1, $r27, $r29, $r38;
        int i0, $i1, $i2;
        boolean z0, z1, $z2, $z3;
        androidx.room.migration.Migration[] r2, $r32;
        java.io.File r3;
        androidx.room.migration.bundle.SchemaBundle r4;
        androidx.room.RoomDatabase$MigrationContainer r5, $r10;
        java.util.List r6, $r11, $r20, $r21;
        androidx.room.migration.Migration r7;
        android.app.Instrumentation $r8, $r13;
        android.content.Context $r9, $r14;
        androidx.room.DatabaseConfiguration $r12, $r24;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Factory $r15;
        androidx.room.RoomDatabase$JournalMode $r16;
        java.util.concurrent.Executor $r17, $r18;
        java.util.Set $r19;
        androidx.room.RoomOpenHelper $r22, r40;
        androidx.room.testing.MigrationTestHelper$MigratingDelegate $r23;
        androidx.room.migration.bundle.DatabaseBundle $r25, $r26, $r28;
        androidx.sqlite.db.SupportSQLiteDatabase $r30;
        java.lang.Object $r31;
        java.lang.IllegalStateException $r33;
        java.lang.StringBuilder $r34, $r35, $r36, $r37;
        java.util.Iterator r39;

        r0 := @this: androidx.room.testing.MigrationTestHelper;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        r2 := @parameter3: androidx.room.migration.Migration[];

        $r8 = r0.<androidx.room.testing.MigrationTestHelper: android.app.Instrumentation mInstrumentation>;

        $r9 = virtualinvoke $r8.<android.app.Instrumentation: android.content.Context getTargetContext()>();

        r3 = virtualinvoke $r9.<android.content.Context: java.io.File getDatabasePath(java.lang.String)>(r1);

        $z2 = virtualinvoke r3.<java.io.File: boolean exists()>();

        if $z2 != 0 goto label1;

        $r33 = new java.lang.IllegalStateException;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find the database file for ");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Before calling runMigrations, you must first create the database via createDatabase.");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r38);

        throw $r33;

     label1:
        r4 = specialinvoke r0.<androidx.room.testing.MigrationTestHelper: androidx.room.migration.bundle.SchemaBundle loadSchema(int)>(i0);

        $r10 = new androidx.room.RoomDatabase$MigrationContainer;

        specialinvoke $r10.<androidx.room.RoomDatabase$MigrationContainer: void <init>()>();

        r5 = $r10;

        virtualinvoke r5.<androidx.room.RoomDatabase$MigrationContainer: void addMigrations(androidx.room.migration.Migration[])>(r2);

        $r11 = r0.<androidx.room.testing.MigrationTestHelper: java.util.List mSpecs>;

        r6 = specialinvoke r0.<androidx.room.testing.MigrationTestHelper: java.util.List getAutoMigrations(java.util.List)>($r11);

        r39 = interfaceinvoke r6.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z3 = interfaceinvoke r39.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label4;

        $r31 = interfaceinvoke r39.<java.util.Iterator: java.lang.Object next()>();

        r7 = (androidx.room.migration.Migration) $r31;

        $i2 = r7.<androidx.room.migration.Migration: int startVersion>;

        $i1 = r7.<androidx.room.migration.Migration: int endVersion>;

        z1 = virtualinvoke r5.<androidx.room.RoomDatabase$MigrationContainer: boolean contains(int,int)>($i2, $i1);

        if z1 != 0 goto label3;

        $r32 = newarray (androidx.room.migration.Migration)[1];

        $r32[0] = r7;

        virtualinvoke r5.<androidx.room.RoomDatabase$MigrationContainer: void addMigrations(androidx.room.migration.Migration[])>($r32);

     label3:
        goto label2;

     label4:
        $r12 = new androidx.room.DatabaseConfiguration;

        $r13 = r0.<androidx.room.testing.MigrationTestHelper: android.app.Instrumentation mInstrumentation>;

        $r14 = virtualinvoke $r13.<android.app.Instrumentation: android.content.Context getTargetContext()>();

        $r15 = r0.<androidx.room.testing.MigrationTestHelper: androidx.sqlite.db.SupportSQLiteOpenHelper$Factory mOpenFactory>;

        $r16 = <androidx.room.RoomDatabase$JournalMode: androidx.room.RoomDatabase$JournalMode TRUNCATE>;

        $r17 = staticinvoke <androidx.arch.core.executor.ArchTaskExecutor: java.util.concurrent.Executor getIOThreadExecutor()>();

        $r18 = staticinvoke <androidx.arch.core.executor.ArchTaskExecutor: java.util.concurrent.Executor getIOThreadExecutor()>();

        $r19 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        $r20 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r21 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        specialinvoke $r12.<androidx.room.DatabaseConfiguration: void <init>(android.content.Context,java.lang.String,androidx.sqlite.db.SupportSQLiteOpenHelper$Factory,androidx.room.RoomDatabase$MigrationContainer,java.util.List,boolean,androidx.room.RoomDatabase$JournalMode,java.util.concurrent.Executor,java.util.concurrent.Executor,android.content.Intent,boolean,boolean,java.util.Set,java.lang.String,java.io.File,java.util.concurrent.Callable,androidx.room.RoomDatabase$PrepackagedDatabaseCallback,java.util.List,java.util.List)>($r14, r1, $r15, r5, null, 1, $r16, $r17, $r18, null, 1, 0, $r19, null, null, null, null, $r20, $r21);

        r0.<androidx.room.testing.MigrationTestHelper: androidx.room.DatabaseConfiguration mDatabaseConfiguration> = $r12;

        $r22 = new androidx.room.RoomOpenHelper;

        $r24 = r0.<androidx.room.testing.MigrationTestHelper: androidx.room.DatabaseConfiguration mDatabaseConfiguration>;

        $r23 = new androidx.room.testing.MigrationTestHelper$MigratingDelegate;

        $r25 = virtualinvoke r4.<androidx.room.migration.bundle.SchemaBundle: androidx.room.migration.bundle.DatabaseBundle getDatabase()>();

        specialinvoke $r23.<androidx.room.testing.MigrationTestHelper$MigratingDelegate: void <init>(androidx.room.migration.bundle.DatabaseBundle,boolean)>($r25, z0);

        $r26 = virtualinvoke r4.<androidx.room.migration.bundle.SchemaBundle: androidx.room.migration.bundle.DatabaseBundle getDatabase()>();

        $r27 = virtualinvoke $r26.<androidx.room.migration.bundle.DatabaseBundle: java.lang.String getIdentityHash()>();

        $r28 = virtualinvoke r4.<androidx.room.migration.bundle.SchemaBundle: androidx.room.migration.bundle.DatabaseBundle getDatabase()>();

        $r29 = virtualinvoke $r28.<androidx.room.migration.bundle.DatabaseBundle: java.lang.String getIdentityHash()>();

        specialinvoke $r22.<androidx.room.RoomOpenHelper: void <init>(androidx.room.DatabaseConfiguration,androidx.room.RoomOpenHelper$Delegate,java.lang.String,java.lang.String)>($r24, $r23, $r27, $r29);

        r40 = $r22;

        $r30 = specialinvoke r0.<androidx.room.testing.MigrationTestHelper: androidx.sqlite.db.SupportSQLiteDatabase openDatabase(java.lang.String,androidx.room.RoomOpenHelper)>(r1, r40);

        return $r30;
    }

    public androidx.room.DatabaseConfiguration getDbConfigurationAfterMigrations()
    {
        androidx.room.testing.MigrationTestHelper r0;
        androidx.room.DatabaseConfiguration $r1;

        r0 := @this: androidx.room.testing.MigrationTestHelper;

        $r1 = r0.<androidx.room.testing.MigrationTestHelper: androidx.room.DatabaseConfiguration mDatabaseConfiguration>;

        return $r1;
    }

    private java.util.List getAutoMigrations(java.util.List)
    {
        androidx.room.testing.MigrationTestHelper r0;
        java.util.List r1, $r8;
        androidx.room.RoomDatabase r2;
        java.util.Set r3;
        java.lang.Class $r4, $r5;
        java.lang.Object $r6;
        java.util.Map $r7;
        boolean $z0;
        java.lang.IllegalStateException $r9;
        java.util.ArrayList $r10;

        r0 := @this: androidx.room.testing.MigrationTestHelper;

        r1 := @parameter0: java.util.List;

        $r4 = r0.<androidx.room.testing.MigrationTestHelper: java.lang.Class mDatabaseClass>;

        if $r4 != null goto label2;

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MigrationTestHelper", "If you have any AutoMigrations in your implementation, you must use a non-deprecated MigrationTestHelper constructor to provide the Database class in order to test them. If you do not have any AutoMigrations to test, you may ignore this warning.");

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        return $r10;

     label1:
        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("You must provide the database class in the MigrationTestHelper constructor in order to test auto migrations.");

        throw $r9;

     label2:
        $r5 = r0.<androidx.room.testing.MigrationTestHelper: java.lang.Class mDatabaseClass>;

        $r6 = staticinvoke <androidx.room.Room: java.lang.Object getGeneratedImplementation(java.lang.Class,java.lang.String)>($r5, "_Impl");

        r2 = (androidx.room.RoomDatabase) $r6;

        r3 = virtualinvoke r2.<androidx.room.RoomDatabase: java.util.Set getRequiredAutoMigrationSpecs()>();

        $r7 = specialinvoke r0.<androidx.room.testing.MigrationTestHelper: java.util.Map createAutoMigrationSpecMap(java.util.Set,java.util.List)>(r3, r1);

        $r8 = virtualinvoke r2.<androidx.room.RoomDatabase: java.util.List getAutoMigrations(java.util.Map)>($r7);

        return $r8;
    }

    private java.util.Map createAutoMigrationSpecMap(java.util.Set, java.util.List)
    {
        androidx.room.testing.MigrationTestHelper r0;
        java.util.Set r1;
        java.util.List r2;
        java.util.HashMap r3, $r8;
        java.util.Iterator r4, r6;
        java.lang.Class r5, $r19;
        androidx.room.migration.AutoMigrationSpec r7, r21;
        boolean $z0, $z1, $z2, $z3, z4;
        java.lang.Object $r9, $r18;
        java.lang.IllegalArgumentException $r11;
        java.lang.StringBuilder $r12, $r13, $r15, $r16;
        java.lang.String $r14, $r17;
        java.lang.IllegalStateException $r20;

        r0 := @this: androidx.room.testing.MigrationTestHelper;

        r1 := @parameter0: java.util.Set;

        r2 := @parameter1: java.util.List;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        r3 = $r8;

        $z0 = interfaceinvoke r1.<java.util.Set: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return r3;

     label1:
        if r2 != null goto label2;

        $r20 = new java.lang.IllegalStateException;

        specialinvoke $r20.<java.lang.IllegalStateException: void <init>(java.lang.String)>("You must provide all required auto migration specs in the MigrationTestHelper constructor.");

        throw $r20;

     label2:
        r4 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r9 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.Class) $r9;

        z4 = 0;

        r21 = null;

        r6 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z2 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r18 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (androidx.room.migration.AutoMigrationSpec) $r18;

        $r19 = virtualinvoke r7.<java.lang.Object: java.lang.Class getClass()>();

        $z3 = virtualinvoke r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r19);

        if $z3 == 0 goto label5;

        z4 = 1;

        r21 = r7;

        goto label6;

     label5:
        goto label4;

     label6:
        if z4 != 0 goto label7;

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("A required auto migration spec (");

        $r14 = virtualinvoke r5.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") has not been provided.");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r11;

     label7:
        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r21);

        goto label3;

     label8:
        return r3;
    }

    private androidx.sqlite.db.SupportSQLiteDatabase openDatabase(java.lang.String, androidx.room.RoomOpenHelper)
    {
        androidx.room.testing.MigrationTestHelper r0;
        java.lang.String r1;
        androidx.room.RoomOpenHelper r2;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration r3;
        androidx.sqlite.db.SupportSQLiteDatabase r4;
        android.app.Instrumentation $r5;
        android.content.Context $r6;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder $r7, $r8, $r9;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Factory $r10;
        androidx.sqlite.db.SupportSQLiteOpenHelper $r11;
        java.lang.ref.WeakReference $r12;
        java.util.List $r13;

        r0 := @this: androidx.room.testing.MigrationTestHelper;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.room.RoomOpenHelper;

        $r5 = r0.<androidx.room.testing.MigrationTestHelper: android.app.Instrumentation mInstrumentation>;

        $r6 = virtualinvoke $r5.<android.app.Instrumentation: android.content.Context getTargetContext()>();

        $r7 = staticinvoke <androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration: androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder builder(android.content.Context)>($r6);

        $r8 = virtualinvoke $r7.<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder: androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder callback(androidx.sqlite.db.SupportSQLiteOpenHelper$Callback)>(r2);

        $r9 = virtualinvoke $r8.<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder: androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder name(java.lang.String)>(r1);

        r3 = virtualinvoke $r9.<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder: androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration build()>();

        $r10 = r0.<androidx.room.testing.MigrationTestHelper: androidx.sqlite.db.SupportSQLiteOpenHelper$Factory mOpenFactory>;

        $r11 = interfaceinvoke $r10.<androidx.sqlite.db.SupportSQLiteOpenHelper$Factory: androidx.sqlite.db.SupportSQLiteOpenHelper create(androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration)>(r3);

        r4 = interfaceinvoke $r11.<androidx.sqlite.db.SupportSQLiteOpenHelper: androidx.sqlite.db.SupportSQLiteDatabase getWritableDatabase()>();

        $r13 = r0.<androidx.room.testing.MigrationTestHelper: java.util.List mManagedDatabases>;

        $r12 = new java.lang.ref.WeakReference;

        specialinvoke $r12.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r4);

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>($r12);

        return r4;
    }

    protected void finished(org.junit.runner.Description)
    {
        androidx.room.testing.MigrationTestHelper r0;
        org.junit.runner.Description r1;
        java.lang.Throwable r2, $r9;
        java.util.List $r3, $r4;
        boolean $z0, $z1, $z2;
        java.lang.Object $r5, $r6, $r7, $r8;
        java.util.Iterator r10, r13;
        java.lang.ref.WeakReference r11, r14;
        androidx.sqlite.db.SupportSQLiteDatabase r12;
        androidx.room.RoomDatabase r15;

        r0 := @this: androidx.room.testing.MigrationTestHelper;

        r1 := @parameter0: org.junit.runner.Description;

        specialinvoke r0.<org.junit.rules.TestWatcher: void finished(org.junit.runner.Description)>(r1);

        $r3 = r0.<androidx.room.testing.MigrationTestHelper: java.util.List mManagedDatabases>;

        r10 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r7 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r11 = (java.lang.ref.WeakReference) $r7;

        $r8 = virtualinvoke r11.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r12 = (androidx.sqlite.db.SupportSQLiteDatabase) $r8;

        if r12 == null goto label5;

        $z2 = interfaceinvoke r12.<androidx.sqlite.db.SupportSQLiteDatabase: boolean isOpen()>();

        if $z2 == 0 goto label5;

     label2:
        interfaceinvoke r12.<androidx.sqlite.db.SupportSQLiteDatabase: void close()>();

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

        r2 = $r9;

     label5:
        goto label1;

     label6:
        $r4 = r0.<androidx.room.testing.MigrationTestHelper: java.util.List mManagedRoomDatabases>;

        r13 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label7:
        $z1 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label9;

        $r5 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        r14 = (java.lang.ref.WeakReference) $r5;

        $r6 = virtualinvoke r14.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r15 = (androidx.room.RoomDatabase) $r6;

        if r15 == null goto label8;

        virtualinvoke r15.<androidx.room.RoomDatabase: void close()>();

     label8:
        goto label7;

     label9:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public void closeWhenFinished(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.testing.MigrationTestHelper r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        boolean $z0;
        java.lang.ref.WeakReference $r2;
        java.util.List $r3;
        java.lang.IllegalStateException $r4;

        r0 := @this: androidx.room.testing.MigrationTestHelper;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        $z0 = r0.<androidx.room.testing.MigrationTestHelper: boolean mTestStarted>;

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("You cannot register a database to be closed before the test starts. Maybe you forgot to annotate MigrationTestHelper as a test rule? (@Rule)");

        throw $r4;

     label1:
        $r3 = r0.<androidx.room.testing.MigrationTestHelper: java.util.List mManagedDatabases>;

        $r2 = new java.lang.ref.WeakReference;

        specialinvoke $r2.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r1);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r2);

        return;
    }

    public void closeWhenFinished(androidx.room.RoomDatabase)
    {
        androidx.room.testing.MigrationTestHelper r0;
        androidx.room.RoomDatabase r1;
        boolean $z0;
        java.lang.ref.WeakReference $r2;
        java.util.List $r3;
        java.lang.IllegalStateException $r4;

        r0 := @this: androidx.room.testing.MigrationTestHelper;

        r1 := @parameter0: androidx.room.RoomDatabase;

        $z0 = r0.<androidx.room.testing.MigrationTestHelper: boolean mTestStarted>;

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("You cannot register a database to be closed before the test starts. Maybe you forgot to annotate MigrationTestHelper as a test rule? (@Rule)");

        throw $r4;

     label1:
        $r3 = r0.<androidx.room.testing.MigrationTestHelper: java.util.List mManagedRoomDatabases>;

        $r2 = new java.lang.ref.WeakReference;

        specialinvoke $r2.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r1);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r2);

        return;
    }

    private androidx.room.migration.bundle.SchemaBundle loadSchema(int) throws java.io.IOException
    {
        androidx.room.testing.MigrationTestHelper r0;
        int i0;
        java.lang.Throwable r1, r2, $r6, $r10;
        android.app.Instrumentation $r3, $r7;
        android.content.Context $r4, $r8;
        androidx.room.migration.bundle.SchemaBundle $r5, $r9;
        java.io.FileNotFoundException $r11;
        java.lang.StringBuilder $r12, $r13, $r15;
        java.lang.String $r14, $r16;

        r0 := @this: androidx.room.testing.MigrationTestHelper;

        i0 := @parameter0: int;

     label1:
        $r3 = r0.<androidx.room.testing.MigrationTestHelper: android.app.Instrumentation mInstrumentation>;

        $r4 = virtualinvoke $r3.<android.app.Instrumentation: android.content.Context getContext()>();

        $r5 = specialinvoke r0.<androidx.room.testing.MigrationTestHelper: androidx.room.migration.bundle.SchemaBundle loadSchema(android.content.Context,int)>($r4, i0);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        r1 = $r6;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MigrationTestHelper", "Could not find the schema file in the test assets. Checking the application assets");

     label4:
        $r7 = r0.<androidx.room.testing.MigrationTestHelper: android.app.Instrumentation mInstrumentation>;

        $r8 = virtualinvoke $r7.<android.app.Instrumentation: android.content.Context getTargetContext()>();

        $r9 = specialinvoke r0.<androidx.room.testing.MigrationTestHelper: androidx.room.migration.bundle.SchemaBundle loadSchema(android.content.Context,int)>($r8, i0);

     label5:
        return $r9;

     label6:
        $r10 := @caughtexception;

        r2 = $r10;

        $r11 = new java.io.FileNotFoundException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find the schema file in the assets folder. Make sure to include the exported json schemas in your test assert inputs. See https://developer.android.com/training/data-storage/room/migrating-db-versions#export-schema for details. Missing file: ");

        $r14 = virtualinvoke r1.<java.io.FileNotFoundException: java.lang.String getMessage()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r16);

        throw $r11;

        catch java.io.FileNotFoundException from label1 to label2 with label3;
        catch java.io.FileNotFoundException from label4 to label5 with label6;
    }

    private androidx.room.migration.bundle.SchemaBundle loadSchema(android.content.Context, int) throws java.io.IOException
    {
        androidx.room.testing.MigrationTestHelper r0;
        android.content.Context r1;
        int i0;
        java.io.InputStream r2;
        android.content.res.AssetManager $r3;
        java.lang.StringBuilder $r4, $r6, $r7, $r8, $r9;
        java.lang.String $r5, $r10;
        androidx.room.migration.bundle.SchemaBundle $r11;

        r0 := @this: androidx.room.testing.MigrationTestHelper;

        r1 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        $r3 = virtualinvoke r1.<android.content.Context: android.content.res.AssetManager getAssets()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = r0.<androidx.room.testing.MigrationTestHelper: java.lang.String mAssetsFolder>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".json");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        r2 = virtualinvoke $r3.<android.content.res.AssetManager: java.io.InputStream open(java.lang.String)>($r10);

        $r11 = staticinvoke <androidx.room.migration.bundle.SchemaBundle: androidx.room.migration.bundle.SchemaBundle deserialize(java.io.InputStream)>(r2);

        return $r11;
    }

    static androidx.room.util.TableInfo toTableInfo(androidx.room.migration.bundle.EntityBundle)
    {
        androidx.room.migration.bundle.EntityBundle r0;
        androidx.room.util.TableInfo $r1;
        java.lang.String $r2;
        java.util.Map $r3;
        java.util.List $r4, $r6;
        java.util.Set $r5, $r7;

        r0 := @parameter0: androidx.room.migration.bundle.EntityBundle;

        $r1 = new androidx.room.util.TableInfo;

        $r2 = virtualinvoke r0.<androidx.room.migration.bundle.EntityBundle: java.lang.String getTableName()>();

        $r3 = staticinvoke <androidx.room.testing.MigrationTestHelper: java.util.Map toColumnMap(androidx.room.migration.bundle.EntityBundle)>(r0);

        $r4 = virtualinvoke r0.<androidx.room.migration.bundle.EntityBundle: java.util.List getForeignKeys()>();

        $r5 = staticinvoke <androidx.room.testing.MigrationTestHelper: java.util.Set toForeignKeys(java.util.List)>($r4);

        $r6 = virtualinvoke r0.<androidx.room.migration.bundle.EntityBundle: java.util.List getIndices()>();

        $r7 = staticinvoke <androidx.room.testing.MigrationTestHelper: java.util.Set toIndices(java.util.List)>($r6);

        specialinvoke $r1.<androidx.room.util.TableInfo: void <init>(java.lang.String,java.util.Map,java.util.Set,java.util.Set)>($r2, $r3, $r5, $r7);

        return $r1;
    }

    static androidx.room.util.FtsTableInfo toFtsTableInfo(androidx.room.migration.bundle.FtsEntityBundle)
    {
        androidx.room.migration.bundle.FtsEntityBundle r0;
        androidx.room.util.FtsTableInfo $r1;
        java.lang.String $r2, $r4;
        java.util.Set $r3;

        r0 := @parameter0: androidx.room.migration.bundle.FtsEntityBundle;

        $r1 = new androidx.room.util.FtsTableInfo;

        $r2 = virtualinvoke r0.<androidx.room.migration.bundle.FtsEntityBundle: java.lang.String getTableName()>();

        $r3 = staticinvoke <androidx.room.testing.MigrationTestHelper: java.util.Set toColumnNamesSet(androidx.room.migration.bundle.EntityBundle)>(r0);

        $r4 = virtualinvoke r0.<androidx.room.migration.bundle.FtsEntityBundle: java.lang.String getCreateSql()>();

        specialinvoke $r1.<androidx.room.util.FtsTableInfo: void <init>(java.lang.String,java.util.Set,java.lang.String)>($r2, $r3, $r4);

        return $r1;
    }

    static androidx.room.util.ViewInfo toViewInfo(androidx.room.migration.bundle.DatabaseViewBundle)
    {
        androidx.room.migration.bundle.DatabaseViewBundle r0;
        androidx.room.util.ViewInfo $r1;
        java.lang.String $r2, $r3;

        r0 := @parameter0: androidx.room.migration.bundle.DatabaseViewBundle;

        $r1 = new androidx.room.util.ViewInfo;

        $r2 = virtualinvoke r0.<androidx.room.migration.bundle.DatabaseViewBundle: java.lang.String getViewName()>();

        $r3 = virtualinvoke r0.<androidx.room.migration.bundle.DatabaseViewBundle: java.lang.String createView()>();

        specialinvoke $r1.<androidx.room.util.ViewInfo: void <init>(java.lang.String,java.lang.String)>($r2, $r3);

        return $r1;
    }

    private static java.util.Set toIndices(java.util.List)
    {
        java.util.List r0, $r8, $r9;
        java.util.HashSet r1, $r4;
        java.util.Iterator r2;
        androidx.room.migration.bundle.IndexBundle r3;
        boolean $z0, $z1;
        java.lang.Object $r5;
        androidx.room.util.TableInfo$Index $r6;
        java.lang.String $r7;
        java.util.Set $r10;

        r0 := @parameter0: java.util.List;

        if r0 != null goto label1;

        $r10 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        return $r10;

     label1:
        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        r1 = $r4;

        r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.room.migration.bundle.IndexBundle) $r5;

        $r6 = new androidx.room.util.TableInfo$Index;

        $r7 = virtualinvoke r3.<androidx.room.migration.bundle.IndexBundle: java.lang.String getName()>();

        $z1 = virtualinvoke r3.<androidx.room.migration.bundle.IndexBundle: boolean isUnique()>();

        $r8 = virtualinvoke r3.<androidx.room.migration.bundle.IndexBundle: java.util.List getColumnNames()>();

        $r9 = virtualinvoke r3.<androidx.room.migration.bundle.IndexBundle: java.util.List getOrders()>();

        specialinvoke $r6.<androidx.room.util.TableInfo$Index: void <init>(java.lang.String,boolean,java.util.List,java.util.List)>($r7, $z1, $r8, $r9);

        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>($r6);

        goto label2;

     label3:
        return r1;
    }

    private static java.util.Set toForeignKeys(java.util.List)
    {
        java.util.List r0, $r10, $r11;
        java.util.HashSet r1, $r4;
        java.util.Iterator r2;
        androidx.room.migration.bundle.ForeignKeyBundle r3;
        int $i0;
        boolean $z0;
        java.lang.Object $r5;
        androidx.room.util.TableInfo$ForeignKey $r6;
        java.lang.String $r7, $r8, $r9;
        java.util.Set $r12;

        r0 := @parameter0: java.util.List;

        if r0 != null goto label1;

        $r12 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        return $r12;

     label1:
        $r4 = new java.util.HashSet;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        specialinvoke $r4.<java.util.HashSet: void <init>(int)>($i0);

        r1 = $r4;

        r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.room.migration.bundle.ForeignKeyBundle) $r5;

        $r6 = new androidx.room.util.TableInfo$ForeignKey;

        $r7 = virtualinvoke r3.<androidx.room.migration.bundle.ForeignKeyBundle: java.lang.String getTable()>();

        $r8 = virtualinvoke r3.<androidx.room.migration.bundle.ForeignKeyBundle: java.lang.String getOnDelete()>();

        $r9 = virtualinvoke r3.<androidx.room.migration.bundle.ForeignKeyBundle: java.lang.String getOnUpdate()>();

        $r10 = virtualinvoke r3.<androidx.room.migration.bundle.ForeignKeyBundle: java.util.List getColumns()>();

        $r11 = virtualinvoke r3.<androidx.room.migration.bundle.ForeignKeyBundle: java.util.List getReferencedColumns()>();

        specialinvoke $r6.<androidx.room.util.TableInfo$ForeignKey: void <init>(java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List)>($r7, $r8, $r9, $r10, $r11);

        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>($r6);

        goto label2;

     label3:
        return r1;
    }

    private static java.util.Set toColumnNamesSet(androidx.room.migration.bundle.EntityBundle)
    {
        androidx.room.migration.bundle.EntityBundle r0;
        java.util.HashSet r1, $r4;
        java.util.Iterator r2;
        androidx.room.migration.bundle.FieldBundle r3;
        java.util.List $r5;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.String $r7;

        r0 := @parameter0: androidx.room.migration.bundle.EntityBundle;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        r1 = $r4;

        $r5 = virtualinvoke r0.<androidx.room.migration.bundle.EntityBundle: java.util.List getFields()>();

        r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.room.migration.bundle.FieldBundle) $r6;

        $r7 = virtualinvoke r3.<androidx.room.migration.bundle.FieldBundle: java.lang.String getColumnName()>();

        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>($r7);

        goto label1;

     label2:
        return r1;
    }

    private static java.util.Map toColumnMap(androidx.room.migration.bundle.EntityBundle)
    {
        androidx.room.migration.bundle.EntityBundle r0;
        java.util.HashMap r1, $r5;
        java.util.Iterator r2;
        androidx.room.migration.bundle.FieldBundle r3;
        androidx.room.util.TableInfo$Column r4;
        java.util.List $r6;
        boolean $z0;
        java.lang.Object $r7;
        java.lang.String $r8;

        r0 := @parameter0: androidx.room.migration.bundle.EntityBundle;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r1 = $r5;

        $r6 = virtualinvoke r0.<androidx.room.migration.bundle.EntityBundle: java.util.List getFields()>();

        r2 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.room.migration.bundle.FieldBundle) $r7;

        r4 = staticinvoke <androidx.room.testing.MigrationTestHelper: androidx.room.util.TableInfo$Column toColumn(androidx.room.migration.bundle.EntityBundle,androidx.room.migration.bundle.FieldBundle)>(r0, r3);

        $r8 = r4.<androidx.room.util.TableInfo$Column: java.lang.String name>;

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, r4);

        goto label1;

     label2:
        return r1;
    }

    private static androidx.room.util.TableInfo$Column toColumn(androidx.room.migration.bundle.EntityBundle, androidx.room.migration.bundle.FieldBundle)
    {
        androidx.room.migration.bundle.EntityBundle r0;
        androidx.room.migration.bundle.FieldBundle r1;
        androidx.room.util.TableInfo$Column $r2;
        java.lang.String $r3, $r4, $r5;
        boolean $z0;
        int $i0;

        r0 := @parameter0: androidx.room.migration.bundle.EntityBundle;

        r1 := @parameter1: androidx.room.migration.bundle.FieldBundle;

        $r2 = new androidx.room.util.TableInfo$Column;

        $r3 = virtualinvoke r1.<androidx.room.migration.bundle.FieldBundle: java.lang.String getColumnName()>();

        $r4 = virtualinvoke r1.<androidx.room.migration.bundle.FieldBundle: java.lang.String getAffinity()>();

        $z0 = virtualinvoke r1.<androidx.room.migration.bundle.FieldBundle: boolean isNonNull()>();

        $i0 = staticinvoke <androidx.room.testing.MigrationTestHelper: int findPrimaryKeyPosition(androidx.room.migration.bundle.EntityBundle,androidx.room.migration.bundle.FieldBundle)>(r0, r1);

        $r5 = virtualinvoke r1.<androidx.room.migration.bundle.FieldBundle: java.lang.String getDefaultValue()>();

        specialinvoke $r2.<androidx.room.util.TableInfo$Column: void <init>(java.lang.String,java.lang.String,boolean,int,java.lang.String,int)>($r3, $r4, $z0, $i0, $r5, 1);

        return $r2;
    }

    private static int findPrimaryKeyPosition(androidx.room.migration.bundle.EntityBundle, androidx.room.migration.bundle.FieldBundle)
    {
        androidx.room.migration.bundle.EntityBundle r0;
        androidx.room.migration.bundle.FieldBundle r1;
        java.util.List r2;
        java.util.Iterator r3;
        java.lang.String r4, $r7;
        androidx.room.migration.bundle.PrimaryKeyBundle $r5;
        boolean $z0, $z1;
        java.lang.Object $r6;
        int i0;

        r0 := @parameter0: androidx.room.migration.bundle.EntityBundle;

        r1 := @parameter1: androidx.room.migration.bundle.FieldBundle;

        $r5 = virtualinvoke r0.<androidx.room.migration.bundle.EntityBundle: androidx.room.migration.bundle.PrimaryKeyBundle getPrimaryKey()>();

        r2 = virtualinvoke $r5.<androidx.room.migration.bundle.PrimaryKeyBundle: java.util.List getColumnNames()>();

        i0 = 0;

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r6;

        i0 = i0 + 1;

        $r7 = virtualinvoke r1.<androidx.room.migration.bundle.FieldBundle: java.lang.String getColumnName()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r4);

        if $z1 == 0 goto label2;

        return i0;

     label2:
        goto label1;

     label3:
        return 0;
    }

androidx.room.testing.MigrationTestHelper$CreatingDelegate
    void <init>(androidx.room.migration.bundle.DatabaseBundle)
    {
        androidx.room.testing.MigrationTestHelper$CreatingDelegate r0;
        androidx.room.migration.bundle.DatabaseBundle r1;

        r0 := @this: androidx.room.testing.MigrationTestHelper$CreatingDelegate;

        r1 := @parameter0: androidx.room.migration.bundle.DatabaseBundle;

        specialinvoke r0.<androidx.room.testing.MigrationTestHelper$RoomOpenHelperDelegate: void <init>(androidx.room.migration.bundle.DatabaseBundle)>(r1);

        return;
    }

    public void createAllTables(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.testing.MigrationTestHelper$CreatingDelegate r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        java.util.Iterator r2;
        java.lang.String r3;
        androidx.room.migration.bundle.DatabaseBundle $r4;
        java.util.List $r5;
        boolean $z0;
        java.lang.Object $r6;

        r0 := @this: androidx.room.testing.MigrationTestHelper$CreatingDelegate;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        $r4 = r0.<androidx.room.testing.MigrationTestHelper$CreatingDelegate: androidx.room.migration.bundle.DatabaseBundle mDatabaseBundle>;

        $r5 = virtualinvoke $r4.<androidx.room.migration.bundle.DatabaseBundle: java.util.List buildCreateQueries()>();

        r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r6;

        interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: void execSQL(java.lang.String)>(r3);

        goto label1;

     label2:
        return;
    }

    public androidx.room.RoomOpenHelper$ValidationResult onValidateSchema(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.testing.MigrationTestHelper$CreatingDelegate r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: androidx.room.testing.MigrationTestHelper$CreatingDelegate;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This open helper just creates the database but it received a migration request.");

        throw $r2;
    }

androidx.room.testing.MigrationTestHelper$MigratingDelegate
<androidx.room.testing.MigrationTestHelper$MigratingDelegate: boolean mVerifyDroppedTables>
    void <init>(androidx.room.migration.bundle.DatabaseBundle, boolean)
    {
        androidx.room.testing.MigrationTestHelper$MigratingDelegate r0;
        androidx.room.migration.bundle.DatabaseBundle r1;
        boolean z0;

        r0 := @this: androidx.room.testing.MigrationTestHelper$MigratingDelegate;

        r1 := @parameter0: androidx.room.migration.bundle.DatabaseBundle;

        z0 := @parameter1: boolean;

        specialinvoke r0.<androidx.room.testing.MigrationTestHelper$RoomOpenHelperDelegate: void <init>(androidx.room.migration.bundle.DatabaseBundle)>(r1);

        r0.<androidx.room.testing.MigrationTestHelper$MigratingDelegate: boolean mVerifyDroppedTables> = z0;

        return;
    }

    public void createAllTables(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.testing.MigrationTestHelper$MigratingDelegate r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: androidx.room.testing.MigrationTestHelper$MigratingDelegate;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Was expecting to migrate but received create.Make sure you have created the database first.");

        throw $r2;
    }

    public androidx.room.RoomOpenHelper$ValidationResult onValidateSchema(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.testing.MigrationTestHelper$MigratingDelegate r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        java.util.Map r2;
        java.lang.Throwable r3, $r53;
        androidx.room.migration.bundle.DatabaseBundle $r4, $r6;
        java.util.Collection $r5, $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z7, $z9, $z10, $z11, $z12;
        java.util.List $r7, $r20;
        androidx.room.RoomOpenHelper$ValidationResult $r8, $r12, $r23, $r33, $r44, r69;
        java.util.HashSet $r9, r64;
        java.lang.String[] $r11;
        java.lang.StringBuilder $r13, $r14, $r15, $r24, $r25, $r26, $r27, $r28, $r29, $r34, $r36, $r37, $r38, $r39, $r40, $r45, $r47, $r48, $r49, $r50, $r51;
        java.lang.String $r16, $r18, $r22, $r30, $r32, $r35, $r41, $r43, $r46, $r52, r68;
        java.lang.Object $r17, $r21, $r31;
        androidx.room.migration.bundle.FtsEntityBundle $r19, $r42;
        java.util.Iterator r54, r60, r65;
        androidx.room.migration.bundle.EntityBundle r55, r66;
        androidx.room.util.FtsTableInfo r56, r57;
        androidx.room.util.TableInfo r58, r59;
        androidx.room.migration.bundle.DatabaseViewBundle r61;
        androidx.room.util.ViewInfo r62, r63;
        android.database.Cursor r67;

        r0 := @this: androidx.room.testing.MigrationTestHelper$MigratingDelegate;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        $r4 = r0.<androidx.room.testing.MigrationTestHelper$MigratingDelegate: androidx.room.migration.bundle.DatabaseBundle mDatabaseBundle>;

        r2 = virtualinvoke $r4.<androidx.room.migration.bundle.DatabaseBundle: java.util.Map getEntitiesByTableName()>();

        $r5 = interfaceinvoke r2.<java.util.Map: java.util.Collection values()>();

        r54 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r54.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label05;

        $r31 = interfaceinvoke r54.<java.util.Iterator: java.lang.Object next()>();

        r55 = (androidx.room.migration.bundle.EntityBundle) $r31;

        $z10 = r55 instanceof androidx.room.migration.bundle.FtsEntityBundle;

        if $z10 == 0 goto label03;

        $r42 = (androidx.room.migration.bundle.FtsEntityBundle) r55;

        r56 = staticinvoke <androidx.room.testing.MigrationTestHelper: androidx.room.util.FtsTableInfo toFtsTableInfo(androidx.room.migration.bundle.FtsEntityBundle)>($r42);

        $r43 = virtualinvoke r55.<androidx.room.migration.bundle.EntityBundle: java.lang.String getTableName()>();

        r57 = staticinvoke <androidx.room.util.FtsTableInfo: androidx.room.util.FtsTableInfo read(androidx.sqlite.db.SupportSQLiteDatabase,java.lang.String)>(r1, $r43);

        $z12 = virtualinvoke r56.<androidx.room.util.FtsTableInfo: boolean equals(java.lang.Object)>(r57);

        if $z12 != 0 goto label02;

        $r44 = new androidx.room.RoomOpenHelper$ValidationResult;

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        $r46 = r56.<androidx.room.util.FtsTableInfo: java.lang.String name>;

        $r47 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nExpected: ");

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r56);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nFound: ");

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r57);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r44.<androidx.room.RoomOpenHelper$ValidationResult: void <init>(boolean,java.lang.String)>(0, $r52);

        return $r44;

     label02:
        goto label04;

     label03:
        r58 = staticinvoke <androidx.room.testing.MigrationTestHelper: androidx.room.util.TableInfo toTableInfo(androidx.room.migration.bundle.EntityBundle)>(r55);

        $r32 = virtualinvoke r55.<androidx.room.migration.bundle.EntityBundle: java.lang.String getTableName()>();

        r59 = staticinvoke <androidx.room.util.TableInfo: androidx.room.util.TableInfo read(androidx.sqlite.db.SupportSQLiteDatabase,java.lang.String)>(r1, $r32);

        $z11 = virtualinvoke r58.<androidx.room.util.TableInfo: boolean equals(java.lang.Object)>(r59);

        if $z11 != 0 goto label04;

        $r33 = new androidx.room.RoomOpenHelper$ValidationResult;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = r58.<androidx.room.util.TableInfo: java.lang.String name>;

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nExpected: ");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r58);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" \nfound: ");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r59);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<androidx.room.RoomOpenHelper$ValidationResult: void <init>(boolean,java.lang.String)>(0, $r41);

        return $r33;

     label04:
        goto label01;

     label05:
        $r6 = r0.<androidx.room.testing.MigrationTestHelper$MigratingDelegate: androidx.room.migration.bundle.DatabaseBundle mDatabaseBundle>;

        $r7 = virtualinvoke $r6.<androidx.room.migration.bundle.DatabaseBundle: java.util.List getViews()>();

        r60 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z1 = interfaceinvoke r60.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label08;

        $r21 = interfaceinvoke r60.<java.util.Iterator: java.lang.Object next()>();

        r61 = (androidx.room.migration.bundle.DatabaseViewBundle) $r21;

        r62 = staticinvoke <androidx.room.testing.MigrationTestHelper: androidx.room.util.ViewInfo toViewInfo(androidx.room.migration.bundle.DatabaseViewBundle)>(r61);

        $r22 = virtualinvoke r61.<androidx.room.migration.bundle.DatabaseViewBundle: java.lang.String getViewName()>();

        r63 = staticinvoke <androidx.room.util.ViewInfo: androidx.room.util.ViewInfo read(androidx.sqlite.db.SupportSQLiteDatabase,java.lang.String)>(r1, $r22);

        $z9 = virtualinvoke r62.<androidx.room.util.ViewInfo: boolean equals(java.lang.Object)>(r63);

        if $z9 != 0 goto label07;

        $r23 = new androidx.room.RoomOpenHelper$ValidationResult;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r62);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nExpected: ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r62);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" \nfound: ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r63);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<androidx.room.RoomOpenHelper$ValidationResult: void <init>(boolean,java.lang.String)>(0, $r30);

        return $r23;

     label07:
        goto label06;

     label08:
        $z2 = r0.<androidx.room.testing.MigrationTestHelper$MigratingDelegate: boolean mVerifyDroppedTables>;

        if $z2 == 0 goto label18;

        $r9 = new java.util.HashSet;

        specialinvoke $r9.<java.util.HashSet: void <init>()>();

        r64 = $r9;

        $r10 = interfaceinvoke r2.<java.util.Map: java.util.Collection values()>();

        r65 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();

     label09:
        $z3 = interfaceinvoke r65.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label11;

        $r17 = interfaceinvoke r65.<java.util.Iterator: java.lang.Object next()>();

        r66 = (androidx.room.migration.bundle.EntityBundle) $r17;

        $r18 = virtualinvoke r66.<androidx.room.migration.bundle.EntityBundle: java.lang.String getTableName()>();

        interfaceinvoke r64.<java.util.Set: boolean add(java.lang.Object)>($r18);

        $z7 = r66 instanceof androidx.room.migration.bundle.FtsEntityBundle;

        if $z7 == 0 goto label10;

        $r19 = (androidx.room.migration.bundle.FtsEntityBundle) r66;

        $r20 = virtualinvoke $r19.<androidx.room.migration.bundle.FtsEntityBundle: java.util.List getShadowTableNames()>();

        interfaceinvoke r64.<java.util.Set: boolean addAll(java.util.Collection)>($r20);

     label10:
        goto label09;

     label11:
        $r11 = newarray (java.lang.String)[3];

        $r11[0] = "room_master_table";

        $r11[1] = "android_metadata";

        $r11[2] = "sqlite_sequence";

        r67 = interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.Object[])>("SELECT name FROM sqlite_master WHERE type=\'table\' AND name NOT IN(?, ?, ?)", $r11);

     label12:
        $z4 = interfaceinvoke r67.<android.database.Cursor: boolean moveToNext()>();

        if $z4 == 0 goto label15;

        r68 = interfaceinvoke r67.<android.database.Cursor: java.lang.String getString(int)>(0);

        $z5 = interfaceinvoke r64.<java.util.Set: boolean contains(java.lang.Object)>(r68);

        if $z5 != 0 goto label14;

        $r12 = new androidx.room.RoomOpenHelper$ValidationResult;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected table ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r68);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<androidx.room.RoomOpenHelper$ValidationResult: void <init>(boolean,java.lang.String)>(0, $r16);

        r69 = $r12;

     label13:
        interfaceinvoke r67.<android.database.Cursor: void close()>();

        return r69;

     label14:
        goto label12;

     label15:
        interfaceinvoke r67.<android.database.Cursor: void close()>();

        goto label18;

     label16:
        $r53 := @caughtexception;

        r3 = $r53;

     label17:
        interfaceinvoke r67.<android.database.Cursor: void close()>();

        throw r3;

     label18:
        $r8 = new androidx.room.RoomOpenHelper$ValidationResult;

        specialinvoke $r8.<androidx.room.RoomOpenHelper$ValidationResult: void <init>(boolean,java.lang.String)>(1, null);

        return $r8;

        catch java.lang.Throwable from label12 to label13 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
    }

androidx.room.testing.MigrationTestHelper$RoomOpenHelperDelegate
<androidx.room.testing.MigrationTestHelper$RoomOpenHelperDelegate: androidx.room.migration.bundle.DatabaseBundle mDatabaseBundle>
    void <init>(androidx.room.migration.bundle.DatabaseBundle)
    {
        androidx.room.testing.MigrationTestHelper$RoomOpenHelperDelegate r0;
        androidx.room.migration.bundle.DatabaseBundle r1;
        int $i0;

        r0 := @this: androidx.room.testing.MigrationTestHelper$RoomOpenHelperDelegate;

        r1 := @parameter0: androidx.room.migration.bundle.DatabaseBundle;

        $i0 = virtualinvoke r1.<androidx.room.migration.bundle.DatabaseBundle: int getVersion()>();

        specialinvoke r0.<androidx.room.RoomOpenHelper$Delegate: void <init>(int)>($i0);

        r0.<androidx.room.testing.MigrationTestHelper$RoomOpenHelperDelegate: androidx.room.migration.bundle.DatabaseBundle mDatabaseBundle> = r1;

        return;
    }

    public void dropAllTables(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.testing.MigrationTestHelper$RoomOpenHelperDelegate r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: androidx.room.testing.MigrationTestHelper$RoomOpenHelperDelegate;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("cannot drop all tables in the test");

        throw $r2;
    }

    public void onCreate(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.testing.MigrationTestHelper$RoomOpenHelperDelegate r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;

        r0 := @this: androidx.room.testing.MigrationTestHelper$RoomOpenHelperDelegate;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        return;
    }

    public void onOpen(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.testing.MigrationTestHelper$RoomOpenHelperDelegate r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;

        r0 := @this: androidx.room.testing.MigrationTestHelper$RoomOpenHelperDelegate;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        return;
    }

