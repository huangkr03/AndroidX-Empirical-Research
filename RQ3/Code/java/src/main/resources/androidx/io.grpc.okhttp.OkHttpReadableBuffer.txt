io.grpc.okhttp.OkHttpReadableBuffer
<io.grpc.okhttp.OkHttpReadableBuffer: okio.Buffer buffer>
    void <init>(okio.Buffer)
    {
        io.grpc.okhttp.OkHttpReadableBuffer $r0;
        okio.Buffer $r1;

        $r0 := @this: io.grpc.okhttp.OkHttpReadableBuffer;

        $r1 := @parameter0: okio.Buffer;

        specialinvoke $r0.<io.grpc.internal.AbstractReadableBuffer: void <init>()>();

        $r0.<io.grpc.okhttp.OkHttpReadableBuffer: okio.Buffer buffer> = $r1;

        return;
    }

    private void fakeEofExceptionMethod() throws java.io.EOFException
    {
        io.grpc.okhttp.OkHttpReadableBuffer $r0;

        $r0 := @this: io.grpc.okhttp.OkHttpReadableBuffer;

        return;
    }

    public void close()
    {
        io.grpc.okhttp.OkHttpReadableBuffer $r0;
        okio.Buffer $r1;

        $r0 := @this: io.grpc.okhttp.OkHttpReadableBuffer;

        $r1 = $r0.<io.grpc.okhttp.OkHttpReadableBuffer: okio.Buffer buffer>;

        virtualinvoke $r1.<okio.Buffer: void clear()>();

        return;
    }

    public io.grpc.internal.ReadableBuffer readBytes(int)
    {
        io.grpc.okhttp.OkHttpReadableBuffer $r0;
        okio.Buffer $r1, $r2;
        long $l0;
        int $i1;

        $r0 := @this: io.grpc.okhttp.OkHttpReadableBuffer;

        $i1 := @parameter0: int;

        $r1 = new okio.Buffer;

        specialinvoke $r1.<okio.Buffer: void <init>()>();

        $r2 = $r0.<io.grpc.okhttp.OkHttpReadableBuffer: okio.Buffer buffer>;

        $l0 = (long) $i1;

        virtualinvoke $r1.<okio.Buffer: void write(okio.Buffer,long)>($r2, $l0);

        $r0 = new io.grpc.okhttp.OkHttpReadableBuffer;

        specialinvoke $r0.<io.grpc.okhttp.OkHttpReadableBuffer: void <init>(okio.Buffer)>($r1);

        return $r0;
    }

    public void readBytes(java.io.OutputStream, int) throws java.io.IOException
    {
        io.grpc.okhttp.OkHttpReadableBuffer $r0;
        java.io.OutputStream $r1;
        int $i0;
        okio.Buffer $r2;
        long $l1;

        $r0 := @this: io.grpc.okhttp.OkHttpReadableBuffer;

        $r1 := @parameter0: java.io.OutputStream;

        $i0 := @parameter1: int;

        $r2 = $r0.<io.grpc.okhttp.OkHttpReadableBuffer: okio.Buffer buffer>;

        $l1 = (long) $i0;

        virtualinvoke $r2.<okio.Buffer: okio.Buffer writeTo(java.io.OutputStream,long)>($r1, $l1);

        return;
    }

    public void readBytes(java.nio.ByteBuffer)
    {
        io.grpc.okhttp.OkHttpReadableBuffer $r0;
        java.nio.ByteBuffer $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: io.grpc.okhttp.OkHttpReadableBuffer;

        $r1 := @parameter0: java.nio.ByteBuffer;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void readBytes(byte[], int, int)
    {
        io.grpc.okhttp.OkHttpReadableBuffer $r0;
        byte[] $r1;
        int $i0, $i1, $i2;
        okio.Buffer $r2;
        java.lang.IndexOutOfBoundsException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        $r0 := @this: io.grpc.okhttp.OkHttpReadableBuffer;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

     label1:
        if $i1 <= 0 goto label3;

        $r2 = $r0.<io.grpc.okhttp.OkHttpReadableBuffer: okio.Buffer buffer>;

        $i2 = virtualinvoke $r2.<okio.Buffer: int read(byte[],int,int)>($r1, $i0, $i1);

        if $i2 == -1 goto label2;

        $i1 = $i1 - $i2;

        $i0 = $i0 + $i2;

        goto label1;

     label2:
        $r3 = new java.lang.IndexOutOfBoundsException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("EOF trying to read ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label3:
        return;
    }

    public int readUnsignedByte()
    {
        io.grpc.okhttp.OkHttpReadableBuffer $r0;
        okio.Buffer $r1;
        byte $b0;
        short $s1;
        java.lang.Throwable $r2;
        java.lang.String $r3;
        java.lang.IndexOutOfBoundsException r4;
        java.io.EOFException r5;

        $r0 := @this: io.grpc.okhttp.OkHttpReadableBuffer;

     label1:
        specialinvoke $r0.<io.grpc.okhttp.OkHttpReadableBuffer: void fakeEofExceptionMethod()>();

     label2:
        $r1 = $r0.<io.grpc.okhttp.OkHttpReadableBuffer: okio.Buffer buffer>;

     label3:
        $b0 = virtualinvoke $r1.<okio.Buffer: byte readByte()>();

     label4:
        $s1 = $b0 & 255;

        return $s1;

     label5:
        $r2 := @caughtexception;

        r4 = new java.lang.IndexOutOfBoundsException;

        r5 = (java.io.EOFException) $r2;

        $r3 = virtualinvoke r5.<java.io.EOFException: java.lang.String getMessage()>();

        specialinvoke r4.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r3);

        throw r4;

        catch java.io.EOFException from label1 to label2 with label5;
        catch java.io.EOFException from label3 to label4 with label5;
    }

    public int readableBytes()
    {
        io.grpc.okhttp.OkHttpReadableBuffer $r0;
        int $i0;
        long $l1;
        okio.Buffer $r1;

        $r0 := @this: io.grpc.okhttp.OkHttpReadableBuffer;

        $r1 = $r0.<io.grpc.okhttp.OkHttpReadableBuffer: okio.Buffer buffer>;

        $l1 = virtualinvoke $r1.<okio.Buffer: long size()>();

        $i0 = (int) $l1;

        return $i0;
    }

    public void skipBytes(int)
    {
        io.grpc.okhttp.OkHttpReadableBuffer $r0;
        long $l0;
        java.lang.String $r1;
        int $i1;
        okio.Buffer $r2;
        java.lang.Throwable $r3;
        java.lang.IndexOutOfBoundsException r4;
        java.io.EOFException r5;

        $r0 := @this: io.grpc.okhttp.OkHttpReadableBuffer;

        $i1 := @parameter0: int;

        $r2 = $r0.<io.grpc.okhttp.OkHttpReadableBuffer: okio.Buffer buffer>;

        $l0 = (long) $i1;

     label1:
        virtualinvoke $r2.<okio.Buffer: void skip(long)>($l0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        r4 = new java.lang.IndexOutOfBoundsException;

        r5 = (java.io.EOFException) $r3;

        $r1 = virtualinvoke r5.<java.io.EOFException: java.lang.String getMessage()>();

        specialinvoke r4.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r1);

        throw r4;

        catch java.io.EOFException from label1 to label2 with label3;
    }

