androidx.test.internal.runner.listener.TraceRunListener
<androidx.test.internal.runner.listener.TraceRunListener: java.lang.String TAG>
<androidx.test.internal.runner.listener.TraceRunListener: int MAX_SECTION_NAME_LEN>
<androidx.test.internal.runner.listener.TraceRunListener: java.lang.Thread startedThread>
    private static java.lang.String sanitizeSpanName(java.lang.String)
    {
        java.lang.String r0, $r2, $r5, r6;
        int $i0;
        java.lang.StringBuilder $r1, $r3, $r4;

        r6 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r6.<java.lang.String: int length()>();

        if $i0 <= 127 goto label1;

        $r2 = <androidx.test.internal.runner.listener.TraceRunListener: java.lang.String TAG>;

        r0 = r6;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Span name exceeds limits: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r2, $r5);

        r6 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int,int)>(0, 127);

     label1:
        return r6;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        $r0 = class "Landroidx/test/internal/runner/listener/TraceRunListener;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <androidx.test.internal.runner.listener.TraceRunListener: java.lang.String TAG> = $r1;

        return;
    }

    public void <init>()
    {
        androidx.test.internal.runner.listener.TraceRunListener r0;

        r0 := @this: androidx.test.internal.runner.listener.TraceRunListener;

        specialinvoke r0.<org.junit.runner.notification.RunListener: void <init>()>();

        r0.<androidx.test.internal.runner.listener.TraceRunListener: java.lang.Thread startedThread> = null;

        return;
    }

    public void testFinished(org.junit.runner.Description) throws java.lang.Exception
    {
        androidx.test.internal.runner.listener.TraceRunListener r0;
        org.junit.runner.Description r1;
        java.lang.Thread $r2, $r3;
        boolean $z0;

        r0 := @this: androidx.test.internal.runner.listener.TraceRunListener;

        r1 := @parameter0: org.junit.runner.Description;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r3 = r0.<androidx.test.internal.runner.listener.TraceRunListener: java.lang.Thread startedThread>;

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        staticinvoke <androidx.tracing.Trace: void endSection()>();

        goto label2;

     label1:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("TraceRunListener", "testFinished called on different thread than testStarted");

     label2:
        r0.<androidx.test.internal.runner.listener.TraceRunListener: java.lang.Thread startedThread> = null;

        return;
    }

    public void testStarted(org.junit.runner.Description) throws java.lang.Exception
    {
        androidx.test.internal.runner.listener.TraceRunListener r0;
        org.junit.runner.Description r1;
        java.lang.String r2, r3, r4, r5, $r8, $r13, $r14, $r16, $r17;
        java.lang.Thread $r6;
        java.lang.Class $r7, $r15;
        java.lang.StringBuilder $r9, $r10, $r11, $r12;

        r0 := @this: androidx.test.internal.runner.listener.TraceRunListener;

        r1 := @parameter0: org.junit.runner.Description;

        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r0.<androidx.test.internal.runner.listener.TraceRunListener: java.lang.Thread startedThread> = $r6;

        $r7 = virtualinvoke r1.<org.junit.runner.Description: java.lang.Class getTestClass()>();

        if $r7 == null goto label1;

        $r15 = virtualinvoke r1.<org.junit.runner.Description: java.lang.Class getTestClass()>();

        $r16 = virtualinvoke $r15.<java.lang.Class: java.lang.String getSimpleName()>();

        goto label2;

     label1:
        $r16 = "None";

     label2:
        r2 = $r16;

        $r8 = virtualinvoke r1.<org.junit.runner.Description: java.lang.String getMethodName()>();

        if $r8 == null goto label3;

        $r17 = virtualinvoke r1.<org.junit.runner.Description: java.lang.String getMethodName()>();

        goto label4;

     label3:
        $r17 = "None";

     label4:
        r3 = $r17;

        r5 = r3;

        r4 = r2;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = staticinvoke <androidx.test.internal.runner.listener.TraceRunListener: java.lang.String sanitizeSpanName(java.lang.String)>($r13);

        staticinvoke <androidx.tracing.Trace: void beginSection(java.lang.String)>($r14);

        return;
    }

