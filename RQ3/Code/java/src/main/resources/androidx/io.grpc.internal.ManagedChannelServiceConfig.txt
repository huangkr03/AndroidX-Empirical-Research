io.grpc.internal.ManagedChannelServiceConfig
<io.grpc.internal.ManagedChannelServiceConfig: io.grpc.internal.ManagedChannelServiceConfig$MethodInfo defaultMethodConfig>
<io.grpc.internal.ManagedChannelServiceConfig: java.util.Map healthCheckingConfig>
<io.grpc.internal.ManagedChannelServiceConfig: java.lang.Object loadBalancingConfig>
<io.grpc.internal.ManagedChannelServiceConfig: io.grpc.internal.RetriableStream$Throttle retryThrottling>
<io.grpc.internal.ManagedChannelServiceConfig: java.util.Map serviceMap>
<io.grpc.internal.ManagedChannelServiceConfig: java.util.Map serviceMethodMap>
    void <init>(io.grpc.internal.ManagedChannelServiceConfig$MethodInfo, java.util.Map, java.util.Map, io.grpc.internal.RetriableStream$Throttle, java.lang.Object, java.util.Map)
    {
        io.grpc.internal.ManagedChannelServiceConfig $r0;
        java.util.Map $r1, $r2, $r5;
        io.grpc.internal.RetriableStream$Throttle $r3;
        java.lang.Object $r4;
        io.grpc.internal.ManagedChannelServiceConfig$MethodInfo $r6;
        java.util.HashMap r7;

        $r0 := @this: io.grpc.internal.ManagedChannelServiceConfig;

        $r6 := @parameter0: io.grpc.internal.ManagedChannelServiceConfig$MethodInfo;

        $r1 := @parameter1: java.util.Map;

        $r2 := @parameter2: java.util.Map;

        $r3 := @parameter3: io.grpc.internal.RetriableStream$Throttle;

        $r4 := @parameter4: java.lang.Object;

        $r5 := @parameter5: java.util.Map;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<io.grpc.internal.ManagedChannelServiceConfig: io.grpc.internal.ManagedChannelServiceConfig$MethodInfo defaultMethodConfig> = $r6;

        r7 = new java.util.HashMap;

        specialinvoke r7.<java.util.HashMap: void <init>(java.util.Map)>($r1);

        $r1 = (java.util.Map) r7;

        $r1 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1);

        $r0.<io.grpc.internal.ManagedChannelServiceConfig: java.util.Map serviceMethodMap> = $r1;

        r7 = new java.util.HashMap;

        specialinvoke r7.<java.util.HashMap: void <init>(java.util.Map)>($r2);

        $r1 = (java.util.Map) r7;

        $r1 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1);

        $r0.<io.grpc.internal.ManagedChannelServiceConfig: java.util.Map serviceMap> = $r1;

        $r0.<io.grpc.internal.ManagedChannelServiceConfig: io.grpc.internal.RetriableStream$Throttle retryThrottling> = $r3;

        $r0.<io.grpc.internal.ManagedChannelServiceConfig: java.lang.Object loadBalancingConfig> = $r4;

        if $r5 == null goto label1;

        r7 = new java.util.HashMap;

        specialinvoke r7.<java.util.HashMap: void <init>(java.util.Map)>($r5);

        $r1 = (java.util.Map) r7;

        $r1 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1);

        goto label2;

     label1:
        $r1 = null;

     label2:
        $r0.<io.grpc.internal.ManagedChannelServiceConfig: java.util.Map healthCheckingConfig> = $r1;

        return;
    }

    static io.grpc.internal.ManagedChannelServiceConfig empty()
    {
        java.util.HashMap $r0, r1;
        io.grpc.internal.ManagedChannelServiceConfig r2;
        java.util.Map r3, r4;

        r2 = new io.grpc.internal.ManagedChannelServiceConfig;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        r1 = new java.util.HashMap;

        specialinvoke r1.<java.util.HashMap: void <init>()>();

        r3 = (java.util.Map) $r0;

        r4 = (java.util.Map) r1;

        specialinvoke r2.<io.grpc.internal.ManagedChannelServiceConfig: void <init>(io.grpc.internal.ManagedChannelServiceConfig$MethodInfo,java.util.Map,java.util.Map,io.grpc.internal.RetriableStream$Throttle,java.lang.Object,java.util.Map)>(null, r3, r4, null, null, null);

        return r2;
    }

    static io.grpc.internal.ManagedChannelServiceConfig fromServiceConfig(java.util.Map, boolean, int, int, java.lang.Object)
    {
        java.util.Map $r0, $r5, $r10;
        boolean $z0, $z1, $z2;
        int $i0, $i1;
        java.lang.Object $r1, $r9;
        java.util.HashMap $r2, $r3, r15;
        io.grpc.internal.RetriableStream$Throttle $r4;
        java.util.List $r6;
        java.util.Iterator $r7, $r12;
        io.grpc.internal.ManagedChannelServiceConfig$MethodInfo $r8, $r11, r17;
        java.lang.String $r13, $r14;
        io.grpc.internal.ManagedChannelServiceConfig r16;

        $r0 := @parameter0: java.util.Map;

        $z0 := @parameter1: boolean;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r1 := @parameter4: java.lang.Object;

        if $z0 == 0 goto label01;

        $r4 = staticinvoke <io.grpc.internal.ServiceConfigUtil: io.grpc.internal.RetriableStream$Throttle getThrottlePolicy(java.util.Map)>($r0);

        goto label02;

     label01:
        $r4 = null;

     label02:
        $r3 = new java.util.HashMap;

        $r2 = $r3;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r15 = new java.util.HashMap;

        $r3 = r15;

        specialinvoke r15.<java.util.HashMap: void <init>()>();

        $r5 = staticinvoke <io.grpc.internal.ServiceConfigUtil: java.util.Map getHealthCheckedService(java.util.Map)>($r0);

        $r6 = staticinvoke <io.grpc.internal.ServiceConfigUtil: java.util.List getMethodConfigFromServiceConfig(java.util.Map)>($r0);

        if $r6 != null goto label03;

        r16 = new io.grpc.internal.ManagedChannelServiceConfig;

        $r0 = (java.util.Map) $r2;

        $r10 = (java.util.Map) $r3;

        specialinvoke r16.<io.grpc.internal.ManagedChannelServiceConfig: void <init>(io.grpc.internal.ManagedChannelServiceConfig$MethodInfo,java.util.Map,java.util.Map,io.grpc.internal.RetriableStream$Throttle,java.lang.Object,java.util.Map)>(null, $r0, $r10, $r4, $r1, $r5);

        return r16;

     label03:
        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

        $r8 = null;

     label04:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label16;

        $r9 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (java.util.Map) $r9;

        r17 = new io.grpc.internal.ManagedChannelServiceConfig$MethodInfo;

        $r11 = r17;

        specialinvoke r17.<io.grpc.internal.ManagedChannelServiceConfig$MethodInfo: void <init>(java.util.Map,boolean,int,int)>($r10, $z0, $i0, $i1);

        $r6 = staticinvoke <io.grpc.internal.ServiceConfigUtil: java.util.List getNameListFromMethodConfig(java.util.Map)>($r10);

        if $r6 == null goto label15;

        $z1 = interfaceinvoke $r6.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label15;

        $r12 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z1 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label14;

        $r9 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (java.util.Map) $r9;

        $r13 = staticinvoke <io.grpc.internal.ServiceConfigUtil: java.lang.String getServiceFromName(java.util.Map)>($r10);

        $r14 = staticinvoke <io.grpc.internal.ServiceConfigUtil: java.lang.String getMethodFromName(java.util.Map)>($r10);

        $z2 = staticinvoke <com.google.common.base.Strings: boolean isNullOrEmpty(java.lang.String)>($r13);

        $z1 = 1;

        if $z2 == 0 goto label08;

        $z2 = staticinvoke <com.google.common.base.Strings: boolean isNullOrEmpty(java.lang.String)>($r14);

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object)>($z2, "missing service name for method %s", $r14);

        if $r8 != null goto label06;

        goto label07;

     label06:
        $z1 = 0;

     label07:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object)>($z1, "Duplicate default method config in service config %s", $r0);

        $r8 = $r11;

        goto label05;

     label08:
        $z2 = staticinvoke <com.google.common.base.Strings: boolean isNullOrEmpty(java.lang.String)>($r14);

        if $z2 == 0 goto label11;

        $r10 = (java.util.Map) $r3;

        $z2 = interfaceinvoke $r10.<java.util.Map: boolean containsKey(java.lang.Object)>($r13);

        if $z2 != 0 goto label09;

        goto label10;

     label09:
        $z1 = 0;

     label10:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object)>($z1, "Duplicate service %s", $r13);

        $r10 = (java.util.Map) $r3;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r11);

        goto label05;

     label11:
        $r13 = staticinvoke <io.grpc.MethodDescriptor: java.lang.String generateFullMethodName(java.lang.String,java.lang.String)>($r13, $r14);

        $r10 = (java.util.Map) $r2;

        $z2 = interfaceinvoke $r10.<java.util.Map: boolean containsKey(java.lang.Object)>($r13);

        if $z2 != 0 goto label12;

        goto label13;

     label12:
        $z1 = 0;

     label13:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object)>($z1, "Duplicate method name %s", $r13);

        $r10 = (java.util.Map) $r2;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r11);

        goto label05;

     label14:
        goto label04;

     label15:
        goto label04;

     label16:
        r16 = new io.grpc.internal.ManagedChannelServiceConfig;

        $r0 = (java.util.Map) $r2;

        $r10 = (java.util.Map) $r3;

        specialinvoke r16.<io.grpc.internal.ManagedChannelServiceConfig: void <init>(io.grpc.internal.ManagedChannelServiceConfig$MethodInfo,java.util.Map,java.util.Map,io.grpc.internal.RetriableStream$Throttle,java.lang.Object,java.util.Map)>($r8, $r0, $r10, $r4, $r1, $r5);

        return r16;
    }

    public boolean equals(java.lang.Object)
    {
        io.grpc.internal.ManagedChannelServiceConfig $r0, $r4;
        java.lang.Object $r1, $r11;
        boolean $z0, $z1;
        java.lang.Class $r2, $r3;
        io.grpc.internal.ManagedChannelServiceConfig$MethodInfo $r5, $r6;
        java.util.Map $r7, $r8;
        io.grpc.internal.RetriableStream$Throttle $r9, $r10;

        $r0 := @this: io.grpc.internal.ManagedChannelServiceConfig;

        $r1 := @parameter0: java.lang.Object;

        $z0 = 1;

        if $r0 != $r1 goto label1;

        return 1;

     label1:
        if $r1 == null goto label5;

        $r2 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label2;

        return 0;

     label2:
        $r4 = (io.grpc.internal.ManagedChannelServiceConfig) $r1;

        $r5 = $r0.<io.grpc.internal.ManagedChannelServiceConfig: io.grpc.internal.ManagedChannelServiceConfig$MethodInfo defaultMethodConfig>;

        $r6 = $r4.<io.grpc.internal.ManagedChannelServiceConfig: io.grpc.internal.ManagedChannelServiceConfig$MethodInfo defaultMethodConfig>;

        $z1 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r5, $r6);

        if $z1 == 0 goto label3;

        $r7 = $r0.<io.grpc.internal.ManagedChannelServiceConfig: java.util.Map serviceMethodMap>;

        $r8 = $r4.<io.grpc.internal.ManagedChannelServiceConfig: java.util.Map serviceMethodMap>;

        $z1 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r7, $r8);

        if $z1 == 0 goto label3;

        $r7 = $r0.<io.grpc.internal.ManagedChannelServiceConfig: java.util.Map serviceMap>;

        $r8 = $r4.<io.grpc.internal.ManagedChannelServiceConfig: java.util.Map serviceMap>;

        $z1 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r7, $r8);

        if $z1 == 0 goto label3;

        $r9 = $r0.<io.grpc.internal.ManagedChannelServiceConfig: io.grpc.internal.RetriableStream$Throttle retryThrottling>;

        $r10 = $r4.<io.grpc.internal.ManagedChannelServiceConfig: io.grpc.internal.RetriableStream$Throttle retryThrottling>;

        $z1 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r9, $r10);

        if $z1 == 0 goto label3;

        $r1 = $r0.<io.grpc.internal.ManagedChannelServiceConfig: java.lang.Object loadBalancingConfig>;

        $r11 = $r4.<io.grpc.internal.ManagedChannelServiceConfig: java.lang.Object loadBalancingConfig>;

        $z1 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r1, $r11);

        if $z1 == 0 goto label3;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;

     label5:
        return 0;
    }

    io.grpc.InternalConfigSelector getDefaultConfigSelector()
    {
        io.grpc.internal.ManagedChannelServiceConfig $r0;
        java.util.Map $r1;
        boolean $z0;
        io.grpc.internal.ManagedChannelServiceConfig$MethodInfo $r2;
        io.grpc.internal.ManagedChannelServiceConfig$ServiceConfigConvertedSelector $r3;

        $r0 := @this: io.grpc.internal.ManagedChannelServiceConfig;

        $r1 = $r0.<io.grpc.internal.ManagedChannelServiceConfig: java.util.Map serviceMap>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r1 = $r0.<io.grpc.internal.ManagedChannelServiceConfig: java.util.Map serviceMethodMap>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = $r0.<io.grpc.internal.ManagedChannelServiceConfig: io.grpc.internal.ManagedChannelServiceConfig$MethodInfo defaultMethodConfig>;

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = new io.grpc.internal.ManagedChannelServiceConfig$ServiceConfigConvertedSelector;

        specialinvoke $r3.<io.grpc.internal.ManagedChannelServiceConfig$ServiceConfigConvertedSelector: void <init>(io.grpc.internal.ManagedChannelServiceConfig,io.grpc.internal.ManagedChannelServiceConfig$1)>($r0, null);

        return $r3;
    }

    java.util.Map getHealthCheckingConfig()
    {
        io.grpc.internal.ManagedChannelServiceConfig $r0;
        java.util.Map r1;

        $r0 := @this: io.grpc.internal.ManagedChannelServiceConfig;

        r1 = $r0.<io.grpc.internal.ManagedChannelServiceConfig: java.util.Map healthCheckingConfig>;

        return r1;
    }

    java.lang.Object getLoadBalancingConfig()
    {
        io.grpc.internal.ManagedChannelServiceConfig $r0;
        java.lang.Object r1;

        $r0 := @this: io.grpc.internal.ManagedChannelServiceConfig;

        r1 = $r0.<io.grpc.internal.ManagedChannelServiceConfig: java.lang.Object loadBalancingConfig>;

        return r1;
    }

    io.grpc.internal.ManagedChannelServiceConfig$MethodInfo getMethodConfig(io.grpc.MethodDescriptor)
    {
        io.grpc.internal.ManagedChannelServiceConfig $r0;
        io.grpc.MethodDescriptor $r1;
        java.util.Map $r2;
        java.lang.String $r3;
        java.lang.Object $r4;
        io.grpc.internal.ManagedChannelServiceConfig$MethodInfo $r5;

        $r0 := @this: io.grpc.internal.ManagedChannelServiceConfig;

        $r1 := @parameter0: io.grpc.MethodDescriptor;

        $r2 = $r0.<io.grpc.internal.ManagedChannelServiceConfig: java.util.Map serviceMethodMap>;

        $r3 = virtualinvoke $r1.<io.grpc.MethodDescriptor: java.lang.String getFullMethodName()>();

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        $r5 = (io.grpc.internal.ManagedChannelServiceConfig$MethodInfo) $r4;

        if $r5 != null goto label1;

        $r3 = virtualinvoke $r1.<io.grpc.MethodDescriptor: java.lang.String getServiceName()>();

        $r2 = $r0.<io.grpc.internal.ManagedChannelServiceConfig: java.util.Map serviceMap>;

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        $r5 = (io.grpc.internal.ManagedChannelServiceConfig$MethodInfo) $r4;

        goto label1;

     label1:
        if $r5 != null goto label2;

        $r5 = $r0.<io.grpc.internal.ManagedChannelServiceConfig: io.grpc.internal.ManagedChannelServiceConfig$MethodInfo defaultMethodConfig>;

     label2:
        return $r5;
    }

    io.grpc.internal.RetriableStream$Throttle getRetryThrottling()
    {
        io.grpc.internal.ManagedChannelServiceConfig $r0;
        io.grpc.internal.RetriableStream$Throttle r1;

        $r0 := @this: io.grpc.internal.ManagedChannelServiceConfig;

        r1 = $r0.<io.grpc.internal.ManagedChannelServiceConfig: io.grpc.internal.RetriableStream$Throttle retryThrottling>;

        return r1;
    }

    public int hashCode()
    {
        io.grpc.internal.ManagedChannelServiceConfig $r0;
        int $i0;
        java.lang.Object[] $r1;
        io.grpc.internal.ManagedChannelServiceConfig$MethodInfo $r2;
        java.util.Map $r3;
        io.grpc.internal.RetriableStream$Throttle $r4;
        java.lang.Object $r5;

        $r0 := @this: io.grpc.internal.ManagedChannelServiceConfig;

        $r1 = newarray (java.lang.Object)[5];

        $r2 = $r0.<io.grpc.internal.ManagedChannelServiceConfig: io.grpc.internal.ManagedChannelServiceConfig$MethodInfo defaultMethodConfig>;

        $r1[0] = $r2;

        $r3 = $r0.<io.grpc.internal.ManagedChannelServiceConfig: java.util.Map serviceMethodMap>;

        $r1[1] = $r3;

        $r3 = $r0.<io.grpc.internal.ManagedChannelServiceConfig: java.util.Map serviceMap>;

        $r1[2] = $r3;

        $r4 = $r0.<io.grpc.internal.ManagedChannelServiceConfig: io.grpc.internal.RetriableStream$Throttle retryThrottling>;

        $r1[3] = $r4;

        $r5 = $r0.<io.grpc.internal.ManagedChannelServiceConfig: java.lang.Object loadBalancingConfig>;

        $r1[4] = $r5;

        $i0 = staticinvoke <com.google.common.base.Objects: int hashCode(java.lang.Object[])>($r1);

        return $i0;
    }

    public java.lang.String toString()
    {
        io.grpc.internal.ManagedChannelServiceConfig $r0;
        com.google.common.base.MoreObjects$ToStringHelper $r1;
        io.grpc.internal.ManagedChannelServiceConfig$MethodInfo $r2;
        java.util.Map $r3;
        io.grpc.internal.RetriableStream$Throttle $r4;
        java.lang.Object $r5;
        java.lang.String $r6;

        $r0 := @this: io.grpc.internal.ManagedChannelServiceConfig;

        $r1 = staticinvoke <com.google.common.base.MoreObjects: com.google.common.base.MoreObjects$ToStringHelper toStringHelper(java.lang.Object)>($r0);

        $r2 = $r0.<io.grpc.internal.ManagedChannelServiceConfig: io.grpc.internal.ManagedChannelServiceConfig$MethodInfo defaultMethodConfig>;

        $r1 = virtualinvoke $r1.<com.google.common.base.MoreObjects$ToStringHelper: com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String,java.lang.Object)>("defaultMethodConfig", $r2);

        $r3 = $r0.<io.grpc.internal.ManagedChannelServiceConfig: java.util.Map serviceMethodMap>;

        $r1 = virtualinvoke $r1.<com.google.common.base.MoreObjects$ToStringHelper: com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String,java.lang.Object)>("serviceMethodMap", $r3);

        $r3 = $r0.<io.grpc.internal.ManagedChannelServiceConfig: java.util.Map serviceMap>;

        $r1 = virtualinvoke $r1.<com.google.common.base.MoreObjects$ToStringHelper: com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String,java.lang.Object)>("serviceMap", $r3);

        $r4 = $r0.<io.grpc.internal.ManagedChannelServiceConfig: io.grpc.internal.RetriableStream$Throttle retryThrottling>;

        $r1 = virtualinvoke $r1.<com.google.common.base.MoreObjects$ToStringHelper: com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String,java.lang.Object)>("retryThrottling", $r4);

        $r5 = $r0.<io.grpc.internal.ManagedChannelServiceConfig: java.lang.Object loadBalancingConfig>;

        $r1 = virtualinvoke $r1.<com.google.common.base.MoreObjects$ToStringHelper: com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String,java.lang.Object)>("loadBalancingConfig", $r5);

        $r6 = virtualinvoke $r1.<com.google.common.base.MoreObjects$ToStringHelper: java.lang.String toString()>();

        return $r6;
    }

io.grpc.internal.ManagedChannelServiceConfig$1
io.grpc.internal.ManagedChannelServiceConfig$MethodInfo
<io.grpc.internal.ManagedChannelServiceConfig$MethodInfo: io.grpc.CallOptions$Key KEY>
<io.grpc.internal.ManagedChannelServiceConfig$MethodInfo: io.grpc.internal.HedgingPolicy hedgingPolicy>
<io.grpc.internal.ManagedChannelServiceConfig$MethodInfo: java.lang.Integer maxInboundMessageSize>
<io.grpc.internal.ManagedChannelServiceConfig$MethodInfo: java.lang.Integer maxOutboundMessageSize>
<io.grpc.internal.ManagedChannelServiceConfig$MethodInfo: io.grpc.internal.RetryPolicy retryPolicy>
<io.grpc.internal.ManagedChannelServiceConfig$MethodInfo: java.lang.Long timeoutNanos>
<io.grpc.internal.ManagedChannelServiceConfig$MethodInfo: java.lang.Boolean waitForReady>
    static void <clinit>()
    {
        io.grpc.CallOptions$Key $r0;

        $r0 = staticinvoke <io.grpc.CallOptions$Key: io.grpc.CallOptions$Key create(java.lang.String)>("io.grpc.internal.ManagedChannelServiceConfig.MethodInfo");

        <io.grpc.internal.ManagedChannelServiceConfig$MethodInfo: io.grpc.CallOptions$Key KEY> = $r0;

        return;
    }

    void <init>(java.util.Map, boolean, int, int)
    {
        io.grpc.internal.ManagedChannelServiceConfig$MethodInfo $r0;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2;
        java.util.Map $r1, $r6;
        java.lang.Long $r2;
        java.lang.Boolean $r3;
        java.lang.Integer $r4;
        io.grpc.internal.HedgingPolicy $r5;
        io.grpc.internal.RetryPolicy $r7;

        $r0 := @this: io.grpc.internal.ManagedChannelServiceConfig$MethodInfo;

        $r1 := @parameter0: java.util.Map;

        $z0 := @parameter1: boolean;

        $i1 := @parameter2: int;

        $i0 := @parameter3: int;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <io.grpc.internal.ServiceConfigUtil: java.lang.Long getTimeoutFromMethodConfig(java.util.Map)>($r1);

        $r0.<io.grpc.internal.ManagedChannelServiceConfig$MethodInfo: java.lang.Long timeoutNanos> = $r2;

        $r3 = staticinvoke <io.grpc.internal.ServiceConfigUtil: java.lang.Boolean getWaitForReadyFromMethodConfig(java.util.Map)>($r1);

        $r0.<io.grpc.internal.ManagedChannelServiceConfig$MethodInfo: java.lang.Boolean waitForReady> = $r3;

        $r4 = staticinvoke <io.grpc.internal.ServiceConfigUtil: java.lang.Integer getMaxResponseMessageBytesFromMethodConfig(java.util.Map)>($r1);

        $r0.<io.grpc.internal.ManagedChannelServiceConfig$MethodInfo: java.lang.Integer maxInboundMessageSize> = $r4;

        $z1 = 1;

        if $r4 == null goto label03;

        $i2 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        if $i2 < 0 goto label01;

        $z2 = 1;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object)>($z2, "maxInboundMessageSize %s exceeds bounds", $r4);

     label03:
        $r4 = staticinvoke <io.grpc.internal.ServiceConfigUtil: java.lang.Integer getMaxRequestMessageBytesFromMethodConfig(java.util.Map)>($r1);

        $r0.<io.grpc.internal.ManagedChannelServiceConfig$MethodInfo: java.lang.Integer maxOutboundMessageSize> = $r4;

        if $r4 == null goto label06;

        $i2 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        if $i2 < 0 goto label04;

        goto label05;

     label04:
        $z1 = 0;

     label05:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object)>($z1, "maxOutboundMessageSize %s exceeds bounds", $r4);

     label06:
        $r5 = null;

        if $z0 == 0 goto label07;

        $r6 = staticinvoke <io.grpc.internal.ServiceConfigUtil: java.util.Map getRetryPolicyFromMethodConfig(java.util.Map)>($r1);

        goto label08;

     label07:
        $r6 = null;

     label08:
        if $r6 != null goto label09;

        $r7 = null;

        goto label10;

     label09:
        $r7 = staticinvoke <io.grpc.internal.ManagedChannelServiceConfig$MethodInfo: io.grpc.internal.RetryPolicy retryPolicy(java.util.Map,int)>($r6, $i1);

     label10:
        $r0.<io.grpc.internal.ManagedChannelServiceConfig$MethodInfo: io.grpc.internal.RetryPolicy retryPolicy> = $r7;

        if $z0 == 0 goto label11;

        $r1 = staticinvoke <io.grpc.internal.ServiceConfigUtil: java.util.Map getHedgingPolicyFromMethodConfig(java.util.Map)>($r1);

        goto label12;

     label11:
        $r1 = null;

     label12:
        if $r1 != null goto label13;

        goto label14;

     label13:
        $r5 = staticinvoke <io.grpc.internal.ManagedChannelServiceConfig$MethodInfo: io.grpc.internal.HedgingPolicy hedgingPolicy(java.util.Map,int)>($r1, $i0);

     label14:
        $r0.<io.grpc.internal.ManagedChannelServiceConfig$MethodInfo: io.grpc.internal.HedgingPolicy hedgingPolicy> = $r5;

        return;
    }

    private static io.grpc.internal.HedgingPolicy hedgingPolicy(java.util.Map, int)
    {
        java.util.Map $r0;
        int $i0, $i1;
        java.lang.Integer $r1;
        java.lang.Object $r2;
        boolean $z0, $z1;
        java.lang.Long $r3;
        long $l2;
        byte $b3;
        io.grpc.internal.HedgingPolicy $r4;
        java.util.Set $r5;

        $r0 := @parameter0: java.util.Map;

        $i0 := @parameter1: int;

        $r1 = staticinvoke <io.grpc.internal.ServiceConfigUtil: java.lang.Integer getMaxAttemptsFromHedgingPolicy(java.util.Map)>($r0);

        $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r1, "maxAttempts cannot be empty");

        $r1 = (java.lang.Integer) $r2;

        $i1 = virtualinvoke $r1.<java.lang.Integer: int intValue()>();

        $z0 = 1;

        if $i1 < 2 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int)>($z1, "maxAttempts must be greater than 1: %s", $i1);

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i0);

        $r3 = staticinvoke <io.grpc.internal.ServiceConfigUtil: java.lang.Long getHedgingDelayNanosFromHedgingPolicy(java.util.Map)>($r0);

        $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r3, "hedgingDelay cannot be empty");

        $r3 = (java.lang.Long) $r2;

        $l2 = virtualinvoke $r3.<java.lang.Long: long longValue()>();

        $b3 = $l2 cmp 0L;

        if $b3 < 0 goto label3;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,long)>($z0, "hedgingDelay must not be negative: %s", $l2);

        $r4 = new io.grpc.internal.HedgingPolicy;

        $r5 = staticinvoke <io.grpc.internal.ServiceConfigUtil: java.util.Set getNonFatalStatusCodesFromHedgingPolicy(java.util.Map)>($r0);

        specialinvoke $r4.<io.grpc.internal.HedgingPolicy: void <init>(int,long,java.util.Set)>($i0, $l2, $r5);

        return $r4;
    }

    private static io.grpc.internal.RetryPolicy retryPolicy(java.util.Map, int)
    {
        java.util.Map $r0;
        int $i0, $i1;
        java.lang.Integer $r1;
        java.lang.Object $r2;
        boolean $z0, $z1;
        java.lang.Long $r3;
        long $l2, $l4, $l5;
        byte $b3;
        java.lang.Double $r4;
        double $d0;
        java.util.Set $r5;
        io.grpc.internal.RetryPolicy $r6;

        $r0 := @parameter0: java.util.Map;

        $i0 := @parameter1: int;

        $r1 = staticinvoke <io.grpc.internal.ServiceConfigUtil: java.lang.Integer getMaxAttemptsFromRetryPolicy(java.util.Map)>($r0);

        $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r1, "maxAttempts cannot be empty");

        $r1 = (java.lang.Integer) $r2;

        $i1 = virtualinvoke $r1.<java.lang.Integer: int intValue()>();

        $z0 = 1;

        if $i1 < 2 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int)>($z1, "maxAttempts must be greater than 1: %s", $i1);

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i0);

        $r3 = staticinvoke <io.grpc.internal.ServiceConfigUtil: java.lang.Long getInitialBackoffNanosFromRetryPolicy(java.util.Map)>($r0);

        $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r3, "initialBackoff cannot be empty");

        $r3 = (java.lang.Long) $r2;

        $l2 = virtualinvoke $r3.<java.lang.Long: long longValue()>();

        $b3 = $l2 cmp 0L;

        if $b3 <= 0 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,long)>($z1, "initialBackoffNanos must be greater than 0: %s", $l2);

        $r3 = staticinvoke <io.grpc.internal.ServiceConfigUtil: java.lang.Long getMaxBackoffNanosFromRetryPolicy(java.util.Map)>($r0);

        $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r3, "maxBackoff cannot be empty");

        $r3 = (java.lang.Long) $r2;

        $l4 = virtualinvoke $r3.<java.lang.Long: long longValue()>();

        $b3 = $l4 cmp 0L;

        if $b3 <= 0 goto label05;

        $z1 = 1;

        goto label06;

     label05:
        $z1 = 0;

     label06:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,long)>($z1, "maxBackoff must be greater than 0: %s", $l4);

        $r4 = staticinvoke <io.grpc.internal.ServiceConfigUtil: java.lang.Double getBackoffMultiplierFromRetryPolicy(java.util.Map)>($r0);

        $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r4, "backoffMultiplier cannot be empty");

        $r4 = (java.lang.Double) $r2;

        $d0 = virtualinvoke $r4.<java.lang.Double: double doubleValue()>();

        $b3 = $d0 cmpl 0.0;

        if $b3 <= 0 goto label07;

        $z1 = 1;

        goto label08;

     label07:
        $z1 = 0;

     label08:
        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object)>($z1, "backoffMultiplier must be greater than 0: %s", $r4);

        $r3 = staticinvoke <io.grpc.internal.ServiceConfigUtil: java.lang.Long getPerAttemptRecvTimeoutNanosFromRetryPolicy(java.util.Map)>($r0);

        if $r3 == null goto label10;

        $l5 = virtualinvoke $r3.<java.lang.Long: long longValue()>();

        $b3 = $l5 cmp 0L;

        if $b3 < 0 goto label09;

        goto label10;

     label09:
        $z1 = 0;

        goto label11;

     label10:
        $z1 = 1;

     label11:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object)>($z1, "perAttemptRecvTimeout cannot be negative: %s", $r3);

        $r5 = staticinvoke <io.grpc.internal.ServiceConfigUtil: java.util.Set getRetryableStatusCodesFromRetryPolicy(java.util.Map)>($r0);

        if $r3 != null goto label13;

        $z1 = interfaceinvoke $r5.<java.util.Set: boolean isEmpty()>();

        if $z1 != 0 goto label12;

        goto label13;

     label12:
        $z0 = 0;

        goto label13;

     label13:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "retryableStatusCodes cannot be empty without perAttemptRecvTimeout");

        $r6 = new io.grpc.internal.RetryPolicy;

        specialinvoke $r6.<io.grpc.internal.RetryPolicy: void <init>(int,long,long,double,java.lang.Long,java.util.Set)>($i0, $l2, $l4, $d0, $r3, $r5);

        return $r6;
    }

    public boolean equals(java.lang.Object)
    {
        io.grpc.internal.ManagedChannelServiceConfig$MethodInfo $r0, $r2;
        java.lang.Object $r1;
        boolean $z0, $z1;
        java.lang.Long $r3, $r4;
        java.lang.Boolean $r5, $r6;
        java.lang.Integer $r7, $r8;
        io.grpc.internal.RetryPolicy $r9, $r10;
        io.grpc.internal.HedgingPolicy $r11, $r12;

        $r0 := @this: io.grpc.internal.ManagedChannelServiceConfig$MethodInfo;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof io.grpc.internal.ManagedChannelServiceConfig$MethodInfo;

        $z1 = 0;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = (io.grpc.internal.ManagedChannelServiceConfig$MethodInfo) $r1;

        $r3 = $r0.<io.grpc.internal.ManagedChannelServiceConfig$MethodInfo: java.lang.Long timeoutNanos>;

        $r4 = $r2.<io.grpc.internal.ManagedChannelServiceConfig$MethodInfo: java.lang.Long timeoutNanos>;

        $z0 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r3, $r4);

        if $z0 == 0 goto label2;

        $r5 = $r0.<io.grpc.internal.ManagedChannelServiceConfig$MethodInfo: java.lang.Boolean waitForReady>;

        $r6 = $r2.<io.grpc.internal.ManagedChannelServiceConfig$MethodInfo: java.lang.Boolean waitForReady>;

        $z0 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r5, $r6);

        if $z0 == 0 goto label2;

        $r7 = $r0.<io.grpc.internal.ManagedChannelServiceConfig$MethodInfo: java.lang.Integer maxInboundMessageSize>;

        $r8 = $r2.<io.grpc.internal.ManagedChannelServiceConfig$MethodInfo: java.lang.Integer maxInboundMessageSize>;

        $z0 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r7, $r8);

        if $z0 == 0 goto label2;

        $r7 = $r0.<io.grpc.internal.ManagedChannelServiceConfig$MethodInfo: java.lang.Integer maxOutboundMessageSize>;

        $r8 = $r2.<io.grpc.internal.ManagedChannelServiceConfig$MethodInfo: java.lang.Integer maxOutboundMessageSize>;

        $z0 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r7, $r8);

        if $z0 == 0 goto label2;

        $r9 = $r0.<io.grpc.internal.ManagedChannelServiceConfig$MethodInfo: io.grpc.internal.RetryPolicy retryPolicy>;

        $r10 = $r2.<io.grpc.internal.ManagedChannelServiceConfig$MethodInfo: io.grpc.internal.RetryPolicy retryPolicy>;

        $z0 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r9, $r10);

        if $z0 == 0 goto label2;

        $r11 = $r0.<io.grpc.internal.ManagedChannelServiceConfig$MethodInfo: io.grpc.internal.HedgingPolicy hedgingPolicy>;

        $r12 = $r2.<io.grpc.internal.ManagedChannelServiceConfig$MethodInfo: io.grpc.internal.HedgingPolicy hedgingPolicy>;

        $z0 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r11, $r12);

        if $z0 == 0 goto label2;

        $z1 = 1;

        goto label2;

     label2:
        return $z1;
    }

    public int hashCode()
    {
        io.grpc.internal.ManagedChannelServiceConfig$MethodInfo $r0;
        int $i0;
        java.lang.Object[] $r1;
        java.lang.Long $r2;
        java.lang.Boolean $r3;
        java.lang.Integer $r4;
        io.grpc.internal.RetryPolicy $r5;
        io.grpc.internal.HedgingPolicy $r6;

        $r0 := @this: io.grpc.internal.ManagedChannelServiceConfig$MethodInfo;

        $r1 = newarray (java.lang.Object)[6];

        $r2 = $r0.<io.grpc.internal.ManagedChannelServiceConfig$MethodInfo: java.lang.Long timeoutNanos>;

        $r1[0] = $r2;

        $r3 = $r0.<io.grpc.internal.ManagedChannelServiceConfig$MethodInfo: java.lang.Boolean waitForReady>;

        $r1[1] = $r3;

        $r4 = $r0.<io.grpc.internal.ManagedChannelServiceConfig$MethodInfo: java.lang.Integer maxInboundMessageSize>;

        $r1[2] = $r4;

        $r4 = $r0.<io.grpc.internal.ManagedChannelServiceConfig$MethodInfo: java.lang.Integer maxOutboundMessageSize>;

        $r1[3] = $r4;

        $r5 = $r0.<io.grpc.internal.ManagedChannelServiceConfig$MethodInfo: io.grpc.internal.RetryPolicy retryPolicy>;

        $r1[4] = $r5;

        $r6 = $r0.<io.grpc.internal.ManagedChannelServiceConfig$MethodInfo: io.grpc.internal.HedgingPolicy hedgingPolicy>;

        $r1[5] = $r6;

        $i0 = staticinvoke <com.google.common.base.Objects: int hashCode(java.lang.Object[])>($r1);

        return $i0;
    }

    public java.lang.String toString()
    {
        io.grpc.internal.ManagedChannelServiceConfig$MethodInfo $r0;
        com.google.common.base.MoreObjects$ToStringHelper $r1;
        java.lang.Long $r2;
        java.lang.Boolean $r3;
        java.lang.Integer $r4;
        io.grpc.internal.RetryPolicy $r5;
        io.grpc.internal.HedgingPolicy $r6;
        java.lang.String $r7;

        $r0 := @this: io.grpc.internal.ManagedChannelServiceConfig$MethodInfo;

        $r1 = staticinvoke <com.google.common.base.MoreObjects: com.google.common.base.MoreObjects$ToStringHelper toStringHelper(java.lang.Object)>($r0);

        $r2 = $r0.<io.grpc.internal.ManagedChannelServiceConfig$MethodInfo: java.lang.Long timeoutNanos>;

        $r1 = virtualinvoke $r1.<com.google.common.base.MoreObjects$ToStringHelper: com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String,java.lang.Object)>("timeoutNanos", $r2);

        $r3 = $r0.<io.grpc.internal.ManagedChannelServiceConfig$MethodInfo: java.lang.Boolean waitForReady>;

        $r1 = virtualinvoke $r1.<com.google.common.base.MoreObjects$ToStringHelper: com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String,java.lang.Object)>("waitForReady", $r3);

        $r4 = $r0.<io.grpc.internal.ManagedChannelServiceConfig$MethodInfo: java.lang.Integer maxInboundMessageSize>;

        $r1 = virtualinvoke $r1.<com.google.common.base.MoreObjects$ToStringHelper: com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String,java.lang.Object)>("maxInboundMessageSize", $r4);

        $r4 = $r0.<io.grpc.internal.ManagedChannelServiceConfig$MethodInfo: java.lang.Integer maxOutboundMessageSize>;

        $r1 = virtualinvoke $r1.<com.google.common.base.MoreObjects$ToStringHelper: com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String,java.lang.Object)>("maxOutboundMessageSize", $r4);

        $r5 = $r0.<io.grpc.internal.ManagedChannelServiceConfig$MethodInfo: io.grpc.internal.RetryPolicy retryPolicy>;

        $r1 = virtualinvoke $r1.<com.google.common.base.MoreObjects$ToStringHelper: com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String,java.lang.Object)>("retryPolicy", $r5);

        $r6 = $r0.<io.grpc.internal.ManagedChannelServiceConfig$MethodInfo: io.grpc.internal.HedgingPolicy hedgingPolicy>;

        $r1 = virtualinvoke $r1.<com.google.common.base.MoreObjects$ToStringHelper: com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String,java.lang.Object)>("hedgingPolicy", $r6);

        $r7 = virtualinvoke $r1.<com.google.common.base.MoreObjects$ToStringHelper: java.lang.String toString()>();

        return $r7;
    }

io.grpc.internal.ManagedChannelServiceConfig$ServiceConfigConvertedSelector
<io.grpc.internal.ManagedChannelServiceConfig$ServiceConfigConvertedSelector: io.grpc.internal.ManagedChannelServiceConfig config>
    private void <init>(io.grpc.internal.ManagedChannelServiceConfig)
    {
        io.grpc.internal.ManagedChannelServiceConfig$ServiceConfigConvertedSelector $r0;
        io.grpc.internal.ManagedChannelServiceConfig $r1;

        $r0 := @this: io.grpc.internal.ManagedChannelServiceConfig$ServiceConfigConvertedSelector;

        $r1 := @parameter0: io.grpc.internal.ManagedChannelServiceConfig;

        specialinvoke $r0.<io.grpc.InternalConfigSelector: void <init>()>();

        $r0.<io.grpc.internal.ManagedChannelServiceConfig$ServiceConfigConvertedSelector: io.grpc.internal.ManagedChannelServiceConfig config> = $r1;

        return;
    }

    void <init>(io.grpc.internal.ManagedChannelServiceConfig, io.grpc.internal.ManagedChannelServiceConfig$1)
    {
        io.grpc.internal.ManagedChannelServiceConfig$ServiceConfigConvertedSelector $r0;
        io.grpc.internal.ManagedChannelServiceConfig $r1;
        io.grpc.internal.ManagedChannelServiceConfig$1 $r2;

        $r0 := @this: io.grpc.internal.ManagedChannelServiceConfig$ServiceConfigConvertedSelector;

        $r1 := @parameter0: io.grpc.internal.ManagedChannelServiceConfig;

        $r2 := @parameter1: io.grpc.internal.ManagedChannelServiceConfig$1;

        specialinvoke $r0.<io.grpc.internal.ManagedChannelServiceConfig$ServiceConfigConvertedSelector: void <init>(io.grpc.internal.ManagedChannelServiceConfig)>($r1);

        return;
    }

    public io.grpc.InternalConfigSelector$Result selectConfig(io.grpc.LoadBalancer$PickSubchannelArgs)
    {
        io.grpc.internal.ManagedChannelServiceConfig$ServiceConfigConvertedSelector $r0;
        io.grpc.internal.ManagedChannelServiceConfig $r1;
        io.grpc.LoadBalancer$PickSubchannelArgs $r2;
        io.grpc.InternalConfigSelector$Result$Builder $r3;
        io.grpc.InternalConfigSelector$Result $r4;

        $r0 := @this: io.grpc.internal.ManagedChannelServiceConfig$ServiceConfigConvertedSelector;

        $r2 := @parameter0: io.grpc.LoadBalancer$PickSubchannelArgs;

        $r3 = staticinvoke <io.grpc.InternalConfigSelector$Result: io.grpc.InternalConfigSelector$Result$Builder newBuilder()>();

        $r1 = $r0.<io.grpc.internal.ManagedChannelServiceConfig$ServiceConfigConvertedSelector: io.grpc.internal.ManagedChannelServiceConfig config>;

        $r3 = virtualinvoke $r3.<io.grpc.InternalConfigSelector$Result$Builder: io.grpc.InternalConfigSelector$Result$Builder setConfig(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r3.<io.grpc.InternalConfigSelector$Result$Builder: io.grpc.InternalConfigSelector$Result build()>();

        return $r4;
    }

