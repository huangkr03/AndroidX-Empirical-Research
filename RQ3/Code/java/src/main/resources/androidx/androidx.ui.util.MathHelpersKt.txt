androidx.ui.util.MathHelpersKt
    public static final float lerp(float, float, float)
    {
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        $f3 = (float) 1;

        $f4 = $f3 - f2;

        $f6 = $f4 * f0;

        $f5 = f2 * f1;

        $f7 = $f6 + $f5;

        return $f7;
    }

    public static final int lerp(int, int, float)
    {
        int i0, i1, $i2, $i3, $i4;
        float f0;
        double $d0, $d1, $d2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        f0 := @parameter2: float;

        $i2 = i1 - i0;

        $d1 = (double) $i2;

        $d0 = (double) f0;

        $d2 = $d1 * $d0;

        $i3 = staticinvoke <kotlin.math.MathKt: int roundToInt(double)>($d2);

        $i4 = i0 + $i3;

        return $i4;
    }

    public static final long lerp(long, long, float)
    {
        long l0, l1, $l2, $l3, $l4;
        float f0;
        double $d0, $d1, $d2;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        f0 := @parameter2: float;

        $l2 = l1 - l0;

        $d1 = (double) $l2;

        $d0 = (double) f0;

        $d2 = $d1 * $d0;

        $l3 = staticinvoke <kotlin.math.MathKt: long roundToLong(double)>($d2);

        $l4 = l0 + $l3;

        return $l4;
    }

    public static final java.lang.String toHexString(int)
    {
        int $i0, i1, i2;
        boolean z0;
        java.lang.String r0, $r1, $r2, $r3;

        $i0 := @parameter0: int;

        i1 = $i0;

        r0 = "0x";

        z0 = 0;

        i2 = staticinvoke <kotlin.UInt: int constructor-impl(int)>(i1);

        $r1 = staticinvoke <kotlin.text.UStringsKt: java.lang.String toString-V7xB4Y4(int,int)>(i2, 16);

        $r2 = staticinvoke <kotlin.text.StringsKt: java.lang.String padStart(java.lang.String,int,char)>($r1, 8, 48);

        $r3 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>(r0, $r2);

        return $r3;
    }

    public static final float toRadians(float)
    {
        float $f0, $f1, $f2;

        $f0 := @parameter0: float;

        $f1 = $f0 / 180.0F;

        $f2 = $f1 * 3.1415927F;

        return $f2;
    }

    public static final double toRadians(double)
    {
        double $d0, $d1, $d2, $d3;

        $d0 := @parameter0: double;

        $d1 = (double) 180;

        $d2 = $d0 / $d1;

        $d3 = $d2 * 3.141592653589793;

        return $d3;
    }

