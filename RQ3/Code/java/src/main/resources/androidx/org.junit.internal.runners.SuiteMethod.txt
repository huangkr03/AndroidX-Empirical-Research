org.junit.internal.runners.SuiteMethod
    public void <init>(java.lang.Class) throws java.lang.Throwable
    {
        org.junit.internal.runners.SuiteMethod $r0;
        java.lang.Class $r1;
        junit.framework.Test $r2;

        $r0 := @this: org.junit.internal.runners.SuiteMethod;

        $r1 := @parameter0: java.lang.Class;

        $r2 = staticinvoke <org.junit.internal.runners.SuiteMethod: junit.framework.Test testFromSuiteMethod(java.lang.Class)>($r1);

        specialinvoke $r0.<org.junit.internal.runners.JUnit38ClassRunner: void <init>(junit.framework.Test)>($r2);

        return;
    }

    public static junit.framework.Test testFromSuiteMethod(java.lang.Class) throws java.lang.Throwable
    {
        java.lang.Class $r0;
        java.lang.Class[] $r1;
        java.lang.reflect.Method $r2;
        int $i0;
        boolean $z0;
        java.lang.String $r3;
        java.lang.Throwable $r4;
        java.lang.Object[] $r5;
        java.lang.Object $r6;
        junit.framework.Test $r7;
        java.lang.Exception r8;
        java.lang.reflect.InvocationTargetException r9;

        $r0 := @parameter0: java.lang.Class;

        $r1 = newarray (java.lang.Class)[0];

     label1:
        $r2 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("suite", $r1);

        $i0 = virtualinvoke $r2.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

     label2:
        if $z0 != 0 goto label7;

        r8 = new java.lang.Exception;

     label3:
        $r3 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String concat(java.lang.String)>(".suite() must be static");

        specialinvoke r8.<java.lang.Exception: void <init>(java.lang.String)>($r3);

     label4:
        $r4 = (java.lang.Throwable) r8;

     label5:
        throw $r4;

     label6:
        $r4 := @caughtexception;

        r9 = (java.lang.reflect.InvocationTargetException) $r4;

        $r4 = virtualinvoke r9.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        throw $r4;

     label7:
        $r5 = newarray (java.lang.Object)[0];

     label8:
        $r6 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r5);

     label9:
        $r7 = (junit.framework.Test) $r6;

        return $r7;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label6;
        catch java.lang.reflect.InvocationTargetException from label3 to label4 with label6;
        catch java.lang.reflect.InvocationTargetException from label5 to label6 with label6;
        catch java.lang.reflect.InvocationTargetException from label8 to label9 with label6;
    }

