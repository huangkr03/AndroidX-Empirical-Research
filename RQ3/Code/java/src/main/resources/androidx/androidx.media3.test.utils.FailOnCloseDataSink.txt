androidx.media3.test.utils.FailOnCloseDataSink
<androidx.media3.test.utils.FailOnCloseDataSink: androidx.media3.datasource.cache.CacheDataSink wrappedSink>
<androidx.media3.test.utils.FailOnCloseDataSink: java.util.concurrent.atomic.AtomicBoolean failOnClose>
<androidx.media3.test.utils.FailOnCloseDataSink: boolean currentReadFailOnClose>
    public void <init>(androidx.media3.datasource.cache.Cache, java.util.concurrent.atomic.AtomicBoolean)
    {
        androidx.media3.test.utils.FailOnCloseDataSink r0;
        androidx.media3.datasource.cache.Cache r1;
        java.util.concurrent.atomic.AtomicBoolean r2;
        androidx.media3.datasource.cache.CacheDataSink $r3;

        r0 := @this: androidx.media3.test.utils.FailOnCloseDataSink;

        r1 := @parameter0: androidx.media3.datasource.cache.Cache;

        r2 := @parameter1: java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new androidx.media3.datasource.cache.CacheDataSink;

        specialinvoke $r3.<androidx.media3.datasource.cache.CacheDataSink: void <init>(androidx.media3.datasource.cache.Cache,long)>(r1, -1L);

        r0.<androidx.media3.test.utils.FailOnCloseDataSink: androidx.media3.datasource.cache.CacheDataSink wrappedSink> = $r3;

        r0.<androidx.media3.test.utils.FailOnCloseDataSink: java.util.concurrent.atomic.AtomicBoolean failOnClose> = r2;

        return;
    }

    public void open(androidx.media3.datasource.DataSpec) throws java.io.IOException
    {
        androidx.media3.test.utils.FailOnCloseDataSink r0;
        androidx.media3.datasource.DataSpec r1;
        java.util.concurrent.atomic.AtomicBoolean $r2;
        boolean $z0, $z1;
        androidx.media3.datasource.cache.CacheDataSink $r3;

        r0 := @this: androidx.media3.test.utils.FailOnCloseDataSink;

        r1 := @parameter0: androidx.media3.datasource.DataSpec;

        $r2 = r0.<androidx.media3.test.utils.FailOnCloseDataSink: java.util.concurrent.atomic.AtomicBoolean failOnClose>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        r0.<androidx.media3.test.utils.FailOnCloseDataSink: boolean currentReadFailOnClose> = $z0;

        $z1 = r0.<androidx.media3.test.utils.FailOnCloseDataSink: boolean currentReadFailOnClose>;

        if $z1 == 0 goto label1;

        return;

     label1:
        $r3 = r0.<androidx.media3.test.utils.FailOnCloseDataSink: androidx.media3.datasource.cache.CacheDataSink wrappedSink>;

        virtualinvoke $r3.<androidx.media3.datasource.cache.CacheDataSink: void open(androidx.media3.datasource.DataSpec)>(r1);

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        androidx.media3.test.utils.FailOnCloseDataSink r0;
        byte[] r1;
        int i0, i1;
        boolean $z0;
        androidx.media3.datasource.cache.CacheDataSink $r2;

        r0 := @this: androidx.media3.test.utils.FailOnCloseDataSink;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<androidx.media3.test.utils.FailOnCloseDataSink: boolean currentReadFailOnClose>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = r0.<androidx.media3.test.utils.FailOnCloseDataSink: androidx.media3.datasource.cache.CacheDataSink wrappedSink>;

        virtualinvoke $r2.<androidx.media3.datasource.cache.CacheDataSink: void write(byte[],int,int)>(r1, i0, i1);

        return;
    }

    public void close() throws java.io.IOException
    {
        androidx.media3.test.utils.FailOnCloseDataSink r0;
        boolean $z0;
        androidx.media3.datasource.cache.CacheDataSink $r1;
        java.io.IOException r3;
        java.lang.Throwable r4;

        r0 := @this: androidx.media3.test.utils.FailOnCloseDataSink;

        $z0 = r0.<androidx.media3.test.utils.FailOnCloseDataSink: boolean currentReadFailOnClose>;

        if $z0 == 0 goto label1;

        r3 = new java.io.IOException;

        specialinvoke r3.<java.io.IOException: void <init>(java.lang.String)>("Fail on close");

        r4 = (java.lang.Throwable) r3;

        throw r4;

     label1:
        $r1 = r0.<androidx.media3.test.utils.FailOnCloseDataSink: androidx.media3.datasource.cache.CacheDataSink wrappedSink>;

        virtualinvoke $r1.<androidx.media3.datasource.cache.CacheDataSink: void close()>();

        return;
    }

androidx.media3.test.utils.FailOnCloseDataSink$Factory
<androidx.media3.test.utils.FailOnCloseDataSink$Factory: androidx.media3.datasource.cache.Cache cache>
<androidx.media3.test.utils.FailOnCloseDataSink$Factory: java.util.concurrent.atomic.AtomicBoolean failOnClose>
    public void <init>(androidx.media3.datasource.cache.Cache, java.util.concurrent.atomic.AtomicBoolean)
    {
        androidx.media3.test.utils.FailOnCloseDataSink$Factory r0;
        androidx.media3.datasource.cache.Cache r1;
        java.util.concurrent.atomic.AtomicBoolean r2;

        r0 := @this: androidx.media3.test.utils.FailOnCloseDataSink$Factory;

        r1 := @parameter0: androidx.media3.datasource.cache.Cache;

        r2 := @parameter1: java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.test.utils.FailOnCloseDataSink$Factory: androidx.media3.datasource.cache.Cache cache> = r1;

        r0.<androidx.media3.test.utils.FailOnCloseDataSink$Factory: java.util.concurrent.atomic.AtomicBoolean failOnClose> = r2;

        return;
    }

    public androidx.media3.datasource.DataSink createDataSink()
    {
        androidx.media3.test.utils.FailOnCloseDataSink$Factory r0;
        androidx.media3.test.utils.FailOnCloseDataSink $r1;
        java.util.concurrent.atomic.AtomicBoolean $r2;
        androidx.media3.datasource.cache.Cache $r3;

        r0 := @this: androidx.media3.test.utils.FailOnCloseDataSink$Factory;

        $r1 = new androidx.media3.test.utils.FailOnCloseDataSink;

        $r3 = r0.<androidx.media3.test.utils.FailOnCloseDataSink$Factory: androidx.media3.datasource.cache.Cache cache>;

        $r2 = r0.<androidx.media3.test.utils.FailOnCloseDataSink$Factory: java.util.concurrent.atomic.AtomicBoolean failOnClose>;

        specialinvoke $r1.<androidx.media3.test.utils.FailOnCloseDataSink: void <init>(androidx.media3.datasource.cache.Cache,java.util.concurrent.atomic.AtomicBoolean)>($r3, $r2);

        return $r1;
    }

