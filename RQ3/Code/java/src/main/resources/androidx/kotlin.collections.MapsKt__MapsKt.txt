kotlin.collections.MapsKt__MapsKt
    public void <init>()
    {
        kotlin.collections.MapsKt__MapsKt $r0;

        $r0 := @this: kotlin.collections.MapsKt__MapsKt;

        specialinvoke $r0.<kotlin.collections.MapsKt__MapsJVMKt: void <init>()>();

        return;
    }

    private static final java.util.Map buildMap(int, kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        int $i0;
        java.util.Map $r1;

        $i0 := @parameter0: int;

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "builderAction");

        $r1 = staticinvoke <kotlin.collections.MapsKt: java.util.Map createMapBuilder(int)>($i0);

        interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r1);

        $r1 = staticinvoke <kotlin.collections.MapsKt: java.util.Map build(java.util.Map)>($r1);

        return $r1;
    }

    private static final java.util.Map buildMap(kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        java.util.Map $r1;

        $r0 := @parameter0: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "builderAction");

        $r1 = staticinvoke <kotlin.collections.MapsKt: java.util.Map createMapBuilder()>();

        interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r1);

        $r1 = staticinvoke <kotlin.collections.MapsKt: java.util.Map build(java.util.Map)>($r1);

        return $r1;
    }

    private static final java.lang.Object component1(java.util.Map$Entry)
    {
        java.lang.Object $r0;
        java.util.Map$Entry $r1;

        $r1 := @parameter0: java.util.Map$Entry;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $r0 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        return $r0;
    }

    private static final java.lang.Object component2(java.util.Map$Entry)
    {
        java.lang.Object $r0;
        java.util.Map$Entry $r1;

        $r1 := @parameter0: java.util.Map$Entry;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $r0 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        return $r0;
    }

    private static final boolean contains(java.util.Map, java.lang.Object)
    {
        java.lang.Object $r0;
        boolean $z0;
        java.util.Map $r1;

        $r1 := @parameter0: java.util.Map;

        $r0 := @parameter1: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r0);

        return $z0;
    }

    private static final boolean containsKey(java.util.Map, java.lang.Object)
    {
        java.lang.Object $r0;
        boolean $z0;
        java.util.Map $r1;

        $r1 := @parameter0: java.util.Map;

        $r0 := @parameter1: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r0);

        return $z0;
    }

    private static final boolean containsValue(java.util.Map, java.lang.Object)
    {
        java.lang.Object $r0;
        boolean $z0;
        java.util.Map $r1;

        $r1 := @parameter0: java.util.Map;

        $r0 := @parameter1: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsValue(java.lang.Object)>($r0);

        return $z0;
    }

    public static final java.util.Map emptyMap()
    {
        kotlin.collections.EmptyMap $r0;

        $r0 = <kotlin.collections.EmptyMap: kotlin.collections.EmptyMap INSTANCE>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r0, "null cannot be cast to non-null type kotlin.collections.Map<K of kotlin.collections.MapsKt__MapsKt.emptyMap, V of kotlin.collections.MapsKt__MapsKt.emptyMap>");

        return $r0;
    }

    public static final java.util.Map filter(java.util.Map, kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        java.util.Map $r1;
        java.util.LinkedHashMap $r2, r9;
        java.util.Set $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5, $r8;
        java.util.Map$Entry $r6;
        java.lang.Boolean $r7;

        $r1 := @parameter0: java.util.Map;

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "predicate");

        r9 = new java.util.LinkedHashMap;

        $r2 = r9;

        specialinvoke r9.<java.util.LinkedHashMap: void <init>()>();

        $r3 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r6);

        $r7 = (java.lang.Boolean) $r5;

        $z0 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r1 = (java.util.Map) $r2;

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r8);

        goto label1;

     label2:
        $r1 = (java.util.Map) $r2;

        return $r1;
    }

    public static final java.util.Map filterKeys(java.util.Map, kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        java.util.Map $r1;
        java.util.LinkedHashMap $r2, r9;
        java.util.Set $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5, $r8;
        java.util.Map$Entry $r6;
        java.lang.Boolean $r7;

        $r1 := @parameter0: java.util.Map;

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "predicate");

        r9 = new java.util.LinkedHashMap;

        $r2 = r9;

        specialinvoke r9.<java.util.LinkedHashMap: void <init>()>();

        $r3 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r5 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r5);

        $r7 = (java.lang.Boolean) $r5;

        $z0 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke $r2.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r8);

        goto label1;

     label2:
        $r1 = (java.util.Map) $r2;

        return $r1;
    }

    public static final java.util.Map filterNot(java.util.Map, kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        java.util.Map $r1;
        java.util.LinkedHashMap $r2, r9;
        java.util.Set $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5, $r8;
        java.util.Map$Entry $r6;
        java.lang.Boolean $r7;

        $r1 := @parameter0: java.util.Map;

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "predicate");

        r9 = new java.util.LinkedHashMap;

        $r2 = r9;

        specialinvoke r9.<java.util.LinkedHashMap: void <init>()>();

        $r3 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r6);

        $r7 = (java.lang.Boolean) $r5;

        $z0 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label1;

        $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r1 = (java.util.Map) $r2;

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r8);

        goto label1;

     label2:
        $r1 = (java.util.Map) $r2;

        return $r1;
    }

    public static final java.util.Map filterNotTo(java.util.Map, java.util.Map, kotlin.jvm.functions.Function1)
    {
        java.util.Map $r0, $r2;
        kotlin.jvm.functions.Function1 $r1;
        java.util.Set $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5, $r8;
        java.util.Map$Entry $r6;
        java.lang.Boolean $r7;

        $r2 := @parameter0: java.util.Map;

        $r0 := @parameter1: java.util.Map;

        $r1 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r6);

        $r7 = (java.lang.Boolean) $r5;

        $z0 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label1;

        $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r8);

        goto label1;

     label2:
        return $r0;
    }

    public static final java.util.Map filterTo(java.util.Map, java.util.Map, kotlin.jvm.functions.Function1)
    {
        java.util.Map $r0, $r2;
        kotlin.jvm.functions.Function1 $r1;
        java.util.Set $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5, $r8;
        java.util.Map$Entry $r6;
        java.lang.Boolean $r7;

        $r2 := @parameter0: java.util.Map;

        $r0 := @parameter1: java.util.Map;

        $r1 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r6);

        $r7 = (java.lang.Boolean) $r5;

        $z0 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r8);

        goto label1;

     label2:
        return $r0;
    }

    public static final java.util.Map filterValues(java.util.Map, kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        java.util.Map $r1;
        java.util.LinkedHashMap $r2, r9;
        java.util.Set $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5, $r8;
        java.util.Map$Entry $r6;
        java.lang.Boolean $r7;

        $r1 := @parameter0: java.util.Map;

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "predicate");

        r9 = new java.util.LinkedHashMap;

        $r2 = r9;

        specialinvoke r9.<java.util.LinkedHashMap: void <init>()>();

        $r3 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r5 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r5);

        $r7 = (java.lang.Boolean) $r5;

        $z0 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke $r2.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r8);

        goto label1;

     label2:
        $r1 = (java.util.Map) $r2;

        return $r1;
    }

    private static final java.lang.Object get(java.util.Map, java.lang.Object)
    {
        java.lang.Object $r0;
        java.util.Map $r1;

        $r1 := @parameter0: java.util.Map;

        $r0 := @parameter1: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $r0 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        return $r0;
    }

    private static final java.lang.Object getOrElse(java.util.Map, java.lang.Object, kotlin.jvm.functions.Function0)
    {
        java.lang.Object $r0;
        kotlin.jvm.functions.Function0 $r1;
        java.util.Map $r2;

        $r2 := @parameter0: java.util.Map;

        $r0 := @parameter1: java.lang.Object;

        $r1 := @parameter2: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "defaultValue");

        $r0 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        if $r0 != null goto label1;

        $r0 = interfaceinvoke $r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

     label1:
        return $r0;
    }

    public static final java.lang.Object getOrElseNullable(java.util.Map, java.lang.Object, kotlin.jvm.functions.Function0)
    {
        java.lang.Object $r0, $r3;
        kotlin.jvm.functions.Function0 $r1;
        java.util.Map $r2;
        boolean $z0;

        $r2 := @parameter0: java.util.Map;

        $r0 := @parameter1: java.lang.Object;

        $r1 := @parameter2: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "defaultValue");

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        if $r3 != null goto label1;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r0);

        if $z0 != 0 goto label1;

        $r0 = interfaceinvoke $r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        return $r0;

     label1:
        return $r3;
    }

    public static final java.lang.Object getOrPut(java.util.Map, java.lang.Object, kotlin.jvm.functions.Function0)
    {
        java.util.Map $r0;
        java.lang.Object $r1, $r3;
        kotlin.jvm.functions.Function0 $r2;

        $r0 := @parameter0: java.util.Map;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "defaultValue");

        $r3 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        if $r3 != null goto label1;

        $r3 = interfaceinvoke $r2.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r3);

     label1:
        return $r3;
    }

    public static final java.lang.Object getValue(java.util.Map, java.lang.Object)
    {
        java.lang.Object $r0;
        java.util.Map $r1;

        $r1 := @parameter0: java.util.Map;

        $r0 := @parameter1: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $r0 = staticinvoke <kotlin.collections.MapsKt: java.lang.Object getOrImplicitDefaultNullable(java.util.Map,java.lang.Object)>($r1, $r0);

        return $r0;
    }

    private static final java.util.HashMap hashMapOf()
    {
        java.util.HashMap $r0;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        return $r0;
    }

    public static final transient java.util.HashMap hashMapOf(kotlin.Pair[])
    {
        kotlin.Pair[] $r0;
        int $i0;
        java.util.HashMap $r1, r2;
        java.util.Map r3;

        $r0 := @parameter0: kotlin.Pair[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "pairs");

        r2 = new java.util.HashMap;

        $r1 = r2;

        $i0 = lengthof $r0;

        $i0 = staticinvoke <kotlin.collections.MapsKt: int mapCapacity(int)>($i0);

        specialinvoke r2.<java.util.HashMap: void <init>(int)>($i0);

        r3 = (java.util.Map) $r1;

        staticinvoke <kotlin.collections.MapsKt: void putAll(java.util.Map,kotlin.Pair[])>(r3, $r0);

        return $r1;
    }

    private static final java.lang.Object ifEmpty(java.util.Map, kotlin.jvm.functions.Function0)
    {
        kotlin.jvm.functions.Function0 $r0;
        java.util.Map $r1;
        boolean $z0;
        java.lang.Object $r2;

        $r1 := @parameter0: java.util.Map;

        $r0 := @parameter1: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "defaultValue");

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = interfaceinvoke $r0.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        return $r2;

     label1:
        return $r1;
    }

    private static final boolean isNotEmpty(java.util.Map)
    {
        boolean $z0;
        java.util.Map $r0;

        $r0 := @parameter0: java.util.Map;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $z0 = interfaceinvoke $r0.<java.util.Map: boolean isEmpty()>();

        $z0 = $z0 ^ 1;

        return $z0;
    }

    private static final boolean isNullOrEmpty(java.util.Map)
    {
        boolean $z0;
        java.util.Map $r0;

        $r0 := @parameter0: java.util.Map;

        if $r0 == null goto label2;

        $z0 = interfaceinvoke $r0.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    private static final java.util.Iterator iterator(java.util.Map)
    {
        java.util.Map $r0;
        java.util.Set $r1;
        java.util.Iterator $r2;

        $r0 := @parameter0: java.util.Map;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = interfaceinvoke $r0.<java.util.Map: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

        return $r2;
    }

    private static final java.util.LinkedHashMap linkedMapOf()
    {
        java.util.LinkedHashMap $r0;

        $r0 = new java.util.LinkedHashMap;

        specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>();

        return $r0;
    }

    public static final transient java.util.LinkedHashMap linkedMapOf(kotlin.Pair[])
    {
        kotlin.Pair[] $r0;
        java.util.LinkedHashMap $r1, r3;
        int $i0;
        java.util.Map $r2;

        $r0 := @parameter0: kotlin.Pair[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "pairs");

        r3 = new java.util.LinkedHashMap;

        $i0 = lengthof $r0;

        $i0 = staticinvoke <kotlin.collections.MapsKt: int mapCapacity(int)>($i0);

        specialinvoke r3.<java.util.LinkedHashMap: void <init>(int)>($i0);

        $r2 = (java.util.Map) r3;

        $r2 = staticinvoke <kotlin.collections.MapsKt: java.util.Map toMap(kotlin.Pair[],java.util.Map)>($r0, $r2);

        $r1 = (java.util.LinkedHashMap) $r2;

        return $r1;
    }

    public static final java.util.Map mapKeys(java.util.Map, kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        java.util.Map $r1;
        java.util.LinkedHashMap $r2, r8;
        int $i0;
        java.util.Set $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5, $r6;
        java.util.Map$Entry $r7;
        java.lang.Iterable r9;

        $r1 := @parameter0: java.util.Map;

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "transform");

        r8 = new java.util.LinkedHashMap;

        $r2 = r8;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        $i0 = staticinvoke <kotlin.collections.MapsKt: int mapCapacity(int)>($i0);

        specialinvoke r8.<java.util.LinkedHashMap: void <init>(int)>($i0);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        r9 = (java.lang.Iterable) $r3;

        $r4 = interfaceinvoke r9.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r5);

        $r7 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke $r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r1 = (java.util.Map) $r2;

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r5);

        goto label1;

     label2:
        $r1 = (java.util.Map) $r2;

        return $r1;
    }

    public static final java.util.Map mapKeysTo(java.util.Map, java.util.Map, kotlin.jvm.functions.Function1)
    {
        java.util.Map $r0, $r2;
        kotlin.jvm.functions.Function1 $r1;
        java.util.Set $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5, $r6;
        java.util.Map$Entry $r7;
        java.lang.Iterable r8;

        $r2 := @parameter0: java.util.Map;

        $r0 := @parameter1: java.util.Map;

        $r1 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "transform");

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        r8 = (java.lang.Iterable) $r3;

        $r4 = interfaceinvoke r8.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r5);

        $r7 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke $r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r5);

        goto label1;

     label2:
        return $r0;
    }

    private static final java.util.Map mapOf()
    {
        java.util.Map $r0;

        $r0 = staticinvoke <kotlin.collections.MapsKt: java.util.Map emptyMap()>();

        return $r0;
    }

    public static final transient java.util.Map mapOf(kotlin.Pair[])
    {
        kotlin.Pair[] $r0;
        int $i0;
        java.util.Map $r1;
        java.util.LinkedHashMap r2;

        $r0 := @parameter0: kotlin.Pair[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "pairs");

        $i0 = lengthof $r0;

        if $i0 <= 0 goto label1;

        r2 = new java.util.LinkedHashMap;

        $i0 = lengthof $r0;

        $i0 = staticinvoke <kotlin.collections.MapsKt: int mapCapacity(int)>($i0);

        specialinvoke r2.<java.util.LinkedHashMap: void <init>(int)>($i0);

        $r1 = (java.util.Map) r2;

        $r1 = staticinvoke <kotlin.collections.MapsKt: java.util.Map toMap(kotlin.Pair[],java.util.Map)>($r0, $r1);

        return $r1;

     label1:
        $r1 = staticinvoke <kotlin.collections.MapsKt: java.util.Map emptyMap()>();

        return $r1;
    }

    public static final java.util.Map mapValues(java.util.Map, kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        java.util.Map $r1;
        java.util.LinkedHashMap $r2, r8;
        int $i0;
        java.util.Set $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5, $r7;
        java.util.Map$Entry $r6;
        java.lang.Iterable r9;

        $r1 := @parameter0: java.util.Map;

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "transform");

        r8 = new java.util.LinkedHashMap;

        $r2 = r8;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        $i0 = staticinvoke <kotlin.collections.MapsKt: int mapCapacity(int)>($i0);

        specialinvoke r8.<java.util.LinkedHashMap: void <init>(int)>($i0);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        r9 = (java.lang.Iterable) $r3;

        $r4 = interfaceinvoke r9.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.util.Map$Entry) $r5;

        $r7 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r5 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r5);

        $r1 = (java.util.Map) $r2;

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r5);

        goto label1;

     label2:
        $r1 = (java.util.Map) $r2;

        return $r1;
    }

    public static final java.util.Map mapValuesTo(java.util.Map, java.util.Map, kotlin.jvm.functions.Function1)
    {
        java.util.Map $r0, $r2;
        kotlin.jvm.functions.Function1 $r1;
        java.util.Set $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5, $r7;
        java.util.Map$Entry $r6;
        java.lang.Iterable r8;

        $r2 := @parameter0: java.util.Map;

        $r0 := @parameter1: java.util.Map;

        $r1 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "transform");

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        r8 = (java.lang.Iterable) $r3;

        $r4 = interfaceinvoke r8.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.util.Map$Entry) $r5;

        $r7 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r5);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r5);

        goto label1;

     label2:
        return $r0;
    }

    public static final java.util.Map minus(java.util.Map, java.lang.Iterable)
    {
        java.lang.Iterable $r0;
        java.util.Map $r1;
        java.util.Set $r2;
        java.util.Collection r3;

        $r1 := @parameter0: java.util.Map;

        $r0 := @parameter1: java.lang.Iterable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "keys");

        $r1 = staticinvoke <kotlin.collections.MapsKt: java.util.Map toMutableMap(java.util.Map)>($r1);

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        r3 = (java.util.Collection) $r2;

        staticinvoke <kotlin.collections.CollectionsKt: boolean removeAll(java.util.Collection,java.lang.Iterable)>(r3, $r0);

        $r1 = staticinvoke <kotlin.collections.MapsKt: java.util.Map optimizeReadOnlyMap(java.util.Map)>($r1);

        return $r1;
    }

    public static final java.util.Map minus(java.util.Map, java.lang.Object)
    {
        java.lang.Object $r0;
        java.util.Map $r1;

        $r1 := @parameter0: java.util.Map;

        $r0 := @parameter1: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $r1 = staticinvoke <kotlin.collections.MapsKt: java.util.Map toMutableMap(java.util.Map)>($r1);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r0);

        $r1 = staticinvoke <kotlin.collections.MapsKt: java.util.Map optimizeReadOnlyMap(java.util.Map)>($r1);

        return $r1;
    }

    public static final java.util.Map minus(java.util.Map, kotlin.sequences.Sequence)
    {
        kotlin.sequences.Sequence $r0;
        java.util.Map $r1;
        java.util.Set $r2;
        java.util.Collection r3;

        $r1 := @parameter0: java.util.Map;

        $r0 := @parameter1: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "keys");

        $r1 = staticinvoke <kotlin.collections.MapsKt: java.util.Map toMutableMap(java.util.Map)>($r1);

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        r3 = (java.util.Collection) $r2;

        staticinvoke <kotlin.collections.CollectionsKt: boolean removeAll(java.util.Collection,kotlin.sequences.Sequence)>(r3, $r0);

        $r1 = staticinvoke <kotlin.collections.MapsKt: java.util.Map optimizeReadOnlyMap(java.util.Map)>($r1);

        return $r1;
    }

    public static final java.util.Map minus(java.util.Map, java.lang.Object[])
    {
        java.lang.Object[] $r0;
        java.util.Map $r1;
        java.util.Set $r2;
        java.util.Collection r3;

        $r1 := @parameter0: java.util.Map;

        $r0 := @parameter1: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "keys");

        $r1 = staticinvoke <kotlin.collections.MapsKt: java.util.Map toMutableMap(java.util.Map)>($r1);

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        r3 = (java.util.Collection) $r2;

        staticinvoke <kotlin.collections.CollectionsKt: boolean removeAll(java.util.Collection,java.lang.Object[])>(r3, $r0);

        $r1 = staticinvoke <kotlin.collections.MapsKt: java.util.Map optimizeReadOnlyMap(java.util.Map)>($r1);

        return $r1;
    }

    private static final void minusAssign(java.util.Map, java.lang.Iterable)
    {
        java.lang.Iterable $r0;
        java.util.Set $r1;
        java.util.Map $r2;
        java.util.Collection r3;

        $r2 := @parameter0: java.util.Map;

        $r0 := @parameter1: java.lang.Iterable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "keys");

        $r1 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        r3 = (java.util.Collection) $r1;

        staticinvoke <kotlin.collections.CollectionsKt: boolean removeAll(java.util.Collection,java.lang.Iterable)>(r3, $r0);

        return;
    }

    private static final void minusAssign(java.util.Map, java.lang.Object)
    {
        java.util.Map $r0;
        java.lang.Object $r1;

        $r0 := @parameter0: java.util.Map;

        $r1 := @parameter1: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

        return;
    }

    private static final void minusAssign(java.util.Map, kotlin.sequences.Sequence)
    {
        kotlin.sequences.Sequence $r0;
        java.util.Set $r1;
        java.util.Map $r2;
        java.util.Collection r3;

        $r2 := @parameter0: java.util.Map;

        $r0 := @parameter1: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "keys");

        $r1 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        r3 = (java.util.Collection) $r1;

        staticinvoke <kotlin.collections.CollectionsKt: boolean removeAll(java.util.Collection,kotlin.sequences.Sequence)>(r3, $r0);

        return;
    }

    private static final void minusAssign(java.util.Map, java.lang.Object[])
    {
        java.lang.Object[] $r0;
        java.util.Set $r1;
        java.util.Map $r2;
        java.util.Collection r3;

        $r2 := @parameter0: java.util.Map;

        $r0 := @parameter1: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "keys");

        $r1 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        r3 = (java.util.Collection) $r1;

        staticinvoke <kotlin.collections.CollectionsKt: boolean removeAll(java.util.Collection,java.lang.Object[])>(r3, $r0);

        return;
    }

    private static final java.util.Iterator mutableIterator(java.util.Map)
    {
        java.util.Map $r0;
        java.util.Set $r1;
        java.util.Iterator $r2;

        $r0 := @parameter0: java.util.Map;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = interfaceinvoke $r0.<java.util.Map: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

        return $r2;
    }

    private static final java.util.Map mutableMapOf()
    {
        java.util.LinkedHashMap r0;
        java.util.Map r1;

        r0 = new java.util.LinkedHashMap;

        specialinvoke r0.<java.util.LinkedHashMap: void <init>()>();

        r1 = (java.util.Map) r0;

        return r1;
    }

    public static final transient java.util.Map mutableMapOf(kotlin.Pair[])
    {
        kotlin.Pair[] $r0;
        int $i0;
        java.util.LinkedHashMap $r1, r2;
        java.util.Map r3;

        $r0 := @parameter0: kotlin.Pair[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "pairs");

        r2 = new java.util.LinkedHashMap;

        $r1 = r2;

        $i0 = lengthof $r0;

        $i0 = staticinvoke <kotlin.collections.MapsKt: int mapCapacity(int)>($i0);

        specialinvoke r2.<java.util.LinkedHashMap: void <init>(int)>($i0);

        r3 = (java.util.Map) $r1;

        staticinvoke <kotlin.collections.MapsKt: void putAll(java.util.Map,kotlin.Pair[])>(r3, $r0);

        r3 = (java.util.Map) $r1;

        return r3;
    }

    public static final java.util.Map optimizeReadOnlyMap(java.util.Map)
    {
        java.util.Map $r0;
        int $i0;

        $r0 := @parameter0: java.util.Map;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $i0 = interfaceinvoke $r0.<java.util.Map: int size()>();

        lookupswitch($i0)
        {
            case 0: goto label3;
            case 1: goto label2;
            default: goto label1;
        };

     label1:
        return $r0;

     label2:
        $r0 = staticinvoke <kotlin.collections.MapsKt: java.util.Map toSingletonMap(java.util.Map)>($r0);

        return $r0;

     label3:
        $r0 = staticinvoke <kotlin.collections.MapsKt: java.util.Map emptyMap()>();

        return $r0;
    }

    private static final java.util.Map orEmpty(java.util.Map)
    {
        java.util.Map $r0;

        $r0 := @parameter0: java.util.Map;

        if $r0 != null goto label1;

        $r0 = staticinvoke <kotlin.collections.MapsKt: java.util.Map emptyMap()>();

     label1:
        return $r0;
    }

    public static final java.util.Map plus(java.util.Map, java.lang.Iterable)
    {
        java.lang.Iterable $r0;
        java.util.Map $r1;
        boolean $z0;
        java.util.LinkedHashMap $r2, r3;

        $r1 := @parameter0: java.util.Map;

        $r0 := @parameter1: java.lang.Iterable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "pairs");

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <kotlin.collections.MapsKt: java.util.Map toMap(java.lang.Iterable)>($r0);

        return $r1;

     label1:
        r3 = new java.util.LinkedHashMap;

        $r2 = r3;

        specialinvoke r3.<java.util.LinkedHashMap: void <init>(java.util.Map)>($r1);

        $r1 = (java.util.Map) $r2;

        staticinvoke <kotlin.collections.MapsKt: void putAll(java.util.Map,java.lang.Iterable)>($r1, $r0);

        $r1 = (java.util.Map) $r2;

        return $r1;
    }

    public static final java.util.Map plus(java.util.Map, java.util.Map)
    {
        java.util.Map $r0, $r1;
        java.util.LinkedHashMap $r2, r3;

        $r0 := @parameter0: java.util.Map;

        $r1 := @parameter1: java.util.Map;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "map");

        r3 = new java.util.LinkedHashMap;

        $r2 = r3;

        specialinvoke r3.<java.util.LinkedHashMap: void <init>(java.util.Map)>($r0);

        virtualinvoke $r2.<java.util.LinkedHashMap: void putAll(java.util.Map)>($r1);

        $r0 = (java.util.Map) $r2;

        return $r0;
    }

    public static final java.util.Map plus(java.util.Map, kotlin.Pair)
    {
        java.util.Map $r0;
        kotlin.Pair $r1;
        boolean $z0;
        java.util.LinkedHashMap $r2, r5;
        java.lang.Object $r3, $r4;

        $r0 := @parameter0: java.util.Map;

        $r1 := @parameter1: kotlin.Pair;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "pair");

        $z0 = interfaceinvoke $r0.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r0 = staticinvoke <kotlin.collections.MapsKt: java.util.Map mapOf(kotlin.Pair)>($r1);

        return $r0;

     label1:
        r5 = new java.util.LinkedHashMap;

        $r2 = r5;

        specialinvoke r5.<java.util.LinkedHashMap: void <init>(java.util.Map)>($r0);

        $r3 = virtualinvoke $r1.<kotlin.Pair: java.lang.Object getFirst()>();

        $r4 = virtualinvoke $r1.<kotlin.Pair: java.lang.Object getSecond()>();

        virtualinvoke $r2.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

        $r0 = (java.util.Map) $r2;

        return $r0;
    }

    public static final java.util.Map plus(java.util.Map, kotlin.sequences.Sequence)
    {
        kotlin.sequences.Sequence $r0;
        java.util.Map $r1;
        java.util.LinkedHashMap $r2, r3;

        $r1 := @parameter0: java.util.Map;

        $r0 := @parameter1: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "pairs");

        r3 = new java.util.LinkedHashMap;

        $r2 = r3;

        specialinvoke r3.<java.util.LinkedHashMap: void <init>(java.util.Map)>($r1);

        $r1 = (java.util.Map) $r2;

        staticinvoke <kotlin.collections.MapsKt: void putAll(java.util.Map,kotlin.sequences.Sequence)>($r1, $r0);

        $r1 = (java.util.Map) $r2;

        $r1 = staticinvoke <kotlin.collections.MapsKt: java.util.Map optimizeReadOnlyMap(java.util.Map)>($r1);

        return $r1;
    }

    public static final java.util.Map plus(java.util.Map, kotlin.Pair[])
    {
        kotlin.Pair[] $r0;
        java.util.Map $r1;
        boolean $z0;
        java.util.LinkedHashMap $r2, r3;

        $r1 := @parameter0: java.util.Map;

        $r0 := @parameter1: kotlin.Pair[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "pairs");

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <kotlin.collections.MapsKt: java.util.Map toMap(kotlin.Pair[])>($r0);

        return $r1;

     label1:
        r3 = new java.util.LinkedHashMap;

        $r2 = r3;

        specialinvoke r3.<java.util.LinkedHashMap: void <init>(java.util.Map)>($r1);

        $r1 = (java.util.Map) $r2;

        staticinvoke <kotlin.collections.MapsKt: void putAll(java.util.Map,kotlin.Pair[])>($r1, $r0);

        $r1 = (java.util.Map) $r2;

        return $r1;
    }

    private static final void plusAssign(java.util.Map, java.lang.Iterable)
    {
        java.util.Map $r0;
        java.lang.Iterable $r1;

        $r0 := @parameter0: java.util.Map;

        $r1 := @parameter1: java.lang.Iterable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "pairs");

        staticinvoke <kotlin.collections.MapsKt: void putAll(java.util.Map,java.lang.Iterable)>($r0, $r1);

        return;
    }

    private static final void plusAssign(java.util.Map, java.util.Map)
    {
        java.util.Map $r0, $r1;

        $r0 := @parameter0: java.util.Map;

        $r1 := @parameter1: java.util.Map;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "map");

        interfaceinvoke $r0.<java.util.Map: void putAll(java.util.Map)>($r1);

        return;
    }

    private static final void plusAssign(java.util.Map, kotlin.Pair)
    {
        java.util.Map $r0;
        kotlin.Pair $r1;
        java.lang.Object $r2, $r3;

        $r0 := @parameter0: java.util.Map;

        $r1 := @parameter1: kotlin.Pair;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "pair");

        $r2 = virtualinvoke $r1.<kotlin.Pair: java.lang.Object getFirst()>();

        $r3 = virtualinvoke $r1.<kotlin.Pair: java.lang.Object getSecond()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);

        return;
    }

    private static final void plusAssign(java.util.Map, kotlin.sequences.Sequence)
    {
        java.util.Map $r0;
        kotlin.sequences.Sequence $r1;

        $r0 := @parameter0: java.util.Map;

        $r1 := @parameter1: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "pairs");

        staticinvoke <kotlin.collections.MapsKt: void putAll(java.util.Map,kotlin.sequences.Sequence)>($r0, $r1);

        return;
    }

    private static final void plusAssign(java.util.Map, kotlin.Pair[])
    {
        java.util.Map $r0;
        kotlin.Pair[] $r1;

        $r0 := @parameter0: java.util.Map;

        $r1 := @parameter1: kotlin.Pair[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "pairs");

        staticinvoke <kotlin.collections.MapsKt: void putAll(java.util.Map,kotlin.Pair[])>($r0, $r1);

        return;
    }

    public static final void putAll(java.util.Map, java.lang.Iterable)
    {
        java.util.Map $r0;
        java.lang.Iterable $r1;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3, $r5;
        kotlin.Pair $r4;

        $r0 := @parameter0: java.util.Map;

        $r1 := @parameter1: java.lang.Iterable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "pairs");

        $r2 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (kotlin.Pair) $r3;

        $r3 = virtualinvoke $r4.<kotlin.Pair: java.lang.Object component1()>();

        $r5 = virtualinvoke $r4.<kotlin.Pair: java.lang.Object component2()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r5);

        goto label1;

     label2:
        return;
    }

    public static final void putAll(java.util.Map, kotlin.sequences.Sequence)
    {
        java.util.Map $r0;
        kotlin.sequences.Sequence $r1;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3, $r5;
        kotlin.Pair $r4;

        $r0 := @parameter0: java.util.Map;

        $r1 := @parameter1: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "pairs");

        $r2 = interfaceinvoke $r1.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (kotlin.Pair) $r3;

        $r3 = virtualinvoke $r4.<kotlin.Pair: java.lang.Object component1()>();

        $r5 = virtualinvoke $r4.<kotlin.Pair: java.lang.Object component2()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r5);

        goto label1;

     label2:
        return;
    }

    public static final void putAll(java.util.Map, kotlin.Pair[])
    {
        java.util.Map $r0;
        kotlin.Pair[] $r1;
        int $i0, $i1;
        kotlin.Pair $r2;
        java.lang.Object $r3, $r4;

        $r0 := @parameter0: java.util.Map;

        $r1 := @parameter1: kotlin.Pair[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "pairs");

        $i0 = lengthof $r1;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r2 = $r1[$i1];

        $r3 = virtualinvoke $r2.<kotlin.Pair: java.lang.Object component1()>();

        $r4 = virtualinvoke $r2.<kotlin.Pair: java.lang.Object component2()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }

    private static final java.lang.Object remove(java.util.Map, java.lang.Object)
    {
        java.lang.Object $r0;
        java.util.Map $r1;

        $r1 := @parameter0: java.util.Map;

        $r0 := @parameter1: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $r1 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: java.util.Map asMutableMap(java.lang.Object)>($r1);

        $r0 = interfaceinvoke $r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r0);

        return $r0;
    }

    private static final void set(java.util.Map, java.lang.Object, java.lang.Object)
    {
        java.util.Map $r0;
        java.lang.Object $r1, $r2;

        $r0 := @parameter0: java.util.Map;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        return;
    }

    public static final java.util.Map toMap(java.lang.Iterable)
    {
        java.lang.Iterable $r0;
        boolean $z0;
        java.util.Collection $r1;
        int $i0;
        java.util.Map $r2;
        java.util.List $r3;
        java.lang.Object $r4;
        java.util.Iterator $r5;
        kotlin.Pair $r6;
        java.util.LinkedHashMap r7;

        $r0 := @parameter0: java.lang.Iterable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $z0 = $r0 instanceof java.util.Collection;

        if $z0 == 0 goto label6;

        $r1 = (java.util.Collection) $r0;

        $i0 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        lookupswitch($i0)
        {
            case 0: goto label5;
            case 1: goto label2;
            default: goto label1;
        };

     label1:
        r7 = new java.util.LinkedHashMap;

        $r1 = (java.util.Collection) $r0;

        $i0 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        $i0 = staticinvoke <kotlin.collections.MapsKt: int mapCapacity(int)>($i0);

        specialinvoke r7.<java.util.LinkedHashMap: void <init>(int)>($i0);

        $r2 = (java.util.Map) r7;

        $r2 = staticinvoke <kotlin.collections.MapsKt: java.util.Map toMap(java.lang.Iterable,java.util.Map)>($r0, $r2);

        return $r2;

     label2:
        $z0 = $r0 instanceof java.util.List;

        if $z0 == 0 goto label3;

        $r3 = (java.util.List) $r0;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0);

        goto label4;

     label3:
        $r5 = interfaceinvoke $r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r4 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

     label4:
        $r6 = (kotlin.Pair) $r4;

        $r2 = staticinvoke <kotlin.collections.MapsKt: java.util.Map mapOf(kotlin.Pair)>($r6);

        return $r2;

     label5:
        $r2 = staticinvoke <kotlin.collections.MapsKt: java.util.Map emptyMap()>();

        return $r2;

     label6:
        r7 = new java.util.LinkedHashMap;

        specialinvoke r7.<java.util.LinkedHashMap: void <init>()>();

        $r2 = (java.util.Map) r7;

        $r2 = staticinvoke <kotlin.collections.MapsKt: java.util.Map toMap(java.lang.Iterable,java.util.Map)>($r0, $r2);

        $r2 = staticinvoke <kotlin.collections.MapsKt: java.util.Map optimizeReadOnlyMap(java.util.Map)>($r2);

        return $r2;
    }

    public static final java.util.Map toMap(java.lang.Iterable, java.util.Map)
    {
        java.lang.Iterable $r0;
        java.util.Map $r1;

        $r0 := @parameter0: java.lang.Iterable;

        $r1 := @parameter1: java.util.Map;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.collections.MapsKt: void putAll(java.util.Map,java.lang.Iterable)>($r1, $r0);

        return $r1;
    }

    public static final java.util.Map toMap(java.util.Map)
    {
        java.util.Map $r0;
        int $i0;

        $r0 := @parameter0: java.util.Map;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $i0 = interfaceinvoke $r0.<java.util.Map: int size()>();

        lookupswitch($i0)
        {
            case 0: goto label3;
            case 1: goto label2;
            default: goto label1;
        };

     label1:
        $r0 = staticinvoke <kotlin.collections.MapsKt: java.util.Map toMutableMap(java.util.Map)>($r0);

        return $r0;

     label2:
        $r0 = staticinvoke <kotlin.collections.MapsKt: java.util.Map toSingletonMap(java.util.Map)>($r0);

        return $r0;

     label3:
        $r0 = staticinvoke <kotlin.collections.MapsKt: java.util.Map emptyMap()>();

        return $r0;
    }

    public static final java.util.Map toMap(java.util.Map, java.util.Map)
    {
        java.util.Map $r0, $r1;

        $r0 := @parameter0: java.util.Map;

        $r1 := @parameter1: java.util.Map;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        interfaceinvoke $r1.<java.util.Map: void putAll(java.util.Map)>($r0);

        return $r1;
    }

    public static final java.util.Map toMap(kotlin.sequences.Sequence)
    {
        kotlin.sequences.Sequence $r0;
        java.util.Map $r1;
        java.util.LinkedHashMap r2;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        r2 = new java.util.LinkedHashMap;

        specialinvoke r2.<java.util.LinkedHashMap: void <init>()>();

        $r1 = (java.util.Map) r2;

        $r1 = staticinvoke <kotlin.collections.MapsKt: java.util.Map toMap(kotlin.sequences.Sequence,java.util.Map)>($r0, $r1);

        $r1 = staticinvoke <kotlin.collections.MapsKt: java.util.Map optimizeReadOnlyMap(java.util.Map)>($r1);

        return $r1;
    }

    public static final java.util.Map toMap(kotlin.sequences.Sequence, java.util.Map)
    {
        kotlin.sequences.Sequence $r0;
        java.util.Map $r1;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.util.Map;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.collections.MapsKt: void putAll(java.util.Map,kotlin.sequences.Sequence)>($r1, $r0);

        return $r1;
    }

    public static final java.util.Map toMap(kotlin.Pair[])
    {
        kotlin.Pair[] $r0;
        int $i0;
        java.util.Map $r1;
        kotlin.Pair $r2;
        java.util.LinkedHashMap r3;

        $r0 := @parameter0: kotlin.Pair[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $i0 = lengthof $r0;

        lookupswitch($i0)
        {
            case 0: goto label3;
            case 1: goto label2;
            default: goto label1;
        };

     label1:
        r3 = new java.util.LinkedHashMap;

        $i0 = lengthof $r0;

        $i0 = staticinvoke <kotlin.collections.MapsKt: int mapCapacity(int)>($i0);

        specialinvoke r3.<java.util.LinkedHashMap: void <init>(int)>($i0);

        $r1 = (java.util.Map) r3;

        $r1 = staticinvoke <kotlin.collections.MapsKt: java.util.Map toMap(kotlin.Pair[],java.util.Map)>($r0, $r1);

        return $r1;

     label2:
        $r2 = $r0[0];

        $r1 = staticinvoke <kotlin.collections.MapsKt: java.util.Map mapOf(kotlin.Pair)>($r2);

        return $r1;

     label3:
        $r1 = staticinvoke <kotlin.collections.MapsKt: java.util.Map emptyMap()>();

        return $r1;
    }

    public static final java.util.Map toMap(kotlin.Pair[], java.util.Map)
    {
        kotlin.Pair[] $r0;
        java.util.Map $r1;

        $r0 := @parameter0: kotlin.Pair[];

        $r1 := @parameter1: java.util.Map;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.collections.MapsKt: void putAll(java.util.Map,kotlin.Pair[])>($r1, $r0);

        return $r1;
    }

    public static final java.util.Map toMutableMap(java.util.Map)
    {
        java.util.Map $r0;
        java.util.LinkedHashMap r1;

        $r0 := @parameter0: java.util.Map;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        r1 = new java.util.LinkedHashMap;

        specialinvoke r1.<java.util.LinkedHashMap: void <init>(java.util.Map)>($r0);

        $r0 = (java.util.Map) r1;

        return $r0;
    }

    private static final kotlin.Pair toPair(java.util.Map$Entry)
    {
        java.util.Map$Entry $r0;
        kotlin.Pair $r1;
        java.lang.Object $r2, $r3;

        $r0 := @parameter0: java.util.Map$Entry;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = new kotlin.Pair;

        $r2 = interfaceinvoke $r0.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r3 = interfaceinvoke $r0.<java.util.Map$Entry: java.lang.Object getValue()>();

        specialinvoke $r1.<kotlin.Pair: void <init>(java.lang.Object,java.lang.Object)>($r2, $r3);

        return $r1;
    }

