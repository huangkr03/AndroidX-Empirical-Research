org.junit.Assert
    public static void assertEquals(long, long)
    {
        long $l0, $l1;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>(null, $l0, $l1);

        return;
    }

    public static void assertEquals(java.lang.String, long, long)
    {
        java.lang.String $r0;
        long $l0, $l1;
        byte $b2;
        java.lang.Long $r1, $r2;

        $r0 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        $l1 := @parameter2: long;

        $b2 = $l0 cmp $l1;

        if $b2 == 0 goto label1;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        staticinvoke <org.junit.Assert: void failNotEquals(java.lang.String,java.lang.Object,java.lang.Object)>($r0, $r1, $r2);

     label1:
        return;
    }

    public static void fail(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.AssertionError r1;
        java.lang.Throwable r2;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        r1 = new java.lang.AssertionError;

        specialinvoke r1.<java.lang.AssertionError: void <init>()>();

        r2 = (java.lang.Throwable) r1;

        throw r2;

     label1:
        r1 = new java.lang.AssertionError;

        specialinvoke r1.<java.lang.AssertionError: void <init>(java.lang.Object)>($r0);

        r2 = (java.lang.Throwable) r1;

        throw r2;
    }

    private static void failNotEquals(java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.String $r0;
        java.lang.Object $r1, $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        $r0 = staticinvoke <org.junit.Assert: java.lang.String format(java.lang.String,java.lang.Object,java.lang.Object)>($r0, $r1, $r2);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r0);

        return;
    }

    static java.lang.String format(java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.String $r0, $r3, $r4, $r5;
        java.lang.Object $r1, $r2;
        boolean $z0;
        int $i0, $i1;
        java.lang.StringBuilder $r6;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        $r3 = "";

        if $r0 == null goto label1;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 != 0 goto label1;

        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0);

        $r3 = virtualinvoke $r0.<java.lang.String: java.lang.String concat(java.lang.String)>(" ");

     label1:
        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label2;

        $r4 = staticinvoke <org.junit.Assert: java.lang.String formatClassAndValue(java.lang.Object,java.lang.String)>($r1, $r4);

        $r0 = staticinvoke <org.junit.Assert: java.lang.String formatClassAndValue(java.lang.Object,java.lang.String)>($r2, $r0);

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i0 = $i0 + 20;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0);

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but was: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;

     label2:
        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i0 = $i0 + 22;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0);

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected:<");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> but was:<");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r0 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;
    }

    private static java.lang.String formatClassAndValue(java.lang.Object, java.lang.String)
    {
        java.lang.Object $r0;
        java.lang.String $r1, $r2, $r3;
        int $i0, $i1;
        java.lang.StringBuilder $r4;
        java.lang.Class $r5;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.String;

        if $r0 != null goto label2;

        $r2 = "null";

     label1:
        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i0 = $i0 + 2;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;

     label2:
        $r5 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        goto label1;
    }

