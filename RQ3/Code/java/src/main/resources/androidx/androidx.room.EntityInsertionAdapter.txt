androidx.room.EntityInsertionAdapter
    public void <init>(androidx.room.RoomDatabase)
    {
        androidx.room.EntityInsertionAdapter r0;
        androidx.room.RoomDatabase r1;

        r0 := @this: androidx.room.EntityInsertionAdapter;

        r1 := @parameter0: androidx.room.RoomDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "database");

        specialinvoke r0.<androidx.room.SharedSQLiteStatement: void <init>(androidx.room.RoomDatabase)>(r1);

        return;
    }

<androidx.room.EntityInsertionAdapter: void bind(androidx.sqlite.db.SupportSQLiteStatement,java.lang.Object)>
    public final void insert(java.lang.Object)
    {
        androidx.room.EntityInsertionAdapter r0;
        java.lang.Object r1;
        androidx.sqlite.db.SupportSQLiteStatement r2;
        java.lang.Throwable r3, $r4;

        r0 := @this: androidx.room.EntityInsertionAdapter;

        r1 := @parameter0: java.lang.Object;

        r2 = virtualinvoke r0.<androidx.room.EntityInsertionAdapter: androidx.sqlite.db.SupportSQLiteStatement acquire()>();

     label1:
        virtualinvoke r0.<androidx.room.EntityInsertionAdapter: void bind(androidx.sqlite.db.SupportSQLiteStatement,java.lang.Object)>(r2, r1);

        interfaceinvoke r2.<androidx.sqlite.db.SupportSQLiteStatement: long executeInsert()>();

     label2:
        virtualinvoke r0.<androidx.room.EntityInsertionAdapter: void release(androidx.sqlite.db.SupportSQLiteStatement)>(r2);

        goto label5;

     label3:
        $r4 := @caughtexception;

        r3 = $r4;

     label4:
        virtualinvoke r0.<androidx.room.EntityInsertionAdapter: void release(androidx.sqlite.db.SupportSQLiteStatement)>(r2);

        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public final void insert(java.lang.Object[])
    {
        androidx.room.EntityInsertionAdapter r0;
        java.lang.Object[] r1;
        androidx.sqlite.db.SupportSQLiteStatement r2;
        int i0, i2;
        java.lang.Object r3, r4;
        java.lang.Throwable $r5;

        r0 := @this: androidx.room.EntityInsertionAdapter;

        r1 := @parameter0: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "entities");

        r2 = virtualinvoke r0.<androidx.room.EntityInsertionAdapter: androidx.sqlite.db.SupportSQLiteStatement acquire()>();

     label1:
        i2 = 0;

        i0 = lengthof r1;

     label2:
        if i2 >= i0 goto label3;

        r3 = r1[i2];

        r4 = r3;

        virtualinvoke r0.<androidx.room.EntityInsertionAdapter: void bind(androidx.sqlite.db.SupportSQLiteStatement,java.lang.Object)>(r2, r4);

        interfaceinvoke r2.<androidx.sqlite.db.SupportSQLiteStatement: long executeInsert()>();

        i2 = i2 + 1;

        goto label2;

     label3:
        virtualinvoke r0.<androidx.room.EntityInsertionAdapter: void release(androidx.sqlite.db.SupportSQLiteStatement)>(r2);

        goto label6;

     label4:
        $r5 := @caughtexception;

     label5:
        virtualinvoke r0.<androidx.room.EntityInsertionAdapter: void release(androidx.sqlite.db.SupportSQLiteStatement)>(r2);

        throw $r5;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public final void insert(java.lang.Iterable)
    {
        androidx.room.EntityInsertionAdapter r0;
        java.lang.Iterable r1;
        androidx.sqlite.db.SupportSQLiteStatement r2;
        java.util.Iterator r3;
        java.lang.Object r4, r5;
        boolean $z2;
        java.lang.Throwable $r6;

        r0 := @this: androidx.room.EntityInsertionAdapter;

        r1 := @parameter0: java.lang.Iterable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "entities");

        r2 = virtualinvoke r0.<androidx.room.EntityInsertionAdapter: androidx.sqlite.db.SupportSQLiteStatement acquire()>();

     label1:
        r3 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = r4;

        virtualinvoke r0.<androidx.room.EntityInsertionAdapter: void bind(androidx.sqlite.db.SupportSQLiteStatement,java.lang.Object)>(r2, r5);

        interfaceinvoke r2.<androidx.sqlite.db.SupportSQLiteStatement: long executeInsert()>();

        goto label2;

     label3:
        virtualinvoke r0.<androidx.room.EntityInsertionAdapter: void release(androidx.sqlite.db.SupportSQLiteStatement)>(r2);

        goto label6;

     label4:
        $r6 := @caughtexception;

     label5:
        virtualinvoke r0.<androidx.room.EntityInsertionAdapter: void release(androidx.sqlite.db.SupportSQLiteStatement)>(r2);

        throw $r6;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public final long insertAndReturnId(java.lang.Object)
    {
        androidx.room.EntityInsertionAdapter r0;
        java.lang.Object r1;
        androidx.sqlite.db.SupportSQLiteStatement r2;
        long l0;
        java.lang.Throwable r3, $r4;

        r0 := @this: androidx.room.EntityInsertionAdapter;

        r1 := @parameter0: java.lang.Object;

        r2 = virtualinvoke r0.<androidx.room.EntityInsertionAdapter: androidx.sqlite.db.SupportSQLiteStatement acquire()>();

     label1:
        virtualinvoke r0.<androidx.room.EntityInsertionAdapter: void bind(androidx.sqlite.db.SupportSQLiteStatement,java.lang.Object)>(r2, r1);

        l0 = interfaceinvoke r2.<androidx.sqlite.db.SupportSQLiteStatement: long executeInsert()>();

     label2:
        virtualinvoke r0.<androidx.room.EntityInsertionAdapter: void release(androidx.sqlite.db.SupportSQLiteStatement)>(r2);

        goto label5;

     label3:
        $r4 := @caughtexception;

        r3 = $r4;

     label4:
        virtualinvoke r0.<androidx.room.EntityInsertionAdapter: void release(androidx.sqlite.db.SupportSQLiteStatement)>(r2);

        throw r3;

     label5:
        return l0;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public final long[] insertAndReturnIdsArray(java.util.Collection)
    {
        androidx.room.EntityInsertionAdapter r0;
        java.util.Collection r1;
        androidx.sqlite.db.SupportSQLiteStatement r2;
        java.util.Iterator r3;
        java.lang.Object r4, r5;
        int i0, i1, $i2, $i3, i5;
        boolean $z2;
        long $l4;
        java.lang.Throwable $r6;
        long[] r7, r9;
        java.lang.Iterable $r8;

        r0 := @this: androidx.room.EntityInsertionAdapter;

        r1 := @parameter0: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "entities");

        r2 = virtualinvoke r0.<androidx.room.EntityInsertionAdapter: androidx.sqlite.db.SupportSQLiteStatement acquire()>();

     label1:
        $i2 = interfaceinvoke r1.<java.util.Collection: int size()>();

        r7 = newarray (long)[$i2];

        $r8 = (java.lang.Iterable) r1;

        i5 = 0;

        r3 = interfaceinvoke $r8.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $i3 = i5;

        i5 = i5 + 1;

        i0 = $i3;

        if i0 >= 0 goto label3;

        staticinvoke <kotlin.collections.CollectionsKt: void throwIndexOverflow()>();

     label3:
        r5 = r4;

        i1 = i0;

        virtualinvoke r0.<androidx.room.EntityInsertionAdapter: void bind(androidx.sqlite.db.SupportSQLiteStatement,java.lang.Object)>(r2, r5);

        $l4 = interfaceinvoke r2.<androidx.sqlite.db.SupportSQLiteStatement: long executeInsert()>();

        r7[i1] = $l4;

        goto label2;

     label4:
        r9 = r7;

     label5:
        virtualinvoke r0.<androidx.room.EntityInsertionAdapter: void release(androidx.sqlite.db.SupportSQLiteStatement)>(r2);

        goto label8;

     label6:
        $r6 := @caughtexception;

     label7:
        virtualinvoke r0.<androidx.room.EntityInsertionAdapter: void release(androidx.sqlite.db.SupportSQLiteStatement)>(r2);

        throw $r6;

     label8:
        return r9;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public final long[] insertAndReturnIdsArray(java.lang.Object[])
    {
        androidx.room.EntityInsertionAdapter r0;
        java.lang.Object[] r1;
        androidx.sqlite.db.SupportSQLiteStatement r2;
        int i0, i1, $i2, $i3, i5, i6;
        java.lang.Object r3, r4;
        long $l4;
        java.lang.Throwable $r5;
        long[] r6, r8;

        r0 := @this: androidx.room.EntityInsertionAdapter;

        r1 := @parameter0: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "entities");

        r2 = virtualinvoke r0.<androidx.room.EntityInsertionAdapter: androidx.sqlite.db.SupportSQLiteStatement acquire()>();

     label1:
        $i2 = lengthof r1;

        r6 = newarray (long)[$i2];

        i5 = 0;

        i6 = 0;

        i0 = lengthof r1;

     label2:
        if i6 >= i0 goto label3;

        r3 = r1[i6];

        $i3 = i5;

        i5 = i5 + 1;

        r4 = r3;

        i1 = $i3;

        virtualinvoke r0.<androidx.room.EntityInsertionAdapter: void bind(androidx.sqlite.db.SupportSQLiteStatement,java.lang.Object)>(r2, r4);

        $l4 = interfaceinvoke r2.<androidx.sqlite.db.SupportSQLiteStatement: long executeInsert()>();

        r6[i1] = $l4;

        i6 = i6 + 1;

        goto label2;

     label3:
        r8 = r6;

     label4:
        virtualinvoke r0.<androidx.room.EntityInsertionAdapter: void release(androidx.sqlite.db.SupportSQLiteStatement)>(r2);

        goto label7;

     label5:
        $r5 := @caughtexception;

     label6:
        virtualinvoke r0.<androidx.room.EntityInsertionAdapter: void release(androidx.sqlite.db.SupportSQLiteStatement)>(r2);

        throw $r5;

     label7:
        return r8;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public final java.lang.Long[] insertAndReturnIdsArrayBox(java.util.Collection)
    {
        androidx.room.EntityInsertionAdapter r0;
        java.util.Collection r1;
        androidx.sqlite.db.SupportSQLiteStatement r2;
        java.util.Iterator r3;
        int i0, i1, i3;
        java.lang.Long[] r4, r8, r9;
        java.lang.Object r5;
        long $l2;
        java.lang.Long $r6;
        java.lang.Throwable $r7, r10;

        r0 := @this: androidx.room.EntityInsertionAdapter;

        r1 := @parameter0: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "entities");

        r2 = virtualinvoke r0.<androidx.room.EntityInsertionAdapter: androidx.sqlite.db.SupportSQLiteStatement acquire()>();

        r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        i3 = 0;

        i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        r4 = newarray (java.lang.Long)[i0];

     label2:
        if i3 >= i0 goto label3;

        i1 = i3;

        r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r0.<androidx.room.EntityInsertionAdapter: void bind(androidx.sqlite.db.SupportSQLiteStatement,java.lang.Object)>(r2, r5);

        $l2 = interfaceinvoke r2.<androidx.sqlite.db.SupportSQLiteStatement: long executeInsert()>();

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        r4[i1] = $r6;

        i3 = i3 + 1;

        goto label2;

     label3:
        r8 = r4;

        r9 = r8;

     label4:
        virtualinvoke r0.<androidx.room.EntityInsertionAdapter: void release(androidx.sqlite.db.SupportSQLiteStatement)>(r2);

        goto label7;

     label5:
        $r7 := @caughtexception;

        r10 = $r7;

     label6:
        virtualinvoke r0.<androidx.room.EntityInsertionAdapter: void release(androidx.sqlite.db.SupportSQLiteStatement)>(r2);

        throw r10;

     label7:
        return r9;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public final java.lang.Long[] insertAndReturnIdsArrayBox(java.lang.Object[])
    {
        androidx.room.EntityInsertionAdapter r0;
        java.lang.Object[] r1;
        androidx.sqlite.db.SupportSQLiteStatement r2;
        java.util.Iterator r3;
        int i0, i1, i3;
        java.lang.Long[] r4, r8, r9;
        java.lang.Object r5;
        long $l2;
        java.lang.Long $r6;
        java.lang.Throwable $r7, r10;

        r0 := @this: androidx.room.EntityInsertionAdapter;

        r1 := @parameter0: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "entities");

        r2 = virtualinvoke r0.<androidx.room.EntityInsertionAdapter: androidx.sqlite.db.SupportSQLiteStatement acquire()>();

        r3 = staticinvoke <kotlin.jvm.internal.ArrayIteratorKt: java.util.Iterator iterator(java.lang.Object[])>(r1);

     label1:
        i3 = 0;

        i0 = lengthof r1;

        r4 = newarray (java.lang.Long)[i0];

     label2:
        if i3 >= i0 goto label3;

        i1 = i3;

        r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r0.<androidx.room.EntityInsertionAdapter: void bind(androidx.sqlite.db.SupportSQLiteStatement,java.lang.Object)>(r2, r5);

        $l2 = interfaceinvoke r2.<androidx.sqlite.db.SupportSQLiteStatement: long executeInsert()>();

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        r4[i1] = $r6;

        i3 = i3 + 1;

        goto label2;

     label3:
        r8 = r4;

        r9 = r8;

     label4:
        virtualinvoke r0.<androidx.room.EntityInsertionAdapter: void release(androidx.sqlite.db.SupportSQLiteStatement)>(r2);

        goto label7;

     label5:
        $r7 := @caughtexception;

        r10 = $r7;

     label6:
        virtualinvoke r0.<androidx.room.EntityInsertionAdapter: void release(androidx.sqlite.db.SupportSQLiteStatement)>(r2);

        throw r10;

     label7:
        return r9;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public final java.util.List insertAndReturnIdsList(java.lang.Object[])
    {
        androidx.room.EntityInsertionAdapter r0;
        java.lang.Object[] r1;
        androidx.sqlite.db.SupportSQLiteStatement r2;
        int i0, i2;
        java.lang.Object r4, r5;
        long $l1;
        java.lang.Long $r6;
        java.lang.Throwable $r7;
        java.util.List r8, r10;

        r0 := @this: androidx.room.EntityInsertionAdapter;

        r1 := @parameter0: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "entities");

        r2 = virtualinvoke r0.<androidx.room.EntityInsertionAdapter: androidx.sqlite.db.SupportSQLiteStatement acquire()>();

     label1:
        r8 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List createListBuilder()>();

        i2 = 0;

        i0 = lengthof r1;

     label2:
        if i2 >= i0 goto label3;

        r4 = r1[i2];

        r5 = r4;

        virtualinvoke r0.<androidx.room.EntityInsertionAdapter: void bind(androidx.sqlite.db.SupportSQLiteStatement,java.lang.Object)>(r2, r5);

        $l1 = interfaceinvoke r2.<androidx.sqlite.db.SupportSQLiteStatement: long executeInsert()>();

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        interfaceinvoke r8.<java.util.List: boolean add(java.lang.Object)>($r6);

        i2 = i2 + 1;

        goto label2;

     label3:
        r10 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List build(java.util.List)>(r8);

     label4:
        virtualinvoke r0.<androidx.room.EntityInsertionAdapter: void release(androidx.sqlite.db.SupportSQLiteStatement)>(r2);

        goto label7;

     label5:
        $r7 := @caughtexception;

     label6:
        virtualinvoke r0.<androidx.room.EntityInsertionAdapter: void release(androidx.sqlite.db.SupportSQLiteStatement)>(r2);

        throw $r7;

     label7:
        return r10;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public final java.util.List insertAndReturnIdsList(java.util.Collection)
    {
        androidx.room.EntityInsertionAdapter r0;
        java.util.Collection r1;
        androidx.sqlite.db.SupportSQLiteStatement r2;
        java.lang.Iterable $r3;
        java.util.Iterator r4;
        java.lang.Object r5, r6;
        boolean $z3;
        long $l0;
        java.lang.Long $r7;
        java.lang.Throwable $r8;
        java.util.List r9, r11;

        r0 := @this: androidx.room.EntityInsertionAdapter;

        r1 := @parameter0: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "entities");

        r2 = virtualinvoke r0.<androidx.room.EntityInsertionAdapter: androidx.sqlite.db.SupportSQLiteStatement acquire()>();

     label1:
        r9 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List createListBuilder()>();

        $r3 = (java.lang.Iterable) r1;

        r4 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label3;

        r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = r5;

        virtualinvoke r0.<androidx.room.EntityInsertionAdapter: void bind(androidx.sqlite.db.SupportSQLiteStatement,java.lang.Object)>(r2, r6);

        $l0 = interfaceinvoke r2.<androidx.sqlite.db.SupportSQLiteStatement: long executeInsert()>();

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        interfaceinvoke r9.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label2;

     label3:
        r11 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List build(java.util.List)>(r9);

     label4:
        virtualinvoke r0.<androidx.room.EntityInsertionAdapter: void release(androidx.sqlite.db.SupportSQLiteStatement)>(r2);

        goto label7;

     label5:
        $r8 := @caughtexception;

     label6:
        virtualinvoke r0.<androidx.room.EntityInsertionAdapter: void release(androidx.sqlite.db.SupportSQLiteStatement)>(r2);

        throw $r8;

     label7:
        return r11;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

