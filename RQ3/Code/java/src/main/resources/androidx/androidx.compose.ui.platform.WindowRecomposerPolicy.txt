androidx.compose.ui.platform.WindowRecomposerPolicy
<androidx.compose.ui.platform.WindowRecomposerPolicy: androidx.compose.ui.platform.WindowRecomposerPolicy INSTANCE>
<androidx.compose.ui.platform.WindowRecomposerPolicy: java.util.concurrent.atomic.AtomicReference factory>
<androidx.compose.ui.platform.WindowRecomposerPolicy: int $stable>
    private void <init>()
    {
        androidx.compose.ui.platform.WindowRecomposerPolicy r0;

        r0 := @this: androidx.compose.ui.platform.WindowRecomposerPolicy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final androidx.compose.ui.platform.WindowRecomposerFactory getAndSetFactory(androidx.compose.ui.platform.WindowRecomposerFactory)
    {
        androidx.compose.ui.platform.WindowRecomposerPolicy r0;
        androidx.compose.ui.platform.WindowRecomposerFactory r1, $r4;
        java.util.concurrent.atomic.AtomicReference $r2;
        java.lang.Object $r3;

        r0 := @this: androidx.compose.ui.platform.WindowRecomposerPolicy;

        r1 := @parameter0: androidx.compose.ui.platform.WindowRecomposerFactory;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "factory");

        $r2 = <androidx.compose.ui.platform.WindowRecomposerPolicy: java.util.concurrent.atomic.AtomicReference factory>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "factory.getAndSet(factory)");

        $r4 = (androidx.compose.ui.platform.WindowRecomposerFactory) $r3;

        return $r4;
    }

    public final boolean compareAndSetFactory(androidx.compose.ui.platform.WindowRecomposerFactory, androidx.compose.ui.platform.WindowRecomposerFactory)
    {
        androidx.compose.ui.platform.WindowRecomposerPolicy r0;
        androidx.compose.ui.platform.WindowRecomposerFactory r1, r2;
        java.util.concurrent.atomic.AtomicReference $r3;
        boolean $z0;

        r0 := @this: androidx.compose.ui.platform.WindowRecomposerPolicy;

        r1 := @parameter0: androidx.compose.ui.platform.WindowRecomposerFactory;

        r2 := @parameter1: androidx.compose.ui.platform.WindowRecomposerFactory;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "expected");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "factory");

        $r3 = <androidx.compose.ui.platform.WindowRecomposerPolicy: java.util.concurrent.atomic.AtomicReference factory>;

        $z0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(r1, r2);

        return $z0;
    }

    public final void setFactory(androidx.compose.ui.platform.WindowRecomposerFactory)
    {
        androidx.compose.ui.platform.WindowRecomposerPolicy r0;
        androidx.compose.ui.platform.WindowRecomposerFactory r1;
        java.util.concurrent.atomic.AtomicReference $r2;

        r0 := @this: androidx.compose.ui.platform.WindowRecomposerPolicy;

        r1 := @parameter0: androidx.compose.ui.platform.WindowRecomposerFactory;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "factory");

        $r2 = <androidx.compose.ui.platform.WindowRecomposerPolicy: java.util.concurrent.atomic.AtomicReference factory>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(r1);

        return;
    }

    public final java.lang.Object withFactory(androidx.compose.ui.platform.WindowRecomposerFactory, kotlin.jvm.functions.Function0)
    {
        androidx.compose.ui.platform.WindowRecomposerPolicy r0;
        androidx.compose.ui.platform.WindowRecomposerFactory r1, r3;
        kotlin.jvm.functions.Function0 r2;
        java.lang.Object r4;
        java.lang.IllegalStateException r5, $r6, $r8, r11;
        boolean $z0, $z1;
        java.lang.Throwable $r7, $r9, $r10, r12, r13, r14;

        r0 := @this: androidx.compose.ui.platform.WindowRecomposerPolicy;

        r1 := @parameter0: androidx.compose.ui.platform.WindowRecomposerFactory;

        r2 := @parameter1: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "factory");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "block");

        r3 = virtualinvoke r0.<androidx.compose.ui.platform.WindowRecomposerPolicy: androidx.compose.ui.platform.WindowRecomposerFactory getAndSetFactory(androidx.compose.ui.platform.WindowRecomposerFactory)>(r1);

     label1:
        r4 = interfaceinvoke r2.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

     label2:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        $z0 = virtualinvoke r0.<androidx.compose.ui.platform.WindowRecomposerPolicy: boolean compareAndSetFactory(androidx.compose.ui.platform.WindowRecomposerFactory,androidx.compose.ui.platform.WindowRecomposerFactory)>(r1, r3);

        if $z0 != 0 goto label3;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("WindowRecomposerFactory was set to unexpected value; cannot safely restore old state");

        r11 = $r6;

        throw r11;

     label3:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        goto label9;

     label4:
        $r10 := @caughtexception;

        r12 = $r10;

        r13 = r12;

        throw r12;

     label5:
        $r7 := @caughtexception;

        r14 = $r7;

     label6:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        $z1 = virtualinvoke r0.<androidx.compose.ui.platform.WindowRecomposerPolicy: boolean compareAndSetFactory(androidx.compose.ui.platform.WindowRecomposerFactory,androidx.compose.ui.platform.WindowRecomposerFactory)>(r1, r3);

        if $z1 != 0 goto label8;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("WindowRecomposerFactory was set to unexpected value; cannot safely restore old state");

        r5 = $r8;

        if r13 != null goto label7;

        throw r5;

     label7:
        $r9 = (java.lang.Throwable) r5;

        staticinvoke <kotlin.ExceptionsKt: void addSuppressed(java.lang.Throwable,java.lang.Throwable)>(r13, $r9);

        throw r13;

     label8:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw r14;

     label9:
        return r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label4 to label5 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public final androidx.compose.runtime.Recomposer createAndInstallWindowRecomposer$ui_release(android.view.View)
    {
        androidx.compose.ui.platform.WindowRecomposerPolicy r0;
        android.view.View r1;
        androidx.compose.runtime.Recomposer r2;
        kotlinx.coroutines.Job r3;
        java.util.concurrent.atomic.AtomicReference $r4;
        java.lang.Object $r5;
        androidx.compose.ui.platform.WindowRecomposerFactory $r6;
        androidx.compose.runtime.CompositionContext $r7;
        kotlinx.coroutines.GlobalScope $r8;
        kotlinx.coroutines.CoroutineScope $r9;
        android.os.Handler $r10;
        kotlinx.coroutines.android.HandlerDispatcher $r11, $r12;
        androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$unsetJob$1 $r13;
        kotlin.coroutines.CoroutineContext $r14;
        kotlin.jvm.functions.Function2 $r15;
        androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$1 $r16;
        android.view.View$OnAttachStateChangeListener $r17;

        r0 := @this: androidx.compose.ui.platform.WindowRecomposerPolicy;

        r1 := @parameter0: android.view.View;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "rootView");

        $r4 = <androidx.compose.ui.platform.WindowRecomposerPolicy: java.util.concurrent.atomic.AtomicReference factory>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r6 = (androidx.compose.ui.platform.WindowRecomposerFactory) $r5;

        r2 = interfaceinvoke $r6.<androidx.compose.ui.platform.WindowRecomposerFactory: androidx.compose.runtime.Recomposer createRecomposer(android.view.View)>(r1);

        $r7 = (androidx.compose.runtime.CompositionContext) r2;

        staticinvoke <androidx.compose.ui.platform.WindowRecomposer_androidKt: void setCompositionContext(android.view.View,androidx.compose.runtime.CompositionContext)>(r1, $r7);

        $r8 = <kotlinx.coroutines.GlobalScope: kotlinx.coroutines.GlobalScope INSTANCE>;

        $r9 = (kotlinx.coroutines.CoroutineScope) $r8;

        $r10 = virtualinvoke r1.<android.view.View: android.os.Handler getHandler()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r10, "rootView.handler");

        $r11 = staticinvoke <kotlinx.coroutines.android.HandlerDispatcherKt: kotlinx.coroutines.android.HandlerDispatcher 'from'(android.os.Handler,java.lang.String)>($r10, "windowRecomposer cleanup");

        $r12 = virtualinvoke $r11.<kotlinx.coroutines.android.HandlerDispatcher: kotlinx.coroutines.android.HandlerDispatcher getImmediate()>();

        $r14 = (kotlin.coroutines.CoroutineContext) $r12;

        $r13 = new androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$unsetJob$1;

        specialinvoke $r13.<androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$unsetJob$1: void <init>(androidx.compose.runtime.Recomposer,android.view.View,kotlin.coroutines.Continuation)>(r2, r1, null);

        $r15 = (kotlin.jvm.functions.Function2) $r13;

        r3 = staticinvoke <kotlinx.coroutines.BuildersKt: kotlinx.coroutines.Job launch$default(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2,int,java.lang.Object)>($r9, $r14, null, $r15, 2, null);

        $r16 = new androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$1;

        specialinvoke $r16.<androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$1: void <init>(kotlinx.coroutines.Job)>(r3);

        $r17 = (android.view.View$OnAttachStateChangeListener) $r16;

        virtualinvoke r1.<android.view.View: void addOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)>($r17);

        return r2;
    }

    static void <clinit>()
    {
        androidx.compose.ui.platform.WindowRecomposerPolicy $r0;
        java.util.concurrent.atomic.AtomicReference $r1;
        androidx.compose.ui.platform.WindowRecomposerFactory$Companion $r2;
        androidx.compose.ui.platform.WindowRecomposerFactory $r3;

        $r0 = new androidx.compose.ui.platform.WindowRecomposerPolicy;

        specialinvoke $r0.<androidx.compose.ui.platform.WindowRecomposerPolicy: void <init>()>();

        <androidx.compose.ui.platform.WindowRecomposerPolicy: androidx.compose.ui.platform.WindowRecomposerPolicy INSTANCE> = $r0;

        $r1 = new java.util.concurrent.atomic.AtomicReference;

        $r2 = <androidx.compose.ui.platform.WindowRecomposerFactory: androidx.compose.ui.platform.WindowRecomposerFactory$Companion Companion>;

        $r3 = virtualinvoke $r2.<androidx.compose.ui.platform.WindowRecomposerFactory$Companion: androidx.compose.ui.platform.WindowRecomposerFactory getLifecycleAware()>();

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>($r3);

        <androidx.compose.ui.platform.WindowRecomposerPolicy: java.util.concurrent.atomic.AtomicReference factory> = $r1;

        <androidx.compose.ui.platform.WindowRecomposerPolicy: int $stable> = 8;

        return;
    }

androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$1
<androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$1: kotlinx.coroutines.Job $unsetJob>
    void <init>(kotlinx.coroutines.Job)
    {
        androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$1 r0;
        kotlinx.coroutines.Job $r1;

        r0 := @this: androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$1;

        $r1 := @parameter0: kotlinx.coroutines.Job;

        r0.<androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$1: kotlinx.coroutines.Job $unsetJob> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onViewAttachedToWindow(android.view.View)
    {
        androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$1 r0;
        android.view.View r1;

        r0 := @this: androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$1;

        r1 := @parameter0: android.view.View;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "v");

        return;
    }

    public void onViewDetachedFromWindow(android.view.View)
    {
        androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$1 r0;
        android.view.View r1;
        android.view.View$OnAttachStateChangeListener $r2;
        kotlinx.coroutines.Job $r3;

        r0 := @this: androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$1;

        r1 := @parameter0: android.view.View;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "v");

        $r2 = (android.view.View$OnAttachStateChangeListener) r0;

        virtualinvoke r1.<android.view.View: void removeOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)>($r2);

        $r3 = r0.<androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$1: kotlinx.coroutines.Job $unsetJob>;

        staticinvoke <kotlinx.coroutines.Job$DefaultImpls: void cancel$default(kotlinx.coroutines.Job,java.util.concurrent.CancellationException,int,java.lang.Object)>($r3, null, 1, null);

        return;
    }

androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$unsetJob$1
<androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$unsetJob$1: int label>
<androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$unsetJob$1: androidx.compose.runtime.Recomposer $newRecomposer>
<androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$unsetJob$1: android.view.View $rootView>
    void <init>(androidx.compose.runtime.Recomposer, android.view.View, kotlin.coroutines.Continuation)
    {
        androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$unsetJob$1 r0;
        androidx.compose.runtime.Recomposer $r1;
        android.view.View $r2;
        kotlin.coroutines.Continuation $r3;

        r0 := @this: androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$unsetJob$1;

        $r1 := @parameter0: androidx.compose.runtime.Recomposer;

        $r2 := @parameter1: android.view.View;

        $r3 := @parameter2: kotlin.coroutines.Continuation;

        r0.<androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$unsetJob$1: androidx.compose.runtime.Recomposer $newRecomposer> = $r1;

        r0.<androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$unsetJob$1: android.view.View $rootView> = $r2;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r3);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$unsetJob$1 r0;
        java.lang.Object $r1, r3, $r10;
        androidx.compose.runtime.CompositionContext r2, r16;
        int $i0;
        android.view.View $r4, $r7, $r13, $r15;
        androidx.compose.runtime.Recomposer $r5, $r8, $r14;
        kotlin.Unit $r6;
        kotlin.coroutines.Continuation $r9;
        java.lang.IllegalStateException $r11;
        java.lang.Throwable $r12, r17;

        r0 := @this: androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$unsetJob$1;

        $r1 := @parameter0: java.lang.Object;

        r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$unsetJob$1: int label>;

        tableswitch($i0)
        {
            case 0: goto label01;
            case 1: goto label04;
            default: goto label11;
        };

     label01:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label02:
        $r8 = r0.<androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$unsetJob$1: androidx.compose.runtime.Recomposer $newRecomposer>;

        $r9 = (kotlin.coroutines.Continuation) r0;

        r0.<androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$unsetJob$1: int label> = 1;

        $r10 = virtualinvoke $r8.<androidx.compose.runtime.Recomposer: java.lang.Object join(kotlin.coroutines.Continuation)>($r9);

     label03:
        if $r10 != r3 goto label05;

        return r3;

     label04:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label05:
        $r4 = r0.<androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$unsetJob$1: android.view.View $rootView>;

        r16 = staticinvoke <androidx.compose.ui.platform.WindowRecomposer_androidKt: androidx.compose.runtime.CompositionContext getCompositionContext(android.view.View)>($r4);

        $r5 = r0.<androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$unsetJob$1: androidx.compose.runtime.Recomposer $newRecomposer>;

        if r16 != $r5 goto label06;

        $r7 = r0.<androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$unsetJob$1: android.view.View $rootView>;

        staticinvoke <androidx.compose.ui.platform.WindowRecomposer_androidKt: void setCompositionContext(android.view.View,androidx.compose.runtime.CompositionContext)>($r7, null);

     label06:
        goto label10;

     label07:
        $r12 := @caughtexception;

        r17 = $r12;

     label08:
        $r13 = r0.<androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$unsetJob$1: android.view.View $rootView>;

        r2 = staticinvoke <androidx.compose.ui.platform.WindowRecomposer_androidKt: androidx.compose.runtime.CompositionContext getCompositionContext(android.view.View)>($r13);

        $r14 = r0.<androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$unsetJob$1: androidx.compose.runtime.Recomposer $newRecomposer>;

        if r2 != $r14 goto label09;

        $r15 = r0.<androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$unsetJob$1: android.view.View $rootView>;

        staticinvoke <androidx.compose.ui.platform.WindowRecomposer_androidKt: void setCompositionContext(android.view.View,androidx.compose.runtime.CompositionContext)>($r15, null);

     label09:
        throw r17;

     label10:
        $r6 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r6;

     label11:
        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r11;

        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$unsetJob$1 r0, $r3;
        java.lang.Object r1;
        kotlin.coroutines.Continuation $r2, $r6;
        android.view.View $r4;
        androidx.compose.runtime.Recomposer $r5;

        r0 := @this: androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$unsetJob$1;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = new androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$unsetJob$1;

        $r5 = r0.<androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$unsetJob$1: androidx.compose.runtime.Recomposer $newRecomposer>;

        $r4 = r0.<androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$unsetJob$1: android.view.View $rootView>;

        specialinvoke $r3.<androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$unsetJob$1: void <init>(androidx.compose.runtime.Recomposer,android.view.View,kotlin.coroutines.Continuation)>($r5, $r4, $r2);

        $r6 = (kotlin.coroutines.Continuation) $r3;

        return $r6;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.Continuation)
    {
        androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$unsetJob$1 r0, $r5;
        kotlinx.coroutines.CoroutineScope r1;
        kotlin.coroutines.Continuation r2, $r3;
        kotlin.Unit $r4;
        java.lang.Object $r6;

        r0 := @this: androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$unsetJob$1;

        r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = virtualinvoke r0.<androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$unsetJob$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, r2);

        $r5 = (androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$unsetJob$1) $r3;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$unsetJob$1: java.lang.Object invokeSuspend(java.lang.Object)>($r4);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$unsetJob$1 r0;
        java.lang.Object r1, r2, $r5;
        kotlin.coroutines.Continuation $r3;
        kotlinx.coroutines.CoroutineScope $r4;

        r0 := @this: androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$unsetJob$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (kotlinx.coroutines.CoroutineScope) r1;

        $r3 = (kotlin.coroutines.Continuation) r2;

        $r5 = virtualinvoke r0.<androidx.compose.ui.platform.WindowRecomposerPolicy$createAndInstallWindowRecomposer$unsetJob$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)>($r4, $r3);

        return $r5;
    }

