androidx.room.compiler.processing.util.SourceFileAssertionsKt
    public static final androidx.room.compiler.processing.util.SourceFileMismatch findMismatch(androidx.room.compiler.processing.util.Source, androidx.room.compiler.processing.util.Source)
    {
        androidx.room.compiler.processing.util.Source $r0, r1;
        java.util.Iterator r2, r3;
        androidx.room.compiler.processing.util.Line r4, r5;
        java.lang.String $r6, $r9, $r13, $r19, $r20;
        java.lang.CharSequence $r7, $r10;
        kotlin.sequences.Sequence $r8, $r11;
        androidx.room.compiler.processing.util.SourceFileMismatch $r12;
        java.lang.Object $r15, $r16;
        boolean $z0;

        $r0 := @parameter0: androidx.room.compiler.processing.util.Source;

        r1 := @parameter1: androidx.room.compiler.processing.util.Source;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "other");

        $r6 = virtualinvoke $r0.<androidx.room.compiler.processing.util.Source: java.lang.String getContents()>();

        $r7 = (java.lang.CharSequence) $r6;

        $r8 = staticinvoke <kotlin.text.StringsKt: kotlin.sequences.Sequence lineSequence(java.lang.CharSequence)>($r7);

        r2 = staticinvoke <androidx.room.compiler.processing.util.SourceFileAssertionsKt: java.util.Iterator nonEmptySourceLines(kotlin.sequences.Sequence)>($r8);

        $r9 = virtualinvoke r1.<androidx.room.compiler.processing.util.Source: java.lang.String getContents()>();

        $r10 = (java.lang.CharSequence) $r9;

        $r11 = staticinvoke <kotlin.text.StringsKt: kotlin.sequences.Sequence lineSequence(java.lang.CharSequence)>($r10);

        r3 = staticinvoke <androidx.room.compiler.processing.util.SourceFileAssertionsKt: java.util.Iterator nonEmptySourceLines(kotlin.sequences.Sequence)>($r11);

     label1:
        $r15 = staticinvoke <androidx.room.compiler.processing.util.SourceFileAssertionsKt: java.lang.Object nextOrNull(java.util.Iterator)>(r2);

        r4 = (androidx.room.compiler.processing.util.Line) $r15;

        $r16 = staticinvoke <androidx.room.compiler.processing.util.SourceFileAssertionsKt: java.lang.Object nextOrNull(java.util.Iterator)>(r3);

        r5 = (androidx.room.compiler.processing.util.Line) $r16;

        if r4 == null goto label2;

        $r13 = virtualinvoke r4.<androidx.room.compiler.processing.util.Line: java.lang.String getContent()>();

        $r19 = $r13;

        goto label3;

     label2:
        $r19 = null;

     label3:
        if r5 == null goto label4;

        $r20 = virtualinvoke r5.<androidx.room.compiler.processing.util.Line: java.lang.String getContent()>();

        goto label5;

     label4:
        $r20 = null;

     label5:
        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r19, $r20);

        if $z0 != 0 goto label6;

        $r12 = new androidx.room.compiler.processing.util.SourceFileMismatch;

        specialinvoke $r12.<androidx.room.compiler.processing.util.SourceFileMismatch: void <init>(androidx.room.compiler.processing.util.Line,androidx.room.compiler.processing.util.Line)>(r4, r5);

        return $r12;

     label6:
        if r4 != null goto label1;

        if r5 != null goto label1;

        return null;
    }

    private static final java.util.Iterator nonEmptySourceLines(kotlin.sequences.Sequence)
    {
        kotlin.sequences.Sequence $r0, $r3, $r6, $r9;
        androidx.room.compiler.processing.util.SourceFileAssertionsKt$nonEmptySourceLines$1 $r1;
        kotlin.jvm.functions.Function1 $r2, $r8;
        androidx.room.compiler.processing.util.SourceFileAssertionsKt$nonEmptySourceLines$2 $r4;
        kotlin.jvm.functions.Function2 $r5;
        androidx.room.compiler.processing.util.SourceFileAssertionsKt$nonEmptySourceLines$3 $r7;
        java.util.Iterator $r10;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 = <androidx.room.compiler.processing.util.SourceFileAssertionsKt$nonEmptySourceLines$1: androidx.room.compiler.processing.util.SourceFileAssertionsKt$nonEmptySourceLines$1 INSTANCE>;

        $r2 = (kotlin.jvm.functions.Function1) $r1;

        $r3 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence map(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1)>($r0, $r2);

        $r4 = <androidx.room.compiler.processing.util.SourceFileAssertionsKt$nonEmptySourceLines$2: androidx.room.compiler.processing.util.SourceFileAssertionsKt$nonEmptySourceLines$2 INSTANCE>;

        $r5 = (kotlin.jvm.functions.Function2) $r4;

        $r6 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence mapIndexed(kotlin.sequences.Sequence,kotlin.jvm.functions.Function2)>($r3, $r5);

        $r7 = <androidx.room.compiler.processing.util.SourceFileAssertionsKt$nonEmptySourceLines$3: androidx.room.compiler.processing.util.SourceFileAssertionsKt$nonEmptySourceLines$3 INSTANCE>;

        $r8 = (kotlin.jvm.functions.Function1) $r7;

        $r9 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence filterNot(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1)>($r6, $r8);

        $r10 = interfaceinvoke $r9.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        return $r10;
    }

    private static final java.lang.Object nextOrNull(java.util.Iterator)
    {
        java.util.Iterator $r0;
        boolean $z0;
        java.lang.Object $r1;

        $r0 := @parameter0: java.util.Iterator;

        $z0 = interfaceinvoke $r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r1 = interfaceinvoke $r0.<java.util.Iterator: java.lang.Object next()>();

        goto label2;

     label1:
        $r1 = null;

     label2:
        return $r1;
    }

