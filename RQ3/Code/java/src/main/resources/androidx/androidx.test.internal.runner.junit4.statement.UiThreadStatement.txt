androidx.test.internal.runner.junit4.statement.UiThreadStatement
<androidx.test.internal.runner.junit4.statement.UiThreadStatement: org.junit.runners.model.Statement base>
<androidx.test.internal.runner.junit4.statement.UiThreadStatement: boolean runOnUiThread>
    static volatile org.junit.runners.model.Statement '-$$Nest$fgetbase'(androidx.test.internal.runner.junit4.statement.UiThreadStatement)
    {
        androidx.test.internal.runner.junit4.statement.UiThreadStatement $r0;
        org.junit.runners.model.Statement r1;

        $r0 := @parameter0: androidx.test.internal.runner.junit4.statement.UiThreadStatement;

        r1 = $r0.<androidx.test.internal.runner.junit4.statement.UiThreadStatement: org.junit.runners.model.Statement base>;

        return r1;
    }

    public void <init>(org.junit.runners.model.Statement, boolean)
    {
        androidx.test.internal.runner.junit4.statement.UiThreadStatement $r0;
        org.junit.runners.model.Statement $r1;
        boolean $z0;

        $r0 := @this: androidx.test.internal.runner.junit4.statement.UiThreadStatement;

        $r1 := @parameter0: org.junit.runners.model.Statement;

        $z0 := @parameter1: boolean;

        specialinvoke $r0.<org.junit.runners.model.Statement: void <init>()>();

        $r0.<androidx.test.internal.runner.junit4.statement.UiThreadStatement: org.junit.runners.model.Statement base> = $r1;

        $r0.<androidx.test.internal.runner.junit4.statement.UiThreadStatement: boolean runOnUiThread> = $z0;

        return;
    }

    private static boolean classHasAnnotation(org.junit.runners.model.FrameworkMethod, java.lang.Class)
    {
        java.lang.Class $r0, $r2, $r3;
        int $i0, $i1;
        org.junit.runners.model.FrameworkMethod $r1;
        java.lang.Class[] $r4;
        boolean $z0;

        $r1 := @parameter0: org.junit.runners.model.FrameworkMethod;

        $r0 := @parameter1: java.lang.Class;

        $r2 = virtualinvoke $r1.<org.junit.runners.model.FrameworkMethod: java.lang.Class getDeclaringClass()>();

        $r3 = $r2;

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        $i0 = lengthof $r4;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $r2 = $r4[$i1];

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>($r0);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        if $r3 == null goto label5;

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>($r0);

        if $z0 == 0 goto label4;

        return 1;

     label4:
        $r3 = virtualinvoke $r3.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label3;

     label5:
        return 0;
    }

    private static boolean hasAnnotation(org.junit.runners.model.FrameworkMethod, java.lang.Class)
    {
        java.lang.Class $r0;
        org.junit.runners.model.FrameworkMethod $r1;
        java.lang.'annotation'.Annotation $r2;
        boolean $z0;

        $r1 := @parameter0: org.junit.runners.model.FrameworkMethod;

        $r0 := @parameter1: java.lang.Class;

        if $r0 == null goto label2;

        $r2 = virtualinvoke $r1.<org.junit.runners.model.FrameworkMethod: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>($r0);

        if $r2 != null goto label1;

        $z0 = staticinvoke <androidx.test.internal.runner.junit4.statement.UiThreadStatement: boolean classHasAnnotation(org.junit.runners.model.FrameworkMethod,java.lang.Class)>($r1, $r0);

        if $z0 == 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private static java.lang.Class loadUiThreadClass(java.lang.String)
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        $r1 := @parameter0: java.lang.String;

        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r1);

        return $r0;
    }

    public static void runOnUiThread(java.lang.Runnable) throws java.lang.Throwable
    {
        java.lang.Runnable $r0;
        android.os.Looper $r1, $r2;
        java.util.concurrent.FutureTask $r3, r6;
        android.app.Instrumentation $r4;
        java.lang.Throwable $r5;
        java.util.concurrent.ExecutionException r7;

        $r0 := @parameter0: java.lang.Runnable;

        $r1 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r2 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        if $r1 != $r2 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("UiThreadStatement", "Already on the UI thread, this method should not be called from the main application thread");

        interfaceinvoke $r0.<java.lang.Runnable: void run()>();

        return;

     label1:
        r6 = new java.util.concurrent.FutureTask;

        $r3 = r6;

        specialinvoke r6.<java.util.concurrent.FutureTask: void <init>(java.lang.Runnable,java.lang.Object)>($r0, null);

        $r4 = staticinvoke <androidx.test.platform.app.InstrumentationRegistry: android.app.Instrumentation getInstrumentation()>();

        $r0 = (java.lang.Runnable) $r3;

        virtualinvoke $r4.<android.app.Instrumentation: void runOnMainSync(java.lang.Runnable)>($r0);

     label2:
        virtualinvoke $r3.<java.util.concurrent.FutureTask: java.lang.Object get()>();

     label3:
        return;

     label4:
        $r5 := @caughtexception;

        r7 = (java.util.concurrent.ExecutionException) $r5;

        $r5 = virtualinvoke r7.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        throw $r5;

        catch java.util.concurrent.ExecutionException from label2 to label3 with label4;
    }

    public static boolean shouldRunOnUiThread(org.junit.runners.model.FrameworkMethod)
    {
        org.junit.runners.model.FrameworkMethod $r0;
        java.lang.Class $r1, $r2;
        boolean $z0;

        $r0 := @parameter0: org.junit.runners.model.FrameworkMethod;

        $r1 = staticinvoke <androidx.test.internal.runner.junit4.statement.UiThreadStatement: java.lang.Class loadUiThreadClass(java.lang.String)>("android.test.UiThreadTest");

        $z0 = staticinvoke <androidx.test.internal.runner.junit4.statement.UiThreadStatement: boolean hasAnnotation(org.junit.runners.model.FrameworkMethod,java.lang.Class)>($r0, $r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r2 = staticinvoke <androidx.test.internal.runner.junit4.statement.UiThreadStatement: java.lang.Class loadUiThreadClass(java.lang.String)>("androidx.test.annotation.UiThreadTest");

        $z0 = staticinvoke <androidx.test.internal.runner.junit4.statement.UiThreadStatement: boolean hasAnnotation(org.junit.runners.model.FrameworkMethod,java.lang.Class)>($r0, $r1);

        if $z0 != 0 goto label3;

        $z0 = staticinvoke <androidx.test.internal.runner.junit4.statement.UiThreadStatement: boolean hasAnnotation(org.junit.runners.model.FrameworkMethod,java.lang.Class)>($r0, $r2);

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        return 0;

     label3:
        return 1;
    }

    public void evaluate() throws java.lang.Throwable
    {
        androidx.test.internal.runner.junit4.statement.UiThreadStatement $r0;
        androidx.test.internal.runner.junit4.statement.UiThreadStatement$1 $r1;
        java.lang.Object $r2;
        boolean $z0;
        java.util.concurrent.atomic.AtomicReference $r3;
        java.lang.Throwable $r4;
        org.junit.runners.model.Statement $r5;

        $r0 := @this: androidx.test.internal.runner.junit4.statement.UiThreadStatement;

        $z0 = $r0.<androidx.test.internal.runner.junit4.statement.UiThreadStatement: boolean runOnUiThread>;

        if $z0 == 0 goto label2;

        $r3 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        $r1 = new androidx.test.internal.runner.junit4.statement.UiThreadStatement$1;

        specialinvoke $r1.<androidx.test.internal.runner.junit4.statement.UiThreadStatement$1: void <init>(androidx.test.internal.runner.junit4.statement.UiThreadStatement,java.util.concurrent.atomic.AtomicReference)>($r0, $r3);

        staticinvoke <androidx.test.internal.runner.junit4.statement.UiThreadStatement: void runOnUiThread(java.lang.Runnable)>($r1);

        $r2 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r4 = (java.lang.Throwable) $r2;

        if $r4 != null goto label1;

        return;

     label1:
        throw $r4;

     label2:
        $r5 = $r0.<androidx.test.internal.runner.junit4.statement.UiThreadStatement: org.junit.runners.model.Statement base>;

        virtualinvoke $r5.<org.junit.runners.model.Statement: void evaluate()>();

        return;
    }

