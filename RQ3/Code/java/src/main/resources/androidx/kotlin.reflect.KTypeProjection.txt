kotlin.reflect.KTypeProjection
<kotlin.reflect.KTypeProjection: kotlin.reflect.KTypeProjection$Companion Companion>
<kotlin.reflect.KTypeProjection: kotlin.reflect.KTypeProjection star>
<kotlin.reflect.KTypeProjection: kotlin.reflect.KType type>
<kotlin.reflect.KTypeProjection: kotlin.reflect.KVariance variance>
    static void <clinit>()
    {
        kotlin.reflect.KTypeProjection$Companion $r0;
        kotlin.reflect.KTypeProjection $r1;

        $r0 = new kotlin.reflect.KTypeProjection$Companion;

        specialinvoke $r0.<kotlin.reflect.KTypeProjection$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <kotlin.reflect.KTypeProjection: kotlin.reflect.KTypeProjection$Companion Companion> = $r0;

        $r1 = new kotlin.reflect.KTypeProjection;

        specialinvoke $r1.<kotlin.reflect.KTypeProjection: void <init>(kotlin.reflect.KVariance,kotlin.reflect.KType)>(null, null);

        <kotlin.reflect.KTypeProjection: kotlin.reflect.KTypeProjection star> = $r1;

        return;
    }

    public void <init>(kotlin.reflect.KVariance, kotlin.reflect.KType)
    {
        kotlin.reflect.KTypeProjection $r0;
        kotlin.reflect.KVariance $r1;
        kotlin.reflect.KType $r2;
        boolean $z0, $z1, $z2;
        java.lang.String $r3;
        java.lang.StringBuilder $r4;
        java.lang.IllegalArgumentException $r5;

        $r0 := @this: kotlin.reflect.KTypeProjection;

        $r1 := @parameter0: kotlin.reflect.KVariance;

        $r2 := @parameter1: kotlin.reflect.KType;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<kotlin.reflect.KTypeProjection: kotlin.reflect.KVariance variance> = $r1;

        $r0.<kotlin.reflect.KTypeProjection: kotlin.reflect.KType type> = $r2;

        $z0 = 1;

        if $r1 != null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $r2 != null goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        if $z1 != $z2 goto label5;

        goto label6;

     label5:
        $z0 = 0;

     label6:
        if $z0 != 0 goto label9;

        if $r1 != null goto label7;

        $r3 = "Star projection must have no type specified.";

        goto label8;

     label7:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The projection variance ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" requires type to be specified.");

        $r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

     label8:
        $r5 = new java.lang.IllegalArgumentException;

        $r3 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r5;

     label9:
        return;
    }

    public static final kotlin.reflect.KTypeProjection contravariant(kotlin.reflect.KType)
    {
        kotlin.reflect.KTypeProjection$Companion $r0;
        kotlin.reflect.KTypeProjection $r1;
        kotlin.reflect.KType $r2;

        $r2 := @parameter0: kotlin.reflect.KType;

        $r0 = <kotlin.reflect.KTypeProjection: kotlin.reflect.KTypeProjection$Companion Companion>;

        $r1 = virtualinvoke $r0.<kotlin.reflect.KTypeProjection$Companion: kotlin.reflect.KTypeProjection contravariant(kotlin.reflect.KType)>($r2);

        return $r1;
    }

    public static kotlin.reflect.KTypeProjection copy$default(kotlin.reflect.KTypeProjection, kotlin.reflect.KVariance, kotlin.reflect.KType, int, java.lang.Object)
    {
        kotlin.reflect.KTypeProjection $r0;
        kotlin.reflect.KVariance $r1;
        kotlin.reflect.KType $r2;
        int $i0, $i1;
        java.lang.Object $r3;

        $r0 := @parameter0: kotlin.reflect.KTypeProjection;

        $r1 := @parameter1: kotlin.reflect.KVariance;

        $r2 := @parameter2: kotlin.reflect.KType;

        $i0 := @parameter3: int;

        $r3 := @parameter4: java.lang.Object;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label1;

        $r1 = $r0.<kotlin.reflect.KTypeProjection: kotlin.reflect.KVariance variance>;

     label1:
        $i0 = $i0 & 2;

        if $i0 == 0 goto label2;

        $r2 = $r0.<kotlin.reflect.KTypeProjection: kotlin.reflect.KType type>;

     label2:
        $r0 = virtualinvoke $r0.<kotlin.reflect.KTypeProjection: kotlin.reflect.KTypeProjection copy(kotlin.reflect.KVariance,kotlin.reflect.KType)>($r1, $r2);

        return $r0;
    }

    public static final kotlin.reflect.KTypeProjection covariant(kotlin.reflect.KType)
    {
        kotlin.reflect.KTypeProjection$Companion $r0;
        kotlin.reflect.KTypeProjection $r1;
        kotlin.reflect.KType $r2;

        $r2 := @parameter0: kotlin.reflect.KType;

        $r0 = <kotlin.reflect.KTypeProjection: kotlin.reflect.KTypeProjection$Companion Companion>;

        $r1 = virtualinvoke $r0.<kotlin.reflect.KTypeProjection$Companion: kotlin.reflect.KTypeProjection covariant(kotlin.reflect.KType)>($r2);

        return $r1;
    }

    public static final kotlin.reflect.KTypeProjection invariant(kotlin.reflect.KType)
    {
        kotlin.reflect.KTypeProjection$Companion $r0;
        kotlin.reflect.KTypeProjection $r1;
        kotlin.reflect.KType $r2;

        $r2 := @parameter0: kotlin.reflect.KType;

        $r0 = <kotlin.reflect.KTypeProjection: kotlin.reflect.KTypeProjection$Companion Companion>;

        $r1 = virtualinvoke $r0.<kotlin.reflect.KTypeProjection$Companion: kotlin.reflect.KTypeProjection invariant(kotlin.reflect.KType)>($r2);

        return $r1;
    }

    public final kotlin.reflect.KVariance component1()
    {
        kotlin.reflect.KTypeProjection $r0;
        kotlin.reflect.KVariance r1;

        $r0 := @this: kotlin.reflect.KTypeProjection;

        r1 = $r0.<kotlin.reflect.KTypeProjection: kotlin.reflect.KVariance variance>;

        return r1;
    }

    public final kotlin.reflect.KType component2()
    {
        kotlin.reflect.KTypeProjection $r0;
        kotlin.reflect.KType r1;

        $r0 := @this: kotlin.reflect.KTypeProjection;

        r1 = $r0.<kotlin.reflect.KTypeProjection: kotlin.reflect.KType type>;

        return r1;
    }

    public final kotlin.reflect.KTypeProjection copy(kotlin.reflect.KVariance, kotlin.reflect.KType)
    {
        kotlin.reflect.KTypeProjection $r0;
        kotlin.reflect.KVariance $r1;
        kotlin.reflect.KType $r2;

        $r0 := @this: kotlin.reflect.KTypeProjection;

        $r1 := @parameter0: kotlin.reflect.KVariance;

        $r2 := @parameter1: kotlin.reflect.KType;

        $r0 = new kotlin.reflect.KTypeProjection;

        specialinvoke $r0.<kotlin.reflect.KTypeProjection: void <init>(kotlin.reflect.KVariance,kotlin.reflect.KType)>($r1, $r2);

        return $r0;
    }

    public boolean equals(java.lang.Object)
    {
        kotlin.reflect.KTypeProjection $r0, $r3;
        kotlin.reflect.KVariance $r1, $r4;
        boolean $z0;
        java.lang.Object $r2;
        kotlin.reflect.KType $r5, $r6;

        $r0 := @this: kotlin.reflect.KTypeProjection;

        $r2 := @parameter0: java.lang.Object;

        if $r0 != $r2 goto label1;

        return 1;

     label1:
        $z0 = $r2 instanceof kotlin.reflect.KTypeProjection;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r3 = (kotlin.reflect.KTypeProjection) $r2;

        $r4 = $r0.<kotlin.reflect.KTypeProjection: kotlin.reflect.KVariance variance>;

        $r1 = $r3.<kotlin.reflect.KTypeProjection: kotlin.reflect.KVariance variance>;

        if $r4 == $r1 goto label3;

        return 0;

     label3:
        $r5 = $r0.<kotlin.reflect.KTypeProjection: kotlin.reflect.KType type>;

        $r6 = $r3.<kotlin.reflect.KTypeProjection: kotlin.reflect.KType type>;

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r5, $r6);

        if $z0 != 0 goto label4;

        return 0;

     label4:
        return 1;
    }

    public final kotlin.reflect.KType getType()
    {
        kotlin.reflect.KTypeProjection $r0;
        kotlin.reflect.KType r1;

        $r0 := @this: kotlin.reflect.KTypeProjection;

        r1 = $r0.<kotlin.reflect.KTypeProjection: kotlin.reflect.KType type>;

        return r1;
    }

    public final kotlin.reflect.KVariance getVariance()
    {
        kotlin.reflect.KTypeProjection $r0;
        kotlin.reflect.KVariance r1;

        $r0 := @this: kotlin.reflect.KTypeProjection;

        r1 = $r0.<kotlin.reflect.KTypeProjection: kotlin.reflect.KVariance variance>;

        return r1;
    }

    public int hashCode()
    {
        kotlin.reflect.KTypeProjection $r0;
        kotlin.reflect.KType $r1;
        kotlin.reflect.KVariance $r2;
        int $i0, $i1;

        $r0 := @this: kotlin.reflect.KTypeProjection;

        $r2 = $r0.<kotlin.reflect.KTypeProjection: kotlin.reflect.KVariance variance>;

        $i0 = 0;

        if $r2 != null goto label1;

        $i1 = 0;

        goto label2;

     label1:
        $i1 = virtualinvoke $r2.<kotlin.reflect.KVariance: int hashCode()>();

     label2:
        $i1 = $i1 * 31;

        $r1 = $r0.<kotlin.reflect.KTypeProjection: kotlin.reflect.KType type>;

        if $r1 != null goto label3;

        goto label4;

     label3:
        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

     label4:
        $i0 = $i1 + $i0;

        return $i0;
    }

    public java.lang.String toString()
    {
        kotlin.reflect.KTypeProjection $r0;
        kotlin.reflect.KVariance $r1;
        int[] $r2;
        int $i0;
        java.lang.StringBuilder $r3, r7;
        kotlin.reflect.KType $r4;
        java.lang.String $r5;
        kotlin.NoWhenBranchMatchedException r6;
        java.lang.Throwable r8;

        $r0 := @this: kotlin.reflect.KTypeProjection;

        $r1 = $r0.<kotlin.reflect.KTypeProjection: kotlin.reflect.KVariance variance>;

        if $r1 != null goto label2;

     label1:
        goto label7;

     label2:
        $r2 = <kotlin.reflect.KTypeProjection$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i0 = virtualinvoke $r1.<kotlin.reflect.KVariance: int ordinal()>();

        $i0 = $r2[$i0];

        lookupswitch($i0)
        {
            case -1: goto label1;
            case 0: goto label3;
            case 1: goto label6;
            case 2: goto label5;
            case 3: goto label4;
            default: goto label3;
        };

     label3:
        r6 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke r6.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        r8 = (java.lang.Throwable) r6;

        throw r8;

     label4:
        r7 = new java.lang.StringBuilder;

        specialinvoke r7.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("out ");

        $r4 = $r0.<kotlin.reflect.KTypeProjection: kotlin.reflect.KType type>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;

     label5:
        r7 = new java.lang.StringBuilder;

        specialinvoke r7.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("in ");

        $r4 = $r0.<kotlin.reflect.KTypeProjection: kotlin.reflect.KType type>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;

     label6:
        $r4 = $r0.<kotlin.reflect.KTypeProjection: kotlin.reflect.KType type>;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        return $r5;

     label7:
        return "*";
    }

kotlin.reflect.KTypeProjection$Companion
    private void <init>()
    {
        kotlin.reflect.KTypeProjection$Companion $r0;

        $r0 := @this: kotlin.reflect.KTypeProjection$Companion;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        kotlin.reflect.KTypeProjection$Companion $r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        $r0 := @this: kotlin.reflect.KTypeProjection$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke $r0.<kotlin.reflect.KTypeProjection$Companion: void <init>()>();

        return;
    }

    public static void getStar$annotations()
    {
        return;
    }

    public final kotlin.reflect.KTypeProjection contravariant(kotlin.reflect.KType)
    {
        kotlin.reflect.KTypeProjection$Companion $r0;
        kotlin.reflect.KType $r1;
        kotlin.reflect.KVariance $r2;
        kotlin.reflect.KTypeProjection $r3;

        $r0 := @this: kotlin.reflect.KTypeProjection$Companion;

        $r1 := @parameter0: kotlin.reflect.KType;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "type");

        $r3 = new kotlin.reflect.KTypeProjection;

        $r2 = <kotlin.reflect.KVariance: kotlin.reflect.KVariance IN>;

        specialinvoke $r3.<kotlin.reflect.KTypeProjection: void <init>(kotlin.reflect.KVariance,kotlin.reflect.KType)>($r2, $r1);

        return $r3;
    }

    public final kotlin.reflect.KTypeProjection covariant(kotlin.reflect.KType)
    {
        kotlin.reflect.KTypeProjection$Companion $r0;
        kotlin.reflect.KType $r1;
        kotlin.reflect.KVariance $r2;
        kotlin.reflect.KTypeProjection $r3;

        $r0 := @this: kotlin.reflect.KTypeProjection$Companion;

        $r1 := @parameter0: kotlin.reflect.KType;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "type");

        $r3 = new kotlin.reflect.KTypeProjection;

        $r2 = <kotlin.reflect.KVariance: kotlin.reflect.KVariance OUT>;

        specialinvoke $r3.<kotlin.reflect.KTypeProjection: void <init>(kotlin.reflect.KVariance,kotlin.reflect.KType)>($r2, $r1);

        return $r3;
    }

    public final kotlin.reflect.KTypeProjection getSTAR()
    {
        kotlin.reflect.KTypeProjection$Companion $r0;
        kotlin.reflect.KTypeProjection r1;

        $r0 := @this: kotlin.reflect.KTypeProjection$Companion;

        r1 = <kotlin.reflect.KTypeProjection: kotlin.reflect.KTypeProjection star>;

        return r1;
    }

    public final kotlin.reflect.KTypeProjection invariant(kotlin.reflect.KType)
    {
        kotlin.reflect.KTypeProjection$Companion $r0;
        kotlin.reflect.KType $r1;
        kotlin.reflect.KVariance $r2;
        kotlin.reflect.KTypeProjection $r3;

        $r0 := @this: kotlin.reflect.KTypeProjection$Companion;

        $r1 := @parameter0: kotlin.reflect.KType;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "type");

        $r3 = new kotlin.reflect.KTypeProjection;

        $r2 = <kotlin.reflect.KVariance: kotlin.reflect.KVariance INVARIANT>;

        specialinvoke $r3.<kotlin.reflect.KTypeProjection: void <init>(kotlin.reflect.KVariance,kotlin.reflect.KType)>($r2, $r1);

        return $r3;
    }

kotlin.reflect.KTypeProjection$WhenMappings
<kotlin.reflect.KTypeProjection$WhenMappings: int[] $EnumSwitchMapping$0>
    static void <clinit>()
    {
        kotlin.reflect.KVariance[] $r0;
        int $i0;
        int[] $r1;
        kotlin.reflect.KVariance $r2;

        $r0 = staticinvoke <kotlin.reflect.KVariance: kotlin.reflect.KVariance[] values()>();

        $i0 = lengthof $r0;

        $r1 = newarray (int)[$i0];

        $r2 = <kotlin.reflect.KVariance: kotlin.reflect.KVariance INVARIANT>;

        $i0 = virtualinvoke $r2.<kotlin.reflect.KVariance: int ordinal()>();

        $r1[$i0] = 1;

        $r2 = <kotlin.reflect.KVariance: kotlin.reflect.KVariance IN>;

        $i0 = virtualinvoke $r2.<kotlin.reflect.KVariance: int ordinal()>();

        $r1[$i0] = 2;

        $r2 = <kotlin.reflect.KVariance: kotlin.reflect.KVariance OUT>;

        $i0 = virtualinvoke $r2.<kotlin.reflect.KVariance: int ordinal()>();

        $r1[$i0] = 3;

        <kotlin.reflect.KTypeProjection$WhenMappings: int[] $EnumSwitchMapping$0> = $r1;

        return;
    }

