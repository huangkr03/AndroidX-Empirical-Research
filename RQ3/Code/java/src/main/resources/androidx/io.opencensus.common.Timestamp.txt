io.opencensus.common.Timestamp
    void <init>()
    {
        io.opencensus.common.Timestamp $r0;

        $r0 := @this: io.opencensus.common.Timestamp;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static io.opencensus.common.Timestamp create(long, int)
    {
        long $l0;
        int $i1;
        byte $b2;
        io.opencensus.common.AutoValue_Timestamp $r0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $b2 = $l0 cmp -315576000000L;

        if $b2 < 0 goto label4;

        $b2 = $l0 cmp 315576000000L;

        if $b2 > 0 goto label3;

        if $i1 < 0 goto label2;

        if $i1 > 999999999 goto label1;

        $r0 = new io.opencensus.common.AutoValue_Timestamp;

        specialinvoke $r0.<io.opencensus.common.AutoValue_Timestamp: void <init>(long,int)>($l0, $i1);

        return $r0;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'nanos\' is greater than maximum (999999999): ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'nanos\' is less than zero: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label3:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'seconds\' is greater than maximum (315576000000): ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label4:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'seconds\' is less than minimum (-315576000000): ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;
    }

    public int compareTo(io.opencensus.common.Timestamp)
    {
        io.opencensus.common.Timestamp $r0, $r1;
        long $l0, $l1;
        int $i2;

        $r0 := @this: io.opencensus.common.Timestamp;

        $r1 := @parameter0: io.opencensus.common.Timestamp;

        $l0 = virtualinvoke $r0.<io.opencensus.common.Timestamp: long getSeconds()>();

        $l1 = virtualinvoke $r1.<io.opencensus.common.Timestamp: long getSeconds()>();

        $i2 = staticinvoke <io.opencensus.common.TimeUtils: int compareLongs(long,long)>($l0, $l1);

        if $i2 == 0 goto label1;

        return $i2;

     label1:
        $i2 = virtualinvoke $r0.<io.opencensus.common.Timestamp: int getNanos()>();

        $l0 = (long) $i2;

        $i2 = virtualinvoke $r1.<io.opencensus.common.Timestamp: int getNanos()>();

        $l1 = (long) $i2;

        $i2 = staticinvoke <io.opencensus.common.TimeUtils: int compareLongs(long,long)>($l0, $l1);

        return $i2;
    }

    public volatile int compareTo(java.lang.Object)
    {
        io.opencensus.common.Timestamp $r0, $r2;
        int $i0;
        java.lang.Object $r1;

        $r0 := @this: io.opencensus.common.Timestamp;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (io.opencensus.common.Timestamp) $r1;

        $i0 = virtualinvoke $r0.<io.opencensus.common.Timestamp: int compareTo(io.opencensus.common.Timestamp)>($r2);

        return $i0;
    }

<io.opencensus.common.Timestamp: int getNanos()>
<io.opencensus.common.Timestamp: long getSeconds()>
