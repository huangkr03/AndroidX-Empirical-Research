androidx.test.core.app.ActivityScenario
<androidx.test.core.app.ActivityScenario: java.lang.String TAG>
<androidx.test.core.app.ActivityScenario: long TIMEOUT_MILLISECONDS>
<androidx.test.core.app.ActivityScenario: java.util.Map STEADY_STATES>
<androidx.test.core.app.ActivityScenario: java.util.concurrent.locks.ReentrantLock lock>
<androidx.test.core.app.ActivityScenario: java.util.concurrent.locks.Condition stateChangedCondition>
<androidx.test.core.app.ActivityScenario: android.content.Intent startActivityIntent>
<androidx.test.core.app.ActivityScenario: androidx.test.internal.platform.app.ActivityInvoker activityInvoker>
<androidx.test.core.app.ActivityScenario: androidx.test.internal.platform.os.ControlledLooper controlledLooper>
<androidx.test.core.app.ActivityScenario: androidx.test.runner.lifecycle.Stage currentActivityStage>
<androidx.test.core.app.ActivityScenario: android.app.Activity currentActivity>
<androidx.test.core.app.ActivityScenario: androidx.test.runner.lifecycle.ActivityLifecycleCallback activityLifecycleObserver>
    static volatile android.app.Activity '-$$Nest$fgetcurrentActivity'(androidx.test.core.app.ActivityScenario)
    {
        androidx.test.core.app.ActivityScenario r0;
        android.app.Activity $r1;

        r0 := @parameter0: androidx.test.core.app.ActivityScenario;

        $r1 = r0.<androidx.test.core.app.ActivityScenario: android.app.Activity currentActivity>;

        return $r1;
    }

    public android.app.Instrumentation$ActivityResult getResult()
    {
        androidx.test.core.app.ActivityScenario r0;
        androidx.test.internal.platform.app.ActivityInvoker $r1;
        android.app.Instrumentation$ActivityResult $r2;

        r0 := @this: androidx.test.core.app.ActivityScenario;

        $r1 = r0.<androidx.test.core.app.ActivityScenario: androidx.test.internal.platform.app.ActivityInvoker activityInvoker>;

        $r2 = interfaceinvoke $r1.<androidx.test.internal.platform.app.ActivityInvoker: android.app.Instrumentation$ActivityResult getActivityResult()>();

        return $r2;
    }

    static volatile android.content.Intent '-$$Nest$fgetstartActivityIntent'(androidx.test.core.app.ActivityScenario)
    {
        androidx.test.core.app.ActivityScenario r0;
        android.content.Intent $r1;

        r0 := @parameter0: androidx.test.core.app.ActivityScenario;

        $r1 = r0.<androidx.test.core.app.ActivityScenario: android.content.Intent startActivityIntent>;

        return $r1;
    }

    public androidx.lifecycle.Lifecycle$State getState()
    {
        androidx.test.core.app.ActivityScenario r0;
        androidx.test.core.app.ActivityScenario$ActivityState r1;
        java.lang.Object[] $r2;
        android.app.Activity $r3;
        androidx.test.runner.lifecycle.Stage $r4;
        androidx.lifecycle.Lifecycle$State $r5, $r7;
        java.lang.Object $r6;

        r0 := @this: androidx.test.core.app.ActivityScenario;

        r1 = specialinvoke r0.<androidx.test.core.app.ActivityScenario: androidx.test.core.app.ActivityScenario$ActivityState getCurrentActivityState()>();

        $r5 = r1.<androidx.test.core.app.ActivityScenario$ActivityState: androidx.lifecycle.Lifecycle$State state>;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = r1.<androidx.test.core.app.ActivityScenario$ActivityState: android.app.Activity activity>;

        $r2[0] = $r3;

        $r4 = r1.<androidx.test.core.app.ActivityScenario$ActivityState: androidx.test.runner.lifecycle.Stage stage>;

        $r2[1] = $r4;

        $r6 = staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object[])>($r5, "Could not get current state of activity %s due to the transition is incomplete. Current stage = %s", $r2);

        $r7 = (androidx.lifecycle.Lifecycle$State) $r6;

        return $r7;
    }

    private androidx.test.core.app.ActivityScenario$ActivityState getCurrentActivityState()
    {
        androidx.test.core.app.ActivityScenario r0;
        androidx.test.core.app.ActivityScenario$ActivityState r1, $r5;
        java.lang.Throwable r2, $r13;
        android.app.Instrumentation $r3;
        java.util.concurrent.locks.ReentrantLock $r4, $r12, $r14;
        androidx.test.runner.lifecycle.Stage $r6, $r10;
        java.util.Map $r7;
        android.app.Activity $r8;
        java.lang.Object $r9;
        androidx.lifecycle.Lifecycle$State $r11;

        r0 := @this: androidx.test.core.app.ActivityScenario;

        $r3 = staticinvoke <androidx.test.platform.app.InstrumentationRegistry: android.app.Instrumentation getInstrumentation()>();

        virtualinvoke $r3.<android.app.Instrumentation: void waitForIdleSync()>();

        $r4 = r0.<androidx.test.core.app.ActivityScenario: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke $r4.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $r5 = new androidx.test.core.app.ActivityScenario$ActivityState;

        $r8 = r0.<androidx.test.core.app.ActivityScenario: android.app.Activity currentActivity>;

        $r7 = <androidx.test.core.app.ActivityScenario: java.util.Map STEADY_STATES>;

        $r6 = r0.<androidx.test.core.app.ActivityScenario: androidx.test.runner.lifecycle.Stage currentActivityStage>;

        $r9 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        $r11 = (androidx.lifecycle.Lifecycle$State) $r9;

        $r10 = r0.<androidx.test.core.app.ActivityScenario: androidx.test.runner.lifecycle.Stage currentActivityStage>;

        specialinvoke $r5.<androidx.test.core.app.ActivityScenario$ActivityState: void <init>(android.app.Activity,androidx.lifecycle.Lifecycle$State,androidx.test.runner.lifecycle.Stage)>($r8, $r11, $r10);

        r1 = $r5;

     label2:
        $r12 = r0.<androidx.test.core.app.ActivityScenario: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke $r12.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r1;

     label3:
        $r13 := @caughtexception;

        r2 = $r13;

        $r14 = r0.<androidx.test.core.app.ActivityScenario: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke $r14.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static androidx.test.core.app.ActivityScenario launch(android.content.Intent)
    {
        android.content.Intent r0, $r4;
        androidx.test.core.app.ActivityScenario r1, $r2;
        java.lang.Object $r3;

        r0 := @parameter0: android.content.Intent;

        $r2 = new androidx.test.core.app.ActivityScenario;

        $r3 = staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r4 = (android.content.Intent) $r3;

        specialinvoke $r2.<androidx.test.core.app.ActivityScenario: void <init>(android.content.Intent)>($r4);

        r1 = $r2;

        specialinvoke r1.<androidx.test.core.app.ActivityScenario: void launchInternal(android.os.Bundle,boolean)>(null, 0);

        return r1;
    }

    public static androidx.test.core.app.ActivityScenario launch(java.lang.Class)
    {
        java.lang.Class r0, $r4;
        androidx.test.core.app.ActivityScenario r1, $r2;
        java.lang.Object $r3;

        r0 := @parameter0: java.lang.Class;

        $r2 = new androidx.test.core.app.ActivityScenario;

        $r3 = staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r4 = (java.lang.Class) $r3;

        specialinvoke $r2.<androidx.test.core.app.ActivityScenario: void <init>(java.lang.Class)>($r4);

        r1 = $r2;

        specialinvoke r1.<androidx.test.core.app.ActivityScenario: void launchInternal(android.os.Bundle,boolean)>(null, 0);

        return r1;
    }

    public static androidx.test.core.app.ActivityScenario launch(android.content.Intent, android.os.Bundle)
    {
        android.content.Intent r0, $r5;
        android.os.Bundle r1;
        androidx.test.core.app.ActivityScenario r2, $r3;
        java.lang.Object $r4;

        r0 := @parameter0: android.content.Intent;

        r1 := @parameter1: android.os.Bundle;

        $r3 = new androidx.test.core.app.ActivityScenario;

        $r4 = staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r5 = (android.content.Intent) $r4;

        specialinvoke $r3.<androidx.test.core.app.ActivityScenario: void <init>(android.content.Intent)>($r5);

        r2 = $r3;

        specialinvoke r2.<androidx.test.core.app.ActivityScenario: void launchInternal(android.os.Bundle,boolean)>(r1, 0);

        return r2;
    }

    public static androidx.test.core.app.ActivityScenario launch(java.lang.Class, android.os.Bundle)
    {
        java.lang.Class r0, $r5;
        android.os.Bundle r1;
        androidx.test.core.app.ActivityScenario r2, $r3;
        java.lang.Object $r4;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: android.os.Bundle;

        $r3 = new androidx.test.core.app.ActivityScenario;

        $r4 = staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r5 = (java.lang.Class) $r4;

        specialinvoke $r3.<androidx.test.core.app.ActivityScenario: void <init>(java.lang.Class)>($r5);

        r2 = $r3;

        specialinvoke r2.<androidx.test.core.app.ActivityScenario: void launchInternal(android.os.Bundle,boolean)>(r1, 0);

        return r2;
    }

    public static androidx.test.core.app.ActivityScenario launchActivityForResult(android.content.Intent)
    {
        android.content.Intent r0, $r4;
        androidx.test.core.app.ActivityScenario r1, $r2;
        java.lang.Object $r3;

        r0 := @parameter0: android.content.Intent;

        $r2 = new androidx.test.core.app.ActivityScenario;

        $r3 = staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r4 = (android.content.Intent) $r3;

        specialinvoke $r2.<androidx.test.core.app.ActivityScenario: void <init>(android.content.Intent)>($r4);

        r1 = $r2;

        specialinvoke r1.<androidx.test.core.app.ActivityScenario: void launchInternal(android.os.Bundle,boolean)>(null, 1);

        return r1;
    }

    public static androidx.test.core.app.ActivityScenario launchActivityForResult(java.lang.Class)
    {
        java.lang.Class r0, $r4;
        androidx.test.core.app.ActivityScenario r1, $r2;
        java.lang.Object $r3;

        r0 := @parameter0: java.lang.Class;

        $r2 = new androidx.test.core.app.ActivityScenario;

        $r3 = staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r4 = (java.lang.Class) $r3;

        specialinvoke $r2.<androidx.test.core.app.ActivityScenario: void <init>(java.lang.Class)>($r4);

        r1 = $r2;

        specialinvoke r1.<androidx.test.core.app.ActivityScenario: void launchInternal(android.os.Bundle,boolean)>(null, 1);

        return r1;
    }

    public static androidx.test.core.app.ActivityScenario launchActivityForResult(android.content.Intent, android.os.Bundle)
    {
        android.content.Intent r0, $r5;
        android.os.Bundle r1;
        androidx.test.core.app.ActivityScenario r2, $r3;
        java.lang.Object $r4;

        r0 := @parameter0: android.content.Intent;

        r1 := @parameter1: android.os.Bundle;

        $r3 = new androidx.test.core.app.ActivityScenario;

        $r4 = staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r5 = (android.content.Intent) $r4;

        specialinvoke $r3.<androidx.test.core.app.ActivityScenario: void <init>(android.content.Intent)>($r5);

        r2 = $r3;

        specialinvoke r2.<androidx.test.core.app.ActivityScenario: void launchInternal(android.os.Bundle,boolean)>(r1, 1);

        return r2;
    }

    public static androidx.test.core.app.ActivityScenario launchActivityForResult(java.lang.Class, android.os.Bundle)
    {
        java.lang.Class r0, $r5;
        android.os.Bundle r1;
        androidx.test.core.app.ActivityScenario r2, $r3;
        java.lang.Object $r4;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: android.os.Bundle;

        $r3 = new androidx.test.core.app.ActivityScenario;

        $r4 = staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r5 = (java.lang.Class) $r4;

        specialinvoke $r3.<androidx.test.core.app.ActivityScenario: void <init>(java.lang.Class)>($r5);

        r2 = $r3;

        specialinvoke r2.<androidx.test.core.app.ActivityScenario: void launchInternal(android.os.Bundle,boolean)>(r1, 1);

        return r2;
    }

    public androidx.test.core.app.ActivityScenario moveToState(androidx.lifecycle.Lifecycle$State)
    {
        androidx.test.core.app.ActivityScenario r0;
        androidx.lifecycle.Lifecycle$State r1, $r6, $r9, $r10, $r11, $r16;
        androidx.test.core.app.ActivityScenario$ActivityState r2;
        android.app.Instrumentation $r3;
        java.lang.Object[] $r4, $r23, $r26;
        androidx.test.runner.lifecycle.Stage $r5;
        java.lang.String $r7, $r24, $r27;
        android.app.Activity $r12, $r14, $r18, $r20, $r25;
        androidx.test.internal.platform.app.ActivityInvoker $r13, $r15, $r19, $r21;
        java.lang.IllegalArgumentException $r22;
        boolean $z0;
        int[] $r28;
        int $i0, $i1;
        androidx.lifecycle.Lifecycle$State[] $r29;

        r0 := @this: androidx.test.core.app.ActivityScenario;

        r1 := @parameter0: androidx.lifecycle.Lifecycle$State;

        staticinvoke <androidx.test.internal.util.Checks: void checkNotMainThread()>();

        $r3 = staticinvoke <androidx.test.platform.app.InstrumentationRegistry: android.app.Instrumentation getInstrumentation()>();

        virtualinvoke $r3.<android.app.Instrumentation: void waitForIdleSync()>();

        r2 = specialinvoke r0.<androidx.test.core.app.ActivityScenario: androidx.test.core.app.ActivityScenario$ActivityState getCurrentActivityState()>();

        $r6 = r2.<androidx.test.core.app.ActivityScenario$ActivityState: androidx.lifecycle.Lifecycle$State state>;

        $r4 = newarray (java.lang.Object)[1];

        $r5 = r2.<androidx.test.core.app.ActivityScenario$ActivityState: androidx.test.runner.lifecycle.Stage stage>;

        $r4[0] = $r5;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Current state was null unexpectedly. Last stage = %s", $r4);

        staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r6, $r7);

        $r9 = r2.<androidx.test.core.app.ActivityScenario$ActivityState: androidx.lifecycle.Lifecycle$State state>;

        if $r9 != r1 goto label1;

        return r0;

     label1:
        $r11 = r2.<androidx.test.core.app.ActivityScenario$ActivityState: androidx.lifecycle.Lifecycle$State state>;

        $r10 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State DESTROYED>;

        if $r11 == $r10 goto label2;

        $r25 = r2.<androidx.test.core.app.ActivityScenario$ActivityState: android.app.Activity activity>;

        if $r25 == null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        $r26 = newarray (java.lang.Object)[1];

        $r26[0] = r1;

        $r27 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Cannot move to state \"%s\" since the Activity has been destroyed already", $r26);

        staticinvoke <androidx.test.internal.util.Checks: void checkState(boolean,java.lang.Object)>($z0, $r27);

        $r28 = <androidx.test.core.app.ActivityScenario$2: int[] $SwitchMap$androidx$lifecycle$Lifecycle$State>;

        $i0 = virtualinvoke r1.<androidx.lifecycle.Lifecycle$State: int ordinal()>();

        $i1 = $r28[$i0];

        tableswitch($i1)
        {
            case 1: goto label4;
            case 2: goto label5;
            case 3: goto label6;
            case 4: goto label7;
            default: goto label8;
        };

     label4:
        $r21 = r0.<androidx.test.core.app.ActivityScenario: androidx.test.internal.platform.app.ActivityInvoker activityInvoker>;

        $r20 = r2.<androidx.test.core.app.ActivityScenario$ActivityState: android.app.Activity activity>;

        interfaceinvoke $r21.<androidx.test.internal.platform.app.ActivityInvoker: void stopActivity(android.app.Activity)>($r20);

        goto label9;

     label5:
        $r16 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State RESUMED>;

        virtualinvoke r0.<androidx.test.core.app.ActivityScenario: androidx.test.core.app.ActivityScenario moveToState(androidx.lifecycle.Lifecycle$State)>($r16);

        $r19 = r0.<androidx.test.core.app.ActivityScenario: androidx.test.internal.platform.app.ActivityInvoker activityInvoker>;

        $r18 = r2.<androidx.test.core.app.ActivityScenario$ActivityState: android.app.Activity activity>;

        interfaceinvoke $r19.<androidx.test.internal.platform.app.ActivityInvoker: void pauseActivity(android.app.Activity)>($r18);

        goto label9;

     label6:
        $r15 = r0.<androidx.test.core.app.ActivityScenario: androidx.test.internal.platform.app.ActivityInvoker activityInvoker>;

        $r14 = r2.<androidx.test.core.app.ActivityScenario$ActivityState: android.app.Activity activity>;

        interfaceinvoke $r15.<androidx.test.internal.platform.app.ActivityInvoker: void resumeActivity(android.app.Activity)>($r14);

        goto label9;

     label7:
        $r13 = r0.<androidx.test.core.app.ActivityScenario: androidx.test.internal.platform.app.ActivityInvoker activityInvoker>;

        $r12 = r2.<androidx.test.core.app.ActivityScenario$ActivityState: android.app.Activity activity>;

        interfaceinvoke $r13.<androidx.test.internal.platform.app.ActivityInvoker: void finishActivity(android.app.Activity)>($r12);

        goto label9;

     label8:
        $r22 = new java.lang.IllegalArgumentException;

        $r23 = newarray (java.lang.Object)[1];

        $r23[0] = r1;

        $r24 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("A requested state \"%s\" is not supported", $r23);

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r24);

        throw $r22;

     label9:
        $r29 = newarray (androidx.lifecycle.Lifecycle$State)[1];

        $r29[0] = r1;

        specialinvoke r0.<androidx.test.core.app.ActivityScenario: void waitForActivityToBecomeAnyOf(androidx.lifecycle.Lifecycle$State[])>($r29);

        return r0;
    }

    public androidx.test.core.app.ActivityScenario onActivity(androidx.test.core.app.ActivityScenario$ActivityAction)
    {
        androidx.test.core.app.ActivityScenario r0, r3;
        androidx.test.core.app.ActivityScenario$ActivityAction r1, r4;
        androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda2 r2, $r5;
        android.os.Looper $r6, $r7;
        android.app.Instrumentation $r8, $r9;
        androidx.test.internal.platform.os.ControlledLooper $r10;

        r0 := @this: androidx.test.core.app.ActivityScenario;

        r1 := @parameter0: androidx.test.core.app.ActivityScenario$ActivityAction;

        r4 = r1;

        r3 = r0;

        $r5 = new androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda2;

        specialinvoke $r5.<androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda2: void <init>(androidx.test.core.app.ActivityScenario,androidx.test.core.app.ActivityScenario$ActivityAction)>(r3, r4);

        r2 = $r5;

        $r6 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r7 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        if $r6 != $r7 goto label1;

        $r10 = r0.<androidx.test.core.app.ActivityScenario: androidx.test.internal.platform.os.ControlledLooper controlledLooper>;

        interfaceinvoke $r10.<androidx.test.internal.platform.os.ControlledLooper: void drainMainThreadUntilIdle()>();

        interfaceinvoke r2.<java.lang.Runnable: void run()>();

        goto label2;

     label1:
        $r8 = staticinvoke <androidx.test.platform.app.InstrumentationRegistry: android.app.Instrumentation getInstrumentation()>();

        virtualinvoke $r8.<android.app.Instrumentation: void waitForIdleSync()>();

        $r9 = staticinvoke <androidx.test.platform.app.InstrumentationRegistry: android.app.Instrumentation getInstrumentation()>();

        virtualinvoke $r9.<android.app.Instrumentation: void runOnMainSync(java.lang.Runnable)>(r2);

     label2:
        return r0;
    }

    public androidx.test.core.app.ActivityScenario recreate()
    {
        androidx.test.core.app.ActivityScenario r0;
        androidx.test.core.app.ActivityScenario$ActivityState r1, r2;
        long l0, l2, l3;
        android.app.Instrumentation $r3;
        android.app.Activity $r4, $r10, $r14, $r15, $r19, $r20;
        androidx.lifecycle.Lifecycle$State $r6, $r8, $r13, $r16;
        androidx.test.internal.platform.app.ActivityInvoker $r11;
        androidx.lifecycle.Lifecycle$State[] $r12;
        byte $b1;
        java.lang.IllegalStateException $r18;

        r0 := @this: androidx.test.core.app.ActivityScenario;

        staticinvoke <androidx.test.internal.util.Checks: void checkNotMainThread()>();

        $r3 = staticinvoke <androidx.test.platform.app.InstrumentationRegistry: android.app.Instrumentation getInstrumentation()>();

        virtualinvoke $r3.<android.app.Instrumentation: void waitForIdleSync()>();

        r1 = specialinvoke r0.<androidx.test.core.app.ActivityScenario: androidx.test.core.app.ActivityScenario$ActivityState getCurrentActivityState()>();

        $r4 = r1.<androidx.test.core.app.ActivityScenario$ActivityState: android.app.Activity activity>;

        staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>($r4);

        $r6 = r1.<androidx.test.core.app.ActivityScenario$ActivityState: androidx.lifecycle.Lifecycle$State state>;

        staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>($r6);

        $r8 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State RESUMED>;

        virtualinvoke r0.<androidx.test.core.app.ActivityScenario: androidx.test.core.app.ActivityScenario moveToState(androidx.lifecycle.Lifecycle$State)>($r8);

        $r11 = r0.<androidx.test.core.app.ActivityScenario: androidx.test.internal.platform.app.ActivityInvoker activityInvoker>;

        $r10 = r1.<androidx.test.core.app.ActivityScenario$ActivityState: android.app.Activity activity>;

        interfaceinvoke $r11.<androidx.test.internal.platform.app.ActivityInvoker: void recreateActivity(android.app.Activity)>($r10);

        l2 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        l0 = l2 + 45000L;

     label1:
        $r12 = newarray (androidx.lifecycle.Lifecycle$State)[1];

        $r13 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State RESUMED>;

        $r12[0] = $r13;

        specialinvoke r0.<androidx.test.core.app.ActivityScenario: void waitForActivityToBecomeAnyOf(androidx.lifecycle.Lifecycle$State[])>($r12);

        l3 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r2 = specialinvoke r0.<androidx.test.core.app.ActivityScenario: androidx.test.core.app.ActivityScenario$ActivityState getCurrentActivityState()>();

        $b1 = l3 cmp l0;

        if $b1 >= 0 goto label2;

        $r20 = r2.<androidx.test.core.app.ActivityScenario$ActivityState: android.app.Activity activity>;

        $r19 = r1.<androidx.test.core.app.ActivityScenario$ActivityState: android.app.Activity activity>;

        if $r20 == $r19 goto label1;

     label2:
        $r15 = r2.<androidx.test.core.app.ActivityScenario$ActivityState: android.app.Activity activity>;

        $r14 = r1.<androidx.test.core.app.ActivityScenario$ActivityState: android.app.Activity activity>;

        if $r15 != $r14 goto label3;

        $r18 = new java.lang.IllegalStateException;

        specialinvoke $r18.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Requested a re-creation of Activity but didn\'t happen");

        throw $r18;

     label3:
        $r16 = r1.<androidx.test.core.app.ActivityScenario$ActivityState: androidx.lifecycle.Lifecycle$State state>;

        virtualinvoke r0.<androidx.test.core.app.ActivityScenario: androidx.test.core.app.ActivityScenario moveToState(androidx.lifecycle.Lifecycle$State)>($r16);

        return r0;
    }

    static androidx.test.internal.platform.app.ActivityInvoker lambda$new$0()
    {
        androidx.test.core.app.InstrumentationActivityInvoker $r0;

        $r0 = new androidx.test.core.app.InstrumentationActivityInvoker;

        specialinvoke $r0.<androidx.test.core.app.InstrumentationActivityInvoker: void <init>()>();

        return $r0;
    }

    static androidx.test.internal.platform.os.ControlledLooper lambda$new$1()
    {
        androidx.test.internal.platform.os.ControlledLooper $r0;

        $r0 = <androidx.test.internal.platform.os.ControlledLooper: androidx.test.internal.platform.os.ControlledLooper NO_OP_CONTROLLED_LOOPER>;

        return $r0;
    }

    static volatile androidx.test.runner.lifecycle.Stage '-$$Nest$fgetcurrentActivityStage'(androidx.test.core.app.ActivityScenario)
    {
        androidx.test.core.app.ActivityScenario r0;
        androidx.test.runner.lifecycle.Stage $r1;

        r0 := @parameter0: androidx.test.core.app.ActivityScenario;

        $r1 = r0.<androidx.test.core.app.ActivityScenario: androidx.test.runner.lifecycle.Stage currentActivityStage>;

        return $r1;
    }

    static volatile java.lang.String '-$$Nest$sfgetTAG'()
    {
        java.lang.String $r0;

        $r0 = <androidx.test.core.app.ActivityScenario: java.lang.String TAG>;

        return $r0;
    }

    static volatile java.util.concurrent.locks.Condition '-$$Nest$fgetstateChangedCondition'(androidx.test.core.app.ActivityScenario)
    {
        androidx.test.core.app.ActivityScenario r0;
        java.util.concurrent.locks.Condition $r1;

        r0 := @parameter0: androidx.test.core.app.ActivityScenario;

        $r1 = r0.<androidx.test.core.app.ActivityScenario: java.util.concurrent.locks.Condition stateChangedCondition>;

        return $r1;
    }

    static volatile java.util.concurrent.locks.ReentrantLock '-$$Nest$fgetlock'(androidx.test.core.app.ActivityScenario)
    {
        androidx.test.core.app.ActivityScenario r0;
        java.util.concurrent.locks.ReentrantLock $r1;

        r0 := @parameter0: androidx.test.core.app.ActivityScenario;

        $r1 = r0.<androidx.test.core.app.ActivityScenario: java.util.concurrent.locks.ReentrantLock lock>;

        return $r1;
    }

    static volatile void '-$$Nest$fputcurrentActivity'(androidx.test.core.app.ActivityScenario, android.app.Activity)
    {
        androidx.test.core.app.ActivityScenario r0;
        android.app.Activity r1;

        r0 := @parameter0: androidx.test.core.app.ActivityScenario;

        r1 := @parameter1: android.app.Activity;

        r0.<androidx.test.core.app.ActivityScenario: android.app.Activity currentActivity> = r1;

        return;
    }

    static volatile void '-$$Nest$fputcurrentActivityStage'(androidx.test.core.app.ActivityScenario, androidx.test.runner.lifecycle.Stage)
    {
        androidx.test.core.app.ActivityScenario r0;
        androidx.test.runner.lifecycle.Stage r1;

        r0 := @parameter0: androidx.test.core.app.ActivityScenario;

        r1 := @parameter1: androidx.test.runner.lifecycle.Stage;

        r0.<androidx.test.core.app.ActivityScenario: androidx.test.runner.lifecycle.Stage currentActivityStage> = r1;

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.EnumMap $r2;
        androidx.lifecycle.Lifecycle$State $r3, $r7, $r11, $r15;
        androidx.test.runner.lifecycle.Stage $r4, $r8, $r12, $r16;
        java.util.Map $r5, $r9, $r13, $r17;

        $r0 = class "Landroidx/test/core/app/ActivityScenario;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <androidx.test.core.app.ActivityScenario: java.lang.String TAG> = $r1;

        $r2 = new java.util.EnumMap;

        specialinvoke $r2.<java.util.EnumMap: void <init>(java.lang.Class)>(class "Landroidx/test/runner/lifecycle/Stage;");

        <androidx.test.core.app.ActivityScenario: java.util.Map STEADY_STATES> = $r2;

        $r5 = <androidx.test.core.app.ActivityScenario: java.util.Map STEADY_STATES>;

        $r4 = <androidx.test.runner.lifecycle.Stage: androidx.test.runner.lifecycle.Stage RESUMED>;

        $r3 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State RESUMED>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r3);

        $r9 = <androidx.test.core.app.ActivityScenario: java.util.Map STEADY_STATES>;

        $r8 = <androidx.test.runner.lifecycle.Stage: androidx.test.runner.lifecycle.Stage PAUSED>;

        $r7 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State STARTED>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r7);

        $r13 = <androidx.test.core.app.ActivityScenario: java.util.Map STEADY_STATES>;

        $r12 = <androidx.test.runner.lifecycle.Stage: androidx.test.runner.lifecycle.Stage STOPPED>;

        $r11 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State CREATED>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r11);

        $r17 = <androidx.test.core.app.ActivityScenario: java.util.Map STEADY_STATES>;

        $r16 = <androidx.test.runner.lifecycle.Stage: androidx.test.runner.lifecycle.Stage DESTROYED>;

        $r15 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State DESTROYED>;

        interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, $r15);

        return;
    }

    private void <init>(android.content.Intent)
    {
        androidx.test.core.app.ActivityScenario r0;
        android.content.Intent r1, $r14;
        java.util.concurrent.locks.ReentrantLock $r2, $r3;
        java.util.concurrent.locks.Condition $r4;
        androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda0 $r5;
        java.lang.Object $r6, $r9, $r13;
        androidx.test.internal.platform.app.ActivityInvoker $r7;
        androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda1 $r8;
        androidx.test.internal.platform.os.ControlledLooper $r10;
        androidx.test.runner.lifecycle.Stage $r11;
        androidx.test.core.app.ActivityScenario$1 $r12;

        r0 := @this: androidx.test.core.app.ActivityScenario;

        r1 := @parameter0: android.content.Intent;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r2.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r0.<androidx.test.core.app.ActivityScenario: java.util.concurrent.locks.ReentrantLock lock> = $r2;

        $r3 = r0.<androidx.test.core.app.ActivityScenario: java.util.concurrent.locks.ReentrantLock lock>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()>();

        r0.<androidx.test.core.app.ActivityScenario: java.util.concurrent.locks.Condition stateChangedCondition> = $r4;

        $r5 = <androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda0: androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda0 INSTANCE>;

        $r6 = staticinvoke <androidx.test.internal.platform.ServiceLoaderWrapper: java.lang.Object loadSingleService(java.lang.Class,androidx.test.internal.platform.ServiceLoaderWrapper$Factory)>(class "Landroidx/test/internal/platform/app/ActivityInvoker;", $r5);

        $r7 = (androidx.test.internal.platform.app.ActivityInvoker) $r6;

        r0.<androidx.test.core.app.ActivityScenario: androidx.test.internal.platform.app.ActivityInvoker activityInvoker> = $r7;

        $r8 = <androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda1: androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda1 INSTANCE>;

        $r9 = staticinvoke <androidx.test.internal.platform.ServiceLoaderWrapper: java.lang.Object loadSingleService(java.lang.Class,androidx.test.internal.platform.ServiceLoaderWrapper$Factory)>(class "Landroidx/test/internal/platform/os/ControlledLooper;", $r8);

        $r10 = (androidx.test.internal.platform.os.ControlledLooper) $r9;

        r0.<androidx.test.core.app.ActivityScenario: androidx.test.internal.platform.os.ControlledLooper controlledLooper> = $r10;

        $r11 = <androidx.test.runner.lifecycle.Stage: androidx.test.runner.lifecycle.Stage PRE_ON_CREATE>;

        r0.<androidx.test.core.app.ActivityScenario: androidx.test.runner.lifecycle.Stage currentActivityStage> = $r11;

        $r12 = new androidx.test.core.app.ActivityScenario$1;

        specialinvoke $r12.<androidx.test.core.app.ActivityScenario$1: void <init>(androidx.test.core.app.ActivityScenario)>(r0);

        r0.<androidx.test.core.app.ActivityScenario: androidx.test.runner.lifecycle.ActivityLifecycleCallback activityLifecycleObserver> = $r12;

        $r13 = staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r14 = (android.content.Intent) $r13;

        r0.<androidx.test.core.app.ActivityScenario: android.content.Intent startActivityIntent> = $r14;

        return;
    }

    private void <init>(java.lang.Class)
    {
        androidx.test.core.app.ActivityScenario r0;
        java.lang.Class r1, $r15;
        java.util.concurrent.locks.ReentrantLock $r2, $r3;
        java.util.concurrent.locks.Condition $r4;
        androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda0 $r5;
        java.lang.Object $r6, $r9, $r14, $r17;
        androidx.test.internal.platform.app.ActivityInvoker $r7, $r13;
        androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda1 $r8;
        androidx.test.internal.platform.os.ControlledLooper $r10;
        androidx.test.runner.lifecycle.Stage $r11;
        androidx.test.core.app.ActivityScenario$1 $r12;
        android.content.Intent $r16, $r18;

        r0 := @this: androidx.test.core.app.ActivityScenario;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r2.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r0.<androidx.test.core.app.ActivityScenario: java.util.concurrent.locks.ReentrantLock lock> = $r2;

        $r3 = r0.<androidx.test.core.app.ActivityScenario: java.util.concurrent.locks.ReentrantLock lock>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()>();

        r0.<androidx.test.core.app.ActivityScenario: java.util.concurrent.locks.Condition stateChangedCondition> = $r4;

        $r5 = <androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda0: androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda0 INSTANCE>;

        $r6 = staticinvoke <androidx.test.internal.platform.ServiceLoaderWrapper: java.lang.Object loadSingleService(java.lang.Class,androidx.test.internal.platform.ServiceLoaderWrapper$Factory)>(class "Landroidx/test/internal/platform/app/ActivityInvoker;", $r5);

        $r7 = (androidx.test.internal.platform.app.ActivityInvoker) $r6;

        r0.<androidx.test.core.app.ActivityScenario: androidx.test.internal.platform.app.ActivityInvoker activityInvoker> = $r7;

        $r8 = <androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda1: androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda1 INSTANCE>;

        $r9 = staticinvoke <androidx.test.internal.platform.ServiceLoaderWrapper: java.lang.Object loadSingleService(java.lang.Class,androidx.test.internal.platform.ServiceLoaderWrapper$Factory)>(class "Landroidx/test/internal/platform/os/ControlledLooper;", $r8);

        $r10 = (androidx.test.internal.platform.os.ControlledLooper) $r9;

        r0.<androidx.test.core.app.ActivityScenario: androidx.test.internal.platform.os.ControlledLooper controlledLooper> = $r10;

        $r11 = <androidx.test.runner.lifecycle.Stage: androidx.test.runner.lifecycle.Stage PRE_ON_CREATE>;

        r0.<androidx.test.core.app.ActivityScenario: androidx.test.runner.lifecycle.Stage currentActivityStage> = $r11;

        $r12 = new androidx.test.core.app.ActivityScenario$1;

        specialinvoke $r12.<androidx.test.core.app.ActivityScenario$1: void <init>(androidx.test.core.app.ActivityScenario)>(r0);

        r0.<androidx.test.core.app.ActivityScenario: androidx.test.runner.lifecycle.ActivityLifecycleCallback activityLifecycleObserver> = $r12;

        $r13 = r0.<androidx.test.core.app.ActivityScenario: androidx.test.internal.platform.app.ActivityInvoker activityInvoker>;

        $r14 = staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r15 = (java.lang.Class) $r14;

        $r16 = interfaceinvoke $r13.<androidx.test.internal.platform.app.ActivityInvoker: android.content.Intent getIntentForActivity(java.lang.Class)>($r15);

        $r17 = staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>($r16);

        $r18 = (android.content.Intent) $r17;

        r0.<androidx.test.core.app.ActivityScenario: android.content.Intent startActivityIntent> = $r18;

        return;
    }

    public void close()
    {
        androidx.test.core.app.ActivityScenario r0;
        java.lang.Throwable r1, $r6;
        androidx.lifecycle.Lifecycle$State $r2;
        androidx.test.runner.lifecycle.ActivityLifecycleMonitor $r4;
        androidx.test.runner.lifecycle.ActivityLifecycleCallback $r5;

        r0 := @this: androidx.test.core.app.ActivityScenario;

        staticinvoke <androidx.tracing.Trace: void beginSection(java.lang.String)>("ActivityScenario close");

     label1:
        $r2 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State DESTROYED>;

        virtualinvoke r0.<androidx.test.core.app.ActivityScenario: androidx.test.core.app.ActivityScenario moveToState(androidx.lifecycle.Lifecycle$State)>($r2);

        $r4 = staticinvoke <androidx.test.runner.lifecycle.ActivityLifecycleMonitorRegistry: androidx.test.runner.lifecycle.ActivityLifecycleMonitor getInstance()>();

        $r5 = r0.<androidx.test.core.app.ActivityScenario: androidx.test.runner.lifecycle.ActivityLifecycleCallback activityLifecycleObserver>;

        interfaceinvoke $r4.<androidx.test.runner.lifecycle.ActivityLifecycleMonitor: void removeLifecycleCallback(androidx.test.runner.lifecycle.ActivityLifecycleCallback)>($r5);

     label2:
        staticinvoke <androidx.tracing.Trace: void endSection()>();

        goto label4;

     label3:
        $r6 := @caughtexception;

        r1 = $r6;

        staticinvoke <androidx.tracing.Trace: void endSection()>();

        throw r1;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    void lambda$onActivity$2$androidx-test-core-app-ActivityScenario(androidx.test.core.app.ActivityScenario$ActivityAction)
    {
        androidx.test.core.app.ActivityScenario r0;
        androidx.test.core.app.ActivityScenario$ActivityAction r1;
        java.lang.Throwable r2, $r8;
        java.util.concurrent.locks.ReentrantLock $r3, $r7, $r9;
        android.app.Activity $r4, $r6;

        r0 := @this: androidx.test.core.app.ActivityScenario;

        r1 := @parameter0: androidx.test.core.app.ActivityScenario$ActivityAction;

        staticinvoke <androidx.test.internal.util.Checks: void checkMainThread()>();

        $r3 = r0.<androidx.test.core.app.ActivityScenario: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke $r3.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $r4 = r0.<androidx.test.core.app.ActivityScenario: android.app.Activity currentActivity>;

        staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r4, "Cannot run onActivity since Activity has been destroyed already");

        $r6 = r0.<androidx.test.core.app.ActivityScenario: android.app.Activity currentActivity>;

        interfaceinvoke r1.<androidx.test.core.app.ActivityScenario$ActivityAction: void perform(android.app.Activity)>($r6);

     label2:
        $r7 = r0.<androidx.test.core.app.ActivityScenario: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke $r7.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label4;

     label3:
        $r8 := @caughtexception;

        r2 = $r8;

        $r9 = r0.<androidx.test.core.app.ActivityScenario: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke $r9.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r2;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void launchInternal(android.os.Bundle, boolean)
    {
        androidx.test.core.app.ActivityScenario r0;
        android.os.Bundle r1;
        boolean z0, $z1;
        java.lang.Throwable r2, $r17;
        android.app.Instrumentation $r3, $r6;
        android.content.Context $r4;
        android.content.ContentResolver $r5;
        int $i0;
        androidx.test.runner.lifecycle.ActivityLifecycleMonitor $r7;
        androidx.test.runner.lifecycle.ActivityLifecycleCallback $r8;
        android.content.Intent $r9, $r11, $r13, $r15;
        androidx.test.internal.platform.app.ActivityInvoker $r10, $r12, $r14, $r16;
        java.util.Map $r18;
        java.util.Collection $r19;
        androidx.lifecycle.Lifecycle$State[] $r20, $r22;
        java.lang.Object[] $r21;

        r0 := @this: androidx.test.core.app.ActivityScenario;

        r1 := @parameter0: android.os.Bundle;

        z0 := @parameter1: boolean;

        $r3 = staticinvoke <androidx.test.platform.app.InstrumentationRegistry: android.app.Instrumentation getInstrumentation()>();

        $r4 = virtualinvoke $r3.<android.app.Instrumentation: android.content.Context getTargetContext()>();

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$System: int getInt(android.content.ContentResolver,java.lang.String,int)>($r5, "always_finish_activities", 0);

        if $i0 != 0 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        staticinvoke <androidx.test.internal.util.Checks: void checkState(boolean,java.lang.Object)>($z1, "\"Don\'t keep activities\" developer options must be disabled for ActivityScenario");

        staticinvoke <androidx.test.internal.util.Checks: void checkNotMainThread()>();

        staticinvoke <androidx.tracing.Trace: void beginSection(java.lang.String)>("ActivityScenario launch");

     label03:
        $r6 = staticinvoke <androidx.test.platform.app.InstrumentationRegistry: android.app.Instrumentation getInstrumentation()>();

        virtualinvoke $r6.<android.app.Instrumentation: void waitForIdleSync()>();

        $r7 = staticinvoke <androidx.test.runner.lifecycle.ActivityLifecycleMonitorRegistry: androidx.test.runner.lifecycle.ActivityLifecycleMonitor getInstance()>();

        $r8 = r0.<androidx.test.core.app.ActivityScenario: androidx.test.runner.lifecycle.ActivityLifecycleCallback activityLifecycleObserver>;

        interfaceinvoke $r7.<androidx.test.runner.lifecycle.ActivityLifecycleMonitor: void addLifecycleCallback(androidx.test.runner.lifecycle.ActivityLifecycleCallback)>($r8);

        if r1 != null goto label05;

        if z0 == 0 goto label04;

        $r16 = r0.<androidx.test.core.app.ActivityScenario: androidx.test.internal.platform.app.ActivityInvoker activityInvoker>;

        $r15 = r0.<androidx.test.core.app.ActivityScenario: android.content.Intent startActivityIntent>;

        interfaceinvoke $r16.<androidx.test.internal.platform.app.ActivityInvoker: void startActivityForResult(android.content.Intent)>($r15);

        goto label07;

     label04:
        $r14 = r0.<androidx.test.core.app.ActivityScenario: androidx.test.internal.platform.app.ActivityInvoker activityInvoker>;

        $r13 = r0.<androidx.test.core.app.ActivityScenario: android.content.Intent startActivityIntent>;

        interfaceinvoke $r14.<androidx.test.internal.platform.app.ActivityInvoker: void startActivity(android.content.Intent)>($r13);

        goto label07;

     label05:
        if z0 == 0 goto label06;

        $r12 = r0.<androidx.test.core.app.ActivityScenario: androidx.test.internal.platform.app.ActivityInvoker activityInvoker>;

        $r11 = r0.<androidx.test.core.app.ActivityScenario: android.content.Intent startActivityIntent>;

        interfaceinvoke $r12.<androidx.test.internal.platform.app.ActivityInvoker: void startActivityForResult(android.content.Intent,android.os.Bundle)>($r11, r1);

        goto label07;

     label06:
        $r10 = r0.<androidx.test.core.app.ActivityScenario: androidx.test.internal.platform.app.ActivityInvoker activityInvoker>;

        $r9 = r0.<androidx.test.core.app.ActivityScenario: android.content.Intent startActivityIntent>;

        interfaceinvoke $r10.<androidx.test.internal.platform.app.ActivityInvoker: void startActivity(android.content.Intent,android.os.Bundle)>($r9, r1);

     label07:
        $r18 = <androidx.test.core.app.ActivityScenario: java.util.Map STEADY_STATES>;

        $r19 = interfaceinvoke $r18.<java.util.Map: java.util.Collection values()>();

        $r20 = newarray (androidx.lifecycle.Lifecycle$State)[0];

        $r21 = interfaceinvoke $r19.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r20);

        $r22 = (androidx.lifecycle.Lifecycle$State[]) $r21;

        specialinvoke r0.<androidx.test.core.app.ActivityScenario: void waitForActivityToBecomeAnyOf(androidx.lifecycle.Lifecycle$State[])>($r22);

     label08:
        staticinvoke <androidx.tracing.Trace: void endSection()>();

        goto label10;

     label09:
        $r17 := @caughtexception;

        r2 = $r17;

        staticinvoke <androidx.tracing.Trace: void endSection()>();

        throw r2;

     label10:
        return;

        catch java.lang.Throwable from label03 to label08 with label09;
    }

    private transient void waitForActivityToBecomeAnyOf(androidx.lifecycle.Lifecycle$State[])
    {
        androidx.test.core.app.ActivityScenario r0;
        androidx.lifecycle.Lifecycle$State[] r1;
        java.util.HashSet r2, $r5;
        long l0, $l2, l3;
        java.lang.Throwable r3, $r25, $r30, r32;
        android.app.Instrumentation $r4;
        java.util.List $r6;
        java.util.concurrent.locks.ReentrantLock $r7, $r14, $r24, $r31;
        androidx.test.runner.lifecycle.Stage $r8, $r11, $r17, $r19, $r28;
        java.util.Map $r9, $r12, $r20;
        java.lang.Object $r10, $r13, $r21;
        boolean $z0, $z1, $z2;
        byte $b1;
        java.lang.AssertionError $r15, $r26;
        java.lang.Object[] $r16, $r27;
        java.lang.String $r18, $r29;
        java.util.concurrent.TimeUnit $r22;
        java.util.concurrent.locks.Condition $r23;

        r0 := @this: androidx.test.core.app.ActivityScenario;

        r1 := @parameter0: androidx.lifecycle.Lifecycle$State[];

        $r4 = staticinvoke <androidx.test.platform.app.InstrumentationRegistry: android.app.Instrumentation getInstrumentation()>();

        virtualinvoke $r4.<android.app.Instrumentation: void waitForIdleSync()>();

        $r5 = new java.util.HashSet;

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        specialinvoke $r5.<java.util.HashSet: void <init>(java.util.Collection)>($r6);

        r2 = $r5;

        $r7 = r0.<androidx.test.core.app.ActivityScenario: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke $r7.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label01:
        $r9 = <androidx.test.core.app.ActivityScenario: java.util.Map STEADY_STATES>;

        $r8 = r0.<androidx.test.core.app.ActivityScenario: androidx.test.runner.lifecycle.Stage currentActivityStage>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        $z0 = interfaceinvoke r2.<java.util.Set: boolean contains(java.lang.Object)>($r10);

        if $z0 == 0 goto label03;

     label02:
        $r24 = r0.<androidx.test.core.app.ActivityScenario: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke $r24.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return;

     label03:
        l3 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        l0 = l3 + 45000L;

     label04:
        $b1 = l3 cmp l0;

        if $b1 >= 0 goto label05;

        $r20 = <androidx.test.core.app.ActivityScenario: java.util.Map STEADY_STATES>;

        $r19 = r0.<androidx.test.core.app.ActivityScenario: androidx.test.runner.lifecycle.Stage currentActivityStage>;

        $r21 = interfaceinvoke $r20.<java.util.Map: java.lang.Object get(java.lang.Object)>($r19);

        $z2 = interfaceinvoke r2.<java.util.Set: boolean contains(java.lang.Object)>($r21);

        if $z2 != 0 goto label05;

        $r23 = r0.<androidx.test.core.app.ActivityScenario: java.util.concurrent.locks.Condition stateChangedCondition>;

        $l2 = l0 - l3;

        $r22 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        interfaceinvoke $r23.<java.util.concurrent.locks.Condition: boolean await(long,java.util.concurrent.TimeUnit)>($l2, $r22);

        l3 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        goto label04;

     label05:
        $r12 = <androidx.test.core.app.ActivityScenario: java.util.Map STEADY_STATES>;

        $r11 = r0.<androidx.test.core.app.ActivityScenario: androidx.test.runner.lifecycle.Stage currentActivityStage>;

        $r13 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>($r11);

        $z1 = interfaceinvoke r2.<java.util.Set: boolean contains(java.lang.Object)>($r13);

        if $z1 != 0 goto label06;

        $r15 = new java.lang.AssertionError;

        $r16 = newarray (java.lang.Object)[2];

        $r16[0] = r2;

        $r17 = r0.<androidx.test.core.app.ActivityScenario: androidx.test.runner.lifecycle.Stage currentActivityStage>;

        $r16[1] = $r17;

        $r18 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Activity never becomes requested state \"%s\" (last lifecycle transition = \"%s\")", $r16);

        specialinvoke $r15.<java.lang.AssertionError: void <init>(java.lang.Object)>($r18);

        throw $r15;

     label06:
        $r14 = r0.<androidx.test.core.app.ActivityScenario: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke $r14.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label10;

     label07:
        $r25 := @caughtexception;

        r32 = $r25;

        $r26 = new java.lang.AssertionError;

        $r27 = newarray (java.lang.Object)[2];

        $r27[0] = r2;

        $r28 = r0.<androidx.test.core.app.ActivityScenario: androidx.test.runner.lifecycle.Stage currentActivityStage>;

        $r27[1] = $r28;

        $r29 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Activity never becomes requested state \"%s\" (last lifecycle transition = \"%s\")", $r27);

        specialinvoke $r26.<java.lang.AssertionError: void <init>(java.lang.String,java.lang.Throwable)>($r29, r32);

        throw $r26;

     label08:
        $r30 := @caughtexception;

        r3 = $r30;

     label09:
        $r31 = r0.<androidx.test.core.app.ActivityScenario: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke $r31.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r3;

     label10:
        return;

        catch java.lang.InterruptedException from label01 to label02 with label07;
        catch java.lang.InterruptedException from label03 to label06 with label07;
        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label06 with label08;
        catch java.lang.Throwable from label07 to label09 with label08;
    }

    static volatile boolean '-$$Nest$smactivityMatchesIntent'(android.content.Intent, android.app.Activity)
    {
        android.content.Intent r0;
        android.app.Activity r1;
        boolean $z0;

        r0 := @parameter0: android.content.Intent;

        r1 := @parameter1: android.app.Activity;

        $z0 = staticinvoke <androidx.test.core.app.ActivityScenario: boolean activityMatchesIntent(android.content.Intent,android.app.Activity)>(r0, r1);

        return $z0;
    }

    private static boolean activityMatchesIntent(android.content.Intent, android.app.Activity)
    {
        android.content.Intent r0, r2;
        android.app.Activity r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.lang.String $r3, $r4, $r7, $r8, $r12, $r13, $r16, $r17;
        android.net.Uri $r5, $r6;
        android.content.ComponentName $r9, $r14, $r15;
        java.util.Set $r10, $r11;
        int $i0;

        r0 := @parameter0: android.content.Intent;

        r1 := @parameter1: android.app.Activity;

        r2 = virtualinvoke r1.<android.app.Activity: android.content.Intent getIntent()>();

        $r3 = virtualinvoke r0.<android.content.Intent: java.lang.String getAction()>();

        $r4 = virtualinvoke r2.<android.content.Intent: java.lang.String getAction()>();

        $z1 = staticinvoke <androidx.test.core.app.ActivityScenario: boolean equals(java.lang.Object,java.lang.Object)>($r3, $r4);

        if $z1 != 0 goto label1;

        return 0;

     label1:
        $r5 = virtualinvoke r0.<android.content.Intent: android.net.Uri getData()>();

        $r6 = virtualinvoke r2.<android.content.Intent: android.net.Uri getData()>();

        $z2 = staticinvoke <androidx.test.core.app.ActivityScenario: boolean equals(java.lang.Object,java.lang.Object)>($r5, $r6);

        if $z2 != 0 goto label2;

        return 0;

     label2:
        $r7 = virtualinvoke r0.<android.content.Intent: java.lang.String getType()>();

        $r8 = virtualinvoke r2.<android.content.Intent: java.lang.String getType()>();

        $z3 = staticinvoke <androidx.test.core.app.ActivityScenario: boolean equals(java.lang.Object,java.lang.Object)>($r7, $r8);

        if $z3 != 0 goto label3;

        return 0;

     label3:
        $z4 = staticinvoke <androidx.test.core.app.ActivityScenario: boolean hasPackageEquivalentComponent(android.content.Intent)>(r0);

        if $z4 == 0 goto label4;

        $z9 = staticinvoke <androidx.test.core.app.ActivityScenario: boolean hasPackageEquivalentComponent(android.content.Intent)>(r2);

        if $z9 == 0 goto label4;

        $z10 = 1;

        goto label5;

     label4:
        $z10 = 0;

     label5:
        z0 = $z10;

        if z0 != 0 goto label6;

        $r16 = virtualinvoke r0.<android.content.Intent: java.lang.String getPackage()>();

        $r17 = virtualinvoke r2.<android.content.Intent: java.lang.String getPackage()>();

        $z8 = staticinvoke <androidx.test.core.app.ActivityScenario: boolean equals(java.lang.Object,java.lang.Object)>($r16, $r17);

        if $z8 != 0 goto label6;

        return 0;

     label6:
        $r9 = virtualinvoke r0.<android.content.Intent: android.content.ComponentName getComponent()>();

        if $r9 == null goto label7;

        $r14 = virtualinvoke r0.<android.content.Intent: android.content.ComponentName getComponent()>();

        $r15 = virtualinvoke r2.<android.content.Intent: android.content.ComponentName getComponent()>();

        $z7 = staticinvoke <androidx.test.core.app.ActivityScenario: boolean equals(java.lang.Object,java.lang.Object)>($r14, $r15);

        if $z7 != 0 goto label7;

        return 0;

     label7:
        $r10 = virtualinvoke r0.<android.content.Intent: java.util.Set getCategories()>();

        $r11 = virtualinvoke r2.<android.content.Intent: java.util.Set getCategories()>();

        $z5 = staticinvoke <androidx.test.core.app.ActivityScenario: boolean equals(java.lang.Object,java.lang.Object)>($r10, $r11);

        if $z5 != 0 goto label8;

        return 0;

     label8:
        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 29 goto label9;

        $r12 = virtualinvoke r0.<android.content.Intent: java.lang.String getIdentifier()>();

        $r13 = virtualinvoke r2.<android.content.Intent: java.lang.String getIdentifier()>();

        $z6 = staticinvoke <androidx.test.core.app.ActivityScenario: boolean equals(java.lang.Object,java.lang.Object)>($r12, $r13);

        if $z6 != 0 goto label9;

        return 0;

     label9:
        return 1;
    }

    private static boolean equals(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 == r1 goto label1;

        if r0 == null goto label2;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    private static boolean hasPackageEquivalentComponent(android.content.Intent)
    {
        android.content.Intent r0;
        android.content.ComponentName r1;
        java.lang.String r2, $r3;
        boolean $z0, $z1;

        r0 := @parameter0: android.content.Intent;

        r1 = virtualinvoke r0.<android.content.Intent: android.content.ComponentName getComponent()>();

        r2 = virtualinvoke r0.<android.content.Intent: java.lang.String getPackage()>();

        if r1 == null goto label2;

        if r2 == null goto label1;

        $r3 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda0
<androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda0: androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda0 INSTANCE>
    public final java.lang.Object create()
    {
        androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda0 r0;
        androidx.test.internal.platform.app.ActivityInvoker $r1;

        r0 := @this: androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda0;

        $r1 = staticinvoke <androidx.test.core.app.ActivityScenario: androidx.test.internal.platform.app.ActivityInvoker lambda$new$0()>();

        return $r1;
    }

    static void <clinit>()
    {
        androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda0 $r0;

        $r0 = new androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda0;

        specialinvoke $r0.<androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda0: void <init>()>();

        <androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda0: androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda0 INSTANCE> = $r0;

        return;
    }

    private void <init>()
    {
        androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda0 r0;

        r0 := @this: androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda0;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda1
<androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda1: androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda1 INSTANCE>
    public final java.lang.Object create()
    {
        androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda1 r0;
        androidx.test.internal.platform.os.ControlledLooper $r1;

        r0 := @this: androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda1;

        $r1 = staticinvoke <androidx.test.core.app.ActivityScenario: androidx.test.internal.platform.os.ControlledLooper lambda$new$1()>();

        return $r1;
    }

    static void <clinit>()
    {
        androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda1 $r0;

        $r0 = new androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda1;

        specialinvoke $r0.<androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda1: void <init>()>();

        <androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda1: androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda1 INSTANCE> = $r0;

        return;
    }

    private void <init>()
    {
        androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda1 r0;

        r0 := @this: androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda2
<androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda2: androidx.test.core.app.ActivityScenario f$0>
<androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda2: androidx.test.core.app.ActivityScenario$ActivityAction f$1>
    public void <init>(androidx.test.core.app.ActivityScenario, androidx.test.core.app.ActivityScenario$ActivityAction)
    {
        androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda2 r0;
        androidx.test.core.app.ActivityScenario r1;
        androidx.test.core.app.ActivityScenario$ActivityAction r2;

        r0 := @this: androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda2;

        r1 := @parameter0: androidx.test.core.app.ActivityScenario;

        r2 := @parameter1: androidx.test.core.app.ActivityScenario$ActivityAction;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda2: androidx.test.core.app.ActivityScenario f$0> = r1;

        r0.<androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda2: androidx.test.core.app.ActivityScenario$ActivityAction f$1> = r2;

        return;
    }

    public final void run()
    {
        androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda2 r0;
        androidx.test.core.app.ActivityScenario$ActivityAction $r1;
        androidx.test.core.app.ActivityScenario $r2;

        r0 := @this: androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda2;

        $r2 = r0.<androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda2: androidx.test.core.app.ActivityScenario f$0>;

        $r1 = r0.<androidx.test.core.app.ActivityScenario$$ExternalSyntheticLambda2: androidx.test.core.app.ActivityScenario$ActivityAction f$1>;

        virtualinvoke $r2.<androidx.test.core.app.ActivityScenario: void lambda$onActivity$2$androidx-test-core-app-ActivityScenario(androidx.test.core.app.ActivityScenario$ActivityAction)>($r1);

        return;
    }

androidx.test.core.app.ActivityScenario$1
<androidx.test.core.app.ActivityScenario$1: androidx.test.core.app.ActivityScenario this$0>
    void <init>(androidx.test.core.app.ActivityScenario)
    {
        androidx.test.core.app.ActivityScenario$1 r0;
        androidx.test.core.app.ActivityScenario r1;

        r0 := @this: androidx.test.core.app.ActivityScenario$1;

        r1 := @parameter0: androidx.test.core.app.ActivityScenario;

        r0.<androidx.test.core.app.ActivityScenario$1: androidx.test.core.app.ActivityScenario this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onActivityLifecycleChanged(android.app.Activity, androidx.test.runner.lifecycle.Stage)
    {
        androidx.test.core.app.ActivityScenario$1 r0;
        android.app.Activity r1, $r20, $r34, $r38, $r51;
        androidx.test.runner.lifecycle.Stage r2, $r10, $r11, $r13, $r18, $r29;
        java.lang.Throwable r3, $r48;
        androidx.test.core.app.ActivityScenario $r4, $r6, $r8, $r12, $r14, $r17, $r19, $r22, $r24, $r28, $r31, $r33, $r37, $r40, $r44, $r49;
        android.content.Intent $r5, $r45, $r46;
        boolean $z0;
        java.util.concurrent.locks.ReentrantLock $r7, $r25, $r32, $r41, $r50;
        int[] $r9;
        int $i0, $i1;
        java.lang.String $r15, $r21, $r26, $r30, $r35, $r39, $r42, $r47;
        java.lang.Object[] $r16, $r27, $r36, $r43;
        java.util.concurrent.locks.Condition $r23;

        r0 := @this: androidx.test.core.app.ActivityScenario$1;

        r1 := @parameter0: android.app.Activity;

        r2 := @parameter1: androidx.test.runner.lifecycle.Stage;

        $r4 = r0.<androidx.test.core.app.ActivityScenario$1: androidx.test.core.app.ActivityScenario this$0>;

        $r5 = staticinvoke <androidx.test.core.app.ActivityScenario: android.content.Intent '-$$Nest$fgetstartActivityIntent'(androidx.test.core.app.ActivityScenario)>($r4);

        $z0 = staticinvoke <androidx.test.core.app.ActivityScenario: boolean '-$$Nest$smactivityMatchesIntent'(android.content.Intent,android.app.Activity)>($r5, r1);

        if $z0 != 0 goto label01;

        $r42 = staticinvoke <androidx.test.core.app.ActivityScenario: java.lang.String '-$$Nest$sfgetTAG'()>();

        $r43 = newarray (java.lang.Object)[3];

        $r44 = r0.<androidx.test.core.app.ActivityScenario$1: androidx.test.core.app.ActivityScenario this$0>;

        $r45 = staticinvoke <androidx.test.core.app.ActivityScenario: android.content.Intent '-$$Nest$fgetstartActivityIntent'(androidx.test.core.app.ActivityScenario)>($r44);

        $r43[0] = $r45;

        $r46 = virtualinvoke r1.<android.app.Activity: android.content.Intent getIntent()>();

        $r43[1] = $r46;

        $r43[2] = r1;

        $r47 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Activity lifecycle changed event received but ignored because the intent does not match. startActivityIntent=%s, activity.getIntent()=%s, activity=%s", $r43);

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>($r42, $r47);

        return;

     label01:
        $r6 = r0.<androidx.test.core.app.ActivityScenario$1: androidx.test.core.app.ActivityScenario this$0>;

        $r7 = staticinvoke <androidx.test.core.app.ActivityScenario: java.util.concurrent.locks.ReentrantLock '-$$Nest$fgetlock'(androidx.test.core.app.ActivityScenario)>($r6);

        virtualinvoke $r7.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label02:
        $r9 = <androidx.test.core.app.ActivityScenario$2: int[] $SwitchMap$androidx$test$runner$lifecycle$Stage>;

        $r8 = r0.<androidx.test.core.app.ActivityScenario$1: androidx.test.core.app.ActivityScenario this$0>;

        $r10 = staticinvoke <androidx.test.core.app.ActivityScenario: androidx.test.runner.lifecycle.Stage '-$$Nest$fgetcurrentActivityStage'(androidx.test.core.app.ActivityScenario)>($r8);

        $i0 = virtualinvoke $r10.<androidx.test.runner.lifecycle.Stage: int ordinal()>();

        $i1 = $r9[$i0];

        lookupswitch($i1)
        {
            case 1: goto label03;
            case 2: goto label03;
            default: goto label05;
        };

     label03:
        $r11 = <androidx.test.runner.lifecycle.Stage: androidx.test.runner.lifecycle.Stage CREATED>;

        if r2 == $r11 goto label07;

        $r26 = staticinvoke <androidx.test.core.app.ActivityScenario: java.lang.String '-$$Nest$sfgetTAG'()>();

        $r27 = newarray (java.lang.Object)[1];

        $r28 = r0.<androidx.test.core.app.ActivityScenario$1: androidx.test.core.app.ActivityScenario this$0>;

        $r29 = staticinvoke <androidx.test.core.app.ActivityScenario: androidx.test.runner.lifecycle.Stage '-$$Nest$fgetcurrentActivityStage'(androidx.test.core.app.ActivityScenario)>($r28);

        $r27[0] = $r29;

        $r30 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Activity lifecycle changed event received but ignored because the reported transition was not ON_CREATE while the last known transition was %s", $r27);

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>($r26, $r30);

     label04:
        $r31 = r0.<androidx.test.core.app.ActivityScenario$1: androidx.test.core.app.ActivityScenario this$0>;

        $r32 = staticinvoke <androidx.test.core.app.ActivityScenario: java.util.concurrent.locks.ReentrantLock '-$$Nest$fgetlock'(androidx.test.core.app.ActivityScenario)>($r31);

        virtualinvoke $r32.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return;

     label05:
        $r33 = r0.<androidx.test.core.app.ActivityScenario$1: androidx.test.core.app.ActivityScenario this$0>;

        $r34 = staticinvoke <androidx.test.core.app.ActivityScenario: android.app.Activity '-$$Nest$fgetcurrentActivity'(androidx.test.core.app.ActivityScenario)>($r33);

        if $r34 == r1 goto label07;

        $r35 = staticinvoke <androidx.test.core.app.ActivityScenario: java.lang.String '-$$Nest$sfgetTAG'()>();

        $r36 = newarray (java.lang.Object)[2];

        $r37 = r0.<androidx.test.core.app.ActivityScenario$1: androidx.test.core.app.ActivityScenario this$0>;

        $r38 = staticinvoke <androidx.test.core.app.ActivityScenario: android.app.Activity '-$$Nest$fgetcurrentActivity'(androidx.test.core.app.ActivityScenario)>($r37);

        $r36[0] = $r38;

        $r36[1] = r1;

        $r39 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Activity lifecycle changed event received but ignored because the activity instance does not match. currentActivity=%s, receivedActivity=%s", $r36);

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>($r35, $r39);

     label06:
        $r40 = r0.<androidx.test.core.app.ActivityScenario$1: androidx.test.core.app.ActivityScenario this$0>;

        $r41 = staticinvoke <androidx.test.core.app.ActivityScenario: java.util.concurrent.locks.ReentrantLock '-$$Nest$fgetlock'(androidx.test.core.app.ActivityScenario)>($r40);

        virtualinvoke $r41.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return;

     label07:
        $r12 = r0.<androidx.test.core.app.ActivityScenario$1: androidx.test.core.app.ActivityScenario this$0>;

        staticinvoke <androidx.test.core.app.ActivityScenario: void '-$$Nest$fputcurrentActivityStage'(androidx.test.core.app.ActivityScenario,androidx.test.runner.lifecycle.Stage)>($r12, r2);

        $r14 = r0.<androidx.test.core.app.ActivityScenario$1: androidx.test.core.app.ActivityScenario this$0>;

        $r13 = <androidx.test.runner.lifecycle.Stage: androidx.test.runner.lifecycle.Stage DESTROYED>;

        if r2 == $r13 goto label08;

        $r51 = r1;

        goto label09;

     label08:
        $r51 = null;

     label09:
        staticinvoke <androidx.test.core.app.ActivityScenario: void '-$$Nest$fputcurrentActivity'(androidx.test.core.app.ActivityScenario,android.app.Activity)>($r14, $r51);

        $r15 = staticinvoke <androidx.test.core.app.ActivityScenario: java.lang.String '-$$Nest$sfgetTAG'()>();

        $r16 = newarray (java.lang.Object)[2];

        $r17 = r0.<androidx.test.core.app.ActivityScenario$1: androidx.test.core.app.ActivityScenario this$0>;

        $r18 = staticinvoke <androidx.test.core.app.ActivityScenario: androidx.test.runner.lifecycle.Stage '-$$Nest$fgetcurrentActivityStage'(androidx.test.core.app.ActivityScenario)>($r17);

        $r16[0] = $r18;

        $r19 = r0.<androidx.test.core.app.ActivityScenario$1: androidx.test.core.app.ActivityScenario this$0>;

        $r20 = staticinvoke <androidx.test.core.app.ActivityScenario: android.app.Activity '-$$Nest$fgetcurrentActivity'(androidx.test.core.app.ActivityScenario)>($r19);

        $r16[1] = $r20;

        $r21 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Update currentActivityStage to %s, currentActivity=%s", $r16);

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>($r15, $r21);

        $r22 = r0.<androidx.test.core.app.ActivityScenario$1: androidx.test.core.app.ActivityScenario this$0>;

        $r23 = staticinvoke <androidx.test.core.app.ActivityScenario: java.util.concurrent.locks.Condition '-$$Nest$fgetstateChangedCondition'(androidx.test.core.app.ActivityScenario)>($r22);

        interfaceinvoke $r23.<java.util.concurrent.locks.Condition: void signal()>();

     label10:
        $r24 = r0.<androidx.test.core.app.ActivityScenario$1: androidx.test.core.app.ActivityScenario this$0>;

        $r25 = staticinvoke <androidx.test.core.app.ActivityScenario: java.util.concurrent.locks.ReentrantLock '-$$Nest$fgetlock'(androidx.test.core.app.ActivityScenario)>($r24);

        virtualinvoke $r25.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label12;

     label11:
        $r48 := @caughtexception;

        r3 = $r48;

        $r49 = r0.<androidx.test.core.app.ActivityScenario$1: androidx.test.core.app.ActivityScenario this$0>;

        $r50 = staticinvoke <androidx.test.core.app.ActivityScenario: java.util.concurrent.locks.ReentrantLock '-$$Nest$fgetlock'(androidx.test.core.app.ActivityScenario)>($r49);

        virtualinvoke $r50.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r3;

     label12:
        return;

        catch java.lang.Throwable from label02 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label10 with label11;
    }

androidx.test.core.app.ActivityScenario$2
<androidx.test.core.app.ActivityScenario$2: int[] $SwitchMap$androidx$test$runner$lifecycle$Stage>
<androidx.test.core.app.ActivityScenario$2: int[] $SwitchMap$androidx$lifecycle$Lifecycle$State>
    static void <clinit>()
    {
        androidx.lifecycle.Lifecycle$State[] $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        int[] $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15;
        androidx.lifecycle.Lifecycle$State $r2, $r4, $r6, $r8;
        androidx.test.runner.lifecycle.Stage[] $r10;
        androidx.test.runner.lifecycle.Stage $r12, $r14;
        java.lang.Throwable $r16, $r17, $r18, $r19, $r20, $r21, r22, r23, r24, r25, r26, r27;

        $r0 = staticinvoke <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State[] values()>();

        $i0 = lengthof $r0;

        $r1 = newarray (int)[$i0];

        <androidx.test.core.app.ActivityScenario$2: int[] $SwitchMap$androidx$lifecycle$Lifecycle$State> = $r1;

     label01:
        $r3 = <androidx.test.core.app.ActivityScenario$2: int[] $SwitchMap$androidx$lifecycle$Lifecycle$State>;

        $r2 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State CREATED>;

        $i1 = virtualinvoke $r2.<androidx.lifecycle.Lifecycle$State: int ordinal()>();

        $r3[$i1] = 1;

     label02:
        goto label04;

     label03:
        $r19 := @caughtexception;

        r22 = $r19;

     label04:
        $r5 = <androidx.test.core.app.ActivityScenario$2: int[] $SwitchMap$androidx$lifecycle$Lifecycle$State>;

        $r4 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State STARTED>;

        $i2 = virtualinvoke $r4.<androidx.lifecycle.Lifecycle$State: int ordinal()>();

        $r5[$i2] = 2;

     label05:
        goto label07;

     label06:
        $r20 := @caughtexception;

        r23 = $r20;

     label07:
        $r7 = <androidx.test.core.app.ActivityScenario$2: int[] $SwitchMap$androidx$lifecycle$Lifecycle$State>;

        $r6 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State RESUMED>;

        $i3 = virtualinvoke $r6.<androidx.lifecycle.Lifecycle$State: int ordinal()>();

        $r7[$i3] = 3;

     label08:
        goto label10;

     label09:
        $r17 := @caughtexception;

        r24 = $r17;

     label10:
        $r9 = <androidx.test.core.app.ActivityScenario$2: int[] $SwitchMap$androidx$lifecycle$Lifecycle$State>;

        $r8 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State DESTROYED>;

        $i4 = virtualinvoke $r8.<androidx.lifecycle.Lifecycle$State: int ordinal()>();

        $r9[$i4] = 4;

     label11:
        goto label13;

     label12:
        $r16 := @caughtexception;

        r25 = $r16;

     label13:
        $r10 = staticinvoke <androidx.test.runner.lifecycle.Stage: androidx.test.runner.lifecycle.Stage[] values()>();

        $i5 = lengthof $r10;

        $r11 = newarray (int)[$i5];

        <androidx.test.core.app.ActivityScenario$2: int[] $SwitchMap$androidx$test$runner$lifecycle$Stage> = $r11;

     label14:
        $r13 = <androidx.test.core.app.ActivityScenario$2: int[] $SwitchMap$androidx$test$runner$lifecycle$Stage>;

        $r12 = <androidx.test.runner.lifecycle.Stage: androidx.test.runner.lifecycle.Stage PRE_ON_CREATE>;

        $i6 = virtualinvoke $r12.<androidx.test.runner.lifecycle.Stage: int ordinal()>();

        $r13[$i6] = 1;

     label15:
        goto label17;

     label16:
        $r21 := @caughtexception;

        r26 = $r21;

     label17:
        $r15 = <androidx.test.core.app.ActivityScenario$2: int[] $SwitchMap$androidx$test$runner$lifecycle$Stage>;

        $r14 = <androidx.test.runner.lifecycle.Stage: androidx.test.runner.lifecycle.Stage DESTROYED>;

        $i7 = virtualinvoke $r14.<androidx.test.runner.lifecycle.Stage: int ordinal()>();

        $r15[$i7] = 2;

     label18:
        goto label20;

     label19:
        $r18 := @caughtexception;

        r27 = $r18;

     label20:
        return;

        catch java.lang.NoSuchFieldError from label01 to label02 with label03;
        catch java.lang.NoSuchFieldError from label04 to label05 with label06;
        catch java.lang.NoSuchFieldError from label07 to label08 with label09;
        catch java.lang.NoSuchFieldError from label10 to label11 with label12;
        catch java.lang.NoSuchFieldError from label14 to label15 with label16;
        catch java.lang.NoSuchFieldError from label17 to label18 with label19;
    }

androidx.test.core.app.ActivityScenario$ActivityAction
<androidx.test.core.app.ActivityScenario$ActivityAction: void perform(android.app.Activity)>
androidx.test.core.app.ActivityScenario$ActivityState
<androidx.test.core.app.ActivityScenario$ActivityState: android.app.Activity activity>
<androidx.test.core.app.ActivityScenario$ActivityState: androidx.lifecycle.Lifecycle$State state>
<androidx.test.core.app.ActivityScenario$ActivityState: androidx.test.runner.lifecycle.Stage stage>
    void <init>(android.app.Activity, androidx.lifecycle.Lifecycle$State, androidx.test.runner.lifecycle.Stage)
    {
        androidx.test.core.app.ActivityScenario$ActivityState r0;
        android.app.Activity r1;
        androidx.lifecycle.Lifecycle$State r2;
        androidx.test.runner.lifecycle.Stage r3;

        r0 := @this: androidx.test.core.app.ActivityScenario$ActivityState;

        r1 := @parameter0: android.app.Activity;

        r2 := @parameter1: androidx.lifecycle.Lifecycle$State;

        r3 := @parameter2: androidx.test.runner.lifecycle.Stage;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.test.core.app.ActivityScenario$ActivityState: android.app.Activity activity> = r1;

        r0.<androidx.test.core.app.ActivityScenario$ActivityState: androidx.lifecycle.Lifecycle$State state> = r2;

        r0.<androidx.test.core.app.ActivityScenario$ActivityState: androidx.test.runner.lifecycle.Stage stage> = r3;

        return;
    }

