androidx.media3.exoplayer.mediacodec.BatchBuffer
<androidx.media3.exoplayer.mediacodec.BatchBuffer: int DEFAULT_MAX_SAMPLE_COUNT>
<androidx.media3.exoplayer.mediacodec.BatchBuffer: int MAX_SIZE_BYTES>
<androidx.media3.exoplayer.mediacodec.BatchBuffer: long lastSampleTimeUs>
<androidx.media3.exoplayer.mediacodec.BatchBuffer: int sampleCount>
<androidx.media3.exoplayer.mediacodec.BatchBuffer: int maxSampleCount>
    public void <init>()
    {
        androidx.media3.exoplayer.mediacodec.BatchBuffer r0;

        r0 := @this: androidx.media3.exoplayer.mediacodec.BatchBuffer;

        specialinvoke r0.<androidx.media3.decoder.DecoderInputBuffer: void <init>(int)>(2);

        r0.<androidx.media3.exoplayer.mediacodec.BatchBuffer: int maxSampleCount> = 32;

        return;
    }

    public void clear()
    {
        androidx.media3.exoplayer.mediacodec.BatchBuffer r0;

        r0 := @this: androidx.media3.exoplayer.mediacodec.BatchBuffer;

        specialinvoke r0.<androidx.media3.decoder.DecoderInputBuffer: void clear()>();

        r0.<androidx.media3.exoplayer.mediacodec.BatchBuffer: int sampleCount> = 0;

        return;
    }

    public void setMaxSampleCount(int)
    {
        androidx.media3.exoplayer.mediacodec.BatchBuffer r0;
        int i0;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.mediacodec.BatchBuffer;

        i0 := @parameter0: int;

        if i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean)>($z0);

        r0.<androidx.media3.exoplayer.mediacodec.BatchBuffer: int maxSampleCount> = i0;

        return;
    }

    public long getFirstSampleTimeUs()
    {
        androidx.media3.exoplayer.mediacodec.BatchBuffer r0;
        long $l0;

        r0 := @this: androidx.media3.exoplayer.mediacodec.BatchBuffer;

        $l0 = r0.<androidx.media3.exoplayer.mediacodec.BatchBuffer: long timeUs>;

        return $l0;
    }

    public long getLastSampleTimeUs()
    {
        androidx.media3.exoplayer.mediacodec.BatchBuffer r0;
        long $l0;

        r0 := @this: androidx.media3.exoplayer.mediacodec.BatchBuffer;

        $l0 = r0.<androidx.media3.exoplayer.mediacodec.BatchBuffer: long lastSampleTimeUs>;

        return $l0;
    }

    public int getSampleCount()
    {
        androidx.media3.exoplayer.mediacodec.BatchBuffer r0;
        int $i0;

        r0 := @this: androidx.media3.exoplayer.mediacodec.BatchBuffer;

        $i0 = r0.<androidx.media3.exoplayer.mediacodec.BatchBuffer: int sampleCount>;

        return $i0;
    }

    public boolean hasSamples()
    {
        androidx.media3.exoplayer.mediacodec.BatchBuffer r0;
        int $i0;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.mediacodec.BatchBuffer;

        $i0 = r0.<androidx.media3.exoplayer.mediacodec.BatchBuffer: int sampleCount>;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean append(androidx.media3.decoder.DecoderInputBuffer)
    {
        androidx.media3.exoplayer.mediacodec.BatchBuffer r0;
        androidx.media3.decoder.DecoderInputBuffer r1;
        java.nio.ByteBuffer r2, $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        int $i0, $i1, $i3;
        long $l2, $l4;

        r0 := @this: androidx.media3.exoplayer.mediacodec.BatchBuffer;

        r1 := @parameter0: androidx.media3.decoder.DecoderInputBuffer;

        $z0 = virtualinvoke r1.<androidx.media3.decoder.DecoderInputBuffer: boolean isEncrypted()>();

        if $z0 != 0 goto label01;

        $z5 = 1;

        goto label02;

     label01:
        $z5 = 0;

     label02:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean)>($z5);

        $z1 = virtualinvoke r1.<androidx.media3.decoder.DecoderInputBuffer: boolean hasSupplementalData()>();

        if $z1 != 0 goto label03;

        $z6 = 1;

        goto label04;

     label03:
        $z6 = 0;

     label04:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean)>($z6);

        $z2 = virtualinvoke r1.<androidx.media3.decoder.DecoderInputBuffer: boolean isEndOfStream()>();

        if $z2 != 0 goto label05;

        $z7 = 1;

        goto label06;

     label05:
        $z7 = 0;

     label06:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean)>($z7);

        $z3 = specialinvoke r0.<androidx.media3.exoplayer.mediacodec.BatchBuffer: boolean canAppendSampleBuffer(androidx.media3.decoder.DecoderInputBuffer)>(r1);

        if $z3 != 0 goto label07;

        return 0;

     label07:
        $i0 = r0.<androidx.media3.exoplayer.mediacodec.BatchBuffer: int sampleCount>;

        $i1 = $i0 + 1;

        r0.<androidx.media3.exoplayer.mediacodec.BatchBuffer: int sampleCount> = $i1;

        if $i0 != 0 goto label08;

        $l4 = r1.<androidx.media3.decoder.DecoderInputBuffer: long timeUs>;

        r0.<androidx.media3.exoplayer.mediacodec.BatchBuffer: long timeUs> = $l4;

        $z4 = virtualinvoke r1.<androidx.media3.decoder.DecoderInputBuffer: boolean isKeyFrame()>();

        if $z4 == 0 goto label08;

        virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.BatchBuffer: void setFlags(int)>(1);

     label08:
        $z8 = virtualinvoke r1.<androidx.media3.decoder.DecoderInputBuffer: boolean isDecodeOnly()>();

        if $z8 == 0 goto label09;

        virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.BatchBuffer: void setFlags(int)>(-2147483648);

     label09:
        r2 = r1.<androidx.media3.decoder.DecoderInputBuffer: java.nio.ByteBuffer data>;

        if r2 == null goto label10;

        $i3 = virtualinvoke r2.<java.nio.ByteBuffer: int remaining()>();

        virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.BatchBuffer: void ensureSpaceForWrite(int)>($i3);

        $r3 = r0.<androidx.media3.exoplayer.mediacodec.BatchBuffer: java.nio.ByteBuffer data>;

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>(r2);

     label10:
        $l2 = r1.<androidx.media3.decoder.DecoderInputBuffer: long timeUs>;

        r0.<androidx.media3.exoplayer.mediacodec.BatchBuffer: long lastSampleTimeUs> = $l2;

        return 1;
    }

    private boolean canAppendSampleBuffer(androidx.media3.decoder.DecoderInputBuffer)
    {
        androidx.media3.exoplayer.mediacodec.BatchBuffer r0;
        androidx.media3.decoder.DecoderInputBuffer r1;
        java.nio.ByteBuffer r2, $r3, $r4;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: androidx.media3.exoplayer.mediacodec.BatchBuffer;

        r1 := @parameter0: androidx.media3.decoder.DecoderInputBuffer;

        $z0 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.BatchBuffer: boolean hasSamples()>();

        if $z0 != 0 goto label1;

        return 1;

     label1:
        $i1 = r0.<androidx.media3.exoplayer.mediacodec.BatchBuffer: int sampleCount>;

        $i0 = r0.<androidx.media3.exoplayer.mediacodec.BatchBuffer: int maxSampleCount>;

        if $i1 < $i0 goto label2;

        return 0;

     label2:
        $z1 = virtualinvoke r1.<androidx.media3.decoder.DecoderInputBuffer: boolean isDecodeOnly()>();

        $z2 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.BatchBuffer: boolean isDecodeOnly()>();

        if $z1 == $z2 goto label3;

        return 0;

     label3:
        r2 = r1.<androidx.media3.decoder.DecoderInputBuffer: java.nio.ByteBuffer data>;

        if r2 == null goto label4;

        $r3 = r0.<androidx.media3.exoplayer.mediacodec.BatchBuffer: java.nio.ByteBuffer data>;

        if $r3 == null goto label4;

        $r4 = r0.<androidx.media3.exoplayer.mediacodec.BatchBuffer: java.nio.ByteBuffer data>;

        $i2 = virtualinvoke $r4.<java.nio.ByteBuffer: int position()>();

        $i3 = virtualinvoke r2.<java.nio.ByteBuffer: int remaining()>();

        $i4 = $i2 + $i3;

        if $i4 <= 3072000 goto label4;

        return 0;

     label4:
        return 1;
    }

