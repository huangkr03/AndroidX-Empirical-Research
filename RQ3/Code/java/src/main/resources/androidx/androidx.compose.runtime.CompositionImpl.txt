androidx.compose.runtime.CompositionImpl
<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.CompositionContext parent>
<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.Applier applier>
<androidx.compose.runtime.CompositionImpl: java.util.concurrent.atomic.AtomicReference pendingModifications>
<androidx.compose.runtime.CompositionImpl: java.lang.Object lock>
<androidx.compose.runtime.CompositionImpl: java.util.HashSet abandonSet>
<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.SlotTable slotTable>
<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.collection.IdentityScopeMap observations>
<androidx.compose.runtime.CompositionImpl: java.util.HashSet conditionallyInvalidatedScopes>
<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.collection.IdentityScopeMap derivedStates>
<androidx.compose.runtime.CompositionImpl: java.util.List changes>
<androidx.compose.runtime.CompositionImpl: java.util.List lateChanges>
<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.collection.IdentityScopeMap observationsProcessed>
<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.collection.IdentityArrayMap invalidations>
<androidx.compose.runtime.CompositionImpl: boolean pendingInvalidScopes>
<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.CompositionImpl invalidationDelegate>
<androidx.compose.runtime.CompositionImpl: int invalidationDelegateGroup>
<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.ComposerImpl composer>
<androidx.compose.runtime.CompositionImpl: kotlin.coroutines.CoroutineContext _recomposeContext>
<androidx.compose.runtime.CompositionImpl: boolean isRoot>
<androidx.compose.runtime.CompositionImpl: boolean disposed>
<androidx.compose.runtime.CompositionImpl: kotlin.jvm.functions.Function2 composable>
    public void <init>(androidx.compose.runtime.CompositionContext, androidx.compose.runtime.Applier, kotlin.coroutines.CoroutineContext)
    {
        androidx.compose.runtime.CompositionImpl r0, r6;
        androidx.compose.runtime.CompositionContext r1, $r27, $r30, $r31;
        androidx.compose.runtime.Applier r2, $r28;
        kotlin.coroutines.CoroutineContext r3;
        androidx.compose.runtime.ComposerImpl r4, r5, $r20;
        java.util.concurrent.atomic.AtomicReference $r7;
        java.lang.Object $r8;
        java.util.HashSet $r9, $r12, $r21;
        androidx.compose.runtime.SlotTable $r10, $r26;
        androidx.compose.runtime.collection.IdentityScopeMap $r11, $r13, $r18;
        java.util.ArrayList $r14, $r16;
        java.util.List $r15, $r17, $r23, $r24;
        androidx.compose.runtime.collection.IdentityArrayMap $r19;
        androidx.compose.runtime.ControlledComposition $r22;
        java.util.Set $r25;
        androidx.compose.runtime.Composer $r29;
        boolean $z1;
        androidx.compose.runtime.ComposableSingletons$CompositionKt $r32;
        kotlin.jvm.functions.Function2 $r33;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        r1 := @parameter0: androidx.compose.runtime.CompositionContext;

        r2 := @parameter1: androidx.compose.runtime.Applier;

        r3 := @parameter2: kotlin.coroutines.CoroutineContext;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "parent");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "applier");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.CompositionContext parent> = r1;

        r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.Applier applier> = r2;

        $r7 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r7.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>(null);

        r0.<androidx.compose.runtime.CompositionImpl: java.util.concurrent.atomic.AtomicReference pendingModifications> = $r7;

        $r8 = new java.lang.Object;

        specialinvoke $r8.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.runtime.CompositionImpl: java.lang.Object lock> = $r8;

        $r9 = new java.util.HashSet;

        specialinvoke $r9.<java.util.HashSet: void <init>()>();

        r0.<androidx.compose.runtime.CompositionImpl: java.util.HashSet abandonSet> = $r9;

        $r10 = new androidx.compose.runtime.SlotTable;

        specialinvoke $r10.<androidx.compose.runtime.SlotTable: void <init>()>();

        r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.SlotTable slotTable> = $r10;

        $r11 = new androidx.compose.runtime.collection.IdentityScopeMap;

        specialinvoke $r11.<androidx.compose.runtime.collection.IdentityScopeMap: void <init>()>();

        r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.collection.IdentityScopeMap observations> = $r11;

        $r12 = new java.util.HashSet;

        specialinvoke $r12.<java.util.HashSet: void <init>()>();

        r0.<androidx.compose.runtime.CompositionImpl: java.util.HashSet conditionallyInvalidatedScopes> = $r12;

        $r13 = new androidx.compose.runtime.collection.IdentityScopeMap;

        specialinvoke $r13.<androidx.compose.runtime.collection.IdentityScopeMap: void <init>()>();

        r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.collection.IdentityScopeMap derivedStates> = $r13;

        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>()>();

        $r15 = (java.util.List) $r14;

        r0.<androidx.compose.runtime.CompositionImpl: java.util.List changes> = $r15;

        $r16 = new java.util.ArrayList;

        specialinvoke $r16.<java.util.ArrayList: void <init>()>();

        $r17 = (java.util.List) $r16;

        r0.<androidx.compose.runtime.CompositionImpl: java.util.List lateChanges> = $r17;

        $r18 = new androidx.compose.runtime.collection.IdentityScopeMap;

        specialinvoke $r18.<androidx.compose.runtime.collection.IdentityScopeMap: void <init>()>();

        r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.collection.IdentityScopeMap observationsProcessed> = $r18;

        $r19 = new androidx.compose.runtime.collection.IdentityArrayMap;

        specialinvoke $r19.<androidx.compose.runtime.collection.IdentityArrayMap: void <init>(int,int,kotlin.jvm.internal.DefaultConstructorMarker)>(0, 1, null);

        r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.collection.IdentityArrayMap invalidations> = $r19;

        $r20 = new androidx.compose.runtime.ComposerImpl;

        $r28 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.Applier applier>;

        $r27 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.CompositionContext parent>;

        $r26 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.SlotTable slotTable>;

        $r21 = r0.<androidx.compose.runtime.CompositionImpl: java.util.HashSet abandonSet>;

        $r25 = (java.util.Set) $r21;

        $r24 = r0.<androidx.compose.runtime.CompositionImpl: java.util.List changes>;

        $r23 = r0.<androidx.compose.runtime.CompositionImpl: java.util.List lateChanges>;

        $r22 = (androidx.compose.runtime.ControlledComposition) r0;

        specialinvoke $r20.<androidx.compose.runtime.ComposerImpl: void <init>(androidx.compose.runtime.Applier,androidx.compose.runtime.CompositionContext,androidx.compose.runtime.SlotTable,java.util.Set,java.util.List,java.util.List,androidx.compose.runtime.ControlledComposition)>($r28, $r27, $r26, $r25, $r24, $r23, $r22);

        r4 = $r20;

        r5 = r4;

        r6 = r0;

        $r30 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.CompositionContext parent>;

        $r29 = (androidx.compose.runtime.Composer) r5;

        virtualinvoke $r30.<androidx.compose.runtime.CompositionContext: void registerComposer$runtime_release(androidx.compose.runtime.Composer)>($r29);

        r6.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.ComposerImpl composer> = r4;

        r0.<androidx.compose.runtime.CompositionImpl: kotlin.coroutines.CoroutineContext _recomposeContext> = r3;

        $r31 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.CompositionContext parent>;

        $z1 = $r31 instanceof androidx.compose.runtime.Recomposer;

        r0.<androidx.compose.runtime.CompositionImpl: boolean isRoot> = $z1;

        $r32 = <androidx.compose.runtime.ComposableSingletons$CompositionKt: androidx.compose.runtime.ComposableSingletons$CompositionKt INSTANCE>;

        $r33 = virtualinvoke $r32.<androidx.compose.runtime.ComposableSingletons$CompositionKt: kotlin.jvm.functions.Function2 getLambda-1$runtime_release()>();

        r0.<androidx.compose.runtime.CompositionImpl: kotlin.jvm.functions.Function2 composable> = $r33;

        return;
    }

    public void <init>(androidx.compose.runtime.CompositionContext, androidx.compose.runtime.Applier, kotlin.coroutines.CoroutineContext, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.compose.runtime.CompositionImpl r0;
        androidx.compose.runtime.CompositionContext r1;
        androidx.compose.runtime.Applier r2;
        int i0, $i1;
        kotlin.jvm.internal.DefaultConstructorMarker r3;
        kotlin.coroutines.CoroutineContext r4;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        r1 := @parameter0: androidx.compose.runtime.CompositionContext;

        r2 := @parameter1: androidx.compose.runtime.Applier;

        r4 := @parameter2: kotlin.coroutines.CoroutineContext;

        i0 := @parameter3: int;

        r3 := @parameter4: kotlin.jvm.internal.DefaultConstructorMarker;

        $i1 = i0 & 4;

        if $i1 == 0 goto label1;

        r4 = null;

     label1:
        specialinvoke r0.<androidx.compose.runtime.CompositionImpl: void <init>(androidx.compose.runtime.CompositionContext,androidx.compose.runtime.Applier,kotlin.coroutines.CoroutineContext)>(r1, r2, r4);

        return;
    }

    public final androidx.compose.runtime.SlotTable getSlotTable$runtime_release()
    {
        androidx.compose.runtime.CompositionImpl r0;
        androidx.compose.runtime.SlotTable $r1;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        $r1 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.SlotTable slotTable>;

        return $r1;
    }

    public final java.util.List getObservedObjects$runtime_release()
    {
        androidx.compose.runtime.CompositionImpl r0;
        androidx.compose.runtime.collection.IdentityScopeMap $r1;
        java.lang.Object[] $r2;
        java.util.List $r3;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        $r1 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.collection.IdentityScopeMap observations>;

        $r2 = virtualinvoke $r1.<androidx.compose.runtime.collection.IdentityScopeMap: java.lang.Object[] getValues()>();

        $r3 = staticinvoke <kotlin.collections.ArraysKt: java.util.List filterNotNull(java.lang.Object[])>($r2);

        return $r3;
    }

    public final java.util.List getDerivedStateDependencies$runtime_release()
    {
        androidx.compose.runtime.CompositionImpl r0;
        androidx.compose.runtime.collection.IdentityScopeMap $r1;
        java.lang.Object[] $r2;
        java.util.List $r3;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        $r1 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.collection.IdentityScopeMap derivedStates>;

        $r2 = virtualinvoke $r1.<androidx.compose.runtime.collection.IdentityScopeMap: java.lang.Object[] getValues()>();

        $r3 = staticinvoke <kotlin.collections.ArraysKt: java.util.List filterNotNull(java.lang.Object[])>($r2);

        return $r3;
    }

    public final java.util.List getConditionalScopes$runtime_release()
    {
        androidx.compose.runtime.CompositionImpl r0;
        java.util.HashSet $r1;
        java.lang.Iterable $r2;
        java.util.List $r3;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        $r1 = r0.<androidx.compose.runtime.CompositionImpl: java.util.HashSet conditionallyInvalidatedScopes>;

        $r2 = (java.lang.Iterable) $r1;

        $r3 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List toList(java.lang.Iterable)>($r2);

        return $r3;
    }

    public final boolean getPendingInvalidScopes$runtime_release()
    {
        androidx.compose.runtime.CompositionImpl r0;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        $z0 = r0.<androidx.compose.runtime.CompositionImpl: boolean pendingInvalidScopes>;

        return $z0;
    }

    public final void setPendingInvalidScopes$runtime_release(boolean)
    {
        androidx.compose.runtime.CompositionImpl r0;
        boolean z0;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        z0 := @parameter0: boolean;

        r0.<androidx.compose.runtime.CompositionImpl: boolean pendingInvalidScopes> = z0;

        return;
    }

    public final kotlin.coroutines.CoroutineContext getRecomposeContext()
    {
        androidx.compose.runtime.CompositionImpl r0;
        androidx.compose.runtime.CompositionContext $r1;
        kotlin.coroutines.CoroutineContext $r2;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        $r2 = r0.<androidx.compose.runtime.CompositionImpl: kotlin.coroutines.CoroutineContext _recomposeContext>;

        if $r2 != null goto label1;

        $r1 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.CompositionContext parent>;

        $r2 = virtualinvoke $r1.<androidx.compose.runtime.CompositionContext: kotlin.coroutines.CoroutineContext getRecomposeCoroutineContext$runtime_release()>();

     label1:
        return $r2;
    }

    public final boolean isRoot()
    {
        androidx.compose.runtime.CompositionImpl r0;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        $z0 = r0.<androidx.compose.runtime.CompositionImpl: boolean isRoot>;

        return $z0;
    }

    private final boolean getAreChildrenComposing()
    {
        androidx.compose.runtime.CompositionImpl r0;
        androidx.compose.runtime.ComposerImpl $r1;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        $r1 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.ComposerImpl composer>;

        $z0 = virtualinvoke $r1.<androidx.compose.runtime.ComposerImpl: boolean getAreChildrenComposing$runtime_release()>();

        return $z0;
    }

    public final kotlin.jvm.functions.Function2 getComposable()
    {
        androidx.compose.runtime.CompositionImpl r0;
        kotlin.jvm.functions.Function2 $r1;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        $r1 = r0.<androidx.compose.runtime.CompositionImpl: kotlin.jvm.functions.Function2 composable>;

        return $r1;
    }

    public final void setComposable(kotlin.jvm.functions.Function2)
    {
        androidx.compose.runtime.CompositionImpl r0;
        kotlin.jvm.functions.Function2 r1;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        r1 := @parameter0: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<set-?>");

        r0.<androidx.compose.runtime.CompositionImpl: kotlin.jvm.functions.Function2 composable> = r1;

        return;
    }

    public boolean isComposing()
    {
        androidx.compose.runtime.CompositionImpl r0;
        androidx.compose.runtime.ComposerImpl $r1;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        $r1 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.ComposerImpl composer>;

        $z0 = virtualinvoke $r1.<androidx.compose.runtime.ComposerImpl: boolean isComposing$runtime_release()>();

        return $z0;
    }

    public boolean isDisposed()
    {
        androidx.compose.runtime.CompositionImpl r0;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        $z0 = r0.<androidx.compose.runtime.CompositionImpl: boolean disposed>;

        return $z0;
    }

    public boolean getHasPendingChanges()
    {
        androidx.compose.runtime.CompositionImpl r0;
        java.lang.Object r1, r2;
        androidx.compose.runtime.ComposerImpl $r3;
        java.lang.Throwable $r4;
        boolean $z2;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        r1 = r0.<androidx.compose.runtime.CompositionImpl: java.lang.Object lock>;

        r2 = r1;

        entermonitor r2;

     label1:
        $r3 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.ComposerImpl composer>;

        $z2 = virtualinvoke $r3.<androidx.compose.runtime.ComposerImpl: boolean getHasPendingChanges$runtime_release()>();

     label2:
        exitmonitor r2;

        goto label5;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r2;

        throw $r4;

     label5:
        return $z2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setContent(kotlin.jvm.functions.Function2)
    {
        androidx.compose.runtime.CompositionImpl r0;
        kotlin.jvm.functions.Function2 r1, $r2;
        boolean $z0, $z1;
        androidx.compose.runtime.ControlledComposition $r3;
        androidx.compose.runtime.CompositionContext $r4;
        java.lang.String $r6, $r7;
        java.lang.IllegalStateException r8;
        java.lang.Throwable r9;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        r1 := @parameter0: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "content");

        $z0 = r0.<androidx.compose.runtime.CompositionImpl: boolean disposed>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 != 0 goto label3;

        $r7 = "The composition is disposed";

        r8 = new java.lang.IllegalStateException;

        $r6 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        r9 = (java.lang.Throwable) r8;

        throw r9;

     label3:
        r0.<androidx.compose.runtime.CompositionImpl: kotlin.jvm.functions.Function2 composable> = r1;

        $r4 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.CompositionContext parent>;

        $r3 = (androidx.compose.runtime.ControlledComposition) r0;

        $r2 = r0.<androidx.compose.runtime.CompositionImpl: kotlin.jvm.functions.Function2 composable>;

        virtualinvoke $r4.<androidx.compose.runtime.CompositionContext: void composeInitial$runtime_release(androidx.compose.runtime.ControlledComposition,kotlin.jvm.functions.Function2)>($r3, $r2);

        return;
    }

    public final void invalidateGroupsWithKey(int)
    {
        androidx.compose.runtime.CompositionImpl r0;
        int i0, i1, i2;
        java.util.List r1, $r14;
        java.lang.Object r2, r3, r12;
        androidx.compose.runtime.RecomposeScopeImpl r4;
        androidx.compose.runtime.SlotTable $r5;
        androidx.compose.runtime.ComposerImpl $r6;
        boolean $z2, $z7, $z8, $z9, z10;
        androidx.compose.runtime.ControlledComposition $r7;
        androidx.compose.runtime.CompositionContext $r8;
        androidx.compose.runtime.InvalidationResult $r9, $r10;
        java.lang.Throwable $r11;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        i0 := @parameter0: int;

        r12 = r0.<androidx.compose.runtime.CompositionImpl: java.lang.Object lock>;

        entermonitor r12;

     label01:
        $r5 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.SlotTable slotTable>;

        $r14 = virtualinvoke $r5.<androidx.compose.runtime.SlotTable: java.util.List invalidateGroupsWithKey$runtime_release(int)>(i0);

     label02:
        exitmonitor r12;

        goto label05;

     label03:
        $r11 := @caughtexception;

     label04:
        exitmonitor r12;

        throw $r11;

     label05:
        r1 = $r14;

        if r1 == null goto label12;

        i2 = 0;

        i1 = interfaceinvoke r1.<java.util.List: int size()>();

     label06:
        if i2 >= i1 goto label10;

        r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i2);

        r3 = r2;

        r4 = (androidx.compose.runtime.RecomposeScopeImpl) r3;

        $r9 = virtualinvoke r4.<androidx.compose.runtime.RecomposeScopeImpl: androidx.compose.runtime.InvalidationResult invalidateForResult(java.lang.Object)>(null);

        $r10 = <androidx.compose.runtime.InvalidationResult: androidx.compose.runtime.InvalidationResult IGNORED>;

        if $r9 != $r10 goto label07;

        $z7 = 1;

        goto label08;

     label07:
        $z7 = 0;

     label08:
        if $z7 == 0 goto label09;

        $z8 = 1;

        goto label11;

     label09:
        i2 = i2 + 1;

        goto label06;

     label10:
        $z8 = 0;

     label11:
        if $z8 == 0 goto label13;

     label12:
        $z9 = 1;

        goto label14;

     label13:
        $z9 = 0;

     label14:
        z10 = $z9;

        if z10 == 0 goto label15;

        $r6 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.ComposerImpl composer>;

        $z2 = virtualinvoke $r6.<androidx.compose.runtime.ComposerImpl: boolean forceRecomposeScopes$runtime_release()>();

        if $z2 == 0 goto label15;

        $r8 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.CompositionContext parent>;

        $r7 = (androidx.compose.runtime.ControlledComposition) r0;

        virtualinvoke $r8.<androidx.compose.runtime.CompositionContext: void invalidate$runtime_release(androidx.compose.runtime.ControlledComposition)>($r7);

     label15:
        return;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
    }

    private final void drainPendingModificationsForCompositionLocked()
    {
        androidx.compose.runtime.CompositionImpl r0;
        java.lang.Object r1, $r5, $r6;
        java.util.Set[] r2;
        int i0, i1;
        java.util.Set r3, $r14;
        java.util.concurrent.atomic.AtomicReference $r4, $r9;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r7, $r8, $r10;
        java.lang.String $r11;
        kotlin.KotlinNothingValueException $r13, $r16;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        $r4 = r0.<androidx.compose.runtime.CompositionImpl: java.util.concurrent.atomic.AtomicReference pendingModifications>;

        $r5 = staticinvoke <androidx.compose.runtime.CompositionKt: java.lang.Object access$getPendingApplyNoModifications$p()>();

        r1 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>($r5);

        if r1 == null goto label5;

        $r6 = staticinvoke <androidx.compose.runtime.CompositionKt: java.lang.Object access$getPendingApplyNoModifications$p()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r6);

        if $z0 == 0 goto label1;

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>("pending composition has not been applied");

        $r16 = new kotlin.KotlinNothingValueException;

        specialinvoke $r16.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r16;

     label1:
        $z1 = r1 instanceof java.util.Set;

        if $z1 == 0 goto label2;

        $r14 = (java.util.Set) r1;

        specialinvoke r0.<androidx.compose.runtime.CompositionImpl: void addPendingInvalidationsLocked(java.util.Set,boolean)>($r14, 1);

        goto label5;

     label2:
        $z2 = r1 instanceof java.lang.Object[];

        if $z2 == 0 goto label4;

        r2 = (java.util.Set[]) r1;

        i1 = 0;

        i0 = lengthof r2;

     label3:
        if i1 >= i0 goto label5;

        r3 = r2[i1];

        specialinvoke r0.<androidx.compose.runtime.CompositionImpl: void addPendingInvalidationsLocked(java.util.Set,boolean)>(r3, 1);

        i1 = i1 + 1;

        goto label3;

     label4:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("corrupt pendingModifications drain: ");

        $r9 = r0.<androidx.compose.runtime.CompositionImpl: java.util.concurrent.atomic.AtomicReference pendingModifications>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r11);

        $r13 = new kotlin.KotlinNothingValueException;

        specialinvoke $r13.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r13;

     label5:
        return;
    }

    private final void drainPendingModificationsLocked()
    {
        androidx.compose.runtime.CompositionImpl r0;
        java.lang.Object r1, $r5;
        java.util.Set[] r2;
        int i0, i1;
        java.util.Set r3, $r15;
        java.util.concurrent.atomic.AtomicReference $r4, $r8;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r6, $r7, $r9;
        java.lang.String $r10;
        kotlin.KotlinNothingValueException $r12, $r14;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        $r4 = r0.<androidx.compose.runtime.CompositionImpl: java.util.concurrent.atomic.AtomicReference pendingModifications>;

        r1 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(null);

        $r5 = staticinvoke <androidx.compose.runtime.CompositionKt: java.lang.Object access$getPendingApplyNoModifications$p()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r5);

        if $z0 != 0 goto label5;

        $z1 = r1 instanceof java.util.Set;

        if $z1 == 0 goto label1;

        $r15 = (java.util.Set) r1;

        specialinvoke r0.<androidx.compose.runtime.CompositionImpl: void addPendingInvalidationsLocked(java.util.Set,boolean)>($r15, 0);

        goto label5;

     label1:
        $z2 = r1 instanceof java.lang.Object[];

        if $z2 == 0 goto label3;

        r2 = (java.util.Set[]) r1;

        i1 = 0;

        i0 = lengthof r2;

     label2:
        if i1 >= i0 goto label5;

        r3 = r2[i1];

        specialinvoke r0.<androidx.compose.runtime.CompositionImpl: void addPendingInvalidationsLocked(java.util.Set,boolean)>(r3, 0);

        i1 = i1 + 1;

        goto label2;

     label3:
        if r1 != null goto label4;

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>("calling recordModificationsOf and applyChanges concurrently is not supported");

        $r14 = new kotlin.KotlinNothingValueException;

        specialinvoke $r14.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r14;

     label4:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("corrupt pendingModifications drain: ");

        $r8 = r0.<androidx.compose.runtime.CompositionImpl: java.util.concurrent.atomic.AtomicReference pendingModifications>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r10);

        $r12 = new kotlin.KotlinNothingValueException;

        specialinvoke $r12.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r12;

     label5:
        return;
    }

    public void composeContent(kotlin.jvm.functions.Function2)
    {
        androidx.compose.runtime.CompositionImpl r0, r2, r5, r18;
        kotlin.jvm.functions.Function2 r1;
        java.lang.Object r3, r4;
        androidx.compose.runtime.collection.IdentityArrayMap r6, r19;
        kotlin.Unit r7, r21, r23, r24, r25, r27;
        androidx.compose.runtime.ComposerImpl $r8;
        java.lang.Throwable $r9, $r10, $r16, $r17, r20, r22, r26;
        java.util.HashSet $r11, $r14;
        java.util.Collection $r12;
        boolean $z7, z9, z10, $z11;
        androidx.compose.runtime.CompositionImpl$RememberEventDispatcher $r13;
        java.util.Set $r15;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        r1 := @parameter0: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "content");

        r2 = r0;

     label01:
        r18 = r2;

        z9 = 0;

     label02:
        r3 = r0.<androidx.compose.runtime.CompositionImpl: java.lang.Object lock>;

        r4 = r3;

        entermonitor r4;

     label03:
        specialinvoke r0.<androidx.compose.runtime.CompositionImpl: void drainPendingModificationsForCompositionLocked()>();

        r5 = r0;

        r6 = specialinvoke r5.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.collection.IdentityArrayMap takeInvalidations()>();

     label04:
        r19 = r6;

        $r8 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.ComposerImpl composer>;

        virtualinvoke $r8.<androidx.compose.runtime.ComposerImpl: void composeContent$runtime_release(androidx.compose.runtime.collection.IdentityArrayMap,kotlin.jvm.functions.Function2)>(r19, r1);

        r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label05:
        goto label07;

     label06:
        $r16 := @caughtexception;

        r20 = $r16;

        r5.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.collection.IdentityArrayMap invalidations> = r6;

        throw r20;

     label07:
        r21 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label08:
        exitmonitor r4;

        goto label11;

     label09:
        $r17 := @caughtexception;

        r22 = $r17;

     label10:
        exitmonitor r4;

        throw r22;

     label11:
        r23 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        r24 = r23;

        z10 = 1;

        r25 = r23;

     label12:
        goto label18;

     label13:
        $r10 := @caughtexception;

        r26 = $r10;

     label14:
        if z9 != 0 goto label17;

        $r11 = r18.<androidx.compose.runtime.CompositionImpl: java.util.HashSet abandonSet>;

        $r12 = (java.util.Collection) $r11;

        $z7 = interfaceinvoke $r12.<java.util.Collection: boolean isEmpty()>();

        if $z7 != 0 goto label15;

        $z11 = 1;

        goto label16;

     label15:
        $z11 = 0;

     label16:
        if $z11 == 0 goto label17;

        $r13 = new androidx.compose.runtime.CompositionImpl$RememberEventDispatcher;

        $r14 = r18.<androidx.compose.runtime.CompositionImpl: java.util.HashSet abandonSet>;

        $r15 = (java.util.Set) $r14;

        specialinvoke $r13.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: void <init>(java.util.Set)>($r15);

        virtualinvoke $r13.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: void dispatchAbandons()>();

     label17:
        throw r26;

     label18:
        r27 = r25;

     label19:
        goto label21;

     label20:
        $r9 := @caughtexception;

        specialinvoke r2.<androidx.compose.runtime.CompositionImpl: void abandonChanges()>();

        throw $r9;

     label21:
        return;

        catch java.lang.Exception from label04 to label05 with label06;
        catch java.lang.Throwable from label03 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.lang.Throwable from label02 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
        catch java.lang.Exception from label01 to label19 with label20;
    }

    public void dispose()
    {
        androidx.compose.runtime.CompositionImpl r0;
        java.lang.Object r1, r2;
        java.util.List r3;
        boolean z1, $z5, $z6, $z8, $z9;
        androidx.compose.runtime.CompositionImpl$RememberEventDispatcher r4, $r14;
        androidx.compose.runtime.SlotTable r5, $r13;
        androidx.compose.runtime.SlotWriter r6, r23;
        kotlin.Unit r7, $r26;
        androidx.compose.runtime.ControlledComposition $r8;
        androidx.compose.runtime.CompositionContext $r9;
        androidx.compose.runtime.ComposableSingletons$CompositionKt $r10;
        kotlin.jvm.functions.Function2 $r11;
        androidx.compose.runtime.ComposerImpl $r12, $r25;
        int $i0;
        java.util.HashSet $r15, $r19;
        java.util.Set $r16;
        androidx.compose.runtime.RememberManager $r17;
        androidx.compose.runtime.Applier $r18;
        java.util.Collection $r20;
        java.lang.Throwable $r21, $r22, r24;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        r1 = r0.<androidx.compose.runtime.CompositionImpl: java.lang.Object lock>;

        r2 = r1;

        entermonitor r2;

     label01:
        $z5 = r0.<androidx.compose.runtime.CompositionImpl: boolean disposed>;

        if $z5 != 0 goto label15;

        r0.<androidx.compose.runtime.CompositionImpl: boolean disposed> = 1;

        $r10 = <androidx.compose.runtime.ComposableSingletons$CompositionKt: androidx.compose.runtime.ComposableSingletons$CompositionKt INSTANCE>;

        $r11 = virtualinvoke $r10.<androidx.compose.runtime.ComposableSingletons$CompositionKt: kotlin.jvm.functions.Function2 getLambda-2$runtime_release()>();

        r0.<androidx.compose.runtime.CompositionImpl: kotlin.jvm.functions.Function2 composable> = $r11;

        $r12 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.ComposerImpl composer>;

        r3 = virtualinvoke $r12.<androidx.compose.runtime.ComposerImpl: java.util.List getDeferredChanges$runtime_release()>();

        if r3 == null goto label02;

        specialinvoke r0.<androidx.compose.runtime.CompositionImpl: void applyChangesInLocked(java.util.List)>(r3);

     label02:
        $r13 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.SlotTable slotTable>;

        $i0 = virtualinvoke $r13.<androidx.compose.runtime.SlotTable: int getGroupsSize()>();

        if $i0 <= 0 goto label03;

        $z8 = 1;

        goto label04;

     label03:
        $z8 = 0;

     label04:
        z1 = $z8;

        if z1 != 0 goto label07;

        $r19 = r0.<androidx.compose.runtime.CompositionImpl: java.util.HashSet abandonSet>;

        $r20 = (java.util.Collection) $r19;

        $z6 = interfaceinvoke $r20.<java.util.Collection: boolean isEmpty()>();

        if $z6 != 0 goto label05;

        $z9 = 1;

        goto label06;

     label05:
        $z9 = 0;

     label06:
        if $z9 == 0 goto label14;

     label07:
        $r14 = new androidx.compose.runtime.CompositionImpl$RememberEventDispatcher;

        $r15 = r0.<androidx.compose.runtime.CompositionImpl: java.util.HashSet abandonSet>;

        $r16 = (java.util.Set) $r15;

        specialinvoke $r14.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: void <init>(java.util.Set)>($r16);

        r4 = $r14;

        if z1 == 0 goto label13;

        r5 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.SlotTable slotTable>;

        r6 = virtualinvoke r5.<androidx.compose.runtime.SlotTable: androidx.compose.runtime.SlotWriter openWriter()>();

     label08:
        r23 = r6;

        $r17 = (androidx.compose.runtime.RememberManager) r4;

        staticinvoke <androidx.compose.runtime.ComposerKt: void removeCurrentGroup(androidx.compose.runtime.SlotWriter,androidx.compose.runtime.RememberManager)>(r23, $r17);

        r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label09:
        virtualinvoke r6.<androidx.compose.runtime.SlotWriter: void close()>();

        goto label12;

     label10:
        $r21 := @caughtexception;

        r24 = $r21;

     label11:
        virtualinvoke r6.<androidx.compose.runtime.SlotWriter: void close()>();

        throw r24;

     label12:
        $r18 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.Applier applier>;

        interfaceinvoke $r18.<androidx.compose.runtime.Applier: void clear()>();

        virtualinvoke r4.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: void dispatchRememberObservers()>();

     label13:
        virtualinvoke r4.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: void dispatchAbandons()>();

     label14:
        $r25 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.ComposerImpl composer>;

        virtualinvoke $r25.<androidx.compose.runtime.ComposerImpl: void dispose$runtime_release()>();

     label15:
        $r26 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label16:
        exitmonitor r2;

        goto label19;

     label17:
        $r22 := @caughtexception;

     label18:
        exitmonitor r2;

        throw $r22;

     label19:
        $r9 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.CompositionContext parent>;

        $r8 = (androidx.compose.runtime.ControlledComposition) r0;

        virtualinvoke $r9.<androidx.compose.runtime.CompositionContext: void unregisterComposition$runtime_release(androidx.compose.runtime.ControlledComposition)>($r8);

        return;

        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
        catch java.lang.Throwable from label01 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    public boolean getHasInvalidations()
    {
        androidx.compose.runtime.CompositionImpl r0;
        java.lang.Object r1, r2;
        androidx.compose.runtime.collection.IdentityArrayMap $r3;
        int $i0;
        java.lang.Throwable $r4;
        boolean $z2;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        r1 = r0.<androidx.compose.runtime.CompositionImpl: java.lang.Object lock>;

        r2 = r1;

        entermonitor r2;

     label1:
        $r3 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.collection.IdentityArrayMap invalidations>;

        $i0 = virtualinvoke $r3.<androidx.compose.runtime.collection.IdentityArrayMap: int getSize$runtime_release()>();

        if $i0 <= 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        exitmonitor r2;

        goto label6;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r2;

        throw $r4;

     label6:
        return $z2;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void recordModificationsOf(java.util.Set)
    {
        androidx.compose.runtime.CompositionImpl r0;
        java.util.Set r1, $r16;
        java.lang.Object r2, r3, r4, $r6, r18, $r19, r22;
        java.util.concurrent.atomic.AtomicReference $r5, $r10, $r21;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r9, $r11, r25;
        java.lang.String $r12, $r13;
        java.util.Set[] $r14, $r20;
        java.lang.Throwable $r17, r27;
        kotlin.Unit $r23;
        java.lang.IllegalStateException r26;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        r1 := @parameter0: java.util.Set;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "values");

     label01:
        $r5 = r0.<androidx.compose.runtime.CompositionImpl: java.util.concurrent.atomic.AtomicReference pendingModifications>;

        r2 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r18 = r2;

        if r18 != null goto label02;

        $z2 = 1;

        goto label03;

     label02:
        $r6 = staticinvoke <androidx.compose.runtime.CompositionKt: java.lang.Object access$getPendingApplyNoModifications$p()>();

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r18, $r6);

     label03:
        if $z2 == 0 goto label04;

        $r19 = r1;

        goto label07;

     label04:
        $z0 = r18 instanceof java.util.Set;

        if $z0 == 0 goto label05;

        $r20 = newarray (java.util.Set)[2];

        $r16 = (java.util.Set) r2;

        $r20[0] = $r16;

        $r20[1] = r1;

        $r19 = $r20;

        goto label07;

     label05:
        $z1 = r18 instanceof java.lang.Object[];

        if $z1 == 0 goto label06;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>(r2, "null cannot be cast to non-null type kotlin.Array<kotlin.collections.Set<kotlin.Any>>");

        $r14 = (java.util.Set[]) r2;

        $r19 = staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] plus(java.lang.Object[],java.lang.Object)>($r14, r1);

        goto label07;

     label06:
        r26 = new java.lang.IllegalStateException;

        r25 = new java.lang.StringBuilder;

        specialinvoke r25.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("corrupt pendingModifications: ");

        $r10 = r0.<androidx.compose.runtime.CompositionImpl: java.util.concurrent.atomic.AtomicReference pendingModifications>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = virtualinvoke $r12.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r26.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        r27 = (java.lang.Throwable) r26;

        throw r27;

     label07:
        r3 = $r19;

        $r21 = r0.<androidx.compose.runtime.CompositionImpl: java.util.concurrent.atomic.AtomicReference pendingModifications>;

        $z3 = virtualinvoke $r21.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(r2, r3);

        if $z3 == 0 goto label01;

        if r2 != null goto label12;

        r22 = r0.<androidx.compose.runtime.CompositionImpl: java.lang.Object lock>;

        r4 = r22;

        entermonitor r4;

     label08:
        specialinvoke r0.<androidx.compose.runtime.CompositionImpl: void drainPendingModificationsLocked()>();

        $r23 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label09:
        exitmonitor r4;

        goto label12;

     label10:
        $r17 := @caughtexception;

     label11:
        exitmonitor r4;

        throw $r17;

     label12:
        goto label13;

     label13:
        return;

        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public boolean observesAnyOf(java.util.Set)
    {
        androidx.compose.runtime.CompositionImpl r0;
        java.util.Set r1;
        java.util.Iterator r2;
        java.lang.Object r3;
        boolean $z0, $z1, $z2;
        androidx.compose.runtime.collection.IdentityScopeMap $r4, $r5;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        r1 := @parameter0: java.util.Set;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "values");

        r2 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.collection.IdentityScopeMap observations>;

        $z1 = virtualinvoke $r4.<androidx.compose.runtime.collection.IdentityScopeMap: boolean contains(java.lang.Object)>(r3);

        if $z1 != 0 goto label2;

        $r5 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.collection.IdentityScopeMap derivedStates>;

        $z2 = virtualinvoke $r5.<androidx.compose.runtime.collection.IdentityScopeMap: boolean contains(java.lang.Object)>(r3);

        if $z2 == 0 goto label1;

     label2:
        return 1;

     label3:
        return 0;
    }

    public void prepareCompose(kotlin.jvm.functions.Function0)
    {
        androidx.compose.runtime.CompositionImpl r0;
        kotlin.jvm.functions.Function0 r1;
        androidx.compose.runtime.ComposerImpl $r2;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        r1 := @parameter0: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        $r2 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.ComposerImpl composer>;

        virtualinvoke $r2.<androidx.compose.runtime.ComposerImpl: void prepareCompose$runtime_release(kotlin.jvm.functions.Function0)>(r1);

        return;
    }

    private final void addPendingInvalidationsLocked(java.util.Set, boolean)
    {
        androidx.compose.runtime.CompositionImpl r0;
        java.util.Set r1;
        boolean z0, $z2, $z3, $z4, $z5, $z6, $z7, $z11, z12, $z18, $z19, z21, z22, z23, z24;
        kotlin.jvm.internal.Ref$ObjectRef r2, $r4;
        androidx.compose.runtime.RecomposeScopeImpl r3, $r38, r51;
        java.lang.Object $r5, $r17, $r32, $r35, $r37, r41, r50;
        java.util.HashSet $r6, $r19, $r21, $r33, $r36, r52, r53;
        java.lang.Object[] $r7, $r15, $r16, $r18, $r22, $r30, $r31, $r34;
        int[] $r8, $r9, $r12, $r13, $r14, $r23, $r24, $r27, $r28, $r29;
        int $i0, $i1, $i2, $i3, i4, i5, i6, i7, i8, $i9, i10, i11, i12, i13, i14, i15, i16, i17, $i18, i19, i20, $i21, i22, i23, $i24, i25, $i26, i27, i28, i29, $i30;
        androidx.compose.runtime.collection.IdentityArraySet[] $r10, $r25;
        androidx.compose.runtime.collection.IdentityArraySet $r11, $r26, r43, r47, r48, r49, r57, r58;
        java.util.Collection $r20;
        java.util.Iterator r40;
        androidx.compose.runtime.collection.IdentityScopeMap r42, r45, r46, r54;
        androidx.compose.runtime.DerivedState r44;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        r1 := @parameter0: java.util.Set;

        z0 := @parameter1: boolean;

        $r4 = new kotlin.jvm.internal.Ref$ObjectRef;

        specialinvoke $r4.<kotlin.jvm.internal.Ref$ObjectRef: void <init>()>();

        r2 = $r4;

        r40 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z7 = interfaceinvoke r40.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label05;

        r41 = interfaceinvoke r40.<java.util.Iterator: java.lang.Object next()>();

        $z6 = r41 instanceof androidx.compose.runtime.RecomposeScopeImpl;

        if $z6 == 0 goto label02;

        $r38 = (androidx.compose.runtime.RecomposeScopeImpl) r41;

        virtualinvoke $r38.<androidx.compose.runtime.RecomposeScopeImpl: androidx.compose.runtime.InvalidationResult invalidateForResult(java.lang.Object)>(null);

        goto label01;

     label02:
        staticinvoke <androidx.compose.runtime.CompositionImpl: void addPendingInvalidationsLocked$invalidate(androidx.compose.runtime.CompositionImpl,boolean,kotlin.jvm.internal.Ref$ObjectRef,java.lang.Object)>(r0, z0, r2, r41);

        r42 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.collection.IdentityScopeMap derivedStates>;

        i4 = staticinvoke <androidx.compose.runtime.collection.IdentityScopeMap: int access$find(androidx.compose.runtime.collection.IdentityScopeMap,java.lang.Object)>(r42, r41);

        if i4 < 0 goto label04;

        r43 = staticinvoke <androidx.compose.runtime.collection.IdentityScopeMap: androidx.compose.runtime.collection.IdentityArraySet access$scopeSetAt(androidx.compose.runtime.collection.IdentityScopeMap,int)>(r42, i4);

        i5 = 0;

        i6 = virtualinvoke r43.<androidx.compose.runtime.collection.IdentityArraySet: int size()>();

     label03:
        if i5 >= i6 goto label04;

        $r37 = virtualinvoke r43.<androidx.compose.runtime.collection.IdentityArraySet: java.lang.Object get(int)>(i5);

        r44 = (androidx.compose.runtime.DerivedState) $r37;

        staticinvoke <androidx.compose.runtime.CompositionImpl: void addPendingInvalidationsLocked$invalidate(androidx.compose.runtime.CompositionImpl,boolean,kotlin.jvm.internal.Ref$ObjectRef,java.lang.Object)>(r0, z0, r2, r44);

        i5 = i5 + 1;

        goto label03;

     label04:
        goto label01;

     label05:
        if z0 == 0 goto label26;

        $r19 = r0.<androidx.compose.runtime.CompositionImpl: java.util.HashSet conditionallyInvalidatedScopes>;

        $r20 = (java.util.Collection) $r19;

        $z3 = interfaceinvoke $r20.<java.util.Collection: boolean isEmpty()>();

        if $z3 != 0 goto label06;

        $z11 = 1;

        goto label07;

     label06:
        $z11 = 0;

     label07:
        if $z11 == 0 goto label26;

        r45 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.collection.IdentityScopeMap observations>;

        z12 = 0;

        r46 = r45;

        i7 = 0;

        i8 = 0;

        $i9 = virtualinvoke r46.<androidx.compose.runtime.collection.IdentityScopeMap: int getSize()>();

     label08:
        if i8 >= $i9 goto label23;

        $r24 = virtualinvoke r46.<androidx.compose.runtime.collection.IdentityScopeMap: int[] getValueOrder()>();

        i10 = $r24[i8];

        $r25 = virtualinvoke r46.<androidx.compose.runtime.collection.IdentityScopeMap: androidx.compose.runtime.collection.IdentityArraySet[] getScopeSets()>();

        $r26 = $r25[i10];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r26);

        r47 = $r26;

        r48 = r47;

        r49 = r48;

        i11 = 0;

        i12 = 0;

        i13 = virtualinvoke r49.<androidx.compose.runtime.collection.IdentityArraySet: int size()>();

     label09:
        if i12 >= i13 goto label18;

        $r31 = virtualinvoke r49.<androidx.compose.runtime.collection.IdentityArraySet: java.lang.Object[] getValues()>();

        $r32 = $r31[i12];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r32, "null cannot be cast to non-null type T of androidx.compose.runtime.collection.IdentityArraySet");

        r50 = $r32;

        r51 = (androidx.compose.runtime.RecomposeScopeImpl) r50;

        $r33 = r0.<androidx.compose.runtime.CompositionImpl: java.util.HashSet conditionallyInvalidatedScopes>;

        $z4 = virtualinvoke $r33.<java.util.HashSet: boolean contains(java.lang.Object)>(r51);

        if $z4 != 0 goto label13;

        $r35 = r2.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        $r36 = (java.util.HashSet) $r35;

        if $r36 == null goto label11;

        r52 = $r36;

        $z5 = virtualinvoke r52.<java.util.HashSet: boolean contains(java.lang.Object)>(r51);

        if $z5 != 1 goto label10;

        $z18 = 1;

        goto label12;

     label10:
        $z18 = 0;

        goto label12;

     label11:
        $z18 = 0;

     label12:
        if $z18 == 0 goto label14;

     label13:
        $z19 = 1;

        goto label15;

     label14:
        $z19 = 0;

     label15:
        if $z19 != 0 goto label17;

        if i11 == i12 goto label16;

        $r34 = virtualinvoke r49.<androidx.compose.runtime.collection.IdentityArraySet: java.lang.Object[] getValues()>();

        $r34[i11] = r50;

     label16:
        i11 = i11 + 1;

     label17:
        i12 = i12 + 1;

        goto label09;

     label18:
        i14 = i11;

        i15 = virtualinvoke r49.<androidx.compose.runtime.collection.IdentityArraySet: int size()>();

     label19:
        if i14 >= i15 goto label20;

        $r30 = virtualinvoke r49.<androidx.compose.runtime.collection.IdentityArraySet: java.lang.Object[] getValues()>();

        $r30[i14] = null;

        i14 = i14 + 1;

        goto label19;

     label20:
        virtualinvoke r49.<androidx.compose.runtime.collection.IdentityArraySet: void setSize(int)>(i11);

        $i3 = virtualinvoke r47.<androidx.compose.runtime.collection.IdentityArraySet: int size()>();

        if $i3 <= 0 goto label22;

        if i7 == i8 goto label21;

        $r27 = virtualinvoke r46.<androidx.compose.runtime.collection.IdentityScopeMap: int[] getValueOrder()>();

        i16 = $r27[i7];

        $r28 = virtualinvoke r46.<androidx.compose.runtime.collection.IdentityScopeMap: int[] getValueOrder()>();

        $r28[i7] = i10;

        $r29 = virtualinvoke r46.<androidx.compose.runtime.collection.IdentityScopeMap: int[] getValueOrder()>();

        $r29[i8] = i16;

     label21:
        i7 = i7 + 1;

     label22:
        i8 = i8 + 1;

        goto label08;

     label23:
        i17 = i7;

        $i18 = virtualinvoke r46.<androidx.compose.runtime.collection.IdentityScopeMap: int getSize()>();

     label24:
        if i17 >= $i18 goto label25;

        $r22 = virtualinvoke r46.<androidx.compose.runtime.collection.IdentityScopeMap: java.lang.Object[] getValues()>();

        $r23 = virtualinvoke r46.<androidx.compose.runtime.collection.IdentityScopeMap: int[] getValueOrder()>();

        $i2 = $r23[i17];

        $r22[$i2] = null;

        i17 = i17 + 1;

        goto label24;

     label25:
        virtualinvoke r46.<androidx.compose.runtime.collection.IdentityScopeMap: void setSize(int)>(i7);

        specialinvoke r0.<androidx.compose.runtime.CompositionImpl: void cleanUpDerivedStateObservations()>();

        $r21 = r0.<androidx.compose.runtime.CompositionImpl: java.util.HashSet conditionallyInvalidatedScopes>;

        virtualinvoke $r21.<java.util.HashSet: void clear()>();

        goto label39;

     label26:
        $r5 = r2.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        $r6 = (java.util.HashSet) $r5;

        if $r6 == null goto label39;

        r53 = $r6;

        r54 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.collection.IdentityScopeMap observations>;

        z21 = 0;

        z22 = 0;

        i19 = 0;

        i20 = 0;

        $i21 = virtualinvoke r54.<androidx.compose.runtime.collection.IdentityScopeMap: int getSize()>();

     label27:
        if i20 >= $i21 goto label36;

        $r9 = virtualinvoke r54.<androidx.compose.runtime.collection.IdentityScopeMap: int[] getValueOrder()>();

        i22 = $r9[i20];

        $r10 = virtualinvoke r54.<androidx.compose.runtime.collection.IdentityScopeMap: androidx.compose.runtime.collection.IdentityArraySet[] getScopeSets()>();

        $r11 = $r10[i22];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r11);

        r57 = $r11;

        z23 = 0;

        r58 = r57;

        z24 = 0;

        i23 = 0;

        $i24 = 0;

        i25 = virtualinvoke r58.<androidx.compose.runtime.collection.IdentityArraySet: int size()>();

     label28:
        if $i24 >= i25 goto label31;

        $r16 = virtualinvoke r58.<androidx.compose.runtime.collection.IdentityArraySet: java.lang.Object[] getValues()>();

        $r17 = $r16[$i24];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r17, "null cannot be cast to non-null type T of androidx.compose.runtime.collection.IdentityArraySet");

        r3 = (androidx.compose.runtime.RecomposeScopeImpl) $r17;

        $z2 = virtualinvoke r53.<java.util.HashSet: boolean contains(java.lang.Object)>(r3);

        if $z2 != 0 goto label30;

        if i23 == $i24 goto label29;

        $r18 = virtualinvoke r58.<androidx.compose.runtime.collection.IdentityArraySet: java.lang.Object[] getValues()>();

        $r18[i23] = $r17;

     label29:
        i23 = i23 + 1;

     label30:
        $i24 = $i24 + 1;

        goto label28;

     label31:
        $i26 = i23;

        i27 = virtualinvoke r58.<androidx.compose.runtime.collection.IdentityArraySet: int size()>();

     label32:
        if $i26 >= i27 goto label33;

        $r15 = virtualinvoke r58.<androidx.compose.runtime.collection.IdentityArraySet: java.lang.Object[] getValues()>();

        $r15[$i26] = null;

        $i26 = $i26 + 1;

        goto label32;

     label33:
        virtualinvoke r58.<androidx.compose.runtime.collection.IdentityArraySet: void setSize(int)>(i23);

        $i1 = virtualinvoke $r11.<androidx.compose.runtime.collection.IdentityArraySet: int size()>();

        if $i1 <= 0 goto label35;

        if i19 == i20 goto label34;

        $r12 = virtualinvoke r54.<androidx.compose.runtime.collection.IdentityScopeMap: int[] getValueOrder()>();

        i28 = $r12[i19];

        $r13 = virtualinvoke r54.<androidx.compose.runtime.collection.IdentityScopeMap: int[] getValueOrder()>();

        $r13[i19] = i22;

        $r14 = virtualinvoke r54.<androidx.compose.runtime.collection.IdentityScopeMap: int[] getValueOrder()>();

        $r14[i20] = i28;

     label34:
        i19 = i19 + 1;

     label35:
        i20 = i20 + 1;

        goto label27;

     label36:
        i29 = i19;

        $i30 = virtualinvoke r54.<androidx.compose.runtime.collection.IdentityScopeMap: int getSize()>();

     label37:
        if i29 >= $i30 goto label38;

        $r7 = virtualinvoke r54.<androidx.compose.runtime.collection.IdentityScopeMap: java.lang.Object[] getValues()>();

        $r8 = virtualinvoke r54.<androidx.compose.runtime.collection.IdentityScopeMap: int[] getValueOrder()>();

        $i0 = $r8[i29];

        $r7[$i0] = null;

        i29 = i29 + 1;

        goto label37;

     label38:
        virtualinvoke r54.<androidx.compose.runtime.collection.IdentityScopeMap: void setSize(int)>(i19);

        specialinvoke r0.<androidx.compose.runtime.CompositionImpl: void cleanUpDerivedStateObservations()>();

        goto label39;

     label39:
        return;
    }

    private final void cleanUpDerivedStateObservations()
    {
        androidx.compose.runtime.CompositionImpl r0;
        int i0, $i1, $i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13;
        androidx.compose.runtime.collection.IdentityArraySet r1, r2, $r11, r22;
        java.lang.Object r3, $r6, $r17;
        androidx.compose.runtime.DerivedState r4;
        java.util.Iterator $r5, r24;
        boolean $z3, $z4, $z7, $z9, z10, $z11;
        java.lang.Object[] $r7, $r15, $r16, $r19;
        int[] $r8, $r9, $r12, $r13, $r14;
        androidx.compose.runtime.collection.IdentityArraySet[] $r10;
        androidx.compose.runtime.collection.IdentityScopeMap $r18, r20, r21;
        java.util.HashSet r23;
        androidx.compose.runtime.RecomposeScopeImpl $r25;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        r20 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.collection.IdentityScopeMap derivedStates>;

        r21 = r20;

        i3 = 0;

        i4 = 0;

        i5 = virtualinvoke r21.<androidx.compose.runtime.collection.IdentityScopeMap: int getSize()>();

     label01:
        if i4 >= i5 goto label12;

        $r9 = virtualinvoke r21.<androidx.compose.runtime.collection.IdentityScopeMap: int[] getValueOrder()>();

        i0 = $r9[i4];

        $r10 = virtualinvoke r21.<androidx.compose.runtime.collection.IdentityScopeMap: androidx.compose.runtime.collection.IdentityArraySet[] getScopeSets()>();

        $r11 = $r10[i0];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r11);

        r1 = $r11;

        r22 = r1;

        r2 = r22;

        i6 = 0;

        i7 = 0;

        i8 = virtualinvoke r2.<androidx.compose.runtime.collection.IdentityArraySet: int size()>();

     label02:
        if i7 >= i8 goto label07;

        $r16 = virtualinvoke r2.<androidx.compose.runtime.collection.IdentityArraySet: java.lang.Object[] getValues()>();

        $r17 = $r16[i7];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r17, "null cannot be cast to non-null type T of androidx.compose.runtime.collection.IdentityArraySet");

        r3 = $r17;

        r4 = (androidx.compose.runtime.DerivedState) r3;

        $r18 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.collection.IdentityScopeMap observations>;

        $z4 = virtualinvoke $r18.<androidx.compose.runtime.collection.IdentityScopeMap: boolean contains(java.lang.Object)>(r4);

        if $z4 != 0 goto label03;

        $z7 = 1;

        goto label04;

     label03:
        $z7 = 0;

     label04:
        if $z7 != 0 goto label06;

        if i6 == i7 goto label05;

        $r19 = virtualinvoke r2.<androidx.compose.runtime.collection.IdentityArraySet: java.lang.Object[] getValues()>();

        $r19[i6] = r3;

     label05:
        i6 = i6 + 1;

     label06:
        i7 = i7 + 1;

        goto label02;

     label07:
        i9 = i6;

        i10 = virtualinvoke r2.<androidx.compose.runtime.collection.IdentityArraySet: int size()>();

     label08:
        if i9 >= i10 goto label09;

        $r15 = virtualinvoke r2.<androidx.compose.runtime.collection.IdentityArraySet: java.lang.Object[] getValues()>();

        $r15[i9] = null;

        i9 = i9 + 1;

        goto label08;

     label09:
        virtualinvoke r2.<androidx.compose.runtime.collection.IdentityArraySet: void setSize(int)>(i6);

        $i2 = virtualinvoke r1.<androidx.compose.runtime.collection.IdentityArraySet: int size()>();

        if $i2 <= 0 goto label11;

        if i3 == i4 goto label10;

        $r12 = virtualinvoke r21.<androidx.compose.runtime.collection.IdentityScopeMap: int[] getValueOrder()>();

        i11 = $r12[i3];

        $r13 = virtualinvoke r21.<androidx.compose.runtime.collection.IdentityScopeMap: int[] getValueOrder()>();

        $r13[i3] = i0;

        $r14 = virtualinvoke r21.<androidx.compose.runtime.collection.IdentityScopeMap: int[] getValueOrder()>();

        $r14[i4] = i11;

     label10:
        i3 = i3 + 1;

     label11:
        i4 = i4 + 1;

        goto label01;

     label12:
        i12 = i3;

        i13 = virtualinvoke r21.<androidx.compose.runtime.collection.IdentityScopeMap: int getSize()>();

     label13:
        if i12 >= i13 goto label14;

        $r7 = virtualinvoke r21.<androidx.compose.runtime.collection.IdentityScopeMap: java.lang.Object[] getValues()>();

        $r8 = virtualinvoke r21.<androidx.compose.runtime.collection.IdentityScopeMap: int[] getValueOrder()>();

        $i1 = $r8[i12];

        $r7[$i1] = null;

        i12 = i12 + 1;

        goto label13;

     label14:
        virtualinvoke r21.<androidx.compose.runtime.collection.IdentityScopeMap: void setSize(int)>(i3);

        r23 = r0.<androidx.compose.runtime.CompositionImpl: java.util.HashSet conditionallyInvalidatedScopes>;

        $r5 = virtualinvoke r23.<java.util.HashSet: java.util.Iterator iterator()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "iterator()");

        r24 = $r5;

     label15:
        $z9 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label18;

        $r6 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>();

        $r25 = (androidx.compose.runtime.RecomposeScopeImpl) $r6;

        z10 = 0;

        $z3 = virtualinvoke $r25.<androidx.compose.runtime.RecomposeScopeImpl: boolean isConditional()>();

        if $z3 != 0 goto label16;

        $z11 = 1;

        goto label17;

     label16:
        $z11 = 0;

     label17:
        if $z11 == 0 goto label15;

        interfaceinvoke r24.<java.util.Iterator: void remove()>();

        goto label15;

     label18:
        return;
    }

    public void recordReadOf(java.lang.Object)
    {
        androidx.compose.runtime.CompositionImpl r0;
        java.lang.Object r1, r4;
        androidx.compose.runtime.RecomposeScopeImpl r2, $r6;
        java.lang.Object[] r3;
        int i0, i1;
        boolean $z1, $z3;
        androidx.compose.runtime.ComposerImpl $r5;
        androidx.compose.runtime.collection.IdentityScopeMap $r7, $r8, $r10;
        androidx.compose.runtime.DerivedState $r9;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        r1 := @parameter0: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "value");

        $z1 = specialinvoke r0.<androidx.compose.runtime.CompositionImpl: boolean getAreChildrenComposing()>();

        if $z1 != 0 goto label3;

        $r5 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.ComposerImpl composer>;

        $r6 = virtualinvoke $r5.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.RecomposeScopeImpl getCurrentRecomposeScope$runtime_release()>();

        if $r6 == null goto label3;

        r2 = $r6;

        virtualinvoke r2.<androidx.compose.runtime.RecomposeScopeImpl: void setUsed(boolean)>(1);

        $r7 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.collection.IdentityScopeMap observations>;

        virtualinvoke $r7.<androidx.compose.runtime.collection.IdentityScopeMap: boolean add(java.lang.Object,java.lang.Object)>(r1, r2);

        $z3 = r1 instanceof androidx.compose.runtime.DerivedState;

        if $z3 == 0 goto label2;

        $r8 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.collection.IdentityScopeMap derivedStates>;

        virtualinvoke $r8.<androidx.compose.runtime.collection.IdentityScopeMap: void removeScope(java.lang.Object)>(r1);

        $r9 = (androidx.compose.runtime.DerivedState) r1;

        r3 = interfaceinvoke $r9.<androidx.compose.runtime.DerivedState: java.lang.Object[] getDependencies()>();

        i1 = 0;

        i0 = lengthof r3;

     label1:
        if i1 >= i0 goto label2;

        r4 = r3[i1];

        if r4 == null goto label2;

        $r10 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.collection.IdentityScopeMap derivedStates>;

        virtualinvoke $r10.<androidx.compose.runtime.collection.IdentityScopeMap: boolean add(java.lang.Object,java.lang.Object)>(r4, r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke r2.<androidx.compose.runtime.RecomposeScopeImpl: void recordRead(java.lang.Object)>(r1);

        goto label3;

     label3:
        return;
    }

    private final void invalidateScopeOfLocked(java.lang.Object)
    {
        androidx.compose.runtime.CompositionImpl r0;
        java.lang.Object r1, $r5;
        androidx.compose.runtime.collection.IdentityScopeMap r2, $r8;
        int i0, i1, i2;
        androidx.compose.runtime.collection.IdentityArraySet r3;
        androidx.compose.runtime.RecomposeScopeImpl r4;
        androidx.compose.runtime.InvalidationResult $r6, $r7;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        r1 := @parameter0: java.lang.Object;

        r2 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.collection.IdentityScopeMap observations>;

        i0 = staticinvoke <androidx.compose.runtime.collection.IdentityScopeMap: int access$find(androidx.compose.runtime.collection.IdentityScopeMap,java.lang.Object)>(r2, r1);

        if i0 < 0 goto label3;

        r3 = staticinvoke <androidx.compose.runtime.collection.IdentityScopeMap: androidx.compose.runtime.collection.IdentityArraySet access$scopeSetAt(androidx.compose.runtime.collection.IdentityScopeMap,int)>(r2, i0);

        i2 = 0;

        i1 = virtualinvoke r3.<androidx.compose.runtime.collection.IdentityArraySet: int size()>();

     label1:
        if i2 >= i1 goto label3;

        $r5 = virtualinvoke r3.<androidx.compose.runtime.collection.IdentityArraySet: java.lang.Object get(int)>(i2);

        r4 = (androidx.compose.runtime.RecomposeScopeImpl) $r5;

        $r6 = virtualinvoke r4.<androidx.compose.runtime.RecomposeScopeImpl: androidx.compose.runtime.InvalidationResult invalidateForResult(java.lang.Object)>(r1);

        $r7 = <androidx.compose.runtime.InvalidationResult: androidx.compose.runtime.InvalidationResult IMMINENT>;

        if $r6 != $r7 goto label2;

        $r8 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.collection.IdentityScopeMap observationsProcessed>;

        virtualinvoke $r8.<androidx.compose.runtime.collection.IdentityScopeMap: boolean add(java.lang.Object,java.lang.Object)>(r1, r4);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return;
    }

    public void recordWriteOf(java.lang.Object)
    {
        androidx.compose.runtime.CompositionImpl r0;
        java.lang.Object r1, r2, r3, $r7;
        androidx.compose.runtime.collection.IdentityScopeMap r4;
        int i0, i1, i2;
        androidx.compose.runtime.collection.IdentityArraySet r5;
        androidx.compose.runtime.DerivedState r6;
        java.lang.Throwable $r8, r10;
        kotlin.Unit r9;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        r1 := @parameter0: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "value");

        r2 = r0.<androidx.compose.runtime.CompositionImpl: java.lang.Object lock>;

        r3 = r2;

        entermonitor r3;

     label1:
        specialinvoke r0.<androidx.compose.runtime.CompositionImpl: void invalidateScopeOfLocked(java.lang.Object)>(r1);

        r4 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.collection.IdentityScopeMap derivedStates>;

        i0 = staticinvoke <androidx.compose.runtime.collection.IdentityScopeMap: int access$find(androidx.compose.runtime.collection.IdentityScopeMap,java.lang.Object)>(r4, r1);

        if i0 < 0 goto label3;

        r5 = staticinvoke <androidx.compose.runtime.collection.IdentityScopeMap: androidx.compose.runtime.collection.IdentityArraySet access$scopeSetAt(androidx.compose.runtime.collection.IdentityScopeMap,int)>(r4, i0);

        i2 = 0;

        i1 = virtualinvoke r5.<androidx.compose.runtime.collection.IdentityArraySet: int size()>();

     label2:
        if i2 >= i1 goto label3;

        $r7 = virtualinvoke r5.<androidx.compose.runtime.collection.IdentityArraySet: java.lang.Object get(int)>(i2);

        r6 = (androidx.compose.runtime.DerivedState) $r7;

        specialinvoke r0.<androidx.compose.runtime.CompositionImpl: void invalidateScopeOfLocked(java.lang.Object)>(r6);

        i2 = i2 + 1;

        goto label2;

     label3:
        r9 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label4:
        exitmonitor r3;

        goto label7;

     label5:
        $r8 := @caughtexception;

        r10 = $r8;

     label6:
        exitmonitor r3;

        throw r10;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public boolean recompose()
    {
        androidx.compose.runtime.CompositionImpl r0, r3, r4, r16;
        java.lang.Object r1, r2;
        androidx.compose.runtime.collection.IdentityArrayMap r5, r17;
        boolean z4, z5, $z8, z11, z13, z14, z15, z16, z17, $z18, z19;
        androidx.compose.runtime.ComposerImpl $r6;
        java.lang.Throwable $r7, $r8, $r14, $r15, r18;
        java.util.HashSet $r9, $r12;
        java.util.Collection $r10;
        androidx.compose.runtime.CompositionImpl$RememberEventDispatcher $r11;
        java.util.Set $r13;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        r1 = r0.<androidx.compose.runtime.CompositionImpl: java.lang.Object lock>;

        r2 = r1;

        entermonitor r2;

     label01:
        specialinvoke r0.<androidx.compose.runtime.CompositionImpl: void drainPendingModificationsForCompositionLocked()>();

        r3 = r0;

     label02:
        r16 = r3;

        z11 = 0;

     label03:
        r4 = r0;

        r5 = specialinvoke r4.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.collection.IdentityArrayMap takeInvalidations()>();

     label04:
        r17 = r5;

        $r6 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.ComposerImpl composer>;

        z4 = virtualinvoke $r6.<androidx.compose.runtime.ComposerImpl: boolean recompose$runtime_release(androidx.compose.runtime.collection.IdentityArrayMap)>(r17);

        z5 = z4;

        if z5 != 0 goto label05;

        specialinvoke r0.<androidx.compose.runtime.CompositionImpl: void drainPendingModificationsLocked()>();

     label05:
        z13 = z4;

     label06:
        goto label08;

     label07:
        $r14 := @caughtexception;

        r4.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.collection.IdentityArrayMap invalidations> = r5;

        throw $r14;

     label08:
        z14 = z13;

        z15 = z14;

        z16 = 1;

        z17 = z14;

     label09:
        goto label15;

     label10:
        $r8 := @caughtexception;

        r18 = $r8;

     label11:
        if z11 != 0 goto label14;

        $r9 = r16.<androidx.compose.runtime.CompositionImpl: java.util.HashSet abandonSet>;

        $r10 = (java.util.Collection) $r9;

        $z8 = interfaceinvoke $r10.<java.util.Collection: boolean isEmpty()>();

        if $z8 != 0 goto label12;

        $z18 = 1;

        goto label13;

     label12:
        $z18 = 0;

     label13:
        if $z18 == 0 goto label14;

        $r11 = new androidx.compose.runtime.CompositionImpl$RememberEventDispatcher;

        $r12 = r16.<androidx.compose.runtime.CompositionImpl: java.util.HashSet abandonSet>;

        $r13 = (java.util.Set) $r12;

        specialinvoke $r11.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: void <init>(java.util.Set)>($r13);

        virtualinvoke $r11.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: void dispatchAbandons()>();

     label14:
        throw r18;

     label15:
        z19 = z17;

     label16:
        goto label18;

     label17:
        $r7 := @caughtexception;

        specialinvoke r3.<androidx.compose.runtime.CompositionImpl: void abandonChanges()>();

        throw $r7;

     label18:
        exitmonitor r2;

        goto label21;

     label19:
        $r15 := @caughtexception;

     label20:
        exitmonitor r2;

        throw $r15;

     label21:
        return z19;

        catch java.lang.Exception from label04 to label06 with label07;
        catch java.lang.Throwable from label03 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
        catch java.lang.Exception from label02 to label16 with label17;
        catch java.lang.Throwable from label01 to label18 with label19;
        catch java.lang.Throwable from label19 to label20 with label19;
    }

    public void insertMovableContent(java.util.List)
    {
        androidx.compose.runtime.CompositionImpl r0;
        java.util.List r1;
        kotlin.Pair r2;
        androidx.compose.runtime.ComposerImpl $r3;
        java.lang.Object $r4, r15, r16;
        androidx.compose.runtime.MovableContentStateReference $r5;
        androidx.compose.runtime.ControlledComposition $r6;
        boolean $z1, $z2, $z6, z9, z12, $z13;
        java.lang.Throwable $r7, $r13, r22;
        java.util.HashSet $r8, $r11;
        java.util.Collection $r9;
        androidx.compose.runtime.CompositionImpl$RememberEventDispatcher $r10;
        java.util.Set $r12;
        int i0, $i1;
        kotlin.Unit r19, r20, r21;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        r1 := @parameter0: java.util.List;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "references");

        i0 = 0;

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

     label01:
        if i0 >= $i1 goto label03;

        r15 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i0);

        r16 = r15;

        r2 = (kotlin.Pair) r16;

        $r4 = virtualinvoke r2.<kotlin.Pair: java.lang.Object getFirst()>();

        $r5 = (androidx.compose.runtime.MovableContentStateReference) $r4;

        $r6 = virtualinvoke $r5.<androidx.compose.runtime.MovableContentStateReference: androidx.compose.runtime.ControlledComposition getComposition$runtime_release()>();

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r6, r0);

        if $z1 != 0 goto label02;

        $z6 = 0;

        goto label04;

     label02:
        i0 = i0 + 1;

        goto label01;

     label03:
        $z6 = 1;

     label04:
        staticinvoke <androidx.compose.runtime.ComposerKt: void runtimeCheck(boolean)>($z6);

     label05:
        z9 = 0;

     label06:
        $r3 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.ComposerImpl composer>;

        virtualinvoke $r3.<androidx.compose.runtime.ComposerImpl: void insertMovableContentReferences(java.util.List)>(r1);

        r19 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        r20 = r19;

        z12 = 1;

        r21 = r19;

     label07:
        goto label13;

     label08:
        $r7 := @caughtexception;

        r22 = $r7;

     label09:
        if z9 != 0 goto label12;

        $r8 = r0.<androidx.compose.runtime.CompositionImpl: java.util.HashSet abandonSet>;

        $r9 = (java.util.Collection) $r8;

        $z2 = interfaceinvoke $r9.<java.util.Collection: boolean isEmpty()>();

        if $z2 != 0 goto label10;

        $z13 = 1;

        goto label11;

     label10:
        $z13 = 0;

     label11:
        if $z13 == 0 goto label12;

        $r10 = new androidx.compose.runtime.CompositionImpl$RememberEventDispatcher;

        $r11 = r0.<androidx.compose.runtime.CompositionImpl: java.util.HashSet abandonSet>;

        $r12 = (java.util.Set) $r11;

        specialinvoke $r10.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: void <init>(java.util.Set)>($r12);

        virtualinvoke $r10.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: void dispatchAbandons()>();

     label12:
        throw r22;

     label13:
        goto label15;

     label14:
        $r13 := @caughtexception;

        specialinvoke r0.<androidx.compose.runtime.CompositionImpl: void abandonChanges()>();

        throw $r13;

     label15:
        return;

        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.Exception from label05 to label13 with label14;
    }

    public void disposeUnusedMovableContent(androidx.compose.runtime.MovableContentState)
    {
        androidx.compose.runtime.CompositionImpl r0;
        androidx.compose.runtime.MovableContentState r1;
        androidx.compose.runtime.CompositionImpl$RememberEventDispatcher r2, $r7;
        androidx.compose.runtime.SlotTable r3, r4;
        androidx.compose.runtime.SlotWriter r5, r12;
        kotlin.Unit r6;
        java.util.HashSet $r8;
        java.util.Set $r9;
        androidx.compose.runtime.RememberManager $r10;
        java.lang.Throwable $r11, r13;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        r1 := @parameter0: androidx.compose.runtime.MovableContentState;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "state");

        $r7 = new androidx.compose.runtime.CompositionImpl$RememberEventDispatcher;

        $r8 = r0.<androidx.compose.runtime.CompositionImpl: java.util.HashSet abandonSet>;

        $r9 = (java.util.Set) $r8;

        specialinvoke $r7.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: void <init>(java.util.Set)>($r9);

        r2 = $r7;

        r3 = virtualinvoke r1.<androidx.compose.runtime.MovableContentState: androidx.compose.runtime.SlotTable getSlotTable$runtime_release()>();

        r4 = r3;

        r5 = virtualinvoke r4.<androidx.compose.runtime.SlotTable: androidx.compose.runtime.SlotWriter openWriter()>();

     label1:
        r12 = r5;

        $r10 = (androidx.compose.runtime.RememberManager) r2;

        staticinvoke <androidx.compose.runtime.ComposerKt: void removeCurrentGroup(androidx.compose.runtime.SlotWriter,androidx.compose.runtime.RememberManager)>(r12, $r10);

        r6 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label2:
        virtualinvoke r5.<androidx.compose.runtime.SlotWriter: void close()>();

        goto label5;

     label3:
        $r11 := @caughtexception;

        r13 = $r11;

     label4:
        virtualinvoke r5.<androidx.compose.runtime.SlotWriter: void close()>();

        throw r13;

     label5:
        virtualinvoke r2.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: void dispatchRememberObservers()>();

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private final void applyChangesInLocked(java.util.List)
    {
        androidx.compose.runtime.CompositionImpl r0;
        java.util.List r1, $r11, $r27, $r29;
        androidx.compose.runtime.CompositionImpl$RememberEventDispatcher r2, $r4;
        androidx.compose.runtime.RecomposeScopeImpl r3;
        java.util.HashSet $r5;
        java.util.Set $r6;
        boolean $z1, $z2, $z3, $z4, $z5, $z6, z19, $z20;
        androidx.compose.runtime.Trace $r7, $r10, $r12, $r13, $r32, $r34;
        androidx.compose.runtime.Applier $r8, $r9, r40;
        java.lang.Object[] $r14, $r22, $r23, $r25;
        int[] $r15, $r16, $r19, $r20, $r21;
        int $i0, $i1, i2, $i3, i4, $i5, i6, $i7, $i8, i9, i10, i11, i12, i13, $i14, i15;
        androidx.compose.runtime.collection.IdentityArraySet[] $r17;
        androidx.compose.runtime.collection.IdentityArraySet $r18, r53, r54;
        java.lang.Object $r24, r36, r42, r49, r55;
        java.lang.Throwable $r28, $r30, $r31, $r33, r45, r47, r58;
        java.lang.String r35, r48;
        androidx.compose.runtime.SlotTable r37;
        androidx.compose.runtime.SlotWriter r38, r39;
        kotlin.jvm.functions.Function3 r43;
        kotlin.Unit r44, r46, $r56;
        androidx.compose.runtime.collection.IdentityScopeMap r50, r51;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        r1 := @parameter0: java.util.List;

        $r4 = new androidx.compose.runtime.CompositionImpl$RememberEventDispatcher;

        $r5 = r0.<androidx.compose.runtime.CompositionImpl: java.util.HashSet abandonSet>;

        $r6 = (java.util.Set) $r5;

        specialinvoke $r4.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: void <init>(java.util.Set)>($r6);

        r2 = $r4;

     label01:
        $z1 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label04;

     label02:
        $r27 = r0.<androidx.compose.runtime.CompositionImpl: java.util.List lateChanges>;

        $z5 = interfaceinvoke $r27.<java.util.List: boolean isEmpty()>();

        if $z5 == 0 goto label03;

        virtualinvoke r2.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: void dispatchAbandons()>();

     label03:
        return;

     label04:
        r35 = "Compose:applyChanges";

        $r7 = <androidx.compose.runtime.Trace: androidx.compose.runtime.Trace INSTANCE>;

        r36 = virtualinvoke $r7.<androidx.compose.runtime.Trace: java.lang.Object beginSection(java.lang.String)>(r35);

     label05:
        $r8 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.Applier applier>;

        interfaceinvoke $r8.<androidx.compose.runtime.Applier: void onBeginChanges()>();

        r37 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.SlotTable slotTable>;

        r38 = virtualinvoke r37.<androidx.compose.runtime.SlotTable: androidx.compose.runtime.SlotWriter openWriter()>();

     label06:
        r39 = r38;

        r40 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.Applier applier>;

        i2 = 0;

        $i3 = interfaceinvoke r1.<java.util.List: int size()>();

     label07:
        if i2 >= $i3 goto label08;

        r42 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i2);

        r43 = (kotlin.jvm.functions.Function3) r42;

        interfaceinvoke r43.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>(r40, r39, r2);

        i2 = i2 + 1;

        goto label07;

     label08:
        interfaceinvoke r1.<java.util.List: void clear()>();

        r44 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label09:
        virtualinvoke r38.<androidx.compose.runtime.SlotWriter: void close()>();

        goto label12;

     label10:
        $r30 := @caughtexception;

        r45 = $r30;

     label11:
        virtualinvoke r38.<androidx.compose.runtime.SlotWriter: void close()>();

        throw r45;

     label12:
        $r9 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.Applier applier>;

        interfaceinvoke $r9.<androidx.compose.runtime.Applier: void onEndChanges()>();

        r46 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label13:
        $r10 = <androidx.compose.runtime.Trace: androidx.compose.runtime.Trace INSTANCE>;

        virtualinvoke $r10.<androidx.compose.runtime.Trace: void endSection(java.lang.Object)>(r36);

        goto label16;

     label14:
        $r33 := @caughtexception;

        r47 = $r33;

     label15:
        $r34 = <androidx.compose.runtime.Trace: androidx.compose.runtime.Trace INSTANCE>;

        virtualinvoke $r34.<androidx.compose.runtime.Trace: void endSection(java.lang.Object)>(r36);

        throw r47;

     label16:
        virtualinvoke r2.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: void dispatchRememberObservers()>();

        virtualinvoke r2.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: void dispatchSideEffects()>();

        $z2 = r0.<androidx.compose.runtime.CompositionImpl: boolean pendingInvalidScopes>;

        if $z2 == 0 goto label35;

        r48 = "Compose:unobserve";

        $r12 = <androidx.compose.runtime.Trace: androidx.compose.runtime.Trace INSTANCE>;

        r49 = virtualinvoke $r12.<androidx.compose.runtime.Trace: java.lang.Object beginSection(java.lang.String)>(r48);

     label17:
        r0.<androidx.compose.runtime.CompositionImpl: boolean pendingInvalidScopes> = 0;

        r50 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.collection.IdentityScopeMap observations>;

        r51 = r50;

        i4 = 0;

        $i5 = 0;

        i6 = virtualinvoke r51.<androidx.compose.runtime.collection.IdentityScopeMap: int getSize()>();

     label18:
        if $i5 >= i6 goto label29;

        $r16 = virtualinvoke r51.<androidx.compose.runtime.collection.IdentityScopeMap: int[] getValueOrder()>();

        $i7 = $r16[$i5];

        $r17 = virtualinvoke r51.<androidx.compose.runtime.collection.IdentityScopeMap: androidx.compose.runtime.collection.IdentityArraySet[] getScopeSets()>();

        $r18 = $r17[$i7];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r18);

        r53 = $r18;

        r54 = r53;

        z19 = 0;

        $i8 = 0;

        i9 = 0;

        i10 = virtualinvoke r54.<androidx.compose.runtime.collection.IdentityArraySet: int size()>();

     label19:
        if i9 >= i10 goto label24;

        $r23 = virtualinvoke r54.<androidx.compose.runtime.collection.IdentityArraySet: java.lang.Object[] getValues()>();

        $r24 = $r23[i9];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r24, "null cannot be cast to non-null type T of androidx.compose.runtime.collection.IdentityArraySet");

        r55 = $r24;

        r3 = (androidx.compose.runtime.RecomposeScopeImpl) r55;

        $z4 = virtualinvoke r3.<androidx.compose.runtime.RecomposeScopeImpl: boolean getValid()>();

        if $z4 != 0 goto label20;

        $z20 = 1;

        goto label21;

     label20:
        $z20 = 0;

     label21:
        if $z20 != 0 goto label23;

        if $i8 == i9 goto label22;

        $r25 = virtualinvoke r54.<androidx.compose.runtime.collection.IdentityArraySet: java.lang.Object[] getValues()>();

        $r25[$i8] = r55;

     label22:
        $i8 = $i8 + 1;

     label23:
        i9 = i9 + 1;

        goto label19;

     label24:
        i11 = $i8;

        i12 = virtualinvoke r54.<androidx.compose.runtime.collection.IdentityArraySet: int size()>();

     label25:
        if i11 >= i12 goto label26;

        $r22 = virtualinvoke r54.<androidx.compose.runtime.collection.IdentityArraySet: java.lang.Object[] getValues()>();

        $r22[i11] = null;

        i11 = i11 + 1;

        goto label25;

     label26:
        virtualinvoke r54.<androidx.compose.runtime.collection.IdentityArraySet: void setSize(int)>($i8);

        $i1 = virtualinvoke $r18.<androidx.compose.runtime.collection.IdentityArraySet: int size()>();

        if $i1 <= 0 goto label28;

        if i4 == $i5 goto label27;

        $r19 = virtualinvoke r51.<androidx.compose.runtime.collection.IdentityScopeMap: int[] getValueOrder()>();

        i13 = $r19[i4];

        $r20 = virtualinvoke r51.<androidx.compose.runtime.collection.IdentityScopeMap: int[] getValueOrder()>();

        $r20[i4] = $i7;

        $r21 = virtualinvoke r51.<androidx.compose.runtime.collection.IdentityScopeMap: int[] getValueOrder()>();

        $r21[$i5] = i13;

     label27:
        i4 = i4 + 1;

     label28:
        $i5 = $i5 + 1;

        goto label18;

     label29:
        $i14 = i4;

        i15 = virtualinvoke r51.<androidx.compose.runtime.collection.IdentityScopeMap: int getSize()>();

     label30:
        if $i14 >= i15 goto label31;

        $r14 = virtualinvoke r51.<androidx.compose.runtime.collection.IdentityScopeMap: java.lang.Object[] getValues()>();

        $r15 = virtualinvoke r51.<androidx.compose.runtime.collection.IdentityScopeMap: int[] getValueOrder()>();

        $i0 = $r15[$i14];

        $r14[$i0] = null;

        $i14 = $i14 + 1;

        goto label30;

     label31:
        virtualinvoke r51.<androidx.compose.runtime.collection.IdentityScopeMap: void setSize(int)>(i4);

        specialinvoke r0.<androidx.compose.runtime.CompositionImpl: void cleanUpDerivedStateObservations()>();

        $r56 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label32:
        $r13 = <androidx.compose.runtime.Trace: androidx.compose.runtime.Trace INSTANCE>;

        virtualinvoke $r13.<androidx.compose.runtime.Trace: void endSection(java.lang.Object)>(r49);

        goto label35;

     label33:
        $r31 := @caughtexception;

     label34:
        $r32 = <androidx.compose.runtime.Trace: androidx.compose.runtime.Trace INSTANCE>;

        virtualinvoke $r32.<androidx.compose.runtime.Trace: void endSection(java.lang.Object)>(r49);

        throw $r31;

     label35:
        $r11 = r0.<androidx.compose.runtime.CompositionImpl: java.util.List lateChanges>;

        $z3 = interfaceinvoke $r11.<java.util.List: boolean isEmpty()>();

        if $z3 == 0 goto label36;

        virtualinvoke r2.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: void dispatchAbandons()>();

     label36:
        goto label40;

     label37:
        $r28 := @caughtexception;

        r58 = $r28;

     label38:
        $r29 = r0.<androidx.compose.runtime.CompositionImpl: java.util.List lateChanges>;

        $z6 = interfaceinvoke $r29.<java.util.List: boolean isEmpty()>();

        if $z6 == 0 goto label39;

        virtualinvoke r2.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: void dispatchAbandons()>();

     label39:
        throw r58;

     label40:
        return;

        catch java.lang.Throwable from label06 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
        catch java.lang.Throwable from label05 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
        catch java.lang.Throwable from label17 to label32 with label33;
        catch java.lang.Throwable from label33 to label34 with label33;
        catch java.lang.Throwable from label01 to label02 with label37;
        catch java.lang.Throwable from label04 to label35 with label37;
        catch java.lang.Throwable from label37 to label38 with label37;
    }

    public void applyChanges()
    {
        androidx.compose.runtime.CompositionImpl r0, r3, r13;
        java.lang.Object r1, r2;
        java.util.List $r4;
        java.lang.Throwable $r5, $r6, $r12, r17;
        java.util.HashSet $r7, $r10;
        java.util.Collection $r8;
        boolean $z4, z7, z8, $z9;
        androidx.compose.runtime.CompositionImpl$RememberEventDispatcher $r9;
        java.util.Set $r11;
        kotlin.Unit r14, r15, r16, r18, $r19;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        r1 = r0.<androidx.compose.runtime.CompositionImpl: java.lang.Object lock>;

        r2 = r1;

        entermonitor r2;

     label01:
        r3 = r0;

     label02:
        r13 = r3;

        z7 = 0;

     label03:
        $r4 = r0.<androidx.compose.runtime.CompositionImpl: java.util.List changes>;

        specialinvoke r0.<androidx.compose.runtime.CompositionImpl: void applyChangesInLocked(java.util.List)>($r4);

        specialinvoke r0.<androidx.compose.runtime.CompositionImpl: void drainPendingModificationsLocked()>();

        r14 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        r15 = r14;

        z8 = 1;

        r16 = r14;

     label04:
        goto label10;

     label05:
        $r6 := @caughtexception;

        r17 = $r6;

     label06:
        if z7 != 0 goto label09;

        $r7 = r13.<androidx.compose.runtime.CompositionImpl: java.util.HashSet abandonSet>;

        $r8 = (java.util.Collection) $r7;

        $z4 = interfaceinvoke $r8.<java.util.Collection: boolean isEmpty()>();

        if $z4 != 0 goto label07;

        $z9 = 1;

        goto label08;

     label07:
        $z9 = 0;

     label08:
        if $z9 == 0 goto label09;

        $r9 = new androidx.compose.runtime.CompositionImpl$RememberEventDispatcher;

        $r10 = r13.<androidx.compose.runtime.CompositionImpl: java.util.HashSet abandonSet>;

        $r11 = (java.util.Set) $r10;

        specialinvoke $r9.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: void <init>(java.util.Set)>($r11);

        virtualinvoke $r9.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: void dispatchAbandons()>();

     label09:
        throw r17;

     label10:
        r18 = r16;

     label11:
        goto label13;

     label12:
        $r5 := @caughtexception;

        specialinvoke r3.<androidx.compose.runtime.CompositionImpl: void abandonChanges()>();

        throw $r5;

     label13:
        $r19 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label14:
        exitmonitor r2;

        goto label17;

     label15:
        $r12 := @caughtexception;

     label16:
        exitmonitor r2;

        throw $r12;

     label17:
        return;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Exception from label02 to label11 with label12;
        catch java.lang.Throwable from label01 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    public void applyLateChanges()
    {
        androidx.compose.runtime.CompositionImpl r0, r3, r15;
        java.lang.Object r1, r2;
        java.util.List $r4, $r6;
        java.util.Collection $r5, $r11;
        boolean $z4, $z5, z8, $z9, z10, $z11;
        java.lang.Throwable $r7, $r8, $r9, r19;
        java.util.HashSet $r10, $r13;
        androidx.compose.runtime.CompositionImpl$RememberEventDispatcher $r12;
        java.util.Set $r14;
        kotlin.Unit r16, r17, r18, r20, $r21;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        r1 = r0.<androidx.compose.runtime.CompositionImpl: java.lang.Object lock>;

        r2 = r1;

        entermonitor r2;

     label01:
        r3 = r0;

     label02:
        r15 = r3;

        z8 = 0;

     label03:
        $r4 = r0.<androidx.compose.runtime.CompositionImpl: java.util.List lateChanges>;

        $r5 = (java.util.Collection) $r4;

        $z4 = interfaceinvoke $r5.<java.util.Collection: boolean isEmpty()>();

        if $z4 != 0 goto label04;

        $z9 = 1;

        goto label05;

     label04:
        $z9 = 0;

     label05:
        if $z9 == 0 goto label06;

        $r6 = r0.<androidx.compose.runtime.CompositionImpl: java.util.List lateChanges>;

        specialinvoke r0.<androidx.compose.runtime.CompositionImpl: void applyChangesInLocked(java.util.List)>($r6);

     label06:
        r16 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        r17 = r16;

        z10 = 1;

        r18 = r16;

     label07:
        goto label13;

     label08:
        $r9 := @caughtexception;

        r19 = $r9;

     label09:
        if z8 != 0 goto label12;

        $r10 = r15.<androidx.compose.runtime.CompositionImpl: java.util.HashSet abandonSet>;

        $r11 = (java.util.Collection) $r10;

        $z5 = interfaceinvoke $r11.<java.util.Collection: boolean isEmpty()>();

        if $z5 != 0 goto label10;

        $z11 = 1;

        goto label11;

     label10:
        $z11 = 0;

     label11:
        if $z11 == 0 goto label12;

        $r12 = new androidx.compose.runtime.CompositionImpl$RememberEventDispatcher;

        $r13 = r15.<androidx.compose.runtime.CompositionImpl: java.util.HashSet abandonSet>;

        $r14 = (java.util.Set) $r13;

        specialinvoke $r12.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: void <init>(java.util.Set)>($r14);

        virtualinvoke $r12.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: void dispatchAbandons()>();

     label12:
        throw r19;

     label13:
        r20 = r18;

     label14:
        goto label16;

     label15:
        $r8 := @caughtexception;

        specialinvoke r3.<androidx.compose.runtime.CompositionImpl: void abandonChanges()>();

        throw $r8;

     label16:
        $r21 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label17:
        exitmonitor r2;

        goto label20;

     label18:
        $r7 := @caughtexception;

     label19:
        exitmonitor r2;

        throw $r7;

     label20:
        return;

        catch java.lang.Throwable from label03 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.Exception from label02 to label14 with label15;
        catch java.lang.Throwable from label01 to label17 with label18;
        catch java.lang.Throwable from label18 to label19 with label18;
    }

    public void changesApplied()
    {
        androidx.compose.runtime.CompositionImpl r0, r3, r18;
        java.lang.Object r1, r2;
        androidx.compose.runtime.ComposerImpl $r4;
        java.util.HashSet $r5, $r8, $r12, $r15;
        java.util.Collection $r6, $r13;
        boolean $z4, $z5, z8, $z9, z10, $z11;
        androidx.compose.runtime.CompositionImpl$RememberEventDispatcher $r7, $r14;
        java.util.Set $r9, $r16;
        java.lang.Throwable $r10, $r11, $r17, r22;
        kotlin.Unit r19, r20, r21, r23, $r24;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        r1 = r0.<androidx.compose.runtime.CompositionImpl: java.lang.Object lock>;

        r2 = r1;

        entermonitor r2;

     label01:
        r3 = r0;

     label02:
        r18 = r3;

        z8 = 0;

     label03:
        $r4 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.ComposerImpl composer>;

        virtualinvoke $r4.<androidx.compose.runtime.ComposerImpl: void changesApplied$runtime_release()>();

        $r5 = r0.<androidx.compose.runtime.CompositionImpl: java.util.HashSet abandonSet>;

        $r6 = (java.util.Collection) $r5;

        $z4 = interfaceinvoke $r6.<java.util.Collection: boolean isEmpty()>();

        if $z4 != 0 goto label04;

        $z9 = 1;

        goto label05;

     label04:
        $z9 = 0;

     label05:
        if $z9 == 0 goto label06;

        $r7 = new androidx.compose.runtime.CompositionImpl$RememberEventDispatcher;

        $r8 = r0.<androidx.compose.runtime.CompositionImpl: java.util.HashSet abandonSet>;

        $r9 = (java.util.Set) $r8;

        specialinvoke $r7.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: void <init>(java.util.Set)>($r9);

        virtualinvoke $r7.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: void dispatchAbandons()>();

     label06:
        r19 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        r20 = r19;

        z10 = 1;

        r21 = r19;

     label07:
        goto label13;

     label08:
        $r11 := @caughtexception;

        r22 = $r11;

     label09:
        if z8 != 0 goto label12;

        $r12 = r18.<androidx.compose.runtime.CompositionImpl: java.util.HashSet abandonSet>;

        $r13 = (java.util.Collection) $r12;

        $z5 = interfaceinvoke $r13.<java.util.Collection: boolean isEmpty()>();

        if $z5 != 0 goto label10;

        $z11 = 1;

        goto label11;

     label10:
        $z11 = 0;

     label11:
        if $z11 == 0 goto label12;

        $r14 = new androidx.compose.runtime.CompositionImpl$RememberEventDispatcher;

        $r15 = r18.<androidx.compose.runtime.CompositionImpl: java.util.HashSet abandonSet>;

        $r16 = (java.util.Set) $r15;

        specialinvoke $r14.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: void <init>(java.util.Set)>($r16);

        virtualinvoke $r14.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: void dispatchAbandons()>();

     label12:
        throw r22;

     label13:
        r23 = r21;

     label14:
        goto label16;

     label15:
        $r17 := @caughtexception;

        specialinvoke r3.<androidx.compose.runtime.CompositionImpl: void abandonChanges()>();

        throw $r17;

     label16:
        $r24 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label17:
        exitmonitor r2;

        goto label20;

     label18:
        $r10 := @caughtexception;

     label19:
        exitmonitor r2;

        throw $r10;

     label20:
        return;

        catch java.lang.Throwable from label03 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.Exception from label02 to label14 with label15;
        catch java.lang.Throwable from label01 to label17 with label18;
        catch java.lang.Throwable from label18 to label19 with label18;
    }

    private final java.lang.Object guardInvalidationsLocked(kotlin.jvm.functions.Function1)
    {
        androidx.compose.runtime.CompositionImpl r0;
        kotlin.jvm.functions.Function1 r1;
        androidx.compose.runtime.collection.IdentityArrayMap r2;
        java.lang.Object r3;
        java.lang.Throwable r4, $r5;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        r2 = specialinvoke r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.collection.IdentityArrayMap takeInvalidations()>();

     label1:
        r3 = interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r2);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r4 = $r5;

        r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.collection.IdentityArrayMap invalidations> = r2;

        throw r4;

     label4:
        return r3;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private final java.lang.Object guardChanges(kotlin.jvm.functions.Function0)
    {
        androidx.compose.runtime.CompositionImpl r0, r9;
        kotlin.jvm.functions.Function0 r1;
        java.lang.Throwable $r2, $r3, r13;
        java.util.HashSet $r4, $r7;
        java.util.Collection $r5;
        boolean $z2, z4, z5, $z6;
        androidx.compose.runtime.CompositionImpl$RememberEventDispatcher $r6;
        java.util.Set $r8;
        java.lang.Object r10, r11, r12, r14;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        r1 := @parameter0: kotlin.jvm.functions.Function0;

     label01:
        r9 = r0;

        z4 = 0;

     label02:
        r10 = interfaceinvoke r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        r11 = r10;

        z5 = 1;

        r12 = r10;

     label03:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        goto label09;

     label04:
        $r3 := @caughtexception;

        r13 = $r3;

     label05:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        if z4 != 0 goto label08;

        $r4 = r9.<androidx.compose.runtime.CompositionImpl: java.util.HashSet abandonSet>;

        $r5 = (java.util.Collection) $r4;

        $z2 = interfaceinvoke $r5.<java.util.Collection: boolean isEmpty()>();

        if $z2 != 0 goto label06;

        $z6 = 1;

        goto label07;

     label06:
        $z6 = 0;

     label07:
        if $z6 == 0 goto label08;

        $r6 = new androidx.compose.runtime.CompositionImpl$RememberEventDispatcher;

        $r7 = r9.<androidx.compose.runtime.CompositionImpl: java.util.HashSet abandonSet>;

        $r8 = (java.util.Set) $r7;

        specialinvoke $r6.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: void <init>(java.util.Set)>($r8);

        virtualinvoke $r6.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: void dispatchAbandons()>();

     label08:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw r13;

     label09:
        r14 = r12;

     label10:
        goto label12;

     label11:
        $r2 := @caughtexception;

        specialinvoke r0.<androidx.compose.runtime.CompositionImpl: void abandonChanges()>();

        throw $r2;

     label12:
        return r14;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Exception from label01 to label10 with label11;
    }

    private final void abandonChanges()
    {
        androidx.compose.runtime.CompositionImpl r0;
        java.util.concurrent.atomic.AtomicReference $r1;
        java.util.List $r2, $r3;
        java.util.HashSet $r4;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        $r1 = r0.<androidx.compose.runtime.CompositionImpl: java.util.concurrent.atomic.AtomicReference pendingModifications>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(null);

        $r2 = r0.<androidx.compose.runtime.CompositionImpl: java.util.List changes>;

        interfaceinvoke $r2.<java.util.List: void clear()>();

        $r3 = r0.<androidx.compose.runtime.CompositionImpl: java.util.List lateChanges>;

        interfaceinvoke $r3.<java.util.List: void clear()>();

        $r4 = r0.<androidx.compose.runtime.CompositionImpl: java.util.HashSet abandonSet>;

        virtualinvoke $r4.<java.util.HashSet: void clear()>();

        return;
    }

    public void invalidateAll()
    {
        androidx.compose.runtime.CompositionImpl r0;
        java.lang.Object r1, r2, r4, r5;
        java.lang.Object[] $r3;
        int i0, i1;
        androidx.compose.runtime.SlotTable $r6;
        boolean $z3;
        java.lang.Throwable $r7;
        androidx.compose.runtime.RecomposeScopeImpl $r8;
        kotlin.Unit $r9;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        r1 = r0.<androidx.compose.runtime.CompositionImpl: java.lang.Object lock>;

        r2 = r1;

        entermonitor r2;

     label01:
        $r6 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.SlotTable slotTable>;

        $r3 = virtualinvoke $r6.<androidx.compose.runtime.SlotTable: java.lang.Object[] getSlots()>();

        i1 = 0;

        i0 = lengthof $r3;

     label02:
        if i1 >= i0 goto label06;

        r4 = $r3[i1];

        r5 = r4;

        $z3 = r5 instanceof androidx.compose.runtime.RecomposeScopeImpl;

        if $z3 == 0 goto label03;

        $r8 = (androidx.compose.runtime.RecomposeScopeImpl) r5;

        goto label04;

     label03:
        $r8 = null;

     label04:
        if $r8 == null goto label05;

        virtualinvoke $r8.<androidx.compose.runtime.RecomposeScopeImpl: void invalidate()>();

        goto label05;

     label05:
        i1 = i1 + 1;

        goto label02;

     label06:
        $r9 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label07:
        exitmonitor r2;

        goto label10;

     label08:
        $r7 := @caughtexception;

     label09:
        exitmonitor r2;

        throw $r7;

     label10:
        return;

        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public void verifyConsistent()
    {
        androidx.compose.runtime.CompositionImpl r0;
        java.lang.Object r1, r2;
        boolean $z1;
        androidx.compose.runtime.ComposerImpl $r3;
        androidx.compose.runtime.SlotTable $r4, $r5;
        java.lang.Throwable $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        r1 = r0.<androidx.compose.runtime.CompositionImpl: java.lang.Object lock>;

        r2 = r1;

        entermonitor r2;

     label1:
        $z1 = virtualinvoke r0.<androidx.compose.runtime.CompositionImpl: boolean isComposing()>();

        if $z1 != 0 goto label2;

        $r3 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.ComposerImpl composer>;

        virtualinvoke $r3.<androidx.compose.runtime.ComposerImpl: void verifyConsistent$runtime_release()>();

        $r4 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.SlotTable slotTable>;

        virtualinvoke $r4.<androidx.compose.runtime.SlotTable: void verifyWellFormed()>();

        $r5 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.SlotTable slotTable>;

        specialinvoke r0.<androidx.compose.runtime.CompositionImpl: void validateRecomposeScopeAnchors(androidx.compose.runtime.SlotTable)>($r5);

     label2:
        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label3:
        exitmonitor r2;

        goto label6;

     label4:
        $r6 := @caughtexception;

     label5:
        exitmonitor r2;

        throw $r6;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.lang.Object delegateInvalidations(androidx.compose.runtime.ControlledComposition, int, kotlin.jvm.functions.Function0)
    {
        androidx.compose.runtime.CompositionImpl r0, $r5;
        androidx.compose.runtime.ControlledComposition r1;
        int i0;
        kotlin.jvm.functions.Function0 r2;
        java.lang.Object r3, $r7;
        java.lang.Throwable r4, $r6;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        r1 := @parameter0: androidx.compose.runtime.ControlledComposition;

        i0 := @parameter1: int;

        r2 := @parameter2: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "block");

        if r1 == null goto label6;

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, r0);

        if $z0 != 0 goto label6;

        if i0 < 0 goto label6;

        $r5 = (androidx.compose.runtime.CompositionImpl) r1;

        r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.CompositionImpl invalidationDelegate> = $r5;

        r0.<androidx.compose.runtime.CompositionImpl: int invalidationDelegateGroup> = i0;

     label1:
        r3 = interfaceinvoke r2.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

     label2:
        r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.CompositionImpl invalidationDelegate> = null;

        r0.<androidx.compose.runtime.CompositionImpl: int invalidationDelegateGroup> = 0;

        goto label5;

     label3:
        $r6 := @caughtexception;

        r4 = $r6;

     label4:
        r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.CompositionImpl invalidationDelegate> = null;

        r0.<androidx.compose.runtime.CompositionImpl: int invalidationDelegateGroup> = 0;

        throw r4;

     label5:
        $r7 = r3;

        goto label7;

     label6:
        $r7 = interfaceinvoke r2.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

     label7:
        return $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public final androidx.compose.runtime.InvalidationResult invalidate(androidx.compose.runtime.RecomposeScopeImpl, java.lang.Object)
    {
        androidx.compose.runtime.CompositionImpl r0;
        androidx.compose.runtime.RecomposeScopeImpl r1;
        java.lang.Object r2;
        androidx.compose.runtime.Anchor r3;
        boolean $z0, $z1, $z2, $z3, $z4;
        androidx.compose.runtime.SlotTable $r4;
        androidx.compose.runtime.InvalidationResult $r5, $r6, $r7, $r8;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        r1 := @parameter0: androidx.compose.runtime.RecomposeScopeImpl;

        r2 := @parameter1: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "scope");

        $z0 = virtualinvoke r1.<androidx.compose.runtime.RecomposeScopeImpl: boolean getDefaultsInScope()>();

        if $z0 == 0 goto label1;

        virtualinvoke r1.<androidx.compose.runtime.RecomposeScopeImpl: void setDefaultsInvalid(boolean)>(1);

     label1:
        r3 = virtualinvoke r1.<androidx.compose.runtime.RecomposeScopeImpl: androidx.compose.runtime.Anchor getAnchor()>();

        if r3 == null goto label2;

        $r4 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.SlotTable slotTable>;

        $z1 = virtualinvoke $r4.<androidx.compose.runtime.SlotTable: boolean ownsAnchor(androidx.compose.runtime.Anchor)>(r3);

        if $z1 == 0 goto label2;

        $z2 = virtualinvoke r3.<androidx.compose.runtime.Anchor: boolean getValid()>();

        if $z2 != 0 goto label3;

     label2:
        $r8 = <androidx.compose.runtime.InvalidationResult: androidx.compose.runtime.InvalidationResult IGNORED>;

        return $r8;

     label3:
        $z3 = virtualinvoke r3.<androidx.compose.runtime.Anchor: boolean getValid()>();

        if $z3 != 0 goto label4;

        $r7 = <androidx.compose.runtime.InvalidationResult: androidx.compose.runtime.InvalidationResult IGNORED>;

        return $r7;

     label4:
        $z4 = virtualinvoke r1.<androidx.compose.runtime.RecomposeScopeImpl: boolean getCanRecompose()>();

        if $z4 != 0 goto label5;

        $r6 = <androidx.compose.runtime.InvalidationResult: androidx.compose.runtime.InvalidationResult IGNORED>;

        return $r6;

     label5:
        $r5 = specialinvoke r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.InvalidationResult invalidateChecked(androidx.compose.runtime.RecomposeScopeImpl,androidx.compose.runtime.Anchor,java.lang.Object)>(r1, r3, r2);

        return $r5;
    }

    private final androidx.compose.runtime.InvalidationResult invalidateChecked(androidx.compose.runtime.RecomposeScopeImpl, androidx.compose.runtime.Anchor, java.lang.Object)
    {
        androidx.compose.runtime.CompositionImpl r0, r4, r7, r8, $r10, $r19, r20;
        androidx.compose.runtime.RecomposeScopeImpl r1;
        androidx.compose.runtime.Anchor r2;
        java.lang.Object r3, r5, r6;
        androidx.compose.runtime.InvalidationResult r9, $r13, $r22;
        androidx.compose.runtime.ControlledComposition $r11;
        androidx.compose.runtime.CompositionContext $r12;
        boolean $z3, $z4, $z5, $z6;
        androidx.compose.runtime.collection.IdentityArrayMap $r14, $r15;
        androidx.compose.runtime.ComposerImpl $r16;
        int $i0;
        androidx.compose.runtime.SlotTable $r17;
        java.lang.Throwable $r18, r21;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        r1 := @parameter0: androidx.compose.runtime.RecomposeScopeImpl;

        r2 := @parameter1: androidx.compose.runtime.Anchor;

        r3 := @parameter2: java.lang.Object;

        r5 = r0.<androidx.compose.runtime.CompositionImpl: java.lang.Object lock>;

        r6 = r5;

        entermonitor r6;

     label01:
        $r10 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.CompositionImpl invalidationDelegate>;

        if $r10 == null goto label04;

        r7 = $r10;

        $r17 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.SlotTable slotTable>;

        $i0 = r0.<androidx.compose.runtime.CompositionImpl: int invalidationDelegateGroup>;

        $z6 = virtualinvoke $r17.<androidx.compose.runtime.SlotTable: boolean groupContainsAnchor(int,androidx.compose.runtime.Anchor)>($i0, r2);

        if $z6 == 0 goto label02;

        $r19 = r7;

        goto label03;

     label02:
        $r19 = null;

     label03:
        goto label05;

     label04:
        $r19 = null;

     label05:
        r8 = $r19;

        if r8 != null goto label09;

        $z4 = virtualinvoke r0.<androidx.compose.runtime.CompositionImpl: boolean isComposing()>();

        if $z4 == 0 goto label07;

        $r16 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.ComposerImpl composer>;

        $z5 = virtualinvoke $r16.<androidx.compose.runtime.ComposerImpl: boolean tryImminentInvalidation$runtime_release(androidx.compose.runtime.RecomposeScopeImpl,java.lang.Object)>(r1, r3);

        if $z5 == 0 goto label07;

        r9 = <androidx.compose.runtime.InvalidationResult: androidx.compose.runtime.InvalidationResult IMMINENT>;

     label06:
        exitmonitor r6;

        return r9;

     label07:
        if r3 != null goto label08;

        $r15 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.collection.IdentityArrayMap invalidations>;

        virtualinvoke $r15.<androidx.compose.runtime.collection.IdentityArrayMap: void set(java.lang.Object,java.lang.Object)>(r1, null);

        goto label09;

     label08:
        $r14 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.collection.IdentityArrayMap invalidations>;

        staticinvoke <androidx.compose.runtime.CompositionKt: void access$addValue(androidx.compose.runtime.collection.IdentityArrayMap,java.lang.Object,java.lang.Object)>($r14, r1, r3);

     label09:
        r20 = r8;

     label10:
        exitmonitor r6;

        goto label13;

     label11:
        $r18 := @caughtexception;

        r21 = $r18;

     label12:
        exitmonitor r6;

        throw r21;

     label13:
        r4 = r20;

        if r4 == null goto label14;

        $r13 = specialinvoke r4.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.InvalidationResult invalidateChecked(androidx.compose.runtime.RecomposeScopeImpl,androidx.compose.runtime.Anchor,java.lang.Object)>(r1, r2, r3);

        return $r13;

     label14:
        $r12 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.CompositionContext parent>;

        $r11 = (androidx.compose.runtime.ControlledComposition) r0;

        virtualinvoke $r12.<androidx.compose.runtime.CompositionContext: void invalidate$runtime_release(androidx.compose.runtime.ControlledComposition)>($r11);

        $z3 = virtualinvoke r0.<androidx.compose.runtime.CompositionImpl: boolean isComposing()>();

        if $z3 == 0 goto label15;

        $r22 = <androidx.compose.runtime.InvalidationResult: androidx.compose.runtime.InvalidationResult DEFERRED>;

        goto label16;

     label15:
        $r22 = <androidx.compose.runtime.InvalidationResult: androidx.compose.runtime.InvalidationResult SCHEDULED>;

     label16:
        return $r22;

        catch java.lang.Throwable from label01 to label06 with label11;
        catch java.lang.Throwable from label07 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public final void removeObservation$runtime_release(java.lang.Object, androidx.compose.runtime.RecomposeScopeImpl)
    {
        androidx.compose.runtime.CompositionImpl r0;
        java.lang.Object r1;
        androidx.compose.runtime.RecomposeScopeImpl r2;
        androidx.compose.runtime.collection.IdentityScopeMap $r3;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: androidx.compose.runtime.RecomposeScopeImpl;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "instance");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "scope");

        $r3 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.collection.IdentityScopeMap observations>;

        virtualinvoke $r3.<androidx.compose.runtime.collection.IdentityScopeMap: boolean remove(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public final void removeDerivedStateObservation$runtime_release(androidx.compose.runtime.DerivedState)
    {
        androidx.compose.runtime.CompositionImpl r0;
        androidx.compose.runtime.DerivedState r1;
        androidx.compose.runtime.collection.IdentityScopeMap $r2, $r3;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        r1 := @parameter0: androidx.compose.runtime.DerivedState;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "state");

        $r2 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.collection.IdentityScopeMap observations>;

        $z0 = virtualinvoke $r2.<androidx.compose.runtime.collection.IdentityScopeMap: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r3 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.collection.IdentityScopeMap derivedStates>;

        virtualinvoke $r3.<androidx.compose.runtime.collection.IdentityScopeMap: void removeScope(java.lang.Object)>(r1);

     label1:
        return;
    }

    private final androidx.compose.runtime.collection.IdentityArrayMap takeInvalidations()
    {
        androidx.compose.runtime.CompositionImpl r0;
        androidx.compose.runtime.collection.IdentityArrayMap r1, $r2;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        r1 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.collection.IdentityArrayMap invalidations>;

        $r2 = new androidx.compose.runtime.collection.IdentityArrayMap;

        specialinvoke $r2.<androidx.compose.runtime.collection.IdentityArrayMap: void <init>(int,int,kotlin.jvm.internal.DefaultConstructorMarker)>(0, 1, null);

        r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.collection.IdentityArrayMap invalidations> = $r2;

        return r1;
    }

    private final void validateRecomposeScopeAnchors(androidx.compose.runtime.SlotTable)
    {
        androidx.compose.runtime.CompositionImpl r0;
        androidx.compose.runtime.SlotTable r1;
        java.util.List r2, $r7;
        java.lang.Object r3, r21, r22, $r25;
        androidx.compose.runtime.RecomposeScopeImpl r4, $r23, $r26;
        androidx.compose.runtime.Anchor $r6, r27;
        int $i0, i1, $i2, $i3, i4, i5;
        boolean $z3, $z4, z12;
        java.lang.Object[] $r8, $r18;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r14, $r15, r30;
        java.lang.String $r17, r28;
        java.util.Collection r19;
        java.util.ArrayList r29;
        java.lang.IllegalStateException r31;
        java.lang.Throwable r32;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        r1 := @parameter0: androidx.compose.runtime.SlotTable;

        $r18 = virtualinvoke r1.<androidx.compose.runtime.SlotTable: java.lang.Object[] getSlots()>();

        r29 = new java.util.ArrayList;

        specialinvoke r29.<java.util.ArrayList: void <init>()>();

        r19 = (java.util.Collection) r29;

        i1 = 0;

        $i2 = lengthof $r18;

     label1:
        if i1 >= $i2 goto label5;

        r21 = $r18[i1];

        r22 = r21;

        r3 = r22;

        $z4 = r3 instanceof androidx.compose.runtime.RecomposeScopeImpl;

        if $z4 == 0 goto label2;

        $r23 = (androidx.compose.runtime.RecomposeScopeImpl) r3;

        goto label3;

     label2:
        $r23 = null;

     label3:
        if $r23 == null goto label4;

        r4 = $r23;

        interfaceinvoke r19.<java.util.Collection: boolean add(java.lang.Object)>(r4);

        goto label4;

     label4:
        i1 = i1 + 1;

        goto label1;

     label5:
        r2 = (java.util.List) r19;

        $i3 = 0;

        i4 = interfaceinvoke r2.<java.util.List: int size()>();

     label6:
        if $i3 >= i4 goto label9;

        $r25 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>($i3);

        $r26 = (androidx.compose.runtime.RecomposeScopeImpl) $r25;

        $r6 = virtualinvoke $r26.<androidx.compose.runtime.RecomposeScopeImpl: androidx.compose.runtime.Anchor getAnchor()>();

        if $r6 == null goto label8;

        r27 = $r6;

        $i0 = virtualinvoke r27.<androidx.compose.runtime.Anchor: int toIndexFor(androidx.compose.runtime.SlotTable)>(r1);

        $r7 = virtualinvoke r1.<androidx.compose.runtime.SlotTable: java.util.List slotsOf$runtime_release(int)>($i0);

        $z3 = interfaceinvoke $r7.<java.util.List: boolean contains(java.lang.Object)>($r26);

        if $z3 != 0 goto label7;

        z12 = 0;

        $r8 = virtualinvoke r1.<androidx.compose.runtime.SlotTable: java.lang.Object[] getSlots()>();

        i5 = staticinvoke <kotlin.collections.ArraysKt: int indexOf(java.lang.Object[],java.lang.Object)>($r8, $r26);

        r30 = new java.lang.StringBuilder;

        specialinvoke r30.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Misaligned anchor ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r27);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in scope ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r26);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" encountered, scope found at ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        r28 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        r31 = new java.lang.IllegalStateException;

        $r17 = virtualinvoke r28.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r31.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r17);

        r32 = (java.lang.Throwable) r31;

        throw r32;

     label7:
        goto label8;

     label8:
        $i3 = $i3 + 1;

        goto label6;

     label9:
        return;
    }

    private final java.lang.Object trackAbandonedValues(kotlin.jvm.functions.Function0)
    {
        androidx.compose.runtime.CompositionImpl r0;
        kotlin.jvm.functions.Function0 r1;
        java.lang.Throwable $r2, r11;
        java.util.HashSet $r3, $r6;
        java.util.Collection $r4;
        boolean $z2, z3, z4, $z5;
        androidx.compose.runtime.CompositionImpl$RememberEventDispatcher $r5;
        java.util.Set $r7;
        java.lang.Object r8, r9, r10;

        r0 := @this: androidx.compose.runtime.CompositionImpl;

        r1 := @parameter0: kotlin.jvm.functions.Function0;

        z3 = 0;

     label1:
        r8 = interfaceinvoke r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        r9 = r8;

        z4 = 1;

        r10 = r8;

     label2:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        goto label8;

     label3:
        $r2 := @caughtexception;

        r11 = $r2;

     label4:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        if z3 != 0 goto label7;

        $r3 = r0.<androidx.compose.runtime.CompositionImpl: java.util.HashSet abandonSet>;

        $r4 = (java.util.Collection) $r3;

        $z2 = interfaceinvoke $r4.<java.util.Collection: boolean isEmpty()>();

        if $z2 != 0 goto label5;

        $z5 = 1;

        goto label6;

     label5:
        $z5 = 0;

     label6:
        if $z5 == 0 goto label7;

        $r5 = new androidx.compose.runtime.CompositionImpl$RememberEventDispatcher;

        $r6 = r0.<androidx.compose.runtime.CompositionImpl: java.util.HashSet abandonSet>;

        $r7 = (java.util.Set) $r6;

        specialinvoke $r5.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: void <init>(java.util.Set)>($r7);

        virtualinvoke $r5.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: void dispatchAbandons()>();

     label7:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw r11;

     label8:
        return r10;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private static final void addPendingInvalidationsLocked$invalidate(androidx.compose.runtime.CompositionImpl, boolean, kotlin.jvm.internal.Ref$ObjectRef, java.lang.Object)
    {
        androidx.compose.runtime.CompositionImpl r0;
        boolean $z0, $z5, $z6;
        kotlin.jvm.internal.Ref$ObjectRef r1;
        java.lang.Object r2, $r9, $r13;
        androidx.compose.runtime.collection.IdentityScopeMap r3, $r10;
        int i0, i1, i2;
        androidx.compose.runtime.collection.IdentityArraySet r4;
        androidx.compose.runtime.RecomposeScopeImpl r5;
        java.util.HashSet r6, r7, r8, $r14, $r15, $r16;
        androidx.compose.runtime.InvalidationResult $r11, $r12;

        r0 := @parameter0: androidx.compose.runtime.CompositionImpl;

        $z0 := @parameter1: boolean;

        r1 := @parameter2: kotlin.jvm.internal.Ref$ObjectRef;

        r2 := @parameter3: java.lang.Object;

        r3 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.collection.IdentityScopeMap observations>;

        i0 = staticinvoke <androidx.compose.runtime.collection.IdentityScopeMap: int access$find(androidx.compose.runtime.collection.IdentityScopeMap,java.lang.Object)>(r3, r2);

        if i0 < 0 goto label5;

        r4 = staticinvoke <androidx.compose.runtime.collection.IdentityScopeMap: androidx.compose.runtime.collection.IdentityArraySet access$scopeSetAt(androidx.compose.runtime.collection.IdentityScopeMap,int)>(r3, i0);

        i2 = 0;

        i1 = virtualinvoke r4.<androidx.compose.runtime.collection.IdentityArraySet: int size()>();

     label1:
        if i2 >= i1 goto label5;

        $r9 = virtualinvoke r4.<androidx.compose.runtime.collection.IdentityArraySet: java.lang.Object get(int)>(i2);

        r5 = (androidx.compose.runtime.RecomposeScopeImpl) $r9;

        $r10 = r0.<androidx.compose.runtime.CompositionImpl: androidx.compose.runtime.collection.IdentityScopeMap observationsProcessed>;

        $z5 = virtualinvoke $r10.<androidx.compose.runtime.collection.IdentityScopeMap: boolean remove(java.lang.Object,java.lang.Object)>(r2, r5);

        if $z5 != 0 goto label4;

        $r11 = virtualinvoke r5.<androidx.compose.runtime.RecomposeScopeImpl: androidx.compose.runtime.InvalidationResult invalidateForResult(java.lang.Object)>(r2);

        $r12 = <androidx.compose.runtime.InvalidationResult: androidx.compose.runtime.InvalidationResult IGNORED>;

        if $r11 == $r12 goto label4;

        $z6 = virtualinvoke r5.<androidx.compose.runtime.RecomposeScopeImpl: boolean isConditional()>();

        if $z6 == 0 goto label2;

        if $z0 != 0 goto label2;

        $r15 = r0.<androidx.compose.runtime.CompositionImpl: java.util.HashSet conditionallyInvalidatedScopes>;

        virtualinvoke $r15.<java.util.HashSet: boolean add(java.lang.Object)>(r5);

        goto label4;

     label2:
        $r13 = r1.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        $r16 = (java.util.HashSet) $r13;

        if $r16 != null goto label3;

        $r14 = new java.util.HashSet;

        specialinvoke $r14.<java.util.HashSet: void <init>()>();

        r6 = $r14;

        r7 = r6;

        r1.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element> = r7;

        $r16 = r6;

     label3:
        r8 = $r16;

        virtualinvoke r8.<java.util.HashSet: boolean add(java.lang.Object)>(r5);

     label4:
        i2 = i2 + 1;

        goto label1;

     label5:
        return;
    }

androidx.compose.runtime.CompositionImpl$RememberEventDispatcher
<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: java.util.Set abandoning>
<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: java.util.List remembering>
<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: java.util.List forgetting>
<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: java.util.List sideEffects>
    public void <init>(java.util.Set)
    {
        androidx.compose.runtime.CompositionImpl$RememberEventDispatcher r0;
        java.util.Set r1;
        java.util.ArrayList $r2, $r4, $r6;
        java.util.List $r3, $r5, $r7;

        r0 := @this: androidx.compose.runtime.CompositionImpl$RememberEventDispatcher;

        r1 := @parameter0: java.util.Set;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "abandoning");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: java.util.Set abandoning> = r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = (java.util.List) $r2;

        r0.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: java.util.List remembering> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = (java.util.List) $r4;

        r0.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: java.util.List forgetting> = $r5;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r7 = (java.util.List) $r6;

        r0.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: java.util.List sideEffects> = $r7;

        return;
    }

    public void remembering(androidx.compose.runtime.RememberObserver)
    {
        androidx.compose.runtime.CompositionImpl$RememberEventDispatcher r0;
        androidx.compose.runtime.RememberObserver r1;
        int i0;
        java.util.List $r2, $r3, $r4;
        java.util.Set $r6;

        r0 := @this: androidx.compose.runtime.CompositionImpl$RememberEventDispatcher;

        r1 := @parameter0: androidx.compose.runtime.RememberObserver;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "instance");

        $r2 = r0.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: java.util.List forgetting>;

        i0 = interfaceinvoke $r2.<java.util.List: int lastIndexOf(java.lang.Object)>(r1);

        if i0 < 0 goto label1;

        $r4 = r0.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: java.util.List forgetting>;

        interfaceinvoke $r4.<java.util.List: java.lang.Object remove(int)>(i0);

        $r6 = r0.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: java.util.Set abandoning>;

        interfaceinvoke $r6.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        goto label2;

     label1:
        $r3 = r0.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: java.util.List remembering>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1);

     label2:
        return;
    }

    public void forgetting(androidx.compose.runtime.RememberObserver)
    {
        androidx.compose.runtime.CompositionImpl$RememberEventDispatcher r0;
        androidx.compose.runtime.RememberObserver r1;
        int i0;
        java.util.List $r2, $r3, $r4;
        java.util.Set $r6;

        r0 := @this: androidx.compose.runtime.CompositionImpl$RememberEventDispatcher;

        r1 := @parameter0: androidx.compose.runtime.RememberObserver;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "instance");

        $r2 = r0.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: java.util.List remembering>;

        i0 = interfaceinvoke $r2.<java.util.List: int lastIndexOf(java.lang.Object)>(r1);

        if i0 < 0 goto label1;

        $r4 = r0.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: java.util.List remembering>;

        interfaceinvoke $r4.<java.util.List: java.lang.Object remove(int)>(i0);

        $r6 = r0.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: java.util.Set abandoning>;

        interfaceinvoke $r6.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        goto label2;

     label1:
        $r3 = r0.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: java.util.List forgetting>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1);

     label2:
        return;
    }

    public void sideEffect(kotlin.jvm.functions.Function0)
    {
        androidx.compose.runtime.CompositionImpl$RememberEventDispatcher r0;
        kotlin.jvm.functions.Function0 r1;
        java.util.List $r2;
        java.util.Collection $r3;

        r0 := @this: androidx.compose.runtime.CompositionImpl$RememberEventDispatcher;

        r1 := @parameter0: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "effect");

        $r2 = r0.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: java.util.List sideEffects>;

        $r3 = (java.util.Collection) $r2;

        interfaceinvoke $r3.<java.util.Collection: boolean add(java.lang.Object)>(r1);

        return;
    }

    public final void dispatchRememberObservers()
    {
        androidx.compose.runtime.CompositionImpl$RememberEventDispatcher r0;
        int i0, $i1, i2, i3;
        java.lang.Object r1, $r14, r21, r26;
        androidx.compose.runtime.RememberObserver r2, r22;
        java.util.List $r3, $r5, $r11, $r13, r27;
        java.util.Collection $r4, $r6;
        boolean $z1, $z2, $z4, $z5, $z8, z11;
        androidx.compose.runtime.Trace $r7, $r8, $r10, $r12, $r17, $r19;
        java.util.Set $r9, $r15;
        java.lang.Throwable $r16, $r18;
        java.lang.String r20, r25;
        kotlin.Unit $r23, $r28;

        r0 := @this: androidx.compose.runtime.CompositionImpl$RememberEventDispatcher;

        $r3 = r0.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: java.util.List forgetting>;

        $r4 = (java.util.Collection) $r3;

        $z1 = interfaceinvoke $r4.<java.util.Collection: boolean isEmpty()>();

        if $z1 != 0 goto label01;

        $z5 = 1;

        goto label02;

     label01:
        $z5 = 0;

     label02:
        if $z5 == 0 goto label10;

        r20 = "Compose:onForgotten";

        $r10 = <androidx.compose.runtime.Trace: androidx.compose.runtime.Trace INSTANCE>;

        r21 = virtualinvoke $r10.<androidx.compose.runtime.Trace: java.lang.Object beginSection(java.lang.String)>(r20);

     label03:
        $r11 = r0.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: java.util.List forgetting>;

        $i1 = interfaceinvoke $r11.<java.util.List: int size()>();

        i2 = $i1 - 1;

     label04:
        if -1 >= i2 goto label06;

        $r13 = r0.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: java.util.List forgetting>;

        $r14 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(i2);

        r22 = (androidx.compose.runtime.RememberObserver) $r14;

        $r15 = r0.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: java.util.Set abandoning>;

        $z4 = interfaceinvoke $r15.<java.util.Set: boolean contains(java.lang.Object)>(r22);

        if $z4 != 0 goto label05;

        interfaceinvoke r22.<androidx.compose.runtime.RememberObserver: void onForgotten()>();

     label05:
        i2 = i2 + -1;

        goto label04;

     label06:
        $r23 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label07:
        $r12 = <androidx.compose.runtime.Trace: androidx.compose.runtime.Trace INSTANCE>;

        virtualinvoke $r12.<androidx.compose.runtime.Trace: void endSection(java.lang.Object)>(r21);

        goto label10;

     label08:
        $r16 := @caughtexception;

     label09:
        $r17 = <androidx.compose.runtime.Trace: androidx.compose.runtime.Trace INSTANCE>;

        virtualinvoke $r17.<androidx.compose.runtime.Trace: void endSection(java.lang.Object)>(r21);

        throw $r16;

     label10:
        $r5 = r0.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: java.util.List remembering>;

        $r6 = (java.util.Collection) $r5;

        $z2 = interfaceinvoke $r6.<java.util.Collection: boolean isEmpty()>();

        if $z2 != 0 goto label11;

        $z8 = 1;

        goto label12;

     label11:
        $z8 = 0;

     label12:
        if $z8 == 0 goto label19;

        r25 = "Compose:onRemembered";

        $r7 = <androidx.compose.runtime.Trace: androidx.compose.runtime.Trace INSTANCE>;

        r26 = virtualinvoke $r7.<androidx.compose.runtime.Trace: java.lang.Object beginSection(java.lang.String)>(r25);

     label13:
        r27 = r0.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: java.util.List remembering>;

        z11 = 0;

        i3 = 0;

        i0 = interfaceinvoke r27.<java.util.List: int size()>();

     label14:
        if i3 >= i0 goto label15;

        r1 = interfaceinvoke r27.<java.util.List: java.lang.Object get(int)>(i3);

        r2 = (androidx.compose.runtime.RememberObserver) r1;

        $r9 = r0.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: java.util.Set abandoning>;

        interfaceinvoke $r9.<java.util.Set: boolean remove(java.lang.Object)>(r2);

        interfaceinvoke r2.<androidx.compose.runtime.RememberObserver: void onRemembered()>();

        i3 = i3 + 1;

        goto label14;

     label15:
        $r28 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label16:
        $r8 = <androidx.compose.runtime.Trace: androidx.compose.runtime.Trace INSTANCE>;

        virtualinvoke $r8.<androidx.compose.runtime.Trace: void endSection(java.lang.Object)>(r26);

        goto label19;

     label17:
        $r18 := @caughtexception;

     label18:
        $r19 = <androidx.compose.runtime.Trace: androidx.compose.runtime.Trace INSTANCE>;

        virtualinvoke $r19.<androidx.compose.runtime.Trace: void endSection(java.lang.Object)>(r26);

        throw $r18;

     label19:
        return;

        catch java.lang.Throwable from label03 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.Throwable from label13 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    public final void dispatchSideEffects()
    {
        androidx.compose.runtime.CompositionImpl$RememberEventDispatcher r0;
        java.lang.String r1;
        java.lang.Object r2, r4;
        java.util.List $r3, $r6, $r9;
        int i0, i1;
        kotlin.jvm.functions.Function0 r5;
        java.util.Collection $r7;
        boolean $z3, $z4;
        androidx.compose.runtime.Trace $r8, $r10, $r13;
        java.lang.Throwable $r12;
        kotlin.Unit $r14;

        r0 := @this: androidx.compose.runtime.CompositionImpl$RememberEventDispatcher;

        $r6 = r0.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: java.util.List sideEffects>;

        $r7 = (java.util.Collection) $r6;

        $z3 = interfaceinvoke $r7.<java.util.Collection: boolean isEmpty()>();

        if $z3 != 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        if $z4 == 0 goto label9;

        r1 = "Compose:sideeffects";

        $r8 = <androidx.compose.runtime.Trace: androidx.compose.runtime.Trace INSTANCE>;

        r2 = virtualinvoke $r8.<androidx.compose.runtime.Trace: java.lang.Object beginSection(java.lang.String)>(r1);

     label3:
        $r3 = r0.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: java.util.List sideEffects>;

        i1 = 0;

        i0 = interfaceinvoke $r3.<java.util.List: int size()>();

     label4:
        if i1 >= i0 goto label5;

        r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1);

        r5 = (kotlin.jvm.functions.Function0) r4;

        interfaceinvoke r5.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        i1 = i1 + 1;

        goto label4;

     label5:
        $r9 = r0.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: java.util.List sideEffects>;

        interfaceinvoke $r9.<java.util.List: void clear()>();

        $r14 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label6:
        $r10 = <androidx.compose.runtime.Trace: androidx.compose.runtime.Trace INSTANCE>;

        virtualinvoke $r10.<androidx.compose.runtime.Trace: void endSection(java.lang.Object)>(r2);

        goto label9;

     label7:
        $r12 := @caughtexception;

     label8:
        $r13 = <androidx.compose.runtime.Trace: androidx.compose.runtime.Trace INSTANCE>;

        virtualinvoke $r13.<androidx.compose.runtime.Trace: void endSection(java.lang.Object)>(r2);

        throw $r12;

     label9:
        return;

        catch java.lang.Throwable from label3 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public final void dispatchAbandons()
    {
        androidx.compose.runtime.CompositionImpl$RememberEventDispatcher r0;
        java.lang.String r1;
        java.lang.Object r2, $r10;
        java.util.Iterator r3;
        androidx.compose.runtime.RememberObserver r4;
        java.util.Set $r5, $r8;
        java.util.Collection $r6;
        boolean $z1, $z2, $z3;
        androidx.compose.runtime.Trace $r7, $r9, $r12;
        java.lang.Throwable $r11;
        kotlin.Unit $r13;

        r0 := @this: androidx.compose.runtime.CompositionImpl$RememberEventDispatcher;

        $r5 = r0.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: java.util.Set abandoning>;

        $r6 = (java.util.Collection) $r5;

        $z1 = interfaceinvoke $r6.<java.util.Collection: boolean isEmpty()>();

        if $z1 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        if $z3 == 0 goto label9;

        r1 = "Compose:abandons";

        $r7 = <androidx.compose.runtime.Trace: androidx.compose.runtime.Trace INSTANCE>;

        r2 = virtualinvoke $r7.<androidx.compose.runtime.Trace: java.lang.Object beginSection(java.lang.String)>(r1);

     label3:
        $r8 = r0.<androidx.compose.runtime.CompositionImpl$RememberEventDispatcher: java.util.Set abandoning>;

        r3 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (androidx.compose.runtime.RememberObserver) $r10;

        interfaceinvoke r3.<java.util.Iterator: void remove()>();

        interfaceinvoke r4.<androidx.compose.runtime.RememberObserver: void onAbandoned()>();

        goto label4;

     label5:
        $r13 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label6:
        $r9 = <androidx.compose.runtime.Trace: androidx.compose.runtime.Trace INSTANCE>;

        virtualinvoke $r9.<androidx.compose.runtime.Trace: void endSection(java.lang.Object)>(r2);

        goto label9;

     label7:
        $r11 := @caughtexception;

     label8:
        $r12 = <androidx.compose.runtime.Trace: androidx.compose.runtime.Trace INSTANCE>;

        virtualinvoke $r12.<androidx.compose.runtime.Trace: void endSection(java.lang.Object)>(r2);

        throw $r11;

     label9:
        return;

        catch java.lang.Throwable from label3 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

