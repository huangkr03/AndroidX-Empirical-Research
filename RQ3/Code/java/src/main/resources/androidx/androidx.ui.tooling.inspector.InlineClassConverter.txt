androidx.ui.tooling.inspector.InlineClassConverter
<androidx.ui.tooling.inspector.InlineClassConverter: java.util.Map typeMap>
<androidx.ui.tooling.inspector.InlineClassConverter: kotlin.jvm.functions.Function1 notInlineType>
    public void <init>()
    {
        androidx.ui.tooling.inspector.InlineClassConverter r0;
        boolean z0;
        java.util.LinkedHashMap $r1;
        java.util.Map $r2;
        androidx.ui.tooling.inspector.InlineClassConverter$notInlineType$1 $r3;
        kotlin.jvm.functions.Function1 $r4;

        r0 := @this: androidx.ui.tooling.inspector.InlineClassConverter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        z0 = 0;

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>();

        $r2 = (java.util.Map) $r1;

        r0.<androidx.ui.tooling.inspector.InlineClassConverter: java.util.Map typeMap> = $r2;

        $r3 = <androidx.ui.tooling.inspector.InlineClassConverter$notInlineType$1: androidx.ui.tooling.inspector.InlineClassConverter$notInlineType$1 INSTANCE>;

        $r4 = (kotlin.jvm.functions.Function1) $r3;

        r0.<androidx.ui.tooling.inspector.InlineClassConverter: kotlin.jvm.functions.Function1 notInlineType> = $r4;

        return;
    }

    public final void clear()
    {
        androidx.ui.tooling.inspector.InlineClassConverter r0;
        java.util.Map $r1;

        r0 := @this: androidx.ui.tooling.inspector.InlineClassConverter;

        $r1 = r0.<androidx.ui.tooling.inspector.InlineClassConverter: java.util.Map typeMap>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }

    public final java.lang.Object castParameterValue(java.lang.String, java.lang.Object)
    {
        androidx.ui.tooling.inspector.InlineClassConverter r0;
        java.lang.String r1;
        java.lang.Object r2, $r4;
        kotlin.jvm.functions.Function1 $r3;

        r0 := @this: androidx.ui.tooling.inspector.InlineClassConverter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        if r2 == null goto label1;

        if r1 == null goto label1;

        $r3 = specialinvoke r0.<androidx.ui.tooling.inspector.InlineClassConverter: kotlin.jvm.functions.Function1 typeMapperFor(java.lang.String)>(r1);

        $r4 = interfaceinvoke $r3.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r2);

        goto label2;

     label1:
        $r4 = r2;

     label2:
        return $r4;
    }

    private final kotlin.jvm.functions.Function1 typeMapperFor(java.lang.String)
    {
        androidx.ui.tooling.inspector.InlineClassConverter r0;
        java.lang.String r1, $r6;
        java.util.Map $r2;
        java.lang.Object r3;
        kotlin.jvm.functions.Function1 r4, $r5;

        r0 := @this: androidx.ui.tooling.inspector.InlineClassConverter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<androidx.ui.tooling.inspector.InlineClassConverter: java.util.Map typeMap>;

        r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if r3 != null goto label1;

        $r6 = staticinvoke <kotlin.text.StringsKt: java.lang.String replace$default(java.lang.String,char,char,boolean,int,java.lang.Object)>(r1, 46, 47, 0, 4, null);

        r4 = specialinvoke r0.<androidx.ui.tooling.inspector.InlineClassConverter: kotlin.jvm.functions.Function1 loadTypeMapper(java.lang.String)>($r6);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r4);

        return r4;

     label1:
        $r5 = (kotlin.jvm.functions.Function1) r3;

        return $r5;
    }

    private final kotlin.jvm.functions.Function1 loadTypeMapper(java.lang.String)
    {
        androidx.ui.tooling.inspector.InlineClassConverter r0;
        java.lang.String r1;
        java.lang.Class r2, r10;
        java.lang.reflect.Constructor r3, r11;
        java.lang.reflect.Constructor[] r4;
        java.lang.Object $r5;
        androidx.ui.tooling.inspector.InlineClassConverter$loadTypeMapper$1 $r6;
        kotlin.jvm.functions.Function1 $r7, $r8, $r9;

        r0 := @this: androidx.ui.tooling.inspector.InlineClassConverter;

        r1 := @parameter0: java.lang.String;

        r10 = specialinvoke r0.<androidx.ui.tooling.inspector.InlineClassConverter: java.lang.Class loadClassOrNull(java.lang.String)>(r1);

        if r10 != null goto label1;

        $r9 = r0.<androidx.ui.tooling.inspector.InlineClassConverter: kotlin.jvm.functions.Function1 notInlineType>;

        return $r9;

     label1:
        r2 = r10;

        r4 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r4, "javaClass.declaredConstructors");

        $r5 = staticinvoke <kotlin.collections.ArraysKt: java.lang.Object singleOrNull(java.lang.Object[])>(r4);

        r3 = (java.lang.reflect.Constructor) $r5;

        if r3 != null goto label2;

        $r8 = r0.<androidx.ui.tooling.inspector.InlineClassConverter: kotlin.jvm.functions.Function1 notInlineType>;

        return $r8;

     label2:
        r11 = r3;

        virtualinvoke r11.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1);

        $r6 = new androidx.ui.tooling.inspector.InlineClassConverter$loadTypeMapper$1;

        specialinvoke $r6.<androidx.ui.tooling.inspector.InlineClassConverter$loadTypeMapper$1: void <init>(java.lang.reflect.Constructor)>(r11);

        $r7 = (kotlin.jvm.functions.Function1) $r6;

        return $r7;
    }

    private final java.lang.Class loadClassOrNull(java.lang.String)
    {
        androidx.ui.tooling.inspector.InlineClassConverter r0;
        java.lang.String r1;
        java.lang.Throwable r2, $r4;
        java.lang.Class $r3, r6;
        java.lang.ClassLoader r5;

        r0 := @this: androidx.ui.tooling.inspector.InlineClassConverter;

        r1 := @parameter0: java.lang.String;

     label1:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r5 = virtualinvoke $r3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>(r5);

        r6 = virtualinvoke r5.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        r6 = (java.lang.Class) null;

     label4:
        return r6;

        catch java.lang.Exception from label1 to label2 with label3;
    }

androidx.ui.tooling.inspector.InlineClassConverter$loadTypeMapper$1
<androidx.ui.tooling.inspector.InlineClassConverter$loadTypeMapper$1: java.lang.reflect.Constructor $create>
    void <init>(java.lang.reflect.Constructor)
    {
        androidx.ui.tooling.inspector.InlineClassConverter$loadTypeMapper$1 r0;
        java.lang.reflect.Constructor $r1;

        r0 := @this: androidx.ui.tooling.inspector.InlineClassConverter$loadTypeMapper$1;

        $r1 := @parameter0: java.lang.reflect.Constructor;

        r0.<androidx.ui.tooling.inspector.InlineClassConverter$loadTypeMapper$1: java.lang.reflect.Constructor $create> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.Object invoke(java.lang.Object)
    {
        androidx.ui.tooling.inspector.InlineClassConverter$loadTypeMapper$1 r0;
        java.lang.Object r1, r2;
        java.lang.Object[] r3;
        java.lang.reflect.Constructor $r4;

        r0 := @this: androidx.ui.tooling.inspector.InlineClassConverter$loadTypeMapper$1;

        r1 := @parameter0: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "value");

        $r4 = r0.<androidx.ui.tooling.inspector.InlineClassConverter$loadTypeMapper$1: java.lang.reflect.Constructor $create>;

        r3 = newarray (java.lang.Object)[1];

        r3[0] = r1;

        r2 = virtualinvoke $r4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(r3);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r2, "create.newInstance(value)");

        return r2;
    }

androidx.ui.tooling.inspector.InlineClassConverter$notInlineType$1
<androidx.ui.tooling.inspector.InlineClassConverter$notInlineType$1: androidx.ui.tooling.inspector.InlineClassConverter$notInlineType$1 INSTANCE>
    void <init>()
    {
        androidx.ui.tooling.inspector.InlineClassConverter$notInlineType$1 r0;

        r0 := @this: androidx.ui.tooling.inspector.InlineClassConverter$notInlineType$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.Object invoke(java.lang.Object)
    {
        androidx.ui.tooling.inspector.InlineClassConverter$notInlineType$1 r0;
        java.lang.Object r1;

        r0 := @this: androidx.ui.tooling.inspector.InlineClassConverter$notInlineType$1;

        r1 := @parameter0: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        return r1;
    }

    static void <clinit>()
    {
        androidx.ui.tooling.inspector.InlineClassConverter$notInlineType$1 $r0;

        $r0 = new androidx.ui.tooling.inspector.InlineClassConverter$notInlineType$1;

        specialinvoke $r0.<androidx.ui.tooling.inspector.InlineClassConverter$notInlineType$1: void <init>()>();

        <androidx.ui.tooling.inspector.InlineClassConverter$notInlineType$1: androidx.ui.tooling.inspector.InlineClassConverter$notInlineType$1 INSTANCE> = $r0;

        return;
    }

