androidx.camera.view.RotationProvider
<androidx.camera.view.RotationProvider: java.lang.Object mLock>
<androidx.camera.view.RotationProvider: android.view.OrientationEventListener mOrientationListener>
<androidx.camera.view.RotationProvider: java.util.Map mListeners>
<androidx.camera.view.RotationProvider: boolean mIgnoreCanDetectForTest>
    public void <init>(android.content.Context)
    {
        androidx.camera.view.RotationProvider r0;
        android.content.Context r1;
        java.lang.Object $r2;
        java.util.HashMap $r3;
        androidx.camera.view.RotationProvider$1 $r4;

        r0 := @this: androidx.camera.view.RotationProvider;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.view.RotationProvider: java.lang.Object mLock> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<androidx.camera.view.RotationProvider: java.util.Map mListeners> = $r3;

        r0.<androidx.camera.view.RotationProvider: boolean mIgnoreCanDetectForTest> = 0;

        $r4 = new androidx.camera.view.RotationProvider$1;

        specialinvoke $r4.<androidx.camera.view.RotationProvider$1: void <init>(androidx.camera.view.RotationProvider,android.content.Context)>(r0, r1);

        r0.<androidx.camera.view.RotationProvider: android.view.OrientationEventListener mOrientationListener> = $r4;

        return;
    }

    public boolean addListener(java.util.concurrent.Executor, androidx.camera.view.RotationProvider$Listener)
    {
        androidx.camera.view.RotationProvider r0;
        java.util.concurrent.Executor r1;
        androidx.camera.view.RotationProvider$Listener r2;
        java.lang.Object r3, $r5;
        java.lang.Throwable r4, $r11;
        android.view.OrientationEventListener $r6, $r10;
        boolean $z0, $z1;
        androidx.camera.view.RotationProvider$ListenerWrapper $r7;
        java.util.Map $r8;

        r0 := @this: androidx.camera.view.RotationProvider;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: androidx.camera.view.RotationProvider$Listener;

        $r5 = r0.<androidx.camera.view.RotationProvider: java.lang.Object mLock>;

        r3 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<androidx.camera.view.RotationProvider: android.view.OrientationEventListener mOrientationListener>;

        $z0 = virtualinvoke $r6.<android.view.OrientationEventListener: boolean canDetectOrientation()>();

        if $z0 != 0 goto label3;

        $z1 = r0.<androidx.camera.view.RotationProvider: boolean mIgnoreCanDetectForTest>;

        if $z1 != 0 goto label3;

        exitmonitor r3;

     label2:
        return 0;

     label3:
        $r8 = r0.<androidx.camera.view.RotationProvider: java.util.Map mListeners>;

        $r7 = new androidx.camera.view.RotationProvider$ListenerWrapper;

        specialinvoke $r7.<androidx.camera.view.RotationProvider$ListenerWrapper: void <init>(androidx.camera.view.RotationProvider$Listener,java.util.concurrent.Executor)>(r2, r1);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r7);

        $r10 = r0.<androidx.camera.view.RotationProvider: android.view.OrientationEventListener mOrientationListener>;

        virtualinvoke $r10.<android.view.OrientationEventListener: void enable()>();

        exitmonitor r3;

     label4:
        goto label7;

     label5:
        $r11 := @caughtexception;

        r4 = $r11;

        exitmonitor r3;

     label6:
        throw r4;

     label7:
        return 1;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void removeListener(androidx.camera.view.RotationProvider$Listener)
    {
        androidx.camera.view.RotationProvider r0;
        androidx.camera.view.RotationProvider$Listener r1;
        java.lang.Object r2, $r5, $r7;
        androidx.camera.view.RotationProvider$ListenerWrapper r3;
        java.lang.Throwable r4, $r12;
        java.util.Map $r6, $r8, $r10;
        boolean $z0;
        android.view.OrientationEventListener $r9;

        r0 := @this: androidx.camera.view.RotationProvider;

        r1 := @parameter0: androidx.camera.view.RotationProvider$Listener;

        $r5 = r0.<androidx.camera.view.RotationProvider: java.lang.Object mLock>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<androidx.camera.view.RotationProvider: java.util.Map mListeners>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (androidx.camera.view.RotationProvider$ListenerWrapper) $r7;

        if r3 == null goto label2;

        virtualinvoke r3.<androidx.camera.view.RotationProvider$ListenerWrapper: void disable()>();

        $r10 = r0.<androidx.camera.view.RotationProvider: java.util.Map mListeners>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

     label2:
        $r8 = r0.<androidx.camera.view.RotationProvider: java.util.Map mListeners>;

        $z0 = interfaceinvoke $r8.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label3;

        $r9 = r0.<androidx.camera.view.RotationProvider: android.view.OrientationEventListener mOrientationListener>;

        virtualinvoke $r9.<android.view.OrientationEventListener: void disable()>();

     label3:
        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r12 := @caughtexception;

        r4 = $r12;

        exitmonitor r2;

     label6:
        throw r4;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    static int orientationToSurfaceRotation(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 >= 315 goto label1;

        if i0 >= 45 goto label2;

     label1:
        return 0;

     label2:
        if i0 < 225 goto label3;

        return 1;

     label3:
        if i0 < 135 goto label4;

        return 2;

     label4:
        return 3;
    }

androidx.camera.view.RotationProvider$1
<androidx.camera.view.RotationProvider$1: int INVALID_SURFACE_ROTATION>
<androidx.camera.view.RotationProvider$1: int mRotation>
<androidx.camera.view.RotationProvider$1: androidx.camera.view.RotationProvider this$0>
    void <init>(androidx.camera.view.RotationProvider, android.content.Context)
    {
        androidx.camera.view.RotationProvider$1 r0;
        androidx.camera.view.RotationProvider r1;
        android.content.Context r2;

        r0 := @this: androidx.camera.view.RotationProvider$1;

        r1 := @parameter0: androidx.camera.view.RotationProvider;

        r2 := @parameter1: android.content.Context;

        r0.<androidx.camera.view.RotationProvider$1: androidx.camera.view.RotationProvider this$0> = r1;

        specialinvoke r0.<android.view.OrientationEventListener: void <init>(android.content.Context)>(r2);

        r0.<androidx.camera.view.RotationProvider$1: int mRotation> = -1;

        return;
    }

    public void onOrientationChanged(int)
    {
        androidx.camera.view.RotationProvider$1 r0;
        int i0, i1, $i2;
        java.util.ArrayList r1, $r4;
        androidx.camera.view.RotationProvider $r2, $r5;
        java.lang.Object $r3, $r8, r10;
        java.util.Map $r6;
        java.util.Collection $r7;
        boolean $z0, $z1;
        java.lang.Throwable $r9, r11;
        java.util.Iterator r12;
        androidx.camera.view.RotationProvider$ListenerWrapper r13;

        r0 := @this: androidx.camera.view.RotationProvider$1;

        i0 := @parameter0: int;

        if i0 != -1 goto label1;

        return;

     label1:
        i1 = staticinvoke <androidx.camera.view.RotationProvider: int orientationToSurfaceRotation(int)>(i0);

        $i2 = r0.<androidx.camera.view.RotationProvider$1: int mRotation>;

        if $i2 == i1 goto label8;

        r0.<androidx.camera.view.RotationProvider$1: int mRotation> = i1;

        $r2 = r0.<androidx.camera.view.RotationProvider$1: androidx.camera.view.RotationProvider this$0>;

        $r3 = $r2.<androidx.camera.view.RotationProvider: java.lang.Object mLock>;

        r10 = $r3;

        entermonitor $r3;

     label2:
        $r4 = new java.util.ArrayList;

        $r5 = r0.<androidx.camera.view.RotationProvider$1: androidx.camera.view.RotationProvider this$0>;

        $r6 = $r5.<androidx.camera.view.RotationProvider: java.util.Map mListeners>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Collection values()>();

        specialinvoke $r4.<java.util.ArrayList: void <init>(java.util.Collection)>($r7);

        r1 = $r4;

        exitmonitor r10;

     label3:
        goto label6;

     label4:
        $r9 := @caughtexception;

        r11 = $r9;

        exitmonitor r10;

     label5:
        throw r11;

     label6:
        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label8;

        r12 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label7:
        $z1 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r8 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>();

        r13 = (androidx.camera.view.RotationProvider$ListenerWrapper) $r8;

        virtualinvoke r13.<androidx.camera.view.RotationProvider$ListenerWrapper: void onRotationChanged(int)>(i1);

        goto label7;

     label8:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

androidx.camera.view.RotationProvider$Listener
<androidx.camera.view.RotationProvider$Listener: void onRotationChanged(int)>
androidx.camera.view.RotationProvider$ListenerWrapper
<androidx.camera.view.RotationProvider$ListenerWrapper: androidx.camera.view.RotationProvider$Listener mListener>
<androidx.camera.view.RotationProvider$ListenerWrapper: java.util.concurrent.Executor mExecutor>
<androidx.camera.view.RotationProvider$ListenerWrapper: java.util.concurrent.atomic.AtomicBoolean mEnabled>
    void <init>(androidx.camera.view.RotationProvider$Listener, java.util.concurrent.Executor)
    {
        androidx.camera.view.RotationProvider$ListenerWrapper r0;
        androidx.camera.view.RotationProvider$Listener r1;
        java.util.concurrent.Executor r2;
        java.util.concurrent.atomic.AtomicBoolean $r3;

        r0 := @this: androidx.camera.view.RotationProvider$ListenerWrapper;

        r1 := @parameter0: androidx.camera.view.RotationProvider$Listener;

        r2 := @parameter1: java.util.concurrent.Executor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.view.RotationProvider$ListenerWrapper: androidx.camera.view.RotationProvider$Listener mListener> = r1;

        r0.<androidx.camera.view.RotationProvider$ListenerWrapper: java.util.concurrent.Executor mExecutor> = r2;

        $r3 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(1);

        r0.<androidx.camera.view.RotationProvider$ListenerWrapper: java.util.concurrent.atomic.AtomicBoolean mEnabled> = $r3;

        return;
    }

    void onRotationChanged(int)
    {
        androidx.camera.view.RotationProvider$ListenerWrapper r0;
        int i0;
        java.util.concurrent.Executor $r1;
        java.lang.Runnable $r2;

        r0 := @this: androidx.camera.view.RotationProvider$ListenerWrapper;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.camera.view.RotationProvider$ListenerWrapper: java.util.concurrent.Executor mExecutor>;

        $r2 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.view.RotationProvider$ListenerWrapper,int)>(r0, i0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.view.RotationProvider$ListenerWrapper: void lambda$onRotationChanged$0(int)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r2);

        return;
    }

    void disable()
    {
        androidx.camera.view.RotationProvider$ListenerWrapper r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @this: androidx.camera.view.RotationProvider$ListenerWrapper;

        $r1 = r0.<androidx.camera.view.RotationProvider$ListenerWrapper: java.util.concurrent.atomic.AtomicBoolean mEnabled>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

        return;
    }

    private void lambda$onRotationChanged$0(int)
    {
        androidx.camera.view.RotationProvider$ListenerWrapper r0;
        int i0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;
        androidx.camera.view.RotationProvider$Listener $r2;

        r0 := @this: androidx.camera.view.RotationProvider$ListenerWrapper;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.camera.view.RotationProvider$ListenerWrapper: java.util.concurrent.atomic.AtomicBoolean mEnabled>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<androidx.camera.view.RotationProvider$ListenerWrapper: androidx.camera.view.RotationProvider$Listener mListener>;

        interfaceinvoke $r2.<androidx.camera.view.RotationProvider$Listener: void onRotationChanged(int)>(i0);

     label1:
        return;
    }

