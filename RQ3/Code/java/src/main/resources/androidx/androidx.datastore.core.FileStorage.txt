androidx.datastore.core.FileStorage
<androidx.datastore.core.FileStorage: androidx.datastore.core.FileStorage$Companion Companion>
<androidx.datastore.core.FileStorage: androidx.datastore.core.Serializer serializer>
<androidx.datastore.core.FileStorage: kotlin.jvm.functions.Function0 produceFile>
<androidx.datastore.core.FileStorage: java.util.Set activeFiles>
<androidx.datastore.core.FileStorage: java.lang.Object activeFilesLock>
    public void <init>(androidx.datastore.core.Serializer, kotlin.jvm.functions.Function0)
    {
        androidx.datastore.core.FileStorage r0;
        androidx.datastore.core.Serializer r1;
        kotlin.jvm.functions.Function0 r2;

        r0 := @this: androidx.datastore.core.FileStorage;

        r1 := @parameter0: androidx.datastore.core.Serializer;

        r2 := @parameter1: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "serializer");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "produceFile");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.datastore.core.FileStorage: androidx.datastore.core.Serializer serializer> = r1;

        r0.<androidx.datastore.core.FileStorage: kotlin.jvm.functions.Function0 produceFile> = r2;

        return;
    }

    public androidx.datastore.core.StorageConnection createConnection()
    {
        androidx.datastore.core.FileStorage r0;
        java.io.File r1;
        java.lang.Object r2, $r5;
        java.lang.String r3, $r18, $r20;
        kotlin.jvm.functions.Function0 $r4, $r11;
        java.util.Set $r6, $r7;
        boolean $z0, $z2;
        androidx.datastore.core.FileStorageConnection $r8;
        androidx.datastore.core.FileStorage$createConnection$2 $r9;
        androidx.datastore.core.Serializer $r10;
        androidx.datastore.core.StorageConnection $r12;
        java.lang.StringBuilder $r13, $r14, $r15, $r16;
        java.lang.IllegalStateException $r17;
        java.lang.Throwable $r19;

        r0 := @this: androidx.datastore.core.FileStorage;

        $r4 = r0.<androidx.datastore.core.FileStorage: kotlin.jvm.functions.Function0 produceFile>;

        $r5 = interfaceinvoke $r4.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        r1 = (java.io.File) $r5;

        r2 = <androidx.datastore.core.FileStorage: java.lang.Object activeFilesLock>;

        entermonitor r2;

     label1:
        r3 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r6 = <androidx.datastore.core.FileStorage: java.util.Set activeFiles>;

        $z0 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>(r3);

        if $z0 != 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        if $z2 != 0 goto label4;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("There are multiple DataStores active for the same file: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". You should either maintain your DataStore as a singleton or confirm that there is no two DataStore\'s active on the same file (by confirming that the scope is cancelled).");

        $r20 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = new java.lang.IllegalStateException;

        $r18 = virtualinvoke $r20.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r18);

        throw $r17;

     label4:
        $r7 = <androidx.datastore.core.FileStorage: java.util.Set activeFiles>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r3, "path");

        interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>(r3);

     label5:
        exitmonitor r2;

        goto label8;

     label6:
        $r19 := @caughtexception;

     label7:
        exitmonitor r2;

        throw $r19;

     label8:
        $r8 = new androidx.datastore.core.FileStorageConnection;

        $r10 = r0.<androidx.datastore.core.FileStorage: androidx.datastore.core.Serializer serializer>;

        $r9 = new androidx.datastore.core.FileStorage$createConnection$2;

        specialinvoke $r9.<androidx.datastore.core.FileStorage$createConnection$2: void <init>(java.io.File)>(r1);

        $r11 = (kotlin.jvm.functions.Function0) $r9;

        specialinvoke $r8.<androidx.datastore.core.FileStorageConnection: void <init>(java.io.File,androidx.datastore.core.Serializer,kotlin.jvm.functions.Function0)>(r1, $r10, $r11);

        $r12 = (androidx.datastore.core.StorageConnection) $r8;

        return $r12;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public static final java.util.Set access$getActiveFiles$cp()
    {
        java.util.Set $r0;

        $r0 = <androidx.datastore.core.FileStorage: java.util.Set activeFiles>;

        return $r0;
    }

    public static final java.lang.Object access$getActiveFilesLock$cp()
    {
        java.lang.Object $r0;

        $r0 = <androidx.datastore.core.FileStorage: java.lang.Object activeFilesLock>;

        return $r0;
    }

    static void <clinit>()
    {
        androidx.datastore.core.FileStorage$Companion $r0;
        java.util.LinkedHashSet $r1;
        java.util.Set $r2;
        java.lang.Object $r3;

        $r0 = new androidx.datastore.core.FileStorage$Companion;

        specialinvoke $r0.<androidx.datastore.core.FileStorage$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.datastore.core.FileStorage: androidx.datastore.core.FileStorage$Companion Companion> = $r0;

        $r1 = new java.util.LinkedHashSet;

        specialinvoke $r1.<java.util.LinkedHashSet: void <init>()>();

        $r2 = (java.util.Set) $r1;

        <androidx.datastore.core.FileStorage: java.util.Set activeFiles> = $r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        <androidx.datastore.core.FileStorage: java.lang.Object activeFilesLock> = $r3;

        return;
    }

androidx.datastore.core.FileStorage$Companion
    private void <init>()
    {
        androidx.datastore.core.FileStorage$Companion r0;

        r0 := @this: androidx.datastore.core.FileStorage$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final java.util.Set getActiveFiles$datastore_core_release()
    {
        androidx.datastore.core.FileStorage$Companion r0;
        java.util.Set $r1;

        r0 := @this: androidx.datastore.core.FileStorage$Companion;

        $r1 = staticinvoke <androidx.datastore.core.FileStorage: java.util.Set access$getActiveFiles$cp()>();

        return $r1;
    }

    public final java.lang.Object getActiveFilesLock$datastore_core_release()
    {
        androidx.datastore.core.FileStorage$Companion r0;
        java.lang.Object $r1;

        r0 := @this: androidx.datastore.core.FileStorage$Companion;

        $r1 = staticinvoke <androidx.datastore.core.FileStorage: java.lang.Object access$getActiveFilesLock$cp()>();

        return $r1;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.datastore.core.FileStorage$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.datastore.core.FileStorage$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.datastore.core.FileStorage$Companion: void <init>()>();

        return;
    }

androidx.datastore.core.FileStorage$createConnection$2
<androidx.datastore.core.FileStorage$createConnection$2: java.io.File $file>
    void <init>(java.io.File)
    {
        androidx.datastore.core.FileStorage$createConnection$2 r0;
        java.io.File $r1;

        r0 := @this: androidx.datastore.core.FileStorage$createConnection$2;

        $r1 := @parameter0: java.io.File;

        r0.<androidx.datastore.core.FileStorage$createConnection$2: java.io.File $file> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.datastore.core.FileStorage$createConnection$2 r0;
        java.lang.Object r1, r3;
        java.io.File r2;
        androidx.datastore.core.FileStorage$Companion $r4, $r5;
        java.util.Set $r6;
        java.lang.String $r7;
        java.lang.Throwable $r8;
        kotlin.Unit $r9;

        r0 := @this: androidx.datastore.core.FileStorage$createConnection$2;

        $r4 = <androidx.datastore.core.FileStorage: androidx.datastore.core.FileStorage$Companion Companion>;

        r1 = virtualinvoke $r4.<androidx.datastore.core.FileStorage$Companion: java.lang.Object getActiveFilesLock$datastore_core_release()>();

        r2 = r0.<androidx.datastore.core.FileStorage$createConnection$2: java.io.File $file>;

        r3 = r1;

        entermonitor r3;

     label1:
        $r5 = <androidx.datastore.core.FileStorage: androidx.datastore.core.FileStorage$Companion Companion>;

        $r6 = virtualinvoke $r5.<androidx.datastore.core.FileStorage$Companion: java.util.Set getActiveFiles$datastore_core_release()>();

        $r7 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>();

        interfaceinvoke $r6.<java.util.Set: boolean remove(java.lang.Object)>($r7);

        $r9 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label2:
        exitmonitor r3;

        goto label5;

     label3:
        $r8 := @caughtexception;

     label4:
        exitmonitor r3;

        throw $r8;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.datastore.core.FileStorage$createConnection$2 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.datastore.core.FileStorage$createConnection$2;

        virtualinvoke r0.<androidx.datastore.core.FileStorage$createConnection$2: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

