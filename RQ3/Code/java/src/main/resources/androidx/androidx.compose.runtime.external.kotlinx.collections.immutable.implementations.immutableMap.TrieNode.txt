androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode
<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$Companion Companion>
<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int dataMap>
<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeMap>
<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership ownedBy>
<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>
<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode EMPTY>
    public void <init>(int, int, java.lang.Object[], androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0;
        int i0, i1;
        java.lang.Object[] r1;
        androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership r2;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.Object[];

        r2 := @parameter3: androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "buffer");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int dataMap> = i0;

        r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeMap> = i1;

        r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership ownedBy> = r2;

        r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer> = r1;

        return;
    }

    public void <init>(int, int, java.lang.Object[])
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0;
        int i0, i1;
        java.lang.Object[] r1;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "buffer");

        specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: void <init>(int,int,java.lang.Object[],androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership)>(i0, i1, r1, null);

        return;
    }

    private final androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$ModificationResult asInsertResult()
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0;
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$ModificationResult $r1;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        $r1 = new androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$ModificationResult;

        specialinvoke $r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$ModificationResult: void <init>(androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode,int)>(r0, 1);

        return $r1;
    }

    private final androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$ModificationResult asUpdateResult()
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0;
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$ModificationResult $r1;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        $r1 = new androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$ModificationResult;

        specialinvoke $r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$ModificationResult: void <init>(androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode,int)>(r0, 0);

        return $r1;
    }

    public final java.lang.Object[] getBuffer$runtime_release()
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0;
        java.lang.Object[] $r1;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        $r1 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        return $r1;
    }

    public final int entryCount$runtime_release()
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0;
        int $i0, $i1;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        $i0 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int dataMap>;

        $i1 = staticinvoke <java.lang.Integer: int bitCount(int)>($i0);

        return $i1;
    }

    public final boolean hasEntryAt$runtime_release(int)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0;
        int i0, $i1, $i2;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        i0 := @parameter0: int;

        $i1 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int dataMap>;

        $i2 = $i1 & i0;

        if $i2 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private final boolean hasNodeAt(int)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0;
        int i0, $i1, $i2;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        i0 := @parameter0: int;

        $i1 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeMap>;

        $i2 = $i1 & i0;

        if $i2 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final int entryKeyIndex$runtime_release(int)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0;
        int i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        i0 := @parameter0: int;

        $i2 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int dataMap>;

        $i1 = i0 - 1;

        $i3 = $i2 & $i1;

        $i4 = staticinvoke <java.lang.Integer: int bitCount(int)>($i3);

        $i5 = 2 * $i4;

        return $i5;
    }

    public final int nodeIndex$runtime_release(int)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.Object[] $r1;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $i1 = lengthof $r1;

        $i5 = $i1 - 1;

        $i3 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeMap>;

        $i2 = i0 - 1;

        $i4 = $i3 & $i2;

        $i6 = staticinvoke <java.lang.Integer: int bitCount(int)>($i4);

        $i7 = $i5 - $i6;

        return $i7;
    }

    private final java.lang.Object keyAtIndex(int)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0;
        int i0;
        java.lang.Object[] $r1;
        java.lang.Object $r2;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $r2 = $r1[i0];

        return $r2;
    }

    private final java.lang.Object valueAtKeyIndex(int)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0;
        int i0, $i1;
        java.lang.Object[] $r1;
        java.lang.Object $r2;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $i1 = i0 + 1;

        $r2 = $r1[$i1];

        return $r2;
    }

    public final androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode nodeAtIndex$runtime_release(int)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0, $r3;
        int i0;
        java.lang.Object[] $r1;
        java.lang.Object $r2;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $r2 = $r1[i0];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r2, "null cannot be cast to non-null type androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode<K of androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode, V of androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode>");

        $r3 = (androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode) $r2;

        return $r3;
    }

    private final androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode insertEntryAt(int, java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0, $r5;
        int i0, i1, $i2, $i3, $i4;
        java.lang.Object r1, r2;
        java.lang.Object[] r3, $r4;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        i1 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int entryKeyIndex$runtime_release(int)>(i0);

        $r4 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        r3 = staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeKt: java.lang.Object[] access$insertEntryAtIndex(java.lang.Object[],int,java.lang.Object,java.lang.Object)>($r4, i1, r1, r2);

        $r5 = new androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        $i2 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int dataMap>;

        $i4 = $i2 | i0;

        $i3 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeMap>;

        specialinvoke $r5.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: void <init>(int,int,java.lang.Object[])>($i4, $i3, r3);

        return $r5;
    }

    private final androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode mutableInsertEntryAt(int, java.lang.Object, java.lang.Object, androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0, $r7;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.Object r1, r2;
        androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership r3, $r5;
        java.lang.Object[] r4, $r6, $r8, $r9;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership;

        i1 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int entryKeyIndex$runtime_release(int)>(i0);

        $r5 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership ownedBy>;

        if $r5 != r3 goto label1;

        $r8 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $r9 = staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeKt: java.lang.Object[] access$insertEntryAtIndex(java.lang.Object[],int,java.lang.Object,java.lang.Object)>($r8, i1, r1, r2);

        r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer> = $r9;

        $i5 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int dataMap>;

        $i6 = $i5 | i0;

        r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int dataMap> = $i6;

        return r0;

     label1:
        $r6 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        r4 = staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeKt: java.lang.Object[] access$insertEntryAtIndex(java.lang.Object[],int,java.lang.Object,java.lang.Object)>($r6, i1, r1, r2);

        $r7 = new androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        $i2 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int dataMap>;

        $i4 = $i2 | i0;

        $i3 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeMap>;

        specialinvoke $r7.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: void <init>(int,int,java.lang.Object[],androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership)>($i4, $i3, r4, r3);

        return $r7;
    }

    private final androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode updateValueAtIndex(int, java.lang.Object)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0, $r5;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Object r1;
        java.lang.Object[] r2, $r3, $r4;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r3 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $i1 = lengthof $r3;

        $r4 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r3, $i1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "copyOf(this, size)");

        r2 = $r4;

        $i2 = i0 + 1;

        r2[$i2] = r1;

        $r5 = new androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        $i4 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int dataMap>;

        $i3 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeMap>;

        specialinvoke $r5.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: void <init>(int,int,java.lang.Object[])>($i4, $i3, r2);

        return $r5;
    }

    private final androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode mutableUpdateValueAtIndex(int, java.lang.Object, androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0, $r7;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        java.lang.Object r1;
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder r2;
        androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership $r3, $r4, $r8;
        java.lang.Object[] $r5, $r6, $r9, r10;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder;

        $r3 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership ownedBy>;

        $r4 = virtualinvoke r2.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder: androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership getOwnership$runtime_release()>();

        if $r3 != $r4 goto label1;

        $r9 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $i6 = i0 + 1;

        $r9[$i6] = r1;

        return r0;

     label1:
        i7 = virtualinvoke r2.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder: int getModCount$runtime_release()>();

        $i1 = i7 + 1;

        virtualinvoke r2.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder: void setModCount$runtime_release(int)>($i1);

        $r5 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $i2 = lengthof $r5;

        $r6 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r5, $i2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "copyOf(this, size)");

        r10 = $r6;

        $i3 = i0 + 1;

        r10[$i3] = r1;

        $r7 = new androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        $i4 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int dataMap>;

        $i5 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeMap>;

        $r8 = virtualinvoke r2.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder: androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership getOwnership$runtime_release()>();

        specialinvoke $r7.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: void <init>(int,int,java.lang.Object[],androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership)>($i4, $i5, r10, $r8);

        return $r7;
    }

    private final androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode updateNodeAtIndex(int, int, androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0, r1, $r7, $r12;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13;
        java.lang.Object[] r2, r3, $r4, $r5, $r6, $r8, $r11, r13;
        java.lang.Object $r9, $r10;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        r2 = r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $i2 = lengthof r2;

        if $i2 != 2 goto label2;

        $i6 = r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeMap>;

        if $i6 != 0 goto label2;

        $r8 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $i7 = lengthof $r8;

        if $i7 != 1 goto label1;

        $i12 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeMap>;

        r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int dataMap> = $i12;

        return r1;

     label1:
        i13 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int entryKeyIndex$runtime_release(int)>(i1);

        $r11 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $r10 = r2[0];

        $r9 = r2[1];

        r3 = staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeKt: java.lang.Object[] access$replaceNodeWithEntry(java.lang.Object[],int,int,java.lang.Object,java.lang.Object)>($r11, i0, i13, $r10, $r9);

        $r12 = new androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        $i8 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int dataMap>;

        $i11 = $i8 ^ i1;

        $i9 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeMap>;

        $i10 = $i9 ^ i1;

        specialinvoke $r12.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: void <init>(int,int,java.lang.Object[])>($i11, $i10, r3);

        return $r12;

     label2:
        $r5 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $r4 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $i3 = lengthof $r4;

        $r6 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r5, $i3);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "copyOf(this, newSize)");

        r13 = $r6;

        r13[i0] = r1;

        $r7 = new androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        $i5 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int dataMap>;

        $i4 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeMap>;

        specialinvoke $r7.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: void <init>(int,int,java.lang.Object[])>($i5, $i4, r13);

        return $r7;
    }

    private final androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode mutableUpdateNodeAtIndex(int, androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode, androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0, r1, $r7;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership r2, $r10;
        java.lang.Object[] r3, $r4, $r5, $r6, $r8, $r9;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        r2 := @parameter2: androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership;

        $r4 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $i1 = lengthof $r4;

        if $i1 != 1 goto label1;

        $r9 = r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $i5 = lengthof $r9;

        if $i5 != 2 goto label1;

        $i6 = r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeMap>;

        if $i6 != 0 goto label1;

        $i7 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeMap>;

        r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int dataMap> = $i7;

        return r1;

     label1:
        $r10 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership ownedBy>;

        if $r10 != r2 goto label2;

        $r8 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $r8[i0] = r1;

        return r0;

     label2:
        $r5 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $i2 = lengthof $r5;

        $r6 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r5, $i2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "copyOf(this, size)");

        r3 = $r6;

        r3[i0] = r1;

        $r7 = new androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        $i4 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int dataMap>;

        $i3 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeMap>;

        specialinvoke $r7.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: void <init>(int,int,java.lang.Object[],androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership)>($i4, $i3, r3, r2);

        return $r7;
    }

    private final androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode removeNodeAtIndex(int, int)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0, $r4;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.Object[] r1, $r2, $r3;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $i2 = lengthof $r2;

        if $i2 != 1 goto label1;

        return null;

     label1:
        $r3 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        r1 = staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeKt: java.lang.Object[] access$removeNodeAtIndex(java.lang.Object[],int)>($r3, i0);

        $r4 = new androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        $i5 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int dataMap>;

        $i3 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeMap>;

        $i4 = $i3 ^ i1;

        specialinvoke $r4.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: void <init>(int,int,java.lang.Object[])>($i5, $i4, r1);

        return $r4;
    }

    private final androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode mutableRemoveNodeAtIndex(int, int, androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0, $r6;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership r1, $r4;
        java.lang.Object[] r2, $r3, $r5, $r7, $r8;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership;

        $r3 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $i2 = lengthof $r3;

        if $i2 != 1 goto label1;

        return null;

     label1:
        $r4 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership ownedBy>;

        if $r4 != r1 goto label2;

        $r7 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $r8 = staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeKt: java.lang.Object[] access$removeNodeAtIndex(java.lang.Object[],int)>($r7, i0);

        r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer> = $r8;

        $i6 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeMap>;

        $i7 = $i6 ^ i1;

        r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeMap> = $i7;

        return r0;

     label2:
        $r5 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        r2 = staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeKt: java.lang.Object[] access$removeNodeAtIndex(java.lang.Object[],int)>($r5, i0);

        $r6 = new androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        $i5 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int dataMap>;

        $i3 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeMap>;

        $i4 = $i3 ^ i1;

        specialinvoke $r6.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: void <init>(int,int,java.lang.Object[],androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership)>($i5, $i4, r2, r1);

        return $r6;
    }

    private final java.lang.Object[] bufferMoveEntryToNode(int, int, int, java.lang.Object, java.lang.Object, int, androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0, r6;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8;
        java.lang.Object r1, r2, r4, r5;
        androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership r3;
        java.lang.Object[] $r7, $r8;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        r2 := @parameter4: java.lang.Object;

        i3 := @parameter5: int;

        r3 := @parameter6: androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership;

        r4 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object keyAtIndex(int)>(i0);

        if r4 == null goto label1;

        $i8 = virtualinvoke r4.<java.lang.Object: int hashCode()>();

        goto label2;

     label1:
        $i8 = 0;

     label2:
        i4 = $i8;

        r5 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object valueAtKeyIndex(int)>(i0);

        $i6 = i3 + 5;

        r6 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode makeNode(int,java.lang.Object,java.lang.Object,int,java.lang.Object,java.lang.Object,int,androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership)>(i4, r4, r5, i2, r1, r2, $i6, r3);

        $i7 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeIndex$runtime_release(int)>(i1);

        i5 = $i7 + 1;

        $r7 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $r8 = staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeKt: java.lang.Object[] access$replaceEntryWithNode(java.lang.Object[],int,int,androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode)>($r7, i0, i5, r6);

        return $r8;
    }

    private final androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode moveEntryToNode(int, int, int, java.lang.Object, java.lang.Object, int)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0, $r4;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7;
        java.lang.Object r1, r2;
        java.lang.Object[] r3;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        r2 := @parameter4: java.lang.Object;

        i3 := @parameter5: int;

        r3 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] bufferMoveEntryToNode(int,int,int,java.lang.Object,java.lang.Object,int,androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership)>(i0, i1, i2, r1, r2, i3, null);

        $r4 = new androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        $i4 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int dataMap>;

        $i7 = $i4 ^ i1;

        $i5 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeMap>;

        $i6 = $i5 | i1;

        specialinvoke $r4.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: void <init>(int,int,java.lang.Object[])>($i7, $i6, r3);

        return $r4;
    }

    private final androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode mutableMoveEntryToNode(int, int, int, java.lang.Object, java.lang.Object, int, androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0, $r6;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.Object r1, r2;
        androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership r3, $r5;
        java.lang.Object[] r4, $r7;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        r2 := @parameter4: java.lang.Object;

        i3 := @parameter5: int;

        r3 := @parameter6: androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership;

        $r5 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership ownedBy>;

        if $r5 != r3 goto label1;

        $r7 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] bufferMoveEntryToNode(int,int,int,java.lang.Object,java.lang.Object,int,androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership)>(i0, i1, i2, r1, r2, i3, r3);

        r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer> = $r7;

        $i8 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int dataMap>;

        $i9 = $i8 ^ i1;

        r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int dataMap> = $i9;

        $i10 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeMap>;

        $i11 = $i10 | i1;

        r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeMap> = $i11;

        return r0;

     label1:
        r4 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] bufferMoveEntryToNode(int,int,int,java.lang.Object,java.lang.Object,int,androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership)>(i0, i1, i2, r1, r2, i3, r3);

        $r6 = new androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        $i4 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int dataMap>;

        $i7 = $i4 ^ i1;

        $i5 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeMap>;

        $i6 = $i5 | i1;

        specialinvoke $r6.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: void <init>(int,int,java.lang.Object[],androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership)>($i7, $i6, r4, r3);

        return $r6;
    }

    private final androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode makeNode(int, java.lang.Object, java.lang.Object, int, java.lang.Object, java.lang.Object, int, androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0, $r6, $r7, $r8, r14;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, i9;
        java.lang.Object r1, r2, r3, r4;
        androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership r5;
        java.lang.Object[] r9, r10, $r11, r12, r13, r15;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        i1 := @parameter3: int;

        r3 := @parameter4: java.lang.Object;

        r4 := @parameter5: java.lang.Object;

        i2 := @parameter6: int;

        r5 := @parameter7: androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership;

        if i2 <= 30 goto label1;

        $r8 = new androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        r9 = newarray (java.lang.Object)[4];

        r9[0] = r1;

        r9[1] = r2;

        r9[2] = r3;

        r9[3] = r4;

        specialinvoke $r8.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: void <init>(int,int,java.lang.Object[],androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership)>(0, 0, r9, r5);

        return $r8;

     label1:
        i9 = staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeKt: int indexSegment(int,int)>(i0, i2);

        i3 = staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeKt: int indexSegment(int,int)>(i1, i2);

        if i9 == i3 goto label4;

        if i9 >= i3 goto label2;

        r10 = newarray (java.lang.Object)[4];

        r10[0] = r1;

        r10[1] = r2;

        r10[2] = r3;

        r10[3] = r4;

        $r11 = r10;

        goto label3;

     label2:
        r12 = newarray (java.lang.Object)[4];

        r12[0] = r3;

        r12[1] = r4;

        r12[2] = r1;

        r12[3] = r2;

        $r11 = r12;

     label3:
        r13 = $r11;

        $r7 = new androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        $i7 = 1 << i9;

        $i6 = 1 << i3;

        $i8 = $i7 | $i6;

        specialinvoke $r7.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: void <init>(int,int,java.lang.Object[],androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership)>($i8, 0, r13, r5);

        return $r7;

     label4:
        $i4 = i2 + 5;

        r14 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode makeNode(int,java.lang.Object,java.lang.Object,int,java.lang.Object,java.lang.Object,int,androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership)>(i0, r1, r2, i1, r3, r4, $i4, r5);

        $r6 = new androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        $i5 = 1 << i9;

        r15 = newarray (java.lang.Object)[1];

        r15[0] = r14;

        specialinvoke $r6.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: void <init>(int,int,java.lang.Object[],androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership)>(0, $i5, r15, r5);

        return $r6;
    }

    private final androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode removeEntryAtIndex(int, int)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0, $r4;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.Object[] r1, $r2, $r3;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $i2 = lengthof $r2;

        if $i2 != 2 goto label1;

        return null;

     label1:
        $r3 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        r1 = staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeKt: java.lang.Object[] access$removeEntryAtIndex(java.lang.Object[],int)>($r3, i0);

        $r4 = new androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        $i3 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int dataMap>;

        $i5 = $i3 ^ i1;

        $i4 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeMap>;

        specialinvoke $r4.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: void <init>(int,int,java.lang.Object[])>($i5, $i4, r1);

        return $r4;
    }

    private final androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode mutableRemoveEntryAtIndex(int, int, androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0, $r7;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder r1;
        java.lang.Object $r2;
        java.lang.Object[] $r3, $r6, $r9, $r10, r11;
        androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership $r4, $r5, $r8;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder;

        i9 = virtualinvoke r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder: int size()>();

        $i2 = i9 + -1;

        virtualinvoke r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder: void setSize(int)>($i2);

        $r2 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object valueAtKeyIndex(int)>(i0);

        virtualinvoke r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder: void setOperationResult$runtime_release(java.lang.Object)>($r2);

        $r3 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $i3 = lengthof $r3;

        if $i3 != 2 goto label1;

        return null;

     label1:
        $r4 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership ownedBy>;

        $r5 = virtualinvoke r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder: androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership getOwnership$runtime_release()>();

        if $r4 != $r5 goto label2;

        $r9 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $r10 = staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeKt: java.lang.Object[] access$removeEntryAtIndex(java.lang.Object[],int)>($r9, i0);

        r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer> = $r10;

        $i7 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int dataMap>;

        $i8 = $i7 ^ i1;

        r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int dataMap> = $i8;

        return r0;

     label2:
        $r6 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        r11 = staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeKt: java.lang.Object[] access$removeEntryAtIndex(java.lang.Object[],int)>($r6, i0);

        $r7 = new androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        $i4 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int dataMap>;

        $i5 = $i4 ^ i1;

        $i6 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeMap>;

        $r8 = virtualinvoke r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder: androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership getOwnership$runtime_release()>();

        specialinvoke $r7.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: void <init>(int,int,java.lang.Object[],androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership)>($i5, $i6, r11, $r8);

        return $r7;
    }

    private final androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode collisionRemoveEntryAtIndex(int)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0, $r4;
        int i0, $i1;
        java.lang.Object[] r1, $r2, $r3;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        i0 := @parameter0: int;

        $r2 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $i1 = lengthof $r2;

        if $i1 != 2 goto label1;

        return null;

     label1:
        $r3 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        r1 = staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeKt: java.lang.Object[] access$removeEntryAtIndex(java.lang.Object[],int)>($r3, i0);

        $r4 = new androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        specialinvoke $r4.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: void <init>(int,int,java.lang.Object[])>(0, 0, r1);

        return $r4;
    }

    private final androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode mutableCollisionRemoveEntryAtIndex(int, androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0, $r7;
        int i0, $i1, $i2, i3;
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder r1;
        java.lang.Object $r2;
        java.lang.Object[] $r3, $r6, $r9, $r10, r11;
        androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership $r4, $r5, $r8;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder;

        i3 = virtualinvoke r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder: int size()>();

        $i1 = i3 + -1;

        virtualinvoke r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder: void setSize(int)>($i1);

        $r2 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object valueAtKeyIndex(int)>(i0);

        virtualinvoke r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder: void setOperationResult$runtime_release(java.lang.Object)>($r2);

        $r3 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $i2 = lengthof $r3;

        if $i2 != 2 goto label1;

        return null;

     label1:
        $r4 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership ownedBy>;

        $r5 = virtualinvoke r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder: androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership getOwnership$runtime_release()>();

        if $r4 != $r5 goto label2;

        $r9 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $r10 = staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeKt: java.lang.Object[] access$removeEntryAtIndex(java.lang.Object[],int)>($r9, i0);

        r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer> = $r10;

        return r0;

     label2:
        $r6 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        r11 = staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeKt: java.lang.Object[] access$removeEntryAtIndex(java.lang.Object[],int)>($r6, i0);

        $r7 = new androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        $r8 = virtualinvoke r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder: androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership getOwnership$runtime_release()>();

        specialinvoke $r7.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: void <init>(int,int,java.lang.Object[],androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership)>(0, 0, r11, $r8);

        return $r7;
    }

    private final boolean collisionContainsKey(java.lang.Object)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0;
        java.lang.Object r1, $r7;
        kotlin.ranges.IntProgression r2, $r5;
        int i0, i1, $i2, i3;
        java.lang.Object[] $r3, $r6;
        kotlin.ranges.IntRange $r4;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        r1 := @parameter0: java.lang.Object;

        $r3 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $i2 = lengthof $r3;

        $r4 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntRange until(int,int)>(0, $i2);

        $r5 = (kotlin.ranges.IntProgression) $r4;

        r2 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntProgression step(kotlin.ranges.IntProgression,int)>($r5, 2);

        i3 = virtualinvoke r2.<kotlin.ranges.IntProgression: int getFirst()>();

        i0 = virtualinvoke r2.<kotlin.ranges.IntProgression: int getLast()>();

        i1 = virtualinvoke r2.<kotlin.ranges.IntProgression: int getStep()>();

        if i1 <= 0 goto label1;

        if i3 <= i0 goto label2;

     label1:
        if i1 >= 0 goto label4;

        if i0 > i3 goto label4;

     label2:
        $r6 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $r7 = $r6[i3];

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r7);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        if i3 == i0 goto label4;

        i3 = i3 + i1;

        goto label2;

     label4:
        return 0;
    }

    private final java.lang.Object collisionGet(java.lang.Object)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0;
        java.lang.Object r1, $r6, $r7;
        kotlin.ranges.IntProgression r2, $r5;
        int i0, i1, $i2, i3;
        java.lang.Object[] $r3;
        kotlin.ranges.IntRange $r4;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        r1 := @parameter0: java.lang.Object;

        $r3 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $i2 = lengthof $r3;

        $r4 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntRange until(int,int)>(0, $i2);

        $r5 = (kotlin.ranges.IntProgression) $r4;

        r2 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntProgression step(kotlin.ranges.IntProgression,int)>($r5, 2);

        i3 = virtualinvoke r2.<kotlin.ranges.IntProgression: int getFirst()>();

        i0 = virtualinvoke r2.<kotlin.ranges.IntProgression: int getLast()>();

        i1 = virtualinvoke r2.<kotlin.ranges.IntProgression: int getStep()>();

        if i1 <= 0 goto label1;

        if i3 <= i0 goto label2;

     label1:
        if i1 >= 0 goto label4;

        if i0 > i3 goto label4;

     label2:
        $r7 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object keyAtIndex(int)>(i3);

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r7);

        if $z0 == 0 goto label3;

        $r6 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object valueAtKeyIndex(int)>(i3);

        return $r6;

     label3:
        if i3 == i0 goto label4;

        i3 = i3 + i1;

        goto label2;

     label4:
        return null;
    }

    private final androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$ModificationResult collisionPut(java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0, $r10, $r16;
        java.lang.Object r1, r2, $r7, $r13;
        int i0, i1, $i2, $i3, $i4, i5;
        java.lang.Object[] r3, $r4, $r8, $r9, $r14, r15;
        kotlin.ranges.IntRange $r5;
        kotlin.ranges.IntProgression $r6, r12;
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$ModificationResult $r11, $r17;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $i2 = lengthof $r4;

        $r5 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntRange until(int,int)>(0, $i2);

        $r6 = (kotlin.ranges.IntProgression) $r5;

        r12 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntProgression step(kotlin.ranges.IntProgression,int)>($r6, 2);

        i5 = virtualinvoke r12.<kotlin.ranges.IntProgression: int getFirst()>();

        i0 = virtualinvoke r12.<kotlin.ranges.IntProgression: int getLast()>();

        i1 = virtualinvoke r12.<kotlin.ranges.IntProgression: int getStep()>();

        if i1 <= 0 goto label1;

        if i5 <= i0 goto label2;

     label1:
        if i1 >= 0 goto label5;

        if i0 > i5 goto label5;

     label2:
        $r13 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object keyAtIndex(int)>(i5);

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r13);

        if $z0 == 0 goto label4;

        $r7 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object valueAtKeyIndex(int)>(i5);

        if r2 != $r7 goto label3;

        return null;

     label3:
        $r8 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $i3 = lengthof $r8;

        $r9 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r8, $i3);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r9, "copyOf(this, size)");

        r3 = $r9;

        $i4 = i5 + 1;

        r3[$i4] = r2;

        $r10 = new androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        specialinvoke $r10.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: void <init>(int,int,java.lang.Object[])>(0, 0, r3);

        $r11 = specialinvoke $r10.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$ModificationResult asUpdateResult()>();

        return $r11;

     label4:
        if i5 == i0 goto label5;

        i5 = i5 + i1;

        goto label2;

     label5:
        $r14 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        r15 = staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeKt: java.lang.Object[] access$insertEntryAtIndex(java.lang.Object[],int,java.lang.Object,java.lang.Object)>($r14, 0, r1, r2);

        $r16 = new androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        specialinvoke $r16.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: void <init>(int,int,java.lang.Object[])>(0, 0, r15);

        $r17 = specialinvoke $r16.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$ModificationResult asInsertResult()>();

        return $r17;
    }

    private final androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode mutableCollisionPut(java.lang.Object, java.lang.Object, androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0, $r12, $r20;
        java.lang.Object r1, r2, $r7, $r16;
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, $i10;
        java.lang.Object[] $r4, $r10, $r11, $r14, r17, $r18, r19;
        kotlin.ranges.IntRange $r5;
        kotlin.ranges.IntProgression $r6, r15;
        androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership $r8, $r9, $r13, $r21;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder;

        $r4 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $i2 = lengthof $r4;

        $r5 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntRange until(int,int)>(0, $i2);

        $r6 = (kotlin.ranges.IntProgression) $r5;

        r15 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntProgression step(kotlin.ranges.IntProgression,int)>($r6, 2);

        i7 = virtualinvoke r15.<kotlin.ranges.IntProgression: int getFirst()>();

        i0 = virtualinvoke r15.<kotlin.ranges.IntProgression: int getLast()>();

        i1 = virtualinvoke r15.<kotlin.ranges.IntProgression: int getStep()>();

        if i1 <= 0 goto label1;

        if i7 <= i0 goto label2;

     label1:
        if i1 >= 0 goto label5;

        if i0 > i7 goto label5;

     label2:
        $r16 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object keyAtIndex(int)>(i7);

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r16);

        if $z0 == 0 goto label4;

        $r7 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object valueAtKeyIndex(int)>(i7);

        virtualinvoke r3.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder: void setOperationResult$runtime_release(java.lang.Object)>($r7);

        $r8 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership ownedBy>;

        $r9 = virtualinvoke r3.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder: androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership getOwnership$runtime_release()>();

        if $r8 != $r9 goto label3;

        $r14 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $i6 = i7 + 1;

        $r14[$i6] = r2;

        return r0;

     label3:
        i8 = virtualinvoke r3.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder: int getModCount$runtime_release()>();

        $i3 = i8 + 1;

        virtualinvoke r3.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder: void setModCount$runtime_release(int)>($i3);

        $r10 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $i4 = lengthof $r10;

        $r11 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r10, $i4);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r11, "copyOf(this, size)");

        r17 = $r11;

        $i5 = i7 + 1;

        r17[$i5] = r2;

        $r12 = new androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        $r13 = virtualinvoke r3.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder: androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership getOwnership$runtime_release()>();

        specialinvoke $r12.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: void <init>(int,int,java.lang.Object[],androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership)>(0, 0, r17, $r13);

        return $r12;

     label4:
        if i7 == i0 goto label5;

        i7 = i7 + i1;

        goto label2;

     label5:
        i9 = virtualinvoke r3.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder: int size()>();

        $i10 = i9 + 1;

        virtualinvoke r3.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder: void setSize(int)>($i10);

        $r18 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        r19 = staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeKt: java.lang.Object[] access$insertEntryAtIndex(java.lang.Object[],int,java.lang.Object,java.lang.Object)>($r18, 0, r1, r2);

        $r20 = new androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        $r21 = virtualinvoke r3.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder: androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership getOwnership$runtime_release()>();

        specialinvoke $r20.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: void <init>(int,int,java.lang.Object[],androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership)>(0, 0, r19, $r21);

        return $r20;
    }

    private final androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode collisionRemove(java.lang.Object)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0, $r6;
        java.lang.Object r1, $r7;
        kotlin.ranges.IntProgression r2, $r5;
        int i0, i1, $i2, i3;
        java.lang.Object[] $r3;
        kotlin.ranges.IntRange $r4;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        r1 := @parameter0: java.lang.Object;

        $r3 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $i2 = lengthof $r3;

        $r4 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntRange until(int,int)>(0, $i2);

        $r5 = (kotlin.ranges.IntProgression) $r4;

        r2 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntProgression step(kotlin.ranges.IntProgression,int)>($r5, 2);

        i3 = virtualinvoke r2.<kotlin.ranges.IntProgression: int getFirst()>();

        i0 = virtualinvoke r2.<kotlin.ranges.IntProgression: int getLast()>();

        i1 = virtualinvoke r2.<kotlin.ranges.IntProgression: int getStep()>();

        if i1 <= 0 goto label1;

        if i3 <= i0 goto label2;

     label1:
        if i1 >= 0 goto label4;

        if i0 > i3 goto label4;

     label2:
        $r7 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object keyAtIndex(int)>(i3);

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r7);

        if $z0 == 0 goto label3;

        $r6 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode collisionRemoveEntryAtIndex(int)>(i3);

        return $r6;

     label3:
        if i3 == i0 goto label4;

        i3 = i3 + i1;

        goto label2;

     label4:
        return r0;
    }

    private final androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode mutableCollisionRemove(java.lang.Object, androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0, $r7;
        java.lang.Object r1, $r8;
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder r2;
        kotlin.ranges.IntProgression r3, $r6;
        int i0, i1, $i2, i3;
        java.lang.Object[] $r4;
        kotlin.ranges.IntRange $r5;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder;

        $r4 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $i2 = lengthof $r4;

        $r5 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntRange until(int,int)>(0, $i2);

        $r6 = (kotlin.ranges.IntProgression) $r5;

        r3 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntProgression step(kotlin.ranges.IntProgression,int)>($r6, 2);

        i3 = virtualinvoke r3.<kotlin.ranges.IntProgression: int getFirst()>();

        i0 = virtualinvoke r3.<kotlin.ranges.IntProgression: int getLast()>();

        i1 = virtualinvoke r3.<kotlin.ranges.IntProgression: int getStep()>();

        if i1 <= 0 goto label1;

        if i3 <= i0 goto label2;

     label1:
        if i1 >= 0 goto label4;

        if i0 > i3 goto label4;

     label2:
        $r8 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object keyAtIndex(int)>(i3);

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r8);

        if $z0 == 0 goto label3;

        $r7 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode mutableCollisionRemoveEntryAtIndex(int,androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder)>(i3, r2);

        return $r7;

     label3:
        if i3 == i0 goto label4;

        i3 = i3 + i1;

        goto label2;

     label4:
        return r0;
    }

    private final androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode collisionRemove(java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0, $r8;
        java.lang.Object r1, r2, $r7, $r9;
        kotlin.ranges.IntProgression r3, $r6;
        int i0, i1, $i2, i3;
        java.lang.Object[] $r4;
        kotlin.ranges.IntRange $r5;
        boolean $z0, $z1;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $i2 = lengthof $r4;

        $r5 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntRange until(int,int)>(0, $i2);

        $r6 = (kotlin.ranges.IntProgression) $r5;

        r3 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntProgression step(kotlin.ranges.IntProgression,int)>($r6, 2);

        i3 = virtualinvoke r3.<kotlin.ranges.IntProgression: int getFirst()>();

        i0 = virtualinvoke r3.<kotlin.ranges.IntProgression: int getLast()>();

        i1 = virtualinvoke r3.<kotlin.ranges.IntProgression: int getStep()>();

        if i1 <= 0 goto label1;

        if i3 <= i0 goto label2;

     label1:
        if i1 >= 0 goto label4;

        if i0 > i3 goto label4;

     label2:
        $r9 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object keyAtIndex(int)>(i3);

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r9);

        if $z1 == 0 goto label3;

        $r7 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object valueAtKeyIndex(int)>(i3);

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r2, $r7);

        if $z0 == 0 goto label3;

        $r8 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode collisionRemoveEntryAtIndex(int)>(i3);

        return $r8;

     label3:
        if i3 == i0 goto label4;

        i3 = i3 + i1;

        goto label2;

     label4:
        return r0;
    }

    private final androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode mutableCollisionRemove(java.lang.Object, java.lang.Object, androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0, $r9;
        java.lang.Object r1, r2, $r8, $r10;
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder r3;
        kotlin.ranges.IntProgression r4, $r7;
        int i0, i1, $i2, i3;
        java.lang.Object[] $r5;
        kotlin.ranges.IntRange $r6;
        boolean $z0, $z1;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder;

        $r5 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $i2 = lengthof $r5;

        $r6 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntRange until(int,int)>(0, $i2);

        $r7 = (kotlin.ranges.IntProgression) $r6;

        r4 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntProgression step(kotlin.ranges.IntProgression,int)>($r7, 2);

        i3 = virtualinvoke r4.<kotlin.ranges.IntProgression: int getFirst()>();

        i0 = virtualinvoke r4.<kotlin.ranges.IntProgression: int getLast()>();

        i1 = virtualinvoke r4.<kotlin.ranges.IntProgression: int getStep()>();

        if i1 <= 0 goto label1;

        if i3 <= i0 goto label2;

     label1:
        if i1 >= 0 goto label4;

        if i0 > i3 goto label4;

     label2:
        $r10 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object keyAtIndex(int)>(i3);

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r10);

        if $z1 == 0 goto label3;

        $r8 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object valueAtKeyIndex(int)>(i3);

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r2, $r8);

        if $z0 == 0 goto label3;

        $r9 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode mutableCollisionRemoveEntryAtIndex(int,androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder)>(i3, r3);

        return $r9;

     label3:
        if i3 == i0 goto label4;

        i3 = i3 + i1;

        goto label2;

     label4:
        return r0;
    }

    private final androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode mutableCollisionPutAll(androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode, androidx.compose.runtime.external.kotlinx.collections.immutable.internal.DeltaCounter, androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0, r1, $r23;
        androidx.compose.runtime.external.kotlinx.collections.immutable.internal.DeltaCounter r2;
        androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership r3;
        java.lang.Object[] r4, $r5, $r6, $r7, $r8, $r9, $r10, $r13, $r14, $r15, $r17, $r20, $r22;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17, i18, $i19;
        kotlin.ranges.IntRange $r11;
        kotlin.ranges.IntProgression $r12, r19;
        java.lang.Object $r16, $r18, $r21;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        r1 := @parameter0: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        r2 := @parameter1: androidx.compose.runtime.external.kotlinx.collections.immutable.internal.DeltaCounter;

        r3 := @parameter2: androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership;

        $i3 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeMap>;

        if $i3 != 0 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.internal.CommonFunctionsKt: void assert(boolean)>($z0);

        $i4 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int dataMap>;

        if $i4 != 0 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.internal.CommonFunctionsKt: void assert(boolean)>($z1);

        $i5 = r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeMap>;

        if $i5 != 0 goto label05;

        $z2 = 1;

        goto label06;

     label05:
        $z2 = 0;

     label06:
        staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.internal.CommonFunctionsKt: void assert(boolean)>($z2);

        $i6 = r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int dataMap>;

        if $i6 != 0 goto label07;

        $z3 = 1;

        goto label08;

     label07:
        $z3 = 0;

     label08:
        staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.internal.CommonFunctionsKt: void assert(boolean)>($z3);

        $r7 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $r5 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $i8 = lengthof $r5;

        $r6 = r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $i7 = lengthof $r6;

        $i9 = $i8 + $i7;

        $r8 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r7, $i9);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r8, "copyOf(this, newSize)");

        r4 = $r8;

        $r9 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        i16 = lengthof $r9;

        $r10 = r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $i10 = lengthof $r10;

        $r11 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntRange until(int,int)>(0, $i10);

        $r12 = (kotlin.ranges.IntProgression) $r11;

        r19 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntProgression step(kotlin.ranges.IntProgression,int)>($r12, 2);

        i17 = virtualinvoke r19.<kotlin.ranges.IntProgression: int getFirst()>();

        i0 = virtualinvoke r19.<kotlin.ranges.IntProgression: int getLast()>();

        i1 = virtualinvoke r19.<kotlin.ranges.IntProgression: int getStep()>();

        if i1 <= 0 goto label09;

        if i17 <= i0 goto label10;

     label09:
        if i1 >= 0 goto label13;

        if i0 > i17 goto label13;

     label10:
        $r20 = r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $r21 = $r20[i17];

        $z4 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: boolean collisionContainsKey(java.lang.Object)>($r21);

        if $z4 != 0 goto label11;

        $r15 = r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $r16 = $r15[i17];

        r4[i16] = $r16;

        $i15 = i16 + 1;

        $r17 = r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $i14 = i17 + 1;

        $r18 = $r17[$i14];

        r4[$i15] = $r18;

        i16 = i16 + 2;

        goto label12;

     label11:
        i2 = virtualinvoke r2.<androidx.compose.runtime.external.kotlinx.collections.immutable.internal.DeltaCounter: int getCount()>();

        $i13 = i2 + 1;

        virtualinvoke r2.<androidx.compose.runtime.external.kotlinx.collections.immutable.internal.DeltaCounter: void setCount(int)>($i13);

     label12:
        if i17 == i0 goto label13;

        i17 = i17 + i1;

        goto label10;

     label13:
        i18 = i16;

        $r22 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $i19 = lengthof $r22;

        if i18 != $i19 goto label14;

        $r23 = r0;

        goto label17;

     label14:
        $r13 = r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $i11 = lengthof $r13;

        if i18 != $i11 goto label15;

        $r23 = r1;

        goto label17;

     label15:
        $i12 = lengthof r4;

        if i18 != $i12 goto label16;

        $r23 = new androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        specialinvoke $r23.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: void <init>(int,int,java.lang.Object[],androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership)>(0, 0, r4, r3);

        goto label17;

     label16:
        $r23 = new androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        $r14 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r4, i18);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r14, "copyOf(this, newSize)");

        specialinvoke $r23.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: void <init>(int,int,java.lang.Object[],androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership)>(0, 0, $r14, r3);

     label17:
        return $r23;
    }

    private final androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode mutablePutAllFromOtherNodeCell(androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode, int, int, androidx.compose.runtime.external.kotlinx.collections.immutable.internal.DeltaCounter, androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0, r1, r4, r9, r10, $r11, r14, r15;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15, $i16, i17, $i18, i19, $i20, i21, i22, $i24, $i25, $i26;
        androidx.compose.runtime.external.kotlinx.collections.immutable.internal.DeltaCounter r2;
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder r3;
        boolean $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.Object r12, r13, r16, r17, r18, r19, r20, r21;
        androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership $r25;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        r1 := @parameter0: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: androidx.compose.runtime.external.kotlinx.collections.immutable.internal.DeltaCounter;

        r3 := @parameter4: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder;

        $z1 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: boolean hasNodeAt(int)>(i0);

        if $z1 == 0 goto label06;

        $i8 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeIndex$runtime_release(int)>(i0);

        r9 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode nodeAtIndex$runtime_release(int)>($i8);

        $z5 = specialinvoke r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: boolean hasNodeAt(int)>(i0);

        if $z5 == 0 goto label01;

        $i12 = virtualinvoke r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeIndex$runtime_release(int)>(i0);

        r10 = virtualinvoke r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode nodeAtIndex$runtime_release(int)>($i12);

        $i13 = i1 + 5;

        $r11 = virtualinvoke r9.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode mutablePutAll(androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode,int,androidx.compose.runtime.external.kotlinx.collections.immutable.internal.DeltaCounter,androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder)>(r10, $i13, r2, r3);

        goto label18;

     label01:
        $z6 = virtualinvoke r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: boolean hasEntryAt$runtime_release(int)>(i0);

        if $z6 == 0 goto label05;

        i14 = virtualinvoke r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int entryKeyIndex$runtime_release(int)>(i0);

        r12 = specialinvoke r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object keyAtIndex(int)>(i14);

        r13 = specialinvoke r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object valueAtKeyIndex(int)>(i14);

        i15 = virtualinvoke r3.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder: int size()>();

        if r12 == null goto label02;

        $i16 = virtualinvoke r12.<java.lang.Object: int hashCode()>();

        goto label03;

     label02:
        $i16 = 0;

     label03:
        $i9 = i1 + 5;

        r14 = virtualinvoke r9.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode mutablePut(int,java.lang.Object,java.lang.Object,int,androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder)>($i16, r12, r13, $i9, r3);

        r4 = r14;

        $i10 = virtualinvoke r3.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder: int size()>();

        if $i10 != i15 goto label04;

        i2 = virtualinvoke r2.<androidx.compose.runtime.external.kotlinx.collections.immutable.internal.DeltaCounter: int getCount()>();

        $i11 = i2 + 1;

        virtualinvoke r2.<androidx.compose.runtime.external.kotlinx.collections.immutable.internal.DeltaCounter: void setCount(int)>($i11);

     label04:
        $r11 = r14;

        goto label18;

     label05:
        $r11 = r9;

        goto label18;

     label06:
        $z2 = specialinvoke r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: boolean hasNodeAt(int)>(i0);

        if $z2 == 0 goto label13;

        $i4 = virtualinvoke r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeIndex$runtime_release(int)>(i0);

        r15 = virtualinvoke r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode nodeAtIndex$runtime_release(int)>($i4);

        $z3 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: boolean hasEntryAt$runtime_release(int)>(i0);

        if $z3 == 0 goto label12;

        i17 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int entryKeyIndex$runtime_release(int)>(i0);

        r16 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object keyAtIndex(int)>(i17);

        if r16 == null goto label07;

        $i18 = virtualinvoke r16.<java.lang.Object: int hashCode()>();

        goto label08;

     label07:
        $i18 = 0;

     label08:
        $i5 = i1 + 5;

        $z4 = virtualinvoke r15.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: boolean containsKey(int,java.lang.Object,int)>($i18, r16, $i5);

        if $z4 == 0 goto label09;

        i19 = virtualinvoke r2.<androidx.compose.runtime.external.kotlinx.collections.immutable.internal.DeltaCounter: int getCount()>();

        $i7 = i19 + 1;

        virtualinvoke r2.<androidx.compose.runtime.external.kotlinx.collections.immutable.internal.DeltaCounter: void setCount(int)>($i7);

        $r11 = r15;

        goto label18;

     label09:
        r17 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object valueAtKeyIndex(int)>(i17);

        if r16 == null goto label10;

        $i20 = virtualinvoke r16.<java.lang.Object: int hashCode()>();

        goto label11;

     label10:
        $i20 = 0;

     label11:
        $i6 = i1 + 5;

        $r11 = virtualinvoke r15.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode mutablePut(int,java.lang.Object,java.lang.Object,int,androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder)>($i20, r16, r17, $i6, r3);

        goto label18;

     label12:
        $r11 = r15;

        goto label18;

     label13:
        i21 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int entryKeyIndex$runtime_release(int)>(i0);

        r18 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object keyAtIndex(int)>(i21);

        r19 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object valueAtKeyIndex(int)>(i21);

        i22 = virtualinvoke r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int entryKeyIndex$runtime_release(int)>(i0);

        r20 = specialinvoke r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object keyAtIndex(int)>(i22);

        r21 = specialinvoke r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object valueAtKeyIndex(int)>(i22);

        if r18 == null goto label14;

        $i3 = virtualinvoke r18.<java.lang.Object: int hashCode()>();

        $i24 = $i3;

        goto label15;

     label14:
        $i24 = 0;

     label15:
        if r20 == null goto label16;

        $i25 = virtualinvoke r20.<java.lang.Object: int hashCode()>();

        goto label17;

     label16:
        $i25 = 0;

     label17:
        $i26 = i1 + 5;

        $r25 = virtualinvoke r3.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder: androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership getOwnership$runtime_release()>();

        $r11 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode makeNode(int,java.lang.Object,java.lang.Object,int,java.lang.Object,java.lang.Object,int,androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership)>($i24, r18, r19, $i25, r20, r21, $i26, $r25);

     label18:
        return $r11;
    }

    private final int calculateSize()
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0, $r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        java.lang.Object[] $r1, $r3;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        $i2 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeMap>;

        if $i2 != 0 goto label1;

        $r3 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $i5 = lengthof $r3;

        $i6 = $i5 / 2;

        return $i6;

     label1:
        $i3 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int dataMap>;

        i0 = staticinvoke <java.lang.Integer: int bitCount(int)>($i3);

        i7 = i0;

        i8 = i0 * 2;

        $r1 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        i1 = lengthof $r1;

     label2:
        if i8 >= i1 goto label3;

        $r2 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode nodeAtIndex$runtime_release(int)>(i8);

        $i4 = specialinvoke $r2.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int calculateSize()>();

        i7 = i7 + $i4;

        i8 = i8 + 1;

        goto label2;

     label3:
        return i7;
    }

    private final boolean elementsIdentityEquals(androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0, r1;
        int i0, $i1, $i2, $i3, $i4, i5;
        java.lang.Object[] $r2, $r3, $r4;
        java.lang.Object $r5, $r6;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        r1 := @parameter0: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $i2 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeMap>;

        $i1 = r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeMap>;

        if $i2 == $i1 goto label2;

        return 0;

     label2:
        $i4 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int dataMap>;

        $i3 = r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int dataMap>;

        if $i4 == $i3 goto label3;

        return 0;

     label3:
        i5 = 0;

        $r2 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        i0 = lengthof $r2;

     label4:
        if i5 >= i0 goto label6;

        $r3 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $r6 = $r3[i5];

        $r4 = r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $r5 = $r4[i5];

        if $r6 == $r5 goto label5;

        return 0;

     label5:
        i5 = i5 + 1;

        goto label4;

     label6:
        return 1;
    }

    public final boolean containsKey(int, java.lang.Object, int)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0, r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        java.lang.Object r1, $r3;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        i1 := @parameter2: int;

        $i3 = staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeKt: int indexSegment(int,int)>(i0, i1);

        i2 = 1 << $i3;

        $z0 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: boolean hasEntryAt$runtime_release(int)>(i2);

        if $z0 == 0 goto label1;

        $i6 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int entryKeyIndex$runtime_release(int)>(i2);

        $r3 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object keyAtIndex(int)>($i6);

        $z4 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r3);

        return $z4;

     label1:
        $z1 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: boolean hasNodeAt(int)>(i2);

        if $z1 == 0 goto label3;

        $i4 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeIndex$runtime_release(int)>(i2);

        r2 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode nodeAtIndex$runtime_release(int)>($i4);

        if i1 != 30 goto label2;

        $z3 = specialinvoke r2.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: boolean collisionContainsKey(java.lang.Object)>(r1);

        return $z3;

     label2:
        $i5 = i1 + 5;

        $z2 = virtualinvoke r2.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: boolean containsKey(int,java.lang.Object,int)>(i0, r1, $i5);

        return $z2;

     label3:
        return 0;
    }

    public final java.lang.Object get(int, java.lang.Object, int)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0, r6;
        int i0, i1, i2, $i3, $i4, $i5, i6;
        java.lang.Object r1, $r2, $r3, $r4, $r5;
        boolean $z0, $z1, $z2;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        i1 := @parameter2: int;

        $i3 = staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeKt: int indexSegment(int,int)>(i0, i1);

        i2 = 1 << $i3;

        $z0 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: boolean hasEntryAt$runtime_release(int)>(i2);

        if $z0 == 0 goto label2;

        i6 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int entryKeyIndex$runtime_release(int)>(i2);

        $r4 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object keyAtIndex(int)>(i6);

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r4);

        if $z2 == 0 goto label1;

        $r5 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object valueAtKeyIndex(int)>(i6);

        return $r5;

     label1:
        return null;

     label2:
        $z1 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: boolean hasNodeAt(int)>(i2);

        if $z1 == 0 goto label4;

        $i4 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeIndex$runtime_release(int)>(i2);

        r6 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode nodeAtIndex$runtime_release(int)>($i4);

        if i1 != 30 goto label3;

        $r3 = specialinvoke r6.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object collisionGet(java.lang.Object)>(r1);

        return $r3;

     label3:
        $i5 = i1 + 5;

        $r2 = virtualinvoke r6.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object get(int,java.lang.Object,int)>(i0, r1, $i5);

        return $r2;

     label4:
        return null;
    }

    public final androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode mutablePutAll(androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode, int, androidx.compose.runtime.external.kotlinx.collections.immutable.internal.DeltaCounter, androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0, r1, $r16, $r20, $r24, $r26, $r27, r29;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, i21, i22, i23, i24, i25, i26, $i27, $i28, $i29, $i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i41, i42, i43;
        androidx.compose.runtime.external.kotlinx.collections.immutable.internal.DeltaCounter r2;
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder r3;
        androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership $r4, $r5, $r19;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6, z7, $z10, z11, z12, z13, z14;
        java.lang.Object[] $r6, $r8, $r10, $r12, $r14, $r15, $r25;
        java.lang.Object $r7, $r9, $r11, $r13, r21, r22;
        java.lang.String $r18, $r23;
        java.lang.IllegalStateException r28;
        java.lang.Throwable r30;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        r1 := @parameter0: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        i0 := @parameter1: int;

        r2 := @parameter2: androidx.compose.runtime.external.kotlinx.collections.immutable.internal.DeltaCounter;

        r3 := @parameter3: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "otherNode");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "intersectionCounter");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "mutator");

        if r0 != r1 goto label01;

        $i20 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int calculateSize()>();

        virtualinvoke r2.<androidx.compose.runtime.external.kotlinx.collections.immutable.internal.DeltaCounter: void plusAssign(int)>($i20);

        return r0;

     label01:
        if i0 <= 30 goto label02;

        $r19 = virtualinvoke r3.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder: androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership getOwnership$runtime_release()>();

        $r20 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode mutableCollisionPutAll(androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode,androidx.compose.runtime.external.kotlinx.collections.immutable.internal.DeltaCounter,androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership)>(r1, r2, $r19);

        return $r20;

     label02:
        z6 = 0;

        $i3 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeMap>;

        $i2 = r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeMap>;

        i21 = $i3 | $i2;

        z7 = 0;

        $i5 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int dataMap>;

        $i4 = r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int dataMap>;

        $i7 = $i5 ^ $i4;

        $i6 = i21 ^ -1;

        i22 = $i7 & $i6;

        $i9 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int dataMap>;

        $i8 = r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int dataMap>;

        i23 = $i9 & $i8;

        i24 = 0;

     label03:
        if i23 == 0 goto label06;

        i25 = staticinvoke <java.lang.Integer: int lowestOneBit(int)>(i23);

        i26 = i25;

        $i18 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int entryKeyIndex$runtime_release(int)>(i26);

        r21 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object keyAtIndex(int)>($i18);

        $i19 = virtualinvoke r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int entryKeyIndex$runtime_release(int)>(i26);

        r22 = specialinvoke r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object keyAtIndex(int)>($i19);

        $z5 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r21, r22);

        if $z5 == 0 goto label04;

        i22 = i22 | i26;

        goto label05;

     label04:
        i21 = i21 | i26;

     label05:
        i24 = i24 + 1;

        i23 = i23 ^ i25;

        goto label03;

     label06:
        $i10 = i21 & i22;

        if $i10 != 0 goto label07;

        $z10 = 1;

        goto label08;

     label07:
        $z10 = 0;

     label08:
        if $z10 != 0 goto label09;

        $r23 = "Check failed.";

        r28 = new java.lang.IllegalStateException;

        $r18 = virtualinvoke $r23.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r28.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r18);

        r30 = (java.lang.Throwable) r28;

        throw r30;

     label09:
        $r4 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership ownedBy>;

        $r5 = virtualinvoke r3.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder: androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership getOwnership$runtime_release()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, $r5);

        if $z0 == 0 goto label10;

        $i16 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int dataMap>;

        if $i16 != i22 goto label10;

        $i17 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeMap>;

        if $i17 != i21 goto label10;

        $r24 = r0;

        goto label11;

     label10:
        $i27 = staticinvoke <java.lang.Integer: int bitCount(int)>(i22);

        $i28 = $i27 * 2;

        $i29 = staticinvoke <java.lang.Integer: int bitCount(int)>(i21);

        $i30 = $i28 + $i29;

        r29 = new androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        $r24 = r29;

        $r25 = newarray (java.lang.Object)[$i30];

        specialinvoke r29.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: void <init>(int,int,java.lang.Object[])>(i22, i21, $r25);

     label11:
        $r26 = $r24;

        z11 = 0;

        i31 = i21;

        i32 = 0;

     label12:
        if i31 == 0 goto label13;

        i33 = staticinvoke <java.lang.Integer: int lowestOneBit(int)>(i31);

        i34 = i32;

        z12 = 0;

        $r14 = $r26.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $i14 = lengthof $r14;

        $i15 = $i14 - 1;

        i35 = $i15 - i34;

        $r15 = $r26.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $r16 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode mutablePutAllFromOtherNodeCell(androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode,int,int,androidx.compose.runtime.external.kotlinx.collections.immutable.internal.DeltaCounter,androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder)>(r1, i33, i0, r2, r3);

        $r15[i35] = $r16;

        i32 = i32 + 1;

        i31 = i31 ^ i33;

        goto label12;

     label13:
        z13 = 0;

        i36 = i22;

        i37 = 0;

     label14:
        if i36 == 0 goto label17;

        i38 = staticinvoke <java.lang.Integer: int lowestOneBit(int)>(i36);

        i39 = i37;

        z14 = 0;

        i41 = i39 * 2;

        $z3 = virtualinvoke r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: boolean hasEntryAt$runtime_release(int)>(i38);

        if $z3 != 0 goto label15;

        i42 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int entryKeyIndex$runtime_release(int)>(i38);

        $r10 = $r26.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $r11 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object keyAtIndex(int)>(i42);

        $r10[i41] = $r11;

        $r12 = $r26.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $i13 = i41 + 1;

        $r13 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object valueAtKeyIndex(int)>(i42);

        $r12[$i13] = $r13;

        goto label16;

     label15:
        i43 = virtualinvoke r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int entryKeyIndex$runtime_release(int)>(i38);

        $r6 = $r26.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $r7 = specialinvoke r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object keyAtIndex(int)>(i43);

        $r6[i41] = $r7;

        $r8 = $r26.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] buffer>;

        $i11 = i41 + 1;

        $r9 = specialinvoke r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object valueAtKeyIndex(int)>(i43);

        $r8[$i11] = $r9;

        $z4 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: boolean hasEntryAt$runtime_release(int)>(i38);

        if $z4 == 0 goto label16;

        i1 = virtualinvoke r2.<androidx.compose.runtime.external.kotlinx.collections.immutable.internal.DeltaCounter: int getCount()>();

        $i12 = i1 + 1;

        virtualinvoke r2.<androidx.compose.runtime.external.kotlinx.collections.immutable.internal.DeltaCounter: void setCount(int)>($i12);

     label16:
        i37 = i37 + 1;

        i36 = i36 ^ i38;

        goto label14;

     label17:
        $z1 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: boolean elementsIdentityEquals(androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode)>($r26);

        if $z1 == 0 goto label18;

        $r27 = r0;

        goto label20;

     label18:
        $z2 = specialinvoke r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: boolean elementsIdentityEquals(androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode)>($r26);

        if $z2 == 0 goto label19;

        $r27 = r1;

        goto label20;

     label19:
        $r27 = $r26;

     label20:
        return $r27;
    }

    public final androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$ModificationResult put(int, java.lang.Object, java.lang.Object, int)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0, r3, r8, $r10, $r12, $r14, $r17;
        int i0, i1, i2, $i3, $i4, i5, i6;
        java.lang.Object r1, r2, $r13, $r16;
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$ModificationResult r4, r5, r6, r9, $r11, $r15, $r18, $r19;
        boolean $z3, $z4, $z5;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        i1 := @parameter3: int;

        $i3 = staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeKt: int indexSegment(int,int)>(i0, i1);

        i2 = 1 << $i3;

        $z3 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: boolean hasEntryAt$runtime_release(int)>(i2);

        if $z3 == 0 goto label3;

        i5 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int entryKeyIndex$runtime_release(int)>(i2);

        $r13 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object keyAtIndex(int)>(i5);

        $z5 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r13);

        if $z5 == 0 goto label2;

        $r16 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object valueAtKeyIndex(int)>(i5);

        if $r16 != r2 goto label1;

        return null;

     label1:
        $r17 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode updateValueAtIndex(int,java.lang.Object)>(i5, r2);

        $r18 = specialinvoke $r17.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$ModificationResult asUpdateResult()>();

        return $r18;

     label2:
        $r14 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode moveEntryToNode(int,int,int,java.lang.Object,java.lang.Object,int)>(i5, i2, i0, r1, r2, i1);

        $r15 = specialinvoke $r14.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$ModificationResult asInsertResult()>();

        return $r15;

     label3:
        $z4 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: boolean hasNodeAt(int)>(i2);

        if $z4 == 0 goto label6;

        i6 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeIndex$runtime_release(int)>(i2);

        r3 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode nodeAtIndex$runtime_release(int)>(i6);

        if i1 != 30 goto label4;

        $r19 = specialinvoke r3.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$ModificationResult collisionPut(java.lang.Object,java.lang.Object)>(r1, r2);

        if $r19 != null goto label5;

        return null;

     label4:
        $i4 = i1 + 5;

        $r19 = virtualinvoke r3.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$ModificationResult put(int,java.lang.Object,java.lang.Object,int)>(i0, r1, r2, $i4);

        if $r19 != null goto label5;

        return null;

     label5:
        r4 = $r19;

        r5 = r4;

        r6 = r5;

        r8 = virtualinvoke r6.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$ModificationResult: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode getNode()>();

        r9 = r6;

        $r12 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode updateNodeAtIndex(int,int,androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode)>(i6, i2, r8);

        virtualinvoke r9.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$ModificationResult: void setNode(androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode)>($r12);

        return r6;

     label6:
        $r10 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode insertEntryAt(int,java.lang.Object,java.lang.Object)>(i2, r1, r2);

        $r11 = specialinvoke $r10.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$ModificationResult asInsertResult()>();

        return $r11;
    }

    public final androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode mutablePut(int, java.lang.Object, java.lang.Object, int, androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0, r4, $r6, $r8, $r11, $r14, r15, $r16;
        int i0, i1, i2, $i3, $i4, $i5, $i6, i7, i8, i9, i10;
        java.lang.Object r1, r2, $r9, $r12, $r13;
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder r3;
        boolean $z0, $z1, $z2;
        androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership $r5, $r7, $r10;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        i1 := @parameter3: int;

        r3 := @parameter4: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "mutator");

        $i3 = staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeKt: int indexSegment(int,int)>(i0, i1);

        i2 = 1 << $i3;

        $z0 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: boolean hasEntryAt$runtime_release(int)>(i2);

        if $z0 == 0 goto label3;

        i7 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int entryKeyIndex$runtime_release(int)>(i2);

        $r9 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object keyAtIndex(int)>(i7);

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r9);

        if $z2 == 0 goto label2;

        $r12 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object valueAtKeyIndex(int)>(i7);

        virtualinvoke r3.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder: void setOperationResult$runtime_release(java.lang.Object)>($r12);

        $r13 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object valueAtKeyIndex(int)>(i7);

        if $r13 != r2 goto label1;

        return r0;

     label1:
        $r14 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode mutableUpdateValueAtIndex(int,java.lang.Object,androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder)>(i7, r2, r3);

        return $r14;

     label2:
        i8 = virtualinvoke r3.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder: int size()>();

        $i6 = i8 + 1;

        virtualinvoke r3.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder: void setSize(int)>($i6);

        $r10 = virtualinvoke r3.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder: androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership getOwnership$runtime_release()>();

        $r11 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode mutableMoveEntryToNode(int,int,int,java.lang.Object,java.lang.Object,int,androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership)>(i7, i2, i0, r1, r2, i1, $r10);

        return $r11;

     label3:
        $z1 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: boolean hasNodeAt(int)>(i2);

        if $z1 == 0 goto label7;

        i9 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeIndex$runtime_release(int)>(i2);

        r15 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode nodeAtIndex$runtime_release(int)>(i9);

        if i1 != 30 goto label4;

        $r16 = specialinvoke r15.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode mutableCollisionPut(java.lang.Object,java.lang.Object,androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder)>(r1, r2, r3);

        goto label5;

     label4:
        $i5 = i1 + 5;

        $r16 = virtualinvoke r15.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode mutablePut(int,java.lang.Object,java.lang.Object,int,androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder)>(i0, r1, r2, $i5, r3);

     label5:
        r4 = $r16;

        if r15 != r4 goto label6;

        return r0;

     label6:
        $r7 = virtualinvoke r3.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder: androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership getOwnership$runtime_release()>();

        $r8 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode mutableUpdateNodeAtIndex(int,androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode,androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership)>(i9, r4, $r7);

        return $r8;

     label7:
        i10 = virtualinvoke r3.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder: int size()>();

        $i4 = i10 + 1;

        virtualinvoke r3.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder: void setSize(int)>($i4);

        $r5 = virtualinvoke r3.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder: androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership getOwnership$runtime_release()>();

        $r6 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode mutableInsertEntryAt(int,java.lang.Object,java.lang.Object,androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership)>(i2, r1, r2, $r5);

        return $r6;
    }

    public final androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode remove(int, java.lang.Object, int)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0, r2, r3, $r4, $r6, $r7;
        int i0, i1, i2, $i3, $i4, i5, i6;
        java.lang.Object r1, $r5;
        boolean $z0, $z1, $z2;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        i1 := @parameter2: int;

        $i3 = staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeKt: int indexSegment(int,int)>(i0, i1);

        i2 = 1 << $i3;

        $z0 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: boolean hasEntryAt$runtime_release(int)>(i2);

        if $z0 == 0 goto label2;

        i5 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int entryKeyIndex$runtime_release(int)>(i2);

        $r5 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object keyAtIndex(int)>(i5);

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r5);

        if $z2 == 0 goto label1;

        $r6 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode removeEntryAtIndex(int,int)>(i5, i2);

        return $r6;

     label1:
        return r0;

     label2:
        $z1 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: boolean hasNodeAt(int)>(i2);

        if $z1 == 0 goto label5;

        i6 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeIndex$runtime_release(int)>(i2);

        r2 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode nodeAtIndex$runtime_release(int)>(i6);

        if i1 != 30 goto label3;

        $r7 = specialinvoke r2.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode collisionRemove(java.lang.Object)>(r1);

        goto label4;

     label3:
        $i4 = i1 + 5;

        $r7 = virtualinvoke r2.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode remove(int,java.lang.Object,int)>(i0, r1, $i4);

     label4:
        r3 = $r7;

        $r4 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode replaceNode(androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode,androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode,int,int)>(r2, r3, i6, i2);

        return $r4;

     label5:
        return r0;
    }

    private final androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode replaceNode(androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode, androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode, int, int)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0, r1, r2, $r3;
        int i0, i1;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        r1 := @parameter0: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        r2 := @parameter1: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        if r2 != null goto label1;

        $r3 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode removeNodeAtIndex(int,int)>(i0, i1);

        goto label3;

     label1:
        if r1 == r2 goto label2;

        $r3 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode updateNodeAtIndex(int,int,androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode)>(i0, i1, r2);

        goto label3;

     label2:
        $r3 = r0;

     label3:
        return $r3;
    }

    public final androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode mutableRemove(int, java.lang.Object, int, androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0, r3, r4, $r6, $r8, $r9;
        int i0, i1, i2, $i3, $i4, i5, i6;
        java.lang.Object r1, $r7;
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder r2;
        boolean $z0, $z1, $z2;
        androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership $r5;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        i1 := @parameter2: int;

        r2 := @parameter3: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "mutator");

        $i3 = staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeKt: int indexSegment(int,int)>(i0, i1);

        i2 = 1 << $i3;

        $z0 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: boolean hasEntryAt$runtime_release(int)>(i2);

        if $z0 == 0 goto label2;

        i5 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int entryKeyIndex$runtime_release(int)>(i2);

        $r7 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object keyAtIndex(int)>(i5);

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r7);

        if $z2 == 0 goto label1;

        $r8 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode mutableRemoveEntryAtIndex(int,int,androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder)>(i5, i2, r2);

        return $r8;

     label1:
        return r0;

     label2:
        $z1 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: boolean hasNodeAt(int)>(i2);

        if $z1 == 0 goto label5;

        i6 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeIndex$runtime_release(int)>(i2);

        r3 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode nodeAtIndex$runtime_release(int)>(i6);

        if i1 != 30 goto label3;

        $r9 = specialinvoke r3.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode mutableCollisionRemove(java.lang.Object,androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder)>(r1, r2);

        goto label4;

     label3:
        $i4 = i1 + 5;

        $r9 = virtualinvoke r3.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode mutableRemove(int,java.lang.Object,int,androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder)>(i0, r1, $i4, r2);

     label4:
        r4 = $r9;

        $r5 = virtualinvoke r2.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder: androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership getOwnership$runtime_release()>();

        $r6 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode mutableReplaceNode(androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode,androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode,int,int,androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership)>(r3, r4, i6, i2, $r5);

        return $r6;

     label5:
        return r0;
    }

    private final androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode mutableReplaceNode(androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode, androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode, int, int, androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0, r1, r2, $r5;
        int i0, i1;
        androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership r3, $r4;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        r1 := @parameter0: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        r2 := @parameter1: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r3 := @parameter4: androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership;

        if r2 != null goto label1;

        $r5 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode mutableRemoveNodeAtIndex(int,int,androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership)>(i0, i1, r3);

        goto label4;

     label1:
        $r4 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership ownedBy>;

        if $r4 == r3 goto label2;

        if r1 == r2 goto label3;

     label2:
        $r5 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode mutableUpdateNodeAtIndex(int,androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode,androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership)>(i0, r2, r3);

        goto label4;

     label3:
        $r5 = r0;

     label4:
        return $r5;
    }

    public final androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode remove(int, java.lang.Object, java.lang.Object, int)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0, r3, r4, $r5, $r8, $r9;
        int i0, i1, i2, $i3, $i4, i5, i6;
        java.lang.Object r1, r2, $r6, $r7;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        i1 := @parameter3: int;

        $i3 = staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeKt: int indexSegment(int,int)>(i0, i1);

        i2 = 1 << $i3;

        $z0 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: boolean hasEntryAt$runtime_release(int)>(i2);

        if $z0 == 0 goto label2;

        i5 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int entryKeyIndex$runtime_release(int)>(i2);

        $r6 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object keyAtIndex(int)>(i5);

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r6);

        if $z2 == 0 goto label1;

        $r7 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object valueAtKeyIndex(int)>(i5);

        $z3 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r2, $r7);

        if $z3 == 0 goto label1;

        $r8 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode removeEntryAtIndex(int,int)>(i5, i2);

        return $r8;

     label1:
        return r0;

     label2:
        $z1 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: boolean hasNodeAt(int)>(i2);

        if $z1 == 0 goto label5;

        i6 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeIndex$runtime_release(int)>(i2);

        r3 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode nodeAtIndex$runtime_release(int)>(i6);

        if i1 != 30 goto label3;

        $r9 = specialinvoke r3.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode collisionRemove(java.lang.Object,java.lang.Object)>(r1, r2);

        goto label4;

     label3:
        $i4 = i1 + 5;

        $r9 = virtualinvoke r3.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode remove(int,java.lang.Object,java.lang.Object,int)>(i0, r1, r2, $i4);

     label4:
        r4 = $r9;

        $r5 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode replaceNode(androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode,androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode,int,int)>(r3, r4, i6, i2);

        return $r5;

     label5:
        return r0;
    }

    public final androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode mutableRemove(int, java.lang.Object, java.lang.Object, int, androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0, r4, r5, $r7, $r10, $r11;
        int i0, i1, i2, $i3, $i4, i5, i6;
        java.lang.Object r1, r2, $r8, $r9;
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder r3;
        boolean $z0, $z1, $z2, $z3;
        androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership $r6;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        i1 := @parameter3: int;

        r3 := @parameter4: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "mutator");

        $i3 = staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeKt: int indexSegment(int,int)>(i0, i1);

        i2 = 1 << $i3;

        $z0 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: boolean hasEntryAt$runtime_release(int)>(i2);

        if $z0 == 0 goto label2;

        i5 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int entryKeyIndex$runtime_release(int)>(i2);

        $r8 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object keyAtIndex(int)>(i5);

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r8);

        if $z2 == 0 goto label1;

        $r9 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object valueAtKeyIndex(int)>(i5);

        $z3 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r2, $r9);

        if $z3 == 0 goto label1;

        $r10 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode mutableRemoveEntryAtIndex(int,int,androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder)>(i5, i2, r3);

        return $r10;

     label1:
        return r0;

     label2:
        $z1 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: boolean hasNodeAt(int)>(i2);

        if $z1 == 0 goto label5;

        i6 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeIndex$runtime_release(int)>(i2);

        r4 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode nodeAtIndex$runtime_release(int)>(i6);

        if i1 != 30 goto label3;

        $r11 = specialinvoke r4.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode mutableCollisionRemove(java.lang.Object,java.lang.Object,androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder)>(r1, r2, r3);

        goto label4;

     label3:
        $i4 = i1 + 5;

        $r11 = virtualinvoke r4.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode mutableRemove(int,java.lang.Object,java.lang.Object,int,androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder)>(i0, r1, r2, $i4, r3);

     label4:
        r5 = $r11;

        $r6 = virtualinvoke r3.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.PersistentHashMapBuilder: androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership getOwnership$runtime_release()>();

        $r7 = specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode mutableReplaceNode(androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode,androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode,int,int,androidx.compose.runtime.external.kotlinx.collections.immutable.internal.MutabilityOwnership)>(r4, r5, i6, i2, $r6);

        return $r7;

     label5:
        return r0;
    }

    public final void accept$runtime_release(kotlin.jvm.functions.Function5)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0;
        kotlin.jvm.functions.Function5 r1;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        r1 := @parameter0: kotlin.jvm.functions.Function5;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "visitor");

        specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: void accept(kotlin.jvm.functions.Function5,int,int)>(r1, 0, 0);

        return;
    }

    private final void accept(kotlin.jvm.functions.Function5, int, int)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r0, r2;
        kotlin.jvm.functions.Function5 r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, i10;
        java.lang.Integer $r3, $r4, $r5, $r6;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        r1 := @parameter0: kotlin.jvm.functions.Function5;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $i4 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int dataMap>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $i5 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeMap>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        interfaceinvoke r1.<kotlin.jvm.functions.Function5: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r0, $r3, $r4, $r5, $r6);

        i10 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeMap>;

     label1:
        if i10 == 0 goto label2;

        i2 = staticinvoke <java.lang.Integer: int lowestOneBit(int)>(i10);

        i3 = staticinvoke <java.lang.Integer: int numberOfTrailingZeros(int)>(i2);

        $i6 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: int nodeIndex$runtime_release(int)>(i2);

        r2 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode nodeAtIndex$runtime_release(int)>($i6);

        $i7 = i3 << i1;

        $i9 = i0 + $i7;

        $i8 = i1 + 5;

        specialinvoke r2.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: void accept(kotlin.jvm.functions.Function5,int,int)>(r1, $i9, $i8);

        i10 = i10 - i2;

        goto label1;

     label2:
        return;
    }

    public static final androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode access$getEMPTY$cp()
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode $r0;

        $r0 = <androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode EMPTY>;

        return $r0;
    }

    static void <clinit>()
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$Companion $r0;
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode $r1;
        java.lang.Object[] $r2;

        $r0 = new androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$Companion;

        specialinvoke $r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$Companion Companion> = $r0;

        $r1 = new androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        $r2 = newarray (java.lang.Object)[0];

        specialinvoke $r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: void <init>(int,int,java.lang.Object[])>(0, 0, $r2);

        <androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode EMPTY> = $r1;

        return;
    }

androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$Companion
    private void <init>()
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$Companion r0;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode getEMPTY$runtime_release()
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$Companion r0;
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode $r1;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$Companion;

        $r1 = staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode access$getEMPTY$cp()>();

        return $r1;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$Companion: void <init>()>();

        return;
    }

androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$ModificationResult
<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$ModificationResult: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode node>
<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$ModificationResult: int sizeDelta>
    public void <init>(androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode, int)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$ModificationResult r0;
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r1;
        int i0;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$ModificationResult;

        r1 := @parameter0: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "node");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$ModificationResult: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode node> = r1;

        r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$ModificationResult: int sizeDelta> = i0;

        return;
    }

    public final androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode getNode()
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$ModificationResult r0;
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode $r1;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$ModificationResult;

        $r1 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$ModificationResult: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode node>;

        return $r1;
    }

    public final void setNode(androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$ModificationResult r0;
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r1;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$ModificationResult;

        r1 := @parameter0: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<set-?>");

        r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$ModificationResult: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode node> = r1;

        return;
    }

    public final int getSizeDelta()
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$ModificationResult r0;
        int $i0;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$ModificationResult;

        $i0 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$ModificationResult: int sizeDelta>;

        return $i0;
    }

    public final androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$ModificationResult replaceNode(kotlin.jvm.functions.Function1)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$ModificationResult r0, r2, $r3, $r7;
        kotlin.jvm.functions.Function1 r1;
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode $r4, $r6;
        java.lang.Object $r5;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$ModificationResult;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "operation");

        r2 = r0;

        $r3 = (androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$ModificationResult) r2;

        $r4 = virtualinvoke $r3.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$ModificationResult: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode getNode()>();

        $r5 = interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        $r6 = (androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode) $r5;

        virtualinvoke $r3.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$ModificationResult: void setNode(androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode)>($r6);

        $r7 = (androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$ModificationResult) r2;

        return $r7;
    }

