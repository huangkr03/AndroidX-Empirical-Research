androidx.lifecycle.DispatchQueue
<androidx.lifecycle.DispatchQueue: boolean paused>
<androidx.lifecycle.DispatchQueue: boolean finished>
<androidx.lifecycle.DispatchQueue: boolean isDraining>
<androidx.lifecycle.DispatchQueue: java.util.Queue queue>
    public void <init>()
    {
        androidx.lifecycle.DispatchQueue r0;
        java.util.ArrayDeque $r1;
        java.util.Queue $r2;

        r0 := @this: androidx.lifecycle.DispatchQueue;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.lifecycle.DispatchQueue: boolean paused> = 1;

        $r1 = new java.util.ArrayDeque;

        specialinvoke $r1.<java.util.ArrayDeque: void <init>()>();

        $r2 = (java.util.Queue) $r1;

        r0.<androidx.lifecycle.DispatchQueue: java.util.Queue queue> = $r2;

        return;
    }

    public final void pause()
    {
        androidx.lifecycle.DispatchQueue r0;

        r0 := @this: androidx.lifecycle.DispatchQueue;

        r0.<androidx.lifecycle.DispatchQueue: boolean paused> = 1;

        return;
    }

    public final void resume()
    {
        androidx.lifecycle.DispatchQueue r0;
        boolean $z0, $z1, $z2;
        java.lang.IllegalStateException $r1;
        java.lang.String $r2, $r3;

        r0 := @this: androidx.lifecycle.DispatchQueue;

        $z0 = r0.<androidx.lifecycle.DispatchQueue: boolean paused>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $z1 = r0.<androidx.lifecycle.DispatchQueue: boolean finished>;

        if $z1 != 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        if $z2 != 0 goto label4;

        $r3 = "Cannot resume a finished dispatcher";

        $r1 = new java.lang.IllegalStateException;

        $r2 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label4:
        r0.<androidx.lifecycle.DispatchQueue: boolean paused> = 0;

        virtualinvoke r0.<androidx.lifecycle.DispatchQueue: void drainQueue()>();

        return;
    }

    public final void finish()
    {
        androidx.lifecycle.DispatchQueue r0;

        r0 := @this: androidx.lifecycle.DispatchQueue;

        r0.<androidx.lifecycle.DispatchQueue: boolean finished> = 1;

        virtualinvoke r0.<androidx.lifecycle.DispatchQueue: void drainQueue()>();

        return;
    }

    public final void drainQueue()
    {
        androidx.lifecycle.DispatchQueue r0;
        java.lang.Throwable r1, $r5;
        boolean $z0, $z1, $z2, $z3;
        java.util.Queue $r2, $r6;
        java.lang.Object $r3;
        java.lang.Runnable $r4;
        java.util.Collection $r7;

        r0 := @this: androidx.lifecycle.DispatchQueue;

        $z0 = r0.<androidx.lifecycle.DispatchQueue: boolean isDraining>;

        if $z0 == 0 goto label01;

        return;

     label01:
        r0.<androidx.lifecycle.DispatchQueue: boolean isDraining> = 1;

     label02:
        $r6 = r0.<androidx.lifecycle.DispatchQueue: java.util.Queue queue>;

        $r7 = (java.util.Collection) $r6;

        $z2 = interfaceinvoke $r7.<java.util.Collection: boolean isEmpty()>();

        if $z2 != 0 goto label03;

        $z3 = 1;

        goto label04;

     label03:
        $z3 = 0;

     label04:
        if $z3 == 0 goto label07;

        $z1 = virtualinvoke r0.<androidx.lifecycle.DispatchQueue: boolean canRun()>();

        if $z1 != 0 goto label05;

        goto label07;

     label05:
        $r2 = r0.<androidx.lifecycle.DispatchQueue: java.util.Queue queue>;

        $r3 = interfaceinvoke $r2.<java.util.Queue: java.lang.Object poll()>();

        $r4 = (java.lang.Runnable) $r3;

        if $r4 == null goto label06;

        interfaceinvoke $r4.<java.lang.Runnable: void run()>();

        goto label02;

     label06:
        goto label02;

     label07:
        r0.<androidx.lifecycle.DispatchQueue: boolean isDraining> = 0;

        goto label10;

     label08:
        $r5 := @caughtexception;

        r1 = $r5;

     label09:
        r0.<androidx.lifecycle.DispatchQueue: boolean isDraining> = 0;

        throw r1;

     label10:
        return;

        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public final boolean canRun()
    {
        androidx.lifecycle.DispatchQueue r0;
        boolean $z0, $z1, $z2;

        r0 := @this: androidx.lifecycle.DispatchQueue;

        $z0 = r0.<androidx.lifecycle.DispatchQueue: boolean finished>;

        if $z0 != 0 goto label1;

        $z1 = r0.<androidx.lifecycle.DispatchQueue: boolean paused>;

        if $z1 != 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public final void dispatchAndEnqueue(kotlin.coroutines.CoroutineContext, java.lang.Runnable)
    {
        androidx.lifecycle.DispatchQueue r0;
        kotlin.coroutines.CoroutineContext r1;
        java.lang.Runnable r2, $r5;
        kotlinx.coroutines.MainCoroutineDispatcher $r3, $r4;
        boolean $z1, $z2;

        r0 := @this: androidx.lifecycle.DispatchQueue;

        r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        r2 := @parameter1: java.lang.Runnable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "context");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "runnable");

        $r4 = staticinvoke <kotlinx.coroutines.Dispatchers: kotlinx.coroutines.MainCoroutineDispatcher getMain()>();

        $r3 = virtualinvoke $r4.<kotlinx.coroutines.MainCoroutineDispatcher: kotlinx.coroutines.MainCoroutineDispatcher getImmediate()>();

        $z1 = virtualinvoke $r3.<kotlinx.coroutines.MainCoroutineDispatcher: boolean isDispatchNeeded(kotlin.coroutines.CoroutineContext)>(r1);

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r0.<androidx.lifecycle.DispatchQueue: boolean canRun()>();

        if $z2 == 0 goto label2;

     label1:
        $r5 = dynamicinvoke "run" <java.lang.Runnable (androidx.lifecycle.DispatchQueue,java.lang.Runnable)>(r0, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.lifecycle.DispatchQueue: void dispatchAndEnqueue$lambda$2$lambda$1(androidx.lifecycle.DispatchQueue,java.lang.Runnable)>, methodtype: void __METHODTYPE__());

        virtualinvoke $r3.<kotlinx.coroutines.MainCoroutineDispatcher: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>(r1, $r5);

        goto label3;

     label2:
        specialinvoke r0.<androidx.lifecycle.DispatchQueue: void enqueue(java.lang.Runnable)>(r2);

     label3:
        return;
    }

    private final void enqueue(java.lang.Runnable)
    {
        androidx.lifecycle.DispatchQueue r0;
        java.lang.Runnable r1;
        java.util.Queue $r2;
        boolean $z0;
        java.lang.IllegalStateException $r3;
        java.lang.String $r4, $r5;

        r0 := @this: androidx.lifecycle.DispatchQueue;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = r0.<androidx.lifecycle.DispatchQueue: java.util.Queue queue>;

        $z0 = interfaceinvoke $r2.<java.util.Queue: boolean offer(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r5 = "cannot enqueue any more runnables";

        $r3 = new java.lang.IllegalStateException;

        $r4 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label1:
        virtualinvoke r0.<androidx.lifecycle.DispatchQueue: void drainQueue()>();

        return;
    }

    private static final void dispatchAndEnqueue$lambda$2$lambda$1(androidx.lifecycle.DispatchQueue, java.lang.Runnable)
    {
        androidx.lifecycle.DispatchQueue r0;
        java.lang.Runnable $r1;

        r0 := @parameter0: androidx.lifecycle.DispatchQueue;

        $r1 := @parameter1: java.lang.Runnable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$runnable");

        specialinvoke r0.<androidx.lifecycle.DispatchQueue: void enqueue(java.lang.Runnable)>($r1);

        return;
    }

