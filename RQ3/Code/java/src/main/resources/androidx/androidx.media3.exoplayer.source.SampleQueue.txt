androidx.media3.exoplayer.source.SampleQueue
<androidx.media3.exoplayer.source.SampleQueue: int SAMPLE_CAPACITY_INCREMENT>
<androidx.media3.exoplayer.source.SampleQueue: java.lang.String TAG>
<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.source.SampleDataQueue sampleDataQueue>
<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder extrasHolder>
<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.source.SpannedData sharedSampleMetadata>
<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.drm.DrmSessionManager drmSessionManager>
<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher drmEventDispatcher>
<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.source.SampleQueue$UpstreamFormatChangedListener upstreamFormatChangeListener>
<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.common.Format downstreamFormat>
<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.drm.DrmSession currentDrmSession>
<androidx.media3.exoplayer.source.SampleQueue: int capacity>
<androidx.media3.exoplayer.source.SampleQueue: int[] sourceIds>
<androidx.media3.exoplayer.source.SampleQueue: long[] offsets>
<androidx.media3.exoplayer.source.SampleQueue: int[] sizes>
<androidx.media3.exoplayer.source.SampleQueue: int[] flags>
<androidx.media3.exoplayer.source.SampleQueue: long[] timesUs>
<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.extractor.TrackOutput$CryptoData[] cryptoDatas>
<androidx.media3.exoplayer.source.SampleQueue: int length>
<androidx.media3.exoplayer.source.SampleQueue: int absoluteFirstIndex>
<androidx.media3.exoplayer.source.SampleQueue: int relativeFirstIndex>
<androidx.media3.exoplayer.source.SampleQueue: int readPosition>
<androidx.media3.exoplayer.source.SampleQueue: long startTimeUs>
<androidx.media3.exoplayer.source.SampleQueue: long largestDiscardedTimestampUs>
<androidx.media3.exoplayer.source.SampleQueue: long largestQueuedTimestampUs>
<androidx.media3.exoplayer.source.SampleQueue: boolean isLastSampleQueued>
<androidx.media3.exoplayer.source.SampleQueue: boolean upstreamKeyframeRequired>
<androidx.media3.exoplayer.source.SampleQueue: boolean upstreamFormatRequired>
<androidx.media3.exoplayer.source.SampleQueue: boolean upstreamFormatAdjustmentRequired>
<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.common.Format unadjustedUpstreamFormat>
<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.common.Format upstreamFormat>
<androidx.media3.exoplayer.source.SampleQueue: int upstreamSourceId>
<androidx.media3.exoplayer.source.SampleQueue: boolean upstreamAllSamplesAreSyncSamples>
<androidx.media3.exoplayer.source.SampleQueue: boolean loggedUnexpectedNonSyncSample>
<androidx.media3.exoplayer.source.SampleQueue: long sampleOffsetUs>
<androidx.media3.exoplayer.source.SampleQueue: boolean pendingSplice>
    public static androidx.media3.exoplayer.source.SampleQueue createWithoutDrm(androidx.media3.exoplayer.upstream.Allocator)
    {
        androidx.media3.exoplayer.upstream.Allocator r0;
        androidx.media3.exoplayer.source.SampleQueue $r1;

        r0 := @parameter0: androidx.media3.exoplayer.upstream.Allocator;

        $r1 = new androidx.media3.exoplayer.source.SampleQueue;

        specialinvoke $r1.<androidx.media3.exoplayer.source.SampleQueue: void <init>(androidx.media3.exoplayer.upstream.Allocator,androidx.media3.exoplayer.drm.DrmSessionManager,androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher)>(r0, null, null);

        return $r1;
    }

    public static androidx.media3.exoplayer.source.SampleQueue createWithDrm(androidx.media3.exoplayer.upstream.Allocator, androidx.media3.exoplayer.drm.DrmSessionManager, androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher)
    {
        androidx.media3.exoplayer.upstream.Allocator r0;
        androidx.media3.exoplayer.drm.DrmSessionManager r1, $r5;
        androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher r2, $r7;
        androidx.media3.exoplayer.source.SampleQueue $r3;
        java.lang.Object $r4, $r6;

        r0 := @parameter0: androidx.media3.exoplayer.upstream.Allocator;

        r1 := @parameter1: androidx.media3.exoplayer.drm.DrmSessionManager;

        r2 := @parameter2: androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher;

        $r3 = new androidx.media3.exoplayer.source.SampleQueue;

        $r4 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r5 = (androidx.media3.exoplayer.drm.DrmSessionManager) $r4;

        $r6 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r7 = (androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher) $r6;

        specialinvoke $r3.<androidx.media3.exoplayer.source.SampleQueue: void <init>(androidx.media3.exoplayer.upstream.Allocator,androidx.media3.exoplayer.drm.DrmSessionManager,androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher)>(r0, $r5, $r7);

        return $r3;
    }

    public static androidx.media3.exoplayer.source.SampleQueue createWithDrm(androidx.media3.exoplayer.upstream.Allocator, android.os.Looper, androidx.media3.exoplayer.drm.DrmSessionManager, androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher)
    {
        androidx.media3.exoplayer.upstream.Allocator r0;
        android.os.Looper r1;
        androidx.media3.exoplayer.drm.DrmSessionManager r2, $r7;
        androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher r3, $r9;
        androidx.media3.exoplayer.analytics.PlayerId $r4;
        androidx.media3.exoplayer.source.SampleQueue $r5;
        java.lang.Object $r6, $r8;

        r0 := @parameter0: androidx.media3.exoplayer.upstream.Allocator;

        r1 := @parameter1: android.os.Looper;

        r2 := @parameter2: androidx.media3.exoplayer.drm.DrmSessionManager;

        r3 := @parameter3: androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher;

        $r4 = <androidx.media3.exoplayer.analytics.PlayerId: androidx.media3.exoplayer.analytics.PlayerId UNSET>;

        interfaceinvoke r2.<androidx.media3.exoplayer.drm.DrmSessionManager: void setPlayer(android.os.Looper,androidx.media3.exoplayer.analytics.PlayerId)>(r1, $r4);

        $r5 = new androidx.media3.exoplayer.source.SampleQueue;

        $r6 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r7 = (androidx.media3.exoplayer.drm.DrmSessionManager) $r6;

        $r8 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>(r3);

        $r9 = (androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher) $r8;

        specialinvoke $r5.<androidx.media3.exoplayer.source.SampleQueue: void <init>(androidx.media3.exoplayer.upstream.Allocator,androidx.media3.exoplayer.drm.DrmSessionManager,androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher)>(r0, $r7, $r9);

        return $r5;
    }

    protected void <init>(androidx.media3.exoplayer.upstream.Allocator, androidx.media3.exoplayer.drm.DrmSessionManager, androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher)
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        androidx.media3.exoplayer.upstream.Allocator r1;
        androidx.media3.exoplayer.drm.DrmSessionManager r2;
        androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher r3;
        androidx.media3.exoplayer.source.SampleDataQueue $r4;
        androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        int[] $r6, $r9, $r10;
        long[] $r7, $r8;
        androidx.media3.extractor.TrackOutput$CryptoData[] $r11;
        androidx.media3.exoplayer.source.SpannedData $r12;
        androidx.media3.common.util.Consumer $r13;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        r1 := @parameter0: androidx.media3.exoplayer.upstream.Allocator;

        r2 := @parameter1: androidx.media3.exoplayer.drm.DrmSessionManager;

        r3 := @parameter2: androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.drm.DrmSessionManager drmSessionManager> = r2;

        r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher drmEventDispatcher> = r3;

        $r4 = new androidx.media3.exoplayer.source.SampleDataQueue;

        specialinvoke $r4.<androidx.media3.exoplayer.source.SampleDataQueue: void <init>(androidx.media3.exoplayer.upstream.Allocator)>(r1);

        r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.source.SampleDataQueue sampleDataQueue> = $r4;

        $r5 = new androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder;

        specialinvoke $r5.<androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder: void <init>()>();

        r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder extrasHolder> = $r5;

        r0.<androidx.media3.exoplayer.source.SampleQueue: int capacity> = 1000;

        $i0 = r0.<androidx.media3.exoplayer.source.SampleQueue: int capacity>;

        $r6 = newarray (int)[$i0];

        r0.<androidx.media3.exoplayer.source.SampleQueue: int[] sourceIds> = $r6;

        $i1 = r0.<androidx.media3.exoplayer.source.SampleQueue: int capacity>;

        $r7 = newarray (long)[$i1];

        r0.<androidx.media3.exoplayer.source.SampleQueue: long[] offsets> = $r7;

        $i2 = r0.<androidx.media3.exoplayer.source.SampleQueue: int capacity>;

        $r8 = newarray (long)[$i2];

        r0.<androidx.media3.exoplayer.source.SampleQueue: long[] timesUs> = $r8;

        $i3 = r0.<androidx.media3.exoplayer.source.SampleQueue: int capacity>;

        $r9 = newarray (int)[$i3];

        r0.<androidx.media3.exoplayer.source.SampleQueue: int[] flags> = $r9;

        $i4 = r0.<androidx.media3.exoplayer.source.SampleQueue: int capacity>;

        $r10 = newarray (int)[$i4];

        r0.<androidx.media3.exoplayer.source.SampleQueue: int[] sizes> = $r10;

        $i5 = r0.<androidx.media3.exoplayer.source.SampleQueue: int capacity>;

        $r11 = newarray (androidx.media3.extractor.TrackOutput$CryptoData)[$i5];

        r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.extractor.TrackOutput$CryptoData[] cryptoDatas> = $r11;

        $r12 = new androidx.media3.exoplayer.source.SpannedData;

        $r13 = dynamicinvoke "accept" <androidx.media3.common.util.Consumer ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.exoplayer.source.SampleQueue: void lambda$new$0(androidx.media3.exoplayer.source.SampleQueue$SharedSampleMetadata)>, methodtype: void __METHODTYPE__(androidx.media3.exoplayer.source.SampleQueue$SharedSampleMetadata));

        specialinvoke $r12.<androidx.media3.exoplayer.source.SpannedData: void <init>(androidx.media3.common.util.Consumer)>($r13);

        r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.source.SpannedData sharedSampleMetadata> = $r12;

        r0.<androidx.media3.exoplayer.source.SampleQueue: long startTimeUs> = -9223372036854775808L;

        r0.<androidx.media3.exoplayer.source.SampleQueue: long largestDiscardedTimestampUs> = -9223372036854775808L;

        r0.<androidx.media3.exoplayer.source.SampleQueue: long largestQueuedTimestampUs> = -9223372036854775808L;

        r0.<androidx.media3.exoplayer.source.SampleQueue: boolean upstreamFormatRequired> = 1;

        r0.<androidx.media3.exoplayer.source.SampleQueue: boolean upstreamKeyframeRequired> = 1;

        return;
    }

    public void release()
    {
        androidx.media3.exoplayer.source.SampleQueue r0;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        virtualinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: void reset(boolean)>(1);

        specialinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: void releaseDrmSessionReferences()>();

        return;
    }

    public final void reset()
    {
        androidx.media3.exoplayer.source.SampleQueue r0;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        virtualinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: void reset(boolean)>(0);

        return;
    }

    public void reset(boolean)
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        boolean z0;
        androidx.media3.exoplayer.source.SampleDataQueue $r1;
        androidx.media3.exoplayer.source.SpannedData $r2;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        z0 := @parameter0: boolean;

        $r1 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.source.SampleDataQueue sampleDataQueue>;

        virtualinvoke $r1.<androidx.media3.exoplayer.source.SampleDataQueue: void reset()>();

        r0.<androidx.media3.exoplayer.source.SampleQueue: int length> = 0;

        r0.<androidx.media3.exoplayer.source.SampleQueue: int absoluteFirstIndex> = 0;

        r0.<androidx.media3.exoplayer.source.SampleQueue: int relativeFirstIndex> = 0;

        r0.<androidx.media3.exoplayer.source.SampleQueue: int readPosition> = 0;

        r0.<androidx.media3.exoplayer.source.SampleQueue: boolean upstreamKeyframeRequired> = 1;

        r0.<androidx.media3.exoplayer.source.SampleQueue: long startTimeUs> = -9223372036854775808L;

        r0.<androidx.media3.exoplayer.source.SampleQueue: long largestDiscardedTimestampUs> = -9223372036854775808L;

        r0.<androidx.media3.exoplayer.source.SampleQueue: long largestQueuedTimestampUs> = -9223372036854775808L;

        r0.<androidx.media3.exoplayer.source.SampleQueue: boolean isLastSampleQueued> = 0;

        $r2 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.source.SpannedData sharedSampleMetadata>;

        virtualinvoke $r2.<androidx.media3.exoplayer.source.SpannedData: void clear()>();

        if z0 == 0 goto label1;

        r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.common.Format unadjustedUpstreamFormat> = null;

        r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.common.Format upstreamFormat> = null;

        r0.<androidx.media3.exoplayer.source.SampleQueue: boolean upstreamFormatRequired> = 1;

     label1:
        return;
    }

    public final void setStartTimeUs(long)
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        long l0;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        l0 := @parameter0: long;

        r0.<androidx.media3.exoplayer.source.SampleQueue: long startTimeUs> = l0;

        return;
    }

    public final void sourceId(int)
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        int i0;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        i0 := @parameter0: int;

        r0.<androidx.media3.exoplayer.source.SampleQueue: int upstreamSourceId> = i0;

        return;
    }

    public final void splice()
    {
        androidx.media3.exoplayer.source.SampleQueue r0;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        r0.<androidx.media3.exoplayer.source.SampleQueue: boolean pendingSplice> = 1;

        return;
    }

    public final int getWriteIndex()
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        int $i0, $i1, $i2;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        $i1 = r0.<androidx.media3.exoplayer.source.SampleQueue: int absoluteFirstIndex>;

        $i0 = r0.<androidx.media3.exoplayer.source.SampleQueue: int length>;

        $i2 = $i1 + $i0;

        return $i2;
    }

    public final void discardUpstreamSamples(int)
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        int i0;
        androidx.media3.exoplayer.source.SampleDataQueue $r1;
        long $l1;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.source.SampleDataQueue sampleDataQueue>;

        $l1 = specialinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: long discardUpstreamSampleMetadata(int)>(i0);

        virtualinvoke $r1.<androidx.media3.exoplayer.source.SampleDataQueue: void discardUpstreamSampleBytes(long)>($l1);

        return;
    }

    public final void discardUpstreamFrom(long)
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        long l0, $l3;
        int i1, $i2, $i5, $i6;
        byte $b4;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        l0 := @parameter0: long;

        $i2 = r0.<androidx.media3.exoplayer.source.SampleQueue: int length>;

        if $i2 != 0 goto label1;

        return;

     label1:
        $l3 = virtualinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: long getLargestReadTimestampUs()>();

        $b4 = l0 cmp $l3;

        if $b4 <= 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean)>($z0);

        i1 = specialinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: int countUnreadSamplesBefore(long)>(l0);

        $i5 = r0.<androidx.media3.exoplayer.source.SampleQueue: int absoluteFirstIndex>;

        $i6 = $i5 + i1;

        virtualinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: void discardUpstreamSamples(int)>($i6);

        return;
    }

    public void preRelease()
    {
        androidx.media3.exoplayer.source.SampleQueue r0;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        virtualinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: void discardToEnd()>();

        specialinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: void releaseDrmSessionReferences()>();

        return;
    }

    public void maybeThrowError() throws java.io.IOException
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        androidx.media3.exoplayer.drm.DrmSession $r1, $r2, $r3;
        int $i0;
        androidx.media3.exoplayer.drm.DrmSession$DrmSessionException $r4, $r6;
        java.lang.Object $r5;
        java.lang.Throwable r7;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        $r1 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.drm.DrmSession currentDrmSession>;

        if $r1 == null goto label1;

        $r2 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.drm.DrmSession currentDrmSession>;

        $i0 = interfaceinvoke $r2.<androidx.media3.exoplayer.drm.DrmSession: int getState()>();

        if $i0 != 1 goto label1;

        $r3 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.drm.DrmSession currentDrmSession>;

        $r4 = interfaceinvoke $r3.<androidx.media3.exoplayer.drm.DrmSession: androidx.media3.exoplayer.drm.DrmSession$DrmSessionException getError()>();

        $r5 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r4);

        $r6 = (androidx.media3.exoplayer.drm.DrmSession$DrmSessionException) $r5;

        r7 = (java.lang.Throwable) $r6;

        throw r7;

     label1:
        return;
    }

    public final int getFirstIndex()
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        int $i0;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        $i0 = r0.<androidx.media3.exoplayer.source.SampleQueue: int absoluteFirstIndex>;

        return $i0;
    }

    public final int getReadIndex()
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        int $i0, $i1, $i2;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        $i1 = r0.<androidx.media3.exoplayer.source.SampleQueue: int absoluteFirstIndex>;

        $i0 = r0.<androidx.media3.exoplayer.source.SampleQueue: int readPosition>;

        $i2 = $i1 + $i0;

        return $i2;
    }

    public final synchronized int peekSourceId()
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        int i0, $i1, $i2;
        boolean $z0;
        int[] $r1;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        $i1 = r0.<androidx.media3.exoplayer.source.SampleQueue: int readPosition>;

        i0 = specialinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: int getRelativeIndex(int)>($i1);

        $z0 = specialinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: boolean hasNextSample()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<androidx.media3.exoplayer.source.SampleQueue: int[] sourceIds>;

        $i2 = $r1[i0];

        goto label2;

     label1:
        $i2 = r0.<androidx.media3.exoplayer.source.SampleQueue: int upstreamSourceId>;

     label2:
        return $i2;
    }

    public final synchronized androidx.media3.common.Format getUpstreamFormat()
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        boolean $z0;
        androidx.media3.common.Format $r1;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        $z0 = r0.<androidx.media3.exoplayer.source.SampleQueue: boolean upstreamFormatRequired>;

        if $z0 == 0 goto label1;

        $r1 = null;

        goto label2;

     label1:
        $r1 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.common.Format upstreamFormat>;

     label2:
        return $r1;
    }

    public final synchronized long getLargestQueuedTimestampUs()
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        long $l0;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        $l0 = r0.<androidx.media3.exoplayer.source.SampleQueue: long largestQueuedTimestampUs>;

        return $l0;
    }

    public final synchronized long getLargestReadTimestampUs()
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        int $i0;
        long $l1, $l2, $l3;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        $l1 = r0.<androidx.media3.exoplayer.source.SampleQueue: long largestDiscardedTimestampUs>;

        $i0 = r0.<androidx.media3.exoplayer.source.SampleQueue: int readPosition>;

        $l2 = specialinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: long getLargestTimestamp(int)>($i0);

        $l3 = staticinvoke <java.lang.Math: long max(long,long)>($l1, $l2);

        return $l3;
    }

    public final synchronized boolean isLastSampleQueued()
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        $z0 = r0.<androidx.media3.exoplayer.source.SampleQueue: boolean isLastSampleQueued>;

        return $z0;
    }

    public final synchronized long getFirstTimestampUs()
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        int $i0, $i1;
        long[] $r1;
        long $l2;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        $i0 = r0.<androidx.media3.exoplayer.source.SampleQueue: int length>;

        if $i0 != 0 goto label1;

        $l2 = -9223372036854775808L;

        goto label2;

     label1:
        $r1 = r0.<androidx.media3.exoplayer.source.SampleQueue: long[] timesUs>;

        $i1 = r0.<androidx.media3.exoplayer.source.SampleQueue: int relativeFirstIndex>;

        $l2 = $r1[$i1];

     label2:
        return $l2;
    }

    public synchronized boolean isReady(boolean)
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        boolean z0, $z1, $z2, $z3, $z4;
        androidx.media3.exoplayer.source.SpannedData $r1;
        int $i0, $i1, $i2;
        java.lang.Object $r2;
        androidx.media3.exoplayer.source.SampleQueue$SharedSampleMetadata $r3;
        androidx.media3.common.Format $r4, $r5, $r6, $r7, $r8;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        z0 := @parameter0: boolean;

        $z1 = specialinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: boolean hasNextSample()>();

        if $z1 != 0 goto label4;

        if z0 != 0 goto label1;

        $z3 = r0.<androidx.media3.exoplayer.source.SampleQueue: boolean isLastSampleQueued>;

        if $z3 != 0 goto label1;

        $r6 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.common.Format upstreamFormat>;

        if $r6 == null goto label2;

        $r8 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.common.Format upstreamFormat>;

        $r7 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.common.Format downstreamFormat>;

        if $r8 == $r7 goto label2;

     label1:
        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        return $z4;

     label4:
        $r1 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.source.SpannedData sharedSampleMetadata>;

        $i0 = virtualinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: int getReadIndex()>();

        $r2 = virtualinvoke $r1.<androidx.media3.exoplayer.source.SpannedData: java.lang.Object get(int)>($i0);

        $r3 = (androidx.media3.exoplayer.source.SampleQueue$SharedSampleMetadata) $r2;

        $r5 = $r3.<androidx.media3.exoplayer.source.SampleQueue$SharedSampleMetadata: androidx.media3.common.Format format>;

        $r4 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.common.Format downstreamFormat>;

        if $r5 == $r4 goto label5;

        return 1;

     label5:
        $i1 = r0.<androidx.media3.exoplayer.source.SampleQueue: int readPosition>;

        $i2 = specialinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: int getRelativeIndex(int)>($i1);

        $z2 = specialinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: boolean mayReadSample(int)>($i2);

        return $z2;
    }

    public int read(androidx.media3.exoplayer.FormatHolder, androidx.media3.decoder.DecoderInputBuffer, int, boolean)
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        androidx.media3.exoplayer.FormatHolder r1;
        androidx.media3.decoder.DecoderInputBuffer r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        boolean z0, z1, $z2, $z3, $z4;
        androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder $r3, $r4, $r6;
        androidx.media3.exoplayer.source.SampleDataQueue $r5, $r7;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        r1 := @parameter0: androidx.media3.exoplayer.FormatHolder;

        r2 := @parameter1: androidx.media3.decoder.DecoderInputBuffer;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        $i2 = i0 & 2;

        if $i2 == 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        $r3 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder extrasHolder>;

        i1 = specialinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: int peekSampleMetadata(androidx.media3.exoplayer.FormatHolder,androidx.media3.decoder.DecoderInputBuffer,boolean,boolean,androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder)>(r1, r2, $z3, z0, $r3);

        if i1 != -4 goto label7;

        $z2 = virtualinvoke r2.<androidx.media3.decoder.DecoderInputBuffer: boolean isEndOfStream()>();

        if $z2 != 0 goto label7;

        $i3 = i0 & 1;

        if $i3 == 0 goto label3;

        $z4 = 1;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        z1 = $z4;

        $i4 = i0 & 4;

        if $i4 != 0 goto label6;

        if z1 == 0 goto label5;

        $r7 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.source.SampleDataQueue sampleDataQueue>;

        $r6 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder extrasHolder>;

        virtualinvoke $r7.<androidx.media3.exoplayer.source.SampleDataQueue: void peekToBuffer(androidx.media3.decoder.DecoderInputBuffer,androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder)>(r2, $r6);

        goto label6;

     label5:
        $r5 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.source.SampleDataQueue sampleDataQueue>;

        $r4 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder extrasHolder>;

        virtualinvoke $r5.<androidx.media3.exoplayer.source.SampleDataQueue: void readToBuffer(androidx.media3.decoder.DecoderInputBuffer,androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder)>(r2, $r4);

     label6:
        if z1 != 0 goto label7;

        $i5 = r0.<androidx.media3.exoplayer.source.SampleQueue: int readPosition>;

        $i6 = $i5 + 1;

        r0.<androidx.media3.exoplayer.source.SampleQueue: int readPosition> = $i6;

     label7:
        return i1;
    }

    public final synchronized boolean seekTo(int)
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        i0 := @parameter0: int;

        specialinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: void rewind()>();

        $i1 = r0.<androidx.media3.exoplayer.source.SampleQueue: int absoluteFirstIndex>;

        if i0 < $i1 goto label1;

        $i3 = r0.<androidx.media3.exoplayer.source.SampleQueue: int absoluteFirstIndex>;

        $i2 = r0.<androidx.media3.exoplayer.source.SampleQueue: int length>;

        $i4 = $i3 + $i2;

        if i0 <= $i4 goto label2;

     label1:
        return 0;

     label2:
        r0.<androidx.media3.exoplayer.source.SampleQueue: long startTimeUs> = -9223372036854775808L;

        $i5 = r0.<androidx.media3.exoplayer.source.SampleQueue: int absoluteFirstIndex>;

        $i6 = i0 - $i5;

        r0.<androidx.media3.exoplayer.source.SampleQueue: int readPosition> = $i6;

        return 1;
    }

    public final synchronized boolean seekTo(long, boolean)
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        long l0, $l4, $l6;
        boolean z0, $z1;
        int i1, i2, $i3, $i8, $i9, $i10, $i11, $i12;
        long[] $r1;
        byte $b5, $b7;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        specialinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: void rewind()>();

        $i3 = r0.<androidx.media3.exoplayer.source.SampleQueue: int readPosition>;

        i1 = specialinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: int getRelativeIndex(int)>($i3);

        $z1 = specialinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: boolean hasNextSample()>();

        if $z1 == 0 goto label1;

        $r1 = r0.<androidx.media3.exoplayer.source.SampleQueue: long[] timesUs>;

        $l4 = $r1[i1];

        $b5 = l0 cmp $l4;

        if $b5 < 0 goto label1;

        $l6 = r0.<androidx.media3.exoplayer.source.SampleQueue: long largestQueuedTimestampUs>;

        $b7 = l0 cmp $l6;

        if $b7 <= 0 goto label2;

        if z0 != 0 goto label2;

     label1:
        return 0;

     label2:
        $i9 = r0.<androidx.media3.exoplayer.source.SampleQueue: int length>;

        $i8 = r0.<androidx.media3.exoplayer.source.SampleQueue: int readPosition>;

        $i10 = $i9 - $i8;

        i2 = specialinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: int findSampleBefore(int,int,long,boolean)>(i1, $i10, l0, 1);

        if i2 != -1 goto label3;

        return 0;

     label3:
        r0.<androidx.media3.exoplayer.source.SampleQueue: long startTimeUs> = l0;

        $i11 = r0.<androidx.media3.exoplayer.source.SampleQueue: int readPosition>;

        $i12 = $i11 + i2;

        r0.<androidx.media3.exoplayer.source.SampleQueue: int readPosition> = $i12;

        return 1;
    }

    public final synchronized int getSkipCount(long, boolean)
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        long l0, $l4, $l6;
        boolean z0, $z1;
        int i1, i2, $i3, $i8, $i9, $i10, $i11, $i12, $i13;
        long[] $r1;
        byte $b5, $b7;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        $i3 = r0.<androidx.media3.exoplayer.source.SampleQueue: int readPosition>;

        i1 = specialinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: int getRelativeIndex(int)>($i3);

        $z1 = specialinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: boolean hasNextSample()>();

        if $z1 == 0 goto label1;

        $r1 = r0.<androidx.media3.exoplayer.source.SampleQueue: long[] timesUs>;

        $l4 = $r1[i1];

        $b5 = l0 cmp $l4;

        if $b5 >= 0 goto label2;

     label1:
        return 0;

     label2:
        $l6 = r0.<androidx.media3.exoplayer.source.SampleQueue: long largestQueuedTimestampUs>;

        $b7 = l0 cmp $l6;

        if $b7 <= 0 goto label3;

        if z0 == 0 goto label3;

        $i12 = r0.<androidx.media3.exoplayer.source.SampleQueue: int length>;

        $i11 = r0.<androidx.media3.exoplayer.source.SampleQueue: int readPosition>;

        $i13 = $i12 - $i11;

        return $i13;

     label3:
        $i9 = r0.<androidx.media3.exoplayer.source.SampleQueue: int length>;

        $i8 = r0.<androidx.media3.exoplayer.source.SampleQueue: int readPosition>;

        $i10 = $i9 - $i8;

        i2 = specialinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: int findSampleBefore(int,int,long,boolean)>(i1, $i10, l0, 1);

        if i2 != -1 goto label4;

        return 0;

     label4:
        return i2;
    }

    public final synchronized void skip(int)
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i1 = r0.<androidx.media3.exoplayer.source.SampleQueue: int readPosition>;

        $i3 = $i1 + i0;

        $i2 = r0.<androidx.media3.exoplayer.source.SampleQueue: int length>;

        if $i3 > $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean)>($z0);

        $i4 = r0.<androidx.media3.exoplayer.source.SampleQueue: int readPosition>;

        $i5 = $i4 + i0;

        r0.<androidx.media3.exoplayer.source.SampleQueue: int readPosition> = $i5;

        return;
    }

    public final void discardTo(long, boolean, boolean)
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        long l0, $l1;
        boolean z0, z1;
        androidx.media3.exoplayer.source.SampleDataQueue $r1;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $r1 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.source.SampleDataQueue sampleDataQueue>;

        $l1 = specialinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: long discardSampleMetadataTo(long,boolean,boolean)>(l0, z0, z1);

        virtualinvoke $r1.<androidx.media3.exoplayer.source.SampleDataQueue: void discardDownstreamTo(long)>($l1);

        return;
    }

    public final void discardToRead()
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        androidx.media3.exoplayer.source.SampleDataQueue $r1;
        long $l0;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        $r1 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.source.SampleDataQueue sampleDataQueue>;

        $l0 = virtualinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: long discardSampleMetadataToRead()>();

        virtualinvoke $r1.<androidx.media3.exoplayer.source.SampleDataQueue: void discardDownstreamTo(long)>($l0);

        return;
    }

    public final void discardToEnd()
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        androidx.media3.exoplayer.source.SampleDataQueue $r1;
        long $l0;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        $r1 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.source.SampleDataQueue sampleDataQueue>;

        $l0 = specialinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: long discardSampleMetadataToEnd()>();

        virtualinvoke $r1.<androidx.media3.exoplayer.source.SampleDataQueue: void discardDownstreamTo(long)>($l0);

        return;
    }

    public final void setSampleOffsetUs(long)
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        long l0, $l1;
        byte $b2;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        l0 := @parameter0: long;

        $l1 = r0.<androidx.media3.exoplayer.source.SampleQueue: long sampleOffsetUs>;

        $b2 = $l1 cmp l0;

        if $b2 == 0 goto label1;

        r0.<androidx.media3.exoplayer.source.SampleQueue: long sampleOffsetUs> = l0;

        virtualinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: void invalidateUpstreamFormatAdjustment()>();

     label1:
        return;
    }

    public final void setUpstreamFormatChangeListener(androidx.media3.exoplayer.source.SampleQueue$UpstreamFormatChangedListener)
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        androidx.media3.exoplayer.source.SampleQueue$UpstreamFormatChangedListener r1;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        r1 := @parameter0: androidx.media3.exoplayer.source.SampleQueue$UpstreamFormatChangedListener;

        r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.source.SampleQueue$UpstreamFormatChangedListener upstreamFormatChangeListener> = r1;

        return;
    }

    public final void format(androidx.media3.common.Format)
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        androidx.media3.common.Format r1, r2;
        boolean z0;
        androidx.media3.exoplayer.source.SampleQueue$UpstreamFormatChangedListener $r3, $r4;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        r1 := @parameter0: androidx.media3.common.Format;

        r2 = virtualinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.common.Format getAdjustedUpstreamFormat(androidx.media3.common.Format)>(r1);

        r0.<androidx.media3.exoplayer.source.SampleQueue: boolean upstreamFormatAdjustmentRequired> = 0;

        r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.common.Format unadjustedUpstreamFormat> = r1;

        z0 = specialinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: boolean setUpstreamFormat(androidx.media3.common.Format)>(r2);

        $r3 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.source.SampleQueue$UpstreamFormatChangedListener upstreamFormatChangeListener>;

        if $r3 == null goto label1;

        if z0 == 0 goto label1;

        $r4 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.source.SampleQueue$UpstreamFormatChangedListener upstreamFormatChangeListener>;

        interfaceinvoke $r4.<androidx.media3.exoplayer.source.SampleQueue$UpstreamFormatChangedListener: void onUpstreamFormatChanged(androidx.media3.common.Format)>(r2);

     label1:
        return;
    }

    public final int sampleData(androidx.media3.common.DataReader, int, boolean, int) throws java.io.IOException
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        androidx.media3.common.DataReader r1;
        int i0, i1, $i2;
        boolean z0;
        androidx.media3.exoplayer.source.SampleDataQueue $r2;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        r1 := @parameter0: androidx.media3.common.DataReader;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        i1 := @parameter3: int;

        $r2 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.source.SampleDataQueue sampleDataQueue>;

        $i2 = virtualinvoke $r2.<androidx.media3.exoplayer.source.SampleDataQueue: int sampleData(androidx.media3.common.DataReader,int,boolean)>(r1, i0, z0);

        return $i2;
    }

    public final void sampleData(androidx.media3.common.util.ParsableByteArray, int, int)
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        androidx.media3.common.util.ParsableByteArray r1;
        int i0, i1;
        androidx.media3.exoplayer.source.SampleDataQueue $r2;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        r1 := @parameter0: androidx.media3.common.util.ParsableByteArray;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.source.SampleDataQueue sampleDataQueue>;

        virtualinvoke $r2.<androidx.media3.exoplayer.source.SampleDataQueue: void sampleData(androidx.media3.common.util.ParsableByteArray,int)>(r1, i0);

        return;
    }

    public void sampleMetadata(long, int, int, int, androidx.media3.extractor.TrackOutput$CryptoData)
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        int i0, i1, $i3, $i11, i13;
        androidx.media3.extractor.TrackOutput$CryptoData r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        long l2, $l4, $l5, $l6, $l7, $l8, $l9, l12, l14;
        androidx.media3.exoplayer.source.SampleDataQueue $r2;
        byte $b10;
        java.lang.StringBuilder $r3, $r4, $r6;
        androidx.media3.common.Format $r5, $r8, $r10;
        java.lang.String $r7;
        java.lang.Object $r9;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        l12 := @parameter0: long;

        i13 := @parameter1: int;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r1 := @parameter4: androidx.media3.extractor.TrackOutput$CryptoData;

        $z1 = r0.<androidx.media3.exoplayer.source.SampleQueue: boolean upstreamFormatAdjustmentRequired>;

        if $z1 == 0 goto label01;

        $r8 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.common.Format unadjustedUpstreamFormat>;

        $r9 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkStateNotNull(java.lang.Object)>($r8);

        $r10 = (androidx.media3.common.Format) $r9;

        virtualinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: void format(androidx.media3.common.Format)>($r10);

     label01:
        $i3 = i13 & 1;

        if $i3 == 0 goto label02;

        $z6 = 1;

        goto label03;

     label02:
        $z6 = 0;

     label03:
        z0 = $z6;

        $z2 = r0.<androidx.media3.exoplayer.source.SampleQueue: boolean upstreamKeyframeRequired>;

        if $z2 == 0 goto label05;

        if z0 != 0 goto label04;

        return;

     label04:
        r0.<androidx.media3.exoplayer.source.SampleQueue: boolean upstreamKeyframeRequired> = 0;

     label05:
        $l4 = r0.<androidx.media3.exoplayer.source.SampleQueue: long sampleOffsetUs>;

        l14 = l12 + $l4;

        $z3 = r0.<androidx.media3.exoplayer.source.SampleQueue: boolean upstreamAllSamplesAreSyncSamples>;

        if $z3 == 0 goto label08;

        $l9 = r0.<androidx.media3.exoplayer.source.SampleQueue: long startTimeUs>;

        $b10 = l14 cmp $l9;

        if $b10 >= 0 goto label06;

        return;

     label06:
        $i11 = i13 & 1;

        if $i11 != 0 goto label08;

        $z5 = r0.<androidx.media3.exoplayer.source.SampleQueue: boolean loggedUnexpectedNonSyncSample>;

        if $z5 != 0 goto label07;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Overriding unexpected non-sync sample for format: ");

        $r5 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.common.Format upstreamFormat>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.media3.common.util.Log: void w(java.lang.String,java.lang.String)>("SampleQueue", $r7);

        r0.<androidx.media3.exoplayer.source.SampleQueue: boolean loggedUnexpectedNonSyncSample> = 1;

     label07:
        i13 = i13 | 1;

     label08:
        $z7 = r0.<androidx.media3.exoplayer.source.SampleQueue: boolean pendingSplice>;

        if $z7 == 0 goto label11;

        if z0 == 0 goto label09;

        $z4 = specialinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: boolean attemptSplice(long)>(l14);

        if $z4 != 0 goto label10;

     label09:
        return;

     label10:
        r0.<androidx.media3.exoplayer.source.SampleQueue: boolean pendingSplice> = 0;

     label11:
        $r2 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.source.SampleDataQueue sampleDataQueue>;

        $l5 = virtualinvoke $r2.<androidx.media3.exoplayer.source.SampleDataQueue: long getTotalBytesWritten()>();

        $l6 = (long) i0;

        $l8 = $l5 - $l6;

        $l7 = (long) i1;

        l2 = $l8 - $l7;

        specialinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: void commitSample(long,int,long,int,androidx.media3.extractor.TrackOutput$CryptoData)>(l14, i13, l2, i0, r1);

        return;
    }

    protected final void invalidateUpstreamFormatAdjustment()
    {
        androidx.media3.exoplayer.source.SampleQueue r0;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        r0.<androidx.media3.exoplayer.source.SampleQueue: boolean upstreamFormatAdjustmentRequired> = 1;

        return;
    }

    protected androidx.media3.common.Format getAdjustedUpstreamFormat(androidx.media3.common.Format)
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        long $l0, $l2, $l4, $l5, $l6;
        byte $b1, $b3;
        androidx.media3.common.Format$Builder $r1, $r2;
        androidx.media3.common.Format r3;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        r3 := @parameter0: androidx.media3.common.Format;

        $l0 = r0.<androidx.media3.exoplayer.source.SampleQueue: long sampleOffsetUs>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        $l2 = r3.<androidx.media3.common.Format: long subsampleOffsetUs>;

        $b3 = $l2 cmp 9223372036854775807L;

        if $b3 == 0 goto label1;

        $r1 = virtualinvoke r3.<androidx.media3.common.Format: androidx.media3.common.Format$Builder buildUpon()>();

        $l5 = r3.<androidx.media3.common.Format: long subsampleOffsetUs>;

        $l4 = r0.<androidx.media3.exoplayer.source.SampleQueue: long sampleOffsetUs>;

        $l6 = $l5 + $l4;

        $r2 = virtualinvoke $r1.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setSubsampleOffsetUs(long)>($l6);

        r3 = virtualinvoke $r2.<androidx.media3.common.Format$Builder: androidx.media3.common.Format build()>();

     label1:
        return r3;
    }

    private synchronized void rewind()
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        androidx.media3.exoplayer.source.SampleDataQueue $r1;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        r0.<androidx.media3.exoplayer.source.SampleQueue: int readPosition> = 0;

        $r1 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.source.SampleDataQueue sampleDataQueue>;

        virtualinvoke $r1.<androidx.media3.exoplayer.source.SampleDataQueue: void rewind()>();

        return;
    }

    private synchronized int peekSampleMetadata(androidx.media3.exoplayer.FormatHolder, androidx.media3.decoder.DecoderInputBuffer, boolean, boolean, androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder)
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        androidx.media3.exoplayer.FormatHolder r1;
        androidx.media3.decoder.DecoderInputBuffer r2;
        boolean z0, z1, $z2, $z3, $z4;
        androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder r3;
        androidx.media3.common.Format r4, $r8, $r15, $r16, $r18, $r19, $r20;
        int i0, $i1, $i2, $i3, $i8;
        androidx.media3.exoplayer.source.SpannedData $r5;
        java.lang.Object $r6, $r17;
        androidx.media3.exoplayer.source.SampleQueue$SharedSampleMetadata $r7;
        int[] $r9, $r11;
        long[] $r10, $r12;
        long $l4, $l5, $l6, $l9;
        byte $b7;
        androidx.media3.extractor.TrackOutput$CryptoData[] $r13;
        androidx.media3.extractor.TrackOutput$CryptoData $r14;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        r1 := @parameter0: androidx.media3.exoplayer.FormatHolder;

        r2 := @parameter1: androidx.media3.decoder.DecoderInputBuffer;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        r3 := @parameter4: androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder;

        r2.<androidx.media3.decoder.DecoderInputBuffer: boolean waitingForKeys> = 0;

        $z2 = specialinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: boolean hasNextSample()>();

        if $z2 != 0 goto label5;

        if z1 != 0 goto label1;

        $z4 = r0.<androidx.media3.exoplayer.source.SampleQueue: boolean isLastSampleQueued>;

        if $z4 == 0 goto label2;

     label1:
        virtualinvoke r2.<androidx.media3.decoder.DecoderInputBuffer: void setFlags(int)>(4);

        return -4;

     label2:
        $r15 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.common.Format upstreamFormat>;

        if $r15 == null goto label4;

        if z0 != 0 goto label3;

        $r20 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.common.Format upstreamFormat>;

        $r19 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.common.Format downstreamFormat>;

        if $r20 == $r19 goto label4;

     label3:
        $r16 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.common.Format upstreamFormat>;

        $r17 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r16);

        $r18 = (androidx.media3.common.Format) $r17;

        specialinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: void onFormatResult(androidx.media3.common.Format,androidx.media3.exoplayer.FormatHolder)>($r18, r1);

        return -5;

     label4:
        return -3;

     label5:
        $r5 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.source.SpannedData sharedSampleMetadata>;

        $i1 = virtualinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: int getReadIndex()>();

        $r6 = virtualinvoke $r5.<androidx.media3.exoplayer.source.SpannedData: java.lang.Object get(int)>($i1);

        $r7 = (androidx.media3.exoplayer.source.SampleQueue$SharedSampleMetadata) $r6;

        r4 = $r7.<androidx.media3.exoplayer.source.SampleQueue$SharedSampleMetadata: androidx.media3.common.Format format>;

        if z0 != 0 goto label6;

        $r8 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.common.Format downstreamFormat>;

        if r4 == $r8 goto label7;

     label6:
        specialinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: void onFormatResult(androidx.media3.common.Format,androidx.media3.exoplayer.FormatHolder)>(r4, r1);

        return -5;

     label7:
        $i2 = r0.<androidx.media3.exoplayer.source.SampleQueue: int readPosition>;

        i0 = specialinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: int getRelativeIndex(int)>($i2);

        $z3 = specialinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: boolean mayReadSample(int)>(i0);

        if $z3 != 0 goto label8;

        r2.<androidx.media3.decoder.DecoderInputBuffer: boolean waitingForKeys> = 1;

        return -3;

     label8:
        $r9 = r0.<androidx.media3.exoplayer.source.SampleQueue: int[] flags>;

        $i3 = $r9[i0];

        virtualinvoke r2.<androidx.media3.decoder.DecoderInputBuffer: void setFlags(int)>($i3);

        $r10 = r0.<androidx.media3.exoplayer.source.SampleQueue: long[] timesUs>;

        $l4 = $r10[i0];

        r2.<androidx.media3.decoder.DecoderInputBuffer: long timeUs> = $l4;

        $l6 = r2.<androidx.media3.decoder.DecoderInputBuffer: long timeUs>;

        $l5 = r0.<androidx.media3.exoplayer.source.SampleQueue: long startTimeUs>;

        $b7 = $l6 cmp $l5;

        if $b7 >= 0 goto label9;

        virtualinvoke r2.<androidx.media3.decoder.DecoderInputBuffer: void addFlag(int)>(-2147483648);

     label9:
        $r11 = r0.<androidx.media3.exoplayer.source.SampleQueue: int[] sizes>;

        $i8 = $r11[i0];

        r3.<androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder: int size> = $i8;

        $r12 = r0.<androidx.media3.exoplayer.source.SampleQueue: long[] offsets>;

        $l9 = $r12[i0];

        r3.<androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder: long offset> = $l9;

        $r13 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.extractor.TrackOutput$CryptoData[] cryptoDatas>;

        $r14 = $r13[i0];

        r3.<androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder: androidx.media3.extractor.TrackOutput$CryptoData cryptoData> = $r14;

        return -4;
    }

    private synchronized boolean setUpstreamFormat(androidx.media3.common.Format)
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        androidx.media3.common.Format r1, $r2, $r7, $r11, $r12, $r14;
        boolean $z0, $z1, $z2, $z3;
        androidx.media3.exoplayer.source.SpannedData $r3, $r4, $r8;
        java.lang.Object $r5, $r9;
        androidx.media3.exoplayer.source.SampleQueue$SharedSampleMetadata $r6, $r10;
        java.lang.String $r13, $r15;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        r1 := @parameter0: androidx.media3.common.Format;

        r0.<androidx.media3.exoplayer.source.SampleQueue: boolean upstreamFormatRequired> = 0;

        $r2 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.common.Format upstreamFormat>;

        $z0 = staticinvoke <androidx.media3.common.util.Util: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r2);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r3 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.source.SpannedData sharedSampleMetadata>;

        $z1 = virtualinvoke $r3.<androidx.media3.exoplayer.source.SpannedData: boolean isEmpty()>();

        if $z1 != 0 goto label2;

        $r4 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.source.SpannedData sharedSampleMetadata>;

        $r5 = virtualinvoke $r4.<androidx.media3.exoplayer.source.SpannedData: java.lang.Object getEndValue()>();

        $r6 = (androidx.media3.exoplayer.source.SampleQueue$SharedSampleMetadata) $r5;

        $r7 = $r6.<androidx.media3.exoplayer.source.SampleQueue$SharedSampleMetadata: androidx.media3.common.Format format>;

        $z2 = virtualinvoke $r7.<androidx.media3.common.Format: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label2;

        $r8 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.source.SpannedData sharedSampleMetadata>;

        $r9 = virtualinvoke $r8.<androidx.media3.exoplayer.source.SpannedData: java.lang.Object getEndValue()>();

        $r10 = (androidx.media3.exoplayer.source.SampleQueue$SharedSampleMetadata) $r9;

        $r11 = $r10.<androidx.media3.exoplayer.source.SampleQueue$SharedSampleMetadata: androidx.media3.common.Format format>;

        r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.common.Format upstreamFormat> = $r11;

        goto label3;

     label2:
        r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.common.Format upstreamFormat> = r1;

     label3:
        $r12 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.common.Format upstreamFormat>;

        $r13 = $r12.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        $r14 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.common.Format upstreamFormat>;

        $r15 = $r14.<androidx.media3.common.Format: java.lang.String codecs>;

        $z3 = staticinvoke <androidx.media3.common.MimeTypes: boolean allSamplesAreSyncSamples(java.lang.String,java.lang.String)>($r13, $r15);

        r0.<androidx.media3.exoplayer.source.SampleQueue: boolean upstreamAllSamplesAreSyncSamples> = $z3;

        r0.<androidx.media3.exoplayer.source.SampleQueue: boolean loggedUnexpectedNonSyncSample> = 0;

        return 1;
    }

    private synchronized long discardSampleMetadataTo(long, boolean, boolean)
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        long l0, $l5, $l7;
        boolean z0, z1;
        int i1, i2, $i3, $i4, $i8, $i9, $i10, $i11, $i12;
        long[] $r1;
        byte $b6;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $i3 = r0.<androidx.media3.exoplayer.source.SampleQueue: int length>;

        if $i3 == 0 goto label1;

        $r1 = r0.<androidx.media3.exoplayer.source.SampleQueue: long[] timesUs>;

        $i4 = r0.<androidx.media3.exoplayer.source.SampleQueue: int relativeFirstIndex>;

        $l5 = $r1[$i4];

        $b6 = l0 cmp $l5;

        if $b6 >= 0 goto label2;

     label1:
        return -1L;

     label2:
        if z1 == 0 goto label3;

        $i9 = r0.<androidx.media3.exoplayer.source.SampleQueue: int readPosition>;

        $i8 = r0.<androidx.media3.exoplayer.source.SampleQueue: int length>;

        if $i9 == $i8 goto label3;

        $i10 = r0.<androidx.media3.exoplayer.source.SampleQueue: int readPosition>;

        $i11 = $i10 + 1;

        goto label4;

     label3:
        $i11 = r0.<androidx.media3.exoplayer.source.SampleQueue: int length>;

     label4:
        i1 = $i11;

        $i12 = r0.<androidx.media3.exoplayer.source.SampleQueue: int relativeFirstIndex>;

        i2 = specialinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: int findSampleBefore(int,int,long,boolean)>($i12, i1, l0, z0);

        if i2 != -1 goto label5;

        return -1L;

     label5:
        $l7 = specialinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: long discardSamples(int)>(i2);

        return $l7;
    }

    public synchronized long discardSampleMetadataToRead()
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        int $i0, $i1;
        long $l2;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        $i0 = r0.<androidx.media3.exoplayer.source.SampleQueue: int readPosition>;

        if $i0 != 0 goto label1;

        return -1L;

     label1:
        $i1 = r0.<androidx.media3.exoplayer.source.SampleQueue: int readPosition>;

        $l2 = specialinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: long discardSamples(int)>($i1);

        return $l2;
    }

    private synchronized long discardSampleMetadataToEnd()
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        int $i0, $i1;
        long $l2;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        $i0 = r0.<androidx.media3.exoplayer.source.SampleQueue: int length>;

        if $i0 != 0 goto label1;

        return -1L;

     label1:
        $i1 = r0.<androidx.media3.exoplayer.source.SampleQueue: int length>;

        $l2 = specialinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: long discardSamples(int)>($i1);

        return $l2;
    }

    private void releaseDrmSessionReferences()
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        androidx.media3.exoplayer.drm.DrmSession $r1, $r3;
        androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher $r2;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        $r1 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.drm.DrmSession currentDrmSession>;

        if $r1 == null goto label1;

        $r3 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.drm.DrmSession currentDrmSession>;

        $r2 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher drmEventDispatcher>;

        interfaceinvoke $r3.<androidx.media3.exoplayer.drm.DrmSession: void release(androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher)>($r2);

        r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.drm.DrmSession currentDrmSession> = null;

        r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.common.Format downstreamFormat> = null;

     label1:
        return;
    }

    private synchronized void commitSample(long, int, long, int, androidx.media3.extractor.TrackOutput$CryptoData)
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        long l0, l2, $l7, $l8, $l24, $l25, $l26;
        int i1, i3, i4, i5, $i6, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, i28, $i29, i30, $i31, $i32, $i33, $i34, i35;
        androidx.media3.extractor.TrackOutput$CryptoData r1;
        int[] r2, r5, r6, $r10, $r11, $r13, $r23, $r24, $r26, $r29, $r30, $r32, $r43;
        long[] r3, r4, $r8, $r9, $r21, $r22, $r27, $r28, $r42;
        androidx.media3.extractor.TrackOutput$CryptoData[] r7, $r12, $r25, $r31;
        androidx.media3.exoplayer.source.SpannedData $r14, $r16, $r36;
        boolean $z0, $z1, $z2, $z3;
        androidx.media3.exoplayer.drm.DrmSessionManager $r15, $r35;
        androidx.media3.exoplayer.source.SampleQueue$SharedSampleMetadata $r17, $r38;
        androidx.media3.common.Format $r18, $r20, $r33, $r39, $r40;
        java.lang.Object $r19, $r37;
        androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher $r34;
        byte $b27;
        androidx.media3.exoplayer.drm.DrmSessionManager$DrmSessionReference $r44, r45;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        l2 := @parameter2: long;

        i3 := @parameter3: int;

        r1 := @parameter4: androidx.media3.extractor.TrackOutput$CryptoData;

        $i6 = r0.<androidx.media3.exoplayer.source.SampleQueue: int length>;

        if $i6 <= 0 goto label03;

        $i21 = r0.<androidx.media3.exoplayer.source.SampleQueue: int length>;

        $i22 = $i21 - 1;

        i28 = specialinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: int getRelativeIndex(int)>($i22);

        $r42 = r0.<androidx.media3.exoplayer.source.SampleQueue: long[] offsets>;

        $l25 = $r42[i28];

        $r43 = r0.<androidx.media3.exoplayer.source.SampleQueue: int[] sizes>;

        $i23 = $r43[i28];

        $l24 = (long) $i23;

        $l26 = $l25 + $l24;

        $b27 = $l26 cmp l2;

        if $b27 > 0 goto label01;

        $z2 = 1;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean)>($z2);

     label03:
        $i29 = i1 & 536870912;

        if $i29 == 0 goto label04;

        $z3 = 1;

        goto label05;

     label04:
        $z3 = 0;

     label05:
        r0.<androidx.media3.exoplayer.source.SampleQueue: boolean isLastSampleQueued> = $z3;

        $l7 = r0.<androidx.media3.exoplayer.source.SampleQueue: long largestQueuedTimestampUs>;

        $l8 = staticinvoke <java.lang.Math: long max(long,long)>($l7, l0);

        r0.<androidx.media3.exoplayer.source.SampleQueue: long largestQueuedTimestampUs> = $l8;

        $i9 = r0.<androidx.media3.exoplayer.source.SampleQueue: int length>;

        i30 = specialinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: int getRelativeIndex(int)>($i9);

        $r8 = r0.<androidx.media3.exoplayer.source.SampleQueue: long[] timesUs>;

        $r8[i30] = l0;

        $r9 = r0.<androidx.media3.exoplayer.source.SampleQueue: long[] offsets>;

        $r9[i30] = l2;

        $r10 = r0.<androidx.media3.exoplayer.source.SampleQueue: int[] sizes>;

        $r10[i30] = i3;

        $r11 = r0.<androidx.media3.exoplayer.source.SampleQueue: int[] flags>;

        $r11[i30] = i1;

        $r12 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.extractor.TrackOutput$CryptoData[] cryptoDatas>;

        $r12[i30] = r1;

        $r13 = r0.<androidx.media3.exoplayer.source.SampleQueue: int[] sourceIds>;

        $i10 = r0.<androidx.media3.exoplayer.source.SampleQueue: int upstreamSourceId>;

        $r13[i30] = $i10;

        $r14 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.source.SpannedData sharedSampleMetadata>;

        $z0 = virtualinvoke $r14.<androidx.media3.exoplayer.source.SpannedData: boolean isEmpty()>();

        if $z0 != 0 goto label06;

        $r36 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.source.SpannedData sharedSampleMetadata>;

        $r37 = virtualinvoke $r36.<androidx.media3.exoplayer.source.SpannedData: java.lang.Object getEndValue()>();

        $r38 = (androidx.media3.exoplayer.source.SampleQueue$SharedSampleMetadata) $r37;

        $r40 = $r38.<androidx.media3.exoplayer.source.SampleQueue$SharedSampleMetadata: androidx.media3.common.Format format>;

        $r39 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.common.Format upstreamFormat>;

        $z1 = virtualinvoke $r40.<androidx.media3.common.Format: boolean equals(java.lang.Object)>($r39);

        if $z1 != 0 goto label09;

     label06:
        $r15 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.drm.DrmSessionManager drmSessionManager>;

        if $r15 == null goto label07;

        $r35 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.drm.DrmSessionManager drmSessionManager>;

        $r34 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher drmEventDispatcher>;

        $r33 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.common.Format upstreamFormat>;

        $r44 = interfaceinvoke $r35.<androidx.media3.exoplayer.drm.DrmSessionManager: androidx.media3.exoplayer.drm.DrmSessionManager$DrmSessionReference preacquireSession(androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher,androidx.media3.common.Format)>($r34, $r33);

        goto label08;

     label07:
        $r44 = <androidx.media3.exoplayer.drm.DrmSessionManager$DrmSessionReference: androidx.media3.exoplayer.drm.DrmSessionManager$DrmSessionReference EMPTY>;

     label08:
        r45 = $r44;

        $r16 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.source.SpannedData sharedSampleMetadata>;

        $i11 = virtualinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: int getWriteIndex()>();

        $r17 = new androidx.media3.exoplayer.source.SampleQueue$SharedSampleMetadata;

        $r18 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.common.Format upstreamFormat>;

        $r19 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r18);

        $r20 = (androidx.media3.common.Format) $r19;

        specialinvoke $r17.<androidx.media3.exoplayer.source.SampleQueue$SharedSampleMetadata: void <init>(androidx.media3.common.Format,androidx.media3.exoplayer.drm.DrmSessionManager$DrmSessionReference,androidx.media3.exoplayer.source.SampleQueue$1)>($r20, r45, null);

        virtualinvoke $r16.<androidx.media3.exoplayer.source.SpannedData: void appendSpan(int,java.lang.Object)>($i11, $r17);

     label09:
        $i31 = r0.<androidx.media3.exoplayer.source.SampleQueue: int length>;

        $i32 = $i31 + 1;

        r0.<androidx.media3.exoplayer.source.SampleQueue: int length> = $i32;

        $i33 = r0.<androidx.media3.exoplayer.source.SampleQueue: int length>;

        $i34 = r0.<androidx.media3.exoplayer.source.SampleQueue: int capacity>;

        if $i33 != $i34 goto label10;

        $i12 = r0.<androidx.media3.exoplayer.source.SampleQueue: int capacity>;

        i35 = $i12 + 1000;

        r2 = newarray (int)[i35];

        r3 = newarray (long)[i35];

        r4 = newarray (long)[i35];

        r5 = newarray (int)[i35];

        r6 = newarray (int)[i35];

        r7 = newarray (androidx.media3.extractor.TrackOutput$CryptoData)[i35];

        $i14 = r0.<androidx.media3.exoplayer.source.SampleQueue: int capacity>;

        $i13 = r0.<androidx.media3.exoplayer.source.SampleQueue: int relativeFirstIndex>;

        i4 = $i14 - $i13;

        $r21 = r0.<androidx.media3.exoplayer.source.SampleQueue: long[] offsets>;

        $i15 = r0.<androidx.media3.exoplayer.source.SampleQueue: int relativeFirstIndex>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r21, $i15, r3, 0, i4);

        $r22 = r0.<androidx.media3.exoplayer.source.SampleQueue: long[] timesUs>;

        $i16 = r0.<androidx.media3.exoplayer.source.SampleQueue: int relativeFirstIndex>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r22, $i16, r4, 0, i4);

        $r23 = r0.<androidx.media3.exoplayer.source.SampleQueue: int[] flags>;

        $i17 = r0.<androidx.media3.exoplayer.source.SampleQueue: int relativeFirstIndex>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r23, $i17, r5, 0, i4);

        $r24 = r0.<androidx.media3.exoplayer.source.SampleQueue: int[] sizes>;

        $i18 = r0.<androidx.media3.exoplayer.source.SampleQueue: int relativeFirstIndex>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r24, $i18, r6, 0, i4);

        $r25 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.extractor.TrackOutput$CryptoData[] cryptoDatas>;

        $i19 = r0.<androidx.media3.exoplayer.source.SampleQueue: int relativeFirstIndex>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r25, $i19, r7, 0, i4);

        $r26 = r0.<androidx.media3.exoplayer.source.SampleQueue: int[] sourceIds>;

        $i20 = r0.<androidx.media3.exoplayer.source.SampleQueue: int relativeFirstIndex>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r26, $i20, r2, 0, i4);

        i5 = r0.<androidx.media3.exoplayer.source.SampleQueue: int relativeFirstIndex>;

        $r27 = r0.<androidx.media3.exoplayer.source.SampleQueue: long[] offsets>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r27, 0, r3, i4, i5);

        $r28 = r0.<androidx.media3.exoplayer.source.SampleQueue: long[] timesUs>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r28, 0, r4, i4, i5);

        $r29 = r0.<androidx.media3.exoplayer.source.SampleQueue: int[] flags>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r29, 0, r5, i4, i5);

        $r30 = r0.<androidx.media3.exoplayer.source.SampleQueue: int[] sizes>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r30, 0, r6, i4, i5);

        $r31 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.extractor.TrackOutput$CryptoData[] cryptoDatas>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r31, 0, r7, i4, i5);

        $r32 = r0.<androidx.media3.exoplayer.source.SampleQueue: int[] sourceIds>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r32, 0, r2, i4, i5);

        r0.<androidx.media3.exoplayer.source.SampleQueue: long[] offsets> = r3;

        r0.<androidx.media3.exoplayer.source.SampleQueue: long[] timesUs> = r4;

        r0.<androidx.media3.exoplayer.source.SampleQueue: int[] flags> = r5;

        r0.<androidx.media3.exoplayer.source.SampleQueue: int[] sizes> = r6;

        r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.extractor.TrackOutput$CryptoData[] cryptoDatas> = r7;

        r0.<androidx.media3.exoplayer.source.SampleQueue: int[] sourceIds> = r2;

        r0.<androidx.media3.exoplayer.source.SampleQueue: int relativeFirstIndex> = 0;

        r0.<androidx.media3.exoplayer.source.SampleQueue: int capacity> = i35;

     label10:
        return;
    }

    private synchronized boolean attemptSplice(long)
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        long l0, $l3, $l8;
        int i1, $i2, $i5, $i6;
        byte $b4, $b9;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        l0 := @parameter0: long;

        $i2 = r0.<androidx.media3.exoplayer.source.SampleQueue: int length>;

        if $i2 != 0 goto label3;

        $l8 = r0.<androidx.media3.exoplayer.source.SampleQueue: long largestDiscardedTimestampUs>;

        $b9 = l0 cmp $l8;

        if $b9 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;

     label3:
        $l3 = virtualinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: long getLargestReadTimestampUs()>();

        $b4 = $l3 cmp l0;

        if $b4 < 0 goto label4;

        return 0;

     label4:
        i1 = specialinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: int countUnreadSamplesBefore(long)>(l0);

        $i5 = r0.<androidx.media3.exoplayer.source.SampleQueue: int absoluteFirstIndex>;

        $i6 = $i5 + i1;

        specialinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: long discardUpstreamSampleMetadata(int)>($i6);

        return 1;
    }

    private long discardUpstreamSampleMetadata(int)
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i10, $i11, $i12, $i13, $i14, $i16, $i19;
        long[] $r1;
        int[] $r2;
        long $l7, $l8, $l9, $l15, $l17, $l18;
        boolean $z0, $z1, $z2;
        androidx.media3.exoplayer.source.SpannedData $r5;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        i0 := @parameter0: int;

        $i3 = virtualinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: int getWriteIndex()>();

        i1 = $i3 - i0;

        if 0 > i1 goto label1;

        $i11 = r0.<androidx.media3.exoplayer.source.SampleQueue: int length>;

        $i10 = r0.<androidx.media3.exoplayer.source.SampleQueue: int readPosition>;

        $i12 = $i11 - $i10;

        if i1 > $i12 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean)>($z1);

        $i13 = r0.<androidx.media3.exoplayer.source.SampleQueue: int length>;

        $i14 = $i13 - i1;

        r0.<androidx.media3.exoplayer.source.SampleQueue: int length> = $i14;

        $l15 = r0.<androidx.media3.exoplayer.source.SampleQueue: long largestDiscardedTimestampUs>;

        $i16 = r0.<androidx.media3.exoplayer.source.SampleQueue: int length>;

        $l17 = specialinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: long getLargestTimestamp(int)>($i16);

        $l18 = staticinvoke <java.lang.Math: long max(long,long)>($l15, $l17);

        r0.<androidx.media3.exoplayer.source.SampleQueue: long largestQueuedTimestampUs> = $l18;

        if i1 != 0 goto label3;

        $z0 = r0.<androidx.media3.exoplayer.source.SampleQueue: boolean isLastSampleQueued>;

        if $z0 == 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        r0.<androidx.media3.exoplayer.source.SampleQueue: boolean isLastSampleQueued> = $z2;

        $r5 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.source.SpannedData sharedSampleMetadata>;

        virtualinvoke $r5.<androidx.media3.exoplayer.source.SpannedData: void discardFrom(int)>(i0);

        $i19 = r0.<androidx.media3.exoplayer.source.SampleQueue: int length>;

        if $i19 == 0 goto label5;

        $i4 = r0.<androidx.media3.exoplayer.source.SampleQueue: int length>;

        $i5 = $i4 - 1;

        i2 = specialinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: int getRelativeIndex(int)>($i5);

        $r1 = r0.<androidx.media3.exoplayer.source.SampleQueue: long[] offsets>;

        $l8 = $r1[i2];

        $r2 = r0.<androidx.media3.exoplayer.source.SampleQueue: int[] sizes>;

        $i6 = $r2[i2];

        $l7 = (long) $i6;

        $l9 = $l8 + $l7;

        return $l9;

     label5:
        return 0L;
    }

    private boolean hasNextSample()
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        $i1 = r0.<androidx.media3.exoplayer.source.SampleQueue: int readPosition>;

        $i0 = r0.<androidx.media3.exoplayer.source.SampleQueue: int length>;

        if $i1 == $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void onFormatResult(androidx.media3.common.Format, androidx.media3.exoplayer.FormatHolder)
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        androidx.media3.common.Format r1, $r6, $r7, $r19;
        androidx.media3.exoplayer.FormatHolder r2;
        boolean z0, $z1, $z2;
        androidx.media3.common.DrmInitData r3, r4, $r18;
        androidx.media3.exoplayer.drm.DrmSession r5, $r9, $r13, $r14;
        androidx.media3.exoplayer.drm.DrmSessionManager $r8, $r10, $r12, $r16;
        androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher $r11, $r15;
        int $i0;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        r1 := @parameter0: androidx.media3.common.Format;

        r2 := @parameter1: androidx.media3.exoplayer.FormatHolder;

        $r6 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.common.Format downstreamFormat>;

        if $r6 != null goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z0 = $z2;

        if z0 == 0 goto label3;

        $r18 = null;

        goto label4;

     label3:
        $r7 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.common.Format downstreamFormat>;

        $r18 = $r7.<androidx.media3.common.Format: androidx.media3.common.DrmInitData drmInitData>;

     label4:
        r3 = $r18;

        r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.common.Format downstreamFormat> = r1;

        r4 = r1.<androidx.media3.common.Format: androidx.media3.common.DrmInitData drmInitData>;

        $r8 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.drm.DrmSessionManager drmSessionManager>;

        if $r8 == null goto label5;

        $r16 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.drm.DrmSessionManager drmSessionManager>;

        $i0 = interfaceinvoke $r16.<androidx.media3.exoplayer.drm.DrmSessionManager: int getCryptoType(androidx.media3.common.Format)>(r1);

        $r19 = virtualinvoke r1.<androidx.media3.common.Format: androidx.media3.common.Format copyWithCryptoType(int)>($i0);

        goto label6;

     label5:
        $r19 = r1;

     label6:
        r2.<androidx.media3.exoplayer.FormatHolder: androidx.media3.common.Format format> = $r19;

        $r9 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.drm.DrmSession currentDrmSession>;

        r2.<androidx.media3.exoplayer.FormatHolder: androidx.media3.exoplayer.drm.DrmSession drmSession> = $r9;

        $r10 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.drm.DrmSessionManager drmSessionManager>;

        if $r10 != null goto label7;

        return;

     label7:
        if z0 != 0 goto label8;

        $z1 = staticinvoke <androidx.media3.common.util.Util: boolean areEqual(java.lang.Object,java.lang.Object)>(r3, r4);

        if $z1 == 0 goto label8;

        return;

     label8:
        r5 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.drm.DrmSession currentDrmSession>;

        $r12 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.drm.DrmSessionManager drmSessionManager>;

        $r11 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher drmEventDispatcher>;

        $r13 = interfaceinvoke $r12.<androidx.media3.exoplayer.drm.DrmSessionManager: androidx.media3.exoplayer.drm.DrmSession acquireSession(androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher,androidx.media3.common.Format)>($r11, r1);

        r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.drm.DrmSession currentDrmSession> = $r13;

        $r14 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.drm.DrmSession currentDrmSession>;

        r2.<androidx.media3.exoplayer.FormatHolder: androidx.media3.exoplayer.drm.DrmSession drmSession> = $r14;

        if r5 == null goto label9;

        $r15 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher drmEventDispatcher>;

        interfaceinvoke r5.<androidx.media3.exoplayer.drm.DrmSession: void release(androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher)>($r15);

     label9:
        return;
    }

    private boolean mayReadSample(int)
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        int i0, $i1, $i2, $i3;
        androidx.media3.exoplayer.drm.DrmSession $r1, $r2, $r4;
        int[] $r3;
        boolean $z0, $z1;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.drm.DrmSession currentDrmSession>;

        if $r1 == null goto label1;

        $r2 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.drm.DrmSession currentDrmSession>;

        $i1 = interfaceinvoke $r2.<androidx.media3.exoplayer.drm.DrmSession: int getState()>();

        if $i1 == 4 goto label1;

        $r3 = r0.<androidx.media3.exoplayer.source.SampleQueue: int[] flags>;

        $i2 = $r3[i0];

        $i3 = $i2 & 1073741824;

        if $i3 != 0 goto label2;

        $r4 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.drm.DrmSession currentDrmSession>;

        $z0 = interfaceinvoke $r4.<androidx.media3.exoplayer.drm.DrmSession: boolean playClearSamplesWithoutKeys()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    private int findSampleBefore(int, int, long, boolean)
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        int i0, i1, $i7, $i8, $i9, i10, i11, i12;
        long l2, $l3, $l5;
        boolean z0;
        long[] $r1, $r2;
        byte $b4, $b6;
        int[] $r3;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        l2 := @parameter2: long;

        z0 := @parameter3: boolean;

        i10 = -1;

        i11 = i0;

        i12 = 0;

     label1:
        if i12 >= i1 goto label5;

        $r1 = r0.<androidx.media3.exoplayer.source.SampleQueue: long[] timesUs>;

        $l3 = $r1[i11];

        $b4 = $l3 cmp l2;

        if $b4 > 0 goto label5;

        if z0 == 0 goto label2;

        $r3 = r0.<androidx.media3.exoplayer.source.SampleQueue: int[] flags>;

        $i8 = $r3[i11];

        $i9 = $i8 & 1;

        if $i9 == 0 goto label3;

     label2:
        i10 = i12;

        $r2 = r0.<androidx.media3.exoplayer.source.SampleQueue: long[] timesUs>;

        $l5 = $r2[i11];

        $b6 = $l5 cmp l2;

        if $b6 != 0 goto label3;

        goto label5;

     label3:
        i11 = i11 + 1;

        $i7 = r0.<androidx.media3.exoplayer.source.SampleQueue: int capacity>;

        if i11 != $i7 goto label4;

        i11 = 0;

     label4:
        i12 = i12 + 1;

        goto label1;

     label5:
        return i10;
    }

    private int countUnreadSamplesBefore(long)
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        long l0, $l3;
        int $i1, $i2, $i5, i6, i7, $i8;
        long[] $r1;
        byte $b4;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        l0 := @parameter0: long;

        i6 = r0.<androidx.media3.exoplayer.source.SampleQueue: int length>;

        $i1 = r0.<androidx.media3.exoplayer.source.SampleQueue: int length>;

        $i2 = $i1 - 1;

        i7 = specialinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: int getRelativeIndex(int)>($i2);

     label1:
        $i8 = r0.<androidx.media3.exoplayer.source.SampleQueue: int readPosition>;

        if i6 <= $i8 goto label2;

        $r1 = r0.<androidx.media3.exoplayer.source.SampleQueue: long[] timesUs>;

        $l3 = $r1[i7];

        $b4 = $l3 cmp l0;

        if $b4 < 0 goto label2;

        i6 = i6 + -1;

        i7 = i7 + -1;

        if i7 != -1 goto label1;

        $i5 = r0.<androidx.media3.exoplayer.source.SampleQueue: int capacity>;

        i7 = $i5 - 1;

        goto label1;

     label2:
        return i6;
    }

    private long discardSamples(int)
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        int i0, i1, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i20, $i21, $i25, $i26, $i27, $i28;
        long $l2, $l3, $l4, $l19, $l22, $l23, $l24;
        androidx.media3.exoplayer.source.SpannedData $r1;
        long[] $r2, $r3;
        int[] $r4;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        i0 := @parameter0: int;

        $l2 = r0.<androidx.media3.exoplayer.source.SampleQueue: long largestDiscardedTimestampUs>;

        $l3 = specialinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: long getLargestTimestamp(int)>(i0);

        $l4 = staticinvoke <java.lang.Math: long max(long,long)>($l2, $l3);

        r0.<androidx.media3.exoplayer.source.SampleQueue: long largestDiscardedTimestampUs> = $l4;

        $i5 = r0.<androidx.media3.exoplayer.source.SampleQueue: int length>;

        $i6 = $i5 - i0;

        r0.<androidx.media3.exoplayer.source.SampleQueue: int length> = $i6;

        $i7 = r0.<androidx.media3.exoplayer.source.SampleQueue: int absoluteFirstIndex>;

        $i8 = $i7 + i0;

        r0.<androidx.media3.exoplayer.source.SampleQueue: int absoluteFirstIndex> = $i8;

        $i9 = r0.<androidx.media3.exoplayer.source.SampleQueue: int relativeFirstIndex>;

        $i10 = $i9 + i0;

        r0.<androidx.media3.exoplayer.source.SampleQueue: int relativeFirstIndex> = $i10;

        $i12 = r0.<androidx.media3.exoplayer.source.SampleQueue: int relativeFirstIndex>;

        $i11 = r0.<androidx.media3.exoplayer.source.SampleQueue: int capacity>;

        if $i12 < $i11 goto label1;

        $i26 = r0.<androidx.media3.exoplayer.source.SampleQueue: int relativeFirstIndex>;

        $i25 = r0.<androidx.media3.exoplayer.source.SampleQueue: int capacity>;

        $i27 = $i26 - $i25;

        r0.<androidx.media3.exoplayer.source.SampleQueue: int relativeFirstIndex> = $i27;

     label1:
        $i13 = r0.<androidx.media3.exoplayer.source.SampleQueue: int readPosition>;

        $i14 = $i13 - i0;

        r0.<androidx.media3.exoplayer.source.SampleQueue: int readPosition> = $i14;

        $i15 = r0.<androidx.media3.exoplayer.source.SampleQueue: int readPosition>;

        if $i15 >= 0 goto label2;

        r0.<androidx.media3.exoplayer.source.SampleQueue: int readPosition> = 0;

     label2:
        $r1 = r0.<androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.source.SpannedData sharedSampleMetadata>;

        $i16 = r0.<androidx.media3.exoplayer.source.SampleQueue: int absoluteFirstIndex>;

        virtualinvoke $r1.<androidx.media3.exoplayer.source.SpannedData: void discardTo(int)>($i16);

        $i17 = r0.<androidx.media3.exoplayer.source.SampleQueue: int length>;

        if $i17 != 0 goto label5;

        $i20 = r0.<androidx.media3.exoplayer.source.SampleQueue: int relativeFirstIndex>;

        if $i20 != 0 goto label3;

        $i28 = r0.<androidx.media3.exoplayer.source.SampleQueue: int capacity>;

        goto label4;

     label3:
        $i28 = r0.<androidx.media3.exoplayer.source.SampleQueue: int relativeFirstIndex>;

     label4:
        i1 = $i28 - 1;

        $r3 = r0.<androidx.media3.exoplayer.source.SampleQueue: long[] offsets>;

        $l23 = $r3[i1];

        $r4 = r0.<androidx.media3.exoplayer.source.SampleQueue: int[] sizes>;

        $i21 = $r4[i1];

        $l22 = (long) $i21;

        $l24 = $l23 + $l22;

        return $l24;

     label5:
        $r2 = r0.<androidx.media3.exoplayer.source.SampleQueue: long[] offsets>;

        $i18 = r0.<androidx.media3.exoplayer.source.SampleQueue: int relativeFirstIndex>;

        $l19 = $r2[$i18];

        return $l19;
    }

    private long getLargestTimestamp(int)
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        int i0, $i1, $i3, $i4, $i5, i7, i8;
        long[] $r1;
        long $l2, l6;
        int[] $r2;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return -9223372036854775808L;

     label1:
        l6 = -9223372036854775808L;

        $i1 = i0 - 1;

        i7 = specialinvoke r0.<androidx.media3.exoplayer.source.SampleQueue: int getRelativeIndex(int)>($i1);

        i8 = 0;

     label2:
        if i8 >= i0 goto label5;

        $r1 = r0.<androidx.media3.exoplayer.source.SampleQueue: long[] timesUs>;

        $l2 = $r1[i7];

        l6 = staticinvoke <java.lang.Math: long max(long,long)>(l6, $l2);

        $r2 = r0.<androidx.media3.exoplayer.source.SampleQueue: int[] flags>;

        $i3 = $r2[i7];

        $i4 = $i3 & 1;

        if $i4 == 0 goto label3;

        goto label5;

     label3:
        i7 = i7 + -1;

        if i7 != -1 goto label4;

        $i5 = r0.<androidx.media3.exoplayer.source.SampleQueue: int capacity>;

        i7 = $i5 - 1;

     label4:
        i8 = i8 + 1;

        goto label2;

     label5:
        return l6;
    }

    private int getRelativeIndex(int)
    {
        androidx.media3.exoplayer.source.SampleQueue r0;
        int i0, i1, $i2, $i3, $i4, $i5;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue;

        i0 := @parameter0: int;

        $i2 = r0.<androidx.media3.exoplayer.source.SampleQueue: int relativeFirstIndex>;

        i1 = $i2 + i0;

        $i3 = r0.<androidx.media3.exoplayer.source.SampleQueue: int capacity>;

        if i1 >= $i3 goto label1;

        $i5 = i1;

        goto label2;

     label1:
        $i4 = r0.<androidx.media3.exoplayer.source.SampleQueue: int capacity>;

        $i5 = i1 - $i4;

     label2:
        return $i5;
    }

    private static void lambda$new$0(androidx.media3.exoplayer.source.SampleQueue$SharedSampleMetadata)
    {
        androidx.media3.exoplayer.source.SampleQueue$SharedSampleMetadata r0;
        androidx.media3.exoplayer.drm.DrmSessionManager$DrmSessionReference $r1;

        r0 := @parameter0: androidx.media3.exoplayer.source.SampleQueue$SharedSampleMetadata;

        $r1 = r0.<androidx.media3.exoplayer.source.SampleQueue$SharedSampleMetadata: androidx.media3.exoplayer.drm.DrmSessionManager$DrmSessionReference drmSessionReference>;

        interfaceinvoke $r1.<androidx.media3.exoplayer.drm.DrmSessionManager$DrmSessionReference: void release()>();

        return;
    }

androidx.media3.exoplayer.source.SampleQueue$1
androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder
<androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder: int size>
<androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder: long offset>
<androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder: androidx.media3.extractor.TrackOutput$CryptoData cryptoData>
    void <init>()
    {
        androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder r0;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue$SampleExtrasHolder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

androidx.media3.exoplayer.source.SampleQueue$SharedSampleMetadata
<androidx.media3.exoplayer.source.SampleQueue$SharedSampleMetadata: androidx.media3.common.Format format>
<androidx.media3.exoplayer.source.SampleQueue$SharedSampleMetadata: androidx.media3.exoplayer.drm.DrmSessionManager$DrmSessionReference drmSessionReference>
    private void <init>(androidx.media3.common.Format, androidx.media3.exoplayer.drm.DrmSessionManager$DrmSessionReference)
    {
        androidx.media3.exoplayer.source.SampleQueue$SharedSampleMetadata r0;
        androidx.media3.common.Format r1;
        androidx.media3.exoplayer.drm.DrmSessionManager$DrmSessionReference r2;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue$SharedSampleMetadata;

        r1 := @parameter0: androidx.media3.common.Format;

        r2 := @parameter1: androidx.media3.exoplayer.drm.DrmSessionManager$DrmSessionReference;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.exoplayer.source.SampleQueue$SharedSampleMetadata: androidx.media3.common.Format format> = r1;

        r0.<androidx.media3.exoplayer.source.SampleQueue$SharedSampleMetadata: androidx.media3.exoplayer.drm.DrmSessionManager$DrmSessionReference drmSessionReference> = r2;

        return;
    }

    void <init>(androidx.media3.common.Format, androidx.media3.exoplayer.drm.DrmSessionManager$DrmSessionReference, androidx.media3.exoplayer.source.SampleQueue$1)
    {
        androidx.media3.exoplayer.source.SampleQueue$SharedSampleMetadata r0;
        androidx.media3.common.Format r1;
        androidx.media3.exoplayer.drm.DrmSessionManager$DrmSessionReference r2;
        androidx.media3.exoplayer.source.SampleQueue$1 r3;

        r0 := @this: androidx.media3.exoplayer.source.SampleQueue$SharedSampleMetadata;

        r1 := @parameter0: androidx.media3.common.Format;

        r2 := @parameter1: androidx.media3.exoplayer.drm.DrmSessionManager$DrmSessionReference;

        r3 := @parameter2: androidx.media3.exoplayer.source.SampleQueue$1;

        specialinvoke r0.<androidx.media3.exoplayer.source.SampleQueue$SharedSampleMetadata: void <init>(androidx.media3.common.Format,androidx.media3.exoplayer.drm.DrmSessionManager$DrmSessionReference)>(r1, r2);

        return;
    }

androidx.media3.exoplayer.source.SampleQueue$UpstreamFormatChangedListener
<androidx.media3.exoplayer.source.SampleQueue$UpstreamFormatChangedListener: void onUpstreamFormatChanged(androidx.media3.common.Format)>
