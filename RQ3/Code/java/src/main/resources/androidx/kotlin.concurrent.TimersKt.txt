kotlin.concurrent.TimersKt
    private static final java.util.Timer fixedRateTimer(java.lang.String, boolean, long, long, kotlin.jvm.functions.Function1)
    {
        boolean $z0;
        long $l0, $l1;
        kotlin.jvm.functions.Function1 $r0;
        kotlin.concurrent.TimersKt$timerTask$1 $r1;
        java.util.Timer $r2;
        java.lang.String $r3;

        $r3 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $l0 := @parameter2: long;

        $l1 := @parameter3: long;

        $r0 := @parameter4: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "action");

        $r2 = staticinvoke <kotlin.concurrent.TimersKt: java.util.Timer timer(java.lang.String,boolean)>($r3, $z0);

        $r1 = new kotlin.concurrent.TimersKt$timerTask$1;

        specialinvoke $r1.<kotlin.concurrent.TimersKt$timerTask$1: void <init>(kotlin.jvm.functions.Function1)>($r0);

        virtualinvoke $r2.<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,long,long)>($r1, $l0, $l1);

        return $r2;
    }

    private static final java.util.Timer fixedRateTimer(java.lang.String, boolean, java.util.Date, long, kotlin.jvm.functions.Function1)
    {
        java.util.Date $r0;
        long $l0;
        kotlin.jvm.functions.Function1 $r1;
        java.util.Timer $r2;
        java.lang.String $r3;
        boolean $z0;
        kotlin.concurrent.TimersKt$timerTask$1 $r4;

        $r3 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $r0 := @parameter2: java.util.Date;

        $l0 := @parameter3: long;

        $r1 := @parameter4: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "startAt");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "action");

        $r2 = staticinvoke <kotlin.concurrent.TimersKt: java.util.Timer timer(java.lang.String,boolean)>($r3, $z0);

        $r4 = new kotlin.concurrent.TimersKt$timerTask$1;

        specialinvoke $r4.<kotlin.concurrent.TimersKt$timerTask$1: void <init>(kotlin.jvm.functions.Function1)>($r1);

        virtualinvoke $r2.<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,java.util.Date,long)>($r4, $r0, $l0);

        return $r2;
    }

    static java.util.Timer fixedRateTimer$default(java.lang.String, boolean, long, long, kotlin.jvm.functions.Function1, int, java.lang.Object)
    {
        long $l0, $l1;
        kotlin.jvm.functions.Function1 $r0;
        kotlin.concurrent.TimersKt$timerTask$1 $r1;
        java.util.Timer $r2;
        java.lang.String $r3;
        boolean $z0;
        int $i2, $i3;
        java.lang.Object $r4;

        $r3 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $l1 := @parameter2: long;

        $l0 := @parameter3: long;

        $r0 := @parameter4: kotlin.jvm.functions.Function1;

        $i2 := @parameter5: int;

        $r4 := @parameter6: java.lang.Object;

        $i3 = $i2 & 1;

        if $i3 == 0 goto label1;

        $r3 = null;

     label1:
        $i3 = $i2 & 2;

        if $i3 == 0 goto label2;

        $z0 = 0;

     label2:
        $i2 = $i2 & 4;

        if $i2 == 0 goto label3;

        $l1 = 0L;

     label3:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "action");

        $r2 = staticinvoke <kotlin.concurrent.TimersKt: java.util.Timer timer(java.lang.String,boolean)>($r3, $z0);

        $r1 = new kotlin.concurrent.TimersKt$timerTask$1;

        specialinvoke $r1.<kotlin.concurrent.TimersKt$timerTask$1: void <init>(kotlin.jvm.functions.Function1)>($r0);

        virtualinvoke $r2.<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,long,long)>($r1, $l1, $l0);

        return $r2;
    }

    static java.util.Timer fixedRateTimer$default(java.lang.String, boolean, java.util.Date, long, kotlin.jvm.functions.Function1, int, java.lang.Object)
    {
        java.util.Date $r0;
        long $l0;
        kotlin.jvm.functions.Function1 $r1;
        java.util.Timer $r2;
        java.lang.String $r3;
        boolean $z0;
        int $i1, $i2;
        java.lang.Object $r4;
        kotlin.concurrent.TimersKt$timerTask$1 $r5;

        $r3 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $r0 := @parameter2: java.util.Date;

        $l0 := @parameter3: long;

        $r1 := @parameter4: kotlin.jvm.functions.Function1;

        $i1 := @parameter5: int;

        $r4 := @parameter6: java.lang.Object;

        $i2 = $i1 & 1;

        if $i2 == 0 goto label1;

        $r3 = null;

     label1:
        $i1 = $i1 & 2;

        if $i1 == 0 goto label2;

        $z0 = 0;

     label2:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "startAt");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "action");

        $r2 = staticinvoke <kotlin.concurrent.TimersKt: java.util.Timer timer(java.lang.String,boolean)>($r3, $z0);

        $r5 = new kotlin.concurrent.TimersKt$timerTask$1;

        specialinvoke $r5.<kotlin.concurrent.TimersKt$timerTask$1: void <init>(kotlin.jvm.functions.Function1)>($r1);

        virtualinvoke $r2.<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,java.util.Date,long)>($r5, $r0, $l0);

        return $r2;
    }

    private static final java.util.TimerTask schedule(java.util.Timer, long, long, kotlin.jvm.functions.Function1)
    {
        java.util.Timer $r0;
        long $l0, $l1;
        kotlin.jvm.functions.Function1 $r1;
        kotlin.concurrent.TimersKt$timerTask$1 $r2;

        $r0 := @parameter0: java.util.Timer;

        $l0 := @parameter1: long;

        $l1 := @parameter2: long;

        $r1 := @parameter3: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "action");

        $r2 = new kotlin.concurrent.TimersKt$timerTask$1;

        specialinvoke $r2.<kotlin.concurrent.TimersKt$timerTask$1: void <init>(kotlin.jvm.functions.Function1)>($r1);

        virtualinvoke $r0.<java.util.Timer: void schedule(java.util.TimerTask,long,long)>($r2, $l0, $l1);

        return $r2;
    }

    private static final java.util.TimerTask schedule(java.util.Timer, long, kotlin.jvm.functions.Function1)
    {
        java.util.Timer $r0;
        long $l0;
        kotlin.jvm.functions.Function1 $r1;
        kotlin.concurrent.TimersKt$timerTask$1 $r2;

        $r0 := @parameter0: java.util.Timer;

        $l0 := @parameter1: long;

        $r1 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "action");

        $r2 = new kotlin.concurrent.TimersKt$timerTask$1;

        specialinvoke $r2.<kotlin.concurrent.TimersKt$timerTask$1: void <init>(kotlin.jvm.functions.Function1)>($r1);

        virtualinvoke $r0.<java.util.Timer: void schedule(java.util.TimerTask,long)>($r2, $l0);

        return $r2;
    }

    private static final java.util.TimerTask schedule(java.util.Timer, java.util.Date, long, kotlin.jvm.functions.Function1)
    {
        java.util.Timer $r0;
        java.util.Date $r1;
        long $l0;
        kotlin.jvm.functions.Function1 $r2;
        kotlin.concurrent.TimersKt$timerTask$1 $r3;

        $r0 := @parameter0: java.util.Timer;

        $r1 := @parameter1: java.util.Date;

        $l0 := @parameter2: long;

        $r2 := @parameter3: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "time");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "action");

        $r3 = new kotlin.concurrent.TimersKt$timerTask$1;

        specialinvoke $r3.<kotlin.concurrent.TimersKt$timerTask$1: void <init>(kotlin.jvm.functions.Function1)>($r2);

        virtualinvoke $r0.<java.util.Timer: void schedule(java.util.TimerTask,java.util.Date,long)>($r3, $r1, $l0);

        return $r3;
    }

    private static final java.util.TimerTask schedule(java.util.Timer, java.util.Date, kotlin.jvm.functions.Function1)
    {
        java.util.Timer $r0;
        java.util.Date $r1;
        kotlin.jvm.functions.Function1 $r2;
        kotlin.concurrent.TimersKt$timerTask$1 $r3;

        $r0 := @parameter0: java.util.Timer;

        $r1 := @parameter1: java.util.Date;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "time");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "action");

        $r3 = new kotlin.concurrent.TimersKt$timerTask$1;

        specialinvoke $r3.<kotlin.concurrent.TimersKt$timerTask$1: void <init>(kotlin.jvm.functions.Function1)>($r2);

        virtualinvoke $r0.<java.util.Timer: void schedule(java.util.TimerTask,java.util.Date)>($r3, $r1);

        return $r3;
    }

    private static final java.util.TimerTask scheduleAtFixedRate(java.util.Timer, long, long, kotlin.jvm.functions.Function1)
    {
        java.util.Timer $r0;
        long $l0, $l1;
        kotlin.jvm.functions.Function1 $r1;
        kotlin.concurrent.TimersKt$timerTask$1 $r2;

        $r0 := @parameter0: java.util.Timer;

        $l0 := @parameter1: long;

        $l1 := @parameter2: long;

        $r1 := @parameter3: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "action");

        $r2 = new kotlin.concurrent.TimersKt$timerTask$1;

        specialinvoke $r2.<kotlin.concurrent.TimersKt$timerTask$1: void <init>(kotlin.jvm.functions.Function1)>($r1);

        virtualinvoke $r0.<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,long,long)>($r2, $l0, $l1);

        return $r2;
    }

    private static final java.util.TimerTask scheduleAtFixedRate(java.util.Timer, java.util.Date, long, kotlin.jvm.functions.Function1)
    {
        java.util.Timer $r0;
        java.util.Date $r1;
        long $l0;
        kotlin.jvm.functions.Function1 $r2;
        kotlin.concurrent.TimersKt$timerTask$1 $r3;

        $r0 := @parameter0: java.util.Timer;

        $r1 := @parameter1: java.util.Date;

        $l0 := @parameter2: long;

        $r2 := @parameter3: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "time");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "action");

        $r3 = new kotlin.concurrent.TimersKt$timerTask$1;

        specialinvoke $r3.<kotlin.concurrent.TimersKt$timerTask$1: void <init>(kotlin.jvm.functions.Function1)>($r2);

        virtualinvoke $r0.<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,java.util.Date,long)>($r3, $r1, $l0);

        return $r3;
    }

    public static final java.util.Timer timer(java.lang.String, boolean)
    {
        boolean $z0;
        java.util.Timer $r0;
        java.lang.String $r1;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        if $r1 != null goto label1;

        $r0 = new java.util.Timer;

        specialinvoke $r0.<java.util.Timer: void <init>(boolean)>($z0);

        return $r0;

     label1:
        $r0 = new java.util.Timer;

        specialinvoke $r0.<java.util.Timer: void <init>(java.lang.String,boolean)>($r1, $z0);

        return $r0;
    }

    private static final java.util.Timer timer(java.lang.String, boolean, long, long, kotlin.jvm.functions.Function1)
    {
        boolean $z0;
        long $l0, $l1;
        kotlin.jvm.functions.Function1 $r0;
        kotlin.concurrent.TimersKt$timerTask$1 $r1;
        java.util.Timer $r2;
        java.lang.String $r3;

        $r3 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $l0 := @parameter2: long;

        $l1 := @parameter3: long;

        $r0 := @parameter4: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "action");

        $r2 = staticinvoke <kotlin.concurrent.TimersKt: java.util.Timer timer(java.lang.String,boolean)>($r3, $z0);

        $r1 = new kotlin.concurrent.TimersKt$timerTask$1;

        specialinvoke $r1.<kotlin.concurrent.TimersKt$timerTask$1: void <init>(kotlin.jvm.functions.Function1)>($r0);

        virtualinvoke $r2.<java.util.Timer: void schedule(java.util.TimerTask,long,long)>($r1, $l0, $l1);

        return $r2;
    }

    private static final java.util.Timer timer(java.lang.String, boolean, java.util.Date, long, kotlin.jvm.functions.Function1)
    {
        java.util.Date $r0;
        long $l0;
        kotlin.jvm.functions.Function1 $r1;
        java.util.Timer $r2;
        java.lang.String $r3;
        boolean $z0;
        kotlin.concurrent.TimersKt$timerTask$1 $r4;

        $r3 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $r0 := @parameter2: java.util.Date;

        $l0 := @parameter3: long;

        $r1 := @parameter4: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "startAt");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "action");

        $r2 = staticinvoke <kotlin.concurrent.TimersKt: java.util.Timer timer(java.lang.String,boolean)>($r3, $z0);

        $r4 = new kotlin.concurrent.TimersKt$timerTask$1;

        specialinvoke $r4.<kotlin.concurrent.TimersKt$timerTask$1: void <init>(kotlin.jvm.functions.Function1)>($r1);

        virtualinvoke $r2.<java.util.Timer: void schedule(java.util.TimerTask,java.util.Date,long)>($r4, $r0, $l0);

        return $r2;
    }

    static java.util.Timer timer$default(java.lang.String, boolean, long, long, kotlin.jvm.functions.Function1, int, java.lang.Object)
    {
        long $l0, $l1;
        kotlin.jvm.functions.Function1 $r0;
        kotlin.concurrent.TimersKt$timerTask$1 $r1;
        java.util.Timer $r2;
        java.lang.String $r3;
        boolean $z0;
        int $i2, $i3;
        java.lang.Object $r4;

        $r3 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $l1 := @parameter2: long;

        $l0 := @parameter3: long;

        $r0 := @parameter4: kotlin.jvm.functions.Function1;

        $i2 := @parameter5: int;

        $r4 := @parameter6: java.lang.Object;

        $i3 = $i2 & 1;

        if $i3 == 0 goto label1;

        $r3 = null;

     label1:
        $i3 = $i2 & 2;

        if $i3 == 0 goto label2;

        $z0 = 0;

     label2:
        $i2 = $i2 & 4;

        if $i2 == 0 goto label3;

        $l1 = 0L;

     label3:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "action");

        $r2 = staticinvoke <kotlin.concurrent.TimersKt: java.util.Timer timer(java.lang.String,boolean)>($r3, $z0);

        $r1 = new kotlin.concurrent.TimersKt$timerTask$1;

        specialinvoke $r1.<kotlin.concurrent.TimersKt$timerTask$1: void <init>(kotlin.jvm.functions.Function1)>($r0);

        virtualinvoke $r2.<java.util.Timer: void schedule(java.util.TimerTask,long,long)>($r1, $l1, $l0);

        return $r2;
    }

    static java.util.Timer timer$default(java.lang.String, boolean, java.util.Date, long, kotlin.jvm.functions.Function1, int, java.lang.Object)
    {
        java.util.Date $r0;
        long $l0;
        kotlin.jvm.functions.Function1 $r1;
        java.util.Timer $r2;
        java.lang.String $r3;
        boolean $z0;
        int $i1, $i2;
        java.lang.Object $r4;
        kotlin.concurrent.TimersKt$timerTask$1 $r5;

        $r3 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $r0 := @parameter2: java.util.Date;

        $l0 := @parameter3: long;

        $r1 := @parameter4: kotlin.jvm.functions.Function1;

        $i1 := @parameter5: int;

        $r4 := @parameter6: java.lang.Object;

        $i2 = $i1 & 1;

        if $i2 == 0 goto label1;

        $r3 = null;

     label1:
        $i1 = $i1 & 2;

        if $i1 == 0 goto label2;

        $z0 = 0;

     label2:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "startAt");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "action");

        $r2 = staticinvoke <kotlin.concurrent.TimersKt: java.util.Timer timer(java.lang.String,boolean)>($r3, $z0);

        $r5 = new kotlin.concurrent.TimersKt$timerTask$1;

        specialinvoke $r5.<kotlin.concurrent.TimersKt$timerTask$1: void <init>(kotlin.jvm.functions.Function1)>($r1);

        virtualinvoke $r2.<java.util.Timer: void schedule(java.util.TimerTask,java.util.Date,long)>($r5, $r0, $l0);

        return $r2;
    }

    private static final java.util.TimerTask timerTask(kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        kotlin.concurrent.TimersKt$timerTask$1 $r1;

        $r0 := @parameter0: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "action");

        $r1 = new kotlin.concurrent.TimersKt$timerTask$1;

        specialinvoke $r1.<kotlin.concurrent.TimersKt$timerTask$1: void <init>(kotlin.jvm.functions.Function1)>($r0);

        return $r1;
    }

