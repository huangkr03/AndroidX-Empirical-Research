androidx.compose.animation.core.AnimationKt
<androidx.compose.animation.core.AnimationKt: long MillisToNanos>
    public static final long getDurationMillis(androidx.compose.animation.core.Animation)
    {
        androidx.compose.animation.core.Animation $r0;
        long $l0, $l1;

        $r0 := @parameter0: androidx.compose.animation.core.Animation;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $l0 = interfaceinvoke $r0.<androidx.compose.animation.core.Animation: long getDurationNanos()>();

        $l1 = $l0 / 1000000L;

        return $l1;
    }

    public static final java.lang.Object getVelocityFromNanos(androidx.compose.animation.core.Animation, long)
    {
        androidx.compose.animation.core.Animation $r0;
        long l0;
        androidx.compose.animation.core.TwoWayConverter $r1;
        kotlin.jvm.functions.Function1 $r2;
        androidx.compose.animation.core.AnimationVector $r3;
        java.lang.Object $r4;

        $r0 := @parameter0: androidx.compose.animation.core.Animation;

        l0 := @parameter1: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = interfaceinvoke $r0.<androidx.compose.animation.core.Animation: androidx.compose.animation.core.TwoWayConverter getTypeConverter()>();

        $r2 = interfaceinvoke $r1.<androidx.compose.animation.core.TwoWayConverter: kotlin.jvm.functions.Function1 getConvertFromVector()>();

        $r3 = interfaceinvoke $r0.<androidx.compose.animation.core.Animation: androidx.compose.animation.core.AnimationVector getVelocityVectorFromNanos(long)>(l0);

        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        return $r4;
    }

    public static final androidx.compose.animation.core.TargetBasedAnimation createAnimation(androidx.compose.animation.core.VectorizedAnimationSpec, androidx.compose.animation.core.AnimationVector, androidx.compose.animation.core.AnimationVector, androidx.compose.animation.core.AnimationVector)
    {
        androidx.compose.animation.core.VectorizedAnimationSpec $r0;
        androidx.compose.animation.core.AnimationVector r1, r2, r3;
        androidx.compose.animation.core.TwoWayConverter r4;
        androidx.compose.animation.core.AnimationKt$createAnimation$1 $r5;
        androidx.compose.animation.core.AnimationKt$createAnimation$2 $r6;
        kotlin.jvm.functions.Function1 $r7, $r8;
        androidx.compose.animation.core.TargetBasedAnimation $r9;

        $r0 := @parameter0: androidx.compose.animation.core.VectorizedAnimationSpec;

        r1 := @parameter1: androidx.compose.animation.core.AnimationVector;

        r2 := @parameter2: androidx.compose.animation.core.AnimationVector;

        r3 := @parameter3: androidx.compose.animation.core.AnimationVector;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "initialValue");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "targetValue");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "initialVelocity");

        $r5 = <androidx.compose.animation.core.AnimationKt$createAnimation$1: androidx.compose.animation.core.AnimationKt$createAnimation$1 INSTANCE>;

        $r8 = (kotlin.jvm.functions.Function1) $r5;

        $r6 = <androidx.compose.animation.core.AnimationKt$createAnimation$2: androidx.compose.animation.core.AnimationKt$createAnimation$2 INSTANCE>;

        $r7 = (kotlin.jvm.functions.Function1) $r6;

        r4 = staticinvoke <androidx.compose.animation.core.VectorConvertersKt: androidx.compose.animation.core.TwoWayConverter TwoWayConverter(kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1)>($r8, $r7);

        $r9 = new androidx.compose.animation.core.TargetBasedAnimation;

        specialinvoke $r9.<androidx.compose.animation.core.TargetBasedAnimation: void <init>(androidx.compose.animation.core.VectorizedAnimationSpec,androidx.compose.animation.core.TwoWayConverter,java.lang.Object,java.lang.Object,androidx.compose.animation.core.AnimationVector)>($r0, r4, r1, r2, r3);

        return $r9;
    }

    public static final androidx.compose.animation.core.TargetBasedAnimation TargetBasedAnimation(androidx.compose.animation.core.AnimationSpec, androidx.compose.animation.core.TwoWayConverter, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.animation.core.AnimationSpec r0;
        androidx.compose.animation.core.TwoWayConverter r1;
        java.lang.Object r2, r3, r4, $r7;
        androidx.compose.animation.core.TargetBasedAnimation $r5;
        kotlin.jvm.functions.Function1 $r6;
        androidx.compose.animation.core.AnimationVector $r8;

        r0 := @parameter0: androidx.compose.animation.core.AnimationSpec;

        r1 := @parameter1: androidx.compose.animation.core.TwoWayConverter;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        r4 := @parameter4: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "animationSpec");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "typeConverter");

        $r5 = new androidx.compose.animation.core.TargetBasedAnimation;

        $r6 = interfaceinvoke r1.<androidx.compose.animation.core.TwoWayConverter: kotlin.jvm.functions.Function1 getConvertToVector()>();

        $r7 = interfaceinvoke $r6.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r4);

        $r8 = (androidx.compose.animation.core.AnimationVector) $r7;

        specialinvoke $r5.<androidx.compose.animation.core.TargetBasedAnimation: void <init>(androidx.compose.animation.core.AnimationSpec,androidx.compose.animation.core.TwoWayConverter,java.lang.Object,java.lang.Object,androidx.compose.animation.core.AnimationVector)>(r0, r1, r2, r3, $r8);

        return $r5;
    }

    public static final androidx.compose.animation.core.DecayAnimation DecayAnimation(androidx.compose.animation.core.FloatDecayAnimationSpec, float, float)
    {
        androidx.compose.animation.core.FloatDecayAnimationSpec r0;
        float f0, f1;
        androidx.compose.animation.core.DecayAnimation $r1;
        androidx.compose.animation.core.DecayAnimationSpec $r2;
        kotlin.jvm.internal.FloatCompanionObject $r3;
        androidx.compose.animation.core.TwoWayConverter $r4;
        java.lang.Float $r5;
        androidx.compose.animation.core.AnimationVector1D $r6;
        androidx.compose.animation.core.AnimationVector $r7;

        r0 := @parameter0: androidx.compose.animation.core.FloatDecayAnimationSpec;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "animationSpec");

        $r1 = new androidx.compose.animation.core.DecayAnimation;

        $r2 = staticinvoke <androidx.compose.animation.core.DecayAnimationSpecKt: androidx.compose.animation.core.DecayAnimationSpec generateDecayAnimationSpec(androidx.compose.animation.core.FloatDecayAnimationSpec)>(r0);

        $r3 = <kotlin.jvm.internal.FloatCompanionObject: kotlin.jvm.internal.FloatCompanionObject INSTANCE>;

        $r4 = staticinvoke <androidx.compose.animation.core.VectorConvertersKt: androidx.compose.animation.core.TwoWayConverter getVectorConverter(kotlin.jvm.internal.FloatCompanionObject)>($r3);

        $r5 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        $r6 = staticinvoke <androidx.compose.animation.core.AnimationVectorsKt: androidx.compose.animation.core.AnimationVector1D AnimationVector(float)>(f1);

        $r7 = (androidx.compose.animation.core.AnimationVector) $r6;

        specialinvoke $r1.<androidx.compose.animation.core.DecayAnimation: void <init>(androidx.compose.animation.core.DecayAnimationSpec,androidx.compose.animation.core.TwoWayConverter,java.lang.Object,androidx.compose.animation.core.AnimationVector)>($r2, $r4, $r5, $r7);

        return $r1;
    }

    public static androidx.compose.animation.core.DecayAnimation DecayAnimation$default(androidx.compose.animation.core.FloatDecayAnimationSpec, float, float, int, java.lang.Object)
    {
        androidx.compose.animation.core.FloatDecayAnimationSpec r0;
        float f0, f1;
        int i0, $i1;
        java.lang.Object r1;
        androidx.compose.animation.core.DecayAnimation $r2;

        r0 := @parameter0: androidx.compose.animation.core.FloatDecayAnimationSpec;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        i0 := @parameter3: int;

        r1 := @parameter4: java.lang.Object;

        $i1 = i0 & 4;

        if $i1 == 0 goto label1;

        f1 = 0.0F;

     label1:
        $r2 = staticinvoke <androidx.compose.animation.core.AnimationKt: androidx.compose.animation.core.DecayAnimation DecayAnimation(androidx.compose.animation.core.FloatDecayAnimationSpec,float,float)>(r0, f0, f1);

        return $r2;
    }

