kotlin.ranges.ClosedFloatRange
<kotlin.ranges.ClosedFloatRange: float _endInclusive>
<kotlin.ranges.ClosedFloatRange: float _start>
    public void <init>(float, float)
    {
        kotlin.ranges.ClosedFloatRange $r0;
        float $f0, $f1;

        $r0 := @this: kotlin.ranges.ClosedFloatRange;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<kotlin.ranges.ClosedFloatRange: float _start> = $f0;

        $r0.<kotlin.ranges.ClosedFloatRange: float _endInclusive> = $f1;

        return;
    }

    public boolean contains(float)
    {
        kotlin.ranges.ClosedFloatRange $r0;
        float $f0, $f1;
        byte $b0;

        $r0 := @this: kotlin.ranges.ClosedFloatRange;

        $f0 := @parameter0: float;

        $f1 = $r0.<kotlin.ranges.ClosedFloatRange: float _start>;

        $b0 = $f0 cmpl $f1;

        if $b0 < 0 goto label1;

        $f1 = $r0.<kotlin.ranges.ClosedFloatRange: float _endInclusive>;

        $b0 = $f0 cmpg $f1;

        if $b0 > 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public volatile boolean contains(java.lang.Comparable)
    {
        kotlin.ranges.ClosedFloatRange $r0;
        java.lang.Comparable $r1;
        java.lang.Number $r2;
        float $f0;
        boolean $z0;

        $r0 := @this: kotlin.ranges.ClosedFloatRange;

        $r1 := @parameter0: java.lang.Comparable;

        $r2 = (java.lang.Number) $r1;

        $f0 = virtualinvoke $r2.<java.lang.Number: float floatValue()>();

        $z0 = virtualinvoke $r0.<kotlin.ranges.ClosedFloatRange: boolean contains(float)>($f0);

        return $z0;
    }

    public boolean equals(java.lang.Object)
    {
        kotlin.ranges.ClosedFloatRange $r0, $r2;
        java.lang.Object $r1;
        boolean $z0, $z1;
        float $f0, $f1;
        byte $b0;

        $r0 := @this: kotlin.ranges.ClosedFloatRange;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof kotlin.ranges.ClosedFloatRange;

        $z1 = 0;

        if $z0 == 0 goto label7;

        $z0 = virtualinvoke $r0.<kotlin.ranges.ClosedFloatRange: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = (kotlin.ranges.ClosedFloatRange) $r1;

        $z0 = virtualinvoke $r2.<kotlin.ranges.ClosedFloatRange: boolean isEmpty()>();

        if $z0 != 0 goto label6;

     label1:
        $f0 = $r0.<kotlin.ranges.ClosedFloatRange: float _start>;

        $r2 = (kotlin.ranges.ClosedFloatRange) $r1;

        $f1 = $r2.<kotlin.ranges.ClosedFloatRange: float _start>;

        $b0 = $f0 cmpg $f1;

        if $b0 != 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 == 0 goto label7;

        $f0 = $r0.<kotlin.ranges.ClosedFloatRange: float _endInclusive>;

        $r0 = (kotlin.ranges.ClosedFloatRange) $r1;

        $f1 = $r0.<kotlin.ranges.ClosedFloatRange: float _endInclusive>;

        $b0 = $f0 cmpg $f1;

        if $b0 != 0 goto label4;

        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        if $z0 == 0 goto label7;

     label6:
        $z1 = 1;

        goto label7;

     label7:
        return $z1;
    }

    public volatile java.lang.Comparable getEndInclusive()
    {
        kotlin.ranges.ClosedFloatRange $r0;
        java.lang.Float $r1;
        java.lang.Comparable r2;

        $r0 := @this: kotlin.ranges.ClosedFloatRange;

        $r1 = virtualinvoke $r0.<kotlin.ranges.ClosedFloatRange: java.lang.Float getEndInclusive()>();

        r2 = (java.lang.Comparable) $r1;

        return r2;
    }

    public java.lang.Float getEndInclusive()
    {
        kotlin.ranges.ClosedFloatRange $r0;
        java.lang.Float $r1;
        float $f0;

        $r0 := @this: kotlin.ranges.ClosedFloatRange;

        $f0 = $r0.<kotlin.ranges.ClosedFloatRange: float _endInclusive>;

        $r1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        return $r1;
    }

    public volatile java.lang.Comparable getStart()
    {
        kotlin.ranges.ClosedFloatRange $r0;
        java.lang.Float $r1;
        java.lang.Comparable r2;

        $r0 := @this: kotlin.ranges.ClosedFloatRange;

        $r1 = virtualinvoke $r0.<kotlin.ranges.ClosedFloatRange: java.lang.Float getStart()>();

        r2 = (java.lang.Comparable) $r1;

        return r2;
    }

    public java.lang.Float getStart()
    {
        kotlin.ranges.ClosedFloatRange $r0;
        java.lang.Float $r1;
        float $f0;

        $r0 := @this: kotlin.ranges.ClosedFloatRange;

        $f0 = $r0.<kotlin.ranges.ClosedFloatRange: float _start>;

        $r1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        return $r1;
    }

    public int hashCode()
    {
        kotlin.ranges.ClosedFloatRange $r0;
        boolean $z0;
        float $f0;
        java.lang.Float $r1;
        int $i0, $i1;

        $r0 := @this: kotlin.ranges.ClosedFloatRange;

        $z0 = virtualinvoke $r0.<kotlin.ranges.ClosedFloatRange: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return -1;

     label1:
        $f0 = $r0.<kotlin.ranges.ClosedFloatRange: float _start>;

        $r1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i0 = $i0 * 31;

        $f0 = $r0.<kotlin.ranges.ClosedFloatRange: float _endInclusive>;

        $r1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i0 = $i0 + $i1;

        return $i0;
    }

    public boolean isEmpty()
    {
        kotlin.ranges.ClosedFloatRange $r0;
        float $f0, $f1;
        byte $b0;

        $r0 := @this: kotlin.ranges.ClosedFloatRange;

        $f1 = $r0.<kotlin.ranges.ClosedFloatRange: float _start>;

        $f0 = $r0.<kotlin.ranges.ClosedFloatRange: float _endInclusive>;

        $b0 = $f1 cmpg $f0;

        if $b0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean lessThanOrEquals(float, float)
    {
        kotlin.ranges.ClosedFloatRange $r0;
        float $f0, $f1;
        byte $b0;

        $r0 := @this: kotlin.ranges.ClosedFloatRange;

        $f1 := @parameter0: float;

        $f0 := @parameter1: float;

        $b0 = $f1 cmpg $f0;

        if $b0 > 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public volatile boolean lessThanOrEquals(java.lang.Comparable, java.lang.Comparable)
    {
        kotlin.ranges.ClosedFloatRange $r0;
        java.lang.Comparable $r1, $r2;
        java.lang.Number $r3;
        float $f0, $f1;
        boolean $z0;

        $r0 := @this: kotlin.ranges.ClosedFloatRange;

        $r1 := @parameter0: java.lang.Comparable;

        $r2 := @parameter1: java.lang.Comparable;

        $r3 = (java.lang.Number) $r1;

        $f0 = virtualinvoke $r3.<java.lang.Number: float floatValue()>();

        $r3 = (java.lang.Number) $r2;

        $f1 = virtualinvoke $r3.<java.lang.Number: float floatValue()>();

        $z0 = virtualinvoke $r0.<kotlin.ranges.ClosedFloatRange: boolean lessThanOrEquals(float,float)>($f0, $f1);

        return $z0;
    }

    public java.lang.String toString()
    {
        kotlin.ranges.ClosedFloatRange $r0;
        java.lang.StringBuilder $r1;
        float $f0;
        java.lang.String $r2;

        $r0 := @this: kotlin.ranges.ClosedFloatRange;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $f0 = $r0.<kotlin.ranges.ClosedFloatRange: float _start>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("..");

        $f0 = $r0.<kotlin.ranges.ClosedFloatRange: float _endInclusive>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

