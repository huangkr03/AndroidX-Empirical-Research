androidx.emoji2.emojipicker.EmojiView
<androidx.emoji2.emojipicker.EmojiView: androidx.emoji2.emojipicker.EmojiView$Companion Companion>
<androidx.emoji2.emojipicker.EmojiView: boolean willDrawVariantIndicator>
<androidx.emoji2.emojipicker.EmojiView: android.text.TextPaint textPaint>
<androidx.emoji2.emojipicker.EmojiView: android.graphics.Bitmap offscreenCanvasBitmap>
<androidx.emoji2.emojipicker.EmojiView: java.lang.CharSequence emoji>
<androidx.emoji2.emojipicker.EmojiView: int EMOJI_DRAW_TEXT_SIZE_SP>
    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        androidx.emoji2.emojipicker.EmojiView r0, r11, r13;
        android.content.Context r1;
        android.util.AttributeSet r2;
        android.text.TextPaint r3, $r5, $r8;
        int i0, $i1, $i2, $i3;
        android.graphics.drawable.Drawable $r4;
        android.content.res.Resources $r6;
        android.util.DisplayMetrics $r7;
        float $f0;
        android.graphics.Bitmap$Config $r9;
        android.graphics.Bitmap $r10;
        android.graphics.Paint$FontMetricsInt $r12;

        r0 := @this: androidx.emoji2.emojipicker.EmojiView;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "context");

        specialinvoke r0.<android.view.View: void <init>(android.content.Context,android.util.AttributeSet)>(r1, r2);

        $i1 = <androidx.emoji2.emojipicker.R$drawable: int ripple_emoji_view>;

        $r4 = virtualinvoke r1.<android.content.Context: android.graphics.drawable.Drawable getDrawable(int)>($i1);

        virtualinvoke r0.<androidx.emoji2.emojipicker.EmojiView: void setBackground(android.graphics.drawable.Drawable)>($r4);

        virtualinvoke r0.<androidx.emoji2.emojipicker.EmojiView: void setImportantForAccessibility(int)>(1);

        r0.<androidx.emoji2.emojipicker.EmojiView: boolean willDrawVariantIndicator> = 1;

        $r5 = new android.text.TextPaint;

        specialinvoke $r5.<android.text.TextPaint: void <init>(int)>(3);

        r3 = $r5;

        r11 = r0;

        $r6 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $r7 = virtualinvoke $r6.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $f0 = staticinvoke <android.util.TypedValue: float applyDimension(int,float,android.util.DisplayMetrics)>(2, 30.0F, $r7);

        virtualinvoke r3.<android.text.TextPaint: void setTextSize(float)>($f0);

        r11.<androidx.emoji2.emojipicker.EmojiView: android.text.TextPaint textPaint> = r3;

        $r8 = r0.<androidx.emoji2.emojipicker.EmojiView: android.text.TextPaint textPaint>;

        $r12 = virtualinvoke $r8.<android.text.TextPaint: android.graphics.Paint$FontMetricsInt getFontMetricsInt()>();

        r13 = r0;

        $i3 = $r12.<android.graphics.Paint$FontMetricsInt: int bottom>;

        $i2 = $r12.<android.graphics.Paint$FontMetricsInt: int top>;

        i0 = $i3 - $i2;

        $r9 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        $r10 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>(i0, i0, $r9);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r10, "with(textPaint.fontMetri\u2026p.Config.ARGB_8888)\n    }");

        r13.<androidx.emoji2.emojipicker.EmojiView: android.graphics.Bitmap offscreenCanvasBitmap> = $r10;

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.emoji2.emojipicker.EmojiView r0;
        android.content.Context r1;
        int i0, $i1;
        kotlin.jvm.internal.DefaultConstructorMarker r2;
        android.util.AttributeSet r3;

        r0 := @this: androidx.emoji2.emojipicker.EmojiView;

        r1 := @parameter0: android.content.Context;

        r3 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        r2 := @parameter3: kotlin.jvm.internal.DefaultConstructorMarker;

        $i1 = i0 & 2;

        if $i1 == 0 goto label1;

        r3 = null;

     label1:
        specialinvoke r0.<androidx.emoji2.emojipicker.EmojiView: void <init>(android.content.Context,android.util.AttributeSet)>(r1, r3);

        return;
    }

    public final boolean getWillDrawVariantIndicator$emoji2_emojipicker_release()
    {
        androidx.emoji2.emojipicker.EmojiView r0;
        boolean $z0;

        r0 := @this: androidx.emoji2.emojipicker.EmojiView;

        $z0 = r0.<androidx.emoji2.emojipicker.EmojiView: boolean willDrawVariantIndicator>;

        return $z0;
    }

    public final void setWillDrawVariantIndicator$emoji2_emojipicker_release(boolean)
    {
        androidx.emoji2.emojipicker.EmojiView r0;
        boolean z0;

        r0 := @this: androidx.emoji2.emojipicker.EmojiView;

        z0 := @parameter0: boolean;

        r0.<androidx.emoji2.emojipicker.EmojiView: boolean willDrawVariantIndicator> = z0;

        return;
    }

    protected void onMeasure(int, int)
    {
        androidx.emoji2.emojipicker.EmojiView r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        android.content.Context $r1;
        android.content.res.Resources $r2;

        r0 := @this: androidx.emoji2.emojipicker.EmojiView;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i3 = staticinvoke <android.view.View$MeasureSpec: int getSize(int)>(i0);

        $i4 = staticinvoke <android.view.View$MeasureSpec: int getSize(int)>(i1);

        $i5 = staticinvoke <java.lang.Math: int min(int,int)>($i3, $i4);

        $r1 = virtualinvoke r0.<androidx.emoji2.emojipicker.EmojiView: android.content.Context getContext()>();

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $i6 = <androidx.emoji2.emojipicker.R$dimen: int emoji_picker_emoji_view_padding>;

        $i7 = virtualinvoke $r2.<android.content.res.Resources: int getDimensionPixelSize(int)>($i6);

        i2 = $i5 - $i7;

        virtualinvoke r0.<androidx.emoji2.emojipicker.EmojiView: void setMeasuredDimension(int,int)>(i2, i2);

        return;
    }

    public void draw(android.graphics.Canvas)
    {
        androidx.emoji2.emojipicker.EmojiView r0;
        android.graphics.Canvas r1;
        int $i1, $i2, $i3, $i4;
        android.graphics.Bitmap $r3, $r4, $r5;
        float $f0, $f1, $f2, $f3, $f4, $f5;

        r0 := @this: androidx.emoji2.emojipicker.EmojiView;

        r1 := @parameter0: android.graphics.Canvas;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "canvas");

        specialinvoke r0.<android.view.View: void draw(android.graphics.Canvas)>(r1);

        virtualinvoke r1.<android.graphics.Canvas: int save()>();

        $i1 = virtualinvoke r1.<android.graphics.Canvas: int getWidth()>();

        $f0 = (float) $i1;

        $r3 = r0.<androidx.emoji2.emojipicker.EmojiView: android.graphics.Bitmap offscreenCanvasBitmap>;

        $i2 = virtualinvoke $r3.<android.graphics.Bitmap: int getWidth()>();

        $f1 = (float) $i2;

        $f2 = $f0 / $f1;

        $i3 = virtualinvoke r1.<android.graphics.Canvas: int getHeight()>();

        $f3 = (float) $i3;

        $r4 = r0.<androidx.emoji2.emojipicker.EmojiView: android.graphics.Bitmap offscreenCanvasBitmap>;

        $i4 = virtualinvoke $r4.<android.graphics.Bitmap: int getHeight()>();

        $f4 = (float) $i4;

        $f5 = $f3 / $f4;

        virtualinvoke r1.<android.graphics.Canvas: void scale(float,float)>($f2, $f5);

        $r5 = r0.<androidx.emoji2.emojipicker.EmojiView: android.graphics.Bitmap offscreenCanvasBitmap>;

        virtualinvoke r1.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)>($r5, 0.0F, 0.0F, null);

        virtualinvoke r1.<android.graphics.Canvas: void restore()>();

        return;
    }

    public final java.lang.CharSequence getEmoji()
    {
        androidx.emoji2.emojipicker.EmojiView r0;
        java.lang.CharSequence $r1;

        r0 := @this: androidx.emoji2.emojipicker.EmojiView;

        $r1 = r0.<androidx.emoji2.emojipicker.EmojiView: java.lang.CharSequence emoji>;

        return $r1;
    }

    public final void setEmoji(java.lang.CharSequence)
    {
        androidx.emoji2.emojipicker.EmojiView r0;
        java.lang.CharSequence r1;
        android.graphics.Bitmap $r2;
        java.lang.Runnable $r3;

        r0 := @this: androidx.emoji2.emojipicker.EmojiView;

        r1 := @parameter0: java.lang.CharSequence;

        r0.<androidx.emoji2.emojipicker.EmojiView: java.lang.CharSequence emoji> = r1;

        if r1 == null goto label1;

        $r3 = dynamicinvoke "run" <java.lang.Runnable (java.lang.CharSequence,androidx.emoji2.emojipicker.EmojiView)>(r1, r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.emoji2.emojipicker.EmojiView: void _set_emoji_$lambda$3(java.lang.CharSequence,androidx.emoji2.emojipicker.EmojiView)>, methodtype: void __METHODTYPE__());

        virtualinvoke r0.<androidx.emoji2.emojipicker.EmojiView: boolean post(java.lang.Runnable)>($r3);

        goto label2;

     label1:
        $r2 = r0.<androidx.emoji2.emojipicker.EmojiView: android.graphics.Bitmap offscreenCanvasBitmap>;

        virtualinvoke $r2.<android.graphics.Bitmap: void eraseColor(int)>(0);

     label2:
        return;
    }

    private final void drawEmoji(java.lang.CharSequence, boolean)
    {
        androidx.emoji2.emojipicker.EmojiView r0;
        java.lang.CharSequence r1;
        boolean z0, $z4;
        android.graphics.Bitmap $r2, $r6;
        android.graphics.Canvas r3, $r7;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6;
        android.graphics.drawable.Drawable r5, $r14, $r22;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        android.text.TextPaint $r8, $r9, $r11;
        android.graphics.Paint$FontMetrics $r10;
        android.graphics.Paint $r12;
        android.content.Context $r13, $r15, $r17;
        android.content.res.Resources $r16, $r18;
        android.graphics.Rect $r19;
        android.text.Spanned $r20;
        android.text.StaticLayout $r21;

        r0 := @this: androidx.emoji2.emojipicker.EmojiView;

        r1 := @parameter0: java.lang.CharSequence;

        z0 := @parameter1: boolean;

        $r6 = r0.<androidx.emoji2.emojipicker.EmojiView: android.graphics.Bitmap offscreenCanvasBitmap>;

        virtualinvoke $r6.<android.graphics.Bitmap: void eraseColor(int)>(0);

        $r2 = r0.<androidx.emoji2.emojipicker.EmojiView: android.graphics.Bitmap offscreenCanvasBitmap>;

        $r7 = new android.graphics.Canvas;

        specialinvoke $r7.<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>($r2);

        r3 = $r7;

        $z4 = r1 instanceof android.text.Spanned;

        if $z4 == 0 goto label1;

        $r20 = (android.text.Spanned) r1;

        $i12 = virtualinvoke r3.<android.graphics.Canvas: int getWidth()>();

        $r21 = specialinvoke r0.<androidx.emoji2.emojipicker.EmojiView: android.text.StaticLayout createStaticLayout(android.text.Spanned,int)>($r20, $i12);

        virtualinvoke $r21.<android.text.StaticLayout: void draw(android.graphics.Canvas)>(r3);

        goto label2;

     label1:
        $r8 = r0.<androidx.emoji2.emojipicker.EmojiView: android.text.TextPaint textPaint>;

        $i4 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        f0 = virtualinvoke $r8.<android.text.TextPaint: float measureText(java.lang.CharSequence,int,int)>(r1, 0, $i4);

        $i5 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $i6 = virtualinvoke r3.<android.graphics.Canvas: int getWidth()>();

        $f1 = (float) $i6;

        $f3 = $f1 - f0;

        $f2 = (float) 2;

        $f4 = $f3 / $f2;

        $r9 = r0.<androidx.emoji2.emojipicker.EmojiView: android.text.TextPaint textPaint>;

        $r10 = virtualinvoke $r9.<android.text.TextPaint: android.graphics.Paint$FontMetrics getFontMetrics()>();

        $f5 = $r10.<android.graphics.Paint$FontMetrics: float top>;

        $f6 = neg $f5;

        $r11 = r0.<androidx.emoji2.emojipicker.EmojiView: android.text.TextPaint textPaint>;

        $r12 = (android.graphics.Paint) $r11;

        virtualinvoke r3.<android.graphics.Canvas: void drawText(java.lang.CharSequence,int,int,float,float,android.graphics.Paint)>(r1, 0, $i5, $f4, $f6, $r12);

     label2:
        if z0 == 0 goto label5;

        $r13 = virtualinvoke r0.<androidx.emoji2.emojipicker.EmojiView: android.content.Context getContext()>();

        $i7 = <androidx.emoji2.emojipicker.R$drawable: int variant_availability_indicator>;

        $r14 = virtualinvoke $r13.<android.content.Context: android.graphics.drawable.Drawable getDrawable(int)>($i7);

        if $r14 == null goto label3;

        r5 = $r14;

        i0 = virtualinvoke r3.<android.graphics.Canvas: int getWidth()>();

        i1 = virtualinvoke r3.<android.graphics.Canvas: int getHeight()>();

        $r15 = virtualinvoke r0.<androidx.emoji2.emojipicker.EmojiView: android.content.Context getContext()>();

        $r16 = virtualinvoke $r15.<android.content.Context: android.content.res.Resources getResources()>();

        $i8 = <androidx.emoji2.emojipicker.R$dimen: int variant_availability_indicator_width>;

        i2 = virtualinvoke $r16.<android.content.res.Resources: int getDimensionPixelSize(int)>($i8);

        $r17 = virtualinvoke r0.<androidx.emoji2.emojipicker.EmojiView: android.content.Context getContext()>();

        $r18 = virtualinvoke $r17.<android.content.Context: android.content.res.Resources getResources()>();

        $i9 = <androidx.emoji2.emojipicker.R$dimen: int variant_availability_indicator_height>;

        i3 = virtualinvoke $r18.<android.content.res.Resources: int getDimensionPixelSize(int)>($i9);

        $r19 = new android.graphics.Rect;

        $i11 = i0 - i2;

        $i10 = i1 - i3;

        specialinvoke $r19.<android.graphics.Rect: void <init>(int,int,int,int)>($i11, $i10, i0, i1);

        virtualinvoke r5.<android.graphics.drawable.Drawable: void setBounds(android.graphics.Rect)>($r19);

        $r22 = r5;

        goto label4;

     label3:
        $r22 = null;

     label4:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r22);

        virtualinvoke $r22.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r3);

     label5:
        return;
    }

    private final android.text.StaticLayout createStaticLayout(android.text.Spanned, int)
    {
        androidx.emoji2.emojipicker.EmojiView r0;
        android.text.Spanned r1;
        int i0, $i1;
        android.text.StaticLayout $r2, $r8;
        android.text.Layout$Alignment $r3;
        android.text.TextPaint $r4, $r6;
        java.lang.CharSequence $r5;
        androidx.emoji2.emojipicker.EmojiView$Api23Impl $r7;

        r0 := @this: androidx.emoji2.emojipicker.EmojiView;

        r1 := @parameter0: android.text.Spanned;

        i0 := @parameter1: int;

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 < 23 goto label1;

        $r7 = <androidx.emoji2.emojipicker.EmojiView$Api23Impl: androidx.emoji2.emojipicker.EmojiView$Api23Impl INSTANCE>;

        $r6 = r0.<androidx.emoji2.emojipicker.EmojiView: android.text.TextPaint textPaint>;

        $r8 = virtualinvoke $r7.<androidx.emoji2.emojipicker.EmojiView$Api23Impl: android.text.StaticLayout createStaticLayout(android.text.Spanned,android.text.TextPaint,int)>(r1, $r6, i0);

        return $r8;

     label1:
        $r2 = new android.text.StaticLayout;

        $r5 = (java.lang.CharSequence) r1;

        $r4 = r0.<androidx.emoji2.emojipicker.EmojiView: android.text.TextPaint textPaint>;

        $r3 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_CENTER>;

        specialinvoke $r2.<android.text.StaticLayout: void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,boolean)>($r5, $r4, i0, $r3, 1.0F, 0.0F, 0);

        return $r2;
    }

    public void <init>(android.content.Context)
    {
        androidx.emoji2.emojipicker.EmojiView r0;
        android.content.Context r1;

        r0 := @this: androidx.emoji2.emojipicker.EmojiView;

        r1 := @parameter0: android.content.Context;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "context");

        specialinvoke r0.<androidx.emoji2.emojipicker.EmojiView: void <init>(android.content.Context,android.util.AttributeSet,int,kotlin.jvm.internal.DefaultConstructorMarker)>(r1, null, 2, null);

        return;
    }

    private static final void _set_emoji_$lambda$3(java.lang.CharSequence, androidx.emoji2.emojipicker.EmojiView)
    {
        java.lang.CharSequence $r0, $r2, $r8;
        androidx.emoji2.emojipicker.EmojiView r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        androidx.emoji2.emojipicker.EmojiPickerView$Companion $r3;
        androidx.emoji2.emojipicker.BundledEmojiListLoader $r4;
        java.util.Map $r5;
        androidx.emoji2.text.EmojiCompat $r6;

        $r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: androidx.emoji2.emojipicker.EmojiView;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "this$0");

        $r2 = r1.<androidx.emoji2.emojipicker.EmojiView: java.lang.CharSequence emoji>;

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r0, $r2);

        if $z0 == 0 goto label5;

        $r3 = <androidx.emoji2.emojipicker.EmojiPickerView: androidx.emoji2.emojipicker.EmojiPickerView$Companion Companion>;

        $z1 = virtualinvoke $r3.<androidx.emoji2.emojipicker.EmojiPickerView$Companion: boolean getEmojiCompatLoaded$emoji2_emojipicker_release()>();

        if $z1 == 0 goto label1;

        $r6 = staticinvoke <androidx.emoji2.text.EmojiCompat: androidx.emoji2.text.EmojiCompat get()>();

        $r8 = virtualinvoke $r6.<androidx.emoji2.text.EmojiCompat: java.lang.CharSequence process(java.lang.CharSequence)>($r0);

        if $r8 != null goto label2;

        $r8 = $r0;

        goto label2;

     label1:
        $r8 = $r0;

     label2:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r8, "if (EmojiPickerView.emoj\u2026alue) ?: value else value");

        $z3 = r1.<androidx.emoji2.emojipicker.EmojiView: boolean willDrawVariantIndicator>;

        if $z3 == 0 goto label3;

        $r4 = <androidx.emoji2.emojipicker.BundledEmojiListLoader: androidx.emoji2.emojipicker.BundledEmojiListLoader INSTANCE>;

        $r5 = virtualinvoke $r4.<androidx.emoji2.emojipicker.BundledEmojiListLoader: java.util.Map getEmojiVariantsLookup$emoji2_emojipicker_release()>();

        $z2 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>($r0);

        if $z2 == 0 goto label3;

        $z4 = 1;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        specialinvoke r1.<androidx.emoji2.emojipicker.EmojiView: void drawEmoji(java.lang.CharSequence,boolean)>($r8, $z4);

        virtualinvoke r1.<androidx.emoji2.emojipicker.EmojiView: void setContentDescription(java.lang.CharSequence)>($r0);

     label5:
        virtualinvoke r1.<androidx.emoji2.emojipicker.EmojiView: void invalidate()>();

        return;
    }

    static void <clinit>()
    {
        androidx.emoji2.emojipicker.EmojiView$Companion $r0;

        $r0 = new androidx.emoji2.emojipicker.EmojiView$Companion;

        specialinvoke $r0.<androidx.emoji2.emojipicker.EmojiView$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.emoji2.emojipicker.EmojiView: androidx.emoji2.emojipicker.EmojiView$Companion Companion> = $r0;

        return;
    }

androidx.emoji2.emojipicker.EmojiView$Api23Impl
<androidx.emoji2.emojipicker.EmojiView$Api23Impl: androidx.emoji2.emojipicker.EmojiView$Api23Impl INSTANCE>
    private void <init>()
    {
        androidx.emoji2.emojipicker.EmojiView$Api23Impl r0;

        r0 := @this: androidx.emoji2.emojipicker.EmojiView$Api23Impl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final android.text.StaticLayout createStaticLayout(android.text.Spanned, android.text.TextPaint, int)
    {
        androidx.emoji2.emojipicker.EmojiView$Api23Impl r0;
        android.text.Spanned r1;
        android.text.TextPaint r2;
        int i0, $i1;
        android.text.StaticLayout$Builder r3;
        java.lang.CharSequence $r5;
        android.text.Layout$Alignment $r6;
        android.text.StaticLayout $r10;

        r0 := @this: androidx.emoji2.emojipicker.EmojiView$Api23Impl;

        r1 := @parameter0: android.text.Spanned;

        r2 := @parameter1: android.text.TextPaint;

        i0 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "emoji");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "textPaint");

        $r5 = (java.lang.CharSequence) r1;

        $i1 = interfaceinvoke r1.<android.text.Spanned: int length()>();

        r3 = staticinvoke <android.text.StaticLayout$Builder: android.text.StaticLayout$Builder obtain(java.lang.CharSequence,int,int,android.text.TextPaint,int)>($r5, 0, $i1, r2, i0);

        $r6 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_CENTER>;

        virtualinvoke r3.<android.text.StaticLayout$Builder: android.text.StaticLayout$Builder setAlignment(android.text.Layout$Alignment)>($r6);

        virtualinvoke r3.<android.text.StaticLayout$Builder: android.text.StaticLayout$Builder setLineSpacing(float,float)>(0.0F, 1.0F);

        virtualinvoke r3.<android.text.StaticLayout$Builder: android.text.StaticLayout$Builder setIncludePad(boolean)>(0);

        $r10 = virtualinvoke r3.<android.text.StaticLayout$Builder: android.text.StaticLayout build()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r10, "obtain(\n                \u2026se)\n            }.build()");

        return $r10;
    }

    static void <clinit>()
    {
        androidx.emoji2.emojipicker.EmojiView$Api23Impl $r0;

        $r0 = new androidx.emoji2.emojipicker.EmojiView$Api23Impl;

        specialinvoke $r0.<androidx.emoji2.emojipicker.EmojiView$Api23Impl: void <init>()>();

        <androidx.emoji2.emojipicker.EmojiView$Api23Impl: androidx.emoji2.emojipicker.EmojiView$Api23Impl INSTANCE> = $r0;

        return;
    }

androidx.emoji2.emojipicker.EmojiView$Companion
    private void <init>()
    {
        androidx.emoji2.emojipicker.EmojiView$Companion r0;

        r0 := @this: androidx.emoji2.emojipicker.EmojiView$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.emoji2.emojipicker.EmojiView$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.emoji2.emojipicker.EmojiView$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.emoji2.emojipicker.EmojiView$Companion: void <init>()>();

        return;
    }

