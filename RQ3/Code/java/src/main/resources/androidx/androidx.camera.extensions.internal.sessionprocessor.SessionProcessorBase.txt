androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase
<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase: java.lang.String TAG>
<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase: java.util.Map mImageReaderMap>
<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase: java.util.Map mOutputConfigMap>
<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase: android.os.HandlerThread mImageReaderHandlerThread>
<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase: java.util.List mSurfacesList>
<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase: java.lang.Object mLock>
<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase: java.lang.String mCameraId>
    void <init>()
    {
        androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase r0;
        java.util.HashMap $r1, $r2;
        java.util.ArrayList $r3;
        java.lang.Object $r4;

        r0 := @this: androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase: java.util.Map mImageReaderMap> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase: java.util.Map mOutputConfigMap> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase: java.util.List mSurfacesList> = $r3;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase: java.lang.Object mLock> = $r4;

        return;
    }

    private static androidx.camera.core.impl.SessionProcessorSurface createOutputConfigSurface(androidx.camera.extensions.internal.sessionprocessor.Camera2OutputConfig, java.util.Map)
    {
        androidx.camera.extensions.internal.sessionprocessor.Camera2OutputConfig r0;
        java.util.Map r1;
        androidx.camera.core.impl.SessionProcessorSurface r2, $r13, $r18, r21;
        boolean $z0, $z1, $z2;
        java.lang.UnsupportedOperationException $r3, $r8;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        android.util.Size $r9, $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.Integer $r11;
        android.view.Surface $r14, $r19;
        com.google.common.util.concurrent.ListenableFuture $r15;
        java.lang.Runnable $r16;
        java.util.concurrent.Executor $r17;
        androidx.camera.extensions.internal.sessionprocessor.SurfaceOutputConfig r20;
        androidx.camera.extensions.internal.sessionprocessor.ImageReaderOutputConfig r22;
        android.media.ImageReader r23;

        r0 := @parameter0: androidx.camera.extensions.internal.sessionprocessor.Camera2OutputConfig;

        r1 := @parameter1: java.util.Map;

        $z0 = r0 instanceof androidx.camera.extensions.internal.sessionprocessor.SurfaceOutputConfig;

        if $z0 == 0 goto label1;

        r20 = (androidx.camera.extensions.internal.sessionprocessor.SurfaceOutputConfig) r0;

        $r18 = new androidx.camera.core.impl.SessionProcessorSurface;

        $r19 = virtualinvoke r20.<androidx.camera.extensions.internal.sessionprocessor.SurfaceOutputConfig: android.view.Surface getSurface()>();

        $i6 = interfaceinvoke r0.<androidx.camera.extensions.internal.sessionprocessor.Camera2OutputConfig: int getId()>();

        specialinvoke $r18.<androidx.camera.core.impl.SessionProcessorSurface: void <init>(android.view.Surface,int)>($r19, $i6);

        r21 = $r18;

        return r21;

     label1:
        $z1 = r0 instanceof androidx.camera.extensions.internal.sessionprocessor.ImageReaderOutputConfig;

        if $z1 == 0 goto label2;

        r22 = (androidx.camera.extensions.internal.sessionprocessor.ImageReaderOutputConfig) r0;

        $r9 = virtualinvoke r22.<androidx.camera.extensions.internal.sessionprocessor.ImageReaderOutputConfig: android.util.Size getSize()>();

        $i0 = virtualinvoke $r9.<android.util.Size: int getWidth()>();

        $r10 = virtualinvoke r22.<androidx.camera.extensions.internal.sessionprocessor.ImageReaderOutputConfig: android.util.Size getSize()>();

        $i1 = virtualinvoke $r10.<android.util.Size: int getHeight()>();

        $i2 = virtualinvoke r22.<androidx.camera.extensions.internal.sessionprocessor.ImageReaderOutputConfig: int getImageFormat()>();

        $i3 = virtualinvoke r22.<androidx.camera.extensions.internal.sessionprocessor.ImageReaderOutputConfig: int getMaxImages()>();

        r23 = staticinvoke <android.media.ImageReader: android.media.ImageReader newInstance(int,int,int,int)>($i0, $i1, $i2, $i3);

        $i4 = interfaceinvoke r0.<androidx.camera.extensions.internal.sessionprocessor.Camera2OutputConfig: int getId()>();

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, r23);

        $r13 = new androidx.camera.core.impl.SessionProcessorSurface;

        $r14 = virtualinvoke r23.<android.media.ImageReader: android.view.Surface getSurface()>();

        $i5 = interfaceinvoke r0.<androidx.camera.extensions.internal.sessionprocessor.Camera2OutputConfig: int getId()>();

        specialinvoke $r13.<androidx.camera.core.impl.SessionProcessorSurface: void <init>(android.view.Surface,int)>($r14, $i5);

        r2 = $r13;

        $r15 = virtualinvoke r2.<androidx.camera.core.impl.SessionProcessorSurface: com.google.common.util.concurrent.ListenableFuture getTerminationFuture()>();

        $r16 = dynamicinvoke "run" <java.lang.Runnable (android.media.ImageReader)>(r23) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase: void lambda$createOutputConfigSurface$0(android.media.ImageReader)>, methodtype: void __METHODTYPE__());

        $r17 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor directExecutor()>();

        interfaceinvoke $r15.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r16, $r17);

        return r2;

     label2:
        $z2 = r0 instanceof androidx.camera.extensions.internal.sessionprocessor.MultiResolutionImageReaderOutputConfig;

        if $z2 == 0 goto label3;

        $r8 = new java.lang.UnsupportedOperationException;

        specialinvoke $r8.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("MultiResolutionImageReader not supported yet");

        throw $r8;

     label3:
        $r3 = new java.lang.UnsupportedOperationException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported Camera2OutputConfig:");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r7);

        throw $r3;
    }

    public final androidx.camera.core.impl.SessionConfig initSession(androidx.camera.core.CameraInfo, androidx.camera.core.impl.OutputSurface, androidx.camera.core.impl.OutputSurface, androidx.camera.core.impl.OutputSurface)
    {
        androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase r0;
        androidx.camera.core.CameraInfo r1;
        androidx.camera.core.impl.OutputSurface r2, r3, r4;
        androidx.camera.camera2.interop.Camera2CameraInfo r5;
        java.util.Map r6, $r19, $r34, $r37, $r39, $r49, $r52;
        androidx.camera.extensions.internal.sessionprocessor.Camera2SessionConfig r7;
        androidx.camera.core.impl.SessionConfig$Builder r8, $r15;
        java.util.List r9, $r17, $r38;
        java.util.ArrayList r10, $r46;
        java.util.Iterator r11, r56, r62;
        androidx.camera.extensions.internal.sessionprocessor.Camera2OutputConfig r12, r57;
        java.lang.Throwable r13, $r54;
        java.lang.String $r14, $r26, $r29, $r31, $r43;
        java.lang.Object $r16, $r33, $r36, $r48, r55, r65;
        boolean $z0, $z1, $z3, $z4;
        androidx.camera.camera2.impl.Camera2ImplConfig$Builder $r18, r61;
        java.util.Set $r20;
        androidx.camera.camera2.impl.Camera2ImplConfig $r21;
        int $i0, $i1, $i2, $i3;
        android.os.HandlerThread $r24, $r25;
        java.lang.StringBuilder $r27, $r28, $r30;
        androidx.camera.core.impl.SessionConfig $r32;
        java.lang.Integer $r40, $r50;
        androidx.camera.core.impl.SessionConfig$OutputConfig$Builder $r42, $r44, r59;
        androidx.camera.core.impl.SessionProcessorSurface $r53, r58;
        androidx.camera.core.impl.SessionConfig$OutputConfig $r60;
        android.hardware.camera2.CaptureRequest$Key r63, r64;

        r0 := @this: androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase;

        r1 := @parameter0: androidx.camera.core.CameraInfo;

        r2 := @parameter1: androidx.camera.core.impl.OutputSurface;

        r3 := @parameter2: androidx.camera.core.impl.OutputSurface;

        r4 := @parameter3: androidx.camera.core.impl.OutputSurface;

        r5 = staticinvoke <androidx.camera.camera2.interop.Camera2CameraInfo: androidx.camera.camera2.interop.Camera2CameraInfo 'from'(androidx.camera.core.CameraInfo)>(r1);

        r6 = virtualinvoke r5.<androidx.camera.camera2.interop.Camera2CameraInfo: java.util.Map getCameraCharacteristicsMap()>();

        $r14 = virtualinvoke r5.<androidx.camera.camera2.interop.Camera2CameraInfo: java.lang.String getCameraId()>();

        r7 = virtualinvoke r0.<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase: androidx.camera.extensions.internal.sessionprocessor.Camera2SessionConfig initSessionInternal(java.lang.String,java.util.Map,androidx.camera.core.impl.OutputSurface,androidx.camera.core.impl.OutputSurface,androidx.camera.core.impl.OutputSurface)>($r14, r6, r2, r3, r4);

        $r15 = new androidx.camera.core.impl.SessionConfig$Builder;

        specialinvoke $r15.<androidx.camera.core.impl.SessionConfig$Builder: void <init>()>();

        r8 = $r15;

        $r16 = r0.<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase: java.lang.Object mLock>;

        r55 = $r16;

        entermonitor $r16;

     label01:
        $r17 = interfaceinvoke r7.<androidx.camera.extensions.internal.sessionprocessor.Camera2SessionConfig: java.util.List getOutputConfigs()>();

        r56 = interfaceinvoke $r17.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r56.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r36 = interfaceinvoke r56.<java.util.Iterator: java.lang.Object next()>();

        r57 = (androidx.camera.extensions.internal.sessionprocessor.Camera2OutputConfig) $r36;

        $r37 = r0.<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase: java.util.Map mImageReaderMap>;

        r58 = staticinvoke <androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase: androidx.camera.core.impl.SessionProcessorSurface createOutputConfigSurface(androidx.camera.extensions.internal.sessionprocessor.Camera2OutputConfig,java.util.Map)>(r57, $r37);

        $r38 = r0.<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase: java.util.List mSurfacesList>;

        interfaceinvoke $r38.<java.util.List: boolean add(java.lang.Object)>(r58);

        $r39 = r0.<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase: java.util.Map mOutputConfigMap>;

        $i1 = interfaceinvoke r57.<androidx.camera.extensions.internal.sessionprocessor.Camera2OutputConfig: int getId()>();

        $r40 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        interfaceinvoke $r39.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r40, r57);

        $r42 = staticinvoke <androidx.camera.core.impl.SessionConfig$OutputConfig: androidx.camera.core.impl.SessionConfig$OutputConfig$Builder builder(androidx.camera.core.impl.DeferrableSurface)>(r58);

        $r43 = interfaceinvoke r57.<androidx.camera.extensions.internal.sessionprocessor.Camera2OutputConfig: java.lang.String getPhysicalCameraId()>();

        $r44 = virtualinvoke $r42.<androidx.camera.core.impl.SessionConfig$OutputConfig$Builder: androidx.camera.core.impl.SessionConfig$OutputConfig$Builder setPhysicalCameraId(java.lang.String)>($r43);

        $i2 = interfaceinvoke r57.<androidx.camera.extensions.internal.sessionprocessor.Camera2OutputConfig: int getSurfaceGroupId()>();

        r59 = virtualinvoke $r44.<androidx.camera.core.impl.SessionConfig$OutputConfig$Builder: androidx.camera.core.impl.SessionConfig$OutputConfig$Builder setSurfaceGroupId(int)>($i2);

        r9 = interfaceinvoke r57.<androidx.camera.extensions.internal.sessionprocessor.Camera2OutputConfig: java.util.List getSurfaceSharingOutputConfigs()>();

        if r9 == null goto label05;

        $z3 = interfaceinvoke r9.<java.util.List: boolean isEmpty()>();

        if $z3 != 0 goto label05;

        $r46 = new java.util.ArrayList;

        specialinvoke $r46.<java.util.ArrayList: void <init>()>();

        r10 = $r46;

        r11 = interfaceinvoke r9.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z4 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label04;

        $r48 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        r12 = (androidx.camera.extensions.internal.sessionprocessor.Camera2OutputConfig) $r48;

        $r49 = r0.<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase: java.util.Map mOutputConfigMap>;

        $i3 = interfaceinvoke r12.<androidx.camera.extensions.internal.sessionprocessor.Camera2OutputConfig: int getId()>();

        $r50 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        interfaceinvoke $r49.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r50, r12);

        $r52 = r0.<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase: java.util.Map mImageReaderMap>;

        $r53 = staticinvoke <androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase: androidx.camera.core.impl.SessionProcessorSurface createOutputConfigSurface(androidx.camera.extensions.internal.sessionprocessor.Camera2OutputConfig,java.util.Map)>(r12, $r52);

        interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>($r53);

        goto label03;

     label04:
        virtualinvoke r59.<androidx.camera.core.impl.SessionConfig$OutputConfig$Builder: androidx.camera.core.impl.SessionConfig$OutputConfig$Builder setSharedSurfaces(java.util.List)>(r10);

     label05:
        $r60 = virtualinvoke r59.<androidx.camera.core.impl.SessionConfig$OutputConfig$Builder: androidx.camera.core.impl.SessionConfig$OutputConfig build()>();

        virtualinvoke r8.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder addOutputConfig(androidx.camera.core.impl.SessionConfig$OutputConfig)>($r60);

        goto label02;

     label06:
        exitmonitor r55;

     label07:
        goto label10;

     label08:
        $r54 := @caughtexception;

        r13 = $r54;

        exitmonitor r55;

     label09:
        throw r13;

     label10:
        $r18 = new androidx.camera.camera2.impl.Camera2ImplConfig$Builder;

        specialinvoke $r18.<androidx.camera.camera2.impl.Camera2ImplConfig$Builder: void <init>()>();

        r61 = $r18;

        $r19 = interfaceinvoke r7.<androidx.camera.extensions.internal.sessionprocessor.Camera2SessionConfig: java.util.Map getSessionParameters()>();

        $r20 = interfaceinvoke $r19.<java.util.Map: java.util.Set keySet()>();

        r62 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>();

     label11:
        $z1 = interfaceinvoke r62.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label12;

        $r33 = interfaceinvoke r62.<java.util.Iterator: java.lang.Object next()>();

        r63 = (android.hardware.camera2.CaptureRequest$Key) $r33;

        r64 = r63;

        $r34 = interfaceinvoke r7.<androidx.camera.extensions.internal.sessionprocessor.Camera2SessionConfig: java.util.Map getSessionParameters()>();

        r65 = interfaceinvoke $r34.<java.util.Map: java.lang.Object get(java.lang.Object)>(r64);

        virtualinvoke r61.<androidx.camera.camera2.impl.Camera2ImplConfig$Builder: androidx.camera.camera2.impl.Camera2ImplConfig$Builder setCaptureRequestOption(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>(r64, r65);

        goto label11;

     label12:
        $r21 = virtualinvoke r61.<androidx.camera.camera2.impl.Camera2ImplConfig$Builder: androidx.camera.camera2.impl.Camera2ImplConfig build()>();

        virtualinvoke r8.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder setImplementationOptions(androidx.camera.core.impl.Config)>($r21);

        $i0 = interfaceinvoke r7.<androidx.camera.extensions.internal.sessionprocessor.Camera2SessionConfig: int getSessionTemplateId()>();

        virtualinvoke r8.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder setTemplateType(int)>($i0);

        $r24 = new android.os.HandlerThread;

        specialinvoke $r24.<android.os.HandlerThread: void <init>(java.lang.String)>("CameraX-extensions_image_reader");

        r0.<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase: android.os.HandlerThread mImageReaderHandlerThread> = $r24;

        $r25 = r0.<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase: android.os.HandlerThread mImageReaderHandlerThread>;

        virtualinvoke $r25.<android.os.HandlerThread: void start()>();

        $r26 = virtualinvoke r5.<androidx.camera.camera2.interop.Camera2CameraInfo: java.lang.String getCameraId()>();

        r0.<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase: java.lang.String mCameraId> = $r26;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("initSession: cameraId=");

        $r29 = r0.<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase: java.lang.String mCameraId>;

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("SessionProcessorBase", $r31);

        $r32 = virtualinvoke r8.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig build()>();

        return $r32;

        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase: androidx.camera.extensions.internal.sessionprocessor.Camera2SessionConfig initSessionInternal(java.lang.String,java.util.Map,androidx.camera.core.impl.OutputSurface,androidx.camera.core.impl.OutputSurface,androidx.camera.core.impl.OutputSurface)>
    protected void setImageProcessor(int, androidx.camera.extensions.internal.sessionprocessor.ImageProcessor)
    {
        androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase r0;
        int i0;
        androidx.camera.extensions.internal.sessionprocessor.ImageProcessor r1;
        android.media.ImageReader r2;
        java.lang.String r3, $r19;
        java.lang.Object r4, $r7, $r10, $r13;
        androidx.camera.extensions.internal.sessionprocessor.Camera2OutputConfig r5;
        java.lang.Throwable r6, $r18;
        java.util.Map $r8, $r11;
        java.lang.Integer $r9, $r12;
        android.media.ImageReader$OnImageAvailableListener $r14;
        android.os.Handler $r15;
        android.os.HandlerThread $r16;
        android.os.Looper $r17;

        r0 := @this: androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.camera.extensions.internal.sessionprocessor.ImageProcessor;

        $r7 = r0.<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase: java.lang.Object mLock>;

        r4 = $r7;

        entermonitor $r7;

     label1:
        $r8 = r0.<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase: java.util.Map mImageReaderMap>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r10 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9);

        r2 = (android.media.ImageReader) $r10;

        $r11 = r0.<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase: java.util.Map mOutputConfigMap>;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r13 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>($r12);

        r5 = (androidx.camera.extensions.internal.sessionprocessor.Camera2OutputConfig) $r13;

        if r5 != null goto label2;

        $r19 = null;

        goto label3;

     label2:
        $r19 = interfaceinvoke r5.<androidx.camera.extensions.internal.sessionprocessor.Camera2OutputConfig: java.lang.String getPhysicalCameraId()>();

     label3:
        r3 = $r19;

        exitmonitor r4;

     label4:
        goto label7;

     label5:
        $r18 := @caughtexception;

        r6 = $r18;

        exitmonitor r4;

     label6:
        throw r6;

     label7:
        if r2 == null goto label8;

        $r14 = dynamicinvoke "onImageAvailable" <android.media.ImageReader$OnImageAvailableListener (androidx.camera.extensions.internal.sessionprocessor.ImageProcessor,int,java.lang.String)>(r1, i0, r3) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(android.media.ImageReader), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase: void lambda$setImageProcessor$1(androidx.camera.extensions.internal.sessionprocessor.ImageProcessor,int,java.lang.String,android.media.ImageReader)>, methodtype: void __METHODTYPE__(android.media.ImageReader));

        $r15 = new android.os.Handler;

        $r16 = r0.<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase: android.os.HandlerThread mImageReaderHandlerThread>;

        $r17 = virtualinvoke $r16.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r15.<android.os.Handler: void <init>(android.os.Looper)>($r17);

        virtualinvoke r2.<android.media.ImageReader: void setOnImageAvailableListener(android.media.ImageReader$OnImageAvailableListener,android.os.Handler)>($r14, $r15);

     label8:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public final void deInitSession()
    {
        androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase r0;
        java.lang.Object r1, $r10, $r17;
        java.util.Iterator r2;
        androidx.camera.core.impl.DeferrableSurface r3;
        java.lang.Throwable r4, $r18;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.String $r7, $r9;
        java.util.List $r11, $r12;
        boolean $z0;
        java.util.Map $r13, $r14;
        android.os.HandlerThread $r15, $r16;

        r0 := @this: androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("deInitSession: cameraId=");

        $r7 = r0.<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase: java.lang.String mCameraId>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String)>("SessionProcessorBase", $r9);

        virtualinvoke r0.<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase: void deInitSessionInternal()>();

        $r10 = r0.<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase: java.lang.Object mLock>;

        r1 = $r10;

        entermonitor $r10;

     label1:
        $r11 = r0.<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase: java.util.List mSurfacesList>;

        r2 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r17 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.camera.core.impl.DeferrableSurface) $r17;

        virtualinvoke r3.<androidx.camera.core.impl.DeferrableSurface: void close()>();

        goto label2;

     label3:
        $r12 = r0.<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase: java.util.List mSurfacesList>;

        interfaceinvoke $r12.<java.util.List: void clear()>();

        $r13 = r0.<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase: java.util.Map mImageReaderMap>;

        interfaceinvoke $r13.<java.util.Map: void clear()>();

        $r14 = r0.<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase: java.util.Map mOutputConfigMap>;

        interfaceinvoke $r14.<java.util.Map: void clear()>();

        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r18 := @caughtexception;

        r4 = $r18;

        exitmonitor r1;

     label6:
        throw r4;

     label7:
        $r15 = r0.<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase: android.os.HandlerThread mImageReaderHandlerThread>;

        if $r15 == null goto label8;

        $r16 = r0.<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase: android.os.HandlerThread mImageReaderHandlerThread>;

        virtualinvoke $r16.<android.os.HandlerThread: boolean quitSafely()>();

        r0.<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase: android.os.HandlerThread mImageReaderHandlerThread> = null;

     label8:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase: void deInitSessionInternal()>
    private static void lambda$setImageProcessor$1(androidx.camera.extensions.internal.sessionprocessor.ImageProcessor, int, java.lang.String, android.media.ImageReader)
    {
        androidx.camera.extensions.internal.sessionprocessor.ImageProcessor r0;
        int i0;
        java.lang.String r1;
        android.media.ImageReader r2;
        androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase$ImageRefHolder r3, $r4;
        long $l1;
        java.lang.Throwable $r5, r7;
        android.media.Image r6;

        r0 := @parameter0: androidx.camera.extensions.internal.sessionprocessor.ImageProcessor;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: android.media.ImageReader;

     label1:
        r6 = virtualinvoke r2.<android.media.ImageReader: android.media.Image acquireNextImage()>();

        $r4 = new androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase$ImageRefHolder;

        specialinvoke $r4.<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase$ImageRefHolder: void <init>(android.media.Image)>(r6);

        r3 = $r4;

        $l1 = virtualinvoke r6.<android.media.Image: long getTimestamp()>();

        interfaceinvoke r0.<androidx.camera.extensions.internal.sessionprocessor.ImageProcessor: void onNextImageAvailable(int,long,androidx.camera.extensions.internal.sessionprocessor.ImageReference,java.lang.String)>(i0, $l1, r3, r1);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r7 = $r5;

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("SessionProcessorBase", "Failed to acquire next image.", r7);

     label4:
        return;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    private static void lambda$createOutputConfigSurface$0(android.media.ImageReader)
    {
        android.media.ImageReader r0;

        r0 := @parameter0: android.media.ImageReader;

        virtualinvoke r0.<android.media.ImageReader: void close()>();

        return;
    }

androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase$ImageRefHolder
<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase$ImageRefHolder: int mRefCount>
<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase$ImageRefHolder: android.media.Image mImage>
<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase$ImageRefHolder: java.lang.Object mImageLock>
    void <init>(android.media.Image)
    {
        androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase$ImageRefHolder r0;
        android.media.Image r1;
        java.lang.Object $r2;

        r0 := @this: androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase$ImageRefHolder;

        r1 := @parameter0: android.media.Image;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase$ImageRefHolder: java.lang.Object mImageLock> = $r2;

        r0.<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase$ImageRefHolder: int mRefCount> = 1;

        r0.<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase$ImageRefHolder: android.media.Image mImage> = r1;

        return;
    }

    public boolean increment()
    {
        androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase$ImageRefHolder r0;
        java.lang.Object r1, $r2;
        int $i0, $i1, $i2;

        r0 := @this: androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase$ImageRefHolder;

        $r2 = r0.<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase$ImageRefHolder: java.lang.Object mImageLock>;

        r1 = $r2;

        entermonitor $r2;

        $i0 = r0.<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase$ImageRefHolder: int mRefCount>;

        if $i0 > 0 goto label1;

        exitmonitor r1;

        return 0;

     label1:
        $i1 = r0.<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase$ImageRefHolder: int mRefCount>;

        $i2 = $i1 + 1;

        r0.<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase$ImageRefHolder: int mRefCount> = $i2;

        exitmonitor r1;

        goto label2;

     label2:
        return 1;
    }

    public boolean decrement()
    {
        androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase$ImageRefHolder r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        int $i0, $i1, $i2, $i3;
        android.media.Image $r4;

        r0 := @this: androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase$ImageRefHolder;

        $r3 = r0.<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase$ImageRefHolder: java.lang.Object mImageLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $i0 = r0.<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase$ImageRefHolder: int mRefCount>;

        if $i0 > 0 goto label3;

        exitmonitor r1;

     label2:
        return 0;

     label3:
        $i1 = r0.<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase$ImageRefHolder: int mRefCount>;

        $i2 = $i1 - 1;

        r0.<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase$ImageRefHolder: int mRefCount> = $i2;

        $i3 = r0.<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase$ImageRefHolder: int mRefCount>;

        if $i3 > 0 goto label4;

        $r4 = r0.<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase$ImageRefHolder: android.media.Image mImage>;

        virtualinvoke $r4.<android.media.Image: void close()>();

     label4:
        exitmonitor r1;

     label5:
        goto label8;

     label6:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label7:
        throw r2;

     label8:
        return 1;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public android.media.Image get()
    {
        androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase$ImageRefHolder r0;
        android.media.Image $r1;

        r0 := @this: androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase$ImageRefHolder;

        $r1 = r0.<androidx.camera.extensions.internal.sessionprocessor.SessionProcessorBase$ImageRefHolder: android.media.Image mImage>;

        return $r1;
    }

