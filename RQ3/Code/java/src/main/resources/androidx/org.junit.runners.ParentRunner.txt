org.junit.runners.ParentRunner
<org.junit.runners.ParentRunner: java.util.List VALIDATORS>
<org.junit.runners.ParentRunner: java.lang.Object childrenLock>
<org.junit.runners.ParentRunner: java.util.Collection filteredChildren>
<org.junit.runners.ParentRunner: org.junit.runners.model.RunnerScheduler scheduler>
<org.junit.runners.ParentRunner: org.junit.runners.model.TestClass testClass>
    static void <clinit>()
    {
        java.util.List $r0;
        org.junit.validator.TestClassValidator[] $r1;
        org.junit.validator.AnnotationsValidator $r2;
        org.junit.validator.PublicClassValidator $r3;

        $r1 = newarray (org.junit.validator.TestClassValidator)[2];

        $r2 = new org.junit.validator.AnnotationsValidator;

        specialinvoke $r2.<org.junit.validator.AnnotationsValidator: void <init>()>();

        $r1[0] = $r2;

        $r3 = new org.junit.validator.PublicClassValidator;

        specialinvoke $r3.<org.junit.validator.PublicClassValidator: void <init>()>();

        $r1[1] = $r3;

        $r0 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        <org.junit.runners.ParentRunner: java.util.List VALIDATORS> = $r0;

        return;
    }

    protected void <init>(java.lang.Class) throws org.junit.runners.model.InitializationError
    {
        org.junit.runners.ParentRunner $r0;
        java.lang.Class $r1;
        org.junit.runners.model.TestClass $r2;
        java.lang.Object $r3;
        org.junit.runners.ParentRunner$1 $r4;

        $r0 := @this: org.junit.runners.ParentRunner;

        $r1 := @parameter0: java.lang.Class;

        specialinvoke $r0.<org.junit.runner.Runner: void <init>()>();

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        $r0.<org.junit.runners.ParentRunner: java.lang.Object childrenLock> = $r3;

        $r0.<org.junit.runners.ParentRunner: java.util.Collection filteredChildren> = null;

        $r4 = new org.junit.runners.ParentRunner$1;

        specialinvoke $r4.<org.junit.runners.ParentRunner$1: void <init>(org.junit.runners.ParentRunner)>($r0);

        $r0.<org.junit.runners.ParentRunner: org.junit.runners.model.RunnerScheduler scheduler> = $r4;

        $r2 = virtualinvoke $r0.<org.junit.runners.ParentRunner: org.junit.runners.model.TestClass createTestClass(java.lang.Class)>($r1);

        $r0.<org.junit.runners.ParentRunner: org.junit.runners.model.TestClass testClass> = $r2;

        specialinvoke $r0.<org.junit.runners.ParentRunner: void validate()>();

        return;
    }

    static void access$000(org.junit.runners.ParentRunner, org.junit.runner.notification.RunNotifier)
    {
        org.junit.runners.ParentRunner $r0;
        org.junit.runner.notification.RunNotifier $r1;

        $r0 := @parameter0: org.junit.runners.ParentRunner;

        $r1 := @parameter1: org.junit.runner.notification.RunNotifier;

        specialinvoke $r0.<org.junit.runners.ParentRunner: void runChildren(org.junit.runner.notification.RunNotifier)>($r1);

        return;
    }

    private void applyValidators(java.util.List)
    {
        org.junit.runners.ParentRunner $r0;
        java.util.List $r1, $r4;
        org.junit.runners.model.TestClass $r2;
        java.lang.Class $r3;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        org.junit.validator.TestClassValidator $r7;

        $r0 := @this: org.junit.runners.ParentRunner;

        $r1 := @parameter0: java.util.List;

        $r2 = virtualinvoke $r0.<org.junit.runners.ParentRunner: org.junit.runners.model.TestClass getTestClass()>();

        $r3 = virtualinvoke $r2.<org.junit.runners.model.TestClass: java.lang.Class getJavaClass()>();

        if $r3 == null goto label2;

        $r4 = <org.junit.runners.ParentRunner: java.util.List VALIDATORS>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (org.junit.validator.TestClassValidator) $r6;

        $r2 = virtualinvoke $r0.<org.junit.runners.ParentRunner: org.junit.runners.model.TestClass getTestClass()>();

        $r4 = interfaceinvoke $r7.<org.junit.validator.TestClassValidator: java.util.List validateTestClass(org.junit.runners.model.TestClass)>($r2);

        interfaceinvoke $r1.<java.util.List: boolean addAll(java.util.Collection)>($r4);

        goto label1;

     label2:
        return;
    }

    private boolean areAllChildrenIgnored()
    {
        org.junit.runners.ParentRunner $r0;
        java.util.Collection $r1;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3;

        $r0 := @this: org.junit.runners.ParentRunner;

        $r1 = specialinvoke $r0.<org.junit.runners.ParentRunner: java.util.Collection getFilteredChildren()>();

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $z0 = virtualinvoke $r0.<org.junit.runners.ParentRunner: boolean isIgnored(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        return 0;

     label2:
        return 1;
    }

    private java.util.Comparator comparator(org.junit.runner.manipulation.Sorter)
    {
        org.junit.runners.ParentRunner $r0;
        org.junit.runner.manipulation.Sorter $r1;
        org.junit.runners.ParentRunner$4 $r2;

        $r0 := @this: org.junit.runners.ParentRunner;

        $r1 := @parameter0: org.junit.runner.manipulation.Sorter;

        $r2 = new org.junit.runners.ParentRunner$4;

        specialinvoke $r2.<org.junit.runners.ParentRunner$4: void <init>(org.junit.runners.ParentRunner,org.junit.runner.manipulation.Sorter)>($r0, $r1);

        return $r2;
    }

    private java.util.Collection getFilteredChildren()
    {
        org.junit.runners.ParentRunner $r0;
        java.lang.Object $r1;
        java.util.Collection $r2;
        java.util.List $r3;
        java.lang.Throwable $r4;

        $r0 := @this: org.junit.runners.ParentRunner;

        $r2 = $r0.<org.junit.runners.ParentRunner: java.util.Collection filteredChildren>;

        if $r2 != null goto label3;

        $r1 = $r0.<org.junit.runners.ParentRunner: java.lang.Object childrenLock>;

        entermonitor $r1;

     label1:
        $r2 = $r0.<org.junit.runners.ParentRunner: java.util.Collection filteredChildren>;

        if $r2 != null goto label2;

        $r3 = virtualinvoke $r0.<org.junit.runners.ParentRunner: java.util.List getChildren()>();

        $r2 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r3);

        $r0.<org.junit.runners.ParentRunner: java.util.Collection filteredChildren> = $r2;

     label2:
        exitmonitor $r1;

     label3:
        $r2 = $r0.<org.junit.runners.ParentRunner: java.util.Collection filteredChildren>;

        return $r2;

     label4:
        $r4 := @caughtexception;

        exitmonitor $r1;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    private void runChildren(org.junit.runner.notification.RunNotifier)
    {
        org.junit.runners.ParentRunner $r0;
        org.junit.runner.notification.RunNotifier $r1;
        org.junit.runners.model.RunnerScheduler $r2;
        org.junit.runners.ParentRunner$3 $r3;
        java.util.Collection $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.Throwable $r7;

        $r0 := @this: org.junit.runners.ParentRunner;

        $r1 := @parameter0: org.junit.runner.notification.RunNotifier;

        $r2 = $r0.<org.junit.runners.ParentRunner: org.junit.runners.model.RunnerScheduler scheduler>;

     label1:
        $r4 = specialinvoke $r0.<org.junit.runners.ParentRunner: java.util.Collection getFilteredChildren()>();

        $r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

     label3:
        if $z0 == 0 goto label9;

     label4:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

     label5:
        $r3 = new org.junit.runners.ParentRunner$3;

     label6:
        specialinvoke $r3.<org.junit.runners.ParentRunner$3: void <init>(org.junit.runners.ParentRunner,java.lang.Object,org.junit.runner.notification.RunNotifier)>($r0, $r6, $r1);

        interfaceinvoke $r2.<org.junit.runners.model.RunnerScheduler: void schedule(java.lang.Runnable)>($r3);

     label7:
        goto label2;

     label8:
        $r7 := @caughtexception;

        interfaceinvoke $r2.<org.junit.runners.model.RunnerScheduler: void finished()>();

        throw $r7;

     label9:
        interfaceinvoke $r2.<org.junit.runners.model.RunnerScheduler: void finished()>();

        return;

        catch java.lang.Throwable from label1 to label3 with label8;
        catch java.lang.Throwable from label4 to label5 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    private boolean shouldRun(org.junit.runner.manipulation.Filter, java.lang.Object)
    {
        org.junit.runners.ParentRunner $r0;
        org.junit.runner.manipulation.Filter $r1;
        java.lang.Object $r2;
        org.junit.runner.Description $r3;
        boolean $z0;

        $r0 := @this: org.junit.runners.ParentRunner;

        $r1 := @parameter0: org.junit.runner.manipulation.Filter;

        $r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke $r0.<org.junit.runners.ParentRunner: org.junit.runner.Description describeChild(java.lang.Object)>($r2);

        $z0 = virtualinvoke $r1.<org.junit.runner.manipulation.Filter: boolean shouldRun(org.junit.runner.Description)>($r3);

        return $z0;
    }

    private void validate() throws org.junit.runners.model.InitializationError
    {
        org.junit.runners.ParentRunner $r0;
        java.util.ArrayList $r1;
        boolean $z0;
        org.junit.runners.model.InitializationError $r2;

        $r0 := @this: org.junit.runners.ParentRunner;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        virtualinvoke $r0.<org.junit.runners.ParentRunner: void collectInitializationErrors(java.util.List)>($r1);

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r2 = new org.junit.runners.model.InitializationError;

        specialinvoke $r2.<org.junit.runners.model.InitializationError: void <init>(java.util.List)>($r1);

        throw $r2;

     label1:
        return;
    }

    private void validateClassRules(java.util.List)
    {
        org.junit.runners.ParentRunner $r0;
        java.util.List $r1;
        org.junit.internal.runners.rules.RuleMemberValidator $r2;
        org.junit.runners.model.TestClass $r3;

        $r0 := @this: org.junit.runners.ParentRunner;

        $r1 := @parameter0: java.util.List;

        $r2 = <org.junit.internal.runners.rules.RuleMemberValidator: org.junit.internal.runners.rules.RuleMemberValidator CLASS_RULE_VALIDATOR>;

        $r3 = virtualinvoke $r0.<org.junit.runners.ParentRunner: org.junit.runners.model.TestClass getTestClass()>();

        virtualinvoke $r2.<org.junit.internal.runners.rules.RuleMemberValidator: void validate(org.junit.runners.model.TestClass,java.util.List)>($r3, $r1);

        $r2 = <org.junit.internal.runners.rules.RuleMemberValidator: org.junit.internal.runners.rules.RuleMemberValidator CLASS_RULE_METHOD_VALIDATOR>;

        $r3 = virtualinvoke $r0.<org.junit.runners.ParentRunner: org.junit.runners.model.TestClass getTestClass()>();

        virtualinvoke $r2.<org.junit.internal.runners.rules.RuleMemberValidator: void validate(org.junit.runners.model.TestClass,java.util.List)>($r3, $r1);

        return;
    }

    private org.junit.runners.model.Statement withClassRules(org.junit.runners.model.Statement)
    {
        org.junit.runners.ParentRunner $r0;
        org.junit.runners.model.Statement $r1;
        java.util.List $r2;
        boolean $z0;
        org.junit.rules.RunRules $r3;
        org.junit.runner.Description $r4;

        $r0 := @this: org.junit.runners.ParentRunner;

        $r1 := @parameter0: org.junit.runners.model.Statement;

        $r2 = virtualinvoke $r0.<org.junit.runners.ParentRunner: java.util.List classRules()>();

        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return $r1;

     label1:
        $r3 = new org.junit.rules.RunRules;

        $r4 = virtualinvoke $r0.<org.junit.runners.ParentRunner: org.junit.runner.Description getDescription()>();

        specialinvoke $r3.<org.junit.rules.RunRules: void <init>(org.junit.runners.model.Statement,java.lang.Iterable,org.junit.runner.Description)>($r1, $r2, $r4);

        return $r3;
    }

    protected org.junit.runners.model.Statement childrenInvoker(org.junit.runner.notification.RunNotifier)
    {
        org.junit.runners.ParentRunner $r0;
        org.junit.runner.notification.RunNotifier $r1;
        org.junit.runners.ParentRunner$2 $r2;

        $r0 := @this: org.junit.runners.ParentRunner;

        $r1 := @parameter0: org.junit.runner.notification.RunNotifier;

        $r2 = new org.junit.runners.ParentRunner$2;

        specialinvoke $r2.<org.junit.runners.ParentRunner$2: void <init>(org.junit.runners.ParentRunner,org.junit.runner.notification.RunNotifier)>($r0, $r1);

        return $r2;
    }

    protected org.junit.runners.model.Statement classBlock(org.junit.runner.notification.RunNotifier)
    {
        org.junit.runners.ParentRunner $r0;
        org.junit.runner.notification.RunNotifier $r1;
        org.junit.runners.model.Statement $r2;
        boolean $z0;

        $r0 := @this: org.junit.runners.ParentRunner;

        $r1 := @parameter0: org.junit.runner.notification.RunNotifier;

        $r2 = virtualinvoke $r0.<org.junit.runners.ParentRunner: org.junit.runners.model.Statement childrenInvoker(org.junit.runner.notification.RunNotifier)>($r1);

        $z0 = specialinvoke $r0.<org.junit.runners.ParentRunner: boolean areAllChildrenIgnored()>();

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke $r0.<org.junit.runners.ParentRunner: org.junit.runners.model.Statement withBeforeClasses(org.junit.runners.model.Statement)>($r2);

        $r2 = virtualinvoke $r0.<org.junit.runners.ParentRunner: org.junit.runners.model.Statement withAfterClasses(org.junit.runners.model.Statement)>($r2);

        $r2 = specialinvoke $r0.<org.junit.runners.ParentRunner: org.junit.runners.model.Statement withClassRules(org.junit.runners.model.Statement)>($r2);

     label1:
        return $r2;
    }

    protected java.util.List classRules()
    {
        org.junit.runners.ParentRunner $r0;
        org.junit.runners.model.TestClass $r1;
        java.util.List $r2, $r3;

        $r0 := @this: org.junit.runners.ParentRunner;

        $r1 = $r0.<org.junit.runners.ParentRunner: org.junit.runners.model.TestClass testClass>;

        $r2 = virtualinvoke $r1.<org.junit.runners.model.TestClass: java.util.List getAnnotatedMethodValues(java.lang.Object,java.lang.Class,java.lang.Class)>(null, class "Lorg/junit/ClassRule;", class "Lorg/junit/rules/TestRule;");

        $r1 = $r0.<org.junit.runners.ParentRunner: org.junit.runners.model.TestClass testClass>;

        $r3 = virtualinvoke $r1.<org.junit.runners.model.TestClass: java.util.List getAnnotatedFieldValues(java.lang.Object,java.lang.Class,java.lang.Class)>(null, class "Lorg/junit/ClassRule;", class "Lorg/junit/rules/TestRule;");

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>($r3);

        return $r2;
    }

    protected void collectInitializationErrors(java.util.List)
    {
        org.junit.runners.ParentRunner $r0;
        java.util.List $r1;

        $r0 := @this: org.junit.runners.ParentRunner;

        $r1 := @parameter0: java.util.List;

        virtualinvoke $r0.<org.junit.runners.ParentRunner: void validatePublicVoidNoArgMethods(java.lang.Class,boolean,java.util.List)>(class "Lorg/junit/BeforeClass;", 1, $r1);

        virtualinvoke $r0.<org.junit.runners.ParentRunner: void validatePublicVoidNoArgMethods(java.lang.Class,boolean,java.util.List)>(class "Lorg/junit/AfterClass;", 1, $r1);

        specialinvoke $r0.<org.junit.runners.ParentRunner: void validateClassRules(java.util.List)>($r1);

        specialinvoke $r0.<org.junit.runners.ParentRunner: void applyValidators(java.util.List)>($r1);

        return;
    }

    protected org.junit.runners.model.TestClass createTestClass(java.lang.Class)
    {
        org.junit.runners.ParentRunner $r0;
        java.lang.Class $r1;
        org.junit.runners.model.TestClass $r2;

        $r0 := @this: org.junit.runners.ParentRunner;

        $r1 := @parameter0: java.lang.Class;

        $r2 = new org.junit.runners.model.TestClass;

        specialinvoke $r2.<org.junit.runners.model.TestClass: void <init>(java.lang.Class)>($r1);

        return $r2;
    }

<org.junit.runners.ParentRunner: org.junit.runner.Description describeChild(java.lang.Object)>
    public void filter(org.junit.runner.manipulation.Filter) throws org.junit.runner.manipulation.NoTestsRemainException
    {
        org.junit.runners.ParentRunner $r0;
        org.junit.runner.manipulation.Filter $r1;
        java.lang.Object $r2, $r6;
        java.util.ArrayList $r3, r8;
        java.util.Collection $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Throwable $r7;
        org.junit.runner.manipulation.NoTestsRemainException r9;

        $r0 := @this: org.junit.runners.ParentRunner;

        $r1 := @parameter0: org.junit.runner.manipulation.Filter;

        $r2 = $r0.<org.junit.runners.ParentRunner: java.lang.Object childrenLock>;

        entermonitor $r2;

     label01:
        r8 = new java.util.ArrayList;

        $r3 = r8;

        $r4 = specialinvoke $r0.<org.junit.runners.ParentRunner: java.util.Collection getFilteredChildren()>();

        specialinvoke r8.<java.util.ArrayList: void <init>(java.util.Collection)>($r4);

        $r5 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $z0 = specialinvoke $r0.<org.junit.runners.ParentRunner: boolean shouldRun(org.junit.runner.manipulation.Filter,java.lang.Object)>($r1, $r6);

     label03:
        if $z0 == 0 goto label08;

     label04:
        virtualinvoke $r1.<org.junit.runner.manipulation.Filter: void apply(java.lang.Object)>($r6);

     label05:
        goto label02;

     label06:
        $r7 := @caughtexception;

     label07:
        exitmonitor $r2;

        throw $r7;

     label08:
        interfaceinvoke $r5.<java.util.Iterator: void remove()>();

        goto label02;

     label09:
        $r4 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r3);

        $r0.<org.junit.runners.ParentRunner: java.util.Collection filteredChildren> = $r4;

        $r4 = $r0.<org.junit.runners.ParentRunner: java.util.Collection filteredChildren>;

        $z0 = interfaceinvoke $r4.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label10;

        r9 = new org.junit.runner.manipulation.NoTestsRemainException;

        specialinvoke r9.<org.junit.runner.manipulation.NoTestsRemainException: void <init>()>();

        $r7 = (java.lang.Throwable) r9;

        throw $r7;

     label10:
        exitmonitor $r2;

        return;

        catch java.lang.Throwable from label01 to label03 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label08 to label10 with label06;
    }

<org.junit.runners.ParentRunner: java.util.List getChildren()>
    public org.junit.runner.Description getDescription()
    {
        org.junit.runners.ParentRunner $r0;
        java.lang.String $r1;
        java.lang.'annotation'.Annotation[] $r2;
        org.junit.runner.Description $r3, $r7;
        java.util.Collection $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;

        $r0 := @this: org.junit.runners.ParentRunner;

        $r1 = virtualinvoke $r0.<org.junit.runners.ParentRunner: java.lang.String getName()>();

        $r2 = virtualinvoke $r0.<org.junit.runners.ParentRunner: java.lang.'annotation'.Annotation[] getRunnerAnnotations()>();

        $r3 = staticinvoke <org.junit.runner.Description: org.junit.runner.Description createSuiteDescription(java.lang.String,java.lang.'annotation'.Annotation[])>($r1, $r2);

        $r4 = specialinvoke $r0.<org.junit.runners.ParentRunner: java.util.Collection getFilteredChildren()>();

        $r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = virtualinvoke $r0.<org.junit.runners.ParentRunner: org.junit.runner.Description describeChild(java.lang.Object)>($r6);

        virtualinvoke $r3.<org.junit.runner.Description: void addChild(org.junit.runner.Description)>($r7);

        goto label1;

     label2:
        return $r3;
    }

    protected java.lang.String getName()
    {
        org.junit.runners.ParentRunner $r0;
        java.lang.String $r1;
        org.junit.runners.model.TestClass $r2;

        $r0 := @this: org.junit.runners.ParentRunner;

        $r2 = $r0.<org.junit.runners.ParentRunner: org.junit.runners.model.TestClass testClass>;

        $r1 = virtualinvoke $r2.<org.junit.runners.model.TestClass: java.lang.String getName()>();

        return $r1;
    }

    protected java.lang.'annotation'.Annotation[] getRunnerAnnotations()
    {
        org.junit.runners.ParentRunner $r0;
        java.lang.'annotation'.Annotation[] $r1;
        org.junit.runners.model.TestClass $r2;

        $r0 := @this: org.junit.runners.ParentRunner;

        $r2 = $r0.<org.junit.runners.ParentRunner: org.junit.runners.model.TestClass testClass>;

        $r1 = virtualinvoke $r2.<org.junit.runners.model.TestClass: java.lang.'annotation'.Annotation[] getAnnotations()>();

        return $r1;
    }

    public final org.junit.runners.model.TestClass getTestClass()
    {
        org.junit.runners.ParentRunner $r0;
        org.junit.runners.model.TestClass r1;

        $r0 := @this: org.junit.runners.ParentRunner;

        r1 = $r0.<org.junit.runners.ParentRunner: org.junit.runners.model.TestClass testClass>;

        return r1;
    }

    protected boolean isIgnored(java.lang.Object)
    {
        org.junit.runners.ParentRunner $r0;
        java.lang.Object $r1;

        $r0 := @this: org.junit.runners.ParentRunner;

        $r1 := @parameter0: java.lang.Object;

        return 0;
    }

    public void run(org.junit.runner.notification.RunNotifier)
    {
        org.junit.runners.ParentRunner $r0;
        org.junit.runner.notification.RunNotifier $r1;
        org.junit.internal.runners.model.EachTestNotifier $r2;
        org.junit.runner.Description $r3;
        org.junit.runners.model.Statement $r4;
        org.junit.runner.notification.StoppedByUserException $r5;
        java.lang.Throwable $r6;

        $r0 := @this: org.junit.runners.ParentRunner;

        $r1 := @parameter0: org.junit.runner.notification.RunNotifier;

        $r2 = new org.junit.internal.runners.model.EachTestNotifier;

        $r3 = virtualinvoke $r0.<org.junit.runners.ParentRunner: org.junit.runner.Description getDescription()>();

        specialinvoke $r2.<org.junit.internal.runners.model.EachTestNotifier: void <init>(org.junit.runner.notification.RunNotifier,org.junit.runner.Description)>($r1, $r3);

     label1:
        $r4 = virtualinvoke $r0.<org.junit.runners.ParentRunner: org.junit.runners.model.Statement classBlock(org.junit.runner.notification.RunNotifier)>($r1);

        virtualinvoke $r4.<org.junit.runners.model.Statement: void evaluate()>();

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        throw $r5;

     label4:
        $r6 := @caughtexception;

        virtualinvoke $r2.<org.junit.internal.runners.model.EachTestNotifier: void addFailure(java.lang.Throwable)>($r6);

        return;

        catch org.junit.runner.notification.StoppedByUserException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
    }

<org.junit.runners.ParentRunner: void runChild(java.lang.Object,org.junit.runner.notification.RunNotifier)>
    protected final void runLeaf(org.junit.runners.model.Statement, org.junit.runner.Description, org.junit.runner.notification.RunNotifier)
    {
        org.junit.runners.ParentRunner $r0;
        org.junit.runners.model.Statement $r1;
        org.junit.runner.Description $r2;
        org.junit.runner.notification.RunNotifier $r3;
        org.junit.internal.runners.model.EachTestNotifier $r4;
        java.lang.Throwable $r5, $r6;

        $r0 := @this: org.junit.runners.ParentRunner;

        $r1 := @parameter0: org.junit.runners.model.Statement;

        $r2 := @parameter1: org.junit.runner.Description;

        $r3 := @parameter2: org.junit.runner.notification.RunNotifier;

        $r4 = new org.junit.internal.runners.model.EachTestNotifier;

        specialinvoke $r4.<org.junit.internal.runners.model.EachTestNotifier: void <init>(org.junit.runner.notification.RunNotifier,org.junit.runner.Description)>($r3, $r2);

        virtualinvoke $r4.<org.junit.internal.runners.model.EachTestNotifier: void fireTestStarted()>();

     label1:
        virtualinvoke $r1.<org.junit.runners.model.Statement: void evaluate()>();

     label2:
        virtualinvoke $r4.<org.junit.internal.runners.model.EachTestNotifier: void fireTestFinished()>();

        return;

     label3:
        $r5 := @caughtexception;

     label4:
        virtualinvoke $r4.<org.junit.internal.runners.model.EachTestNotifier: void addFailure(java.lang.Throwable)>($r5);

     label5:
        virtualinvoke $r4.<org.junit.internal.runners.model.EachTestNotifier: void fireTestFinished()>();

        return;

     label6:
        $r6 := @caughtexception;

        virtualinvoke $r4.<org.junit.internal.runners.model.EachTestNotifier: void fireTestFinished()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public void sort(org.junit.runner.manipulation.Sorter)
    {
        org.junit.runners.ParentRunner $r0;
        org.junit.runner.manipulation.Sorter $r1;
        java.lang.Object $r2, $r5;
        java.util.Collection $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Throwable $r6;
        java.util.ArrayList $r7;
        java.util.Comparator $r8;

        $r0 := @this: org.junit.runners.ParentRunner;

        $r1 := @parameter0: org.junit.runner.manipulation.Sorter;

        $r2 = $r0.<org.junit.runners.ParentRunner: java.lang.Object childrenLock>;

        entermonitor $r2;

     label1:
        $r3 = specialinvoke $r0.<org.junit.runners.ParentRunner: java.util.Collection getFilteredChildren()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke $r1.<org.junit.runner.manipulation.Sorter: void apply(java.lang.Object)>($r5);

        goto label2;

     label3:
        $r6 := @caughtexception;

     label4:
        exitmonitor $r2;

        throw $r6;

     label5:
        $r7 = new java.util.ArrayList;

        $r3 = specialinvoke $r0.<org.junit.runners.ParentRunner: java.util.Collection getFilteredChildren()>();

        specialinvoke $r7.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        $r8 = specialinvoke $r0.<org.junit.runners.ParentRunner: java.util.Comparator comparator(org.junit.runner.manipulation.Sorter)>($r1);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r7, $r8);

        $r3 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r7);

        $r0.<org.junit.runners.ParentRunner: java.util.Collection filteredChildren> = $r3;

     label6:
        exitmonitor $r2;

        return;

        catch java.lang.Throwable from label1 to label4 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
    }

    protected void validatePublicVoidNoArgMethods(java.lang.Class, boolean, java.util.List)
    {
        org.junit.runners.ParentRunner $r0;
        java.lang.Class $r1;
        boolean $z0, $z1;
        java.util.List $r2, $r4;
        org.junit.runners.model.TestClass $r3;
        java.util.Iterator $r5;
        java.lang.Object $r6;
        org.junit.runners.model.FrameworkMethod $r7;

        $r0 := @this: org.junit.runners.ParentRunner;

        $r1 := @parameter0: java.lang.Class;

        $z0 := @parameter1: boolean;

        $r2 := @parameter2: java.util.List;

        $r3 = virtualinvoke $r0.<org.junit.runners.ParentRunner: org.junit.runners.model.TestClass getTestClass()>();

        $r4 = virtualinvoke $r3.<org.junit.runners.model.TestClass: java.util.List getAnnotatedMethods(java.lang.Class)>($r1);

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (org.junit.runners.model.FrameworkMethod) $r6;

        virtualinvoke $r7.<org.junit.runners.model.FrameworkMethod: void validatePublicVoidNoArg(boolean,java.util.List)>($z0, $r2);

        goto label1;

     label2:
        return;
    }

    protected org.junit.runners.model.Statement withAfterClasses(org.junit.runners.model.Statement)
    {
        org.junit.runners.ParentRunner $r0;
        org.junit.runners.model.Statement $r1;
        org.junit.runners.model.TestClass $r2;
        java.util.List $r3;
        boolean $z0;
        org.junit.internal.runners.statements.RunAfters $r4;

        $r0 := @this: org.junit.runners.ParentRunner;

        $r1 := @parameter0: org.junit.runners.model.Statement;

        $r2 = $r0.<org.junit.runners.ParentRunner: org.junit.runners.model.TestClass testClass>;

        $r3 = virtualinvoke $r2.<org.junit.runners.model.TestClass: java.util.List getAnnotatedMethods(java.lang.Class)>(class "Lorg/junit/AfterClass;");

        $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return $r1;

     label1:
        $r4 = new org.junit.internal.runners.statements.RunAfters;

        specialinvoke $r4.<org.junit.internal.runners.statements.RunAfters: void <init>(org.junit.runners.model.Statement,java.util.List,java.lang.Object)>($r1, $r3, null);

        return $r4;
    }

    protected org.junit.runners.model.Statement withBeforeClasses(org.junit.runners.model.Statement)
    {
        org.junit.runners.ParentRunner $r0;
        org.junit.runners.model.Statement $r1;
        org.junit.runners.model.TestClass $r2;
        java.util.List $r3;
        boolean $z0;
        org.junit.internal.runners.statements.RunBefores $r4;

        $r0 := @this: org.junit.runners.ParentRunner;

        $r1 := @parameter0: org.junit.runners.model.Statement;

        $r2 = $r0.<org.junit.runners.ParentRunner: org.junit.runners.model.TestClass testClass>;

        $r3 = virtualinvoke $r2.<org.junit.runners.model.TestClass: java.util.List getAnnotatedMethods(java.lang.Class)>(class "Lorg/junit/BeforeClass;");

        $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return $r1;

     label1:
        $r4 = new org.junit.internal.runners.statements.RunBefores;

        specialinvoke $r4.<org.junit.internal.runners.statements.RunBefores: void <init>(org.junit.runners.model.Statement,java.util.List,java.lang.Object)>($r1, $r3, null);

        return $r4;
    }

org.junit.runners.ParentRunner$1
    void <init>(org.junit.runners.ParentRunner)
    {
        org.junit.runners.ParentRunner$1 $r0;
        org.junit.runners.ParentRunner $r1;

        $r0 := @this: org.junit.runners.ParentRunner$1;

        $r1 := @parameter0: org.junit.runners.ParentRunner;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void finished()
    {
        org.junit.runners.ParentRunner$1 $r0;

        $r0 := @this: org.junit.runners.ParentRunner$1;

        return;
    }

    public void schedule(java.lang.Runnable)
    {
        org.junit.runners.ParentRunner$1 $r0;
        java.lang.Runnable $r1;

        $r0 := @this: org.junit.runners.ParentRunner$1;

        $r1 := @parameter0: java.lang.Runnable;

        interfaceinvoke $r1.<java.lang.Runnable: void run()>();

        return;
    }

org.junit.runners.ParentRunner$2
<org.junit.runners.ParentRunner$2: org.junit.runners.ParentRunner this$0>
<org.junit.runners.ParentRunner$2: org.junit.runner.notification.RunNotifier val$notifier>
    void <init>(org.junit.runners.ParentRunner, org.junit.runner.notification.RunNotifier)
    {
        org.junit.runners.ParentRunner$2 $r0;
        org.junit.runners.ParentRunner $r1;
        org.junit.runner.notification.RunNotifier $r2;

        $r0 := @this: org.junit.runners.ParentRunner$2;

        $r1 := @parameter0: org.junit.runners.ParentRunner;

        $r2 := @parameter1: org.junit.runner.notification.RunNotifier;

        $r0.<org.junit.runners.ParentRunner$2: org.junit.runners.ParentRunner this$0> = $r1;

        $r0.<org.junit.runners.ParentRunner$2: org.junit.runner.notification.RunNotifier val$notifier> = $r2;

        specialinvoke $r0.<org.junit.runners.model.Statement: void <init>()>();

        return;
    }

    public void evaluate()
    {
        org.junit.runners.ParentRunner$2 $r0;
        org.junit.runners.ParentRunner $r1;
        org.junit.runner.notification.RunNotifier $r2;

        $r0 := @this: org.junit.runners.ParentRunner$2;

        $r1 = $r0.<org.junit.runners.ParentRunner$2: org.junit.runners.ParentRunner this$0>;

        $r2 = $r0.<org.junit.runners.ParentRunner$2: org.junit.runner.notification.RunNotifier val$notifier>;

        staticinvoke <org.junit.runners.ParentRunner: void access$000(org.junit.runners.ParentRunner,org.junit.runner.notification.RunNotifier)>($r1, $r2);

        return;
    }

org.junit.runners.ParentRunner$3
<org.junit.runners.ParentRunner$3: org.junit.runners.ParentRunner this$0>
<org.junit.runners.ParentRunner$3: java.lang.Object val$each>
<org.junit.runners.ParentRunner$3: org.junit.runner.notification.RunNotifier val$notifier>
    void <init>(org.junit.runners.ParentRunner, java.lang.Object, org.junit.runner.notification.RunNotifier)
    {
        org.junit.runners.ParentRunner$3 $r0;
        org.junit.runners.ParentRunner $r1;
        java.lang.Object $r2;
        org.junit.runner.notification.RunNotifier $r3;

        $r0 := @this: org.junit.runners.ParentRunner$3;

        $r1 := @parameter0: org.junit.runners.ParentRunner;

        $r2 := @parameter1: java.lang.Object;

        $r3 := @parameter2: org.junit.runner.notification.RunNotifier;

        $r0.<org.junit.runners.ParentRunner$3: org.junit.runners.ParentRunner this$0> = $r1;

        $r0.<org.junit.runners.ParentRunner$3: java.lang.Object val$each> = $r2;

        $r0.<org.junit.runners.ParentRunner$3: org.junit.runner.notification.RunNotifier val$notifier> = $r3;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        org.junit.runners.ParentRunner$3 $r0;
        org.junit.runners.ParentRunner $r1;
        java.lang.Object $r2;
        org.junit.runner.notification.RunNotifier $r3;

        $r0 := @this: org.junit.runners.ParentRunner$3;

        $r1 = $r0.<org.junit.runners.ParentRunner$3: org.junit.runners.ParentRunner this$0>;

        $r2 = $r0.<org.junit.runners.ParentRunner$3: java.lang.Object val$each>;

        $r3 = $r0.<org.junit.runners.ParentRunner$3: org.junit.runner.notification.RunNotifier val$notifier>;

        virtualinvoke $r1.<org.junit.runners.ParentRunner: void runChild(java.lang.Object,org.junit.runner.notification.RunNotifier)>($r2, $r3);

        return;
    }

org.junit.runners.ParentRunner$4
<org.junit.runners.ParentRunner$4: org.junit.runners.ParentRunner this$0>
<org.junit.runners.ParentRunner$4: org.junit.runner.manipulation.Sorter val$sorter>
    void <init>(org.junit.runners.ParentRunner, org.junit.runner.manipulation.Sorter)
    {
        org.junit.runners.ParentRunner$4 $r0;
        org.junit.runners.ParentRunner $r1;
        org.junit.runner.manipulation.Sorter $r2;

        $r0 := @this: org.junit.runners.ParentRunner$4;

        $r1 := @parameter0: org.junit.runners.ParentRunner;

        $r2 := @parameter1: org.junit.runner.manipulation.Sorter;

        $r0.<org.junit.runners.ParentRunner$4: org.junit.runners.ParentRunner this$0> = $r1;

        $r0.<org.junit.runners.ParentRunner$4: org.junit.runner.manipulation.Sorter val$sorter> = $r2;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int compare(java.lang.Object, java.lang.Object)
    {
        org.junit.runners.ParentRunner$4 $r0;
        java.lang.Object $r1, $r2;
        org.junit.runner.manipulation.Sorter $r3;
        org.junit.runners.ParentRunner $r4;
        org.junit.runner.Description $r5, $r6;
        int $i0;

        $r0 := @this: org.junit.runners.ParentRunner$4;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = $r0.<org.junit.runners.ParentRunner$4: org.junit.runner.manipulation.Sorter val$sorter>;

        $r4 = $r0.<org.junit.runners.ParentRunner$4: org.junit.runners.ParentRunner this$0>;

        $r5 = virtualinvoke $r4.<org.junit.runners.ParentRunner: org.junit.runner.Description describeChild(java.lang.Object)>($r1);

        $r4 = $r0.<org.junit.runners.ParentRunner$4: org.junit.runners.ParentRunner this$0>;

        $r6 = virtualinvoke $r4.<org.junit.runners.ParentRunner: org.junit.runner.Description describeChild(java.lang.Object)>($r2);

        $i0 = virtualinvoke $r3.<org.junit.runner.manipulation.Sorter: int compare(org.junit.runner.Description,org.junit.runner.Description)>($r5, $r6);

        return $i0;
    }

org.junit.runners.ParentRunner$5
<org.junit.runners.ParentRunner$5: org.junit.runners.ParentRunner this$0>
<org.junit.runners.ParentRunner$5: org.junit.runner.manipulation.Sorter val$sorter>
    void <init>(org.junit.runners.ParentRunner, org.junit.runner.manipulation.Sorter)
    {
        org.junit.runners.ParentRunner$5 $r0;
        org.junit.runners.ParentRunner $r1;
        org.junit.runner.manipulation.Sorter $r2;

        $r0 := @this: org.junit.runners.ParentRunner$5;

        $r1 := @parameter0: org.junit.runners.ParentRunner;

        $r2 := @parameter1: org.junit.runner.manipulation.Sorter;

        $r0.<org.junit.runners.ParentRunner$5: org.junit.runners.ParentRunner this$0> = $r1;

        $r0.<org.junit.runners.ParentRunner$5: org.junit.runner.manipulation.Sorter val$sorter> = $r2;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int compare(java.lang.Object, java.lang.Object)
    {
        org.junit.runners.ParentRunner$5 $r0;
        org.junit.runner.manipulation.Sorter $r1;
        java.lang.Object $r2, $r3;
        org.junit.runners.ParentRunner $r4;
        org.junit.runner.Description $r5, $r6;
        int $i0;

        $r0 := @this: org.junit.runners.ParentRunner$5;

        $r2 := @parameter0: java.lang.Object;

        $r3 := @parameter1: java.lang.Object;

        $r1 = $r0.<org.junit.runners.ParentRunner$5: org.junit.runner.manipulation.Sorter val$sorter>;

        $r4 = $r0.<org.junit.runners.ParentRunner$5: org.junit.runners.ParentRunner this$0>;

        $r5 = virtualinvoke $r4.<org.junit.runners.ParentRunner: org.junit.runner.Description describeChild(java.lang.Object)>($r2);

        $r4 = $r0.<org.junit.runners.ParentRunner$5: org.junit.runners.ParentRunner this$0>;

        $r6 = virtualinvoke $r4.<org.junit.runners.ParentRunner: org.junit.runner.Description describeChild(java.lang.Object)>($r3);

        $i0 = virtualinvoke $r1.<org.junit.runner.manipulation.Sorter: int compare(org.junit.runner.Description,org.junit.runner.Description)>($r5, $r6);

        return $i0;
    }

org.junit.runners.ParentRunner$ClassRuleCollector-IA
org.junit.runners.ParentRunner$ClassRuleCollector
<org.junit.runners.ParentRunner$ClassRuleCollector: java.util.List entries>
    private void <init>()
    {
        org.junit.runners.ParentRunner$ClassRuleCollector $r0;
        java.util.ArrayList r1;
        java.util.List r2;

        $r0 := @this: org.junit.runners.ParentRunner$ClassRuleCollector;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        r2 = (java.util.List) r1;

        $r0.<org.junit.runners.ParentRunner$ClassRuleCollector: java.util.List entries> = r2;

        return;
    }

    void <init>(org.junit.runners.ParentRunner$ClassRuleCollector-IA)
    {
        org.junit.runners.ParentRunner$ClassRuleCollector $r0;
        org.junit.runners.ParentRunner$ClassRuleCollector-IA $r1;

        $r0 := @this: org.junit.runners.ParentRunner$ClassRuleCollector;

        $r1 := @parameter0: org.junit.runners.ParentRunner$ClassRuleCollector-IA;

        specialinvoke $r0.<org.junit.runners.ParentRunner$ClassRuleCollector: void <init>()>();

        return;
    }

    public volatile void accept(org.junit.runners.model.FrameworkMember, java.lang.Object)
    {
        org.junit.runners.ParentRunner$ClassRuleCollector $r0;
        org.junit.runners.model.FrameworkMember $r1;
        java.lang.Object $r2;
        org.junit.rules.TestRule $r3;

        $r0 := @this: org.junit.runners.ParentRunner$ClassRuleCollector;

        $r1 := @parameter0: org.junit.runners.model.FrameworkMember;

        $r2 := @parameter1: java.lang.Object;

        $r3 = (org.junit.rules.TestRule) $r2;

        virtualinvoke $r0.<org.junit.runners.ParentRunner$ClassRuleCollector: void accept(org.junit.runners.model.FrameworkMember,org.junit.rules.TestRule)>($r1, $r3);

        return;
    }

    public void accept(org.junit.runners.model.FrameworkMember, org.junit.rules.TestRule)
    {
        org.junit.runners.ParentRunner$ClassRuleCollector $r0;
        org.junit.rules.TestRule $r1;
        org.junit.runners.RuleContainer$RuleEntry $r2;
        org.junit.runners.model.FrameworkMember $r3;
        java.lang.'annotation'.Annotation $r4;
        org.junit.ClassRule $r5;
        java.util.List $r6;
        int $i0;
        java.lang.Integer $r7;

        $r0 := @this: org.junit.runners.ParentRunner$ClassRuleCollector;

        $r3 := @parameter0: org.junit.runners.model.FrameworkMember;

        $r1 := @parameter1: org.junit.rules.TestRule;

        $r4 = virtualinvoke $r3.<org.junit.runners.model.FrameworkMember: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/junit/ClassRule;");

        $r5 = (org.junit.ClassRule) $r4;

        $r6 = $r0.<org.junit.runners.ParentRunner$ClassRuleCollector: java.util.List entries>;

        $r2 = new org.junit.runners.RuleContainer$RuleEntry;

        if $r5 == null goto label1;

        $i0 = interfaceinvoke $r5.<org.junit.ClassRule: int order()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        goto label2;

     label1:
        $r7 = null;

     label2:
        specialinvoke $r2.<org.junit.runners.RuleContainer$RuleEntry: void <init>(java.lang.Object,int,java.lang.Integer)>($r1, 1, $r7);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r2);

        return;
    }

    public java.util.List getOrderedRules()
    {
        org.junit.runners.ParentRunner$ClassRuleCollector $r0;
        java.util.List $r1;
        java.util.Comparator $r2;
        java.util.ArrayList $r3, r8;
        int $i0;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        org.junit.runners.RuleContainer$RuleEntry $r6;
        org.junit.rules.TestRule $r7;

        $r0 := @this: org.junit.runners.ParentRunner$ClassRuleCollector;

        $r1 = $r0.<org.junit.runners.ParentRunner$ClassRuleCollector: java.util.List entries>;

        $r2 = <org.junit.runners.RuleContainer: java.util.Comparator ENTRY_COMPARATOR>;

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r1, $r2);

        r8 = new java.util.ArrayList;

        $r3 = r8;

        $r1 = $r0.<org.junit.runners.ParentRunner$ClassRuleCollector: java.util.List entries>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        specialinvoke r8.<java.util.ArrayList: void <init>(int)>($i0);

        $r1 = $r0.<org.junit.runners.ParentRunner$ClassRuleCollector: java.util.List entries>;

        $r4 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (org.junit.runners.RuleContainer$RuleEntry) $r5;

        $r5 = $r6.<org.junit.runners.RuleContainer$RuleEntry: java.lang.Object rule>;

        $r7 = (org.junit.rules.TestRule) $r5;

        $r1 = (java.util.List) $r3;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label1;

     label2:
        $r1 = (java.util.List) $r3;

        return $r1;
    }

