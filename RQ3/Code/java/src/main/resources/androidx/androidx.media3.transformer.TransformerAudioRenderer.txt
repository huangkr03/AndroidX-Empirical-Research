androidx.media3.transformer.TransformerAudioRenderer
<androidx.media3.transformer.TransformerAudioRenderer: java.lang.String TAG>
<androidx.media3.transformer.TransformerAudioRenderer: androidx.media3.transformer.Codec$EncoderFactory encoderFactory>
<androidx.media3.transformer.TransformerAudioRenderer: androidx.media3.transformer.Codec$DecoderFactory decoderFactory>
<androidx.media3.transformer.TransformerAudioRenderer: androidx.media3.decoder.DecoderInputBuffer decoderInputBuffer>
    public void <init>(androidx.media3.transformer.MuxerWrapper, androidx.media3.transformer.TransformerMediaClock, androidx.media3.transformer.TransformationRequest, androidx.media3.transformer.Codec$EncoderFactory, androidx.media3.transformer.Codec$DecoderFactory, androidx.media3.transformer.Transformer$AsyncErrorListener, androidx.media3.transformer.FallbackListener)
    {
        androidx.media3.transformer.TransformerAudioRenderer r0;
        androidx.media3.transformer.MuxerWrapper r1;
        androidx.media3.transformer.TransformerMediaClock r2;
        androidx.media3.transformer.TransformationRequest r3;
        androidx.media3.transformer.Codec$EncoderFactory r4;
        androidx.media3.transformer.Codec$DecoderFactory r5;
        androidx.media3.transformer.Transformer$AsyncErrorListener r6;
        androidx.media3.transformer.FallbackListener r7;
        androidx.media3.decoder.DecoderInputBuffer $r8;

        r0 := @this: androidx.media3.transformer.TransformerAudioRenderer;

        r1 := @parameter0: androidx.media3.transformer.MuxerWrapper;

        r2 := @parameter1: androidx.media3.transformer.TransformerMediaClock;

        r3 := @parameter2: androidx.media3.transformer.TransformationRequest;

        r4 := @parameter3: androidx.media3.transformer.Codec$EncoderFactory;

        r5 := @parameter4: androidx.media3.transformer.Codec$DecoderFactory;

        r6 := @parameter5: androidx.media3.transformer.Transformer$AsyncErrorListener;

        r7 := @parameter6: androidx.media3.transformer.FallbackListener;

        specialinvoke r0.<androidx.media3.transformer.TransformerBaseRenderer: void <init>(int,androidx.media3.transformer.MuxerWrapper,androidx.media3.transformer.TransformerMediaClock,androidx.media3.transformer.TransformationRequest,androidx.media3.transformer.Transformer$AsyncErrorListener,androidx.media3.transformer.FallbackListener)>(1, r1, r2, r3, r6, r7);

        r0.<androidx.media3.transformer.TransformerAudioRenderer: androidx.media3.transformer.Codec$EncoderFactory encoderFactory> = r4;

        r0.<androidx.media3.transformer.TransformerAudioRenderer: androidx.media3.transformer.Codec$DecoderFactory decoderFactory> = r5;

        $r8 = new androidx.media3.decoder.DecoderInputBuffer;

        specialinvoke $r8.<androidx.media3.decoder.DecoderInputBuffer: void <init>(int)>(0);

        r0.<androidx.media3.transformer.TransformerAudioRenderer: androidx.media3.decoder.DecoderInputBuffer decoderInputBuffer> = $r8;

        return;
    }

    public java.lang.String getName()
    {
        androidx.media3.transformer.TransformerAudioRenderer r0;

        r0 := @this: androidx.media3.transformer.TransformerAudioRenderer;

        return "TAudioRenderer";
    }

    protected boolean ensureConfigured() throws androidx.media3.transformer.TransformationException
    {
        androidx.media3.transformer.TransformerAudioRenderer r0;
        androidx.media3.exoplayer.FormatHolder r1;
        int i0;
        androidx.media3.common.Format r2, $r5;
        androidx.media3.transformer.SamplePipeline $r3;
        androidx.media3.decoder.DecoderInputBuffer $r4;
        java.lang.Object $r6;
        boolean $z0;
        androidx.media3.transformer.AudioTranscodingSamplePipeline $r7;
        androidx.media3.transformer.FallbackListener $r8, $r14;
        androidx.media3.transformer.MuxerWrapper $r9, $r15;
        androidx.media3.transformer.Codec$EncoderFactory $r10;
        androidx.media3.transformer.Codec$DecoderFactory $r11;
        androidx.media3.transformer.TransformationRequest $r12, $r16;
        long $l1, $l2, $l3, $l4;
        androidx.media3.transformer.PassthroughSamplePipeline $r13;

        r0 := @this: androidx.media3.transformer.TransformerAudioRenderer;

        $r3 = r0.<androidx.media3.transformer.TransformerAudioRenderer: androidx.media3.transformer.SamplePipeline samplePipeline>;

        if $r3 == null goto label1;

        return 1;

     label1:
        r1 = virtualinvoke r0.<androidx.media3.transformer.TransformerAudioRenderer: androidx.media3.exoplayer.FormatHolder getFormatHolder()>();

        $r4 = r0.<androidx.media3.transformer.TransformerAudioRenderer: androidx.media3.decoder.DecoderInputBuffer decoderInputBuffer>;

        i0 = virtualinvoke r0.<androidx.media3.transformer.TransformerAudioRenderer: int readSource(androidx.media3.exoplayer.FormatHolder,androidx.media3.decoder.DecoderInputBuffer,int)>(r1, $r4, 2);

        if i0 == -5 goto label2;

        return 0;

     label2:
        $r5 = r1.<androidx.media3.exoplayer.FormatHolder: androidx.media3.common.Format format>;

        $r6 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r5);

        r2 = (androidx.media3.common.Format) $r6;

        $z0 = specialinvoke r0.<androidx.media3.transformer.TransformerAudioRenderer: boolean shouldPassthrough(androidx.media3.common.Format)>(r2);

        if $z0 == 0 goto label3;

        $r13 = new androidx.media3.transformer.PassthroughSamplePipeline;

        $l4 = r0.<androidx.media3.transformer.TransformerAudioRenderer: long streamOffsetUs>;

        $l3 = r0.<androidx.media3.transformer.TransformerAudioRenderer: long streamStartPositionUs>;

        $r16 = r0.<androidx.media3.transformer.TransformerAudioRenderer: androidx.media3.transformer.TransformationRequest transformationRequest>;

        $r15 = r0.<androidx.media3.transformer.TransformerAudioRenderer: androidx.media3.transformer.MuxerWrapper muxerWrapper>;

        $r14 = r0.<androidx.media3.transformer.TransformerAudioRenderer: androidx.media3.transformer.FallbackListener fallbackListener>;

        specialinvoke $r13.<androidx.media3.transformer.PassthroughSamplePipeline: void <init>(androidx.media3.common.Format,long,long,androidx.media3.transformer.TransformationRequest,androidx.media3.transformer.MuxerWrapper,androidx.media3.transformer.FallbackListener)>(r2, $l4, $l3, $r16, $r15, $r14);

        r0.<androidx.media3.transformer.TransformerAudioRenderer: androidx.media3.transformer.SamplePipeline samplePipeline> = $r13;

        goto label4;

     label3:
        $r7 = new androidx.media3.transformer.AudioTranscodingSamplePipeline;

        $l2 = r0.<androidx.media3.transformer.TransformerAudioRenderer: long streamOffsetUs>;

        $l1 = r0.<androidx.media3.transformer.TransformerAudioRenderer: long streamStartPositionUs>;

        $r12 = r0.<androidx.media3.transformer.TransformerAudioRenderer: androidx.media3.transformer.TransformationRequest transformationRequest>;

        $r11 = r0.<androidx.media3.transformer.TransformerAudioRenderer: androidx.media3.transformer.Codec$DecoderFactory decoderFactory>;

        $r10 = r0.<androidx.media3.transformer.TransformerAudioRenderer: androidx.media3.transformer.Codec$EncoderFactory encoderFactory>;

        $r9 = r0.<androidx.media3.transformer.TransformerAudioRenderer: androidx.media3.transformer.MuxerWrapper muxerWrapper>;

        $r8 = r0.<androidx.media3.transformer.TransformerAudioRenderer: androidx.media3.transformer.FallbackListener fallbackListener>;

        specialinvoke $r7.<androidx.media3.transformer.AudioTranscodingSamplePipeline: void <init>(androidx.media3.common.Format,long,long,androidx.media3.transformer.TransformationRequest,androidx.media3.transformer.Codec$DecoderFactory,androidx.media3.transformer.Codec$EncoderFactory,androidx.media3.transformer.MuxerWrapper,androidx.media3.transformer.FallbackListener)>(r2, $l2, $l1, $r12, $r11, $r10, $r9, $r8);

        r0.<androidx.media3.transformer.TransformerAudioRenderer: androidx.media3.transformer.SamplePipeline samplePipeline> = $r7;

     label4:
        return 1;
    }

    private boolean shouldPassthrough(androidx.media3.common.Format)
    {
        androidx.media3.transformer.TransformerAudioRenderer r0;
        androidx.media3.common.Format r1;
        androidx.media3.transformer.Codec$EncoderFactory $r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        androidx.media3.transformer.TransformationRequest $r3, $r5, $r7, $r10;
        java.lang.String $r4, $r6, $r8, $r11, $r12;
        androidx.media3.transformer.MuxerWrapper $r9;

        r0 := @this: androidx.media3.transformer.TransformerAudioRenderer;

        r1 := @parameter0: androidx.media3.common.Format;

        $r2 = r0.<androidx.media3.transformer.TransformerAudioRenderer: androidx.media3.transformer.Codec$EncoderFactory encoderFactory>;

        $z0 = interfaceinvoke $r2.<androidx.media3.transformer.Codec$EncoderFactory: boolean audioNeedsEncoding()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r3 = r0.<androidx.media3.transformer.TransformerAudioRenderer: androidx.media3.transformer.TransformationRequest transformationRequest>;

        $r4 = $r3.<androidx.media3.transformer.TransformationRequest: java.lang.String audioMimeType>;

        if $r4 == null goto label2;

        $r10 = r0.<androidx.media3.transformer.TransformerAudioRenderer: androidx.media3.transformer.TransformationRequest transformationRequest>;

        $r12 = $r10.<androidx.media3.transformer.TransformationRequest: java.lang.String audioMimeType>;

        $r11 = r1.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        $z4 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z4 != 0 goto label2;

        return 0;

     label2:
        $r5 = r0.<androidx.media3.transformer.TransformerAudioRenderer: androidx.media3.transformer.TransformationRequest transformationRequest>;

        $r6 = $r5.<androidx.media3.transformer.TransformationRequest: java.lang.String audioMimeType>;

        if $r6 != null goto label3;

        $r9 = r0.<androidx.media3.transformer.TransformerAudioRenderer: androidx.media3.transformer.MuxerWrapper muxerWrapper>;

        $r8 = r1.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        $z3 = virtualinvoke $r9.<androidx.media3.transformer.MuxerWrapper: boolean supportsSampleMimeType(java.lang.String)>($r8);

        if $z3 != 0 goto label3;

        return 0;

     label3:
        $r7 = r0.<androidx.media3.transformer.TransformerAudioRenderer: androidx.media3.transformer.TransformationRequest transformationRequest>;

        $z1 = $r7.<androidx.media3.transformer.TransformationRequest: boolean flattenForSlowMotion>;

        if $z1 == 0 goto label4;

        $z2 = staticinvoke <androidx.media3.transformer.TransformerAudioRenderer: boolean isSlowMotion(androidx.media3.common.Format)>(r1);

        if $z2 == 0 goto label4;

        return 0;

     label4:
        return 1;
    }

    private static boolean isSlowMotion(androidx.media3.common.Format)
    {
        androidx.media3.common.Format r0;
        androidx.media3.common.Metadata r1;
        int $i0, i1;
        androidx.media3.common.Metadata$Entry $r2;
        boolean $z0;

        r0 := @parameter0: androidx.media3.common.Format;

        r1 = r0.<androidx.media3.common.Format: androidx.media3.common.Metadata metadata>;

        if r1 != null goto label1;

        return 0;

     label1:
        i1 = 0;

     label2:
        $i0 = virtualinvoke r1.<androidx.media3.common.Metadata: int length()>();

        if i1 >= $i0 goto label4;

        $r2 = virtualinvoke r1.<androidx.media3.common.Metadata: androidx.media3.common.Metadata$Entry get(int)>(i1);

        $z0 = $r2 instanceof androidx.media3.extractor.metadata.mp4.SlowMotionData;

        if $z0 == 0 goto label3;

        return 1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return 0;
    }

