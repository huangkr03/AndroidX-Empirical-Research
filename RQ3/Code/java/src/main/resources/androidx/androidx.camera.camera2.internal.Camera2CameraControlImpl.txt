androidx.camera.camera2.internal.Camera2CameraControlImpl
<androidx.camera.camera2.internal.Camera2CameraControlImpl: java.lang.String TAG>
<androidx.camera.camera2.internal.Camera2CameraControlImpl: int DEFAULT_TEMPLATE>
<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraControlSessionCallback mSessionCallback>
<androidx.camera.camera2.internal.Camera2CameraControlImpl: java.util.concurrent.Executor mExecutor>
<androidx.camera.camera2.internal.Camera2CameraControlImpl: java.lang.Object mLock>
<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat mCameraCharacteristics>
<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.core.impl.CameraControlInternal$ControlUpdateCallback mControlUpdateCallback>
<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.core.impl.SessionConfig$Builder mSessionConfigBuilder>
<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.FocusMeteringControl mFocusMeteringControl>
<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.ZoomControl mZoomControl>
<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.TorchControl mTorchControl>
<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.ExposureControl mExposureControl>
<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.ZslControl mZslControl>
<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.interop.Camera2CameraControl mCamera2CameraControl>
<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.Camera2CapturePipeline mCamera2CapturePipeline>
<androidx.camera.camera2.internal.Camera2CameraControlImpl: int mUseCount>
<androidx.camera.camera2.internal.Camera2CameraControlImpl: boolean mIsTorchOn>
<androidx.camera.camera2.internal.Camera2CameraControlImpl: int mFlashMode>
<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.compat.workaround.AeFpsRange mAeFpsRange>
<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.compat.workaround.AutoFlashAEModeDisabler mAutoFlashAEModeDisabler>
<androidx.camera.camera2.internal.Camera2CameraControlImpl: java.lang.String TAG_SESSION_UPDATE_ID>
<androidx.camera.camera2.internal.Camera2CameraControlImpl: java.util.concurrent.atomic.AtomicLong mNextSessionUpdateId>
<androidx.camera.camera2.internal.Camera2CameraControlImpl: com.google.common.util.concurrent.ListenableFuture mFlashModeChangeSessionUpdateFuture>
<androidx.camera.camera2.internal.Camera2CameraControlImpl: int mTemplate>
<androidx.camera.camera2.internal.Camera2CameraControlImpl: long mCurrentSessionUpdateId>
<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraCaptureCallbackSet mCameraCaptureCallbackSet>
    void <init>(androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat, java.util.concurrent.ScheduledExecutorService, java.util.concurrent.Executor, androidx.camera.core.impl.CameraControlInternal$ControlUpdateCallback)
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat r1;
        java.util.concurrent.ScheduledExecutorService r2;
        java.util.concurrent.Executor r3;
        androidx.camera.core.impl.CameraControlInternal$ControlUpdateCallback r4;
        androidx.camera.core.impl.Quirks $r5;
        java.util.ArrayList $r6;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        r1 := @parameter0: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat;

        r2 := @parameter1: java.util.concurrent.ScheduledExecutorService;

        r3 := @parameter2: java.util.concurrent.Executor;

        r4 := @parameter3: androidx.camera.core.impl.CameraControlInternal$ControlUpdateCallback;

        $r5 = new androidx.camera.core.impl.Quirks;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        specialinvoke $r5.<androidx.camera.core.impl.Quirks: void <init>(java.util.List)>($r6);

        specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: void <init>(androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat,java.util.concurrent.ScheduledExecutorService,java.util.concurrent.Executor,androidx.camera.core.impl.CameraControlInternal$ControlUpdateCallback,androidx.camera.core.impl.Quirks)>(r1, r2, r3, r4, $r5);

        return;
    }

    void <init>(androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat, java.util.concurrent.ScheduledExecutorService, java.util.concurrent.Executor, androidx.camera.core.impl.CameraControlInternal$ControlUpdateCallback, androidx.camera.core.impl.Quirks)
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat r1, $r24, $r29, $r32, $r40, $r44;
        java.util.concurrent.ScheduledExecutorService r2;
        java.util.concurrent.Executor r3, $r12, $r23, $r26, $r28, $r31, $r37, $r39, $r41;
        androidx.camera.core.impl.CameraControlInternal$ControlUpdateCallback r4;
        androidx.camera.core.impl.Quirks r5;
        java.lang.Object $r6;
        androidx.camera.core.impl.SessionConfig$Builder $r7, $r13, $r16, $r20;
        java.util.concurrent.atomic.AtomicLong $r8;
        com.google.common.util.concurrent.ListenableFuture $r9;
        androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraCaptureCallbackSet $r10, $r19;
        androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraControlSessionCallback $r11, $r15;
        int $i0, $i1;
        androidx.camera.camera2.internal.CaptureCallbackContainer $r17;
        androidx.camera.camera2.internal.ExposureControl $r22;
        androidx.camera.camera2.internal.FocusMeteringControl $r25;
        androidx.camera.camera2.internal.ZoomControl $r27;
        androidx.camera.camera2.internal.TorchControl $r30;
        androidx.camera.camera2.internal.ZslControlNoOpImpl $r33;
        androidx.camera.camera2.internal.compat.workaround.AeFpsRange $r34;
        androidx.camera.camera2.internal.compat.workaround.AutoFlashAEModeDisabler $r35;
        androidx.camera.camera2.interop.Camera2CameraControl $r36;
        androidx.camera.camera2.internal.Camera2CapturePipeline $r38;
        java.lang.Runnable $r42;
        androidx.camera.camera2.internal.ZslControlImpl $r43;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        r1 := @parameter0: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat;

        r2 := @parameter1: java.util.concurrent.ScheduledExecutorService;

        r3 := @parameter2: java.util.concurrent.Executor;

        r4 := @parameter3: androidx.camera.core.impl.CameraControlInternal$ControlUpdateCallback;

        r5 := @parameter4: androidx.camera.core.impl.Quirks;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r6 = new java.lang.Object;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: java.lang.Object mLock> = $r6;

        $r7 = new androidx.camera.core.impl.SessionConfig$Builder;

        specialinvoke $r7.<androidx.camera.core.impl.SessionConfig$Builder: void <init>()>();

        r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.core.impl.SessionConfig$Builder mSessionConfigBuilder> = $r7;

        r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: int mUseCount> = 0;

        r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: boolean mIsTorchOn> = 0;

        r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: int mFlashMode> = 2;

        $r8 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r8.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: java.util.concurrent.atomic.AtomicLong mNextSessionUpdateId> = $r8;

        $r9 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFuture(java.lang.Object)>(null);

        r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: com.google.common.util.concurrent.ListenableFuture mFlashModeChangeSessionUpdateFuture> = $r9;

        r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: int mTemplate> = 1;

        r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: long mCurrentSessionUpdateId> = 0L;

        $r10 = new androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraCaptureCallbackSet;

        specialinvoke $r10.<androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraCaptureCallbackSet: void <init>()>();

        r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraCaptureCallbackSet mCameraCaptureCallbackSet> = $r10;

        r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat mCameraCharacteristics> = r1;

        r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.core.impl.CameraControlInternal$ControlUpdateCallback mControlUpdateCallback> = r4;

        r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: java.util.concurrent.Executor mExecutor> = r3;

        $r11 = new androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraControlSessionCallback;

        $r12 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: java.util.concurrent.Executor mExecutor>;

        specialinvoke $r11.<androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraControlSessionCallback: void <init>(java.util.concurrent.Executor)>($r12);

        r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraControlSessionCallback mSessionCallback> = $r11;

        $r13 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.core.impl.SessionConfig$Builder mSessionConfigBuilder>;

        $i0 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: int mTemplate>;

        virtualinvoke $r13.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder setTemplateType(int)>($i0);

        $r16 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.core.impl.SessionConfig$Builder mSessionConfigBuilder>;

        $r15 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraControlSessionCallback mSessionCallback>;

        $r17 = staticinvoke <androidx.camera.camera2.internal.CaptureCallbackContainer: androidx.camera.camera2.internal.CaptureCallbackContainer create(android.hardware.camera2.CameraCaptureSession$CaptureCallback)>($r15);

        virtualinvoke $r16.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder addRepeatingCameraCaptureCallback(androidx.camera.core.impl.CameraCaptureCallback)>($r17);

        $r20 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.core.impl.SessionConfig$Builder mSessionConfigBuilder>;

        $r19 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraCaptureCallbackSet mCameraCaptureCallbackSet>;

        virtualinvoke $r20.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder addRepeatingCameraCaptureCallback(androidx.camera.core.impl.CameraCaptureCallback)>($r19);

        $r22 = new androidx.camera.camera2.internal.ExposureControl;

        $r24 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat mCameraCharacteristics>;

        $r23 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: java.util.concurrent.Executor mExecutor>;

        specialinvoke $r22.<androidx.camera.camera2.internal.ExposureControl: void <init>(androidx.camera.camera2.internal.Camera2CameraControlImpl,androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat,java.util.concurrent.Executor)>(r0, $r24, $r23);

        r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.ExposureControl mExposureControl> = $r22;

        $r25 = new androidx.camera.camera2.internal.FocusMeteringControl;

        $r26 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: java.util.concurrent.Executor mExecutor>;

        specialinvoke $r25.<androidx.camera.camera2.internal.FocusMeteringControl: void <init>(androidx.camera.camera2.internal.Camera2CameraControlImpl,java.util.concurrent.ScheduledExecutorService,java.util.concurrent.Executor,androidx.camera.core.impl.Quirks)>(r0, r2, $r26, r5);

        r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.FocusMeteringControl mFocusMeteringControl> = $r25;

        $r27 = new androidx.camera.camera2.internal.ZoomControl;

        $r29 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat mCameraCharacteristics>;

        $r28 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: java.util.concurrent.Executor mExecutor>;

        specialinvoke $r27.<androidx.camera.camera2.internal.ZoomControl: void <init>(androidx.camera.camera2.internal.Camera2CameraControlImpl,androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat,java.util.concurrent.Executor)>(r0, $r29, $r28);

        r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.ZoomControl mZoomControl> = $r27;

        $r30 = new androidx.camera.camera2.internal.TorchControl;

        $r32 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat mCameraCharacteristics>;

        $r31 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: java.util.concurrent.Executor mExecutor>;

        specialinvoke $r30.<androidx.camera.camera2.internal.TorchControl: void <init>(androidx.camera.camera2.internal.Camera2CameraControlImpl,androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat,java.util.concurrent.Executor)>(r0, $r32, $r31);

        r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.TorchControl mTorchControl> = $r30;

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 < 23 goto label1;

        $r43 = new androidx.camera.camera2.internal.ZslControlImpl;

        $r44 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat mCameraCharacteristics>;

        specialinvoke $r43.<androidx.camera.camera2.internal.ZslControlImpl: void <init>(androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat)>($r44);

        r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.ZslControl mZslControl> = $r43;

        goto label2;

     label1:
        $r33 = new androidx.camera.camera2.internal.ZslControlNoOpImpl;

        specialinvoke $r33.<androidx.camera.camera2.internal.ZslControlNoOpImpl: void <init>()>();

        r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.ZslControl mZslControl> = $r33;

     label2:
        $r34 = new androidx.camera.camera2.internal.compat.workaround.AeFpsRange;

        specialinvoke $r34.<androidx.camera.camera2.internal.compat.workaround.AeFpsRange: void <init>(androidx.camera.core.impl.Quirks)>(r5);

        r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.compat.workaround.AeFpsRange mAeFpsRange> = $r34;

        $r35 = new androidx.camera.camera2.internal.compat.workaround.AutoFlashAEModeDisabler;

        specialinvoke $r35.<androidx.camera.camera2.internal.compat.workaround.AutoFlashAEModeDisabler: void <init>(androidx.camera.core.impl.Quirks)>(r5);

        r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.compat.workaround.AutoFlashAEModeDisabler mAutoFlashAEModeDisabler> = $r35;

        $r36 = new androidx.camera.camera2.interop.Camera2CameraControl;

        $r37 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: java.util.concurrent.Executor mExecutor>;

        specialinvoke $r36.<androidx.camera.camera2.interop.Camera2CameraControl: void <init>(androidx.camera.camera2.internal.Camera2CameraControlImpl,java.util.concurrent.Executor)>(r0, $r37);

        r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.interop.Camera2CameraControl mCamera2CameraControl> = $r36;

        $r38 = new androidx.camera.camera2.internal.Camera2CapturePipeline;

        $r40 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat mCameraCharacteristics>;

        $r39 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: java.util.concurrent.Executor mExecutor>;

        specialinvoke $r38.<androidx.camera.camera2.internal.Camera2CapturePipeline: void <init>(androidx.camera.camera2.internal.Camera2CameraControlImpl,androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat,androidx.camera.core.impl.Quirks,java.util.concurrent.Executor)>(r0, $r40, r5, $r39);

        r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.Camera2CapturePipeline mCamera2CapturePipeline> = $r38;

        $r41 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: java.util.concurrent.Executor mExecutor>;

        $r42 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.camera2.internal.Camera2CameraControlImpl)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.Camera2CameraControlImpl: void lambda$new$0()>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r41.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r42);

        return;
    }

    void incrementUseCount()
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        java.lang.Object r1, $r2;
        int $i0, $i1;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        $r2 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: java.lang.Object mLock>;

        r1 = $r2;

        entermonitor $r2;

        $i0 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: int mUseCount>;

        $i1 = $i0 + 1;

        r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: int mUseCount> = $i1;

        exitmonitor r1;

        goto label1;

     label1:
        return;
    }

    void decrementUseCount()
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        int $i0, $i1, $i2;
        java.lang.IllegalStateException $r4;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        $r3 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $i0 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: int mUseCount>;

        if $i0 != 0 goto label2;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Decrementing use count occurs more times than incrementing");

        throw $r4;

     label2:
        $i1 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: int mUseCount>;

        $i2 = $i1 - 1;

        r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: int mUseCount> = $i2;

        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    int getUseCount()
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        java.lang.Object r1, $r2;
        int $i0;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        $r2 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: java.lang.Object mLock>;

        r1 = $r2;

        entermonitor $r2;

        $i0 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: int mUseCount>;

        exitmonitor r1;

        return $i0;
    }

    public androidx.camera.camera2.internal.ZoomControl getZoomControl()
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        androidx.camera.camera2.internal.ZoomControl $r1;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.ZoomControl mZoomControl>;

        return $r1;
    }

    public androidx.camera.camera2.internal.FocusMeteringControl getFocusMeteringControl()
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        androidx.camera.camera2.internal.FocusMeteringControl $r1;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.FocusMeteringControl mFocusMeteringControl>;

        return $r1;
    }

    public androidx.camera.camera2.internal.TorchControl getTorchControl()
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        androidx.camera.camera2.internal.TorchControl $r1;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.TorchControl mTorchControl>;

        return $r1;
    }

    public androidx.camera.camera2.internal.ExposureControl getExposureControl()
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        androidx.camera.camera2.internal.ExposureControl $r1;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.ExposureControl mExposureControl>;

        return $r1;
    }

    public androidx.camera.camera2.internal.ZslControl getZslControl()
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        androidx.camera.camera2.internal.ZslControl $r1;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.ZslControl mZslControl>;

        return $r1;
    }

    public androidx.camera.camera2.interop.Camera2CameraControl getCamera2CameraControl()
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        androidx.camera.camera2.interop.Camera2CameraControl $r1;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.interop.Camera2CameraControl mCamera2CameraControl>;

        return $r1;
    }

    public void addInteropConfig(androidx.camera.core.impl.Config)
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        androidx.camera.core.impl.Config r1;
        com.google.common.util.concurrent.ListenableFuture r2;
        androidx.camera.camera2.interop.Camera2CameraControl $r3;
        androidx.camera.camera2.interop.CaptureRequestOptions$Builder $r4;
        androidx.camera.camera2.interop.CaptureRequestOptions $r5;
        java.lang.Runnable $r6;
        java.util.concurrent.Executor $r7;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        r1 := @parameter0: androidx.camera.core.impl.Config;

        $r3 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.interop.Camera2CameraControl mCamera2CameraControl>;

        $r4 = staticinvoke <androidx.camera.camera2.interop.CaptureRequestOptions$Builder: androidx.camera.camera2.interop.CaptureRequestOptions$Builder 'from'(androidx.camera.core.impl.Config)>(r1);

        $r5 = virtualinvoke $r4.<androidx.camera.camera2.interop.CaptureRequestOptions$Builder: androidx.camera.camera2.interop.CaptureRequestOptions build()>();

        r2 = virtualinvoke $r3.<androidx.camera.camera2.interop.Camera2CameraControl: com.google.common.util.concurrent.ListenableFuture addCaptureRequestOptions(androidx.camera.camera2.interop.CaptureRequestOptions)>($r5);

        $r6 = dynamicinvoke "run" <java.lang.Runnable ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.camera2.internal.Camera2CameraControlImpl: void lambda$addInteropConfig$1()>, methodtype: void __METHODTYPE__());

        $r7 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor directExecutor()>();

        interfaceinvoke r2.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r6, $r7);

        return;
    }

    public void clearInteropConfig()
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        com.google.common.util.concurrent.ListenableFuture r1;
        androidx.camera.camera2.interop.Camera2CameraControl $r2;
        java.lang.Runnable $r3;
        java.util.concurrent.Executor $r4;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        $r2 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.interop.Camera2CameraControl mCamera2CameraControl>;

        r1 = virtualinvoke $r2.<androidx.camera.camera2.interop.Camera2CameraControl: com.google.common.util.concurrent.ListenableFuture clearCaptureRequestOptions()>();

        $r3 = dynamicinvoke "run" <java.lang.Runnable ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.camera2.internal.Camera2CameraControlImpl: void lambda$clearInteropConfig$2()>, methodtype: void __METHODTYPE__());

        $r4 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor directExecutor()>();

        interfaceinvoke r1.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r3, $r4);

        return;
    }

    public androidx.camera.core.impl.Config getInteropConfig()
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        androidx.camera.camera2.interop.Camera2CameraControl $r1;
        androidx.camera.camera2.impl.Camera2ImplConfig $r2;
        androidx.camera.core.impl.Config r3;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.interop.Camera2CameraControl mCamera2CameraControl>;

        $r2 = virtualinvoke $r1.<androidx.camera.camera2.interop.Camera2CameraControl: androidx.camera.camera2.impl.Camera2ImplConfig getCamera2ImplConfig()>();

        r3 = (androidx.camera.core.impl.Config) $r2;

        return r3;
    }

    void setActive(boolean)
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        boolean z0;
        androidx.camera.camera2.internal.FocusMeteringControl $r1;
        androidx.camera.camera2.internal.ZoomControl $r2;
        androidx.camera.camera2.internal.TorchControl $r3;
        androidx.camera.camera2.internal.ExposureControl $r4;
        androidx.camera.camera2.interop.Camera2CameraControl $r5;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        z0 := @parameter0: boolean;

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.FocusMeteringControl mFocusMeteringControl>;

        virtualinvoke $r1.<androidx.camera.camera2.internal.FocusMeteringControl: void setActive(boolean)>(z0);

        $r2 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.ZoomControl mZoomControl>;

        virtualinvoke $r2.<androidx.camera.camera2.internal.ZoomControl: void setActive(boolean)>(z0);

        $r3 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.TorchControl mTorchControl>;

        virtualinvoke $r3.<androidx.camera.camera2.internal.TorchControl: void setActive(boolean)>(z0);

        $r4 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.ExposureControl mExposureControl>;

        virtualinvoke $r4.<androidx.camera.camera2.internal.ExposureControl: void setActive(boolean)>(z0);

        $r5 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.interop.Camera2CameraControl mCamera2CameraControl>;

        virtualinvoke $r5.<androidx.camera.camera2.interop.Camera2CameraControl: void setActive(boolean)>(z0);

        return;
    }

    public void setPreviewAspectRatio(android.util.Rational)
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        android.util.Rational r1;
        androidx.camera.camera2.internal.FocusMeteringControl $r2;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        r1 := @parameter0: android.util.Rational;

        $r2 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.FocusMeteringControl mFocusMeteringControl>;

        virtualinvoke $r2.<androidx.camera.camera2.internal.FocusMeteringControl: void setPreviewAspectRatio(android.util.Rational)>(r1);

        return;
    }

    public com.google.common.util.concurrent.ListenableFuture startFocusAndMetering(androidx.camera.core.FocusMeteringAction)
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        androidx.camera.core.FocusMeteringAction r1;
        boolean $z0;
        androidx.camera.camera2.internal.FocusMeteringControl $r2;
        com.google.common.util.concurrent.ListenableFuture $r3, $r4, $r6;
        androidx.camera.core.CameraControl$OperationCanceledException $r5;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        r1 := @parameter0: androidx.camera.core.FocusMeteringAction;

        $z0 = specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: boolean isControlInUse()>();

        if $z0 != 0 goto label1;

        $r5 = new androidx.camera.core.CameraControl$OperationCanceledException;

        specialinvoke $r5.<androidx.camera.core.CameraControl$OperationCanceledException: void <init>(java.lang.String)>("Camera is not active.");

        $r6 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFailedFuture(java.lang.Throwable)>($r5);

        return $r6;

     label1:
        $r2 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.FocusMeteringControl mFocusMeteringControl>;

        $r3 = virtualinvoke $r2.<androidx.camera.camera2.internal.FocusMeteringControl: com.google.common.util.concurrent.ListenableFuture startFocusAndMetering(androidx.camera.core.FocusMeteringAction)>(r1);

        $r4 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture nonCancellationPropagating(com.google.common.util.concurrent.ListenableFuture)>($r3);

        return $r4;
    }

    public com.google.common.util.concurrent.ListenableFuture cancelFocusAndMetering()
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        boolean $z0;
        androidx.camera.camera2.internal.FocusMeteringControl $r1;
        com.google.common.util.concurrent.ListenableFuture $r2, $r3, $r5;
        androidx.camera.core.CameraControl$OperationCanceledException $r4;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        $z0 = specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: boolean isControlInUse()>();

        if $z0 != 0 goto label1;

        $r4 = new androidx.camera.core.CameraControl$OperationCanceledException;

        specialinvoke $r4.<androidx.camera.core.CameraControl$OperationCanceledException: void <init>(java.lang.String)>("Camera is not active.");

        $r5 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFailedFuture(java.lang.Throwable)>($r4);

        return $r5;

     label1:
        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.FocusMeteringControl mFocusMeteringControl>;

        $r2 = virtualinvoke $r1.<androidx.camera.camera2.internal.FocusMeteringControl: com.google.common.util.concurrent.ListenableFuture cancelFocusAndMetering()>();

        $r3 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture nonCancellationPropagating(com.google.common.util.concurrent.ListenableFuture)>($r2);

        return $r3;
    }

    public com.google.common.util.concurrent.ListenableFuture setZoomRatio(float)
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        float f0;
        boolean $z0;
        androidx.camera.camera2.internal.ZoomControl $r1;
        com.google.common.util.concurrent.ListenableFuture $r2, $r3, $r5;
        androidx.camera.core.CameraControl$OperationCanceledException $r4;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        f0 := @parameter0: float;

        $z0 = specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: boolean isControlInUse()>();

        if $z0 != 0 goto label1;

        $r4 = new androidx.camera.core.CameraControl$OperationCanceledException;

        specialinvoke $r4.<androidx.camera.core.CameraControl$OperationCanceledException: void <init>(java.lang.String)>("Camera is not active.");

        $r5 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFailedFuture(java.lang.Throwable)>($r4);

        return $r5;

     label1:
        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.ZoomControl mZoomControl>;

        $r2 = virtualinvoke $r1.<androidx.camera.camera2.internal.ZoomControl: com.google.common.util.concurrent.ListenableFuture setZoomRatio(float)>(f0);

        $r3 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture nonCancellationPropagating(com.google.common.util.concurrent.ListenableFuture)>($r2);

        return $r3;
    }

    public com.google.common.util.concurrent.ListenableFuture setLinearZoom(float)
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        float f0;
        boolean $z0;
        androidx.camera.camera2.internal.ZoomControl $r1;
        com.google.common.util.concurrent.ListenableFuture $r2, $r3, $r5;
        androidx.camera.core.CameraControl$OperationCanceledException $r4;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        f0 := @parameter0: float;

        $z0 = specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: boolean isControlInUse()>();

        if $z0 != 0 goto label1;

        $r4 = new androidx.camera.core.CameraControl$OperationCanceledException;

        specialinvoke $r4.<androidx.camera.core.CameraControl$OperationCanceledException: void <init>(java.lang.String)>("Camera is not active.");

        $r5 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFailedFuture(java.lang.Throwable)>($r4);

        return $r5;

     label1:
        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.ZoomControl mZoomControl>;

        $r2 = virtualinvoke $r1.<androidx.camera.camera2.internal.ZoomControl: com.google.common.util.concurrent.ListenableFuture setLinearZoom(float)>(f0);

        $r3 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture nonCancellationPropagating(com.google.common.util.concurrent.ListenableFuture)>($r2);

        return $r3;
    }

    public int getFlashMode()
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        int $i0;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        $i0 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: int mFlashMode>;

        return $i0;
    }

    public void setFlashMode(int)
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        int i0, $i1, $i2;
        boolean $z0, $z1;
        androidx.camera.camera2.internal.ZslControl $r1;
        com.google.common.util.concurrent.ListenableFuture $r2;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: boolean isControlInUse()>();

        if $z0 != 0 goto label1;

        staticinvoke <androidx.camera.core.Logger: void w(java.lang.String,java.lang.String)>("Camera2CameraControlImp", "Camera is not active.");

        return;

     label1:
        r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: int mFlashMode> = i0;

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.ZslControl mZslControl>;

        $i1 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: int mFlashMode>;

        if $i1 == 1 goto label2;

        $i2 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: int mFlashMode>;

        if $i2 != 0 goto label3;

     label2:
        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        interfaceinvoke $r1.<androidx.camera.camera2.internal.ZslControl: void setZslDisabledByFlashMode(boolean)>($z1);

        $r2 = virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: com.google.common.util.concurrent.ListenableFuture updateSessionConfigAsync()>();

        r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: com.google.common.util.concurrent.ListenableFuture mFlashModeChangeSessionUpdateFuture> = $r2;

        return;
    }

    public void addZslConfig(androidx.camera.core.impl.SessionConfig$Builder)
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        androidx.camera.core.impl.SessionConfig$Builder r1;
        androidx.camera.camera2.internal.ZslControl $r2;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        r1 := @parameter0: androidx.camera.core.impl.SessionConfig$Builder;

        $r2 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.ZslControl mZslControl>;

        interfaceinvoke $r2.<androidx.camera.camera2.internal.ZslControl: void addZslConfig(androidx.camera.core.impl.SessionConfig$Builder)>(r1);

        return;
    }

    public void setZslDisabledByUserCaseConfig(boolean)
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        boolean z0;
        androidx.camera.camera2.internal.ZslControl $r1;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        z0 := @parameter0: boolean;

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.ZslControl mZslControl>;

        interfaceinvoke $r1.<androidx.camera.camera2.internal.ZslControl: void setZslDisabledByUserCaseConfig(boolean)>(z0);

        return;
    }

    public boolean isZslDisabledByByUserCaseConfig()
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        androidx.camera.camera2.internal.ZslControl $r1;
        boolean $z0;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.ZslControl mZslControl>;

        $z0 = interfaceinvoke $r1.<androidx.camera.camera2.internal.ZslControl: boolean isZslDisabledByUserCaseConfig()>();

        return $z0;
    }

    public com.google.common.util.concurrent.ListenableFuture enableTorch(boolean)
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        boolean z0, $z1;
        androidx.camera.camera2.internal.TorchControl $r1;
        com.google.common.util.concurrent.ListenableFuture $r2, $r3, $r5;
        androidx.camera.core.CameraControl$OperationCanceledException $r4;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        z0 := @parameter0: boolean;

        $z1 = specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: boolean isControlInUse()>();

        if $z1 != 0 goto label1;

        $r4 = new androidx.camera.core.CameraControl$OperationCanceledException;

        specialinvoke $r4.<androidx.camera.core.CameraControl$OperationCanceledException: void <init>(java.lang.String)>("Camera is not active.");

        $r5 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFailedFuture(java.lang.Throwable)>($r4);

        return $r5;

     label1:
        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.TorchControl mTorchControl>;

        $r2 = virtualinvoke $r1.<androidx.camera.camera2.internal.TorchControl: com.google.common.util.concurrent.ListenableFuture enableTorch(boolean)>(z0);

        $r3 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture nonCancellationPropagating(com.google.common.util.concurrent.ListenableFuture)>($r2);

        return $r3;
    }

    private com.google.common.util.concurrent.ListenableFuture waitForSessionUpdateId(long)
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        long l0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Resolver $r1;
        com.google.common.util.concurrent.ListenableFuture $r2;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        l0 := @parameter0: long;

        $r1 = dynamicinvoke "attachCompleter" <androidx.concurrent.futures.CallbackToFutureAdapter$Resolver (androidx.camera.camera2.internal.Camera2CameraControlImpl,long)>(r0, l0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.Camera2CameraControlImpl: java.lang.Object lambda$waitForSessionUpdateId$4(long,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer));

        $r2 = staticinvoke <androidx.concurrent.futures.CallbackToFutureAdapter: com.google.common.util.concurrent.ListenableFuture getFuture(androidx.concurrent.futures.CallbackToFutureAdapter$Resolver)>($r1);

        return $r2;
    }

    static boolean isSessionUpdated(android.hardware.camera2.TotalCaptureResult, long)
    {
        android.hardware.camera2.TotalCaptureResult r0;
        long l0, l1;
        java.lang.Object r1, $r6;
        java.lang.Long r2;
        android.hardware.camera2.CaptureRequest $r3, $r4;
        boolean $z0;
        androidx.camera.core.impl.TagBundle $r5;
        byte $b2;

        r0 := @parameter0: android.hardware.camera2.TotalCaptureResult;

        l0 := @parameter1: long;

        $r3 = virtualinvoke r0.<android.hardware.camera2.TotalCaptureResult: android.hardware.camera2.CaptureRequest getRequest()>();

        if $r3 != null goto label1;

        return 0;

     label1:
        $r4 = virtualinvoke r0.<android.hardware.camera2.TotalCaptureResult: android.hardware.camera2.CaptureRequest getRequest()>();

        r1 = virtualinvoke $r4.<android.hardware.camera2.CaptureRequest: java.lang.Object getTag()>();

        $z0 = r1 instanceof androidx.camera.core.impl.TagBundle;

        if $z0 == 0 goto label3;

        $r5 = (androidx.camera.core.impl.TagBundle) r1;

        $r6 = virtualinvoke $r5.<androidx.camera.core.impl.TagBundle: java.lang.Object getTag(java.lang.String)>("CameraControlSessionUpdateId");

        r2 = (java.lang.Long) $r6;

        if r2 != null goto label2;

        return 0;

     label2:
        l1 = virtualinvoke r2.<java.lang.Long: long longValue()>();

        $b2 = l1 cmp l0;

        if $b2 < 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    public com.google.common.util.concurrent.ListenableFuture setExposureCompensationIndex(int)
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        int i0;
        boolean $z0;
        androidx.camera.camera2.internal.ExposureControl $r1;
        com.google.common.util.concurrent.ListenableFuture $r2, $r4;
        androidx.camera.core.CameraControl$OperationCanceledException $r3;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: boolean isControlInUse()>();

        if $z0 != 0 goto label1;

        $r3 = new androidx.camera.core.CameraControl$OperationCanceledException;

        specialinvoke $r3.<androidx.camera.core.CameraControl$OperationCanceledException: void <init>(java.lang.String)>("Camera is not active.");

        $r4 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFailedFuture(java.lang.Throwable)>($r3);

        return $r4;

     label1:
        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.ExposureControl mExposureControl>;

        $r2 = virtualinvoke $r1.<androidx.camera.camera2.internal.ExposureControl: com.google.common.util.concurrent.ListenableFuture setExposureCompensationIndex(int)>(i0);

        return $r2;
    }

    public com.google.common.util.concurrent.ListenableFuture submitStillCaptureRequests(java.util.List, int, int)
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        java.util.List r1;
        int i0, i1, i2;
        boolean $z0;
        com.google.common.util.concurrent.ListenableFuture $r2, $r3, $r9;
        androidx.camera.core.impl.utils.futures.FutureChain $r4, $r7;
        androidx.camera.core.impl.utils.futures.AsyncFunction $r5;
        java.util.concurrent.Executor $r6;
        androidx.camera.core.CameraControl$OperationCanceledException $r8;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        r1 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: boolean isControlInUse()>();

        if $z0 != 0 goto label1;

        staticinvoke <androidx.camera.core.Logger: void w(java.lang.String,java.lang.String)>("Camera2CameraControlImp", "Camera is not active.");

        $r8 = new androidx.camera.core.CameraControl$OperationCanceledException;

        specialinvoke $r8.<androidx.camera.core.CameraControl$OperationCanceledException: void <init>(java.lang.String)>("Camera is not active.");

        $r9 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFailedFuture(java.lang.Throwable)>($r8);

        return $r9;

     label1:
        i2 = virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: int getFlashMode()>();

        $r2 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: com.google.common.util.concurrent.ListenableFuture mFlashModeChangeSessionUpdateFuture>;

        $r3 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture nonCancellationPropagating(com.google.common.util.concurrent.ListenableFuture)>($r2);

        $r4 = staticinvoke <androidx.camera.core.impl.utils.futures.FutureChain: androidx.camera.core.impl.utils.futures.FutureChain 'from'(com.google.common.util.concurrent.ListenableFuture)>($r3);

        $r5 = dynamicinvoke "apply" <androidx.camera.core.impl.utils.futures.AsyncFunction (androidx.camera.camera2.internal.Camera2CameraControlImpl,java.util.List,int,int,int)>(r0, r1, i0, i2, i1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: com.google.common.util.concurrent.ListenableFuture __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.Camera2CameraControlImpl: com.google.common.util.concurrent.ListenableFuture lambda$submitStillCaptureRequests$5(java.util.List,int,int,int,java.lang.Void)>, methodtype: com.google.common.util.concurrent.ListenableFuture __METHODTYPE__(java.lang.Void));

        $r6 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: java.util.concurrent.Executor mExecutor>;

        $r7 = virtualinvoke $r4.<androidx.camera.core.impl.utils.futures.FutureChain: androidx.camera.core.impl.utils.futures.FutureChain transformAsync(androidx.camera.core.impl.utils.futures.AsyncFunction,java.util.concurrent.Executor)>($r5, $r6);

        return $r7;
    }

    public androidx.camera.core.impl.SessionConfig getSessionConfig()
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        java.lang.Object r1;
        int $i0;
        androidx.camera.core.impl.SessionConfig$Builder $r2, $r4, $r10, $r12, $r14;
        androidx.camera.core.impl.Config $r5;
        androidx.camera.camera2.interop.Camera2CameraControl $r7;
        androidx.camera.camera2.impl.Camera2ImplConfig $r8;
        boolean $z0;
        long $l1;
        java.lang.Long $r13;
        androidx.camera.core.impl.SessionConfig $r15;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        $r2 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.core.impl.SessionConfig$Builder mSessionConfigBuilder>;

        $i0 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: int mTemplate>;

        virtualinvoke $r2.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder setTemplateType(int)>($i0);

        $r4 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.core.impl.SessionConfig$Builder mSessionConfigBuilder>;

        $r5 = virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.core.impl.Config getSessionOptions()>();

        virtualinvoke $r4.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder setImplementationOptions(androidx.camera.core.impl.Config)>($r5);

        $r7 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.interop.Camera2CameraControl mCamera2CameraControl>;

        $r8 = virtualinvoke $r7.<androidx.camera.camera2.interop.Camera2CameraControl: androidx.camera.camera2.impl.Camera2ImplConfig getCamera2ImplConfig()>();

        r1 = virtualinvoke $r8.<androidx.camera.camera2.impl.Camera2ImplConfig: java.lang.Object getCaptureRequestTag(java.lang.Object)>(null);

        if r1 == null goto label1;

        $z0 = r1 instanceof java.lang.Integer;

        if $z0 == 0 goto label1;

        $r10 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.core.impl.SessionConfig$Builder mSessionConfigBuilder>;

        virtualinvoke $r10.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder addTag(java.lang.String,java.lang.Object)>("Camera2CameraControl", r1);

     label1:
        $r12 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.core.impl.SessionConfig$Builder mSessionConfigBuilder>;

        $l1 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: long mCurrentSessionUpdateId>;

        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        virtualinvoke $r12.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder addTag(java.lang.String,java.lang.Object)>("CameraControlSessionUpdateId", $r13);

        $r14 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.core.impl.SessionConfig$Builder mSessionConfigBuilder>;

        $r15 = virtualinvoke $r14.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig build()>();

        return $r15;
    }

    void setTemplate(int)
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        int i0, $i1, $i2;
        androidx.camera.camera2.internal.FocusMeteringControl $r1;
        androidx.camera.camera2.internal.Camera2CapturePipeline $r2;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        i0 := @parameter0: int;

        r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: int mTemplate> = i0;

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.FocusMeteringControl mFocusMeteringControl>;

        $i1 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: int mTemplate>;

        virtualinvoke $r1.<androidx.camera.camera2.internal.FocusMeteringControl: void setTemplate(int)>($i1);

        $r2 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.Camera2CapturePipeline mCamera2CapturePipeline>;

        $i2 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: int mTemplate>;

        virtualinvoke $r2.<androidx.camera.camera2.internal.Camera2CapturePipeline: void setTemplate(int)>($i2);

        return;
    }

    void resetTemplate()
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: void setTemplate(int)>(1);

        return;
    }

    private boolean isControlInUse()
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        int $i0;
        boolean $z0;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        $i0 = virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: int getUseCount()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void updateSessionConfig()
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        java.util.concurrent.Executor $r1;
        java.lang.Runnable $r2;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: java.util.concurrent.Executor mExecutor>;

        $r2 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.camera2.internal.Camera2CameraControlImpl)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_VIRTUAL" <androidx.camera.camera2.internal.Camera2CameraControlImpl: long updateSessionConfigSynchronous()>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r2);

        return;
    }

    com.google.common.util.concurrent.ListenableFuture updateSessionConfigAsync()
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        com.google.common.util.concurrent.ListenableFuture r1, $r3;
        androidx.concurrent.futures.CallbackToFutureAdapter$Resolver $r2;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        $r2 = dynamicinvoke "attachCompleter" <androidx.concurrent.futures.CallbackToFutureAdapter$Resolver (androidx.camera.camera2.internal.Camera2CameraControlImpl)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.Camera2CameraControlImpl: java.lang.Object lambda$updateSessionConfigAsync$7(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer));

        r1 = staticinvoke <androidx.concurrent.futures.CallbackToFutureAdapter: com.google.common.util.concurrent.ListenableFuture getFuture(androidx.concurrent.futures.CallbackToFutureAdapter$Resolver)>($r2);

        $r3 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture nonCancellationPropagating(com.google.common.util.concurrent.ListenableFuture)>(r1);

        return $r3;
    }

    long updateSessionConfigSynchronous()
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        java.util.concurrent.atomic.AtomicLong $r1;
        long $l0, $l1;
        androidx.camera.core.impl.CameraControlInternal$ControlUpdateCallback $r2;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: java.util.concurrent.atomic.AtomicLong mNextSessionUpdateId>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>();

        r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: long mCurrentSessionUpdateId> = $l0;

        $r2 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.core.impl.CameraControlInternal$ControlUpdateCallback mControlUpdateCallback>;

        interfaceinvoke $r2.<androidx.camera.core.impl.CameraControlInternal$ControlUpdateCallback: void onCameraControlUpdateSessionConfig()>();

        $l1 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: long mCurrentSessionUpdateId>;

        return $l1;
    }

    android.graphics.Rect getCropSensorRegion()
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        androidx.camera.camera2.internal.ZoomControl $r1;
        android.graphics.Rect $r2;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.ZoomControl mZoomControl>;

        $r2 = virtualinvoke $r1.<androidx.camera.camera2.internal.ZoomControl: android.graphics.Rect getCropSensorRegion()>();

        return $r2;
    }

    public android.graphics.Rect getSensorRect()
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        android.hardware.camera2.CameraCharacteristics$Key $r1;
        androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat $r2;
        java.lang.Object $r3, $r5;
        android.graphics.Rect $r4, $r6;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        $r2 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat mCameraCharacteristics>;

        $r1 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_ACTIVE_ARRAY_SIZE>;

        $r3 = virtualinvoke $r2.<androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r1);

        $r4 = (android.graphics.Rect) $r3;

        $r5 = staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r4);

        $r6 = (android.graphics.Rect) $r5;

        return $r6;
    }

    void removeCaptureResultListener(androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener)
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener r1;
        androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraControlSessionCallback $r2;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        r1 := @parameter0: androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener;

        $r2 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraControlSessionCallback mSessionCallback>;

        virtualinvoke $r2.<androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraControlSessionCallback: void removeListener(androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener)>(r1);

        return;
    }

    void addCaptureResultListener(androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener)
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener r1;
        androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraControlSessionCallback $r2;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        r1 := @parameter0: androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener;

        $r2 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraControlSessionCallback mSessionCallback>;

        virtualinvoke $r2.<androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraControlSessionCallback: void addListener(androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener)>(r1);

        return;
    }

    void addSessionCameraCaptureCallback(java.util.concurrent.Executor, androidx.camera.core.impl.CameraCaptureCallback)
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        java.util.concurrent.Executor r1, $r3;
        androidx.camera.core.impl.CameraCaptureCallback r2;
        java.lang.Runnable $r4;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: androidx.camera.core.impl.CameraCaptureCallback;

        $r3 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: java.util.concurrent.Executor mExecutor>;

        $r4 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.camera2.internal.Camera2CameraControlImpl,java.util.concurrent.Executor,androidx.camera.core.impl.CameraCaptureCallback)>(r0, r1, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.Camera2CameraControlImpl: void lambda$addSessionCameraCaptureCallback$8(java.util.concurrent.Executor,androidx.camera.core.impl.CameraCaptureCallback)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r3.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r4);

        return;
    }

    void removeSessionCameraCaptureCallback(androidx.camera.core.impl.CameraCaptureCallback)
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        androidx.camera.core.impl.CameraCaptureCallback r1;
        java.util.concurrent.Executor $r2;
        java.lang.Runnable $r3;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        r1 := @parameter0: androidx.camera.core.impl.CameraCaptureCallback;

        $r2 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: java.util.concurrent.Executor mExecutor>;

        $r3 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.camera2.internal.Camera2CameraControlImpl,androidx.camera.core.impl.CameraCaptureCallback)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.Camera2CameraControlImpl: void lambda$removeSessionCameraCaptureCallback$9(androidx.camera.core.impl.CameraCaptureCallback)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r3);

        return;
    }

    void enableTorchInternal(boolean)
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        boolean z0;
        androidx.camera.core.impl.CaptureConfig$Builder r1, r14;
        androidx.camera.camera2.impl.Camera2ImplConfig$Builder r2, r15;
        int $i1, $i2;
        android.hardware.camera2.CaptureRequest$Key $r5, $r8;
        java.lang.Integer $r6, $r9;
        androidx.camera.camera2.impl.Camera2ImplConfig $r11;
        androidx.camera.core.impl.CaptureConfig $r12;
        java.util.List $r13;
        androidx.camera.core.impl.Config r16;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        z0 := @parameter0: boolean;

        r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: boolean mIsTorchOn> = z0;

        if z0 != 0 goto label1;

        r14 = new androidx.camera.core.impl.CaptureConfig$Builder;

        specialinvoke r14.<androidx.camera.core.impl.CaptureConfig$Builder: void <init>()>();

        r1 = r14;

        $i1 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: int mTemplate>;

        virtualinvoke r1.<androidx.camera.core.impl.CaptureConfig$Builder: void setTemplateType(int)>($i1);

        virtualinvoke r1.<androidx.camera.core.impl.CaptureConfig$Builder: void setUseRepeatingSurface(boolean)>(1);

        r15 = new androidx.camera.camera2.impl.Camera2ImplConfig$Builder;

        specialinvoke r15.<androidx.camera.camera2.impl.Camera2ImplConfig$Builder: void <init>()>();

        r2 = r15;

        $r5 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_MODE>;

        $i2 = virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: int getSupportedAeMode(int)>(1);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        virtualinvoke r2.<androidx.camera.camera2.impl.Camera2ImplConfig$Builder: androidx.camera.camera2.impl.Camera2ImplConfig$Builder setCaptureRequestOption(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r5, $r6);

        $r8 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key FLASH_MODE>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke r2.<androidx.camera.camera2.impl.Camera2ImplConfig$Builder: androidx.camera.camera2.impl.Camera2ImplConfig$Builder setCaptureRequestOption(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r8, $r9);

        $r11 = virtualinvoke r2.<androidx.camera.camera2.impl.Camera2ImplConfig$Builder: androidx.camera.camera2.impl.Camera2ImplConfig build()>();

        r16 = (androidx.camera.core.impl.Config) $r11;

        virtualinvoke r1.<androidx.camera.core.impl.CaptureConfig$Builder: void addImplementationOptions(androidx.camera.core.impl.Config)>(r16);

        $r12 = virtualinvoke r1.<androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.CaptureConfig build()>();

        $r13 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r12);

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: void submitCaptureRequestsInternal(java.util.List)>($r13);

     label1:
        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: long updateSessionConfigSynchronous()>();

        return;
    }

    boolean isTorchOn()
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        boolean $z0;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        $z0 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: boolean mIsTorchOn>;

        return $z0;
    }

    void submitCaptureRequestsInternal(java.util.List)
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        java.util.List r1;
        androidx.camera.core.impl.CameraControlInternal$ControlUpdateCallback $r2;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        r1 := @parameter0: java.util.List;

        $r2 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.core.impl.CameraControlInternal$ControlUpdateCallback mControlUpdateCallback>;

        interfaceinvoke $r2.<androidx.camera.core.impl.CameraControlInternal$ControlUpdateCallback: void onCameraControlCaptureRequests(java.util.List)>(r1);

        return;
    }

    androidx.camera.core.impl.Config getSessionOptions()
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        androidx.camera.camera2.impl.Camera2ImplConfig$Builder r1, r31;
        androidx.camera.camera2.impl.Camera2ImplConfig r2, $r15;
        java.util.Iterator r3;
        androidx.camera.core.impl.Config$Option r4, r5;
        android.hardware.camera2.CaptureRequest$Key $r7, $r21, $r24, $r26;
        java.lang.Integer $r8, $r22, $r25, $r27;
        androidx.camera.camera2.internal.FocusMeteringControl $r10;
        androidx.camera.camera2.internal.compat.workaround.AeFpsRange $r11;
        androidx.camera.camera2.internal.ZoomControl $r12;
        boolean $z0, $z1;
        int $i0, i1, $i2, $i3;
        java.lang.Object $r16, $r19;
        androidx.camera.core.impl.MutableConfig $r17;
        androidx.camera.core.impl.Config$OptionPriority $r18;
        androidx.camera.camera2.internal.compat.workaround.AutoFlashAEModeDisabler $r20;
        androidx.camera.camera2.internal.ExposureControl $r28;
        androidx.camera.camera2.interop.Camera2CameraControl $r29;
        java.util.Set $r30;
        androidx.camera.core.impl.Config r32, r33, r34;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        r31 = new androidx.camera.camera2.impl.Camera2ImplConfig$Builder;

        specialinvoke r31.<androidx.camera.camera2.impl.Camera2ImplConfig$Builder: void <init>()>();

        r1 = r31;

        $r7 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_MODE>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r1.<androidx.camera.camera2.impl.Camera2ImplConfig$Builder: androidx.camera.camera2.impl.Camera2ImplConfig$Builder setCaptureRequestOption(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r7, $r8);

        $r10 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.FocusMeteringControl mFocusMeteringControl>;

        virtualinvoke $r10.<androidx.camera.camera2.internal.FocusMeteringControl: void addFocusMeteringOptions(androidx.camera.camera2.impl.Camera2ImplConfig$Builder)>(r1);

        $r11 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.compat.workaround.AeFpsRange mAeFpsRange>;

        virtualinvoke $r11.<androidx.camera.camera2.internal.compat.workaround.AeFpsRange: void addAeFpsRangeOptions(androidx.camera.camera2.impl.Camera2ImplConfig$Builder)>(r1);

        $r12 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.ZoomControl mZoomControl>;

        virtualinvoke $r12.<androidx.camera.camera2.internal.ZoomControl: void addZoomOption(androidx.camera.camera2.impl.Camera2ImplConfig$Builder)>(r1);

        i1 = 1;

        $z0 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: boolean mIsTorchOn>;

        if $z0 == 0 goto label1;

        $r21 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key FLASH_MODE>;

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        virtualinvoke r1.<androidx.camera.camera2.impl.Camera2ImplConfig$Builder: androidx.camera.camera2.impl.Camera2ImplConfig$Builder setCaptureRequestOption(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r21, $r22);

        goto label5;

     label1:
        $i0 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: int mFlashMode>;

        tableswitch($i0)
        {
            case 0: goto label4;
            case 1: goto label3;
            case 2: goto label2;
            default: goto label5;
        };

     label2:
        i1 = 1;

        goto label5;

     label3:
        i1 = 3;

        goto label5;

     label4:
        $r20 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.compat.workaround.AutoFlashAEModeDisabler mAutoFlashAEModeDisabler>;

        i1 = virtualinvoke $r20.<androidx.camera.camera2.internal.compat.workaround.AutoFlashAEModeDisabler: int getCorrectedAeMode(int)>(2);

     label5:
        $r24 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_MODE>;

        $i2 = virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: int getSupportedAeMode(int)>(i1);

        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        virtualinvoke r1.<androidx.camera.camera2.impl.Camera2ImplConfig$Builder: androidx.camera.camera2.impl.Camera2ImplConfig$Builder setCaptureRequestOption(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r24, $r25);

        $r26 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AWB_MODE>;

        $i3 = specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: int getSupportedAwbMode(int)>(1);

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        virtualinvoke r1.<androidx.camera.camera2.impl.Camera2ImplConfig$Builder: androidx.camera.camera2.impl.Camera2ImplConfig$Builder setCaptureRequestOption(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r26, $r27);

        $r28 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.ExposureControl mExposureControl>;

        virtualinvoke $r28.<androidx.camera.camera2.internal.ExposureControl: void setCaptureRequestOption(androidx.camera.camera2.impl.Camera2ImplConfig$Builder)>(r1);

        $r29 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.interop.Camera2CameraControl mCamera2CameraControl>;

        r2 = virtualinvoke $r29.<androidx.camera.camera2.interop.Camera2CameraControl: androidx.camera.camera2.impl.Camera2ImplConfig getCamera2ImplConfig()>();

        r32 = (androidx.camera.core.impl.Config) r2;

        $r30 = interfaceinvoke r32.<androidx.camera.core.impl.Config: java.util.Set listOptions()>();

        r3 = interfaceinvoke $r30.<java.util.Set: java.util.Iterator iterator()>();

     label6:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r16 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (androidx.camera.core.impl.Config$Option) $r16;

        r5 = r4;

        $r17 = virtualinvoke r1.<androidx.camera.camera2.impl.Camera2ImplConfig$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r18 = <androidx.camera.core.impl.Config$OptionPriority: androidx.camera.core.impl.Config$OptionPriority ALWAYS_OVERRIDE>;

        r33 = (androidx.camera.core.impl.Config) r2;

        $r19 = interfaceinvoke r33.<androidx.camera.core.impl.Config: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option)>(r5);

        interfaceinvoke $r17.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,androidx.camera.core.impl.Config$OptionPriority,java.lang.Object)>(r5, $r18, $r19);

        goto label6;

     label7:
        $r15 = virtualinvoke r1.<androidx.camera.camera2.impl.Camera2ImplConfig$Builder: androidx.camera.camera2.impl.Camera2ImplConfig build()>();

        r34 = (androidx.camera.core.impl.Config) $r15;

        return r34;
    }

    int getSupportedAfMode(int)
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        int i0;
        int[] r1;
        android.hardware.camera2.CameraCharacteristics$Key $r2;
        androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat $r3;
        java.lang.Object $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        i0 := @parameter0: int;

        $r3 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat mCameraCharacteristics>;

        $r2 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AF_AVAILABLE_MODES>;

        $r4 = virtualinvoke $r3.<androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r2);

        r1 = (int[]) $r4;

        if r1 != null goto label1;

        return 0;

     label1:
        $z0 = specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: boolean isModeInList(int,int[])>(i0, r1);

        if $z0 == 0 goto label2;

        return i0;

     label2:
        $z1 = specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: boolean isModeInList(int,int[])>(4, r1);

        if $z1 == 0 goto label3;

        return 4;

     label3:
        $z2 = specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: boolean isModeInList(int,int[])>(1, r1);

        if $z2 == 0 goto label4;

        return 1;

     label4:
        return 0;
    }

    int getSupportedAeMode(int)
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        int i0;
        int[] r1;
        android.hardware.camera2.CameraCharacteristics$Key $r2;
        androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat $r3;
        java.lang.Object $r4;
        boolean $z0, $z1;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        i0 := @parameter0: int;

        $r3 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat mCameraCharacteristics>;

        $r2 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AE_AVAILABLE_MODES>;

        $r4 = virtualinvoke $r3.<androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r2);

        r1 = (int[]) $r4;

        if r1 != null goto label1;

        return 0;

     label1:
        $z0 = specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: boolean isModeInList(int,int[])>(i0, r1);

        if $z0 == 0 goto label2;

        return i0;

     label2:
        $z1 = specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: boolean isModeInList(int,int[])>(1, r1);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    private int getSupportedAwbMode(int)
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        int i0;
        int[] r1;
        android.hardware.camera2.CameraCharacteristics$Key $r2;
        androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat $r3;
        java.lang.Object $r4;
        boolean $z0, $z1;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        i0 := @parameter0: int;

        $r3 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat mCameraCharacteristics>;

        $r2 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AWB_AVAILABLE_MODES>;

        $r4 = virtualinvoke $r3.<androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r2);

        r1 = (int[]) $r4;

        if r1 != null goto label1;

        return 0;

     label1:
        $z0 = specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: boolean isModeInList(int,int[])>(i0, r1);

        if $z0 == 0 goto label2;

        return i0;

     label2:
        $z1 = specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: boolean isModeInList(int,int[])>(1, r1);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    private boolean isModeInList(int, int[])
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        int i0, i1, i2, i3;
        int[] r1, r2;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: int[];

        r2 = r1;

        i1 = lengthof r2;

        i3 = 0;

     label1:
        if i3 >= i1 goto label3;

        i2 = r2[i3];

        if i0 != i2 goto label2;

        return 1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 0;
    }

    int getMaxAfRegionCount()
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        java.lang.Integer r1;
        android.hardware.camera2.CameraCharacteristics$Key $r2;
        androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat $r3;
        java.lang.Object $r4;
        int $i0;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        $r3 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat mCameraCharacteristics>;

        $r2 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_MAX_REGIONS_AF>;

        $r4 = virtualinvoke $r3.<androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r2);

        r1 = (java.lang.Integer) $r4;

        if r1 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $i0 = virtualinvoke r1.<java.lang.Integer: int intValue()>();

     label2:
        return $i0;
    }

    int getMaxAeRegionCount()
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        java.lang.Integer r1;
        android.hardware.camera2.CameraCharacteristics$Key $r2;
        androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat $r3;
        java.lang.Object $r4;
        int $i0;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        $r3 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat mCameraCharacteristics>;

        $r2 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_MAX_REGIONS_AE>;

        $r4 = virtualinvoke $r3.<androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r2);

        r1 = (java.lang.Integer) $r4;

        if r1 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $i0 = virtualinvoke r1.<java.lang.Integer: int intValue()>();

     label2:
        return $i0;
    }

    int getMaxAwbRegionCount()
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        java.lang.Integer r1;
        android.hardware.camera2.CameraCharacteristics$Key $r2;
        androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat $r3;
        java.lang.Object $r4;
        int $i0;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        $r3 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat mCameraCharacteristics>;

        $r2 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_MAX_REGIONS_AWB>;

        $r4 = virtualinvoke $r3.<androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r2);

        r1 = (java.lang.Integer) $r4;

        if r1 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $i0 = virtualinvoke r1.<java.lang.Integer: int intValue()>();

     label2:
        return $i0;
    }

    long getCurrentSessionUpdateId()
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        long $l0;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        $l0 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: long mCurrentSessionUpdateId>;

        return $l0;
    }

    private void lambda$removeSessionCameraCaptureCallback$9(androidx.camera.core.impl.CameraCaptureCallback)
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        androidx.camera.core.impl.CameraCaptureCallback r1;
        androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraCaptureCallbackSet $r2;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        r1 := @parameter0: androidx.camera.core.impl.CameraCaptureCallback;

        $r2 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraCaptureCallbackSet mCameraCaptureCallbackSet>;

        virtualinvoke $r2.<androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraCaptureCallbackSet: void removeCaptureCallback(androidx.camera.core.impl.CameraCaptureCallback)>(r1);

        return;
    }

    private void lambda$addSessionCameraCaptureCallback$8(java.util.concurrent.Executor, androidx.camera.core.impl.CameraCaptureCallback)
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        java.util.concurrent.Executor r1;
        androidx.camera.core.impl.CameraCaptureCallback r2;
        androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraCaptureCallbackSet $r3;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: androidx.camera.core.impl.CameraCaptureCallback;

        $r3 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraCaptureCallbackSet mCameraCaptureCallbackSet>;

        virtualinvoke $r3.<androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraCaptureCallbackSet: void addCaptureCallback(java.util.concurrent.Executor,androidx.camera.core.impl.CameraCaptureCallback)>(r1, r2);

        return;
    }

    private java.lang.Object lambda$updateSessionConfigAsync$7(androidx.concurrent.futures.CallbackToFutureAdapter$Completer) throws java.lang.Exception
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r1;
        java.util.concurrent.Executor $r2;
        java.lang.Runnable $r3;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        r1 := @parameter0: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        $r2 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: java.util.concurrent.Executor mExecutor>;

        $r3 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.camera2.internal.Camera2CameraControlImpl,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.Camera2CameraControlImpl: void lambda$updateSessionConfigAsync$6(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r3);

        return "updateSessionConfigAsync";
    }

    private void lambda$updateSessionConfigAsync$6(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r1;
        long l0;
        com.google.common.util.concurrent.ListenableFuture $r2;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        r1 := @parameter0: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        l0 = virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: long updateSessionConfigSynchronous()>();

        $r2 = specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: com.google.common.util.concurrent.ListenableFuture waitForSessionUpdateId(long)>(l0);

        staticinvoke <androidx.camera.core.impl.utils.futures.Futures: void propagate(com.google.common.util.concurrent.ListenableFuture,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>($r2, r1);

        return;
    }

    private com.google.common.util.concurrent.ListenableFuture lambda$submitStillCaptureRequests$5(java.util.List, int, int, int, java.lang.Void) throws java.lang.Exception
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        java.util.List r1;
        int i0, i1, i2;
        java.lang.Void r2;
        androidx.camera.camera2.internal.Camera2CapturePipeline $r3;
        com.google.common.util.concurrent.ListenableFuture $r4;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        r1 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r2 := @parameter4: java.lang.Void;

        $r3 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.Camera2CapturePipeline mCamera2CapturePipeline>;

        $r4 = virtualinvoke $r3.<androidx.camera.camera2.internal.Camera2CapturePipeline: com.google.common.util.concurrent.ListenableFuture submitStillCaptures(java.util.List,int,int,int)>(r1, i0, i1, i2);

        return $r4;
    }

    private java.lang.Object lambda$waitForSessionUpdateId$4(long, androidx.concurrent.futures.CallbackToFutureAdapter$Completer) throws java.lang.Exception
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        long l0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r1;
        androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        l0 := @parameter0: long;

        r1 := @parameter1: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        $r2 = dynamicinvoke "onCaptureResult" <androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener (long,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>(l0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: boolean __METHODTYPE__(android.hardware.camera2.TotalCaptureResult), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.camera2.internal.Camera2CameraControlImpl: boolean lambda$waitForSessionUpdateId$3(long,androidx.concurrent.futures.CallbackToFutureAdapter$Completer,android.hardware.camera2.TotalCaptureResult)>, methodtype: boolean __METHODTYPE__(android.hardware.camera2.TotalCaptureResult));

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: void addCaptureResultListener(androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener)>($r2);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("waitForSessionUpdateId:");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    private static boolean lambda$waitForSessionUpdateId$3(long, androidx.concurrent.futures.CallbackToFutureAdapter$Completer, android.hardware.camera2.TotalCaptureResult)
    {
        long l0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r0;
        android.hardware.camera2.TotalCaptureResult r1;
        boolean z0;

        l0 := @parameter0: long;

        r0 := @parameter1: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        r1 := @parameter2: android.hardware.camera2.TotalCaptureResult;

        z0 = staticinvoke <androidx.camera.camera2.internal.Camera2CameraControlImpl: boolean isSessionUpdated(android.hardware.camera2.TotalCaptureResult,long)>(r1, l0);

        if z0 == 0 goto label1;

        virtualinvoke r0.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean set(java.lang.Object)>(null);

        return 1;

     label1:
        return 0;
    }

    private static void lambda$clearInteropConfig$2()
    {
        return;
    }

    private static void lambda$addInteropConfig$1()
    {
        return;
    }

    private void lambda$new$0()
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        androidx.camera.camera2.interop.Camera2CameraControl $r1;
        androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener $r2;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.interop.Camera2CameraControl mCamera2CameraControl>;

        $r2 = virtualinvoke $r1.<androidx.camera.camera2.interop.Camera2CameraControl: androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener getCaptureRequestListener()>();

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: void addCaptureResultListener(androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener)>($r2);

        return;
    }

androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraCaptureCallbackSet
<androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraCaptureCallbackSet: java.util.Set mCallbacks>
<androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraCaptureCallbackSet: java.util.Map mCallbackExecutors>
    void <init>()
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraCaptureCallbackSet r0;
        java.util.HashSet $r1;
        android.util.ArrayMap $r2;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraCaptureCallbackSet;

        specialinvoke r0.<androidx.camera.core.impl.CameraCaptureCallback: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraCaptureCallbackSet: java.util.Set mCallbacks> = $r1;

        $r2 = new android.util.ArrayMap;

        specialinvoke $r2.<android.util.ArrayMap: void <init>()>();

        r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraCaptureCallbackSet: java.util.Map mCallbackExecutors> = $r2;

        return;
    }

    void addCaptureCallback(java.util.concurrent.Executor, androidx.camera.core.impl.CameraCaptureCallback)
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraCaptureCallbackSet r0;
        java.util.concurrent.Executor r1;
        androidx.camera.core.impl.CameraCaptureCallback r2;
        java.util.Set $r3;
        java.util.Map $r4;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraCaptureCallbackSet;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: androidx.camera.core.impl.CameraCaptureCallback;

        $r3 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraCaptureCallbackSet: java.util.Set mCallbacks>;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>(r2);

        $r4 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraCaptureCallbackSet: java.util.Map mCallbackExecutors>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r1);

        return;
    }

    void removeCaptureCallback(androidx.camera.core.impl.CameraCaptureCallback)
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraCaptureCallbackSet r0;
        androidx.camera.core.impl.CameraCaptureCallback r1;
        java.util.Set $r2;
        java.util.Map $r3;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraCaptureCallbackSet;

        r1 := @parameter0: androidx.camera.core.impl.CameraCaptureCallback;

        $r2 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraCaptureCallbackSet: java.util.Set mCallbacks>;

        interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        $r3 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraCaptureCallbackSet: java.util.Map mCallbackExecutors>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    public void onCaptureCompleted(androidx.camera.core.impl.CameraCaptureResult)
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraCaptureCallbackSet r0;
        androidx.camera.core.impl.CameraCaptureResult r1;
        java.util.Iterator r2;
        androidx.camera.core.impl.CameraCaptureCallback r3;
        java.lang.Throwable r4, $r11;
        java.util.Set $r5;
        boolean $z0;
        java.lang.Object $r6, $r8;
        java.util.Map $r7;
        java.util.concurrent.Executor $r9;
        java.lang.Runnable $r10;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraCaptureCallbackSet;

        r1 := @parameter0: androidx.camera.core.impl.CameraCaptureResult;

        $r5 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraCaptureCallbackSet: java.util.Set mCallbacks>;

        r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.camera.core.impl.CameraCaptureCallback) $r6;

     label2:
        $r7 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraCaptureCallbackSet: java.util.Map mCallbackExecutors>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        $r9 = (java.util.concurrent.Executor) $r8;

        $r10 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.core.impl.CameraCaptureCallback,androidx.camera.core.impl.CameraCaptureResult)>(r3, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraCaptureCallbackSet: void lambda$onCaptureCompleted$0(androidx.camera.core.impl.CameraCaptureCallback,androidx.camera.core.impl.CameraCaptureResult)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r9.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r10);

     label3:
        goto label5;

     label4:
        $r11 := @caughtexception;

        r4 = $r11;

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("Camera2CameraControlImp", "Executor rejected to invoke onCaptureCompleted.", r4);

     label5:
        goto label1;

     label6:
        return;

        catch java.util.concurrent.RejectedExecutionException from label2 to label3 with label4;
    }

    public void onCaptureFailed(androidx.camera.core.impl.CameraCaptureFailure)
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraCaptureCallbackSet r0;
        androidx.camera.core.impl.CameraCaptureFailure r1;
        java.util.Iterator r2;
        androidx.camera.core.impl.CameraCaptureCallback r3;
        java.lang.Throwable r4, $r11;
        java.util.Set $r5;
        boolean $z0;
        java.lang.Object $r6, $r8;
        java.util.Map $r7;
        java.util.concurrent.Executor $r9;
        java.lang.Runnable $r10;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraCaptureCallbackSet;

        r1 := @parameter0: androidx.camera.core.impl.CameraCaptureFailure;

        $r5 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraCaptureCallbackSet: java.util.Set mCallbacks>;

        r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.camera.core.impl.CameraCaptureCallback) $r6;

     label2:
        $r7 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraCaptureCallbackSet: java.util.Map mCallbackExecutors>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        $r9 = (java.util.concurrent.Executor) $r8;

        $r10 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.core.impl.CameraCaptureCallback,androidx.camera.core.impl.CameraCaptureFailure)>(r3, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraCaptureCallbackSet: void lambda$onCaptureFailed$1(androidx.camera.core.impl.CameraCaptureCallback,androidx.camera.core.impl.CameraCaptureFailure)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r9.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r10);

     label3:
        goto label5;

     label4:
        $r11 := @caughtexception;

        r4 = $r11;

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("Camera2CameraControlImp", "Executor rejected to invoke onCaptureFailed.", r4);

     label5:
        goto label1;

     label6:
        return;

        catch java.util.concurrent.RejectedExecutionException from label2 to label3 with label4;
    }

    public void onCaptureCancelled()
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraCaptureCallbackSet r0;
        java.util.Iterator r1;
        androidx.camera.core.impl.CameraCaptureCallback r2;
        java.lang.Throwable r3, $r10;
        java.util.Set $r4;
        boolean $z0;
        java.lang.Object $r5, $r7;
        java.util.Map $r6;
        java.util.concurrent.Executor $r8;
        java.lang.Runnable $r9;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraCaptureCallbackSet;

        $r4 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraCaptureCallbackSet: java.util.Set mCallbacks>;

        r1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (androidx.camera.core.impl.CameraCaptureCallback) $r5;

     label2:
        $r6 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraCaptureCallbackSet: java.util.Map mCallbackExecutors>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r8 = (java.util.concurrent.Executor) $r7;

        $r9 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.core.impl.CameraCaptureCallback)>(r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraCaptureCallbackSet: void lambda$onCaptureCancelled$2(androidx.camera.core.impl.CameraCaptureCallback)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r8.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r9);

     label3:
        goto label5;

     label4:
        $r10 := @caughtexception;

        r3 = $r10;

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("Camera2CameraControlImp", "Executor rejected to invoke onCaptureCancelled.", r3);

     label5:
        goto label1;

     label6:
        return;

        catch java.util.concurrent.RejectedExecutionException from label2 to label3 with label4;
    }

    private static void lambda$onCaptureCancelled$2(androidx.camera.core.impl.CameraCaptureCallback)
    {
        androidx.camera.core.impl.CameraCaptureCallback r0;

        r0 := @parameter0: androidx.camera.core.impl.CameraCaptureCallback;

        virtualinvoke r0.<androidx.camera.core.impl.CameraCaptureCallback: void onCaptureCancelled()>();

        return;
    }

    private static void lambda$onCaptureFailed$1(androidx.camera.core.impl.CameraCaptureCallback, androidx.camera.core.impl.CameraCaptureFailure)
    {
        androidx.camera.core.impl.CameraCaptureCallback r0;
        androidx.camera.core.impl.CameraCaptureFailure r1;

        r0 := @parameter0: androidx.camera.core.impl.CameraCaptureCallback;

        r1 := @parameter1: androidx.camera.core.impl.CameraCaptureFailure;

        virtualinvoke r0.<androidx.camera.core.impl.CameraCaptureCallback: void onCaptureFailed(androidx.camera.core.impl.CameraCaptureFailure)>(r1);

        return;
    }

    private static void lambda$onCaptureCompleted$0(androidx.camera.core.impl.CameraCaptureCallback, androidx.camera.core.impl.CameraCaptureResult)
    {
        androidx.camera.core.impl.CameraCaptureCallback r0;
        androidx.camera.core.impl.CameraCaptureResult r1;

        r0 := @parameter0: androidx.camera.core.impl.CameraCaptureCallback;

        r1 := @parameter1: androidx.camera.core.impl.CameraCaptureResult;

        virtualinvoke r0.<androidx.camera.core.impl.CameraCaptureCallback: void onCaptureCompleted(androidx.camera.core.impl.CameraCaptureResult)>(r1);

        return;
    }

androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraControlSessionCallback
<androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraControlSessionCallback: java.util.Set mResultListeners>
<androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraControlSessionCallback: java.util.concurrent.Executor mExecutor>
    void <init>(java.util.concurrent.Executor)
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraControlSessionCallback r0;
        java.util.concurrent.Executor r1;
        java.util.HashSet $r2;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraControlSessionCallback;

        r1 := @parameter0: java.util.concurrent.Executor;

        specialinvoke r0.<android.hardware.camera2.CameraCaptureSession$CaptureCallback: void <init>()>();

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraControlSessionCallback: java.util.Set mResultListeners> = $r2;

        r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraControlSessionCallback: java.util.concurrent.Executor mExecutor> = r1;

        return;
    }

    void addListener(androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener)
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraControlSessionCallback r0;
        androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener r1;
        java.util.Set $r2;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraControlSessionCallback;

        r1 := @parameter0: androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener;

        $r2 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraControlSessionCallback: java.util.Set mResultListeners>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    void removeListener(androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener)
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraControlSessionCallback r0;
        androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener r1;
        java.util.Set $r2;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraControlSessionCallback;

        r1 := @parameter0: androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener;

        $r2 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraControlSessionCallback: java.util.Set mResultListeners>;

        interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public void onCaptureCompleted(android.hardware.camera2.CameraCaptureSession, android.hardware.camera2.CaptureRequest, android.hardware.camera2.TotalCaptureResult)
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraControlSessionCallback r0;
        android.hardware.camera2.CameraCaptureSession r1;
        android.hardware.camera2.CaptureRequest r2;
        android.hardware.camera2.TotalCaptureResult r3;
        java.util.concurrent.Executor $r4;
        java.lang.Runnable $r5;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraControlSessionCallback;

        r1 := @parameter0: android.hardware.camera2.CameraCaptureSession;

        r2 := @parameter1: android.hardware.camera2.CaptureRequest;

        r3 := @parameter2: android.hardware.camera2.TotalCaptureResult;

        $r4 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraControlSessionCallback: java.util.concurrent.Executor mExecutor>;

        $r5 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraControlSessionCallback,android.hardware.camera2.TotalCaptureResult)>(r0, r3) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraControlSessionCallback: void lambda$onCaptureCompleted$0(android.hardware.camera2.TotalCaptureResult)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r4.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r5);

        return;
    }

    private void lambda$onCaptureCompleted$0(android.hardware.camera2.TotalCaptureResult)
    {
        androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraControlSessionCallback r0;
        android.hardware.camera2.TotalCaptureResult r1;
        java.util.HashSet r2, $r5;
        java.util.Iterator r3;
        androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener r4;
        boolean z0, $z1, $z2;
        java.util.Set $r6, $r7;
        java.lang.Object $r8;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraControlSessionCallback;

        r1 := @parameter0: android.hardware.camera2.TotalCaptureResult;

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        r2 = $r5;

        $r6 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraControlSessionCallback: java.util.Set mResultListeners>;

        r3 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener) $r8;

        z0 = interfaceinvoke r4.<androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener: boolean onCaptureResult(android.hardware.camera2.TotalCaptureResult)>(r1);

        if z0 == 0 goto label2;

        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>(r4);

     label2:
        goto label1;

     label3:
        $z2 = interfaceinvoke r2.<java.util.Set: boolean isEmpty()>();

        if $z2 != 0 goto label4;

        $r7 = r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl$CameraControlSessionCallback: java.util.Set mResultListeners>;

        interfaceinvoke $r7.<java.util.Set: boolean removeAll(java.util.Collection)>(r2);

     label4:
        return;
    }

androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener
<androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener: boolean onCaptureResult(android.hardware.camera2.TotalCaptureResult)>
