androidx.test.espresso.internal.data.TestFlowVisualizer
<androidx.test.espresso.internal.data.TestFlowVisualizer: androidx.test.espresso.internal.data.TestFlowVisualizer testFlowVisualizer>
<androidx.test.espresso.internal.data.TestFlowVisualizer: java.lang.String TEST_FLOW_ARG>
<androidx.test.espresso.internal.data.TestFlowVisualizer: java.lang.String LOG_TAG>
<androidx.test.espresso.internal.data.TestFlowVisualizer: androidx.test.espresso.internal.data.model.TestFlow testFlow>
<androidx.test.espresso.internal.data.TestFlowVisualizer: androidx.test.platform.io.PlatformTestStorage platformTestStorage>
<androidx.test.espresso.internal.data.TestFlowVisualizer: int actionIndex>
<androidx.test.espresso.internal.data.TestFlowVisualizer: java.lang.Boolean enabled>
    public int getLastActionIndex()
    {
        androidx.test.espresso.internal.data.TestFlowVisualizer r0;
        int $i0;

        r0 := @this: androidx.test.espresso.internal.data.TestFlowVisualizer;

        $i0 = r0.<androidx.test.espresso.internal.data.TestFlowVisualizer: int actionIndex>;

        return $i0;
    }

    public int getLastActionIndexAndIncrement()
    {
        androidx.test.espresso.internal.data.TestFlowVisualizer r0;
        int i0, $i1, $i2;

        r0 := @this: androidx.test.espresso.internal.data.TestFlowVisualizer;

        i0 = r0.<androidx.test.espresso.internal.data.TestFlowVisualizer: int actionIndex>;

        $i1 = r0.<androidx.test.espresso.internal.data.TestFlowVisualizer: int actionIndex>;

        $i2 = $i1 + 1;

        r0.<androidx.test.espresso.internal.data.TestFlowVisualizer: int actionIndex> = $i2;

        return i0;
    }

    private android.graphics.Rect adjustViewCoords(android.view.View)
    {
        android.graphics.Rect r0;
        androidx.test.espresso.action.GeneralLocation $r1, $r2;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        int $i0, $i1, $i2, $i3;
        androidx.test.espresso.internal.data.TestFlowVisualizer r3;
        android.view.View r4;
        float[] r5, r6;

        r3 := @this: androidx.test.espresso.internal.data.TestFlowVisualizer;

        r4 := @parameter0: android.view.View;

        $r1 = <androidx.test.espresso.action.GeneralLocation: androidx.test.espresso.action.GeneralLocation TOP_LEFT>;

        r5 = virtualinvoke $r1.<androidx.test.espresso.action.GeneralLocation: float[] calculateCoordinates(android.view.View)>(r4);

        $r2 = <androidx.test.espresso.action.GeneralLocation: androidx.test.espresso.action.GeneralLocation BOTTOM_RIGHT>;

        r6 = virtualinvoke $r2.<androidx.test.espresso.action.GeneralLocation: float[] calculateCoordinates(android.view.View)>(r4);

        $f0 = r6[1];

        $f1 = staticinvoke <java.lang.Math: float min(float,float)>($f0, 800.0F);

        r6[1] = $f1;

        r0 = new android.graphics.Rect;

        $f2 = r5[0];

        $i3 = (int) $f2;

        $f3 = r5[1];

        $i2 = (int) $f3;

        $f4 = r6[0];

        $i1 = (int) $f4;

        $f5 = r6[1];

        $i0 = (int) $f5;

        specialinvoke r0.<android.graphics.Rect: void <init>(int,int,int,int)>($i3, $i2, $i1, $i0);

        return r0;
    }

    public static androidx.test.espresso.internal.data.TestFlowVisualizer getInstance(androidx.test.platform.io.PlatformTestStorage)
    {
        androidx.test.espresso.internal.data.TestFlowVisualizer r0, $r1, $r2, $r3;
        androidx.test.platform.io.PlatformTestStorage $r4, r5;
        java.lang.IllegalStateException r6;

        r5 := @parameter0: androidx.test.platform.io.PlatformTestStorage;

        $r1 = <androidx.test.espresso.internal.data.TestFlowVisualizer: androidx.test.espresso.internal.data.TestFlowVisualizer testFlowVisualizer>;

        if $r1 == null goto label2;

        $r3 = <androidx.test.espresso.internal.data.TestFlowVisualizer: androidx.test.espresso.internal.data.TestFlowVisualizer testFlowVisualizer>;

        $r4 = $r3.<androidx.test.espresso.internal.data.TestFlowVisualizer: androidx.test.platform.io.PlatformTestStorage platformTestStorage>;

        if $r4 == r5 goto label1;

        r6 = new java.lang.IllegalStateException;

        specialinvoke r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("getInstance called with different instance of PlatformTestStorage.");

        throw r6;

     label1:
        $r2 = <androidx.test.espresso.internal.data.TestFlowVisualizer: androidx.test.espresso.internal.data.TestFlowVisualizer testFlowVisualizer>;

        return $r2;

     label2:
        r0 = new androidx.test.espresso.internal.data.TestFlowVisualizer;

        specialinvoke r0.<androidx.test.espresso.internal.data.TestFlowVisualizer: void <init>(androidx.test.platform.io.PlatformTestStorage)>(r5);

        <androidx.test.espresso.internal.data.TestFlowVisualizer: androidx.test.espresso.internal.data.TestFlowVisualizer testFlowVisualizer> = r0;

        goto label1;
    }

    void <init>(androidx.test.platform.io.PlatformTestStorage)
    {
        androidx.test.espresso.internal.data.TestFlowVisualizer r0;
        androidx.test.platform.io.PlatformTestStorage r1;
        androidx.test.espresso.internal.data.model.TestFlow r2;

        r0 := @this: androidx.test.espresso.internal.data.TestFlowVisualizer;

        r1 := @parameter0: androidx.test.platform.io.PlatformTestStorage;

        r2 = new androidx.test.espresso.internal.data.model.TestFlow;

        specialinvoke r2.<androidx.test.espresso.internal.data.model.TestFlow: void <init>()>();

        specialinvoke r0.<androidx.test.espresso.internal.data.TestFlowVisualizer: void <init>(androidx.test.platform.io.PlatformTestStorage,androidx.test.espresso.internal.data.model.TestFlow)>(r1, r2);

        return;
    }

    void <init>(androidx.test.platform.io.PlatformTestStorage, androidx.test.espresso.internal.data.model.TestFlow)
    {
        androidx.test.espresso.internal.data.TestFlowVisualizer r0;
        androidx.test.platform.io.PlatformTestStorage r1, $r4;
        androidx.test.espresso.internal.data.model.TestFlow r2, $r6;
        java.lang.Object $r3, $r5;

        r0 := @this: androidx.test.espresso.internal.data.TestFlowVisualizer;

        r1 := @parameter0: androidx.test.platform.io.PlatformTestStorage;

        r2 := @parameter1: androidx.test.espresso.internal.data.model.TestFlow;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.test.espresso.internal.data.TestFlowVisualizer: int actionIndex> = 0;

        $r3 = staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = (androidx.test.platform.io.PlatformTestStorage) $r3;

        r0.<androidx.test.espresso.internal.data.TestFlowVisualizer: androidx.test.platform.io.PlatformTestStorage platformTestStorage> = $r4;

        $r5 = staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r6 = (androidx.test.espresso.internal.data.model.TestFlow) $r5;

        r0.<androidx.test.espresso.internal.data.TestFlowVisualizer: androidx.test.espresso.internal.data.model.TestFlow testFlow> = $r6;

        return;
    }

    public void afterActionGenerateTestArtifact(int)
    {
        int i0;
        java.lang.StringBuilder $r0, $r1, $r2, r5;
        java.lang.String $r3;
        androidx.test.espresso.internal.data.TestFlowVisualizer r4;

        r4 := @this: androidx.test.espresso.internal.data.TestFlowVisualizer;

        i0 := @parameter0: int;

        r5 = new java.lang.StringBuilder;

        specialinvoke r5.<java.lang.StringBuilder: void <init>()>();

        $r0 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("screenshot-after-");

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".png");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.test.internal.platform.util.TestOutputEmitter: boolean takeScreenshot(java.lang.String)>($r3);

        return;
    }

    public void afterActionRecordData(androidx.test.espresso.internal.data.model.ActionData)
    {
        androidx.test.espresso.internal.data.TestFlowVisualizer r0;
        androidx.test.espresso.internal.data.model.ActionData r1;
        java.lang.Thread $r2, r6, r8;
        java.lang.String $r3;
        androidx.test.espresso.internal.data.model.TestFlow $r5, r10;
        android.os.Looper r7;
        boolean z0;
        java.lang.Object[] r9;
        androidx.test.espresso.internal.data.model.ScreenData r11, r12;

        r0 := @this: androidx.test.espresso.internal.data.TestFlowVisualizer;

        r1 := @parameter0: androidx.test.espresso.internal.data.model.ActionData;

        r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r7 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        r8 = virtualinvoke r7.<android.os.Looper: java.lang.Thread getThread()>();

        z0 = virtualinvoke r6.<java.lang.Object: boolean equals(java.lang.Object)>(r8);

        r9 = newarray (java.lang.Object)[1];

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r3 = virtualinvoke $r2.<java.lang.Thread: java.lang.String getName()>();

        r9[0] = $r3;

        staticinvoke <androidx.test.internal.util.Checks: void checkState(boolean,java.lang.String,java.lang.Object[])>(z0, "Method cannot be called off the main application thread (on: %s)", r9);

        staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "Requires ActionData to store in graph.");

        r10 = r0.<androidx.test.espresso.internal.data.TestFlowVisualizer: androidx.test.espresso.internal.data.model.TestFlow testFlow>;

        r11 = virtualinvoke r10.<androidx.test.espresso.internal.data.model.TestFlow: androidx.test.espresso.internal.data.model.ScreenData getTail()>();

        r12 = new androidx.test.espresso.internal.data.model.ScreenData;

        specialinvoke r12.<androidx.test.espresso.internal.data.model.ScreenData: void <init>()>();

        r1.<androidx.test.espresso.internal.data.model.ActionData: androidx.test.espresso.internal.data.model.ScreenData source> = r11;

        r1.<androidx.test.espresso.internal.data.model.ActionData: androidx.test.espresso.internal.data.model.ScreenData dest> = r12;

        $r5 = r0.<androidx.test.espresso.internal.data.TestFlowVisualizer: androidx.test.espresso.internal.data.model.TestFlow testFlow>;

        virtualinvoke $r5.<androidx.test.espresso.internal.data.model.TestFlow: void addScreen(androidx.test.espresso.internal.data.model.ScreenData,androidx.test.espresso.internal.data.model.ActionData)>(r12, r1);

        return;
    }

    public void beforeActionGenerateTestArtifact(int)
    {
        int i0;
        java.lang.StringBuilder $r0, $r1, $r2, r5;
        java.lang.String $r3;
        androidx.test.espresso.internal.data.TestFlowVisualizer r4;

        r4 := @this: androidx.test.espresso.internal.data.TestFlowVisualizer;

        i0 := @parameter0: int;

        r5 = new java.lang.StringBuilder;

        specialinvoke r5.<java.lang.StringBuilder: void <init>()>();

        $r0 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("screenshot-before-");

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".png");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.test.internal.platform.util.TestOutputEmitter: boolean takeScreenshot(java.lang.String)>($r3);

        return;
    }

    public void beforeActionRecordData(androidx.test.espresso.internal.data.model.ActionData, android.view.View)
    {
        android.view.View r0;
        java.lang.Thread $r1, r14, r16;
        java.lang.String $r2, $r9;
        java.lang.Integer $r5, $r7;
        androidx.test.espresso.internal.data.model.TestFlow $r6, $r11;
        int $i0;
        androidx.test.espresso.internal.data.model.ActionData $r8, r13;
        android.graphics.Rect $r10, r20;
        androidx.test.espresso.internal.data.TestFlowVisualizer r12;
        android.os.Looper r15;
        boolean z1;
        java.lang.Object[] r17;
        java.lang.IllegalStateException r18, r19;
        androidx.test.espresso.internal.data.model.ScreenData r21;
        androidx.test.espresso.internal.data.model.ViewData r22;

        r12 := @this: androidx.test.espresso.internal.data.TestFlowVisualizer;

        r13 := @parameter0: androidx.test.espresso.internal.data.model.ActionData;

        r0 := @parameter1: android.view.View;

        r14 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r15 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        r16 = virtualinvoke r15.<android.os.Looper: java.lang.Thread getThread()>();

        z1 = virtualinvoke r14.<java.lang.Object: boolean equals(java.lang.Object)>(r16);

        r17 = newarray (java.lang.Object)[1];

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r2 = virtualinvoke $r1.<java.lang.Thread: java.lang.String getName()>();

        r17[0] = $r2;

        staticinvoke <androidx.test.internal.util.Checks: void checkState(boolean,java.lang.String,java.lang.Object[])>(z1, "Method cannot be called off the main application thread (on: %s)", r17);

        staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r13, "Requires actionData to store in graph.");

        staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "Requires View to analyze.");

        $r5 = virtualinvoke r13.<androidx.test.espresso.internal.data.model.ActionData: java.lang.Integer getIndex()>();

        if $r5 != null goto label1;

        r18 = new java.lang.IllegalStateException;

        specialinvoke r18.<java.lang.IllegalStateException: void <init>(java.lang.String)>("ActionData must have a distinguishing index.");

        throw r18;

     label1:
        $r6 = r12.<androidx.test.espresso.internal.data.TestFlowVisualizer: androidx.test.espresso.internal.data.model.TestFlow testFlow>;

        $r7 = virtualinvoke r13.<androidx.test.espresso.internal.data.model.ActionData: java.lang.Integer getIndex()>();

        $i0 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $r8 = virtualinvoke $r6.<androidx.test.espresso.internal.data.model.TestFlow: androidx.test.espresso.internal.data.model.ActionData getEdge(int)>($i0);

        if $r8 == null goto label2;

        r19 = new java.lang.IllegalStateException;

        specialinvoke r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Currently appending to existing ActionData objects is not supported.");

        throw r19;

     label2:
        r20 = new android.graphics.Rect;

        specialinvoke r20.<android.graphics.Rect: void <init>()>();

        virtualinvoke r0.<android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect)>(r20);

        r21 = new androidx.test.espresso.internal.data.model.ScreenData;

        specialinvoke r21.<androidx.test.espresso.internal.data.model.ScreenData: void <init>()>();

        r22 = new androidx.test.espresso.internal.data.model.ViewData;

        $r9 = virtualinvoke r0.<android.view.View: java.lang.String toString()>();

        $r10 = specialinvoke r12.<androidx.test.espresso.internal.data.TestFlowVisualizer: android.graphics.Rect adjustViewCoords(android.view.View)>(r0);

        specialinvoke r22.<androidx.test.espresso.internal.data.model.ViewData: void <init>(java.lang.String,android.graphics.Rect,android.graphics.Rect)>($r9, $r10, r20);

        virtualinvoke r21.<androidx.test.espresso.internal.data.model.ScreenData: void addViewData(androidx.test.espresso.internal.data.model.ViewData)>(r22);

        $r11 = r12.<androidx.test.espresso.internal.data.TestFlowVisualizer: androidx.test.espresso.internal.data.model.TestFlow testFlow>;

        virtualinvoke $r11.<androidx.test.espresso.internal.data.model.TestFlow: void addScreen(androidx.test.espresso.internal.data.model.ScreenData)>(r21);

        return;
    }

    private void beginActionOutput(java.io.PrintStream)
    {
        androidx.test.espresso.internal.data.TestFlowVisualizer r0;
        java.io.PrintStream r1;

        r0 := @this: androidx.test.espresso.internal.data.TestFlowVisualizer;

        r1 := @parameter0: java.io.PrintStream;

        virtualinvoke r1.<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)>("<div class=\"action\"><div style=\"position:relative; display:inline-block;\">");

        return;
    }

    private void displayActionData(androidx.test.espresso.internal.data.model.ActionData, java.io.PrintStream)
    {
        androidx.test.espresso.internal.data.model.ActionData r0;
        java.io.PrintStream r1;
        java.lang.String $r2, $r3, $r4, $r6, $r7, $r8, $r9, $r11, $r12, $r14, $r15;
        androidx.test.espresso.internal.data.TestFlowVisualizer r17;
        java.util.Locale r18, r20, r22;
        java.lang.Object[] r19, r21, r23;

        r17 := @this: androidx.test.espresso.internal.data.TestFlowVisualizer;

        r0 := @parameter0: androidx.test.espresso.internal.data.model.ActionData;

        r1 := @parameter1: java.io.PrintStream;

        $r2 = virtualinvoke r0.<androidx.test.espresso.internal.data.model.ActionData: java.lang.String getName()>();

        if $r2 == null goto label1;

        r18 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        r19 = newarray (java.lang.Object)[1];

        $r14 = virtualinvoke r0.<androidx.test.espresso.internal.data.model.ActionData: java.lang.String getName()>();

        r19[0] = $r14;

        $r15 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(r18, "<p>Classname: %s</p>", r19);

        virtualinvoke r1.<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)>($r15);

     label1:
        $r3 = virtualinvoke r0.<androidx.test.espresso.internal.data.model.ActionData: java.lang.String getDesc()>();

        if $r3 == null goto label2;

        r20 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        r21 = newarray (java.lang.Object)[1];

        $r11 = virtualinvoke r0.<androidx.test.espresso.internal.data.model.ActionData: java.lang.String getDesc()>();

        r21[0] = $r11;

        $r12 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(r20, "<p>Description: %s</p>", r21);

        virtualinvoke r1.<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)>($r12);

     label2:
        $r4 = virtualinvoke r0.<androidx.test.espresso.internal.data.model.ActionData: java.lang.String getConstraints()>();

        if $r4 == null goto label3;

        r22 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        r23 = newarray (java.lang.Object)[1];

        $r6 = virtualinvoke r0.<androidx.test.espresso.internal.data.model.ActionData: java.lang.String getConstraints()>();

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String replace(char,char)>(60, 40);

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String replace(char,char)>(62, 41);

        r23[0] = $r8;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(r22, "<p>Constraints: %s</p>", r23);

        virtualinvoke r1.<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)>($r9);

     label3:
        virtualinvoke r1.<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)>("</div>");

        return;
    }

    private void displayScreenshot(java.lang.String, java.io.PrintStream)
    {
        java.lang.String r0, $r4;
        java.io.PrintStream r1;
        java.lang.Object[] r2;
        androidx.test.espresso.internal.data.TestFlowVisualizer r7;
        java.util.Locale r8;

        r7 := @this: androidx.test.espresso.internal.data.TestFlowVisualizer;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.io.PrintStream;

        virtualinvoke r1.<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)>("<div style=\"width:480px; display: inline-block\">");

        r8 = <java.util.Locale: java.util.Locale ENGLISH>;

        r2 = newarray (java.lang.Object)[1];

        r2[0] = r0;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(r8, "<img src=\"./%s\" />\n", r2);

        virtualinvoke r1.<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)>($r4);

        virtualinvoke r1.<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)>("</div>");

        return;
    }

    private void displayViewData(androidx.test.espresso.internal.data.model.ViewData, java.io.PrintStream)
    {
        java.io.PrintStream r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, i22, i23, i24, i25;
        java.lang.Integer $r1, $r2, $r5, $r6, $r9, $r10, $r13, $r14;
        java.lang.String $r3, $r7, $r11, $r15, $r20, $r21, $r23, $r26, $r29;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, f12, f13, f14;
        java.lang.Float $r28;
        androidx.test.espresso.internal.data.TestFlowVisualizer r31;
        androidx.test.espresso.internal.data.model.ViewData r32;
        android.graphics.Rect r33, r34;
        java.util.Locale r35, r37, r39, r41, r43, r46, r48;
        java.lang.Object[] r36, r38, r40, r42, r44, r45, r47, r49;

        r31 := @this: androidx.test.espresso.internal.data.TestFlowVisualizer;

        r32 := @parameter0: androidx.test.espresso.internal.data.model.ViewData;

        r0 := @parameter1: java.io.PrintStream;

        r33 = virtualinvoke r32.<androidx.test.espresso.internal.data.model.ViewData: android.graphics.Rect getViewBox()>();

        r34 = virtualinvoke r32.<androidx.test.espresso.internal.data.model.ViewData: android.graphics.Rect getVisibleViewBox()>();

        i0 = r33.<android.graphics.Rect: int left>;

        i1 = r33.<android.graphics.Rect: int right>;

        i2 = r33.<android.graphics.Rect: int top>;

        i3 = r33.<android.graphics.Rect: int bottom>;

        r35 = <java.util.Locale: java.util.Locale ENGLISH>;

        r36 = newarray (java.lang.Object)[2];

        $i5 = r34.<android.graphics.Rect: int right>;

        $i4 = r34.<android.graphics.Rect: int left>;

        $i6 = $i5 - $i4;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        r36[0] = $r1;

        $i9 = r34.<android.graphics.Rect: int bottom>;

        $i7 = r34.<android.graphics.Rect: int top>;

        $i8 = $i7 + 3;

        $i10 = $i9 - $i8;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10);

        r36[1] = $r2;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(r35, "<div style=\"border:3px solid rgba(255, 0, 0, .5); width:%d; height:%d", r36);

        virtualinvoke r0.<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)>($r3);

        r37 = <java.util.Locale: java.util.Locale ENGLISH>;

        r38 = newarray (java.lang.Object)[2];

        $i11 = r34.<android.graphics.Rect: int top>;

        $i12 = $i11 + -3;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i12);

        r38[0] = $r5;

        $i13 = r34.<android.graphics.Rect: int left>;

        $i14 = $i13 + -3;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i14);

        r38[1] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(r37, "px; position:absolute; top:%dpx; left: %dpx; z-index:10;\"></div>", r38);

        virtualinvoke r0.<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)>($r7);

        r39 = <java.util.Locale: java.util.Locale ENGLISH>;

        r40 = newarray (java.lang.Object)[2];

        $i15 = i1 - i0;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i15);

        r40[0] = $r9;

        $i16 = i2 + 3;

        $i17 = i3 - $i16;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i17);

        r40[1] = $r10;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(r39, "<div style=\"border:3px solid rgba(0, 0, 255, .5); width:%s; height:%s", r40);

        virtualinvoke r0.<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)>($r11);

        r41 = <java.util.Locale: java.util.Locale ENGLISH>;

        r42 = newarray (java.lang.Object)[2];

        $i18 = i2 + -3;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i18);

        r42[0] = $r13;

        $i19 = i0 + -3;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i19);

        r42[1] = $r14;

        $r15 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(r41, "; position:absolute; top:%spx; left: %spx; z-index:9;\"></div>", r42);

        virtualinvoke r0.<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)>($r15);

        virtualinvoke r0.<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)>("<div class=\"action-item\">");

        virtualinvoke r0.<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)>("<div style=\"border:3px solid rgba(255, 0, 0, .5);\">Visible View</div>");

        virtualinvoke r0.<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)>("<div style=\"border:3px solid rgba(0, 0, 255, .5);\">Actual View</div>");

        r43 = <java.util.Locale: java.util.Locale ENGLISH>;

        r44 = newarray (java.lang.Object)[1];

        $r20 = virtualinvoke r32.<androidx.test.espresso.internal.data.model.ViewData: java.lang.String getDesc()>();

        r44[0] = $r20;

        $r21 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(r43, "<p>%s</p>", r44);

        virtualinvoke r0.<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)>($r21);

        r45 = newarray (java.lang.Object)[1];

        r45[0] = r33;

        $r23 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("View: %s<br />", r45);

        virtualinvoke r0.<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)>($r23);

        r46 = <java.util.Locale: java.util.Locale ENGLISH>;

        r47 = newarray (java.lang.Object)[1];

        virtualinvoke r34.<java.lang.Object: java.lang.Class getClass()>();

        r47[0] = r34;

        $r26 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(r46, "<p>Visible portion: %s</p>", r47);

        virtualinvoke r0.<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)>($r26);

        i22 = r34.<android.graphics.Rect: int bottom>;

        i23 = r34.<android.graphics.Rect: int top>;

        $f1 = (float) i22;

        $f0 = (float) i23;

        $f3 = $f1 - $f0;

        $i20 = i3 - i2;

        $f2 = (float) $i20;

        $f4 = $f3 / $f2;

        f12 = staticinvoke <java.lang.Math: float min(float,float)>($f4, 1.0F);

        i24 = r34.<android.graphics.Rect: int right>;

        i25 = r34.<android.graphics.Rect: int left>;

        $f6 = (float) i24;

        $f5 = (float) i25;

        $f8 = $f6 - $f5;

        $i21 = i1 - i0;

        $f7 = (float) $i21;

        $f9 = $f8 / $f7;

        f13 = staticinvoke <java.lang.Math: float min(float,float)>($f9, 1.0F);

        $f10 = f12 * f13;

        $f11 = $f10 * 100.0F;

        f14 = staticinvoke <java.lang.Math: float max(float,float)>($f11, 0.0F);

        r48 = <java.util.Locale: java.util.Locale ENGLISH>;

        r49 = newarray (java.lang.Object)[1];

        $r28 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f14);

        r49[0] = $r28;

        $r29 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(r48, "This view is %s%% visible.", r49);

        virtualinvoke r0.<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)>($r29);

        return;
    }

    private void endActionOutput(java.io.PrintStream)
    {
        androidx.test.espresso.internal.data.TestFlowVisualizer r0;
        java.io.PrintStream r1;

        r0 := @this: androidx.test.espresso.internal.data.TestFlowVisualizer;

        r1 := @parameter0: java.io.PrintStream;

        virtualinvoke r1.<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)>("</div></div>");

        return;
    }

    private void setStyling(java.io.PrintStream)
    {
        androidx.test.espresso.internal.data.TestFlowVisualizer r0;
        java.io.PrintStream r1;

        r0 := @this: androidx.test.espresso.internal.data.TestFlowVisualizer;

        r1 := @parameter0: java.io.PrintStream;

        virtualinvoke r1.<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)>("<style>\n.action-item {\ndisplay:inline-block;\nwidth:450px;\n");

        virtualinvoke r1.<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)>("margin-left:10px;\nmargin-right:10px;\n}\n</style>");

        return;
    }

    public void visualize()
    {
        java.io.PrintStream r0;
        androidx.test.platform.io.PlatformTestStorage $r1;
        java.io.OutputStream $r2;
        androidx.test.espresso.internal.data.model.TestFlow $r3, $r4;
        java.util.List $r5, $r6, $r10, $r11, $r13, $r14, $r21, r33, $r43;
        java.lang.StringBuilder $r7, $r8, $r9, r29, r37, $r38, $r39, $r40;
        int $i0, $i1, $i2, $i3, $i4, i7, i8, i9, $i10, $i11;
        java.lang.Object $r12, $r15, $r17, $r22, r44;
        androidx.test.espresso.internal.data.model.ActionData $r16, r32;
        androidx.test.espresso.internal.data.model.ViewData $r18, $r23;
        java.lang.String $r19, r30, r34, r41;
        java.lang.Throwable $r24, $r25, $r26, r46, r47, r48;
        androidx.test.espresso.internal.data.TestFlowVisualizer r27;
        androidx.test.espresso.internal.data.model.ScreenData r28, r36;
        boolean z0, z1, z2, z3, z4, z5, z6, z7;
        androidx.test.espresso.internal.data.model.TestArtifact r31, r42;
        java.util.Iterator r35, r45;

        r27 := @this: androidx.test.espresso.internal.data.TestFlowVisualizer;

     label01:
        r0 = new java.io.PrintStream;

        $r1 = r27.<androidx.test.espresso.internal.data.TestFlowVisualizer: androidx.test.platform.io.PlatformTestStorage platformTestStorage>;

        $r2 = interfaceinvoke $r1.<androidx.test.platform.io.PlatformTestStorage: java.io.OutputStream openOutputFile(java.lang.String)>("output_gallery.html");

        specialinvoke r0.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r2);

     label02:
        $r3 = r27.<androidx.test.espresso.internal.data.TestFlowVisualizer: androidx.test.espresso.internal.data.model.TestFlow testFlow>;

        r28 = virtualinvoke $r3.<androidx.test.espresso.internal.data.model.TestFlow: androidx.test.espresso.internal.data.model.ScreenData getHead()>();

     label03:
        if r28 != null goto label06;

     label04:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("TestFlowVisualizer", "Exiting process \'visualize()\', TestFlow graph is empty.");

     label05:
        virtualinvoke r0.<java.io.PrintStream: void close()>();

        return;

     label06:
        $r4 = r27.<androidx.test.espresso.internal.data.TestFlowVisualizer: androidx.test.espresso.internal.data.model.TestFlow testFlow>;

        virtualinvoke $r4.<androidx.test.espresso.internal.data.model.TestFlow: void resetTraversal()>();

        specialinvoke r27.<androidx.test.espresso.internal.data.TestFlowVisualizer: void setStyling(java.io.PrintStream)>(r0);

     label07:
        i7 = 0;

     label08:
        $r5 = virtualinvoke r28.<androidx.test.espresso.internal.data.model.ScreenData: java.util.List getActions()>();

        z0 = interfaceinvoke $r5.<java.util.List: boolean isEmpty()>();

     label09:
        if z0 != 0 goto label40;

     label10:
        i8 = virtualinvoke r28.<androidx.test.espresso.internal.data.model.ScreenData: int getActionIndex()>();

        $r6 = virtualinvoke r28.<androidx.test.espresso.internal.data.model.ScreenData: java.util.List getActions()>();

        i9 = interfaceinvoke $r6.<java.util.List: int size()>();

     label11:
        if i8 >= i9 goto label40;

     label12:
        specialinvoke r27.<androidx.test.espresso.internal.data.TestFlowVisualizer: void beginActionOutput(java.io.PrintStream)>(r0);

        r29 = new java.lang.StringBuilder;

        specialinvoke r29.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("screenshot-before-");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".png");

        r30 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        r31 = new androidx.test.espresso.internal.data.model.TestArtifact;

        specialinvoke r31.<androidx.test.espresso.internal.data.model.TestArtifact: void <init>(java.lang.String,java.lang.String)>(r30, ".png");

        virtualinvoke r28.<androidx.test.espresso.internal.data.model.ScreenData: void addArtifact(androidx.test.espresso.internal.data.model.TestArtifact)>(r31);

        specialinvoke r27.<androidx.test.espresso.internal.data.TestFlowVisualizer: void displayScreenshot(java.lang.String,java.io.PrintStream)>(r30, r0);

        $r10 = virtualinvoke r28.<androidx.test.espresso.internal.data.model.ScreenData: java.util.List getActions()>();

        z1 = interfaceinvoke $r10.<java.util.List: boolean isEmpty()>();

     label13:
        if z1 == 0 goto label15;

     label14:
        virtualinvoke r0.<java.io.PrintStream: void close()>();

        return;

     label15:
        $r11 = virtualinvoke r28.<androidx.test.espresso.internal.data.model.ScreenData: java.util.List getActions()>();

        $i0 = virtualinvoke r28.<androidx.test.espresso.internal.data.model.ScreenData: int getActionIndex()>();

        $r12 = interfaceinvoke $r11.<java.util.List: java.lang.Object get(int)>($i0);

        r32 = (androidx.test.espresso.internal.data.model.ActionData) $r12;

        r33 = virtualinvoke r28.<androidx.test.espresso.internal.data.model.ScreenData: java.util.List getViews()>();

        r34 = virtualinvoke r32.<androidx.test.espresso.internal.data.model.ActionData: java.lang.String getDesc()>();

     label16:
        if r34 == null goto label34;

     label17:
        $r19 = virtualinvoke r32.<androidx.test.espresso.internal.data.model.ActionData: java.lang.String getDesc()>();

        z2 = virtualinvoke $r19.<java.lang.String: boolean contains(java.lang.CharSequence)>("scroll");

     label18:
        if z2 != 0 goto label33;

     label19:
        $r21 = virtualinvoke r28.<androidx.test.espresso.internal.data.model.ScreenData: java.util.List getViews()>();

        z3 = interfaceinvoke $r21.<java.util.List: boolean isEmpty()>();

     label20:
        if z3 != 0 goto label33;

     label21:
        r35 = interfaceinvoke r33.<java.util.List: java.util.Iterator iterator()>();

     label22:
        z4 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>();

     label23:
        if z4 == 0 goto label25;

     label24:
        $r22 = interfaceinvoke r35.<java.util.Iterator: java.lang.Object next()>();

        $r23 = (androidx.test.espresso.internal.data.model.ViewData) $r22;

        specialinvoke r27.<androidx.test.espresso.internal.data.TestFlowVisualizer: void displayViewData(androidx.test.espresso.internal.data.model.ViewData,java.io.PrintStream)>($r23, r0);

        goto label22;

     label25:
        specialinvoke r27.<androidx.test.espresso.internal.data.TestFlowVisualizer: void displayActionData(androidx.test.espresso.internal.data.model.ActionData,java.io.PrintStream)>(r32, r0);

     label26:
        r36 = virtualinvoke r32.<androidx.test.espresso.internal.data.model.ActionData: androidx.test.espresso.internal.data.model.ScreenData getDest()>();

        $i10 = virtualinvoke r28.<androidx.test.espresso.internal.data.model.ScreenData: int getActionIndex()>();

        $i11 = $i10 + 1;

        virtualinvoke r28.<androidx.test.espresso.internal.data.model.ScreenData: void setActionIndex(int)>($i11);

        r37 = new java.lang.StringBuilder;

        specialinvoke r37.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("screenshot-after-");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".png");

        r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        r42 = new androidx.test.espresso.internal.data.model.TestArtifact;

        specialinvoke r42.<androidx.test.espresso.internal.data.model.TestArtifact: void <init>(java.lang.String,java.lang.String)>(r41, ".png");

        virtualinvoke r28.<androidx.test.espresso.internal.data.model.ScreenData: void addArtifact(androidx.test.espresso.internal.data.model.TestArtifact)>(r42);

        specialinvoke r27.<androidx.test.espresso.internal.data.TestFlowVisualizer: void displayScreenshot(java.lang.String,java.io.PrintStream)>(r41, r0);

        $r43 = virtualinvoke r36.<androidx.test.espresso.internal.data.model.ScreenData: java.util.List getActions()>();

        z5 = interfaceinvoke $r43.<java.util.List: boolean isEmpty()>();

     label27:
        if z5 != 0 goto label31;

     label28:
        $r13 = virtualinvoke r36.<androidx.test.espresso.internal.data.model.ScreenData: java.util.List getActions()>();

        $i1 = virtualinvoke r36.<androidx.test.espresso.internal.data.model.ScreenData: int getActionIndex()>();

        r44 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>($i1);

     label29:
        if r44 == null goto label31;

     label30:
        $r14 = virtualinvoke r36.<androidx.test.espresso.internal.data.model.ScreenData: java.util.List getActions()>();

        $i2 = virtualinvoke r36.<androidx.test.espresso.internal.data.model.ScreenData: int getActionIndex()>();

        $r15 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>($i2);

        $r16 = (androidx.test.espresso.internal.data.model.ActionData) $r15;

        r28 = virtualinvoke $r16.<androidx.test.espresso.internal.data.model.ActionData: androidx.test.espresso.internal.data.model.ScreenData getDest()>();

        $i3 = virtualinvoke r36.<androidx.test.espresso.internal.data.model.ScreenData: int getActionIndex()>();

        $i4 = $i3 + 1;

        virtualinvoke r36.<androidx.test.espresso.internal.data.model.ScreenData: void setActionIndex(int)>($i4);

     label31:
        specialinvoke r27.<androidx.test.espresso.internal.data.TestFlowVisualizer: void endActionOutput(java.io.PrintStream)>(r0);

     label32:
        i7 = i7 + 1;

        goto label08;

     label33:
        virtualinvoke r0.<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)>("<div class=\"action-item\">");

        goto label25;

     label34:
        z6 = interfaceinvoke r33.<java.util.List: boolean isEmpty()>();

     label35:
        if z6 != 0 goto label26;

     label36:
        r45 = interfaceinvoke r33.<java.util.List: java.util.Iterator iterator()>();

     label37:
        z7 = interfaceinvoke r45.<java.util.Iterator: boolean hasNext()>();

     label38:
        if z7 == 0 goto label26;

     label39:
        $r17 = interfaceinvoke r45.<java.util.Iterator: java.lang.Object next()>();

        $r18 = (androidx.test.espresso.internal.data.model.ViewData) $r17;

        specialinvoke r27.<androidx.test.espresso.internal.data.TestFlowVisualizer: void displayViewData(androidx.test.espresso.internal.data.model.ViewData,java.io.PrintStream)>($r18, r0);

        goto label37;

     label40:
        virtualinvoke r0.<java.io.PrintStream: void close()>();

     label41:
        return;

     label42:
        $r24 := @caughtexception;

        r46 = $r24;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TestFlowVisualizer", "Exception thrown while trying to display TestFlow.", r46);

        return;

     label43:
        $r26 := @caughtexception;

        r47 = $r26;

     label44:
        virtualinvoke r0.<java.io.PrintStream: void close()>();

     label45:
        throw r47;

     label46:
        $r25 := @caughtexception;

        r48 = $r25;

     label47:
        staticinvoke <androidx.test.espresso.internal.data.TestFlowVisualizer$$ExternalSyntheticBackport0: void m(java.lang.Throwable,java.lang.Throwable)>(r47, r48);

        goto label45;

     label48:
        nop;

        catch java.io.IOException from label01 to label02 with label42;
        catch java.lang.Throwable from label02 to label03 with label43;
        catch java.lang.Throwable from label04 to label05 with label43;
        catch java.io.IOException from label05 to label06 with label42;
        catch java.lang.Throwable from label06 to label07 with label43;
        catch java.lang.Throwable from label08 to label09 with label43;
        catch java.lang.Throwable from label10 to label11 with label43;
        catch java.lang.Throwable from label12 to label13 with label43;
        catch java.io.IOException from label14 to label15 with label42;
        catch java.lang.Throwable from label15 to label16 with label43;
        catch java.lang.Throwable from label17 to label18 with label43;
        catch java.lang.Throwable from label19 to label20 with label43;
        catch java.lang.Throwable from label21 to label22 with label43;
        catch java.lang.Throwable from label22 to label23 with label43;
        catch java.lang.Throwable from label24 to label27 with label43;
        catch java.lang.Throwable from label28 to label29 with label43;
        catch java.lang.Throwable from label30 to label32 with label43;
        catch java.lang.Throwable from label33 to label35 with label43;
        catch java.lang.Throwable from label36 to label37 with label43;
        catch java.lang.Throwable from label37 to label38 with label43;
        catch java.lang.Throwable from label39 to label40 with label43;
        catch java.io.IOException from label40 to label41 with label42;
        catch java.lang.Throwable from label44 to label45 with label46;
        catch java.io.IOException from label45 to label46 with label42;
        catch java.io.IOException from label47 to label48 with label42;
    }

    public boolean isEnabled()
    {
        androidx.test.espresso.internal.data.TestFlowVisualizer r0;
        java.lang.Boolean $r1, $r4, $r7;
        androidx.test.platform.io.PlatformTestStorage $r2, $r5;
        java.util.Map $r3;
        boolean $z0, $z1, z2, $z3;
        java.lang.String $r6;

        r0 := @this: androidx.test.espresso.internal.data.TestFlowVisualizer;

        $r1 = r0.<androidx.test.espresso.internal.data.TestFlowVisualizer: java.lang.Boolean enabled>;

        if $r1 != null goto label2;

        $r2 = r0.<androidx.test.espresso.internal.data.TestFlowVisualizer: androidx.test.platform.io.PlatformTestStorage platformTestStorage>;

        $r3 = interfaceinvoke $r2.<androidx.test.platform.io.PlatformTestStorage: java.util.Map getInputArgs()>();

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>("enable_testflow_gallery");

        if $z0 == 0 goto label3;

        $r5 = r0.<androidx.test.espresso.internal.data.TestFlowVisualizer: androidx.test.platform.io.PlatformTestStorage platformTestStorage>;

        $r6 = interfaceinvoke $r5.<androidx.test.platform.io.PlatformTestStorage: java.lang.String getInputArg(java.lang.String)>("enable_testflow_gallery");

        $z1 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r6);

        if $z1 == 0 goto label3;

        z2 = 1;

     label1:
        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z2);

        r0.<androidx.test.espresso.internal.data.TestFlowVisualizer: java.lang.Boolean enabled> = $r4;

     label2:
        $r7 = r0.<androidx.test.espresso.internal.data.TestFlowVisualizer: java.lang.Boolean enabled>;

        $z3 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

        return $z3;

     label3:
        z2 = 0;

        goto label1;
    }

androidx.test.espresso.internal.data.TestFlowVisualizer$$ExternalSyntheticBackport0
    public static void m(java.lang.Throwable, java.lang.Throwable)
    {
        java.lang.Throwable r0, r1, $r4;
        java.lang.Class[] r2;
        java.lang.Class r5;
        java.lang.String r6;
        java.lang.reflect.Method r7;
        java.lang.Object[] r8;

        r0 := @parameter0: java.lang.Throwable;

        r1 := @parameter1: java.lang.Throwable;

     label1:
        r5 = class "Ljava/lang/Throwable;";

        r6 = "addSuppressed";

        r2 = newarray (java.lang.Class)[1];

     label2:
        r2[0] = class "Ljava/lang/Throwable;";

        r7 = virtualinvoke r5.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>(r6, r2);

        r8 = newarray (java.lang.Object)[1];

        r8[0] = r1;

        virtualinvoke r7.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, r8);

     label3:
        return;

     label4:
        $r4 := @caughtexception;

        return;

        catch java.lang.Exception from label1 to label2 with label4;
        catch java.lang.Exception from label2 to label3 with label4;
    }

