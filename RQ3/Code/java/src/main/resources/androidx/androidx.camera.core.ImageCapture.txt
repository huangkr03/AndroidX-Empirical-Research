androidx.camera.core.ImageCapture
<androidx.camera.core.ImageCapture: int ERROR_UNKNOWN>
<androidx.camera.core.ImageCapture: int ERROR_FILE_IO>
<androidx.camera.core.ImageCapture: int ERROR_CAPTURE_FAILED>
<androidx.camera.core.ImageCapture: int ERROR_CAMERA_CLOSED>
<androidx.camera.core.ImageCapture: int ERROR_INVALID_CAMERA>
<androidx.camera.core.ImageCapture: int CAPTURE_MODE_MAXIMIZE_QUALITY>
<androidx.camera.core.ImageCapture: int CAPTURE_MODE_MINIMIZE_LATENCY>
<androidx.camera.core.ImageCapture: int CAPTURE_MODE_ZERO_SHUTTER_LAG>
<androidx.camera.core.ImageCapture: int FLASH_MODE_UNKNOWN>
<androidx.camera.core.ImageCapture: int FLASH_MODE_AUTO>
<androidx.camera.core.ImageCapture: int FLASH_MODE_ON>
<androidx.camera.core.ImageCapture: int FLASH_MODE_OFF>
<androidx.camera.core.ImageCapture: int FLASH_TYPE_ONE_SHOT_FLASH>
<androidx.camera.core.ImageCapture: int FLASH_TYPE_USE_TORCH_AS_FLASH>
<androidx.camera.core.ImageCapture: androidx.camera.core.ImageCapture$Defaults DEFAULT_CONFIG>
<androidx.camera.core.ImageCapture: java.lang.String TAG>
<androidx.camera.core.ImageCapture: int MAX_IMAGES>
<androidx.camera.core.ImageCapture: byte JPEG_QUALITY_MAXIMIZE_QUALITY_MODE>
<androidx.camera.core.ImageCapture: byte JPEG_QUALITY_MINIMIZE_LATENCY_MODE>
<androidx.camera.core.ImageCapture: int DEFAULT_CAPTURE_MODE>
<androidx.camera.core.ImageCapture: int DEFAULT_FLASH_MODE>
<androidx.camera.core.ImageCapture: boolean mUseProcessingPipeline>
<androidx.camera.core.ImageCapture: androidx.camera.core.internal.compat.workaround.ExifRotationAvailability EXIF_ROTATION_AVAILABILITY>
<androidx.camera.core.ImageCapture: androidx.camera.core.impl.ImageReaderProxy$OnImageAvailableListener mClosingListener>
<androidx.camera.core.ImageCapture: java.util.concurrent.Executor mIoExecutor>
<androidx.camera.core.ImageCapture: int mCaptureMode>
<androidx.camera.core.ImageCapture: java.util.concurrent.atomic.AtomicReference mLockedFlashMode>
<androidx.camera.core.ImageCapture: int mFlashType>
<androidx.camera.core.ImageCapture: int mFlashMode>
<androidx.camera.core.ImageCapture: android.util.Rational mCropAspectRatio>
<androidx.camera.core.ImageCapture: java.util.concurrent.ExecutorService mExecutor>
<androidx.camera.core.ImageCapture: androidx.camera.core.impl.CaptureConfig mCaptureConfig>
<androidx.camera.core.ImageCapture: androidx.camera.core.impl.CaptureBundle mCaptureBundle>
<androidx.camera.core.ImageCapture: int mMaxCaptureStages>
<androidx.camera.core.ImageCapture: androidx.camera.core.impl.CaptureProcessor mCaptureProcessor>
<androidx.camera.core.ImageCapture: boolean mUseSoftwareJpeg>
<androidx.camera.core.ImageCapture: androidx.camera.core.impl.SessionConfig$Builder mSessionConfigBuilder>
<androidx.camera.core.ImageCapture: androidx.camera.core.SafeCloseImageReaderProxy mImageReader>
<androidx.camera.core.ImageCapture: androidx.camera.core.ProcessingImageReader mProcessingImageReader>
<androidx.camera.core.ImageCapture: com.google.common.util.concurrent.ListenableFuture mImageReaderCloseFuture>
<androidx.camera.core.ImageCapture: androidx.camera.core.impl.CameraCaptureCallback mMetadataMatchingCaptureCallback>
<androidx.camera.core.ImageCapture: androidx.camera.core.impl.DeferrableSurface mDeferrableSurface>
<androidx.camera.core.ImageCapture: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor mImageCaptureRequestProcessor>
<androidx.camera.core.ImageCapture: java.util.concurrent.Executor mSequentialIoExecutor>
<androidx.camera.core.ImageCapture: androidx.camera.core.imagecapture.ImagePipeline mImagePipeline>
<androidx.camera.core.ImageCapture: androidx.camera.core.imagecapture.TakePictureManager mTakePictureManager>
<androidx.camera.core.ImageCapture: androidx.camera.core.imagecapture.ImageCaptureControl mImageCaptureControl>
    void <init>(androidx.camera.core.impl.ImageCaptureConfig)
    {
        androidx.camera.core.ImageCapture r0;
        androidx.camera.core.impl.ImageCaptureConfig r1, r2;
        androidx.camera.core.impl.ImageReaderProxy$OnImageAvailableListener $r3;
        java.util.concurrent.atomic.AtomicReference $r4;
        com.google.common.util.concurrent.ListenableFuture $r5;
        androidx.camera.core.ImageCapture$7 $r6;
        androidx.camera.core.impl.UseCaseConfig $r7;
        androidx.camera.core.impl.Config$Option $r8;
        boolean $z0;
        int $i0, $i1;
        java.util.concurrent.Executor $r9, $r10, $r12, $r13, $r14;
        java.lang.Object $r11;

        r0 := @this: androidx.camera.core.ImageCapture;

        r1 := @parameter0: androidx.camera.core.impl.ImageCaptureConfig;

        specialinvoke r0.<androidx.camera.core.UseCase: void <init>(androidx.camera.core.impl.UseCaseConfig)>(r1);

        r0.<androidx.camera.core.ImageCapture: boolean mUseProcessingPipeline> = 0;

        $r3 = dynamicinvoke "onImageAvailable" <androidx.camera.core.impl.ImageReaderProxy$OnImageAvailableListener ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(androidx.camera.core.impl.ImageReaderProxy), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.core.ImageCapture: void lambda$new$0(androidx.camera.core.impl.ImageReaderProxy)>, methodtype: void __METHODTYPE__(androidx.camera.core.impl.ImageReaderProxy));

        r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.ImageReaderProxy$OnImageAvailableListener mClosingListener> = $r3;

        $r4 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>(null);

        r0.<androidx.camera.core.ImageCapture: java.util.concurrent.atomic.AtomicReference mLockedFlashMode> = $r4;

        r0.<androidx.camera.core.ImageCapture: int mFlashMode> = -1;

        r0.<androidx.camera.core.ImageCapture: android.util.Rational mCropAspectRatio> = null;

        r0.<androidx.camera.core.ImageCapture: boolean mUseSoftwareJpeg> = 0;

        $r5 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFuture(java.lang.Object)>(null);

        r0.<androidx.camera.core.ImageCapture: com.google.common.util.concurrent.ListenableFuture mImageReaderCloseFuture> = $r5;

        $r6 = new androidx.camera.core.ImageCapture$7;

        specialinvoke $r6.<androidx.camera.core.ImageCapture$7: void <init>(androidx.camera.core.ImageCapture)>(r0);

        r0.<androidx.camera.core.ImageCapture: androidx.camera.core.imagecapture.ImageCaptureControl mImageCaptureControl> = $r6;

        $r7 = virtualinvoke r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.UseCaseConfig getCurrentConfig()>();

        r2 = (androidx.camera.core.impl.ImageCaptureConfig) $r7;

        $r8 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_IMAGE_CAPTURE_MODE>;

        $z0 = virtualinvoke r2.<androidx.camera.core.impl.ImageCaptureConfig: boolean containsOption(androidx.camera.core.impl.Config$Option)>($r8);

        if $z0 == 0 goto label1;

        $i1 = virtualinvoke r2.<androidx.camera.core.impl.ImageCaptureConfig: int getCaptureMode()>();

        r0.<androidx.camera.core.ImageCapture: int mCaptureMode> = $i1;

        goto label2;

     label1:
        r0.<androidx.camera.core.ImageCapture: int mCaptureMode> = 1;

     label2:
        $i0 = virtualinvoke r2.<androidx.camera.core.impl.ImageCaptureConfig: int getFlashType(int)>(0);

        r0.<androidx.camera.core.ImageCapture: int mFlashType> = $i0;

        $r9 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor ioExecutor()>();

        $r10 = virtualinvoke r2.<androidx.camera.core.impl.ImageCaptureConfig: java.util.concurrent.Executor getIoExecutor(java.util.concurrent.Executor)>($r9);

        $r11 = staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r10);

        $r12 = (java.util.concurrent.Executor) $r11;

        r0.<androidx.camera.core.ImageCapture: java.util.concurrent.Executor mIoExecutor> = $r12;

        $r13 = r0.<androidx.camera.core.ImageCapture: java.util.concurrent.Executor mIoExecutor>;

        $r14 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor newSequentialExecutor(java.util.concurrent.Executor)>($r13);

        r0.<androidx.camera.core.ImageCapture: java.util.concurrent.Executor mSequentialIoExecutor> = $r14;

        return;
    }

    androidx.camera.core.impl.SessionConfig$Builder createPipeline(java.lang.String, androidx.camera.core.impl.ImageCaptureConfig, android.util.Size)
    {
        androidx.camera.core.ImageCapture r0;
        java.lang.String r1, $r64, $r73;
        androidx.camera.core.impl.ImageCaptureConfig r2;
        android.util.Size r3, r120;
        androidx.camera.core.impl.SessionConfig$Builder r4, $r87;
        androidx.camera.core.ProcessingImageReader r5, $r14, $r15, $r18, $r33, $r44;
        androidx.camera.core.impl.MutableTagBundle r6;
        boolean $z0, $z1, $z2, $z3;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, i32, i33;
        androidx.camera.core.impl.CaptureProcessor $r7, $r51, $r56, r93;
        androidx.camera.core.impl.CaptureBundle $r9, $r10, r92;
        java.util.concurrent.ExecutorService $r11, $r55, $r70;
        androidx.camera.core.ProcessingImageReader$Builder $r12, $r13, $r71, $r72, r104, r114;
        androidx.camera.core.impl.CameraCaptureCallback $r16, $r58;
        androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$ImageCaptor $r20;
        androidx.camera.core.SafeCloseImageReaderProxy $r21, $r26, $r30, $r32, $r36, r99, r109, r115, r117;
        androidx.camera.core.impl.ImageReaderProxy$OnImageAvailableListener $r22;
        java.util.concurrent.ScheduledExecutorService $r23, $r39;
        androidx.camera.core.impl.DeferrableSurface $r24, $r34, $r40, $r46;
        android.view.Surface $r27, $r31;
        java.lang.Object $r28, $r75;
        com.google.common.util.concurrent.ListenableFuture $r35, $r98;
        java.lang.Runnable $r38;
        androidx.camera.core.impl.SessionConfig$ErrorListener $r42;
        androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor $r49, $r95, r119;
        java.lang.StringBuilder $r62, $r63, r106;
        android.media.ImageReader $r68, $r81;
        java.util.List $r74;
        androidx.camera.core.impl.CaptureStage $r76;
        java.lang.Integer $r77;
        androidx.camera.core.ImageReaderProxyProvider $r83, $r89;
        androidx.camera.core.impl.ImageReaderProxy $r84, r90;
        androidx.camera.core.impl.CameraControlInternal $r86;
        androidx.camera.core.internal.YuvToJpegProcessor r88, r96, r102, r110, r112;
        androidx.camera.core.ModifiableImageReaderProxy r91, r103;
        androidx.camera.core.MetadataImageReader r94, r116;
        androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$RequestProcessCallback $r97;
        androidx.camera.core.ImageCapture$1 r100;
        androidx.camera.core.AndroidImageReaderProxy r101;
        java.lang.UnsupportedOperationException r105;
        java.lang.IllegalArgumentException r107;
        androidx.camera.core.ImageCapture$2 r108;
        androidx.camera.core.CaptureProcessorPipeline r111;
        java.lang.IllegalStateException r113;
        java.util.concurrent.CancellationException r118;
        androidx.camera.core.impl.ImmediateSurface r121;
        java.util.concurrent.Executor r122, r123, r124, r125, r126;

        r0 := @this: androidx.camera.core.ImageCapture;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.camera.core.impl.ImageCaptureConfig;

        r3 := @parameter2: android.util.Size;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $z0 = specialinvoke r0.<androidx.camera.core.ImageCapture: boolean isNodeEnabled()>();

        if $z0 == 0 goto label01;

        $r87 = specialinvoke r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.SessionConfig$Builder createPipelineWithNode(java.lang.String,androidx.camera.core.impl.ImageCaptureConfig,android.util.Size)>(r1, r2, r3);

        return $r87;

     label01:
        r4 = staticinvoke <androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder createFrom(androidx.camera.core.impl.UseCaseConfig)>(r2);

        r88 = null;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 23 goto label02;

        $i31 = virtualinvoke r0.<androidx.camera.core.ImageCapture: int getCaptureMode()>();

        if $i31 != 2 goto label02;

        $r86 = virtualinvoke r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.CameraControlInternal getCameraControl()>();

        interfaceinvoke $r86.<androidx.camera.core.impl.CameraControlInternal: void addZslConfig(androidx.camera.core.impl.SessionConfig$Builder)>(r4);

     label02:
        $r89 = virtualinvoke r2.<androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.ImageReaderProxyProvider getImageReaderProxyProvider()>();

        if $r89 == null goto label03;

        r99 = new androidx.camera.core.SafeCloseImageReaderProxy;

        $r83 = virtualinvoke r2.<androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.ImageReaderProxyProvider getImageReaderProxyProvider()>();

        $i28 = virtualinvoke r3.<android.util.Size: int getWidth()>();

        $i29 = virtualinvoke r3.<android.util.Size: int getHeight()>();

        $i30 = virtualinvoke r0.<androidx.camera.core.ImageCapture: int getImageFormat()>();

        $r84 = interfaceinvoke $r83.<androidx.camera.core.ImageReaderProxyProvider: androidx.camera.core.impl.ImageReaderProxy newInstance(int,int,int,int,long)>($i28, $i29, $i30, 2, 0L);

        specialinvoke r99.<androidx.camera.core.SafeCloseImageReaderProxy: void <init>(androidx.camera.core.impl.ImageReaderProxy)>($r84);

        r0.<androidx.camera.core.ImageCapture: androidx.camera.core.SafeCloseImageReaderProxy mImageReader> = r99;

        r100 = new androidx.camera.core.ImageCapture$1;

        specialinvoke r100.<androidx.camera.core.ImageCapture$1: void <init>(androidx.camera.core.ImageCapture)>(r0);

        r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.CameraCaptureCallback mMetadataMatchingCaptureCallback> = r100;

        goto label15;

     label03:
        $z1 = specialinvoke r0.<androidx.camera.core.ImageCapture: boolean isSessionProcessorEnabledInCurrentCamera()>();

        if $z1 == 0 goto label08;

        $i17 = virtualinvoke r0.<androidx.camera.core.ImageCapture: int getImageFormat()>();

        if $i17 != 256 goto label04;

        r101 = new androidx.camera.core.AndroidImageReaderProxy;

        $i25 = virtualinvoke r3.<android.util.Size: int getWidth()>();

        $i26 = virtualinvoke r3.<android.util.Size: int getHeight()>();

        $i27 = virtualinvoke r0.<androidx.camera.core.ImageCapture: int getImageFormat()>();

        $r81 = staticinvoke <android.media.ImageReader: android.media.ImageReader newInstance(int,int,int,int)>($i25, $i26, $i27, 2);

        specialinvoke r101.<androidx.camera.core.AndroidImageReaderProxy: void <init>(android.media.ImageReader)>($r81);

        r90 = r101;

        goto label07;

     label04:
        $i18 = virtualinvoke r0.<androidx.camera.core.ImageCapture: int getImageFormat()>();

        if $i18 != 35 goto label06;

        $i20 = <android.os.Build$VERSION: int SDK_INT>;

        if $i20 < 26 goto label05;

        r102 = new androidx.camera.core.internal.YuvToJpegProcessor;

        $i21 = specialinvoke r0.<androidx.camera.core.ImageCapture: int getJpegQualityInternal()>();

        specialinvoke r102.<androidx.camera.core.internal.YuvToJpegProcessor: void <init>(int,int)>($i21, 2);

        r88 = r102;

        r103 = new androidx.camera.core.ModifiableImageReaderProxy;

        $i22 = virtualinvoke r3.<android.util.Size: int getWidth()>();

        $i23 = virtualinvoke r3.<android.util.Size: int getHeight()>();

        $r68 = staticinvoke <android.media.ImageReader: android.media.ImageReader newInstance(int,int,int,int)>($i22, $i23, 35, 2);

        specialinvoke r103.<androidx.camera.core.ModifiableImageReaderProxy: void <init>(android.media.ImageReader)>($r68);

        r91 = r103;

        r92 = staticinvoke <androidx.camera.core.CaptureBundles: androidx.camera.core.impl.CaptureBundle singleDefaultCaptureBundle()>();

        r104 = new androidx.camera.core.ProcessingImageReader$Builder;

        specialinvoke r104.<androidx.camera.core.ProcessingImageReader$Builder: void <init>(androidx.camera.core.impl.ImageReaderProxy,androidx.camera.core.impl.CaptureBundle,androidx.camera.core.impl.CaptureProcessor)>(r91, r92, r88);

        $r70 = r0.<androidx.camera.core.ImageCapture: java.util.concurrent.ExecutorService mExecutor>;

        r122 = (java.util.concurrent.Executor) $r70;

        $r71 = virtualinvoke r104.<androidx.camera.core.ProcessingImageReader$Builder: androidx.camera.core.ProcessingImageReader$Builder setPostProcessExecutor(java.util.concurrent.Executor)>(r122);

        $r72 = virtualinvoke $r71.<androidx.camera.core.ProcessingImageReader$Builder: androidx.camera.core.ProcessingImageReader$Builder setOutputFormat(int)>(256);

        r5 = virtualinvoke $r72.<androidx.camera.core.ProcessingImageReader$Builder: androidx.camera.core.ProcessingImageReader build()>();

        r6 = staticinvoke <androidx.camera.core.impl.MutableTagBundle: androidx.camera.core.impl.MutableTagBundle create()>();

        $r73 = virtualinvoke r5.<androidx.camera.core.ProcessingImageReader: java.lang.String getTagBundleKey()>();

        $r74 = interfaceinvoke r92.<androidx.camera.core.impl.CaptureBundle: java.util.List getCaptureStages()>();

        $r75 = interfaceinvoke $r74.<java.util.List: java.lang.Object get(int)>(0);

        $r76 = (androidx.camera.core.impl.CaptureStage) $r75;

        $i24 = interfaceinvoke $r76.<androidx.camera.core.impl.CaptureStage: int getId()>();

        $r77 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i24);

        virtualinvoke r6.<androidx.camera.core.impl.MutableTagBundle: void putTag(java.lang.String,java.lang.Object)>($r73, $r77);

        virtualinvoke r91.<androidx.camera.core.ModifiableImageReaderProxy: void setImageTagBundle(androidx.camera.core.impl.TagBundle)>(r6);

        r90 = r5;

        goto label07;

     label05:
        r105 = new java.lang.UnsupportedOperationException;

        specialinvoke r105.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Does not support API level < 26");

        throw r105;

     label06:
        r107 = new java.lang.IllegalArgumentException;

        r106 = new java.lang.StringBuilder;

        specialinvoke r106.<java.lang.StringBuilder: void <init>()>();

        $r62 = virtualinvoke r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported image format:");

        $i19 = virtualinvoke r0.<androidx.camera.core.ImageCapture: int getImageFormat()>();

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i19);

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r107.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r64);

        throw r107;

     label07:
        r108 = new androidx.camera.core.ImageCapture$2;

        specialinvoke r108.<androidx.camera.core.ImageCapture$2: void <init>(androidx.camera.core.ImageCapture)>(r0);

        r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.CameraCaptureCallback mMetadataMatchingCaptureCallback> = r108;

        r109 = new androidx.camera.core.SafeCloseImageReaderProxy;

        specialinvoke r109.<androidx.camera.core.SafeCloseImageReaderProxy: void <init>(androidx.camera.core.impl.ImageReaderProxy)>(r90);

        r0.<androidx.camera.core.ImageCapture: androidx.camera.core.SafeCloseImageReaderProxy mImageReader> = r109;

        goto label15;

     label08:
        $r7 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.CaptureProcessor mCaptureProcessor>;

        if $r7 != null goto label09;

        $z3 = r0.<androidx.camera.core.ImageCapture: boolean mUseSoftwareJpeg>;

        if $z3 == 0 goto label14;

     label09:
        r93 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.CaptureProcessor mCaptureProcessor>;

        i32 = virtualinvoke r0.<androidx.camera.core.ImageCapture: int getImageFormat()>();

        i33 = virtualinvoke r0.<androidx.camera.core.ImageCapture: int getImageFormat()>();

        $z2 = r0.<androidx.camera.core.ImageCapture: boolean mUseSoftwareJpeg>;

        if $z2 == 0 goto label13;

        $i8 = <android.os.Build$VERSION: int SDK_INT>;

        if $i8 < 26 goto label12;

        staticinvoke <androidx.camera.core.Logger: void i(java.lang.String,java.lang.String)>("ImageCapture", "Using software JPEG encoder.");

        $r51 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.CaptureProcessor mCaptureProcessor>;

        if $r51 == null goto label10;

        r110 = new androidx.camera.core.internal.YuvToJpegProcessor;

        $i11 = specialinvoke r0.<androidx.camera.core.ImageCapture: int getJpegQualityInternal()>();

        $i12 = r0.<androidx.camera.core.ImageCapture: int mMaxCaptureStages>;

        specialinvoke r110.<androidx.camera.core.internal.YuvToJpegProcessor: void <init>(int,int)>($i11, $i12);

        r88 = r110;

        r111 = new androidx.camera.core.CaptureProcessorPipeline;

        $r56 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.CaptureProcessor mCaptureProcessor>;

        $i13 = r0.<androidx.camera.core.ImageCapture: int mMaxCaptureStages>;

        $r55 = r0.<androidx.camera.core.ImageCapture: java.util.concurrent.ExecutorService mExecutor>;

        r123 = (java.util.concurrent.Executor) $r55;

        specialinvoke r111.<androidx.camera.core.CaptureProcessorPipeline: void <init>(androidx.camera.core.impl.CaptureProcessor,int,androidx.camera.core.impl.CaptureProcessor,java.util.concurrent.Executor)>($r56, $i13, r88, r123);

        r93 = r111;

        goto label11;

     label10:
        r112 = new androidx.camera.core.internal.YuvToJpegProcessor;

        $i9 = specialinvoke r0.<androidx.camera.core.ImageCapture: int getJpegQualityInternal()>();

        $i10 = r0.<androidx.camera.core.ImageCapture: int mMaxCaptureStages>;

        specialinvoke r112.<androidx.camera.core.internal.YuvToJpegProcessor: void <init>(int,int)>($i9, $i10);

        r88 = r112;

        r93 = r112;

     label11:
        i33 = 256;

        goto label13;

     label12:
        r113 = new java.lang.IllegalStateException;

        specialinvoke r113.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Software JPEG only supported on API 26+");

        throw r113;

     label13:
        r114 = new androidx.camera.core.ProcessingImageReader$Builder;

        $i1 = virtualinvoke r3.<android.util.Size: int getWidth()>();

        $i2 = virtualinvoke r3.<android.util.Size: int getHeight()>();

        $i3 = r0.<androidx.camera.core.ImageCapture: int mMaxCaptureStages>;

        $r9 = staticinvoke <androidx.camera.core.CaptureBundles: androidx.camera.core.impl.CaptureBundle singleDefaultCaptureBundle()>();

        $r10 = specialinvoke r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.CaptureBundle getCaptureBundle(androidx.camera.core.impl.CaptureBundle)>($r9);

        specialinvoke r114.<androidx.camera.core.ProcessingImageReader$Builder: void <init>(int,int,int,int,androidx.camera.core.impl.CaptureBundle,androidx.camera.core.impl.CaptureProcessor)>($i1, $i2, i32, $i3, $r10, r93);

        $r11 = r0.<androidx.camera.core.ImageCapture: java.util.concurrent.ExecutorService mExecutor>;

        r124 = (java.util.concurrent.Executor) $r11;

        $r12 = virtualinvoke r114.<androidx.camera.core.ProcessingImageReader$Builder: androidx.camera.core.ProcessingImageReader$Builder setPostProcessExecutor(java.util.concurrent.Executor)>(r124);

        $r13 = virtualinvoke $r12.<androidx.camera.core.ProcessingImageReader$Builder: androidx.camera.core.ProcessingImageReader$Builder setOutputFormat(int)>(i33);

        $r14 = virtualinvoke $r13.<androidx.camera.core.ProcessingImageReader$Builder: androidx.camera.core.ProcessingImageReader build()>();

        r0.<androidx.camera.core.ImageCapture: androidx.camera.core.ProcessingImageReader mProcessingImageReader> = $r14;

        $r15 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.ProcessingImageReader mProcessingImageReader>;

        $r16 = virtualinvoke $r15.<androidx.camera.core.ProcessingImageReader: androidx.camera.core.impl.CameraCaptureCallback getCameraCaptureCallback()>();

        r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.CameraCaptureCallback mMetadataMatchingCaptureCallback> = $r16;

        r115 = new androidx.camera.core.SafeCloseImageReaderProxy;

        $r18 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.ProcessingImageReader mProcessingImageReader>;

        specialinvoke r115.<androidx.camera.core.SafeCloseImageReaderProxy: void <init>(androidx.camera.core.impl.ImageReaderProxy)>($r18);

        r0.<androidx.camera.core.ImageCapture: androidx.camera.core.SafeCloseImageReaderProxy mImageReader> = r115;

        goto label15;

     label14:
        r116 = new androidx.camera.core.MetadataImageReader;

        $i14 = virtualinvoke r3.<android.util.Size: int getWidth()>();

        $i15 = virtualinvoke r3.<android.util.Size: int getHeight()>();

        $i16 = virtualinvoke r0.<androidx.camera.core.ImageCapture: int getImageFormat()>();

        specialinvoke r116.<androidx.camera.core.MetadataImageReader: void <init>(int,int,int,int)>($i14, $i15, $i16, 2);

        r94 = r116;

        $r58 = virtualinvoke r94.<androidx.camera.core.MetadataImageReader: androidx.camera.core.impl.CameraCaptureCallback getCameraCaptureCallback()>();

        r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.CameraCaptureCallback mMetadataMatchingCaptureCallback> = $r58;

        r117 = new androidx.camera.core.SafeCloseImageReaderProxy;

        specialinvoke r117.<androidx.camera.core.SafeCloseImageReaderProxy: void <init>(androidx.camera.core.impl.ImageReaderProxy)>(r94);

        r0.<androidx.camera.core.ImageCapture: androidx.camera.core.SafeCloseImageReaderProxy mImageReader> = r117;

     label15:
        $r95 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor mImageCaptureRequestProcessor>;

        if $r95 == null goto label16;

        $r49 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor mImageCaptureRequestProcessor>;

        r118 = new java.util.concurrent.CancellationException;

        specialinvoke r118.<java.util.concurrent.CancellationException: void <init>(java.lang.String)>("Request is canceled.");

        virtualinvoke $r49.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: void cancelRequests(java.lang.Throwable)>(r118);

     label16:
        r96 = r88;

        r119 = new androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor;

        $r20 = dynamicinvoke "capture" <androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$ImageCaptor (androidx.camera.core.ImageCapture)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: com.google.common.util.concurrent.ListenableFuture __METHODTYPE__(androidx.camera.core.ImageCapture$ImageCaptureRequest), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.ImageCapture: com.google.common.util.concurrent.ListenableFuture takePictureInternal(androidx.camera.core.ImageCapture$ImageCaptureRequest)>, methodtype: com.google.common.util.concurrent.ListenableFuture __METHODTYPE__(androidx.camera.core.ImageCapture$ImageCaptureRequest));

        if r96 != null goto label17;

        $r97 = null;

        goto label18;

     label17:
        $r97 = dynamicinvoke "onPreProcessRequest" <androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$RequestProcessCallback (androidx.camera.core.internal.YuvToJpegProcessor)>(r96) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(androidx.camera.core.ImageCapture$ImageCaptureRequest), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.core.ImageCapture: void lambda$createPipeline$1(androidx.camera.core.internal.YuvToJpegProcessor,androidx.camera.core.ImageCapture$ImageCaptureRequest)>, methodtype: void __METHODTYPE__(androidx.camera.core.ImageCapture$ImageCaptureRequest));

     label18:
        specialinvoke r119.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: void <init>(int,androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$ImageCaptor,androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$RequestProcessCallback)>(2, $r20, $r97);

        r0.<androidx.camera.core.ImageCapture: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor mImageCaptureRequestProcessor> = r119;

        $r21 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.SafeCloseImageReaderProxy mImageReader>;

        $r22 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.ImageReaderProxy$OnImageAvailableListener mClosingListener>;

        $r23 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.ScheduledExecutorService mainThreadExecutor()>();

        r125 = (java.util.concurrent.Executor) $r23;

        virtualinvoke $r21.<androidx.camera.core.SafeCloseImageReaderProxy: void setOnImageAvailableListener(androidx.camera.core.impl.ImageReaderProxy$OnImageAvailableListener,java.util.concurrent.Executor)>($r22, r125);

        $r24 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.DeferrableSurface mDeferrableSurface>;

        if $r24 == null goto label19;

        $r46 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.DeferrableSurface mDeferrableSurface>;

        virtualinvoke $r46.<androidx.camera.core.impl.DeferrableSurface: void close()>();

     label19:
        r121 = new androidx.camera.core.impl.ImmediateSurface;

        $r26 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.SafeCloseImageReaderProxy mImageReader>;

        $r27 = virtualinvoke $r26.<androidx.camera.core.SafeCloseImageReaderProxy: android.view.Surface getSurface()>();

        $r28 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r27);

        $r31 = (android.view.Surface) $r28;

        r120 = new android.util.Size;

        $r30 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.SafeCloseImageReaderProxy mImageReader>;

        $i5 = virtualinvoke $r30.<androidx.camera.core.SafeCloseImageReaderProxy: int getWidth()>();

        $r32 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.SafeCloseImageReaderProxy mImageReader>;

        $i6 = virtualinvoke $r32.<androidx.camera.core.SafeCloseImageReaderProxy: int getHeight()>();

        specialinvoke r120.<android.util.Size: void <init>(int,int)>($i5, $i6);

        $i7 = virtualinvoke r0.<androidx.camera.core.ImageCapture: int getImageFormat()>();

        specialinvoke r121.<androidx.camera.core.impl.ImmediateSurface: void <init>(android.view.Surface,android.util.Size,int)>($r31, r120, $i7);

        r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.DeferrableSurface mDeferrableSurface> = r121;

        $r33 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.ProcessingImageReader mProcessingImageReader>;

        if $r33 == null goto label20;

        $r44 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.ProcessingImageReader mProcessingImageReader>;

        $r98 = virtualinvoke $r44.<androidx.camera.core.ProcessingImageReader: com.google.common.util.concurrent.ListenableFuture getCloseFuture()>();

        goto label21;

     label20:
        $r98 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFuture(java.lang.Object)>(null);

     label21:
        r0.<androidx.camera.core.ImageCapture: com.google.common.util.concurrent.ListenableFuture mImageReaderCloseFuture> = $r98;

        $r34 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.DeferrableSurface mDeferrableSurface>;

        $r35 = virtualinvoke $r34.<androidx.camera.core.impl.DeferrableSurface: com.google.common.util.concurrent.ListenableFuture getTerminationFuture()>();

        $r36 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.SafeCloseImageReaderProxy mImageReader>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r36);

        $r38 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.core.SafeCloseImageReaderProxy)>($r36) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_VIRTUAL" <androidx.camera.core.SafeCloseImageReaderProxy: void safeClose()>, methodtype: void __METHODTYPE__());

        $r39 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.ScheduledExecutorService mainThreadExecutor()>();

        r126 = (java.util.concurrent.Executor) $r39;

        interfaceinvoke $r35.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r38, r126);

        $r40 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.DeferrableSurface mDeferrableSurface>;

        virtualinvoke r4.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder addNonRepeatingSurface(androidx.camera.core.impl.DeferrableSurface)>($r40);

        $r42 = dynamicinvoke "onError" <androidx.camera.core.impl.SessionConfig$ErrorListener (androidx.camera.core.ImageCapture,java.lang.String,androidx.camera.core.impl.ImageCaptureConfig,android.util.Size)>(r0, r1, r2, r3) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(androidx.camera.core.impl.SessionConfig,androidx.camera.core.impl.SessionConfig$SessionError), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.ImageCapture: void lambda$createPipeline$2(java.lang.String,androidx.camera.core.impl.ImageCaptureConfig,android.util.Size,androidx.camera.core.impl.SessionConfig,androidx.camera.core.impl.SessionConfig$SessionError)>, methodtype: void __METHODTYPE__(androidx.camera.core.impl.SessionConfig,androidx.camera.core.impl.SessionConfig$SessionError));

        virtualinvoke r4.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder addErrorListener(androidx.camera.core.impl.SessionConfig$ErrorListener)>($r42);

        return r4;
    }

    private boolean isSessionProcessorEnabledInCurrentCamera()
    {
        androidx.camera.core.ImageCapture r0;
        androidx.camera.core.impl.CameraConfig r1;
        androidx.camera.core.impl.CameraInternal $r2, $r3;
        androidx.camera.core.impl.SessionProcessor $r4;
        boolean $z0;

        r0 := @this: androidx.camera.core.ImageCapture;

        $r2 = virtualinvoke r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.CameraInternal getCamera()>();

        if $r2 != null goto label1;

        return 0;

     label1:
        $r3 = virtualinvoke r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.CameraInternal getCamera()>();

        r1 = interfaceinvoke $r3.<androidx.camera.core.impl.CameraInternal: androidx.camera.core.impl.CameraConfig getExtendedConfig()>();

        $r4 = interfaceinvoke r1.<androidx.camera.core.impl.CameraConfig: androidx.camera.core.impl.SessionProcessor getSessionProcessor(androidx.camera.core.impl.SessionProcessor)>(null);

        if $r4 == null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    void clearPipeline()
    {
        androidx.camera.core.ImageCapture r0;
        androidx.camera.core.impl.DeferrableSurface r1;
        boolean $z0;
        androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor $r2, $r5;
        com.google.common.util.concurrent.ListenableFuture $r3;
        java.util.concurrent.CancellationException $r4;

        r0 := @this: androidx.camera.core.ImageCapture;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $z0 = specialinvoke r0.<androidx.camera.core.ImageCapture: boolean isNodeEnabled()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<androidx.camera.core.ImageCapture: void clearPipelineWithNode()>();

        return;

     label1:
        $r2 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor mImageCaptureRequestProcessor>;

        if $r2 == null goto label2;

        $r5 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor mImageCaptureRequestProcessor>;

        $r4 = new java.util.concurrent.CancellationException;

        specialinvoke $r4.<java.util.concurrent.CancellationException: void <init>(java.lang.String)>("Request is canceled.");

        virtualinvoke $r5.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: void cancelRequests(java.lang.Throwable)>($r4);

        r0.<androidx.camera.core.ImageCapture: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor mImageCaptureRequestProcessor> = null;

     label2:
        r1 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.DeferrableSurface mDeferrableSurface>;

        r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.DeferrableSurface mDeferrableSurface> = null;

        r0.<androidx.camera.core.ImageCapture: androidx.camera.core.SafeCloseImageReaderProxy mImageReader> = null;

        r0.<androidx.camera.core.ImageCapture: androidx.camera.core.ProcessingImageReader mProcessingImageReader> = null;

        $r3 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFuture(java.lang.Object)>(null);

        r0.<androidx.camera.core.ImageCapture: com.google.common.util.concurrent.ListenableFuture mImageReaderCloseFuture> = $r3;

        if r1 == null goto label3;

        virtualinvoke r1.<androidx.camera.core.impl.DeferrableSurface: void close()>();

     label3:
        return;
    }

    public androidx.camera.core.impl.UseCaseConfig getDefaultConfig(boolean, androidx.camera.core.impl.UseCaseConfigFactory)
    {
        androidx.camera.core.ImageCapture r0;
        boolean z0;
        androidx.camera.core.impl.UseCaseConfigFactory r1;
        androidx.camera.core.impl.UseCaseConfigFactory$CaptureType $r2;
        int $i0;
        androidx.camera.core.impl.UseCaseConfig$Builder $r3;
        androidx.camera.core.ImageCapture$Defaults $r4;
        androidx.camera.core.impl.ImageCaptureConfig $r5;
        androidx.camera.core.impl.Config r6;
        androidx.camera.core.impl.UseCaseConfig $r7;

        r0 := @this: androidx.camera.core.ImageCapture;

        z0 := @parameter0: boolean;

        r1 := @parameter1: androidx.camera.core.impl.UseCaseConfigFactory;

        $r2 = <androidx.camera.core.impl.UseCaseConfigFactory$CaptureType: androidx.camera.core.impl.UseCaseConfigFactory$CaptureType IMAGE_CAPTURE>;

        $i0 = virtualinvoke r0.<androidx.camera.core.ImageCapture: int getCaptureMode()>();

        r6 = interfaceinvoke r1.<androidx.camera.core.impl.UseCaseConfigFactory: androidx.camera.core.impl.Config getConfig(androidx.camera.core.impl.UseCaseConfigFactory$CaptureType,int)>($r2, $i0);

        if z0 == 0 goto label1;

        $r4 = <androidx.camera.core.ImageCapture: androidx.camera.core.ImageCapture$Defaults DEFAULT_CONFIG>;

        $r5 = virtualinvoke $r4.<androidx.camera.core.ImageCapture$Defaults: androidx.camera.core.impl.ImageCaptureConfig getConfig()>();

        r6 = staticinvoke <androidx.camera.core.impl.Config: androidx.camera.core.impl.Config mergeConfigs(androidx.camera.core.impl.Config,androidx.camera.core.impl.Config)>(r6, $r5);

     label1:
        if r6 != null goto label2;

        $r7 = null;

        goto label3;

     label2:
        $r3 = virtualinvoke r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.UseCaseConfig$Builder getUseCaseConfigBuilder(androidx.camera.core.impl.Config)>(r6);

        $r7 = interfaceinvoke $r3.<androidx.camera.core.impl.UseCaseConfig$Builder: androidx.camera.core.impl.UseCaseConfig getUseCaseConfig()>();

     label3:
        return $r7;
    }

    public androidx.camera.core.impl.UseCaseConfig$Builder getUseCaseConfigBuilder(androidx.camera.core.impl.Config)
    {
        androidx.camera.core.ImageCapture r0;
        androidx.camera.core.impl.Config r1;
        androidx.camera.core.ImageCapture$Builder $r2;

        r0 := @this: androidx.camera.core.ImageCapture;

        r1 := @parameter0: androidx.camera.core.impl.Config;

        $r2 = staticinvoke <androidx.camera.core.ImageCapture$Builder: androidx.camera.core.ImageCapture$Builder fromConfig(androidx.camera.core.impl.Config)>(r1);

        return $r2;
    }

    protected androidx.camera.core.impl.UseCaseConfig onMergeConfig(androidx.camera.core.impl.CameraInfoInternal, androidx.camera.core.impl.UseCaseConfig$Builder)
    {
        androidx.camera.core.ImageCapture r0;
        androidx.camera.core.impl.CameraInfoInternal r1;
        androidx.camera.core.impl.UseCaseConfig$Builder r2;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.Integer r3, $r13, $r21, $r24, $r27, $r33, $r52, r54;
        androidx.camera.core.impl.UseCaseConfig $r4, $r15;
        androidx.camera.core.impl.Config$Option $r5, $r9, $r12, $r17, $r20, $r23, $r26, $r29, $r32, $r36, $r40, $r43, $r47, $r51;
        java.lang.Object $r6, $r10, $r18, $r30, $r38, $r48, $r53;
        androidx.camera.core.impl.Quirks $r7;
        androidx.camera.core.impl.MutableConfig $r8, $r11, $r16, $r19, $r22, $r25, $r28, $r31, $r35, $r39, $r42, $r45, $r46, $r50;
        java.lang.Boolean $r34, $r37, $r41, $r44;
        int $i0, $i1, $i2;
        java.util.List r49;

        r0 := @this: androidx.camera.core.ImageCapture;

        r1 := @parameter0: androidx.camera.core.impl.CameraInfoInternal;

        r2 := @parameter1: androidx.camera.core.impl.UseCaseConfig$Builder;

        $r4 = interfaceinvoke r2.<androidx.camera.core.impl.UseCaseConfig$Builder: androidx.camera.core.impl.UseCaseConfig getUseCaseConfig()>();

        $r5 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_CAPTURE_PROCESSOR>;

        $r6 = interfaceinvoke $r4.<androidx.camera.core.impl.UseCaseConfig: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r5, null);

        if $r6 == null goto label01;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 29 goto label01;

        staticinvoke <androidx.camera.core.Logger: void i(java.lang.String,java.lang.String)>("ImageCapture", "Requesting software JPEG due to a CaptureProcessor is set.");

        $r42 = interfaceinvoke r2.<androidx.camera.core.impl.UseCaseConfig$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r43 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_USE_SOFTWARE_JPEG_ENCODER>;

        $r44 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r42.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r43, $r44);

        goto label03;

     label01:
        $r7 = interfaceinvoke r1.<androidx.camera.core.impl.CameraInfoInternal: androidx.camera.core.impl.Quirks getCameraQuirks()>();

        $z1 = virtualinvoke $r7.<androidx.camera.core.impl.Quirks: boolean contains(java.lang.Class)>(class "Landroidx/camera/core/internal/compat/quirk/SoftwareJpegEncodingPreferredQuirk;");

        if $z1 == 0 goto label03;

        $r34 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $r35 = interfaceinvoke r2.<androidx.camera.core.impl.UseCaseConfig$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r36 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_USE_SOFTWARE_JPEG_ENCODER>;

        $r37 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r38 = interfaceinvoke $r35.<androidx.camera.core.impl.MutableConfig: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r36, $r37);

        $z4 = virtualinvoke $r34.<java.lang.Boolean: boolean equals(java.lang.Object)>($r38);

        if $z4 == 0 goto label02;

        staticinvoke <androidx.camera.core.Logger: void w(java.lang.String,java.lang.String)>("ImageCapture", "Device quirk suggests software JPEG encoder, but it has been explicitly disabled.");

        goto label03;

     label02:
        staticinvoke <androidx.camera.core.Logger: void i(java.lang.String,java.lang.String)>("ImageCapture", "Requesting software JPEG due to device quirk.");

        $r39 = interfaceinvoke r2.<androidx.camera.core.impl.UseCaseConfig$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r40 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_USE_SOFTWARE_JPEG_ENCODER>;

        $r41 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r39.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r40, $r41);

     label03:
        $r45 = interfaceinvoke r2.<androidx.camera.core.impl.UseCaseConfig$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        z0 = staticinvoke <androidx.camera.core.ImageCapture: boolean enforceSoftwareJpegConstraints(androidx.camera.core.impl.MutableConfig)>($r45);

        $r46 = interfaceinvoke r2.<androidx.camera.core.impl.UseCaseConfig$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r47 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_BUFFER_FORMAT>;

        $r48 = interfaceinvoke $r46.<androidx.camera.core.impl.MutableConfig: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r47, null);

        r3 = (java.lang.Integer) $r48;

        if r3 == null goto label08;

        $r28 = interfaceinvoke r2.<androidx.camera.core.impl.UseCaseConfig$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r29 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_CAPTURE_PROCESSOR>;

        $r30 = interfaceinvoke $r28.<androidx.camera.core.impl.MutableConfig: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r29, null);

        if $r30 != null goto label04;

        $z5 = 1;

        goto label05;

     label04:
        $z5 = 0;

     label05:
        staticinvoke <androidx.core.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z5, "Cannot set buffer format with CaptureProcessor defined.");

        $r31 = interfaceinvoke r2.<androidx.camera.core.impl.UseCaseConfig$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r32 = <androidx.camera.core.impl.ImageInputConfig: androidx.camera.core.impl.Config$Option OPTION_INPUT_FORMAT>;

        if z0 == 0 goto label06;

        $i1 = 35;

        goto label07;

     label06:
        $i1 = virtualinvoke r3.<java.lang.Integer: int intValue()>();

     label07:
        $r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        interfaceinvoke $r31.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r32, $r33);

        goto label13;

     label08:
        $r8 = interfaceinvoke r2.<androidx.camera.core.impl.UseCaseConfig$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r9 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_CAPTURE_PROCESSOR>;

        $r10 = interfaceinvoke $r8.<androidx.camera.core.impl.MutableConfig: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r9, null);

        if $r10 != null goto label09;

        if z0 == 0 goto label10;

     label09:
        $r11 = interfaceinvoke r2.<androidx.camera.core.impl.UseCaseConfig$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r12 = <androidx.camera.core.impl.ImageInputConfig: androidx.camera.core.impl.Config$Option OPTION_INPUT_FORMAT>;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(35);

        interfaceinvoke $r11.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r12, $r13);

        goto label13;

     label10:
        $r16 = interfaceinvoke r2.<androidx.camera.core.impl.UseCaseConfig$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r17 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_SUPPORTED_RESOLUTIONS>;

        $r18 = interfaceinvoke $r16.<androidx.camera.core.impl.MutableConfig: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r17, null);

        r49 = (java.util.List) $r18;

        if r49 != null goto label11;

        $r25 = interfaceinvoke r2.<androidx.camera.core.impl.UseCaseConfig$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r26 = <androidx.camera.core.impl.ImageInputConfig: androidx.camera.core.impl.Config$Option OPTION_INPUT_FORMAT>;

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(256);

        interfaceinvoke $r25.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r26, $r27);

        goto label13;

     label11:
        $z2 = staticinvoke <androidx.camera.core.ImageCapture: boolean isImageFormatSupported(java.util.List,int)>(r49, 256);

        if $z2 == 0 goto label12;

        $r22 = interfaceinvoke r2.<androidx.camera.core.impl.UseCaseConfig$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r23 = <androidx.camera.core.impl.ImageInputConfig: androidx.camera.core.impl.Config$Option OPTION_INPUT_FORMAT>;

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(256);

        interfaceinvoke $r22.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r23, $r24);

        goto label13;

     label12:
        $z3 = staticinvoke <androidx.camera.core.ImageCapture: boolean isImageFormatSupported(java.util.List,int)>(r49, 35);

        if $z3 == 0 goto label13;

        $r19 = interfaceinvoke r2.<androidx.camera.core.impl.UseCaseConfig$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r20 = <androidx.camera.core.impl.ImageInputConfig: androidx.camera.core.impl.Config$Option OPTION_INPUT_FORMAT>;

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(35);

        interfaceinvoke $r19.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r20, $r21);

     label13:
        $r50 = interfaceinvoke r2.<androidx.camera.core.impl.UseCaseConfig$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r51 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_MAX_CAPTURE_STAGES>;

        $r52 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r53 = interfaceinvoke $r50.<androidx.camera.core.impl.MutableConfig: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r51, $r52);

        r54 = (java.lang.Integer) $r53;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r54, "Maximum outstanding image count must be at least 1");

        $i2 = virtualinvoke r54.<java.lang.Integer: int intValue()>();

        if $i2 < 1 goto label14;

        $z6 = 1;

        goto label15;

     label14:
        $z6 = 0;

     label15:
        staticinvoke <androidx.core.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z6, "Maximum outstanding image count must be at least 1");

        $r15 = interfaceinvoke r2.<androidx.camera.core.impl.UseCaseConfig$Builder: androidx.camera.core.impl.UseCaseConfig getUseCaseConfig()>();

        return $r15;
    }

    private static boolean isImageFormatSupported(java.util.List, int)
    {
        java.util.List r0;
        int i0;
        java.util.Iterator r1;
        android.util.Pair r2;
        boolean $z0, $z1;
        java.lang.Object $r3, $r4;
        java.lang.Integer $r5, $r6;

        r0 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        return 0;

     label1:
        r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.util.Pair) $r3;

        $r4 = r2.<android.util.Pair: java.lang.Object first>;

        $r5 = (java.lang.Integer) $r4;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z1 = virtualinvoke $r5.<java.lang.Integer: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        goto label2;

     label4:
        return 0;
    }

    protected void onCameraControlReady()
    {
        androidx.camera.core.ImageCapture r0;

        r0 := @this: androidx.camera.core.ImageCapture;

        specialinvoke r0.<androidx.camera.core.ImageCapture: void trySetFlashModeToCameraControl()>();

        return;
    }

    public int getFlashMode()
    {
        androidx.camera.core.ImageCapture r0;
        java.util.concurrent.atomic.AtomicReference r1, $r3;
        java.lang.Throwable r2, $r6;
        int $i0, $i1;
        androidx.camera.core.impl.UseCaseConfig $r4;
        androidx.camera.core.impl.ImageCaptureConfig $r5;

        r0 := @this: androidx.camera.core.ImageCapture;

        $r3 = r0.<androidx.camera.core.ImageCapture: java.util.concurrent.atomic.AtomicReference mLockedFlashMode>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $i0 = r0.<androidx.camera.core.ImageCapture: int mFlashMode>;

        if $i0 == -1 goto label2;

        $i1 = r0.<androidx.camera.core.ImageCapture: int mFlashMode>;

        goto label3;

     label2:
        $r4 = virtualinvoke r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.UseCaseConfig getCurrentConfig()>();

        $r5 = (androidx.camera.core.impl.ImageCaptureConfig) $r4;

        $i1 = virtualinvoke $r5.<androidx.camera.core.impl.ImageCaptureConfig: int getFlashMode(int)>(2);

     label3:
        exitmonitor r1;

     label4:
        return $i1;

     label5:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void setFlashMode(int)
    {
        androidx.camera.core.ImageCapture r0;
        int i0;
        java.util.concurrent.atomic.AtomicReference r1, $r9;
        java.lang.Throwable r2, $r8;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: androidx.camera.core.ImageCapture;

        i0 := @parameter0: int;

        if i0 == 0 goto label1;

        if i0 == 1 goto label1;

        if i0 == 2 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid flash mode: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label1:
        $r9 = r0.<androidx.camera.core.ImageCapture: java.util.concurrent.atomic.AtomicReference mLockedFlashMode>;

        r1 = $r9;

        entermonitor $r9;

     label2:
        r0.<androidx.camera.core.ImageCapture: int mFlashMode> = i0;

        specialinvoke r0.<androidx.camera.core.ImageCapture: void trySetFlashModeToCameraControl()>();

        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void setCropAspectRatio(android.util.Rational)
    {
        androidx.camera.core.ImageCapture r0;
        android.util.Rational r1;

        r0 := @this: androidx.camera.core.ImageCapture;

        r1 := @parameter0: android.util.Rational;

        r0.<androidx.camera.core.ImageCapture: android.util.Rational mCropAspectRatio> = r1;

        return;
    }

    public int getTargetRotation()
    {
        androidx.camera.core.ImageCapture r0;
        int $i0;

        r0 := @this: androidx.camera.core.ImageCapture;

        $i0 = virtualinvoke r0.<androidx.camera.core.ImageCapture: int getTargetRotationInternal()>();

        return $i0;
    }

    public void setTargetRotation(int)
    {
        androidx.camera.core.ImageCapture r0;
        int i0, i1, i2, i3, $i4, $i5;
        boolean $z0;
        android.util.Rational $r1, $r2, $r3;

        r0 := @this: androidx.camera.core.ImageCapture;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<androidx.camera.core.ImageCapture: int getTargetRotation()>();

        $z0 = virtualinvoke r0.<androidx.camera.core.ImageCapture: boolean setTargetRotationInternal(int)>(i0);

        if $z0 == 0 goto label1;

        $r1 = r0.<androidx.camera.core.ImageCapture: android.util.Rational mCropAspectRatio>;

        if $r1 == null goto label1;

        i2 = staticinvoke <androidx.camera.core.impl.utils.CameraOrientationUtil: int surfaceRotationToDegrees(int)>(i1);

        i3 = staticinvoke <androidx.camera.core.impl.utils.CameraOrientationUtil: int surfaceRotationToDegrees(int)>(i0);

        $i4 = i3 - i2;

        $i5 = staticinvoke <java.lang.Math: int abs(int)>($i4);

        $r2 = r0.<androidx.camera.core.ImageCapture: android.util.Rational mCropAspectRatio>;

        $r3 = staticinvoke <androidx.camera.core.internal.utils.ImageUtil: android.util.Rational getRotatedAspectRatio(int,android.util.Rational)>($i5, $r2);

        r0.<androidx.camera.core.ImageCapture: android.util.Rational mCropAspectRatio> = $r3;

     label1:
        return;
    }

    public int getCaptureMode()
    {
        androidx.camera.core.ImageCapture r0;
        int $i0;

        r0 := @this: androidx.camera.core.ImageCapture;

        $i0 = r0.<androidx.camera.core.ImageCapture: int mCaptureMode>;

        return $i0;
    }

    public int getJpegQuality()
    {
        androidx.camera.core.ImageCapture r0;
        int $i0;

        r0 := @this: androidx.camera.core.ImageCapture;

        $i0 = specialinvoke r0.<androidx.camera.core.ImageCapture: int getJpegQualityInternal()>();

        return $i0;
    }

    public androidx.camera.core.ResolutionInfo getResolutionInfo()
    {
        androidx.camera.core.ImageCapture r0;
        androidx.camera.core.ResolutionInfo $r1;

        r0 := @this: androidx.camera.core.ImageCapture;

        $r1 = specialinvoke r0.<androidx.camera.core.UseCase: androidx.camera.core.ResolutionInfo getResolutionInfo()>();

        return $r1;
    }

    protected androidx.camera.core.ResolutionInfo getResolutionInfoInternal()
    {
        androidx.camera.core.ImageCapture r0;
        androidx.camera.core.impl.CameraInternal r1;
        android.util.Size r2;
        android.util.Rational r3;
        int i0, $i1, $i2;
        android.graphics.Rect $r4, r5, $r7;
        java.lang.Object $r6;
        androidx.camera.core.ResolutionInfo $r8;

        r0 := @this: androidx.camera.core.ImageCapture;

        r1 = virtualinvoke r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.CameraInternal getCamera()>();

        r2 = virtualinvoke r0.<androidx.camera.core.ImageCapture: android.util.Size getAttachedSurfaceResolution()>();

        if r1 == null goto label1;

        if r2 != null goto label2;

     label1:
        return null;

     label2:
        r5 = virtualinvoke r0.<androidx.camera.core.ImageCapture: android.graphics.Rect getViewPortCropRect()>();

        r3 = r0.<androidx.camera.core.ImageCapture: android.util.Rational mCropAspectRatio>;

        if r5 != null goto label4;

        if r3 == null goto label3;

        r5 = staticinvoke <androidx.camera.core.internal.utils.ImageUtil: android.graphics.Rect computeCropRectFromAspectRatio(android.util.Size,android.util.Rational)>(r2, r3);

        goto label4;

     label3:
        $r4 = new android.graphics.Rect;

        $i1 = virtualinvoke r2.<android.util.Size: int getWidth()>();

        $i2 = virtualinvoke r2.<android.util.Size: int getHeight()>();

        specialinvoke $r4.<android.graphics.Rect: void <init>(int,int,int,int)>(0, 0, $i1, $i2);

        r5 = $r4;

     label4:
        i0 = virtualinvoke r0.<androidx.camera.core.ImageCapture: int getRelativeRotation(androidx.camera.core.impl.CameraInternal)>(r1);

        $r6 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r5);

        $r7 = (android.graphics.Rect) $r6;

        $r8 = staticinvoke <androidx.camera.core.ResolutionInfo: androidx.camera.core.ResolutionInfo create(android.util.Size,android.graphics.Rect,int)>(r2, $r7, i0);

        return $r8;
    }

    public void takePicture(java.util.concurrent.Executor, androidx.camera.core.ImageCapture$OnImageCapturedCallback)
    {
        androidx.camera.core.ImageCapture r0;
        java.util.concurrent.Executor r1;
        androidx.camera.core.ImageCapture$OnImageCapturedCallback r2;
        android.os.Looper $r3, $r4;
        boolean $z0;
        java.util.concurrent.ScheduledExecutorService $r5;
        java.lang.Runnable $r6;

        r0 := @this: androidx.camera.core.ImageCapture;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: androidx.camera.core.ImageCapture$OnImageCapturedCallback;

        $r3 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        $r4 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if $r3 == $r4 goto label1;

        $r5 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.ScheduledExecutorService mainThreadExecutor()>();

        $r6 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.core.ImageCapture,java.util.concurrent.Executor,androidx.camera.core.ImageCapture$OnImageCapturedCallback)>(r0, r1, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.ImageCapture: void lambda$takePicture$3(java.util.concurrent.Executor,androidx.camera.core.ImageCapture$OnImageCapturedCallback)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r5.<java.util.concurrent.ScheduledExecutorService: void execute(java.lang.Runnable)>($r6);

        return;

     label1:
        $z0 = specialinvoke r0.<androidx.camera.core.ImageCapture: boolean isNodeEnabled()>();

        if $z0 == 0 goto label2;

        specialinvoke r0.<androidx.camera.core.ImageCapture: void takePictureWithNode(java.util.concurrent.Executor,androidx.camera.core.ImageCapture$OnImageCapturedCallback,androidx.camera.core.ImageCapture$OnImageSavedCallback,androidx.camera.core.ImageCapture$OutputFileOptions)>(r1, r2, null, null);

        return;

     label2:
        specialinvoke r0.<androidx.camera.core.ImageCapture: void sendImageCaptureRequest(java.util.concurrent.Executor,androidx.camera.core.ImageCapture$OnImageCapturedCallback,boolean)>(r1, r2, 0);

        return;
    }

    public void takePicture(androidx.camera.core.ImageCapture$OutputFileOptions, java.util.concurrent.Executor, androidx.camera.core.ImageCapture$OnImageSavedCallback)
    {
        androidx.camera.core.ImageCapture r0;
        androidx.camera.core.ImageCapture$OutputFileOptions r1;
        java.util.concurrent.Executor r2, r15;
        androidx.camera.core.ImageCapture$OnImageSavedCallback r3;
        androidx.camera.core.ImageCapture$3 r4, r13;
        int i0;
        androidx.camera.core.ImageCapture$4 r5, r14;
        android.os.Looper $r6, $r7;
        boolean $z0;
        java.util.concurrent.ScheduledExecutorService $r10, $r11;
        java.lang.Runnable $r12;

        r0 := @this: androidx.camera.core.ImageCapture;

        r1 := @parameter0: androidx.camera.core.ImageCapture$OutputFileOptions;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: androidx.camera.core.ImageCapture$OnImageSavedCallback;

        $r6 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        $r7 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if $r6 == $r7 goto label1;

        $r11 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.ScheduledExecutorService mainThreadExecutor()>();

        $r12 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.core.ImageCapture,androidx.camera.core.ImageCapture$OutputFileOptions,java.util.concurrent.Executor,androidx.camera.core.ImageCapture$OnImageSavedCallback)>(r0, r1, r2, r3) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.ImageCapture: void lambda$takePicture$4(androidx.camera.core.ImageCapture$OutputFileOptions,java.util.concurrent.Executor,androidx.camera.core.ImageCapture$OnImageSavedCallback)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r11.<java.util.concurrent.ScheduledExecutorService: void execute(java.lang.Runnable)>($r12);

        return;

     label1:
        $z0 = specialinvoke r0.<androidx.camera.core.ImageCapture: boolean isNodeEnabled()>();

        if $z0 == 0 goto label2;

        specialinvoke r0.<androidx.camera.core.ImageCapture: void takePictureWithNode(java.util.concurrent.Executor,androidx.camera.core.ImageCapture$OnImageCapturedCallback,androidx.camera.core.ImageCapture$OnImageSavedCallback,androidx.camera.core.ImageCapture$OutputFileOptions)>(r2, null, r3, r1);

        return;

     label2:
        r13 = new androidx.camera.core.ImageCapture$3;

        specialinvoke r13.<androidx.camera.core.ImageCapture$3: void <init>(androidx.camera.core.ImageCapture,androidx.camera.core.ImageCapture$OnImageSavedCallback)>(r0, r3);

        r4 = r13;

        i0 = specialinvoke r0.<androidx.camera.core.ImageCapture: int getJpegQualityInternal()>();

        r14 = new androidx.camera.core.ImageCapture$4;

        specialinvoke r14.<androidx.camera.core.ImageCapture$4: void <init>(androidx.camera.core.ImageCapture,androidx.camera.core.ImageCapture$OutputFileOptions,int,java.util.concurrent.Executor,androidx.camera.core.ImageSaver$OnImageSavedCallback,androidx.camera.core.ImageCapture$OnImageSavedCallback)>(r0, r1, i0, r2, r4, r3);

        r5 = r14;

        $r10 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.ScheduledExecutorService mainThreadExecutor()>();

        r15 = (java.util.concurrent.Executor) $r10;

        specialinvoke r0.<androidx.camera.core.ImageCapture: void sendImageCaptureRequest(java.util.concurrent.Executor,androidx.camera.core.ImageCapture$OnImageCapturedCallback,boolean)>(r15, r5, 1);

        return;
    }

    static android.graphics.Rect computeDispatchCropRect(android.graphics.Rect, android.util.Rational, int, android.util.Size, int)
    {
        android.graphics.Rect r0, $r3, $r4, $r6, $r8;
        android.util.Rational r1, $r7, r9;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        android.util.Size r2;
        boolean $z0;
        java.lang.Object $r5;

        r0 := @parameter0: android.graphics.Rect;

        r1 := @parameter1: android.util.Rational;

        i0 := @parameter2: int;

        r2 := @parameter3: android.util.Size;

        i1 := @parameter4: int;

        if r0 == null goto label1;

        $r8 = staticinvoke <androidx.camera.core.internal.utils.ImageUtil: android.graphics.Rect computeCropRectFromDispatchInfo(android.graphics.Rect,int,android.util.Size,int)>(r0, i0, r2, i1);

        return $r8;

     label1:
        if r1 == null goto label3;

        r9 = r1;

        $i4 = i1 % 180;

        if $i4 == 0 goto label2;

        $r7 = new android.util.Rational;

        $i5 = virtualinvoke r1.<android.util.Rational: int getDenominator()>();

        $i6 = virtualinvoke r1.<android.util.Rational: int getNumerator()>();

        specialinvoke $r7.<android.util.Rational: void <init>(int,int)>($i5, $i6);

        r9 = $r7;

     label2:
        $z0 = staticinvoke <androidx.camera.core.internal.utils.ImageUtil: boolean isAspectRatioValid(android.util.Size,android.util.Rational)>(r2, r9);

        if $z0 == 0 goto label3;

        $r4 = staticinvoke <androidx.camera.core.internal.utils.ImageUtil: android.graphics.Rect computeCropRectFromAspectRatio(android.util.Size,android.util.Rational)>(r2, r9);

        $r5 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r4);

        $r6 = (android.graphics.Rect) $r5;

        return $r6;

     label3:
        $r3 = new android.graphics.Rect;

        $i2 = virtualinvoke r2.<android.util.Size: int getWidth()>();

        $i3 = virtualinvoke r2.<android.util.Size: int getHeight()>();

        specialinvoke $r3.<android.graphics.Rect: void <init>(int,int,int,int)>(0, 0, $i2, $i3);

        return $r3;
    }

    public void onStateDetached()
    {
        androidx.camera.core.ImageCapture r0;

        r0 := @this: androidx.camera.core.ImageCapture;

        specialinvoke r0.<androidx.camera.core.ImageCapture: void abortImageCaptureRequests()>();

        return;
    }

    private void abortImageCaptureRequests()
    {
        androidx.camera.core.ImageCapture r0;
        androidx.camera.core.CameraClosedException r1, r5;
        androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor $r2, $r4;
        java.lang.Throwable r6;

        r0 := @this: androidx.camera.core.ImageCapture;

        $r2 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor mImageCaptureRequestProcessor>;

        if $r2 == null goto label1;

        r5 = new androidx.camera.core.CameraClosedException;

        specialinvoke r5.<androidx.camera.core.CameraClosedException: void <init>(java.lang.String)>("Camera is closed.");

        r1 = r5;

        $r4 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor mImageCaptureRequestProcessor>;

        r6 = (java.lang.Throwable) r1;

        virtualinvoke $r4.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: void cancelRequests(java.lang.Throwable)>(r6);

     label1:
        return;
    }

    private void sendImageCaptureRequest(java.util.concurrent.Executor, androidx.camera.core.ImageCapture$OnImageCapturedCallback, boolean)
    {
        androidx.camera.core.ImageCapture r0;
        java.util.concurrent.Executor r1;
        androidx.camera.core.ImageCapture$OnImageCapturedCallback r2;
        boolean z0;
        androidx.camera.core.impl.CameraInternal r3;
        androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor $r4, $r6;
        androidx.camera.core.ImageCapture$ImageCaptureRequest $r5;
        int $i0, $i1;
        android.util.Rational $r7;
        android.graphics.Rect $r8;
        android.graphics.Matrix $r9;
        java.lang.Runnable $r10, $r11;

        r0 := @this: androidx.camera.core.ImageCapture;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: androidx.camera.core.ImageCapture$OnImageCapturedCallback;

        z0 := @parameter2: boolean;

        r3 = virtualinvoke r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.CameraInternal getCamera()>();

        if r3 != null goto label1;

        $r11 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.core.ImageCapture,androidx.camera.core.ImageCapture$OnImageCapturedCallback)>(r0, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.ImageCapture: void lambda$sendImageCaptureRequest$5(androidx.camera.core.ImageCapture$OnImageCapturedCallback)>, methodtype: void __METHODTYPE__());

        interfaceinvoke r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r11);

        return;

     label1:
        $r4 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor mImageCaptureRequestProcessor>;

        if $r4 != null goto label2;

        $r10 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.core.ImageCapture$OnImageCapturedCallback)>(r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.core.ImageCapture: void lambda$sendImageCaptureRequest$6(androidx.camera.core.ImageCapture$OnImageCapturedCallback)>, methodtype: void __METHODTYPE__());

        interfaceinvoke r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r10);

        return;

     label2:
        $r6 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor mImageCaptureRequestProcessor>;

        $r5 = new androidx.camera.core.ImageCapture$ImageCaptureRequest;

        $i0 = virtualinvoke r0.<androidx.camera.core.ImageCapture: int getRelativeRotation(androidx.camera.core.impl.CameraInternal)>(r3);

        $i1 = specialinvoke r0.<androidx.camera.core.ImageCapture: int getJpegQualityForImageCaptureRequest(androidx.camera.core.impl.CameraInternal,boolean)>(r3, z0);

        $r7 = r0.<androidx.camera.core.ImageCapture: android.util.Rational mCropAspectRatio>;

        $r8 = virtualinvoke r0.<androidx.camera.core.ImageCapture: android.graphics.Rect getViewPortCropRect()>();

        $r9 = virtualinvoke r0.<androidx.camera.core.ImageCapture: android.graphics.Matrix getSensorToBufferTransformMatrix()>();

        specialinvoke $r5.<androidx.camera.core.ImageCapture$ImageCaptureRequest: void <init>(int,int,android.util.Rational,android.graphics.Rect,android.graphics.Matrix,java.util.concurrent.Executor,androidx.camera.core.ImageCapture$OnImageCapturedCallback)>($i0, $i1, $r7, $r8, $r9, r1, r2);

        virtualinvoke $r6.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: void sendRequest(androidx.camera.core.ImageCapture$ImageCaptureRequest)>($r5);

        return;
    }

    private int getJpegQualityForImageCaptureRequest(androidx.camera.core.impl.CameraInternal, boolean)
    {
        androidx.camera.core.ImageCapture r0;
        androidx.camera.core.impl.CameraInternal r1;
        boolean z0, z1;
        int i0, $i1, $i2, $i3, $i4, $i5, i7;
        android.util.Size r2, $r4;
        android.graphics.Rect r3, $r6;
        java.lang.Object $r5;
        android.util.Rational $r7;
        byte $b6;

        r0 := @this: androidx.camera.core.ImageCapture;

        r1 := @parameter0: androidx.camera.core.impl.CameraInternal;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label5;

        i0 = virtualinvoke r0.<androidx.camera.core.ImageCapture: int getRelativeRotation(androidx.camera.core.impl.CameraInternal)>(r1);

        $r4 = virtualinvoke r0.<androidx.camera.core.ImageCapture: android.util.Size getAttachedSurfaceResolution()>();

        $r5 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r4);

        r2 = (android.util.Size) $r5;

        $r6 = virtualinvoke r0.<androidx.camera.core.ImageCapture: android.graphics.Rect getViewPortCropRect()>();

        $r7 = r0.<androidx.camera.core.ImageCapture: android.util.Rational mCropAspectRatio>;

        r3 = staticinvoke <androidx.camera.core.ImageCapture: android.graphics.Rect computeDispatchCropRect(android.graphics.Rect,android.util.Rational,int,android.util.Size,int)>($r6, $r7, i0, r2, i0);

        $i1 = virtualinvoke r2.<android.util.Size: int getWidth()>();

        $i2 = virtualinvoke r2.<android.util.Size: int getHeight()>();

        $i3 = virtualinvoke r3.<android.graphics.Rect: int width()>();

        $i4 = virtualinvoke r3.<android.graphics.Rect: int height()>();

        z1 = staticinvoke <androidx.camera.core.internal.utils.ImageUtil: boolean shouldCropImage(int,int,int,int)>($i1, $i2, $i3, $i4);

        if z1 == 0 goto label3;

        $i5 = r0.<androidx.camera.core.ImageCapture: int mCaptureMode>;

        if $i5 != 0 goto label1;

        $b6 = 100;

        goto label2;

     label1:
        $b6 = 95;

     label2:
        i7 = $b6;

        goto label4;

     label3:
        i7 = specialinvoke r0.<androidx.camera.core.ImageCapture: int getJpegQualityInternal()>();

     label4:
        goto label6;

     label5:
        i7 = specialinvoke r0.<androidx.camera.core.ImageCapture: int getJpegQualityInternal()>();

     label6:
        return i7;
    }

    void lockFlashMode()
    {
        androidx.camera.core.ImageCapture r0;
        java.util.concurrent.atomic.AtomicReference r1, $r3, $r4, $r6;
        java.lang.Throwable r2, $r8;
        java.lang.Object $r5;
        int $i0;
        java.lang.Integer $r7;

        r0 := @this: androidx.camera.core.ImageCapture;

        $r3 = r0.<androidx.camera.core.ImageCapture: java.util.concurrent.atomic.AtomicReference mLockedFlashMode>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<androidx.camera.core.ImageCapture: java.util.concurrent.atomic.AtomicReference mLockedFlashMode>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        if $r5 == null goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r6 = r0.<androidx.camera.core.ImageCapture: java.util.concurrent.atomic.AtomicReference mLockedFlashMode>;

        $i0 = virtualinvoke r0.<androidx.camera.core.ImageCapture: int getFlashMode()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke $r6.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r7);

        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r1;

     label6:
        throw r2;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    void unlockFlashMode()
    {
        androidx.camera.core.ImageCapture r0;
        java.util.concurrent.atomic.AtomicReference r1, $r4, $r5;
        java.lang.Integer r2;
        java.lang.Throwable r3, $r7;
        java.lang.Object $r6;
        int $i0, $i1;

        r0 := @this: androidx.camera.core.ImageCapture;

        $r4 = r0.<androidx.camera.core.ImageCapture: java.util.concurrent.atomic.AtomicReference mLockedFlashMode>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<androidx.camera.core.ImageCapture: java.util.concurrent.atomic.AtomicReference mLockedFlashMode>;

        $r6 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(null);

        r2 = (java.lang.Integer) $r6;

        if r2 != null goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        $i0 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        $i1 = virtualinvoke r0.<androidx.camera.core.ImageCapture: int getFlashMode()>();

        if $i0 == $i1 goto label4;

        specialinvoke r0.<androidx.camera.core.ImageCapture: void trySetFlashModeToCameraControl()>();

     label4:
        exitmonitor r1;

     label5:
        goto label8;

     label6:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r1;

     label7:
        throw r3;

     label8:
        return;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private void trySetFlashModeToCameraControl()
    {
        androidx.camera.core.ImageCapture r0;
        java.util.concurrent.atomic.AtomicReference r1, $r3, $r4;
        java.lang.Throwable r2, $r7;
        java.lang.Object $r5;
        androidx.camera.core.impl.CameraControlInternal $r6;
        int $i0;

        r0 := @this: androidx.camera.core.ImageCapture;

        $r3 = r0.<androidx.camera.core.ImageCapture: java.util.concurrent.atomic.AtomicReference mLockedFlashMode>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<androidx.camera.core.ImageCapture: java.util.concurrent.atomic.AtomicReference mLockedFlashMode>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        if $r5 == null goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r6 = virtualinvoke r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.CameraControlInternal getCameraControl()>();

        $i0 = virtualinvoke r0.<androidx.camera.core.ImageCapture: int getFlashMode()>();

        interfaceinvoke $r6.<androidx.camera.core.impl.CameraControlInternal: void setFlashMode(int)>($i0);

        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r7 := @caughtexception;

        r2 = $r7;

        exitmonitor r1;

     label6:
        throw r2;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private int getJpegQualityInternal()
    {
        androidx.camera.core.ImageCapture r0;
        androidx.camera.core.impl.ImageCaptureConfig r1;
        androidx.camera.core.impl.UseCaseConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;
        boolean $z0;
        int $i0, $i1, $i2;
        java.lang.IllegalStateException $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: androidx.camera.core.ImageCapture;

        $r2 = virtualinvoke r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.UseCaseConfig getCurrentConfig()>();

        r1 = (androidx.camera.core.impl.ImageCaptureConfig) $r2;

        $r3 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_JPEG_COMPRESSION_QUALITY>;

        $z0 = virtualinvoke r1.<androidx.camera.core.impl.ImageCaptureConfig: boolean containsOption(androidx.camera.core.impl.Config$Option)>($r3);

        if $z0 == 0 goto label1;

        $i2 = virtualinvoke r1.<androidx.camera.core.impl.ImageCaptureConfig: int getJpegQuality()>();

        return $i2;

     label1:
        $i0 = r0.<androidx.camera.core.ImageCapture: int mCaptureMode>;

        tableswitch($i0)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label3;
            default: goto label4;
        };

     label2:
        return 100;

     label3:
        return 95;

     label4:
        $r4 = new java.lang.IllegalStateException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CaptureMode ");

        $i1 = r0.<androidx.camera.core.ImageCapture: int mCaptureMode>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is invalid");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r4;
    }

    private com.google.common.util.concurrent.ListenableFuture takePictureInternal(androidx.camera.core.ImageCapture$ImageCaptureRequest)
    {
        androidx.camera.core.ImageCapture r0;
        androidx.camera.core.ImageCapture$ImageCaptureRequest r1;
        androidx.concurrent.futures.CallbackToFutureAdapter$Resolver $r2;
        com.google.common.util.concurrent.ListenableFuture $r3;

        r0 := @this: androidx.camera.core.ImageCapture;

        r1 := @parameter0: androidx.camera.core.ImageCapture$ImageCaptureRequest;

        $r2 = dynamicinvoke "attachCompleter" <androidx.concurrent.futures.CallbackToFutureAdapter$Resolver (androidx.camera.core.ImageCapture,androidx.camera.core.ImageCapture$ImageCaptureRequest)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.ImageCapture: java.lang.Object lambda$takePictureInternal$9(androidx.camera.core.ImageCapture$ImageCaptureRequest,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer));

        $r3 = staticinvoke <androidx.concurrent.futures.CallbackToFutureAdapter: com.google.common.util.concurrent.ListenableFuture getFuture(androidx.concurrent.futures.CallbackToFutureAdapter$Resolver)>($r2);

        return $r3;
    }

    public java.lang.String toString()
    {
        androidx.camera.core.ImageCapture r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String $r3, $r5;

        r0 := @this: androidx.camera.core.ImageCapture;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ImageCapture:");

        $r3 = virtualinvoke r0.<androidx.camera.core.ImageCapture: java.lang.String getName()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    static int getError(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        boolean $z0, $z1;
        androidx.camera.core.ImageCaptureException $r1;
        int $i0;

        r0 := @parameter0: java.lang.Throwable;

        $z0 = r0 instanceof androidx.camera.core.CameraClosedException;

        if $z0 == 0 goto label1;

        return 3;

     label1:
        $z1 = r0 instanceof androidx.camera.core.ImageCaptureException;

        if $z1 == 0 goto label2;

        $r1 = (androidx.camera.core.ImageCaptureException) r0;

        $i0 = virtualinvoke $r1.<androidx.camera.core.ImageCaptureException: int getImageCaptureError()>();

        return $i0;

     label2:
        return 0;
    }

    static boolean enforceSoftwareJpegConstraints(androidx.camera.core.impl.MutableConfig)
    {
        androidx.camera.core.impl.MutableConfig r0;
        java.lang.Integer r1;
        java.lang.Boolean $r2, $r4, $r9;
        androidx.camera.core.impl.Config$Option $r3, $r6, $r8;
        java.lang.Object $r5, $r7;
        boolean $z0, z1;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r10, $r11, $r12;
        java.lang.String $r13;

        r0 := @parameter0: androidx.camera.core.impl.MutableConfig;

        $r2 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $r3 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_USE_SOFTWARE_JPEG_ENCODER>;

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r5 = interfaceinvoke r0.<androidx.camera.core.impl.MutableConfig: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, $r4);

        $z0 = virtualinvoke $r2.<java.lang.Boolean: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label4;

        z1 = 1;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 >= 26 goto label1;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Software JPEG only supported on API 26+, but current API level is ");

        $i2 = <android.os.Build$VERSION: int SDK_INT>;

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void w(java.lang.String,java.lang.String)>("ImageCapture", $r13);

        z1 = 0;

     label1:
        $r6 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_BUFFER_FORMAT>;

        $r7 = interfaceinvoke r0.<androidx.camera.core.impl.MutableConfig: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r6, null);

        r1 = (java.lang.Integer) $r7;

        if r1 == null goto label2;

        $i1 = virtualinvoke r1.<java.lang.Integer: int intValue()>();

        if $i1 == 256 goto label2;

        staticinvoke <androidx.camera.core.Logger: void w(java.lang.String,java.lang.String)>("ImageCapture", "Software JPEG cannot be used with non-JPEG output buffer format.");

        z1 = 0;

     label2:
        if z1 != 0 goto label3;

        staticinvoke <androidx.camera.core.Logger: void w(java.lang.String,java.lang.String)>("ImageCapture", "Unable to support software JPEG. Disabling.");

        $r8 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_USE_SOFTWARE_JPEG_ENCODER>;

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        interfaceinvoke r0.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r8, $r9);

     label3:
        return z1;

     label4:
        return 0;
    }

    public void onDetached()
    {
        androidx.camera.core.ImageCapture r0;
        com.google.common.util.concurrent.ListenableFuture r1;
        java.util.concurrent.ExecutorService r2;
        java.lang.Runnable $r4;
        java.util.concurrent.Executor $r5;

        r0 := @this: androidx.camera.core.ImageCapture;

        r1 = r0.<androidx.camera.core.ImageCapture: com.google.common.util.concurrent.ListenableFuture mImageReaderCloseFuture>;

        specialinvoke r0.<androidx.camera.core.ImageCapture: void abortImageCaptureRequests()>();

        virtualinvoke r0.<androidx.camera.core.ImageCapture: void clearPipeline()>();

        r0.<androidx.camera.core.ImageCapture: boolean mUseSoftwareJpeg> = 0;

        r2 = r0.<androidx.camera.core.ImageCapture: java.util.concurrent.ExecutorService mExecutor>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        $r4 = dynamicinvoke "run" <java.lang.Runnable (java.util.concurrent.ExecutorService)>(r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_INTERFACE" <java.util.concurrent.ExecutorService: void shutdown()>, methodtype: void __METHODTYPE__());

        $r5 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor directExecutor()>();

        interfaceinvoke r1.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r4, $r5);

        return;
    }

    public void onAttached()
    {
        androidx.camera.core.ImageCapture r0;
        androidx.camera.core.impl.ImageCaptureConfig r1;
        androidx.camera.core.impl.CaptureConfig$Builder r2;
        androidx.camera.core.impl.CameraInternal r3;
        androidx.camera.core.impl.UseCaseConfig $r4;
        androidx.camera.core.impl.CaptureConfig $r5;
        androidx.camera.core.impl.CaptureProcessor $r6;
        int $i0;
        androidx.camera.core.impl.CaptureBundle $r7, $r8;
        boolean $z0;
        androidx.camera.core.ImageCapture$6 $r10;
        java.util.concurrent.ExecutorService $r11;

        r0 := @this: androidx.camera.core.ImageCapture;

        $r4 = virtualinvoke r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.UseCaseConfig getCurrentConfig()>();

        r1 = (androidx.camera.core.impl.ImageCaptureConfig) $r4;

        r2 = staticinvoke <androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.CaptureConfig$Builder createFrom(androidx.camera.core.impl.UseCaseConfig)>(r1);

        $r5 = virtualinvoke r2.<androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.CaptureConfig build()>();

        r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.CaptureConfig mCaptureConfig> = $r5;

        $r6 = virtualinvoke r1.<androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.CaptureProcessor getCaptureProcessor(androidx.camera.core.impl.CaptureProcessor)>(null);

        r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.CaptureProcessor mCaptureProcessor> = $r6;

        $i0 = virtualinvoke r1.<androidx.camera.core.impl.ImageCaptureConfig: int getMaxCaptureStages(int)>(2);

        r0.<androidx.camera.core.ImageCapture: int mMaxCaptureStages> = $i0;

        $r7 = staticinvoke <androidx.camera.core.CaptureBundles: androidx.camera.core.impl.CaptureBundle singleDefaultCaptureBundle()>();

        $r8 = virtualinvoke r1.<androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.CaptureBundle getCaptureBundle(androidx.camera.core.impl.CaptureBundle)>($r7);

        r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.CaptureBundle mCaptureBundle> = $r8;

        $z0 = virtualinvoke r1.<androidx.camera.core.impl.ImageCaptureConfig: boolean isSoftwareJpegEncoderRequested()>();

        r0.<androidx.camera.core.ImageCapture: boolean mUseSoftwareJpeg> = $z0;

        r3 = virtualinvoke r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.CameraInternal getCamera()>();

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r3, "Attached camera cannot be null");

        $r10 = new androidx.camera.core.ImageCapture$6;

        specialinvoke $r10.<androidx.camera.core.ImageCapture$6: void <init>(androidx.camera.core.ImageCapture)>(r0);

        $r11 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int,java.util.concurrent.ThreadFactory)>(1, $r10);

        r0.<androidx.camera.core.ImageCapture: java.util.concurrent.ExecutorService mExecutor> = $r11;

        return;
    }

    protected android.util.Size onSuggestedResolutionUpdated(android.util.Size)
    {
        androidx.camera.core.ImageCapture r0;
        android.util.Size r1;
        java.lang.String $r2;
        androidx.camera.core.impl.UseCaseConfig $r3;
        androidx.camera.core.impl.ImageCaptureConfig $r4;
        androidx.camera.core.impl.SessionConfig$Builder $r5, $r6;
        androidx.camera.core.impl.SessionConfig $r7;

        r0 := @this: androidx.camera.core.ImageCapture;

        r1 := @parameter0: android.util.Size;

        $r2 = virtualinvoke r0.<androidx.camera.core.ImageCapture: java.lang.String getCameraId()>();

        $r3 = virtualinvoke r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.UseCaseConfig getCurrentConfig()>();

        $r4 = (androidx.camera.core.impl.ImageCaptureConfig) $r3;

        $r5 = virtualinvoke r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.SessionConfig$Builder createPipeline(java.lang.String,androidx.camera.core.impl.ImageCaptureConfig,android.util.Size)>($r2, $r4, r1);

        r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.SessionConfig$Builder mSessionConfigBuilder> = $r5;

        $r6 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.SessionConfig$Builder mSessionConfigBuilder>;

        $r7 = virtualinvoke $r6.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig build()>();

        virtualinvoke r0.<androidx.camera.core.ImageCapture: void updateSessionConfig(androidx.camera.core.impl.SessionConfig)>($r7);

        virtualinvoke r0.<androidx.camera.core.ImageCapture: void notifyActive()>();

        return r1;
    }

    com.google.common.util.concurrent.ListenableFuture issueTakePicture(androidx.camera.core.ImageCapture$ImageCaptureRequest)
    {
        androidx.camera.core.ImageCapture r0;
        androidx.camera.core.ImageCapture$ImageCaptureRequest r1;
        java.util.ArrayList r2, $r5;
        androidx.camera.core.impl.CaptureStage r3;
        androidx.camera.core.impl.CaptureConfig$Builder r4, $r11;
        androidx.camera.core.ProcessingImageReader $r6, $r34, $r35, $r38;
        androidx.camera.core.impl.CaptureBundle $r7, $r32, r48;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.util.List $r8, $r16, r49, r50;
        com.google.common.util.concurrent.ListenableFuture $r9, $r27, $r29, $r31, $r40, $r42, $r44, $r46;
        java.lang.Object $r10;
        androidx.camera.core.impl.CaptureConfig $r12, $r13, $r19, $r52;
        androidx.camera.core.impl.Config $r14, $r53;
        androidx.camera.core.impl.SessionConfig$Builder $r15;
        androidx.camera.core.impl.DeferrableSurface $r17;
        androidx.camera.core.impl.CameraCaptureCallback $r18;
        java.lang.Integer $r20, $r23, $r25;
        androidx.camera.core.internal.compat.workaround.ExifRotationAvailability $r21;
        boolean $z1, $z2;
        androidx.camera.core.impl.Config$Option $r22, $r24;
        java.lang.IllegalArgumentException $r26, $r28, $r30, $r39, $r41, $r43, $r45;
        androidx.camera.core.impl.CaptureProcessor $r33;
        java.util.concurrent.Executor $r36;
        androidx.camera.core.ProcessingImageReader$OnProcessingErrorCallback $r37;
        java.lang.String r47;
        java.util.Iterator r51;

        r0 := @this: androidx.camera.core.ImageCapture;

        r1 := @parameter0: androidx.camera.core.ImageCapture$ImageCaptureRequest;

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("ImageCapture", "issueTakePicture");

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r2 = $r5;

        r47 = null;

        $r6 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.ProcessingImageReader mProcessingImageReader>;

        if $r6 == null goto label05;

        $r32 = staticinvoke <androidx.camera.core.CaptureBundles: androidx.camera.core.impl.CaptureBundle singleDefaultCaptureBundle()>();

        r48 = specialinvoke r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.CaptureBundle getCaptureBundle(androidx.camera.core.impl.CaptureBundle)>($r32);

        if r48 != null goto label01;

        $r45 = new java.lang.IllegalArgumentException;

        specialinvoke $r45.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ImageCapture cannot set empty CaptureBundle.");

        $r46 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFailedFuture(java.lang.Throwable)>($r45);

        return $r46;

     label01:
        r49 = interfaceinvoke r48.<androidx.camera.core.impl.CaptureBundle: java.util.List getCaptureStages()>();

        if r49 != null goto label02;

        $r43 = new java.lang.IllegalArgumentException;

        specialinvoke $r43.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ImageCapture has CaptureBundle with null capture stages");

        $r44 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFailedFuture(java.lang.Throwable)>($r43);

        return $r44;

     label02:
        $r33 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.CaptureProcessor mCaptureProcessor>;

        if $r33 != null goto label03;

        $i8 = interfaceinvoke r49.<java.util.List: int size()>();

        if $i8 <= 1 goto label03;

        $r41 = new java.lang.IllegalArgumentException;

        specialinvoke $r41.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No CaptureProcessor can be found to process the images captured for multiple CaptureStages.");

        $r42 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFailedFuture(java.lang.Throwable)>($r41);

        return $r42;

     label03:
        $i6 = interfaceinvoke r49.<java.util.List: int size()>();

        $i7 = r0.<androidx.camera.core.ImageCapture: int mMaxCaptureStages>;

        if $i6 <= $i7 goto label04;

        $r39 = new java.lang.IllegalArgumentException;

        specialinvoke $r39.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ImageCapture has CaptureStages > Max CaptureStage size");

        $r40 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFailedFuture(java.lang.Throwable)>($r39);

        return $r40;

     label04:
        $r34 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.ProcessingImageReader mProcessingImageReader>;

        virtualinvoke $r34.<androidx.camera.core.ProcessingImageReader: void setCaptureBundle(androidx.camera.core.impl.CaptureBundle)>(r48);

        $r35 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.ProcessingImageReader mProcessingImageReader>;

        $r36 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor directExecutor()>();

        $r37 = dynamicinvoke "notifyProcessingError" <androidx.camera.core.ProcessingImageReader$OnProcessingErrorCallback (androidx.camera.core.ImageCapture$ImageCaptureRequest)>(r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.String,java.lang.Throwable), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.core.ImageCapture: void lambda$issueTakePicture$10(androidx.camera.core.ImageCapture$ImageCaptureRequest,java.lang.String,java.lang.Throwable)>, methodtype: void __METHODTYPE__(java.lang.String,java.lang.Throwable));

        virtualinvoke $r35.<androidx.camera.core.ProcessingImageReader: void setOnProcessingErrorCallback(java.util.concurrent.Executor,androidx.camera.core.ProcessingImageReader$OnProcessingErrorCallback)>($r36, $r37);

        $r38 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.ProcessingImageReader mProcessingImageReader>;

        r47 = virtualinvoke $r38.<androidx.camera.core.ProcessingImageReader: java.lang.String getTagBundleKey()>();

        goto label08;

     label05:
        $r7 = staticinvoke <androidx.camera.core.CaptureBundles: androidx.camera.core.impl.CaptureBundle singleDefaultCaptureBundle()>();

        r48 = specialinvoke r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.CaptureBundle getCaptureBundle(androidx.camera.core.impl.CaptureBundle)>($r7);

        if r48 != null goto label06;

        $r30 = new java.lang.IllegalArgumentException;

        specialinvoke $r30.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ImageCapture cannot set empty CaptureBundle.");

        $r31 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFailedFuture(java.lang.Throwable)>($r30);

        return $r31;

     label06:
        r50 = interfaceinvoke r48.<androidx.camera.core.impl.CaptureBundle: java.util.List getCaptureStages()>();

        if r50 != null goto label07;

        $r28 = new java.lang.IllegalArgumentException;

        specialinvoke $r28.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ImageCapture has CaptureBundle with null capture stages");

        $r29 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFailedFuture(java.lang.Throwable)>($r28);

        return $r29;

     label07:
        $i0 = interfaceinvoke r50.<java.util.List: int size()>();

        if $i0 <= 1 goto label08;

        $r26 = new java.lang.IllegalArgumentException;

        specialinvoke $r26.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ImageCapture have no CaptureProcess set with CaptureBundle size > 1.");

        $r27 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFailedFuture(java.lang.Throwable)>($r26);

        return $r27;

     label08:
        $r8 = interfaceinvoke r48.<androidx.camera.core.impl.CaptureBundle: java.util.List getCaptureStages()>();

        r51 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z2 = interfaceinvoke r51.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label13;

        $r10 = interfaceinvoke r51.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.camera.core.impl.CaptureStage) $r10;

        $r11 = new androidx.camera.core.impl.CaptureConfig$Builder;

        specialinvoke $r11.<androidx.camera.core.impl.CaptureConfig$Builder: void <init>()>();

        r4 = $r11;

        $r12 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.CaptureConfig mCaptureConfig>;

        $i1 = virtualinvoke $r12.<androidx.camera.core.impl.CaptureConfig: int getTemplateType()>();

        virtualinvoke r4.<androidx.camera.core.impl.CaptureConfig$Builder: void setTemplateType(int)>($i1);

        $r13 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.CaptureConfig mCaptureConfig>;

        $r14 = virtualinvoke $r13.<androidx.camera.core.impl.CaptureConfig: androidx.camera.core.impl.Config getImplementationOptions()>();

        virtualinvoke r4.<androidx.camera.core.impl.CaptureConfig$Builder: void addImplementationOptions(androidx.camera.core.impl.Config)>($r14);

        $r15 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.SessionConfig$Builder mSessionConfigBuilder>;

        $r16 = virtualinvoke $r15.<androidx.camera.core.impl.SessionConfig$Builder: java.util.List getSingleCameraCaptureCallbacks()>();

        virtualinvoke r4.<androidx.camera.core.impl.CaptureConfig$Builder: void addAllCameraCaptureCallbacks(java.util.Collection)>($r16);

        $r17 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.DeferrableSurface mDeferrableSurface>;

        virtualinvoke r4.<androidx.camera.core.impl.CaptureConfig$Builder: void addSurface(androidx.camera.core.impl.DeferrableSurface)>($r17);

        $i2 = virtualinvoke r0.<androidx.camera.core.ImageCapture: int getImageFormat()>();

        if $i2 != 256 goto label11;

        $r21 = <androidx.camera.core.ImageCapture: androidx.camera.core.internal.compat.workaround.ExifRotationAvailability EXIF_ROTATION_AVAILABILITY>;

        $z1 = virtualinvoke $r21.<androidx.camera.core.internal.compat.workaround.ExifRotationAvailability: boolean isRotationOptionSupported()>();

        if $z1 == 0 goto label10;

        $r24 = <androidx.camera.core.impl.CaptureConfig: androidx.camera.core.impl.Config$Option OPTION_ROTATION>;

        $i5 = r1.<androidx.camera.core.ImageCapture$ImageCaptureRequest: int mRotationDegrees>;

        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        virtualinvoke r4.<androidx.camera.core.impl.CaptureConfig$Builder: void addImplementationOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r24, $r25);

     label10:
        $r22 = <androidx.camera.core.impl.CaptureConfig: androidx.camera.core.impl.Config$Option OPTION_JPEG_QUALITY>;

        $i4 = r1.<androidx.camera.core.ImageCapture$ImageCaptureRequest: int mJpegQuality>;

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        virtualinvoke r4.<androidx.camera.core.impl.CaptureConfig$Builder: void addImplementationOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r22, $r23);

     label11:
        $r52 = interfaceinvoke r3.<androidx.camera.core.impl.CaptureStage: androidx.camera.core.impl.CaptureConfig getCaptureConfig()>();

        $r53 = virtualinvoke $r52.<androidx.camera.core.impl.CaptureConfig: androidx.camera.core.impl.Config getImplementationOptions()>();

        virtualinvoke r4.<androidx.camera.core.impl.CaptureConfig$Builder: void addImplementationOptions(androidx.camera.core.impl.Config)>($r53);

        if r47 == null goto label12;

        $i3 = interfaceinvoke r3.<androidx.camera.core.impl.CaptureStage: int getId()>();

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        virtualinvoke r4.<androidx.camera.core.impl.CaptureConfig$Builder: void addTag(java.lang.String,java.lang.Object)>(r47, $r20);

     label12:
        $r18 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.CameraCaptureCallback mMetadataMatchingCaptureCallback>;

        virtualinvoke r4.<androidx.camera.core.impl.CaptureConfig$Builder: void addCameraCaptureCallback(androidx.camera.core.impl.CameraCaptureCallback)>($r18);

        $r19 = virtualinvoke r4.<androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.CaptureConfig build()>();

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r19);

        goto label09;

     label13:
        $r9 = virtualinvoke r0.<androidx.camera.core.ImageCapture: com.google.common.util.concurrent.ListenableFuture submitStillCaptureRequest(java.util.List)>(r2);

        return $r9;
    }

    private androidx.camera.core.impl.CaptureBundle getCaptureBundle(androidx.camera.core.impl.CaptureBundle)
    {
        androidx.camera.core.ImageCapture r0;
        androidx.camera.core.impl.CaptureBundle r1, $r3, $r4;
        java.util.List r2;
        boolean $z0;

        r0 := @this: androidx.camera.core.ImageCapture;

        r1 := @parameter0: androidx.camera.core.impl.CaptureBundle;

        $r3 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.CaptureBundle mCaptureBundle>;

        r2 = interfaceinvoke $r3.<androidx.camera.core.impl.CaptureBundle: java.util.List getCaptureStages()>();

        if r2 == null goto label1;

        $z0 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        return r1;

     label2:
        $r4 = staticinvoke <androidx.camera.core.CaptureBundles: androidx.camera.core.impl.CaptureBundle createCaptureBundle(java.util.List)>(r2);

        return $r4;
    }

    private boolean isNodeEnabled()
    {
        androidx.camera.core.ImageCapture r0;
        androidx.camera.core.impl.ImageCaptureConfig r1;
        androidx.camera.core.impl.UseCaseConfig $r2;
        androidx.camera.core.ImageReaderProxyProvider $r3;
        boolean $z0, $z1;
        androidx.camera.core.impl.CaptureProcessor $r4;
        int $i0, $i1;
        androidx.camera.core.impl.Config$Option $r5;
        java.lang.Integer $r6, $r8, $r10;
        java.lang.Object $r7, $r9;

        r0 := @this: androidx.camera.core.ImageCapture;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r2 = virtualinvoke r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.UseCaseConfig getCurrentConfig()>();

        r1 = (androidx.camera.core.impl.ImageCaptureConfig) $r2;

        $r3 = virtualinvoke r1.<androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.ImageReaderProxyProvider getImageReaderProxyProvider()>();

        if $r3 == null goto label1;

        return 0;

     label1:
        $z0 = specialinvoke r0.<androidx.camera.core.ImageCapture: boolean isSessionProcessorEnabledInCurrentCamera()>();

        if $z0 == 0 goto label2;

        return 0;

     label2:
        $r4 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.CaptureProcessor mCaptureProcessor>;

        if $r4 == null goto label3;

        return 0;

     label3:
        $i0 = specialinvoke r0.<androidx.camera.core.ImageCapture: int getCaptureStageSize(androidx.camera.core.impl.ImageCaptureConfig)>(r1);

        if $i0 <= 1 goto label4;

        return 0;

     label4:
        $r5 = <androidx.camera.core.impl.ImageInputConfig: androidx.camera.core.impl.Config$Option OPTION_INPUT_FORMAT>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(256);

        $r7 = virtualinvoke r1.<androidx.camera.core.impl.ImageCaptureConfig: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r5, $r6);

        $r8 = (java.lang.Integer) $r7;

        $r9 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r8);

        $r10 = (java.lang.Integer) $r9;

        $i1 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        if $i1 == 256 goto label5;

        return 0;

     label5:
        $z1 = r0.<androidx.camera.core.ImageCapture: boolean mUseProcessingPipeline>;

        return $z1;
    }

    private int getCaptureStageSize(androidx.camera.core.impl.ImageCaptureConfig)
    {
        androidx.camera.core.ImageCapture r0;
        androidx.camera.core.impl.ImageCaptureConfig r1;
        androidx.camera.core.impl.CaptureBundle r2;
        java.util.List r3;
        int $i0;

        r0 := @this: androidx.camera.core.ImageCapture;

        r1 := @parameter0: androidx.camera.core.impl.ImageCaptureConfig;

        r2 = virtualinvoke r1.<androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.CaptureBundle getCaptureBundle(androidx.camera.core.impl.CaptureBundle)>(null);

        if r2 != null goto label1;

        return 1;

     label1:
        r3 = interfaceinvoke r2.<androidx.camera.core.impl.CaptureBundle: java.util.List getCaptureStages()>();

        if r3 != null goto label2;

        return 1;

     label2:
        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        return $i0;
    }

    private androidx.camera.core.impl.SessionConfig$Builder createPipelineWithNode(java.lang.String, androidx.camera.core.impl.ImageCaptureConfig, android.util.Size)
    {
        androidx.camera.core.ImageCapture r0;
        java.lang.String r1, $r6;
        androidx.camera.core.impl.ImageCaptureConfig r2;
        android.util.Size r3;
        androidx.camera.core.impl.SessionConfig$Builder r4;
        java.lang.Object[] $r5;
        androidx.camera.core.imagecapture.ImagePipeline $r7, $r8, $r11, $r13;
        androidx.camera.core.imagecapture.TakePictureManager $r9, $r10;
        androidx.camera.core.imagecapture.ImageCaptureControl $r12;
        int $i1, $i2;
        androidx.camera.core.impl.CameraControlInternal $r15;
        boolean $z0, $z1;
        androidx.camera.core.impl.SessionConfig$ErrorListener $r16;

        r0 := @this: androidx.camera.core.ImageCapture;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.camera.core.impl.ImageCaptureConfig;

        r3 := @parameter2: android.util.Size;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r5 = newarray (java.lang.Object)[2];

        $r5[0] = r1;

        $r5[1] = r3;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("createPipelineWithNode(cameraId: %s, resolution: %s)", $r5);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ImageCapture", $r6);

        $r7 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.imagecapture.ImagePipeline mImagePipeline>;

        if $r7 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean)>($z0);

        $r8 = new androidx.camera.core.imagecapture.ImagePipeline;

        specialinvoke $r8.<androidx.camera.core.imagecapture.ImagePipeline: void <init>(androidx.camera.core.impl.ImageCaptureConfig,android.util.Size)>(r2, r3);

        r0.<androidx.camera.core.ImageCapture: androidx.camera.core.imagecapture.ImagePipeline mImagePipeline> = $r8;

        $r9 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.imagecapture.TakePictureManager mTakePictureManager>;

        if $r9 != null goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean)>($z1);

        $r10 = new androidx.camera.core.imagecapture.TakePictureManager;

        $r12 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.imagecapture.ImageCaptureControl mImageCaptureControl>;

        $r11 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.imagecapture.ImagePipeline mImagePipeline>;

        specialinvoke $r10.<androidx.camera.core.imagecapture.TakePictureManager: void <init>(androidx.camera.core.imagecapture.ImageCaptureControl,androidx.camera.core.imagecapture.ImagePipeline)>($r12, $r11);

        r0.<androidx.camera.core.ImageCapture: androidx.camera.core.imagecapture.TakePictureManager mTakePictureManager> = $r10;

        $r13 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.imagecapture.ImagePipeline mImagePipeline>;

        r4 = virtualinvoke $r13.<androidx.camera.core.imagecapture.ImagePipeline: androidx.camera.core.impl.SessionConfig$Builder createSessionConfigBuilder()>();

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 < 23 goto label5;

        $i2 = virtualinvoke r0.<androidx.camera.core.ImageCapture: int getCaptureMode()>();

        if $i2 != 2 goto label5;

        $r15 = virtualinvoke r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.CameraControlInternal getCameraControl()>();

        interfaceinvoke $r15.<androidx.camera.core.impl.CameraControlInternal: void addZslConfig(androidx.camera.core.impl.SessionConfig$Builder)>(r4);

     label5:
        $r16 = dynamicinvoke "onError" <androidx.camera.core.impl.SessionConfig$ErrorListener (androidx.camera.core.ImageCapture,java.lang.String)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(androidx.camera.core.impl.SessionConfig,androidx.camera.core.impl.SessionConfig$SessionError), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.ImageCapture: void lambda$createPipelineWithNode$11(java.lang.String,androidx.camera.core.impl.SessionConfig,androidx.camera.core.impl.SessionConfig$SessionError)>, methodtype: void __METHODTYPE__(androidx.camera.core.impl.SessionConfig,androidx.camera.core.impl.SessionConfig$SessionError));

        virtualinvoke r4.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder addErrorListener(androidx.camera.core.impl.SessionConfig$ErrorListener)>($r16);

        return r4;
    }

    private void takePictureWithNode(java.util.concurrent.Executor, androidx.camera.core.ImageCapture$OnImageCapturedCallback, androidx.camera.core.ImageCapture$OnImageSavedCallback, androidx.camera.core.ImageCapture$OutputFileOptions)
    {
        androidx.camera.core.ImageCapture r0;
        java.util.concurrent.Executor r1;
        androidx.camera.core.ImageCapture$OnImageCapturedCallback r2;
        androidx.camera.core.ImageCapture$OnImageSavedCallback r3;
        androidx.camera.core.ImageCapture$OutputFileOptions r4;
        androidx.camera.core.impl.CameraInternal r5;
        androidx.camera.core.imagecapture.TakePictureManager $r6;
        android.graphics.Rect $r7;
        android.graphics.Matrix $r8;
        int $i1, $i2, $i3;
        androidx.camera.core.impl.SessionConfig$Builder $r9;
        java.util.List $r10;
        androidx.camera.core.imagecapture.TakePictureRequest $r11;

        r0 := @this: androidx.camera.core.ImageCapture;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: androidx.camera.core.ImageCapture$OnImageCapturedCallback;

        r3 := @parameter2: androidx.camera.core.ImageCapture$OnImageSavedCallback;

        r4 := @parameter3: androidx.camera.core.ImageCapture$OutputFileOptions;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ImageCapture", "takePictureWithNode");

        r5 = virtualinvoke r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.CameraInternal getCamera()>();

        if r5 != null goto label1;

        specialinvoke r0.<androidx.camera.core.ImageCapture: void sendInvalidCameraError(java.util.concurrent.Executor,androidx.camera.core.ImageCapture$OnImageCapturedCallback,androidx.camera.core.ImageCapture$OnImageSavedCallback)>(r1, r2, r3);

        return;

     label1:
        $r6 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.imagecapture.TakePictureManager mTakePictureManager>;

        $r7 = specialinvoke r0.<androidx.camera.core.ImageCapture: android.graphics.Rect getTakePictureCropRect()>();

        $r8 = virtualinvoke r0.<androidx.camera.core.ImageCapture: android.graphics.Matrix getSensorToBufferTransformMatrix()>();

        $i1 = virtualinvoke r0.<androidx.camera.core.ImageCapture: int getRelativeRotation(androidx.camera.core.impl.CameraInternal)>(r5);

        $i2 = specialinvoke r0.<androidx.camera.core.ImageCapture: int getJpegQualityInternal()>();

        $i3 = virtualinvoke r0.<androidx.camera.core.ImageCapture: int getCaptureMode()>();

        $r9 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.SessionConfig$Builder mSessionConfigBuilder>;

        $r10 = virtualinvoke $r9.<androidx.camera.core.impl.SessionConfig$Builder: java.util.List getSingleCameraCaptureCallbacks()>();

        $r11 = staticinvoke <androidx.camera.core.imagecapture.TakePictureRequest: androidx.camera.core.imagecapture.TakePictureRequest of(java.util.concurrent.Executor,androidx.camera.core.ImageCapture$OnImageCapturedCallback,androidx.camera.core.ImageCapture$OnImageSavedCallback,androidx.camera.core.ImageCapture$OutputFileOptions,android.graphics.Rect,android.graphics.Matrix,int,int,int,java.util.List)>(r1, r2, r3, r4, $r7, $r8, $i1, $i2, $i3, $r10);

        virtualinvoke $r6.<androidx.camera.core.imagecapture.TakePictureManager: void offerRequest(androidx.camera.core.imagecapture.TakePictureRequest)>($r11);

        return;
    }

    private void sendInvalidCameraError(java.util.concurrent.Executor, androidx.camera.core.ImageCapture$OnImageCapturedCallback, androidx.camera.core.ImageCapture$OnImageSavedCallback)
    {
        androidx.camera.core.ImageCapture r0;
        java.util.concurrent.Executor r1;
        androidx.camera.core.ImageCapture$OnImageCapturedCallback r2;
        androidx.camera.core.ImageCapture$OnImageSavedCallback r3;
        androidx.camera.core.ImageCaptureException r4, $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String $r10;
        java.lang.IllegalArgumentException $r11;

        r0 := @this: androidx.camera.core.ImageCapture;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: androidx.camera.core.ImageCapture$OnImageCapturedCallback;

        r3 := @parameter2: androidx.camera.core.ImageCapture$OnImageSavedCallback;

        $r5 = new androidx.camera.core.ImageCaptureException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not bound to a valid Camera [");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<androidx.camera.core.ImageCaptureException: void <init>(int,java.lang.String,java.lang.Throwable)>(4, $r10, null);

        r4 = $r5;

        if r2 == null goto label1;

        virtualinvoke r2.<androidx.camera.core.ImageCapture$OnImageCapturedCallback: void onError(androidx.camera.core.ImageCaptureException)>(r4);

        goto label3;

     label1:
        if r3 == null goto label2;

        interfaceinvoke r3.<androidx.camera.core.ImageCapture$OnImageSavedCallback: void onError(androidx.camera.core.ImageCaptureException)>(r4);

        goto label3;

     label2:
        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must have either in-memory or on-disk callback.");

        throw $r11;

     label3:
        return;
    }

    private android.graphics.Rect getTakePictureCropRect()
    {
        androidx.camera.core.ImageCapture r0;
        android.graphics.Rect r1, $r8, $r15, $r17;
        android.util.Size r2, $r5;
        int i0, $i1, $i2, $i3, $i4;
        android.util.Rational r3, r4, $r7, $r12, $r13, $r14, $r18;
        java.lang.Object $r6, $r10, $r16;
        boolean $z0, $z1;
        androidx.camera.core.impl.CameraInternal $r9, $r11;

        r0 := @this: androidx.camera.core.ImageCapture;

        r1 = virtualinvoke r0.<androidx.camera.core.ImageCapture: android.graphics.Rect getViewPortCropRect()>();

        $r5 = virtualinvoke r0.<androidx.camera.core.ImageCapture: android.util.Size getAttachedSurfaceResolution()>();

        $r6 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r5);

        r2 = (android.util.Size) $r6;

        if r1 == null goto label1;

        return r1;

     label1:
        $r7 = r0.<androidx.camera.core.ImageCapture: android.util.Rational mCropAspectRatio>;

        $z0 = staticinvoke <androidx.camera.core.internal.utils.ImageUtil: boolean isAspectRatioValid(android.util.Rational)>($r7);

        if $z0 == 0 goto label4;

        $r9 = virtualinvoke r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.CameraInternal getCamera()>();

        $r10 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r9);

        $r11 = (androidx.camera.core.impl.CameraInternal) $r10;

        i0 = virtualinvoke r0.<androidx.camera.core.ImageCapture: int getRelativeRotation(androidx.camera.core.impl.CameraInternal)>($r11);

        $r12 = new android.util.Rational;

        $r13 = r0.<androidx.camera.core.ImageCapture: android.util.Rational mCropAspectRatio>;

        $i3 = virtualinvoke $r13.<android.util.Rational: int getDenominator()>();

        $r14 = r0.<androidx.camera.core.ImageCapture: android.util.Rational mCropAspectRatio>;

        $i4 = virtualinvoke $r14.<android.util.Rational: int getNumerator()>();

        specialinvoke $r12.<android.util.Rational: void <init>(int,int)>($i3, $i4);

        r3 = $r12;

        $z1 = staticinvoke <androidx.camera.core.impl.utils.TransformUtils: boolean is90or270(int)>(i0);

        if $z1 == 0 goto label2;

        $r18 = r3;

        goto label3;

     label2:
        $r18 = r0.<androidx.camera.core.ImageCapture: android.util.Rational mCropAspectRatio>;

     label3:
        r4 = $r18;

        $r15 = staticinvoke <androidx.camera.core.internal.utils.ImageUtil: android.graphics.Rect computeCropRectFromAspectRatio(android.util.Size,android.util.Rational)>(r2, r4);

        $r16 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r15);

        $r17 = (android.graphics.Rect) $r16;

        return $r17;

     label4:
        $r8 = new android.graphics.Rect;

        $i1 = virtualinvoke r2.<android.util.Size: int getWidth()>();

        $i2 = virtualinvoke r2.<android.util.Size: int getHeight()>();

        specialinvoke $r8.<android.graphics.Rect: void <init>(int,int,int,int)>(0, 0, $i1, $i2);

        return $r8;
    }

    private void clearPipelineWithNode()
    {
        androidx.camera.core.ImageCapture r0;
        androidx.camera.core.imagecapture.ImagePipeline $r1;
        androidx.camera.core.imagecapture.TakePictureManager $r2;

        r0 := @this: androidx.camera.core.ImageCapture;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ImageCapture", "clearPipelineWithNode");

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r1 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.imagecapture.ImagePipeline mImagePipeline>;

        virtualinvoke $r1.<androidx.camera.core.imagecapture.ImagePipeline: void close()>();

        r0.<androidx.camera.core.ImageCapture: androidx.camera.core.imagecapture.ImagePipeline mImagePipeline> = null;

        $r2 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.imagecapture.TakePictureManager mTakePictureManager>;

        virtualinvoke $r2.<androidx.camera.core.imagecapture.TakePictureManager: void abortRequests()>();

        r0.<androidx.camera.core.ImageCapture: androidx.camera.core.imagecapture.TakePictureManager mTakePictureManager> = null;

        return;
    }

    com.google.common.util.concurrent.ListenableFuture submitStillCaptureRequest(java.util.List)
    {
        androidx.camera.core.ImageCapture r0;
        java.util.List r1;
        androidx.camera.core.impl.CameraControlInternal $r2;
        int $i0, $i1;
        com.google.common.util.concurrent.ListenableFuture $r3, $r6;
        androidx.arch.core.util.Function $r4;
        java.util.concurrent.Executor $r5;

        r0 := @this: androidx.camera.core.ImageCapture;

        r1 := @parameter0: java.util.List;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r2 = virtualinvoke r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.CameraControlInternal getCameraControl()>();

        $i1 = r0.<androidx.camera.core.ImageCapture: int mCaptureMode>;

        $i0 = r0.<androidx.camera.core.ImageCapture: int mFlashType>;

        $r3 = interfaceinvoke $r2.<androidx.camera.core.impl.CameraControlInternal: com.google.common.util.concurrent.ListenableFuture submitStillCaptureRequests(java.util.List,int,int)>(r1, $i1, $i0);

        $r4 = dynamicinvoke "apply" <androidx.arch.core.util.Function ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.core.ImageCapture: java.lang.Void lambda$submitStillCaptureRequest$12(java.util.List)>, methodtype: java.lang.Void __METHODTYPE__(java.util.List));

        $r5 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor directExecutor()>();

        $r6 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture transform(com.google.common.util.concurrent.ListenableFuture,androidx.arch.core.util.Function,java.util.concurrent.Executor)>($r3, $r4, $r5);

        return $r6;
    }

    boolean isProcessingPipelineEnabled()
    {
        androidx.camera.core.ImageCapture r0;
        androidx.camera.core.imagecapture.ImagePipeline $r1;
        androidx.camera.core.imagecapture.TakePictureManager $r2;
        boolean $z0;

        r0 := @this: androidx.camera.core.ImageCapture;

        $r1 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.imagecapture.ImagePipeline mImagePipeline>;

        if $r1 == null goto label1;

        $r2 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.imagecapture.TakePictureManager mTakePictureManager>;

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static java.lang.Void lambda$submitStillCaptureRequest$12(java.util.List)
    {
        java.util.List r0;

        r0 := @parameter0: java.util.List;

        return null;
    }

    private void lambda$createPipelineWithNode$11(java.lang.String, androidx.camera.core.impl.SessionConfig, androidx.camera.core.impl.SessionConfig$SessionError)
    {
        androidx.camera.core.ImageCapture r0;
        java.lang.String r1;
        androidx.camera.core.impl.SessionConfig r2, $r6;
        androidx.camera.core.impl.SessionConfig$SessionError r3;
        boolean $z0;
        androidx.camera.core.imagecapture.TakePictureManager $r4, $r7;
        androidx.camera.core.impl.SessionConfig$Builder $r5;

        r0 := @this: androidx.camera.core.ImageCapture;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.camera.core.impl.SessionConfig;

        r3 := @parameter2: androidx.camera.core.impl.SessionConfig$SessionError;

        $z0 = virtualinvoke r0.<androidx.camera.core.ImageCapture: boolean isCurrentCamera(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $r4 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.imagecapture.TakePictureManager mTakePictureManager>;

        virtualinvoke $r4.<androidx.camera.core.imagecapture.TakePictureManager: void pause()>();

        $r5 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.SessionConfig$Builder mSessionConfigBuilder>;

        $r6 = virtualinvoke $r5.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig build()>();

        virtualinvoke r0.<androidx.camera.core.ImageCapture: void updateSessionConfig(androidx.camera.core.impl.SessionConfig)>($r6);

        virtualinvoke r0.<androidx.camera.core.ImageCapture: void notifyReset()>();

        $r7 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.imagecapture.TakePictureManager mTakePictureManager>;

        virtualinvoke $r7.<androidx.camera.core.imagecapture.TakePictureManager: void resume()>();

        goto label2;

     label1:
        specialinvoke r0.<androidx.camera.core.ImageCapture: void clearPipelineWithNode()>();

     label2:
        return;
    }

    private static void lambda$issueTakePicture$10(androidx.camera.core.ImageCapture$ImageCaptureRequest, java.lang.String, java.lang.Throwable)
    {
        androidx.camera.core.ImageCapture$ImageCaptureRequest r0;
        java.lang.String r1, $r6;
        java.lang.Throwable r2;
        java.lang.StringBuilder $r3, $r4, $r5;

        r0 := @parameter0: androidx.camera.core.ImageCapture$ImageCaptureRequest;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Throwable;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Processing image failed! ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String)>("ImageCapture", $r6);

        virtualinvoke r0.<androidx.camera.core.ImageCapture$ImageCaptureRequest: void notifyCallbackError(int,java.lang.String,java.lang.Throwable)>(2, r1, r2);

        return;
    }

    private java.lang.Object lambda$takePictureInternal$9(androidx.camera.core.ImageCapture$ImageCaptureRequest, androidx.concurrent.futures.CallbackToFutureAdapter$Completer) throws java.lang.Exception
    {
        androidx.camera.core.ImageCapture r0;
        androidx.camera.core.ImageCapture$ImageCaptureRequest r1;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r2;
        com.google.common.util.concurrent.ListenableFuture r3;
        androidx.camera.core.SafeCloseImageReaderProxy $r4;
        androidx.camera.core.impl.ImageReaderProxy$OnImageAvailableListener $r5;
        java.util.concurrent.ScheduledExecutorService $r6;
        java.util.concurrent.ExecutorService $r8;
        java.lang.Runnable $r9;
        java.util.concurrent.Executor $r10, r12, r13;
        androidx.camera.core.ImageCapture$5 r11;

        r0 := @this: androidx.camera.core.ImageCapture;

        r1 := @parameter0: androidx.camera.core.ImageCapture$ImageCaptureRequest;

        r2 := @parameter1: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        $r4 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.SafeCloseImageReaderProxy mImageReader>;

        $r5 = dynamicinvoke "onImageAvailable" <androidx.camera.core.impl.ImageReaderProxy$OnImageAvailableListener (androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>(r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(androidx.camera.core.impl.ImageReaderProxy), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.core.ImageCapture: void lambda$takePictureInternal$7(androidx.concurrent.futures.CallbackToFutureAdapter$Completer,androidx.camera.core.impl.ImageReaderProxy)>, methodtype: void __METHODTYPE__(androidx.camera.core.impl.ImageReaderProxy));

        $r6 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.ScheduledExecutorService mainThreadExecutor()>();

        r12 = (java.util.concurrent.Executor) $r6;

        virtualinvoke $r4.<androidx.camera.core.SafeCloseImageReaderProxy: void setOnImageAvailableListener(androidx.camera.core.impl.ImageReaderProxy$OnImageAvailableListener,java.util.concurrent.Executor)>($r5, r12);

        virtualinvoke r0.<androidx.camera.core.ImageCapture: void lockFlashMode()>();

        r3 = virtualinvoke r0.<androidx.camera.core.ImageCapture: com.google.common.util.concurrent.ListenableFuture issueTakePicture(androidx.camera.core.ImageCapture$ImageCaptureRequest)>(r1);

        r11 = new androidx.camera.core.ImageCapture$5;

        specialinvoke r11.<androidx.camera.core.ImageCapture$5: void <init>(androidx.camera.core.ImageCapture,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>(r0, r2);

        $r8 = r0.<androidx.camera.core.ImageCapture: java.util.concurrent.ExecutorService mExecutor>;

        r13 = (java.util.concurrent.Executor) $r8;

        staticinvoke <androidx.camera.core.impl.utils.futures.Futures: void addCallback(com.google.common.util.concurrent.ListenableFuture,androidx.camera.core.impl.utils.futures.FutureCallback,java.util.concurrent.Executor)>(r3, r11, r13);

        $r9 = dynamicinvoke "run" <java.lang.Runnable (com.google.common.util.concurrent.ListenableFuture)>(r3) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.core.ImageCapture: void lambda$takePictureInternal$8(com.google.common.util.concurrent.ListenableFuture)>, methodtype: void __METHODTYPE__());

        $r10 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor directExecutor()>();

        virtualinvoke r2.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: void addCancellationListener(java.lang.Runnable,java.util.concurrent.Executor)>($r9, $r10);

        return "takePictureInternal";
    }

    private static void lambda$takePictureInternal$8(com.google.common.util.concurrent.ListenableFuture)
    {
        com.google.common.util.concurrent.ListenableFuture r0;

        r0 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        interfaceinvoke r0.<com.google.common.util.concurrent.ListenableFuture: boolean cancel(boolean)>(1);

        return;
    }

    private static void lambda$takePictureInternal$7(androidx.concurrent.futures.CallbackToFutureAdapter$Completer, androidx.camera.core.impl.ImageReaderProxy)
    {
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r0;
        androidx.camera.core.impl.ImageReaderProxy r1;
        java.lang.IllegalStateException $r2;
        boolean $z1;
        java.lang.Throwable $r3, r5;
        androidx.camera.core.ImageProxy r4;

        r0 := @parameter0: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        r1 := @parameter1: androidx.camera.core.impl.ImageReaderProxy;

     label1:
        r4 = interfaceinvoke r1.<androidx.camera.core.impl.ImageReaderProxy: androidx.camera.core.ImageProxy acquireLatestImage()>();

        if r4 == null goto label2;

        $z1 = virtualinvoke r0.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean set(java.lang.Object)>(r4);

        if $z1 != 0 goto label3;

        interfaceinvoke r4.<androidx.camera.core.ImageProxy: void close()>();

        goto label3;

     label2:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unable to acquire image");

        virtualinvoke r0.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean setException(java.lang.Throwable)>($r2);

     label3:
        goto label5;

     label4:
        $r3 := @caughtexception;

        r5 = $r3;

        virtualinvoke r0.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean setException(java.lang.Throwable)>(r5);

     label5:
        return;

        catch java.lang.IllegalStateException from label1 to label3 with label4;
    }

    private static void lambda$sendImageCaptureRequest$6(androidx.camera.core.ImageCapture$OnImageCapturedCallback)
    {
        androidx.camera.core.ImageCapture$OnImageCapturedCallback r0;
        androidx.camera.core.ImageCaptureException $r1;

        r0 := @parameter0: androidx.camera.core.ImageCapture$OnImageCapturedCallback;

        $r1 = new androidx.camera.core.ImageCaptureException;

        specialinvoke $r1.<androidx.camera.core.ImageCaptureException: void <init>(int,java.lang.String,java.lang.Throwable)>(0, "Request is canceled", null);

        virtualinvoke r0.<androidx.camera.core.ImageCapture$OnImageCapturedCallback: void onError(androidx.camera.core.ImageCaptureException)>($r1);

        return;
    }

    private void lambda$sendImageCaptureRequest$5(androidx.camera.core.ImageCapture$OnImageCapturedCallback)
    {
        androidx.camera.core.ImageCapture r0;
        androidx.camera.core.ImageCapture$OnImageCapturedCallback r1;
        androidx.camera.core.ImageCaptureException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: androidx.camera.core.ImageCapture;

        r1 := @parameter0: androidx.camera.core.ImageCapture$OnImageCapturedCallback;

        $r2 = new androidx.camera.core.ImageCaptureException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not bound to a valid Camera [");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<androidx.camera.core.ImageCaptureException: void <init>(int,java.lang.String,java.lang.Throwable)>(4, $r7, null);

        virtualinvoke r1.<androidx.camera.core.ImageCapture$OnImageCapturedCallback: void onError(androidx.camera.core.ImageCaptureException)>($r2);

        return;
    }

    private void lambda$takePicture$4(androidx.camera.core.ImageCapture$OutputFileOptions, java.util.concurrent.Executor, androidx.camera.core.ImageCapture$OnImageSavedCallback)
    {
        androidx.camera.core.ImageCapture r0;
        androidx.camera.core.ImageCapture$OutputFileOptions r1;
        java.util.concurrent.Executor r2;
        androidx.camera.core.ImageCapture$OnImageSavedCallback r3;

        r0 := @this: androidx.camera.core.ImageCapture;

        r1 := @parameter0: androidx.camera.core.ImageCapture$OutputFileOptions;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: androidx.camera.core.ImageCapture$OnImageSavedCallback;

        virtualinvoke r0.<androidx.camera.core.ImageCapture: void takePicture(androidx.camera.core.ImageCapture$OutputFileOptions,java.util.concurrent.Executor,androidx.camera.core.ImageCapture$OnImageSavedCallback)>(r1, r2, r3);

        return;
    }

    private void lambda$takePicture$3(java.util.concurrent.Executor, androidx.camera.core.ImageCapture$OnImageCapturedCallback)
    {
        androidx.camera.core.ImageCapture r0;
        java.util.concurrent.Executor r1;
        androidx.camera.core.ImageCapture$OnImageCapturedCallback r2;

        r0 := @this: androidx.camera.core.ImageCapture;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: androidx.camera.core.ImageCapture$OnImageCapturedCallback;

        virtualinvoke r0.<androidx.camera.core.ImageCapture: void takePicture(java.util.concurrent.Executor,androidx.camera.core.ImageCapture$OnImageCapturedCallback)>(r1, r2);

        return;
    }

    private void lambda$createPipeline$2(java.lang.String, androidx.camera.core.impl.ImageCaptureConfig, android.util.Size, androidx.camera.core.impl.SessionConfig, androidx.camera.core.impl.SessionConfig$SessionError)
    {
        androidx.camera.core.ImageCapture r0;
        java.lang.String r1;
        androidx.camera.core.impl.ImageCaptureConfig r2;
        android.util.Size r3;
        androidx.camera.core.impl.SessionConfig r4, $r13;
        androidx.camera.core.impl.SessionConfig$SessionError r5;
        java.util.List r6, $r17;
        java.util.Iterator r7;
        androidx.camera.core.ImageCapture$ImageCaptureRequest r8;
        androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor $r9, $r11, $r15, $r16;
        boolean $z0, $z1;
        androidx.camera.core.impl.SessionConfig$Builder $r10, $r12;
        java.lang.Object $r14;

        r0 := @this: androidx.camera.core.ImageCapture;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.camera.core.impl.ImageCaptureConfig;

        r3 := @parameter2: android.util.Size;

        r4 := @parameter3: androidx.camera.core.impl.SessionConfig;

        r5 := @parameter4: androidx.camera.core.impl.SessionConfig$SessionError;

        $r9 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor mImageCaptureRequestProcessor>;

        if $r9 == null goto label1;

        $r16 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor mImageCaptureRequestProcessor>;

        $r17 = virtualinvoke $r16.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: java.util.List pullOutUnfinishedRequests()>();

        goto label2;

     label1:
        $r17 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

     label2:
        r6 = $r17;

        virtualinvoke r0.<androidx.camera.core.ImageCapture: void clearPipeline()>();

        $z0 = virtualinvoke r0.<androidx.camera.core.ImageCapture: boolean isCurrentCamera(java.lang.String)>(r1);

        if $z0 == 0 goto label5;

        $r10 = virtualinvoke r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.SessionConfig$Builder createPipeline(java.lang.String,androidx.camera.core.impl.ImageCaptureConfig,android.util.Size)>(r1, r2, r3);

        r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.SessionConfig$Builder mSessionConfigBuilder> = $r10;

        $r11 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor mImageCaptureRequestProcessor>;

        if $r11 == null goto label4;

        r7 = interfaceinvoke r6.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r14 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (androidx.camera.core.ImageCapture$ImageCaptureRequest) $r14;

        $r15 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor mImageCaptureRequestProcessor>;

        virtualinvoke $r15.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: void sendRequest(androidx.camera.core.ImageCapture$ImageCaptureRequest)>(r8);

        goto label3;

     label4:
        $r12 = r0.<androidx.camera.core.ImageCapture: androidx.camera.core.impl.SessionConfig$Builder mSessionConfigBuilder>;

        $r13 = virtualinvoke $r12.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig build()>();

        virtualinvoke r0.<androidx.camera.core.ImageCapture: void updateSessionConfig(androidx.camera.core.impl.SessionConfig)>($r13);

        virtualinvoke r0.<androidx.camera.core.ImageCapture: void notifyReset()>();

     label5:
        return;
    }

    private static void lambda$createPipeline$1(androidx.camera.core.internal.YuvToJpegProcessor, androidx.camera.core.ImageCapture$ImageCaptureRequest)
    {
        androidx.camera.core.internal.YuvToJpegProcessor r0;
        androidx.camera.core.ImageCapture$ImageCaptureRequest r1;
        int $i0, $i1, $i2;

        r0 := @parameter0: androidx.camera.core.internal.YuvToJpegProcessor;

        r1 := @parameter1: androidx.camera.core.ImageCapture$ImageCaptureRequest;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 26 goto label1;

        $i1 = r1.<androidx.camera.core.ImageCapture$ImageCaptureRequest: int mJpegQuality>;

        virtualinvoke r0.<androidx.camera.core.internal.YuvToJpegProcessor: void setJpegQuality(int)>($i1);

        $i2 = r1.<androidx.camera.core.ImageCapture$ImageCaptureRequest: int mRotationDegrees>;

        virtualinvoke r0.<androidx.camera.core.internal.YuvToJpegProcessor: void setRotationDegrees(int)>($i2);

     label1:
        return;
    }

    private static void lambda$new$0(androidx.camera.core.impl.ImageReaderProxy)
    {
        androidx.camera.core.impl.ImageReaderProxy r0;
        java.lang.Throwable r1, r2, $r7, $r8, $r9, r11;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;
        androidx.camera.core.ImageProxy r10;

        r0 := @parameter0: androidx.camera.core.impl.ImageReaderProxy;

     label01:
        r10 = interfaceinvoke r0.<androidx.camera.core.impl.ImageReaderProxy: androidx.camera.core.ImageProxy acquireLatestImage()>();

     label02:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Discarding ImageProxy which was inadvertently acquired: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ImageCapture", $r6);

     label03:
        if r10 == null goto label09;

        interfaceinvoke r10.<androidx.camera.core.ImageProxy: void close()>();

        goto label09;

     label04:
        $r9 := @caughtexception;

        r1 = $r9;

        if r10 == null goto label08;

     label05:
        interfaceinvoke r10.<androidx.camera.core.ImageProxy: void close()>();

     label06:
        goto label08;

     label07:
        $r8 := @caughtexception;

        r2 = $r8;

        virtualinvoke r1.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r2);

     label08:
        throw r1;

     label09:
        goto label11;

     label10:
        $r7 := @caughtexception;

        r11 = $r7;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ImageCapture", "Failed to acquire latest image.", r11);

     label11:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.IllegalStateException from label01 to label09 with label10;
    }

    static void <clinit>()
    {
        androidx.camera.core.ImageCapture$Defaults $r0;
        androidx.camera.core.internal.compat.workaround.ExifRotationAvailability $r1;

        $r0 = new androidx.camera.core.ImageCapture$Defaults;

        specialinvoke $r0.<androidx.camera.core.ImageCapture$Defaults: void <init>()>();

        <androidx.camera.core.ImageCapture: androidx.camera.core.ImageCapture$Defaults DEFAULT_CONFIG> = $r0;

        $r1 = new androidx.camera.core.internal.compat.workaround.ExifRotationAvailability;

        specialinvoke $r1.<androidx.camera.core.internal.compat.workaround.ExifRotationAvailability: void <init>()>();

        <androidx.camera.core.ImageCapture: androidx.camera.core.internal.compat.workaround.ExifRotationAvailability EXIF_ROTATION_AVAILABILITY> = $r1;

        return;
    }

androidx.camera.core.ImageCapture$1
<androidx.camera.core.ImageCapture$1: androidx.camera.core.ImageCapture this$0>
    void <init>(androidx.camera.core.ImageCapture)
    {
        androidx.camera.core.ImageCapture$1 r0;
        androidx.camera.core.ImageCapture r1;

        r0 := @this: androidx.camera.core.ImageCapture$1;

        r1 := @parameter0: androidx.camera.core.ImageCapture;

        r0.<androidx.camera.core.ImageCapture$1: androidx.camera.core.ImageCapture this$0> = r1;

        specialinvoke r0.<androidx.camera.core.impl.CameraCaptureCallback: void <init>()>();

        return;
    }

androidx.camera.core.ImageCapture$2
<androidx.camera.core.ImageCapture$2: androidx.camera.core.ImageCapture this$0>
    void <init>(androidx.camera.core.ImageCapture)
    {
        androidx.camera.core.ImageCapture$2 r0;
        androidx.camera.core.ImageCapture r1;

        r0 := @this: androidx.camera.core.ImageCapture$2;

        r1 := @parameter0: androidx.camera.core.ImageCapture;

        r0.<androidx.camera.core.ImageCapture$2: androidx.camera.core.ImageCapture this$0> = r1;

        specialinvoke r0.<androidx.camera.core.impl.CameraCaptureCallback: void <init>()>();

        return;
    }

androidx.camera.core.ImageCapture$3
<androidx.camera.core.ImageCapture$3: androidx.camera.core.ImageCapture$OnImageSavedCallback val$imageSavedCallback>
<androidx.camera.core.ImageCapture$3: androidx.camera.core.ImageCapture this$0>
    void <init>(androidx.camera.core.ImageCapture, androidx.camera.core.ImageCapture$OnImageSavedCallback)
    {
        androidx.camera.core.ImageCapture$3 r0;
        androidx.camera.core.ImageCapture r1;
        androidx.camera.core.ImageCapture$OnImageSavedCallback r2;

        r0 := @this: androidx.camera.core.ImageCapture$3;

        r1 := @parameter0: androidx.camera.core.ImageCapture;

        r2 := @parameter1: androidx.camera.core.ImageCapture$OnImageSavedCallback;

        r0.<androidx.camera.core.ImageCapture$3: androidx.camera.core.ImageCapture this$0> = r1;

        r0.<androidx.camera.core.ImageCapture$3: androidx.camera.core.ImageCapture$OnImageSavedCallback val$imageSavedCallback> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onImageSaved(androidx.camera.core.ImageCapture$OutputFileResults)
    {
        androidx.camera.core.ImageCapture$3 r0;
        androidx.camera.core.ImageCapture$OutputFileResults r1;
        androidx.camera.core.ImageCapture$OnImageSavedCallback $r2;

        r0 := @this: androidx.camera.core.ImageCapture$3;

        r1 := @parameter0: androidx.camera.core.ImageCapture$OutputFileResults;

        $r2 = r0.<androidx.camera.core.ImageCapture$3: androidx.camera.core.ImageCapture$OnImageSavedCallback val$imageSavedCallback>;

        interfaceinvoke $r2.<androidx.camera.core.ImageCapture$OnImageSavedCallback: void onImageSaved(androidx.camera.core.ImageCapture$OutputFileResults)>(r1);

        return;
    }

    public void onError(androidx.camera.core.ImageSaver$SaveError, java.lang.String, java.lang.Throwable)
    {
        androidx.camera.core.ImageCapture$3 r0;
        androidx.camera.core.ImageSaver$SaveError r1, $r4;
        java.lang.String r2;
        java.lang.Throwable r3;
        androidx.camera.core.ImageCaptureException $r5;
        androidx.camera.core.ImageCapture$OnImageSavedCallback $r6;
        byte b0;

        r0 := @this: androidx.camera.core.ImageCapture$3;

        r1 := @parameter0: androidx.camera.core.ImageSaver$SaveError;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Throwable;

        b0 = 0;

        $r4 = <androidx.camera.core.ImageSaver$SaveError: androidx.camera.core.ImageSaver$SaveError FILE_IO_FAILED>;

        if r1 != $r4 goto label1;

        b0 = 1;

     label1:
        $r6 = r0.<androidx.camera.core.ImageCapture$3: androidx.camera.core.ImageCapture$OnImageSavedCallback val$imageSavedCallback>;

        $r5 = new androidx.camera.core.ImageCaptureException;

        specialinvoke $r5.<androidx.camera.core.ImageCaptureException: void <init>(int,java.lang.String,java.lang.Throwable)>(b0, r2, r3);

        interfaceinvoke $r6.<androidx.camera.core.ImageCapture$OnImageSavedCallback: void onError(androidx.camera.core.ImageCaptureException)>($r5);

        return;
    }

androidx.camera.core.ImageCapture$4
<androidx.camera.core.ImageCapture$4: androidx.camera.core.ImageCapture$OutputFileOptions val$outputFileOptions>
<androidx.camera.core.ImageCapture$4: int val$outputJpegQuality>
<androidx.camera.core.ImageCapture$4: java.util.concurrent.Executor val$executor>
<androidx.camera.core.ImageCapture$4: androidx.camera.core.ImageSaver$OnImageSavedCallback val$imageSavedCallbackWrapper>
<androidx.camera.core.ImageCapture$4: androidx.camera.core.ImageCapture$OnImageSavedCallback val$imageSavedCallback>
<androidx.camera.core.ImageCapture$4: androidx.camera.core.ImageCapture this$0>
    void <init>(androidx.camera.core.ImageCapture, androidx.camera.core.ImageCapture$OutputFileOptions, int, java.util.concurrent.Executor, androidx.camera.core.ImageSaver$OnImageSavedCallback, androidx.camera.core.ImageCapture$OnImageSavedCallback)
    {
        androidx.camera.core.ImageCapture$4 r0;
        androidx.camera.core.ImageCapture r1;
        androidx.camera.core.ImageCapture$OutputFileOptions r2;
        int i0;
        java.util.concurrent.Executor r3;
        androidx.camera.core.ImageSaver$OnImageSavedCallback r4;
        androidx.camera.core.ImageCapture$OnImageSavedCallback r5;

        r0 := @this: androidx.camera.core.ImageCapture$4;

        r1 := @parameter0: androidx.camera.core.ImageCapture;

        r2 := @parameter1: androidx.camera.core.ImageCapture$OutputFileOptions;

        i0 := @parameter2: int;

        r3 := @parameter3: java.util.concurrent.Executor;

        r4 := @parameter4: androidx.camera.core.ImageSaver$OnImageSavedCallback;

        r5 := @parameter5: androidx.camera.core.ImageCapture$OnImageSavedCallback;

        r0.<androidx.camera.core.ImageCapture$4: androidx.camera.core.ImageCapture this$0> = r1;

        r0.<androidx.camera.core.ImageCapture$4: androidx.camera.core.ImageCapture$OutputFileOptions val$outputFileOptions> = r2;

        r0.<androidx.camera.core.ImageCapture$4: int val$outputJpegQuality> = i0;

        r0.<androidx.camera.core.ImageCapture$4: java.util.concurrent.Executor val$executor> = r3;

        r0.<androidx.camera.core.ImageCapture$4: androidx.camera.core.ImageSaver$OnImageSavedCallback val$imageSavedCallbackWrapper> = r4;

        r0.<androidx.camera.core.ImageCapture$4: androidx.camera.core.ImageCapture$OnImageSavedCallback val$imageSavedCallback> = r5;

        specialinvoke r0.<androidx.camera.core.ImageCapture$OnImageCapturedCallback: void <init>()>();

        return;
    }

    public void onCaptureSuccess(androidx.camera.core.ImageProxy)
    {
        androidx.camera.core.ImageCapture$4 r0;
        androidx.camera.core.ImageProxy r1;
        androidx.camera.core.ImageCapture $r2, $r7;
        androidx.camera.core.ImageSaver $r3;
        java.util.concurrent.Executor $r4, $r9, $r10;
        androidx.camera.core.ImageCapture$OutputFileOptions $r5;
        androidx.camera.core.ImageInfo $r6;
        int $i0, $i1;
        androidx.camera.core.ImageSaver$OnImageSavedCallback $r8;

        r0 := @this: androidx.camera.core.ImageCapture$4;

        r1 := @parameter0: androidx.camera.core.ImageProxy;

        $r2 = r0.<androidx.camera.core.ImageCapture$4: androidx.camera.core.ImageCapture this$0>;

        $r4 = $r2.<androidx.camera.core.ImageCapture: java.util.concurrent.Executor mIoExecutor>;

        $r3 = new androidx.camera.core.ImageSaver;

        $r5 = r0.<androidx.camera.core.ImageCapture$4: androidx.camera.core.ImageCapture$OutputFileOptions val$outputFileOptions>;

        $r6 = interfaceinvoke r1.<androidx.camera.core.ImageProxy: androidx.camera.core.ImageInfo getImageInfo()>();

        $i0 = interfaceinvoke $r6.<androidx.camera.core.ImageInfo: int getRotationDegrees()>();

        $i1 = r0.<androidx.camera.core.ImageCapture$4: int val$outputJpegQuality>;

        $r10 = r0.<androidx.camera.core.ImageCapture$4: java.util.concurrent.Executor val$executor>;

        $r7 = r0.<androidx.camera.core.ImageCapture$4: androidx.camera.core.ImageCapture this$0>;

        $r9 = $r7.<androidx.camera.core.ImageCapture: java.util.concurrent.Executor mSequentialIoExecutor>;

        $r8 = r0.<androidx.camera.core.ImageCapture$4: androidx.camera.core.ImageSaver$OnImageSavedCallback val$imageSavedCallbackWrapper>;

        specialinvoke $r3.<androidx.camera.core.ImageSaver: void <init>(androidx.camera.core.ImageProxy,androidx.camera.core.ImageCapture$OutputFileOptions,int,int,java.util.concurrent.Executor,java.util.concurrent.Executor,androidx.camera.core.ImageSaver$OnImageSavedCallback)>(r1, $r5, $i0, $i1, $r10, $r9, $r8);

        interfaceinvoke $r4.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r3);

        return;
    }

    public void onError(androidx.camera.core.ImageCaptureException)
    {
        androidx.camera.core.ImageCapture$4 r0;
        androidx.camera.core.ImageCaptureException r1;
        androidx.camera.core.ImageCapture$OnImageSavedCallback $r2;

        r0 := @this: androidx.camera.core.ImageCapture$4;

        r1 := @parameter0: androidx.camera.core.ImageCaptureException;

        $r2 = r0.<androidx.camera.core.ImageCapture$4: androidx.camera.core.ImageCapture$OnImageSavedCallback val$imageSavedCallback>;

        interfaceinvoke $r2.<androidx.camera.core.ImageCapture$OnImageSavedCallback: void onError(androidx.camera.core.ImageCaptureException)>(r1);

        return;
    }

androidx.camera.core.ImageCapture$5
<androidx.camera.core.ImageCapture$5: androidx.concurrent.futures.CallbackToFutureAdapter$Completer val$completer>
<androidx.camera.core.ImageCapture$5: androidx.camera.core.ImageCapture this$0>
    void <init>(androidx.camera.core.ImageCapture, androidx.concurrent.futures.CallbackToFutureAdapter$Completer)
    {
        androidx.camera.core.ImageCapture$5 r0;
        androidx.camera.core.ImageCapture r1;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r2;

        r0 := @this: androidx.camera.core.ImageCapture$5;

        r1 := @parameter0: androidx.camera.core.ImageCapture;

        r2 := @parameter1: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        r0.<androidx.camera.core.ImageCapture$5: androidx.camera.core.ImageCapture this$0> = r1;

        r0.<androidx.camera.core.ImageCapture$5: androidx.concurrent.futures.CallbackToFutureAdapter$Completer val$completer> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onSuccess(java.lang.Void)
    {
        androidx.camera.core.ImageCapture$5 r0;
        java.lang.Void r1;
        androidx.camera.core.ImageCapture $r2;

        r0 := @this: androidx.camera.core.ImageCapture$5;

        r1 := @parameter0: java.lang.Void;

        $r2 = r0.<androidx.camera.core.ImageCapture$5: androidx.camera.core.ImageCapture this$0>;

        virtualinvoke $r2.<androidx.camera.core.ImageCapture: void unlockFlashMode()>();

        return;
    }

    public void onFailure(java.lang.Throwable)
    {
        androidx.camera.core.ImageCapture$5 r0;
        java.lang.Throwable r1;
        androidx.camera.core.ImageCapture $r2;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer $r3;

        r0 := @this: androidx.camera.core.ImageCapture$5;

        r1 := @parameter0: java.lang.Throwable;

        $r2 = r0.<androidx.camera.core.ImageCapture$5: androidx.camera.core.ImageCapture this$0>;

        virtualinvoke $r2.<androidx.camera.core.ImageCapture: void unlockFlashMode()>();

        $r3 = r0.<androidx.camera.core.ImageCapture$5: androidx.concurrent.futures.CallbackToFutureAdapter$Completer val$completer>;

        virtualinvoke $r3.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean setException(java.lang.Throwable)>(r1);

        return;
    }

    public volatile void onSuccess(java.lang.Object)
    {
        androidx.camera.core.ImageCapture$5 r0;
        java.lang.Object r1;
        java.lang.Void $r2;

        r0 := @this: androidx.camera.core.ImageCapture$5;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Void) r1;

        virtualinvoke r0.<androidx.camera.core.ImageCapture$5: void onSuccess(java.lang.Void)>($r2);

        return;
    }

androidx.camera.core.ImageCapture$6
<androidx.camera.core.ImageCapture$6: java.util.concurrent.atomic.AtomicInteger mId>
<androidx.camera.core.ImageCapture$6: androidx.camera.core.ImageCapture this$0>
    void <init>(androidx.camera.core.ImageCapture)
    {
        androidx.camera.core.ImageCapture$6 r0;
        androidx.camera.core.ImageCapture r1;
        java.util.concurrent.atomic.AtomicInteger $r2;

        r0 := @this: androidx.camera.core.ImageCapture$6;

        r1 := @parameter0: androidx.camera.core.ImageCapture;

        r0.<androidx.camera.core.ImageCapture$6: androidx.camera.core.ImageCapture this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        r0.<androidx.camera.core.ImageCapture$6: java.util.concurrent.atomic.AtomicInteger mId> = $r2;

        return;
    }

    public java.lang.Thread newThread(java.lang.Runnable)
    {
        androidx.camera.core.ImageCapture$6 r0;
        java.lang.Runnable r1;
        java.lang.Thread $r2;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.util.concurrent.atomic.AtomicInteger $r5;
        int $i0;
        java.lang.String $r7;

        r0 := @this: androidx.camera.core.ImageCapture$6;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = new java.lang.Thread;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CameraX-image_capture_");

        $r5 = r0.<androidx.camera.core.ImageCapture$6: java.util.concurrent.atomic.AtomicInteger mId>;

        $i0 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>(r1, $r7);

        return $r2;
    }

androidx.camera.core.ImageCapture$7
<androidx.camera.core.ImageCapture$7: androidx.camera.core.ImageCapture this$0>
    void <init>(androidx.camera.core.ImageCapture)
    {
        androidx.camera.core.ImageCapture$7 r0;
        androidx.camera.core.ImageCapture r1;

        r0 := @this: androidx.camera.core.ImageCapture$7;

        r1 := @parameter0: androidx.camera.core.ImageCapture;

        r0.<androidx.camera.core.ImageCapture$7: androidx.camera.core.ImageCapture this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void lockFlashMode()
    {
        androidx.camera.core.ImageCapture$7 r0;
        androidx.camera.core.ImageCapture $r1;

        r0 := @this: androidx.camera.core.ImageCapture$7;

        $r1 = r0.<androidx.camera.core.ImageCapture$7: androidx.camera.core.ImageCapture this$0>;

        virtualinvoke $r1.<androidx.camera.core.ImageCapture: void lockFlashMode()>();

        return;
    }

    public void unlockFlashMode()
    {
        androidx.camera.core.ImageCapture$7 r0;
        androidx.camera.core.ImageCapture $r1;

        r0 := @this: androidx.camera.core.ImageCapture$7;

        $r1 = r0.<androidx.camera.core.ImageCapture$7: androidx.camera.core.ImageCapture this$0>;

        virtualinvoke $r1.<androidx.camera.core.ImageCapture: void unlockFlashMode()>();

        return;
    }

    public com.google.common.util.concurrent.ListenableFuture submitStillCaptureRequests(java.util.List)
    {
        androidx.camera.core.ImageCapture$7 r0;
        java.util.List r1;
        androidx.camera.core.ImageCapture $r2;
        com.google.common.util.concurrent.ListenableFuture $r3;

        r0 := @this: androidx.camera.core.ImageCapture$7;

        r1 := @parameter0: java.util.List;

        $r2 = r0.<androidx.camera.core.ImageCapture$7: androidx.camera.core.ImageCapture this$0>;

        $r3 = virtualinvoke $r2.<androidx.camera.core.ImageCapture: com.google.common.util.concurrent.ListenableFuture submitStillCaptureRequest(java.util.List)>(r1);

        return $r3;
    }

androidx.camera.core.ImageCapture$Builder
<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.MutableOptionsBundle mMutableConfig>
    public void <init>()
    {
        androidx.camera.core.ImageCapture$Builder r0;
        androidx.camera.core.impl.MutableOptionsBundle $r1;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        $r1 = staticinvoke <androidx.camera.core.impl.MutableOptionsBundle: androidx.camera.core.impl.MutableOptionsBundle create()>();

        specialinvoke r0.<androidx.camera.core.ImageCapture$Builder: void <init>(androidx.camera.core.impl.MutableOptionsBundle)>($r1);

        return;
    }

    private void <init>(androidx.camera.core.impl.MutableOptionsBundle)
    {
        androidx.camera.core.ImageCapture$Builder r0;
        androidx.camera.core.impl.MutableOptionsBundle r1;
        java.lang.Class r2;
        androidx.camera.core.impl.Config$Option $r3;
        java.lang.Object $r4;
        boolean $z0;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11;
        java.lang.String $r12;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        r1 := @parameter0: androidx.camera.core.impl.MutableOptionsBundle;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.MutableOptionsBundle mMutableConfig> = r1;

        $r3 = <androidx.camera.core.internal.TargetConfig: androidx.camera.core.impl.Config$Option OPTION_TARGET_CLASS>;

        $r4 = virtualinvoke r1.<androidx.camera.core.impl.MutableOptionsBundle: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, null);

        r2 = (java.lang.Class) $r4;

        if r2 == null goto label1;

        $z0 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>(class "Landroidx/camera/core/ImageCapture;");

        if $z0 != 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid target class configuration for ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r6;

     label1:
        virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.ImageCapture$Builder setTargetClass(java.lang.Class)>(class "Landroidx/camera/core/ImageCapture;");

        return;
    }

    public static androidx.camera.core.ImageCapture$Builder fromConfig(androidx.camera.core.impl.Config)
    {
        androidx.camera.core.impl.Config r0;
        androidx.camera.core.ImageCapture$Builder $r1;
        androidx.camera.core.impl.MutableOptionsBundle $r2;

        r0 := @parameter0: androidx.camera.core.impl.Config;

        $r1 = new androidx.camera.core.ImageCapture$Builder;

        $r2 = staticinvoke <androidx.camera.core.impl.MutableOptionsBundle: androidx.camera.core.impl.MutableOptionsBundle 'from'(androidx.camera.core.impl.Config)>(r0);

        specialinvoke $r1.<androidx.camera.core.ImageCapture$Builder: void <init>(androidx.camera.core.impl.MutableOptionsBundle)>($r2);

        return $r1;
    }

    static androidx.camera.core.ImageCapture$Builder fromConfig(androidx.camera.core.impl.ImageCaptureConfig)
    {
        androidx.camera.core.impl.ImageCaptureConfig r0;
        androidx.camera.core.ImageCapture$Builder $r1;
        androidx.camera.core.impl.MutableOptionsBundle $r2;

        r0 := @parameter0: androidx.camera.core.impl.ImageCaptureConfig;

        $r1 = new androidx.camera.core.ImageCapture$Builder;

        $r2 = staticinvoke <androidx.camera.core.impl.MutableOptionsBundle: androidx.camera.core.impl.MutableOptionsBundle 'from'(androidx.camera.core.impl.Config)>(r0);

        specialinvoke $r1.<androidx.camera.core.ImageCapture$Builder: void <init>(androidx.camera.core.impl.MutableOptionsBundle)>($r2);

        return $r1;
    }

    public androidx.camera.core.impl.MutableConfig getMutableConfig()
    {
        androidx.camera.core.ImageCapture$Builder r0;
        androidx.camera.core.impl.MutableOptionsBundle $r1;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        $r1 = r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.MutableOptionsBundle mMutableConfig>;

        return $r1;
    }

    public androidx.camera.core.impl.ImageCaptureConfig getUseCaseConfig()
    {
        androidx.camera.core.ImageCapture$Builder r0;
        androidx.camera.core.impl.ImageCaptureConfig $r1;
        androidx.camera.core.impl.MutableOptionsBundle $r2;
        androidx.camera.core.impl.OptionsBundle $r3;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        $r1 = new androidx.camera.core.impl.ImageCaptureConfig;

        $r2 = r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.MutableOptionsBundle mMutableConfig>;

        $r3 = staticinvoke <androidx.camera.core.impl.OptionsBundle: androidx.camera.core.impl.OptionsBundle 'from'(androidx.camera.core.impl.Config)>($r2);

        specialinvoke $r1.<androidx.camera.core.impl.ImageCaptureConfig: void <init>(androidx.camera.core.impl.OptionsBundle)>($r3);

        return $r1;
    }

    public androidx.camera.core.ImageCapture build()
    {
        androidx.camera.core.ImageCapture$Builder r0;
        java.lang.Integer r1, r4, r5, $r17, $r20, $r42;
        androidx.camera.core.ImageCapture r2, $r52;
        android.util.Size r3;
        androidx.camera.core.impl.MutableConfig $r6, $r9, $r12, $r15, $r18, $r23, $r29, $r31, $r40, $r43, $r46, $r48, $r54;
        androidx.camera.core.impl.Config$Option $r7, $r10, $r13, $r16, $r19, $r24, $r30, $r32, $r41, $r44, $r47, $r49, $r55;
        java.lang.Object $r8, $r11, $r14, $r21, $r26, $r33, $r45, $r50, $r56;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.util.concurrent.Executor $r25, $r27;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r34, $r51;
        java.lang.StringBuilder $r35, $r36, $r37;
        java.lang.String $r38;
        android.util.Rational $r39;
        androidx.camera.core.impl.ImageCaptureConfig $r53;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        $r6 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r7 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_TARGET_ASPECT_RATIO>;

        $r8 = interfaceinvoke $r6.<androidx.camera.core.impl.MutableConfig: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r7, null);

        if $r8 == null goto label01;

        $r48 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r49 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_TARGET_RESOLUTION>;

        $r50 = interfaceinvoke $r48.<androidx.camera.core.impl.MutableConfig: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r49, null);

        if $r50 == null goto label01;

        $r51 = new java.lang.IllegalArgumentException;

        specialinvoke $r51.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot use both setTargetResolution and setTargetAspectRatio on the same config.");

        throw $r51;

     label01:
        $r9 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r10 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_BUFFER_FORMAT>;

        $r11 = interfaceinvoke $r9.<androidx.camera.core.impl.MutableConfig: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r10, null);

        r1 = (java.lang.Integer) $r11;

        if r1 == null goto label04;

        $r43 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r44 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_CAPTURE_PROCESSOR>;

        $r45 = interfaceinvoke $r43.<androidx.camera.core.impl.MutableConfig: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r44, null);

        if $r45 != null goto label02;

        $z1 = 1;

        goto label03;

     label02:
        $z1 = 0;

     label03:
        staticinvoke <androidx.core.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "Cannot set buffer format with CaptureProcessor defined.");

        $r46 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r47 = <androidx.camera.core.impl.ImageInputConfig: androidx.camera.core.impl.Config$Option OPTION_INPUT_FORMAT>;

        interfaceinvoke $r46.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r47, r1);

        goto label06;

     label04:
        $r12 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r13 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_CAPTURE_PROCESSOR>;

        $r14 = interfaceinvoke $r12.<androidx.camera.core.impl.MutableConfig: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r13, null);

        if $r14 == null goto label05;

        $r40 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r41 = <androidx.camera.core.impl.ImageInputConfig: androidx.camera.core.impl.Config$Option OPTION_INPUT_FORMAT>;

        $r42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(35);

        interfaceinvoke $r40.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r41, $r42);

        goto label06;

     label05:
        $r15 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r16 = <androidx.camera.core.impl.ImageInputConfig: androidx.camera.core.impl.Config$Option OPTION_INPUT_FORMAT>;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(256);

        interfaceinvoke $r15.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r16, $r17);

     label06:
        $r52 = new androidx.camera.core.ImageCapture;

        $r53 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.ImageCaptureConfig getUseCaseConfig()>();

        specialinvoke $r52.<androidx.camera.core.ImageCapture: void <init>(androidx.camera.core.impl.ImageCaptureConfig)>($r53);

        r2 = $r52;

        $r54 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r55 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_TARGET_RESOLUTION>;

        $r56 = interfaceinvoke $r54.<androidx.camera.core.impl.MutableConfig: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r55, null);

        r3 = (android.util.Size) $r56;

        if r3 == null goto label07;

        $r39 = new android.util.Rational;

        $i4 = virtualinvoke r3.<android.util.Size: int getWidth()>();

        $i5 = virtualinvoke r3.<android.util.Size: int getHeight()>();

        specialinvoke $r39.<android.util.Rational: void <init>(int,int)>($i4, $i5);

        virtualinvoke r2.<androidx.camera.core.ImageCapture: void setCropAspectRatio(android.util.Rational)>($r39);

     label07:
        $r18 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r19 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_MAX_CAPTURE_STAGES>;

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r21 = interfaceinvoke $r18.<androidx.camera.core.impl.MutableConfig: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r19, $r20);

        r4 = (java.lang.Integer) $r21;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r4, "Maximum outstanding image count must be at least 1");

        $i0 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        if $i0 < 1 goto label08;

        $z2 = 1;

        goto label09;

     label08:
        $z2 = 0;

     label09:
        staticinvoke <androidx.core.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z2, "Maximum outstanding image count must be at least 1");

        $r23 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r24 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_IO_EXECUTOR>;

        $r25 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor ioExecutor()>();

        $r26 = interfaceinvoke $r23.<androidx.camera.core.impl.MutableConfig: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r24, $r25);

        $r27 = (java.util.concurrent.Executor) $r26;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r27, "The IO executor can\'t be null");

        $r29 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r30 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_FLASH_MODE>;

        $z0 = interfaceinvoke $r29.<androidx.camera.core.impl.MutableConfig: boolean containsOption(androidx.camera.core.impl.Config$Option)>($r30);

        if $z0 == 0 goto label11;

        $r31 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r32 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_FLASH_MODE>;

        $r33 = interfaceinvoke $r31.<androidx.camera.core.impl.MutableConfig: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option)>($r32);

        r5 = (java.lang.Integer) $r33;

        if r5 == null goto label10;

        $i1 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        if $i1 == 0 goto label11;

        $i2 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        if $i2 == 1 goto label11;

        $i3 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        if $i3 == 2 goto label11;

     label10:
        $r34 = new java.lang.IllegalArgumentException;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The flash mode is not allowed to set: ");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r34.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r38);

        throw $r34;

     label11:
        return r2;
    }

    public androidx.camera.core.ImageCapture$Builder setCaptureMode(int)
    {
        androidx.camera.core.ImageCapture$Builder r0;
        int i0;
        androidx.camera.core.impl.MutableConfig $r1;
        androidx.camera.core.impl.Config$Option $r2;
        java.lang.Integer $r3;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r2 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_IMAGE_CAPTURE_MODE>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r1.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r2, $r3);

        return r0;
    }

    public androidx.camera.core.ImageCapture$Builder setFlashMode(int)
    {
        androidx.camera.core.ImageCapture$Builder r0;
        int i0;
        androidx.camera.core.impl.MutableConfig $r1;
        androidx.camera.core.impl.Config$Option $r2;
        java.lang.Integer $r3;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r2 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_FLASH_MODE>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r1.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r2, $r3);

        return r0;
    }

    public androidx.camera.core.ImageCapture$Builder setCaptureBundle(androidx.camera.core.impl.CaptureBundle)
    {
        androidx.camera.core.ImageCapture$Builder r0;
        androidx.camera.core.impl.CaptureBundle r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        r1 := @parameter0: androidx.camera.core.impl.CaptureBundle;

        $r2 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_CAPTURE_BUNDLE>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    public androidx.camera.core.ImageCapture$Builder setCaptureProcessor(androidx.camera.core.impl.CaptureProcessor)
    {
        androidx.camera.core.ImageCapture$Builder r0;
        androidx.camera.core.impl.CaptureProcessor r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        r1 := @parameter0: androidx.camera.core.impl.CaptureProcessor;

        $r2 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_CAPTURE_PROCESSOR>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    public androidx.camera.core.ImageCapture$Builder setBufferFormat(int)
    {
        androidx.camera.core.ImageCapture$Builder r0;
        int i0;
        androidx.camera.core.impl.MutableConfig $r1;
        androidx.camera.core.impl.Config$Option $r2;
        java.lang.Integer $r3;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r2 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_BUFFER_FORMAT>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r1.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r2, $r3);

        return r0;
    }

    public androidx.camera.core.ImageCapture$Builder setMaxCaptureStages(int)
    {
        androidx.camera.core.ImageCapture$Builder r0;
        int i0;
        androidx.camera.core.impl.MutableConfig $r1;
        androidx.camera.core.impl.Config$Option $r2;
        java.lang.Integer $r3;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r2 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_MAX_CAPTURE_STAGES>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r1.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r2, $r3);

        return r0;
    }

    public androidx.camera.core.ImageCapture$Builder setSupportedResolutions(java.util.List)
    {
        androidx.camera.core.ImageCapture$Builder r0;
        java.util.List r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        r1 := @parameter0: java.util.List;

        $r2 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_SUPPORTED_RESOLUTIONS>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    public androidx.camera.core.ImageCapture$Builder setTargetClass(java.lang.Class)
    {
        androidx.camera.core.ImageCapture$Builder r0;
        java.lang.Class r1;
        java.lang.String r2, $r9;
        androidx.camera.core.impl.MutableConfig $r3, $r5;
        androidx.camera.core.impl.Config$Option $r4, $r6;
        java.lang.Object $r7;
        java.lang.StringBuilder $r8, $r10, $r11, $r13;
        java.util.UUID $r12;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        r1 := @parameter0: java.lang.Class;

        $r3 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r4 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_TARGET_CLASS>;

        interfaceinvoke $r3.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r4, r1);

        $r5 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r6 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_TARGET_NAME>;

        $r7 = interfaceinvoke $r5.<androidx.camera.core.impl.MutableConfig: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r6, null);

        if null != $r7 goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke r1.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r12 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        r2 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.ImageCapture$Builder setTargetName(java.lang.String)>(r2);

     label1:
        return r0;
    }

    public androidx.camera.core.ImageCapture$Builder setTargetName(java.lang.String)
    {
        androidx.camera.core.ImageCapture$Builder r0;
        java.lang.String r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_TARGET_NAME>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    public androidx.camera.core.ImageCapture$Builder setTargetAspectRatio(int)
    {
        androidx.camera.core.ImageCapture$Builder r0;
        int i0;
        androidx.camera.core.impl.MutableConfig $r1;
        androidx.camera.core.impl.Config$Option $r2;
        java.lang.Integer $r3;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r2 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_TARGET_ASPECT_RATIO>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r1.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r2, $r3);

        return r0;
    }

    public androidx.camera.core.ImageCapture$Builder setTargetRotation(int)
    {
        androidx.camera.core.ImageCapture$Builder r0;
        int i0;
        androidx.camera.core.impl.MutableConfig $r1;
        androidx.camera.core.impl.Config$Option $r2;
        java.lang.Integer $r3;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r2 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_TARGET_ROTATION>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r1.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r2, $r3);

        return r0;
    }

    public androidx.camera.core.ImageCapture$Builder setTargetResolution(android.util.Size)
    {
        androidx.camera.core.ImageCapture$Builder r0;
        android.util.Size r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        r1 := @parameter0: android.util.Size;

        $r2 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_TARGET_RESOLUTION>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    public androidx.camera.core.ImageCapture$Builder setDefaultResolution(android.util.Size)
    {
        androidx.camera.core.ImageCapture$Builder r0;
        android.util.Size r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        r1 := @parameter0: android.util.Size;

        $r2 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.impl.ImageOutputConfig: androidx.camera.core.impl.Config$Option OPTION_DEFAULT_RESOLUTION>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    public androidx.camera.core.ImageCapture$Builder setMaxResolution(android.util.Size)
    {
        androidx.camera.core.ImageCapture$Builder r0;
        android.util.Size r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        r1 := @parameter0: android.util.Size;

        $r2 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_MAX_RESOLUTION>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    public androidx.camera.core.ImageCapture$Builder setImageReaderProxyProvider(androidx.camera.core.ImageReaderProxyProvider)
    {
        androidx.camera.core.ImageCapture$Builder r0;
        androidx.camera.core.ImageReaderProxyProvider r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        r1 := @parameter0: androidx.camera.core.ImageReaderProxyProvider;

        $r2 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_IMAGE_READER_PROXY_PROVIDER>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    public androidx.camera.core.ImageCapture$Builder setSoftwareJpegEncoderRequested(boolean)
    {
        androidx.camera.core.ImageCapture$Builder r0;
        boolean z0;
        androidx.camera.core.impl.MutableConfig $r1;
        androidx.camera.core.impl.Config$Option $r2;
        java.lang.Boolean $r3;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r2 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_USE_SOFTWARE_JPEG_ENCODER>;

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        interfaceinvoke $r1.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r2, $r3);

        return r0;
    }

    public androidx.camera.core.ImageCapture$Builder setFlashType(int)
    {
        androidx.camera.core.ImageCapture$Builder r0;
        int i0;
        androidx.camera.core.impl.MutableConfig $r1;
        androidx.camera.core.impl.Config$Option $r2;
        java.lang.Integer $r3;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r2 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_FLASH_TYPE>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r1.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r2, $r3);

        return r0;
    }

    public androidx.camera.core.ImageCapture$Builder setJpegQuality(int)
    {
        androidx.camera.core.ImageCapture$Builder r0;
        int i0;
        androidx.camera.core.impl.MutableConfig $r1;
        androidx.camera.core.impl.Config$Option $r2;
        java.lang.Integer $r3;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        i0 := @parameter0: int;

        staticinvoke <androidx.core.util.Preconditions: int checkArgumentInRange(int,int,int,java.lang.String)>(i0, 1, 100, "jpegQuality");

        $r1 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r2 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_JPEG_COMPRESSION_QUALITY>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r1.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r2, $r3);

        return r0;
    }

    public androidx.camera.core.ImageCapture$Builder setIoExecutor(java.util.concurrent.Executor)
    {
        androidx.camera.core.ImageCapture$Builder r0;
        java.util.concurrent.Executor r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        r1 := @parameter0: java.util.concurrent.Executor;

        $r2 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_IO_EXECUTOR>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    public androidx.camera.core.ImageCapture$Builder setDefaultSessionConfig(androidx.camera.core.impl.SessionConfig)
    {
        androidx.camera.core.ImageCapture$Builder r0;
        androidx.camera.core.impl.SessionConfig r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        r1 := @parameter0: androidx.camera.core.impl.SessionConfig;

        $r2 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_DEFAULT_SESSION_CONFIG>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    public androidx.camera.core.ImageCapture$Builder setDefaultCaptureConfig(androidx.camera.core.impl.CaptureConfig)
    {
        androidx.camera.core.ImageCapture$Builder r0;
        androidx.camera.core.impl.CaptureConfig r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        r1 := @parameter0: androidx.camera.core.impl.CaptureConfig;

        $r2 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_DEFAULT_CAPTURE_CONFIG>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    public androidx.camera.core.ImageCapture$Builder setSessionOptionUnpacker(androidx.camera.core.impl.SessionConfig$OptionUnpacker)
    {
        androidx.camera.core.ImageCapture$Builder r0;
        androidx.camera.core.impl.SessionConfig$OptionUnpacker r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        r1 := @parameter0: androidx.camera.core.impl.SessionConfig$OptionUnpacker;

        $r2 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_SESSION_CONFIG_UNPACKER>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    public androidx.camera.core.ImageCapture$Builder setCaptureOptionUnpacker(androidx.camera.core.impl.CaptureConfig$OptionUnpacker)
    {
        androidx.camera.core.ImageCapture$Builder r0;
        androidx.camera.core.impl.CaptureConfig$OptionUnpacker r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        r1 := @parameter0: androidx.camera.core.impl.CaptureConfig$OptionUnpacker;

        $r2 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_CAPTURE_CONFIG_UNPACKER>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    public androidx.camera.core.ImageCapture$Builder setCameraSelector(androidx.camera.core.CameraSelector)
    {
        androidx.camera.core.ImageCapture$Builder r0;
        androidx.camera.core.CameraSelector r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        r1 := @parameter0: androidx.camera.core.CameraSelector;

        $r2 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.impl.UseCaseConfig: androidx.camera.core.impl.Config$Option OPTION_CAMERA_SELECTOR>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    public androidx.camera.core.ImageCapture$Builder setSurfaceOccupancyPriority(int)
    {
        androidx.camera.core.ImageCapture$Builder r0;
        int i0;
        androidx.camera.core.impl.MutableConfig $r1;
        androidx.camera.core.impl.Config$Option $r2;
        java.lang.Integer $r3;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r2 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_SURFACE_OCCUPANCY_PRIORITY>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r1.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r2, $r3);

        return r0;
    }

    public androidx.camera.core.ImageCapture$Builder setUseCaseEventCallback(androidx.camera.core.UseCase$EventCallback)
    {
        androidx.camera.core.ImageCapture$Builder r0;
        androidx.camera.core.UseCase$EventCallback r1;
        androidx.camera.core.impl.MutableConfig $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        r1 := @parameter0: androidx.camera.core.UseCase$EventCallback;

        $r2 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r3 = <androidx.camera.core.impl.ImageCaptureConfig: androidx.camera.core.impl.Config$Option OPTION_USE_CASE_EVENT_CALLBACK>;

        interfaceinvoke $r2.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, r1);

        return r0;
    }

    public androidx.camera.core.ImageCapture$Builder setZslDisabled(boolean)
    {
        androidx.camera.core.ImageCapture$Builder r0;
        boolean z0;
        androidx.camera.core.impl.MutableConfig $r1;
        androidx.camera.core.impl.Config$Option $r2;
        java.lang.Boolean $r3;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r2 = <androidx.camera.core.impl.UseCaseConfig: androidx.camera.core.impl.Config$Option OPTION_ZSL_DISABLED>;

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        interfaceinvoke $r1.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r2, $r3);

        return r0;
    }

    public volatile androidx.camera.core.impl.UseCaseConfig getUseCaseConfig()
    {
        androidx.camera.core.ImageCapture$Builder r0;
        androidx.camera.core.impl.ImageCaptureConfig $r1;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        $r1 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.ImageCaptureConfig getUseCaseConfig()>();

        return $r1;
    }

    public volatile java.lang.Object setZslDisabled(boolean)
    {
        androidx.camera.core.ImageCapture$Builder r0, $r1;
        boolean z0;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.ImageCapture$Builder setZslDisabled(boolean)>(z0);

        return $r1;
    }

    public volatile java.lang.Object setCameraSelector(androidx.camera.core.CameraSelector)
    {
        androidx.camera.core.ImageCapture$Builder r0, $r2;
        androidx.camera.core.CameraSelector r1;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        r1 := @parameter0: androidx.camera.core.CameraSelector;

        $r2 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.ImageCapture$Builder setCameraSelector(androidx.camera.core.CameraSelector)>(r1);

        return $r2;
    }

    public volatile java.lang.Object setSurfaceOccupancyPriority(int)
    {
        androidx.camera.core.ImageCapture$Builder r0, $r1;
        int i0;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.ImageCapture$Builder setSurfaceOccupancyPriority(int)>(i0);

        return $r1;
    }

    public volatile java.lang.Object setCaptureOptionUnpacker(androidx.camera.core.impl.CaptureConfig$OptionUnpacker)
    {
        androidx.camera.core.ImageCapture$Builder r0, $r2;
        androidx.camera.core.impl.CaptureConfig$OptionUnpacker r1;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        r1 := @parameter0: androidx.camera.core.impl.CaptureConfig$OptionUnpacker;

        $r2 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.ImageCapture$Builder setCaptureOptionUnpacker(androidx.camera.core.impl.CaptureConfig$OptionUnpacker)>(r1);

        return $r2;
    }

    public volatile java.lang.Object setSessionOptionUnpacker(androidx.camera.core.impl.SessionConfig$OptionUnpacker)
    {
        androidx.camera.core.ImageCapture$Builder r0, $r2;
        androidx.camera.core.impl.SessionConfig$OptionUnpacker r1;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        r1 := @parameter0: androidx.camera.core.impl.SessionConfig$OptionUnpacker;

        $r2 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.ImageCapture$Builder setSessionOptionUnpacker(androidx.camera.core.impl.SessionConfig$OptionUnpacker)>(r1);

        return $r2;
    }

    public volatile java.lang.Object setDefaultCaptureConfig(androidx.camera.core.impl.CaptureConfig)
    {
        androidx.camera.core.ImageCapture$Builder r0, $r2;
        androidx.camera.core.impl.CaptureConfig r1;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        r1 := @parameter0: androidx.camera.core.impl.CaptureConfig;

        $r2 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.ImageCapture$Builder setDefaultCaptureConfig(androidx.camera.core.impl.CaptureConfig)>(r1);

        return $r2;
    }

    public volatile java.lang.Object setDefaultSessionConfig(androidx.camera.core.impl.SessionConfig)
    {
        androidx.camera.core.ImageCapture$Builder r0, $r2;
        androidx.camera.core.impl.SessionConfig r1;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        r1 := @parameter0: androidx.camera.core.impl.SessionConfig;

        $r2 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.ImageCapture$Builder setDefaultSessionConfig(androidx.camera.core.impl.SessionConfig)>(r1);

        return $r2;
    }

    public volatile java.lang.Object setTargetName(java.lang.String)
    {
        androidx.camera.core.ImageCapture$Builder r0, $r2;
        java.lang.String r1;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.ImageCapture$Builder setTargetName(java.lang.String)>(r1);

        return $r2;
    }

    public volatile java.lang.Object setTargetClass(java.lang.Class)
    {
        androidx.camera.core.ImageCapture$Builder r0, $r2;
        java.lang.Class r1;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.ImageCapture$Builder setTargetClass(java.lang.Class)>(r1);

        return $r2;
    }

    public volatile java.lang.Object build()
    {
        androidx.camera.core.ImageCapture$Builder r0;
        androidx.camera.core.ImageCapture $r1;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        $r1 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.ImageCapture build()>();

        return $r1;
    }

    public volatile java.lang.Object setUseCaseEventCallback(androidx.camera.core.UseCase$EventCallback)
    {
        androidx.camera.core.ImageCapture$Builder r0, $r2;
        androidx.camera.core.UseCase$EventCallback r1;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        r1 := @parameter0: androidx.camera.core.UseCase$EventCallback;

        $r2 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.ImageCapture$Builder setUseCaseEventCallback(androidx.camera.core.UseCase$EventCallback)>(r1);

        return $r2;
    }

    public volatile java.lang.Object setSupportedResolutions(java.util.List)
    {
        androidx.camera.core.ImageCapture$Builder r0, $r2;
        java.util.List r1;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        r1 := @parameter0: java.util.List;

        $r2 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.ImageCapture$Builder setSupportedResolutions(java.util.List)>(r1);

        return $r2;
    }

    public volatile java.lang.Object setMaxResolution(android.util.Size)
    {
        androidx.camera.core.ImageCapture$Builder r0, $r2;
        android.util.Size r1;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        r1 := @parameter0: android.util.Size;

        $r2 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.ImageCapture$Builder setMaxResolution(android.util.Size)>(r1);

        return $r2;
    }

    public volatile java.lang.Object setDefaultResolution(android.util.Size)
    {
        androidx.camera.core.ImageCapture$Builder r0, $r2;
        android.util.Size r1;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        r1 := @parameter0: android.util.Size;

        $r2 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.ImageCapture$Builder setDefaultResolution(android.util.Size)>(r1);

        return $r2;
    }

    public volatile java.lang.Object setTargetResolution(android.util.Size)
    {
        androidx.camera.core.ImageCapture$Builder r0, $r2;
        android.util.Size r1;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        r1 := @parameter0: android.util.Size;

        $r2 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.ImageCapture$Builder setTargetResolution(android.util.Size)>(r1);

        return $r2;
    }

    public volatile java.lang.Object setTargetRotation(int)
    {
        androidx.camera.core.ImageCapture$Builder r0, $r1;
        int i0;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.ImageCapture$Builder setTargetRotation(int)>(i0);

        return $r1;
    }

    public volatile java.lang.Object setTargetAspectRatio(int)
    {
        androidx.camera.core.ImageCapture$Builder r0, $r1;
        int i0;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.ImageCapture$Builder setTargetAspectRatio(int)>(i0);

        return $r1;
    }

    public volatile java.lang.Object setIoExecutor(java.util.concurrent.Executor)
    {
        androidx.camera.core.ImageCapture$Builder r0, $r2;
        java.util.concurrent.Executor r1;

        r0 := @this: androidx.camera.core.ImageCapture$Builder;

        r1 := @parameter0: java.util.concurrent.Executor;

        $r2 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.ImageCapture$Builder setIoExecutor(java.util.concurrent.Executor)>(r1);

        return $r2;
    }

androidx.camera.core.ImageCapture$CaptureMode
androidx.camera.core.ImageCapture$Defaults
<androidx.camera.core.ImageCapture$Defaults: int DEFAULT_SURFACE_OCCUPANCY_PRIORITY>
<androidx.camera.core.ImageCapture$Defaults: int DEFAULT_ASPECT_RATIO>
<androidx.camera.core.ImageCapture$Defaults: androidx.camera.core.impl.ImageCaptureConfig DEFAULT_CONFIG>
    public void <init>()
    {
        androidx.camera.core.ImageCapture$Defaults r0;

        r0 := @this: androidx.camera.core.ImageCapture$Defaults;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public androidx.camera.core.impl.ImageCaptureConfig getConfig()
    {
        androidx.camera.core.ImageCapture$Defaults r0;
        androidx.camera.core.impl.ImageCaptureConfig $r1;

        r0 := @this: androidx.camera.core.ImageCapture$Defaults;

        $r1 = <androidx.camera.core.ImageCapture$Defaults: androidx.camera.core.impl.ImageCaptureConfig DEFAULT_CONFIG>;

        return $r1;
    }

    public volatile androidx.camera.core.impl.Config getConfig()
    {
        androidx.camera.core.ImageCapture$Defaults r0;
        androidx.camera.core.impl.ImageCaptureConfig $r1;

        r0 := @this: androidx.camera.core.ImageCapture$Defaults;

        $r1 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Defaults: androidx.camera.core.impl.ImageCaptureConfig getConfig()>();

        return $r1;
    }

    static void <clinit>()
    {
        androidx.camera.core.ImageCapture$Builder r0, $r1, $r2;
        androidx.camera.core.impl.ImageCaptureConfig $r3;

        $r1 = new androidx.camera.core.ImageCapture$Builder;

        specialinvoke $r1.<androidx.camera.core.ImageCapture$Builder: void <init>()>();

        $r2 = virtualinvoke $r1.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.ImageCapture$Builder setSurfaceOccupancyPriority(int)>(4);

        r0 = virtualinvoke $r2.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.ImageCapture$Builder setTargetAspectRatio(int)>(0);

        $r3 = virtualinvoke r0.<androidx.camera.core.ImageCapture$Builder: androidx.camera.core.impl.ImageCaptureConfig getUseCaseConfig()>();

        <androidx.camera.core.ImageCapture$Defaults: androidx.camera.core.impl.ImageCaptureConfig DEFAULT_CONFIG> = $r3;

        return;
    }

androidx.camera.core.ImageCapture$FlashMode
androidx.camera.core.ImageCapture$FlashType
androidx.camera.core.ImageCapture$ImageCaptureError
androidx.camera.core.ImageCapture$ImageCaptureRequest
<androidx.camera.core.ImageCapture$ImageCaptureRequest: int mRotationDegrees>
<androidx.camera.core.ImageCapture$ImageCaptureRequest: int mJpegQuality>
<androidx.camera.core.ImageCapture$ImageCaptureRequest: android.util.Rational mTargetRatio>
<androidx.camera.core.ImageCapture$ImageCaptureRequest: java.util.concurrent.Executor mListenerExecutor>
<androidx.camera.core.ImageCapture$ImageCaptureRequest: androidx.camera.core.ImageCapture$OnImageCapturedCallback mCallback>
<androidx.camera.core.ImageCapture$ImageCaptureRequest: java.util.concurrent.atomic.AtomicBoolean mDispatched>
<androidx.camera.core.ImageCapture$ImageCaptureRequest: android.graphics.Rect mViewPortCropRect>
<androidx.camera.core.ImageCapture$ImageCaptureRequest: android.graphics.Matrix mSensorToBufferTransformMatrix>
    void <init>(int, int, android.util.Rational, android.graphics.Rect, android.graphics.Matrix, java.util.concurrent.Executor, androidx.camera.core.ImageCapture$OnImageCapturedCallback)
    {
        androidx.camera.core.ImageCapture$ImageCaptureRequest r0;
        int i0, i1;
        android.util.Rational r1;
        android.graphics.Rect r2;
        android.graphics.Matrix r3;
        java.util.concurrent.Executor r4;
        androidx.camera.core.ImageCapture$OnImageCapturedCallback r5;
        java.util.concurrent.atomic.AtomicBoolean $r6;
        boolean $z0, $z1, $z2;
        float $f0;
        byte $b2;

        r0 := @this: androidx.camera.core.ImageCapture$ImageCaptureRequest;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.util.Rational;

        r2 := @parameter3: android.graphics.Rect;

        r3 := @parameter4: android.graphics.Matrix;

        r4 := @parameter5: java.util.concurrent.Executor;

        r5 := @parameter6: androidx.camera.core.ImageCapture$OnImageCapturedCallback;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r6 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r6.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<androidx.camera.core.ImageCapture$ImageCaptureRequest: java.util.concurrent.atomic.AtomicBoolean mDispatched> = $r6;

        r0.<androidx.camera.core.ImageCapture$ImageCaptureRequest: int mRotationDegrees> = i0;

        r0.<androidx.camera.core.ImageCapture$ImageCaptureRequest: int mJpegQuality> = i1;

        if r1 == null goto label5;

        $z0 = virtualinvoke r1.<android.util.Rational: boolean isZero()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <androidx.core.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "Target ratio cannot be zero");

        $f0 = virtualinvoke r1.<android.util.Rational: float floatValue()>();

        $b2 = $f0 cmpl 0.0F;

        if $b2 <= 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        staticinvoke <androidx.core.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z2, "Target ratio must be positive");

     label5:
        r0.<androidx.camera.core.ImageCapture$ImageCaptureRequest: android.util.Rational mTargetRatio> = r1;

        r0.<androidx.camera.core.ImageCapture$ImageCaptureRequest: android.graphics.Rect mViewPortCropRect> = r2;

        r0.<androidx.camera.core.ImageCapture$ImageCaptureRequest: android.graphics.Matrix mSensorToBufferTransformMatrix> = r3;

        r0.<androidx.camera.core.ImageCapture$ImageCaptureRequest: java.util.concurrent.Executor mListenerExecutor> = r4;

        r0.<androidx.camera.core.ImageCapture$ImageCaptureRequest: androidx.camera.core.ImageCapture$OnImageCapturedCallback mCallback> = r5;

        return;
    }

    void dispatchImage(androidx.camera.core.ImageProxy)
    {
        androidx.camera.core.ImageCapture$ImageCaptureRequest r0;
        androidx.camera.core.ImageProxy r1;
        java.util.concurrent.atomic.AtomicBoolean $r2;
        boolean $z0, $z1;
        androidx.camera.core.internal.compat.workaround.ExifRotationAvailability $r3;
        android.util.Size $r4, $r19, r26;
        int $i0, $i1, $i3, $i4, $i5, $i6, i7;
        androidx.camera.core.ImageInfo $r5, $r7, r28;
        androidx.camera.core.impl.TagBundle $r6;
        long $l2;
        android.graphics.Matrix $r8;
        androidx.camera.core.SettableImageProxy $r9, r29;
        android.util.Rational $r10;
        android.graphics.Rect $r11, r30;
        java.util.concurrent.Executor $r12;
        java.lang.Runnable $r13;
        androidx.camera.core.ImageProxy$PlaneProxy $r14;
        java.io.ByteArrayInputStream $r17;
        java.lang.Throwable $r20, $r21, r27, r31;
        androidx.camera.core.ImageProxy$PlaneProxy[] r22;
        java.nio.ByteBuffer r23;
        byte[] r24;
        androidx.camera.core.impl.utils.Exif r25;

        r0 := @this: androidx.camera.core.ImageCapture$ImageCaptureRequest;

        r1 := @parameter0: androidx.camera.core.ImageProxy;

        $r2 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequest: java.util.concurrent.atomic.AtomicBoolean mDispatched>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);

        if $z0 != 0 goto label01;

        interfaceinvoke r1.<androidx.camera.core.ImageProxy: void close()>();

        return;

     label01:
        $r3 = <androidx.camera.core.ImageCapture: androidx.camera.core.internal.compat.workaround.ExifRotationAvailability EXIF_ROTATION_AVAILABILITY>;

        $z1 = virtualinvoke $r3.<androidx.camera.core.internal.compat.workaround.ExifRotationAvailability: boolean shouldUseExifOrientation(androidx.camera.core.ImageProxy)>(r1);

        if $z1 == 0 goto label05;

     label02:
        r22 = interfaceinvoke r1.<androidx.camera.core.ImageProxy: androidx.camera.core.ImageProxy$PlaneProxy[] getPlanes()>();

        $r14 = r22[0];

        r23 = interfaceinvoke $r14.<androidx.camera.core.ImageProxy$PlaneProxy: java.nio.ByteBuffer getBuffer()>();

        virtualinvoke r23.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        $i4 = virtualinvoke r23.<java.nio.ByteBuffer: int capacity()>();

        r24 = newarray (byte)[$i4];

        virtualinvoke r23.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r24);

        $r17 = new java.io.ByteArrayInputStream;

        specialinvoke $r17.<java.io.ByteArrayInputStream: void <init>(byte[])>(r24);

        r25 = staticinvoke <androidx.camera.core.impl.utils.Exif: androidx.camera.core.impl.utils.Exif createFromInputStream(java.io.InputStream)>($r17);

        virtualinvoke r23.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        $r19 = new android.util.Size;

        $i5 = virtualinvoke r25.<androidx.camera.core.impl.utils.Exif: int getWidth()>();

        $i6 = virtualinvoke r25.<androidx.camera.core.impl.utils.Exif: int getHeight()>();

        specialinvoke $r19.<android.util.Size: void <init>(int,int)>($i5, $i6);

        r26 = $r19;

        i7 = virtualinvoke r25.<androidx.camera.core.impl.utils.Exif: int getRotation()>();

     label03:
        goto label06;

     label04:
        $r21 := @caughtexception;

        r27 = $r21;

        virtualinvoke r0.<androidx.camera.core.ImageCapture$ImageCaptureRequest: void notifyCallbackError(int,java.lang.String,java.lang.Throwable)>(1, "Unable to parse JPEG exif", r27);

        interfaceinvoke r1.<androidx.camera.core.ImageProxy: void close()>();

        return;

     label05:
        $r4 = new android.util.Size;

        $i0 = interfaceinvoke r1.<androidx.camera.core.ImageProxy: int getWidth()>();

        $i1 = interfaceinvoke r1.<androidx.camera.core.ImageProxy: int getHeight()>();

        specialinvoke $r4.<android.util.Size: void <init>(int,int)>($i0, $i1);

        r26 = $r4;

        i7 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequest: int mRotationDegrees>;

     label06:
        $r5 = interfaceinvoke r1.<androidx.camera.core.ImageProxy: androidx.camera.core.ImageInfo getImageInfo()>();

        $r6 = interfaceinvoke $r5.<androidx.camera.core.ImageInfo: androidx.camera.core.impl.TagBundle getTagBundle()>();

        $r7 = interfaceinvoke r1.<androidx.camera.core.ImageProxy: androidx.camera.core.ImageInfo getImageInfo()>();

        $l2 = interfaceinvoke $r7.<androidx.camera.core.ImageInfo: long getTimestamp()>();

        $r8 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequest: android.graphics.Matrix mSensorToBufferTransformMatrix>;

        r28 = staticinvoke <androidx.camera.core.ImmutableImageInfo: androidx.camera.core.ImageInfo create(androidx.camera.core.impl.TagBundle,long,int,android.graphics.Matrix)>($r6, $l2, i7, $r8);

        $r9 = new androidx.camera.core.SettableImageProxy;

        specialinvoke $r9.<androidx.camera.core.SettableImageProxy: void <init>(androidx.camera.core.ImageProxy,android.util.Size,androidx.camera.core.ImageInfo)>(r1, r26, r28);

        r29 = $r9;

        $r11 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequest: android.graphics.Rect mViewPortCropRect>;

        $r10 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequest: android.util.Rational mTargetRatio>;

        $i3 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequest: int mRotationDegrees>;

        r30 = staticinvoke <androidx.camera.core.ImageCapture: android.graphics.Rect computeDispatchCropRect(android.graphics.Rect,android.util.Rational,int,android.util.Size,int)>($r11, $r10, $i3, r26, i7);

        interfaceinvoke r29.<androidx.camera.core.ImageProxy: void setCropRect(android.graphics.Rect)>(r30);

     label07:
        $r12 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequest: java.util.concurrent.Executor mListenerExecutor>;

        $r13 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.core.ImageCapture$ImageCaptureRequest,androidx.camera.core.ImageProxy)>(r0, r29) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.ImageCapture$ImageCaptureRequest: void lambda$dispatchImage$0(androidx.camera.core.ImageProxy)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r12.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r13);

     label08:
        goto label10;

     label09:
        $r20 := @caughtexception;

        r31 = $r20;

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String)>("ImageCapture", "Unable to post to the supplied executor.");

        interfaceinvoke r1.<androidx.camera.core.ImageProxy: void close()>();

     label10:
        return;

        catch java.io.IOException from label02 to label03 with label04;
        catch java.util.concurrent.RejectedExecutionException from label07 to label08 with label09;
    }

    void notifyCallbackError(int, java.lang.String, java.lang.Throwable)
    {
        androidx.camera.core.ImageCapture$ImageCaptureRequest r0;
        int i0;
        java.lang.String r1;
        java.lang.Throwable r2, r3, $r7;
        java.util.concurrent.atomic.AtomicBoolean $r4;
        boolean $z0;
        java.util.concurrent.Executor $r5;
        java.lang.Runnable $r6;

        r0 := @this: androidx.camera.core.ImageCapture$ImageCaptureRequest;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Throwable;

        $r4 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequest: java.util.concurrent.atomic.AtomicBoolean mDispatched>;

        $z0 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r5 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequest: java.util.concurrent.Executor mListenerExecutor>;

        $r6 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.core.ImageCapture$ImageCaptureRequest,int,java.lang.String,java.lang.Throwable)>(r0, i0, r1, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.ImageCapture$ImageCaptureRequest: void lambda$notifyCallbackError$1(int,java.lang.String,java.lang.Throwable)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r5.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r6);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String)>("ImageCapture", "Unable to post to the supplied executor.");

     label4:
        return;

        catch java.util.concurrent.RejectedExecutionException from label1 to label2 with label3;
    }

    private void lambda$notifyCallbackError$1(int, java.lang.String, java.lang.Throwable)
    {
        androidx.camera.core.ImageCapture$ImageCaptureRequest r0;
        int i0;
        java.lang.String r1;
        java.lang.Throwable r2;
        androidx.camera.core.ImageCaptureException $r3;
        androidx.camera.core.ImageCapture$OnImageCapturedCallback $r4;

        r0 := @this: androidx.camera.core.ImageCapture$ImageCaptureRequest;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Throwable;

        $r4 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequest: androidx.camera.core.ImageCapture$OnImageCapturedCallback mCallback>;

        $r3 = new androidx.camera.core.ImageCaptureException;

        specialinvoke $r3.<androidx.camera.core.ImageCaptureException: void <init>(int,java.lang.String,java.lang.Throwable)>(i0, r1, r2);

        virtualinvoke $r4.<androidx.camera.core.ImageCapture$OnImageCapturedCallback: void onError(androidx.camera.core.ImageCaptureException)>($r3);

        return;
    }

    private void lambda$dispatchImage$0(androidx.camera.core.ImageProxy)
    {
        androidx.camera.core.ImageCapture$ImageCaptureRequest r0;
        androidx.camera.core.ImageProxy r1;
        androidx.camera.core.ImageCapture$OnImageCapturedCallback $r2;

        r0 := @this: androidx.camera.core.ImageCapture$ImageCaptureRequest;

        r1 := @parameter0: androidx.camera.core.ImageProxy;

        $r2 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequest: androidx.camera.core.ImageCapture$OnImageCapturedCallback mCallback>;

        virtualinvoke $r2.<androidx.camera.core.ImageCapture$OnImageCapturedCallback: void onCaptureSuccess(androidx.camera.core.ImageProxy)>(r1);

        return;
    }

androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$1
<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$1: androidx.camera.core.ImageCapture$ImageCaptureRequest val$imageCaptureRequest>
<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$1: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor this$0>
    void <init>(androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor, androidx.camera.core.ImageCapture$ImageCaptureRequest)
    {
        androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$1 r0;
        androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor r1;
        androidx.camera.core.ImageCapture$ImageCaptureRequest r2;

        r0 := @this: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$1;

        r1 := @parameter0: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor;

        r2 := @parameter1: androidx.camera.core.ImageCapture$ImageCaptureRequest;

        r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$1: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor this$0> = r1;

        r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$1: androidx.camera.core.ImageCapture$ImageCaptureRequest val$imageCaptureRequest> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onSuccess(androidx.camera.core.ImageProxy)
    {
        androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$1 r0;
        androidx.camera.core.ImageProxy r1;
        java.lang.Object r2, $r6;
        androidx.camera.core.SingleCloseImageProxy r3, $r8;
        java.lang.Throwable r4, $r15;
        androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor $r5, $r9, $r10, $r12, $r13, $r14;
        int $i0, $i1;
        androidx.camera.core.ImageCapture$ImageCaptureRequest $r11;

        r0 := @this: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$1;

        r1 := @parameter0: androidx.camera.core.ImageProxy;

        $r5 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$1: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor this$0>;

        $r6 = $r5.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: java.lang.Object mLock>;

        r2 = $r6;

        entermonitor $r6;

     label1:
        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r8 = new androidx.camera.core.SingleCloseImageProxy;

        specialinvoke $r8.<androidx.camera.core.SingleCloseImageProxy: void <init>(androidx.camera.core.ImageProxy)>(r1);

        r3 = $r8;

        $r9 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$1: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor this$0>;

        virtualinvoke r3.<androidx.camera.core.SingleCloseImageProxy: void addOnImageCloseListener(androidx.camera.core.ForwardingImageProxy$OnImageCloseListener)>($r9);

        $r10 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$1: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor this$0>;

        $i0 = $r10.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: int mOutstandingImages>;

        $i1 = $i0 + 1;

        $r10.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: int mOutstandingImages> = $i1;

        $r11 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$1: androidx.camera.core.ImageCapture$ImageCaptureRequest val$imageCaptureRequest>;

        virtualinvoke $r11.<androidx.camera.core.ImageCapture$ImageCaptureRequest: void dispatchImage(androidx.camera.core.ImageProxy)>(r3);

        $r12 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$1: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor this$0>;

        $r12.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: androidx.camera.core.ImageCapture$ImageCaptureRequest mCurrentRequest> = null;

        $r13 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$1: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor this$0>;

        $r13.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: com.google.common.util.concurrent.ListenableFuture mCurrentRequestFuture> = null;

        $r14 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$1: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor this$0>;

        virtualinvoke $r14.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: void processNextRequest()>();

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r15 := @caughtexception;

        r4 = $r15;

        exitmonitor r2;

     label4:
        throw r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void onFailure(java.lang.Throwable)
    {
        androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$1 r0;
        java.lang.Throwable r1, r3, $r7;
        java.lang.Object r2, $r5;
        androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor $r4, $r9, $r10, $r11;
        boolean $z0;
        androidx.camera.core.ImageCapture$ImageCaptureRequest $r6;
        int $i0;
        java.lang.String $r8;

        r0 := @this: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$1;

        r1 := @parameter0: java.lang.Throwable;

        $r4 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$1: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor this$0>;

        $r5 = $r4.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: java.lang.Object mLock>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $z0 = r1 instanceof java.util.concurrent.CancellationException;

        if $z0 == 0 goto label2;

        goto label5;

     label2:
        $r6 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$1: androidx.camera.core.ImageCapture$ImageCaptureRequest val$imageCaptureRequest>;

        $i0 = staticinvoke <androidx.camera.core.ImageCapture: int getError(java.lang.Throwable)>(r1);

        if r1 == null goto label3;

        $r8 = virtualinvoke r1.<java.lang.Throwable: java.lang.String getMessage()>();

        goto label4;

     label3:
        $r8 = "Unknown error";

     label4:
        virtualinvoke $r6.<androidx.camera.core.ImageCapture$ImageCaptureRequest: void notifyCallbackError(int,java.lang.String,java.lang.Throwable)>($i0, $r8, r1);

     label5:
        $r9 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$1: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor this$0>;

        $r9.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: androidx.camera.core.ImageCapture$ImageCaptureRequest mCurrentRequest> = null;

        $r10 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$1: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor this$0>;

        $r10.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: com.google.common.util.concurrent.ListenableFuture mCurrentRequestFuture> = null;

        $r11 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$1: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor this$0>;

        virtualinvoke $r11.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: void processNextRequest()>();

        exitmonitor r2;

     label6:
        goto label9;

     label7:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label8:
        throw r3;

     label9:
        return;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public volatile void onSuccess(java.lang.Object)
    {
        androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$1 r0;
        java.lang.Object r1;
        androidx.camera.core.ImageProxy $r2;

        r0 := @this: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.camera.core.ImageProxy) r1;

        virtualinvoke r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$1: void onSuccess(androidx.camera.core.ImageProxy)>($r2);

        return;
    }

androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$ImageCaptor
<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$ImageCaptor: com.google.common.util.concurrent.ListenableFuture capture(androidx.camera.core.ImageCapture$ImageCaptureRequest)>
androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$RequestProcessCallback
<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$RequestProcessCallback: void onPreProcessRequest(androidx.camera.core.ImageCapture$ImageCaptureRequest)>
androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor
<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: java.util.Deque mPendingRequests>
<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: androidx.camera.core.ImageCapture$ImageCaptureRequest mCurrentRequest>
<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: com.google.common.util.concurrent.ListenableFuture mCurrentRequestFuture>
<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: int mOutstandingImages>
<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$ImageCaptor mImageCaptor>
<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: int mMaxImages>
<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$RequestProcessCallback mRequestProcessCallback>
<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: java.lang.Object mLock>
    void <init>(int, androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$ImageCaptor)
    {
        androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor r0;
        int i0;
        androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$ImageCaptor r1;

        r0 := @this: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$ImageCaptor;

        specialinvoke r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: void <init>(int,androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$ImageCaptor,androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$RequestProcessCallback)>(i0, r1, null);

        return;
    }

    void <init>(int, androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$ImageCaptor, androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$RequestProcessCallback)
    {
        androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor r0;
        int i0;
        androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$ImageCaptor r1;
        androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$RequestProcessCallback r2;
        java.util.ArrayDeque $r3;
        java.lang.Object $r4;

        r0 := @this: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$ImageCaptor;

        r2 := @parameter2: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$RequestProcessCallback;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.ArrayDeque;

        specialinvoke $r3.<java.util.ArrayDeque: void <init>()>();

        r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: java.util.Deque mPendingRequests> = $r3;

        r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: androidx.camera.core.ImageCapture$ImageCaptureRequest mCurrentRequest> = null;

        r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: com.google.common.util.concurrent.ListenableFuture mCurrentRequestFuture> = null;

        r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: int mOutstandingImages> = 0;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: java.lang.Object mLock> = $r4;

        r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: int mMaxImages> = i0;

        r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$ImageCaptor mImageCaptor> = r1;

        r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$RequestProcessCallback mRequestProcessCallback> = r2;

        return;
    }

    public void sendRequest(androidx.camera.core.ImageCapture$ImageCaptureRequest)
    {
        androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor r0;
        androidx.camera.core.ImageCapture$ImageCaptureRequest r1, $r7;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r15;
        java.util.Deque $r5, $r12;
        java.lang.Object[] $r6;
        java.util.Locale $r9;
        java.lang.Integer $r11, $r13;
        int $i1;
        java.lang.String $r14;
        byte $b2;

        r0 := @this: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor;

        r1 := @parameter0: androidx.camera.core.ImageCapture$ImageCaptureRequest;

        $r4 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: java.util.Deque mPendingRequests>;

        interfaceinvoke $r5.<java.util.Deque: boolean offer(java.lang.Object)>(r1);

        $r9 = <java.util.Locale: java.util.Locale US>;

        $r6 = newarray (java.lang.Object)[2];

        $r7 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: androidx.camera.core.ImageCapture$ImageCaptureRequest mCurrentRequest>;

        if $r7 == null goto label2;

        $b2 = 1;

        goto label3;

     label2:
        $b2 = 0;

     label3:
        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($b2);

        $r6[0] = $r11;

        $r12 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: java.util.Deque mPendingRequests>;

        $i1 = interfaceinvoke $r12.<java.util.Deque: int size()>();

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r6[1] = $r13;

        $r14 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r9, "Send image capture request [current, pending] = [%d, %d]", $r6);

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("ImageCapture", $r14);

        virtualinvoke r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: void processNextRequest()>();

        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r15 := @caughtexception;

        r3 = $r15;

        exitmonitor r2;

     label6:
        throw r3;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void cancelRequests(java.lang.Throwable)
    {
        androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor r0;
        java.lang.Throwable r1, $r12, r14;
        androidx.camera.core.ImageCapture$ImageCaptureRequest r2, r16;
        com.google.common.util.concurrent.ListenableFuture r3;
        java.util.ArrayList r4, $r6;
        java.lang.Object $r5, $r9, r13;
        java.util.Deque $r7, $r8;
        int $i0, $i1;
        java.lang.String $r10, $r11;
        java.util.Iterator r15;
        boolean $z1;

        r0 := @this: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor;

        r1 := @parameter0: java.lang.Throwable;

        $r5 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: java.lang.Object mLock>;

        r13 = $r5;

        entermonitor $r5;

     label1:
        r2 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: androidx.camera.core.ImageCapture$ImageCaptureRequest mCurrentRequest>;

        r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: androidx.camera.core.ImageCapture$ImageCaptureRequest mCurrentRequest> = null;

        r3 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: com.google.common.util.concurrent.ListenableFuture mCurrentRequestFuture>;

        r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: com.google.common.util.concurrent.ListenableFuture mCurrentRequestFuture> = null;

        $r6 = new java.util.ArrayList;

        $r7 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: java.util.Deque mPendingRequests>;

        specialinvoke $r6.<java.util.ArrayList: void <init>(java.util.Collection)>($r7);

        r4 = $r6;

        $r8 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: java.util.Deque mPendingRequests>;

        interfaceinvoke $r8.<java.util.Deque: void clear()>();

        exitmonitor r13;

     label2:
        goto label5;

     label3:
        $r12 := @caughtexception;

        r14 = $r12;

        exitmonitor r13;

     label4:
        throw r14;

     label5:
        if r2 == null goto label6;

        if r3 == null goto label6;

        $i1 = staticinvoke <androidx.camera.core.ImageCapture: int getError(java.lang.Throwable)>(r1);

        $r11 = virtualinvoke r1.<java.lang.Throwable: java.lang.String getMessage()>();

        virtualinvoke r2.<androidx.camera.core.ImageCapture$ImageCaptureRequest: void notifyCallbackError(int,java.lang.String,java.lang.Throwable)>($i1, $r11, r1);

        interfaceinvoke r3.<com.google.common.util.concurrent.ListenableFuture: boolean cancel(boolean)>(1);

     label6:
        r15 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label7:
        $z1 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r9 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        r16 = (androidx.camera.core.ImageCapture$ImageCaptureRequest) $r9;

        $i0 = staticinvoke <androidx.camera.core.ImageCapture: int getError(java.lang.Throwable)>(r1);

        $r10 = virtualinvoke r1.<java.lang.Throwable: java.lang.String getMessage()>();

        virtualinvoke r16.<androidx.camera.core.ImageCapture$ImageCaptureRequest: void notifyCallbackError(int,java.lang.String,java.lang.Throwable)>($i0, $r10, r1);

        goto label7;

     label8:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.util.List pullOutUnfinishedRequests()
    {
        androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor r0;
        java.util.ArrayList r1, $r6;
        java.lang.Object r2, $r5;
        androidx.camera.core.ImageCapture$ImageCaptureRequest r3;
        java.lang.Throwable r4, $r11;
        java.util.Deque $r7, $r8;
        com.google.common.util.concurrent.ListenableFuture $r9, $r10;
        boolean $z0;

        r0 := @this: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor;

        $r5 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: java.lang.Object mLock>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $r6 = new java.util.ArrayList;

        $r7 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: java.util.Deque mPendingRequests>;

        specialinvoke $r6.<java.util.ArrayList: void <init>(java.util.Collection)>($r7);

        r1 = $r6;

        $r8 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: java.util.Deque mPendingRequests>;

        interfaceinvoke $r8.<java.util.Deque: void clear()>();

        r3 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: androidx.camera.core.ImageCapture$ImageCaptureRequest mCurrentRequest>;

        r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: androidx.camera.core.ImageCapture$ImageCaptureRequest mCurrentRequest> = null;

        if r3 == null goto label2;

        $r9 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: com.google.common.util.concurrent.ListenableFuture mCurrentRequestFuture>;

        if $r9 == null goto label2;

        $r10 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: com.google.common.util.concurrent.ListenableFuture mCurrentRequestFuture>;

        $z0 = interfaceinvoke $r10.<com.google.common.util.concurrent.ListenableFuture: boolean cancel(boolean)>(1);

        if $z0 == 0 goto label2;

        interfaceinvoke r1.<java.util.List: void add(int,java.lang.Object)>(0, r3);

     label2:
        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r11 := @caughtexception;

        r4 = $r11;

        exitmonitor r2;

     label5:
        throw r4;

     label6:
        return r1;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void onImageClose(androidx.camera.core.ImageProxy)
    {
        androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor r0;
        androidx.camera.core.ImageProxy r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r7;
        int $i0, $i1;
        java.util.concurrent.ScheduledExecutorService $r5;
        java.lang.Runnable $r6;

        r0 := @this: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor;

        r1 := @parameter0: androidx.camera.core.ImageProxy;

        $r4 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $i0 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: int mOutstandingImages>;

        $i1 = $i0 - 1;

        r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: int mOutstandingImages> = $i1;

        $r5 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.ScheduledExecutorService mainThreadExecutor()>();

        $r6 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_VIRTUAL" <androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: void processNextRequest()>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r5.<java.util.concurrent.ScheduledExecutorService: void execute(java.lang.Runnable)>($r6);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    void processNextRequest()
    {
        androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor r0;
        java.lang.Object r1, $r4, $r7;
        androidx.camera.core.ImageCapture$ImageCaptureRequest r2, $r5, $r14;
        java.lang.Throwable r3, $r16;
        int $i0, $i1;
        java.util.Deque $r6;
        androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$RequestProcessCallback $r8, $r15;
        androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$ImageCaptor $r9;
        com.google.common.util.concurrent.ListenableFuture $r10, $r12;
        java.util.concurrent.ScheduledExecutorService $r13;
        androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$1 r17;
        java.util.concurrent.Executor r18;

        r0 := @this: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor;

        $r4 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: java.lang.Object mLock>;

        r1 = $r4;

        entermonitor $r4;

     label01:
        $r5 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: androidx.camera.core.ImageCapture$ImageCaptureRequest mCurrentRequest>;

        if $r5 == null goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        $i1 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: int mOutstandingImages>;

        $i0 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: int mMaxImages>;

        if $i1 < $i0 goto label05;

        staticinvoke <androidx.camera.core.Logger: void w(java.lang.String,java.lang.String)>("ImageCapture", "Too many acquire images. Close image to be able to process next.");

        exitmonitor r1;

     label04:
        return;

     label05:
        $r6 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: java.util.Deque mPendingRequests>;

        $r7 = interfaceinvoke $r6.<java.util.Deque: java.lang.Object poll()>();

        r2 = (androidx.camera.core.ImageCapture$ImageCaptureRequest) $r7;

        if r2 != null goto label07;

        exitmonitor r1;

     label06:
        return;

     label07:
        r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: androidx.camera.core.ImageCapture$ImageCaptureRequest mCurrentRequest> = r2;

        $r8 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$RequestProcessCallback mRequestProcessCallback>;

        if $r8 == null goto label08;

        $r15 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$RequestProcessCallback mRequestProcessCallback>;

        $r14 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: androidx.camera.core.ImageCapture$ImageCaptureRequest mCurrentRequest>;

        interfaceinvoke $r15.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$RequestProcessCallback: void onPreProcessRequest(androidx.camera.core.ImageCapture$ImageCaptureRequest)>($r14);

     label08:
        $r9 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$ImageCaptor mImageCaptor>;

        $r10 = interfaceinvoke $r9.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$ImageCaptor: com.google.common.util.concurrent.ListenableFuture capture(androidx.camera.core.ImageCapture$ImageCaptureRequest)>(r2);

        r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: com.google.common.util.concurrent.ListenableFuture mCurrentRequestFuture> = $r10;

        $r12 = r0.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor: com.google.common.util.concurrent.ListenableFuture mCurrentRequestFuture>;

        r17 = new androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$1;

        specialinvoke r17.<androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor$1: void <init>(androidx.camera.core.ImageCapture$ImageCaptureRequestProcessor,androidx.camera.core.ImageCapture$ImageCaptureRequest)>(r0, r2);

        $r13 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.ScheduledExecutorService mainThreadExecutor()>();

        r18 = (java.util.concurrent.Executor) $r13;

        staticinvoke <androidx.camera.core.impl.utils.futures.Futures: void addCallback(com.google.common.util.concurrent.ListenableFuture,androidx.camera.core.impl.utils.futures.FutureCallback,java.util.concurrent.Executor)>($r12, r17, r18);

        exitmonitor r1;

     label09:
        goto label12;

     label10:
        $r16 := @caughtexception;

        r3 = $r16;

        exitmonitor r1;

     label11:
        throw r3;

     label12:
        return;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

androidx.camera.core.ImageCapture$Metadata
<androidx.camera.core.ImageCapture$Metadata: boolean mIsReversedHorizontal>
<androidx.camera.core.ImageCapture$Metadata: boolean mIsReversedHorizontalSet>
<androidx.camera.core.ImageCapture$Metadata: boolean mIsReversedVertical>
<androidx.camera.core.ImageCapture$Metadata: android.location.Location mLocation>
    public void <init>()
    {
        androidx.camera.core.ImageCapture$Metadata r0;

        r0 := @this: androidx.camera.core.ImageCapture$Metadata;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.core.ImageCapture$Metadata: boolean mIsReversedHorizontalSet> = 0;

        return;
    }

    public boolean isReversedHorizontal()
    {
        androidx.camera.core.ImageCapture$Metadata r0;
        boolean $z0;

        r0 := @this: androidx.camera.core.ImageCapture$Metadata;

        $z0 = r0.<androidx.camera.core.ImageCapture$Metadata: boolean mIsReversedHorizontal>;

        return $z0;
    }

    public boolean isReversedHorizontalSet()
    {
        androidx.camera.core.ImageCapture$Metadata r0;
        boolean $z0;

        r0 := @this: androidx.camera.core.ImageCapture$Metadata;

        $z0 = r0.<androidx.camera.core.ImageCapture$Metadata: boolean mIsReversedHorizontalSet>;

        return $z0;
    }

    public void setReversedHorizontal(boolean)
    {
        androidx.camera.core.ImageCapture$Metadata r0;
        boolean z0;

        r0 := @this: androidx.camera.core.ImageCapture$Metadata;

        z0 := @parameter0: boolean;

        r0.<androidx.camera.core.ImageCapture$Metadata: boolean mIsReversedHorizontal> = z0;

        r0.<androidx.camera.core.ImageCapture$Metadata: boolean mIsReversedHorizontalSet> = 1;

        return;
    }

    public boolean isReversedVertical()
    {
        androidx.camera.core.ImageCapture$Metadata r0;
        boolean $z0;

        r0 := @this: androidx.camera.core.ImageCapture$Metadata;

        $z0 = r0.<androidx.camera.core.ImageCapture$Metadata: boolean mIsReversedVertical>;

        return $z0;
    }

    public void setReversedVertical(boolean)
    {
        androidx.camera.core.ImageCapture$Metadata r0;
        boolean z0;

        r0 := @this: androidx.camera.core.ImageCapture$Metadata;

        z0 := @parameter0: boolean;

        r0.<androidx.camera.core.ImageCapture$Metadata: boolean mIsReversedVertical> = z0;

        return;
    }

    public android.location.Location getLocation()
    {
        androidx.camera.core.ImageCapture$Metadata r0;
        android.location.Location $r1;

        r0 := @this: androidx.camera.core.ImageCapture$Metadata;

        $r1 = r0.<androidx.camera.core.ImageCapture$Metadata: android.location.Location mLocation>;

        return $r1;
    }

    public void setLocation(android.location.Location)
    {
        androidx.camera.core.ImageCapture$Metadata r0;
        android.location.Location r1;

        r0 := @this: androidx.camera.core.ImageCapture$Metadata;

        r1 := @parameter0: android.location.Location;

        r0.<androidx.camera.core.ImageCapture$Metadata: android.location.Location mLocation> = r1;

        return;
    }

androidx.camera.core.ImageCapture$OnImageCapturedCallback
    public void <init>()
    {
        androidx.camera.core.ImageCapture$OnImageCapturedCallback r0;

        r0 := @this: androidx.camera.core.ImageCapture$OnImageCapturedCallback;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onCaptureSuccess(androidx.camera.core.ImageProxy)
    {
        androidx.camera.core.ImageCapture$OnImageCapturedCallback r0;
        androidx.camera.core.ImageProxy r1;

        r0 := @this: androidx.camera.core.ImageCapture$OnImageCapturedCallback;

        r1 := @parameter0: androidx.camera.core.ImageProxy;

        return;
    }

    public void onError(androidx.camera.core.ImageCaptureException)
    {
        androidx.camera.core.ImageCapture$OnImageCapturedCallback r0;
        androidx.camera.core.ImageCaptureException r1;

        r0 := @this: androidx.camera.core.ImageCapture$OnImageCapturedCallback;

        r1 := @parameter0: androidx.camera.core.ImageCaptureException;

        return;
    }

androidx.camera.core.ImageCapture$OnImageSavedCallback
<androidx.camera.core.ImageCapture$OnImageSavedCallback: void onImageSaved(androidx.camera.core.ImageCapture$OutputFileResults)>
<androidx.camera.core.ImageCapture$OnImageSavedCallback: void onError(androidx.camera.core.ImageCaptureException)>
androidx.camera.core.ImageCapture$OutputFileOptions$Builder
<androidx.camera.core.ImageCapture$OutputFileOptions$Builder: java.io.File mFile>
<androidx.camera.core.ImageCapture$OutputFileOptions$Builder: android.content.ContentResolver mContentResolver>
<androidx.camera.core.ImageCapture$OutputFileOptions$Builder: android.net.Uri mSaveCollection>
<androidx.camera.core.ImageCapture$OutputFileOptions$Builder: android.content.ContentValues mContentValues>
<androidx.camera.core.ImageCapture$OutputFileOptions$Builder: java.io.OutputStream mOutputStream>
<androidx.camera.core.ImageCapture$OutputFileOptions$Builder: androidx.camera.core.ImageCapture$Metadata mMetadata>
    public void <init>(java.io.File)
    {
        androidx.camera.core.ImageCapture$OutputFileOptions$Builder r0;
        java.io.File r1;

        r0 := @this: androidx.camera.core.ImageCapture$OutputFileOptions$Builder;

        r1 := @parameter0: java.io.File;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.core.ImageCapture$OutputFileOptions$Builder: java.io.File mFile> = r1;

        return;
    }

    public void <init>(android.content.ContentResolver, android.net.Uri, android.content.ContentValues)
    {
        androidx.camera.core.ImageCapture$OutputFileOptions$Builder r0;
        android.content.ContentResolver r1;
        android.net.Uri r2;
        android.content.ContentValues r3;

        r0 := @this: androidx.camera.core.ImageCapture$OutputFileOptions$Builder;

        r1 := @parameter0: android.content.ContentResolver;

        r2 := @parameter1: android.net.Uri;

        r3 := @parameter2: android.content.ContentValues;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.core.ImageCapture$OutputFileOptions$Builder: android.content.ContentResolver mContentResolver> = r1;

        r0.<androidx.camera.core.ImageCapture$OutputFileOptions$Builder: android.net.Uri mSaveCollection> = r2;

        r0.<androidx.camera.core.ImageCapture$OutputFileOptions$Builder: android.content.ContentValues mContentValues> = r3;

        return;
    }

    public void <init>(java.io.OutputStream)
    {
        androidx.camera.core.ImageCapture$OutputFileOptions$Builder r0;
        java.io.OutputStream r1;

        r0 := @this: androidx.camera.core.ImageCapture$OutputFileOptions$Builder;

        r1 := @parameter0: java.io.OutputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.core.ImageCapture$OutputFileOptions$Builder: java.io.OutputStream mOutputStream> = r1;

        return;
    }

    public androidx.camera.core.ImageCapture$OutputFileOptions$Builder setMetadata(androidx.camera.core.ImageCapture$Metadata)
    {
        androidx.camera.core.ImageCapture$OutputFileOptions$Builder r0;
        androidx.camera.core.ImageCapture$Metadata r1;

        r0 := @this: androidx.camera.core.ImageCapture$OutputFileOptions$Builder;

        r1 := @parameter0: androidx.camera.core.ImageCapture$Metadata;

        r0.<androidx.camera.core.ImageCapture$OutputFileOptions$Builder: androidx.camera.core.ImageCapture$Metadata mMetadata> = r1;

        return r0;
    }

    public androidx.camera.core.ImageCapture$OutputFileOptions build()
    {
        androidx.camera.core.ImageCapture$OutputFileOptions$Builder r0;
        androidx.camera.core.ImageCapture$OutputFileOptions $r1;
        androidx.camera.core.ImageCapture$Metadata $r2;
        java.io.OutputStream $r3;
        android.content.ContentValues $r4;
        android.net.Uri $r5;
        android.content.ContentResolver $r6;
        java.io.File $r7;

        r0 := @this: androidx.camera.core.ImageCapture$OutputFileOptions$Builder;

        $r1 = new androidx.camera.core.ImageCapture$OutputFileOptions;

        $r7 = r0.<androidx.camera.core.ImageCapture$OutputFileOptions$Builder: java.io.File mFile>;

        $r6 = r0.<androidx.camera.core.ImageCapture$OutputFileOptions$Builder: android.content.ContentResolver mContentResolver>;

        $r5 = r0.<androidx.camera.core.ImageCapture$OutputFileOptions$Builder: android.net.Uri mSaveCollection>;

        $r4 = r0.<androidx.camera.core.ImageCapture$OutputFileOptions$Builder: android.content.ContentValues mContentValues>;

        $r3 = r0.<androidx.camera.core.ImageCapture$OutputFileOptions$Builder: java.io.OutputStream mOutputStream>;

        $r2 = r0.<androidx.camera.core.ImageCapture$OutputFileOptions$Builder: androidx.camera.core.ImageCapture$Metadata mMetadata>;

        specialinvoke $r1.<androidx.camera.core.ImageCapture$OutputFileOptions: void <init>(java.io.File,android.content.ContentResolver,android.net.Uri,android.content.ContentValues,java.io.OutputStream,androidx.camera.core.ImageCapture$Metadata)>($r7, $r6, $r5, $r4, $r3, $r2);

        return $r1;
    }

androidx.camera.core.ImageCapture$OutputFileOptions
<androidx.camera.core.ImageCapture$OutputFileOptions: java.io.File mFile>
<androidx.camera.core.ImageCapture$OutputFileOptions: android.content.ContentResolver mContentResolver>
<androidx.camera.core.ImageCapture$OutputFileOptions: android.net.Uri mSaveCollection>
<androidx.camera.core.ImageCapture$OutputFileOptions: android.content.ContentValues mContentValues>
<androidx.camera.core.ImageCapture$OutputFileOptions: java.io.OutputStream mOutputStream>
<androidx.camera.core.ImageCapture$OutputFileOptions: androidx.camera.core.ImageCapture$Metadata mMetadata>
    void <init>(java.io.File, android.content.ContentResolver, android.net.Uri, android.content.ContentValues, java.io.OutputStream, androidx.camera.core.ImageCapture$Metadata)
    {
        androidx.camera.core.ImageCapture$OutputFileOptions r0;
        java.io.File r1;
        android.content.ContentResolver r2;
        android.net.Uri r3;
        android.content.ContentValues r4;
        java.io.OutputStream r5;
        androidx.camera.core.ImageCapture$Metadata r6, $r8;

        r0 := @this: androidx.camera.core.ImageCapture$OutputFileOptions;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: android.content.ContentResolver;

        r3 := @parameter2: android.net.Uri;

        r4 := @parameter3: android.content.ContentValues;

        r5 := @parameter4: java.io.OutputStream;

        r6 := @parameter5: androidx.camera.core.ImageCapture$Metadata;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.core.ImageCapture$OutputFileOptions: java.io.File mFile> = r1;

        r0.<androidx.camera.core.ImageCapture$OutputFileOptions: android.content.ContentResolver mContentResolver> = r2;

        r0.<androidx.camera.core.ImageCapture$OutputFileOptions: android.net.Uri mSaveCollection> = r3;

        r0.<androidx.camera.core.ImageCapture$OutputFileOptions: android.content.ContentValues mContentValues> = r4;

        r0.<androidx.camera.core.ImageCapture$OutputFileOptions: java.io.OutputStream mOutputStream> = r5;

        if r6 != null goto label1;

        $r8 = new androidx.camera.core.ImageCapture$Metadata;

        specialinvoke $r8.<androidx.camera.core.ImageCapture$Metadata: void <init>()>();

        goto label2;

     label1:
        $r8 = r6;

     label2:
        r0.<androidx.camera.core.ImageCapture$OutputFileOptions: androidx.camera.core.ImageCapture$Metadata mMetadata> = $r8;

        return;
    }

    public java.io.File getFile()
    {
        androidx.camera.core.ImageCapture$OutputFileOptions r0;
        java.io.File $r1;

        r0 := @this: androidx.camera.core.ImageCapture$OutputFileOptions;

        $r1 = r0.<androidx.camera.core.ImageCapture$OutputFileOptions: java.io.File mFile>;

        return $r1;
    }

    public android.content.ContentResolver getContentResolver()
    {
        androidx.camera.core.ImageCapture$OutputFileOptions r0;
        android.content.ContentResolver $r1;

        r0 := @this: androidx.camera.core.ImageCapture$OutputFileOptions;

        $r1 = r0.<androidx.camera.core.ImageCapture$OutputFileOptions: android.content.ContentResolver mContentResolver>;

        return $r1;
    }

    public android.net.Uri getSaveCollection()
    {
        androidx.camera.core.ImageCapture$OutputFileOptions r0;
        android.net.Uri $r1;

        r0 := @this: androidx.camera.core.ImageCapture$OutputFileOptions;

        $r1 = r0.<androidx.camera.core.ImageCapture$OutputFileOptions: android.net.Uri mSaveCollection>;

        return $r1;
    }

    public android.content.ContentValues getContentValues()
    {
        androidx.camera.core.ImageCapture$OutputFileOptions r0;
        android.content.ContentValues $r1;

        r0 := @this: androidx.camera.core.ImageCapture$OutputFileOptions;

        $r1 = r0.<androidx.camera.core.ImageCapture$OutputFileOptions: android.content.ContentValues mContentValues>;

        return $r1;
    }

    public java.io.OutputStream getOutputStream()
    {
        androidx.camera.core.ImageCapture$OutputFileOptions r0;
        java.io.OutputStream $r1;

        r0 := @this: androidx.camera.core.ImageCapture$OutputFileOptions;

        $r1 = r0.<androidx.camera.core.ImageCapture$OutputFileOptions: java.io.OutputStream mOutputStream>;

        return $r1;
    }

    public androidx.camera.core.ImageCapture$Metadata getMetadata()
    {
        androidx.camera.core.ImageCapture$OutputFileOptions r0;
        androidx.camera.core.ImageCapture$Metadata $r1;

        r0 := @this: androidx.camera.core.ImageCapture$OutputFileOptions;

        $r1 = r0.<androidx.camera.core.ImageCapture$OutputFileOptions: androidx.camera.core.ImageCapture$Metadata mMetadata>;

        return $r1;
    }

androidx.camera.core.ImageCapture$OutputFileResults
<androidx.camera.core.ImageCapture$OutputFileResults: android.net.Uri mSavedUri>
    public void <init>(android.net.Uri)
    {
        androidx.camera.core.ImageCapture$OutputFileResults r0;
        android.net.Uri r1;

        r0 := @this: androidx.camera.core.ImageCapture$OutputFileResults;

        r1 := @parameter0: android.net.Uri;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.core.ImageCapture$OutputFileResults: android.net.Uri mSavedUri> = r1;

        return;
    }

    public android.net.Uri getSavedUri()
    {
        androidx.camera.core.ImageCapture$OutputFileResults r0;
        android.net.Uri $r1;

        r0 := @this: androidx.camera.core.ImageCapture$OutputFileResults;

        $r1 = r0.<androidx.camera.core.ImageCapture$OutputFileResults: android.net.Uri mSavedUri>;

        return $r1;
    }

