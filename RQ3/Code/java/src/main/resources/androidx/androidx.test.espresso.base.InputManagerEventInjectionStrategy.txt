androidx.test.espresso.base.InputManagerEventInjectionStrategy
<androidx.test.espresso.base.InputManagerEventInjectionStrategy: java.lang.String TAG>
<androidx.test.espresso.base.InputManagerEventInjectionStrategy: long KEYBOARD_DISMISSAL_DELAY_MILLIS>
<androidx.test.espresso.base.InputManagerEventInjectionStrategy: boolean initComplete>
<androidx.test.espresso.base.InputManagerEventInjectionStrategy: java.lang.reflect.Method injectInputEventMethod>
<androidx.test.espresso.base.InputManagerEventInjectionStrategy: java.lang.reflect.Method setSourceMotionMethod>
<androidx.test.espresso.base.InputManagerEventInjectionStrategy: java.lang.Object instanceInputManagerObject>
<androidx.test.espresso.base.InputManagerEventInjectionStrategy: int asyncEventMode>
<androidx.test.espresso.base.InputManagerEventInjectionStrategy: int syncEventMode>
    void <init>()
    {
        int $i0;
        androidx.test.espresso.base.InputManagerEventInjectionStrategy r0;
        boolean z0;

        r0 := @this: androidx.test.espresso.base.InputManagerEventInjectionStrategy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 16 goto label2;

        z0 = 1;

     label1:
        staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: void checkState(boolean,java.lang.Object)>(z0, "Unsupported API level.");

        return;

     label2:
        z0 = 0;

        goto label1;
    }

    void initialize()
    {
        java.lang.Class[] r0, $r1, r23;
        boolean $z0;
        java.lang.Object[] $r2;
        java.lang.Object $r3, $r4;
        java.lang.Class $r5, $r8, r16, r18, r21;
        java.lang.reflect.Method $r6, $r7, $r9, r17;
        int $i1, $i2, i3;
        java.lang.Throwable $r10, $r11, $r12, $r13, $r14, r24, r26, r28, r30, r32, r40, r41, r42, r43, r44;
        androidx.test.espresso.base.InputManagerEventInjectionStrategy r15;
        java.lang.String r19, r22;
        java.lang.reflect.Field r20, r34;
        java.lang.RuntimeException r25, r27, r29, r31, r33, r35, r36, r37, r38, r39;

        r15 := @this: androidx.test.espresso.base.InputManagerEventInjectionStrategy;

        $z0 = r15.<androidx.test.espresso.base.InputManagerEventInjectionStrategy: boolean initComplete>;

        if $z0 == 0 goto label01;

        return;

     label01:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("EventInjectionStrategy", "Creating injection strategy with input manager.");

        r16 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("android.hardware.input.InputManager");

        $r1 = newarray (java.lang.Class)[0];

        r17 = virtualinvoke r16.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("getInstance", $r1);

        virtualinvoke r17.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

        $r2 = newarray (java.lang.Object)[0];

        $r3 = virtualinvoke r17.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r16, $r2);

        r15.<androidx.test.espresso.base.InputManagerEventInjectionStrategy: java.lang.Object instanceInputManagerObject> = $r3;

        $r4 = r15.<androidx.test.espresso.base.InputManagerEventInjectionStrategy: java.lang.Object instanceInputManagerObject>;

        r18 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        r19 = "injectInputEvent";

        r0 = newarray (java.lang.Class)[2];

     label02:
        r0[0] = class "Landroid/view/InputEvent;";

     label03:
        $r5 = <java.lang.Integer: java.lang.Class TYPE>;

        r0[1] = $r5;

        $r6 = virtualinvoke r18.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>(r19, r0);

        r15.<androidx.test.espresso.base.InputManagerEventInjectionStrategy: java.lang.reflect.Method injectInputEventMethod> = $r6;

        $r7 = r15.<androidx.test.espresso.base.InputManagerEventInjectionStrategy: java.lang.reflect.Method injectInputEventMethod>;

        virtualinvoke $r7.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

        r20 = virtualinvoke r16.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("INJECT_INPUT_EVENT_MODE_WAIT_FOR_FINISH");

        virtualinvoke r20.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        $i1 = virtualinvoke r20.<java.lang.reflect.Field: int getInt(java.lang.Object)>(r16);

        r15.<androidx.test.espresso.base.InputManagerEventInjectionStrategy: int syncEventMode> = $i1;

        i3 = <android.os.Build$VERSION: int SDK_INT>;

     label04:
        if i3 < 28 goto label13;

     label05:
        r15.<androidx.test.espresso.base.InputManagerEventInjectionStrategy: int asyncEventMode> = 0;

     label06:
        r21 = class "Landroid/view/MotionEvent;";

        r22 = "setSource";

        r23 = newarray (java.lang.Class)[1];

     label07:
        $r8 = <java.lang.Integer: java.lang.Class TYPE>;

        r23[0] = $r8;

        $r9 = virtualinvoke r21.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>(r22, r23);

        r15.<androidx.test.espresso.base.InputManagerEventInjectionStrategy: java.lang.reflect.Method setSourceMotionMethod> = $r9;

        r15.<androidx.test.espresso.base.InputManagerEventInjectionStrategy: boolean initComplete> = 1;

        return;

     label08:
        $r12 := @caughtexception;

        r24 = $r12;

        r35 = new java.lang.RuntimeException;

        r25 = r35;

        specialinvoke r35.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r24);

        r40 = (java.lang.Throwable) r25;

        throw r40;

     label09:
        $r11 := @caughtexception;

        r26 = $r11;

        r36 = new java.lang.RuntimeException;

        r27 = r36;

        specialinvoke r36.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r26);

        r41 = (java.lang.Throwable) r27;

        throw r41;

     label10:
        $r14 := @caughtexception;

        r28 = $r14;

        r37 = new java.lang.RuntimeException;

        r29 = r37;

        specialinvoke r37.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r28);

        r42 = (java.lang.Throwable) r29;

        throw r42;

     label11:
        $r13 := @caughtexception;

        r30 = $r13;

        r38 = new java.lang.RuntimeException;

        r31 = r38;

        specialinvoke r38.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r30);

        r43 = (java.lang.Throwable) r31;

        throw r43;

     label12:
        $r10 := @caughtexception;

        r32 = $r10;

        r39 = new java.lang.RuntimeException;

        r33 = r39;

        specialinvoke r39.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r32);

        r44 = (java.lang.Throwable) r33;

        throw r44;

     label13:
        r34 = virtualinvoke r16.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("INJECT_INPUT_EVENT_MODE_ASYNC");

        virtualinvoke r34.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        $i2 = virtualinvoke r34.<java.lang.reflect.Field: int getInt(java.lang.Object)>(r16);

        r15.<androidx.test.espresso.base.InputManagerEventInjectionStrategy: int asyncEventMode> = $i2;

        goto label06;

     label14:
        nop;

        catch java.lang.ClassNotFoundException from label01 to label02 with label09;
        catch java.lang.IllegalAccessException from label01 to label02 with label10;
        catch java.lang.reflect.InvocationTargetException from label01 to label02 with label11;
        catch java.lang.NoSuchMethodException from label01 to label02 with label12;
        catch java.lang.NoSuchFieldException from label01 to label02 with label08;
        catch java.lang.ClassNotFoundException from label02 to label03 with label09;
        catch java.lang.IllegalAccessException from label02 to label03 with label10;
        catch java.lang.reflect.InvocationTargetException from label02 to label03 with label11;
        catch java.lang.NoSuchMethodException from label02 to label03 with label12;
        catch java.lang.NoSuchFieldException from label02 to label03 with label08;
        catch java.lang.ClassNotFoundException from label03 to label04 with label09;
        catch java.lang.IllegalAccessException from label03 to label04 with label10;
        catch java.lang.reflect.InvocationTargetException from label03 to label04 with label11;
        catch java.lang.NoSuchMethodException from label03 to label04 with label12;
        catch java.lang.NoSuchFieldException from label03 to label04 with label08;
        catch java.lang.ClassNotFoundException from label05 to label07 with label09;
        catch java.lang.IllegalAccessException from label05 to label07 with label10;
        catch java.lang.reflect.InvocationTargetException from label05 to label07 with label11;
        catch java.lang.NoSuchMethodException from label05 to label07 with label12;
        catch java.lang.NoSuchFieldException from label05 to label07 with label08;
        catch java.lang.ClassNotFoundException from label07 to label08 with label09;
        catch java.lang.IllegalAccessException from label07 to label08 with label10;
        catch java.lang.reflect.InvocationTargetException from label07 to label08 with label11;
        catch java.lang.NoSuchMethodException from label07 to label08 with label12;
        catch java.lang.NoSuchFieldException from label07 to label08 with label08;
        catch java.lang.ClassNotFoundException from label13 to label14 with label09;
        catch java.lang.IllegalAccessException from label13 to label14 with label10;
        catch java.lang.reflect.InvocationTargetException from label13 to label14 with label11;
        catch java.lang.NoSuchMethodException from label13 to label14 with label12;
        catch java.lang.NoSuchFieldException from label13 to label14 with label08;
    }

    public boolean injectKeyEvent(android.view.KeyEvent) throws androidx.test.espresso.InjectEventSecurityException
    {
        java.lang.reflect.Method r0;
        java.lang.Object r1, $r4;
        java.lang.Object[] r2;
        int $i0;
        java.lang.Integer $r3;
        java.lang.Boolean $r5;
        java.lang.Throwable $r6, $r7, $r8, r11, r15, r17, r18, r23, r24;
        boolean $z0, z1;
        androidx.test.espresso.base.InputManagerEventInjectionStrategy r9;
        android.view.KeyEvent r10;
        java.lang.RuntimeException r12, r13, r19, r20;
        androidx.test.espresso.InjectEventSecurityException r14, r16, r21, r22;
        java.lang.reflect.InvocationTargetException r25;

        r9 := @this: androidx.test.espresso.base.InputManagerEventInjectionStrategy;

        r10 := @parameter0: android.view.KeyEvent;

     label1:
        r0 = r9.<androidx.test.espresso.base.InputManagerEventInjectionStrategy: java.lang.reflect.Method injectInputEventMethod>;

        r1 = r9.<androidx.test.espresso.base.InputManagerEventInjectionStrategy: java.lang.Object instanceInputManagerObject>;

        r2 = newarray (java.lang.Object)[2];

        r2[0] = r10;

     label2:
        $i0 = r9.<androidx.test.espresso.base.InputManagerEventInjectionStrategy: int syncEventMode>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        r2[1] = $r3;

        $r4 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, r2);

        $r5 = (java.lang.Boolean) $r4;

        z1 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

     label3:
        return z1;

     label4:
        $r8 := @caughtexception;

        r11 = $r8;

        r19 = new java.lang.RuntimeException;

        r12 = r19;

        specialinvoke r19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r11);

        r23 = (java.lang.Throwable) r12;

        throw r23;

     label5:
        r20 = new java.lang.RuntimeException;

        r13 = r20;

        specialinvoke r20.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r17);

        r24 = (java.lang.Throwable) r13;

        throw r24;

     label6:
        r21 = new androidx.test.espresso.InjectEventSecurityException;

        r14 = r21;

        specialinvoke r21.<androidx.test.espresso.InjectEventSecurityException: void <init>(java.lang.Throwable)>(r18);

        throw r14;

     label7:
        $r7 := @caughtexception;

        r15 = $r7;

        r22 = new androidx.test.espresso.InjectEventSecurityException;

        r16 = r22;

        specialinvoke r22.<androidx.test.espresso.InjectEventSecurityException: void <init>(java.lang.Throwable)>(r15);

        throw r16;

     label8:
        $r6 := @caughtexception;

        r17 = $r6;

        r25 = (java.lang.reflect.InvocationTargetException) r17;

        r18 = virtualinvoke r25.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        $z0 = r18 instanceof java.lang.SecurityException;

        if $z0 == 0 goto label5;

        goto label6;

        catch java.lang.IllegalAccessException from label1 to label2 with label4;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label8;
        catch java.lang.SecurityException from label1 to label2 with label7;
        catch java.lang.IllegalAccessException from label2 to label3 with label4;
        catch java.lang.reflect.InvocationTargetException from label2 to label3 with label8;
        catch java.lang.SecurityException from label2 to label3 with label7;
    }

    public boolean injectMotionEvent(android.view.MotionEvent, boolean) throws androidx.test.espresso.InjectEventSecurityException
    {
        androidx.test.espresso.base.InputManagerEventInjectionStrategy r0;
        android.view.MotionEvent r1;
        boolean z0, $z1;

        r0 := @this: androidx.test.espresso.base.InputManagerEventInjectionStrategy;

        r1 := @parameter0: android.view.MotionEvent;

        z0 := @parameter1: boolean;

        $z1 = specialinvoke r0.<androidx.test.espresso.base.InputManagerEventInjectionStrategy: boolean innerInjectMotionEvent(android.view.MotionEvent,boolean,boolean)>(r1, 1, z0);

        return $z1;
    }

    private boolean innerInjectMotionEvent(android.view.MotionEvent, boolean, boolean) throws androidx.test.espresso.InjectEventSecurityException
    {
        boolean z0, z1, $z2, z4, z5;
        java.lang.Object r0, $r3;
        java.lang.Object[] r1, r14;
        int $i0, i2, i3;
        java.lang.Integer $r2, $r5;
        java.lang.Boolean $r4;
        java.lang.Throwable $r7, $r8, $r9, $r10, r16, r18, r19, r20, r22, r29, r31;
        androidx.test.espresso.base.InputManagerEventInjectionStrategy r11;
        android.view.MotionEvent r12;
        java.lang.reflect.Method r13, r15;
        java.lang.RuntimeException r17, r24, r25, r28;
        androidx.test.espresso.InjectEventSecurityException r21, r23, r26, r27;
        java.lang.reflect.InvocationTargetException r30;

        r11 := @this: androidx.test.espresso.base.InputManagerEventInjectionStrategy;

        r12 := @parameter0: android.view.MotionEvent;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

     label01:
        i2 = virtualinvoke r12.<android.view.MotionEvent: int getSource()>();

     label02:
        $i0 = i2 & 2;

        if $i0 != 0 goto label07;

     label03:
        z4 = staticinvoke <androidx.test.espresso.base.InputManagerEventInjectionStrategy: boolean isFromTouchpadInGlassDevice(android.view.MotionEvent)>(r12);

     label04:
        if z4 != 0 goto label07;

     label05:
        r13 = r11.<androidx.test.espresso.base.InputManagerEventInjectionStrategy: java.lang.reflect.Method setSourceMotionMethod>;

        r14 = newarray (java.lang.Object)[1];

     label06:
        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4098);

        r14[0] = $r5;

        virtualinvoke r13.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r12, r14);

     label07:
        if z1 == 0 goto label12;

     label08:
        i3 = r11.<androidx.test.espresso.base.InputManagerEventInjectionStrategy: int syncEventMode>;

     label09:
        r15 = r11.<androidx.test.espresso.base.InputManagerEventInjectionStrategy: java.lang.reflect.Method injectInputEventMethod>;

        r0 = r11.<androidx.test.espresso.base.InputManagerEventInjectionStrategy: java.lang.Object instanceInputManagerObject>;

        r1 = newarray (java.lang.Object)[2];

        r1[0] = r12;

     label10:
        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        r1[1] = $r2;

        $r3 = virtualinvoke r15.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, r1);

        $r4 = (java.lang.Boolean) $r3;

        z5 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

     label11:
        return z5;

     label12:
        i3 = r11.<androidx.test.espresso.base.InputManagerEventInjectionStrategy: int asyncEventMode>;

        goto label09;

     label13:
        $r10 := @caughtexception;

        r16 = $r10;

        r25 = new java.lang.RuntimeException;

        r17 = r25;

        specialinvoke r25.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r16);

        r29 = (java.lang.Throwable) r17;

        throw r29;

     label14:
        $r8 := @caughtexception;

        r18 = $r8;

        throw r18;

     label15:
        $r9 := @caughtexception;

        r19 = $r9;

        r30 = (java.lang.reflect.InvocationTargetException) r19;

        r20 = virtualinvoke r30.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        $z2 = r20 instanceof java.lang.SecurityException;

        if $z2 == 0 goto label17;

        if z0 != 0 goto label18;

        r26 = new androidx.test.espresso.InjectEventSecurityException;

        r21 = r26;

        specialinvoke r26.<androidx.test.espresso.InjectEventSecurityException: void <init>(java.lang.String,java.lang.Throwable)>("Check if Espresso is clicking outside the app (system dialog, navigation bar if edge-to-edge is enabled, etc.).", r20);

        throw r21;

     label16:
        $r7 := @caughtexception;

        r22 = $r7;

        r27 = new androidx.test.espresso.InjectEventSecurityException;

        r23 = r27;

        specialinvoke r27.<androidx.test.espresso.InjectEventSecurityException: void <init>(java.lang.Throwable)>(r22);

        throw r23;

     label17:
        r28 = new java.lang.RuntimeException;

        r24 = r28;

        specialinvoke r28.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r19);

        r31 = (java.lang.Throwable) r24;

        throw r31;

     label18:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("EventInjectionStrategy", "Error performing a ViewAction! soft keyboard dismissal animation may have been in the way. Retrying once after: 1000 millis");

        staticinvoke <android.os.SystemClock: void sleep(long)>(1000L);

        specialinvoke r11.<androidx.test.espresso.base.InputManagerEventInjectionStrategy: boolean innerInjectMotionEvent(android.view.MotionEvent,boolean,boolean)>(r12, 0, z1);

        return 0;

        catch java.lang.IllegalAccessException from label01 to label02 with label13;
        catch java.lang.IllegalArgumentException from label01 to label02 with label14;
        catch java.lang.reflect.InvocationTargetException from label01 to label02 with label15;
        catch java.lang.SecurityException from label01 to label02 with label16;
        catch java.lang.IllegalAccessException from label03 to label04 with label13;
        catch java.lang.IllegalArgumentException from label03 to label04 with label14;
        catch java.lang.reflect.InvocationTargetException from label03 to label04 with label15;
        catch java.lang.SecurityException from label03 to label04 with label16;
        catch java.lang.IllegalAccessException from label05 to label06 with label13;
        catch java.lang.IllegalArgumentException from label05 to label06 with label14;
        catch java.lang.reflect.InvocationTargetException from label05 to label06 with label15;
        catch java.lang.SecurityException from label05 to label06 with label16;
        catch java.lang.IllegalAccessException from label06 to label07 with label13;
        catch java.lang.IllegalArgumentException from label06 to label07 with label14;
        catch java.lang.reflect.InvocationTargetException from label06 to label07 with label15;
        catch java.lang.SecurityException from label06 to label07 with label16;
        catch java.lang.IllegalAccessException from label08 to label10 with label13;
        catch java.lang.IllegalArgumentException from label08 to label10 with label14;
        catch java.lang.reflect.InvocationTargetException from label08 to label10 with label15;
        catch java.lang.SecurityException from label08 to label10 with label16;
        catch java.lang.IllegalAccessException from label10 to label11 with label13;
        catch java.lang.IllegalArgumentException from label10 to label11 with label14;
        catch java.lang.reflect.InvocationTargetException from label10 to label11 with label15;
        catch java.lang.SecurityException from label10 to label11 with label16;
        catch java.lang.IllegalAccessException from label12 to label13 with label13;
        catch java.lang.IllegalArgumentException from label12 to label13 with label14;
        catch java.lang.reflect.InvocationTargetException from label12 to label13 with label15;
        catch java.lang.SecurityException from label12 to label13 with label16;
    }

    private static boolean isFromTouchpadInGlassDevice(android.view.MotionEvent)
    {
        java.lang.String $r0, $r1, $r2;
        boolean $z0, $z1, $z2, z3;
        android.view.MotionEvent r3;
        int $i0, $i1;

        r3 := @parameter0: android.view.MotionEvent;

        $r0 = <android.os.Build: java.lang.String DEVICE>;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean contains(java.lang.CharSequence)>("glass");

        if $z0 != 0 goto label1;

        $r1 = <android.os.Build: java.lang.String DEVICE>;

        $z1 = virtualinvoke $r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("Glass");

        if $z1 != 0 goto label1;

        $r2 = <android.os.Build: java.lang.String DEVICE>;

        $z2 = virtualinvoke $r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("wingman");

        if $z2 == 0 goto label3;

     label1:
        $i0 = virtualinvoke r3.<android.view.MotionEvent: int getSource()>();

        $i1 = $i0 & 1048584;

        if $i1 == 0 goto label3;

        z3 = 1;

     label2:
        return z3;

     label3:
        z3 = 0;

        goto label2;
    }

