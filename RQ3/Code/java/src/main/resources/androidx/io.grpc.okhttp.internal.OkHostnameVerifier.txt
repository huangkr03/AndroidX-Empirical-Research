io.grpc.okhttp.internal.OkHostnameVerifier
<io.grpc.okhttp.internal.OkHostnameVerifier: io.grpc.okhttp.internal.OkHostnameVerifier INSTANCE>
<io.grpc.okhttp.internal.OkHostnameVerifier: java.util.regex.Pattern VERIFY_AS_IP_ADDRESS>
    static void <clinit>()
    {
        java.util.regex.Pattern $r0;
        io.grpc.okhttp.internal.OkHostnameVerifier $r1;

        $r1 = new io.grpc.okhttp.internal.OkHostnameVerifier;

        specialinvoke $r1.<io.grpc.okhttp.internal.OkHostnameVerifier: void <init>()>();

        <io.grpc.okhttp.internal.OkHostnameVerifier: io.grpc.okhttp.internal.OkHostnameVerifier INSTANCE> = $r1;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([\\d.]+)");

        <io.grpc.okhttp.internal.OkHostnameVerifier: java.util.regex.Pattern VERIFY_AS_IP_ADDRESS> = $r0;

        return;
    }

    private void <init>()
    {
        io.grpc.okhttp.internal.OkHostnameVerifier $r0;

        $r0 := @this: io.grpc.okhttp.internal.OkHostnameVerifier;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static java.util.List getSubjectAltNames(java.security.cert.X509Certificate, int)
    {
        int $i0, $i1;
        java.util.ArrayList $r0, r9;
        java.security.cert.X509Certificate $r1;
        java.util.Collection $r2;
        java.util.List $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.Integer $r6;
        java.lang.String $r7;
        java.lang.Throwable $r8;

        $r1 := @parameter0: java.security.cert.X509Certificate;

        $i0 := @parameter1: int;

        r9 = new java.util.ArrayList;

        $r0 = r9;

        specialinvoke r9.<java.util.ArrayList: void <init>()>();

     label01:
        $r2 = virtualinvoke $r1.<java.security.cert.X509Certificate: java.util.Collection getSubjectAlternativeNames()>();

     label02:
        if $r2 != null goto label03;

        $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r3;

     label03:
        $r4 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

     label05:
        if $z0 == 0 goto label18;

     label06:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

     label07:
        $r3 = (java.util.List) $r5;

        if $r3 == null goto label04;

     label08:
        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

     label09:
        if $i1 < 2 goto label04;

     label10:
        $r5 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0);

     label11:
        $r6 = (java.lang.Integer) $r5;

        if $r6 == null goto label04;

     label12:
        $i1 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

     label13:
        if $i1 != $i0 goto label04;

     label14:
        $r5 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(1);

     label15:
        $r7 = (java.lang.String) $r5;

        if $r7 == null goto label04;

        $r3 = (java.util.List) $r0;

     label16:
        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r7);

     label17:
        goto label04;

     label18:
        $r3 = (java.util.List) $r0;

        return $r3;

     label19:
        $r8 := @caughtexception;

        $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r3;

        catch java.security.cert.CertificateParsingException from label01 to label02 with label19;
        catch java.security.cert.CertificateParsingException from label03 to label05 with label19;
        catch java.security.cert.CertificateParsingException from label06 to label07 with label19;
        catch java.security.cert.CertificateParsingException from label08 to label09 with label19;
        catch java.security.cert.CertificateParsingException from label10 to label11 with label19;
        catch java.security.cert.CertificateParsingException from label12 to label13 with label19;
        catch java.security.cert.CertificateParsingException from label14 to label15 with label19;
        catch java.security.cert.CertificateParsingException from label16 to label17 with label19;
    }

    static boolean verifyAsIpAddress(java.lang.String)
    {
        java.util.regex.Pattern $r0;
        java.lang.String $r1;
        java.util.regex.Matcher $r2;
        boolean $z0;

        $r1 := @parameter0: java.lang.String;

        $r0 = <io.grpc.okhttp.internal.OkHostnameVerifier: java.util.regex.Pattern VERIFY_AS_IP_ADDRESS>;

        $r2 = virtualinvoke $r0.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r1);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean matches()>();

        return $z0;
    }

    private boolean verifyHostName(java.lang.String, java.lang.String)
    {
        io.grpc.okhttp.internal.OkHostnameVerifier $r0;
        java.lang.String $r1, $r2, $r5;
        int $i0, $i1;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.util.Locale $r4;

        $r0 := @this: io.grpc.okhttp.internal.OkHostnameVerifier;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        if $r1 == null goto label11;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 == 0 goto label11;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>(".");

        if $z0 != 0 goto label11;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>("..");

        if $z0 == 0 goto label01;

        goto label11;

     label01:
        if $r2 == null goto label11;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 == 0 goto label11;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>(".");

        if $z0 != 0 goto label11;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean endsWith(java.lang.String)>("..");

        if $z0 == 0 goto label02;

        goto label11;

     label02:
        $z0 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>(".");

        if $z0 != 0 goto label03;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label03;

     label03:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean endsWith(java.lang.String)>(".");

        if $z0 != 0 goto label04;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label04;

     label04:
        $r4 = <java.util.Locale: java.util.Locale US>;

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r4);

        $z0 = virtualinvoke $r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("*");

        if $z0 != 0 goto label05;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        return $z0;

     label05:
        $r5 = "*.";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("*.");

        if $z0 == 0 goto label11;

        $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(int,int)>(42, 1);

        if $i0 == -1 goto label06;

        return 0;

     label06:
        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label07;

        return 0;

     label07:
        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label08;

        return 0;

     label08:
        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>(1);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>($r2);

        if $z0 != 0 goto label09;

        return 0;

     label09:
        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i0 = $i0 - $i1;

        if $i0 <= 0 goto label10;

        $i0 = $i0 + -1;

        $i0 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(int,int)>(46, $i0);

        if $i0 == -1 goto label10;

        return 0;

     label10:
        return 1;

     label11:
        return 0;
    }

    private boolean verifyHostName(java.lang.String, java.security.cert.X509Certificate)
    {
        io.grpc.okhttp.internal.OkHostnameVerifier $r0;
        java.lang.String $r1, $r6;
        java.security.cert.X509Certificate $r2;
        java.util.Locale $r3;
        java.util.List $r4;
        int $i0, $i1;
        boolean $z0;
        java.lang.Object $r5;
        javax.security.auth.x500.X500Principal $r7;
        io.grpc.okhttp.internal.DistinguishedNameParser $r8;

        $r0 := @this: io.grpc.okhttp.internal.OkHostnameVerifier;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.security.cert.X509Certificate;

        $r3 = <java.util.Locale: java.util.Locale US>;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r3);

        $r4 = staticinvoke <io.grpc.okhttp.internal.OkHostnameVerifier: java.util.List getSubjectAltNames(java.security.cert.X509Certificate,int)>($r2, 2);

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        $i1 = 0;

        $z0 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i1);

        $r6 = (java.lang.String) $r5;

        $z0 = specialinvoke $r0.<io.grpc.okhttp.internal.OkHostnameVerifier: boolean verifyHostName(java.lang.String,java.lang.String)>($r1, $r6);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $i1 = $i1 + 1;

        $z0 = 1;

        goto label1;

     label3:
        if $z0 != 0 goto label4;

        $r7 = virtualinvoke $r2.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>();

        $r8 = new io.grpc.okhttp.internal.DistinguishedNameParser;

        specialinvoke $r8.<io.grpc.okhttp.internal.DistinguishedNameParser: void <init>(javax.security.auth.x500.X500Principal)>($r7);

        $r6 = virtualinvoke $r8.<io.grpc.okhttp.internal.DistinguishedNameParser: java.lang.String findMostSpecific(java.lang.String)>("cn");

        if $r6 == null goto label4;

        $z0 = specialinvoke $r0.<io.grpc.okhttp.internal.OkHostnameVerifier: boolean verifyHostName(java.lang.String,java.lang.String)>($r1, $r6);

        return $z0;

     label4:
        return 0;
    }

    private boolean verifyIpAddress(java.lang.String, java.security.cert.X509Certificate)
    {
        io.grpc.okhttp.internal.OkHostnameVerifier $r0;
        java.lang.String $r1, $r5;
        java.security.cert.X509Certificate $r2;
        java.util.List $r3;
        int $i0, $i1;
        java.lang.Object $r4;
        boolean $z0;

        $r0 := @this: io.grpc.okhttp.internal.OkHostnameVerifier;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.security.cert.X509Certificate;

        $r3 = staticinvoke <io.grpc.okhttp.internal.OkHostnameVerifier: java.util.List getSubjectAltNames(java.security.cert.X509Certificate,int)>($r2, 7);

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i1);

        $r5 = (java.lang.String) $r4;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r5);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public boolean verify(java.lang.String, java.security.cert.X509Certificate)
    {
        io.grpc.okhttp.internal.OkHostnameVerifier $r0;
        java.security.cert.X509Certificate $r1;
        java.lang.String $r2;
        boolean $z0;

        $r0 := @this: io.grpc.okhttp.internal.OkHostnameVerifier;

        $r2 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.security.cert.X509Certificate;

        $z0 = staticinvoke <io.grpc.okhttp.internal.OkHostnameVerifier: boolean verifyAsIpAddress(java.lang.String)>($r2);

        if $z0 == 0 goto label1;

        $z0 = specialinvoke $r0.<io.grpc.okhttp.internal.OkHostnameVerifier: boolean verifyIpAddress(java.lang.String,java.security.cert.X509Certificate)>($r2, $r1);

        return $z0;

     label1:
        $z0 = specialinvoke $r0.<io.grpc.okhttp.internal.OkHostnameVerifier: boolean verifyHostName(java.lang.String,java.security.cert.X509Certificate)>($r2, $r1);

        return $z0;
    }

    public boolean verify(java.lang.String, javax.net.ssl.SSLSession)
    {
        io.grpc.okhttp.internal.OkHostnameVerifier $r0;
        java.lang.String $r1;
        javax.net.ssl.SSLSession $r2;
        java.security.cert.Certificate[] $r3;
        java.security.cert.Certificate $r4;
        java.security.cert.X509Certificate $r5;
        boolean $z0;
        java.lang.Throwable $r6;

        $r0 := @this: io.grpc.okhttp.internal.OkHostnameVerifier;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: javax.net.ssl.SSLSession;

     label1:
        $r3 = interfaceinvoke $r2.<javax.net.ssl.SSLSession: java.security.cert.Certificate[] getPeerCertificates()>();

     label2:
        $r4 = $r3[0];

        $r5 = (java.security.cert.X509Certificate) $r4;

     label3:
        $z0 = virtualinvoke $r0.<io.grpc.okhttp.internal.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>($r1, $r5);

     label4:
        return $z0;

     label5:
        $r6 := @caughtexception;

        return 0;

        catch javax.net.ssl.SSLException from label1 to label2 with label5;
        catch javax.net.ssl.SSLException from label3 to label4 with label5;
    }

