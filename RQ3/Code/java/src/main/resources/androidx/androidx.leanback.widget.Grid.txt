androidx.leanback.widget.Grid
<androidx.leanback.widget.Grid: int START_DEFAULT>
<androidx.leanback.widget.Grid: java.lang.Object[] mTmpItem>
<androidx.leanback.widget.Grid: androidx.leanback.widget.Grid$Provider mProvider>
<androidx.leanback.widget.Grid: boolean mReversedFlow>
<androidx.leanback.widget.Grid: int mSpacing>
<androidx.leanback.widget.Grid: int mNumRows>
<androidx.leanback.widget.Grid: int mFirstVisibleIndex>
<androidx.leanback.widget.Grid: int mLastVisibleIndex>
<androidx.leanback.widget.Grid: androidx.collection.CircularIntArray[] mTmpItemPositionsInRows>
<androidx.leanback.widget.Grid: int mStartIndex>
    void <init>()
    {
        androidx.leanback.widget.Grid r0;
        java.lang.Object[] $r1;

        r0 := @this: androidx.leanback.widget.Grid;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (java.lang.Object)[1];

        r0.<androidx.leanback.widget.Grid: java.lang.Object[] mTmpItem> = $r1;

        r0.<androidx.leanback.widget.Grid: int mFirstVisibleIndex> = -1;

        r0.<androidx.leanback.widget.Grid: int mLastVisibleIndex> = -1;

        r0.<androidx.leanback.widget.Grid: int mStartIndex> = -1;

        return;
    }

    public static androidx.leanback.widget.Grid createGrid(int)
    {
        int i0;
        androidx.leanback.widget.StaggeredGridDefault $r0;
        androidx.leanback.widget.SingleRow $r1;
        androidx.leanback.widget.Grid r2;

        i0 := @parameter0: int;

        if i0 != 1 goto label1;

        $r1 = new androidx.leanback.widget.SingleRow;

        specialinvoke $r1.<androidx.leanback.widget.SingleRow: void <init>()>();

        r2 = $r1;

        goto label2;

     label1:
        $r0 = new androidx.leanback.widget.StaggeredGridDefault;

        specialinvoke $r0.<androidx.leanback.widget.StaggeredGridDefault: void <init>()>();

        r2 = $r0;

        virtualinvoke r2.<androidx.leanback.widget.Grid: void setNumRows(int)>(i0);

     label2:
        return r2;
    }

    public final void setSpacing(int)
    {
        androidx.leanback.widget.Grid r0;
        int i0;

        r0 := @this: androidx.leanback.widget.Grid;

        i0 := @parameter0: int;

        r0.<androidx.leanback.widget.Grid: int mSpacing> = i0;

        return;
    }

    public final void setReversedFlow(boolean)
    {
        androidx.leanback.widget.Grid r0;
        boolean z0;

        r0 := @this: androidx.leanback.widget.Grid;

        z0 := @parameter0: boolean;

        r0.<androidx.leanback.widget.Grid: boolean mReversedFlow> = z0;

        return;
    }

    public boolean isReversedFlow()
    {
        androidx.leanback.widget.Grid r0;
        boolean $z0;

        r0 := @this: androidx.leanback.widget.Grid;

        $z0 = r0.<androidx.leanback.widget.Grid: boolean mReversedFlow>;

        return $z0;
    }

    public void setProvider(androidx.leanback.widget.Grid$Provider)
    {
        androidx.leanback.widget.Grid r0;
        androidx.leanback.widget.Grid$Provider r1;

        r0 := @this: androidx.leanback.widget.Grid;

        r1 := @parameter0: androidx.leanback.widget.Grid$Provider;

        r0.<androidx.leanback.widget.Grid: androidx.leanback.widget.Grid$Provider mProvider> = r1;

        return;
    }

    public void setStart(int)
    {
        androidx.leanback.widget.Grid r0;
        int i0;

        r0 := @this: androidx.leanback.widget.Grid;

        i0 := @parameter0: int;

        r0.<androidx.leanback.widget.Grid: int mStartIndex> = i0;

        return;
    }

    public int getNumRows()
    {
        androidx.leanback.widget.Grid r0;
        int $i0;

        r0 := @this: androidx.leanback.widget.Grid;

        $i0 = r0.<androidx.leanback.widget.Grid: int mNumRows>;

        return $i0;
    }

    void setNumRows(int)
    {
        androidx.leanback.widget.Grid r0;
        int i0, $i1, $i2, $i3, i4;
        androidx.collection.CircularIntArray[] $r1, $r3;
        androidx.collection.CircularIntArray $r2;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: androidx.leanback.widget.Grid;

        i0 := @parameter0: int;

        if i0 > 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label1:
        $i1 = r0.<androidx.leanback.widget.Grid: int mNumRows>;

        if $i1 != i0 goto label2;

        return;

     label2:
        r0.<androidx.leanback.widget.Grid: int mNumRows> = i0;

        $i2 = r0.<androidx.leanback.widget.Grid: int mNumRows>;

        $r1 = newarray (androidx.collection.CircularIntArray)[$i2];

        r0.<androidx.leanback.widget.Grid: androidx.collection.CircularIntArray[] mTmpItemPositionsInRows> = $r1;

        i4 = 0;

     label3:
        $i3 = r0.<androidx.leanback.widget.Grid: int mNumRows>;

        if i4 >= $i3 goto label4;

        $r3 = r0.<androidx.leanback.widget.Grid: androidx.collection.CircularIntArray[] mTmpItemPositionsInRows>;

        $r2 = new androidx.collection.CircularIntArray;

        specialinvoke $r2.<androidx.collection.CircularIntArray: void <init>()>();

        $r3[i4] = $r2;

        i4 = i4 + 1;

        goto label3;

     label4:
        return;
    }

    public final int getFirstVisibleIndex()
    {
        androidx.leanback.widget.Grid r0;
        int $i0;

        r0 := @this: androidx.leanback.widget.Grid;

        $i0 = r0.<androidx.leanback.widget.Grid: int mFirstVisibleIndex>;

        return $i0;
    }

    public final int getLastVisibleIndex()
    {
        androidx.leanback.widget.Grid r0;
        int $i0;

        r0 := @this: androidx.leanback.widget.Grid;

        $i0 = r0.<androidx.leanback.widget.Grid: int mLastVisibleIndex>;

        return $i0;
    }

    public void resetVisibleIndex()
    {
        androidx.leanback.widget.Grid r0;

        r0 := @this: androidx.leanback.widget.Grid;

        r0.<androidx.leanback.widget.Grid: int mLastVisibleIndex> = -1;

        r0.<androidx.leanback.widget.Grid: int mFirstVisibleIndex> = -1;

        return;
    }

    public void invalidateItemsAfter(int)
    {
        androidx.leanback.widget.Grid r0;
        int i0, $i1, $i2, $i3, $i4;

        r0 := @this: androidx.leanback.widget.Grid;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        return;

     label1:
        $i1 = r0.<androidx.leanback.widget.Grid: int mLastVisibleIndex>;

        if $i1 >= 0 goto label2;

        return;

     label2:
        $i2 = r0.<androidx.leanback.widget.Grid: int mLastVisibleIndex>;

        if $i2 < i0 goto label3;

        $i4 = i0 - 1;

        r0.<androidx.leanback.widget.Grid: int mLastVisibleIndex> = $i4;

     label3:
        specialinvoke r0.<androidx.leanback.widget.Grid: void resetVisibleIndexIfEmpty()>();

        $i3 = virtualinvoke r0.<androidx.leanback.widget.Grid: int getFirstVisibleIndex()>();

        if $i3 >= 0 goto label4;

        virtualinvoke r0.<androidx.leanback.widget.Grid: void setStart(int)>(i0);

     label4:
        return;
    }

    public final int getRowIndex(int)
    {
        androidx.leanback.widget.Grid r0;
        int i0, $i1;
        androidx.leanback.widget.Grid$Location r1;

        r0 := @this: androidx.leanback.widget.Grid;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<androidx.leanback.widget.Grid: androidx.leanback.widget.Grid$Location getLocation(int)>(i0);

        if r1 != null goto label1;

        return -1;

     label1:
        $i1 = r1.<androidx.leanback.widget.Grid$Location: int mRow>;

        return $i1;
    }

<androidx.leanback.widget.Grid: androidx.leanback.widget.Grid$Location getLocation(int)>
    public final int findRowMin(boolean, int[])
    {
        androidx.leanback.widget.Grid r0;
        boolean z0, $z1;
        int[] r1;
        int $i0, $i1;

        r0 := @this: androidx.leanback.widget.Grid;

        z0 := @parameter0: boolean;

        r1 := @parameter1: int[];

        $z1 = r0.<androidx.leanback.widget.Grid: boolean mReversedFlow>;

        if $z1 == 0 goto label1;

        $i1 = r0.<androidx.leanback.widget.Grid: int mLastVisibleIndex>;

        goto label2;

     label1:
        $i1 = r0.<androidx.leanback.widget.Grid: int mFirstVisibleIndex>;

     label2:
        $i0 = virtualinvoke r0.<androidx.leanback.widget.Grid: int findRowMin(boolean,int,int[])>(z0, $i1, r1);

        return $i0;
    }

<androidx.leanback.widget.Grid: int findRowMin(boolean,int,int[])>
    public final int findRowMax(boolean, int[])
    {
        androidx.leanback.widget.Grid r0;
        boolean z0, $z1;
        int[] r1;
        int $i0, $i1;

        r0 := @this: androidx.leanback.widget.Grid;

        z0 := @parameter0: boolean;

        r1 := @parameter1: int[];

        $z1 = r0.<androidx.leanback.widget.Grid: boolean mReversedFlow>;

        if $z1 == 0 goto label1;

        $i1 = r0.<androidx.leanback.widget.Grid: int mFirstVisibleIndex>;

        goto label2;

     label1:
        $i1 = r0.<androidx.leanback.widget.Grid: int mLastVisibleIndex>;

     label2:
        $i0 = virtualinvoke r0.<androidx.leanback.widget.Grid: int findRowMax(boolean,int,int[])>(z0, $i1, r1);

        return $i0;
    }

<androidx.leanback.widget.Grid: int findRowMax(boolean,int,int[])>
    protected final boolean checkAppendOverLimit(int)
    {
        androidx.leanback.widget.Grid r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0, $z1;

        r0 := @this: androidx.leanback.widget.Grid;

        i0 := @parameter0: int;

        $i1 = r0.<androidx.leanback.widget.Grid: int mLastVisibleIndex>;

        if $i1 >= 0 goto label1;

        return 0;

     label1:
        $z0 = r0.<androidx.leanback.widget.Grid: boolean mReversedFlow>;

        if $z0 == 0 goto label3;

        $i5 = virtualinvoke r0.<androidx.leanback.widget.Grid: int findRowMin(boolean,int[])>(1, null);

        $i6 = r0.<androidx.leanback.widget.Grid: int mSpacing>;

        $i7 = i0 + $i6;

        if $i5 > $i7 goto label2;

        $z1 = 1;

        goto label5;

     label2:
        $z1 = 0;

        goto label5;

     label3:
        $i2 = virtualinvoke r0.<androidx.leanback.widget.Grid: int findRowMax(boolean,int[])>(0, null);

        $i3 = r0.<androidx.leanback.widget.Grid: int mSpacing>;

        $i4 = i0 - $i3;

        if $i2 < $i4 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        return $z1;
    }

    protected final boolean checkPrependOverLimit(int)
    {
        androidx.leanback.widget.Grid r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0, $z1;

        r0 := @this: androidx.leanback.widget.Grid;

        i0 := @parameter0: int;

        $i1 = r0.<androidx.leanback.widget.Grid: int mLastVisibleIndex>;

        if $i1 >= 0 goto label1;

        return 0;

     label1:
        $z0 = r0.<androidx.leanback.widget.Grid: boolean mReversedFlow>;

        if $z0 == 0 goto label3;

        $i5 = virtualinvoke r0.<androidx.leanback.widget.Grid: int findRowMax(boolean,int[])>(0, null);

        $i6 = r0.<androidx.leanback.widget.Grid: int mSpacing>;

        $i7 = i0 - $i6;

        if $i5 < $i7 goto label2;

        $z1 = 1;

        goto label5;

     label2:
        $z1 = 0;

        goto label5;

     label3:
        $i2 = virtualinvoke r0.<androidx.leanback.widget.Grid: int findRowMin(boolean,int[])>(1, null);

        $i3 = r0.<androidx.leanback.widget.Grid: int mSpacing>;

        $i4 = i0 + $i3;

        if $i2 > $i4 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        return $z1;
    }

<androidx.leanback.widget.Grid: androidx.collection.CircularIntArray[] getItemPositionsInRows(int,int)>
    public final androidx.collection.CircularIntArray[] getItemPositionsInRows()
    {
        androidx.leanback.widget.Grid r0;
        int $i0, $i1;
        androidx.collection.CircularIntArray[] $r1;

        r0 := @this: androidx.leanback.widget.Grid;

        $i0 = virtualinvoke r0.<androidx.leanback.widget.Grid: int getFirstVisibleIndex()>();

        $i1 = virtualinvoke r0.<androidx.leanback.widget.Grid: int getLastVisibleIndex()>();

        $r1 = virtualinvoke r0.<androidx.leanback.widget.Grid: androidx.collection.CircularIntArray[] getItemPositionsInRows(int,int)>($i0, $i1);

        return $r1;
    }

    public final boolean prependOneColumnVisibleItems()
    {
        androidx.leanback.widget.Grid r0;
        boolean $z0, $z1;
        int $i0;

        r0 := @this: androidx.leanback.widget.Grid;

        $z0 = r0.<androidx.leanback.widget.Grid: boolean mReversedFlow>;

        if $z0 == 0 goto label1;

        $i0 = -2147483648;

        goto label2;

     label1:
        $i0 = 2147483647;

     label2:
        $z1 = virtualinvoke r0.<androidx.leanback.widget.Grid: boolean prependVisibleItems(int,boolean)>($i0, 1);

        return $z1;
    }

    public final void prependVisibleItems(int)
    {
        androidx.leanback.widget.Grid r0;
        int i0;

        r0 := @this: androidx.leanback.widget.Grid;

        i0 := @parameter0: int;

        virtualinvoke r0.<androidx.leanback.widget.Grid: boolean prependVisibleItems(int,boolean)>(i0, 0);

        return;
    }

<androidx.leanback.widget.Grid: boolean prependVisibleItems(int,boolean)>
    public boolean appendOneColumnVisibleItems()
    {
        androidx.leanback.widget.Grid r0;
        boolean $z0, $z1;
        int $i0;

        r0 := @this: androidx.leanback.widget.Grid;

        $z0 = r0.<androidx.leanback.widget.Grid: boolean mReversedFlow>;

        if $z0 == 0 goto label1;

        $i0 = 2147483647;

        goto label2;

     label1:
        $i0 = -2147483648;

     label2:
        $z1 = virtualinvoke r0.<androidx.leanback.widget.Grid: boolean appendVisibleItems(int,boolean)>($i0, 1);

        return $z1;
    }

    public final void appendVisibleItems(int)
    {
        androidx.leanback.widget.Grid r0;
        int i0;

        r0 := @this: androidx.leanback.widget.Grid;

        i0 := @parameter0: int;

        virtualinvoke r0.<androidx.leanback.widget.Grid: boolean appendVisibleItems(int,boolean)>(i0, 0);

        return;
    }

<androidx.leanback.widget.Grid: boolean appendVisibleItems(int,boolean)>
    public void removeInvisibleItemsAtEnd(int, int)
    {
        androidx.leanback.widget.Grid r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        boolean z0, $z1, $z2;
        androidx.leanback.widget.Grid$Provider $r1, $r2, $r3;

        r0 := @this: androidx.leanback.widget.Grid;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        $i3 = r0.<androidx.leanback.widget.Grid: int mLastVisibleIndex>;

        $i2 = r0.<androidx.leanback.widget.Grid: int mFirstVisibleIndex>;

        if $i3 < $i2 goto label6;

        $i4 = r0.<androidx.leanback.widget.Grid: int mLastVisibleIndex>;

        if $i4 <= i0 goto label6;

        $z1 = r0.<androidx.leanback.widget.Grid: boolean mReversedFlow>;

        if $z1 != 0 goto label3;

        $r3 = r0.<androidx.leanback.widget.Grid: androidx.leanback.widget.Grid$Provider mProvider>;

        $i10 = r0.<androidx.leanback.widget.Grid: int mLastVisibleIndex>;

        $i11 = interfaceinvoke $r3.<androidx.leanback.widget.Grid$Provider: int getEdge(int)>($i10);

        if $i11 < i1 goto label2;

        $z2 = 1;

        goto label5;

     label2:
        $z2 = 0;

        goto label5;

     label3:
        $r1 = r0.<androidx.leanback.widget.Grid: androidx.leanback.widget.Grid$Provider mProvider>;

        $i5 = r0.<androidx.leanback.widget.Grid: int mLastVisibleIndex>;

        $i6 = interfaceinvoke $r1.<androidx.leanback.widget.Grid$Provider: int getEdge(int)>($i5);

        if $i6 > i1 goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        z0 = $z2;

        if z0 == 0 goto label6;

        $r2 = r0.<androidx.leanback.widget.Grid: androidx.leanback.widget.Grid$Provider mProvider>;

        $i7 = r0.<androidx.leanback.widget.Grid: int mLastVisibleIndex>;

        interfaceinvoke $r2.<androidx.leanback.widget.Grid$Provider: void removeItem(int)>($i7);

        $i8 = r0.<androidx.leanback.widget.Grid: int mLastVisibleIndex>;

        $i9 = $i8 - 1;

        r0.<androidx.leanback.widget.Grid: int mLastVisibleIndex> = $i9;

        goto label1;

     label6:
        specialinvoke r0.<androidx.leanback.widget.Grid: void resetVisibleIndexIfEmpty()>();

        return;
    }

    public void removeInvisibleItemsAtFront(int, int)
    {
        androidx.leanback.widget.Grid r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        boolean z0, $z1, $z2;
        androidx.leanback.widget.Grid$Provider $r1, $r2, $r3, $r4;

        r0 := @this: androidx.leanback.widget.Grid;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        $i4 = r0.<androidx.leanback.widget.Grid: int mLastVisibleIndex>;

        $i3 = r0.<androidx.leanback.widget.Grid: int mFirstVisibleIndex>;

        if $i4 < $i3 goto label6;

        $i5 = r0.<androidx.leanback.widget.Grid: int mFirstVisibleIndex>;

        if $i5 >= i0 goto label6;

        $r1 = r0.<androidx.leanback.widget.Grid: androidx.leanback.widget.Grid$Provider mProvider>;

        $i6 = r0.<androidx.leanback.widget.Grid: int mFirstVisibleIndex>;

        i2 = interfaceinvoke $r1.<androidx.leanback.widget.Grid$Provider: int getSize(int)>($i6);

        $z1 = r0.<androidx.leanback.widget.Grid: boolean mReversedFlow>;

        if $z1 != 0 goto label3;

        $r4 = r0.<androidx.leanback.widget.Grid: androidx.leanback.widget.Grid$Provider mProvider>;

        $i13 = r0.<androidx.leanback.widget.Grid: int mFirstVisibleIndex>;

        $i14 = interfaceinvoke $r4.<androidx.leanback.widget.Grid$Provider: int getEdge(int)>($i13);

        $i15 = $i14 + i2;

        if $i15 > i1 goto label2;

        $z2 = 1;

        goto label5;

     label2:
        $z2 = 0;

        goto label5;

     label3:
        $r2 = r0.<androidx.leanback.widget.Grid: androidx.leanback.widget.Grid$Provider mProvider>;

        $i7 = r0.<androidx.leanback.widget.Grid: int mFirstVisibleIndex>;

        $i8 = interfaceinvoke $r2.<androidx.leanback.widget.Grid$Provider: int getEdge(int)>($i7);

        $i9 = $i8 - i2;

        if $i9 < i1 goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        z0 = $z2;

        if z0 == 0 goto label6;

        $r3 = r0.<androidx.leanback.widget.Grid: androidx.leanback.widget.Grid$Provider mProvider>;

        $i10 = r0.<androidx.leanback.widget.Grid: int mFirstVisibleIndex>;

        interfaceinvoke $r3.<androidx.leanback.widget.Grid$Provider: void removeItem(int)>($i10);

        $i11 = r0.<androidx.leanback.widget.Grid: int mFirstVisibleIndex>;

        $i12 = $i11 + 1;

        r0.<androidx.leanback.widget.Grid: int mFirstVisibleIndex> = $i12;

        goto label1;

     label6:
        specialinvoke r0.<androidx.leanback.widget.Grid: void resetVisibleIndexIfEmpty()>();

        return;
    }

    private void resetVisibleIndexIfEmpty()
    {
        androidx.leanback.widget.Grid r0;
        int $i0, $i1;

        r0 := @this: androidx.leanback.widget.Grid;

        $i1 = r0.<androidx.leanback.widget.Grid: int mLastVisibleIndex>;

        $i0 = r0.<androidx.leanback.widget.Grid: int mFirstVisibleIndex>;

        if $i1 >= $i0 goto label1;

        virtualinvoke r0.<androidx.leanback.widget.Grid: void resetVisibleIndex()>();

     label1:
        return;
    }

    public void fillDisappearingItems(int[], int, android.util.SparseIntArray)
    {
        androidx.leanback.widget.Grid r0;
        int[] r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, i23, i24, i25, i26, i27, i28, i29, $i30, i31, i32, i33, i34, i35, i36;
        android.util.SparseIntArray r2;
        boolean $z0, $z1, $z2, $z3;
        androidx.leanback.widget.Grid$Provider $r3, $r5, $r8, $r9, $r10, $r11, $r13, $r16, $r17, $r18;
        java.lang.Object[] $r4, $r6, $r12, $r14;
        java.lang.Object $r7, $r15;

        r0 := @this: androidx.leanback.widget.Grid;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        r2 := @parameter2: android.util.SparseIntArray;

        i1 = virtualinvoke r0.<androidx.leanback.widget.Grid: int getLastVisibleIndex()>();

        if i1 < 0 goto label01;

        $i22 = staticinvoke <java.util.Arrays: int binarySearch(int[],int,int,int)>(r1, 0, i0, i1);

        goto label02;

     label01:
        $i22 = 0;

     label02:
        i2 = $i22;

        if i2 >= 0 goto label09;

        $i9 = neg i2;

        i23 = $i9 - 1;

        $z2 = r0.<androidx.leanback.widget.Grid: boolean mReversedFlow>;

        if $z2 == 0 goto label03;

        $r17 = r0.<androidx.leanback.widget.Grid: androidx.leanback.widget.Grid$Provider mProvider>;

        $i18 = interfaceinvoke $r17.<androidx.leanback.widget.Grid$Provider: int getEdge(int)>(i1);

        $r18 = r0.<androidx.leanback.widget.Grid: androidx.leanback.widget.Grid$Provider mProvider>;

        $i19 = interfaceinvoke $r18.<androidx.leanback.widget.Grid$Provider: int getSize(int)>(i1);

        $i21 = $i18 - $i19;

        $i20 = r0.<androidx.leanback.widget.Grid: int mSpacing>;

        i24 = $i21 - $i20;

        goto label04;

     label03:
        $r10 = r0.<androidx.leanback.widget.Grid: androidx.leanback.widget.Grid$Provider mProvider>;

        $i10 = interfaceinvoke $r10.<androidx.leanback.widget.Grid$Provider: int getEdge(int)>(i1);

        $r11 = r0.<androidx.leanback.widget.Grid: androidx.leanback.widget.Grid$Provider mProvider>;

        $i11 = interfaceinvoke $r11.<androidx.leanback.widget.Grid$Provider: int getSize(int)>(i1);

        $i13 = $i10 + $i11;

        $i12 = r0.<androidx.leanback.widget.Grid: int mSpacing>;

        i24 = $i13 + $i12;

     label04:
        i25 = i23;

     label05:
        if i25 >= i0 goto label09;

        i26 = r1[i25];

        i27 = virtualinvoke r2.<android.util.SparseIntArray: int get(int)>(i26);

        if i27 >= 0 goto label06;

        i27 = 0;

     label06:
        $r13 = r0.<androidx.leanback.widget.Grid: androidx.leanback.widget.Grid$Provider mProvider>;

        $r12 = r0.<androidx.leanback.widget.Grid: java.lang.Object[] mTmpItem>;

        i28 = interfaceinvoke $r13.<androidx.leanback.widget.Grid$Provider: int createItem(int,boolean,java.lang.Object[],boolean)>(i26, 1, $r12, 1);

        $r16 = r0.<androidx.leanback.widget.Grid: androidx.leanback.widget.Grid$Provider mProvider>;

        $r14 = r0.<androidx.leanback.widget.Grid: java.lang.Object[] mTmpItem>;

        $r15 = $r14[0];

        interfaceinvoke $r16.<androidx.leanback.widget.Grid$Provider: void addItem(java.lang.Object,int,int,int,int)>($r15, i26, i28, i27, i24);

        $z3 = r0.<androidx.leanback.widget.Grid: boolean mReversedFlow>;

        if $z3 == 0 goto label07;

        $i17 = i24 - i28;

        $i16 = r0.<androidx.leanback.widget.Grid: int mSpacing>;

        i24 = $i17 - $i16;

        goto label08;

     label07:
        $i15 = i24 + i28;

        $i14 = r0.<androidx.leanback.widget.Grid: int mSpacing>;

        i24 = $i15 + $i14;

     label08:
        i25 = i25 + 1;

        goto label05;

     label09:
        i29 = virtualinvoke r0.<androidx.leanback.widget.Grid: int getFirstVisibleIndex()>();

        if i29 < 0 goto label10;

        $i30 = staticinvoke <java.util.Arrays: int binarySearch(int[],int,int,int)>(r1, 0, i0, i29);

        goto label11;

     label10:
        $i30 = 0;

     label11:
        i31 = $i30;

        if i31 >= 0 goto label18;

        $i4 = neg i31;

        i32 = $i4 - 2;

        $z0 = r0.<androidx.leanback.widget.Grid: boolean mReversedFlow>;

        if $z0 == 0 goto label12;

        $r9 = r0.<androidx.leanback.widget.Grid: androidx.leanback.widget.Grid$Provider mProvider>;

        i33 = interfaceinvoke $r9.<androidx.leanback.widget.Grid$Provider: int getEdge(int)>(i29);

        goto label13;

     label12:
        $r3 = r0.<androidx.leanback.widget.Grid: androidx.leanback.widget.Grid$Provider mProvider>;

        i33 = interfaceinvoke $r3.<androidx.leanback.widget.Grid$Provider: int getEdge(int)>(i29);

     label13:
        i34 = i32;

     label14:
        if i34 < 0 goto label18;

        i35 = r1[i34];

        i36 = virtualinvoke r2.<android.util.SparseIntArray: int get(int)>(i35);

        if i36 >= 0 goto label15;

        i36 = 0;

     label15:
        $r5 = r0.<androidx.leanback.widget.Grid: androidx.leanback.widget.Grid$Provider mProvider>;

        $r4 = r0.<androidx.leanback.widget.Grid: java.lang.Object[] mTmpItem>;

        i3 = interfaceinvoke $r5.<androidx.leanback.widget.Grid$Provider: int createItem(int,boolean,java.lang.Object[],boolean)>(i35, 0, $r4, 1);

        $z1 = r0.<androidx.leanback.widget.Grid: boolean mReversedFlow>;

        if $z1 == 0 goto label16;

        $i7 = r0.<androidx.leanback.widget.Grid: int mSpacing>;

        $i8 = i33 + $i7;

        i33 = $i8 + i3;

        goto label17;

     label16:
        $i5 = r0.<androidx.leanback.widget.Grid: int mSpacing>;

        $i6 = i33 - $i5;

        i33 = $i6 - i3;

     label17:
        $r8 = r0.<androidx.leanback.widget.Grid: androidx.leanback.widget.Grid$Provider mProvider>;

        $r6 = r0.<androidx.leanback.widget.Grid: java.lang.Object[] mTmpItem>;

        $r7 = $r6[0];

        interfaceinvoke $r8.<androidx.leanback.widget.Grid$Provider: void addItem(java.lang.Object,int,int,int,int)>($r7, i35, i3, i36, i33);

        i34 = i34 + -1;

        goto label14;

     label18:
        return;
    }

    public void collectAdjacentPrefetchPositions(int, int, androidx.recyclerview.widget.RecyclerView$LayoutManager$LayoutPrefetchRegistry)
    {
        androidx.leanback.widget.Grid r0;
        int i0, i1;
        androidx.recyclerview.widget.RecyclerView$LayoutManager$LayoutPrefetchRegistry r1;

        r0 := @this: androidx.leanback.widget.Grid;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: androidx.recyclerview.widget.RecyclerView$LayoutManager$LayoutPrefetchRegistry;

        return;
    }

<androidx.leanback.widget.Grid: void debugPrint(java.io.PrintWriter)>
androidx.leanback.widget.Grid$Location
<androidx.leanback.widget.Grid$Location: int mRow>
    void <init>(int)
    {
        androidx.leanback.widget.Grid$Location r0;
        int i0;

        r0 := @this: androidx.leanback.widget.Grid$Location;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.leanback.widget.Grid$Location: int mRow> = i0;

        return;
    }

androidx.leanback.widget.Grid$Provider
<androidx.leanback.widget.Grid$Provider: int getCount()>
<androidx.leanback.widget.Grid$Provider: int getMinIndex()>
<androidx.leanback.widget.Grid$Provider: int createItem(int,boolean,java.lang.Object[],boolean)>
<androidx.leanback.widget.Grid$Provider: void addItem(java.lang.Object,int,int,int,int)>
<androidx.leanback.widget.Grid$Provider: void removeItem(int)>
<androidx.leanback.widget.Grid$Provider: int getEdge(int)>
<androidx.leanback.widget.Grid$Provider: int getSize(int)>
