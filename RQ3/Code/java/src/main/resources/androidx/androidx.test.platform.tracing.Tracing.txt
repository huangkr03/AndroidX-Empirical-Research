androidx.test.platform.tracing.Tracing
<androidx.test.platform.tracing.Tracing: java.lang.String TAG>
<androidx.test.platform.tracing.Tracing: androidx.test.platform.tracing.Tracing singleton>
<androidx.test.platform.tracing.Tracing: java.util.List tracers>
    static volatile androidx.test.platform.tracing.Tracer$Span '-$$Nest$smcreateUnmanagedChildSpan'(androidx.test.platform.tracing.Tracer$Span, java.lang.String)
    {
        androidx.test.platform.tracing.Tracer$Span r0, $r2;
        java.lang.String r1;

        r0 := @parameter0: androidx.test.platform.tracing.Tracer$Span;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <androidx.test.platform.tracing.Tracing: androidx.test.platform.tracing.Tracer$Span createUnmanagedChildSpan(androidx.test.platform.tracing.Tracer$Span,java.lang.String)>(r0, r1);

        return $r2;
    }

    public androidx.test.platform.tracing.Tracer$Span beginSpan(java.lang.String)
    {
        androidx.test.platform.tracing.Tracing r0;
        java.lang.String r1;
        java.util.HashMap r2, $r9;
        java.util.List r3, $r8, $r10, $r11;
        java.util.Iterator r4;
        androidx.test.platform.tracing.Tracer r5;
        java.lang.Throwable r6, $r16;
        int $i0;
        boolean $z0;
        androidx.test.platform.tracing.Tracing$TracerSpan $r12;
        java.lang.Object $r13;
        androidx.test.platform.tracing.Tracer$Span $r14;

        r0 := @this: androidx.test.platform.tracing.Tracing;

        r1 := @parameter0: java.lang.String;

        staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r8 = r0.<androidx.test.platform.tracing.Tracing: java.util.List tracers>;

        r3 = $r8;

        entermonitor $r8;

     label1:
        $r9 = new java.util.HashMap;

        $r10 = r0.<androidx.test.platform.tracing.Tracing: java.util.List tracers>;

        $i0 = interfaceinvoke $r10.<java.util.List: int size()>();

        specialinvoke $r9.<java.util.HashMap: void <init>(int)>($i0);

        r2 = $r9;

        $r11 = r0.<androidx.test.platform.tracing.Tracing: java.util.List tracers>;

        r4 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r13 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (androidx.test.platform.tracing.Tracer) $r13;

        $r14 = staticinvoke <androidx.test.platform.tracing.Tracing: androidx.test.platform.tracing.Tracer$Span createUnmanagedSpan(androidx.test.platform.tracing.Tracer,java.lang.String)>(r5, r1);

        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, $r14);

        goto label2;

     label3:
        exitmonitor r3;

     label4:
        goto label7;

     label5:
        $r16 := @caughtexception;

        r6 = $r16;

        exitmonitor r3;

     label6:
        throw r6;

     label7:
        $r12 = new androidx.test.platform.tracing.Tracing$TracerSpan;

        specialinvoke $r12.<androidx.test.platform.tracing.Tracing$TracerSpan: void <init>(androidx.test.platform.tracing.Tracing,java.util.Map,androidx.test.platform.tracing.Tracing$TracerSpan-IA)>(r0, r2, null);

        return $r12;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private static androidx.test.platform.tracing.Tracer$Span createUnmanagedChildSpan(androidx.test.platform.tracing.Tracer$Span, java.lang.String)
    {
        androidx.test.platform.tracing.Tracer$Span r0, $r2;
        java.lang.String r1;

        r0 := @parameter0: androidx.test.platform.tracing.Tracer$Span;

        r1 := @parameter1: java.lang.String;

        $r2 = interfaceinvoke r0.<androidx.test.platform.tracing.Tracer$Span: androidx.test.platform.tracing.Tracer$Span beginChildSpan(java.lang.String)>(r1);

        return $r2;
    }

    private static androidx.test.platform.tracing.Tracer$Span createUnmanagedSpan(androidx.test.platform.tracing.Tracer, java.lang.String)
    {
        androidx.test.platform.tracing.Tracer r0;
        java.lang.String r1;
        androidx.test.platform.tracing.Tracer$Span $r2;

        r0 := @parameter0: androidx.test.platform.tracing.Tracer;

        r1 := @parameter1: java.lang.String;

        $r2 = interfaceinvoke r0.<androidx.test.platform.tracing.Tracer: androidx.test.platform.tracing.Tracer$Span beginSpan(java.lang.String)>(r1);

        return $r2;
    }

    public static androidx.test.platform.tracing.Tracing getInstance()
    {
        androidx.test.platform.tracing.Tracing $r0;

        $r0 = <androidx.test.platform.tracing.Tracing: androidx.test.platform.tracing.Tracing singleton>;

        return $r0;
    }

    static volatile java.util.List '-$$Nest$fgettracers'(androidx.test.platform.tracing.Tracing)
    {
        androidx.test.platform.tracing.Tracing r0;
        java.util.List $r1;

        r0 := @parameter0: androidx.test.platform.tracing.Tracing;

        $r1 = r0.<androidx.test.platform.tracing.Tracing: java.util.List tracers>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        androidx.test.platform.tracing.Tracing $r2;

        $r0 = class "Landroidx/test/platform/tracing/Tracing;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <androidx.test.platform.tracing.Tracing: java.lang.String TAG> = $r1;

        $r2 = new androidx.test.platform.tracing.Tracing;

        specialinvoke $r2.<androidx.test.platform.tracing.Tracing: void <init>()>();

        <androidx.test.platform.tracing.Tracing: androidx.test.platform.tracing.Tracing singleton> = $r2;

        return;
    }

    private void <init>()
    {
        androidx.test.platform.tracing.Tracing r0;
        java.util.ArrayList $r1;
        java.util.List $r2;
        int $i0;
        androidx.test.platform.tracing.AndroidXTracer $r3;

        r0 := @this: androidx.test.platform.tracing.Tracing;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r1);

        r0.<androidx.test.platform.tracing.Tracing: java.util.List tracers> = $r2;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 18 goto label1;

        $r3 = new androidx.test.platform.tracing.AndroidXTracer;

        specialinvoke $r3.<androidx.test.platform.tracing.AndroidXTracer: void <init>()>();

        virtualinvoke r0.<androidx.test.platform.tracing.Tracing: void registerTracer(androidx.test.platform.tracing.Tracer)>($r3);

     label1:
        return;
    }

    public void registerTracer(androidx.test.platform.tracing.Tracer)
    {
        androidx.test.platform.tracing.Tracing r0;
        androidx.test.platform.tracing.Tracer r1;
        java.util.List $r3, $r10;
        boolean $z0;
        java.lang.String $r4, $r9, $r11, $r16, r17, r18;
        java.lang.Class $r5, $r12;
        java.lang.StringBuilder $r6, $r7, $r8, $r13, $r14, $r15;

        r0 := @this: androidx.test.platform.tracing.Tracing;

        r1 := @parameter0: androidx.test.platform.tracing.Tracer;

        staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "Tracer cannot be null.");

        $r3 = r0.<androidx.test.platform.tracing.Tracing: java.util.List tracers>;

        $z0 = interfaceinvoke $r3.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r11 = <androidx.test.platform.tracing.Tracing: java.lang.String TAG>;

        $r12 = interfaceinvoke r1.<androidx.test.platform.tracing.Tracer: java.lang.Class getClass()>();

        r17 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r12);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tracer already present: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r11, $r16);

        goto label2;

     label1:
        $r4 = <androidx.test.platform.tracing.Tracing: java.lang.String TAG>;

        $r5 = interfaceinvoke r1.<androidx.test.platform.tracing.Tracer: java.lang.Class getClass()>();

        r18 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r5);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tracer added: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r4, $r9);

        $r10 = r0.<androidx.test.platform.tracing.Tracing: java.util.List tracers>;

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>(r1);

     label2:
        return;
    }

    public void unregisterTracer(androidx.test.platform.tracing.Tracer)
    {
        androidx.test.platform.tracing.Tracing r0;
        androidx.test.platform.tracing.Tracer r1;
        java.lang.String r2, $r4, $r8;
        java.util.List $r3;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.Class $r9;

        r0 := @this: androidx.test.platform.tracing.Tracing;

        r1 := @parameter0: androidx.test.platform.tracing.Tracer;

        $r3 = r0.<androidx.test.platform.tracing.Tracing: java.util.List tracers>;

        interfaceinvoke $r3.<java.util.List: boolean remove(java.lang.Object)>(r1);

        $r4 = <androidx.test.platform.tracing.Tracing: java.lang.String TAG>;

        if r1 != null goto label1;

        $r9 = null;

        goto label2;

     label1:
        $r9 = interfaceinvoke r1.<androidx.test.platform.tracing.Tracer: java.lang.Class getClass()>();

     label2:
        r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r9);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tracer removed: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r4, $r8);

        return;
    }

androidx.test.platform.tracing.Tracing$TracerSpan-IA
androidx.test.platform.tracing.Tracing$TracerSpan
<androidx.test.platform.tracing.Tracing$TracerSpan: java.util.Map spans>
<androidx.test.platform.tracing.Tracing$TracerSpan: androidx.test.platform.tracing.Tracing this$0>
    public androidx.test.platform.tracing.Tracer$Span beginChildSpan(java.lang.String)
    {
        androidx.test.platform.tracing.Tracing$TracerSpan r0, $r16;
        java.lang.String r1;
        java.util.HashMap r2, $r11;
        java.util.List r3, $r10, $r13, $r15;
        java.util.Iterator r4;
        androidx.test.platform.tracing.Tracer r5;
        androidx.test.platform.tracing.Tracer$Span r6, $r21;
        java.lang.Throwable r7, $r23;
        androidx.test.platform.tracing.Tracing $r9, $r12, $r14, $r17;
        int $i0;
        boolean $z0;
        java.lang.Object $r18, $r20;
        java.util.Map $r19;

        r0 := @this: androidx.test.platform.tracing.Tracing$TracerSpan;

        r1 := @parameter0: java.lang.String;

        staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r9 = r0.<androidx.test.platform.tracing.Tracing$TracerSpan: androidx.test.platform.tracing.Tracing this$0>;

        $r10 = staticinvoke <androidx.test.platform.tracing.Tracing: java.util.List '-$$Nest$fgettracers'(androidx.test.platform.tracing.Tracing)>($r9);

        r3 = $r10;

        entermonitor $r10;

     label1:
        $r11 = new java.util.HashMap;

        $r12 = r0.<androidx.test.platform.tracing.Tracing$TracerSpan: androidx.test.platform.tracing.Tracing this$0>;

        $r13 = staticinvoke <androidx.test.platform.tracing.Tracing: java.util.List '-$$Nest$fgettracers'(androidx.test.platform.tracing.Tracing)>($r12);

        $i0 = interfaceinvoke $r13.<java.util.List: int size()>();

        specialinvoke $r11.<java.util.HashMap: void <init>(int)>($i0);

        r2 = $r11;

        $r14 = r0.<androidx.test.platform.tracing.Tracing$TracerSpan: androidx.test.platform.tracing.Tracing this$0>;

        $r15 = staticinvoke <androidx.test.platform.tracing.Tracing: java.util.List '-$$Nest$fgettracers'(androidx.test.platform.tracing.Tracing)>($r14);

        r4 = interfaceinvoke $r15.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r18 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (androidx.test.platform.tracing.Tracer) $r18;

        $r19 = r0.<androidx.test.platform.tracing.Tracing$TracerSpan: java.util.Map spans>;

        $r20 = interfaceinvoke $r19.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        r6 = (androidx.test.platform.tracing.Tracer$Span) $r20;

        if r6 == null goto label3;

        $r21 = staticinvoke <androidx.test.platform.tracing.Tracing: androidx.test.platform.tracing.Tracer$Span '-$$Nest$smcreateUnmanagedChildSpan'(androidx.test.platform.tracing.Tracer$Span,java.lang.String)>(r6, r1);

        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, $r21);

     label3:
        goto label2;

     label4:
        exitmonitor r3;

     label5:
        goto label8;

     label6:
        $r23 := @caughtexception;

        r7 = $r23;

        exitmonitor r3;

     label7:
        throw r7;

     label8:
        $r16 = new androidx.test.platform.tracing.Tracing$TracerSpan;

        $r17 = r0.<androidx.test.platform.tracing.Tracing$TracerSpan: androidx.test.platform.tracing.Tracing this$0>;

        specialinvoke $r16.<androidx.test.platform.tracing.Tracing$TracerSpan: void <init>(androidx.test.platform.tracing.Tracing,java.util.Map)>($r17, r2);

        return $r16;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private void <init>(androidx.test.platform.tracing.Tracing, java.util.Map)
    {
        androidx.test.platform.tracing.Tracing$TracerSpan r0;
        androidx.test.platform.tracing.Tracing r1;
        java.util.Map r2;

        r0 := @this: androidx.test.platform.tracing.Tracing$TracerSpan;

        r1 := @parameter0: androidx.test.platform.tracing.Tracing;

        r2 := @parameter1: java.util.Map;

        r0.<androidx.test.platform.tracing.Tracing$TracerSpan: androidx.test.platform.tracing.Tracing this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.test.platform.tracing.Tracing$TracerSpan: java.util.Map spans> = r2;

        return;
    }

    void <init>(androidx.test.platform.tracing.Tracing, java.util.Map, androidx.test.platform.tracing.Tracing$TracerSpan-IA)
    {
        androidx.test.platform.tracing.Tracing$TracerSpan r0;
        androidx.test.platform.tracing.Tracing r1;
        java.util.Map r2;
        androidx.test.platform.tracing.Tracing$TracerSpan-IA r3;

        r0 := @this: androidx.test.platform.tracing.Tracing$TracerSpan;

        r1 := @parameter0: androidx.test.platform.tracing.Tracing;

        r2 := @parameter1: java.util.Map;

        r3 := @parameter2: androidx.test.platform.tracing.Tracing$TracerSpan-IA;

        specialinvoke r0.<androidx.test.platform.tracing.Tracing$TracerSpan: void <init>(androidx.test.platform.tracing.Tracing,java.util.Map)>(r1, r2);

        return;
    }

    public void close()
    {
        androidx.test.platform.tracing.Tracing$TracerSpan r0;
        java.util.Iterator r1;
        androidx.test.platform.tracing.Tracer$Span r2;
        java.util.Map $r3;
        java.util.Collection $r4;
        boolean $z0;
        java.lang.Object $r5;

        r0 := @this: androidx.test.platform.tracing.Tracing$TracerSpan;

        $r3 = r0.<androidx.test.platform.tracing.Tracing$TracerSpan: java.util.Map spans>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Collection values()>();

        r1 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (androidx.test.platform.tracing.Tracer$Span) $r5;

        interfaceinvoke r2.<androidx.test.platform.tracing.Tracer$Span: void close()>();

        goto label1;

     label2:
        return;
    }

