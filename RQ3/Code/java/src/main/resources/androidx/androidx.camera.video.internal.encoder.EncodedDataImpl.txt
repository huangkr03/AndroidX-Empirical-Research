androidx.camera.video.internal.encoder.EncodedDataImpl
<androidx.camera.video.internal.encoder.EncodedDataImpl: android.media.MediaCodec mMediaCodec>
<androidx.camera.video.internal.encoder.EncodedDataImpl: android.media.MediaCodec$BufferInfo mBufferInfo>
<androidx.camera.video.internal.encoder.EncodedDataImpl: int mBufferIndex>
<androidx.camera.video.internal.encoder.EncodedDataImpl: java.nio.ByteBuffer mByteBuffer>
<androidx.camera.video.internal.encoder.EncodedDataImpl: com.google.common.util.concurrent.ListenableFuture mClosedFuture>
<androidx.camera.video.internal.encoder.EncodedDataImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mClosedCompleter>
<androidx.camera.video.internal.encoder.EncodedDataImpl: java.util.concurrent.atomic.AtomicBoolean mClosed>
    void <init>(android.media.MediaCodec, int, android.media.MediaCodec$BufferInfo) throws android.media.MediaCodec$CodecException
    {
        androidx.camera.video.internal.encoder.EncodedDataImpl r0;
        android.media.MediaCodec r1, $r6;
        int i0;
        android.media.MediaCodec$BufferInfo r2, $r9;
        java.util.concurrent.atomic.AtomicReference r3, $r10;
        java.util.concurrent.atomic.AtomicBoolean $r4;
        java.lang.Object $r5, $r8, $r13, $r15;
        java.nio.ByteBuffer $r7;
        androidx.concurrent.futures.CallbackToFutureAdapter$Resolver $r11;
        com.google.common.util.concurrent.ListenableFuture $r12;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer $r14, $r16;

        r0 := @this: androidx.camera.video.internal.encoder.EncodedDataImpl;

        r1 := @parameter0: android.media.MediaCodec;

        i0 := @parameter1: int;

        r2 := @parameter2: android.media.MediaCodec$BufferInfo;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<androidx.camera.video.internal.encoder.EncodedDataImpl: java.util.concurrent.atomic.AtomicBoolean mClosed> = $r4;

        $r5 = staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r6 = (android.media.MediaCodec) $r5;

        r0.<androidx.camera.video.internal.encoder.EncodedDataImpl: android.media.MediaCodec mMediaCodec> = $r6;

        r0.<androidx.camera.video.internal.encoder.EncodedDataImpl: int mBufferIndex> = i0;

        $r7 = virtualinvoke r1.<android.media.MediaCodec: java.nio.ByteBuffer getOutputBuffer(int)>(i0);

        r0.<androidx.camera.video.internal.encoder.EncodedDataImpl: java.nio.ByteBuffer mByteBuffer> = $r7;

        $r8 = staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r9 = (android.media.MediaCodec$BufferInfo) $r8;

        r0.<androidx.camera.video.internal.encoder.EncodedDataImpl: android.media.MediaCodec$BufferInfo mBufferInfo> = $r9;

        $r10 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r10.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        r3 = $r10;

        $r11 = dynamicinvoke "attachCompleter" <androidx.concurrent.futures.CallbackToFutureAdapter$Resolver (java.util.concurrent.atomic.AtomicReference)>(r3) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.video.internal.encoder.EncodedDataImpl: java.lang.Object lambda$new$0(java.util.concurrent.atomic.AtomicReference,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer));

        $r12 = staticinvoke <androidx.concurrent.futures.CallbackToFutureAdapter: com.google.common.util.concurrent.ListenableFuture getFuture(androidx.concurrent.futures.CallbackToFutureAdapter$Resolver)>($r11);

        r0.<androidx.camera.video.internal.encoder.EncodedDataImpl: com.google.common.util.concurrent.ListenableFuture mClosedFuture> = $r12;

        $r13 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r14 = (androidx.concurrent.futures.CallbackToFutureAdapter$Completer) $r13;

        $r15 = staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r14);

        $r16 = (androidx.concurrent.futures.CallbackToFutureAdapter$Completer) $r15;

        r0.<androidx.camera.video.internal.encoder.EncodedDataImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mClosedCompleter> = $r16;

        return;
    }

    public java.nio.ByteBuffer getByteBuffer()
    {
        androidx.camera.video.internal.encoder.EncodedDataImpl r0;
        android.media.MediaCodec$BufferInfo $r1, $r4, $r5;
        int $i0, $i1, $i2, $i3;
        java.nio.ByteBuffer $r2, $r6, $r8;

        r0 := @this: androidx.camera.video.internal.encoder.EncodedDataImpl;

        specialinvoke r0.<androidx.camera.video.internal.encoder.EncodedDataImpl: void throwIfClosed()>();

        $r2 = r0.<androidx.camera.video.internal.encoder.EncodedDataImpl: java.nio.ByteBuffer mByteBuffer>;

        $r1 = r0.<androidx.camera.video.internal.encoder.EncodedDataImpl: android.media.MediaCodec$BufferInfo mBufferInfo>;

        $i0 = $r1.<android.media.MediaCodec$BufferInfo: int offset>;

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i0);

        $r6 = r0.<androidx.camera.video.internal.encoder.EncodedDataImpl: java.nio.ByteBuffer mByteBuffer>;

        $r4 = r0.<androidx.camera.video.internal.encoder.EncodedDataImpl: android.media.MediaCodec$BufferInfo mBufferInfo>;

        $i2 = $r4.<android.media.MediaCodec$BufferInfo: int offset>;

        $r5 = r0.<androidx.camera.video.internal.encoder.EncodedDataImpl: android.media.MediaCodec$BufferInfo mBufferInfo>;

        $i1 = $r5.<android.media.MediaCodec$BufferInfo: int size>;

        $i3 = $i2 + $i1;

        virtualinvoke $r6.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i3);

        $r8 = r0.<androidx.camera.video.internal.encoder.EncodedDataImpl: java.nio.ByteBuffer mByteBuffer>;

        return $r8;
    }

    public android.media.MediaCodec$BufferInfo getBufferInfo()
    {
        androidx.camera.video.internal.encoder.EncodedDataImpl r0;
        android.media.MediaCodec$BufferInfo $r1;

        r0 := @this: androidx.camera.video.internal.encoder.EncodedDataImpl;

        $r1 = r0.<androidx.camera.video.internal.encoder.EncodedDataImpl: android.media.MediaCodec$BufferInfo mBufferInfo>;

        return $r1;
    }

    public long getPresentationTimeUs()
    {
        androidx.camera.video.internal.encoder.EncodedDataImpl r0;
        android.media.MediaCodec$BufferInfo $r1;
        long $l0;

        r0 := @this: androidx.camera.video.internal.encoder.EncodedDataImpl;

        $r1 = r0.<androidx.camera.video.internal.encoder.EncodedDataImpl: android.media.MediaCodec$BufferInfo mBufferInfo>;

        $l0 = $r1.<android.media.MediaCodec$BufferInfo: long presentationTimeUs>;

        return $l0;
    }

    public long size()
    {
        androidx.camera.video.internal.encoder.EncodedDataImpl r0;
        android.media.MediaCodec$BufferInfo $r1;
        int $i0;
        long $l1;

        r0 := @this: androidx.camera.video.internal.encoder.EncodedDataImpl;

        $r1 = r0.<androidx.camera.video.internal.encoder.EncodedDataImpl: android.media.MediaCodec$BufferInfo mBufferInfo>;

        $i0 = $r1.<android.media.MediaCodec$BufferInfo: int size>;

        $l1 = (long) $i0;

        return $l1;
    }

    public boolean isKeyFrame()
    {
        androidx.camera.video.internal.encoder.EncodedDataImpl r0;
        android.media.MediaCodec$BufferInfo $r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: androidx.camera.video.internal.encoder.EncodedDataImpl;

        $r1 = r0.<androidx.camera.video.internal.encoder.EncodedDataImpl: android.media.MediaCodec$BufferInfo mBufferInfo>;

        $i0 = $r1.<android.media.MediaCodec$BufferInfo: int flags>;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void close()
    {
        androidx.camera.video.internal.encoder.EncodedDataImpl r0;
        java.lang.Throwable r1, $r5;
        java.util.concurrent.atomic.AtomicBoolean $r2;
        boolean $z0;
        int $i0;
        android.media.MediaCodec $r3;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer $r4, $r6;

        r0 := @this: androidx.camera.video.internal.encoder.EncodedDataImpl;

        $r2 = r0.<androidx.camera.video.internal.encoder.EncodedDataImpl: java.util.concurrent.atomic.AtomicBoolean mClosed>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: boolean getAndSet(boolean)>(1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = r0.<androidx.camera.video.internal.encoder.EncodedDataImpl: android.media.MediaCodec mMediaCodec>;

        $i0 = r0.<androidx.camera.video.internal.encoder.EncodedDataImpl: int mBufferIndex>;

        virtualinvoke $r3.<android.media.MediaCodec: void releaseOutputBuffer(int,boolean)>($i0, 0);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        $r6 = r0.<androidx.camera.video.internal.encoder.EncodedDataImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mClosedCompleter>;

        virtualinvoke $r6.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean setException(java.lang.Throwable)>(r1);

        return;

     label4:
        $r4 = r0.<androidx.camera.video.internal.encoder.EncodedDataImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mClosedCompleter>;

        virtualinvoke $r4.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean set(java.lang.Object)>(null);

        return;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    public com.google.common.util.concurrent.ListenableFuture getClosedFuture()
    {
        androidx.camera.video.internal.encoder.EncodedDataImpl r0;
        com.google.common.util.concurrent.ListenableFuture $r1, $r2;

        r0 := @this: androidx.camera.video.internal.encoder.EncodedDataImpl;

        $r1 = r0.<androidx.camera.video.internal.encoder.EncodedDataImpl: com.google.common.util.concurrent.ListenableFuture mClosedFuture>;

        $r2 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture nonCancellationPropagating(com.google.common.util.concurrent.ListenableFuture)>($r1);

        return $r2;
    }

    private void throwIfClosed()
    {
        androidx.camera.video.internal.encoder.EncodedDataImpl r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;

        r0 := @this: androidx.camera.video.internal.encoder.EncodedDataImpl;

        $r1 = r0.<androidx.camera.video.internal.encoder.EncodedDataImpl: java.util.concurrent.atomic.AtomicBoolean mClosed>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("encoded data is closed.");

        throw $r2;

     label1:
        return;
    }

    private static java.lang.Object lambda$new$0(java.util.concurrent.atomic.AtomicReference, androidx.concurrent.futures.CallbackToFutureAdapter$Completer) throws java.lang.Exception
    {
        java.util.concurrent.atomic.AtomicReference r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r1;

        r0 := @parameter0: java.util.concurrent.atomic.AtomicReference;

        r1 := @parameter1: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        virtualinvoke r0.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(r1);

        return "Data closed";
    }

