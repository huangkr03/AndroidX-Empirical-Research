androidx.car.app.utils.RemoteUtils
    public static java.lang.Object dispatchCallToHostForResult(java.lang.String, androidx.car.app.utils.RemoteUtils$RemoteCall) throws android.os.RemoteException
    {
        java.lang.String r0, $r7, $r15;
        androidx.car.app.utils.RemoteUtils$RemoteCall r1;
        boolean $z0;
        java.lang.Object $r2;
        java.lang.StringBuilder $r4, $r5, $r6, $r12, $r13, $r14, r18, r19;
        java.lang.Throwable $r8, $r9, r16, r17, r21;
        androidx.car.app.HostException r20;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: androidx.car.app.utils.RemoteUtils$RemoteCall;

     label1:
        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("CarApp", 3);

        if $z0 == 0 goto label2;

        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dispatching call ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to host");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CarApp", $r7);

     label2:
        $r2 = interfaceinvoke r1.<androidx.car.app.utils.RemoteUtils$RemoteCall: java.lang.Object call()>();

     label3:
        return $r2;

     label4:
        $r8 := @caughtexception;

        r16 = $r8;

        throw r16;

     label5:
        $r9 := @caughtexception;

        r17 = $r9;

        r20 = new androidx.car.app.HostException;

        r19 = new java.lang.StringBuilder;

        specialinvoke r19.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Remote ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" call failed");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r20.<androidx.car.app.HostException: void <init>(java.lang.String,java.lang.Throwable)>($r15, r17);

        r21 = (java.lang.Throwable) r20;

        throw r21;

        catch java.lang.SecurityException from label1 to label3 with label4;
        catch java.lang.RuntimeException from label1 to label3 with label5;
    }

    public static void dispatchCallToHost(java.lang.String, androidx.car.app.utils.RemoteUtils$RemoteCall)
    {
        java.lang.String r0, $r8;
        androidx.car.app.utils.RemoteUtils$RemoteCall r1;
        java.lang.Throwable r2, $r4;
        java.lang.StringBuilder $r5, $r6, $r7;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: androidx.car.app.utils.RemoteUtils$RemoteCall;

     label1:
        staticinvoke <androidx.car.app.utils.RemoteUtils: java.lang.Object dispatchCallToHostForResult(java.lang.String,androidx.car.app.utils.RemoteUtils$RemoteCall)>(r0, r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Host unresponsive when dispatching call ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("CarApp.Dispatch", $r8, r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static androidx.car.app.ISurfaceCallback stubSurfaceCallback(androidx.lifecycle.Lifecycle, androidx.car.app.SurfaceCallback)
    {
        androidx.lifecycle.Lifecycle r0;
        androidx.car.app.SurfaceCallback r1;
        androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub $r2;

        r0 := @parameter0: androidx.lifecycle.Lifecycle;

        r1 := @parameter1: androidx.car.app.SurfaceCallback;

        if r1 != null goto label1;

        return null;

     label1:
        $r2 = new androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub;

        specialinvoke $r2.<androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub: void <init>(androidx.lifecycle.Lifecycle,androidx.car.app.SurfaceCallback)>(r0, r1);

        return $r2;
    }

    public static void dispatchCallFromHost(androidx.car.app.IOnDoneCallback, java.lang.String, androidx.car.app.utils.RemoteUtils$HostCall)
    {
        androidx.car.app.IOnDoneCallback r0;
        java.lang.String r1;
        androidx.car.app.utils.RemoteUtils$HostCall r2;
        java.lang.Runnable $r3;

        r0 := @parameter0: androidx.car.app.IOnDoneCallback;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: androidx.car.app.utils.RemoteUtils$HostCall;

        $r3 = dynamicinvoke "run" <java.lang.Runnable (androidx.car.app.IOnDoneCallback,java.lang.String,androidx.car.app.utils.RemoteUtils$HostCall)>(r0, r1, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.car.app.utils.RemoteUtils: void lambda$dispatchCallFromHost$0(androidx.car.app.IOnDoneCallback,java.lang.String,androidx.car.app.utils.RemoteUtils$HostCall)>, methodtype: void __METHODTYPE__());

        staticinvoke <androidx.car.app.utils.ThreadUtils: void runOnMain(java.lang.Runnable)>($r3);

        return;
    }

    public static void dispatchCallFromHost(androidx.lifecycle.Lifecycle, androidx.car.app.IOnDoneCallback, java.lang.String, androidx.car.app.utils.RemoteUtils$HostCall)
    {
        androidx.lifecycle.Lifecycle r0;
        androidx.car.app.IOnDoneCallback r1;
        java.lang.String r2;
        androidx.car.app.utils.RemoteUtils$HostCall r3;
        java.lang.Runnable $r4;

        r0 := @parameter0: androidx.lifecycle.Lifecycle;

        r1 := @parameter1: androidx.car.app.IOnDoneCallback;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: androidx.car.app.utils.RemoteUtils$HostCall;

        $r4 = dynamicinvoke "run" <java.lang.Runnable (androidx.lifecycle.Lifecycle,androidx.car.app.IOnDoneCallback,java.lang.String,androidx.car.app.utils.RemoteUtils$HostCall)>(r0, r1, r2, r3) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.car.app.utils.RemoteUtils: void lambda$dispatchCallFromHost$1(androidx.lifecycle.Lifecycle,androidx.car.app.IOnDoneCallback,java.lang.String,androidx.car.app.utils.RemoteUtils$HostCall)>, methodtype: void __METHODTYPE__());

        staticinvoke <androidx.car.app.utils.ThreadUtils: void runOnMain(java.lang.Runnable)>($r4);

        return;
    }

    public static void dispatchCallFromHost(androidx.lifecycle.Lifecycle, java.lang.String, androidx.car.app.utils.RemoteUtils$HostCall)
    {
        androidx.lifecycle.Lifecycle r0;
        java.lang.String r1;
        androidx.car.app.utils.RemoteUtils$HostCall r2;
        java.lang.Runnable $r3;

        r0 := @parameter0: androidx.lifecycle.Lifecycle;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: androidx.car.app.utils.RemoteUtils$HostCall;

        $r3 = dynamicinvoke "run" <java.lang.Runnable (androidx.lifecycle.Lifecycle,androidx.car.app.utils.RemoteUtils$HostCall,java.lang.String)>(r0, r2, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.car.app.utils.RemoteUtils: void lambda$dispatchCallFromHost$2(androidx.lifecycle.Lifecycle,androidx.car.app.utils.RemoteUtils$HostCall,java.lang.String)>, methodtype: void __METHODTYPE__());

        staticinvoke <androidx.car.app.utils.ThreadUtils: void runOnMain(java.lang.Runnable)>($r3);

        return;
    }

    public static void sendSuccessResponseToHost(androidx.car.app.IOnDoneCallback, java.lang.String, java.lang.Object)
    {
        androidx.car.app.IOnDoneCallback r0;
        java.lang.String r1, $r6;
        java.lang.Object r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        androidx.car.app.utils.RemoteUtils$RemoteCall $r7;

        r0 := @parameter0: androidx.car.app.IOnDoneCallback;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" onSuccess");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = dynamicinvoke "call" <androidx.car.app.utils.RemoteUtils$RemoteCall (androidx.car.app.IOnDoneCallback,java.lang.Object,java.lang.String)>(r0, r2, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.car.app.utils.RemoteUtils: java.lang.Object lambda$sendSuccessResponseToHost$3(androidx.car.app.IOnDoneCallback,java.lang.Object,java.lang.String)>, methodtype: java.lang.Object __METHODTYPE__());

        staticinvoke <androidx.car.app.utils.RemoteUtils: void dispatchCallToHost(java.lang.String,androidx.car.app.utils.RemoteUtils$RemoteCall)>($r6, $r7);

        return;
    }

    public static void sendFailureResponseToHost(androidx.car.app.IOnDoneCallback, java.lang.String, java.lang.Throwable)
    {
        androidx.car.app.IOnDoneCallback r0;
        java.lang.String r1, $r6;
        java.lang.Throwable r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        androidx.car.app.utils.RemoteUtils$RemoteCall $r7;

        r0 := @parameter0: androidx.car.app.IOnDoneCallback;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Throwable;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" onFailure");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = dynamicinvoke "call" <androidx.car.app.utils.RemoteUtils$RemoteCall (androidx.car.app.IOnDoneCallback,java.lang.Throwable,java.lang.String)>(r0, r2, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.car.app.utils.RemoteUtils: java.lang.Object lambda$sendFailureResponseToHost$4(androidx.car.app.IOnDoneCallback,java.lang.Throwable,java.lang.String)>, methodtype: java.lang.Object __METHODTYPE__());

        staticinvoke <androidx.car.app.utils.RemoteUtils: void dispatchCallToHost(java.lang.String,androidx.car.app.utils.RemoteUtils$RemoteCall)>($r6, $r7);

        return;
    }

    public static androidx.car.app.IOnDoneCallback createOnDoneCallbackStub(androidx.car.app.OnDoneCallback)
    {
        androidx.car.app.OnDoneCallback r0;
        androidx.car.app.utils.RemoteUtils$1 $r1;

        r0 := @parameter0: androidx.car.app.OnDoneCallback;

        $r1 = new androidx.car.app.utils.RemoteUtils$1;

        specialinvoke $r1.<androidx.car.app.utils.RemoteUtils$1: void <init>(androidx.car.app.OnDoneCallback)>(r0);

        return $r1;
    }

    private void <init>()
    {
        androidx.car.app.utils.RemoteUtils r0;

        r0 := @this: androidx.car.app.utils.RemoteUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static java.lang.Object lambda$sendFailureResponseToHost$4(androidx.car.app.IOnDoneCallback, java.lang.Throwable, java.lang.String) throws android.os.RemoteException
    {
        androidx.car.app.IOnDoneCallback r0;
        java.lang.Throwable r1;
        java.lang.String r2;
        androidx.car.app.FailureResponse $r3;
        androidx.car.app.serialization.Bundleable $r4;

        r0 := @parameter0: androidx.car.app.IOnDoneCallback;

        r1 := @parameter1: java.lang.Throwable;

        r2 := @parameter2: java.lang.String;

        $r3 = new androidx.car.app.FailureResponse;

        specialinvoke $r3.<androidx.car.app.FailureResponse: void <init>(java.lang.Throwable)>(r1);

        $r4 = staticinvoke <androidx.car.app.serialization.Bundleable: androidx.car.app.serialization.Bundleable create(java.lang.Object)>($r3);

        interfaceinvoke r0.<androidx.car.app.IOnDoneCallback: void onFailure(androidx.car.app.serialization.Bundleable)>($r4);

        goto label1;

     label1:
        return null;
    }

    private static java.lang.Object lambda$sendSuccessResponseToHost$3(androidx.car.app.IOnDoneCallback, java.lang.Object, java.lang.String) throws android.os.RemoteException
    {
        androidx.car.app.IOnDoneCallback r0;
        java.lang.Object r1;
        java.lang.String r2;
        androidx.car.app.serialization.Bundleable $r4;

        r0 := @parameter0: androidx.car.app.IOnDoneCallback;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.String;

        if r1 != null goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r4 = staticinvoke <androidx.car.app.serialization.Bundleable: androidx.car.app.serialization.Bundleable create(java.lang.Object)>(r1);

     label2:
        interfaceinvoke r0.<androidx.car.app.IOnDoneCallback: void onSuccess(androidx.car.app.serialization.Bundleable)>($r4);

        goto label3;

     label3:
        return null;
    }

    private static void lambda$dispatchCallFromHost$2(androidx.lifecycle.Lifecycle, androidx.car.app.utils.RemoteUtils$HostCall, java.lang.String)
    {
        androidx.lifecycle.Lifecycle r0;
        androidx.car.app.utils.RemoteUtils$HostCall r1;
        java.lang.String r2, $r6;
        java.lang.StringBuilder $r3, $r4, $r5;
        androidx.lifecycle.Lifecycle$State $r7, $r8;
        boolean $z0;

        r0 := @parameter0: androidx.lifecycle.Lifecycle;

        r1 := @parameter1: androidx.car.app.utils.RemoteUtils$HostCall;

        r2 := @parameter2: java.lang.String;

        if r0 == null goto label1;

        $r7 = virtualinvoke r0.<androidx.lifecycle.Lifecycle: androidx.lifecycle.Lifecycle$State getCurrentState()>();

        $r8 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State CREATED>;

        $z0 = virtualinvoke $r7.<androidx.lifecycle.Lifecycle$State: boolean isAtLeast(androidx.lifecycle.Lifecycle$State)>($r8);

        if $z0 != 0 goto label2;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Lifecycle is not at least created when dispatching ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("CarApp.Dispatch", $r6);

        return;

     label2:
        interfaceinvoke r1.<androidx.car.app.utils.RemoteUtils$HostCall: java.lang.Object dispatch()>();

        goto label3;

     label3:
        return;
    }

    private static void lambda$dispatchCallFromHost$1(androidx.lifecycle.Lifecycle, androidx.car.app.IOnDoneCallback, java.lang.String, androidx.car.app.utils.RemoteUtils$HostCall)
    {
        androidx.lifecycle.Lifecycle r0;
        androidx.car.app.IOnDoneCallback r1;
        java.lang.String r2, $r8;
        androidx.car.app.utils.RemoteUtils$HostCall r3;
        java.lang.IllegalStateException $r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        androidx.lifecycle.Lifecycle$State $r9, $r10;
        boolean $z0;

        r0 := @parameter0: androidx.lifecycle.Lifecycle;

        r1 := @parameter1: androidx.car.app.IOnDoneCallback;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: androidx.car.app.utils.RemoteUtils$HostCall;

        if r0 == null goto label1;

        $r9 = virtualinvoke r0.<androidx.lifecycle.Lifecycle: androidx.lifecycle.Lifecycle$State getCurrentState()>();

        $r10 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State CREATED>;

        $z0 = virtualinvoke $r9.<androidx.lifecycle.Lifecycle$State: boolean isAtLeast(androidx.lifecycle.Lifecycle$State)>($r10);

        if $z0 != 0 goto label2;

     label1:
        $r4 = new java.lang.IllegalStateException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Lifecycle is not at least created when dispatching ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        staticinvoke <androidx.car.app.utils.RemoteUtils: void sendFailureResponseToHost(androidx.car.app.IOnDoneCallback,java.lang.String,java.lang.Throwable)>(r1, r2, $r4);

        return;

     label2:
        staticinvoke <androidx.car.app.utils.RemoteUtils: void dispatchCallFromHost(androidx.car.app.IOnDoneCallback,java.lang.String,androidx.car.app.utils.RemoteUtils$HostCall)>(r1, r2, r3);

        return;
    }

    private static void lambda$dispatchCallFromHost$0(androidx.car.app.IOnDoneCallback, java.lang.String, androidx.car.app.utils.RemoteUtils$HostCall)
    {
        androidx.car.app.IOnDoneCallback r0;
        java.lang.String r1;
        androidx.car.app.utils.RemoteUtils$HostCall r2;
        java.lang.Throwable r3, $r5, r8;
        java.lang.Object $r4;
        java.lang.RuntimeException r7;

        r0 := @parameter0: androidx.car.app.IOnDoneCallback;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: androidx.car.app.utils.RemoteUtils$HostCall;

     label1:
        $r4 = interfaceinvoke r2.<androidx.car.app.utils.RemoteUtils$HostCall: java.lang.Object dispatch()>();

        staticinvoke <androidx.car.app.utils.RemoteUtils: void sendSuccessResponseToHost(androidx.car.app.IOnDoneCallback,java.lang.String,java.lang.Object)>(r0, r1, $r4);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        staticinvoke <androidx.car.app.utils.RemoteUtils: void sendFailureResponseToHost(androidx.car.app.IOnDoneCallback,java.lang.String,java.lang.Throwable)>(r0, r1, r3);

        r7 = new java.lang.RuntimeException;

        specialinvoke r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r3);

        r8 = (java.lang.Throwable) r7;

        throw r8;

     label4:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

androidx.car.app.utils.RemoteUtils$1
<androidx.car.app.utils.RemoteUtils$1: androidx.car.app.OnDoneCallback val$callback>
    void <init>(androidx.car.app.OnDoneCallback)
    {
        androidx.car.app.utils.RemoteUtils$1 r0;
        androidx.car.app.OnDoneCallback r1;

        r0 := @this: androidx.car.app.utils.RemoteUtils$1;

        r1 := @parameter0: androidx.car.app.OnDoneCallback;

        r0.<androidx.car.app.utils.RemoteUtils$1: androidx.car.app.OnDoneCallback val$callback> = r1;

        specialinvoke r0.<androidx.car.app.IOnDoneCallback$Stub: void <init>()>();

        return;
    }

    public void onSuccess(androidx.car.app.serialization.Bundleable)
    {
        androidx.car.app.utils.RemoteUtils$1 r0;
        androidx.car.app.serialization.Bundleable r1;
        androidx.car.app.OnDoneCallback $r2;

        r0 := @this: androidx.car.app.utils.RemoteUtils$1;

        r1 := @parameter0: androidx.car.app.serialization.Bundleable;

        $r2 = r0.<androidx.car.app.utils.RemoteUtils$1: androidx.car.app.OnDoneCallback val$callback>;

        interfaceinvoke $r2.<androidx.car.app.OnDoneCallback: void onSuccess(androidx.car.app.serialization.Bundleable)>(r1);

        return;
    }

    public void onFailure(androidx.car.app.serialization.Bundleable)
    {
        androidx.car.app.utils.RemoteUtils$1 r0;
        androidx.car.app.serialization.Bundleable r1;
        androidx.car.app.OnDoneCallback $r2;

        r0 := @this: androidx.car.app.utils.RemoteUtils$1;

        r1 := @parameter0: androidx.car.app.serialization.Bundleable;

        $r2 = r0.<androidx.car.app.utils.RemoteUtils$1: androidx.car.app.OnDoneCallback val$callback>;

        interfaceinvoke $r2.<androidx.car.app.OnDoneCallback: void onFailure(androidx.car.app.serialization.Bundleable)>(r1);

        return;
    }

androidx.car.app.utils.RemoteUtils$HostCall
<androidx.car.app.utils.RemoteUtils$HostCall: java.lang.Object dispatch()>
androidx.car.app.utils.RemoteUtils$RemoteCall
<androidx.car.app.utils.RemoteUtils$RemoteCall: java.lang.Object call()>
androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub
<androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub: androidx.lifecycle.Lifecycle mLifecycle>
<androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub: androidx.car.app.SurfaceCallback mSurfaceCallback>
    void <init>(androidx.lifecycle.Lifecycle, androidx.car.app.SurfaceCallback)
    {
        androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub r0;
        androidx.lifecycle.Lifecycle r1;
        androidx.car.app.SurfaceCallback r2;

        r0 := @this: androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub;

        r1 := @parameter0: androidx.lifecycle.Lifecycle;

        r2 := @parameter1: androidx.car.app.SurfaceCallback;

        specialinvoke r0.<androidx.car.app.ISurfaceCallback$Stub: void <init>()>();

        r0.<androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub: androidx.lifecycle.Lifecycle mLifecycle> = r1;

        r0.<androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub: androidx.car.app.SurfaceCallback mSurfaceCallback> = r2;

        return;
    }

    public void onSurfaceAvailable(androidx.car.app.serialization.Bundleable, androidx.car.app.IOnDoneCallback)
    {
        androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub r0;
        androidx.car.app.serialization.Bundleable r1;
        androidx.car.app.IOnDoneCallback r2;
        androidx.lifecycle.Lifecycle $r3;
        androidx.car.app.utils.RemoteUtils$HostCall $r4;

        r0 := @this: androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub;

        r1 := @parameter0: androidx.car.app.serialization.Bundleable;

        r2 := @parameter1: androidx.car.app.IOnDoneCallback;

        $r3 = r0.<androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub: androidx.lifecycle.Lifecycle mLifecycle>;

        $r4 = dynamicinvoke "dispatch" <androidx.car.app.utils.RemoteUtils$HostCall (androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub,androidx.car.app.serialization.Bundleable)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub: java.lang.Object lambda$onSurfaceAvailable$0(androidx.car.app.serialization.Bundleable)>, methodtype: java.lang.Object __METHODTYPE__());

        staticinvoke <androidx.car.app.utils.RemoteUtils: void dispatchCallFromHost(androidx.lifecycle.Lifecycle,androidx.car.app.IOnDoneCallback,java.lang.String,androidx.car.app.utils.RemoteUtils$HostCall)>($r3, r2, "onSurfaceAvailable", $r4);

        return;
    }

    public void onVisibleAreaChanged(android.graphics.Rect, androidx.car.app.IOnDoneCallback)
    {
        androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub r0;
        android.graphics.Rect r1;
        androidx.car.app.IOnDoneCallback r2;
        androidx.lifecycle.Lifecycle $r3;
        androidx.car.app.utils.RemoteUtils$HostCall $r4;

        r0 := @this: androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub;

        r1 := @parameter0: android.graphics.Rect;

        r2 := @parameter1: androidx.car.app.IOnDoneCallback;

        $r3 = r0.<androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub: androidx.lifecycle.Lifecycle mLifecycle>;

        $r4 = dynamicinvoke "dispatch" <androidx.car.app.utils.RemoteUtils$HostCall (androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub,android.graphics.Rect)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub: java.lang.Object lambda$onVisibleAreaChanged$1(android.graphics.Rect)>, methodtype: java.lang.Object __METHODTYPE__());

        staticinvoke <androidx.car.app.utils.RemoteUtils: void dispatchCallFromHost(androidx.lifecycle.Lifecycle,androidx.car.app.IOnDoneCallback,java.lang.String,androidx.car.app.utils.RemoteUtils$HostCall)>($r3, r2, "onVisibleAreaChanged", $r4);

        return;
    }

    public void onStableAreaChanged(android.graphics.Rect, androidx.car.app.IOnDoneCallback)
    {
        androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub r0;
        android.graphics.Rect r1;
        androidx.car.app.IOnDoneCallback r2;
        androidx.lifecycle.Lifecycle $r3;
        androidx.car.app.utils.RemoteUtils$HostCall $r4;

        r0 := @this: androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub;

        r1 := @parameter0: android.graphics.Rect;

        r2 := @parameter1: androidx.car.app.IOnDoneCallback;

        $r3 = r0.<androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub: androidx.lifecycle.Lifecycle mLifecycle>;

        $r4 = dynamicinvoke "dispatch" <androidx.car.app.utils.RemoteUtils$HostCall (androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub,android.graphics.Rect)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub: java.lang.Object lambda$onStableAreaChanged$2(android.graphics.Rect)>, methodtype: java.lang.Object __METHODTYPE__());

        staticinvoke <androidx.car.app.utils.RemoteUtils: void dispatchCallFromHost(androidx.lifecycle.Lifecycle,androidx.car.app.IOnDoneCallback,java.lang.String,androidx.car.app.utils.RemoteUtils$HostCall)>($r3, r2, "onStableAreaChanged", $r4);

        return;
    }

    public void onSurfaceDestroyed(androidx.car.app.serialization.Bundleable, androidx.car.app.IOnDoneCallback)
    {
        androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub r0;
        androidx.car.app.serialization.Bundleable r1;
        androidx.car.app.IOnDoneCallback r2;
        androidx.lifecycle.Lifecycle $r3;
        androidx.car.app.utils.RemoteUtils$HostCall $r4;

        r0 := @this: androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub;

        r1 := @parameter0: androidx.car.app.serialization.Bundleable;

        r2 := @parameter1: androidx.car.app.IOnDoneCallback;

        $r3 = r0.<androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub: androidx.lifecycle.Lifecycle mLifecycle>;

        $r4 = dynamicinvoke "dispatch" <androidx.car.app.utils.RemoteUtils$HostCall (androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub,androidx.car.app.serialization.Bundleable)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub: java.lang.Object lambda$onSurfaceDestroyed$3(androidx.car.app.serialization.Bundleable)>, methodtype: java.lang.Object __METHODTYPE__());

        staticinvoke <androidx.car.app.utils.RemoteUtils: void dispatchCallFromHost(androidx.lifecycle.Lifecycle,androidx.car.app.IOnDoneCallback,java.lang.String,androidx.car.app.utils.RemoteUtils$HostCall)>($r3, r2, "onSurfaceDestroyed", $r4);

        return;
    }

    public void onScroll(float, float)
    {
        androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub r0;
        float f0, f1;
        androidx.lifecycle.Lifecycle $r1;
        androidx.car.app.utils.RemoteUtils$HostCall $r2;

        r0 := @this: androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $r1 = r0.<androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub: androidx.lifecycle.Lifecycle mLifecycle>;

        $r2 = dynamicinvoke "dispatch" <androidx.car.app.utils.RemoteUtils$HostCall (androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub,float,float)>(r0, f0, f1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub: java.lang.Object lambda$onScroll$4(float,float)>, methodtype: java.lang.Object __METHODTYPE__());

        staticinvoke <androidx.car.app.utils.RemoteUtils: void dispatchCallFromHost(androidx.lifecycle.Lifecycle,java.lang.String,androidx.car.app.utils.RemoteUtils$HostCall)>($r1, "onScroll", $r2);

        return;
    }

    public void onFling(float, float)
    {
        androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub r0;
        float f0, f1;
        androidx.lifecycle.Lifecycle $r1;
        androidx.car.app.utils.RemoteUtils$HostCall $r2;

        r0 := @this: androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $r1 = r0.<androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub: androidx.lifecycle.Lifecycle mLifecycle>;

        $r2 = dynamicinvoke "dispatch" <androidx.car.app.utils.RemoteUtils$HostCall (androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub,float,float)>(r0, f0, f1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub: java.lang.Object lambda$onFling$5(float,float)>, methodtype: java.lang.Object __METHODTYPE__());

        staticinvoke <androidx.car.app.utils.RemoteUtils: void dispatchCallFromHost(androidx.lifecycle.Lifecycle,java.lang.String,androidx.car.app.utils.RemoteUtils$HostCall)>($r1, "onFling", $r2);

        return;
    }

    public void onScale(float, float, float)
    {
        androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub r0;
        float f0, f1, f2;
        androidx.lifecycle.Lifecycle $r1;
        androidx.car.app.utils.RemoteUtils$HostCall $r2;

        r0 := @this: androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        $r1 = r0.<androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub: androidx.lifecycle.Lifecycle mLifecycle>;

        $r2 = dynamicinvoke "dispatch" <androidx.car.app.utils.RemoteUtils$HostCall (androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub,float,float,float)>(r0, f0, f1, f2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub: java.lang.Object lambda$onScale$6(float,float,float)>, methodtype: java.lang.Object __METHODTYPE__());

        staticinvoke <androidx.car.app.utils.RemoteUtils: void dispatchCallFromHost(androidx.lifecycle.Lifecycle,java.lang.String,androidx.car.app.utils.RemoteUtils$HostCall)>($r1, "onScale", $r2);

        return;
    }

    public void onClick(float, float) throws android.os.RemoteException
    {
        androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub r0;
        float f0, f1;
        androidx.lifecycle.Lifecycle $r1;
        androidx.car.app.utils.RemoteUtils$HostCall $r2;

        r0 := @this: androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $r1 = r0.<androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub: androidx.lifecycle.Lifecycle mLifecycle>;

        $r2 = dynamicinvoke "dispatch" <androidx.car.app.utils.RemoteUtils$HostCall (androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub,float,float)>(r0, f0, f1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub: java.lang.Object lambda$onClick$7(float,float)>, methodtype: java.lang.Object __METHODTYPE__());

        staticinvoke <androidx.car.app.utils.RemoteUtils: void dispatchCallFromHost(androidx.lifecycle.Lifecycle,java.lang.String,androidx.car.app.utils.RemoteUtils$HostCall)>($r1, "onClick", $r2);

        return;
    }

    private java.lang.Object lambda$onClick$7(float, float) throws androidx.car.app.serialization.BundlerException
    {
        androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub r0;
        float f0, f1;
        androidx.car.app.SurfaceCallback $r1;

        r0 := @this: androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $r1 = r0.<androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub: androidx.car.app.SurfaceCallback mSurfaceCallback>;

        interfaceinvoke $r1.<androidx.car.app.SurfaceCallback: void onClick(float,float)>(f0, f1);

        return null;
    }

    private java.lang.Object lambda$onScale$6(float, float, float) throws androidx.car.app.serialization.BundlerException
    {
        androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub r0;
        float f0, f1, f2;
        androidx.car.app.SurfaceCallback $r1;

        r0 := @this: androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        $r1 = r0.<androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub: androidx.car.app.SurfaceCallback mSurfaceCallback>;

        interfaceinvoke $r1.<androidx.car.app.SurfaceCallback: void onScale(float,float,float)>(f0, f1, f2);

        return null;
    }

    private java.lang.Object lambda$onFling$5(float, float) throws androidx.car.app.serialization.BundlerException
    {
        androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub r0;
        float f0, f1;
        androidx.car.app.SurfaceCallback $r1;

        r0 := @this: androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $r1 = r0.<androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub: androidx.car.app.SurfaceCallback mSurfaceCallback>;

        interfaceinvoke $r1.<androidx.car.app.SurfaceCallback: void onFling(float,float)>(f0, f1);

        return null;
    }

    private java.lang.Object lambda$onScroll$4(float, float) throws androidx.car.app.serialization.BundlerException
    {
        androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub r0;
        float f0, f1;
        androidx.car.app.SurfaceCallback $r1;

        r0 := @this: androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $r1 = r0.<androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub: androidx.car.app.SurfaceCallback mSurfaceCallback>;

        interfaceinvoke $r1.<androidx.car.app.SurfaceCallback: void onScroll(float,float)>(f0, f1);

        return null;
    }

    private java.lang.Object lambda$onSurfaceDestroyed$3(androidx.car.app.serialization.Bundleable) throws androidx.car.app.serialization.BundlerException
    {
        androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub r0;
        androidx.car.app.serialization.Bundleable r1;
        androidx.car.app.SurfaceCallback $r2;
        java.lang.Object $r3;
        androidx.car.app.SurfaceContainer $r4;

        r0 := @this: androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub;

        r1 := @parameter0: androidx.car.app.serialization.Bundleable;

        $r2 = r0.<androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub: androidx.car.app.SurfaceCallback mSurfaceCallback>;

        $r3 = virtualinvoke r1.<androidx.car.app.serialization.Bundleable: java.lang.Object get()>();

        $r4 = (androidx.car.app.SurfaceContainer) $r3;

        interfaceinvoke $r2.<androidx.car.app.SurfaceCallback: void onSurfaceDestroyed(androidx.car.app.SurfaceContainer)>($r4);

        return null;
    }

    private java.lang.Object lambda$onStableAreaChanged$2(android.graphics.Rect) throws androidx.car.app.serialization.BundlerException
    {
        androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub r0;
        android.graphics.Rect r1;
        androidx.car.app.SurfaceCallback $r2;

        r0 := @this: androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub;

        r1 := @parameter0: android.graphics.Rect;

        $r2 = r0.<androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub: androidx.car.app.SurfaceCallback mSurfaceCallback>;

        interfaceinvoke $r2.<androidx.car.app.SurfaceCallback: void onStableAreaChanged(android.graphics.Rect)>(r1);

        return null;
    }

    private java.lang.Object lambda$onVisibleAreaChanged$1(android.graphics.Rect) throws androidx.car.app.serialization.BundlerException
    {
        androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub r0;
        android.graphics.Rect r1;
        androidx.car.app.SurfaceCallback $r2;

        r0 := @this: androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub;

        r1 := @parameter0: android.graphics.Rect;

        $r2 = r0.<androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub: androidx.car.app.SurfaceCallback mSurfaceCallback>;

        interfaceinvoke $r2.<androidx.car.app.SurfaceCallback: void onVisibleAreaChanged(android.graphics.Rect)>(r1);

        return null;
    }

    private java.lang.Object lambda$onSurfaceAvailable$0(androidx.car.app.serialization.Bundleable) throws androidx.car.app.serialization.BundlerException
    {
        androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub r0;
        androidx.car.app.serialization.Bundleable r1;
        androidx.car.app.SurfaceCallback $r2;
        java.lang.Object $r3;
        androidx.car.app.SurfaceContainer $r4;

        r0 := @this: androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub;

        r1 := @parameter0: androidx.car.app.serialization.Bundleable;

        $r2 = r0.<androidx.car.app.utils.RemoteUtils$SurfaceCallbackStub: androidx.car.app.SurfaceCallback mSurfaceCallback>;

        $r3 = virtualinvoke r1.<androidx.car.app.serialization.Bundleable: java.lang.Object get()>();

        $r4 = (androidx.car.app.SurfaceContainer) $r3;

        interfaceinvoke $r2.<androidx.car.app.SurfaceCallback: void onSurfaceAvailable(androidx.car.app.SurfaceContainer)>($r4);

        return null;
    }

