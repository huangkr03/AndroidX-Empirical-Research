androidx.media3.test.utils.ExoPlayerTestRunner
<androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.common.Format VIDEO_FORMAT>
<androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.common.Format AUDIO_FORMAT>
<androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.test.utils.TestExoPlayerBuilder playerBuilder>
<androidx.media3.test.utils.ExoPlayerTestRunner: java.util.List mediaSources>
<androidx.media3.test.utils.ExoPlayerTestRunner: boolean skipSettingMediaSources>
<androidx.media3.test.utils.ExoPlayerTestRunner: int initialMediaItemIndex>
<androidx.media3.test.utils.ExoPlayerTestRunner: long initialPositionMs>
<androidx.media3.test.utils.ExoPlayerTestRunner: android.view.Surface surface>
<androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.test.utils.ActionSchedule actionSchedule>
<androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.common.Player$Listener playerListener>
<androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.exoplayer.analytics.AnalyticsListener analyticsListener>
<androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.common.util.Clock clock>
<androidx.media3.test.utils.ExoPlayerTestRunner: android.os.HandlerThread playerThread>
<androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.common.util.HandlerWrapper handler>
<androidx.media3.test.utils.ExoPlayerTestRunner: java.util.concurrent.CountDownLatch endedCountDownLatch>
<androidx.media3.test.utils.ExoPlayerTestRunner: java.util.concurrent.CountDownLatch actionScheduleFinishedCountDownLatch>
<androidx.media3.test.utils.ExoPlayerTestRunner: java.util.ArrayList timelines>
<androidx.media3.test.utils.ExoPlayerTestRunner: java.util.ArrayList timelineChangeReasons>
<androidx.media3.test.utils.ExoPlayerTestRunner: java.util.ArrayList mediaItems>
<androidx.media3.test.utils.ExoPlayerTestRunner: java.util.ArrayList mediaItemTransitionReasons>
<androidx.media3.test.utils.ExoPlayerTestRunner: java.util.ArrayList periodIndices>
<androidx.media3.test.utils.ExoPlayerTestRunner: java.util.ArrayList discontinuityReasons>
<androidx.media3.test.utils.ExoPlayerTestRunner: java.util.ArrayList playbackStates>
<androidx.media3.test.utils.ExoPlayerTestRunner: boolean pauseAtEndOfMediaItems>
<androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.exoplayer.ExoPlayer player>
<androidx.media3.test.utils.ExoPlayerTestRunner: java.lang.Exception exception>
<androidx.media3.test.utils.ExoPlayerTestRunner: boolean playerWasPrepared>
    private void <init>(androidx.media3.test.utils.TestExoPlayerBuilder, java.util.List, boolean, int, long, android.view.Surface, androidx.media3.test.utils.ActionSchedule, androidx.media3.common.Player$Listener, androidx.media3.exoplayer.analytics.AnalyticsListener, int, boolean)
    {
        androidx.media3.test.utils.ExoPlayerTestRunner r0;
        androidx.media3.test.utils.TestExoPlayerBuilder r1;
        java.util.List r2;
        boolean z0, z1;
        int i0, i2;
        long l1;
        android.view.Surface r3;
        androidx.media3.test.utils.ActionSchedule r4;
        androidx.media3.common.Player$Listener r5;
        androidx.media3.exoplayer.analytics.AnalyticsListener r6;
        androidx.media3.common.util.Clock $r7, $r20;
        java.util.ArrayList $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        java.util.concurrent.CountDownLatch $r15, $r16;
        android.os.HandlerThread $r17, $r18, $r19;
        android.os.Looper $r21;
        androidx.media3.common.util.HandlerWrapper $r22;
        byte $b3;

        r0 := @this: androidx.media3.test.utils.ExoPlayerTestRunner;

        r1 := @parameter0: androidx.media3.test.utils.TestExoPlayerBuilder;

        r2 := @parameter1: java.util.List;

        z0 := @parameter2: boolean;

        i0 := @parameter3: int;

        l1 := @parameter4: long;

        r3 := @parameter5: android.view.Surface;

        r4 := @parameter6: androidx.media3.test.utils.ActionSchedule;

        r5 := @parameter7: androidx.media3.common.Player$Listener;

        r6 := @parameter8: androidx.media3.exoplayer.analytics.AnalyticsListener;

        i2 := @parameter9: int;

        z1 := @parameter10: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.test.utils.TestExoPlayerBuilder playerBuilder> = r1;

        r0.<androidx.media3.test.utils.ExoPlayerTestRunner: java.util.List mediaSources> = r2;

        r0.<androidx.media3.test.utils.ExoPlayerTestRunner: boolean skipSettingMediaSources> = z0;

        r0.<androidx.media3.test.utils.ExoPlayerTestRunner: int initialMediaItemIndex> = i0;

        r0.<androidx.media3.test.utils.ExoPlayerTestRunner: long initialPositionMs> = l1;

        r0.<androidx.media3.test.utils.ExoPlayerTestRunner: android.view.Surface surface> = r3;

        r0.<androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.test.utils.ActionSchedule actionSchedule> = r4;

        r0.<androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.common.Player$Listener playerListener> = r5;

        r0.<androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.exoplayer.analytics.AnalyticsListener analyticsListener> = r6;

        $r7 = virtualinvoke r1.<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.common.util.Clock getClock()>();

        r0.<androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.common.util.Clock clock> = $r7;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r0.<androidx.media3.test.utils.ExoPlayerTestRunner: java.util.ArrayList timelines> = $r8;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r0.<androidx.media3.test.utils.ExoPlayerTestRunner: java.util.ArrayList timelineChangeReasons> = $r9;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        r0.<androidx.media3.test.utils.ExoPlayerTestRunner: java.util.ArrayList mediaItems> = $r10;

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        r0.<androidx.media3.test.utils.ExoPlayerTestRunner: java.util.ArrayList mediaItemTransitionReasons> = $r11;

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        r0.<androidx.media3.test.utils.ExoPlayerTestRunner: java.util.ArrayList periodIndices> = $r12;

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        r0.<androidx.media3.test.utils.ExoPlayerTestRunner: java.util.ArrayList discontinuityReasons> = $r13;

        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>()>();

        r0.<androidx.media3.test.utils.ExoPlayerTestRunner: java.util.ArrayList playbackStates> = $r14;

        $r15 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r15.<java.util.concurrent.CountDownLatch: void <init>(int)>(i2);

        r0.<androidx.media3.test.utils.ExoPlayerTestRunner: java.util.concurrent.CountDownLatch endedCountDownLatch> = $r15;

        $r16 = new java.util.concurrent.CountDownLatch;

        if r4 == null goto label1;

        $b3 = 1;

        goto label2;

     label1:
        $b3 = 0;

     label2:
        specialinvoke $r16.<java.util.concurrent.CountDownLatch: void <init>(int)>($b3);

        r0.<androidx.media3.test.utils.ExoPlayerTestRunner: java.util.concurrent.CountDownLatch actionScheduleFinishedCountDownLatch> = $r16;

        $r17 = new android.os.HandlerThread;

        specialinvoke $r17.<android.os.HandlerThread: void <init>(java.lang.String)>("ExoPlayerTest thread");

        r0.<androidx.media3.test.utils.ExoPlayerTestRunner: android.os.HandlerThread playerThread> = $r17;

        $r18 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: android.os.HandlerThread playerThread>;

        virtualinvoke $r18.<android.os.HandlerThread: void start()>();

        $r20 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.common.util.Clock clock>;

        $r19 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: android.os.HandlerThread playerThread>;

        $r21 = virtualinvoke $r19.<android.os.HandlerThread: android.os.Looper getLooper()>();

        $r22 = interfaceinvoke $r20.<androidx.media3.common.util.Clock: androidx.media3.common.util.HandlerWrapper createHandler(android.os.Looper,android.os.Handler$Callback)>($r21, null);

        r0.<androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.common.util.HandlerWrapper handler> = $r22;

        r0.<androidx.media3.test.utils.ExoPlayerTestRunner: boolean pauseAtEndOfMediaItems> = z1;

        return;
    }

    public androidx.media3.test.utils.ExoPlayerTestRunner start()
    {
        androidx.media3.test.utils.ExoPlayerTestRunner r0, $r1;

        r0 := @this: androidx.media3.test.utils.ExoPlayerTestRunner;

        $r1 = virtualinvoke r0.<androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.test.utils.ExoPlayerTestRunner start(boolean)>(1);

        return $r1;
    }

    public androidx.media3.test.utils.ExoPlayerTestRunner start(boolean)
    {
        androidx.media3.test.utils.ExoPlayerTestRunner r0;
        boolean z0;
        androidx.media3.common.util.HandlerWrapper $r1;
        java.lang.Runnable $r2;

        r0 := @this: androidx.media3.test.utils.ExoPlayerTestRunner;

        z0 := @parameter0: boolean;

        $r1 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.common.util.HandlerWrapper handler>;

        $r2 = dynamicinvoke "run" <java.lang.Runnable (androidx.media3.test.utils.ExoPlayerTestRunner,boolean)>(r0, z0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.media3.test.utils.ExoPlayerTestRunner: void lambda$start$0(boolean)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r1.<androidx.media3.common.util.HandlerWrapper: boolean post(java.lang.Runnable)>($r2);

        return r0;
    }

    public androidx.media3.test.utils.ExoPlayerTestRunner blockUntilEnded(long) throws java.lang.Exception
    {
        androidx.media3.test.utils.ExoPlayerTestRunner r0;
        long l0;
        androidx.media3.common.util.Clock $r1;
        java.util.concurrent.TimeUnit $r2;
        java.util.concurrent.CountDownLatch $r3;
        boolean $z0;
        java.lang.Exception $r4, $r5;
        java.util.concurrent.TimeoutException $r6;

        r0 := @this: androidx.media3.test.utils.ExoPlayerTestRunner;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.common.util.Clock clock>;

        interfaceinvoke $r1.<androidx.media3.common.util.Clock: void onThreadBlocked()>();

        $r3 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: java.util.concurrent.CountDownLatch endedCountDownLatch>;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $z0 = virtualinvoke $r3.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(l0, $r2);

        if $z0 != 0 goto label1;

        $r6 = new java.util.concurrent.TimeoutException;

        specialinvoke $r6.<java.util.concurrent.TimeoutException: void <init>(java.lang.String)>("Test playback timed out waiting for playback to end.");

        r0.<androidx.media3.test.utils.ExoPlayerTestRunner: java.lang.Exception exception> = $r6;

     label1:
        specialinvoke r0.<androidx.media3.test.utils.ExoPlayerTestRunner: void release()>();

        $r4 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: java.lang.Exception exception>;

        if $r4 == null goto label2;

        $r5 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: java.lang.Exception exception>;

        throw $r5;

     label2:
        return r0;
    }

    public androidx.media3.test.utils.ExoPlayerTestRunner blockUntilActionScheduleFinished(long) throws java.util.concurrent.TimeoutException, java.lang.InterruptedException
    {
        androidx.media3.test.utils.ExoPlayerTestRunner r0;
        long l0;
        androidx.media3.common.util.Clock $r1;
        java.util.concurrent.TimeUnit $r2;
        java.util.concurrent.CountDownLatch $r3;
        boolean $z0;
        java.util.concurrent.TimeoutException $r4;

        r0 := @this: androidx.media3.test.utils.ExoPlayerTestRunner;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.common.util.Clock clock>;

        interfaceinvoke $r1.<androidx.media3.common.util.Clock: void onThreadBlocked()>();

        $r3 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: java.util.concurrent.CountDownLatch actionScheduleFinishedCountDownLatch>;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $z0 = virtualinvoke $r3.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(l0, $r2);

        if $z0 != 0 goto label1;

        $r4 = new java.util.concurrent.TimeoutException;

        specialinvoke $r4.<java.util.concurrent.TimeoutException: void <init>(java.lang.String)>("Test playback timed out waiting for action schedule to finish.");

        throw $r4;

     label1:
        return r0;
    }

    public transient void assertTimelinesSame(androidx.media3.common.Timeline[])
    {
        androidx.media3.test.utils.ExoPlayerTestRunner r0;
        androidx.media3.common.Timeline[] r1;
        java.util.ArrayList $r2;
        com.google.common.collect.ImmutableList $r3, $r4;

        r0 := @this: androidx.media3.test.utils.ExoPlayerTestRunner;

        r1 := @parameter0: androidx.media3.common.Timeline[];

        $r2 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: java.util.ArrayList timelines>;

        $r3 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.util.Collection)>($r2);

        $r4 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.lang.Object[])>(r1);

        staticinvoke <androidx.media3.test.utils.TestUtil: void assertTimelinesSame(java.util.List,java.util.List)>($r3, $r4);

        return;
    }

    public transient void assertTimelineChangeReasonsEqual(java.lang.Integer[])
    {
        androidx.media3.test.utils.ExoPlayerTestRunner r0;
        java.lang.Integer[] r1;
        java.util.ArrayList $r2;
        com.google.common.truth.IterableSubject $r3;
        java.util.List $r4;
        com.google.common.truth.Ordered $r5;

        r0 := @this: androidx.media3.test.utils.ExoPlayerTestRunner;

        r1 := @parameter0: java.lang.Integer[];

        $r2 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: java.util.ArrayList timelineChangeReasons>;

        $r3 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IterableSubject assertThat(java.lang.Iterable)>($r2);

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        $r5 = virtualinvoke $r3.<com.google.common.truth.IterableSubject: com.google.common.truth.Ordered containsExactlyElementsIn(java.lang.Iterable)>($r4);

        interfaceinvoke $r5.<com.google.common.truth.Ordered: void inOrder()>();

        return;
    }

    public transient void assertPlaybackStatesEqual(java.lang.Integer[])
    {
        androidx.media3.test.utils.ExoPlayerTestRunner r0;
        java.lang.Integer[] r1;
        java.util.ArrayList $r2;
        com.google.common.truth.IterableSubject $r3;
        com.google.common.truth.Ordered $r4;

        r0 := @this: androidx.media3.test.utils.ExoPlayerTestRunner;

        r1 := @parameter0: java.lang.Integer[];

        $r2 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: java.util.ArrayList playbackStates>;

        $r3 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IterableSubject assertThat(java.lang.Iterable)>($r2);

        $r4 = virtualinvoke $r3.<com.google.common.truth.IterableSubject: com.google.common.truth.Ordered containsExactlyElementsIn(java.lang.Object[])>(r1);

        interfaceinvoke $r4.<com.google.common.truth.Ordered: void inOrder()>();

        return;
    }

    public void assertNoPositionDiscontinuities()
    {
        androidx.media3.test.utils.ExoPlayerTestRunner r0;
        java.util.ArrayList $r1;
        com.google.common.truth.IterableSubject $r2;

        r0 := @this: androidx.media3.test.utils.ExoPlayerTestRunner;

        $r1 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: java.util.ArrayList discontinuityReasons>;

        $r2 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IterableSubject assertThat(java.lang.Iterable)>($r1);

        virtualinvoke $r2.<com.google.common.truth.IterableSubject: void isEmpty()>();

        return;
    }

    public transient void assertPositionDiscontinuityReasonsEqual(java.lang.Integer[])
    {
        androidx.media3.test.utils.ExoPlayerTestRunner r0;
        java.lang.Integer[] r1;
        java.util.ArrayList $r2;
        com.google.common.truth.IterableSubject $r3;
        java.util.List $r4;
        com.google.common.truth.Ordered $r5;

        r0 := @this: androidx.media3.test.utils.ExoPlayerTestRunner;

        r1 := @parameter0: java.lang.Integer[];

        $r2 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: java.util.ArrayList discontinuityReasons>;

        $r3 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IterableSubject assertThat(java.lang.Iterable)>($r2);

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        $r5 = virtualinvoke $r3.<com.google.common.truth.IterableSubject: com.google.common.truth.Ordered containsExactlyElementsIn(java.lang.Iterable)>($r4);

        interfaceinvoke $r5.<com.google.common.truth.Ordered: void inOrder()>();

        return;
    }

    public transient void assertPlayedPeriodIndices(java.lang.Integer[])
    {
        androidx.media3.test.utils.ExoPlayerTestRunner r0;
        java.lang.Integer[] r1;
        java.util.ArrayList $r2;
        com.google.common.truth.IterableSubject $r3;
        java.util.List $r4;
        com.google.common.truth.Ordered $r5;

        r0 := @this: androidx.media3.test.utils.ExoPlayerTestRunner;

        r1 := @parameter0: java.lang.Integer[];

        $r2 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: java.util.ArrayList periodIndices>;

        $r3 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IterableSubject assertThat(java.lang.Iterable)>($r2);

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        $r5 = virtualinvoke $r3.<com.google.common.truth.IterableSubject: com.google.common.truth.Ordered containsExactlyElementsIn(java.lang.Iterable)>($r4);

        interfaceinvoke $r5.<com.google.common.truth.Ordered: void inOrder()>();

        return;
    }

    private void release() throws java.lang.InterruptedException
    {
        androidx.media3.test.utils.ExoPlayerTestRunner r0;
        androidx.media3.common.util.HandlerWrapper $r1;
        java.lang.Runnable $r2;
        androidx.media3.common.util.Clock $r3;
        android.os.HandlerThread $r4;

        r0 := @this: androidx.media3.test.utils.ExoPlayerTestRunner;

        $r1 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.common.util.HandlerWrapper handler>;

        $r2 = dynamicinvoke "run" <java.lang.Runnable (androidx.media3.test.utils.ExoPlayerTestRunner)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.media3.test.utils.ExoPlayerTestRunner: void lambda$release$1()>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r1.<androidx.media3.common.util.HandlerWrapper: boolean post(java.lang.Runnable)>($r2);

        $r3 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.common.util.Clock clock>;

        interfaceinvoke $r3.<androidx.media3.common.util.Clock: void onThreadBlocked()>();

        $r4 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: android.os.HandlerThread playerThread>;

        virtualinvoke $r4.<android.os.HandlerThread: void join()>();

        return;
    }

    private void handleException(java.lang.Exception)
    {
        androidx.media3.test.utils.ExoPlayerTestRunner r0;
        java.lang.Exception r1, $r2;
        java.util.concurrent.CountDownLatch $r3, $r4;
        long $l0;
        byte $b1;

        r0 := @this: androidx.media3.test.utils.ExoPlayerTestRunner;

        r1 := @parameter0: java.lang.Exception;

        $r2 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: java.lang.Exception exception>;

        if $r2 != null goto label1;

        r0.<androidx.media3.test.utils.ExoPlayerTestRunner: java.lang.Exception exception> = r1;

     label1:
        $r4 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: java.util.concurrent.CountDownLatch endedCountDownLatch>;

        $l0 = virtualinvoke $r4.<java.util.concurrent.CountDownLatch: long getCount()>();

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label2;

        $r3 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: java.util.concurrent.CountDownLatch endedCountDownLatch>;

        virtualinvoke $r3.<java.util.concurrent.CountDownLatch: void countDown()>();

        goto label1;

     label2:
        return;
    }

    public void onTimelineChanged(androidx.media3.common.Timeline, int)
    {
        androidx.media3.test.utils.ExoPlayerTestRunner r0;
        androidx.media3.common.Timeline r1;
        int i0, i1, $i2, $i3, $i4;
        java.util.ArrayList $r2, $r4, $r6, $r7, $r9, $r10;
        java.lang.Integer $r3, $r8, $r12;
        androidx.media3.exoplayer.ExoPlayer $r5;
        boolean $z2;
        java.lang.Object $r11;

        r0 := @this: androidx.media3.test.utils.ExoPlayerTestRunner;

        r1 := @parameter0: androidx.media3.common.Timeline;

        i0 := @parameter1: int;

        $r2 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: java.util.ArrayList timelineChangeReasons>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        $r4 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: java.util.ArrayList timelines>;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        $r5 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.exoplayer.ExoPlayer player>;

        i1 = interfaceinvoke $r5.<androidx.media3.exoplayer.ExoPlayer: int getCurrentPeriodIndex()>();

        $r6 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: java.util.ArrayList periodIndices>;

        $z2 = virtualinvoke $r6.<java.util.ArrayList: boolean isEmpty()>();

        if $z2 != 0 goto label1;

        $r10 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: java.util.ArrayList periodIndices>;

        $r9 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: java.util.ArrayList periodIndices>;

        $i2 = virtualinvoke $r9.<java.util.ArrayList: int size()>();

        $i3 = $i2 - 1;

        $r11 = virtualinvoke $r10.<java.util.ArrayList: java.lang.Object get(int)>($i3);

        $r12 = (java.lang.Integer) $r11;

        $i4 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        if $i4 == i1 goto label2;

     label1:
        $r7 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: java.util.ArrayList periodIndices>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

     label2:
        return;
    }

    public void onMediaItemTransition(androidx.media3.common.MediaItem, int)
    {
        androidx.media3.test.utils.ExoPlayerTestRunner r0;
        androidx.media3.common.MediaItem r1;
        int i0;
        java.util.ArrayList $r2, $r3;
        java.lang.Integer $r4;

        r0 := @this: androidx.media3.test.utils.ExoPlayerTestRunner;

        r1 := @parameter0: androidx.media3.common.MediaItem;

        i0 := @parameter1: int;

        $r2 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: java.util.ArrayList mediaItems>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        $r3 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: java.util.ArrayList mediaItemTransitionReasons>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        return;
    }

    public void onPlaybackStateChanged(int)
    {
        androidx.media3.test.utils.ExoPlayerTestRunner r0;
        int i0;
        java.util.ArrayList $r1;
        java.lang.Integer $r2;
        boolean $z1, $z2, $z3, $z4;
        java.util.concurrent.CountDownLatch $r3;

        r0 := @this: androidx.media3.test.utils.ExoPlayerTestRunner;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: java.util.ArrayList playbackStates>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        $z1 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: boolean playerWasPrepared>;

        if i0 == 1 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        $z2 = $z1 | $z4;

        r0.<androidx.media3.test.utils.ExoPlayerTestRunner: boolean playerWasPrepared> = $z2;

        if i0 == 4 goto label3;

        if i0 != 1 goto label4;

        $z3 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: boolean playerWasPrepared>;

        if $z3 == 0 goto label4;

     label3:
        $r3 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: java.util.concurrent.CountDownLatch endedCountDownLatch>;

        virtualinvoke $r3.<java.util.concurrent.CountDownLatch: void countDown()>();

     label4:
        return;
    }

    public void onPlayerError(androidx.media3.common.PlaybackException)
    {
        androidx.media3.test.utils.ExoPlayerTestRunner r0;
        androidx.media3.common.PlaybackException r1;

        r0 := @this: androidx.media3.test.utils.ExoPlayerTestRunner;

        r1 := @parameter0: androidx.media3.common.PlaybackException;

        specialinvoke r0.<androidx.media3.test.utils.ExoPlayerTestRunner: void handleException(java.lang.Exception)>(r1);

        return;
    }

    public void onPositionDiscontinuity(androidx.media3.common.Player$PositionInfo, androidx.media3.common.Player$PositionInfo, int)
    {
        androidx.media3.test.utils.ExoPlayerTestRunner r0;
        androidx.media3.common.Player$PositionInfo r1, r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        java.util.ArrayList $r3, $r6, $r7, $r10, $r11;
        java.lang.Integer $r4, $r9, $r12;
        androidx.media3.exoplayer.ExoPlayer $r5;
        java.lang.Object $r8;
        boolean $z2;

        r0 := @this: androidx.media3.test.utils.ExoPlayerTestRunner;

        r1 := @parameter0: androidx.media3.common.Player$PositionInfo;

        r2 := @parameter1: androidx.media3.common.Player$PositionInfo;

        i0 := @parameter2: int;

        $r3 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: java.util.ArrayList discontinuityReasons>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        $r5 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.exoplayer.ExoPlayer player>;

        i1 = interfaceinvoke $r5.<androidx.media3.exoplayer.ExoPlayer: int getCurrentPeriodIndex()>();

        if i0 != 0 goto label1;

        $i5 = r1.<androidx.media3.common.Player$PositionInfo: int adGroupIndex>;

        if $i5 == -1 goto label1;

        $i6 = r2.<androidx.media3.common.Player$PositionInfo: int adGroupIndex>;

        if $i6 != -1 goto label2;

     label1:
        $r10 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: java.util.ArrayList periodIndices>;

        $z2 = virtualinvoke $r10.<java.util.ArrayList: boolean isEmpty()>();

        if $z2 != 0 goto label2;

        $r7 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: java.util.ArrayList periodIndices>;

        $r6 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: java.util.ArrayList periodIndices>;

        $i2 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        $i3 = $i2 - 1;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>($i3);

        $r9 = (java.lang.Integer) $r8;

        $i4 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        if $i4 == i1 goto label3;

     label2:
        $r11 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: java.util.ArrayList periodIndices>;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        virtualinvoke $r11.<java.util.ArrayList: boolean add(java.lang.Object)>($r12);

     label3:
        return;
    }

    public void onActionScheduleFinished()
    {
        androidx.media3.test.utils.ExoPlayerTestRunner r0;
        java.util.concurrent.CountDownLatch $r1;

        r0 := @this: androidx.media3.test.utils.ExoPlayerTestRunner;

        $r1 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: java.util.concurrent.CountDownLatch actionScheduleFinishedCountDownLatch>;

        virtualinvoke $r1.<java.util.concurrent.CountDownLatch: void countDown()>();

        return;
    }

    private void lambda$release$1()
    {
        androidx.media3.test.utils.ExoPlayerTestRunner r0;
        java.lang.Throwable r1, r2, $r6, $r8;
        androidx.media3.exoplayer.ExoPlayer $r3, $r5;
        android.os.HandlerThread $r4, $r7, $r9;

        r0 := @this: androidx.media3.test.utils.ExoPlayerTestRunner;

     label1:
        $r3 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.exoplayer.ExoPlayer player>;

        if $r3 == null goto label2;

        $r5 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.exoplayer.ExoPlayer player>;

        interfaceinvoke $r5.<androidx.media3.exoplayer.ExoPlayer: void release()>();

     label2:
        $r4 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: android.os.HandlerThread playerThread>;

        virtualinvoke $r4.<android.os.HandlerThread: boolean quit()>();

        goto label6;

     label3:
        $r8 := @caughtexception;

        r1 = $r8;

        specialinvoke r0.<androidx.media3.test.utils.ExoPlayerTestRunner: void handleException(java.lang.Exception)>(r1);

     label4:
        $r9 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: android.os.HandlerThread playerThread>;

        virtualinvoke $r9.<android.os.HandlerThread: boolean quit()>();

        goto label6;

     label5:
        $r6 := @caughtexception;

        r2 = $r6;

        $r7 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: android.os.HandlerThread playerThread>;

        virtualinvoke $r7.<android.os.HandlerThread: boolean quit()>();

        throw r2;

     label6:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    private void lambda$start$0(boolean)
    {
        androidx.media3.test.utils.ExoPlayerTestRunner r0;
        boolean z0, $z1, $z2;
        java.lang.Throwable r1, $r29;
        androidx.media3.test.utils.TestExoPlayerBuilder $r2, $r4, $r16;
        android.os.Looper $r3;
        androidx.media3.exoplayer.ExoPlayer $r5, $r7, $r10, $r12, $r14, $r15, $r18, $r23, $r25, $r26, $r28;
        android.view.Surface $r6, $r21, $r27;
        androidx.media3.common.Player$Listener $r8, $r24;
        androidx.media3.exoplayer.analytics.AnalyticsListener $r9, $r22;
        androidx.media3.test.utils.ActionSchedule $r11, $r17;
        int $i0, $i2;
        java.util.List $r13;
        long $l1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector $r19;
        androidx.media3.common.util.HandlerWrapper $r20;

        r0 := @this: androidx.media3.test.utils.ExoPlayerTestRunner;

        z0 := @parameter0: boolean;

     label01:
        $r2 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.test.utils.TestExoPlayerBuilder playerBuilder>;

        $r3 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r4 = virtualinvoke $r2.<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.test.utils.TestExoPlayerBuilder setLooper(android.os.Looper)>($r3);

        $r5 = virtualinvoke $r4.<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.exoplayer.ExoPlayer build()>();

        r0.<androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.exoplayer.ExoPlayer player> = $r5;

        $r6 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: android.view.Surface surface>;

        if $r6 == null goto label02;

        $r28 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.exoplayer.ExoPlayer player>;

        $r27 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: android.view.Surface surface>;

        interfaceinvoke $r28.<androidx.media3.exoplayer.ExoPlayer: void setVideoSurface(android.view.Surface)>($r27);

     label02:
        $z1 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: boolean pauseAtEndOfMediaItems>;

        if $z1 == 0 goto label03;

        $r26 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.exoplayer.ExoPlayer player>;

        interfaceinvoke $r26.<androidx.media3.exoplayer.ExoPlayer: void setPauseAtEndOfMediaItems(boolean)>(1);

     label03:
        $r7 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.exoplayer.ExoPlayer player>;

        interfaceinvoke $r7.<androidx.media3.exoplayer.ExoPlayer: void addListener(androidx.media3.common.Player$Listener)>(r0);

        $r8 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.common.Player$Listener playerListener>;

        if $r8 == null goto label04;

        $r25 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.exoplayer.ExoPlayer player>;

        $r24 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.common.Player$Listener playerListener>;

        interfaceinvoke $r25.<androidx.media3.exoplayer.ExoPlayer: void addListener(androidx.media3.common.Player$Listener)>($r24);

     label04:
        $r9 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.exoplayer.analytics.AnalyticsListener analyticsListener>;

        if $r9 == null goto label05;

        $r23 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.exoplayer.ExoPlayer player>;

        $r22 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.exoplayer.analytics.AnalyticsListener analyticsListener>;

        interfaceinvoke $r23.<androidx.media3.exoplayer.ExoPlayer: void addAnalyticsListener(androidx.media3.exoplayer.analytics.AnalyticsListener)>($r22);

     label05:
        $r10 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.exoplayer.ExoPlayer player>;

        interfaceinvoke $r10.<androidx.media3.exoplayer.ExoPlayer: void play()>();

        $r11 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.test.utils.ActionSchedule actionSchedule>;

        if $r11 == null goto label06;

        $r17 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.test.utils.ActionSchedule actionSchedule>;

        $r18 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.exoplayer.ExoPlayer player>;

        $r16 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.test.utils.TestExoPlayerBuilder playerBuilder>;

        $r19 = virtualinvoke $r16.<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.exoplayer.trackselection.DefaultTrackSelector getTrackSelector()>();

        $r21 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: android.view.Surface surface>;

        $r20 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.common.util.HandlerWrapper handler>;

        virtualinvoke $r17.<androidx.media3.test.utils.ActionSchedule: void start(androidx.media3.exoplayer.ExoPlayer,androidx.media3.exoplayer.trackselection.DefaultTrackSelector,android.view.Surface,androidx.media3.common.util.HandlerWrapper,androidx.media3.test.utils.ActionSchedule$Callback)>($r18, $r19, $r21, $r20, r0);

     label06:
        $i0 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: int initialMediaItemIndex>;

        if $i0 == -1 goto label07;

        $r15 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.exoplayer.ExoPlayer player>;

        $i2 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: int initialMediaItemIndex>;

        $l1 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: long initialPositionMs>;

        interfaceinvoke $r15.<androidx.media3.exoplayer.ExoPlayer: void seekTo(int,long)>($i2, $l1);

     label07:
        $z2 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: boolean skipSettingMediaSources>;

        if $z2 != 0 goto label08;

        $r14 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.exoplayer.ExoPlayer player>;

        $r13 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: java.util.List mediaSources>;

        interfaceinvoke $r14.<androidx.media3.exoplayer.ExoPlayer: void setMediaSources(java.util.List,boolean)>($r13, 0);

     label08:
        if z0 == 0 goto label09;

        $r12 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.exoplayer.ExoPlayer player>;

        interfaceinvoke $r12.<androidx.media3.exoplayer.ExoPlayer: void prepare()>();

     label09:
        goto label11;

     label10:
        $r29 := @caughtexception;

        r1 = $r29;

        specialinvoke r0.<androidx.media3.test.utils.ExoPlayerTestRunner: void handleException(java.lang.Exception)>(r1);

     label11:
        return;

        catch java.lang.Exception from label01 to label09 with label10;
    }

    void <init>(androidx.media3.test.utils.TestExoPlayerBuilder, java.util.List, boolean, int, long, android.view.Surface, androidx.media3.test.utils.ActionSchedule, androidx.media3.common.Player$Listener, androidx.media3.exoplayer.analytics.AnalyticsListener, int, boolean, androidx.media3.test.utils.ExoPlayerTestRunner$1)
    {
        androidx.media3.test.utils.ExoPlayerTestRunner r0;
        androidx.media3.test.utils.TestExoPlayerBuilder r1;
        java.util.List r2;
        boolean z0, z1;
        int i0, i2;
        long l1;
        android.view.Surface r3;
        androidx.media3.test.utils.ActionSchedule r4;
        androidx.media3.common.Player$Listener r5;
        androidx.media3.exoplayer.analytics.AnalyticsListener r6;
        androidx.media3.test.utils.ExoPlayerTestRunner$1 r7;

        r0 := @this: androidx.media3.test.utils.ExoPlayerTestRunner;

        r1 := @parameter0: androidx.media3.test.utils.TestExoPlayerBuilder;

        r2 := @parameter1: java.util.List;

        z0 := @parameter2: boolean;

        i0 := @parameter3: int;

        l1 := @parameter4: long;

        r3 := @parameter5: android.view.Surface;

        r4 := @parameter6: androidx.media3.test.utils.ActionSchedule;

        r5 := @parameter7: androidx.media3.common.Player$Listener;

        r6 := @parameter8: androidx.media3.exoplayer.analytics.AnalyticsListener;

        i2 := @parameter9: int;

        z1 := @parameter10: boolean;

        r7 := @parameter11: androidx.media3.test.utils.ExoPlayerTestRunner$1;

        specialinvoke r0.<androidx.media3.test.utils.ExoPlayerTestRunner: void <init>(androidx.media3.test.utils.TestExoPlayerBuilder,java.util.List,boolean,int,long,android.view.Surface,androidx.media3.test.utils.ActionSchedule,androidx.media3.common.Player$Listener,androidx.media3.exoplayer.analytics.AnalyticsListener,int,boolean)>(r1, r2, z0, i0, l1, r3, r4, r5, r6, i2, z1);

        return;
    }

    static void <clinit>()
    {
        androidx.media3.common.Format$Builder $r0, $r1, $r2, $r3, $r4, $r6, $r7, $r8, $r9, $r10;
        androidx.media3.common.Format $r5, $r11;

        $r0 = new androidx.media3.common.Format$Builder;

        specialinvoke $r0.<androidx.media3.common.Format$Builder: void <init>()>();

        $r1 = virtualinvoke $r0.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setSampleMimeType(java.lang.String)>("video/avc");

        $r2 = virtualinvoke $r1.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setAverageBitrate(int)>(800000);

        $r3 = virtualinvoke $r2.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setWidth(int)>(1280);

        $r4 = virtualinvoke $r3.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setHeight(int)>(720);

        $r5 = virtualinvoke $r4.<androidx.media3.common.Format$Builder: androidx.media3.common.Format build()>();

        <androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.common.Format VIDEO_FORMAT> = $r5;

        $r6 = new androidx.media3.common.Format$Builder;

        specialinvoke $r6.<androidx.media3.common.Format$Builder: void <init>()>();

        $r7 = virtualinvoke $r6.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setSampleMimeType(java.lang.String)>("audio/mp4a-latm");

        $r8 = virtualinvoke $r7.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setAverageBitrate(int)>(100000);

        $r9 = virtualinvoke $r8.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setChannelCount(int)>(2);

        $r10 = virtualinvoke $r9.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setSampleRate(int)>(44100);

        $r11 = virtualinvoke $r10.<androidx.media3.common.Format$Builder: androidx.media3.common.Format build()>();

        <androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.common.Format AUDIO_FORMAT> = $r11;

        return;
    }

androidx.media3.test.utils.ExoPlayerTestRunner$1
androidx.media3.test.utils.ExoPlayerTestRunner$Builder
<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: androidx.media3.test.utils.TestExoPlayerBuilder testPlayerBuilder>
<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: androidx.media3.common.Timeline timeline>
<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: java.util.List mediaSources>
<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: androidx.media3.common.Format[] supportedFormats>
<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: java.lang.Object manifest>
<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: androidx.media3.test.utils.ActionSchedule actionSchedule>
<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: android.view.Surface surface>
<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: androidx.media3.common.Player$Listener playerListener>
<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: androidx.media3.exoplayer.analytics.AnalyticsListener analyticsListener>
<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: java.lang.Integer expectedPlayerEndedCount>
<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: boolean pauseAtEndOfMediaItems>
<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: int initialMediaItemIndex>
<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: long initialPositionMs>
<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: boolean skipSettingMediaSources>
    public void <init>(android.content.Context)
    {
        androidx.media3.test.utils.ExoPlayerTestRunner$Builder r0;
        android.content.Context r1;
        androidx.media3.test.utils.TestExoPlayerBuilder $r2;
        java.util.ArrayList $r3;
        androidx.media3.common.Format[] $r4;
        androidx.media3.common.Format $r5;

        r0 := @this: androidx.media3.test.utils.ExoPlayerTestRunner$Builder;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new androidx.media3.test.utils.TestExoPlayerBuilder;

        specialinvoke $r2.<androidx.media3.test.utils.TestExoPlayerBuilder: void <init>(android.content.Context)>(r1);

        r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: androidx.media3.test.utils.TestExoPlayerBuilder testPlayerBuilder> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: java.util.List mediaSources> = $r3;

        $r4 = newarray (androidx.media3.common.Format)[1];

        $r5 = <androidx.media3.test.utils.ExoPlayerTestRunner: androidx.media3.common.Format VIDEO_FORMAT>;

        $r4[0] = $r5;

        r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: androidx.media3.common.Format[] supportedFormats> = $r4;

        r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: int initialMediaItemIndex> = -1;

        r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: long initialPositionMs> = -9223372036854775807L;

        return;
    }

    public androidx.media3.test.utils.ExoPlayerTestRunner$Builder setTimeline(androidx.media3.common.Timeline)
    {
        androidx.media3.test.utils.ExoPlayerTestRunner$Builder r0;
        androidx.media3.common.Timeline r1;
        java.util.List $r2;
        com.google.common.truth.IterableSubject $r3;
        boolean $z0;

        r0 := @this: androidx.media3.test.utils.ExoPlayerTestRunner$Builder;

        r1 := @parameter0: androidx.media3.common.Timeline;

        $r2 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: java.util.List mediaSources>;

        $r3 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IterableSubject assertThat(java.lang.Iterable)>($r2);

        virtualinvoke $r3.<com.google.common.truth.IterableSubject: void isEmpty()>();

        $z0 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: boolean skipSettingMediaSources>;

        staticinvoke <junit.framework.TestCase: void assertFalse(boolean)>($z0);

        r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: androidx.media3.common.Timeline timeline> = r1;

        return r0;
    }

    public androidx.media3.test.utils.ExoPlayerTestRunner$Builder setManifest(java.lang.Object)
    {
        androidx.media3.test.utils.ExoPlayerTestRunner$Builder r0;
        java.lang.Object r1;
        java.util.List $r2;
        com.google.common.truth.IterableSubject $r3;
        boolean $z0;

        r0 := @this: androidx.media3.test.utils.ExoPlayerTestRunner$Builder;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: java.util.List mediaSources>;

        $r3 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IterableSubject assertThat(java.lang.Iterable)>($r2);

        virtualinvoke $r3.<com.google.common.truth.IterableSubject: void isEmpty()>();

        $z0 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: boolean skipSettingMediaSources>;

        staticinvoke <junit.framework.TestCase: void assertFalse(boolean)>($z0);

        r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: java.lang.Object manifest> = r1;

        return r0;
    }

    public androidx.media3.test.utils.ExoPlayerTestRunner$Builder initialSeek(int, long)
    {
        androidx.media3.test.utils.ExoPlayerTestRunner$Builder r0;
        int i0;
        long l1;

        r0 := @this: androidx.media3.test.utils.ExoPlayerTestRunner$Builder;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: int initialMediaItemIndex> = i0;

        r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: long initialPositionMs> = l1;

        return r0;
    }

    public transient androidx.media3.test.utils.ExoPlayerTestRunner$Builder setMediaSources(androidx.media3.exoplayer.source.MediaSource[])
    {
        androidx.media3.test.utils.ExoPlayerTestRunner$Builder r0;
        androidx.media3.exoplayer.source.MediaSource[] r1;
        androidx.media3.common.Timeline $r2;
        com.google.common.truth.Subject $r3, $r5;
        java.lang.Object $r4;
        boolean $z0;
        java.util.List $r6;

        r0 := @this: androidx.media3.test.utils.ExoPlayerTestRunner$Builder;

        r1 := @parameter0: androidx.media3.exoplayer.source.MediaSource[];

        $r2 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: androidx.media3.common.Timeline timeline>;

        $r3 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.Subject assertThat(java.lang.Object)>($r2);

        virtualinvoke $r3.<com.google.common.truth.Subject: void isNull()>();

        $r4 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: java.lang.Object manifest>;

        $r5 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.Subject assertThat(java.lang.Object)>($r4);

        virtualinvoke $r5.<com.google.common.truth.Subject: void isNull()>();

        $z0 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: boolean skipSettingMediaSources>;

        staticinvoke <junit.framework.TestCase: void assertFalse(boolean)>($z0);

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: java.util.List mediaSources> = $r6;

        return r0;
    }

    public transient androidx.media3.test.utils.ExoPlayerTestRunner$Builder setSupportedFormats(androidx.media3.common.Format[])
    {
        androidx.media3.test.utils.ExoPlayerTestRunner$Builder r0;
        androidx.media3.common.Format[] r1;

        r0 := @this: androidx.media3.test.utils.ExoPlayerTestRunner$Builder;

        r1 := @parameter0: androidx.media3.common.Format[];

        r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: androidx.media3.common.Format[] supportedFormats> = r1;

        return r0;
    }

    public androidx.media3.test.utils.ExoPlayerTestRunner$Builder skipSettingMediaSources()
    {
        androidx.media3.test.utils.ExoPlayerTestRunner$Builder r0;
        androidx.media3.common.Timeline $r1;
        com.google.common.truth.Subject $r2, $r4;
        java.lang.Object $r3;
        java.util.List $r5;
        com.google.common.truth.IterableSubject $r6;

        r0 := @this: androidx.media3.test.utils.ExoPlayerTestRunner$Builder;

        $r1 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: androidx.media3.common.Timeline timeline>;

        $r2 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.Subject assertThat(java.lang.Object)>($r1);

        virtualinvoke $r2.<com.google.common.truth.Subject: void isNull()>();

        $r3 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: java.lang.Object manifest>;

        $r4 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.Subject assertThat(java.lang.Object)>($r3);

        virtualinvoke $r4.<com.google.common.truth.Subject: void isNull()>();

        $r5 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: java.util.List mediaSources>;

        $r6 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IterableSubject assertThat(java.lang.Iterable)>($r5);

        virtualinvoke $r6.<com.google.common.truth.IterableSubject: void isEmpty()>();

        r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: boolean skipSettingMediaSources> = 1;

        return r0;
    }

    public androidx.media3.test.utils.ExoPlayerTestRunner$Builder setUseLazyPreparation(boolean)
    {
        androidx.media3.test.utils.ExoPlayerTestRunner$Builder r0;
        boolean z0;
        androidx.media3.test.utils.TestExoPlayerBuilder $r1;

        r0 := @this: androidx.media3.test.utils.ExoPlayerTestRunner$Builder;

        z0 := @parameter0: boolean;

        $r1 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: androidx.media3.test.utils.TestExoPlayerBuilder testPlayerBuilder>;

        virtualinvoke $r1.<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.test.utils.TestExoPlayerBuilder setUseLazyPreparation(boolean)>(z0);

        return r0;
    }

    public androidx.media3.test.utils.ExoPlayerTestRunner$Builder setPauseAtEndOfMediaItems(boolean)
    {
        androidx.media3.test.utils.ExoPlayerTestRunner$Builder r0;
        boolean z0;

        r0 := @this: androidx.media3.test.utils.ExoPlayerTestRunner$Builder;

        z0 := @parameter0: boolean;

        r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: boolean pauseAtEndOfMediaItems> = z0;

        return r0;
    }

    public androidx.media3.test.utils.ExoPlayerTestRunner$Builder setTrackSelector(androidx.media3.exoplayer.trackselection.DefaultTrackSelector)
    {
        androidx.media3.test.utils.ExoPlayerTestRunner$Builder r0;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r1;
        androidx.media3.test.utils.TestExoPlayerBuilder $r2;

        r0 := @this: androidx.media3.test.utils.ExoPlayerTestRunner$Builder;

        r1 := @parameter0: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        $r2 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: androidx.media3.test.utils.TestExoPlayerBuilder testPlayerBuilder>;

        virtualinvoke $r2.<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.test.utils.TestExoPlayerBuilder setTrackSelector(androidx.media3.exoplayer.trackselection.DefaultTrackSelector)>(r1);

        return r0;
    }

    public androidx.media3.test.utils.ExoPlayerTestRunner$Builder setLoadControl(androidx.media3.exoplayer.LoadControl)
    {
        androidx.media3.test.utils.ExoPlayerTestRunner$Builder r0;
        androidx.media3.exoplayer.LoadControl r1;
        androidx.media3.test.utils.TestExoPlayerBuilder $r2;

        r0 := @this: androidx.media3.test.utils.ExoPlayerTestRunner$Builder;

        r1 := @parameter0: androidx.media3.exoplayer.LoadControl;

        $r2 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: androidx.media3.test.utils.TestExoPlayerBuilder testPlayerBuilder>;

        virtualinvoke $r2.<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.test.utils.TestExoPlayerBuilder setLoadControl(androidx.media3.exoplayer.LoadControl)>(r1);

        return r0;
    }

    public androidx.media3.test.utils.ExoPlayerTestRunner$Builder setBandwidthMeter(androidx.media3.exoplayer.upstream.BandwidthMeter)
    {
        androidx.media3.test.utils.ExoPlayerTestRunner$Builder r0;
        androidx.media3.exoplayer.upstream.BandwidthMeter r1;
        androidx.media3.test.utils.TestExoPlayerBuilder $r2;

        r0 := @this: androidx.media3.test.utils.ExoPlayerTestRunner$Builder;

        r1 := @parameter0: androidx.media3.exoplayer.upstream.BandwidthMeter;

        $r2 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: androidx.media3.test.utils.TestExoPlayerBuilder testPlayerBuilder>;

        virtualinvoke $r2.<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.test.utils.TestExoPlayerBuilder setBandwidthMeter(androidx.media3.exoplayer.upstream.BandwidthMeter)>(r1);

        return r0;
    }

    public transient androidx.media3.test.utils.ExoPlayerTestRunner$Builder setRenderers(androidx.media3.exoplayer.Renderer[])
    {
        androidx.media3.test.utils.ExoPlayerTestRunner$Builder r0;
        androidx.media3.exoplayer.Renderer[] r1;
        androidx.media3.test.utils.TestExoPlayerBuilder $r2;

        r0 := @this: androidx.media3.test.utils.ExoPlayerTestRunner$Builder;

        r1 := @parameter0: androidx.media3.exoplayer.Renderer[];

        $r2 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: androidx.media3.test.utils.TestExoPlayerBuilder testPlayerBuilder>;

        virtualinvoke $r2.<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.test.utils.TestExoPlayerBuilder setRenderers(androidx.media3.exoplayer.Renderer[])>(r1);

        return r0;
    }

    public androidx.media3.test.utils.ExoPlayerTestRunner$Builder setRenderersFactory(androidx.media3.exoplayer.RenderersFactory)
    {
        androidx.media3.test.utils.ExoPlayerTestRunner$Builder r0;
        androidx.media3.exoplayer.RenderersFactory r1;
        androidx.media3.test.utils.TestExoPlayerBuilder $r2;

        r0 := @this: androidx.media3.test.utils.ExoPlayerTestRunner$Builder;

        r1 := @parameter0: androidx.media3.exoplayer.RenderersFactory;

        $r2 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: androidx.media3.test.utils.TestExoPlayerBuilder testPlayerBuilder>;

        virtualinvoke $r2.<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.test.utils.TestExoPlayerBuilder setRenderersFactory(androidx.media3.exoplayer.RenderersFactory)>(r1);

        return r0;
    }

    public androidx.media3.test.utils.ExoPlayerTestRunner$Builder setClock(androidx.media3.common.util.Clock)
    {
        androidx.media3.test.utils.ExoPlayerTestRunner$Builder r0;
        androidx.media3.common.util.Clock r1;
        androidx.media3.test.utils.TestExoPlayerBuilder $r2;

        r0 := @this: androidx.media3.test.utils.ExoPlayerTestRunner$Builder;

        r1 := @parameter0: androidx.media3.common.util.Clock;

        $r2 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: androidx.media3.test.utils.TestExoPlayerBuilder testPlayerBuilder>;

        virtualinvoke $r2.<androidx.media3.test.utils.TestExoPlayerBuilder: androidx.media3.test.utils.TestExoPlayerBuilder setClock(androidx.media3.common.util.Clock)>(r1);

        return r0;
    }

    public androidx.media3.test.utils.ExoPlayerTestRunner$Builder setActionSchedule(androidx.media3.test.utils.ActionSchedule)
    {
        androidx.media3.test.utils.ExoPlayerTestRunner$Builder r0;
        androidx.media3.test.utils.ActionSchedule r1;

        r0 := @this: androidx.media3.test.utils.ExoPlayerTestRunner$Builder;

        r1 := @parameter0: androidx.media3.test.utils.ActionSchedule;

        r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: androidx.media3.test.utils.ActionSchedule actionSchedule> = r1;

        return r0;
    }

    public androidx.media3.test.utils.ExoPlayerTestRunner$Builder setVideoSurface(android.view.Surface)
    {
        androidx.media3.test.utils.ExoPlayerTestRunner$Builder r0;
        android.view.Surface r1;

        r0 := @this: androidx.media3.test.utils.ExoPlayerTestRunner$Builder;

        r1 := @parameter0: android.view.Surface;

        r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: android.view.Surface surface> = r1;

        return r0;
    }

    public androidx.media3.test.utils.ExoPlayerTestRunner$Builder setPlayerListener(androidx.media3.common.Player$Listener)
    {
        androidx.media3.test.utils.ExoPlayerTestRunner$Builder r0;
        androidx.media3.common.Player$Listener r1;

        r0 := @this: androidx.media3.test.utils.ExoPlayerTestRunner$Builder;

        r1 := @parameter0: androidx.media3.common.Player$Listener;

        r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: androidx.media3.common.Player$Listener playerListener> = r1;

        return r0;
    }

    public androidx.media3.test.utils.ExoPlayerTestRunner$Builder setAnalyticsListener(androidx.media3.exoplayer.analytics.AnalyticsListener)
    {
        androidx.media3.test.utils.ExoPlayerTestRunner$Builder r0;
        androidx.media3.exoplayer.analytics.AnalyticsListener r1;

        r0 := @this: androidx.media3.test.utils.ExoPlayerTestRunner$Builder;

        r1 := @parameter0: androidx.media3.exoplayer.analytics.AnalyticsListener;

        r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: androidx.media3.exoplayer.analytics.AnalyticsListener analyticsListener> = r1;

        return r0;
    }

    public androidx.media3.test.utils.ExoPlayerTestRunner$Builder setExpectedPlayerEndedCount(int)
    {
        androidx.media3.test.utils.ExoPlayerTestRunner$Builder r0;
        int i0;
        java.lang.Integer $r1;

        r0 := @this: androidx.media3.test.utils.ExoPlayerTestRunner$Builder;

        i0 := @parameter0: int;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: java.lang.Integer expectedPlayerEndedCount> = $r1;

        return r0;
    }

    public androidx.media3.test.utils.ExoPlayerTestRunner build()
    {
        androidx.media3.test.utils.ExoPlayerTestRunner$Builder r0;
        java.util.List $r1, $r5, $r15;
        boolean $z0, $z1, $z2, $z3;
        androidx.media3.test.utils.ExoPlayerTestRunner $r2;
        java.lang.Integer $r3, $r10, $r19;
        androidx.media3.test.utils.TestExoPlayerBuilder $r4;
        int $i0, $i2;
        long $l1;
        android.view.Surface $r6;
        androidx.media3.test.utils.ActionSchedule $r7;
        androidx.media3.common.Player$Listener $r8;
        androidx.media3.exoplayer.analytics.AnalyticsListener $r9;
        androidx.media3.common.Timeline $r11, $r14;
        androidx.media3.test.utils.FakeMediaSource $r12;
        androidx.media3.common.Format[] $r13;
        androidx.media3.test.utils.FakeTimeline $r16;
        java.lang.Object[] $r17;
        java.lang.Object $r18;

        r0 := @this: androidx.media3.test.utils.ExoPlayerTestRunner$Builder;

        $r1 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: java.util.List mediaSources>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $z3 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: boolean skipSettingMediaSources>;

        if $z3 != 0 goto label2;

        $r11 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: androidx.media3.common.Timeline timeline>;

        if $r11 != null goto label1;

        $r16 = new androidx.media3.test.utils.FakeTimeline;

        $r17 = newarray (java.lang.Object)[1];

        $r18 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: java.lang.Object manifest>;

        $r17[0] = $r18;

        specialinvoke $r16.<androidx.media3.test.utils.FakeTimeline: void <init>(int,java.lang.Object[])>(1, $r17);

        r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: androidx.media3.common.Timeline timeline> = $r16;

     label1:
        $r15 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: java.util.List mediaSources>;

        $r12 = new androidx.media3.test.utils.FakeMediaSource;

        $r14 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: androidx.media3.common.Timeline timeline>;

        $r13 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: androidx.media3.common.Format[] supportedFormats>;

        specialinvoke $r12.<androidx.media3.test.utils.FakeMediaSource: void <init>(androidx.media3.common.Timeline,androidx.media3.common.Format[])>($r14, $r13);

        interfaceinvoke $r15.<java.util.List: boolean add(java.lang.Object)>($r12);

     label2:
        $r19 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: java.lang.Integer expectedPlayerEndedCount>;

        if $r19 != null goto label3;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: java.lang.Integer expectedPlayerEndedCount> = $r10;

     label3:
        $r2 = new androidx.media3.test.utils.ExoPlayerTestRunner;

        $r4 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: androidx.media3.test.utils.TestExoPlayerBuilder testPlayerBuilder>;

        $r5 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: java.util.List mediaSources>;

        $z1 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: boolean skipSettingMediaSources>;

        $i0 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: int initialMediaItemIndex>;

        $l1 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: long initialPositionMs>;

        $r6 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: android.view.Surface surface>;

        $r7 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: androidx.media3.test.utils.ActionSchedule actionSchedule>;

        $r8 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: androidx.media3.common.Player$Listener playerListener>;

        $r9 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: androidx.media3.exoplayer.analytics.AnalyticsListener analyticsListener>;

        $r3 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: java.lang.Integer expectedPlayerEndedCount>;

        $i2 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        $z2 = r0.<androidx.media3.test.utils.ExoPlayerTestRunner$Builder: boolean pauseAtEndOfMediaItems>;

        specialinvoke $r2.<androidx.media3.test.utils.ExoPlayerTestRunner: void <init>(androidx.media3.test.utils.TestExoPlayerBuilder,java.util.List,boolean,int,long,android.view.Surface,androidx.media3.test.utils.ActionSchedule,androidx.media3.common.Player$Listener,androidx.media3.exoplayer.analytics.AnalyticsListener,int,boolean,androidx.media3.test.utils.ExoPlayerTestRunner$1)>($r4, $r5, $z1, $i0, $l1, $r6, $r7, $r8, $r9, $i2, $z2, null);

        return $r2;
    }

