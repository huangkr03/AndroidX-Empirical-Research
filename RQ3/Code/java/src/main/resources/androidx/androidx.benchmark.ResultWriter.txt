androidx.benchmark.ResultWriter
<androidx.benchmark.ResultWriter: androidx.benchmark.ResultWriter INSTANCE>
<androidx.benchmark.ResultWriter: java.util.ArrayList reports>
    private void <init>()
    {
        androidx.benchmark.ResultWriter r0;

        r0 := @this: androidx.benchmark.ResultWriter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final java.util.ArrayList getReports$benchmark_common_release()
    {
        androidx.benchmark.ResultWriter r0;
        java.util.ArrayList $r1;

        r0 := @this: androidx.benchmark.ResultWriter;

        $r1 = <androidx.benchmark.ResultWriter: java.util.ArrayList reports>;

        return $r1;
    }

    public static void getReports$benchmark_common_release$annotations()
    {
        return;
    }

    public final void appendReport(androidx.benchmark.BenchmarkResult)
    {
        androidx.benchmark.ResultWriter r0;
        androidx.benchmark.BenchmarkResult r1;
        java.lang.String r2, $r8;
        java.util.ArrayList $r3;
        androidx.benchmark.Arguments $r4;
        boolean $z1;
        android.app.Instrumentation $r5;
        android.content.Context $r6;
        androidx.benchmark.Outputs $r7;
        androidx.benchmark.ResultWriter$appendReport$1 $r9;
        kotlin.jvm.functions.Function1 $r10;

        r0 := @this: androidx.benchmark.ResultWriter;

        r1 := @parameter0: androidx.benchmark.BenchmarkResult;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "benchmarkResult");

        $r3 = <androidx.benchmark.ResultWriter: java.util.ArrayList reports>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        $r4 = <androidx.benchmark.Arguments: androidx.benchmark.Arguments INSTANCE>;

        $z1 = virtualinvoke $r4.<androidx.benchmark.Arguments: boolean getOutputEnable$benchmark_common_release()>();

        if $z1 == 0 goto label1;

        $r5 = staticinvoke <androidx.test.platform.app.InstrumentationRegistry: android.app.Instrumentation getInstrumentation()>();

        $r6 = virtualinvoke $r5.<android.app.Instrumentation: android.content.Context getTargetContext()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r6);

        r2 = virtualinvoke $r6.<android.content.Context: java.lang.String getPackageName()>();

        $r7 = <androidx.benchmark.Outputs: androidx.benchmark.Outputs INSTANCE>;

        $r8 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>(r2, "-benchmarkData.json");

        $r9 = <androidx.benchmark.ResultWriter$appendReport$1: androidx.benchmark.ResultWriter$appendReport$1 INSTANCE>;

        $r10 = (kotlin.jvm.functions.Function1) $r9;

        virtualinvoke $r7.<androidx.benchmark.Outputs: java.lang.String writeFile(java.lang.String,java.lang.String,boolean,kotlin.jvm.functions.Function1)>($r8, "results_json", 1, $r10);

        goto label2;

     label1:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Benchmark", "androidx.benchmark.output.enable not set, not writing results json");

     label2:
        return;
    }

    public final void writeReport$benchmark_common_release(java.io.File, java.util.List)
    {
        androidx.benchmark.ResultWriter r0, $r9, $r36;
        java.io.File r1, $r39, r52;
        java.util.List r2, $r15;
        boolean $z2, $z3, $z4, $z5, $z9;
        android.util.JsonWriter $r4, $r10, $r11, $r12, $r13, $r18, $r19, $r21, $r22, $r24, $r25, $r27, $r28, $r32, r56, $r57;
        java.io.FileOutputStream $r5;
        java.io.OutputStreamWriter $r6;
        java.io.Writer $r7, r54;
        androidx.benchmark.CpuInfo $r14, $r20, $r23;
        int $i0;
        java.lang.Integer $r16;
        java.lang.Number $r17;
        long $l1, $l2;
        androidx.benchmark.MemInfo $r26;
        androidx.benchmark.IsolationActivity$Companion $r29;
        java.lang.Iterable $r38;
        java.lang.Throwable $r40, $r49, r50;
        java.io.IOException $r41;
        java.lang.StringBuilder $r42, $r43, $r45, $r46;
        java.lang.String $r44, $r47, $r48;
        java.nio.charset.Charset $r51;
        short s3;
        java.io.OutputStream r53;
        java.io.BufferedWriter $r55;
        java.util.Iterator r58;
        java.lang.Object r59;
        androidx.benchmark.BenchmarkResult r60;

        r0 := @this: androidx.benchmark.ResultWriter;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.util.List;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "file");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "benchmarkResults");

        $z2 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z2 != 0 goto label5;

        $r39 = virtualinvoke r1.<java.io.File: java.io.File getParentFile()>();

        if $r39 != null goto label1;

        goto label2;

     label1:
        virtualinvoke $r39.<java.io.File: boolean mkdirs()>();

     label2:
        virtualinvoke r1.<java.io.File: boolean createNewFile()>();

     label3:
        goto label5;

     label4:
        $r40 := @caughtexception;

        r50 = $r40;

        $r41 = new java.io.IOException;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n                            Failed to create file for benchmark report in:\n                            ");

        $r44 = virtualinvoke r1.<java.io.File: java.lang.String getParent()>();

        $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n                            Make sure the instrumentation argument additionalTestOutputDir is set\n                            to a writable directory on device. If using a version of Android Gradle\n                            Plugin that doesn\'t support additionalTestOutputDir, ensure your app\'s\n                            manifest file enables legacy storage behavior by adding the\n                            application attribute: android:requestLegacyExternalStorage=\"true\"\n                        ");

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        $r48 = staticinvoke <kotlin.text.StringsKt: java.lang.String trimIndent(java.lang.String)>($r47);

        $r49 = (java.lang.Throwable) r50;

        specialinvoke $r41.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>($r48, $r49);

        throw $r41;

     label5:
        $r4 = new android.util.JsonWriter;

        $r51 = <kotlin.text.Charsets: java.nio.charset.Charset UTF_8>;

        s3 = 8192;

        r52 = r1;

        $r5 = new java.io.FileOutputStream;

        specialinvoke $r5.<java.io.FileOutputStream: void <init>(java.io.File)>(r52);

        r53 = (java.io.OutputStream) $r5;

        $r6 = new java.io.OutputStreamWriter;

        specialinvoke $r6.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>(r53, $r51);

        r54 = (java.io.Writer) $r6;

        $z3 = r54 instanceof java.io.BufferedWriter;

        if $z3 == 0 goto label6;

        $r55 = (java.io.BufferedWriter) r54;

        goto label7;

     label6:
        $r55 = new java.io.BufferedWriter;

        specialinvoke $r55.<java.io.BufferedWriter: void <init>(java.io.Writer,int)>(r54, s3);

     label7:
        $r7 = (java.io.Writer) $r55;

        specialinvoke $r4.<android.util.JsonWriter: void <init>(java.io.Writer)>($r7);

        r56 = $r4;

        virtualinvoke r56.<android.util.JsonWriter: void setIndent(java.lang.String)>("    ");

        virtualinvoke r56.<android.util.JsonWriter: android.util.JsonWriter beginObject()>();

        $r9 = <androidx.benchmark.ResultWriter: androidx.benchmark.ResultWriter INSTANCE>;

        $r10 = virtualinvoke r56.<android.util.JsonWriter: android.util.JsonWriter name(java.lang.String)>("context");

        $r11 = virtualinvoke $r10.<android.util.JsonWriter: android.util.JsonWriter beginObject()>();

        $r57 = virtualinvoke $r11.<android.util.JsonWriter: android.util.JsonWriter name(java.lang.String)>("build");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r57, "writer.name(\"context\").b\u2026           .name(\"build\")");

        $r12 = specialinvoke $r9.<androidx.benchmark.ResultWriter: android.util.JsonWriter buildInfoObject(android.util.JsonWriter)>($r57);

        $r13 = virtualinvoke $r12.<android.util.JsonWriter: android.util.JsonWriter name(java.lang.String)>("cpuCoreCount");

        $r14 = <androidx.benchmark.CpuInfo: androidx.benchmark.CpuInfo INSTANCE>;

        $r15 = virtualinvoke $r14.<androidx.benchmark.CpuInfo: java.util.List getCoreDirs()>();

        $i0 = interfaceinvoke $r15.<java.util.List: int size()>();

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r17 = (java.lang.Number) $r16;

        $r18 = virtualinvoke $r13.<android.util.JsonWriter: android.util.JsonWriter value(java.lang.Number)>($r17);

        $r19 = virtualinvoke $r18.<android.util.JsonWriter: android.util.JsonWriter name(java.lang.String)>("cpuLocked");

        $r20 = <androidx.benchmark.CpuInfo: androidx.benchmark.CpuInfo INSTANCE>;

        $z4 = virtualinvoke $r20.<androidx.benchmark.CpuInfo: boolean getLocked()>();

        $r21 = virtualinvoke $r19.<android.util.JsonWriter: android.util.JsonWriter value(boolean)>($z4);

        $r22 = virtualinvoke $r21.<android.util.JsonWriter: android.util.JsonWriter name(java.lang.String)>("cpuMaxFreqHz");

        $r23 = <androidx.benchmark.CpuInfo: androidx.benchmark.CpuInfo INSTANCE>;

        $l1 = virtualinvoke $r23.<androidx.benchmark.CpuInfo: long getMaxFreqHz()>();

        $r24 = virtualinvoke $r22.<android.util.JsonWriter: android.util.JsonWriter value(long)>($l1);

        $r25 = virtualinvoke $r24.<android.util.JsonWriter: android.util.JsonWriter name(java.lang.String)>("memTotalBytes");

        $r26 = <androidx.benchmark.MemInfo: androidx.benchmark.MemInfo INSTANCE>;

        $l2 = virtualinvoke $r26.<androidx.benchmark.MemInfo: long getMemTotalBytes()>();

        $r27 = virtualinvoke $r25.<android.util.JsonWriter: android.util.JsonWriter value(long)>($l2);

        $r28 = virtualinvoke $r27.<android.util.JsonWriter: android.util.JsonWriter name(java.lang.String)>("sustainedPerformanceModeEnabled");

        $r29 = <androidx.benchmark.IsolationActivity: androidx.benchmark.IsolationActivity$Companion Companion>;

        $z5 = virtualinvoke $r29.<androidx.benchmark.IsolationActivity$Companion: boolean getSustainedPerformanceModeInUse$benchmark_common_release()>();

        virtualinvoke $r28.<android.util.JsonWriter: android.util.JsonWriter value(boolean)>($z5);

        virtualinvoke r56.<android.util.JsonWriter: android.util.JsonWriter endObject()>();

        $r32 = virtualinvoke r56.<android.util.JsonWriter: android.util.JsonWriter name(java.lang.String)>("benchmarks");

        virtualinvoke $r32.<android.util.JsonWriter: android.util.JsonWriter beginArray()>();

        $r38 = (java.lang.Iterable) r2;

        r58 = interfaceinvoke $r38.<java.lang.Iterable: java.util.Iterator iterator()>();

     label8:
        $z9 = interfaceinvoke r58.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label9;

        r59 = interfaceinvoke r58.<java.util.Iterator: java.lang.Object next()>();

        r60 = (androidx.benchmark.BenchmarkResult) r59;

        $r36 = <androidx.benchmark.ResultWriter: androidx.benchmark.ResultWriter INSTANCE>;

        specialinvoke $r36.<androidx.benchmark.ResultWriter: android.util.JsonWriter reportObject(android.util.JsonWriter,androidx.benchmark.BenchmarkResult)>(r56, r60);

        goto label8;

     label9:
        virtualinvoke r56.<android.util.JsonWriter: android.util.JsonWriter endArray()>();

        virtualinvoke r56.<android.util.JsonWriter: android.util.JsonWriter endObject()>();

        virtualinvoke r56.<android.util.JsonWriter: void flush()>();

        virtualinvoke r56.<android.util.JsonWriter: void close()>();

        return;

        catch java.io.IOException from label2 to label3 with label4;
    }

    private final android.util.JsonWriter buildInfoObject(android.util.JsonWriter)
    {
        androidx.benchmark.ResultWriter r0;
        android.util.JsonWriter $r1, r2, $r3, $r4, $r6, $r7, $r9, $r10, $r12, $r13, $r15, $r16, $r17, $r18, $r21;
        java.lang.String $r5, $r8, $r11, $r14;
        int $i0;
        java.lang.Integer $r19;
        java.lang.Number $r20;

        r0 := @this: androidx.benchmark.ResultWriter;

        $r1 := @parameter0: android.util.JsonWriter;

        $r3 = virtualinvoke $r1.<android.util.JsonWriter: android.util.JsonWriter beginObject()>();

        $r4 = virtualinvoke $r3.<android.util.JsonWriter: android.util.JsonWriter name(java.lang.String)>("brand");

        $r5 = <android.os.Build: java.lang.String BRAND>;

        $r6 = virtualinvoke $r4.<android.util.JsonWriter: android.util.JsonWriter value(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<android.util.JsonWriter: android.util.JsonWriter name(java.lang.String)>("device");

        $r8 = <android.os.Build: java.lang.String DEVICE>;

        $r9 = virtualinvoke $r7.<android.util.JsonWriter: android.util.JsonWriter value(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<android.util.JsonWriter: android.util.JsonWriter name(java.lang.String)>("fingerprint");

        $r11 = <android.os.Build: java.lang.String FINGERPRINT>;

        $r12 = virtualinvoke $r10.<android.util.JsonWriter: android.util.JsonWriter value(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<android.util.JsonWriter: android.util.JsonWriter name(java.lang.String)>("model");

        $r14 = <android.os.Build: java.lang.String MODEL>;

        $r15 = virtualinvoke $r13.<android.util.JsonWriter: android.util.JsonWriter value(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<android.util.JsonWriter: android.util.JsonWriter name(java.lang.String)>("version");

        $r17 = virtualinvoke $r16.<android.util.JsonWriter: android.util.JsonWriter beginObject()>();

        $r18 = virtualinvoke $r17.<android.util.JsonWriter: android.util.JsonWriter name(java.lang.String)>("sdk");

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r20 = (java.lang.Number) $r19;

        $r21 = virtualinvoke $r18.<android.util.JsonWriter: android.util.JsonWriter value(java.lang.Number)>($r20);

        virtualinvoke $r21.<android.util.JsonWriter: android.util.JsonWriter endObject()>();

        r2 = virtualinvoke $r1.<android.util.JsonWriter: android.util.JsonWriter endObject()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r2, "endObject()");

        return r2;
    }

    private final android.util.JsonWriter reportObject(android.util.JsonWriter, androidx.benchmark.BenchmarkResult)
    {
        androidx.benchmark.ResultWriter r0;
        android.util.JsonWriter $r1, r3, r4, $r5, $r6, $r8, $r9, $r10, $r12, $r13, $r14, $r17, $r20, $r21, $r24, $r25, $r28, $r29, r31, r32;
        androidx.benchmark.BenchmarkResult r2;
        java.lang.String $r7, $r11;
        long $l0, $l3;
        androidx.benchmark.BenchmarkResult$Measurements $r15, $r18;
        java.util.List $r16, $r19;
        int $i1, $i2;
        java.lang.Integer $r22, $r26;
        java.lang.Number $r23, $r27;

        r0 := @this: androidx.benchmark.ResultWriter;

        $r1 := @parameter0: android.util.JsonWriter;

        r2 := @parameter1: androidx.benchmark.BenchmarkResult;

        $r5 = virtualinvoke $r1.<android.util.JsonWriter: android.util.JsonWriter beginObject()>();

        $r6 = virtualinvoke $r5.<android.util.JsonWriter: android.util.JsonWriter name(java.lang.String)>("name");

        $r7 = virtualinvoke r2.<androidx.benchmark.BenchmarkResult: java.lang.String getTestName()>();

        $r8 = virtualinvoke $r6.<android.util.JsonWriter: android.util.JsonWriter value(java.lang.String)>($r7);

        r4 = virtualinvoke $r8.<android.util.JsonWriter: android.util.JsonWriter name(java.lang.String)>("params");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r4, "beginObject()\n          \u2026          .name(\"params\")");

        $r9 = specialinvoke r0.<androidx.benchmark.ResultWriter: android.util.JsonWriter paramsObject(android.util.JsonWriter,androidx.benchmark.BenchmarkResult)>(r4, r2);

        $r10 = virtualinvoke $r9.<android.util.JsonWriter: android.util.JsonWriter name(java.lang.String)>("className");

        $r11 = virtualinvoke r2.<androidx.benchmark.BenchmarkResult: java.lang.String getClassName()>();

        $r12 = virtualinvoke $r10.<android.util.JsonWriter: android.util.JsonWriter value(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<android.util.JsonWriter: android.util.JsonWriter name(java.lang.String)>("totalRunTimeNs");

        $l0 = virtualinvoke r2.<androidx.benchmark.BenchmarkResult: long getTotalRunTimeNs()>();

        $r14 = virtualinvoke $r13.<android.util.JsonWriter: android.util.JsonWriter value(long)>($l0);

        r3 = virtualinvoke $r14.<android.util.JsonWriter: android.util.JsonWriter name(java.lang.String)>("metrics");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r3, "beginObject()\n          \u2026         .name(\"metrics\")");

        $r15 = virtualinvoke r2.<androidx.benchmark.BenchmarkResult: androidx.benchmark.BenchmarkResult$Measurements getMetrics()>();

        $r16 = virtualinvoke $r15.<androidx.benchmark.BenchmarkResult$Measurements: java.util.List getSingleMetrics()>();

        $r17 = specialinvoke r0.<androidx.benchmark.ResultWriter: android.util.JsonWriter metricsContainerObject(android.util.JsonWriter,java.util.List)>(r3, $r16);

        r31 = virtualinvoke $r17.<android.util.JsonWriter: android.util.JsonWriter name(java.lang.String)>("sampledMetrics");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r31, "beginObject()\n          \u2026  .name(\"sampledMetrics\")");

        $r18 = virtualinvoke r2.<androidx.benchmark.BenchmarkResult: androidx.benchmark.BenchmarkResult$Measurements getMetrics()>();

        $r19 = virtualinvoke $r18.<androidx.benchmark.BenchmarkResult$Measurements: java.util.List getSampledMetrics()>();

        $r20 = specialinvoke r0.<androidx.benchmark.ResultWriter: android.util.JsonWriter sampledMetricsContainerObject(android.util.JsonWriter,java.util.List)>(r31, $r19);

        $r21 = virtualinvoke $r20.<android.util.JsonWriter: android.util.JsonWriter name(java.lang.String)>("warmupIterations");

        $i1 = virtualinvoke r2.<androidx.benchmark.BenchmarkResult: int getWarmupIterations()>();

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r23 = (java.lang.Number) $r22;

        $r24 = virtualinvoke $r21.<android.util.JsonWriter: android.util.JsonWriter value(java.lang.Number)>($r23);

        $r25 = virtualinvoke $r24.<android.util.JsonWriter: android.util.JsonWriter name(java.lang.String)>("repeatIterations");

        $i2 = virtualinvoke r2.<androidx.benchmark.BenchmarkResult: int getRepeatIterations()>();

        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r27 = (java.lang.Number) $r26;

        $r28 = virtualinvoke $r25.<android.util.JsonWriter: android.util.JsonWriter value(java.lang.Number)>($r27);

        $r29 = virtualinvoke $r28.<android.util.JsonWriter: android.util.JsonWriter name(java.lang.String)>("thermalThrottleSleepSeconds");

        $l3 = virtualinvoke r2.<androidx.benchmark.BenchmarkResult: long getThermalThrottleSleepSeconds()>();

        virtualinvoke $r29.<android.util.JsonWriter: android.util.JsonWriter value(long)>($l3);

        r32 = virtualinvoke $r1.<android.util.JsonWriter: android.util.JsonWriter endObject()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r32, "endObject()");

        return r32;
    }

    private final android.util.JsonWriter metricResultObject(android.util.JsonWriter, androidx.benchmark.MetricResult)
    {
        androidx.benchmark.ResultWriter r0;
        android.util.JsonWriter $r1, $r3, $r5, $r7;
        androidx.benchmark.MetricResult r2;
        double $d0, $d1, $d2;

        r0 := @this: androidx.benchmark.ResultWriter;

        $r1 := @parameter0: android.util.JsonWriter;

        r2 := @parameter1: androidx.benchmark.MetricResult;

        $r3 = virtualinvoke $r1.<android.util.JsonWriter: android.util.JsonWriter name(java.lang.String)>("minimum");

        $d0 = virtualinvoke r2.<androidx.benchmark.MetricResult: double getMin()>();

        virtualinvoke $r3.<android.util.JsonWriter: android.util.JsonWriter value(double)>($d0);

        $r5 = virtualinvoke $r1.<android.util.JsonWriter: android.util.JsonWriter name(java.lang.String)>("maximum");

        $d1 = virtualinvoke r2.<androidx.benchmark.MetricResult: double getMax()>();

        virtualinvoke $r5.<android.util.JsonWriter: android.util.JsonWriter value(double)>($d1);

        $r7 = virtualinvoke $r1.<android.util.JsonWriter: android.util.JsonWriter name(java.lang.String)>("median");

        $d2 = virtualinvoke r2.<androidx.benchmark.MetricResult: double getMedian()>();

        virtualinvoke $r7.<android.util.JsonWriter: android.util.JsonWriter value(double)>($d2);

        return $r1;
    }

    private final android.util.JsonWriter metricsContainerObject(android.util.JsonWriter, java.util.List)
    {
        androidx.benchmark.ResultWriter r0, $r13;
        android.util.JsonWriter $r1, $r11, $r15, $r23;
        java.util.List r2, $r17;
        java.util.Iterator r3, r7;
        java.lang.Object r4, r8;
        androidx.benchmark.MetricResult r5;
        java.lang.Iterable $r6, $r22;
        double d0;
        boolean $z4, $z5;
        java.lang.String $r10;
        java.lang.Number $r20;

        r0 := @this: androidx.benchmark.ResultWriter;

        $r1 := @parameter0: android.util.JsonWriter;

        r2 := @parameter1: java.util.List;

        virtualinvoke $r1.<android.util.JsonWriter: android.util.JsonWriter beginObject()>();

        $r22 = (java.lang.Iterable) r2;

        r3 = interfaceinvoke $r22.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z4 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label4;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (androidx.benchmark.MetricResult) r4;

        $r10 = virtualinvoke r5.<androidx.benchmark.MetricResult: java.lang.String getName()>();

        $r11 = virtualinvoke $r1.<android.util.JsonWriter: android.util.JsonWriter name(java.lang.String)>($r10);

        virtualinvoke $r11.<android.util.JsonWriter: android.util.JsonWriter beginObject()>();

        $r13 = <androidx.benchmark.ResultWriter: androidx.benchmark.ResultWriter INSTANCE>;

        specialinvoke $r13.<androidx.benchmark.ResultWriter: android.util.JsonWriter metricResultObject(android.util.JsonWriter,androidx.benchmark.MetricResult)>($r1, r5);

        $r15 = virtualinvoke $r1.<android.util.JsonWriter: android.util.JsonWriter name(java.lang.String)>("runs");

        virtualinvoke $r15.<android.util.JsonWriter: android.util.JsonWriter beginArray()>();

        $r17 = virtualinvoke r5.<androidx.benchmark.MetricResult: java.util.List getData()>();

        $r6 = (java.lang.Iterable) $r17;

        r7 = interfaceinvoke $r6.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z5 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label3;

        r8 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        $r20 = (java.lang.Number) r8;

        d0 = virtualinvoke $r20.<java.lang.Number: double doubleValue()>();

        virtualinvoke $r1.<android.util.JsonWriter: android.util.JsonWriter value(double)>(d0);

        goto label2;

     label3:
        virtualinvoke $r1.<android.util.JsonWriter: android.util.JsonWriter endArray()>();

        virtualinvoke $r1.<android.util.JsonWriter: android.util.JsonWriter endObject()>();

        goto label1;

     label4:
        $r23 = virtualinvoke $r1.<android.util.JsonWriter: android.util.JsonWriter endObject()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r23, "endObject()");

        return $r23;
    }

    private final android.util.JsonWriter sampledMetricResultObject(android.util.JsonWriter, androidx.benchmark.MetricResult)
    {
        androidx.benchmark.ResultWriter r0;
        android.util.JsonWriter $r1, $r3, $r5, $r7, $r9;
        androidx.benchmark.MetricResult r2;
        double $d0, $d1, $d2, $d3;

        r0 := @this: androidx.benchmark.ResultWriter;

        $r1 := @parameter0: android.util.JsonWriter;

        r2 := @parameter1: androidx.benchmark.MetricResult;

        $r3 = virtualinvoke $r1.<android.util.JsonWriter: android.util.JsonWriter name(java.lang.String)>("P50");

        $d0 = virtualinvoke r2.<androidx.benchmark.MetricResult: double getP50()>();

        virtualinvoke $r3.<android.util.JsonWriter: android.util.JsonWriter value(double)>($d0);

        $r5 = virtualinvoke $r1.<android.util.JsonWriter: android.util.JsonWriter name(java.lang.String)>("P90");

        $d1 = virtualinvoke r2.<androidx.benchmark.MetricResult: double getP90()>();

        virtualinvoke $r5.<android.util.JsonWriter: android.util.JsonWriter value(double)>($d1);

        $r7 = virtualinvoke $r1.<android.util.JsonWriter: android.util.JsonWriter name(java.lang.String)>("P95");

        $d2 = virtualinvoke r2.<androidx.benchmark.MetricResult: double getP95()>();

        virtualinvoke $r7.<android.util.JsonWriter: android.util.JsonWriter value(double)>($d2);

        $r9 = virtualinvoke $r1.<android.util.JsonWriter: android.util.JsonWriter name(java.lang.String)>("P99");

        $d3 = virtualinvoke r2.<androidx.benchmark.MetricResult: double getP99()>();

        virtualinvoke $r9.<android.util.JsonWriter: android.util.JsonWriter value(double)>($d3);

        return $r1;
    }

    private final android.util.JsonWriter sampledMetricsContainerObject(android.util.JsonWriter, java.util.List)
    {
        androidx.benchmark.ResultWriter r0, $r17;
        android.util.JsonWriter $r1, $r15, $r19, $r29;
        java.util.List r2, r9, $r21;
        java.util.Iterator r3, r7, r11;
        java.lang.Object r4, r8, r12;
        androidx.benchmark.MetricResult r5;
        java.lang.Iterable $r6, $r10, $r28;
        double d0;
        boolean $z6, $z7, $z8;
        java.lang.String $r14;
        java.lang.Number $r26;

        r0 := @this: androidx.benchmark.ResultWriter;

        $r1 := @parameter0: android.util.JsonWriter;

        r2 := @parameter1: java.util.List;

        virtualinvoke $r1.<android.util.JsonWriter: android.util.JsonWriter beginObject()>();

        $r28 = (java.lang.Iterable) r2;

        r3 = interfaceinvoke $r28.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z6 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label6;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (androidx.benchmark.MetricResult) r4;

        $r14 = virtualinvoke r5.<androidx.benchmark.MetricResult: java.lang.String getName()>();

        $r15 = virtualinvoke $r1.<android.util.JsonWriter: android.util.JsonWriter name(java.lang.String)>($r14);

        virtualinvoke $r15.<android.util.JsonWriter: android.util.JsonWriter beginObject()>();

        $r17 = <androidx.benchmark.ResultWriter: androidx.benchmark.ResultWriter INSTANCE>;

        specialinvoke $r17.<androidx.benchmark.ResultWriter: android.util.JsonWriter sampledMetricResultObject(android.util.JsonWriter,androidx.benchmark.MetricResult)>($r1, r5);

        $r19 = virtualinvoke $r1.<android.util.JsonWriter: android.util.JsonWriter name(java.lang.String)>("runs");

        virtualinvoke $r19.<android.util.JsonWriter: android.util.JsonWriter beginArray()>();

        $r21 = virtualinvoke r5.<androidx.benchmark.MetricResult: java.util.List getIterationData()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r21);

        $r6 = (java.lang.Iterable) $r21;

        r7 = interfaceinvoke $r6.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z7 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label5;

        r8 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.util.List) r8;

        virtualinvoke $r1.<android.util.JsonWriter: android.util.JsonWriter beginArray()>();

        $r10 = (java.lang.Iterable) r9;

        r11 = interfaceinvoke $r10.<java.lang.Iterable: java.util.Iterator iterator()>();

     label3:
        $z8 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label4;

        r12 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        $r26 = (java.lang.Number) r12;

        d0 = virtualinvoke $r26.<java.lang.Number: double doubleValue()>();

        virtualinvoke $r1.<android.util.JsonWriter: android.util.JsonWriter value(double)>(d0);

        goto label3;

     label4:
        virtualinvoke $r1.<android.util.JsonWriter: android.util.JsonWriter endArray()>();

        goto label2;

     label5:
        virtualinvoke $r1.<android.util.JsonWriter: android.util.JsonWriter endArray()>();

        virtualinvoke $r1.<android.util.JsonWriter: android.util.JsonWriter endObject()>();

        goto label1;

     label6:
        $r29 = virtualinvoke $r1.<android.util.JsonWriter: android.util.JsonWriter endObject()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r29, "endObject()");

        return $r29;
    }

    private final android.util.JsonWriter paramsObject(android.util.JsonWriter, androidx.benchmark.BenchmarkResult)
    {
        androidx.benchmark.ResultWriter r0;
        android.util.JsonWriter $r1, $r12, $r17;
        androidx.benchmark.BenchmarkResult r2;
        java.util.Iterator r3;
        java.util.Map$Entry r4, r5;
        java.lang.String $r7, $r11, $r14;
        java.util.Set $r8;
        boolean $z2;
        java.lang.Object $r9, $r10, $r13;
        java.util.Map $r16;

        r0 := @this: androidx.benchmark.ResultWriter;

        $r1 := @parameter0: android.util.JsonWriter;

        r2 := @parameter1: androidx.benchmark.BenchmarkResult;

        virtualinvoke $r1.<android.util.JsonWriter: android.util.JsonWriter beginObject()>();

        $r7 = virtualinvoke r2.<androidx.benchmark.BenchmarkResult: java.lang.String getTestName()>();

        $r16 = specialinvoke r0.<androidx.benchmark.ResultWriter: java.util.Map getParams(java.lang.String)>($r7);

        $r8 = interfaceinvoke $r16.<java.util.Map: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r9;

        r5 = r4;

        $r10 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r11 = (java.lang.String) $r10;

        $r12 = virtualinvoke $r1.<android.util.JsonWriter: android.util.JsonWriter name(java.lang.String)>($r11);

        $r13 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r14 = (java.lang.String) $r13;

        virtualinvoke $r12.<android.util.JsonWriter: android.util.JsonWriter value(java.lang.String)>($r14);

        goto label1;

     label2:
        $r17 = virtualinvoke $r1.<android.util.JsonWriter: android.util.JsonWriter endObject()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r17, "endObject()");

        return $r17;
    }

    private final java.util.Map getParams(java.lang.String)
    {
        androidx.benchmark.ResultWriter r0;
        java.lang.String r1, r3, r5, r13, r18, r19, r20;
        int i0, i1, i3, $i4, $i5, $i6, i7, i8, i9, $i10, i12;
        java.util.HashMap r2, $r8;
        java.lang.Object r4;
        char c2;
        java.lang.CharSequence $r6, $r7, $r9, $r17;
        java.util.List $r10;
        boolean $z2, $z5, $z6;
        java.util.Map $r11, $r21;
        java.lang.String[] $r14;
        java.lang.Iterable $r15;
        java.util.Iterator r16;
        byte b11;

        r0 := @this: androidx.benchmark.ResultWriter;

        r1 := @parameter0: java.lang.String;

        $r6 = (java.lang.CharSequence) r1;

        i0 = staticinvoke <kotlin.text.StringsKt: int indexOf$default(java.lang.CharSequence,char,int,boolean,int,java.lang.Object)>($r6, 91, 0, 0, 6, null);

        $r7 = (java.lang.CharSequence) r1;

        i1 = staticinvoke <kotlin.text.StringsKt: int lastIndexOf$default(java.lang.CharSequence,char,int,boolean,int,java.lang.Object)>($r7, 93, 0, 0, 6, null);

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        r2 = $r8;

        if i0 < 0 goto label12;

        if i1 < 0 goto label12;

        $i6 = i0 + 1;

        r13 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>($i6, i1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r13, "this as java.lang.String\u2026ing(startIndex, endIndex)");

        r3 = r13;

        $r9 = (java.lang.CharSequence) r3;

        $r14 = newarray (java.lang.String)[1];

        $r14[0] = ",";

        $r10 = staticinvoke <kotlin.text.StringsKt: java.util.List split$default(java.lang.CharSequence,java.lang.String[],boolean,int,int,java.lang.Object)>($r9, $r14, 0, 0, 6, null);

        $r15 = (java.lang.Iterable) $r10;

        r16 = interfaceinvoke $r15.<java.lang.Iterable: java.util.Iterator iterator()>();

     label01:
        $z2 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label12;

        r4 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) r4;

        $r17 = (java.lang.CharSequence) r5;

        i7 = 0;

        i8 = interfaceinvoke $r17.<java.lang.CharSequence: int length()>();

     label02:
        if i7 >= i8 goto label06;

        i9 = i7;

        i7 = i7 + 1;

        c2 = interfaceinvoke $r17.<java.lang.CharSequence: char charAt(int)>(i9);

        if c2 == 58 goto label03;

        if c2 != 61 goto label04;

     label03:
        $z5 = 1;

        goto label05;

     label04:
        $z5 = 0;

     label05:
        if $z5 == 0 goto label02;

        $i10 = i9;

        goto label07;

     label06:
        $i10 = -1;

     label07:
        i3 = $i10;

        if 1 > i3 goto label09;

        $i4 = virtualinvoke r5.<java.lang.String: int length()>();

        $i5 = $i4 - 1;

        if i3 >= $i5 goto label08;

        $z6 = 1;

        goto label10;

     label08:
        $z6 = 0;

        goto label10;

     label09:
        $z6 = 0;

     label10:
        if $z6 == 0 goto label11;

        b11 = 0;

        r18 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int,int)>(b11, i3);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r18, "this as java.lang.String\u2026ing(startIndex, endIndex)");

        r19 = r5;

        i12 = i3 + 1;

        r20 = virtualinvoke r19.<java.lang.String: java.lang.String substring(int)>(i12);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r20, "this as java.lang.String).substring(startIndex)");

        $r11 = (java.util.Map) r2;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r18, r20);

     label11:
        goto label01;

     label12:
        $r21 = (java.util.Map) r2;

        return $r21;
    }

    static void <clinit>()
    {
        androidx.benchmark.ResultWriter $r0;
        java.util.ArrayList $r1;

        $r0 = new androidx.benchmark.ResultWriter;

        specialinvoke $r0.<androidx.benchmark.ResultWriter: void <init>()>();

        <androidx.benchmark.ResultWriter: androidx.benchmark.ResultWriter INSTANCE> = $r0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        <androidx.benchmark.ResultWriter: java.util.ArrayList reports> = $r1;

        return;
    }

androidx.benchmark.ResultWriter$appendReport$1
<androidx.benchmark.ResultWriter$appendReport$1: androidx.benchmark.ResultWriter$appendReport$1 INSTANCE>
    void <init>()
    {
        androidx.benchmark.ResultWriter$appendReport$1 r0;

        r0 := @this: androidx.benchmark.ResultWriter$appendReport$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(java.io.File)
    {
        androidx.benchmark.ResultWriter$appendReport$1 r0;
        java.io.File r1;
        java.lang.String $r2, $r3;
        androidx.benchmark.ResultWriter $r4, $r5;
        java.util.ArrayList $r6;
        java.util.List $r7;

        r0 := @this: androidx.benchmark.ResultWriter$appendReport$1;

        r1 := @parameter0: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        $r2 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r3 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("writing results to ", $r2);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Benchmark", $r3);

        $r5 = <androidx.benchmark.ResultWriter: androidx.benchmark.ResultWriter INSTANCE>;

        $r4 = <androidx.benchmark.ResultWriter: androidx.benchmark.ResultWriter INSTANCE>;

        $r6 = virtualinvoke $r4.<androidx.benchmark.ResultWriter: java.util.ArrayList getReports$benchmark_common_release()>();

        $r7 = (java.util.List) $r6;

        virtualinvoke $r5.<androidx.benchmark.ResultWriter: void writeReport$benchmark_common_release(java.io.File,java.util.List)>(r1, $r7);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.benchmark.ResultWriter$appendReport$1 r0;
        java.lang.Object r1;
        java.io.File $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.benchmark.ResultWriter$appendReport$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.io.File) r1;

        virtualinvoke r0.<androidx.benchmark.ResultWriter$appendReport$1: void invoke(java.io.File)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

    static void <clinit>()
    {
        androidx.benchmark.ResultWriter$appendReport$1 $r0;

        $r0 = new androidx.benchmark.ResultWriter$appendReport$1;

        specialinvoke $r0.<androidx.benchmark.ResultWriter$appendReport$1: void <init>()>();

        <androidx.benchmark.ResultWriter$appendReport$1: androidx.benchmark.ResultWriter$appendReport$1 INSTANCE> = $r0;

        return;
    }

