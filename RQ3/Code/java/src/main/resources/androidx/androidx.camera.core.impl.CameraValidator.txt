androidx.camera.core.impl.CameraValidator
<androidx.camera.core.impl.CameraValidator: java.lang.String TAG>
    private void <init>()
    {
        androidx.camera.core.impl.CameraValidator r0;

        r0 := @this: androidx.camera.core.impl.CameraValidator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void validateCameras(android.content.Context, androidx.camera.core.impl.CameraRepository, androidx.camera.core.CameraSelector) throws androidx.camera.core.impl.CameraValidator$CameraIdListIncorrectException
    {
        android.content.Context r0;
        androidx.camera.core.impl.CameraRepository r1;
        androidx.camera.core.CameraSelector r2, $r11, $r14;
        java.lang.Throwable r3, $r18, $r19, r27, r32;
        java.lang.StringBuilder $r5, $r7, $r8, $r9, $r21, $r23, r29, r30;
        java.lang.String $r6, $r10, $r24;
        boolean $z0, $z1;
        java.util.LinkedHashSet $r12, $r15, $r22;
        int $i0, $i1;
        java.lang.Integer $r17, r26;
        android.content.pm.PackageManager r28;
        androidx.camera.core.impl.CameraValidator$CameraIdListIncorrectException r31;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: androidx.camera.core.impl.CameraRepository;

        r2 := @parameter2: androidx.camera.core.CameraSelector;

        r26 = null;

     label01:
        if r2 == null goto label03;

        $r17 = virtualinvoke r2.<androidx.camera.core.CameraSelector: java.lang.Integer getLensFacing()>();

        r26 = $r17;

        if $r17 != null goto label03;

        staticinvoke <androidx.camera.core.Logger: void w(java.lang.String,java.lang.String)>("CameraValidator", "No lens facing info in the availableCamerasSelector, don\'t verify the camera lens facing.");

     label02:
        return;

     label03:
        goto label05;

     label04:
        $r18 := @caughtexception;

        r27 = $r18;

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("CameraValidator", "Cannot get lens facing from the availableCamerasSelector don\'t verify the camera lens facing.", r27);

        return;

     label05:
        r29 = new java.lang.StringBuilder;

        specialinvoke r29.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Verifying camera lens facing on ");

        $r6 = <android.os.Build: java.lang.String DEVICE>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", lensFacingInteger: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r26);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("CameraValidator", $r10);

        r28 = virtualinvoke r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

     label06:
        $z0 = virtualinvoke r28.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.camera");

        if $z0 == 0 goto label08;

        if r2 == null goto label07;

        $i1 = virtualinvoke r26.<java.lang.Integer: int intValue()>();

        if $i1 != 1 goto label08;

     label07:
        $r14 = <androidx.camera.core.CameraSelector: androidx.camera.core.CameraSelector DEFAULT_BACK_CAMERA>;

        $r15 = virtualinvoke r1.<androidx.camera.core.impl.CameraRepository: java.util.LinkedHashSet getCameras()>();

        virtualinvoke $r14.<androidx.camera.core.CameraSelector: androidx.camera.core.impl.CameraInternal select(java.util.LinkedHashSet)>($r15);

     label08:
        $z1 = virtualinvoke r28.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.camera.front");

        if $z1 == 0 goto label10;

        if r2 == null goto label09;

        $i0 = virtualinvoke r26.<java.lang.Integer: int intValue()>();

        if $i0 != 0 goto label10;

     label09:
        $r11 = <androidx.camera.core.CameraSelector: androidx.camera.core.CameraSelector DEFAULT_FRONT_CAMERA>;

        $r12 = virtualinvoke r1.<androidx.camera.core.impl.CameraRepository: java.util.LinkedHashSet getCameras()>();

        virtualinvoke $r11.<androidx.camera.core.CameraSelector: androidx.camera.core.impl.CameraInternal select(java.util.LinkedHashSet)>($r12);

     label10:
        goto label12;

     label11:
        $r19 := @caughtexception;

        r3 = $r19;

        r30 = new java.lang.StringBuilder;

        specialinvoke r30.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Camera LensFacing verification failed, existing cameras: ");

        $r22 = virtualinvoke r1.<androidx.camera.core.impl.CameraRepository: java.util.LinkedHashSet getCameras()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String)>("CameraValidator", $r24);

        r31 = new androidx.camera.core.impl.CameraValidator$CameraIdListIncorrectException;

        specialinvoke r31.<androidx.camera.core.impl.CameraValidator$CameraIdListIncorrectException: void <init>(java.lang.String,java.lang.Throwable)>("Expected camera missing from device.", r3);

        r32 = (java.lang.Throwable) r31;

        throw r32;

     label12:
        return;

        catch java.lang.IllegalStateException from label01 to label02 with label04;
        catch java.lang.IllegalArgumentException from label06 to label10 with label11;
    }

androidx.camera.core.impl.CameraValidator$CameraIdListIncorrectException
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        androidx.camera.core.impl.CameraValidator$CameraIdListIncorrectException r0;
        java.lang.String r1;
        java.lang.Throwable r2;

        r0 := @this: androidx.camera.core.impl.CameraValidator$CameraIdListIncorrectException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

