androidx.privacysandbox.tools.core.generator.AidlCompiler
<androidx.privacysandbox.tools.core.generator.AidlCompiler: java.nio.file.Path aidlCompilerPath>
<androidx.privacysandbox.tools.core.generator.AidlCompiler: long aidlCompileTimeoutMs>
    public void <init>(java.nio.file.Path, long)
    {
        androidx.privacysandbox.tools.core.generator.AidlCompiler r0;
        java.nio.file.Path r1;
        long l0;

        r0 := @this: androidx.privacysandbox.tools.core.generator.AidlCompiler;

        r1 := @parameter0: java.nio.file.Path;

        l0 := @parameter1: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "aidlCompilerPath");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.privacysandbox.tools.core.generator.AidlCompiler: java.nio.file.Path aidlCompilerPath> = r1;

        r0.<androidx.privacysandbox.tools.core.generator.AidlCompiler: long aidlCompileTimeoutMs> = l0;

        return;
    }

    public void <init>(java.nio.file.Path, long, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.privacysandbox.tools.core.generator.AidlCompiler r0;
        java.nio.file.Path r1;
        int i0, $i1;
        kotlin.jvm.internal.DefaultConstructorMarker r2;
        long l2;

        r0 := @this: androidx.privacysandbox.tools.core.generator.AidlCompiler;

        r1 := @parameter0: java.nio.file.Path;

        l2 := @parameter1: long;

        i0 := @parameter2: int;

        r2 := @parameter3: kotlin.jvm.internal.DefaultConstructorMarker;

        $i1 = i0 & 2;

        if $i1 == 0 goto label1;

        l2 = 10000L;

     label1:
        specialinvoke r0.<androidx.privacysandbox.tools.core.generator.AidlCompiler: void <init>(java.nio.file.Path,long)>(r1, l2);

        return;
    }

    public final void compile(java.nio.file.Path, java.util.List)
    {
        androidx.privacysandbox.tools.core.generator.AidlCompiler r0;
        java.nio.file.Path r1, r7, $r11;
        java.util.List r2, r3, $r22;
        java.util.Collection r4, r9, $r47;
        java.util.Iterator r5;
        java.lang.Object r6;
        kotlin.jvm.internal.SpreadBuilder r8, $r10, r45;
        java.lang.String $r12, $r16, $r20, $r36, $r38, $r43, $r44;
        java.lang.StringBuilder $r13, $r14, $r15, $r17, $r18, $r19, $r30, $r31, $r32, $r33, $r34, $r35, $r37, $r40, $r41, $r42;
        java.util.ArrayList $r21;
        int $i0, $i1, $i3, $i4;
        boolean $z2, $z3;
        java.lang.String[] $r23, $r25;
        java.lang.Object[] $r24, $r26;
        java.lang.ProcessBuilder $r27;
        java.util.concurrent.TimeUnit $r28;
        long $l2;
        java.lang.Exception $r29, $r39;
        java.lang.Iterable $r46;
        java.lang.Process r48;

        r0 := @this: androidx.privacysandbox.tools.core.generator.AidlCompiler;

        r1 := @parameter0: java.nio.file.Path;

        r2 := @parameter1: java.util.List;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "workingDir");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "sources");

        $r10 = new kotlin.jvm.internal.SpreadBuilder;

        specialinvoke $r10.<kotlin.jvm.internal.SpreadBuilder: void <init>(int)>(6);

        r45 = $r10;

        $r11 = r0.<androidx.privacysandbox.tools.core.generator.AidlCompiler: java.nio.file.Path aidlCompilerPath>;

        $r12 = virtualinvoke $r11.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r45.<kotlin.jvm.internal.SpreadBuilder: void add(java.lang.Object)>($r12);

        virtualinvoke r45.<kotlin.jvm.internal.SpreadBuilder: void add(java.lang.Object)>("--structured");

        virtualinvoke r45.<kotlin.jvm.internal.SpreadBuilder: void add(java.lang.Object)>("--lang=java");

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--include=");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r45.<kotlin.jvm.internal.SpreadBuilder: void add(java.lang.Object)>($r16);

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--out=");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r45.<kotlin.jvm.internal.SpreadBuilder: void add(java.lang.Object)>($r20);

        $r46 = (java.lang.Iterable) r2;

        r8 = r45;

        $r21 = new java.util.ArrayList;

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r46, 10);

        specialinvoke $r21.<java.util.ArrayList: void <init>(int)>($i0);

        r4 = (java.util.Collection) $r21;

        r5 = interfaceinvoke $r46.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.nio.file.Path) r6;

        r9 = r4;

        $r44 = virtualinvoke r7.<java.lang.Object: java.lang.String toString()>();

        interfaceinvoke r9.<java.util.Collection: boolean add(java.lang.Object)>($r44);

        goto label1;

     label2:
        $r22 = (java.util.List) r4;

        $r47 = (java.util.Collection) $r22;

        $r23 = newarray (java.lang.String)[0];

        $r24 = interfaceinvoke $r47.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r23);

        virtualinvoke r8.<kotlin.jvm.internal.SpreadBuilder: void addSpread(java.lang.Object)>($r24);

        $i1 = virtualinvoke r45.<kotlin.jvm.internal.SpreadBuilder: int size()>();

        $r25 = newarray (java.lang.String)[$i1];

        $r26 = virtualinvoke r45.<kotlin.jvm.internal.SpreadBuilder: java.lang.Object[] toArray(java.lang.Object[])>($r25);

        r3 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object[])>($r26);

        $r27 = new java.lang.ProcessBuilder;

        specialinvoke $r27.<java.lang.ProcessBuilder: void <init>(java.util.List)>(r3);

        r48 = virtualinvoke $r27.<java.lang.ProcessBuilder: java.lang.Process start()>();

        $l2 = r0.<androidx.privacysandbox.tools.core.generator.AidlCompiler: long aidlCompileTimeoutMs>;

        $r28 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $z3 = virtualinvoke r48.<java.lang.Process: boolean waitFor(long,java.util.concurrent.TimeUnit)>($l2, $r28);

        if $z3 != 0 goto label3;

        $r39 = new java.lang.Exception;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AIDL compiler timed out: ");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r39.<java.lang.Exception: void <init>(java.lang.String)>($r43);

        throw $r39;

     label3:
        $i3 = virtualinvoke r48.<java.lang.Process: int exitValue()>();

        if $i3 == 0 goto label4;

        $r29 = new java.lang.Exception;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AIDL compiler didn\'t terminate successfully (exit code: ");

        $i4 = virtualinvoke r48.<java.lang.Process: int exitValue()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").\nCommand: \'");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'\nErrors: ");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r48, "process");

        $r36 = specialinvoke r0.<androidx.privacysandbox.tools.core.generator.AidlCompiler: java.lang.String getProcessErrors(java.lang.Process)>(r48);

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<java.lang.Exception: void <init>(java.lang.String)>($r38);

        throw $r29;

     label4:
        return;
    }

    private final java.lang.String getProcessErrors(java.lang.Process)
    {
        androidx.privacysandbox.tools.core.generator.AidlCompiler r0;
        java.lang.Process r1;
        java.lang.String r2, $r14, $r16;
        java.io.InputStream $r3, r17;
        java.io.InputStreamReader $r4;
        boolean $z0;
        java.util.stream.Stream $r5;
        java.lang.Object[] $r6;
        java.lang.CharSequence $r7, $r8;
        java.lang.Throwable $r9, $r10, $r11, r23, r24, r25, r26;
        java.lang.StringBuilder $r12, $r13, $r15;
        java.nio.charset.Charset r18;
        java.io.Reader r19;
        java.io.BufferedReader $r20, r22;
        java.io.Closeable r21;

        r0 := @this: androidx.privacysandbox.tools.core.generator.AidlCompiler;

        r1 := @parameter0: java.lang.Process;

     label1:
        $r3 = virtualinvoke r1.<java.lang.Process: java.io.InputStream getErrorStream()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "process.errorStream");

        r17 = $r3;

        r18 = <kotlin.text.Charsets: java.nio.charset.Charset UTF_8>;

        $r4 = new java.io.InputStreamReader;

        specialinvoke $r4.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>(r17, r18);

        r19 = (java.io.Reader) $r4;

        $z0 = r19 instanceof java.io.BufferedReader;

        if $z0 == 0 goto label2;

        $r20 = (java.io.BufferedReader) r19;

        goto label3;

     label2:
        $r20 = new java.io.BufferedReader;

        specialinvoke $r20.<java.io.BufferedReader: void <init>(java.io.Reader,int)>(r19, 8192);

     label3:
        r21 = (java.io.Closeable) $r20;

     label4:
        r22 = (java.io.BufferedReader) r21;

        $r5 = virtualinvoke r22.<java.io.BufferedReader: java.util.stream.Stream lines()>();

        $r6 = interfaceinvoke $r5.<java.util.stream.Stream: java.lang.Object[] toArray()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "outputReader.lines().toArray()");

        $r8 = (java.lang.CharSequence) "\n\t";

        $r7 = (java.lang.CharSequence) "\n\t";

        r2 = staticinvoke <kotlin.collections.ArraysKt: java.lang.String joinToString$default(java.lang.Object[],java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r6, $r8, $r7, null, 0, null, null, 60, null);

     label5:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r21, null);

        return r2;

     label6:
        $r10 := @caughtexception;

        r23 = $r10;

        r24 = r23;

        throw r23;

     label7:
        $r9 := @caughtexception;

        r25 = $r9;

     label8:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r21, r24);

        throw r25;

     label9:
        $r11 := @caughtexception;

        r26 = $r11;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error when printing output of command: ");

        $r14 = virtualinvoke r26.<java.io.IOException: java.lang.String getMessage()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r16;

        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
        catch java.io.IOException from label1 to label9 with label9;
    }

