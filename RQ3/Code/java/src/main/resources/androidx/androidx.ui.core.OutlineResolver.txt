androidx.ui.core.OutlineResolver
<androidx.ui.core.OutlineResolver: androidx.ui.unit.Density density>
<androidx.ui.core.OutlineResolver: android.graphics.Outline cachedOutline>
<androidx.ui.core.OutlineResolver: androidx.ui.unit.PxSize size>
<androidx.ui.core.OutlineResolver: androidx.ui.graphics.Shape shape>
<androidx.ui.core.OutlineResolver: androidx.ui.graphics.Path cachedRrectPath>
<androidx.ui.core.OutlineResolver: androidx.ui.graphics.Path outlinePath>
<androidx.ui.core.OutlineResolver: float alpha>
<androidx.ui.core.OutlineResolver: boolean cacheIsDirty>
<androidx.ui.core.OutlineResolver: boolean usePathForClip>
    public void <init>(androidx.ui.unit.Density)
    {
        androidx.ui.core.OutlineResolver r0, r3;
        androidx.ui.unit.Density r1;
        android.graphics.Outline r2, r4, $r5;
        boolean z0, z1;
        androidx.ui.unit.PxSize$Companion $r6;
        androidx.ui.unit.PxSize $r7;

        r0 := @this: androidx.ui.core.OutlineResolver;

        r1 := @parameter0: androidx.ui.unit.Density;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "density");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.ui.core.OutlineResolver: androidx.ui.unit.Density density> = r1;

        $r5 = new android.graphics.Outline;

        specialinvoke $r5.<android.graphics.Outline: void <init>()>();

        r2 = $r5;

        r3 = r0;

        z0 = 0;

        z1 = 0;

        virtualinvoke r2.<android.graphics.Outline: void setAlpha(float)>(1.0F);

        r4 = r2;

        r3.<androidx.ui.core.OutlineResolver: android.graphics.Outline cachedOutline> = r4;

        $r6 = <androidx.ui.unit.PxSize: androidx.ui.unit.PxSize$Companion Companion>;

        $r7 = virtualinvoke $r6.<androidx.ui.unit.PxSize$Companion: androidx.ui.unit.PxSize getZero()>();

        r0.<androidx.ui.core.OutlineResolver: androidx.ui.unit.PxSize size> = $r7;

        r0.<androidx.ui.core.OutlineResolver: float alpha> = 1.0F;

        return;
    }

    public final android.graphics.Outline getOutline()
    {
        androidx.ui.core.OutlineResolver r0;
        androidx.ui.graphics.Shape $r1;
        android.graphics.Outline $r2;

        r0 := @this: androidx.ui.core.OutlineResolver;

        specialinvoke r0.<androidx.ui.core.OutlineResolver: void updateCache()>();

        $r1 = r0.<androidx.ui.core.OutlineResolver: androidx.ui.graphics.Shape shape>;

        if $r1 != null goto label1;

        $r2 = (android.graphics.Outline) null;

        goto label2;

     label1:
        $r2 = r0.<androidx.ui.core.OutlineResolver: android.graphics.Outline cachedOutline>;

     label2:
        return $r2;
    }

    public final androidx.ui.graphics.Path getClipPath()
    {
        androidx.ui.core.OutlineResolver r0;
        boolean $z0;
        androidx.ui.graphics.Path $r1;

        r0 := @this: androidx.ui.core.OutlineResolver;

        specialinvoke r0.<androidx.ui.core.OutlineResolver: void updateCache()>();

        $z0 = r0.<androidx.ui.core.OutlineResolver: boolean usePathForClip>;

        if $z0 == 0 goto label1;

        $r1 = r0.<androidx.ui.core.OutlineResolver: androidx.ui.graphics.Path outlinePath>;

        goto label2;

     label1:
        $r1 = (androidx.ui.graphics.Path) null;

     label2:
        return $r1;
    }

    public final boolean getSupportsNativeOutline()
    {
        androidx.ui.core.OutlineResolver r0;
        androidx.ui.graphics.Shape $r1;
        android.graphics.Outline $r2;
        boolean $z0, $z1;

        r0 := @this: androidx.ui.core.OutlineResolver;

        $r1 = r0.<androidx.ui.core.OutlineResolver: androidx.ui.graphics.Shape shape>;

        if $r1 != null goto label1;

        return 0;

     label1:
        specialinvoke r0.<androidx.ui.core.OutlineResolver: void updateCache()>();

        $r2 = r0.<androidx.ui.core.OutlineResolver: android.graphics.Outline cachedOutline>;

        $z0 = virtualinvoke $r2.<android.graphics.Outline: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public final boolean update(androidx.ui.graphics.Shape, float)
    {
        androidx.ui.core.OutlineResolver r0;
        androidx.ui.graphics.Shape r1, $r2;
        float f0, $f1;
        boolean z0, $z1, $z2, $z3;
        byte $b0;

        r0 := @this: androidx.ui.core.OutlineResolver;

        r1 := @parameter0: androidx.ui.graphics.Shape;

        f0 := @parameter1: float;

        $r2 = r0.<androidx.ui.core.OutlineResolver: androidx.ui.graphics.Shape shape>;

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, r1);

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z0 = $z2;

        if z0 == 0 goto label3;

        r0.<androidx.ui.core.OutlineResolver: androidx.ui.graphics.Shape shape> = r1;

        r0.<androidx.ui.core.OutlineResolver: boolean cacheIsDirty> = 1;

     label3:
        $f1 = r0.<androidx.ui.core.OutlineResolver: float alpha>;

        $b0 = $f1 cmpg f0;

        if $b0 != 0 goto label4;

        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        if $z3 != 0 goto label6;

        r0.<androidx.ui.core.OutlineResolver: float alpha> = f0;

        r0.<androidx.ui.core.OutlineResolver: boolean cacheIsDirty> = 1;

     label6:
        return z0;
    }

    public final void update(androidx.ui.unit.PxSize)
    {
        androidx.ui.core.OutlineResolver r0;
        androidx.ui.unit.PxSize r1, $r2;
        boolean $z0;

        r0 := @this: androidx.ui.core.OutlineResolver;

        r1 := @parameter0: androidx.ui.unit.PxSize;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "size");

        $r2 = r0.<androidx.ui.core.OutlineResolver: androidx.ui.unit.PxSize size>;

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, r1);

        if $z0 != 0 goto label1;

        r0.<androidx.ui.core.OutlineResolver: androidx.ui.unit.PxSize size> = r1;

        r0.<androidx.ui.core.OutlineResolver: boolean cacheIsDirty> = 1;

     label1:
        return;
    }

    private final void updateCache()
    {
        androidx.ui.core.OutlineResolver r0;
        androidx.ui.graphics.Shape r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z8, z10, z14, z16;
        long $l0, $l1, l2, l4;
        float $f0, $f1, $f2, $f3, f4, f5, $f6, f7, f8;
        android.graphics.Outline $r2, $r16;
        androidx.ui.unit.Density $r3;
        androidx.ui.unit.PxSize $r4, r12, r14;
        kotlin.NoWhenBranchMatchedException $r5;
        androidx.ui.graphics.Outline$Generic $r6;
        androidx.ui.graphics.Path $r7;
        androidx.ui.graphics.Outline$Rounded $r8;
        androidx.ui.geometry.RRect $r9;
        androidx.ui.graphics.Outline$Rectangle $r10;
        androidx.ui.geometry.Rect $r11;
        kotlin.jvm.internal.FloatCompanionObject r13, r15;
        int i3, i5;
        androidx.ui.graphics.Outline r17;

        r0 := @this: androidx.ui.core.OutlineResolver;

        $z0 = r0.<androidx.ui.core.OutlineResolver: boolean cacheIsDirty>;

        if $z0 == 0 goto label6;

        r0.<androidx.ui.core.OutlineResolver: boolean cacheIsDirty> = 0;

        r0.<androidx.ui.core.OutlineResolver: boolean usePathForClip> = 0;

        r1 = r0.<androidx.ui.core.OutlineResolver: androidx.ui.graphics.Shape shape>;

        if r1 == null goto label1;

        r12 = r0.<androidx.ui.core.OutlineResolver: androidx.ui.unit.PxSize size>;

        l2 = virtualinvoke r12.<androidx.ui.unit.PxSize: long getValue()>();

        r13 = <kotlin.jvm.internal.FloatCompanionObject: kotlin.jvm.internal.FloatCompanionObject INSTANCE>;

        $l0 = l2 >> 32;

        i3 = (int) $l0;

        z8 = 0;

        $f3 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>(i3);

        z10 = 0;

        f4 = staticinvoke <androidx.ui.unit.Px: float constructor-impl(float)>($f3);

        $f0 = (float) z10;

        f5 = staticinvoke <androidx.ui.unit.Px: float constructor-impl(float)>($f0);

        $z1 = staticinvoke <androidx.ui.unit.Px: boolean equals-impl0(float,float)>(f4, f5);

        if $z1 != 0 goto label1;

        r14 = r0.<androidx.ui.core.OutlineResolver: androidx.ui.unit.PxSize size>;

        l4 = virtualinvoke r14.<androidx.ui.unit.PxSize: long getValue()>();

        r15 = <kotlin.jvm.internal.FloatCompanionObject: kotlin.jvm.internal.FloatCompanionObject INSTANCE>;

        $l1 = l4 & 4294967295L;

        i5 = (int) $l1;

        z14 = 0;

        $f6 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>(i5);

        z16 = 0;

        f7 = staticinvoke <androidx.ui.unit.Px: float constructor-impl(float)>($f6);

        $f1 = (float) z16;

        f8 = staticinvoke <androidx.ui.unit.Px: float constructor-impl(float)>($f1);

        $z2 = staticinvoke <androidx.ui.unit.Px: boolean equals-impl0(float,float)>(f7, f8);

        if $z2 == 0 goto label2;

     label1:
        $r16 = r0.<androidx.ui.core.OutlineResolver: android.graphics.Outline cachedOutline>;

        virtualinvoke $r16.<android.graphics.Outline: void setEmpty()>();

        return;

     label2:
        $r2 = r0.<androidx.ui.core.OutlineResolver: android.graphics.Outline cachedOutline>;

        $f2 = r0.<androidx.ui.core.OutlineResolver: float alpha>;

        virtualinvoke $r2.<android.graphics.Outline: void setAlpha(float)>($f2);

        $r4 = r0.<androidx.ui.core.OutlineResolver: androidx.ui.unit.PxSize size>;

        $r3 = r0.<androidx.ui.core.OutlineResolver: androidx.ui.unit.Density density>;

        r17 = interfaceinvoke r1.<androidx.ui.graphics.Shape: androidx.ui.graphics.Outline createOutline(androidx.ui.unit.PxSize,androidx.ui.unit.Density)>($r4, $r3);

        $z3 = r17 instanceof androidx.ui.graphics.Outline$Rectangle;

        if $z3 == 0 goto label3;

        $r10 = (androidx.ui.graphics.Outline$Rectangle) r17;

        $r11 = virtualinvoke $r10.<androidx.ui.graphics.Outline$Rectangle: androidx.ui.geometry.Rect getRect()>();

        specialinvoke r0.<androidx.ui.core.OutlineResolver: void updateCacheWithRect(androidx.ui.geometry.Rect)>($r11);

        goto label6;

     label3:
        $z4 = r17 instanceof androidx.ui.graphics.Outline$Rounded;

        if $z4 == 0 goto label4;

        $r8 = (androidx.ui.graphics.Outline$Rounded) r17;

        $r9 = virtualinvoke $r8.<androidx.ui.graphics.Outline$Rounded: androidx.ui.geometry.RRect getRrect()>();

        specialinvoke r0.<androidx.ui.core.OutlineResolver: void updateCacheWithRRect(androidx.ui.geometry.RRect)>($r9);

        goto label6;

     label4:
        $z5 = r17 instanceof androidx.ui.graphics.Outline$Generic;

        if $z5 == 0 goto label5;

        $r6 = (androidx.ui.graphics.Outline$Generic) r17;

        $r7 = virtualinvoke $r6.<androidx.ui.graphics.Outline$Generic: androidx.ui.graphics.Path getPath()>();

        specialinvoke r0.<androidx.ui.core.OutlineResolver: void updateCacheWithPath(androidx.ui.graphics.Path)>($r7);

        goto label6;

     label5:
        $r5 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke $r5.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        throw $r5;

     label6:
        return;
    }

    private final void updateCacheWithRect(androidx.ui.geometry.Rect)
    {
        androidx.ui.core.OutlineResolver r0;
        androidx.ui.geometry.Rect r1;
        android.graphics.Outline $r2;
        float $f0, $f1, $f2, $f3;
        int $i0, $i1, $i2, $i3;

        r0 := @this: androidx.ui.core.OutlineResolver;

        r1 := @parameter0: androidx.ui.geometry.Rect;

        $r2 = r0.<androidx.ui.core.OutlineResolver: android.graphics.Outline cachedOutline>;

        $f0 = virtualinvoke r1.<androidx.ui.geometry.Rect: float getLeft()>();

        $i0 = staticinvoke <kotlin.math.MathKt: int roundToInt(float)>($f0);

        $f1 = virtualinvoke r1.<androidx.ui.geometry.Rect: float getTop()>();

        $i1 = staticinvoke <kotlin.math.MathKt: int roundToInt(float)>($f1);

        $f2 = virtualinvoke r1.<androidx.ui.geometry.Rect: float getRight()>();

        $i2 = staticinvoke <kotlin.math.MathKt: int roundToInt(float)>($f2);

        $f3 = virtualinvoke r1.<androidx.ui.geometry.Rect: float getBottom()>();

        $i3 = staticinvoke <kotlin.math.MathKt: int roundToInt(float)>($f3);

        virtualinvoke $r2.<android.graphics.Outline: void setRect(int,int,int,int)>($i0, $i1, $i2, $i3);

        return;
    }

    private final void updateCacheWithRRect(androidx.ui.geometry.RRect)
    {
        androidx.ui.core.OutlineResolver r0;
        androidx.ui.geometry.RRect r1;
        float f0, $f1, $f2, $f3, $f4;
        androidx.ui.graphics.Path r2, r3, r4, r5, $r7;
        boolean z0, z1, $z3;
        android.graphics.Outline $r6;
        int $i0, $i1, $i2, $i3;

        r0 := @this: androidx.ui.core.OutlineResolver;

        r1 := @parameter0: androidx.ui.geometry.RRect;

        f0 = virtualinvoke r1.<androidx.ui.geometry.RRect: float getTopLeftRadiusX()>();

        $z3 = staticinvoke <androidx.ui.geometry.RRectKt: boolean isSimple(androidx.ui.geometry.RRect)>(r1);

        if $z3 == 0 goto label1;

        $r6 = r0.<androidx.ui.core.OutlineResolver: android.graphics.Outline cachedOutline>;

        $f1 = virtualinvoke r1.<androidx.ui.geometry.RRect: float getLeft()>();

        $i0 = staticinvoke <kotlin.math.MathKt: int roundToInt(float)>($f1);

        $f2 = virtualinvoke r1.<androidx.ui.geometry.RRect: float getTop()>();

        $i1 = staticinvoke <kotlin.math.MathKt: int roundToInt(float)>($f2);

        $f3 = virtualinvoke r1.<androidx.ui.geometry.RRect: float getRight()>();

        $i2 = staticinvoke <kotlin.math.MathKt: int roundToInt(float)>($f3);

        $f4 = virtualinvoke r1.<androidx.ui.geometry.RRect: float getBottom()>();

        $i3 = staticinvoke <kotlin.math.MathKt: int roundToInt(float)>($f4);

        virtualinvoke $r6.<android.graphics.Outline: void setRoundRect(int,int,int,int,float)>($i0, $i1, $i2, $i3, f0);

        goto label4;

     label1:
        r3 = r0.<androidx.ui.core.OutlineResolver: androidx.ui.graphics.Path cachedRrectPath>;

        if r3 != null goto label2;

        r4 = staticinvoke <androidx.ui.graphics.AndroidPathKt: androidx.ui.graphics.Path Path()>();

        z0 = 0;

        z1 = 0;

        r5 = r4;

        r0.<androidx.ui.core.OutlineResolver: androidx.ui.graphics.Path cachedRrectPath> = r5;

        $r7 = r4;

        goto label3;

     label2:
        $r7 = r3;

     label3:
        r2 = $r7;

        interfaceinvoke r2.<androidx.ui.graphics.Path: void reset()>();

        interfaceinvoke r2.<androidx.ui.graphics.Path: void addRRect(androidx.ui.geometry.RRect)>(r1);

        specialinvoke r0.<androidx.ui.core.OutlineResolver: void updateCacheWithPath(androidx.ui.graphics.Path)>(r2);

     label4:
        return;
    }

    private final void updateCacheWithPath(androidx.ui.graphics.Path)
    {
        androidx.ui.core.OutlineResolver r0;
        androidx.ui.graphics.Path r1;
        android.graphics.Outline r3, $r7, $r9;
        android.graphics.Path r4;
        int $i0;
        boolean $z1, $z2, $z3, $z4;
        java.lang.UnsupportedOperationException $r5;
        androidx.ui.graphics.AndroidPath $r6;

        r0 := @this: androidx.ui.core.OutlineResolver;

        r1 := @parameter0: androidx.ui.graphics.Path;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 > 28 goto label1;

        $z3 = interfaceinvoke r1.<androidx.ui.graphics.Path: boolean isConvex()>();

        if $z3 == 0 goto label6;

     label1:
        r3 = r0.<androidx.ui.core.OutlineResolver: android.graphics.Outline cachedOutline>;

        $z1 = r1 instanceof androidx.ui.graphics.AndroidPath;

        if $z1 == 0 goto label2;

        $r6 = (androidx.ui.graphics.AndroidPath) r1;

        goto label3;

     label2:
        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Unable to obtain android.graphics.Path");

        throw $r5;

     label3:
        r4 = virtualinvoke $r6.<androidx.ui.graphics.AndroidPath: android.graphics.Path getInternalPath()>();

        virtualinvoke r3.<android.graphics.Outline: void setConvexPath(android.graphics.Path)>(r4);

        $r7 = r0.<androidx.ui.core.OutlineResolver: android.graphics.Outline cachedOutline>;

        $z2 = virtualinvoke $r7.<android.graphics.Outline: boolean canClip()>();

        if $z2 != 0 goto label4;

        $z4 = 1;

        goto label5;

     label4:
        $z4 = 0;

     label5:
        r0.<androidx.ui.core.OutlineResolver: boolean usePathForClip> = $z4;

        goto label7;

     label6:
        $r9 = r0.<androidx.ui.core.OutlineResolver: android.graphics.Outline cachedOutline>;

        virtualinvoke $r9.<android.graphics.Outline: void setEmpty()>();

        r0.<androidx.ui.core.OutlineResolver: boolean usePathForClip> = 1;

     label7:
        r0.<androidx.ui.core.OutlineResolver: androidx.ui.graphics.Path outlinePath> = r1;

        return;
    }

