androidx.room.compiler.processing.util.compiler.TestKapt3Registrar
<androidx.room.compiler.processing.util.compiler.TestKapt3Registrar: java.util.List processors>
<androidx.room.compiler.processing.util.compiler.TestKapt3Registrar: org.jetbrains.kotlin.base.kapt3.KaptOptions$Builder baseOptions>
<androidx.room.compiler.processing.util.compiler.TestKapt3Registrar: org.jetbrains.kotlin.cli.common.messages.MessageCollector messageCollector>
    public void <init>(java.util.List, org.jetbrains.kotlin.base.kapt3.KaptOptions$Builder, org.jetbrains.kotlin.cli.common.messages.MessageCollector)
    {
        androidx.room.compiler.processing.util.compiler.TestKapt3Registrar r0;
        java.util.List r1;
        org.jetbrains.kotlin.base.kapt3.KaptOptions$Builder r2;
        org.jetbrains.kotlin.cli.common.messages.MessageCollector r3;

        r0 := @this: androidx.room.compiler.processing.util.compiler.TestKapt3Registrar;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: org.jetbrains.kotlin.base.kapt3.KaptOptions$Builder;

        r3 := @parameter2: org.jetbrains.kotlin.cli.common.messages.MessageCollector;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "processors");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "baseOptions");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "messageCollector");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.room.compiler.processing.util.compiler.TestKapt3Registrar: java.util.List processors> = r1;

        r0.<androidx.room.compiler.processing.util.compiler.TestKapt3Registrar: org.jetbrains.kotlin.base.kapt3.KaptOptions$Builder baseOptions> = r2;

        r0.<androidx.room.compiler.processing.util.compiler.TestKapt3Registrar: org.jetbrains.kotlin.cli.common.messages.MessageCollector messageCollector> = r3;

        return;
    }

    public final java.util.List getProcessors()
    {
        androidx.room.compiler.processing.util.compiler.TestKapt3Registrar r0;
        java.util.List $r1;

        r0 := @this: androidx.room.compiler.processing.util.compiler.TestKapt3Registrar;

        $r1 = r0.<androidx.room.compiler.processing.util.compiler.TestKapt3Registrar: java.util.List processors>;

        return $r1;
    }

    public final org.jetbrains.kotlin.base.kapt3.KaptOptions$Builder getBaseOptions()
    {
        androidx.room.compiler.processing.util.compiler.TestKapt3Registrar r0;
        org.jetbrains.kotlin.base.kapt3.KaptOptions$Builder $r1;

        r0 := @this: androidx.room.compiler.processing.util.compiler.TestKapt3Registrar;

        $r1 = r0.<androidx.room.compiler.processing.util.compiler.TestKapt3Registrar: org.jetbrains.kotlin.base.kapt3.KaptOptions$Builder baseOptions>;

        return $r1;
    }

    public final org.jetbrains.kotlin.cli.common.messages.MessageCollector getMessageCollector()
    {
        androidx.room.compiler.processing.util.compiler.TestKapt3Registrar r0;
        org.jetbrains.kotlin.cli.common.messages.MessageCollector $r1;

        r0 := @this: androidx.room.compiler.processing.util.compiler.TestKapt3Registrar;

        $r1 = r0.<androidx.room.compiler.processing.util.compiler.TestKapt3Registrar: org.jetbrains.kotlin.cli.common.messages.MessageCollector messageCollector>;

        return $r1;
    }

    public void registerProjectComponents(org.jetbrains.kotlin.com.intellij.mock.MockProject, org.jetbrains.kotlin.config.CompilerConfiguration)
    {
        androidx.room.compiler.processing.util.compiler.TestKapt3Registrar r0;
        org.jetbrains.kotlin.com.intellij.mock.MockProject r1;
        org.jetbrains.kotlin.config.CompilerConfiguration r2;
        java.util.List r3, $r9, $r11, $r14, $r16, $r39, r46, r52, r59, r65;
        org.jetbrains.kotlin.base.kapt3.KaptOptions$Builder r4, r40, $r42, r44;
        org.jetbrains.kotlin.config.CompilerConfigurationKey $r5, $r34;
        java.lang.Object $r6, $r35, r50, r56, r63, r69;
        java.lang.String $r7, $r33, r43;
        java.util.ArrayList $r8, $r10, $r13, $r15;
        int $i0, $i1;
        boolean $z0, $z2, $z4, $z5, $z7, $z9, $z12, $z18, $z24;
        java.util.Collection $r12, $r17, $r48, $r54, r58, $r61, $r67, r71;
        org.jetbrains.kotlin.kapt3.util.MessageCollectorBackedKaptLogger $r18, r73;
        java.util.Set $r19, $r21;
        org.jetbrains.kotlin.base.kapt3.KaptFlag $r20, $r22, $r25;
        org.jetbrains.kotlin.cli.common.messages.MessageCollector $r23;
        java.io.File $r24, $r37, $r38, $r45, $r72;
        androidx.room.compiler.processing.util.compiler.TestKapt3Registrar$registerProjectComponents$kapt3AnalysisCompletedHandlerExtension$1 $r26;
        org.jetbrains.kotlin.com.intellij.openapi.project.Project $r27, $r32;
        org.jetbrains.kotlin.resolve.jvm.extensions.AnalysisHandlerExtension$Companion $r28;
        androidx.room.compiler.processing.util.compiler.TestKapt3Registrar$KaptComponentContributor $r29;
        org.jetbrains.kotlin.resolve.jvm.extensions.PartialAnalysisHandlerExtension $r30;
        org.jetbrains.kotlin.extensions.StorageComponentContainerContributor$Companion $r31;
        java.lang.Iterable r47, $r51, r53, r60, $r64, r66;
        java.util.Iterator r49, r55, r62, r68;
        org.jetbrains.kotlin.cli.jvm.config.JvmClasspathRoot r57;
        org.jetbrains.kotlin.cli.jvm.config.JavaSourceRoot r70;
        org.jetbrains.kotlin.base.kapt3.KaptOptions $r74;

        r0 := @this: androidx.room.compiler.processing.util.compiler.TestKapt3Registrar;

        r1 := @parameter0: org.jetbrains.kotlin.com.intellij.mock.MockProject;

        r2 := @parameter1: org.jetbrains.kotlin.config.CompilerConfiguration;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "project");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "configuration");

        $r5 = <org.jetbrains.kotlin.cli.common.CLIConfigurationKeys: org.jetbrains.kotlin.config.CompilerConfigurationKey CONTENT_ROOTS>;

        $r6 = virtualinvoke r2.<org.jetbrains.kotlin.config.CompilerConfiguration: java.lang.Object get(org.jetbrains.kotlin.config.CompilerConfigurationKey)>($r5);

        $r39 = (java.util.List) $r6;

        if $r39 != null goto label01;

        $r39 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

     label01:
        r3 = $r39;

        r40 = r0.<androidx.room.compiler.processing.util.compiler.TestKapt3Registrar: org.jetbrains.kotlin.base.kapt3.KaptOptions$Builder baseOptions>;

        $r42 = r40;

        $r7 = virtualinvoke r1.<org.jetbrains.kotlin.com.intellij.mock.MockProject: java.lang.String getBasePath()>();

        if $r7 == null goto label02;

        r43 = $r7;

        r44 = r40;

        $r45 = new java.io.File;

        specialinvoke $r45.<java.io.File: void <init>(java.lang.String)>(r43);

        $r42 = r44;

        goto label03;

     label02:
        $r45 = null;

     label03:
        virtualinvoke $r42.<org.jetbrains.kotlin.base.kapt3.KaptOptions$Builder: void setProjectBaseDir(java.io.File)>($r45);

        r46 = virtualinvoke r40.<org.jetbrains.kotlin.base.kapt3.KaptOptions$Builder: java.util.List getCompileClasspath()>();

        r47 = (java.lang.Iterable) r3;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        $r48 = (java.util.Collection) $r8;

        r49 = interfaceinvoke r47.<java.lang.Iterable: java.util.Iterator iterator()>();

     label04:
        $z18 = interfaceinvoke r49.<java.util.Iterator: boolean hasNext()>();

        if $z18 == 0 goto label05;

        r50 = interfaceinvoke r49.<java.util.Iterator: java.lang.Object next()>();

        $z12 = r50 instanceof org.jetbrains.kotlin.cli.jvm.config.JvmClasspathRoot;

        if $z12 == 0 goto label04;

        interfaceinvoke $r48.<java.util.Collection: boolean add(java.lang.Object)>(r50);

        goto label04;

     label05:
        $r9 = (java.util.List) $r48;

        $r51 = (java.lang.Iterable) $r9;

        r52 = r46;

        r53 = $r51;

        $r10 = new java.util.ArrayList;

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r51, 10);

        specialinvoke $r10.<java.util.ArrayList: void <init>(int)>($i0);

        $r54 = (java.util.Collection) $r10;

        r55 = interfaceinvoke r53.<java.lang.Iterable: java.util.Iterator iterator()>();

     label06:
        $z0 = interfaceinvoke r55.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label07;

        r56 = interfaceinvoke r55.<java.util.Iterator: java.lang.Object next()>();

        r57 = (org.jetbrains.kotlin.cli.jvm.config.JvmClasspathRoot) r56;

        r58 = $r54;

        $r38 = virtualinvoke r57.<org.jetbrains.kotlin.cli.jvm.config.JvmClasspathRoot: java.io.File getFile()>();

        interfaceinvoke r58.<java.util.Collection: boolean add(java.lang.Object)>($r38);

        goto label06;

     label07:
        $r11 = (java.util.List) $r54;

        $r12 = (java.util.Collection) $r11;

        interfaceinvoke r52.<java.util.List: boolean addAll(java.util.Collection)>($r12);

        r59 = virtualinvoke r40.<org.jetbrains.kotlin.base.kapt3.KaptOptions$Builder: java.util.List getJavaSourceRoots()>();

        r60 = (java.lang.Iterable) r3;

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        $r61 = (java.util.Collection) $r13;

        r62 = interfaceinvoke r60.<java.lang.Iterable: java.util.Iterator iterator()>();

     label08:
        $z24 = interfaceinvoke r62.<java.util.Iterator: boolean hasNext()>();

        if $z24 == 0 goto label09;

        r63 = interfaceinvoke r62.<java.util.Iterator: java.lang.Object next()>();

        $z9 = r63 instanceof org.jetbrains.kotlin.cli.jvm.config.JavaSourceRoot;

        if $z9 == 0 goto label08;

        interfaceinvoke $r61.<java.util.Collection: boolean add(java.lang.Object)>(r63);

        goto label08;

     label09:
        $r14 = (java.util.List) $r61;

        $r64 = (java.lang.Iterable) $r14;

        r65 = r59;

        r66 = $r64;

        $r15 = new java.util.ArrayList;

        $i1 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r64, 10);

        specialinvoke $r15.<java.util.ArrayList: void <init>(int)>($i1);

        $r67 = (java.util.Collection) $r15;

        r68 = interfaceinvoke r66.<java.lang.Iterable: java.util.Iterator iterator()>();

     label10:
        $z2 = interfaceinvoke r68.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label11;

        r69 = interfaceinvoke r68.<java.util.Iterator: java.lang.Object next()>();

        r70 = (org.jetbrains.kotlin.cli.jvm.config.JavaSourceRoot) r69;

        r71 = $r67;

        $r37 = virtualinvoke r70.<org.jetbrains.kotlin.cli.jvm.config.JavaSourceRoot: java.io.File getFile()>();

        interfaceinvoke r71.<java.util.Collection: boolean add(java.lang.Object)>($r37);

        goto label10;

     label11:
        $r16 = (java.util.List) $r67;

        $r17 = (java.util.Collection) $r16;

        interfaceinvoke r65.<java.util.List: boolean addAll(java.util.Collection)>($r17);

        $r72 = virtualinvoke r40.<org.jetbrains.kotlin.base.kapt3.KaptOptions$Builder: java.io.File getClassesOutputDir()>();

        if $r72 != null goto label12;

        $r34 = <org.jetbrains.kotlin.config.JVMConfigurationKeys: org.jetbrains.kotlin.config.CompilerConfigurationKey OUTPUT_DIRECTORY>;

        $r35 = virtualinvoke r2.<org.jetbrains.kotlin.config.CompilerConfiguration: java.lang.Object get(org.jetbrains.kotlin.config.CompilerConfigurationKey)>($r34);

        $r72 = (java.io.File) $r35;

     label12:
        virtualinvoke r40.<org.jetbrains.kotlin.base.kapt3.KaptOptions$Builder: void setClassesOutputDir(java.io.File)>($r72);

        r4 = r40;

        $r18 = new org.jetbrains.kotlin.kapt3.util.MessageCollectorBackedKaptLogger;

        $r19 = virtualinvoke r4.<org.jetbrains.kotlin.base.kapt3.KaptOptions$Builder: java.util.Set getFlags()>();

        $r20 = <org.jetbrains.kotlin.base.kapt3.KaptFlag: org.jetbrains.kotlin.base.kapt3.KaptFlag VERBOSE>;

        $z4 = interfaceinvoke $r19.<java.util.Set: boolean contains(java.lang.Object)>($r20);

        $r21 = virtualinvoke r4.<org.jetbrains.kotlin.base.kapt3.KaptOptions$Builder: java.util.Set getFlags()>();

        $r22 = <org.jetbrains.kotlin.base.kapt3.KaptFlag: org.jetbrains.kotlin.base.kapt3.KaptFlag INFO_AS_WARNINGS>;

        $z5 = interfaceinvoke $r21.<java.util.Set: boolean contains(java.lang.Object)>($r22);

        $r23 = r0.<androidx.room.compiler.processing.util.compiler.TestKapt3Registrar: org.jetbrains.kotlin.cli.common.messages.MessageCollector messageCollector>;

        specialinvoke $r18.<org.jetbrains.kotlin.kapt3.util.MessageCollectorBackedKaptLogger: void <init>(boolean,boolean,org.jetbrains.kotlin.cli.common.messages.MessageCollector)>($z4, $z5, $r23);

        r73 = $r18;

        $r74 = virtualinvoke r4.<org.jetbrains.kotlin.base.kapt3.KaptOptions$Builder: org.jetbrains.kotlin.base.kapt3.KaptOptions build()>();

        $r24 = virtualinvoke $r74.<org.jetbrains.kotlin.base.kapt3.KaptOptions: java.io.File getSourcesOutputDir()>();

        virtualinvoke $r24.<java.io.File: boolean mkdirs()>();

        $r25 = <org.jetbrains.kotlin.base.kapt3.KaptFlag: org.jetbrains.kotlin.base.kapt3.KaptFlag VERBOSE>;

        $z7 = virtualinvoke $r74.<org.jetbrains.kotlin.base.kapt3.KaptOptions: boolean get(org.jetbrains.kotlin.base.kapt3.KaptFlag)>($r25);

        if $z7 == 0 goto label13;

        $r33 = staticinvoke <org.jetbrains.kotlin.base.kapt3.KaptOptionsKt: java.lang.String logString$default(org.jetbrains.kotlin.base.kapt3.KaptOptions,java.lang.String,int,java.lang.Object)>($r74, null, 1, null);

        virtualinvoke r73.<org.jetbrains.kotlin.kapt3.util.MessageCollectorBackedKaptLogger: void info(java.lang.String)>($r33);

     label13:
        $r26 = new androidx.room.compiler.processing.util.compiler.TestKapt3Registrar$registerProjectComponents$kapt3AnalysisCompletedHandlerExtension$1;

        specialinvoke $r26.<androidx.room.compiler.processing.util.compiler.TestKapt3Registrar$registerProjectComponents$kapt3AnalysisCompletedHandlerExtension$1: void <init>(org.jetbrains.kotlin.base.kapt3.KaptOptions,org.jetbrains.kotlin.kapt3.util.MessageCollectorBackedKaptLogger,org.jetbrains.kotlin.config.CompilerConfiguration,androidx.room.compiler.processing.util.compiler.TestKapt3Registrar)>($r74, r73, r2, r0);

        $r28 = <org.jetbrains.kotlin.resolve.jvm.extensions.AnalysisHandlerExtension: org.jetbrains.kotlin.resolve.jvm.extensions.AnalysisHandlerExtension$Companion Companion>;

        $r27 = (org.jetbrains.kotlin.com.intellij.openapi.project.Project) r1;

        virtualinvoke $r28.<org.jetbrains.kotlin.resolve.jvm.extensions.AnalysisHandlerExtension$Companion: void registerExtension(org.jetbrains.kotlin.com.intellij.openapi.project.Project,java.lang.Object)>($r27, $r26);

        $r31 = <org.jetbrains.kotlin.extensions.StorageComponentContainerContributor: org.jetbrains.kotlin.extensions.StorageComponentContainerContributor$Companion Companion>;

        $r32 = (org.jetbrains.kotlin.com.intellij.openapi.project.Project) r1;

        $r29 = new androidx.room.compiler.processing.util.compiler.TestKapt3Registrar$KaptComponentContributor;

        $r30 = (org.jetbrains.kotlin.resolve.jvm.extensions.PartialAnalysisHandlerExtension) $r26;

        specialinvoke $r29.<androidx.room.compiler.processing.util.compiler.TestKapt3Registrar$KaptComponentContributor: void <init>(org.jetbrains.kotlin.resolve.jvm.extensions.PartialAnalysisHandlerExtension)>($r30);

        virtualinvoke $r31.<org.jetbrains.kotlin.extensions.StorageComponentContainerContributor$Companion: void registerExtension(org.jetbrains.kotlin.com.intellij.openapi.project.Project,java.lang.Object)>($r32, $r29);

        return;
    }

androidx.room.compiler.processing.util.compiler.TestKapt3Registrar$KaptComponentContributor
<androidx.room.compiler.processing.util.compiler.TestKapt3Registrar$KaptComponentContributor: org.jetbrains.kotlin.resolve.jvm.extensions.PartialAnalysisHandlerExtension analysisExtension>
    public void <init>(org.jetbrains.kotlin.resolve.jvm.extensions.PartialAnalysisHandlerExtension)
    {
        androidx.room.compiler.processing.util.compiler.TestKapt3Registrar$KaptComponentContributor r0;
        org.jetbrains.kotlin.resolve.jvm.extensions.PartialAnalysisHandlerExtension r1;

        r0 := @this: androidx.room.compiler.processing.util.compiler.TestKapt3Registrar$KaptComponentContributor;

        r1 := @parameter0: org.jetbrains.kotlin.resolve.jvm.extensions.PartialAnalysisHandlerExtension;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "analysisExtension");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.room.compiler.processing.util.compiler.TestKapt3Registrar$KaptComponentContributor: org.jetbrains.kotlin.resolve.jvm.extensions.PartialAnalysisHandlerExtension analysisExtension> = r1;

        return;
    }

    public void registerModuleComponents(org.jetbrains.kotlin.container.StorageComponentContainer, org.jetbrains.kotlin.platform.TargetPlatform, org.jetbrains.kotlin.descriptors.ModuleDescriptor)
    {
        androidx.room.compiler.processing.util.compiler.TestKapt3Registrar$KaptComponentContributor r0;
        org.jetbrains.kotlin.container.StorageComponentContainer r1;
        org.jetbrains.kotlin.platform.TargetPlatform r2;
        org.jetbrains.kotlin.descriptors.ModuleDescriptor r3;
        boolean $z0;
        org.jetbrains.kotlin.kapt3.KaptAnonymousTypeTransformer $r4;
        org.jetbrains.kotlin.resolve.jvm.extensions.PartialAnalysisHandlerExtension $r5;

        r0 := @this: androidx.room.compiler.processing.util.compiler.TestKapt3Registrar$KaptComponentContributor;

        r1 := @parameter0: org.jetbrains.kotlin.container.StorageComponentContainer;

        r2 := @parameter1: org.jetbrains.kotlin.platform.TargetPlatform;

        r3 := @parameter2: org.jetbrains.kotlin.descriptors.ModuleDescriptor;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "container");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "platform");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "moduleDescriptor");

        $z0 = staticinvoke <org.jetbrains.kotlin.platform.jvm.JvmPlatformKt: boolean isJvm(org.jetbrains.kotlin.platform.TargetPlatform)>(r2);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r4 = new org.jetbrains.kotlin.kapt3.KaptAnonymousTypeTransformer;

        $r5 = r0.<androidx.room.compiler.processing.util.compiler.TestKapt3Registrar$KaptComponentContributor: org.jetbrains.kotlin.resolve.jvm.extensions.PartialAnalysisHandlerExtension analysisExtension>;

        specialinvoke $r4.<org.jetbrains.kotlin.kapt3.KaptAnonymousTypeTransformer: void <init>(org.jetbrains.kotlin.resolve.jvm.extensions.PartialAnalysisHandlerExtension)>($r5);

        staticinvoke <org.jetbrains.kotlin.container.DslKt: void useInstance(org.jetbrains.kotlin.container.StorageComponentContainer,java.lang.Object)>(r1, $r4);

        return;
    }

androidx.room.compiler.processing.util.compiler.TestKapt3Registrar$registerProjectComponents$kapt3AnalysisCompletedHandlerExtension$1
<androidx.room.compiler.processing.util.compiler.TestKapt3Registrar$registerProjectComponents$kapt3AnalysisCompletedHandlerExtension$1: org.jetbrains.kotlin.kapt3.util.MessageCollectorBackedKaptLogger $logger>
<androidx.room.compiler.processing.util.compiler.TestKapt3Registrar$registerProjectComponents$kapt3AnalysisCompletedHandlerExtension$1: androidx.room.compiler.processing.util.compiler.TestKapt3Registrar this$0>
    void <init>(org.jetbrains.kotlin.base.kapt3.KaptOptions, org.jetbrains.kotlin.kapt3.util.MessageCollectorBackedKaptLogger, org.jetbrains.kotlin.config.CompilerConfiguration, androidx.room.compiler.processing.util.compiler.TestKapt3Registrar)
    {
        androidx.room.compiler.processing.util.compiler.TestKapt3Registrar$registerProjectComponents$kapt3AnalysisCompletedHandlerExtension$1 r0;
        org.jetbrains.kotlin.base.kapt3.KaptOptions $r1;
        org.jetbrains.kotlin.kapt3.util.MessageCollectorBackedKaptLogger $r2;
        org.jetbrains.kotlin.config.CompilerConfiguration $r3;
        androidx.room.compiler.processing.util.compiler.TestKapt3Registrar $r4;

        r0 := @this: androidx.room.compiler.processing.util.compiler.TestKapt3Registrar$registerProjectComponents$kapt3AnalysisCompletedHandlerExtension$1;

        $r1 := @parameter0: org.jetbrains.kotlin.base.kapt3.KaptOptions;

        $r2 := @parameter1: org.jetbrains.kotlin.kapt3.util.MessageCollectorBackedKaptLogger;

        $r3 := @parameter2: org.jetbrains.kotlin.config.CompilerConfiguration;

        $r4 := @parameter3: androidx.room.compiler.processing.util.compiler.TestKapt3Registrar;

        r0.<androidx.room.compiler.processing.util.compiler.TestKapt3Registrar$registerProjectComponents$kapt3AnalysisCompletedHandlerExtension$1: org.jetbrains.kotlin.kapt3.util.MessageCollectorBackedKaptLogger $logger> = $r2;

        r0.<androidx.room.compiler.processing.util.compiler.TestKapt3Registrar$registerProjectComponents$kapt3AnalysisCompletedHandlerExtension$1: androidx.room.compiler.processing.util.compiler.TestKapt3Registrar this$0> = $r4;

        specialinvoke r0.<org.jetbrains.kotlin.kapt3.AbstractKapt3Extension: void <init>(org.jetbrains.kotlin.base.kapt3.KaptOptions,org.jetbrains.kotlin.kapt3.util.MessageCollectorBackedKaptLogger,org.jetbrains.kotlin.config.CompilerConfiguration)>($r1, $r2, $r3);

        return;
    }

    protected org.jetbrains.kotlin.kapt3.base.LoadedProcessors loadProcessors()
    {
        androidx.room.compiler.processing.util.compiler.TestKapt3Registrar$registerProjectComponents$kapt3AnalysisCompletedHandlerExtension$1 r0;
        java.lang.Iterable $r1;
        org.jetbrains.kotlin.kapt3.util.MessageCollectorBackedKaptLogger r2;
        java.util.Collection r3, r7;
        java.util.Iterator r4;
        java.lang.Object r5;
        javax.'annotation'.processing.Processor r6;
        java.lang.ClassLoader r8, $r14;
        java.util.List r9, $r11;
        androidx.room.compiler.processing.util.compiler.TestKapt3Registrar $r10;
        java.util.ArrayList $r12;
        int $i0;
        boolean $z3;
        java.lang.Class $r13;
        org.jetbrains.kotlin.kapt3.base.LoadedProcessors $r15;
        org.jetbrains.kotlin.kapt3.base.incremental.IncrementalProcessor $r16;
        org.jetbrains.kotlin.kapt3.base.util.KaptLogger $r17;
        org.jetbrains.kotlin.kapt3.base.incremental.DeclaredProcType $r18;

        r0 := @this: androidx.room.compiler.processing.util.compiler.TestKapt3Registrar$registerProjectComponents$kapt3AnalysisCompletedHandlerExtension$1;

        $r10 = r0.<androidx.room.compiler.processing.util.compiler.TestKapt3Registrar$registerProjectComponents$kapt3AnalysisCompletedHandlerExtension$1: androidx.room.compiler.processing.util.compiler.TestKapt3Registrar this$0>;

        $r11 = virtualinvoke $r10.<androidx.room.compiler.processing.util.compiler.TestKapt3Registrar: java.util.List getProcessors()>();

        $r1 = (java.lang.Iterable) $r11;

        r2 = r0.<androidx.room.compiler.processing.util.compiler.TestKapt3Registrar$registerProjectComponents$kapt3AnalysisCompletedHandlerExtension$1: org.jetbrains.kotlin.kapt3.util.MessageCollectorBackedKaptLogger $logger>;

        $r12 = new java.util.ArrayList;

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r1, 10);

        specialinvoke $r12.<java.util.ArrayList: void <init>(int)>($i0);

        r3 = (java.util.Collection) $r12;

        r4 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label2;

        r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (javax.'annotation'.processing.Processor) r5;

        r7 = r3;

        $r16 = new org.jetbrains.kotlin.kapt3.base.incremental.IncrementalProcessor;

        $r18 = <org.jetbrains.kotlin.kapt3.base.incremental.DeclaredProcType: org.jetbrains.kotlin.kapt3.base.incremental.DeclaredProcType NON_INCREMENTAL>;

        $r17 = (org.jetbrains.kotlin.kapt3.base.util.KaptLogger) r2;

        specialinvoke $r16.<org.jetbrains.kotlin.kapt3.base.incremental.IncrementalProcessor: void <init>(javax.'annotation'.processing.Processor,org.jetbrains.kotlin.kapt3.base.incremental.DeclaredProcType,org.jetbrains.kotlin.kapt3.base.util.KaptLogger)>(r6, $r18, $r17);

        interfaceinvoke r7.<java.util.Collection: boolean add(java.lang.Object)>($r16);

        goto label1;

     label2:
        $r13 = class "Landroidx/room/compiler/processing/util/compiler/TestKapt3Registrar;";

        $r14 = virtualinvoke $r13.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r14, "TestKapt3Registrar::class.java.classLoader");

        r8 = $r14;

        r9 = (java.util.List) r3;

        $r15 = new org.jetbrains.kotlin.kapt3.base.LoadedProcessors;

        specialinvoke $r15.<org.jetbrains.kotlin.kapt3.base.LoadedProcessors: void <init>(java.util.List,java.lang.ClassLoader)>(r9, r8);

        return $r15;
    }

