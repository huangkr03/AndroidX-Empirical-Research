com.google.common.collect.ImmutableSet
<com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableList asList>
    void <init>()
    {
        com.google.common.collect.ImmutableSet $r0;

        $r0 := @this: com.google.common.collect.ImmutableSet;

        specialinvoke $r0.<com.google.common.collect.ImmutableCollection: void <init>()>();

        return;
    }

    static int chooseTableSize(int)
    {
        byte $b0;
        int $i1, $i2;
        double $d0, $d1;
        boolean $z0;

        $i1 := @parameter0: int;

        $i1 = staticinvoke <java.lang.Math: int max(int,int)>($i1, 2);

        if $i1 >= 751619276 goto label3;

        $i2 = $i1 + -1;

        $i2 = staticinvoke <java.lang.Integer: int highestOneBit(int)>($i2);

        $i2 = $i2 + $i2;

     label1:
        $d0 = (double) $i2;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        $d0 = $d0 * 0.7;

        $d1 = (double) $i1;

        $b0 = $d0 cmpg $d1;

        if $b0 >= 0 goto label2;

        $i2 = $i2 + $i2;

        goto label1;

     label2:
        return $i2;

     label3:
        if $i1 >= 1073741824 goto label4;

        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "collection too large");

        return 1073741824;
    }

    private static transient com.google.common.collect.ImmutableSet construct(int, java.lang.Object[])
    {
        java.lang.Object[] $r0, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.Object $r1, $r4;
        com.google.common.collect.ImmutableSet $r3;
        boolean $z0;
        com.google.common.collect.SingletonImmutableSet $r5;
        com.google.common.collect.RegularImmutableSet $r6;

        $i1 := @parameter0: int;

        $r2 := @parameter1: java.lang.Object[];

        lookupswitch($i1)
        {
            case 0: goto label03;
            case 1: goto label02;
            default: goto label01;
        };

     label01:
        $i2 = staticinvoke <com.google.common.collect.ImmutableSet: int chooseTableSize(int)>($i1);

        $r0 = newarray (java.lang.Object)[$i2];

        $i0 = $i2 + -1;

        $i3 = 0;

        $i4 = 0;

        $i5 = 0;

        goto label04;

     label02:
        $r1 = $r2[0];

        virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of(java.lang.Object)>($r1);

        return $r3;

     label03:
        $r3 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of()>();

        return $r3;

     label04:
        if $i3 >= $i1 goto label09;

        $r1 = $r2[$i3];

        $r4 = staticinvoke <com.google.common.collect.ObjectArrays: java.lang.Object checkElementNotNull(java.lang.Object,int)>($r1, $i3);

        $i6 = virtualinvoke $r4.<java.lang.Object: int hashCode()>();

        $i8 = staticinvoke <com.google.common.collect.Hashing: int smear(int)>($i6);

     label05:
        $i7 = $i8 & $i0;

        $r1 = $r0[$i7];

        if $r1 != null goto label06;

        $r2[$i5] = $r4;

        $r0[$i7] = $r4;

        $i4 = $i4 + $i6;

        $i5 = $i5 + 1;

        goto label07;

     label06:
        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label08;

     label07:
        $i3 = $i3 + 1;

        goto label04;

     label08:
        $i8 = $i8 + 1;

        goto label05;

     label09:
        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>($r2, $i5, $i1, null);

        if $i5 != 1 goto label10;

        $r1 = $r2[0];

        virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = new com.google.common.collect.SingletonImmutableSet;

        specialinvoke $r5.<com.google.common.collect.SingletonImmutableSet: void <init>(java.lang.Object)>($r1);

        return $r5;

     label10:
        $i1 = staticinvoke <com.google.common.collect.ImmutableSet: int chooseTableSize(int)>($i5);

        $i2 = $i2 / 2;

        if $i1 >= $i2 goto label11;

        $r3 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet construct(int,java.lang.Object[])>($i5, $r2);

        return $r3;

     label11:
        $i1 = lengthof $r2;

        $z0 = staticinvoke <com.google.common.collect.ImmutableSet: boolean shouldTrim(int,int)>($i5, $i1);

        if $z0 == 0 goto label12;

        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i5);

     label12:
        $r6 = new com.google.common.collect.RegularImmutableSet;

        specialinvoke $r6.<com.google.common.collect.RegularImmutableSet: void <init>(java.lang.Object[],int,java.lang.Object[],int,int)>($r2, $i4, $r0, $i0, $i5);

        return $r6;
    }

    public static com.google.common.collect.ImmutableSet copyOf(java.util.Collection)
    {
        java.util.Collection $r0;
        boolean $z0;
        com.google.common.collect.ImmutableSet $r1;
        java.lang.Object[] $r2;
        int $i0;

        $r0 := @parameter0: java.util.Collection;

        $z0 = $r0 instanceof com.google.common.collect.ImmutableSet;

        if $z0 == 0 goto label1;

        $z0 = $r0 instanceof java.util.SortedSet;

        if $z0 != 0 goto label1;

        $r1 = (com.google.common.collect.ImmutableSet) $r0;

        $z0 = virtualinvoke $r1.<com.google.common.collect.ImmutableSet: boolean isPartialView()>();

        if $z0 != 0 goto label1;

        return $r1;

     label1:
        $r2 = interfaceinvoke $r0.<java.util.Collection: java.lang.Object[] toArray()>();

        $i0 = lengthof $r2;

        $r1 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet construct(int,java.lang.Object[])>($i0, $r2);

        return $r1;
    }

    public static com.google.common.collect.ImmutableSet copyOf(java.lang.Object[])
    {
        java.lang.Object[] $r0;
        int $i0;
        java.lang.Object $r1;
        com.google.common.collect.ImmutableSet $r2;

        $r0 := @parameter0: java.lang.Object[];

        $i0 = lengthof $r0;

        lookupswitch($i0)
        {
            case 0: goto label3;
            case 1: goto label2;
            default: goto label1;
        };

     label1:
        $i0 = lengthof $r0;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r0 = (java.lang.Object[]) $r1;

        $r2 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet construct(int,java.lang.Object[])>($i0, $r0);

        return $r2;

     label2:
        $r1 = $r0[0];

        $r2 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of(java.lang.Object)>($r1);

        return $r2;

     label3:
        $r2 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of()>();

        return $r2;
    }

    public static com.google.common.collect.ImmutableSet of()
    {
        com.google.common.collect.RegularImmutableSet r0;

        r0 = <com.google.common.collect.RegularImmutableSet: com.google.common.collect.RegularImmutableSet EMPTY>;

        return r0;
    }

    public static com.google.common.collect.ImmutableSet of(java.lang.Object)
    {
        java.lang.Object $r0;
        com.google.common.collect.SingletonImmutableSet $r1;

        $r0 := @parameter0: java.lang.Object;

        $r1 = new com.google.common.collect.SingletonImmutableSet;

        specialinvoke $r1.<com.google.common.collect.SingletonImmutableSet: void <init>(java.lang.Object)>($r0);

        return $r1;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.InvalidObjectException
    {
        com.google.common.collect.ImmutableSet $r0;
        java.io.ObjectInputStream $r1;
        java.io.InvalidObjectException $r2;

        $r0 := @this: com.google.common.collect.ImmutableSet;

        $r1 := @parameter0: java.io.ObjectInputStream;

        $r2 = new java.io.InvalidObjectException;

        specialinvoke $r2.<java.io.InvalidObjectException: void <init>(java.lang.String)>("Use SerializedForm");

        throw $r2;
    }

    private static boolean shouldTrim(int, int)
    {
        int $i0, $i1, $i2;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = $i1 >> 1;

        $i1 = $i1 >> 2;

        $i1 = $i2 + $i1;

        if $i0 >= $i1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public com.google.common.collect.ImmutableList asList()
    {
        com.google.common.collect.ImmutableSet $r0;
        com.google.common.collect.ImmutableList $r1;

        $r0 := @this: com.google.common.collect.ImmutableSet;

        $r1 = $r0.<com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableList asList>;

        if $r1 != null goto label1;

        $r1 = virtualinvoke $r0.<com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableList createAsList()>();

        $r0.<com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableList asList> = $r1;

     label1:
        return $r1;
    }

    com.google.common.collect.ImmutableList createAsList()
    {
        com.google.common.collect.ImmutableSet $r0;
        java.lang.Object[] $r1;
        com.google.common.collect.ImmutableList $r2;

        $r0 := @this: com.google.common.collect.ImmutableSet;

        $r1 = virtualinvoke $r0.<com.google.common.collect.ImmutableSet: java.lang.Object[] toArray()>();

        $r2 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList asImmutableList(java.lang.Object[])>($r1);

        return $r2;
    }

    public boolean equals(java.lang.Object)
    {
        com.google.common.collect.ImmutableSet $r0, $r2;
        java.lang.Object $r1;
        boolean $z0;
        int $i0, $i1;

        $r0 := @this: com.google.common.collect.ImmutableSet;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != $r0 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof com.google.common.collect.ImmutableSet;

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke $r0.<com.google.common.collect.ImmutableSet: boolean isHashCodeFast()>();

        if $z0 == 0 goto label2;

        $r2 = (com.google.common.collect.ImmutableSet) $r1;

        $z0 = virtualinvoke $r2.<com.google.common.collect.ImmutableSet: boolean isHashCodeFast()>();

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke $r0.<com.google.common.collect.ImmutableSet: int hashCode()>();

        $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        if $i0 == $i1 goto label2;

        return 0;

     label2:
        $z0 = staticinvoke <com.google.common.collect.Sets: boolean equalsImpl(java.util.Set,java.lang.Object)>($r0, $r1);

        return $z0;
    }

    public int hashCode()
    {
        com.google.common.collect.ImmutableSet $r0;
        int $i0;

        $r0 := @this: com.google.common.collect.ImmutableSet;

        $i0 = staticinvoke <com.google.common.collect.Sets: int hashCodeImpl(java.util.Set)>($r0);

        return $i0;
    }

    boolean isHashCodeFast()
    {
        com.google.common.collect.ImmutableSet $r0;

        $r0 := @this: com.google.common.collect.ImmutableSet;

        return 0;
    }

<com.google.common.collect.ImmutableSet: com.google.common.collect.UnmodifiableIterator iterator()>
    public volatile java.util.Iterator iterator()
    {
        com.google.common.collect.ImmutableSet $r0;
        com.google.common.collect.UnmodifiableIterator $r1;

        $r0 := @this: com.google.common.collect.ImmutableSet;

        $r1 = virtualinvoke $r0.<com.google.common.collect.ImmutableSet: com.google.common.collect.UnmodifiableIterator iterator()>();

        return $r1;
    }

    java.lang.Object writeReplace()
    {
        com.google.common.collect.ImmutableSet $r0;
        com.google.common.collect.ImmutableSet$SerializedForm $r1;
        java.lang.Object[] $r2;

        $r0 := @this: com.google.common.collect.ImmutableSet;

        $r1 = new com.google.common.collect.ImmutableSet$SerializedForm;

        $r2 = virtualinvoke $r0.<com.google.common.collect.ImmutableSet: java.lang.Object[] toArray()>();

        specialinvoke $r1.<com.google.common.collect.ImmutableSet$SerializedForm: void <init>(java.lang.Object[])>($r2);

        return $r1;
    }

