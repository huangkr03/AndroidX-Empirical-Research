kotlin.KotlinVersion
<kotlin.KotlinVersion: kotlin.KotlinVersion CURRENT>
<kotlin.KotlinVersion: kotlin.KotlinVersion$Companion Companion>
<kotlin.KotlinVersion: int MAX_COMPONENT_VALUE>
<kotlin.KotlinVersion: int major>
<kotlin.KotlinVersion: int minor>
<kotlin.KotlinVersion: int patch>
<kotlin.KotlinVersion: int version>
    static void <clinit>()
    {
        kotlin.KotlinVersion $r0;
        kotlin.KotlinVersion$Companion $r1;

        $r1 = new kotlin.KotlinVersion$Companion;

        specialinvoke $r1.<kotlin.KotlinVersion$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <kotlin.KotlinVersion: kotlin.KotlinVersion$Companion Companion> = $r1;

        $r0 = staticinvoke <kotlin.KotlinVersionCurrentValue: kotlin.KotlinVersion get()>();

        <kotlin.KotlinVersion: kotlin.KotlinVersion CURRENT> = $r0;

        return;
    }

    public void <init>(int, int)
    {
        kotlin.KotlinVersion $r0;
        int $i0, $i1;

        $r0 := @this: kotlin.KotlinVersion;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        specialinvoke $r0.<kotlin.KotlinVersion: void <init>(int,int,int)>($i0, $i1, 0);

        return;
    }

    public void <init>(int, int, int)
    {
        kotlin.KotlinVersion $r0;
        int $i0, $i1, $i2;

        $r0 := @this: kotlin.KotlinVersion;

        $i2 := @parameter0: int;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<kotlin.KotlinVersion: int major> = $i2;

        $r0.<kotlin.KotlinVersion: int minor> = $i0;

        $r0.<kotlin.KotlinVersion: int patch> = $i1;

        $i2 = specialinvoke $r0.<kotlin.KotlinVersion: int versionOf(int,int,int)>($i2, $i0, $i1);

        $r0.<kotlin.KotlinVersion: int version> = $i2;

        return;
    }

    private final int versionOf(int, int, int)
    {
        kotlin.KotlinVersion $r0;
        int $i0, $i1, $i2;
        kotlin.ranges.IntRange $r1;
        boolean $z0, $z1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r4;

        $r0 := @this: kotlin.KotlinVersion;

        $i1 := @parameter0: int;

        $i2 := @parameter1: int;

        $i0 := @parameter2: int;

        $r1 = new kotlin.ranges.IntRange;

        $z0 = 0;

        specialinvoke $r1.<kotlin.ranges.IntRange: void <init>(int,int)>(0, 255);

        $z1 = virtualinvoke $r1.<kotlin.ranges.IntRange: boolean contains(int)>($i1);

        if $z1 == 0 goto label1;

        $r1 = new kotlin.ranges.IntRange;

        specialinvoke $r1.<kotlin.ranges.IntRange: void <init>(int,int)>(0, 255);

        $z1 = virtualinvoke $r1.<kotlin.ranges.IntRange: boolean contains(int)>($i2);

        if $z1 == 0 goto label1;

        $r1 = new kotlin.ranges.IntRange;

        specialinvoke $r1.<kotlin.ranges.IntRange: void <init>(int,int)>(0, 255);

        $z1 = virtualinvoke $r1.<kotlin.ranges.IntRange: boolean contains(int)>($i0);

        if $z1 == 0 goto label1;

        $z0 = 1;

        goto label1;

     label1:
        if $z0 == 0 goto label2;

        $i1 = $i1 << 16;

        $i2 = $i2 << 8;

        $i1 = $i1 + $i2;

        $i1 = $i1 + $i0;

        return $i1;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Version components are out of range: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.IllegalArgumentException;

        $r3 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r4;
    }

    public volatile int compareTo(java.lang.Object)
    {
        kotlin.KotlinVersion $r0, $r2;
        int $i0;
        java.lang.Object $r1;

        $r0 := @this: kotlin.KotlinVersion;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (kotlin.KotlinVersion) $r1;

        $i0 = virtualinvoke $r0.<kotlin.KotlinVersion: int compareTo(kotlin.KotlinVersion)>($r2);

        return $i0;
    }

    public int compareTo(kotlin.KotlinVersion)
    {
        kotlin.KotlinVersion $r0, $r1;
        int $i0, $i1;

        $r0 := @this: kotlin.KotlinVersion;

        $r1 := @parameter0: kotlin.KotlinVersion;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "other");

        $i0 = $r0.<kotlin.KotlinVersion: int version>;

        $i1 = $r1.<kotlin.KotlinVersion: int version>;

        $i0 = $i0 - $i1;

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        kotlin.KotlinVersion $r0, $r2;
        int $i0, $i1;
        java.lang.Object $r1;
        boolean $z0;

        $r0 := @this: kotlin.KotlinVersion;

        $r1 := @parameter0: java.lang.Object;

        if $r0 != $r1 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof kotlin.KotlinVersion;

        if $z0 == 0 goto label2;

        $r2 = (kotlin.KotlinVersion) $r1;

        goto label3;

     label2:
        $r2 = null;

     label3:
        if $r2 != null goto label4;

        return 0;

     label4:
        $i0 = $r0.<kotlin.KotlinVersion: int version>;

        $i1 = $r2.<kotlin.KotlinVersion: int version>;

        if $i0 != $i1 goto label5;

        return 1;

     label5:
        return 0;
    }

    public final int getMajor()
    {
        kotlin.KotlinVersion $r0;
        int i0;

        $r0 := @this: kotlin.KotlinVersion;

        i0 = $r0.<kotlin.KotlinVersion: int major>;

        return i0;
    }

    public final int getMinor()
    {
        kotlin.KotlinVersion $r0;
        int i0;

        $r0 := @this: kotlin.KotlinVersion;

        i0 = $r0.<kotlin.KotlinVersion: int minor>;

        return i0;
    }

    public final int getPatch()
    {
        kotlin.KotlinVersion $r0;
        int i0;

        $r0 := @this: kotlin.KotlinVersion;

        i0 = $r0.<kotlin.KotlinVersion: int patch>;

        return i0;
    }

    public int hashCode()
    {
        kotlin.KotlinVersion $r0;
        int i0;

        $r0 := @this: kotlin.KotlinVersion;

        i0 = $r0.<kotlin.KotlinVersion: int version>;

        return i0;
    }

    public final boolean isAtLeast(int, int)
    {
        kotlin.KotlinVersion $r0;
        int $i0, $i1, $i2;

        $r0 := @this: kotlin.KotlinVersion;

        $i2 := @parameter0: int;

        $i0 := @parameter1: int;

        $i1 = $r0.<kotlin.KotlinVersion: int major>;

        if $i1 > $i2 goto label2;

        if $i1 != $i2 goto label1;

        $i2 = $r0.<kotlin.KotlinVersion: int minor>;

        if $i2 < $i0 goto label1;

        goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public final boolean isAtLeast(int, int, int)
    {
        kotlin.KotlinVersion $r0;
        int $i0, $i1, $i2, $i3;

        $r0 := @this: kotlin.KotlinVersion;

        $i3 := @parameter0: int;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = $r0.<kotlin.KotlinVersion: int major>;

        if $i2 > $i3 goto label2;

        if $i2 != $i3 goto label1;

        $i3 = $r0.<kotlin.KotlinVersion: int minor>;

        if $i3 > $i0 goto label2;

        if $i3 != $i0 goto label1;

        $i3 = $r0.<kotlin.KotlinVersion: int patch>;

        if $i3 < $i1 goto label1;

        goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public java.lang.String toString()
    {
        kotlin.KotlinVersion $r0;
        int $i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $r0 := @this: kotlin.KotlinVersion;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $i0 = $r0.<kotlin.KotlinVersion: int major>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $i0 = $r0.<kotlin.KotlinVersion: int minor>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $i0 = $r0.<kotlin.KotlinVersion: int patch>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

kotlin.KotlinVersion$Companion
    private void <init>()
    {
        kotlin.KotlinVersion$Companion $r0;

        $r0 := @this: kotlin.KotlinVersion$Companion;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        kotlin.KotlinVersion$Companion $r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        $r0 := @this: kotlin.KotlinVersion$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke $r0.<kotlin.KotlinVersion$Companion: void <init>()>();

        return;
    }

