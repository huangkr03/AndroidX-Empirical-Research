androidx.navigation.testing.TestNavigatorState
<androidx.navigation.testing.TestNavigatorState: android.content.Context context>
<androidx.navigation.testing.TestNavigatorState: kotlinx.coroutines.CoroutineDispatcher coroutineDispatcher>
<androidx.navigation.testing.TestNavigatorState: androidx.navigation.testing.TestNavigatorState$viewModelStoreProvider$1 viewModelStoreProvider>
<androidx.navigation.testing.TestNavigatorState: java.util.Map savedStates>
<androidx.navigation.testing.TestNavigatorState: java.util.Map entrySavedState>
    public void <init>(android.content.Context, kotlinx.coroutines.CoroutineDispatcher)
    {
        androidx.navigation.testing.TestNavigatorState r0;
        android.content.Context r1;
        kotlinx.coroutines.CoroutineDispatcher r2;
        androidx.navigation.testing.TestNavigatorState$viewModelStoreProvider$1 $r3;
        java.util.LinkedHashMap $r4, $r6;
        java.util.Map $r5, $r7;

        r0 := @this: androidx.navigation.testing.TestNavigatorState;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: kotlinx.coroutines.CoroutineDispatcher;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "coroutineDispatcher");

        specialinvoke r0.<androidx.navigation.NavigatorState: void <init>()>();

        r0.<androidx.navigation.testing.TestNavigatorState: android.content.Context context> = r1;

        r0.<androidx.navigation.testing.TestNavigatorState: kotlinx.coroutines.CoroutineDispatcher coroutineDispatcher> = r2;

        $r3 = new androidx.navigation.testing.TestNavigatorState$viewModelStoreProvider$1;

        specialinvoke $r3.<androidx.navigation.testing.TestNavigatorState$viewModelStoreProvider$1: void <init>()>();

        r0.<androidx.navigation.testing.TestNavigatorState: androidx.navigation.testing.TestNavigatorState$viewModelStoreProvider$1 viewModelStoreProvider> = $r3;

        $r4 = new java.util.LinkedHashMap;

        specialinvoke $r4.<java.util.LinkedHashMap: void <init>()>();

        $r5 = (java.util.Map) $r4;

        r0.<androidx.navigation.testing.TestNavigatorState: java.util.Map savedStates> = $r5;

        $r6 = new java.util.LinkedHashMap;

        specialinvoke $r6.<java.util.LinkedHashMap: void <init>()>();

        $r7 = (java.util.Map) $r6;

        r0.<androidx.navigation.testing.TestNavigatorState: java.util.Map entrySavedState> = $r7;

        return;
    }

    public void <init>(android.content.Context, kotlinx.coroutines.CoroutineDispatcher, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.navigation.testing.TestNavigatorState r0;
        int i0, $i1, $i2;
        kotlin.jvm.internal.DefaultConstructorMarker r1;
        kotlinx.coroutines.MainCoroutineDispatcher $r2, $r3;
        android.content.Context r4;
        kotlinx.coroutines.CoroutineDispatcher r5;

        r0 := @this: androidx.navigation.testing.TestNavigatorState;

        r4 := @parameter0: android.content.Context;

        r5 := @parameter1: kotlinx.coroutines.CoroutineDispatcher;

        i0 := @parameter2: int;

        r1 := @parameter3: kotlin.jvm.internal.DefaultConstructorMarker;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        r4 = null;

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        $r2 = staticinvoke <kotlinx.coroutines.Dispatchers: kotlinx.coroutines.MainCoroutineDispatcher getMain()>();

        $r3 = virtualinvoke $r2.<kotlinx.coroutines.MainCoroutineDispatcher: kotlinx.coroutines.MainCoroutineDispatcher getImmediate()>();

        r5 = (kotlinx.coroutines.CoroutineDispatcher) $r3;

     label2:
        specialinvoke r0.<androidx.navigation.testing.TestNavigatorState: void <init>(android.content.Context,kotlinx.coroutines.CoroutineDispatcher)>(r4, r5);

        return;
    }

    public androidx.navigation.NavBackStackEntry createBackStackEntry(androidx.navigation.NavDestination, android.os.Bundle)
    {
        androidx.navigation.testing.TestNavigatorState r0;
        androidx.navigation.NavDestination r1;
        android.os.Bundle r2;
        androidx.navigation.testing.TestNavigatorState$viewModelStoreProvider$1 $r3;
        androidx.navigation.NavViewModelStoreProvider $r4;
        androidx.lifecycle.Lifecycle$State $r5;
        android.content.Context $r6;
        androidx.navigation.NavBackStackEntry$Companion $r7;
        androidx.navigation.NavBackStackEntry $r8;

        r0 := @this: androidx.navigation.testing.TestNavigatorState;

        r1 := @parameter0: androidx.navigation.NavDestination;

        r2 := @parameter1: android.os.Bundle;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "destination");

        $r7 = <androidx.navigation.NavBackStackEntry: androidx.navigation.NavBackStackEntry$Companion Companion>;

        $r6 = r0.<androidx.navigation.testing.TestNavigatorState: android.content.Context context>;

        $r5 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State RESUMED>;

        $r3 = r0.<androidx.navigation.testing.TestNavigatorState: androidx.navigation.testing.TestNavigatorState$viewModelStoreProvider$1 viewModelStoreProvider>;

        $r4 = (androidx.navigation.NavViewModelStoreProvider) $r3;

        $r8 = staticinvoke <androidx.navigation.NavBackStackEntry$Companion: androidx.navigation.NavBackStackEntry create$default(androidx.navigation.NavBackStackEntry$Companion,android.content.Context,androidx.navigation.NavDestination,android.os.Bundle,androidx.lifecycle.Lifecycle$State,androidx.navigation.NavViewModelStoreProvider,java.lang.String,android.os.Bundle,int,java.lang.Object)>($r7, $r6, r1, r2, $r5, $r4, null, null, 96, null);

        return $r8;
    }

    public final androidx.navigation.NavBackStackEntry restoreBackStackEntry(androidx.navigation.NavBackStackEntry)
    {
        androidx.navigation.testing.TestNavigatorState r0;
        androidx.navigation.NavBackStackEntry r1, $r14;
        android.os.Bundle r2, $r9;
        java.util.Map $r3;
        java.lang.String $r4, $r13, $r16, $r17;
        java.lang.Object $r5;
        androidx.navigation.NavBackStackEntry$Companion $r6;
        android.content.Context $r7;
        androidx.navigation.NavDestination $r8;
        androidx.navigation.testing.TestNavigatorState$viewModelStoreProvider$1 $r10;
        androidx.lifecycle.Lifecycle$State $r11;
        androidx.navigation.NavViewModelStoreProvider $r12;
        java.lang.IllegalStateException $r15;

        r0 := @this: androidx.navigation.testing.TestNavigatorState;

        r1 := @parameter0: androidx.navigation.NavBackStackEntry;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "previouslySavedEntry");

        $r3 = r0.<androidx.navigation.testing.TestNavigatorState: java.util.Map savedStates>;

        $r4 = virtualinvoke r1.<androidx.navigation.NavBackStackEntry: java.lang.String getId()>();

        $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        if $r5 != null goto label1;

        $r17 = "restoreBackStackEntry(previouslySavedEntry) must be passed a NavBackStackEntry that was previously popped with popBackStack(previouslySavedEntry, true)";

        $r15 = new java.lang.IllegalStateException;

        $r16 = virtualinvoke $r17.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r16);

        throw $r15;

     label1:
        r2 = (android.os.Bundle) $r5;

        $r6 = <androidx.navigation.NavBackStackEntry: androidx.navigation.NavBackStackEntry$Companion Companion>;

        $r7 = r0.<androidx.navigation.testing.TestNavigatorState: android.content.Context context>;

        $r8 = virtualinvoke r1.<androidx.navigation.NavBackStackEntry: androidx.navigation.NavDestination getDestination()>();

        $r9 = virtualinvoke r1.<androidx.navigation.NavBackStackEntry: android.os.Bundle getArguments()>();

        $r11 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State RESUMED>;

        $r10 = r0.<androidx.navigation.testing.TestNavigatorState: androidx.navigation.testing.TestNavigatorState$viewModelStoreProvider$1 viewModelStoreProvider>;

        $r12 = (androidx.navigation.NavViewModelStoreProvider) $r10;

        $r13 = virtualinvoke r1.<androidx.navigation.NavBackStackEntry: java.lang.String getId()>();

        $r14 = virtualinvoke $r6.<androidx.navigation.NavBackStackEntry$Companion: androidx.navigation.NavBackStackEntry create(android.content.Context,androidx.navigation.NavDestination,android.os.Bundle,androidx.lifecycle.Lifecycle$State,androidx.navigation.NavViewModelStoreProvider,java.lang.String,android.os.Bundle)>($r7, $r8, $r9, $r11, $r12, $r13, r2);

        return $r14;
    }

    public void push(androidx.navigation.NavBackStackEntry)
    {
        androidx.navigation.testing.TestNavigatorState r0;
        androidx.navigation.NavBackStackEntry r1;

        r0 := @this: androidx.navigation.testing.TestNavigatorState;

        r1 := @parameter0: androidx.navigation.NavBackStackEntry;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "backStackEntry");

        specialinvoke r0.<androidx.navigation.NavigatorState: void push(androidx.navigation.NavBackStackEntry)>(r1);

        staticinvoke <androidx.navigation.testing.TestNavigatorState: void updateMaxLifecycle$default(androidx.navigation.testing.TestNavigatorState,java.util.List,boolean,int,java.lang.Object)>(r0, null, 0, 3, null);

        return;
    }

    public void pop(androidx.navigation.NavBackStackEntry, boolean)
    {
        androidx.navigation.testing.TestNavigatorState r0;
        androidx.navigation.NavBackStackEntry r1;
        boolean z0;
        java.util.List r2, r3;
        kotlinx.coroutines.flow.StateFlow $r4;
        java.lang.Object $r5;
        int $i0, $i1;

        r0 := @this: androidx.navigation.testing.TestNavigatorState;

        r1 := @parameter0: androidx.navigation.NavBackStackEntry;

        z0 := @parameter1: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "popUpTo");

        $r4 = virtualinvoke r0.<androidx.navigation.testing.TestNavigatorState: kotlinx.coroutines.flow.StateFlow getBackStack()>();

        $r5 = interfaceinvoke $r4.<kotlinx.coroutines.flow.StateFlow: java.lang.Object getValue()>();

        r2 = (java.util.List) $r5;

        $i0 = interfaceinvoke r2.<java.util.List: int indexOf(java.lang.Object)>(r1);

        $i1 = interfaceinvoke r2.<java.util.List: int size()>();

        r3 = interfaceinvoke r2.<java.util.List: java.util.List subList(int,int)>($i0, $i1);

        specialinvoke r0.<androidx.navigation.NavigatorState: void pop(androidx.navigation.NavBackStackEntry,boolean)>(r1, z0);

        specialinvoke r0.<androidx.navigation.testing.TestNavigatorState: void updateMaxLifecycle(java.util.List,boolean)>(r3, z0);

        return;
    }

    public void popWithTransition(androidx.navigation.NavBackStackEntry, boolean)
    {
        androidx.navigation.testing.TestNavigatorState r0;
        androidx.navigation.NavBackStackEntry r1;
        boolean z0;
        java.lang.Boolean r2;
        java.util.Map $r3;

        r0 := @this: androidx.navigation.testing.TestNavigatorState;

        r1 := @parameter0: androidx.navigation.NavBackStackEntry;

        z0 := @parameter1: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "popUpTo");

        specialinvoke r0.<androidx.navigation.NavigatorState: void popWithTransition(androidx.navigation.NavBackStackEntry,boolean)>(r1, z0);

        r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r3 = r0.<androidx.navigation.testing.TestNavigatorState: java.util.Map entrySavedState>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public void markTransitionComplete(androidx.navigation.NavBackStackEntry)
    {
        androidx.navigation.testing.TestNavigatorState r0;
        androidx.navigation.NavBackStackEntry r1;
        boolean z0, $z1;
        java.util.Map $r2, $r5;
        java.lang.Object $r3, $r8;
        java.lang.Boolean $r4;
        kotlinx.coroutines.flow.StateFlow $r7;
        java.util.List $r9, $r10;

        r0 := @this: androidx.navigation.testing.TestNavigatorState;

        r1 := @parameter0: androidx.navigation.NavBackStackEntry;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "entry");

        $r2 = r0.<androidx.navigation.testing.TestNavigatorState: java.util.Map entrySavedState>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r3, $r4);

        specialinvoke r0.<androidx.navigation.NavigatorState: void markTransitionComplete(androidx.navigation.NavBackStackEntry)>(r1);

        $r5 = r0.<androidx.navigation.testing.TestNavigatorState: java.util.Map entrySavedState>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        $r7 = virtualinvoke r0.<androidx.navigation.testing.TestNavigatorState: kotlinx.coroutines.flow.StateFlow getBackStack()>();

        $r8 = interfaceinvoke $r7.<kotlinx.coroutines.flow.StateFlow: java.lang.Object getValue()>();

        $r9 = (java.util.List) $r8;

        $z1 = interfaceinvoke $r9.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z1 != 0 goto label1;

        $r10 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>(r1);

        specialinvoke r0.<androidx.navigation.testing.TestNavigatorState: void updateMaxLifecycle(java.util.List,boolean)>($r10, z0);

        goto label2;

     label1:
        staticinvoke <androidx.navigation.testing.TestNavigatorState: void updateMaxLifecycle$default(androidx.navigation.testing.TestNavigatorState,java.util.List,boolean,int,java.lang.Object)>(r0, null, 0, 3, null);

     label2:
        return;
    }

    private final void updateMaxLifecycle(java.util.List, boolean)
    {
        androidx.navigation.testing.TestNavigatorState r0;
        java.util.List r1;
        boolean z0;
        kotlinx.coroutines.CoroutineDispatcher $r2;
        androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1 $r3;
        kotlin.coroutines.CoroutineContext $r4;
        kotlin.jvm.functions.Function2 $r5;

        r0 := @this: androidx.navigation.testing.TestNavigatorState;

        r1 := @parameter0: java.util.List;

        z0 := @parameter1: boolean;

        $r2 = r0.<androidx.navigation.testing.TestNavigatorState: kotlinx.coroutines.CoroutineDispatcher coroutineDispatcher>;

        $r4 = (kotlin.coroutines.CoroutineContext) $r2;

        $r3 = new androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1;

        specialinvoke $r3.<androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1: void <init>(java.util.List,boolean,androidx.navigation.testing.TestNavigatorState,kotlin.coroutines.Continuation)>(r1, z0, r0, null);

        $r5 = (kotlin.jvm.functions.Function2) $r3;

        staticinvoke <kotlinx.coroutines.BuildersKt: java.lang.Object runBlocking(kotlin.coroutines.CoroutineContext,kotlin.jvm.functions.Function2)>($r4, $r5);

        return;
    }

    static void updateMaxLifecycle$default(androidx.navigation.testing.TestNavigatorState, java.util.List, boolean, int, java.lang.Object)
    {
        androidx.navigation.testing.TestNavigatorState r0;
        int i0, $i1, $i2;
        java.lang.Object r1;
        java.util.List r2;
        boolean z0;

        r0 := @parameter0: androidx.navigation.testing.TestNavigatorState;

        r2 := @parameter1: java.util.List;

        z0 := @parameter2: boolean;

        i0 := @parameter3: int;

        r1 := @parameter4: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        r2 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        z0 = 0;

     label2:
        specialinvoke r0.<androidx.navigation.testing.TestNavigatorState: void updateMaxLifecycle(java.util.List,boolean)>(r2, z0);

        return;
    }

    public void <init>(android.content.Context)
    {
        androidx.navigation.testing.TestNavigatorState r0;
        android.content.Context r1;

        r0 := @this: androidx.navigation.testing.TestNavigatorState;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<androidx.navigation.testing.TestNavigatorState: void <init>(android.content.Context,kotlinx.coroutines.CoroutineDispatcher,int,kotlin.jvm.internal.DefaultConstructorMarker)>(r1, null, 2, null);

        return;
    }

    public void <init>()
    {
        androidx.navigation.testing.TestNavigatorState r0;

        r0 := @this: androidx.navigation.testing.TestNavigatorState;

        specialinvoke r0.<androidx.navigation.testing.TestNavigatorState: void <init>(android.content.Context,kotlinx.coroutines.CoroutineDispatcher,int,kotlin.jvm.internal.DefaultConstructorMarker)>(null, null, 3, null);

        return;
    }

    public static final java.util.Map access$getSavedStates$p(androidx.navigation.testing.TestNavigatorState)
    {
        androidx.navigation.testing.TestNavigatorState $r0;
        java.util.Map $r1;

        $r0 := @parameter0: androidx.navigation.testing.TestNavigatorState;

        $r1 = $r0.<androidx.navigation.testing.TestNavigatorState: java.util.Map savedStates>;

        return $r1;
    }

    public static final androidx.navigation.testing.TestNavigatorState$viewModelStoreProvider$1 access$getViewModelStoreProvider$p(androidx.navigation.testing.TestNavigatorState)
    {
        androidx.navigation.testing.TestNavigatorState $r0;
        androidx.navigation.testing.TestNavigatorState$viewModelStoreProvider$1 $r1;

        $r0 := @parameter0: androidx.navigation.testing.TestNavigatorState;

        $r1 = $r0.<androidx.navigation.testing.TestNavigatorState: androidx.navigation.testing.TestNavigatorState$viewModelStoreProvider$1 viewModelStoreProvider>;

        return $r1;
    }

androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1$1
<androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1$1: int label>
<androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1$1: java.util.List $poppedList>
<androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1$1: boolean $saveState>
<androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1$1: androidx.navigation.testing.TestNavigatorState this$0>
    void <init>(java.util.List, boolean, androidx.navigation.testing.TestNavigatorState, kotlin.coroutines.Continuation)
    {
        androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1$1 r0;
        java.util.List $r1;
        boolean $z0;
        androidx.navigation.testing.TestNavigatorState $r2;
        kotlin.coroutines.Continuation $r3;

        r0 := @this: androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1$1;

        $r1 := @parameter0: java.util.List;

        $z0 := @parameter1: boolean;

        $r2 := @parameter2: androidx.navigation.testing.TestNavigatorState;

        $r3 := @parameter3: kotlin.coroutines.Continuation;

        r0.<androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1$1: java.util.List $poppedList> = $r1;

        r0.<androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1$1: boolean $saveState> = $z0;

        r0.<androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1$1: androidx.navigation.testing.TestNavigatorState this$0> = $r2;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r3);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1$1 r0;
        java.lang.Object $r1, $r9, $r13, $r16, $r19, $r45;
        androidx.navigation.NavBackStackEntry r2, r41, r48;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, z7;
        int $i0;
        java.util.List $r4, $r6, $r11, r47;
        java.lang.Iterable $r5, $r10;
        androidx.navigation.testing.TestNavigatorState $r7, $r14, $r22, $r26, $r35, $r43;
        kotlinx.coroutines.flow.StateFlow $r8, $r15, $r44;
        kotlin.Unit $r12;
        java.util.Set $r17, $r46;
        androidx.navigation.NavDestination $r18;
        androidx.lifecycle.Lifecycle$State $r20, $r21, $r31, $r32, $r33, $r51;
        java.util.Map $r23, $r36;
        java.lang.String $r24, $r28, $r37;
        androidx.navigation.testing.TestNavigatorState$viewModelStoreProvider$1 $r27;
        androidx.lifecycle.ViewModelStore $r29;
        androidx.lifecycle.Lifecycle $r30;
        android.os.Bundle $r34, r42;
        java.lang.IllegalStateException $r39;
        java.util.Iterator r40, r49;

        r0 := @this: androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1$1;

        $r1 := @parameter0: java.lang.Object;

        staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1$1: int label>;

        tableswitch($i0)
        {
            case 0: goto label01;
            default: goto label12;
        };

     label01:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r4 = r0.<androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1$1: java.util.List $poppedList>;

        $r5 = (java.lang.Iterable) $r4;

        $r6 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List reversed(java.lang.Iterable)>($r5);

        r40 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z6 = interfaceinvoke r40.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label05;

        $r19 = interfaceinvoke r40.<java.util.Iterator: java.lang.Object next()>();

        r41 = (androidx.navigation.NavBackStackEntry) $r19;

        $z3 = r0.<androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1$1: boolean $saveState>;

        if $z3 == 0 goto label03;

        $r30 = virtualinvoke r41.<androidx.navigation.NavBackStackEntry: androidx.lifecycle.Lifecycle getLifecycle()>();

        $r31 = virtualinvoke $r30.<androidx.lifecycle.Lifecycle: androidx.lifecycle.Lifecycle$State getCurrentState()>();

        $r32 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State STARTED>;

        $z5 = virtualinvoke $r31.<androidx.lifecycle.Lifecycle$State: boolean isAtLeast(androidx.lifecycle.Lifecycle$State)>($r32);

        if $z5 == 0 goto label03;

        $r33 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State CREATED>;

        virtualinvoke r41.<androidx.navigation.NavBackStackEntry: void setMaxLifecycle(androidx.lifecycle.Lifecycle$State)>($r33);

        $r34 = new android.os.Bundle;

        specialinvoke $r34.<android.os.Bundle: void <init>()>();

        r42 = $r34;

        virtualinvoke r41.<androidx.navigation.NavBackStackEntry: void saveState(android.os.Bundle)>(r42);

        $r35 = r0.<androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1$1: androidx.navigation.testing.TestNavigatorState this$0>;

        $r36 = staticinvoke <androidx.navigation.testing.TestNavigatorState: java.util.Map access$getSavedStates$p(androidx.navigation.testing.TestNavigatorState)>($r35);

        $r37 = virtualinvoke r41.<androidx.navigation.NavBackStackEntry: java.lang.String getId()>();

        interfaceinvoke $r36.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r37, r42);

     label03:
        $r43 = r0.<androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1$1: androidx.navigation.testing.TestNavigatorState this$0>;

        $r44 = virtualinvoke $r43.<androidx.navigation.testing.TestNavigatorState: kotlinx.coroutines.flow.StateFlow getTransitionsInProgress()>();

        $r45 = interfaceinvoke $r44.<kotlinx.coroutines.flow.StateFlow: java.lang.Object getValue()>();

        $r46 = (java.util.Set) $r45;

        z7 = interfaceinvoke $r46.<java.util.Set: boolean contains(java.lang.Object)>(r41);

        if z7 != 0 goto label04;

        $r21 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State DESTROYED>;

        virtualinvoke r41.<androidx.navigation.NavBackStackEntry: void setMaxLifecycle(androidx.lifecycle.Lifecycle$State)>($r21);

        $z4 = r0.<androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1$1: boolean $saveState>;

        if $z4 != 0 goto label02;

        $r22 = r0.<androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1$1: androidx.navigation.testing.TestNavigatorState this$0>;

        $r23 = staticinvoke <androidx.navigation.testing.TestNavigatorState: java.util.Map access$getSavedStates$p(androidx.navigation.testing.TestNavigatorState)>($r22);

        $r24 = virtualinvoke r41.<androidx.navigation.NavBackStackEntry: java.lang.String getId()>();

        interfaceinvoke $r23.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r24);

        $r26 = r0.<androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1$1: androidx.navigation.testing.TestNavigatorState this$0>;

        $r27 = staticinvoke <androidx.navigation.testing.TestNavigatorState: androidx.navigation.testing.TestNavigatorState$viewModelStoreProvider$1 access$getViewModelStoreProvider$p(androidx.navigation.testing.TestNavigatorState)>($r26);

        $r28 = virtualinvoke r41.<androidx.navigation.NavBackStackEntry: java.lang.String getId()>();

        $r29 = virtualinvoke $r27.<androidx.navigation.testing.TestNavigatorState$viewModelStoreProvider$1: androidx.lifecycle.ViewModelStore getViewModelStore(java.lang.String)>($r28);

        virtualinvoke $r29.<androidx.lifecycle.ViewModelStore: void clear()>();

        goto label02;

     label04:
        $r20 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State CREATED>;

        virtualinvoke r41.<androidx.navigation.NavBackStackEntry: void setMaxLifecycle(androidx.lifecycle.Lifecycle$State)>($r20);

        goto label02;

     label05:
        $r7 = r0.<androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1$1: androidx.navigation.testing.TestNavigatorState this$0>;

        $r8 = virtualinvoke $r7.<androidx.navigation.testing.TestNavigatorState: kotlinx.coroutines.flow.StateFlow getBackStack()>();

        $r9 = interfaceinvoke $r8.<kotlinx.coroutines.flow.StateFlow: java.lang.Object getValue()>();

        r47 = (java.util.List) $r9;

        r48 = null;

        $r10 = (java.lang.Iterable) r47;

        $r11 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List reversed(java.lang.Iterable)>($r10);

        r49 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z1 = interfaceinvoke r49.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r13 = interfaceinvoke r49.<java.util.Iterator: java.lang.Object next()>();

        r2 = (androidx.navigation.NavBackStackEntry) $r13;

        $r14 = r0.<androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1$1: androidx.navigation.testing.TestNavigatorState this$0>;

        $r15 = virtualinvoke $r14.<androidx.navigation.testing.TestNavigatorState: kotlinx.coroutines.flow.StateFlow getTransitionsInProgress()>();

        $r16 = interfaceinvoke $r15.<kotlinx.coroutines.flow.StateFlow: java.lang.Object getValue()>();

        $r17 = (java.util.Set) $r16;

        z0 = interfaceinvoke $r17.<java.util.Set: boolean contains(java.lang.Object)>(r2);

        if r48 != null goto label08;

        if z0 != 0 goto label07;

        $r51 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State RESUMED>;

        goto label10;

     label07:
        $r51 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State STARTED>;

        goto label10;

     label08:
        $r18 = virtualinvoke r48.<androidx.navigation.NavBackStackEntry: androidx.navigation.NavDestination getDestination()>();

        $z2 = $r18 instanceof androidx.navigation.FloatingWindow;

        if $z2 == 0 goto label09;

        $r51 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State STARTED>;

        goto label10;

     label09:
        $r51 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State CREATED>;

     label10:
        virtualinvoke r2.<androidx.navigation.NavBackStackEntry: void setMaxLifecycle(androidx.lifecycle.Lifecycle$State)>($r51);

        r48 = r2;

        goto label06;

     label11:
        $r12 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r12;

     label12:
        $r39 = new java.lang.IllegalStateException;

        specialinvoke $r39.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r39;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1$1 r0, $r3;
        java.lang.Object r1;
        kotlin.coroutines.Continuation $r2, $r6;
        androidx.navigation.testing.TestNavigatorState $r4;
        boolean $z0;
        java.util.List $r5;

        r0 := @this: androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1$1;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = new androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1$1;

        $r5 = r0.<androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1$1: java.util.List $poppedList>;

        $z0 = r0.<androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1$1: boolean $saveState>;

        $r4 = r0.<androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1$1: androidx.navigation.testing.TestNavigatorState this$0>;

        specialinvoke $r3.<androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1$1: void <init>(java.util.List,boolean,androidx.navigation.testing.TestNavigatorState,kotlin.coroutines.Continuation)>($r5, $z0, $r4, $r2);

        $r6 = (kotlin.coroutines.Continuation) $r3;

        return $r6;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.Continuation)
    {
        androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1$1 r0, $r5;
        kotlinx.coroutines.CoroutineScope r1;
        kotlin.coroutines.Continuation r2, $r3;
        kotlin.Unit $r4;
        java.lang.Object $r6;

        r0 := @this: androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1$1;

        r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = virtualinvoke r0.<androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, r2);

        $r5 = (androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1$1) $r3;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1$1: java.lang.Object invokeSuspend(java.lang.Object)>($r4);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1$1 r0;
        java.lang.Object r1, r2, $r5;
        kotlin.coroutines.Continuation $r3;
        kotlinx.coroutines.CoroutineScope $r4;

        r0 := @this: androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (kotlinx.coroutines.CoroutineScope) r1;

        $r3 = (kotlin.coroutines.Continuation) r2;

        $r5 = virtualinvoke r0.<androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)>($r4, $r3);

        return $r5;
    }

androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1
<androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1: int label>
<androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1: java.util.List $poppedList>
<androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1: boolean $saveState>
<androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1: androidx.navigation.testing.TestNavigatorState this$0>
    void <init>(java.util.List, boolean, androidx.navigation.testing.TestNavigatorState, kotlin.coroutines.Continuation)
    {
        androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1 r0;
        java.util.List $r1;
        boolean $z0;
        androidx.navigation.testing.TestNavigatorState $r2;
        kotlin.coroutines.Continuation $r3;

        r0 := @this: androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1;

        $r1 := @parameter0: java.util.List;

        $z0 := @parameter1: boolean;

        $r2 := @parameter2: androidx.navigation.testing.TestNavigatorState;

        $r3 := @parameter3: kotlin.coroutines.Continuation;

        r0.<androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1: java.util.List $poppedList> = $r1;

        r0.<androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1: boolean $saveState> = $z0;

        r0.<androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1: androidx.navigation.testing.TestNavigatorState this$0> = $r2;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r3);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1 r0;
        java.lang.Object $r1, r2, $r12;
        int $i0;
        kotlin.Unit $r3;
        kotlinx.coroutines.MainCoroutineDispatcher $r4, $r5;
        androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1$1 $r6;
        androidx.navigation.testing.TestNavigatorState $r7;
        boolean $z0;
        java.util.List $r8;
        kotlin.coroutines.CoroutineContext $r9;
        kotlin.jvm.functions.Function2 $r10;
        kotlin.coroutines.Continuation $r11;
        java.lang.IllegalStateException $r13;

        r0 := @this: androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1;

        $r1 := @parameter0: java.lang.Object;

        r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1: int label>;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label4;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r4 = staticinvoke <kotlinx.coroutines.Dispatchers: kotlinx.coroutines.MainCoroutineDispatcher getMain()>();

        $r5 = virtualinvoke $r4.<kotlinx.coroutines.MainCoroutineDispatcher: kotlinx.coroutines.MainCoroutineDispatcher getImmediate()>();

        $r9 = (kotlin.coroutines.CoroutineContext) $r5;

        $r6 = new androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1$1;

        $r8 = r0.<androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1: java.util.List $poppedList>;

        $z0 = r0.<androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1: boolean $saveState>;

        $r7 = r0.<androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1: androidx.navigation.testing.TestNavigatorState this$0>;

        specialinvoke $r6.<androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1$1: void <init>(java.util.List,boolean,androidx.navigation.testing.TestNavigatorState,kotlin.coroutines.Continuation)>($r8, $z0, $r7, null);

        $r10 = (kotlin.jvm.functions.Function2) $r6;

        $r11 = (kotlin.coroutines.Continuation) r0;

        r0.<androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1: int label> = 1;

        $r12 = staticinvoke <kotlinx.coroutines.BuildersKt: java.lang.Object withContext(kotlin.coroutines.CoroutineContext,kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation)>($r9, $r10, $r11);

        if $r12 != r2 goto label3;

        return r2;

     label2:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label3:
        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;

     label4:
        $r13 = new java.lang.IllegalStateException;

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r13;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1 r0, $r3;
        java.lang.Object r1;
        kotlin.coroutines.Continuation $r2, $r6;
        androidx.navigation.testing.TestNavigatorState $r4;
        boolean $z0;
        java.util.List $r5;

        r0 := @this: androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = new androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1;

        $r5 = r0.<androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1: java.util.List $poppedList>;

        $z0 = r0.<androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1: boolean $saveState>;

        $r4 = r0.<androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1: androidx.navigation.testing.TestNavigatorState this$0>;

        specialinvoke $r3.<androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1: void <init>(java.util.List,boolean,androidx.navigation.testing.TestNavigatorState,kotlin.coroutines.Continuation)>($r5, $z0, $r4, $r2);

        $r6 = (kotlin.coroutines.Continuation) $r3;

        return $r6;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.Continuation)
    {
        androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1 r0, $r5;
        kotlinx.coroutines.CoroutineScope r1;
        kotlin.coroutines.Continuation r2, $r3;
        kotlin.Unit $r4;
        java.lang.Object $r6;

        r0 := @this: androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1;

        r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = virtualinvoke r0.<androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, r2);

        $r5 = (androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1) $r3;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1: java.lang.Object invokeSuspend(java.lang.Object)>($r4);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1 r0;
        java.lang.Object r1, r2, $r5;
        kotlin.coroutines.Continuation $r3;
        kotlinx.coroutines.CoroutineScope $r4;

        r0 := @this: androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (kotlinx.coroutines.CoroutineScope) r1;

        $r3 = (kotlin.coroutines.Continuation) r2;

        $r5 = virtualinvoke r0.<androidx.navigation.testing.TestNavigatorState$updateMaxLifecycle$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)>($r4, $r3);

        return $r5;
    }

androidx.navigation.testing.TestNavigatorState$viewModelStoreProvider$1
<androidx.navigation.testing.TestNavigatorState$viewModelStoreProvider$1: java.util.Map viewModelStores>
    void <init>()
    {
        androidx.navigation.testing.TestNavigatorState$viewModelStoreProvider$1 r0;
        java.util.LinkedHashMap $r1;
        java.util.Map $r2;

        r0 := @this: androidx.navigation.testing.TestNavigatorState$viewModelStoreProvider$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>();

        $r2 = (java.util.Map) $r1;

        r0.<androidx.navigation.testing.TestNavigatorState$viewModelStoreProvider$1: java.util.Map viewModelStores> = $r2;

        return;
    }

    public androidx.lifecycle.ViewModelStore getViewModelStore(java.lang.String)
    {
        androidx.navigation.testing.TestNavigatorState$viewModelStoreProvider$1 r0;
        java.lang.String r1;
        java.util.Map $r2;
        java.lang.Object r3, $r8;
        androidx.lifecycle.ViewModelStore $r4, $r5;

        r0 := @this: androidx.navigation.testing.TestNavigatorState$viewModelStoreProvider$1;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "backStackEntryId");

        $r2 = r0.<androidx.navigation.testing.TestNavigatorState$viewModelStoreProvider$1: java.util.Map viewModelStores>;

        r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if r3 != null goto label1;

        $r5 = new androidx.lifecycle.ViewModelStore;

        specialinvoke $r5.<androidx.lifecycle.ViewModelStore: void <init>()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r5);

        $r8 = $r5;

        goto label2;

     label1:
        $r8 = r3;

     label2:
        $r4 = (androidx.lifecycle.ViewModelStore) $r8;

        return $r4;
    }

