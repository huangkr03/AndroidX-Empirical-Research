androidx.test.core.graphics.BitmapStorage
    public static final void writeToTestStorage(android.graphics.Bitmap, java.lang.String) throws java.io.IOException
    {
        android.graphics.Bitmap $r0;
        java.lang.String r1;
        androidx.test.services.storage.TestStorage $r2;
        androidx.test.platform.io.PlatformTestStorage $r3;

        $r0 := @parameter0: android.graphics.Bitmap;

        r1 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "name");

        $r2 = new androidx.test.services.storage.TestStorage;

        specialinvoke $r2.<androidx.test.services.storage.TestStorage: void <init>()>();

        $r3 = (androidx.test.platform.io.PlatformTestStorage) $r2;

        staticinvoke <androidx.test.core.graphics.BitmapStorage: void writeToTestStorage(android.graphics.Bitmap,androidx.test.platform.io.PlatformTestStorage,java.lang.String)>($r0, $r3, r1);

        return;
    }

    public static final void writeToTestStorage(android.graphics.Bitmap, androidx.test.platform.io.PlatformTestStorage, java.lang.String) throws java.io.IOException
    {
        android.graphics.Bitmap $r0;
        androidx.test.platform.io.PlatformTestStorage r1;
        java.lang.String r2, r4, $r8;
        java.io.Closeable r3;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.io.OutputStream $r9, r14;
        android.graphics.Bitmap$CompressFormat $r10;
        boolean $z0;
        java.io.IOException $r11;
        java.lang.Throwable $r12, $r13, r16, r17, r18;
        kotlin.Unit r15;

        $r0 := @parameter0: android.graphics.Bitmap;

        r1 := @parameter1: androidx.test.platform.io.PlatformTestStorage;

        r2 := @parameter2: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "testStorage");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "name");

        r4 = r2;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".png");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = interfaceinvoke r1.<androidx.test.platform.io.PlatformTestStorage: java.io.OutputStream openOutputFile(java.lang.String)>($r8);

        r3 = (java.io.Closeable) $r9;

     label1:
        r14 = (java.io.OutputStream) r3;

        $r10 = <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat PNG>;

        $z0 = virtualinvoke $r0.<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>($r10, 0, r14);

        if $z0 != 0 goto label2;

        $r11 = new java.io.IOException;

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>("Failed to compress bitmap");

        throw $r11;

     label2:
        r15 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label3:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r3, null);

        goto label7;

     label4:
        $r12 := @caughtexception;

        r16 = $r12;

        r17 = r16;

        throw r16;

     label5:
        $r13 := @caughtexception;

        r18 = $r13;

     label6:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r3, r17);

        throw r18;

     label7:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

