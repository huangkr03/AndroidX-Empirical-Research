androidx.compose.ui.node.Owner
<androidx.compose.ui.node.Owner: androidx.compose.ui.node.Owner$Companion Companion>
<androidx.compose.ui.node.Owner: androidx.compose.ui.node.LayoutNode getRoot()>
<androidx.compose.ui.node.Owner: androidx.compose.ui.node.LayoutNodeDrawScope getSharedDrawScope()>
<androidx.compose.ui.node.Owner: androidx.compose.ui.node.RootForTest getRootForTest()>
<androidx.compose.ui.node.Owner: androidx.compose.ui.hapticfeedback.HapticFeedback getHapticFeedBack()>
<androidx.compose.ui.node.Owner: androidx.compose.ui.input.InputModeManager getInputModeManager()>
<androidx.compose.ui.node.Owner: androidx.compose.ui.platform.ClipboardManager getClipboardManager()>
<androidx.compose.ui.node.Owner: androidx.compose.ui.platform.AccessibilityManager getAccessibilityManager()>
<androidx.compose.ui.node.Owner: androidx.compose.ui.platform.TextToolbar getTextToolbar()>
<androidx.compose.ui.node.Owner: androidx.compose.ui.autofill.AutofillTree getAutofillTree()>
    public static void getAutofillTree$annotations()
    {
        return;
    }

<androidx.compose.ui.node.Owner: androidx.compose.ui.autofill.Autofill getAutofill()>
    public static void getAutofill$annotations()
    {
        return;
    }

<androidx.compose.ui.node.Owner: androidx.compose.ui.unit.Density getDensity()>
<androidx.compose.ui.node.Owner: androidx.compose.ui.text.input.TextInputService getTextInputService()>
<androidx.compose.ui.node.Owner: androidx.compose.ui.input.pointer.PointerIconService getPointerIconService()>
<androidx.compose.ui.node.Owner: androidx.compose.ui.focus.FocusManager getFocusManager()>
<androidx.compose.ui.node.Owner: androidx.compose.ui.platform.WindowInfo getWindowInfo()>
<androidx.compose.ui.node.Owner: androidx.compose.ui.text.font.Font$ResourceLoader getFontLoader()>
    public static void getFontLoader$annotations()
    {
        return;
    }

<androidx.compose.ui.node.Owner: androidx.compose.ui.text.font.FontFamily$Resolver getFontFamilyResolver()>
<androidx.compose.ui.node.Owner: androidx.compose.ui.unit.LayoutDirection getLayoutDirection()>
<androidx.compose.ui.node.Owner: boolean getShowLayoutBounds()>
<androidx.compose.ui.node.Owner: void setShowLayoutBounds(boolean)>
<androidx.compose.ui.node.Owner: void onRequestMeasure(androidx.compose.ui.node.LayoutNode,boolean,boolean)>
    public static void onRequestMeasure$default(androidx.compose.ui.node.Owner, androidx.compose.ui.node.LayoutNode, boolean, boolean, int, java.lang.Object)
    {
        androidx.compose.ui.node.Owner r0;
        androidx.compose.ui.node.LayoutNode r1;
        int i0, $i1, $i2;
        java.lang.Object r2;
        java.lang.UnsupportedOperationException $r3;
        boolean z0, z1;

        r0 := @parameter0: androidx.compose.ui.node.Owner;

        r1 := @parameter1: androidx.compose.ui.node.LayoutNode;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        i0 := @parameter4: int;

        r2 := @parameter5: java.lang.Object;

        if r2 == null goto label1;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Super calls with default arguments not supported in this target, function: onRequestMeasure");

        throw $r3;

     label1:
        $i1 = i0 & 2;

        if $i1 == 0 goto label2;

        z0 = 0;

     label2:
        $i2 = i0 & 4;

        if $i2 == 0 goto label3;

        z1 = 0;

     label3:
        interfaceinvoke r0.<androidx.compose.ui.node.Owner: void onRequestMeasure(androidx.compose.ui.node.LayoutNode,boolean,boolean)>(r1, z0, z1);

        return;
    }

<androidx.compose.ui.node.Owner: void onRequestRelayout(androidx.compose.ui.node.LayoutNode,boolean,boolean)>
    public static void onRequestRelayout$default(androidx.compose.ui.node.Owner, androidx.compose.ui.node.LayoutNode, boolean, boolean, int, java.lang.Object)
    {
        androidx.compose.ui.node.Owner r0;
        androidx.compose.ui.node.LayoutNode r1;
        int i0, $i1, $i2;
        java.lang.Object r2;
        java.lang.UnsupportedOperationException $r3;
        boolean z0, z1;

        r0 := @parameter0: androidx.compose.ui.node.Owner;

        r1 := @parameter1: androidx.compose.ui.node.LayoutNode;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        i0 := @parameter4: int;

        r2 := @parameter5: java.lang.Object;

        if r2 == null goto label1;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Super calls with default arguments not supported in this target, function: onRequestRelayout");

        throw $r3;

     label1:
        $i1 = i0 & 2;

        if $i1 == 0 goto label2;

        z0 = 0;

     label2:
        $i2 = i0 & 4;

        if $i2 == 0 goto label3;

        z1 = 0;

     label3:
        interfaceinvoke r0.<androidx.compose.ui.node.Owner: void onRequestRelayout(androidx.compose.ui.node.LayoutNode,boolean,boolean)>(r1, z0, z1);

        return;
    }

<androidx.compose.ui.node.Owner: void requestOnPositionedCallback(androidx.compose.ui.node.LayoutNode)>
<androidx.compose.ui.node.Owner: void onAttach(androidx.compose.ui.node.LayoutNode)>
<androidx.compose.ui.node.Owner: void onDetach(androidx.compose.ui.node.LayoutNode)>
<androidx.compose.ui.node.Owner: long calculatePositionInWindow-MK-Hz9U(long)>
<androidx.compose.ui.node.Owner: long calculateLocalPosition-MK-Hz9U(long)>
<androidx.compose.ui.node.Owner: boolean requestFocus()>
<androidx.compose.ui.node.Owner: void measureAndLayout(boolean)>
    public static void measureAndLayout$default(androidx.compose.ui.node.Owner, boolean, int, java.lang.Object)
    {
        androidx.compose.ui.node.Owner r0;
        int i0, $i1;
        java.lang.Object r1;
        java.lang.UnsupportedOperationException $r2;
        boolean z0;

        r0 := @parameter0: androidx.compose.ui.node.Owner;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        if r1 == null goto label1;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Super calls with default arguments not supported in this target, function: measureAndLayout");

        throw $r2;

     label1:
        $i1 = i0 & 1;

        if $i1 == 0 goto label2;

        z0 = 1;

     label2:
        interfaceinvoke r0.<androidx.compose.ui.node.Owner: void measureAndLayout(boolean)>(z0);

        return;
    }

<androidx.compose.ui.node.Owner: void measureAndLayout-0kLqBqw(androidx.compose.ui.node.LayoutNode,long)>
<androidx.compose.ui.node.Owner: void forceMeasureTheSubtree(androidx.compose.ui.node.LayoutNode)>
<androidx.compose.ui.node.Owner: androidx.compose.ui.node.OwnedLayer createLayer(kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function0)>
<androidx.compose.ui.node.Owner: void onSemanticsChange()>
<androidx.compose.ui.node.Owner: void onLayoutChange(androidx.compose.ui.node.LayoutNode)>
<androidx.compose.ui.node.Owner: androidx.compose.ui.focus.FocusDirection getFocusDirection-P8AzH3I(android.view.KeyEvent)>
<androidx.compose.ui.node.Owner: long getMeasureIteration()>
<androidx.compose.ui.node.Owner: androidx.compose.ui.platform.ViewConfiguration getViewConfiguration()>
<androidx.compose.ui.node.Owner: androidx.compose.ui.node.OwnerSnapshotObserver getSnapshotObserver()>
<androidx.compose.ui.node.Owner: androidx.compose.ui.modifier.ModifierLocalManager getModifierLocalManager()>
<androidx.compose.ui.node.Owner: void registerOnEndApplyChangesListener(kotlin.jvm.functions.Function0)>
<androidx.compose.ui.node.Owner: void onEndApplyChanges()>
<androidx.compose.ui.node.Owner: void registerOnLayoutCompletedListener(androidx.compose.ui.node.Owner$OnLayoutCompletedListener)>
    static void <clinit>()
    {
        androidx.compose.ui.node.Owner$Companion $r0;

        $r0 = <androidx.compose.ui.node.Owner$Companion: androidx.compose.ui.node.Owner$Companion $$INSTANCE>;

        <androidx.compose.ui.node.Owner: androidx.compose.ui.node.Owner$Companion Companion> = $r0;

        return;
    }

androidx.compose.ui.node.Owner$Companion
<androidx.compose.ui.node.Owner$Companion: androidx.compose.ui.node.Owner$Companion $$INSTANCE>
<androidx.compose.ui.node.Owner$Companion: boolean enableExtraAssertions>
    private void <init>()
    {
        androidx.compose.ui.node.Owner$Companion r0;

        r0 := @this: androidx.compose.ui.node.Owner$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final boolean getEnableExtraAssertions()
    {
        androidx.compose.ui.node.Owner$Companion r0;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.Owner$Companion;

        $z0 = <androidx.compose.ui.node.Owner$Companion: boolean enableExtraAssertions>;

        return $z0;
    }

    public final void setEnableExtraAssertions(boolean)
    {
        androidx.compose.ui.node.Owner$Companion r0;
        boolean z0;

        r0 := @this: androidx.compose.ui.node.Owner$Companion;

        z0 := @parameter0: boolean;

        <androidx.compose.ui.node.Owner$Companion: boolean enableExtraAssertions> = z0;

        return;
    }

    static void <clinit>()
    {
        androidx.compose.ui.node.Owner$Companion $r0;

        $r0 = new androidx.compose.ui.node.Owner$Companion;

        specialinvoke $r0.<androidx.compose.ui.node.Owner$Companion: void <init>()>();

        <androidx.compose.ui.node.Owner$Companion: androidx.compose.ui.node.Owner$Companion $$INSTANCE> = $r0;

        return;
    }

androidx.compose.ui.node.Owner$OnLayoutCompletedListener
<androidx.compose.ui.node.Owner$OnLayoutCompletedListener: void onLayoutComplete()>
