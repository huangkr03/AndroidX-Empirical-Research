androidx.test.services.storage.file.HostedFile
    static volatile java.lang.Object '-$$Nest$smcheckNotNull'(java.lang.Object)
    {
        java.lang.Object $r0;

        $r0 := @parameter0: java.lang.Object;

        $r0 = staticinvoke <androidx.test.services.storage.file.HostedFile: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        return $r0;
    }

    private static java.lang.Object checkNotNull(java.lang.Object)
    {
        java.lang.Object $r0;
        java.lang.NullPointerException $r1;

        $r0 := @parameter0: java.lang.Object;

        if $r0 == null goto label1;

        return $r0;

     label1:
        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>()>();

        throw $r1;
    }

androidx.test.services.storage.file.HostedFile$FileHost
<androidx.test.services.storage.file.HostedFile$FileHost: androidx.test.services.storage.file.HostedFile$FileHost TEST_FILE>
<androidx.test.services.storage.file.HostedFile$FileHost: androidx.test.services.storage.file.HostedFile$FileHost EXPORT_PROPERTIES>
<androidx.test.services.storage.file.HostedFile$FileHost: androidx.test.services.storage.file.HostedFile$FileHost OUTPUT>
<androidx.test.services.storage.file.HostedFile$FileHost: androidx.test.services.storage.file.HostedFile$FileHost INTERNAL_USE_ONLY>
<androidx.test.services.storage.file.HostedFile$FileHost: androidx.test.services.storage.file.HostedFile$FileHost[] $VALUES>
<androidx.test.services.storage.file.HostedFile$FileHost: java.lang.String authority>
<androidx.test.services.storage.file.HostedFile$FileHost: boolean writeable>
    public static androidx.test.services.storage.file.HostedFile$FileHost valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        androidx.test.services.storage.file.HostedFile$FileHost $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroidx/test/services/storage/file/HostedFile$FileHost;", r0);

        $r2 = (androidx.test.services.storage.file.HostedFile$FileHost) $r1;

        return $r2;
    }

    public java.lang.String getAuthority()
    {
        androidx.test.services.storage.file.HostedFile$FileHost r0;
        java.lang.String $r1;

        r0 := @this: androidx.test.services.storage.file.HostedFile$FileHost;

        $r1 = r0.<androidx.test.services.storage.file.HostedFile$FileHost: java.lang.String authority>;

        return $r1;
    }

    static void <clinit>()
    {
        androidx.test.services.storage.file.HostedFile$FileHost $r0, $r1, $r2, $r3;
        androidx.test.services.storage.file.HostedFile$FileHost[] $r4;

        $r0 = new androidx.test.services.storage.file.HostedFile$FileHost;

        specialinvoke $r0.<androidx.test.services.storage.file.HostedFile$FileHost: void <init>(java.lang.String,int,java.lang.String,boolean)>("TEST_FILE", 0, "androidx.test.services.storage.runfiles", 0);

        <androidx.test.services.storage.file.HostedFile$FileHost: androidx.test.services.storage.file.HostedFile$FileHost TEST_FILE> = $r0;

        $r1 = new androidx.test.services.storage.file.HostedFile$FileHost;

        specialinvoke $r1.<androidx.test.services.storage.file.HostedFile$FileHost: void <init>(java.lang.String,int,java.lang.String,boolean)>("EXPORT_PROPERTIES", 1, "androidx.test.services.storage.properties", 1);

        <androidx.test.services.storage.file.HostedFile$FileHost: androidx.test.services.storage.file.HostedFile$FileHost EXPORT_PROPERTIES> = $r1;

        $r2 = new androidx.test.services.storage.file.HostedFile$FileHost;

        specialinvoke $r2.<androidx.test.services.storage.file.HostedFile$FileHost: void <init>(java.lang.String,int,java.lang.String,boolean)>("OUTPUT", 2, "androidx.test.services.storage.outputfiles", 1);

        <androidx.test.services.storage.file.HostedFile$FileHost: androidx.test.services.storage.file.HostedFile$FileHost OUTPUT> = $r2;

        $r3 = new androidx.test.services.storage.file.HostedFile$FileHost;

        specialinvoke $r3.<androidx.test.services.storage.file.HostedFile$FileHost: void <init>(java.lang.String,int,java.lang.String,boolean)>("INTERNAL_USE_ONLY", 3, "androidx.test.services.storage._internal_use_files", 1);

        <androidx.test.services.storage.file.HostedFile$FileHost: androidx.test.services.storage.file.HostedFile$FileHost INTERNAL_USE_ONLY> = $r3;

        $r4 = staticinvoke <androidx.test.services.storage.file.HostedFile$FileHost: androidx.test.services.storage.file.HostedFile$FileHost[] $values()>();

        <androidx.test.services.storage.file.HostedFile$FileHost: androidx.test.services.storage.file.HostedFile$FileHost[] $VALUES> = $r4;

        return;
    }

    private void <init>(java.lang.String, int, java.lang.String, boolean)
    {
        androidx.test.services.storage.file.HostedFile$FileHost r0;
        java.lang.String r1, r2, $r4;
        int i0;
        boolean z0;
        java.lang.Object $r3;

        r0 := @this: androidx.test.services.storage.file.HostedFile$FileHost;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $r3 = staticinvoke <androidx.test.services.storage.file.HostedFile: java.lang.Object '-$$Nest$smcheckNotNull'(java.lang.Object)>(r2);

        $r4 = (java.lang.String) $r3;

        r0.<androidx.test.services.storage.file.HostedFile$FileHost: java.lang.String authority> = $r4;

        r0.<androidx.test.services.storage.file.HostedFile$FileHost: boolean writeable> = z0;

        return;
    }

    public boolean isWritable()
    {
        androidx.test.services.storage.file.HostedFile$FileHost r0;
        boolean $z0;

        r0 := @this: androidx.test.services.storage.file.HostedFile$FileHost;

        $z0 = r0.<androidx.test.services.storage.file.HostedFile$FileHost: boolean writeable>;

        return $z0;
    }

    private static androidx.test.services.storage.file.HostedFile$FileHost[] $values()
    {
        androidx.test.services.storage.file.HostedFile$FileHost[] $r0;
        androidx.test.services.storage.file.HostedFile$FileHost $r1, $r2, $r3, $r4;

        $r0 = newarray (androidx.test.services.storage.file.HostedFile$FileHost)[4];

        $r1 = <androidx.test.services.storage.file.HostedFile$FileHost: androidx.test.services.storage.file.HostedFile$FileHost TEST_FILE>;

        $r0[0] = $r1;

        $r2 = <androidx.test.services.storage.file.HostedFile$FileHost: androidx.test.services.storage.file.HostedFile$FileHost EXPORT_PROPERTIES>;

        $r0[1] = $r2;

        $r3 = <androidx.test.services.storage.file.HostedFile$FileHost: androidx.test.services.storage.file.HostedFile$FileHost OUTPUT>;

        $r0[2] = $r3;

        $r4 = <androidx.test.services.storage.file.HostedFile$FileHost: androidx.test.services.storage.file.HostedFile$FileHost INTERNAL_USE_ONLY>;

        $r0[3] = $r4;

        return $r0;
    }

    public static androidx.test.services.storage.file.HostedFile$FileHost[] values()
    {
        androidx.test.services.storage.file.HostedFile$FileHost[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <androidx.test.services.storage.file.HostedFile$FileHost: androidx.test.services.storage.file.HostedFile$FileHost[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (androidx.test.services.storage.file.HostedFile$FileHost[]) $r1;

        return $r2;
    }

androidx.test.services.storage.file.HostedFile$FileType
<androidx.test.services.storage.file.HostedFile$FileType: androidx.test.services.storage.file.HostedFile$FileType[] $VALUES>
<androidx.test.services.storage.file.HostedFile$FileType: androidx.test.services.storage.file.HostedFile$FileType DIRECTORY>
<androidx.test.services.storage.file.HostedFile$FileType: androidx.test.services.storage.file.HostedFile$FileType FILE>
<androidx.test.services.storage.file.HostedFile$FileType: java.lang.String type>
    private static androidx.test.services.storage.file.HostedFile$FileType[] $values()
    {
        androidx.test.services.storage.file.HostedFile$FileType[] $r0;
        androidx.test.services.storage.file.HostedFile$FileType $r1;

        $r0 = newarray (androidx.test.services.storage.file.HostedFile$FileType)[2];

        $r1 = <androidx.test.services.storage.file.HostedFile$FileType: androidx.test.services.storage.file.HostedFile$FileType FILE>;

        $r0[0] = $r1;

        $r1 = <androidx.test.services.storage.file.HostedFile$FileType: androidx.test.services.storage.file.HostedFile$FileType DIRECTORY>;

        $r0[1] = $r1;

        return $r0;
    }

    static void <clinit>()
    {
        androidx.test.services.storage.file.HostedFile$FileType[] $r0;
        androidx.test.services.storage.file.HostedFile$FileType $r1;

        $r1 = new androidx.test.services.storage.file.HostedFile$FileType;

        specialinvoke $r1.<androidx.test.services.storage.file.HostedFile$FileType: void <init>(java.lang.String,int,java.lang.String)>("FILE", 0, "f");

        <androidx.test.services.storage.file.HostedFile$FileType: androidx.test.services.storage.file.HostedFile$FileType FILE> = $r1;

        $r1 = new androidx.test.services.storage.file.HostedFile$FileType;

        specialinvoke $r1.<androidx.test.services.storage.file.HostedFile$FileType: void <init>(java.lang.String,int,java.lang.String)>("DIRECTORY", 1, "d");

        <androidx.test.services.storage.file.HostedFile$FileType: androidx.test.services.storage.file.HostedFile$FileType DIRECTORY> = $r1;

        $r0 = staticinvoke <androidx.test.services.storage.file.HostedFile$FileType: androidx.test.services.storage.file.HostedFile$FileType[] $values()>();

        <androidx.test.services.storage.file.HostedFile$FileType: androidx.test.services.storage.file.HostedFile$FileType[] $VALUES> = $r0;

        return;
    }

    private void <init>(java.lang.String, int, java.lang.String)
    {
        androidx.test.services.storage.file.HostedFile$FileType $r0;
        int $i0;
        java.lang.String $r1, $r3;
        java.lang.Object $r2;

        $r0 := @this: androidx.test.services.storage.file.HostedFile$FileType;

        $r3 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.lang.String;

        specialinvoke $r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r3, $i0);

        $r2 = staticinvoke <androidx.test.services.storage.file.HostedFile: java.lang.Object '-$$Nest$smcheckNotNull'(java.lang.Object)>($r1);

        $r3 = (java.lang.String) $r2;

        $r0.<androidx.test.services.storage.file.HostedFile$FileType: java.lang.String type> = $r3;

        return;
    }

    public static androidx.test.services.storage.file.HostedFile$FileType[] values()
    {
        java.lang.Object $r0;
        androidx.test.services.storage.file.HostedFile$FileType[] $r1;

        $r1 = <androidx.test.services.storage.file.HostedFile$FileType: androidx.test.services.storage.file.HostedFile$FileType[] $VALUES>;

        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (androidx.test.services.storage.file.HostedFile$FileType[]) $r0;

        return $r1;
    }

    public java.lang.String getTypeCode()
    {
        androidx.test.services.storage.file.HostedFile$FileType $r0;
        java.lang.String r1;

        $r0 := @this: androidx.test.services.storage.file.HostedFile$FileType;

        r1 = $r0.<androidx.test.services.storage.file.HostedFile$FileType: java.lang.String type>;

        return r1;
    }

androidx.test.services.storage.file.HostedFile$HostedFileColumn
<androidx.test.services.storage.file.HostedFile$HostedFileColumn: androidx.test.services.storage.file.HostedFile$HostedFileColumn[] $VALUES>
<androidx.test.services.storage.file.HostedFile$HostedFileColumn: androidx.test.services.storage.file.HostedFile$HostedFileColumn DATA>
<androidx.test.services.storage.file.HostedFile$HostedFileColumn: androidx.test.services.storage.file.HostedFile$HostedFileColumn DISPLAY_NAME>
<androidx.test.services.storage.file.HostedFile$HostedFileColumn: androidx.test.services.storage.file.HostedFile$HostedFileColumn NAME>
<androidx.test.services.storage.file.HostedFile$HostedFileColumn: androidx.test.services.storage.file.HostedFile$HostedFileColumn SIZE>
<androidx.test.services.storage.file.HostedFile$HostedFileColumn: androidx.test.services.storage.file.HostedFile$HostedFileColumn SIZE_2>
<androidx.test.services.storage.file.HostedFile$HostedFileColumn: androidx.test.services.storage.file.HostedFile$HostedFileColumn TYPE>
<androidx.test.services.storage.file.HostedFile$HostedFileColumn: int androidType>
<androidx.test.services.storage.file.HostedFile$HostedFileColumn: java.lang.String columnName>
<androidx.test.services.storage.file.HostedFile$HostedFileColumn: java.lang.Class columnType>
<androidx.test.services.storage.file.HostedFile$HostedFileColumn: int position>
    private static androidx.test.services.storage.file.HostedFile$HostedFileColumn[] $values()
    {
        androidx.test.services.storage.file.HostedFile$HostedFileColumn[] $r0;
        androidx.test.services.storage.file.HostedFile$HostedFileColumn $r1;

        $r0 = newarray (androidx.test.services.storage.file.HostedFile$HostedFileColumn)[6];

        $r1 = <androidx.test.services.storage.file.HostedFile$HostedFileColumn: androidx.test.services.storage.file.HostedFile$HostedFileColumn NAME>;

        $r0[0] = $r1;

        $r1 = <androidx.test.services.storage.file.HostedFile$HostedFileColumn: androidx.test.services.storage.file.HostedFile$HostedFileColumn TYPE>;

        $r0[1] = $r1;

        $r1 = <androidx.test.services.storage.file.HostedFile$HostedFileColumn: androidx.test.services.storage.file.HostedFile$HostedFileColumn SIZE>;

        $r0[2] = $r1;

        $r1 = <androidx.test.services.storage.file.HostedFile$HostedFileColumn: androidx.test.services.storage.file.HostedFile$HostedFileColumn DATA>;

        $r0[3] = $r1;

        $r1 = <androidx.test.services.storage.file.HostedFile$HostedFileColumn: androidx.test.services.storage.file.HostedFile$HostedFileColumn DISPLAY_NAME>;

        $r0[4] = $r1;

        $r1 = <androidx.test.services.storage.file.HostedFile$HostedFileColumn: androidx.test.services.storage.file.HostedFile$HostedFileColumn SIZE_2>;

        $r0[5] = $r1;

        return $r0;
    }

    static void <clinit>()
    {
        androidx.test.services.storage.file.HostedFile$HostedFileColumn[] $r0;
        androidx.test.services.storage.file.HostedFile$HostedFileColumn $r1;

        $r1 = new androidx.test.services.storage.file.HostedFile$HostedFileColumn;

        specialinvoke $r1.<androidx.test.services.storage.file.HostedFile$HostedFileColumn: void <init>(java.lang.String,int,java.lang.String,java.lang.Class,int,int)>("NAME", 0, "name", class "Ljava/lang/String;", 3, 0);

        <androidx.test.services.storage.file.HostedFile$HostedFileColumn: androidx.test.services.storage.file.HostedFile$HostedFileColumn NAME> = $r1;

        $r1 = new androidx.test.services.storage.file.HostedFile$HostedFileColumn;

        specialinvoke $r1.<androidx.test.services.storage.file.HostedFile$HostedFileColumn: void <init>(java.lang.String,int,java.lang.String,java.lang.Class,int,int)>("TYPE", 1, "type", class "Ljava/lang/String;", 3, 1);

        <androidx.test.services.storage.file.HostedFile$HostedFileColumn: androidx.test.services.storage.file.HostedFile$HostedFileColumn TYPE> = $r1;

        $r1 = new androidx.test.services.storage.file.HostedFile$HostedFileColumn;

        specialinvoke $r1.<androidx.test.services.storage.file.HostedFile$HostedFileColumn: void <init>(java.lang.String,int,java.lang.String,java.lang.Class,int,int)>("SIZE", 2, "size", class "Ljava/lang/Long;", 1, 2);

        <androidx.test.services.storage.file.HostedFile$HostedFileColumn: androidx.test.services.storage.file.HostedFile$HostedFileColumn SIZE> = $r1;

        $r1 = new androidx.test.services.storage.file.HostedFile$HostedFileColumn;

        specialinvoke $r1.<androidx.test.services.storage.file.HostedFile$HostedFileColumn: void <init>(java.lang.String,int,java.lang.String,java.lang.Class,int,int)>("DATA", 3, "_data", class "[Ljava/lang/Byte;", 4, 3);

        <androidx.test.services.storage.file.HostedFile$HostedFileColumn: androidx.test.services.storage.file.HostedFile$HostedFileColumn DATA> = $r1;

        $r1 = new androidx.test.services.storage.file.HostedFile$HostedFileColumn;

        specialinvoke $r1.<androidx.test.services.storage.file.HostedFile$HostedFileColumn: void <init>(java.lang.String,int,java.lang.String,java.lang.Class,int,int)>("DISPLAY_NAME", 4, "_display_name", class "Ljava/lang/String;", 3, 4);

        <androidx.test.services.storage.file.HostedFile$HostedFileColumn: androidx.test.services.storage.file.HostedFile$HostedFileColumn DISPLAY_NAME> = $r1;

        $r1 = new androidx.test.services.storage.file.HostedFile$HostedFileColumn;

        specialinvoke $r1.<androidx.test.services.storage.file.HostedFile$HostedFileColumn: void <init>(java.lang.String,int,java.lang.String,java.lang.Class,int,int)>("SIZE_2", 5, "_size", class "Ljava/lang/Long;", 2, 5);

        <androidx.test.services.storage.file.HostedFile$HostedFileColumn: androidx.test.services.storage.file.HostedFile$HostedFileColumn SIZE_2> = $r1;

        $r0 = staticinvoke <androidx.test.services.storage.file.HostedFile$HostedFileColumn: androidx.test.services.storage.file.HostedFile$HostedFileColumn[] $values()>();

        <androidx.test.services.storage.file.HostedFile$HostedFileColumn: androidx.test.services.storage.file.HostedFile$HostedFileColumn[] $VALUES> = $r0;

        return;
    }

    private void <init>(java.lang.String, int, java.lang.String, java.lang.Class, int, int)
    {
        androidx.test.services.storage.file.HostedFile$HostedFileColumn $r0;
        int $i0, $i1, $i2;
        java.lang.String $r1, $r3;
        java.lang.Class $r2;
        java.lang.Object $r4;

        $r0 := @this: androidx.test.services.storage.file.HostedFile$HostedFileColumn;

        $r3 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.lang.String;

        $r2 := @parameter3: java.lang.Class;

        $i1 := @parameter4: int;

        $i2 := @parameter5: int;

        specialinvoke $r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r3, $i0);

        $r4 = staticinvoke <androidx.test.services.storage.file.HostedFile: java.lang.Object '-$$Nest$smcheckNotNull'(java.lang.Object)>($r1);

        $r3 = (java.lang.String) $r4;

        $r0.<androidx.test.services.storage.file.HostedFile$HostedFileColumn: java.lang.String columnName> = $r3;

        $r4 = staticinvoke <androidx.test.services.storage.file.HostedFile: java.lang.Object '-$$Nest$smcheckNotNull'(java.lang.Object)>($r2);

        $r2 = (java.lang.Class) $r4;

        $r0.<androidx.test.services.storage.file.HostedFile$HostedFileColumn: java.lang.Class columnType> = $r2;

        $r0.<androidx.test.services.storage.file.HostedFile$HostedFileColumn: int androidType> = $i1;

        $r0.<androidx.test.services.storage.file.HostedFile$HostedFileColumn: int position> = $i2;

        return;
    }

    public static java.lang.String[] getColumnNames()
    {
        int $i0, $i1;
        java.lang.String[] $r0;
        androidx.test.services.storage.file.HostedFile$HostedFileColumn[] $r1;
        androidx.test.services.storage.file.HostedFile$HostedFileColumn $r2;
        java.lang.String $r3;

        $r1 = staticinvoke <androidx.test.services.storage.file.HostedFile$HostedFileColumn: androidx.test.services.storage.file.HostedFile$HostedFileColumn[] values()>();

        $i0 = lengthof $r1;

        $r0 = newarray (java.lang.String)[$i0];

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r2 = $r1[$i1];

        $r3 = virtualinvoke $r2.<androidx.test.services.storage.file.HostedFile$HostedFileColumn: java.lang.String getColumnName()>();

        $r0[$i1] = $r3;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $r0;
    }

    public static androidx.test.services.storage.file.HostedFile$HostedFileColumn[] values()
    {
        java.lang.Object $r0;
        androidx.test.services.storage.file.HostedFile$HostedFileColumn[] $r1;

        $r1 = <androidx.test.services.storage.file.HostedFile$HostedFileColumn: androidx.test.services.storage.file.HostedFile$HostedFileColumn[] $VALUES>;

        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (androidx.test.services.storage.file.HostedFile$HostedFileColumn[]) $r0;

        return $r1;
    }

    public java.lang.String getColumnName()
    {
        androidx.test.services.storage.file.HostedFile$HostedFileColumn $r0;
        java.lang.String r1;

        $r0 := @this: androidx.test.services.storage.file.HostedFile$HostedFileColumn;

        r1 = $r0.<androidx.test.services.storage.file.HostedFile$HostedFileColumn: java.lang.String columnName>;

        return r1;
    }

