androidx.compose.ui.platform.RenderNodeLayer
<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.RenderNodeLayer$Companion Companion>
<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.AndroidComposeView ownerView>
<androidx.compose.ui.platform.RenderNodeLayer: kotlin.jvm.functions.Function1 drawBlock>
<androidx.compose.ui.platform.RenderNodeLayer: kotlin.jvm.functions.Function0 invalidateParentLayer>
<androidx.compose.ui.platform.RenderNodeLayer: boolean isDirty>
<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.OutlineResolver outlineResolver>
<androidx.compose.ui.platform.RenderNodeLayer: boolean isDestroyed>
<androidx.compose.ui.platform.RenderNodeLayer: boolean drawnWithZ>
<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.graphics.Paint softwareLayerPaint>
<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.LayerMatrixCache matrixCache>
<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.graphics.CanvasHolder canvasHolder>
<androidx.compose.ui.platform.RenderNodeLayer: long transformOrigin>
<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>
<androidx.compose.ui.platform.RenderNodeLayer: kotlin.jvm.functions.Function2 getMatrix>
    public void <init>(androidx.compose.ui.platform.AndroidComposeView, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function0)
    {
        androidx.compose.ui.platform.RenderNodeLayer r0, r5;
        androidx.compose.ui.platform.AndroidComposeView r1, $r7, $r14, $r16;
        kotlin.jvm.functions.Function1 r2;
        kotlin.jvm.functions.Function0 r3;
        androidx.compose.ui.platform.DeviceRenderNode r4, $r18;
        androidx.compose.ui.platform.OutlineResolver $r6;
        androidx.compose.ui.unit.Density $r8;
        androidx.compose.ui.platform.LayerMatrixCache $r9;
        kotlin.jvm.functions.Function2 $r10;
        androidx.compose.ui.graphics.CanvasHolder $r11;
        androidx.compose.ui.graphics.TransformOrigin$Companion $r12;
        long $l0;
        int $i1;
        androidx.compose.ui.platform.RenderNodeApi23 $r13;
        androidx.compose.ui.platform.RenderNodeApi29 $r15;

        r0 := @this: androidx.compose.ui.platform.RenderNodeLayer;

        r1 := @parameter0: androidx.compose.ui.platform.AndroidComposeView;

        r2 := @parameter1: kotlin.jvm.functions.Function1;

        r3 := @parameter2: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "ownerView");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "drawBlock");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "invalidateParentLayer");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.AndroidComposeView ownerView> = r1;

        r0.<androidx.compose.ui.platform.RenderNodeLayer: kotlin.jvm.functions.Function1 drawBlock> = r2;

        r0.<androidx.compose.ui.platform.RenderNodeLayer: kotlin.jvm.functions.Function0 invalidateParentLayer> = r3;

        $r6 = new androidx.compose.ui.platform.OutlineResolver;

        $r7 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.AndroidComposeView ownerView>;

        $r8 = virtualinvoke $r7.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.unit.Density getDensity()>();

        specialinvoke $r6.<androidx.compose.ui.platform.OutlineResolver: void <init>(androidx.compose.ui.unit.Density)>($r8);

        r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.OutlineResolver outlineResolver> = $r6;

        $r9 = new androidx.compose.ui.platform.LayerMatrixCache;

        $r10 = <androidx.compose.ui.platform.RenderNodeLayer: kotlin.jvm.functions.Function2 getMatrix>;

        specialinvoke $r9.<androidx.compose.ui.platform.LayerMatrixCache: void <init>(kotlin.jvm.functions.Function2)>($r10);

        r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.LayerMatrixCache matrixCache> = $r9;

        $r11 = new androidx.compose.ui.graphics.CanvasHolder;

        specialinvoke $r11.<androidx.compose.ui.graphics.CanvasHolder: void <init>()>();

        r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.graphics.CanvasHolder canvasHolder> = $r11;

        $r12 = <androidx.compose.ui.graphics.TransformOrigin: androidx.compose.ui.graphics.TransformOrigin$Companion Companion>;

        $l0 = virtualinvoke $r12.<androidx.compose.ui.graphics.TransformOrigin$Companion: long getCenter-SzJe1aQ()>();

        r0.<androidx.compose.ui.platform.RenderNodeLayer: long transformOrigin> = $l0;

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 < 29 goto label1;

        $r15 = new androidx.compose.ui.platform.RenderNodeApi29;

        $r16 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.AndroidComposeView ownerView>;

        specialinvoke $r15.<androidx.compose.ui.platform.RenderNodeApi29: void <init>(androidx.compose.ui.platform.AndroidComposeView)>($r16);

        $r18 = (androidx.compose.ui.platform.DeviceRenderNode) $r15;

        goto label2;

     label1:
        $r13 = new androidx.compose.ui.platform.RenderNodeApi23;

        $r14 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.AndroidComposeView ownerView>;

        specialinvoke $r13.<androidx.compose.ui.platform.RenderNodeApi23: void <init>(androidx.compose.ui.platform.AndroidComposeView)>($r14);

        $r18 = (androidx.compose.ui.platform.DeviceRenderNode) $r13;

     label2:
        r4 = $r18;

        r5 = r0;

        interfaceinvoke r4.<androidx.compose.ui.platform.DeviceRenderNode: boolean setHasOverlappingRendering(boolean)>(1);

        r5.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode> = r4;

        return;
    }

    public final androidx.compose.ui.platform.AndroidComposeView getOwnerView()
    {
        androidx.compose.ui.platform.RenderNodeLayer r0;
        androidx.compose.ui.platform.AndroidComposeView $r1;

        r0 := @this: androidx.compose.ui.platform.RenderNodeLayer;

        $r1 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.AndroidComposeView ownerView>;

        return $r1;
    }

    private final void setDirty(boolean)
    {
        androidx.compose.ui.platform.RenderNodeLayer r0;
        boolean z0, $z1;
        androidx.compose.ui.node.OwnedLayer $r1;
        androidx.compose.ui.platform.AndroidComposeView $r2;

        r0 := @this: androidx.compose.ui.platform.RenderNodeLayer;

        z0 := @parameter0: boolean;

        $z1 = r0.<androidx.compose.ui.platform.RenderNodeLayer: boolean isDirty>;

        if z0 == $z1 goto label1;

        r0.<androidx.compose.ui.platform.RenderNodeLayer: boolean isDirty> = z0;

        $r2 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.AndroidComposeView ownerView>;

        $r1 = (androidx.compose.ui.node.OwnedLayer) r0;

        virtualinvoke $r2.<androidx.compose.ui.platform.AndroidComposeView: void notifyLayerIsDirty$ui_release(androidx.compose.ui.node.OwnedLayer,boolean)>($r1, z0);

     label1:
        return;
    }

    public long getLayerId()
    {
        androidx.compose.ui.platform.RenderNodeLayer r0;
        androidx.compose.ui.platform.DeviceRenderNode $r1;
        long $l0;

        r0 := @this: androidx.compose.ui.platform.RenderNodeLayer;

        $r1 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        $l0 = interfaceinvoke $r1.<androidx.compose.ui.platform.DeviceRenderNode: long getUniqueId()>();

        return $l0;
    }

    public long getOwnerViewId()
    {
        androidx.compose.ui.platform.RenderNodeLayer r0;
        int $i0;
        androidx.compose.ui.platform.AndroidComposeView $r1;
        android.view.View $r2;
        long $l1;

        r0 := @this: androidx.compose.ui.platform.RenderNodeLayer;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 29 goto label1;

        $r1 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.AndroidComposeView ownerView>;

        $r2 = (android.view.View) $r1;

        $l1 = staticinvoke <androidx.compose.ui.platform.RenderNodeLayer$UniqueDrawingIdApi29: long getUniqueDrawingId(android.view.View)>($r2);

        goto label2;

     label1:
        $l1 = -1L;

     label2:
        return $l1;
    }

    public void updateLayerProperties-NHXXZp8(float, float, float, float, float, float, float, float, float, float, long, androidx.compose.ui.graphics.Shape, boolean, androidx.compose.ui.graphics.RenderEffect, long, long, androidx.compose.ui.unit.LayoutDirection, androidx.compose.ui.unit.Density)
    {
        androidx.compose.ui.platform.RenderNodeLayer r0;
        float f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18;
        long l0, l1, l2;
        androidx.compose.ui.graphics.Shape r1, $r10, $r11;
        boolean z0, z1, z2, z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        androidx.compose.ui.graphics.RenderEffect r2;
        androidx.compose.ui.unit.LayoutDirection r3;
        androidx.compose.ui.unit.Density r4;
        androidx.compose.ui.platform.DeviceRenderNode $r5, $r6, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r33, $r34, $r35, $r36, $r39;
        byte $b3;
        kotlin.jvm.functions.Function0 $r7;
        androidx.compose.ui.platform.OutlineResolver $r9, $r12, $r32, $r37;
        int $i4, $i5, $i6, $i7;
        android.graphics.Outline $r38;
        androidx.compose.ui.platform.LayerMatrixCache $r40;

        r0 := @this: androidx.compose.ui.platform.RenderNodeLayer;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        f4 := @parameter4: float;

        f5 := @parameter5: float;

        f6 := @parameter6: float;

        f7 := @parameter7: float;

        f8 := @parameter8: float;

        f9 := @parameter9: float;

        l0 := @parameter10: long;

        r1 := @parameter11: androidx.compose.ui.graphics.Shape;

        z0 := @parameter12: boolean;

        r2 := @parameter13: androidx.compose.ui.graphics.RenderEffect;

        l1 := @parameter14: long;

        l2 := @parameter15: long;

        r3 := @parameter16: androidx.compose.ui.unit.LayoutDirection;

        r4 := @parameter17: androidx.compose.ui.unit.Density;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "shape");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "layoutDirection");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "density");

        r0.<androidx.compose.ui.platform.RenderNodeLayer: long transformOrigin> = l0;

        $r5 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        $z4 = interfaceinvoke $r5.<androidx.compose.ui.platform.DeviceRenderNode: boolean getClipToOutline()>();

        if $z4 == 0 goto label01;

        $r12 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.OutlineResolver outlineResolver>;

        $z6 = virtualinvoke $r12.<androidx.compose.ui.platform.OutlineResolver: boolean getOutlineClipSupported()>();

        if $z6 != 0 goto label01;

        $z7 = 1;

        goto label02;

     label01:
        $z7 = 0;

     label02:
        z1 = $z7;

        $r13 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        interfaceinvoke $r13.<androidx.compose.ui.platform.DeviceRenderNode: void setScaleX(float)>(f0);

        $r14 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        interfaceinvoke $r14.<androidx.compose.ui.platform.DeviceRenderNode: void setScaleY(float)>(f1);

        $r15 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        interfaceinvoke $r15.<androidx.compose.ui.platform.DeviceRenderNode: void setAlpha(float)>(f2);

        $r16 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        interfaceinvoke $r16.<androidx.compose.ui.platform.DeviceRenderNode: void setTranslationX(float)>(f3);

        $r17 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        interfaceinvoke $r17.<androidx.compose.ui.platform.DeviceRenderNode: void setTranslationY(float)>(f4);

        $r18 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        interfaceinvoke $r18.<androidx.compose.ui.platform.DeviceRenderNode: void setElevation(float)>(f5);

        $r19 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        $i4 = staticinvoke <androidx.compose.ui.graphics.ColorKt: int toArgb-8_81llA(long)>(l1);

        interfaceinvoke $r19.<androidx.compose.ui.platform.DeviceRenderNode: void setAmbientShadowColor(int)>($i4);

        $r20 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        $i5 = staticinvoke <androidx.compose.ui.graphics.ColorKt: int toArgb-8_81llA(long)>(l2);

        interfaceinvoke $r20.<androidx.compose.ui.platform.DeviceRenderNode: void setSpotShadowColor(int)>($i5);

        $r21 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        interfaceinvoke $r21.<androidx.compose.ui.platform.DeviceRenderNode: void setRotationZ(float)>(f8);

        $r22 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        interfaceinvoke $r22.<androidx.compose.ui.platform.DeviceRenderNode: void setRotationX(float)>(f6);

        $r23 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        interfaceinvoke $r23.<androidx.compose.ui.platform.DeviceRenderNode: void setRotationY(float)>(f7);

        $r24 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        interfaceinvoke $r24.<androidx.compose.ui.platform.DeviceRenderNode: void setCameraDistance(float)>(f9);

        $r25 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        $f11 = staticinvoke <androidx.compose.ui.graphics.TransformOrigin: float getPivotFractionX-impl(long)>(l0);

        $r26 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        $i6 = interfaceinvoke $r26.<androidx.compose.ui.platform.DeviceRenderNode: int getWidth()>();

        $f12 = (float) $i6;

        $f13 = $f11 * $f12;

        interfaceinvoke $r25.<androidx.compose.ui.platform.DeviceRenderNode: void setPivotX(float)>($f13);

        $r27 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        $f14 = staticinvoke <androidx.compose.ui.graphics.TransformOrigin: float getPivotFractionY-impl(long)>(l0);

        $r28 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        $i7 = interfaceinvoke $r28.<androidx.compose.ui.platform.DeviceRenderNode: int getHeight()>();

        $f15 = (float) $i7;

        $f16 = $f14 * $f15;

        interfaceinvoke $r27.<androidx.compose.ui.platform.DeviceRenderNode: void setPivotY(float)>($f16);

        $r29 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        if z0 == 0 goto label03;

        $r11 = staticinvoke <androidx.compose.ui.graphics.RectangleShapeKt: androidx.compose.ui.graphics.Shape getRectangleShape()>();

        if r1 == $r11 goto label03;

        $z8 = 1;

        goto label04;

     label03:
        $z8 = 0;

     label04:
        interfaceinvoke $r29.<androidx.compose.ui.platform.DeviceRenderNode: void setClipToOutline(boolean)>($z8);

        $r30 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        if z0 == 0 goto label05;

        $r10 = staticinvoke <androidx.compose.ui.graphics.RectangleShapeKt: androidx.compose.ui.graphics.Shape getRectangleShape()>();

        if r1 != $r10 goto label05;

        $z9 = 1;

        goto label06;

     label05:
        $z9 = 0;

     label06:
        interfaceinvoke $r30.<androidx.compose.ui.platform.DeviceRenderNode: void setClipToBounds(boolean)>($z9);

        $r31 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        interfaceinvoke $r31.<androidx.compose.ui.platform.DeviceRenderNode: void setRenderEffect(androidx.compose.ui.graphics.RenderEffect)>(r2);

        $r32 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.OutlineResolver outlineResolver>;

        $r33 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        $f17 = interfaceinvoke $r33.<androidx.compose.ui.platform.DeviceRenderNode: float getAlpha()>();

        $r34 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        $z10 = interfaceinvoke $r34.<androidx.compose.ui.platform.DeviceRenderNode: boolean getClipToOutline()>();

        $r35 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        $f18 = interfaceinvoke $r35.<androidx.compose.ui.platform.DeviceRenderNode: float getElevation()>();

        z2 = virtualinvoke $r32.<androidx.compose.ui.platform.OutlineResolver: boolean update(androidx.compose.ui.graphics.Shape,float,boolean,float,androidx.compose.ui.unit.LayoutDirection,androidx.compose.ui.unit.Density)>(r1, $f17, $z10, $f18, r3, r4);

        $r36 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        $r37 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.OutlineResolver outlineResolver>;

        $r38 = virtualinvoke $r37.<androidx.compose.ui.platform.OutlineResolver: android.graphics.Outline getOutline()>();

        interfaceinvoke $r36.<androidx.compose.ui.platform.DeviceRenderNode: void setOutline(android.graphics.Outline)>($r38);

        $r39 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        $z11 = interfaceinvoke $r39.<androidx.compose.ui.platform.DeviceRenderNode: boolean getClipToOutline()>();

        if $z11 == 0 goto label07;

        $r9 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.OutlineResolver outlineResolver>;

        $z5 = virtualinvoke $r9.<androidx.compose.ui.platform.OutlineResolver: boolean getOutlineClipSupported()>();

        if $z5 != 0 goto label07;

        $z12 = 1;

        goto label08;

     label07:
        $z12 = 0;

     label08:
        z3 = $z12;

        if z1 != z3 goto label09;

        if z3 == 0 goto label10;

        if z2 == 0 goto label10;

     label09:
        virtualinvoke r0.<androidx.compose.ui.platform.RenderNodeLayer: void invalidate()>();

        goto label11;

     label10:
        specialinvoke r0.<androidx.compose.ui.platform.RenderNodeLayer: void triggerRepaint()>();

     label11:
        $z13 = r0.<androidx.compose.ui.platform.RenderNodeLayer: boolean drawnWithZ>;

        if $z13 != 0 goto label12;

        $r6 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        $f10 = interfaceinvoke $r6.<androidx.compose.ui.platform.DeviceRenderNode: float getElevation()>();

        $b3 = $f10 cmpl 0.0F;

        if $b3 <= 0 goto label12;

        $r7 = r0.<androidx.compose.ui.platform.RenderNodeLayer: kotlin.jvm.functions.Function0 invalidateParentLayer>;

        if $r7 == null goto label12;

        interfaceinvoke $r7.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        goto label12;

     label12:
        $r40 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.LayerMatrixCache matrixCache>;

        virtualinvoke $r40.<androidx.compose.ui.platform.LayerMatrixCache: void invalidate()>();

        return;
    }

    public boolean isInLayer-k-4lQ0M(long)
    {
        androidx.compose.ui.platform.RenderNodeLayer r0;
        long l0;
        float f0, f1, $f2, $f3;
        androidx.compose.ui.platform.DeviceRenderNode $r1, $r2, $r4, $r5;
        boolean $z0, $z1, $z2, $z3;
        androidx.compose.ui.platform.OutlineResolver $r3;
        byte $b1, $b3, $b4, $b6;
        int $i2, $i5;

        r0 := @this: androidx.compose.ui.platform.RenderNodeLayer;

        l0 := @parameter0: long;

        f0 = staticinvoke <androidx.compose.ui.geometry.Offset: float getX-impl(long)>(l0);

        f1 = staticinvoke <androidx.compose.ui.geometry.Offset: float getY-impl(long)>(l0);

        $r1 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        $z0 = interfaceinvoke $r1.<androidx.compose.ui.platform.DeviceRenderNode: boolean getClipToBounds()>();

        if $z0 == 0 goto label3;

        $b1 = 0.0F cmpg f0;

        if $b1 > 0 goto label1;

        $r4 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        $i2 = interfaceinvoke $r4.<androidx.compose.ui.platform.DeviceRenderNode: int getWidth()>();

        $f2 = (float) $i2;

        $b3 = f0 cmpg $f2;

        if $b3 >= 0 goto label1;

        $b4 = 0.0F cmpg f1;

        if $b4 > 0 goto label1;

        $r5 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        $i5 = interfaceinvoke $r5.<androidx.compose.ui.platform.DeviceRenderNode: int getHeight()>();

        $f3 = (float) $i5;

        $b6 = f1 cmpg $f3;

        if $b6 >= 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;

     label3:
        $r2 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        $z1 = interfaceinvoke $r2.<androidx.compose.ui.platform.DeviceRenderNode: boolean getClipToOutline()>();

        if $z1 == 0 goto label4;

        $r3 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.OutlineResolver outlineResolver>;

        $z2 = virtualinvoke $r3.<androidx.compose.ui.platform.OutlineResolver: boolean isInOutline-k-4lQ0M(long)>(l0);

        return $z2;

     label4:
        return 1;
    }

    public void resize-ozmzZPI(long)
    {
        androidx.compose.ui.platform.RenderNodeLayer r0;
        long l0, $l3, $l4, $l11;
        int i1, i2, $i5, $i6, $i7, $i8, $i9, $i10;
        androidx.compose.ui.platform.DeviceRenderNode $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r10;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        boolean $z0;
        androidx.compose.ui.platform.OutlineResolver $r8, $r9;
        android.graphics.Outline $r11;
        androidx.compose.ui.platform.LayerMatrixCache $r12;

        r0 := @this: androidx.compose.ui.platform.RenderNodeLayer;

        l0 := @parameter0: long;

        i1 = staticinvoke <androidx.compose.ui.unit.IntSize: int getWidth-impl(long)>(l0);

        i2 = staticinvoke <androidx.compose.ui.unit.IntSize: int getHeight-impl(long)>(l0);

        $r1 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        $l3 = r0.<androidx.compose.ui.platform.RenderNodeLayer: long transformOrigin>;

        $f0 = staticinvoke <androidx.compose.ui.graphics.TransformOrigin: float getPivotFractionX-impl(long)>($l3);

        $f1 = (float) i1;

        $f2 = $f0 * $f1;

        interfaceinvoke $r1.<androidx.compose.ui.platform.DeviceRenderNode: void setPivotX(float)>($f2);

        $r2 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        $l4 = r0.<androidx.compose.ui.platform.RenderNodeLayer: long transformOrigin>;

        $f3 = staticinvoke <androidx.compose.ui.graphics.TransformOrigin: float getPivotFractionY-impl(long)>($l4);

        $f4 = (float) i2;

        $f5 = $f3 * $f4;

        interfaceinvoke $r2.<androidx.compose.ui.platform.DeviceRenderNode: void setPivotY(float)>($f5);

        $r4 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        $r3 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        $i5 = interfaceinvoke $r3.<androidx.compose.ui.platform.DeviceRenderNode: int getLeft()>();

        $r5 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        $i6 = interfaceinvoke $r5.<androidx.compose.ui.platform.DeviceRenderNode: int getTop()>();

        $r6 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        $i7 = interfaceinvoke $r6.<androidx.compose.ui.platform.DeviceRenderNode: int getLeft()>();

        $i8 = $i7 + i1;

        $r7 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        $i9 = interfaceinvoke $r7.<androidx.compose.ui.platform.DeviceRenderNode: int getTop()>();

        $i10 = $i9 + i2;

        $z0 = interfaceinvoke $r4.<androidx.compose.ui.platform.DeviceRenderNode: boolean setPosition(int,int,int,int)>($i5, $i6, $i8, $i10);

        if $z0 == 0 goto label1;

        $r8 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.OutlineResolver outlineResolver>;

        $f7 = (float) i1;

        $f6 = (float) i2;

        $l11 = staticinvoke <androidx.compose.ui.geometry.SizeKt: long Size(float,float)>($f7, $f6);

        virtualinvoke $r8.<androidx.compose.ui.platform.OutlineResolver: void update-uvyYCjk(long)>($l11);

        $r10 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        $r9 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.OutlineResolver outlineResolver>;

        $r11 = virtualinvoke $r9.<androidx.compose.ui.platform.OutlineResolver: android.graphics.Outline getOutline()>();

        interfaceinvoke $r10.<androidx.compose.ui.platform.DeviceRenderNode: void setOutline(android.graphics.Outline)>($r11);

        virtualinvoke r0.<androidx.compose.ui.platform.RenderNodeLayer: void invalidate()>();

        $r12 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.LayerMatrixCache matrixCache>;

        virtualinvoke $r12.<androidx.compose.ui.platform.LayerMatrixCache: void invalidate()>();

     label1:
        return;
    }

    public void move--gyyYBs(long)
    {
        androidx.compose.ui.platform.RenderNodeLayer r0;
        long l0;
        int i1, i2, i3, i4, $i5, $i6;
        androidx.compose.ui.platform.DeviceRenderNode $r1, $r2, $r3, $r4;
        androidx.compose.ui.platform.LayerMatrixCache $r5;

        r0 := @this: androidx.compose.ui.platform.RenderNodeLayer;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        i1 = interfaceinvoke $r1.<androidx.compose.ui.platform.DeviceRenderNode: int getLeft()>();

        $r2 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        i2 = interfaceinvoke $r2.<androidx.compose.ui.platform.DeviceRenderNode: int getTop()>();

        i3 = staticinvoke <androidx.compose.ui.unit.IntOffset: int getX-impl(long)>(l0);

        i4 = staticinvoke <androidx.compose.ui.unit.IntOffset: int getY-impl(long)>(l0);

        if i1 != i3 goto label1;

        if i2 == i4 goto label2;

     label1:
        $r3 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        $i5 = i3 - i1;

        interfaceinvoke $r3.<androidx.compose.ui.platform.DeviceRenderNode: void offsetLeftAndRight(int)>($i5);

        $r4 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        $i6 = i4 - i2;

        interfaceinvoke $r4.<androidx.compose.ui.platform.DeviceRenderNode: void offsetTopAndBottom(int)>($i6);

        specialinvoke r0.<androidx.compose.ui.platform.RenderNodeLayer: void triggerRepaint()>();

        $r5 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.LayerMatrixCache matrixCache>;

        virtualinvoke $r5.<androidx.compose.ui.platform.LayerMatrixCache: void invalidate()>();

     label2:
        return;
    }

    public void invalidate()
    {
        androidx.compose.ui.platform.RenderNodeLayer r0;
        boolean $z0, $z1;
        androidx.compose.ui.platform.AndroidComposeView $r1;

        r0 := @this: androidx.compose.ui.platform.RenderNodeLayer;

        $z0 = r0.<androidx.compose.ui.platform.RenderNodeLayer: boolean isDirty>;

        if $z0 != 0 goto label1;

        $z1 = r0.<androidx.compose.ui.platform.RenderNodeLayer: boolean isDestroyed>;

        if $z1 != 0 goto label1;

        $r1 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.AndroidComposeView ownerView>;

        virtualinvoke $r1.<androidx.compose.ui.platform.AndroidComposeView: void invalidate()>();

        specialinvoke r0.<androidx.compose.ui.platform.RenderNodeLayer: void setDirty(boolean)>(1);

     label1:
        return;
    }

    private final void triggerRepaint()
    {
        androidx.compose.ui.platform.RenderNodeLayer r0;
        int $i0;
        androidx.compose.ui.platform.AndroidComposeView $r1, $r2;
        androidx.compose.ui.platform.WrapperRenderNodeLayerHelperMethods $r3;

        r0 := @this: androidx.compose.ui.platform.RenderNodeLayer;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 26 goto label1;

        $r3 = <androidx.compose.ui.platform.WrapperRenderNodeLayerHelperMethods: androidx.compose.ui.platform.WrapperRenderNodeLayerHelperMethods INSTANCE>;

        $r2 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.AndroidComposeView ownerView>;

        virtualinvoke $r3.<androidx.compose.ui.platform.WrapperRenderNodeLayerHelperMethods: void onDescendantInvalidated(androidx.compose.ui.platform.AndroidComposeView)>($r2);

        goto label2;

     label1:
        $r1 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.AndroidComposeView ownerView>;

        virtualinvoke $r1.<androidx.compose.ui.platform.AndroidComposeView: void invalidate()>();

     label2:
        return;
    }

    public void drawLayer(androidx.compose.ui.graphics.Canvas)
    {
        androidx.compose.ui.platform.RenderNodeLayer r0;
        androidx.compose.ui.graphics.Canvas r1;
        android.graphics.Canvas r2;
        float f0, f1, f2, f3, $f4, $f5, $f6;
        androidx.compose.ui.graphics.Paint r3, r4, $r20, $r21, r22;
        boolean $z1, $z2, $z3, $z4, z5;
        androidx.compose.ui.platform.DeviceRenderNode $r5, $r6, $r7, $r8, $r9, $r10, $r15, $r17, $r18;
        int $i0, $i1, $i2, $i3;
        byte $b4, $b6;
        androidx.compose.ui.platform.LayerMatrixCache $r11;
        float[] $r12;
        kotlin.jvm.functions.Function1 $r13;
        android.graphics.Paint $r16;

        r0 := @this: androidx.compose.ui.platform.RenderNodeLayer;

        r1 := @parameter0: androidx.compose.ui.graphics.Canvas;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "canvas");

        r2 = staticinvoke <androidx.compose.ui.graphics.AndroidCanvas_androidKt: android.graphics.Canvas getNativeCanvas(androidx.compose.ui.graphics.Canvas)>(r1);

        $z1 = virtualinvoke r2.<android.graphics.Canvas: boolean isHardwareAccelerated()>();

        if $z1 == 0 goto label4;

        virtualinvoke r0.<androidx.compose.ui.platform.RenderNodeLayer: void updateDisplayList()>();

        $r17 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        $f6 = interfaceinvoke $r17.<androidx.compose.ui.platform.DeviceRenderNode: float getElevation()>();

        $b6 = $f6 cmpl 0.0F;

        if $b6 <= 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        r0.<androidx.compose.ui.platform.RenderNodeLayer: boolean drawnWithZ> = $z4;

        $z2 = r0.<androidx.compose.ui.platform.RenderNodeLayer: boolean drawnWithZ>;

        if $z2 == 0 goto label3;

        interfaceinvoke r1.<androidx.compose.ui.graphics.Canvas: void enableZ()>();

     label3:
        $r18 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        interfaceinvoke $r18.<androidx.compose.ui.platform.DeviceRenderNode: void drawInto(android.graphics.Canvas)>(r2);

        $z3 = r0.<androidx.compose.ui.platform.RenderNodeLayer: boolean drawnWithZ>;

        if $z3 == 0 goto label9;

        interfaceinvoke r1.<androidx.compose.ui.graphics.Canvas: void disableZ()>();

        goto label9;

     label4:
        $r5 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        $i0 = interfaceinvoke $r5.<androidx.compose.ui.platform.DeviceRenderNode: int getLeft()>();

        f0 = (float) $i0;

        $r6 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        $i1 = interfaceinvoke $r6.<androidx.compose.ui.platform.DeviceRenderNode: int getTop()>();

        f1 = (float) $i1;

        $r7 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        $i2 = interfaceinvoke $r7.<androidx.compose.ui.platform.DeviceRenderNode: int getRight()>();

        f2 = (float) $i2;

        $r8 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        $i3 = interfaceinvoke $r8.<androidx.compose.ui.platform.DeviceRenderNode: int getBottom()>();

        f3 = (float) $i3;

        $r9 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        $f4 = interfaceinvoke $r9.<androidx.compose.ui.platform.DeviceRenderNode: float getAlpha()>();

        $b4 = $f4 cmpg 1.0F;

        if $b4 >= 0 goto label6;

        $r20 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.graphics.Paint softwareLayerPaint>;

        if $r20 != null goto label5;

        $r21 = staticinvoke <androidx.compose.ui.graphics.AndroidPaint_androidKt: androidx.compose.ui.graphics.Paint Paint()>();

        r22 = $r21;

        r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.graphics.Paint softwareLayerPaint> = r22;

        $r20 = $r21;

     label5:
        r4 = $r20;

        z5 = 0;

        $r15 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        $f5 = interfaceinvoke $r15.<androidx.compose.ui.platform.DeviceRenderNode: float getAlpha()>();

        interfaceinvoke r4.<androidx.compose.ui.graphics.Paint: void setAlpha(float)>($f5);

        r3 = r4;

        $r16 = interfaceinvoke r3.<androidx.compose.ui.graphics.Paint: android.graphics.Paint asFrameworkPaint()>();

        virtualinvoke r2.<android.graphics.Canvas: int saveLayer(float,float,float,float,android.graphics.Paint)>(f0, f1, f2, f3, $r16);

        goto label7;

     label6:
        interfaceinvoke r1.<androidx.compose.ui.graphics.Canvas: void save()>();

     label7:
        interfaceinvoke r1.<androidx.compose.ui.graphics.Canvas: void translate(float,float)>(f0, f1);

        $r11 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.LayerMatrixCache matrixCache>;

        $r10 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        $r12 = virtualinvoke $r11.<androidx.compose.ui.platform.LayerMatrixCache: float[] calculateMatrix-GrdbGEg(java.lang.Object)>($r10);

        interfaceinvoke r1.<androidx.compose.ui.graphics.Canvas: void concat-58bKbWc(float[])>($r12);

        specialinvoke r0.<androidx.compose.ui.platform.RenderNodeLayer: void clipRenderNode(androidx.compose.ui.graphics.Canvas)>(r1);

        $r13 = r0.<androidx.compose.ui.platform.RenderNodeLayer: kotlin.jvm.functions.Function1 drawBlock>;

        if $r13 == null goto label8;

        interfaceinvoke $r13.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r1);

        goto label8;

     label8:
        interfaceinvoke r1.<androidx.compose.ui.graphics.Canvas: void restore()>();

        specialinvoke r0.<androidx.compose.ui.platform.RenderNodeLayer: void setDirty(boolean)>(0);

     label9:
        return;
    }

    private final void clipRenderNode(androidx.compose.ui.graphics.Canvas)
    {
        androidx.compose.ui.platform.RenderNodeLayer r0;
        androidx.compose.ui.graphics.Canvas r1;
        androidx.compose.ui.platform.DeviceRenderNode $r2, $r4;
        boolean $z0, $z1;
        androidx.compose.ui.platform.OutlineResolver $r3;

        r0 := @this: androidx.compose.ui.platform.RenderNodeLayer;

        r1 := @parameter0: androidx.compose.ui.graphics.Canvas;

        $r2 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        $z0 = interfaceinvoke $r2.<androidx.compose.ui.platform.DeviceRenderNode: boolean getClipToOutline()>();

        if $z0 != 0 goto label1;

        $r4 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        $z1 = interfaceinvoke $r4.<androidx.compose.ui.platform.DeviceRenderNode: boolean getClipToBounds()>();

        if $z1 == 0 goto label2;

     label1:
        $r3 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.OutlineResolver outlineResolver>;

        virtualinvoke $r3.<androidx.compose.ui.platform.OutlineResolver: void clipToOutline(androidx.compose.ui.graphics.Canvas)>(r1);

     label2:
        return;
    }

    public void updateDisplayList()
    {
        androidx.compose.ui.platform.RenderNodeLayer r0;
        androidx.compose.ui.graphics.Path r1, $r9;
        kotlin.jvm.functions.Function1 r2, $r10;
        boolean $z1, $z2, $z3, $z4;
        androidx.compose.ui.platform.DeviceRenderNode $r3, $r5, $r8;
        androidx.compose.ui.graphics.CanvasHolder $r4;
        androidx.compose.ui.platform.OutlineResolver $r6, $r7;

        r0 := @this: androidx.compose.ui.platform.RenderNodeLayer;

        $z1 = r0.<androidx.compose.ui.platform.RenderNodeLayer: boolean isDirty>;

        if $z1 != 0 goto label1;

        $r8 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        $z4 = interfaceinvoke $r8.<androidx.compose.ui.platform.DeviceRenderNode: boolean getHasDisplayList()>();

        if $z4 != 0 goto label4;

     label1:
        specialinvoke r0.<androidx.compose.ui.platform.RenderNodeLayer: void setDirty(boolean)>(0);

        $r3 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        $z2 = interfaceinvoke $r3.<androidx.compose.ui.platform.DeviceRenderNode: boolean getClipToOutline()>();

        if $z2 == 0 goto label2;

        $r6 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.OutlineResolver outlineResolver>;

        $z3 = virtualinvoke $r6.<androidx.compose.ui.platform.OutlineResolver: boolean getOutlineClipSupported()>();

        if $z3 != 0 goto label2;

        $r7 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.OutlineResolver outlineResolver>;

        $r9 = virtualinvoke $r7.<androidx.compose.ui.platform.OutlineResolver: androidx.compose.ui.graphics.Path getClipPath()>();

        goto label3;

     label2:
        $r9 = (androidx.compose.ui.graphics.Path) null;

     label3:
        r1 = $r9;

        $r10 = r0.<androidx.compose.ui.platform.RenderNodeLayer: kotlin.jvm.functions.Function1 drawBlock>;

        if $r10 == null goto label4;

        r2 = $r10;

        $r5 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        $r4 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.graphics.CanvasHolder canvasHolder>;

        interfaceinvoke $r5.<androidx.compose.ui.platform.DeviceRenderNode: void record(androidx.compose.ui.graphics.CanvasHolder,androidx.compose.ui.graphics.Path,kotlin.jvm.functions.Function1)>($r4, r1, r2);

        goto label4;

     label4:
        return;
    }

    public void destroy()
    {
        androidx.compose.ui.platform.RenderNodeLayer r0;
        androidx.compose.ui.platform.DeviceRenderNode $r1, $r5;
        boolean $z0;
        androidx.compose.ui.platform.AndroidComposeView $r2, $r4;
        androidx.compose.ui.node.OwnedLayer $r3;

        r0 := @this: androidx.compose.ui.platform.RenderNodeLayer;

        $r1 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        $z0 = interfaceinvoke $r1.<androidx.compose.ui.platform.DeviceRenderNode: boolean getHasDisplayList()>();

        if $z0 == 0 goto label1;

        $r5 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        interfaceinvoke $r5.<androidx.compose.ui.platform.DeviceRenderNode: void discardDisplayList()>();

     label1:
        r0.<androidx.compose.ui.platform.RenderNodeLayer: kotlin.jvm.functions.Function1 drawBlock> = null;

        r0.<androidx.compose.ui.platform.RenderNodeLayer: kotlin.jvm.functions.Function0 invalidateParentLayer> = null;

        r0.<androidx.compose.ui.platform.RenderNodeLayer: boolean isDestroyed> = 1;

        specialinvoke r0.<androidx.compose.ui.platform.RenderNodeLayer: void setDirty(boolean)>(0);

        $r2 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.AndroidComposeView ownerView>;

        virtualinvoke $r2.<androidx.compose.ui.platform.AndroidComposeView: void requestClearInvalidObservations()>();

        $r4 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.AndroidComposeView ownerView>;

        $r3 = (androidx.compose.ui.node.OwnedLayer) r0;

        virtualinvoke $r4.<androidx.compose.ui.platform.AndroidComposeView: boolean recycle$ui_release(androidx.compose.ui.node.OwnedLayer)>($r3);

        return;
    }

    public long mapOffset-8S9VItk(long, boolean)
    {
        androidx.compose.ui.platform.RenderNodeLayer r0;
        long l0, $l1;
        boolean z0;
        androidx.compose.ui.platform.DeviceRenderNode $r1, $r4;
        androidx.compose.ui.platform.LayerMatrixCache $r2, $r5;
        float[] $r3, $r6;
        androidx.compose.ui.geometry.Offset$Companion $r7;

        r0 := @this: androidx.compose.ui.platform.RenderNodeLayer;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label2;

        $r5 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.LayerMatrixCache matrixCache>;

        $r4 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        $r6 = virtualinvoke $r5.<androidx.compose.ui.platform.LayerMatrixCache: float[] calculateInverseMatrix-bWbORWo(java.lang.Object)>($r4);

        if $r6 == null goto label1;

        $l1 = staticinvoke <androidx.compose.ui.graphics.Matrix: long map-MK-Hz9U(float[],long)>($r6, l0);

        goto label3;

     label1:
        $r7 = <androidx.compose.ui.geometry.Offset: androidx.compose.ui.geometry.Offset$Companion Companion>;

        $l1 = virtualinvoke $r7.<androidx.compose.ui.geometry.Offset$Companion: long getInfinite-F1C5BW0()>();

        goto label3;

     label2:
        $r2 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.LayerMatrixCache matrixCache>;

        $r1 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        $r3 = virtualinvoke $r2.<androidx.compose.ui.platform.LayerMatrixCache: float[] calculateMatrix-GrdbGEg(java.lang.Object)>($r1);

        $l1 = staticinvoke <androidx.compose.ui.graphics.Matrix: long map-MK-Hz9U(float[],long)>($r3, l0);

     label3:
        return $l1;
    }

    public void mapBounds(androidx.compose.ui.geometry.MutableRect, boolean)
    {
        androidx.compose.ui.platform.RenderNodeLayer r0;
        androidx.compose.ui.geometry.MutableRect r1;
        boolean z0;
        float[] r2, $r5;
        androidx.compose.ui.platform.DeviceRenderNode $r3, $r6;
        androidx.compose.ui.platform.LayerMatrixCache $r4, $r7;

        r0 := @this: androidx.compose.ui.platform.RenderNodeLayer;

        r1 := @parameter0: androidx.compose.ui.geometry.MutableRect;

        z0 := @parameter1: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "rect");

        if z0 == 0 goto label2;

        $r7 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.LayerMatrixCache matrixCache>;

        $r6 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        r2 = virtualinvoke $r7.<androidx.compose.ui.platform.LayerMatrixCache: float[] calculateInverseMatrix-bWbORWo(java.lang.Object)>($r6);

        if r2 != null goto label1;

        virtualinvoke r1.<androidx.compose.ui.geometry.MutableRect: void set(float,float,float,float)>(0.0F, 0.0F, 0.0F, 0.0F);

        goto label3;

     label1:
        staticinvoke <androidx.compose.ui.graphics.Matrix: void map-impl(float[],androidx.compose.ui.geometry.MutableRect)>(r2, r1);

        goto label3;

     label2:
        $r4 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.LayerMatrixCache matrixCache>;

        $r3 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        $r5 = virtualinvoke $r4.<androidx.compose.ui.platform.LayerMatrixCache: float[] calculateMatrix-GrdbGEg(java.lang.Object)>($r3);

        staticinvoke <androidx.compose.ui.graphics.Matrix: void map-impl(float[],androidx.compose.ui.geometry.MutableRect)>($r5, r1);

     label3:
        return;
    }

    public void reuseLayer(kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function0)
    {
        androidx.compose.ui.platform.RenderNodeLayer r0;
        kotlin.jvm.functions.Function1 r1;
        kotlin.jvm.functions.Function0 r2;
        androidx.compose.ui.graphics.TransformOrigin$Companion $r3;
        long $l0;

        r0 := @this: androidx.compose.ui.platform.RenderNodeLayer;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        r2 := @parameter1: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "drawBlock");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "invalidateParentLayer");

        specialinvoke r0.<androidx.compose.ui.platform.RenderNodeLayer: void setDirty(boolean)>(0);

        r0.<androidx.compose.ui.platform.RenderNodeLayer: boolean isDestroyed> = 0;

        r0.<androidx.compose.ui.platform.RenderNodeLayer: boolean drawnWithZ> = 0;

        $r3 = <androidx.compose.ui.graphics.TransformOrigin: androidx.compose.ui.graphics.TransformOrigin$Companion Companion>;

        $l0 = virtualinvoke $r3.<androidx.compose.ui.graphics.TransformOrigin$Companion: long getCenter-SzJe1aQ()>();

        r0.<androidx.compose.ui.platform.RenderNodeLayer: long transformOrigin> = $l0;

        r0.<androidx.compose.ui.platform.RenderNodeLayer: kotlin.jvm.functions.Function1 drawBlock> = r1;

        r0.<androidx.compose.ui.platform.RenderNodeLayer: kotlin.jvm.functions.Function0 invalidateParentLayer> = r2;

        return;
    }

    public void transform-58bKbWc(float[])
    {
        androidx.compose.ui.platform.RenderNodeLayer r0;
        float[] r1, $r4;
        androidx.compose.ui.platform.DeviceRenderNode $r2;
        androidx.compose.ui.platform.LayerMatrixCache $r3;

        r0 := @this: androidx.compose.ui.platform.RenderNodeLayer;

        r1 := @parameter0: float[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "matrix");

        $r3 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.LayerMatrixCache matrixCache>;

        $r2 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        $r4 = virtualinvoke $r3.<androidx.compose.ui.platform.LayerMatrixCache: float[] calculateMatrix-GrdbGEg(java.lang.Object)>($r2);

        staticinvoke <androidx.compose.ui.graphics.Matrix: void timesAssign-58bKbWc(float[],float[])>(r1, $r4);

        return;
    }

    public void inverseTransform-58bKbWc(float[])
    {
        androidx.compose.ui.platform.RenderNodeLayer r0;
        float[] r1, r2;
        androidx.compose.ui.platform.DeviceRenderNode $r3;
        androidx.compose.ui.platform.LayerMatrixCache $r4;

        r0 := @this: androidx.compose.ui.platform.RenderNodeLayer;

        r1 := @parameter0: float[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "matrix");

        $r4 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.LayerMatrixCache matrixCache>;

        $r3 = r0.<androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.DeviceRenderNode renderNode>;

        r2 = virtualinvoke $r4.<androidx.compose.ui.platform.LayerMatrixCache: float[] calculateInverseMatrix-bWbORWo(java.lang.Object)>($r3);

        if r2 == null goto label1;

        staticinvoke <androidx.compose.ui.graphics.Matrix: void timesAssign-58bKbWc(float[],float[])>(r1, r2);

     label1:
        return;
    }

    static void <clinit>()
    {
        androidx.compose.ui.platform.RenderNodeLayer$Companion $r0;
        androidx.compose.ui.platform.RenderNodeLayer$Companion$getMatrix$1 $r1;
        kotlin.jvm.functions.Function2 $r2;

        $r0 = new androidx.compose.ui.platform.RenderNodeLayer$Companion;

        specialinvoke $r0.<androidx.compose.ui.platform.RenderNodeLayer$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.compose.ui.platform.RenderNodeLayer: androidx.compose.ui.platform.RenderNodeLayer$Companion Companion> = $r0;

        $r1 = <androidx.compose.ui.platform.RenderNodeLayer$Companion$getMatrix$1: androidx.compose.ui.platform.RenderNodeLayer$Companion$getMatrix$1 INSTANCE>;

        $r2 = (kotlin.jvm.functions.Function2) $r1;

        <androidx.compose.ui.platform.RenderNodeLayer: kotlin.jvm.functions.Function2 getMatrix> = $r2;

        return;
    }

androidx.compose.ui.platform.RenderNodeLayer$Companion$getMatrix$1
<androidx.compose.ui.platform.RenderNodeLayer$Companion$getMatrix$1: androidx.compose.ui.platform.RenderNodeLayer$Companion$getMatrix$1 INSTANCE>
    void <init>()
    {
        androidx.compose.ui.platform.RenderNodeLayer$Companion$getMatrix$1 r0;

        r0 := @this: androidx.compose.ui.platform.RenderNodeLayer$Companion$getMatrix$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(2);

        return;
    }

    public final void invoke(androidx.compose.ui.platform.DeviceRenderNode, android.graphics.Matrix)
    {
        androidx.compose.ui.platform.RenderNodeLayer$Companion$getMatrix$1 r0;
        androidx.compose.ui.platform.DeviceRenderNode r1;
        android.graphics.Matrix r2;

        r0 := @this: androidx.compose.ui.platform.RenderNodeLayer$Companion$getMatrix$1;

        r1 := @parameter0: androidx.compose.ui.platform.DeviceRenderNode;

        r2 := @parameter1: android.graphics.Matrix;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "rn");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "matrix");

        interfaceinvoke r1.<androidx.compose.ui.platform.DeviceRenderNode: void getMatrix(android.graphics.Matrix)>(r2);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.compose.ui.platform.RenderNodeLayer$Companion$getMatrix$1 r0;
        java.lang.Object r1, r2;
        android.graphics.Matrix $r3;
        androidx.compose.ui.platform.DeviceRenderNode $r4;
        kotlin.Unit $r5;

        r0 := @this: androidx.compose.ui.platform.RenderNodeLayer$Companion$getMatrix$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (androidx.compose.ui.platform.DeviceRenderNode) r1;

        $r3 = (android.graphics.Matrix) r2;

        virtualinvoke r0.<androidx.compose.ui.platform.RenderNodeLayer$Companion$getMatrix$1: void invoke(androidx.compose.ui.platform.DeviceRenderNode,android.graphics.Matrix)>($r4, $r3);

        $r5 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r5;
    }

    static void <clinit>()
    {
        androidx.compose.ui.platform.RenderNodeLayer$Companion$getMatrix$1 $r0;

        $r0 = new androidx.compose.ui.platform.RenderNodeLayer$Companion$getMatrix$1;

        specialinvoke $r0.<androidx.compose.ui.platform.RenderNodeLayer$Companion$getMatrix$1: void <init>()>();

        <androidx.compose.ui.platform.RenderNodeLayer$Companion$getMatrix$1: androidx.compose.ui.platform.RenderNodeLayer$Companion$getMatrix$1 INSTANCE> = $r0;

        return;
    }

androidx.compose.ui.platform.RenderNodeLayer$Companion
    private void <init>()
    {
        androidx.compose.ui.platform.RenderNodeLayer$Companion r0;

        r0 := @this: androidx.compose.ui.platform.RenderNodeLayer$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.compose.ui.platform.RenderNodeLayer$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.compose.ui.platform.RenderNodeLayer$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.compose.ui.platform.RenderNodeLayer$Companion: void <init>()>();

        return;
    }

androidx.compose.ui.platform.RenderNodeLayer$UniqueDrawingIdApi29
<androidx.compose.ui.platform.RenderNodeLayer$UniqueDrawingIdApi29: androidx.compose.ui.platform.RenderNodeLayer$UniqueDrawingIdApi29 INSTANCE>
    private void <init>()
    {
        androidx.compose.ui.platform.RenderNodeLayer$UniqueDrawingIdApi29 r0;

        r0 := @this: androidx.compose.ui.platform.RenderNodeLayer$UniqueDrawingIdApi29;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static final long getUniqueDrawingId(android.view.View)
    {
        android.view.View r0;
        long $l0;

        r0 := @parameter0: android.view.View;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "view");

        $l0 = virtualinvoke r0.<android.view.View: long getUniqueDrawingId()>();

        return $l0;
    }

    static void <clinit>()
    {
        androidx.compose.ui.platform.RenderNodeLayer$UniqueDrawingIdApi29 $r0;

        $r0 = new androidx.compose.ui.platform.RenderNodeLayer$UniqueDrawingIdApi29;

        specialinvoke $r0.<androidx.compose.ui.platform.RenderNodeLayer$UniqueDrawingIdApi29: void <init>()>();

        <androidx.compose.ui.platform.RenderNodeLayer$UniqueDrawingIdApi29: androidx.compose.ui.platform.RenderNodeLayer$UniqueDrawingIdApi29 INSTANCE> = $r0;

        return;
    }

