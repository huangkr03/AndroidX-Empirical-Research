kotlin.text.CharsKt__CharJVMKt
    public void <init>()
    {
        kotlin.text.CharsKt__CharJVMKt $r0;

        $r0 := @this: kotlin.text.CharsKt__CharJVMKt;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static final int checkRadix(int)
    {
        int $i0;
        kotlin.ranges.IntRange $r0;
        boolean $z0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $i0 := @parameter0: int;

        $r0 = new kotlin.ranges.IntRange;

        specialinvoke $r0.<kotlin.ranges.IntRange: void <init>(int,int)>(2, 36);

        $z0 = virtualinvoke $r0.<kotlin.ranges.IntRange: boolean contains(int)>($i0);

        if $z0 == 0 goto label1;

        return $i0;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("radix ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was not in valid range ");

        $r0 = new kotlin.ranges.IntRange;

        specialinvoke $r0.<kotlin.ranges.IntRange: void <init>(int,int)>(2, 36);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;
    }

    public static final int digitOf(char, int)
    {
        int $i0;
        char $c1;

        $c1 := @parameter0: char;

        $i0 := @parameter1: int;

        $i0 = staticinvoke <java.lang.Character: int digit(int,int)>($c1, $i0);

        return $i0;
    }

    public static final kotlin.text.CharCategory getCategory(char)
    {
        kotlin.text.CharCategory$Companion $r0;
        char $c0;
        int $i1;
        kotlin.text.CharCategory $r1;

        $c0 := @parameter0: char;

        $r0 = <kotlin.text.CharCategory: kotlin.text.CharCategory$Companion Companion>;

        $i1 = staticinvoke <java.lang.Character: int getType(char)>($c0);

        $r1 = virtualinvoke $r0.<kotlin.text.CharCategory$Companion: kotlin.text.CharCategory valueOf(int)>($i1);

        return $r1;
    }

    public static final kotlin.text.CharDirectionality getDirectionality(char)
    {
        kotlin.text.CharDirectionality$Companion $r0;
        char $c0;
        byte $b1;
        kotlin.text.CharDirectionality $r1;

        $c0 := @parameter0: char;

        $r0 = <kotlin.text.CharDirectionality: kotlin.text.CharDirectionality$Companion Companion>;

        $b1 = staticinvoke <java.lang.Character: byte getDirectionality(char)>($c0);

        $r1 = virtualinvoke $r0.<kotlin.text.CharDirectionality$Companion: kotlin.text.CharDirectionality valueOf(int)>($b1);

        return $r1;
    }

    private static final boolean isDefined(char)
    {
        boolean $z0;
        char $c0;

        $c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isDefined(char)>($c0);

        return $z0;
    }

    private static final boolean isDigit(char)
    {
        boolean $z0;
        char $c0;

        $c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c0);

        return $z0;
    }

    private static final boolean isHighSurrogate(char)
    {
        boolean $z0;
        char $c0;

        $c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>($c0);

        return $z0;
    }

    private static final boolean isISOControl(char)
    {
        boolean $z0;
        char $c0;

        $c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isISOControl(char)>($c0);

        return $z0;
    }

    private static final boolean isIdentifierIgnorable(char)
    {
        boolean $z0;
        char $c0;

        $c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isIdentifierIgnorable(char)>($c0);

        return $z0;
    }

    private static final boolean isJavaIdentifierPart(char)
    {
        boolean $z0;
        char $c0;

        $c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isJavaIdentifierPart(char)>($c0);

        return $z0;
    }

    private static final boolean isJavaIdentifierStart(char)
    {
        boolean $z0;
        char $c0;

        $c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isJavaIdentifierStart(char)>($c0);

        return $z0;
    }

    private static final boolean isLetter(char)
    {
        boolean $z0;
        char $c0;

        $c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isLetter(char)>($c0);

        return $z0;
    }

    private static final boolean isLetterOrDigit(char)
    {
        boolean $z0;
        char $c0;

        $c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>($c0);

        return $z0;
    }

    private static final boolean isLowSurrogate(char)
    {
        boolean $z0;
        char $c0;

        $c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>($c0);

        return $z0;
    }

    private static final boolean isLowerCase(char)
    {
        boolean $z0;
        char $c0;

        $c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>($c0);

        return $z0;
    }

    private static final boolean isTitleCase(char)
    {
        boolean $z0;
        char $c0;

        $c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isTitleCase(char)>($c0);

        return $z0;
    }

    private static final boolean isUpperCase(char)
    {
        boolean $z0;
        char $c0;

        $c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>($c0);

        return $z0;
    }

    public static final boolean isWhitespace(char)
    {
        char $c0;
        boolean $z0;

        $c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0);

        if $z0 != 0 goto label2;

        $z0 = staticinvoke <java.lang.Character: boolean isSpaceChar(char)>($c0);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    private static final java.lang.String lowercase(char)
    {
        char $c0;
        java.lang.String $r0;
        java.util.Locale $r1;

        $c0 := @parameter0: char;

        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r0, "null cannot be cast to non-null type java.lang.String");

        $r1 = <java.util.Locale: java.util.Locale ROOT>;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "this as java.lang.String).toLowerCase(Locale.ROOT)");

        return $r0;
    }

    public static final java.lang.String lowercase(char, java.util.Locale)
    {
        char $c0;
        java.util.Locale $r0;
        java.lang.String $r1;

        $c0 := @parameter0: char;

        $r0 := @parameter1: java.util.Locale;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "locale");

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r1, "null cannot be cast to non-null type java.lang.String");

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "this as java.lang.String).toLowerCase(locale)");

        return $r1;
    }

    private static final char lowercaseChar(char)
    {
        char $c0;

        $c0 := @parameter0: char;

        $c0 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c0);

        return $c0;
    }

    public static final java.lang.String titlecase(char, java.util.Locale)
    {
        char $c0;
        java.util.Locale $r0;
        java.lang.String $r1, $r3;
        int $i1;
        java.lang.StringBuilder $r2;
        boolean $z0;

        $c0 := @parameter0: char;

        $r0 := @parameter1: java.util.Locale;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "locale");

        $r1 = staticinvoke <kotlin.text.CharsKt: java.lang.String uppercase(char,java.util.Locale)>($c0, $r0);

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i1 <= 1 goto label2;

        if $c0 != 329 goto label1;

        return $r1;

     label1:
        $c0 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r1, "null cannot be cast to non-null type java.lang.String");

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "this as java.lang.String).substring(startIndex)");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r1, "null cannot be cast to non-null type java.lang.String");

        $r0 = <java.util.Locale: java.util.Locale ROOT>;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "this as java.lang.String).toLowerCase(Locale.ROOT)");

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;

     label2:
        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r3, "null cannot be cast to non-null type java.lang.String");

        $r0 = <java.util.Locale: java.util.Locale ROOT>;

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "this as java.lang.String).toUpperCase(Locale.ROOT)");

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r1, $r3);

        if $z0 != 0 goto label3;

        return $r1;

     label3:
        $c0 = staticinvoke <java.lang.Character: char toTitleCase(char)>($c0);

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c0);

        return $r1;
    }

    private static final char titlecaseChar(char)
    {
        char $c0;

        $c0 := @parameter0: char;

        $c0 = staticinvoke <java.lang.Character: char toTitleCase(char)>($c0);

        return $c0;
    }

    private static final char toLowerCase(char)
    {
        char $c0;

        $c0 := @parameter0: char;

        $c0 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c0);

        return $c0;
    }

    private static final char toTitleCase(char)
    {
        char $c0;

        $c0 := @parameter0: char;

        $c0 = staticinvoke <java.lang.Character: char toTitleCase(char)>($c0);

        return $c0;
    }

    private static final char toUpperCase(char)
    {
        char $c0;

        $c0 := @parameter0: char;

        $c0 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c0);

        return $c0;
    }

    private static final java.lang.String uppercase(char)
    {
        char $c0;
        java.lang.String $r0;
        java.util.Locale $r1;

        $c0 := @parameter0: char;

        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r0, "null cannot be cast to non-null type java.lang.String");

        $r1 = <java.util.Locale: java.util.Locale ROOT>;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "this as java.lang.String).toUpperCase(Locale.ROOT)");

        return $r0;
    }

    public static final java.lang.String uppercase(char, java.util.Locale)
    {
        char $c0;
        java.util.Locale $r0;
        java.lang.String $r1;

        $c0 := @parameter0: char;

        $r0 := @parameter1: java.util.Locale;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "locale");

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r1, "null cannot be cast to non-null type java.lang.String");

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "this as java.lang.String).toUpperCase(locale)");

        return $r1;
    }

    private static final char uppercaseChar(char)
    {
        char $c0;

        $c0 := @parameter0: char;

        $c0 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c0);

        return $c0;
    }

