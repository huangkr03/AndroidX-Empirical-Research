androidx.work.multiprocess.ListenableWorkerImpl
<androidx.work.multiprocess.ListenableWorkerImpl: java.lang.String TAG>
<androidx.work.multiprocess.ListenableWorkerImpl: byte[] sEMPTY>
<androidx.work.multiprocess.ListenableWorkerImpl: java.lang.Object sLock>
<androidx.work.multiprocess.ListenableWorkerImpl: android.content.Context mContext>
<androidx.work.multiprocess.ListenableWorkerImpl: androidx.work.Configuration mConfiguration>
<androidx.work.multiprocess.ListenableWorkerImpl: androidx.work.impl.utils.taskexecutor.TaskExecutor mTaskExecutor>
<androidx.work.multiprocess.ListenableWorkerImpl: androidx.work.ProgressUpdater mProgressUpdater>
<androidx.work.multiprocess.ListenableWorkerImpl: androidx.work.ForegroundUpdater mForegroundUpdater>
<androidx.work.multiprocess.ListenableWorkerImpl: java.util.Map mFutureMap>
    void <init>(android.content.Context)
    {
        androidx.work.multiprocess.ListenableWorkerImpl r0;
        android.content.Context r1, $r3;
        androidx.work.multiprocess.RemoteWorkManagerInfo r2;
        androidx.work.Configuration $r4;
        androidx.work.impl.utils.taskexecutor.TaskExecutor $r5;
        androidx.work.ProgressUpdater $r6;
        androidx.work.ForegroundUpdater $r7;
        java.util.HashMap $r8;

        r0 := @this: androidx.work.multiprocess.ListenableWorkerImpl;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<androidx.work.multiprocess.IListenableWorkerImpl$Stub: void <init>()>();

        $r3 = virtualinvoke r1.<android.content.Context: android.content.Context getApplicationContext()>();

        r0.<androidx.work.multiprocess.ListenableWorkerImpl: android.content.Context mContext> = $r3;

        r2 = staticinvoke <androidx.work.multiprocess.RemoteWorkManagerInfo: androidx.work.multiprocess.RemoteWorkManagerInfo getInstance(android.content.Context)>(r1);

        $r4 = virtualinvoke r2.<androidx.work.multiprocess.RemoteWorkManagerInfo: androidx.work.Configuration getConfiguration()>();

        r0.<androidx.work.multiprocess.ListenableWorkerImpl: androidx.work.Configuration mConfiguration> = $r4;

        $r5 = virtualinvoke r2.<androidx.work.multiprocess.RemoteWorkManagerInfo: androidx.work.impl.utils.taskexecutor.TaskExecutor getTaskExecutor()>();

        r0.<androidx.work.multiprocess.ListenableWorkerImpl: androidx.work.impl.utils.taskexecutor.TaskExecutor mTaskExecutor> = $r5;

        $r6 = virtualinvoke r2.<androidx.work.multiprocess.RemoteWorkManagerInfo: androidx.work.ProgressUpdater getProgressUpdater()>();

        r0.<androidx.work.multiprocess.ListenableWorkerImpl: androidx.work.ProgressUpdater mProgressUpdater> = $r6;

        $r7 = virtualinvoke r2.<androidx.work.multiprocess.RemoteWorkManagerInfo: androidx.work.ForegroundUpdater getForegroundUpdater()>();

        r0.<androidx.work.multiprocess.ListenableWorkerImpl: androidx.work.ForegroundUpdater mForegroundUpdater> = $r7;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        r0.<androidx.work.multiprocess.ListenableWorkerImpl: java.util.Map mFutureMap> = $r8;

        return;
    }

    public void startWork(byte[], androidx.work.multiprocess.IWorkManagerImplCallback)
    {
        androidx.work.multiprocess.ListenableWorkerImpl r0;
        byte[] r1;
        androidx.work.multiprocess.IWorkManagerImplCallback r2;
        androidx.work.multiprocess.parcelable.ParcelableWorkerParameters r3;
        androidx.work.WorkerParameters r4;
        java.lang.String r5, r6, $r17, $r23;
        com.google.common.util.concurrent.ListenableFuture r7;
        android.os.Parcelable$Creator $r8;
        java.lang.Object $r9;
        androidx.work.ForegroundUpdater $r10;
        androidx.work.ProgressUpdater $r11;
        androidx.work.impl.utils.taskexecutor.TaskExecutor $r12, $r25;
        androidx.work.Configuration $r13;
        java.util.UUID $r14;
        androidx.work.Logger $r15;
        java.lang.StringBuilder $r16, $r18, $r19, $r20, $r21, $r22;
        androidx.work.multiprocess.ListenableWorkerImpl$1 $r24;
        androidx.work.impl.utils.taskexecutor.SerialExecutor $r26;
        java.lang.Throwable $r27, r29;
        androidx.work.multiprocess.parcelable.ParcelableRemoteWorkRequest r28;

        r0 := @this: androidx.work.multiprocess.ListenableWorkerImpl;

        r1 := @parameter0: byte[];

        r2 := @parameter1: androidx.work.multiprocess.IWorkManagerImplCallback;

     label1:
        $r8 = <androidx.work.multiprocess.parcelable.ParcelableRemoteWorkRequest: android.os.Parcelable$Creator CREATOR>;

        $r9 = staticinvoke <androidx.work.multiprocess.parcelable.ParcelConverters: java.lang.Object unmarshall(byte[],android.os.Parcelable$Creator)>(r1, $r8);

        r28 = (androidx.work.multiprocess.parcelable.ParcelableRemoteWorkRequest) $r9;

        r3 = virtualinvoke r28.<androidx.work.multiprocess.parcelable.ParcelableRemoteWorkRequest: androidx.work.multiprocess.parcelable.ParcelableWorkerParameters getParcelableWorkerParameters()>();

        $r13 = r0.<androidx.work.multiprocess.ListenableWorkerImpl: androidx.work.Configuration mConfiguration>;

        $r12 = r0.<androidx.work.multiprocess.ListenableWorkerImpl: androidx.work.impl.utils.taskexecutor.TaskExecutor mTaskExecutor>;

        $r11 = r0.<androidx.work.multiprocess.ListenableWorkerImpl: androidx.work.ProgressUpdater mProgressUpdater>;

        $r10 = r0.<androidx.work.multiprocess.ListenableWorkerImpl: androidx.work.ForegroundUpdater mForegroundUpdater>;

        r4 = virtualinvoke r3.<androidx.work.multiprocess.parcelable.ParcelableWorkerParameters: androidx.work.WorkerParameters toWorkerParameters(androidx.work.Configuration,androidx.work.impl.utils.taskexecutor.TaskExecutor,androidx.work.ProgressUpdater,androidx.work.ForegroundUpdater)>($r13, $r12, $r11, $r10);

        $r14 = virtualinvoke r4.<androidx.work.WorkerParameters: java.util.UUID getId()>();

        r5 = virtualinvoke $r14.<java.util.UUID: java.lang.String toString()>();

        r6 = virtualinvoke r28.<androidx.work.multiprocess.parcelable.ParcelableRemoteWorkRequest: java.lang.String getWorkerClassName()>();

        $r15 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r17 = <androidx.work.multiprocess.ListenableWorkerImpl: java.lang.String TAG>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Executing work request (");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r17, $r23);

        r7 = specialinvoke r0.<androidx.work.multiprocess.ListenableWorkerImpl: com.google.common.util.concurrent.ListenableFuture executeWorkRequest(java.lang.String,java.lang.String,androidx.work.WorkerParameters)>(r5, r6, r4);

        $r24 = new androidx.work.multiprocess.ListenableWorkerImpl$1;

        specialinvoke $r24.<androidx.work.multiprocess.ListenableWorkerImpl$1: void <init>(androidx.work.multiprocess.ListenableWorkerImpl,com.google.common.util.concurrent.ListenableFuture,androidx.work.multiprocess.IWorkManagerImplCallback,java.lang.String)>(r0, r7, r2, r5);

        $r25 = r0.<androidx.work.multiprocess.ListenableWorkerImpl: androidx.work.impl.utils.taskexecutor.TaskExecutor mTaskExecutor>;

        $r26 = interfaceinvoke $r25.<androidx.work.impl.utils.taskexecutor.TaskExecutor: androidx.work.impl.utils.taskexecutor.SerialExecutor getSerialTaskExecutor()>();

        interfaceinvoke r7.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r24, $r26);

     label2:
        goto label4;

     label3:
        $r27 := @caughtexception;

        r29 = $r27;

        staticinvoke <androidx.work.multiprocess.ListenableCallback$ListenableCallbackRunnable: void reportFailure(androidx.work.multiprocess.IWorkManagerImplCallback,java.lang.Throwable)>(r2, r29);

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void interrupt(byte[], androidx.work.multiprocess.IWorkManagerImplCallback)
    {
        androidx.work.multiprocess.ListenableWorkerImpl r0;
        byte[] r1, $r20;
        androidx.work.multiprocess.IWorkManagerImplCallback r2;
        java.lang.String r3, $r12, $r16;
        com.google.common.util.concurrent.ListenableFuture r4;
        java.lang.Object r5, $r8, $r17, $r19;
        java.lang.Throwable r6, $r24, $r25, r27;
        android.os.Parcelable$Creator $r7;
        java.util.UUID $r9;
        androidx.work.Logger $r10;
        java.lang.StringBuilder $r11, $r13, $r14, $r15;
        java.util.Map $r18;
        androidx.work.impl.utils.taskexecutor.TaskExecutor $r21;
        androidx.work.impl.utils.taskexecutor.SerialExecutor $r22;
        androidx.work.multiprocess.ListenableWorkerImpl$2 $r23;
        androidx.work.multiprocess.parcelable.ParcelableWorkerParameters r26;

        r0 := @this: androidx.work.multiprocess.ListenableWorkerImpl;

        r1 := @parameter0: byte[];

        r2 := @parameter1: androidx.work.multiprocess.IWorkManagerImplCallback;

     label01:
        $r7 = <androidx.work.multiprocess.parcelable.ParcelableWorkerParameters: android.os.Parcelable$Creator CREATOR>;

        $r8 = staticinvoke <androidx.work.multiprocess.parcelable.ParcelConverters: java.lang.Object unmarshall(byte[],android.os.Parcelable$Creator)>(r1, $r7);

        r26 = (androidx.work.multiprocess.parcelable.ParcelableWorkerParameters) $r8;

        $r9 = virtualinvoke r26.<androidx.work.multiprocess.parcelable.ParcelableWorkerParameters: java.util.UUID getId()>();

        r3 = virtualinvoke $r9.<java.util.UUID: java.lang.String toString()>();

        $r10 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r12 = <androidx.work.multiprocess.ListenableWorkerImpl: java.lang.String TAG>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Interrupting work with id (");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r12, $r16);

        $r17 = <androidx.work.multiprocess.ListenableWorkerImpl: java.lang.Object sLock>;

        r5 = $r17;

        entermonitor $r17;

     label02:
        $r18 = r0.<androidx.work.multiprocess.ListenableWorkerImpl: java.util.Map mFutureMap>;

        $r19 = interfaceinvoke $r18.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r3);

        r4 = (com.google.common.util.concurrent.ListenableFuture) $r19;

        exitmonitor r5;

     label03:
        goto label06;

     label04:
        $r24 := @caughtexception;

        r6 = $r24;

        exitmonitor r5;

     label05:
        throw r6;

     label06:
        if r4 == null goto label07;

        $r21 = r0.<androidx.work.multiprocess.ListenableWorkerImpl: androidx.work.impl.utils.taskexecutor.TaskExecutor mTaskExecutor>;

        $r22 = interfaceinvoke $r21.<androidx.work.impl.utils.taskexecutor.TaskExecutor: androidx.work.impl.utils.taskexecutor.SerialExecutor getSerialTaskExecutor()>();

        $r23 = new androidx.work.multiprocess.ListenableWorkerImpl$2;

        specialinvoke $r23.<androidx.work.multiprocess.ListenableWorkerImpl$2: void <init>(androidx.work.multiprocess.ListenableWorkerImpl,com.google.common.util.concurrent.ListenableFuture,androidx.work.multiprocess.IWorkManagerImplCallback)>(r0, r4, r2);

        interfaceinvoke $r22.<androidx.work.impl.utils.taskexecutor.SerialExecutor: void execute(java.lang.Runnable)>($r23);

        goto label08;

     label07:
        $r20 = <androidx.work.multiprocess.ListenableWorkerImpl: byte[] sEMPTY>;

        staticinvoke <androidx.work.multiprocess.ListenableCallback$ListenableCallbackRunnable: void reportSuccess(androidx.work.multiprocess.IWorkManagerImplCallback,byte[])>(r2, $r20);

     label08:
        goto label10;

     label09:
        $r25 := @caughtexception;

        r27 = $r25;

        staticinvoke <androidx.work.multiprocess.ListenableCallback$ListenableCallbackRunnable: void reportFailure(androidx.work.multiprocess.IWorkManagerImplCallback,java.lang.Throwable)>(r2, r27);

     label10:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label01 to label08 with label09;
    }

    private com.google.common.util.concurrent.ListenableFuture executeWorkRequest(java.lang.String, java.lang.String, androidx.work.WorkerParameters)
    {
        androidx.work.multiprocess.ListenableWorkerImpl r0;
        java.lang.String r1, r2, $r9, $r15;
        androidx.work.WorkerParameters r3;
        androidx.work.impl.utils.futures.SettableFuture r4;
        java.lang.Object r5, $r16;
        java.lang.Throwable r6, $r22;
        androidx.work.Logger $r7;
        java.lang.StringBuilder $r8, $r10, $r11, $r12, $r13, $r14;
        java.util.Map $r17;
        androidx.work.impl.utils.taskexecutor.TaskExecutor $r19;
        java.util.concurrent.Executor $r20;
        java.lang.Runnable $r21;

        r0 := @this: androidx.work.multiprocess.ListenableWorkerImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: androidx.work.WorkerParameters;

        r4 = staticinvoke <androidx.work.impl.utils.futures.SettableFuture: androidx.work.impl.utils.futures.SettableFuture create()>();

        $r7 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r9 = <androidx.work.multiprocess.ListenableWorkerImpl: java.lang.String TAG>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tracking execution of ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r9, $r15);

        $r16 = <androidx.work.multiprocess.ListenableWorkerImpl: java.lang.Object sLock>;

        r5 = $r16;

        entermonitor $r16;

     label1:
        $r17 = r0.<androidx.work.multiprocess.ListenableWorkerImpl: java.util.Map mFutureMap>;

        interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r4);

        exitmonitor r5;

     label2:
        goto label5;

     label3:
        $r22 := @caughtexception;

        r6 = $r22;

        exitmonitor r5;

     label4:
        throw r6;

     label5:
        $r19 = r0.<androidx.work.multiprocess.ListenableWorkerImpl: androidx.work.impl.utils.taskexecutor.TaskExecutor mTaskExecutor>;

        $r20 = interfaceinvoke $r19.<androidx.work.impl.utils.taskexecutor.TaskExecutor: java.util.concurrent.Executor getMainThreadExecutor()>();

        $r21 = dynamicinvoke "run" <java.lang.Runnable (androidx.work.multiprocess.ListenableWorkerImpl,java.lang.String,androidx.work.WorkerParameters,androidx.work.impl.utils.futures.SettableFuture)>(r0, r2, r3, r4) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.work.multiprocess.ListenableWorkerImpl: void lambda$executeWorkRequest$0(java.lang.String,androidx.work.WorkerParameters,androidx.work.impl.utils.futures.SettableFuture)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r20.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r21);

        return r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void lambda$executeWorkRequest$0(java.lang.String, androidx.work.WorkerParameters, androidx.work.impl.utils.futures.SettableFuture)
    {
        androidx.work.multiprocess.ListenableWorkerImpl r0;
        java.lang.String r1, $r12, $r15, $r21, r25, r26;
        androidx.work.WorkerParameters r2;
        androidx.work.impl.utils.futures.SettableFuture r3;
        androidx.work.Configuration $r4;
        androidx.work.WorkerFactory $r5;
        android.content.Context $r6;
        boolean $z0;
        com.google.common.util.concurrent.ListenableFuture $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r13, $r17, $r18, $r19;
        java.lang.Class $r11;
        androidx.work.Logger $r14, $r20;
        java.lang.IllegalStateException $r16, $r22;
        java.lang.Throwable $r23, r28;
        androidx.work.ListenableWorker r24;
        androidx.work.multiprocess.RemoteListenableWorker r27;

        r0 := @this: androidx.work.multiprocess.ListenableWorkerImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.work.WorkerParameters;

        r3 := @parameter2: androidx.work.impl.utils.futures.SettableFuture;

     label1:
        $r4 = r0.<androidx.work.multiprocess.ListenableWorkerImpl: androidx.work.Configuration mConfiguration>;

        $r5 = virtualinvoke $r4.<androidx.work.Configuration: androidx.work.WorkerFactory getWorkerFactory()>();

        $r6 = r0.<androidx.work.multiprocess.ListenableWorkerImpl: android.content.Context mContext>;

        r24 = virtualinvoke $r5.<androidx.work.WorkerFactory: androidx.work.ListenableWorker createWorkerWithDefaultFallback(android.content.Context,java.lang.String,androidx.work.WorkerParameters)>($r6, r1, r2);

        if r24 != null goto label3;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to create an instance of ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r25 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $r20 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r21 = <androidx.work.multiprocess.ListenableWorkerImpl: java.lang.String TAG>;

        virtualinvoke $r20.<androidx.work.Logger: void error(java.lang.String,java.lang.String)>($r21, r25);

        $r22 = new java.lang.IllegalStateException;

        specialinvoke $r22.<java.lang.IllegalStateException: void <init>(java.lang.String)>(r25);

        virtualinvoke r3.<androidx.work.impl.utils.futures.SettableFuture: boolean setException(java.lang.Throwable)>($r22);

     label2:
        return;

     label3:
        $z0 = r24 instanceof androidx.work.multiprocess.RemoteListenableWorker;

        if $z0 != 0 goto label5;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not extend ");

        $r11 = class "Landroidx/work/multiprocess/RemoteListenableWorker;";

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        r26 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r15 = <androidx.work.multiprocess.ListenableWorkerImpl: java.lang.String TAG>;

        virtualinvoke $r14.<androidx.work.Logger: void error(java.lang.String,java.lang.String)>($r15, r26);

        $r16 = new java.lang.IllegalStateException;

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>(r26);

        virtualinvoke r3.<androidx.work.impl.utils.futures.SettableFuture: boolean setException(java.lang.Throwable)>($r16);

     label4:
        return;

     label5:
        r27 = (androidx.work.multiprocess.RemoteListenableWorker) r24;

        $r7 = virtualinvoke r27.<androidx.work.multiprocess.RemoteListenableWorker: com.google.common.util.concurrent.ListenableFuture startRemoteWork()>();

        virtualinvoke r3.<androidx.work.impl.utils.futures.SettableFuture: boolean setFuture(com.google.common.util.concurrent.ListenableFuture)>($r7);

     label6:
        goto label8;

     label7:
        $r23 := @caughtexception;

        r28 = $r23;

        virtualinvoke r3.<androidx.work.impl.utils.futures.SettableFuture: boolean setException(java.lang.Throwable)>(r28);

     label8:
        return;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    static void <clinit>()
    {
        java.lang.String $r0;
        byte[] $r1;
        java.lang.Object $r2;

        $r0 = staticinvoke <androidx.work.Logger: java.lang.String tagWithPrefix(java.lang.String)>("ListenableWorkerImpl");

        <androidx.work.multiprocess.ListenableWorkerImpl: java.lang.String TAG> = $r0;

        $r1 = newarray (byte)[0];

        <androidx.work.multiprocess.ListenableWorkerImpl: byte[] sEMPTY> = $r1;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        <androidx.work.multiprocess.ListenableWorkerImpl: java.lang.Object sLock> = $r2;

        return;
    }

androidx.work.multiprocess.ListenableWorkerImpl$1
<androidx.work.multiprocess.ListenableWorkerImpl$1: com.google.common.util.concurrent.ListenableFuture val$futureResult>
<androidx.work.multiprocess.ListenableWorkerImpl$1: androidx.work.multiprocess.IWorkManagerImplCallback val$callback>
<androidx.work.multiprocess.ListenableWorkerImpl$1: java.lang.String val$id>
<androidx.work.multiprocess.ListenableWorkerImpl$1: androidx.work.multiprocess.ListenableWorkerImpl this$0>
    void <init>(androidx.work.multiprocess.ListenableWorkerImpl, com.google.common.util.concurrent.ListenableFuture, androidx.work.multiprocess.IWorkManagerImplCallback, java.lang.String)
    {
        androidx.work.multiprocess.ListenableWorkerImpl$1 r0;
        androidx.work.multiprocess.ListenableWorkerImpl r1;
        com.google.common.util.concurrent.ListenableFuture r2;
        androidx.work.multiprocess.IWorkManagerImplCallback r3;
        java.lang.String r4;

        r0 := @this: androidx.work.multiprocess.ListenableWorkerImpl$1;

        r1 := @parameter0: androidx.work.multiprocess.ListenableWorkerImpl;

        r2 := @parameter1: com.google.common.util.concurrent.ListenableFuture;

        r3 := @parameter2: androidx.work.multiprocess.IWorkManagerImplCallback;

        r4 := @parameter3: java.lang.String;

        r0.<androidx.work.multiprocess.ListenableWorkerImpl$1: androidx.work.multiprocess.ListenableWorkerImpl this$0> = r1;

        r0.<androidx.work.multiprocess.ListenableWorkerImpl$1: com.google.common.util.concurrent.ListenableFuture val$futureResult> = r2;

        r0.<androidx.work.multiprocess.ListenableWorkerImpl$1: androidx.work.multiprocess.IWorkManagerImplCallback val$callback> = r3;

        r0.<androidx.work.multiprocess.ListenableWorkerImpl$1: java.lang.String val$id> = r4;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        androidx.work.multiprocess.ListenableWorkerImpl$1 r0;
        androidx.work.multiprocess.parcelable.ParcelableResult r1, $r11;
        byte[] r2;
        java.lang.Throwable r3, r4, r5, r6, r8, $r18, $r24, $r25, $r26, $r41, $r42, $r49, r52, r54;
        java.lang.Object r7, $r10, $r13, $r19, $r36, $r44, r51, r53, r55;
        com.google.common.util.concurrent.ListenableFuture $r9;
        androidx.work.multiprocess.IWorkManagerImplCallback $r12, $r35, $r43;
        androidx.work.multiprocess.ListenableWorkerImpl $r14, $r20, $r37, $r45;
        java.lang.String $r15, $r21, $r29, $r31, $r34, $r38, $r46;
        java.util.Map $r16, $r22, $r39, $r47;
        androidx.work.Logger $r27;
        java.lang.StringBuilder $r28, $r30, $r32, $r33;
        androidx.work.ListenableWorker$Result r50;

        r0 := @this: androidx.work.multiprocess.ListenableWorkerImpl$1;

     label01:
        $r9 = r0.<androidx.work.multiprocess.ListenableWorkerImpl$1: com.google.common.util.concurrent.ListenableFuture val$futureResult>;

        $r10 = interfaceinvoke $r9.<com.google.common.util.concurrent.ListenableFuture: java.lang.Object get()>();

        r50 = (androidx.work.ListenableWorker$Result) $r10;

        $r11 = new androidx.work.multiprocess.parcelable.ParcelableResult;

        specialinvoke $r11.<androidx.work.multiprocess.parcelable.ParcelableResult: void <init>(androidx.work.ListenableWorker$Result)>(r50);

        r1 = $r11;

        r2 = staticinvoke <androidx.work.multiprocess.parcelable.ParcelConverters: byte[] marshall(android.os.Parcelable)>(r1);

        $r12 = r0.<androidx.work.multiprocess.ListenableWorkerImpl$1: androidx.work.multiprocess.IWorkManagerImplCallback val$callback>;

        staticinvoke <androidx.work.multiprocess.ListenableCallback$ListenableCallbackRunnable: void reportSuccess(androidx.work.multiprocess.IWorkManagerImplCallback,byte[])>($r12, r2);

     label02:
        $r13 = <androidx.work.multiprocess.ListenableWorkerImpl: java.lang.Object sLock>;

        r51 = $r13;

        entermonitor $r13;

     label03:
        $r14 = r0.<androidx.work.multiprocess.ListenableWorkerImpl$1: androidx.work.multiprocess.ListenableWorkerImpl this$0>;

        $r16 = $r14.<androidx.work.multiprocess.ListenableWorkerImpl: java.util.Map mFutureMap>;

        $r15 = r0.<androidx.work.multiprocess.ListenableWorkerImpl$1: java.lang.String val$id>;

        interfaceinvoke $r16.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r15);

        exitmonitor r51;

     label04:
        goto label07;

     label05:
        $r24 := @caughtexception;

        r3 = $r24;

        exitmonitor r51;

     label06:
        throw r3;

     label07:
        goto label29;

     label08:
        $r42 := @caughtexception;

        r52 = $r42;

        $r43 = r0.<androidx.work.multiprocess.ListenableWorkerImpl$1: androidx.work.multiprocess.IWorkManagerImplCallback val$callback>;

        staticinvoke <androidx.work.multiprocess.ListenableCallback$ListenableCallbackRunnable: void reportFailure(androidx.work.multiprocess.IWorkManagerImplCallback,java.lang.Throwable)>($r43, r52);

     label09:
        $r44 = <androidx.work.multiprocess.ListenableWorkerImpl: java.lang.Object sLock>;

        r53 = $r44;

        entermonitor $r44;

     label10:
        $r45 = r0.<androidx.work.multiprocess.ListenableWorkerImpl$1: androidx.work.multiprocess.ListenableWorkerImpl this$0>;

        $r47 = $r45.<androidx.work.multiprocess.ListenableWorkerImpl: java.util.Map mFutureMap>;

        $r46 = r0.<androidx.work.multiprocess.ListenableWorkerImpl$1: java.lang.String val$id>;

        interfaceinvoke $r47.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r46);

        exitmonitor r53;

     label11:
        goto label14;

     label12:
        $r49 := @caughtexception;

        r4 = $r49;

        exitmonitor r53;

     label13:
        throw r4;

     label14:
        goto label29;

     label15:
        $r26 := @caughtexception;

        r54 = $r26;

        $r27 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r29 = <androidx.work.multiprocess.ListenableWorkerImpl: java.lang.String TAG>;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Worker (");

        $r31 = r0.<androidx.work.multiprocess.ListenableWorkerImpl$1: java.lang.String val$id>;

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") was cancelled");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r27.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r29, $r34);

        $r35 = r0.<androidx.work.multiprocess.ListenableWorkerImpl$1: androidx.work.multiprocess.IWorkManagerImplCallback val$callback>;

        staticinvoke <androidx.work.multiprocess.ListenableCallback$ListenableCallbackRunnable: void reportFailure(androidx.work.multiprocess.IWorkManagerImplCallback,java.lang.Throwable)>($r35, r54);

     label16:
        $r36 = <androidx.work.multiprocess.ListenableWorkerImpl: java.lang.Object sLock>;

        r55 = $r36;

        entermonitor $r36;

     label17:
        $r37 = r0.<androidx.work.multiprocess.ListenableWorkerImpl$1: androidx.work.multiprocess.ListenableWorkerImpl this$0>;

        $r39 = $r37.<androidx.work.multiprocess.ListenableWorkerImpl: java.util.Map mFutureMap>;

        $r38 = r0.<androidx.work.multiprocess.ListenableWorkerImpl$1: java.lang.String val$id>;

        interfaceinvoke $r39.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r38);

        exitmonitor r55;

     label18:
        goto label21;

     label19:
        $r25 := @caughtexception;

        r5 = $r25;

        exitmonitor r55;

     label20:
        throw r5;

     label21:
        goto label29;

     label22:
        $r18 := @caughtexception;

        r6 = $r18;

     label23:
        $r19 = <androidx.work.multiprocess.ListenableWorkerImpl: java.lang.Object sLock>;

        r7 = $r19;

        entermonitor $r19;

     label24:
        $r20 = r0.<androidx.work.multiprocess.ListenableWorkerImpl$1: androidx.work.multiprocess.ListenableWorkerImpl this$0>;

        $r22 = $r20.<androidx.work.multiprocess.ListenableWorkerImpl: java.util.Map mFutureMap>;

        $r21 = r0.<androidx.work.multiprocess.ListenableWorkerImpl$1: java.lang.String val$id>;

        interfaceinvoke $r22.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r21);

        exitmonitor r7;

     label25:
        goto label28;

     label26:
        $r41 := @caughtexception;

        r8 = $r41;

        exitmonitor r7;

     label27:
        throw r8;

     label28:
        throw r6;

     label29:
        return;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.util.concurrent.ExecutionException from label01 to label02 with label08;
        catch java.lang.InterruptedException from label01 to label02 with label08;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
        catch java.util.concurrent.CancellationException from label01 to label02 with label15;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Throwable from label19 to label20 with label19;
        catch java.lang.Throwable from label01 to label02 with label22;
        catch java.lang.Throwable from label08 to label09 with label22;
        catch java.lang.Throwable from label15 to label16 with label22;
        catch java.lang.Throwable from label24 to label25 with label26;
        catch java.lang.Throwable from label26 to label27 with label26;
        catch java.lang.Throwable from label22 to label23 with label22;
    }

androidx.work.multiprocess.ListenableWorkerImpl$2
<androidx.work.multiprocess.ListenableWorkerImpl$2: com.google.common.util.concurrent.ListenableFuture val$future>
<androidx.work.multiprocess.ListenableWorkerImpl$2: androidx.work.multiprocess.IWorkManagerImplCallback val$callback>
<androidx.work.multiprocess.ListenableWorkerImpl$2: androidx.work.multiprocess.ListenableWorkerImpl this$0>
    void <init>(androidx.work.multiprocess.ListenableWorkerImpl, com.google.common.util.concurrent.ListenableFuture, androidx.work.multiprocess.IWorkManagerImplCallback)
    {
        androidx.work.multiprocess.ListenableWorkerImpl$2 r0;
        androidx.work.multiprocess.ListenableWorkerImpl r1;
        com.google.common.util.concurrent.ListenableFuture r2;
        androidx.work.multiprocess.IWorkManagerImplCallback r3;

        r0 := @this: androidx.work.multiprocess.ListenableWorkerImpl$2;

        r1 := @parameter0: androidx.work.multiprocess.ListenableWorkerImpl;

        r2 := @parameter1: com.google.common.util.concurrent.ListenableFuture;

        r3 := @parameter2: androidx.work.multiprocess.IWorkManagerImplCallback;

        r0.<androidx.work.multiprocess.ListenableWorkerImpl$2: androidx.work.multiprocess.ListenableWorkerImpl this$0> = r1;

        r0.<androidx.work.multiprocess.ListenableWorkerImpl$2: com.google.common.util.concurrent.ListenableFuture val$future> = r2;

        r0.<androidx.work.multiprocess.ListenableWorkerImpl$2: androidx.work.multiprocess.IWorkManagerImplCallback val$callback> = r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        androidx.work.multiprocess.ListenableWorkerImpl$2 r0;
        com.google.common.util.concurrent.ListenableFuture $r1;
        byte[] $r2;
        androidx.work.multiprocess.IWorkManagerImplCallback $r3;

        r0 := @this: androidx.work.multiprocess.ListenableWorkerImpl$2;

        $r1 = r0.<androidx.work.multiprocess.ListenableWorkerImpl$2: com.google.common.util.concurrent.ListenableFuture val$future>;

        interfaceinvoke $r1.<com.google.common.util.concurrent.ListenableFuture: boolean cancel(boolean)>(1);

        $r3 = r0.<androidx.work.multiprocess.ListenableWorkerImpl$2: androidx.work.multiprocess.IWorkManagerImplCallback val$callback>;

        $r2 = <androidx.work.multiprocess.ListenableWorkerImpl: byte[] sEMPTY>;

        staticinvoke <androidx.work.multiprocess.ListenableCallback$ListenableCallbackRunnable: void reportSuccess(androidx.work.multiprocess.IWorkManagerImplCallback,byte[])>($r3, $r2);

        return;
    }

