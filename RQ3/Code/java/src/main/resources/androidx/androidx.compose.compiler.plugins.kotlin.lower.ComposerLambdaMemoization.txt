androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization
<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: java.util.List declarationContextStack>
    private final androidx.compose.compiler.plugins.kotlin.lower.FunctionContext getCurrentFunctionContext()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization r0;
        java.util.List $r1;
        java.lang.Object $r2;
        androidx.compose.compiler.plugins.kotlin.lower.DeclarationContext $r3;
        androidx.compose.compiler.plugins.kotlin.lower.FunctionContext $r4;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization;

        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: java.util.List declarationContextStack>;

        $r2 = staticinvoke <org.jetbrains.kotlin.backend.common.UtilsKt: java.lang.Object peek(java.util.List)>($r1);

        $r3 = (androidx.compose.compiler.plugins.kotlin.lower.DeclarationContext) $r2;

        if $r3 == null goto label1;

        $r4 = virtualinvoke $r3.<androidx.compose.compiler.plugins.kotlin.lower.DeclarationContext: androidx.compose.compiler.plugins.kotlin.lower.FunctionContext getFunctionContext()>();

        goto label2;

     label1:
        $r4 = null;

     label2:
        return $r4;
    }

    public void lower(org.jetbrains.kotlin.ir.declarations.IrModuleFragment)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization r0;
        org.jetbrains.kotlin.ir.declarations.IrModuleFragment r1;
        org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid $r2;
        org.jetbrains.kotlin.ir.IrElement $r3;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization;

        r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrModuleFragment;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "module");

        $r3 = (org.jetbrains.kotlin.ir.IrElement) r1;

        $r2 = (org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid) r0;

        staticinvoke <org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoidKt: void transformChildrenVoid(org.jetbrains.kotlin.ir.IrElement,org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid)>($r3, $r2);

        return;
    }

    public org.jetbrains.kotlin.ir.IrStatement visitDeclaration(org.jetbrains.kotlin.ir.declarations.IrDeclaration)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization r0;
        org.jetbrains.kotlin.ir.declarations.IrDeclaration r1, $r12;
        org.jetbrains.kotlin.ir.declarations.IrSymbolOwner r2, $r6, $r9;
        boolean $z0, $z1;
        java.util.List $r3, $r7, $r10;
        androidx.compose.compiler.plugins.kotlin.lower.SymbolOwnerContext $r5;
        androidx.compose.compiler.plugins.kotlin.lower.FunctionLocalSymbol $r8;
        org.jetbrains.kotlin.ir.IrStatement $r11, r14;
        androidx.compose.compiler.plugins.kotlin.lower.FunctionContext r13;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization;

        r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrDeclaration;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "declaration");

        $z0 = r1 instanceof org.jetbrains.kotlin.ir.declarations.IrFunction;

        if $z0 == 0 goto label1;

        $r11 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.IrStatement visitDeclaration(org.jetbrains.kotlin.ir.declarations.IrDeclaration)>(r1);

        return $r11;

     label1:
        $r12 = r1;

        $z1 = r1 instanceof org.jetbrains.kotlin.ir.declarations.IrSymbolOwner;

        if $z1 != 0 goto label2;

        $r12 = null;

     label2:
        r2 = (org.jetbrains.kotlin.ir.declarations.IrSymbolOwner) $r12;

        if r2 == null goto label4;

        r13 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: androidx.compose.compiler.plugins.kotlin.lower.FunctionContext getCurrentFunctionContext()>();

        if r13 == null goto label3;

        $r10 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: java.util.List declarationContextStack>;

        $r8 = new androidx.compose.compiler.plugins.kotlin.lower.FunctionLocalSymbol;

        $r9 = (org.jetbrains.kotlin.ir.declarations.IrSymbolOwner) r1;

        specialinvoke $r8.<androidx.compose.compiler.plugins.kotlin.lower.FunctionLocalSymbol: void <init>(org.jetbrains.kotlin.ir.declarations.IrSymbolOwner,androidx.compose.compiler.plugins.kotlin.lower.FunctionContext)>($r9, r13);

        staticinvoke <org.jetbrains.kotlin.backend.common.UtilsKt: boolean push(java.util.List,java.lang.Object)>($r10, $r8);

        goto label4;

     label3:
        $r7 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: java.util.List declarationContextStack>;

        $r5 = new androidx.compose.compiler.plugins.kotlin.lower.SymbolOwnerContext;

        $r6 = (org.jetbrains.kotlin.ir.declarations.IrSymbolOwner) r1;

        specialinvoke $r5.<androidx.compose.compiler.plugins.kotlin.lower.SymbolOwnerContext: void <init>(org.jetbrains.kotlin.ir.declarations.IrSymbolOwner)>($r6);

        staticinvoke <org.jetbrains.kotlin.backend.common.UtilsKt: boolean push(java.util.List,java.lang.Object)>($r7, $r5);

     label4:
        r14 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.IrStatement visitDeclaration(org.jetbrains.kotlin.ir.declarations.IrDeclaration)>(r1);

        if r2 == null goto label5;

        $r3 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: java.util.List declarationContextStack>;

        staticinvoke <org.jetbrains.kotlin.backend.common.UtilsKt: java.lang.Object pop(java.util.List)>($r3);

     label5:
        return r14;
    }

    private final org.jetbrains.kotlin.ir.expressions.IrExpression irCurrentComposer()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization r0;
        org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol r1;
        androidx.compose.compiler.plugins.kotlin.ComposeFqNames $r2;
        org.jetbrains.kotlin.name.FqName $r3;
        org.jetbrains.kotlin.ir.symbols.IrSymbol $r4;
        org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl $r6;
        org.jetbrains.kotlin.descriptors.ClassDescriptor $r7;
        org.jetbrains.kotlin.types.SimpleType $r8;
        org.jetbrains.kotlin.types.KotlinType $r9, $r10;
        org.jetbrains.kotlin.ir.types.IrType $r11;
        org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$FOR_LOOP_ITERATOR $r12;
        org.jetbrains.kotlin.ir.expressions.IrStatementOrigin $r13;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r14;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization;

        $r2 = <androidx.compose.compiler.plugins.kotlin.ComposeFqNames: androidx.compose.compiler.plugins.kotlin.ComposeFqNames INSTANCE>;

        $r3 = virtualinvoke $r2.<androidx.compose.compiler.plugins.kotlin.ComposeFqNames: org.jetbrains.kotlin.name.FqName fqNameFor(java.lang.String)>("currentComposer");

        r1 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getTopLevelPropertyGetter(org.jetbrains.kotlin.name.FqName)>($r3);

        $r4 = (org.jetbrains.kotlin.ir.symbols.IrSymbol) r1;

        virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: org.jetbrains.kotlin.ir.symbols.IrSymbol bindIfNecessary(org.jetbrains.kotlin.ir.symbols.IrSymbol)>($r4);

        $r6 = new org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl;

        $r7 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: org.jetbrains.kotlin.descriptors.ClassDescriptor getComposerTypeDescriptor()>();

        $r8 = interfaceinvoke $r7.<org.jetbrains.kotlin.descriptors.ClassDescriptor: org.jetbrains.kotlin.types.SimpleType getDefaultType()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r8, "composerTypeDescriptor.defaultType");

        $r9 = (org.jetbrains.kotlin.types.KotlinType) $r8;

        $r10 = staticinvoke <org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt: org.jetbrains.kotlin.types.KotlinType replaceArgumentsWithStarProjections(org.jetbrains.kotlin.types.KotlinType)>($r9);

        $r11 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: org.jetbrains.kotlin.ir.types.IrType toIrType(org.jetbrains.kotlin.types.KotlinType)>($r10);

        $r12 = <org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$FOR_LOOP_ITERATOR: org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$FOR_LOOP_ITERATOR INSTANCE>;

        $r13 = (org.jetbrains.kotlin.ir.expressions.IrStatementOrigin) $r12;

        specialinvoke $r6.<org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl: void <init>(int,int,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,org.jetbrains.kotlin.ir.symbols.IrClassSymbol,int,kotlin.jvm.internal.DefaultConstructorMarker)>(-1, -1, $r11, r1, $r13, null, 32, null);

        $r14 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r6;

        return $r14;
    }

    public org.jetbrains.kotlin.ir.IrStatement visitFunction(org.jetbrains.kotlin.ir.declarations.IrFunction)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization r0;
        org.jetbrains.kotlin.ir.declarations.IrFunction r1;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor r2;
        boolean z0, z1, z2, z4, $z6, $z7, $z8, $z9;
        org.jetbrains.kotlin.types.KotlinType r3, r5;
        java.util.List $r6, $r9;
        androidx.compose.compiler.plugins.kotlin.lower.FunctionContext $r7;
        org.jetbrains.kotlin.ir.IrStatement r8;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization;

        r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrFunction;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "declaration");

        r2 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.descriptors.FunctionDescriptor getDescriptor()>();

        z0 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: boolean allowsComposableCalls(org.jetbrains.kotlin.descriptors.FunctionDescriptor)>(r2);

        if z0 == 0 goto label3;

        $z6 = interfaceinvoke r2.<org.jetbrains.kotlin.descriptors.FunctionDescriptor: boolean isInline()>();

        if $z6 != 0 goto label3;

        r5 = interfaceinvoke r2.<org.jetbrains.kotlin.descriptors.FunctionDescriptor: org.jetbrains.kotlin.types.KotlinType getReturnType()>();

        z1 = 0;

        z2 = 0;

        r3 = r5;

        if r3 == null goto label1;

        $z7 = staticinvoke <org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt: boolean isUnit(org.jetbrains.kotlin.types.KotlinType)>(r3);

        if $z7 == 0 goto label1;

        $z8 = 1;

        goto label2;

     label1:
        $z8 = 0;

     label2:
        if $z8 == 0 goto label3;

        $z9 = 1;

        goto label4;

     label3:
        $z9 = 0;

     label4:
        z4 = $z9;

        $r6 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: java.util.List declarationContextStack>;

        $r7 = new androidx.compose.compiler.plugins.kotlin.lower.FunctionContext;

        specialinvoke $r7.<androidx.compose.compiler.plugins.kotlin.lower.FunctionContext: void <init>(org.jetbrains.kotlin.ir.declarations.IrFunction,boolean,boolean)>(r1, z0, z4);

        staticinvoke <org.jetbrains.kotlin.backend.common.UtilsKt: boolean push(java.util.List,java.lang.Object)>($r6, $r7);

        r8 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.IrStatement visitFunction(org.jetbrains.kotlin.ir.declarations.IrFunction)>(r1);

        $r9 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: java.util.List declarationContextStack>;

        staticinvoke <org.jetbrains.kotlin.backend.common.UtilsKt: java.lang.Object pop(java.util.List)>($r9);

        return r8;
    }

    public org.jetbrains.kotlin.ir.IrStatement visitVariable(org.jetbrains.kotlin.ir.declarations.IrVariable)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization r0;
        org.jetbrains.kotlin.ir.declarations.IrVariable r1;
        java.util.List $r2;
        java.lang.Object $r3;
        androidx.compose.compiler.plugins.kotlin.lower.DeclarationContext $r4;
        org.jetbrains.kotlin.ir.IrStatement $r5;
        org.jetbrains.kotlin.ir.declarations.IrValueDeclaration $r6;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization;

        r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrVariable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "declaration");

        $r2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: java.util.List declarationContextStack>;

        $r3 = staticinvoke <org.jetbrains.kotlin.backend.common.UtilsKt: java.lang.Object peek(java.util.List)>($r2);

        $r4 = (androidx.compose.compiler.plugins.kotlin.lower.DeclarationContext) $r3;

        if $r4 == null goto label1;

        $r6 = (org.jetbrains.kotlin.ir.declarations.IrValueDeclaration) r1;

        virtualinvoke $r4.<androidx.compose.compiler.plugins.kotlin.lower.DeclarationContext: void declareLocal(org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)>($r6);

        goto label1;

     label1:
        $r5 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.IrStatement visitVariable(org.jetbrains.kotlin.ir.declarations.IrVariable)>(r1);

        return $r5;
    }

    public org.jetbrains.kotlin.ir.expressions.IrExpression visitValueAccess(org.jetbrains.kotlin.ir.expressions.IrValueAccessExpression)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization r0;
        org.jetbrains.kotlin.ir.expressions.IrValueAccessExpression r1;
        java.lang.Iterable $r2;
        java.util.Iterator r3;
        java.lang.Object r4;
        androidx.compose.compiler.plugins.kotlin.lower.DeclarationContext r5;
        java.util.List $r6;
        boolean $z2;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r7;
        org.jetbrains.kotlin.ir.symbols.IrValueSymbol $r8;
        org.jetbrains.kotlin.ir.declarations.IrValueDeclaration $r9;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrValueAccessExpression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "expression");

        $r6 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: java.util.List declarationContextStack>;

        $r2 = (java.lang.Iterable) $r6;

        r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (androidx.compose.compiler.plugins.kotlin.lower.DeclarationContext) r4;

        $r8 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrValueAccessExpression: org.jetbrains.kotlin.ir.symbols.IrValueSymbol getSymbol()>();

        $r9 = interfaceinvoke $r8.<org.jetbrains.kotlin.ir.symbols.IrValueSymbol: org.jetbrains.kotlin.ir.declarations.IrValueDeclaration getOwner()>();

        virtualinvoke r5.<androidx.compose.compiler.plugins.kotlin.lower.DeclarationContext: void recordCapture(org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)>($r9);

        goto label1;

     label2:
        $r7 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.IrExpression visitValueAccess(org.jetbrains.kotlin.ir.expressions.IrValueAccessExpression)>(r1);

        return $r7;
    }

    public org.jetbrains.kotlin.ir.expressions.IrExpression visitFunctionReference(org.jetbrains.kotlin.ir.expressions.IrFunctionReference)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization r0, r14;
        org.jetbrains.kotlin.ir.expressions.IrFunctionReference r1;
        org.jetbrains.kotlin.ir.expressions.IrExpression r2, r4, r5, $r19, $r36, $r37, $r38, $r39, $r42, r52, r53, r57;
        androidx.compose.compiler.plugins.kotlin.lower.FunctionContext r3, r13, $r17;
        org.jetbrains.kotlin.backend.common.lower.DeclarationIrBuilder r6, $r20;
        org.jetbrains.kotlin.ir.builders.IrBuilderWithScope $r7, $r44, $r46;
        org.jetbrains.kotlin.ir.types.IrType r8, $r30;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.jetbrains.kotlin.ir.expressions.IrStatementOrigin r9;
        org.jetbrains.kotlin.ir.builders.IrBlockBuilder r10, r15, $r25;
        java.util.List r12, $r18;
        kotlin.Unit r16;
        boolean $z3, $z4, $z5, z8, z9, z10, z12, z13, z14, z15, z16, z17, z18, z19, z21, z22;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r21;
        org.jetbrains.kotlin.ir.builders.IrGeneratorContext $r22, $r26;
        org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol $r23, $r32, $r33;
        org.jetbrains.kotlin.ir.symbols.IrSymbol $r24, $r31;
        org.jetbrains.kotlin.ir.builders.Scope $r27;
        java.util.ArrayList $r28;
        org.jetbrains.kotlin.ir.expressions.impl.IrFunctionReferenceImpl $r29, $r62, $r63, r66, $r69, r72;
        org.jetbrains.kotlin.ir.declarations.IrAttributeContainer $r34, $r35, r61;
        org.jetbrains.kotlin.ir.IrStatement $r40;
        org.jetbrains.kotlin.ir.expressions.IrContainerExpression $r41;
        org.jetbrains.kotlin.ir.declarations.IrValueDeclaration $r43, $r45;
        org.jetbrains.kotlin.ir.builders.IrStatementsBuilder $r48, $r50;
        org.jetbrains.kotlin.ir.declarations.IrVariable r54, $r55, r56, r58, $r59, r60, r64, r65, r70, r71;
        org.jetbrains.kotlin.ir.expressions.impl.IrGetValueImpl r67, $r68, r73, $r74;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrFunctionReference;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "expression");

        r2 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.IrExpression visitFunctionReference(org.jetbrains.kotlin.ir.expressions.IrFunctionReference)>(r1);

        $r17 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: androidx.compose.compiler.plugins.kotlin.lower.FunctionContext getCurrentFunctionContext()>();

        if $r17 == null goto label01;

        goto label02;

     label01:
        return r2;

     label02:
        r3 = $r17;

        $i2 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrFunctionReference: int getValueArgumentsCount()>();

        if $i2 == 0 goto label03;

        return r2;

     label03:
        $z3 = virtualinvoke r3.<androidx.compose.compiler.plugins.kotlin.lower.FunctionContext: boolean getCanRemember()>();

        if $z3 == 0 goto label14;

        r4 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrFunctionReference: org.jetbrains.kotlin.ir.expressions.IrExpression getDispatchReceiver()>();

        r5 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrFunctionReference: org.jetbrains.kotlin.ir.expressions.IrExpression getExtensionReceiver()>();

        if r4 != null goto label04;

        if r5 == null goto label13;

     label04:
        $z4 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: boolean isNullOrStable(org.jetbrains.kotlin.ir.expressions.IrExpression)>(r4);

        if $z4 == 0 goto label13;

        $z5 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: boolean isNullOrStable(org.jetbrains.kotlin.ir.expressions.IrExpression)>(r5);

        if $z5 == 0 goto label13;

        $r20 = new org.jetbrains.kotlin.backend.common.lower.DeclarationIrBuilder;

        $r21 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        $r22 = (org.jetbrains.kotlin.ir.builders.IrGeneratorContext) $r21;

        $r23 = virtualinvoke r3.<androidx.compose.compiler.plugins.kotlin.lower.FunctionContext: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getSymbol()>();

        $r24 = (org.jetbrains.kotlin.ir.symbols.IrSymbol) $r23;

        $i3 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrFunctionReference: int getStartOffset()>();

        $i4 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrFunctionReference: int getEndOffset()>();

        specialinvoke $r20.<org.jetbrains.kotlin.backend.common.lower.DeclarationIrBuilder: void <init>(org.jetbrains.kotlin.ir.builders.IrGeneratorContext,org.jetbrains.kotlin.ir.symbols.IrSymbol,int,int)>($r22, $r24, $i3, $i4);

        r6 = $r20;

        $r7 = (org.jetbrains.kotlin.ir.builders.IrBuilderWithScope) r6;

        r8 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrFunctionReference: org.jetbrains.kotlin.ir.types.IrType getType()>();

        i0 = virtualinvoke $r7.<org.jetbrains.kotlin.ir.builders.IrBuilderWithScope: int getStartOffset()>();

        i1 = virtualinvoke $r7.<org.jetbrains.kotlin.ir.builders.IrBuilderWithScope: int getEndOffset()>();

        r9 = (org.jetbrains.kotlin.ir.expressions.IrStatementOrigin) null;

        $r25 = new org.jetbrains.kotlin.ir.builders.IrBlockBuilder;

        $r26 = virtualinvoke $r7.<org.jetbrains.kotlin.ir.builders.IrBuilderWithScope: org.jetbrains.kotlin.ir.builders.IrGeneratorContext getContext()>();

        $r27 = virtualinvoke $r7.<org.jetbrains.kotlin.ir.builders.IrBuilderWithScope: org.jetbrains.kotlin.ir.builders.Scope getScope()>();

        specialinvoke $r25.<org.jetbrains.kotlin.ir.builders.IrBlockBuilder: void <init>(org.jetbrains.kotlin.ir.builders.IrGeneratorContext,org.jetbrains.kotlin.ir.builders.Scope,int,int,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,org.jetbrains.kotlin.ir.types.IrType,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r26, $r27, i0, i1, r9, r8, 0, 64, null);

        r10 = $r25;

        z8 = 0;

        $r28 = new java.util.ArrayList;

        specialinvoke $r28.<java.util.ArrayList: void <init>()>();

        r12 = (java.util.List) $r28;

        if r4 == null goto label05;

        r52 = r4;

        z9 = 0;

        z10 = 0;

        r53 = r52;

        $r50 = (org.jetbrains.kotlin.ir.builders.IrStatementsBuilder) r10;

        r54 = staticinvoke <org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt: org.jetbrains.kotlin.ir.declarations.IrVariable irTemporary$default(org.jetbrains.kotlin.ir.builders.IrStatementsBuilder,org.jetbrains.kotlin.ir.expressions.IrExpression,java.lang.String,org.jetbrains.kotlin.types.KotlinType,org.jetbrains.kotlin.ir.types.IrType,int,java.lang.Object)>($r50, r53, null, null, null, 14, null);

        interfaceinvoke r12.<java.util.List: boolean add(java.lang.Object)>(r54);

        $r55 = r54;

        goto label06;

     label05:
        $r55 = null;

     label06:
        r56 = $r55;

        if r5 == null goto label07;

        r57 = r5;

        z12 = 0;

        z13 = 0;

        z14 = 0;

        $r48 = (org.jetbrains.kotlin.ir.builders.IrStatementsBuilder) r10;

        r58 = staticinvoke <org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt: org.jetbrains.kotlin.ir.declarations.IrVariable irTemporary$default(org.jetbrains.kotlin.ir.builders.IrStatementsBuilder,org.jetbrains.kotlin.ir.expressions.IrExpression,java.lang.String,org.jetbrains.kotlin.types.KotlinType,org.jetbrains.kotlin.ir.types.IrType,int,java.lang.Object)>($r48, r57, null, null, null, 14, null);

        interfaceinvoke r12.<java.util.List: boolean add(java.lang.Object)>(r58);

        $r59 = r58;

        goto label08;

     label07:
        $r59 = null;

     label08:
        r60 = $r59;

        $r29 = new org.jetbrains.kotlin.ir.expressions.impl.IrFunctionReferenceImpl;

        $i5 = virtualinvoke r10.<org.jetbrains.kotlin.ir.builders.IrBlockBuilder: int getStartOffset()>();

        $i6 = virtualinvoke r10.<org.jetbrains.kotlin.ir.builders.IrBlockBuilder: int getEndOffset()>();

        $r30 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrFunctionReference: org.jetbrains.kotlin.ir.types.IrType getType()>();

        $r31 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrFunctionReference: org.jetbrains.kotlin.ir.symbols.IrSymbol getSymbol()>();

        $r32 = (org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol) $r31;

        $i7 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrFunctionReference: int getTypeArgumentsCount()>();

        $r33 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrFunctionReference: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getReflectionTarget()>();

        specialinvoke $r29.<org.jetbrains.kotlin.ir.expressions.impl.IrFunctionReferenceImpl: void <init>(int,int,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol,int,org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,int,kotlin.jvm.internal.DefaultConstructorMarker)>($i5, $i6, $r30, $r32, $i7, $r33, null, 64, null);

        $r35 = (org.jetbrains.kotlin.ir.declarations.IrAttributeContainer) $r29;

        $r34 = (org.jetbrains.kotlin.ir.declarations.IrAttributeContainer) r1;

        r61 = staticinvoke <org.jetbrains.kotlin.ir.declarations.IrAttributeContainerKt: org.jetbrains.kotlin.ir.declarations.IrAttributeContainer copyAttributes(org.jetbrains.kotlin.ir.declarations.IrAttributeContainer,org.jetbrains.kotlin.ir.declarations.IrAttributeContainer)>($r35, $r34);

        z15 = 0;

        z16 = 0;

        $r62 = (org.jetbrains.kotlin.ir.expressions.impl.IrFunctionReferenceImpl) r61;

        r13 = r3;

        r14 = r0;

        r15 = r10;

        z17 = 0;

        $r63 = $r62;

        if r56 == null goto label09;

        r64 = r56;

        z18 = 0;

        z19 = 0;

        r65 = r64;

        r66 = $r62;

        $r46 = (org.jetbrains.kotlin.ir.builders.IrBuilderWithScope) r10;

        $r45 = (org.jetbrains.kotlin.ir.declarations.IrValueDeclaration) r65;

        r67 = staticinvoke <org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt: org.jetbrains.kotlin.ir.expressions.impl.IrGetValueImpl irGet(org.jetbrains.kotlin.ir.builders.IrBuilderWithScope,org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)>($r46, $r45);

        $r63 = r66;

        $r68 = r67;

        goto label10;

     label09:
        $r68 = null;

     label10:
        $r36 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r68;

        virtualinvoke $r63.<org.jetbrains.kotlin.ir.expressions.impl.IrFunctionReferenceImpl: void setDispatchReceiver(org.jetbrains.kotlin.ir.expressions.IrExpression)>($r36);

        $r69 = $r62;

        if r60 == null goto label11;

        r70 = r60;

        z21 = 0;

        z22 = 0;

        r71 = r70;

        r72 = $r62;

        $r44 = (org.jetbrains.kotlin.ir.builders.IrBuilderWithScope) r10;

        $r43 = (org.jetbrains.kotlin.ir.declarations.IrValueDeclaration) r71;

        r73 = staticinvoke <org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt: org.jetbrains.kotlin.ir.expressions.impl.IrGetValueImpl irGet(org.jetbrains.kotlin.ir.builders.IrBuilderWithScope,org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)>($r44, $r43);

        $r69 = r72;

        $r74 = r73;

        goto label12;

     label11:
        $r74 = null;

     label12:
        $r37 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r74;

        virtualinvoke $r69.<org.jetbrains.kotlin.ir.expressions.impl.IrFunctionReferenceImpl: void setExtensionReceiver(org.jetbrains.kotlin.ir.expressions.IrExpression)>($r37);

        r16 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r38 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r61;

        $r39 = specialinvoke r14.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: org.jetbrains.kotlin.ir.expressions.IrExpression rememberExpression(androidx.compose.compiler.plugins.kotlin.lower.FunctionContext,org.jetbrains.kotlin.ir.expressions.IrExpression,java.util.List)>(r13, $r38, r12);

        $r40 = (org.jetbrains.kotlin.ir.IrStatement) $r39;

        virtualinvoke r15.<org.jetbrains.kotlin.ir.builders.IrBlockBuilder: void unaryPlus(org.jetbrains.kotlin.ir.IrStatement)>($r40);

        $r41 = virtualinvoke r10.<org.jetbrains.kotlin.ir.builders.IrBlockBuilder: org.jetbrains.kotlin.ir.expressions.IrContainerExpression doBuild()>();

        $r42 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r41;

        return $r42;

     label13:
        if r4 != null goto label14;

        $r18 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        $r19 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: org.jetbrains.kotlin.ir.expressions.IrExpression rememberExpression(androidx.compose.compiler.plugins.kotlin.lower.FunctionContext,org.jetbrains.kotlin.ir.expressions.IrExpression,java.util.List)>(r3, r2, $r18);

        return $r19;

     label14:
        return r2;
    }

    private final org.jetbrains.kotlin.ir.expressions.IrExpression visitNonComposableFunctionExpression(org.jetbrains.kotlin.ir.expressions.IrFunctionExpression)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization r0;
        org.jetbrains.kotlin.ir.expressions.IrFunctionExpression r1, r5, $r9;
        androidx.compose.compiler.plugins.kotlin.lower.FunctionContext r2, $r6;
        androidx.compose.compiler.plugins.kotlin.lower.CaptureCollector r3, $r8;
        org.jetbrains.kotlin.ir.expressions.IrExpression r4, $r7, $r10, $r14, $r15, $r16;
        boolean $z0, $z1, $z2, $z3;
        java.util.Set $r11;
        java.lang.Iterable $r12;
        java.util.List $r13;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrFunctionExpression;

        $r6 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: androidx.compose.compiler.plugins.kotlin.lower.FunctionContext getCurrentFunctionContext()>();

        if $r6 == null goto label1;

        goto label2;

     label1:
        $r7 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.IrExpression visitFunctionExpression(org.jetbrains.kotlin.ir.expressions.IrFunctionExpression)>(r1);

        return $r7;

     label2:
        r2 = $r6;

        $z0 = virtualinvoke r2.<androidx.compose.compiler.plugins.kotlin.lower.FunctionContext: boolean getCanRemember()>();

        if $z0 == 0 goto label3;

        $z1 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: boolean isInlineArgument(org.jetbrains.kotlin.ir.expressions.IrFunctionExpression)>(r1);

        if $z1 != 0 goto label3;

        $z2 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: boolean isTracked(org.jetbrains.kotlin.ir.expressions.IrFunctionExpression)>(r1);

        if $z2 != 0 goto label4;

     label3:
        $r15 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.IrExpression visitFunctionExpression(org.jetbrains.kotlin.ir.expressions.IrFunctionExpression)>(r1);

        return $r15;

     label4:
        $r8 = new androidx.compose.compiler.plugins.kotlin.lower.CaptureCollector;

        specialinvoke $r8.<androidx.compose.compiler.plugins.kotlin.lower.CaptureCollector: void <init>()>();

        r3 = $r8;

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: void startCollector(androidx.compose.compiler.plugins.kotlin.lower.CaptureCollector)>(r3);

        r4 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.IrExpression visitFunctionExpression(org.jetbrains.kotlin.ir.expressions.IrFunctionExpression)>(r1);

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: void stopCollector(androidx.compose.compiler.plugins.kotlin.lower.CaptureCollector)>(r3);

        $r16 = r4;

        $z3 = r4 instanceof org.jetbrains.kotlin.ir.expressions.IrFunctionExpression;

        if $z3 != 0 goto label5;

        $r16 = null;

     label5:
        $r9 = (org.jetbrains.kotlin.ir.expressions.IrFunctionExpression) $r16;

        if $r9 == null goto label6;

        goto label7;

     label6:
        return r4;

     label7:
        r5 = $r9;

        $r10 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r5;

        $r11 = virtualinvoke r3.<androidx.compose.compiler.plugins.kotlin.lower.CaptureCollector: java.util.Set getCaptures()>();

        $r12 = (java.lang.Iterable) $r11;

        $r13 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List toList(java.lang.Iterable)>($r12);

        $r14 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: org.jetbrains.kotlin.ir.expressions.IrExpression rememberExpression(androidx.compose.compiler.plugins.kotlin.lower.FunctionContext,org.jetbrains.kotlin.ir.expressions.IrExpression,java.util.List)>(r2, $r10, $r13);

        return $r14;
    }

    private final org.jetbrains.kotlin.ir.expressions.IrExpression visitComposableFunctionExpression(org.jetbrains.kotlin.ir.expressions.IrFunctionExpression, androidx.compose.compiler.plugins.kotlin.lower.DeclarationContext)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization r0;
        org.jetbrains.kotlin.ir.expressions.IrFunctionExpression r1, r4, $r7;
        androidx.compose.compiler.plugins.kotlin.lower.DeclarationContext r2;
        org.jetbrains.kotlin.ir.expressions.IrExpression r3, $r10, $r11, $r12, $r13;
        org.jetbrains.kotlin.types.KotlinType r5, r6;
        boolean z0, z1, $z3, $z4, $z5, $z6;
        org.jetbrains.kotlin.ir.declarations.IrSimpleFunction $r8;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r9;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrFunctionExpression;

        r2 := @parameter1: androidx.compose.compiler.plugins.kotlin.lower.DeclarationContext;

        r3 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.IrExpression visitFunctionExpression(org.jetbrains.kotlin.ir.expressions.IrFunctionExpression)>(r1);

        $r13 = r3;

        $z3 = r3 instanceof org.jetbrains.kotlin.ir.expressions.IrFunctionExpression;

        if $z3 != 0 goto label1;

        $r13 = null;

     label1:
        $r7 = (org.jetbrains.kotlin.ir.expressions.IrFunctionExpression) $r13;

        if $r7 == null goto label2;

        goto label3;

     label2:
        return r3;

     label3:
        r4 = $r7;

        $z4 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: boolean isInlineArgument(org.jetbrains.kotlin.ir.expressions.IrFunctionExpression)>(r1);

        if $z4 == 0 goto label4;

        $r12 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r4;

        return $r12;

     label4:
        $r8 = interfaceinvoke r4.<org.jetbrains.kotlin.ir.expressions.IrFunctionExpression: org.jetbrains.kotlin.ir.declarations.IrSimpleFunction getFunction()>();

        $r9 = interfaceinvoke $r8.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: org.jetbrains.kotlin.descriptors.FunctionDescriptor getDescriptor()>();

        r5 = interfaceinvoke $r9.<org.jetbrains.kotlin.descriptors.FunctionDescriptor: org.jetbrains.kotlin.types.KotlinType getReturnType()>();

        z0 = 0;

        z1 = 0;

        r6 = r5;

        if r6 == null goto label5;

        $z5 = staticinvoke <org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt: boolean isUnit(org.jetbrains.kotlin.types.KotlinType)>(r6);

        if $z5 == 0 goto label6;

     label5:
        $z6 = 1;

        goto label7;

     label6:
        $z6 = 0;

     label7:
        if $z6 != 0 goto label8;

        $r11 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r4;

        return $r11;

     label8:
        $r10 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: org.jetbrains.kotlin.ir.expressions.IrExpression wrapFunctionExpression(androidx.compose.compiler.plugins.kotlin.lower.DeclarationContext,org.jetbrains.kotlin.ir.expressions.IrFunctionExpression)>(r2, r4);

        return $r10;
    }

    public org.jetbrains.kotlin.ir.expressions.IrExpression visitFunctionExpression(org.jetbrains.kotlin.ir.expressions.IrFunctionExpression)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization r0;
        org.jetbrains.kotlin.ir.expressions.IrFunctionExpression r1;
        androidx.compose.compiler.plugins.kotlin.lower.DeclarationContext r2, $r5;
        java.util.List $r3;
        java.lang.Object $r4;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r6, $r7;
        boolean $z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrFunctionExpression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "expression");

        $r3 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: java.util.List declarationContextStack>;

        $r4 = staticinvoke <org.jetbrains.kotlin.backend.common.UtilsKt: java.lang.Object peek(java.util.List)>($r3);

        $r5 = (androidx.compose.compiler.plugins.kotlin.lower.DeclarationContext) $r4;

        if $r5 == null goto label1;

        goto label2;

     label1:
        $r6 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.IrExpression visitFunctionExpression(org.jetbrains.kotlin.ir.expressions.IrFunctionExpression)>(r1);

        return $r6;

     label2:
        r2 = $r5;

        $z0 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: boolean allowsComposableCalls(org.jetbrains.kotlin.ir.expressions.IrFunctionExpression)>(r1);

        if $z0 == 0 goto label3;

        $r7 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: org.jetbrains.kotlin.ir.expressions.IrExpression visitComposableFunctionExpression(org.jetbrains.kotlin.ir.expressions.IrFunctionExpression,androidx.compose.compiler.plugins.kotlin.lower.DeclarationContext)>(r1, r2);

        goto label4;

     label3:
        $r7 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: org.jetbrains.kotlin.ir.expressions.IrExpression visitNonComposableFunctionExpression(org.jetbrains.kotlin.ir.expressions.IrFunctionExpression)>(r1);

     label4:
        return $r7;
    }

    private final void startCollector(androidx.compose.compiler.plugins.kotlin.lower.CaptureCollector)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization r0;
        androidx.compose.compiler.plugins.kotlin.lower.CaptureCollector r1;
        java.util.Iterator r2;
        androidx.compose.compiler.plugins.kotlin.lower.DeclarationContext r3;
        java.util.List $r4;
        boolean $z0;
        java.lang.Object $r5;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization;

        r1 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.CaptureCollector;

        $r4 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: java.util.List declarationContextStack>;

        r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.compose.compiler.plugins.kotlin.lower.DeclarationContext) $r5;

        virtualinvoke r3.<androidx.compose.compiler.plugins.kotlin.lower.DeclarationContext: void pushCollector(androidx.compose.compiler.plugins.kotlin.lower.CaptureCollector)>(r1);

        goto label1;

     label2:
        return;
    }

    private final void stopCollector(androidx.compose.compiler.plugins.kotlin.lower.CaptureCollector)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization r0;
        androidx.compose.compiler.plugins.kotlin.lower.CaptureCollector r1;
        java.util.Iterator r2;
        androidx.compose.compiler.plugins.kotlin.lower.DeclarationContext r3;
        java.util.List $r4;
        boolean $z0;
        java.lang.Object $r5;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization;

        r1 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.CaptureCollector;

        $r4 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: java.util.List declarationContextStack>;

        r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.compose.compiler.plugins.kotlin.lower.DeclarationContext) $r5;

        virtualinvoke r3.<androidx.compose.compiler.plugins.kotlin.lower.DeclarationContext: void popCollector(androidx.compose.compiler.plugins.kotlin.lower.CaptureCollector)>(r1);

        goto label1;

     label2:
        return;
    }

    private final org.jetbrains.kotlin.ir.expressions.IrExpression wrapFunctionExpression(androidx.compose.compiler.plugins.kotlin.lower.DeclarationContext, org.jetbrains.kotlin.ir.expressions.IrFunctionExpression)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization r0;
        androidx.compose.compiler.plugins.kotlin.lower.DeclarationContext r1;
        org.jetbrains.kotlin.ir.expressions.IrFunctionExpression r2;
        org.jetbrains.kotlin.ir.declarations.IrSimpleFunction r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13;
        boolean z0, z1, z2, z4, $z5, $z6, $z7, $z8, $z9;
        java.lang.String r4, r9, $r32, $r39, $r49;
        org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol r5, $r18;
        org.jetbrains.kotlin.backend.common.lower.DeclarationIrBuilder r6, $r52;
        org.jetbrains.kotlin.ir.expressions.IrFunctionAccessExpression r7;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r10, $r19;
        java.util.List $r11;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContextImpl $r12;
        org.jetbrains.kotlin.ir.linkage.IrDeserializer $r13;
        org.jetbrains.kotlin.ir.symbols.IrSymbol $r14, $r55;
        org.jetbrains.kotlin.ir.builders.IrBuilderWithScope $r16, $r17, $r24, $r41, $r44;
        org.jetbrains.kotlin.descriptors.DeclarationDescriptor $r20;
        org.jetbrains.kotlin.name.FqName $r21, $r51;
        org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl $r22, $r25, $r42, $r45;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r23, $r26, $r27, $r28, $r43, $r46, $r47;
        java.lang.StringBuilder $r29, $r30, $r33, $r34, $r35, $r36, $r37;
        org.jetbrains.kotlin.name.Name $r31;
        java.lang.IllegalStateException $r38;
        java.lang.Throwable $r40;
        java.lang.NullPointerException $r48;
        androidx.compose.compiler.plugins.kotlin.ComposeFqNames $r50;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r53, $r56;
        org.jetbrains.kotlin.ir.builders.IrGeneratorContext $r54;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization;

        r1 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.DeclarationContext;

        r2 := @parameter1: org.jetbrains.kotlin.ir.expressions.IrFunctionExpression;

        r3 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.expressions.IrFunctionExpression: org.jetbrains.kotlin.ir.declarations.IrSimpleFunction getFunction()>();

        $r10 = interfaceinvoke r3.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: org.jetbrains.kotlin.descriptors.FunctionDescriptor getDescriptor()>();

        $r11 = interfaceinvoke $r10.<org.jetbrains.kotlin.descriptors.FunctionDescriptor: java.util.List getValueParameters()>();

        i0 = interfaceinvoke $r11.<java.util.List: int size()>();

        if i0 <= 22 goto label01;

        $z9 = 1;

        goto label02;

     label01:
        $z9 = 0;

     label02:
        z0 = $z9;

        $z5 = virtualinvoke r1.<androidx.compose.compiler.plugins.kotlin.lower.DeclarationContext: boolean getComposable()>();

        if $z5 == 0 goto label04;

        if z0 == 0 goto label03;

        $r49 = "composableLambdaN";

        goto label06;

     label03:
        $r49 = "composableLambda";

        goto label06;

     label04:
        if z0 == 0 goto label05;

        $r49 = "composableLambdaNInstance";

        goto label06;

     label05:
        $r49 = "composableLambdaInstance";

     label06:
        r4 = $r49;

        $r50 = <androidx.compose.compiler.plugins.kotlin.ComposeFqNames: androidx.compose.compiler.plugins.kotlin.ComposeFqNames INSTANCE>;

        $r51 = virtualinvoke $r50.<androidx.compose.compiler.plugins.kotlin.ComposeFqNames: org.jetbrains.kotlin.name.FqName internalFqNameFor(java.lang.String)>(r4);

        r5 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getTopLevelFunction(org.jetbrains.kotlin.name.FqName)>($r51);

        $r52 = new org.jetbrains.kotlin.backend.common.lower.DeclarationIrBuilder;

        $r53 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        $r54 = (org.jetbrains.kotlin.ir.builders.IrGeneratorContext) $r53;

        $r55 = virtualinvoke r1.<androidx.compose.compiler.plugins.kotlin.lower.DeclarationContext: org.jetbrains.kotlin.ir.symbols.IrSymbol getSymbol()>();

        $i9 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.expressions.IrFunctionExpression: int getStartOffset()>();

        $i10 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.expressions.IrFunctionExpression: int getEndOffset()>();

        specialinvoke $r52.<org.jetbrains.kotlin.backend.common.lower.DeclarationIrBuilder: void <init>(org.jetbrains.kotlin.ir.builders.IrGeneratorContext,org.jetbrains.kotlin.ir.symbols.IrSymbol,int,int)>($r54, $r55, $i9, $i10);

        r6 = $r52;

        $r56 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        if $r56 != null goto label07;

        $r48 = new java.lang.NullPointerException;

        specialinvoke $r48.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type org.jetbrains.kotlin.backend.common.extensions.IrPluginContextImpl");

        throw $r48;

     label07:
        $r12 = (org.jetbrains.kotlin.backend.common.extensions.IrPluginContextImpl) $r56;

        $r13 = virtualinvoke $r12.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContextImpl: org.jetbrains.kotlin.ir.linkage.IrDeserializer getLinker()>();

        $r14 = (org.jetbrains.kotlin.ir.symbols.IrSymbol) r5;

        interfaceinvoke $r13.<org.jetbrains.kotlin.ir.linkage.IrDeserializer: org.jetbrains.kotlin.ir.declarations.IrDeclaration getDeclaration(org.jetbrains.kotlin.ir.symbols.IrSymbol)>($r14);

        $r16 = (org.jetbrains.kotlin.ir.builders.IrBuilderWithScope) r6;

        r7 = staticinvoke <org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt: org.jetbrains.kotlin.ir.expressions.IrFunctionAccessExpression irCall(org.jetbrains.kotlin.ir.builders.IrBuilderWithScope,org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol)>($r16, r5);

        z1 = 0;

        z2 = 0;

        i11 = 0;

        $z6 = virtualinvoke r1.<androidx.compose.compiler.plugins.kotlin.lower.DeclarationContext: boolean getComposable()>();

        if $z6 == 0 goto label08;

        $i8 = i11;

        i11 = i11 + 1;

        $r47 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: org.jetbrains.kotlin.ir.expressions.IrExpression irCurrentComposer()>();

        interfaceinvoke r7.<org.jetbrains.kotlin.ir.expressions.IrFunctionAccessExpression: void putValueArgument(int,org.jetbrains.kotlin.ir.expressions.IrExpression)>($i8, $r47);

     label08:
        i12 = i11 + 1;

        $r17 = (org.jetbrains.kotlin.ir.builders.IrBuilderWithScope) r6;

        $r18 = interfaceinvoke r7.<org.jetbrains.kotlin.ir.expressions.IrFunctionAccessExpression: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getSymbol()>();

        $r19 = interfaceinvoke $r18.<org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol: org.jetbrains.kotlin.descriptors.FunctionDescriptor getDescriptor()>();

        $r20 = (org.jetbrains.kotlin.descriptors.DeclarationDescriptor) $r19;

        $r21 = staticinvoke <org.jetbrains.kotlin.resolve.descriptorUtil.DescriptorUtilsKt: org.jetbrains.kotlin.name.FqName getFqNameSafe(org.jetbrains.kotlin.descriptors.DeclarationDescriptor)>($r20);

        $i1 = virtualinvoke $r21.<org.jetbrains.kotlin.name.FqName: int hashCode()>();

        $i2 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.expressions.IrFunctionExpression: int getStartOffset()>();

        $i3 = $i1 ^ $i2;

        $r22 = staticinvoke <org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt: org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl irInt(org.jetbrains.kotlin.ir.builders.IrBuilderWithScope,int)>($r17, $i3);

        $r23 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r22;

        interfaceinvoke r7.<org.jetbrains.kotlin.ir.expressions.IrFunctionAccessExpression: void putValueArgument(int,org.jetbrains.kotlin.ir.expressions.IrExpression)>(i11, $r23);

        i13 = i12 + 1;

        $r24 = (org.jetbrains.kotlin.ir.builders.IrBuilderWithScope) r6;

        $z7 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: boolean isTracked(org.jetbrains.kotlin.ir.expressions.IrFunctionExpression)>(r2);

        $r25 = staticinvoke <org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt: org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl irBoolean(org.jetbrains.kotlin.ir.builders.IrBuilderWithScope,boolean)>($r24, $z7);

        $r26 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r25;

        interfaceinvoke r7.<org.jetbrains.kotlin.ir.expressions.IrFunctionAccessExpression: void putValueArgument(int,org.jetbrains.kotlin.ir.expressions.IrExpression)>(i12, $r26);

        $z8 = virtualinvoke r1.<androidx.compose.compiler.plugins.kotlin.lower.DeclarationContext: boolean getComposable()>();

        if $z8 == 0 goto label09;

        $i7 = i13;

        i13 = i13 + 1;

        $r44 = (org.jetbrains.kotlin.ir.builders.IrBuilderWithScope) r6;

        $r45 = staticinvoke <org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt: org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl irNull(org.jetbrains.kotlin.ir.builders.IrBuilderWithScope)>($r44);

        $r46 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r45;

        interfaceinvoke r7.<org.jetbrains.kotlin.ir.expressions.IrFunctionAccessExpression: void putValueArgument(int,org.jetbrains.kotlin.ir.expressions.IrExpression)>($i7, $r46);

     label09:
        if z0 == 0 goto label10;

        $i6 = i13;

        i13 = i13 + 1;

        $r41 = (org.jetbrains.kotlin.ir.builders.IrBuilderWithScope) r6;

        $r42 = staticinvoke <org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt: org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl irInt(org.jetbrains.kotlin.ir.builders.IrBuilderWithScope,int)>($r41, i0);

        $r43 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r42;

        interfaceinvoke r7.<org.jetbrains.kotlin.ir.expressions.IrFunctionAccessExpression: void putValueArgument(int,org.jetbrains.kotlin.ir.expressions.IrExpression)>($i6, $r43);

     label10:
        $i4 = interfaceinvoke r7.<org.jetbrains.kotlin.ir.expressions.IrFunctionAccessExpression: int getValueArgumentsCount()>();

        if i13 < $i4 goto label11;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("function = ");

        $r31 = interfaceinvoke r3.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: org.jetbrains.kotlin.name.Name getName()>();

        $r32 = virtualinvoke $r31.<org.jetbrains.kotlin.name.Name: java.lang.String asString()>();

        $r33 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", count = ");

        $i5 = interfaceinvoke r7.<org.jetbrains.kotlin.ir.expressions.IrFunctionAccessExpression: int getValueArgumentsCount()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", index = ");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i13);

        r9 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        z4 = 0;

        $r38 = new java.lang.IllegalStateException;

        $r39 = virtualinvoke r9.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r38.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r39);

        $r40 = (java.lang.Throwable) $r38;

        throw $r40;

     label11:
        $r27 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r2;

        interfaceinvoke r7.<org.jetbrains.kotlin.ir.expressions.IrFunctionAccessExpression: void putValueArgument(int,org.jetbrains.kotlin.ir.expressions.IrExpression)>(i13, $r27);

        $r28 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r7;

        return $r28;
    }

    private final org.jetbrains.kotlin.ir.expressions.IrExpression rememberExpression(androidx.compose.compiler.plugins.kotlin.lower.FunctionContext, org.jetbrains.kotlin.ir.expressions.IrExpression, java.util.List)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization r0, r4;
        androidx.compose.compiler.plugins.kotlin.lower.FunctionContext r1;
        org.jetbrains.kotlin.ir.expressions.IrExpression r2, $r43, $r58, $r64, $r71;
        java.util.List r3, r13, $r35, $r46, $r51, $r77, $r82, $r83, r122;
        org.jetbrains.kotlin.ir.types.IrType r5, r6, r14, r15, $r33, $r34, $r55, $r74, $r87, $r119;
        byte b0, b1, b2, b3, b4;
        org.jetbrains.kotlin.ir.expressions.IrCall r7, r117, r118;
        java.util.Collection r8, $r66, $r89, r98, r121;
        java.util.Iterator r9, r91, r101, r110;
        java.lang.Object r10, $r36, $r47, $r52, $r68, $r72, $r78, $r84, r92, r100, r102, $r105, r109, r111;
        org.jetbrains.kotlin.ir.declarations.IrValueDeclaration r11, $r69, $r73, r93, $r94;
        org.jetbrains.kotlin.ir.expressions.impl.IrGetValueImpl r12, $r70;
        int i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        kotlin.Unit r16;
        boolean $z3, $z4, $z5, $z6, $z8, $z9, $z10, $z11, $z13, $z14, $z16, z18, $z20, z21, z22, $z24, z25, z26;
        org.jetbrains.kotlin.descriptors.DeclarationDescriptor $r17;
        androidx.compose.compiler.plugins.kotlin.ComposeFqNames $r18;
        org.jetbrains.kotlin.name.FqName $r19;
        org.jetbrains.kotlin.descriptors.PackageViewDescriptor $r20;
        org.jetbrains.kotlin.resolve.scopes.MemberScope $r21;
        org.jetbrains.kotlin.name.Name $r22;
        org.jetbrains.kotlin.incremental.components.NoLookupLocation $r23;
        org.jetbrains.kotlin.incremental.components.LookupLocation $r24;
        org.jetbrains.kotlin.backend.common.lower.DeclarationIrBuilder $r25, r116;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r26, $r39;
        org.jetbrains.kotlin.ir.builders.IrGeneratorContext $r27;
        org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol $r28, $r31;
        org.jetbrains.kotlin.ir.symbols.IrSymbol $r29;
        org.jetbrains.kotlin.ir.builders.IrBuilderWithScope $r30, $r44, $r45, $r65, $r67;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r32, $r50, r96;
        org.jetbrains.kotlin.descriptors.ValueParameterDescriptor $r37, $r48, $r53, $r79, $r85;
        org.jetbrains.kotlin.types.KotlinType $r38, $r49, $r54, $r88, $r104, $r113;
        org.jetbrains.kotlin.ir.descriptors.IrBuiltIns $r40;
        java.util.ArrayList $r41;
        org.jetbrains.kotlin.ir.expressions.impl.IrVarargImpl $r42;
        androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization$rememberExpression$$inlined$apply$lambda$1 $r56;
        kotlin.jvm.functions.Function2 $r57;
        org.jetbrains.kotlin.ir.declarations.IrDeclarationParent $r59;
        org.jetbrains.kotlin.ir.IrElement $r60, $r61;
        org.jetbrains.kotlin.ir.expressions.IrFunctionAccessExpression $r62, $r63;
        java.util.NoSuchElementException $r75;
        java.lang.Throwable $r76, $r81;
        java.lang.IllegalArgumentException $r80;
        org.jetbrains.kotlin.ir.declarations.IrVariable $r86;
        java.lang.Iterable $r90, $r99, $r108, $r120;
        org.jetbrains.kotlin.ir.declarations.IrFunction $r95;
        org.jetbrains.kotlin.descriptors.ModuleDescriptor r97;
        org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor r103, $r106, $r107, $r112, $r114;
        org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol $r115;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization;

        r1 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.FunctionContext;

        r2 := @parameter1: org.jetbrains.kotlin.ir.expressions.IrExpression;

        r3 := @parameter2: java.util.List;

        $r90 = (java.lang.Iterable) r3;

        $z3 = $r90 instanceof java.util.Collection;

        if $z3 == 0 goto label01;

        $r89 = (java.util.Collection) $r90;

        $z11 = interfaceinvoke $r89.<java.util.Collection: boolean isEmpty()>();

        if $z11 == 0 goto label01;

        $z13 = 0;

        goto label09;

     label01:
        r91 = interfaceinvoke $r90.<java.lang.Iterable: java.util.Iterator iterator()>();

     label02:
        $z14 = interfaceinvoke r91.<java.util.Iterator: boolean hasNext()>();

        if $z14 == 0 goto label08;

        r92 = interfaceinvoke r91.<java.util.Iterator: java.lang.Object next()>();

        r93 = (org.jetbrains.kotlin.ir.declarations.IrValueDeclaration) r92;

        $r94 = r93;

        $z8 = r93 instanceof org.jetbrains.kotlin.ir.declarations.IrVariable;

        if $z8 != 0 goto label03;

        $r94 = null;

     label03:
        $r86 = (org.jetbrains.kotlin.ir.declarations.IrVariable) $r94;

        if $r86 == null goto label04;

        $z10 = interfaceinvoke $r86.<org.jetbrains.kotlin.ir.declarations.IrVariable: boolean isVar()>();

        if $z10 == 1 goto label05;

        goto label04;

     label04:
        $r87 = interfaceinvoke r93.<org.jetbrains.kotlin.ir.declarations.IrValueDeclaration: org.jetbrains.kotlin.ir.types.IrType getType()>();

        $r88 = staticinvoke <org.jetbrains.kotlin.ir.types.IrTypesKt: org.jetbrains.kotlin.types.KotlinType toKotlinType(org.jetbrains.kotlin.ir.types.IrType)>($r87);

        $z9 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: boolean isStable(org.jetbrains.kotlin.types.KotlinType)>($r88);

        if $z9 != 0 goto label06;

     label05:
        $z16 = 1;

        goto label07;

     label06:
        $z16 = 0;

     label07:
        if $z16 == 0 goto label02;

        $z13 = 1;

        goto label09;

     label08:
        $z13 = 0;

     label09:
        if $z13 == 0 goto label10;

        return r2;

     label10:
        $i6 = interfaceinvoke r3.<java.util.List: int size()>();

        $i12 = $i6 + 1;

        $r95 = virtualinvoke r1.<androidx.compose.compiler.plugins.kotlin.lower.FunctionContext: org.jetbrains.kotlin.ir.declarations.IrFunction getDeclaration()>();

        r96 = interfaceinvoke $r95.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.descriptors.FunctionDescriptor getDescriptor()>();

        $r17 = (org.jetbrains.kotlin.descriptors.DeclarationDescriptor) r96;

        r97 = staticinvoke <org.jetbrains.kotlin.resolve.descriptorUtil.DescriptorUtilsKt: org.jetbrains.kotlin.descriptors.ModuleDescriptor getModule(org.jetbrains.kotlin.descriptors.DeclarationDescriptor)>($r17);

        $r18 = <androidx.compose.compiler.plugins.kotlin.ComposeFqNames: androidx.compose.compiler.plugins.kotlin.ComposeFqNames INSTANCE>;

        $r19 = virtualinvoke $r18.<androidx.compose.compiler.plugins.kotlin.ComposeFqNames: org.jetbrains.kotlin.name.FqName getPackage()>();

        $r20 = interfaceinvoke r97.<org.jetbrains.kotlin.descriptors.ModuleDescriptor: org.jetbrains.kotlin.descriptors.PackageViewDescriptor getPackage(org.jetbrains.kotlin.name.FqName)>($r19);

        $r21 = interfaceinvoke $r20.<org.jetbrains.kotlin.descriptors.PackageViewDescriptor: org.jetbrains.kotlin.resolve.scopes.MemberScope getMemberScope()>();

        $r22 = staticinvoke <org.jetbrains.kotlin.name.Name: org.jetbrains.kotlin.name.Name identifier(java.lang.String)>("remember");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r22, "Name.identifier(\"remember\")");

        $r23 = <org.jetbrains.kotlin.incremental.components.NoLookupLocation: org.jetbrains.kotlin.incremental.components.NoLookupLocation FROM_BACKEND>;

        $r24 = (org.jetbrains.kotlin.incremental.components.LookupLocation) $r23;

        r98 = interfaceinvoke $r21.<org.jetbrains.kotlin.resolve.scopes.MemberScope: java.util.Collection getContributedFunctions(org.jetbrains.kotlin.name.Name,org.jetbrains.kotlin.incremental.components.LookupLocation)>($r22, $r24);

        $r99 = (java.lang.Iterable) r98;

        r100 = null;

        z18 = 0;

        r101 = interfaceinvoke $r99.<java.lang.Iterable: java.util.Iterator iterator()>();

     label11:
        $z4 = interfaceinvoke r101.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label18;

        r102 = interfaceinvoke r101.<java.util.Iterator: java.lang.Object next()>();

        r103 = (org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor) r102;

        $r82 = interfaceinvoke r103.<org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor: java.util.List getValueParameters()>();

        $i11 = interfaceinvoke $r82.<java.util.List: int size()>();

        if $i11 != $i12 goto label14;

        $r83 = interfaceinvoke r103.<org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor: java.util.List getValueParameters()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r83, "it.valueParameters");

        $r84 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object firstOrNull(java.util.List)>($r83);

        $r85 = (org.jetbrains.kotlin.descriptors.ValueParameterDescriptor) $r84;

        if $r85 == null goto label12;

        $r104 = interfaceinvoke $r85.<org.jetbrains.kotlin.descriptors.ValueParameterDescriptor: org.jetbrains.kotlin.types.KotlinType getVarargElementType()>();

        goto label13;

     label12:
        $r104 = null;

     label13:
        if $r104 != null goto label14;

        $z20 = 1;

        goto label15;

     label14:
        $z20 = 0;

     label15:
        if $z20 == 0 goto label17;

        if z18 == 0 goto label16;

        $r105 = null;

        goto label20;

     label16:
        r100 = r102;

        z18 = 1;

     label17:
        goto label11;

     label18:
        if z18 != 0 goto label19;

        $r105 = null;

        goto label20;

     label19:
        $r105 = r100;

     label20:
        $r106 = (org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor) $r105;

        $r107 = $r106;

        if $r106 == null goto label21;

        goto label31;

     label21:
        $r108 = (java.lang.Iterable) r98;

        z21 = 0;

        r109 = null;

        z22 = 0;

        r110 = interfaceinvoke $r108.<java.lang.Iterable: java.util.Iterator iterator()>();

     label22:
        $z5 = interfaceinvoke r110.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label29;

        r111 = interfaceinvoke r110.<java.util.Iterator: java.lang.Object next()>();

        $r112 = (org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor) r111;

        $r77 = interfaceinvoke $r112.<org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor: java.util.List getValueParameters()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r77, "it.valueParameters");

        $r78 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object firstOrNull(java.util.List)>($r77);

        $r79 = (org.jetbrains.kotlin.descriptors.ValueParameterDescriptor) $r78;

        if $r79 == null goto label23;

        $r113 = interfaceinvoke $r79.<org.jetbrains.kotlin.descriptors.ValueParameterDescriptor: org.jetbrains.kotlin.types.KotlinType getVarargElementType()>();

        goto label24;

     label23:
        $r113 = null;

     label24:
        if $r113 == null goto label25;

        $z24 = 1;

        goto label26;

     label25:
        $z24 = 0;

     label26:
        if $z24 == 0 goto label28;

        if z22 == 0 goto label27;

        $r80 = new java.lang.IllegalArgumentException;

        specialinvoke $r80.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Collection contains more than one matching element.");

        $r81 = (java.lang.Throwable) $r80;

        throw $r81;

     label27:
        r109 = r111;

        z22 = 1;

     label28:
        goto label22;

     label29:
        if z22 != 0 goto label30;

        $r75 = new java.util.NoSuchElementException;

        specialinvoke $r75.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Collection contains no element matching the predicate.");

        $r76 = (java.lang.Throwable) $r75;

        throw $r76;

     label30:
        $r107 = (org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor) r109;

     label31:
        $r114 = $r107;

        $r115 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol referenceSimpleFunction(org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor)>($r107);

        $r25 = new org.jetbrains.kotlin.backend.common.lower.DeclarationIrBuilder;

        $r26 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        $r27 = (org.jetbrains.kotlin.ir.builders.IrGeneratorContext) $r26;

        $r28 = virtualinvoke r1.<androidx.compose.compiler.plugins.kotlin.lower.FunctionContext: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getSymbol()>();

        $r29 = (org.jetbrains.kotlin.ir.symbols.IrSymbol) $r28;

        $i7 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.expressions.IrExpression: int getStartOffset()>();

        $i8 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.expressions.IrExpression: int getEndOffset()>();

        specialinvoke $r25.<org.jetbrains.kotlin.backend.common.lower.DeclarationIrBuilder: void <init>(org.jetbrains.kotlin.ir.builders.IrGeneratorContext,org.jetbrains.kotlin.ir.symbols.IrSymbol,int,int)>($r27, $r29, $i7, $i8);

        r116 = $r25;

        $r30 = (org.jetbrains.kotlin.ir.builders.IrBuilderWithScope) r116;

        $r31 = (org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol) $r115;

        $r32 = (org.jetbrains.kotlin.descriptors.FunctionDescriptor) $r107;

        $r33 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.expressions.IrExpression: org.jetbrains.kotlin.ir.types.IrType getType()>();

        r117 = staticinvoke <org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt: org.jetbrains.kotlin.ir.expressions.IrCall irCall(org.jetbrains.kotlin.ir.builders.IrBuilderWithScope,org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol,org.jetbrains.kotlin.descriptors.FunctionDescriptor,org.jetbrains.kotlin.ir.types.IrType)>($r30, $r31, $r32, $r33);

        z25 = 0;

        z26 = 0;

        r118 = r117;

        r4 = r0;

        $r34 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.expressions.IrExpression: org.jetbrains.kotlin.ir.types.IrType getType()>();

        interfaceinvoke r118.<org.jetbrains.kotlin.ir.expressions.IrCall: void putTypeArgument(int,org.jetbrains.kotlin.ir.types.IrType)>(0, $r34);

        if $r106 == null goto label36;

        $i13 = 1;

        $i14 = interfaceinvoke r3.<java.util.List: int size()>();

        if 1 > $i14 goto label33;

     label32:
        $i10 = $i13 - 1;

        $r72 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>($i10);

        $r73 = (org.jetbrains.kotlin.ir.declarations.IrValueDeclaration) $r72;

        $r74 = interfaceinvoke $r73.<org.jetbrains.kotlin.ir.declarations.IrValueDeclaration: org.jetbrains.kotlin.ir.types.IrType getType()>();

        interfaceinvoke r118.<org.jetbrains.kotlin.ir.expressions.IrCall: void putTypeArgument(int,org.jetbrains.kotlin.ir.types.IrType)>($i13, $r74);

        if $i13 == $i14 goto label33;

        $i13 = $i13 + 1;

        goto label32;

     label33:
        $i15 = 0;

        $r66 = (java.util.Collection) r3;

        $i16 = interfaceinvoke $r66.<java.util.Collection: int size()>();

     label34:
        if $i15 >= $i16 goto label35;

        $r67 = (org.jetbrains.kotlin.ir.builders.IrBuilderWithScope) r116;

        $r68 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>($i15);

        $r69 = (org.jetbrains.kotlin.ir.declarations.IrValueDeclaration) $r68;

        $r70 = staticinvoke <org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt: org.jetbrains.kotlin.ir.expressions.impl.IrGetValueImpl irGet(org.jetbrains.kotlin.ir.builders.IrBuilderWithScope,org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)>($r67, $r69);

        $r71 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r70;

        interfaceinvoke r118.<org.jetbrains.kotlin.ir.expressions.IrCall: void putValueArgument(int,org.jetbrains.kotlin.ir.expressions.IrExpression)>($i15, $r71);

        $i15 = $i15 + 1;

        goto label34;

     label35:
        $i17 = interfaceinvoke r3.<java.util.List: int size()>();

        goto label39;

     label36:
        $r35 = interfaceinvoke $r107.<org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor: java.util.List getValueParameters()>();

        $r36 = interfaceinvoke $r35.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r36, "rememberFunctionDescriptor.valueParameters[0]");

        $r37 = (org.jetbrains.kotlin.descriptors.ValueParameterDescriptor) $r36;

        $r38 = interfaceinvoke $r37.<org.jetbrains.kotlin.descriptors.ValueParameterDescriptor: org.jetbrains.kotlin.types.KotlinType getType()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r38, "rememberFunctionDescriptor.valueParameters[0].type");

        $r119 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: org.jetbrains.kotlin.ir.types.IrType toIrType(org.jetbrains.kotlin.types.KotlinType)>($r38);

        $r39 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        $r40 = interfaceinvoke $r39.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.ir.descriptors.IrBuiltIns getIrBuiltIns()>();

        $r120 = (java.lang.Iterable) r3;

        r5 = virtualinvoke $r40.<org.jetbrains.kotlin.ir.descriptors.IrBuiltIns: org.jetbrains.kotlin.ir.types.IrType getAnyType()>();

        r6 = $r119;

        b0 = -1;

        b1 = -1;

        b2 = 0;

        r7 = r118;

        $r41 = new java.util.ArrayList;

        $i9 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r120, 10);

        specialinvoke $r41.<java.util.ArrayList: void <init>(int)>($i9);

        r8 = (java.util.Collection) $r41;

        r9 = interfaceinvoke $r120.<java.lang.Iterable: java.util.Iterator iterator()>();

     label37:
        $z6 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label38;

        r10 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.jetbrains.kotlin.ir.declarations.IrValueDeclaration) r10;

        r121 = r8;

        $r65 = (org.jetbrains.kotlin.ir.builders.IrBuilderWithScope) r116;

        r12 = staticinvoke <org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt: org.jetbrains.kotlin.ir.expressions.impl.IrGetValueImpl irGet(org.jetbrains.kotlin.ir.builders.IrBuilderWithScope,org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)>($r65, r11);

        interfaceinvoke r121.<java.util.Collection: boolean add(java.lang.Object)>(r12);

        goto label37;

     label38:
        r122 = (java.util.List) r8;

        r13 = r122;

        r14 = r5;

        r15 = r6;

        b3 = b0;

        b4 = b1;

        $r42 = new org.jetbrains.kotlin.ir.expressions.impl.IrVarargImpl;

        specialinvoke $r42.<org.jetbrains.kotlin.ir.expressions.impl.IrVarargImpl: void <init>(int,int,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.types.IrType,java.util.List)>(b4, b3, r15, r14, r13);

        $r43 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r42;

        interfaceinvoke r7.<org.jetbrains.kotlin.ir.expressions.IrCall: void putValueArgument(int,org.jetbrains.kotlin.ir.expressions.IrExpression)>(b2, $r43);

        $i17 = 1;

     label39:
        i5 = $i17;

        $r44 = (org.jetbrains.kotlin.ir.builders.IrBuilderWithScope) r116;

        $r45 = (org.jetbrains.kotlin.ir.builders.IrBuilderWithScope) r116;

        $r46 = interfaceinvoke $r114.<org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor: java.util.List getValueParameters()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r46, "rememberFunctionDescriptor.valueParameters");

        $r47 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object last(java.util.List)>($r46);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r47, "rememberFunctionDescriptor.valueParameters.last()");

        $r48 = (org.jetbrains.kotlin.descriptors.ValueParameterDescriptor) $r47;

        $r49 = interfaceinvoke $r48.<org.jetbrains.kotlin.descriptors.ValueParameterDescriptor: org.jetbrains.kotlin.types.KotlinType getType()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r49, "rememberFunctionDescript\u2026lueParameters.last().type");

        $r50 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.descriptors.FunctionDescriptor createFunctionDescriptor$default(androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering,org.jetbrains.kotlin.ir.builders.IrBuilderWithScope,org.jetbrains.kotlin.types.KotlinType,org.jetbrains.kotlin.descriptors.DeclarationDescriptor,int,java.lang.Object)>(r0, $r45, $r49, null, 2, null);

        $r51 = interfaceinvoke $r114.<org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor: java.util.List getValueParameters()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r51, "rememberFunctionDescriptor.valueParameters");

        $r52 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object last(java.util.List)>($r51);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r52, "rememberFunctionDescriptor.valueParameters.last()");

        $r53 = (org.jetbrains.kotlin.descriptors.ValueParameterDescriptor) $r52;

        $r54 = interfaceinvoke $r53.<org.jetbrains.kotlin.descriptors.ValueParameterDescriptor: org.jetbrains.kotlin.types.KotlinType getType()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r54, "rememberFunctionDescript\u2026lueParameters.last().type");

        $r55 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: org.jetbrains.kotlin.ir.types.IrType toIrType(org.jetbrains.kotlin.types.KotlinType)>($r54);

        $r56 = new androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization$rememberExpression$$inlined$apply$lambda$1;

        specialinvoke $r56.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization$rememberExpression$$inlined$apply$lambda$1: void <init>(androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor,java.util.List,org.jetbrains.kotlin.backend.common.lower.DeclarationIrBuilder,org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor)>(r0, r2, $r106, r3, r116, $r114);

        $r57 = (kotlin.jvm.functions.Function2) $r56;

        $r58 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: org.jetbrains.kotlin.ir.expressions.IrExpression irLambdaExpression(org.jetbrains.kotlin.ir.builders.IrBuilderWithScope,org.jetbrains.kotlin.descriptors.FunctionDescriptor,org.jetbrains.kotlin.ir.types.IrType,kotlin.jvm.functions.Function2)>($r44, $r50, $r55, $r57);

        interfaceinvoke r118.<org.jetbrains.kotlin.ir.expressions.IrCall: void putValueArgument(int,org.jetbrains.kotlin.ir.expressions.IrExpression)>(i5, $r58);

        r16 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r60 = (org.jetbrains.kotlin.ir.IrElement) r117;

        $r59 = (org.jetbrains.kotlin.ir.declarations.IrDeclarationParent) $r95;

        $r61 = staticinvoke <org.jetbrains.kotlin.ir.util.PatchDeclarationParentsKt: org.jetbrains.kotlin.ir.IrElement patchDeclarationParents(org.jetbrains.kotlin.ir.IrElement,org.jetbrains.kotlin.ir.declarations.IrDeclarationParent)>($r60, $r59);

        $r62 = (org.jetbrains.kotlin.ir.expressions.IrFunctionAccessExpression) $r61;

        $r63 = specialinvoke r4.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: org.jetbrains.kotlin.ir.expressions.IrFunctionAccessExpression markAsSynthetic(org.jetbrains.kotlin.ir.expressions.IrFunctionAccessExpression,boolean)>($r62, 1);

        $r64 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r63;

        return $r64;
    }

    private final org.jetbrains.kotlin.ir.expressions.IrFunctionAccessExpression markAsSynthetic(org.jetbrains.kotlin.ir.expressions.IrFunctionAccessExpression, boolean)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization r0;
        org.jetbrains.kotlin.ir.expressions.IrFunctionAccessExpression $r1;
        boolean z0;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r2;
        androidx.compose.compiler.plugins.kotlin.WeakBindingTrace $r3;
        androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices $r4;
        org.jetbrains.kotlin.util.slicedMap.WritableSlice $r5;
        org.jetbrains.kotlin.ir.declarations.IrAttributeContainer $r6;
        java.lang.Boolean $r7;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrFunctionAccessExpression;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        $r3 = staticinvoke <androidx.compose.compiler.plugins.kotlin.WeakBindingTraceKt: androidx.compose.compiler.plugins.kotlin.WeakBindingTrace getIrTrace(org.jetbrains.kotlin.backend.common.extensions.IrPluginContext)>($r2);

        $r4 = <androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices: androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices INSTANCE>;

        $r5 = virtualinvoke $r4.<androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices: org.jetbrains.kotlin.util.slicedMap.WritableSlice getIS_SYNTHETIC_COMPOSABLE_CALL()>();

        $r6 = (org.jetbrains.kotlin.ir.declarations.IrAttributeContainer) $r1;

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke $r3.<androidx.compose.compiler.plugins.kotlin.WeakBindingTrace: void record(org.jetbrains.kotlin.util.slicedMap.WritableSlice,org.jetbrains.kotlin.ir.declarations.IrAttributeContainer,java.lang.Object)>($r5, $r6, $r7);

     label1:
        return $r1;
    }

    private final boolean isInlineArgument(org.jetbrains.kotlin.ir.expressions.IrFunctionExpression)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization r0;
        org.jetbrains.kotlin.ir.expressions.IrFunctionExpression $r1;
        org.jetbrains.kotlin.com.intellij.psi.PsiElement r2, r3, $r9, $r14;
        boolean z0, z1, z3, z4, $z6, $z7;
        org.jetbrains.kotlin.psi.KtFunctionLiteral r4, r5, $r10;
        org.jetbrains.kotlin.ir.declarations.IrSimpleFunction $r6;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r7;
        org.jetbrains.kotlin.descriptors.DeclarationDescriptor $r8;
        org.jetbrains.kotlin.psi.KtFunction $r11;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r12;
        org.jetbrains.kotlin.resolve.BindingContext $r13;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrFunctionExpression;

        $r6 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrFunctionExpression: org.jetbrains.kotlin.ir.declarations.IrSimpleFunction getFunction()>();

        $r7 = interfaceinvoke $r6.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: org.jetbrains.kotlin.descriptors.FunctionDescriptor getDescriptor()>();

        $r8 = (org.jetbrains.kotlin.descriptors.DeclarationDescriptor) $r7;

        $r9 = staticinvoke <org.jetbrains.kotlin.js.resolve.diagnostics.SourceLocationUtilsKt: org.jetbrains.kotlin.com.intellij.psi.PsiElement findPsi(org.jetbrains.kotlin.descriptors.DeclarationDescriptor)>($r8);

        if $r9 == null goto label4;

        r2 = $r9;

        z0 = 0;

        z1 = 0;

        r3 = r2;

        $r14 = r3;

        $z6 = r3 instanceof org.jetbrains.kotlin.psi.KtFunctionLiteral;

        if $z6 != 0 goto label1;

        $r14 = null;

     label1:
        $r10 = (org.jetbrains.kotlin.psi.KtFunctionLiteral) $r14;

        if $r10 == null goto label3;

        r4 = $r10;

        z3 = 0;

        z4 = 0;

        r5 = r4;

        $r11 = (org.jetbrains.kotlin.psi.KtFunction) r5;

        $r12 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        $r13 = interfaceinvoke $r12.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.resolve.BindingContext getBindingContext()>();

        $z7 = staticinvoke <org.jetbrains.kotlin.resolve.inline.InlineUtil: boolean isInlinedArgument(org.jetbrains.kotlin.psi.KtFunction,org.jetbrains.kotlin.resolve.BindingContext,boolean)>($r11, $r13, 0);

        if $z7 == 0 goto label2;

        return 1;

     label2:
        goto label3;

     label3:
        goto label4;

     label4:
        return 0;
    }

    private final boolean isNullOrStable(org.jetbrains.kotlin.ir.expressions.IrExpression)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r1;
        org.jetbrains.kotlin.ir.types.IrType $r2;
        org.jetbrains.kotlin.types.KotlinType $r3;
        boolean $z0, $z1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrExpression;

        if $r1 == null goto label1;

        $r2 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrExpression: org.jetbrains.kotlin.ir.types.IrType getType()>();

        $r3 = staticinvoke <org.jetbrains.kotlin.ir.types.IrTypesKt: org.jetbrains.kotlin.types.KotlinType toKotlinType(org.jetbrains.kotlin.ir.types.IrType)>($r2);

        $z0 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: boolean isStable(org.jetbrains.kotlin.types.KotlinType)>($r3);

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    private final boolean isTracked(org.jetbrains.kotlin.ir.expressions.IrFunctionExpression)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization r0;
        org.jetbrains.kotlin.ir.expressions.IrFunctionExpression $r1;
        org.jetbrains.kotlin.ir.declarations.IrSimpleFunction $r2;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r3;
        org.jetbrains.kotlin.descriptors.annotations.Annotated $r4;
        java.lang.Boolean $r5, $r6;
        boolean $z0, $z1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrFunctionExpression;

        $r2 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrFunctionExpression: org.jetbrains.kotlin.ir.declarations.IrSimpleFunction getFunction()>();

        $r3 = interfaceinvoke $r2.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: org.jetbrains.kotlin.descriptors.FunctionDescriptor getDescriptor()>();

        $r4 = (org.jetbrains.kotlin.descriptors.annotations.Annotated) $r3;

        $r5 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeFqNamesKt: java.lang.Boolean composableTrackedContract(org.jetbrains.kotlin.descriptors.annotations.Annotated)>($r4);

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r5, $r6);

        $z1 = $z0 ^ 1;

        return $z1;
    }

    public void <init>(org.jetbrains.kotlin.backend.common.extensions.IrPluginContext, org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper, org.jetbrains.kotlin.resolve.BindingTrace)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization r0;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext r1;
        org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper r2;
        org.jetbrains.kotlin.resolve.BindingTrace r3;
        boolean z0;
        java.util.ArrayList $r4;
        java.util.List $r5;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization;

        r1 := @parameter0: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext;

        r2 := @parameter1: org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper;

        r3 := @parameter2: org.jetbrains.kotlin.resolve.BindingTrace;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "context");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "symbolRemapper");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "bindingTrace");

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: void <init>(org.jetbrains.kotlin.backend.common.extensions.IrPluginContext,org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper,org.jetbrains.kotlin.resolve.BindingTrace)>(r1, r2, r3);

        z0 = 0;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = (java.util.List) $r4;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization: java.util.List declarationContextStack> = $r5;

        return;
    }

androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization$rememberExpression$$inlined$apply$lambda$1
<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization$rememberExpression$$inlined$apply$lambda$1: androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization this$0>
<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization$rememberExpression$$inlined$apply$lambda$1: org.jetbrains.kotlin.ir.expressions.IrExpression $expression$inlined>
<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization$rememberExpression$$inlined$apply$lambda$1: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor $directRememberFunction$inlined>
<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization$rememberExpression$$inlined$apply$lambda$1: java.util.List $captures$inlined>
<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization$rememberExpression$$inlined$apply$lambda$1: org.jetbrains.kotlin.backend.common.lower.DeclarationIrBuilder $irBuilder$inlined>
<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization$rememberExpression$$inlined$apply$lambda$1: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor $rememberFunctionDescriptor$inlined>
    void <init>(androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization, org.jetbrains.kotlin.ir.expressions.IrExpression, org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor, java.util.List, org.jetbrains.kotlin.backend.common.lower.DeclarationIrBuilder, org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization$rememberExpression$$inlined$apply$lambda$1 r0;
        androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization r1;
        org.jetbrains.kotlin.ir.expressions.IrExpression r2;
        org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor r3, r6;
        java.util.List r4;
        org.jetbrains.kotlin.backend.common.lower.DeclarationIrBuilder r5;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization$rememberExpression$$inlined$apply$lambda$1;

        r1 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization;

        r2 := @parameter1: org.jetbrains.kotlin.ir.expressions.IrExpression;

        r3 := @parameter2: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor;

        r4 := @parameter3: java.util.List;

        r5 := @parameter4: org.jetbrains.kotlin.backend.common.lower.DeclarationIrBuilder;

        r6 := @parameter5: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization$rememberExpression$$inlined$apply$lambda$1: androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization this$0> = r1;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization$rememberExpression$$inlined$apply$lambda$1: org.jetbrains.kotlin.ir.expressions.IrExpression $expression$inlined> = r2;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization$rememberExpression$$inlined$apply$lambda$1: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor $directRememberFunction$inlined> = r3;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization$rememberExpression$$inlined$apply$lambda$1: java.util.List $captures$inlined> = r4;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization$rememberExpression$$inlined$apply$lambda$1: org.jetbrains.kotlin.backend.common.lower.DeclarationIrBuilder $irBuilder$inlined> = r5;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization$rememberExpression$$inlined$apply$lambda$1: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor $rememberFunctionDescriptor$inlined> = r6;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(2);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization$rememberExpression$$inlined$apply$lambda$1 r0;
        java.lang.Object r1, r2;
        org.jetbrains.kotlin.ir.declarations.IrFunction $r3;
        org.jetbrains.kotlin.ir.builders.IrBlockBodyBuilder $r4;
        kotlin.Unit $r5;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization$rememberExpression$$inlined$apply$lambda$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (org.jetbrains.kotlin.ir.builders.IrBlockBodyBuilder) r1;

        $r3 = (org.jetbrains.kotlin.ir.declarations.IrFunction) r2;

        virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization$rememberExpression$$inlined$apply$lambda$1: void invoke(org.jetbrains.kotlin.ir.builders.IrBlockBodyBuilder,org.jetbrains.kotlin.ir.declarations.IrFunction)>($r4, $r3);

        $r5 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r5;
    }

    public final void invoke(org.jetbrains.kotlin.ir.builders.IrBlockBodyBuilder, org.jetbrains.kotlin.ir.declarations.IrFunction)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization$rememberExpression$$inlined$apply$lambda$1 r0;
        org.jetbrains.kotlin.ir.builders.IrBlockBodyBuilder $r1;
        org.jetbrains.kotlin.ir.declarations.IrFunction r2;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r3;
        org.jetbrains.kotlin.ir.builders.IrBuilderWithScope $r4;
        org.jetbrains.kotlin.ir.expressions.impl.IrReturnImpl $r5;
        org.jetbrains.kotlin.ir.IrStatement $r6;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization$rememberExpression$$inlined$apply$lambda$1;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.builders.IrBlockBodyBuilder;

        r2 := @parameter1: org.jetbrains.kotlin.ir.declarations.IrFunction;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$receiver");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "it");

        $r4 = (org.jetbrains.kotlin.ir.builders.IrBuilderWithScope) $r1;

        $r3 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposerLambdaMemoization$rememberExpression$$inlined$apply$lambda$1: org.jetbrains.kotlin.ir.expressions.IrExpression $expression$inlined>;

        $r5 = staticinvoke <org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt: org.jetbrains.kotlin.ir.expressions.impl.IrReturnImpl irReturn(org.jetbrains.kotlin.ir.builders.IrBuilderWithScope,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r4, $r3);

        $r6 = (org.jetbrains.kotlin.ir.IrStatement) $r5;

        virtualinvoke $r1.<org.jetbrains.kotlin.ir.builders.IrBlockBodyBuilder: void unaryPlus(org.jetbrains.kotlin.ir.IrStatement)>($r6);

        return;
    }

