androidx.core.provider.FontsContractCompat
<androidx.core.provider.FontsContractCompat: java.lang.String PARCEL_FONT_RESULTS>
<androidx.core.provider.FontsContractCompat: int RESULT_CODE_PROVIDER_NOT_FOUND>
<androidx.core.provider.FontsContractCompat: int RESULT_CODE_WRONG_CERTIFICATES>
    private void <init>()
    {
        androidx.core.provider.FontsContractCompat r0;

        r0 := @this: androidx.core.provider.FontsContractCompat;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static android.graphics.Typeface buildTypeface(android.content.Context, android.os.CancellationSignal, androidx.core.provider.FontsContractCompat$FontInfo[])
    {
        android.content.Context r0;
        android.os.CancellationSignal r1;
        androidx.core.provider.FontsContractCompat$FontInfo[] r2;
        android.graphics.Typeface $r3;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.os.CancellationSignal;

        r2 := @parameter2: androidx.core.provider.FontsContractCompat$FontInfo[];

        $r3 = staticinvoke <androidx.core.graphics.TypefaceCompat: android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int)>(r0, r1, r2, 0);

        return $r3;
    }

    public static androidx.core.provider.FontsContractCompat$FontFamilyResult fetchFonts(android.content.Context, android.os.CancellationSignal, androidx.core.provider.FontRequest) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.content.Context r0;
        android.os.CancellationSignal r1;
        androidx.core.provider.FontRequest r2;
        androidx.core.provider.FontsContractCompat$FontFamilyResult $r3;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.os.CancellationSignal;

        r2 := @parameter2: androidx.core.provider.FontRequest;

        $r3 = staticinvoke <androidx.core.provider.FontProvider: androidx.core.provider.FontsContractCompat$FontFamilyResult getFontFamilyResult(android.content.Context,androidx.core.provider.FontRequest,android.os.CancellationSignal)>(r0, r2, r1);

        return $r3;
    }

    public static void requestFont(android.content.Context, androidx.core.provider.FontRequest, androidx.core.provider.FontsContractCompat$FontRequestCallback, android.os.Handler)
    {
        android.content.Context r0, $r7;
        androidx.core.provider.FontRequest r1;
        androidx.core.provider.FontsContractCompat$FontRequestCallback r2;
        android.os.Handler r3;
        androidx.core.provider.CallbackWithHandler r4, $r6;
        java.util.concurrent.Executor r5;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: androidx.core.provider.FontRequest;

        r2 := @parameter2: androidx.core.provider.FontsContractCompat$FontRequestCallback;

        r3 := @parameter3: android.os.Handler;

        $r6 = new androidx.core.provider.CallbackWithHandler;

        specialinvoke $r6.<androidx.core.provider.CallbackWithHandler: void <init>(androidx.core.provider.FontsContractCompat$FontRequestCallback)>(r2);

        r4 = $r6;

        r5 = staticinvoke <androidx.core.provider.RequestExecutor: java.util.concurrent.Executor createHandlerExecutor(android.os.Handler)>(r3);

        $r7 = virtualinvoke r0.<android.content.Context: android.content.Context getApplicationContext()>();

        staticinvoke <androidx.core.provider.FontRequestWorker: android.graphics.Typeface requestFontAsync(android.content.Context,androidx.core.provider.FontRequest,int,java.util.concurrent.Executor,androidx.core.provider.CallbackWithHandler)>($r7, r1, 0, r5, r4);

        return;
    }

    public static android.graphics.Typeface requestFont(android.content.Context, androidx.core.provider.FontRequest, int, boolean, int, android.os.Handler, androidx.core.provider.FontsContractCompat$FontRequestCallback)
    {
        android.content.Context r0;
        androidx.core.provider.FontRequest r1;
        int i0, i1;
        boolean z0;
        android.os.Handler r2;
        androidx.core.provider.FontsContractCompat$FontRequestCallback r3;
        androidx.core.provider.CallbackWithHandler r4, $r5;
        android.graphics.Typeface $r6, $r7;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: androidx.core.provider.FontRequest;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        i1 := @parameter4: int;

        r2 := @parameter5: android.os.Handler;

        r3 := @parameter6: androidx.core.provider.FontsContractCompat$FontRequestCallback;

        $r5 = new androidx.core.provider.CallbackWithHandler;

        specialinvoke $r5.<androidx.core.provider.CallbackWithHandler: void <init>(androidx.core.provider.FontsContractCompat$FontRequestCallback,android.os.Handler)>(r3, r2);

        r4 = $r5;

        if z0 == 0 goto label1;

        $r7 = staticinvoke <androidx.core.provider.FontRequestWorker: android.graphics.Typeface requestFontSync(android.content.Context,androidx.core.provider.FontRequest,androidx.core.provider.CallbackWithHandler,int,int)>(r0, r1, r4, i0, i1);

        return $r7;

     label1:
        $r6 = staticinvoke <androidx.core.provider.FontRequestWorker: android.graphics.Typeface requestFontAsync(android.content.Context,androidx.core.provider.FontRequest,int,java.util.concurrent.Executor,androidx.core.provider.CallbackWithHandler)>(r0, r1, i0, null, r4);

        return $r6;
    }

    public static void resetTypefaceCache()
    {
        staticinvoke <androidx.core.provider.FontRequestWorker: void resetTypefaceCache()>();

        return;
    }

    public static android.graphics.Typeface getFontSync(android.content.Context, androidx.core.provider.FontRequest, androidx.core.content.res.ResourcesCompat$FontCallback, android.os.Handler, boolean, int, int)
    {
        android.content.Context r0;
        androidx.core.provider.FontRequest r1;
        androidx.core.content.res.ResourcesCompat$FontCallback r2;
        android.os.Handler r3, r5;
        boolean z0;
        int i0, i1;
        androidx.core.graphics.TypefaceCompat$ResourcesCallbackAdapter r4, $r6;
        android.graphics.Typeface $r7;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: androidx.core.provider.FontRequest;

        r2 := @parameter2: androidx.core.content.res.ResourcesCompat$FontCallback;

        r3 := @parameter3: android.os.Handler;

        z0 := @parameter4: boolean;

        i0 := @parameter5: int;

        i1 := @parameter6: int;

        $r6 = new androidx.core.graphics.TypefaceCompat$ResourcesCallbackAdapter;

        specialinvoke $r6.<androidx.core.graphics.TypefaceCompat$ResourcesCallbackAdapter: void <init>(androidx.core.content.res.ResourcesCompat$FontCallback)>(r2);

        r4 = $r6;

        r5 = staticinvoke <androidx.core.content.res.ResourcesCompat$FontCallback: android.os.Handler getHandler(android.os.Handler)>(r3);

        $r7 = staticinvoke <androidx.core.provider.FontsContractCompat: android.graphics.Typeface requestFont(android.content.Context,androidx.core.provider.FontRequest,int,boolean,int,android.os.Handler,androidx.core.provider.FontsContractCompat$FontRequestCallback)>(r0, r1, i1, z0, i0, r5, r4);

        return $r7;
    }

    public static void resetCache()
    {
        staticinvoke <androidx.core.provider.FontRequestWorker: void resetTypefaceCache()>();

        return;
    }

    public static java.util.Map prepareFontData(android.content.Context, androidx.core.provider.FontsContractCompat$FontInfo[], android.os.CancellationSignal)
    {
        android.content.Context r0;
        androidx.core.provider.FontsContractCompat$FontInfo[] r1;
        android.os.CancellationSignal r2;
        java.util.Map $r3;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: androidx.core.provider.FontsContractCompat$FontInfo[];

        r2 := @parameter2: android.os.CancellationSignal;

        $r3 = staticinvoke <androidx.core.graphics.TypefaceCompatUtil: java.util.Map readFontInfoIntoByteBuffer(android.content.Context,androidx.core.provider.FontsContractCompat$FontInfo[],android.os.CancellationSignal)>(r0, r1, r2);

        return $r3;
    }

    public static android.content.pm.ProviderInfo getProvider(android.content.pm.PackageManager, androidx.core.provider.FontRequest, android.content.res.Resources) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.content.pm.PackageManager r0;
        androidx.core.provider.FontRequest r1;
        android.content.res.Resources r2;
        android.content.pm.ProviderInfo $r3;

        r0 := @parameter0: android.content.pm.PackageManager;

        r1 := @parameter1: androidx.core.provider.FontRequest;

        r2 := @parameter2: android.content.res.Resources;

        $r3 = staticinvoke <androidx.core.provider.FontProvider: android.content.pm.ProviderInfo getProvider(android.content.pm.PackageManager,androidx.core.provider.FontRequest,android.content.res.Resources)>(r0, r1, r2);

        return $r3;
    }

