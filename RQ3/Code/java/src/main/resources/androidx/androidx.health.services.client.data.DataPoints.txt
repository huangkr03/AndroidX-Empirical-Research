androidx.health.services.client.data.DataPoints
<androidx.health.services.client.data.DataPoints: androidx.health.services.client.data.DataPoints INSTANCE>
<androidx.health.services.client.data.DataPoints: java.lang.String TAG>
    private void <init>()
    {
        androidx.health.services.client.data.DataPoints r0;

        r0 := @this: androidx.health.services.client.data.DataPoints;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static final androidx.health.services.client.data.IntervalDataPoint steps(long, java.time.Duration, java.time.Duration)
    {
        long l0;
        java.time.Duration r0, r1;
        byte $b1, $b3;
        androidx.health.services.client.data.IntervalDataPoint $r2;
        androidx.health.services.client.data.DeltaDataType $r3;
        androidx.health.services.client.data.DataType $r4;
        java.lang.Long $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String $r10;
        boolean $z0;

        l0 := @parameter0: long;

        r0 := @parameter1: java.time.Duration;

        r1 := @parameter2: java.time.Duration;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "startDurationFromBoot");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "endDurationFromBoot");

        $b1 = 0L cmp l0;

        if $b1 > 0 goto label2;

        $b3 = l0 cmp 1000001L;

        if $b3 >= 0 goto label1;

        $z0 = 1;

        goto label3;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 != 0 goto label4;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("steps value ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is out of range");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DataPoints", $r10);

     label4:
        $r2 = new androidx.health.services.client.data.IntervalDataPoint;

        $r3 = <androidx.health.services.client.data.DataType: androidx.health.services.client.data.DeltaDataType STEPS>;

        $r4 = (androidx.health.services.client.data.DataType) $r3;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        specialinvoke $r2.<androidx.health.services.client.data.IntervalDataPoint: void <init>(androidx.health.services.client.data.DataType,java.lang.Object,java.time.Duration,java.time.Duration,android.os.Bundle,androidx.health.services.client.data.DataPointAccuracy,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r4, $r5, r0, r1, null, null, 48, null);

        return $r2;
    }

    public static final androidx.health.services.client.data.SampleDataPoint stepsPerMinute(long, java.time.Duration)
    {
        long l0;
        java.time.Duration r0;
        byte $b1, $b3;
        androidx.health.services.client.data.SampleDataPoint $r1;
        androidx.health.services.client.data.DeltaDataType $r2;
        androidx.health.services.client.data.DataType $r3;
        java.lang.Long $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String $r9;
        boolean $z0;

        l0 := @parameter0: long;

        r0 := @parameter1: java.time.Duration;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "timeDurationFromBoot");

        $b1 = 0L cmp l0;

        if $b1 > 0 goto label2;

        $b3 = l0 cmp 1000001L;

        if $b3 >= 0 goto label1;

        $z0 = 1;

        goto label3;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 != 0 goto label4;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stepsPerMinute value ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is out of range");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DataPoints", $r9);

     label4:
        $r1 = new androidx.health.services.client.data.SampleDataPoint;

        $r2 = <androidx.health.services.client.data.DataType: androidx.health.services.client.data.DeltaDataType STEPS_PER_MINUTE>;

        $r3 = (androidx.health.services.client.data.DataType) $r2;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        specialinvoke $r1.<androidx.health.services.client.data.SampleDataPoint: void <init>(androidx.health.services.client.data.DataType,java.lang.Object,java.time.Duration,android.os.Bundle,androidx.health.services.client.data.DataPointAccuracy,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r3, $r4, r0, null, null, 24, null);

        return $r1;
    }

    public static final androidx.health.services.client.data.IntervalDataPoint distance(double, java.time.Duration, java.time.Duration)
    {
        double d0;
        java.time.Duration r0, r1;
        byte $b0, $b2;
        androidx.health.services.client.data.IntervalDataPoint $r2;
        androidx.health.services.client.data.DeltaDataType $r3;
        androidx.health.services.client.data.DataType $r4;
        java.lang.Double $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String $r10;
        boolean $z0;

        d0 := @parameter0: double;

        r0 := @parameter1: java.time.Duration;

        r1 := @parameter2: java.time.Duration;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "startDurationFromBoot");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "endDurationFromBoot");

        $b0 = 0.0 cmpg d0;

        if $b0 > 0 goto label2;

        $b2 = d0 cmpg 1000000.0;

        if $b2 > 0 goto label1;

        $z0 = 1;

        goto label3;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 != 0 goto label4;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("distance value ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is out of range");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DataPoints", $r10);

     label4:
        $r2 = new androidx.health.services.client.data.IntervalDataPoint;

        $r3 = <androidx.health.services.client.data.DataType: androidx.health.services.client.data.DeltaDataType DISTANCE>;

        $r4 = (androidx.health.services.client.data.DataType) $r3;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        specialinvoke $r2.<androidx.health.services.client.data.IntervalDataPoint: void <init>(androidx.health.services.client.data.DataType,java.lang.Object,java.time.Duration,java.time.Duration,android.os.Bundle,androidx.health.services.client.data.DataPointAccuracy,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r4, $r5, r0, r1, null, null, 48, null);

        return $r2;
    }

    public static final androidx.health.services.client.data.CumulativeDataPoint distanceTotal(double, java.time.Instant, java.time.Instant)
    {
        double d0;
        java.time.Instant r0, r1;
        byte $b0, $b2;
        androidx.health.services.client.data.CumulativeDataPoint $r2;
        androidx.health.services.client.data.AggregateDataType $r3;
        java.lang.Double $r4;
        java.lang.Number $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String $r10;
        boolean $z0;

        d0 := @parameter0: double;

        r0 := @parameter1: java.time.Instant;

        r1 := @parameter2: java.time.Instant;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "startTime");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "endTime");

        $b0 = 0.0 cmpg d0;

        if $b0 > 0 goto label2;

        $b2 = d0 cmpg 1000000.0;

        if $b2 > 0 goto label1;

        $z0 = 1;

        goto label3;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 != 0 goto label4;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("distanceTotal value ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is out of range");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DataPoints", $r10);

     label4:
        $r2 = new androidx.health.services.client.data.CumulativeDataPoint;

        $r3 = <androidx.health.services.client.data.DataType: androidx.health.services.client.data.AggregateDataType DISTANCE_TOTAL>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r5 = (java.lang.Number) $r4;

        specialinvoke $r2.<androidx.health.services.client.data.CumulativeDataPoint: void <init>(androidx.health.services.client.data.AggregateDataType,java.lang.Number,java.time.Instant,java.time.Instant)>($r3, $r5, r0, r1);

        return $r2;
    }

    public static final androidx.health.services.client.data.IntervalDataPoint elevationGain(double, java.time.Duration, java.time.Duration)
    {
        double d0;
        java.time.Duration r0, r1;
        byte $b0, $b2;
        androidx.health.services.client.data.IntervalDataPoint $r2;
        androidx.health.services.client.data.DeltaDataType $r3;
        androidx.health.services.client.data.DataType $r4;
        java.lang.Double $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String $r10;
        boolean $z0;

        d0 := @parameter0: double;

        r0 := @parameter1: java.time.Duration;

        r1 := @parameter2: java.time.Duration;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "startDurationFromBoot");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "endDurationFromBoot");

        $b0 = 0.0 cmpg d0;

        if $b0 > 0 goto label2;

        $b2 = d0 cmpg 1000000.0;

        if $b2 > 0 goto label1;

        $z0 = 1;

        goto label3;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 != 0 goto label4;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("elevationGain value ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is out of range");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DataPoints", $r10);

     label4:
        $r2 = new androidx.health.services.client.data.IntervalDataPoint;

        $r3 = <androidx.health.services.client.data.DataType: androidx.health.services.client.data.DeltaDataType ELEVATION_GAIN>;

        $r4 = (androidx.health.services.client.data.DataType) $r3;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        specialinvoke $r2.<androidx.health.services.client.data.IntervalDataPoint: void <init>(androidx.health.services.client.data.DataType,java.lang.Object,java.time.Duration,java.time.Duration,android.os.Bundle,androidx.health.services.client.data.DataPointAccuracy,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r4, $r5, r0, r1, null, null, 48, null);

        return $r2;
    }

    public static final androidx.health.services.client.data.IntervalDataPoint elevationLoss(double, java.time.Duration, java.time.Duration)
    {
        double d0;
        java.time.Duration r0, r1;
        byte $b0, $b2;
        androidx.health.services.client.data.IntervalDataPoint $r2;
        androidx.health.services.client.data.DeltaDataType $r3;
        androidx.health.services.client.data.DataType $r4;
        java.lang.Double $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String $r10;
        boolean $z0;

        d0 := @parameter0: double;

        r0 := @parameter1: java.time.Duration;

        r1 := @parameter2: java.time.Duration;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "startDurationFromBoot");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "endDurationFromBoot");

        $b0 = 0.0 cmpg d0;

        if $b0 > 0 goto label2;

        $b2 = d0 cmpg 1000000.0;

        if $b2 > 0 goto label1;

        $z0 = 1;

        goto label3;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 != 0 goto label4;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("elevationLoss value ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is out of range");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DataPoints", $r10);

     label4:
        $r2 = new androidx.health.services.client.data.IntervalDataPoint;

        $r3 = <androidx.health.services.client.data.DataType: androidx.health.services.client.data.DeltaDataType ELEVATION_LOSS>;

        $r4 = (androidx.health.services.client.data.DataType) $r3;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        specialinvoke $r2.<androidx.health.services.client.data.IntervalDataPoint: void <init>(androidx.health.services.client.data.DataType,java.lang.Object,java.time.Duration,java.time.Duration,android.os.Bundle,androidx.health.services.client.data.DataPointAccuracy,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r4, $r5, r0, r1, null, null, 48, null);

        return $r2;
    }

    public static final androidx.health.services.client.data.SampleDataPoint absoluteElevation(double, java.time.Duration)
    {
        double d0;
        java.time.Duration r0;
        byte $b0, $b2;
        androidx.health.services.client.data.SampleDataPoint $r1;
        androidx.health.services.client.data.DeltaDataType $r2;
        androidx.health.services.client.data.DataType $r3;
        java.lang.Double $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String $r9;
        boolean $z0;

        d0 := @parameter0: double;

        r0 := @parameter1: java.time.Duration;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "timeDurationFromBoot");

        $b0 = -1000000.0 cmpg d0;

        if $b0 > 0 goto label2;

        $b2 = d0 cmpg 1000000.0;

        if $b2 > 0 goto label1;

        $z0 = 1;

        goto label3;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 != 0 goto label4;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("absoluteElevation value ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is out of range");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DataPoints", $r9);

     label4:
        $r1 = new androidx.health.services.client.data.SampleDataPoint;

        $r2 = <androidx.health.services.client.data.DataType: androidx.health.services.client.data.DeltaDataType ABSOLUTE_ELEVATION>;

        $r3 = (androidx.health.services.client.data.DataType) $r2;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        specialinvoke $r1.<androidx.health.services.client.data.SampleDataPoint: void <init>(androidx.health.services.client.data.DataType,java.lang.Object,java.time.Duration,android.os.Bundle,androidx.health.services.client.data.DataPointAccuracy,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r3, $r4, r0, null, null, 24, null);

        return $r1;
    }

    public static final androidx.health.services.client.data.StatisticalDataPoint absoluteElevationStats(double, double, double, java.time.Instant, java.time.Instant)
    {
        double d0, d1, d2;
        java.time.Instant r0, r1;
        byte $b0, $b1, $b2, $b4, $b6, $b8;
        androidx.health.services.client.data.StatisticalDataPoint $r2;
        androidx.health.services.client.data.AggregateDataType $r3;
        java.lang.Double $r4, $r6, $r8;
        java.lang.Number $r5, $r7, $r9;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r15, $r16, $r17, $r18, $r20, $r21, $r22, $r23;
        java.lang.String $r14, $r19, $r24;
        boolean $z0, $z1, $z2;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        r0 := @parameter3: java.time.Instant;

        r1 := @parameter4: java.time.Instant;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "startTime");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "endTime");

        $b0 = -1000000.0 cmpg d0;

        if $b0 > 0 goto label02;

        $b8 = d0 cmpg 1000000.0;

        if $b8 > 0 goto label01;

        $z0 = 1;

        goto label03;

     label01:
        $z0 = 0;

        goto label03;

     label02:
        $z0 = 0;

     label03:
        if $z0 != 0 goto label04;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("absoluteElevationStats: minAbsoluteElevationMeters value ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is out of range");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DataPoints", $r24);

     label04:
        $b1 = -1000000.0 cmpg d1;

        if $b1 > 0 goto label06;

        $b6 = d1 cmpg 1000000.0;

        if $b6 > 0 goto label05;

        $z1 = 1;

        goto label07;

     label05:
        $z1 = 0;

        goto label07;

     label06:
        $z1 = 0;

     label07:
        if $z1 != 0 goto label08;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("absoluteElevationStats: maxAbsoluteElevationMeters value ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is out of range");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DataPoints", $r19);

     label08:
        $b2 = -1000000.0 cmpg d2;

        if $b2 > 0 goto label10;

        $b4 = d2 cmpg 1000000.0;

        if $b4 > 0 goto label09;

        $z2 = 1;

        goto label11;

     label09:
        $z2 = 0;

        goto label11;

     label10:
        $z2 = 0;

     label11:
        if $z2 != 0 goto label12;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("absoluteElevationStats: averageAbsoluteElevationMeters value ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is out of range");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DataPoints", $r14);

     label12:
        $r2 = new androidx.health.services.client.data.StatisticalDataPoint;

        $r3 = <androidx.health.services.client.data.DataType: androidx.health.services.client.data.AggregateDataType ABSOLUTE_ELEVATION_STATS>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r5 = (java.lang.Number) $r4;

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r7 = (java.lang.Number) $r6;

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2);

        $r9 = (java.lang.Number) $r8;

        specialinvoke $r2.<androidx.health.services.client.data.StatisticalDataPoint: void <init>(androidx.health.services.client.data.AggregateDataType,java.lang.Number,java.lang.Number,java.lang.Number,java.time.Instant,java.time.Instant)>($r3, $r5, $r7, $r9, r0, r1);

        return $r2;
    }

    public static final androidx.health.services.client.data.IntervalDataPoint floors(double, java.time.Duration, java.time.Duration)
    {
        double d0;
        java.time.Duration r0, r1;
        byte $b0, $b2;
        androidx.health.services.client.data.IntervalDataPoint $r2;
        androidx.health.services.client.data.DeltaDataType $r3;
        androidx.health.services.client.data.DataType $r4;
        java.lang.Double $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String $r10;
        boolean $z0;

        d0 := @parameter0: double;

        r0 := @parameter1: java.time.Duration;

        r1 := @parameter2: java.time.Duration;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "startDurationFromBoot");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "endDurationFromBoot");

        $b0 = 0.0 cmpg d0;

        if $b0 > 0 goto label2;

        $b2 = d0 cmpg 1000000.0;

        if $b2 > 0 goto label1;

        $z0 = 1;

        goto label3;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 != 0 goto label4;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("floors value ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is out of range");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DataPoints", $r10);

     label4:
        $r2 = new androidx.health.services.client.data.IntervalDataPoint;

        $r3 = <androidx.health.services.client.data.DataType: androidx.health.services.client.data.DeltaDataType FLOORS>;

        $r4 = (androidx.health.services.client.data.DataType) $r3;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        specialinvoke $r2.<androidx.health.services.client.data.IntervalDataPoint: void <init>(androidx.health.services.client.data.DataType,java.lang.Object,java.time.Duration,java.time.Duration,android.os.Bundle,androidx.health.services.client.data.DataPointAccuracy,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r4, $r5, r0, r1, null, null, 48, null);

        return $r2;
    }

    public static final androidx.health.services.client.data.IntervalDataPoint calories(double, java.time.Duration, java.time.Duration)
    {
        double d0;
        java.time.Duration r0, r1;
        byte $b0, $b2;
        androidx.health.services.client.data.IntervalDataPoint $r2;
        androidx.health.services.client.data.DeltaDataType $r3;
        androidx.health.services.client.data.DataType $r4;
        java.lang.Double $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String $r10;
        boolean $z0;

        d0 := @parameter0: double;

        r0 := @parameter1: java.time.Duration;

        r1 := @parameter2: java.time.Duration;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "startDurationFromBoot");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "endDurationFromBoot");

        $b0 = 0.0 cmpg d0;

        if $b0 > 0 goto label2;

        $b2 = d0 cmpg 1000000.0;

        if $b2 > 0 goto label1;

        $z0 = 1;

        goto label3;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 != 0 goto label4;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("calories value ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is out of range");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DataPoints", $r10);

     label4:
        $r2 = new androidx.health.services.client.data.IntervalDataPoint;

        $r3 = <androidx.health.services.client.data.DataType: androidx.health.services.client.data.DeltaDataType CALORIES>;

        $r4 = (androidx.health.services.client.data.DataType) $r3;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        specialinvoke $r2.<androidx.health.services.client.data.IntervalDataPoint: void <init>(androidx.health.services.client.data.DataType,java.lang.Object,java.time.Duration,java.time.Duration,android.os.Bundle,androidx.health.services.client.data.DataPointAccuracy,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r4, $r5, r0, r1, null, null, 48, null);

        return $r2;
    }

    public static final androidx.health.services.client.data.CumulativeDataPoint caloriesTotal(double, java.time.Instant, java.time.Instant)
    {
        double d0;
        java.time.Instant r0, r1;
        byte $b0, $b2;
        androidx.health.services.client.data.CumulativeDataPoint $r2;
        androidx.health.services.client.data.AggregateDataType $r3;
        java.lang.Double $r4;
        java.lang.Number $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String $r10;
        boolean $z0;

        d0 := @parameter0: double;

        r0 := @parameter1: java.time.Instant;

        r1 := @parameter2: java.time.Instant;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "startTime");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "endTime");

        $b0 = 0.0 cmpg d0;

        if $b0 > 0 goto label2;

        $b2 = d0 cmpg 1000000.0;

        if $b2 > 0 goto label1;

        $z0 = 1;

        goto label3;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 != 0 goto label4;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("caloriesTotal value ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is out of range");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DataPoints", $r10);

     label4:
        $r2 = new androidx.health.services.client.data.CumulativeDataPoint;

        $r3 = <androidx.health.services.client.data.DataType: androidx.health.services.client.data.AggregateDataType CALORIES_TOTAL>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r5 = (java.lang.Number) $r4;

        specialinvoke $r2.<androidx.health.services.client.data.CumulativeDataPoint: void <init>(androidx.health.services.client.data.AggregateDataType,java.lang.Number,java.time.Instant,java.time.Instant)>($r3, $r5, r0, r1);

        return $r2;
    }

    public static final androidx.health.services.client.data.IntervalDataPoint swimmingStrokes(long, java.time.Duration, java.time.Duration)
    {
        long l0;
        java.time.Duration r0, r1;
        byte $b1, $b3;
        androidx.health.services.client.data.IntervalDataPoint $r2;
        androidx.health.services.client.data.DeltaDataType $r3;
        androidx.health.services.client.data.DataType $r4;
        java.lang.Long $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String $r10;
        boolean $z0;

        l0 := @parameter0: long;

        r0 := @parameter1: java.time.Duration;

        r1 := @parameter2: java.time.Duration;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "startDurationFromBoot");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "endDurationFromBoot");

        $b1 = 0L cmp l0;

        if $b1 > 0 goto label2;

        $b3 = l0 cmp 1000001L;

        if $b3 >= 0 goto label1;

        $z0 = 1;

        goto label3;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 != 0 goto label4;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("swimmingStrokes value ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is out of range");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DataPoints", $r10);

     label4:
        $r2 = new androidx.health.services.client.data.IntervalDataPoint;

        $r3 = <androidx.health.services.client.data.DataType: androidx.health.services.client.data.DeltaDataType SWIMMING_STROKES>;

        $r4 = (androidx.health.services.client.data.DataType) $r3;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        specialinvoke $r2.<androidx.health.services.client.data.IntervalDataPoint: void <init>(androidx.health.services.client.data.DataType,java.lang.Object,java.time.Duration,java.time.Duration,android.os.Bundle,androidx.health.services.client.data.DataPointAccuracy,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r4, $r5, r0, r1, null, null, 48, null);

        return $r2;
    }

    public static final androidx.health.services.client.data.IntervalDataPoint golfShotCount(long, java.time.Duration, java.time.Duration)
    {
        long l0;
        java.time.Duration r0, r1;
        byte $b1, $b3;
        androidx.health.services.client.data.IntervalDataPoint $r2;
        androidx.health.services.client.data.DeltaDataType $r3;
        androidx.health.services.client.data.DataType $r4;
        java.lang.Long $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String $r10;
        boolean $z0;

        l0 := @parameter0: long;

        r0 := @parameter1: java.time.Duration;

        r1 := @parameter2: java.time.Duration;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "startDurationFromBoot");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "endDurationFromBoot");

        $b1 = 0L cmp l0;

        if $b1 > 0 goto label2;

        $b3 = l0 cmp 1000001L;

        if $b3 >= 0 goto label1;

        $z0 = 1;

        goto label3;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 != 0 goto label4;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("golfShotCount value ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is out of range");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DataPoints", $r10);

     label4:
        $r2 = new androidx.health.services.client.data.IntervalDataPoint;

        $r3 = <androidx.health.services.client.data.DataType: androidx.health.services.client.data.DeltaDataType GOLF_SHOT_COUNT>;

        $r4 = (androidx.health.services.client.data.DataType) $r3;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        specialinvoke $r2.<androidx.health.services.client.data.IntervalDataPoint: void <init>(androidx.health.services.client.data.DataType,java.lang.Object,java.time.Duration,java.time.Duration,android.os.Bundle,androidx.health.services.client.data.DataPointAccuracy,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r4, $r5, r0, r1, null, null, 48, null);

        return $r2;
    }

    public static final androidx.health.services.client.data.SampleDataPoint location(double, double, java.time.Duration, double, double, androidx.health.services.client.data.LocationAccuracy)
    {
        double d0, d1, d2, d3;
        java.time.Duration r0;
        androidx.health.services.client.data.LocationAccuracy r1;
        byte $b0, $b1, $b2, $b3, $b6, $b8;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r10, $r12, $r13, $r14, $r15;
        java.lang.String $r6, $r11, $r16;
        boolean $z0, $z1;
        androidx.health.services.client.data.SampleDataPoint $r17;
        androidx.health.services.client.data.DeltaDataType $r18;
        androidx.health.services.client.data.DataType $r19;
        androidx.health.services.client.data.LocationData $r20;
        androidx.health.services.client.data.DataPointAccuracy $r21;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r0 := @parameter2: java.time.Duration;

        d2 := @parameter3: double;

        d3 := @parameter4: double;

        r1 := @parameter5: androidx.health.services.client.data.LocationAccuracy;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "timeDurationFromBoot");

        $b0 = -90.0 cmpg d0;

        if $b0 > 0 goto label2;

        $b8 = d0 cmpg 90.0;

        if $b8 > 0 goto label1;

        $z0 = 1;

        goto label3;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 != 0 goto label4;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("location: latitude value ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is out of range");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DataPoints", $r16);

     label4:
        $b1 = -180.0 cmpg d1;

        if $b1 > 0 goto label6;

        $b6 = d1 cmpg 180.0;

        if $b6 > 0 goto label5;

        $z1 = 1;

        goto label7;

     label5:
        $z1 = 0;

        goto label7;

     label6:
        $z1 = 0;

     label7:
        if $z1 != 0 goto label8;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("location: longitude value ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is out of range");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DataPoints", $r11);

     label8:
        $b2 = d3 cmpg -1.0;

        if $b2 >= 0 goto label9;

        $b3 = d3 cmpl 360.0;

        if $b3 < 0 goto label9;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("location: bearing value ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is out of range");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DataPoints", $r6);

     label9:
        $r17 = new androidx.health.services.client.data.SampleDataPoint;

        $r18 = <androidx.health.services.client.data.DataType: androidx.health.services.client.data.DeltaDataType LOCATION>;

        $r19 = (androidx.health.services.client.data.DataType) $r18;

        $r20 = new androidx.health.services.client.data.LocationData;

        specialinvoke $r20.<androidx.health.services.client.data.LocationData: void <init>(double,double,double,double)>(d0, d1, d2, d3);

        $r21 = (androidx.health.services.client.data.DataPointAccuracy) r1;

        specialinvoke $r17.<androidx.health.services.client.data.SampleDataPoint: void <init>(androidx.health.services.client.data.DataType,java.lang.Object,java.time.Duration,android.os.Bundle,androidx.health.services.client.data.DataPointAccuracy,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r19, $r20, r0, null, $r21, 8, null);

        return $r17;
    }

    public static androidx.health.services.client.data.SampleDataPoint location$default(double, double, java.time.Duration, double, double, androidx.health.services.client.data.LocationAccuracy, int, java.lang.Object)
    {
        double d0, d1, d2, d3;
        java.time.Duration r0;
        int i0, $i1, $i2, $i3;
        java.lang.Object r1;
        androidx.health.services.client.data.SampleDataPoint $r2;
        androidx.health.services.client.data.LocationAccuracy r3;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r0 := @parameter2: java.time.Duration;

        d2 := @parameter3: double;

        d3 := @parameter4: double;

        r3 := @parameter5: androidx.health.services.client.data.LocationAccuracy;

        i0 := @parameter6: int;

        r1 := @parameter7: java.lang.Object;

        $i1 = i0 & 8;

        if $i1 == 0 goto label1;

        d2 = #NaN;

     label1:
        $i2 = i0 & 16;

        if $i2 == 0 goto label2;

        d3 = #NaN;

     label2:
        $i3 = i0 & 32;

        if $i3 == 0 goto label3;

        r3 = null;

     label3:
        $r2 = staticinvoke <androidx.health.services.client.data.DataPoints: androidx.health.services.client.data.SampleDataPoint location(double,double,java.time.Duration,double,double,androidx.health.services.client.data.LocationAccuracy)>(d0, d1, r0, d2, d3, r3);

        return $r2;
    }

    public static final androidx.health.services.client.data.SampleDataPoint speed(double, java.time.Duration)
    {
        double d0;
        java.time.Duration r0;
        byte $b0, $b2;
        androidx.health.services.client.data.SampleDataPoint $r1;
        androidx.health.services.client.data.DeltaDataType $r2;
        androidx.health.services.client.data.DataType $r3;
        java.lang.Double $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String $r9;
        boolean $z0;

        d0 := @parameter0: double;

        r0 := @parameter1: java.time.Duration;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "timeDurationFromBoot");

        $b0 = 0.0 cmpg d0;

        if $b0 > 0 goto label2;

        $b2 = d0 cmpg 1000000.0;

        if $b2 > 0 goto label1;

        $z0 = 1;

        goto label3;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 != 0 goto label4;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("speed value ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is out of range");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DataPoints", $r9);

     label4:
        $r1 = new androidx.health.services.client.data.SampleDataPoint;

        $r2 = <androidx.health.services.client.data.DataType: androidx.health.services.client.data.DeltaDataType SPEED>;

        $r3 = (androidx.health.services.client.data.DataType) $r2;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        specialinvoke $r1.<androidx.health.services.client.data.SampleDataPoint: void <init>(androidx.health.services.client.data.DataType,java.lang.Object,java.time.Duration,android.os.Bundle,androidx.health.services.client.data.DataPointAccuracy,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r3, $r4, r0, null, null, 24, null);

        return $r1;
    }

    public static final androidx.health.services.client.data.SampleDataPoint pace(java.time.Duration, java.time.Duration)
    {
        java.time.Duration r0, r1;
        androidx.health.services.client.data.SampleDataPoint $r2;
        androidx.health.services.client.data.DeltaDataType $r3;
        androidx.health.services.client.data.DataType $r4;
        long $l0;
        double $d0;
        java.lang.Double $r5;

        r0 := @parameter0: java.time.Duration;

        r1 := @parameter1: java.time.Duration;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "durationPerKilometer");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "timeDurationFromBoot");

        $r2 = new androidx.health.services.client.data.SampleDataPoint;

        $r3 = <androidx.health.services.client.data.DataType: androidx.health.services.client.data.DeltaDataType PACE>;

        $r4 = (androidx.health.services.client.data.DataType) $r3;

        $l0 = virtualinvoke r0.<java.time.Duration: long toMillis()>();

        $d0 = (double) $l0;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        specialinvoke $r2.<androidx.health.services.client.data.SampleDataPoint: void <init>(androidx.health.services.client.data.DataType,java.lang.Object,java.time.Duration,android.os.Bundle,androidx.health.services.client.data.DataPointAccuracy,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r4, $r5, r1, null, null, 24, null);

        return $r2;
    }

    public static final androidx.health.services.client.data.SampleDataPoint heartRate(double, java.time.Duration, androidx.health.services.client.data.HeartRateAccuracy)
    {
        double d0;
        java.time.Duration r0;
        androidx.health.services.client.data.HeartRateAccuracy r1;
        byte $b0, $b2;
        androidx.health.services.client.data.SampleDataPoint $r2;
        androidx.health.services.client.data.DeltaDataType $r3;
        androidx.health.services.client.data.DataType $r4;
        java.lang.Double $r5;
        androidx.health.services.client.data.DataPointAccuracy $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;
        java.lang.String $r11;
        boolean $z0;

        d0 := @parameter0: double;

        r0 := @parameter1: java.time.Duration;

        r1 := @parameter2: androidx.health.services.client.data.HeartRateAccuracy;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "timeDurationFromBoot");

        $b0 = 0.0 cmpg d0;

        if $b0 > 0 goto label2;

        $b2 = d0 cmpg 300.0;

        if $b2 > 0 goto label1;

        $z0 = 1;

        goto label3;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 != 0 goto label4;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("heartRate value ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is out of range");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DataPoints", $r11);

     label4:
        $r2 = new androidx.health.services.client.data.SampleDataPoint;

        $r3 = <androidx.health.services.client.data.DataType: androidx.health.services.client.data.DeltaDataType HEART_RATE_BPM>;

        $r4 = (androidx.health.services.client.data.DataType) $r3;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r6 = (androidx.health.services.client.data.DataPointAccuracy) r1;

        specialinvoke $r2.<androidx.health.services.client.data.SampleDataPoint: void <init>(androidx.health.services.client.data.DataType,java.lang.Object,java.time.Duration,android.os.Bundle,androidx.health.services.client.data.DataPointAccuracy,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r4, $r5, r0, null, $r6, 8, null);

        return $r2;
    }

    public static androidx.health.services.client.data.SampleDataPoint heartRate$default(double, java.time.Duration, androidx.health.services.client.data.HeartRateAccuracy, int, java.lang.Object)
    {
        double d0;
        java.time.Duration r0;
        int i0, $i1;
        java.lang.Object r1;
        androidx.health.services.client.data.SampleDataPoint $r2;
        androidx.health.services.client.data.HeartRateAccuracy r3;

        d0 := @parameter0: double;

        r0 := @parameter1: java.time.Duration;

        r3 := @parameter2: androidx.health.services.client.data.HeartRateAccuracy;

        i0 := @parameter3: int;

        r1 := @parameter4: java.lang.Object;

        $i1 = i0 & 4;

        if $i1 == 0 goto label1;

        r3 = null;

     label1:
        $r2 = staticinvoke <androidx.health.services.client.data.DataPoints: androidx.health.services.client.data.SampleDataPoint heartRate(double,java.time.Duration,androidx.health.services.client.data.HeartRateAccuracy)>(d0, r0, r3);

        return $r2;
    }

    public static final androidx.health.services.client.data.StatisticalDataPoint heartRateStats(double, double, double, java.time.Instant, java.time.Instant)
    {
        double d0, d1, d2;
        java.time.Instant r0, r1;
        byte $b0, $b1, $b2, $b4, $b6, $b8;
        androidx.health.services.client.data.StatisticalDataPoint $r2;
        androidx.health.services.client.data.AggregateDataType $r3;
        java.lang.Double $r4, $r6, $r8;
        java.lang.Number $r5, $r7, $r9;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r15, $r16, $r17, $r18, $r20, $r21, $r22, $r23;
        java.lang.String $r14, $r19, $r24;
        boolean $z0, $z1, $z2;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        r0 := @parameter3: java.time.Instant;

        r1 := @parameter4: java.time.Instant;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "startTime");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "endTime");

        $b0 = 0.0 cmpg d0;

        if $b0 > 0 goto label02;

        $b8 = d0 cmpg 300.0;

        if $b8 > 0 goto label01;

        $z0 = 1;

        goto label03;

     label01:
        $z0 = 0;

        goto label03;

     label02:
        $z0 = 0;

     label03:
        if $z0 != 0 goto label04;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("heartRateStats: minBpm value ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is out of range");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DataPoints", $r24);

     label04:
        $b1 = 0.0 cmpg d1;

        if $b1 > 0 goto label06;

        $b6 = d1 cmpg 300.0;

        if $b6 > 0 goto label05;

        $z1 = 1;

        goto label07;

     label05:
        $z1 = 0;

        goto label07;

     label06:
        $z1 = 0;

     label07:
        if $z1 != 0 goto label08;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("heartRateStats: maxBpm value ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is out of range");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DataPoints", $r19);

     label08:
        $b2 = 0.0 cmpg d2;

        if $b2 > 0 goto label10;

        $b4 = d2 cmpg 300.0;

        if $b4 > 0 goto label09;

        $z2 = 1;

        goto label11;

     label09:
        $z2 = 0;

        goto label11;

     label10:
        $z2 = 0;

     label11:
        if $z2 != 0 goto label12;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("heartRateStats: averageBpm value ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is out of range");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DataPoints", $r14);

     label12:
        $r2 = new androidx.health.services.client.data.StatisticalDataPoint;

        $r3 = <androidx.health.services.client.data.DataType: androidx.health.services.client.data.AggregateDataType HEART_RATE_BPM_STATS>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r5 = (java.lang.Number) $r4;

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r7 = (java.lang.Number) $r6;

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2);

        $r9 = (java.lang.Number) $r8;

        specialinvoke $r2.<androidx.health.services.client.data.StatisticalDataPoint: void <init>(androidx.health.services.client.data.AggregateDataType,java.lang.Number,java.lang.Number,java.lang.Number,java.time.Instant,java.time.Instant)>($r3, $r5, $r7, $r9, r0, r1);

        return $r2;
    }

    public static final androidx.health.services.client.data.IntervalDataPoint dailySteps(long, java.time.Duration, java.time.Duration)
    {
        long l0;
        java.time.Duration r0, r1;
        byte $b1, $b3;
        androidx.health.services.client.data.IntervalDataPoint $r2;
        androidx.health.services.client.data.DeltaDataType $r3;
        androidx.health.services.client.data.DataType $r4;
        java.lang.Long $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String $r10;
        boolean $z0;

        l0 := @parameter0: long;

        r0 := @parameter1: java.time.Duration;

        r1 := @parameter2: java.time.Duration;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "startDurationFromBoot");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "endDurationFromBoot");

        $b1 = 0L cmp l0;

        if $b1 > 0 goto label2;

        $b3 = l0 cmp 1000001L;

        if $b3 >= 0 goto label1;

        $z0 = 1;

        goto label3;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 != 0 goto label4;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dailySteps value ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is out of range");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DataPoints", $r10);

     label4:
        $r2 = new androidx.health.services.client.data.IntervalDataPoint;

        $r3 = <androidx.health.services.client.data.DataType: androidx.health.services.client.data.DeltaDataType STEPS_DAILY>;

        $r4 = (androidx.health.services.client.data.DataType) $r3;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        specialinvoke $r2.<androidx.health.services.client.data.IntervalDataPoint: void <init>(androidx.health.services.client.data.DataType,java.lang.Object,java.time.Duration,java.time.Duration,android.os.Bundle,androidx.health.services.client.data.DataPointAccuracy,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r4, $r5, r0, r1, null, null, 48, null);

        return $r2;
    }

    public static final androidx.health.services.client.data.IntervalDataPoint dailyFloors(double, java.time.Duration, java.time.Duration)
    {
        double d0;
        java.time.Duration r0, r1;
        byte $b0, $b2;
        androidx.health.services.client.data.IntervalDataPoint $r2;
        androidx.health.services.client.data.DeltaDataType $r3;
        androidx.health.services.client.data.DataType $r4;
        java.lang.Double $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String $r10;
        boolean $z0;

        d0 := @parameter0: double;

        r0 := @parameter1: java.time.Duration;

        r1 := @parameter2: java.time.Duration;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "startDurationFromBoot");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "endDurationFromBoot");

        $b0 = 0.0 cmpg d0;

        if $b0 > 0 goto label2;

        $b2 = d0 cmpg 1000000.0;

        if $b2 > 0 goto label1;

        $z0 = 1;

        goto label3;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 != 0 goto label4;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dailyFloors value ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is out of range");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DataPoints", $r10);

     label4:
        $r2 = new androidx.health.services.client.data.IntervalDataPoint;

        $r3 = <androidx.health.services.client.data.DataType: androidx.health.services.client.data.DeltaDataType FLOORS_DAILY>;

        $r4 = (androidx.health.services.client.data.DataType) $r3;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        specialinvoke $r2.<androidx.health.services.client.data.IntervalDataPoint: void <init>(androidx.health.services.client.data.DataType,java.lang.Object,java.time.Duration,java.time.Duration,android.os.Bundle,androidx.health.services.client.data.DataPointAccuracy,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r4, $r5, r0, r1, null, null, 48, null);

        return $r2;
    }

    public static final androidx.health.services.client.data.IntervalDataPoint dailyCalories(double, java.time.Duration, java.time.Duration)
    {
        double d0;
        java.time.Duration r0, r1;
        byte $b0, $b2;
        androidx.health.services.client.data.IntervalDataPoint $r2;
        androidx.health.services.client.data.DeltaDataType $r3;
        androidx.health.services.client.data.DataType $r4;
        java.lang.Double $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String $r10;
        boolean $z0;

        d0 := @parameter0: double;

        r0 := @parameter1: java.time.Duration;

        r1 := @parameter2: java.time.Duration;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "startDurationFromBoot");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "endDurationFromBoot");

        $b0 = 0.0 cmpg d0;

        if $b0 > 0 goto label2;

        $b2 = d0 cmpg 1000000.0;

        if $b2 > 0 goto label1;

        $z0 = 1;

        goto label3;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 == 0 goto label4;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dailyCalories value ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is out of range");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DataPoints", $r10);

     label4:
        $r2 = new androidx.health.services.client.data.IntervalDataPoint;

        $r3 = <androidx.health.services.client.data.DataType: androidx.health.services.client.data.DeltaDataType CALORIES_DAILY>;

        $r4 = (androidx.health.services.client.data.DataType) $r3;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        specialinvoke $r2.<androidx.health.services.client.data.IntervalDataPoint: void <init>(androidx.health.services.client.data.DataType,java.lang.Object,java.time.Duration,java.time.Duration,android.os.Bundle,androidx.health.services.client.data.DataPointAccuracy,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r4, $r5, r0, r1, null, null, 48, null);

        return $r2;
    }

    public static final androidx.health.services.client.data.IntervalDataPoint dailyDistance(double, java.time.Duration, java.time.Duration)
    {
        double d0;
        java.time.Duration r0, r1;
        byte $b0, $b2;
        androidx.health.services.client.data.IntervalDataPoint $r2;
        androidx.health.services.client.data.DeltaDataType $r3;
        androidx.health.services.client.data.DataType $r4;
        java.lang.Double $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String $r10;
        boolean $z0;

        d0 := @parameter0: double;

        r0 := @parameter1: java.time.Duration;

        r1 := @parameter2: java.time.Duration;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "startDurationFromBoot");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "endDurationFromBoot");

        $b0 = 0.0 cmpg d0;

        if $b0 > 0 goto label2;

        $b2 = d0 cmpg 1000000.0;

        if $b2 > 0 goto label1;

        $z0 = 1;

        goto label3;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 != 0 goto label4;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dailyDistance value ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is out of range");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DataPoints", $r10);

     label4:
        $r2 = new androidx.health.services.client.data.IntervalDataPoint;

        $r3 = <androidx.health.services.client.data.DataType: androidx.health.services.client.data.DeltaDataType DISTANCE_DAILY>;

        $r4 = (androidx.health.services.client.data.DataType) $r3;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        specialinvoke $r2.<androidx.health.services.client.data.IntervalDataPoint: void <init>(androidx.health.services.client.data.DataType,java.lang.Object,java.time.Duration,java.time.Duration,android.os.Bundle,androidx.health.services.client.data.DataPointAccuracy,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r4, $r5, r0, r1, null, null, 48, null);

        return $r2;
    }

    public static final androidx.health.services.client.data.SampleDataPoint location(double, double, java.time.Duration, double, double)
    {
        double d0, d1, d2, d3;
        java.time.Duration r0;
        androidx.health.services.client.data.SampleDataPoint $r1;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r0 := @parameter2: java.time.Duration;

        d2 := @parameter3: double;

        d3 := @parameter4: double;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "timeDurationFromBoot");

        $r1 = staticinvoke <androidx.health.services.client.data.DataPoints: androidx.health.services.client.data.SampleDataPoint location$default(double,double,java.time.Duration,double,double,androidx.health.services.client.data.LocationAccuracy,int,java.lang.Object)>(d0, d1, r0, d2, d3, null, 32, null);

        return $r1;
    }

    public static final androidx.health.services.client.data.SampleDataPoint location(double, double, java.time.Duration, double)
    {
        double d0, d1, d2;
        java.time.Duration r0;
        androidx.health.services.client.data.SampleDataPoint $r1;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r0 := @parameter2: java.time.Duration;

        d2 := @parameter3: double;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "timeDurationFromBoot");

        $r1 = staticinvoke <androidx.health.services.client.data.DataPoints: androidx.health.services.client.data.SampleDataPoint location$default(double,double,java.time.Duration,double,double,androidx.health.services.client.data.LocationAccuracy,int,java.lang.Object)>(d0, d1, r0, d2, 0.0, null, 48, null);

        return $r1;
    }

    public static final androidx.health.services.client.data.SampleDataPoint location(double, double, java.time.Duration)
    {
        double d0, d1;
        java.time.Duration r0;
        androidx.health.services.client.data.SampleDataPoint $r1;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r0 := @parameter2: java.time.Duration;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "timeDurationFromBoot");

        $r1 = staticinvoke <androidx.health.services.client.data.DataPoints: androidx.health.services.client.data.SampleDataPoint location$default(double,double,java.time.Duration,double,double,androidx.health.services.client.data.LocationAccuracy,int,java.lang.Object)>(d0, d1, r0, 0.0, 0.0, null, 56, null);

        return $r1;
    }

    public static final androidx.health.services.client.data.SampleDataPoint heartRate(double, java.time.Duration)
    {
        double d0;
        java.time.Duration r0;
        androidx.health.services.client.data.SampleDataPoint $r1;

        d0 := @parameter0: double;

        r0 := @parameter1: java.time.Duration;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "timeDurationFromBoot");

        $r1 = staticinvoke <androidx.health.services.client.data.DataPoints: androidx.health.services.client.data.SampleDataPoint heartRate$default(double,java.time.Duration,androidx.health.services.client.data.HeartRateAccuracy,int,java.lang.Object)>(d0, r0, null, 4, null);

        return $r1;
    }

    static void <clinit>()
    {
        androidx.health.services.client.data.DataPoints $r0;

        $r0 = new androidx.health.services.client.data.DataPoints;

        specialinvoke $r0.<androidx.health.services.client.data.DataPoints: void <init>()>();

        <androidx.health.services.client.data.DataPoints: androidx.health.services.client.data.DataPoints INSTANCE> = $r0;

        return;
    }

