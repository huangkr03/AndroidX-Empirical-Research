org.junit.internal.management.ReflectiveThreadMXBean
<org.junit.internal.management.ReflectiveThreadMXBean: java.lang.Object threadMxBean>
    void <init>(java.lang.Object)
    {
        org.junit.internal.management.ReflectiveThreadMXBean $r0;
        java.lang.Object $r1;

        $r0 := @this: org.junit.internal.management.ReflectiveThreadMXBean;

        $r1 := @parameter0: java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<org.junit.internal.management.ReflectiveThreadMXBean: java.lang.Object threadMxBean> = $r1;

        return;
    }

    public long getThreadCpuTime(long)
    {
        org.junit.internal.management.ReflectiveThreadMXBean $r0;
        long $l0;
        java.lang.reflect.Method $r1;
        java.lang.Object $r2;
        java.lang.Object[] $r3;
        java.lang.Long $r4;
        java.lang.Throwable $r5;
        java.lang.UnsupportedOperationException $r6;

        $r0 := @this: org.junit.internal.management.ReflectiveThreadMXBean;

        $l0 := @parameter0: long;

        $r1 = <org.junit.internal.management.ReflectiveThreadMXBean$Holder: java.lang.reflect.Method getThreadCpuTimeMethod>;

        if $r1 == null goto label09;

        $r1 = <org.junit.internal.management.ReflectiveThreadMXBean$Holder: java.lang.reflect.Method getThreadCpuTimeMethod>;

        $r2 = $r0.<org.junit.internal.management.ReflectiveThreadMXBean: java.lang.Object threadMxBean>;

        $r3 = newarray (java.lang.Object)[1];

     label01:
        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

     label02:
        $r3[0] = $r4;

     label03:
        $r2 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r2, $r3);

     label04:
        $r4 = (java.lang.Long) $r2;

     label05:
        $l0 = virtualinvoke $r4.<java.lang.Long: long longValue()>();

     label06:
        return $l0;

     label07:
        $r5 := @caughtexception;

     label08:
        $r6 = new java.lang.UnsupportedOperationException;

        specialinvoke $r6.<java.lang.UnsupportedOperationException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to access ThreadMXBean", $r5);

        throw $r6;

     label09:
        $r6 = new java.lang.UnsupportedOperationException;

        specialinvoke $r6.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Unable to access ThreadMXBean");

        throw $r6;

     label10:
        $r5 := @caughtexception;

        goto label08;

     label11:
        $r5 := @caughtexception;

        goto label08;

     label12:
        $r5 := @caughtexception;

        goto label08;

        catch java.lang.ClassCastException from label01 to label02 with label12;
        catch java.lang.ClassCastException from label03 to label04 with label12;
        catch java.lang.ClassCastException from label05 to label06 with label12;
        catch java.lang.IllegalAccessException from label01 to label02 with label11;
        catch java.lang.IllegalAccessException from label03 to label04 with label11;
        catch java.lang.IllegalAccessException from label05 to label06 with label11;
        catch java.lang.IllegalArgumentException from label01 to label02 with label10;
        catch java.lang.IllegalArgumentException from label03 to label04 with label10;
        catch java.lang.IllegalArgumentException from label05 to label06 with label10;
        catch java.lang.reflect.InvocationTargetException from label01 to label02 with label07;
        catch java.lang.reflect.InvocationTargetException from label03 to label04 with label07;
        catch java.lang.reflect.InvocationTargetException from label05 to label06 with label07;
    }

    public boolean isThreadCpuTimeSupported()
    {
        org.junit.internal.management.ReflectiveThreadMXBean $r0;
        java.lang.Object $r1;
        java.lang.reflect.Method $r2;
        java.lang.Object[] $r3;
        java.lang.Boolean $r4;
        boolean $z0;
        java.lang.Throwable $r5, $r6, $r7, $r8;

        $r0 := @this: org.junit.internal.management.ReflectiveThreadMXBean;

        $r2 = <org.junit.internal.management.ReflectiveThreadMXBean$Holder: java.lang.reflect.Method isThreadCpuTimeSupportedMethod>;

        if $r2 == null goto label6;

        $r2 = <org.junit.internal.management.ReflectiveThreadMXBean$Holder: java.lang.reflect.Method isThreadCpuTimeSupportedMethod>;

        $r1 = $r0.<org.junit.internal.management.ReflectiveThreadMXBean: java.lang.Object threadMxBean>;

        $r3 = newarray (java.lang.Object)[0];

     label1:
        $r1 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r1, $r3);

     label2:
        $r4 = (java.lang.Boolean) $r1;

     label3:
        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

     label4:
        return $z0;

     label5:
        $r5 := @caughtexception;

     label6:
        return 0;

     label7:
        $r6 := @caughtexception;

        goto label6;

     label8:
        $r7 := @caughtexception;

        goto label6;

     label9:
        $r8 := @caughtexception;

        goto label6;

        catch java.lang.ClassCastException from label1 to label2 with label9;
        catch java.lang.ClassCastException from label3 to label4 with label9;
        catch java.lang.IllegalAccessException from label1 to label2 with label8;
        catch java.lang.IllegalAccessException from label3 to label4 with label8;
        catch java.lang.IllegalArgumentException from label1 to label2 with label7;
        catch java.lang.IllegalArgumentException from label3 to label4 with label7;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label5;
        catch java.lang.reflect.InvocationTargetException from label3 to label4 with label5;
    }

org.junit.internal.management.ReflectiveThreadMXBean$Holder
<org.junit.internal.management.ReflectiveThreadMXBean$Holder: java.lang.reflect.Method getThreadCpuTimeMethod>
<org.junit.internal.management.ReflectiveThreadMXBean$Holder: java.lang.reflect.Method isThreadCpuTimeSupportedMethod>
    static void <clinit>()
    {
        java.lang.Class $r0, $r2;
        java.lang.reflect.Method $r1, $r4, $r5;
        java.lang.Class[] $r3;
        java.lang.Throwable $r6, $r7, $r8, $r9, $r10, $r11;

        $r1 = null;

     label01:
        $r2 = staticinvoke <org.junit.internal.Classes: java.lang.Class getClass(java.lang.String)>("java.lang.management.ThreadMXBean");

     label02:
        $r3 = newarray (java.lang.Class)[1];

        $r0 = <java.lang.Long: java.lang.Class TYPE>;

        $r3[0] = $r0;

     label03:
        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getThreadCpuTime", $r3);

     label04:
        $r3 = newarray (java.lang.Class)[0];

     label05:
        $r5 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("isThreadCpuTimeSupported", $r3);

     label06:
        $r1 = $r5;

     label07:
        <org.junit.internal.management.ReflectiveThreadMXBean$Holder: java.lang.reflect.Method getThreadCpuTimeMethod> = $r4;

        <org.junit.internal.management.ReflectiveThreadMXBean$Holder: java.lang.reflect.Method isThreadCpuTimeSupportedMethod> = $r1;

        return;

     label08:
        $r6 := @caughtexception;

        $r4 = null;

        goto label07;

     label09:
        $r7 := @caughtexception;

        goto label07;

     label10:
        $r8 := @caughtexception;

        $r4 = null;

        goto label07;

     label11:
        $r9 := @caughtexception;

        goto label07;

     label12:
        $r10 := @caughtexception;

        $r4 = null;

        goto label07;

     label13:
        $r11 := @caughtexception;

        goto label07;

        catch java.lang.ClassNotFoundException from label01 to label02 with label12;
        catch java.lang.ClassNotFoundException from label03 to label04 with label12;
        catch java.lang.NoSuchMethodException from label01 to label02 with label10;
        catch java.lang.NoSuchMethodException from label03 to label04 with label10;
        catch java.lang.SecurityException from label01 to label02 with label08;
        catch java.lang.SecurityException from label03 to label04 with label08;
        catch java.lang.ClassNotFoundException from label05 to label06 with label13;
        catch java.lang.NoSuchMethodException from label05 to label06 with label11;
        catch java.lang.SecurityException from label05 to label06 with label09;
    }

