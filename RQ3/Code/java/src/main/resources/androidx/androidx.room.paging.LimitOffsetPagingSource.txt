androidx.room.paging.LimitOffsetPagingSource
<androidx.room.paging.LimitOffsetPagingSource: androidx.room.RoomSQLiteQuery sourceQuery>
<androidx.room.paging.LimitOffsetPagingSource: androidx.room.RoomDatabase db>
<androidx.room.paging.LimitOffsetPagingSource: java.util.concurrent.atomic.AtomicInteger itemCount>
<androidx.room.paging.LimitOffsetPagingSource: androidx.room.paging.util.ThreadSafeInvalidationObserver observer>
    public transient void <init>(androidx.room.RoomSQLiteQuery, androidx.room.RoomDatabase, java.lang.String[])
    {
        androidx.room.paging.LimitOffsetPagingSource r0;
        androidx.room.RoomSQLiteQuery r1;
        androidx.room.RoomDatabase r2;
        java.lang.String[] r3;
        java.util.concurrent.atomic.AtomicInteger $r4;
        androidx.room.paging.util.ThreadSafeInvalidationObserver $r5;
        androidx.room.paging.LimitOffsetPagingSource$observer$1 $r6;
        kotlin.jvm.functions.Function0 $r7;

        r0 := @this: androidx.room.paging.LimitOffsetPagingSource;

        r1 := @parameter0: androidx.room.RoomSQLiteQuery;

        r2 := @parameter1: androidx.room.RoomDatabase;

        r3 := @parameter2: java.lang.String[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "sourceQuery");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "db");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "tables");

        specialinvoke r0.<androidx.paging.PagingSource: void <init>()>();

        r0.<androidx.room.paging.LimitOffsetPagingSource: androidx.room.RoomSQLiteQuery sourceQuery> = r1;

        r0.<androidx.room.paging.LimitOffsetPagingSource: androidx.room.RoomDatabase db> = r2;

        $r4 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(-1);

        r0.<androidx.room.paging.LimitOffsetPagingSource: java.util.concurrent.atomic.AtomicInteger itemCount> = $r4;

        $r5 = new androidx.room.paging.util.ThreadSafeInvalidationObserver;

        $r6 = new androidx.room.paging.LimitOffsetPagingSource$observer$1;

        specialinvoke $r6.<androidx.room.paging.LimitOffsetPagingSource$observer$1: void <init>(java.lang.Object)>(r0);

        $r7 = (kotlin.jvm.functions.Function0) $r6;

        specialinvoke $r5.<androidx.room.paging.util.ThreadSafeInvalidationObserver: void <init>(java.lang.String[],kotlin.jvm.functions.Function0)>(r3, $r7);

        r0.<androidx.room.paging.LimitOffsetPagingSource: androidx.room.paging.util.ThreadSafeInvalidationObserver observer> = $r5;

        return;
    }

    public transient void <init>(androidx.sqlite.db.SupportSQLiteQuery, androidx.room.RoomDatabase, java.lang.String[])
    {
        androidx.room.paging.LimitOffsetPagingSource r0;
        androidx.sqlite.db.SupportSQLiteQuery r1;
        androidx.room.RoomDatabase r2;
        java.lang.String[] r3, $r7;
        androidx.room.RoomSQLiteQuery$Companion $r4;
        androidx.room.RoomSQLiteQuery $r5;
        int $i0;
        java.lang.Object[] $r6;

        r0 := @this: androidx.room.paging.LimitOffsetPagingSource;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteQuery;

        r2 := @parameter1: androidx.room.RoomDatabase;

        r3 := @parameter2: java.lang.String[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "supportSQLiteQuery");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "db");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "tables");

        $r4 = <androidx.room.RoomSQLiteQuery: androidx.room.RoomSQLiteQuery$Companion Companion>;

        $r5 = virtualinvoke $r4.<androidx.room.RoomSQLiteQuery$Companion: androidx.room.RoomSQLiteQuery copyFrom(androidx.sqlite.db.SupportSQLiteQuery)>(r1);

        $i0 = lengthof r3;

        $r6 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r3, $i0);

        $r7 = (java.lang.String[]) $r6;

        specialinvoke r0.<androidx.room.paging.LimitOffsetPagingSource: void <init>(androidx.room.RoomSQLiteQuery,androidx.room.RoomDatabase,java.lang.String[])>($r5, r2, $r7);

        return;
    }

    public final java.util.concurrent.atomic.AtomicInteger getItemCount$room_paging_release()
    {
        androidx.room.paging.LimitOffsetPagingSource r0;
        java.util.concurrent.atomic.AtomicInteger $r1;

        r0 := @this: androidx.room.paging.LimitOffsetPagingSource;

        $r1 = r0.<androidx.room.paging.LimitOffsetPagingSource: java.util.concurrent.atomic.AtomicInteger itemCount>;

        return $r1;
    }

    public java.lang.Object load(androidx.paging.PagingSource$LoadParams, kotlin.coroutines.Continuation)
    {
        androidx.room.paging.LimitOffsetPagingSource r0;
        androidx.paging.PagingSource$LoadParams r1;
        kotlin.coroutines.Continuation $r2;
        java.lang.Object $r3;

        r0 := @this: androidx.room.paging.LimitOffsetPagingSource;

        r1 := @parameter0: androidx.paging.PagingSource$LoadParams;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = staticinvoke <androidx.room.paging.LimitOffsetPagingSource: java.lang.Object load$suspendImpl(androidx.room.paging.LimitOffsetPagingSource,androidx.paging.PagingSource$LoadParams,kotlin.coroutines.Continuation)>(r0, r1, $r2);

        return $r3;
    }

    static java.lang.Object load$suspendImpl(androidx.room.paging.LimitOffsetPagingSource, androidx.paging.PagingSource$LoadParams, kotlin.coroutines.Continuation)
    {
        androidx.room.paging.LimitOffsetPagingSource $r0;
        androidx.paging.PagingSource$LoadParams r1;
        kotlin.coroutines.Continuation $r2;
        androidx.room.RoomDatabase $r3;
        kotlinx.coroutines.CoroutineDispatcher $r4;
        androidx.room.paging.LimitOffsetPagingSource$load$2 $r5;
        kotlin.coroutines.CoroutineContext $r6;
        kotlin.jvm.functions.Function2 $r7;
        java.lang.Object $r8;

        $r0 := @parameter0: androidx.room.paging.LimitOffsetPagingSource;

        r1 := @parameter1: androidx.paging.PagingSource$LoadParams;

        $r2 := @parameter2: kotlin.coroutines.Continuation;

        $r3 = $r0.<androidx.room.paging.LimitOffsetPagingSource: androidx.room.RoomDatabase db>;

        $r4 = staticinvoke <androidx.room.CoroutinesRoomKt: kotlinx.coroutines.CoroutineDispatcher getQueryDispatcher(androidx.room.RoomDatabase)>($r3);

        $r6 = (kotlin.coroutines.CoroutineContext) $r4;

        $r5 = new androidx.room.paging.LimitOffsetPagingSource$load$2;

        specialinvoke $r5.<androidx.room.paging.LimitOffsetPagingSource$load$2: void <init>(androidx.room.paging.LimitOffsetPagingSource,androidx.paging.PagingSource$LoadParams,kotlin.coroutines.Continuation)>($r0, r1, null);

        $r7 = (kotlin.jvm.functions.Function2) $r5;

        $r8 = staticinvoke <kotlinx.coroutines.BuildersKt: java.lang.Object withContext(kotlin.coroutines.CoroutineContext,kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation)>($r6, $r7, $r2);

        return $r8;
    }

    private final java.lang.Object initialLoad(androidx.paging.PagingSource$LoadParams, kotlin.coroutines.Continuation)
    {
        androidx.room.paging.LimitOffsetPagingSource r0;
        androidx.paging.PagingSource$LoadParams r1;
        kotlin.coroutines.Continuation $r2;
        androidx.room.paging.LimitOffsetPagingSource$initialLoad$2 $r3;
        androidx.room.RoomDatabase $r4;
        kotlin.jvm.functions.Function1 $r5;
        java.lang.Object $r6;

        r0 := @this: androidx.room.paging.LimitOffsetPagingSource;

        r1 := @parameter0: androidx.paging.PagingSource$LoadParams;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r4 = r0.<androidx.room.paging.LimitOffsetPagingSource: androidx.room.RoomDatabase db>;

        $r3 = new androidx.room.paging.LimitOffsetPagingSource$initialLoad$2;

        specialinvoke $r3.<androidx.room.paging.LimitOffsetPagingSource$initialLoad$2: void <init>(androidx.room.paging.LimitOffsetPagingSource,androidx.paging.PagingSource$LoadParams,kotlin.coroutines.Continuation)>(r0, r1, null);

        $r5 = (kotlin.jvm.functions.Function1) $r3;

        $r6 = staticinvoke <androidx.room.RoomDatabaseKt: java.lang.Object withTransaction(androidx.room.RoomDatabase,kotlin.jvm.functions.Function1,kotlin.coroutines.Continuation)>($r4, $r5, $r2);

        return $r6;
    }

    private final java.lang.Object nonInitialLoad(androidx.paging.PagingSource$LoadParams, int, kotlin.coroutines.Continuation)
    {
        androidx.room.paging.LimitOffsetPagingSource r0;
        androidx.paging.PagingSource$LoadParams r1;
        int i0;
        kotlin.coroutines.Continuation $r2;
        androidx.paging.PagingSource$LoadResult r3, $r11;
        androidx.room.paging.LimitOffsetPagingSource$nonInitialLoad$loadResult$1 $r4;
        androidx.room.RoomSQLiteQuery $r5;
        androidx.room.RoomDatabase $r6, $r8;
        kotlin.jvm.functions.Function1 $r7;
        androidx.room.InvalidationTracker $r9;
        boolean $z0;
        androidx.paging.PagingSource$LoadResult$Invalid $r10;

        r0 := @this: androidx.room.paging.LimitOffsetPagingSource;

        r1 := @parameter0: androidx.paging.PagingSource$LoadParams;

        i0 := @parameter1: int;

        $r2 := @parameter2: kotlin.coroutines.Continuation;

        $r5 = r0.<androidx.room.paging.LimitOffsetPagingSource: androidx.room.RoomSQLiteQuery sourceQuery>;

        $r6 = r0.<androidx.room.paging.LimitOffsetPagingSource: androidx.room.RoomDatabase db>;

        $r4 = new androidx.room.paging.LimitOffsetPagingSource$nonInitialLoad$loadResult$1;

        specialinvoke $r4.<androidx.room.paging.LimitOffsetPagingSource$nonInitialLoad$loadResult$1: void <init>(java.lang.Object)>(r0);

        $r7 = (kotlin.jvm.functions.Function1) $r4;

        r3 = staticinvoke <androidx.room.paging.util.RoomPagingUtilKt: androidx.paging.PagingSource$LoadResult queryDatabase$default(androidx.paging.PagingSource$LoadParams,androidx.room.RoomSQLiteQuery,androidx.room.RoomDatabase,int,android.os.CancellationSignal,kotlin.jvm.functions.Function1,int,java.lang.Object)>(r1, $r5, $r6, i0, null, $r7, 16, null);

        $r8 = r0.<androidx.room.paging.LimitOffsetPagingSource: androidx.room.RoomDatabase db>;

        $r9 = virtualinvoke $r8.<androidx.room.RoomDatabase: androidx.room.InvalidationTracker getInvalidationTracker()>();

        virtualinvoke $r9.<androidx.room.InvalidationTracker: void refreshVersionsSync()>();

        $z0 = virtualinvoke r0.<androidx.room.paging.LimitOffsetPagingSource: boolean getInvalid()>();

        if $z0 == 0 goto label1;

        $r10 = staticinvoke <androidx.room.paging.util.RoomPagingUtilKt: androidx.paging.PagingSource$LoadResult$Invalid getINVALID()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r10, "null cannot be cast to non-null type androidx.paging.PagingSource.LoadResult.Invalid<kotlin.Int, Value of androidx.room.paging.LimitOffsetPagingSource>");

        $r11 = (androidx.paging.PagingSource$LoadResult) $r10;

        goto label2;

     label1:
        $r11 = r3;

     label2:
        return $r11;
    }

<androidx.room.paging.LimitOffsetPagingSource: java.util.List convertRows(android.database.Cursor)>
    public java.lang.Integer getRefreshKey(androidx.paging.PagingState)
    {
        androidx.room.paging.LimitOffsetPagingSource r0;
        androidx.paging.PagingState r1;
        java.lang.Integer $r2;

        r0 := @this: androidx.room.paging.LimitOffsetPagingSource;

        r1 := @parameter0: androidx.paging.PagingState;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "state");

        $r2 = staticinvoke <androidx.room.paging.util.RoomPagingUtilKt: java.lang.Integer getClippedRefreshKey(androidx.paging.PagingState)>(r1);

        return $r2;
    }

    public boolean getJumpingSupported()
    {
        androidx.room.paging.LimitOffsetPagingSource r0;

        r0 := @this: androidx.room.paging.LimitOffsetPagingSource;

        return 1;
    }

    public volatile java.lang.Object getRefreshKey(androidx.paging.PagingState)
    {
        androidx.room.paging.LimitOffsetPagingSource r0;
        androidx.paging.PagingState r1;
        java.lang.Integer $r2;

        r0 := @this: androidx.room.paging.LimitOffsetPagingSource;

        r1 := @parameter0: androidx.paging.PagingState;

        $r2 = virtualinvoke r0.<androidx.room.paging.LimitOffsetPagingSource: java.lang.Integer getRefreshKey(androidx.paging.PagingState)>(r1);

        return $r2;
    }

    public static final androidx.room.paging.util.ThreadSafeInvalidationObserver access$getObserver$p(androidx.room.paging.LimitOffsetPagingSource)
    {
        androidx.room.paging.LimitOffsetPagingSource $r0;
        androidx.room.paging.util.ThreadSafeInvalidationObserver $r1;

        $r0 := @parameter0: androidx.room.paging.LimitOffsetPagingSource;

        $r1 = $r0.<androidx.room.paging.LimitOffsetPagingSource: androidx.room.paging.util.ThreadSafeInvalidationObserver observer>;

        return $r1;
    }

    public static final androidx.room.RoomDatabase access$getDb$p(androidx.room.paging.LimitOffsetPagingSource)
    {
        androidx.room.paging.LimitOffsetPagingSource $r0;
        androidx.room.RoomDatabase $r1;

        $r0 := @parameter0: androidx.room.paging.LimitOffsetPagingSource;

        $r1 = $r0.<androidx.room.paging.LimitOffsetPagingSource: androidx.room.RoomDatabase db>;

        return $r1;
    }

    public static final java.lang.Object access$initialLoad(androidx.room.paging.LimitOffsetPagingSource, androidx.paging.PagingSource$LoadParams, kotlin.coroutines.Continuation)
    {
        androidx.room.paging.LimitOffsetPagingSource $r0;
        androidx.paging.PagingSource$LoadParams r1;
        kotlin.coroutines.Continuation $r2;
        java.lang.Object $r3;

        $r0 := @parameter0: androidx.room.paging.LimitOffsetPagingSource;

        r1 := @parameter1: androidx.paging.PagingSource$LoadParams;

        $r2 := @parameter2: kotlin.coroutines.Continuation;

        $r3 = specialinvoke $r0.<androidx.room.paging.LimitOffsetPagingSource: java.lang.Object initialLoad(androidx.paging.PagingSource$LoadParams,kotlin.coroutines.Continuation)>(r1, $r2);

        return $r3;
    }

    public static final java.lang.Object access$nonInitialLoad(androidx.room.paging.LimitOffsetPagingSource, androidx.paging.PagingSource$LoadParams, int, kotlin.coroutines.Continuation)
    {
        androidx.room.paging.LimitOffsetPagingSource $r0;
        androidx.paging.PagingSource$LoadParams r1;
        int i0;
        kotlin.coroutines.Continuation $r2;
        java.lang.Object $r3;

        $r0 := @parameter0: androidx.room.paging.LimitOffsetPagingSource;

        r1 := @parameter1: androidx.paging.PagingSource$LoadParams;

        i0 := @parameter2: int;

        $r2 := @parameter3: kotlin.coroutines.Continuation;

        $r3 = specialinvoke $r0.<androidx.room.paging.LimitOffsetPagingSource: java.lang.Object nonInitialLoad(androidx.paging.PagingSource$LoadParams,int,kotlin.coroutines.Continuation)>(r1, i0, $r2);

        return $r3;
    }

    public static final androidx.room.RoomSQLiteQuery access$getSourceQuery$p(androidx.room.paging.LimitOffsetPagingSource)
    {
        androidx.room.paging.LimitOffsetPagingSource $r0;
        androidx.room.RoomSQLiteQuery $r1;

        $r0 := @parameter0: androidx.room.paging.LimitOffsetPagingSource;

        $r1 = $r0.<androidx.room.paging.LimitOffsetPagingSource: androidx.room.RoomSQLiteQuery sourceQuery>;

        return $r1;
    }

androidx.room.paging.LimitOffsetPagingSource$initialLoad$2$1
    void <init>(java.lang.Object)
    {
        androidx.room.paging.LimitOffsetPagingSource$initialLoad$2$1 r0;
        java.lang.Object r1;

        r0 := @this: androidx.room.paging.LimitOffsetPagingSource$initialLoad$2$1;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<kotlin.jvm.internal.FunctionReferenceImpl: void <init>(int,java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int)>(1, r1, class "Landroidx/room/paging/LimitOffsetPagingSource;", "convertRows", "convertRows(Landroid/database/Cursor;)Ljava/util/List;", 0);

        return;
    }

    public final java.util.List invoke(android.database.Cursor)
    {
        androidx.room.paging.LimitOffsetPagingSource$initialLoad$2$1 r0;
        android.database.Cursor r1;
        java.lang.Object $r2;
        androidx.room.paging.LimitOffsetPagingSource $r3;
        java.util.List $r4;

        r0 := @this: androidx.room.paging.LimitOffsetPagingSource$initialLoad$2$1;

        r1 := @parameter0: android.database.Cursor;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "p0");

        $r2 = r0.<androidx.room.paging.LimitOffsetPagingSource$initialLoad$2$1: java.lang.Object receiver>;

        $r3 = (androidx.room.paging.LimitOffsetPagingSource) $r2;

        $r4 = virtualinvoke $r3.<androidx.room.paging.LimitOffsetPagingSource: java.util.List convertRows(android.database.Cursor)>(r1);

        return $r4;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.paging.LimitOffsetPagingSource$initialLoad$2$1 r0;
        java.lang.Object r1;
        android.database.Cursor $r2;
        java.util.List $r3;

        r0 := @this: androidx.room.paging.LimitOffsetPagingSource$initialLoad$2$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.database.Cursor) r1;

        $r3 = virtualinvoke r0.<androidx.room.paging.LimitOffsetPagingSource$initialLoad$2$1: java.util.List invoke(android.database.Cursor)>($r2);

        return $r3;
    }

androidx.room.paging.LimitOffsetPagingSource$initialLoad$2
<androidx.room.paging.LimitOffsetPagingSource$initialLoad$2: int label>
<androidx.room.paging.LimitOffsetPagingSource$initialLoad$2: androidx.room.paging.LimitOffsetPagingSource this$0>
<androidx.room.paging.LimitOffsetPagingSource$initialLoad$2: androidx.paging.PagingSource$LoadParams $params>
    void <init>(androidx.room.paging.LimitOffsetPagingSource, androidx.paging.PagingSource$LoadParams, kotlin.coroutines.Continuation)
    {
        androidx.room.paging.LimitOffsetPagingSource$initialLoad$2 r0;
        androidx.room.paging.LimitOffsetPagingSource $r1;
        androidx.paging.PagingSource$LoadParams $r2;
        kotlin.coroutines.Continuation $r3;

        r0 := @this: androidx.room.paging.LimitOffsetPagingSource$initialLoad$2;

        $r1 := @parameter0: androidx.room.paging.LimitOffsetPagingSource;

        $r2 := @parameter1: androidx.paging.PagingSource$LoadParams;

        $r3 := @parameter2: kotlin.coroutines.Continuation;

        r0.<androidx.room.paging.LimitOffsetPagingSource$initialLoad$2: androidx.room.paging.LimitOffsetPagingSource this$0> = $r1;

        r0.<androidx.room.paging.LimitOffsetPagingSource$initialLoad$2: androidx.paging.PagingSource$LoadParams $params> = $r2;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(1, $r3);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.room.paging.LimitOffsetPagingSource$initialLoad$2 r0;
        java.lang.Object $r1;
        int i0, $i1;
        androidx.room.paging.LimitOffsetPagingSource $r3, $r5, $r7, $r9, $r12, $r15;
        androidx.room.RoomSQLiteQuery $r4, $r11;
        androidx.room.RoomDatabase $r6, $r13;
        java.util.concurrent.atomic.AtomicInteger $r8;
        androidx.paging.PagingSource$LoadParams $r10;
        androidx.room.paging.LimitOffsetPagingSource$initialLoad$2$1 $r14;
        kotlin.jvm.functions.Function1 $r16;
        androidx.paging.PagingSource$LoadResult $r17;
        java.lang.IllegalStateException $r18;

        r0 := @this: androidx.room.paging.LimitOffsetPagingSource$initialLoad$2;

        $r1 := @parameter0: java.lang.Object;

        staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i1 = r0.<androidx.room.paging.LimitOffsetPagingSource$initialLoad$2: int label>;

        tableswitch($i1)
        {
            case 0: goto label1;
            default: goto label2;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r3 = r0.<androidx.room.paging.LimitOffsetPagingSource$initialLoad$2: androidx.room.paging.LimitOffsetPagingSource this$0>;

        $r4 = staticinvoke <androidx.room.paging.LimitOffsetPagingSource: androidx.room.RoomSQLiteQuery access$getSourceQuery$p(androidx.room.paging.LimitOffsetPagingSource)>($r3);

        $r5 = r0.<androidx.room.paging.LimitOffsetPagingSource$initialLoad$2: androidx.room.paging.LimitOffsetPagingSource this$0>;

        $r6 = staticinvoke <androidx.room.paging.LimitOffsetPagingSource: androidx.room.RoomDatabase access$getDb$p(androidx.room.paging.LimitOffsetPagingSource)>($r5);

        i0 = staticinvoke <androidx.room.paging.util.RoomPagingUtilKt: int queryItemCount(androidx.room.RoomSQLiteQuery,androidx.room.RoomDatabase)>($r4, $r6);

        $r7 = r0.<androidx.room.paging.LimitOffsetPagingSource$initialLoad$2: androidx.room.paging.LimitOffsetPagingSource this$0>;

        $r8 = virtualinvoke $r7.<androidx.room.paging.LimitOffsetPagingSource: java.util.concurrent.atomic.AtomicInteger getItemCount$room_paging_release()>();

        virtualinvoke $r8.<java.util.concurrent.atomic.AtomicInteger: void set(int)>(i0);

        $r10 = r0.<androidx.room.paging.LimitOffsetPagingSource$initialLoad$2: androidx.paging.PagingSource$LoadParams $params>;

        $r9 = r0.<androidx.room.paging.LimitOffsetPagingSource$initialLoad$2: androidx.room.paging.LimitOffsetPagingSource this$0>;

        $r11 = staticinvoke <androidx.room.paging.LimitOffsetPagingSource: androidx.room.RoomSQLiteQuery access$getSourceQuery$p(androidx.room.paging.LimitOffsetPagingSource)>($r9);

        $r12 = r0.<androidx.room.paging.LimitOffsetPagingSource$initialLoad$2: androidx.room.paging.LimitOffsetPagingSource this$0>;

        $r13 = staticinvoke <androidx.room.paging.LimitOffsetPagingSource: androidx.room.RoomDatabase access$getDb$p(androidx.room.paging.LimitOffsetPagingSource)>($r12);

        $r14 = new androidx.room.paging.LimitOffsetPagingSource$initialLoad$2$1;

        $r15 = r0.<androidx.room.paging.LimitOffsetPagingSource$initialLoad$2: androidx.room.paging.LimitOffsetPagingSource this$0>;

        specialinvoke $r14.<androidx.room.paging.LimitOffsetPagingSource$initialLoad$2$1: void <init>(java.lang.Object)>($r15);

        $r16 = (kotlin.jvm.functions.Function1) $r14;

        $r17 = staticinvoke <androidx.room.paging.util.RoomPagingUtilKt: androidx.paging.PagingSource$LoadResult queryDatabase$default(androidx.paging.PagingSource$LoadParams,androidx.room.RoomSQLiteQuery,androidx.room.RoomDatabase,int,android.os.CancellationSignal,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r10, $r11, $r13, i0, null, $r16, 16, null);

        return $r17;

     label2:
        $r18 = new java.lang.IllegalStateException;

        specialinvoke $r18.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r18;
    }

    public final kotlin.coroutines.Continuation create(kotlin.coroutines.Continuation)
    {
        androidx.room.paging.LimitOffsetPagingSource$initialLoad$2 r0, $r2;
        kotlin.coroutines.Continuation $r1, $r5;
        androidx.paging.PagingSource$LoadParams $r3;
        androidx.room.paging.LimitOffsetPagingSource $r4;

        r0 := @this: androidx.room.paging.LimitOffsetPagingSource$initialLoad$2;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $r2 = new androidx.room.paging.LimitOffsetPagingSource$initialLoad$2;

        $r4 = r0.<androidx.room.paging.LimitOffsetPagingSource$initialLoad$2: androidx.room.paging.LimitOffsetPagingSource this$0>;

        $r3 = r0.<androidx.room.paging.LimitOffsetPagingSource$initialLoad$2: androidx.paging.PagingSource$LoadParams $params>;

        specialinvoke $r2.<androidx.room.paging.LimitOffsetPagingSource$initialLoad$2: void <init>(androidx.room.paging.LimitOffsetPagingSource,androidx.paging.PagingSource$LoadParams,kotlin.coroutines.Continuation)>($r4, $r3, $r1);

        $r5 = (kotlin.coroutines.Continuation) $r2;

        return $r5;
    }

    public final java.lang.Object invoke(kotlin.coroutines.Continuation)
    {
        androidx.room.paging.LimitOffsetPagingSource$initialLoad$2 r0, $r4;
        kotlin.coroutines.Continuation r1, $r2;
        kotlin.Unit $r3;
        java.lang.Object $r5;

        r0 := @this: androidx.room.paging.LimitOffsetPagingSource$initialLoad$2;

        r1 := @parameter0: kotlin.coroutines.Continuation;

        $r2 = virtualinvoke r0.<androidx.room.paging.LimitOffsetPagingSource$initialLoad$2: kotlin.coroutines.Continuation create(kotlin.coroutines.Continuation)>(r1);

        $r4 = (androidx.room.paging.LimitOffsetPagingSource$initialLoad$2) $r2;

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r5 = virtualinvoke $r4.<androidx.room.paging.LimitOffsetPagingSource$initialLoad$2: java.lang.Object invokeSuspend(java.lang.Object)>($r3);

        return $r5;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.paging.LimitOffsetPagingSource$initialLoad$2 r0;
        java.lang.Object r1, $r3;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.room.paging.LimitOffsetPagingSource$initialLoad$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = (kotlin.coroutines.Continuation) r1;

        $r3 = virtualinvoke r0.<androidx.room.paging.LimitOffsetPagingSource$initialLoad$2: java.lang.Object invoke(kotlin.coroutines.Continuation)>($r2);

        return $r3;
    }

androidx.room.paging.LimitOffsetPagingSource$load$2
<androidx.room.paging.LimitOffsetPagingSource$load$2: int label>
<androidx.room.paging.LimitOffsetPagingSource$load$2: androidx.room.paging.LimitOffsetPagingSource this$0>
<androidx.room.paging.LimitOffsetPagingSource$load$2: androidx.paging.PagingSource$LoadParams $params>
    void <init>(androidx.room.paging.LimitOffsetPagingSource, androidx.paging.PagingSource$LoadParams, kotlin.coroutines.Continuation)
    {
        androidx.room.paging.LimitOffsetPagingSource$load$2 r0;
        androidx.room.paging.LimitOffsetPagingSource $r1;
        androidx.paging.PagingSource$LoadParams $r2;
        kotlin.coroutines.Continuation $r3;

        r0 := @this: androidx.room.paging.LimitOffsetPagingSource$load$2;

        $r1 := @parameter0: androidx.room.paging.LimitOffsetPagingSource;

        $r2 := @parameter1: androidx.paging.PagingSource$LoadParams;

        $r3 := @parameter2: kotlin.coroutines.Continuation;

        r0.<androidx.room.paging.LimitOffsetPagingSource$load$2: androidx.room.paging.LimitOffsetPagingSource this$0> = $r1;

        r0.<androidx.room.paging.LimitOffsetPagingSource$load$2: androidx.paging.PagingSource$LoadParams $params> = $r2;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r3);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.room.paging.LimitOffsetPagingSource$load$2 r0;
        java.lang.Object $r1, r2, $r16, $r18;
        int i0, $i1;
        androidx.room.paging.LimitOffsetPagingSource $r3, $r5, $r7, $r9, $r12;
        androidx.room.paging.util.ThreadSafeInvalidationObserver $r4;
        androidx.room.RoomDatabase $r6;
        java.util.concurrent.atomic.AtomicInteger $r8;
        androidx.paging.PagingSource$LoadParams $r10, $r13;
        kotlin.coroutines.Continuation $r11, $r14;
        java.lang.IllegalStateException $r15;
        androidx.paging.PagingSource$LoadResult $r17;

        r0 := @this: androidx.room.paging.LimitOffsetPagingSource$load$2;

        $r1 := @parameter0: java.lang.Object;

        r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i1 = r0.<androidx.room.paging.LimitOffsetPagingSource$load$2: int label>;

        tableswitch($i1)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label5;
            default: goto label8;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r3 = r0.<androidx.room.paging.LimitOffsetPagingSource$load$2: androidx.room.paging.LimitOffsetPagingSource this$0>;

        $r4 = staticinvoke <androidx.room.paging.LimitOffsetPagingSource: androidx.room.paging.util.ThreadSafeInvalidationObserver access$getObserver$p(androidx.room.paging.LimitOffsetPagingSource)>($r3);

        $r5 = r0.<androidx.room.paging.LimitOffsetPagingSource$load$2: androidx.room.paging.LimitOffsetPagingSource this$0>;

        $r6 = staticinvoke <androidx.room.paging.LimitOffsetPagingSource: androidx.room.RoomDatabase access$getDb$p(androidx.room.paging.LimitOffsetPagingSource)>($r5);

        virtualinvoke $r4.<androidx.room.paging.util.ThreadSafeInvalidationObserver: void registerIfNecessary(androidx.room.RoomDatabase)>($r6);

        $r7 = r0.<androidx.room.paging.LimitOffsetPagingSource$load$2: androidx.room.paging.LimitOffsetPagingSource this$0>;

        $r8 = virtualinvoke $r7.<androidx.room.paging.LimitOffsetPagingSource: java.util.concurrent.atomic.AtomicInteger getItemCount$room_paging_release()>();

        i0 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        if i0 != -1 goto label4;

        $r12 = r0.<androidx.room.paging.LimitOffsetPagingSource$load$2: androidx.room.paging.LimitOffsetPagingSource this$0>;

        $r13 = r0.<androidx.room.paging.LimitOffsetPagingSource$load$2: androidx.paging.PagingSource$LoadParams $params>;

        $r14 = (kotlin.coroutines.Continuation) r0;

        r0.<androidx.room.paging.LimitOffsetPagingSource$load$2: int label> = 1;

        $r16 = staticinvoke <androidx.room.paging.LimitOffsetPagingSource: java.lang.Object access$initialLoad(androidx.room.paging.LimitOffsetPagingSource,androidx.paging.PagingSource$LoadParams,kotlin.coroutines.Continuation)>($r12, $r13, $r14);

        if $r16 != r2 goto label3;

        return r2;

     label2:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r16 = $r1;

     label3:
        $r17 = (androidx.paging.PagingSource$LoadResult) $r16;

        goto label7;

     label4:
        $r9 = r0.<androidx.room.paging.LimitOffsetPagingSource$load$2: androidx.room.paging.LimitOffsetPagingSource this$0>;

        $r10 = r0.<androidx.room.paging.LimitOffsetPagingSource$load$2: androidx.paging.PagingSource$LoadParams $params>;

        $r11 = (kotlin.coroutines.Continuation) r0;

        r0.<androidx.room.paging.LimitOffsetPagingSource$load$2: int label> = 2;

        $r18 = staticinvoke <androidx.room.paging.LimitOffsetPagingSource: java.lang.Object access$nonInitialLoad(androidx.room.paging.LimitOffsetPagingSource,androidx.paging.PagingSource$LoadParams,int,kotlin.coroutines.Continuation)>($r9, $r10, i0, $r11);

        if $r18 != r2 goto label6;

        return r2;

     label5:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r18 = $r1;

     label6:
        $r17 = (androidx.paging.PagingSource$LoadResult) $r18;

     label7:
        return $r17;

     label8:
        $r15 = new java.lang.IllegalStateException;

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r15;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.room.paging.LimitOffsetPagingSource$load$2 r0, $r3;
        java.lang.Object r1;
        kotlin.coroutines.Continuation $r2, $r6;
        androidx.paging.PagingSource$LoadParams $r4;
        androidx.room.paging.LimitOffsetPagingSource $r5;

        r0 := @this: androidx.room.paging.LimitOffsetPagingSource$load$2;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = new androidx.room.paging.LimitOffsetPagingSource$load$2;

        $r5 = r0.<androidx.room.paging.LimitOffsetPagingSource$load$2: androidx.room.paging.LimitOffsetPagingSource this$0>;

        $r4 = r0.<androidx.room.paging.LimitOffsetPagingSource$load$2: androidx.paging.PagingSource$LoadParams $params>;

        specialinvoke $r3.<androidx.room.paging.LimitOffsetPagingSource$load$2: void <init>(androidx.room.paging.LimitOffsetPagingSource,androidx.paging.PagingSource$LoadParams,kotlin.coroutines.Continuation)>($r5, $r4, $r2);

        $r6 = (kotlin.coroutines.Continuation) $r3;

        return $r6;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.Continuation)
    {
        androidx.room.paging.LimitOffsetPagingSource$load$2 r0, $r5;
        kotlinx.coroutines.CoroutineScope r1;
        kotlin.coroutines.Continuation r2, $r3;
        kotlin.Unit $r4;
        java.lang.Object $r6;

        r0 := @this: androidx.room.paging.LimitOffsetPagingSource$load$2;

        r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = virtualinvoke r0.<androidx.room.paging.LimitOffsetPagingSource$load$2: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, r2);

        $r5 = (androidx.room.paging.LimitOffsetPagingSource$load$2) $r3;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.room.paging.LimitOffsetPagingSource$load$2: java.lang.Object invokeSuspend(java.lang.Object)>($r4);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.room.paging.LimitOffsetPagingSource$load$2 r0;
        java.lang.Object r1, r2, $r5;
        kotlin.coroutines.Continuation $r3;
        kotlinx.coroutines.CoroutineScope $r4;

        r0 := @this: androidx.room.paging.LimitOffsetPagingSource$load$2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (kotlinx.coroutines.CoroutineScope) r1;

        $r3 = (kotlin.coroutines.Continuation) r2;

        $r5 = virtualinvoke r0.<androidx.room.paging.LimitOffsetPagingSource$load$2: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)>($r4, $r3);

        return $r5;
    }

androidx.room.paging.LimitOffsetPagingSource$nonInitialLoad$loadResult$1
    void <init>(java.lang.Object)
    {
        androidx.room.paging.LimitOffsetPagingSource$nonInitialLoad$loadResult$1 r0;
        java.lang.Object r1;

        r0 := @this: androidx.room.paging.LimitOffsetPagingSource$nonInitialLoad$loadResult$1;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<kotlin.jvm.internal.FunctionReferenceImpl: void <init>(int,java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int)>(1, r1, class "Landroidx/room/paging/LimitOffsetPagingSource;", "convertRows", "convertRows(Landroid/database/Cursor;)Ljava/util/List;", 0);

        return;
    }

    public final java.util.List invoke(android.database.Cursor)
    {
        androidx.room.paging.LimitOffsetPagingSource$nonInitialLoad$loadResult$1 r0;
        android.database.Cursor r1;
        java.lang.Object $r2;
        androidx.room.paging.LimitOffsetPagingSource $r3;
        java.util.List $r4;

        r0 := @this: androidx.room.paging.LimitOffsetPagingSource$nonInitialLoad$loadResult$1;

        r1 := @parameter0: android.database.Cursor;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "p0");

        $r2 = r0.<androidx.room.paging.LimitOffsetPagingSource$nonInitialLoad$loadResult$1: java.lang.Object receiver>;

        $r3 = (androidx.room.paging.LimitOffsetPagingSource) $r2;

        $r4 = virtualinvoke $r3.<androidx.room.paging.LimitOffsetPagingSource: java.util.List convertRows(android.database.Cursor)>(r1);

        return $r4;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.paging.LimitOffsetPagingSource$nonInitialLoad$loadResult$1 r0;
        java.lang.Object r1;
        android.database.Cursor $r2;
        java.util.List $r3;

        r0 := @this: androidx.room.paging.LimitOffsetPagingSource$nonInitialLoad$loadResult$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.database.Cursor) r1;

        $r3 = virtualinvoke r0.<androidx.room.paging.LimitOffsetPagingSource$nonInitialLoad$loadResult$1: java.util.List invoke(android.database.Cursor)>($r2);

        return $r3;
    }

androidx.room.paging.LimitOffsetPagingSource$observer$1
    void <init>(java.lang.Object)
    {
        androidx.room.paging.LimitOffsetPagingSource$observer$1 r0;
        java.lang.Object r1;

        r0 := @this: androidx.room.paging.LimitOffsetPagingSource$observer$1;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<kotlin.jvm.internal.FunctionReferenceImpl: void <init>(int,java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int)>(0, r1, class "Landroidx/room/paging/LimitOffsetPagingSource;", "invalidate", "invalidate()V", 0);

        return;
    }

    public final void invoke()
    {
        androidx.room.paging.LimitOffsetPagingSource$observer$1 r0;
        java.lang.Object $r1;
        androidx.room.paging.LimitOffsetPagingSource $r2;

        r0 := @this: androidx.room.paging.LimitOffsetPagingSource$observer$1;

        $r1 = r0.<androidx.room.paging.LimitOffsetPagingSource$observer$1: java.lang.Object receiver>;

        $r2 = (androidx.room.paging.LimitOffsetPagingSource) $r1;

        virtualinvoke $r2.<androidx.room.paging.LimitOffsetPagingSource: void invalidate()>();

        return;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.room.paging.LimitOffsetPagingSource$observer$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.room.paging.LimitOffsetPagingSource$observer$1;

        virtualinvoke r0.<androidx.room.paging.LimitOffsetPagingSource$observer$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

