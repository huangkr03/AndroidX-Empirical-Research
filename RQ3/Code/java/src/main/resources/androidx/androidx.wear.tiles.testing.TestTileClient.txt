androidx.wear.tiles.testing.TestTileClient
<androidx.wear.tiles.testing.TestTileClient: org.robolectric.android.controller.ServiceController controller>
<androidx.wear.tiles.testing.TestTileClient: android.content.ComponentName componentName>
<androidx.wear.tiles.testing.TestTileClient: androidx.wear.tiles.connection.DefaultTileClient innerTileService>
<androidx.wear.tiles.testing.TestTileClient: boolean hasBound>
    public void <init>(androidx.wear.tiles.TileService, kotlinx.coroutines.CoroutineScope, kotlinx.coroutines.CoroutineDispatcher)
    {
        androidx.wear.tiles.testing.TestTileClient r0;
        androidx.wear.tiles.TileService r1;
        kotlinx.coroutines.CoroutineScope r2;
        kotlinx.coroutines.CoroutineDispatcher r3;
        android.content.Intent r4, $r5;
        android.content.ComponentName $r6, $r9, $r15;
        android.content.Context $r7, $r14;
        java.lang.Class $r8;
        android.app.Service $r11;
        org.robolectric.android.controller.ServiceController $r12;
        androidx.wear.tiles.connection.DefaultTileClient $r13;

        r0 := @this: androidx.wear.tiles.testing.TestTileClient;

        r1 := @parameter0: androidx.wear.tiles.TileService;

        r2 := @parameter1: kotlinx.coroutines.CoroutineScope;

        r3 := @parameter2: kotlinx.coroutines.CoroutineDispatcher;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "service");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "coroutineScope");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "coroutineDispatcher");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = new android.content.Intent;

        specialinvoke $r5.<android.content.Intent: void <init>(java.lang.String)>("androidx.wear.tiles.action.BIND_TILE_PROVIDER");

        r4 = $r5;

        $r6 = new android.content.ComponentName;

        $r7 = staticinvoke <androidx.test.core.app.ApplicationProvider: android.content.Context getApplicationContext()>();

        $r8 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        specialinvoke $r6.<android.content.ComponentName: void <init>(android.content.Context,java.lang.Class)>($r7, $r8);

        r0.<androidx.wear.tiles.testing.TestTileClient: android.content.ComponentName componentName> = $r6;

        $r9 = r0.<androidx.wear.tiles.testing.TestTileClient: android.content.ComponentName componentName>;

        virtualinvoke r4.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>($r9);

        $r11 = (android.app.Service) r1;

        $r12 = staticinvoke <org.robolectric.android.controller.ServiceController: org.robolectric.android.controller.ServiceController of(android.app.Service,android.content.Intent)>($r11, r4);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r12, "of(service, bindIntent)");

        r0.<androidx.wear.tiles.testing.TestTileClient: org.robolectric.android.controller.ServiceController controller> = $r12;

        $r13 = new androidx.wear.tiles.connection.DefaultTileClient;

        $r14 = staticinvoke <androidx.test.core.app.ApplicationProvider: android.content.Context getApplicationContext()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r14, "getApplicationContext()");

        $r15 = r0.<androidx.wear.tiles.testing.TestTileClient: android.content.ComponentName componentName>;

        specialinvoke $r13.<androidx.wear.tiles.connection.DefaultTileClient: void <init>(android.content.Context,android.content.ComponentName,kotlinx.coroutines.CoroutineScope,kotlinx.coroutines.CoroutineDispatcher)>($r14, $r15, r2, r3);

        r0.<androidx.wear.tiles.testing.TestTileClient: androidx.wear.tiles.connection.DefaultTileClient innerTileService> = $r13;

        return;
    }

    public void <init>(androidx.wear.tiles.TileService, java.util.concurrent.Executor)
    {
        androidx.wear.tiles.testing.TestTileClient r0;
        androidx.wear.tiles.TileService r1;
        java.util.concurrent.Executor r2;
        android.content.Intent r3, $r4;
        android.content.ComponentName $r5, $r8, $r14;
        android.content.Context $r6, $r13;
        java.lang.Class $r7;
        android.app.Service $r10;
        org.robolectric.android.controller.ServiceController $r11;
        androidx.wear.tiles.connection.DefaultTileClient $r12;

        r0 := @this: androidx.wear.tiles.testing.TestTileClient;

        r1 := @parameter0: androidx.wear.tiles.TileService;

        r2 := @parameter1: java.util.concurrent.Executor;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "service");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "executor");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new android.content.Intent;

        specialinvoke $r4.<android.content.Intent: void <init>(java.lang.String)>("androidx.wear.tiles.action.BIND_TILE_PROVIDER");

        r3 = $r4;

        $r5 = new android.content.ComponentName;

        $r6 = staticinvoke <androidx.test.core.app.ApplicationProvider: android.content.Context getApplicationContext()>();

        $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        specialinvoke $r5.<android.content.ComponentName: void <init>(android.content.Context,java.lang.Class)>($r6, $r7);

        r0.<androidx.wear.tiles.testing.TestTileClient: android.content.ComponentName componentName> = $r5;

        $r8 = r0.<androidx.wear.tiles.testing.TestTileClient: android.content.ComponentName componentName>;

        virtualinvoke r3.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>($r8);

        $r10 = (android.app.Service) r1;

        $r11 = staticinvoke <org.robolectric.android.controller.ServiceController: org.robolectric.android.controller.ServiceController of(android.app.Service,android.content.Intent)>($r10, r3);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r11, "of(service, bindIntent)");

        r0.<androidx.wear.tiles.testing.TestTileClient: org.robolectric.android.controller.ServiceController controller> = $r11;

        $r12 = new androidx.wear.tiles.connection.DefaultTileClient;

        $r13 = staticinvoke <androidx.test.core.app.ApplicationProvider: android.content.Context getApplicationContext()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r13, "getApplicationContext()");

        $r14 = r0.<androidx.wear.tiles.testing.TestTileClient: android.content.ComponentName componentName>;

        specialinvoke $r12.<androidx.wear.tiles.connection.DefaultTileClient: void <init>(android.content.Context,android.content.ComponentName,java.util.concurrent.Executor)>($r13, $r14, r2);

        r0.<androidx.wear.tiles.testing.TestTileClient: androidx.wear.tiles.connection.DefaultTileClient innerTileService> = $r12;

        return;
    }

    public com.google.common.util.concurrent.ListenableFuture requestApiVersion()
    {
        androidx.wear.tiles.testing.TestTileClient r0;
        androidx.wear.tiles.connection.DefaultTileClient $r1;
        com.google.common.util.concurrent.ListenableFuture $r2;

        r0 := @this: androidx.wear.tiles.testing.TestTileClient;

        specialinvoke r0.<androidx.wear.tiles.testing.TestTileClient: void maybeBind()>();

        $r1 = r0.<androidx.wear.tiles.testing.TestTileClient: androidx.wear.tiles.connection.DefaultTileClient innerTileService>;

        $r2 = virtualinvoke $r1.<androidx.wear.tiles.connection.DefaultTileClient: com.google.common.util.concurrent.ListenableFuture requestApiVersion()>();

        return $r2;
    }

    public com.google.common.util.concurrent.ListenableFuture requestTile(androidx.wear.tiles.RequestBuilders$TileRequest)
    {
        androidx.wear.tiles.testing.TestTileClient r0;
        androidx.wear.tiles.RequestBuilders$TileRequest r1;
        androidx.wear.tiles.connection.DefaultTileClient $r2;
        com.google.common.util.concurrent.ListenableFuture $r3;

        r0 := @this: androidx.wear.tiles.testing.TestTileClient;

        r1 := @parameter0: androidx.wear.tiles.RequestBuilders$TileRequest;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "requestParams");

        specialinvoke r0.<androidx.wear.tiles.testing.TestTileClient: void maybeBind()>();

        $r2 = r0.<androidx.wear.tiles.testing.TestTileClient: androidx.wear.tiles.connection.DefaultTileClient innerTileService>;

        $r3 = virtualinvoke $r2.<androidx.wear.tiles.connection.DefaultTileClient: com.google.common.util.concurrent.ListenableFuture requestTile(androidx.wear.tiles.RequestBuilders$TileRequest)>(r1);

        return $r3;
    }

    public com.google.common.util.concurrent.ListenableFuture requestResources(androidx.wear.tiles.RequestBuilders$ResourcesRequest)
    {
        androidx.wear.tiles.testing.TestTileClient r0;
        androidx.wear.tiles.RequestBuilders$ResourcesRequest r1;
        androidx.wear.tiles.connection.DefaultTileClient $r2;
        com.google.common.util.concurrent.ListenableFuture $r3;

        r0 := @this: androidx.wear.tiles.testing.TestTileClient;

        r1 := @parameter0: androidx.wear.tiles.RequestBuilders$ResourcesRequest;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "requestParams");

        specialinvoke r0.<androidx.wear.tiles.testing.TestTileClient: void maybeBind()>();

        $r2 = r0.<androidx.wear.tiles.testing.TestTileClient: androidx.wear.tiles.connection.DefaultTileClient innerTileService>;

        $r3 = virtualinvoke $r2.<androidx.wear.tiles.connection.DefaultTileClient: com.google.common.util.concurrent.ListenableFuture requestResources(androidx.wear.tiles.RequestBuilders$ResourcesRequest)>(r1);

        return $r3;
    }

    public com.google.common.util.concurrent.ListenableFuture sendOnTileAddedEvent()
    {
        androidx.wear.tiles.testing.TestTileClient r0;
        androidx.wear.tiles.connection.DefaultTileClient $r1;
        com.google.common.util.concurrent.ListenableFuture $r2;

        r0 := @this: androidx.wear.tiles.testing.TestTileClient;

        specialinvoke r0.<androidx.wear.tiles.testing.TestTileClient: void maybeBind()>();

        $r1 = r0.<androidx.wear.tiles.testing.TestTileClient: androidx.wear.tiles.connection.DefaultTileClient innerTileService>;

        $r2 = virtualinvoke $r1.<androidx.wear.tiles.connection.DefaultTileClient: com.google.common.util.concurrent.ListenableFuture sendOnTileAddedEvent()>();

        return $r2;
    }

    public com.google.common.util.concurrent.ListenableFuture sendOnTileRemovedEvent()
    {
        androidx.wear.tiles.testing.TestTileClient r0;
        androidx.wear.tiles.connection.DefaultTileClient $r1;
        com.google.common.util.concurrent.ListenableFuture $r2;

        r0 := @this: androidx.wear.tiles.testing.TestTileClient;

        specialinvoke r0.<androidx.wear.tiles.testing.TestTileClient: void maybeBind()>();

        $r1 = r0.<androidx.wear.tiles.testing.TestTileClient: androidx.wear.tiles.connection.DefaultTileClient innerTileService>;

        $r2 = virtualinvoke $r1.<androidx.wear.tiles.connection.DefaultTileClient: com.google.common.util.concurrent.ListenableFuture sendOnTileRemovedEvent()>();

        return $r2;
    }

    public com.google.common.util.concurrent.ListenableFuture sendOnTileEnterEvent()
    {
        androidx.wear.tiles.testing.TestTileClient r0;
        androidx.wear.tiles.connection.DefaultTileClient $r1;
        com.google.common.util.concurrent.ListenableFuture $r2;

        r0 := @this: androidx.wear.tiles.testing.TestTileClient;

        specialinvoke r0.<androidx.wear.tiles.testing.TestTileClient: void maybeBind()>();

        $r1 = r0.<androidx.wear.tiles.testing.TestTileClient: androidx.wear.tiles.connection.DefaultTileClient innerTileService>;

        $r2 = virtualinvoke $r1.<androidx.wear.tiles.connection.DefaultTileClient: com.google.common.util.concurrent.ListenableFuture sendOnTileEnterEvent()>();

        return $r2;
    }

    public com.google.common.util.concurrent.ListenableFuture sendOnTileLeaveEvent()
    {
        androidx.wear.tiles.testing.TestTileClient r0;
        androidx.wear.tiles.connection.DefaultTileClient $r1;
        com.google.common.util.concurrent.ListenableFuture $r2;

        r0 := @this: androidx.wear.tiles.testing.TestTileClient;

        specialinvoke r0.<androidx.wear.tiles.testing.TestTileClient: void maybeBind()>();

        $r1 = r0.<androidx.wear.tiles.testing.TestTileClient: androidx.wear.tiles.connection.DefaultTileClient innerTileService>;

        $r2 = virtualinvoke $r1.<androidx.wear.tiles.connection.DefaultTileClient: com.google.common.util.concurrent.ListenableFuture sendOnTileLeaveEvent()>();

        return $r2;
    }

    private final void maybeBind()
    {
        androidx.wear.tiles.testing.TestTileClient r0;
        android.os.IBinder r1;
        boolean $z0;
        org.robolectric.android.controller.ServiceController $r2, $r3, $r5, $r11;
        java.lang.Object $r4;
        androidx.wear.tiles.TileService $r6;
        android.content.Intent $r7, $r12;
        android.content.Context $r8;
        android.app.Application $r9;
        org.robolectric.shadows.ShadowApplication $r10;
        android.content.ComponentName $r13;

        r0 := @this: androidx.wear.tiles.testing.TestTileClient;

        $z0 = r0.<androidx.wear.tiles.testing.TestTileClient: boolean hasBound>;

        if $z0 != 0 goto label1;

        $r2 = r0.<androidx.wear.tiles.testing.TestTileClient: org.robolectric.android.controller.ServiceController controller>;

        $r3 = virtualinvoke $r2.<org.robolectric.android.controller.ServiceController: org.robolectric.android.controller.ServiceController create()>();

        $r4 = virtualinvoke $r3.<org.robolectric.android.controller.ServiceController: java.lang.Object get()>();

        $r6 = (androidx.wear.tiles.TileService) $r4;

        $r5 = r0.<androidx.wear.tiles.testing.TestTileClient: org.robolectric.android.controller.ServiceController controller>;

        $r7 = virtualinvoke $r5.<org.robolectric.android.controller.ServiceController: android.content.Intent getIntent()>();

        r1 = virtualinvoke $r6.<androidx.wear.tiles.TileService: android.os.IBinder onBind(android.content.Intent)>($r7);

        $r8 = staticinvoke <androidx.test.core.app.ApplicationProvider: android.content.Context getApplicationContext()>();

        $r9 = (android.app.Application) $r8;

        $r10 = staticinvoke <org.robolectric.Shadows: org.robolectric.shadows.ShadowApplication shadowOf(android.app.Application)>($r9);

        $r11 = r0.<androidx.wear.tiles.testing.TestTileClient: org.robolectric.android.controller.ServiceController controller>;

        $r12 = virtualinvoke $r11.<org.robolectric.android.controller.ServiceController: android.content.Intent getIntent()>();

        $r13 = r0.<androidx.wear.tiles.testing.TestTileClient: android.content.ComponentName componentName>;

        virtualinvoke $r10.<org.robolectric.shadows.ShadowApplication: void setComponentNameAndServiceForBindServiceForIntent(android.content.Intent,android.content.ComponentName,android.os.IBinder)>($r12, $r13, r1);

     label1:
        return;
    }

