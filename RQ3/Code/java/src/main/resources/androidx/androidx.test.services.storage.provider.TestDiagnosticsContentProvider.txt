androidx.test.services.storage.provider.TestDiagnosticsContentProvider
<androidx.test.services.storage.provider.TestDiagnosticsContentProvider: androidx.test.services.storage.provider.TestDiagnosticsContentProvider$Companion Companion>
<androidx.test.services.storage.provider.TestDiagnosticsContentProvider: com.google.testing.platform.android.core.orchestration.strategy.GrpcDiagnosticsOrchestrationStrategy grpcDiagnosticsOrchestrationStrategy>
<androidx.test.services.storage.provider.TestDiagnosticsContentProvider: kotlinx.coroutines.Job serverJob>
<androidx.test.services.storage.provider.TestDiagnosticsContentProvider: kotlin.Lazy serverPort>
    static void <clinit>()
    {
        androidx.test.services.storage.provider.TestDiagnosticsContentProvider$Companion $r0;

        $r0 = new androidx.test.services.storage.provider.TestDiagnosticsContentProvider$Companion;

        specialinvoke $r0.<androidx.test.services.storage.provider.TestDiagnosticsContentProvider$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.test.services.storage.provider.TestDiagnosticsContentProvider: androidx.test.services.storage.provider.TestDiagnosticsContentProvider$Companion Companion> = $r0;

        return;
    }

    public void <init>()
    {
        androidx.test.services.storage.provider.TestDiagnosticsContentProvider $r0;
        kotlin.Lazy $r1;
        androidx.test.services.storage.provider.TestDiagnosticsContentProvider$serverPort$1 $r2;

        $r0 := @this: androidx.test.services.storage.provider.TestDiagnosticsContentProvider;

        specialinvoke $r0.<android.content.ContentProvider: void <init>()>();

        $r2 = <androidx.test.services.storage.provider.TestDiagnosticsContentProvider$serverPort$1: androidx.test.services.storage.provider.TestDiagnosticsContentProvider$serverPort$1 INSTANCE>;

        $r1 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)>($r2);

        $r0.<androidx.test.services.storage.provider.TestDiagnosticsContentProvider: kotlin.Lazy serverPort> = $r1;

        return;
    }

    public static final com.google.testing.platform.android.core.orchestration.strategy.GrpcDiagnosticsOrchestrationStrategy access$getGrpcDiagnosticsOrchestrationStrategy$p(androidx.test.services.storage.provider.TestDiagnosticsContentProvider)
    {
        androidx.test.services.storage.provider.TestDiagnosticsContentProvider $r0;
        com.google.testing.platform.android.core.orchestration.strategy.GrpcDiagnosticsOrchestrationStrategy r1;

        $r0 := @parameter0: androidx.test.services.storage.provider.TestDiagnosticsContentProvider;

        r1 = $r0.<androidx.test.services.storage.provider.TestDiagnosticsContentProvider: com.google.testing.platform.android.core.orchestration.strategy.GrpcDiagnosticsOrchestrationStrategy grpcDiagnosticsOrchestrationStrategy>;

        return r1;
    }

    public static final kotlinx.coroutines.Job access$getServerJob$p(androidx.test.services.storage.provider.TestDiagnosticsContentProvider)
    {
        androidx.test.services.storage.provider.TestDiagnosticsContentProvider $r0;
        kotlinx.coroutines.Job r1;

        $r0 := @parameter0: androidx.test.services.storage.provider.TestDiagnosticsContentProvider;

        r1 = $r0.<androidx.test.services.storage.provider.TestDiagnosticsContentProvider: kotlinx.coroutines.Job serverJob>;

        return r1;
    }

    private final void connectToAtpServer()
    {
        androidx.test.services.storage.provider.TestDiagnosticsContentProvider $r0;
        kotlin.Lazy $r1;
        java.lang.Object $r2;
        java.lang.String $r3;
        int $i0;
        com.google.testing.platform.android.core.orchestration.strategy.GrpcDiagnosticsOrchestrationStrategy $r4;
        kotlinx.coroutines.CoroutineDispatcher $r5;
        com.google.testing.platform.lib.coroutines.scope.JobScope $r6;
        androidx.test.services.storage.provider.TestDiagnosticsContentProvider$connectToAtpServer$1 $r7;
        kotlinx.coroutines.Job $r8;
        java.lang.StringBuilder $r9;

        $r0 := @this: androidx.test.services.storage.provider.TestDiagnosticsContentProvider;

        $r1 = $r0.<androidx.test.services.storage.provider.TestDiagnosticsContentProvider: kotlin.Lazy serverPort>;

        $r2 = interfaceinvoke $r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r3 = (java.lang.String) $r2;

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        if $i0 != -1 goto label1;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("DiagnosticsCP", "Invalid server port, will not connect to the diagnostics server!");

        return;

     label1:
        $r4 = new com.google.testing.platform.android.core.orchestration.strategy.GrpcDiagnosticsOrchestrationStrategy;

        $r5 = staticinvoke <kotlinx.coroutines.Dispatchers: kotlinx.coroutines.CoroutineDispatcher getDefault()>();

        $r6 = staticinvoke <com.google.testing.platform.lib.coroutines.scope.JobScopeKt: com.google.testing.platform.lib.coroutines.scope.JobScope JobScope(kotlin.coroutines.CoroutineContext)>($r5);

        $r7 = new androidx.test.services.storage.provider.TestDiagnosticsContentProvider$connectToAtpServer$1;

        specialinvoke $r7.<androidx.test.services.storage.provider.TestDiagnosticsContentProvider$connectToAtpServer$1: void <init>(androidx.test.services.storage.provider.TestDiagnosticsContentProvider)>($r0);

        specialinvoke $r4.<com.google.testing.platform.android.core.orchestration.strategy.GrpcDiagnosticsOrchestrationStrategy: void <init>(com.google.testing.platform.lib.coroutines.scope.JobScope,kotlin.jvm.functions.Function1)>($r6, $r7);

        $r0.<androidx.test.services.storage.provider.TestDiagnosticsContentProvider: com.google.testing.platform.android.core.orchestration.strategy.GrpcDiagnosticsOrchestrationStrategy grpcDiagnosticsOrchestrationStrategy> = $r4;

        $r1 = $r0.<androidx.test.services.storage.provider.TestDiagnosticsContentProvider: kotlin.Lazy serverPort>;

        $r2 = interfaceinvoke $r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r3 = (java.lang.String) $r2;

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        $r8 = virtualinvoke $r4.<com.google.testing.platform.android.core.orchestration.strategy.GrpcDiagnosticsOrchestrationStrategy: kotlinx.coroutines.Job start(int)>($i0);

        $r0.<androidx.test.services.storage.provider.TestDiagnosticsContentProvider: kotlinx.coroutines.Job serverJob> = $r8;

        $r1 = $r0.<androidx.test.services.storage.provider.TestDiagnosticsContentProvider: kotlin.Lazy serverPort>;

        $r2 = interfaceinvoke $r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r3 = (java.lang.String) $r2;

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Connected to server on port : ");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("DiagnosticsCP", $r3);

        return;
    }

    private final void sendDiagnosticsEvents(java.util.List)
    {
        androidx.test.services.storage.provider.TestDiagnosticsContentProvider $r0;
        java.util.List $r1;
        kotlin.Lazy $r2;
        java.lang.Object $r3;
        java.lang.String $r4;
        int $i0;
        com.google.testing.platform.proto.api.android.DiagnosticEventProto$DiagnosticEvent$Builder $r5;
        java.util.ArrayList $r6, r14;
        java.util.Iterator $r7;
        boolean $z0;
        io.opencensus.trace.export.SpanData $r8;
        io.opencensus.proto.trace.v1.Span $r9;
        com.google.protobuf.GeneratedMessageLite $r10;
        com.google.testing.platform.proto.api.android.DiagnosticEventProto$DiagnosticEvent $r11;
        java.lang.Throwable $r12;
        java.lang.StringBuilder $r13, r16;
        androidx.test.services.storage.provider.TestDiagnosticsContentProvider$sendDiagnosticsEvents$1 r15;
        java.lang.Iterable r17;
        java.util.Collection r18;

        $r0 := @this: androidx.test.services.storage.provider.TestDiagnosticsContentProvider;

        $r1 := @parameter0: java.util.List;

        $r2 = $r0.<androidx.test.services.storage.provider.TestDiagnosticsContentProvider: kotlin.Lazy serverPort>;

        $r3 = interfaceinvoke $r2.<kotlin.Lazy: java.lang.Object getValue()>();

        $r4 = (java.lang.String) $r3;

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

        if $i0 != -1 goto label1;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("DiagnosticsCP", "Invalid server port, dropping diagnostic event!");

        return;

     label1:
        $r5 = staticinvoke <com.google.testing.platform.proto.api.android.DiagnosticEventProto$DiagnosticEvent: com.google.testing.platform.proto.api.android.DiagnosticEventProto$DiagnosticEvent$Builder newBuilder()>();

        r14 = new java.util.ArrayList;

        $r6 = r14;

        r17 = (java.lang.Iterable) $r1;

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>(r17, 10);

        specialinvoke r14.<java.util.ArrayList: void <init>(int)>($i0);

        r17 = (java.lang.Iterable) $r1;

        $r7 = interfaceinvoke r17.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (io.opencensus.trace.export.SpanData) $r3;

        $r9 = staticinvoke <com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils: io.opencensus.proto.trace.v1.Span toSpanProto(io.opencensus.trace.export.SpanData)>($r8);

        r18 = (java.util.Collection) $r6;

        interfaceinvoke r18.<java.util.Collection: boolean add(java.lang.Object)>($r9);

        goto label2;

     label3:
        r17 = (java.lang.Iterable) $r6;

        $r5 = virtualinvoke $r5.<com.google.testing.platform.proto.api.android.DiagnosticEventProto$DiagnosticEvent$Builder: com.google.testing.platform.proto.api.android.DiagnosticEventProto$DiagnosticEvent$Builder addAllSpans(java.lang.Iterable)>(r17);

        $r10 = virtualinvoke $r5.<com.google.testing.platform.proto.api.android.DiagnosticEventProto$DiagnosticEvent$Builder: com.google.protobuf.GeneratedMessageLite build()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r10, "newBuilder().addAllSpans\u2026Proto(it) }\n    ).build()");

        $r11 = (com.google.testing.platform.proto.api.android.DiagnosticEventProto$DiagnosticEvent) $r10;

        r15 = new androidx.test.services.storage.provider.TestDiagnosticsContentProvider$sendDiagnosticsEvents$1;

     label4:
        specialinvoke r15.<androidx.test.services.storage.provider.TestDiagnosticsContentProvider$sendDiagnosticsEvents$1: void <init>(androidx.test.services.storage.provider.TestDiagnosticsContentProvider,com.google.testing.platform.proto.api.android.DiagnosticEventProto$DiagnosticEvent,kotlin.coroutines.Continuation)>($r0, $r11, null);

     label5:
        staticinvoke <kotlinx.coroutines.BuildersKt: java.lang.Object runBlocking$default(kotlin.coroutines.CoroutineContext,kotlin.jvm.functions.Function2,int,java.lang.Object)>(null, r15, 1, null);

        return;

     label6:
        $r12 := @caughtexception;

        r16 = new java.lang.StringBuilder;

        specialinvoke r16.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Sending events to the diagnostics service resulted in an error: ");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r4 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DiagnosticsCP", $r4);

        return;

        catch java.lang.Exception from label4 to label5 with label6;
    }

    public int delete(android.net.Uri, java.lang.String, java.lang.String[])
    {
        androidx.test.services.storage.provider.TestDiagnosticsContentProvider $r0;
        java.lang.String[] $r1;
        android.net.Uri $r2;
        java.lang.String $r3;

        $r0 := @this: androidx.test.services.storage.provider.TestDiagnosticsContentProvider;

        $r2 := @parameter0: android.net.Uri;

        $r3 := @parameter1: java.lang.String;

        $r1 := @parameter2: java.lang.String[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "uri");

        return 0;
    }

    public java.lang.String getType(android.net.Uri)
    {
        androidx.test.services.storage.provider.TestDiagnosticsContentProvider $r0;
        android.net.Uri $r1;

        $r0 := @this: androidx.test.services.storage.provider.TestDiagnosticsContentProvider;

        $r1 := @parameter0: android.net.Uri;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "uri");

        return null;
    }

    public android.net.Uri insert(android.net.Uri, android.content.ContentValues)
    {
        androidx.test.services.storage.provider.TestDiagnosticsContentProvider $r0;
        android.net.Uri $r1;
        android.content.ContentValues $r2;
        boolean $z0;
        java.io.ByteArrayInputStream $r3, r19;
        byte[] $r4;
        java.io.ObjectInputStream $r5, r20;
        com.google.testing.platform.core.telemetry.android.opencensus.exporter.SpanDataWrapper$Companion $r6;
        java.util.List $r7;
        kotlin.Lazy $r8;
        java.lang.Throwable $r9, $r13, $r14, $r15, $r16;
        java.lang.StringBuilder $r10, r21;
        java.lang.String $r11;
        kotlin.Unit $r12;
        com.google.testing.platform.android.core.orchestration.strategy.GrpcDiagnosticsOrchestrationStrategy $r17;
        kotlinx.coroutines.channels.Channel $r18;
        androidx.test.services.storage.provider.TestDiagnosticsContentProvider$insert$3 r22;
        java.io.Closeable r23;

        $r0 := @this: androidx.test.services.storage.provider.TestDiagnosticsContentProvider;

        $r1 := @parameter0: android.net.Uri;

        $r2 := @parameter1: android.content.ContentValues;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "uri");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r2);

        $z0 = virtualinvoke $r2.<android.content.ContentValues: boolean containsKey(java.lang.String)>("span");

        if $z0 == 0 goto label21;

        r19 = new java.io.ByteArrayInputStream;

        $r3 = r19;

        $r4 = virtualinvoke $r2.<android.content.ContentValues: byte[] getAsByteArray(java.lang.String)>("span");

        specialinvoke r19.<java.io.ByteArrayInputStream: void <init>(byte[])>($r4);

        r20 = new java.io.ObjectInputStream;

        $r5 = r20;

     label01:
        specialinvoke r20.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>($r3);

     label02:
        $r6 = <com.google.testing.platform.core.telemetry.android.opencensus.exporter.SpanDataWrapper: com.google.testing.platform.core.telemetry.android.opencensus.exporter.SpanDataWrapper$Companion Companion>;

     label03:
        $r7 = virtualinvoke $r6.<com.google.testing.platform.core.telemetry.android.opencensus.exporter.SpanDataWrapper$Companion: java.util.List readObject(java.io.ObjectInputStream)>($r5);

     label04:
        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("DiagnosticsCP", "Received diagnostics events");

        $r8 = $r0.<androidx.test.services.storage.provider.TestDiagnosticsContentProvider: kotlin.Lazy serverPort>;

     label05:
        $z0 = interfaceinvoke $r8.<kotlin.Lazy: boolean isInitialized()>();

     label06:
        if $z0 != 0 goto label12;

     label07:
        specialinvoke $r0.<androidx.test.services.storage.provider.TestDiagnosticsContentProvider: void connectToAtpServer()>();

     label08:
        goto label12;

     label09:
        $r9 := @caughtexception;

        r21 = new java.lang.StringBuilder;

        $r10 = r21;

     label10:
        specialinvoke r21.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Connecting to the diagnostics service resulted in an error: ");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

     label11:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DiagnosticsCP", $r11);

        r23 = (java.io.Closeable) $r5;

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r23, null);

        r23 = (java.io.Closeable) $r3;

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r23, null);

        return null;

     label12:
        specialinvoke $r0.<androidx.test.services.storage.provider.TestDiagnosticsContentProvider: void sendDiagnosticsEvents(java.util.List)>($r7);

     label13:
        $r12 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        r23 = (java.io.Closeable) $r5;

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r23, null);

        $r12 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        r23 = (java.io.Closeable) $r3;

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r23, null);

        goto label21;

     label14:
        $r13 := @caughtexception;

     label15:
        throw $r13;

     label16:
        $r14 := @caughtexception;

        r23 = (java.io.Closeable) $r5;

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r23, $r13);

     label17:
        throw $r14;

     label18:
        $r15 := @caughtexception;

     label19:
        throw $r15;

     label20:
        $r16 := @caughtexception;

        r23 = (java.io.Closeable) $r3;

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r23, $r15);

        throw $r16;

     label21:
        $z0 = virtualinvoke $r2.<android.content.ContentValues: boolean containsKey(java.lang.String)>("FINISH");

        if $z0 == 0 goto label24;

        $r17 = $r0.<androidx.test.services.storage.provider.TestDiagnosticsContentProvider: com.google.testing.platform.android.core.orchestration.strategy.GrpcDiagnosticsOrchestrationStrategy grpcDiagnosticsOrchestrationStrategy>;

        if $r17 == null goto label23;

        if $r17 != null goto label22;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void throwUninitializedPropertyAccessException(java.lang.String)>("grpcDiagnosticsOrchestrationStrategy");

        $r17 = null;

     label22:
        $r18 = virtualinvoke $r17.<com.google.testing.platform.android.core.orchestration.strategy.GrpcDiagnosticsOrchestrationStrategy: kotlinx.coroutines.channels.Channel getDiagnosticsEvents()>();

        staticinvoke <kotlinx.coroutines.channels.SendChannel$DefaultImpls: boolean close$default(kotlinx.coroutines.channels.SendChannel,java.lang.Throwable,int,java.lang.Object)>($r18, null, 1, null);

        r22 = new androidx.test.services.storage.provider.TestDiagnosticsContentProvider$insert$3;

        specialinvoke r22.<androidx.test.services.storage.provider.TestDiagnosticsContentProvider$insert$3: void <init>(androidx.test.services.storage.provider.TestDiagnosticsContentProvider,kotlin.coroutines.Continuation)>($r0, null);

        staticinvoke <kotlinx.coroutines.BuildersKt: java.lang.Object runBlocking$default(kotlin.coroutines.CoroutineContext,kotlin.jvm.functions.Function2,int,java.lang.Object)>(null, r22, 1, null);

     label23:
        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("DiagnosticsCP", "GRPC Channel closed by TestDiagnosticsContentProvider");

     label24:
        return null;

        catch java.lang.Throwable from label01 to label02 with label18;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Exception from label07 to label08 with label09;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label16;
        catch java.lang.Throwable from label17 to label18 with label18;
        catch java.lang.Throwable from label19 to label20 with label20;
    }

    public boolean onCreate()
    {
        androidx.test.services.storage.provider.TestDiagnosticsContentProvider $r0;

        $r0 := @this: androidx.test.services.storage.provider.TestDiagnosticsContentProvider;

        return 0;
    }

    public android.database.Cursor query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String)
    {
        androidx.test.services.storage.provider.TestDiagnosticsContentProvider $r0;
        java.lang.String $r1, $r3;
        java.lang.String[] $r2, $r5;
        android.net.Uri $r4;

        $r0 := @this: androidx.test.services.storage.provider.TestDiagnosticsContentProvider;

        $r4 := @parameter0: android.net.Uri;

        $r5 := @parameter1: java.lang.String[];

        $r1 := @parameter2: java.lang.String;

        $r2 := @parameter3: java.lang.String[];

        $r3 := @parameter4: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r4, "uri");

        return null;
    }

    public int update(android.net.Uri, android.content.ContentValues, java.lang.String, java.lang.String[])
    {
        androidx.test.services.storage.provider.TestDiagnosticsContentProvider $r0;
        java.lang.String $r1;
        java.lang.String[] $r2;
        android.net.Uri $r3;
        android.content.ContentValues $r4;

        $r0 := @this: androidx.test.services.storage.provider.TestDiagnosticsContentProvider;

        $r3 := @parameter0: android.net.Uri;

        $r4 := @parameter1: android.content.ContentValues;

        $r1 := @parameter2: java.lang.String;

        $r2 := @parameter3: java.lang.String[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "uri");

        return 0;
    }

androidx.test.services.storage.provider.TestDiagnosticsContentProvider$Companion
    private void <init>()
    {
        androidx.test.services.storage.provider.TestDiagnosticsContentProvider$Companion $r0;

        $r0 := @this: androidx.test.services.storage.provider.TestDiagnosticsContentProvider$Companion;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.test.services.storage.provider.TestDiagnosticsContentProvider$Companion $r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        $r0 := @this: androidx.test.services.storage.provider.TestDiagnosticsContentProvider$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke $r0.<androidx.test.services.storage.provider.TestDiagnosticsContentProvider$Companion: void <init>()>();

        return;
    }

    public static final int access$getServerPortFromTestArgs(androidx.test.services.storage.provider.TestDiagnosticsContentProvider$Companion)
    {
        int $i0;
        androidx.test.services.storage.provider.TestDiagnosticsContentProvider$Companion $r0;

        $r0 := @parameter0: androidx.test.services.storage.provider.TestDiagnosticsContentProvider$Companion;

        $i0 = specialinvoke $r0.<androidx.test.services.storage.provider.TestDiagnosticsContentProvider$Companion: int getServerPortFromTestArgs()>();

        return $i0;
    }

    private final int getServerPortFromTestArgs()
    {
        androidx.test.services.storage.provider.TestDiagnosticsContentProvider$Companion $r0;
        java.io.File $r1, $r2, r13;
        boolean $z0;
        androidx.test.services.storage.TestStorageServiceProto$TestArguments $r3;
        java.util.List $r4;
        java.util.Iterator $r5;
        java.lang.String $r6, $r10;
        java.lang.Object $r7, $r8;
        androidx.test.services.storage.TestStorageServiceProto$TestArgument $r9;
        int $i0;
        java.lang.Throwable $r11;
        java.lang.StringBuilder $r12, r15;
        java.io.FileInputStream r14;
        java.lang.RuntimeException r16;
        java.lang.Iterable r17;

        $r0 := @this: androidx.test.services.storage.provider.TestDiagnosticsContentProvider$Companion;

        r13 = new java.io.File;

        $r1 = r13;

        $r2 = staticinvoke <android.os.Environment: java.io.File getExternalStorageDirectory()>();

        specialinvoke r13.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, "googletest/internal_use/test_args.dat");

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label01;

        return -1;

     label01:
        r14 = new java.io.FileInputStream;

     label02:
        specialinvoke r14.<java.io.FileInputStream: void <init>(java.io.File)>($r1);

     label03:
        $r3 = staticinvoke <androidx.test.services.storage.TestStorageServiceProto$TestArguments: androidx.test.services.storage.TestStorageServiceProto$TestArguments parseFrom(java.io.InputStream)>(r14);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "parseFrom(FileInputStream(testArgsFile))");

     label04:
        $r4 = virtualinvoke $r3.<androidx.test.services.storage.TestStorageServiceProto$TestArguments: java.util.List getArgList()>();

     label05:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "testArgs.argList");

        r17 = (java.lang.Iterable) $r4;

     label06:
        $r5 = interfaceinvoke r17.<java.lang.Iterable: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

     label08:
        $r6 = null;

        if $z0 == 0 goto label13;

     label09:
        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

     label10:
        $r8 = $r7;

        $r9 = (androidx.test.services.storage.TestStorageServiceProto$TestArgument) $r7;

     label11:
        $r10 = virtualinvoke $r9.<androidx.test.services.storage.TestStorageServiceProto$TestArgument: java.lang.String getName()>();

     label12:
        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r10, "diagnosticsServerPort");

        if $z0 == 0 goto label07;

        goto label14;

     label13:
        $r8 = null;

     label14:
        $r9 = (androidx.test.services.storage.TestStorageServiceProto$TestArgument) $r8;

        if $r9 == null goto label17;

     label15:
        $r6 = virtualinvoke $r9.<androidx.test.services.storage.TestStorageServiceProto$TestArgument: java.lang.String getValue()>();

     label16:
        goto label17;

     label17:
        if $r6 == null goto label18;

        staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r6, "0");

     label18:
        if $r6 != null goto label19;

        $r6 = "64676";

     label19:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6);

        return $i0;

     label20:
        $r11 := @caughtexception;

        r16 = new java.lang.RuntimeException;

        $r6 = virtualinvoke $r1.<java.io.File: java.lang.String getName()>();

        r15 = new java.lang.StringBuilder;

        specialinvoke r15.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not able to read from file: ");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r16.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r6, $r11);

        goto label21;

     label21:
        $r11 = (java.lang.Throwable) r16;

        throw $r11;

        catch java.io.IOException from label02 to label03 with label20;
        catch java.io.IOException from label04 to label05 with label20;
        catch java.io.IOException from label06 to label08 with label20;
        catch java.io.IOException from label09 to label10 with label20;
        catch java.io.IOException from label11 to label12 with label20;
        catch java.io.IOException from label15 to label16 with label20;
    }

androidx.test.services.storage.provider.TestDiagnosticsContentProvider$connectToAtpServer$1
<androidx.test.services.storage.provider.TestDiagnosticsContentProvider$connectToAtpServer$1: androidx.test.services.storage.provider.TestDiagnosticsContentProvider this$0>
    void <init>(androidx.test.services.storage.provider.TestDiagnosticsContentProvider)
    {
        androidx.test.services.storage.provider.TestDiagnosticsContentProvider$connectToAtpServer$1 $r0;
        androidx.test.services.storage.provider.TestDiagnosticsContentProvider $r1;

        $r0 := @this: androidx.test.services.storage.provider.TestDiagnosticsContentProvider$connectToAtpServer$1;

        $r1 := @parameter0: androidx.test.services.storage.provider.TestDiagnosticsContentProvider;

        $r0.<androidx.test.services.storage.provider.TestDiagnosticsContentProvider$connectToAtpServer$1: androidx.test.services.storage.provider.TestDiagnosticsContentProvider this$0> = $r1;

        specialinvoke $r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final io.grpc.ManagedChannelBuilder invoke(java.lang.String)
    {
        androidx.test.services.storage.provider.TestDiagnosticsContentProvider$connectToAtpServer$1 $r0;
        java.lang.String $r1;
        io.grpc.android.AndroidChannelBuilder $r2;
        androidx.test.services.storage.provider.TestDiagnosticsContentProvider $r3;
        android.content.Context $r4;

        $r0 := @this: androidx.test.services.storage.provider.TestDiagnosticsContentProvider$connectToAtpServer$1;

        $r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "target");

        $r2 = staticinvoke <io.grpc.android.AndroidChannelBuilder: io.grpc.android.AndroidChannelBuilder forTarget(java.lang.String)>($r1);

        $r3 = $r0.<androidx.test.services.storage.provider.TestDiagnosticsContentProvider$connectToAtpServer$1: androidx.test.services.storage.provider.TestDiagnosticsContentProvider this$0>;

        $r4 = virtualinvoke $r3.<androidx.test.services.storage.provider.TestDiagnosticsContentProvider: android.content.Context getContext()>();

        $r2 = virtualinvoke $r2.<io.grpc.android.AndroidChannelBuilder: io.grpc.android.AndroidChannelBuilder context(android.content.Context)>($r4);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "forTarget(target).context(context)");

        return $r2;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.test.services.storage.provider.TestDiagnosticsContentProvider$connectToAtpServer$1 $r0;
        io.grpc.ManagedChannelBuilder $r1;
        java.lang.Object $r2;
        java.lang.String $r3;

        $r0 := @this: androidx.test.services.storage.provider.TestDiagnosticsContentProvider$connectToAtpServer$1;

        $r2 := @parameter0: java.lang.Object;

        $r3 = (java.lang.String) $r2;

        $r1 = virtualinvoke $r0.<androidx.test.services.storage.provider.TestDiagnosticsContentProvider$connectToAtpServer$1: io.grpc.ManagedChannelBuilder invoke(java.lang.String)>($r3);

        return $r1;
    }

androidx.test.services.storage.provider.TestDiagnosticsContentProvider$insert$3
<androidx.test.services.storage.provider.TestDiagnosticsContentProvider$insert$3: int label>
<androidx.test.services.storage.provider.TestDiagnosticsContentProvider$insert$3: androidx.test.services.storage.provider.TestDiagnosticsContentProvider this$0>
    void <init>(androidx.test.services.storage.provider.TestDiagnosticsContentProvider, kotlin.coroutines.Continuation)
    {
        androidx.test.services.storage.provider.TestDiagnosticsContentProvider$insert$3 $r0;
        kotlin.coroutines.Continuation $r1;
        androidx.test.services.storage.provider.TestDiagnosticsContentProvider $r2;

        $r0 := @this: androidx.test.services.storage.provider.TestDiagnosticsContentProvider$insert$3;

        $r2 := @parameter0: androidx.test.services.storage.provider.TestDiagnosticsContentProvider;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        $r0.<androidx.test.services.storage.provider.TestDiagnosticsContentProvider$insert$3: androidx.test.services.storage.provider.TestDiagnosticsContentProvider this$0> = $r2;

        specialinvoke $r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r1);

        return;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.test.services.storage.provider.TestDiagnosticsContentProvider$insert$3 $r0, $r4;
        kotlin.coroutines.Continuation $r1;
        androidx.test.services.storage.provider.TestDiagnosticsContentProvider $r2;
        java.lang.Object $r3;

        $r0 := @this: androidx.test.services.storage.provider.TestDiagnosticsContentProvider$insert$3;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        $r4 = new androidx.test.services.storage.provider.TestDiagnosticsContentProvider$insert$3;

        $r2 = $r0.<androidx.test.services.storage.provider.TestDiagnosticsContentProvider$insert$3: androidx.test.services.storage.provider.TestDiagnosticsContentProvider this$0>;

        specialinvoke $r4.<androidx.test.services.storage.provider.TestDiagnosticsContentProvider$insert$3: void <init>(androidx.test.services.storage.provider.TestDiagnosticsContentProvider,kotlin.coroutines.Continuation)>($r2, $r1);

        return $r4;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.test.services.storage.provider.TestDiagnosticsContentProvider$insert$3 $r0;
        java.lang.Object $r1, $r2;
        kotlinx.coroutines.CoroutineScope $r3;
        kotlin.coroutines.Continuation $r4;

        $r0 := @this: androidx.test.services.storage.provider.TestDiagnosticsContentProvider$insert$3;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = (kotlinx.coroutines.CoroutineScope) $r1;

        $r4 = (kotlin.coroutines.Continuation) $r2;

        $r1 = virtualinvoke $r0.<androidx.test.services.storage.provider.TestDiagnosticsContentProvider$insert$3: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)>($r3, $r4);

        return $r1;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.Continuation)
    {
        androidx.test.services.storage.provider.TestDiagnosticsContentProvider$insert$3 $r0;
        kotlinx.coroutines.CoroutineScope $r1;
        kotlin.coroutines.Continuation $r2;
        kotlin.Unit $r3;
        java.lang.Object $r4;

        $r0 := @this: androidx.test.services.storage.provider.TestDiagnosticsContentProvider$insert$3;

        $r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r2 = virtualinvoke $r0.<androidx.test.services.storage.provider.TestDiagnosticsContentProvider$insert$3: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>($r1, $r2);

        $r0 = (androidx.test.services.storage.provider.TestDiagnosticsContentProvider$insert$3) $r2;

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r4 = virtualinvoke $r0.<androidx.test.services.storage.provider.TestDiagnosticsContentProvider$insert$3: java.lang.Object invokeSuspend(java.lang.Object)>($r3);

        return $r4;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.test.services.storage.provider.TestDiagnosticsContentProvider$insert$3 $r0;
        java.lang.Object $r1, $r2;
        int $i0;
        java.lang.IllegalStateException $r3;
        androidx.test.services.storage.provider.TestDiagnosticsContentProvider $r4;
        kotlinx.coroutines.Job $r5, $r6;
        kotlin.Unit r7;

        $r0 := @this: androidx.test.services.storage.provider.TestDiagnosticsContentProvider$insert$3;

        $r1 := @parameter0: java.lang.Object;

        $r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = $r0.<androidx.test.services.storage.provider.TestDiagnosticsContentProvider$insert$3: int label>;

        lookupswitch($i0)
        {
            case 0: goto label3;
            case 1: goto label2;
            default: goto label1;
        };

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r3;

     label2:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        goto label5;

     label3:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r4 = $r0.<androidx.test.services.storage.provider.TestDiagnosticsContentProvider$insert$3: androidx.test.services.storage.provider.TestDiagnosticsContentProvider this$0>;

        $r5 = staticinvoke <androidx.test.services.storage.provider.TestDiagnosticsContentProvider: kotlinx.coroutines.Job access$getServerJob$p(androidx.test.services.storage.provider.TestDiagnosticsContentProvider)>($r4);

        $r6 = $r5;

        if $r5 != null goto label4;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void throwUninitializedPropertyAccessException(java.lang.String)>("serverJob");

        $r6 = null;

     label4:
        $r0.<androidx.test.services.storage.provider.TestDiagnosticsContentProvider$insert$3: int label> = 1;

        $r1 = interfaceinvoke $r6.<kotlinx.coroutines.Job: java.lang.Object join(kotlin.coroutines.Continuation)>($r0);

        if $r1 != $r2 goto label5;

        return $r2;

     label5:
        r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r7;
    }

androidx.test.services.storage.provider.TestDiagnosticsContentProvider$sendDiagnosticsEvents$1
<androidx.test.services.storage.provider.TestDiagnosticsContentProvider$sendDiagnosticsEvents$1: com.google.testing.platform.proto.api.android.DiagnosticEventProto$DiagnosticEvent $diagnosticsEvent>
<androidx.test.services.storage.provider.TestDiagnosticsContentProvider$sendDiagnosticsEvents$1: int label>
<androidx.test.services.storage.provider.TestDiagnosticsContentProvider$sendDiagnosticsEvents$1: androidx.test.services.storage.provider.TestDiagnosticsContentProvider this$0>
    void <init>(androidx.test.services.storage.provider.TestDiagnosticsContentProvider, com.google.testing.platform.proto.api.android.DiagnosticEventProto$DiagnosticEvent, kotlin.coroutines.Continuation)
    {
        androidx.test.services.storage.provider.TestDiagnosticsContentProvider$sendDiagnosticsEvents$1 $r0;
        com.google.testing.platform.proto.api.android.DiagnosticEventProto$DiagnosticEvent $r1;
        kotlin.coroutines.Continuation $r2;
        androidx.test.services.storage.provider.TestDiagnosticsContentProvider $r3;

        $r0 := @this: androidx.test.services.storage.provider.TestDiagnosticsContentProvider$sendDiagnosticsEvents$1;

        $r3 := @parameter0: androidx.test.services.storage.provider.TestDiagnosticsContentProvider;

        $r1 := @parameter1: com.google.testing.platform.proto.api.android.DiagnosticEventProto$DiagnosticEvent;

        $r2 := @parameter2: kotlin.coroutines.Continuation;

        $r0.<androidx.test.services.storage.provider.TestDiagnosticsContentProvider$sendDiagnosticsEvents$1: androidx.test.services.storage.provider.TestDiagnosticsContentProvider this$0> = $r3;

        $r0.<androidx.test.services.storage.provider.TestDiagnosticsContentProvider$sendDiagnosticsEvents$1: com.google.testing.platform.proto.api.android.DiagnosticEventProto$DiagnosticEvent $diagnosticsEvent> = $r1;

        specialinvoke $r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r2);

        return;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.test.services.storage.provider.TestDiagnosticsContentProvider$sendDiagnosticsEvents$1 $r0, $r5;
        kotlin.coroutines.Continuation $r1;
        androidx.test.services.storage.provider.TestDiagnosticsContentProvider $r2;
        com.google.testing.platform.proto.api.android.DiagnosticEventProto$DiagnosticEvent $r3;
        java.lang.Object $r4;

        $r0 := @this: androidx.test.services.storage.provider.TestDiagnosticsContentProvider$sendDiagnosticsEvents$1;

        $r4 := @parameter0: java.lang.Object;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        $r5 = new androidx.test.services.storage.provider.TestDiagnosticsContentProvider$sendDiagnosticsEvents$1;

        $r2 = $r0.<androidx.test.services.storage.provider.TestDiagnosticsContentProvider$sendDiagnosticsEvents$1: androidx.test.services.storage.provider.TestDiagnosticsContentProvider this$0>;

        $r3 = $r0.<androidx.test.services.storage.provider.TestDiagnosticsContentProvider$sendDiagnosticsEvents$1: com.google.testing.platform.proto.api.android.DiagnosticEventProto$DiagnosticEvent $diagnosticsEvent>;

        specialinvoke $r5.<androidx.test.services.storage.provider.TestDiagnosticsContentProvider$sendDiagnosticsEvents$1: void <init>(androidx.test.services.storage.provider.TestDiagnosticsContentProvider,com.google.testing.platform.proto.api.android.DiagnosticEventProto$DiagnosticEvent,kotlin.coroutines.Continuation)>($r2, $r3, $r1);

        return $r5;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.test.services.storage.provider.TestDiagnosticsContentProvider$sendDiagnosticsEvents$1 $r0;
        java.lang.Object $r1, $r2;
        kotlinx.coroutines.CoroutineScope $r3;
        kotlin.coroutines.Continuation $r4;

        $r0 := @this: androidx.test.services.storage.provider.TestDiagnosticsContentProvider$sendDiagnosticsEvents$1;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = (kotlinx.coroutines.CoroutineScope) $r1;

        $r4 = (kotlin.coroutines.Continuation) $r2;

        $r1 = virtualinvoke $r0.<androidx.test.services.storage.provider.TestDiagnosticsContentProvider$sendDiagnosticsEvents$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)>($r3, $r4);

        return $r1;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.Continuation)
    {
        androidx.test.services.storage.provider.TestDiagnosticsContentProvider$sendDiagnosticsEvents$1 $r0;
        kotlinx.coroutines.CoroutineScope $r1;
        kotlin.coroutines.Continuation $r2;
        kotlin.Unit $r3;
        java.lang.Object $r4;

        $r0 := @this: androidx.test.services.storage.provider.TestDiagnosticsContentProvider$sendDiagnosticsEvents$1;

        $r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r2 = virtualinvoke $r0.<androidx.test.services.storage.provider.TestDiagnosticsContentProvider$sendDiagnosticsEvents$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>($r1, $r2);

        $r0 = (androidx.test.services.storage.provider.TestDiagnosticsContentProvider$sendDiagnosticsEvents$1) $r2;

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r4 = virtualinvoke $r0.<androidx.test.services.storage.provider.TestDiagnosticsContentProvider$sendDiagnosticsEvents$1: java.lang.Object invokeSuspend(java.lang.Object)>($r3);

        return $r4;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.test.services.storage.provider.TestDiagnosticsContentProvider$sendDiagnosticsEvents$1 $r0;
        java.lang.Object $r1, $r2;
        int $i0;
        java.lang.IllegalStateException $r3;
        androidx.test.services.storage.provider.TestDiagnosticsContentProvider $r4;
        com.google.testing.platform.android.core.orchestration.strategy.GrpcDiagnosticsOrchestrationStrategy $r5, $r6;
        kotlinx.coroutines.channels.Channel $r7;
        com.google.testing.platform.proto.api.android.DiagnosticEventProto$DiagnosticEvent $r8;
        kotlin.Unit r9;

        $r0 := @this: androidx.test.services.storage.provider.TestDiagnosticsContentProvider$sendDiagnosticsEvents$1;

        $r1 := @parameter0: java.lang.Object;

        $r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = $r0.<androidx.test.services.storage.provider.TestDiagnosticsContentProvider$sendDiagnosticsEvents$1: int label>;

        lookupswitch($i0)
        {
            case 0: goto label3;
            case 1: goto label2;
            default: goto label1;
        };

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r3;

     label2:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        goto label5;

     label3:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r4 = $r0.<androidx.test.services.storage.provider.TestDiagnosticsContentProvider$sendDiagnosticsEvents$1: androidx.test.services.storage.provider.TestDiagnosticsContentProvider this$0>;

        $r5 = staticinvoke <androidx.test.services.storage.provider.TestDiagnosticsContentProvider: com.google.testing.platform.android.core.orchestration.strategy.GrpcDiagnosticsOrchestrationStrategy access$getGrpcDiagnosticsOrchestrationStrategy$p(androidx.test.services.storage.provider.TestDiagnosticsContentProvider)>($r4);

        $r6 = $r5;

        if $r5 != null goto label4;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void throwUninitializedPropertyAccessException(java.lang.String)>("grpcDiagnosticsOrchestrationStrategy");

        $r6 = null;

     label4:
        $r7 = virtualinvoke $r6.<com.google.testing.platform.android.core.orchestration.strategy.GrpcDiagnosticsOrchestrationStrategy: kotlinx.coroutines.channels.Channel getDiagnosticsEvents()>();

        $r8 = $r0.<androidx.test.services.storage.provider.TestDiagnosticsContentProvider$sendDiagnosticsEvents$1: com.google.testing.platform.proto.api.android.DiagnosticEventProto$DiagnosticEvent $diagnosticsEvent>;

        $r0.<androidx.test.services.storage.provider.TestDiagnosticsContentProvider$sendDiagnosticsEvents$1: int label> = 1;

        $r1 = interfaceinvoke $r7.<kotlinx.coroutines.channels.Channel: java.lang.Object send(java.lang.Object,kotlin.coroutines.Continuation)>($r8, $r0);

        if $r1 != $r2 goto label5;

        return $r2;

     label5:
        r9 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r9;
    }

androidx.test.services.storage.provider.TestDiagnosticsContentProvider$serverPort$1
<androidx.test.services.storage.provider.TestDiagnosticsContentProvider$serverPort$1: androidx.test.services.storage.provider.TestDiagnosticsContentProvider$serverPort$1 INSTANCE>
    static void <clinit>()
    {
        androidx.test.services.storage.provider.TestDiagnosticsContentProvider$serverPort$1 $r0;

        $r0 = new androidx.test.services.storage.provider.TestDiagnosticsContentProvider$serverPort$1;

        specialinvoke $r0.<androidx.test.services.storage.provider.TestDiagnosticsContentProvider$serverPort$1: void <init>()>();

        <androidx.test.services.storage.provider.TestDiagnosticsContentProvider$serverPort$1: androidx.test.services.storage.provider.TestDiagnosticsContentProvider$serverPort$1 INSTANCE> = $r0;

        return;
    }

    void <init>()
    {
        androidx.test.services.storage.provider.TestDiagnosticsContentProvider$serverPort$1 $r0;

        $r0 := @this: androidx.test.services.storage.provider.TestDiagnosticsContentProvider$serverPort$1;

        specialinvoke $r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.test.services.storage.provider.TestDiagnosticsContentProvider$serverPort$1 $r0;
        java.lang.String $r1;

        $r0 := @this: androidx.test.services.storage.provider.TestDiagnosticsContentProvider$serverPort$1;

        $r1 = virtualinvoke $r0.<androidx.test.services.storage.provider.TestDiagnosticsContentProvider$serverPort$1: java.lang.String invoke()>();

        return $r1;
    }

    public final java.lang.String invoke()
    {
        androidx.test.services.storage.provider.TestDiagnosticsContentProvider$serverPort$1 $r0;
        androidx.test.services.storage.provider.TestDiagnosticsContentProvider$Companion $r1;
        int $i0;
        java.lang.String $r2;

        $r0 := @this: androidx.test.services.storage.provider.TestDiagnosticsContentProvider$serverPort$1;

        $r1 = <androidx.test.services.storage.provider.TestDiagnosticsContentProvider: androidx.test.services.storage.provider.TestDiagnosticsContentProvider$Companion Companion>;

        $i0 = staticinvoke <androidx.test.services.storage.provider.TestDiagnosticsContentProvider$Companion: int access$getServerPortFromTestArgs(androidx.test.services.storage.provider.TestDiagnosticsContentProvider$Companion)>($r1);

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        return $r2;
    }

