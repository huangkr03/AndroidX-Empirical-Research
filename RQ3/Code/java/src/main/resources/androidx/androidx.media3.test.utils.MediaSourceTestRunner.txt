androidx.media3.test.utils.MediaSourceTestRunner
<androidx.media3.test.utils.MediaSourceTestRunner: int TIMEOUT_MS>
<androidx.media3.test.utils.MediaSourceTestRunner: androidx.media3.exoplayer.source.MediaSource mediaSource>
<androidx.media3.test.utils.MediaSourceTestRunner: androidx.media3.test.utils.MediaSourceTestRunner$MediaSourceListener mediaSourceListener>
<androidx.media3.test.utils.MediaSourceTestRunner: android.os.HandlerThread playbackThread>
<androidx.media3.test.utils.MediaSourceTestRunner: android.os.Handler playbackHandler>
<androidx.media3.test.utils.MediaSourceTestRunner: androidx.media3.exoplayer.upstream.Allocator allocator>
<androidx.media3.test.utils.MediaSourceTestRunner: java.util.concurrent.LinkedBlockingDeque timelines>
<androidx.media3.test.utils.MediaSourceTestRunner: java.util.concurrent.CopyOnWriteArrayList completedLoads>
<androidx.media3.test.utils.MediaSourceTestRunner: androidx.media3.common.Timeline timeline>
    public void <init>(androidx.media3.exoplayer.source.MediaSource, androidx.media3.exoplayer.upstream.Allocator)
    {
        androidx.media3.test.utils.MediaSourceTestRunner r0;
        androidx.media3.exoplayer.source.MediaSource r1;
        androidx.media3.exoplayer.upstream.Allocator r2;
        android.os.Looper r3;
        android.os.HandlerThread $r4, $r5, $r6;
        android.os.Handler $r7, $r12;
        androidx.media3.test.utils.MediaSourceTestRunner$MediaSourceListener $r8, $r11;
        java.util.concurrent.LinkedBlockingDeque $r9;
        java.util.concurrent.CopyOnWriteArrayList $r10;

        r0 := @this: androidx.media3.test.utils.MediaSourceTestRunner;

        r1 := @parameter0: androidx.media3.exoplayer.source.MediaSource;

        r2 := @parameter1: androidx.media3.exoplayer.upstream.Allocator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.test.utils.MediaSourceTestRunner: androidx.media3.exoplayer.source.MediaSource mediaSource> = r1;

        r0.<androidx.media3.test.utils.MediaSourceTestRunner: androidx.media3.exoplayer.upstream.Allocator allocator> = r2;

        $r4 = new android.os.HandlerThread;

        specialinvoke $r4.<android.os.HandlerThread: void <init>(java.lang.String)>("TestHandler");

        r0.<androidx.media3.test.utils.MediaSourceTestRunner: android.os.HandlerThread playbackThread> = $r4;

        $r5 = r0.<androidx.media3.test.utils.MediaSourceTestRunner: android.os.HandlerThread playbackThread>;

        virtualinvoke $r5.<android.os.HandlerThread: void start()>();

        $r6 = r0.<androidx.media3.test.utils.MediaSourceTestRunner: android.os.HandlerThread playbackThread>;

        r3 = virtualinvoke $r6.<android.os.HandlerThread: android.os.Looper getLooper()>();

        $r7 = new android.os.Handler;

        specialinvoke $r7.<android.os.Handler: void <init>(android.os.Looper)>(r3);

        r0.<androidx.media3.test.utils.MediaSourceTestRunner: android.os.Handler playbackHandler> = $r7;

        $r8 = new androidx.media3.test.utils.MediaSourceTestRunner$MediaSourceListener;

        specialinvoke $r8.<androidx.media3.test.utils.MediaSourceTestRunner$MediaSourceListener: void <init>(androidx.media3.test.utils.MediaSourceTestRunner,androidx.media3.test.utils.MediaSourceTestRunner$1)>(r0, null);

        r0.<androidx.media3.test.utils.MediaSourceTestRunner: androidx.media3.test.utils.MediaSourceTestRunner$MediaSourceListener mediaSourceListener> = $r8;

        $r9 = new java.util.concurrent.LinkedBlockingDeque;

        specialinvoke $r9.<java.util.concurrent.LinkedBlockingDeque: void <init>()>();

        r0.<androidx.media3.test.utils.MediaSourceTestRunner: java.util.concurrent.LinkedBlockingDeque timelines> = $r9;

        $r10 = new java.util.concurrent.CopyOnWriteArrayList;

        specialinvoke $r10.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();

        r0.<androidx.media3.test.utils.MediaSourceTestRunner: java.util.concurrent.CopyOnWriteArrayList completedLoads> = $r10;

        $r12 = r0.<androidx.media3.test.utils.MediaSourceTestRunner: android.os.Handler playbackHandler>;

        $r11 = r0.<androidx.media3.test.utils.MediaSourceTestRunner: androidx.media3.test.utils.MediaSourceTestRunner$MediaSourceListener mediaSourceListener>;

        interfaceinvoke r1.<androidx.media3.exoplayer.source.MediaSource: void addEventListener(android.os.Handler,androidx.media3.exoplayer.source.MediaSourceEventListener)>($r12, $r11);

        return;
    }

    public void runOnPlaybackThread(java.lang.Runnable)
    {
        androidx.media3.test.utils.MediaSourceTestRunner r0;
        java.lang.Runnable r1, $r7;
        java.lang.Throwable[] r2;
        java.util.concurrent.CountDownLatch r3, $r5;
        java.lang.Throwable r4, $r11, $r12, $r13;
        android.os.Handler $r6;
        java.util.concurrent.TimeUnit $r8;
        boolean $z1;
        java.lang.Boolean $r9;
        com.google.common.truth.BooleanSubject $r10;

        r0 := @this: androidx.media3.test.utils.MediaSourceTestRunner;

        r1 := @parameter0: java.lang.Runnable;

        r2 = newarray (java.lang.Throwable)[1];

        $r5 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r5.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r3 = $r5;

        $r6 = r0.<androidx.media3.test.utils.MediaSourceTestRunner: android.os.Handler playbackHandler>;

        $r7 = dynamicinvoke "run" <java.lang.Runnable (java.lang.Runnable,java.lang.Throwable[],java.util.concurrent.CountDownLatch)>(r1, r2, r3) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.test.utils.MediaSourceTestRunner: void lambda$runOnPlaybackThread$0(java.lang.Runnable,java.lang.Throwable[],java.util.concurrent.CountDownLatch)>, methodtype: void __METHODTYPE__());

        virtualinvoke $r6.<android.os.Handler: boolean post(java.lang.Runnable)>($r7);

     label1:
        $r8 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $z1 = virtualinvoke r3.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(10000L, $r8);

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        $r10 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.BooleanSubject assertThat(java.lang.Boolean)>($r9);

        virtualinvoke $r10.<com.google.common.truth.BooleanSubject: void isTrue()>();

     label2:
        goto label4;

     label3:
        $r13 := @caughtexception;

        r4 = $r13;

        staticinvoke <androidx.media3.common.util.Util: void sneakyThrow(java.lang.Throwable)>(r4);

     label4:
        $r11 = r2[0];

        if $r11 == null goto label5;

        $r12 = r2[0];

        staticinvoke <androidx.media3.common.util.Util: void sneakyThrow(java.lang.Throwable)>($r12);

     label5:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    public androidx.media3.common.Timeline prepareSource() throws java.io.IOException
    {
        androidx.media3.test.utils.MediaSourceTestRunner r0;
        java.io.IOException[] r1;
        java.lang.Runnable $r2;
        java.io.IOException $r3, $r5;
        androidx.media3.common.Timeline $r4;
        java.lang.Throwable r6;

        r0 := @this: androidx.media3.test.utils.MediaSourceTestRunner;

        r1 = newarray (java.io.IOException)[1];

        $r2 = dynamicinvoke "run" <java.lang.Runnable (androidx.media3.test.utils.MediaSourceTestRunner,java.io.IOException[])>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.media3.test.utils.MediaSourceTestRunner: void lambda$prepareSource$1(java.io.IOException[])>, methodtype: void __METHODTYPE__());

        virtualinvoke r0.<androidx.media3.test.utils.MediaSourceTestRunner: void runOnPlaybackThread(java.lang.Runnable)>($r2);

        $r3 = r1[0];

        if $r3 == null goto label1;

        $r5 = r1[0];

        r6 = (java.lang.Throwable) $r5;

        throw r6;

     label1:
        $r4 = virtualinvoke r0.<androidx.media3.test.utils.MediaSourceTestRunner: androidx.media3.common.Timeline assertTimelineChangeBlocking()>();

        return $r4;
    }

    public androidx.media3.exoplayer.source.MediaPeriod createPeriod(androidx.media3.exoplayer.source.MediaSource$MediaPeriodId)
    {
        androidx.media3.test.utils.MediaSourceTestRunner r0;
        androidx.media3.exoplayer.source.MediaSource$MediaPeriodId r1;
        androidx.media3.exoplayer.source.MediaPeriod $r2;

        r0 := @this: androidx.media3.test.utils.MediaSourceTestRunner;

        r1 := @parameter0: androidx.media3.exoplayer.source.MediaSource$MediaPeriodId;

        $r2 = virtualinvoke r0.<androidx.media3.test.utils.MediaSourceTestRunner: androidx.media3.exoplayer.source.MediaPeriod createPeriod(androidx.media3.exoplayer.source.MediaSource$MediaPeriodId,long)>(r1, 0L);

        return $r2;
    }

    public androidx.media3.exoplayer.source.MediaPeriod createPeriod(androidx.media3.exoplayer.source.MediaSource$MediaPeriodId, long)
    {
        androidx.media3.test.utils.MediaSourceTestRunner r0;
        androidx.media3.exoplayer.source.MediaSource$MediaPeriodId r1;
        long l0;
        androidx.media3.exoplayer.source.MediaPeriod[] r2;
        java.lang.Runnable $r3;
        androidx.media3.exoplayer.source.MediaPeriod $r4, $r6;
        com.google.common.truth.Subject $r5;

        r0 := @this: androidx.media3.test.utils.MediaSourceTestRunner;

        r1 := @parameter0: androidx.media3.exoplayer.source.MediaSource$MediaPeriodId;

        l0 := @parameter1: long;

        r2 = newarray (androidx.media3.exoplayer.source.MediaPeriod)[1];

        $r3 = dynamicinvoke "run" <java.lang.Runnable (androidx.media3.test.utils.MediaSourceTestRunner,androidx.media3.exoplayer.source.MediaPeriod[],androidx.media3.exoplayer.source.MediaSource$MediaPeriodId,long)>(r0, r2, r1, l0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.media3.test.utils.MediaSourceTestRunner: void lambda$createPeriod$2(androidx.media3.exoplayer.source.MediaPeriod[],androidx.media3.exoplayer.source.MediaSource$MediaPeriodId,long)>, methodtype: void __METHODTYPE__());

        virtualinvoke r0.<androidx.media3.test.utils.MediaSourceTestRunner: void runOnPlaybackThread(java.lang.Runnable)>($r3);

        $r4 = r2[0];

        $r5 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.Subject assertThat(java.lang.Object)>($r4);

        virtualinvoke $r5.<com.google.common.truth.Subject: void isNotNull()>();

        $r6 = r2[0];

        return $r6;
    }

    public java.util.concurrent.CountDownLatch preparePeriod(androidx.media3.exoplayer.source.MediaPeriod, long)
    {
        androidx.media3.test.utils.MediaSourceTestRunner r0;
        androidx.media3.exoplayer.source.MediaPeriod r1;
        long l0;
        android.os.ConditionVariable r2, $r4;
        java.util.concurrent.CountDownLatch r3, $r5;
        java.lang.Runnable $r6;

        r0 := @this: androidx.media3.test.utils.MediaSourceTestRunner;

        r1 := @parameter0: androidx.media3.exoplayer.source.MediaPeriod;

        l0 := @parameter1: long;

        $r4 = new android.os.ConditionVariable;

        specialinvoke $r4.<android.os.ConditionVariable: void <init>()>();

        r2 = $r4;

        $r5 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r5.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r3 = $r5;

        $r6 = dynamicinvoke "run" <java.lang.Runnable (androidx.media3.test.utils.MediaSourceTestRunner,androidx.media3.exoplayer.source.MediaPeriod,java.util.concurrent.CountDownLatch,long,android.os.ConditionVariable)>(r0, r1, r3, l0, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.media3.test.utils.MediaSourceTestRunner: void lambda$preparePeriod$3(androidx.media3.exoplayer.source.MediaPeriod,java.util.concurrent.CountDownLatch,long,android.os.ConditionVariable)>, methodtype: void __METHODTYPE__());

        virtualinvoke r0.<androidx.media3.test.utils.MediaSourceTestRunner: void runOnPlaybackThread(java.lang.Runnable)>($r6);

        virtualinvoke r2.<android.os.ConditionVariable: void block()>();

        return r3;
    }

    public void releasePeriod(androidx.media3.exoplayer.source.MediaPeriod)
    {
        androidx.media3.test.utils.MediaSourceTestRunner r0;
        androidx.media3.exoplayer.source.MediaPeriod r1;
        java.lang.Runnable $r2;

        r0 := @this: androidx.media3.test.utils.MediaSourceTestRunner;

        r1 := @parameter0: androidx.media3.exoplayer.source.MediaPeriod;

        $r2 = dynamicinvoke "run" <java.lang.Runnable (androidx.media3.test.utils.MediaSourceTestRunner,androidx.media3.exoplayer.source.MediaPeriod)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.media3.test.utils.MediaSourceTestRunner: void lambda$releasePeriod$4(androidx.media3.exoplayer.source.MediaPeriod)>, methodtype: void __METHODTYPE__());

        virtualinvoke r0.<androidx.media3.test.utils.MediaSourceTestRunner: void runOnPlaybackThread(java.lang.Runnable)>($r2);

        return;
    }

    public void releaseSource()
    {
        androidx.media3.test.utils.MediaSourceTestRunner r0;
        java.lang.Runnable $r1;

        r0 := @this: androidx.media3.test.utils.MediaSourceTestRunner;

        $r1 = dynamicinvoke "run" <java.lang.Runnable (androidx.media3.test.utils.MediaSourceTestRunner)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.media3.test.utils.MediaSourceTestRunner: void lambda$releaseSource$5()>, methodtype: void __METHODTYPE__());

        virtualinvoke r0.<androidx.media3.test.utils.MediaSourceTestRunner: void runOnPlaybackThread(java.lang.Runnable)>($r1);

        return;
    }

    public void assertNoTimelineChange()
    {
        androidx.media3.test.utils.MediaSourceTestRunner r0;
        java.util.concurrent.LinkedBlockingDeque $r1;
        com.google.common.truth.IterableSubject $r2;

        r0 := @this: androidx.media3.test.utils.MediaSourceTestRunner;

        $r1 = r0.<androidx.media3.test.utils.MediaSourceTestRunner: java.util.concurrent.LinkedBlockingDeque timelines>;

        $r2 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IterableSubject assertThat(java.lang.Iterable)>($r1);

        virtualinvoke $r2.<com.google.common.truth.IterableSubject: void isEmpty()>();

        return;
    }

    public androidx.media3.common.Timeline assertTimelineChange()
    {
        androidx.media3.test.utils.MediaSourceTestRunner r0;
        java.util.concurrent.LinkedBlockingDeque $r1;
        java.lang.Object $r2;
        androidx.media3.common.Timeline $r3, $r4;

        r0 := @this: androidx.media3.test.utils.MediaSourceTestRunner;

        $r1 = r0.<androidx.media3.test.utils.MediaSourceTestRunner: java.util.concurrent.LinkedBlockingDeque timelines>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.LinkedBlockingDeque: java.lang.Object removeFirst()>();

        $r3 = (androidx.media3.common.Timeline) $r2;

        r0.<androidx.media3.test.utils.MediaSourceTestRunner: androidx.media3.common.Timeline timeline> = $r3;

        virtualinvoke r0.<androidx.media3.test.utils.MediaSourceTestRunner: void assertNoTimelineChange()>();

        $r4 = r0.<androidx.media3.test.utils.MediaSourceTestRunner: androidx.media3.common.Timeline timeline>;

        return $r4;
    }

    public androidx.media3.common.Timeline assertTimelineChangeBlocking()
    {
        androidx.media3.test.utils.MediaSourceTestRunner r0;
        java.lang.Throwable r1, $r9;
        java.util.concurrent.TimeUnit $r2;
        java.util.concurrent.LinkedBlockingDeque $r3;
        java.lang.Object $r4;
        androidx.media3.common.Timeline $r5, $r6, $r8;
        com.google.common.truth.Subject $r7;
        java.lang.RuntimeException $r10;

        r0 := @this: androidx.media3.test.utils.MediaSourceTestRunner;

     label1:
        $r3 = r0.<androidx.media3.test.utils.MediaSourceTestRunner: java.util.concurrent.LinkedBlockingDeque timelines>;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.LinkedBlockingDeque: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>(10000L, $r2);

        $r5 = (androidx.media3.common.Timeline) $r4;

        r0.<androidx.media3.test.utils.MediaSourceTestRunner: androidx.media3.common.Timeline timeline> = $r5;

        $r6 = r0.<androidx.media3.test.utils.MediaSourceTestRunner: androidx.media3.common.Timeline timeline>;

        $r7 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.Subject assertThat(java.lang.Object)>($r6);

        virtualinvoke $r7.<com.google.common.truth.Subject: void isNotNull()>();

        virtualinvoke r0.<androidx.media3.test.utils.MediaSourceTestRunner: void assertNoTimelineChange()>();

        $r8 = r0.<androidx.media3.test.utils.MediaSourceTestRunner: androidx.media3.common.Timeline timeline>;

     label2:
        return $r8;

     label3:
        $r9 := @caughtexception;

        r1 = $r9;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r10;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    public void assertPrepareAndReleaseAllPeriods() throws java.lang.InterruptedException
    {
        androidx.media3.test.utils.MediaSourceTestRunner r0;
        androidx.media3.common.Timeline$Period r1, $r2;
        androidx.media3.common.Timeline $r3, $r4;
        int $i0, $i1, $i3, $i4, $i5, i7, i8, i9;
        androidx.media3.exoplayer.source.MediaSource$MediaPeriodId $r6, $r8;
        long $l2, $l6;
        java.lang.Object $r7, $r9;

        r0 := @this: androidx.media3.test.utils.MediaSourceTestRunner;

        $r2 = new androidx.media3.common.Timeline$Period;

        specialinvoke $r2.<androidx.media3.common.Timeline$Period: void <init>()>();

        r1 = $r2;

        i7 = 0;

     label1:
        $r3 = r0.<androidx.media3.test.utils.MediaSourceTestRunner: androidx.media3.common.Timeline timeline>;

        $i0 = virtualinvoke $r3.<androidx.media3.common.Timeline: int getPeriodCount()>();

        if i7 >= $i0 goto label6;

        $r4 = r0.<androidx.media3.test.utils.MediaSourceTestRunner: androidx.media3.common.Timeline timeline>;

        virtualinvoke $r4.<androidx.media3.common.Timeline: androidx.media3.common.Timeline$Period getPeriod(int,androidx.media3.common.Timeline$Period,boolean)>(i7, r1, 1);

        $r6 = new androidx.media3.exoplayer.source.MediaSource$MediaPeriodId;

        $r7 = r1.<androidx.media3.common.Timeline$Period: java.lang.Object uid>;

        $i1 = r1.<androidx.media3.common.Timeline$Period: int windowIndex>;

        $l2 = (long) $i1;

        specialinvoke $r6.<androidx.media3.exoplayer.source.MediaSource$MediaPeriodId: void <init>(java.lang.Object,long)>($r7, $l2);

        specialinvoke r0.<androidx.media3.test.utils.MediaSourceTestRunner: void assertPrepareAndReleasePeriod(androidx.media3.exoplayer.source.MediaSource$MediaPeriodId)>($r6);

        i8 = 0;

     label2:
        $i3 = virtualinvoke r1.<androidx.media3.common.Timeline$Period: int getAdGroupCount()>();

        if i8 >= $i3 goto label5;

        i9 = 0;

     label3:
        $i4 = virtualinvoke r1.<androidx.media3.common.Timeline$Period: int getAdCountInAdGroup(int)>(i8);

        if i9 >= $i4 goto label4;

        $r8 = new androidx.media3.exoplayer.source.MediaSource$MediaPeriodId;

        $r9 = r1.<androidx.media3.common.Timeline$Period: java.lang.Object uid>;

        $i5 = r1.<androidx.media3.common.Timeline$Period: int windowIndex>;

        $l6 = (long) $i5;

        specialinvoke $r8.<androidx.media3.exoplayer.source.MediaSource$MediaPeriodId: void <init>(java.lang.Object,int,int,long)>($r9, i8, i9, $l6);

        specialinvoke r0.<androidx.media3.test.utils.MediaSourceTestRunner: void assertPrepareAndReleasePeriod(androidx.media3.exoplayer.source.MediaSource$MediaPeriodId)>($r8);

        i9 = i9 + 1;

        goto label3;

     label4:
        i8 = i8 + 1;

        goto label2;

     label5:
        i7 = i7 + 1;

        goto label1;

     label6:
        return;
    }

    private void assertPrepareAndReleasePeriod(androidx.media3.exoplayer.source.MediaSource$MediaPeriodId) throws java.lang.InterruptedException
    {
        androidx.media3.test.utils.MediaSourceTestRunner r0;
        androidx.media3.exoplayer.source.MediaSource$MediaPeriodId r1, r4, $r10;
        androidx.media3.exoplayer.source.MediaPeriod r2, r5;
        java.util.concurrent.CountDownLatch r3, r6;
        java.util.concurrent.TimeUnit $r7, $r12;
        boolean $z0, $z1;
        java.lang.Boolean $r8, $r13;
        com.google.common.truth.BooleanSubject $r9, $r14;
        long $l0, $l1;
        int $i2, $i3;
        java.lang.Object $r11;

        r0 := @this: androidx.media3.test.utils.MediaSourceTestRunner;

        r1 := @parameter0: androidx.media3.exoplayer.source.MediaSource$MediaPeriodId;

        r2 = virtualinvoke r0.<androidx.media3.test.utils.MediaSourceTestRunner: androidx.media3.exoplayer.source.MediaPeriod createPeriod(androidx.media3.exoplayer.source.MediaSource$MediaPeriodId)>(r1);

        r3 = virtualinvoke r0.<androidx.media3.test.utils.MediaSourceTestRunner: java.util.concurrent.CountDownLatch preparePeriod(androidx.media3.exoplayer.source.MediaPeriod,long)>(r2, 0L);

        $r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $z0 = virtualinvoke r3.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(10000L, $r7);

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r9 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.BooleanSubject assertThat(java.lang.Boolean)>($r8);

        virtualinvoke $r9.<com.google.common.truth.BooleanSubject: void isTrue()>();

        $r10 = new androidx.media3.exoplayer.source.MediaSource$MediaPeriodId;

        $r11 = r1.<androidx.media3.exoplayer.source.MediaSource$MediaPeriodId: java.lang.Object periodUid>;

        $i3 = r1.<androidx.media3.exoplayer.source.MediaSource$MediaPeriodId: int adGroupIndex>;

        $i2 = r1.<androidx.media3.exoplayer.source.MediaSource$MediaPeriodId: int adIndexInAdGroup>;

        $l0 = r1.<androidx.media3.exoplayer.source.MediaSource$MediaPeriodId: long windowSequenceNumber>;

        $l1 = $l0 + 1000L;

        specialinvoke $r10.<androidx.media3.exoplayer.source.MediaSource$MediaPeriodId: void <init>(java.lang.Object,int,int,long)>($r11, $i3, $i2, $l1);

        r4 = $r10;

        r5 = virtualinvoke r0.<androidx.media3.test.utils.MediaSourceTestRunner: androidx.media3.exoplayer.source.MediaPeriod createPeriod(androidx.media3.exoplayer.source.MediaSource$MediaPeriodId)>(r4);

        r6 = virtualinvoke r0.<androidx.media3.test.utils.MediaSourceTestRunner: java.util.concurrent.CountDownLatch preparePeriod(androidx.media3.exoplayer.source.MediaPeriod,long)>(r5, 0L);

        $r12 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $z1 = virtualinvoke r6.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(10000L, $r12);

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        $r14 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.BooleanSubject assertThat(java.lang.Boolean)>($r13);

        virtualinvoke $r14.<com.google.common.truth.BooleanSubject: void isTrue()>();

        virtualinvoke r0.<androidx.media3.test.utils.MediaSourceTestRunner: void releasePeriod(androidx.media3.exoplayer.source.MediaPeriod)>(r2);

        virtualinvoke r0.<androidx.media3.test.utils.MediaSourceTestRunner: void releasePeriod(androidx.media3.exoplayer.source.MediaPeriod)>(r5);

        return;
    }

    public transient void assertCompletedManifestLoads(java.lang.Integer[])
    {
        androidx.media3.test.utils.MediaSourceTestRunner r0;
        java.lang.Integer[] r1;
        java.util.ArrayList r2, $r5;
        java.util.Iterator r3;
        android.util.Pair r4;
        java.util.List $r6;
        java.util.concurrent.CopyOnWriteArrayList $r7;
        boolean $z0;
        com.google.common.truth.StandardSubjectBuilder $r8, $r12;
        com.google.common.truth.IterableSubject $r9, $r13;
        java.lang.Object $r10, $r11, $r14, $r15;

        r0 := @this: androidx.media3.test.utils.MediaSourceTestRunner;

        r1 := @parameter0: java.lang.Integer[];

        $r5 = new java.util.ArrayList;

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        specialinvoke $r5.<java.util.ArrayList: void <init>(java.util.Collection)>($r6);

        r2 = $r5;

        $r7 = r0.<androidx.media3.test.utils.MediaSourceTestRunner: java.util.concurrent.CopyOnWriteArrayList completedLoads>;

        r3 = virtualinvoke $r7.<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.util.Pair) $r10;

        $r11 = r4.<android.util.Pair: java.lang.Object second>;

        if $r11 != null goto label2;

        $r12 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.StandardSubjectBuilder assertWithMessage(java.lang.String)>("Missing expected load");

        $r13 = virtualinvoke $r12.<com.google.common.truth.StandardSubjectBuilder: com.google.common.truth.IterableSubject that(java.lang.Iterable)>(r2);

        $r14 = r4.<android.util.Pair: java.lang.Object first>;

        virtualinvoke $r13.<com.google.common.truth.IterableSubject: void contains(java.lang.Object)>($r14);

        $r15 = r4.<android.util.Pair: java.lang.Object first>;

        interfaceinvoke r2.<java.util.List: boolean remove(java.lang.Object)>($r15);

     label2:
        goto label1;

     label3:
        $r8 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.StandardSubjectBuilder assertWithMessage(java.lang.String)>("Not all expected media source loads have been completed.");

        $r9 = virtualinvoke $r8.<com.google.common.truth.StandardSubjectBuilder: com.google.common.truth.IterableSubject that(java.lang.Iterable)>(r2);

        virtualinvoke $r9.<com.google.common.truth.IterableSubject: void isEmpty()>();

        return;
    }

    public transient void assertCompletedMediaPeriodLoads(androidx.media3.exoplayer.source.MediaSource$MediaPeriodId[])
    {
        androidx.media3.test.utils.MediaSourceTestRunner r0;
        androidx.media3.exoplayer.source.MediaSource$MediaPeriodId[] r1;
        androidx.media3.common.Timeline$Period r2, $r7, $r22;
        java.util.HashSet r3, $r8;
        java.util.Iterator r4;
        android.util.Pair r5;
        int i0, i1, $i2;
        androidx.media3.exoplayer.source.MediaSource$MediaPeriodId r6;
        java.util.List $r9;
        java.util.concurrent.CopyOnWriteArrayList $r10;
        boolean $z0, $z1;
        com.google.common.truth.StandardSubjectBuilder $r11;
        com.google.common.truth.IterableSubject $r12;
        java.lang.Object $r13, $r14, $r16, $r17;
        java.lang.Integer $r15, $r19, $r23;
        androidx.media3.common.Timeline $r18, $r21;
        com.google.common.truth.IntegerSubject $r20;

        r0 := @this: androidx.media3.test.utils.MediaSourceTestRunner;

        r1 := @parameter0: androidx.media3.exoplayer.source.MediaSource$MediaPeriodId[];

        $r7 = new androidx.media3.common.Timeline$Period;

        specialinvoke $r7.<androidx.media3.common.Timeline$Period: void <init>()>();

        r2 = $r7;

        $r8 = new java.util.HashSet;

        $r9 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        specialinvoke $r8.<java.util.HashSet: void <init>(java.util.Collection)>($r9);

        r3 = $r8;

        $r10 = r0.<androidx.media3.test.utils.MediaSourceTestRunner: java.util.concurrent.CopyOnWriteArrayList completedLoads>;

        r4 = virtualinvoke $r10.<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r13 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.util.Pair) $r13;

        $r14 = r5.<android.util.Pair: java.lang.Object first>;

        $r15 = (java.lang.Integer) $r14;

        i0 = virtualinvoke $r15.<java.lang.Integer: int intValue()>();

        $r16 = r5.<android.util.Pair: java.lang.Object second>;

        r6 = (androidx.media3.exoplayer.source.MediaSource$MediaPeriodId) $r16;

        $z1 = virtualinvoke r3.<java.util.HashSet: boolean remove(java.lang.Object)>(r6);

        if $z1 == 0 goto label2;

        $r18 = r0.<androidx.media3.test.utils.MediaSourceTestRunner: androidx.media3.common.Timeline timeline>;

        $r17 = r6.<androidx.media3.exoplayer.source.MediaSource$MediaPeriodId: java.lang.Object periodUid>;

        i1 = virtualinvoke $r18.<androidx.media3.common.Timeline: int getIndexOfPeriod(java.lang.Object)>($r17);

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r20 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IntegerSubject assertThat(java.lang.Integer)>($r19);

        $r21 = r0.<androidx.media3.test.utils.MediaSourceTestRunner: androidx.media3.common.Timeline timeline>;

        $r22 = virtualinvoke $r21.<androidx.media3.common.Timeline: androidx.media3.common.Timeline$Period getPeriod(int,androidx.media3.common.Timeline$Period)>(i1, r2);

        $i2 = $r22.<androidx.media3.common.Timeline$Period: int windowIndex>;

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        virtualinvoke $r20.<com.google.common.truth.IntegerSubject: void isEqualTo(java.lang.Object)>($r23);

     label2:
        goto label1;

     label3:
        $r11 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.StandardSubjectBuilder assertWithMessage(java.lang.String)>("Not all expected media source loads have been completed.");

        $r12 = virtualinvoke $r11.<com.google.common.truth.StandardSubjectBuilder: com.google.common.truth.IterableSubject that(java.lang.Iterable)>(r3);

        virtualinvoke $r12.<com.google.common.truth.IterableSubject: void isEmpty()>();

        return;
    }

    public void release()
    {
        androidx.media3.test.utils.MediaSourceTestRunner r0;
        android.os.HandlerThread $r1;

        r0 := @this: androidx.media3.test.utils.MediaSourceTestRunner;

        $r1 = r0.<androidx.media3.test.utils.MediaSourceTestRunner: android.os.HandlerThread playbackThread>;

        virtualinvoke $r1.<android.os.HandlerThread: boolean quit()>();

        return;
    }

    private void lambda$releaseSource$5()
    {
        androidx.media3.test.utils.MediaSourceTestRunner r0;
        androidx.media3.test.utils.MediaSourceTestRunner$MediaSourceListener $r1;
        androidx.media3.exoplayer.source.MediaSource $r2;

        r0 := @this: androidx.media3.test.utils.MediaSourceTestRunner;

        $r2 = r0.<androidx.media3.test.utils.MediaSourceTestRunner: androidx.media3.exoplayer.source.MediaSource mediaSource>;

        $r1 = r0.<androidx.media3.test.utils.MediaSourceTestRunner: androidx.media3.test.utils.MediaSourceTestRunner$MediaSourceListener mediaSourceListener>;

        interfaceinvoke $r2.<androidx.media3.exoplayer.source.MediaSource: void releaseSource(androidx.media3.exoplayer.source.MediaSource$MediaSourceCaller)>($r1);

        return;
    }

    private void lambda$releasePeriod$4(androidx.media3.exoplayer.source.MediaPeriod)
    {
        androidx.media3.test.utils.MediaSourceTestRunner r0;
        androidx.media3.exoplayer.source.MediaPeriod r1;
        androidx.media3.exoplayer.source.MediaSource $r2;

        r0 := @this: androidx.media3.test.utils.MediaSourceTestRunner;

        r1 := @parameter0: androidx.media3.exoplayer.source.MediaPeriod;

        $r2 = r0.<androidx.media3.test.utils.MediaSourceTestRunner: androidx.media3.exoplayer.source.MediaSource mediaSource>;

        interfaceinvoke $r2.<androidx.media3.exoplayer.source.MediaSource: void releasePeriod(androidx.media3.exoplayer.source.MediaPeriod)>(r1);

        return;
    }

    private void lambda$preparePeriod$3(androidx.media3.exoplayer.source.MediaPeriod, java.util.concurrent.CountDownLatch, long, android.os.ConditionVariable)
    {
        androidx.media3.test.utils.MediaSourceTestRunner r0;
        androidx.media3.exoplayer.source.MediaPeriod r1;
        java.util.concurrent.CountDownLatch r2;
        long l0;
        android.os.ConditionVariable r3;
        androidx.media3.test.utils.MediaSourceTestRunner$1 $r4;

        r0 := @this: androidx.media3.test.utils.MediaSourceTestRunner;

        r1 := @parameter0: androidx.media3.exoplayer.source.MediaPeriod;

        r2 := @parameter1: java.util.concurrent.CountDownLatch;

        l0 := @parameter2: long;

        r3 := @parameter3: android.os.ConditionVariable;

        $r4 = new androidx.media3.test.utils.MediaSourceTestRunner$1;

        specialinvoke $r4.<androidx.media3.test.utils.MediaSourceTestRunner$1: void <init>(androidx.media3.test.utils.MediaSourceTestRunner,java.util.concurrent.CountDownLatch)>(r0, r2);

        interfaceinvoke r1.<androidx.media3.exoplayer.source.MediaPeriod: void prepare(androidx.media3.exoplayer.source.MediaPeriod$Callback,long)>($r4, l0);

        virtualinvoke r3.<android.os.ConditionVariable: void open()>();

        return;
    }

    private void lambda$createPeriod$2(androidx.media3.exoplayer.source.MediaPeriod[], androidx.media3.exoplayer.source.MediaSource$MediaPeriodId, long)
    {
        androidx.media3.test.utils.MediaSourceTestRunner r0;
        androidx.media3.exoplayer.source.MediaPeriod[] r1;
        androidx.media3.exoplayer.source.MediaSource$MediaPeriodId r2;
        long l0;
        androidx.media3.exoplayer.upstream.Allocator $r3;
        androidx.media3.exoplayer.source.MediaSource $r4;
        androidx.media3.exoplayer.source.MediaPeriod $r5;

        r0 := @this: androidx.media3.test.utils.MediaSourceTestRunner;

        r1 := @parameter0: androidx.media3.exoplayer.source.MediaPeriod[];

        r2 := @parameter1: androidx.media3.exoplayer.source.MediaSource$MediaPeriodId;

        l0 := @parameter2: long;

        $r4 = r0.<androidx.media3.test.utils.MediaSourceTestRunner: androidx.media3.exoplayer.source.MediaSource mediaSource>;

        $r3 = r0.<androidx.media3.test.utils.MediaSourceTestRunner: androidx.media3.exoplayer.upstream.Allocator allocator>;

        $r5 = interfaceinvoke $r4.<androidx.media3.exoplayer.source.MediaSource: androidx.media3.exoplayer.source.MediaPeriod createPeriod(androidx.media3.exoplayer.source.MediaSource$MediaPeriodId,androidx.media3.exoplayer.upstream.Allocator,long)>(r2, $r3, l0);

        r1[0] = $r5;

        return;
    }

    private void lambda$prepareSource$1(java.io.IOException[])
    {
        androidx.media3.test.utils.MediaSourceTestRunner r0;
        java.lang.Object[] r1;
        java.lang.Throwable r2, $r7;
        androidx.media3.exoplayer.analytics.PlayerId $r3;
        androidx.media3.test.utils.MediaSourceTestRunner$MediaSourceListener $r4;
        androidx.media3.exoplayer.source.MediaSource $r5, $r6;

        r0 := @this: androidx.media3.test.utils.MediaSourceTestRunner;

        r1 := @parameter0: java.io.IOException[];

        $r5 = r0.<androidx.media3.test.utils.MediaSourceTestRunner: androidx.media3.exoplayer.source.MediaSource mediaSource>;

        $r4 = r0.<androidx.media3.test.utils.MediaSourceTestRunner: androidx.media3.test.utils.MediaSourceTestRunner$MediaSourceListener mediaSourceListener>;

        $r3 = <androidx.media3.exoplayer.analytics.PlayerId: androidx.media3.exoplayer.analytics.PlayerId UNSET>;

        interfaceinvoke $r5.<androidx.media3.exoplayer.source.MediaSource: void prepareSource(androidx.media3.exoplayer.source.MediaSource$MediaSourceCaller,androidx.media3.datasource.TransferListener,androidx.media3.exoplayer.analytics.PlayerId)>($r4, null, $r3);

     label1:
        $r6 = r0.<androidx.media3.test.utils.MediaSourceTestRunner: androidx.media3.exoplayer.source.MediaSource mediaSource>;

        interfaceinvoke $r6.<androidx.media3.exoplayer.source.MediaSource: void maybeThrowSourceInfoRefreshError()>();

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r2 = $r7;

        r1[0] = r2;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private static void lambda$runOnPlaybackThread$0(java.lang.Runnable, java.lang.Throwable[], java.util.concurrent.CountDownLatch)
    {
        java.lang.Runnable r0;
        java.lang.Throwable[] r1;
        java.util.concurrent.CountDownLatch r2;
        java.lang.Throwable r3, $r4;

        r0 := @parameter0: java.lang.Runnable;

        r1 := @parameter1: java.lang.Throwable[];

        r2 := @parameter2: java.util.concurrent.CountDownLatch;

     label1:
        interfaceinvoke r0.<java.lang.Runnable: void run()>();

     label2:
        virtualinvoke r2.<java.util.concurrent.CountDownLatch: void countDown()>();

        goto label4;

     label3:
        $r4 := @caughtexception;

        r3 = $r4;

        r1[0] = r3;

        virtualinvoke r2.<java.util.concurrent.CountDownLatch: void countDown()>();

        goto label4;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    static android.os.HandlerThread access$100(androidx.media3.test.utils.MediaSourceTestRunner)
    {
        androidx.media3.test.utils.MediaSourceTestRunner r0;
        android.os.HandlerThread $r1;

        r0 := @parameter0: androidx.media3.test.utils.MediaSourceTestRunner;

        $r1 = r0.<androidx.media3.test.utils.MediaSourceTestRunner: android.os.HandlerThread playbackThread>;

        return $r1;
    }

    static java.util.concurrent.LinkedBlockingDeque access$200(androidx.media3.test.utils.MediaSourceTestRunner)
    {
        androidx.media3.test.utils.MediaSourceTestRunner r0;
        java.util.concurrent.LinkedBlockingDeque $r1;

        r0 := @parameter0: androidx.media3.test.utils.MediaSourceTestRunner;

        $r1 = r0.<androidx.media3.test.utils.MediaSourceTestRunner: java.util.concurrent.LinkedBlockingDeque timelines>;

        return $r1;
    }

    static java.util.concurrent.CopyOnWriteArrayList access$300(androidx.media3.test.utils.MediaSourceTestRunner)
    {
        androidx.media3.test.utils.MediaSourceTestRunner r0;
        java.util.concurrent.CopyOnWriteArrayList $r1;

        r0 := @parameter0: androidx.media3.test.utils.MediaSourceTestRunner;

        $r1 = r0.<androidx.media3.test.utils.MediaSourceTestRunner: java.util.concurrent.CopyOnWriteArrayList completedLoads>;

        return $r1;
    }

androidx.media3.test.utils.MediaSourceTestRunner$1
<androidx.media3.test.utils.MediaSourceTestRunner$1: java.util.concurrent.CountDownLatch val$preparedLatch>
    void <init>(androidx.media3.test.utils.MediaSourceTestRunner, java.util.concurrent.CountDownLatch)
    {
        androidx.media3.test.utils.MediaSourceTestRunner$1 r0;
        androidx.media3.test.utils.MediaSourceTestRunner r1;
        java.util.concurrent.CountDownLatch r2;

        r0 := @this: androidx.media3.test.utils.MediaSourceTestRunner$1;

        r1 := @parameter0: androidx.media3.test.utils.MediaSourceTestRunner;

        r2 := @parameter1: java.util.concurrent.CountDownLatch;

        r0.<androidx.media3.test.utils.MediaSourceTestRunner$1: java.util.concurrent.CountDownLatch val$preparedLatch> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onPrepared(androidx.media3.exoplayer.source.MediaPeriod)
    {
        androidx.media3.test.utils.MediaSourceTestRunner$1 r0;
        androidx.media3.exoplayer.source.MediaPeriod r1;
        java.util.concurrent.CountDownLatch $r2;

        r0 := @this: androidx.media3.test.utils.MediaSourceTestRunner$1;

        r1 := @parameter0: androidx.media3.exoplayer.source.MediaPeriod;

        $r2 = r0.<androidx.media3.test.utils.MediaSourceTestRunner$1: java.util.concurrent.CountDownLatch val$preparedLatch>;

        virtualinvoke $r2.<java.util.concurrent.CountDownLatch: void countDown()>();

        return;
    }

    public void onContinueLoadingRequested(androidx.media3.exoplayer.source.MediaPeriod)
    {
        androidx.media3.test.utils.MediaSourceTestRunner$1 r0;
        androidx.media3.exoplayer.source.MediaPeriod r1;

        r0 := @this: androidx.media3.test.utils.MediaSourceTestRunner$1;

        r1 := @parameter0: androidx.media3.exoplayer.source.MediaPeriod;

        return;
    }

    public volatile void onContinueLoadingRequested(androidx.media3.exoplayer.source.SequenceableLoader)
    {
        androidx.media3.test.utils.MediaSourceTestRunner$1 r0;
        androidx.media3.exoplayer.source.SequenceableLoader r1;
        androidx.media3.exoplayer.source.MediaPeriod $r2;

        r0 := @this: androidx.media3.test.utils.MediaSourceTestRunner$1;

        r1 := @parameter0: androidx.media3.exoplayer.source.SequenceableLoader;

        $r2 = (androidx.media3.exoplayer.source.MediaPeriod) r1;

        virtualinvoke r0.<androidx.media3.test.utils.MediaSourceTestRunner$1: void onContinueLoadingRequested(androidx.media3.exoplayer.source.MediaPeriod)>($r2);

        return;
    }

androidx.media3.test.utils.MediaSourceTestRunner$MediaSourceListener
<androidx.media3.test.utils.MediaSourceTestRunner$MediaSourceListener: androidx.media3.test.utils.MediaSourceTestRunner this$0>
    private void <init>(androidx.media3.test.utils.MediaSourceTestRunner)
    {
        androidx.media3.test.utils.MediaSourceTestRunner$MediaSourceListener r0;
        androidx.media3.test.utils.MediaSourceTestRunner r1;

        r0 := @this: androidx.media3.test.utils.MediaSourceTestRunner$MediaSourceListener;

        r1 := @parameter0: androidx.media3.test.utils.MediaSourceTestRunner;

        r0.<androidx.media3.test.utils.MediaSourceTestRunner$MediaSourceListener: androidx.media3.test.utils.MediaSourceTestRunner this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onSourceInfoRefreshed(androidx.media3.exoplayer.source.MediaSource, androidx.media3.common.Timeline)
    {
        androidx.media3.test.utils.MediaSourceTestRunner$MediaSourceListener r0;
        androidx.media3.exoplayer.source.MediaSource r1;
        androidx.media3.common.Timeline r2;
        android.os.Looper $r3, $r6;
        androidx.media3.test.utils.MediaSourceTestRunner $r4, $r7;
        android.os.HandlerThread $r5;
        java.util.concurrent.LinkedBlockingDeque $r8;
        boolean $z0;

        r0 := @this: androidx.media3.test.utils.MediaSourceTestRunner$MediaSourceListener;

        r1 := @parameter0: androidx.media3.exoplayer.source.MediaSource;

        r2 := @parameter1: androidx.media3.common.Timeline;

        $r3 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r4 = r0.<androidx.media3.test.utils.MediaSourceTestRunner$MediaSourceListener: androidx.media3.test.utils.MediaSourceTestRunner this$0>;

        $r5 = staticinvoke <androidx.media3.test.utils.MediaSourceTestRunner: android.os.HandlerThread access$100(androidx.media3.test.utils.MediaSourceTestRunner)>($r4);

        $r6 = virtualinvoke $r5.<android.os.HandlerThread: android.os.Looper getLooper()>();

        if $r3 != $r6 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z0);

        $r7 = r0.<androidx.media3.test.utils.MediaSourceTestRunner$MediaSourceListener: androidx.media3.test.utils.MediaSourceTestRunner this$0>;

        $r8 = staticinvoke <androidx.media3.test.utils.MediaSourceTestRunner: java.util.concurrent.LinkedBlockingDeque access$200(androidx.media3.test.utils.MediaSourceTestRunner)>($r7);

        virtualinvoke $r8.<java.util.concurrent.LinkedBlockingDeque: void addLast(java.lang.Object)>(r2);

        return;
    }

    public void onLoadStarted(int, androidx.media3.exoplayer.source.MediaSource$MediaPeriodId, androidx.media3.exoplayer.source.LoadEventInfo, androidx.media3.exoplayer.source.MediaLoadData)
    {
        androidx.media3.test.utils.MediaSourceTestRunner$MediaSourceListener r0;
        int i0;
        androidx.media3.exoplayer.source.MediaSource$MediaPeriodId r1;
        androidx.media3.exoplayer.source.LoadEventInfo r2;
        androidx.media3.exoplayer.source.MediaLoadData r3;
        android.os.Looper $r4, $r7;
        androidx.media3.test.utils.MediaSourceTestRunner $r5;
        android.os.HandlerThread $r6;
        boolean $z0;

        r0 := @this: androidx.media3.test.utils.MediaSourceTestRunner$MediaSourceListener;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.media3.exoplayer.source.MediaSource$MediaPeriodId;

        r2 := @parameter2: androidx.media3.exoplayer.source.LoadEventInfo;

        r3 := @parameter3: androidx.media3.exoplayer.source.MediaLoadData;

        $r4 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r5 = r0.<androidx.media3.test.utils.MediaSourceTestRunner$MediaSourceListener: androidx.media3.test.utils.MediaSourceTestRunner this$0>;

        $r6 = staticinvoke <androidx.media3.test.utils.MediaSourceTestRunner: android.os.HandlerThread access$100(androidx.media3.test.utils.MediaSourceTestRunner)>($r5);

        $r7 = virtualinvoke $r6.<android.os.HandlerThread: android.os.Looper getLooper()>();

        if $r4 != $r7 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z0);

        return;
    }

    public void onLoadCompleted(int, androidx.media3.exoplayer.source.MediaSource$MediaPeriodId, androidx.media3.exoplayer.source.LoadEventInfo, androidx.media3.exoplayer.source.MediaLoadData)
    {
        androidx.media3.test.utils.MediaSourceTestRunner$MediaSourceListener r0;
        int i0;
        androidx.media3.exoplayer.source.MediaSource$MediaPeriodId r1;
        androidx.media3.exoplayer.source.LoadEventInfo r2;
        androidx.media3.exoplayer.source.MediaLoadData r3;
        android.os.Looper $r4, $r7;
        androidx.media3.test.utils.MediaSourceTestRunner $r5, $r8;
        android.os.HandlerThread $r6;
        java.util.concurrent.CopyOnWriteArrayList $r9;
        java.lang.Integer $r10;
        android.util.Pair $r11;
        boolean $z1;

        r0 := @this: androidx.media3.test.utils.MediaSourceTestRunner$MediaSourceListener;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.media3.exoplayer.source.MediaSource$MediaPeriodId;

        r2 := @parameter2: androidx.media3.exoplayer.source.LoadEventInfo;

        r3 := @parameter3: androidx.media3.exoplayer.source.MediaLoadData;

        $r4 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r5 = r0.<androidx.media3.test.utils.MediaSourceTestRunner$MediaSourceListener: androidx.media3.test.utils.MediaSourceTestRunner this$0>;

        $r6 = staticinvoke <androidx.media3.test.utils.MediaSourceTestRunner: android.os.HandlerThread access$100(androidx.media3.test.utils.MediaSourceTestRunner)>($r5);

        $r7 = virtualinvoke $r6.<android.os.HandlerThread: android.os.Looper getLooper()>();

        if $r4 != $r7 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z1);

        $r8 = r0.<androidx.media3.test.utils.MediaSourceTestRunner$MediaSourceListener: androidx.media3.test.utils.MediaSourceTestRunner this$0>;

        $r9 = staticinvoke <androidx.media3.test.utils.MediaSourceTestRunner: java.util.concurrent.CopyOnWriteArrayList access$300(androidx.media3.test.utils.MediaSourceTestRunner)>($r8);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r11 = staticinvoke <android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)>($r10, r1);

        virtualinvoke $r9.<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>($r11);

        return;
    }

    public void onLoadCanceled(int, androidx.media3.exoplayer.source.MediaSource$MediaPeriodId, androidx.media3.exoplayer.source.LoadEventInfo, androidx.media3.exoplayer.source.MediaLoadData)
    {
        androidx.media3.test.utils.MediaSourceTestRunner$MediaSourceListener r0;
        int i0;
        androidx.media3.exoplayer.source.MediaSource$MediaPeriodId r1;
        androidx.media3.exoplayer.source.LoadEventInfo r2;
        androidx.media3.exoplayer.source.MediaLoadData r3;
        android.os.Looper $r4, $r7;
        androidx.media3.test.utils.MediaSourceTestRunner $r5;
        android.os.HandlerThread $r6;
        boolean $z0;

        r0 := @this: androidx.media3.test.utils.MediaSourceTestRunner$MediaSourceListener;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.media3.exoplayer.source.MediaSource$MediaPeriodId;

        r2 := @parameter2: androidx.media3.exoplayer.source.LoadEventInfo;

        r3 := @parameter3: androidx.media3.exoplayer.source.MediaLoadData;

        $r4 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r5 = r0.<androidx.media3.test.utils.MediaSourceTestRunner$MediaSourceListener: androidx.media3.test.utils.MediaSourceTestRunner this$0>;

        $r6 = staticinvoke <androidx.media3.test.utils.MediaSourceTestRunner: android.os.HandlerThread access$100(androidx.media3.test.utils.MediaSourceTestRunner)>($r5);

        $r7 = virtualinvoke $r6.<android.os.HandlerThread: android.os.Looper getLooper()>();

        if $r4 != $r7 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z0);

        return;
    }

    public void onLoadError(int, androidx.media3.exoplayer.source.MediaSource$MediaPeriodId, androidx.media3.exoplayer.source.LoadEventInfo, androidx.media3.exoplayer.source.MediaLoadData, java.io.IOException, boolean)
    {
        androidx.media3.test.utils.MediaSourceTestRunner$MediaSourceListener r0;
        int i0;
        androidx.media3.exoplayer.source.MediaSource$MediaPeriodId r1;
        androidx.media3.exoplayer.source.LoadEventInfo r2;
        androidx.media3.exoplayer.source.MediaLoadData r3;
        java.io.IOException r4;
        boolean z0, $z1;
        android.os.Looper $r5, $r8;
        androidx.media3.test.utils.MediaSourceTestRunner $r6;
        android.os.HandlerThread $r7;

        r0 := @this: androidx.media3.test.utils.MediaSourceTestRunner$MediaSourceListener;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.media3.exoplayer.source.MediaSource$MediaPeriodId;

        r2 := @parameter2: androidx.media3.exoplayer.source.LoadEventInfo;

        r3 := @parameter3: androidx.media3.exoplayer.source.MediaLoadData;

        r4 := @parameter4: java.io.IOException;

        z0 := @parameter5: boolean;

        $r5 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r6 = r0.<androidx.media3.test.utils.MediaSourceTestRunner$MediaSourceListener: androidx.media3.test.utils.MediaSourceTestRunner this$0>;

        $r7 = staticinvoke <androidx.media3.test.utils.MediaSourceTestRunner: android.os.HandlerThread access$100(androidx.media3.test.utils.MediaSourceTestRunner)>($r6);

        $r8 = virtualinvoke $r7.<android.os.HandlerThread: android.os.Looper getLooper()>();

        if $r5 != $r8 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z1);

        return;
    }

    public void onUpstreamDiscarded(int, androidx.media3.exoplayer.source.MediaSource$MediaPeriodId, androidx.media3.exoplayer.source.MediaLoadData)
    {
        androidx.media3.test.utils.MediaSourceTestRunner$MediaSourceListener r0;
        int i0;
        androidx.media3.exoplayer.source.MediaSource$MediaPeriodId r1;
        androidx.media3.exoplayer.source.MediaLoadData r2;
        android.os.Looper $r3, $r6;
        androidx.media3.test.utils.MediaSourceTestRunner $r4;
        android.os.HandlerThread $r5;
        boolean $z0;

        r0 := @this: androidx.media3.test.utils.MediaSourceTestRunner$MediaSourceListener;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.media3.exoplayer.source.MediaSource$MediaPeriodId;

        r2 := @parameter2: androidx.media3.exoplayer.source.MediaLoadData;

        $r3 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r4 = r0.<androidx.media3.test.utils.MediaSourceTestRunner$MediaSourceListener: androidx.media3.test.utils.MediaSourceTestRunner this$0>;

        $r5 = staticinvoke <androidx.media3.test.utils.MediaSourceTestRunner: android.os.HandlerThread access$100(androidx.media3.test.utils.MediaSourceTestRunner)>($r4);

        $r6 = virtualinvoke $r5.<android.os.HandlerThread: android.os.Looper getLooper()>();

        if $r3 != $r6 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z0);

        return;
    }

    public void onDownstreamFormatChanged(int, androidx.media3.exoplayer.source.MediaSource$MediaPeriodId, androidx.media3.exoplayer.source.MediaLoadData)
    {
        androidx.media3.test.utils.MediaSourceTestRunner$MediaSourceListener r0;
        int i0;
        androidx.media3.exoplayer.source.MediaSource$MediaPeriodId r1;
        androidx.media3.exoplayer.source.MediaLoadData r2;
        android.os.Looper $r3, $r6;
        androidx.media3.test.utils.MediaSourceTestRunner $r4;
        android.os.HandlerThread $r5;
        boolean $z0;

        r0 := @this: androidx.media3.test.utils.MediaSourceTestRunner$MediaSourceListener;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.media3.exoplayer.source.MediaSource$MediaPeriodId;

        r2 := @parameter2: androidx.media3.exoplayer.source.MediaLoadData;

        $r3 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r4 = r0.<androidx.media3.test.utils.MediaSourceTestRunner$MediaSourceListener: androidx.media3.test.utils.MediaSourceTestRunner this$0>;

        $r5 = staticinvoke <androidx.media3.test.utils.MediaSourceTestRunner: android.os.HandlerThread access$100(androidx.media3.test.utils.MediaSourceTestRunner)>($r4);

        $r6 = virtualinvoke $r5.<android.os.HandlerThread: android.os.Looper getLooper()>();

        if $r3 != $r6 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z0);

        return;
    }

    void <init>(androidx.media3.test.utils.MediaSourceTestRunner, androidx.media3.test.utils.MediaSourceTestRunner$1)
    {
        androidx.media3.test.utils.MediaSourceTestRunner$MediaSourceListener r0;
        androidx.media3.test.utils.MediaSourceTestRunner r1;
        androidx.media3.test.utils.MediaSourceTestRunner$1 r2;

        r0 := @this: androidx.media3.test.utils.MediaSourceTestRunner$MediaSourceListener;

        r1 := @parameter0: androidx.media3.test.utils.MediaSourceTestRunner;

        r2 := @parameter1: androidx.media3.test.utils.MediaSourceTestRunner$1;

        specialinvoke r0.<androidx.media3.test.utils.MediaSourceTestRunner$MediaSourceListener: void <init>(androidx.media3.test.utils.MediaSourceTestRunner)>(r1);

        return;
    }

