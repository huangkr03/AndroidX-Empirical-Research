io.grpc.okhttp.ExceptionHandlingFrameWriter
<io.grpc.okhttp.ExceptionHandlingFrameWriter: java.util.logging.Logger log>
<io.grpc.okhttp.ExceptionHandlingFrameWriter: io.grpc.okhttp.OkHttpFrameLogger frameLogger>
<io.grpc.okhttp.ExceptionHandlingFrameWriter: io.grpc.okhttp.internal.framed.FrameWriter frameWriter>
<io.grpc.okhttp.ExceptionHandlingFrameWriter: io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler transportExceptionHandler>
    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        $r0 = class "Lio/grpc/okhttp/OkHttpClientTransport;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <io.grpc.okhttp.ExceptionHandlingFrameWriter: java.util.logging.Logger log> = $r2;

        return;
    }

    void <init>(io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler, io.grpc.okhttp.internal.framed.FrameWriter)
    {
        io.grpc.okhttp.ExceptionHandlingFrameWriter $r0;
        io.grpc.okhttp.internal.framed.FrameWriter $r1;
        java.util.logging.Level $r2;
        io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler $r3;
        io.grpc.okhttp.OkHttpFrameLogger $r4;
        java.lang.Object $r5;

        $r0 := @this: io.grpc.okhttp.ExceptionHandlingFrameWriter;

        $r3 := @parameter0: io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler;

        $r1 := @parameter1: io.grpc.okhttp.internal.framed.FrameWriter;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r4 = new io.grpc.okhttp.OkHttpFrameLogger;

        $r2 = <java.util.logging.Level: java.util.logging.Level FINE>;

        specialinvoke $r4.<io.grpc.okhttp.OkHttpFrameLogger: void <init>(java.util.logging.Level,java.lang.Class)>($r2, class "Lio/grpc/okhttp/OkHttpClientTransport;");

        $r0.<io.grpc.okhttp.ExceptionHandlingFrameWriter: io.grpc.okhttp.OkHttpFrameLogger frameLogger> = $r4;

        $r5 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r3, "transportExceptionHandler");

        $r3 = (io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler) $r5;

        $r0.<io.grpc.okhttp.ExceptionHandlingFrameWriter: io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler transportExceptionHandler> = $r3;

        $r5 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r1, "frameWriter");

        $r1 = (io.grpc.okhttp.internal.framed.FrameWriter) $r5;

        $r0.<io.grpc.okhttp.ExceptionHandlingFrameWriter: io.grpc.okhttp.internal.framed.FrameWriter frameWriter> = $r1;

        return;
    }

    static java.util.logging.Level getLogLevel(java.lang.Throwable)
    {
        java.lang.Throwable $r0;
        java.lang.Class $r1;
        boolean $z0;
        java.util.logging.Level r2;

        $r0 := @parameter0: java.lang.Throwable;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/io/IOException;");

        if $z0 == 0 goto label1;

        r2 = <java.util.logging.Level: java.util.logging.Level FINE>;

        return r2;

     label1:
        r2 = <java.util.logging.Level: java.util.logging.Level INFO>;

        return r2;
    }

    public void ackSettings(io.grpc.okhttp.internal.framed.Settings)
    {
        io.grpc.okhttp.ExceptionHandlingFrameWriter $r0;
        io.grpc.okhttp.OkHttpFrameLogger$Direction $r1;
        io.grpc.okhttp.internal.framed.Settings $r2;
        io.grpc.okhttp.OkHttpFrameLogger $r3;
        io.grpc.okhttp.internal.framed.FrameWriter $r4;
        java.lang.Throwable $r5;
        io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler $r6;

        $r0 := @this: io.grpc.okhttp.ExceptionHandlingFrameWriter;

        $r2 := @parameter0: io.grpc.okhttp.internal.framed.Settings;

        $r3 = $r0.<io.grpc.okhttp.ExceptionHandlingFrameWriter: io.grpc.okhttp.OkHttpFrameLogger frameLogger>;

        $r1 = <io.grpc.okhttp.OkHttpFrameLogger$Direction: io.grpc.okhttp.OkHttpFrameLogger$Direction OUTBOUND>;

        virtualinvoke $r3.<io.grpc.okhttp.OkHttpFrameLogger: void logSettingsAck(io.grpc.okhttp.OkHttpFrameLogger$Direction)>($r1);

        $r4 = $r0.<io.grpc.okhttp.ExceptionHandlingFrameWriter: io.grpc.okhttp.internal.framed.FrameWriter frameWriter>;

     label1:
        interfaceinvoke $r4.<io.grpc.okhttp.internal.framed.FrameWriter: void ackSettings(io.grpc.okhttp.internal.framed.Settings)>($r2);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        $r6 = $r0.<io.grpc.okhttp.ExceptionHandlingFrameWriter: io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler transportExceptionHandler>;

        interfaceinvoke $r6.<io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler: void onException(java.lang.Throwable)>($r5);

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void close()
    {
        io.grpc.okhttp.ExceptionHandlingFrameWriter $r0;
        java.util.logging.Logger $r1;
        java.util.logging.Level $r2;
        io.grpc.okhttp.internal.framed.FrameWriter $r3;
        java.lang.Throwable $r4;

        $r0 := @this: io.grpc.okhttp.ExceptionHandlingFrameWriter;

        $r3 = $r0.<io.grpc.okhttp.ExceptionHandlingFrameWriter: io.grpc.okhttp.internal.framed.FrameWriter frameWriter>;

     label1:
        interfaceinvoke $r3.<io.grpc.okhttp.internal.framed.FrameWriter: void close()>();

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r1 = <io.grpc.okhttp.ExceptionHandlingFrameWriter: java.util.logging.Logger log>;

        $r2 = staticinvoke <io.grpc.okhttp.ExceptionHandlingFrameWriter: java.util.logging.Level getLogLevel(java.lang.Throwable)>($r4);

        virtualinvoke $r1.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r2, "io.grpc.okhttp.ExceptionHandlingFrameWriter", "close", "Failed closing connection", $r4);

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void connectionPreface()
    {
        io.grpc.okhttp.ExceptionHandlingFrameWriter $r0;
        io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler $r1;
        io.grpc.okhttp.internal.framed.FrameWriter $r2;
        java.lang.Throwable $r3;

        $r0 := @this: io.grpc.okhttp.ExceptionHandlingFrameWriter;

        $r2 = $r0.<io.grpc.okhttp.ExceptionHandlingFrameWriter: io.grpc.okhttp.internal.framed.FrameWriter frameWriter>;

     label1:
        interfaceinvoke $r2.<io.grpc.okhttp.internal.framed.FrameWriter: void connectionPreface()>();

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r1 = $r0.<io.grpc.okhttp.ExceptionHandlingFrameWriter: io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler transportExceptionHandler>;

        interfaceinvoke $r1.<io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler: void onException(java.lang.Throwable)>($r3);

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void data(boolean, int, okio.Buffer, int)
    {
        io.grpc.okhttp.ExceptionHandlingFrameWriter $r0;
        okio.Buffer $r1, $r3;
        int $i0, $i1;
        io.grpc.okhttp.OkHttpFrameLogger$Direction $r2;
        boolean $z0;
        io.grpc.okhttp.OkHttpFrameLogger $r4;
        io.grpc.okhttp.internal.framed.FrameWriter $r5;
        java.lang.Throwable $r6;
        io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler $r7;

        $r0 := @this: io.grpc.okhttp.ExceptionHandlingFrameWriter;

        $z0 := @parameter0: boolean;

        $i1 := @parameter1: int;

        $r1 := @parameter2: okio.Buffer;

        $i0 := @parameter3: int;

        $r4 = $r0.<io.grpc.okhttp.ExceptionHandlingFrameWriter: io.grpc.okhttp.OkHttpFrameLogger frameLogger>;

        $r2 = <io.grpc.okhttp.OkHttpFrameLogger$Direction: io.grpc.okhttp.OkHttpFrameLogger$Direction OUTBOUND>;

        $r3 = virtualinvoke $r1.<okio.Buffer: okio.Buffer buffer()>();

        virtualinvoke $r4.<io.grpc.okhttp.OkHttpFrameLogger: void logData(io.grpc.okhttp.OkHttpFrameLogger$Direction,int,okio.Buffer,int,boolean)>($r2, $i1, $r3, $i0, $z0);

        $r5 = $r0.<io.grpc.okhttp.ExceptionHandlingFrameWriter: io.grpc.okhttp.internal.framed.FrameWriter frameWriter>;

     label1:
        interfaceinvoke $r5.<io.grpc.okhttp.internal.framed.FrameWriter: void data(boolean,int,okio.Buffer,int)>($z0, $i1, $r1, $i0);

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        $r7 = $r0.<io.grpc.okhttp.ExceptionHandlingFrameWriter: io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler transportExceptionHandler>;

        interfaceinvoke $r7.<io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler: void onException(java.lang.Throwable)>($r6);

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void flush()
    {
        io.grpc.okhttp.ExceptionHandlingFrameWriter $r0;
        io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler $r1;
        io.grpc.okhttp.internal.framed.FrameWriter $r2;
        java.lang.Throwable $r3;

        $r0 := @this: io.grpc.okhttp.ExceptionHandlingFrameWriter;

        $r2 = $r0.<io.grpc.okhttp.ExceptionHandlingFrameWriter: io.grpc.okhttp.internal.framed.FrameWriter frameWriter>;

     label1:
        interfaceinvoke $r2.<io.grpc.okhttp.internal.framed.FrameWriter: void flush()>();

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r1 = $r0.<io.grpc.okhttp.ExceptionHandlingFrameWriter: io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler transportExceptionHandler>;

        interfaceinvoke $r1.<io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler: void onException(java.lang.Throwable)>($r3);

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void goAway(int, io.grpc.okhttp.internal.framed.ErrorCode, byte[])
    {
        io.grpc.okhttp.ExceptionHandlingFrameWriter $r0;
        byte[] $r1;
        io.grpc.okhttp.OkHttpFrameLogger$Direction $r2;
        okio.ByteString $r3;
        int $i0;
        io.grpc.okhttp.internal.framed.ErrorCode $r4;
        io.grpc.okhttp.OkHttpFrameLogger $r5;
        io.grpc.okhttp.internal.framed.FrameWriter $r6;
        java.lang.Throwable $r7;
        io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler $r8;

        $r0 := @this: io.grpc.okhttp.ExceptionHandlingFrameWriter;

        $i0 := @parameter0: int;

        $r4 := @parameter1: io.grpc.okhttp.internal.framed.ErrorCode;

        $r1 := @parameter2: byte[];

        $r5 = $r0.<io.grpc.okhttp.ExceptionHandlingFrameWriter: io.grpc.okhttp.OkHttpFrameLogger frameLogger>;

        $r2 = <io.grpc.okhttp.OkHttpFrameLogger$Direction: io.grpc.okhttp.OkHttpFrameLogger$Direction OUTBOUND>;

        $r3 = staticinvoke <okio.ByteString: okio.ByteString of(byte[])>($r1);

        virtualinvoke $r5.<io.grpc.okhttp.OkHttpFrameLogger: void logGoAway(io.grpc.okhttp.OkHttpFrameLogger$Direction,int,io.grpc.okhttp.internal.framed.ErrorCode,okio.ByteString)>($r2, $i0, $r4, $r3);

        $r6 = $r0.<io.grpc.okhttp.ExceptionHandlingFrameWriter: io.grpc.okhttp.internal.framed.FrameWriter frameWriter>;

     label1:
        interfaceinvoke $r6.<io.grpc.okhttp.internal.framed.FrameWriter: void goAway(int,io.grpc.okhttp.internal.framed.ErrorCode,byte[])>($i0, $r4, $r1);

     label2:
        $r6 = $r0.<io.grpc.okhttp.ExceptionHandlingFrameWriter: io.grpc.okhttp.internal.framed.FrameWriter frameWriter>;

     label3:
        interfaceinvoke $r6.<io.grpc.okhttp.internal.framed.FrameWriter: void flush()>();

     label4:
        return;

     label5:
        $r7 := @caughtexception;

        $r8 = $r0.<io.grpc.okhttp.ExceptionHandlingFrameWriter: io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler transportExceptionHandler>;

        interfaceinvoke $r8.<io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler: void onException(java.lang.Throwable)>($r7);

        return;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.io.IOException from label3 to label4 with label5;
    }

    public int maxDataLength()
    {
        io.grpc.okhttp.ExceptionHandlingFrameWriter $r0;
        int $i0;
        io.grpc.okhttp.internal.framed.FrameWriter $r1;

        $r0 := @this: io.grpc.okhttp.ExceptionHandlingFrameWriter;

        $r1 = $r0.<io.grpc.okhttp.ExceptionHandlingFrameWriter: io.grpc.okhttp.internal.framed.FrameWriter frameWriter>;

        $i0 = interfaceinvoke $r1.<io.grpc.okhttp.internal.framed.FrameWriter: int maxDataLength()>();

        return $i0;
    }

    public void ping(boolean, int, int)
    {
        io.grpc.okhttp.ExceptionHandlingFrameWriter $r0;
        int $i0, $i1;
        boolean $z0;
        io.grpc.okhttp.OkHttpFrameLogger $r1;
        io.grpc.okhttp.OkHttpFrameLogger$Direction $r2;
        long $l2, $l3;
        io.grpc.okhttp.internal.framed.FrameWriter $r3;
        java.lang.Throwable $r4;
        io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler $r5;

        $r0 := @this: io.grpc.okhttp.ExceptionHandlingFrameWriter;

        $z0 := @parameter0: boolean;

        $i1 := @parameter1: int;

        $i0 := @parameter2: int;

        if $z0 == 0 goto label1;

        $r1 = $r0.<io.grpc.okhttp.ExceptionHandlingFrameWriter: io.grpc.okhttp.OkHttpFrameLogger frameLogger>;

        $r2 = <io.grpc.okhttp.OkHttpFrameLogger$Direction: io.grpc.okhttp.OkHttpFrameLogger$Direction OUTBOUND>;

        $l2 = (long) $i1;

        $l2 = $l2 << 32;

        $l3 = (long) $i0;

        $l3 = 4294967295L & $l3;

        $l2 = $l3 | $l2;

        virtualinvoke $r1.<io.grpc.okhttp.OkHttpFrameLogger: void logPingAck(io.grpc.okhttp.OkHttpFrameLogger$Direction,long)>($r2, $l2);

        goto label2;

     label1:
        $r1 = $r0.<io.grpc.okhttp.ExceptionHandlingFrameWriter: io.grpc.okhttp.OkHttpFrameLogger frameLogger>;

        $r2 = <io.grpc.okhttp.OkHttpFrameLogger$Direction: io.grpc.okhttp.OkHttpFrameLogger$Direction OUTBOUND>;

        $l2 = (long) $i1;

        $l2 = $l2 << 32;

        $l3 = (long) $i0;

        $l3 = 4294967295L & $l3;

        $l2 = $l3 | $l2;

        virtualinvoke $r1.<io.grpc.okhttp.OkHttpFrameLogger: void logPing(io.grpc.okhttp.OkHttpFrameLogger$Direction,long)>($r2, $l2);

     label2:
        $r3 = $r0.<io.grpc.okhttp.ExceptionHandlingFrameWriter: io.grpc.okhttp.internal.framed.FrameWriter frameWriter>;

     label3:
        interfaceinvoke $r3.<io.grpc.okhttp.internal.framed.FrameWriter: void ping(boolean,int,int)>($z0, $i1, $i0);

     label4:
        return;

     label5:
        $r4 := @caughtexception;

        $r5 = $r0.<io.grpc.okhttp.ExceptionHandlingFrameWriter: io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler transportExceptionHandler>;

        interfaceinvoke $r5.<io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler: void onException(java.lang.Throwable)>($r4);

        return;

        catch java.io.IOException from label3 to label4 with label5;
    }

    public void rstStream(int, io.grpc.okhttp.internal.framed.ErrorCode)
    {
        io.grpc.okhttp.ExceptionHandlingFrameWriter $r0;
        io.grpc.okhttp.OkHttpFrameLogger$Direction $r1;
        int $i0;
        io.grpc.okhttp.internal.framed.ErrorCode $r2;
        io.grpc.okhttp.OkHttpFrameLogger $r3;
        io.grpc.okhttp.internal.framed.FrameWriter $r4;
        java.lang.Throwable $r5;
        io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler $r6;

        $r0 := @this: io.grpc.okhttp.ExceptionHandlingFrameWriter;

        $i0 := @parameter0: int;

        $r2 := @parameter1: io.grpc.okhttp.internal.framed.ErrorCode;

        $r3 = $r0.<io.grpc.okhttp.ExceptionHandlingFrameWriter: io.grpc.okhttp.OkHttpFrameLogger frameLogger>;

        $r1 = <io.grpc.okhttp.OkHttpFrameLogger$Direction: io.grpc.okhttp.OkHttpFrameLogger$Direction OUTBOUND>;

        virtualinvoke $r3.<io.grpc.okhttp.OkHttpFrameLogger: void logRstStream(io.grpc.okhttp.OkHttpFrameLogger$Direction,int,io.grpc.okhttp.internal.framed.ErrorCode)>($r1, $i0, $r2);

        $r4 = $r0.<io.grpc.okhttp.ExceptionHandlingFrameWriter: io.grpc.okhttp.internal.framed.FrameWriter frameWriter>;

     label1:
        interfaceinvoke $r4.<io.grpc.okhttp.internal.framed.FrameWriter: void rstStream(int,io.grpc.okhttp.internal.framed.ErrorCode)>($i0, $r2);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        $r6 = $r0.<io.grpc.okhttp.ExceptionHandlingFrameWriter: io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler transportExceptionHandler>;

        interfaceinvoke $r6.<io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler: void onException(java.lang.Throwable)>($r5);

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void settings(io.grpc.okhttp.internal.framed.Settings)
    {
        io.grpc.okhttp.ExceptionHandlingFrameWriter $r0;
        io.grpc.okhttp.OkHttpFrameLogger$Direction $r1;
        io.grpc.okhttp.internal.framed.Settings $r2;
        io.grpc.okhttp.OkHttpFrameLogger $r3;
        io.grpc.okhttp.internal.framed.FrameWriter $r4;
        java.lang.Throwable $r5;
        io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler $r6;

        $r0 := @this: io.grpc.okhttp.ExceptionHandlingFrameWriter;

        $r2 := @parameter0: io.grpc.okhttp.internal.framed.Settings;

        $r3 = $r0.<io.grpc.okhttp.ExceptionHandlingFrameWriter: io.grpc.okhttp.OkHttpFrameLogger frameLogger>;

        $r1 = <io.grpc.okhttp.OkHttpFrameLogger$Direction: io.grpc.okhttp.OkHttpFrameLogger$Direction OUTBOUND>;

        virtualinvoke $r3.<io.grpc.okhttp.OkHttpFrameLogger: void logSettings(io.grpc.okhttp.OkHttpFrameLogger$Direction,io.grpc.okhttp.internal.framed.Settings)>($r1, $r2);

        $r4 = $r0.<io.grpc.okhttp.ExceptionHandlingFrameWriter: io.grpc.okhttp.internal.framed.FrameWriter frameWriter>;

     label1:
        interfaceinvoke $r4.<io.grpc.okhttp.internal.framed.FrameWriter: void settings(io.grpc.okhttp.internal.framed.Settings)>($r2);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        $r6 = $r0.<io.grpc.okhttp.ExceptionHandlingFrameWriter: io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler transportExceptionHandler>;

        interfaceinvoke $r6.<io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler: void onException(java.lang.Throwable)>($r5);

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void synStream(boolean, boolean, int, int, java.util.List)
    {
        io.grpc.okhttp.ExceptionHandlingFrameWriter $r0;
        int $i0, $i1;
        java.util.List $r1;
        io.grpc.okhttp.internal.framed.FrameWriter $r2;
        boolean $z0, $z1;
        java.lang.Throwable $r3;
        io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler $r4;

        $r0 := @this: io.grpc.okhttp.ExceptionHandlingFrameWriter;

        $z0 := @parameter0: boolean;

        $z1 := @parameter1: boolean;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r1 := @parameter4: java.util.List;

        $r2 = $r0.<io.grpc.okhttp.ExceptionHandlingFrameWriter: io.grpc.okhttp.internal.framed.FrameWriter frameWriter>;

     label1:
        interfaceinvoke $r2.<io.grpc.okhttp.internal.framed.FrameWriter: void synStream(boolean,boolean,int,int,java.util.List)>($z0, $z1, $i0, $i1, $r1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = $r0.<io.grpc.okhttp.ExceptionHandlingFrameWriter: io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler transportExceptionHandler>;

        interfaceinvoke $r4.<io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler: void onException(java.lang.Throwable)>($r3);

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void windowUpdate(int, long)
    {
        io.grpc.okhttp.ExceptionHandlingFrameWriter $r0;
        io.grpc.okhttp.OkHttpFrameLogger$Direction $r1;
        int $i0;
        long $l1;
        io.grpc.okhttp.OkHttpFrameLogger $r2;
        io.grpc.okhttp.internal.framed.FrameWriter $r3;
        java.lang.Throwable $r4;
        io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler $r5;

        $r0 := @this: io.grpc.okhttp.ExceptionHandlingFrameWriter;

        $i0 := @parameter0: int;

        $l1 := @parameter1: long;

        $r2 = $r0.<io.grpc.okhttp.ExceptionHandlingFrameWriter: io.grpc.okhttp.OkHttpFrameLogger frameLogger>;

        $r1 = <io.grpc.okhttp.OkHttpFrameLogger$Direction: io.grpc.okhttp.OkHttpFrameLogger$Direction OUTBOUND>;

        virtualinvoke $r2.<io.grpc.okhttp.OkHttpFrameLogger: void logWindowsUpdate(io.grpc.okhttp.OkHttpFrameLogger$Direction,int,long)>($r1, $i0, $l1);

        $r3 = $r0.<io.grpc.okhttp.ExceptionHandlingFrameWriter: io.grpc.okhttp.internal.framed.FrameWriter frameWriter>;

     label1:
        interfaceinvoke $r3.<io.grpc.okhttp.internal.framed.FrameWriter: void windowUpdate(int,long)>($i0, $l1);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = $r0.<io.grpc.okhttp.ExceptionHandlingFrameWriter: io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler transportExceptionHandler>;

        interfaceinvoke $r5.<io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler: void onException(java.lang.Throwable)>($r4);

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler
<io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler: void onException(java.lang.Throwable)>
