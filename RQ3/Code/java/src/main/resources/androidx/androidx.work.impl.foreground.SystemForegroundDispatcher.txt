androidx.work.impl.foreground.SystemForegroundDispatcher
<androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.String TAG>
<androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.String KEY_NOTIFICATION>
<androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.String KEY_NOTIFICATION_ID>
<androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.String KEY_FOREGROUND_SERVICE_TYPE>
<androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.String KEY_WORKSPEC_ID>
<androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.String KEY_GENERATION>
<androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.String ACTION_START_FOREGROUND>
<androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.String ACTION_NOTIFY>
<androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.String ACTION_CANCEL_WORK>
<androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.String ACTION_STOP_FOREGROUND>
<androidx.work.impl.foreground.SystemForegroundDispatcher: android.content.Context mContext>
<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.WorkManagerImpl mWorkManagerImpl>
<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.utils.taskexecutor.TaskExecutor mTaskExecutor>
<androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.Object mLock>
<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.model.WorkGenerationalId mCurrentForegroundId>
<androidx.work.impl.foreground.SystemForegroundDispatcher: java.util.Map mForegroundInfoById>
<androidx.work.impl.foreground.SystemForegroundDispatcher: java.util.Map mWorkSpecById>
<androidx.work.impl.foreground.SystemForegroundDispatcher: java.util.Set mTrackedWorkSpecs>
<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.constraints.WorkConstraintsTracker mConstraintsTracker>
<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.foreground.SystemForegroundDispatcher$Callback mCallback>
    void <init>(android.content.Context)
    {
        androidx.work.impl.foreground.SystemForegroundDispatcher r0;
        android.content.Context r1, $r3;
        java.lang.Object $r2;
        androidx.work.impl.WorkManagerImpl $r4, $r5, $r11, $r13;
        androidx.work.impl.utils.taskexecutor.TaskExecutor $r6;
        java.util.LinkedHashMap $r7;
        java.util.HashSet $r8;
        java.util.HashMap $r9;
        androidx.work.impl.constraints.WorkConstraintsTrackerImpl $r10;
        androidx.work.impl.constraints.trackers.Trackers $r12;
        androidx.work.impl.Processor $r14;

        r0 := @this: androidx.work.impl.foreground.SystemForegroundDispatcher;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: android.content.Context mContext> = r1;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.Object mLock> = $r2;

        $r3 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: android.content.Context mContext>;

        $r4 = staticinvoke <androidx.work.impl.WorkManagerImpl: androidx.work.impl.WorkManagerImpl getInstance(android.content.Context)>($r3);

        r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.WorkManagerImpl mWorkManagerImpl> = $r4;

        $r5 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.WorkManagerImpl mWorkManagerImpl>;

        $r6 = virtualinvoke $r5.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.utils.taskexecutor.TaskExecutor getWorkTaskExecutor()>();

        r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.utils.taskexecutor.TaskExecutor mTaskExecutor> = $r6;

        r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.model.WorkGenerationalId mCurrentForegroundId> = null;

        $r7 = new java.util.LinkedHashMap;

        specialinvoke $r7.<java.util.LinkedHashMap: void <init>()>();

        r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.util.Map mForegroundInfoById> = $r7;

        $r8 = new java.util.HashSet;

        specialinvoke $r8.<java.util.HashSet: void <init>()>();

        r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.util.Set mTrackedWorkSpecs> = $r8;

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.util.Map mWorkSpecById> = $r9;

        $r10 = new androidx.work.impl.constraints.WorkConstraintsTrackerImpl;

        $r11 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.WorkManagerImpl mWorkManagerImpl>;

        $r12 = virtualinvoke $r11.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.constraints.trackers.Trackers getTrackers()>();

        specialinvoke $r10.<androidx.work.impl.constraints.WorkConstraintsTrackerImpl: void <init>(androidx.work.impl.constraints.trackers.Trackers,androidx.work.impl.constraints.WorkConstraintsCallback)>($r12, r0);

        r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.constraints.WorkConstraintsTracker mConstraintsTracker> = $r10;

        $r13 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.WorkManagerImpl mWorkManagerImpl>;

        $r14 = virtualinvoke $r13.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.Processor getProcessor()>();

        virtualinvoke $r14.<androidx.work.impl.Processor: void addExecutionListener(androidx.work.impl.ExecutionListener)>(r0);

        return;
    }

    void <init>(android.content.Context, androidx.work.impl.WorkManagerImpl, androidx.work.impl.constraints.WorkConstraintsTracker)
    {
        androidx.work.impl.foreground.SystemForegroundDispatcher r0;
        android.content.Context r1;
        androidx.work.impl.WorkManagerImpl r2, $r5, $r10;
        androidx.work.impl.constraints.WorkConstraintsTracker r3;
        java.lang.Object $r4;
        androidx.work.impl.utils.taskexecutor.TaskExecutor $r6;
        java.util.LinkedHashMap $r7;
        java.util.HashSet $r8;
        java.util.HashMap $r9;
        androidx.work.impl.Processor $r11;

        r0 := @this: androidx.work.impl.foreground.SystemForegroundDispatcher;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: androidx.work.impl.WorkManagerImpl;

        r3 := @parameter2: androidx.work.impl.constraints.WorkConstraintsTracker;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: android.content.Context mContext> = r1;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.Object mLock> = $r4;

        r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.WorkManagerImpl mWorkManagerImpl> = r2;

        $r5 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.WorkManagerImpl mWorkManagerImpl>;

        $r6 = virtualinvoke $r5.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.utils.taskexecutor.TaskExecutor getWorkTaskExecutor()>();

        r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.utils.taskexecutor.TaskExecutor mTaskExecutor> = $r6;

        r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.model.WorkGenerationalId mCurrentForegroundId> = null;

        $r7 = new java.util.LinkedHashMap;

        specialinvoke $r7.<java.util.LinkedHashMap: void <init>()>();

        r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.util.Map mForegroundInfoById> = $r7;

        $r8 = new java.util.HashSet;

        specialinvoke $r8.<java.util.HashSet: void <init>()>();

        r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.util.Set mTrackedWorkSpecs> = $r8;

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.util.Map mWorkSpecById> = $r9;

        r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.constraints.WorkConstraintsTracker mConstraintsTracker> = r3;

        $r10 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.WorkManagerImpl mWorkManagerImpl>;

        $r11 = virtualinvoke $r10.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.Processor getProcessor()>();

        virtualinvoke $r11.<androidx.work.impl.Processor: void addExecutionListener(androidx.work.impl.ExecutionListener)>(r0);

        return;
    }

    public void onExecuted(androidx.work.impl.model.WorkGenerationalId, boolean)
    {
        androidx.work.impl.foreground.SystemForegroundDispatcher r0;
        androidx.work.impl.model.WorkGenerationalId r1, $r8, $r24;
        boolean z0, $z1, $z2, z3;
        androidx.work.ForegroundInfo r2, r38;
        java.lang.Object $r3, $r5, $r7, $r22, $r23, $r26, $r30, r35;
        java.util.Map $r4, $r6, $r19, $r20;
        androidx.work.Logger $r9;
        java.lang.StringBuilder $r10, $r12, $r13, $r14, $r15, $r16, $r17;
        java.lang.String $r11, $r18;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.util.Set $r21, $r31, $r33;
        androidx.work.impl.foreground.SystemForegroundDispatcher$Callback $r25, $r27, $r29, r41;
        android.app.Notification $r28;
        androidx.work.impl.constraints.WorkConstraintsTracker $r32;
        java.lang.Throwable $r34, r37;
        androidx.work.impl.model.WorkSpec r36;
        java.util.Iterator r39;
        java.util.Map$Entry r40;

        r0 := @this: androidx.work.impl.foreground.SystemForegroundDispatcher;

        r1 := @parameter0: androidx.work.impl.model.WorkGenerationalId;

        z0 := @parameter1: boolean;

        z3 = 0;

        $r3 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.Object mLock>;

        r35 = $r3;

        entermonitor $r3;

     label01:
        $r4 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.util.Map mWorkSpecById>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r36 = (androidx.work.impl.model.WorkSpec) $r5;

        if r36 == null goto label02;

        $r33 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.util.Set mTrackedWorkSpecs>;

        z3 = interfaceinvoke $r33.<java.util.Set: boolean remove(java.lang.Object)>(r36);

     label02:
        if z3 == 0 goto label03;

        $r32 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.constraints.WorkConstraintsTracker mConstraintsTracker>;

        $r31 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.util.Set mTrackedWorkSpecs>;

        interfaceinvoke $r32.<androidx.work.impl.constraints.WorkConstraintsTracker: void replace(java.lang.Iterable)>($r31);

     label03:
        exitmonitor r35;

     label04:
        goto label07;

     label05:
        $r34 := @caughtexception;

        r37 = $r34;

        exitmonitor r35;

     label06:
        throw r37;

     label07:
        $r6 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.util.Map mForegroundInfoById>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r38 = (androidx.work.ForegroundInfo) $r7;

        $r8 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.model.WorkGenerationalId mCurrentForegroundId>;

        $z1 = virtualinvoke r1.<androidx.work.impl.model.WorkGenerationalId: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label10;

        $r19 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.util.Map mForegroundInfoById>;

        $i3 = interfaceinvoke $r19.<java.util.Map: int size()>();

        if $i3 <= 0 goto label10;

        $r20 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.util.Map mForegroundInfoById>;

        $r21 = interfaceinvoke $r20.<java.util.Map: java.util.Set entrySet()>();

        r39 = interfaceinvoke $r21.<java.util.Set: java.util.Iterator iterator()>();

        $r22 = interfaceinvoke r39.<java.util.Iterator: java.lang.Object next()>();

        r40 = (java.util.Map$Entry) $r22;

     label08:
        $z2 = interfaceinvoke r39.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label09;

        $r30 = interfaceinvoke r39.<java.util.Iterator: java.lang.Object next()>();

        r40 = (java.util.Map$Entry) $r30;

        goto label08;

     label09:
        $r23 = interfaceinvoke r40.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r24 = (androidx.work.impl.model.WorkGenerationalId) $r23;

        r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.model.WorkGenerationalId mCurrentForegroundId> = $r24;

        $r25 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.foreground.SystemForegroundDispatcher$Callback mCallback>;

        if $r25 == null goto label10;

        $r26 = interfaceinvoke r40.<java.util.Map$Entry: java.lang.Object getValue()>();

        r2 = (androidx.work.ForegroundInfo) $r26;

        $r27 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.foreground.SystemForegroundDispatcher$Callback mCallback>;

        $i4 = virtualinvoke r2.<androidx.work.ForegroundInfo: int getNotificationId()>();

        $i5 = virtualinvoke r2.<androidx.work.ForegroundInfo: int getForegroundServiceType()>();

        $r28 = virtualinvoke r2.<androidx.work.ForegroundInfo: android.app.Notification getNotification()>();

        interfaceinvoke $r27.<androidx.work.impl.foreground.SystemForegroundDispatcher$Callback: void startForeground(int,int,android.app.Notification)>($i4, $i5, $r28);

        $r29 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.foreground.SystemForegroundDispatcher$Callback mCallback>;

        $i6 = virtualinvoke r2.<androidx.work.ForegroundInfo: int getNotificationId()>();

        interfaceinvoke $r29.<androidx.work.impl.foreground.SystemForegroundDispatcher$Callback: void cancelNotification(int)>($i6);

     label10:
        r41 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.foreground.SystemForegroundDispatcher$Callback mCallback>;

        if r38 == null goto label11;

        if r41 == null goto label11;

        $r9 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r11 = <androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.String TAG>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removing Notification (id: ");

        $i0 = virtualinvoke r38.<androidx.work.ForegroundInfo: int getNotificationId()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", workSpecId: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", notificationType: ");

        $i1 = virtualinvoke r38.<androidx.work.ForegroundInfo: int getForegroundServiceType()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r11, $r18);

        $i2 = virtualinvoke r38.<androidx.work.ForegroundInfo: int getNotificationId()>();

        interfaceinvoke r41.<androidx.work.impl.foreground.SystemForegroundDispatcher$Callback: void cancelNotification(int)>($i2);

     label11:
        return;

        catch java.lang.Throwable from label01 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
    }

    void setCallback(androidx.work.impl.foreground.SystemForegroundDispatcher$Callback)
    {
        androidx.work.impl.foreground.SystemForegroundDispatcher r0;
        androidx.work.impl.foreground.SystemForegroundDispatcher$Callback r1, $r2;
        androidx.work.Logger $r3;
        java.lang.String $r4;

        r0 := @this: androidx.work.impl.foreground.SystemForegroundDispatcher;

        r1 := @parameter0: androidx.work.impl.foreground.SystemForegroundDispatcher$Callback;

        $r2 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.foreground.SystemForegroundDispatcher$Callback mCallback>;

        if $r2 == null goto label1;

        $r3 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r4 = <androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.String TAG>;

        virtualinvoke $r3.<androidx.work.Logger: void error(java.lang.String,java.lang.String)>($r4, "A callback already exists.");

        return;

     label1:
        r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.foreground.SystemForegroundDispatcher$Callback mCallback> = r1;

        return;
    }

    void onStartCommand(android.content.Intent)
    {
        androidx.work.impl.foreground.SystemForegroundDispatcher r0;
        android.content.Intent r1;
        java.lang.String r2, $r3, $r4, $r5, $r6;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: androidx.work.impl.foreground.SystemForegroundDispatcher;

        r1 := @parameter0: android.content.Intent;

        r2 = virtualinvoke r1.<android.content.Intent: java.lang.String getAction()>();

        $r3 = "ACTION_START_FOREGROUND";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        specialinvoke r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: void handleStartForeground(android.content.Intent)>(r1);

        specialinvoke r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: void handleNotify(android.content.Intent)>(r1);

        goto label4;

     label1:
        $r4 = "ACTION_NOTIFY";

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label2;

        specialinvoke r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: void handleNotify(android.content.Intent)>(r1);

        goto label4;

     label2:
        $r5 = "ACTION_CANCEL_WORK";

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z2 == 0 goto label3;

        specialinvoke r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: void handleCancelWork(android.content.Intent)>(r1);

        goto label4;

     label3:
        $r6 = "ACTION_STOP_FOREGROUND";

        $z3 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z3 == 0 goto label4;

        virtualinvoke r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: void handleStop(android.content.Intent)>(r1);

     label4:
        return;
    }

    void onDestroy()
    {
        androidx.work.impl.foreground.SystemForegroundDispatcher r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r7;
        androidx.work.impl.constraints.WorkConstraintsTracker $r4;
        androidx.work.impl.WorkManagerImpl $r5;
        androidx.work.impl.Processor $r6;

        r0 := @this: androidx.work.impl.foreground.SystemForegroundDispatcher;

        r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.foreground.SystemForegroundDispatcher$Callback mCallback> = null;

        $r3 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.constraints.WorkConstraintsTracker mConstraintsTracker>;

        interfaceinvoke $r4.<androidx.work.impl.constraints.WorkConstraintsTracker: void reset()>();

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;

        r2 = $r7;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        $r5 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.WorkManagerImpl mWorkManagerImpl>;

        $r6 = virtualinvoke $r5.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.Processor getProcessor()>();

        virtualinvoke $r6.<androidx.work.impl.Processor: void removeExecutionListener(androidx.work.impl.ExecutionListener)>(r0);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void handleStartForeground(android.content.Intent)
    {
        androidx.work.impl.foreground.SystemForegroundDispatcher r0;
        android.content.Intent r1;
        java.lang.String r2, $r5, $r8;
        androidx.work.Logger $r3;
        java.lang.StringBuilder $r4, $r6, $r7;
        androidx.work.impl.foreground.SystemForegroundDispatcher$1 $r9;
        androidx.work.impl.utils.taskexecutor.TaskExecutor $r10;

        r0 := @this: androidx.work.impl.foreground.SystemForegroundDispatcher;

        r1 := @parameter0: android.content.Intent;

        $r3 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r5 = <androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.String TAG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Started foreground service ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<androidx.work.Logger: void info(java.lang.String,java.lang.String)>($r5, $r8);

        r2 = virtualinvoke r1.<android.content.Intent: java.lang.String getStringExtra(java.lang.String)>("KEY_WORKSPEC_ID");

        $r10 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.utils.taskexecutor.TaskExecutor mTaskExecutor>;

        $r9 = new androidx.work.impl.foreground.SystemForegroundDispatcher$1;

        specialinvoke $r9.<androidx.work.impl.foreground.SystemForegroundDispatcher$1: void <init>(androidx.work.impl.foreground.SystemForegroundDispatcher,java.lang.String)>(r0, r2);

        interfaceinvoke $r10.<androidx.work.impl.utils.taskexecutor.TaskExecutor: void executeOnTaskThread(java.lang.Runnable)>($r9);

        return;
    }

    private void handleNotify(android.content.Intent)
    {
        androidx.work.impl.foreground.SystemForegroundDispatcher r0;
        android.content.Intent r1;
        int i0, i1, i2, $i3, $i4, $i5, i6;
        java.lang.String r2, $r12, $r20;
        androidx.work.impl.model.WorkGenerationalId r3, $r8, $r25, $r29;
        android.app.Notification r4, $r33;
        androidx.work.ForegroundInfo r5, r7, $r22, r38;
        java.util.Map$Entry r6;
        android.os.Parcelable $r9;
        androidx.work.Logger $r10;
        java.lang.StringBuilder $r11, $r13, $r14, $r15, $r16, $r17, $r18, $r19;
        androidx.work.impl.foreground.SystemForegroundDispatcher$Callback $r21, $r26, $r32, $r36;
        java.util.Map $r23, $r27, $r30;
        java.util.Set $r28;
        boolean $z0;
        java.lang.Object $r31, $r34, $r35;
        java.util.Iterator r37;

        r0 := @this: androidx.work.impl.foreground.SystemForegroundDispatcher;

        r1 := @parameter0: android.content.Intent;

        i0 = virtualinvoke r1.<android.content.Intent: int getIntExtra(java.lang.String,int)>("KEY_NOTIFICATION_ID", 0);

        i1 = virtualinvoke r1.<android.content.Intent: int getIntExtra(java.lang.String,int)>("KEY_FOREGROUND_SERVICE_TYPE", 0);

        r2 = virtualinvoke r1.<android.content.Intent: java.lang.String getStringExtra(java.lang.String)>("KEY_WORKSPEC_ID");

        i2 = virtualinvoke r1.<android.content.Intent: int getIntExtra(java.lang.String,int)>("KEY_GENERATION", 0);

        $r8 = new androidx.work.impl.model.WorkGenerationalId;

        specialinvoke $r8.<androidx.work.impl.model.WorkGenerationalId: void <init>(java.lang.String,int)>(r2, i2);

        r3 = $r8;

        $r9 = virtualinvoke r1.<android.content.Intent: android.os.Parcelable getParcelableExtra(java.lang.String)>("KEY_NOTIFICATION");

        r4 = (android.app.Notification) $r9;

        $r10 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r12 = <androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.String TAG>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Notifying with (id:");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", workSpecId: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", notificationType :");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r12, $r20);

        if r4 == null goto label4;

        $r21 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.foreground.SystemForegroundDispatcher$Callback mCallback>;

        if $r21 == null goto label4;

        $r22 = new androidx.work.ForegroundInfo;

        specialinvoke $r22.<androidx.work.ForegroundInfo: void <init>(int,android.app.Notification,int)>(i0, r4, i1);

        r5 = $r22;

        $r23 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.util.Map mForegroundInfoById>;

        interfaceinvoke $r23.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r5);

        $r25 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.model.WorkGenerationalId mCurrentForegroundId>;

        if $r25 != null goto label1;

        r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.model.WorkGenerationalId mCurrentForegroundId> = r3;

        $r36 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.foreground.SystemForegroundDispatcher$Callback mCallback>;

        interfaceinvoke $r36.<androidx.work.impl.foreground.SystemForegroundDispatcher$Callback: void startForeground(int,int,android.app.Notification)>(i0, i1, r4);

        goto label4;

     label1:
        $r26 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.foreground.SystemForegroundDispatcher$Callback mCallback>;

        interfaceinvoke $r26.<androidx.work.impl.foreground.SystemForegroundDispatcher$Callback: void notify(int,android.app.Notification)>(i0, r4);

        if i1 == 0 goto label4;

        $i3 = <android.os.Build$VERSION: int SDK_INT>;

        if $i3 < 29 goto label4;

        i6 = 0;

        $r27 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.util.Map mForegroundInfoById>;

        $r28 = interfaceinvoke $r27.<java.util.Map: java.util.Set entrySet()>();

        r37 = interfaceinvoke $r28.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r37.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r34 = interfaceinvoke r37.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r34;

        $r35 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        r7 = (androidx.work.ForegroundInfo) $r35;

        $i5 = virtualinvoke r7.<androidx.work.ForegroundInfo: int getForegroundServiceType()>();

        i6 = i6 | $i5;

        goto label2;

     label3:
        $r30 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.util.Map mForegroundInfoById>;

        $r29 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.model.WorkGenerationalId mCurrentForegroundId>;

        $r31 = interfaceinvoke $r30.<java.util.Map: java.lang.Object get(java.lang.Object)>($r29);

        r38 = (androidx.work.ForegroundInfo) $r31;

        if r38 == null goto label4;

        $r32 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.foreground.SystemForegroundDispatcher$Callback mCallback>;

        $i4 = virtualinvoke r38.<androidx.work.ForegroundInfo: int getNotificationId()>();

        $r33 = virtualinvoke r38.<androidx.work.ForegroundInfo: android.app.Notification getNotification()>();

        interfaceinvoke $r32.<androidx.work.impl.foreground.SystemForegroundDispatcher$Callback: void startForeground(int,int,android.app.Notification)>($i4, i6, $r33);

     label4:
        return;
    }

    void handleStop(android.content.Intent)
    {
        androidx.work.impl.foreground.SystemForegroundDispatcher r0;
        android.content.Intent r1;
        androidx.work.Logger $r2;
        java.lang.String $r3;
        androidx.work.impl.foreground.SystemForegroundDispatcher$Callback $r4, $r5;

        r0 := @this: androidx.work.impl.foreground.SystemForegroundDispatcher;

        r1 := @parameter0: android.content.Intent;

        $r2 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r3 = <androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.String TAG>;

        virtualinvoke $r2.<androidx.work.Logger: void info(java.lang.String,java.lang.String)>($r3, "Stopping foreground service");

        $r4 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.foreground.SystemForegroundDispatcher$Callback mCallback>;

        if $r4 == null goto label1;

        $r5 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.foreground.SystemForegroundDispatcher$Callback mCallback>;

        interfaceinvoke $r5.<androidx.work.impl.foreground.SystemForegroundDispatcher$Callback: void stop()>();

     label1:
        return;
    }

    private void handleCancelWork(android.content.Intent)
    {
        androidx.work.impl.foreground.SystemForegroundDispatcher r0;
        android.content.Intent r1;
        java.lang.String r2, $r5, $r8;
        androidx.work.Logger $r3;
        java.lang.StringBuilder $r4, $r6, $r7;
        boolean $z0;
        androidx.work.impl.WorkManagerImpl $r9;
        java.util.UUID $r10;

        r0 := @this: androidx.work.impl.foreground.SystemForegroundDispatcher;

        r1 := @parameter0: android.content.Intent;

        $r3 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r5 = <androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.String TAG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Stopping foreground work for ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<androidx.work.Logger: void info(java.lang.String,java.lang.String)>($r5, $r8);

        r2 = virtualinvoke r1.<android.content.Intent: java.lang.String getStringExtra(java.lang.String)>("KEY_WORKSPEC_ID");

        if r2 == null goto label1;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z0 != 0 goto label1;

        $r9 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.WorkManagerImpl mWorkManagerImpl>;

        $r10 = staticinvoke <java.util.UUID: java.util.UUID fromString(java.lang.String)>(r2);

        virtualinvoke $r9.<androidx.work.impl.WorkManagerImpl: androidx.work.Operation cancelWorkById(java.util.UUID)>($r10);

     label1:
        return;
    }

    public void onAllConstraintsMet(java.util.List)
    {
        androidx.work.impl.foreground.SystemForegroundDispatcher r0;
        java.util.List r1;

        r0 := @this: androidx.work.impl.foreground.SystemForegroundDispatcher;

        r1 := @parameter0: java.util.List;

        return;
    }

    public void onAllConstraintsNotMet(java.util.List)
    {
        androidx.work.impl.foreground.SystemForegroundDispatcher r0;
        java.util.List r1;
        java.util.Iterator r2;
        androidx.work.impl.model.WorkSpec r3;
        java.lang.String r4, $r8, $r11;
        boolean $z0, $z1;
        java.lang.Object $r5;
        androidx.work.Logger $r6;
        java.lang.StringBuilder $r7, $r9, $r10;
        androidx.work.impl.WorkManagerImpl $r12;
        androidx.work.impl.model.WorkGenerationalId $r13;

        r0 := @this: androidx.work.impl.foreground.SystemForegroundDispatcher;

        r1 := @parameter0: java.util.List;

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.work.impl.model.WorkSpec) $r5;

        r4 = r3.<androidx.work.impl.model.WorkSpec: java.lang.String id>;

        $r6 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r8 = <androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.String TAG>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Constraints unmet for WorkSpec ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r8, $r11);

        $r12 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.WorkManagerImpl mWorkManagerImpl>;

        $r13 = staticinvoke <androidx.work.impl.model.WorkSpecKt: androidx.work.impl.model.WorkGenerationalId generationalId(androidx.work.impl.model.WorkSpec)>(r3);

        virtualinvoke $r12.<androidx.work.impl.WorkManagerImpl: void stopForegroundWork(androidx.work.impl.model.WorkGenerationalId)>($r13);

        goto label1;

     label2:
        return;
    }

    public static android.content.Intent createStartForegroundIntent(android.content.Context, androidx.work.impl.model.WorkGenerationalId, androidx.work.ForegroundInfo)
    {
        android.content.Context r0;
        androidx.work.impl.model.WorkGenerationalId r1;
        androidx.work.ForegroundInfo r2;
        android.content.Intent r3, $r4;
        java.lang.String $r6;
        int $i0, $i1, $i2;
        android.app.Notification $r11;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: androidx.work.impl.model.WorkGenerationalId;

        r2 := @parameter2: androidx.work.ForegroundInfo;

        $r4 = new android.content.Intent;

        specialinvoke $r4.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>(r0, class "Landroidx/work/impl/foreground/SystemForegroundService;");

        r3 = $r4;

        virtualinvoke r3.<android.content.Intent: android.content.Intent setAction(java.lang.String)>("ACTION_START_FOREGROUND");

        $r6 = virtualinvoke r1.<androidx.work.impl.model.WorkGenerationalId: java.lang.String getWorkSpecId()>();

        virtualinvoke r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("KEY_WORKSPEC_ID", $r6);

        $i0 = virtualinvoke r1.<androidx.work.impl.model.WorkGenerationalId: int getGeneration()>();

        virtualinvoke r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("KEY_GENERATION", $i0);

        $i1 = virtualinvoke r2.<androidx.work.ForegroundInfo: int getNotificationId()>();

        virtualinvoke r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("KEY_NOTIFICATION_ID", $i1);

        $i2 = virtualinvoke r2.<androidx.work.ForegroundInfo: int getForegroundServiceType()>();

        virtualinvoke r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("KEY_FOREGROUND_SERVICE_TYPE", $i2);

        $r11 = virtualinvoke r2.<androidx.work.ForegroundInfo: android.app.Notification getNotification()>();

        virtualinvoke r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("KEY_NOTIFICATION", $r11);

        return r3;
    }

    public static android.content.Intent createCancelWorkIntent(android.content.Context, java.lang.String)
    {
        android.content.Context r0;
        java.lang.String r1, $r8;
        android.content.Intent r2, $r3;
        java.lang.StringBuilder $r5, $r6, $r7;
        android.net.Uri $r9;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>(r0, class "Landroidx/work/impl/foreground/SystemForegroundService;");

        r2 = $r3;

        virtualinvoke r2.<android.content.Intent: android.content.Intent setAction(java.lang.String)>("ACTION_CANCEL_WORK");

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("workspec://");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r8);

        virtualinvoke r2.<android.content.Intent: android.content.Intent setData(android.net.Uri)>($r9);

        virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("KEY_WORKSPEC_ID", r1);

        return r2;
    }

    public static android.content.Intent createNotifyIntent(android.content.Context, androidx.work.impl.model.WorkGenerationalId, androidx.work.ForegroundInfo)
    {
        android.content.Context r0;
        androidx.work.impl.model.WorkGenerationalId r1;
        androidx.work.ForegroundInfo r2;
        android.content.Intent r3, $r4;
        int $i0, $i1, $i2;
        android.app.Notification $r8;
        java.lang.String $r10;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: androidx.work.impl.model.WorkGenerationalId;

        r2 := @parameter2: androidx.work.ForegroundInfo;

        $r4 = new android.content.Intent;

        specialinvoke $r4.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>(r0, class "Landroidx/work/impl/foreground/SystemForegroundService;");

        r3 = $r4;

        virtualinvoke r3.<android.content.Intent: android.content.Intent setAction(java.lang.String)>("ACTION_NOTIFY");

        $i0 = virtualinvoke r2.<androidx.work.ForegroundInfo: int getNotificationId()>();

        virtualinvoke r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("KEY_NOTIFICATION_ID", $i0);

        $i1 = virtualinvoke r2.<androidx.work.ForegroundInfo: int getForegroundServiceType()>();

        virtualinvoke r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("KEY_FOREGROUND_SERVICE_TYPE", $i1);

        $r8 = virtualinvoke r2.<androidx.work.ForegroundInfo: android.app.Notification getNotification()>();

        virtualinvoke r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("KEY_NOTIFICATION", $r8);

        $r10 = virtualinvoke r1.<androidx.work.impl.model.WorkGenerationalId: java.lang.String getWorkSpecId()>();

        virtualinvoke r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("KEY_WORKSPEC_ID", $r10);

        $i2 = virtualinvoke r1.<androidx.work.impl.model.WorkGenerationalId: int getGeneration()>();

        virtualinvoke r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("KEY_GENERATION", $i2);

        return r3;
    }

    public static android.content.Intent createStopForegroundIntent(android.content.Context)
    {
        android.content.Context r0;
        android.content.Intent r1, $r2;

        r0 := @parameter0: android.content.Context;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>(r0, class "Landroidx/work/impl/foreground/SystemForegroundService;");

        r1 = $r2;

        virtualinvoke r1.<android.content.Intent: android.content.Intent setAction(java.lang.String)>("ACTION_STOP_FOREGROUND");

        return r1;
    }

    static androidx.work.impl.WorkManagerImpl access$000(androidx.work.impl.foreground.SystemForegroundDispatcher)
    {
        androidx.work.impl.foreground.SystemForegroundDispatcher r0;
        androidx.work.impl.WorkManagerImpl $r1;

        r0 := @parameter0: androidx.work.impl.foreground.SystemForegroundDispatcher;

        $r1 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.WorkManagerImpl mWorkManagerImpl>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <androidx.work.Logger: java.lang.String tagWithPrefix(java.lang.String)>("SystemFgDispatcher");

        <androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.String TAG> = $r0;

        return;
    }

androidx.work.impl.foreground.SystemForegroundDispatcher$1
<androidx.work.impl.foreground.SystemForegroundDispatcher$1: java.lang.String val$workSpecId>
<androidx.work.impl.foreground.SystemForegroundDispatcher$1: androidx.work.impl.foreground.SystemForegroundDispatcher this$0>
    void <init>(androidx.work.impl.foreground.SystemForegroundDispatcher, java.lang.String)
    {
        androidx.work.impl.foreground.SystemForegroundDispatcher$1 r0;
        androidx.work.impl.foreground.SystemForegroundDispatcher r1;
        java.lang.String r2;

        r0 := @this: androidx.work.impl.foreground.SystemForegroundDispatcher$1;

        r1 := @parameter0: androidx.work.impl.foreground.SystemForegroundDispatcher;

        r2 := @parameter1: java.lang.String;

        r0.<androidx.work.impl.foreground.SystemForegroundDispatcher$1: androidx.work.impl.foreground.SystemForegroundDispatcher this$0> = r1;

        r0.<androidx.work.impl.foreground.SystemForegroundDispatcher$1: java.lang.String val$workSpecId> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        androidx.work.impl.foreground.SystemForegroundDispatcher$1 r0;
        androidx.work.impl.model.WorkSpec r1;
        java.lang.Object r2, $r9;
        java.lang.Throwable r3, $r20;
        androidx.work.impl.foreground.SystemForegroundDispatcher $r4, $r8, $r10, $r14, $r16, $r17;
        androidx.work.impl.WorkManagerImpl $r5;
        androidx.work.impl.Processor $r6;
        java.lang.String $r7;
        boolean $z0;
        java.util.Map $r11;
        androidx.work.impl.model.WorkGenerationalId $r12;
        java.util.Set $r15, $r18;
        androidx.work.impl.constraints.WorkConstraintsTracker $r19;

        r0 := @this: androidx.work.impl.foreground.SystemForegroundDispatcher$1;

        $r4 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher$1: androidx.work.impl.foreground.SystemForegroundDispatcher this$0>;

        $r5 = staticinvoke <androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.WorkManagerImpl access$000(androidx.work.impl.foreground.SystemForegroundDispatcher)>($r4);

        $r6 = virtualinvoke $r5.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.Processor getProcessor()>();

        $r7 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher$1: java.lang.String val$workSpecId>;

        r1 = virtualinvoke $r6.<androidx.work.impl.Processor: androidx.work.impl.model.WorkSpec getRunningWorkSpec(java.lang.String)>($r7);

        if r1 == null goto label5;

        $z0 = virtualinvoke r1.<androidx.work.impl.model.WorkSpec: boolean hasConstraints()>();

        if $z0 == 0 goto label5;

        $r8 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher$1: androidx.work.impl.foreground.SystemForegroundDispatcher this$0>;

        $r9 = $r8.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.Object mLock>;

        r2 = $r9;

        entermonitor $r9;

     label1:
        $r10 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher$1: androidx.work.impl.foreground.SystemForegroundDispatcher this$0>;

        $r11 = $r10.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.util.Map mWorkSpecById>;

        $r12 = staticinvoke <androidx.work.impl.model.WorkSpecKt: androidx.work.impl.model.WorkGenerationalId generationalId(androidx.work.impl.model.WorkSpec)>(r1);

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, r1);

        $r14 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher$1: androidx.work.impl.foreground.SystemForegroundDispatcher this$0>;

        $r15 = $r14.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.util.Set mTrackedWorkSpecs>;

        interfaceinvoke $r15.<java.util.Set: boolean add(java.lang.Object)>(r1);

        $r16 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher$1: androidx.work.impl.foreground.SystemForegroundDispatcher this$0>;

        $r19 = $r16.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.constraints.WorkConstraintsTracker mConstraintsTracker>;

        $r17 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher$1: androidx.work.impl.foreground.SystemForegroundDispatcher this$0>;

        $r18 = $r17.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.util.Set mTrackedWorkSpecs>;

        interfaceinvoke $r19.<androidx.work.impl.constraints.WorkConstraintsTracker: void replace(java.lang.Iterable)>($r18);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r20 := @caughtexception;

        r3 = $r20;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

androidx.work.impl.foreground.SystemForegroundDispatcher$Callback
<androidx.work.impl.foreground.SystemForegroundDispatcher$Callback: void startForeground(int,int,android.app.Notification)>
<androidx.work.impl.foreground.SystemForegroundDispatcher$Callback: void notify(int,android.app.Notification)>
<androidx.work.impl.foreground.SystemForegroundDispatcher$Callback: void cancelNotification(int)>
<androidx.work.impl.foreground.SystemForegroundDispatcher$Callback: void stop()>
