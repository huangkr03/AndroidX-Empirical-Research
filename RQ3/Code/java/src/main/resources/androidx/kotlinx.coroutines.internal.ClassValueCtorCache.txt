kotlinx.coroutines.internal.ClassValueCtorCache
<kotlinx.coroutines.internal.ClassValueCtorCache: kotlinx.coroutines.internal.ClassValueCtorCache INSTANCE>
<kotlinx.coroutines.internal.ClassValueCtorCache: kotlinx.coroutines.internal.ClassValueCtorCache$cache$1 cache>
    static void <clinit>()
    {
        kotlinx.coroutines.internal.ClassValueCtorCache $r0;
        kotlinx.coroutines.internal.ClassValueCtorCache$cache$1 $r1;

        $r0 = new kotlinx.coroutines.internal.ClassValueCtorCache;

        specialinvoke $r0.<kotlinx.coroutines.internal.ClassValueCtorCache: void <init>()>();

        <kotlinx.coroutines.internal.ClassValueCtorCache: kotlinx.coroutines.internal.ClassValueCtorCache INSTANCE> = $r0;

        $r1 = new kotlinx.coroutines.internal.ClassValueCtorCache$cache$1;

        specialinvoke $r1.<kotlinx.coroutines.internal.ClassValueCtorCache$cache$1: void <init>()>();

        <kotlinx.coroutines.internal.ClassValueCtorCache: kotlinx.coroutines.internal.ClassValueCtorCache$cache$1 cache> = $r1;

        return;
    }

    private void <init>()
    {
        kotlinx.coroutines.internal.ClassValueCtorCache $r0;

        $r0 := @this: kotlinx.coroutines.internal.ClassValueCtorCache;

        specialinvoke $r0.<kotlinx.coroutines.internal.CtorCache: void <init>()>();

        return;
    }

    public kotlin.jvm.functions.Function1 get(java.lang.Class)
    {
        kotlinx.coroutines.internal.ClassValueCtorCache $r0;
        java.lang.Object $r1;
        java.lang.Class $r2;
        kotlinx.coroutines.internal.ClassValueCtorCache$cache$1 $r3;
        kotlin.jvm.functions.Function1 $r4;

        $r0 := @this: kotlinx.coroutines.internal.ClassValueCtorCache;

        $r2 := @parameter0: java.lang.Class;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "key");

        $r3 = <kotlinx.coroutines.internal.ClassValueCtorCache: kotlinx.coroutines.internal.ClassValueCtorCache$cache$1 cache>;

        $r1 = virtualinvoke $r3.<kotlinx.coroutines.internal.ClassValueCtorCache$cache$1: java.lang.Object get(java.lang.Class)>($r2);

        $r4 = (kotlin.jvm.functions.Function1) $r1;

        return $r4;
    }

kotlinx.coroutines.internal.ClassValueCtorCache$cache$1
    void <init>()
    {
        kotlinx.coroutines.internal.ClassValueCtorCache$cache$1 $r0;

        $r0 := @this: kotlinx.coroutines.internal.ClassValueCtorCache$cache$1;

        specialinvoke $r0.<java.lang.ClassValue: void <init>()>();

        return;
    }

    public volatile java.lang.Object computeValue(java.lang.Class)
    {
        kotlinx.coroutines.internal.ClassValueCtorCache$cache$1 $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Class $r2;

        $r0 := @this: kotlinx.coroutines.internal.ClassValueCtorCache$cache$1;

        $r2 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke $r0.<kotlinx.coroutines.internal.ClassValueCtorCache$cache$1: kotlin.jvm.functions.Function1 computeValue(java.lang.Class)>($r2);

        return $r1;
    }

    protected kotlin.jvm.functions.Function1 computeValue(java.lang.Class)
    {
        kotlinx.coroutines.internal.ClassValueCtorCache$cache$1 $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Class $r2;

        $r0 := @this: kotlinx.coroutines.internal.ClassValueCtorCache$cache$1;

        $r2 := @parameter0: java.lang.Class;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r2, "null cannot be cast to non-null type java.lang.Class<out kotlin.Throwable>");

        $r1 = staticinvoke <kotlinx.coroutines.internal.ExceptionsConstructorKt: kotlin.jvm.functions.Function1 access$createConstructor(java.lang.Class)>($r2);

        return $r1;
    }

