androidx.camera.camera2.internal.CameraBurstCaptureCallback
<androidx.camera.camera2.internal.CameraBurstCaptureCallback: java.util.Map mCallbackMap>
<androidx.camera.camera2.internal.CameraBurstCaptureCallback: androidx.camera.camera2.internal.CameraBurstCaptureCallback$CaptureSequenceCallback mCaptureSequenceCallback>
    void <init>()
    {
        androidx.camera.camera2.internal.CameraBurstCaptureCallback r0;
        java.util.HashMap $r1;

        r0 := @this: androidx.camera.camera2.internal.CameraBurstCaptureCallback;

        specialinvoke r0.<android.hardware.camera2.CameraCaptureSession$CaptureCallback: void <init>()>();

        r0.<androidx.camera.camera2.internal.CameraBurstCaptureCallback: androidx.camera.camera2.internal.CameraBurstCaptureCallback$CaptureSequenceCallback mCaptureSequenceCallback> = null;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<androidx.camera.camera2.internal.CameraBurstCaptureCallback: java.util.Map mCallbackMap> = $r1;

        return;
    }

    public void onCaptureBufferLost(android.hardware.camera2.CameraCaptureSession, android.hardware.camera2.CaptureRequest, android.view.Surface, long)
    {
        androidx.camera.camera2.internal.CameraBurstCaptureCallback r0;
        android.hardware.camera2.CameraCaptureSession r1;
        android.hardware.camera2.CaptureRequest r2;
        android.view.Surface r3;
        long l0;
        java.util.Iterator r4;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r5;
        java.util.List $r6;
        boolean $z0;
        java.lang.Object $r7;

        r0 := @this: androidx.camera.camera2.internal.CameraBurstCaptureCallback;

        r1 := @parameter0: android.hardware.camera2.CameraCaptureSession;

        r2 := @parameter1: android.hardware.camera2.CaptureRequest;

        r3 := @parameter2: android.view.Surface;

        l0 := @parameter3: long;

        $r6 = specialinvoke r0.<androidx.camera.camera2.internal.CameraBurstCaptureCallback: java.util.List getCallbacks(android.hardware.camera2.CaptureRequest)>(r2);

        r4 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.hardware.camera2.CameraCaptureSession$CaptureCallback) $r7;

        staticinvoke <androidx.camera.camera2.internal.compat.ApiCompat$Api24Impl: void onCaptureBufferLost(android.hardware.camera2.CameraCaptureSession$CaptureCallback,android.hardware.camera2.CameraCaptureSession,android.hardware.camera2.CaptureRequest,android.view.Surface,long)>(r5, r1, r2, r3, l0);

        goto label1;

     label2:
        return;
    }

    public void onCaptureCompleted(android.hardware.camera2.CameraCaptureSession, android.hardware.camera2.CaptureRequest, android.hardware.camera2.TotalCaptureResult)
    {
        androidx.camera.camera2.internal.CameraBurstCaptureCallback r0;
        android.hardware.camera2.CameraCaptureSession r1;
        android.hardware.camera2.CaptureRequest r2;
        android.hardware.camera2.TotalCaptureResult r3;
        java.util.Iterator r4;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r5;
        java.util.List $r6;
        boolean $z0;
        java.lang.Object $r7;

        r0 := @this: androidx.camera.camera2.internal.CameraBurstCaptureCallback;

        r1 := @parameter0: android.hardware.camera2.CameraCaptureSession;

        r2 := @parameter1: android.hardware.camera2.CaptureRequest;

        r3 := @parameter2: android.hardware.camera2.TotalCaptureResult;

        $r6 = specialinvoke r0.<androidx.camera.camera2.internal.CameraBurstCaptureCallback: java.util.List getCallbacks(android.hardware.camera2.CaptureRequest)>(r2);

        r4 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.hardware.camera2.CameraCaptureSession$CaptureCallback) $r7;

        virtualinvoke r5.<android.hardware.camera2.CameraCaptureSession$CaptureCallback: void onCaptureCompleted(android.hardware.camera2.CameraCaptureSession,android.hardware.camera2.CaptureRequest,android.hardware.camera2.TotalCaptureResult)>(r1, r2, r3);

        goto label1;

     label2:
        return;
    }

    public void onCaptureFailed(android.hardware.camera2.CameraCaptureSession, android.hardware.camera2.CaptureRequest, android.hardware.camera2.CaptureFailure)
    {
        androidx.camera.camera2.internal.CameraBurstCaptureCallback r0;
        android.hardware.camera2.CameraCaptureSession r1;
        android.hardware.camera2.CaptureRequest r2;
        android.hardware.camera2.CaptureFailure r3;
        java.util.Iterator r4;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r5;
        java.util.List $r6;
        boolean $z0;
        java.lang.Object $r7;

        r0 := @this: androidx.camera.camera2.internal.CameraBurstCaptureCallback;

        r1 := @parameter0: android.hardware.camera2.CameraCaptureSession;

        r2 := @parameter1: android.hardware.camera2.CaptureRequest;

        r3 := @parameter2: android.hardware.camera2.CaptureFailure;

        $r6 = specialinvoke r0.<androidx.camera.camera2.internal.CameraBurstCaptureCallback: java.util.List getCallbacks(android.hardware.camera2.CaptureRequest)>(r2);

        r4 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.hardware.camera2.CameraCaptureSession$CaptureCallback) $r7;

        virtualinvoke r5.<android.hardware.camera2.CameraCaptureSession$CaptureCallback: void onCaptureFailed(android.hardware.camera2.CameraCaptureSession,android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureFailure)>(r1, r2, r3);

        goto label1;

     label2:
        return;
    }

    public void onCaptureProgressed(android.hardware.camera2.CameraCaptureSession, android.hardware.camera2.CaptureRequest, android.hardware.camera2.CaptureResult)
    {
        androidx.camera.camera2.internal.CameraBurstCaptureCallback r0;
        android.hardware.camera2.CameraCaptureSession r1;
        android.hardware.camera2.CaptureRequest r2;
        android.hardware.camera2.CaptureResult r3;
        java.util.Iterator r4;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r5;
        java.util.List $r6;
        boolean $z0;
        java.lang.Object $r7;

        r0 := @this: androidx.camera.camera2.internal.CameraBurstCaptureCallback;

        r1 := @parameter0: android.hardware.camera2.CameraCaptureSession;

        r2 := @parameter1: android.hardware.camera2.CaptureRequest;

        r3 := @parameter2: android.hardware.camera2.CaptureResult;

        $r6 = specialinvoke r0.<androidx.camera.camera2.internal.CameraBurstCaptureCallback: java.util.List getCallbacks(android.hardware.camera2.CaptureRequest)>(r2);

        r4 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.hardware.camera2.CameraCaptureSession$CaptureCallback) $r7;

        virtualinvoke r5.<android.hardware.camera2.CameraCaptureSession$CaptureCallback: void onCaptureProgressed(android.hardware.camera2.CameraCaptureSession,android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureResult)>(r1, r2, r3);

        goto label1;

     label2:
        return;
    }

    public void onCaptureStarted(android.hardware.camera2.CameraCaptureSession, android.hardware.camera2.CaptureRequest, long, long)
    {
        androidx.camera.camera2.internal.CameraBurstCaptureCallback r0;
        android.hardware.camera2.CameraCaptureSession r1;
        android.hardware.camera2.CaptureRequest r2;
        long l0, l1;
        java.util.Iterator r3;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r4;
        java.util.List $r5;
        boolean $z0;
        java.lang.Object $r6;

        r0 := @this: androidx.camera.camera2.internal.CameraBurstCaptureCallback;

        r1 := @parameter0: android.hardware.camera2.CameraCaptureSession;

        r2 := @parameter1: android.hardware.camera2.CaptureRequest;

        l0 := @parameter2: long;

        l1 := @parameter3: long;

        $r5 = specialinvoke r0.<androidx.camera.camera2.internal.CameraBurstCaptureCallback: java.util.List getCallbacks(android.hardware.camera2.CaptureRequest)>(r2);

        r3 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.hardware.camera2.CameraCaptureSession$CaptureCallback) $r6;

        virtualinvoke r4.<android.hardware.camera2.CameraCaptureSession$CaptureCallback: void onCaptureStarted(android.hardware.camera2.CameraCaptureSession,android.hardware.camera2.CaptureRequest,long,long)>(r1, r2, l0, l1);

        goto label1;

     label2:
        return;
    }

    public void onCaptureSequenceAborted(android.hardware.camera2.CameraCaptureSession, int)
    {
        androidx.camera.camera2.internal.CameraBurstCaptureCallback r0;
        android.hardware.camera2.CameraCaptureSession r1;
        int i0;
        java.util.Iterator r2, r4;
        java.util.List r3;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r5;
        java.util.Map $r6;
        java.util.Collection $r7;
        boolean $z0, $z1;
        androidx.camera.camera2.internal.CameraBurstCaptureCallback$CaptureSequenceCallback $r8, $r9;
        java.lang.Object $r10, $r11;

        r0 := @this: androidx.camera.camera2.internal.CameraBurstCaptureCallback;

        r1 := @parameter0: android.hardware.camera2.CameraCaptureSession;

        i0 := @parameter1: int;

        $r6 = r0.<androidx.camera.camera2.internal.CameraBurstCaptureCallback: java.util.Map mCallbackMap>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Collection values()>();

        r2 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r10 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.List) $r10;

        r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r11 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.hardware.camera2.CameraCaptureSession$CaptureCallback) $r11;

        virtualinvoke r5.<android.hardware.camera2.CameraCaptureSession$CaptureCallback: void onCaptureSequenceAborted(android.hardware.camera2.CameraCaptureSession,int)>(r1, i0);

        goto label2;

     label3:
        goto label1;

     label4:
        $r8 = r0.<androidx.camera.camera2.internal.CameraBurstCaptureCallback: androidx.camera.camera2.internal.CameraBurstCaptureCallback$CaptureSequenceCallback mCaptureSequenceCallback>;

        if $r8 == null goto label5;

        $r9 = r0.<androidx.camera.camera2.internal.CameraBurstCaptureCallback: androidx.camera.camera2.internal.CameraBurstCaptureCallback$CaptureSequenceCallback mCaptureSequenceCallback>;

        interfaceinvoke $r9.<androidx.camera.camera2.internal.CameraBurstCaptureCallback$CaptureSequenceCallback: void onCaptureSequenceCompletedOrAborted(android.hardware.camera2.CameraCaptureSession,int,boolean)>(r1, i0, 1);

     label5:
        return;
    }

    public void onCaptureSequenceCompleted(android.hardware.camera2.CameraCaptureSession, int, long)
    {
        androidx.camera.camera2.internal.CameraBurstCaptureCallback r0;
        android.hardware.camera2.CameraCaptureSession r1;
        int i0;
        long l1;
        java.util.Iterator r2, r4;
        java.util.List r3;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r5;
        java.util.Map $r6;
        java.util.Collection $r7;
        boolean $z0, $z1;
        androidx.camera.camera2.internal.CameraBurstCaptureCallback$CaptureSequenceCallback $r8, $r9;
        java.lang.Object $r10, $r11;

        r0 := @this: androidx.camera.camera2.internal.CameraBurstCaptureCallback;

        r1 := @parameter0: android.hardware.camera2.CameraCaptureSession;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        $r6 = r0.<androidx.camera.camera2.internal.CameraBurstCaptureCallback: java.util.Map mCallbackMap>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Collection values()>();

        r2 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r10 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.List) $r10;

        r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r11 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.hardware.camera2.CameraCaptureSession$CaptureCallback) $r11;

        virtualinvoke r5.<android.hardware.camera2.CameraCaptureSession$CaptureCallback: void onCaptureSequenceCompleted(android.hardware.camera2.CameraCaptureSession,int,long)>(r1, i0, l1);

        goto label2;

     label3:
        goto label1;

     label4:
        $r8 = r0.<androidx.camera.camera2.internal.CameraBurstCaptureCallback: androidx.camera.camera2.internal.CameraBurstCaptureCallback$CaptureSequenceCallback mCaptureSequenceCallback>;

        if $r8 == null goto label5;

        $r9 = r0.<androidx.camera.camera2.internal.CameraBurstCaptureCallback: androidx.camera.camera2.internal.CameraBurstCaptureCallback$CaptureSequenceCallback mCaptureSequenceCallback>;

        interfaceinvoke $r9.<androidx.camera.camera2.internal.CameraBurstCaptureCallback$CaptureSequenceCallback: void onCaptureSequenceCompletedOrAborted(android.hardware.camera2.CameraCaptureSession,int,boolean)>(r1, i0, 0);

     label5:
        return;
    }

    private java.util.List getCallbacks(android.hardware.camera2.CaptureRequest)
    {
        androidx.camera.camera2.internal.CameraBurstCaptureCallback r0;
        android.hardware.camera2.CaptureRequest r1;
        java.util.List r2, $r5;
        java.util.Map $r3;
        java.lang.Object $r4;

        r0 := @this: androidx.camera.camera2.internal.CameraBurstCaptureCallback;

        r1 := @parameter0: android.hardware.camera2.CaptureRequest;

        $r3 = r0.<androidx.camera.camera2.internal.CameraBurstCaptureCallback: java.util.Map mCallbackMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (java.util.List) $r4;

        if r2 == null goto label1;

        $r5 = r2;

        goto label2;

     label1:
        $r5 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

     label2:
        return $r5;
    }

    void addCamera2Callbacks(android.hardware.camera2.CaptureRequest, java.util.List)
    {
        androidx.camera.camera2.internal.CameraBurstCaptureCallback r0;
        android.hardware.camera2.CaptureRequest r1;
        java.util.List r2, r3;
        java.util.ArrayList r4, $r9;
        java.util.Map $r5, $r7, $r10;
        java.lang.Object $r6;
        int $i0, $i1, $i2;

        r0 := @this: androidx.camera.camera2.internal.CameraBurstCaptureCallback;

        r1 := @parameter0: android.hardware.camera2.CaptureRequest;

        r2 := @parameter1: java.util.List;

        $r5 = r0.<androidx.camera.camera2.internal.CameraBurstCaptureCallback: java.util.Map mCallbackMap>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (java.util.List) $r6;

        if r3 == null goto label1;

        $r9 = new java.util.ArrayList;

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        $i1 = interfaceinvoke r3.<java.util.List: int size()>();

        $i2 = $i0 + $i1;

        specialinvoke $r9.<java.util.ArrayList: void <init>(int)>($i2);

        r4 = $r9;

        interfaceinvoke r4.<java.util.List: boolean addAll(java.util.Collection)>(r2);

        interfaceinvoke r4.<java.util.List: boolean addAll(java.util.Collection)>(r3);

        $r10 = r0.<androidx.camera.camera2.internal.CameraBurstCaptureCallback: java.util.Map mCallbackMap>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r4);

        goto label2;

     label1:
        $r7 = r0.<androidx.camera.camera2.internal.CameraBurstCaptureCallback: java.util.Map mCallbackMap>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

     label2:
        return;
    }

    public void setCaptureSequenceCallback(androidx.camera.camera2.internal.CameraBurstCaptureCallback$CaptureSequenceCallback)
    {
        androidx.camera.camera2.internal.CameraBurstCaptureCallback r0;
        androidx.camera.camera2.internal.CameraBurstCaptureCallback$CaptureSequenceCallback r1;

        r0 := @this: androidx.camera.camera2.internal.CameraBurstCaptureCallback;

        r1 := @parameter0: androidx.camera.camera2.internal.CameraBurstCaptureCallback$CaptureSequenceCallback;

        r0.<androidx.camera.camera2.internal.CameraBurstCaptureCallback: androidx.camera.camera2.internal.CameraBurstCaptureCallback$CaptureSequenceCallback mCaptureSequenceCallback> = r1;

        return;
    }

androidx.camera.camera2.internal.CameraBurstCaptureCallback$CaptureSequenceCallback
<androidx.camera.camera2.internal.CameraBurstCaptureCallback$CaptureSequenceCallback: void onCaptureSequenceCompletedOrAborted(android.hardware.camera2.CameraCaptureSession,int,boolean)>
