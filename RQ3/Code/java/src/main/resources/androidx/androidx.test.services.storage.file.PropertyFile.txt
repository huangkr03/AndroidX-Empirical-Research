androidx.test.services.storage.file.PropertyFile
    public static android.net.Uri buildUri(androidx.test.services.storage.file.PropertyFile$Authority)
    {
        androidx.test.services.storage.file.PropertyFile$Authority r0;
        android.net.Uri$Builder $r2, $r3, $r5;
        java.lang.String $r4;
        android.net.Uri $r6;

        r0 := @parameter0: androidx.test.services.storage.file.PropertyFile$Authority;

        staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r2 = new android.net.Uri$Builder;

        specialinvoke $r2.<android.net.Uri$Builder: void <init>()>();

        $r3 = virtualinvoke $r2.<android.net.Uri$Builder: android.net.Uri$Builder scheme(java.lang.String)>("content");

        $r4 = virtualinvoke r0.<androidx.test.services.storage.file.PropertyFile$Authority: java.lang.String getAuthority()>();

        $r5 = virtualinvoke $r3.<android.net.Uri$Builder: android.net.Uri$Builder authority(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<android.net.Uri$Builder: android.net.Uri build()>();

        return $r6;
    }

    public static android.net.Uri buildUri(androidx.test.services.storage.file.PropertyFile$Authority, java.lang.String)
    {
        androidx.test.services.storage.file.PropertyFile$Authority r0;
        java.lang.String r1, $r6;
        android.net.Uri$Builder $r4, $r5, $r7, $r8;
        android.net.Uri $r9;

        r0 := @parameter0: androidx.test.services.storage.file.PropertyFile$Authority;

        r1 := @parameter1: java.lang.String;

        staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = new android.net.Uri$Builder;

        specialinvoke $r4.<android.net.Uri$Builder: void <init>()>();

        $r5 = virtualinvoke $r4.<android.net.Uri$Builder: android.net.Uri$Builder scheme(java.lang.String)>("content");

        $r6 = virtualinvoke r0.<androidx.test.services.storage.file.PropertyFile$Authority: java.lang.String getAuthority()>();

        $r7 = virtualinvoke $r5.<android.net.Uri$Builder: android.net.Uri$Builder authority(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<android.net.Uri$Builder: android.net.Uri$Builder path(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<android.net.Uri$Builder: android.net.Uri build()>();

        return $r9;
    }

    private void <init>()
    {
        androidx.test.services.storage.file.PropertyFile r0;

        r0 := @this: androidx.test.services.storage.file.PropertyFile;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

androidx.test.services.storage.file.PropertyFile$Authority
<androidx.test.services.storage.file.PropertyFile$Authority: androidx.test.services.storage.file.PropertyFile$Authority TEST_ARGS>
<androidx.test.services.storage.file.PropertyFile$Authority: androidx.test.services.storage.file.PropertyFile$Authority[] $VALUES>
<androidx.test.services.storage.file.PropertyFile$Authority: java.lang.String authority>
    public static androidx.test.services.storage.file.PropertyFile$Authority valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        androidx.test.services.storage.file.PropertyFile$Authority $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroidx/test/services/storage/file/PropertyFile$Authority;", r0);

        $r2 = (androidx.test.services.storage.file.PropertyFile$Authority) $r1;

        return $r2;
    }

    public java.lang.String getAuthority()
    {
        androidx.test.services.storage.file.PropertyFile$Authority r0;
        java.lang.String $r1;

        r0 := @this: androidx.test.services.storage.file.PropertyFile$Authority;

        $r1 = r0.<androidx.test.services.storage.file.PropertyFile$Authority: java.lang.String authority>;

        return $r1;
    }

    static void <clinit>()
    {
        androidx.test.services.storage.file.PropertyFile$Authority $r0;
        androidx.test.services.storage.file.PropertyFile$Authority[] $r1;

        $r0 = new androidx.test.services.storage.file.PropertyFile$Authority;

        specialinvoke $r0.<androidx.test.services.storage.file.PropertyFile$Authority: void <init>(java.lang.String,int,java.lang.String)>("TEST_ARGS", 0, "androidx.test.services.storage.testargs");

        <androidx.test.services.storage.file.PropertyFile$Authority: androidx.test.services.storage.file.PropertyFile$Authority TEST_ARGS> = $r0;

        $r1 = staticinvoke <androidx.test.services.storage.file.PropertyFile$Authority: androidx.test.services.storage.file.PropertyFile$Authority[] $values()>();

        <androidx.test.services.storage.file.PropertyFile$Authority: androidx.test.services.storage.file.PropertyFile$Authority[] $VALUES> = $r1;

        return;
    }

    private void <init>(java.lang.String, int, java.lang.String)
    {
        androidx.test.services.storage.file.PropertyFile$Authority r0;
        java.lang.String r1, r2, $r4;
        int i0;
        java.lang.Object $r3;

        r0 := @this: androidx.test.services.storage.file.PropertyFile$Authority;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $r3 = staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r4 = (java.lang.String) $r3;

        r0.<androidx.test.services.storage.file.PropertyFile$Authority: java.lang.String authority> = $r4;

        return;
    }

    private static androidx.test.services.storage.file.PropertyFile$Authority[] $values()
    {
        androidx.test.services.storage.file.PropertyFile$Authority[] $r0;
        androidx.test.services.storage.file.PropertyFile$Authority $r1;

        $r0 = newarray (androidx.test.services.storage.file.PropertyFile$Authority)[1];

        $r1 = <androidx.test.services.storage.file.PropertyFile$Authority: androidx.test.services.storage.file.PropertyFile$Authority TEST_ARGS>;

        $r0[0] = $r1;

        return $r0;
    }

    public static androidx.test.services.storage.file.PropertyFile$Authority[] values()
    {
        androidx.test.services.storage.file.PropertyFile$Authority[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <androidx.test.services.storage.file.PropertyFile$Authority: androidx.test.services.storage.file.PropertyFile$Authority[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (androidx.test.services.storage.file.PropertyFile$Authority[]) $r1;

        return $r2;
    }

androidx.test.services.storage.file.PropertyFile$Column
<androidx.test.services.storage.file.PropertyFile$Column: androidx.test.services.storage.file.PropertyFile$Column[] $VALUES>
<androidx.test.services.storage.file.PropertyFile$Column: androidx.test.services.storage.file.PropertyFile$Column NAME>
<androidx.test.services.storage.file.PropertyFile$Column: androidx.test.services.storage.file.PropertyFile$Column VALUE>
<androidx.test.services.storage.file.PropertyFile$Column: java.lang.String columnName>
<androidx.test.services.storage.file.PropertyFile$Column: int position>
    private static androidx.test.services.storage.file.PropertyFile$Column[] $values()
    {
        androidx.test.services.storage.file.PropertyFile$Column[] $r0;
        androidx.test.services.storage.file.PropertyFile$Column $r1;

        $r0 = newarray (androidx.test.services.storage.file.PropertyFile$Column)[2];

        $r1 = <androidx.test.services.storage.file.PropertyFile$Column: androidx.test.services.storage.file.PropertyFile$Column NAME>;

        $r0[0] = $r1;

        $r1 = <androidx.test.services.storage.file.PropertyFile$Column: androidx.test.services.storage.file.PropertyFile$Column VALUE>;

        $r0[1] = $r1;

        return $r0;
    }

    static void <clinit>()
    {
        androidx.test.services.storage.file.PropertyFile$Column[] $r0;
        androidx.test.services.storage.file.PropertyFile$Column $r1;

        $r1 = new androidx.test.services.storage.file.PropertyFile$Column;

        specialinvoke $r1.<androidx.test.services.storage.file.PropertyFile$Column: void <init>(java.lang.String,int,java.lang.String,int)>("NAME", 0, "name", 0);

        <androidx.test.services.storage.file.PropertyFile$Column: androidx.test.services.storage.file.PropertyFile$Column NAME> = $r1;

        $r1 = new androidx.test.services.storage.file.PropertyFile$Column;

        specialinvoke $r1.<androidx.test.services.storage.file.PropertyFile$Column: void <init>(java.lang.String,int,java.lang.String,int)>("VALUE", 1, "value", 1);

        <androidx.test.services.storage.file.PropertyFile$Column: androidx.test.services.storage.file.PropertyFile$Column VALUE> = $r1;

        $r0 = staticinvoke <androidx.test.services.storage.file.PropertyFile$Column: androidx.test.services.storage.file.PropertyFile$Column[] $values()>();

        <androidx.test.services.storage.file.PropertyFile$Column: androidx.test.services.storage.file.PropertyFile$Column[] $VALUES> = $r0;

        return;
    }

    private void <init>(java.lang.String, int, java.lang.String, int)
    {
        androidx.test.services.storage.file.PropertyFile$Column $r0;
        int $i0, $i1;
        java.lang.String $r1, $r3;
        java.lang.Object $r2;

        $r0 := @this: androidx.test.services.storage.file.PropertyFile$Column;

        $r3 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.lang.String;

        $i1 := @parameter3: int;

        specialinvoke $r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r3, $i0);

        $r2 = staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r3 = (java.lang.String) $r2;

        $r0.<androidx.test.services.storage.file.PropertyFile$Column: java.lang.String columnName> = $r3;

        $r0.<androidx.test.services.storage.file.PropertyFile$Column: int position> = $i1;

        return;
    }

    public static java.lang.String[] getNames()
    {
        java.lang.String[] $r0;
        androidx.test.services.storage.file.PropertyFile$Column[] $r1, $r2;
        int $i0, $i1;
        androidx.test.services.storage.file.PropertyFile$Column $r3;
        java.lang.String $r4;

        $r1 = staticinvoke <androidx.test.services.storage.file.PropertyFile$Column: androidx.test.services.storage.file.PropertyFile$Column[] values()>();

        $r2 = staticinvoke <androidx.test.services.storage.file.PropertyFile$Column: androidx.test.services.storage.file.PropertyFile$Column[] values()>();

        $i0 = lengthof $r2;

        $r0 = newarray (java.lang.String)[$i0];

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r3 = $r1[$i1];

        $r4 = virtualinvoke $r3.<androidx.test.services.storage.file.PropertyFile$Column: java.lang.String getName()>();

        $r0[$i1] = $r4;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $r0;
    }

    public static androidx.test.services.storage.file.PropertyFile$Column[] values()
    {
        java.lang.Object $r0;
        androidx.test.services.storage.file.PropertyFile$Column[] $r1;

        $r1 = <androidx.test.services.storage.file.PropertyFile$Column: androidx.test.services.storage.file.PropertyFile$Column[] $VALUES>;

        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (androidx.test.services.storage.file.PropertyFile$Column[]) $r0;

        return $r1;
    }

    public java.lang.String getName()
    {
        androidx.test.services.storage.file.PropertyFile$Column $r0;
        java.lang.String r1;

        $r0 := @this: androidx.test.services.storage.file.PropertyFile$Column;

        r1 = $r0.<androidx.test.services.storage.file.PropertyFile$Column: java.lang.String columnName>;

        return r1;
    }

