androidx.compose.ui.node.Snake
<androidx.compose.ui.node.Snake: int[] data>
    public final int[] getData()
    {
        androidx.compose.ui.node.Snake r0;
        int[] $r1;

        r0 := @this: androidx.compose.ui.node.Snake;

        $r1 = r0.<androidx.compose.ui.node.Snake: int[] data>;

        return $r1;
    }

    public static final int getStartX-impl(int[])
    {
        int[] r0;
        int $i0;

        r0 := @parameter0: int[];

        $i0 = r0[0];

        return $i0;
    }

    public static final int getStartY-impl(int[])
    {
        int[] r0;
        int $i0;

        r0 := @parameter0: int[];

        $i0 = r0[1];

        return $i0;
    }

    public static final int getEndX-impl(int[])
    {
        int[] r0;
        int $i0;

        r0 := @parameter0: int[];

        $i0 = r0[2];

        return $i0;
    }

    public static final int getEndY-impl(int[])
    {
        int[] r0;
        int $i0;

        r0 := @parameter0: int[];

        $i0 = r0[3];

        return $i0;
    }

    public static final boolean getReverse-impl(int[])
    {
        int[] r0;
        int $i0;
        boolean $z0;

        r0 := @parameter0: int[];

        $i0 = r0[4];

        if $i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static final int getDiagonalSize-impl(int[])
    {
        int[] r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @parameter0: int[];

        $i0 = staticinvoke <androidx.compose.ui.node.Snake: int getEndX-impl(int[])>(r0);

        $i1 = staticinvoke <androidx.compose.ui.node.Snake: int getStartX-impl(int[])>(r0);

        $i2 = $i0 - $i1;

        $i3 = staticinvoke <androidx.compose.ui.node.Snake: int getEndY-impl(int[])>(r0);

        $i4 = staticinvoke <androidx.compose.ui.node.Snake: int getStartY-impl(int[])>(r0);

        $i5 = $i3 - $i4;

        $i6 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i5);

        return $i6;
    }

    private static final boolean getHasAdditionOrRemoval-impl(int[])
    {
        int[] r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0;

        r0 := @parameter0: int[];

        $i0 = staticinvoke <androidx.compose.ui.node.Snake: int getEndY-impl(int[])>(r0);

        $i1 = staticinvoke <androidx.compose.ui.node.Snake: int getStartY-impl(int[])>(r0);

        $i2 = $i0 - $i1;

        $i3 = staticinvoke <androidx.compose.ui.node.Snake: int getEndX-impl(int[])>(r0);

        $i4 = staticinvoke <androidx.compose.ui.node.Snake: int getStartX-impl(int[])>(r0);

        $i5 = $i3 - $i4;

        if $i2 == $i5 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static final boolean isAddition-impl(int[])
    {
        int[] r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0;

        r0 := @parameter0: int[];

        $i0 = staticinvoke <androidx.compose.ui.node.Snake: int getEndY-impl(int[])>(r0);

        $i1 = staticinvoke <androidx.compose.ui.node.Snake: int getStartY-impl(int[])>(r0);

        $i2 = $i0 - $i1;

        $i3 = staticinvoke <androidx.compose.ui.node.Snake: int getEndX-impl(int[])>(r0);

        $i4 = staticinvoke <androidx.compose.ui.node.Snake: int getStartX-impl(int[])>(r0);

        $i5 = $i3 - $i4;

        if $i2 <= $i5 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static final void addDiagonalToStack-impl(int[], androidx.compose.ui.node.IntStack)
    {
        int[] r0;
        androidx.compose.ui.node.IntStack r1;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;

        r0 := @parameter0: int[];

        r1 := @parameter1: androidx.compose.ui.node.IntStack;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "diagonals");

        $z0 = staticinvoke <androidx.compose.ui.node.Snake: boolean getHasAdditionOrRemoval-impl(int[])>(r0);

        if $z0 == 0 goto label3;

        $z1 = staticinvoke <androidx.compose.ui.node.Snake: boolean getReverse-impl(int[])>(r0);

        if $z1 == 0 goto label1;

        $i13 = staticinvoke <androidx.compose.ui.node.Snake: int getStartX-impl(int[])>(r0);

        $i14 = staticinvoke <androidx.compose.ui.node.Snake: int getStartY-impl(int[])>(r0);

        $i15 = staticinvoke <androidx.compose.ui.node.Snake: int getDiagonalSize-impl(int[])>(r0);

        virtualinvoke r1.<androidx.compose.ui.node.IntStack: void pushDiagonal(int,int,int)>($i13, $i14, $i15);

        goto label4;

     label1:
        $z2 = staticinvoke <androidx.compose.ui.node.Snake: boolean isAddition-impl(int[])>(r0);

        if $z2 == 0 goto label2;

        $i9 = staticinvoke <androidx.compose.ui.node.Snake: int getStartX-impl(int[])>(r0);

        $i10 = staticinvoke <androidx.compose.ui.node.Snake: int getStartY-impl(int[])>(r0);

        $i11 = $i10 + 1;

        $i12 = staticinvoke <androidx.compose.ui.node.Snake: int getDiagonalSize-impl(int[])>(r0);

        virtualinvoke r1.<androidx.compose.ui.node.IntStack: void pushDiagonal(int,int,int)>($i9, $i11, $i12);

        goto label4;

     label2:
        $i5 = staticinvoke <androidx.compose.ui.node.Snake: int getStartX-impl(int[])>(r0);

        $i6 = $i5 + 1;

        $i7 = staticinvoke <androidx.compose.ui.node.Snake: int getStartY-impl(int[])>(r0);

        $i8 = staticinvoke <androidx.compose.ui.node.Snake: int getDiagonalSize-impl(int[])>(r0);

        virtualinvoke r1.<androidx.compose.ui.node.IntStack: void pushDiagonal(int,int,int)>($i6, $i7, $i8);

        goto label4;

     label3:
        $i0 = staticinvoke <androidx.compose.ui.node.Snake: int getStartX-impl(int[])>(r0);

        $i1 = staticinvoke <androidx.compose.ui.node.Snake: int getStartY-impl(int[])>(r0);

        $i2 = staticinvoke <androidx.compose.ui.node.Snake: int getEndX-impl(int[])>(r0);

        $i3 = staticinvoke <androidx.compose.ui.node.Snake: int getStartX-impl(int[])>(r0);

        $i4 = $i2 - $i3;

        virtualinvoke r1.<androidx.compose.ui.node.IntStack: void pushDiagonal(int,int,int)>($i0, $i1, $i4);

     label4:
        return;
    }

    public static java.lang.String toString-impl(int[])
    {
        int[] r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        java.lang.String $r13;

        r0 := @parameter0: int[];

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Snake(");

        $i0 = staticinvoke <androidx.compose.ui.node.Snake: int getStartX-impl(int[])>(r0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $i1 = staticinvoke <androidx.compose.ui.node.Snake: int getStartY-impl(int[])>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $i2 = staticinvoke <androidx.compose.ui.node.Snake: int getEndX-impl(int[])>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $i3 = staticinvoke <androidx.compose.ui.node.Snake: int getEndY-impl(int[])>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $z0 = staticinvoke <androidx.compose.ui.node.Snake: boolean getReverse-impl(int[])>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }

    public java.lang.String toString()
    {
        androidx.compose.ui.node.Snake r0;
        int[] $r1;
        java.lang.String $r2;

        r0 := @this: androidx.compose.ui.node.Snake;

        $r1 = r0.<androidx.compose.ui.node.Snake: int[] data>;

        $r2 = staticinvoke <androidx.compose.ui.node.Snake: java.lang.String toString-impl(int[])>($r1);

        return $r2;
    }

    public static int hashCode-impl(int[])
    {
        int[] r0;
        int $i0;

        r0 := @parameter0: int[];

        $i0 = staticinvoke <java.util.Arrays: int hashCode(int[])>(r0);

        return $i0;
    }

    public int hashCode()
    {
        androidx.compose.ui.node.Snake r0;
        int[] $r1;
        int $i0;

        r0 := @this: androidx.compose.ui.node.Snake;

        $r1 = r0.<androidx.compose.ui.node.Snake: int[] data>;

        $i0 = staticinvoke <androidx.compose.ui.node.Snake: int hashCode-impl(int[])>($r1);

        return $i0;
    }

    public static boolean equals-impl(int[], java.lang.Object)
    {
        int[] r0, $r3;
        java.lang.Object r1;
        boolean $z0, $z1;
        androidx.compose.ui.node.Snake $r2;

        r0 := @parameter0: int[];

        r1 := @parameter1: java.lang.Object;

        $z0 = r1 instanceof androidx.compose.ui.node.Snake;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = (androidx.compose.ui.node.Snake) r1;

        $r3 = virtualinvoke $r2.<androidx.compose.ui.node.Snake: int[] unbox-impl()>();

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r0, $r3);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        return 1;
    }

    public boolean equals(java.lang.Object)
    {
        androidx.compose.ui.node.Snake r0;
        java.lang.Object r1;
        int[] $r2;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.Snake;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<androidx.compose.ui.node.Snake: int[] data>;

        $z0 = staticinvoke <androidx.compose.ui.node.Snake: boolean equals-impl(int[],java.lang.Object)>($r2, r1);

        return $z0;
    }

    private void <init>(int[])
    {
        androidx.compose.ui.node.Snake r0;
        int[] r1;

        r0 := @this: androidx.compose.ui.node.Snake;

        r1 := @parameter0: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.ui.node.Snake: int[] data> = r1;

        return;
    }

    public static int[] constructor-impl(int[])
    {
        int[] r0;

        r0 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "data");

        return r0;
    }

    public static final androidx.compose.ui.node.Snake box-impl(int[])
    {
        int[] r0;
        androidx.compose.ui.node.Snake $r1;

        r0 := @parameter0: int[];

        $r1 = new androidx.compose.ui.node.Snake;

        specialinvoke $r1.<androidx.compose.ui.node.Snake: void <init>(int[])>(r0);

        return $r1;
    }

    public final int[] unbox-impl()
    {
        androidx.compose.ui.node.Snake r0;
        int[] $r1;

        r0 := @this: androidx.compose.ui.node.Snake;

        $r1 = r0.<androidx.compose.ui.node.Snake: int[] data>;

        return $r1;
    }

    public static final boolean equals-impl0(int[], int[])
    {
        int[] r0, r1;
        boolean $z0;

        r0 := @parameter0: int[];

        r1 := @parameter1: int[];

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r0, r1);

        return $z0;
    }

