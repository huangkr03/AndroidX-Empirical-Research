androidx.camera.lifecycle.ProcessCameraProvider
<androidx.camera.lifecycle.ProcessCameraProvider: androidx.camera.lifecycle.ProcessCameraProvider sAppInstance>
<androidx.camera.lifecycle.ProcessCameraProvider: java.lang.Object mLock>
<androidx.camera.lifecycle.ProcessCameraProvider: androidx.camera.core.CameraXConfig$Provider mCameraXConfigProvider>
<androidx.camera.lifecycle.ProcessCameraProvider: com.google.common.util.concurrent.ListenableFuture mCameraXInitializeFuture>
<androidx.camera.lifecycle.ProcessCameraProvider: com.google.common.util.concurrent.ListenableFuture mCameraXShutdownFuture>
<androidx.camera.lifecycle.ProcessCameraProvider: androidx.camera.lifecycle.LifecycleCameraRepository mLifecycleCameraRepository>
<androidx.camera.lifecycle.ProcessCameraProvider: androidx.camera.core.CameraX mCameraX>
<androidx.camera.lifecycle.ProcessCameraProvider: android.content.Context mContext>
    public static com.google.common.util.concurrent.ListenableFuture getInstance(android.content.Context)
    {
        android.content.Context r0;
        androidx.camera.lifecycle.ProcessCameraProvider $r2;
        com.google.common.util.concurrent.ListenableFuture $r3, $r6;
        androidx.arch.core.util.Function $r4;
        java.util.concurrent.Executor $r5;

        r0 := @parameter0: android.content.Context;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r2 = <androidx.camera.lifecycle.ProcessCameraProvider: androidx.camera.lifecycle.ProcessCameraProvider sAppInstance>;

        $r3 = specialinvoke $r2.<androidx.camera.lifecycle.ProcessCameraProvider: com.google.common.util.concurrent.ListenableFuture getOrCreateCameraXInstance(android.content.Context)>(r0);

        $r4 = dynamicinvoke "apply" <androidx.arch.core.util.Function (android.content.Context)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.lifecycle.ProcessCameraProvider: androidx.camera.lifecycle.ProcessCameraProvider lambda$getInstance$0(android.content.Context,androidx.camera.core.CameraX)>, methodtype: androidx.camera.lifecycle.ProcessCameraProvider __METHODTYPE__(androidx.camera.core.CameraX));

        $r5 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor directExecutor()>();

        $r6 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture transform(com.google.common.util.concurrent.ListenableFuture,androidx.arch.core.util.Function,java.util.concurrent.Executor)>($r3, $r4, $r5);

        return $r6;
    }

    private com.google.common.util.concurrent.ListenableFuture getOrCreateCameraXInstance(android.content.Context)
    {
        androidx.camera.lifecycle.ProcessCameraProvider r0;
        android.content.Context r1;
        java.lang.Object r2, $r5;
        androidx.camera.core.CameraX r3, $r7;
        java.lang.Throwable r4, $r13;
        com.google.common.util.concurrent.ListenableFuture $r6, $r10, $r11, $r12;
        androidx.camera.core.CameraXConfig$Provider $r8;
        androidx.concurrent.futures.CallbackToFutureAdapter$Resolver $r9;

        r0 := @this: androidx.camera.lifecycle.ProcessCameraProvider;

        r1 := @parameter0: android.content.Context;

        $r5 = r0.<androidx.camera.lifecycle.ProcessCameraProvider: java.lang.Object mLock>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<androidx.camera.lifecycle.ProcessCameraProvider: com.google.common.util.concurrent.ListenableFuture mCameraXInitializeFuture>;

        if $r6 == null goto label3;

        $r12 = r0.<androidx.camera.lifecycle.ProcessCameraProvider: com.google.common.util.concurrent.ListenableFuture mCameraXInitializeFuture>;

        exitmonitor r2;

     label2:
        return $r12;

     label3:
        $r7 = new androidx.camera.core.CameraX;

        $r8 = r0.<androidx.camera.lifecycle.ProcessCameraProvider: androidx.camera.core.CameraXConfig$Provider mCameraXConfigProvider>;

        specialinvoke $r7.<androidx.camera.core.CameraX: void <init>(android.content.Context,androidx.camera.core.CameraXConfig$Provider)>(r1, $r8);

        r3 = $r7;

        $r9 = dynamicinvoke "attachCompleter" <androidx.concurrent.futures.CallbackToFutureAdapter$Resolver (androidx.camera.lifecycle.ProcessCameraProvider,androidx.camera.core.CameraX)>(r0, r3) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.lifecycle.ProcessCameraProvider: java.lang.Object lambda$getOrCreateCameraXInstance$2(androidx.camera.core.CameraX,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer));

        $r10 = staticinvoke <androidx.concurrent.futures.CallbackToFutureAdapter: com.google.common.util.concurrent.ListenableFuture getFuture(androidx.concurrent.futures.CallbackToFutureAdapter$Resolver)>($r9);

        r0.<androidx.camera.lifecycle.ProcessCameraProvider: com.google.common.util.concurrent.ListenableFuture mCameraXInitializeFuture> = $r10;

        $r11 = r0.<androidx.camera.lifecycle.ProcessCameraProvider: com.google.common.util.concurrent.ListenableFuture mCameraXInitializeFuture>;

        exitmonitor r2;

     label4:
        return $r11;

     label5:
        $r13 := @caughtexception;

        r4 = $r13;

        exitmonitor r2;

     label6:
        throw r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public static void configureInstance(androidx.camera.core.CameraXConfig)
    {
        androidx.camera.core.CameraXConfig r0;
        androidx.camera.lifecycle.ProcessCameraProvider $r1;

        r0 := @parameter0: androidx.camera.core.CameraXConfig;

        $r1 = <androidx.camera.lifecycle.ProcessCameraProvider: androidx.camera.lifecycle.ProcessCameraProvider sAppInstance>;

        specialinvoke $r1.<androidx.camera.lifecycle.ProcessCameraProvider: void configureInstanceInternal(androidx.camera.core.CameraXConfig)>(r0);

        return;
    }

    private void configureInstanceInternal(androidx.camera.core.CameraXConfig)
    {
        androidx.camera.lifecycle.ProcessCameraProvider r0;
        androidx.camera.core.CameraXConfig r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r8;
        androidx.camera.core.CameraXConfig$Provider $r6, $r7;
        boolean $z0;

        r0 := @this: androidx.camera.lifecycle.ProcessCameraProvider;

        r1 := @parameter0: androidx.camera.core.CameraXConfig;

        $r4 = r0.<androidx.camera.lifecycle.ProcessCameraProvider: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r6 = r0.<androidx.camera.lifecycle.ProcessCameraProvider: androidx.camera.core.CameraXConfig$Provider mCameraXConfigProvider>;

        if $r6 != null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z0, "CameraX has already been configured. To use a different configuration, shutdown() must be called.");

        $r7 = dynamicinvoke "getCameraXConfig" <androidx.camera.core.CameraXConfig$Provider (androidx.camera.core.CameraXConfig)>(r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: androidx.camera.core.CameraXConfig __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.lifecycle.ProcessCameraProvider: androidx.camera.core.CameraXConfig lambda$configureInstanceInternal$3(androidx.camera.core.CameraXConfig)>, methodtype: androidx.camera.core.CameraXConfig __METHODTYPE__());

        r0.<androidx.camera.lifecycle.ProcessCameraProvider: androidx.camera.core.CameraXConfig$Provider mCameraXConfigProvider> = $r7;

        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r8 := @caughtexception;

        r3 = $r8;

        exitmonitor r2;

     label6:
        throw r3;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public com.google.common.util.concurrent.ListenableFuture shutdown()
    {
        androidx.camera.lifecycle.ProcessCameraProvider r0;
        com.google.common.util.concurrent.ListenableFuture r1, $r7;
        java.lang.Object r2, $r5;
        androidx.camera.lifecycle.LifecycleCameraRepository $r3;
        androidx.camera.core.CameraX $r4, $r6;

        r0 := @this: androidx.camera.lifecycle.ProcessCameraProvider;

        $r3 = r0.<androidx.camera.lifecycle.ProcessCameraProvider: androidx.camera.lifecycle.LifecycleCameraRepository mLifecycleCameraRepository>;

        virtualinvoke $r3.<androidx.camera.lifecycle.LifecycleCameraRepository: void clear()>();

        $r4 = r0.<androidx.camera.lifecycle.ProcessCameraProvider: androidx.camera.core.CameraX mCameraX>;

        if $r4 == null goto label1;

        $r6 = r0.<androidx.camera.lifecycle.ProcessCameraProvider: androidx.camera.core.CameraX mCameraX>;

        $r7 = virtualinvoke $r6.<androidx.camera.core.CameraX: com.google.common.util.concurrent.ListenableFuture shutdown()>();

        goto label2;

     label1:
        $r7 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFuture(java.lang.Object)>(null);

     label2:
        r1 = $r7;

        $r5 = r0.<androidx.camera.lifecycle.ProcessCameraProvider: java.lang.Object mLock>;

        r2 = $r5;

        entermonitor $r5;

        r0.<androidx.camera.lifecycle.ProcessCameraProvider: androidx.camera.core.CameraXConfig$Provider mCameraXConfigProvider> = null;

        r0.<androidx.camera.lifecycle.ProcessCameraProvider: com.google.common.util.concurrent.ListenableFuture mCameraXInitializeFuture> = null;

        r0.<androidx.camera.lifecycle.ProcessCameraProvider: com.google.common.util.concurrent.ListenableFuture mCameraXShutdownFuture> = r1;

        exitmonitor r2;

        goto label3;

     label3:
        r0.<androidx.camera.lifecycle.ProcessCameraProvider: androidx.camera.core.CameraX mCameraX> = null;

        r0.<androidx.camera.lifecycle.ProcessCameraProvider: android.content.Context mContext> = null;

        return r1;
    }

    private void setCameraX(androidx.camera.core.CameraX)
    {
        androidx.camera.lifecycle.ProcessCameraProvider r0;
        androidx.camera.core.CameraX r1;

        r0 := @this: androidx.camera.lifecycle.ProcessCameraProvider;

        r1 := @parameter0: androidx.camera.core.CameraX;

        r0.<androidx.camera.lifecycle.ProcessCameraProvider: androidx.camera.core.CameraX mCameraX> = r1;

        return;
    }

    private void setContext(android.content.Context)
    {
        androidx.camera.lifecycle.ProcessCameraProvider r0;
        android.content.Context r1;

        r0 := @this: androidx.camera.lifecycle.ProcessCameraProvider;

        r1 := @parameter0: android.content.Context;

        r0.<androidx.camera.lifecycle.ProcessCameraProvider: android.content.Context mContext> = r1;

        return;
    }

    public transient androidx.camera.core.Camera bindToLifecycle(androidx.lifecycle.LifecycleOwner, androidx.camera.core.CameraSelector, androidx.camera.core.UseCase[])
    {
        androidx.camera.lifecycle.ProcessCameraProvider r0;
        androidx.lifecycle.LifecycleOwner r1;
        androidx.camera.core.CameraSelector r2;
        androidx.camera.core.UseCase[] r3;
        java.util.List $r4;
        androidx.camera.core.Camera $r5;

        r0 := @this: androidx.camera.lifecycle.ProcessCameraProvider;

        r1 := @parameter0: androidx.lifecycle.LifecycleOwner;

        r2 := @parameter1: androidx.camera.core.CameraSelector;

        r3 := @parameter2: androidx.camera.core.UseCase[];

        $r4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r5 = virtualinvoke r0.<androidx.camera.lifecycle.ProcessCameraProvider: androidx.camera.core.Camera bindToLifecycle(androidx.lifecycle.LifecycleOwner,androidx.camera.core.CameraSelector,androidx.camera.core.ViewPort,java.util.List,androidx.camera.core.UseCase[])>(r1, r2, null, $r4, r3);

        return $r5;
    }

    public androidx.camera.core.Camera bindToLifecycle(androidx.lifecycle.LifecycleOwner, androidx.camera.core.CameraSelector, androidx.camera.core.UseCaseGroup)
    {
        androidx.camera.lifecycle.ProcessCameraProvider r0;
        androidx.lifecycle.LifecycleOwner r1;
        androidx.camera.core.CameraSelector r2;
        androidx.camera.core.UseCaseGroup r3;
        androidx.camera.core.ViewPort $r4;
        java.util.List $r5, $r6;
        androidx.camera.core.UseCase[] $r7, $r9;
        java.lang.Object[] $r8;
        androidx.camera.core.Camera $r10;

        r0 := @this: androidx.camera.lifecycle.ProcessCameraProvider;

        r1 := @parameter0: androidx.lifecycle.LifecycleOwner;

        r2 := @parameter1: androidx.camera.core.CameraSelector;

        r3 := @parameter2: androidx.camera.core.UseCaseGroup;

        $r4 = virtualinvoke r3.<androidx.camera.core.UseCaseGroup: androidx.camera.core.ViewPort getViewPort()>();

        $r5 = virtualinvoke r3.<androidx.camera.core.UseCaseGroup: java.util.List getEffects()>();

        $r6 = virtualinvoke r3.<androidx.camera.core.UseCaseGroup: java.util.List getUseCases()>();

        $r7 = newarray (androidx.camera.core.UseCase)[0];

        $r8 = interfaceinvoke $r6.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        $r9 = (androidx.camera.core.UseCase[]) $r8;

        $r10 = virtualinvoke r0.<androidx.camera.lifecycle.ProcessCameraProvider: androidx.camera.core.Camera bindToLifecycle(androidx.lifecycle.LifecycleOwner,androidx.camera.core.CameraSelector,androidx.camera.core.ViewPort,java.util.List,androidx.camera.core.UseCase[])>(r1, r2, $r4, $r5, $r9);

        return $r10;
    }

    transient androidx.camera.core.Camera bindToLifecycle(androidx.lifecycle.LifecycleOwner, androidx.camera.core.CameraSelector, androidx.camera.core.ViewPort, java.util.List, androidx.camera.core.UseCase[])
    {
        androidx.camera.lifecycle.ProcessCameraProvider r0;
        androidx.lifecycle.LifecycleOwner r1;
        androidx.camera.core.CameraSelector r2, r42, r45;
        androidx.camera.core.ViewPort r3;
        java.util.List r4, $r16;
        androidx.camera.core.UseCase[] r5, r40, r50;
        androidx.camera.core.CameraSelector$Builder r6;
        java.util.Iterator r7, r43, r53;
        androidx.camera.lifecycle.LifecycleCamera r8, r48;
        androidx.camera.core.CameraX $r9, $r26, $r29;
        androidx.camera.core.impl.CameraRepository $r10;
        java.util.LinkedHashSet $r11, $r14, $r37, r46;
        boolean $z0, $z1, $z2, $z3, $z4;
        androidx.camera.lifecycle.LifecycleCameraRepository $r12, $r13, $r15, $r27;
        int $i0, i1, i2, i3, i4;
        java.lang.Object $r17, $r31, $r38;
        androidx.camera.core.impl.Identifier $r18, $r19, $r20;
        androidx.camera.core.impl.CameraConfigProvider $r21;
        androidx.camera.core.CameraInfo $r22;
        android.content.Context $r23;
        java.lang.IllegalArgumentException $r24, $r35;
        androidx.camera.core.internal.CameraUseCaseAdapter $r25;
        androidx.camera.core.impl.CameraDeviceSurfaceManager $r28;
        androidx.camera.core.impl.UseCaseConfigFactory $r30;
        java.lang.IllegalStateException $r32;
        java.lang.Object[] $r33;
        java.lang.String $r34;
        androidx.camera.core.impl.UseCaseConfig $r36;
        androidx.camera.core.UseCase r41, r51;
        androidx.camera.core.CameraFilter r44, r54;
        androidx.camera.core.internal.CameraUseCaseAdapter$CameraId r47;
        java.util.Collection r49;
        androidx.camera.core.impl.CameraConfig r52, r55;

        r0 := @this: androidx.camera.lifecycle.ProcessCameraProvider;

        r1 := @parameter0: androidx.lifecycle.LifecycleOwner;

        r2 := @parameter1: androidx.camera.core.CameraSelector;

        r3 := @parameter2: androidx.camera.core.ViewPort;

        r4 := @parameter3: java.util.List;

        r5 := @parameter4: androidx.camera.core.UseCase[];

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        r6 = staticinvoke <androidx.camera.core.CameraSelector$Builder: androidx.camera.core.CameraSelector$Builder fromSelector(androidx.camera.core.CameraSelector)>(r2);

        r40 = r5;

        i1 = lengthof r40;

        i2 = 0;

     label01:
        if i2 >= i1 goto label04;

        r41 = r40[i2];

        $r36 = virtualinvoke r41.<androidx.camera.core.UseCase: androidx.camera.core.impl.UseCaseConfig getCurrentConfig()>();

        r42 = interfaceinvoke $r36.<androidx.camera.core.impl.UseCaseConfig: androidx.camera.core.CameraSelector getCameraSelector(androidx.camera.core.CameraSelector)>(null);

        if r42 == null goto label03;

        $r37 = virtualinvoke r42.<androidx.camera.core.CameraSelector: java.util.LinkedHashSet getCameraFilterSet()>();

        r43 = virtualinvoke $r37.<java.util.LinkedHashSet: java.util.Iterator iterator()>();

     label02:
        $z3 = interfaceinvoke r43.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label03;

        $r38 = interfaceinvoke r43.<java.util.Iterator: java.lang.Object next()>();

        r44 = (androidx.camera.core.CameraFilter) $r38;

        virtualinvoke r6.<androidx.camera.core.CameraSelector$Builder: androidx.camera.core.CameraSelector$Builder addCameraFilter(androidx.camera.core.CameraFilter)>(r44);

        goto label02;

     label03:
        i2 = i2 + 1;

        goto label01;

     label04:
        r45 = virtualinvoke r6.<androidx.camera.core.CameraSelector$Builder: androidx.camera.core.CameraSelector build()>();

        $r9 = r0.<androidx.camera.lifecycle.ProcessCameraProvider: androidx.camera.core.CameraX mCameraX>;

        $r10 = virtualinvoke $r9.<androidx.camera.core.CameraX: androidx.camera.core.impl.CameraRepository getCameraRepository()>();

        $r11 = virtualinvoke $r10.<androidx.camera.core.impl.CameraRepository: java.util.LinkedHashSet getCameras()>();

        r46 = virtualinvoke r45.<androidx.camera.core.CameraSelector: java.util.LinkedHashSet filter(java.util.LinkedHashSet)>($r11);

        $z0 = virtualinvoke r46.<java.util.LinkedHashSet: boolean isEmpty()>();

        if $z0 == 0 goto label05;

        $r35 = new java.lang.IllegalArgumentException;

        specialinvoke $r35.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Provided camera selector unable to resolve a camera for the given use case");

        throw $r35;

     label05:
        r47 = staticinvoke <androidx.camera.core.internal.CameraUseCaseAdapter: androidx.camera.core.internal.CameraUseCaseAdapter$CameraId generateCameraId(java.util.LinkedHashSet)>(r46);

        $r12 = r0.<androidx.camera.lifecycle.ProcessCameraProvider: androidx.camera.lifecycle.LifecycleCameraRepository mLifecycleCameraRepository>;

        r48 = virtualinvoke $r12.<androidx.camera.lifecycle.LifecycleCameraRepository: androidx.camera.lifecycle.LifecycleCamera getLifecycleCamera(androidx.lifecycle.LifecycleOwner,androidx.camera.core.internal.CameraUseCaseAdapter$CameraId)>(r1, r47);

        $r13 = r0.<androidx.camera.lifecycle.ProcessCameraProvider: androidx.camera.lifecycle.LifecycleCameraRepository mLifecycleCameraRepository>;

        r49 = virtualinvoke $r13.<androidx.camera.lifecycle.LifecycleCameraRepository: java.util.Collection getLifecycleCameras()>();

        r50 = r5;

        i3 = lengthof r50;

        i4 = 0;

     label06:
        if i4 >= i3 goto label10;

        r51 = r50[i4];

        r7 = interfaceinvoke r49.<java.util.Collection: java.util.Iterator iterator()>();

     label07:
        $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label09;

        $r31 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (androidx.camera.lifecycle.LifecycleCamera) $r31;

        $z2 = virtualinvoke r8.<androidx.camera.lifecycle.LifecycleCamera: boolean isBound(androidx.camera.core.UseCase)>(r51);

        if $z2 == 0 goto label08;

        if r8 == r48 goto label08;

        $r32 = new java.lang.IllegalStateException;

        $r33 = newarray (java.lang.Object)[1];

        $r33[0] = r51;

        $r34 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Use case %s already bound to a different lifecycle.", $r33);

        specialinvoke $r32.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r34);

        throw $r32;

     label08:
        goto label07;

     label09:
        i4 = i4 + 1;

        goto label06;

     label10:
        if r48 != null goto label11;

        $r27 = r0.<androidx.camera.lifecycle.ProcessCameraProvider: androidx.camera.lifecycle.LifecycleCameraRepository mLifecycleCameraRepository>;

        $r25 = new androidx.camera.core.internal.CameraUseCaseAdapter;

        $r26 = r0.<androidx.camera.lifecycle.ProcessCameraProvider: androidx.camera.core.CameraX mCameraX>;

        $r28 = virtualinvoke $r26.<androidx.camera.core.CameraX: androidx.camera.core.impl.CameraDeviceSurfaceManager getCameraDeviceSurfaceManager()>();

        $r29 = r0.<androidx.camera.lifecycle.ProcessCameraProvider: androidx.camera.core.CameraX mCameraX>;

        $r30 = virtualinvoke $r29.<androidx.camera.core.CameraX: androidx.camera.core.impl.UseCaseConfigFactory getDefaultConfigFactory()>();

        specialinvoke $r25.<androidx.camera.core.internal.CameraUseCaseAdapter: void <init>(java.util.LinkedHashSet,androidx.camera.core.impl.CameraDeviceSurfaceManager,androidx.camera.core.impl.UseCaseConfigFactory)>(r46, $r28, $r30);

        r48 = virtualinvoke $r27.<androidx.camera.lifecycle.LifecycleCameraRepository: androidx.camera.lifecycle.LifecycleCamera createLifecycleCamera(androidx.lifecycle.LifecycleOwner,androidx.camera.core.internal.CameraUseCaseAdapter)>(r1, $r25);

     label11:
        r52 = null;

        $r14 = virtualinvoke r2.<androidx.camera.core.CameraSelector: java.util.LinkedHashSet getCameraFilterSet()>();

        r53 = virtualinvoke $r14.<java.util.LinkedHashSet: java.util.Iterator iterator()>();

     label12:
        $z4 = interfaceinvoke r53.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label16;

        $r17 = interfaceinvoke r53.<java.util.Iterator: java.lang.Object next()>();

        r54 = (androidx.camera.core.CameraFilter) $r17;

        $r18 = interfaceinvoke r54.<androidx.camera.core.CameraFilter: androidx.camera.core.impl.Identifier getIdentifier()>();

        $r19 = <androidx.camera.core.CameraFilter: androidx.camera.core.impl.Identifier DEFAULT_ID>;

        if $r18 == $r19 goto label15;

        $r20 = interfaceinvoke r54.<androidx.camera.core.CameraFilter: androidx.camera.core.impl.Identifier getIdentifier()>();

        $r21 = staticinvoke <androidx.camera.core.impl.ExtendedCameraConfigProviderStore: androidx.camera.core.impl.CameraConfigProvider getConfigProvider(java.lang.Object)>($r20);

        $r22 = virtualinvoke r48.<androidx.camera.lifecycle.LifecycleCamera: androidx.camera.core.CameraInfo getCameraInfo()>();

        $r23 = r0.<androidx.camera.lifecycle.ProcessCameraProvider: android.content.Context mContext>;

        r55 = interfaceinvoke $r21.<androidx.camera.core.impl.CameraConfigProvider: androidx.camera.core.impl.CameraConfig getConfig(androidx.camera.core.CameraInfo,android.content.Context)>($r22, $r23);

        if r55 != null goto label13;

        goto label12;

     label13:
        if r52 == null goto label14;

        $r24 = new java.lang.IllegalArgumentException;

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot apply multiple extended camera configs at the same time.");

        throw $r24;

     label14:
        r52 = r55;

     label15:
        goto label12;

     label16:
        virtualinvoke r48.<androidx.camera.lifecycle.LifecycleCamera: void setExtendedConfig(androidx.camera.core.impl.CameraConfig)>(r52);

        $i0 = lengthof r5;

        if $i0 != 0 goto label17;

        return r48;

     label17:
        $r15 = r0.<androidx.camera.lifecycle.ProcessCameraProvider: androidx.camera.lifecycle.LifecycleCameraRepository mLifecycleCameraRepository>;

        $r16 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r5);

        virtualinvoke $r15.<androidx.camera.lifecycle.LifecycleCameraRepository: void bindToLifecycleCamera(androidx.camera.lifecycle.LifecycleCamera,androidx.camera.core.ViewPort,java.util.List,java.util.Collection)>(r48, r3, r4, $r16);

        return r48;
    }

    public boolean isBound(androidx.camera.core.UseCase)
    {
        androidx.camera.lifecycle.ProcessCameraProvider r0;
        androidx.camera.core.UseCase r1;
        java.util.Iterator r2;
        androidx.camera.lifecycle.LifecycleCamera r3;
        androidx.camera.lifecycle.LifecycleCameraRepository $r4;
        java.util.Collection $r5;
        boolean $z0, $z1;
        java.lang.Object $r6;

        r0 := @this: androidx.camera.lifecycle.ProcessCameraProvider;

        r1 := @parameter0: androidx.camera.core.UseCase;

        $r4 = r0.<androidx.camera.lifecycle.ProcessCameraProvider: androidx.camera.lifecycle.LifecycleCameraRepository mLifecycleCameraRepository>;

        $r5 = virtualinvoke $r4.<androidx.camera.lifecycle.LifecycleCameraRepository: java.util.Collection getLifecycleCameras()>();

        r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.camera.lifecycle.LifecycleCamera) $r6;

        $z1 = virtualinvoke r3.<androidx.camera.lifecycle.LifecycleCamera: boolean isBound(androidx.camera.core.UseCase)>(r1);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public transient void unbind(androidx.camera.core.UseCase[])
    {
        androidx.camera.lifecycle.ProcessCameraProvider r0;
        androidx.camera.core.UseCase[] r1;
        androidx.camera.lifecycle.LifecycleCameraRepository $r2;
        java.util.List $r3;

        r0 := @this: androidx.camera.lifecycle.ProcessCameraProvider;

        r1 := @parameter0: androidx.camera.core.UseCase[];

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r2 = r0.<androidx.camera.lifecycle.ProcessCameraProvider: androidx.camera.lifecycle.LifecycleCameraRepository mLifecycleCameraRepository>;

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        virtualinvoke $r2.<androidx.camera.lifecycle.LifecycleCameraRepository: void unbind(java.util.Collection)>($r3);

        return;
    }

    public void unbindAll()
    {
        androidx.camera.lifecycle.ProcessCameraProvider r0;
        androidx.camera.lifecycle.LifecycleCameraRepository $r1;

        r0 := @this: androidx.camera.lifecycle.ProcessCameraProvider;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r1 = r0.<androidx.camera.lifecycle.ProcessCameraProvider: androidx.camera.lifecycle.LifecycleCameraRepository mLifecycleCameraRepository>;

        virtualinvoke $r1.<androidx.camera.lifecycle.LifecycleCameraRepository: void unbindAll()>();

        return;
    }

    public boolean hasCamera(androidx.camera.core.CameraSelector) throws androidx.camera.core.CameraInfoUnavailableException
    {
        androidx.camera.lifecycle.ProcessCameraProvider r0;
        androidx.camera.core.CameraSelector r1;
        java.lang.Throwable r2, $r7;
        androidx.camera.core.CameraX $r3;
        androidx.camera.core.impl.CameraRepository $r4;
        java.util.LinkedHashSet $r5;

        r0 := @this: androidx.camera.lifecycle.ProcessCameraProvider;

        r1 := @parameter0: androidx.camera.core.CameraSelector;

     label1:
        $r3 = r0.<androidx.camera.lifecycle.ProcessCameraProvider: androidx.camera.core.CameraX mCameraX>;

        $r4 = virtualinvoke $r3.<androidx.camera.core.CameraX: androidx.camera.core.impl.CameraRepository getCameraRepository()>();

        $r5 = virtualinvoke $r4.<androidx.camera.core.impl.CameraRepository: java.util.LinkedHashSet getCameras()>();

        virtualinvoke r1.<androidx.camera.core.CameraSelector: androidx.camera.core.impl.CameraInternal select(java.util.LinkedHashSet)>($r5);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r2 = $r7;

        return 0;

     label4:
        return 1;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public java.util.List getAvailableCameraInfos()
    {
        androidx.camera.lifecycle.ProcessCameraProvider r0;
        java.util.ArrayList r1, $r5;
        java.util.LinkedHashSet r2;
        java.util.Iterator r3;
        androidx.camera.core.impl.CameraInternal r4;
        androidx.camera.core.CameraX $r6;
        androidx.camera.core.impl.CameraRepository $r7;
        boolean $z0;
        java.lang.Object $r8;
        androidx.camera.core.CameraInfo $r9;

        r0 := @this: androidx.camera.lifecycle.ProcessCameraProvider;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r1 = $r5;

        $r6 = r0.<androidx.camera.lifecycle.ProcessCameraProvider: androidx.camera.core.CameraX mCameraX>;

        $r7 = virtualinvoke $r6.<androidx.camera.core.CameraX: androidx.camera.core.impl.CameraRepository getCameraRepository()>();

        r2 = virtualinvoke $r7.<androidx.camera.core.impl.CameraRepository: java.util.LinkedHashSet getCameras()>();

        r3 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (androidx.camera.core.impl.CameraInternal) $r8;

        $r9 = interfaceinvoke r4.<androidx.camera.core.impl.CameraInternal: androidx.camera.core.CameraInfo getCameraInfo()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label1;

     label2:
        return r1;
    }

    private void <init>()
    {
        androidx.camera.lifecycle.ProcessCameraProvider r0;
        java.lang.Object $r1;
        com.google.common.util.concurrent.ListenableFuture $r2;
        androidx.camera.lifecycle.LifecycleCameraRepository $r3;

        r0 := @this: androidx.camera.lifecycle.ProcessCameraProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.lifecycle.ProcessCameraProvider: java.lang.Object mLock> = $r1;

        r0.<androidx.camera.lifecycle.ProcessCameraProvider: androidx.camera.core.CameraXConfig$Provider mCameraXConfigProvider> = null;

        $r2 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFuture(java.lang.Object)>(null);

        r0.<androidx.camera.lifecycle.ProcessCameraProvider: com.google.common.util.concurrent.ListenableFuture mCameraXShutdownFuture> = $r2;

        $r3 = new androidx.camera.lifecycle.LifecycleCameraRepository;

        specialinvoke $r3.<androidx.camera.lifecycle.LifecycleCameraRepository: void <init>()>();

        r0.<androidx.camera.lifecycle.ProcessCameraProvider: androidx.camera.lifecycle.LifecycleCameraRepository mLifecycleCameraRepository> = $r3;

        return;
    }

    private static androidx.camera.core.CameraXConfig lambda$configureInstanceInternal$3(androidx.camera.core.CameraXConfig)
    {
        androidx.camera.core.CameraXConfig r0;

        r0 := @parameter0: androidx.camera.core.CameraXConfig;

        return r0;
    }

    private java.lang.Object lambda$getOrCreateCameraXInstance$2(androidx.camera.core.CameraX, androidx.concurrent.futures.CallbackToFutureAdapter$Completer) throws java.lang.Exception
    {
        androidx.camera.lifecycle.ProcessCameraProvider r0;
        androidx.camera.core.CameraX r1;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r2;
        java.lang.Object r3, $r6;
        androidx.camera.core.impl.utils.futures.FutureChain r4, $r8;
        java.lang.Throwable r5, $r13;
        com.google.common.util.concurrent.ListenableFuture $r7;
        androidx.camera.core.impl.utils.futures.AsyncFunction $r9;
        java.util.concurrent.Executor $r10, $r12;
        androidx.camera.lifecycle.ProcessCameraProvider$1 $r11;

        r0 := @this: androidx.camera.lifecycle.ProcessCameraProvider;

        r1 := @parameter0: androidx.camera.core.CameraX;

        r2 := @parameter1: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        $r6 = r0.<androidx.camera.lifecycle.ProcessCameraProvider: java.lang.Object mLock>;

        r3 = $r6;

        entermonitor $r6;

     label1:
        $r7 = r0.<androidx.camera.lifecycle.ProcessCameraProvider: com.google.common.util.concurrent.ListenableFuture mCameraXShutdownFuture>;

        $r8 = staticinvoke <androidx.camera.core.impl.utils.futures.FutureChain: androidx.camera.core.impl.utils.futures.FutureChain 'from'(com.google.common.util.concurrent.ListenableFuture)>($r7);

        $r9 = dynamicinvoke "apply" <androidx.camera.core.impl.utils.futures.AsyncFunction (androidx.camera.core.CameraX)>(r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: com.google.common.util.concurrent.ListenableFuture __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.lifecycle.ProcessCameraProvider: com.google.common.util.concurrent.ListenableFuture lambda$getOrCreateCameraXInstance$1(androidx.camera.core.CameraX,java.lang.Void)>, methodtype: com.google.common.util.concurrent.ListenableFuture __METHODTYPE__(java.lang.Void));

        $r10 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor directExecutor()>();

        r4 = virtualinvoke $r8.<androidx.camera.core.impl.utils.futures.FutureChain: androidx.camera.core.impl.utils.futures.FutureChain transformAsync(androidx.camera.core.impl.utils.futures.AsyncFunction,java.util.concurrent.Executor)>($r9, $r10);

        $r11 = new androidx.camera.lifecycle.ProcessCameraProvider$1;

        specialinvoke $r11.<androidx.camera.lifecycle.ProcessCameraProvider$1: void <init>(androidx.camera.lifecycle.ProcessCameraProvider,androidx.concurrent.futures.CallbackToFutureAdapter$Completer,androidx.camera.core.CameraX)>(r0, r2, r1);

        $r12 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor directExecutor()>();

        staticinvoke <androidx.camera.core.impl.utils.futures.Futures: void addCallback(com.google.common.util.concurrent.ListenableFuture,androidx.camera.core.impl.utils.futures.FutureCallback,java.util.concurrent.Executor)>(r4, $r11, $r12);

        exitmonitor r3;

     label2:
        goto label5;

     label3:
        $r13 := @caughtexception;

        r5 = $r13;

        exitmonitor r3;

     label4:
        throw r5;

     label5:
        return "ProcessCameraProvider-initializeCameraX";

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private static com.google.common.util.concurrent.ListenableFuture lambda$getOrCreateCameraXInstance$1(androidx.camera.core.CameraX, java.lang.Void) throws java.lang.Exception
    {
        androidx.camera.core.CameraX r0;
        java.lang.Void r1;
        com.google.common.util.concurrent.ListenableFuture $r2;

        r0 := @parameter0: androidx.camera.core.CameraX;

        r1 := @parameter1: java.lang.Void;

        $r2 = virtualinvoke r0.<androidx.camera.core.CameraX: com.google.common.util.concurrent.ListenableFuture getInitializeFuture()>();

        return $r2;
    }

    private static androidx.camera.lifecycle.ProcessCameraProvider lambda$getInstance$0(android.content.Context, androidx.camera.core.CameraX)
    {
        android.content.Context r0, $r4;
        androidx.camera.core.CameraX r1;
        androidx.camera.lifecycle.ProcessCameraProvider $r2, $r3, $r5;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: androidx.camera.core.CameraX;

        $r2 = <androidx.camera.lifecycle.ProcessCameraProvider: androidx.camera.lifecycle.ProcessCameraProvider sAppInstance>;

        specialinvoke $r2.<androidx.camera.lifecycle.ProcessCameraProvider: void setCameraX(androidx.camera.core.CameraX)>(r1);

        $r3 = <androidx.camera.lifecycle.ProcessCameraProvider: androidx.camera.lifecycle.ProcessCameraProvider sAppInstance>;

        $r4 = staticinvoke <androidx.camera.core.impl.utils.ContextUtil: android.content.Context getApplicationContext(android.content.Context)>(r0);

        specialinvoke $r3.<androidx.camera.lifecycle.ProcessCameraProvider: void setContext(android.content.Context)>($r4);

        $r5 = <androidx.camera.lifecycle.ProcessCameraProvider: androidx.camera.lifecycle.ProcessCameraProvider sAppInstance>;

        return $r5;
    }

    static void <clinit>()
    {
        androidx.camera.lifecycle.ProcessCameraProvider $r0;

        $r0 = new androidx.camera.lifecycle.ProcessCameraProvider;

        specialinvoke $r0.<androidx.camera.lifecycle.ProcessCameraProvider: void <init>()>();

        <androidx.camera.lifecycle.ProcessCameraProvider: androidx.camera.lifecycle.ProcessCameraProvider sAppInstance> = $r0;

        return;
    }

androidx.camera.lifecycle.ProcessCameraProvider$1
<androidx.camera.lifecycle.ProcessCameraProvider$1: androidx.concurrent.futures.CallbackToFutureAdapter$Completer val$completer>
<androidx.camera.lifecycle.ProcessCameraProvider$1: androidx.camera.core.CameraX val$cameraX>
<androidx.camera.lifecycle.ProcessCameraProvider$1: androidx.camera.lifecycle.ProcessCameraProvider this$0>
    void <init>(androidx.camera.lifecycle.ProcessCameraProvider, androidx.concurrent.futures.CallbackToFutureAdapter$Completer, androidx.camera.core.CameraX)
    {
        androidx.camera.lifecycle.ProcessCameraProvider$1 r0;
        androidx.camera.lifecycle.ProcessCameraProvider r1;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r2;
        androidx.camera.core.CameraX r3;

        r0 := @this: androidx.camera.lifecycle.ProcessCameraProvider$1;

        r1 := @parameter0: androidx.camera.lifecycle.ProcessCameraProvider;

        r2 := @parameter1: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        r3 := @parameter2: androidx.camera.core.CameraX;

        r0.<androidx.camera.lifecycle.ProcessCameraProvider$1: androidx.camera.lifecycle.ProcessCameraProvider this$0> = r1;

        r0.<androidx.camera.lifecycle.ProcessCameraProvider$1: androidx.concurrent.futures.CallbackToFutureAdapter$Completer val$completer> = r2;

        r0.<androidx.camera.lifecycle.ProcessCameraProvider$1: androidx.camera.core.CameraX val$cameraX> = r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onSuccess(java.lang.Void)
    {
        androidx.camera.lifecycle.ProcessCameraProvider$1 r0;
        java.lang.Void r1;
        androidx.camera.core.CameraX $r2;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer $r3;

        r0 := @this: androidx.camera.lifecycle.ProcessCameraProvider$1;

        r1 := @parameter0: java.lang.Void;

        $r3 = r0.<androidx.camera.lifecycle.ProcessCameraProvider$1: androidx.concurrent.futures.CallbackToFutureAdapter$Completer val$completer>;

        $r2 = r0.<androidx.camera.lifecycle.ProcessCameraProvider$1: androidx.camera.core.CameraX val$cameraX>;

        virtualinvoke $r3.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean set(java.lang.Object)>($r2);

        return;
    }

    public void onFailure(java.lang.Throwable)
    {
        androidx.camera.lifecycle.ProcessCameraProvider$1 r0;
        java.lang.Throwable r1;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer $r2;

        r0 := @this: androidx.camera.lifecycle.ProcessCameraProvider$1;

        r1 := @parameter0: java.lang.Throwable;

        $r2 = r0.<androidx.camera.lifecycle.ProcessCameraProvider$1: androidx.concurrent.futures.CallbackToFutureAdapter$Completer val$completer>;

        virtualinvoke $r2.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean setException(java.lang.Throwable)>(r1);

        return;
    }

    public volatile void onSuccess(java.lang.Object)
    {
        androidx.camera.lifecycle.ProcessCameraProvider$1 r0;
        java.lang.Object r1;
        java.lang.Void $r2;

        r0 := @this: androidx.camera.lifecycle.ProcessCameraProvider$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Void) r1;

        virtualinvoke r0.<androidx.camera.lifecycle.ProcessCameraProvider$1: void onSuccess(java.lang.Void)>($r2);

        return;
    }

