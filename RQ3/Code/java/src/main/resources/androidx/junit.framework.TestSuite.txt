junit.framework.TestSuite
<junit.framework.TestSuite: java.lang.String fName>
<junit.framework.TestSuite: java.util.Vector fTests>
    public void <init>()
    {
        junit.framework.TestSuite $r0;
        java.util.Vector $r1;

        $r0 := @this: junit.framework.TestSuite;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Vector;

        specialinvoke $r1.<java.util.Vector: void <init>(int)>(10);

        $r0.<junit.framework.TestSuite: java.util.Vector fTests> = $r1;

        return;
    }

    public void <init>(java.lang.Class)
    {
        junit.framework.TestSuite $r0;
        java.lang.Class $r1;
        java.util.Vector $r2;

        $r0 := @this: junit.framework.TestSuite;

        $r1 := @parameter0: java.lang.Class;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>(int)>(10);

        $r0.<junit.framework.TestSuite: java.util.Vector fTests> = $r2;

        specialinvoke $r0.<junit.framework.TestSuite: void addTestsFromTestCase(java.lang.Class)>($r1);

        return;
    }

    public void <init>(java.lang.Class, java.lang.String)
    {
        junit.framework.TestSuite $r0;
        java.lang.Class $r1;
        java.lang.String $r2;

        $r0 := @this: junit.framework.TestSuite;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: java.lang.String;

        specialinvoke $r0.<junit.framework.TestSuite: void <init>(java.lang.Class)>($r1);

        virtualinvoke $r0.<junit.framework.TestSuite: void setName(java.lang.String)>($r2);

        return;
    }

    public void <init>(java.lang.String)
    {
        junit.framework.TestSuite $r0;
        java.lang.String $r1;
        java.util.Vector $r2;

        $r0 := @this: junit.framework.TestSuite;

        $r1 := @parameter0: java.lang.String;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>(int)>(10);

        $r0.<junit.framework.TestSuite: java.util.Vector fTests> = $r2;

        virtualinvoke $r0.<junit.framework.TestSuite: void setName(java.lang.String)>($r1);

        return;
    }

    public transient void <init>(java.lang.Class[])
    {
        junit.framework.TestSuite $r0;
        java.lang.Class[] $r1;
        junit.framework.Test $r2;
        java.util.Vector $r3;
        int $i0, $i1;
        java.lang.Class $r4;

        $r0 := @this: junit.framework.TestSuite;

        $r1 := @parameter0: java.lang.Class[];

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.Vector;

        specialinvoke $r3.<java.util.Vector: void <init>(int)>(10);

        $r0.<junit.framework.TestSuite: java.util.Vector fTests> = $r3;

        $i0 = lengthof $r1;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r4 = $r1[$i1];

        $r2 = specialinvoke $r0.<junit.framework.TestSuite: junit.framework.Test testCaseForClass(java.lang.Class)>($r4);

        virtualinvoke $r0.<junit.framework.TestSuite: void addTest(junit.framework.Test)>($r2);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void <init>(java.lang.Class[], java.lang.String)
    {
        junit.framework.TestSuite $r0;
        java.lang.Class[] $r1;
        java.lang.String $r2;

        $r0 := @this: junit.framework.TestSuite;

        $r1 := @parameter0: java.lang.Class[];

        $r2 := @parameter1: java.lang.String;

        specialinvoke $r0.<junit.framework.TestSuite: void <init>(java.lang.Class[])>($r1);

        virtualinvoke $r0.<junit.framework.TestSuite: void setName(java.lang.String)>($r2);

        return;
    }

    private void addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class)
    {
        junit.framework.TestSuite $r0;
        java.lang.reflect.Method $r1;
        java.util.List $r2;
        java.lang.Class $r3;
        java.lang.String $r4, $r5, $r6;
        boolean $z0;
        int $i0, $i1;
        java.lang.StringBuilder $r7;
        junit.framework.Test $r8;

        $r0 := @this: junit.framework.TestSuite;

        $r1 := @parameter0: java.lang.reflect.Method;

        $r2 := @parameter1: java.util.List;

        $r3 := @parameter2: java.lang.Class;

        $r4 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        return;

     label1:
        $z0 = specialinvoke $r0.<junit.framework.TestSuite: boolean isPublicTestMethod(java.lang.reflect.Method)>($r1);

        if $z0 != 0 goto label2;

        $z0 = specialinvoke $r0.<junit.framework.TestSuite: boolean isTestMethod(java.lang.reflect.Method)>($r1);

        if $z0 == 0 goto label3;

        $r4 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.String getName()>();

        $r5 = virtualinvoke $r3.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        $i0 = $i0 + 28;

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r5);

        $i1 = virtualinvoke $r6.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Test method isn\'t public: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = staticinvoke <junit.framework.TestSuite: junit.framework.Test warning(java.lang.String)>($r4);

        virtualinvoke $r0.<junit.framework.TestSuite: void addTest(junit.framework.Test)>($r8);

        return;

     label2:
        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r4);

        $r8 = staticinvoke <junit.framework.TestSuite: junit.framework.Test createTest(java.lang.Class,java.lang.String)>($r3, $r4);

        virtualinvoke $r0.<junit.framework.TestSuite: void addTest(junit.framework.Test)>($r8);

     label3:
        return;
    }

    private void addTestsFromTestCase(java.lang.Class)
    {
        junit.framework.TestSuite $r0;
        java.lang.Class $r1, $r9, $r10;
        int $i0, $i1;
        java.lang.reflect.Method $r2;
        java.lang.String $r3, $r4;
        boolean $z0;
        java.lang.StringBuilder $r5;
        junit.framework.Test $r6;
        java.lang.Throwable $r7;
        java.util.ArrayList $r8;
        java.lang.reflect.Method[] $r11;
        java.util.Vector $r12;

        $r0 := @this: junit.framework.TestSuite;

        $r1 := @parameter0: java.lang.Class;

        $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r0.<junit.framework.TestSuite: java.lang.String fName> = $r3;

     label01:
        staticinvoke <junit.framework.TestSuite: java.lang.reflect.Constructor getTestConstructor(java.lang.Class)>($r1);

     label02:
        $i0 = virtualinvoke $r1.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z0 != 0 goto label04;

        $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i0 = $i0 + 20;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not public");

        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = staticinvoke <junit.framework.TestSuite: junit.framework.Test warning(java.lang.String)>($r3);

        virtualinvoke $r0.<junit.framework.TestSuite: void addTest(junit.framework.Test)>($r6);

        return;

     label03:
        $r7 := @caughtexception;

        $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i0 = $i0 + 68;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has no public constructor TestCase(String name) or TestCase()");

        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = staticinvoke <junit.framework.TestSuite: junit.framework.Test warning(java.lang.String)>($r3);

        virtualinvoke $r0.<junit.framework.TestSuite: void addTest(junit.framework.Test)>($r6);

        return;

     label04:
        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        $r9 = $r1;

     label05:
        $r10 = class "Ljunit/framework/Test;";

        $z0 = virtualinvoke $r10.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r9);

        if $z0 == 0 goto label08;

        $r11 = staticinvoke <org.junit.internal.MethodSorter: java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)>($r9);

        $i0 = lengthof $r11;

        $i1 = 0;

     label06:
        if $i1 >= $i0 goto label07;

        $r2 = $r11[$i1];

        specialinvoke $r0.<junit.framework.TestSuite: void addTestMethod(java.lang.reflect.Method,java.util.List,java.lang.Class)>($r2, $r8, $r1);

        $i1 = $i1 + 1;

        goto label06;

     label07:
        $r9 = virtualinvoke $r9.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label05;

     label08:
        $r12 = $r0.<junit.framework.TestSuite: java.util.Vector fTests>;

        $i0 = virtualinvoke $r12.<java.util.Vector: int size()>();

        if $i0 != 0 goto label11;

        $r3 = "No tests found in ";

        $r4 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i0 == 0 goto label10;

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String concat(java.lang.String)>($r4);

     label09:
        $r6 = staticinvoke <junit.framework.TestSuite: junit.framework.Test warning(java.lang.String)>($r3);

        virtualinvoke $r0.<junit.framework.TestSuite: void addTest(junit.framework.Test)>($r6);

        return;

     label10:
        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(java.lang.String)>("No tests found in ");

        goto label09;

     label11:
        return;

        catch java.lang.NoSuchMethodException from label01 to label02 with label03;
    }

    public static junit.framework.Test createTest(java.lang.Class, java.lang.String)
    {
        java.lang.Class $r0;
        java.lang.String $r1, $r9, $r12;
        java.lang.reflect.Constructor $r2;
        java.lang.Class[] $r3;
        int $i0, $i1;
        java.lang.Object[] $r4;
        java.lang.Object $r5;
        boolean $z0;
        junit.framework.TestCase $r6;
        junit.framework.Test $r7;
        java.lang.Throwable $r8, $r11, $r13, $r14;
        java.lang.StringBuilder $r10, r15;
        java.lang.reflect.InvocationTargetException r16;

        $r0 := @parameter0: java.lang.Class;

        $r1 := @parameter1: java.lang.String;

     label01:
        $r2 = staticinvoke <junit.framework.TestSuite: java.lang.reflect.Constructor getTestConstructor(java.lang.Class)>($r0);

     label02:
        $r3 = virtualinvoke $r2.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

     label03:
        $i0 = lengthof $r3;

        if $i0 != 0 goto label09;

        $r4 = newarray (java.lang.Object)[0];

     label04:
        $r5 = virtualinvoke $r2.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r4);

     label05:
        $z0 = $r5 instanceof junit.framework.TestCase;

        if $z0 == 0 goto label15;

        $r6 = (junit.framework.TestCase) $r5;

     label06:
        virtualinvoke $r6.<junit.framework.TestCase: void setName(java.lang.String)>($r1);

     label07:
        $r7 = (junit.framework.Test) $r5;

        return $r7;

     label08:
        $r8 := @caughtexception;

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        $i0 = virtualinvoke $r9.<java.lang.String: int length()>();

        $i0 = $i0 + 68;

        r15 = new java.lang.StringBuilder;

        specialinvoke r15.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r10 = virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class ");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has no public constructor TestCase(String name) or TestCase()");

        $r1 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = staticinvoke <junit.framework.TestSuite: junit.framework.Test warning(java.lang.String)>($r1);

        return $r7;

     label09:
        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = $r1;

     label10:
        $r5 = virtualinvoke $r2.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r4);

     label11:
        goto label07;

     label12:
        $r11 := @caughtexception;

        $r9 = staticinvoke <junit.framework.TestSuite: java.lang.String exceptionToString(java.lang.Throwable)>($r11);

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        $i0 = virtualinvoke $r12.<java.lang.String: int length()>();

        $i0 = $i0 + 33;

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r9);

        $i1 = virtualinvoke $r12.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        r15 = new java.lang.StringBuilder;

        specialinvoke r15.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r10 = virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot instantiate test case: ");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r1 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = staticinvoke <junit.framework.TestSuite: junit.framework.Test warning(java.lang.String)>($r1);

        return $r7;

     label13:
        $r13 := @caughtexception;

        r16 = (java.lang.reflect.InvocationTargetException) $r13;

        $r8 = virtualinvoke r16.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $r9 = staticinvoke <junit.framework.TestSuite: java.lang.String exceptionToString(java.lang.Throwable)>($r8);

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        $i0 = virtualinvoke $r12.<java.lang.String: int length()>();

        $i0 = $i0 + 29;

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r9);

        $i1 = virtualinvoke $r12.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        r15 = new java.lang.StringBuilder;

        specialinvoke r15.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r10 = virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in constructor: ");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r1 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = staticinvoke <junit.framework.TestSuite: junit.framework.Test warning(java.lang.String)>($r1);

        return $r7;

     label14:
        $r14 := @caughtexception;

        $r9 = staticinvoke <junit.framework.TestSuite: java.lang.String exceptionToString(java.lang.Throwable)>($r14);

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        $i0 = virtualinvoke $r12.<java.lang.String: int length()>();

        $i0 = $i0 + 28;

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r9);

        $i1 = virtualinvoke $r12.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        r15 = new java.lang.StringBuilder;

        specialinvoke r15.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r10 = virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot access test case: ");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r1 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = staticinvoke <junit.framework.TestSuite: junit.framework.Test warning(java.lang.String)>($r1);

        return $r7;

     label15:
        goto label07;

        catch java.lang.NoSuchMethodException from label01 to label02 with label08;
        catch java.lang.InstantiationException from label02 to label03 with label12;
        catch java.lang.InstantiationException from label04 to label05 with label12;
        catch java.lang.InstantiationException from label06 to label07 with label12;
        catch java.lang.reflect.InvocationTargetException from label02 to label03 with label13;
        catch java.lang.reflect.InvocationTargetException from label04 to label05 with label13;
        catch java.lang.reflect.InvocationTargetException from label06 to label07 with label13;
        catch java.lang.IllegalAccessException from label02 to label03 with label14;
        catch java.lang.IllegalAccessException from label04 to label05 with label14;
        catch java.lang.IllegalAccessException from label06 to label07 with label14;
        catch java.lang.InstantiationException from label10 to label11 with label12;
        catch java.lang.reflect.InvocationTargetException from label10 to label11 with label13;
        catch java.lang.IllegalAccessException from label10 to label11 with label14;
    }

    private static java.lang.String exceptionToString(java.lang.Throwable)
    {
        java.lang.Throwable $r0;
        java.io.PrintWriter $r1;
        java.lang.String $r2;
        java.io.StringWriter $r3;

        $r0 := @parameter0: java.lang.Throwable;

        $r3 = new java.io.StringWriter;

        specialinvoke $r3.<java.io.StringWriter: void <init>()>();

        $r1 = new java.io.PrintWriter;

        specialinvoke $r1.<java.io.PrintWriter: void <init>(java.io.Writer)>($r3);

        staticinvoke <com.google.devtools.build.android.desugar.runtime.ThrowableExtension: void printStackTrace(java.lang.Throwable,java.io.PrintWriter)>($r0, $r1);

        $r2 = virtualinvoke $r3.<java.io.StringWriter: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.reflect.Constructor getTestConstructor(java.lang.Class) throws java.lang.NoSuchMethodException
    {
        java.lang.Class $r0;
        java.lang.Class[] $r1;
        java.lang.reflect.Constructor $r2;
        java.lang.Throwable $r3;

        $r0 := @parameter0: java.lang.Class;

        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "Ljava/lang/String;";

     label1:
        $r2 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r1 = newarray (java.lang.Class)[0];

        $r2 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r1);

        return $r2;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }

    private boolean isPublicTestMethod(java.lang.reflect.Method)
    {
        junit.framework.TestSuite $r0;
        java.lang.reflect.Method $r1;
        boolean $z0;
        int $i0;

        $r0 := @this: junit.framework.TestSuite;

        $r1 := @parameter0: java.lang.reflect.Method;

        $z0 = specialinvoke $r0.<junit.framework.TestSuite: boolean isTestMethod(java.lang.reflect.Method)>($r1);

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke $r1.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean isTestMethod(java.lang.reflect.Method)
    {
        junit.framework.TestSuite $r0;
        java.lang.reflect.Method $r1;
        java.lang.Class[] $r2;
        int $i0;
        java.lang.String $r3;
        boolean $z0;
        java.lang.Class $r4, $r5;

        $r0 := @this: junit.framework.TestSuite;

        $r1 := @parameter0: java.lang.reflect.Method;

        $r2 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r2;

        if $i0 != 0 goto label1;

        $r3 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("test");

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r5 = <java.lang.Void: java.lang.Class TYPE>;

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private junit.framework.Test testCaseForClass(java.lang.Class)
    {
        junit.framework.TestSuite $r0;
        java.lang.Class $r1, $r2;
        boolean $z0;
        java.lang.String $r3;
        junit.framework.Test $r4;

        $r0 := @this: junit.framework.TestSuite;

        $r1 := @parameter0: java.lang.Class;

        $r2 = class "Ljunit/framework/TestCase;";

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        if $z0 == 0 goto label1;

        $r0 = new junit.framework.TestSuite;

        $r1 = virtualinvoke $r1.<java.lang.Class: java.lang.Class asSubclass(java.lang.Class)>(class "Ljunit/framework/TestCase;");

        specialinvoke $r0.<junit.framework.TestSuite: void <init>(java.lang.Class)>($r1);

        return $r0;

     label1:
        $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String concat(java.lang.String)>(" does not extend TestCase");

        $r4 = staticinvoke <junit.framework.TestSuite: junit.framework.Test warning(java.lang.String)>($r3);

        return $r4;
    }

    public static junit.framework.Test warning(java.lang.String)
    {
        java.lang.String $r0;
        junit.framework.TestSuite$1 $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = new junit.framework.TestSuite$1;

        specialinvoke $r1.<junit.framework.TestSuite$1: void <init>(java.lang.String,java.lang.String)>("warning", $r0);

        return $r1;
    }

    public void addTest(junit.framework.Test)
    {
        junit.framework.TestSuite $r0;
        junit.framework.Test $r1;
        java.util.Vector $r2;

        $r0 := @this: junit.framework.TestSuite;

        $r1 := @parameter0: junit.framework.Test;

        $r2 = $r0.<junit.framework.TestSuite: java.util.Vector fTests>;

        virtualinvoke $r2.<java.util.Vector: boolean add(java.lang.Object)>($r1);

        return;
    }

    public void addTestSuite(java.lang.Class)
    {
        junit.framework.TestSuite $r0, $r2;
        java.lang.Class $r1;

        $r0 := @this: junit.framework.TestSuite;

        $r1 := @parameter0: java.lang.Class;

        $r2 = new junit.framework.TestSuite;

        specialinvoke $r2.<junit.framework.TestSuite: void <init>(java.lang.Class)>($r1);

        virtualinvoke $r0.<junit.framework.TestSuite: void addTest(junit.framework.Test)>($r2);

        return;
    }

    public int countTestCases()
    {
        junit.framework.TestSuite $r0;
        java.util.Vector $r1;
        java.util.Iterator $r2;
        int $i0, $i1;
        boolean $z0;
        java.lang.Object $r3;
        junit.framework.Test $r4;

        $r0 := @this: junit.framework.TestSuite;

        $r1 = $r0.<junit.framework.TestSuite: java.util.Vector fTests>;

        $r2 = virtualinvoke $r1.<java.util.Vector: java.util.Iterator iterator()>();

        $i0 = 0;

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (junit.framework.Test) $r3;

        $i1 = interfaceinvoke $r4.<junit.framework.Test: int countTestCases()>();

        $i0 = $i1 + $i0;

        goto label1;

     label2:
        return $i0;
    }

    public java.lang.String getName()
    {
        junit.framework.TestSuite $r0;
        java.lang.String r1;

        $r0 := @this: junit.framework.TestSuite;

        r1 = $r0.<junit.framework.TestSuite: java.lang.String fName>;

        return r1;
    }

    public void run(junit.framework.TestResult)
    {
        junit.framework.TestSuite $r0;
        junit.framework.TestResult $r1;
        java.util.Vector $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        junit.framework.Test $r5;

        $r0 := @this: junit.framework.TestSuite;

        $r1 := @parameter0: junit.framework.TestResult;

        $r2 = $r0.<junit.framework.TestSuite: java.util.Vector fTests>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (junit.framework.Test) $r4;

        $z0 = virtualinvoke $r1.<junit.framework.TestResult: boolean shouldStop()>();

        if $z0 == 0 goto label2;

        return;

     label2:
        virtualinvoke $r0.<junit.framework.TestSuite: void runTest(junit.framework.Test,junit.framework.TestResult)>($r5, $r1);

        goto label1;

     label3:
        return;
    }

    public void runTest(junit.framework.Test, junit.framework.TestResult)
    {
        junit.framework.TestSuite $r0;
        junit.framework.Test $r1;
        junit.framework.TestResult $r2;

        $r0 := @this: junit.framework.TestSuite;

        $r1 := @parameter0: junit.framework.Test;

        $r2 := @parameter1: junit.framework.TestResult;

        interfaceinvoke $r1.<junit.framework.Test: void run(junit.framework.TestResult)>($r2);

        return;
    }

    public void setName(java.lang.String)
    {
        junit.framework.TestSuite $r0;
        java.lang.String $r1;

        $r0 := @this: junit.framework.TestSuite;

        $r1 := @parameter0: java.lang.String;

        $r0.<junit.framework.TestSuite: java.lang.String fName> = $r1;

        return;
    }

    public junit.framework.Test testAt(int)
    {
        junit.framework.TestSuite $r0;
        int $i0;
        java.lang.Object $r1;
        java.util.Vector $r2;
        junit.framework.Test $r3;

        $r0 := @this: junit.framework.TestSuite;

        $i0 := @parameter0: int;

        $r2 = $r0.<junit.framework.TestSuite: java.util.Vector fTests>;

        $r1 = virtualinvoke $r2.<java.util.Vector: java.lang.Object get(int)>($i0);

        $r3 = (junit.framework.Test) $r1;

        return $r3;
    }

    public int testCount()
    {
        junit.framework.TestSuite $r0;
        int $i0;
        java.util.Vector $r1;

        $r0 := @this: junit.framework.TestSuite;

        $r1 = $r0.<junit.framework.TestSuite: java.util.Vector fTests>;

        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        return $i0;
    }

    public java.util.Enumeration tests()
    {
        junit.framework.TestSuite $r0;
        java.util.Enumeration $r1;
        java.util.Vector $r2;

        $r0 := @this: junit.framework.TestSuite;

        $r2 = $r0.<junit.framework.TestSuite: java.util.Vector fTests>;

        $r1 = virtualinvoke $r2.<java.util.Vector: java.util.Enumeration elements()>();

        return $r1;
    }

    public java.lang.String toString()
    {
        junit.framework.TestSuite $r0;
        java.lang.String $r1;

        $r0 := @this: junit.framework.TestSuite;

        $r1 = virtualinvoke $r0.<junit.framework.TestSuite: java.lang.String getName()>();

        if $r1 == null goto label1;

        $r1 = virtualinvoke $r0.<junit.framework.TestSuite: java.lang.String getName()>();

        return $r1;

     label1:
        $r1 = specialinvoke $r0.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

junit.framework.TestSuite$1
<junit.framework.TestSuite$1: java.lang.String val$message>
    void <init>(java.lang.String, java.lang.String)
    {
        junit.framework.TestSuite$1 $r0;
        java.lang.String $r1, $r2;

        $r0 := @this: junit.framework.TestSuite$1;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r0.<junit.framework.TestSuite$1: java.lang.String val$message> = $r2;

        specialinvoke $r0.<junit.framework.TestCase: void <init>(java.lang.String)>($r1);

        return;
    }

    protected void runTest()
    {
        junit.framework.TestSuite$1 $r0;
        java.lang.String $r1;

        $r0 := @this: junit.framework.TestSuite$1;

        $r1 = $r0.<junit.framework.TestSuite$1: java.lang.String val$message>;

        staticinvoke <junit.framework.TestSuite$1: void fail(java.lang.String)>($r1);

        return;
    }

