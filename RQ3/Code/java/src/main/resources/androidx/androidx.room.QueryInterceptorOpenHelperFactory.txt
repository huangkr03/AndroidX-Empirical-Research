androidx.room.QueryInterceptorOpenHelperFactory
<androidx.room.QueryInterceptorOpenHelperFactory: androidx.sqlite.db.SupportSQLiteOpenHelper$Factory delegate>
<androidx.room.QueryInterceptorOpenHelperFactory: java.util.concurrent.Executor queryCallbackExecutor>
<androidx.room.QueryInterceptorOpenHelperFactory: androidx.room.RoomDatabase$QueryCallback queryCallback>
    public void <init>(androidx.sqlite.db.SupportSQLiteOpenHelper$Factory, java.util.concurrent.Executor, androidx.room.RoomDatabase$QueryCallback)
    {
        androidx.room.QueryInterceptorOpenHelperFactory r0;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Factory r1;
        java.util.concurrent.Executor r2;
        androidx.room.RoomDatabase$QueryCallback r3;

        r0 := @this: androidx.room.QueryInterceptorOpenHelperFactory;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteOpenHelper$Factory;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: androidx.room.RoomDatabase$QueryCallback;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "delegate");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "queryCallbackExecutor");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "queryCallback");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.room.QueryInterceptorOpenHelperFactory: androidx.sqlite.db.SupportSQLiteOpenHelper$Factory delegate> = r1;

        r0.<androidx.room.QueryInterceptorOpenHelperFactory: java.util.concurrent.Executor queryCallbackExecutor> = r2;

        r0.<androidx.room.QueryInterceptorOpenHelperFactory: androidx.room.RoomDatabase$QueryCallback queryCallback> = r3;

        return;
    }

    public androidx.sqlite.db.SupportSQLiteOpenHelper create(androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration)
    {
        androidx.room.QueryInterceptorOpenHelperFactory r0;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration r1;
        androidx.room.QueryInterceptorOpenHelper $r2;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Factory $r3;
        androidx.sqlite.db.SupportSQLiteOpenHelper $r4, $r7;
        androidx.room.RoomDatabase$QueryCallback $r5;
        java.util.concurrent.Executor $r6;

        r0 := @this: androidx.room.QueryInterceptorOpenHelperFactory;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "configuration");

        $r2 = new androidx.room.QueryInterceptorOpenHelper;

        $r3 = r0.<androidx.room.QueryInterceptorOpenHelperFactory: androidx.sqlite.db.SupportSQLiteOpenHelper$Factory delegate>;

        $r4 = interfaceinvoke $r3.<androidx.sqlite.db.SupportSQLiteOpenHelper$Factory: androidx.sqlite.db.SupportSQLiteOpenHelper create(androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration)>(r1);

        $r6 = r0.<androidx.room.QueryInterceptorOpenHelperFactory: java.util.concurrent.Executor queryCallbackExecutor>;

        $r5 = r0.<androidx.room.QueryInterceptorOpenHelperFactory: androidx.room.RoomDatabase$QueryCallback queryCallback>;

        specialinvoke $r2.<androidx.room.QueryInterceptorOpenHelper: void <init>(androidx.sqlite.db.SupportSQLiteOpenHelper,java.util.concurrent.Executor,androidx.room.RoomDatabase$QueryCallback)>($r4, $r6, $r5);

        $r7 = (androidx.sqlite.db.SupportSQLiteOpenHelper) $r2;

        return $r7;
    }

