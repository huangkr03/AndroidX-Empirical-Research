kotlin.ranges.URangesKt___URangesKt
    public void <init>()
    {
        kotlin.ranges.URangesKt___URangesKt $r0;

        $r0 := @this: kotlin.ranges.URangesKt___URangesKt;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static final short coerceAtLeast-5PvTz6A(short, short)
    {
        short $s0, $s1;
        char $c2, $c4;
        int $i3;

        $s0 := @parameter0: short;

        $s1 := @parameter1: short;

        $c4 = (char) $s0;

        $c2 = (char) $s1;

        $i3 = staticinvoke <kotlin.jvm.internal.Intrinsics: int compare(int,int)>($c4, $c2);

        if $i3 >= 0 goto label1;

        return $s1;

     label1:
        return $s0;
    }

    public static final int coerceAtLeast-J1ME1BU(int, int)
    {
        int $i0, $i1, $i2;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = staticinvoke <kotlin.UnsignedKt: int uintCompare(int,int)>($i0, $i1);

        if $i2 >= 0 goto label1;

        return $i1;

     label1:
        return $i0;
    }

    public static final byte coerceAtLeast-Kr8caGY(byte, byte)
    {
        byte $b0, $b1;
        short $s2, $s4;
        int $i3;

        $b0 := @parameter0: byte;

        $b1 := @parameter1: byte;

        $s4 = $b0 & 255;

        $s2 = $b1 & 255;

        $i3 = staticinvoke <kotlin.jvm.internal.Intrinsics: int compare(int,int)>($s4, $s2);

        if $i3 >= 0 goto label1;

        return $b1;

     label1:
        return $b0;
    }

    public static final long coerceAtLeast-eb3DHEI(long, long)
    {
        long $l0, $l1;
        int $i2;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $i2 = staticinvoke <kotlin.UnsignedKt: int ulongCompare(long,long)>($l0, $l1);

        if $i2 >= 0 goto label1;

        return $l1;

     label1:
        return $l0;
    }

    public static final short coerceAtMost-5PvTz6A(short, short)
    {
        short $s0, $s1;
        char $c2, $c4;
        int $i3;

        $s0 := @parameter0: short;

        $s1 := @parameter1: short;

        $c4 = (char) $s0;

        $c2 = (char) $s1;

        $i3 = staticinvoke <kotlin.jvm.internal.Intrinsics: int compare(int,int)>($c4, $c2);

        if $i3 <= 0 goto label1;

        return $s1;

     label1:
        return $s0;
    }

    public static final int coerceAtMost-J1ME1BU(int, int)
    {
        int $i0, $i1, $i2;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = staticinvoke <kotlin.UnsignedKt: int uintCompare(int,int)>($i0, $i1);

        if $i2 <= 0 goto label1;

        return $i1;

     label1:
        return $i0;
    }

    public static final byte coerceAtMost-Kr8caGY(byte, byte)
    {
        byte $b0, $b1;
        short $s2, $s4;
        int $i3;

        $b0 := @parameter0: byte;

        $b1 := @parameter1: byte;

        $s4 = $b0 & 255;

        $s2 = $b1 & 255;

        $i3 = staticinvoke <kotlin.jvm.internal.Intrinsics: int compare(int,int)>($s4, $s2);

        if $i3 <= 0 goto label1;

        return $b1;

     label1:
        return $b0;
    }

    public static final long coerceAtMost-eb3DHEI(long, long)
    {
        long $l0, $l1;
        int $i2;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $i2 = staticinvoke <kotlin.UnsignedKt: int ulongCompare(long,long)>($l0, $l1);

        if $i2 <= 0 goto label1;

        return $l1;

     label1:
        return $l0;
    }

    public static final long coerceIn-JPwROB0(long, kotlin.ranges.ClosedRange)
    {
        long $l0, $l1;
        kotlin.ranges.ClosedRange $r0;
        boolean $z0;
        kotlin.ULong $r1;
        kotlin.ranges.ClosedFloatingPointRange $r2;
        java.lang.Comparable $r3;
        int $i2;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;

        $l0 := @parameter0: long;

        $r0 := @parameter1: kotlin.ranges.ClosedRange;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "range");

        $z0 = $r0 instanceof kotlin.ranges.ClosedFloatingPointRange;

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r2 = (kotlin.ranges.ClosedFloatingPointRange) $r0;

        $r3 = staticinvoke <kotlin.ranges.RangesKt: java.lang.Comparable coerceIn(java.lang.Comparable,kotlin.ranges.ClosedFloatingPointRange)>($r1, $r2);

        $r1 = (kotlin.ULong) $r3;

        $l0 = virtualinvoke $r1.<kotlin.ULong: long unbox-impl()>();

        return $l0;

     label1:
        $z0 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: boolean isEmpty()>();

        if $z0 != 0 goto label6;

        $r3 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: java.lang.Comparable getStart()>();

        $r1 = (kotlin.ULong) $r3;

        $l1 = virtualinvoke $r1.<kotlin.ULong: long unbox-impl()>();

        $i2 = staticinvoke <kotlin.UnsignedKt: int ulongCompare(long,long)>($l0, $l1);

        if $i2 >= 0 goto label3;

        $r3 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: java.lang.Comparable getStart()>();

        $r1 = (kotlin.ULong) $r3;

        $l0 = virtualinvoke $r1.<kotlin.ULong: long unbox-impl()>();

     label2:
        goto label4;

     label3:
        $r3 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: java.lang.Comparable getEndInclusive()>();

        $r1 = (kotlin.ULong) $r3;

        $l1 = virtualinvoke $r1.<kotlin.ULong: long unbox-impl()>();

        $i2 = staticinvoke <kotlin.UnsignedKt: int ulongCompare(long,long)>($l0, $l1);

        if $i2 > 0 goto label5;

        goto label2;

     label4:
        return $l0;

     label5:
        $r3 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: java.lang.Comparable getEndInclusive()>();

        $r1 = (kotlin.ULong) $r3;

        $l0 = virtualinvoke $r1.<kotlin.ULong: long unbox-impl()>();

        return $l0;

     label6:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot coerce value to an empty range: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        goto label7;

     label7:
        throw $r4;
    }

    public static final short coerceIn-VKSA0NQ(short, short, short)
    {
        short $s0, $s1, $s2;
        char $c3, $c4;
        int $i5;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $s0 := @parameter0: short;

        $s1 := @parameter1: short;

        $s2 := @parameter2: short;

        $c3 = (char) $s1;

        $c4 = (char) $s2;

        $i5 = staticinvoke <kotlin.jvm.internal.Intrinsics: int compare(int,int)>($c3, $c4);

        if $i5 > 0 goto label3;

        $c3 = (char) $s0;

        $c4 = (char) $s1;

        $i5 = staticinvoke <kotlin.jvm.internal.Intrinsics: int compare(int,int)>($c3, $c4);

        if $i5 >= 0 goto label1;

        return $s1;

     label1:
        $c3 = (char) $s0;

        $c4 = (char) $s2;

        $i5 = staticinvoke <kotlin.jvm.internal.Intrinsics: int compare(int,int)>($c3, $c4);

        if $i5 <= 0 goto label2;

        return $s2;

     label2:
        return $s0;

     label3:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot coerce value to an empty range: maximum ");

        $r2 = staticinvoke <kotlin.UShort: java.lang.String toString-impl(short)>($s2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is less than minimum ");

        $r2 = staticinvoke <kotlin.UShort: java.lang.String toString-impl(short)>($s1);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r0;
    }

    public static final int coerceIn-WZ9TVnA(int, int, int)
    {
        int $i0, $i1, $i2, $i3;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 = staticinvoke <kotlin.UnsignedKt: int uintCompare(int,int)>($i1, $i2);

        if $i3 > 0 goto label3;

        $i3 = staticinvoke <kotlin.UnsignedKt: int uintCompare(int,int)>($i0, $i1);

        if $i3 >= 0 goto label1;

        return $i1;

     label1:
        $i1 = staticinvoke <kotlin.UnsignedKt: int uintCompare(int,int)>($i0, $i2);

        if $i1 <= 0 goto label2;

        return $i2;

     label2:
        return $i0;

     label3:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot coerce value to an empty range: maximum ");

        $r2 = staticinvoke <kotlin.UInt: java.lang.String toString-impl(int)>($i2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is less than minimum ");

        $r2 = staticinvoke <kotlin.UInt: java.lang.String toString-impl(int)>($i1);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r0;
    }

    public static final byte coerceIn-b33U2AM(byte, byte, byte)
    {
        byte $b0, $b1, $b2;
        short $s3, $s4;
        int $i5;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $b0 := @parameter0: byte;

        $b1 := @parameter1: byte;

        $b2 := @parameter2: byte;

        $s3 = $b1 & 255;

        $s4 = $b2 & 255;

        $i5 = staticinvoke <kotlin.jvm.internal.Intrinsics: int compare(int,int)>($s3, $s4);

        if $i5 > 0 goto label3;

        $s3 = $b0 & 255;

        $s4 = $b1 & 255;

        $i5 = staticinvoke <kotlin.jvm.internal.Intrinsics: int compare(int,int)>($s3, $s4);

        if $i5 >= 0 goto label1;

        return $b1;

     label1:
        $s3 = $b0 & 255;

        $s4 = $b2 & 255;

        $i5 = staticinvoke <kotlin.jvm.internal.Intrinsics: int compare(int,int)>($s3, $s4);

        if $i5 <= 0 goto label2;

        return $b2;

     label2:
        return $b0;

     label3:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot coerce value to an empty range: maximum ");

        $r2 = staticinvoke <kotlin.UByte: java.lang.String toString-impl(byte)>($b2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is less than minimum ");

        $r2 = staticinvoke <kotlin.UByte: java.lang.String toString-impl(byte)>($b1);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r0;
    }

    public static final long coerceIn-sambcqE(long, long, long)
    {
        long $l0, $l1, $l2;
        int $i3;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $l2 := @parameter2: long;

        $i3 = staticinvoke <kotlin.UnsignedKt: int ulongCompare(long,long)>($l1, $l2);

        if $i3 > 0 goto label3;

        $i3 = staticinvoke <kotlin.UnsignedKt: int ulongCompare(long,long)>($l0, $l1);

        if $i3 >= 0 goto label1;

        return $l1;

     label1:
        $i3 = staticinvoke <kotlin.UnsignedKt: int ulongCompare(long,long)>($l0, $l2);

        if $i3 <= 0 goto label2;

        return $l2;

     label2:
        return $l0;

     label3:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot coerce value to an empty range: maximum ");

        $r2 = staticinvoke <kotlin.ULong: java.lang.String toString-impl(long)>($l2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is less than minimum ");

        $r2 = staticinvoke <kotlin.ULong: java.lang.String toString-impl(long)>($l1);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r0;
    }

    public static final int coerceIn-wuiCnnA(int, kotlin.ranges.ClosedRange)
    {
        int $i0, $i1;
        kotlin.ranges.ClosedRange $r0;
        boolean $z0;
        kotlin.UInt $r1;
        kotlin.ranges.ClosedFloatingPointRange $r2;
        java.lang.Comparable $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;

        $i0 := @parameter0: int;

        $r0 := @parameter1: kotlin.ranges.ClosedRange;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "range");

        $z0 = $r0 instanceof kotlin.ranges.ClosedFloatingPointRange;

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r2 = (kotlin.ranges.ClosedFloatingPointRange) $r0;

        $r3 = staticinvoke <kotlin.ranges.RangesKt: java.lang.Comparable coerceIn(java.lang.Comparable,kotlin.ranges.ClosedFloatingPointRange)>($r1, $r2);

        $r1 = (kotlin.UInt) $r3;

        $i0 = virtualinvoke $r1.<kotlin.UInt: int unbox-impl()>();

        return $i0;

     label1:
        $z0 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $r3 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: java.lang.Comparable getStart()>();

        $r1 = (kotlin.UInt) $r3;

        $i1 = virtualinvoke $r1.<kotlin.UInt: int unbox-impl()>();

        $i1 = staticinvoke <kotlin.UnsignedKt: int uintCompare(int,int)>($i0, $i1);

        if $i1 >= 0 goto label2;

        $r3 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: java.lang.Comparable getStart()>();

        $r1 = (kotlin.UInt) $r3;

        $i0 = virtualinvoke $r1.<kotlin.UInt: int unbox-impl()>();

        return $i0;

     label2:
        $r3 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: java.lang.Comparable getEndInclusive()>();

        $r1 = (kotlin.UInt) $r3;

        $i1 = virtualinvoke $r1.<kotlin.UInt: int unbox-impl()>();

        $i1 = staticinvoke <kotlin.UnsignedKt: int uintCompare(int,int)>($i0, $i1);

        if $i1 <= 0 goto label4;

        $r3 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: java.lang.Comparable getEndInclusive()>();

        $r1 = (kotlin.UInt) $r3;

        $i0 = virtualinvoke $r1.<kotlin.UInt: int unbox-impl()>();

        return $i0;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot coerce value to an empty range: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label4:
        return $i0;
    }

    public static final boolean contains-68kG9v0(kotlin.ranges.UIntRange, byte)
    {
        kotlin.ranges.UIntRange $r0;
        byte $b0;
        short $s1;
        int $i2;
        boolean $z0;

        $r0 := @parameter0: kotlin.ranges.UIntRange;

        $b0 := @parameter1: byte;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$contains");

        $s1 = $b0 & 255;

        $i2 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($s1);

        $z0 = virtualinvoke $r0.<kotlin.ranges.UIntRange: boolean contains-WZ4Q5Ns(int)>($i2);

        return $z0;
    }

    private static final boolean contains-GYNo2lE(kotlin.ranges.ULongRange, kotlin.ULong)
    {
        kotlin.ULong $r0;
        kotlin.ranges.ULongRange $r1;
        long $l0;
        boolean $z0;

        $r1 := @parameter0: kotlin.ranges.ULongRange;

        $r0 := @parameter1: kotlin.ULong;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$contains");

        if $r0 == null goto label1;

        $l0 = virtualinvoke $r0.<kotlin.ULong: long unbox-impl()>();

        $z0 = virtualinvoke $r1.<kotlin.ranges.ULongRange: boolean contains-VKZWuLQ(long)>($l0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static final boolean contains-Gab390E(kotlin.ranges.ULongRange, int)
    {
        int $i0;
        kotlin.ranges.ULongRange $r0;
        long $l1;
        boolean $z0;

        $r0 := @parameter0: kotlin.ranges.ULongRange;

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$contains");

        $l1 = (long) $i0;

        $l1 = $l1 & 4294967295L;

        $l1 = staticinvoke <kotlin.ULong: long constructor-impl(long)>($l1);

        $z0 = virtualinvoke $r0.<kotlin.ranges.ULongRange: boolean contains-VKZWuLQ(long)>($l1);

        return $z0;
    }

    public static final boolean contains-ULb-yJY(kotlin.ranges.ULongRange, byte)
    {
        byte $b0;
        kotlin.ranges.ULongRange $r0;
        long $l1;
        boolean $z0;

        $r0 := @parameter0: kotlin.ranges.ULongRange;

        $b0 := @parameter1: byte;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$contains");

        $l1 = (long) $b0;

        $l1 = $l1 & 255L;

        $l1 = staticinvoke <kotlin.ULong: long constructor-impl(long)>($l1);

        $z0 = virtualinvoke $r0.<kotlin.ranges.ULongRange: boolean contains-VKZWuLQ(long)>($l1);

        return $z0;
    }

    public static final boolean contains-ZsK3CEQ(kotlin.ranges.UIntRange, short)
    {
        kotlin.ranges.UIntRange $r0;
        short $s0;
        char $c1;
        int $i2;
        boolean $z0;

        $r0 := @parameter0: kotlin.ranges.UIntRange;

        $s0 := @parameter1: short;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$contains");

        $c1 = (char) $s0;

        $i2 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($c1);

        $z0 = virtualinvoke $r0.<kotlin.ranges.UIntRange: boolean contains-WZ4Q5Ns(int)>($i2);

        return $z0;
    }

    private static final boolean contains-biwQdVI(kotlin.ranges.UIntRange, kotlin.UInt)
    {
        kotlin.ranges.UIntRange $r0;
        kotlin.UInt $r1;
        int $i0;
        boolean $z0;

        $r0 := @parameter0: kotlin.ranges.UIntRange;

        $r1 := @parameter1: kotlin.UInt;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$contains");

        if $r1 == null goto label1;

        $i0 = virtualinvoke $r1.<kotlin.UInt: int unbox-impl()>();

        $z0 = virtualinvoke $r0.<kotlin.ranges.UIntRange: boolean contains-WZ4Q5Ns(int)>($i0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static final boolean contains-fz5IDCE(kotlin.ranges.UIntRange, long)
    {
        int $i0;
        byte $b1;
        kotlin.ranges.UIntRange $r0;
        long $l2, $l3;
        boolean $z0;

        $r0 := @parameter0: kotlin.ranges.UIntRange;

        $l2 := @parameter1: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$contains");

        $l3 = $l2 >>> 32;

        $l3 = staticinvoke <kotlin.ULong: long constructor-impl(long)>($l3);

        $b1 = $l3 cmp 0L;

        if $b1 != 0 goto label1;

        $i0 = (int) $l2;

        $i0 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($i0);

        $z0 = virtualinvoke $r0.<kotlin.ranges.UIntRange: boolean contains-WZ4Q5Ns(int)>($i0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static final boolean contains-uhHAxoY(kotlin.ranges.ULongRange, short)
    {
        short $s0;
        kotlin.ranges.ULongRange $r0;
        long $l1;
        boolean $z0;

        $r0 := @parameter0: kotlin.ranges.ULongRange;

        $s0 := @parameter1: short;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$contains");

        $l1 = (long) $s0;

        $l1 = $l1 & 65535L;

        $l1 = staticinvoke <kotlin.ULong: long constructor-impl(long)>($l1);

        $z0 = virtualinvoke $r0.<kotlin.ranges.ULongRange: boolean contains-VKZWuLQ(long)>($l1);

        return $z0;
    }

    public static final kotlin.ranges.UIntProgression downTo-5PvTz6A(short, short)
    {
        kotlin.ranges.UIntProgression$Companion $r0;
        short $s0, $s1;
        char $c2;
        int $i3, $i4;
        kotlin.ranges.UIntProgression $r1;

        $s0 := @parameter0: short;

        $s1 := @parameter1: short;

        $r0 = <kotlin.ranges.UIntProgression: kotlin.ranges.UIntProgression$Companion Companion>;

        $c2 = (char) $s0;

        $i3 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($c2);

        $c2 = (char) $s1;

        $i4 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($c2);

        $r1 = virtualinvoke $r0.<kotlin.ranges.UIntProgression$Companion: kotlin.ranges.UIntProgression fromClosedRange-Nkh28Cs(int,int,int)>($i3, $i4, -1);

        return $r1;
    }

    public static final kotlin.ranges.UIntProgression downTo-J1ME1BU(int, int)
    {
        int $i0, $i1;
        kotlin.ranges.UIntProgression$Companion $r0;
        kotlin.ranges.UIntProgression $r1;

        $i1 := @parameter0: int;

        $i0 := @parameter1: int;

        $r0 = <kotlin.ranges.UIntProgression: kotlin.ranges.UIntProgression$Companion Companion>;

        $r1 = virtualinvoke $r0.<kotlin.ranges.UIntProgression$Companion: kotlin.ranges.UIntProgression fromClosedRange-Nkh28Cs(int,int,int)>($i1, $i0, -1);

        return $r1;
    }

    public static final kotlin.ranges.UIntProgression downTo-Kr8caGY(byte, byte)
    {
        kotlin.ranges.UIntProgression$Companion $r0;
        byte $b0, $b1;
        short $s2;
        int $i3, $i4;
        kotlin.ranges.UIntProgression $r1;

        $b0 := @parameter0: byte;

        $b1 := @parameter1: byte;

        $r0 = <kotlin.ranges.UIntProgression: kotlin.ranges.UIntProgression$Companion Companion>;

        $s2 = $b0 & 255;

        $i3 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($s2);

        $s2 = $b1 & 255;

        $i4 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($s2);

        $r1 = virtualinvoke $r0.<kotlin.ranges.UIntProgression$Companion: kotlin.ranges.UIntProgression fromClosedRange-Nkh28Cs(int,int,int)>($i3, $i4, -1);

        return $r1;
    }

    public static final kotlin.ranges.ULongProgression downTo-eb3DHEI(long, long)
    {
        long $l0, $l1;
        kotlin.ranges.ULongProgression$Companion $r0;
        kotlin.ranges.ULongProgression $r1;

        $l1 := @parameter0: long;

        $l0 := @parameter1: long;

        $r0 = <kotlin.ranges.ULongProgression: kotlin.ranges.ULongProgression$Companion Companion>;

        $r1 = virtualinvoke $r0.<kotlin.ranges.ULongProgression$Companion: kotlin.ranges.ULongProgression fromClosedRange-7ftBX0g(long,long,long)>($l1, $l0, -1L);

        return $r1;
    }

    public static final int first(kotlin.ranges.UIntProgression)
    {
        kotlin.ranges.UIntProgression $r0;
        boolean $z0;
        int $i0;
        java.util.NoSuchElementException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $r0 := @parameter0: kotlin.ranges.UIntProgression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $z0 = virtualinvoke $r0.<kotlin.ranges.UIntProgression: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $i0 = virtualinvoke $r0.<kotlin.ranges.UIntProgression: int getFirst-pVg5ArA()>();

        return $i0;

     label1:
        $r1 = new java.util.NoSuchElementException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Progression ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is empty.");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.util.NoSuchElementException: void <init>(java.lang.String)>($r3);

        throw $r1;
    }

    public static final long first(kotlin.ranges.ULongProgression)
    {
        kotlin.ranges.ULongProgression $r0;
        boolean $z0;
        long $l0;
        java.util.NoSuchElementException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $r0 := @parameter0: kotlin.ranges.ULongProgression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $z0 = virtualinvoke $r0.<kotlin.ranges.ULongProgression: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $l0 = virtualinvoke $r0.<kotlin.ranges.ULongProgression: long getFirst-s-VKNKU()>();

        return $l0;

     label1:
        $r1 = new java.util.NoSuchElementException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Progression ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is empty.");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.util.NoSuchElementException: void <init>(java.lang.String)>($r3);

        throw $r1;
    }

    public static final kotlin.UInt firstOrNull(kotlin.ranges.UIntProgression)
    {
        kotlin.ranges.UIntProgression $r0;
        boolean $z0;
        int $i0;
        kotlin.UInt $r1;

        $r0 := @parameter0: kotlin.ranges.UIntProgression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $z0 = virtualinvoke $r0.<kotlin.ranges.UIntProgression: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $i0 = virtualinvoke $r0.<kotlin.ranges.UIntProgression: int getFirst-pVg5ArA()>();

        $r1 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        return $r1;
    }

    public static final kotlin.ULong firstOrNull(kotlin.ranges.ULongProgression)
    {
        kotlin.ranges.ULongProgression $r0;
        boolean $z0;
        long $l0;
        kotlin.ULong $r1;

        $r0 := @parameter0: kotlin.ranges.ULongProgression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $z0 = virtualinvoke $r0.<kotlin.ranges.ULongProgression: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $l0 = virtualinvoke $r0.<kotlin.ranges.ULongProgression: long getFirst-s-VKNKU()>();

        $r1 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        return $r1;
    }

    public static final int last(kotlin.ranges.UIntProgression)
    {
        kotlin.ranges.UIntProgression $r0;
        boolean $z0;
        int $i0;
        java.util.NoSuchElementException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $r0 := @parameter0: kotlin.ranges.UIntProgression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $z0 = virtualinvoke $r0.<kotlin.ranges.UIntProgression: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $i0 = virtualinvoke $r0.<kotlin.ranges.UIntProgression: int getLast-pVg5ArA()>();

        return $i0;

     label1:
        $r1 = new java.util.NoSuchElementException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Progression ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is empty.");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.util.NoSuchElementException: void <init>(java.lang.String)>($r3);

        throw $r1;
    }

    public static final long last(kotlin.ranges.ULongProgression)
    {
        kotlin.ranges.ULongProgression $r0;
        boolean $z0;
        long $l0;
        java.util.NoSuchElementException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $r0 := @parameter0: kotlin.ranges.ULongProgression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $z0 = virtualinvoke $r0.<kotlin.ranges.ULongProgression: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $l0 = virtualinvoke $r0.<kotlin.ranges.ULongProgression: long getLast-s-VKNKU()>();

        return $l0;

     label1:
        $r1 = new java.util.NoSuchElementException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Progression ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is empty.");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.util.NoSuchElementException: void <init>(java.lang.String)>($r3);

        throw $r1;
    }

    public static final kotlin.UInt lastOrNull(kotlin.ranges.UIntProgression)
    {
        kotlin.ranges.UIntProgression $r0;
        boolean $z0;
        int $i0;
        kotlin.UInt $r1;

        $r0 := @parameter0: kotlin.ranges.UIntProgression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $z0 = virtualinvoke $r0.<kotlin.ranges.UIntProgression: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $i0 = virtualinvoke $r0.<kotlin.ranges.UIntProgression: int getLast-pVg5ArA()>();

        $r1 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        return $r1;
    }

    public static final kotlin.ULong lastOrNull(kotlin.ranges.ULongProgression)
    {
        kotlin.ranges.ULongProgression $r0;
        boolean $z0;
        long $l0;
        kotlin.ULong $r1;

        $r0 := @parameter0: kotlin.ranges.ULongProgression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $z0 = virtualinvoke $r0.<kotlin.ranges.ULongProgression: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $l0 = virtualinvoke $r0.<kotlin.ranges.ULongProgression: long getLast-s-VKNKU()>();

        $r1 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        return $r1;
    }

    private static final int random(kotlin.ranges.UIntRange)
    {
        int $i0;
        kotlin.ranges.UIntRange $r0;
        kotlin.random.Random$Default $r1;

        $r0 := @parameter0: kotlin.ranges.UIntRange;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = <kotlin.random.Random: kotlin.random.Random$Default Default>;

        $i0 = staticinvoke <kotlin.ranges.URangesKt: int random(kotlin.ranges.UIntRange,kotlin.random.Random)>($r0, $r1);

        return $i0;
    }

    public static final int random(kotlin.ranges.UIntRange, kotlin.random.Random)
    {
        kotlin.ranges.UIntRange $r0;
        kotlin.random.Random $r1;
        int $i0;

        $r0 := @parameter0: kotlin.ranges.UIntRange;

        $r1 := @parameter1: kotlin.random.Random;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "random");

        $i0 = staticinvoke <kotlin.random.URandomKt: int nextUInt(kotlin.random.Random,kotlin.ranges.UIntRange)>($r1, $r0);

        return $i0;
    }

    private static final long random(kotlin.ranges.ULongRange)
    {
        kotlin.ranges.ULongRange $r0;
        long $l0;
        kotlin.random.Random$Default $r1;

        $r0 := @parameter0: kotlin.ranges.ULongRange;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = <kotlin.random.Random: kotlin.random.Random$Default Default>;

        $l0 = staticinvoke <kotlin.ranges.URangesKt: long random(kotlin.ranges.ULongRange,kotlin.random.Random)>($r0, $r1);

        return $l0;
    }

    public static final long random(kotlin.ranges.ULongRange, kotlin.random.Random)
    {
        kotlin.ranges.ULongRange $r0;
        kotlin.random.Random $r1;
        long $l0;

        $r0 := @parameter0: kotlin.ranges.ULongRange;

        $r1 := @parameter1: kotlin.random.Random;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "random");

        $l0 = staticinvoke <kotlin.random.URandomKt: long nextULong(kotlin.random.Random,kotlin.ranges.ULongRange)>($r1, $r0);

        return $l0;
    }

    private static final kotlin.UInt randomOrNull(kotlin.ranges.UIntRange)
    {
        kotlin.UInt $r0;
        kotlin.ranges.UIntRange $r1;
        kotlin.random.Random$Default $r2;

        $r1 := @parameter0: kotlin.ranges.UIntRange;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $r2 = <kotlin.random.Random: kotlin.random.Random$Default Default>;

        $r0 = staticinvoke <kotlin.ranges.URangesKt: kotlin.UInt randomOrNull(kotlin.ranges.UIntRange,kotlin.random.Random)>($r1, $r2);

        return $r0;
    }

    public static final kotlin.UInt randomOrNull(kotlin.ranges.UIntRange, kotlin.random.Random)
    {
        kotlin.random.Random $r0;
        kotlin.ranges.UIntRange $r1;
        boolean $z0;
        int $i0;
        kotlin.UInt $r2;

        $r1 := @parameter0: kotlin.ranges.UIntRange;

        $r0 := @parameter1: kotlin.random.Random;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "random");

        $z0 = virtualinvoke $r1.<kotlin.ranges.UIntRange: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $i0 = staticinvoke <kotlin.random.URandomKt: int nextUInt(kotlin.random.Random,kotlin.ranges.UIntRange)>($r0, $r1);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        return $r2;
    }

    private static final kotlin.ULong randomOrNull(kotlin.ranges.ULongRange)
    {
        kotlin.ULong $r0;
        kotlin.ranges.ULongRange $r1;
        kotlin.random.Random$Default $r2;

        $r1 := @parameter0: kotlin.ranges.ULongRange;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $r2 = <kotlin.random.Random: kotlin.random.Random$Default Default>;

        $r0 = staticinvoke <kotlin.ranges.URangesKt: kotlin.ULong randomOrNull(kotlin.ranges.ULongRange,kotlin.random.Random)>($r1, $r2);

        return $r0;
    }

    public static final kotlin.ULong randomOrNull(kotlin.ranges.ULongRange, kotlin.random.Random)
    {
        kotlin.random.Random $r0;
        kotlin.ranges.ULongRange $r1;
        boolean $z0;
        long $l0;
        kotlin.ULong $r2;

        $r1 := @parameter0: kotlin.ranges.ULongRange;

        $r0 := @parameter1: kotlin.random.Random;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "random");

        $z0 = virtualinvoke $r1.<kotlin.ranges.ULongRange: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $l0 = staticinvoke <kotlin.random.URandomKt: long nextULong(kotlin.random.Random,kotlin.ranges.ULongRange)>($r0, $r1);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        return $r2;
    }

    public static final kotlin.ranges.UIntProgression reversed(kotlin.ranges.UIntProgression)
    {
        kotlin.ranges.UIntProgression $r0;
        kotlin.ranges.UIntProgression$Companion $r1;
        int $i0, $i1, $i2;

        $r0 := @parameter0: kotlin.ranges.UIntProgression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = <kotlin.ranges.UIntProgression: kotlin.ranges.UIntProgression$Companion Companion>;

        $i0 = virtualinvoke $r0.<kotlin.ranges.UIntProgression: int getLast-pVg5ArA()>();

        $i1 = virtualinvoke $r0.<kotlin.ranges.UIntProgression: int getFirst-pVg5ArA()>();

        $i2 = virtualinvoke $r0.<kotlin.ranges.UIntProgression: int getStep()>();

        $i2 = neg $i2;

        $r0 = virtualinvoke $r1.<kotlin.ranges.UIntProgression$Companion: kotlin.ranges.UIntProgression fromClosedRange-Nkh28Cs(int,int,int)>($i0, $i1, $i2);

        return $r0;
    }

    public static final kotlin.ranges.ULongProgression reversed(kotlin.ranges.ULongProgression)
    {
        kotlin.ranges.ULongProgression$Companion $r0;
        kotlin.ranges.ULongProgression $r1;
        long $l0, $l1, $l2;

        $r1 := @parameter0: kotlin.ranges.ULongProgression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $r0 = <kotlin.ranges.ULongProgression: kotlin.ranges.ULongProgression$Companion Companion>;

        $l0 = virtualinvoke $r1.<kotlin.ranges.ULongProgression: long getLast-s-VKNKU()>();

        $l1 = virtualinvoke $r1.<kotlin.ranges.ULongProgression: long getFirst-s-VKNKU()>();

        $l2 = virtualinvoke $r1.<kotlin.ranges.ULongProgression: long getStep()>();

        $l2 = neg $l2;

        $r1 = virtualinvoke $r0.<kotlin.ranges.ULongProgression$Companion: kotlin.ranges.ULongProgression fromClosedRange-7ftBX0g(long,long,long)>($l0, $l1, $l2);

        return $r1;
    }

    public static final kotlin.ranges.UIntProgression step(kotlin.ranges.UIntProgression, int)
    {
        kotlin.ranges.UIntProgression $r0;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        java.lang.Integer $r1;
        kotlin.ranges.UIntProgression$Companion $r2;

        $r0 := @parameter0: kotlin.ranges.UIntProgression;

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        staticinvoke <kotlin.ranges.RangesKt: void checkStepIsPositive(boolean,java.lang.Number)>($z0, $r1);

        $r2 = <kotlin.ranges.UIntProgression: kotlin.ranges.UIntProgression$Companion Companion>;

        $i1 = virtualinvoke $r0.<kotlin.ranges.UIntProgression: int getFirst-pVg5ArA()>();

        $i2 = virtualinvoke $r0.<kotlin.ranges.UIntProgression: int getLast-pVg5ArA()>();

        $i3 = virtualinvoke $r0.<kotlin.ranges.UIntProgression: int getStep()>();

        if $i3 <= 0 goto label3;

        goto label4;

     label3:
        $i0 = neg $i0;

     label4:
        $r0 = virtualinvoke $r2.<kotlin.ranges.UIntProgression$Companion: kotlin.ranges.UIntProgression fromClosedRange-Nkh28Cs(int,int,int)>($i1, $i2, $i0);

        return $r0;
    }

    public static final kotlin.ranges.ULongProgression step(kotlin.ranges.ULongProgression, long)
    {
        kotlin.ranges.ULongProgression$Companion $r0;
        kotlin.ranges.ULongProgression $r1;
        long $l0, $l2, $l3, $l4;
        byte $b1;
        boolean $z0;
        java.lang.Long $r2;

        $r1 := @parameter0: kotlin.ranges.ULongProgression;

        $l0 := @parameter1: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        staticinvoke <kotlin.ranges.RangesKt: void checkStepIsPositive(boolean,java.lang.Number)>($z0, $r2);

        $r0 = <kotlin.ranges.ULongProgression: kotlin.ranges.ULongProgression$Companion Companion>;

        $l2 = virtualinvoke $r1.<kotlin.ranges.ULongProgression: long getFirst-s-VKNKU()>();

        $l3 = virtualinvoke $r1.<kotlin.ranges.ULongProgression: long getLast-s-VKNKU()>();

        $l4 = virtualinvoke $r1.<kotlin.ranges.ULongProgression: long getStep()>();

        $b1 = $l4 cmp 0L;

        if $b1 <= 0 goto label3;

        goto label4;

     label3:
        $l0 = neg $l0;

     label4:
        $r1 = virtualinvoke $r0.<kotlin.ranges.ULongProgression$Companion: kotlin.ranges.ULongProgression fromClosedRange-7ftBX0g(long,long,long)>($l2, $l3, $l0);

        return $r1;
    }

    public static final kotlin.ranges.UIntRange until-5PvTz6A(short, short)
    {
        short $s0, $s1;
        char $c2;
        int $i3, $i4;
        kotlin.ranges.UIntRange$Companion $r0;
        kotlin.ranges.UIntRange $r1;

        $s0 := @parameter0: short;

        $s1 := @parameter1: short;

        $c2 = (char) $s1;

        $i3 = staticinvoke <kotlin.jvm.internal.Intrinsics: int compare(int,int)>($c2, 0);

        if $i3 > 0 goto label1;

        $r0 = <kotlin.ranges.UIntRange: kotlin.ranges.UIntRange$Companion Companion>;

        $r1 = virtualinvoke $r0.<kotlin.ranges.UIntRange$Companion: kotlin.ranges.UIntRange getEMPTY()>();

        return $r1;

     label1:
        $c2 = (char) $s0;

        $i3 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($c2);

        $c2 = (char) $s1;

        $i4 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($c2);

        $i4 = $i4 + -1;

        $i4 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($i4);

        $r1 = new kotlin.ranges.UIntRange;

        specialinvoke $r1.<kotlin.ranges.UIntRange: void <init>(int,int,kotlin.jvm.internal.DefaultConstructorMarker)>($i3, $i4, null);

        return $r1;
    }

    public static final kotlin.ranges.UIntRange until-J1ME1BU(int, int)
    {
        int $i0, $i1, $i2;
        kotlin.ranges.UIntRange$Companion $r0;
        kotlin.ranges.UIntRange $r1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = staticinvoke <kotlin.UnsignedKt: int uintCompare(int,int)>($i1, 0);

        if $i2 > 0 goto label1;

        $r0 = <kotlin.ranges.UIntRange: kotlin.ranges.UIntRange$Companion Companion>;

        $r1 = virtualinvoke $r0.<kotlin.ranges.UIntRange$Companion: kotlin.ranges.UIntRange getEMPTY()>();

        return $r1;

     label1:
        $r1 = new kotlin.ranges.UIntRange;

        $i1 = $i1 + -1;

        $i1 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($i1);

        specialinvoke $r1.<kotlin.ranges.UIntRange: void <init>(int,int,kotlin.jvm.internal.DefaultConstructorMarker)>($i0, $i1, null);

        return $r1;
    }

    public static final kotlin.ranges.UIntRange until-Kr8caGY(byte, byte)
    {
        byte $b0, $b1;
        short $s2;
        int $i3, $i4;
        kotlin.ranges.UIntRange$Companion $r0;
        kotlin.ranges.UIntRange $r1;

        $b0 := @parameter0: byte;

        $b1 := @parameter1: byte;

        $s2 = $b1 & 255;

        $i3 = staticinvoke <kotlin.jvm.internal.Intrinsics: int compare(int,int)>($s2, 0);

        if $i3 > 0 goto label1;

        $r0 = <kotlin.ranges.UIntRange: kotlin.ranges.UIntRange$Companion Companion>;

        $r1 = virtualinvoke $r0.<kotlin.ranges.UIntRange$Companion: kotlin.ranges.UIntRange getEMPTY()>();

        return $r1;

     label1:
        $s2 = $b0 & 255;

        $i3 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($s2);

        $s2 = $b1 & 255;

        $i4 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($s2);

        $i4 = $i4 + -1;

        $i4 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($i4);

        $r1 = new kotlin.ranges.UIntRange;

        specialinvoke $r1.<kotlin.ranges.UIntRange: void <init>(int,int,kotlin.jvm.internal.DefaultConstructorMarker)>($i3, $i4, null);

        return $r1;
    }

    public static final kotlin.ranges.ULongRange until-eb3DHEI(long, long)
    {
        long $l0, $l1, $l3;
        int $i2;
        kotlin.ranges.ULongRange$Companion $r0;
        kotlin.ranges.ULongRange $r1;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $i2 = staticinvoke <kotlin.UnsignedKt: int ulongCompare(long,long)>($l1, 0L);

        if $i2 > 0 goto label1;

        $r0 = <kotlin.ranges.ULongRange: kotlin.ranges.ULongRange$Companion Companion>;

        $r1 = virtualinvoke $r0.<kotlin.ranges.ULongRange$Companion: kotlin.ranges.ULongRange getEMPTY()>();

        return $r1;

     label1:
        $l3 = staticinvoke <kotlin.ULong: long constructor-impl(long)>(1L);

        $l1 = $l1 - $l3;

        $l1 = staticinvoke <kotlin.ULong: long constructor-impl(long)>($l1);

        $r1 = new kotlin.ranges.ULongRange;

        specialinvoke $r1.<kotlin.ranges.ULongRange: void <init>(long,long,kotlin.jvm.internal.DefaultConstructorMarker)>($l0, $l1, null);

        return $r1;
    }

