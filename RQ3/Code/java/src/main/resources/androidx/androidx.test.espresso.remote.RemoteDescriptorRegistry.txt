androidx.test.espresso.remote.RemoteDescriptorRegistry
<androidx.test.espresso.remote.RemoteDescriptorRegistry: java.lang.String TAG>
<androidx.test.espresso.remote.RemoteDescriptorRegistry: androidx.test.espresso.remote.RemoteDescriptorRegistry DEFAULT_INSTANCE>
<androidx.test.espresso.remote.RemoteDescriptorRegistry: java.util.Map instanceTypeToRemoteTargetTypeLookup>
<androidx.test.espresso.remote.RemoteDescriptorRegistry: java.util.Map protoMsgToRemoteTargetTypeLookup>
<androidx.test.espresso.remote.RemoteDescriptorRegistry: java.util.Map remoteTypeUrlToRemoteTypeLookup>
    public androidx.test.espresso.remote.RemoteDescriptor argForInstanceType(java.lang.Class)
    {
        androidx.test.espresso.remote.RemoteDescriptorRegistry r0;
        java.lang.Class r1;
        java.util.Map r2, $r5;
        java.lang.Object[] r3;
        java.lang.Object $r6;
        androidx.test.espresso.remote.RemoteDescriptor $r7;

        r0 := @this: androidx.test.espresso.remote.RemoteDescriptorRegistry;

        r1 := @parameter0: java.lang.Class;

        staticinvoke <androidx.test.espresso.remote.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "messageType cannot be null!");

        r2 = r0.<androidx.test.espresso.remote.RemoteDescriptorRegistry: java.util.Map instanceTypeToRemoteTargetTypeLookup>;

        r3 = newarray (java.lang.Object)[1];

        r3[0] = r1;

        staticinvoke <androidx.test.espresso.remote.RemoteDescriptorRegistry: void throwIfMapNotContains(java.util.Map,java.lang.Object,java.lang.String,java.lang.Object[])>(r2, r1, "No such message type registered: %s. All remote types must be registered using RemoteDescriptorRegistry#registerRemoteTypeArgs(List<RemoteDescriptor>)", r3);

        $r5 = r0.<androidx.test.espresso.remote.RemoteDescriptorRegistry: java.util.Map instanceTypeToRemoteTargetTypeLookup>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r7 = (androidx.test.espresso.remote.RemoteDescriptor) $r6;

        return $r7;
    }

    public androidx.test.espresso.remote.RemoteDescriptor argForMsgType(java.lang.Class)
    {
        androidx.test.espresso.remote.RemoteDescriptorRegistry r0;
        java.lang.Class r1;
        java.util.Map r2, $r5;
        java.lang.Object[] r3;
        java.lang.Object $r6;
        androidx.test.espresso.remote.RemoteDescriptor $r7;

        r0 := @this: androidx.test.espresso.remote.RemoteDescriptorRegistry;

        r1 := @parameter0: java.lang.Class;

        staticinvoke <androidx.test.espresso.remote.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "protoMsgType cannot be null!");

        r2 = r0.<androidx.test.espresso.remote.RemoteDescriptorRegistry: java.util.Map protoMsgToRemoteTargetTypeLookup>;

        r3 = newarray (java.lang.Object)[1];

        r3[0] = r1;

        staticinvoke <androidx.test.espresso.remote.RemoteDescriptorRegistry: void throwIfMapNotContains(java.util.Map,java.lang.Object,java.lang.String,java.lang.Object[])>(r2, r1, "No such message type registered: %s. All proto msg types must be registered using RemoteDescriptorRegistry#registerRemoteTypeArgs(List<RemoteDescriptor>)", r3);

        $r5 = r0.<androidx.test.espresso.remote.RemoteDescriptorRegistry: java.util.Map protoMsgToRemoteTargetTypeLookup>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r7 = (androidx.test.espresso.remote.RemoteDescriptor) $r6;

        return $r7;
    }

    public androidx.test.espresso.remote.RemoteDescriptor argForRemoteTypeUrl(java.lang.String)
    {
        androidx.test.espresso.remote.RemoteDescriptorRegistry r0;
        java.lang.String r1;
        java.lang.Object[] r2;
        boolean $z0, z1;
        java.util.Map $r3, r6;
        java.lang.Object $r4;
        androidx.test.espresso.remote.RemoteDescriptor $r5;

        r0 := @this: androidx.test.espresso.remote.RemoteDescriptorRegistry;

        r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 != 0 goto label2;

        z1 = 1;

     label1:
        staticinvoke <androidx.test.espresso.remote.internal.deps.guava.base.Preconditions: void checkState(boolean)>(z1);

        r6 = r0.<androidx.test.espresso.remote.RemoteDescriptorRegistry: java.util.Map remoteTypeUrlToRemoteTypeLookup>;

        r2 = newarray (java.lang.Object)[1];

        r2[0] = r1;

        staticinvoke <androidx.test.espresso.remote.RemoteDescriptorRegistry: void throwIfMapNotContains(java.util.Map,java.lang.Object,java.lang.String,java.lang.Object[])>(r6, r1, "Parser not found for type url: %s. All remote types must be registered using RemoteDescriptorRegistry#registerRemoteTypeArgs(List<RemoteDescriptor>", r2);

        $r3 = r0.<androidx.test.espresso.remote.RemoteDescriptorRegistry: java.util.Map remoteTypeUrlToRemoteTypeLookup>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r5 = (androidx.test.espresso.remote.RemoteDescriptor) $r4;

        return $r5;

     label2:
        z1 = 0;

        goto label1;
    }

    public static androidx.test.espresso.remote.RemoteDescriptorRegistry getInstance()
    {
        androidx.test.espresso.remote.RemoteDescriptorRegistry $r0;

        $r0 = <androidx.test.espresso.remote.RemoteDescriptorRegistry: androidx.test.espresso.remote.RemoteDescriptorRegistry DEFAULT_INSTANCE>;

        return $r0;
    }

    static void <clinit>()
    {
        androidx.test.espresso.remote.RemoteDescriptorRegistry r0;

        r0 = new androidx.test.espresso.remote.RemoteDescriptorRegistry;

        specialinvoke r0.<androidx.test.espresso.remote.RemoteDescriptorRegistry: void <init>()>();

        <androidx.test.espresso.remote.RemoteDescriptorRegistry: androidx.test.espresso.remote.RemoteDescriptorRegistry DEFAULT_INSTANCE> = r0;

        return;
    }

    void <init>()
    {
        androidx.test.espresso.remote.RemoteDescriptorRegistry r0;
        java.util.HashMap r1, r2, r3, r4, r5, r6;
        java.util.Map r7, r8, r9;

        r0 := @this: androidx.test.espresso.remote.RemoteDescriptorRegistry;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r4 = new java.util.HashMap;

        r1 = r4;

        specialinvoke r4.<java.util.HashMap: void <init>()>();

        r7 = (java.util.Map) r1;

        r0.<androidx.test.espresso.remote.RemoteDescriptorRegistry: java.util.Map instanceTypeToRemoteTargetTypeLookup> = r7;

        r5 = new java.util.HashMap;

        r2 = r5;

        specialinvoke r5.<java.util.HashMap: void <init>()>();

        r8 = (java.util.Map) r2;

        r0.<androidx.test.espresso.remote.RemoteDescriptorRegistry: java.util.Map protoMsgToRemoteTargetTypeLookup> = r8;

        r6 = new java.util.HashMap;

        r3 = r6;

        specialinvoke r6.<java.util.HashMap: void <init>()>();

        r9 = (java.util.Map) r3;

        r0.<androidx.test.espresso.remote.RemoteDescriptorRegistry: java.util.Map remoteTypeUrlToRemoteTypeLookup> = r9;

        return;
    }

    void clear()
    {
        androidx.test.espresso.remote.RemoteDescriptorRegistry r0;
        java.util.Map $r1, $r2, $r3;

        r0 := @this: androidx.test.espresso.remote.RemoteDescriptorRegistry;

        $r1 = r0.<androidx.test.espresso.remote.RemoteDescriptorRegistry: java.util.Map remoteTypeUrlToRemoteTypeLookup>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        $r2 = r0.<androidx.test.espresso.remote.RemoteDescriptorRegistry: java.util.Map instanceTypeToRemoteTargetTypeLookup>;

        interfaceinvoke $r2.<java.util.Map: void clear()>();

        $r3 = r0.<androidx.test.espresso.remote.RemoteDescriptorRegistry: java.util.Map protoMsgToRemoteTargetTypeLookup>;

        interfaceinvoke $r3.<java.util.Map: void clear()>();

        return;
    }

    private static final transient void throwIfMapNotContains(java.util.Map, java.lang.Object, java.lang.String, java.lang.Object[])
    {
        java.lang.Object r0;
        java.lang.String r1, $r4;
        java.lang.Object[] r2;
        boolean $z0;
        java.util.Locale $r3;
        java.util.Map r5;
        androidx.test.espresso.remote.RemoteProtocolException r6;

        r5 := @parameter0: java.util.Map;

        r0 := @parameter1: java.lang.Object;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.Object[];

        $z0 = interfaceinvoke r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r0);

        if $z0 != 0 goto label1;

        r6 = new androidx.test.espresso.remote.RemoteProtocolException;

        $r3 = <java.util.Locale: java.util.Locale ROOT>;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r3, r1, r2);

        specialinvoke r6.<androidx.test.espresso.remote.RemoteProtocolException: void <init>(java.lang.String)>($r4);

        throw r6;

     label1:
        return;
    }

    public void unregisterRemoteTypeArgs(java.util.List)
    {
        androidx.test.espresso.remote.RemoteDescriptor r0;
        java.lang.Object[] r1;
        boolean $z0, $z1;
        java.lang.Object $r3;
        java.util.Map $r4, $r7, $r10;
        java.lang.String $r5, $r14;
        java.lang.Class $r8, $r11, $r13;
        androidx.test.espresso.remote.RemoteDescriptorRegistry r15;
        java.util.List r16;
        java.util.Iterator r17;
        java.lang.IllegalStateException r18;
        java.util.Locale r19;

        r15 := @this: androidx.test.espresso.remote.RemoteDescriptorRegistry;

        r16 := @parameter0: java.util.List;

        staticinvoke <androidx.test.espresso.remote.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r16, "remoteDescriptors cannot be null!");

        r17 = interfaceinvoke r16.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>();

        r0 = (androidx.test.espresso.remote.RemoteDescriptor) $r3;

        $z1 = specialinvoke r15.<androidx.test.espresso.remote.RemoteDescriptorRegistry: boolean isRegistered(androidx.test.espresso.remote.RemoteDescriptor)>(r0);

        if $z1 != 0 goto label2;

        r18 = new java.lang.IllegalStateException;

        r19 = <java.util.Locale: java.util.Locale ROOT>;

        r1 = newarray (java.lang.Object)[1];

        $r13 = virtualinvoke r0.<androidx.test.espresso.remote.RemoteDescriptor: java.lang.Class getInstanceType()>();

        r1[0] = $r13;

        $r14 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(r19, "Attempted to unregister RemoteDescriptor for target type: %s, that was not registered", r1);

        specialinvoke r18.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        throw r18;

     label2:
        $r4 = r15.<androidx.test.espresso.remote.RemoteDescriptorRegistry: java.util.Map remoteTypeUrlToRemoteTypeLookup>;

        $r5 = virtualinvoke r0.<androidx.test.espresso.remote.RemoteDescriptor: java.lang.String getInstanceTypeName()>();

        interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r5);

        $r7 = r15.<androidx.test.espresso.remote.RemoteDescriptorRegistry: java.util.Map instanceTypeToRemoteTargetTypeLookup>;

        $r8 = virtualinvoke r0.<androidx.test.espresso.remote.RemoteDescriptor: java.lang.Class getInstanceType()>();

        interfaceinvoke $r7.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r8);

        $r10 = r15.<androidx.test.espresso.remote.RemoteDescriptorRegistry: java.util.Map protoMsgToRemoteTargetTypeLookup>;

        $r11 = virtualinvoke r0.<androidx.test.espresso.remote.RemoteDescriptor: java.lang.Class getProtoType()>();

        interfaceinvoke $r10.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r11);

        goto label1;

     label3:
        return;
    }

    public boolean hasArgForInstanceType(java.lang.Class)
    {
        androidx.test.espresso.remote.RemoteDescriptorRegistry r0;
        java.lang.Class r1;
        java.util.Map $r3;
        boolean $z0;

        r0 := @this: androidx.test.espresso.remote.RemoteDescriptorRegistry;

        r1 := @parameter0: java.lang.Class;

        staticinvoke <androidx.test.espresso.remote.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "instanceType cannot be null!");

        $r3 = r0.<androidx.test.espresso.remote.RemoteDescriptorRegistry: java.util.Map instanceTypeToRemoteTargetTypeLookup>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    private boolean isRegistered(androidx.test.espresso.remote.RemoteDescriptor)
    {
        androidx.test.espresso.remote.RemoteDescriptor r0;
        java.util.Map $r1, $r3, $r5;
        java.lang.String $r2;
        boolean $z0, $z1, $z2, z3;
        java.lang.Class $r4, $r6;
        androidx.test.espresso.remote.RemoteDescriptorRegistry r7;

        r7 := @this: androidx.test.espresso.remote.RemoteDescriptorRegistry;

        r0 := @parameter0: androidx.test.espresso.remote.RemoteDescriptor;

        $r1 = r7.<androidx.test.espresso.remote.RemoteDescriptorRegistry: java.util.Map remoteTypeUrlToRemoteTypeLookup>;

        $r2 = virtualinvoke r0.<androidx.test.espresso.remote.RemoteDescriptor: java.lang.String getInstanceTypeName()>();

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

        $r3 = r7.<androidx.test.espresso.remote.RemoteDescriptorRegistry: java.util.Map instanceTypeToRemoteTargetTypeLookup>;

        $r4 = virtualinvoke r0.<androidx.test.espresso.remote.RemoteDescriptor: java.lang.Class getInstanceType()>();

        $z1 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r4);

        if $z1 == 0 goto label2;

        $r5 = r7.<androidx.test.espresso.remote.RemoteDescriptorRegistry: java.util.Map protoMsgToRemoteTargetTypeLookup>;

        $r6 = virtualinvoke r0.<androidx.test.espresso.remote.RemoteDescriptor: java.lang.Class getProtoType()>();

        $z2 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>($r6);

        if $z2 == 0 goto label2;

        z3 = 1;

     label1:
        return z3;

     label2:
        z3 = 0;

        goto label1;
    }

    public boolean registerRemoteTypeArgs(java.util.List)
    {
        androidx.test.espresso.remote.RemoteDescriptorRegistry r0;
        java.util.Iterator r1;
        androidx.test.espresso.remote.RemoteDescriptor r2;
        java.lang.Object[] r3;
        boolean $z0, $z1, z2;
        java.lang.Object $r5;
        java.util.Map $r6, $r9, $r12;
        java.lang.String $r7, $r16;
        java.lang.Class $r10, $r13, $r15;
        java.util.List r17;
        java.util.Locale r18;

        r0 := @this: androidx.test.espresso.remote.RemoteDescriptorRegistry;

        r17 := @parameter0: java.util.List;

        staticinvoke <androidx.test.espresso.remote.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r17, "remoteDescriptors cannot be null!");

        r1 = interfaceinvoke r17.<java.util.List: java.util.Iterator iterator()>();

        z2 = 1;

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (androidx.test.espresso.remote.RemoteDescriptor) $r5;

        $z1 = specialinvoke r0.<androidx.test.espresso.remote.RemoteDescriptorRegistry: boolean isRegistered(androidx.test.espresso.remote.RemoteDescriptor)>(r2);

        if $z1 == 0 goto label2;

        r18 = <java.util.Locale: java.util.Locale ROOT>;

        r3 = newarray (java.lang.Object)[1];

        $r15 = virtualinvoke r2.<androidx.test.espresso.remote.RemoteDescriptor: java.lang.Class getInstanceType()>();

        r3[0] = $r15;

        $r16 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(r18, "Attempted to register RemoteDescriptor for target type: %s, that was already registered", r3);

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("RemoteDescrRegistry", $r16);

        z2 = 0;

     label2:
        $r6 = r0.<androidx.test.espresso.remote.RemoteDescriptorRegistry: java.util.Map remoteTypeUrlToRemoteTypeLookup>;

        $r7 = virtualinvoke r2.<androidx.test.espresso.remote.RemoteDescriptor: java.lang.String getInstanceTypeName()>();

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r2);

        $r9 = r0.<androidx.test.espresso.remote.RemoteDescriptorRegistry: java.util.Map instanceTypeToRemoteTargetTypeLookup>;

        $r10 = virtualinvoke r2.<androidx.test.espresso.remote.RemoteDescriptor: java.lang.Class getInstanceType()>();

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r2);

        $r12 = r0.<androidx.test.espresso.remote.RemoteDescriptorRegistry: java.util.Map protoMsgToRemoteTargetTypeLookup>;

        $r13 = virtualinvoke r2.<androidx.test.espresso.remote.RemoteDescriptor: java.lang.Class getProtoType()>();

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, r2);

        goto label1;

     label3:
        return z2;
    }

