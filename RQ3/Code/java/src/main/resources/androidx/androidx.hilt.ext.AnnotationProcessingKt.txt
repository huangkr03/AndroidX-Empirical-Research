androidx.hilt.ext.AnnotationProcessingKt
    public static final boolean hasAnnotation(javax.lang.model.element.Element, kotlin.reflect.KClass)
    {
        javax.lang.model.element.Element $r0;
        kotlin.reflect.KClass r1;
        java.lang.Class $r2;
        boolean $z0;

        $r0 := @parameter0: javax.lang.model.element.Element;

        r1 := @parameter1: kotlin.reflect.KClass;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$hasAnnotation");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "clazz");

        $r2 = staticinvoke <kotlin.jvm.JvmClassMappingKt: java.lang.Class getJavaClass(kotlin.reflect.KClass)>(r1);

        $z0 = staticinvoke <com.google.auto.common.MoreElements: boolean isAnnotationPresent(javax.lang.model.element.Element,java.lang.Class)>($r0, $r2);

        return $z0;
    }

    public static final boolean hasAnnotation(javax.lang.model.element.Element, java.lang.String)
    {
        javax.lang.model.element.Element $r0, $r8;
        java.lang.String r1;
        java.lang.Iterable $r2;
        java.util.Iterator r3;
        java.lang.Object r4;
        javax.lang.model.element.AnnotationMirror r5;
        java.util.List $r6;
        boolean $z2, $z3, $z4, $z5, $z6;
        javax.lang.model.type.DeclaredType $r7;
        javax.lang.model.element.TypeElement $r9;
        javax.lang.model.element.Name $r10;
        java.lang.CharSequence $r11;
        java.util.Collection $r12;

        $r0 := @parameter0: javax.lang.model.element.Element;

        r1 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$hasAnnotation");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "qName");

        $r6 = interfaceinvoke $r0.<javax.lang.model.element.Element: java.util.List getAnnotationMirrors()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "annotationMirrors");

        $r2 = (java.lang.Iterable) $r6;

        $z2 = $r2 instanceof java.util.Collection;

        if $z2 == 0 goto label1;

        $r12 = (java.util.Collection) $r2;

        $z4 = interfaceinvoke $r12.<java.util.Collection: boolean isEmpty()>();

        if $z4 == 0 goto label1;

        $z5 = 0;

        goto label4;

     label1:
        r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z6 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label3;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (javax.lang.model.element.AnnotationMirror) r4;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r5, "it");

        $r7 = interfaceinvoke r5.<javax.lang.model.element.AnnotationMirror: javax.lang.model.type.DeclaredType getAnnotationType()>();

        $r8 = interfaceinvoke $r7.<javax.lang.model.type.DeclaredType: javax.lang.model.element.Element asElement()>();

        $r9 = staticinvoke <com.google.auto.common.MoreElements: javax.lang.model.element.TypeElement asType(javax.lang.model.element.Element)>($r8);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r9, "MoreElements.asType(it.annotationType.asElement())");

        $r10 = interfaceinvoke $r9.<javax.lang.model.element.TypeElement: javax.lang.model.element.Name getQualifiedName()>();

        $r11 = (java.lang.CharSequence) r1;

        $z3 = interfaceinvoke $r10.<javax.lang.model.element.Name: boolean contentEquals(java.lang.CharSequence)>($r11);

        if $z3 == 0 goto label2;

        $z5 = 1;

        goto label4;

     label3:
        $z5 = 0;

     label4:
        return $z5;
    }

