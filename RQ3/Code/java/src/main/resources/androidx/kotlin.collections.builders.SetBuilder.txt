kotlin.collections.builders.SetBuilder
<kotlin.collections.builders.SetBuilder: kotlin.collections.builders.MapBuilder backing>
    public void <init>()
    {
        kotlin.collections.builders.SetBuilder $r0;
        kotlin.collections.builders.MapBuilder $r1;

        $r0 := @this: kotlin.collections.builders.SetBuilder;

        $r1 = new kotlin.collections.builders.MapBuilder;

        specialinvoke $r1.<kotlin.collections.builders.MapBuilder: void <init>()>();

        specialinvoke $r0.<kotlin.collections.builders.SetBuilder: void <init>(kotlin.collections.builders.MapBuilder)>($r1);

        return;
    }

    public void <init>(int)
    {
        kotlin.collections.builders.SetBuilder $r0;
        int $i0;
        kotlin.collections.builders.MapBuilder $r1;

        $r0 := @this: kotlin.collections.builders.SetBuilder;

        $i0 := @parameter0: int;

        $r1 = new kotlin.collections.builders.MapBuilder;

        specialinvoke $r1.<kotlin.collections.builders.MapBuilder: void <init>(int)>($i0);

        specialinvoke $r0.<kotlin.collections.builders.SetBuilder: void <init>(kotlin.collections.builders.MapBuilder)>($r1);

        return;
    }

    public void <init>(kotlin.collections.builders.MapBuilder)
    {
        kotlin.collections.builders.SetBuilder $r0;
        kotlin.collections.builders.MapBuilder $r1;

        $r0 := @this: kotlin.collections.builders.SetBuilder;

        $r1 := @parameter0: kotlin.collections.builders.MapBuilder;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "backing");

        specialinvoke $r0.<kotlin.collections.AbstractMutableSet: void <init>()>();

        $r0.<kotlin.collections.builders.SetBuilder: kotlin.collections.builders.MapBuilder backing> = $r1;

        return;
    }

    private final java.lang.Object writeReplace()
    {
        kotlin.collections.builders.SetBuilder $r0;
        boolean $z0;
        kotlin.collections.builders.MapBuilder $r1;
        kotlin.collections.builders.SerializedCollection r2;
        java.io.NotSerializableException r3;
        java.util.Collection r4;

        $r0 := @this: kotlin.collections.builders.SetBuilder;

        $r1 = $r0.<kotlin.collections.builders.SetBuilder: kotlin.collections.builders.MapBuilder backing>;

        $z0 = virtualinvoke $r1.<kotlin.collections.builders.MapBuilder: boolean isReadOnly$kotlin_stdlib()>();

        if $z0 == 0 goto label1;

        r2 = new kotlin.collections.builders.SerializedCollection;

        r4 = (java.util.Collection) $r0;

        specialinvoke r2.<kotlin.collections.builders.SerializedCollection: void <init>(java.util.Collection,int)>(r4, 1);

        return r2;

     label1:
        r3 = new java.io.NotSerializableException;

        specialinvoke r3.<java.io.NotSerializableException: void <init>(java.lang.String)>("The set cannot be serialized while it is being built.");

        throw r3;
    }

    public boolean add(java.lang.Object)
    {
        kotlin.collections.builders.SetBuilder $r0;
        kotlin.collections.builders.MapBuilder $r1;
        int $i0;
        java.lang.Object $r2;

        $r0 := @this: kotlin.collections.builders.SetBuilder;

        $r2 := @parameter0: java.lang.Object;

        $r1 = $r0.<kotlin.collections.builders.SetBuilder: kotlin.collections.builders.MapBuilder backing>;

        $i0 = virtualinvoke $r1.<kotlin.collections.builders.MapBuilder: int addKey$kotlin_stdlib(java.lang.Object)>($r2);

        if $i0 < 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean addAll(java.util.Collection)
    {
        kotlin.collections.builders.SetBuilder $r0;
        boolean $z0;
        java.util.Collection $r1;
        kotlin.collections.builders.MapBuilder $r2;

        $r0 := @this: kotlin.collections.builders.SetBuilder;

        $r1 := @parameter0: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "elements");

        $r2 = $r0.<kotlin.collections.builders.SetBuilder: kotlin.collections.builders.MapBuilder backing>;

        virtualinvoke $r2.<kotlin.collections.builders.MapBuilder: void checkIsMutable$kotlin_stdlib()>();

        $z0 = specialinvoke $r0.<kotlin.collections.AbstractMutableSet: boolean addAll(java.util.Collection)>($r1);

        return $z0;
    }

    public final java.util.Set build()
    {
        kotlin.collections.builders.SetBuilder $r0;
        kotlin.collections.builders.MapBuilder $r1;

        $r0 := @this: kotlin.collections.builders.SetBuilder;

        $r1 = $r0.<kotlin.collections.builders.SetBuilder: kotlin.collections.builders.MapBuilder backing>;

        virtualinvoke $r1.<kotlin.collections.builders.MapBuilder: java.util.Map build()>();

        return $r0;
    }

    public void clear()
    {
        kotlin.collections.builders.SetBuilder $r0;
        kotlin.collections.builders.MapBuilder $r1;

        $r0 := @this: kotlin.collections.builders.SetBuilder;

        $r1 = $r0.<kotlin.collections.builders.SetBuilder: kotlin.collections.builders.MapBuilder backing>;

        virtualinvoke $r1.<kotlin.collections.builders.MapBuilder: void clear()>();

        return;
    }

    public boolean contains(java.lang.Object)
    {
        kotlin.collections.builders.SetBuilder $r0;
        kotlin.collections.builders.MapBuilder $r1;
        boolean $z0;
        java.lang.Object $r2;

        $r0 := @this: kotlin.collections.builders.SetBuilder;

        $r2 := @parameter0: java.lang.Object;

        $r1 = $r0.<kotlin.collections.builders.SetBuilder: kotlin.collections.builders.MapBuilder backing>;

        $z0 = virtualinvoke $r1.<kotlin.collections.builders.MapBuilder: boolean containsKey(java.lang.Object)>($r2);

        return $z0;
    }

    public int getSize()
    {
        kotlin.collections.builders.SetBuilder $r0;
        int $i0;
        kotlin.collections.builders.MapBuilder $r1;

        $r0 := @this: kotlin.collections.builders.SetBuilder;

        $r1 = $r0.<kotlin.collections.builders.SetBuilder: kotlin.collections.builders.MapBuilder backing>;

        $i0 = virtualinvoke $r1.<kotlin.collections.builders.MapBuilder: int size()>();

        return $i0;
    }

    public boolean isEmpty()
    {
        kotlin.collections.builders.SetBuilder $r0;
        boolean $z0;
        kotlin.collections.builders.MapBuilder $r1;

        $r0 := @this: kotlin.collections.builders.SetBuilder;

        $r1 = $r0.<kotlin.collections.builders.SetBuilder: kotlin.collections.builders.MapBuilder backing>;

        $z0 = virtualinvoke $r1.<kotlin.collections.builders.MapBuilder: boolean isEmpty()>();

        return $z0;
    }

    public java.util.Iterator iterator()
    {
        kotlin.collections.builders.SetBuilder $r0;
        kotlin.collections.builders.MapBuilder$KeysItr $r1;
        kotlin.collections.builders.MapBuilder $r2;

        $r0 := @this: kotlin.collections.builders.SetBuilder;

        $r2 = $r0.<kotlin.collections.builders.SetBuilder: kotlin.collections.builders.MapBuilder backing>;

        $r1 = virtualinvoke $r2.<kotlin.collections.builders.MapBuilder: kotlin.collections.builders.MapBuilder$KeysItr keysIterator$kotlin_stdlib()>();

        return $r1;
    }

    public boolean remove(java.lang.Object)
    {
        kotlin.collections.builders.SetBuilder $r0;
        kotlin.collections.builders.MapBuilder $r1;
        int $i0;
        java.lang.Object $r2;

        $r0 := @this: kotlin.collections.builders.SetBuilder;

        $r2 := @parameter0: java.lang.Object;

        $r1 = $r0.<kotlin.collections.builders.SetBuilder: kotlin.collections.builders.MapBuilder backing>;

        $i0 = virtualinvoke $r1.<kotlin.collections.builders.MapBuilder: int removeKey$kotlin_stdlib(java.lang.Object)>($r2);

        if $i0 < 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean removeAll(java.util.Collection)
    {
        kotlin.collections.builders.SetBuilder $r0;
        boolean $z0;
        java.util.Collection $r1;
        kotlin.collections.builders.MapBuilder $r2;

        $r0 := @this: kotlin.collections.builders.SetBuilder;

        $r1 := @parameter0: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "elements");

        $r2 = $r0.<kotlin.collections.builders.SetBuilder: kotlin.collections.builders.MapBuilder backing>;

        virtualinvoke $r2.<kotlin.collections.builders.MapBuilder: void checkIsMutable$kotlin_stdlib()>();

        $z0 = specialinvoke $r0.<kotlin.collections.AbstractMutableSet: boolean removeAll(java.util.Collection)>($r1);

        return $z0;
    }

    public boolean retainAll(java.util.Collection)
    {
        kotlin.collections.builders.SetBuilder $r0;
        boolean $z0;
        java.util.Collection $r1;
        kotlin.collections.builders.MapBuilder $r2;

        $r0 := @this: kotlin.collections.builders.SetBuilder;

        $r1 := @parameter0: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "elements");

        $r2 = $r0.<kotlin.collections.builders.SetBuilder: kotlin.collections.builders.MapBuilder backing>;

        virtualinvoke $r2.<kotlin.collections.builders.MapBuilder: void checkIsMutable$kotlin_stdlib()>();

        $z0 = specialinvoke $r0.<kotlin.collections.AbstractMutableSet: boolean retainAll(java.util.Collection)>($r1);

        return $z0;
    }

