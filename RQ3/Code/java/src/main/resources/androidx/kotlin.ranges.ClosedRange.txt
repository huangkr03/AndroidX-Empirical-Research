kotlin.ranges.ClosedRange
<kotlin.ranges.ClosedRange: boolean contains(java.lang.Comparable)>
<kotlin.ranges.ClosedRange: java.lang.Comparable getEndInclusive()>
<kotlin.ranges.ClosedRange: java.lang.Comparable getStart()>
<kotlin.ranges.ClosedRange: boolean isEmpty()>
kotlin.ranges.ClosedRange$DefaultImpls
    public static boolean contains(kotlin.ranges.ClosedRange, java.lang.Comparable)
    {
        java.lang.Comparable $r0, $r2;
        kotlin.ranges.ClosedRange $r1;
        int $i0;

        $r1 := @parameter0: kotlin.ranges.ClosedRange;

        $r0 := @parameter1: java.lang.Comparable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "value");

        $r2 = interfaceinvoke $r1.<kotlin.ranges.ClosedRange: java.lang.Comparable getStart()>();

        $i0 = interfaceinvoke $r0.<java.lang.Comparable: int compareTo(java.lang.Object)>($r2);

        if $i0 < 0 goto label1;

        $r2 = interfaceinvoke $r1.<kotlin.ranges.ClosedRange: java.lang.Comparable getEndInclusive()>();

        $i0 = interfaceinvoke $r0.<java.lang.Comparable: int compareTo(java.lang.Object)>($r2);

        if $i0 > 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static boolean isEmpty(kotlin.ranges.ClosedRange)
    {
        kotlin.ranges.ClosedRange $r0;
        java.lang.Comparable $r1, $r2;
        int $i0;

        $r0 := @parameter0: kotlin.ranges.ClosedRange;

        $r1 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: java.lang.Comparable getStart()>();

        $r2 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: java.lang.Comparable getEndInclusive()>();

        $i0 = interfaceinvoke $r1.<java.lang.Comparable: int compareTo(java.lang.Object)>($r2);

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

