androidx.test.jank.internal.WindowContentFrameStatsMonitorImpl
<androidx.test.jank.internal.WindowContentFrameStatsMonitorImpl: java.lang.String TAG>
<androidx.test.jank.internal.WindowContentFrameStatsMonitorImpl: android.app.UiAutomation mUiAutomation>
<androidx.test.jank.internal.WindowContentFrameStatsMonitorImpl: int mWindowId>
    public void <init>(android.app.UiAutomation)
    {
        androidx.test.jank.internal.WindowContentFrameStatsMonitorImpl r0;
        android.app.UiAutomation r1;

        r0 := @this: androidx.test.jank.internal.WindowContentFrameStatsMonitorImpl;

        r1 := @parameter0: android.app.UiAutomation;

        specialinvoke r0.<androidx.test.jank.internal.FrameStatsMonitorBase: void <init>()>();

        r0.<androidx.test.jank.internal.WindowContentFrameStatsMonitorImpl: int mWindowId> = -1;

        r0.<androidx.test.jank.internal.WindowContentFrameStatsMonitorImpl: android.app.UiAutomation mUiAutomation> = r1;

        return;
    }

    public android.os.Bundle getMetrics()
    {
        androidx.test.jank.internal.WindowContentFrameStatsMonitorImpl r0;
        android.os.Bundle r1, $r2;
        java.util.ArrayList $r3, $r4, $r7, $r8;
        double $d0, $d1, $d2;
        java.lang.Object $r5;
        java.lang.Integer $r6;
        int $i0;

        r0 := @this: androidx.test.jank.internal.WindowContentFrameStatsMonitorImpl;

        $r2 = new android.os.Bundle;

        specialinvoke $r2.<android.os.Bundle: void <init>()>();

        r1 = $r2;

        $r3 = r0.<androidx.test.jank.internal.WindowContentFrameStatsMonitorImpl: java.util.ArrayList mJankyFrames>;

        $d0 = staticinvoke <androidx.test.jank.internal.MetricsHelper: double computeAverageInt(java.util.List)>($r3);

        virtualinvoke r1.<android.os.Bundle: void putDouble(java.lang.String,double)>("frame-avg-jank", $d0);

        $r4 = r0.<androidx.test.jank.internal.WindowContentFrameStatsMonitorImpl: java.util.ArrayList mJankyFrames>;

        $r5 = staticinvoke <java.util.Collections: java.lang.Object max(java.util.Collection)>($r4);

        $r6 = (java.lang.Integer) $r5;

        $i0 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        virtualinvoke r1.<android.os.Bundle: void putInt(java.lang.String,int)>("frame-max-jank", $i0);

        $r7 = r0.<androidx.test.jank.internal.WindowContentFrameStatsMonitorImpl: java.util.ArrayList mFps>;

        $d1 = staticinvoke <androidx.test.jank.internal.MetricsHelper: double computeAverageFloat(java.util.List)>($r7);

        virtualinvoke r1.<android.os.Bundle: void putDouble(java.lang.String,double)>("frame-fps", $d1);

        $r8 = r0.<androidx.test.jank.internal.WindowContentFrameStatsMonitorImpl: java.util.ArrayList mLongestNormalizedFrames>;

        $d2 = staticinvoke <androidx.test.jank.internal.MetricsHelper: double computeAverageFloat(java.util.List)>($r8);

        virtualinvoke r1.<android.os.Bundle: void putDouble(java.lang.String,double)>("frame-max-frame-duration", $d2);

        return r1;
    }

    public void startIteration()
    {
        androidx.test.jank.internal.WindowContentFrameStatsMonitorImpl r0;
        int $i0, $i1;
        android.app.UiAutomation $r1;

        r0 := @this: androidx.test.jank.internal.WindowContentFrameStatsMonitorImpl;

        $i0 = specialinvoke r0.<androidx.test.jank.internal.WindowContentFrameStatsMonitorImpl: int getCurrentWindow()>();

        r0.<androidx.test.jank.internal.WindowContentFrameStatsMonitorImpl: int mWindowId> = $i0;

        $r1 = r0.<androidx.test.jank.internal.WindowContentFrameStatsMonitorImpl: android.app.UiAutomation mUiAutomation>;

        $i1 = r0.<androidx.test.jank.internal.WindowContentFrameStatsMonitorImpl: int mWindowId>;

        virtualinvoke $r1.<android.app.UiAutomation: boolean clearWindowContentFrameStats(int)>($i1);

        return;
    }

    public int stopIteration()
    {
        androidx.test.jank.internal.WindowContentFrameStatsMonitorImpl r0;
        int i0, $i1, $i2;
        android.view.WindowContentFrameStats r1;
        android.app.UiAutomation $r2;

        r0 := @this: androidx.test.jank.internal.WindowContentFrameStatsMonitorImpl;

        i0 = specialinvoke r0.<androidx.test.jank.internal.WindowContentFrameStatsMonitorImpl: int getCurrentWindow()>();

        $i1 = r0.<androidx.test.jank.internal.WindowContentFrameStatsMonitorImpl: int mWindowId>;

        if i0 == $i1 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("JankTestHelper", "Current window changed during the test. Did you mean to use WindowAnimationFrameStatsMonitor?");

     label1:
        $r2 = r0.<androidx.test.jank.internal.WindowContentFrameStatsMonitorImpl: android.app.UiAutomation mUiAutomation>;

        r1 = virtualinvoke $r2.<android.app.UiAutomation: android.view.WindowContentFrameStats getWindowContentFrameStats(int)>(i0);

        virtualinvoke r0.<androidx.test.jank.internal.WindowContentFrameStatsMonitorImpl: void analyze(android.view.FrameStats)>(r1);

        r0.<androidx.test.jank.internal.WindowContentFrameStatsMonitorImpl: int mWindowId> = -1;

        $i2 = virtualinvoke r1.<android.view.FrameStats: int getFrameCount()>();

        return $i2;
    }

    private int getCurrentWindow()
    {
        androidx.test.jank.internal.WindowContentFrameStatsMonitorImpl r0;
        android.accessibilityservice.AccessibilityServiceInfo r1;
        android.view.accessibility.AccessibilityNodeInfo r2, $r12;
        java.util.Iterator r3;
        android.view.accessibility.AccessibilityWindowInfo r4;
        android.app.UiAutomation $r5, $r6, $r7, $r8;
        int $i0, $i1, $i2;
        java.util.List $r9;
        boolean $z0, $z1;
        java.lang.RuntimeException $r10;
        java.lang.Object $r11;

        r0 := @this: androidx.test.jank.internal.WindowContentFrameStatsMonitorImpl;

        $r5 = r0.<androidx.test.jank.internal.WindowContentFrameStatsMonitorImpl: android.app.UiAutomation mUiAutomation>;

        r1 = virtualinvoke $r5.<android.app.UiAutomation: android.accessibilityservice.AccessibilityServiceInfo getServiceInfo()>();

        $i0 = r1.<android.accessibilityservice.AccessibilityServiceInfo: int flags>;

        $i1 = $i0 | 64;

        r1.<android.accessibilityservice.AccessibilityServiceInfo: int flags> = $i1;

        $r6 = r0.<androidx.test.jank.internal.WindowContentFrameStatsMonitorImpl: android.app.UiAutomation mUiAutomation>;

        virtualinvoke $r6.<android.app.UiAutomation: void setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)>(r1);

        $r7 = r0.<androidx.test.jank.internal.WindowContentFrameStatsMonitorImpl: android.app.UiAutomation mUiAutomation>;

        r2 = virtualinvoke $r7.<android.app.UiAutomation: android.view.accessibility.AccessibilityNodeInfo getRootInActiveWindow()>();

        $r8 = r0.<androidx.test.jank.internal.WindowContentFrameStatsMonitorImpl: android.app.UiAutomation mUiAutomation>;

        $r9 = virtualinvoke $r8.<android.app.UiAutomation: java.util.List getWindows()>();

        r3 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r11 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.view.accessibility.AccessibilityWindowInfo) $r11;

        $r12 = virtualinvoke r4.<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityNodeInfo getRoot()>();

        $z1 = virtualinvoke $r12.<android.view.accessibility.AccessibilityNodeInfo: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label2;

        $i2 = virtualinvoke r4.<android.view.accessibility.AccessibilityWindowInfo: int getId()>();

        return $i2;

     label2:
        goto label1;

     label3:
        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>("Could not find active window");

        throw $r10;
    }

