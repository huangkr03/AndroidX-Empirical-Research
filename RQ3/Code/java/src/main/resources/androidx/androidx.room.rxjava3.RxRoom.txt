androidx.room.rxjava3.RxRoom
<androidx.room.rxjava3.RxRoom: java.lang.Object NOTHING>
    public static transient io.reactivex.rxjava3.core.Flowable createFlowable(androidx.room.RoomDatabase, java.lang.String[])
    {
        androidx.room.RoomDatabase r0;
        java.lang.String[] r1;
        io.reactivex.rxjava3.core.FlowableOnSubscribe $r2;
        io.reactivex.rxjava3.core.BackpressureStrategy $r3;
        io.reactivex.rxjava3.core.Flowable $r4;

        r0 := @parameter0: androidx.room.RoomDatabase;

        r1 := @parameter1: java.lang.String[];

        $r2 = dynamicinvoke "subscribe" <io.reactivex.rxjava3.core.FlowableOnSubscribe (java.lang.String[],androidx.room.RoomDatabase)>(r1, r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(io.reactivex.rxjava3.core.FlowableEmitter), methodhandle: "REF_INVOKE_STATIC" <androidx.room.rxjava3.RxRoom: void lambda$createFlowable$1(java.lang.String[],androidx.room.RoomDatabase,io.reactivex.rxjava3.core.FlowableEmitter)>, methodtype: void __METHODTYPE__(io.reactivex.rxjava3.core.FlowableEmitter));

        $r3 = <io.reactivex.rxjava3.core.BackpressureStrategy: io.reactivex.rxjava3.core.BackpressureStrategy LATEST>;

        $r4 = staticinvoke <io.reactivex.rxjava3.core.Flowable: io.reactivex.rxjava3.core.Flowable create(io.reactivex.rxjava3.core.FlowableOnSubscribe,io.reactivex.rxjava3.core.BackpressureStrategy)>($r2, $r3);

        return $r4;
    }

    public static io.reactivex.rxjava3.core.Flowable createFlowable(androidx.room.RoomDatabase, boolean, java.lang.String[], java.util.concurrent.Callable)
    {
        androidx.room.RoomDatabase r0;
        boolean z0;
        java.lang.String[] r1;
        java.util.concurrent.Callable r2;
        io.reactivex.rxjava3.core.Scheduler r3;
        io.reactivex.rxjava3.core.Maybe r4;
        java.util.concurrent.Executor $r5;
        io.reactivex.rxjava3.core.Flowable $r6, $r7, $r8, $r9, $r11;
        io.reactivex.rxjava3.functions.Function $r10;

        r0 := @parameter0: androidx.room.RoomDatabase;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.lang.String[];

        r2 := @parameter3: java.util.concurrent.Callable;

        $r5 = staticinvoke <androidx.room.rxjava3.RxRoom: java.util.concurrent.Executor getExecutor(androidx.room.RoomDatabase,boolean)>(r0, z0);

        r3 = staticinvoke <io.reactivex.rxjava3.schedulers.Schedulers: io.reactivex.rxjava3.core.Scheduler 'from'(java.util.concurrent.Executor)>($r5);

        r4 = staticinvoke <io.reactivex.rxjava3.core.Maybe: io.reactivex.rxjava3.core.Maybe fromCallable(java.util.concurrent.Callable)>(r2);

        $r6 = staticinvoke <androidx.room.rxjava3.RxRoom: io.reactivex.rxjava3.core.Flowable createFlowable(androidx.room.RoomDatabase,java.lang.String[])>(r0, r1);

        $r7 = virtualinvoke $r6.<io.reactivex.rxjava3.core.Flowable: io.reactivex.rxjava3.core.Flowable subscribeOn(io.reactivex.rxjava3.core.Scheduler)>(r3);

        $r8 = virtualinvoke $r7.<io.reactivex.rxjava3.core.Flowable: io.reactivex.rxjava3.core.Flowable unsubscribeOn(io.reactivex.rxjava3.core.Scheduler)>(r3);

        $r9 = virtualinvoke $r8.<io.reactivex.rxjava3.core.Flowable: io.reactivex.rxjava3.core.Flowable observeOn(io.reactivex.rxjava3.core.Scheduler)>(r3);

        $r10 = dynamicinvoke "apply" <io.reactivex.rxjava3.functions.Function (io.reactivex.rxjava3.core.Maybe)>(r4) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.room.rxjava3.RxRoom: io.reactivex.rxjava3.core.MaybeSource lambda$createFlowable$2(io.reactivex.rxjava3.core.Maybe,java.lang.Object)>, methodtype: io.reactivex.rxjava3.core.MaybeSource __METHODTYPE__(java.lang.Object));

        $r11 = virtualinvoke $r9.<io.reactivex.rxjava3.core.Flowable: io.reactivex.rxjava3.core.Flowable flatMapMaybe(io.reactivex.rxjava3.functions.Function)>($r10);

        return $r11;
    }

    public static transient io.reactivex.rxjava3.core.Observable createObservable(androidx.room.RoomDatabase, java.lang.String[])
    {
        androidx.room.RoomDatabase r0;
        java.lang.String[] r1;
        io.reactivex.rxjava3.core.ObservableOnSubscribe $r2;
        io.reactivex.rxjava3.core.Observable $r3;

        r0 := @parameter0: androidx.room.RoomDatabase;

        r1 := @parameter1: java.lang.String[];

        $r2 = dynamicinvoke "subscribe" <io.reactivex.rxjava3.core.ObservableOnSubscribe (java.lang.String[],androidx.room.RoomDatabase)>(r1, r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(io.reactivex.rxjava3.core.ObservableEmitter), methodhandle: "REF_INVOKE_STATIC" <androidx.room.rxjava3.RxRoom: void lambda$createObservable$4(java.lang.String[],androidx.room.RoomDatabase,io.reactivex.rxjava3.core.ObservableEmitter)>, methodtype: void __METHODTYPE__(io.reactivex.rxjava3.core.ObservableEmitter));

        $r3 = staticinvoke <io.reactivex.rxjava3.core.Observable: io.reactivex.rxjava3.core.Observable create(io.reactivex.rxjava3.core.ObservableOnSubscribe)>($r2);

        return $r3;
    }

    public static io.reactivex.rxjava3.core.Observable createObservable(androidx.room.RoomDatabase, boolean, java.lang.String[], java.util.concurrent.Callable)
    {
        androidx.room.RoomDatabase r0;
        boolean z0;
        java.lang.String[] r1;
        java.util.concurrent.Callable r2;
        io.reactivex.rxjava3.core.Scheduler r3;
        io.reactivex.rxjava3.core.Maybe r4;
        java.util.concurrent.Executor $r5;
        io.reactivex.rxjava3.core.Observable $r6, $r7, $r8, $r9, $r11;
        io.reactivex.rxjava3.functions.Function $r10;

        r0 := @parameter0: androidx.room.RoomDatabase;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.lang.String[];

        r2 := @parameter3: java.util.concurrent.Callable;

        $r5 = staticinvoke <androidx.room.rxjava3.RxRoom: java.util.concurrent.Executor getExecutor(androidx.room.RoomDatabase,boolean)>(r0, z0);

        r3 = staticinvoke <io.reactivex.rxjava3.schedulers.Schedulers: io.reactivex.rxjava3.core.Scheduler 'from'(java.util.concurrent.Executor)>($r5);

        r4 = staticinvoke <io.reactivex.rxjava3.core.Maybe: io.reactivex.rxjava3.core.Maybe fromCallable(java.util.concurrent.Callable)>(r2);

        $r6 = staticinvoke <androidx.room.rxjava3.RxRoom: io.reactivex.rxjava3.core.Observable createObservable(androidx.room.RoomDatabase,java.lang.String[])>(r0, r1);

        $r7 = virtualinvoke $r6.<io.reactivex.rxjava3.core.Observable: io.reactivex.rxjava3.core.Observable subscribeOn(io.reactivex.rxjava3.core.Scheduler)>(r3);

        $r8 = virtualinvoke $r7.<io.reactivex.rxjava3.core.Observable: io.reactivex.rxjava3.core.Observable unsubscribeOn(io.reactivex.rxjava3.core.Scheduler)>(r3);

        $r9 = virtualinvoke $r8.<io.reactivex.rxjava3.core.Observable: io.reactivex.rxjava3.core.Observable observeOn(io.reactivex.rxjava3.core.Scheduler)>(r3);

        $r10 = dynamicinvoke "apply" <io.reactivex.rxjava3.functions.Function (io.reactivex.rxjava3.core.Maybe)>(r4) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.room.rxjava3.RxRoom: io.reactivex.rxjava3.core.MaybeSource lambda$createObservable$5(io.reactivex.rxjava3.core.Maybe,java.lang.Object)>, methodtype: io.reactivex.rxjava3.core.MaybeSource __METHODTYPE__(java.lang.Object));

        $r11 = virtualinvoke $r9.<io.reactivex.rxjava3.core.Observable: io.reactivex.rxjava3.core.Observable flatMapMaybe(io.reactivex.rxjava3.functions.Function)>($r10);

        return $r11;
    }

    public static io.reactivex.rxjava3.core.Single createSingle(java.util.concurrent.Callable)
    {
        java.util.concurrent.Callable r0;
        io.reactivex.rxjava3.core.SingleOnSubscribe $r1;
        io.reactivex.rxjava3.core.Single $r2;

        r0 := @parameter0: java.util.concurrent.Callable;

        $r1 = dynamicinvoke "subscribe" <io.reactivex.rxjava3.core.SingleOnSubscribe (java.util.concurrent.Callable)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(io.reactivex.rxjava3.core.SingleEmitter), methodhandle: "REF_INVOKE_STATIC" <androidx.room.rxjava3.RxRoom: void lambda$createSingle$6(java.util.concurrent.Callable,io.reactivex.rxjava3.core.SingleEmitter)>, methodtype: void __METHODTYPE__(io.reactivex.rxjava3.core.SingleEmitter));

        $r2 = staticinvoke <io.reactivex.rxjava3.core.Single: io.reactivex.rxjava3.core.Single create(io.reactivex.rxjava3.core.SingleOnSubscribe)>($r1);

        return $r2;
    }

    private static java.util.concurrent.Executor getExecutor(androidx.room.RoomDatabase, boolean)
    {
        androidx.room.RoomDatabase r0;
        boolean z0;
        java.util.concurrent.Executor $r1, $r2;

        r0 := @parameter0: androidx.room.RoomDatabase;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<androidx.room.RoomDatabase: java.util.concurrent.Executor getTransactionExecutor()>();

        return $r2;

     label1:
        $r1 = virtualinvoke r0.<androidx.room.RoomDatabase: java.util.concurrent.Executor getQueryExecutor()>();

        return $r1;
    }

    private void <init>()
    {
        androidx.room.rxjava3.RxRoom r0;

        r0 := @this: androidx.room.rxjava3.RxRoom;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static void lambda$createSingle$6(java.util.concurrent.Callable, io.reactivex.rxjava3.core.SingleEmitter) throws java.lang.Throwable
    {
        java.util.concurrent.Callable r0;
        io.reactivex.rxjava3.core.SingleEmitter r1;
        java.lang.Object $r2;

        r0 := @parameter0: java.util.concurrent.Callable;

        r1 := @parameter1: io.reactivex.rxjava3.core.SingleEmitter;

        $r2 = interfaceinvoke r0.<java.util.concurrent.Callable: java.lang.Object call()>();

        interfaceinvoke r1.<io.reactivex.rxjava3.core.SingleEmitter: void onSuccess(java.lang.Object)>($r2);

        goto label1;

     label1:
        return;
    }

    private static io.reactivex.rxjava3.core.MaybeSource lambda$createObservable$5(io.reactivex.rxjava3.core.Maybe, java.lang.Object) throws java.lang.Throwable
    {
        io.reactivex.rxjava3.core.Maybe r0;
        java.lang.Object r1;

        r0 := @parameter0: io.reactivex.rxjava3.core.Maybe;

        r1 := @parameter1: java.lang.Object;

        return r0;
    }

    private static void lambda$createObservable$4(java.lang.String[], androidx.room.RoomDatabase, io.reactivex.rxjava3.core.ObservableEmitter) throws java.lang.Throwable
    {
        java.lang.String[] r0;
        androidx.room.RoomDatabase r1;
        io.reactivex.rxjava3.core.ObservableEmitter r2;
        androidx.room.rxjava3.RxRoom$2 r3, $r4;
        androidx.room.InvalidationTracker $r5;
        io.reactivex.rxjava3.functions.Action $r6;
        io.reactivex.rxjava3.disposables.Disposable $r7;
        java.lang.Object $r8;

        r0 := @parameter0: java.lang.String[];

        r1 := @parameter1: androidx.room.RoomDatabase;

        r2 := @parameter2: io.reactivex.rxjava3.core.ObservableEmitter;

        $r4 = new androidx.room.rxjava3.RxRoom$2;

        specialinvoke $r4.<androidx.room.rxjava3.RxRoom$2: void <init>(java.lang.String[],io.reactivex.rxjava3.core.ObservableEmitter)>(r0, r2);

        r3 = $r4;

        $r5 = virtualinvoke r1.<androidx.room.RoomDatabase: androidx.room.InvalidationTracker getInvalidationTracker()>();

        virtualinvoke $r5.<androidx.room.InvalidationTracker: void addObserver(androidx.room.InvalidationTracker$Observer)>(r3);

        $r6 = dynamicinvoke "run" <io.reactivex.rxjava3.functions.Action (androidx.room.RoomDatabase,androidx.room.InvalidationTracker$Observer)>(r1, r3) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.room.rxjava3.RxRoom: void lambda$createObservable$3(androidx.room.RoomDatabase,androidx.room.InvalidationTracker$Observer)>, methodtype: void __METHODTYPE__());

        $r7 = staticinvoke <io.reactivex.rxjava3.disposables.Disposable: io.reactivex.rxjava3.disposables.Disposable fromAction(io.reactivex.rxjava3.functions.Action)>($r6);

        interfaceinvoke r2.<io.reactivex.rxjava3.core.ObservableEmitter: void setDisposable(io.reactivex.rxjava3.disposables.Disposable)>($r7);

        $r8 = <androidx.room.rxjava3.RxRoom: java.lang.Object NOTHING>;

        interfaceinvoke r2.<io.reactivex.rxjava3.core.ObservableEmitter: void onNext(java.lang.Object)>($r8);

        return;
    }

    private static void lambda$createObservable$3(androidx.room.RoomDatabase, androidx.room.InvalidationTracker$Observer) throws java.lang.Throwable
    {
        androidx.room.RoomDatabase r0;
        androidx.room.InvalidationTracker$Observer r1;
        androidx.room.InvalidationTracker $r2;

        r0 := @parameter0: androidx.room.RoomDatabase;

        r1 := @parameter1: androidx.room.InvalidationTracker$Observer;

        $r2 = virtualinvoke r0.<androidx.room.RoomDatabase: androidx.room.InvalidationTracker getInvalidationTracker()>();

        virtualinvoke $r2.<androidx.room.InvalidationTracker: void removeObserver(androidx.room.InvalidationTracker$Observer)>(r1);

        return;
    }

    private static io.reactivex.rxjava3.core.MaybeSource lambda$createFlowable$2(io.reactivex.rxjava3.core.Maybe, java.lang.Object) throws java.lang.Throwable
    {
        io.reactivex.rxjava3.core.Maybe r0;
        java.lang.Object r1;

        r0 := @parameter0: io.reactivex.rxjava3.core.Maybe;

        r1 := @parameter1: java.lang.Object;

        return r0;
    }

    private static void lambda$createFlowable$1(java.lang.String[], androidx.room.RoomDatabase, io.reactivex.rxjava3.core.FlowableEmitter) throws java.lang.Throwable
    {
        java.lang.String[] r0;
        androidx.room.RoomDatabase r1;
        io.reactivex.rxjava3.core.FlowableEmitter r2;
        androidx.room.rxjava3.RxRoom$1 r3, $r4;
        boolean $z0, $z1;
        java.lang.Object $r5;
        androidx.room.InvalidationTracker $r6;
        io.reactivex.rxjava3.functions.Action $r7;
        io.reactivex.rxjava3.disposables.Disposable $r8;

        r0 := @parameter0: java.lang.String[];

        r1 := @parameter1: androidx.room.RoomDatabase;

        r2 := @parameter2: io.reactivex.rxjava3.core.FlowableEmitter;

        $r4 = new androidx.room.rxjava3.RxRoom$1;

        specialinvoke $r4.<androidx.room.rxjava3.RxRoom$1: void <init>(java.lang.String[],io.reactivex.rxjava3.core.FlowableEmitter)>(r0, r2);

        r3 = $r4;

        $z0 = interfaceinvoke r2.<io.reactivex.rxjava3.core.FlowableEmitter: boolean isCancelled()>();

        if $z0 != 0 goto label1;

        $r6 = virtualinvoke r1.<androidx.room.RoomDatabase: androidx.room.InvalidationTracker getInvalidationTracker()>();

        virtualinvoke $r6.<androidx.room.InvalidationTracker: void addObserver(androidx.room.InvalidationTracker$Observer)>(r3);

        $r7 = dynamicinvoke "run" <io.reactivex.rxjava3.functions.Action (androidx.room.RoomDatabase,androidx.room.InvalidationTracker$Observer)>(r1, r3) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.room.rxjava3.RxRoom: void lambda$createFlowable$0(androidx.room.RoomDatabase,androidx.room.InvalidationTracker$Observer)>, methodtype: void __METHODTYPE__());

        $r8 = staticinvoke <io.reactivex.rxjava3.disposables.Disposable: io.reactivex.rxjava3.disposables.Disposable fromAction(io.reactivex.rxjava3.functions.Action)>($r7);

        interfaceinvoke r2.<io.reactivex.rxjava3.core.FlowableEmitter: void setDisposable(io.reactivex.rxjava3.disposables.Disposable)>($r8);

     label1:
        $z1 = interfaceinvoke r2.<io.reactivex.rxjava3.core.FlowableEmitter: boolean isCancelled()>();

        if $z1 != 0 goto label2;

        $r5 = <androidx.room.rxjava3.RxRoom: java.lang.Object NOTHING>;

        interfaceinvoke r2.<io.reactivex.rxjava3.core.FlowableEmitter: void onNext(java.lang.Object)>($r5);

     label2:
        return;
    }

    private static void lambda$createFlowable$0(androidx.room.RoomDatabase, androidx.room.InvalidationTracker$Observer) throws java.lang.Throwable
    {
        androidx.room.RoomDatabase r0;
        androidx.room.InvalidationTracker$Observer r1;
        androidx.room.InvalidationTracker $r2;

        r0 := @parameter0: androidx.room.RoomDatabase;

        r1 := @parameter1: androidx.room.InvalidationTracker$Observer;

        $r2 = virtualinvoke r0.<androidx.room.RoomDatabase: androidx.room.InvalidationTracker getInvalidationTracker()>();

        virtualinvoke $r2.<androidx.room.InvalidationTracker: void removeObserver(androidx.room.InvalidationTracker$Observer)>(r1);

        return;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <androidx.room.rxjava3.RxRoom: java.lang.Object NOTHING> = $r0;

        return;
    }

androidx.room.rxjava3.RxRoom$1
<androidx.room.rxjava3.RxRoom$1: io.reactivex.rxjava3.core.FlowableEmitter val$emitter>
    void <init>(java.lang.String[], io.reactivex.rxjava3.core.FlowableEmitter)
    {
        androidx.room.rxjava3.RxRoom$1 r0;
        java.lang.String[] r1;
        io.reactivex.rxjava3.core.FlowableEmitter r2;

        r0 := @this: androidx.room.rxjava3.RxRoom$1;

        r1 := @parameter0: java.lang.String[];

        r2 := @parameter1: io.reactivex.rxjava3.core.FlowableEmitter;

        r0.<androidx.room.rxjava3.RxRoom$1: io.reactivex.rxjava3.core.FlowableEmitter val$emitter> = r2;

        specialinvoke r0.<androidx.room.InvalidationTracker$Observer: void <init>(java.lang.String[])>(r1);

        return;
    }

    public void onInvalidated(java.util.Set)
    {
        androidx.room.rxjava3.RxRoom$1 r0;
        java.util.Set r1;
        io.reactivex.rxjava3.core.FlowableEmitter $r2, $r4;
        boolean $z0;
        java.lang.Object $r3;

        r0 := @this: androidx.room.rxjava3.RxRoom$1;

        r1 := @parameter0: java.util.Set;

        $r2 = r0.<androidx.room.rxjava3.RxRoom$1: io.reactivex.rxjava3.core.FlowableEmitter val$emitter>;

        $z0 = interfaceinvoke $r2.<io.reactivex.rxjava3.core.FlowableEmitter: boolean isCancelled()>();

        if $z0 != 0 goto label1;

        $r4 = r0.<androidx.room.rxjava3.RxRoom$1: io.reactivex.rxjava3.core.FlowableEmitter val$emitter>;

        $r3 = <androidx.room.rxjava3.RxRoom: java.lang.Object NOTHING>;

        interfaceinvoke $r4.<io.reactivex.rxjava3.core.FlowableEmitter: void onNext(java.lang.Object)>($r3);

     label1:
        return;
    }

androidx.room.rxjava3.RxRoom$2
<androidx.room.rxjava3.RxRoom$2: io.reactivex.rxjava3.core.ObservableEmitter val$emitter>
    void <init>(java.lang.String[], io.reactivex.rxjava3.core.ObservableEmitter)
    {
        androidx.room.rxjava3.RxRoom$2 r0;
        java.lang.String[] r1;
        io.reactivex.rxjava3.core.ObservableEmitter r2;

        r0 := @this: androidx.room.rxjava3.RxRoom$2;

        r1 := @parameter0: java.lang.String[];

        r2 := @parameter1: io.reactivex.rxjava3.core.ObservableEmitter;

        r0.<androidx.room.rxjava3.RxRoom$2: io.reactivex.rxjava3.core.ObservableEmitter val$emitter> = r2;

        specialinvoke r0.<androidx.room.InvalidationTracker$Observer: void <init>(java.lang.String[])>(r1);

        return;
    }

    public void onInvalidated(java.util.Set)
    {
        androidx.room.rxjava3.RxRoom$2 r0;
        java.util.Set r1;
        java.lang.Object $r2;
        io.reactivex.rxjava3.core.ObservableEmitter $r3;

        r0 := @this: androidx.room.rxjava3.RxRoom$2;

        r1 := @parameter0: java.util.Set;

        $r3 = r0.<androidx.room.rxjava3.RxRoom$2: io.reactivex.rxjava3.core.ObservableEmitter val$emitter>;

        $r2 = <androidx.room.rxjava3.RxRoom: java.lang.Object NOTHING>;

        interfaceinvoke $r3.<io.reactivex.rxjava3.core.ObservableEmitter: void onNext(java.lang.Object)>($r2);

        return;
    }

