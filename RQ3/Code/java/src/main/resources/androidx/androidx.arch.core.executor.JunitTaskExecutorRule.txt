androidx.arch.core.executor.JunitTaskExecutorRule
<androidx.arch.core.executor.JunitTaskExecutorRule: androidx.arch.core.executor.TaskExecutorWithFakeMainThread mTaskExecutor>
    public void <init>(int, boolean)
    {
        androidx.arch.core.executor.JunitTaskExecutorRule r0;
        int i0;
        boolean z0;
        androidx.arch.core.executor.TaskExecutorWithFakeMainThread $r1, $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: androidx.arch.core.executor.JunitTaskExecutorRule;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if z0 == 0 goto label1;

        $r2 = new androidx.arch.core.executor.TaskExecutorWithFakeMainThread;

        specialinvoke $r2.<androidx.arch.core.executor.TaskExecutorWithFakeMainThread: void <init>(int)>(i0);

        $r3 = staticinvoke <org.mockito.Mockito: java.lang.Object spy(java.lang.Object)>($r2);

        $r4 = (androidx.arch.core.executor.TaskExecutorWithFakeMainThread) $r3;

        r0.<androidx.arch.core.executor.JunitTaskExecutorRule: androidx.arch.core.executor.TaskExecutorWithFakeMainThread mTaskExecutor> = $r4;

        goto label2;

     label1:
        $r1 = new androidx.arch.core.executor.TaskExecutorWithFakeMainThread;

        specialinvoke $r1.<androidx.arch.core.executor.TaskExecutorWithFakeMainThread: void <init>(int)>(i0);

        r0.<androidx.arch.core.executor.JunitTaskExecutorRule: androidx.arch.core.executor.TaskExecutorWithFakeMainThread mTaskExecutor> = $r1;

     label2:
        return;
    }

    void beforeStart()
    {
        androidx.arch.core.executor.JunitTaskExecutorRule r0;
        androidx.arch.core.executor.ArchTaskExecutor $r1;
        androidx.arch.core.executor.TaskExecutorWithFakeMainThread $r2;

        r0 := @this: androidx.arch.core.executor.JunitTaskExecutorRule;

        $r1 = staticinvoke <androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.ArchTaskExecutor getInstance()>();

        $r2 = r0.<androidx.arch.core.executor.JunitTaskExecutorRule: androidx.arch.core.executor.TaskExecutorWithFakeMainThread mTaskExecutor>;

        virtualinvoke $r1.<androidx.arch.core.executor.ArchTaskExecutor: void setDelegate(androidx.arch.core.executor.TaskExecutor)>($r2);

        return;
    }

    void afterFinished()
    {
        androidx.arch.core.executor.JunitTaskExecutorRule r0;
        androidx.arch.core.executor.ArchTaskExecutor $r1;

        r0 := @this: androidx.arch.core.executor.JunitTaskExecutorRule;

        $r1 = staticinvoke <androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.ArchTaskExecutor getInstance()>();

        virtualinvoke $r1.<androidx.arch.core.executor.ArchTaskExecutor: void setDelegate(androidx.arch.core.executor.TaskExecutor)>(null);

        return;
    }

    public androidx.arch.core.executor.TaskExecutor getTaskExecutor()
    {
        androidx.arch.core.executor.JunitTaskExecutorRule r0;
        androidx.arch.core.executor.TaskExecutorWithFakeMainThread $r1;

        r0 := @this: androidx.arch.core.executor.JunitTaskExecutorRule;

        $r1 = r0.<androidx.arch.core.executor.JunitTaskExecutorRule: androidx.arch.core.executor.TaskExecutorWithFakeMainThread mTaskExecutor>;

        return $r1;
    }

    public void drainTasks(int) throws java.lang.InterruptedException
    {
        androidx.arch.core.executor.JunitTaskExecutorRule r0;
        int i0;
        androidx.arch.core.executor.TaskExecutorWithFakeMainThread $r1;

        r0 := @this: androidx.arch.core.executor.JunitTaskExecutorRule;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.arch.core.executor.JunitTaskExecutorRule: androidx.arch.core.executor.TaskExecutorWithFakeMainThread mTaskExecutor>;

        virtualinvoke $r1.<androidx.arch.core.executor.TaskExecutorWithFakeMainThread: void drainTasks(int)>(i0);

        return;
    }

    public org.junit.runners.model.Statement apply(org.junit.runners.model.Statement, org.junit.runner.Description)
    {
        androidx.arch.core.executor.JunitTaskExecutorRule r0;
        org.junit.runners.model.Statement r1;
        org.junit.runner.Description r2;
        androidx.arch.core.executor.JunitTaskExecutorRule$1 $r3;

        r0 := @this: androidx.arch.core.executor.JunitTaskExecutorRule;

        r1 := @parameter0: org.junit.runners.model.Statement;

        r2 := @parameter1: org.junit.runner.Description;

        $r3 = new androidx.arch.core.executor.JunitTaskExecutorRule$1;

        specialinvoke $r3.<androidx.arch.core.executor.JunitTaskExecutorRule$1: void <init>(androidx.arch.core.executor.JunitTaskExecutorRule,org.junit.runners.model.Statement)>(r0, r1);

        return $r3;
    }

    void finishExecutors() throws java.lang.InterruptedException, org.junit.runners.model.MultipleFailureException
    {
        androidx.arch.core.executor.JunitTaskExecutorRule r0;
        java.util.List r1;
        androidx.arch.core.executor.TaskExecutorWithFakeMainThread $r2, $r3;
        boolean $z0;
        org.junit.runners.model.MultipleFailureException $r4;

        r0 := @this: androidx.arch.core.executor.JunitTaskExecutorRule;

        $r2 = r0.<androidx.arch.core.executor.JunitTaskExecutorRule: androidx.arch.core.executor.TaskExecutorWithFakeMainThread mTaskExecutor>;

        virtualinvoke $r2.<androidx.arch.core.executor.TaskExecutorWithFakeMainThread: void shutdown(int)>(10);

        $r3 = r0.<androidx.arch.core.executor.JunitTaskExecutorRule: androidx.arch.core.executor.TaskExecutorWithFakeMainThread mTaskExecutor>;

        r1 = virtualinvoke $r3.<androidx.arch.core.executor.TaskExecutorWithFakeMainThread: java.util.List getErrors()>();

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r4 = new org.junit.runners.model.MultipleFailureException;

        specialinvoke $r4.<org.junit.runners.model.MultipleFailureException: void <init>(java.util.List)>(r1);

        throw $r4;

     label1:
        return;
    }

androidx.arch.core.executor.JunitTaskExecutorRule$1
<androidx.arch.core.executor.JunitTaskExecutorRule$1: org.junit.runners.model.Statement val$base>
<androidx.arch.core.executor.JunitTaskExecutorRule$1: androidx.arch.core.executor.JunitTaskExecutorRule this$0>
    void <init>(androidx.arch.core.executor.JunitTaskExecutorRule, org.junit.runners.model.Statement)
    {
        androidx.arch.core.executor.JunitTaskExecutorRule$1 r0;
        androidx.arch.core.executor.JunitTaskExecutorRule r1;
        org.junit.runners.model.Statement r2;

        r0 := @this: androidx.arch.core.executor.JunitTaskExecutorRule$1;

        r1 := @parameter0: androidx.arch.core.executor.JunitTaskExecutorRule;

        r2 := @parameter1: org.junit.runners.model.Statement;

        r0.<androidx.arch.core.executor.JunitTaskExecutorRule$1: androidx.arch.core.executor.JunitTaskExecutorRule this$0> = r1;

        r0.<androidx.arch.core.executor.JunitTaskExecutorRule$1: org.junit.runners.model.Statement val$base> = r2;

        specialinvoke r0.<org.junit.runners.model.Statement: void <init>()>();

        return;
    }

    public void evaluate()
    {
        androidx.arch.core.executor.JunitTaskExecutorRule$1 r0;
        java.lang.Throwable r1, r2, $r7, $r9;
        androidx.arch.core.executor.JunitTaskExecutorRule $r3, $r5, $r6, $r8;
        org.junit.runners.model.Statement $r4;
        java.lang.RuntimeException $r10;

        r0 := @this: androidx.arch.core.executor.JunitTaskExecutorRule$1;

        $r3 = r0.<androidx.arch.core.executor.JunitTaskExecutorRule$1: androidx.arch.core.executor.JunitTaskExecutorRule this$0>;

        virtualinvoke $r3.<androidx.arch.core.executor.JunitTaskExecutorRule: void beforeStart()>();

     label1:
        $r4 = r0.<androidx.arch.core.executor.JunitTaskExecutorRule$1: org.junit.runners.model.Statement val$base>;

        virtualinvoke $r4.<org.junit.runners.model.Statement: void evaluate()>();

        $r5 = r0.<androidx.arch.core.executor.JunitTaskExecutorRule$1: androidx.arch.core.executor.JunitTaskExecutorRule this$0>;

        virtualinvoke $r5.<androidx.arch.core.executor.JunitTaskExecutorRule: void finishExecutors()>();

     label2:
        $r6 = r0.<androidx.arch.core.executor.JunitTaskExecutorRule$1: androidx.arch.core.executor.JunitTaskExecutorRule this$0>;

        virtualinvoke $r6.<androidx.arch.core.executor.JunitTaskExecutorRule: void afterFinished()>();

        goto label6;

     label3:
        $r9 := @caughtexception;

        r1 = $r9;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r10;

     label4:
        $r7 := @caughtexception;

        r2 = $r7;

     label5:
        $r8 = r0.<androidx.arch.core.executor.JunitTaskExecutorRule$1: androidx.arch.core.executor.JunitTaskExecutorRule this$0>;

        virtualinvoke $r8.<androidx.arch.core.executor.JunitTaskExecutorRule: void afterFinished()>();

        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label5 with label4;
    }

