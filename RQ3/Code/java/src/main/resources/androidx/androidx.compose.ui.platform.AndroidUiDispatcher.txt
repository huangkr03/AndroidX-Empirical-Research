androidx.compose.ui.platform.AndroidUiDispatcher
<androidx.compose.ui.platform.AndroidUiDispatcher: androidx.compose.ui.platform.AndroidUiDispatcher$Companion Companion>
<androidx.compose.ui.platform.AndroidUiDispatcher: android.view.Choreographer choreographer>
<androidx.compose.ui.platform.AndroidUiDispatcher: android.os.Handler handler>
<androidx.compose.ui.platform.AndroidUiDispatcher: java.lang.Object lock>
<androidx.compose.ui.platform.AndroidUiDispatcher: kotlin.collections.ArrayDeque toRunTrampolined>
<androidx.compose.ui.platform.AndroidUiDispatcher: java.util.List toRunOnFrame>
<androidx.compose.ui.platform.AndroidUiDispatcher: java.util.List spareToRunOnFrame>
<androidx.compose.ui.platform.AndroidUiDispatcher: boolean scheduledTrampolineDispatch>
<androidx.compose.ui.platform.AndroidUiDispatcher: boolean scheduledFrameDispatch>
<androidx.compose.ui.platform.AndroidUiDispatcher: androidx.compose.ui.platform.AndroidUiDispatcher$dispatchCallback$1 dispatchCallback>
<androidx.compose.ui.platform.AndroidUiDispatcher: androidx.compose.runtime.MonotonicFrameClock frameClock>
<androidx.compose.ui.platform.AndroidUiDispatcher: int $stable>
<androidx.compose.ui.platform.AndroidUiDispatcher: kotlin.Lazy Main$delegate>
<androidx.compose.ui.platform.AndroidUiDispatcher: java.lang.ThreadLocal currentThread>
    private void <init>(android.view.Choreographer, android.os.Handler)
    {
        androidx.compose.ui.platform.AndroidUiDispatcher r0;
        android.view.Choreographer r1, $r11;
        android.os.Handler r2;
        java.lang.Object $r3;
        kotlin.collections.ArrayDeque $r4;
        java.util.ArrayList $r5, $r7;
        java.util.List $r6, $r8;
        androidx.compose.ui.platform.AndroidUiDispatcher$dispatchCallback$1 $r9;
        androidx.compose.ui.platform.AndroidUiFrameClock $r10;
        androidx.compose.runtime.MonotonicFrameClock $r12;

        r0 := @this: androidx.compose.ui.platform.AndroidUiDispatcher;

        r1 := @parameter0: android.view.Choreographer;

        r2 := @parameter1: android.os.Handler;

        specialinvoke r0.<kotlinx.coroutines.CoroutineDispatcher: void <init>()>();

        r0.<androidx.compose.ui.platform.AndroidUiDispatcher: android.view.Choreographer choreographer> = r1;

        r0.<androidx.compose.ui.platform.AndroidUiDispatcher: android.os.Handler handler> = r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.ui.platform.AndroidUiDispatcher: java.lang.Object lock> = $r3;

        $r4 = new kotlin.collections.ArrayDeque;

        specialinvoke $r4.<kotlin.collections.ArrayDeque: void <init>()>();

        r0.<androidx.compose.ui.platform.AndroidUiDispatcher: kotlin.collections.ArrayDeque toRunTrampolined> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = (java.util.List) $r5;

        r0.<androidx.compose.ui.platform.AndroidUiDispatcher: java.util.List toRunOnFrame> = $r6;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        $r8 = (java.util.List) $r7;

        r0.<androidx.compose.ui.platform.AndroidUiDispatcher: java.util.List spareToRunOnFrame> = $r8;

        $r9 = new androidx.compose.ui.platform.AndroidUiDispatcher$dispatchCallback$1;

        specialinvoke $r9.<androidx.compose.ui.platform.AndroidUiDispatcher$dispatchCallback$1: void <init>(androidx.compose.ui.platform.AndroidUiDispatcher)>(r0);

        r0.<androidx.compose.ui.platform.AndroidUiDispatcher: androidx.compose.ui.platform.AndroidUiDispatcher$dispatchCallback$1 dispatchCallback> = $r9;

        $r10 = new androidx.compose.ui.platform.AndroidUiFrameClock;

        $r11 = r0.<androidx.compose.ui.platform.AndroidUiDispatcher: android.view.Choreographer choreographer>;

        specialinvoke $r10.<androidx.compose.ui.platform.AndroidUiFrameClock: void <init>(android.view.Choreographer)>($r11);

        $r12 = (androidx.compose.runtime.MonotonicFrameClock) $r10;

        r0.<androidx.compose.ui.platform.AndroidUiDispatcher: androidx.compose.runtime.MonotonicFrameClock frameClock> = $r12;

        return;
    }

    public final android.view.Choreographer getChoreographer()
    {
        androidx.compose.ui.platform.AndroidUiDispatcher r0;
        android.view.Choreographer $r1;

        r0 := @this: androidx.compose.ui.platform.AndroidUiDispatcher;

        $r1 = r0.<androidx.compose.ui.platform.AndroidUiDispatcher: android.view.Choreographer choreographer>;

        return $r1;
    }

    private final java.lang.Runnable nextTask()
    {
        androidx.compose.ui.platform.AndroidUiDispatcher r0;
        java.lang.Object r1, r2, $r4;
        kotlin.collections.ArrayDeque $r3;
        java.lang.Throwable $r5;
        java.lang.Runnable $r6;

        r0 := @this: androidx.compose.ui.platform.AndroidUiDispatcher;

        r1 = r0.<androidx.compose.ui.platform.AndroidUiDispatcher: java.lang.Object lock>;

        r2 = r1;

        entermonitor r2;

     label1:
        $r3 = r0.<androidx.compose.ui.platform.AndroidUiDispatcher: kotlin.collections.ArrayDeque toRunTrampolined>;

        $r4 = virtualinvoke $r3.<kotlin.collections.ArrayDeque: java.lang.Object removeFirstOrNull()>();

        $r6 = (java.lang.Runnable) $r4;

     label2:
        exitmonitor r2;

        goto label5;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r2;

        throw $r5;

     label5:
        return $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private final void performTrampolineDispatch()
    {
        androidx.compose.ui.platform.AndroidUiDispatcher r0;
        java.lang.Object r1, r2;
        kotlin.collections.ArrayDeque $r3;
        boolean $z1, $z3;
        java.lang.Throwable $r4;
        java.lang.Runnable r5;

        r0 := @this: androidx.compose.ui.platform.AndroidUiDispatcher;

     label1:
        r5 = specialinvoke r0.<androidx.compose.ui.platform.AndroidUiDispatcher: java.lang.Runnable nextTask()>();

     label2:
        if r5 == null goto label3;

        interfaceinvoke r5.<java.lang.Runnable: void run()>();

        r5 = specialinvoke r0.<androidx.compose.ui.platform.AndroidUiDispatcher: java.lang.Runnable nextTask()>();

        goto label2;

     label3:
        r1 = r0.<androidx.compose.ui.platform.AndroidUiDispatcher: java.lang.Object lock>;

        r2 = r1;

        entermonitor r2;

     label4:
        $r3 = r0.<androidx.compose.ui.platform.AndroidUiDispatcher: kotlin.collections.ArrayDeque toRunTrampolined>;

        $z1 = virtualinvoke $r3.<kotlin.collections.ArrayDeque: boolean isEmpty()>();

        if $z1 == 0 goto label5;

        r0.<androidx.compose.ui.platform.AndroidUiDispatcher: boolean scheduledTrampolineDispatch> = 0;

        $z3 = 0;

        goto label6;

     label5:
        $z3 = 1;

     label6:
        exitmonitor r2;

        goto label9;

     label7:
        $r4 := @caughtexception;

     label8:
        exitmonitor r2;

        throw $r4;

     label9:
        if $z3 != 0 goto label1;

        return;

        catch java.lang.Throwable from label4 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    private final void performFrameDispatch(long)
    {
        androidx.compose.ui.platform.AndroidUiDispatcher r0;
        long l0;
        java.util.List r1, r3, $r4;
        java.lang.Object r2, $r5, r7;
        boolean $z0;
        android.view.Choreographer$FrameCallback $r6;
        int i1, $i2;

        r0 := @this: androidx.compose.ui.platform.AndroidUiDispatcher;

        l0 := @parameter0: long;

        r7 = r0.<androidx.compose.ui.platform.AndroidUiDispatcher: java.lang.Object lock>;

        r2 = r7;

        entermonitor r2;

        $z0 = r0.<androidx.compose.ui.platform.AndroidUiDispatcher: boolean scheduledFrameDispatch>;

        if $z0 != 0 goto label1;

        exitmonitor r2;

        return;

     label1:
        r0.<androidx.compose.ui.platform.AndroidUiDispatcher: boolean scheduledFrameDispatch> = 0;

        r3 = r0.<androidx.compose.ui.platform.AndroidUiDispatcher: java.util.List toRunOnFrame>;

        $r4 = r0.<androidx.compose.ui.platform.AndroidUiDispatcher: java.util.List spareToRunOnFrame>;

        r0.<androidx.compose.ui.platform.AndroidUiDispatcher: java.util.List toRunOnFrame> = $r4;

        r0.<androidx.compose.ui.platform.AndroidUiDispatcher: java.util.List spareToRunOnFrame> = r3;

        exitmonitor r2;

        goto label2;

     label2:
        r1 = r3;

        i1 = 0;

        $i2 = interfaceinvoke r1.<java.util.List: int size()>();

     label3:
        if i1 >= $i2 goto label4;

        $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1);

        $r6 = (android.view.Choreographer$FrameCallback) $r5;

        interfaceinvoke $r6.<android.view.Choreographer$FrameCallback: void doFrame(long)>(l0);

        i1 = i1 + 1;

        goto label3;

     label4:
        interfaceinvoke r1.<java.util.List: void clear()>();

        return;
    }

    public final void postFrameCallback$ui_release(android.view.Choreographer$FrameCallback)
    {
        androidx.compose.ui.platform.AndroidUiDispatcher r0;
        android.view.Choreographer$FrameCallback r1, $r6;
        java.lang.Object r2, r3;
        java.util.List $r4;
        boolean $z3;
        androidx.compose.ui.platform.AndroidUiDispatcher$dispatchCallback$1 $r5;
        android.view.Choreographer $r7;
        java.lang.Throwable $r8, r10;
        kotlin.Unit r9;

        r0 := @this: androidx.compose.ui.platform.AndroidUiDispatcher;

        r1 := @parameter0: android.view.Choreographer$FrameCallback;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "callback");

        r2 = r0.<androidx.compose.ui.platform.AndroidUiDispatcher: java.lang.Object lock>;

        r3 = r2;

        entermonitor r3;

     label1:
        $r4 = r0.<androidx.compose.ui.platform.AndroidUiDispatcher: java.util.List toRunOnFrame>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r1);

        $z3 = r0.<androidx.compose.ui.platform.AndroidUiDispatcher: boolean scheduledFrameDispatch>;

        if $z3 != 0 goto label2;

        r0.<androidx.compose.ui.platform.AndroidUiDispatcher: boolean scheduledFrameDispatch> = 1;

        $r7 = r0.<androidx.compose.ui.platform.AndroidUiDispatcher: android.view.Choreographer choreographer>;

        $r5 = r0.<androidx.compose.ui.platform.AndroidUiDispatcher: androidx.compose.ui.platform.AndroidUiDispatcher$dispatchCallback$1 dispatchCallback>;

        $r6 = (android.view.Choreographer$FrameCallback) $r5;

        virtualinvoke $r7.<android.view.Choreographer: void postFrameCallback(android.view.Choreographer$FrameCallback)>($r6);

     label2:
        r9 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label3:
        exitmonitor r3;

        goto label6;

     label4:
        $r8 := @caughtexception;

        r10 = $r8;

     label5:
        exitmonitor r3;

        throw r10;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public final void removeFrameCallback$ui_release(android.view.Choreographer$FrameCallback)
    {
        androidx.compose.ui.platform.AndroidUiDispatcher r0;
        android.view.Choreographer$FrameCallback r1;
        java.lang.Object r2, r3;
        java.util.List $r4;
        java.lang.Throwable $r5, r6;
        boolean z2;

        r0 := @this: androidx.compose.ui.platform.AndroidUiDispatcher;

        r1 := @parameter0: android.view.Choreographer$FrameCallback;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "callback");

        r2 = r0.<androidx.compose.ui.platform.AndroidUiDispatcher: java.lang.Object lock>;

        r3 = r2;

        entermonitor r3;

     label1:
        $r4 = r0.<androidx.compose.ui.platform.AndroidUiDispatcher: java.util.List toRunOnFrame>;

        z2 = interfaceinvoke $r4.<java.util.List: boolean remove(java.lang.Object)>(r1);

     label2:
        exitmonitor r3;

        goto label5;

     label3:
        $r5 := @caughtexception;

        r6 = $r5;

     label4:
        exitmonitor r3;

        throw r6;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public final androidx.compose.runtime.MonotonicFrameClock getFrameClock()
    {
        androidx.compose.ui.platform.AndroidUiDispatcher r0;
        androidx.compose.runtime.MonotonicFrameClock $r1;

        r0 := @this: androidx.compose.ui.platform.AndroidUiDispatcher;

        $r1 = r0.<androidx.compose.ui.platform.AndroidUiDispatcher: androidx.compose.runtime.MonotonicFrameClock frameClock>;

        return $r1;
    }

    public void dispatch(kotlin.coroutines.CoroutineContext, java.lang.Runnable)
    {
        androidx.compose.ui.platform.AndroidUiDispatcher r0;
        kotlin.coroutines.CoroutineContext r1;
        java.lang.Runnable r2, $r7;
        java.lang.Object r3, r4;
        kotlin.collections.ArrayDeque $r5;
        boolean $z2, $z4;
        androidx.compose.ui.platform.AndroidUiDispatcher$dispatchCallback$1 $r6, $r9;
        android.os.Handler $r8;
        android.view.Choreographer$FrameCallback $r10;
        android.view.Choreographer $r11;
        java.lang.Throwable $r12, r14;
        kotlin.Unit r13;

        r0 := @this: androidx.compose.ui.platform.AndroidUiDispatcher;

        r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        r2 := @parameter1: java.lang.Runnable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "context");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "block");

        r3 = r0.<androidx.compose.ui.platform.AndroidUiDispatcher: java.lang.Object lock>;

        r4 = r3;

        entermonitor r4;

     label1:
        $r5 = r0.<androidx.compose.ui.platform.AndroidUiDispatcher: kotlin.collections.ArrayDeque toRunTrampolined>;

        virtualinvoke $r5.<kotlin.collections.ArrayDeque: void addLast(java.lang.Object)>(r2);

        $z2 = r0.<androidx.compose.ui.platform.AndroidUiDispatcher: boolean scheduledTrampolineDispatch>;

        if $z2 != 0 goto label2;

        r0.<androidx.compose.ui.platform.AndroidUiDispatcher: boolean scheduledTrampolineDispatch> = 1;

        $r8 = r0.<androidx.compose.ui.platform.AndroidUiDispatcher: android.os.Handler handler>;

        $r6 = r0.<androidx.compose.ui.platform.AndroidUiDispatcher: androidx.compose.ui.platform.AndroidUiDispatcher$dispatchCallback$1 dispatchCallback>;

        $r7 = (java.lang.Runnable) $r6;

        virtualinvoke $r8.<android.os.Handler: boolean post(java.lang.Runnable)>($r7);

        $z4 = r0.<androidx.compose.ui.platform.AndroidUiDispatcher: boolean scheduledFrameDispatch>;

        if $z4 != 0 goto label2;

        r0.<androidx.compose.ui.platform.AndroidUiDispatcher: boolean scheduledFrameDispatch> = 1;

        $r11 = r0.<androidx.compose.ui.platform.AndroidUiDispatcher: android.view.Choreographer choreographer>;

        $r9 = r0.<androidx.compose.ui.platform.AndroidUiDispatcher: androidx.compose.ui.platform.AndroidUiDispatcher$dispatchCallback$1 dispatchCallback>;

        $r10 = (android.view.Choreographer$FrameCallback) $r9;

        virtualinvoke $r11.<android.view.Choreographer: void postFrameCallback(android.view.Choreographer$FrameCallback)>($r10);

     label2:
        r13 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label3:
        exitmonitor r4;

        goto label6;

     label4:
        $r12 := @caughtexception;

        r14 = $r12;

     label5:
        exitmonitor r4;

        throw r14;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public static final kotlin.Lazy access$getMain$delegate$cp()
    {
        kotlin.Lazy $r0;

        $r0 = <androidx.compose.ui.platform.AndroidUiDispatcher: kotlin.Lazy Main$delegate>;

        return $r0;
    }

    public static final java.lang.ThreadLocal access$getCurrentThread$cp()
    {
        java.lang.ThreadLocal $r0;

        $r0 = <androidx.compose.ui.platform.AndroidUiDispatcher: java.lang.ThreadLocal currentThread>;

        return $r0;
    }

    public static final void access$performTrampolineDispatch(androidx.compose.ui.platform.AndroidUiDispatcher)
    {
        androidx.compose.ui.platform.AndroidUiDispatcher $r0;

        $r0 := @parameter0: androidx.compose.ui.platform.AndroidUiDispatcher;

        specialinvoke $r0.<androidx.compose.ui.platform.AndroidUiDispatcher: void performTrampolineDispatch()>();

        return;
    }

    public static final java.lang.Object access$getLock$p(androidx.compose.ui.platform.AndroidUiDispatcher)
    {
        androidx.compose.ui.platform.AndroidUiDispatcher $r0;
        java.lang.Object $r1;

        $r0 := @parameter0: androidx.compose.ui.platform.AndroidUiDispatcher;

        $r1 = $r0.<androidx.compose.ui.platform.AndroidUiDispatcher: java.lang.Object lock>;

        return $r1;
    }

    public static final android.os.Handler access$getHandler$p(androidx.compose.ui.platform.AndroidUiDispatcher)
    {
        androidx.compose.ui.platform.AndroidUiDispatcher $r0;
        android.os.Handler $r1;

        $r0 := @parameter0: androidx.compose.ui.platform.AndroidUiDispatcher;

        $r1 = $r0.<androidx.compose.ui.platform.AndroidUiDispatcher: android.os.Handler handler>;

        return $r1;
    }

    public static final void access$performFrameDispatch(androidx.compose.ui.platform.AndroidUiDispatcher, long)
    {
        androidx.compose.ui.platform.AndroidUiDispatcher $r0;
        long l0;

        $r0 := @parameter0: androidx.compose.ui.platform.AndroidUiDispatcher;

        l0 := @parameter1: long;

        specialinvoke $r0.<androidx.compose.ui.platform.AndroidUiDispatcher: void performFrameDispatch(long)>(l0);

        return;
    }

    public static final java.util.List access$getToRunOnFrame$p(androidx.compose.ui.platform.AndroidUiDispatcher)
    {
        androidx.compose.ui.platform.AndroidUiDispatcher $r0;
        java.util.List $r1;

        $r0 := @parameter0: androidx.compose.ui.platform.AndroidUiDispatcher;

        $r1 = $r0.<androidx.compose.ui.platform.AndroidUiDispatcher: java.util.List toRunOnFrame>;

        return $r1;
    }

    public static final void access$setScheduledFrameDispatch$p(androidx.compose.ui.platform.AndroidUiDispatcher, boolean)
    {
        androidx.compose.ui.platform.AndroidUiDispatcher $r0;
        boolean z0;

        $r0 := @parameter0: androidx.compose.ui.platform.AndroidUiDispatcher;

        z0 := @parameter1: boolean;

        $r0.<androidx.compose.ui.platform.AndroidUiDispatcher: boolean scheduledFrameDispatch> = z0;

        return;
    }

    public void <init>(android.view.Choreographer, android.os.Handler, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.compose.ui.platform.AndroidUiDispatcher r0;
        android.view.Choreographer r1;
        android.os.Handler r2;
        kotlin.jvm.internal.DefaultConstructorMarker $r3;

        r0 := @this: androidx.compose.ui.platform.AndroidUiDispatcher;

        r1 := @parameter0: android.view.Choreographer;

        r2 := @parameter1: android.os.Handler;

        $r3 := @parameter2: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.compose.ui.platform.AndroidUiDispatcher: void <init>(android.view.Choreographer,android.os.Handler)>(r1, r2);

        return;
    }

    static void <clinit>()
    {
        androidx.compose.ui.platform.AndroidUiDispatcher$Companion $r0;
        androidx.compose.ui.platform.AndroidUiDispatcher$Companion$Main$2 $r1;
        kotlin.jvm.functions.Function0 $r2;
        kotlin.Lazy $r3;
        androidx.compose.ui.platform.AndroidUiDispatcher$Companion$currentThread$1 $r4;
        java.lang.ThreadLocal $r5;

        $r0 = new androidx.compose.ui.platform.AndroidUiDispatcher$Companion;

        specialinvoke $r0.<androidx.compose.ui.platform.AndroidUiDispatcher$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.compose.ui.platform.AndroidUiDispatcher: androidx.compose.ui.platform.AndroidUiDispatcher$Companion Companion> = $r0;

        <androidx.compose.ui.platform.AndroidUiDispatcher: int $stable> = 8;

        $r1 = <androidx.compose.ui.platform.AndroidUiDispatcher$Companion$Main$2: androidx.compose.ui.platform.AndroidUiDispatcher$Companion$Main$2 INSTANCE>;

        $r2 = (kotlin.jvm.functions.Function0) $r1;

        $r3 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)>($r2);

        <androidx.compose.ui.platform.AndroidUiDispatcher: kotlin.Lazy Main$delegate> = $r3;

        $r4 = new androidx.compose.ui.platform.AndroidUiDispatcher$Companion$currentThread$1;

        specialinvoke $r4.<androidx.compose.ui.platform.AndroidUiDispatcher$Companion$currentThread$1: void <init>()>();

        $r5 = (java.lang.ThreadLocal) $r4;

        <androidx.compose.ui.platform.AndroidUiDispatcher: java.lang.ThreadLocal currentThread> = $r5;

        return;
    }

androidx.compose.ui.platform.AndroidUiDispatcher$Companion$currentThread$1
    void <init>()
    {
        androidx.compose.ui.platform.AndroidUiDispatcher$Companion$currentThread$1 r0;

        r0 := @this: androidx.compose.ui.platform.AndroidUiDispatcher$Companion$currentThread$1;

        specialinvoke r0.<java.lang.ThreadLocal: void <init>()>();

        return;
    }

    protected kotlin.coroutines.CoroutineContext initialValue()
    {
        androidx.compose.ui.platform.AndroidUiDispatcher$Companion$currentThread$1 r0;
        androidx.compose.ui.platform.AndroidUiDispatcher r1, $r2;
        android.view.Choreographer $r3;
        android.os.Looper $r4;
        android.os.Handler $r5;
        androidx.compose.runtime.MonotonicFrameClock $r6;
        kotlin.coroutines.CoroutineContext $r7, $r8;
        java.lang.IllegalStateException $r9;
        java.lang.String $r10, $r11;

        r0 := @this: androidx.compose.ui.platform.AndroidUiDispatcher$Companion$currentThread$1;

        $r2 = new androidx.compose.ui.platform.AndroidUiDispatcher;

        $r3 = staticinvoke <android.view.Choreographer: android.view.Choreographer getInstance()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "getInstance()");

        $r4 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if $r4 != null goto label1;

        $r9 = new java.lang.IllegalStateException;

        $r10 = "no Looper on this thread";

        $r11 = virtualinvoke $r10.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        throw $r9;

     label1:
        $r5 = staticinvoke <androidx.core.os.HandlerCompat: android.os.Handler createAsync(android.os.Looper)>($r4);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "createAsync(\n           \u2026d\")\n                    )");

        specialinvoke $r2.<androidx.compose.ui.platform.AndroidUiDispatcher: void <init>(android.view.Choreographer,android.os.Handler,kotlin.jvm.internal.DefaultConstructorMarker)>($r3, $r5, null);

        r1 = $r2;

        $r6 = virtualinvoke r1.<androidx.compose.ui.platform.AndroidUiDispatcher: androidx.compose.runtime.MonotonicFrameClock getFrameClock()>();

        $r7 = (kotlin.coroutines.CoroutineContext) $r6;

        $r8 = virtualinvoke r1.<androidx.compose.ui.platform.AndroidUiDispatcher: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>($r7);

        return $r8;
    }

    public volatile java.lang.Object initialValue()
    {
        androidx.compose.ui.platform.AndroidUiDispatcher$Companion$currentThread$1 r0;
        kotlin.coroutines.CoroutineContext $r1;

        r0 := @this: androidx.compose.ui.platform.AndroidUiDispatcher$Companion$currentThread$1;

        $r1 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidUiDispatcher$Companion$currentThread$1: kotlin.coroutines.CoroutineContext initialValue()>();

        return $r1;
    }

androidx.compose.ui.platform.AndroidUiDispatcher$Companion$Main$2$dispatcher$1
<androidx.compose.ui.platform.AndroidUiDispatcher$Companion$Main$2$dispatcher$1: int label>
    void <init>(kotlin.coroutines.Continuation)
    {
        androidx.compose.ui.platform.AndroidUiDispatcher$Companion$Main$2$dispatcher$1 r0;
        kotlin.coroutines.Continuation $r1;

        r0 := @this: androidx.compose.ui.platform.AndroidUiDispatcher$Companion$Main$2$dispatcher$1;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r1);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.compose.ui.platform.AndroidUiDispatcher$Companion$Main$2$dispatcher$1 r0;
        java.lang.Object $r1;
        int $i0;
        android.view.Choreographer $r3;
        java.lang.IllegalStateException $r4;

        r0 := @this: androidx.compose.ui.platform.AndroidUiDispatcher$Companion$Main$2$dispatcher$1;

        $r1 := @parameter0: java.lang.Object;

        staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.compose.ui.platform.AndroidUiDispatcher$Companion$Main$2$dispatcher$1: int label>;

        tableswitch($i0)
        {
            case 0: goto label1;
            default: goto label2;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r3 = staticinvoke <android.view.Choreographer: android.view.Choreographer getInstance()>();

        return $r3;

     label2:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r4;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.compose.ui.platform.AndroidUiDispatcher$Companion$Main$2$dispatcher$1 r0, $r3;
        java.lang.Object r1;
        kotlin.coroutines.Continuation $r2, $r4;

        r0 := @this: androidx.compose.ui.platform.AndroidUiDispatcher$Companion$Main$2$dispatcher$1;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = new androidx.compose.ui.platform.AndroidUiDispatcher$Companion$Main$2$dispatcher$1;

        specialinvoke $r3.<androidx.compose.ui.platform.AndroidUiDispatcher$Companion$Main$2$dispatcher$1: void <init>(kotlin.coroutines.Continuation)>($r2);

        $r4 = (kotlin.coroutines.Continuation) $r3;

        return $r4;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.Continuation)
    {
        androidx.compose.ui.platform.AndroidUiDispatcher$Companion$Main$2$dispatcher$1 r0, $r5;
        kotlinx.coroutines.CoroutineScope r1;
        kotlin.coroutines.Continuation r2, $r3;
        kotlin.Unit $r4;
        java.lang.Object $r6;

        r0 := @this: androidx.compose.ui.platform.AndroidUiDispatcher$Companion$Main$2$dispatcher$1;

        r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidUiDispatcher$Companion$Main$2$dispatcher$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, r2);

        $r5 = (androidx.compose.ui.platform.AndroidUiDispatcher$Companion$Main$2$dispatcher$1) $r3;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.compose.ui.platform.AndroidUiDispatcher$Companion$Main$2$dispatcher$1: java.lang.Object invokeSuspend(java.lang.Object)>($r4);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.compose.ui.platform.AndroidUiDispatcher$Companion$Main$2$dispatcher$1 r0;
        java.lang.Object r1, r2, $r5;
        kotlin.coroutines.Continuation $r3;
        kotlinx.coroutines.CoroutineScope $r4;

        r0 := @this: androidx.compose.ui.platform.AndroidUiDispatcher$Companion$Main$2$dispatcher$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (kotlinx.coroutines.CoroutineScope) r1;

        $r3 = (kotlin.coroutines.Continuation) r2;

        $r5 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidUiDispatcher$Companion$Main$2$dispatcher$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)>($r4, $r3);

        return $r5;
    }

androidx.compose.ui.platform.AndroidUiDispatcher$Companion$Main$2
<androidx.compose.ui.platform.AndroidUiDispatcher$Companion$Main$2: androidx.compose.ui.platform.AndroidUiDispatcher$Companion$Main$2 INSTANCE>
    void <init>()
    {
        androidx.compose.ui.platform.AndroidUiDispatcher$Companion$Main$2 r0;

        r0 := @this: androidx.compose.ui.platform.AndroidUiDispatcher$Companion$Main$2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final kotlin.coroutines.CoroutineContext invoke()
    {
        androidx.compose.ui.platform.AndroidUiDispatcher$Companion$Main$2 r0;
        androidx.compose.ui.platform.AndroidUiDispatcher r1, $r2;
        boolean $z0;
        kotlinx.coroutines.MainCoroutineDispatcher $r3;
        androidx.compose.ui.platform.AndroidUiDispatcher$Companion$Main$2$dispatcher$1 $r4;
        kotlin.coroutines.CoroutineContext $r5, $r11, $r12;
        kotlin.jvm.functions.Function2 $r6;
        java.lang.Object $r7;
        android.os.Looper $r8;
        android.os.Handler $r9;
        androidx.compose.runtime.MonotonicFrameClock $r10;
        android.view.Choreographer $r13;

        r0 := @this: androidx.compose.ui.platform.AndroidUiDispatcher$Companion$Main$2;

        $r2 = new androidx.compose.ui.platform.AndroidUiDispatcher;

        $z0 = staticinvoke <androidx.compose.ui.platform.AndroidUiDispatcher_androidKt: boolean access$isMainThread()>();

        if $z0 == 0 goto label1;

        $r13 = staticinvoke <android.view.Choreographer: android.view.Choreographer getInstance()>();

        goto label2;

     label1:
        $r3 = staticinvoke <kotlinx.coroutines.Dispatchers: kotlinx.coroutines.MainCoroutineDispatcher getMain()>();

        $r5 = (kotlin.coroutines.CoroutineContext) $r3;

        $r4 = new androidx.compose.ui.platform.AndroidUiDispatcher$Companion$Main$2$dispatcher$1;

        specialinvoke $r4.<androidx.compose.ui.platform.AndroidUiDispatcher$Companion$Main$2$dispatcher$1: void <init>(kotlin.coroutines.Continuation)>(null);

        $r6 = (kotlin.jvm.functions.Function2) $r4;

        $r7 = staticinvoke <kotlinx.coroutines.BuildersKt: java.lang.Object runBlocking(kotlin.coroutines.CoroutineContext,kotlin.jvm.functions.Function2)>($r5, $r6);

        $r13 = (android.view.Choreographer) $r7;

     label2:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r13, "if (isMainThread()) Chor\u2026eographer.getInstance() }");

        $r8 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        $r9 = staticinvoke <androidx.core.os.HandlerCompat: android.os.Handler createAsync(android.os.Looper)>($r8);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r9, "createAsync(Looper.getMainLooper())");

        specialinvoke $r2.<androidx.compose.ui.platform.AndroidUiDispatcher: void <init>(android.view.Choreographer,android.os.Handler,kotlin.jvm.internal.DefaultConstructorMarker)>($r13, $r9, null);

        r1 = $r2;

        $r10 = virtualinvoke r1.<androidx.compose.ui.platform.AndroidUiDispatcher: androidx.compose.runtime.MonotonicFrameClock getFrameClock()>();

        $r11 = (kotlin.coroutines.CoroutineContext) $r10;

        $r12 = virtualinvoke r1.<androidx.compose.ui.platform.AndroidUiDispatcher: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>($r11);

        return $r12;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.ui.platform.AndroidUiDispatcher$Companion$Main$2 r0;
        kotlin.coroutines.CoroutineContext $r1;

        r0 := @this: androidx.compose.ui.platform.AndroidUiDispatcher$Companion$Main$2;

        $r1 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidUiDispatcher$Companion$Main$2: kotlin.coroutines.CoroutineContext invoke()>();

        return $r1;
    }

    static void <clinit>()
    {
        androidx.compose.ui.platform.AndroidUiDispatcher$Companion$Main$2 $r0;

        $r0 = new androidx.compose.ui.platform.AndroidUiDispatcher$Companion$Main$2;

        specialinvoke $r0.<androidx.compose.ui.platform.AndroidUiDispatcher$Companion$Main$2: void <init>()>();

        <androidx.compose.ui.platform.AndroidUiDispatcher$Companion$Main$2: androidx.compose.ui.platform.AndroidUiDispatcher$Companion$Main$2 INSTANCE> = $r0;

        return;
    }

androidx.compose.ui.platform.AndroidUiDispatcher$Companion
    private void <init>()
    {
        androidx.compose.ui.platform.AndroidUiDispatcher$Companion r0;

        r0 := @this: androidx.compose.ui.platform.AndroidUiDispatcher$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final kotlin.coroutines.CoroutineContext getMain()
    {
        androidx.compose.ui.platform.AndroidUiDispatcher$Companion r0;
        kotlin.Lazy r1;
        java.lang.Object $r2;
        kotlin.coroutines.CoroutineContext $r3;

        r0 := @this: androidx.compose.ui.platform.AndroidUiDispatcher$Companion;

        r1 = staticinvoke <androidx.compose.ui.platform.AndroidUiDispatcher: kotlin.Lazy access$getMain$delegate$cp()>();

        $r2 = interfaceinvoke r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r3 = (kotlin.coroutines.CoroutineContext) $r2;

        return $r3;
    }

    public final kotlin.coroutines.CoroutineContext getCurrentThread()
    {
        androidx.compose.ui.platform.AndroidUiDispatcher$Companion r0;
        boolean $z0;
        java.lang.ThreadLocal $r1;
        java.lang.Object $r2;
        java.lang.IllegalStateException $r3;
        java.lang.String $r4, $r5;
        kotlin.coroutines.CoroutineContext $r6;

        r0 := @this: androidx.compose.ui.platform.AndroidUiDispatcher$Companion;

        $z0 = staticinvoke <androidx.compose.ui.platform.AndroidUiDispatcher_androidKt: boolean access$isMainThread()>();

        if $z0 == 0 goto label1;

        $r6 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidUiDispatcher$Companion: kotlin.coroutines.CoroutineContext getMain()>();

        goto label2;

     label1:
        $r1 = staticinvoke <androidx.compose.ui.platform.AndroidUiDispatcher: java.lang.ThreadLocal access$getCurrentThread$cp()>();

        $r2 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r6 = (kotlin.coroutines.CoroutineContext) $r2;

        if $r6 != null goto label2;

        $r3 = new java.lang.IllegalStateException;

        $r4 = "no AndroidUiDispatcher for this thread";

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label2:
        return $r6;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.compose.ui.platform.AndroidUiDispatcher$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.compose.ui.platform.AndroidUiDispatcher$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.compose.ui.platform.AndroidUiDispatcher$Companion: void <init>()>();

        return;
    }

androidx.compose.ui.platform.AndroidUiDispatcher$dispatchCallback$1
<androidx.compose.ui.platform.AndroidUiDispatcher$dispatchCallback$1: androidx.compose.ui.platform.AndroidUiDispatcher this$0>
    void <init>(androidx.compose.ui.platform.AndroidUiDispatcher)
    {
        androidx.compose.ui.platform.AndroidUiDispatcher$dispatchCallback$1 r0;
        androidx.compose.ui.platform.AndroidUiDispatcher $r1;

        r0 := @this: androidx.compose.ui.platform.AndroidUiDispatcher$dispatchCallback$1;

        $r1 := @parameter0: androidx.compose.ui.platform.AndroidUiDispatcher;

        r0.<androidx.compose.ui.platform.AndroidUiDispatcher$dispatchCallback$1: androidx.compose.ui.platform.AndroidUiDispatcher this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        androidx.compose.ui.platform.AndroidUiDispatcher$dispatchCallback$1 r0;
        java.lang.Object r1, r3;
        androidx.compose.ui.platform.AndroidUiDispatcher r2, $r4, $r5;
        java.util.List $r6;
        boolean $z2;
        android.view.Choreographer $r7;
        android.view.Choreographer$FrameCallback $r8;
        java.lang.Throwable $r9, r11;
        kotlin.Unit r10;

        r0 := @this: androidx.compose.ui.platform.AndroidUiDispatcher$dispatchCallback$1;

        $r4 = r0.<androidx.compose.ui.platform.AndroidUiDispatcher$dispatchCallback$1: androidx.compose.ui.platform.AndroidUiDispatcher this$0>;

        staticinvoke <androidx.compose.ui.platform.AndroidUiDispatcher: void access$performTrampolineDispatch(androidx.compose.ui.platform.AndroidUiDispatcher)>($r4);

        $r5 = r0.<androidx.compose.ui.platform.AndroidUiDispatcher$dispatchCallback$1: androidx.compose.ui.platform.AndroidUiDispatcher this$0>;

        r1 = staticinvoke <androidx.compose.ui.platform.AndroidUiDispatcher: java.lang.Object access$getLock$p(androidx.compose.ui.platform.AndroidUiDispatcher)>($r5);

        r2 = r0.<androidx.compose.ui.platform.AndroidUiDispatcher$dispatchCallback$1: androidx.compose.ui.platform.AndroidUiDispatcher this$0>;

        r3 = r1;

        entermonitor r3;

     label1:
        $r6 = staticinvoke <androidx.compose.ui.platform.AndroidUiDispatcher: java.util.List access$getToRunOnFrame$p(androidx.compose.ui.platform.AndroidUiDispatcher)>(r2);

        $z2 = interfaceinvoke $r6.<java.util.List: boolean isEmpty()>();

        if $z2 == 0 goto label2;

        $r7 = virtualinvoke r2.<androidx.compose.ui.platform.AndroidUiDispatcher: android.view.Choreographer getChoreographer()>();

        $r8 = (android.view.Choreographer$FrameCallback) r0;

        virtualinvoke $r7.<android.view.Choreographer: void removeFrameCallback(android.view.Choreographer$FrameCallback)>($r8);

        staticinvoke <androidx.compose.ui.platform.AndroidUiDispatcher: void access$setScheduledFrameDispatch$p(androidx.compose.ui.platform.AndroidUiDispatcher,boolean)>(r2, 0);

     label2:
        r10 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label3:
        exitmonitor r3;

        goto label6;

     label4:
        $r9 := @caughtexception;

        r11 = $r9;

     label5:
        exitmonitor r3;

        throw r11;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void doFrame(long)
    {
        androidx.compose.ui.platform.AndroidUiDispatcher$dispatchCallback$1 r0;
        long l0;
        androidx.compose.ui.platform.AndroidUiDispatcher $r1, $r4, $r5;
        android.os.Handler $r2;
        java.lang.Runnable $r3;

        r0 := @this: androidx.compose.ui.platform.AndroidUiDispatcher$dispatchCallback$1;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.compose.ui.platform.AndroidUiDispatcher$dispatchCallback$1: androidx.compose.ui.platform.AndroidUiDispatcher this$0>;

        $r2 = staticinvoke <androidx.compose.ui.platform.AndroidUiDispatcher: android.os.Handler access$getHandler$p(androidx.compose.ui.platform.AndroidUiDispatcher)>($r1);

        $r3 = (java.lang.Runnable) r0;

        virtualinvoke $r2.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r3);

        $r4 = r0.<androidx.compose.ui.platform.AndroidUiDispatcher$dispatchCallback$1: androidx.compose.ui.platform.AndroidUiDispatcher this$0>;

        staticinvoke <androidx.compose.ui.platform.AndroidUiDispatcher: void access$performTrampolineDispatch(androidx.compose.ui.platform.AndroidUiDispatcher)>($r4);

        $r5 = r0.<androidx.compose.ui.platform.AndroidUiDispatcher$dispatchCallback$1: androidx.compose.ui.platform.AndroidUiDispatcher this$0>;

        staticinvoke <androidx.compose.ui.platform.AndroidUiDispatcher: void access$performFrameDispatch(androidx.compose.ui.platform.AndroidUiDispatcher,long)>($r5, l0);

        return;
    }

