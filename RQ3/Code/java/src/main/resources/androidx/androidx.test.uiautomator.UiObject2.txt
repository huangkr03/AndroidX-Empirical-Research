androidx.test.uiautomator.UiObject2
<androidx.test.uiautomator.UiObject2: java.lang.String TAG>
<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.UiDevice mDevice>
<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.Gestures mGestures>
<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.GestureController mGestureController>
<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.BySelector mSelector>
<androidx.test.uiautomator.UiObject2: android.view.accessibility.AccessibilityNodeInfo mCachedNode>
<androidx.test.uiautomator.UiObject2: android.util.DisplayMetrics mDisplayMetrics>
<androidx.test.uiautomator.UiObject2: int mMarginLeft>
<androidx.test.uiautomator.UiObject2: int mMarginTop>
<androidx.test.uiautomator.UiObject2: int mMarginRight>
<androidx.test.uiautomator.UiObject2: int mMarginBottom>
<androidx.test.uiautomator.UiObject2: int DEFAULT_SWIPE_SPEED>
<androidx.test.uiautomator.UiObject2: int DEFAULT_SCROLL_SPEED>
<androidx.test.uiautomator.UiObject2: int DEFAULT_FLING_SPEED>
<androidx.test.uiautomator.UiObject2: int DEFAULT_DRAG_SPEED>
<androidx.test.uiautomator.UiObject2: int DEFAULT_PINCH_SPEED>
<androidx.test.uiautomator.UiObject2: long SCROLL_TIMEOUT>
<androidx.test.uiautomator.UiObject2: long FLING_TIMEOUT>
<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.WaitMixin mWaitMixin>
    void <init>(androidx.test.uiautomator.UiDevice, androidx.test.uiautomator.BySelector, android.view.accessibility.AccessibilityNodeInfo)
    {
        androidx.test.uiautomator.UiObject2 r0;
        androidx.test.uiautomator.UiDevice r1, $r7;
        androidx.test.uiautomator.BySelector r2;
        android.view.accessibility.AccessibilityNodeInfo r3;
        androidx.test.uiautomator.WaitMixin $r4;
        androidx.test.uiautomator.Gestures $r5;
        androidx.test.uiautomator.GestureController $r6;
        android.app.Instrumentation $r8;
        android.content.Context $r9;
        android.content.res.Resources $r10;
        android.util.DisplayMetrics $r11;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        r1 := @parameter0: androidx.test.uiautomator.UiDevice;

        r2 := @parameter1: androidx.test.uiautomator.BySelector;

        r3 := @parameter2: android.view.accessibility.AccessibilityNodeInfo;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.test.uiautomator.UiObject2: int mMarginLeft> = 5;

        r0.<androidx.test.uiautomator.UiObject2: int mMarginTop> = 5;

        r0.<androidx.test.uiautomator.UiObject2: int mMarginRight> = 5;

        r0.<androidx.test.uiautomator.UiObject2: int mMarginBottom> = 5;

        r0.<androidx.test.uiautomator.UiObject2: long SCROLL_TIMEOUT> = 1000L;

        r0.<androidx.test.uiautomator.UiObject2: long FLING_TIMEOUT> = 5000L;

        $r4 = new androidx.test.uiautomator.WaitMixin;

        specialinvoke $r4.<androidx.test.uiautomator.WaitMixin: void <init>(java.lang.Object)>(r0);

        r0.<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.WaitMixin mWaitMixin> = $r4;

        r0.<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.UiDevice mDevice> = r1;

        r0.<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.BySelector mSelector> = r2;

        r0.<androidx.test.uiautomator.UiObject2: android.view.accessibility.AccessibilityNodeInfo mCachedNode> = r3;

        $r5 = staticinvoke <androidx.test.uiautomator.Gestures: androidx.test.uiautomator.Gestures getInstance(androidx.test.uiautomator.UiDevice)>(r1);

        r0.<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.Gestures mGestures> = $r5;

        $r6 = staticinvoke <androidx.test.uiautomator.GestureController: androidx.test.uiautomator.GestureController getInstance(androidx.test.uiautomator.UiDevice)>(r1);

        r0.<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.GestureController mGestureController> = $r6;

        $r7 = r0.<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.UiDevice mDevice>;

        $r8 = virtualinvoke $r7.<androidx.test.uiautomator.UiDevice: android.app.Instrumentation getInstrumentation()>();

        $r9 = virtualinvoke $r8.<android.app.Instrumentation: android.content.Context getContext()>();

        $r10 = virtualinvoke $r9.<android.content.Context: android.content.res.Resources getResources()>();

        $r11 = virtualinvoke $r10.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        r0.<androidx.test.uiautomator.UiObject2: android.util.DisplayMetrics mDisplayMetrics> = $r11;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        androidx.test.uiautomator.UiObject2 r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3, $r4;
        android.view.accessibility.AccessibilityNodeInfo $r5, $r6;
        boolean $z0;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == $r4 goto label3;

        return 0;

     label3:
        r2 = (androidx.test.uiautomator.UiObject2) r1;

        $r5 = specialinvoke r0.<androidx.test.uiautomator.UiObject2: android.view.accessibility.AccessibilityNodeInfo getAccessibilityNodeInfo()>();

        $r6 = specialinvoke r2.<androidx.test.uiautomator.UiObject2: android.view.accessibility.AccessibilityNodeInfo getAccessibilityNodeInfo()>();

        $z0 = virtualinvoke $r5.<android.view.accessibility.AccessibilityNodeInfo: boolean equals(java.lang.Object)>($r6);

        return $z0;
    }

    public int hashCode()
    {
        androidx.test.uiautomator.UiObject2 r0;
        android.view.accessibility.AccessibilityNodeInfo $r1;
        int $i0;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        $r1 = specialinvoke r0.<androidx.test.uiautomator.UiObject2: android.view.accessibility.AccessibilityNodeInfo getAccessibilityNodeInfo()>();

        $i0 = virtualinvoke $r1.<android.view.accessibility.AccessibilityNodeInfo: int hashCode()>();

        return $i0;
    }

    public void recycle()
    {
        androidx.test.uiautomator.UiObject2 r0;
        android.view.accessibility.AccessibilityNodeInfo $r1;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        $r1 = r0.<androidx.test.uiautomator.UiObject2: android.view.accessibility.AccessibilityNodeInfo mCachedNode>;

        virtualinvoke $r1.<android.view.accessibility.AccessibilityNodeInfo: void recycle()>();

        r0.<androidx.test.uiautomator.UiObject2: android.view.accessibility.AccessibilityNodeInfo mCachedNode> = null;

        return;
    }

    public void setGestureMargin(int)
    {
        androidx.test.uiautomator.UiObject2 r0;
        int i0;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        i0 := @parameter0: int;

        virtualinvoke r0.<androidx.test.uiautomator.UiObject2: void setGestureMargins(int,int,int,int)>(i0, i0, i0, i0);

        return;
    }

    public void setGestureMargins(int, int, int, int)
    {
        androidx.test.uiautomator.UiObject2 r0;
        int i0, i1, i2, i3;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r0.<androidx.test.uiautomator.UiObject2: int mMarginLeft> = i0;

        r0.<androidx.test.uiautomator.UiObject2: int mMarginTop> = i1;

        r0.<androidx.test.uiautomator.UiObject2: int mMarginRight> = i2;

        r0.<androidx.test.uiautomator.UiObject2: int mMarginBottom> = i3;

        return;
    }

    public java.lang.Object wait(androidx.test.uiautomator.UiObject2Condition, long)
    {
        androidx.test.uiautomator.UiObject2 r0;
        androidx.test.uiautomator.UiObject2Condition r1;
        long l0;
        androidx.test.uiautomator.WaitMixin $r2;
        java.lang.Object $r3;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        r1 := @parameter0: androidx.test.uiautomator.UiObject2Condition;

        l0 := @parameter1: long;

        $r2 = r0.<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.WaitMixin mWaitMixin>;

        $r3 = virtualinvoke $r2.<androidx.test.uiautomator.WaitMixin: java.lang.Object wait(androidx.test.uiautomator.Condition,long)>(r1, l0);

        return $r3;
    }

    public java.lang.Object wait(androidx.test.uiautomator.SearchCondition, long)
    {
        androidx.test.uiautomator.UiObject2 r0;
        androidx.test.uiautomator.SearchCondition r1;
        long l0;
        androidx.test.uiautomator.WaitMixin $r2;
        java.lang.Object $r3;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        r1 := @parameter0: androidx.test.uiautomator.SearchCondition;

        l0 := @parameter1: long;

        $r2 = r0.<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.WaitMixin mWaitMixin>;

        $r3 = virtualinvoke $r2.<androidx.test.uiautomator.WaitMixin: java.lang.Object wait(androidx.test.uiautomator.Condition,long)>(r1, l0);

        return $r3;
    }

    public androidx.test.uiautomator.UiObject2 getParent()
    {
        androidx.test.uiautomator.UiObject2 r0, $r5;
        android.view.accessibility.AccessibilityNodeInfo r1, $r2;
        androidx.test.uiautomator.UiDevice $r3;
        androidx.test.uiautomator.BySelector $r4;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        $r2 = specialinvoke r0.<androidx.test.uiautomator.UiObject2: android.view.accessibility.AccessibilityNodeInfo getAccessibilityNodeInfo()>();

        r1 = virtualinvoke $r2.<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getParent()>();

        if r1 == null goto label1;

        $r5 = new androidx.test.uiautomator.UiObject2;

        $r3 = virtualinvoke r0.<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.UiDevice getDevice()>();

        $r4 = r0.<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.BySelector mSelector>;

        specialinvoke $r5.<androidx.test.uiautomator.UiObject2: void <init>(androidx.test.uiautomator.UiDevice,androidx.test.uiautomator.BySelector,android.view.accessibility.AccessibilityNodeInfo)>($r3, $r4, r1);

        goto label2;

     label1:
        $r5 = null;

     label2:
        return $r5;
    }

    public int getChildCount()
    {
        androidx.test.uiautomator.UiObject2 r0;
        android.view.accessibility.AccessibilityNodeInfo $r1;
        int $i0;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        $r1 = specialinvoke r0.<androidx.test.uiautomator.UiObject2: android.view.accessibility.AccessibilityNodeInfo getAccessibilityNodeInfo()>();

        $i0 = virtualinvoke $r1.<android.view.accessibility.AccessibilityNodeInfo: int getChildCount()>();

        return $i0;
    }

    public java.util.List getChildren()
    {
        androidx.test.uiautomator.UiObject2 r0;
        androidx.test.uiautomator.BySelector $r1;
        java.util.List $r2;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        $r1 = staticinvoke <androidx.test.uiautomator.By: androidx.test.uiautomator.BySelector depth(int)>(1);

        $r2 = virtualinvoke r0.<androidx.test.uiautomator.UiObject2: java.util.List findObjects(androidx.test.uiautomator.BySelector)>($r1);

        return $r2;
    }

    public boolean hasObject(androidx.test.uiautomator.BySelector)
    {
        androidx.test.uiautomator.UiObject2 r0;
        androidx.test.uiautomator.BySelector r1;
        android.view.accessibility.AccessibilityNodeInfo r2, $r5;
        androidx.test.uiautomator.UiDevice $r3;
        android.view.accessibility.AccessibilityNodeInfo[] $r4;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        r1 := @parameter0: androidx.test.uiautomator.BySelector;

        $r3 = virtualinvoke r0.<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.UiDevice getDevice()>();

        $r4 = newarray (android.view.accessibility.AccessibilityNodeInfo)[1];

        $r5 = specialinvoke r0.<androidx.test.uiautomator.UiObject2: android.view.accessibility.AccessibilityNodeInfo getAccessibilityNodeInfo()>();

        $r4[0] = $r5;

        r2 = staticinvoke <androidx.test.uiautomator.ByMatcher: android.view.accessibility.AccessibilityNodeInfo findMatch(androidx.test.uiautomator.UiDevice,androidx.test.uiautomator.BySelector,android.view.accessibility.AccessibilityNodeInfo[])>($r3, r1, $r4);

        if r2 == null goto label1;

        virtualinvoke r2.<android.view.accessibility.AccessibilityNodeInfo: void recycle()>();

        return 1;

     label1:
        return 0;
    }

    public androidx.test.uiautomator.UiObject2 findObject(androidx.test.uiautomator.BySelector)
    {
        androidx.test.uiautomator.UiObject2 r0, $r7;
        androidx.test.uiautomator.BySelector r1;
        android.view.accessibility.AccessibilityNodeInfo r2, $r5;
        androidx.test.uiautomator.UiDevice $r3, $r6;
        android.view.accessibility.AccessibilityNodeInfo[] $r4;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        r1 := @parameter0: androidx.test.uiautomator.BySelector;

        $r3 = virtualinvoke r0.<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.UiDevice getDevice()>();

        $r4 = newarray (android.view.accessibility.AccessibilityNodeInfo)[1];

        $r5 = specialinvoke r0.<androidx.test.uiautomator.UiObject2: android.view.accessibility.AccessibilityNodeInfo getAccessibilityNodeInfo()>();

        $r4[0] = $r5;

        r2 = staticinvoke <androidx.test.uiautomator.ByMatcher: android.view.accessibility.AccessibilityNodeInfo findMatch(androidx.test.uiautomator.UiDevice,androidx.test.uiautomator.BySelector,android.view.accessibility.AccessibilityNodeInfo[])>($r3, r1, $r4);

        if r2 == null goto label1;

        $r7 = new androidx.test.uiautomator.UiObject2;

        $r6 = virtualinvoke r0.<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.UiDevice getDevice()>();

        specialinvoke $r7.<androidx.test.uiautomator.UiObject2: void <init>(androidx.test.uiautomator.UiDevice,androidx.test.uiautomator.BySelector,android.view.accessibility.AccessibilityNodeInfo)>($r6, r1, r2);

        goto label2;

     label1:
        $r7 = null;

     label2:
        return $r7;
    }

    public java.util.List findObjects(androidx.test.uiautomator.BySelector)
    {
        androidx.test.uiautomator.UiObject2 r0, $r11;
        androidx.test.uiautomator.BySelector r1;
        java.util.ArrayList r2, $r5;
        java.util.Iterator r3;
        android.view.accessibility.AccessibilityNodeInfo r4, $r8;
        androidx.test.uiautomator.UiDevice $r6, $r12;
        android.view.accessibility.AccessibilityNodeInfo[] $r7;
        java.util.List $r9;
        boolean $z0;
        java.lang.Object $r10;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        r1 := @parameter0: androidx.test.uiautomator.BySelector;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r2 = $r5;

        $r6 = virtualinvoke r0.<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.UiDevice getDevice()>();

        $r7 = newarray (android.view.accessibility.AccessibilityNodeInfo)[1];

        $r8 = specialinvoke r0.<androidx.test.uiautomator.UiObject2: android.view.accessibility.AccessibilityNodeInfo getAccessibilityNodeInfo()>();

        $r7[0] = $r8;

        $r9 = staticinvoke <androidx.test.uiautomator.ByMatcher: java.util.List findMatches(androidx.test.uiautomator.UiDevice,androidx.test.uiautomator.BySelector,android.view.accessibility.AccessibilityNodeInfo[])>($r6, r1, $r7);

        r3 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.view.accessibility.AccessibilityNodeInfo) $r10;

        $r11 = new androidx.test.uiautomator.UiObject2;

        $r12 = virtualinvoke r0.<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.UiDevice getDevice()>();

        specialinvoke $r11.<androidx.test.uiautomator.UiObject2: void <init>(androidx.test.uiautomator.UiDevice,androidx.test.uiautomator.BySelector,android.view.accessibility.AccessibilityNodeInfo)>($r12, r1, r4);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r11);

        goto label1;

     label2:
        return r2;
    }

    public android.graphics.Rect getVisibleBounds()
    {
        androidx.test.uiautomator.UiObject2 r0;
        android.view.accessibility.AccessibilityNodeInfo $r1;
        android.graphics.Rect $r2;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        $r1 = specialinvoke r0.<androidx.test.uiautomator.UiObject2: android.view.accessibility.AccessibilityNodeInfo getAccessibilityNodeInfo()>();

        $r2 = specialinvoke r0.<androidx.test.uiautomator.UiObject2: android.graphics.Rect getVisibleBounds(android.view.accessibility.AccessibilityNodeInfo)>($r1);

        return $r2;
    }

    private android.graphics.Rect getVisibleBoundsForGestures()
    {
        androidx.test.uiautomator.UiObject2 r0;
        android.graphics.Rect r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        r1 = virtualinvoke r0.<androidx.test.uiautomator.UiObject2: android.graphics.Rect getVisibleBounds()>();

        $i1 = r1.<android.graphics.Rect: int left>;

        $i0 = r0.<androidx.test.uiautomator.UiObject2: int mMarginLeft>;

        $i2 = $i1 + $i0;

        r1.<android.graphics.Rect: int left> = $i2;

        $i4 = r1.<android.graphics.Rect: int top>;

        $i3 = r0.<androidx.test.uiautomator.UiObject2: int mMarginTop>;

        $i5 = $i4 + $i3;

        r1.<android.graphics.Rect: int top> = $i5;

        $i7 = r1.<android.graphics.Rect: int right>;

        $i6 = r0.<androidx.test.uiautomator.UiObject2: int mMarginRight>;

        $i8 = $i7 - $i6;

        r1.<android.graphics.Rect: int right> = $i8;

        $i10 = r1.<android.graphics.Rect: int bottom>;

        $i9 = r0.<androidx.test.uiautomator.UiObject2: int mMarginBottom>;

        $i11 = $i10 - $i9;

        r1.<android.graphics.Rect: int bottom> = $i11;

        return r1;
    }

    private android.graphics.Rect getVisibleBounds(android.view.accessibility.AccessibilityNodeInfo)
    {
        androidx.test.uiautomator.UiObject2 r0;
        android.view.accessibility.AccessibilityNodeInfo r1, r13;
        android.graphics.Rect r2, r3, r4, $r5, $r6, $r9, r12;
        androidx.test.uiautomator.UiDevice $r7, $r8;
        int $i0, $i1, $i2;
        boolean $z0;
        android.view.accessibility.AccessibilityWindowInfo $r10, $r11;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        r1 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        $r5 = new android.graphics.Rect;

        specialinvoke $r5.<android.graphics.Rect: void <init>()>();

        r2 = $r5;

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void getBoundsInScreen(android.graphics.Rect)>(r2);

        $r6 = new android.graphics.Rect;

        $r7 = virtualinvoke r0.<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.UiDevice getDevice()>();

        $i0 = virtualinvoke $r7.<androidx.test.uiautomator.UiDevice: int getDisplayWidth()>();

        $r8 = virtualinvoke r0.<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.UiDevice getDevice()>();

        $i1 = virtualinvoke $r8.<androidx.test.uiautomator.UiDevice: int getDisplayHeight()>();

        specialinvoke $r6.<android.graphics.Rect: void <init>(int,int,int,int)>(0, 0, $i0, $i1);

        r3 = $r6;

        virtualinvoke r2.<android.graphics.Rect: boolean intersect(android.graphics.Rect)>(r3);

        $i2 = <androidx.test.uiautomator.UiDevice: int API_LEVEL_ACTUAL>;

        if $i2 < 21 goto label1;

        $r9 = new android.graphics.Rect;

        specialinvoke $r9.<android.graphics.Rect: void <init>()>();

        r12 = $r9;

        $r10 = virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityWindowInfo getWindow()>();

        if $r10 == null goto label1;

        $r11 = virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityWindowInfo getWindow()>();

        virtualinvoke $r11.<android.view.accessibility.AccessibilityWindowInfo: void getBoundsInScreen(android.graphics.Rect)>(r12);

        virtualinvoke r2.<android.graphics.Rect: boolean intersect(android.graphics.Rect)>(r12);

     label1:
        r13 = virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getParent()>();

     label2:
        if r13 == null goto label4;

        $z0 = virtualinvoke r13.<android.view.accessibility.AccessibilityNodeInfo: boolean isScrollable()>();

        if $z0 == 0 goto label3;

        r4 = specialinvoke r0.<androidx.test.uiautomator.UiObject2: android.graphics.Rect getVisibleBounds(android.view.accessibility.AccessibilityNodeInfo)>(r13);

        virtualinvoke r2.<android.graphics.Rect: boolean intersect(android.graphics.Rect)>(r4);

        goto label4;

     label3:
        r13 = virtualinvoke r13.<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getParent()>();

        goto label2;

     label4:
        return r2;
    }

    public android.graphics.Point getVisibleCenter()
    {
        androidx.test.uiautomator.UiObject2 r0;
        android.graphics.Rect r1;
        android.graphics.Point $r2;
        int $i0, $i1;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        r1 = virtualinvoke r0.<androidx.test.uiautomator.UiObject2: android.graphics.Rect getVisibleBounds()>();

        $r2 = new android.graphics.Point;

        $i0 = virtualinvoke r1.<android.graphics.Rect: int centerX()>();

        $i1 = virtualinvoke r1.<android.graphics.Rect: int centerY()>();

        specialinvoke $r2.<android.graphics.Point: void <init>(int,int)>($i0, $i1);

        return $r2;
    }

    public java.lang.String getClassName()
    {
        androidx.test.uiautomator.UiObject2 r0;
        java.lang.CharSequence r1;
        android.view.accessibility.AccessibilityNodeInfo $r2;
        java.lang.String $r3;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        $r2 = specialinvoke r0.<androidx.test.uiautomator.UiObject2: android.view.accessibility.AccessibilityNodeInfo getAccessibilityNodeInfo()>();

        r1 = virtualinvoke $r2.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getClassName()>();

        if r1 == null goto label1;

        $r3 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.String toString()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public java.lang.String getContentDescription()
    {
        androidx.test.uiautomator.UiObject2 r0;
        java.lang.CharSequence r1;
        android.view.accessibility.AccessibilityNodeInfo $r2;
        java.lang.String $r3;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        $r2 = specialinvoke r0.<androidx.test.uiautomator.UiObject2: android.view.accessibility.AccessibilityNodeInfo getAccessibilityNodeInfo()>();

        r1 = virtualinvoke $r2.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getContentDescription()>();

        if r1 == null goto label1;

        $r3 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.String toString()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public java.lang.String getApplicationPackage()
    {
        androidx.test.uiautomator.UiObject2 r0;
        java.lang.CharSequence r1;
        android.view.accessibility.AccessibilityNodeInfo $r2;
        java.lang.String $r3;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        $r2 = specialinvoke r0.<androidx.test.uiautomator.UiObject2: android.view.accessibility.AccessibilityNodeInfo getAccessibilityNodeInfo()>();

        r1 = virtualinvoke $r2.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getPackageName()>();

        if r1 == null goto label1;

        $r3 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.String toString()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public java.lang.String getResourceName()
    {
        androidx.test.uiautomator.UiObject2 r0;
        java.lang.String r1, $r3;
        android.view.accessibility.AccessibilityNodeInfo $r2;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        $r2 = specialinvoke r0.<androidx.test.uiautomator.UiObject2: android.view.accessibility.AccessibilityNodeInfo getAccessibilityNodeInfo()>();

        r1 = virtualinvoke $r2.<android.view.accessibility.AccessibilityNodeInfo: java.lang.String getViewIdResourceName()>();

        if r1 == null goto label1;

        $r3 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.String toString()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public java.lang.String getText()
    {
        androidx.test.uiautomator.UiObject2 r0;
        java.lang.CharSequence r1;
        android.view.accessibility.AccessibilityNodeInfo $r2;
        java.lang.String $r3;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        $r2 = specialinvoke r0.<androidx.test.uiautomator.UiObject2: android.view.accessibility.AccessibilityNodeInfo getAccessibilityNodeInfo()>();

        r1 = virtualinvoke $r2.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getText()>();

        if r1 == null goto label1;

        $r3 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.String toString()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public boolean isCheckable()
    {
        androidx.test.uiautomator.UiObject2 r0;
        android.view.accessibility.AccessibilityNodeInfo $r1;
        boolean $z0;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        $r1 = specialinvoke r0.<androidx.test.uiautomator.UiObject2: android.view.accessibility.AccessibilityNodeInfo getAccessibilityNodeInfo()>();

        $z0 = virtualinvoke $r1.<android.view.accessibility.AccessibilityNodeInfo: boolean isCheckable()>();

        return $z0;
    }

    public boolean isChecked()
    {
        androidx.test.uiautomator.UiObject2 r0;
        android.view.accessibility.AccessibilityNodeInfo $r1;
        boolean $z0;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        $r1 = specialinvoke r0.<androidx.test.uiautomator.UiObject2: android.view.accessibility.AccessibilityNodeInfo getAccessibilityNodeInfo()>();

        $z0 = virtualinvoke $r1.<android.view.accessibility.AccessibilityNodeInfo: boolean isChecked()>();

        return $z0;
    }

    public boolean isClickable()
    {
        androidx.test.uiautomator.UiObject2 r0;
        android.view.accessibility.AccessibilityNodeInfo $r1;
        boolean $z0;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        $r1 = specialinvoke r0.<androidx.test.uiautomator.UiObject2: android.view.accessibility.AccessibilityNodeInfo getAccessibilityNodeInfo()>();

        $z0 = virtualinvoke $r1.<android.view.accessibility.AccessibilityNodeInfo: boolean isClickable()>();

        return $z0;
    }

    public boolean isEnabled()
    {
        androidx.test.uiautomator.UiObject2 r0;
        android.view.accessibility.AccessibilityNodeInfo $r1;
        boolean $z0;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        $r1 = specialinvoke r0.<androidx.test.uiautomator.UiObject2: android.view.accessibility.AccessibilityNodeInfo getAccessibilityNodeInfo()>();

        $z0 = virtualinvoke $r1.<android.view.accessibility.AccessibilityNodeInfo: boolean isEnabled()>();

        return $z0;
    }

    public boolean isFocusable()
    {
        androidx.test.uiautomator.UiObject2 r0;
        android.view.accessibility.AccessibilityNodeInfo $r1;
        boolean $z0;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        $r1 = specialinvoke r0.<androidx.test.uiautomator.UiObject2: android.view.accessibility.AccessibilityNodeInfo getAccessibilityNodeInfo()>();

        $z0 = virtualinvoke $r1.<android.view.accessibility.AccessibilityNodeInfo: boolean isFocusable()>();

        return $z0;
    }

    public boolean isFocused()
    {
        androidx.test.uiautomator.UiObject2 r0;
        android.view.accessibility.AccessibilityNodeInfo $r1;
        boolean $z0;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        $r1 = specialinvoke r0.<androidx.test.uiautomator.UiObject2: android.view.accessibility.AccessibilityNodeInfo getAccessibilityNodeInfo()>();

        $z0 = virtualinvoke $r1.<android.view.accessibility.AccessibilityNodeInfo: boolean isFocused()>();

        return $z0;
    }

    public boolean isLongClickable()
    {
        androidx.test.uiautomator.UiObject2 r0;
        android.view.accessibility.AccessibilityNodeInfo $r1;
        boolean $z0;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        $r1 = specialinvoke r0.<androidx.test.uiautomator.UiObject2: android.view.accessibility.AccessibilityNodeInfo getAccessibilityNodeInfo()>();

        $z0 = virtualinvoke $r1.<android.view.accessibility.AccessibilityNodeInfo: boolean isLongClickable()>();

        return $z0;
    }

    public boolean isScrollable()
    {
        androidx.test.uiautomator.UiObject2 r0;
        android.view.accessibility.AccessibilityNodeInfo $r1;
        boolean $z0;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        $r1 = specialinvoke r0.<androidx.test.uiautomator.UiObject2: android.view.accessibility.AccessibilityNodeInfo getAccessibilityNodeInfo()>();

        $z0 = virtualinvoke $r1.<android.view.accessibility.AccessibilityNodeInfo: boolean isScrollable()>();

        return $z0;
    }

    public boolean isSelected()
    {
        androidx.test.uiautomator.UiObject2 r0;
        android.view.accessibility.AccessibilityNodeInfo $r1;
        boolean $z0;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        $r1 = specialinvoke r0.<androidx.test.uiautomator.UiObject2: android.view.accessibility.AccessibilityNodeInfo getAccessibilityNodeInfo()>();

        $z0 = virtualinvoke $r1.<android.view.accessibility.AccessibilityNodeInfo: boolean isSelected()>();

        return $z0;
    }

    public void clear()
    {
        androidx.test.uiautomator.UiObject2 r0;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        virtualinvoke r0.<androidx.test.uiautomator.UiObject2: void setText(java.lang.String)>("");

        return;
    }

    public void click()
    {
        androidx.test.uiautomator.UiObject2 r0;
        androidx.test.uiautomator.PointerGesture[] $r1;
        androidx.test.uiautomator.GestureController $r2;
        androidx.test.uiautomator.Gestures $r3;
        android.graphics.Point $r4;
        androidx.test.uiautomator.PointerGesture $r5;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        $r2 = r0.<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.GestureController mGestureController>;

        $r1 = newarray (androidx.test.uiautomator.PointerGesture)[1];

        $r3 = r0.<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.Gestures mGestures>;

        $r4 = virtualinvoke r0.<androidx.test.uiautomator.UiObject2: android.graphics.Point getVisibleCenter()>();

        $r5 = virtualinvoke $r3.<androidx.test.uiautomator.Gestures: androidx.test.uiautomator.PointerGesture click(android.graphics.Point)>($r4);

        $r1[0] = $r5;

        virtualinvoke $r2.<androidx.test.uiautomator.GestureController: void performGesture(androidx.test.uiautomator.PointerGesture[])>($r1);

        return;
    }

    public void click(long)
    {
        androidx.test.uiautomator.UiObject2 r0;
        long l0;
        androidx.test.uiautomator.PointerGesture[] $r1;
        androidx.test.uiautomator.GestureController $r2;
        androidx.test.uiautomator.Gestures $r3;
        android.graphics.Point $r4;
        androidx.test.uiautomator.PointerGesture $r5;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        l0 := @parameter0: long;

        $r2 = r0.<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.GestureController mGestureController>;

        $r1 = newarray (androidx.test.uiautomator.PointerGesture)[1];

        $r3 = r0.<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.Gestures mGestures>;

        $r4 = virtualinvoke r0.<androidx.test.uiautomator.UiObject2: android.graphics.Point getVisibleCenter()>();

        $r5 = virtualinvoke $r3.<androidx.test.uiautomator.Gestures: androidx.test.uiautomator.PointerGesture click(android.graphics.Point,long)>($r4, l0);

        $r1[0] = $r5;

        virtualinvoke $r2.<androidx.test.uiautomator.GestureController: void performGesture(androidx.test.uiautomator.PointerGesture[])>($r1);

        return;
    }

    public java.lang.Object clickAndWait(androidx.test.uiautomator.EventCondition, long)
    {
        androidx.test.uiautomator.UiObject2 r0;
        androidx.test.uiautomator.EventCondition r1;
        long l0;
        androidx.test.uiautomator.PointerGesture[] $r2;
        androidx.test.uiautomator.GestureController $r3;
        androidx.test.uiautomator.Gestures $r4;
        android.graphics.Point $r5;
        androidx.test.uiautomator.PointerGesture $r6;
        java.lang.Object $r7;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        r1 := @parameter0: androidx.test.uiautomator.EventCondition;

        l0 := @parameter1: long;

        $r3 = r0.<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.GestureController mGestureController>;

        $r2 = newarray (androidx.test.uiautomator.PointerGesture)[1];

        $r4 = r0.<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.Gestures mGestures>;

        $r5 = virtualinvoke r0.<androidx.test.uiautomator.UiObject2: android.graphics.Point getVisibleCenter()>();

        $r6 = virtualinvoke $r4.<androidx.test.uiautomator.Gestures: androidx.test.uiautomator.PointerGesture click(android.graphics.Point)>($r5);

        $r2[0] = $r6;

        $r7 = virtualinvoke $r3.<androidx.test.uiautomator.GestureController: java.lang.Object performGestureAndWait(androidx.test.uiautomator.EventCondition,long,androidx.test.uiautomator.PointerGesture[])>(r1, l0, $r2);

        return $r7;
    }

    public void drag(android.graphics.Point)
    {
        androidx.test.uiautomator.UiObject2 r0;
        android.graphics.Point r1;
        android.util.DisplayMetrics $r2;
        float $f0, $f1;
        int $i0;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        r1 := @parameter0: android.graphics.Point;

        $r2 = r0.<androidx.test.uiautomator.UiObject2: android.util.DisplayMetrics mDisplayMetrics>;

        $f0 = $r2.<android.util.DisplayMetrics: float density>;

        $f1 = 2500.0F * $f0;

        $i0 = (int) $f1;

        virtualinvoke r0.<androidx.test.uiautomator.UiObject2: void drag(android.graphics.Point,int)>(r1, $i0);

        return;
    }

    public void drag(android.graphics.Point, int)
    {
        androidx.test.uiautomator.UiObject2 r0;
        android.graphics.Point r1, $r5;
        int i0;
        androidx.test.uiautomator.PointerGesture[] $r2;
        androidx.test.uiautomator.GestureController $r3;
        androidx.test.uiautomator.Gestures $r4;
        androidx.test.uiautomator.PointerGesture $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        r1 := @parameter0: android.graphics.Point;

        i0 := @parameter1: int;

        if i0 >= 0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Speed cannot be negative");

        throw $r7;

     label1:
        $r3 = r0.<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.GestureController mGestureController>;

        $r2 = newarray (androidx.test.uiautomator.PointerGesture)[1];

        $r4 = r0.<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.Gestures mGestures>;

        $r5 = virtualinvoke r0.<androidx.test.uiautomator.UiObject2: android.graphics.Point getVisibleCenter()>();

        $r6 = virtualinvoke $r4.<androidx.test.uiautomator.Gestures: androidx.test.uiautomator.PointerGesture drag(android.graphics.Point,android.graphics.Point,int)>($r5, r1, i0);

        $r2[0] = $r6;

        virtualinvoke $r3.<androidx.test.uiautomator.GestureController: void performGesture(androidx.test.uiautomator.PointerGesture[])>($r2);

        return;
    }

    public void longClick()
    {
        androidx.test.uiautomator.UiObject2 r0;
        androidx.test.uiautomator.PointerGesture[] $r1;
        androidx.test.uiautomator.GestureController $r2;
        androidx.test.uiautomator.Gestures $r3;
        android.graphics.Point $r4;
        androidx.test.uiautomator.PointerGesture $r5;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        $r2 = r0.<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.GestureController mGestureController>;

        $r1 = newarray (androidx.test.uiautomator.PointerGesture)[1];

        $r3 = r0.<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.Gestures mGestures>;

        $r4 = virtualinvoke r0.<androidx.test.uiautomator.UiObject2: android.graphics.Point getVisibleCenter()>();

        $r5 = virtualinvoke $r3.<androidx.test.uiautomator.Gestures: androidx.test.uiautomator.PointerGesture longClick(android.graphics.Point)>($r4);

        $r1[0] = $r5;

        virtualinvoke $r2.<androidx.test.uiautomator.GestureController: void performGesture(androidx.test.uiautomator.PointerGesture[])>($r1);

        return;
    }

    public void pinchClose(float)
    {
        androidx.test.uiautomator.UiObject2 r0;
        float f0, $f1, $f2;
        android.util.DisplayMetrics $r1;
        int $i0;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        f0 := @parameter0: float;

        $r1 = r0.<androidx.test.uiautomator.UiObject2: android.util.DisplayMetrics mDisplayMetrics>;

        $f1 = $r1.<android.util.DisplayMetrics: float density>;

        $f2 = 2500.0F * $f1;

        $i0 = (int) $f2;

        virtualinvoke r0.<androidx.test.uiautomator.UiObject2: void pinchClose(float,int)>(f0, $i0);

        return;
    }

    public void pinchClose(float, int)
    {
        androidx.test.uiautomator.UiObject2 r0;
        float f0;
        int i0;
        byte $b1, $b2;
        java.lang.IllegalArgumentException $r1, $r6;
        androidx.test.uiautomator.GestureController $r2;
        androidx.test.uiautomator.Gestures $r3;
        android.graphics.Rect $r4;
        androidx.test.uiautomator.PointerGesture[] $r5;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        f0 := @parameter0: float;

        i0 := @parameter1: int;

        $b1 = f0 cmpg 0.0F;

        if $b1 < 0 goto label1;

        $b2 = f0 cmpl 1.0F;

        if $b2 <= 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Percent must be between 0.0f and 1.0f");

        throw $r1;

     label2:
        if i0 >= 0 goto label3;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Speed cannot be negative");

        throw $r6;

     label3:
        $r2 = r0.<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.GestureController mGestureController>;

        $r3 = r0.<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.Gestures mGestures>;

        $r4 = specialinvoke r0.<androidx.test.uiautomator.UiObject2: android.graphics.Rect getVisibleBoundsForGestures()>();

        $r5 = virtualinvoke $r3.<androidx.test.uiautomator.Gestures: androidx.test.uiautomator.PointerGesture[] pinchClose(android.graphics.Rect,float,int)>($r4, f0, i0);

        virtualinvoke $r2.<androidx.test.uiautomator.GestureController: void performGesture(androidx.test.uiautomator.PointerGesture[])>($r5);

        return;
    }

    public void pinchOpen(float)
    {
        androidx.test.uiautomator.UiObject2 r0;
        float f0, $f1, $f2;
        android.util.DisplayMetrics $r1;
        int $i0;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        f0 := @parameter0: float;

        $r1 = r0.<androidx.test.uiautomator.UiObject2: android.util.DisplayMetrics mDisplayMetrics>;

        $f1 = $r1.<android.util.DisplayMetrics: float density>;

        $f2 = 2500.0F * $f1;

        $i0 = (int) $f2;

        virtualinvoke r0.<androidx.test.uiautomator.UiObject2: void pinchOpen(float,int)>(f0, $i0);

        return;
    }

    public void pinchOpen(float, int)
    {
        androidx.test.uiautomator.UiObject2 r0;
        float f0;
        int i0;
        byte $b1, $b2;
        java.lang.IllegalArgumentException $r1, $r6;
        androidx.test.uiautomator.GestureController $r2;
        androidx.test.uiautomator.Gestures $r3;
        android.graphics.Rect $r4;
        androidx.test.uiautomator.PointerGesture[] $r5;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        f0 := @parameter0: float;

        i0 := @parameter1: int;

        $b1 = f0 cmpg 0.0F;

        if $b1 < 0 goto label1;

        $b2 = f0 cmpl 1.0F;

        if $b2 <= 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Percent must be between 0.0f and 1.0f");

        throw $r1;

     label2:
        if i0 >= 0 goto label3;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Speed cannot be negative");

        throw $r6;

     label3:
        $r2 = r0.<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.GestureController mGestureController>;

        $r3 = r0.<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.Gestures mGestures>;

        $r4 = specialinvoke r0.<androidx.test.uiautomator.UiObject2: android.graphics.Rect getVisibleBoundsForGestures()>();

        $r5 = virtualinvoke $r3.<androidx.test.uiautomator.Gestures: androidx.test.uiautomator.PointerGesture[] pinchOpen(android.graphics.Rect,float,int)>($r4, f0, i0);

        virtualinvoke $r2.<androidx.test.uiautomator.GestureController: void performGesture(androidx.test.uiautomator.PointerGesture[])>($r5);

        return;
    }

    public void swipe(androidx.test.uiautomator.Direction, float)
    {
        androidx.test.uiautomator.UiObject2 r0;
        androidx.test.uiautomator.Direction r1;
        float f0, $f1, $f2;
        android.util.DisplayMetrics $r2;
        int $i0;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        r1 := @parameter0: androidx.test.uiautomator.Direction;

        f0 := @parameter1: float;

        $r2 = r0.<androidx.test.uiautomator.UiObject2: android.util.DisplayMetrics mDisplayMetrics>;

        $f1 = $r2.<android.util.DisplayMetrics: float density>;

        $f2 = 5000.0F * $f1;

        $i0 = (int) $f2;

        virtualinvoke r0.<androidx.test.uiautomator.UiObject2: void swipe(androidx.test.uiautomator.Direction,float,int)>(r1, f0, $i0);

        return;
    }

    public void swipe(androidx.test.uiautomator.Direction, float, int)
    {
        androidx.test.uiautomator.UiObject2 r0;
        androidx.test.uiautomator.Direction r1;
        float f0;
        int i0;
        android.graphics.Rect r2;
        byte $b1, $b2;
        java.lang.IllegalArgumentException $r3, $r8;
        androidx.test.uiautomator.PointerGesture[] $r4;
        androidx.test.uiautomator.Gestures $r5;
        androidx.test.uiautomator.GestureController $r6;
        androidx.test.uiautomator.PointerGesture $r7;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        r1 := @parameter0: androidx.test.uiautomator.Direction;

        f0 := @parameter1: float;

        i0 := @parameter2: int;

        $b1 = f0 cmpg 0.0F;

        if $b1 < 0 goto label1;

        $b2 = f0 cmpl 1.0F;

        if $b2 <= 0 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Percent must be between 0.0f and 1.0f");

        throw $r3;

     label2:
        if i0 >= 0 goto label3;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Speed cannot be negative");

        throw $r8;

     label3:
        r2 = specialinvoke r0.<androidx.test.uiautomator.UiObject2: android.graphics.Rect getVisibleBoundsForGestures()>();

        $r6 = r0.<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.GestureController mGestureController>;

        $r4 = newarray (androidx.test.uiautomator.PointerGesture)[1];

        $r5 = r0.<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.Gestures mGestures>;

        $r7 = virtualinvoke $r5.<androidx.test.uiautomator.Gestures: androidx.test.uiautomator.PointerGesture swipeRect(android.graphics.Rect,androidx.test.uiautomator.Direction,float,int)>(r2, r1, f0, i0);

        $r4[0] = $r7;

        virtualinvoke $r6.<androidx.test.uiautomator.GestureController: void performGesture(androidx.test.uiautomator.PointerGesture[])>($r4);

        return;
    }

    public boolean scroll(androidx.test.uiautomator.Direction, float)
    {
        androidx.test.uiautomator.UiObject2 r0;
        androidx.test.uiautomator.Direction r1;
        float f0, $f1, $f2;
        android.util.DisplayMetrics $r2;
        int $i0;
        boolean $z0;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        r1 := @parameter0: androidx.test.uiautomator.Direction;

        f0 := @parameter1: float;

        $r2 = r0.<androidx.test.uiautomator.UiObject2: android.util.DisplayMetrics mDisplayMetrics>;

        $f1 = $r2.<android.util.DisplayMetrics: float density>;

        $f2 = 5000.0F * $f1;

        $i0 = (int) $f2;

        $z0 = virtualinvoke r0.<androidx.test.uiautomator.UiObject2: boolean scroll(androidx.test.uiautomator.Direction,float,int)>(r1, f0, $i0);

        return $z0;
    }

    public boolean scroll(androidx.test.uiautomator.Direction, float, int)
    {
        androidx.test.uiautomator.UiObject2 r0;
        androidx.test.uiautomator.Direction r1, r2;
        int i0;
        android.graphics.Rect r3;
        float f0, f1, $f2;
        androidx.test.uiautomator.PointerGesture r4, $r6;
        byte $b1, $b2, $b3;
        androidx.test.uiautomator.Gestures $r5;
        androidx.test.uiautomator.GestureController $r7;
        androidx.test.uiautomator.EventCondition $r8;
        androidx.test.uiautomator.PointerGesture[] $r9;
        java.lang.Object $r10;
        java.lang.Boolean $r11;
        boolean $z0;
        java.lang.IllegalArgumentException $r12, $r13;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        r1 := @parameter0: androidx.test.uiautomator.Direction;

        f1 := @parameter1: float;

        i0 := @parameter2: int;

        $b1 = f1 cmpg 0.0F;

        if $b1 >= 0 goto label1;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Percent must be greater than 0.0f");

        throw $r13;

     label1:
        if i0 >= 0 goto label2;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Speed cannot be negative");

        throw $r12;

     label2:
        r2 = staticinvoke <androidx.test.uiautomator.Direction: androidx.test.uiautomator.Direction reverse(androidx.test.uiautomator.Direction)>(r1);

        r3 = specialinvoke r0.<androidx.test.uiautomator.UiObject2: android.graphics.Rect getVisibleBoundsForGestures()>();

     label3:
        $b2 = f1 cmpl 0.0F;

        if $b2 <= 0 goto label7;

        $b3 = f1 cmpl 1.0F;

        if $b3 <= 0 goto label4;

        $f2 = 1.0F;

        goto label5;

     label4:
        $f2 = f1;

     label5:
        f0 = $f2;

        $r5 = r0.<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.Gestures mGestures>;

        $r6 = virtualinvoke $r5.<androidx.test.uiautomator.Gestures: androidx.test.uiautomator.PointerGesture swipeRect(android.graphics.Rect,androidx.test.uiautomator.Direction,float,int)>(r3, r2, f0, i0);

        r4 = virtualinvoke $r6.<androidx.test.uiautomator.PointerGesture: androidx.test.uiautomator.PointerGesture pause(long)>(250L);

        $r7 = r0.<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.GestureController mGestureController>;

        $r8 = staticinvoke <androidx.test.uiautomator.Until: androidx.test.uiautomator.EventCondition scrollFinished(androidx.test.uiautomator.Direction)>(r1);

        $r9 = newarray (androidx.test.uiautomator.PointerGesture)[1];

        $r9[0] = r4;

        $r10 = virtualinvoke $r7.<androidx.test.uiautomator.GestureController: java.lang.Object performGestureAndWait(androidx.test.uiautomator.EventCondition,long,androidx.test.uiautomator.PointerGesture[])>($r8, 1000L, $r9);

        $r11 = (java.lang.Boolean) $r10;

        $z0 = virtualinvoke $r11.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label6;

        return 0;

     label6:
        f1 = f1 - 1.0F;

        goto label3;

     label7:
        return 1;
    }

    public boolean fling(androidx.test.uiautomator.Direction)
    {
        androidx.test.uiautomator.UiObject2 r0;
        androidx.test.uiautomator.Direction r1;
        android.util.DisplayMetrics $r2;
        float $f0, $f1;
        int $i0;
        boolean $z0;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        r1 := @parameter0: androidx.test.uiautomator.Direction;

        $r2 = r0.<androidx.test.uiautomator.UiObject2: android.util.DisplayMetrics mDisplayMetrics>;

        $f0 = $r2.<android.util.DisplayMetrics: float density>;

        $f1 = 7500.0F * $f0;

        $i0 = (int) $f1;

        $z0 = virtualinvoke r0.<androidx.test.uiautomator.UiObject2: boolean fling(androidx.test.uiautomator.Direction,int)>(r1, $i0);

        return $z0;
    }

    public boolean fling(androidx.test.uiautomator.Direction, int)
    {
        androidx.test.uiautomator.UiObject2 r0;
        androidx.test.uiautomator.Direction r1, r3;
        int i0, $i1;
        android.view.ViewConfiguration r2;
        android.graphics.Rect r4;
        androidx.test.uiautomator.PointerGesture r5;
        androidx.test.uiautomator.UiDevice $r6;
        android.app.Instrumentation $r7;
        android.content.Context $r8;
        androidx.test.uiautomator.Gestures $r9;
        androidx.test.uiautomator.GestureController $r10;
        androidx.test.uiautomator.EventCondition $r11;
        androidx.test.uiautomator.PointerGesture[] $r12;
        java.lang.Object $r13;
        java.lang.Boolean $r14;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r15;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        r1 := @parameter0: androidx.test.uiautomator.Direction;

        i0 := @parameter1: int;

        $r6 = virtualinvoke r0.<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.UiDevice getDevice()>();

        $r7 = virtualinvoke $r6.<androidx.test.uiautomator.UiDevice: android.app.Instrumentation getInstrumentation()>();

        $r8 = virtualinvoke $r7.<android.app.Instrumentation: android.content.Context getContext()>();

        r2 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r8);

        $i1 = virtualinvoke r2.<android.view.ViewConfiguration: int getScaledMinimumFlingVelocity()>();

        if i0 >= $i1 goto label1;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Speed is less than the minimum fling velocity");

        throw $r15;

     label1:
        r3 = staticinvoke <androidx.test.uiautomator.Direction: androidx.test.uiautomator.Direction reverse(androidx.test.uiautomator.Direction)>(r1);

        r4 = specialinvoke r0.<androidx.test.uiautomator.UiObject2: android.graphics.Rect getVisibleBoundsForGestures()>();

        $r9 = r0.<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.Gestures mGestures>;

        r5 = virtualinvoke $r9.<androidx.test.uiautomator.Gestures: androidx.test.uiautomator.PointerGesture swipeRect(android.graphics.Rect,androidx.test.uiautomator.Direction,float,int)>(r4, r3, 1.0F, i0);

        $r10 = r0.<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.GestureController mGestureController>;

        $r11 = staticinvoke <androidx.test.uiautomator.Until: androidx.test.uiautomator.EventCondition scrollFinished(androidx.test.uiautomator.Direction)>(r1);

        $r12 = newarray (androidx.test.uiautomator.PointerGesture)[1];

        $r12[0] = r5;

        $r13 = virtualinvoke $r10.<androidx.test.uiautomator.GestureController: java.lang.Object performGestureAndWait(androidx.test.uiautomator.EventCondition,long,androidx.test.uiautomator.PointerGesture[])>($r11, 5000L, $r12);

        $r14 = (java.lang.Boolean) $r13;

        $z0 = virtualinvoke $r14.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public void legacySetText(java.lang.String)
    {
        androidx.test.uiautomator.UiObject2 r0, $r10;
        android.view.accessibility.AccessibilityNodeInfo r1;
        java.lang.CharSequence r2;
        androidx.test.uiautomator.InteractionController r3;
        android.graphics.Rect r4;
        boolean $z0;
        androidx.test.uiautomator.UiDevice $r5, $r6;
        int $i0, $i1, $i2;
        androidx.test.uiautomator.BySelector $r7;
        androidx.test.uiautomator.SearchCondition $r8;
        java.lang.Object $r9;
        java.lang.String r11;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        r11 := @parameter0: java.lang.String;

        r1 = specialinvoke r0.<androidx.test.uiautomator.UiObject2: android.view.accessibility.AccessibilityNodeInfo getAccessibilityNodeInfo()>();

        if r11 != null goto label1;

        r11 = "";

     label1:
        r2 = virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getText()>();

        $z0 = virtualinvoke r11.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z0 != 0 goto label2;

        $r5 = virtualinvoke r0.<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.UiDevice getDevice()>();

        r3 = virtualinvoke $r5.<androidx.test.uiautomator.UiDevice: androidx.test.uiautomator.InteractionController getInteractionController()>();

        r4 = virtualinvoke r0.<androidx.test.uiautomator.UiObject2: android.graphics.Rect getVisibleBounds()>();

        $i0 = r4.<android.graphics.Rect: int left>;

        $i1 = $i0 + 20;

        $i2 = virtualinvoke r4.<android.graphics.Rect: int centerY()>();

        virtualinvoke r3.<androidx.test.uiautomator.InteractionController: boolean longTapNoSync(int,int)>($i1, $i2);

        $r6 = virtualinvoke r0.<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.UiDevice getDevice()>();

        $r7 = staticinvoke <androidx.test.uiautomator.By: androidx.test.uiautomator.BySelector descContains(java.lang.String)>("Select all");

        $r8 = staticinvoke <androidx.test.uiautomator.Until: androidx.test.uiautomator.SearchCondition findObject(androidx.test.uiautomator.BySelector)>($r7);

        $r9 = virtualinvoke $r6.<androidx.test.uiautomator.UiDevice: java.lang.Object wait(androidx.test.uiautomator.SearchCondition,long)>($r8, 50L);

        $r10 = (androidx.test.uiautomator.UiObject2) $r9;

        virtualinvoke $r10.<androidx.test.uiautomator.UiObject2: void click()>();

        staticinvoke <android.os.SystemClock: void sleep(long)>(250L);

        virtualinvoke r3.<androidx.test.uiautomator.InteractionController: boolean sendKey(int,int)>(67, 0);

        virtualinvoke r3.<androidx.test.uiautomator.InteractionController: boolean sendText(java.lang.String)>(r11);

     label2:
        return;
    }

    public void setText(java.lang.String)
    {
        androidx.test.uiautomator.UiObject2 r0;
        android.view.accessibility.AccessibilityNodeInfo r1;
        android.os.Bundle r2, $r6, r9, $r11;
        androidx.test.uiautomator.InteractionController r3;
        int $i0, $i1, $i5;
        boolean $z0, $z1, $z4, $z5, $z6;
        java.lang.String $r4, $r5, $r7, r8;
        java.lang.CharSequence r10;
        androidx.test.uiautomator.UiDevice $r12;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        r8 := @parameter0: java.lang.String;

        r1 = specialinvoke r0.<androidx.test.uiautomator.UiObject2: android.view.accessibility.AccessibilityNodeInfo getAccessibilityNodeInfo()>();

        if r8 != null goto label1;

        r8 = "";

     label1:
        $i0 = <androidx.test.uiautomator.UiDevice: int API_LEVEL_ACTUAL>;

        if $i0 <= 19 goto label3;

        $r6 = new android.os.Bundle;

        specialinvoke $r6.<android.os.Bundle: void <init>()>();

        r9 = $r6;

        virtualinvoke r9.<android.os.Bundle: void putCharSequence(java.lang.String,java.lang.CharSequence)>("ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE", r8);

        $z5 = virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: boolean performAction(int,android.os.Bundle)>(2097152, r9);

        if $z5 != 0 goto label2;

        $r7 = <androidx.test.uiautomator.UiObject2: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r7, "AccessibilityNodeInfo#performAction(ACTION_SET_TEXT) failed");

     label2:
        goto label6;

     label3:
        r10 = virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getText()>();

        $z0 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>(r10);

        if $z0 != 0 goto label6;

        $z1 = virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: boolean performAction(int)>(1);

        if $z1 != 0 goto label4;

        $z4 = virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: boolean isFocused()>();

        if $z4 != 0 goto label4;

        $r5 = <androidx.test.uiautomator.UiObject2: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r5, "AccessibilityNodeInfo#performAction(ACTION_FOCUS) failed");

     label4:
        $r11 = new android.os.Bundle;

        specialinvoke $r11.<android.os.Bundle: void <init>()>();

        r2 = $r11;

        virtualinvoke r2.<android.os.Bundle: void putInt(java.lang.String,int)>("ACTION_ARGUMENT_SELECTION_START_INT", 0);

        $i5 = virtualinvoke r8.<java.lang.String: int length()>();

        virtualinvoke r2.<android.os.Bundle: void putInt(java.lang.String,int)>("ACTION_ARGUMENT_SELECTION_END_INT", $i5);

        $z6 = virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: boolean performAction(int,android.os.Bundle)>(131072, r2);

        if $z6 != 0 goto label5;

        if r10 == null goto label5;

        $i1 = interfaceinvoke r10.<java.lang.CharSequence: int length()>();

        if $i1 <= 0 goto label5;

        $r4 = <androidx.test.uiautomator.UiObject2: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r4, "AccessibilityNodeInfo#performAction(ACTION_SET_SELECTION) failed");

     label5:
        $r12 = virtualinvoke r0.<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.UiDevice getDevice()>();

        r3 = virtualinvoke $r12.<androidx.test.uiautomator.UiDevice: androidx.test.uiautomator.InteractionController getInteractionController()>();

        virtualinvoke r3.<androidx.test.uiautomator.InteractionController: boolean sendKey(int,int)>(67, 0);

        virtualinvoke r3.<androidx.test.uiautomator.InteractionController: boolean sendText(java.lang.String)>(r8);

     label6:
        return;
    }

    private android.view.accessibility.AccessibilityNodeInfo getAccessibilityNodeInfo()
    {
        androidx.test.uiautomator.UiObject2 r0;
        android.view.accessibility.AccessibilityNodeInfo $r1, $r3, $r4, $r6;
        androidx.test.uiautomator.UiDevice $r2, $r5;
        boolean $z0, $z1;
        java.lang.IllegalStateException r9;
        androidx.test.uiautomator.StaleObjectException r10;
        java.lang.Throwable r11;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        $r1 = r0.<androidx.test.uiautomator.UiObject2: android.view.accessibility.AccessibilityNodeInfo mCachedNode>;

        if $r1 != null goto label1;

        r9 = new java.lang.IllegalStateException;

        specialinvoke r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("This object has already been recycled");

        throw r9;

     label1:
        $r2 = virtualinvoke r0.<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.UiDevice getDevice()>();

        virtualinvoke $r2.<androidx.test.uiautomator.UiDevice: void waitForIdle()>();

        $r3 = r0.<androidx.test.uiautomator.UiObject2: android.view.accessibility.AccessibilityNodeInfo mCachedNode>;

        $z0 = virtualinvoke $r3.<android.view.accessibility.AccessibilityNodeInfo: boolean refresh()>();

        if $z0 != 0 goto label2;

        $r5 = virtualinvoke r0.<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.UiDevice getDevice()>();

        virtualinvoke $r5.<androidx.test.uiautomator.UiDevice: void runWatchers()>();

        $r6 = r0.<androidx.test.uiautomator.UiObject2: android.view.accessibility.AccessibilityNodeInfo mCachedNode>;

        $z1 = virtualinvoke $r6.<android.view.accessibility.AccessibilityNodeInfo: boolean refresh()>();

        if $z1 != 0 goto label2;

        r10 = new androidx.test.uiautomator.StaleObjectException;

        specialinvoke r10.<androidx.test.uiautomator.StaleObjectException: void <init>()>();

        r11 = (java.lang.Throwable) r10;

        throw r11;

     label2:
        $r4 = r0.<androidx.test.uiautomator.UiObject2: android.view.accessibility.AccessibilityNodeInfo mCachedNode>;

        return $r4;
    }

    androidx.test.uiautomator.UiDevice getDevice()
    {
        androidx.test.uiautomator.UiObject2 r0;
        androidx.test.uiautomator.UiDevice $r1;

        r0 := @this: androidx.test.uiautomator.UiObject2;

        $r1 = r0.<androidx.test.uiautomator.UiObject2: androidx.test.uiautomator.UiDevice mDevice>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        $r0 = class "Landroidx/test/uiautomator/UiObject2;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <androidx.test.uiautomator.UiObject2: java.lang.String TAG> = $r1;

        return;
    }

