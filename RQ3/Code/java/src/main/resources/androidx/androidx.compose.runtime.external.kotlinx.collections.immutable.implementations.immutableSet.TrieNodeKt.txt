androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeKt
<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeKt: int MAX_BRANCHING_FACTOR>
<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeKt: int LOG_MAX_BRANCHING_FACTOR>
<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeKt: int MAX_BRANCHING_FACTOR_MINUS_ONE>
<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeKt: int MAX_SHIFT>
    public static final int indexSegment(int, int)
    {
        int i0, i1, $i2, $i3;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = i0 >> i1;

        $i3 = $i2 & 31;

        return $i3;
    }

    private static final java.lang.Object[] addElementAtIndex(java.lang.Object[], int, java.lang.Object)
    {
        java.lang.Object[] $r0, r2;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Object r1;

        $r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.Object;

        $i1 = lengthof $r0;

        $i2 = $i1 + 1;

        r2 = newarray (java.lang.Object)[$i2];

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto$default(java.lang.Object[],java.lang.Object[],int,int,int,int,java.lang.Object)>($r0, r2, 0, 0, i0, 6, null);

        $i4 = i0 + 1;

        $i3 = lengthof $r0;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r0, r2, $i4, i0, $i3);

        r2[i0] = r1;

        return r2;
    }

    private static final java.lang.Object[] removeCellAtIndex(java.lang.Object[], int)
    {
        java.lang.Object[] $r0, r1;
        int i0, $i1, $i2, $i3, $i4;

        $r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        $i1 = lengthof $r0;

        $i2 = $i1 - 1;

        r1 = newarray (java.lang.Object)[$i2];

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto$default(java.lang.Object[],java.lang.Object[],int,int,int,int,java.lang.Object)>($r0, r1, 0, 0, i0, 6, null);

        $i4 = i0 + 1;

        $i3 = lengthof $r0;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r0, r1, i0, $i4, $i3);

        return r1;
    }

    private static final int filterTo(java.lang.Object[], java.lang.Object[], int, kotlin.jvm.functions.Function1)
    {
        java.lang.Object[] $r0, r1;
        int i0, $i1, $i2, $i3, $i4, i5, i6;
        kotlin.jvm.functions.Function1 r2;
        java.lang.Object r3, $r4, $r6;
        java.lang.Boolean $r5;
        boolean $z1, $z2, $z3;

        $r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.Object[];

        i0 := @parameter2: int;

        r2 := @parameter3: kotlin.jvm.functions.Function1;

        i5 = 0;

        i6 = 0;

     label1:
        $i1 = lengthof $r0;

        if i5 >= $i1 goto label7;

        if i6 > i5 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.internal.CommonFunctionsKt: void assert(boolean)>($z2);

        r3 = $r0[i5];

        $r4 = interfaceinvoke r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r3);

        $r5 = (java.lang.Boolean) $r4;

        $z1 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label6;

        $i2 = i0 + i6;

        $r6 = $r0[i5];

        r1[$i2] = $r6;

        i6 = i6 + 1;

        $i4 = i0 + i6;

        $i3 = lengthof r1;

        if $i4 > $i3 goto label4;

        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.internal.CommonFunctionsKt: void assert(boolean)>($z3);

     label6:
        i5 = i5 + 1;

        goto label1;

     label7:
        return i6;
    }

    static int filterTo$default(java.lang.Object[], java.lang.Object[], int, kotlin.jvm.functions.Function1, int, java.lang.Object)
    {
        java.lang.Object[] $r0, r1;
        java.lang.Object r2, $r3, $r5, r8;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, i7, i8, $i9;
        java.lang.Boolean $r4;
        boolean $z0, $z2, $z3;
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeKt$filterTo$1 $r6;
        kotlin.jvm.functions.Function1 r7;

        $r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.Object[];

        i5 := @parameter2: int;

        r7 := @parameter3: kotlin.jvm.functions.Function1;

        $i6 := @parameter4: int;

        r8 := @parameter5: java.lang.Object;

        $i0 = $i6 & 2;

        if $i0 == 0 goto label1;

        i5 = 0;

     label1:
        $i1 = $i6 & 4;

        if $i1 == 0 goto label2;

        $r6 = <androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeKt$filterTo$1: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeKt$filterTo$1 INSTANCE>;

        r7 = (kotlin.jvm.functions.Function1) $r6;

     label2:
        i7 = 0;

        i8 = 0;

     label3:
        $i9 = lengthof $r0;

        if i7 >= $i9 goto label9;

        if i8 > i7 goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.internal.CommonFunctionsKt: void assert(boolean)>($z2);

        r2 = $r0[i7];

        $r3 = interfaceinvoke r7.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label8;

        $i2 = i5 + i8;

        $r5 = $r0[i7];

        r1[$i2] = $r5;

        i8 = i8 + 1;

        $i4 = i5 + i8;

        $i3 = lengthof r1;

        if $i4 > $i3 goto label6;

        $z3 = 1;

        goto label7;

     label6:
        $z3 = 0;

     label7:
        staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.internal.CommonFunctionsKt: void assert(boolean)>($z3);

     label8:
        i7 = i7 + 1;

        goto label3;

     label9:
        return i8;
    }

    public static final java.lang.Object[] access$addElementAtIndex(java.lang.Object[], int, java.lang.Object)
    {
        java.lang.Object[] $r0, $r2;
        int i0;
        java.lang.Object r1;

        $r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.Object;

        $r2 = staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeKt: java.lang.Object[] addElementAtIndex(java.lang.Object[],int,java.lang.Object)>($r0, i0, r1);

        return $r2;
    }

    public static final java.lang.Object[] access$removeCellAtIndex(java.lang.Object[], int)
    {
        java.lang.Object[] $r0, $r1;
        int i0;

        $r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        $r1 = staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeKt: java.lang.Object[] removeCellAtIndex(java.lang.Object[],int)>($r0, i0);

        return $r1;
    }

