kotlin.coroutines.CombinedContext
<kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext$Element element>
<kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext left>
    public void <init>(kotlin.coroutines.CoroutineContext, kotlin.coroutines.CoroutineContext$Element)
    {
        kotlin.coroutines.CombinedContext $r0;
        kotlin.coroutines.CoroutineContext $r1;
        kotlin.coroutines.CoroutineContext$Element $r2;

        $r0 := @this: kotlin.coroutines.CombinedContext;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r2 := @parameter1: kotlin.coroutines.CoroutineContext$Element;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "left");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "element");

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext left> = $r1;

        $r0.<kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext$Element element> = $r2;

        return;
    }

    private final boolean contains(kotlin.coroutines.CoroutineContext$Element)
    {
        kotlin.coroutines.CombinedContext $r0;
        kotlin.coroutines.CoroutineContext$Element $r1, $r3;
        kotlin.coroutines.CoroutineContext$Key $r2;
        boolean $z0;

        $r0 := @this: kotlin.coroutines.CombinedContext;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext$Element;

        $r2 = interfaceinvoke $r1.<kotlin.coroutines.CoroutineContext$Element: kotlin.coroutines.CoroutineContext$Key getKey()>();

        $r3 = virtualinvoke $r0.<kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r2);

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r3, $r1);

        return $z0;
    }

    private final boolean containsAll(kotlin.coroutines.CombinedContext)
    {
        kotlin.coroutines.CombinedContext $r0, $r1;
        kotlin.coroutines.CoroutineContext$Element $r2;
        boolean $z0;
        kotlin.coroutines.CoroutineContext $r3;

        $r0 := @this: kotlin.coroutines.CombinedContext;

        $r1 := @parameter0: kotlin.coroutines.CombinedContext;

     label1:
        $r2 = $r1.<kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext$Element element>;

        $z0 = specialinvoke $r0.<kotlin.coroutines.CombinedContext: boolean contains(kotlin.coroutines.CoroutineContext$Element)>($r2);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r3 = $r1.<kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext left>;

        $z0 = $r3 instanceof kotlin.coroutines.CombinedContext;

        if $z0 == 0 goto label3;

        $r1 = (kotlin.coroutines.CombinedContext) $r3;

        goto label1;

     label3:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r3, "null cannot be cast to non-null type kotlin.coroutines.CoroutineContext.Element");

        $r2 = (kotlin.coroutines.CoroutineContext$Element) $r3;

        $z0 = specialinvoke $r0.<kotlin.coroutines.CombinedContext: boolean contains(kotlin.coroutines.CoroutineContext$Element)>($r2);

        return $z0;
    }

    private final int size()
    {
        kotlin.coroutines.CombinedContext $r0;
        boolean $z0;
        int $i0;
        kotlin.coroutines.CoroutineContext $r1;

        $r0 := @this: kotlin.coroutines.CombinedContext;

        $i0 = 2;

     label1:
        $r1 = $r0.<kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext left>;

        $z0 = $r1 instanceof kotlin.coroutines.CombinedContext;

        if $z0 == 0 goto label2;

        $r0 = (kotlin.coroutines.CombinedContext) $r1;

        goto label3;

     label2:
        $r0 = null;

     label3:
        if $r0 != null goto label4;

        return $i0;

     label4:
        $i0 = $i0 + 1;

        goto label1;
    }

    private final java.lang.Object writeReplace()
    {
        kotlin.coroutines.CombinedContext $r0;
        kotlin.Unit $r1;
        kotlin.coroutines.CombinedContext$writeReplace$1 $r2;
        int $i0, $i1;
        kotlin.coroutines.CoroutineContext[] $r3;
        kotlin.jvm.internal.Ref$IntRef $r4;
        boolean $z0;
        kotlin.coroutines.CombinedContext$Serialized $r5;
        java.lang.IllegalStateException $r6;
        java.lang.String $r7;

        $r0 := @this: kotlin.coroutines.CombinedContext;

        $i0 = specialinvoke $r0.<kotlin.coroutines.CombinedContext: int size()>();

        $r3 = newarray (kotlin.coroutines.CoroutineContext)[$i0];

        $r4 = new kotlin.jvm.internal.Ref$IntRef;

        specialinvoke $r4.<kotlin.jvm.internal.Ref$IntRef: void <init>()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r2 = new kotlin.coroutines.CombinedContext$writeReplace$1;

        specialinvoke $r2.<kotlin.coroutines.CombinedContext$writeReplace$1: void <init>(kotlin.coroutines.CoroutineContext[],kotlin.jvm.internal.Ref$IntRef)>($r3, $r4);

        virtualinvoke $r0.<kotlin.coroutines.CombinedContext: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)>($r1, $r2);

        $i1 = $r4.<kotlin.jvm.internal.Ref$IntRef: int element>;

        if $i1 != $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $r5 = new kotlin.coroutines.CombinedContext$Serialized;

        specialinvoke $r5.<kotlin.coroutines.CombinedContext$Serialized: void <init>(kotlin.coroutines.CoroutineContext[])>($r3);

        return $r5;

     label3:
        $r6 = new java.lang.IllegalStateException;

        $r7 = "Check failed.";

        $r7 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    public boolean equals(java.lang.Object)
    {
        kotlin.coroutines.CombinedContext $r0, $r2;
        java.lang.Object $r1;
        boolean $z0;
        int $i0, $i1;

        $r0 := @this: kotlin.coroutines.CombinedContext;

        $r1 := @parameter0: java.lang.Object;

        if $r0 == $r1 goto label2;

        $z0 = $r1 instanceof kotlin.coroutines.CombinedContext;

        if $z0 == 0 goto label1;

        $r2 = (kotlin.coroutines.CombinedContext) $r1;

        $i0 = specialinvoke $r2.<kotlin.coroutines.CombinedContext: int size()>();

        $i1 = specialinvoke $r0.<kotlin.coroutines.CombinedContext: int size()>();

        if $i0 != $i1 goto label1;

        $r2 = (kotlin.coroutines.CombinedContext) $r1;

        $z0 = specialinvoke $r2.<kotlin.coroutines.CombinedContext: boolean containsAll(kotlin.coroutines.CombinedContext)>($r0);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public java.lang.Object fold(java.lang.Object, kotlin.jvm.functions.Function2)
    {
        kotlin.coroutines.CombinedContext $r0;
        kotlin.jvm.functions.Function2 $r1;
        java.lang.Object $r2;
        kotlin.coroutines.CoroutineContext $r3;
        kotlin.coroutines.CoroutineContext$Element $r4;

        $r0 := @this: kotlin.coroutines.CombinedContext;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "operation");

        $r3 = $r0.<kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext left>;

        $r2 = interfaceinvoke $r3.<kotlin.coroutines.CoroutineContext: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)>($r2, $r1);

        $r4 = $r0.<kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext$Element element>;

        $r2 = interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r2, $r4);

        return $r2;
    }

    public kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)
    {
        kotlin.coroutines.CombinedContext $r0;
        kotlin.coroutines.CoroutineContext$Key $r1;
        kotlin.coroutines.CoroutineContext$Element $r2;
        kotlin.coroutines.CoroutineContext $r3;
        boolean $z0;

        $r0 := @this: kotlin.coroutines.CombinedContext;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext$Key;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "key");

     label1:
        $r2 = $r0.<kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext$Element element>;

        $r2 = interfaceinvoke $r2.<kotlin.coroutines.CoroutineContext$Element: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r1);

        if $r2 == null goto label2;

        return $r2;

     label2:
        $r3 = $r0.<kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext left>;

        $z0 = $r3 instanceof kotlin.coroutines.CombinedContext;

        if $z0 == 0 goto label3;

        $r0 = (kotlin.coroutines.CombinedContext) $r3;

        goto label1;

     label3:
        $r2 = interfaceinvoke $r3.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r1);

        return $r2;
    }

    public int hashCode()
    {
        kotlin.coroutines.CombinedContext $r0;
        kotlin.coroutines.CoroutineContext $r1;
        int $i0, $i1;
        kotlin.coroutines.CoroutineContext$Element $r2;

        $r0 := @this: kotlin.coroutines.CombinedContext;

        $r1 = $r0.<kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext left>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $r2 = $r0.<kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext$Element element>;

        $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i0 = $i0 + $i1;

        return $i0;
    }

    public kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)
    {
        kotlin.coroutines.CombinedContext $r0, $r6;
        kotlin.coroutines.CoroutineContext$Element $r1;
        kotlin.coroutines.CoroutineContext$Key $r2;
        kotlin.coroutines.CoroutineContext $r3, $r4;
        kotlin.coroutines.EmptyCoroutineContext $r5;

        $r0 := @this: kotlin.coroutines.CombinedContext;

        $r2 := @parameter0: kotlin.coroutines.CoroutineContext$Key;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "key");

        $r1 = $r0.<kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext$Element element>;

        $r1 = interfaceinvoke $r1.<kotlin.coroutines.CoroutineContext$Element: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r2);

        if $r1 == null goto label1;

        $r3 = $r0.<kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext left>;

        return $r3;

     label1:
        $r3 = $r0.<kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext left>;

        $r3 = interfaceinvoke $r3.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)>($r2);

        $r4 = $r0.<kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext left>;

        if $r3 == $r4 goto label3;

        $r5 = <kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.EmptyCoroutineContext INSTANCE>;

        if $r3 != $r5 goto label2;

        $r1 = $r0.<kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext$Element element>;

        return $r1;

     label2:
        $r6 = new kotlin.coroutines.CombinedContext;

        $r1 = $r0.<kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext$Element element>;

        specialinvoke $r6.<kotlin.coroutines.CombinedContext: void <init>(kotlin.coroutines.CoroutineContext,kotlin.coroutines.CoroutineContext$Element)>($r3, $r1);

        return $r6;

     label3:
        return $r0;
    }

    public kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)
    {
        kotlin.coroutines.CombinedContext $r0;
        kotlin.coroutines.CoroutineContext $r1;

        $r0 := @this: kotlin.coroutines.CombinedContext;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r1 = staticinvoke <kotlin.coroutines.CoroutineContext$DefaultImpls: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext,kotlin.coroutines.CoroutineContext)>($r0, $r1);

        return $r1;
    }

    public java.lang.String toString()
    {
        kotlin.coroutines.CombinedContext $r0;
        kotlin.coroutines.CombinedContext$toString$1 $r1;
        java.lang.StringBuilder $r2;
        java.lang.Object $r3;
        java.lang.String $r4;

        $r0 := @this: kotlin.coroutines.CombinedContext;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $r1 = <kotlin.coroutines.CombinedContext$toString$1: kotlin.coroutines.CombinedContext$toString$1 INSTANCE>;

        $r3 = virtualinvoke $r0.<kotlin.coroutines.CombinedContext: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)>("", $r1);

        $r4 = (java.lang.String) $r3;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

