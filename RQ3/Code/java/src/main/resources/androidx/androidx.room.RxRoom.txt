androidx.room.RxRoom
<androidx.room.RxRoom: java.lang.Object NOTHING>
    public static transient io.reactivex.Flowable createFlowable(androidx.room.RoomDatabase, java.lang.String[])
    {
        androidx.room.RoomDatabase r0;
        java.lang.String[] r1;
        androidx.room.RxRoom$1 $r2;
        io.reactivex.BackpressureStrategy $r3;
        io.reactivex.Flowable $r4;

        r0 := @parameter0: androidx.room.RoomDatabase;

        r1 := @parameter1: java.lang.String[];

        $r2 = new androidx.room.RxRoom$1;

        specialinvoke $r2.<androidx.room.RxRoom$1: void <init>(java.lang.String[],androidx.room.RoomDatabase)>(r1, r0);

        $r3 = <io.reactivex.BackpressureStrategy: io.reactivex.BackpressureStrategy LATEST>;

        $r4 = staticinvoke <io.reactivex.Flowable: io.reactivex.Flowable create(io.reactivex.FlowableOnSubscribe,io.reactivex.BackpressureStrategy)>($r2, $r3);

        return $r4;
    }

    public static io.reactivex.Flowable createFlowable(androidx.room.RoomDatabase, java.lang.String[], java.util.concurrent.Callable)
    {
        androidx.room.RoomDatabase r0;
        java.lang.String[] r1;
        java.util.concurrent.Callable r2;
        io.reactivex.Flowable $r3;

        r0 := @parameter0: androidx.room.RoomDatabase;

        r1 := @parameter1: java.lang.String[];

        r2 := @parameter2: java.util.concurrent.Callable;

        $r3 = staticinvoke <androidx.room.RxRoom: io.reactivex.Flowable createFlowable(androidx.room.RoomDatabase,boolean,java.lang.String[],java.util.concurrent.Callable)>(r0, 0, r1, r2);

        return $r3;
    }

    public static io.reactivex.Flowable createFlowable(androidx.room.RoomDatabase, boolean, java.lang.String[], java.util.concurrent.Callable)
    {
        androidx.room.RoomDatabase r0;
        boolean z0;
        java.lang.String[] r1;
        java.util.concurrent.Callable r2;
        io.reactivex.Scheduler r3;
        io.reactivex.Maybe r4;
        java.util.concurrent.Executor $r5;
        io.reactivex.Flowable $r6, $r7, $r8, $r9, $r11;
        androidx.room.RxRoom$2 $r10;

        r0 := @parameter0: androidx.room.RoomDatabase;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.lang.String[];

        r2 := @parameter3: java.util.concurrent.Callable;

        $r5 = staticinvoke <androidx.room.RxRoom: java.util.concurrent.Executor getExecutor(androidx.room.RoomDatabase,boolean)>(r0, z0);

        r3 = staticinvoke <io.reactivex.schedulers.Schedulers: io.reactivex.Scheduler 'from'(java.util.concurrent.Executor)>($r5);

        r4 = staticinvoke <io.reactivex.Maybe: io.reactivex.Maybe fromCallable(java.util.concurrent.Callable)>(r2);

        $r6 = staticinvoke <androidx.room.RxRoom: io.reactivex.Flowable createFlowable(androidx.room.RoomDatabase,java.lang.String[])>(r0, r1);

        $r7 = virtualinvoke $r6.<io.reactivex.Flowable: io.reactivex.Flowable subscribeOn(io.reactivex.Scheduler)>(r3);

        $r8 = virtualinvoke $r7.<io.reactivex.Flowable: io.reactivex.Flowable unsubscribeOn(io.reactivex.Scheduler)>(r3);

        $r9 = virtualinvoke $r8.<io.reactivex.Flowable: io.reactivex.Flowable observeOn(io.reactivex.Scheduler)>(r3);

        $r10 = new androidx.room.RxRoom$2;

        specialinvoke $r10.<androidx.room.RxRoom$2: void <init>(io.reactivex.Maybe)>(r4);

        $r11 = virtualinvoke $r9.<io.reactivex.Flowable: io.reactivex.Flowable flatMapMaybe(io.reactivex.functions.Function)>($r10);

        return $r11;
    }

    public static transient io.reactivex.Observable createObservable(androidx.room.RoomDatabase, java.lang.String[])
    {
        androidx.room.RoomDatabase r0;
        java.lang.String[] r1;
        androidx.room.RxRoom$3 $r2;
        io.reactivex.Observable $r3;

        r0 := @parameter0: androidx.room.RoomDatabase;

        r1 := @parameter1: java.lang.String[];

        $r2 = new androidx.room.RxRoom$3;

        specialinvoke $r2.<androidx.room.RxRoom$3: void <init>(java.lang.String[],androidx.room.RoomDatabase)>(r1, r0);

        $r3 = staticinvoke <io.reactivex.Observable: io.reactivex.Observable create(io.reactivex.ObservableOnSubscribe)>($r2);

        return $r3;
    }

    public static io.reactivex.Observable createObservable(androidx.room.RoomDatabase, java.lang.String[], java.util.concurrent.Callable)
    {
        androidx.room.RoomDatabase r0;
        java.lang.String[] r1;
        java.util.concurrent.Callable r2;
        io.reactivex.Observable $r3;

        r0 := @parameter0: androidx.room.RoomDatabase;

        r1 := @parameter1: java.lang.String[];

        r2 := @parameter2: java.util.concurrent.Callable;

        $r3 = staticinvoke <androidx.room.RxRoom: io.reactivex.Observable createObservable(androidx.room.RoomDatabase,boolean,java.lang.String[],java.util.concurrent.Callable)>(r0, 0, r1, r2);

        return $r3;
    }

    public static io.reactivex.Observable createObservable(androidx.room.RoomDatabase, boolean, java.lang.String[], java.util.concurrent.Callable)
    {
        androidx.room.RoomDatabase r0;
        boolean z0;
        java.lang.String[] r1;
        java.util.concurrent.Callable r2;
        io.reactivex.Scheduler r3;
        io.reactivex.Maybe r4;
        java.util.concurrent.Executor $r5;
        io.reactivex.Observable $r6, $r7, $r8, $r9, $r11;
        androidx.room.RxRoom$4 $r10;

        r0 := @parameter0: androidx.room.RoomDatabase;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.lang.String[];

        r2 := @parameter3: java.util.concurrent.Callable;

        $r5 = staticinvoke <androidx.room.RxRoom: java.util.concurrent.Executor getExecutor(androidx.room.RoomDatabase,boolean)>(r0, z0);

        r3 = staticinvoke <io.reactivex.schedulers.Schedulers: io.reactivex.Scheduler 'from'(java.util.concurrent.Executor)>($r5);

        r4 = staticinvoke <io.reactivex.Maybe: io.reactivex.Maybe fromCallable(java.util.concurrent.Callable)>(r2);

        $r6 = staticinvoke <androidx.room.RxRoom: io.reactivex.Observable createObservable(androidx.room.RoomDatabase,java.lang.String[])>(r0, r1);

        $r7 = virtualinvoke $r6.<io.reactivex.Observable: io.reactivex.Observable subscribeOn(io.reactivex.Scheduler)>(r3);

        $r8 = virtualinvoke $r7.<io.reactivex.Observable: io.reactivex.Observable unsubscribeOn(io.reactivex.Scheduler)>(r3);

        $r9 = virtualinvoke $r8.<io.reactivex.Observable: io.reactivex.Observable observeOn(io.reactivex.Scheduler)>(r3);

        $r10 = new androidx.room.RxRoom$4;

        specialinvoke $r10.<androidx.room.RxRoom$4: void <init>(io.reactivex.Maybe)>(r4);

        $r11 = virtualinvoke $r9.<io.reactivex.Observable: io.reactivex.Observable flatMapMaybe(io.reactivex.functions.Function)>($r10);

        return $r11;
    }

    public static io.reactivex.Single createSingle(java.util.concurrent.Callable)
    {
        java.util.concurrent.Callable r0;
        androidx.room.RxRoom$5 $r1;
        io.reactivex.Single $r2;

        r0 := @parameter0: java.util.concurrent.Callable;

        $r1 = new androidx.room.RxRoom$5;

        specialinvoke $r1.<androidx.room.RxRoom$5: void <init>(java.util.concurrent.Callable)>(r0);

        $r2 = staticinvoke <io.reactivex.Single: io.reactivex.Single create(io.reactivex.SingleOnSubscribe)>($r1);

        return $r2;
    }

    private static java.util.concurrent.Executor getExecutor(androidx.room.RoomDatabase, boolean)
    {
        androidx.room.RoomDatabase r0;
        boolean z0;
        java.util.concurrent.Executor $r1, $r2;

        r0 := @parameter0: androidx.room.RoomDatabase;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<androidx.room.RoomDatabase: java.util.concurrent.Executor getTransactionExecutor()>();

        return $r2;

     label1:
        $r1 = virtualinvoke r0.<androidx.room.RoomDatabase: java.util.concurrent.Executor getQueryExecutor()>();

        return $r1;
    }

    public void <init>()
    {
        androidx.room.RxRoom r0;

        r0 := @this: androidx.room.RxRoom;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <androidx.room.RxRoom: java.lang.Object NOTHING> = $r0;

        return;
    }

androidx.room.RxRoom$1$1
<androidx.room.RxRoom$1$1: io.reactivex.FlowableEmitter val$emitter>
<androidx.room.RxRoom$1$1: androidx.room.RxRoom$1 this$0>
    void <init>(androidx.room.RxRoom$1, java.lang.String[], io.reactivex.FlowableEmitter)
    {
        androidx.room.RxRoom$1$1 r0;
        androidx.room.RxRoom$1 r1;
        java.lang.String[] r2;
        io.reactivex.FlowableEmitter r3;

        r0 := @this: androidx.room.RxRoom$1$1;

        r1 := @parameter0: androidx.room.RxRoom$1;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: io.reactivex.FlowableEmitter;

        r0.<androidx.room.RxRoom$1$1: androidx.room.RxRoom$1 this$0> = r1;

        r0.<androidx.room.RxRoom$1$1: io.reactivex.FlowableEmitter val$emitter> = r3;

        specialinvoke r0.<androidx.room.InvalidationTracker$Observer: void <init>(java.lang.String[])>(r2);

        return;
    }

    public void onInvalidated(java.util.Set)
    {
        androidx.room.RxRoom$1$1 r0;
        java.util.Set r1;
        io.reactivex.FlowableEmitter $r2, $r4;
        boolean $z0;
        java.lang.Object $r3;

        r0 := @this: androidx.room.RxRoom$1$1;

        r1 := @parameter0: java.util.Set;

        $r2 = r0.<androidx.room.RxRoom$1$1: io.reactivex.FlowableEmitter val$emitter>;

        $z0 = interfaceinvoke $r2.<io.reactivex.FlowableEmitter: boolean isCancelled()>();

        if $z0 != 0 goto label1;

        $r4 = r0.<androidx.room.RxRoom$1$1: io.reactivex.FlowableEmitter val$emitter>;

        $r3 = <androidx.room.RxRoom: java.lang.Object NOTHING>;

        interfaceinvoke $r4.<io.reactivex.FlowableEmitter: void onNext(java.lang.Object)>($r3);

     label1:
        return;
    }

androidx.room.RxRoom$1$2
<androidx.room.RxRoom$1$2: androidx.room.InvalidationTracker$Observer val$observer>
<androidx.room.RxRoom$1$2: androidx.room.RxRoom$1 this$0>
    void <init>(androidx.room.RxRoom$1, androidx.room.InvalidationTracker$Observer)
    {
        androidx.room.RxRoom$1$2 r0;
        androidx.room.RxRoom$1 r1;
        androidx.room.InvalidationTracker$Observer r2;

        r0 := @this: androidx.room.RxRoom$1$2;

        r1 := @parameter0: androidx.room.RxRoom$1;

        r2 := @parameter1: androidx.room.InvalidationTracker$Observer;

        r0.<androidx.room.RxRoom$1$2: androidx.room.RxRoom$1 this$0> = r1;

        r0.<androidx.room.RxRoom$1$2: androidx.room.InvalidationTracker$Observer val$observer> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run() throws java.lang.Exception
    {
        androidx.room.RxRoom$1$2 r0;
        androidx.room.RxRoom$1 $r1;
        androidx.room.RoomDatabase $r2;
        androidx.room.InvalidationTracker $r3;
        androidx.room.InvalidationTracker$Observer $r4;

        r0 := @this: androidx.room.RxRoom$1$2;

        $r1 = r0.<androidx.room.RxRoom$1$2: androidx.room.RxRoom$1 this$0>;

        $r2 = $r1.<androidx.room.RxRoom$1: androidx.room.RoomDatabase val$database>;

        $r3 = virtualinvoke $r2.<androidx.room.RoomDatabase: androidx.room.InvalidationTracker getInvalidationTracker()>();

        $r4 = r0.<androidx.room.RxRoom$1$2: androidx.room.InvalidationTracker$Observer val$observer>;

        virtualinvoke $r3.<androidx.room.InvalidationTracker: void removeObserver(androidx.room.InvalidationTracker$Observer)>($r4);

        return;
    }

androidx.room.RxRoom$1
<androidx.room.RxRoom$1: java.lang.String[] val$tableNames>
<androidx.room.RxRoom$1: androidx.room.RoomDatabase val$database>
    void <init>(java.lang.String[], androidx.room.RoomDatabase)
    {
        androidx.room.RxRoom$1 r0;
        java.lang.String[] r1;
        androidx.room.RoomDatabase r2;

        r0 := @this: androidx.room.RxRoom$1;

        r1 := @parameter0: java.lang.String[];

        r2 := @parameter1: androidx.room.RoomDatabase;

        r0.<androidx.room.RxRoom$1: java.lang.String[] val$tableNames> = r1;

        r0.<androidx.room.RxRoom$1: androidx.room.RoomDatabase val$database> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void subscribe(io.reactivex.FlowableEmitter) throws java.lang.Exception
    {
        androidx.room.RxRoom$1 r0;
        io.reactivex.FlowableEmitter r1;
        androidx.room.RxRoom$1$1 r2, $r3;
        java.lang.String[] $r4;
        boolean $z0, $z1;
        java.lang.Object $r5;
        androidx.room.RoomDatabase $r6;
        androidx.room.InvalidationTracker $r7;
        androidx.room.RxRoom$1$2 $r8;
        io.reactivex.disposables.Disposable $r9;

        r0 := @this: androidx.room.RxRoom$1;

        r1 := @parameter0: io.reactivex.FlowableEmitter;

        $r3 = new androidx.room.RxRoom$1$1;

        $r4 = r0.<androidx.room.RxRoom$1: java.lang.String[] val$tableNames>;

        specialinvoke $r3.<androidx.room.RxRoom$1$1: void <init>(androidx.room.RxRoom$1,java.lang.String[],io.reactivex.FlowableEmitter)>(r0, $r4, r1);

        r2 = $r3;

        $z0 = interfaceinvoke r1.<io.reactivex.FlowableEmitter: boolean isCancelled()>();

        if $z0 != 0 goto label1;

        $r6 = r0.<androidx.room.RxRoom$1: androidx.room.RoomDatabase val$database>;

        $r7 = virtualinvoke $r6.<androidx.room.RoomDatabase: androidx.room.InvalidationTracker getInvalidationTracker()>();

        virtualinvoke $r7.<androidx.room.InvalidationTracker: void addObserver(androidx.room.InvalidationTracker$Observer)>(r2);

        $r8 = new androidx.room.RxRoom$1$2;

        specialinvoke $r8.<androidx.room.RxRoom$1$2: void <init>(androidx.room.RxRoom$1,androidx.room.InvalidationTracker$Observer)>(r0, r2);

        $r9 = staticinvoke <io.reactivex.disposables.Disposables: io.reactivex.disposables.Disposable fromAction(io.reactivex.functions.Action)>($r8);

        interfaceinvoke r1.<io.reactivex.FlowableEmitter: void setDisposable(io.reactivex.disposables.Disposable)>($r9);

     label1:
        $z1 = interfaceinvoke r1.<io.reactivex.FlowableEmitter: boolean isCancelled()>();

        if $z1 != 0 goto label2;

        $r5 = <androidx.room.RxRoom: java.lang.Object NOTHING>;

        interfaceinvoke r1.<io.reactivex.FlowableEmitter: void onNext(java.lang.Object)>($r5);

     label2:
        return;
    }

androidx.room.RxRoom$2
<androidx.room.RxRoom$2: io.reactivex.Maybe val$maybe>
    void <init>(io.reactivex.Maybe)
    {
        androidx.room.RxRoom$2 r0;
        io.reactivex.Maybe r1;

        r0 := @this: androidx.room.RxRoom$2;

        r1 := @parameter0: io.reactivex.Maybe;

        r0.<androidx.room.RxRoom$2: io.reactivex.Maybe val$maybe> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public io.reactivex.MaybeSource apply(java.lang.Object) throws java.lang.Exception
    {
        androidx.room.RxRoom$2 r0;
        java.lang.Object r1;
        io.reactivex.Maybe $r2;

        r0 := @this: androidx.room.RxRoom$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<androidx.room.RxRoom$2: io.reactivex.Maybe val$maybe>;

        return $r2;
    }

    public volatile java.lang.Object apply(java.lang.Object) throws java.lang.Exception
    {
        androidx.room.RxRoom$2 r0;
        java.lang.Object r1;
        io.reactivex.MaybeSource $r2;

        r0 := @this: androidx.room.RxRoom$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<androidx.room.RxRoom$2: io.reactivex.MaybeSource apply(java.lang.Object)>(r1);

        return $r2;
    }

androidx.room.RxRoom$3$1
<androidx.room.RxRoom$3$1: io.reactivex.ObservableEmitter val$emitter>
<androidx.room.RxRoom$3$1: androidx.room.RxRoom$3 this$0>
    void <init>(androidx.room.RxRoom$3, java.lang.String[], io.reactivex.ObservableEmitter)
    {
        androidx.room.RxRoom$3$1 r0;
        androidx.room.RxRoom$3 r1;
        java.lang.String[] r2;
        io.reactivex.ObservableEmitter r3;

        r0 := @this: androidx.room.RxRoom$3$1;

        r1 := @parameter0: androidx.room.RxRoom$3;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: io.reactivex.ObservableEmitter;

        r0.<androidx.room.RxRoom$3$1: androidx.room.RxRoom$3 this$0> = r1;

        r0.<androidx.room.RxRoom$3$1: io.reactivex.ObservableEmitter val$emitter> = r3;

        specialinvoke r0.<androidx.room.InvalidationTracker$Observer: void <init>(java.lang.String[])>(r2);

        return;
    }

    public void onInvalidated(java.util.Set)
    {
        androidx.room.RxRoom$3$1 r0;
        java.util.Set r1;
        java.lang.Object $r2;
        io.reactivex.ObservableEmitter $r3;

        r0 := @this: androidx.room.RxRoom$3$1;

        r1 := @parameter0: java.util.Set;

        $r3 = r0.<androidx.room.RxRoom$3$1: io.reactivex.ObservableEmitter val$emitter>;

        $r2 = <androidx.room.RxRoom: java.lang.Object NOTHING>;

        interfaceinvoke $r3.<io.reactivex.ObservableEmitter: void onNext(java.lang.Object)>($r2);

        return;
    }

androidx.room.RxRoom$3$2
<androidx.room.RxRoom$3$2: androidx.room.InvalidationTracker$Observer val$observer>
<androidx.room.RxRoom$3$2: androidx.room.RxRoom$3 this$0>
    void <init>(androidx.room.RxRoom$3, androidx.room.InvalidationTracker$Observer)
    {
        androidx.room.RxRoom$3$2 r0;
        androidx.room.RxRoom$3 r1;
        androidx.room.InvalidationTracker$Observer r2;

        r0 := @this: androidx.room.RxRoom$3$2;

        r1 := @parameter0: androidx.room.RxRoom$3;

        r2 := @parameter1: androidx.room.InvalidationTracker$Observer;

        r0.<androidx.room.RxRoom$3$2: androidx.room.RxRoom$3 this$0> = r1;

        r0.<androidx.room.RxRoom$3$2: androidx.room.InvalidationTracker$Observer val$observer> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run() throws java.lang.Exception
    {
        androidx.room.RxRoom$3$2 r0;
        androidx.room.RxRoom$3 $r1;
        androidx.room.RoomDatabase $r2;
        androidx.room.InvalidationTracker $r3;
        androidx.room.InvalidationTracker$Observer $r4;

        r0 := @this: androidx.room.RxRoom$3$2;

        $r1 = r0.<androidx.room.RxRoom$3$2: androidx.room.RxRoom$3 this$0>;

        $r2 = $r1.<androidx.room.RxRoom$3: androidx.room.RoomDatabase val$database>;

        $r3 = virtualinvoke $r2.<androidx.room.RoomDatabase: androidx.room.InvalidationTracker getInvalidationTracker()>();

        $r4 = r0.<androidx.room.RxRoom$3$2: androidx.room.InvalidationTracker$Observer val$observer>;

        virtualinvoke $r3.<androidx.room.InvalidationTracker: void removeObserver(androidx.room.InvalidationTracker$Observer)>($r4);

        return;
    }

androidx.room.RxRoom$3
<androidx.room.RxRoom$3: java.lang.String[] val$tableNames>
<androidx.room.RxRoom$3: androidx.room.RoomDatabase val$database>
    void <init>(java.lang.String[], androidx.room.RoomDatabase)
    {
        androidx.room.RxRoom$3 r0;
        java.lang.String[] r1;
        androidx.room.RoomDatabase r2;

        r0 := @this: androidx.room.RxRoom$3;

        r1 := @parameter0: java.lang.String[];

        r2 := @parameter1: androidx.room.RoomDatabase;

        r0.<androidx.room.RxRoom$3: java.lang.String[] val$tableNames> = r1;

        r0.<androidx.room.RxRoom$3: androidx.room.RoomDatabase val$database> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void subscribe(io.reactivex.ObservableEmitter) throws java.lang.Exception
    {
        androidx.room.RxRoom$3 r0;
        io.reactivex.ObservableEmitter r1;
        androidx.room.RxRoom$3$1 r2, $r3;
        java.lang.String[] $r4;
        androidx.room.RoomDatabase $r5;
        androidx.room.InvalidationTracker $r6;
        androidx.room.RxRoom$3$2 $r7;
        io.reactivex.disposables.Disposable $r8;
        java.lang.Object $r9;

        r0 := @this: androidx.room.RxRoom$3;

        r1 := @parameter0: io.reactivex.ObservableEmitter;

        $r3 = new androidx.room.RxRoom$3$1;

        $r4 = r0.<androidx.room.RxRoom$3: java.lang.String[] val$tableNames>;

        specialinvoke $r3.<androidx.room.RxRoom$3$1: void <init>(androidx.room.RxRoom$3,java.lang.String[],io.reactivex.ObservableEmitter)>(r0, $r4, r1);

        r2 = $r3;

        $r5 = r0.<androidx.room.RxRoom$3: androidx.room.RoomDatabase val$database>;

        $r6 = virtualinvoke $r5.<androidx.room.RoomDatabase: androidx.room.InvalidationTracker getInvalidationTracker()>();

        virtualinvoke $r6.<androidx.room.InvalidationTracker: void addObserver(androidx.room.InvalidationTracker$Observer)>(r2);

        $r7 = new androidx.room.RxRoom$3$2;

        specialinvoke $r7.<androidx.room.RxRoom$3$2: void <init>(androidx.room.RxRoom$3,androidx.room.InvalidationTracker$Observer)>(r0, r2);

        $r8 = staticinvoke <io.reactivex.disposables.Disposables: io.reactivex.disposables.Disposable fromAction(io.reactivex.functions.Action)>($r7);

        interfaceinvoke r1.<io.reactivex.ObservableEmitter: void setDisposable(io.reactivex.disposables.Disposable)>($r8);

        $r9 = <androidx.room.RxRoom: java.lang.Object NOTHING>;

        interfaceinvoke r1.<io.reactivex.ObservableEmitter: void onNext(java.lang.Object)>($r9);

        return;
    }

androidx.room.RxRoom$4
<androidx.room.RxRoom$4: io.reactivex.Maybe val$maybe>
    void <init>(io.reactivex.Maybe)
    {
        androidx.room.RxRoom$4 r0;
        io.reactivex.Maybe r1;

        r0 := @this: androidx.room.RxRoom$4;

        r1 := @parameter0: io.reactivex.Maybe;

        r0.<androidx.room.RxRoom$4: io.reactivex.Maybe val$maybe> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public io.reactivex.MaybeSource apply(java.lang.Object) throws java.lang.Exception
    {
        androidx.room.RxRoom$4 r0;
        java.lang.Object r1;
        io.reactivex.Maybe $r2;

        r0 := @this: androidx.room.RxRoom$4;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<androidx.room.RxRoom$4: io.reactivex.Maybe val$maybe>;

        return $r2;
    }

    public volatile java.lang.Object apply(java.lang.Object) throws java.lang.Exception
    {
        androidx.room.RxRoom$4 r0;
        java.lang.Object r1;
        io.reactivex.MaybeSource $r2;

        r0 := @this: androidx.room.RxRoom$4;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<androidx.room.RxRoom$4: io.reactivex.MaybeSource apply(java.lang.Object)>(r1);

        return $r2;
    }

androidx.room.RxRoom$5
<androidx.room.RxRoom$5: java.util.concurrent.Callable val$callable>
    void <init>(java.util.concurrent.Callable)
    {
        androidx.room.RxRoom$5 r0;
        java.util.concurrent.Callable r1;

        r0 := @this: androidx.room.RxRoom$5;

        r1 := @parameter0: java.util.concurrent.Callable;

        r0.<androidx.room.RxRoom$5: java.util.concurrent.Callable val$callable> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void subscribe(io.reactivex.SingleEmitter) throws java.lang.Exception
    {
        androidx.room.RxRoom$5 r0;
        io.reactivex.SingleEmitter r1;
        java.util.concurrent.Callable $r2;
        java.lang.Object $r3;

        r0 := @this: androidx.room.RxRoom$5;

        r1 := @parameter0: io.reactivex.SingleEmitter;

        $r2 = r0.<androidx.room.RxRoom$5: java.util.concurrent.Callable val$callable>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.Callable: java.lang.Object call()>();

        interfaceinvoke r1.<io.reactivex.SingleEmitter: void onSuccess(java.lang.Object)>($r3);

        goto label1;

     label1:
        return;
    }

