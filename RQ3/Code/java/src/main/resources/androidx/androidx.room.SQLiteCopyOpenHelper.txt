androidx.room.SQLiteCopyOpenHelper
<androidx.room.SQLiteCopyOpenHelper: android.content.Context context>
<androidx.room.SQLiteCopyOpenHelper: java.lang.String copyFromAssetPath>
<androidx.room.SQLiteCopyOpenHelper: java.io.File copyFromFile>
<androidx.room.SQLiteCopyOpenHelper: java.util.concurrent.Callable copyFromInputStream>
<androidx.room.SQLiteCopyOpenHelper: int databaseVersion>
<androidx.room.SQLiteCopyOpenHelper: androidx.sqlite.db.SupportSQLiteOpenHelper delegate>
<androidx.room.SQLiteCopyOpenHelper: androidx.room.DatabaseConfiguration databaseConfiguration>
<androidx.room.SQLiteCopyOpenHelper: boolean verified>
    public void <init>(android.content.Context, java.lang.String, java.io.File, java.util.concurrent.Callable, int, androidx.sqlite.db.SupportSQLiteOpenHelper)
    {
        androidx.room.SQLiteCopyOpenHelper r0;
        android.content.Context r1;
        java.lang.String r2;
        java.io.File r3;
        java.util.concurrent.Callable r4;
        int i0;
        androidx.sqlite.db.SupportSQLiteOpenHelper r5;

        r0 := @this: androidx.room.SQLiteCopyOpenHelper;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.io.File;

        r4 := @parameter3: java.util.concurrent.Callable;

        i0 := @parameter4: int;

        r5 := @parameter5: androidx.sqlite.db.SupportSQLiteOpenHelper;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "context");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r5, "delegate");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.room.SQLiteCopyOpenHelper: android.content.Context context> = r1;

        r0.<androidx.room.SQLiteCopyOpenHelper: java.lang.String copyFromAssetPath> = r2;

        r0.<androidx.room.SQLiteCopyOpenHelper: java.io.File copyFromFile> = r3;

        r0.<androidx.room.SQLiteCopyOpenHelper: java.util.concurrent.Callable copyFromInputStream> = r4;

        r0.<androidx.room.SQLiteCopyOpenHelper: int databaseVersion> = i0;

        r0.<androidx.room.SQLiteCopyOpenHelper: androidx.sqlite.db.SupportSQLiteOpenHelper delegate> = r5;

        return;
    }

    public androidx.sqlite.db.SupportSQLiteOpenHelper getDelegate()
    {
        androidx.room.SQLiteCopyOpenHelper r0;
        androidx.sqlite.db.SupportSQLiteOpenHelper $r1;

        r0 := @this: androidx.room.SQLiteCopyOpenHelper;

        $r1 = r0.<androidx.room.SQLiteCopyOpenHelper: androidx.sqlite.db.SupportSQLiteOpenHelper delegate>;

        return $r1;
    }

    public java.lang.String getDatabaseName()
    {
        androidx.room.SQLiteCopyOpenHelper r0;
        androidx.sqlite.db.SupportSQLiteOpenHelper $r1;
        java.lang.String $r2;

        r0 := @this: androidx.room.SQLiteCopyOpenHelper;

        $r1 = virtualinvoke r0.<androidx.room.SQLiteCopyOpenHelper: androidx.sqlite.db.SupportSQLiteOpenHelper getDelegate()>();

        $r2 = interfaceinvoke $r1.<androidx.sqlite.db.SupportSQLiteOpenHelper: java.lang.String getDatabaseName()>();

        return $r2;
    }

    public void setWriteAheadLoggingEnabled(boolean)
    {
        androidx.room.SQLiteCopyOpenHelper r0;
        boolean z0;
        androidx.sqlite.db.SupportSQLiteOpenHelper $r1;

        r0 := @this: androidx.room.SQLiteCopyOpenHelper;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<androidx.room.SQLiteCopyOpenHelper: androidx.sqlite.db.SupportSQLiteOpenHelper getDelegate()>();

        interfaceinvoke $r1.<androidx.sqlite.db.SupportSQLiteOpenHelper: void setWriteAheadLoggingEnabled(boolean)>(z0);

        return;
    }

    public androidx.sqlite.db.SupportSQLiteDatabase getWritableDatabase()
    {
        androidx.room.SQLiteCopyOpenHelper r0;
        boolean $z0;
        androidx.sqlite.db.SupportSQLiteOpenHelper $r1;
        androidx.sqlite.db.SupportSQLiteDatabase $r2;

        r0 := @this: androidx.room.SQLiteCopyOpenHelper;

        $z0 = r0.<androidx.room.SQLiteCopyOpenHelper: boolean verified>;

        if $z0 != 0 goto label1;

        specialinvoke r0.<androidx.room.SQLiteCopyOpenHelper: void verifyDatabaseFile(boolean)>(1);

        r0.<androidx.room.SQLiteCopyOpenHelper: boolean verified> = 1;

     label1:
        $r1 = virtualinvoke r0.<androidx.room.SQLiteCopyOpenHelper: androidx.sqlite.db.SupportSQLiteOpenHelper getDelegate()>();

        $r2 = interfaceinvoke $r1.<androidx.sqlite.db.SupportSQLiteOpenHelper: androidx.sqlite.db.SupportSQLiteDatabase getWritableDatabase()>();

        return $r2;
    }

    public androidx.sqlite.db.SupportSQLiteDatabase getReadableDatabase()
    {
        androidx.room.SQLiteCopyOpenHelper r0;
        boolean $z0;
        androidx.sqlite.db.SupportSQLiteOpenHelper $r1;
        androidx.sqlite.db.SupportSQLiteDatabase $r2;

        r0 := @this: androidx.room.SQLiteCopyOpenHelper;

        $z0 = r0.<androidx.room.SQLiteCopyOpenHelper: boolean verified>;

        if $z0 != 0 goto label1;

        specialinvoke r0.<androidx.room.SQLiteCopyOpenHelper: void verifyDatabaseFile(boolean)>(0);

        r0.<androidx.room.SQLiteCopyOpenHelper: boolean verified> = 1;

     label1:
        $r1 = virtualinvoke r0.<androidx.room.SQLiteCopyOpenHelper: androidx.sqlite.db.SupportSQLiteOpenHelper getDelegate()>();

        $r2 = interfaceinvoke $r1.<androidx.sqlite.db.SupportSQLiteOpenHelper: androidx.sqlite.db.SupportSQLiteDatabase getReadableDatabase()>();

        return $r2;
    }

    public synchronized void close()
    {
        androidx.room.SQLiteCopyOpenHelper r0;
        androidx.sqlite.db.SupportSQLiteOpenHelper $r1;

        r0 := @this: androidx.room.SQLiteCopyOpenHelper;

        $r1 = virtualinvoke r0.<androidx.room.SQLiteCopyOpenHelper: androidx.sqlite.db.SupportSQLiteOpenHelper getDelegate()>();

        interfaceinvoke $r1.<androidx.sqlite.db.SupportSQLiteOpenHelper: void close()>();

        r0.<androidx.room.SQLiteCopyOpenHelper: boolean verified> = 0;

        return;
    }

    public final void setDatabaseConfiguration(androidx.room.DatabaseConfiguration)
    {
        androidx.room.SQLiteCopyOpenHelper r0;
        androidx.room.DatabaseConfiguration r1;

        r0 := @this: androidx.room.SQLiteCopyOpenHelper;

        r1 := @parameter0: androidx.room.DatabaseConfiguration;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "databaseConfiguration");

        r0.<androidx.room.SQLiteCopyOpenHelper: androidx.room.DatabaseConfiguration databaseConfiguration> = r1;

        return;
    }

    private final void verifyDatabaseFile(boolean)
    {
        androidx.room.SQLiteCopyOpenHelper r0;
        boolean z0, $z1, $z2, $z3, z4;
        java.lang.String r1, $r5, $r15, $r17, r26;
        java.io.File r2, $r9;
        androidx.sqlite.util.ProcessLock r3, $r7;
        java.lang.Throwable r4, $r18, $r19, $r20, $r22, $r23, $r24, $r25, r28, r30, r31;
        android.content.Context $r6, $r8, $r10;
        int $i0, $i1, i5, i6;
        java.lang.StringBuilder $r11, $r12, $r13, $r14;
        java.lang.IllegalStateException $r16;
        java.lang.RuntimeException $r21;
        androidx.room.DatabaseConfiguration $r27, $r29;

        r0 := @this: androidx.room.SQLiteCopyOpenHelper;

        z0 := @parameter0: boolean;

        $r5 = virtualinvoke r0.<androidx.room.SQLiteCopyOpenHelper: java.lang.String getDatabaseName()>();

        if $r5 != null goto label01;

        r26 = "Required value was null.";

        $r16 = new java.lang.IllegalStateException;

        $r17 = virtualinvoke r26.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r17);

        throw $r16;

     label01:
        r1 = $r5;

        $r6 = r0.<androidx.room.SQLiteCopyOpenHelper: android.content.Context context>;

        r2 = virtualinvoke $r6.<android.content.Context: java.io.File getDatabasePath(java.lang.String)>(r1);

        $r27 = r0.<androidx.room.SQLiteCopyOpenHelper: androidx.room.DatabaseConfiguration databaseConfiguration>;

        if $r27 != null goto label02;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void throwUninitializedPropertyAccessException(java.lang.String)>("databaseConfiguration");

        $r27 = null;

     label02:
        z4 = $r27.<androidx.room.DatabaseConfiguration: boolean multiInstanceInvalidation>;

        $r7 = new androidx.sqlite.util.ProcessLock;

        $r8 = r0.<androidx.room.SQLiteCopyOpenHelper: android.content.Context context>;

        $r9 = virtualinvoke $r8.<android.content.Context: java.io.File getFilesDir()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r9, "context.filesDir");

        specialinvoke $r7.<androidx.sqlite.util.ProcessLock: void <init>(java.lang.String,java.io.File,boolean)>(r1, $r9, z4);

        r3 = $r7;

     label03:
        staticinvoke <androidx.sqlite.util.ProcessLock: void lock$default(androidx.sqlite.util.ProcessLock,boolean,int,java.lang.Object)>(r3, 0, 1, null);

        $z1 = virtualinvoke r2.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label07;

     label04:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r2, "databaseFile");

        specialinvoke r0.<androidx.room.SQLiteCopyOpenHelper: void copyDatabaseFile(java.io.File,boolean)>(r2, z0);

     label05:
        virtualinvoke r3.<androidx.sqlite.util.ProcessLock: void unlock()>();

        return;

     label06:
        $r20 := @caughtexception;

        r28 = $r20;

        $r21 = new java.lang.RuntimeException;

        $r22 = (java.lang.Throwable) r28;

        specialinvoke $r21.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to copy database file.", $r22);

        throw $r21;

     label07:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r2, "databaseFile");

        i5 = staticinvoke <androidx.room.util.DBUtil: int readVersion(java.io.File)>(r2);

     label08:
        goto label11;

     label09:
        $r18 := @caughtexception;

        r4 = $r18;

        $r19 = (java.lang.Throwable) r4;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ROOM", "Unable to read database version.", $r19);

     label10:
        virtualinvoke r3.<androidx.sqlite.util.ProcessLock: void unlock()>();

        return;

     label11:
        i6 = i5;

        $i0 = r0.<androidx.room.SQLiteCopyOpenHelper: int databaseVersion>;

        if i6 != $i0 goto label13;

     label12:
        virtualinvoke r3.<androidx.sqlite.util.ProcessLock: void unlock()>();

        return;

     label13:
        $r29 = r0.<androidx.room.SQLiteCopyOpenHelper: androidx.room.DatabaseConfiguration databaseConfiguration>;

        if $r29 != null goto label14;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void throwUninitializedPropertyAccessException(java.lang.String)>("databaseConfiguration");

        $r29 = null;

     label14:
        $i1 = r0.<androidx.room.SQLiteCopyOpenHelper: int databaseVersion>;

        $z2 = virtualinvoke $r29.<androidx.room.DatabaseConfiguration: boolean isMigrationRequired(int,int)>(i6, $i1);

        if $z2 == 0 goto label16;

     label15:
        virtualinvoke r3.<androidx.sqlite.util.ProcessLock: void unlock()>();

        return;

     label16:
        $r10 = r0.<androidx.room.SQLiteCopyOpenHelper: android.content.Context context>;

        $z3 = virtualinvoke $r10.<android.content.Context: boolean deleteDatabase(java.lang.String)>(r1);

        if $z3 == 0 goto label20;

     label17:
        specialinvoke r0.<androidx.room.SQLiteCopyOpenHelper: void copyDatabaseFile(java.io.File,boolean)>(r2, z0);

     label18:
        goto label21;

     label19:
        $r23 := @caughtexception;

        r30 = $r23;

        $r24 = (java.lang.Throwable) r30;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ROOM", "Unable to copy database file.", $r24);

        goto label21;

     label20:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to delete database file (");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") for a copy destructive migration.");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("ROOM", $r15);

     label21:
        virtualinvoke r3.<androidx.sqlite.util.ProcessLock: void unlock()>();

        goto label24;

     label22:
        $r25 := @caughtexception;

        r31 = $r25;

     label23:
        virtualinvoke r3.<androidx.sqlite.util.ProcessLock: void unlock()>();

        throw r31;

     label24:
        return;

        catch java.io.IOException from label04 to label05 with label06;
        catch java.io.IOException from label07 to label08 with label09;
        catch java.io.IOException from label17 to label18 with label19;
        catch java.lang.Throwable from label03 to label05 with label22;
        catch java.lang.Throwable from label06 to label10 with label22;
        catch java.lang.Throwable from label11 to label12 with label22;
        catch java.lang.Throwable from label13 to label15 with label22;
        catch java.lang.Throwable from label16 to label21 with label22;
        catch java.lang.Throwable from label22 to label23 with label22;
    }

    private final void copyDatabaseFile(java.io.File, boolean) throws java.io.IOException
    {
        androidx.room.SQLiteCopyOpenHelper r0;
        java.io.File r1, $r3, $r26, $r41, r42, r45;
        boolean z0, $z1, $z2, $z3;
        java.lang.String $r2, $r12, $r15, $r18, $r22, $r24, $r30;
        java.util.concurrent.Callable $r4, $r6;
        java.lang.IllegalStateException $r5;
        java.lang.Object $r7;
        java.nio.channels.ReadableByteChannel $r8, $r32, r36;
        java.io.IOException $r9, $r19, $r34;
        java.lang.StringBuilder $r10, $r11, $r13, $r14, $r16, $r17, $r20, $r21, $r23;
        java.io.FileInputStream $r25;
        java.nio.channels.FileChannel $r27, r44;
        android.content.Context $r28, $r40;
        android.content.res.AssetManager $r29;
        java.io.InputStream $r31, r37, r39;
        java.lang.Throwable $r33, $r35, r38;
        java.io.FileOutputStream $r43;

        r0 := @this: androidx.room.SQLiteCopyOpenHelper;

        r1 := @parameter0: java.io.File;

        z0 := @parameter1: boolean;

        $r2 = r0.<androidx.room.SQLiteCopyOpenHelper: java.lang.String copyFromAssetPath>;

        if $r2 == null goto label01;

        $r28 = r0.<androidx.room.SQLiteCopyOpenHelper: android.content.Context context>;

        $r29 = virtualinvoke $r28.<android.content.Context: android.content.res.AssetManager getAssets()>();

        $r30 = r0.<androidx.room.SQLiteCopyOpenHelper: java.lang.String copyFromAssetPath>;

        $r31 = virtualinvoke $r29.<android.content.res.AssetManager: java.io.InputStream open(java.lang.String)>($r30);

        $r32 = staticinvoke <java.nio.channels.Channels: java.nio.channels.ReadableByteChannel newChannel(java.io.InputStream)>($r31);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r32, "newChannel(context.assets.open(copyFromAssetPath))");

        r36 = $r32;

        goto label08;

     label01:
        $r3 = r0.<androidx.room.SQLiteCopyOpenHelper: java.io.File copyFromFile>;

        if $r3 == null goto label02;

        $r25 = new java.io.FileInputStream;

        $r26 = r0.<androidx.room.SQLiteCopyOpenHelper: java.io.File copyFromFile>;

        specialinvoke $r25.<java.io.FileInputStream: void <init>(java.io.File)>($r26);

        $r27 = virtualinvoke $r25.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r27, "FileInputStream(copyFromFile).channel");

        r36 = (java.nio.channels.ReadableByteChannel) $r27;

        goto label08;

     label02:
        $r4 = r0.<androidx.room.SQLiteCopyOpenHelper: java.util.concurrent.Callable copyFromInputStream>;

        if $r4 == null goto label07;

     label03:
        $r6 = r0.<androidx.room.SQLiteCopyOpenHelper: java.util.concurrent.Callable copyFromInputStream>;

        $r7 = interfaceinvoke $r6.<java.util.concurrent.Callable: java.lang.Object call()>();

        r37 = (java.io.InputStream) $r7;

     label04:
        goto label06;

     label05:
        $r33 := @caughtexception;

        r38 = $r33;

        $r34 = new java.io.IOException;

        $r35 = (java.lang.Throwable) r38;

        specialinvoke $r34.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>("inputStreamCallable exception on call", $r35);

        throw $r34;

     label06:
        r39 = r37;

        $r8 = staticinvoke <java.nio.channels.Channels: java.nio.channels.ReadableByteChannel newChannel(java.io.InputStream)>(r39);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r8, "newChannel(inputStream)");

        r36 = $r8;

        goto label08;

     label07:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("copyFromAssetPath, copyFromFile and copyFromInputStream are all null!");

        throw $r5;

     label08:
        $r40 = r0.<androidx.room.SQLiteCopyOpenHelper: android.content.Context context>;

        $r41 = virtualinvoke $r40.<android.content.Context: java.io.File getCacheDir()>();

        r42 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>("room-copy-helper", ".tmp", $r41);

        virtualinvoke r42.<java.io.File: void deleteOnExit()>();

        $r43 = new java.io.FileOutputStream;

        specialinvoke $r43.<java.io.FileOutputStream: void <init>(java.io.File)>(r42);

        r44 = virtualinvoke $r43.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r44, "output");

        staticinvoke <androidx.room.util.FileUtil: void copy(java.nio.channels.ReadableByteChannel,java.nio.channels.FileChannel)>(r36, r44);

        r45 = virtualinvoke r1.<java.io.File: java.io.File getParentFile()>();

        if r45 == null goto label09;

        $z1 = virtualinvoke r45.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label09;

        $z2 = virtualinvoke r45.<java.io.File: boolean mkdirs()>();

        if $z2 != 0 goto label09;

        $r19 = new java.io.IOException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to create directories for ");

        $r22 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.io.IOException: void <init>(java.lang.String)>($r24);

        throw $r19;

     label09:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r42, "intermediateFile");

        specialinvoke r0.<androidx.room.SQLiteCopyOpenHelper: void dispatchOnOpenPrepackagedDatabase(java.io.File,boolean)>(r42, z0);

        $z3 = virtualinvoke r42.<java.io.File: boolean renameTo(java.io.File)>(r1);

        if $z3 != 0 goto label10;

        $r9 = new java.io.IOException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to move intermediate file (");

        $r12 = virtualinvoke r42.<java.io.File: java.lang.String getAbsolutePath()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") to destination (");

        $r15 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>($r18);

        throw $r9;

     label10:
        return;

        catch java.lang.Exception from label03 to label04 with label05;
    }

    private final void dispatchOnOpenPrepackagedDatabase(java.io.File, boolean)
    {
        androidx.room.SQLiteCopyOpenHelper r0;
        java.io.File r1;
        boolean z0;
        java.io.Closeable r2;
        androidx.sqlite.db.SupportSQLiteDatabase r3, $r11;
        androidx.room.RoomDatabase$PrepackagedDatabaseCallback $r4, $r6;
        androidx.sqlite.db.SupportSQLiteOpenHelper $r5, r10;
        java.lang.Throwable $r7, $r8, r14, r15, r16;
        androidx.room.DatabaseConfiguration $r9, $r12;
        kotlin.Unit r13;

        r0 := @this: androidx.room.SQLiteCopyOpenHelper;

        r1 := @parameter0: java.io.File;

        z0 := @parameter1: boolean;

        $r9 = r0.<androidx.room.SQLiteCopyOpenHelper: androidx.room.DatabaseConfiguration databaseConfiguration>;

        if $r9 != null goto label01;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void throwUninitializedPropertyAccessException(java.lang.String)>("databaseConfiguration");

        $r9 = null;

     label01:
        $r4 = $r9.<androidx.room.DatabaseConfiguration: androidx.room.RoomDatabase$PrepackagedDatabaseCallback prepackagedDatabaseCallback>;

        if $r4 != null goto label02;

        return;

     label02:
        $r5 = specialinvoke r0.<androidx.room.SQLiteCopyOpenHelper: androidx.sqlite.db.SupportSQLiteOpenHelper createFrameworkOpenHelper(java.io.File)>(r1);

        r2 = (java.io.Closeable) $r5;

     label03:
        r10 = (androidx.sqlite.db.SupportSQLiteOpenHelper) r2;

        if z0 == 0 goto label04;

        $r11 = interfaceinvoke r10.<androidx.sqlite.db.SupportSQLiteOpenHelper: androidx.sqlite.db.SupportSQLiteDatabase getWritableDatabase()>();

        goto label05;

     label04:
        $r11 = interfaceinvoke r10.<androidx.sqlite.db.SupportSQLiteOpenHelper: androidx.sqlite.db.SupportSQLiteDatabase getReadableDatabase()>();

     label05:
        r3 = $r11;

        $r12 = r0.<androidx.room.SQLiteCopyOpenHelper: androidx.room.DatabaseConfiguration databaseConfiguration>;

        if $r12 != null goto label06;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void throwUninitializedPropertyAccessException(java.lang.String)>("databaseConfiguration");

        $r12 = null;

     label06:
        $r6 = $r12.<androidx.room.DatabaseConfiguration: androidx.room.RoomDatabase$PrepackagedDatabaseCallback prepackagedDatabaseCallback>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r6);

        virtualinvoke $r6.<androidx.room.RoomDatabase$PrepackagedDatabaseCallback: void onOpenPrepackagedDatabase(androidx.sqlite.db.SupportSQLiteDatabase)>(r3);

        r13 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label07:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r2, null);

        goto label11;

     label08:
        $r8 := @caughtexception;

        r14 = $r8;

        r15 = r14;

        throw r14;

     label09:
        $r7 := @caughtexception;

        r16 = $r7;

     label10:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r2, r15);

        throw r16;

     label11:
        return;

        catch java.lang.Throwable from label03 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private final androidx.sqlite.db.SupportSQLiteOpenHelper createFrameworkOpenHelper(java.io.File)
    {
        androidx.room.SQLiteCopyOpenHelper r0;
        java.io.File r1;
        int i0, i1, i2;
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelperFactory $r2, r16;
        android.content.Context $r3;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Companion $r4;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder $r5, $r7, $r10;
        java.lang.String $r6;
        androidx.room.SQLiteCopyOpenHelper$createFrameworkOpenHelper$configuration$1 $r8;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Callback $r9;
        androidx.sqlite.db.SupportSQLiteOpenHelper $r11;
        java.lang.Throwable $r12, $r14, r15;
        java.lang.RuntimeException $r13;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration r17;

        r0 := @this: androidx.room.SQLiteCopyOpenHelper;

        r1 := @parameter0: java.io.File;

     label1:
        i2 = staticinvoke <androidx.room.util.DBUtil: int readVersion(java.io.File)>(r1);

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

        r15 = $r12;

        $r13 = new java.lang.RuntimeException;

        $r14 = (java.lang.Throwable) r15;

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Malformed database file, unable to read version.", $r14);

        throw $r13;

     label4:
        i0 = i2;

        $r2 = new androidx.sqlite.db.framework.FrameworkSQLiteOpenHelperFactory;

        specialinvoke $r2.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelperFactory: void <init>()>();

        r16 = $r2;

        $r4 = <androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration: androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Companion Companion>;

        $r3 = r0.<androidx.room.SQLiteCopyOpenHelper: android.content.Context context>;

        $r5 = virtualinvoke $r4.<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Companion: androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder builder(android.content.Context)>($r3);

        $r6 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r7 = virtualinvoke $r5.<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder: androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder name(java.lang.String)>($r6);

        i1 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtLeast(int,int)>(i0, 1);

        $r8 = new androidx.room.SQLiteCopyOpenHelper$createFrameworkOpenHelper$configuration$1;

        specialinvoke $r8.<androidx.room.SQLiteCopyOpenHelper$createFrameworkOpenHelper$configuration$1: void <init>(int,int)>(i0, i1);

        $r9 = (androidx.sqlite.db.SupportSQLiteOpenHelper$Callback) $r8;

        $r10 = virtualinvoke $r7.<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder: androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder callback(androidx.sqlite.db.SupportSQLiteOpenHelper$Callback)>($r9);

        r17 = virtualinvoke $r10.<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder: androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration build()>();

        $r11 = virtualinvoke r16.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelperFactory: androidx.sqlite.db.SupportSQLiteOpenHelper create(androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration)>(r17);

        return $r11;

        catch java.io.IOException from label1 to label2 with label3;
    }

androidx.room.SQLiteCopyOpenHelper$createFrameworkOpenHelper$configuration$1
<androidx.room.SQLiteCopyOpenHelper$createFrameworkOpenHelper$configuration$1: int $version>
    void <init>(int, int)
    {
        androidx.room.SQLiteCopyOpenHelper$createFrameworkOpenHelper$configuration$1 r0;
        int $i0, $i1;

        r0 := @this: androidx.room.SQLiteCopyOpenHelper$createFrameworkOpenHelper$configuration$1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        r0.<androidx.room.SQLiteCopyOpenHelper$createFrameworkOpenHelper$configuration$1: int $version> = $i0;

        specialinvoke r0.<androidx.sqlite.db.SupportSQLiteOpenHelper$Callback: void <init>(int)>($i1);

        return;
    }

    public void onCreate(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.SQLiteCopyOpenHelper$createFrameworkOpenHelper$configuration$1 r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;

        r0 := @this: androidx.room.SQLiteCopyOpenHelper$createFrameworkOpenHelper$configuration$1;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "db");

        return;
    }

    public void onUpgrade(androidx.sqlite.db.SupportSQLiteDatabase, int, int)
    {
        androidx.room.SQLiteCopyOpenHelper$createFrameworkOpenHelper$configuration$1 r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        int i0, i1;

        r0 := @this: androidx.room.SQLiteCopyOpenHelper$createFrameworkOpenHelper$configuration$1;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "db");

        return;
    }

    public void onOpen(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.SQLiteCopyOpenHelper$createFrameworkOpenHelper$configuration$1 r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        int $i0, $i1;

        r0 := @this: androidx.room.SQLiteCopyOpenHelper$createFrameworkOpenHelper$configuration$1;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "db");

        $i0 = r0.<androidx.room.SQLiteCopyOpenHelper$createFrameworkOpenHelper$configuration$1: int $version>;

        if $i0 >= 1 goto label1;

        $i1 = r0.<androidx.room.SQLiteCopyOpenHelper$createFrameworkOpenHelper$configuration$1: int $version>;

        interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: void setVersion(int)>($i1);

     label1:
        return;
    }

