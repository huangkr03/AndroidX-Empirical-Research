org.junit.internal.management.ManagementFactory
    public static org.junit.internal.management.ThreadMXBean getThreadMXBean()
    {
        org.junit.internal.management.ThreadMXBean $r0;

        $r0 = staticinvoke <org.junit.internal.management.ManagementFactory$ThreadHolder: org.junit.internal.management.ThreadMXBean access$100()>();

        return $r0;
    }

org.junit.internal.management.ManagementFactory$FactoryHolder
<org.junit.internal.management.ManagementFactory$FactoryHolder: java.lang.Class MANAGEMENT_FACTORY_CLASS>
    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        java.lang.Throwable $r2;

        $r1 = null;

     label1:
        $r0 = staticinvoke <org.junit.internal.Classes: java.lang.Class getClass(java.lang.String)>("java.lang.management.ManagementFactory");

     label2:
        $r1 = $r0;

     label3:
        <org.junit.internal.management.ManagementFactory$FactoryHolder: java.lang.Class MANAGEMENT_FACTORY_CLASS> = $r1;

        return;

     label4:
        $r2 := @caughtexception;

        goto label3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label4;
    }

    static java.lang.Object getBeanObject(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.Class $r1;
        java.lang.Class[] $r2;
        java.lang.reflect.Method $r3;
        java.lang.Object[] $r4;
        java.lang.Object $r5;
        java.lang.Throwable $r6, $r7, $r8, $r9, $r10;

        $r0 := @parameter0: java.lang.String;

        $r1 = <org.junit.internal.management.ManagementFactory$FactoryHolder: java.lang.Class MANAGEMENT_FACTORY_CLASS>;

        if $r1 == null goto label10;

        $r1 = <org.junit.internal.management.ManagementFactory$FactoryHolder: java.lang.Class MANAGEMENT_FACTORY_CLASS>;

        $r2 = newarray (java.lang.Class)[0];

     label01:
        $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>($r0, $r2);

     label02:
        $r4 = newarray (java.lang.Object)[0];

     label03:
        $r5 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r4);

     label04:
        return $r5;

     label05:
        $r6 := @caughtexception;

        return null;

     label06:
        $r7 := @caughtexception;

        return null;

     label07:
        $r8 := @caughtexception;

        return null;

     label08:
        $r9 := @caughtexception;

        return null;

     label09:
        $r10 := @caughtexception;

     label10:
        return null;

        catch java.lang.IllegalAccessException from label01 to label02 with label09;
        catch java.lang.IllegalAccessException from label03 to label04 with label09;
        catch java.lang.IllegalArgumentException from label01 to label02 with label08;
        catch java.lang.IllegalArgumentException from label03 to label04 with label08;
        catch java.lang.reflect.InvocationTargetException from label01 to label02 with label07;
        catch java.lang.reflect.InvocationTargetException from label03 to label04 with label07;
        catch java.lang.NoSuchMethodException from label01 to label02 with label06;
        catch java.lang.NoSuchMethodException from label03 to label04 with label06;
        catch java.lang.SecurityException from label01 to label02 with label05;
        catch java.lang.SecurityException from label03 to label04 with label05;
    }

org.junit.internal.management.ManagementFactory$ThreadHolder
<org.junit.internal.management.ManagementFactory$ThreadHolder: org.junit.internal.management.ThreadMXBean THREAD_MX_BEAN>
    static void <clinit>()
    {
        java.lang.Object $r0;
        org.junit.internal.management.ThreadMXBean $r1;

        $r0 = staticinvoke <org.junit.internal.management.ManagementFactory$FactoryHolder: java.lang.Object getBeanObject(java.lang.String)>("getThreadMXBean");

        $r1 = staticinvoke <org.junit.internal.management.ManagementFactory$ThreadHolder: org.junit.internal.management.ThreadMXBean getBean(java.lang.Object)>($r0);

        <org.junit.internal.management.ManagementFactory$ThreadHolder: org.junit.internal.management.ThreadMXBean THREAD_MX_BEAN> = $r1;

        return;
    }

    static org.junit.internal.management.ThreadMXBean access$100()
    {
        org.junit.internal.management.ThreadMXBean r0;

        r0 = <org.junit.internal.management.ManagementFactory$ThreadHolder: org.junit.internal.management.ThreadMXBean THREAD_MX_BEAN>;

        return r0;
    }

    private static final org.junit.internal.management.ThreadMXBean getBean(java.lang.Object)
    {
        java.lang.Object $r0;
        org.junit.internal.management.ReflectiveThreadMXBean $r1;
        org.junit.internal.management.FakeThreadMXBean $r2;

        $r0 := @parameter0: java.lang.Object;

        if $r0 == null goto label1;

        $r1 = new org.junit.internal.management.ReflectiveThreadMXBean;

        specialinvoke $r1.<org.junit.internal.management.ReflectiveThreadMXBean: void <init>(java.lang.Object)>($r0);

        return $r1;

     label1:
        $r2 = new org.junit.internal.management.FakeThreadMXBean;

        specialinvoke $r2.<org.junit.internal.management.FakeThreadMXBean: void <init>()>();

        return $r2;
    }

