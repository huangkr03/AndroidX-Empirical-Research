androidx.compose.runtime.SlotTableKt
<androidx.compose.runtime.SlotTableKt: int parentAnchorPivot>
<androidx.compose.runtime.SlotTableKt: int Key_Offset>
<androidx.compose.runtime.SlotTableKt: int GroupInfo_Offset>
<androidx.compose.runtime.SlotTableKt: int ParentAnchor_Offset>
<androidx.compose.runtime.SlotTableKt: int Size_Offset>
<androidx.compose.runtime.SlotTableKt: int DataAnchor_Offset>
<androidx.compose.runtime.SlotTableKt: int Group_Fields_Size>
<androidx.compose.runtime.SlotTableKt: int NodeBit_Mask>
<androidx.compose.runtime.SlotTableKt: int ObjectKey_Mask>
<androidx.compose.runtime.SlotTableKt: int ObjectKey_Shift>
<androidx.compose.runtime.SlotTableKt: int Aux_Mask>
<androidx.compose.runtime.SlotTableKt: int Aux_Shift>
<androidx.compose.runtime.SlotTableKt: int Mark_Mask>
<androidx.compose.runtime.SlotTableKt: int ContainsMark_Mask>
<androidx.compose.runtime.SlotTableKt: int Slots_Shift>
<androidx.compose.runtime.SlotTableKt: int NodeCount_Mask>
<androidx.compose.runtime.SlotTableKt: int MinGroupGrowthSize>
<androidx.compose.runtime.SlotTableKt: int MinSlotsGrowthSize>
<androidx.compose.runtime.SlotTableKt: int NodeKey>
    private static final int groupInfo(int[], int)
    {
        int[] $r0;
        int i0, $i1, $i2, $i3;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $i1 = i0 * 5;

        $i2 = $i1 + 1;

        $i3 = $r0[$i2];

        return $i3;
    }

    private static final boolean isNode(int[], int)
    {
        int[] $r0;
        int i0, $i1, $i2, $i3, $i4;
        boolean $z0;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $i1 = i0 * 5;

        $i2 = $i1 + 1;

        $i3 = $r0[$i2];

        $i4 = $i3 & 1073741824;

        if $i4 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static final int nodeIndex(int[], int)
    {
        int[] $r0;
        int i0, $i1, $i2, $i3;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $i1 = i0 * 5;

        $i2 = $i1 + 4;

        $i3 = $r0[$i2];

        return $i3;
    }

    private static final boolean hasObjectKey(int[], int)
    {
        int[] $r0;
        int i0, $i1, $i2, $i3, $i4;
        boolean $z0;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $i1 = i0 * 5;

        $i2 = $i1 + 1;

        $i3 = $r0[$i2];

        $i4 = $i3 & 536870912;

        if $i4 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static final int objectKeyIndex(int[], int)
    {
        int[] $r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 = i0 * 5;

        $i2 = i1 + 4;

        $i6 = $r0[$i2];

        $i3 = i1 + 1;

        $i4 = $r0[$i3];

        $i5 = $i4 >> 30;

        $i7 = staticinvoke <androidx.compose.runtime.SlotTableKt: int countOneBits(int)>($i5);

        $i8 = $i6 + $i7;

        return $i8;
    }

    private static final boolean hasAux(int[], int)
    {
        int[] $r0;
        int i0, $i1, $i2, $i3, $i4;
        boolean $z0;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $i1 = i0 * 5;

        $i2 = $i1 + 1;

        $i3 = $r0[$i2];

        $i4 = $i3 & 268435456;

        if $i4 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static final void addAux(int[], int)
    {
        int[] $r0;
        int i0, i1, $i2, $i3, $i4;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $i2 = i0 * 5;

        i1 = $i2 + 1;

        $i3 = $r0[i1];

        $i4 = $i3 | 268435456;

        $r0[i1] = $i4;

        return;
    }

    private static final boolean hasMark(int[], int)
    {
        int[] $r0;
        int i0, $i1, $i2, $i3, $i4;
        boolean $z0;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $i1 = i0 * 5;

        $i2 = $i1 + 1;

        $i3 = $r0[$i2];

        $i4 = $i3 & 134217728;

        if $i4 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static final void updateMark(int[], int, boolean)
    {
        int[] $r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        boolean z0;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $i2 = i0 * 5;

        i1 = $i2 + 1;

        if z0 == 0 goto label1;

        $i5 = $r0[i1];

        $i6 = $i5 | 134217728;

        $r0[i1] = $i6;

        goto label2;

     label1:
        $i3 = $r0[i1];

        $i4 = $i3 & -134217729;

        $r0[i1] = $i4;

     label2:
        return;
    }

    private static final boolean containsMark(int[], int)
    {
        int[] $r0;
        int i0, $i1, $i2, $i3, $i4;
        boolean $z0;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $i1 = i0 * 5;

        $i2 = $i1 + 1;

        $i3 = $r0[$i2];

        $i4 = $i3 & 67108864;

        if $i4 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static final void updateContainsMark(int[], int, boolean)
    {
        int[] $r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        boolean z0;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $i2 = i0 * 5;

        i1 = $i2 + 1;

        if z0 == 0 goto label1;

        $i5 = $r0[i1];

        $i6 = $i5 | 67108864;

        $r0[i1] = $i6;

        goto label2;

     label1:
        $i3 = $r0[i1];

        $i4 = $i3 & -67108865;

        $r0[i1] = $i4;

     label2:
        return;
    }

    private static final boolean containsAnyMark(int[], int)
    {
        int[] $r0;
        int i0, $i1, $i2, $i3, $i4;
        boolean $z0;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $i1 = i0 * 5;

        $i2 = $i1 + 1;

        $i3 = $r0[$i2];

        $i4 = $i3 & 201326592;

        if $i4 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static final int auxIndex(int[], int)
    {
        int[] $r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 = i0 * 5;

        $i2 = lengthof $r0;

        if i1 < $i2 goto label1;

        $i9 = lengthof $r0;

        goto label2;

     label1:
        $i3 = i1 + 4;

        $i7 = $r0[$i3];

        $i4 = i1 + 1;

        $i5 = $r0[$i4];

        $i6 = $i5 >> 29;

        $i8 = staticinvoke <androidx.compose.runtime.SlotTableKt: int countOneBits(int)>($i6);

        $i9 = $i7 + $i8;

     label2:
        return $i9;
    }

    private static final int slotAnchor(int[], int)
    {
        int[] $r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 = i0 * 5;

        $i2 = i1 + 4;

        $i6 = $r0[$i2];

        $i3 = i1 + 1;

        $i4 = $r0[$i3];

        $i5 = $i4 >> 28;

        $i7 = staticinvoke <androidx.compose.runtime.SlotTableKt: int countOneBits(int)>($i5);

        $i8 = $i6 + $i7;

        return $i8;
    }

    private static final int countOneBits(int)
    {
        int i0;
        byte $b1;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            case 5: goto label6;
            case 6: goto label7;
            default: goto label8;
        };

     label1:
        $b1 = 0;

        goto label9;

     label2:
        $b1 = 1;

        goto label9;

     label3:
        $b1 = 1;

        goto label9;

     label4:
        $b1 = 2;

        goto label9;

     label5:
        $b1 = 1;

        goto label9;

     label6:
        $b1 = 2;

        goto label9;

     label7:
        $b1 = 2;

        goto label9;

     label8:
        $b1 = 3;

     label9:
        return $b1;
    }

    private static final int key(int[], int)
    {
        int[] $r0;
        int i0, $i1, $i2;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $i1 = i0 * 5;

        $i2 = $r0[$i1];

        return $i2;
    }

    private static final java.util.List keys(int[], int)
    {
        int[] $r0;
        int i0;
        kotlin.ranges.IntRange $r1;
        kotlin.ranges.IntProgression $r2, $r3;
        java.lang.Iterable $r4;
        java.util.List $r5;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $r1 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntRange until(int,int)>(0, i0);

        $r2 = (kotlin.ranges.IntProgression) $r1;

        $r3 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntProgression step(kotlin.ranges.IntProgression,int)>($r2, 5);

        $r4 = (java.lang.Iterable) $r3;

        $r5 = staticinvoke <androidx.compose.runtime.SlotTableKt: java.util.List slice(int[],java.lang.Iterable)>($r0, $r4);

        return $r5;
    }

    static java.util.List keys$default(int[], int, int, java.lang.Object)
    {
        int[] r0;
        int i0, $i1, i2;
        java.lang.Object r1;
        java.util.List $r2;

        r0 := @parameter0: int[];

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        i2 = lengthof r0;

     label1:
        $r2 = staticinvoke <androidx.compose.runtime.SlotTableKt: java.util.List keys(int[],int)>(r0, i2);

        return $r2;
    }

    private static final int nodeCount(int[], int)
    {
        int[] $r0;
        int i0, $i1, $i2, $i3, $i4;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $i1 = i0 * 5;

        $i2 = $i1 + 1;

        $i3 = $r0[$i2];

        $i4 = $i3 & 67108863;

        return $i4;
    }

    private static final void updateNodeCount(int[], int, int)
    {
        int[] $r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        boolean $z0;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i1 < 0 goto label1;

        if i1 >= 67108863 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.compose.runtime.ComposerKt: void runtimeCheck(boolean)>($z0);

        $i2 = i0 * 5;

        $i3 = $i2 + 1;

        $i4 = i0 * 5;

        $i5 = $i4 + 1;

        $i6 = $r0[$i5];

        $i7 = $i6 & -67108864;

        $i8 = $i7 | i1;

        $r0[$i3] = $i8;

        return;
    }

    private static final java.util.List nodeCounts(int[], int)
    {
        int[] $r0;
        int i0, i1, i2, $i3, $i4, i5;
        java.util.List $r1, $r12;
        java.util.ArrayList r2, $r11;
        java.lang.Object r4, r5;
        java.util.Collection r6;
        kotlin.ranges.IntRange $r7;
        kotlin.ranges.IntProgression $r8, $r9;
        java.lang.Iterable $r10;
        java.lang.Number $r13;
        java.lang.Integer $r14;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $r7 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntRange until(int,int)>(1, i0);

        $r8 = (kotlin.ranges.IntProgression) $r7;

        $r9 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntProgression step(kotlin.ranges.IntProgression,int)>($r8, 5);

        $r10 = (java.lang.Iterable) $r9;

        $r1 = staticinvoke <androidx.compose.runtime.SlotTableKt: java.util.List slice(int[],java.lang.Iterable)>($r0, $r10);

        $r11 = new java.util.ArrayList;

        $i3 = interfaceinvoke $r1.<java.util.List: int size()>();

        specialinvoke $r11.<java.util.ArrayList: void <init>(int)>($i3);

        r2 = $r11;

        i5 = 0;

        i1 = interfaceinvoke $r1.<java.util.List: int size()>();

     label1:
        if i5 >= i1 goto label2;

        r4 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i5);

        r5 = r4;

        $r13 = (java.lang.Number) r5;

        i2 = virtualinvoke $r13.<java.lang.Number: int intValue()>();

        r6 = (java.util.Collection) r2;

        $i4 = i2 & 67108863;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        interfaceinvoke r6.<java.util.Collection: boolean add(java.lang.Object)>($r14);

        i5 = i5 + 1;

        goto label1;

     label2:
        $r12 = (java.util.List) r2;

        return $r12;
    }

    static java.util.List nodeCounts$default(int[], int, int, java.lang.Object)
    {
        int[] r0;
        int i0, $i1, i2;
        java.lang.Object r1;
        java.util.List $r2;

        r0 := @parameter0: int[];

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        i2 = lengthof r0;

     label1:
        $r2 = staticinvoke <androidx.compose.runtime.SlotTableKt: java.util.List nodeCounts(int[],int)>(r0, i2);

        return $r2;
    }

    private static final int parentAnchor(int[], int)
    {
        int[] $r0;
        int i0, $i1, $i2, $i3;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $i1 = i0 * 5;

        $i2 = $i1 + 2;

        $i3 = $r0[$i2];

        return $i3;
    }

    private static final void updateParentAnchor(int[], int, int)
    {
        int[] $r0;
        int i0, i1, $i2, $i3;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = i0 * 5;

        $i3 = $i2 + 2;

        $r0[$i3] = i1;

        return;
    }

    private static final java.util.List parentAnchors(int[], int)
    {
        int[] $r0;
        int i0;
        kotlin.ranges.IntRange $r1;
        kotlin.ranges.IntProgression $r2, $r3;
        java.lang.Iterable $r4;
        java.util.List $r5;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $r1 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntRange until(int,int)>(2, i0);

        $r2 = (kotlin.ranges.IntProgression) $r1;

        $r3 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntProgression step(kotlin.ranges.IntProgression,int)>($r2, 5);

        $r4 = (java.lang.Iterable) $r3;

        $r5 = staticinvoke <androidx.compose.runtime.SlotTableKt: java.util.List slice(int[],java.lang.Iterable)>($r0, $r4);

        return $r5;
    }

    static java.util.List parentAnchors$default(int[], int, int, java.lang.Object)
    {
        int[] r0;
        int i0, $i1, i2;
        java.lang.Object r1;
        java.util.List $r2;

        r0 := @parameter0: int[];

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        i2 = lengthof r0;

     label1:
        $r2 = staticinvoke <androidx.compose.runtime.SlotTableKt: java.util.List parentAnchors(int[],int)>(r0, i2);

        return $r2;
    }

    private static final int groupSize(int[], int)
    {
        int[] $r0;
        int i0, $i1, $i2, $i3;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $i1 = i0 * 5;

        $i2 = $i1 + 3;

        $i3 = $r0[$i2];

        return $i3;
    }

    private static final void updateGroupSize(int[], int, int)
    {
        int[] $r0;
        int i0, i1, $i2, $i3;
        boolean $z0;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i1 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.compose.runtime.ComposerKt: void runtimeCheck(boolean)>($z0);

        $i2 = i0 * 5;

        $i3 = $i2 + 3;

        $r0[$i3] = i1;

        return;
    }

    private static final java.util.List slice(int[], java.lang.Iterable)
    {
        int[] $r0;
        java.lang.Iterable r1;
        java.util.List r2;
        java.util.Iterator r3;
        int i0, $i1;
        java.util.ArrayList $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.Number $r6;
        java.lang.Integer $r7;

        $r0 := @parameter0: int[];

        r1 := @parameter1: java.lang.Iterable;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r2 = (java.util.List) $r4;

        r3 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.lang.Number) $r5;

        i0 = virtualinvoke $r6.<java.lang.Number: int intValue()>();

        $i1 = $r0[i0];

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label1;

     label2:
        return r2;
    }

    private static final java.util.List groupSizes(int[], int)
    {
        int[] $r0;
        int i0;
        kotlin.ranges.IntRange $r1;
        kotlin.ranges.IntProgression $r2, $r3;
        java.lang.Iterable $r4;
        java.util.List $r5;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $r1 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntRange until(int,int)>(3, i0);

        $r2 = (kotlin.ranges.IntProgression) $r1;

        $r3 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntProgression step(kotlin.ranges.IntProgression,int)>($r2, 5);

        $r4 = (java.lang.Iterable) $r3;

        $r5 = staticinvoke <androidx.compose.runtime.SlotTableKt: java.util.List slice(int[],java.lang.Iterable)>($r0, $r4);

        return $r5;
    }

    static java.util.List groupSizes$default(int[], int, int, java.lang.Object)
    {
        int[] r0;
        int i0, $i1, i2;
        java.lang.Object r1;
        java.util.List $r2;

        r0 := @parameter0: int[];

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        i2 = lengthof r0;

     label1:
        $r2 = staticinvoke <androidx.compose.runtime.SlotTableKt: java.util.List groupSizes(int[],int)>(r0, i2);

        return $r2;
    }

    private static final int dataAnchor(int[], int)
    {
        int[] $r0;
        int i0, $i1, $i2, $i3;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $i1 = i0 * 5;

        $i2 = $i1 + 4;

        $i3 = $r0[$i2];

        return $i3;
    }

    private static final void updateDataAnchor(int[], int, int)
    {
        int[] $r0;
        int i0, i1, $i2, $i3;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = i0 * 5;

        $i3 = $i2 + 4;

        $r0[$i3] = i1;

        return;
    }

    private static final java.util.List dataAnchors(int[], int)
    {
        int[] $r0;
        int i0;
        kotlin.ranges.IntRange $r1;
        kotlin.ranges.IntProgression $r2, $r3;
        java.lang.Iterable $r4;
        java.util.List $r5;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $r1 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntRange until(int,int)>(4, i0);

        $r2 = (kotlin.ranges.IntProgression) $r1;

        $r3 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntProgression step(kotlin.ranges.IntProgression,int)>($r2, 5);

        $r4 = (java.lang.Iterable) $r3;

        $r5 = staticinvoke <androidx.compose.runtime.SlotTableKt: java.util.List slice(int[],java.lang.Iterable)>($r0, $r4);

        return $r5;
    }

    static java.util.List dataAnchors$default(int[], int, int, java.lang.Object)
    {
        int[] r0;
        int i0, $i1, i2;
        java.lang.Object r1;
        java.util.List $r2;

        r0 := @parameter0: int[];

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        i2 = lengthof r0;

     label1:
        $r2 = staticinvoke <androidx.compose.runtime.SlotTableKt: java.util.List dataAnchors(int[],int)>(r0, i2);

        return $r2;
    }

    private static final void initGroup(int[], int, int, boolean, boolean, boolean, int, int)
    {
        int[] $r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        boolean z0, z1, z2;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        z2 := @parameter5: boolean;

        i2 := @parameter6: int;

        i3 := @parameter7: int;

        if z0 == 0 goto label1;

        $i15 = 1073741824;

        goto label2;

     label1:
        $i15 = 0;

     label2:
        i4 = $i15;

        if z1 == 0 goto label3;

        $i16 = 536870912;

        goto label4;

     label3:
        $i16 = 0;

     label4:
        i5 = $i16;

        if z2 == 0 goto label5;

        $i17 = 268435456;

        goto label6;

     label5:
        $i17 = 0;

     label6:
        i6 = $i17;

        i7 = i0 * 5;

        $i8 = i7 + 0;

        $r0[$i8] = i1;

        $i11 = i7 + 1;

        $i9 = i4 | i5;

        $i10 = $i9 | i6;

        $r0[$i11] = $i10;

        $i12 = i7 + 2;

        $r0[$i12] = i2;

        $i13 = i7 + 3;

        $r0[$i13] = 0;

        $i14 = i7 + 4;

        $r0[$i14] = i3;

        return;
    }

    private static final void updateGroupKey(int[], int, int)
    {
        int[] $r0;
        int i0, i1, i2, $i3;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = i0 * 5;

        $i3 = i2 + 0;

        $r0[$i3] = i1;

        return;
    }

    private static final androidx.compose.runtime.Anchor getOrAdd(java.util.ArrayList, int, int, kotlin.jvm.functions.Function0)
    {
        java.util.ArrayList $r0;
        int i0, i1, i2, $i3, $i4;
        kotlin.jvm.functions.Function0 r1;
        androidx.compose.runtime.Anchor r2, $r5;
        java.lang.Object $r3, $r4;

        $r0 := @parameter0: java.util.ArrayList;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: kotlin.jvm.functions.Function0;

        i2 = staticinvoke <androidx.compose.runtime.SlotTableKt: int access$search(java.util.ArrayList,int,int)>($r0, i0, i1);

        if i2 >= 0 goto label1;

        $r4 = interfaceinvoke r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        r2 = (androidx.compose.runtime.Anchor) $r4;

        $i3 = i2 + 1;

        $i4 = neg $i3;

        virtualinvoke $r0.<java.util.ArrayList: void add(int,java.lang.Object)>($i4, r2);

        $r5 = r2;

        goto label2;

     label1:
        $r3 = virtualinvoke $r0.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "get(location)");

        $r5 = (androidx.compose.runtime.Anchor) $r3;

     label2:
        return $r5;
    }

    private static final int search(java.util.ArrayList, int, int)
    {
        java.util.ArrayList $r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, i10, i11, $i12;
        java.lang.Object $r1;
        androidx.compose.runtime.Anchor $r2;

        $r0 := @parameter0: java.util.ArrayList;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i10 = 0;

        $i6 = virtualinvoke $r0.<java.util.ArrayList: int size()>();

        i11 = $i6 - 1;

     label1:
        if i10 > i11 goto label6;

        $i9 = i10 + i11;

        i2 = $i9 >>> 1;

        $r1 = virtualinvoke $r0.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r2 = (androidx.compose.runtime.Anchor) $r1;

        i5 = virtualinvoke $r2.<androidx.compose.runtime.Anchor: int getLocation$runtime_release()>();

        if i5 >= 0 goto label2;

        $i12 = i1 + i5;

        goto label3;

     label2:
        $i12 = i5;

     label3:
        i3 = $i12;

        i4 = staticinvoke <kotlin.jvm.internal.Intrinsics: int compare(int,int)>(i3, i0);

        if i4 >= 0 goto label4;

        i10 = i2 + 1;

        goto label1;

     label4:
        if i4 <= 0 goto label5;

        i11 = i2 - 1;

        goto label1;

     label5:
        return i2;

     label6:
        $i7 = i10 + 1;

        $i8 = neg $i7;

        return $i8;
    }

    private static final int locationOf(java.util.ArrayList, int, int)
    {
        java.util.ArrayList $r0;
        int i0, i1, i2, $i3, $i4;

        $r0 := @parameter0: java.util.ArrayList;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = staticinvoke <androidx.compose.runtime.SlotTableKt: int search(java.util.ArrayList,int,int)>($r0, i0, i1);

        if i2 < 0 goto label1;

        $i4 = i2;

        goto label2;

     label1:
        $i3 = i2 + 1;

        $i4 = neg $i3;

     label2:
        return $i4;
    }

    public static final int access$search(java.util.ArrayList, int, int)
    {
        java.util.ArrayList $r0;
        int i0, i1, $i2;

        $r0 := @parameter0: java.util.ArrayList;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = staticinvoke <androidx.compose.runtime.SlotTableKt: int search(java.util.ArrayList,int,int)>($r0, i0, i1);

        return $i2;
    }

    public static final int access$groupSize(int[], int)
    {
        int[] $r0;
        int i0, $i1;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $i1 = staticinvoke <androidx.compose.runtime.SlotTableKt: int groupSize(int[],int)>($r0, i0);

        return $i1;
    }

    public static final boolean access$containsMark(int[], int)
    {
        int[] $r0;
        int i0;
        boolean $z0;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $z0 = staticinvoke <androidx.compose.runtime.SlotTableKt: boolean containsMark(int[],int)>($r0, i0);

        return $z0;
    }

    public static final int access$parentAnchor(int[], int)
    {
        int[] $r0;
        int i0, $i1;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $i1 = staticinvoke <androidx.compose.runtime.SlotTableKt: int parentAnchor(int[],int)>($r0, i0);

        return $i1;
    }

    public static final int access$key(int[], int)
    {
        int[] $r0;
        int i0, $i1;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $i1 = staticinvoke <androidx.compose.runtime.SlotTableKt: int key(int[],int)>($r0, i0);

        return $i1;
    }

    public static final int access$nodeCount(int[], int)
    {
        int[] $r0;
        int i0, $i1;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $i1 = staticinvoke <androidx.compose.runtime.SlotTableKt: int nodeCount(int[],int)>($r0, i0);

        return $i1;
    }

    public static final boolean access$hasMark(int[], int)
    {
        int[] $r0;
        int i0;
        boolean $z0;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $z0 = staticinvoke <androidx.compose.runtime.SlotTableKt: boolean hasMark(int[],int)>($r0, i0);

        return $z0;
    }

    public static final boolean access$hasObjectKey(int[], int)
    {
        int[] $r0;
        int i0;
        boolean $z0;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $z0 = staticinvoke <androidx.compose.runtime.SlotTableKt: boolean hasObjectKey(int[],int)>($r0, i0);

        return $z0;
    }

    public static final int access$objectKeyIndex(int[], int)
    {
        int[] $r0;
        int i0, $i1;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $i1 = staticinvoke <androidx.compose.runtime.SlotTableKt: int objectKeyIndex(int[],int)>($r0, i0);

        return $i1;
    }

    public static final boolean access$isNode(int[], int)
    {
        int[] $r0;
        int i0;
        boolean $z0;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $z0 = staticinvoke <androidx.compose.runtime.SlotTableKt: boolean isNode(int[],int)>($r0, i0);

        return $z0;
    }

    public static final int access$nodeIndex(int[], int)
    {
        int[] $r0;
        int i0, $i1;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $i1 = staticinvoke <androidx.compose.runtime.SlotTableKt: int nodeIndex(int[],int)>($r0, i0);

        return $i1;
    }

    public static final boolean access$hasAux(int[], int)
    {
        int[] $r0;
        int i0;
        boolean $z0;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $z0 = staticinvoke <androidx.compose.runtime.SlotTableKt: boolean hasAux(int[],int)>($r0, i0);

        return $z0;
    }

    public static final int access$auxIndex(int[], int)
    {
        int[] $r0;
        int i0, $i1;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $i1 = staticinvoke <androidx.compose.runtime.SlotTableKt: int auxIndex(int[],int)>($r0, i0);

        return $i1;
    }

    public static final int access$slotAnchor(int[], int)
    {
        int[] $r0;
        int i0, $i1;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $i1 = staticinvoke <androidx.compose.runtime.SlotTableKt: int slotAnchor(int[],int)>($r0, i0);

        return $i1;
    }

    public static final java.util.List access$keys(int[], int)
    {
        int[] $r0;
        int i0;
        java.util.List $r1;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $r1 = staticinvoke <androidx.compose.runtime.SlotTableKt: java.util.List keys(int[],int)>($r0, i0);

        return $r1;
    }

    public static final java.util.List access$nodeCounts(int[], int)
    {
        int[] $r0;
        int i0;
        java.util.List $r1;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $r1 = staticinvoke <androidx.compose.runtime.SlotTableKt: java.util.List nodeCounts(int[],int)>($r0, i0);

        return $r1;
    }

    public static final java.util.List access$parentAnchors(int[], int)
    {
        int[] $r0;
        int i0;
        java.util.List $r1;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $r1 = staticinvoke <androidx.compose.runtime.SlotTableKt: java.util.List parentAnchors(int[],int)>($r0, i0);

        return $r1;
    }

    public static final java.util.List access$dataAnchors(int[], int)
    {
        int[] $r0;
        int i0;
        java.util.List $r1;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $r1 = staticinvoke <androidx.compose.runtime.SlotTableKt: java.util.List dataAnchors(int[],int)>($r0, i0);

        return $r1;
    }

    public static final java.util.List access$groupSizes(int[], int)
    {
        int[] $r0;
        int i0;
        java.util.List $r1;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $r1 = staticinvoke <androidx.compose.runtime.SlotTableKt: java.util.List groupSizes(int[],int)>($r0, i0);

        return $r1;
    }

    public static final int access$dataAnchor(int[], int)
    {
        int[] $r0;
        int i0, $i1;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $i1 = staticinvoke <androidx.compose.runtime.SlotTableKt: int dataAnchor(int[],int)>($r0, i0);

        return $i1;
    }

    public static final boolean access$containsAnyMark(int[], int)
    {
        int[] $r0;
        int i0;
        boolean $z0;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $z0 = staticinvoke <androidx.compose.runtime.SlotTableKt: boolean containsAnyMark(int[],int)>($r0, i0);

        return $z0;
    }

    public static final void access$addAux(int[], int)
    {
        int[] $r0;
        int i0;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        staticinvoke <androidx.compose.runtime.SlotTableKt: void addAux(int[],int)>($r0, i0);

        return;
    }

    public static final void access$initGroup(int[], int, int, boolean, boolean, boolean, int, int)
    {
        int[] $r0;
        int i0, i1, i2, i3;
        boolean z0, z1, z2;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        z2 := @parameter5: boolean;

        i2 := @parameter6: int;

        i3 := @parameter7: int;

        staticinvoke <androidx.compose.runtime.SlotTableKt: void initGroup(int[],int,int,boolean,boolean,boolean,int,int)>($r0, i0, i1, z0, z1, z2, i2, i3);

        return;
    }

    public static final void access$updateGroupSize(int[], int, int)
    {
        int[] $r0;
        int i0, i1;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <androidx.compose.runtime.SlotTableKt: void updateGroupSize(int[],int,int)>($r0, i0, i1);

        return;
    }

    public static final void access$updateNodeCount(int[], int, int)
    {
        int[] $r0;
        int i0, i1;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <androidx.compose.runtime.SlotTableKt: void updateNodeCount(int[],int,int)>($r0, i0, i1);

        return;
    }

    public static final void access$updateParentAnchor(int[], int, int)
    {
        int[] $r0;
        int i0, i1;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <androidx.compose.runtime.SlotTableKt: void updateParentAnchor(int[],int,int)>($r0, i0, i1);

        return;
    }

    public static final void access$updateDataAnchor(int[], int, int)
    {
        int[] $r0;
        int i0, i1;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <androidx.compose.runtime.SlotTableKt: void updateDataAnchor(int[],int,int)>($r0, i0, i1);

        return;
    }

    public static final int access$locationOf(java.util.ArrayList, int, int)
    {
        java.util.ArrayList $r0;
        int i0, i1, $i2;

        $r0 := @parameter0: java.util.ArrayList;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = staticinvoke <androidx.compose.runtime.SlotTableKt: int locationOf(java.util.ArrayList,int,int)>($r0, i0, i1);

        return $i2;
    }

    public static final void access$updateMark(int[], int, boolean)
    {
        int[] $r0;
        int i0;
        boolean z0;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        staticinvoke <androidx.compose.runtime.SlotTableKt: void updateMark(int[],int,boolean)>($r0, i0, z0);

        return;
    }

    public static final void access$updateContainsMark(int[], int, boolean)
    {
        int[] $r0;
        int i0;
        boolean z0;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        staticinvoke <androidx.compose.runtime.SlotTableKt: void updateContainsMark(int[],int,boolean)>($r0, i0, z0);

        return;
    }

    public static final int access$countOneBits(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = staticinvoke <androidx.compose.runtime.SlotTableKt: int countOneBits(int)>(i0);

        return $i1;
    }

    public static final int access$groupInfo(int[], int)
    {
        int[] $r0;
        int i0, $i1;

        $r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $i1 = staticinvoke <androidx.compose.runtime.SlotTableKt: int groupInfo(int[],int)>($r0, i0);

        return $i1;
    }

