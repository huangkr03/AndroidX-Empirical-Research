androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper
<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$Companion Companion>
<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper: android.content.Context context>
<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper: java.lang.String name>
<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper: androidx.sqlite.db.SupportSQLiteOpenHelper$Callback callback>
<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper: boolean useNoBackupDirectory>
<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper: boolean allowDataLossOnRecovery>
<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper: kotlin.Lazy lazyDelegate>
<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper: boolean writeAheadLoggingEnabled>
<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper: java.lang.String TAG>
    public void <init>(android.content.Context, java.lang.String, androidx.sqlite.db.SupportSQLiteOpenHelper$Callback, boolean, boolean)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper r0;
        android.content.Context r1;
        java.lang.String r2;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Callback r3;
        boolean z0, z1;
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$lazyDelegate$1 $r4;
        kotlin.jvm.functions.Function0 $r5;
        kotlin.Lazy $r6;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: androidx.sqlite.db.SupportSQLiteOpenHelper$Callback;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "context");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "callback");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper: android.content.Context context> = r1;

        r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper: java.lang.String name> = r2;

        r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper: androidx.sqlite.db.SupportSQLiteOpenHelper$Callback callback> = r3;

        r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper: boolean useNoBackupDirectory> = z0;

        r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper: boolean allowDataLossOnRecovery> = z1;

        $r4 = new androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$lazyDelegate$1;

        specialinvoke $r4.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$lazyDelegate$1: void <init>(androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper)>(r0);

        $r5 = (kotlin.jvm.functions.Function0) $r4;

        $r6 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)>($r5);

        r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper: kotlin.Lazy lazyDelegate> = $r6;

        return;
    }

    public void <init>(android.content.Context, java.lang.String, androidx.sqlite.db.SupportSQLiteOpenHelper$Callback, boolean, boolean, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper r0;
        android.content.Context r1;
        java.lang.String r2;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Callback r3;
        int i0, $i1, $i2;
        kotlin.jvm.internal.DefaultConstructorMarker r4;
        boolean z0, z1;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: androidx.sqlite.db.SupportSQLiteOpenHelper$Callback;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        i0 := @parameter5: int;

        r4 := @parameter6: kotlin.jvm.internal.DefaultConstructorMarker;

        $i1 = i0 & 8;

        if $i1 == 0 goto label1;

        z0 = 0;

     label1:
        $i2 = i0 & 16;

        if $i2 == 0 goto label2;

        z1 = 0;

     label2:
        specialinvoke r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,androidx.sqlite.db.SupportSQLiteOpenHelper$Callback,boolean,boolean)>(r1, r2, r3, z0, z1);

        return;
    }

    private final androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper getDelegate()
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper r0;
        kotlin.Lazy r1;
        java.lang.Object $r2;
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper $r3;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper;

        r1 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper: kotlin.Lazy lazyDelegate>;

        $r2 = interfaceinvoke r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r3 = (androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper) $r2;

        return $r3;
    }

    private static java.lang.Object getDelegate$delegate(androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper r0;
        kotlin.Lazy $r1;

        r0 := @parameter0: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper;

        $r1 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper: kotlin.Lazy lazyDelegate>;

        return $r1;
    }

    public java.lang.String getDatabaseName()
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper r0;
        java.lang.String $r1;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper;

        $r1 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper: java.lang.String name>;

        return $r1;
    }

    public void setWriteAheadLoggingEnabled(boolean)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper r0;
        boolean z0, $z1;
        kotlin.Lazy $r1;
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper $r2;
        android.database.sqlite.SQLiteOpenHelper $r3;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper;

        z0 := @parameter0: boolean;

        $r1 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper: kotlin.Lazy lazyDelegate>;

        $z1 = interfaceinvoke $r1.<kotlin.Lazy: boolean isInitialized()>();

        if $z1 == 0 goto label1;

        $r2 = specialinvoke r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper getDelegate()>();

        $r3 = (android.database.sqlite.SQLiteOpenHelper) $r2;

        staticinvoke <androidx.sqlite.db.SupportSQLiteCompat$Api16Impl: void setWriteAheadLoggingEnabled(android.database.sqlite.SQLiteOpenHelper,boolean)>($r3, z0);

     label1:
        r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper: boolean writeAheadLoggingEnabled> = z0;

        return;
    }

    public androidx.sqlite.db.SupportSQLiteDatabase getWritableDatabase()
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper r0;
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper $r1;
        androidx.sqlite.db.SupportSQLiteDatabase $r2;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper;

        $r1 = specialinvoke r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper getDelegate()>();

        $r2 = virtualinvoke $r1.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: androidx.sqlite.db.SupportSQLiteDatabase getSupportDatabase(boolean)>(1);

        return $r2;
    }

    public androidx.sqlite.db.SupportSQLiteDatabase getReadableDatabase()
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper r0;
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper $r1;
        androidx.sqlite.db.SupportSQLiteDatabase $r2;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper;

        $r1 = specialinvoke r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper getDelegate()>();

        $r2 = virtualinvoke $r1.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: androidx.sqlite.db.SupportSQLiteDatabase getSupportDatabase(boolean)>(0);

        return $r2;
    }

    public void close()
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper r0;
        kotlin.Lazy $r1;
        boolean $z0;
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper $r2;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper;

        $r1 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper: kotlin.Lazy lazyDelegate>;

        $z0 = interfaceinvoke $r1.<kotlin.Lazy: boolean isInitialized()>();

        if $z0 == 0 goto label1;

        $r2 = specialinvoke r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper getDelegate()>();

        virtualinvoke $r2.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: void close()>();

     label1:
        return;
    }

    public void <init>(android.content.Context, java.lang.String, androidx.sqlite.db.SupportSQLiteOpenHelper$Callback, boolean)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper r0;
        android.content.Context r1;
        java.lang.String r2;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Callback r3;
        boolean z0;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: androidx.sqlite.db.SupportSQLiteOpenHelper$Callback;

        z0 := @parameter3: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "context");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "callback");

        specialinvoke r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,androidx.sqlite.db.SupportSQLiteOpenHelper$Callback,boolean,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker)>(r1, r2, r3, z0, 0, 16, null);

        return;
    }

    public void <init>(android.content.Context, java.lang.String, androidx.sqlite.db.SupportSQLiteOpenHelper$Callback)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper r0;
        android.content.Context r1;
        java.lang.String r2;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Callback r3;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: androidx.sqlite.db.SupportSQLiteOpenHelper$Callback;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "context");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "callback");

        specialinvoke r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,androidx.sqlite.db.SupportSQLiteOpenHelper$Callback,boolean,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker)>(r1, r2, r3, 0, 0, 24, null);

        return;
    }

    public static final java.lang.String access$getName$p(androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper $r0;
        java.lang.String $r1;

        $r0 := @parameter0: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper;

        $r1 = $r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper: java.lang.String name>;

        return $r1;
    }

    public static final boolean access$getUseNoBackupDirectory$p(androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper $r0;
        boolean $z0;

        $r0 := @parameter0: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper;

        $z0 = $r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper: boolean useNoBackupDirectory>;

        return $z0;
    }

    public static final android.content.Context access$getContext$p(androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper $r0;
        android.content.Context $r1;

        $r0 := @parameter0: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper;

        $r1 = $r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper: android.content.Context context>;

        return $r1;
    }

    public static final androidx.sqlite.db.SupportSQLiteOpenHelper$Callback access$getCallback$p(androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper $r0;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Callback $r1;

        $r0 := @parameter0: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper;

        $r1 = $r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper: androidx.sqlite.db.SupportSQLiteOpenHelper$Callback callback>;

        return $r1;
    }

    public static final boolean access$getAllowDataLossOnRecovery$p(androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper $r0;
        boolean $z0;

        $r0 := @parameter0: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper;

        $z0 = $r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper: boolean allowDataLossOnRecovery>;

        return $z0;
    }

    public static final boolean access$getWriteAheadLoggingEnabled$p(androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper $r0;
        boolean $z0;

        $r0 := @parameter0: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper;

        $z0 = $r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper: boolean writeAheadLoggingEnabled>;

        return $z0;
    }

    static void <clinit>()
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$Companion $r0;

        $r0 = new androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$Companion;

        specialinvoke $r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$Companion Companion> = $r0;

        return;
    }

androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$Companion
    private void <init>()
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$Companion r0;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$Companion: void <init>()>();

        return;
    }

androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$DBRefHolder
<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$DBRefHolder: androidx.sqlite.db.framework.FrameworkSQLiteDatabase db>
    public void <init>(androidx.sqlite.db.framework.FrameworkSQLiteDatabase)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$DBRefHolder r0;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r1;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$DBRefHolder;

        r1 := @parameter0: androidx.sqlite.db.framework.FrameworkSQLiteDatabase;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$DBRefHolder: androidx.sqlite.db.framework.FrameworkSQLiteDatabase db> = r1;

        return;
    }

    public final androidx.sqlite.db.framework.FrameworkSQLiteDatabase getDb()
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$DBRefHolder r0;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase $r1;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$DBRefHolder;

        $r1 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$DBRefHolder: androidx.sqlite.db.framework.FrameworkSQLiteDatabase db>;

        return $r1;
    }

    public final void setDb(androidx.sqlite.db.framework.FrameworkSQLiteDatabase)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$DBRefHolder r0;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r1;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$DBRefHolder;

        r1 := @parameter0: androidx.sqlite.db.framework.FrameworkSQLiteDatabase;

        r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$DBRefHolder: androidx.sqlite.db.framework.FrameworkSQLiteDatabase db> = r1;

        return;
    }

androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$lazyDelegate$1
<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$lazyDelegate$1: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper this$0>
    void <init>(androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$lazyDelegate$1 r0;
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper $r1;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$lazyDelegate$1;

        $r1 := @parameter0: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper;

        r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$lazyDelegate$1: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper invoke()
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$lazyDelegate$1 r0;
        java.io.File r1, $r7, $r10;
        int $i0, $i1;
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper $r2, $r4, $r6, $r8, $r11, $r14, $r18, $r20, $r23, $r25, $r28, $r30;
        android.database.sqlite.SQLiteOpenHelper $r3;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r5, $r12, $r16, $r26;
        android.content.Context $r9, $r15, $r24;
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper $r13, r21, $r22;
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$DBRefHolder $r17, $r27;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Callback $r19, $r29;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$lazyDelegate$1;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 23 goto label1;

        $r4 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$lazyDelegate$1: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper this$0>;

        $r5 = staticinvoke <androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper: java.lang.String access$getName$p(androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper)>($r4);

        if $r5 == null goto label1;

        $r6 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$lazyDelegate$1: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper this$0>;

        $z1 = staticinvoke <androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper: boolean access$getUseNoBackupDirectory$p(androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper)>($r6);

        if $z1 == 0 goto label1;

        $r7 = new java.io.File;

        $r8 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$lazyDelegate$1: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper this$0>;

        $r9 = staticinvoke <androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper: android.content.Context access$getContext$p(androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper)>($r8);

        $r10 = staticinvoke <androidx.sqlite.db.SupportSQLiteCompat$Api21Impl: java.io.File getNoBackupFilesDir(android.content.Context)>($r9);

        $r11 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$lazyDelegate$1: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper this$0>;

        $r12 = staticinvoke <androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper: java.lang.String access$getName$p(androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper)>($r11);

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r10, $r12);

        r1 = $r7;

        $r13 = new androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper;

        $r14 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$lazyDelegate$1: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper this$0>;

        $r15 = staticinvoke <androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper: android.content.Context access$getContext$p(androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper)>($r14);

        $r16 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r17 = new androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$DBRefHolder;

        specialinvoke $r17.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$DBRefHolder: void <init>(androidx.sqlite.db.framework.FrameworkSQLiteDatabase)>(null);

        $r18 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$lazyDelegate$1: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper this$0>;

        $r19 = staticinvoke <androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper: androidx.sqlite.db.SupportSQLiteOpenHelper$Callback access$getCallback$p(androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper)>($r18);

        $r20 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$lazyDelegate$1: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper this$0>;

        $z2 = staticinvoke <androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper: boolean access$getAllowDataLossOnRecovery$p(androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper)>($r20);

        specialinvoke $r13.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: void <init>(android.content.Context,java.lang.String,androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$DBRefHolder,androidx.sqlite.db.SupportSQLiteOpenHelper$Callback,boolean)>($r15, $r16, $r17, $r19, $z2);

        r21 = $r13;

        goto label2;

     label1:
        $r22 = new androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper;

        $r23 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$lazyDelegate$1: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper this$0>;

        $r24 = staticinvoke <androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper: android.content.Context access$getContext$p(androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper)>($r23);

        $r25 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$lazyDelegate$1: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper this$0>;

        $r26 = staticinvoke <androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper: java.lang.String access$getName$p(androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper)>($r25);

        $r27 = new androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$DBRefHolder;

        specialinvoke $r27.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$DBRefHolder: void <init>(androidx.sqlite.db.framework.FrameworkSQLiteDatabase)>(null);

        $r28 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$lazyDelegate$1: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper this$0>;

        $r29 = staticinvoke <androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper: androidx.sqlite.db.SupportSQLiteOpenHelper$Callback access$getCallback$p(androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper)>($r28);

        $r30 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$lazyDelegate$1: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper this$0>;

        $z3 = staticinvoke <androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper: boolean access$getAllowDataLossOnRecovery$p(androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper)>($r30);

        specialinvoke $r22.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: void <init>(android.content.Context,java.lang.String,androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$DBRefHolder,androidx.sqlite.db.SupportSQLiteOpenHelper$Callback,boolean)>($r24, $r26, $r27, $r29, $z3);

        r21 = $r22;

     label2:
        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 < 16 goto label3;

        $r3 = (android.database.sqlite.SQLiteOpenHelper) r21;

        $r2 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$lazyDelegate$1: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper this$0>;

        $z0 = staticinvoke <androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper: boolean access$getWriteAheadLoggingEnabled$p(androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper)>($r2);

        staticinvoke <androidx.sqlite.db.SupportSQLiteCompat$Api16Impl: void setWriteAheadLoggingEnabled(android.database.sqlite.SQLiteOpenHelper,boolean)>($r3, $z0);

     label3:
        return r21;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$lazyDelegate$1 r0;
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper $r1;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$lazyDelegate$1;

        $r1 = virtualinvoke r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$lazyDelegate$1: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper invoke()>();

        return $r1;
    }

androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackException
<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackException: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName callbackName>
<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackException: java.lang.Throwable cause>
    public void <init>(androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName, java.lang.Throwable)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackException r0;
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName r1;
        java.lang.Throwable r2;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackException;

        r1 := @parameter0: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName;

        r2 := @parameter1: java.lang.Throwable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "callbackName");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "cause");

        specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackException: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName callbackName> = r1;

        r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackException: java.lang.Throwable cause> = r2;

        return;
    }

    public final androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName getCallbackName()
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackException r0;
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName $r1;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackException;

        $r1 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackException: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName callbackName>;

        return $r1;
    }

    public java.lang.Throwable getCause()
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackException r0;
        java.lang.Throwable $r1;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackException;

        $r1 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackException: java.lang.Throwable cause>;

        return $r1;
    }

androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName
<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName ON_CONFIGURE>
<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName ON_CREATE>
<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName ON_UPGRADE>
<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName ON_DOWNGRADE>
<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName ON_OPEN>
<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName[] $VALUES>
    private void <init>(java.lang.String, int)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0);

        return;
    }

    public static androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName[] values()
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName[]) $r1;

        return $r2;
    }

    public static androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroidx/sqlite/db/framework/FrameworkSQLiteOpenHelper$OpenHelper$CallbackName;", r0);

        $r2 = (androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName) $r1;

        return $r2;
    }

    private static final androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName[] $values()
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName[] r0;
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName $r1, $r2, $r3, $r4, $r5;

        r0 = newarray (androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName)[5];

        $r1 = <androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName ON_CONFIGURE>;

        r0[0] = $r1;

        $r2 = <androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName ON_CREATE>;

        r0[1] = $r2;

        $r3 = <androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName ON_UPGRADE>;

        r0[2] = $r3;

        $r4 = <androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName ON_DOWNGRADE>;

        r0[3] = $r4;

        $r5 = <androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName ON_OPEN>;

        r0[4] = $r5;

        return r0;
    }

    static void <clinit>()
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName $r0, $r1, $r2, $r3, $r4;
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName[] $r5;

        $r0 = new androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName;

        specialinvoke $r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName: void <init>(java.lang.String,int)>("ON_CONFIGURE", 0);

        <androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName ON_CONFIGURE> = $r0;

        $r1 = new androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName;

        specialinvoke $r1.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName: void <init>(java.lang.String,int)>("ON_CREATE", 1);

        <androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName ON_CREATE> = $r1;

        $r2 = new androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName;

        specialinvoke $r2.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName: void <init>(java.lang.String,int)>("ON_UPGRADE", 2);

        <androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName ON_UPGRADE> = $r2;

        $r3 = new androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName;

        specialinvoke $r3.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName: void <init>(java.lang.String,int)>("ON_DOWNGRADE", 3);

        <androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName ON_DOWNGRADE> = $r3;

        $r4 = new androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName;

        specialinvoke $r4.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName: void <init>(java.lang.String,int)>("ON_OPEN", 4);

        <androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName ON_OPEN> = $r4;

        $r5 = staticinvoke <androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName[] $values()>();

        <androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName[] $VALUES> = $r5;

        return;
    }

androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$Companion
    private void <init>()
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$Companion r0;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final androidx.sqlite.db.framework.FrameworkSQLiteDatabase getWrappedDb(androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$DBRefHolder, android.database.sqlite.SQLiteDatabase)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$Companion r0;
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$DBRefHolder r1;
        android.database.sqlite.SQLiteDatabase r2;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r3, r4, r5, $r6, $r7;
        boolean $z1;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$Companion;

        r1 := @parameter0: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$DBRefHolder;

        r2 := @parameter1: android.database.sqlite.SQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "refHolder");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "sqLiteDatabase");

        r3 = virtualinvoke r1.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$DBRefHolder: androidx.sqlite.db.framework.FrameworkSQLiteDatabase getDb()>();

        if r3 == null goto label1;

        $z1 = virtualinvoke r3.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: boolean isDelegate(android.database.sqlite.SQLiteDatabase)>(r2);

        if $z1 != 0 goto label2;

     label1:
        $r6 = new androidx.sqlite.db.framework.FrameworkSQLiteDatabase;

        specialinvoke $r6.<androidx.sqlite.db.framework.FrameworkSQLiteDatabase: void <init>(android.database.sqlite.SQLiteDatabase)>(r2);

        r4 = $r6;

        r5 = r4;

        virtualinvoke r1.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$DBRefHolder: void setDb(androidx.sqlite.db.framework.FrameworkSQLiteDatabase)>(r5);

        $r7 = r4;

        goto label3;

     label2:
        $r7 = r3;

     label3:
        return $r7;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$Companion: void <init>()>();

        return;
    }

androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$WhenMappings
<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$WhenMappings: int[] $EnumSwitchMapping$0>
    static void <clinit>()
    {
        int[] r0;
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName[] $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName $r2, $r3, $r4, $r5, $r6;
        java.lang.Throwable $r7, $r8, $r9, $r10, $r11, r12, r13, r14, r15, r16;

        $r1 = staticinvoke <androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName[] values()>();

        $i0 = lengthof $r1;

        r0 = newarray (int)[$i0];

     label01:
        $r2 = <androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName ON_CONFIGURE>;

        $i1 = virtualinvoke $r2.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName: int ordinal()>();

        r0[$i1] = 1;

     label02:
        goto label04;

     label03:
        $r9 := @caughtexception;

        r12 = $r9;

     label04:
        $r3 = <androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName ON_CREATE>;

        $i2 = virtualinvoke $r3.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName: int ordinal()>();

        r0[$i2] = 2;

     label05:
        goto label07;

     label06:
        $r7 := @caughtexception;

        r13 = $r7;

     label07:
        $r4 = <androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName ON_UPGRADE>;

        $i3 = virtualinvoke $r4.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName: int ordinal()>();

        r0[$i3] = 3;

     label08:
        goto label10;

     label09:
        $r8 := @caughtexception;

        r14 = $r8;

     label10:
        $r5 = <androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName ON_DOWNGRADE>;

        $i4 = virtualinvoke $r5.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName: int ordinal()>();

        r0[$i4] = 4;

     label11:
        goto label13;

     label12:
        $r11 := @caughtexception;

        r15 = $r11;

     label13:
        $r6 = <androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName ON_OPEN>;

        $i5 = virtualinvoke $r6.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName: int ordinal()>();

        r0[$i5] = 5;

     label14:
        goto label16;

     label15:
        $r10 := @caughtexception;

        r16 = $r10;

     label16:
        <androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$WhenMappings: int[] $EnumSwitchMapping$0> = r0;

        return;

        catch java.lang.NoSuchFieldError from label01 to label02 with label03;
        catch java.lang.NoSuchFieldError from label04 to label05 with label06;
        catch java.lang.NoSuchFieldError from label07 to label08 with label09;
        catch java.lang.NoSuchFieldError from label10 to label11 with label12;
        catch java.lang.NoSuchFieldError from label13 to label14 with label15;
    }

androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper
<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$Companion Companion>
<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: android.content.Context context>
<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$DBRefHolder dbRef>
<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: androidx.sqlite.db.SupportSQLiteOpenHelper$Callback callback>
<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: boolean allowDataLossOnRecovery>
<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: boolean migrated>
<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: androidx.sqlite.util.ProcessLock lock>
<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: boolean opened>
    public void <init>(android.content.Context, java.lang.String, androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$DBRefHolder, androidx.sqlite.db.SupportSQLiteOpenHelper$Callback, boolean)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper r0;
        android.content.Context r1, $r7;
        java.lang.String r2, $r11;
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$DBRefHolder r3;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Callback r4;
        boolean z0;
        int $i0;
        android.database.DatabaseErrorHandler $r5;
        androidx.sqlite.util.ProcessLock $r6;
        java.io.File $r8;
        java.util.UUID $r9;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$DBRefHolder;

        r4 := @parameter3: androidx.sqlite.db.SupportSQLiteOpenHelper$Callback;

        z0 := @parameter4: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "context");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "dbRef");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "callback");

        $i0 = r4.<androidx.sqlite.db.SupportSQLiteOpenHelper$Callback: int version>;

        $r5 = dynamicinvoke "onCorruption" <android.database.DatabaseErrorHandler (androidx.sqlite.db.SupportSQLiteOpenHelper$Callback,androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$DBRefHolder)>(r4, r3) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(android.database.sqlite.SQLiteDatabase), methodhandle: "REF_INVOKE_STATIC" <androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: void _init_$lambda$0(androidx.sqlite.db.SupportSQLiteOpenHelper$Callback,androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$DBRefHolder,android.database.sqlite.SQLiteDatabase)>, methodtype: void __METHODTYPE__(android.database.sqlite.SQLiteDatabase));

        specialinvoke r0.<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int,android.database.DatabaseErrorHandler)>(r1, r2, null, $i0, $r5);

        r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: android.content.Context context> = r1;

        r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$DBRefHolder dbRef> = r3;

        r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: androidx.sqlite.db.SupportSQLiteOpenHelper$Callback callback> = r4;

        r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: boolean allowDataLossOnRecovery> = z0;

        $r6 = new androidx.sqlite.util.ProcessLock;

        $r11 = r2;

        if r2 != null goto label1;

        $r9 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();

        $r11 = virtualinvoke $r9.<java.util.UUID: java.lang.String toString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r11, "randomUUID().toString()");

     label1:
        $r7 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: android.content.Context context>;

        $r8 = virtualinvoke $r7.<android.content.Context: java.io.File getCacheDir()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r8, "context.cacheDir");

        specialinvoke $r6.<androidx.sqlite.util.ProcessLock: void <init>(java.lang.String,java.io.File,boolean)>($r11, $r8, 0);

        r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: androidx.sqlite.util.ProcessLock lock> = $r6;

        return;
    }

    public final android.content.Context getContext()
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper r0;
        android.content.Context $r1;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper;

        $r1 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: android.content.Context context>;

        return $r1;
    }

    public final androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$DBRefHolder getDbRef()
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper r0;
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$DBRefHolder $r1;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper;

        $r1 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$DBRefHolder dbRef>;

        return $r1;
    }

    public final androidx.sqlite.db.SupportSQLiteOpenHelper$Callback getCallback()
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper r0;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Callback $r1;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper;

        $r1 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: androidx.sqlite.db.SupportSQLiteOpenHelper$Callback callback>;

        return $r1;
    }

    public final boolean getAllowDataLossOnRecovery()
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper r0;
        boolean $z0;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper;

        $z0 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: boolean allowDataLossOnRecovery>;

        return $z0;
    }

    public final androidx.sqlite.db.SupportSQLiteDatabase getSupportDatabase(boolean)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper r0;
        boolean z0, $z1, $z2, $z3;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase $r1;
        androidx.sqlite.util.ProcessLock $r2, $r3, $r6, $r7;
        java.lang.String $r4;
        java.lang.Throwable $r5, r11;
        android.database.sqlite.SQLiteDatabase r8;
        androidx.sqlite.db.SupportSQLiteDatabase r9, r10;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper;

        z0 := @parameter0: boolean;

     label1:
        $r7 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: androidx.sqlite.util.ProcessLock lock>;

        $z1 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: boolean opened>;

        if $z1 != 0 goto label2;

        $r4 = virtualinvoke r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: java.lang.String getDatabaseName()>();

        if $r4 == null goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        virtualinvoke $r7.<androidx.sqlite.util.ProcessLock: void lock(boolean)>($z2);

        r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: boolean migrated> = 0;

        r8 = specialinvoke r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: android.database.sqlite.SQLiteDatabase innerGetDatabase(boolean)>(z0);

        $z3 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: boolean migrated>;

        if $z3 == 0 goto label5;

        virtualinvoke r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: void close()>();

        r9 = virtualinvoke r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: androidx.sqlite.db.SupportSQLiteDatabase getSupportDatabase(boolean)>(z0);

     label4:
        $r3 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: androidx.sqlite.util.ProcessLock lock>;

        virtualinvoke $r3.<androidx.sqlite.util.ProcessLock: void unlock()>();

        return r9;

     label5:
        $r1 = virtualinvoke r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: androidx.sqlite.db.framework.FrameworkSQLiteDatabase getWrappedDb(android.database.sqlite.SQLiteDatabase)>(r8);

        r10 = (androidx.sqlite.db.SupportSQLiteDatabase) $r1;

     label6:
        $r2 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: androidx.sqlite.util.ProcessLock lock>;

        virtualinvoke $r2.<androidx.sqlite.util.ProcessLock: void unlock()>();

        goto label9;

     label7:
        $r5 := @caughtexception;

        r11 = $r5;

     label8:
        $r6 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: androidx.sqlite.util.ProcessLock lock>;

        virtualinvoke $r6.<androidx.sqlite.util.ProcessLock: void unlock()>();

        throw r11;

     label9:
        return r10;

        catch java.lang.Throwable from label1 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    private final android.database.sqlite.SQLiteDatabase innerGetDatabase(boolean)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper r0;
        boolean z0, $z2, $z3, $z4, $z5, $z7;
        java.lang.String r1, $r7;
        java.lang.Throwable r2, $r8, $r15, $r17, r21, r22, r23, r24, r25;
        android.content.Context $r3, $r9;
        java.lang.StringBuilder $r4, $r5, $r6;
        android.database.sqlite.SQLiteDatabase $r10, $r16, $r20;
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackException $r11, $r12;
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName $r13;
        int[] $r14;
        int $i1, $i2;
        java.io.File r18, r19;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper;

        z0 := @parameter0: boolean;

        r1 = virtualinvoke r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: java.lang.String getDatabaseName()>();

        if r1 == null goto label01;

        $r3 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: android.content.Context context>;

        r18 = virtualinvoke $r3.<android.content.Context: java.io.File getDatabasePath(java.lang.String)>(r1);

        r19 = virtualinvoke r18.<java.io.File: java.io.File getParentFile()>();

        if r19 == null goto label01;

        virtualinvoke r19.<java.io.File: boolean mkdirs()>();

        $z2 = virtualinvoke r19.<java.io.File: boolean isDirectory()>();

        if $z2 != 0 goto label01;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid database parent file, not a directory: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r19);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("SupportSQLite", $r7);

     label01:
        $r20 = specialinvoke r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: android.database.sqlite.SQLiteDatabase getWritableOrReadableDatabase(boolean)>(z0);

        return $r20;

     label02:
        $r15 := @caughtexception;

        r21 = $r15;

        specialinvoke r0.<android.database.sqlite.SQLiteOpenHelper: void close()>();

     label03:
        staticinvoke <java.lang.Thread: void sleep(long)>(500L);

     label04:
        goto label06;

     label05:
        $r17 := @caughtexception;

        r22 = $r17;

     label06:
        $r16 = specialinvoke r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: android.database.sqlite.SQLiteDatabase getWritableOrReadableDatabase(boolean)>(z0);

        return $r16;

     label07:
        $r8 := @caughtexception;

        r2 = $r8;

        specialinvoke r0.<android.database.sqlite.SQLiteOpenHelper: void close()>();

        r23 = r2;

        r24 = r23;

        $z3 = r24 instanceof androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackException;

        if $z3 == 0 goto label10;

        $r11 = (androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackException) r24;

        r25 = virtualinvoke $r11.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackException: java.lang.Throwable getCause()>();

        $r12 = (androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackException) r24;

        $r13 = virtualinvoke $r12.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackException: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName getCallbackName()>();

        $r14 = <androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i1 = virtualinvoke $r13.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName: int ordinal()>();

        $i2 = $r14[$i1];

        tableswitch($i2)
        {
            case 1: goto label08;
            case 2: goto label08;
            case 3: goto label08;
            case 4: goto label08;
            case 5: goto label09;
            default: goto label09;
        };

     label08:
        throw r25;

     label09:
        $z7 = r25 instanceof android.database.sqlite.SQLiteException;

        if $z7 != 0 goto label13;

        throw r25;

     label10:
        $z4 = r24 instanceof android.database.sqlite.SQLiteException;

        if $z4 == 0 goto label12;

        if r1 == null goto label11;

        $z5 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: boolean allowDataLossOnRecovery>;

        if $z5 != 0 goto label13;

     label11:
        throw r24;

     label12:
        throw r24;

     label13:
        $r9 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: android.content.Context context>;

        virtualinvoke $r9.<android.content.Context: boolean deleteDatabase(java.lang.String)>(r1);

        $r10 = specialinvoke r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: android.database.sqlite.SQLiteDatabase getWritableOrReadableDatabase(boolean)>(z0);

        return $r10;

        catch java.lang.Throwable from label01 to label02 with label02;
        catch java.lang.InterruptedException from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label07;
    }

    private final android.database.sqlite.SQLiteDatabase getWritableOrReadableDatabase(boolean)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper r0;
        boolean z0;
        android.database.sqlite.SQLiteDatabase $r1;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r1 = specialinvoke r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "{\n                super.\u2026eDatabase()\n            }");

        goto label2;

     label1:
        $r1 = specialinvoke r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "{\n                super.\u2026eDatabase()\n            }");

     label2:
        return $r1;
    }

    public final androidx.sqlite.db.framework.FrameworkSQLiteDatabase getWrappedDb(android.database.sqlite.SQLiteDatabase)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper r0;
        android.database.sqlite.SQLiteDatabase r1;
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$DBRefHolder $r2;
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$Companion $r3;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase $r4;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "sqLiteDatabase");

        $r3 = <androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$Companion Companion>;

        $r2 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$DBRefHolder dbRef>;

        $r4 = virtualinvoke $r3.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$Companion: androidx.sqlite.db.framework.FrameworkSQLiteDatabase getWrappedDb(androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$DBRefHolder,android.database.sqlite.SQLiteDatabase)>($r2, r1);

        return $r4;
    }

    public void onCreate(android.database.sqlite.SQLiteDatabase)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper r0;
        android.database.sqlite.SQLiteDatabase r1;
        java.lang.Throwable r2, $r6, r10;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Callback $r3;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase $r4;
        androidx.sqlite.db.SupportSQLiteDatabase $r5;
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName $r8;
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackException r9;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "sqLiteDatabase");

     label1:
        $r3 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: androidx.sqlite.db.SupportSQLiteOpenHelper$Callback callback>;

        $r4 = virtualinvoke r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: androidx.sqlite.db.framework.FrameworkSQLiteDatabase getWrappedDb(android.database.sqlite.SQLiteDatabase)>(r1);

        $r5 = (androidx.sqlite.db.SupportSQLiteDatabase) $r4;

        virtualinvoke $r3.<androidx.sqlite.db.SupportSQLiteOpenHelper$Callback: void onCreate(androidx.sqlite.db.SupportSQLiteDatabase)>($r5);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        r9 = new androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackException;

        $r8 = <androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName ON_CREATE>;

        specialinvoke r9.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackException: void <init>(androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName,java.lang.Throwable)>($r8, r2);

        r10 = (java.lang.Throwable) r9;

        throw r10;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void onUpgrade(android.database.sqlite.SQLiteDatabase, int, int)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper r0;
        android.database.sqlite.SQLiteDatabase r1;
        int i0, i1;
        java.lang.Throwable r2, $r6, r10;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Callback $r3;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase $r4;
        androidx.sqlite.db.SupportSQLiteDatabase $r5;
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName $r8;
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackException r9;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "sqLiteDatabase");

        r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: boolean migrated> = 1;

     label1:
        $r3 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: androidx.sqlite.db.SupportSQLiteOpenHelper$Callback callback>;

        $r4 = virtualinvoke r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: androidx.sqlite.db.framework.FrameworkSQLiteDatabase getWrappedDb(android.database.sqlite.SQLiteDatabase)>(r1);

        $r5 = (androidx.sqlite.db.SupportSQLiteDatabase) $r4;

        virtualinvoke $r3.<androidx.sqlite.db.SupportSQLiteOpenHelper$Callback: void onUpgrade(androidx.sqlite.db.SupportSQLiteDatabase,int,int)>($r5, i0, i1);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        r9 = new androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackException;

        $r8 = <androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName ON_UPGRADE>;

        specialinvoke r9.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackException: void <init>(androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName,java.lang.Throwable)>($r8, r2);

        r10 = (java.lang.Throwable) r9;

        throw r10;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void onConfigure(android.database.sqlite.SQLiteDatabase)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper r0;
        android.database.sqlite.SQLiteDatabase r1;
        java.lang.Throwable r2, $r6, r10;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Callback $r3;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase $r4;
        androidx.sqlite.db.SupportSQLiteDatabase $r5;
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName $r8;
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackException r9;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "db");

     label1:
        $r3 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: androidx.sqlite.db.SupportSQLiteOpenHelper$Callback callback>;

        $r4 = virtualinvoke r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: androidx.sqlite.db.framework.FrameworkSQLiteDatabase getWrappedDb(android.database.sqlite.SQLiteDatabase)>(r1);

        $r5 = (androidx.sqlite.db.SupportSQLiteDatabase) $r4;

        virtualinvoke $r3.<androidx.sqlite.db.SupportSQLiteOpenHelper$Callback: void onConfigure(androidx.sqlite.db.SupportSQLiteDatabase)>($r5);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        r9 = new androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackException;

        $r8 = <androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName ON_CONFIGURE>;

        specialinvoke r9.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackException: void <init>(androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName,java.lang.Throwable)>($r8, r2);

        r10 = (java.lang.Throwable) r9;

        throw r10;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void onDowngrade(android.database.sqlite.SQLiteDatabase, int, int)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper r0;
        android.database.sqlite.SQLiteDatabase r1;
        int i0, i1;
        java.lang.Throwable r2, $r6, r10;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Callback $r3;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase $r4;
        androidx.sqlite.db.SupportSQLiteDatabase $r5;
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName $r8;
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackException r9;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "db");

        r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: boolean migrated> = 1;

     label1:
        $r3 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: androidx.sqlite.db.SupportSQLiteOpenHelper$Callback callback>;

        $r4 = virtualinvoke r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: androidx.sqlite.db.framework.FrameworkSQLiteDatabase getWrappedDb(android.database.sqlite.SQLiteDatabase)>(r1);

        $r5 = (androidx.sqlite.db.SupportSQLiteDatabase) $r4;

        virtualinvoke $r3.<androidx.sqlite.db.SupportSQLiteOpenHelper$Callback: void onDowngrade(androidx.sqlite.db.SupportSQLiteDatabase,int,int)>($r5, i0, i1);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        r9 = new androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackException;

        $r8 = <androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName ON_DOWNGRADE>;

        specialinvoke r9.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackException: void <init>(androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName,java.lang.Throwable)>($r8, r2);

        r10 = (java.lang.Throwable) r9;

        throw r10;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void onOpen(android.database.sqlite.SQLiteDatabase)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper r0;
        android.database.sqlite.SQLiteDatabase r1;
        java.lang.Throwable r2, $r6, r10;
        boolean $z0;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Callback $r3;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase $r4;
        androidx.sqlite.db.SupportSQLiteDatabase $r5;
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName $r8;
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackException r9;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "db");

        $z0 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: boolean migrated>;

        if $z0 != 0 goto label4;

     label1:
        $r3 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: androidx.sqlite.db.SupportSQLiteOpenHelper$Callback callback>;

        $r4 = virtualinvoke r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: androidx.sqlite.db.framework.FrameworkSQLiteDatabase getWrappedDb(android.database.sqlite.SQLiteDatabase)>(r1);

        $r5 = (androidx.sqlite.db.SupportSQLiteDatabase) $r4;

        virtualinvoke $r3.<androidx.sqlite.db.SupportSQLiteOpenHelper$Callback: void onOpen(androidx.sqlite.db.SupportSQLiteDatabase)>($r5);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        r9 = new androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackException;

        $r8 = <androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName ON_OPEN>;

        specialinvoke r9.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackException: void <init>(androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$CallbackName,java.lang.Throwable)>($r8, r2);

        r10 = (java.lang.Throwable) r9;

        throw r10;

     label4:
        r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: boolean opened> = 1;

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void close()
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper r0;
        java.lang.Throwable r1, $r5;
        androidx.sqlite.util.ProcessLock $r2, $r4, $r6;
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$DBRefHolder $r3;

        r0 := @this: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper;

     label1:
        $r2 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: androidx.sqlite.util.ProcessLock lock>;

        staticinvoke <androidx.sqlite.util.ProcessLock: void lock$default(androidx.sqlite.util.ProcessLock,boolean,int,java.lang.Object)>($r2, 0, 1, null);

        specialinvoke r0.<android.database.sqlite.SQLiteOpenHelper: void close()>();

        $r3 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$DBRefHolder dbRef>;

        virtualinvoke $r3.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$DBRefHolder: void setDb(androidx.sqlite.db.framework.FrameworkSQLiteDatabase)>(null);

        r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: boolean opened> = 0;

     label2:
        $r4 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: androidx.sqlite.util.ProcessLock lock>;

        virtualinvoke $r4.<androidx.sqlite.util.ProcessLock: void unlock()>();

        goto label5;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

     label4:
        $r6 = r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: androidx.sqlite.util.ProcessLock lock>;

        virtualinvoke $r6.<androidx.sqlite.util.ProcessLock: void unlock()>();

        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private static final void _init_$lambda$0(androidx.sqlite.db.SupportSQLiteOpenHelper$Callback, androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$DBRefHolder, android.database.sqlite.SQLiteDatabase)
    {
        androidx.sqlite.db.SupportSQLiteOpenHelper$Callback $r0;
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$DBRefHolder $r1;
        android.database.sqlite.SQLiteDatabase r2;
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$Companion $r3;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase $r4;
        androidx.sqlite.db.SupportSQLiteDatabase $r5;

        $r0 := @parameter0: androidx.sqlite.db.SupportSQLiteOpenHelper$Callback;

        $r1 := @parameter1: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$DBRefHolder;

        r2 := @parameter2: android.database.sqlite.SQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$callback");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$dbRef");

        $r3 = <androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$Companion Companion>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r2, "dbObj");

        $r4 = virtualinvoke $r3.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$Companion: androidx.sqlite.db.framework.FrameworkSQLiteDatabase getWrappedDb(androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$DBRefHolder,android.database.sqlite.SQLiteDatabase)>($r1, r2);

        $r5 = (androidx.sqlite.db.SupportSQLiteDatabase) $r4;

        virtualinvoke $r0.<androidx.sqlite.db.SupportSQLiteOpenHelper$Callback: void onCorruption(androidx.sqlite.db.SupportSQLiteDatabase)>($r5);

        return;
    }

    static void <clinit>()
    {
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$Companion $r0;

        $r0 = new androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$Companion;

        specialinvoke $r0.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper: androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper$Companion Companion> = $r0;

        return;
    }

