androidx.compose.ui.platform.ViewLayer
<androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.platform.ViewLayer$Companion Companion>
<androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.platform.AndroidComposeView ownerView>
<androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.platform.DrawChildContainer container>
<androidx.compose.ui.platform.ViewLayer: kotlin.jvm.functions.Function1 drawBlock>
<androidx.compose.ui.platform.ViewLayer: kotlin.jvm.functions.Function0 invalidateParentLayer>
<androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.platform.OutlineResolver outlineResolver>
<androidx.compose.ui.platform.ViewLayer: boolean clipToBounds>
<androidx.compose.ui.platform.ViewLayer: android.graphics.Rect clipBoundsCache>
<androidx.compose.ui.platform.ViewLayer: boolean isInvalidated>
<androidx.compose.ui.platform.ViewLayer: boolean drawnWithZ>
<androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.graphics.CanvasHolder canvasHolder>
<androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.platform.LayerMatrixCache matrixCache>
<androidx.compose.ui.platform.ViewLayer: long mTransformOrigin>
<androidx.compose.ui.platform.ViewLayer: long layerId>
<androidx.compose.ui.platform.ViewLayer: kotlin.jvm.functions.Function2 getMatrix>
<androidx.compose.ui.platform.ViewLayer: android.view.ViewOutlineProvider OutlineProvider>
<androidx.compose.ui.platform.ViewLayer: java.lang.reflect.Method updateDisplayListIfDirtyMethod>
<androidx.compose.ui.platform.ViewLayer: java.lang.reflect.Field recreateDisplayList>
<androidx.compose.ui.platform.ViewLayer: boolean hasRetrievedMethod>
<androidx.compose.ui.platform.ViewLayer: boolean shouldUseDispatchDraw>
    public void <init>(androidx.compose.ui.platform.AndroidComposeView, androidx.compose.ui.platform.DrawChildContainer, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function0)
    {
        androidx.compose.ui.platform.ViewLayer r0;
        androidx.compose.ui.platform.AndroidComposeView r1, $r7;
        androidx.compose.ui.platform.DrawChildContainer r2, $r14;
        kotlin.jvm.functions.Function1 r3;
        kotlin.jvm.functions.Function0 r4;
        android.content.Context $r5;
        androidx.compose.ui.platform.OutlineResolver $r6;
        androidx.compose.ui.unit.Density $r8;
        androidx.compose.ui.graphics.CanvasHolder $r9;
        androidx.compose.ui.platform.LayerMatrixCache $r10;
        kotlin.jvm.functions.Function2 $r11;
        androidx.compose.ui.graphics.TransformOrigin$Companion $r12;
        long $l0, $l2;
        android.view.View $r13;
        int $i1;

        r0 := @this: androidx.compose.ui.platform.ViewLayer;

        r1 := @parameter0: androidx.compose.ui.platform.AndroidComposeView;

        r2 := @parameter1: androidx.compose.ui.platform.DrawChildContainer;

        r3 := @parameter2: kotlin.jvm.functions.Function1;

        r4 := @parameter3: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "ownerView");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "container");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "drawBlock");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "invalidateParentLayer");

        $r5 = virtualinvoke r1.<androidx.compose.ui.platform.AndroidComposeView: android.content.Context getContext()>();

        specialinvoke r0.<android.view.View: void <init>(android.content.Context)>($r5);

        r0.<androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.platform.AndroidComposeView ownerView> = r1;

        r0.<androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.platform.DrawChildContainer container> = r2;

        r0.<androidx.compose.ui.platform.ViewLayer: kotlin.jvm.functions.Function1 drawBlock> = r3;

        r0.<androidx.compose.ui.platform.ViewLayer: kotlin.jvm.functions.Function0 invalidateParentLayer> = r4;

        $r6 = new androidx.compose.ui.platform.OutlineResolver;

        $r7 = r0.<androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.platform.AndroidComposeView ownerView>;

        $r8 = virtualinvoke $r7.<androidx.compose.ui.platform.AndroidComposeView: androidx.compose.ui.unit.Density getDensity()>();

        specialinvoke $r6.<androidx.compose.ui.platform.OutlineResolver: void <init>(androidx.compose.ui.unit.Density)>($r8);

        r0.<androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.platform.OutlineResolver outlineResolver> = $r6;

        $r9 = new androidx.compose.ui.graphics.CanvasHolder;

        specialinvoke $r9.<androidx.compose.ui.graphics.CanvasHolder: void <init>()>();

        r0.<androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.graphics.CanvasHolder canvasHolder> = $r9;

        $r10 = new androidx.compose.ui.platform.LayerMatrixCache;

        $r11 = <androidx.compose.ui.platform.ViewLayer: kotlin.jvm.functions.Function2 getMatrix>;

        specialinvoke $r10.<androidx.compose.ui.platform.LayerMatrixCache: void <init>(kotlin.jvm.functions.Function2)>($r11);

        r0.<androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.platform.LayerMatrixCache matrixCache> = $r10;

        $r12 = <androidx.compose.ui.graphics.TransformOrigin: androidx.compose.ui.graphics.TransformOrigin$Companion Companion>;

        $l0 = virtualinvoke $r12.<androidx.compose.ui.graphics.TransformOrigin$Companion: long getCenter-SzJe1aQ()>();

        r0.<androidx.compose.ui.platform.ViewLayer: long mTransformOrigin> = $l0;

        virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: void setWillNotDraw(boolean)>(0);

        $r14 = r0.<androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.platform.DrawChildContainer container>;

        $r13 = (android.view.View) r0;

        virtualinvoke $r14.<androidx.compose.ui.platform.DrawChildContainer: void addView(android.view.View)>($r13);

        $i1 = staticinvoke <android.view.View: int generateViewId()>();

        $l2 = (long) $i1;

        r0.<androidx.compose.ui.platform.ViewLayer: long layerId> = $l2;

        return;
    }

    public final androidx.compose.ui.platform.AndroidComposeView getOwnerView()
    {
        androidx.compose.ui.platform.ViewLayer r0;
        androidx.compose.ui.platform.AndroidComposeView $r1;

        r0 := @this: androidx.compose.ui.platform.ViewLayer;

        $r1 = r0.<androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.platform.AndroidComposeView ownerView>;

        return $r1;
    }

    public final androidx.compose.ui.platform.DrawChildContainer getContainer()
    {
        androidx.compose.ui.platform.ViewLayer r0;
        androidx.compose.ui.platform.DrawChildContainer $r1;

        r0 := @this: androidx.compose.ui.platform.ViewLayer;

        $r1 = r0.<androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.platform.DrawChildContainer container>;

        return $r1;
    }

    private final androidx.compose.ui.graphics.Path getManualClipPath()
    {
        androidx.compose.ui.platform.ViewLayer r0;
        boolean $z0, $z1;
        androidx.compose.ui.platform.OutlineResolver $r1, $r2;
        androidx.compose.ui.graphics.Path $r3;

        r0 := @this: androidx.compose.ui.platform.ViewLayer;

        $z0 = virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: boolean getClipToOutline()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.platform.OutlineResolver outlineResolver>;

        $z1 = virtualinvoke $r1.<androidx.compose.ui.platform.OutlineResolver: boolean getOutlineClipSupported()>();

        if $z1 == 0 goto label2;

     label1:
        $r3 = (androidx.compose.ui.graphics.Path) null;

        goto label3;

     label2:
        $r2 = r0.<androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.platform.OutlineResolver outlineResolver>;

        $r3 = virtualinvoke $r2.<androidx.compose.ui.platform.OutlineResolver: androidx.compose.ui.graphics.Path getClipPath()>();

     label3:
        return $r3;
    }

    public final boolean isInvalidated()
    {
        androidx.compose.ui.platform.ViewLayer r0;
        boolean $z0;

        r0 := @this: androidx.compose.ui.platform.ViewLayer;

        $z0 = r0.<androidx.compose.ui.platform.ViewLayer: boolean isInvalidated>;

        return $z0;
    }

    private final void setInvalidated(boolean)
    {
        androidx.compose.ui.platform.ViewLayer r0;
        boolean z0, $z1;
        androidx.compose.ui.node.OwnedLayer $r1;
        androidx.compose.ui.platform.AndroidComposeView $r2;

        r0 := @this: androidx.compose.ui.platform.ViewLayer;

        z0 := @parameter0: boolean;

        $z1 = r0.<androidx.compose.ui.platform.ViewLayer: boolean isInvalidated>;

        if z0 == $z1 goto label1;

        r0.<androidx.compose.ui.platform.ViewLayer: boolean isInvalidated> = z0;

        $r2 = r0.<androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.platform.AndroidComposeView ownerView>;

        $r1 = (androidx.compose.ui.node.OwnedLayer) r0;

        virtualinvoke $r2.<androidx.compose.ui.platform.AndroidComposeView: void notifyLayerIsDirty$ui_release(androidx.compose.ui.node.OwnedLayer,boolean)>($r1, z0);

     label1:
        return;
    }

    public long getLayerId()
    {
        androidx.compose.ui.platform.ViewLayer r0;
        long $l0;

        r0 := @this: androidx.compose.ui.platform.ViewLayer;

        $l0 = r0.<androidx.compose.ui.platform.ViewLayer: long layerId>;

        return $l0;
    }

    public long getOwnerViewId()
    {
        androidx.compose.ui.platform.ViewLayer r0;
        int $i0;
        androidx.compose.ui.platform.AndroidComposeView $r1;
        android.view.View $r2;
        long $l1;

        r0 := @this: androidx.compose.ui.platform.ViewLayer;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 29 goto label1;

        $r1 = r0.<androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.platform.AndroidComposeView ownerView>;

        $r2 = (android.view.View) $r1;

        $l1 = staticinvoke <androidx.compose.ui.platform.ViewLayer$UniqueDrawingIdApi29: long getUniqueDrawingId(android.view.View)>($r2);

        goto label2;

     label1:
        $l1 = -1L;

     label2:
        return $l1;
    }

    public final float getCameraDistancePx()
    {
        androidx.compose.ui.platform.ViewLayer r0;
        float $f0, $f1, $f2;
        android.content.res.Resources $r1;
        android.util.DisplayMetrics $r2;
        int $i0;

        r0 := @this: androidx.compose.ui.platform.ViewLayer;

        $f0 = virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: float getCameraDistance()>();

        $r1 = virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: android.content.res.Resources getResources()>();

        $r2 = virtualinvoke $r1.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $i0 = $r2.<android.util.DisplayMetrics: int densityDpi>;

        $f1 = (float) $i0;

        $f2 = $f0 / $f1;

        return $f2;
    }

    public final void setCameraDistancePx(float)
    {
        androidx.compose.ui.platform.ViewLayer r0;
        float f0, $f1, $f2;
        android.content.res.Resources $r1;
        android.util.DisplayMetrics $r2;
        int $i0;

        r0 := @this: androidx.compose.ui.platform.ViewLayer;

        f0 := @parameter0: float;

        $r1 = virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: android.content.res.Resources getResources()>();

        $r2 = virtualinvoke $r1.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $i0 = $r2.<android.util.DisplayMetrics: int densityDpi>;

        $f1 = (float) $i0;

        $f2 = f0 * $f1;

        virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: void setCameraDistance(float)>($f2);

        return;
    }

    public void updateLayerProperties-NHXXZp8(float, float, float, float, float, float, float, float, float, float, long, androidx.compose.ui.graphics.Shape, boolean, androidx.compose.ui.graphics.RenderEffect, long, long, androidx.compose.ui.unit.LayoutDirection, androidx.compose.ui.unit.Density)
    {
        androidx.compose.ui.platform.ViewLayer r0;
        float f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18;
        long l0, l1, l2, $l3, $l5;
        androidx.compose.ui.graphics.Shape r1, $r13, $r14;
        boolean z0, z1, z2, z3, $z4, $z5, $z6, $z7, $z8, $z9;
        androidx.compose.ui.graphics.RenderEffect r2;
        androidx.compose.ui.unit.LayoutDirection r3;
        androidx.compose.ui.unit.Density r4;
        int $i4, $i6, $i7, $i8, $i9, $i11;
        android.view.View $r5, $r8, $r10;
        androidx.compose.ui.platform.ViewLayerVerificationHelper31 $r6;
        androidx.compose.ui.platform.ViewLayerVerificationHelper28 $r7, $r9;
        byte $b10;
        kotlin.jvm.functions.Function0 $r11;
        androidx.compose.ui.graphics.Path $r16, $r19;
        androidx.compose.ui.platform.OutlineResolver $r18;
        androidx.compose.ui.platform.LayerMatrixCache $r20;

        r0 := @this: androidx.compose.ui.platform.ViewLayer;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        f4 := @parameter4: float;

        f5 := @parameter5: float;

        f6 := @parameter6: float;

        f7 := @parameter7: float;

        f8 := @parameter8: float;

        f9 := @parameter9: float;

        l0 := @parameter10: long;

        r1 := @parameter11: androidx.compose.ui.graphics.Shape;

        z0 := @parameter12: boolean;

        r2 := @parameter13: androidx.compose.ui.graphics.RenderEffect;

        l1 := @parameter14: long;

        l2 := @parameter15: long;

        r3 := @parameter16: androidx.compose.ui.unit.LayoutDirection;

        r4 := @parameter17: androidx.compose.ui.unit.Density;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "shape");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "layoutDirection");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "density");

        r0.<androidx.compose.ui.platform.ViewLayer: long mTransformOrigin> = l0;

        virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: void setScaleX(float)>(f0);

        virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: void setScaleY(float)>(f1);

        virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: void setAlpha(float)>(f2);

        virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: void setTranslationX(float)>(f3);

        virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: void setTranslationY(float)>(f4);

        virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: void setElevation(float)>(f5);

        virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: void setRotation(float)>(f8);

        virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: void setRotationX(float)>(f6);

        virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: void setRotationY(float)>(f7);

        $l3 = r0.<androidx.compose.ui.platform.ViewLayer: long mTransformOrigin>;

        $f10 = staticinvoke <androidx.compose.ui.graphics.TransformOrigin: float getPivotFractionX-impl(long)>($l3);

        $i4 = virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: int getWidth()>();

        $f11 = (float) $i4;

        $f12 = $f10 * $f11;

        virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: void setPivotX(float)>($f12);

        $l5 = r0.<androidx.compose.ui.platform.ViewLayer: long mTransformOrigin>;

        $f13 = staticinvoke <androidx.compose.ui.graphics.TransformOrigin: float getPivotFractionY-impl(long)>($l5);

        $i6 = virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: int getHeight()>();

        $f14 = (float) $i6;

        $f15 = $f13 * $f14;

        virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: void setPivotY(float)>($f15);

        virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: void setCameraDistancePx(float)>(f9);

        if z0 == 0 goto label01;

        $r14 = staticinvoke <androidx.compose.ui.graphics.RectangleShapeKt: androidx.compose.ui.graphics.Shape getRectangleShape()>();

        if r1 != $r14 goto label01;

        $z4 = 1;

        goto label02;

     label01:
        $z4 = 0;

     label02:
        r0.<androidx.compose.ui.platform.ViewLayer: boolean clipToBounds> = $z4;

        specialinvoke r0.<androidx.compose.ui.platform.ViewLayer: void resetClipBounds()>();

        $r16 = specialinvoke r0.<androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.graphics.Path getManualClipPath()>();

        if $r16 == null goto label03;

        $z5 = 1;

        goto label04;

     label03:
        $z5 = 0;

     label04:
        z1 = $z5;

        if z0 == 0 goto label05;

        $r13 = staticinvoke <androidx.compose.ui.graphics.RectangleShapeKt: androidx.compose.ui.graphics.Shape getRectangleShape()>();

        if r1 == $r13 goto label05;

        $z6 = 1;

        goto label06;

     label05:
        $z6 = 0;

     label06:
        virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: void setClipToOutline(boolean)>($z6);

        $r18 = r0.<androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.platform.OutlineResolver outlineResolver>;

        $f17 = virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: float getAlpha()>();

        $z7 = virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: boolean getClipToOutline()>();

        $f18 = virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: float getElevation()>();

        z2 = virtualinvoke $r18.<androidx.compose.ui.platform.OutlineResolver: boolean update(androidx.compose.ui.graphics.Shape,float,boolean,float,androidx.compose.ui.unit.LayoutDirection,androidx.compose.ui.unit.Density)>(r1, $f17, $z7, $f18, r3, r4);

        specialinvoke r0.<androidx.compose.ui.platform.ViewLayer: void updateOutlineResolver()>();

        $r19 = specialinvoke r0.<androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.graphics.Path getManualClipPath()>();

        if $r19 == null goto label07;

        $z8 = 1;

        goto label08;

     label07:
        $z8 = 0;

     label08:
        z3 = $z8;

        if z1 != z3 goto label09;

        if z3 == 0 goto label10;

        if z2 == 0 goto label10;

     label09:
        virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: void invalidate()>();

     label10:
        $z9 = r0.<androidx.compose.ui.platform.ViewLayer: boolean drawnWithZ>;

        if $z9 != 0 goto label11;

        $f16 = virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: float getElevation()>();

        $b10 = $f16 cmpl 0.0F;

        if $b10 <= 0 goto label11;

        $r11 = r0.<androidx.compose.ui.platform.ViewLayer: kotlin.jvm.functions.Function0 invalidateParentLayer>;

        if $r11 == null goto label11;

        interfaceinvoke $r11.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        goto label11;

     label11:
        $r20 = r0.<androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.platform.LayerMatrixCache matrixCache>;

        virtualinvoke $r20.<androidx.compose.ui.platform.LayerMatrixCache: void invalidate()>();

        $i11 = <android.os.Build$VERSION: int SDK_INT>;

        if $i11 < 28 goto label12;

        $r7 = <androidx.compose.ui.platform.ViewLayerVerificationHelper28: androidx.compose.ui.platform.ViewLayerVerificationHelper28 INSTANCE>;

        $r8 = (android.view.View) r0;

        $i8 = staticinvoke <androidx.compose.ui.graphics.ColorKt: int toArgb-8_81llA(long)>(l1);

        virtualinvoke $r7.<androidx.compose.ui.platform.ViewLayerVerificationHelper28: void setOutlineAmbientShadowColor(android.view.View,int)>($r8, $i8);

        $r9 = <androidx.compose.ui.platform.ViewLayerVerificationHelper28: androidx.compose.ui.platform.ViewLayerVerificationHelper28 INSTANCE>;

        $r10 = (android.view.View) r0;

        $i9 = staticinvoke <androidx.compose.ui.graphics.ColorKt: int toArgb-8_81llA(long)>(l2);

        virtualinvoke $r9.<androidx.compose.ui.platform.ViewLayerVerificationHelper28: void setOutlineSpotShadowColor(android.view.View,int)>($r10, $i9);

     label12:
        $i7 = <android.os.Build$VERSION: int SDK_INT>;

        if $i7 < 31 goto label13;

        $r6 = <androidx.compose.ui.platform.ViewLayerVerificationHelper31: androidx.compose.ui.platform.ViewLayerVerificationHelper31 INSTANCE>;

        $r5 = (android.view.View) r0;

        virtualinvoke $r6.<androidx.compose.ui.platform.ViewLayerVerificationHelper31: void setRenderEffect(android.view.View,androidx.compose.ui.graphics.RenderEffect)>($r5, r2);

     label13:
        return;
    }

    public boolean isInLayer-k-4lQ0M(long)
    {
        androidx.compose.ui.platform.ViewLayer r0;
        long l0;
        float f0, f1, $f2, $f3;
        boolean $z0, $z1, $z2, $z3;
        androidx.compose.ui.platform.OutlineResolver $r1;
        byte $b1, $b3, $b4, $b6;
        int $i2, $i5;

        r0 := @this: androidx.compose.ui.platform.ViewLayer;

        l0 := @parameter0: long;

        f0 = staticinvoke <androidx.compose.ui.geometry.Offset: float getX-impl(long)>(l0);

        f1 = staticinvoke <androidx.compose.ui.geometry.Offset: float getY-impl(long)>(l0);

        $z0 = r0.<androidx.compose.ui.platform.ViewLayer: boolean clipToBounds>;

        if $z0 == 0 goto label3;

        $b1 = 0.0F cmpg f0;

        if $b1 > 0 goto label1;

        $i2 = virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: int getWidth()>();

        $f2 = (float) $i2;

        $b3 = f0 cmpg $f2;

        if $b3 >= 0 goto label1;

        $b4 = 0.0F cmpg f1;

        if $b4 > 0 goto label1;

        $i5 = virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: int getHeight()>();

        $f3 = (float) $i5;

        $b6 = f1 cmpg $f3;

        if $b6 >= 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;

     label3:
        $z1 = virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: boolean getClipToOutline()>();

        if $z1 == 0 goto label4;

        $r1 = r0.<androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.platform.OutlineResolver outlineResolver>;

        $z2 = virtualinvoke $r1.<androidx.compose.ui.platform.OutlineResolver: boolean isInOutline-k-4lQ0M(long)>(l0);

        return $z2;

     label4:
        return 1;
    }

    private final void updateOutlineResolver()
    {
        androidx.compose.ui.platform.ViewLayer r0;
        androidx.compose.ui.platform.OutlineResolver $r1;
        android.graphics.Outline $r2;
        android.view.ViewOutlineProvider $r4;

        r0 := @this: androidx.compose.ui.platform.ViewLayer;

        $r1 = r0.<androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.platform.OutlineResolver outlineResolver>;

        $r2 = virtualinvoke $r1.<androidx.compose.ui.platform.OutlineResolver: android.graphics.Outline getOutline()>();

        if $r2 == null goto label1;

        $r4 = <androidx.compose.ui.platform.ViewLayer: android.view.ViewOutlineProvider OutlineProvider>;

        goto label2;

     label1:
        $r4 = (android.view.ViewOutlineProvider) null;

     label2:
        virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: void setOutlineProvider(android.view.ViewOutlineProvider)>($r4);

        return;
    }

    private final void resetClipBounds()
    {
        androidx.compose.ui.platform.ViewLayer r0;
        boolean $z0;
        android.graphics.Rect $r1, $r2, $r4, $r5;
        int $i0, $i1, $i2, $i3;

        r0 := @this: androidx.compose.ui.platform.ViewLayer;

        $z0 = r0.<androidx.compose.ui.platform.ViewLayer: boolean clipToBounds>;

        if $z0 == 0 goto label3;

        $r1 = r0.<androidx.compose.ui.platform.ViewLayer: android.graphics.Rect clipBoundsCache>;

        if $r1 != null goto label1;

        $r4 = new android.graphics.Rect;

        $i2 = virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: int getWidth()>();

        $i3 = virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: int getHeight()>();

        specialinvoke $r4.<android.graphics.Rect: void <init>(int,int,int,int)>(0, 0, $i2, $i3);

        r0.<androidx.compose.ui.platform.ViewLayer: android.graphics.Rect clipBoundsCache> = $r4;

        goto label2;

     label1:
        $r2 = r0.<androidx.compose.ui.platform.ViewLayer: android.graphics.Rect clipBoundsCache>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r2);

        $i0 = virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: int getWidth()>();

        $i1 = virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: int getHeight()>();

        virtualinvoke $r2.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, $i0, $i1);

     label2:
        $r5 = r0.<androidx.compose.ui.platform.ViewLayer: android.graphics.Rect clipBoundsCache>;

        goto label4;

     label3:
        $r5 = (android.graphics.Rect) null;

     label4:
        virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: void setClipBounds(android.graphics.Rect)>($r5);

        return;
    }

    public void resize-ozmzZPI(long)
    {
        androidx.compose.ui.platform.ViewLayer r0;
        long l0, $l4, $l5, $l6;
        int i1, i2, $i3, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        androidx.compose.ui.platform.OutlineResolver $r1;
        androidx.compose.ui.platform.LayerMatrixCache $r2;

        r0 := @this: androidx.compose.ui.platform.ViewLayer;

        l0 := @parameter0: long;

        i1 = staticinvoke <androidx.compose.ui.unit.IntSize: int getWidth-impl(long)>(l0);

        i2 = staticinvoke <androidx.compose.ui.unit.IntSize: int getHeight-impl(long)>(l0);

        $i3 = virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: int getWidth()>();

        if i1 != $i3 goto label1;

        $i13 = virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: int getHeight()>();

        if i2 == $i13 goto label2;

     label1:
        $l4 = r0.<androidx.compose.ui.platform.ViewLayer: long mTransformOrigin>;

        $f0 = staticinvoke <androidx.compose.ui.graphics.TransformOrigin: float getPivotFractionX-impl(long)>($l4);

        $f1 = (float) i1;

        $f2 = $f0 * $f1;

        virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: void setPivotX(float)>($f2);

        $l5 = r0.<androidx.compose.ui.platform.ViewLayer: long mTransformOrigin>;

        $f3 = staticinvoke <androidx.compose.ui.graphics.TransformOrigin: float getPivotFractionY-impl(long)>($l5);

        $f4 = (float) i2;

        $f5 = $f3 * $f4;

        virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: void setPivotY(float)>($f5);

        $r1 = r0.<androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.platform.OutlineResolver outlineResolver>;

        $f7 = (float) i1;

        $f6 = (float) i2;

        $l6 = staticinvoke <androidx.compose.ui.geometry.SizeKt: long Size(float,float)>($f7, $f6);

        virtualinvoke $r1.<androidx.compose.ui.platform.OutlineResolver: void update-uvyYCjk(long)>($l6);

        specialinvoke r0.<androidx.compose.ui.platform.ViewLayer: void updateOutlineResolver()>();

        $i7 = virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: int getLeft()>();

        $i8 = virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: int getTop()>();

        $i9 = virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: int getLeft()>();

        $i10 = $i9 + i1;

        $i11 = virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: int getTop()>();

        $i12 = $i11 + i2;

        virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: void layout(int,int,int,int)>($i7, $i8, $i10, $i12);

        specialinvoke r0.<androidx.compose.ui.platform.ViewLayer: void resetClipBounds()>();

        $r2 = r0.<androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.platform.LayerMatrixCache matrixCache>;

        virtualinvoke $r2.<androidx.compose.ui.platform.LayerMatrixCache: void invalidate()>();

     label2:
        return;
    }

    public void move--gyyYBs(long)
    {
        androidx.compose.ui.platform.ViewLayer r0;
        long l0;
        int i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        androidx.compose.ui.platform.LayerMatrixCache $r1, $r2;

        r0 := @this: androidx.compose.ui.platform.ViewLayer;

        l0 := @parameter0: long;

        i1 = staticinvoke <androidx.compose.ui.unit.IntOffset: int getX-impl(long)>(l0);

        $i3 = virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: int getLeft()>();

        if i1 == $i3 goto label1;

        $i7 = virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: int getLeft()>();

        $i8 = i1 - $i7;

        virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: void offsetLeftAndRight(int)>($i8);

        $r2 = r0.<androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.platform.LayerMatrixCache matrixCache>;

        virtualinvoke $r2.<androidx.compose.ui.platform.LayerMatrixCache: void invalidate()>();

     label1:
        i2 = staticinvoke <androidx.compose.ui.unit.IntOffset: int getY-impl(long)>(l0);

        $i4 = virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: int getTop()>();

        if i2 == $i4 goto label2;

        $i5 = virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: int getTop()>();

        $i6 = i2 - $i5;

        virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: void offsetTopAndBottom(int)>($i6);

        $r1 = r0.<androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.platform.LayerMatrixCache matrixCache>;

        virtualinvoke $r1.<androidx.compose.ui.platform.LayerMatrixCache: void invalidate()>();

     label2:
        return;
    }

    public void drawLayer(androidx.compose.ui.graphics.Canvas)
    {
        androidx.compose.ui.platform.ViewLayer r0;
        androidx.compose.ui.graphics.Canvas r1;
        float $f0;
        byte $b0;
        boolean $z0, $z1, $z2;
        androidx.compose.ui.platform.DrawChildContainer $r2;
        android.view.View $r3;
        long $l1;

        r0 := @this: androidx.compose.ui.platform.ViewLayer;

        r1 := @parameter0: androidx.compose.ui.graphics.Canvas;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "canvas");

        $f0 = virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: float getElevation()>();

        $b0 = $f0 cmpl 0.0F;

        if $b0 <= 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        r0.<androidx.compose.ui.platform.ViewLayer: boolean drawnWithZ> = $z2;

        $z0 = r0.<androidx.compose.ui.platform.ViewLayer: boolean drawnWithZ>;

        if $z0 == 0 goto label3;

        interfaceinvoke r1.<androidx.compose.ui.graphics.Canvas: void enableZ()>();

     label3:
        $r2 = r0.<androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.platform.DrawChildContainer container>;

        $r3 = (android.view.View) r0;

        $l1 = virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: long getDrawingTime()>();

        virtualinvoke $r2.<androidx.compose.ui.platform.DrawChildContainer: void drawChild$ui_release(androidx.compose.ui.graphics.Canvas,android.view.View,long)>(r1, $r3, $l1);

        $z1 = r0.<androidx.compose.ui.platform.ViewLayer: boolean drawnWithZ>;

        if $z1 == 0 goto label4;

        interfaceinvoke r1.<androidx.compose.ui.graphics.Canvas: void disableZ()>();

     label4:
        return;
    }

    protected void dispatchDraw(android.graphics.Canvas)
    {
        androidx.compose.ui.platform.ViewLayer r0;
        android.graphics.Canvas r1, r3;
        androidx.compose.ui.graphics.CanvasHolder r2;
        androidx.compose.ui.graphics.Canvas $r4;
        androidx.compose.ui.graphics.Path r5;
        androidx.compose.ui.graphics.AndroidCanvas $r6, $r7, $r8, $r10;
        androidx.compose.ui.platform.OutlineResolver $r9;
        boolean $z2, z3;
        kotlin.jvm.functions.Function1 $r12;

        r0 := @this: androidx.compose.ui.platform.ViewLayer;

        r1 := @parameter0: android.graphics.Canvas;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "canvas");

        specialinvoke r0.<androidx.compose.ui.platform.ViewLayer: void setInvalidated(boolean)>(0);

        r2 = r0.<androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.graphics.CanvasHolder canvasHolder>;

        $r6 = virtualinvoke r2.<androidx.compose.ui.graphics.CanvasHolder: androidx.compose.ui.graphics.AndroidCanvas getAndroidCanvas()>();

        r3 = virtualinvoke $r6.<androidx.compose.ui.graphics.AndroidCanvas: android.graphics.Canvas getInternalCanvas()>();

        $r7 = virtualinvoke r2.<androidx.compose.ui.graphics.CanvasHolder: androidx.compose.ui.graphics.AndroidCanvas getAndroidCanvas()>();

        virtualinvoke $r7.<androidx.compose.ui.graphics.AndroidCanvas: void setInternalCanvas(android.graphics.Canvas)>(r1);

        $r8 = virtualinvoke r2.<androidx.compose.ui.graphics.CanvasHolder: androidx.compose.ui.graphics.AndroidCanvas getAndroidCanvas()>();

        $r4 = (androidx.compose.ui.graphics.Canvas) $r8;

        z3 = 0;

        r5 = specialinvoke r0.<androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.graphics.Path getManualClipPath()>();

        if r5 != null goto label1;

        $z2 = virtualinvoke r1.<android.graphics.Canvas: boolean isHardwareAccelerated()>();

        if $z2 != 0 goto label2;

     label1:
        z3 = 1;

        interfaceinvoke $r4.<androidx.compose.ui.graphics.Canvas: void save()>();

        $r9 = r0.<androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.platform.OutlineResolver outlineResolver>;

        virtualinvoke $r9.<androidx.compose.ui.platform.OutlineResolver: void clipToOutline(androidx.compose.ui.graphics.Canvas)>($r4);

     label2:
        $r12 = r0.<androidx.compose.ui.platform.ViewLayer: kotlin.jvm.functions.Function1 drawBlock>;

        if $r12 == null goto label3;

        interfaceinvoke $r12.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        goto label3;

     label3:
        if z3 == 0 goto label4;

        interfaceinvoke $r4.<androidx.compose.ui.graphics.Canvas: void restore()>();

     label4:
        $r10 = virtualinvoke r2.<androidx.compose.ui.graphics.CanvasHolder: androidx.compose.ui.graphics.AndroidCanvas getAndroidCanvas()>();

        virtualinvoke $r10.<androidx.compose.ui.graphics.AndroidCanvas: void setInternalCanvas(android.graphics.Canvas)>(r3);

        return;
    }

    public void invalidate()
    {
        androidx.compose.ui.platform.ViewLayer r0;
        boolean $z0;
        androidx.compose.ui.platform.AndroidComposeView $r1;

        r0 := @this: androidx.compose.ui.platform.ViewLayer;

        $z0 = r0.<androidx.compose.ui.platform.ViewLayer: boolean isInvalidated>;

        if $z0 != 0 goto label1;

        specialinvoke r0.<androidx.compose.ui.platform.ViewLayer: void setInvalidated(boolean)>(1);

        specialinvoke r0.<android.view.View: void invalidate()>();

        $r1 = r0.<androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.platform.AndroidComposeView ownerView>;

        virtualinvoke $r1.<androidx.compose.ui.platform.AndroidComposeView: void invalidate()>();

     label1:
        return;
    }

    protected void onLayout(boolean, int, int, int, int)
    {
        androidx.compose.ui.platform.ViewLayer r0;
        boolean z0;
        int i0, i1, i2, i3;

        r0 := @this: androidx.compose.ui.platform.ViewLayer;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        return;
    }

    public void destroy()
    {
        androidx.compose.ui.platform.ViewLayer r0;
        boolean z0, $z1;
        androidx.compose.ui.platform.AndroidComposeView $r1, $r3;
        androidx.compose.ui.node.OwnedLayer $r2;
        int $i0;
        androidx.compose.ui.platform.DrawChildContainer $r4;
        android.view.View $r5;

        r0 := @this: androidx.compose.ui.platform.ViewLayer;

        specialinvoke r0.<androidx.compose.ui.platform.ViewLayer: void setInvalidated(boolean)>(0);

        $r1 = r0.<androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.platform.AndroidComposeView ownerView>;

        virtualinvoke $r1.<androidx.compose.ui.platform.AndroidComposeView: void requestClearInvalidObservations()>();

        r0.<androidx.compose.ui.platform.ViewLayer: kotlin.jvm.functions.Function1 drawBlock> = null;

        r0.<androidx.compose.ui.platform.ViewLayer: kotlin.jvm.functions.Function0 invalidateParentLayer> = null;

        $r3 = r0.<androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.platform.AndroidComposeView ownerView>;

        $r2 = (androidx.compose.ui.node.OwnedLayer) r0;

        z0 = virtualinvoke $r3.<androidx.compose.ui.platform.AndroidComposeView: boolean recycle$ui_release(androidx.compose.ui.node.OwnedLayer)>($r2);

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 >= 23 goto label1;

        $z1 = <androidx.compose.ui.platform.ViewLayer: boolean shouldUseDispatchDraw>;

        if $z1 != 0 goto label1;

        if z0 != 0 goto label2;

     label1:
        $r4 = r0.<androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.platform.DrawChildContainer container>;

        $r5 = (android.view.View) r0;

        virtualinvoke $r4.<androidx.compose.ui.platform.DrawChildContainer: void removeViewInLayout(android.view.View)>($r5);

        goto label3;

     label2:
        virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: void setVisibility(int)>(8);

     label3:
        return;
    }

    public void updateDisplayList()
    {
        androidx.compose.ui.platform.ViewLayer r0;
        boolean $z0, $z1;
        android.view.View $r1;
        androidx.compose.ui.platform.ViewLayer$Companion $r2;

        r0 := @this: androidx.compose.ui.platform.ViewLayer;

        $z0 = r0.<androidx.compose.ui.platform.ViewLayer: boolean isInvalidated>;

        if $z0 == 0 goto label1;

        $z1 = <androidx.compose.ui.platform.ViewLayer: boolean shouldUseDispatchDraw>;

        if $z1 != 0 goto label1;

        specialinvoke r0.<androidx.compose.ui.platform.ViewLayer: void setInvalidated(boolean)>(0);

        $r2 = <androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.platform.ViewLayer$Companion Companion>;

        $r1 = (android.view.View) r0;

        virtualinvoke $r2.<androidx.compose.ui.platform.ViewLayer$Companion: void updateDisplayList(android.view.View)>($r1);

     label1:
        return;
    }

    public void forceLayout()
    {
        androidx.compose.ui.platform.ViewLayer r0;

        r0 := @this: androidx.compose.ui.platform.ViewLayer;

        return;
    }

    public long mapOffset-8S9VItk(long, boolean)
    {
        androidx.compose.ui.platform.ViewLayer r0;
        long l0, $l1;
        boolean z0;
        androidx.compose.ui.platform.LayerMatrixCache $r1, $r3;
        float[] $r2, $r4;
        androidx.compose.ui.geometry.Offset$Companion $r5;

        r0 := @this: androidx.compose.ui.platform.ViewLayer;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label2;

        $r3 = r0.<androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.platform.LayerMatrixCache matrixCache>;

        $r4 = virtualinvoke $r3.<androidx.compose.ui.platform.LayerMatrixCache: float[] calculateInverseMatrix-bWbORWo(java.lang.Object)>(r0);

        if $r4 == null goto label1;

        $l1 = staticinvoke <androidx.compose.ui.graphics.Matrix: long map-MK-Hz9U(float[],long)>($r4, l0);

        goto label3;

     label1:
        $r5 = <androidx.compose.ui.geometry.Offset: androidx.compose.ui.geometry.Offset$Companion Companion>;

        $l1 = virtualinvoke $r5.<androidx.compose.ui.geometry.Offset$Companion: long getInfinite-F1C5BW0()>();

        goto label3;

     label2:
        $r1 = r0.<androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.platform.LayerMatrixCache matrixCache>;

        $r2 = virtualinvoke $r1.<androidx.compose.ui.platform.LayerMatrixCache: float[] calculateMatrix-GrdbGEg(java.lang.Object)>(r0);

        $l1 = staticinvoke <androidx.compose.ui.graphics.Matrix: long map-MK-Hz9U(float[],long)>($r2, l0);

     label3:
        return $l1;
    }

    public void mapBounds(androidx.compose.ui.geometry.MutableRect, boolean)
    {
        androidx.compose.ui.platform.ViewLayer r0;
        androidx.compose.ui.geometry.MutableRect r1;
        boolean z0;
        float[] r2, $r4;
        androidx.compose.ui.platform.LayerMatrixCache $r3, $r5;

        r0 := @this: androidx.compose.ui.platform.ViewLayer;

        r1 := @parameter0: androidx.compose.ui.geometry.MutableRect;

        z0 := @parameter1: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "rect");

        if z0 == 0 goto label2;

        $r5 = r0.<androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.platform.LayerMatrixCache matrixCache>;

        r2 = virtualinvoke $r5.<androidx.compose.ui.platform.LayerMatrixCache: float[] calculateInverseMatrix-bWbORWo(java.lang.Object)>(r0);

        if r2 == null goto label1;

        staticinvoke <androidx.compose.ui.graphics.Matrix: void map-impl(float[],androidx.compose.ui.geometry.MutableRect)>(r2, r1);

        goto label3;

     label1:
        virtualinvoke r1.<androidx.compose.ui.geometry.MutableRect: void set(float,float,float,float)>(0.0F, 0.0F, 0.0F, 0.0F);

        goto label3;

     label2:
        $r3 = r0.<androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.platform.LayerMatrixCache matrixCache>;

        $r4 = virtualinvoke $r3.<androidx.compose.ui.platform.LayerMatrixCache: float[] calculateMatrix-GrdbGEg(java.lang.Object)>(r0);

        staticinvoke <androidx.compose.ui.graphics.Matrix: void map-impl(float[],androidx.compose.ui.geometry.MutableRect)>($r4, r1);

     label3:
        return;
    }

    public void reuseLayer(kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function0)
    {
        androidx.compose.ui.platform.ViewLayer r0;
        kotlin.jvm.functions.Function1 r1;
        kotlin.jvm.functions.Function0 r2;
        int $i0;
        android.view.View $r3;
        androidx.compose.ui.platform.DrawChildContainer $r4;
        androidx.compose.ui.graphics.TransformOrigin$Companion $r5;
        long $l1;
        boolean $z0;

        r0 := @this: androidx.compose.ui.platform.ViewLayer;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        r2 := @parameter1: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "drawBlock");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "invalidateParentLayer");

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 >= 23 goto label1;

        $z0 = <androidx.compose.ui.platform.ViewLayer: boolean shouldUseDispatchDraw>;

        if $z0 == 0 goto label2;

     label1:
        $r4 = r0.<androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.platform.DrawChildContainer container>;

        $r3 = (android.view.View) r0;

        virtualinvoke $r4.<androidx.compose.ui.platform.DrawChildContainer: void addView(android.view.View)>($r3);

        goto label3;

     label2:
        virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer: void setVisibility(int)>(0);

     label3:
        r0.<androidx.compose.ui.platform.ViewLayer: boolean clipToBounds> = 0;

        r0.<androidx.compose.ui.platform.ViewLayer: boolean drawnWithZ> = 0;

        $r5 = <androidx.compose.ui.graphics.TransformOrigin: androidx.compose.ui.graphics.TransformOrigin$Companion Companion>;

        $l1 = virtualinvoke $r5.<androidx.compose.ui.graphics.TransformOrigin$Companion: long getCenter-SzJe1aQ()>();

        r0.<androidx.compose.ui.platform.ViewLayer: long mTransformOrigin> = $l1;

        r0.<androidx.compose.ui.platform.ViewLayer: kotlin.jvm.functions.Function1 drawBlock> = r1;

        r0.<androidx.compose.ui.platform.ViewLayer: kotlin.jvm.functions.Function0 invalidateParentLayer> = r2;

        return;
    }

    public void transform-58bKbWc(float[])
    {
        androidx.compose.ui.platform.ViewLayer r0;
        float[] r1, $r3;
        androidx.compose.ui.platform.LayerMatrixCache $r2;

        r0 := @this: androidx.compose.ui.platform.ViewLayer;

        r1 := @parameter0: float[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "matrix");

        $r2 = r0.<androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.platform.LayerMatrixCache matrixCache>;

        $r3 = virtualinvoke $r2.<androidx.compose.ui.platform.LayerMatrixCache: float[] calculateMatrix-GrdbGEg(java.lang.Object)>(r0);

        staticinvoke <androidx.compose.ui.graphics.Matrix: void timesAssign-58bKbWc(float[],float[])>(r1, $r3);

        return;
    }

    public void inverseTransform-58bKbWc(float[])
    {
        androidx.compose.ui.platform.ViewLayer r0;
        float[] r1, r2;
        androidx.compose.ui.platform.LayerMatrixCache $r3;

        r0 := @this: androidx.compose.ui.platform.ViewLayer;

        r1 := @parameter0: float[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "matrix");

        $r3 = r0.<androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.platform.LayerMatrixCache matrixCache>;

        r2 = virtualinvoke $r3.<androidx.compose.ui.platform.LayerMatrixCache: float[] calculateInverseMatrix-bWbORWo(java.lang.Object)>(r0);

        if r2 == null goto label1;

        staticinvoke <androidx.compose.ui.graphics.Matrix: void timesAssign-58bKbWc(float[],float[])>(r1, r2);

     label1:
        return;
    }

    public static final android.view.ViewOutlineProvider access$getOutlineProvider$cp()
    {
        android.view.ViewOutlineProvider $r0;

        $r0 = <androidx.compose.ui.platform.ViewLayer: android.view.ViewOutlineProvider OutlineProvider>;

        return $r0;
    }

    public static final boolean access$getHasRetrievedMethod$cp()
    {
        boolean $z0;

        $z0 = <androidx.compose.ui.platform.ViewLayer: boolean hasRetrievedMethod>;

        return $z0;
    }

    public static final boolean access$getShouldUseDispatchDraw$cp()
    {
        boolean $z0;

        $z0 = <androidx.compose.ui.platform.ViewLayer: boolean shouldUseDispatchDraw>;

        return $z0;
    }

    public static final void access$setShouldUseDispatchDraw$cp(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        <androidx.compose.ui.platform.ViewLayer: boolean shouldUseDispatchDraw> = z0;

        return;
    }

    public static final void access$setHasRetrievedMethod$cp(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        <androidx.compose.ui.platform.ViewLayer: boolean hasRetrievedMethod> = z0;

        return;
    }

    public static final void access$setUpdateDisplayListIfDirtyMethod$cp(java.lang.reflect.Method)
    {
        java.lang.reflect.Method r0;

        r0 := @parameter0: java.lang.reflect.Method;

        <androidx.compose.ui.platform.ViewLayer: java.lang.reflect.Method updateDisplayListIfDirtyMethod> = r0;

        return;
    }

    public static final void access$setRecreateDisplayList$cp(java.lang.reflect.Field)
    {
        java.lang.reflect.Field r0;

        r0 := @parameter0: java.lang.reflect.Field;

        <androidx.compose.ui.platform.ViewLayer: java.lang.reflect.Field recreateDisplayList> = r0;

        return;
    }

    public static final java.lang.reflect.Method access$getUpdateDisplayListIfDirtyMethod$cp()
    {
        java.lang.reflect.Method $r0;

        $r0 = <androidx.compose.ui.platform.ViewLayer: java.lang.reflect.Method updateDisplayListIfDirtyMethod>;

        return $r0;
    }

    public static final java.lang.reflect.Field access$getRecreateDisplayList$cp()
    {
        java.lang.reflect.Field $r0;

        $r0 = <androidx.compose.ui.platform.ViewLayer: java.lang.reflect.Field recreateDisplayList>;

        return $r0;
    }

    public static final androidx.compose.ui.platform.OutlineResolver access$getOutlineResolver$p(androidx.compose.ui.platform.ViewLayer)
    {
        androidx.compose.ui.platform.ViewLayer $r0;
        androidx.compose.ui.platform.OutlineResolver $r1;

        $r0 := @parameter0: androidx.compose.ui.platform.ViewLayer;

        $r1 = $r0.<androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.platform.OutlineResolver outlineResolver>;

        return $r1;
    }

    static void <clinit>()
    {
        androidx.compose.ui.platform.ViewLayer$Companion $r0;
        androidx.compose.ui.platform.ViewLayer$Companion$getMatrix$1 $r1;
        kotlin.jvm.functions.Function2 $r2;
        androidx.compose.ui.platform.ViewLayer$Companion$OutlineProvider$1 $r3;
        android.view.ViewOutlineProvider $r4;

        $r0 = new androidx.compose.ui.platform.ViewLayer$Companion;

        specialinvoke $r0.<androidx.compose.ui.platform.ViewLayer$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.platform.ViewLayer$Companion Companion> = $r0;

        $r1 = <androidx.compose.ui.platform.ViewLayer$Companion$getMatrix$1: androidx.compose.ui.platform.ViewLayer$Companion$getMatrix$1 INSTANCE>;

        $r2 = (kotlin.jvm.functions.Function2) $r1;

        <androidx.compose.ui.platform.ViewLayer: kotlin.jvm.functions.Function2 getMatrix> = $r2;

        $r3 = new androidx.compose.ui.platform.ViewLayer$Companion$OutlineProvider$1;

        specialinvoke $r3.<androidx.compose.ui.platform.ViewLayer$Companion$OutlineProvider$1: void <init>()>();

        $r4 = (android.view.ViewOutlineProvider) $r3;

        <androidx.compose.ui.platform.ViewLayer: android.view.ViewOutlineProvider OutlineProvider> = $r4;

        return;
    }

androidx.compose.ui.platform.ViewLayer$Companion$getMatrix$1
<androidx.compose.ui.platform.ViewLayer$Companion$getMatrix$1: androidx.compose.ui.platform.ViewLayer$Companion$getMatrix$1 INSTANCE>
    void <init>()
    {
        androidx.compose.ui.platform.ViewLayer$Companion$getMatrix$1 r0;

        r0 := @this: androidx.compose.ui.platform.ViewLayer$Companion$getMatrix$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(2);

        return;
    }

    public final void invoke(android.view.View, android.graphics.Matrix)
    {
        androidx.compose.ui.platform.ViewLayer$Companion$getMatrix$1 r0;
        android.view.View r1;
        android.graphics.Matrix r2, r3;

        r0 := @this: androidx.compose.ui.platform.ViewLayer$Companion$getMatrix$1;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.graphics.Matrix;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "view");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "matrix");

        r3 = virtualinvoke r1.<android.view.View: android.graphics.Matrix getMatrix()>();

        virtualinvoke r2.<android.graphics.Matrix: void set(android.graphics.Matrix)>(r3);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.compose.ui.platform.ViewLayer$Companion$getMatrix$1 r0;
        java.lang.Object r1, r2;
        android.graphics.Matrix $r3;
        android.view.View $r4;
        kotlin.Unit $r5;

        r0 := @this: androidx.compose.ui.platform.ViewLayer$Companion$getMatrix$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (android.view.View) r1;

        $r3 = (android.graphics.Matrix) r2;

        virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer$Companion$getMatrix$1: void invoke(android.view.View,android.graphics.Matrix)>($r4, $r3);

        $r5 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r5;
    }

    static void <clinit>()
    {
        androidx.compose.ui.platform.ViewLayer$Companion$getMatrix$1 $r0;

        $r0 = new androidx.compose.ui.platform.ViewLayer$Companion$getMatrix$1;

        specialinvoke $r0.<androidx.compose.ui.platform.ViewLayer$Companion$getMatrix$1: void <init>()>();

        <androidx.compose.ui.platform.ViewLayer$Companion$getMatrix$1: androidx.compose.ui.platform.ViewLayer$Companion$getMatrix$1 INSTANCE> = $r0;

        return;
    }

androidx.compose.ui.platform.ViewLayer$Companion$OutlineProvider$1
    void <init>()
    {
        androidx.compose.ui.platform.ViewLayer$Companion$OutlineProvider$1 r0;

        r0 := @this: androidx.compose.ui.platform.ViewLayer$Companion$OutlineProvider$1;

        specialinvoke r0.<android.view.ViewOutlineProvider: void <init>()>();

        return;
    }

    public void getOutline(android.view.View, android.graphics.Outline)
    {
        androidx.compose.ui.platform.ViewLayer$Companion$OutlineProvider$1 r0;
        android.view.View r1;
        android.graphics.Outline r2, $r6;
        androidx.compose.ui.platform.ViewLayer $r3, $r4;
        androidx.compose.ui.platform.OutlineResolver $r5;

        r0 := @this: androidx.compose.ui.platform.ViewLayer$Companion$OutlineProvider$1;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.graphics.Outline;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "view");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "outline");

        $r3 = (androidx.compose.ui.platform.ViewLayer) r1;

        $r4 = (androidx.compose.ui.platform.ViewLayer) r1;

        $r5 = staticinvoke <androidx.compose.ui.platform.ViewLayer: androidx.compose.ui.platform.OutlineResolver access$getOutlineResolver$p(androidx.compose.ui.platform.ViewLayer)>($r4);

        $r6 = virtualinvoke $r5.<androidx.compose.ui.platform.OutlineResolver: android.graphics.Outline getOutline()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r6);

        virtualinvoke r2.<android.graphics.Outline: void set(android.graphics.Outline)>($r6);

        return;
    }

androidx.compose.ui.platform.ViewLayer$Companion
    private void <init>()
    {
        androidx.compose.ui.platform.ViewLayer$Companion r0;

        r0 := @this: androidx.compose.ui.platform.ViewLayer$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final android.view.ViewOutlineProvider getOutlineProvider()
    {
        androidx.compose.ui.platform.ViewLayer$Companion r0;
        android.view.ViewOutlineProvider $r1;

        r0 := @this: androidx.compose.ui.platform.ViewLayer$Companion;

        $r1 = staticinvoke <androidx.compose.ui.platform.ViewLayer: android.view.ViewOutlineProvider access$getOutlineProvider$cp()>();

        return $r1;
    }

    public final boolean getHasRetrievedMethod()
    {
        androidx.compose.ui.platform.ViewLayer$Companion r0;
        boolean $z0;

        r0 := @this: androidx.compose.ui.platform.ViewLayer$Companion;

        $z0 = staticinvoke <androidx.compose.ui.platform.ViewLayer: boolean access$getHasRetrievedMethod$cp()>();

        return $z0;
    }

    public final boolean getShouldUseDispatchDraw()
    {
        androidx.compose.ui.platform.ViewLayer$Companion r0;
        boolean $z0;

        r0 := @this: androidx.compose.ui.platform.ViewLayer$Companion;

        $z0 = staticinvoke <androidx.compose.ui.platform.ViewLayer: boolean access$getShouldUseDispatchDraw$cp()>();

        return $z0;
    }

    public final void setShouldUseDispatchDraw$ui_release(boolean)
    {
        androidx.compose.ui.platform.ViewLayer$Companion r0;
        boolean z0;

        r0 := @this: androidx.compose.ui.platform.ViewLayer$Companion;

        z0 := @parameter0: boolean;

        staticinvoke <androidx.compose.ui.platform.ViewLayer: void access$setShouldUseDispatchDraw$cp(boolean)>(z0);

        return;
    }

    public final void updateDisplayList(android.view.View)
    {
        androidx.compose.ui.platform.ViewLayer$Companion r0;
        android.view.View r1;
        boolean $z0;
        java.lang.reflect.Method $r2, $r11, $r15, $r19, r24, r27;
        java.lang.Object[] $r3, $r9, r25, $r28;
        int $i0;
        java.lang.Class[] $r5, $r8, $r17, r23, $r26;
        java.lang.Class $r6, $r7, $r12, $r18, $r20;
        java.lang.Object $r10, $r13;
        java.lang.reflect.Field $r14, $r16, $r21, $r29;
        java.lang.Throwable $r22, r30;

        r0 := @this: androidx.compose.ui.platform.ViewLayer$Companion;

        r1 := @parameter0: android.view.View;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "view");

     label01:
        $z0 = virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer$Companion: boolean getHasRetrievedMethod()>();

        if $z0 != 0 goto label07;

        staticinvoke <androidx.compose.ui.platform.ViewLayer: void access$setHasRetrievedMethod$cp(boolean)>(1);

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 >= 28 goto label02;

        $r18 = class "Landroid/view/View;";

        $r17 = newarray (java.lang.Class)[0];

        $r19 = virtualinvoke $r18.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("updateDisplayListIfDirty", $r17);

        staticinvoke <androidx.compose.ui.platform.ViewLayer: void access$setUpdateDisplayListIfDirtyMethod$cp(java.lang.reflect.Method)>($r19);

        $r20 = class "Landroid/view/View;";

        $r21 = virtualinvoke $r20.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("mRecreateDisplayList");

        staticinvoke <androidx.compose.ui.platform.ViewLayer: void access$setRecreateDisplayList$cp(java.lang.reflect.Field)>($r21);

        goto label03;

     label02:
        $r6 = class "Ljava/lang/Class;";

        r23 = newarray (java.lang.Class)[2];

        r23[0] = class "Ljava/lang/String;";

        $r5 = newarray (java.lang.Class)[0];

        $r7 = virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>();

        r23[1] = $r7;

        r24 = virtualinvoke $r6.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("getDeclaredMethod", r23);

        r25 = newarray (java.lang.Object)[2];

        r25[0] = "updateDisplayListIfDirty";

        $r8 = newarray (java.lang.Class)[0];

        $r9 = (java.lang.Object[]) $r8;

        r25[1] = $r9;

        $r10 = virtualinvoke r24.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(class "Landroid/view/View;", r25);

        $r11 = (java.lang.reflect.Method) $r10;

        staticinvoke <androidx.compose.ui.platform.ViewLayer: void access$setUpdateDisplayListIfDirtyMethod$cp(java.lang.reflect.Method)>($r11);

        $r12 = class "Ljava/lang/Class;";

        $r26 = newarray (java.lang.Class)[1];

        $r26[0] = class "Ljava/lang/String;";

        r27 = virtualinvoke $r12.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("getDeclaredField", $r26);

        $r28 = newarray (java.lang.Object)[1];

        $r28[0] = "mRecreateDisplayList";

        $r13 = virtualinvoke r27.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(class "Landroid/view/View;", $r28);

        $r14 = (java.lang.reflect.Field) $r13;

        staticinvoke <androidx.compose.ui.platform.ViewLayer: void access$setRecreateDisplayList$cp(java.lang.reflect.Field)>($r14);

     label03:
        $r15 = staticinvoke <androidx.compose.ui.platform.ViewLayer: java.lang.reflect.Method access$getUpdateDisplayListIfDirtyMethod$cp()>();

        if $r15 != null goto label04;

        goto label05;

     label04:
        virtualinvoke $r15.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

     label05:
        $r16 = staticinvoke <androidx.compose.ui.platform.ViewLayer: java.lang.reflect.Field access$getRecreateDisplayList$cp()>();

        if $r16 != null goto label06;

        goto label07;

     label06:
        virtualinvoke $r16.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

     label07:
        $r29 = staticinvoke <androidx.compose.ui.platform.ViewLayer: java.lang.reflect.Field access$getRecreateDisplayList$cp()>();

        if $r29 == null goto label08;

        virtualinvoke $r29.<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>(r1, 1);

        goto label08;

     label08:
        $r2 = staticinvoke <androidx.compose.ui.platform.ViewLayer: java.lang.reflect.Method access$getUpdateDisplayListIfDirtyMethod$cp()>();

        if $r2 == null goto label09;

        $r3 = newarray (java.lang.Object)[0];

        virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, $r3);

        goto label11;

     label09:
        goto label11;

     label10:
        $r22 := @caughtexception;

        r30 = $r22;

        virtualinvoke r0.<androidx.compose.ui.platform.ViewLayer$Companion: void setShouldUseDispatchDraw$ui_release(boolean)>(1);

     label11:
        return;

        catch java.lang.Throwable from label01 to label09 with label10;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.compose.ui.platform.ViewLayer$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.compose.ui.platform.ViewLayer$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.compose.ui.platform.ViewLayer$Companion: void <init>()>();

        return;
    }

androidx.compose.ui.platform.ViewLayer$UniqueDrawingIdApi29
<androidx.compose.ui.platform.ViewLayer$UniqueDrawingIdApi29: androidx.compose.ui.platform.ViewLayer$UniqueDrawingIdApi29 INSTANCE>
    private void <init>()
    {
        androidx.compose.ui.platform.ViewLayer$UniqueDrawingIdApi29 r0;

        r0 := @this: androidx.compose.ui.platform.ViewLayer$UniqueDrawingIdApi29;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static final long getUniqueDrawingId(android.view.View)
    {
        android.view.View r0;
        long $l0;

        r0 := @parameter0: android.view.View;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "view");

        $l0 = virtualinvoke r0.<android.view.View: long getUniqueDrawingId()>();

        return $l0;
    }

    static void <clinit>()
    {
        androidx.compose.ui.platform.ViewLayer$UniqueDrawingIdApi29 $r0;

        $r0 = new androidx.compose.ui.platform.ViewLayer$UniqueDrawingIdApi29;

        specialinvoke $r0.<androidx.compose.ui.platform.ViewLayer$UniqueDrawingIdApi29: void <init>()>();

        <androidx.compose.ui.platform.ViewLayer$UniqueDrawingIdApi29: androidx.compose.ui.platform.ViewLayer$UniqueDrawingIdApi29 INSTANCE> = $r0;

        return;
    }

