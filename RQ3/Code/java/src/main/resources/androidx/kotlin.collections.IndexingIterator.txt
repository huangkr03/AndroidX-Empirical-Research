kotlin.collections.IndexingIterator
<kotlin.collections.IndexingIterator: int index>
<kotlin.collections.IndexingIterator: java.util.Iterator iterator>
    public void <init>(java.util.Iterator)
    {
        kotlin.collections.IndexingIterator $r0;
        java.util.Iterator $r1;

        $r0 := @this: kotlin.collections.IndexingIterator;

        $r1 := @parameter0: java.util.Iterator;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "iterator");

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<kotlin.collections.IndexingIterator: java.util.Iterator iterator> = $r1;

        return;
    }

    public final boolean hasNext()
    {
        kotlin.collections.IndexingIterator $r0;
        boolean $z0;
        java.util.Iterator $r1;

        $r0 := @this: kotlin.collections.IndexingIterator;

        $r1 = $r0.<kotlin.collections.IndexingIterator: java.util.Iterator iterator>;

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        return $z0;
    }

    public volatile java.lang.Object next()
    {
        kotlin.collections.IndexingIterator $r0;
        kotlin.collections.IndexedValue $r1;

        $r0 := @this: kotlin.collections.IndexingIterator;

        $r1 = virtualinvoke $r0.<kotlin.collections.IndexingIterator: kotlin.collections.IndexedValue next()>();

        return $r1;
    }

    public final kotlin.collections.IndexedValue next()
    {
        kotlin.collections.IndexingIterator $r0;
        kotlin.collections.IndexedValue $r1;
        int $i0, $i1;
        java.lang.Object $r2;
        java.util.Iterator $r3;

        $r0 := @this: kotlin.collections.IndexingIterator;

        $r1 = new kotlin.collections.IndexedValue;

        $i0 = $r0.<kotlin.collections.IndexingIterator: int index>;

        $i1 = $i0 + 1;

        $r0.<kotlin.collections.IndexingIterator: int index> = $i1;

        if $i0 >= 0 goto label1;

        staticinvoke <kotlin.collections.CollectionsKt: void throwIndexOverflow()>();

     label1:
        $r3 = $r0.<kotlin.collections.IndexingIterator: java.util.Iterator iterator>;

        $r2 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        specialinvoke $r1.<kotlin.collections.IndexedValue: void <init>(int,java.lang.Object)>($i0, $r2);

        return $r1;
    }

    public void remove()
    {
        kotlin.collections.IndexingIterator $r0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: kotlin.collections.IndexingIterator;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r1;
    }

