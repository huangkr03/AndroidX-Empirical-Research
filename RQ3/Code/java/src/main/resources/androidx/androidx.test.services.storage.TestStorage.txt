androidx.test.services.storage.TestStorage
<androidx.test.services.storage.TestStorage: java.lang.String TAG>
<androidx.test.services.storage.TestStorage: java.lang.String PROPERTIES_FILE_NAME>
<androidx.test.services.storage.TestStorage: android.content.ContentResolver contentResolver>
    private static android.database.Cursor doQuery(android.content.ContentResolver, android.net.Uri)
    {
        android.content.ContentResolver r0;
        android.net.Uri r1;
        android.database.Cursor r2;
        java.lang.Object[] $r6;
        java.lang.String $r7;
        androidx.test.services.storage.TestStorageException r8;
        java.lang.Throwable r9;

        r0 := @parameter0: android.content.ContentResolver;

        r1 := @parameter1: android.net.Uri;

        staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r2 = virtualinvoke r0.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>(r1, null, null, null, null);

        if r2 != null goto label1;

        r8 = new androidx.test.services.storage.TestStorageException;

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r1;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Failed to resolve query for URI: %s", $r6);

        specialinvoke r8.<androidx.test.services.storage.TestStorageException: void <init>(java.lang.String)>($r7);

        r9 = (java.lang.Throwable) r8;

        throw r9;

     label1:
        return r2;
    }

    public static android.net.Uri getInputFileUri(java.lang.String)
    {
        java.lang.String r0;
        androidx.test.services.storage.file.HostedFile$FileHost $r2;
        android.net.Uri $r3;

        r0 := @parameter0: java.lang.String;

        staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r2 = <androidx.test.services.storage.file.HostedFile$FileHost: androidx.test.services.storage.file.HostedFile$FileHost TEST_FILE>;

        $r3 = staticinvoke <androidx.test.services.storage.file.HostedFile: android.net.Uri buildUri(androidx.test.services.storage.file.HostedFile$FileHost,java.lang.String)>($r2, r0);

        return $r3;
    }

    public static android.net.Uri getOutputFileUri(java.lang.String)
    {
        java.lang.String r0;
        androidx.test.services.storage.file.HostedFile$FileHost $r2;
        android.net.Uri $r3;

        r0 := @parameter0: java.lang.String;

        staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r2 = <androidx.test.services.storage.file.HostedFile$FileHost: androidx.test.services.storage.file.HostedFile$FileHost OUTPUT>;

        $r3 = staticinvoke <androidx.test.services.storage.file.HostedFile: android.net.Uri buildUri(androidx.test.services.storage.file.HostedFile$FileHost,java.lang.String)>($r2, r0);

        return $r3;
    }

    private static android.net.Uri getPropertyFileUri()
    {
        androidx.test.services.storage.file.HostedFile$FileHost $r0;
        android.net.Uri $r1;

        $r0 = <androidx.test.services.storage.file.HostedFile$FileHost: androidx.test.services.storage.file.HostedFile$FileHost EXPORT_PROPERTIES>;

        $r1 = staticinvoke <androidx.test.services.storage.file.HostedFile: android.net.Uri buildUri(androidx.test.services.storage.file.HostedFile$FileHost,java.lang.String)>($r0, "properties.dat");

        return $r1;
    }

    public java.io.InputStream openInputFile(java.lang.String) throws java.io.FileNotFoundException
    {
        androidx.test.services.storage.TestStorage r0;
        java.lang.String r1;
        android.net.Uri r2;
        android.content.ContentResolver $r3;
        java.io.InputStream $r4;

        r0 := @this: androidx.test.services.storage.TestStorage;

        r1 := @parameter0: java.lang.String;

        r2 = staticinvoke <androidx.test.services.storage.TestStorage: android.net.Uri getInputFileUri(java.lang.String)>(r1);

        $r3 = r0.<androidx.test.services.storage.TestStorage: android.content.ContentResolver contentResolver>;

        $r4 = staticinvoke <androidx.test.services.storage.internal.TestStorageUtil: java.io.InputStream getInputStream(android.net.Uri,android.content.ContentResolver)>(r2, $r3);

        return $r4;
    }

    public java.io.InputStream openInternalInputFile(java.lang.String) throws java.io.IOException
    {
        androidx.test.services.storage.TestStorage r0;
        java.lang.String r1;
        android.net.Uri r2;
        androidx.test.services.storage.file.HostedFile$FileHost $r4;
        android.content.ContentResolver $r5;
        java.io.InputStream $r6;

        r0 := @this: androidx.test.services.storage.TestStorage;

        r1 := @parameter0: java.lang.String;

        staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = <androidx.test.services.storage.file.HostedFile$FileHost: androidx.test.services.storage.file.HostedFile$FileHost INTERNAL_USE_ONLY>;

        r2 = staticinvoke <androidx.test.services.storage.file.HostedFile: android.net.Uri buildUri(androidx.test.services.storage.file.HostedFile$FileHost,java.lang.String)>($r4, r1);

        $r5 = r0.<androidx.test.services.storage.TestStorage: android.content.ContentResolver contentResolver>;

        $r6 = staticinvoke <androidx.test.services.storage.internal.TestStorageUtil: java.io.InputStream getInputStream(android.net.Uri,android.content.ContentResolver)>(r2, $r5);

        return $r6;
    }

    public java.io.OutputStream openInternalOutputFile(java.lang.String) throws java.io.IOException
    {
        androidx.test.services.storage.TestStorage r0;
        java.lang.String r1;
        android.net.Uri r2;
        androidx.test.services.storage.file.HostedFile$FileHost $r4;
        android.content.ContentResolver $r5;
        java.io.OutputStream $r6;

        r0 := @this: androidx.test.services.storage.TestStorage;

        r1 := @parameter0: java.lang.String;

        staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = <androidx.test.services.storage.file.HostedFile$FileHost: androidx.test.services.storage.file.HostedFile$FileHost INTERNAL_USE_ONLY>;

        r2 = staticinvoke <androidx.test.services.storage.file.HostedFile: android.net.Uri buildUri(androidx.test.services.storage.file.HostedFile$FileHost,java.lang.String)>($r4, r1);

        $r5 = r0.<androidx.test.services.storage.TestStorage: android.content.ContentResolver contentResolver>;

        $r6 = staticinvoke <androidx.test.services.storage.internal.TestStorageUtil: java.io.OutputStream getOutputStream(android.net.Uri,android.content.ContentResolver)>(r2, $r5);

        return $r6;
    }

    public java.io.OutputStream openOutputFile(java.lang.String) throws java.io.FileNotFoundException
    {
        androidx.test.services.storage.TestStorage r0;
        java.lang.String r1;
        java.io.OutputStream $r2;

        r0 := @this: androidx.test.services.storage.TestStorage;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<androidx.test.services.storage.TestStorage: java.io.OutputStream openOutputFile(java.lang.String,boolean)>(r1, 0);

        return $r2;
    }

    public java.io.OutputStream openOutputFile(java.lang.String, boolean) throws java.io.FileNotFoundException
    {
        androidx.test.services.storage.TestStorage r0;
        java.lang.String r1;
        boolean z0;
        android.net.Uri r2;
        android.content.ContentResolver $r4;
        java.io.OutputStream $r5;

        r0 := @this: androidx.test.services.storage.TestStorage;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r2 = staticinvoke <androidx.test.services.storage.TestStorage: android.net.Uri getOutputFileUri(java.lang.String)>(r1);

        $r4 = r0.<androidx.test.services.storage.TestStorage: android.content.ContentResolver contentResolver>;

        $r5 = staticinvoke <androidx.test.services.storage.internal.TestStorageUtil: java.io.OutputStream getOutputStream(android.net.Uri,android.content.ContentResolver,boolean)>(r2, $r4, z0);

        return $r5;
    }

    public java.lang.String getInputArg(java.lang.String)
    {
        androidx.test.services.storage.TestStorage r0;
        java.lang.String r1, r3, $r11, $r14;
        android.net.Uri r2;
        java.lang.Throwable r4, $r15, r19, r20;
        androidx.test.services.storage.file.PropertyFile$Authority $r6;
        android.content.ContentResolver $r7;
        int $i0, $i1, $i2;
        androidx.test.services.storage.file.PropertyFile$Column $r8;
        java.lang.Object[] $r10, $r13;
        android.database.Cursor r16;
        androidx.test.services.storage.TestStorageException r17, r18;

        r0 := @this: androidx.test.services.storage.TestStorage;

        r1 := @parameter0: java.lang.String;

        staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r6 = <androidx.test.services.storage.file.PropertyFile$Authority: androidx.test.services.storage.file.PropertyFile$Authority TEST_ARGS>;

        r2 = staticinvoke <androidx.test.services.storage.file.PropertyFile: android.net.Uri buildUri(androidx.test.services.storage.file.PropertyFile$Authority,java.lang.String)>($r6, r1);

        r16 = null;

     label1:
        $r7 = r0.<androidx.test.services.storage.TestStorage: android.content.ContentResolver contentResolver>;

        r16 = staticinvoke <androidx.test.services.storage.TestStorage: android.database.Cursor doQuery(android.content.ContentResolver,android.net.Uri)>($r7, r2);

        $i0 = interfaceinvoke r16.<android.database.Cursor: int getCount()>();

        if $i0 != 0 goto label2;

        r17 = new androidx.test.services.storage.TestStorageException;

        $r13 = newarray (java.lang.Object)[1];

        $r13[0] = r2;

        $r14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Query for URI \'%s\' did not return any results. Make sure the argName is actually being passed in as a test argument.", $r13);

        specialinvoke r17.<androidx.test.services.storage.TestStorageException: void <init>(java.lang.String)>($r14);

        r19 = (java.lang.Throwable) r17;

        throw r19;

     label2:
        $i1 = interfaceinvoke r16.<android.database.Cursor: int getCount()>();

        if $i1 <= 1 goto label3;

        r18 = new androidx.test.services.storage.TestStorageException;

        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = r2;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Query for URI \'%s\' returned more than one result. Weird.", $r10);

        specialinvoke r18.<androidx.test.services.storage.TestStorageException: void <init>(java.lang.String)>($r11);

        r20 = (java.lang.Throwable) r18;

        throw r20;

     label3:
        interfaceinvoke r16.<android.database.Cursor: boolean moveToFirst()>();

        $r8 = <androidx.test.services.storage.file.PropertyFile$Column: androidx.test.services.storage.file.PropertyFile$Column VALUE>;

        $i2 = virtualinvoke $r8.<androidx.test.services.storage.file.PropertyFile$Column: int getPosition()>();

        r3 = interfaceinvoke r16.<android.database.Cursor: java.lang.String getString(int)>($i2);

     label4:
        if r16 == null goto label5;

        interfaceinvoke r16.<android.database.Cursor: void close()>();

     label5:
        return r3;

     label6:
        $r15 := @caughtexception;

        r4 = $r15;

     label7:
        if r16 == null goto label8;

        interfaceinvoke r16.<android.database.Cursor: void close()>();

     label8:
        throw r4;

        catch java.lang.Throwable from label1 to label4 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public java.util.Map getInputArgs()
    {
        androidx.test.services.storage.TestStorage r0;
        android.net.Uri r1;
        java.util.Map r2;
        java.lang.Throwable r3, $r6;
        androidx.test.services.storage.file.PropertyFile$Authority $r4;
        android.content.ContentResolver $r5;
        android.database.Cursor r7;

        r0 := @this: androidx.test.services.storage.TestStorage;

        $r4 = <androidx.test.services.storage.file.PropertyFile$Authority: androidx.test.services.storage.file.PropertyFile$Authority TEST_ARGS>;

        r1 = staticinvoke <androidx.test.services.storage.file.PropertyFile: android.net.Uri buildUri(androidx.test.services.storage.file.PropertyFile$Authority)>($r4);

        r7 = null;

     label1:
        $r5 = r0.<androidx.test.services.storage.TestStorage: android.content.ContentResolver contentResolver>;

        r7 = staticinvoke <androidx.test.services.storage.TestStorage: android.database.Cursor doQuery(android.content.ContentResolver,android.net.Uri)>($r5, r1);

        r2 = staticinvoke <androidx.test.services.storage.TestStorage: java.util.Map getProperties(android.database.Cursor)>(r7);

     label2:
        if r7 == null goto label3;

        interfaceinvoke r7.<android.database.Cursor: void close()>();

     label3:
        return r2;

     label4:
        $r6 := @caughtexception;

        r3 = $r6;

     label5:
        if r7 == null goto label6;

        interfaceinvoke r7.<android.database.Cursor: void close()>();

     label6:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.util.Map getOutputProperties()
    {
        androidx.test.services.storage.TestStorage r0;
        android.net.Uri r1;
        java.lang.Throwable r2, $r7, $r8, $r11, r20, r21;
        android.content.ContentResolver $r3;
        java.io.ObjectInputStream $r4, r15;
        java.lang.Object $r5;
        java.util.HashMap $r6, $r10, r18;
        java.lang.String $r9, $r13, $r14;
        java.lang.Object[] $r12;
        java.io.InputStream r16;
        java.util.Map r17, r19;

        r0 := @this: androidx.test.services.storage.TestStorage;

        r1 = staticinvoke <androidx.test.services.storage.TestStorage: android.net.Uri getPropertyFileUri()>();

        r15 = null;

        r16 = null;

     label01:
        $r3 = r0.<androidx.test.services.storage.TestStorage: android.content.ContentResolver contentResolver>;

        r16 = staticinvoke <androidx.test.services.storage.internal.TestStorageUtil: java.io.InputStream getInputStream(android.net.Uri,android.content.ContentResolver)>(r1, $r3);

        $r4 = new java.io.ObjectInputStream;

        specialinvoke $r4.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>(r16);

        r15 = $r4;

        $r5 = virtualinvoke r15.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        r17 = (java.util.Map) $r5;

        if r17 != null goto label03;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r18 = $r6;

     label02:
        staticinvoke <androidx.test.services.storage.TestStorage: void silentlyClose(java.io.InputStream)>(r15);

        staticinvoke <androidx.test.services.storage.TestStorage: void silentlyClose(java.io.InputStream)>(r16);

        return r18;

     label03:
        r19 = r17;

     label04:
        staticinvoke <androidx.test.services.storage.TestStorage: void silentlyClose(java.io.InputStream)>(r15);

        staticinvoke <androidx.test.services.storage.TestStorage: void silentlyClose(java.io.InputStream)>(r16);

        return r19;

     label05:
        $r11 := @caughtexception;

        r20 = $r11;

        $r13 = <androidx.test.services.storage.TestStorage: java.lang.String TAG>;

        $r12 = newarray (java.lang.Object)[1];

        $r12[0] = r1;

        $r14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s: does not exist, we must be the first call.", $r12);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r13, $r14);

     label06:
        staticinvoke <androidx.test.services.storage.TestStorage: void silentlyClose(java.io.InputStream)>(r15);

        staticinvoke <androidx.test.services.storage.TestStorage: void silentlyClose(java.io.InputStream)>(r16);

        goto label11;

     label07:
        $r8 := @caughtexception;

        r21 = $r8;

        $r9 = <androidx.test.services.storage.TestStorage: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r9, "Failed to read recorded stats!", r21);

     label08:
        staticinvoke <androidx.test.services.storage.TestStorage: void silentlyClose(java.io.InputStream)>(r15);

        staticinvoke <androidx.test.services.storage.TestStorage: void silentlyClose(java.io.InputStream)>(r16);

        goto label11;

     label09:
        $r7 := @caughtexception;

        r2 = $r7;

     label10:
        staticinvoke <androidx.test.services.storage.TestStorage: void silentlyClose(java.io.InputStream)>(r15);

        staticinvoke <androidx.test.services.storage.TestStorage: void silentlyClose(java.io.InputStream)>(r16);

        throw r2;

     label11:
        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        return $r10;

        catch java.io.FileNotFoundException from label01 to label02 with label05;
        catch java.io.FileNotFoundException from label03 to label04 with label05;
        catch java.io.IOException from label01 to label02 with label07;
        catch java.lang.ClassNotFoundException from label01 to label02 with label07;
        catch java.io.IOException from label03 to label04 with label07;
        catch java.lang.ClassNotFoundException from label03 to label04 with label07;
        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private static java.util.Map getProperties(android.database.Cursor)
    {
        android.database.Cursor r0;
        java.util.HashMap r1, $r3;
        boolean $z0;
        androidx.test.services.storage.file.PropertyFile$Column $r4, $r6;
        int $i0, $i1;
        java.lang.String $r5, $r7;

        r0 := @parameter0: android.database.Cursor;

        staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r1 = $r3;

     label1:
        $z0 = interfaceinvoke r0.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label2;

        $r4 = <androidx.test.services.storage.file.PropertyFile$Column: androidx.test.services.storage.file.PropertyFile$Column NAME>;

        $i0 = virtualinvoke $r4.<androidx.test.services.storage.file.PropertyFile$Column: int getPosition()>();

        $r5 = interfaceinvoke r0.<android.database.Cursor: java.lang.String getString(int)>($i0);

        $r6 = <androidx.test.services.storage.file.PropertyFile$Column: androidx.test.services.storage.file.PropertyFile$Column VALUE>;

        $i1 = virtualinvoke $r6.<androidx.test.services.storage.file.PropertyFile$Column: int getPosition()>();

        $r7 = interfaceinvoke r0.<android.database.Cursor: java.lang.String getString(int)>($i1);

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r7);

        goto label1;

     label2:
        return r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        $r0 = class "Landroidx/test/services/storage/TestStorage;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <androidx.test.services.storage.TestStorage: java.lang.String TAG> = $r1;

        return;
    }

    public void <init>()
    {
        androidx.test.services.storage.TestStorage r0;
        android.app.Instrumentation $r1;
        android.content.Context $r2;
        android.content.ContentResolver $r3;

        r0 := @this: androidx.test.services.storage.TestStorage;

        $r1 = staticinvoke <androidx.test.platform.app.InstrumentationRegistry: android.app.Instrumentation getInstrumentation()>();

        $r2 = virtualinvoke $r1.<android.app.Instrumentation: android.content.Context getTargetContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        specialinvoke r0.<androidx.test.services.storage.TestStorage: void <init>(android.content.ContentResolver)>($r3);

        return;
    }

    public void <init>(android.content.ContentResolver)
    {
        androidx.test.services.storage.TestStorage r0;
        android.content.ContentResolver r1;

        r0 := @this: androidx.test.services.storage.TestStorage;

        r1 := @parameter0: android.content.ContentResolver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.test.services.storage.TestStorage: android.content.ContentResolver contentResolver> = r1;

        return;
    }

    public void addOutputProperties(java.util.Map)
    {
        androidx.test.services.storage.TestStorage r0;
        java.util.Map r1, r2;
        android.net.Uri r3;
        java.lang.Throwable r4, $r9, $r11, $r12, r16, r17, r22, r23;
        boolean $z0;
        android.content.ContentResolver $r6;
        java.io.OutputStream $r7;
        java.io.ObjectOutputStream r14, r19;
        java.io.BufferedOutputStream r15, r18;
        androidx.test.services.storage.TestStorageException r20, r21;

        r0 := @this: androidx.test.services.storage.TestStorage;

        r1 := @parameter0: java.util.Map;

        if r1 == null goto label1;

        $z0 = interfaceinvoke r1.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        return;

     label2:
        r2 = virtualinvoke r0.<androidx.test.services.storage.TestStorage: java.util.Map getOutputProperties()>();

        interfaceinvoke r2.<java.util.Map: void putAll(java.util.Map)>(r1);

        r3 = staticinvoke <androidx.test.services.storage.TestStorage: android.net.Uri getPropertyFileUri()>();

        r14 = null;

     label3:
        r18 = new java.io.BufferedOutputStream;

        $r6 = r0.<androidx.test.services.storage.TestStorage: android.content.ContentResolver contentResolver>;

        $r7 = staticinvoke <androidx.test.services.storage.internal.TestStorageUtil: java.io.OutputStream getOutputStream(android.net.Uri,android.content.ContentResolver)>(r3, $r6);

        specialinvoke r18.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r7);

        r15 = r18;

        r19 = new java.io.ObjectOutputStream;

        specialinvoke r19.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>(r15);

        r14 = r19;

        virtualinvoke r14.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r2);

     label4:
        staticinvoke <androidx.test.services.storage.TestStorage: void silentlyClose(java.io.OutputStream)>(r14);

        goto label9;

     label5:
        $r9 := @caughtexception;

        r16 = $r9;

        r20 = new androidx.test.services.storage.TestStorageException;

        specialinvoke r20.<androidx.test.services.storage.TestStorageException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to create file", r16);

        r22 = (java.lang.Throwable) r20;

        throw r22;

     label6:
        $r12 := @caughtexception;

        r17 = $r12;

        r21 = new androidx.test.services.storage.TestStorageException;

        specialinvoke r21.<androidx.test.services.storage.TestStorageException: void <init>(java.lang.String,java.lang.Throwable)>("I/O error occurred during reading test properties.", r17);

        r23 = (java.lang.Throwable) r21;

        throw r23;

     label7:
        $r11 := @caughtexception;

        r4 = $r11;

     label8:
        staticinvoke <androidx.test.services.storage.TestStorage: void silentlyClose(java.io.OutputStream)>(r14);

        throw r4;

     label9:
        return;

        catch java.io.FileNotFoundException from label3 to label4 with label5;
        catch java.io.IOException from label3 to label4 with label6;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label8 with label7;
    }

    private static void silentlyClose(java.io.InputStream)
    {
        java.io.InputStream r0;
        java.lang.Throwable r1, $r2;

        r0 := @parameter0: java.io.InputStream;

        if r0 == null goto label4;

     label1:
        virtualinvoke r0.<java.io.InputStream: void close()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private static void silentlyClose(java.io.OutputStream)
    {
        java.io.OutputStream r0;
        java.lang.Throwable r1, $r2;

        r0 := @parameter0: java.io.OutputStream;

        if r0 == null goto label4;

     label1:
        virtualinvoke r0.<java.io.OutputStream: void close()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

