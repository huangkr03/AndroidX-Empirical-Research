androidx.room.compiler.processing.javac.ElementExtKt
<androidx.room.compiler.processing.javac.ElementExtKt: java.lang.String[] NONNULL_ANNOTATIONS>
<androidx.room.compiler.processing.javac.ElementExtKt: java.lang.String[] NULLABLE_ANNOTATIONS>
    private static final boolean hasAnyOf(javax.lang.model.element.Element, java.lang.String[])
    {
        javax.lang.model.element.Element $r0, $r12;
        java.lang.String[] r1;
        java.lang.Iterable $r2;
        java.util.Iterator r3;
        java.lang.Object r4;
        javax.lang.model.element.AnnotationMirror r5;
        javax.lang.model.element.TypeElement r6;
        int i0, i1;
        java.lang.String r8, r9;
        java.util.List $r10;
        boolean $z4, $z5, $z6, $z7, $z8, $z9;
        javax.lang.model.type.DeclaredType $r11;
        javax.lang.model.element.Name $r13;
        java.lang.CharSequence $r14;
        java.util.Collection $r15;

        $r0 := @parameter0: javax.lang.model.element.Element;

        r1 := @parameter1: java.lang.String[];

        $r10 = interfaceinvoke $r0.<javax.lang.model.element.Element: java.util.List getAnnotationMirrors()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r10, "annotationMirrors");

        $r2 = (java.lang.Iterable) $r10;

        $z4 = $r2 instanceof java.util.Collection;

        if $z4 == 0 goto label1;

        $r15 = (java.util.Collection) $r2;

        $z6 = interfaceinvoke $r15.<java.util.Collection: boolean isEmpty()>();

        if $z6 == 0 goto label1;

        $z7 = 0;

        goto label8;

     label1:
        r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z8 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label7;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (javax.lang.model.element.AnnotationMirror) r4;

        $r11 = interfaceinvoke r5.<javax.lang.model.element.AnnotationMirror: javax.lang.model.type.DeclaredType getAnnotationType()>();

        $r12 = interfaceinvoke $r11.<javax.lang.model.type.DeclaredType: javax.lang.model.element.Element asElement()>();

        r6 = staticinvoke <com.google.auto.common.MoreElements: javax.lang.model.element.TypeElement asType(javax.lang.model.element.Element)>($r12);

        i1 = 0;

        i0 = lengthof r1;

     label3:
        if i1 >= i0 goto label5;

        r8 = r1[i1];

        r9 = r8;

        $r13 = interfaceinvoke r6.<javax.lang.model.element.TypeElement: javax.lang.model.element.Name getQualifiedName()>();

        $r14 = (java.lang.CharSequence) r9;

        $z5 = interfaceinvoke $r13.<javax.lang.model.element.Name: boolean contentEquals(java.lang.CharSequence)>($r14);

        if $z5 == 0 goto label4;

        $z9 = 1;

        goto label6;

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        $z9 = 0;

     label6:
        if $z9 == 0 goto label2;

        $z7 = 1;

        goto label8;

     label7:
        $z7 = 0;

     label8:
        return $z7;
    }

    public static final androidx.room.compiler.processing.XNullability getNullability(javax.lang.model.element.Element)
    {
        javax.lang.model.element.Element $r0;
        javax.lang.model.type.TypeMirror $r1;
        javax.lang.model.type.TypeKind $r2;
        boolean $z0, $z1, $z2;
        java.lang.String[] $r3, $r4;
        androidx.room.compiler.processing.XNullability $r5;

        $r0 := @parameter0: javax.lang.model.element.Element;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = interfaceinvoke $r0.<javax.lang.model.element.Element: javax.lang.model.type.TypeMirror asType()>();

        $r2 = interfaceinvoke $r1.<javax.lang.model.type.TypeMirror: javax.lang.model.type.TypeKind getKind()>();

        $z0 = virtualinvoke $r2.<javax.lang.model.type.TypeKind: boolean isPrimitive()>();

        if $z0 != 0 goto label1;

        $r3 = <androidx.room.compiler.processing.javac.ElementExtKt: java.lang.String[] NONNULL_ANNOTATIONS>;

        $z1 = staticinvoke <androidx.room.compiler.processing.javac.ElementExtKt: boolean hasAnyOf(javax.lang.model.element.Element,java.lang.String[])>($r0, $r3);

        if $z1 == 0 goto label2;

     label1:
        $r5 = <androidx.room.compiler.processing.XNullability: androidx.room.compiler.processing.XNullability NONNULL>;

        goto label4;

     label2:
        $r4 = <androidx.room.compiler.processing.javac.ElementExtKt: java.lang.String[] NULLABLE_ANNOTATIONS>;

        $z2 = staticinvoke <androidx.room.compiler.processing.javac.ElementExtKt: boolean hasAnyOf(javax.lang.model.element.Element,java.lang.String[])>($r0, $r4);

        if $z2 == 0 goto label3;

        $r5 = <androidx.room.compiler.processing.XNullability: androidx.room.compiler.processing.XNullability NULLABLE>;

        goto label4;

     label3:
        $r5 = <androidx.room.compiler.processing.XNullability: androidx.room.compiler.processing.XNullability UNKNOWN>;

     label4:
        return $r5;
    }

    public static final androidx.room.compiler.processing.javac.JavacTypeElement requireEnclosingType(javax.lang.model.element.Element, androidx.room.compiler.processing.javac.JavacProcessingEnv)
    {
        javax.lang.model.element.Element $r0;
        androidx.room.compiler.processing.javac.JavacProcessingEnv r1;
        androidx.room.compiler.processing.javac.JavacTypeElement $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.IllegalStateException $r6;
        java.lang.String $r7, $r8;

        $r0 := @parameter0: javax.lang.model.element.Element;

        r1 := @parameter1: androidx.room.compiler.processing.javac.JavacProcessingEnv;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "env");

        $r2 = staticinvoke <androidx.room.compiler.processing.javac.ElementExtKt: androidx.room.compiler.processing.javac.JavacTypeElement enclosingType(javax.lang.model.element.Element,androidx.room.compiler.processing.javac.JavacProcessingEnv)>($r0, r1);

        if $r2 != null goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find required enclosing type for ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = new java.lang.IllegalStateException;

        $r7 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label1:
        return $r2;
    }

    public static final androidx.room.compiler.processing.javac.JavacTypeElement enclosingType(javax.lang.model.element.Element, androidx.room.compiler.processing.javac.JavacProcessingEnv)
    {
        javax.lang.model.element.Element $r0, $r2, $r3;
        androidx.room.compiler.processing.javac.JavacProcessingEnv r1;
        boolean $z0;
        javax.lang.model.element.TypeElement $r4;
        androidx.room.compiler.processing.javac.JavacTypeElement $r5;

        $r0 := @parameter0: javax.lang.model.element.Element;

        r1 := @parameter1: androidx.room.compiler.processing.javac.JavacProcessingEnv;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "env");

        $r2 = interfaceinvoke $r0.<javax.lang.model.element.Element: javax.lang.model.element.Element getEnclosingElement()>();

        $z0 = staticinvoke <com.google.auto.common.MoreElements: boolean isType(javax.lang.model.element.Element)>($r2);

        if $z0 == 0 goto label1;

        $r3 = interfaceinvoke $r0.<javax.lang.model.element.Element: javax.lang.model.element.Element getEnclosingElement()>();

        $r4 = staticinvoke <com.google.auto.common.MoreElements: javax.lang.model.element.TypeElement asType(javax.lang.model.element.Element)>($r3);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "asType(enclosingElement)");

        $r5 = virtualinvoke r1.<androidx.room.compiler.processing.javac.JavacProcessingEnv: androidx.room.compiler.processing.javac.JavacTypeElement wrapTypeElement(javax.lang.model.element.TypeElement)>($r4);

        goto label2;

     label1:
        $r5 = (androidx.room.compiler.processing.javac.JavacTypeElement) null;

     label2:
        return $r5;
    }

    public static final boolean suspendOverrides(javax.lang.model.element.ExecutableElement, javax.lang.model.element.ExecutableElement, javax.lang.model.element.TypeElement, javax.lang.model.util.Types)
    {
        javax.lang.model.element.ExecutableElement r0, r1;
        javax.lang.model.element.TypeElement r2, r4, $r78;
        javax.lang.model.util.Types r3;
        javax.lang.model.type.DeclaredType r5, $r43, $r48;
        javax.lang.model.type.ExecutableType r6, r79;
        com.squareup.javapoet.TypeName r7, $r80, $r85;
        com.squareup.javapoet.ClassName r8, $r83, $r88, r89;
        java.util.Iterator r9;
        java.lang.Object r10, $r35, $r38, $r41, $r46, $r59, $r60, $r92, $r95;
        kotlin.Pair r11;
        javax.lang.model.type.TypeMirror r12, r13, $r22, $r23, $r24, $r25, $r26, $r28, $r30, $r36, $r39, $r42, $r44, $r47, $r49, $r50, $r51, $r61, $r62, $r93, $r96;
        javax.lang.model.element.Name $r14, $r15;
        boolean $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        javax.lang.model.element.Element $r16, $r17, $r27, $r29, r77;
        java.util.Set $r18, $r20;
        javax.lang.model.element.Modifier $r19, $r21;
        java.util.List $r31, $r32, $r34, $r37, $r40, $r45, $r52, $r53, $r55, $r57, $r58, $r91, $r94;
        int $i0, $i1, $i2;
        java.lang.reflect.Type $r33;
        java.lang.Iterable $r54, $r56, $r97;
        java.lang.StringBuilder $r63, $r64, $r65, $r66, $r67, $r70, $r71, $r72, $r73, $r74;
        java.lang.IllegalStateException $r68, $r75;
        java.lang.String $r69, $r76, $r84, $r90;
        com.squareup.javapoet.ParameterizedTypeName $r81, r82, $r86;

        r0 := @parameter0: javax.lang.model.element.ExecutableElement;

        r1 := @parameter1: javax.lang.model.element.ExecutableElement;

        r2 := @parameter2: javax.lang.model.element.TypeElement;

        r3 := @parameter3: javax.lang.model.util.Types;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "overrider");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "overridden");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "owner");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "typeUtils");

        $r14 = interfaceinvoke r0.<javax.lang.model.element.ExecutableElement: javax.lang.model.element.Name getSimpleName()>();

        $r15 = interfaceinvoke r1.<javax.lang.model.element.ExecutableElement: javax.lang.model.element.Name getSimpleName()>();

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r14, $r15);

        if $z1 != 0 goto label01;

        return 0;

     label01:
        $r16 = interfaceinvoke r0.<javax.lang.model.element.ExecutableElement: javax.lang.model.element.Element getEnclosingElement()>();

        $r17 = interfaceinvoke r1.<javax.lang.model.element.ExecutableElement: javax.lang.model.element.Element getEnclosingElement()>();

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r16, $r17);

        if $z2 == 0 goto label02;

        return 0;

     label02:
        $r18 = interfaceinvoke r1.<javax.lang.model.element.ExecutableElement: java.util.Set getModifiers()>();

        $r19 = <javax.lang.model.element.Modifier: javax.lang.model.element.Modifier STATIC>;

        $z3 = interfaceinvoke $r18.<java.util.Set: boolean contains(java.lang.Object)>($r19);

        if $z3 == 0 goto label03;

        return 0;

     label03:
        $r20 = interfaceinvoke r1.<javax.lang.model.element.ExecutableElement: java.util.Set getModifiers()>();

        $r21 = <javax.lang.model.element.Modifier: javax.lang.model.element.Modifier PRIVATE>;

        $z4 = interfaceinvoke $r20.<java.util.Set: boolean contains(java.lang.Object)>($r21);

        if $z4 == 0 goto label04;

        return 0;

     label04:
        r77 = interfaceinvoke r1.<javax.lang.model.element.ExecutableElement: javax.lang.model.element.Element getEnclosingElement()>();

        $z5 = r77 instanceof javax.lang.model.element.TypeElement;

        if $z5 == 0 goto label05;

        $r78 = (javax.lang.model.element.TypeElement) r77;

        goto label06;

     label05:
        $r78 = null;

     label06:
        if $r78 != null goto label07;

        return 0;

     label07:
        r4 = $r78;

        $r22 = interfaceinvoke r2.<javax.lang.model.element.TypeElement: javax.lang.model.type.TypeMirror asType()>();

        $r23 = interfaceinvoke r3.<javax.lang.model.util.Types: javax.lang.model.type.TypeMirror erasure(javax.lang.model.type.TypeMirror)>($r22);

        $r24 = interfaceinvoke r4.<javax.lang.model.element.TypeElement: javax.lang.model.type.TypeMirror asType()>();

        $r25 = interfaceinvoke r3.<javax.lang.model.util.Types: javax.lang.model.type.TypeMirror erasure(javax.lang.model.type.TypeMirror)>($r24);

        $z6 = interfaceinvoke r3.<javax.lang.model.util.Types: boolean isSubtype(javax.lang.model.type.TypeMirror,javax.lang.model.type.TypeMirror)>($r23, $r25);

        if $z6 != 0 goto label08;

        return 0;

     label08:
        $r26 = interfaceinvoke r2.<javax.lang.model.element.TypeElement: javax.lang.model.type.TypeMirror asType()>();

        r5 = staticinvoke <com.google.auto.common.MoreTypes: javax.lang.model.type.DeclaredType asDeclared(javax.lang.model.type.TypeMirror)>($r26);

        $r27 = (javax.lang.model.element.Element) r0;

        $r28 = interfaceinvoke r3.<javax.lang.model.util.Types: javax.lang.model.type.TypeMirror asMemberOf(javax.lang.model.type.DeclaredType,javax.lang.model.element.Element)>(r5, $r27);

        r79 = staticinvoke <com.google.auto.common.MoreTypes: javax.lang.model.type.ExecutableType asExecutable(javax.lang.model.type.TypeMirror)>($r28);

        $r29 = (javax.lang.model.element.Element) r0;

        $r30 = interfaceinvoke r3.<javax.lang.model.util.Types: javax.lang.model.type.TypeMirror asMemberOf(javax.lang.model.type.DeclaredType,javax.lang.model.element.Element)>(r5, $r29);

        r6 = staticinvoke <com.google.auto.common.MoreTypes: javax.lang.model.type.ExecutableType asExecutable(javax.lang.model.type.TypeMirror)>($r30);

        $r31 = interfaceinvoke r79.<javax.lang.model.type.ExecutableType: java.util.List getParameterTypes()>();

        $i0 = interfaceinvoke $r31.<java.util.List: int size()>();

        $r32 = interfaceinvoke r6.<javax.lang.model.type.ExecutableType: java.util.List getParameterTypes()>();

        $i1 = interfaceinvoke $r32.<java.util.List: int size()>();

        if $i0 == $i1 goto label09;

        return 0;

     label09:
        $r33 = (java.lang.reflect.Type) class "Lkotlin/coroutines/Continuation;";

        r7 = staticinvoke <com.squareup.javapoet.TypeName: com.squareup.javapoet.TypeName get(java.lang.reflect.Type)>($r33);

        $r34 = interfaceinvoke r79.<javax.lang.model.type.ExecutableType: java.util.List getParameterTypes()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r34, "overriderExecutable.parameterTypes");

        $r35 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object last(java.util.List)>($r34);

        $r36 = (javax.lang.model.type.TypeMirror) $r35;

        $r80 = staticinvoke <com.squareup.javapoet.TypeName: com.squareup.javapoet.TypeName get(javax.lang.model.type.TypeMirror)>($r36);

        $z7 = $r80 instanceof com.squareup.javapoet.ParameterizedTypeName;

        if $z7 == 0 goto label10;

        $r81 = (com.squareup.javapoet.ParameterizedTypeName) $r80;

        goto label11;

     label10:
        $r81 = null;

     label11:
        r82 = $r81;

        if r82 == null goto label12;

        $r83 = r82.<com.squareup.javapoet.ParameterizedTypeName: com.squareup.javapoet.ClassName rawType>;

        goto label13;

     label12:
        $r83 = null;

     label13:
        r8 = $r83;

        $z8 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r8, r7);

        if $z8 != 0 goto label14;

        $r70 = new java.lang.StringBuilder;

        specialinvoke $r70.<java.lang.StringBuilder: void <init>()>();

        $r71 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected ");

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);

        $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to be ");

        $r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r84 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.String toString()>();

        $r75 = new java.lang.IllegalStateException;

        $r76 = virtualinvoke $r84.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r75.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r76);

        throw $r75;

     label14:
        $r37 = interfaceinvoke r6.<javax.lang.model.type.ExecutableType: java.util.List getParameterTypes()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r37, "overriddenExecutable.parameterTypes");

        $r38 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object last(java.util.List)>($r37);

        $r39 = (javax.lang.model.type.TypeMirror) $r38;

        $r85 = staticinvoke <com.squareup.javapoet.TypeName: com.squareup.javapoet.TypeName get(javax.lang.model.type.TypeMirror)>($r39);

        $z9 = $r85 instanceof com.squareup.javapoet.ParameterizedTypeName;

        if $z9 == 0 goto label15;

        $r86 = (com.squareup.javapoet.ParameterizedTypeName) $r85;

        goto label16;

     label15:
        $r86 = null;

     label16:
        if $r86 == null goto label17;

        $r88 = $r86.<com.squareup.javapoet.ParameterizedTypeName: com.squareup.javapoet.ClassName rawType>;

        goto label18;

     label17:
        $r88 = null;

     label18:
        r89 = $r88;

        $z10 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r89, r7);

        if $z10 != 0 goto label19;

        $r63 = new java.lang.StringBuilder;

        specialinvoke $r63.<java.lang.StringBuilder: void <init>()>();

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected ");

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r89);

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to be ");

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r90 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>();

        $r68 = new java.lang.IllegalStateException;

        $r69 = virtualinvoke $r90.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r68.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r69);

        throw $r68;

     label19:
        $r40 = interfaceinvoke r79.<javax.lang.model.type.ExecutableType: java.util.List getParameterTypes()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r40, "overriderExecutable.parameterTypes");

        $r41 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object last(java.util.List)>($r40);

        $r42 = (javax.lang.model.type.TypeMirror) $r41;

        $r43 = staticinvoke <com.google.auto.common.MoreTypes: javax.lang.model.type.DeclaredType asDeclared(javax.lang.model.type.TypeMirror)>($r42);

        $r91 = interfaceinvoke $r43.<javax.lang.model.type.DeclaredType: java.util.List getTypeArguments()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r91, "asDeclared(overriderExec\u2026           .typeArguments");

        $r92 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object single(java.util.List)>($r91);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r92, "asDeclared(overriderExec\u2026  .typeArguments.single()");

        $r44 = (javax.lang.model.type.TypeMirror) $r92;

        $r93 = staticinvoke <androidx.room.compiler.processing.javac.TypeMirrorExtKt: javax.lang.model.type.TypeMirror extendsBound(javax.lang.model.type.TypeMirror)>($r44);

        $r45 = interfaceinvoke r79.<javax.lang.model.type.ExecutableType: java.util.List getParameterTypes()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r45, "overriderExecutable.parameterTypes");

        $r46 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object last(java.util.List)>($r45);

        $r47 = (javax.lang.model.type.TypeMirror) $r46;

        $r48 = staticinvoke <com.google.auto.common.MoreTypes: javax.lang.model.type.DeclaredType asDeclared(javax.lang.model.type.TypeMirror)>($r47);

        $r94 = interfaceinvoke $r48.<javax.lang.model.type.DeclaredType: java.util.List getTypeArguments()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r94, "asDeclared(overriderExec\u2026           .typeArguments");

        $r95 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object single(java.util.List)>($r94);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r95, "asDeclared(overriderExec\u2026  .typeArguments.single()");

        $r49 = (javax.lang.model.type.TypeMirror) $r95;

        $r96 = staticinvoke <androidx.room.compiler.processing.javac.TypeMirrorExtKt: javax.lang.model.type.TypeMirror extendsBound(javax.lang.model.type.TypeMirror)>($r49);

        $r50 = interfaceinvoke r3.<javax.lang.model.util.Types: javax.lang.model.type.TypeMirror erasure(javax.lang.model.type.TypeMirror)>($r93);

        $r51 = interfaceinvoke r3.<javax.lang.model.util.Types: javax.lang.model.type.TypeMirror erasure(javax.lang.model.type.TypeMirror)>($r96);

        $z11 = interfaceinvoke r3.<javax.lang.model.util.Types: boolean isSameType(javax.lang.model.type.TypeMirror,javax.lang.model.type.TypeMirror)>($r50, $r51);

        if $z11 != 0 goto label20;

        return 0;

     label20:
        $r52 = interfaceinvoke r6.<javax.lang.model.type.ExecutableType: java.util.List getParameterTypes()>();

        $i2 = interfaceinvoke $r52.<java.util.List: int size()>();

        if $i2 < 2 goto label23;

        $r53 = interfaceinvoke r79.<javax.lang.model.type.ExecutableType: java.util.List getParameterTypes()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r53, "overriderExecutable.parameterTypes");

        $r54 = (java.lang.Iterable) $r53;

        $r55 = interfaceinvoke r6.<javax.lang.model.type.ExecutableType: java.util.List getParameterTypes()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r55, "overriddenExecutable.parameterTypes");

        $r56 = (java.lang.Iterable) $r55;

        $r57 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List zip(java.lang.Iterable,java.lang.Iterable)>($r54, $r56);

        $r58 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List dropLast(java.util.List,int)>($r57, 1);

        $r97 = (java.lang.Iterable) $r58;

        r9 = interfaceinvoke $r97.<java.lang.Iterable: java.util.Iterator iterator()>();

     label21:
        $z12 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z12 == 0 goto label23;

        r10 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (kotlin.Pair) r10;

        $r59 = virtualinvoke r11.<kotlin.Pair: java.lang.Object component1()>();

        r12 = (javax.lang.model.type.TypeMirror) $r59;

        $r60 = virtualinvoke r11.<kotlin.Pair: java.lang.Object component2()>();

        r13 = (javax.lang.model.type.TypeMirror) $r60;

        $r61 = interfaceinvoke r3.<javax.lang.model.util.Types: javax.lang.model.type.TypeMirror erasure(javax.lang.model.type.TypeMirror)>(r12);

        $r62 = interfaceinvoke r3.<javax.lang.model.util.Types: javax.lang.model.type.TypeMirror erasure(javax.lang.model.type.TypeMirror)>(r13);

        $z13 = interfaceinvoke r3.<javax.lang.model.util.Types: boolean isSameType(javax.lang.model.type.TypeMirror,javax.lang.model.type.TypeMirror)>($r61, $r62);

        if $z13 != 0 goto label22;

        return 0;

     label22:
        goto label21;

     label23:
        return 1;
    }

    static void <clinit>()
    {
        java.lang.String[] r0, r1;

        r0 = newarray (java.lang.String)[2];

        r0[0] = "androidx.annotation.NonNull";

        r0[1] = "org.jetbrains.annotations.NotNull";

        <androidx.room.compiler.processing.javac.ElementExtKt: java.lang.String[] NONNULL_ANNOTATIONS> = r0;

        r1 = newarray (java.lang.String)[2];

        r1[0] = "androidx.annotation.Nullable";

        r1[1] = "org.jetbrains.annotations.Nullable";

        <androidx.room.compiler.processing.javac.ElementExtKt: java.lang.String[] NULLABLE_ANNOTATIONS> = r1;

        return;
    }

