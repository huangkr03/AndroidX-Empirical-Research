androidx.compose.ui.viewinterop.AndroidViewHolder_androidKt
<androidx.compose.ui.viewinterop.AndroidViewHolder_androidKt: int Unmeasured>
    private static final void layoutAccordingTo(android.view.View, androidx.compose.ui.node.LayoutNode)
    {
        android.view.View $r0;
        androidx.compose.ui.node.LayoutNode r1;
        long l0;
        int i1, i2, $i3, $i4, $i5, $i6;
        androidx.compose.ui.layout.LayoutCoordinates $r2;
        float $f0, $f1;

        $r0 := @parameter0: android.view.View;

        r1 := @parameter1: androidx.compose.ui.node.LayoutNode;

        $r2 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.layout.LayoutCoordinates getCoordinates()>();

        l0 = staticinvoke <androidx.compose.ui.layout.LayoutCoordinatesKt: long positionInRoot(androidx.compose.ui.layout.LayoutCoordinates)>($r2);

        $f0 = staticinvoke <androidx.compose.ui.geometry.Offset: float getX-impl(long)>(l0);

        i1 = staticinvoke <kotlin.math.MathKt: int roundToInt(float)>($f0);

        $f1 = staticinvoke <androidx.compose.ui.geometry.Offset: float getY-impl(long)>(l0);

        i2 = staticinvoke <kotlin.math.MathKt: int roundToInt(float)>($f1);

        $i3 = virtualinvoke $r0.<android.view.View: int getMeasuredWidth()>();

        $i4 = i1 + $i3;

        $i5 = virtualinvoke $r0.<android.view.View: int getMeasuredHeight()>();

        $i6 = i2 + $i5;

        virtualinvoke $r0.<android.view.View: void layout(int,int,int,int)>(i1, i2, $i4, $i6);

        return;
    }

    private static final float toComposeOffset(int)
    {
        int $i0;
        float $f0, $f1, $f2;

        $i0 := @parameter0: int;

        $f1 = (float) $i0;

        $f0 = (float) -1;

        $f2 = $f1 * $f0;

        return $f2;
    }

    private static final float toComposeVelocity(float)
    {
        float $f0, $f1;

        $f0 := @parameter0: float;

        $f1 = $f0 * -1.0F;

        return $f1;
    }

    private static final int toNestedScrollSource(int)
    {
        int i0, $i1;
        androidx.compose.ui.input.nestedscroll.NestedScrollSource$Companion $r0, $r1;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        $r1 = <androidx.compose.ui.input.nestedscroll.NestedScrollSource: androidx.compose.ui.input.nestedscroll.NestedScrollSource$Companion Companion>;

        $i1 = virtualinvoke $r1.<androidx.compose.ui.input.nestedscroll.NestedScrollSource$Companion: int getDrag-WNlRxjI()>();

        goto label2;

     label1:
        $r0 = <androidx.compose.ui.input.nestedscroll.NestedScrollSource: androidx.compose.ui.input.nestedscroll.NestedScrollSource$Companion Companion>;

        $i1 = virtualinvoke $r0.<androidx.compose.ui.input.nestedscroll.NestedScrollSource$Companion: int getFling-WNlRxjI()>();

     label2:
        return $i1;
    }

    public static final float access$toComposeOffset(int)
    {
        int $i0;
        float $f0;

        $i0 := @parameter0: int;

        $f0 = staticinvoke <androidx.compose.ui.viewinterop.AndroidViewHolder_androidKt: float toComposeOffset(int)>($i0);

        return $f0;
    }

    public static final int access$toNestedScrollSource(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = staticinvoke <androidx.compose.ui.viewinterop.AndroidViewHolder_androidKt: int toNestedScrollSource(int)>(i0);

        return $i1;
    }

    public static final float access$toComposeVelocity(float)
    {
        float $f0, $f1;

        $f0 := @parameter0: float;

        $f1 = staticinvoke <androidx.compose.ui.viewinterop.AndroidViewHolder_androidKt: float toComposeVelocity(float)>($f0);

        return $f1;
    }

    public static final void access$layoutAccordingTo(android.view.View, androidx.compose.ui.node.LayoutNode)
    {
        android.view.View $r0;
        androidx.compose.ui.node.LayoutNode r1;

        $r0 := @parameter0: android.view.View;

        r1 := @parameter1: androidx.compose.ui.node.LayoutNode;

        staticinvoke <androidx.compose.ui.viewinterop.AndroidViewHolder_androidKt: void layoutAccordingTo(android.view.View,androidx.compose.ui.node.LayoutNode)>($r0, r1);

        return;
    }

