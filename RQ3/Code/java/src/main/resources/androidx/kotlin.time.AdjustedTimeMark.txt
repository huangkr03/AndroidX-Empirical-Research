kotlin.time.AdjustedTimeMark
<kotlin.time.AdjustedTimeMark: long adjustment>
<kotlin.time.AdjustedTimeMark: kotlin.time.TimeMark mark>
    private void <init>(kotlin.time.TimeMark, long)
    {
        kotlin.time.AdjustedTimeMark $r0;
        kotlin.time.TimeMark $r1;
        long $l0;

        $r0 := @this: kotlin.time.AdjustedTimeMark;

        $r1 := @parameter0: kotlin.time.TimeMark;

        $l0 := @parameter1: long;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<kotlin.time.AdjustedTimeMark: kotlin.time.TimeMark mark> = $r1;

        $r0.<kotlin.time.AdjustedTimeMark: long adjustment> = $l0;

        return;
    }

    public void <init>(kotlin.time.TimeMark, long, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        kotlin.time.AdjustedTimeMark $r0;
        kotlin.time.TimeMark $r1;
        long $l0;
        kotlin.jvm.internal.DefaultConstructorMarker $r2;

        $r0 := @this: kotlin.time.AdjustedTimeMark;

        $r1 := @parameter0: kotlin.time.TimeMark;

        $l0 := @parameter1: long;

        $r2 := @parameter2: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke $r0.<kotlin.time.AdjustedTimeMark: void <init>(kotlin.time.TimeMark,long)>($r1, $l0);

        return;
    }

    public long elapsedNow-UwyO8pc()
    {
        kotlin.time.AdjustedTimeMark $r0;
        long $l0, $l1;
        kotlin.time.TimeMark $r1;

        $r0 := @this: kotlin.time.AdjustedTimeMark;

        $r1 = $r0.<kotlin.time.AdjustedTimeMark: kotlin.time.TimeMark mark>;

        $l1 = interfaceinvoke $r1.<kotlin.time.TimeMark: long elapsedNow-UwyO8pc()>();

        $l0 = $r0.<kotlin.time.AdjustedTimeMark: long adjustment>;

        $l0 = staticinvoke <kotlin.time.Duration: long minus-LRDsOJo(long,long)>($l1, $l0);

        return $l0;
    }

    public final long getAdjustment-UwyO8pc()
    {
        kotlin.time.AdjustedTimeMark $r0;
        long l0;

        $r0 := @this: kotlin.time.AdjustedTimeMark;

        l0 = $r0.<kotlin.time.AdjustedTimeMark: long adjustment>;

        return l0;
    }

    public final kotlin.time.TimeMark getMark()
    {
        kotlin.time.AdjustedTimeMark $r0;
        kotlin.time.TimeMark r1;

        $r0 := @this: kotlin.time.AdjustedTimeMark;

        r1 = $r0.<kotlin.time.AdjustedTimeMark: kotlin.time.TimeMark mark>;

        return r1;
    }

    public boolean hasNotPassedNow()
    {
        kotlin.time.AdjustedTimeMark $r0;
        boolean $z0;

        $r0 := @this: kotlin.time.AdjustedTimeMark;

        $z0 = staticinvoke <kotlin.time.TimeMark$DefaultImpls: boolean hasNotPassedNow(kotlin.time.TimeMark)>($r0);

        return $z0;
    }

    public boolean hasPassedNow()
    {
        kotlin.time.AdjustedTimeMark $r0;
        boolean $z0;

        $r0 := @this: kotlin.time.AdjustedTimeMark;

        $z0 = staticinvoke <kotlin.time.TimeMark$DefaultImpls: boolean hasPassedNow(kotlin.time.TimeMark)>($r0);

        return $z0;
    }

    public kotlin.time.TimeMark minus-LRDsOJo(long)
    {
        kotlin.time.AdjustedTimeMark $r0;
        kotlin.time.TimeMark $r1;
        long $l0;

        $r0 := @this: kotlin.time.AdjustedTimeMark;

        $l0 := @parameter0: long;

        $r1 = staticinvoke <kotlin.time.TimeMark$DefaultImpls: kotlin.time.TimeMark minus-LRDsOJo(kotlin.time.TimeMark,long)>($r0, $l0);

        return $r1;
    }

    public kotlin.time.TimeMark plus-LRDsOJo(long)
    {
        kotlin.time.AdjustedTimeMark $r0, $r1;
        kotlin.time.TimeMark $r2;
        long $l0, $l1;

        $r0 := @this: kotlin.time.AdjustedTimeMark;

        $l0 := @parameter0: long;

        $r1 = new kotlin.time.AdjustedTimeMark;

        $r2 = $r0.<kotlin.time.AdjustedTimeMark: kotlin.time.TimeMark mark>;

        $l1 = $r0.<kotlin.time.AdjustedTimeMark: long adjustment>;

        $l0 = staticinvoke <kotlin.time.Duration: long plus-LRDsOJo(long,long)>($l1, $l0);

        specialinvoke $r1.<kotlin.time.AdjustedTimeMark: void <init>(kotlin.time.TimeMark,long,kotlin.jvm.internal.DefaultConstructorMarker)>($r2, $l0, null);

        return $r1;
    }

