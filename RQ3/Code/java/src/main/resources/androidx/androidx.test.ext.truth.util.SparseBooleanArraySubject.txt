androidx.test.ext.truth.util.SparseBooleanArraySubject
<androidx.test.ext.truth.util.SparseBooleanArraySubject: android.util.SparseBooleanArray actual>
    public static androidx.test.ext.truth.util.SparseBooleanArraySubject assertThat(android.util.SparseBooleanArray)
    {
        android.util.SparseBooleanArray r0;
        com.google.common.truth.Subject$Factory $r1;
        com.google.common.truth.SimpleSubjectBuilder $r2;
        com.google.common.truth.Subject $r3;
        androidx.test.ext.truth.util.SparseBooleanArraySubject $r4;

        r0 := @parameter0: android.util.SparseBooleanArray;

        $r1 = staticinvoke <androidx.test.ext.truth.util.SparseBooleanArraySubject: com.google.common.truth.Subject$Factory sparseBooleanArrays()>();

        $r2 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.SimpleSubjectBuilder assertAbout(com.google.common.truth.Subject$Factory)>($r1);

        $r3 = virtualinvoke $r2.<com.google.common.truth.SimpleSubjectBuilder: com.google.common.truth.Subject that(java.lang.Object)>(r0);

        $r4 = (androidx.test.ext.truth.util.SparseBooleanArraySubject) $r3;

        return $r4;
    }

    private static com.google.common.truth.Subject$Factory sparseBooleanArrays()
    {
        androidx.test.ext.truth.util.SparseBooleanArraySubject$$ExternalSyntheticLambda0 $r0;

        $r0 = <androidx.test.ext.truth.util.SparseBooleanArraySubject$$ExternalSyntheticLambda0: androidx.test.ext.truth.util.SparseBooleanArraySubject$$ExternalSyntheticLambda0 INSTANCE>;

        return $r0;
    }

    public static java.lang.AssertionError expectFailure(com.google.common.truth.ExpectFailure$SimpleSubjectBuilderCallback)
    {
        com.google.common.truth.ExpectFailure$SimpleSubjectBuilderCallback r0;
        com.google.common.truth.Subject$Factory $r1;
        java.lang.AssertionError $r2;

        r0 := @parameter0: com.google.common.truth.ExpectFailure$SimpleSubjectBuilderCallback;

        $r1 = staticinvoke <androidx.test.ext.truth.util.SparseBooleanArraySubject: com.google.common.truth.Subject$Factory sparseBooleanArrays()>();

        $r2 = staticinvoke <com.google.common.truth.ExpectFailure: java.lang.AssertionError expectFailureAbout(com.google.common.truth.Subject$Factory,com.google.common.truth.ExpectFailure$SimpleSubjectBuilderCallback)>($r1, r0);

        return $r2;
    }

    void <init>(com.google.common.truth.FailureMetadata, android.util.SparseBooleanArray)
    {
        androidx.test.ext.truth.util.SparseBooleanArraySubject r0;
        com.google.common.truth.FailureMetadata r1;
        android.util.SparseBooleanArray r2;

        r0 := @this: androidx.test.ext.truth.util.SparseBooleanArraySubject;

        r1 := @parameter0: com.google.common.truth.FailureMetadata;

        r2 := @parameter1: android.util.SparseBooleanArray;

        specialinvoke r0.<com.google.common.truth.Subject: void <init>(com.google.common.truth.FailureMetadata,java.lang.Object)>(r1, r2);

        r0.<androidx.test.ext.truth.util.SparseBooleanArraySubject: android.util.SparseBooleanArray actual> = r2;

        return;
    }

    public void containsKey(int)
    {
        androidx.test.ext.truth.util.SparseBooleanArraySubject r0;
        int i0, $i1;
        java.lang.Object[] $r1;
        java.lang.Integer $r2, $r5, $r7;
        com.google.common.truth.StandardSubjectBuilder $r3;
        android.util.SparseBooleanArray $r4;
        com.google.common.truth.IntegerSubject $r6;

        r0 := @this: androidx.test.ext.truth.util.SparseBooleanArraySubject;

        i0 := @parameter0: int;

        $r1 = newarray (java.lang.Object)[1];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r2;

        $r3 = virtualinvoke r0.<androidx.test.ext.truth.util.SparseBooleanArraySubject: com.google.common.truth.StandardSubjectBuilder check(java.lang.String,java.lang.Object[])>("key <%s> expected to be present but was not.", $r1);

        $r4 = r0.<androidx.test.ext.truth.util.SparseBooleanArraySubject: android.util.SparseBooleanArray actual>;

        $i1 = virtualinvoke $r4.<android.util.SparseBooleanArray: int indexOfKey(int)>(i0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r6 = virtualinvoke $r3.<com.google.common.truth.StandardSubjectBuilder: com.google.common.truth.IntegerSubject that(java.lang.Integer)>($r5);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        virtualinvoke $r6.<com.google.common.truth.IntegerSubject: void isGreaterThan(java.lang.Comparable)>($r7);

        return;
    }

    public void doesNotContainKey(int)
    {
        androidx.test.ext.truth.util.SparseBooleanArraySubject r0;
        int i0, $i1;
        java.lang.Object[] $r1;
        java.lang.Integer $r2, $r5, $r7;
        com.google.common.truth.StandardSubjectBuilder $r3;
        android.util.SparseBooleanArray $r4;
        com.google.common.truth.IntegerSubject $r6;

        r0 := @this: androidx.test.ext.truth.util.SparseBooleanArraySubject;

        i0 := @parameter0: int;

        $r1 = newarray (java.lang.Object)[1];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r2;

        $r3 = virtualinvoke r0.<androidx.test.ext.truth.util.SparseBooleanArraySubject: com.google.common.truth.StandardSubjectBuilder check(java.lang.String,java.lang.Object[])>("key <%s> expected to not be present but was.", $r1);

        $r4 = r0.<androidx.test.ext.truth.util.SparseBooleanArraySubject: android.util.SparseBooleanArray actual>;

        $i1 = virtualinvoke $r4.<android.util.SparseBooleanArray: int indexOfKey(int)>(i0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r6 = virtualinvoke $r3.<com.google.common.truth.StandardSubjectBuilder: com.google.common.truth.IntegerSubject that(java.lang.Integer)>($r5);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke $r6.<com.google.common.truth.IntegerSubject: void isLessThan(java.lang.Comparable)>($r7);

        return;
    }

    public void hasFalseValueAt(int)
    {
        androidx.test.ext.truth.util.SparseBooleanArraySubject r0;
        int i0, $i1;
        android.util.SparseBooleanArray $r1, $r5;
        java.lang.Object[] $r2;
        java.lang.Integer $r3, $r8;
        com.google.common.truth.StandardSubjectBuilder $r4;
        boolean $z0;
        java.lang.Boolean $r6;
        com.google.common.truth.BooleanSubject $r7;
        com.google.common.truth.Fact $r9;
        com.google.common.truth.Fact[] $r10;

        r0 := @this: androidx.test.ext.truth.util.SparseBooleanArraySubject;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.test.ext.truth.util.SparseBooleanArraySubject: android.util.SparseBooleanArray actual>;

        $i1 = virtualinvoke $r1.<android.util.SparseBooleanArray: int indexOfKey(int)>(i0);

        if $i1 != -1 goto label1;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r9 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact fact(java.lang.String,java.lang.Object)>("key <%s> expected to be present but was not", $r8);

        $r10 = newarray (com.google.common.truth.Fact)[0];

        virtualinvoke r0.<androidx.test.ext.truth.util.SparseBooleanArraySubject: void failWithoutActual(com.google.common.truth.Fact,com.google.common.truth.Fact[])>($r9, $r10);

     label1:
        $r2 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[0] = $r3;

        $r4 = virtualinvoke r0.<androidx.test.ext.truth.util.SparseBooleanArraySubject: com.google.common.truth.StandardSubjectBuilder check(java.lang.String,java.lang.Object[])>("value for key <%s> expected to be false but was not", $r2);

        $r5 = r0.<androidx.test.ext.truth.util.SparseBooleanArraySubject: android.util.SparseBooleanArray actual>;

        $z0 = virtualinvoke $r5.<android.util.SparseBooleanArray: boolean get(int)>(i0);

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r7 = virtualinvoke $r4.<com.google.common.truth.StandardSubjectBuilder: com.google.common.truth.BooleanSubject that(java.lang.Boolean)>($r6);

        virtualinvoke $r7.<com.google.common.truth.BooleanSubject: void isFalse()>();

        return;
    }

    public void hasSize(int)
    {
        androidx.test.ext.truth.util.SparseBooleanArraySubject r0;
        int i0, $i1;
        java.lang.Object[] $r1;
        com.google.common.truth.StandardSubjectBuilder $r2;
        android.util.SparseBooleanArray $r3;
        java.lang.Integer $r4, $r6;
        com.google.common.truth.IntegerSubject $r5;

        r0 := @this: androidx.test.ext.truth.util.SparseBooleanArraySubject;

        i0 := @parameter0: int;

        $r1 = newarray (java.lang.Object)[0];

        $r2 = virtualinvoke r0.<androidx.test.ext.truth.util.SparseBooleanArraySubject: com.google.common.truth.StandardSubjectBuilder check(java.lang.String,java.lang.Object[])>("size()", $r1);

        $r3 = r0.<androidx.test.ext.truth.util.SparseBooleanArraySubject: android.util.SparseBooleanArray actual>;

        $i1 = virtualinvoke $r3.<android.util.SparseBooleanArray: int size()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r5 = virtualinvoke $r2.<com.google.common.truth.StandardSubjectBuilder: com.google.common.truth.IntegerSubject that(java.lang.Integer)>($r4);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r5.<com.google.common.truth.IntegerSubject: void isEqualTo(java.lang.Object)>($r6);

        return;
    }

    public void hasTrueValueAt(int)
    {
        androidx.test.ext.truth.util.SparseBooleanArraySubject r0;
        int i0;
        java.lang.Object[] $r1;
        java.lang.Integer $r2;
        com.google.common.truth.StandardSubjectBuilder $r3;
        android.util.SparseBooleanArray $r4;
        boolean $z0;
        java.lang.Boolean $r5;
        com.google.common.truth.BooleanSubject $r6;

        r0 := @this: androidx.test.ext.truth.util.SparseBooleanArraySubject;

        i0 := @parameter0: int;

        $r1 = newarray (java.lang.Object)[1];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r2;

        $r3 = virtualinvoke r0.<androidx.test.ext.truth.util.SparseBooleanArraySubject: com.google.common.truth.StandardSubjectBuilder check(java.lang.String,java.lang.Object[])>("value for key <%s> expected to be true but was not", $r1);

        $r4 = r0.<androidx.test.ext.truth.util.SparseBooleanArraySubject: android.util.SparseBooleanArray actual>;

        $z0 = virtualinvoke $r4.<android.util.SparseBooleanArray: boolean get(int)>(i0);

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r6 = virtualinvoke $r3.<com.google.common.truth.StandardSubjectBuilder: com.google.common.truth.BooleanSubject that(java.lang.Boolean)>($r5);

        virtualinvoke $r6.<com.google.common.truth.BooleanSubject: void isTrue()>();

        return;
    }

    public void isEmpty()
    {
        androidx.test.ext.truth.util.SparseBooleanArraySubject r0;
        java.lang.Object[] $r1;
        com.google.common.truth.StandardSubjectBuilder $r2;
        android.util.SparseBooleanArray $r3;
        int $i0;
        java.lang.Boolean $r4;
        com.google.common.truth.BooleanSubject $r5;
        boolean $z0;

        r0 := @this: androidx.test.ext.truth.util.SparseBooleanArraySubject;

        $r1 = newarray (java.lang.Object)[0];

        $r2 = virtualinvoke r0.<androidx.test.ext.truth.util.SparseBooleanArraySubject: com.google.common.truth.StandardSubjectBuilder check(java.lang.String,java.lang.Object[])>(" expected to be empty but was not", $r1);

        $r3 = r0.<androidx.test.ext.truth.util.SparseBooleanArraySubject: android.util.SparseBooleanArray actual>;

        $i0 = virtualinvoke $r3.<android.util.SparseBooleanArray: int size()>();

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r5 = virtualinvoke $r2.<com.google.common.truth.StandardSubjectBuilder: com.google.common.truth.BooleanSubject that(java.lang.Boolean)>($r4);

        virtualinvoke $r5.<com.google.common.truth.BooleanSubject: void isTrue()>();

        return;
    }

    public void isNotEmpty()
    {
        androidx.test.ext.truth.util.SparseBooleanArraySubject r0;
        java.lang.Object[] $r1;
        com.google.common.truth.StandardSubjectBuilder $r2;
        android.util.SparseBooleanArray $r3;
        int $i0;
        java.lang.Boolean $r4;
        com.google.common.truth.BooleanSubject $r5;
        boolean $z0;

        r0 := @this: androidx.test.ext.truth.util.SparseBooleanArraySubject;

        $r1 = newarray (java.lang.Object)[0];

        $r2 = virtualinvoke r0.<androidx.test.ext.truth.util.SparseBooleanArraySubject: com.google.common.truth.StandardSubjectBuilder check(java.lang.String,java.lang.Object[])>(" expected not to be empty but it was", $r1);

        $r3 = r0.<androidx.test.ext.truth.util.SparseBooleanArraySubject: android.util.SparseBooleanArray actual>;

        $i0 = virtualinvoke $r3.<android.util.SparseBooleanArray: int size()>();

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r5 = virtualinvoke $r2.<com.google.common.truth.StandardSubjectBuilder: com.google.common.truth.BooleanSubject that(java.lang.Boolean)>($r4);

        virtualinvoke $r5.<com.google.common.truth.BooleanSubject: void isFalse()>();

        return;
    }

