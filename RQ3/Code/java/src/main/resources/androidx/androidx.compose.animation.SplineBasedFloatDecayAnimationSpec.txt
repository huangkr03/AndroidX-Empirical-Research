androidx.compose.animation.SplineBasedFloatDecayAnimationSpec
<androidx.compose.animation.SplineBasedFloatDecayAnimationSpec: androidx.compose.animation.FlingCalculator flingCalculator>
<androidx.compose.animation.SplineBasedFloatDecayAnimationSpec: int $stable>
    public void <init>(androidx.compose.ui.unit.Density)
    {
        androidx.compose.animation.SplineBasedFloatDecayAnimationSpec r0;
        androidx.compose.ui.unit.Density r1;
        androidx.compose.animation.FlingCalculator $r2;
        float $f0;

        r0 := @this: androidx.compose.animation.SplineBasedFloatDecayAnimationSpec;

        r1 := @parameter0: androidx.compose.ui.unit.Density;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "density");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new androidx.compose.animation.FlingCalculator;

        $f0 = staticinvoke <androidx.compose.animation.SplineBasedFloatDecayAnimationSpec_androidKt: float getPlatformFlingScrollFriction()>();

        specialinvoke $r2.<androidx.compose.animation.FlingCalculator: void <init>(float,androidx.compose.ui.unit.Density)>($f0, r1);

        r0.<androidx.compose.animation.SplineBasedFloatDecayAnimationSpec: androidx.compose.animation.FlingCalculator flingCalculator> = $r2;

        return;
    }

    public float getAbsVelocityThreshold()
    {
        androidx.compose.animation.SplineBasedFloatDecayAnimationSpec r0;

        r0 := @this: androidx.compose.animation.SplineBasedFloatDecayAnimationSpec;

        return 0.0F;
    }

    private final float flingDistance(float)
    {
        androidx.compose.animation.SplineBasedFloatDecayAnimationSpec r0;
        float f0, $f1, $f2, $f3;
        androidx.compose.animation.FlingCalculator $r1;

        r0 := @this: androidx.compose.animation.SplineBasedFloatDecayAnimationSpec;

        f0 := @parameter0: float;

        $r1 = r0.<androidx.compose.animation.SplineBasedFloatDecayAnimationSpec: androidx.compose.animation.FlingCalculator flingCalculator>;

        $f1 = virtualinvoke $r1.<androidx.compose.animation.FlingCalculator: float flingDistance(float)>(f0);

        $f2 = staticinvoke <java.lang.Math: float signum(float)>(f0);

        $f3 = $f1 * $f2;

        return $f3;
    }

    public float getTargetValue(float, float)
    {
        androidx.compose.animation.SplineBasedFloatDecayAnimationSpec r0;
        float f0, f1, $f2, $f3;

        r0 := @this: androidx.compose.animation.SplineBasedFloatDecayAnimationSpec;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $f2 = specialinvoke r0.<androidx.compose.animation.SplineBasedFloatDecayAnimationSpec: float flingDistance(float)>(f1);

        $f3 = f0 + $f2;

        return $f3;
    }

    public float getValueFromNanos(long, float, float)
    {
        androidx.compose.animation.SplineBasedFloatDecayAnimationSpec r0;
        long l0, l1;
        float f0, f1, $f2, $f3;
        androidx.compose.animation.FlingCalculator $r1;
        androidx.compose.animation.FlingCalculator$FlingInfo $r2;

        r0 := @this: androidx.compose.animation.SplineBasedFloatDecayAnimationSpec;

        l0 := @parameter0: long;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        l1 = l0 / 1000000L;

        $r1 = r0.<androidx.compose.animation.SplineBasedFloatDecayAnimationSpec: androidx.compose.animation.FlingCalculator flingCalculator>;

        $r2 = virtualinvoke $r1.<androidx.compose.animation.FlingCalculator: androidx.compose.animation.FlingCalculator$FlingInfo flingInfo(float)>(f1);

        $f2 = virtualinvoke $r2.<androidx.compose.animation.FlingCalculator$FlingInfo: float position(long)>(l1);

        $f3 = f0 + $f2;

        return $f3;
    }

    public long getDurationNanos(float, float)
    {
        androidx.compose.animation.SplineBasedFloatDecayAnimationSpec r0;
        float f0, f1;
        androidx.compose.animation.FlingCalculator $r1;
        long $l0, $l1;

        r0 := @this: androidx.compose.animation.SplineBasedFloatDecayAnimationSpec;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $r1 = r0.<androidx.compose.animation.SplineBasedFloatDecayAnimationSpec: androidx.compose.animation.FlingCalculator flingCalculator>;

        $l0 = virtualinvoke $r1.<androidx.compose.animation.FlingCalculator: long flingDuration(float)>(f1);

        $l1 = $l0 * 1000000L;

        return $l1;
    }

    public float getVelocityFromNanos(long, float, float)
    {
        androidx.compose.animation.SplineBasedFloatDecayAnimationSpec r0;
        long l0, l1;
        float f0, f1, $f2;
        androidx.compose.animation.FlingCalculator $r1;
        androidx.compose.animation.FlingCalculator$FlingInfo $r2;

        r0 := @this: androidx.compose.animation.SplineBasedFloatDecayAnimationSpec;

        l0 := @parameter0: long;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        l1 = l0 / 1000000L;

        $r1 = r0.<androidx.compose.animation.SplineBasedFloatDecayAnimationSpec: androidx.compose.animation.FlingCalculator flingCalculator>;

        $r2 = virtualinvoke $r1.<androidx.compose.animation.FlingCalculator: androidx.compose.animation.FlingCalculator$FlingInfo flingInfo(float)>(f1);

        $f2 = virtualinvoke $r2.<androidx.compose.animation.FlingCalculator$FlingInfo: float velocity(long)>(l1);

        return $f2;
    }

    static void <clinit>()
    {
        return;
    }

