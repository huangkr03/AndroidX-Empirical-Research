androidx.animation.ExponentialDecay
<androidx.animation.ExponentialDecay: float absVelocityThreshold>
<androidx.animation.ExponentialDecay: float friction>
    public float getAbsVelocityThreshold()
    {
        androidx.animation.ExponentialDecay r0;
        float $f0;

        r0 := @this: androidx.animation.ExponentialDecay;

        $f0 = r0.<androidx.animation.ExponentialDecay: float absVelocityThreshold>;

        return $f0;
    }

    public float getValue(long, float, float)
    {
        androidx.animation.ExponentialDecay r0;
        long l0;
        float f0, f1, f2, f3, f4, f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13;
        boolean z0;
        double $d0, $d1;

        r0 := @this: androidx.animation.ExponentialDecay;

        l0 := @parameter0: long;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        $f6 = r0.<androidx.animation.ExponentialDecay: float friction>;

        $f7 = f1 / $f6;

        $f8 = r0.<androidx.animation.ExponentialDecay: float friction>;

        $f10 = r0.<androidx.animation.ExponentialDecay: float friction>;

        $f9 = (float) l0;

        $f11 = $f10 * $f9;

        f2 = $f11 / 1000.0F;

        f4 = f1 / $f8;

        f3 = f0 - $f7;

        z0 = 0;

        $d0 = (double) f2;

        $d1 = staticinvoke <java.lang.Math: double exp(double)>($d0);

        f5 = (float) $d1;

        $f12 = f4 * f5;

        $f13 = f3 + $f12;

        return $f13;
    }

    public float getVelocity(long, float, float)
    {
        androidx.animation.ExponentialDecay r0;
        long l0;
        float f0, f1, f2, f3, f4, $f5, $f6, $f7, $f8;
        boolean z0;
        double $d0, $d1;

        r0 := @this: androidx.animation.ExponentialDecay;

        l0 := @parameter0: long;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        $f5 = (float) l0;

        $f7 = $f5 / 1000.0F;

        $f6 = r0.<androidx.animation.ExponentialDecay: float friction>;

        f2 = $f7 * $f6;

        f3 = f1;

        z0 = 0;

        $d0 = (double) f2;

        $d1 = staticinvoke <java.lang.Math: double exp(double)>($d0);

        f4 = (float) $d1;

        $f8 = f3 * f4;

        return $f8;
    }

    public long getDurationMillis(float, float)
    {
        androidx.animation.ExponentialDecay r0;
        float f0, f1, f2, $f3, $f4, $f5, f6, f7, f8, f9, f10;
        boolean z0, z1;
        double $d0, $d1;
        long $l0;

        r0 := @this: androidx.animation.ExponentialDecay;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f6 = virtualinvoke r0.<androidx.animation.ExponentialDecay: float getAbsVelocityThreshold()>();

        f7 = 1000.0F;

        z1 = 0;

        f2 = staticinvoke <java.lang.Math: float abs(float)>(f1);

        f8 = f6 / f2;

        f9 = f7;

        z0 = 0;

        $d0 = (double) f8;

        $d1 = staticinvoke <java.lang.Math: double log(double)>($d0);

        f10 = (float) $d1;

        $f4 = f9 * f10;

        $f3 = r0.<androidx.animation.ExponentialDecay: float friction>;

        $f5 = $f4 / $f3;

        $l0 = (long) $f5;

        return $l0;
    }

    public float getTarget(float, float)
    {
        androidx.animation.ExponentialDecay r0;
        float f0, f1, f2, f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, f16;
        boolean z0, z1, z2, z3;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, d8, d9, d10;
        byte $b0;

        r0 := @this: androidx.animation.ExponentialDecay;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        z1 = 0;

        $f4 = staticinvoke <java.lang.Math: float abs(float)>(f1);

        $f5 = virtualinvoke r0.<androidx.animation.ExponentialDecay: float getAbsVelocityThreshold()>();

        $b0 = $f4 cmpg $f5;

        if $b0 > 0 goto label1;

        return f0;

     label1:
        $f6 = virtualinvoke r0.<androidx.animation.ExponentialDecay: float getAbsVelocityThreshold()>();

        f16 = $f6 / f1;

        z0 = 0;

        $f7 = staticinvoke <java.lang.Math: float abs(float)>(f16);

        d8 = (double) $f7;

        z2 = 0;

        $d1 = staticinvoke <java.lang.Math: double log(double)>(d8);

        $f8 = r0.<androidx.animation.ExponentialDecay: float friction>;

        $d2 = (double) $f8;

        $d4 = $d1 / $d2;

        $d3 = (double) 1000;

        d9 = $d4 * $d3;

        $f9 = r0.<androidx.animation.ExponentialDecay: float friction>;

        $f10 = f1 / $f9;

        $f11 = r0.<androidx.animation.ExponentialDecay: float friction>;

        $f12 = r0.<androidx.animation.ExponentialDecay: float friction>;

        $d5 = (double) $f12;

        $d7 = $d5 * d9;

        $d6 = (double) 1000.0F;

        d10 = $d7 / $d6;

        f3 = f1 / $f11;

        f2 = f0 - $f10;

        z3 = 0;

        d0 = staticinvoke <java.lang.Math: double exp(double)>(d10);

        $f13 = (float) d0;

        $f14 = f3 * $f13;

        $f15 = f2 + $f14;

        return $f15;
    }

    public void <init>(float, float)
    {
        androidx.animation.ExponentialDecay r0, r1, r2, r3;
        float f0, f1, f2, $f3, f4, f5, f6, f7, f8, f9;
        boolean z0, z1, z2;

        r0 := @this: androidx.animation.ExponentialDecay;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        f4 = 1.0E-7F;

        r1 = r0;

        z1 = 0;

        f5 = staticinvoke <java.lang.Math: float abs(float)>(f1);

        f6 = f5;

        r2 = r1;

        z0 = 0;

        f7 = staticinvoke <java.lang.Math: float max(float,float)>(f4, f6);

        r2.<androidx.animation.ExponentialDecay: float absVelocityThreshold> = f7;

        f8 = 1.0E-4F;

        f9 = -4.2F;

        r3 = r0;

        z2 = 0;

        f2 = staticinvoke <java.lang.Math: float max(float,float)>(f8, f0);

        $f3 = f9 * f2;

        r3.<androidx.animation.ExponentialDecay: float friction> = $f3;

        return;
    }

    public void <init>(float, float, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.animation.ExponentialDecay r0;
        int i0, $i1, $i2;
        kotlin.jvm.internal.DefaultConstructorMarker r1;
        float f0, f1;

        r0 := @this: androidx.animation.ExponentialDecay;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        i0 := @parameter2: int;

        r1 := @parameter3: kotlin.jvm.internal.DefaultConstructorMarker;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        f0 = 1.0F;

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        f1 = 0.1F;

     label2:
        specialinvoke r0.<androidx.animation.ExponentialDecay: void <init>(float,float)>(f0, f1);

        return;
    }

    public void <init>()
    {
        androidx.animation.ExponentialDecay r0;

        r0 := @this: androidx.animation.ExponentialDecay;

        specialinvoke r0.<androidx.animation.ExponentialDecay: void <init>(float,float,int,kotlin.jvm.internal.DefaultConstructorMarker)>(0.0F, 0.0F, 3, null);

        return;
    }

