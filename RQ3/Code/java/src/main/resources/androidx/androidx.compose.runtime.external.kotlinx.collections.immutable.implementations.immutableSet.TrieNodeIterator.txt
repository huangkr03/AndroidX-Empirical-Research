androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator
<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator: java.lang.Object[] buffer>
<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator: int index>
    public void <init>()
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator r0;
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNode$Companion $r1;
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNode $r2;
        java.lang.Object[] $r3;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNode$Companion Companion>;

        $r2 = virtualinvoke $r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNode$Companion: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNode getEMPTY$runtime_release()>();

        $r3 = virtualinvoke $r2.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNode: java.lang.Object[] getBuffer()>();

        r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator: java.lang.Object[] buffer> = $r3;

        return;
    }

    public final void reset(java.lang.Object[], int)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator r0;
        java.lang.Object[] r1;
        int i0;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator;

        r1 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "buffer");

        r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator: java.lang.Object[] buffer> = r1;

        r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator: int index> = i0;

        return;
    }

    public static void reset$default(androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator, java.lang.Object[], int, int, java.lang.Object)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator r0;
        java.lang.Object[] r1;
        int i0, $i1, i2;
        java.lang.Object r2;

        r0 := @parameter0: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator;

        r1 := @parameter1: java.lang.Object[];

        i2 := @parameter2: int;

        i0 := @parameter3: int;

        r2 := @parameter4: java.lang.Object;

        $i1 = i0 & 2;

        if $i1 == 0 goto label1;

        i2 = 0;

     label1:
        virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator: void reset(java.lang.Object[],int)>(r1, i2);

        return;
    }

    public final boolean hasNextCell()
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator r0;
        java.lang.Object[] $r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator;

        $i1 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator: int index>;

        $r1 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator: java.lang.Object[] buffer>;

        $i0 = lengthof $r1;

        if $i1 >= $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final void moveToNextCell()
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator r0;
        int i0, $i1;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator;

        $z0 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator: boolean hasNextCell()>();

        staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.internal.CommonFunctionsKt: void assert(boolean)>($z0);

        i0 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator: int index>;

        $i1 = i0 + 1;

        r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator: int index> = $i1;

        return;
    }

    public final boolean hasNextElement()
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator r0;
        boolean $z0, $z1, $z2;
        int $i0;
        java.lang.Object[] $r1;
        java.lang.Object $r2;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator;

        $z0 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator: boolean hasNextCell()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator: java.lang.Object[] buffer>;

        $i0 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator: int index>;

        $r2 = $r1[$i0];

        $z1 = $r2 instanceof androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNode;

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public final java.lang.Object currentElement()
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator r0;
        boolean $z0;
        int $i0;
        java.lang.Object[] $r1;
        java.lang.Object $r2;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator;

        $z0 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator: boolean hasNextElement()>();

        staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.internal.CommonFunctionsKt: void assert(boolean)>($z0);

        $r1 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator: java.lang.Object[] buffer>;

        $i0 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator: int index>;

        $r2 = $r1[$i0];

        return $r2;
    }

    public final java.lang.Object nextElement()
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator r0;
        int i0, $i1;
        boolean $z0;
        java.lang.Object[] $r1;
        java.lang.Object $r2;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator;

        $z0 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator: boolean hasNextElement()>();

        staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.internal.CommonFunctionsKt: void assert(boolean)>($z0);

        $r1 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator: java.lang.Object[] buffer>;

        i0 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator: int index>;

        $i1 = i0 + 1;

        r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator: int index> = $i1;

        $r2 = $r1[i0];

        return $r2;
    }

    public final boolean hasNextNode()
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator r0;
        boolean $z0, $z1, $z2;
        int $i0;
        java.lang.Object[] $r1;
        java.lang.Object $r2;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator;

        $z0 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator: boolean hasNextCell()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator: java.lang.Object[] buffer>;

        $i0 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator: int index>;

        $r2 = $r1[$i0];

        $z1 = $r2 instanceof androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNode;

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public final androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNode currentNode()
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator r0;
        boolean $z0;
        int $i0;
        java.lang.Object[] $r1;
        java.lang.Object $r2;
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNode $r3;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator;

        $z0 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator: boolean hasNextNode()>();

        staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.internal.CommonFunctionsKt: void assert(boolean)>($z0);

        $r1 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator: java.lang.Object[] buffer>;

        $i0 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator: int index>;

        $r2 = $r1[$i0];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r2, "null cannot be cast to non-null type androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNode<E of androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNodeIterator>");

        $r3 = (androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableSet.TrieNode) $r2;

        return $r3;
    }

