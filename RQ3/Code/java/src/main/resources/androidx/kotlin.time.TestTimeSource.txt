kotlin.time.TestTimeSource
<kotlin.time.TestTimeSource: long reading>
    public void <init>()
    {
        kotlin.time.TestTimeSource $r0;
        kotlin.time.DurationUnit $r1;

        $r0 := @this: kotlin.time.TestTimeSource;

        $r1 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit NANOSECONDS>;

        specialinvoke $r0.<kotlin.time.AbstractLongTimeSource: void <init>(kotlin.time.DurationUnit)>($r1);

        return;
    }

    private final void overflow-LRDsOJo(long)
    {
        kotlin.time.TestTimeSource $r0;
        java.lang.IllegalStateException $r1;
        long $l0, $l1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $r0 := @this: kotlin.time.TestTimeSource;

        $l0 := @parameter0: long;

        $r1 = new java.lang.IllegalStateException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TestTimeSource will overflow if its reading ");

        $l1 = $r0.<kotlin.time.TestTimeSource: long reading>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ns is advanced by ");

        $r3 = staticinvoke <kotlin.time.Duration: java.lang.String toString-impl(long)>($l0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r1;
    }

    public final void plusAssign-LRDsOJo(long)
    {
        kotlin.time.TestTimeSource $r0;
        long $l0, $l2, $l3, $l4;
        byte $b1;
        kotlin.time.DurationUnit $r1;
        double $d0, $d1;

        $r0 := @this: kotlin.time.TestTimeSource;

        $l0 := @parameter0: long;

        $r1 = virtualinvoke $r0.<kotlin.time.TestTimeSource: kotlin.time.DurationUnit getUnit()>();

        $l2 = staticinvoke <kotlin.time.Duration: long toLong-impl(long,kotlin.time.DurationUnit)>($l0, $r1);

        $b1 = $l2 cmp -9223372036854775808L;

        if $b1 == 0 goto label1;

        $b1 = $l2 cmp 9223372036854775807L;

        if $b1 == 0 goto label1;

        $l3 = $r0.<kotlin.time.TestTimeSource: long reading>;

        $l4 = $l3 + $l2;

        $l2 = $l2 ^ $l3;

        $b1 = $l2 cmp 0L;

        if $b1 < 0 goto label4;

        $l3 = $l3 ^ $l4;

        $b1 = $l3 cmp 0L;

        if $b1 >= 0 goto label4;

        specialinvoke $r0.<kotlin.time.TestTimeSource: void overflow-LRDsOJo(long)>($l0);

        goto label4;

     label1:
        $r1 = virtualinvoke $r0.<kotlin.time.TestTimeSource: kotlin.time.DurationUnit getUnit()>();

        $d0 = staticinvoke <kotlin.time.Duration: double toDouble-impl(long,kotlin.time.DurationUnit)>($l0, $r1);

        $l4 = $r0.<kotlin.time.TestTimeSource: long reading>;

        $d1 = (double) $l4;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        $d0 = $d1 + $d0;

        $b1 = $d0 cmpl 9.223372036854776E18;

        if $b1 > 0 goto label2;

        $b1 = $d0 cmpg -9.223372036854776E18;

        if $b1 >= 0 goto label3;

     label2:
        specialinvoke $r0.<kotlin.time.TestTimeSource: void overflow-LRDsOJo(long)>($l0);

     label3:
        $l4 = (long) $d0;

     label4:
        $r0.<kotlin.time.TestTimeSource: long reading> = $l4;

        return;
    }

    protected long read()
    {
        kotlin.time.TestTimeSource $r0;
        long l0;

        $r0 := @this: kotlin.time.TestTimeSource;

        l0 = $r0.<kotlin.time.TestTimeSource: long reading>;

        return l0;
    }

