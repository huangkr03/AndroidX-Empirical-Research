androidx.security.identity.HardwareIdentityCredential
<androidx.security.identity.HardwareIdentityCredential: java.lang.String TAG>
<androidx.security.identity.HardwareIdentityCredential: java.security.KeyPair mEphemeralKeyPair>
<androidx.security.identity.HardwareIdentityCredential: java.security.PublicKey mReaderEphemeralPublicKey>
<androidx.security.identity.HardwareIdentityCredential: byte[] mSessionTranscript>
<androidx.security.identity.HardwareIdentityCredential: javax.crypto.SecretKey mSKDevice>
<androidx.security.identity.HardwareIdentityCredential: javax.crypto.SecretKey mSKReader>
<androidx.security.identity.HardwareIdentityCredential: int mSKDeviceCounter>
<androidx.security.identity.HardwareIdentityCredential: int mSKReaderCounter>
<androidx.security.identity.HardwareIdentityCredential: android.security.identity.IdentityCredential mCredential>
    void <init>(android.security.identity.IdentityCredential)
    {
        androidx.security.identity.HardwareIdentityCredential r0;
        android.security.identity.IdentityCredential r1;

        r0 := @this: androidx.security.identity.HardwareIdentityCredential;

        r1 := @parameter0: android.security.identity.IdentityCredential;

        specialinvoke r0.<androidx.security.identity.IdentityCredential: void <init>()>();

        r0.<androidx.security.identity.HardwareIdentityCredential: java.security.KeyPair mEphemeralKeyPair> = null;

        r0.<androidx.security.identity.HardwareIdentityCredential: java.security.PublicKey mReaderEphemeralPublicKey> = null;

        r0.<androidx.security.identity.HardwareIdentityCredential: byte[] mSessionTranscript> = null;

        r0.<androidx.security.identity.HardwareIdentityCredential: javax.crypto.SecretKey mSKDevice> = null;

        r0.<androidx.security.identity.HardwareIdentityCredential: javax.crypto.SecretKey mSKReader> = null;

        r0.<androidx.security.identity.HardwareIdentityCredential: android.security.identity.IdentityCredential mCredential> = null;

        r0.<androidx.security.identity.HardwareIdentityCredential: android.security.identity.IdentityCredential mCredential> = r1;

        return;
    }

    public java.security.KeyPair createEphemeralKeyPair()
    {
        androidx.security.identity.HardwareIdentityCredential r0;
        java.security.KeyPair $r1, $r2, $r4;
        android.security.identity.IdentityCredential $r3;

        r0 := @this: androidx.security.identity.HardwareIdentityCredential;

        $r1 = r0.<androidx.security.identity.HardwareIdentityCredential: java.security.KeyPair mEphemeralKeyPair>;

        if $r1 != null goto label1;

        $r3 = r0.<androidx.security.identity.HardwareIdentityCredential: android.security.identity.IdentityCredential mCredential>;

        $r4 = virtualinvoke $r3.<android.security.identity.IdentityCredential: java.security.KeyPair createEphemeralKeyPair()>();

        r0.<androidx.security.identity.HardwareIdentityCredential: java.security.KeyPair mEphemeralKeyPair> = $r4;

     label1:
        $r2 = r0.<androidx.security.identity.HardwareIdentityCredential: java.security.KeyPair mEphemeralKeyPair>;

        return $r2;
    }

    public void setReaderEphemeralPublicKey(java.security.PublicKey) throws java.security.InvalidKeyException
    {
        androidx.security.identity.HardwareIdentityCredential r0;
        java.security.PublicKey r1;
        android.security.identity.IdentityCredential $r2;

        r0 := @this: androidx.security.identity.HardwareIdentityCredential;

        r1 := @parameter0: java.security.PublicKey;

        r0.<androidx.security.identity.HardwareIdentityCredential: java.security.PublicKey mReaderEphemeralPublicKey> = r1;

        $r2 = r0.<androidx.security.identity.HardwareIdentityCredential: android.security.identity.IdentityCredential mCredential>;

        virtualinvoke $r2.<android.security.identity.IdentityCredential: void setReaderEphemeralPublicKey(java.security.PublicKey)>(r1);

        return;
    }

    public void setSessionTranscript(byte[])
    {
        androidx.security.identity.HardwareIdentityCredential r0;
        byte[] r1, $r2, $r4;
        java.lang.Object $r3;
        java.lang.RuntimeException $r5;

        r0 := @this: androidx.security.identity.HardwareIdentityCredential;

        r1 := @parameter0: byte[];

        $r2 = r0.<androidx.security.identity.HardwareIdentityCredential: byte[] mSessionTranscript>;

        if $r2 == null goto label1;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("SessionTranscript already set");

        throw $r5;

     label1:
        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (byte[]) $r3;

        r0.<androidx.security.identity.HardwareIdentityCredential: byte[] mSessionTranscript> = $r4;

        return;
    }

    private void ensureSessionEncryptionKey()
    {
        androidx.security.identity.HardwareIdentityCredential r0;
        byte[] r1, r2, r3, $r6, $r11, $r14, $r16, r23, r24, r25, r26;
        javax.crypto.SecretKey $r4;
        java.security.PublicKey $r5, $r9;
        java.security.KeyPair $r7;
        java.security.PrivateKey $r8;
        co.nstant.in.cbor.model.DataItem $r12;
        java.security.MessageDigest $r13;
        javax.crypto.spec.SecretKeySpec $r15, $r17;
        java.lang.RuntimeException $r18, $r19, $r21;
        java.lang.Throwable $r20, r27;
        javax.crypto.KeyAgreement r22;

        r0 := @this: androidx.security.identity.HardwareIdentityCredential;

        $r4 = r0.<androidx.security.identity.HardwareIdentityCredential: javax.crypto.SecretKey mSKDevice>;

        if $r4 == null goto label1;

        return;

     label1:
        $r5 = r0.<androidx.security.identity.HardwareIdentityCredential: java.security.PublicKey mReaderEphemeralPublicKey>;

        if $r5 != null goto label2;

        $r19 = new java.lang.RuntimeException;

        specialinvoke $r19.<java.lang.RuntimeException: void <init>(java.lang.String)>("Reader ephemeral key not set");

        throw $r19;

     label2:
        $r6 = r0.<androidx.security.identity.HardwareIdentityCredential: byte[] mSessionTranscript>;

        if $r6 != null goto label3;

        $r18 = new java.lang.RuntimeException;

        specialinvoke $r18.<java.lang.RuntimeException: void <init>(java.lang.String)>("Session transcript not set");

        throw $r18;

     label3:
        r22 = staticinvoke <javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String)>("ECDH");

        $r7 = r0.<androidx.security.identity.HardwareIdentityCredential: java.security.KeyPair mEphemeralKeyPair>;

        $r8 = virtualinvoke $r7.<java.security.KeyPair: java.security.PrivateKey getPrivate()>();

        virtualinvoke r22.<javax.crypto.KeyAgreement: void init(java.security.Key)>($r8);

        $r9 = r0.<androidx.security.identity.HardwareIdentityCredential: java.security.PublicKey mReaderEphemeralPublicKey>;

        virtualinvoke r22.<javax.crypto.KeyAgreement: java.security.Key doPhase(java.security.Key,boolean)>($r9, 1);

        r1 = virtualinvoke r22.<javax.crypto.KeyAgreement: byte[] generateSecret()>();

        $r11 = r0.<androidx.security.identity.HardwareIdentityCredential: byte[] mSessionTranscript>;

        $r12 = staticinvoke <androidx.security.identity.Util: co.nstant.in.cbor.model.DataItem cborBuildTaggedByteString(byte[])>($r11);

        r2 = staticinvoke <androidx.security.identity.Util: byte[] cborEncode(co.nstant.in.cbor.model.DataItem)>($r12);

        $r13 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-256");

        r3 = virtualinvoke $r13.<java.security.MessageDigest: byte[] digest(byte[])>(r2);

        $r14 = newarray (byte)[8];

        $r14[0] = 83;

        $r14[1] = 75;

        $r14[2] = 68;

        $r14[3] = 101;

        $r14[4] = 118;

        $r14[5] = 105;

        $r14[6] = 99;

        $r14[7] = 101;

        r23 = $r14;

        r24 = staticinvoke <androidx.security.identity.Util: byte[] computeHkdf(java.lang.String,byte[],byte[],byte[],int)>("HmacSha256", r1, r3, r23, 32);

        $r15 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r15.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r24, "AES");

        r0.<androidx.security.identity.HardwareIdentityCredential: javax.crypto.SecretKey mSKDevice> = $r15;

        $r16 = newarray (byte)[8];

        $r16[0] = 83;

        $r16[1] = 75;

        $r16[2] = 82;

        $r16[3] = 101;

        $r16[4] = 97;

        $r16[5] = 100;

        $r16[6] = 101;

        $r16[7] = 114;

        r25 = $r16;

        r26 = staticinvoke <androidx.security.identity.Util: byte[] computeHkdf(java.lang.String,byte[],byte[],byte[],int)>("HmacSha256", r1, r3, r25, 32);

        $r17 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r17.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r26, "AES");

        r0.<androidx.security.identity.HardwareIdentityCredential: javax.crypto.SecretKey mSKReader> = $r17;

        r0.<androidx.security.identity.HardwareIdentityCredential: int mSKDeviceCounter> = 1;

        r0.<androidx.security.identity.HardwareIdentityCredential: int mSKReaderCounter> = 1;

     label4:
        goto label6;

     label5:
        $r20 := @caughtexception;

        r27 = $r20;

        $r21 = new java.lang.RuntimeException;

        specialinvoke $r21.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error performing key agreement", r27);

        throw $r21;

     label6:
        return;

        catch java.security.InvalidKeyException from label3 to label4 with label5;
        catch java.security.NoSuchAlgorithmException from label3 to label4 with label5;
    }

    public byte[] encryptMessageToReader(byte[])
    {
        androidx.security.identity.HardwareIdentityCredential r0;
        byte[] r1, $r5, r10;
        javax.crypto.Cipher r2;
        javax.crypto.spec.GCMParameterSpec r3, $r4;
        int $i0, $i1, $i2;
        javax.crypto.SecretKey $r6;
        java.lang.Throwable $r7, r11;
        java.lang.RuntimeException $r8;
        java.nio.ByteBuffer r9;

        r0 := @this: androidx.security.identity.HardwareIdentityCredential;

        r1 := @parameter0: byte[];

        specialinvoke r0.<androidx.security.identity.HardwareIdentityCredential: void ensureSessionEncryptionKey()>();

     label1:
        r9 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(12);

        virtualinvoke r9.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int,int)>(0, 0);

        virtualinvoke r9.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int,int)>(4, 1);

        $i0 = r0.<androidx.security.identity.HardwareIdentityCredential: int mSKDeviceCounter>;

        virtualinvoke r9.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int,int)>(8, $i0);

        r2 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/GCM/NoPadding");

        $r4 = new javax.crypto.spec.GCMParameterSpec;

        $r5 = virtualinvoke r9.<java.nio.ByteBuffer: byte[] array()>();

        specialinvoke $r4.<javax.crypto.spec.GCMParameterSpec: void <init>(int,byte[])>(128, $r5);

        r3 = $r4;

        $r6 = r0.<androidx.security.identity.HardwareIdentityCredential: javax.crypto.SecretKey mSKDevice>;

        virtualinvoke r2.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(1, $r6, r3);

        r10 = virtualinvoke r2.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r1);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r11 = $r7;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error encrypting message", r11);

        throw $r8;

     label4:
        $i1 = r0.<androidx.security.identity.HardwareIdentityCredential: int mSKDeviceCounter>;

        $i2 = $i1 + 1;

        r0.<androidx.security.identity.HardwareIdentityCredential: int mSKDeviceCounter> = $i2;

        return r10;

        catch javax.crypto.BadPaddingException from label1 to label2 with label3;
        catch javax.crypto.IllegalBlockSizeException from label1 to label2 with label3;
        catch javax.crypto.NoSuchPaddingException from label1 to label2 with label3;
        catch java.security.InvalidKeyException from label1 to label2 with label3;
        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label3;
    }

    public byte[] decryptMessageFromReader(byte[]) throws androidx.security.identity.MessageDecryptionException
    {
        androidx.security.identity.HardwareIdentityCredential r0;
        byte[] r1, $r5, r9;
        java.nio.ByteBuffer r2;
        int $i0, $i1, $i2;
        javax.crypto.SecretKey $r4;
        java.lang.Throwable $r6, r10, r13;
        javax.crypto.Cipher r8;
        javax.crypto.spec.GCMParameterSpec r11;
        androidx.security.identity.MessageDecryptionException r12;

        r0 := @this: androidx.security.identity.HardwareIdentityCredential;

        r1 := @parameter0: byte[];

        specialinvoke r0.<androidx.security.identity.HardwareIdentityCredential: void ensureSessionEncryptionKey()>();

        r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(12);

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int,int)>(0, 0);

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int,int)>(4, 0);

        $i0 = r0.<androidx.security.identity.HardwareIdentityCredential: int mSKReaderCounter>;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int,int)>(8, $i0);

     label1:
        r8 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/GCM/NoPadding");

        $r4 = r0.<androidx.security.identity.HardwareIdentityCredential: javax.crypto.SecretKey mSKReader>;

        r11 = new javax.crypto.spec.GCMParameterSpec;

        $r5 = virtualinvoke r2.<java.nio.ByteBuffer: byte[] array()>();

        specialinvoke r11.<javax.crypto.spec.GCMParameterSpec: void <init>(int,byte[])>(128, $r5);

        virtualinvoke r8.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(2, $r4, r11);

        r9 = virtualinvoke r8.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r1);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r10 = $r6;

        r12 = new androidx.security.identity.MessageDecryptionException;

        specialinvoke r12.<androidx.security.identity.MessageDecryptionException: void <init>(java.lang.String,java.lang.Throwable)>("Error decrypting message", r10);

        r13 = (java.lang.Throwable) r12;

        throw r13;

     label4:
        $i1 = r0.<androidx.security.identity.HardwareIdentityCredential: int mSKReaderCounter>;

        $i2 = $i1 + 1;

        r0.<androidx.security.identity.HardwareIdentityCredential: int mSKReaderCounter> = $i2;

        return r9;

        catch javax.crypto.BadPaddingException from label1 to label2 with label3;
        catch javax.crypto.IllegalBlockSizeException from label1 to label2 with label3;
        catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label3;
        catch java.security.InvalidKeyException from label1 to label2 with label3;
        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch javax.crypto.NoSuchPaddingException from label1 to label2 with label3;
    }

    public java.util.Collection getCredentialKeyCertificateChain()
    {
        androidx.security.identity.HardwareIdentityCredential r0;
        android.security.identity.IdentityCredential $r1;
        java.util.Collection $r2;

        r0 := @this: androidx.security.identity.HardwareIdentityCredential;

        $r1 = r0.<androidx.security.identity.HardwareIdentityCredential: android.security.identity.IdentityCredential mCredential>;

        $r2 = virtualinvoke $r1.<android.security.identity.IdentityCredential: java.util.Collection getCredentialKeyCertificateChain()>();

        return $r2;
    }

    public void setAllowUsingExhaustedKeys(boolean)
    {
        androidx.security.identity.HardwareIdentityCredential r0;
        boolean z0;
        android.security.identity.IdentityCredential $r1;

        r0 := @this: androidx.security.identity.HardwareIdentityCredential;

        z0 := @parameter0: boolean;

        $r1 = r0.<androidx.security.identity.HardwareIdentityCredential: android.security.identity.IdentityCredential mCredential>;

        virtualinvoke $r1.<android.security.identity.IdentityCredential: void setAllowUsingExhaustedKeys(boolean)>(z0);

        return;
    }

    public androidx.biometric.BiometricPrompt$CryptoObject getCryptoObject()
    {
        androidx.security.identity.HardwareIdentityCredential r0;
        androidx.biometric.BiometricPrompt$CryptoObject r1, $r2;
        android.security.identity.IdentityCredential $r3;

        r0 := @this: androidx.security.identity.HardwareIdentityCredential;

        $r2 = new androidx.biometric.BiometricPrompt$CryptoObject;

        $r3 = r0.<androidx.security.identity.HardwareIdentityCredential: android.security.identity.IdentityCredential mCredential>;

        specialinvoke $r2.<androidx.biometric.BiometricPrompt$CryptoObject: void <init>(android.security.identity.IdentityCredential)>($r3);

        r1 = $r2;

        return r1;
    }

    public androidx.security.identity.ResultData getEntries(byte[], java.util.Map, byte[]) throws androidx.security.identity.NoAuthenticationKeyAvailableException, androidx.security.identity.InvalidReaderSignatureException, androidx.security.identity.InvalidRequestMessageException, androidx.security.identity.EphemeralPublicKeyNotFoundException
    {
        androidx.security.identity.HardwareIdentityCredential r0;
        byte[] r1, r3, r9, $r10, $r13, $r15, $r17;
        java.util.Map r2;
        android.security.identity.ResultData r4;
        java.util.Iterator r5, r7;
        java.lang.String r6, r8, $r28, $r33, $r36, $r39;
        int i0;
        android.security.identity.IdentityCredential $r11;
        java.util.Collection $r19, $r22;
        boolean $z0, $z1;
        androidx.security.identity.SimpleResultData $r20;
        java.lang.Object $r21, $r23;
        java.lang.Throwable $r26, $r29, $r31, $r34, $r37, r40, r41, r42, r43, r44, r52, r53, r54, r55;
        androidx.security.identity.SimpleResultData$Builder r45, r51;
        androidx.security.identity.NoAuthenticationKeyAvailableException r46;
        androidx.security.identity.InvalidReaderSignatureException r47;
        androidx.security.identity.InvalidRequestMessageException r48;
        androidx.security.identity.EphemeralPublicKeyNotFoundException r49;
        java.lang.RuntimeException r50;

        r0 := @this: androidx.security.identity.HardwareIdentityCredential;

        r1 := @parameter0: byte[];

        r2 := @parameter1: java.util.Map;

        r3 := @parameter2: byte[];

     label01:
        $r11 = r0.<androidx.security.identity.HardwareIdentityCredential: android.security.identity.IdentityCredential mCredential>;

        $r10 = r0.<androidx.security.identity.HardwareIdentityCredential: byte[] mSessionTranscript>;

        r4 = virtualinvoke $r11.<android.security.identity.IdentityCredential: android.security.identity.ResultData getEntries(byte[],java.util.Map,byte[],byte[])>(r1, r2, $r10, r3);

     label02:
        goto label08;

     label03:
        $r34 := @caughtexception;

        r40 = $r34;

        r46 = new androidx.security.identity.NoAuthenticationKeyAvailableException;

        $r36 = virtualinvoke r40.<android.security.identity.NoAuthenticationKeyAvailableException: java.lang.String getMessage()>();

        specialinvoke r46.<androidx.security.identity.NoAuthenticationKeyAvailableException: void <init>(java.lang.String,java.lang.Throwable)>($r36, r40);

        r52 = (java.lang.Throwable) r46;

        throw r52;

     label04:
        $r37 := @caughtexception;

        r41 = $r37;

        r47 = new androidx.security.identity.InvalidReaderSignatureException;

        $r39 = virtualinvoke r41.<android.security.identity.InvalidReaderSignatureException: java.lang.String getMessage()>();

        specialinvoke r47.<androidx.security.identity.InvalidReaderSignatureException: void <init>(java.lang.String,java.lang.Throwable)>($r39, r41);

        r53 = (java.lang.Throwable) r47;

        throw r53;

     label05:
        $r26 := @caughtexception;

        r42 = $r26;

        r48 = new androidx.security.identity.InvalidRequestMessageException;

        $r28 = virtualinvoke r42.<android.security.identity.InvalidRequestMessageException: java.lang.String getMessage()>();

        specialinvoke r48.<androidx.security.identity.InvalidRequestMessageException: void <init>(java.lang.String,java.lang.Throwable)>($r28, r42);

        r54 = (java.lang.Throwable) r48;

        throw r54;

     label06:
        $r31 := @caughtexception;

        r43 = $r31;

        r49 = new androidx.security.identity.EphemeralPublicKeyNotFoundException;

        $r33 = virtualinvoke r43.<android.security.identity.EphemeralPublicKeyNotFoundException: java.lang.String getMessage()>();

        specialinvoke r49.<androidx.security.identity.EphemeralPublicKeyNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>($r33, r43);

        r55 = (java.lang.Throwable) r49;

        throw r55;

     label07:
        $r29 := @caughtexception;

        r44 = $r29;

        r50 = new java.lang.RuntimeException;

        specialinvoke r50.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected SessionMismatchException", r44);

        throw r50;

     label08:
        r51 = new androidx.security.identity.SimpleResultData$Builder;

        specialinvoke r51.<androidx.security.identity.SimpleResultData$Builder: void <init>()>();

        r45 = r51;

        $r13 = virtualinvoke r4.<android.security.identity.ResultData: byte[] getMessageAuthenticationCode()>();

        virtualinvoke r45.<androidx.security.identity.SimpleResultData$Builder: androidx.security.identity.SimpleResultData$Builder setMessageAuthenticationCode(byte[])>($r13);

        $r15 = virtualinvoke r4.<android.security.identity.ResultData: byte[] getAuthenticatedData()>();

        virtualinvoke r45.<androidx.security.identity.SimpleResultData$Builder: androidx.security.identity.SimpleResultData$Builder setAuthenticatedData(byte[])>($r15);

        $r17 = virtualinvoke r4.<android.security.identity.ResultData: byte[] getStaticAuthenticationData()>();

        virtualinvoke r45.<androidx.security.identity.SimpleResultData$Builder: androidx.security.identity.SimpleResultData$Builder setStaticAuthenticationData(byte[])>($r17);

        $r19 = virtualinvoke r4.<android.security.identity.ResultData: java.util.Collection getNamespaces()>();

        r5 = interfaceinvoke $r19.<java.util.Collection: java.util.Iterator iterator()>();

     label09:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label14;

        $r21 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r21;

        $r22 = virtualinvoke r4.<android.security.identity.ResultData: java.util.Collection getEntryNames(java.lang.String)>(r6);

        r7 = interfaceinvoke $r22.<java.util.Collection: java.util.Iterator iterator()>();

     label10:
        $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label13;

        $r23 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.lang.String) $r23;

        i0 = virtualinvoke r4.<android.security.identity.ResultData: int getStatus(java.lang.String,java.lang.String)>(r6, r8);

        if i0 != 0 goto label11;

        r9 = virtualinvoke r4.<android.security.identity.ResultData: byte[] getEntry(java.lang.String,java.lang.String)>(r6, r8);

        virtualinvoke r45.<androidx.security.identity.SimpleResultData$Builder: androidx.security.identity.SimpleResultData$Builder addEntry(java.lang.String,java.lang.String,byte[])>(r6, r8, r9);

        goto label12;

     label11:
        virtualinvoke r45.<androidx.security.identity.SimpleResultData$Builder: androidx.security.identity.SimpleResultData$Builder addErrorStatus(java.lang.String,java.lang.String,int)>(r6, r8, i0);

     label12:
        goto label10;

     label13:
        goto label09;

     label14:
        $r20 = virtualinvoke r45.<androidx.security.identity.SimpleResultData$Builder: androidx.security.identity.SimpleResultData build()>();

        return $r20;

        catch android.security.identity.NoAuthenticationKeyAvailableException from label01 to label02 with label03;
        catch android.security.identity.InvalidReaderSignatureException from label01 to label02 with label04;
        catch android.security.identity.InvalidRequestMessageException from label01 to label02 with label05;
        catch android.security.identity.EphemeralPublicKeyNotFoundException from label01 to label02 with label06;
        catch android.security.identity.SessionTranscriptMismatchException from label01 to label02 with label07;
    }

    public void setAvailableAuthenticationKeys(int, int)
    {
        androidx.security.identity.HardwareIdentityCredential r0;
        int i0, i1;
        android.security.identity.IdentityCredential $r1;

        r0 := @this: androidx.security.identity.HardwareIdentityCredential;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<androidx.security.identity.HardwareIdentityCredential: android.security.identity.IdentityCredential mCredential>;

        virtualinvoke $r1.<android.security.identity.IdentityCredential: void setAvailableAuthenticationKeys(int,int)>(i0, i1);

        return;
    }

    public java.util.Collection getAuthKeysNeedingCertification()
    {
        androidx.security.identity.HardwareIdentityCredential r0;
        android.security.identity.IdentityCredential $r1;
        java.util.Collection $r2;

        r0 := @this: androidx.security.identity.HardwareIdentityCredential;

        $r1 = r0.<androidx.security.identity.HardwareIdentityCredential: android.security.identity.IdentityCredential mCredential>;

        $r2 = virtualinvoke $r1.<android.security.identity.IdentityCredential: java.util.Collection getAuthKeysNeedingCertification()>();

        return $r2;
    }

    public void storeStaticAuthenticationData(java.security.cert.X509Certificate, byte[]) throws androidx.security.identity.UnknownAuthenticationKeyException
    {
        androidx.security.identity.HardwareIdentityCredential r0;
        java.security.cert.X509Certificate r1;
        byte[] r2;
        java.lang.Throwable r3, $r5, r9;
        android.security.identity.IdentityCredential $r4;
        java.lang.String $r7;
        androidx.security.identity.UnknownAuthenticationKeyException r8;

        r0 := @this: androidx.security.identity.HardwareIdentityCredential;

        r1 := @parameter0: java.security.cert.X509Certificate;

        r2 := @parameter1: byte[];

     label1:
        $r4 = r0.<androidx.security.identity.HardwareIdentityCredential: android.security.identity.IdentityCredential mCredential>;

        virtualinvoke $r4.<android.security.identity.IdentityCredential: void storeStaticAuthenticationData(java.security.cert.X509Certificate,byte[])>(r1, r2);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        r8 = new androidx.security.identity.UnknownAuthenticationKeyException;

        $r7 = virtualinvoke r3.<android.security.identity.UnknownAuthenticationKeyException: java.lang.String getMessage()>();

        specialinvoke r8.<androidx.security.identity.UnknownAuthenticationKeyException: void <init>(java.lang.String,java.lang.Throwable)>($r7, r3);

        r9 = (java.lang.Throwable) r8;

        throw r9;

     label4:
        return;

        catch android.security.identity.UnknownAuthenticationKeyException from label1 to label2 with label3;
    }

    public int[] getAuthenticationDataUsageCount()
    {
        androidx.security.identity.HardwareIdentityCredential r0;
        android.security.identity.IdentityCredential $r1;
        int[] $r2;

        r0 := @this: androidx.security.identity.HardwareIdentityCredential;

        $r1 = r0.<androidx.security.identity.HardwareIdentityCredential: android.security.identity.IdentityCredential mCredential>;

        $r2 = virtualinvoke $r1.<android.security.identity.IdentityCredential: int[] getAuthenticationDataUsageCount()>();

        return $r2;
    }

    public void setAllowUsingExpiredKeys(boolean)
    {
        androidx.security.identity.HardwareIdentityCredential r0;
        boolean z0;
        int $i0;
        java.lang.UnsupportedOperationException $r1;
        android.security.identity.IdentityCredential $r2;

        r0 := @this: androidx.security.identity.HardwareIdentityCredential;

        z0 := @parameter0: boolean;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 31 goto label1;

        $r2 = r0.<androidx.security.identity.HardwareIdentityCredential: android.security.identity.IdentityCredential mCredential>;

        staticinvoke <androidx.security.identity.HardwareIdentityCredential$ApiImplS: void callSetAllowUsingExpiredKeys(android.security.identity.IdentityCredential,boolean)>($r2, z0);

        goto label2;

     label1:
        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;

     label2:
        return;
    }

    public void storeStaticAuthenticationData(java.security.cert.X509Certificate, android.icu.util.Calendar, byte[]) throws androidx.security.identity.UnknownAuthenticationKeyException
    {
        androidx.security.identity.HardwareIdentityCredential r0;
        java.security.cert.X509Certificate r1;
        android.icu.util.Calendar r2;
        byte[] r3;
        int $i0;
        long $l1;
        android.security.identity.IdentityCredential $r5;
        java.lang.Throwable $r6, r10, r13;
        java.lang.String $r8;
        java.time.Instant r9;
        androidx.security.identity.UnknownAuthenticationKeyException r11;
        java.lang.UnsupportedOperationException r12;

        r0 := @this: androidx.security.identity.HardwareIdentityCredential;

        r1 := @parameter0: java.security.cert.X509Certificate;

        r2 := @parameter1: android.icu.util.Calendar;

        r3 := @parameter2: byte[];

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 31 goto label4;

     label1:
        $l1 = virtualinvoke r2.<android.icu.util.Calendar: long getTimeInMillis()>();

        r9 = staticinvoke <java.time.Instant: java.time.Instant ofEpochMilli(long)>($l1);

        $r5 = r0.<androidx.security.identity.HardwareIdentityCredential: android.security.identity.IdentityCredential mCredential>;

        staticinvoke <androidx.security.identity.HardwareIdentityCredential$ApiImplS: void callStoreStaticAuthenticationData(android.security.identity.IdentityCredential,java.security.cert.X509Certificate,java.time.Instant,byte[])>($r5, r1, r9, r3);

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        r10 = $r6;

        r11 = new androidx.security.identity.UnknownAuthenticationKeyException;

        $r8 = virtualinvoke r10.<android.security.identity.UnknownAuthenticationKeyException: java.lang.String getMessage()>();

        specialinvoke r11.<androidx.security.identity.UnknownAuthenticationKeyException: void <init>(java.lang.String,java.lang.Throwable)>($r8, r10);

        r13 = (java.lang.Throwable) r11;

        throw r13;

     label4:
        r12 = new java.lang.UnsupportedOperationException;

        specialinvoke r12.<java.lang.UnsupportedOperationException: void <init>()>();

        throw r12;

     label5:
        return;

        catch android.security.identity.UnknownAuthenticationKeyException from label1 to label2 with label3;
    }

    public byte[] proveOwnership(byte[])
    {
        androidx.security.identity.HardwareIdentityCredential r0;
        byte[] r1, $r4;
        int $i0;
        java.lang.UnsupportedOperationException $r2;
        android.security.identity.IdentityCredential $r3;

        r0 := @this: androidx.security.identity.HardwareIdentityCredential;

        r1 := @parameter0: byte[];

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 31 goto label1;

        $r3 = r0.<androidx.security.identity.HardwareIdentityCredential: android.security.identity.IdentityCredential mCredential>;

        $r4 = staticinvoke <androidx.security.identity.HardwareIdentityCredential$ApiImplS: byte[] callProveOwnership(android.security.identity.IdentityCredential,byte[])>($r3, r1);

        return $r4;

     label1:
        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public byte[] delete(byte[])
    {
        androidx.security.identity.HardwareIdentityCredential r0;
        byte[] r1, $r4;
        int $i0;
        java.lang.UnsupportedOperationException $r2;
        android.security.identity.IdentityCredential $r3;

        r0 := @this: androidx.security.identity.HardwareIdentityCredential;

        r1 := @parameter0: byte[];

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 31 goto label1;

        $r3 = r0.<androidx.security.identity.HardwareIdentityCredential: android.security.identity.IdentityCredential mCredential>;

        $r4 = staticinvoke <androidx.security.identity.HardwareIdentityCredential$ApiImplS: byte[] callDelete(android.security.identity.IdentityCredential,byte[])>($r3, r1);

        return $r4;

     label1:
        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public byte[] update(androidx.security.identity.PersonalizationData)
    {
        androidx.security.identity.HardwareIdentityCredential r0;
        androidx.security.identity.PersonalizationData r1;
        int $i0;
        java.lang.UnsupportedOperationException $r2;
        android.security.identity.IdentityCredential $r3;
        android.security.identity.PersonalizationData $r4;
        byte[] $r5;

        r0 := @this: androidx.security.identity.HardwareIdentityCredential;

        r1 := @parameter0: androidx.security.identity.PersonalizationData;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 31 goto label1;

        $r3 = r0.<androidx.security.identity.HardwareIdentityCredential: android.security.identity.IdentityCredential mCredential>;

        $r4 = staticinvoke <androidx.security.identity.HardwareWritableIdentityCredential: android.security.identity.PersonalizationData convertPDFromJetpack(androidx.security.identity.PersonalizationData)>(r1);

        $r5 = staticinvoke <androidx.security.identity.HardwareIdentityCredential$ApiImplS: byte[] callUpdate(android.security.identity.IdentityCredential,android.security.identity.PersonalizationData)>($r3, $r4);

        return $r5;

     label1:
        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

androidx.security.identity.HardwareIdentityCredential$ApiImplS
    private void <init>()
    {
        androidx.security.identity.HardwareIdentityCredential$ApiImplS r0;

        r0 := @this: androidx.security.identity.HardwareIdentityCredential$ApiImplS;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void callSetAllowUsingExpiredKeys(android.security.identity.IdentityCredential, boolean)
    {
        android.security.identity.IdentityCredential r0;
        boolean z0;

        r0 := @parameter0: android.security.identity.IdentityCredential;

        z0 := @parameter1: boolean;

        virtualinvoke r0.<android.security.identity.IdentityCredential: void setAllowUsingExpiredKeys(boolean)>(z0);

        return;
    }

    static void callStoreStaticAuthenticationData(android.security.identity.IdentityCredential, java.security.cert.X509Certificate, java.time.Instant, byte[]) throws android.security.identity.UnknownAuthenticationKeyException
    {
        android.security.identity.IdentityCredential r0;
        java.security.cert.X509Certificate r1;
        java.time.Instant r2;
        byte[] r3;

        r0 := @parameter0: android.security.identity.IdentityCredential;

        r1 := @parameter1: java.security.cert.X509Certificate;

        r2 := @parameter2: java.time.Instant;

        r3 := @parameter3: byte[];

        virtualinvoke r0.<android.security.identity.IdentityCredential: void storeStaticAuthenticationData(java.security.cert.X509Certificate,java.time.Instant,byte[])>(r1, r2, r3);

        return;
    }

    static byte[] callProveOwnership(android.security.identity.IdentityCredential, byte[])
    {
        android.security.identity.IdentityCredential r0;
        byte[] r1, $r2;

        r0 := @parameter0: android.security.identity.IdentityCredential;

        r1 := @parameter1: byte[];

        $r2 = virtualinvoke r0.<android.security.identity.IdentityCredential: byte[] proveOwnership(byte[])>(r1);

        return $r2;
    }

    static byte[] callDelete(android.security.identity.IdentityCredential, byte[])
    {
        android.security.identity.IdentityCredential r0;
        byte[] r1, $r2;

        r0 := @parameter0: android.security.identity.IdentityCredential;

        r1 := @parameter1: byte[];

        $r2 = virtualinvoke r0.<android.security.identity.IdentityCredential: byte[] delete(byte[])>(r1);

        return $r2;
    }

    static byte[] callUpdate(android.security.identity.IdentityCredential, android.security.identity.PersonalizationData)
    {
        android.security.identity.IdentityCredential r0;
        android.security.identity.PersonalizationData r1;
        byte[] $r2;

        r0 := @parameter0: android.security.identity.IdentityCredential;

        r1 := @parameter1: android.security.identity.PersonalizationData;

        $r2 = virtualinvoke r0.<android.security.identity.IdentityCredential: byte[] update(android.security.identity.PersonalizationData)>(r1);

        return $r2;
    }

