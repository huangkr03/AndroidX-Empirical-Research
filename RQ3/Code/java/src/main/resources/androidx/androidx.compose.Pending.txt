androidx.compose.Pending
<androidx.compose.Pending: kotlin.reflect.KProperty[] $$delegatedProperties>
<androidx.compose.Pending: java.util.List keyInfos>
<androidx.compose.Pending: int startIndex>
<androidx.compose.Pending: int groupIndex>
<androidx.compose.Pending: java.util.List usedKeys>
<androidx.compose.Pending: java.util.HashMap groupInfos>
<androidx.compose.Pending: kotlin.Lazy keyMap$delegate>
    public void <init>(java.util.List, int)
    {
        androidx.compose.Pending r0, r18, r20, r21, $r22;
        java.util.List r1, $r9, $r10, r19;
        int i0, i1, i2, $i3, $i4, $i5, i6, i7, i8;
        java.util.HashMap r2, $r8, r23;
        androidx.compose.KeyInfo r3;
        java.util.Map r4;
        androidx.compose.Group r5;
        androidx.compose.GroupInfo r6, $r12;
        boolean z1, $z2, z3, z4, z5, z7, z8, z9, z10;
        java.util.ArrayList $r7;
        java.lang.Object $r11;
        java.lang.IllegalArgumentException $r14;
        java.lang.String $r15, r17;
        java.lang.Throwable $r16;
        androidx.compose.Pending$keyMap$2 $r24;
        kotlin.jvm.functions.Function0 $r25;
        kotlin.Lazy $r26;

        r0 := @this: androidx.compose.Pending;

        r1 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "keyInfos");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.Pending: java.util.List keyInfos> = r1;

        r0.<androidx.compose.Pending: int startIndex> = i0;

        $i3 = virtualinvoke r0.<androidx.compose.Pending: int getStartIndex()>();

        if $i3 < 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z3 = $z2;

        z4 = 0;

        z5 = 0;

        if z3 != 0 goto label3;

        r17 = "Invalid start index";

        $r14 = new java.lang.IllegalArgumentException;

        $r15 = virtualinvoke r17.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        $r16 = (java.lang.Throwable) $r14;

        throw $r16;

     label3:
        r18 = r0;

        z7 = 0;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r19 = (java.util.List) $r7;

        r18.<androidx.compose.Pending: java.util.List usedKeys> = r19;

        r20 = r0;

        r21 = r0;

        z8 = 0;

        z9 = 0;

        $r22 = (androidx.compose.Pending) r20;

        i6 = 0;

        z10 = 0;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        r2 = $r8;

        $r9 = virtualinvoke $r22.<androidx.compose.Pending: java.util.List getKeyInfos()>();

        i7 = interfaceinvoke $r9.<java.util.List: int size()>();

        i8 = 0;

        i1 = i7 + -1;

        if i7 == -2147483648 goto label5;

        if i8 > i1 goto label5;

     label4:
        i2 = i8;

        i8 = i8 + 1;

        $r10 = virtualinvoke $r22.<androidx.compose.Pending: java.util.List getKeyInfos()>();

        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(i2);

        r3 = (androidx.compose.KeyInfo) $r11;

        r4 = (java.util.Map) r2;

        r5 = virtualinvoke r3.<androidx.compose.KeyInfo: androidx.compose.Group getGroup$compose_runtime_release()>();

        $r12 = new androidx.compose.GroupInfo;

        $i4 = virtualinvoke r3.<androidx.compose.KeyInfo: int getNodes()>();

        specialinvoke $r12.<androidx.compose.GroupInfo: void <init>(int,int,int)>(i2, i6, $i4);

        r6 = $r12;

        z1 = 0;

        interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r6);

        $i5 = virtualinvoke r3.<androidx.compose.KeyInfo: int getNodes()>();

        i6 = i6 + $i5;

        if i8 <= i1 goto label4;

     label5:
        r23 = r2;

        r21.<androidx.compose.Pending: java.util.HashMap groupInfos> = r23;

        $r24 = new androidx.compose.Pending$keyMap$2;

        specialinvoke $r24.<androidx.compose.Pending$keyMap$2: void <init>(androidx.compose.Pending)>(r0);

        $r25 = (kotlin.jvm.functions.Function0) $r24;

        $r26 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)>($r25);

        r0.<androidx.compose.Pending: kotlin.Lazy keyMap$delegate> = $r26;

        return;
    }

    public final java.util.List getKeyInfos()
    {
        androidx.compose.Pending r0;
        java.util.List $r1;

        r0 := @this: androidx.compose.Pending;

        $r1 = r0.<androidx.compose.Pending: java.util.List keyInfos>;

        return $r1;
    }

    public final int getStartIndex()
    {
        androidx.compose.Pending r0;
        int $i0;

        r0 := @this: androidx.compose.Pending;

        $i0 = r0.<androidx.compose.Pending: int startIndex>;

        return $i0;
    }

    public final int getGroupIndex()
    {
        androidx.compose.Pending r0;
        int $i0;

        r0 := @this: androidx.compose.Pending;

        $i0 = r0.<androidx.compose.Pending: int groupIndex>;

        return $i0;
    }

    public final void setGroupIndex(int)
    {
        androidx.compose.Pending r0;
        int i0;

        r0 := @this: androidx.compose.Pending;

        i0 := @parameter0: int;

        r0.<androidx.compose.Pending: int groupIndex> = i0;

        return;
    }

    public final java.util.HashMap getKeyMap()
    {
        androidx.compose.Pending r0;
        kotlin.Lazy r1;
        kotlin.reflect.KProperty r2;
        boolean z0;
        kotlin.reflect.KProperty[] $r3;
        java.lang.Object $r4;
        java.util.HashMap $r5;

        r0 := @this: androidx.compose.Pending;

        r1 = r0.<androidx.compose.Pending: kotlin.Lazy keyMap$delegate>;

        $r3 = <androidx.compose.Pending: kotlin.reflect.KProperty[] $$delegatedProperties>;

        r2 = $r3[0];

        z0 = 0;

        $r4 = interfaceinvoke r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r5 = (java.util.HashMap) $r4;

        return $r5;
    }

    public final androidx.compose.KeyInfo getNext(int, java.lang.Object)
    {
        androidx.compose.Pending r0;
        int i0;
        java.lang.Object r1, r2, $r4, $r7;
        java.util.HashMap $r3;
        androidx.compose.KeyInfo $r5;
        java.lang.Integer $r6;
        androidx.compose.JoinedKey r8;

        r0 := @this: androidx.compose.Pending;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        if r1 == null goto label1;

        r8 = new androidx.compose.JoinedKey;

        $r7 = r8;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke r8.<androidx.compose.JoinedKey: void <init>(java.lang.Object,java.lang.Object)>($r6, r1);

        goto label2;

     label1:
        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

     label2:
        r2 = $r7;

        $r3 = virtualinvoke r0.<androidx.compose.Pending: java.util.HashMap getKeyMap()>();

        $r4 = staticinvoke <androidx.compose.ComposerKt: java.lang.Object access$pop(java.util.HashMap,java.lang.Object)>($r3, r2);

        $r5 = (androidx.compose.KeyInfo) $r4;

        return $r5;
    }

    public final boolean recordUsed(androidx.compose.KeyInfo)
    {
        androidx.compose.Pending r0;
        androidx.compose.KeyInfo r1;
        java.util.List $r2;
        boolean $z0;

        r0 := @this: androidx.compose.Pending;

        r1 := @parameter0: androidx.compose.KeyInfo;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "keyInfo");

        $r2 = r0.<androidx.compose.Pending: java.util.List usedKeys>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return $z0;
    }

    public final java.util.List getUsed()
    {
        androidx.compose.Pending r0;
        java.util.List $r1;

        r0 := @this: androidx.compose.Pending;

        $r1 = r0.<androidx.compose.Pending: java.util.List usedKeys>;

        return $r1;
    }

    public final void registerMoveSlot(int, int)
    {
        androidx.compose.Pending r0;
        int i0, i1, $i2, $i3, $i4, i5, i6;
        java.util.HashMap $r1, $r3;
        boolean $z0, $z1, $z2, $z3;
        kotlin.ranges.IntRange $r2, $r4;
        java.util.Collection $r5, $r10;
        java.lang.Iterable $r6, $r11;
        java.util.Iterator r7, r12;
        java.lang.Object r8, r13;
        androidx.compose.GroupInfo r9, r14;

        r0 := @this: androidx.compose.Pending;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 <= i1 goto label5;

        $r3 = r0.<androidx.compose.Pending: java.util.HashMap groupInfos>;

        $r5 = virtualinvoke $r3.<java.util.HashMap: java.util.Collection values()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "groupInfos.values");

        $r6 = (java.lang.Iterable) $r5;

        r7 = interfaceinvoke $r6.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        r8 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (androidx.compose.GroupInfo) r8;

        i5 = virtualinvoke r9.<androidx.compose.GroupInfo: int getSlotIndex()>();

        if i5 != i0 goto label2;

        virtualinvoke r9.<androidx.compose.GroupInfo: void setSlotIndex(int)>(i1);

        goto label3;

     label2:
        $r4 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntRange until(int,int)>(i1, i0);

        $z3 = virtualinvoke $r4.<kotlin.ranges.IntRange: boolean contains(int)>(i5);

        if $z3 == 0 goto label3;

        $i4 = i5 + 1;

        virtualinvoke r9.<androidx.compose.GroupInfo: void setSlotIndex(int)>($i4);

     label3:
        goto label1;

     label4:
        goto label9;

     label5:
        if i1 <= i0 goto label9;

        $r1 = r0.<androidx.compose.Pending: java.util.HashMap groupInfos>;

        $r10 = virtualinvoke $r1.<java.util.HashMap: java.util.Collection values()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r10, "groupInfos.values");

        $r11 = (java.lang.Iterable) $r10;

        r12 = interfaceinvoke $r11.<java.lang.Iterable: java.util.Iterator iterator()>();

     label6:
        $z0 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        r13 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>();

        r14 = (androidx.compose.GroupInfo) r13;

        i6 = virtualinvoke r14.<androidx.compose.GroupInfo: int getSlotIndex()>();

        if i6 != i0 goto label7;

        virtualinvoke r14.<androidx.compose.GroupInfo: void setSlotIndex(int)>(i1);

        goto label8;

     label7:
        $i2 = i0 + 1;

        $r2 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntRange until(int,int)>($i2, i1);

        $z1 = virtualinvoke $r2.<kotlin.ranges.IntRange: boolean contains(int)>(i6);

        if $z1 == 0 goto label8;

        $i3 = i6 - 1;

        virtualinvoke r14.<androidx.compose.GroupInfo: void setSlotIndex(int)>($i3);

     label8:
        goto label6;

     label9:
        return;
    }

    public final void registerMoveNode(int, int, int)
    {
        androidx.compose.Pending r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13;
        java.util.HashMap $r1, $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        kotlin.ranges.IntRange $r2, $r3, $r5, $r6;
        java.util.Collection $r7, $r12;
        java.lang.Iterable $r8, $r13;
        java.util.Iterator r9, r14;
        java.lang.Object r10, r15;
        androidx.compose.GroupInfo r11, r16;

        r0 := @this: androidx.compose.Pending;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        if i0 <= i1 goto label5;

        $r4 = r0.<androidx.compose.Pending: java.util.HashMap groupInfos>;

        $r7 = virtualinvoke $r4.<java.util.HashMap: java.util.Collection values()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r7, "groupInfos.values");

        $r8 = (java.lang.Iterable) $r7;

        r9 = interfaceinvoke $r8.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label4;

        r10 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (androidx.compose.GroupInfo) r10;

        i12 = virtualinvoke r11.<androidx.compose.GroupInfo: int getNodeIndex()>();

        $i8 = i0 + i2;

        $r5 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntRange until(int,int)>(i0, $i8);

        $z4 = virtualinvoke $r5.<kotlin.ranges.IntRange: boolean contains(int)>(i12);

        if $z4 == 0 goto label2;

        $i10 = i12 - i0;

        $i11 = i1 + $i10;

        virtualinvoke r11.<androidx.compose.GroupInfo: void setNodeIndex(int)>($i11);

        goto label3;

     label2:
        $r6 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntRange until(int,int)>(i1, i0);

        $z5 = virtualinvoke $r6.<kotlin.ranges.IntRange: boolean contains(int)>(i12);

        if $z5 == 0 goto label3;

        $i9 = i12 + i2;

        virtualinvoke r11.<androidx.compose.GroupInfo: void setNodeIndex(int)>($i9);

     label3:
        goto label1;

     label4:
        goto label9;

     label5:
        if i1 <= i0 goto label9;

        $r1 = r0.<androidx.compose.Pending: java.util.HashMap groupInfos>;

        $r12 = virtualinvoke $r1.<java.util.HashMap: java.util.Collection values()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r12, "groupInfos.values");

        $r13 = (java.lang.Iterable) $r12;

        r14 = interfaceinvoke $r13.<java.lang.Iterable: java.util.Iterator iterator()>();

     label6:
        $z0 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        r15 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        r16 = (androidx.compose.GroupInfo) r15;

        i13 = virtualinvoke r16.<androidx.compose.GroupInfo: int getNodeIndex()>();

        $i3 = i0 + i2;

        $r2 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntRange until(int,int)>(i0, $i3);

        $z1 = virtualinvoke $r2.<kotlin.ranges.IntRange: boolean contains(int)>(i13);

        if $z1 == 0 goto label7;

        $i6 = i13 - i0;

        $i7 = i1 + $i6;

        virtualinvoke r16.<androidx.compose.GroupInfo: void setNodeIndex(int)>($i7);

        goto label8;

     label7:
        $i4 = i0 + 1;

        $r3 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntRange until(int,int)>($i4, i1);

        $z2 = virtualinvoke $r3.<kotlin.ranges.IntRange: boolean contains(int)>(i13);

        if $z2 == 0 goto label8;

        $i5 = i13 - i2;

        virtualinvoke r16.<androidx.compose.GroupInfo: void setNodeIndex(int)>($i5);

     label8:
        goto label6;

     label9:
        return;
    }

    public final void registerInsert(androidx.compose.KeyInfo, int)
    {
        androidx.compose.Pending r0;
        androidx.compose.KeyInfo r1;
        int i0;
        java.util.Map r2;
        androidx.compose.Group r3;
        androidx.compose.GroupInfo r4, $r6;
        boolean z0;
        java.util.HashMap $r5;

        r0 := @this: androidx.compose.Pending;

        r1 := @parameter0: androidx.compose.KeyInfo;

        i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "keyInfo");

        $r5 = r0.<androidx.compose.Pending: java.util.HashMap groupInfos>;

        r2 = (java.util.Map) $r5;

        r3 = virtualinvoke r1.<androidx.compose.KeyInfo: androidx.compose.Group getGroup$compose_runtime_release()>();

        $r6 = new androidx.compose.GroupInfo;

        specialinvoke $r6.<androidx.compose.GroupInfo: void <init>(int,int,int)>(-1, i0, 0);

        r4 = $r6;

        z0 = 0;

        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r4);

        return;
    }

    public final boolean updateNodeCount(androidx.compose.Group, int)
    {
        androidx.compose.Pending r0;
        androidx.compose.Group r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        androidx.compose.GroupInfo r2, r5, r6, r7;
        java.util.Iterator r3;
        java.lang.Object r4, $r9;
        java.util.HashMap $r8, $r10;
        boolean $z2, $z3;
        java.util.Collection $r11;
        java.lang.Iterable $r12;

        r0 := @this: androidx.compose.Pending;

        r1 := @parameter0: androidx.compose.Group;

        i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "group");

        $r8 = r0.<androidx.compose.Pending: java.util.HashMap groupInfos>;

        $r9 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (androidx.compose.GroupInfo) $r9;

        if r2 == null goto label4;

        i1 = virtualinvoke r2.<androidx.compose.GroupInfo: int getNodeIndex()>();

        $i3 = virtualinvoke r2.<androidx.compose.GroupInfo: int getNodeCount()>();

        i2 = i0 - $i3;

        virtualinvoke r2.<androidx.compose.GroupInfo: void setNodeCount(int)>(i0);

        if i2 == 0 goto label3;

        $r10 = r0.<androidx.compose.Pending: java.util.HashMap groupInfos>;

        $r11 = virtualinvoke $r10.<java.util.HashMap: java.util.Collection values()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r11, "groupInfos.values");

        $r12 = (java.lang.Iterable) $r11;

        r3 = interfaceinvoke $r12.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (androidx.compose.GroupInfo) r4;

        $i4 = virtualinvoke r5.<androidx.compose.GroupInfo: int getNodeIndex()>();

        if $i4 < i1 goto label2;

        $z3 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r5, r2);

        if $z3 != 0 goto label2;

        r6 = r5;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r6, "childGroupInfo");

        r7 = r6;

        $i5 = virtualinvoke r7.<androidx.compose.GroupInfo: int getNodeIndex()>();

        $i6 = $i5 + i2;

        virtualinvoke r7.<androidx.compose.GroupInfo: void setNodeIndex(int)>($i6);

     label2:
        goto label1;

     label3:
        return 1;

     label4:
        return 0;
    }

    public final int slotPositionOf(androidx.compose.KeyInfo)
    {
        androidx.compose.Pending r0;
        androidx.compose.KeyInfo r1;
        java.lang.Integer r2, $r7;
        androidx.compose.GroupInfo r3;
        java.util.HashMap $r4;
        androidx.compose.Group $r5;
        java.lang.Object $r6;
        int $i0, $i1;

        r0 := @this: androidx.compose.Pending;

        r1 := @parameter0: androidx.compose.KeyInfo;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "keyInfo");

        $r4 = r0.<androidx.compose.Pending: java.util.HashMap groupInfos>;

        $r5 = virtualinvoke r1.<androidx.compose.KeyInfo: androidx.compose.Group getGroup$compose_runtime_release()>();

        $r6 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r5);

        r3 = (androidx.compose.GroupInfo) $r6;

        if r3 != null goto label1;

        $r7 = (java.lang.Integer) null;

        goto label2;

     label1:
        $i0 = virtualinvoke r3.<androidx.compose.GroupInfo: int getSlotIndex()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

     label2:
        r2 = $r7;

        if r2 != null goto label3;

        $i1 = -1;

        goto label4;

     label3:
        $i1 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

     label4:
        return $i1;
    }

    public final int nodePositionOf(androidx.compose.KeyInfo)
    {
        androidx.compose.Pending r0;
        androidx.compose.KeyInfo r1;
        java.lang.Integer r2, $r7;
        androidx.compose.GroupInfo r3;
        java.util.HashMap $r4;
        androidx.compose.Group $r5;
        java.lang.Object $r6;
        int $i0, $i1;

        r0 := @this: androidx.compose.Pending;

        r1 := @parameter0: androidx.compose.KeyInfo;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "keyInfo");

        $r4 = r0.<androidx.compose.Pending: java.util.HashMap groupInfos>;

        $r5 = virtualinvoke r1.<androidx.compose.KeyInfo: androidx.compose.Group getGroup$compose_runtime_release()>();

        $r6 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r5);

        r3 = (androidx.compose.GroupInfo) $r6;

        if r3 != null goto label1;

        $r7 = (java.lang.Integer) null;

        goto label2;

     label1:
        $i0 = virtualinvoke r3.<androidx.compose.GroupInfo: int getNodeIndex()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

     label2:
        r2 = $r7;

        if r2 != null goto label3;

        $i1 = -1;

        goto label4;

     label3:
        $i1 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

     label4:
        return $i1;
    }

    public final int updatedNodeCountOf(androidx.compose.KeyInfo)
    {
        androidx.compose.Pending r0;
        androidx.compose.KeyInfo r1;
        java.lang.Integer r2, $r7;
        androidx.compose.GroupInfo r3;
        java.util.HashMap $r4;
        androidx.compose.Group $r5;
        java.lang.Object $r6;
        int $i0, $i1;

        r0 := @this: androidx.compose.Pending;

        r1 := @parameter0: androidx.compose.KeyInfo;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "keyInfo");

        $r4 = r0.<androidx.compose.Pending: java.util.HashMap groupInfos>;

        $r5 = virtualinvoke r1.<androidx.compose.KeyInfo: androidx.compose.Group getGroup$compose_runtime_release()>();

        $r6 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r5);

        r3 = (androidx.compose.GroupInfo) $r6;

        if r3 != null goto label1;

        $r7 = (java.lang.Integer) null;

        goto label2;

     label1:
        $i0 = virtualinvoke r3.<androidx.compose.GroupInfo: int getNodeCount()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

     label2:
        r2 = $r7;

        if r2 != null goto label3;

        $i1 = virtualinvoke r1.<androidx.compose.KeyInfo: int getNodes()>();

        goto label4;

     label3:
        $i1 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

     label4:
        return $i1;
    }

    public static final void <clinit>()
    {
        kotlin.reflect.KProperty[] r0;
        kotlin.jvm.internal.PropertyReference1Impl $r1;
        kotlin.reflect.KClass $r2;
        kotlin.reflect.KDeclarationContainer $r3;
        kotlin.jvm.internal.PropertyReference1 $r4;
        kotlin.reflect.KProperty1 $r5;
        kotlin.reflect.KProperty $r6;

        r0 = newarray (kotlin.reflect.KProperty)[1];

        $r1 = new kotlin.jvm.internal.PropertyReference1Impl;

        $r2 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/compose/Pending;");

        $r3 = (kotlin.reflect.KDeclarationContainer) $r2;

        specialinvoke $r1.<kotlin.jvm.internal.PropertyReference1Impl: void <init>(kotlin.reflect.KDeclarationContainer,java.lang.String,java.lang.String)>($r3, "keyMap", "getKeyMap()Ljava/util/HashMap;");

        $r4 = (kotlin.jvm.internal.PropertyReference1) $r1;

        $r5 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KProperty1 property1(kotlin.jvm.internal.PropertyReference1)>($r4);

        $r6 = (kotlin.reflect.KProperty) $r5;

        r0[0] = $r6;

        <androidx.compose.Pending: kotlin.reflect.KProperty[] $$delegatedProperties> = r0;

        return;
    }

androidx.compose.Pending$keyMap$2
<androidx.compose.Pending$keyMap$2: androidx.compose.Pending $this>
    void <init>(androidx.compose.Pending)
    {
        androidx.compose.Pending$keyMap$2 r0;
        androidx.compose.Pending $r1;

        r0 := @this: androidx.compose.Pending$keyMap$2;

        $r1 := @parameter0: androidx.compose.Pending;

        r0.<androidx.compose.Pending$keyMap$2: androidx.compose.Pending $this> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final java.util.HashMap invoke()
    {
        androidx.compose.Pending$keyMap$2 r0;
        java.util.HashMap r1, r3;
        androidx.compose.Pending r2;
        boolean z0, z1;
        int i0, i1, i2, i3;
        androidx.compose.KeyInfo r4;
        java.util.List $r5, $r6;
        java.lang.Object $r7, $r8;

        r0 := @this: androidx.compose.Pending$keyMap$2;

        r1 = staticinvoke <androidx.compose.ComposerKt: java.util.HashMap access$multiMap()>();

        r2 = r0.<androidx.compose.Pending$keyMap$2: androidx.compose.Pending $this>;

        z0 = 0;

        z1 = 0;

        r3 = r1;

        $r5 = virtualinvoke r2.<androidx.compose.Pending: java.util.List getKeyInfos()>();

        i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        i3 = 0;

        i1 = i0 + -1;

        if i0 == -2147483648 goto label2;

        if i3 > i1 goto label2;

     label1:
        i2 = i3;

        i3 = i3 + 1;

        $r6 = virtualinvoke r2.<androidx.compose.Pending: java.util.List getKeyInfos()>();

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(i2);

        r4 = (androidx.compose.KeyInfo) $r7;

        $r8 = staticinvoke <androidx.compose.ComposerKt: java.lang.Object access$getJoinedKey(androidx.compose.KeyInfo)>(r4);

        staticinvoke <androidx.compose.ComposerKt: boolean access$put(java.util.HashMap,java.lang.Object,java.lang.Object)>(r3, $r8, r4);

        if i3 <= i1 goto label1;

     label2:
        return r1;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.Pending$keyMap$2 r0;
        java.util.HashMap $r1;

        r0 := @this: androidx.compose.Pending$keyMap$2;

        $r1 = virtualinvoke r0.<androidx.compose.Pending$keyMap$2: java.util.HashMap invoke()>();

        return $r1;
    }

