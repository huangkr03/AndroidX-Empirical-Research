androidx.room.compiler.codegen.kotlin.KotlinTypeSpec
<androidx.room.compiler.codegen.kotlin.KotlinTypeSpec: androidx.room.compiler.codegen.XClassName className>
<androidx.room.compiler.codegen.kotlin.KotlinTypeSpec: com.squareup.kotlinpoet.TypeSpec actual>
    public void <init>(androidx.room.compiler.codegen.XClassName, com.squareup.kotlinpoet.TypeSpec)
    {
        androidx.room.compiler.codegen.kotlin.KotlinTypeSpec r0;
        androidx.room.compiler.codegen.XClassName r1;
        com.squareup.kotlinpoet.TypeSpec r2;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinTypeSpec;

        r1 := @parameter0: androidx.room.compiler.codegen.XClassName;

        r2 := @parameter1: com.squareup.kotlinpoet.TypeSpec;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "className");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "actual");

        specialinvoke r0.<androidx.room.compiler.codegen.kotlin.KotlinLang: void <init>()>();

        r0.<androidx.room.compiler.codegen.kotlin.KotlinTypeSpec: androidx.room.compiler.codegen.XClassName className> = r1;

        r0.<androidx.room.compiler.codegen.kotlin.KotlinTypeSpec: com.squareup.kotlinpoet.TypeSpec actual> = r2;

        return;
    }

    public androidx.room.compiler.codegen.XClassName getClassName()
    {
        androidx.room.compiler.codegen.kotlin.KotlinTypeSpec r0;
        androidx.room.compiler.codegen.XClassName $r1;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinTypeSpec;

        $r1 = r0.<androidx.room.compiler.codegen.kotlin.KotlinTypeSpec: androidx.room.compiler.codegen.XClassName className>;

        return $r1;
    }

    public final com.squareup.kotlinpoet.TypeSpec getActual$room_compiler_processing()
    {
        androidx.room.compiler.codegen.kotlin.KotlinTypeSpec r0;
        com.squareup.kotlinpoet.TypeSpec $r1;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinTypeSpec;

        $r1 = r0.<androidx.room.compiler.codegen.kotlin.KotlinTypeSpec: com.squareup.kotlinpoet.TypeSpec actual>;

        return $r1;
    }

androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder
<androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder: androidx.room.compiler.codegen.XClassName className>
<androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder: com.squareup.kotlinpoet.TypeSpec$Builder actual>
    public void <init>(androidx.room.compiler.codegen.XClassName, com.squareup.kotlinpoet.TypeSpec$Builder)
    {
        androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder r0;
        androidx.room.compiler.codegen.XClassName r1;
        com.squareup.kotlinpoet.TypeSpec$Builder r2;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder;

        r1 := @parameter0: androidx.room.compiler.codegen.XClassName;

        r2 := @parameter1: com.squareup.kotlinpoet.TypeSpec$Builder;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "className");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "actual");

        specialinvoke r0.<androidx.room.compiler.codegen.kotlin.KotlinLang: void <init>()>();

        r0.<androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder: androidx.room.compiler.codegen.XClassName className> = r1;

        r0.<androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder: com.squareup.kotlinpoet.TypeSpec$Builder actual> = r2;

        return;
    }

    public final com.squareup.kotlinpoet.TypeSpec$Builder getActual$room_compiler_processing()
    {
        androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder r0;
        com.squareup.kotlinpoet.TypeSpec$Builder $r1;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder;

        $r1 = r0.<androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder: com.squareup.kotlinpoet.TypeSpec$Builder actual>;

        return $r1;
    }

    public androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder superclass(androidx.room.compiler.codegen.XTypeName)
    {
        androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder r0, r2, $r3, $r7;
        androidx.room.compiler.codegen.XTypeName r1;
        com.squareup.kotlinpoet.TypeSpec$Builder $r4;
        com.squareup.kotlinpoet.TypeName $r5;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder;

        r1 := @parameter0: androidx.room.compiler.codegen.XTypeName;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "typeName");

        r2 = r0;

        $r3 = (androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder) r2;

        $r4 = $r3.<androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder: com.squareup.kotlinpoet.TypeSpec$Builder actual>;

        $r5 = virtualinvoke r1.<androidx.room.compiler.codegen.XTypeName: com.squareup.kotlinpoet.TypeName getKotlin$room_compiler_processing()>();

        virtualinvoke $r4.<com.squareup.kotlinpoet.TypeSpec$Builder: com.squareup.kotlinpoet.TypeSpec$Builder superclass(com.squareup.kotlinpoet.TypeName)>($r5);

        $r7 = (androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder) r2;

        return $r7;
    }

    public void addAnnotation(androidx.room.compiler.codegen.XAnnotationSpec)
    {
        androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder r0;
        androidx.room.compiler.codegen.XAnnotationSpec r1;
        java.lang.String r2, $r8;
        boolean $z0;
        androidx.room.compiler.codegen.kotlin.KotlinAnnotationSpec $r3;
        com.squareup.kotlinpoet.TypeSpec$Builder $r4;
        com.squareup.kotlinpoet.AnnotationSpec $r5;
        java.lang.IllegalStateException $r7;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder;

        r1 := @parameter0: androidx.room.compiler.codegen.XAnnotationSpec;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "annotation");

        $z0 = r1 instanceof androidx.room.compiler.codegen.kotlin.KotlinAnnotationSpec;

        if $z0 != 0 goto label1;

        r2 = "Check failed.";

        $r7 = new java.lang.IllegalStateException;

        $r8 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label1:
        $r4 = r0.<androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder: com.squareup.kotlinpoet.TypeSpec$Builder actual>;

        $r3 = (androidx.room.compiler.codegen.kotlin.KotlinAnnotationSpec) r1;

        $r5 = virtualinvoke $r3.<androidx.room.compiler.codegen.kotlin.KotlinAnnotationSpec: com.squareup.kotlinpoet.AnnotationSpec getActual$room_compiler_processing()>();

        virtualinvoke $r4.<com.squareup.kotlinpoet.TypeSpec$Builder: com.squareup.kotlinpoet.TypeSpec$Builder addAnnotation(com.squareup.kotlinpoet.AnnotationSpec)>($r5);

        return;
    }

    public androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder addProperty(androidx.room.compiler.codegen.XTypeName, java.lang.String, androidx.room.compiler.codegen.VisibilityModifier, boolean, androidx.room.compiler.codegen.XCodeBlock, java.util.List)
    {
        androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder r0, r6, $r7, $r23;
        androidx.room.compiler.codegen.XTypeName r1;
        java.lang.String r2, r13, $r28;
        androidx.room.compiler.codegen.VisibilityModifier r3;
        boolean z0, $z4;
        androidx.room.compiler.codegen.XCodeBlock r4, r12;
        java.util.List r5;
        com.squareup.kotlinpoet.PropertySpec$Builder r8;
        com.squareup.kotlinpoet.TypeSpec$Builder r10, $r14;
        com.squareup.kotlinpoet.KModifier[] r11, $r17;
        com.squareup.kotlinpoet.PropertySpec$Companion $r15;
        com.squareup.kotlinpoet.TypeName $r16;
        com.squareup.kotlinpoet.KModifier $r19;
        com.squareup.kotlinpoet.PropertySpec $r21;
        androidx.room.compiler.codegen.kotlin.KotlinCodeBlock $r24;
        com.squareup.kotlinpoet.CodeBlock $r25;
        java.lang.IllegalArgumentException $r27;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder;

        r1 := @parameter0: androidx.room.compiler.codegen.XTypeName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: androidx.room.compiler.codegen.VisibilityModifier;

        z0 := @parameter3: boolean;

        r4 := @parameter4: androidx.room.compiler.codegen.XCodeBlock;

        r5 := @parameter5: java.util.List;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "typeName");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "name");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "visibility");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r5, "annotations");

        r6 = r0;

        $r7 = (androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder) r6;

        $r14 = $r7.<androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder: com.squareup.kotlinpoet.TypeSpec$Builder actual>;

        $r15 = <com.squareup.kotlinpoet.PropertySpec: com.squareup.kotlinpoet.PropertySpec$Companion Companion>;

        $r16 = virtualinvoke r1.<androidx.room.compiler.codegen.XTypeName: com.squareup.kotlinpoet.TypeName getKotlin$room_compiler_processing()>();

        $r17 = newarray (com.squareup.kotlinpoet.KModifier)[0];

        r8 = virtualinvoke $r15.<com.squareup.kotlinpoet.PropertySpec$Companion: com.squareup.kotlinpoet.PropertySpec$Builder builder(java.lang.String,com.squareup.kotlinpoet.TypeName,com.squareup.kotlinpoet.KModifier[])>(r2, $r16, $r17);

        r10 = $r14;

        virtualinvoke r8.<com.squareup.kotlinpoet.PropertySpec$Builder: com.squareup.kotlinpoet.PropertySpec$Builder mutable(boolean)>(z0);

        r11 = newarray (com.squareup.kotlinpoet.KModifier)[1];

        $r19 = staticinvoke <androidx.room.compiler.codegen.kotlin.KotlinFunSpecKt: com.squareup.kotlinpoet.KModifier toKotlinVisibilityModifier(androidx.room.compiler.codegen.VisibilityModifier)>(r3);

        r11[0] = $r19;

        virtualinvoke r8.<com.squareup.kotlinpoet.PropertySpec$Builder: com.squareup.kotlinpoet.PropertySpec$Builder addModifiers(com.squareup.kotlinpoet.KModifier[])>(r11);

        if r4 == null goto label2;

        r12 = r4;

        $z4 = r12 instanceof androidx.room.compiler.codegen.kotlin.KotlinCodeBlock;

        if $z4 != 0 goto label1;

        r13 = "Failed requirement.";

        $r27 = new java.lang.IllegalArgumentException;

        $r28 = virtualinvoke r13.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r27.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r28);

        throw $r27;

     label1:
        $r24 = (androidx.room.compiler.codegen.kotlin.KotlinCodeBlock) r12;

        $r25 = virtualinvoke $r24.<androidx.room.compiler.codegen.kotlin.KotlinCodeBlock: com.squareup.kotlinpoet.CodeBlock getActual$room_compiler_processing()>();

        virtualinvoke r8.<com.squareup.kotlinpoet.PropertySpec$Builder: com.squareup.kotlinpoet.PropertySpec$Builder initializer(com.squareup.kotlinpoet.CodeBlock)>($r25);

        goto label2;

     label2:
        $r21 = virtualinvoke r8.<com.squareup.kotlinpoet.PropertySpec$Builder: com.squareup.kotlinpoet.PropertySpec build()>();

        virtualinvoke r10.<com.squareup.kotlinpoet.TypeSpec$Builder: com.squareup.kotlinpoet.TypeSpec$Builder addProperty(com.squareup.kotlinpoet.PropertySpec)>($r21);

        $r23 = (androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder) r6;

        return $r23;
    }

    public androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder addFunction(androidx.room.compiler.codegen.XFunSpec)
    {
        androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder r0, r2, $r3, $r9;
        androidx.room.compiler.codegen.XFunSpec r1;
        java.lang.String r4, $r11;
        boolean $z1;
        androidx.room.compiler.codegen.kotlin.KotlinFunSpec $r5;
        com.squareup.kotlinpoet.TypeSpec$Builder $r6;
        com.squareup.kotlinpoet.FunSpec $r7;
        java.lang.IllegalArgumentException $r10;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder;

        r1 := @parameter0: androidx.room.compiler.codegen.XFunSpec;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "functionSpec");

        r2 = r0;

        $r3 = (androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder) r2;

        $z1 = r1 instanceof androidx.room.compiler.codegen.kotlin.KotlinFunSpec;

        if $z1 != 0 goto label1;

        r4 = "Failed requirement.";

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r10;

     label1:
        $r6 = $r3.<androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder: com.squareup.kotlinpoet.TypeSpec$Builder actual>;

        $r5 = (androidx.room.compiler.codegen.kotlin.KotlinFunSpec) r1;

        $r7 = virtualinvoke $r5.<androidx.room.compiler.codegen.kotlin.KotlinFunSpec: com.squareup.kotlinpoet.FunSpec getActual$room_compiler_processing()>();

        virtualinvoke $r6.<com.squareup.kotlinpoet.TypeSpec$Builder: com.squareup.kotlinpoet.TypeSpec$Builder addFunction(com.squareup.kotlinpoet.FunSpec)>($r7);

        $r9 = (androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder) r2;

        return $r9;
    }

    public androidx.room.compiler.codegen.XTypeSpec build()
    {
        androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder r0;
        androidx.room.compiler.codegen.kotlin.KotlinTypeSpec $r1;
        com.squareup.kotlinpoet.TypeSpec$Builder $r2;
        androidx.room.compiler.codegen.XClassName $r3;
        com.squareup.kotlinpoet.TypeSpec $r4;
        androidx.room.compiler.codegen.XTypeSpec $r5;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder;

        $r1 = new androidx.room.compiler.codegen.kotlin.KotlinTypeSpec;

        $r3 = r0.<androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder: androidx.room.compiler.codegen.XClassName className>;

        $r2 = r0.<androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder: com.squareup.kotlinpoet.TypeSpec$Builder actual>;

        $r4 = virtualinvoke $r2.<com.squareup.kotlinpoet.TypeSpec$Builder: com.squareup.kotlinpoet.TypeSpec build()>();

        specialinvoke $r1.<androidx.room.compiler.codegen.kotlin.KotlinTypeSpec: void <init>(androidx.room.compiler.codegen.XClassName,com.squareup.kotlinpoet.TypeSpec)>($r3, $r4);

        $r5 = (androidx.room.compiler.codegen.XTypeSpec) $r1;

        return $r5;
    }

    public volatile androidx.room.compiler.codegen.XTypeSpec$Builder superclass(androidx.room.compiler.codegen.XTypeName)
    {
        androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder r0, $r2;
        androidx.room.compiler.codegen.XTypeName r1;
        androidx.room.compiler.codegen.XTypeSpec$Builder $r3;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder;

        r1 := @parameter0: androidx.room.compiler.codegen.XTypeName;

        $r2 = virtualinvoke r0.<androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder: androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder superclass(androidx.room.compiler.codegen.XTypeName)>(r1);

        $r3 = (androidx.room.compiler.codegen.XTypeSpec$Builder) $r2;

        return $r3;
    }

    public volatile androidx.room.compiler.codegen.XTypeSpec$Builder addProperty(androidx.room.compiler.codegen.XTypeName, java.lang.String, androidx.room.compiler.codegen.VisibilityModifier, boolean, androidx.room.compiler.codegen.XCodeBlock, java.util.List)
    {
        androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder r0, $r6;
        androidx.room.compiler.codegen.XTypeName r1;
        java.lang.String r2;
        androidx.room.compiler.codegen.VisibilityModifier r3;
        boolean z0;
        androidx.room.compiler.codegen.XCodeBlock r4;
        java.util.List r5;
        androidx.room.compiler.codegen.XTypeSpec$Builder $r7;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder;

        r1 := @parameter0: androidx.room.compiler.codegen.XTypeName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: androidx.room.compiler.codegen.VisibilityModifier;

        z0 := @parameter3: boolean;

        r4 := @parameter4: androidx.room.compiler.codegen.XCodeBlock;

        r5 := @parameter5: java.util.List;

        $r6 = virtualinvoke r0.<androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder: androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder addProperty(androidx.room.compiler.codegen.XTypeName,java.lang.String,androidx.room.compiler.codegen.VisibilityModifier,boolean,androidx.room.compiler.codegen.XCodeBlock,java.util.List)>(r1, r2, r3, z0, r4, r5);

        $r7 = (androidx.room.compiler.codegen.XTypeSpec$Builder) $r6;

        return $r7;
    }

    public volatile androidx.room.compiler.codegen.XTypeSpec$Builder addFunction(androidx.room.compiler.codegen.XFunSpec)
    {
        androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder r0, $r2;
        androidx.room.compiler.codegen.XFunSpec r1;
        androidx.room.compiler.codegen.XTypeSpec$Builder $r3;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder;

        r1 := @parameter0: androidx.room.compiler.codegen.XFunSpec;

        $r2 = virtualinvoke r0.<androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder: androidx.room.compiler.codegen.kotlin.KotlinTypeSpec$Builder addFunction(androidx.room.compiler.codegen.XFunSpec)>(r1);

        $r3 = (androidx.room.compiler.codegen.XTypeSpec$Builder) $r2;

        return $r3;
    }

