androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeKt
<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeKt: int MAX_BRANCHING_FACTOR>
<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeKt: int LOG_MAX_BRANCHING_FACTOR>
<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeKt: int MAX_BRANCHING_FACTOR_MINUS_ONE>
<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeKt: int ENTRY_SIZE>
<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeKt: int MAX_SHIFT>
    public static final int indexSegment(int, int)
    {
        int i0, i1, $i2, $i3;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = i0 >> i1;

        $i3 = $i2 & 31;

        return $i3;
    }

    private static final java.lang.Object[] insertEntryAtIndex(java.lang.Object[], int, java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r0, r3;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object r1, r2;

        $r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.Object;

        r2 := @parameter3: java.lang.Object;

        $i1 = lengthof $r0;

        $i2 = $i1 + 2;

        r3 = newarray (java.lang.Object)[$i2];

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto$default(java.lang.Object[],java.lang.Object[],int,int,int,int,java.lang.Object)>($r0, r3, 0, 0, i0, 6, null);

        $i4 = i0 + 2;

        $i3 = lengthof $r0;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r0, r3, $i4, i0, $i3);

        r3[i0] = r1;

        $i5 = i0 + 1;

        r3[$i5] = r2;

        return r3;
    }

    private static final java.lang.Object[] replaceEntryWithNode(java.lang.Object[], int, int, androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode)
    {
        java.lang.Object[] $r0, r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r1;

        $r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        i2 = i1 - 2;

        $i3 = lengthof $r0;

        $i4 = $i3 - 2;

        $i5 = $i4 + 1;

        r2 = newarray (java.lang.Object)[$i5];

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto$default(java.lang.Object[],java.lang.Object[],int,int,int,int,java.lang.Object)>($r0, r2, 0, 0, i0, 6, null);

        $i6 = i0 + 2;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r0, r2, i0, $i6, i1);

        r2[i2] = r1;

        $i8 = i2 + 1;

        $i7 = lengthof $r0;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r0, r2, $i8, i1, $i7);

        return r2;
    }

    private static final java.lang.Object[] replaceNodeWithEntry(java.lang.Object[], int, int, java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r0, r3, $r4;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.Object r1, r2;

        $r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        r2 := @parameter4: java.lang.Object;

        $i2 = lengthof $r0;

        $i3 = $i2 + 1;

        $r4 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r0, $i3);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "copyOf(this, newSize)");

        r3 = $r4;

        $i6 = i0 + 2;

        $i5 = i0 + 1;

        $i4 = lengthof $r0;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>(r3, r3, $i6, $i5, $i4);

        $i7 = i1 + 2;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>(r3, r3, $i7, i1, i0);

        r3[i1] = r1;

        $i8 = i1 + 1;

        r3[$i8] = r2;

        return r3;
    }

    private static final java.lang.Object[] removeEntryAtIndex(java.lang.Object[], int)
    {
        java.lang.Object[] $r0, r1;
        int i0, $i1, $i2, $i3, $i4;

        $r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        $i1 = lengthof $r0;

        $i2 = $i1 - 2;

        r1 = newarray (java.lang.Object)[$i2];

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto$default(java.lang.Object[],java.lang.Object[],int,int,int,int,java.lang.Object)>($r0, r1, 0, 0, i0, 6, null);

        $i4 = i0 + 2;

        $i3 = lengthof $r0;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r0, r1, i0, $i4, $i3);

        return r1;
    }

    private static final java.lang.Object[] removeNodeAtIndex(java.lang.Object[], int)
    {
        java.lang.Object[] $r0, r1;
        int i0, $i1, $i2, $i3, $i4;

        $r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        $i1 = lengthof $r0;

        $i2 = $i1 - 1;

        r1 = newarray (java.lang.Object)[$i2];

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto$default(java.lang.Object[],java.lang.Object[],int,int,int,int,java.lang.Object)>($r0, r1, 0, 0, i0, 6, null);

        $i4 = i0 + 1;

        $i3 = lengthof $r0;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r0, r1, i0, $i4, $i3);

        return r1;
    }

    public static final java.lang.Object[] access$insertEntryAtIndex(java.lang.Object[], int, java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r0, $r3;
        int i0;
        java.lang.Object r1, r2;

        $r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.Object;

        r2 := @parameter3: java.lang.Object;

        $r3 = staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeKt: java.lang.Object[] insertEntryAtIndex(java.lang.Object[],int,java.lang.Object,java.lang.Object)>($r0, i0, r1, r2);

        return $r3;
    }

    public static final java.lang.Object[] access$replaceNodeWithEntry(java.lang.Object[], int, int, java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r0, $r3;
        int i0, i1;
        java.lang.Object r1, r2;

        $r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        r2 := @parameter4: java.lang.Object;

        $r3 = staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeKt: java.lang.Object[] replaceNodeWithEntry(java.lang.Object[],int,int,java.lang.Object,java.lang.Object)>($r0, i0, i1, r1, r2);

        return $r3;
    }

    public static final java.lang.Object[] access$removeNodeAtIndex(java.lang.Object[], int)
    {
        java.lang.Object[] $r0, $r1;
        int i0;

        $r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        $r1 = staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeKt: java.lang.Object[] removeNodeAtIndex(java.lang.Object[],int)>($r0, i0);

        return $r1;
    }

    public static final java.lang.Object[] access$replaceEntryWithNode(java.lang.Object[], int, int, androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode)
    {
        java.lang.Object[] $r0, $r2;
        int i0, i1;
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode r1;

        $r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode;

        $r2 = staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeKt: java.lang.Object[] replaceEntryWithNode(java.lang.Object[],int,int,androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode)>($r0, i0, i1, r1);

        return $r2;
    }

    public static final java.lang.Object[] access$removeEntryAtIndex(java.lang.Object[], int)
    {
        java.lang.Object[] $r0, $r1;
        int i0;

        $r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        $r1 = staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeKt: java.lang.Object[] removeEntryAtIndex(java.lang.Object[],int)>($r0, i0);

        return $r1;
    }

