androidx.media3.decoder.VideoDecoderOutputBuffer
<androidx.media3.decoder.VideoDecoderOutputBuffer: int COLORSPACE_UNKNOWN>
<androidx.media3.decoder.VideoDecoderOutputBuffer: int COLORSPACE_BT601>
<androidx.media3.decoder.VideoDecoderOutputBuffer: int COLORSPACE_BT709>
<androidx.media3.decoder.VideoDecoderOutputBuffer: int COLORSPACE_BT2020>
<androidx.media3.decoder.VideoDecoderOutputBuffer: int decoderPrivate>
<androidx.media3.decoder.VideoDecoderOutputBuffer: int mode>
<androidx.media3.decoder.VideoDecoderOutputBuffer: java.nio.ByteBuffer data>
<androidx.media3.decoder.VideoDecoderOutputBuffer: int width>
<androidx.media3.decoder.VideoDecoderOutputBuffer: int height>
<androidx.media3.decoder.VideoDecoderOutputBuffer: androidx.media3.common.Format format>
<androidx.media3.decoder.VideoDecoderOutputBuffer: java.nio.ByteBuffer[] yuvPlanes>
<androidx.media3.decoder.VideoDecoderOutputBuffer: int[] yuvStrides>
<androidx.media3.decoder.VideoDecoderOutputBuffer: int colorspace>
<androidx.media3.decoder.VideoDecoderOutputBuffer: java.nio.ByteBuffer supplementalData>
<androidx.media3.decoder.VideoDecoderOutputBuffer: androidx.media3.decoder.DecoderOutputBuffer$Owner owner>
    public void <init>(androidx.media3.decoder.DecoderOutputBuffer$Owner)
    {
        androidx.media3.decoder.VideoDecoderOutputBuffer r0;
        androidx.media3.decoder.DecoderOutputBuffer$Owner r1;

        r0 := @this: androidx.media3.decoder.VideoDecoderOutputBuffer;

        r1 := @parameter0: androidx.media3.decoder.DecoderOutputBuffer$Owner;

        specialinvoke r0.<androidx.media3.decoder.DecoderOutputBuffer: void <init>()>();

        r0.<androidx.media3.decoder.VideoDecoderOutputBuffer: androidx.media3.decoder.DecoderOutputBuffer$Owner owner> = r1;

        return;
    }

    public void release()
    {
        androidx.media3.decoder.VideoDecoderOutputBuffer r0;
        androidx.media3.decoder.DecoderOutputBuffer$Owner $r1;

        r0 := @this: androidx.media3.decoder.VideoDecoderOutputBuffer;

        $r1 = r0.<androidx.media3.decoder.VideoDecoderOutputBuffer: androidx.media3.decoder.DecoderOutputBuffer$Owner owner>;

        interfaceinvoke $r1.<androidx.media3.decoder.DecoderOutputBuffer$Owner: void releaseOutputBuffer(androidx.media3.decoder.DecoderOutputBuffer)>(r0);

        return;
    }

    public void init(long, int, java.nio.ByteBuffer)
    {
        androidx.media3.decoder.VideoDecoderOutputBuffer r0;
        long l0;
        int i1, i2, $i3;
        java.nio.ByteBuffer r1, $r2, $r3, $r4, $r6, $r9, $r10;
        boolean $z0;

        r0 := @this: androidx.media3.decoder.VideoDecoderOutputBuffer;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        r1 := @parameter2: java.nio.ByteBuffer;

        r0.<androidx.media3.decoder.VideoDecoderOutputBuffer: long timeUs> = l0;

        r0.<androidx.media3.decoder.VideoDecoderOutputBuffer: int mode> = i1;

        if r1 == null goto label4;

        $z0 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 == 0 goto label4;

        virtualinvoke r0.<androidx.media3.decoder.VideoDecoderOutputBuffer: void addFlag(int)>(268435456);

        i2 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();

        $r2 = r0.<androidx.media3.decoder.VideoDecoderOutputBuffer: java.nio.ByteBuffer supplementalData>;

        if $r2 == null goto label1;

        $r9 = r0.<androidx.media3.decoder.VideoDecoderOutputBuffer: java.nio.ByteBuffer supplementalData>;

        $i3 = virtualinvoke $r9.<java.nio.ByteBuffer: int capacity()>();

        if $i3 >= i2 goto label2;

     label1:
        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(i2);

        r0.<androidx.media3.decoder.VideoDecoderOutputBuffer: java.nio.ByteBuffer supplementalData> = $r3;

        goto label3;

     label2:
        $r10 = r0.<androidx.media3.decoder.VideoDecoderOutputBuffer: java.nio.ByteBuffer supplementalData>;

        virtualinvoke $r10.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

     label3:
        $r4 = r0.<androidx.media3.decoder.VideoDecoderOutputBuffer: java.nio.ByteBuffer supplementalData>;

        virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>(r1);

        $r6 = r0.<androidx.media3.decoder.VideoDecoderOutputBuffer: java.nio.ByteBuffer supplementalData>;

        virtualinvoke $r6.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(0);

        goto label5;

     label4:
        r0.<androidx.media3.decoder.VideoDecoderOutputBuffer: java.nio.ByteBuffer supplementalData> = null;

     label5:
        return;
    }

    public boolean initForYuvFrame(int, int, int, int, int)
    {
        androidx.media3.decoder.VideoDecoderOutputBuffer r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, $i12, $i13, $i14;
        java.nio.ByteBuffer r1, $r3, $r4, $r6, $r7, $r10, $r11, $r14, $r15, $r23, $r24, $r26;
        java.nio.ByteBuffer[] r2, $r5, $r22;
        long $l9, $l10, $l11;
        boolean $z0, $z1, $z2;
        int[] $r17, $r18, $r19, $r20, $r21;

        r0 := @this: androidx.media3.decoder.VideoDecoderOutputBuffer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        r0.<androidx.media3.decoder.VideoDecoderOutputBuffer: int width> = i0;

        r0.<androidx.media3.decoder.VideoDecoderOutputBuffer: int height> = i1;

        r0.<androidx.media3.decoder.VideoDecoderOutputBuffer: int colorspace> = i4;

        $l9 = (long) i1;

        $l10 = $l9 + 1L;

        $l11 = $l10 / 2L;

        i5 = (int) $l11;

        $z0 = staticinvoke <androidx.media3.decoder.VideoDecoderOutputBuffer: boolean isSafeToMultiply(int,int)>(i2, i1);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <androidx.media3.decoder.VideoDecoderOutputBuffer: boolean isSafeToMultiply(int,int)>(i3, i5);

        if $z1 != 0 goto label2;

     label1:
        return 0;

     label2:
        i6 = i2 * i1;

        i7 = i3 * i5;

        $i12 = i7 * 2;

        i8 = i6 + $i12;

        $z2 = staticinvoke <androidx.media3.decoder.VideoDecoderOutputBuffer: boolean isSafeToMultiply(int,int)>(i7, 2);

        if $z2 == 0 goto label3;

        if i8 >= i6 goto label4;

     label3:
        return 0;

     label4:
        $r3 = r0.<androidx.media3.decoder.VideoDecoderOutputBuffer: java.nio.ByteBuffer data>;

        if $r3 == null goto label5;

        $r23 = r0.<androidx.media3.decoder.VideoDecoderOutputBuffer: java.nio.ByteBuffer data>;

        $i14 = virtualinvoke $r23.<java.nio.ByteBuffer: int capacity()>();

        if $i14 >= i8 goto label6;

     label5:
        $r4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(i8);

        r0.<androidx.media3.decoder.VideoDecoderOutputBuffer: java.nio.ByteBuffer data> = $r4;

        goto label7;

     label6:
        $r24 = r0.<androidx.media3.decoder.VideoDecoderOutputBuffer: java.nio.ByteBuffer data>;

        virtualinvoke $r24.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(0);

        $r26 = r0.<androidx.media3.decoder.VideoDecoderOutputBuffer: java.nio.ByteBuffer data>;

        virtualinvoke $r26.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>(i8);

     label7:
        $r5 = r0.<androidx.media3.decoder.VideoDecoderOutputBuffer: java.nio.ByteBuffer[] yuvPlanes>;

        if $r5 != null goto label8;

        $r22 = newarray (java.nio.ByteBuffer)[3];

        r0.<androidx.media3.decoder.VideoDecoderOutputBuffer: java.nio.ByteBuffer[] yuvPlanes> = $r22;

     label8:
        r1 = r0.<androidx.media3.decoder.VideoDecoderOutputBuffer: java.nio.ByteBuffer data>;

        r2 = r0.<androidx.media3.decoder.VideoDecoderOutputBuffer: java.nio.ByteBuffer[] yuvPlanes>;

        $r6 = virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer slice()>();

        r2[0] = $r6;

        $r7 = r2[0];

        virtualinvoke $r7.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>(i6);

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i6);

        $r10 = virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer slice()>();

        r2[1] = $r10;

        $r11 = r2[1];

        virtualinvoke $r11.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>(i7);

        $i13 = i6 + i7;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i13);

        $r14 = virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer slice()>();

        r2[2] = $r14;

        $r15 = r2[2];

        virtualinvoke $r15.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>(i7);

        $r17 = r0.<androidx.media3.decoder.VideoDecoderOutputBuffer: int[] yuvStrides>;

        if $r17 != null goto label9;

        $r21 = newarray (int)[3];

        r0.<androidx.media3.decoder.VideoDecoderOutputBuffer: int[] yuvStrides> = $r21;

     label9:
        $r18 = r0.<androidx.media3.decoder.VideoDecoderOutputBuffer: int[] yuvStrides>;

        $r18[0] = i2;

        $r19 = r0.<androidx.media3.decoder.VideoDecoderOutputBuffer: int[] yuvStrides>;

        $r19[1] = i3;

        $r20 = r0.<androidx.media3.decoder.VideoDecoderOutputBuffer: int[] yuvStrides>;

        $r20[2] = i3;

        return 1;
    }

    public void initForPrivateFrame(int, int)
    {
        androidx.media3.decoder.VideoDecoderOutputBuffer r0;
        int i0, i1;

        r0 := @this: androidx.media3.decoder.VideoDecoderOutputBuffer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0.<androidx.media3.decoder.VideoDecoderOutputBuffer: int width> = i0;

        r0.<androidx.media3.decoder.VideoDecoderOutputBuffer: int height> = i1;

        return;
    }

    private static boolean isSafeToMultiply(int, int)
    {
        int i0, i1, $i2;
        boolean $z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < 0 goto label2;

        if i1 < 0 goto label2;

        if i1 <= 0 goto label1;

        $i2 = 2147483647 / i1;

        if i0 >= $i2 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

