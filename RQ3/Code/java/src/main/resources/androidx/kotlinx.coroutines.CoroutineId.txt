kotlinx.coroutines.CoroutineId
<kotlinx.coroutines.CoroutineId: kotlinx.coroutines.CoroutineId$Key Key>
<kotlinx.coroutines.CoroutineId: long id>
    static void <clinit>()
    {
        kotlinx.coroutines.CoroutineId$Key $r0;

        $r0 = new kotlinx.coroutines.CoroutineId$Key;

        specialinvoke $r0.<kotlinx.coroutines.CoroutineId$Key: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <kotlinx.coroutines.CoroutineId: kotlinx.coroutines.CoroutineId$Key Key> = $r0;

        return;
    }

    public void <init>(long)
    {
        kotlinx.coroutines.CoroutineId $r0;
        long $l0;
        kotlinx.coroutines.CoroutineId$Key $r1;

        $r0 := @this: kotlinx.coroutines.CoroutineId;

        $l0 := @parameter0: long;

        $r1 = <kotlinx.coroutines.CoroutineId: kotlinx.coroutines.CoroutineId$Key Key>;

        specialinvoke $r0.<kotlin.coroutines.AbstractCoroutineContextElement: void <init>(kotlin.coroutines.CoroutineContext$Key)>($r1);

        $r0.<kotlinx.coroutines.CoroutineId: long id> = $l0;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        kotlinx.coroutines.CoroutineId $r0, $r2;
        boolean $z0;
        long $l0, $l1;
        java.lang.Object $r1;
        byte $b2;

        $r0 := @this: kotlinx.coroutines.CoroutineId;

        $r1 := @parameter0: java.lang.Object;

        if $r0 != $r1 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof kotlinx.coroutines.CoroutineId;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r2 = (kotlinx.coroutines.CoroutineId) $r1;

        $l0 = $r0.<kotlinx.coroutines.CoroutineId: long id>;

        $l1 = $r2.<kotlinx.coroutines.CoroutineId: long id>;

        $b2 = $l0 cmp $l1;

        if $b2 == 0 goto label3;

        return 0;

     label3:
        return 1;
    }

    public final long getId()
    {
        kotlinx.coroutines.CoroutineId $r0;
        long l0;

        $r0 := @this: kotlinx.coroutines.CoroutineId;

        l0 = $r0.<kotlinx.coroutines.CoroutineId: long id>;

        return l0;
    }

    public int hashCode()
    {
        kotlinx.coroutines.CoroutineId $r0;
        int $i0;
        long $l1;

        $r0 := @this: kotlinx.coroutines.CoroutineId;

        $l1 = $r0.<kotlinx.coroutines.CoroutineId: long id>;

        $i0 = staticinvoke <kotlinx.coroutines.CoroutineId$$ExternalSyntheticBackport0: int m(long)>($l1);

        return $i0;
    }

    public volatile void restoreThreadContext(kotlin.coroutines.CoroutineContext, java.lang.Object)
    {
        kotlinx.coroutines.CoroutineId $r0;
        kotlin.coroutines.CoroutineContext $r1;
        java.lang.Object $r2;
        java.lang.String $r3;

        $r0 := @this: kotlinx.coroutines.CoroutineId;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r2 := @parameter1: java.lang.Object;

        $r3 = (java.lang.String) $r2;

        virtualinvoke $r0.<kotlinx.coroutines.CoroutineId: void restoreThreadContext(kotlin.coroutines.CoroutineContext,java.lang.String)>($r1, $r3);

        return;
    }

    public void restoreThreadContext(kotlin.coroutines.CoroutineContext, java.lang.String)
    {
        kotlinx.coroutines.CoroutineId $r0;
        java.lang.String $r1;
        java.lang.Thread $r2;
        kotlin.coroutines.CoroutineContext $r3;

        $r0 := @this: kotlinx.coroutines.CoroutineId;

        $r3 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r1 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "context");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "oldState");

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r2.<java.lang.Thread: void setName(java.lang.String)>($r1);

        return;
    }

    public java.lang.String toString()
    {
        kotlinx.coroutines.CoroutineId $r0;
        long $l0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $r0 := @this: kotlinx.coroutines.CoroutineId;

        $l0 = $r0.<kotlinx.coroutines.CoroutineId: long id>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CoroutineId(");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public volatile java.lang.Object updateThreadContext(kotlin.coroutines.CoroutineContext)
    {
        kotlinx.coroutines.CoroutineId $r0;
        java.lang.String $r1;
        kotlin.coroutines.CoroutineContext $r2;

        $r0 := @this: kotlinx.coroutines.CoroutineId;

        $r2 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r1 = virtualinvoke $r0.<kotlinx.coroutines.CoroutineId: java.lang.String updateThreadContext(kotlin.coroutines.CoroutineContext)>($r2);

        return $r1;
    }

    public java.lang.String updateThreadContext(kotlin.coroutines.CoroutineContext)
    {
        kotlinx.coroutines.CoroutineId $r0;
        kotlin.coroutines.CoroutineContext $r1;
        kotlinx.coroutines.CoroutineName$Key $r2;
        kotlin.coroutines.CoroutineContext$Element $r3;
        kotlinx.coroutines.CoroutineName $r4;
        java.lang.String $r5, $r6, $r9;
        java.lang.Thread $r7;
        int $i0, $i1;
        java.lang.StringBuilder $r8;
        long $l2;

        $r0 := @this: kotlinx.coroutines.CoroutineId;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "context");

        $r2 = <kotlinx.coroutines.CoroutineName: kotlinx.coroutines.CoroutineName$Key Key>;

        $r3 = interfaceinvoke $r1.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r2);

        $r4 = (kotlinx.coroutines.CoroutineName) $r3;

        if $r4 == null goto label1;

        $r5 = virtualinvoke $r4.<kotlinx.coroutines.CoroutineName: java.lang.String getName()>();

        $r6 = $r5;

        if $r5 != null goto label2;

     label1:
        $r6 = "coroutine";

     label2:
        $r7 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r5 = virtualinvoke $r7.<java.lang.Thread: java.lang.String getName()>();

        $i0 = staticinvoke <kotlin.text.StringsKt: int lastIndexOf$default(java.lang.CharSequence,java.lang.String,int,boolean,int,java.lang.Object)>($r5, " @", 0, 0, 6, null);

        $i1 = $i0;

        if $i0 >= 0 goto label3;

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

     label3:
        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        $r8 = new java.lang.StringBuilder;

        $i0 = $i0 + $i1;

        $i0 = $i0 + 10;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r9 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r9, "this as java.lang.String\u2026ing(startIndex, endIndex)");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" @");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(35);

        $l2 = $r0.<kotlinx.coroutines.CoroutineId: long id>;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r6 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "StringBuilder(capacity).\u2026builderAction).toString()");

        virtualinvoke $r7.<java.lang.Thread: void setName(java.lang.String)>($r6);

        return $r5;
    }

kotlinx.coroutines.CoroutineId$$ExternalSyntheticBackport0
    public static int m(long)
    {
        int $i0;
        long $l1, $l2;

        $l1 := @parameter0: long;

        $l2 = $l1 >>> 32;

        $l1 = $l1 ^ $l2;

        $i0 = (int) $l1;

        return $i0;
    }

kotlinx.coroutines.CoroutineId$Key
    private void <init>()
    {
        kotlinx.coroutines.CoroutineId$Key $r0;

        $r0 := @this: kotlinx.coroutines.CoroutineId$Key;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        kotlinx.coroutines.CoroutineId$Key $r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        $r0 := @this: kotlinx.coroutines.CoroutineId$Key;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke $r0.<kotlinx.coroutines.CoroutineId$Key: void <init>()>();

        return;
    }

