androidx.room.QueryInterceptorDatabase
<androidx.room.QueryInterceptorDatabase: androidx.sqlite.db.SupportSQLiteDatabase delegate>
<androidx.room.QueryInterceptorDatabase: java.util.concurrent.Executor queryCallbackExecutor>
<androidx.room.QueryInterceptorDatabase: androidx.room.RoomDatabase$QueryCallback queryCallback>
    public void <init>(androidx.sqlite.db.SupportSQLiteDatabase, java.util.concurrent.Executor, androidx.room.RoomDatabase$QueryCallback)
    {
        androidx.room.QueryInterceptorDatabase r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        java.util.concurrent.Executor r2;
        androidx.room.RoomDatabase$QueryCallback r3;

        r0 := @this: androidx.room.QueryInterceptorDatabase;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: androidx.room.RoomDatabase$QueryCallback;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "delegate");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "queryCallbackExecutor");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "queryCallback");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.room.QueryInterceptorDatabase: androidx.sqlite.db.SupportSQLiteDatabase delegate> = r1;

        r0.<androidx.room.QueryInterceptorDatabase: java.util.concurrent.Executor queryCallbackExecutor> = r2;

        r0.<androidx.room.QueryInterceptorDatabase: androidx.room.RoomDatabase$QueryCallback queryCallback> = r3;

        return;
    }

    public java.util.List getAttachedDbs()
    {
        androidx.room.QueryInterceptorDatabase r0;
        androidx.sqlite.db.SupportSQLiteDatabase $r1;
        java.util.List $r2;

        r0 := @this: androidx.room.QueryInterceptorDatabase;

        $r1 = r0.<androidx.room.QueryInterceptorDatabase: androidx.sqlite.db.SupportSQLiteDatabase delegate>;

        $r2 = interfaceinvoke $r1.<androidx.sqlite.db.SupportSQLiteDatabase: java.util.List getAttachedDbs()>();

        return $r2;
    }

    public boolean isDatabaseIntegrityOk()
    {
        androidx.room.QueryInterceptorDatabase r0;
        androidx.sqlite.db.SupportSQLiteDatabase $r1;
        boolean $z0;

        r0 := @this: androidx.room.QueryInterceptorDatabase;

        $r1 = r0.<androidx.room.QueryInterceptorDatabase: androidx.sqlite.db.SupportSQLiteDatabase delegate>;

        $z0 = interfaceinvoke $r1.<androidx.sqlite.db.SupportSQLiteDatabase: boolean isDatabaseIntegrityOk()>();

        return $z0;
    }

    public boolean isDbLockedByCurrentThread()
    {
        androidx.room.QueryInterceptorDatabase r0;
        androidx.sqlite.db.SupportSQLiteDatabase $r1;
        boolean $z0;

        r0 := @this: androidx.room.QueryInterceptorDatabase;

        $r1 = r0.<androidx.room.QueryInterceptorDatabase: androidx.sqlite.db.SupportSQLiteDatabase delegate>;

        $z0 = interfaceinvoke $r1.<androidx.sqlite.db.SupportSQLiteDatabase: boolean isDbLockedByCurrentThread()>();

        return $z0;
    }

    public boolean isExecPerConnectionSQLSupported()
    {
        androidx.room.QueryInterceptorDatabase r0;
        androidx.sqlite.db.SupportSQLiteDatabase $r1;
        boolean $z0;

        r0 := @this: androidx.room.QueryInterceptorDatabase;

        $r1 = r0.<androidx.room.QueryInterceptorDatabase: androidx.sqlite.db.SupportSQLiteDatabase delegate>;

        $z0 = interfaceinvoke $r1.<androidx.sqlite.db.SupportSQLiteDatabase: boolean isExecPerConnectionSQLSupported()>();

        return $z0;
    }

    public boolean isOpen()
    {
        androidx.room.QueryInterceptorDatabase r0;
        androidx.sqlite.db.SupportSQLiteDatabase $r1;
        boolean $z0;

        r0 := @this: androidx.room.QueryInterceptorDatabase;

        $r1 = r0.<androidx.room.QueryInterceptorDatabase: androidx.sqlite.db.SupportSQLiteDatabase delegate>;

        $z0 = interfaceinvoke $r1.<androidx.sqlite.db.SupportSQLiteDatabase: boolean isOpen()>();

        return $z0;
    }

    public boolean isReadOnly()
    {
        androidx.room.QueryInterceptorDatabase r0;
        androidx.sqlite.db.SupportSQLiteDatabase $r1;
        boolean $z0;

        r0 := @this: androidx.room.QueryInterceptorDatabase;

        $r1 = r0.<androidx.room.QueryInterceptorDatabase: androidx.sqlite.db.SupportSQLiteDatabase delegate>;

        $z0 = interfaceinvoke $r1.<androidx.sqlite.db.SupportSQLiteDatabase: boolean isReadOnly()>();

        return $z0;
    }

    public boolean isWriteAheadLoggingEnabled()
    {
        androidx.room.QueryInterceptorDatabase r0;
        androidx.sqlite.db.SupportSQLiteDatabase $r1;
        boolean $z0;

        r0 := @this: androidx.room.QueryInterceptorDatabase;

        $r1 = r0.<androidx.room.QueryInterceptorDatabase: androidx.sqlite.db.SupportSQLiteDatabase delegate>;

        $z0 = interfaceinvoke $r1.<androidx.sqlite.db.SupportSQLiteDatabase: boolean isWriteAheadLoggingEnabled()>();

        return $z0;
    }

    public long getMaximumSize()
    {
        androidx.room.QueryInterceptorDatabase r0;
        androidx.sqlite.db.SupportSQLiteDatabase $r1;
        long $l0;

        r0 := @this: androidx.room.QueryInterceptorDatabase;

        $r1 = r0.<androidx.room.QueryInterceptorDatabase: androidx.sqlite.db.SupportSQLiteDatabase delegate>;

        $l0 = interfaceinvoke $r1.<androidx.sqlite.db.SupportSQLiteDatabase: long getMaximumSize()>();

        return $l0;
    }

    public long getPageSize()
    {
        androidx.room.QueryInterceptorDatabase r0;
        androidx.sqlite.db.SupportSQLiteDatabase $r1;
        long $l0;

        r0 := @this: androidx.room.QueryInterceptorDatabase;

        $r1 = r0.<androidx.room.QueryInterceptorDatabase: androidx.sqlite.db.SupportSQLiteDatabase delegate>;

        $l0 = interfaceinvoke $r1.<androidx.sqlite.db.SupportSQLiteDatabase: long getPageSize()>();

        return $l0;
    }

    public void setPageSize(long)
    {
        androidx.room.QueryInterceptorDatabase r0;
        long l0;
        androidx.sqlite.db.SupportSQLiteDatabase $r1;

        r0 := @this: androidx.room.QueryInterceptorDatabase;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.room.QueryInterceptorDatabase: androidx.sqlite.db.SupportSQLiteDatabase delegate>;

        interfaceinvoke $r1.<androidx.sqlite.db.SupportSQLiteDatabase: void setPageSize(long)>(l0);

        return;
    }

    public java.lang.String getPath()
    {
        androidx.room.QueryInterceptorDatabase r0;
        androidx.sqlite.db.SupportSQLiteDatabase $r1;
        java.lang.String $r2;

        r0 := @this: androidx.room.QueryInterceptorDatabase;

        $r1 = r0.<androidx.room.QueryInterceptorDatabase: androidx.sqlite.db.SupportSQLiteDatabase delegate>;

        $r2 = interfaceinvoke $r1.<androidx.sqlite.db.SupportSQLiteDatabase: java.lang.String getPath()>();

        return $r2;
    }

    public int getVersion()
    {
        androidx.room.QueryInterceptorDatabase r0;
        androidx.sqlite.db.SupportSQLiteDatabase $r1;
        int $i0;

        r0 := @this: androidx.room.QueryInterceptorDatabase;

        $r1 = r0.<androidx.room.QueryInterceptorDatabase: androidx.sqlite.db.SupportSQLiteDatabase delegate>;

        $i0 = interfaceinvoke $r1.<androidx.sqlite.db.SupportSQLiteDatabase: int getVersion()>();

        return $i0;
    }

    public void setVersion(int)
    {
        androidx.room.QueryInterceptorDatabase r0;
        int i0;
        androidx.sqlite.db.SupportSQLiteDatabase $r1;

        r0 := @this: androidx.room.QueryInterceptorDatabase;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.room.QueryInterceptorDatabase: androidx.sqlite.db.SupportSQLiteDatabase delegate>;

        interfaceinvoke $r1.<androidx.sqlite.db.SupportSQLiteDatabase: void setVersion(int)>(i0);

        return;
    }

    public void close()
    {
        androidx.room.QueryInterceptorDatabase r0;
        androidx.sqlite.db.SupportSQLiteDatabase $r1;

        r0 := @this: androidx.room.QueryInterceptorDatabase;

        $r1 = r0.<androidx.room.QueryInterceptorDatabase: androidx.sqlite.db.SupportSQLiteDatabase delegate>;

        interfaceinvoke $r1.<androidx.sqlite.db.SupportSQLiteDatabase: void close()>();

        return;
    }

    public int delete(java.lang.String, java.lang.String, java.lang.Object[])
    {
        androidx.room.QueryInterceptorDatabase r0;
        java.lang.String r1, r2;
        java.lang.Object[] r3;
        androidx.sqlite.db.SupportSQLiteDatabase $r4;
        int $i0;

        r0 := @this: androidx.room.QueryInterceptorDatabase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "table");

        $r4 = r0.<androidx.room.QueryInterceptorDatabase: androidx.sqlite.db.SupportSQLiteDatabase delegate>;

        $i0 = interfaceinvoke $r4.<androidx.sqlite.db.SupportSQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.Object[])>(r1, r2, r3);

        return $i0;
    }

    public void disableWriteAheadLogging()
    {
        androidx.room.QueryInterceptorDatabase r0;
        androidx.sqlite.db.SupportSQLiteDatabase $r1;

        r0 := @this: androidx.room.QueryInterceptorDatabase;

        $r1 = r0.<androidx.room.QueryInterceptorDatabase: androidx.sqlite.db.SupportSQLiteDatabase delegate>;

        interfaceinvoke $r1.<androidx.sqlite.db.SupportSQLiteDatabase: void disableWriteAheadLogging()>();

        return;
    }

    public boolean enableWriteAheadLogging()
    {
        androidx.room.QueryInterceptorDatabase r0;
        androidx.sqlite.db.SupportSQLiteDatabase $r1;
        boolean $z0;

        r0 := @this: androidx.room.QueryInterceptorDatabase;

        $r1 = r0.<androidx.room.QueryInterceptorDatabase: androidx.sqlite.db.SupportSQLiteDatabase delegate>;

        $z0 = interfaceinvoke $r1.<androidx.sqlite.db.SupportSQLiteDatabase: boolean enableWriteAheadLogging()>();

        return $z0;
    }

    public void execPerConnectionSQL(java.lang.String, java.lang.Object[])
    {
        androidx.room.QueryInterceptorDatabase r0;
        java.lang.String r1;
        java.lang.Object[] r2;
        androidx.sqlite.db.SupportSQLiteDatabase $r3;

        r0 := @this: androidx.room.QueryInterceptorDatabase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "sql");

        $r3 = r0.<androidx.room.QueryInterceptorDatabase: androidx.sqlite.db.SupportSQLiteDatabase delegate>;

        interfaceinvoke $r3.<androidx.sqlite.db.SupportSQLiteDatabase: void execPerConnectionSQL(java.lang.String,java.lang.Object[])>(r1, r2);

        return;
    }

    public boolean inTransaction()
    {
        androidx.room.QueryInterceptorDatabase r0;
        androidx.sqlite.db.SupportSQLiteDatabase $r1;
        boolean $z0;

        r0 := @this: androidx.room.QueryInterceptorDatabase;

        $r1 = r0.<androidx.room.QueryInterceptorDatabase: androidx.sqlite.db.SupportSQLiteDatabase delegate>;

        $z0 = interfaceinvoke $r1.<androidx.sqlite.db.SupportSQLiteDatabase: boolean inTransaction()>();

        return $z0;
    }

    public long insert(java.lang.String, int, android.content.ContentValues)
    {
        androidx.room.QueryInterceptorDatabase r0;
        java.lang.String r1;
        int i0;
        android.content.ContentValues r2;
        androidx.sqlite.db.SupportSQLiteDatabase $r3;
        long $l1;

        r0 := @this: androidx.room.QueryInterceptorDatabase;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.content.ContentValues;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "table");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "values");

        $r3 = r0.<androidx.room.QueryInterceptorDatabase: androidx.sqlite.db.SupportSQLiteDatabase delegate>;

        $l1 = interfaceinvoke $r3.<androidx.sqlite.db.SupportSQLiteDatabase: long insert(java.lang.String,int,android.content.ContentValues)>(r1, i0, r2);

        return $l1;
    }

    public boolean needUpgrade(int)
    {
        androidx.room.QueryInterceptorDatabase r0;
        int i0;
        androidx.sqlite.db.SupportSQLiteDatabase $r1;
        boolean $z0;

        r0 := @this: androidx.room.QueryInterceptorDatabase;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.room.QueryInterceptorDatabase: androidx.sqlite.db.SupportSQLiteDatabase delegate>;

        $z0 = interfaceinvoke $r1.<androidx.sqlite.db.SupportSQLiteDatabase: boolean needUpgrade(int)>(i0);

        return $z0;
    }

    public void setForeignKeyConstraintsEnabled(boolean)
    {
        androidx.room.QueryInterceptorDatabase r0;
        boolean z0;
        androidx.sqlite.db.SupportSQLiteDatabase $r1;

        r0 := @this: androidx.room.QueryInterceptorDatabase;

        z0 := @parameter0: boolean;

        $r1 = r0.<androidx.room.QueryInterceptorDatabase: androidx.sqlite.db.SupportSQLiteDatabase delegate>;

        interfaceinvoke $r1.<androidx.sqlite.db.SupportSQLiteDatabase: void setForeignKeyConstraintsEnabled(boolean)>(z0);

        return;
    }

    public void setLocale(java.util.Locale)
    {
        androidx.room.QueryInterceptorDatabase r0;
        java.util.Locale r1;
        androidx.sqlite.db.SupportSQLiteDatabase $r2;

        r0 := @this: androidx.room.QueryInterceptorDatabase;

        r1 := @parameter0: java.util.Locale;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "locale");

        $r2 = r0.<androidx.room.QueryInterceptorDatabase: androidx.sqlite.db.SupportSQLiteDatabase delegate>;

        interfaceinvoke $r2.<androidx.sqlite.db.SupportSQLiteDatabase: void setLocale(java.util.Locale)>(r1);

        return;
    }

    public void setMaxSqlCacheSize(int)
    {
        androidx.room.QueryInterceptorDatabase r0;
        int i0;
        androidx.sqlite.db.SupportSQLiteDatabase $r1;

        r0 := @this: androidx.room.QueryInterceptorDatabase;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.room.QueryInterceptorDatabase: androidx.sqlite.db.SupportSQLiteDatabase delegate>;

        interfaceinvoke $r1.<androidx.sqlite.db.SupportSQLiteDatabase: void setMaxSqlCacheSize(int)>(i0);

        return;
    }

    public long setMaximumSize(long)
    {
        androidx.room.QueryInterceptorDatabase r0;
        long l0, $l1;
        androidx.sqlite.db.SupportSQLiteDatabase $r1;

        r0 := @this: androidx.room.QueryInterceptorDatabase;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.room.QueryInterceptorDatabase: androidx.sqlite.db.SupportSQLiteDatabase delegate>;

        $l1 = interfaceinvoke $r1.<androidx.sqlite.db.SupportSQLiteDatabase: long setMaximumSize(long)>(l0);

        return $l1;
    }

    public int update(java.lang.String, int, android.content.ContentValues, java.lang.String, java.lang.Object[])
    {
        androidx.room.QueryInterceptorDatabase r0;
        java.lang.String r1, r3;
        int i0, $i1;
        android.content.ContentValues r2;
        java.lang.Object[] r4;
        androidx.sqlite.db.SupportSQLiteDatabase $r5;

        r0 := @this: androidx.room.QueryInterceptorDatabase;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.content.ContentValues;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "table");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "values");

        $r5 = r0.<androidx.room.QueryInterceptorDatabase: androidx.sqlite.db.SupportSQLiteDatabase delegate>;

        $i1 = interfaceinvoke $r5.<androidx.sqlite.db.SupportSQLiteDatabase: int update(java.lang.String,int,android.content.ContentValues,java.lang.String,java.lang.Object[])>(r1, i0, r2, r3, r4);

        return $i1;
    }

    public boolean yieldIfContendedSafely()
    {
        androidx.room.QueryInterceptorDatabase r0;
        androidx.sqlite.db.SupportSQLiteDatabase $r1;
        boolean $z0;

        r0 := @this: androidx.room.QueryInterceptorDatabase;

        $r1 = r0.<androidx.room.QueryInterceptorDatabase: androidx.sqlite.db.SupportSQLiteDatabase delegate>;

        $z0 = interfaceinvoke $r1.<androidx.sqlite.db.SupportSQLiteDatabase: boolean yieldIfContendedSafely()>();

        return $z0;
    }

    public boolean yieldIfContendedSafely(long)
    {
        androidx.room.QueryInterceptorDatabase r0;
        long l0;
        androidx.sqlite.db.SupportSQLiteDatabase $r1;
        boolean $z0;

        r0 := @this: androidx.room.QueryInterceptorDatabase;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.room.QueryInterceptorDatabase: androidx.sqlite.db.SupportSQLiteDatabase delegate>;

        $z0 = interfaceinvoke $r1.<androidx.sqlite.db.SupportSQLiteDatabase: boolean yieldIfContendedSafely(long)>(l0);

        return $z0;
    }

    public androidx.sqlite.db.SupportSQLiteStatement compileStatement(java.lang.String)
    {
        androidx.room.QueryInterceptorDatabase r0;
        java.lang.String r1;
        androidx.room.QueryInterceptorStatement $r2;
        androidx.sqlite.db.SupportSQLiteDatabase $r3;
        androidx.sqlite.db.SupportSQLiteStatement $r4, $r7;
        androidx.room.RoomDatabase$QueryCallback $r5;
        java.util.concurrent.Executor $r6;

        r0 := @this: androidx.room.QueryInterceptorDatabase;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "sql");

        $r2 = new androidx.room.QueryInterceptorStatement;

        $r3 = r0.<androidx.room.QueryInterceptorDatabase: androidx.sqlite.db.SupportSQLiteDatabase delegate>;

        $r4 = interfaceinvoke $r3.<androidx.sqlite.db.SupportSQLiteDatabase: androidx.sqlite.db.SupportSQLiteStatement compileStatement(java.lang.String)>(r1);

        $r6 = r0.<androidx.room.QueryInterceptorDatabase: java.util.concurrent.Executor queryCallbackExecutor>;

        $r5 = r0.<androidx.room.QueryInterceptorDatabase: androidx.room.RoomDatabase$QueryCallback queryCallback>;

        specialinvoke $r2.<androidx.room.QueryInterceptorStatement: void <init>(androidx.sqlite.db.SupportSQLiteStatement,java.lang.String,java.util.concurrent.Executor,androidx.room.RoomDatabase$QueryCallback)>($r4, r1, $r6, $r5);

        $r7 = (androidx.sqlite.db.SupportSQLiteStatement) $r2;

        return $r7;
    }

    public void beginTransaction()
    {
        androidx.room.QueryInterceptorDatabase r0;
        java.util.concurrent.Executor $r1;
        java.lang.Runnable $r2;
        androidx.sqlite.db.SupportSQLiteDatabase $r3;

        r0 := @this: androidx.room.QueryInterceptorDatabase;

        $r1 = r0.<androidx.room.QueryInterceptorDatabase: java.util.concurrent.Executor queryCallbackExecutor>;

        $r2 = dynamicinvoke "run" <java.lang.Runnable (androidx.room.QueryInterceptorDatabase)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.room.QueryInterceptorDatabase: void beginTransaction$lambda$0(androidx.room.QueryInterceptorDatabase)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r2);

        $r3 = r0.<androidx.room.QueryInterceptorDatabase: androidx.sqlite.db.SupportSQLiteDatabase delegate>;

        interfaceinvoke $r3.<androidx.sqlite.db.SupportSQLiteDatabase: void beginTransaction()>();

        return;
    }

    public void beginTransactionNonExclusive()
    {
        androidx.room.QueryInterceptorDatabase r0;
        java.util.concurrent.Executor $r1;
        java.lang.Runnable $r2;
        androidx.sqlite.db.SupportSQLiteDatabase $r3;

        r0 := @this: androidx.room.QueryInterceptorDatabase;

        $r1 = r0.<androidx.room.QueryInterceptorDatabase: java.util.concurrent.Executor queryCallbackExecutor>;

        $r2 = dynamicinvoke "run" <java.lang.Runnable (androidx.room.QueryInterceptorDatabase)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.room.QueryInterceptorDatabase: void beginTransactionNonExclusive$lambda$1(androidx.room.QueryInterceptorDatabase)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r2);

        $r3 = r0.<androidx.room.QueryInterceptorDatabase: androidx.sqlite.db.SupportSQLiteDatabase delegate>;

        interfaceinvoke $r3.<androidx.sqlite.db.SupportSQLiteDatabase: void beginTransactionNonExclusive()>();

        return;
    }

    public void beginTransactionWithListener(android.database.sqlite.SQLiteTransactionListener)
    {
        androidx.room.QueryInterceptorDatabase r0;
        android.database.sqlite.SQLiteTransactionListener r1;
        java.util.concurrent.Executor $r2;
        java.lang.Runnable $r3;
        androidx.sqlite.db.SupportSQLiteDatabase $r4;

        r0 := @this: androidx.room.QueryInterceptorDatabase;

        r1 := @parameter0: android.database.sqlite.SQLiteTransactionListener;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "transactionListener");

        $r2 = r0.<androidx.room.QueryInterceptorDatabase: java.util.concurrent.Executor queryCallbackExecutor>;

        $r3 = dynamicinvoke "run" <java.lang.Runnable (androidx.room.QueryInterceptorDatabase)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.room.QueryInterceptorDatabase: void beginTransactionWithListener$lambda$2(androidx.room.QueryInterceptorDatabase)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r3);

        $r4 = r0.<androidx.room.QueryInterceptorDatabase: androidx.sqlite.db.SupportSQLiteDatabase delegate>;

        interfaceinvoke $r4.<androidx.sqlite.db.SupportSQLiteDatabase: void beginTransactionWithListener(android.database.sqlite.SQLiteTransactionListener)>(r1);

        return;
    }

    public void beginTransactionWithListenerNonExclusive(android.database.sqlite.SQLiteTransactionListener)
    {
        androidx.room.QueryInterceptorDatabase r0;
        android.database.sqlite.SQLiteTransactionListener r1;
        java.util.concurrent.Executor $r2;
        java.lang.Runnable $r3;
        androidx.sqlite.db.SupportSQLiteDatabase $r4;

        r0 := @this: androidx.room.QueryInterceptorDatabase;

        r1 := @parameter0: android.database.sqlite.SQLiteTransactionListener;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "transactionListener");

        $r2 = r0.<androidx.room.QueryInterceptorDatabase: java.util.concurrent.Executor queryCallbackExecutor>;

        $r3 = dynamicinvoke "run" <java.lang.Runnable (androidx.room.QueryInterceptorDatabase)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.room.QueryInterceptorDatabase: void beginTransactionWithListenerNonExclusive$lambda$3(androidx.room.QueryInterceptorDatabase)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r3);

        $r4 = r0.<androidx.room.QueryInterceptorDatabase: androidx.sqlite.db.SupportSQLiteDatabase delegate>;

        interfaceinvoke $r4.<androidx.sqlite.db.SupportSQLiteDatabase: void beginTransactionWithListenerNonExclusive(android.database.sqlite.SQLiteTransactionListener)>(r1);

        return;
    }

    public void endTransaction()
    {
        androidx.room.QueryInterceptorDatabase r0;
        java.util.concurrent.Executor $r1;
        java.lang.Runnable $r2;
        androidx.sqlite.db.SupportSQLiteDatabase $r3;

        r0 := @this: androidx.room.QueryInterceptorDatabase;

        $r1 = r0.<androidx.room.QueryInterceptorDatabase: java.util.concurrent.Executor queryCallbackExecutor>;

        $r2 = dynamicinvoke "run" <java.lang.Runnable (androidx.room.QueryInterceptorDatabase)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.room.QueryInterceptorDatabase: void endTransaction$lambda$4(androidx.room.QueryInterceptorDatabase)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r2);

        $r3 = r0.<androidx.room.QueryInterceptorDatabase: androidx.sqlite.db.SupportSQLiteDatabase delegate>;

        interfaceinvoke $r3.<androidx.sqlite.db.SupportSQLiteDatabase: void endTransaction()>();

        return;
    }

    public void setTransactionSuccessful()
    {
        androidx.room.QueryInterceptorDatabase r0;
        java.util.concurrent.Executor $r1;
        java.lang.Runnable $r2;
        androidx.sqlite.db.SupportSQLiteDatabase $r3;

        r0 := @this: androidx.room.QueryInterceptorDatabase;

        $r1 = r0.<androidx.room.QueryInterceptorDatabase: java.util.concurrent.Executor queryCallbackExecutor>;

        $r2 = dynamicinvoke "run" <java.lang.Runnable (androidx.room.QueryInterceptorDatabase)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.room.QueryInterceptorDatabase: void setTransactionSuccessful$lambda$5(androidx.room.QueryInterceptorDatabase)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r2);

        $r3 = r0.<androidx.room.QueryInterceptorDatabase: androidx.sqlite.db.SupportSQLiteDatabase delegate>;

        interfaceinvoke $r3.<androidx.sqlite.db.SupportSQLiteDatabase: void setTransactionSuccessful()>();

        return;
    }

    public android.database.Cursor query(java.lang.String)
    {
        androidx.room.QueryInterceptorDatabase r0;
        java.lang.String r1;
        java.util.concurrent.Executor $r2;
        java.lang.Runnable $r3;
        androidx.sqlite.db.SupportSQLiteDatabase $r4;
        android.database.Cursor $r5;

        r0 := @this: androidx.room.QueryInterceptorDatabase;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "query");

        $r2 = r0.<androidx.room.QueryInterceptorDatabase: java.util.concurrent.Executor queryCallbackExecutor>;

        $r3 = dynamicinvoke "run" <java.lang.Runnable (androidx.room.QueryInterceptorDatabase,java.lang.String)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.room.QueryInterceptorDatabase: void query$lambda$6(androidx.room.QueryInterceptorDatabase,java.lang.String)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r3);

        $r4 = r0.<androidx.room.QueryInterceptorDatabase: androidx.sqlite.db.SupportSQLiteDatabase delegate>;

        $r5 = interfaceinvoke $r4.<androidx.sqlite.db.SupportSQLiteDatabase: android.database.Cursor query(java.lang.String)>(r1);

        return $r5;
    }

    public android.database.Cursor query(java.lang.String, java.lang.Object[])
    {
        androidx.room.QueryInterceptorDatabase r0;
        java.lang.String r1;
        java.lang.Object[] r2;
        java.util.concurrent.Executor $r3;
        java.lang.Runnable $r4;
        androidx.sqlite.db.SupportSQLiteDatabase $r5;
        android.database.Cursor $r6;

        r0 := @this: androidx.room.QueryInterceptorDatabase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "query");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "bindArgs");

        $r3 = r0.<androidx.room.QueryInterceptorDatabase: java.util.concurrent.Executor queryCallbackExecutor>;

        $r4 = dynamicinvoke "run" <java.lang.Runnable (androidx.room.QueryInterceptorDatabase,java.lang.String,java.lang.Object[])>(r0, r1, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.room.QueryInterceptorDatabase: void query$lambda$7(androidx.room.QueryInterceptorDatabase,java.lang.String,java.lang.Object[])>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r3.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r4);

        $r5 = r0.<androidx.room.QueryInterceptorDatabase: androidx.sqlite.db.SupportSQLiteDatabase delegate>;

        $r6 = interfaceinvoke $r5.<androidx.sqlite.db.SupportSQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.Object[])>(r1, r2);

        return $r6;
    }

    public android.database.Cursor query(androidx.sqlite.db.SupportSQLiteQuery)
    {
        androidx.room.QueryInterceptorDatabase r0;
        androidx.sqlite.db.SupportSQLiteQuery r1;
        androidx.room.QueryInterceptorProgram r2, $r3;
        androidx.sqlite.db.SupportSQLiteProgram $r4;
        java.util.concurrent.Executor $r5;
        java.lang.Runnable $r6;
        androidx.sqlite.db.SupportSQLiteDatabase $r7;
        android.database.Cursor $r8;

        r0 := @this: androidx.room.QueryInterceptorDatabase;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteQuery;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "query");

        $r3 = new androidx.room.QueryInterceptorProgram;

        specialinvoke $r3.<androidx.room.QueryInterceptorProgram: void <init>()>();

        r2 = $r3;

        $r4 = (androidx.sqlite.db.SupportSQLiteProgram) r2;

        interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteQuery: void bindTo(androidx.sqlite.db.SupportSQLiteProgram)>($r4);

        $r5 = r0.<androidx.room.QueryInterceptorDatabase: java.util.concurrent.Executor queryCallbackExecutor>;

        $r6 = dynamicinvoke "run" <java.lang.Runnable (androidx.room.QueryInterceptorDatabase,androidx.sqlite.db.SupportSQLiteQuery,androidx.room.QueryInterceptorProgram)>(r0, r1, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.room.QueryInterceptorDatabase: void query$lambda$8(androidx.room.QueryInterceptorDatabase,androidx.sqlite.db.SupportSQLiteQuery,androidx.room.QueryInterceptorProgram)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r5.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r6);

        $r7 = r0.<androidx.room.QueryInterceptorDatabase: androidx.sqlite.db.SupportSQLiteDatabase delegate>;

        $r8 = interfaceinvoke $r7.<androidx.sqlite.db.SupportSQLiteDatabase: android.database.Cursor query(androidx.sqlite.db.SupportSQLiteQuery)>(r1);

        return $r8;
    }

    public android.database.Cursor query(androidx.sqlite.db.SupportSQLiteQuery, android.os.CancellationSignal)
    {
        androidx.room.QueryInterceptorDatabase r0;
        androidx.sqlite.db.SupportSQLiteQuery r1;
        android.os.CancellationSignal r2;
        androidx.room.QueryInterceptorProgram r3, $r4;
        androidx.sqlite.db.SupportSQLiteProgram $r5;
        java.util.concurrent.Executor $r6;
        java.lang.Runnable $r7;
        androidx.sqlite.db.SupportSQLiteDatabase $r8;
        android.database.Cursor $r9;

        r0 := @this: androidx.room.QueryInterceptorDatabase;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteQuery;

        r2 := @parameter1: android.os.CancellationSignal;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "query");

        $r4 = new androidx.room.QueryInterceptorProgram;

        specialinvoke $r4.<androidx.room.QueryInterceptorProgram: void <init>()>();

        r3 = $r4;

        $r5 = (androidx.sqlite.db.SupportSQLiteProgram) r3;

        interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteQuery: void bindTo(androidx.sqlite.db.SupportSQLiteProgram)>($r5);

        $r6 = r0.<androidx.room.QueryInterceptorDatabase: java.util.concurrent.Executor queryCallbackExecutor>;

        $r7 = dynamicinvoke "run" <java.lang.Runnable (androidx.room.QueryInterceptorDatabase,androidx.sqlite.db.SupportSQLiteQuery,androidx.room.QueryInterceptorProgram)>(r0, r1, r3) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.room.QueryInterceptorDatabase: void query$lambda$9(androidx.room.QueryInterceptorDatabase,androidx.sqlite.db.SupportSQLiteQuery,androidx.room.QueryInterceptorProgram)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r6.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r7);

        $r8 = r0.<androidx.room.QueryInterceptorDatabase: androidx.sqlite.db.SupportSQLiteDatabase delegate>;

        $r9 = interfaceinvoke $r8.<androidx.sqlite.db.SupportSQLiteDatabase: android.database.Cursor query(androidx.sqlite.db.SupportSQLiteQuery)>(r1);

        return $r9;
    }

    public void execSQL(java.lang.String)
    {
        androidx.room.QueryInterceptorDatabase r0;
        java.lang.String r1;
        java.util.concurrent.Executor $r2;
        java.lang.Runnable $r3;
        androidx.sqlite.db.SupportSQLiteDatabase $r4;

        r0 := @this: androidx.room.QueryInterceptorDatabase;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "sql");

        $r2 = r0.<androidx.room.QueryInterceptorDatabase: java.util.concurrent.Executor queryCallbackExecutor>;

        $r3 = dynamicinvoke "run" <java.lang.Runnable (androidx.room.QueryInterceptorDatabase,java.lang.String)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.room.QueryInterceptorDatabase: void execSQL$lambda$10(androidx.room.QueryInterceptorDatabase,java.lang.String)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r3);

        $r4 = r0.<androidx.room.QueryInterceptorDatabase: androidx.sqlite.db.SupportSQLiteDatabase delegate>;

        interfaceinvoke $r4.<androidx.sqlite.db.SupportSQLiteDatabase: void execSQL(java.lang.String)>(r1);

        return;
    }

    public void execSQL(java.lang.String, java.lang.Object[])
    {
        androidx.room.QueryInterceptorDatabase r0;
        java.lang.String r1;
        java.lang.Object[] r2;
        java.util.List r3, $r6;
        java.util.List[] r4;
        java.util.ArrayList $r5;
        java.util.Collection $r7;
        java.util.concurrent.Executor $r8;
        java.lang.Runnable $r9;
        androidx.sqlite.db.SupportSQLiteDatabase $r10;

        r0 := @this: androidx.room.QueryInterceptorDatabase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "sql");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "bindArgs");

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r3 = (java.util.List) $r5;

        $r6 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>(r2);

        $r7 = (java.util.Collection) $r6;

        interfaceinvoke r3.<java.util.List: boolean addAll(java.util.Collection)>($r7);

        $r8 = r0.<androidx.room.QueryInterceptorDatabase: java.util.concurrent.Executor queryCallbackExecutor>;

        $r9 = dynamicinvoke "run" <java.lang.Runnable (androidx.room.QueryInterceptorDatabase,java.lang.String,java.util.List)>(r0, r1, r3) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.room.QueryInterceptorDatabase: void execSQL$lambda$11(androidx.room.QueryInterceptorDatabase,java.lang.String,java.util.List)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r8.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r9);

        $r10 = r0.<androidx.room.QueryInterceptorDatabase: androidx.sqlite.db.SupportSQLiteDatabase delegate>;

        r4 = newarray (java.util.List)[1];

        r4[0] = r3;

        interfaceinvoke $r10.<androidx.sqlite.db.SupportSQLiteDatabase: void execSQL(java.lang.String,java.lang.Object[])>(r1, r4);

        return;
    }

    private static final void beginTransaction$lambda$0(androidx.room.QueryInterceptorDatabase)
    {
        androidx.room.QueryInterceptorDatabase r0;
        androidx.room.RoomDatabase$QueryCallback $r1;
        java.util.List $r2;

        r0 := @parameter0: androidx.room.QueryInterceptorDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        $r1 = r0.<androidx.room.QueryInterceptorDatabase: androidx.room.RoomDatabase$QueryCallback queryCallback>;

        $r2 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        interfaceinvoke $r1.<androidx.room.RoomDatabase$QueryCallback: void onQuery(java.lang.String,java.util.List)>("BEGIN EXCLUSIVE TRANSACTION", $r2);

        return;
    }

    private static final void beginTransactionNonExclusive$lambda$1(androidx.room.QueryInterceptorDatabase)
    {
        androidx.room.QueryInterceptorDatabase r0;
        androidx.room.RoomDatabase$QueryCallback $r1;
        java.util.List $r2;

        r0 := @parameter0: androidx.room.QueryInterceptorDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        $r1 = r0.<androidx.room.QueryInterceptorDatabase: androidx.room.RoomDatabase$QueryCallback queryCallback>;

        $r2 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        interfaceinvoke $r1.<androidx.room.RoomDatabase$QueryCallback: void onQuery(java.lang.String,java.util.List)>("BEGIN DEFERRED TRANSACTION", $r2);

        return;
    }

    private static final void beginTransactionWithListener$lambda$2(androidx.room.QueryInterceptorDatabase)
    {
        androidx.room.QueryInterceptorDatabase r0;
        androidx.room.RoomDatabase$QueryCallback $r1;
        java.util.List $r2;

        r0 := @parameter0: androidx.room.QueryInterceptorDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        $r1 = r0.<androidx.room.QueryInterceptorDatabase: androidx.room.RoomDatabase$QueryCallback queryCallback>;

        $r2 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        interfaceinvoke $r1.<androidx.room.RoomDatabase$QueryCallback: void onQuery(java.lang.String,java.util.List)>("BEGIN EXCLUSIVE TRANSACTION", $r2);

        return;
    }

    private static final void beginTransactionWithListenerNonExclusive$lambda$3(androidx.room.QueryInterceptorDatabase)
    {
        androidx.room.QueryInterceptorDatabase r0;
        androidx.room.RoomDatabase$QueryCallback $r1;
        java.util.List $r2;

        r0 := @parameter0: androidx.room.QueryInterceptorDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        $r1 = r0.<androidx.room.QueryInterceptorDatabase: androidx.room.RoomDatabase$QueryCallback queryCallback>;

        $r2 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        interfaceinvoke $r1.<androidx.room.RoomDatabase$QueryCallback: void onQuery(java.lang.String,java.util.List)>("BEGIN DEFERRED TRANSACTION", $r2);

        return;
    }

    private static final void endTransaction$lambda$4(androidx.room.QueryInterceptorDatabase)
    {
        androidx.room.QueryInterceptorDatabase r0;
        androidx.room.RoomDatabase$QueryCallback $r1;
        java.util.List $r2;

        r0 := @parameter0: androidx.room.QueryInterceptorDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        $r1 = r0.<androidx.room.QueryInterceptorDatabase: androidx.room.RoomDatabase$QueryCallback queryCallback>;

        $r2 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        interfaceinvoke $r1.<androidx.room.RoomDatabase$QueryCallback: void onQuery(java.lang.String,java.util.List)>("END TRANSACTION", $r2);

        return;
    }

    private static final void setTransactionSuccessful$lambda$5(androidx.room.QueryInterceptorDatabase)
    {
        androidx.room.QueryInterceptorDatabase r0;
        androidx.room.RoomDatabase$QueryCallback $r1;
        java.util.List $r2;

        r0 := @parameter0: androidx.room.QueryInterceptorDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        $r1 = r0.<androidx.room.QueryInterceptorDatabase: androidx.room.RoomDatabase$QueryCallback queryCallback>;

        $r2 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        interfaceinvoke $r1.<androidx.room.RoomDatabase$QueryCallback: void onQuery(java.lang.String,java.util.List)>("TRANSACTION SUCCESSFUL", $r2);

        return;
    }

    private static final void query$lambda$6(androidx.room.QueryInterceptorDatabase, java.lang.String)
    {
        androidx.room.QueryInterceptorDatabase r0;
        java.lang.String $r1;
        androidx.room.RoomDatabase$QueryCallback $r2;
        java.util.List $r3;

        r0 := @parameter0: androidx.room.QueryInterceptorDatabase;

        $r1 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$query");

        $r2 = r0.<androidx.room.QueryInterceptorDatabase: androidx.room.RoomDatabase$QueryCallback queryCallback>;

        $r3 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        interfaceinvoke $r2.<androidx.room.RoomDatabase$QueryCallback: void onQuery(java.lang.String,java.util.List)>($r1, $r3);

        return;
    }

    private static final void query$lambda$7(androidx.room.QueryInterceptorDatabase, java.lang.String, java.lang.Object[])
    {
        androidx.room.QueryInterceptorDatabase r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;
        androidx.room.RoomDatabase$QueryCallback $r3;
        java.util.List $r4;

        r0 := @parameter0: androidx.room.QueryInterceptorDatabase;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$query");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "$bindArgs");

        $r3 = r0.<androidx.room.QueryInterceptorDatabase: androidx.room.RoomDatabase$QueryCallback queryCallback>;

        $r4 = staticinvoke <kotlin.collections.ArraysKt: java.util.List toList(java.lang.Object[])>($r2);

        interfaceinvoke $r3.<androidx.room.RoomDatabase$QueryCallback: void onQuery(java.lang.String,java.util.List)>($r1, $r4);

        return;
    }

    private static final void query$lambda$8(androidx.room.QueryInterceptorDatabase, androidx.sqlite.db.SupportSQLiteQuery, androidx.room.QueryInterceptorProgram)
    {
        androidx.room.QueryInterceptorDatabase r0;
        androidx.sqlite.db.SupportSQLiteQuery $r1;
        androidx.room.QueryInterceptorProgram $r2;
        androidx.room.RoomDatabase$QueryCallback $r3;
        java.lang.String $r4;
        java.util.List $r5;

        r0 := @parameter0: androidx.room.QueryInterceptorDatabase;

        $r1 := @parameter1: androidx.sqlite.db.SupportSQLiteQuery;

        $r2 := @parameter2: androidx.room.QueryInterceptorProgram;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$query");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "$queryInterceptorProgram");

        $r3 = r0.<androidx.room.QueryInterceptorDatabase: androidx.room.RoomDatabase$QueryCallback queryCallback>;

        $r4 = interfaceinvoke $r1.<androidx.sqlite.db.SupportSQLiteQuery: java.lang.String getSql()>();

        $r5 = virtualinvoke $r2.<androidx.room.QueryInterceptorProgram: java.util.List getBindArgsCache$room_runtime_release()>();

        interfaceinvoke $r3.<androidx.room.RoomDatabase$QueryCallback: void onQuery(java.lang.String,java.util.List)>($r4, $r5);

        return;
    }

    private static final void query$lambda$9(androidx.room.QueryInterceptorDatabase, androidx.sqlite.db.SupportSQLiteQuery, androidx.room.QueryInterceptorProgram)
    {
        androidx.room.QueryInterceptorDatabase r0;
        androidx.sqlite.db.SupportSQLiteQuery $r1;
        androidx.room.QueryInterceptorProgram $r2;
        androidx.room.RoomDatabase$QueryCallback $r3;
        java.lang.String $r4;
        java.util.List $r5;

        r0 := @parameter0: androidx.room.QueryInterceptorDatabase;

        $r1 := @parameter1: androidx.sqlite.db.SupportSQLiteQuery;

        $r2 := @parameter2: androidx.room.QueryInterceptorProgram;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$query");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "$queryInterceptorProgram");

        $r3 = r0.<androidx.room.QueryInterceptorDatabase: androidx.room.RoomDatabase$QueryCallback queryCallback>;

        $r4 = interfaceinvoke $r1.<androidx.sqlite.db.SupportSQLiteQuery: java.lang.String getSql()>();

        $r5 = virtualinvoke $r2.<androidx.room.QueryInterceptorProgram: java.util.List getBindArgsCache$room_runtime_release()>();

        interfaceinvoke $r3.<androidx.room.RoomDatabase$QueryCallback: void onQuery(java.lang.String,java.util.List)>($r4, $r5);

        return;
    }

    private static final void execSQL$lambda$10(androidx.room.QueryInterceptorDatabase, java.lang.String)
    {
        androidx.room.QueryInterceptorDatabase r0;
        java.lang.String $r1;
        androidx.room.RoomDatabase$QueryCallback $r2;
        java.util.List $r3;

        r0 := @parameter0: androidx.room.QueryInterceptorDatabase;

        $r1 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$sql");

        $r2 = r0.<androidx.room.QueryInterceptorDatabase: androidx.room.RoomDatabase$QueryCallback queryCallback>;

        $r3 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        interfaceinvoke $r2.<androidx.room.RoomDatabase$QueryCallback: void onQuery(java.lang.String,java.util.List)>($r1, $r3);

        return;
    }

    private static final void execSQL$lambda$11(androidx.room.QueryInterceptorDatabase, java.lang.String, java.util.List)
    {
        androidx.room.QueryInterceptorDatabase r0;
        java.lang.String $r1;
        java.util.List $r2;
        androidx.room.RoomDatabase$QueryCallback $r3;

        r0 := @parameter0: androidx.room.QueryInterceptorDatabase;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.util.List;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$sql");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "$inputArguments");

        $r3 = r0.<androidx.room.QueryInterceptorDatabase: androidx.room.RoomDatabase$QueryCallback queryCallback>;

        interfaceinvoke $r3.<androidx.room.RoomDatabase$QueryCallback: void onQuery(java.lang.String,java.util.List)>($r1, $r2);

        return;
    }

