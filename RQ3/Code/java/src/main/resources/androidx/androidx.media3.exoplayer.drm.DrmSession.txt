androidx.media3.exoplayer.drm.DrmSession
<androidx.media3.exoplayer.drm.DrmSession: int STATE_RELEASED>
<androidx.media3.exoplayer.drm.DrmSession: int STATE_ERROR>
<androidx.media3.exoplayer.drm.DrmSession: int STATE_OPENING>
<androidx.media3.exoplayer.drm.DrmSession: int STATE_OPENED>
<androidx.media3.exoplayer.drm.DrmSession: int STATE_OPENED_WITH_KEYS>
    public static void replaceSession(androidx.media3.exoplayer.drm.DrmSession, androidx.media3.exoplayer.drm.DrmSession)
    {
        androidx.media3.exoplayer.drm.DrmSession r0, r1;

        r0 := @parameter0: androidx.media3.exoplayer.drm.DrmSession;

        r1 := @parameter1: androidx.media3.exoplayer.drm.DrmSession;

        if r0 != r1 goto label1;

        return;

     label1:
        if r1 == null goto label2;

        interfaceinvoke r1.<androidx.media3.exoplayer.drm.DrmSession: void acquire(androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher)>(null);

     label2:
        if r0 == null goto label3;

        interfaceinvoke r0.<androidx.media3.exoplayer.drm.DrmSession: void release(androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher)>(null);

     label3:
        return;
    }

<androidx.media3.exoplayer.drm.DrmSession: int getState()>
    public boolean playClearSamplesWithoutKeys()
    {
        androidx.media3.exoplayer.drm.DrmSession r0;

        r0 := @this: androidx.media3.exoplayer.drm.DrmSession;

        return 0;
    }

<androidx.media3.exoplayer.drm.DrmSession: androidx.media3.exoplayer.drm.DrmSession$DrmSessionException getError()>
<androidx.media3.exoplayer.drm.DrmSession: java.util.UUID getSchemeUuid()>
<androidx.media3.exoplayer.drm.DrmSession: androidx.media3.decoder.CryptoConfig getCryptoConfig()>
<androidx.media3.exoplayer.drm.DrmSession: java.util.Map queryKeyStatus()>
<androidx.media3.exoplayer.drm.DrmSession: byte[] getOfflineLicenseKeySetId()>
<androidx.media3.exoplayer.drm.DrmSession: boolean requiresSecureDecoder(java.lang.String)>
<androidx.media3.exoplayer.drm.DrmSession: void acquire(androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher)>
<androidx.media3.exoplayer.drm.DrmSession: void release(androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher)>
androidx.media3.exoplayer.drm.DrmSession$DrmSessionException
<androidx.media3.exoplayer.drm.DrmSession$DrmSessionException: int errorCode>
    public void <init>(java.lang.Throwable, int)
    {
        androidx.media3.exoplayer.drm.DrmSession$DrmSessionException r0;
        java.lang.Throwable r1;
        int i0;

        r0 := @this: androidx.media3.exoplayer.drm.DrmSession$DrmSessionException;

        r1 := @parameter0: java.lang.Throwable;

        i0 := @parameter1: int;

        specialinvoke r0.<java.io.IOException: void <init>(java.lang.Throwable)>(r1);

        r0.<androidx.media3.exoplayer.drm.DrmSession$DrmSessionException: int errorCode> = i0;

        return;
    }

androidx.media3.exoplayer.drm.DrmSession$State
