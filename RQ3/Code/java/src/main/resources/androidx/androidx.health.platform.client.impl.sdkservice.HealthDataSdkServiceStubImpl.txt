androidx.health.platform.client.impl.sdkservice.HealthDataSdkServiceStubImpl
<androidx.health.platform.client.impl.sdkservice.HealthDataSdkServiceStubImpl: java.lang.String TAG>
<androidx.health.platform.client.impl.sdkservice.HealthDataSdkServiceStubImpl: java.lang.String ALLOWED_PACKAGE_NAME>
<androidx.health.platform.client.impl.sdkservice.HealthDataSdkServiceStubImpl: android.content.Context mContext>
<androidx.health.platform.client.impl.sdkservice.HealthDataSdkServiceStubImpl: java.util.concurrent.Executor mExecutor>
    void <init>(android.content.Context, java.util.concurrent.Executor)
    {
        androidx.health.platform.client.impl.sdkservice.HealthDataSdkServiceStubImpl r0;
        android.content.Context r1;
        java.util.concurrent.Executor r2;

        r0 := @this: androidx.health.platform.client.impl.sdkservice.HealthDataSdkServiceStubImpl;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.util.concurrent.Executor;

        specialinvoke r0.<androidx.health.platform.client.impl.sdkservice.IHealthDataSdkService$Stub: void <init>()>();

        r0.<androidx.health.platform.client.impl.sdkservice.HealthDataSdkServiceStubImpl: android.content.Context mContext> = r1;

        r0.<androidx.health.platform.client.impl.sdkservice.HealthDataSdkServiceStubImpl: java.util.concurrent.Executor mExecutor> = r2;

        return;
    }

    public void setPermissionToken(java.lang.String, java.lang.String, androidx.health.platform.client.impl.sdkservice.ISetPermissionTokenCallback)
    {
        androidx.health.platform.client.impl.sdkservice.HealthDataSdkServiceStubImpl r0;
        java.lang.String r1, r2;
        androidx.health.platform.client.impl.sdkservice.ISetPermissionTokenCallback r3;
        java.util.concurrent.Executor $r4;
        java.lang.Runnable $r5;

        r0 := @this: androidx.health.platform.client.impl.sdkservice.HealthDataSdkServiceStubImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: androidx.health.platform.client.impl.sdkservice.ISetPermissionTokenCallback;

        specialinvoke r0.<androidx.health.platform.client.impl.sdkservice.HealthDataSdkServiceStubImpl: void verifyPackageName(java.lang.String)>(r1);

        $r4 = r0.<androidx.health.platform.client.impl.sdkservice.HealthDataSdkServiceStubImpl: java.util.concurrent.Executor mExecutor>;

        $r5 = dynamicinvoke "run" <java.lang.Runnable (androidx.health.platform.client.impl.sdkservice.HealthDataSdkServiceStubImpl,java.lang.String,androidx.health.platform.client.impl.sdkservice.ISetPermissionTokenCallback)>(r0, r2, r3) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.health.platform.client.impl.sdkservice.HealthDataSdkServiceStubImpl: void lambda$setPermissionToken$0(java.lang.String,androidx.health.platform.client.impl.sdkservice.ISetPermissionTokenCallback)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r4.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r5);

        return;
    }

    public void getPermissionToken(java.lang.String, androidx.health.platform.client.impl.sdkservice.IGetPermissionTokenCallback)
    {
        androidx.health.platform.client.impl.sdkservice.HealthDataSdkServiceStubImpl r0;
        java.lang.String r1;
        androidx.health.platform.client.impl.sdkservice.IGetPermissionTokenCallback r2;
        java.util.concurrent.Executor $r3;
        java.lang.Runnable $r4;

        r0 := @this: androidx.health.platform.client.impl.sdkservice.HealthDataSdkServiceStubImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.health.platform.client.impl.sdkservice.IGetPermissionTokenCallback;

        specialinvoke r0.<androidx.health.platform.client.impl.sdkservice.HealthDataSdkServiceStubImpl: void verifyPackageName(java.lang.String)>(r1);

        $r3 = r0.<androidx.health.platform.client.impl.sdkservice.HealthDataSdkServiceStubImpl: java.util.concurrent.Executor mExecutor>;

        $r4 = dynamicinvoke "run" <java.lang.Runnable (androidx.health.platform.client.impl.sdkservice.HealthDataSdkServiceStubImpl,androidx.health.platform.client.impl.sdkservice.IGetPermissionTokenCallback)>(r0, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.health.platform.client.impl.sdkservice.HealthDataSdkServiceStubImpl: void lambda$getPermissionToken$1(androidx.health.platform.client.impl.sdkservice.IGetPermissionTokenCallback)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r3.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r4);

        return;
    }

    public void getIsInForeground(java.lang.String, androidx.health.platform.client.impl.sdkservice.IGetIsInForegroundCallback)
    {
        androidx.health.platform.client.impl.sdkservice.HealthDataSdkServiceStubImpl r0;
        java.lang.String r1;
        androidx.health.platform.client.impl.sdkservice.IGetIsInForegroundCallback r2;
        java.util.concurrent.Executor $r3;
        java.lang.Runnable $r4;

        r0 := @this: androidx.health.platform.client.impl.sdkservice.HealthDataSdkServiceStubImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.health.platform.client.impl.sdkservice.IGetIsInForegroundCallback;

        specialinvoke r0.<androidx.health.platform.client.impl.sdkservice.HealthDataSdkServiceStubImpl: void verifyPackageName(java.lang.String)>(r1);

        $r3 = r0.<androidx.health.platform.client.impl.sdkservice.HealthDataSdkServiceStubImpl: java.util.concurrent.Executor mExecutor>;

        $r4 = dynamicinvoke "run" <java.lang.Runnable (androidx.health.platform.client.impl.sdkservice.IGetIsInForegroundCallback)>(r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.health.platform.client.impl.sdkservice.HealthDataSdkServiceStubImpl: void lambda$getIsInForeground$2(androidx.health.platform.client.impl.sdkservice.IGetIsInForegroundCallback)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r3.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r4);

        return;
    }

    private void verifyPackageName(java.lang.String)
    {
        androidx.health.platform.client.impl.sdkservice.HealthDataSdkServiceStubImpl r0;
        java.lang.String r1, $r8;
        java.lang.String[] r2;
        android.content.Context $r3;
        android.content.pm.PackageManager $r4;
        int $i0;
        java.util.stream.Stream $r5;
        java.util.function.Predicate $r7;
        boolean $z0, $z1;
        java.lang.SecurityException $r9, $r10;

        r0 := @this: androidx.health.platform.client.impl.sdkservice.HealthDataSdkServiceStubImpl;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<androidx.health.platform.client.impl.sdkservice.HealthDataSdkServiceStubImpl: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        r2 = virtualinvoke $r4.<android.content.pm.PackageManager: java.lang.String[] getPackagesForUid(int)>($i0);

        if r1 == null goto label1;

        if r2 == null goto label1;

        $r5 = staticinvoke <java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>(r2);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r7 = dynamicinvoke "test" <java.util.function.Predicate (java.lang.String)>(r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: boolean __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_VIRTUAL" <java.lang.String: boolean equals(java.lang.Object)>, methodtype: boolean __METHODTYPE__(java.lang.String));

        $z0 = interfaceinvoke $r5.<java.util.stream.Stream: boolean noneMatch(java.util.function.Predicate)>($r7);

        if $z0 == 0 goto label2;

     label1:
        $r10 = new java.lang.SecurityException;

        specialinvoke $r10.<java.lang.SecurityException: void <init>(java.lang.String)>("Invalid package name!");

        throw $r10;

     label2:
        $r8 = "com.google.android.apps.healthdata";

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 != 0 goto label3;

        $r9 = new java.lang.SecurityException;

        specialinvoke $r9.<java.lang.SecurityException: void <init>(java.lang.String)>("Not allowed!");

        throw $r9;

     label3:
        return;
    }

    private static void lambda$getIsInForeground$2(androidx.health.platform.client.impl.sdkservice.IGetIsInForegroundCallback)
    {
        androidx.health.platform.client.impl.sdkservice.IGetIsInForegroundCallback r0;
        java.lang.Throwable r1, $r2;
        boolean $z0;
        java.lang.Object[] $r3;
        java.lang.String $r4, $r5, $r6;

        r0 := @parameter0: androidx.health.platform.client.impl.sdkservice.IGetIsInForegroundCallback;

     label1:
        $z0 = staticinvoke <androidx.health.platform.client.impl.permission.foregroundstate.ForegroundStateChecker: boolean isInForeground()>();

        interfaceinvoke r0.<androidx.health.platform.client.impl.sdkservice.IGetIsInForegroundCallback: void onSuccess(boolean)>($z0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        $r4 = <androidx.health.platform.client.impl.sdkservice.HealthDataSdkServiceStubImpl: java.lang.String TAG>;

        $r3 = newarray (java.lang.Object)[1];

        $r5 = virtualinvoke r1.<android.os.RemoteException: java.lang.String getMessage()>();

        $r3[0] = $r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("HealthDataSdkService#getIsInForeground failed: %s", $r3);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r4, $r6);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void lambda$getPermissionToken$1(androidx.health.platform.client.impl.sdkservice.IGetPermissionTokenCallback)
    {
        androidx.health.platform.client.impl.sdkservice.HealthDataSdkServiceStubImpl r0;
        androidx.health.platform.client.impl.sdkservice.IGetPermissionTokenCallback r1;
        android.content.Context $r2;
        java.lang.Throwable $r4, r11;
        java.lang.Object[] $r5;
        java.lang.String $r6, $r7, $r8, r9, $r10;

        r0 := @this: androidx.health.platform.client.impl.sdkservice.HealthDataSdkServiceStubImpl;

        r1 := @parameter0: androidx.health.platform.client.impl.sdkservice.IGetPermissionTokenCallback;

     label1:
        $r2 = r0.<androidx.health.platform.client.impl.sdkservice.HealthDataSdkServiceStubImpl: android.content.Context mContext>;

        r9 = staticinvoke <androidx.health.platform.client.impl.permission.token.PermissionTokenManager: java.lang.String getCurrentToken(android.content.Context)>($r2);

        if r9 != null goto label2;

        $r10 = "";

        goto label3;

     label2:
        $r10 = r9;

     label3:
        interfaceinvoke r1.<androidx.health.platform.client.impl.sdkservice.IGetPermissionTokenCallback: void onSuccess(java.lang.String)>($r10);

     label4:
        goto label6;

     label5:
        $r4 := @caughtexception;

        r11 = $r4;

        $r6 = <androidx.health.platform.client.impl.sdkservice.HealthDataSdkServiceStubImpl: java.lang.String TAG>;

        $r5 = newarray (java.lang.Object)[1];

        $r7 = virtualinvoke r11.<android.os.RemoteException: java.lang.String getMessage()>();

        $r5[0] = $r7;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("HealthDataSdkService#getPermissionToken failed: %s", $r5);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r6, $r8);

     label6:
        return;

        catch android.os.RemoteException from label1 to label4 with label5;
    }

    private void lambda$setPermissionToken$0(java.lang.String, androidx.health.platform.client.impl.sdkservice.ISetPermissionTokenCallback)
    {
        androidx.health.platform.client.impl.sdkservice.HealthDataSdkServiceStubImpl r0;
        java.lang.String r1, $r7, $r8, $r9;
        androidx.health.platform.client.impl.sdkservice.ISetPermissionTokenCallback r2;
        java.lang.Throwable r3, $r5;
        android.content.Context $r4;
        java.lang.Object[] $r6;

        r0 := @this: androidx.health.platform.client.impl.sdkservice.HealthDataSdkServiceStubImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.health.platform.client.impl.sdkservice.ISetPermissionTokenCallback;

        $r4 = r0.<androidx.health.platform.client.impl.sdkservice.HealthDataSdkServiceStubImpl: android.content.Context mContext>;

        staticinvoke <androidx.health.platform.client.impl.permission.token.PermissionTokenManager: void setCurrentToken(android.content.Context,java.lang.String)>($r4, r1);

     label1:
        interfaceinvoke r2.<androidx.health.platform.client.impl.sdkservice.ISetPermissionTokenCallback: void onSuccess()>();

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        $r7 = <androidx.health.platform.client.impl.sdkservice.HealthDataSdkServiceStubImpl: java.lang.String TAG>;

        $r6 = newarray (java.lang.Object)[1];

        $r8 = virtualinvoke r3.<android.os.RemoteException: java.lang.String getMessage()>();

        $r6[0] = $r8;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("HealthDataSdkService#setPermissionToken failed: %s", $r6);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r7, $r9);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        $r0 = class "Landroidx/health/platform/client/impl/sdkservice/HealthDataSdkServiceStubImpl;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <androidx.health.platform.client.impl.sdkservice.HealthDataSdkServiceStubImpl: java.lang.String TAG> = $r1;

        return;
    }

