androidx.window.testing.layout.WindowLayoutInfoPublisherRule
<androidx.window.testing.layout.WindowLayoutInfoPublisherRule: kotlinx.coroutines.flow.MutableSharedFlow flow>
<androidx.window.testing.layout.WindowLayoutInfoPublisherRule: androidx.window.testing.layout.PublishWindowInfoTrackerDecorator overrideServices>
    public void <init>()
    {
        androidx.window.testing.layout.WindowLayoutInfoPublisherRule r0;
        kotlinx.coroutines.channels.BufferOverflow $r1;
        kotlinx.coroutines.flow.MutableSharedFlow $r2, $r4;
        androidx.window.testing.layout.PublishWindowInfoTrackerDecorator $r3;
        kotlinx.coroutines.flow.Flow $r5;

        r0 := @this: androidx.window.testing.layout.WindowLayoutInfoPublisherRule;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <kotlinx.coroutines.channels.BufferOverflow: kotlinx.coroutines.channels.BufferOverflow DROP_OLDEST>;

        $r2 = staticinvoke <kotlinx.coroutines.flow.SharedFlowKt: kotlinx.coroutines.flow.MutableSharedFlow MutableSharedFlow$default(int,int,kotlinx.coroutines.channels.BufferOverflow,int,java.lang.Object)>(0, 1, $r1, 1, null);

        r0.<androidx.window.testing.layout.WindowLayoutInfoPublisherRule: kotlinx.coroutines.flow.MutableSharedFlow flow> = $r2;

        $r3 = new androidx.window.testing.layout.PublishWindowInfoTrackerDecorator;

        $r4 = r0.<androidx.window.testing.layout.WindowLayoutInfoPublisherRule: kotlinx.coroutines.flow.MutableSharedFlow flow>;

        $r5 = (kotlinx.coroutines.flow.Flow) $r4;

        specialinvoke $r3.<androidx.window.testing.layout.PublishWindowInfoTrackerDecorator: void <init>(kotlinx.coroutines.flow.Flow)>($r5);

        r0.<androidx.window.testing.layout.WindowLayoutInfoPublisherRule: androidx.window.testing.layout.PublishWindowInfoTrackerDecorator overrideServices> = $r3;

        return;
    }

    public org.junit.runners.model.Statement apply(org.junit.runners.model.Statement, org.junit.runner.Description)
    {
        androidx.window.testing.layout.WindowLayoutInfoPublisherRule r0;
        org.junit.runners.model.Statement r1, $r4;
        org.junit.runner.Description r2;
        androidx.window.testing.layout.WindowLayoutInfoPublisherRule$apply$1 $r3;

        r0 := @this: androidx.window.testing.layout.WindowLayoutInfoPublisherRule;

        r1 := @parameter0: org.junit.runners.model.Statement;

        r2 := @parameter1: org.junit.runner.Description;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "base");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "description");

        $r3 = new androidx.window.testing.layout.WindowLayoutInfoPublisherRule$apply$1;

        specialinvoke $r3.<androidx.window.testing.layout.WindowLayoutInfoPublisherRule$apply$1: void <init>(androidx.window.testing.layout.WindowLayoutInfoPublisherRule,org.junit.runners.model.Statement)>(r0, r1);

        $r4 = (org.junit.runners.model.Statement) $r3;

        return $r4;
    }

    public final void overrideWindowLayoutInfo(androidx.window.layout.WindowLayoutInfo)
    {
        androidx.window.testing.layout.WindowLayoutInfoPublisherRule r0;
        androidx.window.layout.WindowLayoutInfo r1;
        kotlinx.coroutines.flow.MutableSharedFlow $r2;

        r0 := @this: androidx.window.testing.layout.WindowLayoutInfoPublisherRule;

        r1 := @parameter0: androidx.window.layout.WindowLayoutInfo;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "info");

        $r2 = r0.<androidx.window.testing.layout.WindowLayoutInfoPublisherRule: kotlinx.coroutines.flow.MutableSharedFlow flow>;

        interfaceinvoke $r2.<kotlinx.coroutines.flow.MutableSharedFlow: boolean tryEmit(java.lang.Object)>(r1);

        return;
    }

    public static final androidx.window.testing.layout.PublishWindowInfoTrackerDecorator access$getOverrideServices$p(androidx.window.testing.layout.WindowLayoutInfoPublisherRule)
    {
        androidx.window.testing.layout.WindowLayoutInfoPublisherRule $r0;
        androidx.window.testing.layout.PublishWindowInfoTrackerDecorator $r1;

        $r0 := @parameter0: androidx.window.testing.layout.WindowLayoutInfoPublisherRule;

        $r1 = $r0.<androidx.window.testing.layout.WindowLayoutInfoPublisherRule: androidx.window.testing.layout.PublishWindowInfoTrackerDecorator overrideServices>;

        return $r1;
    }

androidx.window.testing.layout.WindowLayoutInfoPublisherRule$apply$1
<androidx.window.testing.layout.WindowLayoutInfoPublisherRule$apply$1: androidx.window.testing.layout.WindowLayoutInfoPublisherRule this$0>
<androidx.window.testing.layout.WindowLayoutInfoPublisherRule$apply$1: org.junit.runners.model.Statement $base>
    void <init>(androidx.window.testing.layout.WindowLayoutInfoPublisherRule, org.junit.runners.model.Statement)
    {
        androidx.window.testing.layout.WindowLayoutInfoPublisherRule$apply$1 r0;
        androidx.window.testing.layout.WindowLayoutInfoPublisherRule $r1;
        org.junit.runners.model.Statement $r2;

        r0 := @this: androidx.window.testing.layout.WindowLayoutInfoPublisherRule$apply$1;

        $r1 := @parameter0: androidx.window.testing.layout.WindowLayoutInfoPublisherRule;

        $r2 := @parameter1: org.junit.runners.model.Statement;

        r0.<androidx.window.testing.layout.WindowLayoutInfoPublisherRule$apply$1: androidx.window.testing.layout.WindowLayoutInfoPublisherRule this$0> = $r1;

        r0.<androidx.window.testing.layout.WindowLayoutInfoPublisherRule$apply$1: org.junit.runners.model.Statement $base> = $r2;

        specialinvoke r0.<org.junit.runners.model.Statement: void <init>()>();

        return;
    }

    public void evaluate()
    {
        androidx.window.testing.layout.WindowLayoutInfoPublisherRule$apply$1 r0;
        java.lang.Throwable r1, $r8;
        androidx.window.testing.layout.WindowLayoutInfoPublisherRule $r2;
        androidx.window.layout.WindowInfoTracker$Companion $r3, $r7, $r9;
        androidx.window.testing.layout.PublishWindowInfoTrackerDecorator $r4;
        androidx.window.layout.WindowInfoTrackerDecorator $r5;
        org.junit.runners.model.Statement $r6;

        r0 := @this: androidx.window.testing.layout.WindowLayoutInfoPublisherRule$apply$1;

        $r3 = <androidx.window.layout.WindowInfoTracker: androidx.window.layout.WindowInfoTracker$Companion Companion>;

        $r2 = r0.<androidx.window.testing.layout.WindowLayoutInfoPublisherRule$apply$1: androidx.window.testing.layout.WindowLayoutInfoPublisherRule this$0>;

        $r4 = staticinvoke <androidx.window.testing.layout.WindowLayoutInfoPublisherRule: androidx.window.testing.layout.PublishWindowInfoTrackerDecorator access$getOverrideServices$p(androidx.window.testing.layout.WindowLayoutInfoPublisherRule)>($r2);

        $r5 = (androidx.window.layout.WindowInfoTrackerDecorator) $r4;

        virtualinvoke $r3.<androidx.window.layout.WindowInfoTracker$Companion: void overrideDecorator(androidx.window.layout.WindowInfoTrackerDecorator)>($r5);

     label1:
        $r6 = r0.<androidx.window.testing.layout.WindowLayoutInfoPublisherRule$apply$1: org.junit.runners.model.Statement $base>;

        virtualinvoke $r6.<org.junit.runners.model.Statement: void evaluate()>();

     label2:
        $r7 = <androidx.window.layout.WindowInfoTracker: androidx.window.layout.WindowInfoTracker$Companion Companion>;

        virtualinvoke $r7.<androidx.window.layout.WindowInfoTracker$Companion: void reset()>();

        goto label5;

     label3:
        $r8 := @caughtexception;

        r1 = $r8;

     label4:
        $r9 = <androidx.window.layout.WindowInfoTracker: androidx.window.layout.WindowInfoTracker$Companion Companion>;

        virtualinvoke $r9.<androidx.window.layout.WindowInfoTracker$Companion: void reset()>();

        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

