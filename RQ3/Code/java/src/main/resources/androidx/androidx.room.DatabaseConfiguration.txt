androidx.room.DatabaseConfiguration
<androidx.room.DatabaseConfiguration: android.content.Context context>
<androidx.room.DatabaseConfiguration: java.lang.String name>
<androidx.room.DatabaseConfiguration: androidx.sqlite.db.SupportSQLiteOpenHelper$Factory sqliteOpenHelperFactory>
<androidx.room.DatabaseConfiguration: androidx.room.RoomDatabase$MigrationContainer migrationContainer>
<androidx.room.DatabaseConfiguration: java.util.List callbacks>
<androidx.room.DatabaseConfiguration: boolean allowMainThreadQueries>
<androidx.room.DatabaseConfiguration: androidx.room.RoomDatabase$JournalMode journalMode>
<androidx.room.DatabaseConfiguration: java.util.concurrent.Executor queryExecutor>
<androidx.room.DatabaseConfiguration: java.util.concurrent.Executor transactionExecutor>
<androidx.room.DatabaseConfiguration: android.content.Intent multiInstanceInvalidationServiceIntent>
<androidx.room.DatabaseConfiguration: boolean requireMigration>
<androidx.room.DatabaseConfiguration: boolean allowDestructiveMigrationOnDowngrade>
<androidx.room.DatabaseConfiguration: java.util.Set migrationNotRequiredFrom>
<androidx.room.DatabaseConfiguration: java.lang.String copyFromAssetPath>
<androidx.room.DatabaseConfiguration: java.io.File copyFromFile>
<androidx.room.DatabaseConfiguration: java.util.concurrent.Callable copyFromInputStream>
<androidx.room.DatabaseConfiguration: androidx.room.RoomDatabase$PrepackagedDatabaseCallback prepackagedDatabaseCallback>
<androidx.room.DatabaseConfiguration: java.util.List typeConverters>
<androidx.room.DatabaseConfiguration: java.util.List autoMigrationSpecs>
<androidx.room.DatabaseConfiguration: boolean multiInstanceInvalidation>
    public void <init>(android.content.Context, java.lang.String, androidx.sqlite.db.SupportSQLiteOpenHelper$Factory, androidx.room.RoomDatabase$MigrationContainer, java.util.List, boolean, androidx.room.RoomDatabase$JournalMode, java.util.concurrent.Executor, java.util.concurrent.Executor, android.content.Intent, boolean, boolean, java.util.Set, java.lang.String, java.io.File, java.util.concurrent.Callable, androidx.room.RoomDatabase$PrepackagedDatabaseCallback, java.util.List, java.util.List)
    {
        androidx.room.DatabaseConfiguration r0;
        android.content.Context r1;
        java.lang.String r2, r11;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Factory r3;
        androidx.room.RoomDatabase$MigrationContainer r4;
        java.util.List r5, r15, r16;
        boolean z0, z1, z2, $z3;
        androidx.room.RoomDatabase$JournalMode r6;
        java.util.concurrent.Executor r7, r8;
        android.content.Intent r9, $r17;
        java.util.Set r10;
        java.io.File r12;
        java.util.concurrent.Callable r13;
        androidx.room.RoomDatabase$PrepackagedDatabaseCallback r14;

        r0 := @this: androidx.room.DatabaseConfiguration;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: androidx.sqlite.db.SupportSQLiteOpenHelper$Factory;

        r4 := @parameter3: androidx.room.RoomDatabase$MigrationContainer;

        r5 := @parameter4: java.util.List;

        z0 := @parameter5: boolean;

        r6 := @parameter6: androidx.room.RoomDatabase$JournalMode;

        r7 := @parameter7: java.util.concurrent.Executor;

        r8 := @parameter8: java.util.concurrent.Executor;

        r9 := @parameter9: android.content.Intent;

        z1 := @parameter10: boolean;

        z2 := @parameter11: boolean;

        r10 := @parameter12: java.util.Set;

        r11 := @parameter13: java.lang.String;

        r12 := @parameter14: java.io.File;

        r13 := @parameter15: java.util.concurrent.Callable;

        r14 := @parameter16: androidx.room.RoomDatabase$PrepackagedDatabaseCallback;

        r15 := @parameter17: java.util.List;

        r16 := @parameter18: java.util.List;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "context");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "sqliteOpenHelperFactory");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "migrationContainer");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r6, "journalMode");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r7, "queryExecutor");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r8, "transactionExecutor");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r15, "typeConverters");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r16, "autoMigrationSpecs");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.room.DatabaseConfiguration: android.content.Context context> = r1;

        r0.<androidx.room.DatabaseConfiguration: java.lang.String name> = r2;

        r0.<androidx.room.DatabaseConfiguration: androidx.sqlite.db.SupportSQLiteOpenHelper$Factory sqliteOpenHelperFactory> = r3;

        r0.<androidx.room.DatabaseConfiguration: androidx.room.RoomDatabase$MigrationContainer migrationContainer> = r4;

        r0.<androidx.room.DatabaseConfiguration: java.util.List callbacks> = r5;

        r0.<androidx.room.DatabaseConfiguration: boolean allowMainThreadQueries> = z0;

        r0.<androidx.room.DatabaseConfiguration: androidx.room.RoomDatabase$JournalMode journalMode> = r6;

        r0.<androidx.room.DatabaseConfiguration: java.util.concurrent.Executor queryExecutor> = r7;

        r0.<androidx.room.DatabaseConfiguration: java.util.concurrent.Executor transactionExecutor> = r8;

        r0.<androidx.room.DatabaseConfiguration: android.content.Intent multiInstanceInvalidationServiceIntent> = r9;

        r0.<androidx.room.DatabaseConfiguration: boolean requireMigration> = z1;

        r0.<androidx.room.DatabaseConfiguration: boolean allowDestructiveMigrationOnDowngrade> = z2;

        r0.<androidx.room.DatabaseConfiguration: java.util.Set migrationNotRequiredFrom> = r10;

        r0.<androidx.room.DatabaseConfiguration: java.lang.String copyFromAssetPath> = r11;

        r0.<androidx.room.DatabaseConfiguration: java.io.File copyFromFile> = r12;

        r0.<androidx.room.DatabaseConfiguration: java.util.concurrent.Callable copyFromInputStream> = r13;

        r0.<androidx.room.DatabaseConfiguration: androidx.room.RoomDatabase$PrepackagedDatabaseCallback prepackagedDatabaseCallback> = r14;

        r0.<androidx.room.DatabaseConfiguration: java.util.List typeConverters> = r15;

        r0.<androidx.room.DatabaseConfiguration: java.util.List autoMigrationSpecs> = r16;

        $r17 = r0.<androidx.room.DatabaseConfiguration: android.content.Intent multiInstanceInvalidationServiceIntent>;

        if $r17 == null goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        r0.<androidx.room.DatabaseConfiguration: boolean multiInstanceInvalidation> = $z3;

        return;
    }

    public void <init>(android.content.Context, java.lang.String, androidx.sqlite.db.SupportSQLiteOpenHelper$Factory, androidx.room.RoomDatabase$MigrationContainer, java.util.List, boolean, androidx.room.RoomDatabase$JournalMode, java.util.concurrent.Executor, boolean, java.util.Set)
    {
        androidx.room.DatabaseConfiguration r0;
        android.content.Context r1;
        java.lang.String r2;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Factory r3;
        androidx.room.RoomDatabase$MigrationContainer r4;
        java.util.List r5, r9, r10;
        boolean z0, z1;
        androidx.room.RoomDatabase$JournalMode r6;
        java.util.concurrent.Executor r7;
        java.util.Set r8;

        r0 := @this: androidx.room.DatabaseConfiguration;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: androidx.sqlite.db.SupportSQLiteOpenHelper$Factory;

        r4 := @parameter3: androidx.room.RoomDatabase$MigrationContainer;

        r5 := @parameter4: java.util.List;

        z0 := @parameter5: boolean;

        r6 := @parameter6: androidx.room.RoomDatabase$JournalMode;

        r7 := @parameter7: java.util.concurrent.Executor;

        z1 := @parameter8: boolean;

        r8 := @parameter9: java.util.Set;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "context");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "sqliteOpenHelperFactory");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "migrationContainer");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r6, "journalMode");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r7, "queryExecutor");

        r9 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        r10 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        specialinvoke r0.<androidx.room.DatabaseConfiguration: void <init>(android.content.Context,java.lang.String,androidx.sqlite.db.SupportSQLiteOpenHelper$Factory,androidx.room.RoomDatabase$MigrationContainer,java.util.List,boolean,androidx.room.RoomDatabase$JournalMode,java.util.concurrent.Executor,java.util.concurrent.Executor,android.content.Intent,boolean,boolean,java.util.Set,java.lang.String,java.io.File,java.util.concurrent.Callable,androidx.room.RoomDatabase$PrepackagedDatabaseCallback,java.util.List,java.util.List)>(r1, r2, r3, r4, r5, z0, r6, r7, r7, null, z1, 0, r8, null, null, null, null, r9, r10);

        return;
    }

    public void <init>(android.content.Context, java.lang.String, androidx.sqlite.db.SupportSQLiteOpenHelper$Factory, androidx.room.RoomDatabase$MigrationContainer, java.util.List, boolean, androidx.room.RoomDatabase$JournalMode, java.util.concurrent.Executor, java.util.concurrent.Executor, boolean, boolean, boolean, java.util.Set)
    {
        androidx.room.DatabaseConfiguration r0;
        android.content.Context r1;
        java.lang.String r2;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Factory r3;
        androidx.room.RoomDatabase$MigrationContainer r4;
        java.util.List r5, r11, r12;
        boolean z0, z1, z2, z3;
        androidx.room.RoomDatabase$JournalMode r6;
        java.util.concurrent.Executor r7, r8;
        java.util.Set r9;
        android.content.Intent r10, $r13;

        r0 := @this: androidx.room.DatabaseConfiguration;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: androidx.sqlite.db.SupportSQLiteOpenHelper$Factory;

        r4 := @parameter3: androidx.room.RoomDatabase$MigrationContainer;

        r5 := @parameter4: java.util.List;

        z0 := @parameter5: boolean;

        r6 := @parameter6: androidx.room.RoomDatabase$JournalMode;

        r7 := @parameter7: java.util.concurrent.Executor;

        r8 := @parameter8: java.util.concurrent.Executor;

        z1 := @parameter9: boolean;

        z2 := @parameter10: boolean;

        z3 := @parameter11: boolean;

        r9 := @parameter12: java.util.Set;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "context");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "sqliteOpenHelperFactory");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "migrationContainer");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r6, "journalMode");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r7, "queryExecutor");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r8, "transactionExecutor");

        if z1 == 0 goto label1;

        $r13 = new android.content.Intent;

        specialinvoke $r13.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>(r1, class "Landroidx/room/MultiInstanceInvalidationService;");

        goto label2;

     label1:
        $r13 = null;

     label2:
        r10 = $r13;

        r11 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        r12 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        specialinvoke r0.<androidx.room.DatabaseConfiguration: void <init>(android.content.Context,java.lang.String,androidx.sqlite.db.SupportSQLiteOpenHelper$Factory,androidx.room.RoomDatabase$MigrationContainer,java.util.List,boolean,androidx.room.RoomDatabase$JournalMode,java.util.concurrent.Executor,java.util.concurrent.Executor,android.content.Intent,boolean,boolean,java.util.Set,java.lang.String,java.io.File,java.util.concurrent.Callable,androidx.room.RoomDatabase$PrepackagedDatabaseCallback,java.util.List,java.util.List)>(r1, r2, r3, r4, r5, z0, r6, r7, r8, r10, z2, z3, r9, null, null, null, null, r11, r12);

        return;
    }

    public void <init>(android.content.Context, java.lang.String, androidx.sqlite.db.SupportSQLiteOpenHelper$Factory, androidx.room.RoomDatabase$MigrationContainer, java.util.List, boolean, androidx.room.RoomDatabase$JournalMode, java.util.concurrent.Executor, java.util.concurrent.Executor, boolean, boolean, boolean, java.util.Set, java.lang.String, java.io.File)
    {
        androidx.room.DatabaseConfiguration r0;
        android.content.Context r1;
        java.lang.String r2, r10;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Factory r3;
        androidx.room.RoomDatabase$MigrationContainer r4;
        java.util.List r5, r13, r14;
        boolean z0, z1, z2, z3;
        androidx.room.RoomDatabase$JournalMode r6;
        java.util.concurrent.Executor r7, r8;
        java.util.Set r9;
        java.io.File r11;
        android.content.Intent r12, $r15;

        r0 := @this: androidx.room.DatabaseConfiguration;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: androidx.sqlite.db.SupportSQLiteOpenHelper$Factory;

        r4 := @parameter3: androidx.room.RoomDatabase$MigrationContainer;

        r5 := @parameter4: java.util.List;

        z0 := @parameter5: boolean;

        r6 := @parameter6: androidx.room.RoomDatabase$JournalMode;

        r7 := @parameter7: java.util.concurrent.Executor;

        r8 := @parameter8: java.util.concurrent.Executor;

        z1 := @parameter9: boolean;

        z2 := @parameter10: boolean;

        z3 := @parameter11: boolean;

        r9 := @parameter12: java.util.Set;

        r10 := @parameter13: java.lang.String;

        r11 := @parameter14: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "context");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "sqliteOpenHelperFactory");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "migrationContainer");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r6, "journalMode");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r7, "queryExecutor");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r8, "transactionExecutor");

        if z1 == 0 goto label1;

        $r15 = new android.content.Intent;

        specialinvoke $r15.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>(r1, class "Landroidx/room/MultiInstanceInvalidationService;");

        goto label2;

     label1:
        $r15 = null;

     label2:
        r12 = $r15;

        r13 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        r14 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        specialinvoke r0.<androidx.room.DatabaseConfiguration: void <init>(android.content.Context,java.lang.String,androidx.sqlite.db.SupportSQLiteOpenHelper$Factory,androidx.room.RoomDatabase$MigrationContainer,java.util.List,boolean,androidx.room.RoomDatabase$JournalMode,java.util.concurrent.Executor,java.util.concurrent.Executor,android.content.Intent,boolean,boolean,java.util.Set,java.lang.String,java.io.File,java.util.concurrent.Callable,androidx.room.RoomDatabase$PrepackagedDatabaseCallback,java.util.List,java.util.List)>(r1, r2, r3, r4, r5, z0, r6, r7, r8, r12, z2, z3, r9, r10, r11, null, null, r13, r14);

        return;
    }

    public void <init>(android.content.Context, java.lang.String, androidx.sqlite.db.SupportSQLiteOpenHelper$Factory, androidx.room.RoomDatabase$MigrationContainer, java.util.List, boolean, androidx.room.RoomDatabase$JournalMode, java.util.concurrent.Executor, java.util.concurrent.Executor, boolean, boolean, boolean, java.util.Set, java.lang.String, java.io.File, java.util.concurrent.Callable)
    {
        androidx.room.DatabaseConfiguration r0;
        android.content.Context r1;
        java.lang.String r2, r10;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Factory r3;
        androidx.room.RoomDatabase$MigrationContainer r4;
        java.util.List r5, r14, r15;
        boolean z0, z1, z2, z3;
        androidx.room.RoomDatabase$JournalMode r6;
        java.util.concurrent.Executor r7, r8;
        java.util.Set r9;
        java.io.File r11;
        java.util.concurrent.Callable r12;
        android.content.Intent r13, $r16;

        r0 := @this: androidx.room.DatabaseConfiguration;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: androidx.sqlite.db.SupportSQLiteOpenHelper$Factory;

        r4 := @parameter3: androidx.room.RoomDatabase$MigrationContainer;

        r5 := @parameter4: java.util.List;

        z0 := @parameter5: boolean;

        r6 := @parameter6: androidx.room.RoomDatabase$JournalMode;

        r7 := @parameter7: java.util.concurrent.Executor;

        r8 := @parameter8: java.util.concurrent.Executor;

        z1 := @parameter9: boolean;

        z2 := @parameter10: boolean;

        z3 := @parameter11: boolean;

        r9 := @parameter12: java.util.Set;

        r10 := @parameter13: java.lang.String;

        r11 := @parameter14: java.io.File;

        r12 := @parameter15: java.util.concurrent.Callable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "context");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "sqliteOpenHelperFactory");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "migrationContainer");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r6, "journalMode");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r7, "queryExecutor");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r8, "transactionExecutor");

        if z1 == 0 goto label1;

        $r16 = new android.content.Intent;

        specialinvoke $r16.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>(r1, class "Landroidx/room/MultiInstanceInvalidationService;");

        goto label2;

     label1:
        $r16 = null;

     label2:
        r13 = $r16;

        r14 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        r15 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        specialinvoke r0.<androidx.room.DatabaseConfiguration: void <init>(android.content.Context,java.lang.String,androidx.sqlite.db.SupportSQLiteOpenHelper$Factory,androidx.room.RoomDatabase$MigrationContainer,java.util.List,boolean,androidx.room.RoomDatabase$JournalMode,java.util.concurrent.Executor,java.util.concurrent.Executor,android.content.Intent,boolean,boolean,java.util.Set,java.lang.String,java.io.File,java.util.concurrent.Callable,androidx.room.RoomDatabase$PrepackagedDatabaseCallback,java.util.List,java.util.List)>(r1, r2, r3, r4, r5, z0, r6, r7, r8, r13, z2, z3, r9, r10, r11, r12, null, r14, r15);

        return;
    }

    public void <init>(android.content.Context, java.lang.String, androidx.sqlite.db.SupportSQLiteOpenHelper$Factory, androidx.room.RoomDatabase$MigrationContainer, java.util.List, boolean, androidx.room.RoomDatabase$JournalMode, java.util.concurrent.Executor, java.util.concurrent.Executor, boolean, boolean, boolean, java.util.Set, java.lang.String, java.io.File, java.util.concurrent.Callable, androidx.room.RoomDatabase$PrepackagedDatabaseCallback)
    {
        androidx.room.DatabaseConfiguration r0;
        android.content.Context r1;
        java.lang.String r2, r10;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Factory r3;
        androidx.room.RoomDatabase$MigrationContainer r4;
        java.util.List r5, r15, r16;
        boolean z0, z1, z2, z3;
        androidx.room.RoomDatabase$JournalMode r6;
        java.util.concurrent.Executor r7, r8;
        java.util.Set r9;
        java.io.File r11;
        java.util.concurrent.Callable r12;
        androidx.room.RoomDatabase$PrepackagedDatabaseCallback r13;
        android.content.Intent r14, $r17;

        r0 := @this: androidx.room.DatabaseConfiguration;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: androidx.sqlite.db.SupportSQLiteOpenHelper$Factory;

        r4 := @parameter3: androidx.room.RoomDatabase$MigrationContainer;

        r5 := @parameter4: java.util.List;

        z0 := @parameter5: boolean;

        r6 := @parameter6: androidx.room.RoomDatabase$JournalMode;

        r7 := @parameter7: java.util.concurrent.Executor;

        r8 := @parameter8: java.util.concurrent.Executor;

        z1 := @parameter9: boolean;

        z2 := @parameter10: boolean;

        z3 := @parameter11: boolean;

        r9 := @parameter12: java.util.Set;

        r10 := @parameter13: java.lang.String;

        r11 := @parameter14: java.io.File;

        r12 := @parameter15: java.util.concurrent.Callable;

        r13 := @parameter16: androidx.room.RoomDatabase$PrepackagedDatabaseCallback;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "context");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "sqliteOpenHelperFactory");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "migrationContainer");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r6, "journalMode");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r7, "queryExecutor");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r8, "transactionExecutor");

        if z1 == 0 goto label1;

        $r17 = new android.content.Intent;

        specialinvoke $r17.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>(r1, class "Landroidx/room/MultiInstanceInvalidationService;");

        goto label2;

     label1:
        $r17 = null;

     label2:
        r14 = $r17;

        r15 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        r16 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        specialinvoke r0.<androidx.room.DatabaseConfiguration: void <init>(android.content.Context,java.lang.String,androidx.sqlite.db.SupportSQLiteOpenHelper$Factory,androidx.room.RoomDatabase$MigrationContainer,java.util.List,boolean,androidx.room.RoomDatabase$JournalMode,java.util.concurrent.Executor,java.util.concurrent.Executor,android.content.Intent,boolean,boolean,java.util.Set,java.lang.String,java.io.File,java.util.concurrent.Callable,androidx.room.RoomDatabase$PrepackagedDatabaseCallback,java.util.List,java.util.List)>(r1, r2, r3, r4, r5, z0, r6, r7, r8, r14, z2, z3, r9, r10, r11, r12, r13, r15, r16);

        return;
    }

    public void <init>(android.content.Context, java.lang.String, androidx.sqlite.db.SupportSQLiteOpenHelper$Factory, androidx.room.RoomDatabase$MigrationContainer, java.util.List, boolean, androidx.room.RoomDatabase$JournalMode, java.util.concurrent.Executor, java.util.concurrent.Executor, boolean, boolean, boolean, java.util.Set, java.lang.String, java.io.File, java.util.concurrent.Callable, androidx.room.RoomDatabase$PrepackagedDatabaseCallback, java.util.List)
    {
        androidx.room.DatabaseConfiguration r0;
        android.content.Context r1;
        java.lang.String r2, r10;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Factory r3;
        androidx.room.RoomDatabase$MigrationContainer r4;
        java.util.List r5, r14, r16;
        boolean z0, z1, z2, z3;
        androidx.room.RoomDatabase$JournalMode r6;
        java.util.concurrent.Executor r7, r8;
        java.util.Set r9;
        java.io.File r11;
        java.util.concurrent.Callable r12;
        androidx.room.RoomDatabase$PrepackagedDatabaseCallback r13;
        android.content.Intent r15, $r17;

        r0 := @this: androidx.room.DatabaseConfiguration;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: androidx.sqlite.db.SupportSQLiteOpenHelper$Factory;

        r4 := @parameter3: androidx.room.RoomDatabase$MigrationContainer;

        r5 := @parameter4: java.util.List;

        z0 := @parameter5: boolean;

        r6 := @parameter6: androidx.room.RoomDatabase$JournalMode;

        r7 := @parameter7: java.util.concurrent.Executor;

        r8 := @parameter8: java.util.concurrent.Executor;

        z1 := @parameter9: boolean;

        z2 := @parameter10: boolean;

        z3 := @parameter11: boolean;

        r9 := @parameter12: java.util.Set;

        r10 := @parameter13: java.lang.String;

        r11 := @parameter14: java.io.File;

        r12 := @parameter15: java.util.concurrent.Callable;

        r13 := @parameter16: androidx.room.RoomDatabase$PrepackagedDatabaseCallback;

        r14 := @parameter17: java.util.List;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "context");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "sqliteOpenHelperFactory");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "migrationContainer");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r6, "journalMode");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r7, "queryExecutor");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r8, "transactionExecutor");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r14, "typeConverters");

        if z1 == 0 goto label1;

        $r17 = new android.content.Intent;

        specialinvoke $r17.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>(r1, class "Landroidx/room/MultiInstanceInvalidationService;");

        goto label2;

     label1:
        $r17 = null;

     label2:
        r15 = $r17;

        r16 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        specialinvoke r0.<androidx.room.DatabaseConfiguration: void <init>(android.content.Context,java.lang.String,androidx.sqlite.db.SupportSQLiteOpenHelper$Factory,androidx.room.RoomDatabase$MigrationContainer,java.util.List,boolean,androidx.room.RoomDatabase$JournalMode,java.util.concurrent.Executor,java.util.concurrent.Executor,android.content.Intent,boolean,boolean,java.util.Set,java.lang.String,java.io.File,java.util.concurrent.Callable,androidx.room.RoomDatabase$PrepackagedDatabaseCallback,java.util.List,java.util.List)>(r1, r2, r3, r4, r5, z0, r6, r7, r8, r15, z2, z3, r9, r10, r11, r12, r13, r14, r16);

        return;
    }

    public void <init>(android.content.Context, java.lang.String, androidx.sqlite.db.SupportSQLiteOpenHelper$Factory, androidx.room.RoomDatabase$MigrationContainer, java.util.List, boolean, androidx.room.RoomDatabase$JournalMode, java.util.concurrent.Executor, java.util.concurrent.Executor, boolean, boolean, boolean, java.util.Set, java.lang.String, java.io.File, java.util.concurrent.Callable, androidx.room.RoomDatabase$PrepackagedDatabaseCallback, java.util.List, java.util.List)
    {
        androidx.room.DatabaseConfiguration r0;
        android.content.Context r1;
        java.lang.String r2, r10;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Factory r3;
        androidx.room.RoomDatabase$MigrationContainer r4;
        java.util.List r5, r14, r15;
        boolean z0, z1, z2, z3;
        androidx.room.RoomDatabase$JournalMode r6;
        java.util.concurrent.Executor r7, r8;
        java.util.Set r9;
        java.io.File r11;
        java.util.concurrent.Callable r12;
        androidx.room.RoomDatabase$PrepackagedDatabaseCallback r13;
        android.content.Intent r16, $r17;

        r0 := @this: androidx.room.DatabaseConfiguration;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: androidx.sqlite.db.SupportSQLiteOpenHelper$Factory;

        r4 := @parameter3: androidx.room.RoomDatabase$MigrationContainer;

        r5 := @parameter4: java.util.List;

        z0 := @parameter5: boolean;

        r6 := @parameter6: androidx.room.RoomDatabase$JournalMode;

        r7 := @parameter7: java.util.concurrent.Executor;

        r8 := @parameter8: java.util.concurrent.Executor;

        z1 := @parameter9: boolean;

        z2 := @parameter10: boolean;

        z3 := @parameter11: boolean;

        r9 := @parameter12: java.util.Set;

        r10 := @parameter13: java.lang.String;

        r11 := @parameter14: java.io.File;

        r12 := @parameter15: java.util.concurrent.Callable;

        r13 := @parameter16: androidx.room.RoomDatabase$PrepackagedDatabaseCallback;

        r14 := @parameter17: java.util.List;

        r15 := @parameter18: java.util.List;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "context");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "sqliteOpenHelperFactory");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "migrationContainer");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r6, "journalMode");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r7, "queryExecutor");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r8, "transactionExecutor");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r14, "typeConverters");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r15, "autoMigrationSpecs");

        if z1 == 0 goto label1;

        $r17 = new android.content.Intent;

        specialinvoke $r17.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>(r1, class "Landroidx/room/MultiInstanceInvalidationService;");

        goto label2;

     label1:
        $r17 = null;

     label2:
        r16 = $r17;

        specialinvoke r0.<androidx.room.DatabaseConfiguration: void <init>(android.content.Context,java.lang.String,androidx.sqlite.db.SupportSQLiteOpenHelper$Factory,androidx.room.RoomDatabase$MigrationContainer,java.util.List,boolean,androidx.room.RoomDatabase$JournalMode,java.util.concurrent.Executor,java.util.concurrent.Executor,android.content.Intent,boolean,boolean,java.util.Set,java.lang.String,java.io.File,java.util.concurrent.Callable,androidx.room.RoomDatabase$PrepackagedDatabaseCallback,java.util.List,java.util.List)>(r1, r2, r3, r4, r5, z0, r6, r7, r8, r16, z2, z3, r9, r10, r11, r12, null, r14, r15);

        return;
    }

    public boolean isMigrationRequiredFrom(int)
    {
        androidx.room.DatabaseConfiguration r0;
        int i0, $i1;
        boolean $z0;

        r0 := @this: androidx.room.DatabaseConfiguration;

        i0 := @parameter0: int;

        $i1 = i0 + 1;

        $z0 = virtualinvoke r0.<androidx.room.DatabaseConfiguration: boolean isMigrationRequired(int,int)>(i0, $i1);

        return $z0;
    }

    public boolean isMigrationRequired(int, int)
    {
        androidx.room.DatabaseConfiguration r0;
        int i0, i1;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Set $r1, $r2;
        java.lang.Integer $r3;

        r0 := @this: androidx.room.DatabaseConfiguration;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 <= i1 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        z0 = $z4;

        if z0 == 0 goto label3;

        $z3 = r0.<androidx.room.DatabaseConfiguration: boolean allowDestructiveMigrationOnDowngrade>;

        if $z3 == 0 goto label3;

        return 0;

     label3:
        $z1 = r0.<androidx.room.DatabaseConfiguration: boolean requireMigration>;

        if $z1 == 0 goto label5;

        $r1 = r0.<androidx.room.DatabaseConfiguration: java.util.Set migrationNotRequiredFrom>;

        if $r1 == null goto label4;

        $r2 = r0.<androidx.room.DatabaseConfiguration: java.util.Set migrationNotRequiredFrom>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z2 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r3);

        if $z2 != 0 goto label5;

     label4:
        $z5 = 1;

        goto label6;

     label5:
        $z5 = 0;

     label6:
        return $z5;
    }

