androidx.media3.exoplayer.rtsp.reader.RtpH265Reader
<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: java.lang.String TAG>
<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: int MEDIA_CLOCK_FREQUENCY>
<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: int FU_PAYLOAD_OFFSET>
<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: int RTP_PACKET_TYPE_AP>
<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: int RTP_PACKET_TYPE_FU>
<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: int NAL_IDR_W_RADL>
<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: int NAL_IDR_N_LP>
<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: androidx.media3.common.util.ParsableByteArray fuScratchBuffer>
<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: androidx.media3.common.util.ParsableByteArray nalStartCodeArray>
<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: androidx.media3.exoplayer.rtsp.RtpPayloadFormat payloadFormat>
<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: androidx.media3.extractor.TrackOutput trackOutput>
<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: int bufferFlags>
<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: long firstReceivedTimestamp>
<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: int previousSequenceNumber>
<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: int fragmentedSampleSizeBytes>
<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: long startTimeOffsetUs>
    public void <init>(androidx.media3.exoplayer.rtsp.RtpPayloadFormat)
    {
        androidx.media3.exoplayer.rtsp.reader.RtpH265Reader r0;
        androidx.media3.exoplayer.rtsp.RtpPayloadFormat r1;
        androidx.media3.common.util.ParsableByteArray $r2, $r3;
        byte[] $r4;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpH265Reader;

        r1 := @parameter0: androidx.media3.exoplayer.rtsp.RtpPayloadFormat;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new androidx.media3.common.util.ParsableByteArray;

        specialinvoke $r2.<androidx.media3.common.util.ParsableByteArray: void <init>()>();

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: androidx.media3.common.util.ParsableByteArray fuScratchBuffer> = $r2;

        $r3 = new androidx.media3.common.util.ParsableByteArray;

        $r4 = <androidx.media3.extractor.NalUnitUtil: byte[] NAL_START_CODE>;

        specialinvoke $r3.<androidx.media3.common.util.ParsableByteArray: void <init>(byte[])>($r4);

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: androidx.media3.common.util.ParsableByteArray nalStartCodeArray> = $r3;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: androidx.media3.exoplayer.rtsp.RtpPayloadFormat payloadFormat> = r1;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: long firstReceivedTimestamp> = -9223372036854775807L;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: int previousSequenceNumber> = -1;

        return;
    }

    public void createTracks(androidx.media3.extractor.ExtractorOutput, int)
    {
        androidx.media3.exoplayer.rtsp.reader.RtpH265Reader r0;
        androidx.media3.extractor.ExtractorOutput r1;
        int i0;
        androidx.media3.extractor.TrackOutput $r2, $r5;
        androidx.media3.exoplayer.rtsp.RtpPayloadFormat $r3;
        androidx.media3.common.Format $r4;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpH265Reader;

        r1 := @parameter0: androidx.media3.extractor.ExtractorOutput;

        i0 := @parameter1: int;

        $r2 = interfaceinvoke r1.<androidx.media3.extractor.ExtractorOutput: androidx.media3.extractor.TrackOutput track(int,int)>(i0, 2);

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: androidx.media3.extractor.TrackOutput trackOutput> = $r2;

        $r5 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: androidx.media3.extractor.TrackOutput trackOutput>;

        $r3 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: androidx.media3.exoplayer.rtsp.RtpPayloadFormat payloadFormat>;

        $r4 = $r3.<androidx.media3.exoplayer.rtsp.RtpPayloadFormat: androidx.media3.common.Format format>;

        interfaceinvoke $r5.<androidx.media3.extractor.TrackOutput: void format(androidx.media3.common.Format)>($r4);

        return;
    }

    public void onReceivingFirstPacket(long, int)
    {
        androidx.media3.exoplayer.rtsp.reader.RtpH265Reader r0;
        long l0;
        int i1;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpH265Reader;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        return;
    }

    public void consume(androidx.media3.common.util.ParsableByteArray, long, int, boolean) throws androidx.media3.common.ParserException
    {
        androidx.media3.exoplayer.rtsp.reader.RtpH265Reader r0;
        androidx.media3.common.util.ParsableByteArray r1;
        long l0, l3, $l7, $l9, $l10;
        int i1, $i4, $i11, $i12;
        boolean z0;
        byte b2, $b5, $b6, $b8;
        byte[] $r2, $r3;
        androidx.media3.extractor.TrackOutput $r4, $r10;
        java.lang.Object[] $r6;
        java.lang.Integer $r7;
        java.lang.String $r8;
        androidx.media3.common.ParserException $r9, $r12;
        java.lang.UnsupportedOperationException $r11;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpH265Reader;

        r1 := @parameter0: androidx.media3.common.util.ParsableByteArray;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        $r2 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        $i4 = lengthof $r2;

        if $i4 != 0 goto label1;

        $r12 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedManifest(java.lang.String,java.lang.Throwable)>("Empty RTP data packet.", null);

        throw $r12;

     label1:
        $r3 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        $b5 = $r3[0];

        $b6 = $b5 >> 1;

        b2 = $b6 & 63;

        $r4 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: androidx.media3.extractor.TrackOutput trackOutput>;

        staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkStateNotNull(java.lang.Object)>($r4);

        if b2 < 0 goto label2;

        if b2 >= 48 goto label2;

        specialinvoke r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: void processSingleNalUnitPacket(androidx.media3.common.util.ParsableByteArray)>(r1);

        goto label5;

     label2:
        if b2 != 48 goto label3;

        $r11 = new java.lang.UnsupportedOperationException;

        specialinvoke $r11.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("need to implement processAggregationPacket");

        throw $r11;

     label3:
        if b2 != 49 goto label4;

        specialinvoke r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: void processFragmentationUnitPacket(androidx.media3.common.util.ParsableByteArray,int)>(r1, i1);

        goto label5;

     label4:
        $r6 = newarray (java.lang.Object)[1];

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(b2);

        $r6[0] = $r7;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("RTP H265 payload type [%d] not supported.", $r6);

        $r9 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedManifest(java.lang.String,java.lang.Throwable)>($r8, null);

        throw $r9;

     label5:
        if z0 == 0 goto label7;

        $l7 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: long firstReceivedTimestamp>;

        $b8 = $l7 cmp -9223372036854775807L;

        if $b8 != 0 goto label6;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: long firstReceivedTimestamp> = l0;

     label6:
        $l10 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: long startTimeOffsetUs>;

        $l9 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: long firstReceivedTimestamp>;

        l3 = staticinvoke <androidx.media3.exoplayer.rtsp.reader.RtpReaderUtils: long toSampleTimeUs(long,long,long,int)>($l10, l0, $l9, 90000);

        $r10 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: androidx.media3.extractor.TrackOutput trackOutput>;

        $i12 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: int bufferFlags>;

        $i11 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: int fragmentedSampleSizeBytes>;

        interfaceinvoke $r10.<androidx.media3.extractor.TrackOutput: void sampleMetadata(long,int,int,int,androidx.media3.extractor.TrackOutput$CryptoData)>(l3, $i12, $i11, 0, null);

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: int fragmentedSampleSizeBytes> = 0;

     label7:
        r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: int previousSequenceNumber> = i1;

        return;
    }

    public void seek(long, long)
    {
        androidx.media3.exoplayer.rtsp.reader.RtpH265Reader r0;
        long l0, l1;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpH265Reader;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: long firstReceivedTimestamp> = l0;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: int fragmentedSampleSizeBytes> = 0;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: long startTimeOffsetUs> = l1;

        return;
    }

    private void processSingleNalUnitPacket(androidx.media3.common.util.ParsableByteArray)
    {
        androidx.media3.exoplayer.rtsp.reader.RtpH265Reader r0;
        androidx.media3.common.util.ParsableByteArray r1;
        int i0, $i2, $i3, $i4, $i5, $i6, $i9;
        byte b1, $b7, $b8;
        androidx.media3.extractor.TrackOutput $r2;
        byte[] $r3;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpH265Reader;

        r1 := @parameter0: androidx.media3.common.util.ParsableByteArray;

        i0 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int bytesLeft()>();

        $i2 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: int fragmentedSampleSizeBytes>;

        $i3 = specialinvoke r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: int writeStartCode()>();

        $i4 = $i2 + $i3;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: int fragmentedSampleSizeBytes> = $i4;

        $r2 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: androidx.media3.extractor.TrackOutput trackOutput>;

        interfaceinvoke $r2.<androidx.media3.extractor.TrackOutput: void sampleData(androidx.media3.common.util.ParsableByteArray,int)>(r1, i0);

        $i5 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: int fragmentedSampleSizeBytes>;

        $i6 = $i5 + i0;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: int fragmentedSampleSizeBytes> = $i6;

        $r3 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        $b7 = $r3[0];

        $b8 = $b7 >> 1;

        b1 = $b8 & 63;

        $i9 = staticinvoke <androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: int getBufferFlagsFromNalType(int)>(b1);

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: int bufferFlags> = $i9;

        return;
    }

    private void processFragmentationUnitPacket(androidx.media3.common.util.ParsableByteArray, int) throws androidx.media3.common.ParserException
    {
        androidx.media3.exoplayer.rtsp.reader.RtpH265Reader r0;
        androidx.media3.common.util.ParsableByteArray r1, $r5, $r7, $r8, $r9, $r17, $r19;
        int i0, $i4, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i20, i21;
        byte b1, b2, b3, $b5, $b7, $b18, $b19;
        boolean z0, z1, $z2, $z3;
        byte[] $r2, $r3, $r4, $r6, $r15, $r16, $r18;
        short $s6;
        androidx.media3.extractor.TrackOutput $r10;
        java.lang.Object[] $r11;
        java.lang.Integer $r12, $r13;
        java.lang.String $r14;
        androidx.media3.common.ParserException $r21;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpH265Reader;

        r1 := @parameter0: androidx.media3.common.util.ParsableByteArray;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        $i4 = lengthof $r2;

        if $i4 >= 3 goto label1;

        $r21 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedManifest(java.lang.String,java.lang.Throwable)>("Malformed FU header.", null);

        throw $r21;

     label1:
        $r3 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        $b5 = $r3[1];

        b1 = $b5 & 7;

        $r4 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        b2 = $r4[2];

        b3 = b2 & 63;

        $s6 = b2 & 128;

        if $s6 <= 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        z0 = $z2;

        $b7 = b2 & 64;

        if $b7 <= 0 goto label4;

        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        z1 = $z3;

        if z0 == 0 goto label6;

        $i13 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: int fragmentedSampleSizeBytes>;

        $i14 = specialinvoke r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: int writeStartCode()>();

        $i15 = $i13 + $i14;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: int fragmentedSampleSizeBytes> = $i15;

        $r15 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        $i16 = b3 << 1;

        $i17 = $i16 & 127;

        $b18 = (byte) $i17;

        $r15[1] = $b18;

        $r16 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        $b19 = (byte) b1;

        $r16[2] = $b19;

        $r17 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: androidx.media3.common.util.ParsableByteArray fuScratchBuffer>;

        $r18 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        virtualinvoke $r17.<androidx.media3.common.util.ParsableByteArray: void reset(byte[])>($r18);

        $r19 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: androidx.media3.common.util.ParsableByteArray fuScratchBuffer>;

        virtualinvoke $r19.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>(1);

        goto label8;

     label6:
        $i8 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: int previousSequenceNumber>;

        $i9 = $i8 + 1;

        i20 = $i9 % 65535;

        if i0 == i20 goto label7;

        $r11 = newarray (java.lang.Object)[2];

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i20);

        $r11[0] = $r12;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r11[1] = $r13;

        $r14 = staticinvoke <androidx.media3.common.util.Util: java.lang.String formatInvariant(java.lang.String,java.lang.Object[])>("Received RTP packet with unexpected sequence number. Expected: %d; received: %d. Dropping packet.", $r11);

        staticinvoke <androidx.media3.common.util.Log: void w(java.lang.String,java.lang.String)>("RtpH265Reader", $r14);

        return;

     label7:
        $r5 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: androidx.media3.common.util.ParsableByteArray fuScratchBuffer>;

        $r6 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        virtualinvoke $r5.<androidx.media3.common.util.ParsableByteArray: void reset(byte[])>($r6);

        $r7 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: androidx.media3.common.util.ParsableByteArray fuScratchBuffer>;

        virtualinvoke $r7.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>(3);

     label8:
        $r8 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: androidx.media3.common.util.ParsableByteArray fuScratchBuffer>;

        i21 = virtualinvoke $r8.<androidx.media3.common.util.ParsableByteArray: int bytesLeft()>();

        $r10 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: androidx.media3.extractor.TrackOutput trackOutput>;

        $r9 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: androidx.media3.common.util.ParsableByteArray fuScratchBuffer>;

        interfaceinvoke $r10.<androidx.media3.extractor.TrackOutput: void sampleData(androidx.media3.common.util.ParsableByteArray,int)>($r9, i21);

        $i10 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: int fragmentedSampleSizeBytes>;

        $i11 = $i10 + i21;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: int fragmentedSampleSizeBytes> = $i11;

        if z1 == 0 goto label9;

        $i12 = staticinvoke <androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: int getBufferFlagsFromNalType(int)>(b3);

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: int bufferFlags> = $i12;

     label9:
        return;
    }

    private int writeStartCode()
    {
        androidx.media3.exoplayer.rtsp.reader.RtpH265Reader r0;
        int i0;
        androidx.media3.common.util.ParsableByteArray $r1, $r2, $r5;
        androidx.media3.extractor.TrackOutput $r3, $r6;
        java.lang.Object $r4;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpH265Reader;

        $r1 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: androidx.media3.common.util.ParsableByteArray nalStartCodeArray>;

        virtualinvoke $r1.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>(0);

        $r2 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: androidx.media3.common.util.ParsableByteArray nalStartCodeArray>;

        i0 = virtualinvoke $r2.<androidx.media3.common.util.ParsableByteArray: int bytesLeft()>();

        $r3 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: androidx.media3.extractor.TrackOutput trackOutput>;

        $r4 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r3);

        $r6 = (androidx.media3.extractor.TrackOutput) $r4;

        $r5 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpH265Reader: androidx.media3.common.util.ParsableByteArray nalStartCodeArray>;

        interfaceinvoke $r6.<androidx.media3.extractor.TrackOutput: void sampleData(androidx.media3.common.util.ParsableByteArray,int)>($r5, i0);

        return i0;
    }

    private static int getBufferFlagsFromNalType(int)
    {
        int i0;
        byte $b1;

        i0 := @parameter0: int;

        if i0 == 19 goto label1;

        if i0 != 20 goto label2;

     label1:
        $b1 = 1;

        goto label3;

     label2:
        $b1 = 0;

     label3:
        return $b1;
    }

