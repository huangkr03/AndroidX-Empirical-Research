io.grpc.okhttp.OutboundFlowController
<io.grpc.okhttp.OutboundFlowController: io.grpc.okhttp.OutboundFlowController$StreamState connectionState>
<io.grpc.okhttp.OutboundFlowController: io.grpc.okhttp.internal.framed.FrameWriter frameWriter>
<io.grpc.okhttp.OutboundFlowController: int initialWindowSize>
<io.grpc.okhttp.OutboundFlowController: io.grpc.okhttp.OutboundFlowController$Transport transport>
    static volatile io.grpc.okhttp.OutboundFlowController$StreamState '-$$Nest$fgetconnectionState'(io.grpc.okhttp.OutboundFlowController)
    {
        io.grpc.okhttp.OutboundFlowController $r0;
        io.grpc.okhttp.OutboundFlowController$StreamState r1;

        $r0 := @parameter0: io.grpc.okhttp.OutboundFlowController;

        r1 = $r0.<io.grpc.okhttp.OutboundFlowController: io.grpc.okhttp.OutboundFlowController$StreamState connectionState>;

        return r1;
    }

    static volatile io.grpc.okhttp.internal.framed.FrameWriter '-$$Nest$fgetframeWriter'(io.grpc.okhttp.OutboundFlowController)
    {
        io.grpc.okhttp.OutboundFlowController $r0;
        io.grpc.okhttp.internal.framed.FrameWriter r1;

        $r0 := @parameter0: io.grpc.okhttp.OutboundFlowController;

        r1 = $r0.<io.grpc.okhttp.OutboundFlowController: io.grpc.okhttp.internal.framed.FrameWriter frameWriter>;

        return r1;
    }

    public void <init>(io.grpc.okhttp.OutboundFlowController$Transport, io.grpc.okhttp.internal.framed.FrameWriter)
    {
        io.grpc.okhttp.OutboundFlowController $r0;
        io.grpc.okhttp.OutboundFlowController$Transport $r1;
        io.grpc.okhttp.internal.framed.FrameWriter $r2;
        java.lang.Object $r3;
        io.grpc.okhttp.OutboundFlowController$StreamState $r4;

        $r0 := @this: io.grpc.okhttp.OutboundFlowController;

        $r1 := @parameter0: io.grpc.okhttp.OutboundFlowController$Transport;

        $r2 := @parameter1: io.grpc.okhttp.internal.framed.FrameWriter;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r3 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r1, "transport");

        $r1 = (io.grpc.okhttp.OutboundFlowController$Transport) $r3;

        $r0.<io.grpc.okhttp.OutboundFlowController: io.grpc.okhttp.OutboundFlowController$Transport transport> = $r1;

        $r3 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r2, "frameWriter");

        $r2 = (io.grpc.okhttp.internal.framed.FrameWriter) $r3;

        $r0.<io.grpc.okhttp.OutboundFlowController: io.grpc.okhttp.internal.framed.FrameWriter frameWriter> = $r2;

        $r0.<io.grpc.okhttp.OutboundFlowController: int initialWindowSize> = 65535;

        $r4 = new io.grpc.okhttp.OutboundFlowController$StreamState;

        specialinvoke $r4.<io.grpc.okhttp.OutboundFlowController$StreamState: void <init>(io.grpc.okhttp.OutboundFlowController,int,int,io.grpc.okhttp.OutboundFlowController$Stream)>($r0, 0, 65535, null);

        $r0.<io.grpc.okhttp.OutboundFlowController: io.grpc.okhttp.OutboundFlowController$StreamState connectionState> = $r4;

        return;
    }

    public io.grpc.okhttp.OutboundFlowController$StreamState createState(io.grpc.okhttp.OutboundFlowController$Stream, int)
    {
        io.grpc.okhttp.OutboundFlowController $r0;
        int $i0, $i1;
        io.grpc.okhttp.OutboundFlowController$StreamState $r1;
        java.lang.Object $r2;
        io.grpc.okhttp.OutboundFlowController$Stream $r3;

        $r0 := @this: io.grpc.okhttp.OutboundFlowController;

        $r3 := @parameter0: io.grpc.okhttp.OutboundFlowController$Stream;

        $i0 := @parameter1: int;

        $r1 = new io.grpc.okhttp.OutboundFlowController$StreamState;

        $i1 = $r0.<io.grpc.okhttp.OutboundFlowController: int initialWindowSize>;

        $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r3, "stream");

        $r3 = (io.grpc.okhttp.OutboundFlowController$Stream) $r2;

        specialinvoke $r1.<io.grpc.okhttp.OutboundFlowController$StreamState: void <init>(io.grpc.okhttp.OutboundFlowController,int,int,io.grpc.okhttp.OutboundFlowController$Stream)>($r0, $i0, $i1, $r3);

        return $r1;
    }

    public void data(boolean, io.grpc.okhttp.OutboundFlowController$StreamState, okio.Buffer, boolean)
    {
        io.grpc.okhttp.OutboundFlowController $r0;
        boolean $z0, $z1, $z2;
        io.grpc.okhttp.OutboundFlowController$StreamState $r1;
        okio.Buffer $r2;
        int $i0, $i1;
        long $l2;

        $r0 := @this: io.grpc.okhttp.OutboundFlowController;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: io.grpc.okhttp.OutboundFlowController$StreamState;

        $r2 := @parameter2: okio.Buffer;

        $z1 := @parameter3: boolean;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r2, "source");

        $i1 = virtualinvoke $r1.<io.grpc.okhttp.OutboundFlowController$StreamState: int writableWindow()>();

        $z2 = virtualinvoke $r1.<io.grpc.okhttp.OutboundFlowController$StreamState: boolean hasPendingData()>();

        $l2 = virtualinvoke $r2.<okio.Buffer: long size()>();

        $i0 = (int) $l2;

        if $z2 != 0 goto label1;

        if $i1 < $i0 goto label1;

        virtualinvoke $r1.<io.grpc.okhttp.OutboundFlowController$StreamState: void write(okio.Buffer,int,boolean)>($r2, $i0, $z0);

        goto label3;

     label1:
        if $z2 != 0 goto label2;

        if $i1 <= 0 goto label2;

        virtualinvoke $r1.<io.grpc.okhttp.OutboundFlowController$StreamState: void write(okio.Buffer,int,boolean)>($r2, $i1, 0);

     label2:
        $l2 = virtualinvoke $r2.<okio.Buffer: long size()>();

        $i0 = (int) $l2;

        virtualinvoke $r1.<io.grpc.okhttp.OutboundFlowController$StreamState: void enqueueData(okio.Buffer,int,boolean)>($r2, $i0, $z0);

     label3:
        if $z1 == 0 goto label4;

        virtualinvoke $r0.<io.grpc.okhttp.OutboundFlowController: void flush()>();

     label4:
        return;
    }

    public void flush()
    {
        io.grpc.okhttp.OutboundFlowController $r0;
        io.grpc.okhttp.internal.framed.FrameWriter $r1;
        java.lang.Throwable $r2;
        java.lang.RuntimeException r3;

        $r0 := @this: io.grpc.okhttp.OutboundFlowController;

        $r1 = $r0.<io.grpc.okhttp.OutboundFlowController: io.grpc.okhttp.internal.framed.FrameWriter frameWriter>;

     label1:
        interfaceinvoke $r1.<io.grpc.okhttp.internal.framed.FrameWriter: void flush()>();

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        r3 = new java.lang.RuntimeException;

        specialinvoke r3.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r2);

        $r2 = (java.lang.Throwable) r3;

        throw $r2;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public boolean initialOutboundWindowSize(int)
    {
        io.grpc.okhttp.OutboundFlowController $r0;
        io.grpc.okhttp.OutboundFlowController$StreamState $r1;
        int $i0, $i1, $i2;
        io.grpc.okhttp.OutboundFlowController$Transport $r2;
        io.grpc.okhttp.OutboundFlowController$StreamState[] $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;

        $r0 := @this: io.grpc.okhttp.OutboundFlowController;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label3;

        $i1 = $r0.<io.grpc.okhttp.OutboundFlowController: int initialWindowSize>;

        $i1 = $i0 - $i1;

        $r0.<io.grpc.okhttp.OutboundFlowController: int initialWindowSize> = $i0;

        $r2 = $r0.<io.grpc.okhttp.OutboundFlowController: io.grpc.okhttp.OutboundFlowController$Transport transport>;

        $r3 = interfaceinvoke $r2.<io.grpc.okhttp.OutboundFlowController$Transport: io.grpc.okhttp.OutboundFlowController$StreamState[] getActiveStreams()>();

        $i0 = lengthof $r3;

        $i2 = 0;

     label1:
        if $i2 >= $i0 goto label2;

        $r1 = $r3[$i2];

        virtualinvoke $r1.<io.grpc.okhttp.OutboundFlowController$StreamState: int incrementStreamWindow(int)>($i1);

        $i2 = $i2 + 1;

        goto label1;

     label2:
        if $i1 <= 0 goto label5;

        return 1;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid initial window size: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        goto label4;

     label4:
        throw $r4;

     label5:
        return 0;
    }

    public int windowUpdate(io.grpc.okhttp.OutboundFlowController$StreamState, int)
    {
        io.grpc.okhttp.OutboundFlowController $r0;
        io.grpc.okhttp.OutboundFlowController$WriteStatus $r1;
        io.grpc.okhttp.OutboundFlowController$StreamState $r2;
        int $i0, $i1;
        boolean $z0;

        $r0 := @this: io.grpc.okhttp.OutboundFlowController;

        $r2 := @parameter0: io.grpc.okhttp.OutboundFlowController$StreamState;

        $i0 := @parameter1: int;

        if $r2 != null goto label1;

        $r2 = $r0.<io.grpc.okhttp.OutboundFlowController: io.grpc.okhttp.OutboundFlowController$StreamState connectionState>;

        $i0 = virtualinvoke $r2.<io.grpc.okhttp.OutboundFlowController$StreamState: int incrementStreamWindow(int)>($i0);

        virtualinvoke $r0.<io.grpc.okhttp.OutboundFlowController: void writeStreams()>();

        goto label2;

     label1:
        $i0 = virtualinvoke $r2.<io.grpc.okhttp.OutboundFlowController$StreamState: int incrementStreamWindow(int)>($i0);

        $r1 = new io.grpc.okhttp.OutboundFlowController$WriteStatus;

        specialinvoke $r1.<io.grpc.okhttp.OutboundFlowController$WriteStatus: void <init>(io.grpc.okhttp.OutboundFlowController$WriteStatus-IA)>(null);

        $i1 = virtualinvoke $r2.<io.grpc.okhttp.OutboundFlowController$StreamState: int writableWindow()>();

        virtualinvoke $r2.<io.grpc.okhttp.OutboundFlowController$StreamState: int writeBytes(int,io.grpc.okhttp.OutboundFlowController$WriteStatus)>($i1, $r1);

        $z0 = virtualinvoke $r1.<io.grpc.okhttp.OutboundFlowController$WriteStatus: boolean hasWritten()>();

        if $z0 != 0 goto label3;

     label2:
        return $i0;

     label3:
        virtualinvoke $r0.<io.grpc.okhttp.OutboundFlowController: void flush()>();

        return $i0;
    }

    public void writeStreams()
    {
        io.grpc.okhttp.OutboundFlowController $r0;
        io.grpc.okhttp.OutboundFlowController$StreamState $r1;
        io.grpc.okhttp.OutboundFlowController$Transport $r2;
        io.grpc.okhttp.OutboundFlowController$StreamState[] $r3;
        java.util.List $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        float $f0, $f1;
        double $d0;
        io.grpc.okhttp.OutboundFlowController$WriteStatus $r5;
        boolean $z0;

        $r0 := @this: io.grpc.okhttp.OutboundFlowController;

        $r2 = $r0.<io.grpc.okhttp.OutboundFlowController: io.grpc.okhttp.OutboundFlowController$Transport transport>;

        $r3 = interfaceinvoke $r2.<io.grpc.okhttp.OutboundFlowController$Transport: io.grpc.okhttp.OutboundFlowController$StreamState[] getActiveStreams()>();

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        staticinvoke <java.util.Collections: void shuffle(java.util.List)>($r4);

        $r1 = $r0.<io.grpc.okhttp.OutboundFlowController: io.grpc.okhttp.OutboundFlowController$StreamState connectionState>;

        $i1 = virtualinvoke $r1.<io.grpc.okhttp.OutboundFlowController$StreamState: int window()>();

        $i2 = lengthof $r3;

     label1:
        $i0 = 0;

        if $i2 <= 0 goto label6;

        if $i1 <= 0 goto label6;

        $f0 = (float) $i1;

        $f1 = (float) $i2;

        $f0 = $f0 / $f1;

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        $i3 = (int) $d0;

        $i4 = 0;

     label2:
        if $i4 >= $i2 goto label5;

        if $i1 <= 0 goto label5;

        $r1 = $r3[$i4];

        $i5 = virtualinvoke $r1.<io.grpc.okhttp.OutboundFlowController$StreamState: int unallocatedBytes()>();

        $i5 = staticinvoke <java.lang.Math: int min(int,int)>($i5, $i3);

        $i5 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i5);

        if $i5 <= 0 goto label3;

        virtualinvoke $r1.<io.grpc.okhttp.OutboundFlowController$StreamState: void allocateBytes(int)>($i5);

        $i1 = $i1 - $i5;

     label3:
        $i5 = virtualinvoke $r1.<io.grpc.okhttp.OutboundFlowController$StreamState: int unallocatedBytes()>();

        if $i5 <= 0 goto label4;

        $r3[$i0] = $r1;

        $i0 = $i0 + 1;

     label4:
        $i4 = $i4 + 1;

        goto label2;

     label5:
        $i2 = $i0;

        goto label1;

     label6:
        $r5 = new io.grpc.okhttp.OutboundFlowController$WriteStatus;

        specialinvoke $r5.<io.grpc.okhttp.OutboundFlowController$WriteStatus: void <init>(io.grpc.okhttp.OutboundFlowController$WriteStatus-IA)>(null);

        $r2 = $r0.<io.grpc.okhttp.OutboundFlowController: io.grpc.okhttp.OutboundFlowController$Transport transport>;

        $r3 = interfaceinvoke $r2.<io.grpc.okhttp.OutboundFlowController$Transport: io.grpc.okhttp.OutboundFlowController$StreamState[] getActiveStreams()>();

        $i1 = lengthof $r3;

     label7:
        if $i0 >= $i1 goto label8;

        $r1 = $r3[$i0];

        $i2 = virtualinvoke $r1.<io.grpc.okhttp.OutboundFlowController$StreamState: int allocatedBytes()>();

        virtualinvoke $r1.<io.grpc.okhttp.OutboundFlowController$StreamState: int writeBytes(int,io.grpc.okhttp.OutboundFlowController$WriteStatus)>($i2, $r5);

        virtualinvoke $r1.<io.grpc.okhttp.OutboundFlowController$StreamState: void clearAllocatedBytes()>();

        $i0 = $i0 + 1;

        goto label7;

     label8:
        $z0 = virtualinvoke $r5.<io.grpc.okhttp.OutboundFlowController$WriteStatus: boolean hasWritten()>();

        if $z0 == 0 goto label9;

        virtualinvoke $r0.<io.grpc.okhttp.OutboundFlowController: void flush()>();

     label9:
        return;
    }

io.grpc.okhttp.OutboundFlowController$Stream
<io.grpc.okhttp.OutboundFlowController$Stream: void onSentBytes(int)>
io.grpc.okhttp.OutboundFlowController$StreamState
<io.grpc.okhttp.OutboundFlowController$StreamState: int allocatedBytes>
<io.grpc.okhttp.OutboundFlowController$StreamState: java.lang.Runnable noPendingDataRunnable>
<io.grpc.okhttp.OutboundFlowController$StreamState: boolean pendingBufferHasEndOfStream>
<io.grpc.okhttp.OutboundFlowController$StreamState: okio.Buffer pendingWriteBuffer>
<io.grpc.okhttp.OutboundFlowController$StreamState: io.grpc.okhttp.OutboundFlowController$Stream stream>
<io.grpc.okhttp.OutboundFlowController$StreamState: int streamId>
<io.grpc.okhttp.OutboundFlowController$StreamState: io.grpc.okhttp.OutboundFlowController this$0>
<io.grpc.okhttp.OutboundFlowController$StreamState: int window>
    void <init>(io.grpc.okhttp.OutboundFlowController, int, int, io.grpc.okhttp.OutboundFlowController$Stream)
    {
        io.grpc.okhttp.OutboundFlowController$StreamState $r0;
        int $i0, $i1;
        io.grpc.okhttp.OutboundFlowController$Stream $r1;
        io.grpc.okhttp.OutboundFlowController $r2;
        okio.Buffer $r3;

        $r0 := @this: io.grpc.okhttp.OutboundFlowController$StreamState;

        $r2 := @parameter0: io.grpc.okhttp.OutboundFlowController;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 := @parameter3: io.grpc.okhttp.OutboundFlowController$Stream;

        $r0.<io.grpc.okhttp.OutboundFlowController$StreamState: io.grpc.okhttp.OutboundFlowController this$0> = $r2;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r3 = new okio.Buffer;

        specialinvoke $r3.<okio.Buffer: void <init>()>();

        $r0.<io.grpc.okhttp.OutboundFlowController$StreamState: okio.Buffer pendingWriteBuffer> = $r3;

        $r0.<io.grpc.okhttp.OutboundFlowController$StreamState: boolean pendingBufferHasEndOfStream> = 0;

        $r0.<io.grpc.okhttp.OutboundFlowController$StreamState: int streamId> = $i0;

        $r0.<io.grpc.okhttp.OutboundFlowController$StreamState: int window> = $i1;

        $r0.<io.grpc.okhttp.OutboundFlowController$StreamState: io.grpc.okhttp.OutboundFlowController$Stream stream> = $r1;

        return;
    }

    void allocateBytes(int)
    {
        io.grpc.okhttp.OutboundFlowController$StreamState $r0;
        int $i0, $i1;

        $r0 := @this: io.grpc.okhttp.OutboundFlowController$StreamState;

        $i0 := @parameter0: int;

        $i1 = $r0.<io.grpc.okhttp.OutboundFlowController$StreamState: int allocatedBytes>;

        $i0 = $i1 + $i0;

        $r0.<io.grpc.okhttp.OutboundFlowController$StreamState: int allocatedBytes> = $i0;

        return;
    }

    int allocatedBytes()
    {
        io.grpc.okhttp.OutboundFlowController$StreamState $r0;
        int i0;

        $r0 := @this: io.grpc.okhttp.OutboundFlowController$StreamState;

        i0 = $r0.<io.grpc.okhttp.OutboundFlowController$StreamState: int allocatedBytes>;

        return i0;
    }

    void clearAllocatedBytes()
    {
        io.grpc.okhttp.OutboundFlowController$StreamState $r0;

        $r0 := @this: io.grpc.okhttp.OutboundFlowController$StreamState;

        $r0.<io.grpc.okhttp.OutboundFlowController$StreamState: int allocatedBytes> = 0;

        return;
    }

    void enqueueData(okio.Buffer, int, boolean)
    {
        io.grpc.okhttp.OutboundFlowController$StreamState $r0;
        int $i0;
        boolean $z0, $z1;
        okio.Buffer $r1, $r2;
        long $l1;

        $r0 := @this: io.grpc.okhttp.OutboundFlowController$StreamState;

        $r2 := @parameter0: okio.Buffer;

        $i0 := @parameter1: int;

        $z0 := @parameter2: boolean;

        $r1 = $r0.<io.grpc.okhttp.OutboundFlowController$StreamState: okio.Buffer pendingWriteBuffer>;

        $l1 = (long) $i0;

        virtualinvoke $r1.<okio.Buffer: void write(okio.Buffer,long)>($r2, $l1);

        $z1 = $r0.<io.grpc.okhttp.OutboundFlowController$StreamState: boolean pendingBufferHasEndOfStream>;

        $z0 = $z1 | $z0;

        $r0.<io.grpc.okhttp.OutboundFlowController$StreamState: boolean pendingBufferHasEndOfStream> = $z0;

        return;
    }

    boolean hasPendingData()
    {
        io.grpc.okhttp.OutboundFlowController$StreamState $r0;
        byte $b0;
        long $l1;
        okio.Buffer $r1;

        $r0 := @this: io.grpc.okhttp.OutboundFlowController$StreamState;

        $r1 = $r0.<io.grpc.okhttp.OutboundFlowController$StreamState: okio.Buffer pendingWriteBuffer>;

        $l1 = virtualinvoke $r1.<okio.Buffer: long size()>();

        $b0 = $l1 cmp 0L;

        if $b0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    int incrementStreamWindow(int)
    {
        io.grpc.okhttp.OutboundFlowController$StreamState $r0;
        int $i0, $i1, $i2;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $r0 := @this: io.grpc.okhttp.OutboundFlowController$StreamState;

        $i0 := @parameter0: int;

        if $i0 <= 0 goto label2;

        $i1 = 2147483647 - $i0;

        $i2 = $r0.<io.grpc.okhttp.OutboundFlowController$StreamState: int window>;

        if $i1 < $i2 goto label1;

        goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $i0 = $r0.<io.grpc.okhttp.OutboundFlowController$StreamState: int streamId>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Window size overflow for stream: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label2:
        $i1 = $r0.<io.grpc.okhttp.OutboundFlowController$StreamState: int window>;

        $i0 = $i1 + $i0;

        $r0.<io.grpc.okhttp.OutboundFlowController$StreamState: int window> = $i0;

        return $i0;
    }

    int streamableBytes()
    {
        io.grpc.okhttp.OutboundFlowController$StreamState $r0;
        int $i0, $i1;
        okio.Buffer $r1;
        long $l2;

        $r0 := @this: io.grpc.okhttp.OutboundFlowController$StreamState;

        $i1 = $r0.<io.grpc.okhttp.OutboundFlowController$StreamState: int window>;

        $r1 = $r0.<io.grpc.okhttp.OutboundFlowController$StreamState: okio.Buffer pendingWriteBuffer>;

        $l2 = virtualinvoke $r1.<okio.Buffer: long size()>();

        $i0 = (int) $l2;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i0);

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i0);

        return $i0;
    }

    int unallocatedBytes()
    {
        io.grpc.okhttp.OutboundFlowController$StreamState $r0;
        int $i0, $i1;

        $r0 := @this: io.grpc.okhttp.OutboundFlowController$StreamState;

        $i1 = virtualinvoke $r0.<io.grpc.okhttp.OutboundFlowController$StreamState: int streamableBytes()>();

        $i0 = $r0.<io.grpc.okhttp.OutboundFlowController$StreamState: int allocatedBytes>;

        $i0 = $i1 - $i0;

        return $i0;
    }

    int window()
    {
        io.grpc.okhttp.OutboundFlowController$StreamState $r0;
        int i0;

        $r0 := @this: io.grpc.okhttp.OutboundFlowController$StreamState;

        i0 = $r0.<io.grpc.okhttp.OutboundFlowController$StreamState: int window>;

        return i0;
    }

    int writableWindow()
    {
        io.grpc.okhttp.OutboundFlowController$StreamState $r0;
        int $i0, $i1;
        io.grpc.okhttp.OutboundFlowController $r1;

        $r0 := @this: io.grpc.okhttp.OutboundFlowController$StreamState;

        $i0 = $r0.<io.grpc.okhttp.OutboundFlowController$StreamState: int window>;

        $r1 = $r0.<io.grpc.okhttp.OutboundFlowController$StreamState: io.grpc.okhttp.OutboundFlowController this$0>;

        $r0 = staticinvoke <io.grpc.okhttp.OutboundFlowController: io.grpc.okhttp.OutboundFlowController$StreamState '-$$Nest$fgetconnectionState'(io.grpc.okhttp.OutboundFlowController)>($r1);

        $i1 = virtualinvoke $r0.<io.grpc.okhttp.OutboundFlowController$StreamState: int window()>();

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        return $i0;
    }

    void write(okio.Buffer, int, boolean)
    {
        io.grpc.okhttp.OutboundFlowController$StreamState $r0, $r4;
        boolean $z0, $z1;
        byte $b0;
        okio.Buffer $r1;
        int $i1, $i2, $i3;
        io.grpc.okhttp.OutboundFlowController $r2;
        io.grpc.okhttp.internal.framed.FrameWriter $r3;
        long $l4, $l5;
        io.grpc.okhttp.OutboundFlowController$Stream $r5;
        java.lang.Throwable $r6;
        java.lang.RuntimeException r7;

        $r0 := @this: io.grpc.okhttp.OutboundFlowController$StreamState;

        $r1 := @parameter0: okio.Buffer;

        $i1 := @parameter1: int;

        $z0 := @parameter2: boolean;

     label1:
        $r2 = $r0.<io.grpc.okhttp.OutboundFlowController$StreamState: io.grpc.okhttp.OutboundFlowController this$0>;

        $r3 = staticinvoke <io.grpc.okhttp.OutboundFlowController: io.grpc.okhttp.internal.framed.FrameWriter '-$$Nest$fgetframeWriter'(io.grpc.okhttp.OutboundFlowController)>($r2);

        $i2 = interfaceinvoke $r3.<io.grpc.okhttp.internal.framed.FrameWriter: int maxDataLength()>();

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i2);

        $r2 = $r0.<io.grpc.okhttp.OutboundFlowController$StreamState: io.grpc.okhttp.OutboundFlowController this$0>;

        $r4 = staticinvoke <io.grpc.okhttp.OutboundFlowController: io.grpc.okhttp.OutboundFlowController$StreamState '-$$Nest$fgetconnectionState'(io.grpc.okhttp.OutboundFlowController)>($r2);

        $i3 = neg $i2;

        virtualinvoke $r4.<io.grpc.okhttp.OutboundFlowController$StreamState: int incrementStreamWindow(int)>($i3);

        virtualinvoke $r0.<io.grpc.okhttp.OutboundFlowController$StreamState: int incrementStreamWindow(int)>($i3);

     label2:
        $l4 = virtualinvoke $r1.<okio.Buffer: long size()>();

     label3:
        $l5 = (long) $i2;

        $b0 = $l4 cmp $l5;

        if $b0 != 0 goto label4;

        if $z0 == 0 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        $r2 = $r0.<io.grpc.okhttp.OutboundFlowController$StreamState: io.grpc.okhttp.OutboundFlowController this$0>;

        $r3 = staticinvoke <io.grpc.okhttp.OutboundFlowController: io.grpc.okhttp.internal.framed.FrameWriter '-$$Nest$fgetframeWriter'(io.grpc.okhttp.OutboundFlowController)>($r2);

        $i3 = $r0.<io.grpc.okhttp.OutboundFlowController$StreamState: int streamId>;

     label6:
        interfaceinvoke $r3.<io.grpc.okhttp.internal.framed.FrameWriter: void data(boolean,int,okio.Buffer,int)>($z1, $i3, $r1, $i2);

     label7:
        $r5 = $r0.<io.grpc.okhttp.OutboundFlowController$StreamState: io.grpc.okhttp.OutboundFlowController$Stream stream>;

        interfaceinvoke $r5.<io.grpc.okhttp.OutboundFlowController$Stream: void onSentBytes(int)>($i2);

        $i1 = $i1 - $i2;

        if $i1 > 0 goto label1;

        return;

     label8:
        $r6 := @caughtexception;

        r7 = new java.lang.RuntimeException;

        specialinvoke r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r6);

        goto label9;

     label9:
        $r6 = (java.lang.Throwable) r7;

        throw $r6;

        catch java.io.IOException from label2 to label3 with label8;
        catch java.io.IOException from label6 to label7 with label8;
    }

    int writeBytes(int, io.grpc.okhttp.OutboundFlowController$WriteStatus)
    {
        io.grpc.okhttp.OutboundFlowController$StreamState $r0;
        io.grpc.okhttp.OutboundFlowController$WriteStatus $r1;
        int $i0, $i2, $i3, $i6;
        byte $b1;
        boolean $z0;
        long $l4, $l5;
        okio.Buffer $r2;
        java.lang.Runnable $r3;

        $r0 := @this: io.grpc.okhttp.OutboundFlowController$StreamState;

        $i2 := @parameter0: int;

        $r1 := @parameter1: io.grpc.okhttp.OutboundFlowController$WriteStatus;

        $i3 = virtualinvoke $r0.<io.grpc.okhttp.OutboundFlowController$StreamState: int writableWindow()>();

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i3);

        $i3 = 0;

     label1:
        $z0 = virtualinvoke $r0.<io.grpc.okhttp.OutboundFlowController$StreamState: boolean hasPendingData()>();

        if $z0 == 0 goto label4;

        if $i0 <= 0 goto label4;

        $l4 = (long) $i0;

        $r2 = $r0.<io.grpc.okhttp.OutboundFlowController$StreamState: okio.Buffer pendingWriteBuffer>;

        $l5 = virtualinvoke $r2.<okio.Buffer: long size()>();

        $b1 = $l4 cmp $l5;

        if $b1 < 0 goto label2;

        $r2 = $r0.<io.grpc.okhttp.OutboundFlowController$StreamState: okio.Buffer pendingWriteBuffer>;

        $l4 = virtualinvoke $r2.<okio.Buffer: long size()>();

        $i0 = (int) $l4;

        $i3 = $i3 + $i0;

        $r2 = $r0.<io.grpc.okhttp.OutboundFlowController$StreamState: okio.Buffer pendingWriteBuffer>;

        $l4 = virtualinvoke $r2.<okio.Buffer: long size()>();

        $i0 = (int) $l4;

        $z0 = $r0.<io.grpc.okhttp.OutboundFlowController$StreamState: boolean pendingBufferHasEndOfStream>;

        virtualinvoke $r0.<io.grpc.okhttp.OutboundFlowController$StreamState: void write(okio.Buffer,int,boolean)>($r2, $i0, $z0);

        goto label3;

     label2:
        $i3 = $i3 + $i0;

        $r2 = $r0.<io.grpc.okhttp.OutboundFlowController$StreamState: okio.Buffer pendingWriteBuffer>;

        virtualinvoke $r0.<io.grpc.okhttp.OutboundFlowController$StreamState: void write(okio.Buffer,int,boolean)>($r2, $i0, 0);

     label3:
        virtualinvoke $r1.<io.grpc.okhttp.OutboundFlowController$WriteStatus: void incrementNumWrites()>();

        $i0 = $i2 - $i3;

        $i6 = virtualinvoke $r0.<io.grpc.okhttp.OutboundFlowController$StreamState: int writableWindow()>();

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i6);

        goto label1;

     label4:
        $z0 = virtualinvoke $r0.<io.grpc.okhttp.OutboundFlowController$StreamState: boolean hasPendingData()>();

        if $z0 != 0 goto label5;

        $r3 = $r0.<io.grpc.okhttp.OutboundFlowController$StreamState: java.lang.Runnable noPendingDataRunnable>;

        if $r3 == null goto label5;

        interfaceinvoke $r3.<java.lang.Runnable: void run()>();

        $r0.<io.grpc.okhttp.OutboundFlowController$StreamState: java.lang.Runnable noPendingDataRunnable> = null;

     label5:
        return $i3;
    }

io.grpc.okhttp.OutboundFlowController$Transport
<io.grpc.okhttp.OutboundFlowController$Transport: io.grpc.okhttp.OutboundFlowController$StreamState[] getActiveStreams()>
io.grpc.okhttp.OutboundFlowController$WriteStatus-IA
io.grpc.okhttp.OutboundFlowController$WriteStatus
<io.grpc.okhttp.OutboundFlowController$WriteStatus: int numWrites>
    private void <init>()
    {
        io.grpc.okhttp.OutboundFlowController$WriteStatus $r0;

        $r0 := @this: io.grpc.okhttp.OutboundFlowController$WriteStatus;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    void <init>(io.grpc.okhttp.OutboundFlowController$WriteStatus-IA)
    {
        io.grpc.okhttp.OutboundFlowController$WriteStatus $r0;
        io.grpc.okhttp.OutboundFlowController$WriteStatus-IA $r1;

        $r0 := @this: io.grpc.okhttp.OutboundFlowController$WriteStatus;

        $r1 := @parameter0: io.grpc.okhttp.OutboundFlowController$WriteStatus-IA;

        specialinvoke $r0.<io.grpc.okhttp.OutboundFlowController$WriteStatus: void <init>()>();

        return;
    }

    boolean hasWritten()
    {
        io.grpc.okhttp.OutboundFlowController$WriteStatus $r0;
        int $i0;

        $r0 := @this: io.grpc.okhttp.OutboundFlowController$WriteStatus;

        $i0 = $r0.<io.grpc.okhttp.OutboundFlowController$WriteStatus: int numWrites>;

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    void incrementNumWrites()
    {
        io.grpc.okhttp.OutboundFlowController$WriteStatus $r0;
        int $i0;

        $r0 := @this: io.grpc.okhttp.OutboundFlowController$WriteStatus;

        $i0 = $r0.<io.grpc.okhttp.OutboundFlowController$WriteStatus: int numWrites>;

        $i0 = $i0 + 1;

        $r0.<io.grpc.okhttp.OutboundFlowController$WriteStatus: int numWrites> = $i0;

        return;
    }

