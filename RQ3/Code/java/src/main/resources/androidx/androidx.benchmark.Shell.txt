androidx.benchmark.Shell
<androidx.benchmark.Shell: androidx.benchmark.Shell INSTANCE>
    private void <init>()
    {
        androidx.benchmark.Shell r0;

        r0 := @this: androidx.benchmark.Shell;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private final boolean psLineContainsProcess(java.lang.String, java.lang.String)
    {
        androidx.benchmark.Shell r0;
        java.lang.String r1, r2, $r3, $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: androidx.benchmark.Shell;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>(" ", r2);

        $z0 = staticinvoke <kotlin.text.StringsKt: boolean endsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>(r1, $r3, 0, 2, null);

        if $z0 != 0 goto label1;

        $r4 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("/", r2);

        $z1 = staticinvoke <kotlin.text.StringsKt: boolean endsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>(r1, $r4, 0, 2, null);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private final boolean fullProcessNameMatchesProcess(java.lang.String, java.lang.String)
    {
        androidx.benchmark.Shell r0;
        java.lang.String r1, r2, $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: androidx.benchmark.Shell;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, r2);

        if $z0 != 0 goto label1;

        $r3 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("/", r2);

        $z1 = staticinvoke <kotlin.text.StringsKt: boolean endsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>(r1, $r3, 0, 2, null);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public final void connectUiAutomation()
    {
        androidx.benchmark.Shell r0;
        int $i0;
        androidx.benchmark.ShellImpl $r1;

        r0 := @this: androidx.benchmark.Shell;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 21 goto label1;

        $r1 = <androidx.benchmark.ShellImpl: androidx.benchmark.ShellImpl INSTANCE>;

     label1:
        return;
    }

    public final java.lang.String optionalCommand(java.lang.String)
    {
        androidx.benchmark.Shell r0;
        java.lang.String r1, $r2;
        int $i0;

        r0 := @this: androidx.benchmark.Shell;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "command");

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 21 goto label1;

        $r2 = virtualinvoke r0.<androidx.benchmark.Shell: java.lang.String executeCommand(java.lang.String)>(r1);

        goto label2;

     label1:
        $r2 = (java.lang.String) null;

     label2:
        return $r2;
    }

    public final java.lang.String executeCommand(java.lang.String)
    {
        androidx.benchmark.Shell r0;
        java.lang.String r1, $r3;
        androidx.benchmark.ShellImpl $r2;

        r0 := @this: androidx.benchmark.Shell;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "command");

        $r2 = <androidx.benchmark.ShellImpl: androidx.benchmark.ShellImpl INSTANCE>;

        $r3 = virtualinvoke $r2.<androidx.benchmark.ShellImpl: java.lang.String executeCommand(java.lang.String)>(r1);

        return $r3;
    }

    public final java.lang.Long catProcFileLong(java.lang.String)
    {
        androidx.benchmark.Shell r0;
        java.lang.String r1, r2, r3, $r6;
        java.lang.Throwable r5, $r9;
        java.lang.CharSequence $r7, $r8;
        long $l0;
        java.lang.Long $r10, r11;

        r0 := @this: androidx.benchmark.Shell;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "path");

        $r6 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("cat ", r1);

        r2 = virtualinvoke r0.<androidx.benchmark.Shell: java.lang.String optionalCommand(java.lang.String)>($r6);

        if r2 != null goto label1;

        $r10 = null;

        goto label6;

     label1:
        $r7 = (java.lang.CharSequence) r2;

        $r8 = staticinvoke <kotlin.text.StringsKt: java.lang.CharSequence trim(java.lang.CharSequence)>($r7);

        r3 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();

        if r3 != null goto label2;

        $r10 = null;

        goto label6;

     label2:
        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r3);

        r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

        r5 = $r9;

        r11 = (java.lang.Long) null;

     label5:
        $r10 = r11;

     label6:
        return $r10;

        catch java.lang.NumberFormatException from label2 to label3 with label4;
    }

    public final void chmodExecutable(java.lang.String)
    {
        androidx.benchmark.Shell r0;
        java.lang.String r1, $r3, $r6;
        int $i0;
        androidx.benchmark.ShellImpl $r2, $r5;

        r0 := @this: androidx.benchmark.Shell;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "absoluteFilePath");

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 23 goto label1;

        $r5 = <androidx.benchmark.ShellImpl: androidx.benchmark.ShellImpl INSTANCE>;

        $r6 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("chmod +x ", r1);

        virtualinvoke $r5.<androidx.benchmark.ShellImpl: java.lang.String executeCommand(java.lang.String)>($r6);

        goto label2;

     label1:
        $r2 = <androidx.benchmark.ShellImpl: androidx.benchmark.ShellImpl INSTANCE>;

        $r3 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("chmod 777 ", r1);

        virtualinvoke $r2.<androidx.benchmark.ShellImpl: java.lang.String executeCommand(java.lang.String)>($r3);

     label2:
        return;
    }

    public final void moveToTmpAndMakeExecutable(java.lang.String, java.lang.String)
    {
        androidx.benchmark.Shell r0;
        java.lang.String r1, r2, $r9;
        java.lang.StringBuilder $r3, $r5, $r6, $r7, $r8;
        androidx.benchmark.ShellImpl $r4;

        r0 := @this: androidx.benchmark.Shell;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "src");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "dst");

        $r4 = <androidx.benchmark.ShellImpl: androidx.benchmark.ShellImpl INSTANCE>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cp ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<androidx.benchmark.ShellImpl: java.lang.String executeCommand(java.lang.String)>($r9);

        virtualinvoke r0.<androidx.benchmark.Shell: void chmodExecutable(java.lang.String)>(r2);

        return;
    }

    public final java.lang.String createRunnableExecutable(java.lang.String, java.io.InputStream)
    {
        androidx.benchmark.Shell r0;
        java.lang.String r1, r5, $r7, r18;
        java.io.InputStream r2;
        java.io.File r3, r4;
        androidx.benchmark.Outputs $r6;
        java.io.FileOutputStream $r8, r14;
        java.io.OutputStream $r9;
        java.lang.Throwable $r10, $r11, $r12, r15, r16, r17, r19;
        java.io.Closeable r13;

        r0 := @this: androidx.benchmark.Shell;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.InputStream;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "name");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "inputStream");

        $r6 = <androidx.benchmark.Outputs: androidx.benchmark.Outputs INSTANCE>;

        r3 = virtualinvoke $r6.<androidx.benchmark.Outputs: java.io.File getDirUsableByAppAndShell()>();

        $r7 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("temporary_", r1);

        r4 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>($r7, null, r3);

        r5 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("/data/local/tmp/", r1);

     label01:
        $r8 = new java.io.FileOutputStream;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r4, "writableExecutableFile");

        specialinvoke $r8.<java.io.FileOutputStream: void <init>(java.io.File)>(r4);

        r13 = (java.io.Closeable) $r8;

     label02:
        r14 = (java.io.FileOutputStream) r13;

        $r9 = (java.io.OutputStream) r14;

        staticinvoke <kotlin.io.ByteStreamsKt: long copyTo$default(java.io.InputStream,java.io.OutputStream,int,int,java.lang.Object)>(r2, $r9, 0, 2, null);

     label03:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r13, null);

        goto label07;

     label04:
        $r11 := @caughtexception;

        r15 = $r11;

        r16 = r15;

        throw r15;

     label05:
        $r10 := @caughtexception;

        r17 = $r10;

     label06:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r13, r16);

        throw r17;

     label07:
        r18 = virtualinvoke r4.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r18, "writableExecutableFile.absolutePath");

        virtualinvoke r0.<androidx.benchmark.Shell: void moveToTmpAndMakeExecutable(java.lang.String,java.lang.String)>(r18, r5);

     label08:
        virtualinvoke r4.<java.io.File: boolean delete()>();

        goto label11;

     label09:
        $r12 := @caughtexception;

        r19 = $r12;

     label10:
        virtualinvoke r4.<java.io.File: boolean delete()>();

        throw r19;

     label11:
        return r5;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public final boolean isSessionRooted()
    {
        androidx.benchmark.Shell r0;
        androidx.benchmark.ShellImpl $r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: androidx.benchmark.Shell;

        $r1 = <androidx.benchmark.ShellImpl: androidx.benchmark.ShellImpl INSTANCE>;

        $z0 = virtualinvoke $r1.<androidx.benchmark.ShellImpl: boolean isSessionRooted()>();

        if $z0 != 0 goto label1;

        $r2 = <androidx.benchmark.ShellImpl: androidx.benchmark.ShellImpl INSTANCE>;

        $z1 = virtualinvoke $r2.<androidx.benchmark.ShellImpl: boolean isSuAvailable()>();

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public final java.lang.String executeScript(java.lang.String, java.lang.String)
    {
        androidx.benchmark.Shell r0;
        java.lang.String r1, r2, $r6;
        androidx.benchmark.ShellImpl $r3;
        kotlin.Pair $r4;
        java.lang.Object $r5;

        r0 := @this: androidx.benchmark.Shell;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "script");

        $r3 = <androidx.benchmark.ShellImpl: androidx.benchmark.ShellImpl INSTANCE>;

        $r4 = virtualinvoke $r3.<androidx.benchmark.ShellImpl: kotlin.Pair executeScript(java.lang.String,java.lang.String,boolean)>(r1, r2, 0);

        $r5 = virtualinvoke $r4.<kotlin.Pair: java.lang.Object getFirst()>();

        $r6 = (java.lang.String) $r5;

        return $r6;
    }

    public static java.lang.String executeScript$default(androidx.benchmark.Shell, java.lang.String, java.lang.String, int, java.lang.Object)
    {
        androidx.benchmark.Shell r0;
        java.lang.String r1, $r3, r4;
        int i0, $i1;
        java.lang.Object r2;

        r0 := @parameter0: androidx.benchmark.Shell;

        r1 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        r2 := @parameter4: java.lang.Object;

        $i1 = i0 & 2;

        if $i1 == 0 goto label1;

        r4 = null;

     label1:
        $r3 = virtualinvoke r0.<androidx.benchmark.Shell: java.lang.String executeScript(java.lang.String,java.lang.String)>(r1, r4);

        return $r3;
    }

    public final androidx.benchmark.Shell$Output executeScriptWithStderr(java.lang.String, java.lang.String)
    {
        androidx.benchmark.Shell r0;
        java.lang.String r1, r2, $r7, $r9;
        kotlin.Pair $r3;
        androidx.benchmark.ShellImpl $r4;
        androidx.benchmark.Shell$Output $r5;
        java.lang.Object $r6, $r8;

        r0 := @this: androidx.benchmark.Shell;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "script");

        $r4 = <androidx.benchmark.ShellImpl: androidx.benchmark.ShellImpl INSTANCE>;

        $r3 = virtualinvoke $r4.<androidx.benchmark.ShellImpl: kotlin.Pair executeScript(java.lang.String,java.lang.String,boolean)>(r1, r2, 1);

        $r5 = new androidx.benchmark.Shell$Output;

        $r6 = virtualinvoke $r3.<kotlin.Pair: java.lang.Object getFirst()>();

        $r7 = (java.lang.String) $r6;

        $r8 = virtualinvoke $r3.<kotlin.Pair: java.lang.Object getSecond()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r8);

        $r9 = (java.lang.String) $r8;

        specialinvoke $r5.<androidx.benchmark.Shell$Output: void <init>(java.lang.String,java.lang.String)>($r7, $r9);

        return $r5;
    }

    public static androidx.benchmark.Shell$Output executeScriptWithStderr$default(androidx.benchmark.Shell, java.lang.String, java.lang.String, int, java.lang.Object)
    {
        androidx.benchmark.Shell r0;
        java.lang.String r1, r4;
        int i0, $i1;
        java.lang.Object r2;
        androidx.benchmark.Shell$Output $r3;

        r0 := @parameter0: androidx.benchmark.Shell;

        r1 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        r2 := @parameter4: java.lang.Object;

        $i1 = i0 & 2;

        if $i1 == 0 goto label1;

        r4 = null;

     label1:
        $r3 = virtualinvoke r0.<androidx.benchmark.Shell: androidx.benchmark.Shell$Output executeScriptWithStderr(java.lang.String,java.lang.String)>(r1, r4);

        return $r3;
    }

    public final boolean isPackageAlive(java.lang.String)
    {
        androidx.benchmark.Shell r0;
        java.lang.String r1;
        java.util.List $r2;
        java.util.Collection $r3;
        boolean $z0, $z1;

        r0 := @this: androidx.benchmark.Shell;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "packageName");

        $r2 = virtualinvoke r0.<androidx.benchmark.Shell: java.util.List getPidsForProcess(java.lang.String)>(r1);

        $r3 = (java.util.Collection) $r2;

        $z0 = interfaceinvoke $r3.<java.util.Collection: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public final java.util.List getPidsForProcess(java.lang.String)
    {
        androidx.benchmark.Shell r0, $r19, $r29;
        java.lang.String r1, r2, $r4, $r5, $r17, $r22, r42, r48, r53;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Integer r3, $r18, $r36;
        kotlin.text.Regex $r6, $r14;
        java.util.List $r7, $r9, $r11, $r13, $r15, $r23, $r25;
        java.util.ArrayList $r8, $r10, $r12, $r24;
        boolean $z2, $z3, $z5, $z8, $z9, z17, $z20, z21, z24;
        java.lang.Object $r16, $r26, $r28, r33, r34, $r41, $r47, $r52;
        java.lang.CharSequence $r20, $r21, $r37, r55;
        java.lang.Number $r27;
        java.util.Collection r30, r39, r43, r45, r50, r54;
        java.lang.Iterable $r31, $r38, $r44, $r49;
        java.util.Iterator r32, $r40, $r46, $r51;
        kotlin.Pair $r35;

        r0 := @this: androidx.benchmark.Shell;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "processName");

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 < 23 goto label07;

        $r23 = specialinvoke r0.<androidx.benchmark.Shell: java.util.List pgrepLF(java.lang.String)>(r1);

        $r24 = new java.util.ArrayList;

        specialinvoke $r24.<java.util.ArrayList: void <init>()>();

        r30 = (java.util.Collection) $r24;

        $r31 = (java.lang.Iterable) $r23;

        r32 = interfaceinvoke $r31.<java.lang.Iterable: java.util.Iterator iterator()>();

     label01:
        $z8 = interfaceinvoke r32.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label06;

        r33 = interfaceinvoke r32.<java.util.Iterator: java.lang.Object next()>();

        r34 = r33;

        $r35 = (kotlin.Pair) r34;

        $r26 = virtualinvoke $r35.<kotlin.Pair: java.lang.Object component1()>();

        $r27 = (java.lang.Number) $r26;

        i0 = virtualinvoke $r27.<java.lang.Number: int intValue()>();

        $r28 = virtualinvoke $r35.<kotlin.Pair: java.lang.Object component2()>();

        r2 = (java.lang.String) $r28;

        $r29 = <androidx.benchmark.Shell: androidx.benchmark.Shell INSTANCE>;

        $z9 = specialinvoke $r29.<androidx.benchmark.Shell: boolean fullProcessNameMatchesProcess(java.lang.String,java.lang.String)>(r2, r1);

        if $z9 == 0 goto label02;

        $r36 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        goto label03;

     label02:
        $r36 = (java.lang.Integer) null;

     label03:
        if $r36 != null goto label04;

        goto label05;

     label04:
        r3 = $r36;

        interfaceinvoke r30.<java.util.Collection: boolean add(java.lang.Object)>(r3);

     label05:
        goto label01;

     label06:
        $r25 = (java.util.List) r30;

        return $r25;

     label07:
        $r4 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("ps | grep ", r1);

        $r5 = staticinvoke <androidx.benchmark.Shell: java.lang.String executeScript$default(androidx.benchmark.Shell,java.lang.String,java.lang.String,int,java.lang.Object)>(r0, $r4, null, 2, null);

        $r37 = (java.lang.CharSequence) $r5;

        $r6 = new kotlin.text.Regex;

        specialinvoke $r6.<kotlin.text.Regex: void <init>(java.lang.String)>("\r?\n");

        $r7 = virtualinvoke $r6.<kotlin.text.Regex: java.util.List split(java.lang.CharSequence,int)>($r37, 0);

        $r38 = (java.lang.Iterable) $r7;

        $r8 = new java.util.ArrayList;

        $i2 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r38, 10);

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>($i2);

        r39 = (java.util.Collection) $r8;

        $r40 = interfaceinvoke $r38.<java.lang.Iterable: java.util.Iterator iterator()>();

     label08:
        $z2 = interfaceinvoke $r40.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label09;

        $r41 = interfaceinvoke $r40.<java.util.Iterator: java.lang.Object next()>();

        r42 = (java.lang.String) $r41;

        r43 = r39;

        z17 = 0;

        $r20 = (java.lang.CharSequence) r42;

        $r21 = staticinvoke <kotlin.text.StringsKt: java.lang.CharSequence trim(java.lang.CharSequence)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.Object: java.lang.String toString()>();

        interfaceinvoke r43.<java.util.Collection: boolean add(java.lang.Object)>($r22);

        goto label08;

     label09:
        $r9 = (java.util.List) r39;

        $r44 = (java.lang.Iterable) $r9;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        r45 = (java.util.Collection) $r10;

        $r46 = interfaceinvoke $r44.<java.lang.Iterable: java.util.Iterator iterator()>();

     label10:
        $z20 = interfaceinvoke $r46.<java.util.Iterator: boolean hasNext()>();

        if $z20 == 0 goto label11;

        $r47 = interfaceinvoke $r46.<java.util.Iterator: java.lang.Object next()>();

        r48 = (java.lang.String) $r47;

        z21 = 0;

        $r19 = <androidx.benchmark.Shell: androidx.benchmark.Shell INSTANCE>;

        $z5 = specialinvoke $r19.<androidx.benchmark.Shell: boolean psLineContainsProcess(java.lang.String,java.lang.String)>(r48, r1);

        if $z5 == 0 goto label10;

        interfaceinvoke r45.<java.util.Collection: boolean add(java.lang.Object)>($r47);

        goto label10;

     label11:
        $r11 = (java.util.List) r45;

        $r49 = (java.lang.Iterable) $r11;

        $r12 = new java.util.ArrayList;

        $i3 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r49, 10);

        specialinvoke $r12.<java.util.ArrayList: void <init>(int)>($i3);

        r50 = (java.util.Collection) $r12;

        $r51 = interfaceinvoke $r49.<java.lang.Iterable: java.util.Iterator iterator()>();

     label12:
        $z3 = interfaceinvoke $r51.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label13;

        $r52 = interfaceinvoke $r51.<java.util.Iterator: java.lang.Object next()>();

        r53 = (java.lang.String) $r52;

        r54 = r50;

        z24 = 0;

        r55 = (java.lang.CharSequence) r53;

        $r14 = new kotlin.text.Regex;

        specialinvoke $r14.<kotlin.text.Regex: void <init>(java.lang.String)>("\\s+");

        $r15 = virtualinvoke $r14.<kotlin.text.Regex: java.util.List split(java.lang.CharSequence,int)>(r55, 0);

        $r16 = interfaceinvoke $r15.<java.util.List: java.lang.Object get(int)>(1);

        $r17 = (java.lang.String) $r16;

        $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r17);

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        interfaceinvoke r54.<java.util.Collection: boolean add(java.lang.Object)>($r18);

        goto label12;

     label13:
        $r13 = (java.util.List) r50;

        return $r13;
    }

    private final java.util.List pgrepLF(java.lang.String)
    {
        androidx.benchmark.Shell r0;
        java.lang.String r1, r3, $r5, $r6, $r15, r27, r32, r34;
        java.util.List r2, $r8, $r10, $r12;
        java.util.Collection r4, r24, r29;
        kotlin.text.Regex $r7;
        java.util.ArrayList $r9, $r11;
        int $i0, $i1, $i2;
        boolean $z0, $z5, $z7;
        java.lang.CharSequence $r13, $r14, $r16, $r21, $r22;
        java.lang.Object $r17, $r18, r26, r31;
        kotlin.Pair $r19;
        java.lang.Integer $r20;
        java.lang.Iterable $r23, $r28;
        java.util.Iterator r25, r30;
        java.lang.String[] r33;

        r0 := @this: androidx.benchmark.Shell;

        r1 := @parameter0: java.lang.String;

        $r5 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("pgrep -l -f ", r1);

        $r6 = virtualinvoke r0.<androidx.benchmark.Shell: java.lang.String executeCommand(java.lang.String)>($r5);

        $r22 = (java.lang.CharSequence) $r6;

        $r7 = new kotlin.text.Regex;

        specialinvoke $r7.<kotlin.text.Regex: void <init>(java.lang.String)>("\r?\n");

        $r8 = virtualinvoke $r7.<kotlin.text.Regex: java.util.List split(java.lang.CharSequence,int)>($r22, 0);

        $r23 = (java.lang.Iterable) $r8;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r24 = (java.util.Collection) $r9;

        r25 = interfaceinvoke $r23.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z5 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label4;

        r26 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>();

        r27 = (java.lang.String) r26;

        $r21 = (java.lang.CharSequence) r27;

        $i2 = interfaceinvoke $r21.<java.lang.CharSequence: int length()>();

        if $i2 <= 0 goto label2;

        $z7 = 1;

        goto label3;

     label2:
        $z7 = 0;

     label3:
        if $z7 == 0 goto label1;

        interfaceinvoke r24.<java.util.Collection: boolean add(java.lang.Object)>(r26);

        goto label1;

     label4:
        $r10 = (java.util.List) r24;

        $r28 = (java.lang.Iterable) $r10;

        $r11 = new java.util.ArrayList;

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r28, 10);

        specialinvoke $r11.<java.util.ArrayList: void <init>(int)>($i0);

        r29 = (java.util.Collection) $r11;

        r30 = interfaceinvoke $r28.<java.lang.Iterable: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        r31 = interfaceinvoke r30.<java.util.Iterator: java.lang.Object next()>();

        r32 = (java.lang.String) r31;

        r4 = r29;

        $r13 = (java.lang.CharSequence) r32;

        $r14 = staticinvoke <kotlin.text.StringsKt: java.lang.CharSequence trim(java.lang.CharSequence)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>();

        $r16 = (java.lang.CharSequence) $r15;

        r33 = newarray (java.lang.String)[1];

        r33[0] = " ";

        r2 = staticinvoke <kotlin.text.StringsKt: java.util.List split$default(java.lang.CharSequence,java.lang.String[],boolean,int,int,java.lang.Object)>($r16, r33, 0, 0, 6, null);

        $r17 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(0);

        r34 = (java.lang.String) $r17;

        $r18 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(1);

        r3 = (java.lang.String) $r18;

        $r19 = new kotlin.Pair;

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r34);

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        specialinvoke $r19.<kotlin.Pair: void <init>(java.lang.Object,java.lang.Object)>($r20, r3);

        interfaceinvoke r4.<java.util.Collection: boolean add(java.lang.Object)>($r19);

        goto label5;

     label6:
        $r12 = (java.util.List) r29;

        return $r12;
    }

    public final java.util.List getRunningProcessesForPackage(java.lang.String)
    {
        androidx.benchmark.Shell r0;
        java.lang.String r1, r4, r5, $r9, $r10, $r17, $r18, $r23, $r29, $r30, $r35, r41, r46;
        java.lang.Object r2, $r22, r34, $r40, $r45;
        kotlin.Pair $r3;
        java.util.Collection r6, r31, r38, r43;
        java.lang.CharSequence $r7, $r8, $r36;
        boolean $z3, $z4, $z5, $z7, $z9, $z10, $z12, $z13, z20, $z23, z24, $z25;
        int $i0, $i1;
        kotlin.text.Regex $r11;
        java.util.List $r12, $r14, $r16, $r19, $r21;
        java.util.ArrayList $r13, $r15, $r20;
        java.lang.StringBuilder $r24, $r25, $r26, $r27;
        java.lang.IllegalArgumentException $r28;
        java.lang.Iterable $r32, $r37, $r42;
        java.util.Iterator r33, $r39, $r44;

        r0 := @this: androidx.benchmark.Shell;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "packageName");

        $r8 = (java.lang.CharSequence) r1;

        $r7 = (java.lang.CharSequence) ":";

        $z3 = staticinvoke <kotlin.text.StringsKt: boolean contains$default(java.lang.CharSequence,java.lang.CharSequence,boolean,int,java.lang.Object)>($r8, $r7, 0, 2, null);

        if $z3 != 0 goto label01;

        $z13 = 1;

        goto label02;

     label01:
        $z13 = 0;

     label02:
        if $z13 != 0 goto label03;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must not contain \':\'");

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        $r28 = new java.lang.IllegalArgumentException;

        $r29 = virtualinvoke $r30.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r28.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r29);

        throw $r28;

     label03:
        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 23 goto label11;

        $r19 = specialinvoke r0.<androidx.benchmark.Shell: java.util.List pgrepLF(java.lang.String)>(r1);

        $r20 = new java.util.ArrayList;

        specialinvoke $r20.<java.util.ArrayList: void <init>()>();

        r31 = (java.util.Collection) $r20;

        $r32 = (java.lang.Iterable) $r19;

        r33 = interfaceinvoke $r32.<java.lang.Iterable: java.util.Iterator iterator()>();

     label04:
        $z9 = interfaceinvoke r33.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label10;

        r34 = interfaceinvoke r33.<java.util.Iterator: java.lang.Object next()>();

        r2 = r34;

        $r3 = (kotlin.Pair) r2;

        $r22 = virtualinvoke $r3.<kotlin.Pair: java.lang.Object component2()>();

        r4 = (java.lang.String) $r22;

        $z10 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r4, r1);

        if $z10 != 0 goto label05;

        $r23 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>(r1, ":");

        $z12 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>(r4, $r23, 0, 2, null);

        if $z12 == 0 goto label06;

     label05:
        $r35 = r4;

        goto label07;

     label06:
        $r35 = (java.lang.String) null;

     label07:
        if $r35 != null goto label08;

        goto label09;

     label08:
        r5 = $r35;

        interfaceinvoke r31.<java.util.Collection: boolean add(java.lang.Object)>(r5);

     label09:
        goto label04;

     label10:
        $r21 = (java.util.List) r31;

        return $r21;

     label11:
        $r9 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("ps | grep ", r1);

        $r10 = staticinvoke <androidx.benchmark.Shell: java.lang.String executeScript$default(androidx.benchmark.Shell,java.lang.String,java.lang.String,int,java.lang.Object)>(r0, $r9, null, 2, null);

        $r36 = (java.lang.CharSequence) $r10;

        $r11 = new kotlin.text.Regex;

        specialinvoke $r11.<kotlin.text.Regex: void <init>(java.lang.String)>("\r?\n");

        $r12 = virtualinvoke $r11.<kotlin.text.Regex: java.util.List split(java.lang.CharSequence,int)>($r36, 0);

        $r37 = (java.lang.Iterable) $r12;

        $r13 = new java.util.ArrayList;

        $i1 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r37, 10);

        specialinvoke $r13.<java.util.ArrayList: void <init>(int)>($i1);

        r38 = (java.util.Collection) $r13;

        $r39 = interfaceinvoke $r37.<java.lang.Iterable: java.util.Iterator iterator()>();

     label12:
        $z4 = interfaceinvoke $r39.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label13;

        $r40 = interfaceinvoke $r39.<java.util.Iterator: java.lang.Object next()>();

        r41 = (java.lang.String) $r40;

        r6 = r38;

        z20 = 0;

        $r18 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfterLast$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>(r41, " ", null, 2, null);

        interfaceinvoke r6.<java.util.Collection: boolean add(java.lang.Object)>($r18);

        goto label12;

     label13:
        $r14 = (java.util.List) r38;

        $r42 = (java.lang.Iterable) $r14;

        $r15 = new java.util.ArrayList;

        specialinvoke $r15.<java.util.ArrayList: void <init>()>();

        r43 = (java.util.Collection) $r15;

        $r44 = interfaceinvoke $r42.<java.lang.Iterable: java.util.Iterator iterator()>();

     label14:
        $z23 = interfaceinvoke $r44.<java.util.Iterator: boolean hasNext()>();

        if $z23 == 0 goto label18;

        $r45 = interfaceinvoke $r44.<java.util.Iterator: java.lang.Object next()>();

        r46 = (java.lang.String) $r45;

        z24 = 0;

        $z5 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r46, r1);

        if $z5 != 0 goto label15;

        $r17 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>(r1, ":");

        $z7 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>(r46, $r17, 0, 2, null);

        if $z7 == 0 goto label16;

     label15:
        $z25 = 1;

        goto label17;

     label16:
        $z25 = 0;

     label17:
        if $z25 == 0 goto label14;

        interfaceinvoke r43.<java.util.Collection: boolean add(java.lang.Object)>($r45);

        goto label14;

     label18:
        $r16 = (java.util.List) r43;

        return $r16;
    }

    public final boolean isProcessAlive(int, java.lang.String)
    {
        androidx.benchmark.Shell r0, $r9;
        int i0;
        java.lang.String r1, r3, $r5, $r6;
        java.lang.Object r2;
        java.lang.Integer $r4;
        kotlin.text.Regex $r7;
        java.util.List $r8;
        boolean $z1, $z2, $z3, $z5, $z6;
        java.util.Collection $r10;
        java.lang.CharSequence $r11;
        byte b1;
        java.lang.Iterable $r12;
        java.util.Iterator r13;

        r0 := @this: androidx.benchmark.Shell;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "processName");

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("ps ", $r4);

        $r6 = virtualinvoke r0.<androidx.benchmark.Shell: java.lang.String executeCommand(java.lang.String)>($r5);

        $r11 = (java.lang.CharSequence) $r6;

        $r7 = new kotlin.text.Regex;

        specialinvoke $r7.<kotlin.text.Regex: void <init>(java.lang.String)>("\r?\n");

        b1 = 0;

        $r8 = virtualinvoke $r7.<kotlin.text.Regex: java.util.List split(java.lang.CharSequence,int)>($r11, b1);

        $r12 = (java.lang.Iterable) $r8;

        $z1 = $r12 instanceof java.util.Collection;

        if $z1 == 0 goto label1;

        $r10 = (java.util.Collection) $r12;

        $z3 = interfaceinvoke $r10.<java.util.Collection: boolean isEmpty()>();

        if $z3 == 0 goto label1;

        $z5 = 0;

        goto label4;

     label1:
        r13 = interfaceinvoke $r12.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z6 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label3;

        r2 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) r2;

        $r9 = <androidx.benchmark.Shell: androidx.benchmark.Shell INSTANCE>;

        $z2 = specialinvoke $r9.<androidx.benchmark.Shell: boolean psLineContainsProcess(java.lang.String,java.lang.String)>(r3, r1);

        if $z2 == 0 goto label2;

        $z5 = 1;

        goto label4;

     label3:
        $z5 = 0;

     label4:
        return $z5;
    }

    public final void terminateProcessesAndWait(long, int, java.lang.String)
    {
        androidx.benchmark.Shell r0;
        long l0;
        int i1, i2, $i3, $i4;
        java.lang.String r1;
        java.util.List r2, $r6;
        java.util.Iterator r3;
        java.lang.Object r4;
        java.util.Collection r5, r16, r17;
        java.util.ArrayList $r7;
        boolean $z2;
        androidx.benchmark.Shell$ProcessPid[] $r8, $r11, $r18;
        java.lang.Object[] $r9, $r10;
        java.lang.NullPointerException $r12;
        java.lang.Number $r13;
        androidx.benchmark.Shell$ProcessPid $r14;
        java.lang.Iterable $r15;

        r0 := @this: androidx.benchmark.Shell;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "processName");

        $r6 = virtualinvoke r0.<androidx.benchmark.Shell: java.util.List getPidsForProcess(java.lang.String)>(r1);

        $r15 = (java.lang.Iterable) $r6;

        $r7 = new java.util.ArrayList;

        $i3 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r15, 10);

        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>($i3);

        r16 = (java.util.Collection) $r7;

        r3 = interfaceinvoke $r15.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r13 = (java.lang.Number) r4;

        i2 = virtualinvoke $r13.<java.lang.Number: int intValue()>();

        r5 = r16;

        $r14 = new androidx.benchmark.Shell$ProcessPid;

        specialinvoke $r14.<androidx.benchmark.Shell$ProcessPid: void <init>(java.lang.String,int)>(r1, i2);

        interfaceinvoke r5.<java.util.Collection: boolean add(java.lang.Object)>($r14);

        goto label1;

     label2:
        r2 = (java.util.List) r16;

        r17 = (java.util.Collection) r2;

        $r8 = newarray (androidx.benchmark.Shell$ProcessPid)[0];

        $r9 = interfaceinvoke r17.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        if $r9 != null goto label3;

        $r12 = new java.lang.NullPointerException;

        specialinvoke $r12.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlin.Array<T of kotlin.collections.ArraysKt__ArraysJVMKt.toTypedArray>");

        throw $r12;

     label3:
        $r18 = (androidx.benchmark.Shell$ProcessPid[]) $r9;

        $i4 = lengthof $r18;

        $r10 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r18, $i4);

        $r11 = (androidx.benchmark.Shell$ProcessPid[]) $r10;

        virtualinvoke r0.<androidx.benchmark.Shell: void terminateProcessesAndWait(long,int,androidx.benchmark.Shell$ProcessPid[])>(l0, i1, $r11);

        return;
    }

    public final transient void terminateProcessesAndWait(long, int, androidx.benchmark.Shell$ProcessPid[])
    {
        androidx.benchmark.Shell r0, $r22, $r24;
        long l0;
        int i1, $i2, $i3, i4, $i5, $i6;
        androidx.benchmark.Shell$ProcessPid[] r1, r30;
        androidx.benchmark.Shell$ProcessPid r2, r5, r31;
        java.util.Iterator r3;
        java.lang.Object r4;
        java.lang.IllegalStateException $r6;
        java.lang.String $r7, $r21, $r23, $r26, $r27, r32, r37;
        java.util.ArrayList $r8;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r15, $r16, $r17, $r18, $r19, $r20;
        androidx.benchmark.UserspaceTracing $r13, $r14, $r29;
        java.lang.Integer $r25;
        java.lang.Throwable $r28;
        java.util.List $r33;
        java.lang.Iterable r34, r35;
        java.util.Collection r36;
        kotlin.Unit r38;

        r0 := @this: androidx.benchmark.Shell;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        r1 := @parameter2: androidx.benchmark.Shell$ProcessPid[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "processes");

        r30 = r1;

        i4 = 0;

        $i5 = lengthof r30;

     label01:
        if i4 >= $i5 goto label02;

        r31 = r30[i4];

        i4 = i4 + 1;

        r2 = r31;

        $r24 = <androidx.benchmark.Shell: androidx.benchmark.Shell INSTANCE>;

        $i3 = virtualinvoke r2.<androidx.benchmark.Shell$ProcessPid: int getPid()>();

        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r26 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("kill -TERM ", $r25);

        r32 = virtualinvoke $r24.<androidx.benchmark.Shell: java.lang.String executeCommand(java.lang.String)>($r26);

        $r27 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("kill -TERM command output - ", r32);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Benchmark", $r27);

        goto label01;

     label02:
        $r33 = staticinvoke <kotlin.collections.ArraysKt: java.util.List toList(java.lang.Object[])>(r1);

        $i6 = 0;

     label03:
        if $i6 >= i1 goto label12;

        $i6 = $i6 + 1;

        r34 = (java.lang.Iterable) $r33;

        r35 = r34;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r36 = (java.util.Collection) $r8;

        r3 = interfaceinvoke r35.<java.lang.Iterable: java.util.Iterator iterator()>();

     label04:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label05;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (androidx.benchmark.Shell$ProcessPid) r4;

        $r22 = <androidx.benchmark.Shell: androidx.benchmark.Shell INSTANCE>;

        $i2 = virtualinvoke r5.<androidx.benchmark.Shell$ProcessPid: int getPid()>();

        $r23 = virtualinvoke r5.<androidx.benchmark.Shell$ProcessPid: java.lang.String getProcessName()>();

        $z1 = virtualinvoke $r22.<androidx.benchmark.Shell: boolean isProcessAlive(int,java.lang.String)>($i2, $r23);

        if $z1 == 0 goto label04;

        interfaceinvoke r36.<java.util.Collection: boolean add(java.lang.Object)>(r4);

        goto label04;

     label05:
        $r33 = (java.util.List) r36;

        $z0 = interfaceinvoke $r33.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label06;

        return;

     label06:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("wait for ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r33);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to die");

        r37 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = <androidx.benchmark.UserspaceTracing: androidx.benchmark.UserspaceTracing INSTANCE>;

        staticinvoke <androidx.benchmark.UserspaceTracing: void beginSection$default(androidx.benchmark.UserspaceTracing,java.lang.String,long,int,java.lang.Object)>($r13, r37, 0L, 2, null);

     label07:
        staticinvoke <android.os.SystemClock: void sleep(long)>(l0);

        r38 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label08:
        $r14 = <androidx.benchmark.UserspaceTracing: androidx.benchmark.UserspaceTracing INSTANCE>;

        staticinvoke <androidx.benchmark.UserspaceTracing: void endSection$default(androidx.benchmark.UserspaceTracing,long,int,java.lang.Object)>($r14, 0L, 1, null);

        goto label11;

     label09:
        $r28 := @caughtexception;

     label10:
        $r29 = <androidx.benchmark.UserspaceTracing: androidx.benchmark.UserspaceTracing INSTANCE>;

        staticinvoke <androidx.benchmark.UserspaceTracing: void endSection$default(androidx.benchmark.UserspaceTracing,long,int,java.lang.Object)>($r29, 0L, 1, null);

        throw $r28;

     label11:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Waiting ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms for ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r33);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to die");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Benchmark", $r21);

        goto label03;

     label12:
        $r6 = new java.lang.IllegalStateException;

        $r7 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Failed to stop ", $r33);

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r6;

        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public final boolean pathExists(java.lang.String)
    {
        androidx.benchmark.Shell r0;
        java.lang.String r1, $r2, $r3, $r6;
        java.lang.CharSequence $r4, $r5;
        boolean $z0;

        r0 := @this: androidx.benchmark.Shell;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "absoluteFilePath");

        $r2 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("ls ", r1);

        $r3 = virtualinvoke r0.<androidx.benchmark.Shell: java.lang.String executeCommand(java.lang.String)>($r2);

        $r4 = (java.lang.CharSequence) $r3;

        $r5 = staticinvoke <kotlin.text.StringsKt: java.lang.CharSequence trim(java.lang.CharSequence)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r6, r1);

        return $z0;
    }

    static void <clinit>()
    {
        androidx.benchmark.Shell $r0;

        $r0 = new androidx.benchmark.Shell;

        specialinvoke $r0.<androidx.benchmark.Shell: void <init>()>();

        <androidx.benchmark.Shell: androidx.benchmark.Shell INSTANCE> = $r0;

        return;
    }

androidx.benchmark.Shell$Output
<androidx.benchmark.Shell$Output: java.lang.String stdout>
<androidx.benchmark.Shell$Output: java.lang.String stderr>
    public void <init>(java.lang.String, java.lang.String)
    {
        androidx.benchmark.Shell$Output r0;
        java.lang.String r1, r2;

        r0 := @this: androidx.benchmark.Shell$Output;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "stdout");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "stderr");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.benchmark.Shell$Output: java.lang.String stdout> = r1;

        r0.<androidx.benchmark.Shell$Output: java.lang.String stderr> = r2;

        return;
    }

    public final java.lang.String getStdout()
    {
        androidx.benchmark.Shell$Output r0;
        java.lang.String $r1;

        r0 := @this: androidx.benchmark.Shell$Output;

        $r1 = r0.<androidx.benchmark.Shell$Output: java.lang.String stdout>;

        return $r1;
    }

    public final java.lang.String getStderr()
    {
        androidx.benchmark.Shell$Output r0;
        java.lang.String $r1;

        r0 := @this: androidx.benchmark.Shell$Output;

        $r1 = r0.<androidx.benchmark.Shell$Output: java.lang.String stderr>;

        return $r1;
    }

    public final java.lang.String component1()
    {
        androidx.benchmark.Shell$Output r0;
        java.lang.String $r1;

        r0 := @this: androidx.benchmark.Shell$Output;

        $r1 = r0.<androidx.benchmark.Shell$Output: java.lang.String stdout>;

        return $r1;
    }

    public final java.lang.String component2()
    {
        androidx.benchmark.Shell$Output r0;
        java.lang.String $r1;

        r0 := @this: androidx.benchmark.Shell$Output;

        $r1 = r0.<androidx.benchmark.Shell$Output: java.lang.String stderr>;

        return $r1;
    }

    public final androidx.benchmark.Shell$Output copy(java.lang.String, java.lang.String)
    {
        androidx.benchmark.Shell$Output r0, $r3;
        java.lang.String r1, r2;

        r0 := @this: androidx.benchmark.Shell$Output;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "stdout");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "stderr");

        $r3 = new androidx.benchmark.Shell$Output;

        specialinvoke $r3.<androidx.benchmark.Shell$Output: void <init>(java.lang.String,java.lang.String)>(r1, r2);

        return $r3;
    }

    public static androidx.benchmark.Shell$Output copy$default(androidx.benchmark.Shell$Output, java.lang.String, java.lang.String, int, java.lang.Object)
    {
        androidx.benchmark.Shell$Output r0, $r2;
        int i0, $i1, $i2;
        java.lang.Object r1;
        java.lang.String r3, r4;

        r0 := @parameter0: androidx.benchmark.Shell$Output;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        r1 := @parameter4: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        r3 = r0.<androidx.benchmark.Shell$Output: java.lang.String stdout>;

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        r4 = r0.<androidx.benchmark.Shell$Output: java.lang.String stderr>;

     label2:
        $r2 = virtualinvoke r0.<androidx.benchmark.Shell$Output: androidx.benchmark.Shell$Output copy(java.lang.String,java.lang.String)>(r3, r4);

        return $r2;
    }

    public java.lang.String toString()
    {
        androidx.benchmark.Shell$Output r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r7, $r8;
        java.lang.String $r3, $r6, $r9;

        r0 := @this: androidx.benchmark.Shell$Output;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Output(stdout=");

        $r3 = r0.<androidx.benchmark.Shell$Output: java.lang.String stdout>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", stderr=");

        $r6 = r0.<androidx.benchmark.Shell$Output: java.lang.String stderr>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public int hashCode()
    {
        androidx.benchmark.Shell$Output r0;
        java.lang.String $r1, $r2;
        int $i0, $i1, i2, i3;

        r0 := @this: androidx.benchmark.Shell$Output;

        $r1 = r0.<androidx.benchmark.Shell$Output: java.lang.String stdout>;

        i2 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        $i0 = i2 * 31;

        $r2 = r0.<androidx.benchmark.Shell$Output: java.lang.String stderr>;

        $i1 = virtualinvoke $r2.<java.lang.String: int hashCode()>();

        i3 = $i0 + $i1;

        return i3;
    }

    public boolean equals(java.lang.Object)
    {
        androidx.benchmark.Shell$Output r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        java.lang.String $r3, $r4, $r5, $r6;

        r0 := @this: androidx.benchmark.Shell$Output;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof androidx.benchmark.Shell$Output;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (androidx.benchmark.Shell$Output) r1;

        $r4 = r0.<androidx.benchmark.Shell$Output: java.lang.String stdout>;

        $r3 = r2.<androidx.benchmark.Shell$Output: java.lang.String stdout>;

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, $r3);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        $r6 = r0.<androidx.benchmark.Shell$Output: java.lang.String stderr>;

        $r5 = r2.<androidx.benchmark.Shell$Output: java.lang.String stderr>;

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r6, $r5);

        if $z2 != 0 goto label4;

        return 0;

     label4:
        return 1;
    }

androidx.benchmark.Shell$ProcessPid
<androidx.benchmark.Shell$ProcessPid: java.lang.String processName>
<androidx.benchmark.Shell$ProcessPid: int pid>
    public void <init>(java.lang.String, int)
    {
        androidx.benchmark.Shell$ProcessPid r0;
        java.lang.String r1;
        int i0;

        r0 := @this: androidx.benchmark.Shell$ProcessPid;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "processName");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.benchmark.Shell$ProcessPid: java.lang.String processName> = r1;

        r0.<androidx.benchmark.Shell$ProcessPid: int pid> = i0;

        return;
    }

    public final java.lang.String getProcessName()
    {
        androidx.benchmark.Shell$ProcessPid r0;
        java.lang.String $r1;

        r0 := @this: androidx.benchmark.Shell$ProcessPid;

        $r1 = r0.<androidx.benchmark.Shell$ProcessPid: java.lang.String processName>;

        return $r1;
    }

    public final int getPid()
    {
        androidx.benchmark.Shell$ProcessPid r0;
        int $i0;

        r0 := @this: androidx.benchmark.Shell$ProcessPid;

        $i0 = r0.<androidx.benchmark.Shell$ProcessPid: int pid>;

        return $i0;
    }

    public final boolean isAlive()
    {
        androidx.benchmark.Shell$ProcessPid r0;
        java.lang.String $r1;
        int $i0;
        androidx.benchmark.Shell $r2;
        boolean $z0;

        r0 := @this: androidx.benchmark.Shell$ProcessPid;

        $r2 = <androidx.benchmark.Shell: androidx.benchmark.Shell INSTANCE>;

        $i0 = r0.<androidx.benchmark.Shell$ProcessPid: int pid>;

        $r1 = r0.<androidx.benchmark.Shell$ProcessPid: java.lang.String processName>;

        $z0 = virtualinvoke $r2.<androidx.benchmark.Shell: boolean isProcessAlive(int,java.lang.String)>($i0, $r1);

        return $z0;
    }

    public final java.lang.String component1()
    {
        androidx.benchmark.Shell$ProcessPid r0;
        java.lang.String $r1;

        r0 := @this: androidx.benchmark.Shell$ProcessPid;

        $r1 = r0.<androidx.benchmark.Shell$ProcessPid: java.lang.String processName>;

        return $r1;
    }

    public final int component2()
    {
        androidx.benchmark.Shell$ProcessPid r0;
        int $i0;

        r0 := @this: androidx.benchmark.Shell$ProcessPid;

        $i0 = r0.<androidx.benchmark.Shell$ProcessPid: int pid>;

        return $i0;
    }

    public final androidx.benchmark.Shell$ProcessPid copy(java.lang.String, int)
    {
        androidx.benchmark.Shell$ProcessPid r0, $r2;
        java.lang.String r1;
        int i0;

        r0 := @this: androidx.benchmark.Shell$ProcessPid;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "processName");

        $r2 = new androidx.benchmark.Shell$ProcessPid;

        specialinvoke $r2.<androidx.benchmark.Shell$ProcessPid: void <init>(java.lang.String,int)>(r1, i0);

        return $r2;
    }

    public static androidx.benchmark.Shell$ProcessPid copy$default(androidx.benchmark.Shell$ProcessPid, java.lang.String, int, int, java.lang.Object)
    {
        androidx.benchmark.Shell$ProcessPid r0, $r2;
        int i0, $i1, $i2, i3;
        java.lang.Object r1;
        java.lang.String r3;

        r0 := @parameter0: androidx.benchmark.Shell$ProcessPid;

        r3 := @parameter1: java.lang.String;

        i3 := @parameter2: int;

        i0 := @parameter3: int;

        r1 := @parameter4: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        r3 = r0.<androidx.benchmark.Shell$ProcessPid: java.lang.String processName>;

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        i3 = r0.<androidx.benchmark.Shell$ProcessPid: int pid>;

     label2:
        $r2 = virtualinvoke r0.<androidx.benchmark.Shell$ProcessPid: androidx.benchmark.Shell$ProcessPid copy(java.lang.String,int)>(r3, i3);

        return $r2;
    }

    public java.lang.String toString()
    {
        androidx.benchmark.Shell$ProcessPid r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r6, $r7;
        java.lang.String $r3, $r8;
        int $i0;

        r0 := @this: androidx.benchmark.Shell$ProcessPid;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ProcessPid(processName=");

        $r3 = r0.<androidx.benchmark.Shell$ProcessPid: java.lang.String processName>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid=");

        $i0 = r0.<androidx.benchmark.Shell$ProcessPid: int pid>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public int hashCode()
    {
        androidx.benchmark.Shell$ProcessPid r0;
        java.lang.String $r1;
        int $i0, $i1, $i2, i3, i4;

        r0 := @this: androidx.benchmark.Shell$ProcessPid;

        $r1 = r0.<androidx.benchmark.Shell$ProcessPid: java.lang.String processName>;

        i3 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        $i1 = i3 * 31;

        $i0 = r0.<androidx.benchmark.Shell$ProcessPid: int pid>;

        $i2 = staticinvoke <java.lang.Integer: int hashCode(int)>($i0);

        i4 = $i1 + $i2;

        return i4;
    }

    public boolean equals(java.lang.Object)
    {
        androidx.benchmark.Shell$ProcessPid r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.lang.String $r3, $r4;
        int $i0, $i1;

        r0 := @this: androidx.benchmark.Shell$ProcessPid;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof androidx.benchmark.Shell$ProcessPid;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (androidx.benchmark.Shell$ProcessPid) r1;

        $r4 = r0.<androidx.benchmark.Shell$ProcessPid: java.lang.String processName>;

        $r3 = r2.<androidx.benchmark.Shell$ProcessPid: java.lang.String processName>;

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, $r3);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        $i1 = r0.<androidx.benchmark.Shell$ProcessPid: int pid>;

        $i0 = r2.<androidx.benchmark.Shell$ProcessPid: int pid>;

        if $i1 == $i0 goto label4;

        return 0;

     label4:
        return 1;
    }

