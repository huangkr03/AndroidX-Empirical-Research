androidx.work.ArrayCreatingInputMerger
    public void <init>()
    {
        androidx.work.ArrayCreatingInputMerger r0;

        r0 := @this: androidx.work.ArrayCreatingInputMerger;

        specialinvoke r0.<androidx.work.InputMerger: void <init>()>();

        return;
    }

    public androidx.work.Data merge(java.util.List)
    {
        androidx.work.ArrayCreatingInputMerger r0;
        java.util.List r1;
        androidx.work.Data$Builder r2, $r15;
        java.util.Map r3, r12, $r20;
        java.util.Iterator r4, r6;
        androidx.work.Data r5, $r18;
        java.util.Map$Entry r7;
        java.lang.String r8, r13;
        java.lang.Object r9, r11, $r19, $r22, $r23, $r28, r29, r30;
        java.lang.Class r10, r14, $r24, $r27;
        java.util.HashMap $r16;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Set $r21;
        java.lang.IllegalArgumentException $r25;

        r0 := @this: androidx.work.ArrayCreatingInputMerger;

        r1 := @parameter0: java.util.List;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "inputs");

        $r15 = new androidx.work.Data$Builder;

        specialinvoke $r15.<androidx.work.Data$Builder: void <init>()>();

        r2 = $r15;

        $r16 = new java.util.HashMap;

        specialinvoke $r16.<java.util.HashMap: void <init>()>();

        r3 = (java.util.Map) $r16;

        r4 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r19 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (androidx.work.Data) $r19;

        $r20 = virtualinvoke r5.<androidx.work.Data: java.util.Map getKeyValueMap()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r20, "input.keyValueMap");

        $r21 = interfaceinvoke $r20.<java.util.Map: java.util.Set entrySet()>();

        r6 = interfaceinvoke $r21.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label01;

        $r22 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r22;

        $r23 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        r8 = (java.lang.String) $r23;

        r9 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        if r9 == null goto label03;

        $r27 = virtualinvoke r9.<java.lang.Object: java.lang.Class getClass()>();

        if $r27 != null goto label04;

     label03:
        $r27 = class "Ljava/lang/String;";

     label04:
        r10 = $r27;

        r11 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8);

        r12 = r3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r8, "key");

        r13 = r8;

        if r11 != null goto label06;

        $z4 = virtualinvoke r10.<java.lang.Class: boolean isArray()>();

        if $z4 == 0 goto label05;

        $r28 = r9;

        goto label09;

     label05:
        $r28 = specialinvoke r0.<androidx.work.ArrayCreatingInputMerger: java.lang.Object createArrayFor(java.lang.Object,java.lang.Class)>(r9, r10);

        goto label09;

     label06:
        r14 = virtualinvoke r11.<java.lang.Object: java.lang.Class getClass()>();

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r14, r10);

        if $z2 == 0 goto label07;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r9, "value");

        $r28 = specialinvoke r0.<androidx.work.ArrayCreatingInputMerger: java.lang.Object concatenateArrays(java.lang.Object,java.lang.Object)>(r11, r9);

        goto label09;

     label07:
        $r24 = virtualinvoke r14.<java.lang.Class: java.lang.Class getComponentType()>();

        $z3 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r24, r10);

        if $z3 == 0 goto label08;

        $r28 = specialinvoke r0.<androidx.work.ArrayCreatingInputMerger: java.lang.Object concatenateArrayAndNonArray(java.lang.Object,java.lang.Object,java.lang.Class)>(r11, r9, r10);

        goto label09;

     label08:
        $r25 = new java.lang.IllegalArgumentException;

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r25;

     label09:
        r29 = $r28;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r29, "if (existingValue == nul\u2026      }\n                }");

        r30 = r29;

        interfaceinvoke r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r13, r30);

        goto label02;

     label10:
        virtualinvoke r2.<androidx.work.Data$Builder: androidx.work.Data$Builder putAll(java.util.Map)>(r3);

        $r18 = virtualinvoke r2.<androidx.work.Data$Builder: androidx.work.Data build()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r18, "output.build()");

        return $r18;
    }

    private final java.lang.Object concatenateArrays(java.lang.Object, java.lang.Object)
    {
        androidx.work.ArrayCreatingInputMerger r0;
        java.lang.Object r1, r2, r3;
        int i0, i1, $i2;
        java.lang.Class $r4, $r5;

        r0 := @this: androidx.work.ArrayCreatingInputMerger;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r1);

        i1 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r2);

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r5);

        $i2 = i0 + i1;

        r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r5, $i2);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r3, 0, i0);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r3, i0, i1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r3, "newArray");

        return r3;
    }

    private final java.lang.Object concatenateArrayAndNonArray(java.lang.Object, java.lang.Object, java.lang.Class)
    {
        androidx.work.ArrayCreatingInputMerger r0;
        java.lang.Object r1, r2, r4;
        java.lang.Class r3;
        int i0, $i1;

        r0 := @this: androidx.work.ArrayCreatingInputMerger;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Class;

        i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r1);

        $i1 = i0 + 1;

        r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r3, $i1);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r4, 0, i0);

        staticinvoke <java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>(r4, i0, r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r4, "newArray");

        return r4;
    }

    private final java.lang.Object createArrayFor(java.lang.Object, java.lang.Class)
    {
        androidx.work.ArrayCreatingInputMerger r0;
        java.lang.Object r1, r3;
        java.lang.Class r2;

        r0 := @this: androidx.work.ArrayCreatingInputMerger;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Class;

        r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r2, 1);

        staticinvoke <java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>(r3, 0, r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r3, "newArray");

        return r3;
    }

