kotlin.coroutines.SafeContinuation
<kotlin.coroutines.SafeContinuation: kotlin.coroutines.SafeContinuation$Companion Companion>
<kotlin.coroutines.SafeContinuation: java.util.concurrent.atomic.AtomicReferenceFieldUpdater RESULT>
<kotlin.coroutines.SafeContinuation: kotlin.coroutines.Continuation delegate>
<kotlin.coroutines.SafeContinuation: java.lang.Object result>
    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r0;
        kotlin.coroutines.SafeContinuation$Companion $r1;

        $r1 = new kotlin.coroutines.SafeContinuation$Companion;

        specialinvoke $r1.<kotlin.coroutines.SafeContinuation$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <kotlin.coroutines.SafeContinuation: kotlin.coroutines.SafeContinuation$Companion Companion> = $r1;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lkotlin/coroutines/SafeContinuation;", class "Ljava/lang/Object;", "result");

        <kotlin.coroutines.SafeContinuation: java.util.concurrent.atomic.AtomicReferenceFieldUpdater RESULT> = $r0;

        return;
    }

    public void <init>(kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.SafeContinuation $r0;
        kotlin.coroutines.Continuation $r1;
        kotlin.coroutines.intrinsics.CoroutineSingletons $r2;

        $r0 := @this: kotlin.coroutines.SafeContinuation;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "delegate");

        $r2 = <kotlin.coroutines.intrinsics.CoroutineSingletons: kotlin.coroutines.intrinsics.CoroutineSingletons UNDECIDED>;

        specialinvoke $r0.<kotlin.coroutines.SafeContinuation: void <init>(kotlin.coroutines.Continuation,java.lang.Object)>($r1, $r2);

        return;
    }

    public void <init>(kotlin.coroutines.Continuation, java.lang.Object)
    {
        kotlin.coroutines.SafeContinuation $r0;
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2;

        $r0 := @this: kotlin.coroutines.SafeContinuation;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $r2 := @parameter1: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "delegate");

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<kotlin.coroutines.SafeContinuation: kotlin.coroutines.Continuation delegate> = $r1;

        $r0.<kotlin.coroutines.SafeContinuation: java.lang.Object result> = $r2;

        return;
    }

    public kotlin.coroutines.jvm.internal.CoroutineStackFrame getCallerFrame()
    {
        kotlin.coroutines.SafeContinuation $r0;
        boolean $z0;
        kotlin.coroutines.Continuation $r1;
        kotlin.coroutines.jvm.internal.CoroutineStackFrame $r2;

        $r0 := @this: kotlin.coroutines.SafeContinuation;

        $r1 = $r0.<kotlin.coroutines.SafeContinuation: kotlin.coroutines.Continuation delegate>;

        $z0 = $r1 instanceof kotlin.coroutines.jvm.internal.CoroutineStackFrame;

        if $z0 == 0 goto label1;

        $r2 = (kotlin.coroutines.jvm.internal.CoroutineStackFrame) $r1;

        return $r2;

     label1:
        return null;
    }

    public kotlin.coroutines.CoroutineContext getContext()
    {
        kotlin.coroutines.SafeContinuation $r0;
        kotlin.coroutines.CoroutineContext $r1;
        kotlin.coroutines.Continuation $r2;

        $r0 := @this: kotlin.coroutines.SafeContinuation;

        $r2 = $r0.<kotlin.coroutines.SafeContinuation: kotlin.coroutines.Continuation delegate>;

        $r1 = interfaceinvoke $r2.<kotlin.coroutines.Continuation: kotlin.coroutines.CoroutineContext getContext()>();

        return $r1;
    }

    public final java.lang.Object getOrThrow()
    {
        kotlin.coroutines.SafeContinuation $r0;
        java.lang.Object $r1;
        kotlin.coroutines.intrinsics.CoroutineSingletons $r2;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r3;
        boolean $z0;
        kotlin.Result$Failure $r4;
        java.lang.Throwable $r5;

        $r0 := @this: kotlin.coroutines.SafeContinuation;

        $r1 = $r0.<kotlin.coroutines.SafeContinuation: java.lang.Object result>;

        $r2 = <kotlin.coroutines.intrinsics.CoroutineSingletons: kotlin.coroutines.intrinsics.CoroutineSingletons UNDECIDED>;

        if $r1 != $r2 goto label2;

        $r3 = <kotlin.coroutines.SafeContinuation: java.util.concurrent.atomic.AtomicReferenceFieldUpdater RESULT>;

        $r2 = <kotlin.coroutines.intrinsics.CoroutineSingletons: kotlin.coroutines.intrinsics.CoroutineSingletons UNDECIDED>;

        $r1 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $z0 = staticinvoke <kotlin.coroutines.SafeContinuation$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r3, $r0, $r2, $r1);

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        return $r1;

     label1:
        $r1 = $r0.<kotlin.coroutines.SafeContinuation: java.lang.Object result>;

        goto label2;

     label2:
        $r2 = <kotlin.coroutines.intrinsics.CoroutineSingletons: kotlin.coroutines.intrinsics.CoroutineSingletons RESUMED>;

        if $r1 != $r2 goto label3;

        $r1 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        return $r1;

     label3:
        $z0 = $r1 instanceof kotlin.Result$Failure;

        if $z0 != 0 goto label4;

        return $r1;

     label4:
        $r4 = (kotlin.Result$Failure) $r1;

        $r5 = $r4.<kotlin.Result$Failure: java.lang.Throwable exception>;

        throw $r5;
    }

    public java.lang.StackTraceElement getStackTraceElement()
    {
        kotlin.coroutines.SafeContinuation $r0;

        $r0 := @this: kotlin.coroutines.SafeContinuation;

        return null;
    }

    public void resumeWith(java.lang.Object)
    {
        kotlin.coroutines.SafeContinuation $r0;
        kotlin.coroutines.intrinsics.CoroutineSingletons $r1;
        java.lang.Object $r2, $r3, $r5;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r4;
        boolean $z0;
        kotlin.coroutines.Continuation $r6;
        java.lang.IllegalStateException $r7;

        $r0 := @this: kotlin.coroutines.SafeContinuation;

        $r2 := @parameter0: java.lang.Object;

     label1:
        $r3 = $r0.<kotlin.coroutines.SafeContinuation: java.lang.Object result>;

        $r1 = <kotlin.coroutines.intrinsics.CoroutineSingletons: kotlin.coroutines.intrinsics.CoroutineSingletons UNDECIDED>;

        if $r3 != $r1 goto label2;

        $r4 = <kotlin.coroutines.SafeContinuation: java.util.concurrent.atomic.AtomicReferenceFieldUpdater RESULT>;

        $r1 = <kotlin.coroutines.intrinsics.CoroutineSingletons: kotlin.coroutines.intrinsics.CoroutineSingletons UNDECIDED>;

        $z0 = staticinvoke <kotlin.coroutines.SafeContinuation$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r4, $r0, $r1, $r2);

        if $z0 == 0 goto label1;

        return;

     label2:
        $r5 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r3 != $r5 goto label3;

        $r4 = <kotlin.coroutines.SafeContinuation: java.util.concurrent.atomic.AtomicReferenceFieldUpdater RESULT>;

        $r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $r1 = <kotlin.coroutines.intrinsics.CoroutineSingletons: kotlin.coroutines.intrinsics.CoroutineSingletons RESUMED>;

        $z0 = staticinvoke <kotlin.coroutines.SafeContinuation$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r4, $r0, $r3, $r1);

        if $z0 == 0 goto label1;

        $r6 = $r0.<kotlin.coroutines.SafeContinuation: kotlin.coroutines.Continuation delegate>;

        interfaceinvoke $r6.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r2);

        return;

     label3:
        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Already resumed");

        goto label4;

     label4:
        throw $r7;
    }

    public java.lang.String toString()
    {
        kotlin.coroutines.SafeContinuation $r0;
        java.lang.StringBuilder $r1;
        kotlin.coroutines.Continuation $r2;
        java.lang.String $r3;

        $r0 := @this: kotlin.coroutines.SafeContinuation;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SafeContinuation for ");

        $r2 = $r0.<kotlin.coroutines.SafeContinuation: kotlin.coroutines.Continuation delegate>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

kotlin.coroutines.SafeContinuation$$ExternalSyntheticBackportWithForwarding0
    public static boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r0, $r1, $r2, $r4;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r3;
        boolean $z0;

        $r3 := @parameter0: java.util.concurrent.atomic.AtomicReferenceFieldUpdater;

        $r0 := @parameter1: java.lang.Object;

        $r1 := @parameter2: java.lang.Object;

        $r2 := @parameter3: java.lang.Object;

     label1:
        $z0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>($r0, $r1, $r2);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $r4 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>($r0);

        if $r4 == $r1 goto label1;

        return 0;
    }

kotlin.coroutines.SafeContinuation$Companion
    private void <init>()
    {
        kotlin.coroutines.SafeContinuation$Companion $r0;

        $r0 := @this: kotlin.coroutines.SafeContinuation$Companion;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        kotlin.coroutines.SafeContinuation$Companion $r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        $r0 := @this: kotlin.coroutines.SafeContinuation$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke $r0.<kotlin.coroutines.SafeContinuation$Companion: void <init>()>();

        return;
    }

    private static void getRESULT$annotations()
    {
        return;
    }

