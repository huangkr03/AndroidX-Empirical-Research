androidx.room.compiler.processing.XProcessingEnv
<androidx.room.compiler.processing.XProcessingEnv: androidx.room.compiler.processing.XProcessingEnv$Companion Companion>
<androidx.room.compiler.processing.XProcessingEnv: androidx.room.compiler.processing.XProcessingEnv$Backend getBackend()>
<androidx.room.compiler.processing.XProcessingEnv: androidx.room.compiler.processing.XMessager getMessager()>
<androidx.room.compiler.processing.XProcessingEnv: java.util.Map getOptions()>
<androidx.room.compiler.processing.XProcessingEnv: androidx.room.compiler.processing.XFiler getFiler()>
<androidx.room.compiler.processing.XProcessingEnv: androidx.room.compiler.processing.XProcessingEnvConfig getConfig()>
<androidx.room.compiler.processing.XProcessingEnv: int getJvmVersion()>
<androidx.room.compiler.processing.XProcessingEnv: androidx.room.compiler.processing.XTypeElement findTypeElement(java.lang.String)>
<androidx.room.compiler.processing.XProcessingEnv: androidx.room.compiler.processing.XType findType(java.lang.String)>
    public androidx.room.compiler.processing.XType requireType(java.lang.String)
    {
        androidx.room.compiler.processing.XProcessingEnv r0;
        java.lang.String r1, $r7, $r8;
        androidx.room.compiler.processing.XType $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.IllegalStateException $r6;

        r0 := @this: androidx.room.compiler.processing.XProcessingEnv;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "qName");

        $r2 = interfaceinvoke r0.<androidx.room.compiler.processing.XProcessingEnv: androidx.room.compiler.processing.XType findType(java.lang.String)>(r1);

        if $r2 != null goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot find required type ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = new java.lang.IllegalStateException;

        $r7 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label1:
        return $r2;
    }

<androidx.room.compiler.processing.XProcessingEnv: androidx.room.compiler.processing.XTypeElement findGeneratedAnnotation()>
<androidx.room.compiler.processing.XProcessingEnv: androidx.room.compiler.processing.XType getDeclaredType(androidx.room.compiler.processing.XTypeElement,androidx.room.compiler.processing.XType[])>
<androidx.room.compiler.processing.XProcessingEnv: androidx.room.compiler.processing.XArrayType getArrayType(androidx.room.compiler.processing.XType)>
    public androidx.room.compiler.processing.XTypeElement requireTypeElement(java.lang.String)
    {
        androidx.room.compiler.processing.XProcessingEnv r0;
        java.lang.String r1, $r7, $r8;
        androidx.room.compiler.processing.XTypeElement $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.IllegalStateException $r6;

        r0 := @this: androidx.room.compiler.processing.XProcessingEnv;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "qName");

        $r2 = interfaceinvoke r0.<androidx.room.compiler.processing.XProcessingEnv: androidx.room.compiler.processing.XTypeElement findTypeElement(java.lang.String)>(r1);

        if $r2 != null goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find required type element ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = new java.lang.IllegalStateException;

        $r7 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label1:
        return $r2;
    }

    public androidx.room.compiler.processing.XType requireType(com.squareup.javapoet.TypeName)
    {
        androidx.room.compiler.processing.XProcessingEnv r0;
        com.squareup.javapoet.TypeName r1;
        androidx.room.compiler.processing.XType $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.IllegalStateException $r6;
        java.lang.String $r7, $r8;

        r0 := @this: androidx.room.compiler.processing.XProcessingEnv;

        r1 := @parameter0: com.squareup.javapoet.TypeName;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "typeName");

        $r2 = interfaceinvoke r0.<androidx.room.compiler.processing.XProcessingEnv: androidx.room.compiler.processing.XType findType(com.squareup.javapoet.TypeName)>(r1);

        if $r2 != null goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot find required type ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = new java.lang.IllegalStateException;

        $r7 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label1:
        return $r2;
    }

    public androidx.room.compiler.processing.XType requireType(androidx.room.compiler.codegen.XTypeName)
    {
        androidx.room.compiler.processing.XProcessingEnv r0;
        androidx.room.compiler.codegen.XTypeName r1;
        boolean $z0;
        androidx.room.compiler.processing.XProcessingEnv$Backend $r2;
        int[] $r3;
        int $i0, $i1;
        com.squareup.kotlinpoet.TypeName $r4;
        java.lang.String $r5;
        com.squareup.javapoet.TypeName $r6, $r8;
        kotlin.NoWhenBranchMatchedException $r7;
        androidx.room.compiler.processing.XType $r9, $r10;

        r0 := @this: androidx.room.compiler.processing.XProcessingEnv;

        r1 := @parameter0: androidx.room.compiler.codegen.XTypeName;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "typeName");

        $z0 = virtualinvoke r1.<androidx.room.compiler.codegen.XTypeName: boolean isPrimitive()>();

        if $z0 == 0 goto label1;

        $r8 = virtualinvoke r1.<androidx.room.compiler.codegen.XTypeName: com.squareup.javapoet.TypeName getJava$room_compiler_processing()>();

        $r9 = interfaceinvoke r0.<androidx.room.compiler.processing.XProcessingEnv: androidx.room.compiler.processing.XType requireType(com.squareup.javapoet.TypeName)>($r8);

        return $r9;

     label1:
        $r2 = interfaceinvoke r0.<androidx.room.compiler.processing.XProcessingEnv: androidx.room.compiler.processing.XProcessingEnv$Backend getBackend()>();

        $r3 = <androidx.room.compiler.processing.XProcessingEnv$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i0 = virtualinvoke $r2.<androidx.room.compiler.processing.XProcessingEnv$Backend: int ordinal()>();

        $i1 = $r3[$i0];

        tableswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label3;
            default: goto label4;
        };

     label2:
        $r6 = virtualinvoke r1.<androidx.room.compiler.codegen.XTypeName: com.squareup.javapoet.TypeName getJava$room_compiler_processing()>();

        $r10 = interfaceinvoke r0.<androidx.room.compiler.processing.XProcessingEnv: androidx.room.compiler.processing.XType requireType(com.squareup.javapoet.TypeName)>($r6);

        goto label5;

     label3:
        $r4 = virtualinvoke r1.<androidx.room.compiler.codegen.XTypeName: com.squareup.kotlinpoet.TypeName getKotlin$room_compiler_processing()>();

        $r5 = virtualinvoke $r4.<com.squareup.kotlinpoet.TypeName: java.lang.String toString()>();

        $r10 = interfaceinvoke r0.<androidx.room.compiler.processing.XProcessingEnv: androidx.room.compiler.processing.XType requireType(java.lang.String)>($r5);

        goto label5;

     label4:
        $r7 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke $r7.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        throw $r7;

     label5:
        return $r10;
    }

    public androidx.room.compiler.processing.XType requireType(kotlin.reflect.KClass)
    {
        androidx.room.compiler.processing.XProcessingEnv r0;
        kotlin.reflect.KClass r1;
        java.lang.Class $r2;
        java.lang.String $r3;
        androidx.room.compiler.processing.XType $r4;

        r0 := @this: androidx.room.compiler.processing.XProcessingEnv;

        r1 := @parameter0: kotlin.reflect.KClass;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "klass");

        $r2 = staticinvoke <kotlin.jvm.JvmClassMappingKt: java.lang.Class getJavaClass(kotlin.reflect.KClass)>(r1);

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getCanonicalName()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r3);

        $r4 = interfaceinvoke r0.<androidx.room.compiler.processing.XProcessingEnv: androidx.room.compiler.processing.XType requireType(java.lang.String)>($r3);

        return $r4;
    }

    public androidx.room.compiler.processing.XType findType(com.squareup.javapoet.TypeName)
    {
        androidx.room.compiler.processing.XProcessingEnv r0;
        com.squareup.javapoet.TypeName r1, $r6;
        androidx.room.compiler.processing.XType r2, $r4, $r7, $r8;
        boolean $z1;
        java.lang.String $r3;
        com.squareup.javapoet.ArrayTypeName $r5;
        androidx.room.compiler.processing.XArrayType $r9;

        r0 := @this: androidx.room.compiler.processing.XProcessingEnv;

        r1 := @parameter0: com.squareup.javapoet.TypeName;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "typeName");

        $z1 = r1 instanceof com.squareup.javapoet.ArrayTypeName;

        if $z1 == 0 goto label2;

        $r5 = (com.squareup.javapoet.ArrayTypeName) r1;

        $r6 = $r5.<com.squareup.javapoet.ArrayTypeName: com.squareup.javapoet.TypeName componentType>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "typeName.componentType");

        $r7 = interfaceinvoke r0.<androidx.room.compiler.processing.XProcessingEnv: androidx.room.compiler.processing.XType findType(com.squareup.javapoet.TypeName)>($r6);

        if $r7 == null goto label1;

        r2 = $r7;

        $r9 = interfaceinvoke r0.<androidx.room.compiler.processing.XProcessingEnv: androidx.room.compiler.processing.XArrayType getArrayType(androidx.room.compiler.processing.XType)>(r2);

        return $r9;

     label1:
        $r8 = (androidx.room.compiler.processing.XType) null;

        return $r8;

     label2:
        $r3 = virtualinvoke r1.<com.squareup.javapoet.TypeName: java.lang.String toString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "typeName.toString()");

        $r4 = interfaceinvoke r0.<androidx.room.compiler.processing.XProcessingEnv: androidx.room.compiler.processing.XType findType(java.lang.String)>($r3);

        return $r4;
    }

    public androidx.room.compiler.processing.XType findType(kotlin.reflect.KClass)
    {
        androidx.room.compiler.processing.XProcessingEnv r0;
        kotlin.reflect.KClass r1;
        java.lang.Class $r2;
        java.lang.String $r3;
        androidx.room.compiler.processing.XType $r4;

        r0 := @this: androidx.room.compiler.processing.XProcessingEnv;

        r1 := @parameter0: kotlin.reflect.KClass;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "klass");

        $r2 = staticinvoke <kotlin.jvm.JvmClassMappingKt: java.lang.Class getJavaClass(kotlin.reflect.KClass)>(r1);

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getCanonicalName()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r3);

        $r4 = interfaceinvoke r0.<androidx.room.compiler.processing.XProcessingEnv: androidx.room.compiler.processing.XType findType(java.lang.String)>($r3);

        return $r4;
    }

    public androidx.room.compiler.processing.XTypeElement requireTypeElement(com.squareup.javapoet.TypeName)
    {
        androidx.room.compiler.processing.XProcessingEnv r0;
        com.squareup.javapoet.TypeName r1;
        java.lang.String $r2;
        androidx.room.compiler.processing.XTypeElement $r3;

        r0 := @this: androidx.room.compiler.processing.XProcessingEnv;

        r1 := @parameter0: com.squareup.javapoet.TypeName;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "typeName");

        $r2 = virtualinvoke r1.<com.squareup.javapoet.TypeName: java.lang.String toString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "typeName.toString()");

        $r3 = interfaceinvoke r0.<androidx.room.compiler.processing.XProcessingEnv: androidx.room.compiler.processing.XTypeElement requireTypeElement(java.lang.String)>($r2);

        return $r3;
    }

    public androidx.room.compiler.processing.XTypeElement requireTypeElement(kotlin.reflect.KClass)
    {
        androidx.room.compiler.processing.XProcessingEnv r0;
        kotlin.reflect.KClass r1;
        java.lang.Class $r2;
        java.lang.String $r3;
        androidx.room.compiler.processing.XTypeElement $r4;

        r0 := @this: androidx.room.compiler.processing.XProcessingEnv;

        r1 := @parameter0: kotlin.reflect.KClass;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "klass");

        $r2 = staticinvoke <kotlin.jvm.JvmClassMappingKt: java.lang.Class getJavaClass(kotlin.reflect.KClass)>(r1);

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getCanonicalName()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r3);

        $r4 = interfaceinvoke r0.<androidx.room.compiler.processing.XProcessingEnv: androidx.room.compiler.processing.XTypeElement requireTypeElement(java.lang.String)>($r3);

        return $r4;
    }

    public androidx.room.compiler.processing.XTypeElement findTypeElement(com.squareup.javapoet.TypeName)
    {
        androidx.room.compiler.processing.XProcessingEnv r0;
        com.squareup.javapoet.TypeName r1;
        java.lang.String $r2;
        androidx.room.compiler.processing.XTypeElement $r3;

        r0 := @this: androidx.room.compiler.processing.XProcessingEnv;

        r1 := @parameter0: com.squareup.javapoet.TypeName;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "typeName");

        $r2 = virtualinvoke r1.<com.squareup.javapoet.TypeName: java.lang.String toString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "typeName.toString()");

        $r3 = interfaceinvoke r0.<androidx.room.compiler.processing.XProcessingEnv: androidx.room.compiler.processing.XTypeElement findTypeElement(java.lang.String)>($r2);

        return $r3;
    }

    public androidx.room.compiler.processing.XTypeElement findTypeElement(kotlin.reflect.KClass)
    {
        androidx.room.compiler.processing.XProcessingEnv r0;
        kotlin.reflect.KClass r1;
        java.lang.Class $r2;
        java.lang.String $r3;
        androidx.room.compiler.processing.XTypeElement $r4;

        r0 := @this: androidx.room.compiler.processing.XProcessingEnv;

        r1 := @parameter0: kotlin.reflect.KClass;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "klass");

        $r2 = staticinvoke <kotlin.jvm.JvmClassMappingKt: java.lang.Class getJavaClass(kotlin.reflect.KClass)>(r1);

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getCanonicalName()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r3);

        $r4 = interfaceinvoke r0.<androidx.room.compiler.processing.XProcessingEnv: androidx.room.compiler.processing.XTypeElement findTypeElement(java.lang.String)>($r3);

        return $r4;
    }

    public androidx.room.compiler.processing.XArrayType getArrayType(com.squareup.javapoet.TypeName)
    {
        androidx.room.compiler.processing.XProcessingEnv r0;
        com.squareup.javapoet.TypeName r1;
        androidx.room.compiler.processing.XType $r2;
        androidx.room.compiler.processing.XArrayType $r3;

        r0 := @this: androidx.room.compiler.processing.XProcessingEnv;

        r1 := @parameter0: com.squareup.javapoet.TypeName;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "typeName");

        $r2 = interfaceinvoke r0.<androidx.room.compiler.processing.XProcessingEnv: androidx.room.compiler.processing.XType requireType(com.squareup.javapoet.TypeName)>(r1);

        $r3 = interfaceinvoke r0.<androidx.room.compiler.processing.XProcessingEnv: androidx.room.compiler.processing.XArrayType getArrayType(androidx.room.compiler.processing.XType)>($r2);

        return $r3;
    }

<androidx.room.compiler.processing.XProcessingEnv: java.util.List getTypeElementsFromPackage(java.lang.String)>
    public static androidx.room.compiler.processing.XProcessingEnv create(javax.'annotation'.processing.ProcessingEnvironment, androidx.room.compiler.processing.XProcessingEnvConfig)
    {
        javax.'annotation'.processing.ProcessingEnvironment r0;
        androidx.room.compiler.processing.XProcessingEnvConfig r1;
        androidx.room.compiler.processing.XProcessingEnv$Companion $r2;
        androidx.room.compiler.processing.XProcessingEnv $r3;

        r0 := @parameter0: javax.'annotation'.processing.ProcessingEnvironment;

        r1 := @parameter1: androidx.room.compiler.processing.XProcessingEnvConfig;

        $r2 = <androidx.room.compiler.processing.XProcessingEnv: androidx.room.compiler.processing.XProcessingEnv$Companion Companion>;

        $r3 = virtualinvoke $r2.<androidx.room.compiler.processing.XProcessingEnv$Companion: androidx.room.compiler.processing.XProcessingEnv create(javax.'annotation'.processing.ProcessingEnvironment,androidx.room.compiler.processing.XProcessingEnvConfig)>(r0, r1);

        return $r3;
    }

    public static androidx.room.compiler.processing.XProcessingEnv create(java.util.Map, com.google.devtools.ksp.processing.Resolver, com.google.devtools.ksp.processing.CodeGenerator, com.google.devtools.ksp.processing.KSPLogger, androidx.room.compiler.processing.XProcessingEnvConfig)
    {
        java.util.Map r0;
        com.google.devtools.ksp.processing.Resolver r1;
        com.google.devtools.ksp.processing.CodeGenerator r2;
        com.google.devtools.ksp.processing.KSPLogger r3;
        androidx.room.compiler.processing.XProcessingEnvConfig r4;
        androidx.room.compiler.processing.XProcessingEnv$Companion $r5;
        androidx.room.compiler.processing.XProcessingEnv $r6;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: com.google.devtools.ksp.processing.Resolver;

        r2 := @parameter2: com.google.devtools.ksp.processing.CodeGenerator;

        r3 := @parameter3: com.google.devtools.ksp.processing.KSPLogger;

        r4 := @parameter4: androidx.room.compiler.processing.XProcessingEnvConfig;

        $r5 = <androidx.room.compiler.processing.XProcessingEnv: androidx.room.compiler.processing.XProcessingEnv$Companion Companion>;

        $r6 = virtualinvoke $r5.<androidx.room.compiler.processing.XProcessingEnv$Companion: androidx.room.compiler.processing.XProcessingEnv create(java.util.Map,com.google.devtools.ksp.processing.Resolver,com.google.devtools.ksp.processing.CodeGenerator,com.google.devtools.ksp.processing.KSPLogger,androidx.room.compiler.processing.XProcessingEnvConfig)>(r0, r1, r2, r3, r4);

        return $r6;
    }

    public static androidx.room.compiler.processing.XProcessingEnv create(javax.'annotation'.processing.ProcessingEnvironment)
    {
        javax.'annotation'.processing.ProcessingEnvironment r0;
        androidx.room.compiler.processing.XProcessingEnv$Companion $r1;
        androidx.room.compiler.processing.XProcessingEnv $r2;

        r0 := @parameter0: javax.'annotation'.processing.ProcessingEnvironment;

        $r1 = <androidx.room.compiler.processing.XProcessingEnv: androidx.room.compiler.processing.XProcessingEnv$Companion Companion>;

        $r2 = virtualinvoke $r1.<androidx.room.compiler.processing.XProcessingEnv$Companion: androidx.room.compiler.processing.XProcessingEnv create(javax.'annotation'.processing.ProcessingEnvironment)>(r0);

        return $r2;
    }

    public static androidx.room.compiler.processing.XProcessingEnv create(java.util.Map, com.google.devtools.ksp.processing.Resolver, com.google.devtools.ksp.processing.CodeGenerator, com.google.devtools.ksp.processing.KSPLogger)
    {
        java.util.Map r0;
        com.google.devtools.ksp.processing.Resolver r1;
        com.google.devtools.ksp.processing.CodeGenerator r2;
        com.google.devtools.ksp.processing.KSPLogger r3;
        androidx.room.compiler.processing.XProcessingEnv$Companion $r4;
        androidx.room.compiler.processing.XProcessingEnv $r5;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: com.google.devtools.ksp.processing.Resolver;

        r2 := @parameter2: com.google.devtools.ksp.processing.CodeGenerator;

        r3 := @parameter3: com.google.devtools.ksp.processing.KSPLogger;

        $r4 = <androidx.room.compiler.processing.XProcessingEnv: androidx.room.compiler.processing.XProcessingEnv$Companion Companion>;

        $r5 = virtualinvoke $r4.<androidx.room.compiler.processing.XProcessingEnv$Companion: androidx.room.compiler.processing.XProcessingEnv create(java.util.Map,com.google.devtools.ksp.processing.Resolver,com.google.devtools.ksp.processing.CodeGenerator,com.google.devtools.ksp.processing.KSPLogger)>(r0, r1, r2, r3);

        return $r5;
    }

    static void <clinit>()
    {
        androidx.room.compiler.processing.XProcessingEnv$Companion $r0;

        $r0 = <androidx.room.compiler.processing.XProcessingEnv$Companion: androidx.room.compiler.processing.XProcessingEnv$Companion $$INSTANCE>;

        <androidx.room.compiler.processing.XProcessingEnv: androidx.room.compiler.processing.XProcessingEnv$Companion Companion> = $r0;

        return;
    }

androidx.room.compiler.processing.XProcessingEnv$Backend
<androidx.room.compiler.processing.XProcessingEnv$Backend: androidx.room.compiler.processing.XProcessingEnv$Backend JAVAC>
<androidx.room.compiler.processing.XProcessingEnv$Backend: androidx.room.compiler.processing.XProcessingEnv$Backend KSP>
<androidx.room.compiler.processing.XProcessingEnv$Backend: androidx.room.compiler.processing.XProcessingEnv$Backend[] $VALUES>
    private void <init>(java.lang.String, int)
    {
        androidx.room.compiler.processing.XProcessingEnv$Backend r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: androidx.room.compiler.processing.XProcessingEnv$Backend;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0);

        return;
    }

    public static androidx.room.compiler.processing.XProcessingEnv$Backend[] values()
    {
        androidx.room.compiler.processing.XProcessingEnv$Backend[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <androidx.room.compiler.processing.XProcessingEnv$Backend: androidx.room.compiler.processing.XProcessingEnv$Backend[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (androidx.room.compiler.processing.XProcessingEnv$Backend[]) $r1;

        return $r2;
    }

    public static androidx.room.compiler.processing.XProcessingEnv$Backend valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        androidx.room.compiler.processing.XProcessingEnv$Backend $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroidx/room/compiler/processing/XProcessingEnv$Backend;", r0);

        $r2 = (androidx.room.compiler.processing.XProcessingEnv$Backend) $r1;

        return $r2;
    }

    private static final androidx.room.compiler.processing.XProcessingEnv$Backend[] $values()
    {
        androidx.room.compiler.processing.XProcessingEnv$Backend[] r0;
        androidx.room.compiler.processing.XProcessingEnv$Backend $r1, $r2;

        r0 = newarray (androidx.room.compiler.processing.XProcessingEnv$Backend)[2];

        $r1 = <androidx.room.compiler.processing.XProcessingEnv$Backend: androidx.room.compiler.processing.XProcessingEnv$Backend JAVAC>;

        r0[0] = $r1;

        $r2 = <androidx.room.compiler.processing.XProcessingEnv$Backend: androidx.room.compiler.processing.XProcessingEnv$Backend KSP>;

        r0[1] = $r2;

        return r0;
    }

    static void <clinit>()
    {
        androidx.room.compiler.processing.XProcessingEnv$Backend $r0, $r1;
        androidx.room.compiler.processing.XProcessingEnv$Backend[] $r2;

        $r0 = new androidx.room.compiler.processing.XProcessingEnv$Backend;

        specialinvoke $r0.<androidx.room.compiler.processing.XProcessingEnv$Backend: void <init>(java.lang.String,int)>("JAVAC", 0);

        <androidx.room.compiler.processing.XProcessingEnv$Backend: androidx.room.compiler.processing.XProcessingEnv$Backend JAVAC> = $r0;

        $r1 = new androidx.room.compiler.processing.XProcessingEnv$Backend;

        specialinvoke $r1.<androidx.room.compiler.processing.XProcessingEnv$Backend: void <init>(java.lang.String,int)>("KSP", 1);

        <androidx.room.compiler.processing.XProcessingEnv$Backend: androidx.room.compiler.processing.XProcessingEnv$Backend KSP> = $r1;

        $r2 = staticinvoke <androidx.room.compiler.processing.XProcessingEnv$Backend: androidx.room.compiler.processing.XProcessingEnv$Backend[] $values()>();

        <androidx.room.compiler.processing.XProcessingEnv$Backend: androidx.room.compiler.processing.XProcessingEnv$Backend[] $VALUES> = $r2;

        return;
    }

androidx.room.compiler.processing.XProcessingEnv$Companion
<androidx.room.compiler.processing.XProcessingEnv$Companion: androidx.room.compiler.processing.XProcessingEnv$Companion $$INSTANCE>
    private void <init>()
    {
        androidx.room.compiler.processing.XProcessingEnv$Companion r0;

        r0 := @this: androidx.room.compiler.processing.XProcessingEnv$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final androidx.room.compiler.processing.XProcessingEnv create(javax.'annotation'.processing.ProcessingEnvironment, androidx.room.compiler.processing.XProcessingEnvConfig)
    {
        androidx.room.compiler.processing.XProcessingEnv$Companion r0;
        javax.'annotation'.processing.ProcessingEnvironment r1;
        androidx.room.compiler.processing.XProcessingEnvConfig r2;
        androidx.room.compiler.processing.javac.JavacProcessingEnv $r3;
        androidx.room.compiler.processing.XProcessingEnv $r4;

        r0 := @this: androidx.room.compiler.processing.XProcessingEnv$Companion;

        r1 := @parameter0: javax.'annotation'.processing.ProcessingEnvironment;

        r2 := @parameter1: androidx.room.compiler.processing.XProcessingEnvConfig;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "env");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "config");

        $r3 = new androidx.room.compiler.processing.javac.JavacProcessingEnv;

        specialinvoke $r3.<androidx.room.compiler.processing.javac.JavacProcessingEnv: void <init>(javax.'annotation'.processing.ProcessingEnvironment,androidx.room.compiler.processing.XProcessingEnvConfig)>(r1, r2);

        $r4 = (androidx.room.compiler.processing.XProcessingEnv) $r3;

        return $r4;
    }

    public static androidx.room.compiler.processing.XProcessingEnv create$default(androidx.room.compiler.processing.XProcessingEnv$Companion, javax.'annotation'.processing.ProcessingEnvironment, androidx.room.compiler.processing.XProcessingEnvConfig, int, java.lang.Object)
    {
        androidx.room.compiler.processing.XProcessingEnv$Companion r0;
        javax.'annotation'.processing.ProcessingEnvironment r1;
        int i0, $i1;
        java.lang.Object r2;
        androidx.room.compiler.processing.XProcessingEnv $r3;
        androidx.room.compiler.processing.XProcessingEnvConfig$Companion $r4;
        androidx.room.compiler.processing.XProcessingEnvConfig r5;

        r0 := @parameter0: androidx.room.compiler.processing.XProcessingEnv$Companion;

        r1 := @parameter1: javax.'annotation'.processing.ProcessingEnvironment;

        r5 := @parameter2: androidx.room.compiler.processing.XProcessingEnvConfig;

        i0 := @parameter3: int;

        r2 := @parameter4: java.lang.Object;

        $i1 = i0 & 2;

        if $i1 == 0 goto label1;

        $r4 = <androidx.room.compiler.processing.XProcessingEnvConfig: androidx.room.compiler.processing.XProcessingEnvConfig$Companion Companion>;

        r5 = virtualinvoke $r4.<androidx.room.compiler.processing.XProcessingEnvConfig$Companion: androidx.room.compiler.processing.XProcessingEnvConfig getDEFAULT()>();

     label1:
        $r3 = virtualinvoke r0.<androidx.room.compiler.processing.XProcessingEnv$Companion: androidx.room.compiler.processing.XProcessingEnv create(javax.'annotation'.processing.ProcessingEnvironment,androidx.room.compiler.processing.XProcessingEnvConfig)>(r1, r5);

        return $r3;
    }

    public final androidx.room.compiler.processing.XProcessingEnv create(java.util.Map, com.google.devtools.ksp.processing.Resolver, com.google.devtools.ksp.processing.CodeGenerator, com.google.devtools.ksp.processing.KSPLogger, androidx.room.compiler.processing.XProcessingEnvConfig)
    {
        androidx.room.compiler.processing.XProcessingEnv$Companion r0;
        java.util.Map r1;
        com.google.devtools.ksp.processing.Resolver r2;
        com.google.devtools.ksp.processing.CodeGenerator r3;
        com.google.devtools.ksp.processing.KSPLogger r4;
        androidx.room.compiler.processing.XProcessingEnvConfig r5;
        androidx.room.compiler.processing.ksp.KspProcessingEnv r6, r7, $r8;
        androidx.room.compiler.processing.XProcessingEnv $r9;

        r0 := @this: androidx.room.compiler.processing.XProcessingEnv$Companion;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: com.google.devtools.ksp.processing.Resolver;

        r3 := @parameter2: com.google.devtools.ksp.processing.CodeGenerator;

        r4 := @parameter3: com.google.devtools.ksp.processing.KSPLogger;

        r5 := @parameter4: androidx.room.compiler.processing.XProcessingEnvConfig;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "options");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "resolver");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "codeGenerator");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "logger");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r5, "config");

        $r8 = new androidx.room.compiler.processing.ksp.KspProcessingEnv;

        specialinvoke $r8.<androidx.room.compiler.processing.ksp.KspProcessingEnv: void <init>(java.util.Map,com.google.devtools.ksp.processing.CodeGenerator,com.google.devtools.ksp.processing.KSPLogger,androidx.room.compiler.processing.XProcessingEnvConfig)>(r1, r3, r4, r5);

        r6 = $r8;

        r7 = r6;

        virtualinvoke r7.<androidx.room.compiler.processing.ksp.KspProcessingEnv: void setResolver$room_compiler_processing(com.google.devtools.ksp.processing.Resolver)>(r2);

        $r9 = (androidx.room.compiler.processing.XProcessingEnv) r6;

        return $r9;
    }

    public static androidx.room.compiler.processing.XProcessingEnv create$default(androidx.room.compiler.processing.XProcessingEnv$Companion, java.util.Map, com.google.devtools.ksp.processing.Resolver, com.google.devtools.ksp.processing.CodeGenerator, com.google.devtools.ksp.processing.KSPLogger, androidx.room.compiler.processing.XProcessingEnvConfig, int, java.lang.Object)
    {
        androidx.room.compiler.processing.XProcessingEnv$Companion r0;
        java.util.Map r1;
        com.google.devtools.ksp.processing.Resolver r2;
        com.google.devtools.ksp.processing.CodeGenerator r3;
        com.google.devtools.ksp.processing.KSPLogger r4;
        int i0, $i1;
        java.lang.Object r5;
        androidx.room.compiler.processing.XProcessingEnv $r6;
        androidx.room.compiler.processing.XProcessingEnvConfig$Companion $r7;
        androidx.room.compiler.processing.XProcessingEnvConfig r8;

        r0 := @parameter0: androidx.room.compiler.processing.XProcessingEnv$Companion;

        r1 := @parameter1: java.util.Map;

        r2 := @parameter2: com.google.devtools.ksp.processing.Resolver;

        r3 := @parameter3: com.google.devtools.ksp.processing.CodeGenerator;

        r4 := @parameter4: com.google.devtools.ksp.processing.KSPLogger;

        r8 := @parameter5: androidx.room.compiler.processing.XProcessingEnvConfig;

        i0 := @parameter6: int;

        r5 := @parameter7: java.lang.Object;

        $i1 = i0 & 16;

        if $i1 == 0 goto label1;

        $r7 = <androidx.room.compiler.processing.XProcessingEnvConfig: androidx.room.compiler.processing.XProcessingEnvConfig$Companion Companion>;

        r8 = virtualinvoke $r7.<androidx.room.compiler.processing.XProcessingEnvConfig$Companion: androidx.room.compiler.processing.XProcessingEnvConfig getDEFAULT()>();

     label1:
        $r6 = virtualinvoke r0.<androidx.room.compiler.processing.XProcessingEnv$Companion: androidx.room.compiler.processing.XProcessingEnv create(java.util.Map,com.google.devtools.ksp.processing.Resolver,com.google.devtools.ksp.processing.CodeGenerator,com.google.devtools.ksp.processing.KSPLogger,androidx.room.compiler.processing.XProcessingEnvConfig)>(r1, r2, r3, r4, r8);

        return $r6;
    }

    public final androidx.room.compiler.processing.XProcessingEnv create(javax.'annotation'.processing.ProcessingEnvironment)
    {
        androidx.room.compiler.processing.XProcessingEnv$Companion r0;
        javax.'annotation'.processing.ProcessingEnvironment r1;
        androidx.room.compiler.processing.XProcessingEnv $r2;

        r0 := @this: androidx.room.compiler.processing.XProcessingEnv$Companion;

        r1 := @parameter0: javax.'annotation'.processing.ProcessingEnvironment;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "env");

        $r2 = staticinvoke <androidx.room.compiler.processing.XProcessingEnv$Companion: androidx.room.compiler.processing.XProcessingEnv create$default(androidx.room.compiler.processing.XProcessingEnv$Companion,javax.'annotation'.processing.ProcessingEnvironment,androidx.room.compiler.processing.XProcessingEnvConfig,int,java.lang.Object)>(r0, r1, null, 2, null);

        return $r2;
    }

    public final androidx.room.compiler.processing.XProcessingEnv create(java.util.Map, com.google.devtools.ksp.processing.Resolver, com.google.devtools.ksp.processing.CodeGenerator, com.google.devtools.ksp.processing.KSPLogger)
    {
        androidx.room.compiler.processing.XProcessingEnv$Companion r0;
        java.util.Map r1;
        com.google.devtools.ksp.processing.Resolver r2;
        com.google.devtools.ksp.processing.CodeGenerator r3;
        com.google.devtools.ksp.processing.KSPLogger r4;
        androidx.room.compiler.processing.XProcessingEnv $r5;

        r0 := @this: androidx.room.compiler.processing.XProcessingEnv$Companion;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: com.google.devtools.ksp.processing.Resolver;

        r3 := @parameter2: com.google.devtools.ksp.processing.CodeGenerator;

        r4 := @parameter3: com.google.devtools.ksp.processing.KSPLogger;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "options");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "resolver");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "codeGenerator");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "logger");

        $r5 = staticinvoke <androidx.room.compiler.processing.XProcessingEnv$Companion: androidx.room.compiler.processing.XProcessingEnv create$default(androidx.room.compiler.processing.XProcessingEnv$Companion,java.util.Map,com.google.devtools.ksp.processing.Resolver,com.google.devtools.ksp.processing.CodeGenerator,com.google.devtools.ksp.processing.KSPLogger,androidx.room.compiler.processing.XProcessingEnvConfig,int,java.lang.Object)>(r0, r1, r2, r3, r4, null, 16, null);

        return $r5;
    }

    static void <clinit>()
    {
        androidx.room.compiler.processing.XProcessingEnv$Companion $r0;

        $r0 = new androidx.room.compiler.processing.XProcessingEnv$Companion;

        specialinvoke $r0.<androidx.room.compiler.processing.XProcessingEnv$Companion: void <init>()>();

        <androidx.room.compiler.processing.XProcessingEnv$Companion: androidx.room.compiler.processing.XProcessingEnv$Companion $$INSTANCE> = $r0;

        return;
    }

androidx.room.compiler.processing.XProcessingEnv$WhenMappings
<androidx.room.compiler.processing.XProcessingEnv$WhenMappings: int[] $EnumSwitchMapping$0>
    static void <clinit>()
    {
        int[] r0;
        androidx.room.compiler.processing.XProcessingEnv$Backend[] $r1;
        int $i0, $i1, $i2;
        androidx.room.compiler.processing.XProcessingEnv$Backend $r2, $r3;
        java.lang.Throwable $r4, $r5, r6, r7;

        $r1 = staticinvoke <androidx.room.compiler.processing.XProcessingEnv$Backend: androidx.room.compiler.processing.XProcessingEnv$Backend[] values()>();

        $i0 = lengthof $r1;

        r0 = newarray (int)[$i0];

     label1:
        $r2 = <androidx.room.compiler.processing.XProcessingEnv$Backend: androidx.room.compiler.processing.XProcessingEnv$Backend JAVAC>;

        $i1 = virtualinvoke $r2.<androidx.room.compiler.processing.XProcessingEnv$Backend: int ordinal()>();

        r0[$i1] = 1;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r6 = $r5;

     label4:
        $r3 = <androidx.room.compiler.processing.XProcessingEnv$Backend: androidx.room.compiler.processing.XProcessingEnv$Backend KSP>;

        $i2 = virtualinvoke $r3.<androidx.room.compiler.processing.XProcessingEnv$Backend: int ordinal()>();

        r0[$i2] = 2;

     label5:
        goto label7;

     label6:
        $r4 := @caughtexception;

        r7 = $r4;

     label7:
        <androidx.room.compiler.processing.XProcessingEnv$WhenMappings: int[] $EnumSwitchMapping$0> = r0;

        return;

        catch java.lang.NoSuchFieldError from label1 to label2 with label3;
        catch java.lang.NoSuchFieldError from label4 to label5 with label6;
    }

