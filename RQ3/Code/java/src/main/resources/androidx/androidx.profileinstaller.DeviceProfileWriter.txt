androidx.profileinstaller.DeviceProfileWriter
<androidx.profileinstaller.DeviceProfileWriter: android.content.res.AssetManager mAssetManager>
<androidx.profileinstaller.DeviceProfileWriter: java.util.concurrent.Executor mExecutor>
<androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback mDiagnostics>
<androidx.profileinstaller.DeviceProfileWriter: byte[] mDesiredVersion>
<androidx.profileinstaller.DeviceProfileWriter: java.io.File mCurProfile>
<androidx.profileinstaller.DeviceProfileWriter: java.lang.String mApkName>
<androidx.profileinstaller.DeviceProfileWriter: java.lang.String mProfileSourceLocation>
<androidx.profileinstaller.DeviceProfileWriter: java.lang.String mProfileMetaSourceLocation>
<androidx.profileinstaller.DeviceProfileWriter: boolean mDeviceSupportsAotProfile>
<androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.DexProfileData[] mProfile>
<androidx.profileinstaller.DeviceProfileWriter: byte[] mTranscodedProfile>
    private void result(int, java.lang.Object)
    {
        androidx.profileinstaller.DeviceProfileWriter r0;
        int i0;
        java.lang.Object r1;
        java.util.concurrent.Executor $r2;
        java.lang.Runnable $r3;

        r0 := @this: androidx.profileinstaller.DeviceProfileWriter;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = r0.<androidx.profileinstaller.DeviceProfileWriter: java.util.concurrent.Executor mExecutor>;

        $r3 = dynamicinvoke "run" <java.lang.Runnable (androidx.profileinstaller.DeviceProfileWriter,int,java.lang.Object)>(r0, i0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.profileinstaller.DeviceProfileWriter: void lambda$result$0(int,java.lang.Object)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r3);

        return;
    }

    public void <init>(android.content.res.AssetManager, java.util.concurrent.Executor, androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback, java.lang.String, java.lang.String, java.lang.String, java.io.File)
    {
        androidx.profileinstaller.DeviceProfileWriter r0;
        android.content.res.AssetManager r1;
        java.util.concurrent.Executor r2;
        androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback r3;
        java.lang.String r4, r5, r6;
        java.io.File r7;
        byte[] $r8;

        r0 := @this: androidx.profileinstaller.DeviceProfileWriter;

        r1 := @parameter0: android.content.res.AssetManager;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: java.lang.String;

        r7 := @parameter6: java.io.File;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.profileinstaller.DeviceProfileWriter: boolean mDeviceSupportsAotProfile> = 0;

        r0.<androidx.profileinstaller.DeviceProfileWriter: android.content.res.AssetManager mAssetManager> = r1;

        r0.<androidx.profileinstaller.DeviceProfileWriter: java.util.concurrent.Executor mExecutor> = r2;

        r0.<androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback mDiagnostics> = r3;

        r0.<androidx.profileinstaller.DeviceProfileWriter: java.lang.String mApkName> = r4;

        r0.<androidx.profileinstaller.DeviceProfileWriter: java.lang.String mProfileSourceLocation> = r5;

        r0.<androidx.profileinstaller.DeviceProfileWriter: java.lang.String mProfileMetaSourceLocation> = r6;

        r0.<androidx.profileinstaller.DeviceProfileWriter: java.io.File mCurProfile> = r7;

        $r8 = staticinvoke <androidx.profileinstaller.DeviceProfileWriter: byte[] desiredVersion()>();

        r0.<androidx.profileinstaller.DeviceProfileWriter: byte[] mDesiredVersion> = $r8;

        return;
    }

    public boolean deviceAllowsProfileInstallerAotWrites()
    {
        androidx.profileinstaller.DeviceProfileWriter r0;
        byte[] $r1;
        java.io.File $r2;
        boolean $z0;
        int $i0;
        java.lang.Integer $r3;

        r0 := @this: androidx.profileinstaller.DeviceProfileWriter;

        $r1 = r0.<androidx.profileinstaller.DeviceProfileWriter: byte[] mDesiredVersion>;

        if $r1 != null goto label1;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke r0.<androidx.profileinstaller.DeviceProfileWriter: void result(int,java.lang.Object)>(3, $r3);

        return 0;

     label1:
        $r2 = r0.<androidx.profileinstaller.DeviceProfileWriter: java.io.File mCurProfile>;

        $z0 = virtualinvoke $r2.<java.io.File: boolean canWrite()>();

        if $z0 != 0 goto label2;

        specialinvoke r0.<androidx.profileinstaller.DeviceProfileWriter: void result(int,java.lang.Object)>(4, null);

        return 0;

     label2:
        r0.<androidx.profileinstaller.DeviceProfileWriter: boolean mDeviceSupportsAotProfile> = 1;

        return 1;
    }

    private void assertDeviceAllowsProfileInstallerAotWritesCalled()
    {
        androidx.profileinstaller.DeviceProfileWriter r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;

        r0 := @this: androidx.profileinstaller.DeviceProfileWriter;

        $z0 = r0.<androidx.profileinstaller.DeviceProfileWriter: boolean mDeviceSupportsAotProfile>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("This device doesn\'t support aot. Did you call deviceSupportsAotProfile()?");

        throw $r1;

     label1:
        return;
    }

    public androidx.profileinstaller.DeviceProfileWriter read()
    {
        androidx.profileinstaller.DeviceProfileWriter r0, r41;
        byte[] $r1, $r4, $r9, $r10, r31, r40;
        java.lang.String $r2, $r5, $r7;
        android.content.res.AssetManager $r3, $r8;
        androidx.profileinstaller.DexProfileData[] $r6, $r11, r37;
        boolean $z0;
        java.lang.Throwable $r12, $r13, $r15, $r16, $r17, $r19, $r21, $r22, $r24, $r25, $r27, $r29, r32, r33, r34, r35, r36, r42, r43, r44, r45, r46, r47, r48;
        androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback $r14, $r18, $r20, $r23, $r26, $r28;
        java.io.InputStream r30;
        android.content.res.AssetFileDescriptor r38;
        java.io.FileInputStream r39;

        r0 := @this: androidx.profileinstaller.DeviceProfileWriter;

        specialinvoke r0.<androidx.profileinstaller.DeviceProfileWriter: void assertDeviceAllowsProfileInstallerAotWritesCalled()>();

        $r1 = r0.<androidx.profileinstaller.DeviceProfileWriter: byte[] mDesiredVersion>;

        if $r1 != null goto label01;

        return r0;

     label01:
        $r3 = r0.<androidx.profileinstaller.DeviceProfileWriter: android.content.res.AssetManager mAssetManager>;

        $r2 = r0.<androidx.profileinstaller.DeviceProfileWriter: java.lang.String mProfileSourceLocation>;

        r30 = virtualinvoke $r3.<android.content.res.AssetManager: java.io.InputStream open(java.lang.String)>($r2);

     label02:
        $r4 = <androidx.profileinstaller.ProfileTranscoder: byte[] MAGIC_PROF>;

        r31 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: byte[] readHeader(java.io.InputStream,byte[])>(r30, $r4);

        $r5 = r0.<androidx.profileinstaller.DeviceProfileWriter: java.lang.String mApkName>;

        $r6 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readProfile(java.io.InputStream,byte[],java.lang.String)>(r30, r31, $r5);

        r0.<androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.DexProfileData[] mProfile> = $r6;

     label03:
        if r30 == null goto label09;

        virtualinvoke r30.<java.io.InputStream: void close()>();

        goto label09;

     label04:
        $r24 := @caughtexception;

        r32 = $r24;

        if r30 == null goto label08;

     label05:
        virtualinvoke r30.<java.io.InputStream: void close()>();

     label06:
        goto label08;

     label07:
        $r29 := @caughtexception;

        r33 = $r29;

        virtualinvoke r32.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r33);

     label08:
        throw r32;

     label09:
        goto label13;

     label10:
        $r27 := @caughtexception;

        r34 = $r27;

        $r28 = r0.<androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback mDiagnostics>;

        interfaceinvoke $r28.<androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback: void onResultReceived(int,java.lang.Object)>(6, r34);

        goto label13;

     label11:
        $r17 := @caughtexception;

        r35 = $r17;

        $r18 = r0.<androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback mDiagnostics>;

        interfaceinvoke $r18.<androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback: void onResultReceived(int,java.lang.Object)>(7, r35);

        goto label13;

     label12:
        $r13 := @caughtexception;

        r36 = $r13;

        $r14 = r0.<androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback mDiagnostics>;

        interfaceinvoke $r14.<androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback: void onResultReceived(int,java.lang.Object)>(8, r36);

     label13:
        r37 = r0.<androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.DexProfileData[] mProfile>;

        if r37 == null goto label33;

        $z0 = staticinvoke <androidx.profileinstaller.DeviceProfileWriter: boolean requiresMetadata()>();

        if $z0 == 0 goto label33;

     label14:
        $r8 = r0.<androidx.profileinstaller.DeviceProfileWriter: android.content.res.AssetManager mAssetManager>;

        $r7 = r0.<androidx.profileinstaller.DeviceProfileWriter: java.lang.String mProfileMetaSourceLocation>;

        r38 = virtualinvoke $r8.<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openFd(java.lang.String)>($r7);

     label15:
        r39 = virtualinvoke r38.<android.content.res.AssetFileDescriptor: java.io.FileInputStream createInputStream()>();

     label16:
        $r9 = <androidx.profileinstaller.ProfileTranscoder: byte[] MAGIC_PROFM>;

        r40 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: byte[] readHeader(java.io.InputStream,byte[])>(r39, $r9);

        $r10 = r0.<androidx.profileinstaller.DeviceProfileWriter: byte[] mDesiredVersion>;

        $r11 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMeta(java.io.InputStream,byte[],byte[],androidx.profileinstaller.DexProfileData[])>(r39, r40, $r10, r37);

        r0.<androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.DexProfileData[] mProfile> = $r11;

        r41 = r0;

     label17:
        if r39 == null goto label18;

        virtualinvoke r39.<java.io.InputStream: void close()>();

     label18:
        if r38 == null goto label19;

        virtualinvoke r38.<android.content.res.AssetFileDescriptor: void close()>();

     label19:
        return r41;

     label20:
        $r16 := @caughtexception;

        r42 = $r16;

        if r39 == null goto label24;

     label21:
        virtualinvoke r39.<java.io.InputStream: void close()>();

     label22:
        goto label24;

     label23:
        $r12 := @caughtexception;

        r43 = $r12;

        virtualinvoke r42.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r43);

     label24:
        throw r42;

     label25:
        $r21 := @caughtexception;

        r44 = $r21;

        if r38 == null goto label29;

     label26:
        virtualinvoke r38.<android.content.res.AssetFileDescriptor: void close()>();

     label27:
        goto label29;

     label28:
        $r15 := @caughtexception;

        r45 = $r15;

        virtualinvoke r44.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r45);

     label29:
        throw r44;

     label30:
        $r25 := @caughtexception;

        r46 = $r25;

        $r26 = r0.<androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback mDiagnostics>;

        interfaceinvoke $r26.<androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback: void onResultReceived(int,java.lang.Object)>(9, r46);

        goto label33;

     label31:
        $r22 := @caughtexception;

        r47 = $r22;

        $r23 = r0.<androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback mDiagnostics>;

        interfaceinvoke $r23.<androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback: void onResultReceived(int,java.lang.Object)>(7, r47);

        goto label33;

     label32:
        $r19 := @caughtexception;

        r48 = $r19;

        r0.<androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.DexProfileData[] mProfile> = null;

        $r20 = r0.<androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback mDiagnostics>;

        interfaceinvoke $r20.<androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback: void onResultReceived(int,java.lang.Object)>(8, r48);

     label33:
        return r0;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.io.FileNotFoundException from label01 to label09 with label10;
        catch java.io.IOException from label01 to label09 with label11;
        catch java.lang.IllegalStateException from label01 to label09 with label12;
        catch java.lang.Throwable from label16 to label17 with label20;
        catch java.lang.Throwable from label21 to label22 with label23;
        catch java.lang.Throwable from label15 to label18 with label25;
        catch java.lang.Throwable from label20 to label25 with label25;
        catch java.lang.Throwable from label26 to label27 with label28;
        catch java.io.FileNotFoundException from label14 to label19 with label30;
        catch java.io.FileNotFoundException from label20 to label30 with label30;
        catch java.io.IOException from label14 to label19 with label31;
        catch java.io.IOException from label20 to label30 with label31;
        catch java.lang.IllegalStateException from label14 to label19 with label32;
        catch java.lang.IllegalStateException from label20 to label30 with label32;
    }

    public androidx.profileinstaller.DeviceProfileWriter transcodeIfNeeded()
    {
        androidx.profileinstaller.DeviceProfileWriter r0, r13;
        androidx.profileinstaller.DexProfileData[] r1;
        byte[] r2, $r4;
        java.io.ByteArrayOutputStream $r3, r12;
        androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback $r5, $r7, $r10;
        java.lang.Throwable $r6, $r8, $r9, $r11, r14, r15, r16, r17;
        boolean z0;

        r0 := @this: androidx.profileinstaller.DeviceProfileWriter;

        r1 = r0.<androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.DexProfileData[] mProfile>;

        r2 = r0.<androidx.profileinstaller.DeviceProfileWriter: byte[] mDesiredVersion>;

        if r1 == null goto label01;

        if r2 != null goto label02;

     label01:
        return r0;

     label02:
        specialinvoke r0.<androidx.profileinstaller.DeviceProfileWriter: void assertDeviceAllowsProfileInstallerAotWritesCalled()>();

     label03:
        $r3 = new java.io.ByteArrayOutputStream;

        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>();

        r12 = $r3;

     label04:
        staticinvoke <androidx.profileinstaller.ProfileTranscoder: void writeHeader(java.io.OutputStream,byte[])>(r12, r2);

        z0 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: boolean transcodeAndWriteBody(java.io.OutputStream,byte[],androidx.profileinstaller.DexProfileData[])>(r12, r2, r1);

        if z0 != 0 goto label07;

        $r5 = r0.<androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback mDiagnostics>;

        interfaceinvoke $r5.<androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback: void onResultReceived(int,java.lang.Object)>(5, null);

        r0.<androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.DexProfileData[] mProfile> = null;

        r13 = r0;

     label05:
        virtualinvoke r12.<java.io.ByteArrayOutputStream: void close()>();

     label06:
        return r13;

     label07:
        $r4 = virtualinvoke r12.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        r0.<androidx.profileinstaller.DeviceProfileWriter: byte[] mTranscodedProfile> = $r4;

     label08:
        virtualinvoke r12.<java.io.ByteArrayOutputStream: void close()>();

        goto label14;

     label09:
        $r8 := @caughtexception;

        r14 = $r8;

     label10:
        virtualinvoke r12.<java.io.ByteArrayOutputStream: void close()>();

     label11:
        goto label13;

     label12:
        $r11 := @caughtexception;

        r15 = $r11;

        virtualinvoke r14.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r15);

     label13:
        throw r14;

     label14:
        goto label17;

     label15:
        $r9 := @caughtexception;

        r16 = $r9;

        $r10 = r0.<androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback mDiagnostics>;

        interfaceinvoke $r10.<androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback: void onResultReceived(int,java.lang.Object)>(7, r16);

        goto label17;

     label16:
        $r6 := @caughtexception;

        r17 = $r6;

        $r7 = r0.<androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback mDiagnostics>;

        interfaceinvoke $r7.<androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback: void onResultReceived(int,java.lang.Object)>(8, r17);

     label17:
        r0.<androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.DexProfileData[] mProfile> = null;

        return r0;

        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.io.IOException from label03 to label06 with label15;
        catch java.io.IOException from label07 to label14 with label15;
        catch java.lang.IllegalStateException from label03 to label06 with label16;
        catch java.lang.IllegalStateException from label07 to label14 with label16;
    }

    public boolean write()
    {
        androidx.profileinstaller.DeviceProfileWriter r0;
        byte[] r1;
        java.lang.Throwable r2, r3, $r7, $r8, $r9, $r10, $r11, $r12, $r13, r16, r17, r18, r19, r20;
        java.io.ByteArrayInputStream $r4, r14;
        java.io.FileOutputStream $r5, r15;
        java.io.File $r6;
        boolean z0;

        r0 := @this: androidx.profileinstaller.DeviceProfileWriter;

        r1 = r0.<androidx.profileinstaller.DeviceProfileWriter: byte[] mTranscodedProfile>;

        if r1 != null goto label01;

        return 0;

     label01:
        specialinvoke r0.<androidx.profileinstaller.DeviceProfileWriter: void assertDeviceAllowsProfileInstallerAotWritesCalled()>();

     label02:
        $r4 = new java.io.ByteArrayInputStream;

        specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        r14 = $r4;

     label03:
        $r5 = new java.io.FileOutputStream;

        $r6 = r0.<androidx.profileinstaller.DeviceProfileWriter: java.io.File mCurProfile>;

        specialinvoke $r5.<java.io.FileOutputStream: void <init>(java.io.File)>($r6);

        r15 = $r5;

     label04:
        staticinvoke <androidx.profileinstaller.Encoding: void writeAll(java.io.InputStream,java.io.OutputStream)>(r14, r15);

        specialinvoke r0.<androidx.profileinstaller.DeviceProfileWriter: void result(int,java.lang.Object)>(1, null);

        z0 = 1;

     label05:
        virtualinvoke r15.<java.io.OutputStream: void close()>();

     label06:
        virtualinvoke r14.<java.io.InputStream: void close()>();

     label07:
        r0.<androidx.profileinstaller.DeviceProfileWriter: byte[] mTranscodedProfile> = null;

        r0.<androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.DexProfileData[] mProfile> = null;

        return z0;

     label08:
        $r7 := @caughtexception;

        r16 = $r7;

     label09:
        virtualinvoke r15.<java.io.OutputStream: void close()>();

     label10:
        goto label12;

     label11:
        $r12 := @caughtexception;

        r2 = $r12;

        virtualinvoke r16.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r2);

     label12:
        throw r16;

     label13:
        $r11 := @caughtexception;

        r17 = $r11;

     label14:
        virtualinvoke r14.<java.io.InputStream: void close()>();

     label15:
        goto label17;

     label16:
        $r13 := @caughtexception;

        r18 = $r13;

        virtualinvoke r17.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r18);

     label17:
        throw r17;

     label18:
        $r8 := @caughtexception;

        r19 = $r8;

        specialinvoke r0.<androidx.profileinstaller.DeviceProfileWriter: void result(int,java.lang.Object)>(6, r19);

     label19:
        r0.<androidx.profileinstaller.DeviceProfileWriter: byte[] mTranscodedProfile> = null;

        r0.<androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.DexProfileData[] mProfile> = null;

        goto label24;

     label20:
        $r9 := @caughtexception;

        r20 = $r9;

        specialinvoke r0.<androidx.profileinstaller.DeviceProfileWriter: void result(int,java.lang.Object)>(7, r20);

     label21:
        r0.<androidx.profileinstaller.DeviceProfileWriter: byte[] mTranscodedProfile> = null;

        r0.<androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.DexProfileData[] mProfile> = null;

        goto label24;

     label22:
        $r10 := @caughtexception;

        r3 = $r10;

     label23:
        r0.<androidx.profileinstaller.DeviceProfileWriter: byte[] mTranscodedProfile> = null;

        r0.<androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.DexProfileData[] mProfile> = null;

        throw r3;

     label24:
        return 0;

        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label03 to label06 with label13;
        catch java.lang.Throwable from label08 to label13 with label13;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.io.FileNotFoundException from label02 to label07 with label18;
        catch java.io.FileNotFoundException from label08 to label18 with label18;
        catch java.io.IOException from label02 to label07 with label20;
        catch java.io.IOException from label08 to label18 with label20;
        catch java.lang.Throwable from label02 to label07 with label22;
        catch java.lang.Throwable from label08 to label19 with label22;
        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.lang.Throwable from label22 to label23 with label22;
    }

    private static byte[] desiredVersion()
    {
        int $i0, $i1;
        byte[] $r0, $r1, $r2, $r3, $r4;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 >= 24 goto label1;

        return null;

     label1:
        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        tableswitch($i1)
        {
            case 24: goto label2;
            case 25: goto label2;
            case 26: goto label3;
            case 27: goto label4;
            case 28: goto label5;
            case 29: goto label5;
            case 30: goto label5;
            case 31: goto label6;
            case 32: goto label6;
            case 33: goto label6;
            default: goto label7;
        };

     label2:
        $r4 = <androidx.profileinstaller.ProfileVersion: byte[] V001_N>;

        return $r4;

     label3:
        $r3 = <androidx.profileinstaller.ProfileVersion: byte[] V005_O>;

        return $r3;

     label4:
        $r2 = <androidx.profileinstaller.ProfileVersion: byte[] V009_O_MR1>;

        return $r2;

     label5:
        $r1 = <androidx.profileinstaller.ProfileVersion: byte[] V010_P>;

        return $r1;

     label6:
        $r0 = <androidx.profileinstaller.ProfileVersion: byte[] V015_S>;

        return $r0;

     label7:
        return null;
    }

    private static boolean requiresMetadata()
    {
        int $i0, $i1;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 >= 24 goto label1;

        return 0;

     label1:
        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        tableswitch($i1)
        {
            case 24: goto label2;
            case 25: goto label2;
            case 26: goto label3;
            case 27: goto label3;
            case 28: goto label3;
            case 29: goto label3;
            case 30: goto label3;
            case 31: goto label4;
            case 32: goto label4;
            case 33: goto label4;
            default: goto label5;
        };

     label2:
        return 1;

     label3:
        return 0;

     label4:
        return 1;

     label5:
        return 0;
    }

    private void lambda$result$0(int, java.lang.Object)
    {
        androidx.profileinstaller.DeviceProfileWriter r0;
        int i0;
        java.lang.Object r1;
        androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback $r2;

        r0 := @this: androidx.profileinstaller.DeviceProfileWriter;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = r0.<androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback mDiagnostics>;

        interfaceinvoke $r2.<androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback: void onResultReceived(int,java.lang.Object)>(i0, r1);

        return;
    }

