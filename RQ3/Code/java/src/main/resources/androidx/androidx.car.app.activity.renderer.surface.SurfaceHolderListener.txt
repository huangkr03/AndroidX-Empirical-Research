androidx.car.app.activity.renderer.surface.SurfaceHolderListener
<androidx.car.app.activity.renderer.surface.SurfaceHolderListener: androidx.car.app.activity.ServiceDispatcher mServiceDispatcher>
<androidx.car.app.activity.renderer.surface.SurfaceHolderListener: androidx.car.app.activity.renderer.surface.ISurfaceListener mSurfaceListener>
<androidx.car.app.activity.renderer.surface.SurfaceHolderListener: boolean mIsSurfaceAvailable>
<androidx.car.app.activity.renderer.surface.SurfaceHolderListener: androidx.car.app.activity.renderer.surface.SurfaceWrapperProvider mSurfaceWrapperProvider>
    public void <init>(androidx.car.app.activity.ServiceDispatcher, androidx.car.app.activity.renderer.surface.SurfaceWrapperProvider)
    {
        androidx.car.app.activity.renderer.surface.SurfaceHolderListener r0;
        androidx.car.app.activity.ServiceDispatcher r1;
        androidx.car.app.activity.renderer.surface.SurfaceWrapperProvider r2;

        r0 := @this: androidx.car.app.activity.renderer.surface.SurfaceHolderListener;

        r1 := @parameter0: androidx.car.app.activity.ServiceDispatcher;

        r2 := @parameter1: androidx.car.app.activity.renderer.surface.SurfaceWrapperProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.car.app.activity.renderer.surface.SurfaceHolderListener: androidx.car.app.activity.renderer.surface.SurfaceWrapperProvider mSurfaceWrapperProvider> = r2;

        r0.<androidx.car.app.activity.renderer.surface.SurfaceHolderListener: androidx.car.app.activity.ServiceDispatcher mServiceDispatcher> = r1;

        return;
    }

    public final void setSurfaceListener(androidx.car.app.activity.renderer.surface.ISurfaceListener)
    {
        androidx.car.app.activity.renderer.surface.SurfaceHolderListener r0;
        androidx.car.app.activity.renderer.surface.ISurfaceListener r1;
        boolean $z0;

        r0 := @this: androidx.car.app.activity.renderer.surface.SurfaceHolderListener;

        r1 := @parameter0: androidx.car.app.activity.renderer.surface.ISurfaceListener;

        r0.<androidx.car.app.activity.renderer.surface.SurfaceHolderListener: androidx.car.app.activity.renderer.surface.ISurfaceListener mSurfaceListener> = r1;

        if r1 == null goto label1;

        $z0 = r0.<androidx.car.app.activity.renderer.surface.SurfaceHolderListener: boolean mIsSurfaceAvailable>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<androidx.car.app.activity.renderer.surface.SurfaceHolderListener: void notifySurfaceCreated()>();

     label1:
        return;
    }

    public void surfaceCreated(android.view.SurfaceHolder)
    {
        androidx.car.app.activity.renderer.surface.SurfaceHolderListener r0;
        android.view.SurfaceHolder r1;

        r0 := @this: androidx.car.app.activity.renderer.surface.SurfaceHolderListener;

        r1 := @parameter0: android.view.SurfaceHolder;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        r0.<androidx.car.app.activity.renderer.surface.SurfaceHolderListener: boolean mIsSurfaceAvailable> = 1;

        specialinvoke r0.<androidx.car.app.activity.renderer.surface.SurfaceHolderListener: void notifySurfaceCreated()>();

        return;
    }

    public void surfaceChanged(android.view.SurfaceHolder, int, int, int)
    {
        androidx.car.app.activity.renderer.surface.SurfaceHolderListener r0;
        android.view.SurfaceHolder r1;
        int i0, i1, i2;

        r0 := @this: androidx.car.app.activity.renderer.surface.SurfaceHolderListener;

        r1 := @parameter0: android.view.SurfaceHolder;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        specialinvoke r0.<androidx.car.app.activity.renderer.surface.SurfaceHolderListener: void notifySurfaceChanged()>();

        return;
    }

    public void surfaceDestroyed(android.view.SurfaceHolder)
    {
        androidx.car.app.activity.renderer.surface.SurfaceHolderListener r0;
        android.view.SurfaceHolder r1;

        r0 := @this: androidx.car.app.activity.renderer.surface.SurfaceHolderListener;

        r1 := @parameter0: android.view.SurfaceHolder;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        r0.<androidx.car.app.activity.renderer.surface.SurfaceHolderListener: boolean mIsSurfaceAvailable> = 0;

        specialinvoke r0.<androidx.car.app.activity.renderer.surface.SurfaceHolderListener: void notifySurfaceDestroyed()>();

        return;
    }

    private void notifySurfaceCreated()
    {
        androidx.car.app.activity.renderer.surface.SurfaceHolderListener r0;
        androidx.car.app.activity.renderer.surface.ISurfaceListener r1;
        androidx.car.app.activity.ServiceDispatcher $r2;
        androidx.car.app.activity.ServiceDispatcher$OneWayCall $r3;

        r0 := @this: androidx.car.app.activity.renderer.surface.SurfaceHolderListener;

        r1 = r0.<androidx.car.app.activity.renderer.surface.SurfaceHolderListener: androidx.car.app.activity.renderer.surface.ISurfaceListener mSurfaceListener>;

        if r1 == null goto label1;

        $r2 = r0.<androidx.car.app.activity.renderer.surface.SurfaceHolderListener: androidx.car.app.activity.ServiceDispatcher mServiceDispatcher>;

        $r3 = dynamicinvoke "invoke" <androidx.car.app.activity.ServiceDispatcher$OneWayCall (androidx.car.app.activity.renderer.surface.SurfaceHolderListener,androidx.car.app.activity.renderer.surface.ISurfaceListener)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.car.app.activity.renderer.surface.SurfaceHolderListener: void lambda$notifySurfaceCreated$0(androidx.car.app.activity.renderer.surface.ISurfaceListener)>, methodtype: void __METHODTYPE__());

        virtualinvoke $r2.<androidx.car.app.activity.ServiceDispatcher: void dispatch(java.lang.String,androidx.car.app.activity.ServiceDispatcher$OneWayCall)>("onSurfaceAvailable", $r3);

     label1:
        return;
    }

    private void notifySurfaceChanged()
    {
        androidx.car.app.activity.renderer.surface.SurfaceHolderListener r0;
        androidx.car.app.activity.renderer.surface.ISurfaceListener r1;
        androidx.car.app.activity.ServiceDispatcher $r2;
        androidx.car.app.activity.ServiceDispatcher$OneWayCall $r3;

        r0 := @this: androidx.car.app.activity.renderer.surface.SurfaceHolderListener;

        r1 = r0.<androidx.car.app.activity.renderer.surface.SurfaceHolderListener: androidx.car.app.activity.renderer.surface.ISurfaceListener mSurfaceListener>;

        if r1 == null goto label1;

        $r2 = r0.<androidx.car.app.activity.renderer.surface.SurfaceHolderListener: androidx.car.app.activity.ServiceDispatcher mServiceDispatcher>;

        $r3 = dynamicinvoke "invoke" <androidx.car.app.activity.ServiceDispatcher$OneWayCall (androidx.car.app.activity.renderer.surface.SurfaceHolderListener,androidx.car.app.activity.renderer.surface.ISurfaceListener)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.car.app.activity.renderer.surface.SurfaceHolderListener: void lambda$notifySurfaceChanged$1(androidx.car.app.activity.renderer.surface.ISurfaceListener)>, methodtype: void __METHODTYPE__());

        virtualinvoke $r2.<androidx.car.app.activity.ServiceDispatcher: void dispatch(java.lang.String,androidx.car.app.activity.ServiceDispatcher$OneWayCall)>("onSurfaceChanged", $r3);

     label1:
        return;
    }

    private void notifySurfaceDestroyed()
    {
        androidx.car.app.activity.renderer.surface.SurfaceHolderListener r0;
        androidx.car.app.activity.renderer.surface.ISurfaceListener r1;
        androidx.car.app.activity.ServiceDispatcher $r2;
        androidx.car.app.activity.ServiceDispatcher$OneWayCall $r3;

        r0 := @this: androidx.car.app.activity.renderer.surface.SurfaceHolderListener;

        r1 = r0.<androidx.car.app.activity.renderer.surface.SurfaceHolderListener: androidx.car.app.activity.renderer.surface.ISurfaceListener mSurfaceListener>;

        if r1 == null goto label1;

        $r2 = r0.<androidx.car.app.activity.renderer.surface.SurfaceHolderListener: androidx.car.app.activity.ServiceDispatcher mServiceDispatcher>;

        $r3 = dynamicinvoke "invoke" <androidx.car.app.activity.ServiceDispatcher$OneWayCall (androidx.car.app.activity.renderer.surface.SurfaceHolderListener,androidx.car.app.activity.renderer.surface.ISurfaceListener)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.car.app.activity.renderer.surface.SurfaceHolderListener: void lambda$notifySurfaceDestroyed$2(androidx.car.app.activity.renderer.surface.ISurfaceListener)>, methodtype: void __METHODTYPE__());

        virtualinvoke $r2.<androidx.car.app.activity.ServiceDispatcher: void dispatchNoFail(java.lang.String,androidx.car.app.activity.ServiceDispatcher$OneWayCall)>("onSurfaceDestroyed", $r3);

     label1:
        return;
    }

    private void lambda$notifySurfaceDestroyed$2(androidx.car.app.activity.renderer.surface.ISurfaceListener) throws android.os.RemoteException, androidx.car.app.serialization.BundlerException
    {
        androidx.car.app.activity.renderer.surface.SurfaceHolderListener r0;
        androidx.car.app.activity.renderer.surface.ISurfaceListener r1;
        androidx.car.app.activity.renderer.surface.SurfaceWrapperProvider $r2;
        androidx.car.app.activity.renderer.surface.SurfaceWrapper $r3;
        androidx.car.app.serialization.Bundleable $r4;

        r0 := @this: androidx.car.app.activity.renderer.surface.SurfaceHolderListener;

        r1 := @parameter0: androidx.car.app.activity.renderer.surface.ISurfaceListener;

        $r2 = r0.<androidx.car.app.activity.renderer.surface.SurfaceHolderListener: androidx.car.app.activity.renderer.surface.SurfaceWrapperProvider mSurfaceWrapperProvider>;

        $r3 = virtualinvoke $r2.<androidx.car.app.activity.renderer.surface.SurfaceWrapperProvider: androidx.car.app.activity.renderer.surface.SurfaceWrapper createSurfaceWrapper()>();

        $r4 = staticinvoke <androidx.car.app.serialization.Bundleable: androidx.car.app.serialization.Bundleable create(java.lang.Object)>($r3);

        interfaceinvoke r1.<androidx.car.app.activity.renderer.surface.ISurfaceListener: void onSurfaceDestroyed(androidx.car.app.serialization.Bundleable)>($r4);

        return;
    }

    private void lambda$notifySurfaceChanged$1(androidx.car.app.activity.renderer.surface.ISurfaceListener) throws android.os.RemoteException, androidx.car.app.serialization.BundlerException
    {
        androidx.car.app.activity.renderer.surface.SurfaceHolderListener r0;
        androidx.car.app.activity.renderer.surface.ISurfaceListener r1;
        androidx.car.app.activity.renderer.surface.SurfaceWrapperProvider $r2;
        androidx.car.app.activity.renderer.surface.SurfaceWrapper $r3;
        androidx.car.app.serialization.Bundleable $r4;

        r0 := @this: androidx.car.app.activity.renderer.surface.SurfaceHolderListener;

        r1 := @parameter0: androidx.car.app.activity.renderer.surface.ISurfaceListener;

        $r2 = r0.<androidx.car.app.activity.renderer.surface.SurfaceHolderListener: androidx.car.app.activity.renderer.surface.SurfaceWrapperProvider mSurfaceWrapperProvider>;

        $r3 = virtualinvoke $r2.<androidx.car.app.activity.renderer.surface.SurfaceWrapperProvider: androidx.car.app.activity.renderer.surface.SurfaceWrapper createSurfaceWrapper()>();

        $r4 = staticinvoke <androidx.car.app.serialization.Bundleable: androidx.car.app.serialization.Bundleable create(java.lang.Object)>($r3);

        interfaceinvoke r1.<androidx.car.app.activity.renderer.surface.ISurfaceListener: void onSurfaceChanged(androidx.car.app.serialization.Bundleable)>($r4);

        return;
    }

    private void lambda$notifySurfaceCreated$0(androidx.car.app.activity.renderer.surface.ISurfaceListener) throws android.os.RemoteException, androidx.car.app.serialization.BundlerException
    {
        androidx.car.app.activity.renderer.surface.SurfaceHolderListener r0;
        androidx.car.app.activity.renderer.surface.ISurfaceListener r1;
        androidx.car.app.activity.renderer.surface.SurfaceWrapperProvider $r2;
        androidx.car.app.activity.renderer.surface.SurfaceWrapper $r3;
        androidx.car.app.serialization.Bundleable $r4;

        r0 := @this: androidx.car.app.activity.renderer.surface.SurfaceHolderListener;

        r1 := @parameter0: androidx.car.app.activity.renderer.surface.ISurfaceListener;

        $r2 = r0.<androidx.car.app.activity.renderer.surface.SurfaceHolderListener: androidx.car.app.activity.renderer.surface.SurfaceWrapperProvider mSurfaceWrapperProvider>;

        $r3 = virtualinvoke $r2.<androidx.car.app.activity.renderer.surface.SurfaceWrapperProvider: androidx.car.app.activity.renderer.surface.SurfaceWrapper createSurfaceWrapper()>();

        $r4 = staticinvoke <androidx.car.app.serialization.Bundleable: androidx.car.app.serialization.Bundleable create(java.lang.Object)>($r3);

        interfaceinvoke r1.<androidx.car.app.activity.renderer.surface.ISurfaceListener: void onSurfaceAvailable(androidx.car.app.serialization.Bundleable)>($r4);

        return;
    }

