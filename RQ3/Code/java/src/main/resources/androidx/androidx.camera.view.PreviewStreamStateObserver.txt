androidx.camera.view.PreviewStreamStateObserver
<androidx.camera.view.PreviewStreamStateObserver: java.lang.String TAG>
<androidx.camera.view.PreviewStreamStateObserver: androidx.camera.core.impl.CameraInfoInternal mCameraInfoInternal>
<androidx.camera.view.PreviewStreamStateObserver: androidx.lifecycle.MutableLiveData mPreviewStreamStateLiveData>
<androidx.camera.view.PreviewStreamStateObserver: androidx.camera.view.PreviewView$StreamState mPreviewStreamState>
<androidx.camera.view.PreviewStreamStateObserver: androidx.camera.view.PreviewViewImplementation mPreviewViewImplementation>
<androidx.camera.view.PreviewStreamStateObserver: com.google.common.util.concurrent.ListenableFuture mFlowFuture>
<androidx.camera.view.PreviewStreamStateObserver: boolean mHasStartedPreviewStreamFlow>
    void <init>(androidx.camera.core.impl.CameraInfoInternal, androidx.lifecycle.MutableLiveData, androidx.camera.view.PreviewViewImplementation)
    {
        androidx.camera.view.PreviewStreamStateObserver r0, r4;
        androidx.camera.core.impl.CameraInfoInternal r1;
        androidx.lifecycle.MutableLiveData r2;
        androidx.camera.view.PreviewViewImplementation r3;
        java.lang.Throwable r5, $r9;
        java.lang.Object $r7;
        androidx.camera.view.PreviewView$StreamState $r8;

        r0 := @this: androidx.camera.view.PreviewStreamStateObserver;

        r1 := @parameter0: androidx.camera.core.impl.CameraInfoInternal;

        r2 := @parameter1: androidx.lifecycle.MutableLiveData;

        r3 := @parameter2: androidx.camera.view.PreviewViewImplementation;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.view.PreviewStreamStateObserver: boolean mHasStartedPreviewStreamFlow> = 0;

        r0.<androidx.camera.view.PreviewStreamStateObserver: androidx.camera.core.impl.CameraInfoInternal mCameraInfoInternal> = r1;

        r0.<androidx.camera.view.PreviewStreamStateObserver: androidx.lifecycle.MutableLiveData mPreviewStreamStateLiveData> = r2;

        r0.<androidx.camera.view.PreviewStreamStateObserver: androidx.camera.view.PreviewViewImplementation mPreviewViewImplementation> = r3;

        r4 = r0;

        entermonitor r0;

     label1:
        $r7 = virtualinvoke r2.<androidx.lifecycle.MutableLiveData: java.lang.Object getValue()>();

        $r8 = (androidx.camera.view.PreviewView$StreamState) $r7;

        r0.<androidx.camera.view.PreviewStreamStateObserver: androidx.camera.view.PreviewView$StreamState mPreviewStreamState> = $r8;

        exitmonitor r4;

     label2:
        goto label5;

     label3:
        $r9 := @caughtexception;

        r5 = $r9;

        exitmonitor r4;

     label4:
        throw r5;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void onNewData(androidx.camera.core.impl.CameraInternal$State)
    {
        androidx.camera.view.PreviewStreamStateObserver r0;
        androidx.camera.core.impl.CameraInternal$State r1, $r2, $r3, $r4, $r5, $r6, $r8, $r9;
        androidx.camera.core.impl.CameraInfoInternal $r7;
        androidx.camera.view.PreviewView$StreamState $r10;
        boolean $z0, $z1;

        r0 := @this: androidx.camera.view.PreviewStreamStateObserver;

        r1 := @parameter0: androidx.camera.core.impl.CameraInternal$State;

        $r2 = <androidx.camera.core.impl.CameraInternal$State: androidx.camera.core.impl.CameraInternal$State CLOSING>;

        if r1 == $r2 goto label1;

        $r3 = <androidx.camera.core.impl.CameraInternal$State: androidx.camera.core.impl.CameraInternal$State CLOSED>;

        if r1 == $r3 goto label1;

        $r4 = <androidx.camera.core.impl.CameraInternal$State: androidx.camera.core.impl.CameraInternal$State RELEASING>;

        if r1 == $r4 goto label1;

        $r5 = <androidx.camera.core.impl.CameraInternal$State: androidx.camera.core.impl.CameraInternal$State RELEASED>;

        if r1 != $r5 goto label2;

     label1:
        $r10 = <androidx.camera.view.PreviewView$StreamState: androidx.camera.view.PreviewView$StreamState IDLE>;

        virtualinvoke r0.<androidx.camera.view.PreviewStreamStateObserver: void updatePreviewStreamState(androidx.camera.view.PreviewView$StreamState)>($r10);

        $z0 = r0.<androidx.camera.view.PreviewStreamStateObserver: boolean mHasStartedPreviewStreamFlow>;

        if $z0 == 0 goto label4;

        r0.<androidx.camera.view.PreviewStreamStateObserver: boolean mHasStartedPreviewStreamFlow> = 0;

        specialinvoke r0.<androidx.camera.view.PreviewStreamStateObserver: void cancelFlow()>();

        goto label4;

     label2:
        $r6 = <androidx.camera.core.impl.CameraInternal$State: androidx.camera.core.impl.CameraInternal$State OPENING>;

        if r1 == $r6 goto label3;

        $r8 = <androidx.camera.core.impl.CameraInternal$State: androidx.camera.core.impl.CameraInternal$State OPEN>;

        if r1 == $r8 goto label3;

        $r9 = <androidx.camera.core.impl.CameraInternal$State: androidx.camera.core.impl.CameraInternal$State PENDING_OPEN>;

        if r1 != $r9 goto label4;

     label3:
        $z1 = r0.<androidx.camera.view.PreviewStreamStateObserver: boolean mHasStartedPreviewStreamFlow>;

        if $z1 != 0 goto label4;

        $r7 = r0.<androidx.camera.view.PreviewStreamStateObserver: androidx.camera.core.impl.CameraInfoInternal mCameraInfoInternal>;

        specialinvoke r0.<androidx.camera.view.PreviewStreamStateObserver: void startPreviewStreamStateFlow(androidx.camera.core.CameraInfo)>($r7);

        r0.<androidx.camera.view.PreviewStreamStateObserver: boolean mHasStartedPreviewStreamFlow> = 1;

     label4:
        return;
    }

    public void onError(java.lang.Throwable)
    {
        androidx.camera.view.PreviewStreamStateObserver r0;
        java.lang.Throwable r1;
        androidx.camera.view.PreviewView$StreamState $r2;

        r0 := @this: androidx.camera.view.PreviewStreamStateObserver;

        r1 := @parameter0: java.lang.Throwable;

        virtualinvoke r0.<androidx.camera.view.PreviewStreamStateObserver: void clear()>();

        $r2 = <androidx.camera.view.PreviewView$StreamState: androidx.camera.view.PreviewView$StreamState IDLE>;

        virtualinvoke r0.<androidx.camera.view.PreviewStreamStateObserver: void updatePreviewStreamState(androidx.camera.view.PreviewView$StreamState)>($r2);

        return;
    }

    void clear()
    {
        androidx.camera.view.PreviewStreamStateObserver r0;

        r0 := @this: androidx.camera.view.PreviewStreamStateObserver;

        specialinvoke r0.<androidx.camera.view.PreviewStreamStateObserver: void cancelFlow()>();

        return;
    }

    private void cancelFlow()
    {
        androidx.camera.view.PreviewStreamStateObserver r0;
        com.google.common.util.concurrent.ListenableFuture $r1, $r2;

        r0 := @this: androidx.camera.view.PreviewStreamStateObserver;

        $r1 = r0.<androidx.camera.view.PreviewStreamStateObserver: com.google.common.util.concurrent.ListenableFuture mFlowFuture>;

        if $r1 == null goto label1;

        $r2 = r0.<androidx.camera.view.PreviewStreamStateObserver: com.google.common.util.concurrent.ListenableFuture mFlowFuture>;

        interfaceinvoke $r2.<com.google.common.util.concurrent.ListenableFuture: boolean cancel(boolean)>(0);

        r0.<androidx.camera.view.PreviewStreamStateObserver: com.google.common.util.concurrent.ListenableFuture mFlowFuture> = null;

     label1:
        return;
    }

    private void startPreviewStreamStateFlow(androidx.camera.core.CameraInfo)
    {
        androidx.camera.view.PreviewStreamStateObserver r0;
        androidx.camera.core.CameraInfo r1;
        java.util.ArrayList r2, $r4;
        androidx.camera.view.PreviewView$StreamState $r3;
        com.google.common.util.concurrent.ListenableFuture $r5, $r14;
        androidx.camera.core.impl.utils.futures.FutureChain $r6, $r9, $r12;
        androidx.camera.core.impl.utils.futures.AsyncFunction $r7;
        java.util.concurrent.Executor $r8, $r11, $r15;
        androidx.arch.core.util.Function $r10;
        androidx.camera.view.PreviewStreamStateObserver$1 $r13;

        r0 := @this: androidx.camera.view.PreviewStreamStateObserver;

        r1 := @parameter0: androidx.camera.core.CameraInfo;

        $r3 = <androidx.camera.view.PreviewView$StreamState: androidx.camera.view.PreviewView$StreamState IDLE>;

        virtualinvoke r0.<androidx.camera.view.PreviewStreamStateObserver: void updatePreviewStreamState(androidx.camera.view.PreviewView$StreamState)>($r3);

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r2 = $r4;

        $r5 = specialinvoke r0.<androidx.camera.view.PreviewStreamStateObserver: com.google.common.util.concurrent.ListenableFuture waitForCaptureResult(androidx.camera.core.CameraInfo,java.util.List)>(r1, r2);

        $r6 = staticinvoke <androidx.camera.core.impl.utils.futures.FutureChain: androidx.camera.core.impl.utils.futures.FutureChain 'from'(com.google.common.util.concurrent.ListenableFuture)>($r5);

        $r7 = dynamicinvoke "apply" <androidx.camera.core.impl.utils.futures.AsyncFunction (androidx.camera.view.PreviewStreamStateObserver)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: com.google.common.util.concurrent.ListenableFuture __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.view.PreviewStreamStateObserver: com.google.common.util.concurrent.ListenableFuture lambda$startPreviewStreamStateFlow$0(java.lang.Void)>, methodtype: com.google.common.util.concurrent.ListenableFuture __METHODTYPE__(java.lang.Void));

        $r8 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor directExecutor()>();

        $r9 = virtualinvoke $r6.<androidx.camera.core.impl.utils.futures.FutureChain: androidx.camera.core.impl.utils.futures.FutureChain transformAsync(androidx.camera.core.impl.utils.futures.AsyncFunction,java.util.concurrent.Executor)>($r7, $r8);

        $r10 = dynamicinvoke "apply" <androidx.arch.core.util.Function (androidx.camera.view.PreviewStreamStateObserver)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.view.PreviewStreamStateObserver: java.lang.Void lambda$startPreviewStreamStateFlow$1(java.lang.Void)>, methodtype: java.lang.Void __METHODTYPE__(java.lang.Void));

        $r11 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor directExecutor()>();

        $r12 = virtualinvoke $r9.<androidx.camera.core.impl.utils.futures.FutureChain: androidx.camera.core.impl.utils.futures.FutureChain transform(androidx.arch.core.util.Function,java.util.concurrent.Executor)>($r10, $r11);

        r0.<androidx.camera.view.PreviewStreamStateObserver: com.google.common.util.concurrent.ListenableFuture mFlowFuture> = $r12;

        $r14 = r0.<androidx.camera.view.PreviewStreamStateObserver: com.google.common.util.concurrent.ListenableFuture mFlowFuture>;

        $r13 = new androidx.camera.view.PreviewStreamStateObserver$1;

        specialinvoke $r13.<androidx.camera.view.PreviewStreamStateObserver$1: void <init>(androidx.camera.view.PreviewStreamStateObserver,java.util.List,androidx.camera.core.CameraInfo)>(r0, r2, r1);

        $r15 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor directExecutor()>();

        staticinvoke <androidx.camera.core.impl.utils.futures.Futures: void addCallback(com.google.common.util.concurrent.ListenableFuture,androidx.camera.core.impl.utils.futures.FutureCallback,java.util.concurrent.Executor)>($r14, $r13, $r15);

        return;
    }

    void updatePreviewStreamState(androidx.camera.view.PreviewView$StreamState)
    {
        androidx.camera.view.PreviewStreamStateObserver r0, r2;
        androidx.camera.view.PreviewView$StreamState r1, $r5;
        java.lang.Throwable r3, $r11;
        boolean $z0;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;
        androidx.lifecycle.MutableLiveData $r10;

        r0 := @this: androidx.camera.view.PreviewStreamStateObserver;

        r1 := @parameter0: androidx.camera.view.PreviewView$StreamState;

        r2 = r0;

        entermonitor r0;

     label1:
        $r5 = r0.<androidx.camera.view.PreviewStreamStateObserver: androidx.camera.view.PreviewView$StreamState mPreviewStreamState>;

        $z0 = virtualinvoke $r5.<androidx.camera.view.PreviewView$StreamState: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label3;

        exitmonitor r2;

     label2:
        return;

     label3:
        r0.<androidx.camera.view.PreviewStreamStateObserver: androidx.camera.view.PreviewView$StreamState mPreviewStreamState> = r1;

        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r11 := @caughtexception;

        r3 = $r11;

        exitmonitor r2;

     label6:
        throw r3;

     label7:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Update Preview stream state to ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("StreamStateObserver", $r9);

        $r10 = r0.<androidx.camera.view.PreviewStreamStateObserver: androidx.lifecycle.MutableLiveData mPreviewStreamStateLiveData>;

        virtualinvoke $r10.<androidx.lifecycle.MutableLiveData: void postValue(java.lang.Object)>(r1);

        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private com.google.common.util.concurrent.ListenableFuture waitForCaptureResult(androidx.camera.core.CameraInfo, java.util.List)
    {
        androidx.camera.view.PreviewStreamStateObserver r0;
        androidx.camera.core.CameraInfo r1;
        java.util.List r2;
        androidx.concurrent.futures.CallbackToFutureAdapter$Resolver $r3;
        com.google.common.util.concurrent.ListenableFuture $r4;

        r0 := @this: androidx.camera.view.PreviewStreamStateObserver;

        r1 := @parameter0: androidx.camera.core.CameraInfo;

        r2 := @parameter1: java.util.List;

        $r3 = dynamicinvoke "attachCompleter" <androidx.concurrent.futures.CallbackToFutureAdapter$Resolver (androidx.camera.view.PreviewStreamStateObserver,androidx.camera.core.CameraInfo,java.util.List)>(r0, r1, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.view.PreviewStreamStateObserver: java.lang.Object lambda$waitForCaptureResult$2(androidx.camera.core.CameraInfo,java.util.List,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer));

        $r4 = staticinvoke <androidx.concurrent.futures.CallbackToFutureAdapter: com.google.common.util.concurrent.ListenableFuture getFuture(androidx.concurrent.futures.CallbackToFutureAdapter$Resolver)>($r3);

        return $r4;
    }

    public volatile void onNewData(java.lang.Object)
    {
        androidx.camera.view.PreviewStreamStateObserver r0;
        java.lang.Object r1;
        androidx.camera.core.impl.CameraInternal$State $r2;

        r0 := @this: androidx.camera.view.PreviewStreamStateObserver;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.camera.core.impl.CameraInternal$State) r1;

        virtualinvoke r0.<androidx.camera.view.PreviewStreamStateObserver: void onNewData(androidx.camera.core.impl.CameraInternal$State)>($r2);

        return;
    }

    private java.lang.Object lambda$waitForCaptureResult$2(androidx.camera.core.CameraInfo, java.util.List, androidx.concurrent.futures.CallbackToFutureAdapter$Completer) throws java.lang.Exception
    {
        androidx.camera.view.PreviewStreamStateObserver r0;
        androidx.camera.core.CameraInfo r1;
        java.util.List r2;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r3;
        androidx.camera.view.PreviewStreamStateObserver$2 r4, $r5;
        androidx.camera.core.impl.CameraInfoInternal $r6;
        java.util.concurrent.Executor $r7;

        r0 := @this: androidx.camera.view.PreviewStreamStateObserver;

        r1 := @parameter0: androidx.camera.core.CameraInfo;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        $r5 = new androidx.camera.view.PreviewStreamStateObserver$2;

        specialinvoke $r5.<androidx.camera.view.PreviewStreamStateObserver$2: void <init>(androidx.camera.view.PreviewStreamStateObserver,androidx.concurrent.futures.CallbackToFutureAdapter$Completer,androidx.camera.core.CameraInfo)>(r0, r3, r1);

        r4 = $r5;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r4);

        $r6 = (androidx.camera.core.impl.CameraInfoInternal) r1;

        $r7 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor directExecutor()>();

        interfaceinvoke $r6.<androidx.camera.core.impl.CameraInfoInternal: void addSessionCaptureCallback(java.util.concurrent.Executor,androidx.camera.core.impl.CameraCaptureCallback)>($r7, r4);

        return "waitForCaptureResult";
    }

    private java.lang.Void lambda$startPreviewStreamStateFlow$1(java.lang.Void)
    {
        androidx.camera.view.PreviewStreamStateObserver r0;
        java.lang.Void r1;
        androidx.camera.view.PreviewView$StreamState $r2;

        r0 := @this: androidx.camera.view.PreviewStreamStateObserver;

        r1 := @parameter0: java.lang.Void;

        $r2 = <androidx.camera.view.PreviewView$StreamState: androidx.camera.view.PreviewView$StreamState STREAMING>;

        virtualinvoke r0.<androidx.camera.view.PreviewStreamStateObserver: void updatePreviewStreamState(androidx.camera.view.PreviewView$StreamState)>($r2);

        return null;
    }

    private com.google.common.util.concurrent.ListenableFuture lambda$startPreviewStreamStateFlow$0(java.lang.Void) throws java.lang.Exception
    {
        androidx.camera.view.PreviewStreamStateObserver r0;
        java.lang.Void r1;
        androidx.camera.view.PreviewViewImplementation $r2;
        com.google.common.util.concurrent.ListenableFuture $r3;

        r0 := @this: androidx.camera.view.PreviewStreamStateObserver;

        r1 := @parameter0: java.lang.Void;

        $r2 = r0.<androidx.camera.view.PreviewStreamStateObserver: androidx.camera.view.PreviewViewImplementation mPreviewViewImplementation>;

        $r3 = virtualinvoke $r2.<androidx.camera.view.PreviewViewImplementation: com.google.common.util.concurrent.ListenableFuture waitForNextFrame()>();

        return $r3;
    }

androidx.camera.view.PreviewStreamStateObserver$1
<androidx.camera.view.PreviewStreamStateObserver$1: java.util.List val$callbacksToClear>
<androidx.camera.view.PreviewStreamStateObserver$1: androidx.camera.core.CameraInfo val$cameraInfo>
<androidx.camera.view.PreviewStreamStateObserver$1: androidx.camera.view.PreviewStreamStateObserver this$0>
    void <init>(androidx.camera.view.PreviewStreamStateObserver, java.util.List, androidx.camera.core.CameraInfo)
    {
        androidx.camera.view.PreviewStreamStateObserver$1 r0;
        androidx.camera.view.PreviewStreamStateObserver r1;
        java.util.List r2;
        androidx.camera.core.CameraInfo r3;

        r0 := @this: androidx.camera.view.PreviewStreamStateObserver$1;

        r1 := @parameter0: androidx.camera.view.PreviewStreamStateObserver;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: androidx.camera.core.CameraInfo;

        r0.<androidx.camera.view.PreviewStreamStateObserver$1: androidx.camera.view.PreviewStreamStateObserver this$0> = r1;

        r0.<androidx.camera.view.PreviewStreamStateObserver$1: java.util.List val$callbacksToClear> = r2;

        r0.<androidx.camera.view.PreviewStreamStateObserver$1: androidx.camera.core.CameraInfo val$cameraInfo> = r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onSuccess(java.lang.Void)
    {
        androidx.camera.view.PreviewStreamStateObserver$1 r0;
        java.lang.Void r1;
        androidx.camera.view.PreviewStreamStateObserver $r2;

        r0 := @this: androidx.camera.view.PreviewStreamStateObserver$1;

        r1 := @parameter0: java.lang.Void;

        $r2 = r0.<androidx.camera.view.PreviewStreamStateObserver$1: androidx.camera.view.PreviewStreamStateObserver this$0>;

        $r2.<androidx.camera.view.PreviewStreamStateObserver: com.google.common.util.concurrent.ListenableFuture mFlowFuture> = null;

        return;
    }

    public void onFailure(java.lang.Throwable)
    {
        androidx.camera.view.PreviewStreamStateObserver$1 r0;
        java.lang.Throwable r1;
        java.util.Iterator r2;
        androidx.camera.core.impl.CameraCaptureCallback r3;
        androidx.camera.view.PreviewStreamStateObserver $r4;
        java.util.List $r5, $r6, $r7;
        boolean $z0, $z1;
        java.lang.Object $r8;
        androidx.camera.core.CameraInfo $r9;
        androidx.camera.core.impl.CameraInfoInternal $r10;

        r0 := @this: androidx.camera.view.PreviewStreamStateObserver$1;

        r1 := @parameter0: java.lang.Throwable;

        $r4 = r0.<androidx.camera.view.PreviewStreamStateObserver$1: androidx.camera.view.PreviewStreamStateObserver this$0>;

        $r4.<androidx.camera.view.PreviewStreamStateObserver: com.google.common.util.concurrent.ListenableFuture mFlowFuture> = null;

        $r5 = r0.<androidx.camera.view.PreviewStreamStateObserver$1: java.util.List val$callbacksToClear>;

        $z0 = interfaceinvoke $r5.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $r6 = r0.<androidx.camera.view.PreviewStreamStateObserver$1: java.util.List val$callbacksToClear>;

        r2 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.camera.core.impl.CameraCaptureCallback) $r8;

        $r9 = r0.<androidx.camera.view.PreviewStreamStateObserver$1: androidx.camera.core.CameraInfo val$cameraInfo>;

        $r10 = (androidx.camera.core.impl.CameraInfoInternal) $r9;

        interfaceinvoke $r10.<androidx.camera.core.impl.CameraInfoInternal: void removeSessionCaptureCallback(androidx.camera.core.impl.CameraCaptureCallback)>(r3);

        goto label1;

     label2:
        $r7 = r0.<androidx.camera.view.PreviewStreamStateObserver$1: java.util.List val$callbacksToClear>;

        interfaceinvoke $r7.<java.util.List: void clear()>();

     label3:
        return;
    }

    public volatile void onSuccess(java.lang.Object)
    {
        androidx.camera.view.PreviewStreamStateObserver$1 r0;
        java.lang.Object r1;
        java.lang.Void $r2;

        r0 := @this: androidx.camera.view.PreviewStreamStateObserver$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Void) r1;

        virtualinvoke r0.<androidx.camera.view.PreviewStreamStateObserver$1: void onSuccess(java.lang.Void)>($r2);

        return;
    }

androidx.camera.view.PreviewStreamStateObserver$2
<androidx.camera.view.PreviewStreamStateObserver$2: androidx.concurrent.futures.CallbackToFutureAdapter$Completer val$completer>
<androidx.camera.view.PreviewStreamStateObserver$2: androidx.camera.core.CameraInfo val$cameraInfo>
<androidx.camera.view.PreviewStreamStateObserver$2: androidx.camera.view.PreviewStreamStateObserver this$0>
    void <init>(androidx.camera.view.PreviewStreamStateObserver, androidx.concurrent.futures.CallbackToFutureAdapter$Completer, androidx.camera.core.CameraInfo)
    {
        androidx.camera.view.PreviewStreamStateObserver$2 r0;
        androidx.camera.view.PreviewStreamStateObserver r1;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r2;
        androidx.camera.core.CameraInfo r3;

        r0 := @this: androidx.camera.view.PreviewStreamStateObserver$2;

        r1 := @parameter0: androidx.camera.view.PreviewStreamStateObserver;

        r2 := @parameter1: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        r3 := @parameter2: androidx.camera.core.CameraInfo;

        r0.<androidx.camera.view.PreviewStreamStateObserver$2: androidx.camera.view.PreviewStreamStateObserver this$0> = r1;

        r0.<androidx.camera.view.PreviewStreamStateObserver$2: androidx.concurrent.futures.CallbackToFutureAdapter$Completer val$completer> = r2;

        r0.<androidx.camera.view.PreviewStreamStateObserver$2: androidx.camera.core.CameraInfo val$cameraInfo> = r3;

        specialinvoke r0.<androidx.camera.core.impl.CameraCaptureCallback: void <init>()>();

        return;
    }

    public void onCaptureCompleted(androidx.camera.core.impl.CameraCaptureResult)
    {
        androidx.camera.view.PreviewStreamStateObserver$2 r0;
        androidx.camera.core.impl.CameraCaptureResult r1;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer $r2;
        androidx.camera.core.CameraInfo $r3;
        androidx.camera.core.impl.CameraInfoInternal $r4;

        r0 := @this: androidx.camera.view.PreviewStreamStateObserver$2;

        r1 := @parameter0: androidx.camera.core.impl.CameraCaptureResult;

        $r2 = r0.<androidx.camera.view.PreviewStreamStateObserver$2: androidx.concurrent.futures.CallbackToFutureAdapter$Completer val$completer>;

        virtualinvoke $r2.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean set(java.lang.Object)>(null);

        $r3 = r0.<androidx.camera.view.PreviewStreamStateObserver$2: androidx.camera.core.CameraInfo val$cameraInfo>;

        $r4 = (androidx.camera.core.impl.CameraInfoInternal) $r3;

        interfaceinvoke $r4.<androidx.camera.core.impl.CameraInfoInternal: void removeSessionCaptureCallback(androidx.camera.core.impl.CameraCaptureCallback)>(r0);

        return;
    }

