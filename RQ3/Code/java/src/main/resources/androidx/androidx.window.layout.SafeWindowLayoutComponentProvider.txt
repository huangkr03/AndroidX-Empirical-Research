androidx.window.layout.SafeWindowLayoutComponentProvider
<androidx.window.layout.SafeWindowLayoutComponentProvider: androidx.window.layout.SafeWindowLayoutComponentProvider INSTANCE>
<androidx.window.layout.SafeWindowLayoutComponentProvider: kotlin.Lazy windowLayoutComponent$delegate>
    private void <init>()
    {
        androidx.window.layout.SafeWindowLayoutComponentProvider r0;

        r0 := @this: androidx.window.layout.SafeWindowLayoutComponentProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final androidx.window.extensions.layout.WindowLayoutComponent getWindowLayoutComponent()
    {
        androidx.window.layout.SafeWindowLayoutComponentProvider r0;
        kotlin.Lazy r1;
        java.lang.Object $r2;
        androidx.window.extensions.layout.WindowLayoutComponent $r3;

        r0 := @this: androidx.window.layout.SafeWindowLayoutComponentProvider;

        r1 = <androidx.window.layout.SafeWindowLayoutComponentProvider: kotlin.Lazy windowLayoutComponent$delegate>;

        $r2 = interfaceinvoke r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r3 = (androidx.window.extensions.layout.WindowLayoutComponent) $r2;

        return $r3;
    }

    private final boolean canUseWindowLayoutComponent(java.lang.ClassLoader)
    {
        androidx.window.layout.SafeWindowLayoutComponentProvider r0;
        java.lang.ClassLoader r1;
        int $i0;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: androidx.window.layout.SafeWindowLayoutComponentProvider;

        r1 := @parameter0: java.lang.ClassLoader;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 24 goto label2;

        $z0 = specialinvoke r0.<androidx.window.layout.SafeWindowLayoutComponentProvider: boolean isWindowLayoutProviderValid(java.lang.ClassLoader)>(r1);

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<androidx.window.layout.SafeWindowLayoutComponentProvider: boolean isWindowExtensionsValid(java.lang.ClassLoader)>(r1);

        if $z1 == 0 goto label1;

        $z2 = specialinvoke r0.<androidx.window.layout.SafeWindowLayoutComponentProvider: boolean isWindowLayoutComponentValid(java.lang.ClassLoader)>(r1);

        if $z2 == 0 goto label1;

        $z3 = specialinvoke r0.<androidx.window.layout.SafeWindowLayoutComponentProvider: boolean isFoldingFeatureValid(java.lang.ClassLoader)>(r1);

        if $z3 == 0 goto label1;

        $z4 = 1;

        goto label3;

     label1:
        $z4 = 0;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        return $z4;
    }

    private final boolean isWindowLayoutProviderValid(java.lang.ClassLoader)
    {
        androidx.window.layout.SafeWindowLayoutComponentProvider r0;
        java.lang.ClassLoader r1;
        androidx.window.layout.SafeWindowLayoutComponentProvider$isWindowLayoutProviderValid$1 $r2;
        kotlin.jvm.functions.Function0 $r3;
        boolean $z0;

        r0 := @this: androidx.window.layout.SafeWindowLayoutComponentProvider;

        r1 := @parameter0: java.lang.ClassLoader;

        $r2 = new androidx.window.layout.SafeWindowLayoutComponentProvider$isWindowLayoutProviderValid$1;

        specialinvoke $r2.<androidx.window.layout.SafeWindowLayoutComponentProvider$isWindowLayoutProviderValid$1: void <init>(java.lang.ClassLoader)>(r1);

        $r3 = (kotlin.jvm.functions.Function0) $r2;

        $z0 = specialinvoke r0.<androidx.window.layout.SafeWindowLayoutComponentProvider: boolean validate(kotlin.jvm.functions.Function0)>($r3);

        return $z0;
    }

    private final boolean isWindowExtensionsValid(java.lang.ClassLoader)
    {
        androidx.window.layout.SafeWindowLayoutComponentProvider r0;
        java.lang.ClassLoader r1;
        androidx.window.layout.SafeWindowLayoutComponentProvider$isWindowExtensionsValid$1 $r2;
        kotlin.jvm.functions.Function0 $r3;
        boolean $z0;

        r0 := @this: androidx.window.layout.SafeWindowLayoutComponentProvider;

        r1 := @parameter0: java.lang.ClassLoader;

        $r2 = new androidx.window.layout.SafeWindowLayoutComponentProvider$isWindowExtensionsValid$1;

        specialinvoke $r2.<androidx.window.layout.SafeWindowLayoutComponentProvider$isWindowExtensionsValid$1: void <init>(java.lang.ClassLoader)>(r1);

        $r3 = (kotlin.jvm.functions.Function0) $r2;

        $z0 = specialinvoke r0.<androidx.window.layout.SafeWindowLayoutComponentProvider: boolean validate(kotlin.jvm.functions.Function0)>($r3);

        return $z0;
    }

    private final boolean isFoldingFeatureValid(java.lang.ClassLoader)
    {
        androidx.window.layout.SafeWindowLayoutComponentProvider r0;
        java.lang.ClassLoader r1;
        androidx.window.layout.SafeWindowLayoutComponentProvider$isFoldingFeatureValid$1 $r2;
        kotlin.jvm.functions.Function0 $r3;
        boolean $z0;

        r0 := @this: androidx.window.layout.SafeWindowLayoutComponentProvider;

        r1 := @parameter0: java.lang.ClassLoader;

        $r2 = new androidx.window.layout.SafeWindowLayoutComponentProvider$isFoldingFeatureValid$1;

        specialinvoke $r2.<androidx.window.layout.SafeWindowLayoutComponentProvider$isFoldingFeatureValid$1: void <init>(java.lang.ClassLoader)>(r1);

        $r3 = (kotlin.jvm.functions.Function0) $r2;

        $z0 = specialinvoke r0.<androidx.window.layout.SafeWindowLayoutComponentProvider: boolean validate(kotlin.jvm.functions.Function0)>($r3);

        return $z0;
    }

    private final boolean isWindowLayoutComponentValid(java.lang.ClassLoader)
    {
        androidx.window.layout.SafeWindowLayoutComponentProvider r0;
        java.lang.ClassLoader r1;
        androidx.window.layout.SafeWindowLayoutComponentProvider$isWindowLayoutComponentValid$1 $r2;
        kotlin.jvm.functions.Function0 $r3;
        boolean $z0;

        r0 := @this: androidx.window.layout.SafeWindowLayoutComponentProvider;

        r1 := @parameter0: java.lang.ClassLoader;

        $r2 = new androidx.window.layout.SafeWindowLayoutComponentProvider$isWindowLayoutComponentValid$1;

        specialinvoke $r2.<androidx.window.layout.SafeWindowLayoutComponentProvider$isWindowLayoutComponentValid$1: void <init>(java.lang.ClassLoader)>(r1);

        $r3 = (kotlin.jvm.functions.Function0) $r2;

        $z0 = specialinvoke r0.<androidx.window.layout.SafeWindowLayoutComponentProvider: boolean validate(kotlin.jvm.functions.Function0)>($r3);

        return $z0;
    }

    private final boolean validate(kotlin.jvm.functions.Function0)
    {
        androidx.window.layout.SafeWindowLayoutComponentProvider r0;
        kotlin.jvm.functions.Function0 r1;
        java.lang.Object $r2;
        java.lang.Boolean $r3;
        java.lang.Throwable $r4, $r5, r6, r7;
        boolean z0;

        r0 := @this: androidx.window.layout.SafeWindowLayoutComponentProvider;

        r1 := @parameter0: kotlin.jvm.functions.Function0;

     label1:
        $r2 = interfaceinvoke r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        $r3 = (java.lang.Boolean) $r2;

        z0 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r6 = $r5;

        z0 = 0;

        goto label5;

     label4:
        $r4 := @caughtexception;

        r7 = $r4;

        z0 = 0;

     label5:
        return z0;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.NoSuchMethodException from label1 to label2 with label4;
    }

    private final boolean isPublic(java.lang.reflect.Method)
    {
        androidx.window.layout.SafeWindowLayoutComponentProvider r0;
        java.lang.reflect.Method $r1;
        int $i0;
        boolean $z0;

        r0 := @this: androidx.window.layout.SafeWindowLayoutComponentProvider;

        $r1 := @parameter0: java.lang.reflect.Method;

        $i0 = virtualinvoke $r1.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        return $z0;
    }

    private final boolean doesReturn(java.lang.reflect.Method, kotlin.reflect.KClass)
    {
        androidx.window.layout.SafeWindowLayoutComponentProvider r0;
        java.lang.reflect.Method $r1;
        kotlin.reflect.KClass r2;
        java.lang.Class $r3;
        boolean $z0;

        r0 := @this: androidx.window.layout.SafeWindowLayoutComponentProvider;

        $r1 := @parameter0: java.lang.reflect.Method;

        r2 := @parameter1: kotlin.reflect.KClass;

        $r3 = staticinvoke <kotlin.jvm.JvmClassMappingKt: java.lang.Class getJavaClass(kotlin.reflect.KClass)>(r2);

        $z0 = specialinvoke r0.<androidx.window.layout.SafeWindowLayoutComponentProvider: boolean doesReturn(java.lang.reflect.Method,java.lang.Class)>($r1, $r3);

        return $z0;
    }

    private final boolean doesReturn(java.lang.reflect.Method, java.lang.Class)
    {
        androidx.window.layout.SafeWindowLayoutComponentProvider r0;
        java.lang.reflect.Method $r1;
        java.lang.Class r2, $r3;
        boolean $z0;

        r0 := @this: androidx.window.layout.SafeWindowLayoutComponentProvider;

        $r1 := @parameter0: java.lang.reflect.Method;

        r2 := @parameter1: java.lang.Class;

        $r3 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean equals(java.lang.Object)>(r2);

        return $z0;
    }

    private final java.lang.Class windowExtensionsProviderClass(java.lang.ClassLoader)
    {
        androidx.window.layout.SafeWindowLayoutComponentProvider r0;
        java.lang.ClassLoader r1;
        java.lang.Class $r2;

        r0 := @this: androidx.window.layout.SafeWindowLayoutComponentProvider;

        r1 := @parameter0: java.lang.ClassLoader;

        $r2 = virtualinvoke r1.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("androidx.window.extensions.WindowExtensionsProvider");

        return $r2;
    }

    private final java.lang.Class windowExtensionsClass(java.lang.ClassLoader)
    {
        androidx.window.layout.SafeWindowLayoutComponentProvider r0;
        java.lang.ClassLoader r1;
        java.lang.Class $r2;

        r0 := @this: androidx.window.layout.SafeWindowLayoutComponentProvider;

        r1 := @parameter0: java.lang.ClassLoader;

        $r2 = virtualinvoke r1.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("androidx.window.extensions.WindowExtensions");

        return $r2;
    }

    private final java.lang.Class foldingFeatureClass(java.lang.ClassLoader)
    {
        androidx.window.layout.SafeWindowLayoutComponentProvider r0;
        java.lang.ClassLoader r1;
        java.lang.Class $r2;

        r0 := @this: androidx.window.layout.SafeWindowLayoutComponentProvider;

        r1 := @parameter0: java.lang.ClassLoader;

        $r2 = virtualinvoke r1.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("androidx.window.extensions.layout.FoldingFeature");

        return $r2;
    }

    private final java.lang.Class windowLayoutComponentClass(java.lang.ClassLoader)
    {
        androidx.window.layout.SafeWindowLayoutComponentProvider r0;
        java.lang.ClassLoader r1;
        java.lang.Class $r2;

        r0 := @this: androidx.window.layout.SafeWindowLayoutComponentProvider;

        r1 := @parameter0: java.lang.ClassLoader;

        $r2 = virtualinvoke r1.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("androidx.window.extensions.layout.WindowLayoutComponent");

        return $r2;
    }

    public static final java.lang.Class access$windowExtensionsProviderClass(androidx.window.layout.SafeWindowLayoutComponentProvider, java.lang.ClassLoader)
    {
        androidx.window.layout.SafeWindowLayoutComponentProvider $r0;
        java.lang.ClassLoader r1;
        java.lang.Class $r2;

        $r0 := @parameter0: androidx.window.layout.SafeWindowLayoutComponentProvider;

        r1 := @parameter1: java.lang.ClassLoader;

        $r2 = specialinvoke $r0.<androidx.window.layout.SafeWindowLayoutComponentProvider: java.lang.Class windowExtensionsProviderClass(java.lang.ClassLoader)>(r1);

        return $r2;
    }

    public static final java.lang.Class access$windowExtensionsClass(androidx.window.layout.SafeWindowLayoutComponentProvider, java.lang.ClassLoader)
    {
        androidx.window.layout.SafeWindowLayoutComponentProvider $r0;
        java.lang.ClassLoader r1;
        java.lang.Class $r2;

        $r0 := @parameter0: androidx.window.layout.SafeWindowLayoutComponentProvider;

        r1 := @parameter1: java.lang.ClassLoader;

        $r2 = specialinvoke $r0.<androidx.window.layout.SafeWindowLayoutComponentProvider: java.lang.Class windowExtensionsClass(java.lang.ClassLoader)>(r1);

        return $r2;
    }

    public static final boolean access$doesReturn(androidx.window.layout.SafeWindowLayoutComponentProvider, java.lang.reflect.Method, java.lang.Class)
    {
        androidx.window.layout.SafeWindowLayoutComponentProvider $r0;
        java.lang.reflect.Method $r1;
        java.lang.Class r2;
        boolean $z0;

        $r0 := @parameter0: androidx.window.layout.SafeWindowLayoutComponentProvider;

        $r1 := @parameter1: java.lang.reflect.Method;

        r2 := @parameter2: java.lang.Class;

        $z0 = specialinvoke $r0.<androidx.window.layout.SafeWindowLayoutComponentProvider: boolean doesReturn(java.lang.reflect.Method,java.lang.Class)>($r1, r2);

        return $z0;
    }

    public static final boolean access$isPublic(androidx.window.layout.SafeWindowLayoutComponentProvider, java.lang.reflect.Method)
    {
        androidx.window.layout.SafeWindowLayoutComponentProvider $r0;
        java.lang.reflect.Method $r1;
        boolean $z0;

        $r0 := @parameter0: androidx.window.layout.SafeWindowLayoutComponentProvider;

        $r1 := @parameter1: java.lang.reflect.Method;

        $z0 = specialinvoke $r0.<androidx.window.layout.SafeWindowLayoutComponentProvider: boolean isPublic(java.lang.reflect.Method)>($r1);

        return $z0;
    }

    public static final java.lang.Class access$windowLayoutComponentClass(androidx.window.layout.SafeWindowLayoutComponentProvider, java.lang.ClassLoader)
    {
        androidx.window.layout.SafeWindowLayoutComponentProvider $r0;
        java.lang.ClassLoader r1;
        java.lang.Class $r2;

        $r0 := @parameter0: androidx.window.layout.SafeWindowLayoutComponentProvider;

        r1 := @parameter1: java.lang.ClassLoader;

        $r2 = specialinvoke $r0.<androidx.window.layout.SafeWindowLayoutComponentProvider: java.lang.Class windowLayoutComponentClass(java.lang.ClassLoader)>(r1);

        return $r2;
    }

    public static final java.lang.Class access$foldingFeatureClass(androidx.window.layout.SafeWindowLayoutComponentProvider, java.lang.ClassLoader)
    {
        androidx.window.layout.SafeWindowLayoutComponentProvider $r0;
        java.lang.ClassLoader r1;
        java.lang.Class $r2;

        $r0 := @parameter0: androidx.window.layout.SafeWindowLayoutComponentProvider;

        r1 := @parameter1: java.lang.ClassLoader;

        $r2 = specialinvoke $r0.<androidx.window.layout.SafeWindowLayoutComponentProvider: java.lang.Class foldingFeatureClass(java.lang.ClassLoader)>(r1);

        return $r2;
    }

    public static final boolean access$doesReturn(androidx.window.layout.SafeWindowLayoutComponentProvider, java.lang.reflect.Method, kotlin.reflect.KClass)
    {
        androidx.window.layout.SafeWindowLayoutComponentProvider $r0;
        java.lang.reflect.Method $r1;
        kotlin.reflect.KClass r2;
        boolean $z0;

        $r0 := @parameter0: androidx.window.layout.SafeWindowLayoutComponentProvider;

        $r1 := @parameter1: java.lang.reflect.Method;

        r2 := @parameter2: kotlin.reflect.KClass;

        $z0 = specialinvoke $r0.<androidx.window.layout.SafeWindowLayoutComponentProvider: boolean doesReturn(java.lang.reflect.Method,kotlin.reflect.KClass)>($r1, r2);

        return $z0;
    }

    public static final boolean access$canUseWindowLayoutComponent(androidx.window.layout.SafeWindowLayoutComponentProvider, java.lang.ClassLoader)
    {
        androidx.window.layout.SafeWindowLayoutComponentProvider $r0;
        java.lang.ClassLoader r1;
        boolean $z0;

        $r0 := @parameter0: androidx.window.layout.SafeWindowLayoutComponentProvider;

        r1 := @parameter1: java.lang.ClassLoader;

        $z0 = specialinvoke $r0.<androidx.window.layout.SafeWindowLayoutComponentProvider: boolean canUseWindowLayoutComponent(java.lang.ClassLoader)>(r1);

        return $z0;
    }

    static void <clinit>()
    {
        androidx.window.layout.SafeWindowLayoutComponentProvider $r0;
        androidx.window.layout.SafeWindowLayoutComponentProvider$windowLayoutComponent$2 $r1;
        kotlin.jvm.functions.Function0 $r2;
        kotlin.Lazy $r3;

        $r0 = new androidx.window.layout.SafeWindowLayoutComponentProvider;

        specialinvoke $r0.<androidx.window.layout.SafeWindowLayoutComponentProvider: void <init>()>();

        <androidx.window.layout.SafeWindowLayoutComponentProvider: androidx.window.layout.SafeWindowLayoutComponentProvider INSTANCE> = $r0;

        $r1 = <androidx.window.layout.SafeWindowLayoutComponentProvider$windowLayoutComponent$2: androidx.window.layout.SafeWindowLayoutComponentProvider$windowLayoutComponent$2 INSTANCE>;

        $r2 = (kotlin.jvm.functions.Function0) $r1;

        $r3 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)>($r2);

        <androidx.window.layout.SafeWindowLayoutComponentProvider: kotlin.Lazy windowLayoutComponent$delegate> = $r3;

        return;
    }

androidx.window.layout.SafeWindowLayoutComponentProvider$isFoldingFeatureValid$1
<androidx.window.layout.SafeWindowLayoutComponentProvider$isFoldingFeatureValid$1: java.lang.ClassLoader $classLoader>
    void <init>(java.lang.ClassLoader)
    {
        androidx.window.layout.SafeWindowLayoutComponentProvider$isFoldingFeatureValid$1 r0;
        java.lang.ClassLoader $r1;

        r0 := @this: androidx.window.layout.SafeWindowLayoutComponentProvider$isFoldingFeatureValid$1;

        $r1 := @parameter0: java.lang.ClassLoader;

        r0.<androidx.window.layout.SafeWindowLayoutComponentProvider$isFoldingFeatureValid$1: java.lang.ClassLoader $classLoader> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final java.lang.Boolean invoke()
    {
        androidx.window.layout.SafeWindowLayoutComponentProvider$isFoldingFeatureValid$1 r0;
        java.lang.Class r1, $r14, $r18;
        java.lang.reflect.Method r2, r3, r4;
        java.lang.ClassLoader $r5;
        androidx.window.layout.SafeWindowLayoutComponentProvider $r6, $r10, $r12, $r13, $r16, $r17, $r20;
        java.lang.Class[] $r7, $r8, $r9;
        kotlin.reflect.KClass $r11, $r15, $r19;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.Boolean $r21;

        r0 := @this: androidx.window.layout.SafeWindowLayoutComponentProvider$isFoldingFeatureValid$1;

        $r6 = <androidx.window.layout.SafeWindowLayoutComponentProvider: androidx.window.layout.SafeWindowLayoutComponentProvider INSTANCE>;

        $r5 = r0.<androidx.window.layout.SafeWindowLayoutComponentProvider$isFoldingFeatureValid$1: java.lang.ClassLoader $classLoader>;

        r1 = staticinvoke <androidx.window.layout.SafeWindowLayoutComponentProvider: java.lang.Class access$foldingFeatureClass(androidx.window.layout.SafeWindowLayoutComponentProvider,java.lang.ClassLoader)>($r6, $r5);

        $r7 = newarray (java.lang.Class)[0];

        r2 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getBounds", $r7);

        $r8 = newarray (java.lang.Class)[0];

        r3 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getType", $r8);

        $r9 = newarray (java.lang.Class)[0];

        r4 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getState", $r9);

        $r10 = <androidx.window.layout.SafeWindowLayoutComponentProvider: androidx.window.layout.SafeWindowLayoutComponentProvider INSTANCE>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r2, "getBoundsMethod");

        $r11 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroid/graphics/Rect;");

        $z0 = staticinvoke <androidx.window.layout.SafeWindowLayoutComponentProvider: boolean access$doesReturn(androidx.window.layout.SafeWindowLayoutComponentProvider,java.lang.reflect.Method,kotlin.reflect.KClass)>($r10, r2, $r11);

        if $z0 == 0 goto label1;

        $r12 = <androidx.window.layout.SafeWindowLayoutComponentProvider: androidx.window.layout.SafeWindowLayoutComponentProvider INSTANCE>;

        $z1 = staticinvoke <androidx.window.layout.SafeWindowLayoutComponentProvider: boolean access$isPublic(androidx.window.layout.SafeWindowLayoutComponentProvider,java.lang.reflect.Method)>($r12, r2);

        if $z1 == 0 goto label1;

        $r13 = <androidx.window.layout.SafeWindowLayoutComponentProvider: androidx.window.layout.SafeWindowLayoutComponentProvider INSTANCE>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r3, "getTypeMethod");

        $r14 = <java.lang.Integer: java.lang.Class TYPE>;

        $r15 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>($r14);

        $z2 = staticinvoke <androidx.window.layout.SafeWindowLayoutComponentProvider: boolean access$doesReturn(androidx.window.layout.SafeWindowLayoutComponentProvider,java.lang.reflect.Method,kotlin.reflect.KClass)>($r13, r3, $r15);

        if $z2 == 0 goto label1;

        $r16 = <androidx.window.layout.SafeWindowLayoutComponentProvider: androidx.window.layout.SafeWindowLayoutComponentProvider INSTANCE>;

        $z3 = staticinvoke <androidx.window.layout.SafeWindowLayoutComponentProvider: boolean access$isPublic(androidx.window.layout.SafeWindowLayoutComponentProvider,java.lang.reflect.Method)>($r16, r3);

        if $z3 == 0 goto label1;

        $r17 = <androidx.window.layout.SafeWindowLayoutComponentProvider: androidx.window.layout.SafeWindowLayoutComponentProvider INSTANCE>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r4, "getStateMethod");

        $r18 = <java.lang.Integer: java.lang.Class TYPE>;

        $r19 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>($r18);

        $z4 = staticinvoke <androidx.window.layout.SafeWindowLayoutComponentProvider: boolean access$doesReturn(androidx.window.layout.SafeWindowLayoutComponentProvider,java.lang.reflect.Method,kotlin.reflect.KClass)>($r17, r4, $r19);

        if $z4 == 0 goto label1;

        $r20 = <androidx.window.layout.SafeWindowLayoutComponentProvider: androidx.window.layout.SafeWindowLayoutComponentProvider INSTANCE>;

        $z5 = staticinvoke <androidx.window.layout.SafeWindowLayoutComponentProvider: boolean access$isPublic(androidx.window.layout.SafeWindowLayoutComponentProvider,java.lang.reflect.Method)>($r20, r4);

        if $z5 == 0 goto label1;

        $z6 = 1;

        goto label2;

     label1:
        $z6 = 0;

     label2:
        $r21 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z6);

        return $r21;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.window.layout.SafeWindowLayoutComponentProvider$isFoldingFeatureValid$1 r0;
        java.lang.Boolean $r1;

        r0 := @this: androidx.window.layout.SafeWindowLayoutComponentProvider$isFoldingFeatureValid$1;

        $r1 = virtualinvoke r0.<androidx.window.layout.SafeWindowLayoutComponentProvider$isFoldingFeatureValid$1: java.lang.Boolean invoke()>();

        return $r1;
    }

androidx.window.layout.SafeWindowLayoutComponentProvider$isWindowExtensionsValid$1
<androidx.window.layout.SafeWindowLayoutComponentProvider$isWindowExtensionsValid$1: java.lang.ClassLoader $classLoader>
    void <init>(java.lang.ClassLoader)
    {
        androidx.window.layout.SafeWindowLayoutComponentProvider$isWindowExtensionsValid$1 r0;
        java.lang.ClassLoader $r1;

        r0 := @this: androidx.window.layout.SafeWindowLayoutComponentProvider$isWindowExtensionsValid$1;

        $r1 := @parameter0: java.lang.ClassLoader;

        r0.<androidx.window.layout.SafeWindowLayoutComponentProvider$isWindowExtensionsValid$1: java.lang.ClassLoader $classLoader> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final java.lang.Boolean invoke()
    {
        androidx.window.layout.SafeWindowLayoutComponentProvider$isWindowExtensionsValid$1 r0;
        java.lang.Class r1, r3;
        java.lang.reflect.Method r2;
        java.lang.ClassLoader $r4, $r7;
        androidx.window.layout.SafeWindowLayoutComponentProvider $r5, $r8, $r9, $r10;
        java.lang.Class[] $r6;
        boolean $z0, $z1, $z2;
        java.lang.Boolean $r11;

        r0 := @this: androidx.window.layout.SafeWindowLayoutComponentProvider$isWindowExtensionsValid$1;

        $r5 = <androidx.window.layout.SafeWindowLayoutComponentProvider: androidx.window.layout.SafeWindowLayoutComponentProvider INSTANCE>;

        $r4 = r0.<androidx.window.layout.SafeWindowLayoutComponentProvider$isWindowExtensionsValid$1: java.lang.ClassLoader $classLoader>;

        r1 = staticinvoke <androidx.window.layout.SafeWindowLayoutComponentProvider: java.lang.Class access$windowExtensionsClass(androidx.window.layout.SafeWindowLayoutComponentProvider,java.lang.ClassLoader)>($r5, $r4);

        $r6 = newarray (java.lang.Class)[0];

        r2 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getWindowLayoutComponent", $r6);

        $r8 = <androidx.window.layout.SafeWindowLayoutComponentProvider: androidx.window.layout.SafeWindowLayoutComponentProvider INSTANCE>;

        $r7 = r0.<androidx.window.layout.SafeWindowLayoutComponentProvider$isWindowExtensionsValid$1: java.lang.ClassLoader $classLoader>;

        r3 = staticinvoke <androidx.window.layout.SafeWindowLayoutComponentProvider: java.lang.Class access$windowLayoutComponentClass(androidx.window.layout.SafeWindowLayoutComponentProvider,java.lang.ClassLoader)>($r8, $r7);

        $r9 = <androidx.window.layout.SafeWindowLayoutComponentProvider: androidx.window.layout.SafeWindowLayoutComponentProvider INSTANCE>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r2, "getWindowLayoutComponentMethod");

        $z0 = staticinvoke <androidx.window.layout.SafeWindowLayoutComponentProvider: boolean access$isPublic(androidx.window.layout.SafeWindowLayoutComponentProvider,java.lang.reflect.Method)>($r9, r2);

        if $z0 == 0 goto label1;

        $r10 = <androidx.window.layout.SafeWindowLayoutComponentProvider: androidx.window.layout.SafeWindowLayoutComponentProvider INSTANCE>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r3, "windowLayoutComponentClass");

        $z1 = staticinvoke <androidx.window.layout.SafeWindowLayoutComponentProvider: boolean access$doesReturn(androidx.window.layout.SafeWindowLayoutComponentProvider,java.lang.reflect.Method,java.lang.Class)>($r10, r2, r3);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        return $r11;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.window.layout.SafeWindowLayoutComponentProvider$isWindowExtensionsValid$1 r0;
        java.lang.Boolean $r1;

        r0 := @this: androidx.window.layout.SafeWindowLayoutComponentProvider$isWindowExtensionsValid$1;

        $r1 = virtualinvoke r0.<androidx.window.layout.SafeWindowLayoutComponentProvider$isWindowExtensionsValid$1: java.lang.Boolean invoke()>();

        return $r1;
    }

androidx.window.layout.SafeWindowLayoutComponentProvider$isWindowLayoutComponentValid$1
<androidx.window.layout.SafeWindowLayoutComponentProvider$isWindowLayoutComponentValid$1: java.lang.ClassLoader $classLoader>
    void <init>(java.lang.ClassLoader)
    {
        androidx.window.layout.SafeWindowLayoutComponentProvider$isWindowLayoutComponentValid$1 r0;
        java.lang.ClassLoader $r1;

        r0 := @this: androidx.window.layout.SafeWindowLayoutComponentProvider$isWindowLayoutComponentValid$1;

        $r1 := @parameter0: java.lang.ClassLoader;

        r0.<androidx.window.layout.SafeWindowLayoutComponentProvider$isWindowLayoutComponentValid$1: java.lang.ClassLoader $classLoader> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final java.lang.Boolean invoke()
    {
        androidx.window.layout.SafeWindowLayoutComponentProvider$isWindowLayoutComponentValid$1 r0;
        java.lang.Class r1;
        java.lang.reflect.Method r2, r9;
        java.lang.Class[] r3, r8;
        java.lang.ClassLoader $r4;
        androidx.window.layout.SafeWindowLayoutComponentProvider $r5, $r6, $r7;
        boolean $z0, $z1, $z2;
        java.lang.Boolean $r10;

        r0 := @this: androidx.window.layout.SafeWindowLayoutComponentProvider$isWindowLayoutComponentValid$1;

        $r5 = <androidx.window.layout.SafeWindowLayoutComponentProvider: androidx.window.layout.SafeWindowLayoutComponentProvider INSTANCE>;

        $r4 = r0.<androidx.window.layout.SafeWindowLayoutComponentProvider$isWindowLayoutComponentValid$1: java.lang.ClassLoader $classLoader>;

        r1 = staticinvoke <androidx.window.layout.SafeWindowLayoutComponentProvider: java.lang.Class access$windowLayoutComponentClass(androidx.window.layout.SafeWindowLayoutComponentProvider,java.lang.ClassLoader)>($r5, $r4);

        r8 = newarray (java.lang.Class)[2];

        r8[0] = class "Landroid/app/Activity;";

        r8[1] = class "Ljava/util/function/Consumer;";

        r2 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("addWindowLayoutInfoListener", r8);

        r3 = newarray (java.lang.Class)[1];

        r3[0] = class "Ljava/util/function/Consumer;";

        r9 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("removeWindowLayoutInfoListener", r3);

        $r6 = <androidx.window.layout.SafeWindowLayoutComponentProvider: androidx.window.layout.SafeWindowLayoutComponentProvider INSTANCE>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r2, "addListenerMethod");

        $z0 = staticinvoke <androidx.window.layout.SafeWindowLayoutComponentProvider: boolean access$isPublic(androidx.window.layout.SafeWindowLayoutComponentProvider,java.lang.reflect.Method)>($r6, r2);

        if $z0 == 0 goto label1;

        $r7 = <androidx.window.layout.SafeWindowLayoutComponentProvider: androidx.window.layout.SafeWindowLayoutComponentProvider INSTANCE>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r9, "removeListenerMethod");

        $z1 = staticinvoke <androidx.window.layout.SafeWindowLayoutComponentProvider: boolean access$isPublic(androidx.window.layout.SafeWindowLayoutComponentProvider,java.lang.reflect.Method)>($r7, r9);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        return $r10;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.window.layout.SafeWindowLayoutComponentProvider$isWindowLayoutComponentValid$1 r0;
        java.lang.Boolean $r1;

        r0 := @this: androidx.window.layout.SafeWindowLayoutComponentProvider$isWindowLayoutComponentValid$1;

        $r1 = virtualinvoke r0.<androidx.window.layout.SafeWindowLayoutComponentProvider$isWindowLayoutComponentValid$1: java.lang.Boolean invoke()>();

        return $r1;
    }

androidx.window.layout.SafeWindowLayoutComponentProvider$isWindowLayoutProviderValid$1
<androidx.window.layout.SafeWindowLayoutComponentProvider$isWindowLayoutProviderValid$1: java.lang.ClassLoader $classLoader>
    void <init>(java.lang.ClassLoader)
    {
        androidx.window.layout.SafeWindowLayoutComponentProvider$isWindowLayoutProviderValid$1 r0;
        java.lang.ClassLoader $r1;

        r0 := @this: androidx.window.layout.SafeWindowLayoutComponentProvider$isWindowLayoutProviderValid$1;

        $r1 := @parameter0: java.lang.ClassLoader;

        r0.<androidx.window.layout.SafeWindowLayoutComponentProvider$isWindowLayoutProviderValid$1: java.lang.ClassLoader $classLoader> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final java.lang.Boolean invoke()
    {
        androidx.window.layout.SafeWindowLayoutComponentProvider$isWindowLayoutProviderValid$1 r0;
        java.lang.Class r1, r3;
        java.lang.reflect.Method r2;
        java.lang.ClassLoader $r4, $r7;
        androidx.window.layout.SafeWindowLayoutComponentProvider $r5, $r8, $r9, $r10;
        java.lang.Class[] $r6;
        boolean $z0, $z1, $z2;
        java.lang.Boolean $r11;

        r0 := @this: androidx.window.layout.SafeWindowLayoutComponentProvider$isWindowLayoutProviderValid$1;

        $r5 = <androidx.window.layout.SafeWindowLayoutComponentProvider: androidx.window.layout.SafeWindowLayoutComponentProvider INSTANCE>;

        $r4 = r0.<androidx.window.layout.SafeWindowLayoutComponentProvider$isWindowLayoutProviderValid$1: java.lang.ClassLoader $classLoader>;

        r1 = staticinvoke <androidx.window.layout.SafeWindowLayoutComponentProvider: java.lang.Class access$windowExtensionsProviderClass(androidx.window.layout.SafeWindowLayoutComponentProvider,java.lang.ClassLoader)>($r5, $r4);

        $r6 = newarray (java.lang.Class)[0];

        r2 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("getWindowExtensions", $r6);

        $r8 = <androidx.window.layout.SafeWindowLayoutComponentProvider: androidx.window.layout.SafeWindowLayoutComponentProvider INSTANCE>;

        $r7 = r0.<androidx.window.layout.SafeWindowLayoutComponentProvider$isWindowLayoutProviderValid$1: java.lang.ClassLoader $classLoader>;

        r3 = staticinvoke <androidx.window.layout.SafeWindowLayoutComponentProvider: java.lang.Class access$windowExtensionsClass(androidx.window.layout.SafeWindowLayoutComponentProvider,java.lang.ClassLoader)>($r8, $r7);

        $r9 = <androidx.window.layout.SafeWindowLayoutComponentProvider: androidx.window.layout.SafeWindowLayoutComponentProvider INSTANCE>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r2, "getWindowExtensionsMethod");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r3, "windowExtensionsClass");

        $z0 = staticinvoke <androidx.window.layout.SafeWindowLayoutComponentProvider: boolean access$doesReturn(androidx.window.layout.SafeWindowLayoutComponentProvider,java.lang.reflect.Method,java.lang.Class)>($r9, r2, r3);

        if $z0 == 0 goto label1;

        $r10 = <androidx.window.layout.SafeWindowLayoutComponentProvider: androidx.window.layout.SafeWindowLayoutComponentProvider INSTANCE>;

        $z1 = staticinvoke <androidx.window.layout.SafeWindowLayoutComponentProvider: boolean access$isPublic(androidx.window.layout.SafeWindowLayoutComponentProvider,java.lang.reflect.Method)>($r10, r2);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        return $r11;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.window.layout.SafeWindowLayoutComponentProvider$isWindowLayoutProviderValid$1 r0;
        java.lang.Boolean $r1;

        r0 := @this: androidx.window.layout.SafeWindowLayoutComponentProvider$isWindowLayoutProviderValid$1;

        $r1 = virtualinvoke r0.<androidx.window.layout.SafeWindowLayoutComponentProvider$isWindowLayoutProviderValid$1: java.lang.Boolean invoke()>();

        return $r1;
    }

androidx.window.layout.SafeWindowLayoutComponentProvider$windowLayoutComponent$2
<androidx.window.layout.SafeWindowLayoutComponentProvider$windowLayoutComponent$2: androidx.window.layout.SafeWindowLayoutComponentProvider$windowLayoutComponent$2 INSTANCE>
    void <init>()
    {
        androidx.window.layout.SafeWindowLayoutComponentProvider$windowLayoutComponent$2 r0;

        r0 := @this: androidx.window.layout.SafeWindowLayoutComponentProvider$windowLayoutComponent$2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final androidx.window.extensions.layout.WindowLayoutComponent invoke()
    {
        androidx.window.layout.SafeWindowLayoutComponentProvider$windowLayoutComponent$2 r0;
        java.lang.ClassLoader r1;
        java.lang.Throwable r2, $r6;
        java.lang.Class $r3;
        androidx.window.layout.SafeWindowLayoutComponentProvider $r4;
        boolean $z0;
        androidx.window.extensions.WindowExtensions $r5;
        androidx.window.extensions.layout.WindowLayoutComponent r7, $r8;

        r0 := @this: androidx.window.layout.SafeWindowLayoutComponentProvider$windowLayoutComponent$2;

        $r3 = class "Landroidx/window/layout/SafeWindowLayoutComponentProvider;";

        r1 = virtualinvoke $r3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        if r1 == null goto label5;

        $r4 = <androidx.window.layout.SafeWindowLayoutComponentProvider: androidx.window.layout.SafeWindowLayoutComponentProvider INSTANCE>;

        $z0 = staticinvoke <androidx.window.layout.SafeWindowLayoutComponentProvider: boolean access$canUseWindowLayoutComponent(androidx.window.layout.SafeWindowLayoutComponentProvider,java.lang.ClassLoader)>($r4, r1);

        if $z0 == 0 goto label5;

     label1:
        $r5 = staticinvoke <androidx.window.extensions.WindowExtensionsProvider: androidx.window.extensions.WindowExtensions getWindowExtensions()>();

        r7 = interfaceinvoke $r5.<androidx.window.extensions.WindowExtensions: androidx.window.extensions.layout.WindowLayoutComponent getWindowLayoutComponent()>();

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        r7 = (androidx.window.extensions.layout.WindowLayoutComponent) null;

     label4:
        $r8 = r7;

        goto label6;

     label5:
        $r8 = (androidx.window.extensions.layout.WindowLayoutComponent) null;

     label6:
        return $r8;

        catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.window.layout.SafeWindowLayoutComponentProvider$windowLayoutComponent$2 r0;
        androidx.window.extensions.layout.WindowLayoutComponent $r1;

        r0 := @this: androidx.window.layout.SafeWindowLayoutComponentProvider$windowLayoutComponent$2;

        $r1 = virtualinvoke r0.<androidx.window.layout.SafeWindowLayoutComponentProvider$windowLayoutComponent$2: androidx.window.extensions.layout.WindowLayoutComponent invoke()>();

        return $r1;
    }

    static void <clinit>()
    {
        androidx.window.layout.SafeWindowLayoutComponentProvider$windowLayoutComponent$2 $r0;

        $r0 = new androidx.window.layout.SafeWindowLayoutComponentProvider$windowLayoutComponent$2;

        specialinvoke $r0.<androidx.window.layout.SafeWindowLayoutComponentProvider$windowLayoutComponent$2: void <init>()>();

        <androidx.window.layout.SafeWindowLayoutComponentProvider$windowLayoutComponent$2: androidx.window.layout.SafeWindowLayoutComponentProvider$windowLayoutComponent$2 INSTANCE> = $r0;

        return;
    }

