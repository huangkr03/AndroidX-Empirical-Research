androidx.compose.ui.MotionDurationScale
<androidx.compose.ui.MotionDurationScale: androidx.compose.ui.MotionDurationScale$Key Key>
<androidx.compose.ui.MotionDurationScale: float getScaleFactor()>
    public kotlin.coroutines.CoroutineContext$Key getKey()
    {
        androidx.compose.ui.MotionDurationScale r0;
        androidx.compose.ui.MotionDurationScale$Key $r1;
        kotlin.coroutines.CoroutineContext$Key $r2;

        r0 := @this: androidx.compose.ui.MotionDurationScale;

        $r1 = <androidx.compose.ui.MotionDurationScale: androidx.compose.ui.MotionDurationScale$Key Key>;

        $r2 = (kotlin.coroutines.CoroutineContext$Key) $r1;

        return $r2;
    }

    static void <clinit>()
    {
        androidx.compose.ui.MotionDurationScale$Key $r0;

        $r0 = <androidx.compose.ui.MotionDurationScale$Key: androidx.compose.ui.MotionDurationScale$Key $$INSTANCE>;

        <androidx.compose.ui.MotionDurationScale: androidx.compose.ui.MotionDurationScale$Key Key> = $r0;

        return;
    }

androidx.compose.ui.MotionDurationScale$DefaultImpls
    public static java.lang.Object fold(androidx.compose.ui.MotionDurationScale, java.lang.Object, kotlin.jvm.functions.Function2)
    {
        androidx.compose.ui.MotionDurationScale $r0;
        java.lang.Object r1, $r4;
        kotlin.jvm.functions.Function2 r2;
        kotlin.coroutines.CoroutineContext$Element $r3;

        $r0 := @parameter0: androidx.compose.ui.MotionDurationScale;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "operation");

        $r3 = (kotlin.coroutines.CoroutineContext$Element) $r0;

        $r4 = staticinvoke <kotlin.coroutines.CoroutineContext$Element$DefaultImpls: java.lang.Object fold(kotlin.coroutines.CoroutineContext$Element,java.lang.Object,kotlin.jvm.functions.Function2)>($r3, r1, r2);

        return $r4;
    }

    public static kotlin.coroutines.CoroutineContext$Element get(androidx.compose.ui.MotionDurationScale, kotlin.coroutines.CoroutineContext$Key)
    {
        androidx.compose.ui.MotionDurationScale $r0;
        kotlin.coroutines.CoroutineContext$Key r1;
        kotlin.coroutines.CoroutineContext$Element $r2, $r3;

        $r0 := @parameter0: androidx.compose.ui.MotionDurationScale;

        r1 := @parameter1: kotlin.coroutines.CoroutineContext$Key;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "key");

        $r2 = (kotlin.coroutines.CoroutineContext$Element) $r0;

        $r3 = staticinvoke <kotlin.coroutines.CoroutineContext$Element$DefaultImpls: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Element,kotlin.coroutines.CoroutineContext$Key)>($r2, r1);

        return $r3;
    }

    public static kotlin.coroutines.CoroutineContext minusKey(androidx.compose.ui.MotionDurationScale, kotlin.coroutines.CoroutineContext$Key)
    {
        androidx.compose.ui.MotionDurationScale $r0;
        kotlin.coroutines.CoroutineContext$Key r1;
        kotlin.coroutines.CoroutineContext$Element $r2;
        kotlin.coroutines.CoroutineContext $r3;

        $r0 := @parameter0: androidx.compose.ui.MotionDurationScale;

        r1 := @parameter1: kotlin.coroutines.CoroutineContext$Key;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "key");

        $r2 = (kotlin.coroutines.CoroutineContext$Element) $r0;

        $r3 = staticinvoke <kotlin.coroutines.CoroutineContext$Element$DefaultImpls: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Element,kotlin.coroutines.CoroutineContext$Key)>($r2, r1);

        return $r3;
    }

    public static kotlin.coroutines.CoroutineContext plus(androidx.compose.ui.MotionDurationScale, kotlin.coroutines.CoroutineContext)
    {
        androidx.compose.ui.MotionDurationScale $r0;
        kotlin.coroutines.CoroutineContext r1, $r3;
        kotlin.coroutines.CoroutineContext$Element $r2;

        $r0 := @parameter0: androidx.compose.ui.MotionDurationScale;

        r1 := @parameter1: kotlin.coroutines.CoroutineContext;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "context");

        $r2 = (kotlin.coroutines.CoroutineContext$Element) $r0;

        $r3 = staticinvoke <kotlin.coroutines.CoroutineContext$Element$DefaultImpls: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext$Element,kotlin.coroutines.CoroutineContext)>($r2, r1);

        return $r3;
    }

androidx.compose.ui.MotionDurationScale$Key
<androidx.compose.ui.MotionDurationScale$Key: androidx.compose.ui.MotionDurationScale$Key $$INSTANCE>
    private void <init>()
    {
        androidx.compose.ui.MotionDurationScale$Key r0;

        r0 := @this: androidx.compose.ui.MotionDurationScale$Key;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        androidx.compose.ui.MotionDurationScale$Key $r0;

        $r0 = new androidx.compose.ui.MotionDurationScale$Key;

        specialinvoke $r0.<androidx.compose.ui.MotionDurationScale$Key: void <init>()>();

        <androidx.compose.ui.MotionDurationScale$Key: androidx.compose.ui.MotionDurationScale$Key $$INSTANCE> = $r0;

        return;
    }

