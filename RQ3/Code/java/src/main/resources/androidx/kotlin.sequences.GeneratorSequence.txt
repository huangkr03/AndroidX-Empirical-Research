kotlin.sequences.GeneratorSequence
<kotlin.sequences.GeneratorSequence: kotlin.jvm.functions.Function0 getInitialValue>
<kotlin.sequences.GeneratorSequence: kotlin.jvm.functions.Function1 getNextValue>
    public void <init>(kotlin.jvm.functions.Function0, kotlin.jvm.functions.Function1)
    {
        kotlin.sequences.GeneratorSequence $r0;
        kotlin.jvm.functions.Function0 $r1;
        kotlin.jvm.functions.Function1 $r2;

        $r0 := @this: kotlin.sequences.GeneratorSequence;

        $r1 := @parameter0: kotlin.jvm.functions.Function0;

        $r2 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "getInitialValue");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "getNextValue");

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<kotlin.sequences.GeneratorSequence: kotlin.jvm.functions.Function0 getInitialValue> = $r1;

        $r0.<kotlin.sequences.GeneratorSequence: kotlin.jvm.functions.Function1 getNextValue> = $r2;

        return;
    }

    public static final kotlin.jvm.functions.Function0 access$getGetInitialValue$p(kotlin.sequences.GeneratorSequence)
    {
        kotlin.sequences.GeneratorSequence $r0;
        kotlin.jvm.functions.Function0 r1;

        $r0 := @parameter0: kotlin.sequences.GeneratorSequence;

        r1 = $r0.<kotlin.sequences.GeneratorSequence: kotlin.jvm.functions.Function0 getInitialValue>;

        return r1;
    }

    public static final kotlin.jvm.functions.Function1 access$getGetNextValue$p(kotlin.sequences.GeneratorSequence)
    {
        kotlin.sequences.GeneratorSequence $r0;
        kotlin.jvm.functions.Function1 r1;

        $r0 := @parameter0: kotlin.sequences.GeneratorSequence;

        r1 = $r0.<kotlin.sequences.GeneratorSequence: kotlin.jvm.functions.Function1 getNextValue>;

        return r1;
    }

    public java.util.Iterator iterator()
    {
        kotlin.sequences.GeneratorSequence $r0;
        kotlin.sequences.GeneratorSequence$iterator$1 $r1;

        $r0 := @this: kotlin.sequences.GeneratorSequence;

        $r1 = new kotlin.sequences.GeneratorSequence$iterator$1;

        specialinvoke $r1.<kotlin.sequences.GeneratorSequence$iterator$1: void <init>(kotlin.sequences.GeneratorSequence)>($r0);

        return $r1;
    }

kotlin.sequences.GeneratorSequence$iterator$1
<kotlin.sequences.GeneratorSequence$iterator$1: java.lang.Object nextItem>
<kotlin.sequences.GeneratorSequence$iterator$1: int nextState>
<kotlin.sequences.GeneratorSequence$iterator$1: kotlin.sequences.GeneratorSequence this$0>
    void <init>(kotlin.sequences.GeneratorSequence)
    {
        kotlin.sequences.GeneratorSequence$iterator$1 $r0;
        kotlin.sequences.GeneratorSequence $r1;

        $r0 := @this: kotlin.sequences.GeneratorSequence$iterator$1;

        $r1 := @parameter0: kotlin.sequences.GeneratorSequence;

        $r0.<kotlin.sequences.GeneratorSequence$iterator$1: kotlin.sequences.GeneratorSequence this$0> = $r1;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<kotlin.sequences.GeneratorSequence$iterator$1: int nextState> = -2;

        return;
    }

    private final void calcNext()
    {
        kotlin.sequences.GeneratorSequence$iterator$1 $r0;
        int $i0;
        kotlin.sequences.GeneratorSequence $r1;
        kotlin.jvm.functions.Function0 $r2;
        java.lang.Object $r3;
        kotlin.jvm.functions.Function1 $r4;
        byte $b1;

        $r0 := @this: kotlin.sequences.GeneratorSequence$iterator$1;

        $i0 = $r0.<kotlin.sequences.GeneratorSequence$iterator$1: int nextState>;

        if $i0 != -2 goto label1;

        $r1 = $r0.<kotlin.sequences.GeneratorSequence$iterator$1: kotlin.sequences.GeneratorSequence this$0>;

        $r2 = staticinvoke <kotlin.sequences.GeneratorSequence: kotlin.jvm.functions.Function0 access$getGetInitialValue$p(kotlin.sequences.GeneratorSequence)>($r1);

        $r3 = interfaceinvoke $r2.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        goto label2;

     label1:
        $r1 = $r0.<kotlin.sequences.GeneratorSequence$iterator$1: kotlin.sequences.GeneratorSequence this$0>;

        $r4 = staticinvoke <kotlin.sequences.GeneratorSequence: kotlin.jvm.functions.Function1 access$getGetNextValue$p(kotlin.sequences.GeneratorSequence)>($r1);

        $r3 = $r0.<kotlin.sequences.GeneratorSequence$iterator$1: java.lang.Object nextItem>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r3);

        $r3 = interfaceinvoke $r4.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

     label2:
        $r0.<kotlin.sequences.GeneratorSequence$iterator$1: java.lang.Object nextItem> = $r3;

        if $r3 != null goto label3;

        $b1 = 0;

        goto label4;

     label3:
        $b1 = 1;

     label4:
        $r0.<kotlin.sequences.GeneratorSequence$iterator$1: int nextState> = $b1;

        return;
    }

    public final java.lang.Object getNextItem()
    {
        kotlin.sequences.GeneratorSequence$iterator$1 $r0;
        java.lang.Object r1;

        $r0 := @this: kotlin.sequences.GeneratorSequence$iterator$1;

        r1 = $r0.<kotlin.sequences.GeneratorSequence$iterator$1: java.lang.Object nextItem>;

        return r1;
    }

    public final int getNextState()
    {
        kotlin.sequences.GeneratorSequence$iterator$1 $r0;
        int i0;

        $r0 := @this: kotlin.sequences.GeneratorSequence$iterator$1;

        i0 = $r0.<kotlin.sequences.GeneratorSequence$iterator$1: int nextState>;

        return i0;
    }

    public boolean hasNext()
    {
        kotlin.sequences.GeneratorSequence$iterator$1 $r0;
        int $i0;

        $r0 := @this: kotlin.sequences.GeneratorSequence$iterator$1;

        $i0 = $r0.<kotlin.sequences.GeneratorSequence$iterator$1: int nextState>;

        if $i0 >= 0 goto label1;

        specialinvoke $r0.<kotlin.sequences.GeneratorSequence$iterator$1: void calcNext()>();

     label1:
        $i0 = $r0.<kotlin.sequences.GeneratorSequence$iterator$1: int nextState>;

        if $i0 != 1 goto label2;

        return 1;

     label2:
        return 0;
    }

    public java.lang.Object next()
    {
        kotlin.sequences.GeneratorSequence$iterator$1 $r0;
        int $i0;
        java.lang.Object $r1;
        java.util.NoSuchElementException $r2;

        $r0 := @this: kotlin.sequences.GeneratorSequence$iterator$1;

        $i0 = $r0.<kotlin.sequences.GeneratorSequence$iterator$1: int nextState>;

        if $i0 >= 0 goto label1;

        specialinvoke $r0.<kotlin.sequences.GeneratorSequence$iterator$1: void calcNext()>();

     label1:
        $i0 = $r0.<kotlin.sequences.GeneratorSequence$iterator$1: int nextState>;

        if $i0 == 0 goto label2;

        $r1 = $r0.<kotlin.sequences.GeneratorSequence$iterator$1: java.lang.Object nextItem>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r1, "null cannot be cast to non-null type T of kotlin.sequences.GeneratorSequence");

        $r0.<kotlin.sequences.GeneratorSequence$iterator$1: int nextState> = -1;

        return $r1;

     label2:
        $r2 = new java.util.NoSuchElementException;

        specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>();

        throw $r2;
    }

    public void remove()
    {
        kotlin.sequences.GeneratorSequence$iterator$1 $r0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: kotlin.sequences.GeneratorSequence$iterator$1;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r1;
    }

    public final void setNextItem(java.lang.Object)
    {
        kotlin.sequences.GeneratorSequence$iterator$1 $r0;
        java.lang.Object $r1;

        $r0 := @this: kotlin.sequences.GeneratorSequence$iterator$1;

        $r1 := @parameter0: java.lang.Object;

        $r0.<kotlin.sequences.GeneratorSequence$iterator$1: java.lang.Object nextItem> = $r1;

        return;
    }

    public final void setNextState(int)
    {
        kotlin.sequences.GeneratorSequence$iterator$1 $r0;
        int $i0;

        $r0 := @this: kotlin.sequences.GeneratorSequence$iterator$1;

        $i0 := @parameter0: int;

        $r0.<kotlin.sequences.GeneratorSequence$iterator$1: int nextState> = $i0;

        return;
    }

