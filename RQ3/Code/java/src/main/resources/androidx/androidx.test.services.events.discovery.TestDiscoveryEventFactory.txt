androidx.test.services.events.discovery.TestDiscoveryEventFactory
    public androidx.test.services.events.discovery.TestDiscoveryEvent createFromParcel(android.os.Parcel)
    {
        androidx.test.services.events.discovery.TestDiscoveryEventFactory r0;
        android.os.Parcel r1;
        androidx.test.services.events.discovery.TestDiscoveryEvent$EventType r2;
        java.lang.String r3, $r4, $r14;
        int[] $r5;
        int $i0, $i1;
        androidx.test.services.events.discovery.TestDiscoveryFinishedEvent $r6;
        androidx.test.services.events.discovery.TestDiscoveryErrorEvent $r7;
        androidx.test.services.events.discovery.TestFoundEvent $r8;
        androidx.test.services.events.discovery.TestDiscoveryStartedEvent $r9;
        java.lang.IllegalArgumentException $r10;
        java.lang.StringBuilder $r11, $r12, $r13;

        r0 := @this: androidx.test.services.events.discovery.TestDiscoveryEventFactory;

        r1 := @parameter0: android.os.Parcel;

        $r4 = virtualinvoke r1.<android.os.Parcel: java.lang.String readString()>();

        r2 = staticinvoke <androidx.test.services.events.discovery.TestDiscoveryEvent$EventType: androidx.test.services.events.discovery.TestDiscoveryEvent$EventType valueOf(java.lang.String)>($r4);

        $r5 = <androidx.test.services.events.discovery.TestDiscoveryEventFactory$1: int[] $SwitchMap$androidx$test$services$events$discovery$TestDiscoveryEvent$EventType>;

        $i0 = virtualinvoke r2.<androidx.test.services.events.discovery.TestDiscoveryEvent$EventType: int ordinal()>();

        $i1 = $r5[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            default: goto label5;
        };

     label1:
        $r9 = new androidx.test.services.events.discovery.TestDiscoveryStartedEvent;

        specialinvoke $r9.<androidx.test.services.events.discovery.TestDiscoveryStartedEvent: void <init>()>();

        return $r9;

     label2:
        $r8 = new androidx.test.services.events.discovery.TestFoundEvent;

        specialinvoke $r8.<androidx.test.services.events.discovery.TestFoundEvent: void <init>(android.os.Parcel)>(r1);

        return $r8;

     label3:
        $r7 = new androidx.test.services.events.discovery.TestDiscoveryErrorEvent;

        specialinvoke $r7.<androidx.test.services.events.discovery.TestDiscoveryErrorEvent: void <init>(android.os.Parcel)>(r1);

        return $r7;

     label4:
        $r6 = new androidx.test.services.events.discovery.TestDiscoveryFinishedEvent;

        specialinvoke $r6.<androidx.test.services.events.discovery.TestDiscoveryFinishedEvent: void <init>()>();

        return $r6;

     label5:
        $r10 = new java.lang.IllegalArgumentException;

        r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unhandled event type: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r10;
    }

    public volatile java.lang.Object createFromParcel(android.os.Parcel)
    {
        androidx.test.services.events.discovery.TestDiscoveryEventFactory r0;
        android.os.Parcel r1;
        androidx.test.services.events.discovery.TestDiscoveryEvent $r2;

        r0 := @this: androidx.test.services.events.discovery.TestDiscoveryEventFactory;

        r1 := @parameter0: android.os.Parcel;

        $r2 = virtualinvoke r0.<androidx.test.services.events.discovery.TestDiscoveryEventFactory: androidx.test.services.events.discovery.TestDiscoveryEvent createFromParcel(android.os.Parcel)>(r1);

        return $r2;
    }

    void <init>()
    {
        androidx.test.services.events.discovery.TestDiscoveryEventFactory r0;

        r0 := @this: androidx.test.services.events.discovery.TestDiscoveryEventFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public androidx.test.services.events.discovery.TestDiscoveryEvent[] newArray(int)
    {
        androidx.test.services.events.discovery.TestDiscoveryEventFactory r0;
        int i0;
        androidx.test.services.events.discovery.TestDiscoveryEvent[] $r1;

        r0 := @this: androidx.test.services.events.discovery.TestDiscoveryEventFactory;

        i0 := @parameter0: int;

        $r1 = newarray (androidx.test.services.events.discovery.TestDiscoveryEvent)[i0];

        return $r1;
    }

    public volatile java.lang.Object[] newArray(int)
    {
        androidx.test.services.events.discovery.TestDiscoveryEventFactory r0;
        int i0;
        androidx.test.services.events.discovery.TestDiscoveryEvent[] $r1;

        r0 := @this: androidx.test.services.events.discovery.TestDiscoveryEventFactory;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.test.services.events.discovery.TestDiscoveryEventFactory: androidx.test.services.events.discovery.TestDiscoveryEvent[] newArray(int)>(i0);

        return $r1;
    }

androidx.test.services.events.discovery.TestDiscoveryEventFactory$1
<androidx.test.services.events.discovery.TestDiscoveryEventFactory$1: int[] $SwitchMap$androidx$test$services$events$discovery$TestDiscoveryEvent$EventType>
    static void <clinit>()
    {
        androidx.test.services.events.discovery.TestDiscoveryEvent$EventType[] $r0;
        int $i0, $i1, $i2, $i3, $i4;
        int[] $r1, $r3, $r5, $r7, $r9;
        androidx.test.services.events.discovery.TestDiscoveryEvent$EventType $r2, $r4, $r6, $r8;
        java.lang.Throwable $r10, $r11, $r12, $r13, r14, r15, r16, r17;

        $r0 = staticinvoke <androidx.test.services.events.discovery.TestDiscoveryEvent$EventType: androidx.test.services.events.discovery.TestDiscoveryEvent$EventType[] values()>();

        $i0 = lengthof $r0;

        $r1 = newarray (int)[$i0];

        <androidx.test.services.events.discovery.TestDiscoveryEventFactory$1: int[] $SwitchMap$androidx$test$services$events$discovery$TestDiscoveryEvent$EventType> = $r1;

     label01:
        $r3 = <androidx.test.services.events.discovery.TestDiscoveryEventFactory$1: int[] $SwitchMap$androidx$test$services$events$discovery$TestDiscoveryEvent$EventType>;

        $r2 = <androidx.test.services.events.discovery.TestDiscoveryEvent$EventType: androidx.test.services.events.discovery.TestDiscoveryEvent$EventType STARTED>;

        $i1 = virtualinvoke $r2.<androidx.test.services.events.discovery.TestDiscoveryEvent$EventType: int ordinal()>();

        $r3[$i1] = 1;

     label02:
        goto label04;

     label03:
        $r12 := @caughtexception;

        r14 = $r12;

     label04:
        $r5 = <androidx.test.services.events.discovery.TestDiscoveryEventFactory$1: int[] $SwitchMap$androidx$test$services$events$discovery$TestDiscoveryEvent$EventType>;

        $r4 = <androidx.test.services.events.discovery.TestDiscoveryEvent$EventType: androidx.test.services.events.discovery.TestDiscoveryEvent$EventType TEST_FOUND>;

        $i2 = virtualinvoke $r4.<androidx.test.services.events.discovery.TestDiscoveryEvent$EventType: int ordinal()>();

        $r5[$i2] = 2;

     label05:
        goto label07;

     label06:
        $r13 := @caughtexception;

        r15 = $r13;

     label07:
        $r7 = <androidx.test.services.events.discovery.TestDiscoveryEventFactory$1: int[] $SwitchMap$androidx$test$services$events$discovery$TestDiscoveryEvent$EventType>;

        $r6 = <androidx.test.services.events.discovery.TestDiscoveryEvent$EventType: androidx.test.services.events.discovery.TestDiscoveryEvent$EventType ERROR>;

        $i3 = virtualinvoke $r6.<androidx.test.services.events.discovery.TestDiscoveryEvent$EventType: int ordinal()>();

        $r7[$i3] = 3;

     label08:
        goto label10;

     label09:
        $r11 := @caughtexception;

        r16 = $r11;

     label10:
        $r9 = <androidx.test.services.events.discovery.TestDiscoveryEventFactory$1: int[] $SwitchMap$androidx$test$services$events$discovery$TestDiscoveryEvent$EventType>;

        $r8 = <androidx.test.services.events.discovery.TestDiscoveryEvent$EventType: androidx.test.services.events.discovery.TestDiscoveryEvent$EventType FINISHED>;

        $i4 = virtualinvoke $r8.<androidx.test.services.events.discovery.TestDiscoveryEvent$EventType: int ordinal()>();

        $r9[$i4] = 4;

     label11:
        goto label13;

     label12:
        $r10 := @caughtexception;

        r17 = $r10;

     label13:
        return;

        catch java.lang.NoSuchFieldError from label01 to label02 with label03;
        catch java.lang.NoSuchFieldError from label04 to label05 with label06;
        catch java.lang.NoSuchFieldError from label07 to label08 with label09;
        catch java.lang.NoSuchFieldError from label10 to label11 with label12;
    }

