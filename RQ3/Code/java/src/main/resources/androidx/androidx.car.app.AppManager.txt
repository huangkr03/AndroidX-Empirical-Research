androidx.car.app.AppManager
<androidx.car.app.AppManager: int LOCATION_UPDATE_MIN_INTERVAL_MILLIS>
<androidx.car.app.AppManager: int LOCATION_UPDATE_MIN_DISTANCE_METER>
<androidx.car.app.AppManager: androidx.car.app.CarContext mCarContext>
<androidx.car.app.AppManager: androidx.car.app.IAppManager$Stub mAppManager>
<androidx.car.app.AppManager: androidx.car.app.HostDispatcher mHostDispatcher>
<androidx.car.app.AppManager: androidx.lifecycle.Lifecycle mLifecycle>
<androidx.car.app.AppManager: androidx.core.location.LocationListenerCompat mLocationListener>
<androidx.car.app.AppManager: android.os.HandlerThread mLocationUpdateHandlerThread>
    public void setSurfaceCallback(androidx.car.app.SurfaceCallback)
    {
        androidx.car.app.AppManager r0;
        androidx.car.app.SurfaceCallback r1;
        androidx.car.app.HostDispatcher $r2;
        androidx.car.app.HostCall $r3;

        r0 := @this: androidx.car.app.AppManager;

        r1 := @parameter0: androidx.car.app.SurfaceCallback;

        $r2 = r0.<androidx.car.app.AppManager: androidx.car.app.HostDispatcher mHostDispatcher>;

        $r3 = dynamicinvoke "dispatch" <androidx.car.app.HostCall (androidx.car.app.AppManager,androidx.car.app.SurfaceCallback)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_SPECIAL" <androidx.car.app.AppManager: java.lang.Object lambda$setSurfaceCallback$0(androidx.car.app.SurfaceCallback,androidx.car.app.IAppHost)>, methodtype: java.lang.Object __METHODTYPE__(androidx.car.app.IAppHost));

        virtualinvoke $r2.<androidx.car.app.HostDispatcher: void dispatch(java.lang.String,java.lang.String,androidx.car.app.HostCall)>("app", "setSurfaceListener", $r3);

        return;
    }

    public void invalidate()
    {
        androidx.car.app.AppManager r0;
        androidx.car.app.HostDispatcher $r1;
        androidx.car.app.HostCall $r2;

        r0 := @this: androidx.car.app.AppManager;

        $r1 = r0.<androidx.car.app.AppManager: androidx.car.app.HostDispatcher mHostDispatcher>;

        $r2 = dynamicinvoke "dispatch" <androidx.car.app.HostCall ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.car.app.AppManager: java.lang.Object lambda$invalidate$1(androidx.car.app.IAppHost)>, methodtype: java.lang.Object __METHODTYPE__(androidx.car.app.IAppHost));

        virtualinvoke $r1.<androidx.car.app.HostDispatcher: void dispatch(java.lang.String,java.lang.String,androidx.car.app.HostCall)>("app", "invalidate", $r2);

        return;
    }

    public void showToast(java.lang.CharSequence, int)
    {
        androidx.car.app.AppManager r0;
        java.lang.CharSequence r1;
        int i0;
        androidx.car.app.HostDispatcher $r3;
        androidx.car.app.HostCall $r4;

        r0 := @this: androidx.car.app.AppManager;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r3 = r0.<androidx.car.app.AppManager: androidx.car.app.HostDispatcher mHostDispatcher>;

        $r4 = dynamicinvoke "dispatch" <androidx.car.app.HostCall (java.lang.CharSequence,int)>(r1, i0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.car.app.AppManager: java.lang.Object lambda$showToast$2(java.lang.CharSequence,int,androidx.car.app.IAppHost)>, methodtype: java.lang.Object __METHODTYPE__(androidx.car.app.IAppHost));

        virtualinvoke $r3.<androidx.car.app.HostDispatcher: void dispatch(java.lang.String,java.lang.String,androidx.car.app.HostCall)>("app", "showToast", $r4);

        return;
    }

    androidx.car.app.IAppManager$Stub getIInterface()
    {
        androidx.car.app.AppManager r0;
        androidx.car.app.IAppManager$Stub $r1;

        r0 := @this: androidx.car.app.AppManager;

        $r1 = r0.<androidx.car.app.AppManager: androidx.car.app.IAppManager$Stub mAppManager>;

        return $r1;
    }

    androidx.lifecycle.Lifecycle getLifecycle()
    {
        androidx.car.app.AppManager r0;
        androidx.lifecycle.Lifecycle $r1;

        r0 := @this: androidx.car.app.AppManager;

        $r1 = r0.<androidx.car.app.AppManager: androidx.lifecycle.Lifecycle mLifecycle>;

        return $r1;
    }

    void startLocationUpdates()
    {
        androidx.car.app.AppManager r0;
        android.location.LocationManager r1;
        androidx.car.app.CarContext $r2;
        java.lang.Object $r3;
        android.os.HandlerThread $r4;
        androidx.core.location.LocationListenerCompat $r5;
        android.os.Looper $r6;

        r0 := @this: androidx.car.app.AppManager;

        virtualinvoke r0.<androidx.car.app.AppManager: void stopLocationUpdates()>();

        $r2 = r0.<androidx.car.app.AppManager: androidx.car.app.CarContext mCarContext>;

        $r3 = virtualinvoke $r2.<androidx.car.app.CarContext: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/location/LocationManager;");

        r1 = (android.location.LocationManager) $r3;

        $r5 = r0.<androidx.car.app.AppManager: androidx.core.location.LocationListenerCompat mLocationListener>;

        $r4 = r0.<androidx.car.app.AppManager: android.os.HandlerThread mLocationUpdateHandlerThread>;

        $r6 = virtualinvoke $r4.<android.os.HandlerThread: android.os.Looper getLooper()>();

        virtualinvoke r1.<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)>("fused", 1000L, 1.0F, $r5, $r6);

        return;
    }

    void stopLocationUpdates()
    {
        androidx.car.app.AppManager r0;
        android.location.LocationManager r1;
        androidx.car.app.CarContext $r2;
        java.lang.Object $r3;
        androidx.core.location.LocationListenerCompat $r4;

        r0 := @this: androidx.car.app.AppManager;

        $r2 = r0.<androidx.car.app.AppManager: androidx.car.app.CarContext mCarContext>;

        $r3 = virtualinvoke $r2.<androidx.car.app.CarContext: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/location/LocationManager;");

        r1 = (android.location.LocationManager) $r3;

        $r4 = r0.<androidx.car.app.AppManager: androidx.core.location.LocationListenerCompat mLocationListener>;

        virtualinvoke r1.<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>($r4);

        return;
    }

    static androidx.car.app.AppManager create(androidx.car.app.CarContext, androidx.car.app.HostDispatcher, androidx.lifecycle.Lifecycle)
    {
        androidx.car.app.CarContext r0;
        androidx.car.app.HostDispatcher r1;
        androidx.lifecycle.Lifecycle r2;
        androidx.car.app.AppManager $r6;

        r0 := @parameter0: androidx.car.app.CarContext;

        r1 := @parameter1: androidx.car.app.HostDispatcher;

        r2 := @parameter2: androidx.lifecycle.Lifecycle;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r0);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        $r6 = new androidx.car.app.AppManager;

        specialinvoke $r6.<androidx.car.app.AppManager: void <init>(androidx.car.app.CarContext,androidx.car.app.HostDispatcher,androidx.lifecycle.Lifecycle)>(r0, r1, r2);

        return $r6;
    }

    protected void <init>(androidx.car.app.CarContext, androidx.car.app.HostDispatcher, androidx.lifecycle.Lifecycle)
    {
        androidx.car.app.AppManager r0;
        androidx.car.app.CarContext r1;
        androidx.car.app.HostDispatcher r2;
        androidx.lifecycle.Lifecycle r3;
        androidx.car.app.AppManager$1 $r4;
        android.os.HandlerThread $r5;
        androidx.core.location.LocationListenerCompat $r6;

        r0 := @this: androidx.car.app.AppManager;

        r1 := @parameter0: androidx.car.app.CarContext;

        r2 := @parameter1: androidx.car.app.HostDispatcher;

        r3 := @parameter2: androidx.lifecycle.Lifecycle;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.car.app.AppManager: androidx.car.app.CarContext mCarContext> = r1;

        r0.<androidx.car.app.AppManager: androidx.car.app.HostDispatcher mHostDispatcher> = r2;

        r0.<androidx.car.app.AppManager: androidx.lifecycle.Lifecycle mLifecycle> = r3;

        $r4 = new androidx.car.app.AppManager$1;

        specialinvoke $r4.<androidx.car.app.AppManager$1: void <init>(androidx.car.app.AppManager,androidx.car.app.CarContext)>(r0, r1);

        r0.<androidx.car.app.AppManager: androidx.car.app.IAppManager$Stub mAppManager> = $r4;

        $r5 = new android.os.HandlerThread;

        specialinvoke $r5.<android.os.HandlerThread: void <init>(java.lang.String)>("LocationUpdateThread");

        r0.<androidx.car.app.AppManager: android.os.HandlerThread mLocationUpdateHandlerThread> = $r5;

        $r6 = dynamicinvoke "onLocationChanged" <androidx.core.location.LocationListenerCompat (androidx.car.app.AppManager)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(android.location.Location), methodhandle: "REF_INVOKE_SPECIAL" <androidx.car.app.AppManager: void lambda$new$4(android.location.Location)>, methodtype: void __METHODTYPE__(android.location.Location));

        r0.<androidx.car.app.AppManager: androidx.core.location.LocationListenerCompat mLocationListener> = $r6;

        return;
    }

    private void lambda$new$4(android.location.Location)
    {
        androidx.car.app.AppManager r0;
        android.location.Location r1;
        androidx.car.app.HostDispatcher $r2;
        androidx.car.app.HostCall $r3;

        r0 := @this: androidx.car.app.AppManager;

        r1 := @parameter0: android.location.Location;

        $r2 = r0.<androidx.car.app.AppManager: androidx.car.app.HostDispatcher mHostDispatcher>;

        $r3 = dynamicinvoke "dispatch" <androidx.car.app.HostCall (android.location.Location)>(r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.car.app.AppManager: java.lang.Object lambda$new$3(android.location.Location,androidx.car.app.IAppHost)>, methodtype: java.lang.Object __METHODTYPE__(androidx.car.app.IAppHost));

        virtualinvoke $r2.<androidx.car.app.HostDispatcher: void dispatch(java.lang.String,java.lang.String,androidx.car.app.HostCall)>("app", "sendLocation", $r3);

        return;
    }

    private static java.lang.Object lambda$new$3(android.location.Location, androidx.car.app.IAppHost) throws android.os.RemoteException
    {
        android.location.Location r0;
        androidx.car.app.IAppHost r1;

        r0 := @parameter0: android.location.Location;

        r1 := @parameter1: androidx.car.app.IAppHost;

        interfaceinvoke r1.<androidx.car.app.IAppHost: void sendLocation(android.location.Location)>(r0);

        return null;
    }

    private static java.lang.Object lambda$showToast$2(java.lang.CharSequence, int, androidx.car.app.IAppHost) throws android.os.RemoteException
    {
        java.lang.CharSequence r0;
        int i0;
        androidx.car.app.IAppHost r1;

        r0 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        r1 := @parameter2: androidx.car.app.IAppHost;

        interfaceinvoke r1.<androidx.car.app.IAppHost: void showToast(java.lang.CharSequence,int)>(r0, i0);

        return null;
    }

    private static java.lang.Object lambda$invalidate$1(androidx.car.app.IAppHost) throws android.os.RemoteException
    {
        androidx.car.app.IAppHost r0;

        r0 := @parameter0: androidx.car.app.IAppHost;

        interfaceinvoke r0.<androidx.car.app.IAppHost: void invalidate()>();

        return null;
    }

    private java.lang.Object lambda$setSurfaceCallback$0(androidx.car.app.SurfaceCallback, androidx.car.app.IAppHost) throws android.os.RemoteException
    {
        androidx.car.app.AppManager r0;
        androidx.car.app.SurfaceCallback r1;
        androidx.car.app.IAppHost r2;
        androidx.lifecycle.Lifecycle $r3;
        androidx.car.app.ISurfaceCallback $r4;

        r0 := @this: androidx.car.app.AppManager;

        r1 := @parameter0: androidx.car.app.SurfaceCallback;

        r2 := @parameter1: androidx.car.app.IAppHost;

        $r3 = r0.<androidx.car.app.AppManager: androidx.lifecycle.Lifecycle mLifecycle>;

        $r4 = staticinvoke <androidx.car.app.utils.RemoteUtils: androidx.car.app.ISurfaceCallback stubSurfaceCallback(androidx.lifecycle.Lifecycle,androidx.car.app.SurfaceCallback)>($r3, r1);

        interfaceinvoke r2.<androidx.car.app.IAppHost: void setSurfaceCallback(androidx.car.app.ISurfaceCallback)>($r4);

        return null;
    }

androidx.car.app.AppManager$1
<androidx.car.app.AppManager$1: androidx.car.app.CarContext val$carContext>
<androidx.car.app.AppManager$1: androidx.car.app.AppManager this$0>
    void <init>(androidx.car.app.AppManager, androidx.car.app.CarContext)
    {
        androidx.car.app.AppManager$1 r0;
        androidx.car.app.AppManager r1;
        androidx.car.app.CarContext r2;

        r0 := @this: androidx.car.app.AppManager$1;

        r1 := @parameter0: androidx.car.app.AppManager;

        r2 := @parameter1: androidx.car.app.CarContext;

        r0.<androidx.car.app.AppManager$1: androidx.car.app.AppManager this$0> = r1;

        r0.<androidx.car.app.AppManager$1: androidx.car.app.CarContext val$carContext> = r2;

        specialinvoke r0.<androidx.car.app.IAppManager$Stub: void <init>()>();

        return;
    }

    public void getTemplate(androidx.car.app.IOnDoneCallback)
    {
        androidx.car.app.AppManager$1 r0;
        androidx.car.app.IOnDoneCallback r1;
        androidx.car.app.AppManager $r2;
        androidx.lifecycle.Lifecycle $r3;
        androidx.car.app.CarContext $r4;
        java.lang.Object $r5;
        androidx.car.app.ScreenManager $r6;
        androidx.car.app.utils.RemoteUtils$HostCall $r8;

        r0 := @this: androidx.car.app.AppManager$1;

        r1 := @parameter0: androidx.car.app.IOnDoneCallback;

        $r2 = r0.<androidx.car.app.AppManager$1: androidx.car.app.AppManager this$0>;

        $r3 = virtualinvoke $r2.<androidx.car.app.AppManager: androidx.lifecycle.Lifecycle getLifecycle()>();

        $r4 = r0.<androidx.car.app.AppManager$1: androidx.car.app.CarContext val$carContext>;

        $r5 = virtualinvoke $r4.<androidx.car.app.CarContext: java.lang.Object getCarService(java.lang.Class)>(class "Landroidx/car/app/ScreenManager;");

        $r6 = (androidx.car.app.ScreenManager) $r5;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r6);

        $r8 = dynamicinvoke "dispatch" <androidx.car.app.utils.RemoteUtils$HostCall (androidx.car.app.ScreenManager)>($r6) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(), methodhandle: "REF_INVOKE_VIRTUAL" <androidx.car.app.ScreenManager: androidx.car.app.model.TemplateWrapper getTopTemplate()>, methodtype: java.lang.Object __METHODTYPE__());

        staticinvoke <androidx.car.app.utils.RemoteUtils: void dispatchCallFromHost(androidx.lifecycle.Lifecycle,androidx.car.app.IOnDoneCallback,java.lang.String,androidx.car.app.utils.RemoteUtils$HostCall)>($r3, r1, "getTemplate", $r8);

        return;
    }

    public void onBackPressed(androidx.car.app.IOnDoneCallback)
    {
        androidx.car.app.AppManager$1 r0;
        androidx.car.app.IOnDoneCallback r1;
        androidx.car.app.AppManager $r2;
        androidx.lifecycle.Lifecycle $r3;
        androidx.car.app.CarContext $r4;
        androidx.car.app.utils.RemoteUtils$HostCall $r5;

        r0 := @this: androidx.car.app.AppManager$1;

        r1 := @parameter0: androidx.car.app.IOnDoneCallback;

        $r2 = r0.<androidx.car.app.AppManager$1: androidx.car.app.AppManager this$0>;

        $r3 = virtualinvoke $r2.<androidx.car.app.AppManager: androidx.lifecycle.Lifecycle getLifecycle()>();

        $r4 = r0.<androidx.car.app.AppManager$1: androidx.car.app.CarContext val$carContext>;

        $r5 = dynamicinvoke "dispatch" <androidx.car.app.utils.RemoteUtils$HostCall (androidx.car.app.CarContext)>($r4) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.car.app.AppManager$1: java.lang.Object lambda$onBackPressed$0(androidx.car.app.CarContext)>, methodtype: java.lang.Object __METHODTYPE__());

        staticinvoke <androidx.car.app.utils.RemoteUtils: void dispatchCallFromHost(androidx.lifecycle.Lifecycle,androidx.car.app.IOnDoneCallback,java.lang.String,androidx.car.app.utils.RemoteUtils$HostCall)>($r3, r1, "onBackPressed", $r5);

        return;
    }

    public void startLocationUpdates(androidx.car.app.IOnDoneCallback)
    {
        androidx.car.app.AppManager$1 r0;
        androidx.car.app.IOnDoneCallback r1;
        androidx.car.app.CarContext $r2, $r3, $r7;
        int $i0, $i1;
        java.lang.SecurityException $r4;
        androidx.car.app.AppManager $r5;
        androidx.lifecycle.Lifecycle $r6;
        androidx.car.app.utils.RemoteUtils$HostCall $r8;

        r0 := @this: androidx.car.app.AppManager$1;

        r1 := @parameter0: androidx.car.app.IOnDoneCallback;

        $r2 = r0.<androidx.car.app.AppManager$1: androidx.car.app.CarContext val$carContext>;

        $i0 = virtualinvoke $r2.<androidx.car.app.CarContext: int checkSelfPermission(java.lang.String)>("android.permission.ACCESS_FINE_LOCATION");

        if $i0 != -1 goto label1;

        $r3 = r0.<androidx.car.app.AppManager$1: androidx.car.app.CarContext val$carContext>;

        $i1 = virtualinvoke $r3.<androidx.car.app.CarContext: int checkSelfPermission(java.lang.String)>("android.permission.ACCESS_COARSE_LOCATION");

        if $i1 != -1 goto label1;

        $r4 = new java.lang.SecurityException;

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>("Location permission(s) not granted.");

        staticinvoke <androidx.car.app.utils.RemoteUtils: void sendFailureResponseToHost(androidx.car.app.IOnDoneCallback,java.lang.String,java.lang.Throwable)>(r1, "startLocationUpdates", $r4);

     label1:
        $r5 = r0.<androidx.car.app.AppManager$1: androidx.car.app.AppManager this$0>;

        $r6 = virtualinvoke $r5.<androidx.car.app.AppManager: androidx.lifecycle.Lifecycle getLifecycle()>();

        $r7 = r0.<androidx.car.app.AppManager$1: androidx.car.app.CarContext val$carContext>;

        $r8 = dynamicinvoke "dispatch" <androidx.car.app.utils.RemoteUtils$HostCall (androidx.car.app.CarContext)>($r7) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.car.app.AppManager$1: java.lang.Object lambda$startLocationUpdates$1(androidx.car.app.CarContext)>, methodtype: java.lang.Object __METHODTYPE__());

        staticinvoke <androidx.car.app.utils.RemoteUtils: void dispatchCallFromHost(androidx.lifecycle.Lifecycle,androidx.car.app.IOnDoneCallback,java.lang.String,androidx.car.app.utils.RemoteUtils$HostCall)>($r6, r1, "startLocationUpdates", $r8);

        return;
    }

    public void stopLocationUpdates(androidx.car.app.IOnDoneCallback)
    {
        androidx.car.app.AppManager$1 r0;
        androidx.car.app.IOnDoneCallback r1;
        androidx.car.app.AppManager $r2;
        androidx.lifecycle.Lifecycle $r3;
        androidx.car.app.CarContext $r4;
        androidx.car.app.utils.RemoteUtils$HostCall $r5;

        r0 := @this: androidx.car.app.AppManager$1;

        r1 := @parameter0: androidx.car.app.IOnDoneCallback;

        $r2 = r0.<androidx.car.app.AppManager$1: androidx.car.app.AppManager this$0>;

        $r3 = virtualinvoke $r2.<androidx.car.app.AppManager: androidx.lifecycle.Lifecycle getLifecycle()>();

        $r4 = r0.<androidx.car.app.AppManager$1: androidx.car.app.CarContext val$carContext>;

        $r5 = dynamicinvoke "dispatch" <androidx.car.app.utils.RemoteUtils$HostCall (androidx.car.app.CarContext)>($r4) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.car.app.AppManager$1: java.lang.Object lambda$stopLocationUpdates$2(androidx.car.app.CarContext)>, methodtype: java.lang.Object __METHODTYPE__());

        staticinvoke <androidx.car.app.utils.RemoteUtils: void dispatchCallFromHost(androidx.lifecycle.Lifecycle,androidx.car.app.IOnDoneCallback,java.lang.String,androidx.car.app.utils.RemoteUtils$HostCall)>($r3, r1, "stopLocationUpdates", $r5);

        return;
    }

    private static java.lang.Object lambda$stopLocationUpdates$2(androidx.car.app.CarContext) throws androidx.car.app.serialization.BundlerException
    {
        androidx.car.app.CarContext r0;
        java.lang.Object $r1;
        androidx.car.app.AppManager $r2;

        r0 := @parameter0: androidx.car.app.CarContext;

        $r1 = virtualinvoke r0.<androidx.car.app.CarContext: java.lang.Object getCarService(java.lang.Class)>(class "Landroidx/car/app/AppManager;");

        $r2 = (androidx.car.app.AppManager) $r1;

        virtualinvoke $r2.<androidx.car.app.AppManager: void stopLocationUpdates()>();

        return null;
    }

    private static java.lang.Object lambda$startLocationUpdates$1(androidx.car.app.CarContext) throws androidx.car.app.serialization.BundlerException
    {
        androidx.car.app.CarContext r0;
        java.lang.Object $r1;
        androidx.car.app.AppManager $r2;

        r0 := @parameter0: androidx.car.app.CarContext;

        $r1 = virtualinvoke r0.<androidx.car.app.CarContext: java.lang.Object getCarService(java.lang.Class)>(class "Landroidx/car/app/AppManager;");

        $r2 = (androidx.car.app.AppManager) $r1;

        virtualinvoke $r2.<androidx.car.app.AppManager: void startLocationUpdates()>();

        return null;
    }

    private static java.lang.Object lambda$onBackPressed$0(androidx.car.app.CarContext) throws androidx.car.app.serialization.BundlerException
    {
        androidx.car.app.CarContext r0;
        androidx.activity.OnBackPressedDispatcher $r1;

        r0 := @parameter0: androidx.car.app.CarContext;

        $r1 = virtualinvoke r0.<androidx.car.app.CarContext: androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher()>();

        virtualinvoke $r1.<androidx.activity.OnBackPressedDispatcher: void onBackPressed()>();

        return null;
    }

