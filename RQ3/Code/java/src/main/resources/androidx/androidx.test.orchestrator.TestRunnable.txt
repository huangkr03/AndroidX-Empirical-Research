androidx.test.orchestrator.TestRunnable
<androidx.test.orchestrator.TestRunnable: android.os.Bundle arguments>
<androidx.test.orchestrator.TestRunnable: boolean collectTests>
<androidx.test.orchestrator.TestRunnable: android.content.Context context>
<androidx.test.orchestrator.TestRunnable: androidx.test.orchestrator.TestRunnable$RunFinishedListener listener>
<androidx.test.orchestrator.TestRunnable: java.io.OutputStream outputStream>
<androidx.test.orchestrator.TestRunnable: java.lang.String secret>
<androidx.test.orchestrator.TestRunnable: java.lang.String test>
    void <init>(android.content.Context, java.lang.String, android.os.Bundle, java.io.OutputStream, androidx.test.orchestrator.TestRunnable$RunFinishedListener, java.lang.String, boolean)
    {
        androidx.test.orchestrator.TestRunnable $r0;
        java.lang.String $r1, $r5;
        android.os.Bundle $r2, $r7;
        java.io.OutputStream $r3;
        androidx.test.orchestrator.TestRunnable$RunFinishedListener $r4;
        boolean $z0;
        android.content.Context $r6;

        $r0 := @this: androidx.test.orchestrator.TestRunnable;

        $r6 := @parameter0: android.content.Context;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: android.os.Bundle;

        $r3 := @parameter3: java.io.OutputStream;

        $r4 := @parameter4: androidx.test.orchestrator.TestRunnable$RunFinishedListener;

        $r5 := @parameter5: java.lang.String;

        $z0 := @parameter6: boolean;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<androidx.test.orchestrator.TestRunnable: android.content.Context context> = $r6;

        $r0.<androidx.test.orchestrator.TestRunnable: java.lang.String secret> = $r1;

        $r7 = new android.os.Bundle;

        specialinvoke $r7.<android.os.Bundle: void <init>(android.os.Bundle)>($r2);

        $r0.<androidx.test.orchestrator.TestRunnable: android.os.Bundle arguments> = $r7;

        $r0.<androidx.test.orchestrator.TestRunnable: java.io.OutputStream outputStream> = $r3;

        $r0.<androidx.test.orchestrator.TestRunnable: androidx.test.orchestrator.TestRunnable$RunFinishedListener listener> = $r4;

        $r0.<androidx.test.orchestrator.TestRunnable: java.lang.String test> = $r5;

        $r0.<androidx.test.orchestrator.TestRunnable: boolean collectTests> = $z0;

        return;
    }

    private java.util.List buildShellParams(android.os.Bundle) throws java.io.IOException, androidx.test.services.shellexecutor.ClientNotConnected
    {
        androidx.test.orchestrator.TestRunnable $r0;
        java.util.ArrayList $r1, r7;
        android.os.Bundle $r2;
        java.util.Set $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.String $r6;
        java.util.List r8;

        $r0 := @this: androidx.test.orchestrator.TestRunnable;

        $r2 := @parameter0: android.os.Bundle;

        r7 = new java.util.ArrayList;

        $r1 = r7;

        specialinvoke r7.<java.util.ArrayList: void <init>()>();

        r8 = (java.util.List) $r1;

        interfaceinvoke r8.<java.util.List: boolean add(java.lang.Object)>("instrument");

        r8 = (java.util.List) $r1;

        interfaceinvoke r8.<java.util.List: boolean add(java.lang.Object)>("-w");

        r8 = (java.util.List) $r1;

        interfaceinvoke r8.<java.util.List: boolean add(java.lang.Object)>("-r");

        $r3 = virtualinvoke $r2.<android.os.Bundle: java.util.Set keySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.lang.String) $r5;

        r8 = (java.util.List) $r1;

        interfaceinvoke r8.<java.util.List: boolean add(java.lang.Object)>("-e");

        r8 = (java.util.List) $r1;

        interfaceinvoke r8.<java.util.List: boolean add(java.lang.Object)>($r6);

        $r6 = virtualinvoke $r2.<android.os.Bundle: java.lang.String getString(java.lang.String)>($r6);

        r8 = (java.util.List) $r1;

        interfaceinvoke r8.<java.util.List: boolean add(java.lang.Object)>($r6);

        goto label1;

     label2:
        $r6 = specialinvoke $r0.<androidx.test.orchestrator.TestRunnable: java.lang.String getTargetInstrumentation()>();

        r8 = (java.util.List) $r1;

        interfaceinvoke r8.<java.util.List: boolean add(java.lang.Object)>($r6);

        r8 = (java.util.List) $r1;

        return r8;
    }

    private java.lang.String getTargetInstrumentation()
    {
        androidx.test.orchestrator.TestRunnable $r0;
        java.lang.String $r1;
        android.os.Bundle $r2;

        $r0 := @this: androidx.test.orchestrator.TestRunnable;

        $r2 = $r0.<androidx.test.orchestrator.TestRunnable: android.os.Bundle arguments>;

        $r1 = virtualinvoke $r2.<android.os.Bundle: java.lang.String getString(java.lang.String)>("targetInstrumentation");

        return $r1;
    }

    private android.os.Bundle getTargetInstrumentationArguments()
    {
        androidx.test.orchestrator.TestRunnable $r0;
        android.os.Bundle $r1, $r2;
        boolean $z0;
        java.lang.String $r3;

        $r0 := @this: androidx.test.orchestrator.TestRunnable;

        $r1 = new android.os.Bundle;

        $r2 = $r0.<androidx.test.orchestrator.TestRunnable: android.os.Bundle arguments>;

        specialinvoke $r1.<android.os.Bundle: void <init>(android.os.Bundle)>($r2);

        virtualinvoke $r1.<android.os.Bundle: void remove(java.lang.String)>("targetInstrumentation");

        virtualinvoke $r1.<android.os.Bundle: void remove(java.lang.String)>("isolated");

        $z0 = $r0.<androidx.test.orchestrator.TestRunnable: boolean collectTests>;

        if $z0 == 0 goto label1;

        virtualinvoke $r1.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("listTestsForOrchestrator", "true");

        goto label2;

     label1:
        virtualinvoke $r1.<android.os.Bundle: void remove(java.lang.String)>("package");

        virtualinvoke $r1.<android.os.Bundle: void remove(java.lang.String)>("testFile");

     label2:
        $r3 = $r0.<androidx.test.orchestrator.TestRunnable: java.lang.String test>;

        if $r3 == null goto label3;

        virtualinvoke $r1.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("class", $r3);

     label3:
        return $r1;
    }

    public static androidx.test.orchestrator.TestRunnable legacyTestRunnable(android.content.Context, java.lang.String, android.os.Bundle, java.io.OutputStream, androidx.test.orchestrator.TestRunnable$RunFinishedListener)
    {
        android.content.Context $r0;
        java.lang.String $r1;
        android.os.Bundle $r2;
        java.io.OutputStream $r3;
        androidx.test.orchestrator.TestRunnable$RunFinishedListener $r4;
        androidx.test.orchestrator.TestRunnable $r5;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: android.os.Bundle;

        $r3 := @parameter3: java.io.OutputStream;

        $r4 := @parameter4: androidx.test.orchestrator.TestRunnable$RunFinishedListener;

        $r5 = new androidx.test.orchestrator.TestRunnable;

        specialinvoke $r5.<androidx.test.orchestrator.TestRunnable: void <init>(android.content.Context,java.lang.String,android.os.Bundle,java.io.OutputStream,androidx.test.orchestrator.TestRunnable$RunFinishedListener,java.lang.String,boolean)>($r0, $r1, $r2, $r3, $r4, null, 0);

        return $r5;
    }

    public static androidx.test.orchestrator.TestRunnable singleTestRunnable(android.content.Context, java.lang.String, android.os.Bundle, java.io.OutputStream, androidx.test.orchestrator.TestRunnable$RunFinishedListener, java.lang.String)
    {
        android.content.Context $r0;
        java.lang.String $r1, $r5;
        android.os.Bundle $r2;
        java.io.OutputStream $r3;
        androidx.test.orchestrator.TestRunnable$RunFinishedListener $r4;
        androidx.test.orchestrator.TestRunnable $r6;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: android.os.Bundle;

        $r3 := @parameter3: java.io.OutputStream;

        $r4 := @parameter4: androidx.test.orchestrator.TestRunnable$RunFinishedListener;

        $r5 := @parameter5: java.lang.String;

        $r6 = new androidx.test.orchestrator.TestRunnable;

        specialinvoke $r6.<androidx.test.orchestrator.TestRunnable: void <init>(android.content.Context,java.lang.String,android.os.Bundle,java.io.OutputStream,androidx.test.orchestrator.TestRunnable$RunFinishedListener,java.lang.String,boolean)>($r0, $r1, $r2, $r3, $r4, $r5, 0);

        return $r6;
    }

    public static androidx.test.orchestrator.TestRunnable testCollectionRunnable(android.content.Context, java.lang.String, android.os.Bundle, java.io.OutputStream, androidx.test.orchestrator.TestRunnable$RunFinishedListener)
    {
        android.content.Context $r0;
        java.lang.String $r1;
        android.os.Bundle $r2;
        java.io.OutputStream $r3;
        androidx.test.orchestrator.TestRunnable$RunFinishedListener $r4;
        androidx.test.orchestrator.TestRunnable $r5;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: android.os.Bundle;

        $r3 := @parameter3: java.io.OutputStream;

        $r4 := @parameter4: androidx.test.orchestrator.TestRunnable$RunFinishedListener;

        $r5 = new androidx.test.orchestrator.TestRunnable;

        specialinvoke $r5.<androidx.test.orchestrator.TestRunnable: void <init>(android.content.Context,java.lang.String,android.os.Bundle,java.io.OutputStream,androidx.test.orchestrator.TestRunnable$RunFinishedListener,java.lang.String,boolean)>($r0, $r1, $r2, $r3, $r4, null, 1);

        return $r5;
    }

    public void run()
    {
        androidx.test.orchestrator.TestRunnable $r0;
        android.os.Bundle $r1;
        java.util.List $r2;
        java.io.InputStream $r3;
        java.io.OutputStream $r4;
        java.lang.Throwable $r5, $r6, $r7;
        androidx.test.orchestrator.TestRunnable$RunFinishedListener $r8;

        $r0 := @this: androidx.test.orchestrator.TestRunnable;

     label01:
        $r1 = specialinvoke $r0.<androidx.test.orchestrator.TestRunnable: android.os.Bundle getTargetInstrumentationArguments()>();

        $r2 = specialinvoke $r0.<androidx.test.orchestrator.TestRunnable: java.util.List buildShellParams(android.os.Bundle)>($r1);

        $r3 = virtualinvoke $r0.<androidx.test.orchestrator.TestRunnable: java.io.InputStream runShellCommand(java.util.List)>($r2);

     label02:
        $r4 = $r0.<androidx.test.orchestrator.TestRunnable: java.io.OutputStream outputStream>;

        staticinvoke <com.google.common.io.ByteStreams: long copy(java.io.InputStream,java.io.OutputStream)>($r3, $r4);

        if $r3 == null goto label07;

     label03:
        virtualinvoke $r3.<java.io.InputStream: void close()>();

     label04:
        $r4 = $r0.<androidx.test.orchestrator.TestRunnable: java.io.OutputStream outputStream>;

     label05:
        virtualinvoke $r4.<java.io.OutputStream: void close()>();

     label06:
        goto label11;

     label07:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("TestRunnable", "InputStream returned from shell command is null");

        goto label11;

     label08:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TestRunnable", "ShellCommandClient remote execution, unable to run remote test", $r5);

        goto label11;

     label09:
        $r6 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TestRunnable", "ShellCommandClient connection interrupted, unable to run remote test", $r6);

        goto label11;

     label10:
        $r7 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TestRunnable", "IOException thrown when running remote test", $r7);

     label11:
        $r8 = $r0.<androidx.test.orchestrator.TestRunnable: androidx.test.orchestrator.TestRunnable$RunFinishedListener listener>;

        interfaceinvoke $r8.<androidx.test.orchestrator.TestRunnable$RunFinishedListener: void runFinished()>();

        return;

        catch java.io.IOException from label01 to label02 with label10;
        catch java.lang.InterruptedException from label01 to label02 with label09;
        catch android.os.RemoteException from label01 to label02 with label08;
        catch java.io.IOException from label03 to label04 with label10;
        catch java.io.IOException from label05 to label06 with label10;
        catch java.lang.InterruptedException from label03 to label04 with label09;
        catch java.lang.InterruptedException from label05 to label06 with label09;
        catch android.os.RemoteException from label03 to label04 with label08;
        catch android.os.RemoteException from label05 to label06 with label08;
    }

    java.io.InputStream runShellCommand(java.util.List) throws java.io.IOException, androidx.test.services.shellexecutor.ClientNotConnected, java.lang.InterruptedException, android.os.RemoteException
    {
        androidx.test.orchestrator.TestRunnable $r0;
        androidx.test.services.shellexecutor.ShellExecutorImpl $r1;
        java.io.InputStream $r2;
        java.util.List $r3;
        android.content.Context $r4;
        java.lang.String $r5;

        $r0 := @this: androidx.test.orchestrator.TestRunnable;

        $r3 := @parameter0: java.util.List;

        $r1 = new androidx.test.services.shellexecutor.ShellExecutorImpl;

        $r4 = $r0.<androidx.test.orchestrator.TestRunnable: android.content.Context context>;

        $r5 = $r0.<androidx.test.orchestrator.TestRunnable: java.lang.String secret>;

        specialinvoke $r1.<androidx.test.services.shellexecutor.ShellExecutorImpl: void <init>(android.content.Context,java.lang.String)>($r4, $r5);

        $r2 = virtualinvoke $r1.<androidx.test.services.shellexecutor.ShellExecutorImpl: java.io.InputStream executeShellCommand(java.lang.String,java.util.List,java.util.Map,boolean)>("am", $r3, null, 0);

        return $r2;
    }

androidx.test.orchestrator.TestRunnable$RunFinishedListener
<androidx.test.orchestrator.TestRunnable$RunFinishedListener: void runFinished()>
