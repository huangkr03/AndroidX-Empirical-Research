androidx.work.testing.TestWorkerBuilder
    private void <init>(android.content.Context, java.lang.Class, java.util.concurrent.Executor)
    {
        androidx.work.testing.TestWorkerBuilder r0;
        android.content.Context r1;
        java.lang.Class r2;
        java.util.concurrent.Executor r3;

        r0 := @this: androidx.work.testing.TestWorkerBuilder;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: java.util.concurrent.Executor;

        specialinvoke r0.<androidx.work.testing.TestListenableWorkerBuilder: void <init>(android.content.Context,java.lang.Class)>(r1, r2);

        if r3 == null goto label1;

        virtualinvoke r0.<androidx.work.testing.TestWorkerBuilder: androidx.work.testing.TestListenableWorkerBuilder setExecutor(java.util.concurrent.Executor)>(r3);

     label1:
        return;
    }

    public static androidx.work.testing.TestWorkerBuilder 'from'(android.content.Context, androidx.work.WorkRequest, java.util.concurrent.Executor)
    {
        android.content.Context r0;
        androidx.work.WorkRequest r1;
        java.util.concurrent.Executor r2;
        androidx.work.impl.model.WorkSpec r3;
        java.lang.String r4, $r22;
        java.lang.Class r5;
        java.util.ArrayList r6, $r8;
        androidx.work.testing.TestWorkerBuilder r7, $r11;
        java.util.Set $r9, $r10;
        int $i0;
        java.util.UUID $r12;
        androidx.work.testing.TestListenableWorkerBuilder $r13, $r14;
        androidx.work.Data $r15;
        java.lang.IllegalArgumentException $r17;
        java.lang.StringBuilder $r18, $r19, $r20, $r21;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: androidx.work.WorkRequest;

        r2 := @parameter2: java.util.concurrent.Executor;

        r3 = virtualinvoke r1.<androidx.work.WorkRequest: androidx.work.impl.model.WorkSpec getWorkSpec()>();

        r4 = r3.<androidx.work.impl.model.WorkSpec: java.lang.String workerClassName>;

        r5 = staticinvoke <androidx.work.testing.TestWorkerBuilder: java.lang.Class getWorkerClass(java.lang.String)>(r4);

        if r5 != null goto label1;

        $r17 = new java.lang.IllegalArgumentException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid worker class name or class does not extend Worker (");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r22);

        throw $r17;

     label1:
        $r8 = new java.util.ArrayList;

        $r9 = virtualinvoke r1.<androidx.work.WorkRequest: java.util.Set getTags()>();

        $i0 = interfaceinvoke $r9.<java.util.Set: int size()>();

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>($i0);

        r6 = $r8;

        $r10 = virtualinvoke r1.<androidx.work.WorkRequest: java.util.Set getTags()>();

        interfaceinvoke r6.<java.util.List: boolean addAll(java.util.Collection)>($r10);

        $r11 = new androidx.work.testing.TestWorkerBuilder;

        specialinvoke $r11.<androidx.work.testing.TestWorkerBuilder: void <init>(android.content.Context,java.lang.Class,java.util.concurrent.Executor)>(r0, r5, r2);

        r7 = $r11;

        $r12 = virtualinvoke r1.<androidx.work.WorkRequest: java.util.UUID getId()>();

        $r13 = virtualinvoke r7.<androidx.work.testing.TestWorkerBuilder: androidx.work.testing.TestListenableWorkerBuilder setId(java.util.UUID)>($r12);

        $r14 = virtualinvoke $r13.<androidx.work.testing.TestListenableWorkerBuilder: androidx.work.testing.TestListenableWorkerBuilder setTags(java.util.List)>(r6);

        $r15 = r3.<androidx.work.impl.model.WorkSpec: androidx.work.Data input>;

        virtualinvoke $r14.<androidx.work.testing.TestListenableWorkerBuilder: androidx.work.testing.TestListenableWorkerBuilder setInputData(androidx.work.Data)>($r15);

        return r7;
    }

    public static androidx.work.testing.TestWorkerBuilder 'from'(android.content.Context, java.lang.Class, java.util.concurrent.Executor)
    {
        android.content.Context r0;
        java.lang.Class r1;
        java.util.concurrent.Executor r2;
        androidx.work.testing.TestWorkerBuilder $r3;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.util.concurrent.Executor;

        $r3 = new androidx.work.testing.TestWorkerBuilder;

        specialinvoke $r3.<androidx.work.testing.TestWorkerBuilder: void <init>(android.content.Context,java.lang.Class,java.util.concurrent.Executor)>(r0, r1, r2);

        return $r3;
    }

    private static java.lang.Class getWorkerClass(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Class $r1, r3;
        boolean $z0;
        java.lang.Throwable $r2, r4;

        r0 := @parameter0: java.lang.String;

     label1:
        r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        $r1 = class "Landroidx/work/Worker;";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r3);

        if $z0 != 0 goto label3;

     label2:
        return null;

     label3:
        return r3;

     label4:
        $r2 := @caughtexception;

        r4 = $r2;

        return null;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

