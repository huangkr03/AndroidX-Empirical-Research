androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector
<androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector: androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector$Companion Companion>
<androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector: java.util.List diagnostics>
<androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector: kotlin.text.Regex KAPT_LOCATION_AND_KIND_REGEX>
<androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector: kotlin.text.Regex KSP_LOCATION_REGEX>
<androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector: kotlin.text.Regex KIND_REGEX>
<androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector: kotlin.text.Regex KSP_PREFIX_REGEX>
<androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector: java.lang.String KSP_ADDITIONAL_ERROR_MESSAGE>
    public void <init>()
    {
        androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector r0;
        java.util.ArrayList $r1;
        java.util.List $r2;

        r0 := @this: androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = (java.util.List) $r1;

        r0.<androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector: java.util.List diagnostics> = $r2;

        return;
    }

    public final java.util.List getDiagnostics()
    {
        androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector r0;
        java.util.List $r1;

        r0 := @this: androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector;

        $r1 = r0.<androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector: java.util.List diagnostics>;

        return $r1;
    }

    public void clear()
    {
        androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector r0;
        java.util.List $r1;

        r0 := @this: androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector;

        $r1 = r0.<androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector: java.util.List diagnostics>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        return;
    }

    public final boolean hasWarnings()
    {
        androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector r0;
        java.lang.Iterable $r1;
        java.util.Iterator r2;
        java.lang.Object r3;
        androidx.room.compiler.processing.util.compiler.steps.RawDiagnosticMessage r4;
        java.util.List $r5;
        boolean $z2, $z3, $z4, $z5, $z6;
        javax.tools.Diagnostic$Kind $r6, $r7, $r8, $r9;
        java.util.Collection $r10;

        r0 := @this: androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector;

        $r5 = r0.<androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector: java.util.List diagnostics>;

        $r1 = (java.lang.Iterable) $r5;

        $z2 = $r1 instanceof java.util.Collection;

        if $z2 == 0 goto label1;

        $r10 = (java.util.Collection) $r1;

        $z3 = interfaceinvoke $r10.<java.util.Collection: boolean isEmpty()>();

        if $z3 == 0 goto label1;

        $z4 = 0;

        goto label7;

     label1:
        r2 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z5 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label6;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (androidx.room.compiler.processing.util.compiler.steps.RawDiagnosticMessage) r3;

        $r6 = virtualinvoke r4.<androidx.room.compiler.processing.util.compiler.steps.RawDiagnosticMessage: javax.tools.Diagnostic$Kind getKind()>();

        $r7 = <javax.tools.Diagnostic$Kind: javax.tools.Diagnostic$Kind WARNING>;

        if $r6 == $r7 goto label3;

        $r8 = virtualinvoke r4.<androidx.room.compiler.processing.util.compiler.steps.RawDiagnosticMessage: javax.tools.Diagnostic$Kind getKind()>();

        $r9 = <javax.tools.Diagnostic$Kind: javax.tools.Diagnostic$Kind MANDATORY_WARNING>;

        if $r8 != $r9 goto label4;

     label3:
        $z6 = 1;

        goto label5;

     label4:
        $z6 = 0;

     label5:
        if $z6 == 0 goto label2;

        $z4 = 1;

        goto label7;

     label6:
        $z4 = 0;

     label7:
        return $z4;
    }

    public boolean hasErrors()
    {
        androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector r0;
        java.lang.Iterable $r1;
        java.util.Iterator r2;
        java.lang.Object r3;
        androidx.room.compiler.processing.util.compiler.steps.RawDiagnosticMessage r4;
        java.util.List $r5;
        boolean $z2, $z3, $z4, $z5, $z6;
        javax.tools.Diagnostic$Kind $r6, $r7;
        java.util.Collection $r8;

        r0 := @this: androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector;

        $r5 = r0.<androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector: java.util.List diagnostics>;

        $r1 = (java.lang.Iterable) $r5;

        $z2 = $r1 instanceof java.util.Collection;

        if $z2 == 0 goto label1;

        $r8 = (java.util.Collection) $r1;

        $z3 = interfaceinvoke $r8.<java.util.Collection: boolean isEmpty()>();

        if $z3 == 0 goto label1;

        $z4 = 0;

        goto label6;

     label1:
        r2 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z5 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label5;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (androidx.room.compiler.processing.util.compiler.steps.RawDiagnosticMessage) r3;

        $r6 = virtualinvoke r4.<androidx.room.compiler.processing.util.compiler.steps.RawDiagnosticMessage: javax.tools.Diagnostic$Kind getKind()>();

        $r7 = <javax.tools.Diagnostic$Kind: javax.tools.Diagnostic$Kind ERROR>;

        if $r6 != $r7 goto label3;

        $z6 = 1;

        goto label4;

     label3:
        $z6 = 0;

     label4:
        if $z6 == 0 goto label2;

        $z4 = 1;

        goto label6;

     label5:
        $z4 = 0;

     label6:
        return $z4;
    }

    public void report(org.jetbrains.kotlin.cli.common.messages.CompilerMessageSeverity, java.lang.String, org.jetbrains.kotlin.cli.common.messages.CompilerMessageSourceLocation)
    {
        androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector r0;
        org.jetbrains.kotlin.cli.common.messages.CompilerMessageSeverity r1;
        java.lang.String r2, r5, $r7, $r9;
        org.jetbrains.kotlin.cli.common.messages.CompilerMessageSourceLocation r3;
        kotlin.Pair r4, $r10;
        androidx.room.compiler.processing.util.compiler.steps.RawDiagnosticMessage$Location r6, $r8;
        boolean $z0;
        java.lang.Object $r11, $r12;
        java.util.List $r13;
        androidx.room.compiler.processing.util.compiler.steps.RawDiagnosticMessage $r14;
        javax.tools.Diagnostic$Kind $r15;

        r0 := @this: androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector;

        r1 := @parameter0: org.jetbrains.kotlin.cli.common.messages.CompilerMessageSeverity;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.jetbrains.kotlin.cli.common.messages.CompilerMessageSourceLocation;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "severity");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "message");

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r2, "Error occurred in KSP, check log for detail");

        if $z0 == 0 goto label1;

        return;

     label1:
        if r3 != null goto label2;

        $r10 = specialinvoke r0.<androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector: kotlin.Pair parseLocation(java.lang.String)>(r2);

        if $r10 != null goto label3;

        $r9 = specialinvoke r0.<androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector: java.lang.String stripPrefixes(java.lang.String)>(r2);

        $r10 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r9, null);

        goto label3;

     label2:
        $r7 = specialinvoke r0.<androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector: java.lang.String stripPrefixes(java.lang.String)>(r2);

        $r8 = specialinvoke r0.<androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector: androidx.room.compiler.processing.util.compiler.steps.RawDiagnosticMessage$Location toRawLocation(org.jetbrains.kotlin.cli.common.messages.CompilerMessageSourceLocation)>(r3);

        $r10 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r7, $r8);

     label3:
        r4 = $r10;

        $r11 = virtualinvoke r4.<kotlin.Pair: java.lang.Object component1()>();

        r5 = (java.lang.String) $r11;

        $r12 = virtualinvoke r4.<kotlin.Pair: java.lang.Object component2()>();

        r6 = (androidx.room.compiler.processing.util.compiler.steps.RawDiagnosticMessage$Location) $r12;

        $r13 = r0.<androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector: java.util.List diagnostics>;

        $r14 = new androidx.room.compiler.processing.util.compiler.steps.RawDiagnosticMessage;

        $r15 = specialinvoke r0.<androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector: javax.tools.Diagnostic$Kind getKind(org.jetbrains.kotlin.cli.common.messages.CompilerMessageSeverity)>(r1);

        specialinvoke $r14.<androidx.room.compiler.processing.util.compiler.steps.RawDiagnosticMessage: void <init>(javax.tools.Diagnostic$Kind,java.lang.String,androidx.room.compiler.processing.util.compiler.steps.RawDiagnosticMessage$Location)>($r15, r5, r6);

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>($r14);

        return;
    }

    private final kotlin.Pair parseLocation(java.lang.String)
    {
        androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector r0;
        java.lang.String $r1, r2, $r7, $r12, $r16, $r19;
        kotlin.text.MatchResult r3, $r23;
        java.lang.CharSequence $r4, $r8, $r21;
        kotlin.sequences.Sequence $r5;
        java.lang.Object $r6, $r15, $r18;
        kotlin.text.Regex $r9, $r22;
        kotlin.text.MatchGroupCollection $r10;
        int $i0, $i1, $i2, $i3;
        kotlin.ranges.IntRange $r11;
        androidx.room.compiler.processing.util.compiler.steps.RawDiagnosticMessage$Location $r13;
        java.util.List $r14, $r17;
        kotlin.Pair $r20;

        r0 := @this: androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector;

        $r1 := @parameter0: java.lang.String;

        $r4 = (java.lang.CharSequence) $r1;

        $r5 = staticinvoke <kotlin.text.StringsKt: kotlin.sequences.Sequence lineSequence(java.lang.CharSequence)>($r4);

        $r6 = staticinvoke <kotlin.sequences.SequencesKt: java.lang.Object firstOrNull(kotlin.sequences.Sequence)>($r5);

        $r7 = (java.lang.String) $r6;

        if $r7 != null goto label1;

        return null;

     label1:
        r2 = $r7;

        $r9 = <androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector: kotlin.text.Regex KSP_LOCATION_REGEX>;

        $r8 = (java.lang.CharSequence) r2;

        $r23 = staticinvoke <kotlin.text.Regex: kotlin.text.MatchResult find$default(kotlin.text.Regex,java.lang.CharSequence,int,int,java.lang.Object)>($r9, $r8, 0, 2, null);

        if $r23 != null goto label2;

        $r22 = <androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector: kotlin.text.Regex KAPT_LOCATION_AND_KIND_REGEX>;

        $r21 = (java.lang.CharSequence) r2;

        $r23 = staticinvoke <kotlin.text.Regex: kotlin.text.MatchResult find$default(kotlin.text.Regex,java.lang.CharSequence,int,int,java.lang.Object)>($r22, $r21, 0, 2, null);

        if $r23 != null goto label2;

        return null;

     label2:
        r3 = $r23;

        $r10 = interfaceinvoke r3.<kotlin.text.MatchResult: kotlin.text.MatchGroupCollection getGroups()>();

        $i0 = interfaceinvoke $r10.<kotlin.text.MatchGroupCollection: int size()>();

        if $i0 == 4 goto label3;

        return null;

     label3:
        $r11 = interfaceinvoke r3.<kotlin.text.MatchResult: kotlin.ranges.IntRange getRange()>();

        $i1 = virtualinvoke $r11.<kotlin.ranges.IntRange: int getLast()>();

        $i2 = $i1 + 1;

        $r12 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r12, "this as java.lang.String).substring(startIndex)");

        $r13 = new androidx.room.compiler.processing.util.compiler.steps.RawDiagnosticMessage$Location;

        $r14 = interfaceinvoke r3.<kotlin.text.MatchResult: java.util.List getGroupValues()>();

        $r15 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>(1);

        $r16 = (java.lang.String) $r15;

        $r17 = interfaceinvoke r3.<kotlin.text.MatchResult: java.util.List getGroupValues()>();

        $r18 = interfaceinvoke $r17.<java.util.List: java.lang.Object get(int)>(3);

        $r19 = (java.lang.String) $r18;

        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r19);

        specialinvoke $r13.<androidx.room.compiler.processing.util.compiler.steps.RawDiagnosticMessage$Location: void <init>(java.lang.String,int)>($r16, $i3);

        $r20 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r12, $r13);

        return $r20;
    }

    private final java.lang.String stripPrefixes(java.lang.String)
    {
        androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector r0;
        java.lang.String $r1, $r2, $r3;

        r0 := @this: androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector;

        $r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector: java.lang.String stripKind(java.lang.String)>($r1);

        $r3 = specialinvoke r0.<androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector: java.lang.String stripKspPrefix(java.lang.String)>($r2);

        return $r3;
    }

    private final java.lang.String stripKind(java.lang.String)
    {
        androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector r0;
        java.lang.String $r1, r2, $r7, $r12;
        kotlin.text.MatchResult r3, $r10;
        java.lang.CharSequence $r4, $r8;
        kotlin.sequences.Sequence $r5;
        java.lang.Object $r6;
        kotlin.text.Regex $r9;
        kotlin.ranges.IntRange $r11;
        int $i0, $i1;

        r0 := @this: androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector;

        $r1 := @parameter0: java.lang.String;

        $r4 = (java.lang.CharSequence) $r1;

        $r5 = staticinvoke <kotlin.text.StringsKt: kotlin.sequences.Sequence lineSequence(java.lang.CharSequence)>($r4);

        $r6 = staticinvoke <kotlin.sequences.SequencesKt: java.lang.Object firstOrNull(kotlin.sequences.Sequence)>($r5);

        $r7 = (java.lang.String) $r6;

        if $r7 != null goto label1;

        return $r1;

     label1:
        r2 = $r7;

        $r9 = <androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector: kotlin.text.Regex KIND_REGEX>;

        $r8 = (java.lang.CharSequence) r2;

        $r10 = staticinvoke <kotlin.text.Regex: kotlin.text.MatchResult find$default(kotlin.text.Regex,java.lang.CharSequence,int,int,java.lang.Object)>($r9, $r8, 0, 2, null);

        if $r10 != null goto label2;

        return $r1;

     label2:
        r3 = $r10;

        $r11 = interfaceinvoke r3.<kotlin.text.MatchResult: kotlin.ranges.IntRange getRange()>();

        $i0 = virtualinvoke $r11.<kotlin.ranges.IntRange: int getLast()>();

        $i1 = $i0 + 1;

        $r12 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r12, "this as java.lang.String).substring(startIndex)");

        return $r12;
    }

    private final java.lang.String stripKspPrefix(java.lang.String)
    {
        androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector r0;
        java.lang.String $r1, r2, $r7, $r12;
        kotlin.text.MatchResult r3, $r10;
        java.lang.CharSequence $r4, $r8;
        kotlin.sequences.Sequence $r5;
        java.lang.Object $r6;
        kotlin.text.Regex $r9;
        kotlin.ranges.IntRange $r11;
        int $i0, $i1;

        r0 := @this: androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector;

        $r1 := @parameter0: java.lang.String;

        $r4 = (java.lang.CharSequence) $r1;

        $r5 = staticinvoke <kotlin.text.StringsKt: kotlin.sequences.Sequence lineSequence(java.lang.CharSequence)>($r4);

        $r6 = staticinvoke <kotlin.sequences.SequencesKt: java.lang.Object firstOrNull(kotlin.sequences.Sequence)>($r5);

        $r7 = (java.lang.String) $r6;

        if $r7 != null goto label1;

        return $r1;

     label1:
        r2 = $r7;

        $r9 = <androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector: kotlin.text.Regex KSP_PREFIX_REGEX>;

        $r8 = (java.lang.CharSequence) r2;

        $r10 = staticinvoke <kotlin.text.Regex: kotlin.text.MatchResult find$default(kotlin.text.Regex,java.lang.CharSequence,int,int,java.lang.Object)>($r9, $r8, 0, 2, null);

        if $r10 != null goto label2;

        return $r1;

     label2:
        r3 = $r10;

        $r11 = interfaceinvoke r3.<kotlin.text.MatchResult: kotlin.ranges.IntRange getRange()>();

        $i0 = virtualinvoke $r11.<kotlin.ranges.IntRange: int getLast()>();

        $i1 = $i0 + 1;

        $r12 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r12, "this as java.lang.String).substring(startIndex)");

        return $r12;
    }

    private final androidx.room.compiler.processing.util.compiler.steps.RawDiagnosticMessage$Location toRawLocation(org.jetbrains.kotlin.cli.common.messages.CompilerMessageSourceLocation)
    {
        androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector r0;
        org.jetbrains.kotlin.cli.common.messages.CompilerMessageSourceLocation $r1;
        int i0;
        java.lang.String r2;
        androidx.room.compiler.processing.util.compiler.steps.RawDiagnosticMessage$Location $r3;

        r0 := @this: androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector;

        $r1 := @parameter0: org.jetbrains.kotlin.cli.common.messages.CompilerMessageSourceLocation;

        i0 = interfaceinvoke $r1.<org.jetbrains.kotlin.cli.common.messages.CompilerMessageSourceLocation: int getLine()>();

        r2 = interfaceinvoke $r1.<org.jetbrains.kotlin.cli.common.messages.CompilerMessageSourceLocation: java.lang.String getPath()>();

        $r3 = new androidx.room.compiler.processing.util.compiler.steps.RawDiagnosticMessage$Location;

        specialinvoke $r3.<androidx.room.compiler.processing.util.compiler.steps.RawDiagnosticMessage$Location: void <init>(java.lang.String,int)>(r2, i0);

        return $r3;
    }

    private final javax.tools.Diagnostic$Kind getKind(org.jetbrains.kotlin.cli.common.messages.CompilerMessageSeverity)
    {
        androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector r0;
        org.jetbrains.kotlin.cli.common.messages.CompilerMessageSeverity $r1;
        int[] $r2;
        int $i0, $i1;
        javax.tools.Diagnostic$Kind $r3;

        r0 := @this: androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector;

        $r1 := @parameter0: org.jetbrains.kotlin.cli.common.messages.CompilerMessageSeverity;

        $r2 = <androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i0 = virtualinvoke $r1.<org.jetbrains.kotlin.cli.common.messages.CompilerMessageSeverity: int ordinal()>();

        $i1 = $r2[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label1;
            case 3: goto label2;
            case 4: goto label2;
            case 5: goto label3;
            case 6: goto label3;
            default: goto label4;
        };

     label1:
        $r3 = <javax.tools.Diagnostic$Kind: javax.tools.Diagnostic$Kind ERROR>;

        goto label5;

     label2:
        $r3 = <javax.tools.Diagnostic$Kind: javax.tools.Diagnostic$Kind NOTE>;

        goto label5;

     label3:
        $r3 = <javax.tools.Diagnostic$Kind: javax.tools.Diagnostic$Kind WARNING>;

        goto label5;

     label4:
        $r3 = <javax.tools.Diagnostic$Kind: javax.tools.Diagnostic$Kind OTHER>;

     label5:
        return $r3;
    }

    static void <clinit>()
    {
        androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector$Companion $r0;
        kotlin.text.Regex $r1, $r2, $r3, $r4;

        $r0 = new androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector$Companion;

        specialinvoke $r0.<androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector: androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector$Companion Companion> = $r0;

        $r1 = new kotlin.text.Regex;

        specialinvoke $r1.<kotlin.text.Regex: void <init>(java.lang.String)>("^(.*\\.(kt|java)):(\\d+): \\w+: ");

        <androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector: kotlin.text.Regex KAPT_LOCATION_AND_KIND_REGEX> = $r1;

        $r2 = new kotlin.text.Regex;

        specialinvoke $r2.<kotlin.text.Regex: void <init>(java.lang.String)>("^\\[ksp] (.*\\.(kt|java)):(\\d+): ");

        <androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector: kotlin.text.Regex KSP_LOCATION_REGEX> = $r2;

        $r3 = new kotlin.text.Regex;

        specialinvoke $r3.<kotlin.text.Regex: void <init>(java.lang.String)>("^\\w+: ");

        <androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector: kotlin.text.Regex KIND_REGEX> = $r3;

        $r4 = new kotlin.text.Regex;

        specialinvoke $r4.<kotlin.text.Regex: void <init>(java.lang.String)>("^\\[ksp] ");

        <androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector: kotlin.text.Regex KSP_PREFIX_REGEX> = $r4;

        return;
    }

androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector$Companion
    private void <init>()
    {
        androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector$Companion r0;

        r0 := @this: androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector$Companion: void <init>()>();

        return;
    }

androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector$WhenMappings
<androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector$WhenMappings: int[] $EnumSwitchMapping$0>
    static void <clinit>()
    {
        int[] r0;
        org.jetbrains.kotlin.cli.common.messages.CompilerMessageSeverity[] $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.jetbrains.kotlin.cli.common.messages.CompilerMessageSeverity $r2, $r3, $r4, $r5, $r6, $r7;
        java.lang.Throwable $r8, $r9, $r10, $r11, $r12, $r13, r14, r15, r16, r17, r18, r19;

        $r1 = staticinvoke <org.jetbrains.kotlin.cli.common.messages.CompilerMessageSeverity: org.jetbrains.kotlin.cli.common.messages.CompilerMessageSeverity[] values()>();

        $i0 = lengthof $r1;

        r0 = newarray (int)[$i0];

     label01:
        $r2 = <org.jetbrains.kotlin.cli.common.messages.CompilerMessageSeverity: org.jetbrains.kotlin.cli.common.messages.CompilerMessageSeverity ERROR>;

        $i1 = virtualinvoke $r2.<org.jetbrains.kotlin.cli.common.messages.CompilerMessageSeverity: int ordinal()>();

        r0[$i1] = 1;

     label02:
        goto label04;

     label03:
        $r8 := @caughtexception;

        r14 = $r8;

     label04:
        $r3 = <org.jetbrains.kotlin.cli.common.messages.CompilerMessageSeverity: org.jetbrains.kotlin.cli.common.messages.CompilerMessageSeverity EXCEPTION>;

        $i2 = virtualinvoke $r3.<org.jetbrains.kotlin.cli.common.messages.CompilerMessageSeverity: int ordinal()>();

        r0[$i2] = 2;

     label05:
        goto label07;

     label06:
        $r13 := @caughtexception;

        r15 = $r13;

     label07:
        $r4 = <org.jetbrains.kotlin.cli.common.messages.CompilerMessageSeverity: org.jetbrains.kotlin.cli.common.messages.CompilerMessageSeverity INFO>;

        $i3 = virtualinvoke $r4.<org.jetbrains.kotlin.cli.common.messages.CompilerMessageSeverity: int ordinal()>();

        r0[$i3] = 3;

     label08:
        goto label10;

     label09:
        $r9 := @caughtexception;

        r16 = $r9;

     label10:
        $r5 = <org.jetbrains.kotlin.cli.common.messages.CompilerMessageSeverity: org.jetbrains.kotlin.cli.common.messages.CompilerMessageSeverity LOGGING>;

        $i4 = virtualinvoke $r5.<org.jetbrains.kotlin.cli.common.messages.CompilerMessageSeverity: int ordinal()>();

        r0[$i4] = 4;

     label11:
        goto label13;

     label12:
        $r12 := @caughtexception;

        r17 = $r12;

     label13:
        $r6 = <org.jetbrains.kotlin.cli.common.messages.CompilerMessageSeverity: org.jetbrains.kotlin.cli.common.messages.CompilerMessageSeverity WARNING>;

        $i5 = virtualinvoke $r6.<org.jetbrains.kotlin.cli.common.messages.CompilerMessageSeverity: int ordinal()>();

        r0[$i5] = 5;

     label14:
        goto label16;

     label15:
        $r11 := @caughtexception;

        r18 = $r11;

     label16:
        $r7 = <org.jetbrains.kotlin.cli.common.messages.CompilerMessageSeverity: org.jetbrains.kotlin.cli.common.messages.CompilerMessageSeverity STRONG_WARNING>;

        $i6 = virtualinvoke $r7.<org.jetbrains.kotlin.cli.common.messages.CompilerMessageSeverity: int ordinal()>();

        r0[$i6] = 6;

     label17:
        goto label19;

     label18:
        $r10 := @caughtexception;

        r19 = $r10;

     label19:
        <androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector$WhenMappings: int[] $EnumSwitchMapping$0> = r0;

        return;

        catch java.lang.NoSuchFieldError from label01 to label02 with label03;
        catch java.lang.NoSuchFieldError from label04 to label05 with label06;
        catch java.lang.NoSuchFieldError from label07 to label08 with label09;
        catch java.lang.NoSuchFieldError from label10 to label11 with label12;
        catch java.lang.NoSuchFieldError from label13 to label14 with label15;
        catch java.lang.NoSuchFieldError from label16 to label17 with label18;
    }

