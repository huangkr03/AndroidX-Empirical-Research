androidx.media3.test.utils.CapturingRenderersFactory
<androidx.media3.test.utils.CapturingRenderersFactory: android.content.Context context>
<androidx.media3.test.utils.CapturingRenderersFactory: androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter$Factory mediaCodecAdapterFactory>
    public void <init>(android.content.Context)
    {
        androidx.media3.test.utils.CapturingRenderersFactory r0;
        android.content.Context r1;
        androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter$Factory $r2;

        r0 := @this: androidx.media3.test.utils.CapturingRenderersFactory;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.test.utils.CapturingRenderersFactory: android.content.Context context> = r1;

        $r2 = new androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter$Factory;

        specialinvoke $r2.<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter$Factory: void <init>(androidx.media3.test.utils.CapturingRenderersFactory$1)>(null);

        r0.<androidx.media3.test.utils.CapturingRenderersFactory: androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter$Factory mediaCodecAdapterFactory> = $r2;

        return;
    }

    public androidx.media3.exoplayer.Renderer[] createRenderers(android.os.Handler, androidx.media3.exoplayer.video.VideoRendererEventListener, androidx.media3.exoplayer.audio.AudioRendererEventListener, androidx.media3.exoplayer.text.TextOutput, androidx.media3.exoplayer.metadata.MetadataOutput)
    {
        androidx.media3.test.utils.CapturingRenderersFactory r0;
        android.os.Handler r1;
        androidx.media3.exoplayer.video.VideoRendererEventListener r2;
        androidx.media3.exoplayer.audio.AudioRendererEventListener r3;
        androidx.media3.exoplayer.text.TextOutput r4;
        androidx.media3.exoplayer.metadata.MetadataOutput r5;
        java.lang.Object[] $r6;
        androidx.media3.exoplayer.mediacodec.MediaCodecSelector $r8, $r15;
        androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter$Factory $r9, $r14;
        android.content.Context $r10, $r13, $r16;
        androidx.media3.exoplayer.audio.AudioCapabilities $r17;
        androidx.media3.exoplayer.audio.DefaultAudioSink$Builder $r18, r25;
        androidx.media3.exoplayer.audio.DefaultAudioSink $r19;
        android.os.Looper $r21, $r23;
        androidx.media3.exoplayer.video.MediaCodecVideoRenderer r24;
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer r26;
        androidx.media3.exoplayer.text.TextRenderer r27;
        androidx.media3.exoplayer.metadata.MetadataRenderer r28;
        androidx.media3.exoplayer.Renderer[] r29;

        r0 := @this: androidx.media3.test.utils.CapturingRenderersFactory;

        r1 := @parameter0: android.os.Handler;

        r2 := @parameter1: androidx.media3.exoplayer.video.VideoRendererEventListener;

        r3 := @parameter2: androidx.media3.exoplayer.audio.AudioRendererEventListener;

        r4 := @parameter3: androidx.media3.exoplayer.text.TextOutput;

        r5 := @parameter4: androidx.media3.exoplayer.metadata.MetadataOutput;

        $r6 = newarray (androidx.media3.exoplayer.Renderer)[4];

        r24 = new androidx.media3.exoplayer.video.MediaCodecVideoRenderer;

        $r10 = r0.<androidx.media3.test.utils.CapturingRenderersFactory: android.content.Context context>;

        $r9 = r0.<androidx.media3.test.utils.CapturingRenderersFactory: androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter$Factory mediaCodecAdapterFactory>;

        $r8 = <androidx.media3.exoplayer.mediacodec.MediaCodecSelector: androidx.media3.exoplayer.mediacodec.MediaCodecSelector DEFAULT>;

        specialinvoke r24.<androidx.media3.exoplayer.video.MediaCodecVideoRenderer: void <init>(android.content.Context,androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Factory,androidx.media3.exoplayer.mediacodec.MediaCodecSelector,long,boolean,android.os.Handler,androidx.media3.exoplayer.video.VideoRendererEventListener,int)>($r10, $r9, $r8, 5000L, 0, r1, r2, 50);

        $r6[0] = r24;

        r26 = new androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;

        $r13 = r0.<androidx.media3.test.utils.CapturingRenderersFactory: android.content.Context context>;

        $r14 = r0.<androidx.media3.test.utils.CapturingRenderersFactory: androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter$Factory mediaCodecAdapterFactory>;

        $r15 = <androidx.media3.exoplayer.mediacodec.MediaCodecSelector: androidx.media3.exoplayer.mediacodec.MediaCodecSelector DEFAULT>;

        r25 = new androidx.media3.exoplayer.audio.DefaultAudioSink$Builder;

        specialinvoke r25.<androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: void <init>()>();

        $r16 = r0.<androidx.media3.test.utils.CapturingRenderersFactory: android.content.Context context>;

        $r17 = staticinvoke <androidx.media3.exoplayer.audio.AudioCapabilities: androidx.media3.exoplayer.audio.AudioCapabilities getCapabilities(android.content.Context)>($r16);

        $r18 = virtualinvoke r25.<androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: androidx.media3.exoplayer.audio.DefaultAudioSink$Builder setAudioCapabilities(androidx.media3.exoplayer.audio.AudioCapabilities)>($r17);

        $r19 = virtualinvoke $r18.<androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: androidx.media3.exoplayer.audio.DefaultAudioSink build()>();

        specialinvoke r26.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: void <init>(android.content.Context,androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Factory,androidx.media3.exoplayer.mediacodec.MediaCodecSelector,boolean,android.os.Handler,androidx.media3.exoplayer.audio.AudioRendererEventListener,androidx.media3.exoplayer.audio.AudioSink)>($r13, $r14, $r15, 0, r1, r3, $r19);

        $r6[1] = r26;

        r27 = new androidx.media3.exoplayer.text.TextRenderer;

        $r21 = virtualinvoke r1.<android.os.Handler: android.os.Looper getLooper()>();

        specialinvoke r27.<androidx.media3.exoplayer.text.TextRenderer: void <init>(androidx.media3.exoplayer.text.TextOutput,android.os.Looper)>(r4, $r21);

        $r6[2] = r27;

        r28 = new androidx.media3.exoplayer.metadata.MetadataRenderer;

        $r23 = virtualinvoke r1.<android.os.Handler: android.os.Looper getLooper()>();

        specialinvoke r28.<androidx.media3.exoplayer.metadata.MetadataRenderer: void <init>(androidx.media3.exoplayer.metadata.MetadataOutput,android.os.Looper)>(r5, $r23);

        $r6[3] = r28;

        r29 = (androidx.media3.exoplayer.Renderer[]) $r6;

        return r29;
    }

    public void dump(androidx.media3.test.utils.Dumper)
    {
        androidx.media3.test.utils.CapturingRenderersFactory r0;
        androidx.media3.test.utils.Dumper r1;
        androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter$Factory $r2;

        r0 := @this: androidx.media3.test.utils.CapturingRenderersFactory;

        r1 := @parameter0: androidx.media3.test.utils.Dumper;

        $r2 = r0.<androidx.media3.test.utils.CapturingRenderersFactory: androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter$Factory mediaCodecAdapterFactory>;

        virtualinvoke $r2.<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter$Factory: void dump(androidx.media3.test.utils.Dumper)>(r1);

        return;
    }

androidx.media3.test.utils.CapturingRenderersFactory$1
androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter$CapturedInputBuffer
<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter$CapturedInputBuffer: byte[] contents>
    private void <init>(byte[])
    {
        androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter$CapturedInputBuffer r0;
        byte[] r1;

        r0 := @this: androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter$CapturedInputBuffer;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter$CapturedInputBuffer: byte[] contents> = r1;

        return;
    }

    void <init>(byte[], androidx.media3.test.utils.CapturingRenderersFactory$1)
    {
        androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter$CapturedInputBuffer r0;
        byte[] r1;
        androidx.media3.test.utils.CapturingRenderersFactory$1 r2;

        r0 := @this: androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter$CapturedInputBuffer;

        r1 := @parameter0: byte[];

        r2 := @parameter1: androidx.media3.test.utils.CapturingRenderersFactory$1;

        specialinvoke r0.<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter$CapturedInputBuffer: void <init>(byte[])>(r1);

        return;
    }

    static byte[] access$400(androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter$CapturedInputBuffer)
    {
        androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter$CapturedInputBuffer r0;
        byte[] $r1;

        r0 := @parameter0: androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter$CapturedInputBuffer;

        $r1 = r0.<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter$CapturedInputBuffer: byte[] contents>;

        return $r1;
    }

androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter$CapturedInteraction
androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter$Factory
<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter$Factory: java.util.List constructedAdapters>
    private void <init>()
    {
        androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter$Factory r0;
        java.util.ArrayList $r1;

        r0 := @this: androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter$Factory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter$Factory: java.util.List constructedAdapters> = $r1;

        return;
    }

    public androidx.media3.exoplayer.mediacodec.MediaCodecAdapter createAdapter(androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration) throws java.io.IOException
    {
        androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter$Factory r0;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration r1;
        androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter r2, $r3;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Factory $r4;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter $r5;
        androidx.media3.exoplayer.mediacodec.MediaCodecInfo $r6;
        java.lang.String $r7;
        java.util.List $r8;

        r0 := @this: androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter$Factory;

        r1 := @parameter0: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration;

        $r3 = new androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter;

        $r4 = <androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Factory: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Factory DEFAULT>;

        $r5 = interfaceinvoke $r4.<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Factory: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter createAdapter(androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration)>(r1);

        $r6 = r1.<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration: androidx.media3.exoplayer.mediacodec.MediaCodecInfo codecInfo>;

        $r7 = $r6.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: java.lang.String name>;

        specialinvoke $r3.<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter: void <init>(androidx.media3.exoplayer.mediacodec.MediaCodecAdapter,java.lang.String,androidx.media3.test.utils.CapturingRenderersFactory$1)>($r5, $r7, null);

        r2 = $r3;

        $r8 = r0.<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter$Factory: java.util.List constructedAdapters>;

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r2);

        return r2;
    }

    public void dump(androidx.media3.test.utils.Dumper)
    {
        androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter$Factory r0;
        androidx.media3.test.utils.Dumper r1;
        com.google.common.collect.ImmutableList r2;
        java.util.Comparator $r3;
        java.util.List $r4;
        int $i0, i1;
        java.lang.Object $r5;
        androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter $r6;

        r0 := @this: androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter$Factory;

        r1 := @parameter0: androidx.media3.test.utils.Dumper;

        $r3 = dynamicinvoke "compare" <java.util.Comparator ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: int __METHODTYPE__(java.lang.Object,java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter$Factory: int lambda$dump$0(androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter,androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter)>, methodtype: int __METHODTYPE__(androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter,androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter));

        $r4 = r0.<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter$Factory: java.util.List constructedAdapters>;

        r2 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList sortedCopyOf(java.util.Comparator,java.lang.Iterable)>($r3, $r4);

        i1 = 0;

     label1:
        $i0 = virtualinvoke r2.<com.google.common.collect.ImmutableList: int size()>();

        if i1 >= $i0 goto label2;

        $r5 = virtualinvoke r2.<com.google.common.collect.ImmutableList: java.lang.Object get(int)>(i1);

        $r6 = (androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter) $r5;

        virtualinvoke $r6.<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter: void dump(androidx.media3.test.utils.Dumper)>(r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private static int lambda$dump$0(androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter, androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter)
    {
        androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter r0, r1;
        java.lang.String $r2, $r3;
        int $i0;

        r0 := @parameter0: androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter;

        r1 := @parameter1: androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter;

        $r2 = staticinvoke <androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter: java.lang.String access$200(androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter)>(r0);

        $r3 = staticinvoke <androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter: java.lang.String access$200(androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter)>(r1);

        $i0 = virtualinvoke $r2.<java.lang.String: int compareTo(java.lang.String)>($r3);

        return $i0;
    }

    void <init>(androidx.media3.test.utils.CapturingRenderersFactory$1)
    {
        androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter$Factory r0;
        androidx.media3.test.utils.CapturingRenderersFactory$1 r1;

        r0 := @this: androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter$Factory;

        r1 := @parameter0: androidx.media3.test.utils.CapturingRenderersFactory$1;

        specialinvoke r0.<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter$Factory: void <init>()>();

        return;
    }

androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter
<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter delegate>
<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter: java.lang.String codecName>
<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter: android.util.SparseArray dequeuedInputBuffers>
<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter: java.util.List capturedInteractions>
<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter: java.util.concurrent.atomic.AtomicBoolean isReleased>
    private void <init>(androidx.media3.exoplayer.mediacodec.MediaCodecAdapter, java.lang.String)
    {
        androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter r0;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter r1;
        java.lang.String r2;
        android.util.SparseArray $r3;
        java.util.ArrayList $r4;
        java.util.concurrent.atomic.AtomicBoolean $r5;

        r0 := @this: androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter;

        r1 := @parameter0: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter delegate> = r1;

        r0.<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter: java.lang.String codecName> = r2;

        $r3 = new android.util.SparseArray;

        specialinvoke $r3.<android.util.SparseArray: void <init>()>();

        r0.<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter: android.util.SparseArray dequeuedInputBuffers> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter: java.util.List capturedInteractions> = $r4;

        $r5 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r5.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();

        r0.<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter: java.util.concurrent.atomic.AtomicBoolean isReleased> = $r5;

        return;
    }

    public int dequeueInputBufferIndex()
    {
        androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter r0;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter $r1;
        int $i0;

        r0 := @this: androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter;

        $r1 = r0.<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter delegate>;

        $i0 = interfaceinvoke $r1.<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: int dequeueInputBufferIndex()>();

        return $i0;
    }

    public int dequeueOutputBufferIndex(android.media.MediaCodec$BufferInfo)
    {
        androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter r0;
        android.media.MediaCodec$BufferInfo r1;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter $r2;
        int $i0;

        r0 := @this: androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter;

        r1 := @parameter0: android.media.MediaCodec$BufferInfo;

        $r2 = r0.<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter delegate>;

        $i0 = interfaceinvoke $r2.<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: int dequeueOutputBufferIndex(android.media.MediaCodec$BufferInfo)>(r1);

        return $i0;
    }

    public android.media.MediaFormat getOutputFormat()
    {
        androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter r0;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter $r1;
        android.media.MediaFormat $r2;

        r0 := @this: androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter;

        $r1 = r0.<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter delegate>;

        $r2 = interfaceinvoke $r1.<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: android.media.MediaFormat getOutputFormat()>();

        return $r2;
    }

    public java.nio.ByteBuffer getInputBuffer(int)
    {
        androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter r0;
        int i0;
        java.nio.ByteBuffer r1;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter $r2;
        android.util.SparseArray $r3;

        r0 := @this: androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter;

        i0 := @parameter0: int;

        $r2 = r0.<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter delegate>;

        r1 = interfaceinvoke $r2.<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: java.nio.ByteBuffer getInputBuffer(int)>(i0);

        if r1 == null goto label1;

        $r3 = r0.<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter: android.util.SparseArray dequeuedInputBuffers>;

        virtualinvoke $r3.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r1);

     label1:
        return r1;
    }

    public java.nio.ByteBuffer getOutputBuffer(int)
    {
        androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter r0;
        int i0;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter $r1;
        java.nio.ByteBuffer $r2;

        r0 := @this: androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter delegate>;

        $r2 = interfaceinvoke $r1.<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: java.nio.ByteBuffer getOutputBuffer(int)>(i0);

        return $r2;
    }

    public void queueInputBuffer(int, int, int, long, int)
    {
        androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter r0;
        int i0, i1, i2, i4;
        long l3;
        java.nio.ByteBuffer r1, $r4;
        android.util.SparseArray $r2, $r10;
        java.lang.Object $r3, $r5;
        androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter$CapturedInputBuffer $r6;
        java.util.List $r7;
        byte[] $r8;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter $r9;

        r0 := @this: androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        l3 := @parameter3: long;

        i4 := @parameter4: int;

        $r2 = r0.<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter: android.util.SparseArray dequeuedInputBuffers>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        $r4 = (java.nio.ByteBuffer) $r3;

        $r5 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r4);

        r1 = (java.nio.ByteBuffer) $r5;

        $r7 = r0.<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter: java.util.List capturedInteractions>;

        $r6 = new androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter$CapturedInputBuffer;

        $r8 = staticinvoke <androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter: byte[] peekBytes(java.nio.ByteBuffer,int,int)>(r1, i1, i2);

        specialinvoke $r6.<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter$CapturedInputBuffer: void <init>(byte[],androidx.media3.test.utils.CapturingRenderersFactory$1)>($r8, null);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r6);

        $r9 = r0.<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter delegate>;

        interfaceinvoke $r9.<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: void queueInputBuffer(int,int,int,long,int)>(i0, i1, i2, l3, i4);

        $r10 = r0.<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter: android.util.SparseArray dequeuedInputBuffers>;

        virtualinvoke $r10.<android.util.SparseArray: void delete(int)>(i0);

        return;
    }

    public void queueSecureInputBuffer(int, int, androidx.media3.decoder.CryptoInfo, long, int)
    {
        androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter r0;
        int i0, i1, i3;
        androidx.media3.decoder.CryptoInfo r1;
        long l2;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter $r2;

        r0 := @this: androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: androidx.media3.decoder.CryptoInfo;

        l2 := @parameter3: long;

        i3 := @parameter4: int;

        $r2 = r0.<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter delegate>;

        interfaceinvoke $r2.<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: void queueSecureInputBuffer(int,int,androidx.media3.decoder.CryptoInfo,long,int)>(i0, i1, r1, l2, i3);

        return;
    }

    public void releaseOutputBuffer(int, boolean)
    {
        androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter r0;
        int i0;
        boolean z0;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter $r1;

        r0 := @this: androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = r0.<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter delegate>;

        interfaceinvoke $r1.<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: void releaseOutputBuffer(int,boolean)>(i0, z0);

        return;
    }

    public void releaseOutputBuffer(int, long)
    {
        androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter r0;
        int i0;
        long l1;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter $r1;

        r0 := @this: androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        $r1 = r0.<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter delegate>;

        interfaceinvoke $r1.<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: void releaseOutputBuffer(int,long)>(i0, l1);

        return;
    }

    public void flush()
    {
        androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter r0;
        android.util.SparseArray $r1;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter $r2;

        r0 := @this: androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter;

        $r1 = r0.<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter: android.util.SparseArray dequeuedInputBuffers>;

        virtualinvoke $r1.<android.util.SparseArray: void clear()>();

        $r2 = r0.<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter delegate>;

        interfaceinvoke $r2.<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: void flush()>();

        return;
    }

    public void release()
    {
        androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter r0;
        android.util.SparseArray $r1;
        java.util.concurrent.atomic.AtomicBoolean $r2;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter $r3;

        r0 := @this: androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter;

        $r1 = r0.<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter: android.util.SparseArray dequeuedInputBuffers>;

        virtualinvoke $r1.<android.util.SparseArray: void clear()>();

        $r2 = r0.<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter: java.util.concurrent.atomic.AtomicBoolean isReleased>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        $r3 = r0.<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter delegate>;

        interfaceinvoke $r3.<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: void release()>();

        return;
    }

    public void setOnFrameRenderedListener(androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$OnFrameRenderedListener, android.os.Handler)
    {
        androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter r0;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$OnFrameRenderedListener r1;
        android.os.Handler r2;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter $r3;

        r0 := @this: androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter;

        r1 := @parameter0: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$OnFrameRenderedListener;

        r2 := @parameter1: android.os.Handler;

        $r3 = r0.<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter delegate>;

        interfaceinvoke $r3.<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: void setOnFrameRenderedListener(androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$OnFrameRenderedListener,android.os.Handler)>(r1, r2);

        return;
    }

    public void setOutputSurface(android.view.Surface)
    {
        androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter r0;
        android.view.Surface r1;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter $r2;

        r0 := @this: androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter;

        r1 := @parameter0: android.view.Surface;

        $r2 = r0.<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter delegate>;

        interfaceinvoke $r2.<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: void setOutputSurface(android.view.Surface)>(r1);

        return;
    }

    public void setParameters(android.os.Bundle)
    {
        androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter r0;
        android.os.Bundle r1;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter $r2;

        r0 := @this: androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter;

        r1 := @parameter0: android.os.Bundle;

        $r2 = r0.<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter delegate>;

        interfaceinvoke $r2.<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: void setParameters(android.os.Bundle)>(r1);

        return;
    }

    public void setVideoScalingMode(int)
    {
        androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter r0;
        int i0;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter $r1;

        r0 := @this: androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter delegate>;

        interfaceinvoke $r1.<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: void setVideoScalingMode(int)>(i0);

        return;
    }

    public android.os.PersistableBundle getMetrics()
    {
        androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter r0;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter $r1;
        android.os.PersistableBundle $r2;

        r0 := @this: androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter;

        $r1 = r0.<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter delegate>;

        $r2 = interfaceinvoke $r1.<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: android.os.PersistableBundle getMetrics()>();

        return $r2;
    }

    public void dump(androidx.media3.test.utils.Dumper)
    {
        androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter r0;
        androidx.media3.test.utils.Dumper r1;
        androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter$CapturedInputBuffer r2;
        java.util.concurrent.atomic.AtomicBoolean $r3;
        boolean $z0;
        java.lang.StringBuilder $r4, $r5, $r7, $r8, $r18, $r19, $r20, $r21;
        java.lang.String $r6, $r9, $r22;
        java.util.List $r11, $r14, $r16;
        int $i0, $i1, i2;
        java.lang.Integer $r12;
        java.lang.Object $r17;
        byte[] $r23;

        r0 := @this: androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter;

        r1 := @parameter0: androidx.media3.test.utils.Dumper;

        $r3 = r0.<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter: java.util.concurrent.atomic.AtomicBoolean isReleased>;

        $z0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z0);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MediaCodecAdapter (");

        $r6 = r0.<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter: java.lang.String codecName>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<androidx.media3.test.utils.Dumper: androidx.media3.test.utils.Dumper startBlock(java.lang.String)>($r9);

        $r11 = r0.<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter: java.util.List capturedInteractions>;

        $i0 = interfaceinvoke $r11.<java.util.List: int size()>();

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke r1.<androidx.media3.test.utils.Dumper: androidx.media3.test.utils.Dumper add(java.lang.String,java.lang.Object)>("buffers.length", $r12);

        i2 = 0;

     label1:
        $r14 = r0.<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter: java.util.List capturedInteractions>;

        $i1 = interfaceinvoke $r14.<java.util.List: int size()>();

        if i2 >= $i1 goto label2;

        $r16 = r0.<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter: java.util.List capturedInteractions>;

        $r17 = interfaceinvoke $r16.<java.util.List: java.lang.Object get(int)>(i2);

        r2 = (androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter$CapturedInputBuffer) $r17;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("buffers[");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        $r23 = staticinvoke <androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter$CapturedInputBuffer: byte[] access$400(androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter$CapturedInputBuffer)>(r2);

        virtualinvoke r1.<androidx.media3.test.utils.Dumper: androidx.media3.test.utils.Dumper add(java.lang.String,byte[])>($r22, $r23);

        i2 = i2 + 1;

        goto label1;

     label2:
        virtualinvoke r1.<androidx.media3.test.utils.Dumper: androidx.media3.test.utils.Dumper endBlock()>();

        return;
    }

    public boolean needsReconfiguration()
    {
        androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter r0;

        r0 := @this: androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter;

        return 0;
    }

    private static byte[] peekBytes(java.nio.ByteBuffer, int, int)
    {
        java.nio.ByteBuffer r0;
        int i0, i1, i2;
        byte[] r1;

        r0 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = virtualinvoke r0.<java.nio.ByteBuffer: int position()>();

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i0);

        r1 = newarray (byte)[i1];

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r1);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i2);

        return r1;
    }

    void <init>(androidx.media3.exoplayer.mediacodec.MediaCodecAdapter, java.lang.String, androidx.media3.test.utils.CapturingRenderersFactory$1)
    {
        androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter r0;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter r1;
        java.lang.String r2;
        androidx.media3.test.utils.CapturingRenderersFactory$1 r3;

        r0 := @this: androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter;

        r1 := @parameter0: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: androidx.media3.test.utils.CapturingRenderersFactory$1;

        specialinvoke r0.<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter: void <init>(androidx.media3.exoplayer.mediacodec.MediaCodecAdapter,java.lang.String)>(r1, r2);

        return;
    }

    static java.lang.String access$200(androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter)
    {
        androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter r0;
        java.lang.String $r1;

        r0 := @parameter0: androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter;

        $r1 = r0.<androidx.media3.test.utils.CapturingRenderersFactory$CapturingMediaCodecAdapter: java.lang.String codecName>;

        return $r1;
    }

