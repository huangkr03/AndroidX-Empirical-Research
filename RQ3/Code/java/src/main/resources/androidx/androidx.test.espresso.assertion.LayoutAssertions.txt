androidx.test.espresso.assertion.LayoutAssertions
    static volatile android.graphics.Rect '-$$Nest$smgetRect'(android.view.View)
    {
        android.view.View r0;
        android.graphics.Rect $r1;

        r0 := @parameter0: android.view.View;

        $r1 = staticinvoke <androidx.test.espresso.assertion.LayoutAssertions: android.graphics.Rect getRect(android.view.View)>(r0);

        return $r1;
    }

    private static android.graphics.Rect getRect(android.view.View)
    {
        android.view.View r0;
        int[] r1;
        android.graphics.Rect r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;

        r0 := @parameter0: android.view.View;

        r1 = newarray (int)[2];

        r1[0] = 0;

        r1[1] = 0;

        virtualinvoke r0.<android.view.View: void getLocationOnScreen(int[])>(r1);

        r2 = new android.graphics.Rect;

        $i0 = r1[0];

        $i1 = r1[1];

        $i2 = r1[0];

        $i3 = virtualinvoke r0.<android.view.View: int getWidth()>();

        $i4 = $i2 + $i3;

        $i5 = $i4 + -1;

        $i6 = r1[1];

        $i7 = virtualinvoke r0.<android.view.View: int getHeight()>();

        $i8 = $i6 + $i7;

        $i9 = $i8 + -1;

        specialinvoke r2.<android.graphics.Rect: void <init>(int,int,int,int)>($i0, $i1, $i5, $i9);

        return r2;
    }

    public static androidx.test.espresso.ViewAssertion noEllipsizedText()
    {
        org.hamcrest.Matcher $r0, $r1, $r2;
        androidx.test.espresso.ViewAssertion $r3;

        $r0 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher isAssignableFrom(java.lang.Class)>(class "Landroid/widget/TextView;");

        $r1 = staticinvoke <androidx.test.espresso.matcher.LayoutMatchers: org.hamcrest.Matcher hasEllipsizedText()>();

        $r2 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher not(org.hamcrest.Matcher)>($r1);

        $r3 = staticinvoke <androidx.test.espresso.assertion.ViewAssertions: androidx.test.espresso.ViewAssertion selectedDescendantsMatch(org.hamcrest.Matcher,org.hamcrest.Matcher)>($r0, $r2);

        return $r3;
    }

    public static androidx.test.espresso.ViewAssertion noMultilineButtons()
    {
        org.hamcrest.Matcher $r0, $r1, $r2;
        androidx.test.espresso.ViewAssertion $r3;

        $r0 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher isAssignableFrom(java.lang.Class)>(class "Landroid/widget/Button;");

        $r1 = staticinvoke <androidx.test.espresso.matcher.LayoutMatchers: org.hamcrest.Matcher hasMultilineText()>();

        $r2 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher not(org.hamcrest.Matcher)>($r1);

        $r3 = staticinvoke <androidx.test.espresso.assertion.ViewAssertions: androidx.test.espresso.ViewAssertion selectedDescendantsMatch(org.hamcrest.Matcher,org.hamcrest.Matcher)>($r0, $r2);

        return $r3;
    }

    public static androidx.test.espresso.ViewAssertion noOverlaps()
    {
        androidx.test.espresso.matcher.ViewMatchers$Visibility $r0;
        org.hamcrest.Matcher $r1, $r2, $r3, $r5;
        org.hamcrest.core.AnyOf $r4;
        androidx.test.espresso.ViewAssertion $r6;

        $r0 = <androidx.test.espresso.matcher.ViewMatchers$Visibility: androidx.test.espresso.matcher.ViewMatchers$Visibility VISIBLE>;

        $r1 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher withEffectiveVisibility(androidx.test.espresso.matcher.ViewMatchers$Visibility)>($r0);

        $r2 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher isAssignableFrom(java.lang.Class)>(class "Landroid/widget/TextView;");

        $r3 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher isAssignableFrom(java.lang.Class)>(class "Landroid/widget/ImageView;");

        $r4 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.core.AnyOf anyOf(org.hamcrest.Matcher,org.hamcrest.Matcher)>($r2, $r3);

        $r5 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher allOf(org.hamcrest.Matcher,org.hamcrest.Matcher)>($r1, $r4);

        $r6 = staticinvoke <androidx.test.espresso.assertion.LayoutAssertions: androidx.test.espresso.ViewAssertion noOverlaps(org.hamcrest.Matcher)>($r5);

        return $r6;
    }

    public static androidx.test.espresso.ViewAssertion noOverlaps(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0, $r3;
        androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion r1;
        java.lang.Object $r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        r1 = new androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion;

        $r2 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r3 = (org.hamcrest.Matcher) $r2;

        specialinvoke r1.<androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion: void <init>(org.hamcrest.Matcher,androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion-IA)>($r3, null);

        return r1;
    }

    private void <init>()
    {
        androidx.test.espresso.assertion.LayoutAssertions r0;

        r0 := @this: androidx.test.espresso.assertion.LayoutAssertions;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion$1
<androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion$1: androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion this$0>
    void <init>(androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion)
    {
        androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion$1 r0;
        androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion r1;

        r0 := @this: androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion$1;

        r1 := @parameter0: androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion;

        r0.<androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion$1: androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean apply(android.view.View)
    {
        androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion$1 r0;
        android.view.View r1;
        androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion $r2;
        org.hamcrest.Matcher $r3;
        boolean $z0;

        r0 := @this: androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion$1;

        r1 := @parameter0: android.view.View;

        $r2 = r0.<androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion$1: androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion this$0>;

        $r3 = staticinvoke <androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion: org.hamcrest.Matcher '-$$Nest$fgetselector'(androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion)>($r2);

        $z0 = interfaceinvoke $r3.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r1);

        return $z0;
    }

    public volatile boolean apply(java.lang.Object)
    {
        androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion$1 r0;
        java.lang.Object r1;
        android.view.View $r2;
        boolean $z0;

        r0 := @this: androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion$1: boolean apply(android.view.View)>($r2);

        return $z0;
    }

androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion-IA
androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion
<androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion: org.hamcrest.Matcher selector>
    public java.lang.String toString()
    {
        androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion r0;
        java.util.Locale r1;
        java.lang.Object[] r2;
        org.hamcrest.Matcher $r3;
        java.lang.String $r4;

        r0 := @this: androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion;

        r1 = <java.util.Locale: java.util.Locale ROOT>;

        r2 = newarray (java.lang.Object)[1];

        $r3 = r0.<androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion: org.hamcrest.Matcher selector>;

        r2[0] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(r1, "NoOverlapsViewAssertion{selector=%s}", r2);

        return $r4;
    }

    static volatile org.hamcrest.Matcher '-$$Nest$fgetselector'(androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion)
    {
        androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion r0;
        org.hamcrest.Matcher $r1;

        r0 := @parameter0: androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion;

        $r1 = r0.<androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion: org.hamcrest.Matcher selector>;

        return $r1;
    }

    private void <init>(org.hamcrest.Matcher)
    {
        androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion r0;
        org.hamcrest.Matcher r1;

        r0 := @this: androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion;

        r1 := @parameter0: org.hamcrest.Matcher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion: org.hamcrest.Matcher selector> = r1;

        return;
    }

    void <init>(org.hamcrest.Matcher, androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion-IA)
    {
        androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion r0;
        org.hamcrest.Matcher r1;
        androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion-IA r2;

        r0 := @this: androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion-IA;

        specialinvoke r0.<androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion: void <init>(org.hamcrest.Matcher)>(r1);

        return;
    }

    public void check(android.view.View, androidx.test.espresso.NoMatchingViewException)
    {
        android.view.View r0, r15, r21;
        java.lang.Iterable $r1, $r2;
        int $i0, $i1, $i2;
        java.lang.String $r3, $r7, $r8, $r9;
        java.lang.Object $r4, $r5;
        boolean $z0, $z1, $z3, $z4, $z5, $z6, $z7;
        android.graphics.Rect $r6, r22;
        android.widget.TextView $r12;
        java.lang.CharSequence $r13;
        androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion r14;
        androidx.test.espresso.NoMatchingViewException r16;
        androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion$1 r17, r27;
        java.util.Iterator r18, r23;
        java.util.LinkedList r19, r28;
        java.lang.StringBuilder r20, r29;
        java.util.Locale r24;
        java.lang.Object[] r25;
        junit.framework.AssertionFailedError r26, r30;
        java.lang.Throwable r31;
        java.util.List r32, r33;

        r14 := @this: androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion;

        r15 := @parameter0: android.view.View;

        r16 := @parameter1: androidx.test.espresso.NoMatchingViewException;

        r27 = new androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion$1;

        r17 = r27;

        specialinvoke r27.<androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion$1: void <init>(androidx.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion)>(r14);

        if r16 == null goto label1;

        r31 = (java.lang.Throwable) r16;

        throw r31;

     label1:
        $r1 = staticinvoke <androidx.test.espresso.util.TreeIterables: java.lang.Iterable breadthFirstViewTraversal(android.view.View)>(r15);

        $r2 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.collect.Iterables: java.lang.Iterable filter(java.lang.Iterable,androidx.test.espresso.core.internal.deps.guava.base.Predicate)>($r1, r17);

        r18 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

        r28 = new java.util.LinkedList;

        r19 = r28;

        specialinvoke r28.<java.util.LinkedList: void <init>()>();

        r29 = new java.lang.StringBuilder;

        r20 = r29;

        specialinvoke r29.<java.lang.StringBuilder: void <init>()>();

     label2:
        $z6 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label8;

        $r4 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>();

        r21 = (android.view.View) $r4;

        r22 = staticinvoke <androidx.test.espresso.assertion.LayoutAssertions: android.graphics.Rect '-$$Nest$smgetRect'(android.view.View)>(r21);

        $z0 = virtualinvoke r22.<android.graphics.Rect: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $z1 = r21 instanceof android.widget.TextView;

        if $z1 == 0 goto label3;

        $r12 = (android.widget.TextView) r21;

        $r13 = virtualinvoke $r12.<android.widget.TextView: java.lang.CharSequence getText()>();

        $i2 = interfaceinvoke $r13.<java.lang.CharSequence: int length()>();

        if $i2 == 0 goto label2;

     label3:
        r32 = (java.util.List) r19;

        r23 = interfaceinvoke r32.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z7 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label7;

        $r5 = interfaceinvoke r23.<java.util.Iterator: java.lang.Object next()>();

        r0 = (android.view.View) $r5;

        $z3 = r21 instanceof android.widget.ImageView;

        if $z3 == 0 goto label5;

        $z5 = r0 instanceof android.widget.ImageView;

        if $z5 != 0 goto label4;

     label5:
        $r6 = staticinvoke <androidx.test.espresso.assertion.LayoutAssertions: android.graphics.Rect '-$$Nest$smgetRect'(android.view.View)>(r0);

        $z4 = staticinvoke <android.graphics.Rect: boolean intersects(android.graphics.Rect,android.graphics.Rect)>(r22, $r6);

        if $z4 == 0 goto label4;

        $i1 = virtualinvoke r20.<java.lang.StringBuilder: int length()>();

        if $i1 <= 0 goto label6;

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",\n\n");

     label6:
        r24 = <java.util.Locale: java.util.Locale ROOT>;

        r25 = newarray (java.lang.Object)[2];

        $r7 = staticinvoke <androidx.test.espresso.util.HumanReadables: java.lang.String describe(android.view.View)>(r21);

        r25[0] = $r7;

        $r8 = staticinvoke <androidx.test.espresso.util.HumanReadables: java.lang.String describe(android.view.View)>(r0);

        r25[1] = $r8;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(r24, "%s overlaps\n%s", r25);

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

     label7:
        r33 = (java.util.List) r19;

        interfaceinvoke r33.<java.util.List: boolean add(java.lang.Object)>(r21);

        goto label2;

     label8:
        $i0 = virtualinvoke r20.<java.lang.StringBuilder: int length()>();

        if $i0 <= 0 goto label9;

        r30 = new junit.framework.AssertionFailedError;

        r26 = r30;

        $r3 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r30.<junit.framework.AssertionFailedError: void <init>(java.lang.String)>($r3);

        throw r26;

     label9:
        return;
    }

