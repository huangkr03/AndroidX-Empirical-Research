androidx.camera.video.internal.encoder.EncoderImpl
<androidx.camera.video.internal.encoder.EncoderImpl: boolean DEBUG>
<androidx.camera.video.internal.encoder.EncoderImpl: long NO_LIMIT_LONG>
<androidx.camera.video.internal.encoder.EncoderImpl: android.util.Range NO_RANGE>
<androidx.camera.video.internal.encoder.EncoderImpl: long STOP_TIMEOUT_MS>
<androidx.camera.video.internal.encoder.EncoderImpl: long TIMESTAMP_ANY>
<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.String mTag>
<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.Object mLock>
<androidx.camera.video.internal.encoder.EncoderImpl: boolean mIsVideoEncoder>
<androidx.camera.video.internal.encoder.EncoderImpl: android.media.MediaFormat mMediaFormat>
<androidx.camera.video.internal.encoder.EncoderImpl: android.media.MediaCodec mMediaCodec>
<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.Encoder$EncoderInput mEncoderInput>
<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.EncoderInfo mEncoderInfo>
<androidx.camera.video.internal.encoder.EncoderImpl: java.util.concurrent.Executor mEncoderExecutor>
<androidx.camera.video.internal.encoder.EncoderImpl: com.google.common.util.concurrent.ListenableFuture mReleasedFuture>
<androidx.camera.video.internal.encoder.EncoderImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mReleasedCompleter>
<androidx.camera.video.internal.encoder.EncoderImpl: java.util.Queue mFreeInputBufferIndexQueue>
<androidx.camera.video.internal.encoder.EncoderImpl: java.util.Queue mAcquisitionQueue>
<androidx.camera.video.internal.encoder.EncoderImpl: java.util.Set mInputBufferSet>
<androidx.camera.video.internal.encoder.EncoderImpl: java.util.Set mEncodedDataSet>
<androidx.camera.video.internal.encoder.EncoderImpl: java.util.Deque mActivePauseResumeTimeRanges>
<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.core.impl.Timebase mInputTimebase>
<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.TimeProvider mTimeProvider>
<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.EncoderCallback mEncoderCallback>
<androidx.camera.video.internal.encoder.EncoderImpl: java.util.concurrent.Executor mEncoderCallbackExecutor>
<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.EncoderImpl$InternalState mState>
<androidx.camera.video.internal.encoder.EncoderImpl: android.util.Range mStartStopTimeRangeUs>
<androidx.camera.video.internal.encoder.EncoderImpl: long mTotalPausedDurationUs>
<androidx.camera.video.internal.encoder.EncoderImpl: boolean mPendingCodecStop>
<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.Long mLastDataStopTimestamp>
<androidx.camera.video.internal.encoder.EncoderImpl: java.util.concurrent.Future mStopTimeoutFuture>
<androidx.camera.video.internal.encoder.EncoderImpl: boolean mIsFlushedAfterEndOfStream>
<androidx.camera.video.internal.encoder.EncoderImpl: boolean mSourceStoppedSignalled>
<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.workaround.EncoderFinder mEncoderFinder>
    public void <init>(java.util.concurrent.Executor, androidx.camera.video.internal.encoder.EncoderConfig) throws androidx.camera.video.internal.encoder.InvalidConfigException
    {
        androidx.camera.video.internal.encoder.EncoderImpl r0;
        java.util.concurrent.Executor r1, $r11, $r16;
        androidx.camera.video.internal.encoder.EncoderConfig r2;
        androidx.camera.video.internal.encoder.EncoderCallback $r10;
        android.util.Range $r12;
        boolean $z0, $z1, $z2;
        androidx.camera.core.impl.Timebase $r19, $r23;
        java.lang.String $r21, $r25, $r28, $r32, $r37, $r40, $r42, $r45;
        java.lang.StringBuilder $r22, $r24, $r29, $r31, $r38, $r41, r72, r73, r74;
        android.media.MediaFormat $r26, $r30, $r33;
        androidx.camera.video.internal.workaround.EncoderFinder $r34, r68;
        android.media.MediaCodec $r35, $r39, $r43;
        android.media.MediaCodecInfo $r44;
        androidx.camera.video.internal.encoder.EncoderInfo $r46;
        androidx.concurrent.futures.CallbackToFutureAdapter$Resolver $r48;
        com.google.common.util.concurrent.ListenableFuture $r49, $r50;
        java.lang.Object $r51, $r53, r61;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer $r52, $r54;
        androidx.camera.video.internal.encoder.EncoderImpl$InternalState $r55;
        java.lang.Throwable $r57, r59, r77, r78;
        java.util.concurrent.atomic.AtomicReference r60, r76;
        java.util.ArrayDeque r62, r63, r66;
        java.util.HashSet r64, r65;
        androidx.camera.video.internal.encoder.SystemTimeProvider r67;
        androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput r69;
        androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput r70;
        androidx.camera.video.internal.encoder.InvalidConfigException r71, r75;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: androidx.camera.video.internal.encoder.EncoderConfig;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r61 = new java.lang.Object;

        specialinvoke r61.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.Object mLock> = r61;

        r62 = new java.util.ArrayDeque;

        specialinvoke r62.<java.util.ArrayDeque: void <init>()>();

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.Queue mFreeInputBufferIndexQueue> = r62;

        r63 = new java.util.ArrayDeque;

        specialinvoke r63.<java.util.ArrayDeque: void <init>()>();

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.Queue mAcquisitionQueue> = r63;

        r64 = new java.util.HashSet;

        specialinvoke r64.<java.util.HashSet: void <init>()>();

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.Set mInputBufferSet> = r64;

        r65 = new java.util.HashSet;

        specialinvoke r65.<java.util.HashSet: void <init>()>();

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.Set mEncodedDataSet> = r65;

        r66 = new java.util.ArrayDeque;

        specialinvoke r66.<java.util.ArrayDeque: void <init>()>();

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.Deque mActivePauseResumeTimeRanges> = r66;

        r67 = new androidx.camera.video.internal.encoder.SystemTimeProvider;

        specialinvoke r67.<androidx.camera.video.internal.encoder.SystemTimeProvider: void <init>()>();

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.TimeProvider mTimeProvider> = r67;

        $r10 = <androidx.camera.video.internal.encoder.EncoderCallback: androidx.camera.video.internal.encoder.EncoderCallback EMPTY>;

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.EncoderCallback mEncoderCallback> = $r10;

        $r11 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor directExecutor()>();

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.concurrent.Executor mEncoderCallbackExecutor> = $r11;

        $r12 = <androidx.camera.video.internal.encoder.EncoderImpl: android.util.Range NO_RANGE>;

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: android.util.Range mStartStopTimeRangeUs> = $r12;

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: long mTotalPausedDurationUs> = 0L;

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: boolean mPendingCodecStop> = 0;

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.Long mLastDataStopTimestamp> = null;

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.concurrent.Future mStopTimeoutFuture> = null;

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: boolean mIsFlushedAfterEndOfStream> = 0;

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: boolean mSourceStoppedSignalled> = 0;

        r68 = new androidx.camera.video.internal.workaround.EncoderFinder;

        specialinvoke r68.<androidx.camera.video.internal.workaround.EncoderFinder: void <init>()>();

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.workaround.EncoderFinder mEncoderFinder> = r68;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r16 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor newSequentialExecutor(java.util.concurrent.Executor)>(r1);

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.concurrent.Executor mEncoderExecutor> = $r16;

        $z0 = r2 instanceof androidx.camera.video.internal.encoder.AudioEncoderConfig;

        if $z0 == 0 goto label1;

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.String mTag> = "AudioEncoder";

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: boolean mIsVideoEncoder> = 0;

        r69 = new androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput;

        specialinvoke r69.<androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput: void <init>(androidx.camera.video.internal.encoder.EncoderImpl)>(r0);

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.Encoder$EncoderInput mEncoderInput> = r69;

        goto label3;

     label1:
        $z1 = r2 instanceof androidx.camera.video.internal.encoder.VideoEncoderConfig;

        if $z1 == 0 goto label2;

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.String mTag> = "VideoEncoder";

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: boolean mIsVideoEncoder> = 1;

        r70 = new androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput;

        specialinvoke r70.<androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput: void <init>(androidx.camera.video.internal.encoder.EncoderImpl)>(r0);

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.Encoder$EncoderInput mEncoderInput> = r70;

        goto label3;

     label2:
        r71 = new androidx.camera.video.internal.encoder.InvalidConfigException;

        specialinvoke r71.<androidx.camera.video.internal.encoder.InvalidConfigException: void <init>(java.lang.String)>("Unknown encoder config type");

        r77 = (java.lang.Throwable) r71;

        throw r77;

     label3:
        $r19 = interfaceinvoke r2.<androidx.camera.video.internal.encoder.EncoderConfig: androidx.camera.core.impl.Timebase getInputTimebase()>();

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.core.impl.Timebase mInputTimebase> = $r19;

        $r21 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.String mTag>;

        r72 = new java.lang.StringBuilder;

        specialinvoke r72.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mInputTimebase = ");

        $r23 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.core.impl.Timebase mInputTimebase>;

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>($r21, $r25);

        $r26 = interfaceinvoke r2.<androidx.camera.video.internal.encoder.EncoderConfig: android.media.MediaFormat toMediaFormat()>();

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: android.media.MediaFormat mMediaFormat> = $r26;

        $r28 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.String mTag>;

        r73 = new java.lang.StringBuilder;

        specialinvoke r73.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mMediaFormat = ");

        $r30 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: android.media.MediaFormat mMediaFormat>;

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>($r28, $r32);

        $r34 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.workaround.EncoderFinder mEncoderFinder>;

        $r33 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: android.media.MediaFormat mMediaFormat>;

        $r35 = virtualinvoke $r34.<androidx.camera.video.internal.workaround.EncoderFinder: android.media.MediaCodec findEncoder(android.media.MediaFormat)>($r33);

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: android.media.MediaCodec mMediaCodec> = $r35;

        $r37 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.String mTag>;

        r74 = new java.lang.StringBuilder;

        specialinvoke r74.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Selected encoder: ");

        $r39 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: android.media.MediaCodec mMediaCodec>;

        $r40 = virtualinvoke $r39.<android.media.MediaCodec: java.lang.String getName()>();

        $r41 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void i(java.lang.String,java.lang.String)>($r37, $r42);

        $z2 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: boolean mIsVideoEncoder>;

        $r43 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: android.media.MediaCodec mMediaCodec>;

        $r44 = virtualinvoke $r43.<android.media.MediaCodec: android.media.MediaCodecInfo getCodecInfo()>();

        $r45 = interfaceinvoke r2.<androidx.camera.video.internal.encoder.EncoderConfig: java.lang.String getMimeType()>();

        $r46 = staticinvoke <androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.EncoderInfo createEncoderInfo(boolean,android.media.MediaCodecInfo,java.lang.String)>($z2, $r44, $r45);

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.EncoderInfo mEncoderInfo> = $r46;

     label4:
        specialinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl: void reset()>();

     label5:
        goto label7;

     label6:
        $r57 := @caughtexception;

        r59 = $r57;

        r75 = new androidx.camera.video.internal.encoder.InvalidConfigException;

        specialinvoke r75.<androidx.camera.video.internal.encoder.InvalidConfigException: void <init>(java.lang.Throwable)>(r59);

        r78 = (java.lang.Throwable) r75;

        throw r78;

     label7:
        r76 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke r76.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        r60 = r76;

        $r48 = dynamicinvoke "attachCompleter" <androidx.concurrent.futures.CallbackToFutureAdapter$Resolver (java.util.concurrent.atomic.AtomicReference)>(r60) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.video.internal.encoder.EncoderImpl: java.lang.Object lambda$new$0(java.util.concurrent.atomic.AtomicReference,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer));

        $r49 = staticinvoke <androidx.concurrent.futures.CallbackToFutureAdapter: com.google.common.util.concurrent.ListenableFuture getFuture(androidx.concurrent.futures.CallbackToFutureAdapter$Resolver)>($r48);

        $r50 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture nonCancellationPropagating(com.google.common.util.concurrent.ListenableFuture)>($r49);

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: com.google.common.util.concurrent.ListenableFuture mReleasedFuture> = $r50;

        $r51 = virtualinvoke r60.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r52 = (androidx.concurrent.futures.CallbackToFutureAdapter$Completer) $r51;

        $r53 = staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r52);

        $r54 = (androidx.concurrent.futures.CallbackToFutureAdapter$Completer) $r53;

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mReleasedCompleter> = $r54;

        $r55 = <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState CONFIGURED>;

        specialinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl: void setState(androidx.camera.video.internal.encoder.EncoderImpl$InternalState)>($r55);

        return;

        catch android.media.MediaCodec$CodecException from label4 to label5 with label6;
    }

    private void reset()
    {
        androidx.camera.video.internal.encoder.EncoderImpl r0;
        java.util.Iterator r1;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r2;
        android.util.Range $r3;
        java.util.Deque $r4;
        java.util.Queue $r5, $r6, $r7;
        boolean $z0, $z1;
        android.media.MediaCodec $r8, $r11, $r13;
        java.util.concurrent.Future $r9, $r17;
        androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback $r10;
        android.media.MediaFormat $r12;
        androidx.camera.video.internal.encoder.Encoder$EncoderInput $r14, $r15;
        androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput $r16;
        java.lang.Object $r18;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl;

        $r3 = <androidx.camera.video.internal.encoder.EncoderImpl: android.util.Range NO_RANGE>;

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: android.util.Range mStartStopTimeRangeUs> = $r3;

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: long mTotalPausedDurationUs> = 0L;

        $r4 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.Deque mActivePauseResumeTimeRanges>;

        interfaceinvoke $r4.<java.util.Deque: void clear()>();

        $r5 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.Queue mFreeInputBufferIndexQueue>;

        interfaceinvoke $r5.<java.util.Queue: void clear()>();

        $r6 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.Queue mAcquisitionQueue>;

        r1 = interfaceinvoke $r6.<java.util.Queue: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r18 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (androidx.concurrent.futures.CallbackToFutureAdapter$Completer) $r18;

        virtualinvoke r2.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean setCancelled()>();

        goto label1;

     label2:
        $r7 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.Queue mAcquisitionQueue>;

        interfaceinvoke $r7.<java.util.Queue: void clear()>();

        $r8 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: android.media.MediaCodec mMediaCodec>;

        virtualinvoke $r8.<android.media.MediaCodec: void reset()>();

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: boolean mIsFlushedAfterEndOfStream> = 0;

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: boolean mSourceStoppedSignalled> = 0;

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: boolean mPendingCodecStop> = 0;

        $r9 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.concurrent.Future mStopTimeoutFuture>;

        if $r9 == null goto label3;

        $r17 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.concurrent.Future mStopTimeoutFuture>;

        interfaceinvoke $r17.<java.util.concurrent.Future: boolean cancel(boolean)>(1);

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.concurrent.Future mStopTimeoutFuture> = null;

     label3:
        $r11 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: android.media.MediaCodec mMediaCodec>;

        $r10 = new androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback;

        specialinvoke $r10.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: void <init>(androidx.camera.video.internal.encoder.EncoderImpl)>(r0);

        virtualinvoke $r11.<android.media.MediaCodec: void setCallback(android.media.MediaCodec$Callback)>($r10);

        $r13 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: android.media.MediaCodec mMediaCodec>;

        $r12 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: android.media.MediaFormat mMediaFormat>;

        virtualinvoke $r13.<android.media.MediaCodec: void configure(android.media.MediaFormat,android.view.Surface,android.media.MediaCrypto,int)>($r12, null, null, 1);

        $r14 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.Encoder$EncoderInput mEncoderInput>;

        $z1 = $r14 instanceof androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput;

        if $z1 == 0 goto label4;

        $r15 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.Encoder$EncoderInput mEncoderInput>;

        $r16 = (androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput) $r15;

        virtualinvoke $r16.<androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput: void resetSurface()>();

     label4:
        return;
    }

    public androidx.camera.video.internal.encoder.Encoder$EncoderInput getInput()
    {
        androidx.camera.video.internal.encoder.EncoderImpl r0;
        androidx.camera.video.internal.encoder.Encoder$EncoderInput $r1;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl;

        $r1 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.Encoder$EncoderInput mEncoderInput>;

        return $r1;
    }

    public androidx.camera.video.internal.encoder.EncoderInfo getEncoderInfo()
    {
        androidx.camera.video.internal.encoder.EncoderImpl r0;
        androidx.camera.video.internal.encoder.EncoderInfo $r1;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl;

        $r1 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.EncoderInfo mEncoderInfo>;

        return $r1;
    }

    public void start()
    {
        androidx.camera.video.internal.encoder.EncoderImpl r0;
        long l0;
        java.util.concurrent.Executor $r1;
        java.lang.Runnable $r2;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl;

        l0 = virtualinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl: long generatePresentationTimeUs()>();

        $r1 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.concurrent.Executor mEncoderExecutor>;

        $r2 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.video.internal.encoder.EncoderImpl,long)>(r0, l0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.video.internal.encoder.EncoderImpl: void lambda$start$1(long)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r2);

        return;
    }

    public void stop()
    {
        androidx.camera.video.internal.encoder.EncoderImpl r0;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl;

        virtualinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl: void stop(long)>(-1L);

        return;
    }

    public void stop(long)
    {
        androidx.camera.video.internal.encoder.EncoderImpl r0;
        long l0, l1;
        java.util.concurrent.Executor $r1;
        java.lang.Runnable $r2;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl;

        l0 := @parameter0: long;

        l1 = virtualinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl: long generatePresentationTimeUs()>();

        $r1 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.concurrent.Executor mEncoderExecutor>;

        $r2 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.video.internal.encoder.EncoderImpl,long,long)>(r0, l0, l1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.video.internal.encoder.EncoderImpl: void lambda$stop$4(long,long)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r2);

        return;
    }

    void signalCodecStop()
    {
        androidx.camera.video.internal.encoder.EncoderImpl r0;
        java.util.Iterator r1;
        androidx.camera.video.internal.encoder.InputBuffer r2;
        androidx.camera.video.internal.encoder.Encoder$EncoderInput $r3, $r4, $r6;
        boolean $z0, $z1, $z2;
        android.media.MediaCodec $r5;
        androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput $r7;
        java.util.ArrayList $r8, r16;
        java.util.Set $r9;
        com.google.common.util.concurrent.ListenableFuture $r10, $r14;
        java.lang.Runnable $r11;
        java.util.concurrent.Executor $r12;
        java.lang.Object $r13;
        java.lang.Throwable $r15, r17;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl;

        $r3 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.Encoder$EncoderInput mEncoderInput>;

        $z0 = $r3 instanceof androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput;

        if $z0 == 0 goto label3;

        $r6 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.Encoder$EncoderInput mEncoderInput>;

        $r7 = (androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput) $r6;

        virtualinvoke $r7.<androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput: void setActive(boolean)>(0);

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r16 = $r8;

        $r9 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.Set mInputBufferSet>;

        r1 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        $r13 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (androidx.camera.video.internal.encoder.InputBuffer) $r13;

        $r14 = interfaceinvoke r2.<androidx.camera.video.internal.encoder.InputBuffer: com.google.common.util.concurrent.ListenableFuture getTerminationFuture()>();

        interfaceinvoke r16.<java.util.List: boolean add(java.lang.Object)>($r14);

        goto label1;

     label2:
        $r10 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture successfulAsList(java.util.Collection)>(r16);

        $r11 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.video.internal.encoder.EncoderImpl)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.video.internal.encoder.EncoderImpl: void signalEndOfInputStream()>, methodtype: void __METHODTYPE__());

        $r12 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.concurrent.Executor mEncoderExecutor>;

        interfaceinvoke $r10.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r11, $r12);

        goto label7;

     label3:
        $r4 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.Encoder$EncoderInput mEncoderInput>;

        $z1 = $r4 instanceof androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput;

        if $z1 == 0 goto label7;

     label4:
        $r5 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: android.media.MediaCodec mMediaCodec>;

        virtualinvoke $r5.<android.media.MediaCodec: void signalEndOfInputStream()>();

     label5:
        goto label7;

     label6:
        $r15 := @caughtexception;

        r17 = $r15;

        virtualinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl: void handleEncodeError(android.media.MediaCodec$CodecException)>(r17);

     label7:
        return;

        catch android.media.MediaCodec$CodecException from label4 to label5 with label6;
    }

    public void pause()
    {
        androidx.camera.video.internal.encoder.EncoderImpl r0;
        long l0;
        java.util.concurrent.Executor $r1;
        java.lang.Runnable $r2;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl;

        l0 = virtualinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl: long generatePresentationTimeUs()>();

        $r1 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.concurrent.Executor mEncoderExecutor>;

        $r2 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.video.internal.encoder.EncoderImpl,long)>(r0, l0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.video.internal.encoder.EncoderImpl: void lambda$pause$5(long)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r2);

        return;
    }

    public void release()
    {
        androidx.camera.video.internal.encoder.EncoderImpl r0;
        java.util.concurrent.Executor $r1;
        java.lang.Runnable $r2;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl;

        $r1 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.concurrent.Executor mEncoderExecutor>;

        $r2 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.video.internal.encoder.EncoderImpl)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.video.internal.encoder.EncoderImpl: void lambda$release$6()>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r2);

        return;
    }

    public com.google.common.util.concurrent.ListenableFuture getReleasedFuture()
    {
        androidx.camera.video.internal.encoder.EncoderImpl r0;
        com.google.common.util.concurrent.ListenableFuture $r1;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl;

        $r1 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: com.google.common.util.concurrent.ListenableFuture mReleasedFuture>;

        return $r1;
    }

    public void signalSourceStopped()
    {
        androidx.camera.video.internal.encoder.EncoderImpl r0;
        java.util.concurrent.Executor $r1;
        java.lang.Runnable $r2;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl;

        $r1 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.concurrent.Executor mEncoderExecutor>;

        $r2 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.video.internal.encoder.EncoderImpl)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.video.internal.encoder.EncoderImpl: void lambda$signalSourceStopped$7()>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r2);

        return;
    }

    private void releaseInternal()
    {
        androidx.camera.video.internal.encoder.EncoderImpl r0;
        boolean $z0, $z1;
        android.media.MediaCodec $r1, $r7;
        androidx.camera.video.internal.encoder.Encoder$EncoderInput $r2, $r5;
        androidx.camera.video.internal.encoder.EncoderImpl$InternalState $r3;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer $r4;
        androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput $r6;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl;

        $z0 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: boolean mIsFlushedAfterEndOfStream>;

        if $z0 == 0 goto label1;

        $r7 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: android.media.MediaCodec mMediaCodec>;

        virtualinvoke $r7.<android.media.MediaCodec: void stop()>();

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: boolean mIsFlushedAfterEndOfStream> = 0;

     label1:
        $r1 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: android.media.MediaCodec mMediaCodec>;

        virtualinvoke $r1.<android.media.MediaCodec: void release()>();

        $r2 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.Encoder$EncoderInput mEncoderInput>;

        $z1 = $r2 instanceof androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput;

        if $z1 == 0 goto label2;

        $r5 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.Encoder$EncoderInput mEncoderInput>;

        $r6 = (androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput) $r5;

        virtualinvoke $r6.<androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput: void releaseSurface()>();

     label2:
        $r3 = <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState RELEASED>;

        specialinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl: void setState(androidx.camera.video.internal.encoder.EncoderImpl$InternalState)>($r3);

        $r4 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mReleasedCompleter>;

        virtualinvoke $r4.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean set(java.lang.Object)>(null);

        return;
    }

    public void setEncoderCallback(androidx.camera.video.internal.encoder.EncoderCallback, java.util.concurrent.Executor)
    {
        androidx.camera.video.internal.encoder.EncoderImpl r0;
        androidx.camera.video.internal.encoder.EncoderCallback r1;
        java.util.concurrent.Executor r2;
        java.lang.Object r3, $r4;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl;

        r1 := @parameter0: androidx.camera.video.internal.encoder.EncoderCallback;

        r2 := @parameter1: java.util.concurrent.Executor;

        $r4 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.Object mLock>;

        r3 = $r4;

        entermonitor $r4;

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.EncoderCallback mEncoderCallback> = r1;

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.concurrent.Executor mEncoderCallbackExecutor> = r2;

        exitmonitor r3;

        goto label1;

     label1:
        return;
    }

    public void requestKeyFrame()
    {
        androidx.camera.video.internal.encoder.EncoderImpl r0;
        java.util.concurrent.Executor $r1;
        java.lang.Runnable $r2;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl;

        $r1 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.concurrent.Executor mEncoderExecutor>;

        $r2 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.video.internal.encoder.EncoderImpl)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.video.internal.encoder.EncoderImpl: void lambda$requestKeyFrame$8()>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r2);

        return;
    }

    private void setState(androidx.camera.video.internal.encoder.EncoderImpl$InternalState)
    {
        androidx.camera.video.internal.encoder.EncoderImpl r0;
        androidx.camera.video.internal.encoder.EncoderImpl$InternalState r1, $r2, $r6;
        java.lang.StringBuilder $r3, $r5, $r7, $r8, $r9;
        java.lang.String $r4, $r10;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl;

        r1 := @parameter0: androidx.camera.video.internal.encoder.EncoderImpl$InternalState;

        $r2 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.EncoderImpl$InternalState mState>;

        if $r2 != r1 goto label1;

        return;

     label1:
        $r4 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.String mTag>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Transitioning encoder internal state: ");

        $r6 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.EncoderImpl$InternalState mState>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --> ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>($r4, $r10);

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.EncoderImpl$InternalState mState> = r1;

        return;
    }

    void setMediaCodecPaused(boolean)
    {
        androidx.camera.video.internal.encoder.EncoderImpl r0;
        boolean z0;
        android.os.Bundle r1, $r2;
        android.media.MediaCodec $r3;
        byte $b0;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl;

        z0 := @parameter0: boolean;

        $r2 = new android.os.Bundle;

        specialinvoke $r2.<android.os.Bundle: void <init>()>();

        r1 = $r2;

        if z0 == 0 goto label1;

        $b0 = 1;

        goto label2;

     label1:
        $b0 = 0;

     label2:
        virtualinvoke r1.<android.os.Bundle: void putInt(java.lang.String,int)>("drop-input-frames", $b0);

        $r3 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: android.media.MediaCodec mMediaCodec>;

        virtualinvoke $r3.<android.media.MediaCodec: void setParameters(android.os.Bundle)>(r1);

        return;
    }

    void requestKeyFrameToMediaCodec()
    {
        androidx.camera.video.internal.encoder.EncoderImpl r0;
        android.os.Bundle r1, $r2;
        android.media.MediaCodec $r3;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl;

        $r2 = new android.os.Bundle;

        specialinvoke $r2.<android.os.Bundle: void <init>()>();

        r1 = $r2;

        virtualinvoke r1.<android.os.Bundle: void putInt(java.lang.String,int)>("request-sync", 0);

        $r3 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: android.media.MediaCodec mMediaCodec>;

        virtualinvoke $r3.<android.media.MediaCodec: void setParameters(android.os.Bundle)>(r1);

        return;
    }

    private void signalEndOfInputStream()
    {
        androidx.camera.video.internal.encoder.EncoderImpl r0;
        com.google.common.util.concurrent.ListenableFuture $r1;
        androidx.camera.video.internal.encoder.EncoderImpl$1 $r2;
        java.util.concurrent.Executor $r3;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl;

        $r1 = virtualinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl: com.google.common.util.concurrent.ListenableFuture acquireInputBuffer()>();

        $r2 = new androidx.camera.video.internal.encoder.EncoderImpl$1;

        specialinvoke $r2.<androidx.camera.video.internal.encoder.EncoderImpl$1: void <init>(androidx.camera.video.internal.encoder.EncoderImpl)>(r0);

        $r3 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.concurrent.Executor mEncoderExecutor>;

        staticinvoke <androidx.camera.core.impl.utils.futures.Futures: void addCallback(com.google.common.util.concurrent.ListenableFuture,androidx.camera.core.impl.utils.futures.FutureCallback,java.util.concurrent.Executor)>($r1, $r2, $r3);

        return;
    }

    void handleEncodeError(android.media.MediaCodec$CodecException)
    {
        androidx.camera.video.internal.encoder.EncoderImpl r0;
        android.media.MediaCodec$CodecException r1;
        java.lang.String $r2;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl;

        r1 := @parameter0: android.media.MediaCodec$CodecException;

        $r2 = virtualinvoke r1.<android.media.MediaCodec$CodecException: java.lang.String getMessage()>();

        virtualinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl: void handleEncodeError(int,java.lang.String,java.lang.Throwable)>(1, $r2, r1);

        return;
    }

    void handleEncodeError(int, java.lang.String, java.lang.Throwable)
    {
        androidx.camera.video.internal.encoder.EncoderImpl r0;
        int i0, $i1, $i2;
        java.lang.String r1, $r6, $r12;
        java.lang.Throwable r2;
        androidx.camera.video.internal.encoder.EncoderImpl$InternalState $r3, $r13;
        int[] $r4;
        java.lang.StringBuilder $r5, $r7, $r8, $r9, $r10, $r11;
        java.lang.Runnable $r14;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Throwable;

        $r4 = <androidx.camera.video.internal.encoder.EncoderImpl$2: int[] $SwitchMap$androidx$camera$video$internal$encoder$EncoderImpl$InternalState>;

        $r3 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.EncoderImpl$InternalState mState>;

        $i1 = virtualinvoke $r3.<androidx.camera.video.internal.encoder.EncoderImpl$InternalState: int ordinal()>();

        $i2 = $r4[$i1];

        tableswitch($i2)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label2;
            case 4: goto label2;
            case 5: goto label2;
            case 6: goto label2;
            case 7: goto label2;
            case 8: goto label3;
            case 9: goto label4;
            default: goto label4;
        };

     label1:
        virtualinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl: void notifyError(int,java.lang.String,java.lang.Throwable)>(i0, r1, r2);

        specialinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl: void reset()>();

        goto label4;

     label2:
        $r13 = <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState ERROR>;

        specialinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl: void setState(androidx.camera.video.internal.encoder.EncoderImpl$InternalState)>($r13);

        $r14 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.video.internal.encoder.EncoderImpl,int,java.lang.String,java.lang.Throwable)>(r0, i0, r1, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.video.internal.encoder.EncoderImpl: void lambda$handleEncodeError$9(int,java.lang.String,java.lang.Throwable)>, methodtype: void __METHODTYPE__());

        virtualinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl: void stopMediaCodec(java.lang.Runnable)>($r14);

        goto label4;

     label3:
        $r6 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.String mTag>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Get more than one error: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, $r12, r2);

        goto label4;

     label4:
        return;
    }

    void notifyError(int, java.lang.String, java.lang.Throwable)
    {
        androidx.camera.video.internal.encoder.EncoderImpl r0;
        int i0;
        java.lang.String r1, $r8;
        java.lang.Throwable r2, $r7, r10;
        androidx.camera.video.internal.encoder.EncoderCallback r3;
        java.util.concurrent.Executor r4;
        java.lang.Object $r5, r9;
        java.lang.Runnable $r6;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Throwable;

        $r5 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.Object mLock>;

        r9 = $r5;

        entermonitor $r5;

        r3 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.EncoderCallback mEncoderCallback>;

        r4 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.concurrent.Executor mEncoderCallbackExecutor>;

        exitmonitor r9;

        goto label1;

     label1:
        $r6 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.video.internal.encoder.EncoderCallback,int,java.lang.String,java.lang.Throwable)>(r3, i0, r1, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.video.internal.encoder.EncoderImpl: void lambda$notifyError$10(androidx.camera.video.internal.encoder.EncoderCallback,int,java.lang.String,java.lang.Throwable)>, methodtype: void __METHODTYPE__());

        interfaceinvoke r4.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r6);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r10 = $r7;

        $r8 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.String mTag>;

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>($r8, "Unable to post to the supplied executor.", r10);

     label4:
        return;

        catch java.util.concurrent.RejectedExecutionException from label1 to label2 with label3;
    }

    void stopMediaCodec(java.lang.Runnable)
    {
        androidx.camera.video.internal.encoder.EncoderImpl r0;
        java.lang.Runnable r1, $r7;
        java.util.ArrayList r2, $r3;
        java.util.Set $r4, $r5, $r12, $r15;
        boolean $z0, $z1, $z2;
        com.google.common.util.concurrent.ListenableFuture $r6, $r19, $r21;
        java.util.concurrent.Executor $r8;
        java.lang.StringBuilder $r9, $r11, $r13, $r14, $r16;
        java.lang.String $r10, $r17;
        int $i0, $i1;
        java.lang.Object $r18, $r20;
        java.util.Iterator r22, r24;
        androidx.camera.video.internal.encoder.EncodedDataImpl r23;
        androidx.camera.video.internal.encoder.InputBuffer r25;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl;

        r1 := @parameter0: java.lang.Runnable;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r2 = $r3;

        $r4 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.Set mEncodedDataSet>;

        r22 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r20 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>();

        r23 = (androidx.camera.video.internal.encoder.EncodedDataImpl) $r20;

        $r21 = virtualinvoke r23.<androidx.camera.video.internal.encoder.EncodedDataImpl: com.google.common.util.concurrent.ListenableFuture getClosedFuture()>();

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r21);

        goto label1;

     label2:
        $r5 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.Set mInputBufferSet>;

        r24 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r18 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>();

        r25 = (androidx.camera.video.internal.encoder.InputBuffer) $r18;

        $r19 = interfaceinvoke r25.<androidx.camera.video.internal.encoder.InputBuffer: com.google.common.util.concurrent.ListenableFuture getTerminationFuture()>();

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r19);

        goto label3;

     label4:
        $z2 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>();

        if $z2 != 0 goto label5;

        $r10 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.String mTag>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Waiting for resources to return. encoded data = ");

        $r12 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.Set mEncodedDataSet>;

        $i0 = interfaceinvoke $r12.<java.util.Set: int size()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", input buffers = ");

        $r15 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.Set mInputBufferSet>;

        $i1 = interfaceinvoke $r15.<java.util.Set: int size()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>($r10, $r17);

     label5:
        $r6 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture successfulAsList(java.util.Collection)>(r2);

        $r7 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.video.internal.encoder.EncoderImpl,java.util.List,java.lang.Runnable)>(r0, r2, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.video.internal.encoder.EncoderImpl: void lambda$stopMediaCodec$11(java.util.List,java.lang.Runnable)>, methodtype: void __METHODTYPE__());

        $r8 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.concurrent.Executor mEncoderExecutor>;

        interfaceinvoke $r6.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r7, $r8);

        return;
    }

    void handleStopped()
    {
        androidx.camera.video.internal.encoder.EncoderImpl r0;
        androidx.camera.video.internal.encoder.EncoderImpl$InternalState r1, $r2, $r3, $r4, $r5, $r6, $r7;
        boolean $z0;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl;

        $r3 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.EncoderImpl$InternalState mState>;

        $r2 = <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState PENDING_RELEASE>;

        if $r3 != $r2 goto label1;

        specialinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl: void releaseInternal()>();

        goto label4;

     label1:
        r1 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.EncoderImpl$InternalState mState>;

        $z0 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: boolean mIsFlushedAfterEndOfStream>;

        if $z0 != 0 goto label2;

        specialinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl: void reset()>();

     label2:
        $r4 = <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState CONFIGURED>;

        specialinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl: void setState(androidx.camera.video.internal.encoder.EncoderImpl$InternalState)>($r4);

        $r5 = <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState PENDING_START>;

        if r1 == $r5 goto label3;

        $r7 = <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState PENDING_START_PAUSED>;

        if r1 != $r7 goto label4;

     label3:
        virtualinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl: void start()>();

        $r6 = <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState PENDING_START_PAUSED>;

        if r1 != $r6 goto label4;

        virtualinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl: void pause()>();

     label4:
        return;
    }

    void updateTotalPausedDuration(long)
    {
        androidx.camera.video.internal.encoder.EncoderImpl r0;
        long l0, $l1, $l3, $l4, $l5, $l6, $l7, $l8;
        android.util.Range r1;
        java.util.Deque $r2, $r3, $r7;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.Comparable $r5, $r9, $r11;
        java.lang.Long $r6, $r10, $r12;
        byte $b2;
        java.lang.StringBuilder $r13, $r15, $r17;
        java.lang.String $r14, $r16, $r18;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl;

        l0 := @parameter0: long;

     label1:
        $r2 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.Deque mActivePauseResumeTimeRanges>;

        $z0 = interfaceinvoke $r2.<java.util.Deque: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r3 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.Deque mActivePauseResumeTimeRanges>;

        $r4 = interfaceinvoke $r3.<java.util.Deque: java.lang.Object getFirst()>();

        r1 = (android.util.Range) $r4;

        $r5 = virtualinvoke r1.<android.util.Range: java.lang.Comparable getUpper()>();

        $r6 = (java.lang.Long) $r5;

        $l1 = virtualinvoke $r6.<java.lang.Long: long longValue()>();

        $b2 = l0 cmp $l1;

        if $b2 <= 0 goto label2;

        $r7 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.Deque mActivePauseResumeTimeRanges>;

        interfaceinvoke $r7.<java.util.Deque: java.lang.Object removeFirst()>();

        $l3 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: long mTotalPausedDurationUs>;

        $r9 = virtualinvoke r1.<android.util.Range: java.lang.Comparable getUpper()>();

        $r10 = (java.lang.Long) $r9;

        $l4 = virtualinvoke $r10.<java.lang.Long: long longValue()>();

        $r11 = virtualinvoke r1.<android.util.Range: java.lang.Comparable getLower()>();

        $r12 = (java.lang.Long) $r11;

        $l5 = virtualinvoke $r12.<java.lang.Long: long longValue()>();

        $l6 = $l4 - $l5;

        $l7 = $l3 + $l6;

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: long mTotalPausedDurationUs> = $l7;

        $r14 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.String mTag>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Total paused duration = ");

        $l8 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: long mTotalPausedDurationUs>;

        $r16 = staticinvoke <androidx.camera.video.internal.DebugUtils: java.lang.String readableUs(long)>($l8);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>($r14, $r18);

        goto label1;

     label2:
        return;
    }

    long getAdjustedTimeUs(android.media.MediaCodec$BufferInfo)
    {
        androidx.camera.video.internal.encoder.EncoderImpl r0;
        android.media.MediaCodec$BufferInfo r1;
        long $l0, $l2, $l3, l4;
        byte $b1;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl;

        r1 := @parameter0: android.media.MediaCodec$BufferInfo;

        $l0 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: long mTotalPausedDurationUs>;

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label1;

        $l3 = r1.<android.media.MediaCodec$BufferInfo: long presentationTimeUs>;

        $l2 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: long mTotalPausedDurationUs>;

        l4 = $l3 - $l2;

        goto label2;

     label1:
        l4 = r1.<android.media.MediaCodec$BufferInfo: long presentationTimeUs>;

     label2:
        return l4;
    }

    boolean isInPauseRange(long)
    {
        androidx.camera.video.internal.encoder.EncoderImpl r0;
        long l0, $l1;
        java.util.Iterator r1;
        android.util.Range r2;
        java.util.Deque $r3;
        boolean $z0, $z1;
        java.lang.Object $r4;
        java.lang.Long $r5, $r7;
        java.lang.Comparable $r6;
        byte $b2;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl;

        l0 := @parameter0: long;

        $r3 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.Deque mActivePauseResumeTimeRanges>;

        r1 = interfaceinvoke $r3.<java.util.Deque: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.util.Range) $r4;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $z1 = virtualinvoke r2.<android.util.Range: boolean contains(java.lang.Comparable)>($r5);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $r6 = virtualinvoke r2.<android.util.Range: java.lang.Comparable getLower()>();

        $r7 = (java.lang.Long) $r6;

        $l1 = virtualinvoke $r7.<java.lang.Long: long longValue()>();

        $b2 = l0 cmp $l1;

        if $b2 >= 0 goto label3;

        return 0;

     label3:
        goto label1;

     label4:
        return 0;
    }

    com.google.common.util.concurrent.ListenableFuture acquireInputBuffer()
    {
        androidx.camera.video.internal.encoder.EncoderImpl r0;
        java.util.concurrent.atomic.AtomicReference r1, $r10;
        com.google.common.util.concurrent.ListenableFuture r2, $r7, $r9, $r19;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r3, $r13;
        androidx.camera.video.internal.encoder.EncoderImpl$InternalState $r4, $r23;
        int[] $r5;
        int $i0, $i1;
        java.lang.IllegalStateException $r6, $r8, $r18, $r20;
        androidx.concurrent.futures.CallbackToFutureAdapter$Resolver $r11;
        java.lang.Object $r12, $r14;
        java.util.Queue $r15;
        java.lang.Runnable $r16;
        java.util.concurrent.Executor $r17;
        java.lang.StringBuilder $r21, $r22, $r24;
        java.lang.String $r25;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl;

        $r5 = <androidx.camera.video.internal.encoder.EncoderImpl$2: int[] $SwitchMap$androidx$camera$video$internal$encoder$EncoderImpl$InternalState>;

        $r4 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.EncoderImpl$InternalState mState>;

        $i0 = virtualinvoke $r4.<androidx.camera.video.internal.encoder.EncoderImpl$InternalState: int ordinal()>();

        $i1 = $r5[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label2;
            case 4: goto label2;
            case 5: goto label2;
            case 6: goto label2;
            case 7: goto label2;
            case 8: goto label3;
            case 9: goto label4;
            default: goto label5;
        };

     label1:
        $r18 = new java.lang.IllegalStateException;

        specialinvoke $r18.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Encoder is not started yet.");

        $r19 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFailedFuture(java.lang.Throwable)>($r18);

        return $r19;

     label2:
        $r10 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r10.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        r1 = $r10;

        $r11 = dynamicinvoke "attachCompleter" <androidx.concurrent.futures.CallbackToFutureAdapter$Resolver (java.util.concurrent.atomic.AtomicReference)>(r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.video.internal.encoder.EncoderImpl: java.lang.Object lambda$acquireInputBuffer$12(java.util.concurrent.atomic.AtomicReference,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer));

        r2 = staticinvoke <androidx.concurrent.futures.CallbackToFutureAdapter: com.google.common.util.concurrent.ListenableFuture getFuture(androidx.concurrent.futures.CallbackToFutureAdapter$Resolver)>($r11);

        $r12 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r13 = (androidx.concurrent.futures.CallbackToFutureAdapter$Completer) $r12;

        $r14 = staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r13);

        r3 = (androidx.concurrent.futures.CallbackToFutureAdapter$Completer) $r14;

        $r15 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.Queue mAcquisitionQueue>;

        interfaceinvoke $r15.<java.util.Queue: boolean offer(java.lang.Object)>(r3);

        $r16 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.video.internal.encoder.EncoderImpl,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>(r0, r3) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.video.internal.encoder.EncoderImpl: void lambda$acquireInputBuffer$13(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: void __METHODTYPE__());

        $r17 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.concurrent.Executor mEncoderExecutor>;

        virtualinvoke r3.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: void addCancellationListener(java.lang.Runnable,java.util.concurrent.Executor)>($r16, $r17);

        virtualinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl: void matchAcquisitionsAndFreeBufferIndexes()>();

        return r2;

     label3:
        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Encoder is in error state.");

        $r9 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFailedFuture(java.lang.Throwable)>($r8);

        return $r9;

     label4:
        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Encoder is released.");

        $r7 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFailedFuture(java.lang.Throwable)>($r6);

        return $r7;

     label5:
        $r20 = new java.lang.IllegalStateException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown state: ");

        $r23 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.EncoderImpl$InternalState mState>;

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r25);

        throw $r20;
    }

    void matchAcquisitionsAndFreeBufferIndexes()
    {
        androidx.camera.video.internal.encoder.EncoderImpl r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r1;
        int i0;
        androidx.camera.video.internal.encoder.InputBufferImpl r2, $r11;
        java.lang.Throwable r3, $r17;
        java.util.Queue $r4, $r5, $r6, $r8;
        boolean $z0, $z1, $z2;
        java.lang.Object $r7, $r9;
        java.lang.Integer $r10;
        android.media.MediaCodec $r12;
        java.util.Set $r13;
        com.google.common.util.concurrent.ListenableFuture $r14;
        java.lang.Runnable $r15;
        java.util.concurrent.Executor $r16;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl;

     label1:
        $r4 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.Queue mAcquisitionQueue>;

        $z0 = interfaceinvoke $r4.<java.util.Queue: boolean isEmpty()>();

        if $z0 != 0 goto label8;

        $r5 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.Queue mFreeInputBufferIndexQueue>;

        $z1 = interfaceinvoke $r5.<java.util.Queue: boolean isEmpty()>();

        if $z1 != 0 goto label8;

        $r6 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.Queue mAcquisitionQueue>;

        $r7 = interfaceinvoke $r6.<java.util.Queue: java.lang.Object poll()>();

        r1 = (androidx.concurrent.futures.CallbackToFutureAdapter$Completer) $r7;

        $r8 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.Queue mFreeInputBufferIndexQueue>;

        $r9 = interfaceinvoke $r8.<java.util.Queue: java.lang.Object poll()>();

        $r10 = (java.lang.Integer) $r9;

        i0 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

     label2:
        $r11 = new androidx.camera.video.internal.encoder.InputBufferImpl;

        $r12 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: android.media.MediaCodec mMediaCodec>;

        specialinvoke $r11.<androidx.camera.video.internal.encoder.InputBufferImpl: void <init>(android.media.MediaCodec,int)>($r12, i0);

        r2 = $r11;

     label3:
        goto label5;

     label4:
        $r17 := @caughtexception;

        r3 = $r17;

        virtualinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl: void handleEncodeError(android.media.MediaCodec$CodecException)>(r3);

        return;

     label5:
        $z2 = virtualinvoke r1.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean set(java.lang.Object)>(r2);

        if $z2 == 0 goto label6;

        $r13 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.Set mInputBufferSet>;

        interfaceinvoke $r13.<java.util.Set: boolean add(java.lang.Object)>(r2);

        $r14 = virtualinvoke r2.<androidx.camera.video.internal.encoder.InputBufferImpl: com.google.common.util.concurrent.ListenableFuture getTerminationFuture()>();

        $r15 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.video.internal.encoder.EncoderImpl,androidx.camera.video.internal.encoder.InputBufferImpl)>(r0, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.video.internal.encoder.EncoderImpl: void lambda$matchAcquisitionsAndFreeBufferIndexes$14(androidx.camera.video.internal.encoder.InputBufferImpl)>, methodtype: void __METHODTYPE__());

        $r16 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.concurrent.Executor mEncoderExecutor>;

        interfaceinvoke $r14.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r15, $r16);

        goto label7;

     label6:
        virtualinvoke r2.<androidx.camera.video.internal.encoder.InputBufferImpl: boolean cancel()>();

     label7:
        goto label1;

     label8:
        return;

        catch android.media.MediaCodec$CodecException from label2 to label3 with label4;
    }

    private static androidx.camera.video.internal.encoder.EncoderInfo createEncoderInfo(boolean, android.media.MediaCodecInfo, java.lang.String) throws androidx.camera.video.internal.encoder.InvalidConfigException
    {
        boolean z0;
        android.media.MediaCodecInfo r0;
        java.lang.String r1;
        androidx.camera.video.internal.encoder.EncoderInfoImpl $r2;
        androidx.camera.video.internal.encoder.VideoEncoderInfoImpl r3;
        androidx.camera.video.internal.encoder.AudioEncoderInfoImpl r4;

        z0 := @parameter0: boolean;

        r0 := @parameter1: android.media.MediaCodecInfo;

        r1 := @parameter2: java.lang.String;

        if z0 == 0 goto label1;

        r3 = new androidx.camera.video.internal.encoder.VideoEncoderInfoImpl;

        $r2 = r3;

        specialinvoke r3.<androidx.camera.video.internal.encoder.VideoEncoderInfoImpl: void <init>(android.media.MediaCodecInfo,java.lang.String)>(r0, r1);

        goto label2;

     label1:
        r4 = new androidx.camera.video.internal.encoder.AudioEncoderInfoImpl;

        $r2 = r4;

        specialinvoke r4.<androidx.camera.video.internal.encoder.AudioEncoderInfoImpl: void <init>(android.media.MediaCodecInfo,java.lang.String)>(r0, r1);

     label2:
        return $r2;
    }

    long generatePresentationTimeUs()
    {
        androidx.camera.video.internal.encoder.EncoderImpl r0;
        androidx.camera.video.internal.encoder.TimeProvider $r1;
        long $l0;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl;

        $r1 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.TimeProvider mTimeProvider>;

        $l0 = interfaceinvoke $r1.<androidx.camera.video.internal.encoder.TimeProvider: long uptimeUs()>();

        return $l0;
    }

    static boolean isKeyFrame(android.media.MediaCodec$BufferInfo)
    {
        android.media.MediaCodec$BufferInfo r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @parameter0: android.media.MediaCodec$BufferInfo;

        $i0 = r0.<android.media.MediaCodec$BufferInfo: int flags>;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static boolean isEndOfStream(android.media.MediaCodec$BufferInfo)
    {
        android.media.MediaCodec$BufferInfo r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @parameter0: android.media.MediaCodec$BufferInfo;

        $i0 = r0.<android.media.MediaCodec$BufferInfo: int flags>;

        $i1 = $i0 & 4;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void lambda$matchAcquisitionsAndFreeBufferIndexes$14(androidx.camera.video.internal.encoder.InputBufferImpl)
    {
        androidx.camera.video.internal.encoder.EncoderImpl r0;
        androidx.camera.video.internal.encoder.InputBufferImpl r1;
        java.util.Set $r2;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl;

        r1 := @parameter0: androidx.camera.video.internal.encoder.InputBufferImpl;

        $r2 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.Set mInputBufferSet>;

        interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        return;
    }

    private void lambda$acquireInputBuffer$13(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)
    {
        androidx.camera.video.internal.encoder.EncoderImpl r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r1;
        java.util.Queue $r2;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl;

        r1 := @parameter0: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        $r2 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.Queue mAcquisitionQueue>;

        interfaceinvoke $r2.<java.util.Queue: boolean remove(java.lang.Object)>(r1);

        return;
    }

    private static java.lang.Object lambda$acquireInputBuffer$12(java.util.concurrent.atomic.AtomicReference, androidx.concurrent.futures.CallbackToFutureAdapter$Completer) throws java.lang.Exception
    {
        java.util.concurrent.atomic.AtomicReference r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r1;

        r0 := @parameter0: java.util.concurrent.atomic.AtomicReference;

        r1 := @parameter1: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        virtualinvoke r0.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(r1);

        return "acquireInputBuffer";
    }

    private void lambda$stopMediaCodec$11(java.util.List, java.lang.Runnable)
    {
        androidx.camera.video.internal.encoder.EncoderImpl r0;
        java.util.List r1;
        java.lang.Runnable r2;
        boolean $z0, $z1, $z2;
        androidx.camera.video.internal.encoder.Encoder$EncoderInput $r3;
        android.media.MediaCodec $r4, $r5;
        java.lang.String $r6;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.lang.Runnable;

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r6 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.String mTag>;

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>($r6, "encoded data and input buffers are returned");

     label1:
        $r3 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.Encoder$EncoderInput mEncoderInput>;

        $z1 = $r3 instanceof androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput;

        if $z1 == 0 goto label2;

        $z2 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: boolean mSourceStoppedSignalled>;

        if $z2 != 0 goto label2;

        $r5 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: android.media.MediaCodec mMediaCodec>;

        virtualinvoke $r5.<android.media.MediaCodec: void flush()>();

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: boolean mIsFlushedAfterEndOfStream> = 1;

        goto label3;

     label2:
        $r4 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: android.media.MediaCodec mMediaCodec>;

        virtualinvoke $r4.<android.media.MediaCodec: void stop()>();

     label3:
        if r2 == null goto label4;

        interfaceinvoke r2.<java.lang.Runnable: void run()>();

     label4:
        virtualinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl: void handleStopped()>();

        return;
    }

    private static void lambda$notifyError$10(androidx.camera.video.internal.encoder.EncoderCallback, int, java.lang.String, java.lang.Throwable)
    {
        androidx.camera.video.internal.encoder.EncoderCallback r0;
        int i0;
        java.lang.String r1;
        java.lang.Throwable r2;
        androidx.camera.video.internal.encoder.EncodeException $r3;

        r0 := @parameter0: androidx.camera.video.internal.encoder.EncoderCallback;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.Throwable;

        $r3 = new androidx.camera.video.internal.encoder.EncodeException;

        specialinvoke $r3.<androidx.camera.video.internal.encoder.EncodeException: void <init>(int,java.lang.String,java.lang.Throwable)>(i0, r1, r2);

        interfaceinvoke r0.<androidx.camera.video.internal.encoder.EncoderCallback: void onEncodeError(androidx.camera.video.internal.encoder.EncodeException)>($r3);

        return;
    }

    private void lambda$handleEncodeError$9(int, java.lang.String, java.lang.Throwable)
    {
        androidx.camera.video.internal.encoder.EncoderImpl r0;
        int i0;
        java.lang.String r1;
        java.lang.Throwable r2;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Throwable;

        virtualinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl: void notifyError(int,java.lang.String,java.lang.Throwable)>(i0, r1, r2);

        return;
    }

    private void lambda$requestKeyFrame$8()
    {
        androidx.camera.video.internal.encoder.EncoderImpl r0;
        androidx.camera.video.internal.encoder.EncoderImpl$InternalState $r1;
        int[] $r2;
        int $i0, $i1;
        java.lang.IllegalStateException $r3;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl;

        $r2 = <androidx.camera.video.internal.encoder.EncoderImpl$2: int[] $SwitchMap$androidx$camera$video$internal$encoder$EncoderImpl$InternalState>;

        $r1 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.EncoderImpl$InternalState mState>;

        $i0 = virtualinvoke $r1.<androidx.camera.video.internal.encoder.EncoderImpl$InternalState: int ordinal()>();

        $i1 = $r2[$i0];

        tableswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label1;
            case 3: goto label2;
            case 4: goto label2;
            case 5: goto label2;
            case 6: goto label2;
            case 7: goto label3;
            case 8: goto label2;
            case 9: goto label3;
            default: goto label4;
        };

     label1:
        virtualinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl: void requestKeyFrameToMediaCodec()>();

        goto label4;

     label2:
        goto label4;

     label3:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Encoder is released");

        throw $r3;

     label4:
        return;
    }

    private void lambda$signalSourceStopped$7()
    {
        androidx.camera.video.internal.encoder.EncoderImpl r0;
        boolean $z0;
        android.media.MediaCodec $r1;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl;

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: boolean mSourceStoppedSignalled> = 1;

        $z0 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: boolean mIsFlushedAfterEndOfStream>;

        if $z0 == 0 goto label1;

        $r1 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: android.media.MediaCodec mMediaCodec>;

        virtualinvoke $r1.<android.media.MediaCodec: void stop()>();

        specialinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl: void reset()>();

     label1:
        return;
    }

    private void lambda$release$6()
    {
        androidx.camera.video.internal.encoder.EncoderImpl r0;
        androidx.camera.video.internal.encoder.EncoderImpl$InternalState $r1, $r3, $r7;
        int[] $r2;
        int $i0, $i1;
        java.lang.IllegalStateException $r4;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.String $r9;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl;

        $r2 = <androidx.camera.video.internal.encoder.EncoderImpl$2: int[] $SwitchMap$androidx$camera$video$internal$encoder$EncoderImpl$InternalState>;

        $r1 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.EncoderImpl$InternalState mState>;

        $i0 = virtualinvoke $r1.<androidx.camera.video.internal.encoder.EncoderImpl$InternalState: int ordinal()>();

        $i1 = $r2[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label1;
            case 3: goto label1;
            case 4: goto label2;
            case 5: goto label2;
            case 6: goto label2;
            case 7: goto label3;
            case 8: goto label1;
            case 9: goto label3;
            default: goto label4;
        };

     label1:
        specialinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl: void releaseInternal()>();

        goto label5;

     label2:
        $r3 = <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState PENDING_RELEASE>;

        specialinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl: void setState(androidx.camera.video.internal.encoder.EncoderImpl$InternalState)>($r3);

        goto label5;

     label3:
        goto label5;

     label4:
        $r4 = new java.lang.IllegalStateException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown state: ");

        $r7 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.EncoderImpl$InternalState mState>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label5:
        return;
    }

    private void lambda$pause$5(long)
    {
        androidx.camera.video.internal.encoder.EncoderImpl r0;
        long l0, l1;
        androidx.camera.video.internal.encoder.EncoderImpl$InternalState $r1, $r4, $r15, $r19;
        int[] $r2;
        int $i2, $i3;
        java.lang.IllegalStateException $r3, $r16;
        java.lang.StringBuilder $r5, $r7, $r9, $r17, $r18, $r20;
        java.lang.String $r6, $r8, $r10, $r21;
        java.util.Deque $r11;
        java.lang.Long $r12, $r13;
        android.util.Range $r14;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl;

        l0 := @parameter0: long;

        $r2 = <androidx.camera.video.internal.encoder.EncoderImpl$2: int[] $SwitchMap$androidx$camera$video$internal$encoder$EncoderImpl$InternalState>;

        $r1 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.EncoderImpl$InternalState mState>;

        $i2 = virtualinvoke $r1.<androidx.camera.video.internal.encoder.EncoderImpl$InternalState: int ordinal()>();

        $i3 = $r2[$i2];

        tableswitch($i3)
        {
            case 1: goto label1;
            case 2: goto label3;
            case 3: goto label1;
            case 4: goto label1;
            case 5: goto label1;
            case 6: goto label2;
            case 7: goto label4;
            case 8: goto label1;
            case 9: goto label4;
            default: goto label5;
        };

     label1:
        goto label6;

     label2:
        $r4 = <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState PENDING_START_PAUSED>;

        specialinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl: void setState(androidx.camera.video.internal.encoder.EncoderImpl$InternalState)>($r4);

        goto label6;

     label3:
        l1 = l0;

        $r6 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.String mTag>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Pause on ");

        $r8 = staticinvoke <androidx.camera.video.internal.DebugUtils: java.lang.String readableUs(long)>(l1);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>($r6, $r10);

        $r11 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.Deque mActivePauseResumeTimeRanges>;

        $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(9223372036854775807L);

        $r14 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>($r12, $r13);

        interfaceinvoke $r11.<java.util.Deque: void addLast(java.lang.Object)>($r14);

        $r15 = <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState PAUSED>;

        specialinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl: void setState(androidx.camera.video.internal.encoder.EncoderImpl$InternalState)>($r15);

        goto label6;

     label4:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Encoder is released");

        throw $r3;

     label5:
        $r16 = new java.lang.IllegalStateException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown state: ");

        $r19 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.EncoderImpl$InternalState mState>;

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r21);

        throw $r16;

     label6:
        return;
    }

    private void lambda$stop$4(long, long)
    {
        androidx.camera.video.internal.encoder.EncoderImpl r0;
        long l0, l1, l2, l8;
        androidx.camera.video.internal.encoder.EncoderImpl$InternalState r1, $r2, $r5, $r6, $r19, $r31;
        int[] $r3;
        int $i3, $i4;
        java.lang.IllegalStateException $r4, $r28;
        android.util.Range $r7, $r12;
        java.lang.Comparable $r8;
        java.lang.Long $r9, $r10, $r11, $r24;
        byte $b5, $b6, $b7, $b9;
        java.lang.StringBuilder $r13, $r15, $r17, $r29, $r30, $r32;
        java.lang.String $r14, $r16, $r18, $r26, $r33;
        java.util.concurrent.ScheduledExecutorService $r20;
        java.lang.Runnable $r21;
        java.util.concurrent.TimeUnit $r22;
        java.util.concurrent.ScheduledFuture $r23;
        java.lang.AssertionError $r25, $r27;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r3 = <androidx.camera.video.internal.encoder.EncoderImpl$2: int[] $SwitchMap$androidx$camera$video$internal$encoder$EncoderImpl$InternalState>;

        $r2 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.EncoderImpl$InternalState mState>;

        $i3 = virtualinvoke $r2.<androidx.camera.video.internal.encoder.EncoderImpl$InternalState: int ordinal()>();

        $i4 = $r3[$i3];

        tableswitch($i4)
        {
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label02;
            case 4: goto label01;
            case 5: goto label09;
            case 6: goto label09;
            case 7: goto label10;
            case 8: goto label01;
            case 9: goto label10;
            default: goto label11;
        };

     label01:
        goto label12;

     label02:
        r1 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.EncoderImpl$InternalState mState>;

        $r6 = <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState STOPPING>;

        specialinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl: void setState(androidx.camera.video.internal.encoder.EncoderImpl$InternalState)>($r6);

        $r7 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: android.util.Range mStartStopTimeRangeUs>;

        $r8 = virtualinvoke $r7.<android.util.Range: java.lang.Comparable getLower()>();

        $r9 = (java.lang.Long) $r8;

        l2 = virtualinvoke $r9.<java.lang.Long: long longValue()>();

        $b5 = l2 cmp 9223372036854775807L;

        if $b5 != 0 goto label03;

        $r27 = new java.lang.AssertionError;

        specialinvoke $r27.<java.lang.AssertionError: void <init>(java.lang.Object)>("There should be a \"start\" before \"stop\"");

        throw $r27;

     label03:
        $b6 = l0 cmp -1L;

        if $b6 != 0 goto label04;

        l8 = l1;

        goto label06;

     label04:
        $b7 = l0 cmp l2;

        if $b7 >= 0 goto label05;

        $r26 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.String mTag>;

        staticinvoke <androidx.camera.core.Logger: void w(java.lang.String,java.lang.String)>($r26, "The expected stop time is less than the start time. Use current time as stop time.");

        l8 = l1;

        goto label06;

     label05:
        l8 = l0;

     label06:
        $b9 = l8 cmp l2;

        if $b9 >= 0 goto label07;

        $r25 = new java.lang.AssertionError;

        specialinvoke $r25.<java.lang.AssertionError: void <init>(java.lang.Object)>("The start time should be before the stop time.");

        throw $r25;

     label07:
        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l8);

        $r12 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>($r10, $r11);

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: android.util.Range mStartStopTimeRangeUs> = $r12;

        $r14 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.String mTag>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Stop on ");

        $r16 = staticinvoke <androidx.camera.video.internal.DebugUtils: java.lang.String readableUs(long)>(l8);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>($r14, $r18);

        $r19 = <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState PAUSED>;

        if r1 != $r19 goto label08;

        $r24 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.Long mLastDataStopTimestamp>;

        if $r24 == null goto label08;

        virtualinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl: void signalCodecStop()>();

        goto label12;

     label08:
        r0.<androidx.camera.video.internal.encoder.EncoderImpl: boolean mPendingCodecStop> = 1;

        $r20 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.ScheduledExecutorService mainThreadExecutor()>();

        $r21 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.video.internal.encoder.EncoderImpl)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.video.internal.encoder.EncoderImpl: void lambda$stop$3()>, methodtype: void __METHODTYPE__());

        $r22 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r23 = interfaceinvoke $r20.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>($r21, 1000L, $r22);

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.concurrent.Future mStopTimeoutFuture> = $r23;

        goto label12;

     label09:
        $r5 = <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState CONFIGURED>;

        specialinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl: void setState(androidx.camera.video.internal.encoder.EncoderImpl$InternalState)>($r5);

        goto label12;

     label10:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Encoder is released");

        throw $r4;

     label11:
        $r28 = new java.lang.IllegalStateException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown state: ");

        $r31 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.EncoderImpl$InternalState mState>;

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r33);

        throw $r28;

     label12:
        return;
    }

    private void lambda$stop$3()
    {
        androidx.camera.video.internal.encoder.EncoderImpl r0;
        java.util.concurrent.Executor $r1;
        java.lang.Runnable $r2;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl;

        $r1 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.concurrent.Executor mEncoderExecutor>;

        $r2 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.video.internal.encoder.EncoderImpl)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.video.internal.encoder.EncoderImpl: void lambda$stop$2()>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r2);

        return;
    }

    private void lambda$stop$2()
    {
        androidx.camera.video.internal.encoder.EncoderImpl r0;
        boolean $z0;
        java.lang.String $r1;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl;

        $z0 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: boolean mPendingCodecStop>;

        if $z0 == 0 goto label1;

        $r1 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.String mTag>;

        staticinvoke <androidx.camera.core.Logger: void w(java.lang.String,java.lang.String)>($r1, "The data didn\'t reach the expected timestamp before timeout, stop the codec.");

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.Long mLastDataStopTimestamp> = null;

        virtualinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl: void signalCodecStop()>();

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: boolean mPendingCodecStop> = 0;

     label1:
        return;
    }

    private void lambda$start$1(long)
    {
        androidx.camera.video.internal.encoder.EncoderImpl r0;
        long l0, l1, l2, l3, $l6, $l8;
        androidx.camera.video.internal.encoder.EncoderImpl$InternalState $r1, $r4, $r8, $r26, $r32;
        int[] $r2;
        int $i4, $i5;
        java.lang.IllegalStateException $r3, $r29;
        java.util.Deque $r5, $r40;
        java.lang.Object $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        androidx.camera.video.internal.encoder.Encoder$EncoderInput $r7, $r9, $r25, $r27;
        androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput $r10, $r28;
        androidx.camera.core.impl.Quirk $r11, $r12;
        java.lang.Comparable $r13, $r38;
        java.lang.Long $r14, $r21, $r22, $r39, $r41, $r42;
        byte $b7;
        java.lang.StringBuilder $r15, $r17, $r19, $r30, $r31, $r33, $r45, $r46, $r48, $r49, $r51;
        java.lang.String $r16, $r18, $r20, $r34, $r44, $r47, $r50, $r52;
        android.util.Range $r23, r37, $r43;
        android.media.MediaCodec $r24;
        java.lang.Throwable $r35, r36;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl;

        l0 := @parameter0: long;

        $r2 = <androidx.camera.video.internal.encoder.EncoderImpl$2: int[] $SwitchMap$androidx$camera$video$internal$encoder$EncoderImpl$InternalState>;

        $r1 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.EncoderImpl$InternalState mState>;

        $i4 = virtualinvoke $r1.<androidx.camera.video.internal.encoder.EncoderImpl$InternalState: int ordinal()>();

        $i5 = $r2[$i4];

        tableswitch($i5)
        {
            case 1: goto label01;
            case 2: goto label15;
            case 3: goto label08;
            case 4: goto label16;
            case 5: goto label16;
            case 6: goto label15;
            case 7: goto label17;
            case 8: goto label15;
            case 9: goto label17;
            default: goto label18;
        };

     label01:
        r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.Long mLastDataStopTimestamp> = null;

        l1 = l0;

        $r16 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.String mTag>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Start on ");

        $r18 = staticinvoke <androidx.camera.video.internal.DebugUtils: java.lang.String readableUs(long)>(l1);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>($r16, $r20);

     label02:
        $z2 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: boolean mIsFlushedAfterEndOfStream>;

        if $z2 == 0 goto label03;

        specialinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl: void reset()>();

     label03:
        $r21 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r22 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(9223372036854775807L);

        $r23 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>($r21, $r22);

        r0.<androidx.camera.video.internal.encoder.EncoderImpl: android.util.Range mStartStopTimeRangeUs> = $r23;

        $r24 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: android.media.MediaCodec mMediaCodec>;

        virtualinvoke $r24.<android.media.MediaCodec: void start()>();

     label04:
        goto label06;

     label05:
        $r35 := @caughtexception;

        r36 = $r35;

        virtualinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl: void handleEncodeError(android.media.MediaCodec$CodecException)>(r36);

        return;

     label06:
        $r25 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.Encoder$EncoderInput mEncoderInput>;

        $z3 = $r25 instanceof androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput;

        if $z3 == 0 goto label07;

        $r27 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.Encoder$EncoderInput mEncoderInput>;

        $r28 = (androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput) $r27;

        virtualinvoke $r28.<androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput: void setActive(boolean)>(1);

     label07:
        $r26 = <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState STARTED>;

        specialinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl: void setState(androidx.camera.video.internal.encoder.EncoderImpl$InternalState)>($r26);

        goto label19;

     label08:
        r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.Long mLastDataStopTimestamp> = null;

        $r5 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.Deque mActivePauseResumeTimeRanges>;

        $r6 = interfaceinvoke $r5.<java.util.Deque: java.lang.Object removeLast()>();

        r37 = (android.util.Range) $r6;

        if r37 == null goto label09;

        $r13 = virtualinvoke r37.<android.util.Range: java.lang.Comparable getUpper()>();

        $r14 = (java.lang.Long) $r13;

        $l6 = virtualinvoke $r14.<java.lang.Long: long longValue()>();

        $b7 = $l6 cmp 9223372036854775807L;

        if $b7 != 0 goto label09;

        $z4 = 1;

        goto label10;

     label09:
        $z4 = 0;

     label10:
        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z4, "There should be a \"pause\" before \"resume\"");

        $r38 = virtualinvoke r37.<android.util.Range: java.lang.Comparable getLower()>();

        $r39 = (java.lang.Long) $r38;

        l2 = virtualinvoke $r39.<java.lang.Long: long longValue()>();

        l3 = l0;

        $r40 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.Deque mActivePauseResumeTimeRanges>;

        $r41 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);

        $r42 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l3);

        $r43 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>($r41, $r42);

        interfaceinvoke $r40.<java.util.Deque: void addLast(java.lang.Object)>($r43);

        $r44 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.String mTag>;

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resume on ");

        $r47 = staticinvoke <androidx.camera.video.internal.DebugUtils: java.lang.String readableUs(long)>(l3);

        $r48 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r47);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nPaused duration = ");

        $l8 = l3 - l2;

        $r50 = staticinvoke <androidx.camera.video.internal.DebugUtils: java.lang.String readableUs(long)>($l8);

        $r51 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r50);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>($r44, $r52);

        $z5 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: boolean mIsVideoEncoder>;

        if $z5 != 0 goto label11;

        $r12 = staticinvoke <androidx.camera.video.internal.compat.quirk.DeviceQuirks: androidx.camera.core.impl.Quirk get(java.lang.Class)>(class "Landroidx/camera/video/internal/compat/quirk/AudioEncoderIgnoresInputTimestampQuirk;");

        if $r12 == null goto label11;

        goto label13;

     label11:
        $z0 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: boolean mIsVideoEncoder>;

        if $z0 == 0 goto label12;

        $r11 = staticinvoke <androidx.camera.video.internal.compat.quirk.DeviceQuirks: androidx.camera.core.impl.Quirk get(java.lang.Class)>(class "Landroidx/camera/video/internal/compat/quirk/VideoEncoderSuspendDoesNotIncludeSuspendTimeQuirk;");

        if $r11 == null goto label12;

        goto label13;

     label12:
        virtualinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl: void setMediaCodecPaused(boolean)>(0);

        $r7 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.Encoder$EncoderInput mEncoderInput>;

        $z1 = $r7 instanceof androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput;

        if $z1 == 0 goto label13;

        $r9 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.Encoder$EncoderInput mEncoderInput>;

        $r10 = (androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput) $r9;

        virtualinvoke $r10.<androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput: void setActive(boolean)>(1);

     label13:
        $z6 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: boolean mIsVideoEncoder>;

        if $z6 == 0 goto label14;

        virtualinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl: void requestKeyFrameToMediaCodec()>();

     label14:
        $r8 = <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState STARTED>;

        specialinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl: void setState(androidx.camera.video.internal.encoder.EncoderImpl$InternalState)>($r8);

        goto label19;

     label15:
        goto label19;

     label16:
        $r4 = <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState PENDING_START>;

        specialinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl: void setState(androidx.camera.video.internal.encoder.EncoderImpl$InternalState)>($r4);

        goto label19;

     label17:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Encoder is released");

        throw $r3;

     label18:
        $r29 = new java.lang.IllegalStateException;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown state: ");

        $r32 = r0.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.EncoderImpl$InternalState mState>;

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r34);

        throw $r29;

     label19:
        return;

        catch android.media.MediaCodec$CodecException from label02 to label04 with label05;
    }

    private static java.lang.Object lambda$new$0(java.util.concurrent.atomic.AtomicReference, androidx.concurrent.futures.CallbackToFutureAdapter$Completer) throws java.lang.Exception
    {
        java.util.concurrent.atomic.AtomicReference r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r1;

        r0 := @parameter0: java.util.concurrent.atomic.AtomicReference;

        r1 := @parameter1: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        virtualinvoke r0.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(r1);

        return "mReleasedFuture";
    }

    static void <clinit>()
    {
        java.lang.Long $r0, $r1;
        android.util.Range $r2;

        $r0 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(9223372036854775807L);

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(9223372036854775807L);

        $r2 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>($r0, $r1);

        <androidx.camera.video.internal.encoder.EncoderImpl: android.util.Range NO_RANGE> = $r2;

        return;
    }

androidx.camera.video.internal.encoder.EncoderImpl$1$1
<androidx.camera.video.internal.encoder.EncoderImpl$1$1: androidx.camera.video.internal.encoder.EncoderImpl$1 this$1>
    void <init>(androidx.camera.video.internal.encoder.EncoderImpl$1)
    {
        androidx.camera.video.internal.encoder.EncoderImpl$1$1 r0;
        androidx.camera.video.internal.encoder.EncoderImpl$1 r1;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl$1$1;

        r1 := @parameter0: androidx.camera.video.internal.encoder.EncoderImpl$1;

        r0.<androidx.camera.video.internal.encoder.EncoderImpl$1$1: androidx.camera.video.internal.encoder.EncoderImpl$1 this$1> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onSuccess(java.lang.Void)
    {
        androidx.camera.video.internal.encoder.EncoderImpl$1$1 r0;
        java.lang.Void r1;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl$1$1;

        r1 := @parameter0: java.lang.Void;

        return;
    }

    public void onFailure(java.lang.Throwable)
    {
        androidx.camera.video.internal.encoder.EncoderImpl$1$1 r0;
        java.lang.Throwable r1;
        boolean $z0;
        androidx.camera.video.internal.encoder.EncoderImpl$1 $r2, $r5;
        androidx.camera.video.internal.encoder.EncoderImpl $r3, $r7;
        java.lang.String $r4;
        android.media.MediaCodec$CodecException $r6;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl$1$1;

        r1 := @parameter0: java.lang.Throwable;

        $z0 = r1 instanceof android.media.MediaCodec$CodecException;

        if $z0 == 0 goto label1;

        $r5 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$1$1: androidx.camera.video.internal.encoder.EncoderImpl$1 this$1>;

        $r7 = $r5.<androidx.camera.video.internal.encoder.EncoderImpl$1: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r6 = (android.media.MediaCodec$CodecException) r1;

        virtualinvoke $r7.<androidx.camera.video.internal.encoder.EncoderImpl: void handleEncodeError(android.media.MediaCodec$CodecException)>($r6);

        goto label2;

     label1:
        $r2 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$1$1: androidx.camera.video.internal.encoder.EncoderImpl$1 this$1>;

        $r3 = $r2.<androidx.camera.video.internal.encoder.EncoderImpl$1: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r4 = virtualinvoke r1.<java.lang.Throwable: java.lang.String getMessage()>();

        virtualinvoke $r3.<androidx.camera.video.internal.encoder.EncoderImpl: void handleEncodeError(int,java.lang.String,java.lang.Throwable)>(0, $r4, r1);

     label2:
        return;
    }

    public volatile void onSuccess(java.lang.Object)
    {
        androidx.camera.video.internal.encoder.EncoderImpl$1$1 r0;
        java.lang.Object r1;
        java.lang.Void $r2;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl$1$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Void) r1;

        virtualinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl$1$1: void onSuccess(java.lang.Void)>($r2);

        return;
    }

androidx.camera.video.internal.encoder.EncoderImpl$1
<androidx.camera.video.internal.encoder.EncoderImpl$1: androidx.camera.video.internal.encoder.EncoderImpl this$0>
    void <init>(androidx.camera.video.internal.encoder.EncoderImpl)
    {
        androidx.camera.video.internal.encoder.EncoderImpl$1 r0;
        androidx.camera.video.internal.encoder.EncoderImpl r1;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl$1;

        r1 := @parameter0: androidx.camera.video.internal.encoder.EncoderImpl;

        r0.<androidx.camera.video.internal.encoder.EncoderImpl$1: androidx.camera.video.internal.encoder.EncoderImpl this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onSuccess(androidx.camera.video.internal.encoder.InputBuffer)
    {
        androidx.camera.video.internal.encoder.EncoderImpl$1 r0;
        androidx.camera.video.internal.encoder.InputBuffer r1;
        androidx.camera.video.internal.encoder.EncoderImpl $r2, $r5;
        long $l0;
        com.google.common.util.concurrent.ListenableFuture $r3;
        androidx.camera.video.internal.encoder.EncoderImpl$1$1 $r4;
        java.util.concurrent.Executor $r6;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl$1;

        r1 := @parameter0: androidx.camera.video.internal.encoder.InputBuffer;

        $r2 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$1: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $l0 = virtualinvoke $r2.<androidx.camera.video.internal.encoder.EncoderImpl: long generatePresentationTimeUs()>();

        interfaceinvoke r1.<androidx.camera.video.internal.encoder.InputBuffer: void setPresentationTimeUs(long)>($l0);

        interfaceinvoke r1.<androidx.camera.video.internal.encoder.InputBuffer: void setEndOfStream(boolean)>(1);

        interfaceinvoke r1.<androidx.camera.video.internal.encoder.InputBuffer: boolean submit()>();

        $r3 = interfaceinvoke r1.<androidx.camera.video.internal.encoder.InputBuffer: com.google.common.util.concurrent.ListenableFuture getTerminationFuture()>();

        $r4 = new androidx.camera.video.internal.encoder.EncoderImpl$1$1;

        specialinvoke $r4.<androidx.camera.video.internal.encoder.EncoderImpl$1$1: void <init>(androidx.camera.video.internal.encoder.EncoderImpl$1)>(r0);

        $r5 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$1: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r6 = $r5.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.concurrent.Executor mEncoderExecutor>;

        staticinvoke <androidx.camera.core.impl.utils.futures.Futures: void addCallback(com.google.common.util.concurrent.ListenableFuture,androidx.camera.core.impl.utils.futures.FutureCallback,java.util.concurrent.Executor)>($r3, $r4, $r6);

        return;
    }

    public void onFailure(java.lang.Throwable)
    {
        androidx.camera.video.internal.encoder.EncoderImpl$1 r0;
        java.lang.Throwable r1;
        androidx.camera.video.internal.encoder.EncoderImpl $r2;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl$1;

        r1 := @parameter0: java.lang.Throwable;

        $r2 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$1: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        virtualinvoke $r2.<androidx.camera.video.internal.encoder.EncoderImpl: void handleEncodeError(int,java.lang.String,java.lang.Throwable)>(0, "Unable to acquire InputBuffer.", r1);

        return;
    }

    public volatile void onSuccess(java.lang.Object)
    {
        androidx.camera.video.internal.encoder.EncoderImpl$1 r0;
        java.lang.Object r1;
        androidx.camera.video.internal.encoder.InputBuffer $r2;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.camera.video.internal.encoder.InputBuffer) r1;

        virtualinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl$1: void onSuccess(androidx.camera.video.internal.encoder.InputBuffer)>($r2);

        return;
    }

androidx.camera.video.internal.encoder.EncoderImpl$2
<androidx.camera.video.internal.encoder.EncoderImpl$2: int[] $SwitchMap$androidx$camera$video$internal$encoder$EncoderImpl$InternalState>
    static void <clinit>()
    {
        androidx.camera.video.internal.encoder.EncoderImpl$InternalState[] $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        int[] $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19;
        androidx.camera.video.internal.encoder.EncoderImpl$InternalState $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18;
        java.lang.Throwable $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, r29, r30, r31, r32, r33, r34, r35, r36, r37;

        $r0 = staticinvoke <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState[] values()>();

        $i0 = lengthof $r0;

        $r1 = newarray (int)[$i0];

        <androidx.camera.video.internal.encoder.EncoderImpl$2: int[] $SwitchMap$androidx$camera$video$internal$encoder$EncoderImpl$InternalState> = $r1;

     label01:
        $r3 = <androidx.camera.video.internal.encoder.EncoderImpl$2: int[] $SwitchMap$androidx$camera$video$internal$encoder$EncoderImpl$InternalState>;

        $r2 = <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState CONFIGURED>;

        $i1 = virtualinvoke $r2.<androidx.camera.video.internal.encoder.EncoderImpl$InternalState: int ordinal()>();

        $r3[$i1] = 1;

     label02:
        goto label04;

     label03:
        $r24 := @caughtexception;

        r29 = $r24;

     label04:
        $r5 = <androidx.camera.video.internal.encoder.EncoderImpl$2: int[] $SwitchMap$androidx$camera$video$internal$encoder$EncoderImpl$InternalState>;

        $r4 = <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState STARTED>;

        $i2 = virtualinvoke $r4.<androidx.camera.video.internal.encoder.EncoderImpl$InternalState: int ordinal()>();

        $r5[$i2] = 2;

     label05:
        goto label07;

     label06:
        $r23 := @caughtexception;

        r30 = $r23;

     label07:
        $r7 = <androidx.camera.video.internal.encoder.EncoderImpl$2: int[] $SwitchMap$androidx$camera$video$internal$encoder$EncoderImpl$InternalState>;

        $r6 = <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState PAUSED>;

        $i3 = virtualinvoke $r6.<androidx.camera.video.internal.encoder.EncoderImpl$InternalState: int ordinal()>();

        $r7[$i3] = 3;

     label08:
        goto label10;

     label09:
        $r28 := @caughtexception;

        r31 = $r28;

     label10:
        $r9 = <androidx.camera.video.internal.encoder.EncoderImpl$2: int[] $SwitchMap$androidx$camera$video$internal$encoder$EncoderImpl$InternalState>;

        $r8 = <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState STOPPING>;

        $i4 = virtualinvoke $r8.<androidx.camera.video.internal.encoder.EncoderImpl$InternalState: int ordinal()>();

        $r9[$i4] = 4;

     label11:
        goto label13;

     label12:
        $r20 := @caughtexception;

        r32 = $r20;

     label13:
        $r11 = <androidx.camera.video.internal.encoder.EncoderImpl$2: int[] $SwitchMap$androidx$camera$video$internal$encoder$EncoderImpl$InternalState>;

        $r10 = <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState PENDING_START_PAUSED>;

        $i5 = virtualinvoke $r10.<androidx.camera.video.internal.encoder.EncoderImpl$InternalState: int ordinal()>();

        $r11[$i5] = 5;

     label14:
        goto label16;

     label15:
        $r22 := @caughtexception;

        r33 = $r22;

     label16:
        $r13 = <androidx.camera.video.internal.encoder.EncoderImpl$2: int[] $SwitchMap$androidx$camera$video$internal$encoder$EncoderImpl$InternalState>;

        $r12 = <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState PENDING_START>;

        $i6 = virtualinvoke $r12.<androidx.camera.video.internal.encoder.EncoderImpl$InternalState: int ordinal()>();

        $r13[$i6] = 6;

     label17:
        goto label19;

     label18:
        $r25 := @caughtexception;

        r34 = $r25;

     label19:
        $r15 = <androidx.camera.video.internal.encoder.EncoderImpl$2: int[] $SwitchMap$androidx$camera$video$internal$encoder$EncoderImpl$InternalState>;

        $r14 = <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState PENDING_RELEASE>;

        $i7 = virtualinvoke $r14.<androidx.camera.video.internal.encoder.EncoderImpl$InternalState: int ordinal()>();

        $r15[$i7] = 7;

     label20:
        goto label22;

     label21:
        $r26 := @caughtexception;

        r35 = $r26;

     label22:
        $r17 = <androidx.camera.video.internal.encoder.EncoderImpl$2: int[] $SwitchMap$androidx$camera$video$internal$encoder$EncoderImpl$InternalState>;

        $r16 = <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState ERROR>;

        $i8 = virtualinvoke $r16.<androidx.camera.video.internal.encoder.EncoderImpl$InternalState: int ordinal()>();

        $r17[$i8] = 8;

     label23:
        goto label25;

     label24:
        $r27 := @caughtexception;

        r36 = $r27;

     label25:
        $r19 = <androidx.camera.video.internal.encoder.EncoderImpl$2: int[] $SwitchMap$androidx$camera$video$internal$encoder$EncoderImpl$InternalState>;

        $r18 = <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState RELEASED>;

        $i9 = virtualinvoke $r18.<androidx.camera.video.internal.encoder.EncoderImpl$InternalState: int ordinal()>();

        $r19[$i9] = 9;

     label26:
        goto label28;

     label27:
        $r21 := @caughtexception;

        r37 = $r21;

     label28:
        return;

        catch java.lang.NoSuchFieldError from label01 to label02 with label03;
        catch java.lang.NoSuchFieldError from label04 to label05 with label06;
        catch java.lang.NoSuchFieldError from label07 to label08 with label09;
        catch java.lang.NoSuchFieldError from label10 to label11 with label12;
        catch java.lang.NoSuchFieldError from label13 to label14 with label15;
        catch java.lang.NoSuchFieldError from label16 to label17 with label18;
        catch java.lang.NoSuchFieldError from label19 to label20 with label21;
        catch java.lang.NoSuchFieldError from label22 to label23 with label24;
        catch java.lang.NoSuchFieldError from label25 to label26 with label27;
    }

androidx.camera.video.internal.encoder.EncoderImpl$Api23Impl
    private void <init>()
    {
        androidx.camera.video.internal.encoder.EncoderImpl$Api23Impl r0;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl$Api23Impl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static android.view.Surface createPersistentInputSurface()
    {
        android.view.Surface $r0;

        $r0 = staticinvoke <android.media.MediaCodec: android.view.Surface createPersistentInputSurface()>();

        return $r0;
    }

    static void setInputSurface(android.media.MediaCodec, android.view.Surface)
    {
        android.media.MediaCodec r0;
        android.view.Surface r1;

        r0 := @parameter0: android.media.MediaCodec;

        r1 := @parameter1: android.view.Surface;

        virtualinvoke r0.<android.media.MediaCodec: void setInputSurface(android.view.Surface)>(r1);

        return;
    }

androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput
<androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput: java.util.Map mStateObservers>
<androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput: androidx.camera.video.internal.BufferProvider$State mBufferProviderState>
<androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput: java.util.List mAcquisitionList>
<androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput: androidx.camera.video.internal.encoder.EncoderImpl this$0>
    void <init>(androidx.camera.video.internal.encoder.EncoderImpl)
    {
        androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput r0;
        androidx.camera.video.internal.encoder.EncoderImpl r1;
        java.util.LinkedHashMap $r2;
        androidx.camera.video.internal.BufferProvider$State $r3;
        java.util.ArrayList $r4;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput;

        r1 := @parameter0: androidx.camera.video.internal.encoder.EncoderImpl;

        r0.<androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput: androidx.camera.video.internal.encoder.EncoderImpl this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.LinkedHashMap;

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>()>();

        r0.<androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput: java.util.Map mStateObservers> = $r2;

        $r3 = <androidx.camera.video.internal.BufferProvider$State: androidx.camera.video.internal.BufferProvider$State INACTIVE>;

        r0.<androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput: androidx.camera.video.internal.BufferProvider$State mBufferProviderState> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput: java.util.List mAcquisitionList> = $r4;

        return;
    }

    public com.google.common.util.concurrent.ListenableFuture fetchData()
    {
        androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Resolver $r1;
        com.google.common.util.concurrent.ListenableFuture $r2;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput;

        $r1 = dynamicinvoke "attachCompleter" <androidx.concurrent.futures.CallbackToFutureAdapter$Resolver (androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput: java.lang.Object lambda$fetchData$1(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer));

        $r2 = staticinvoke <androidx.concurrent.futures.CallbackToFutureAdapter: com.google.common.util.concurrent.ListenableFuture getFuture(androidx.concurrent.futures.CallbackToFutureAdapter$Resolver)>($r1);

        return $r2;
    }

    public com.google.common.util.concurrent.ListenableFuture acquireBuffer()
    {
        androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Resolver $r1;
        com.google.common.util.concurrent.ListenableFuture $r2;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput;

        $r1 = dynamicinvoke "attachCompleter" <androidx.concurrent.futures.CallbackToFutureAdapter$Resolver (androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput: java.lang.Object lambda$acquireBuffer$5(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer));

        $r2 = staticinvoke <androidx.concurrent.futures.CallbackToFutureAdapter: com.google.common.util.concurrent.ListenableFuture getFuture(androidx.concurrent.futures.CallbackToFutureAdapter$Resolver)>($r1);

        return $r2;
    }

    private void cancelInputBuffer(com.google.common.util.concurrent.ListenableFuture)
    {
        androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput r0;
        com.google.common.util.concurrent.ListenableFuture r1;
        java.lang.Throwable r2, $r5;
        boolean $z0, $z1;
        java.lang.Object $r3;
        androidx.camera.video.internal.encoder.InputBuffer $r4;
        androidx.camera.video.internal.encoder.EncoderImpl $r6;
        java.lang.StringBuilder $r7, $r9, $r10;
        java.lang.String $r8, $r11;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput;

        r1 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        $z0 = interfaceinvoke r1.<com.google.common.util.concurrent.ListenableFuture: boolean cancel(boolean)>(1);

        if $z0 != 0 goto label4;

        $z1 = interfaceinvoke r1.<com.google.common.util.concurrent.ListenableFuture: boolean isDone()>();

        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean)>($z1);

     label1:
        $r3 = interfaceinvoke r1.<com.google.common.util.concurrent.ListenableFuture: java.lang.Object get()>();

        $r4 = (androidx.camera.video.internal.encoder.InputBuffer) $r3;

        interfaceinvoke $r4.<androidx.camera.video.internal.encoder.InputBuffer: boolean cancel()>();

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r8 = $r6.<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.String mTag>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to cancel the input buffer: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void w(java.lang.String,java.lang.String)>($r8, $r11);

     label4:
        return;

        catch java.util.concurrent.ExecutionException from label1 to label2 with label3;
        catch java.lang.InterruptedException from label1 to label2 with label3;
        catch java.util.concurrent.CancellationException from label1 to label2 with label3;
    }

    public void addObserver(java.util.concurrent.Executor, androidx.camera.core.impl.Observable$Observer)
    {
        androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput r0;
        java.util.concurrent.Executor r1, $r4;
        androidx.camera.core.impl.Observable$Observer r2;
        androidx.camera.video.internal.encoder.EncoderImpl $r3;
        java.lang.Runnable $r5;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: androidx.camera.core.impl.Observable$Observer;

        $r3 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r4 = $r3.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.concurrent.Executor mEncoderExecutor>;

        $r5 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput,androidx.camera.core.impl.Observable$Observer,java.util.concurrent.Executor)>(r0, r2, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput: void lambda$addObserver$7(androidx.camera.core.impl.Observable$Observer,java.util.concurrent.Executor)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r4.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r5);

        return;
    }

    public void removeObserver(androidx.camera.core.impl.Observable$Observer)
    {
        androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput r0;
        androidx.camera.core.impl.Observable$Observer r1;
        androidx.camera.video.internal.encoder.EncoderImpl $r2;
        java.util.concurrent.Executor $r3;
        java.lang.Runnable $r4;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput;

        r1 := @parameter0: androidx.camera.core.impl.Observable$Observer;

        $r2 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r3 = $r2.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.concurrent.Executor mEncoderExecutor>;

        $r4 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput,androidx.camera.core.impl.Observable$Observer)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput: void lambda$removeObserver$8(androidx.camera.core.impl.Observable$Observer)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r3.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r4);

        return;
    }

    void setActive(boolean)
    {
        androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput r0;
        boolean z0, $z1, $z3;
        androidx.camera.video.internal.BufferProvider$State r1, $r3, $r4, $r17;
        java.lang.Throwable r2, $r14;
        java.util.Map $r5;
        java.util.Set $r6;
        java.lang.Object $r7, $r8, $r13;
        java.util.concurrent.Executor $r9;
        java.lang.Runnable $r10;
        java.util.List $r11, $r12;
        androidx.camera.video.internal.encoder.EncoderImpl $r15;
        java.lang.String $r16;
        java.util.Iterator r18, r20;
        com.google.common.util.concurrent.ListenableFuture r19;
        java.util.Map$Entry r21;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label01;

        $r17 = <androidx.camera.video.internal.BufferProvider$State: androidx.camera.video.internal.BufferProvider$State ACTIVE>;

        goto label02;

     label01:
        $r17 = <androidx.camera.video.internal.BufferProvider$State: androidx.camera.video.internal.BufferProvider$State INACTIVE>;

     label02:
        r1 = $r17;

        $r3 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput: androidx.camera.video.internal.BufferProvider$State mBufferProviderState>;

        if $r3 != r1 goto label03;

        return;

     label03:
        r0.<androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput: androidx.camera.video.internal.BufferProvider$State mBufferProviderState> = r1;

        $r4 = <androidx.camera.video.internal.BufferProvider$State: androidx.camera.video.internal.BufferProvider$State INACTIVE>;

        if r1 != $r4 goto label06;

        $r11 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput: java.util.List mAcquisitionList>;

        r18 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z1 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label05;

        $r13 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>();

        r19 = (com.google.common.util.concurrent.ListenableFuture) $r13;

        interfaceinvoke r19.<com.google.common.util.concurrent.ListenableFuture: boolean cancel(boolean)>(1);

        goto label04;

     label05:
        $r12 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput: java.util.List mAcquisitionList>;

        interfaceinvoke $r12.<java.util.List: void clear()>();

     label06:
        $r5 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput: java.util.Map mStateObservers>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>();

        r20 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label07:
        $z3 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label12;

        $r7 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>();

        r21 = (java.util.Map$Entry) $r7;

     label08:
        $r8 = interfaceinvoke r21.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r9 = (java.util.concurrent.Executor) $r8;

        $r10 = dynamicinvoke "run" <java.lang.Runnable (java.util.Map$Entry,androidx.camera.video.internal.BufferProvider$State)>(r21, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput: void lambda$setActive$9(java.util.Map$Entry,androidx.camera.video.internal.BufferProvider$State)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r9.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r10);

     label09:
        goto label11;

     label10:
        $r14 := @caughtexception;

        r2 = $r14;

        $r15 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r16 = $r15.<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.String mTag>;

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>($r16, "Unable to post to the supplied executor.", r2);

     label11:
        goto label07;

     label12:
        return;

        catch java.util.concurrent.RejectedExecutionException from label08 to label09 with label10;
    }

    private static void lambda$setActive$9(java.util.Map$Entry, androidx.camera.video.internal.BufferProvider$State)
    {
        java.util.Map$Entry r0;
        androidx.camera.video.internal.BufferProvider$State r1;
        java.lang.Object $r2;
        androidx.camera.core.impl.Observable$Observer $r3;

        r0 := @parameter0: java.util.Map$Entry;

        r1 := @parameter1: androidx.camera.video.internal.BufferProvider$State;

        $r2 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r3 = (androidx.camera.core.impl.Observable$Observer) $r2;

        interfaceinvoke $r3.<androidx.camera.core.impl.Observable$Observer: void onNewData(java.lang.Object)>(r1);

        return;
    }

    private void lambda$removeObserver$8(androidx.camera.core.impl.Observable$Observer)
    {
        androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput r0;
        androidx.camera.core.impl.Observable$Observer r1;
        java.util.Map $r2;
        java.lang.Object $r3;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput;

        r1 := @parameter0: androidx.camera.core.impl.Observable$Observer;

        $r2 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput: java.util.Map mStateObservers>;

        $r3 = staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r3);

        return;
    }

    private void lambda$addObserver$7(androidx.camera.core.impl.Observable$Observer, java.util.concurrent.Executor)
    {
        androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput r0;
        androidx.camera.core.impl.Observable$Observer r1, $r6;
        java.util.concurrent.Executor r2, $r8;
        androidx.camera.video.internal.BufferProvider$State r3;
        java.util.Map $r4;
        java.lang.Object $r5, $r7;
        java.lang.Runnable $r10;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput;

        r1 := @parameter0: androidx.camera.core.impl.Observable$Observer;

        r2 := @parameter1: java.util.concurrent.Executor;

        $r4 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput: java.util.Map mStateObservers>;

        $r5 = staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r6 = (androidx.camera.core.impl.Observable$Observer) $r5;

        $r7 = staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r8 = (java.util.concurrent.Executor) $r7;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r8);

        r3 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput: androidx.camera.video.internal.BufferProvider$State mBufferProviderState>;

        $r10 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.core.impl.Observable$Observer,androidx.camera.video.internal.BufferProvider$State)>(r1, r3) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput: void lambda$addObserver$6(androidx.camera.core.impl.Observable$Observer,androidx.camera.video.internal.BufferProvider$State)>, methodtype: void __METHODTYPE__());

        interfaceinvoke r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r10);

        return;
    }

    private static void lambda$addObserver$6(androidx.camera.core.impl.Observable$Observer, androidx.camera.video.internal.BufferProvider$State)
    {
        androidx.camera.core.impl.Observable$Observer r0;
        androidx.camera.video.internal.BufferProvider$State r1;

        r0 := @parameter0: androidx.camera.core.impl.Observable$Observer;

        r1 := @parameter1: androidx.camera.video.internal.BufferProvider$State;

        interfaceinvoke r0.<androidx.camera.core.impl.Observable$Observer: void onNewData(java.lang.Object)>(r1);

        return;
    }

    private java.lang.Object lambda$acquireBuffer$5(androidx.concurrent.futures.CallbackToFutureAdapter$Completer) throws java.lang.Exception
    {
        androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r1;
        androidx.camera.video.internal.encoder.EncoderImpl $r2;
        java.util.concurrent.Executor $r3;
        java.lang.Runnable $r4;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput;

        r1 := @parameter0: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        $r2 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r3 = $r2.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.concurrent.Executor mEncoderExecutor>;

        $r4 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput: void lambda$acquireBuffer$4(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r3.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r4);

        return "acquireBuffer";
    }

    private void lambda$acquireBuffer$4(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)
    {
        androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r1;
        com.google.common.util.concurrent.ListenableFuture r2;
        androidx.camera.video.internal.BufferProvider$State $r3, $r4, $r5, $r6, $r10;
        java.lang.IllegalStateException $r7, $r13;
        java.lang.StringBuilder $r8, $r9, $r11;
        java.lang.String $r12;
        androidx.camera.video.internal.encoder.EncoderImpl $r14, $r19;
        java.lang.Runnable $r15, $r18;
        java.util.concurrent.Executor $r16, $r20;
        java.util.List $r17;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput;

        r1 := @parameter0: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        $r4 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput: androidx.camera.video.internal.BufferProvider$State mBufferProviderState>;

        $r3 = <androidx.camera.video.internal.BufferProvider$State: androidx.camera.video.internal.BufferProvider$State ACTIVE>;

        if $r4 != $r3 goto label1;

        $r14 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        r2 = virtualinvoke $r14.<androidx.camera.video.internal.encoder.EncoderImpl: com.google.common.util.concurrent.ListenableFuture acquireInputBuffer()>();

        staticinvoke <androidx.camera.core.impl.utils.futures.Futures: void propagate(com.google.common.util.concurrent.ListenableFuture,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>(r2, r1);

        $r15 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput,com.google.common.util.concurrent.ListenableFuture)>(r0, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput: void lambda$acquireBuffer$2(com.google.common.util.concurrent.ListenableFuture)>, methodtype: void __METHODTYPE__());

        $r16 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor directExecutor()>();

        virtualinvoke r1.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: void addCancellationListener(java.lang.Runnable,java.util.concurrent.Executor)>($r15, $r16);

        $r17 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput: java.util.List mAcquisitionList>;

        interfaceinvoke $r17.<java.util.List: boolean add(java.lang.Object)>(r2);

        $r18 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput,com.google.common.util.concurrent.ListenableFuture)>(r0, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput: void lambda$acquireBuffer$3(com.google.common.util.concurrent.ListenableFuture)>, methodtype: void __METHODTYPE__());

        $r19 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r20 = $r19.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.concurrent.Executor mEncoderExecutor>;

        interfaceinvoke r2.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r18, $r20);

        goto label3;

     label1:
        $r6 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput: androidx.camera.video.internal.BufferProvider$State mBufferProviderState>;

        $r5 = <androidx.camera.video.internal.BufferProvider$State: androidx.camera.video.internal.BufferProvider$State INACTIVE>;

        if $r6 != $r5 goto label2;

        $r13 = new java.lang.IllegalStateException;

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>("BufferProvider is not active.");

        virtualinvoke r1.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean setException(java.lang.Throwable)>($r13);

        goto label3;

     label2:
        $r7 = new java.lang.IllegalStateException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown state: ");

        $r10 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput: androidx.camera.video.internal.BufferProvider$State mBufferProviderState>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        virtualinvoke r1.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean setException(java.lang.Throwable)>($r7);

     label3:
        return;
    }

    private void lambda$acquireBuffer$3(com.google.common.util.concurrent.ListenableFuture)
    {
        androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput r0;
        com.google.common.util.concurrent.ListenableFuture r1;
        java.util.List $r2;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput;

        r1 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        $r2 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput: java.util.List mAcquisitionList>;

        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1);

        return;
    }

    private void lambda$acquireBuffer$2(com.google.common.util.concurrent.ListenableFuture)
    {
        androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput r0;
        com.google.common.util.concurrent.ListenableFuture r1;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput;

        r1 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        specialinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput: void cancelInputBuffer(com.google.common.util.concurrent.ListenableFuture)>(r1);

        return;
    }

    private java.lang.Object lambda$fetchData$1(androidx.concurrent.futures.CallbackToFutureAdapter$Completer) throws java.lang.Exception
    {
        androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r1;
        androidx.camera.video.internal.encoder.EncoderImpl $r2;
        java.util.concurrent.Executor $r3;
        java.lang.Runnable $r4;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput;

        r1 := @parameter0: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        $r2 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r3 = $r2.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.concurrent.Executor mEncoderExecutor>;

        $r4 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput: void lambda$fetchData$0(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r3.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r4);

        return "fetchData";
    }

    private void lambda$fetchData$0(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)
    {
        androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r1;
        androidx.camera.video.internal.BufferProvider$State $r2;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput;

        r1 := @parameter0: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        $r2 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput: androidx.camera.video.internal.BufferProvider$State mBufferProviderState>;

        virtualinvoke r1.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean set(java.lang.Object)>($r2);

        return;
    }

androidx.camera.video.internal.encoder.EncoderImpl$InternalState
<androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState CONFIGURED>
<androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState STARTED>
<androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState PAUSED>
<androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState STOPPING>
<androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState PENDING_START>
<androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState PENDING_START_PAUSED>
<androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState PENDING_RELEASE>
<androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState ERROR>
<androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState RELEASED>
<androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState[] $VALUES>
    public static androidx.camera.video.internal.encoder.EncoderImpl$InternalState[] values()
    {
        androidx.camera.video.internal.encoder.EncoderImpl$InternalState[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (androidx.camera.video.internal.encoder.EncoderImpl$InternalState[]) $r1;

        return $r2;
    }

    public static androidx.camera.video.internal.encoder.EncoderImpl$InternalState valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        androidx.camera.video.internal.encoder.EncoderImpl$InternalState $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroidx/camera/video/internal/encoder/EncoderImpl$InternalState;", r0);

        $r2 = (androidx.camera.video.internal.encoder.EncoderImpl$InternalState) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        androidx.camera.video.internal.encoder.EncoderImpl$InternalState r0;
        java.lang.String r1;
        int i0;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl$InternalState;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    static void <clinit>()
    {
        androidx.camera.video.internal.encoder.EncoderImpl$InternalState $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        androidx.camera.video.internal.encoder.EncoderImpl$InternalState[] $r9;

        $r0 = new androidx.camera.video.internal.encoder.EncoderImpl$InternalState;

        specialinvoke $r0.<androidx.camera.video.internal.encoder.EncoderImpl$InternalState: void <init>(java.lang.String,int)>("CONFIGURED", 0);

        <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState CONFIGURED> = $r0;

        $r1 = new androidx.camera.video.internal.encoder.EncoderImpl$InternalState;

        specialinvoke $r1.<androidx.camera.video.internal.encoder.EncoderImpl$InternalState: void <init>(java.lang.String,int)>("STARTED", 1);

        <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState STARTED> = $r1;

        $r2 = new androidx.camera.video.internal.encoder.EncoderImpl$InternalState;

        specialinvoke $r2.<androidx.camera.video.internal.encoder.EncoderImpl$InternalState: void <init>(java.lang.String,int)>("PAUSED", 2);

        <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState PAUSED> = $r2;

        $r3 = new androidx.camera.video.internal.encoder.EncoderImpl$InternalState;

        specialinvoke $r3.<androidx.camera.video.internal.encoder.EncoderImpl$InternalState: void <init>(java.lang.String,int)>("STOPPING", 3);

        <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState STOPPING> = $r3;

        $r4 = new androidx.camera.video.internal.encoder.EncoderImpl$InternalState;

        specialinvoke $r4.<androidx.camera.video.internal.encoder.EncoderImpl$InternalState: void <init>(java.lang.String,int)>("PENDING_START", 4);

        <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState PENDING_START> = $r4;

        $r5 = new androidx.camera.video.internal.encoder.EncoderImpl$InternalState;

        specialinvoke $r5.<androidx.camera.video.internal.encoder.EncoderImpl$InternalState: void <init>(java.lang.String,int)>("PENDING_START_PAUSED", 5);

        <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState PENDING_START_PAUSED> = $r5;

        $r6 = new androidx.camera.video.internal.encoder.EncoderImpl$InternalState;

        specialinvoke $r6.<androidx.camera.video.internal.encoder.EncoderImpl$InternalState: void <init>(java.lang.String,int)>("PENDING_RELEASE", 6);

        <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState PENDING_RELEASE> = $r6;

        $r7 = new androidx.camera.video.internal.encoder.EncoderImpl$InternalState;

        specialinvoke $r7.<androidx.camera.video.internal.encoder.EncoderImpl$InternalState: void <init>(java.lang.String,int)>("ERROR", 7);

        <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState ERROR> = $r7;

        $r8 = new androidx.camera.video.internal.encoder.EncoderImpl$InternalState;

        specialinvoke $r8.<androidx.camera.video.internal.encoder.EncoderImpl$InternalState: void <init>(java.lang.String,int)>("RELEASED", 8);

        <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState RELEASED> = $r8;

        $r9 = newarray (androidx.camera.video.internal.encoder.EncoderImpl$InternalState)[9];

        $r10 = <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState CONFIGURED>;

        $r9[0] = $r10;

        $r11 = <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState STARTED>;

        $r9[1] = $r11;

        $r12 = <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState PAUSED>;

        $r9[2] = $r12;

        $r13 = <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState STOPPING>;

        $r9[3] = $r13;

        $r14 = <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState PENDING_START>;

        $r9[4] = $r14;

        $r15 = <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState PENDING_START_PAUSED>;

        $r9[5] = $r15;

        $r16 = <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState PENDING_RELEASE>;

        $r9[6] = $r16;

        $r17 = <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState ERROR>;

        $r9[7] = $r17;

        $r18 = <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState RELEASED>;

        $r9[8] = $r18;

        <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState[] $VALUES> = $r9;

        return;
    }

androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback$1
<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback$1: androidx.camera.video.internal.encoder.EncodedDataImpl val$encodedData>
<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback$1: androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback this$1>
    void <init>(androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback, androidx.camera.video.internal.encoder.EncodedDataImpl)
    {
        androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback$1 r0;
        androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback r1;
        androidx.camera.video.internal.encoder.EncodedDataImpl r2;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback$1;

        r1 := @parameter0: androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback;

        r2 := @parameter1: androidx.camera.video.internal.encoder.EncodedDataImpl;

        r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback$1: androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback this$1> = r1;

        r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback$1: androidx.camera.video.internal.encoder.EncodedDataImpl val$encodedData> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onSuccess(java.lang.Void)
    {
        androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback$1 r0;
        java.lang.Void r1;
        androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback $r2;
        androidx.camera.video.internal.encoder.EncoderImpl $r3;
        androidx.camera.video.internal.encoder.EncodedDataImpl $r4;
        java.util.Set $r5;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback$1;

        r1 := @parameter0: java.lang.Void;

        $r2 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback$1: androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback this$1>;

        $r3 = $r2.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r5 = $r3.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.Set mEncodedDataSet>;

        $r4 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback$1: androidx.camera.video.internal.encoder.EncodedDataImpl val$encodedData>;

        interfaceinvoke $r5.<java.util.Set: boolean remove(java.lang.Object)>($r4);

        return;
    }

    public void onFailure(java.lang.Throwable)
    {
        androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback$1 r0;
        java.lang.Throwable r1;
        androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback $r2, $r6, $r9;
        androidx.camera.video.internal.encoder.EncoderImpl $r3, $r7, $r11;
        androidx.camera.video.internal.encoder.EncodedDataImpl $r4;
        java.util.Set $r5;
        boolean $z1;
        java.lang.String $r8;
        android.media.MediaCodec$CodecException $r10;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback$1;

        r1 := @parameter0: java.lang.Throwable;

        $r2 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback$1: androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback this$1>;

        $r3 = $r2.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r5 = $r3.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.Set mEncodedDataSet>;

        $r4 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback$1: androidx.camera.video.internal.encoder.EncodedDataImpl val$encodedData>;

        interfaceinvoke $r5.<java.util.Set: boolean remove(java.lang.Object)>($r4);

        $z1 = r1 instanceof android.media.MediaCodec$CodecException;

        if $z1 == 0 goto label1;

        $r9 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback$1: androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback this$1>;

        $r11 = $r9.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r10 = (android.media.MediaCodec$CodecException) r1;

        virtualinvoke $r11.<androidx.camera.video.internal.encoder.EncoderImpl: void handleEncodeError(android.media.MediaCodec$CodecException)>($r10);

        goto label2;

     label1:
        $r6 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback$1: androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback this$1>;

        $r7 = $r6.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r8 = virtualinvoke r1.<java.lang.Throwable: java.lang.String getMessage()>();

        virtualinvoke $r7.<androidx.camera.video.internal.encoder.EncoderImpl: void handleEncodeError(int,java.lang.String,java.lang.Throwable)>(0, $r8, r1);

     label2:
        return;
    }

    public volatile void onSuccess(java.lang.Object)
    {
        androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback$1 r0;
        java.lang.Object r1;
        java.lang.Void $r2;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Void) r1;

        virtualinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback$1: void onSuccess(java.lang.Void)>($r2);

        return;
    }

androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback
<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.workaround.VideoTimebaseConverter mVideoTimestampConverter>
<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: boolean mHasSendStartCallback>
<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: boolean mHasFirstData>
<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: boolean mHasEndData>
<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: long mLastPresentationTimeUs>
<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: long mLastSentPresentationTimeUs>
<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: boolean mIsOutputBufferInPauseState>
<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: boolean mIsKeyFrameRequired>
<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>
    void <init>(androidx.camera.video.internal.encoder.EncoderImpl)
    {
        androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback r0;
        androidx.camera.video.internal.encoder.EncoderImpl r1;
        boolean $z0;
        androidx.camera.core.impl.Quirk $r2;
        androidx.camera.video.internal.workaround.VideoTimebaseConverter $r3;
        androidx.camera.video.internal.encoder.TimeProvider $r4;
        androidx.camera.core.impl.Timebase r5;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback;

        r1 := @parameter0: androidx.camera.video.internal.encoder.EncoderImpl;

        r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0> = r1;

        specialinvoke r0.<android.media.MediaCodec$Callback: void <init>()>();

        r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: boolean mHasSendStartCallback> = 0;

        r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: boolean mHasFirstData> = 0;

        r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: boolean mHasEndData> = 0;

        r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: long mLastPresentationTimeUs> = 0L;

        r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: long mLastSentPresentationTimeUs> = 0L;

        r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: boolean mIsOutputBufferInPauseState> = 0;

        r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: boolean mIsKeyFrameRequired> = 0;

        $z0 = r1.<androidx.camera.video.internal.encoder.EncoderImpl: boolean mIsVideoEncoder>;

        if $z0 == 0 goto label3;

        $r2 = staticinvoke <androidx.camera.video.internal.compat.quirk.DeviceQuirks: androidx.camera.core.impl.Quirk get(java.lang.Class)>(class "Landroidx/camera/video/internal/compat/quirk/CameraUseInconsistentTimebaseQuirk;");

        if $r2 == null goto label1;

        r5 = null;

        goto label2;

     label1:
        r5 = r1.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.core.impl.Timebase mInputTimebase>;

     label2:
        $r3 = new androidx.camera.video.internal.workaround.VideoTimebaseConverter;

        $r4 = r1.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.TimeProvider mTimeProvider>;

        specialinvoke $r3.<androidx.camera.video.internal.workaround.VideoTimebaseConverter: void <init>(androidx.camera.video.internal.encoder.TimeProvider,androidx.camera.core.impl.Timebase)>($r4, r5);

        r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.workaround.VideoTimebaseConverter mVideoTimestampConverter> = $r3;

        goto label4;

     label3:
        r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.workaround.VideoTimebaseConverter mVideoTimestampConverter> = null;

     label4:
        return;
    }

    public void onInputBufferAvailable(android.media.MediaCodec, int)
    {
        androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback r0;
        android.media.MediaCodec r1;
        int i0;
        androidx.camera.video.internal.encoder.EncoderImpl $r2;
        java.util.concurrent.Executor $r3;
        java.lang.Runnable $r4;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback;

        r1 := @parameter0: android.media.MediaCodec;

        i0 := @parameter1: int;

        $r2 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r3 = $r2.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.concurrent.Executor mEncoderExecutor>;

        $r4 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback,int)>(r0, i0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: void lambda$onInputBufferAvailable$0(int)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r3.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r4);

        return;
    }

    public void onOutputBufferAvailable(android.media.MediaCodec, int, android.media.MediaCodec$BufferInfo)
    {
        androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback r0;
        android.media.MediaCodec r1;
        int i0;
        android.media.MediaCodec$BufferInfo r2;
        androidx.camera.video.internal.encoder.EncoderImpl $r3;
        java.util.concurrent.Executor $r4;
        java.lang.Runnable $r5;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback;

        r1 := @parameter0: android.media.MediaCodec;

        i0 := @parameter1: int;

        r2 := @parameter2: android.media.MediaCodec$BufferInfo;

        $r3 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r4 = $r3.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.concurrent.Executor mEncoderExecutor>;

        $r5 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback,android.media.MediaCodec$BufferInfo,android.media.MediaCodec,int)>(r0, r2, r1, i0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: void lambda$onOutputBufferAvailable$2(android.media.MediaCodec$BufferInfo,android.media.MediaCodec,int)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r4.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r5);

        return;
    }

    private void sendEncodedData(androidx.camera.video.internal.encoder.EncodedDataImpl, androidx.camera.video.internal.encoder.EncoderCallback, java.util.concurrent.Executor)
    {
        androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback r0;
        androidx.camera.video.internal.encoder.EncodedDataImpl r1;
        androidx.camera.video.internal.encoder.EncoderCallback r2;
        java.util.concurrent.Executor r3, $r10;
        java.lang.Throwable r4, $r12;
        androidx.camera.video.internal.encoder.EncoderImpl $r5, $r9, $r13;
        java.util.Set $r6;
        com.google.common.util.concurrent.ListenableFuture $r7;
        androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback$1 $r8;
        java.lang.Runnable $r11;
        java.lang.String $r14;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback;

        r1 := @parameter0: androidx.camera.video.internal.encoder.EncodedDataImpl;

        r2 := @parameter1: androidx.camera.video.internal.encoder.EncoderCallback;

        r3 := @parameter2: java.util.concurrent.Executor;

        $r5 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r6 = $r5.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.Set mEncodedDataSet>;

        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>(r1);

        $r7 = virtualinvoke r1.<androidx.camera.video.internal.encoder.EncodedDataImpl: com.google.common.util.concurrent.ListenableFuture getClosedFuture()>();

        $r8 = new androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback$1;

        specialinvoke $r8.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback$1: void <init>(androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback,androidx.camera.video.internal.encoder.EncodedDataImpl)>(r0, r1);

        $r9 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r10 = $r9.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.concurrent.Executor mEncoderExecutor>;

        staticinvoke <androidx.camera.core.impl.utils.futures.Futures: void addCallback(com.google.common.util.concurrent.ListenableFuture,androidx.camera.core.impl.utils.futures.FutureCallback,java.util.concurrent.Executor)>($r7, $r8, $r10);

     label1:
        $r11 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.video.internal.encoder.EncoderCallback,androidx.camera.video.internal.encoder.EncodedDataImpl)>(r2, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: void lambda$sendEncodedData$3(androidx.camera.video.internal.encoder.EncoderCallback,androidx.camera.video.internal.encoder.EncodedDataImpl)>, methodtype: void __METHODTYPE__());

        interfaceinvoke r3.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r11);

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

        r4 = $r12;

        $r13 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r14 = $r13.<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.String mTag>;

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>($r14, "Unable to post to the supplied executor.", r4);

        virtualinvoke r1.<androidx.camera.video.internal.encoder.EncodedDataImpl: void close()>();

     label4:
        return;

        catch java.util.concurrent.RejectedExecutionException from label1 to label2 with label3;
    }

    private boolean checkBufferInfo(android.media.MediaCodec$BufferInfo)
    {
        androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback r0;
        android.media.MediaCodec$BufferInfo r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z11;
        int $i0, $i1, $i2;
        androidx.camera.video.internal.workaround.VideoTimebaseConverter $r2, $r33;
        long $l3, $l4, $l6, $l7, $l8, $l9, $l11, $l12, $l14, $l15, $l16;
        byte $b5, $b10, $b13;
        androidx.camera.video.internal.encoder.EncoderImpl $r3, $r6, $r7, $r9, $r10, $r11, $r13, $r14, $r16, $r18, $r19, $r23, $r25, $r27, $r28, $r29, $r31, $r34, $r36, $r38;
        android.util.Range $r4, $r20;
        java.lang.Long $r5, $r22, $r26;
        java.lang.String $r8, $r12, $r15, $r17, $r32, $r35, $r37, $r39;
        java.lang.Comparable $r21;
        java.util.concurrent.Future $r24, $r30;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback;

        r1 := @parameter0: android.media.MediaCodec$BufferInfo;

        $z0 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: boolean mHasEndData>;

        if $z0 == 0 goto label01;

        $r38 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r39 = $r38.<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.String mTag>;

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>($r39, "Drop buffer by already reach end of stream.");

        return 0;

     label01:
        $i0 = r1.<android.media.MediaCodec$BufferInfo: int size>;

        if $i0 > 0 goto label02;

        $r36 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r37 = $r36.<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.String mTag>;

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>($r37, "Drop buffer by invalid buffer size.");

        return 0;

     label02:
        $i1 = r1.<android.media.MediaCodec$BufferInfo: int flags>;

        $i2 = $i1 & 2;

        if $i2 == 0 goto label03;

        $r34 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r35 = $r34.<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.String mTag>;

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>($r35, "Drop buffer by codec config.");

        return 0;

     label03:
        $r2 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.workaround.VideoTimebaseConverter mVideoTimestampConverter>;

        if $r2 == null goto label04;

        $r33 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.workaround.VideoTimebaseConverter mVideoTimestampConverter>;

        $l15 = r1.<android.media.MediaCodec$BufferInfo: long presentationTimeUs>;

        $l16 = virtualinvoke $r33.<androidx.camera.video.internal.workaround.VideoTimebaseConverter: long convertToUptimeUs(long)>($l15);

        r1.<android.media.MediaCodec$BufferInfo: long presentationTimeUs> = $l16;

     label04:
        $l4 = r1.<android.media.MediaCodec$BufferInfo: long presentationTimeUs>;

        $l3 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: long mLastPresentationTimeUs>;

        $b5 = $l4 cmp $l3;

        if $b5 > 0 goto label05;

        $r31 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r32 = $r31.<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.String mTag>;

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>($r32, "Drop buffer by out of order buffer from MediaCodec.");

        return 0;

     label05:
        $l6 = r1.<android.media.MediaCodec$BufferInfo: long presentationTimeUs>;

        r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: long mLastPresentationTimeUs> = $l6;

        $r3 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r4 = $r3.<androidx.camera.video.internal.encoder.EncoderImpl: android.util.Range mStartStopTimeRangeUs>;

        $l7 = r1.<android.media.MediaCodec$BufferInfo: long presentationTimeUs>;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l7);

        $z1 = virtualinvoke $r4.<android.util.Range: boolean contains(java.lang.Comparable)>($r5);

        if $z1 != 0 goto label08;

        $r16 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r17 = $r16.<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.String mTag>;

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>($r17, "Drop buffer by not in start-stop range.");

        $r18 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $z9 = $r18.<androidx.camera.video.internal.encoder.EncoderImpl: boolean mPendingCodecStop>;

        if $z9 == 0 goto label07;

        $l11 = r1.<android.media.MediaCodec$BufferInfo: long presentationTimeUs>;

        $r19 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r20 = $r19.<androidx.camera.video.internal.encoder.EncoderImpl: android.util.Range mStartStopTimeRangeUs>;

        $r21 = virtualinvoke $r20.<android.util.Range: java.lang.Comparable getUpper()>();

        $r22 = (java.lang.Long) $r21;

        $l12 = virtualinvoke $r22.<java.lang.Long: long longValue()>();

        $b13 = $l11 cmp $l12;

        if $b13 < 0 goto label07;

        $r23 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r24 = $r23.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.concurrent.Future mStopTimeoutFuture>;

        if $r24 == null goto label06;

        $r29 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r30 = $r29.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.concurrent.Future mStopTimeoutFuture>;

        interfaceinvoke $r30.<java.util.concurrent.Future: boolean cancel(boolean)>(1);

     label06:
        $r25 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $l14 = r1.<android.media.MediaCodec$BufferInfo: long presentationTimeUs>;

        $r26 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l14);

        $r25.<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.Long mLastDataStopTimestamp> = $r26;

        $r27 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        virtualinvoke $r27.<androidx.camera.video.internal.encoder.EncoderImpl: void signalCodecStop()>();

        $r28 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r28.<androidx.camera.video.internal.encoder.EncoderImpl: boolean mPendingCodecStop> = 0;

     label07:
        return 0;

     label08:
        $z2 = specialinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: boolean updatePauseRangeStateAndCheckIfBufferPaused(android.media.MediaCodec$BufferInfo)>(r1);

        if $z2 == 0 goto label09;

        $r14 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r15 = $r14.<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.String mTag>;

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>($r15, "Drop buffer by pause.");

        return 0;

     label09:
        $r6 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $l8 = virtualinvoke $r6.<androidx.camera.video.internal.encoder.EncoderImpl: long getAdjustedTimeUs(android.media.MediaCodec$BufferInfo)>(r1);

        $l9 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: long mLastSentPresentationTimeUs>;

        $b10 = $l8 cmp $l9;

        if $b10 > 0 goto label11;

        $r11 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r12 = $r11.<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.String mTag>;

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>($r12, "Drop buffer by adjusted time is less than the last sent time.");

        $r13 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $z7 = $r13.<androidx.camera.video.internal.encoder.EncoderImpl: boolean mIsVideoEncoder>;

        if $z7 == 0 goto label10;

        $z8 = staticinvoke <androidx.camera.video.internal.encoder.EncoderImpl: boolean isKeyFrame(android.media.MediaCodec$BufferInfo)>(r1);

        if $z8 == 0 goto label10;

        r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: boolean mIsKeyFrameRequired> = 1;

     label10:
        return 0;

     label11:
        $z3 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: boolean mHasFirstData>;

        if $z3 != 0 goto label12;

        $z5 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: boolean mIsKeyFrameRequired>;

        if $z5 != 0 goto label12;

        $r10 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $z6 = $r10.<androidx.camera.video.internal.encoder.EncoderImpl: boolean mIsVideoEncoder>;

        if $z6 == 0 goto label12;

        r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: boolean mIsKeyFrameRequired> = 1;

     label12:
        $z11 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: boolean mIsKeyFrameRequired>;

        if $z11 == 0 goto label14;

        $z4 = staticinvoke <androidx.camera.video.internal.encoder.EncoderImpl: boolean isKeyFrame(android.media.MediaCodec$BufferInfo)>(r1);

        if $z4 != 0 goto label13;

        $r7 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r8 = $r7.<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.String mTag>;

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>($r8, "Drop buffer by not a key frame.");

        $r9 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        virtualinvoke $r9.<androidx.camera.video.internal.encoder.EncoderImpl: void requestKeyFrameToMediaCodec()>();

        return 0;

     label13:
        r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: boolean mIsKeyFrameRequired> = 0;

     label14:
        return 1;
    }

    private boolean updatePauseRangeStateAndCheckIfBufferPaused(android.media.MediaCodec$BufferInfo)
    {
        androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback r0;
        android.media.MediaCodec$BufferInfo r1;
        boolean z0, $z1, $z2, $z3, $z4, $z6, $z7, $z8, $z9, $z10;
        java.util.concurrent.Executor r2;
        androidx.camera.video.internal.encoder.EncoderCallback r3;
        java.lang.Object r4, $r13;
        long $l0, $l1, $l2;
        androidx.camera.video.internal.encoder.EncoderImpl $r5, $r6, $r7, $r9, $r10, $r12, $r14, $r15, $r18, $r21, $r23, $r24, $r25, $r27, $r28, $r29, $r31, $r32, $r37, $r39;
        java.lang.String $r8, $r11;
        java.lang.Runnable $r17;
        androidx.camera.video.internal.encoder.EncoderImpl$InternalState $r19, $r20;
        java.util.concurrent.Future $r22, $r26;
        androidx.camera.video.internal.encoder.Encoder$EncoderInput $r30, $r33;
        androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput $r34;
        androidx.camera.core.impl.Quirk $r35, $r36;
        java.lang.Long $r38;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback;

        r1 := @parameter0: android.media.MediaCodec$BufferInfo;

        $r5 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $l0 = r1.<android.media.MediaCodec$BufferInfo: long presentationTimeUs>;

        virtualinvoke $r5.<androidx.camera.video.internal.encoder.EncoderImpl: void updateTotalPausedDuration(long)>($l0);

        $r6 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $l1 = r1.<android.media.MediaCodec$BufferInfo: long presentationTimeUs>;

        z0 = virtualinvoke $r6.<androidx.camera.video.internal.encoder.EncoderImpl: boolean isInPauseRange(long)>($l1);

        $z1 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: boolean mIsOutputBufferInPauseState>;

        if $z1 != 0 goto label8;

        if z0 == 0 goto label8;

        $r10 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r11 = $r10.<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.String mTag>;

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>($r11, "Switch to pause state");

        r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: boolean mIsOutputBufferInPauseState> = 1;

        $r12 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r13 = $r12.<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.Object mLock>;

        r4 = $r13;

        entermonitor $r13;

        $r14 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        r2 = $r14.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.concurrent.Executor mEncoderCallbackExecutor>;

        $r15 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        r3 = $r15.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.EncoderCallback mEncoderCallback>;

        exitmonitor r4;

        goto label1;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r3);

        $r17 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.video.internal.encoder.EncoderCallback)>(r3) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_INTERFACE" <androidx.camera.video.internal.encoder.EncoderCallback: void onEncodePaused()>, methodtype: void __METHODTYPE__());

        interfaceinvoke r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r17);

        $r18 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r20 = $r18.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.EncoderImpl$InternalState mState>;

        $r19 = <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState PAUSED>;

        if $r20 != $r19 goto label5;

        $r27 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $z6 = $r27.<androidx.camera.video.internal.encoder.EncoderImpl: boolean mIsVideoEncoder>;

        if $z6 != 0 goto label2;

        $r36 = staticinvoke <androidx.camera.video.internal.compat.quirk.DeviceQuirks: androidx.camera.core.impl.Quirk get(java.lang.Class)>(class "Landroidx/camera/video/internal/compat/quirk/AudioEncoderIgnoresInputTimestampQuirk;");

        if $r36 == null goto label2;

        goto label5;

     label2:
        $r28 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $z7 = $r28.<androidx.camera.video.internal.encoder.EncoderImpl: boolean mIsVideoEncoder>;

        if $z7 == 0 goto label3;

        $r35 = staticinvoke <androidx.camera.video.internal.compat.quirk.DeviceQuirks: androidx.camera.core.impl.Quirk get(java.lang.Class)>(class "Landroidx/camera/video/internal/compat/quirk/VideoEncoderSuspendDoesNotIncludeSuspendTimeQuirk;");

        if $r35 == null goto label3;

        goto label5;

     label3:
        $r29 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r30 = $r29.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.Encoder$EncoderInput mEncoderInput>;

        $z8 = $r30 instanceof androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput;

        if $z8 == 0 goto label4;

        $r32 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r33 = $r32.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.Encoder$EncoderInput mEncoderInput>;

        $r34 = (androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput) $r33;

        virtualinvoke $r34.<androidx.camera.video.internal.encoder.EncoderImpl$ByteBufferInput: void setActive(boolean)>(0);

     label4:
        $r31 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        virtualinvoke $r31.<androidx.camera.video.internal.encoder.EncoderImpl: void setMediaCodecPaused(boolean)>(1);

     label5:
        $r37 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $l2 = r1.<android.media.MediaCodec$BufferInfo: long presentationTimeUs>;

        $r38 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r37.<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.Long mLastDataStopTimestamp> = $r38;

        $r39 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $z9 = $r39.<androidx.camera.video.internal.encoder.EncoderImpl: boolean mPendingCodecStop>;

        if $z9 == 0 goto label7;

        $r21 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r22 = $r21.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.concurrent.Future mStopTimeoutFuture>;

        if $r22 == null goto label6;

        $r25 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r26 = $r25.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.concurrent.Future mStopTimeoutFuture>;

        interfaceinvoke $r26.<java.util.concurrent.Future: boolean cancel(boolean)>(1);

     label6:
        $r23 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        virtualinvoke $r23.<androidx.camera.video.internal.encoder.EncoderImpl: void signalCodecStop()>();

        $r24 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r24.<androidx.camera.video.internal.encoder.EncoderImpl: boolean mPendingCodecStop> = 0;

     label7:
        goto label9;

     label8:
        $z2 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: boolean mIsOutputBufferInPauseState>;

        if $z2 == 0 goto label9;

        if z0 != 0 goto label9;

        $r7 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r8 = $r7.<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.String mTag>;

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>($r8, "Switch to resume state");

        r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: boolean mIsOutputBufferInPauseState> = 0;

        $r9 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $z3 = $r9.<androidx.camera.video.internal.encoder.EncoderImpl: boolean mIsVideoEncoder>;

        if $z3 == 0 goto label9;

        $z4 = staticinvoke <androidx.camera.video.internal.encoder.EncoderImpl: boolean isKeyFrame(android.media.MediaCodec$BufferInfo)>(r1);

        if $z4 != 0 goto label9;

        r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: boolean mIsKeyFrameRequired> = 1;

     label9:
        $z10 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: boolean mIsOutputBufferInPauseState>;

        return $z10;
    }

    public void onError(android.media.MediaCodec, android.media.MediaCodec$CodecException)
    {
        androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback r0;
        android.media.MediaCodec r1;
        android.media.MediaCodec$CodecException r2;
        androidx.camera.video.internal.encoder.EncoderImpl $r3;
        java.util.concurrent.Executor $r4;
        java.lang.Runnable $r5;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback;

        r1 := @parameter0: android.media.MediaCodec;

        r2 := @parameter1: android.media.MediaCodec$CodecException;

        $r3 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r4 = $r3.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.concurrent.Executor mEncoderExecutor>;

        $r5 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback,android.media.MediaCodec$CodecException)>(r0, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: void lambda$onError$4(android.media.MediaCodec$CodecException)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r4.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r5);

        return;
    }

    public void onOutputFormatChanged(android.media.MediaCodec, android.media.MediaFormat)
    {
        androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback r0;
        android.media.MediaCodec r1;
        android.media.MediaFormat r2;
        androidx.camera.video.internal.encoder.EncoderImpl $r3;
        java.util.concurrent.Executor $r4;
        java.lang.Runnable $r5;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback;

        r1 := @parameter0: android.media.MediaCodec;

        r2 := @parameter1: android.media.MediaFormat;

        $r3 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r4 = $r3.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.concurrent.Executor mEncoderExecutor>;

        $r5 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback,android.media.MediaFormat)>(r0, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: void lambda$onOutputFormatChanged$7(android.media.MediaFormat)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r4.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r5);

        return;
    }

    private void lambda$onOutputFormatChanged$7(android.media.MediaFormat)
    {
        androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback r0;
        android.media.MediaFormat r1;
        androidx.camera.video.internal.encoder.EncoderCallback r2;
        java.util.concurrent.Executor r3;
        androidx.camera.video.internal.encoder.EncoderImpl $r4, $r7, $r9, $r10, $r15, $r20;
        androidx.camera.video.internal.encoder.EncoderImpl$InternalState $r5, $r16;
        int[] $r6;
        int $i0, $i1;
        java.lang.Object $r8, r22;
        java.lang.Runnable $r11;
        java.lang.IllegalStateException $r12;
        java.lang.StringBuilder $r13, $r14, $r17;
        java.lang.String $r18, $r21;
        java.lang.Throwable $r19, r23;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback;

        r1 := @parameter0: android.media.MediaFormat;

        $r6 = <androidx.camera.video.internal.encoder.EncoderImpl$2: int[] $SwitchMap$androidx$camera$video$internal$encoder$EncoderImpl$InternalState>;

        $r4 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r5 = $r4.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.EncoderImpl$InternalState mState>;

        $i0 = virtualinvoke $r5.<androidx.camera.video.internal.encoder.EncoderImpl$InternalState: int ordinal()>();

        $i1 = $r6[$i0];

        tableswitch($i1)
        {
            case 1: goto label5;
            case 2: goto label1;
            case 3: goto label1;
            case 4: goto label1;
            case 5: goto label1;
            case 6: goto label1;
            case 7: goto label1;
            case 8: goto label5;
            case 9: goto label5;
            default: goto label6;
        };

     label1:
        $r7 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r8 = $r7.<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.Object mLock>;

        r22 = $r8;

        entermonitor $r8;

        $r9 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        r2 = $r9.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.EncoderCallback mEncoderCallback>;

        $r10 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        r3 = $r10.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.concurrent.Executor mEncoderCallbackExecutor>;

        exitmonitor r22;

        goto label2;

     label2:
        $r11 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.video.internal.encoder.EncoderCallback,android.media.MediaFormat)>(r2, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: void lambda$onOutputFormatChanged$6(androidx.camera.video.internal.encoder.EncoderCallback,android.media.MediaFormat)>, methodtype: void __METHODTYPE__());

        interfaceinvoke r3.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r11);

     label3:
        goto label7;

     label4:
        $r19 := @caughtexception;

        r23 = $r19;

        $r20 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r21 = $r20.<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.String mTag>;

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>($r21, "Unable to post to the supplied executor.", r23);

        goto label7;

     label5:
        goto label7;

     label6:
        $r12 = new java.lang.IllegalStateException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown state: ");

        $r15 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r16 = $r15.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.EncoderImpl$InternalState mState>;

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r18);

        throw $r12;

     label7:
        return;

        catch java.util.concurrent.RejectedExecutionException from label2 to label3 with label4;
    }

    private static void lambda$onOutputFormatChanged$6(androidx.camera.video.internal.encoder.EncoderCallback, android.media.MediaFormat)
    {
        androidx.camera.video.internal.encoder.EncoderCallback r0;
        android.media.MediaFormat r1;
        androidx.camera.video.internal.encoder.OutputConfig $r2;

        r0 := @parameter0: androidx.camera.video.internal.encoder.EncoderCallback;

        r1 := @parameter1: android.media.MediaFormat;

        $r2 = dynamicinvoke "getMediaFormat" <androidx.camera.video.internal.encoder.OutputConfig (android.media.MediaFormat)>(r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: android.media.MediaFormat __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: android.media.MediaFormat lambda$onOutputFormatChanged$5(android.media.MediaFormat)>, methodtype: android.media.MediaFormat __METHODTYPE__());

        interfaceinvoke r0.<androidx.camera.video.internal.encoder.EncoderCallback: void onOutputConfigUpdate(androidx.camera.video.internal.encoder.OutputConfig)>($r2);

        return;
    }

    private static android.media.MediaFormat lambda$onOutputFormatChanged$5(android.media.MediaFormat)
    {
        android.media.MediaFormat r0;

        r0 := @parameter0: android.media.MediaFormat;

        return r0;
    }

    private void lambda$onError$4(android.media.MediaCodec$CodecException)
    {
        androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback r0;
        android.media.MediaCodec$CodecException r1;
        androidx.camera.video.internal.encoder.EncoderImpl $r2, $r5, $r9;
        androidx.camera.video.internal.encoder.EncoderImpl$InternalState $r3, $r10;
        int[] $r4;
        int $i0, $i1;
        java.lang.IllegalStateException $r6;
        java.lang.StringBuilder $r7, $r8, $r11;
        java.lang.String $r12;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback;

        r1 := @parameter0: android.media.MediaCodec$CodecException;

        $r4 = <androidx.camera.video.internal.encoder.EncoderImpl$2: int[] $SwitchMap$androidx$camera$video$internal$encoder$EncoderImpl$InternalState>;

        $r2 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r3 = $r2.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.EncoderImpl$InternalState mState>;

        $i0 = virtualinvoke $r3.<androidx.camera.video.internal.encoder.EncoderImpl$InternalState: int ordinal()>();

        $i1 = $r4[$i0];

        tableswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label1;
            case 3: goto label1;
            case 4: goto label1;
            case 5: goto label1;
            case 6: goto label1;
            case 7: goto label1;
            case 8: goto label2;
            case 9: goto label2;
            default: goto label3;
        };

     label1:
        $r5 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        virtualinvoke $r5.<androidx.camera.video.internal.encoder.EncoderImpl: void handleEncodeError(android.media.MediaCodec$CodecException)>(r1);

        goto label4;

     label2:
        goto label4;

     label3:
        $r6 = new java.lang.IllegalStateException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown state: ");

        $r9 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r10 = $r9.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.EncoderImpl$InternalState mState>;

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw $r6;

     label4:
        return;
    }

    private static void lambda$sendEncodedData$3(androidx.camera.video.internal.encoder.EncoderCallback, androidx.camera.video.internal.encoder.EncodedDataImpl)
    {
        androidx.camera.video.internal.encoder.EncoderCallback r0;
        androidx.camera.video.internal.encoder.EncodedDataImpl r1;

        r0 := @parameter0: androidx.camera.video.internal.encoder.EncoderCallback;

        r1 := @parameter1: androidx.camera.video.internal.encoder.EncodedDataImpl;

        interfaceinvoke r0.<androidx.camera.video.internal.encoder.EncoderCallback: void onEncodedData(androidx.camera.video.internal.encoder.EncodedData)>(r1);

        return;
    }

    private void lambda$onOutputBufferAvailable$2(android.media.MediaCodec$BufferInfo, android.media.MediaCodec, int)
    {
        androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback r0;
        android.media.MediaCodec$BufferInfo r1;
        android.media.MediaCodec r2, $r13;
        int i0, $i1, $i2;
        androidx.camera.video.internal.encoder.EncoderCallback r3;
        java.util.concurrent.Executor r4;
        androidx.camera.video.internal.encoder.EncoderImpl $r5, $r8, $r10, $r11, $r12, $r14, $r16, $r22, $r27, $r29, $r32;
        androidx.camera.video.internal.encoder.EncoderImpl$InternalState $r6, $r23;
        int[] $r7;
        java.lang.Object $r9, r33;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Runnable $r15, $r18;
        long $l3, $l5, l7, $l8;
        byte $b4, $b6;
        java.lang.IllegalStateException $r19;
        java.lang.StringBuilder $r20, $r21, $r24;
        java.lang.String $r25, $r30;
        java.lang.Throwable $r26, $r28, $r31, r34, r37, r38;
        androidx.camera.video.internal.encoder.EncodedDataImpl $r35, r36;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback;

        r1 := @parameter0: android.media.MediaCodec$BufferInfo;

        r2 := @parameter1: android.media.MediaCodec;

        i0 := @parameter2: int;

        $r7 = <androidx.camera.video.internal.encoder.EncoderImpl$2: int[] $SwitchMap$androidx$camera$video$internal$encoder$EncoderImpl$InternalState>;

        $r5 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r6 = $r5.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.EncoderImpl$InternalState mState>;

        $i1 = virtualinvoke $r6.<androidx.camera.video.internal.encoder.EncoderImpl$InternalState: int ordinal()>();

        $i2 = $r7[$i1];

        tableswitch($i2)
        {
            case 1: goto label19;
            case 2: goto label01;
            case 3: goto label01;
            case 4: goto label01;
            case 5: goto label01;
            case 6: goto label01;
            case 7: goto label01;
            case 8: goto label19;
            case 9: goto label19;
            default: goto label20;
        };

     label01:
        $r8 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r9 = $r8.<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.Object mLock>;

        r33 = $r9;

        entermonitor $r9;

        $r10 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        r3 = $r10.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.EncoderCallback mEncoderCallback>;

        $r11 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        r4 = $r11.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.concurrent.Executor mEncoderCallbackExecutor>;

        exitmonitor r33;

        goto label02;

     label02:
        $z0 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: boolean mHasSendStartCallback>;

        if $z0 != 0 goto label06;

        r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: boolean mHasSendStartCallback> = 1;

     label03:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r3);

        $r18 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.video.internal.encoder.EncoderCallback)>(r3) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_INTERFACE" <androidx.camera.video.internal.encoder.EncoderCallback: void onEncodeStart()>, methodtype: void __METHODTYPE__());

        interfaceinvoke r4.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r18);

     label04:
        goto label06;

     label05:
        $r28 := @caughtexception;

        r34 = $r28;

        $r29 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r30 = $r29.<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.String mTag>;

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>($r30, "Unable to post to the supplied executor.", r34);

     label06:
        $z4 = specialinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: boolean checkBufferInfo(android.media.MediaCodec$BufferInfo)>(r1);

        if $z4 == 0 goto label15;

        $z3 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: boolean mHasFirstData>;

        if $z3 != 0 goto label07;

        r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: boolean mHasFirstData> = 1;

     label07:
        $r16 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        l7 = virtualinvoke $r16.<androidx.camera.video.internal.encoder.EncoderImpl: long getAdjustedTimeUs(android.media.MediaCodec$BufferInfo)>(r1);

        $l3 = r1.<android.media.MediaCodec$BufferInfo: long presentationTimeUs>;

        $b4 = $l3 cmp l7;

        if $b4 == 0 goto label10;

        $l5 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: long mLastSentPresentationTimeUs>;

        $b6 = l7 cmp $l5;

        if $b6 <= 0 goto label08;

        $z5 = 1;

        goto label09;

     label08:
        $z5 = 0;

     label09:
        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean)>($z5);

        r1.<android.media.MediaCodec$BufferInfo: long presentationTimeUs> = l7;

     label10:
        $l8 = r1.<android.media.MediaCodec$BufferInfo: long presentationTimeUs>;

        r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: long mLastSentPresentationTimeUs> = $l8;

     label11:
        $r35 = new androidx.camera.video.internal.encoder.EncodedDataImpl;

        specialinvoke $r35.<androidx.camera.video.internal.encoder.EncodedDataImpl: void <init>(android.media.MediaCodec,int,android.media.MediaCodec$BufferInfo)>(r2, i0, r1);

        r36 = $r35;

        specialinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: void sendEncodedData(androidx.camera.video.internal.encoder.EncodedDataImpl,androidx.camera.video.internal.encoder.EncoderCallback,java.util.concurrent.Executor)>(r36, r3, r4);

     label12:
        goto label14;

     label13:
        $r26 := @caughtexception;

        r37 = $r26;

        $r27 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        virtualinvoke $r27.<androidx.camera.video.internal.encoder.EncoderImpl: void handleEncodeError(android.media.MediaCodec$CodecException)>(r37);

        return;

     label14:
        goto label18;

     label15:
        $r12 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r13 = $r12.<androidx.camera.video.internal.encoder.EncoderImpl: android.media.MediaCodec mMediaCodec>;

        virtualinvoke $r13.<android.media.MediaCodec: void releaseOutputBuffer(int,boolean)>(i0, 0);

     label16:
        goto label18;

     label17:
        $r31 := @caughtexception;

        r38 = $r31;

        $r32 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        virtualinvoke $r32.<androidx.camera.video.internal.encoder.EncoderImpl: void handleEncodeError(android.media.MediaCodec$CodecException)>(r38);

        return;

     label18:
        $z1 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: boolean mHasEndData>;

        if $z1 != 0 goto label21;

        $z2 = staticinvoke <androidx.camera.video.internal.encoder.EncoderImpl: boolean isEndOfStream(android.media.MediaCodec$BufferInfo)>(r1);

        if $z2 == 0 goto label21;

        r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: boolean mHasEndData> = 1;

        $r14 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r15 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback,java.util.concurrent.Executor,androidx.camera.video.internal.encoder.EncoderCallback)>(r0, r4, r3) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: void lambda$onOutputBufferAvailable$1(java.util.concurrent.Executor,androidx.camera.video.internal.encoder.EncoderCallback)>, methodtype: void __METHODTYPE__());

        virtualinvoke $r14.<androidx.camera.video.internal.encoder.EncoderImpl: void stopMediaCodec(java.lang.Runnable)>($r15);

        goto label21;

     label19:
        goto label21;

     label20:
        $r19 = new java.lang.IllegalStateException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown state: ");

        $r22 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r23 = $r22.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.EncoderImpl$InternalState mState>;

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r25);

        throw $r19;

     label21:
        return;

        catch java.util.concurrent.RejectedExecutionException from label03 to label04 with label05;
        catch android.media.MediaCodec$CodecException from label11 to label12 with label13;
        catch android.media.MediaCodec$CodecException from label15 to label16 with label17;
    }

    private void lambda$onOutputBufferAvailable$1(java.util.concurrent.Executor, androidx.camera.video.internal.encoder.EncoderCallback)
    {
        androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback r0;
        java.util.concurrent.Executor r1;
        androidx.camera.video.internal.encoder.EncoderCallback r2;
        java.lang.Throwable r3, $r9;
        androidx.camera.video.internal.encoder.EncoderImpl $r4, $r10;
        androidx.camera.video.internal.encoder.EncoderImpl$InternalState $r5, $r6;
        java.lang.Runnable $r8;
        java.lang.String $r11;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: androidx.camera.video.internal.encoder.EncoderCallback;

        $r4 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r6 = $r4.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.EncoderImpl$InternalState mState>;

        $r5 = <androidx.camera.video.internal.encoder.EncoderImpl$InternalState: androidx.camera.video.internal.encoder.EncoderImpl$InternalState ERROR>;

        if $r6 != $r5 goto label1;

        return;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        $r8 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.video.internal.encoder.EncoderCallback)>(r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_INTERFACE" <androidx.camera.video.internal.encoder.EncoderCallback: void onEncodeStop()>, methodtype: void __METHODTYPE__());

        interfaceinvoke r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r8);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        r3 = $r9;

        $r10 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r11 = $r10.<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.String mTag>;

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>($r11, "Unable to post to the supplied executor.", r3);

     label4:
        return;

        catch java.util.concurrent.RejectedExecutionException from label1 to label2 with label3;
    }

    private void lambda$onInputBufferAvailable$0(int)
    {
        androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback r0;
        int i0, $i1, $i2;
        androidx.camera.video.internal.encoder.EncoderImpl $r1, $r4, $r7, $r11;
        androidx.camera.video.internal.encoder.EncoderImpl$InternalState $r2, $r12;
        int[] $r3;
        java.util.Queue $r5;
        java.lang.Integer $r6;
        java.lang.IllegalStateException $r8;
        java.lang.StringBuilder $r9, $r10, $r13;
        java.lang.String $r14;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback;

        i0 := @parameter0: int;

        $r3 = <androidx.camera.video.internal.encoder.EncoderImpl$2: int[] $SwitchMap$androidx$camera$video$internal$encoder$EncoderImpl$InternalState>;

        $r1 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r2 = $r1.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.EncoderImpl$InternalState mState>;

        $i1 = virtualinvoke $r2.<androidx.camera.video.internal.encoder.EncoderImpl$InternalState: int ordinal()>();

        $i2 = $r3[$i1];

        tableswitch($i2)
        {
            case 1: goto label2;
            case 2: goto label1;
            case 3: goto label1;
            case 4: goto label1;
            case 5: goto label1;
            case 6: goto label1;
            case 7: goto label1;
            case 8: goto label2;
            case 9: goto label2;
            default: goto label3;
        };

     label1:
        $r4 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r5 = $r4.<androidx.camera.video.internal.encoder.EncoderImpl: java.util.Queue mFreeInputBufferIndexQueue>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r5.<java.util.Queue: boolean offer(java.lang.Object)>($r6);

        $r7 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        virtualinvoke $r7.<androidx.camera.video.internal.encoder.EncoderImpl: void matchAcquisitionsAndFreeBufferIndexes()>();

        goto label4;

     label2:
        goto label4;

     label3:
        $r8 = new java.lang.IllegalStateException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown state: ");

        $r11 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$MediaCodecCallback: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r12 = $r11.<androidx.camera.video.internal.encoder.EncoderImpl: androidx.camera.video.internal.encoder.EncoderImpl$InternalState mState>;

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        throw $r8;

     label4:
        return;
    }

androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput
<androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput: java.lang.Object mLock>
<androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput: android.view.Surface mSurface>
<androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput: java.util.Set mObsoleteSurfaces>
<androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput: androidx.camera.video.internal.encoder.Encoder$SurfaceInput$OnSurfaceUpdateListener mSurfaceUpdateListener>
<androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput: java.util.concurrent.Executor mSurfaceUpdateExecutor>
<androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput: androidx.camera.video.internal.encoder.EncoderImpl this$0>
    void <init>(androidx.camera.video.internal.encoder.EncoderImpl)
    {
        androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput r0;
        androidx.camera.video.internal.encoder.EncoderImpl r1;
        java.lang.Object $r2;
        java.util.HashSet $r3;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput;

        r1 := @parameter0: androidx.camera.video.internal.encoder.EncoderImpl;

        r0.<androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput: androidx.camera.video.internal.encoder.EncoderImpl this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput: java.lang.Object mLock> = $r2;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r0.<androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput: java.util.Set mObsoleteSurfaces> = $r3;

        return;
    }

    public void setOnSurfaceUpdateListener(java.util.concurrent.Executor, androidx.camera.video.internal.encoder.Encoder$SurfaceInput$OnSurfaceUpdateListener)
    {
        androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput r0;
        java.util.concurrent.Executor r1, $r10;
        androidx.camera.video.internal.encoder.Encoder$SurfaceInput$OnSurfaceUpdateListener r2, $r8;
        android.view.Surface r3;
        java.lang.Object r4, $r6, $r7, $r9;
        java.lang.Throwable r5, $r11;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: androidx.camera.video.internal.encoder.Encoder$SurfaceInput$OnSurfaceUpdateListener;

        $r6 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput: java.lang.Object mLock>;

        r4 = $r6;

        entermonitor $r6;

     label1:
        $r7 = staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r8 = (androidx.camera.video.internal.encoder.Encoder$SurfaceInput$OnSurfaceUpdateListener) $r7;

        r0.<androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput: androidx.camera.video.internal.encoder.Encoder$SurfaceInput$OnSurfaceUpdateListener mSurfaceUpdateListener> = $r8;

        $r9 = staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r10 = (java.util.concurrent.Executor) $r9;

        r0.<androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput: java.util.concurrent.Executor mSurfaceUpdateExecutor> = $r10;

        r3 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput: android.view.Surface mSurface>;

        exitmonitor r4;

     label2:
        goto label5;

     label3:
        $r11 := @caughtexception;

        r5 = $r11;

        exitmonitor r4;

     label4:
        throw r5;

     label5:
        if r3 == null goto label6;

        specialinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput: void notifySurfaceUpdate(java.util.concurrent.Executor,androidx.camera.video.internal.encoder.Encoder$SurfaceInput$OnSurfaceUpdateListener,android.view.Surface)>(r1, r2, r3);

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    void resetSurface()
    {
        androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput r0;
        java.util.concurrent.Executor r1;
        androidx.camera.video.internal.encoder.Encoder$SurfaceInput$OnSurfaceUpdateListener r2;
        androidx.camera.video.internal.compat.quirk.EncoderNotUsePersistentInputSurfaceQuirk r3;
        java.lang.Object r4, $r7;
        java.lang.Throwable r5, $r19;
        androidx.camera.core.impl.Quirk $r6;
        android.view.Surface $r8, $r11, $r12, $r14, $r16, $r18, r20;
        androidx.camera.video.internal.encoder.EncoderImpl $r9, $r15;
        android.media.MediaCodec $r10, $r17;
        java.util.Set $r13;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput;

        $r6 = staticinvoke <androidx.camera.video.internal.compat.quirk.DeviceQuirks: androidx.camera.core.impl.Quirk get(java.lang.Class)>(class "Landroidx/camera/video/internal/compat/quirk/EncoderNotUsePersistentInputSurfaceQuirk;");

        r3 = (androidx.camera.video.internal.compat.quirk.EncoderNotUsePersistentInputSurfaceQuirk) $r6;

        $r7 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput: java.lang.Object mLock>;

        r4 = $r7;

        entermonitor $r7;

     label01:
        if r3 != null goto label04;

        $r14 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput: android.view.Surface mSurface>;

        if $r14 != null goto label02;

        $r18 = staticinvoke <androidx.camera.video.internal.encoder.EncoderImpl$Api23Impl: android.view.Surface createPersistentInputSurface()>();

        r0.<androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput: android.view.Surface mSurface> = $r18;

        r20 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput: android.view.Surface mSurface>;

        goto label03;

     label02:
        r20 = null;

     label03:
        $r15 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r17 = $r15.<androidx.camera.video.internal.encoder.EncoderImpl: android.media.MediaCodec mMediaCodec>;

        $r16 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput: android.view.Surface mSurface>;

        staticinvoke <androidx.camera.video.internal.encoder.EncoderImpl$Api23Impl: void setInputSurface(android.media.MediaCodec,android.view.Surface)>($r17, $r16);

        goto label06;

     label04:
        $r8 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput: android.view.Surface mSurface>;

        if $r8 == null goto label05;

        $r13 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput: java.util.Set mObsoleteSurfaces>;

        $r12 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput: android.view.Surface mSurface>;

        interfaceinvoke $r13.<java.util.Set: boolean add(java.lang.Object)>($r12);

     label05:
        $r9 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r10 = $r9.<androidx.camera.video.internal.encoder.EncoderImpl: android.media.MediaCodec mMediaCodec>;

        $r11 = virtualinvoke $r10.<android.media.MediaCodec: android.view.Surface createInputSurface()>();

        r0.<androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput: android.view.Surface mSurface> = $r11;

        r20 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput: android.view.Surface mSurface>;

     label06:
        r2 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput: androidx.camera.video.internal.encoder.Encoder$SurfaceInput$OnSurfaceUpdateListener mSurfaceUpdateListener>;

        r1 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput: java.util.concurrent.Executor mSurfaceUpdateExecutor>;

        exitmonitor r4;

     label07:
        goto label10;

     label08:
        $r19 := @caughtexception;

        r5 = $r19;

        exitmonitor r4;

     label09:
        throw r5;

     label10:
        if r20 == null goto label11;

        if r2 == null goto label11;

        if r1 == null goto label11;

        specialinvoke r0.<androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput: void notifySurfaceUpdate(java.util.concurrent.Executor,androidx.camera.video.internal.encoder.Encoder$SurfaceInput$OnSurfaceUpdateListener,android.view.Surface)>(r1, r2, r20);

     label11:
        return;

        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    void releaseSurface()
    {
        androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput r0;
        android.view.Surface r1, r12;
        java.util.HashSet r2, $r4;
        java.lang.Object $r3, $r7, r9;
        java.util.Set $r5, $r6;
        java.lang.Throwable $r8, r10;
        java.util.Iterator r11;
        boolean $z0;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput;

        $r3 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput: java.lang.Object mLock>;

        r9 = $r3;

        entermonitor $r3;

     label1:
        r1 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput: android.view.Surface mSurface>;

        r0.<androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput: android.view.Surface mSurface> = null;

        $r4 = new java.util.HashSet;

        $r5 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput: java.util.Set mObsoleteSurfaces>;

        specialinvoke $r4.<java.util.HashSet: void <init>(java.util.Collection)>($r5);

        r2 = $r4;

        $r6 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput: java.util.Set mObsoleteSurfaces>;

        interfaceinvoke $r6.<java.util.Set: void clear()>();

        exitmonitor r9;

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        r10 = $r8;

        exitmonitor r9;

     label4:
        throw r10;

     label5:
        if r1 == null goto label6;

        virtualinvoke r1.<android.view.Surface: void release()>();

     label6:
        r11 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

     label7:
        $z0 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r7 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        r12 = (android.view.Surface) $r7;

        virtualinvoke r12.<android.view.Surface: void release()>();

        goto label7;

     label8:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void notifySurfaceUpdate(java.util.concurrent.Executor, androidx.camera.video.internal.encoder.Encoder$SurfaceInput$OnSurfaceUpdateListener, android.view.Surface)
    {
        androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput r0;
        java.util.concurrent.Executor r1;
        androidx.camera.video.internal.encoder.Encoder$SurfaceInput$OnSurfaceUpdateListener r2;
        android.view.Surface r3;
        java.lang.Throwable r4, $r6;
        java.lang.Runnable $r5;
        androidx.camera.video.internal.encoder.EncoderImpl $r7;
        java.lang.String $r8;

        r0 := @this: androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: androidx.camera.video.internal.encoder.Encoder$SurfaceInput$OnSurfaceUpdateListener;

        r3 := @parameter2: android.view.Surface;

     label1:
        $r5 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.video.internal.encoder.Encoder$SurfaceInput$OnSurfaceUpdateListener,android.view.Surface)>(r2, r3) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput: void lambda$notifySurfaceUpdate$0(androidx.camera.video.internal.encoder.Encoder$SurfaceInput$OnSurfaceUpdateListener,android.view.Surface)>, methodtype: void __METHODTYPE__());

        interfaceinvoke r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r5);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r4 = $r6;

        $r7 = r0.<androidx.camera.video.internal.encoder.EncoderImpl$SurfaceInput: androidx.camera.video.internal.encoder.EncoderImpl this$0>;

        $r8 = $r7.<androidx.camera.video.internal.encoder.EncoderImpl: java.lang.String mTag>;

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>($r8, "Unable to post to the supplied executor.", r4);

     label4:
        return;

        catch java.util.concurrent.RejectedExecutionException from label1 to label2 with label3;
    }

    private static void lambda$notifySurfaceUpdate$0(androidx.camera.video.internal.encoder.Encoder$SurfaceInput$OnSurfaceUpdateListener, android.view.Surface)
    {
        androidx.camera.video.internal.encoder.Encoder$SurfaceInput$OnSurfaceUpdateListener r0;
        android.view.Surface r1;

        r0 := @parameter0: androidx.camera.video.internal.encoder.Encoder$SurfaceInput$OnSurfaceUpdateListener;

        r1 := @parameter1: android.view.Surface;

        interfaceinvoke r0.<androidx.camera.video.internal.encoder.Encoder$SurfaceInput$OnSurfaceUpdateListener: void onSurfaceUpdate(android.view.Surface)>(r1);

        return;
    }

