androidx.room.compiler.processing.ksp.KspExecutableType
<androidx.room.compiler.processing.ksp.KspExecutableType: androidx.room.compiler.processing.ksp.KspProcessingEnv env>
<androidx.room.compiler.processing.ksp.KspExecutableType: androidx.room.compiler.processing.ksp.KspExecutableElement origin>
<androidx.room.compiler.processing.ksp.KspExecutableType: androidx.room.compiler.processing.ksp.KspType containing>
<androidx.room.compiler.processing.ksp.KspExecutableType: kotlin.Lazy parameterTypes$delegate>
    public void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv, androidx.room.compiler.processing.ksp.KspExecutableElement, androidx.room.compiler.processing.ksp.KspType)
    {
        androidx.room.compiler.processing.ksp.KspExecutableType r0;
        androidx.room.compiler.processing.ksp.KspProcessingEnv r1;
        androidx.room.compiler.processing.ksp.KspExecutableElement r2;
        androidx.room.compiler.processing.ksp.KspType r3;
        androidx.room.compiler.processing.ksp.KspExecutableType$parameterTypes$2 $r4;
        kotlin.jvm.functions.Function0 $r5;
        kotlin.Lazy $r6;

        r0 := @this: androidx.room.compiler.processing.ksp.KspExecutableType;

        r1 := @parameter0: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        r2 := @parameter1: androidx.room.compiler.processing.ksp.KspExecutableElement;

        r3 := @parameter2: androidx.room.compiler.processing.ksp.KspType;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "env");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "origin");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.room.compiler.processing.ksp.KspExecutableType: androidx.room.compiler.processing.ksp.KspProcessingEnv env> = r1;

        r0.<androidx.room.compiler.processing.ksp.KspExecutableType: androidx.room.compiler.processing.ksp.KspExecutableElement origin> = r2;

        r0.<androidx.room.compiler.processing.ksp.KspExecutableType: androidx.room.compiler.processing.ksp.KspType containing> = r3;

        $r4 = new androidx.room.compiler.processing.ksp.KspExecutableType$parameterTypes$2;

        specialinvoke $r4.<androidx.room.compiler.processing.ksp.KspExecutableType$parameterTypes$2: void <init>(androidx.room.compiler.processing.ksp.KspExecutableType)>(r0);

        $r5 = (kotlin.jvm.functions.Function0) $r4;

        $r6 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)>($r5);

        r0.<androidx.room.compiler.processing.ksp.KspExecutableType: kotlin.Lazy parameterTypes$delegate> = $r6;

        return;
    }

    public final androidx.room.compiler.processing.ksp.KspProcessingEnv getEnv()
    {
        androidx.room.compiler.processing.ksp.KspExecutableType r0;
        androidx.room.compiler.processing.ksp.KspProcessingEnv $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspExecutableType;

        $r1 = r0.<androidx.room.compiler.processing.ksp.KspExecutableType: androidx.room.compiler.processing.ksp.KspProcessingEnv env>;

        return $r1;
    }

    public androidx.room.compiler.processing.ksp.KspExecutableElement getOrigin()
    {
        androidx.room.compiler.processing.ksp.KspExecutableType r0;
        androidx.room.compiler.processing.ksp.KspExecutableElement $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspExecutableType;

        $r1 = r0.<androidx.room.compiler.processing.ksp.KspExecutableType: androidx.room.compiler.processing.ksp.KspExecutableElement origin>;

        return $r1;
    }

    public final androidx.room.compiler.processing.ksp.KspType getContaining()
    {
        androidx.room.compiler.processing.ksp.KspExecutableType r0;
        androidx.room.compiler.processing.ksp.KspType $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspExecutableType;

        $r1 = r0.<androidx.room.compiler.processing.ksp.KspExecutableType: androidx.room.compiler.processing.ksp.KspType containing>;

        return $r1;
    }

    public java.util.List getParameterTypes()
    {
        androidx.room.compiler.processing.ksp.KspExecutableType r0;
        kotlin.Lazy r1;
        java.lang.Object $r2;
        java.util.List $r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspExecutableType;

        r1 = r0.<androidx.room.compiler.processing.ksp.KspExecutableType: kotlin.Lazy parameterTypes$delegate>;

        $r2 = interfaceinvoke r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r3 = (java.util.List) $r2;

        return $r3;
    }

    public java.util.List getThrownTypes()
    {
        androidx.room.compiler.processing.ksp.KspExecutableType r0;
        androidx.room.compiler.processing.ksp.KspExecutableElement $r1;
        java.util.List $r2;

        r0 := @this: androidx.room.compiler.processing.ksp.KspExecutableType;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspExecutableType: androidx.room.compiler.processing.ksp.KspExecutableElement getOrigin()>();

        $r2 = virtualinvoke $r1.<androidx.room.compiler.processing.ksp.KspExecutableElement: java.util.List getThrownTypes()>();

        return $r2;
    }

    public boolean isSameType(androidx.room.compiler.processing.XExecutableType)
    {
        androidx.room.compiler.processing.ksp.KspExecutableType r0;
        androidx.room.compiler.processing.XExecutableType r1, $r2;
        androidx.room.compiler.processing.ksp.KspProcessingEnv $r3;
        boolean $z0;

        r0 := @this: androidx.room.compiler.processing.ksp.KspExecutableType;

        r1 := @parameter0: androidx.room.compiler.processing.XExecutableType;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "other");

        $r3 = r0.<androidx.room.compiler.processing.ksp.KspExecutableType: androidx.room.compiler.processing.ksp.KspProcessingEnv env>;

        $r2 = (androidx.room.compiler.processing.XExecutableType) r0;

        $z0 = virtualinvoke $r3.<androidx.room.compiler.processing.ksp.KspProcessingEnv: boolean isSameType$room_compiler_processing(androidx.room.compiler.processing.XExecutableType,androidx.room.compiler.processing.XExecutableType)>($r2, r1);

        return $z0;
    }

androidx.room.compiler.processing.ksp.KspExecutableType$parameterTypes$2
<androidx.room.compiler.processing.ksp.KspExecutableType$parameterTypes$2: androidx.room.compiler.processing.ksp.KspExecutableType this$0>
    void <init>(androidx.room.compiler.processing.ksp.KspExecutableType)
    {
        androidx.room.compiler.processing.ksp.KspExecutableType$parameterTypes$2 r0;
        androidx.room.compiler.processing.ksp.KspExecutableType $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspExecutableType$parameterTypes$2;

        $r1 := @parameter0: androidx.room.compiler.processing.ksp.KspExecutableType;

        r0.<androidx.room.compiler.processing.ksp.KspExecutableType$parameterTypes$2: androidx.room.compiler.processing.ksp.KspExecutableType this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final java.util.List invoke()
    {
        androidx.room.compiler.processing.ksp.KspExecutableType$parameterTypes$2 r0;
        androidx.room.compiler.processing.ksp.KspExecutableType $r1, $r3, $r10, $r23;
        androidx.room.compiler.processing.ksp.KspType $r2, $r7;
        androidx.room.compiler.processing.ksp.KspExecutableElement $r4, $r11;
        java.util.List $r5, $r12, $r21;
        java.util.ArrayList $r6, $r13;
        int $i0, $i1;
        boolean $z1, $z3;
        androidx.room.compiler.processing.XType $r8, $r9, $r14;
        java.lang.Iterable $r15, $r22, r24;
        java.util.Collection r16, r20, $r25, r29;
        java.util.Iterator $r17, r26;
        java.lang.Object r18, r27;
        androidx.room.compiler.processing.XExecutableParameterElement r19, $r28;

        r0 := @this: androidx.room.compiler.processing.ksp.KspExecutableType$parameterTypes$2;

        $r1 = r0.<androidx.room.compiler.processing.ksp.KspExecutableType$parameterTypes$2: androidx.room.compiler.processing.ksp.KspExecutableType this$0>;

        $r2 = virtualinvoke $r1.<androidx.room.compiler.processing.ksp.KspExecutableType: androidx.room.compiler.processing.ksp.KspType getContaining()>();

        if $r2 != null goto label3;

        $r10 = r0.<androidx.room.compiler.processing.ksp.KspExecutableType$parameterTypes$2: androidx.room.compiler.processing.ksp.KspExecutableType this$0>;

        $r11 = virtualinvoke $r10.<androidx.room.compiler.processing.ksp.KspExecutableType: androidx.room.compiler.processing.ksp.KspExecutableElement getOrigin()>();

        $r12 = virtualinvoke $r11.<androidx.room.compiler.processing.ksp.KspExecutableElement: java.util.List getParameters()>();

        $r15 = (java.lang.Iterable) $r12;

        $r13 = new java.util.ArrayList;

        $i1 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r15, 10);

        specialinvoke $r13.<java.util.ArrayList: void <init>(int)>($i1);

        r16 = (java.util.Collection) $r13;

        $r17 = interfaceinvoke $r15.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke $r17.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label2;

        r18 = interfaceinvoke $r17.<java.util.Iterator: java.lang.Object next()>();

        r19 = (androidx.room.compiler.processing.XExecutableParameterElement) r18;

        r20 = r16;

        $r14 = interfaceinvoke r19.<androidx.room.compiler.processing.XExecutableParameterElement: androidx.room.compiler.processing.XType getType()>();

        interfaceinvoke r20.<java.util.Collection: boolean add(java.lang.Object)>($r14);

        goto label1;

     label2:
        $r21 = (java.util.List) r16;

        goto label6;

     label3:
        $r3 = r0.<androidx.room.compiler.processing.ksp.KspExecutableType$parameterTypes$2: androidx.room.compiler.processing.ksp.KspExecutableType this$0>;

        $r4 = virtualinvoke $r3.<androidx.room.compiler.processing.ksp.KspExecutableType: androidx.room.compiler.processing.ksp.KspExecutableElement getOrigin()>();

        $r5 = virtualinvoke $r4.<androidx.room.compiler.processing.ksp.KspExecutableElement: java.util.List getParameters()>();

        $r22 = (java.lang.Iterable) $r5;

        $r23 = r0.<androidx.room.compiler.processing.ksp.KspExecutableType$parameterTypes$2: androidx.room.compiler.processing.ksp.KspExecutableType this$0>;

        r24 = $r22;

        $r6 = new java.util.ArrayList;

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r22, 10);

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>($i0);

        $r25 = (java.util.Collection) $r6;

        r26 = interfaceinvoke r24.<java.lang.Iterable: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r26.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        r27 = interfaceinvoke r26.<java.util.Iterator: java.lang.Object next()>();

        $r28 = (androidx.room.compiler.processing.XExecutableParameterElement) r27;

        r29 = $r25;

        $r7 = virtualinvoke $r23.<androidx.room.compiler.processing.ksp.KspExecutableType: androidx.room.compiler.processing.ksp.KspType getContaining()>();

        $r8 = (androidx.room.compiler.processing.XType) $r7;

        $r9 = interfaceinvoke $r28.<androidx.room.compiler.processing.XExecutableParameterElement: androidx.room.compiler.processing.XType asMemberOf(androidx.room.compiler.processing.XType)>($r8);

        interfaceinvoke r29.<java.util.Collection: boolean add(java.lang.Object)>($r9);

        goto label4;

     label5:
        $r21 = (java.util.List) $r25;

     label6:
        return $r21;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.room.compiler.processing.ksp.KspExecutableType$parameterTypes$2 r0;
        java.util.List $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspExecutableType$parameterTypes$2;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspExecutableType$parameterTypes$2: java.util.List invoke()>();

        return $r1;
    }

