androidx.wear.watchface.complications.rendering.utils.LayoutUtils
<androidx.wear.watchface.complications.rendering.utils.LayoutUtils: float WIDE_RECTANGLE_MINIMUM_ASPECT_RATIO>
    private void <init>()
    {
        androidx.wear.watchface.complications.rendering.utils.LayoutUtils r0;

        r0 := @this: androidx.wear.watchface.complications.rendering.utils.LayoutUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean isWideRectangle(android.graphics.Rect)
    {
        android.graphics.Rect r0;
        int $i0, $i1;
        float $f0, $f1, $f2;
        byte $b2;
        boolean $z0;

        r0 := @parameter0: android.graphics.Rect;

        $i0 = virtualinvoke r0.<android.graphics.Rect: int width()>();

        $f0 = (float) $i0;

        $i1 = virtualinvoke r0.<android.graphics.Rect: int height()>();

        $f1 = (float) $i1;

        $f2 = $f1 * 2.0F;

        $b2 = $f0 cmpl $f2;

        if $b2 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static void getLeftPart(android.graphics.Rect, android.graphics.Rect)
    {
        android.graphics.Rect r0, r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @parameter0: android.graphics.Rect;

        r1 := @parameter1: android.graphics.Rect;

        $i0 = virtualinvoke r1.<android.graphics.Rect: int width()>();

        $i1 = virtualinvoke r1.<android.graphics.Rect: int height()>();

        if $i0 >= $i1 goto label1;

        virtualinvoke r0.<android.graphics.Rect: void setEmpty()>();

        goto label2;

     label1:
        $i2 = r1.<android.graphics.Rect: int left>;

        $i3 = r1.<android.graphics.Rect: int top>;

        $i4 = r1.<android.graphics.Rect: int left>;

        $i5 = virtualinvoke r1.<android.graphics.Rect: int height()>();

        $i7 = $i4 + $i5;

        $i6 = r1.<android.graphics.Rect: int bottom>;

        virtualinvoke r0.<android.graphics.Rect: void set(int,int,int,int)>($i2, $i3, $i7, $i6);

     label2:
        return;
    }

    public static void getRightPart(android.graphics.Rect, android.graphics.Rect)
    {
        android.graphics.Rect r0, r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @parameter0: android.graphics.Rect;

        r1 := @parameter1: android.graphics.Rect;

        $i0 = virtualinvoke r1.<android.graphics.Rect: int width()>();

        $i1 = virtualinvoke r1.<android.graphics.Rect: int height()>();

        if $i0 >= $i1 goto label1;

        virtualinvoke r0.<android.graphics.Rect: void set(android.graphics.Rect)>(r1);

        goto label2;

     label1:
        $i2 = r1.<android.graphics.Rect: int left>;

        $i3 = virtualinvoke r1.<android.graphics.Rect: int height()>();

        $i7 = $i2 + $i3;

        $i6 = r1.<android.graphics.Rect: int top>;

        $i5 = r1.<android.graphics.Rect: int right>;

        $i4 = r1.<android.graphics.Rect: int bottom>;

        virtualinvoke r0.<android.graphics.Rect: void set(int,int,int,int)>($i7, $i6, $i5, $i4);

     label2:
        return;
    }

    public static void getTopHalf(android.graphics.Rect, android.graphics.Rect)
    {
        android.graphics.Rect r0, r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @parameter0: android.graphics.Rect;

        r1 := @parameter1: android.graphics.Rect;

        $i6 = r1.<android.graphics.Rect: int left>;

        $i5 = r1.<android.graphics.Rect: int top>;

        $i4 = r1.<android.graphics.Rect: int right>;

        $i1 = r1.<android.graphics.Rect: int top>;

        $i0 = r1.<android.graphics.Rect: int bottom>;

        $i2 = $i1 + $i0;

        $i3 = $i2 / 2;

        virtualinvoke r0.<android.graphics.Rect: void set(int,int,int,int)>($i6, $i5, $i4, $i3);

        return;
    }

    public static void getBottomHalf(android.graphics.Rect, android.graphics.Rect)
    {
        android.graphics.Rect r0, r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @parameter0: android.graphics.Rect;

        r1 := @parameter1: android.graphics.Rect;

        $i6 = r1.<android.graphics.Rect: int left>;

        $i1 = r1.<android.graphics.Rect: int top>;

        $i0 = r1.<android.graphics.Rect: int bottom>;

        $i2 = $i1 + $i0;

        $i5 = $i2 / 2;

        $i4 = r1.<android.graphics.Rect: int right>;

        $i3 = r1.<android.graphics.Rect: int bottom>;

        virtualinvoke r0.<android.graphics.Rect: void set(int,int,int,int)>($i6, $i5, $i4, $i3);

        return;
    }

    public static void getCentralSquare(android.graphics.Rect, android.graphics.Rect)
    {
        android.graphics.Rect r0, r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;

        r0 := @parameter0: android.graphics.Rect;

        r1 := @parameter1: android.graphics.Rect;

        $i1 = virtualinvoke r1.<android.graphics.Rect: int width()>();

        $i2 = virtualinvoke r1.<android.graphics.Rect: int height()>();

        i0 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i2);

        $i3 = virtualinvoke r1.<android.graphics.Rect: int centerX()>();

        $i4 = i0 / 2;

        $i5 = $i3 - $i4;

        $i6 = virtualinvoke r1.<android.graphics.Rect: int centerY()>();

        $i7 = i0 / 2;

        $i8 = $i6 - $i7;

        $i9 = virtualinvoke r1.<android.graphics.Rect: int centerX()>();

        $i10 = i0 / 2;

        $i11 = $i9 + $i10;

        $i12 = virtualinvoke r1.<android.graphics.Rect: int centerY()>();

        $i13 = i0 / 2;

        $i14 = $i12 + $i13;

        virtualinvoke r0.<android.graphics.Rect: void set(int,int,int,int)>($i5, $i8, $i11, $i14);

        return;
    }

    public static void scaledAroundCenter(android.graphics.Rect, android.graphics.Rect, float)
    {
        android.graphics.Rect r0, r1;
        float f0, f1, $f2, $f3, $f4, $f5, $f6;
        int $i0, $i1, $i2, $i3;

        r0 := @parameter0: android.graphics.Rect;

        r1 := @parameter1: android.graphics.Rect;

        f0 := @parameter2: float;

        virtualinvoke r0.<android.graphics.Rect: void set(android.graphics.Rect)>(r1);

        $f2 = f0 / 2.0F;

        f1 = 0.5F - $f2;

        $i0 = virtualinvoke r0.<android.graphics.Rect: int width()>();

        $f3 = (float) $i0;

        $f4 = $f3 * f1;

        $i1 = (int) $f4;

        $i2 = virtualinvoke r0.<android.graphics.Rect: int height()>();

        $f5 = (float) $i2;

        $f6 = $f5 * f1;

        $i3 = (int) $f6;

        virtualinvoke r0.<android.graphics.Rect: void inset(int,int)>($i1, $i3);

        return;
    }

    public static void fitSquareToBounds(android.graphics.Rect, android.graphics.Rect)
    {
        android.graphics.Rect r0, r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: android.graphics.Rect;

        r1 := @parameter1: android.graphics.Rect;

        $z0 = virtualinvoke r0.<android.graphics.Rect: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        i0 = virtualinvoke r0.<android.graphics.Rect: int centerX()>();

        i1 = virtualinvoke r0.<android.graphics.Rect: int centerY()>();

        $z1 = virtualinvoke r0.<android.graphics.Rect: boolean intersect(android.graphics.Rect)>(r1);

        if $z1 != 0 goto label2;

        virtualinvoke r0.<android.graphics.Rect: void setEmpty()>();

        return;

     label2:
        staticinvoke <androidx.wear.watchface.complications.rendering.utils.LayoutUtils: void getCentralSquare(android.graphics.Rect,android.graphics.Rect)>(r0, r0);

        $i4 = virtualinvoke r0.<android.graphics.Rect: int centerX()>();

        i2 = i0 - $i4;

        $i5 = virtualinvoke r0.<android.graphics.Rect: int centerY()>();

        i3 = i1 - $i5;

        virtualinvoke r0.<android.graphics.Rect: void offset(int,int)>(i2, i3);

        $z2 = virtualinvoke r1.<android.graphics.Rect: boolean contains(android.graphics.Rect)>(r0);

        if $z2 != 0 goto label3;

        $i7 = neg i2;

        $i6 = neg i3;

        virtualinvoke r0.<android.graphics.Rect: void offset(int,int)>($i7, $i6);

     label3:
        return;
    }

    public static void getInnerBounds(android.graphics.Rect, android.graphics.Rect, float)
    {
        android.graphics.Rect r0, r1;
        float f0;
        int i0;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @parameter0: android.graphics.Rect;

        r1 := @parameter1: android.graphics.Rect;

        f0 := @parameter2: float;

        virtualinvoke r0.<android.graphics.Rect: void set(android.graphics.Rect)>(r1);

        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>(2.0);

        $d2 = $d0 - 1.0;

        $d1 = (double) f0;

        $d3 = $d2 * $d1;

        $d4 = staticinvoke <java.lang.Math: double ceil(double)>($d3);

        i0 = (int) $d4;

        virtualinvoke r0.<android.graphics.Rect: void inset(int,int)>(i0, i0);

        return;
    }

