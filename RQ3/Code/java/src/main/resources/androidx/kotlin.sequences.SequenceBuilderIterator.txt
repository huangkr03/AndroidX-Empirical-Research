kotlin.sequences.SequenceBuilderIterator
<kotlin.sequences.SequenceBuilderIterator: java.util.Iterator nextIterator>
<kotlin.sequences.SequenceBuilderIterator: kotlin.coroutines.Continuation nextStep>
<kotlin.sequences.SequenceBuilderIterator: java.lang.Object nextValue>
<kotlin.sequences.SequenceBuilderIterator: int state>
    public void <init>()
    {
        kotlin.sequences.SequenceBuilderIterator $r0;

        $r0 := @this: kotlin.sequences.SequenceBuilderIterator;

        specialinvoke $r0.<kotlin.sequences.SequenceScope: void <init>()>();

        return;
    }

    private final java.lang.Throwable exceptionalState()
    {
        kotlin.sequences.SequenceBuilderIterator $r0;
        int $i0;
        java.lang.IllegalStateException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.util.NoSuchElementException $r4;

        $r0 := @this: kotlin.sequences.SequenceBuilderIterator;

        $i0 = $r0.<kotlin.sequences.SequenceBuilderIterator: int state>;

        lookupswitch($i0)
        {
            case 4: goto label3;
            case 5: goto label2;
            default: goto label1;
        };

     label1:
        $r1 = new java.lang.IllegalStateException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected state of the iterator: ");

        $i0 = $r0.<kotlin.sequences.SequenceBuilderIterator: int state>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        return $r1;

     label2:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Iterator has failed.");

        return $r1;

     label3:
        $r4 = new java.util.NoSuchElementException;

        specialinvoke $r4.<java.util.NoSuchElementException: void <init>()>();

        return $r4;
    }

    private final java.lang.Object nextNotReady()
    {
        kotlin.sequences.SequenceBuilderIterator $r0;
        boolean $z0;
        java.lang.Object $r1;
        java.util.NoSuchElementException $r2;

        $r0 := @this: kotlin.sequences.SequenceBuilderIterator;

        $z0 = virtualinvoke $r0.<kotlin.sequences.SequenceBuilderIterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke $r0.<kotlin.sequences.SequenceBuilderIterator: java.lang.Object next()>();

        return $r1;

     label1:
        $r2 = new java.util.NoSuchElementException;

        specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>();

        throw $r2;
    }

    public kotlin.coroutines.CoroutineContext getContext()
    {
        kotlin.sequences.SequenceBuilderIterator $r0;
        kotlin.coroutines.EmptyCoroutineContext r1;

        $r0 := @this: kotlin.sequences.SequenceBuilderIterator;

        r1 = <kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.EmptyCoroutineContext INSTANCE>;

        return r1;
    }

    public final kotlin.coroutines.Continuation getNextStep()
    {
        kotlin.sequences.SequenceBuilderIterator $r0;
        kotlin.coroutines.Continuation r1;

        $r0 := @this: kotlin.sequences.SequenceBuilderIterator;

        r1 = $r0.<kotlin.sequences.SequenceBuilderIterator: kotlin.coroutines.Continuation nextStep>;

        return r1;
    }

    public boolean hasNext()
    {
        kotlin.sequences.SequenceBuilderIterator $r0;
        int $i0;
        java.lang.Throwable $r1;
        java.util.Iterator $r2;
        boolean $z0;
        kotlin.coroutines.Continuation $r3;
        kotlin.Result$Companion $r4;
        kotlin.Unit $r5;
        java.lang.Object $r6;

        $r0 := @this: kotlin.sequences.SequenceBuilderIterator;

     label1:
        $i0 = $r0.<kotlin.sequences.SequenceBuilderIterator: int state>;

        lookupswitch($i0)
        {
            case 0: goto label7;
            case 1: goto label5;
            case 2: goto label4;
            case 3: goto label4;
            case 4: goto label3;
            default: goto label2;
        };

     label2:
        $r1 = specialinvoke $r0.<kotlin.sequences.SequenceBuilderIterator: java.lang.Throwable exceptionalState()>();

        throw $r1;

     label3:
        return 0;

     label4:
        return 1;

     label5:
        $r2 = $r0.<kotlin.sequences.SequenceBuilderIterator: java.util.Iterator nextIterator>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r2);

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r0.<kotlin.sequences.SequenceBuilderIterator: int state> = 2;

        return 1;

     label6:
        $r0.<kotlin.sequences.SequenceBuilderIterator: java.util.Iterator nextIterator> = null;

     label7:
        $r0.<kotlin.sequences.SequenceBuilderIterator: int state> = 5;

        $r3 = $r0.<kotlin.sequences.SequenceBuilderIterator: kotlin.coroutines.Continuation nextStep>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r3);

        $r0.<kotlin.sequences.SequenceBuilderIterator: kotlin.coroutines.Continuation nextStep> = null;

        $r4 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r5 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r5);

        interfaceinvoke $r3.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r6);

        goto label1;
    }

    public java.lang.Object next()
    {
        kotlin.sequences.SequenceBuilderIterator $r0;
        int $i0;
        java.lang.Throwable $r1;
        java.util.Iterator $r2;
        java.lang.Object $r3;

        $r0 := @this: kotlin.sequences.SequenceBuilderIterator;

        $i0 = $r0.<kotlin.sequences.SequenceBuilderIterator: int state>;

        lookupswitch($i0)
        {
            case 0: goto label4;
            case 1: goto label4;
            case 2: goto label3;
            case 3: goto label2;
            default: goto label1;
        };

     label1:
        $r1 = specialinvoke $r0.<kotlin.sequences.SequenceBuilderIterator: java.lang.Throwable exceptionalState()>();

        throw $r1;

     label2:
        $r0.<kotlin.sequences.SequenceBuilderIterator: int state> = 0;

        $r3 = $r0.<kotlin.sequences.SequenceBuilderIterator: java.lang.Object nextValue>;

        $r0.<kotlin.sequences.SequenceBuilderIterator: java.lang.Object nextValue> = null;

        return $r3;

     label3:
        $r0.<kotlin.sequences.SequenceBuilderIterator: int state> = 1;

        $r2 = $r0.<kotlin.sequences.SequenceBuilderIterator: java.util.Iterator nextIterator>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r2);

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        return $r3;

     label4:
        $r3 = specialinvoke $r0.<kotlin.sequences.SequenceBuilderIterator: java.lang.Object nextNotReady()>();

        return $r3;
    }

    public void remove()
    {
        kotlin.sequences.SequenceBuilderIterator $r0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: kotlin.sequences.SequenceBuilderIterator;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r1;
    }

    public void resumeWith(java.lang.Object)
    {
        kotlin.sequences.SequenceBuilderIterator $r0;
        java.lang.Object $r1;

        $r0 := @this: kotlin.sequences.SequenceBuilderIterator;

        $r1 := @parameter0: java.lang.Object;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r0.<kotlin.sequences.SequenceBuilderIterator: int state> = 4;

        return;
    }

    public final void setNextStep(kotlin.coroutines.Continuation)
    {
        kotlin.sequences.SequenceBuilderIterator $r0;
        kotlin.coroutines.Continuation $r1;

        $r0 := @this: kotlin.sequences.SequenceBuilderIterator;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $r0.<kotlin.sequences.SequenceBuilderIterator: kotlin.coroutines.Continuation nextStep> = $r1;

        return;
    }

    public java.lang.Object yield(java.lang.Object, kotlin.coroutines.Continuation)
    {
        kotlin.sequences.SequenceBuilderIterator $r0;
        java.lang.Object $r1, $r3;
        kotlin.coroutines.Continuation $r2;
        kotlin.Unit r4;

        $r0 := @this: kotlin.sequences.SequenceBuilderIterator;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r0.<kotlin.sequences.SequenceBuilderIterator: java.lang.Object nextValue> = $r1;

        $r0.<kotlin.sequences.SequenceBuilderIterator: int state> = 3;

        $r0.<kotlin.sequences.SequenceBuilderIterator: kotlin.coroutines.Continuation nextStep> = $r2;

        $r1 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r1 != $r3 goto label1;

        staticinvoke <kotlin.coroutines.jvm.internal.DebugProbesKt: void probeCoroutineSuspended(kotlin.coroutines.Continuation)>($r2);

     label1:
        $r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r1 != $r3 goto label2;

        return $r1;

     label2:
        r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r4;
    }

    public java.lang.Object yieldAll(java.util.Iterator, kotlin.coroutines.Continuation)
    {
        kotlin.sequences.SequenceBuilderIterator $r0;
        java.util.Iterator $r1;
        kotlin.coroutines.Continuation $r2;
        boolean $z0;
        java.lang.Object $r3, $r4;
        kotlin.Unit r5;

        $r0 := @this: kotlin.sequences.SequenceBuilderIterator;

        $r1 := @parameter0: java.util.Iterator;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        r5 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r5;

     label1:
        $r0.<kotlin.sequences.SequenceBuilderIterator: java.util.Iterator nextIterator> = $r1;

        $r0.<kotlin.sequences.SequenceBuilderIterator: int state> = 2;

        $r0.<kotlin.sequences.SequenceBuilderIterator: kotlin.coroutines.Continuation nextStep> = $r2;

        $r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $r4 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r3 != $r4 goto label2;

        staticinvoke <kotlin.coroutines.jvm.internal.DebugProbesKt: void probeCoroutineSuspended(kotlin.coroutines.Continuation)>($r2);

     label2:
        $r4 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r3 != $r4 goto label3;

        return $r3;

     label3:
        r5 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r5;
    }

