androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator
<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator: java.lang.Object[] buffer>
<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator: int dataSize>
<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator: int index>
    public void <init>()
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator r0;
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$Companion $r1;
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode $r2;
        java.lang.Object[] $r3;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$Companion Companion>;

        $r2 = virtualinvoke $r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode$Companion: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode getEMPTY$runtime_release()>();

        $r3 = virtualinvoke $r2.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode: java.lang.Object[] getBuffer$runtime_release()>();

        r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator: java.lang.Object[] buffer> = $r3;

        return;
    }

    protected final java.lang.Object[] getBuffer()
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator r0;
        java.lang.Object[] $r1;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator;

        $r1 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator: java.lang.Object[] buffer>;

        return $r1;
    }

    protected final int getIndex()
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator r0;
        int $i0;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator;

        $i0 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator: int index>;

        return $i0;
    }

    protected final void setIndex(int)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator r0;
        int i0;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator;

        i0 := @parameter0: int;

        r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator: int index> = i0;

        return;
    }

    public final void reset(java.lang.Object[], int, int)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator r0;
        java.lang.Object[] r1;
        int i0, i1;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator;

        r1 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "buffer");

        r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator: java.lang.Object[] buffer> = r1;

        r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator: int dataSize> = i0;

        r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator: int index> = i1;

        return;
    }

    public final void reset(java.lang.Object[], int)
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator r0;
        java.lang.Object[] r1;
        int i0;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator;

        r1 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "buffer");

        virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator: void reset(java.lang.Object[],int,int)>(r1, i0, 0);

        return;
    }

    public final boolean hasNextKey()
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator;

        $i1 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator: int index>;

        $i0 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator: int dataSize>;

        if $i1 >= $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final java.lang.Object currentKey()
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator r0;
        boolean $z0;
        int $i0;
        java.lang.Object[] $r1;
        java.lang.Object $r2;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator;

        $z0 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator: boolean hasNextKey()>();

        staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.internal.CommonFunctionsKt: void assert(boolean)>($z0);

        $r1 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator: java.lang.Object[] buffer>;

        $i0 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator: int index>;

        $r2 = $r1[$i0];

        return $r2;
    }

    public final void moveToNextKey()
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator r0;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator;

        $z0 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator: boolean hasNextKey()>();

        staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.internal.CommonFunctionsKt: void assert(boolean)>($z0);

        $i0 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator: int index>;

        $i1 = $i0 + 2;

        r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator: int index> = $i1;

        return;
    }

    public final boolean hasNextNode()
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator r0;
        int $i0, $i1, $i2, $i3;
        java.lang.Object[] $r1;
        boolean $z0, $z1;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator;

        $i1 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator: int index>;

        $i0 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator: int dataSize>;

        if $i1 < $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.internal.CommonFunctionsKt: void assert(boolean)>($z0);

        $i3 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator: int index>;

        $r1 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator: java.lang.Object[] buffer>;

        $i2 = lengthof $r1;

        if $i3 >= $i2 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    public final androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode currentNode()
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator r0;
        boolean $z0;
        int $i0;
        java.lang.Object[] $r1;
        java.lang.Object $r2;
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode $r3;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator;

        $z0 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator: boolean hasNextNode()>();

        staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.internal.CommonFunctionsKt: void assert(boolean)>($z0);

        $r1 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator: java.lang.Object[] buffer>;

        $i0 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator: int index>;

        $r2 = $r1[$i0];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r2, "null cannot be cast to non-null type androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode<K of androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator, V of androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator>");

        $r3 = (androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNode) $r2;

        return $r3;
    }

    public final void moveToNextNode()
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator r0;
        int i0, $i1;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator;

        $z0 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator: boolean hasNextNode()>();

        staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.internal.CommonFunctionsKt: void assert(boolean)>($z0);

        i0 = r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator: int index>;

        $i1 = i0 + 1;

        r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator: int index> = $i1;

        return;
    }

    public boolean hasNext()
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator r0;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator;

        $z0 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator: boolean hasNextKey()>();

        return $z0;
    }

    public void remove()
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r1;
    }

