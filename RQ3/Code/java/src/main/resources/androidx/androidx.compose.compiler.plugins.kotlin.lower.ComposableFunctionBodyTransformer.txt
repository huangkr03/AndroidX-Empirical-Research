androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor changedDescriptor>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: java.util.Map changedDescriptors>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor skipToGroupEndDescriptor>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor skipCurrentGroupDescriptor>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor startReplaceableDescriptor>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor startReplaceableSourceDescriptor>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor endReplaceableDescriptor>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor startDefaultsDescriptor>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor endDefaultsDescriptor>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor startMovableDescriptor>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor startMovableSourceDescriptor>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor endMovableDescriptor>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor startRestartGroupDescriptor>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor startRestartGroupSourceDescriptor>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor endRestartGroupDescriptor>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor updateScopeDescriptor>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.types.KotlinType updateScopeBlockType>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.PropertyDescriptor isSkippingDescriptor>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.PropertyDescriptor defaultsInvalidDescriptor>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor joinKeyDescriptor>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor cacheDescriptor>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope currentScope>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean collectSourceInformation>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: java.util.List sourceFixups>
    public void lower(org.jetbrains.kotlin.ir.declarations.IrModuleFragment)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.declarations.IrModuleFragment r1;
        org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid $r2;
        org.jetbrains.kotlin.ir.IrElement $r3, $r4;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrModuleFragment;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "module");

        $r3 = (org.jetbrains.kotlin.ir.IrElement) r1;

        $r2 = (org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid) r0;

        staticinvoke <org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoidKt: void transformChildrenVoid(org.jetbrains.kotlin.ir.IrElement,org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid)>($r3, $r2);

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void applySourceFixups()>();

        $r4 = (org.jetbrains.kotlin.ir.IrElement) r1;

        staticinvoke <org.jetbrains.kotlin.ir.util.PatchDeclarationParentsKt: org.jetbrains.kotlin.ir.IrElement patchDeclarationParents$default(org.jetbrains.kotlin.ir.IrElement,org.jetbrains.kotlin.ir.declarations.IrDeclarationParent,int,java.lang.Object)>($r4, null, 1, null);

        return;
    }

    public void lower(org.jetbrains.kotlin.ir.declarations.IrFile)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.declarations.IrFile r1;
        org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid $r2;
        org.jetbrains.kotlin.ir.IrElement $r3;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrFile;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "irFile");

        $r3 = (org.jetbrains.kotlin.ir.IrElement) r1;

        $r2 = (org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid) r0;

        staticinvoke <org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoidKt: void transformChildrenVoid(org.jetbrains.kotlin.ir.IrElement,org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid)>($r3, $r2);

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void applySourceFixups()>();

        return;
    }

    public final org.jetbrains.kotlin.builtins.PrimitiveType toPrimitiveType(org.jetbrains.kotlin.types.KotlinType)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.types.KotlinType $r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.jetbrains.kotlin.builtins.PrimitiveType $r2;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        $r1 := @parameter0: org.jetbrains.kotlin.types.KotlinType;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$toPrimitiveType");

        $z0 = staticinvoke <org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt: boolean isInt(org.jetbrains.kotlin.types.KotlinType)>($r1);

        if $z0 == 0 goto label1;

        $r2 = <org.jetbrains.kotlin.builtins.PrimitiveType: org.jetbrains.kotlin.builtins.PrimitiveType INT>;

        goto label9;

     label1:
        $z1 = staticinvoke <org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt: boolean isBoolean(org.jetbrains.kotlin.types.KotlinType)>($r1);

        if $z1 == 0 goto label2;

        $r2 = <org.jetbrains.kotlin.builtins.PrimitiveType: org.jetbrains.kotlin.builtins.PrimitiveType BOOLEAN>;

        goto label9;

     label2:
        $z2 = staticinvoke <org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt: boolean isFloat(org.jetbrains.kotlin.types.KotlinType)>($r1);

        if $z2 == 0 goto label3;

        $r2 = <org.jetbrains.kotlin.builtins.PrimitiveType: org.jetbrains.kotlin.builtins.PrimitiveType FLOAT>;

        goto label9;

     label3:
        $z3 = staticinvoke <org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt: boolean isLong(org.jetbrains.kotlin.types.KotlinType)>($r1);

        if $z3 == 0 goto label4;

        $r2 = <org.jetbrains.kotlin.builtins.PrimitiveType: org.jetbrains.kotlin.builtins.PrimitiveType LONG>;

        goto label9;

     label4:
        $z4 = staticinvoke <org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt: boolean isDouble(org.jetbrains.kotlin.types.KotlinType)>($r1);

        if $z4 == 0 goto label5;

        $r2 = <org.jetbrains.kotlin.builtins.PrimitiveType: org.jetbrains.kotlin.builtins.PrimitiveType DOUBLE>;

        goto label9;

     label5:
        $z5 = staticinvoke <org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt: boolean isByte(org.jetbrains.kotlin.types.KotlinType)>($r1);

        if $z5 == 0 goto label6;

        $r2 = <org.jetbrains.kotlin.builtins.PrimitiveType: org.jetbrains.kotlin.builtins.PrimitiveType BYTE>;

        goto label9;

     label6:
        $z6 = staticinvoke <org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt: boolean isChar(org.jetbrains.kotlin.types.KotlinType)>($r1);

        if $z6 == 0 goto label7;

        $r2 = <org.jetbrains.kotlin.builtins.PrimitiveType: org.jetbrains.kotlin.builtins.PrimitiveType CHAR>;

        goto label9;

     label7:
        $z7 = staticinvoke <org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt: boolean isShort(org.jetbrains.kotlin.types.KotlinType)>($r1);

        if $z7 == 0 goto label8;

        $r2 = <org.jetbrains.kotlin.builtins.PrimitiveType: org.jetbrains.kotlin.builtins.PrimitiveType SHORT>;

        goto label9;

     label8:
        $r2 = null;

     label9:
        return $r2;
    }

    private final java.lang.String printScopeStack()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0, r2;
        boolean z0, z1, z2, z6, z7;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope r3, r11;
        java.lang.StringBuilder r4, $r6, $r8, r10;
        java.lang.String r5, $r7;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        z0 = 0;

        z7 = 0;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        r10 = $r6;

        z1 = 0;

        z2 = 0;

        r2 = r0;

        r11 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope currentScope>;

     label1:
        if r11 == null goto label2;

        r3 = r11;

        r4 = r10;

        r5 = virtualinvoke r3.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: java.lang.String getName()>();

        z6 = 0;

        $r8 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r8, "append(value)");

        staticinvoke <kotlin.text.StringsKt: java.lang.StringBuilder appendln(java.lang.StringBuilder)>($r8);

        r11 = virtualinvoke r11.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope getParent()>();

        goto label1;

     label2:
        $r7 = virtualinvoke r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r7, "StringBuilder().apply(builderAction).toString()");

        return $r7;
    }

    private final boolean isInComposableScope()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope $r1;
        boolean $z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope currentScope>;

        $z0 = virtualinvoke $r1.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: boolean isInComposable()>();

        return $z0;
    }

    private final androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope getCurrentFunctionScope()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        java.lang.String r1, $r6, $r9;
        boolean z0;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope $r2;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope $r3;
        java.lang.StringBuilder $r4, $r5, $r7;
        java.lang.IllegalStateException $r8;
        java.lang.Throwable $r10;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        $r2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope currentScope>;

        $r3 = virtualinvoke $r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope getFunctionScope()>();

        if $r3 == null goto label1;

        goto label2;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected a FunctionScope but none exist. \n");

        $r6 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: java.lang.String printScopeStack()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        r1 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        z0 = 0;

        $r8 = new java.lang.IllegalStateException;

        $r9 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        $r10 = (java.lang.Throwable) $r8;

        throw $r10;

     label2:
        return $r3;
    }

    public org.jetbrains.kotlin.ir.IrStatement visitClass(org.jetbrains.kotlin.ir.declarations.IrClass)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0, r2;
        org.jetbrains.kotlin.ir.declarations.IrClass r1;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope r3, r4;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$ClassScope $r5;
        org.jetbrains.kotlin.name.Name $r6;
        int $i0, $i1;
        org.jetbrains.kotlin.ir.declarations.IrDeclaration $r7;
        java.lang.Throwable $r8, r10;
        org.jetbrains.kotlin.ir.IrStatement r9;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrClass;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "declaration");

        r2 = r0;

        $r5 = new androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$ClassScope;

        $r6 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.declarations.IrClass: org.jetbrains.kotlin.name.Name getName()>();

        specialinvoke $r5.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$ClassScope: void <init>(org.jetbrains.kotlin.name.Name)>($r6);

        r3 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope) $r5;

        r4 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope access$getCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer)>(r2);

        staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void access$setCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r2, r3);

        virtualinvoke r3.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: void setParent(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r4);

        $i0 = virtualinvoke r4.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: int getLevel()>();

        $i1 = $i0 + 1;

        virtualinvoke r3.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: void setLevel(int)>($i1);

     label1:
        $r7 = (org.jetbrains.kotlin.ir.declarations.IrDeclaration) r1;

        r9 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.IrStatement visitDeclaration(org.jetbrains.kotlin.ir.declarations.IrDeclaration)>($r7);

     label2:
        staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void access$setCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r2, r4);

        goto label5;

     label3:
        $r8 := @caughtexception;

        r10 = $r8;

     label4:
        staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void access$setCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r2, r4);

        throw r10;

     label5:
        return r9;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public org.jetbrains.kotlin.ir.IrStatement visitFunction(org.jetbrains.kotlin.ir.declarations.IrFunction)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0, r8;
        org.jetbrains.kotlin.ir.declarations.IrFunction r1;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope r2, $r3;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope $r4, $r5, $r6, r9;
        int $i0, $i1;
        boolean $z0, $z1, $z2, z6;
        java.lang.Throwable $r7;
        org.jetbrains.kotlin.ir.IrStatement $r10, r12;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrFunction;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "declaration");

        $r3 = new androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        specialinvoke $r3.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: void <init>(org.jetbrains.kotlin.ir.declarations.IrFunction,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer)>(r1, r0);

        r2 = $r3;

        r8 = r0;

        r9 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope access$getCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer)>(r8);

        $r4 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope) r2;

        staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void access$setCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r8, $r4);

        $r5 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope) r2;

        virtualinvoke $r5.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: void setParent(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r9);

        $r6 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope) r2;

        $i0 = virtualinvoke r9.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: int getLevel()>();

        $i1 = $i0 + 1;

        virtualinvoke $r6.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: void setLevel(int)>($i1);

     label1:
        $r10 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.IrStatement visitFunctionInScope(org.jetbrains.kotlin.ir.declarations.IrFunction)>(r1);

     label2:
        staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void access$setCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r8, r9);

        goto label5;

     label3:
        $r7 := @caughtexception;

     label4:
        staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void access$setCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r8, r9);

        throw $r7;

     label5:
        r12 = $r10;

        z6 = 0;

        $z0 = virtualinvoke r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: boolean isInlinedLambda()>();

        if $z0 == 0 goto label6;

        $z1 = virtualinvoke r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: boolean isComposable()>();

        if $z1 != 0 goto label6;

        $z2 = virtualinvoke r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: boolean getHasComposableCalls()>();

        if $z2 == 0 goto label6;

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void encounteredCapturedComposableCall()>();

     label6:
        return r12;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private final org.jetbrains.kotlin.ir.IrStatement visitFunctionInScope(org.jetbrains.kotlin.ir.declarations.IrFunction)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.declarations.IrFunction r1;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope r2;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7;
        androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue r3, $r9;
        androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue r4;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r5;
        org.jetbrains.kotlin.descriptors.annotations.Annotated $r6;
        java.lang.Boolean $r7, $r8;
        org.jetbrains.kotlin.ir.IrStatement $r10, $r12, $r14;
        org.jetbrains.kotlin.ir.types.IrType $r11;
        org.jetbrains.kotlin.ir.expressions.IrBody $r13;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrFunction;

        r2 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope getCurrentFunctionScope()>();

        $z3 = virtualinvoke r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: boolean isComposable()>();

        if $z3 != 0 goto label1;

        $r12 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.IrStatement visitFunction(org.jetbrains.kotlin.ir.declarations.IrFunction)>(r1);

        return $r12;

     label1:
        z0 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean shouldBeRestartable(org.jetbrains.kotlin.ir.declarations.IrFunction)>(r1);

        z1 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformerKt: boolean access$isLambda(org.jetbrains.kotlin.ir.declarations.IrFunction)>(r1);

        $r5 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.descriptors.FunctionDescriptor getDescriptor()>();

        $r6 = (org.jetbrains.kotlin.descriptors.annotations.Annotated) $r5;

        $r7 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeFqNamesKt: java.lang.Boolean composableTrackedContract(org.jetbrains.kotlin.descriptors.annotations.Annotated)>($r6);

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $z4 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r7, $r8);

        $z5 = $z4 ^ 1;

        if $z5 == 0 goto label2;

        $r11 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.types.IrType getReturnType()>();

        $z6 = staticinvoke <org.jetbrains.kotlin.ir.types.IrTypePredicatesKt: boolean isUnit(org.jetbrains.kotlin.ir.types.IrType)>($r11);

        if $z6 == 0 goto label2;

        $z7 = 1;

        goto label3;

     label2:
        $z7 = 0;

     label3:
        z2 = $z7;

        $r13 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.expressions.IrBody getBody()>();

        if $r13 != null goto label4;

        $r10 = (org.jetbrains.kotlin.ir.IrStatement) r1;

        return $r10;

     label4:
        $r9 = virtualinvoke r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue getChangedParameter()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r9);

        r3 = $r9;

        r4 = virtualinvoke r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue getDefaultParameter()>();

        if z1 == 0 goto label5;

        if z2 == 0 goto label5;

        $r14 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.IrStatement visitComposableLambda(org.jetbrains.kotlin.ir.declarations.IrFunction,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope,androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue)>(r1, r2, r3);

        goto label7;

     label5:
        if z0 == 0 goto label6;

        if z2 == 0 goto label6;

        $r14 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.IrStatement visitRestartableComposableFunction(org.jetbrains.kotlin.ir.declarations.IrFunction,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope,androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue,androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue)>(r1, r2, r3, r4);

        goto label7;

     label6:
        $r14 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.IrStatement visitNonRestartableComposableFunction(org.jetbrains.kotlin.ir.declarations.IrFunction,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope,androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue,androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue)>(r1, r2, r3, r4);

     label7:
        return $r14;
    }

    private final boolean shouldBeRestartable(org.jetbrains.kotlin.ir.declarations.IrFunction)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.declarations.IrFunction $r1;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor r2;
        org.jetbrains.kotlin.psi.KtFunctionLiteral r3, r4, $r14;
        boolean z0, z1, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, z11, z12, z14, z15, $z17;
        org.jetbrains.kotlin.ir.expressions.IrBody $r5;
        org.jetbrains.kotlin.descriptors.annotations.Annotated $r6;
        java.lang.Boolean $r7, $r8;
        org.jetbrains.kotlin.descriptors.DeclarationDescriptor $r9;
        org.jetbrains.kotlin.com.intellij.psi.PsiElement $r10, r18, r19, $r20;
        org.jetbrains.kotlin.ir.declarations.IrValueParameter $r11;
        org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin $r12;
        org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin$LOCAL_FUNCTION_FOR_LAMBDA $r13;
        org.jetbrains.kotlin.psi.KtFunction $r15;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r16;
        org.jetbrains.kotlin.resolve.BindingContext $r17;
        org.jetbrains.kotlin.types.KotlinType r21, r22;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrFunction;

        $r5 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.expressions.IrBody getBody()>();

        if $r5 != null goto label01;

        return 0;

     label01:
        r2 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.descriptors.FunctionDescriptor getDescriptor()>();

        $z3 = interfaceinvoke r2.<org.jetbrains.kotlin.descriptors.FunctionDescriptor: boolean isInline()>();

        if $z3 == 0 goto label02;

        return 0;

     label02:
        $r6 = (org.jetbrains.kotlin.descriptors.annotations.Annotated) r2;

        $r7 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeFqNamesKt: java.lang.Boolean composableRestartableContract(org.jetbrains.kotlin.descriptors.annotations.Annotated)>($r6);

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $z4 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r7, $r8);

        if $z4 == 0 goto label03;

        return 0;

     label03:
        $r9 = (org.jetbrains.kotlin.descriptors.DeclarationDescriptor) r2;

        $r10 = staticinvoke <org.jetbrains.kotlin.js.resolve.diagnostics.SourceLocationUtilsKt: org.jetbrains.kotlin.com.intellij.psi.PsiElement findPsi(org.jetbrains.kotlin.descriptors.DeclarationDescriptor)>($r9);

        if $r10 == null goto label07;

        r18 = $r10;

        z11 = 0;

        z12 = 0;

        r19 = r18;

        $r20 = r19;

        $z9 = r19 instanceof org.jetbrains.kotlin.psi.KtFunctionLiteral;

        if $z9 != 0 goto label04;

        $r20 = null;

     label04:
        $r14 = (org.jetbrains.kotlin.psi.KtFunctionLiteral) $r20;

        if $r14 == null goto label06;

        r3 = $r14;

        z0 = 0;

        z1 = 0;

        r4 = r3;

        $r15 = (org.jetbrains.kotlin.psi.KtFunction) r4;

        $r16 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        $r17 = interfaceinvoke $r16.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.resolve.BindingContext getBindingContext()>();

        $z10 = staticinvoke <org.jetbrains.kotlin.resolve.inline.InlineUtil: boolean isInlinedArgument(org.jetbrains.kotlin.psi.KtFunction,org.jetbrains.kotlin.resolve.BindingContext,boolean)>($r15, $r17, 0);

        if $z10 == 0 goto label05;

        return 0;

     label05:
        goto label06;

     label06:
        goto label07;

     label07:
        r21 = interfaceinvoke r2.<org.jetbrains.kotlin.descriptors.FunctionDescriptor: org.jetbrains.kotlin.types.KotlinType getReturnType()>();

        z14 = 0;

        z15 = 0;

        r22 = r21;

        if r22 == null goto label08;

        $z8 = staticinvoke <org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt: boolean isUnit(org.jetbrains.kotlin.types.KotlinType)>(r22);

        if $z8 != 0 goto label09;

     label08:
        $z17 = 1;

        goto label10;

     label09:
        $z17 = 0;

     label10:
        if $z17 == 0 goto label11;

        return 0;

     label11:
        $r11 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLoweringKt: org.jetbrains.kotlin.ir.declarations.IrValueParameter composerParam(org.jetbrains.kotlin.ir.declarations.IrFunction)>($r1);

        if $r11 != null goto label12;

        return 0;

     label12:
        $z5 = r2 instanceof org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor;

        if $z5 == 0 goto label13;

        $r12 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin getOrigin()>();

        $r13 = <org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin$LOCAL_FUNCTION_FOR_LAMBDA: org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin$LOCAL_FUNCTION_FOR_LAMBDA INSTANCE>;

        $z6 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r12, $r13);

        $z7 = $z6 ^ 1;

        if $z7 == 0 goto label13;

        return 1;

     label13:
        return 0;
    }

    private final org.jetbrains.kotlin.ir.declarations.IrAnnotationContainer bindAnnotationsIfNecessary(org.jetbrains.kotlin.ir.declarations.IrAnnotationContainer)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.declarations.IrAnnotationContainer $r1;
        java.lang.Iterable $r2;
        java.util.Iterator r3;
        java.lang.Object r4;
        org.jetbrains.kotlin.ir.expressions.IrConstructorCall r5;
        java.util.List $r6;
        boolean $z2;
        org.jetbrains.kotlin.ir.symbols.IrConstructorSymbol $r7;
        org.jetbrains.kotlin.ir.symbols.IrSymbol $r8;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrAnnotationContainer;

        $r6 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.declarations.IrAnnotationContainer: java.util.List getAnnotations()>();

        $r2 = (java.lang.Iterable) $r6;

        r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.jetbrains.kotlin.ir.expressions.IrConstructorCall) r4;

        $r7 = interfaceinvoke r5.<org.jetbrains.kotlin.ir.expressions.IrConstructorCall: org.jetbrains.kotlin.ir.symbols.IrConstructorSymbol getSymbol()>();

        $r8 = (org.jetbrains.kotlin.ir.symbols.IrSymbol) $r7;

        virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.symbols.IrSymbol bindIfNecessary(org.jetbrains.kotlin.ir.symbols.IrSymbol)>($r8);

        goto label1;

     label2:
        return $r1;
    }

    private final boolean shouldElideGroups(org.jetbrains.kotlin.ir.declarations.IrFunction)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.declarations.IrFunction $r1;
        org.jetbrains.kotlin.ir.declarations.IrAnnotationContainer $r2, $r10, $r11;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r4;
        org.jetbrains.kotlin.descriptors.annotations.Annotated $r5, $r14;
        boolean $z0, $z1;
        org.jetbrains.kotlin.ir.declarations.IrSimpleFunction $r6;
        org.jetbrains.kotlin.ir.symbols.IrPropertySymbol $r7;
        org.jetbrains.kotlin.ir.declarations.IrSymbolOwner $r8;
        org.jetbrains.kotlin.ir.declarations.IrProperty $r9, $r12;
        org.jetbrains.kotlin.descriptors.PropertyDescriptor $r13;
        java.lang.Boolean r15, $r16, $r17;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrFunction;

        $r2 = (org.jetbrains.kotlin.ir.declarations.IrAnnotationContainer) $r1;

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.declarations.IrAnnotationContainer bindAnnotationsIfNecessary(org.jetbrains.kotlin.ir.declarations.IrAnnotationContainer)>($r2);

        $r4 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.descriptors.FunctionDescriptor getDescriptor()>();

        $r5 = (org.jetbrains.kotlin.descriptors.annotations.Annotated) $r4;

        r15 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeFqNamesKt: java.lang.Boolean composableReadonlyContract(org.jetbrains.kotlin.descriptors.annotations.Annotated)>($r5);

        if r15 != null goto label3;

        $z0 = $r1 instanceof org.jetbrains.kotlin.ir.declarations.IrSimpleFunction;

        if $z0 == 0 goto label3;

        $r6 = (org.jetbrains.kotlin.ir.declarations.IrSimpleFunction) $r1;

        $r7 = interfaceinvoke $r6.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: org.jetbrains.kotlin.ir.symbols.IrPropertySymbol getCorrespondingPropertySymbol()>();

        if $r7 == null goto label1;

        $r8 = interfaceinvoke $r7.<org.jetbrains.kotlin.ir.symbols.IrPropertySymbol: org.jetbrains.kotlin.ir.declarations.IrSymbolOwner getOwner()>();

        $r9 = (org.jetbrains.kotlin.ir.declarations.IrProperty) $r8;

        if $r9 == null goto label1;

        $r10 = (org.jetbrains.kotlin.ir.declarations.IrAnnotationContainer) $r9;

        $r11 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.declarations.IrAnnotationContainer bindAnnotationsIfNecessary(org.jetbrains.kotlin.ir.declarations.IrAnnotationContainer)>($r10);

        $r12 = (org.jetbrains.kotlin.ir.declarations.IrProperty) $r11;

        if $r12 == null goto label1;

        $r13 = interfaceinvoke $r12.<org.jetbrains.kotlin.ir.declarations.IrProperty: org.jetbrains.kotlin.descriptors.PropertyDescriptor getDescriptor()>();

        if $r13 == null goto label1;

        $r14 = (org.jetbrains.kotlin.descriptors.annotations.Annotated) $r13;

        $r16 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeFqNamesKt: java.lang.Boolean composableReadonlyContract(org.jetbrains.kotlin.descriptors.annotations.Annotated)>($r14);

        goto label2;

     label1:
        $r16 = null;

     label2:
        r15 = $r16;

     label3:
        $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r15, $r17);

        return $z1;
    }

    private final org.jetbrains.kotlin.ir.IrStatement visitNonRestartableComposableFunction(org.jetbrains.kotlin.ir.declarations.IrFunction, androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope, androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue, androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0, $r57;
        org.jetbrains.kotlin.ir.declarations.IrFunction r1, r11, $r68;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope r2;
        androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue r3;
        androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue r4;
        org.jetbrains.kotlin.ir.expressions.IrBody r5, $r14, $r41;
        boolean z0, $z2, z5, z6, z7, z8, z9;
        org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase r6, r7, $r65, $r67;
        java.util.List r8, r13, $r15, $r26, $r29, $r32;
        kotlin.jvm.internal.SpreadBuilder r9, r10, $r69;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7;
        org.jetbrains.kotlin.ir.expressions.IrExpression r12, $r46, $r55, $r70, $r74, $r76;
        java.lang.Iterable $r16, $r60;
        boolean[] $r17;
        org.jetbrains.kotlin.ir.expressions.IrStatementContainer $r18, $r19;
        org.jetbrains.kotlin.ir.IrElement $r20, $r23, $r24, $r51, $r52;
        java.lang.Object $r21, $r22, r62;
        org.jetbrains.kotlin.ir.IrStatement $r25, $r35, $r36, $r42;
        org.jetbrains.kotlin.ir.IrStatement[] $r27, $r30, $r33, $r37, $r39;
        java.lang.Object[] $r28, $r31, $r34, $r38;
        org.jetbrains.kotlin.ir.expressions.impl.IrBlockBodyImpl $r40;
        org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol $r43;
        org.jetbrains.kotlin.ir.declarations.IrValueDeclaration $r44;
        org.jetbrains.kotlin.ir.symbols.IrReturnTargetSymbol $r45;
        java.lang.NullPointerException $r48, $r49, $r50;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope $r53;
        org.jetbrains.kotlin.ir.expressions.IrConst $r54;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitNonRestartableComposableFunction$2 $r56;
        kotlin.jvm.functions.Function0 $r58;
        org.jetbrains.kotlin.ir.expressions.IrExpressionBody $r59;
        java.util.Iterator $r61;
        org.jetbrains.kotlin.ir.declarations.IrValueParameter r63;
        kotlin.Pair $r64;
        org.jetbrains.kotlin.ir.declarations.IrVariable $r66;
        java.util.Collection r71, r72, r73;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrFunction;

        r2 := @parameter1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        r3 := @parameter2: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue;

        r4 := @parameter3: androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue;

        $r14 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.expressions.IrBody getBody()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r14);

        r5 = $r14;

        z0 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean shouldElideGroups(org.jetbrains.kotlin.ir.declarations.IrFunction)>(r1);

        r6 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase mutableStatementContainer()>();

        r7 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase mutableStatementContainer()>();

        virtualinvoke r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: void setDirty(androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue)>(r3);

        $r15 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: java.util.List getValueParameters()>();

        $r16 = (java.lang.Iterable) $r15;

        $i4 = virtualinvoke r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: int getRealValueParamCount()>();

        r8 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List take(java.lang.Iterable,int)>($r16, $i4);

        $r20 = (org.jetbrains.kotlin.ir.IrElement) r5;

        $r19 = (org.jetbrains.kotlin.ir.expressions.IrStatementContainer) r6;

        $r18 = (org.jetbrains.kotlin.ir.expressions.IrStatementContainer) r7;

        $r17 = newarray (boolean)[0];

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void buildStatementsForSkippingAndDefaults(org.jetbrains.kotlin.ir.IrElement,org.jetbrains.kotlin.ir.expressions.IrStatementContainer,org.jetbrains.kotlin.ir.expressions.IrStatementContainer,boolean,java.util.List,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope,androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue,androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue,androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue,boolean[])>($r20, $r19, $r18, 0, r8, r2, r3, r3, r4, $r17);

        $r60 = (java.lang.Iterable) r8;

        $r61 = interfaceinvoke $r60.<java.lang.Iterable: java.util.Iterator iterator()>();

     label01:
        $z2 = interfaceinvoke $r61.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label02;

        r62 = interfaceinvoke $r61.<java.util.Iterator: java.lang.Object next()>();

        r63 = (org.jetbrains.kotlin.ir.declarations.IrValueParameter) r62;

        $r59 = (org.jetbrains.kotlin.ir.expressions.IrExpressionBody) null;

        interfaceinvoke r63.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: void setDefaultValue(org.jetbrains.kotlin.ir.expressions.IrExpressionBody)>($r59);

        goto label01;

     label02:
        $r64 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: kotlin.Pair asBodyAndResultVar(org.jetbrains.kotlin.ir.expressions.IrBody)>(r5);

        $r21 = virtualinvoke $r64.<kotlin.Pair: java.lang.Object component1()>();

        $r65 = (org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase) $r21;

        $r22 = virtualinvoke $r64.<kotlin.Pair: java.lang.Object component2()>();

        $r66 = (org.jetbrains.kotlin.ir.declarations.IrVariable) $r22;

        $r23 = (org.jetbrains.kotlin.ir.IrElement) $r65;

        $r24 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.IrElement transformChildren(org.jetbrains.kotlin.ir.IrElement)>($r23);

        $r67 = (org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase) $r24;

        if z0 != 0 goto label03;

        $r56 = new androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitNonRestartableComposableFunction$2;

        $r57 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer) r0;

        specialinvoke $r56.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitNonRestartableComposableFunction$2: void <init>(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer)>($r57);

        $r58 = (kotlin.jvm.functions.Function0) $r56;

        virtualinvoke r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: void realizeGroup(kotlin.jvm.functions.Function0)>($r58);

     label03:
        $r68 = r1;

        $i6 = interfaceinvoke r5.<org.jetbrains.kotlin.ir.expressions.IrBody: int getStartOffset()>();

        $i7 = interfaceinvoke r5.<org.jetbrains.kotlin.ir.expressions.IrBody: int getEndOffset()>();

        $r69 = new kotlin.jvm.internal.SpreadBuilder;

        specialinvoke $r69.<kotlin.jvm.internal.SpreadBuilder: void <init>(int)>(6);

        if z0 != 0 goto label04;

        $r52 = (org.jetbrains.kotlin.ir.IrElement) r5;

        $r53 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope) r2;

        $r51 = (org.jetbrains.kotlin.ir.IrElement) r1;

        $r54 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrConst irSourceKey(org.jetbrains.kotlin.ir.IrElement)>($r51);

        $r55 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r54;

        $r70 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irStartReplaceableGroup(org.jetbrains.kotlin.ir.IrElement,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r52, $r53, $r55);

        goto label05;

     label04:
        $r70 = null;

     label05:
        $r25 = (org.jetbrains.kotlin.ir.IrStatement) $r70;

        virtualinvoke $r69.<kotlin.jvm.internal.SpreadBuilder: void add(java.lang.Object)>($r25);

        $r26 = virtualinvoke r6.<org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase: java.util.List getStatements()>();

        z5 = 0;

        r71 = (java.util.Collection) $r26;

        $r27 = newarray (org.jetbrains.kotlin.ir.IrStatement)[0];

        $r28 = interfaceinvoke r71.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r27);

        if $r28 != null goto label06;

        $r50 = new java.lang.NullPointerException;

        specialinvoke $r50.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlin.Array<T>");

        throw $r50;

     label06:
        virtualinvoke $r69.<kotlin.jvm.internal.SpreadBuilder: void addSpread(java.lang.Object)>($r28);

        $r29 = virtualinvoke r7.<org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase: java.util.List getStatements()>();

        z6 = 0;

        r72 = (java.util.Collection) $r29;

        $r30 = newarray (org.jetbrains.kotlin.ir.IrStatement)[0];

        $r31 = interfaceinvoke r72.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r30);

        if $r31 != null goto label07;

        $r49 = new java.lang.NullPointerException;

        specialinvoke $r49.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlin.Array<T>");

        throw $r49;

     label07:
        virtualinvoke $r69.<kotlin.jvm.internal.SpreadBuilder: void addSpread(java.lang.Object)>($r31);

        $r32 = virtualinvoke $r67.<org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase: java.util.List getStatements()>();

        z7 = 0;

        r73 = (java.util.Collection) $r32;

        $r33 = newarray (org.jetbrains.kotlin.ir.IrStatement)[0];

        $r34 = interfaceinvoke r73.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r33);

        if $r34 != null goto label08;

        $r48 = new java.lang.NullPointerException;

        specialinvoke $r48.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlin.Array<T>");

        throw $r48;

     label08:
        virtualinvoke $r69.<kotlin.jvm.internal.SpreadBuilder: void addSpread(java.lang.Object)>($r34);

        if z0 != 0 goto label09;

        $r74 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irEndReplaceableGroup()>();

        goto label10;

     label09:
        $r74 = null;

     label10:
        $r35 = (org.jetbrains.kotlin.ir.IrStatement) $r74;

        virtualinvoke $r69.<kotlin.jvm.internal.SpreadBuilder: void add(java.lang.Object)>($r35);

        if $r66 == null goto label11;

        z8 = 0;

        z9 = 0;

        r9 = $r69;

        r10 = $r69;

        i0 = $i7;

        i1 = $i6;

        r11 = r1;

        $r43 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getSymbol()>();

        $r45 = (org.jetbrains.kotlin.ir.symbols.IrReturnTargetSymbol) $r43;

        $r44 = (org.jetbrains.kotlin.ir.declarations.IrValueDeclaration) $r66;

        $r46 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irGet(org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)>($r44);

        r12 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.IrExpression irReturn$default(androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering,org.jetbrains.kotlin.ir.symbols.IrReturnTargetSymbol,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.types.IrType,int,java.lang.Object)>(r0, $r45, $r46, null, 4, null);

        $r68 = r11;

        $i6 = i1;

        $i7 = i0;

        $r69 = r9;

        $r76 = r12;

        goto label12;

     label11:
        $r76 = null;

     label12:
        $r36 = (org.jetbrains.kotlin.ir.IrStatement) $r76;

        virtualinvoke $r69.<kotlin.jvm.internal.SpreadBuilder: void add(java.lang.Object)>($r36);

        $i5 = virtualinvoke $r69.<kotlin.jvm.internal.SpreadBuilder: int size()>();

        $r37 = newarray (org.jetbrains.kotlin.ir.IrStatement)[$i5];

        $r38 = virtualinvoke $r69.<kotlin.jvm.internal.SpreadBuilder: java.lang.Object[] toArray(java.lang.Object[])>($r37);

        $r39 = (org.jetbrains.kotlin.ir.IrStatement[]) $r38;

        r13 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOfNotNull(java.lang.Object[])>($r39);

        i2 = $i7;

        i3 = $i6;

        $r40 = new org.jetbrains.kotlin.ir.expressions.impl.IrBlockBodyImpl;

        specialinvoke $r40.<org.jetbrains.kotlin.ir.expressions.impl.IrBlockBodyImpl: void <init>(int,int,java.util.List)>(i3, i2, r13);

        $r41 = (org.jetbrains.kotlin.ir.expressions.IrBody) $r40;

        interfaceinvoke $r68.<org.jetbrains.kotlin.ir.declarations.IrFunction: void setBody(org.jetbrains.kotlin.ir.expressions.IrBody)>($r41);

        $r42 = (org.jetbrains.kotlin.ir.IrStatement) r1;

        return $r42;
    }

    private final org.jetbrains.kotlin.ir.IrStatement visitComposableLambda(org.jetbrains.kotlin.ir.declarations.IrFunction, androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope, androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.declarations.IrFunction r1, $r107, r124, $r128, r137;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope r2;
        androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue r3, $r43, $r91;
        org.jetbrains.kotlin.ir.expressions.IrBody r4, $r14, $r36, $r63;
        org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase r5, r6, $r100, $r103;
        java.util.List r7, r8, r12, r13, $r15, $r19, $r22, $r24, $r27, $r51, $r54, $r74, $r75, $r111;
        java.lang.Boolean r9;
        boolean[] r10, r86;
        org.jetbrains.kotlin.ir.declarations.IrVariable r11, r99, r121, r134;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11, $i12, i13, i14, $i15, $i16, i17, i18;
        java.lang.Iterable $r16, $r20, $r80;
        java.util.Collection $r17, $r23, $r76, r81, r85, $r87, r112, r113, r116, r117, r130, r131, r132, r133;
        org.jetbrains.kotlin.ir.declarations.IrValueParameter $r18, $r72, r84, $r104;
        java.util.ArrayList $r21;
        boolean $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z9, $z10, $z15, z17, z18, $z20, $z21, $z22, z23, $z24, z25, z27, z31, z32, z33, z34, z35, z36;
        org.jetbrains.kotlin.ir.IrStatement[] $r25, $r28, $r32, $r34, $r55, $r59, $r61, $r114;
        java.lang.Object[] $r26, $r29, $r33, $r56, $r60, $r115;
        org.jetbrains.kotlin.ir.IrStatement $r30, $r31, $r57, $r58, $r110, $r119, $r141;
        org.jetbrains.kotlin.ir.expressions.impl.IrBlockBodyImpl $r35, $r62;
        org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol $r37, $r64;
        org.jetbrains.kotlin.ir.declarations.IrValueDeclaration $r38, $r65;
        org.jetbrains.kotlin.ir.symbols.IrReturnTargetSymbol $r39, $r66;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r40, $r44, $r46, $r47, $r52, $r53, $r67, r105, $r109, $r118, r125, $r127, r138, $r140;
        java.lang.NullPointerException $r41, $r42, $r68, $r69;
        org.jetbrains.kotlin.ir.expressions.IrCall $r45;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r48;
        org.jetbrains.kotlin.ir.descriptors.IrBuiltIns $r49;
        org.jetbrains.kotlin.ir.types.IrType $r50, $r77, $r78;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope $r70;
        org.jetbrains.kotlin.ir.IrElement $r71, $r93, $r101, $r102;
        org.jetbrains.kotlin.ir.expressions.IrStatementContainer $r73, $r94, $r95;
        org.jetbrains.kotlin.types.KotlinType $r79;
        java.util.Iterator r82;
        java.lang.Object r83, $r97, $r98;
        java.lang.String r88;
        androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskVariable $r89, r90;
        kotlin.Pair $r96;
        org.jetbrains.kotlin.ir.expressions.impl.IrIfThenElseImpl r106;
        kotlin.jvm.internal.SpreadBuilder $r108, r122, r123, $r129, r135, r136;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrFunction;

        r2 := @parameter1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        r3 := @parameter2: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue;

        $r14 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.expressions.IrBody getBody()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r14);

        r4 = $r14;

        r5 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase mutableStatementContainer()>();

        r6 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase mutableStatementContainer()>();

        $r15 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: java.util.List getValueParameters()>();

        $r16 = (java.lang.Iterable) $r15;

        $i4 = virtualinvoke r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: int getRealValueParamCount()>();

        r7 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List take(java.lang.Iterable,int)>($r16, $i4);

        $r17 = (java.util.Collection) r7;

        $r18 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.declarations.IrValueParameter getExtensionReceiverParameter()>();

        $r19 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOfNotNull(java.lang.Object)>($r18);

        $r20 = (java.lang.Iterable) $r19;

        r8 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List plus(java.util.Collection,java.lang.Iterable)>($r17, $r20);

        $r80 = (java.lang.Iterable) r7;

        $r21 = new java.util.ArrayList;

        $i5 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r80, 10);

        specialinvoke $r21.<java.util.ArrayList: void <init>(int)>($i5);

        r81 = (java.util.Collection) $r21;

        r82 = interfaceinvoke $r80.<java.lang.Iterable: java.util.Iterator iterator()>();

     label01:
        $z1 = interfaceinvoke r82.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label04;

        r83 = interfaceinvoke r82.<java.util.Iterator: java.lang.Object next()>();

        r84 = (org.jetbrains.kotlin.ir.declarations.IrValueParameter) r83;

        r85 = r81;

        $r78 = interfaceinvoke r84.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.ir.types.IrType getType()>();

        $r79 = staticinvoke <org.jetbrains.kotlin.ir.types.IrTypesKt: org.jetbrains.kotlin.types.KotlinType toKotlinType(org.jetbrains.kotlin.ir.types.IrType)>($r78);

        $z10 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean isStable(org.jetbrains.kotlin.types.KotlinType)>($r79);

        if $z10 != 0 goto label02;

        $z15 = 1;

        goto label03;

     label02:
        $z15 = 0;

     label03:
        r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z15);

        interfaceinvoke r85.<java.util.Collection: boolean add(java.lang.Object)>(r9);

        goto label01;

     label04:
        $r22 = (java.util.List) r81;

        $r23 = (java.util.Collection) $r22;

        r10 = staticinvoke <kotlin.collections.CollectionsKt: boolean[] toBooleanArray(java.util.Collection)>($r23);

        r86 = r10;

        $i9 = lengthof r86;

        i10 = 0;

     label05:
        if i10 >= $i9 goto label07;

        z17 = r86[i10];

        z18 = z17;

        if z18 == 0 goto label06;

        $z20 = 0;

        goto label08;

     label06:
        i10 = i10 + 1;

        goto label05;

     label07:
        $z20 = 1;

     label08:
        if $z20 == 0 goto label09;

        $r77 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.types.IrType getReturnType()>();

        $z9 = staticinvoke <org.jetbrains.kotlin.ir.types.IrTypePredicatesKt: boolean isUnit(org.jetbrains.kotlin.ir.types.IrType)>($r77);

        if $z9 == 0 goto label09;

        $z21 = 1;

        goto label10;

     label09:
        $z21 = 0;

     label10:
        $z22 = $z21;

        if $z21 == 0 goto label13;

        $r87 = (java.util.Collection) r8;

        z23 = 0;

        $z7 = interfaceinvoke $r87.<java.util.Collection: boolean isEmpty()>();

        if $z7 != 0 goto label11;

        $z24 = 1;

        goto label12;

     label11:
        $z24 = 0;

     label12:
        if $z24 == 0 goto label13;

        r88 = "$dirty";

        $r89 = interfaceinvoke r3.<androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskVariable irCopyToTemporary(java.lang.String,boolean,boolean)>(r88, 0, 1);

        z25 = 0;

        r90 = $r89;

        z27 = 0;

        $r74 = virtualinvoke r5.<org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase: java.util.List getStatements()>();

        $r75 = interfaceinvoke r90.<androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskVariable: java.util.List asStatements()>();

        $r76 = (java.util.Collection) $r75;

        interfaceinvoke $r74.<java.util.List: boolean addAll(java.util.Collection)>($r76);

        $r91 = (androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue) $r89;

        goto label14;

     label13:
        $r91 = r3;

     label14:
        virtualinvoke r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: void setDirty(androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue)>($r91);

        $r93 = (org.jetbrains.kotlin.ir.IrElement) r4;

        $r94 = (org.jetbrains.kotlin.ir.expressions.IrStatementContainer) r5;

        $r95 = (org.jetbrains.kotlin.ir.expressions.IrStatementContainer) r6;

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void buildStatementsForSkippingAndDefaults(org.jetbrains.kotlin.ir.IrElement,org.jetbrains.kotlin.ir.expressions.IrStatementContainer,org.jetbrains.kotlin.ir.expressions.IrStatementContainer,boolean,java.util.List,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope,androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue,androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue,androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue,boolean[])>($r93, $r94, $r95, $z22, r7, r2, $r91, r3, null, r10);

        $r96 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: kotlin.Pair asBodyAndResultVar(org.jetbrains.kotlin.ir.expressions.IrBody)>(r4);

        $r97 = virtualinvoke $r96.<kotlin.Pair: java.lang.Object component1()>();

        $r98 = virtualinvoke $r96.<kotlin.Pair: java.lang.Object component2()>();

        r99 = (org.jetbrains.kotlin.ir.declarations.IrVariable) $r98;

        $r100 = (org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase) $r97;

        $r101 = (org.jetbrains.kotlin.ir.IrElement) $r100;

        $r102 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.IrElement transformChildren(org.jetbrains.kotlin.ir.IrElement)>($r101);

        $r103 = (org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase) $r102;

        $r104 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.declarations.IrValueParameter getExtensionReceiverParameter()>();

        if $r104 == null goto label15;

        $r72 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.declarations.IrValueParameter getExtensionReceiverParameter()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r72);

        $z6 = virtualinvoke r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: boolean getExtensionReceiverUsed()>();

        $r73 = (org.jetbrains.kotlin.ir.expressions.IrStatementContainer) r5;

        $i8 = virtualinvoke r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: int getRealValueParamCount()>();

        $z22 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean buildStatementsForSkippingThisParameter(org.jetbrains.kotlin.ir.declarations.IrValueParameter,boolean,boolean,org.jetbrains.kotlin.ir.expressions.IrStatementContainer,androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue,androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue,int)>($r72, $z6, $z22, $r73, r3, $r91, $i8);

     label15:
        if $z22 == 0 goto label24;

        $r43 = virtualinvoke r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue getDirty()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r43);

        $r44 = interfaceinvoke $r43.<androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue: org.jetbrains.kotlin.ir.expressions.IrExpression irHasDifferences()>();

        $r45 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrCall irIsSkipping()>();

        $r46 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r45;

        $r47 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irNot(org.jetbrains.kotlin.ir.expressions.IrExpression)>($r46);

        r105 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irOrOr(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r44, $r47);

        $r48 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        $r49 = interfaceinvoke $r48.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.ir.descriptors.IrBuiltIns getIrBuiltIns()>();

        $r50 = virtualinvoke $r49.<org.jetbrains.kotlin.ir.descriptors.IrBuiltIns: org.jetbrains.kotlin.ir.types.IrType getUnitType()>();

        $r51 = virtualinvoke $r103.<org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase: java.util.List getStatements()>();

        $r52 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.IrExpression irBlock$default(androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,java.util.List,int,java.lang.Object)>(r0, $r50, null, $r51, 2, null);

        $r53 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irSkipToGroupEnd()>();

        r106 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.impl.IrIfThenElseImpl irIfThenElse$default(androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression,int,java.lang.Object)>(r0, null, r105, $r52, $r53, 1, null);

        virtualinvoke r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: void realizeCoalescableGroup()>();

        $r107 = r1;

        $i11 = interfaceinvoke r4.<org.jetbrains.kotlin.ir.expressions.IrBody: int getStartOffset()>();

        $i12 = interfaceinvoke r4.<org.jetbrains.kotlin.ir.expressions.IrBody: int getEndOffset()>();

        $r108 = new kotlin.jvm.internal.SpreadBuilder;

        specialinvoke $r108.<kotlin.jvm.internal.SpreadBuilder: void <init>(int)>(6);

        $z2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean collectSourceInformation>;

        if $z2 == 0 goto label16;

        $z5 = virtualinvoke r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: boolean isInlinedLambda()>();

        if $z5 == 0 goto label16;

        $r71 = (org.jetbrains.kotlin.ir.IrElement) r4;

        $r70 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope) r2;

        $r109 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irStartReplaceableGroup$default(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,org.jetbrains.kotlin.ir.IrElement,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope,org.jetbrains.kotlin.ir.expressions.IrExpression,int,java.lang.Object)>(r0, $r71, $r70, null, 4, null);

        goto label17;

     label16:
        $r109 = null;

     label17:
        $r110 = (org.jetbrains.kotlin.ir.IrStatement) $r109;

        virtualinvoke $r108.<kotlin.jvm.internal.SpreadBuilder: void add(java.lang.Object)>($r110);

        $r111 = virtualinvoke r5.<org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase: java.util.List getStatements()>();

        r112 = (java.util.Collection) $r111;

        r113 = r112;

        $r114 = newarray (org.jetbrains.kotlin.ir.IrStatement)[0];

        $r115 = interfaceinvoke r113.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r114);

        if $r115 != null goto label18;

        $r69 = new java.lang.NullPointerException;

        specialinvoke $r69.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlin.Array<T>");

        throw $r69;

     label18:
        virtualinvoke $r108.<kotlin.jvm.internal.SpreadBuilder: void addSpread(java.lang.Object)>($r115);

        $r54 = virtualinvoke r6.<org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase: java.util.List getStatements()>();

        r116 = (java.util.Collection) $r54;

        r117 = r116;

        $r55 = newarray (org.jetbrains.kotlin.ir.IrStatement)[0];

        $r56 = interfaceinvoke r117.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r55);

        if $r56 != null goto label19;

        $r68 = new java.lang.NullPointerException;

        specialinvoke $r68.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlin.Array<T>");

        throw $r68;

     label19:
        virtualinvoke $r108.<kotlin.jvm.internal.SpreadBuilder: void addSpread(java.lang.Object)>($r56);

        $r57 = (org.jetbrains.kotlin.ir.IrStatement) r106;

        virtualinvoke $r108.<kotlin.jvm.internal.SpreadBuilder: void add(java.lang.Object)>($r57);

        $z3 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean collectSourceInformation>;

        if $z3 == 0 goto label20;

        $z4 = virtualinvoke r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: boolean isInlinedLambda()>();

        if $z4 == 0 goto label20;

        $r118 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irEndReplaceableGroup()>();

        goto label21;

     label20:
        $r118 = null;

     label21:
        $r119 = (org.jetbrains.kotlin.ir.IrStatement) $r118;

        virtualinvoke $r108.<kotlin.jvm.internal.SpreadBuilder: void add(java.lang.Object)>($r119);

        if r99 == null goto label22;

        r121 = r99;

        z31 = 0;

        r11 = r121;

        r122 = $r108;

        r123 = $r108;

        i13 = $i12;

        i14 = $i11;

        r124 = r1;

        $r64 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getSymbol()>();

        $r66 = (org.jetbrains.kotlin.ir.symbols.IrReturnTargetSymbol) $r64;

        $r65 = (org.jetbrains.kotlin.ir.declarations.IrValueDeclaration) r11;

        $r67 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irGet(org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)>($r65);

        r125 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.IrExpression irReturn$default(androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering,org.jetbrains.kotlin.ir.symbols.IrReturnTargetSymbol,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.types.IrType,int,java.lang.Object)>(r0, $r66, $r67, null, 4, null);

        $r107 = r124;

        $i11 = i14;

        $i12 = i13;

        $r108 = r122;

        $r127 = r125;

        goto label23;

     label22:
        $r127 = null;

     label23:
        $r58 = (org.jetbrains.kotlin.ir.IrStatement) $r127;

        virtualinvoke $r108.<kotlin.jvm.internal.SpreadBuilder: void add(java.lang.Object)>($r58);

        $i7 = virtualinvoke $r108.<kotlin.jvm.internal.SpreadBuilder: int size()>();

        $r59 = newarray (org.jetbrains.kotlin.ir.IrStatement)[$i7];

        $r60 = virtualinvoke $r108.<kotlin.jvm.internal.SpreadBuilder: java.lang.Object[] toArray(java.lang.Object[])>($r59);

        $r61 = (org.jetbrains.kotlin.ir.IrStatement[]) $r60;

        r12 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOfNotNull(java.lang.Object[])>($r61);

        i0 = $i12;

        i1 = $i11;

        $r62 = new org.jetbrains.kotlin.ir.expressions.impl.IrBlockBodyImpl;

        specialinvoke $r62.<org.jetbrains.kotlin.ir.expressions.impl.IrBlockBodyImpl: void <init>(int,int,java.util.List)>(i1, i0, r12);

        $r63 = (org.jetbrains.kotlin.ir.expressions.IrBody) $r62;

        interfaceinvoke $r107.<org.jetbrains.kotlin.ir.declarations.IrFunction: void setBody(org.jetbrains.kotlin.ir.expressions.IrBody)>($r63);

        goto label29;

     label24:
        $r128 = r1;

        $i15 = interfaceinvoke r4.<org.jetbrains.kotlin.ir.expressions.IrBody: int getStartOffset()>();

        $i16 = interfaceinvoke r4.<org.jetbrains.kotlin.ir.expressions.IrBody: int getEndOffset()>();

        $r129 = new kotlin.jvm.internal.SpreadBuilder;

        specialinvoke $r129.<kotlin.jvm.internal.SpreadBuilder: void <init>(int)>(4);

        $r24 = virtualinvoke r5.<org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase: java.util.List getStatements()>();

        r130 = (java.util.Collection) $r24;

        z32 = 0;

        r131 = r130;

        $r25 = newarray (org.jetbrains.kotlin.ir.IrStatement)[0];

        $r26 = interfaceinvoke r131.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r25);

        if $r26 != null goto label25;

        $r42 = new java.lang.NullPointerException;

        specialinvoke $r42.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlin.Array<T>");

        throw $r42;

     label25:
        virtualinvoke $r129.<kotlin.jvm.internal.SpreadBuilder: void addSpread(java.lang.Object)>($r26);

        $r27 = virtualinvoke r6.<org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase: java.util.List getStatements()>();

        r132 = (java.util.Collection) $r27;

        z33 = 0;

        r133 = r132;

        $r28 = newarray (org.jetbrains.kotlin.ir.IrStatement)[0];

        $r29 = interfaceinvoke r133.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r28);

        if $r29 != null goto label26;

        $r41 = new java.lang.NullPointerException;

        specialinvoke $r41.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlin.Array<T>");

        throw $r41;

     label26:
        virtualinvoke $r129.<kotlin.jvm.internal.SpreadBuilder: void addSpread(java.lang.Object)>($r29);

        $r30 = (org.jetbrains.kotlin.ir.IrStatement) $r103;

        virtualinvoke $r129.<kotlin.jvm.internal.SpreadBuilder: void add(java.lang.Object)>($r30);

        if r99 == null goto label27;

        r134 = r99;

        z34 = 0;

        z35 = 0;

        r135 = $r129;

        r136 = $r129;

        i17 = $i16;

        i18 = $i15;

        r137 = r1;

        z36 = 0;

        $r37 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getSymbol()>();

        $r39 = (org.jetbrains.kotlin.ir.symbols.IrReturnTargetSymbol) $r37;

        $r38 = (org.jetbrains.kotlin.ir.declarations.IrValueDeclaration) r134;

        $r40 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irGet(org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)>($r38);

        r138 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.IrExpression irReturn$default(androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering,org.jetbrains.kotlin.ir.symbols.IrReturnTargetSymbol,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.types.IrType,int,java.lang.Object)>(r0, $r39, $r40, null, 4, null);

        $r128 = r137;

        $i15 = i18;

        $i16 = i17;

        $r129 = r135;

        $r140 = r138;

        goto label28;

     label27:
        $r140 = null;

     label28:
        $r31 = (org.jetbrains.kotlin.ir.IrStatement) $r140;

        virtualinvoke $r129.<kotlin.jvm.internal.SpreadBuilder: void add(java.lang.Object)>($r31);

        $i6 = virtualinvoke $r129.<kotlin.jvm.internal.SpreadBuilder: int size()>();

        $r32 = newarray (org.jetbrains.kotlin.ir.IrStatement)[$i6];

        $r33 = virtualinvoke $r129.<kotlin.jvm.internal.SpreadBuilder: java.lang.Object[] toArray(java.lang.Object[])>($r32);

        $r34 = (org.jetbrains.kotlin.ir.IrStatement[]) $r33;

        r13 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOfNotNull(java.lang.Object[])>($r34);

        i2 = $i16;

        i3 = $i15;

        $r35 = new org.jetbrains.kotlin.ir.expressions.impl.IrBlockBodyImpl;

        specialinvoke $r35.<org.jetbrains.kotlin.ir.expressions.impl.IrBlockBodyImpl: void <init>(int,int,java.util.List)>(i3, i2, r13);

        $r36 = (org.jetbrains.kotlin.ir.expressions.IrBody) $r35;

        interfaceinvoke $r128.<org.jetbrains.kotlin.ir.declarations.IrFunction: void setBody(org.jetbrains.kotlin.ir.expressions.IrBody)>($r36);

     label29:
        $r141 = (org.jetbrains.kotlin.ir.IrStatement) r1;

        return $r141;
    }

    private final org.jetbrains.kotlin.ir.IrStatement visitRestartableComposableFunction(org.jetbrains.kotlin.ir.declarations.IrFunction, androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope, androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue, androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.declarations.IrFunction r1, $r118, r124;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope r2;
        androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue r3, $r66, $r91, $r92;
        androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue r4;
        org.jetbrains.kotlin.ir.expressions.IrBody r5, $r17, $r57;
        org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase r6, r7, $r101, $r104;
        java.util.List r8, r9, r10, r16, $r18, $r26, $r35, $r37, $r39, $r47, $r77, $r78, $r108, $r110, $r112;
        java.lang.Boolean r11;
        boolean[] r12, r106;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, i10, $i11, $i12;
        boolean z0, z1, $z3, $z4, $z5, $z6, $z9, z10, z14, $z15, $z17, z18, z20, $z23, z24, $z26, z29;
        kotlin.jvm.internal.SpreadBuilder r13, r14, $r119;
        org.jetbrains.kotlin.ir.expressions.IrExpression r15, $r44, $r45, $r62, $r67, $r69, $r70, $r71, r105, $r113, $r114, $r116, r117, $r122, $r126;
        java.lang.Iterable $r19, $r23, $r38, $r82, $r96, $r111;
        org.jetbrains.kotlin.ir.declarations.IrValueParameter[] $r20;
        org.jetbrains.kotlin.ir.declarations.IrValueParameter $r21, $r22, $r33, $r34, $r72, $r74, r86, $r99;
        java.util.Collection $r24, $r27, $r36, $r79, r83, r87, $r89, $r109, r120, r121;
        java.util.ArrayList $r25;
        java.lang.Object $r28, $r29, $r63, r85, $r98;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitRestartableComposableFunction$end$1 $r30;
        org.jetbrains.kotlin.ir.IrElement $r31, $r32, $r40, $r41, $r93;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope $r42;
        org.jetbrains.kotlin.ir.expressions.IrConst $r43;
        org.jetbrains.kotlin.ir.IrStatement $r46, $r50, $r51, $r52, $r58;
        org.jetbrains.kotlin.ir.IrStatement[] $r48, $r53, $r55;
        java.lang.Object[] $r49, $r54;
        org.jetbrains.kotlin.ir.expressions.impl.IrBlockBodyImpl $r56;
        org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol $r59;
        org.jetbrains.kotlin.ir.declarations.IrValueDeclaration $r60;
        org.jetbrains.kotlin.ir.symbols.IrReturnTargetSymbol $r61;
        java.lang.NullPointerException $r65;
        org.jetbrains.kotlin.ir.expressions.IrCall $r68;
        org.jetbrains.kotlin.ir.expressions.IrStatementContainer $r73, $r75, $r94, $r95;
        org.jetbrains.kotlin.ir.expressions.IrExpressionBody $r76;
        org.jetbrains.kotlin.types.KotlinType $r80;
        java.util.Iterator $r84, r97;
        org.jetbrains.kotlin.ir.types.IrType $r88;
        androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskVariable $r90;
        kotlin.Pair r100;
        org.jetbrains.kotlin.ir.declarations.IrVariable $r102, r123;
        kotlin.jvm.functions.Function0 r103;
        org.jetbrains.kotlin.ir.expressions.impl.IrIfThenElseImpl $r115;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrFunction;

        r2 := @parameter1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        r3 := @parameter2: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue;

        r4 := @parameter3: androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue;

        $r17 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.expressions.IrBody getBody()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r17);

        r5 = $r17;

        r6 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase mutableStatementContainer()>();

        r7 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase mutableStatementContainer()>();

        $r18 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: java.util.List getValueParameters()>();

        $r19 = (java.lang.Iterable) $r18;

        $i5 = virtualinvoke r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: int getRealValueParamCount()>();

        r8 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List take(java.lang.Iterable,int)>($r19, $i5);

        $r20 = newarray (org.jetbrains.kotlin.ir.declarations.IrValueParameter)[2];

        $r21 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.declarations.IrValueParameter getExtensionReceiverParameter()>();

        $r20[0] = $r21;

        $r22 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.declarations.IrValueParameter getDispatchReceiverParameter()>();

        $r20[1] = $r22;

        r9 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOfNotNull(java.lang.Object[])>($r20);

        $r24 = (java.util.Collection) r8;

        $r23 = (java.lang.Iterable) r9;

        r10 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List plus(java.util.Collection,java.lang.Iterable)>($r24, $r23);

        z10 = 1;

        $r82 = (java.lang.Iterable) r8;

        $r25 = new java.util.ArrayList;

        $i6 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r82, 10);

        specialinvoke $r25.<java.util.ArrayList: void <init>(int)>($i6);

        r83 = (java.util.Collection) $r25;

        $r84 = interfaceinvoke $r82.<java.lang.Iterable: java.util.Iterator iterator()>();

     label01:
        $z3 = interfaceinvoke $r84.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label07;

        r85 = interfaceinvoke $r84.<java.util.Iterator: java.lang.Object next()>();

        r86 = (org.jetbrains.kotlin.ir.declarations.IrValueParameter) r85;

        r87 = r83;

        $r88 = interfaceinvoke r86.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.ir.types.IrType getVarargElementType()>();

        if $r88 == null goto label02;

        goto label03;

     label02:
        $r88 = interfaceinvoke r86.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.ir.types.IrType getType()>();

     label03:
        $r80 = staticinvoke <org.jetbrains.kotlin.ir.types.IrTypesKt: org.jetbrains.kotlin.types.KotlinType toKotlinType(org.jetbrains.kotlin.ir.types.IrType)>($r88);

        z14 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean isStable(org.jetbrains.kotlin.types.KotlinType)>($r80);

        if z14 != 0 goto label04;

        $z9 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean hasDefaultValueSafe(org.jetbrains.kotlin.ir.declarations.IrValueParameter)>(r86);

        if $z9 != 0 goto label04;

        z10 = 0;

     label04:
        if z14 != 0 goto label05;

        $z15 = 1;

        goto label06;

     label05:
        $z15 = 0;

     label06:
        r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z15);

        interfaceinvoke r87.<java.util.Collection: boolean add(java.lang.Object)>(r11);

        goto label01;

     label07:
        $r26 = (java.util.List) r83;

        $r27 = (java.util.Collection) $r26;

        r12 = staticinvoke <kotlin.collections.CollectionsKt: boolean[] toBooleanArray(java.util.Collection)>($r27);

        if z10 == 0 goto label10;

        $r89 = (java.util.Collection) r10;

        $z6 = interfaceinvoke $r89.<java.util.Collection: boolean isEmpty()>();

        if $z6 != 0 goto label08;

        $z17 = 1;

        goto label09;

     label08:
        $z17 = 0;

     label09:
        if $z17 == 0 goto label10;

        z18 = 0;

        $r90 = interfaceinvoke r3.<androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskVariable irCopyToTemporary(java.lang.String,boolean,boolean)>("$dirty", z18, 1);

        z20 = 0;

        $r77 = virtualinvoke r6.<org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase: java.util.List getStatements()>();

        $r78 = interfaceinvoke $r90.<androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskVariable: java.util.List asStatements()>();

        $r79 = (java.util.Collection) $r78;

        interfaceinvoke $r77.<java.util.List: boolean addAll(java.util.Collection)>($r79);

        $r91 = (androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue) $r90;

        goto label11;

     label10:
        $r91 = r3;

     label11:
        $r92 = $r91;

        virtualinvoke r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: void setDirty(androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue)>($r91);

        $r93 = (org.jetbrains.kotlin.ir.IrElement) r5;

        $r94 = (org.jetbrains.kotlin.ir.expressions.IrStatementContainer) r6;

        $r95 = (org.jetbrains.kotlin.ir.expressions.IrStatementContainer) r7;

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void buildStatementsForSkippingAndDefaults(org.jetbrains.kotlin.ir.IrElement,org.jetbrains.kotlin.ir.expressions.IrStatementContainer,org.jetbrains.kotlin.ir.expressions.IrStatementContainer,boolean,java.util.List,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope,androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue,androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue,androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue,boolean[])>($r93, $r94, $r95, z10, r8, r2, $r91, r3, r4, r12);

        $r96 = (java.lang.Iterable) r8;

        r97 = interfaceinvoke $r96.<java.lang.Iterable: java.util.Iterator iterator()>();

     label12:
        $z23 = interfaceinvoke r97.<java.util.Iterator: boolean hasNext()>();

        if $z23 == 0 goto label13;

        $r98 = interfaceinvoke r97.<java.util.Iterator: java.lang.Object next()>();

        $r99 = (org.jetbrains.kotlin.ir.declarations.IrValueParameter) $r98;

        z24 = 0;

        $r76 = (org.jetbrains.kotlin.ir.expressions.IrExpressionBody) null;

        interfaceinvoke $r99.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: void setDefaultValue(org.jetbrains.kotlin.ir.expressions.IrExpressionBody)>($r76);

        goto label12;

     label13:
        r100 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: kotlin.Pair asBodyAndResultVar(org.jetbrains.kotlin.ir.expressions.IrBody)>(r5);

        $r28 = virtualinvoke r100.<kotlin.Pair: java.lang.Object component1()>();

        $r101 = (org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase) $r28;

        $r29 = virtualinvoke r100.<kotlin.Pair: java.lang.Object component2()>();

        $r102 = (org.jetbrains.kotlin.ir.declarations.IrVariable) $r29;

        $r30 = new androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitRestartableComposableFunction$end$1;

        specialinvoke $r30.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitRestartableComposableFunction$end$1: void <init>(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope,androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue,androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue)>(r0, r2, r3, r4);

        r103 = (kotlin.jvm.functions.Function0) $r30;

        $r31 = (org.jetbrains.kotlin.ir.IrElement) $r101;

        $r32 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.IrElement transformChildren(org.jetbrains.kotlin.ir.IrElement)>($r31);

        $r104 = (org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase) $r32;

        $i9 = virtualinvoke r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: int getRealValueParamCount()>();

        $r33 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.declarations.IrValueParameter getExtensionReceiverParameter()>();

        if $r33 == null goto label14;

        $r74 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.declarations.IrValueParameter getExtensionReceiverParameter()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r74);

        $z5 = virtualinvoke r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: boolean getExtensionReceiverUsed()>();

        $r75 = (org.jetbrains.kotlin.ir.expressions.IrStatementContainer) r6;

        $i8 = $i9;

        $i9 = $i9 + 1;

        z10 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean buildStatementsForSkippingThisParameter(org.jetbrains.kotlin.ir.declarations.IrValueParameter,boolean,boolean,org.jetbrains.kotlin.ir.expressions.IrStatementContainer,androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue,androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue,int)>($r74, $z5, z10, $r75, r3, $r92, $i8);

     label14:
        $r34 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.declarations.IrValueParameter getDispatchReceiverParameter()>();

        if $r34 == null goto label15;

        $r72 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.declarations.IrValueParameter getDispatchReceiverParameter()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r72);

        $z4 = virtualinvoke r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: boolean getDispatchReceiverUsed()>();

        $r73 = (org.jetbrains.kotlin.ir.expressions.IrStatementContainer) r6;

        z10 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean buildStatementsForSkippingThisParameter(org.jetbrains.kotlin.ir.declarations.IrValueParameter,boolean,boolean,org.jetbrains.kotlin.ir.expressions.IrStatementContainer,androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue,androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue,int)>($r72, $z4, z10, $r73, r3, $r92, $i9);

     label15:
        if z10 == 0 goto label21;

        $r66 = virtualinvoke r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue getDirty()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r66);

        $r67 = interfaceinvoke $r66.<androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue: org.jetbrains.kotlin.ir.expressions.IrExpression irHasDifferences()>();

        $r68 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrCall irIsSkipping()>();

        $r69 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r68;

        $r70 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irNot(org.jetbrains.kotlin.ir.expressions.IrExpression)>($r69);

        r105 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irOrOr(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r67, $r70);

        r106 = r12;

        i0 = lengthof r106;

        i10 = 0;

     label16:
        if i10 >= i0 goto label18;

        z0 = r106[i10];

        z1 = z0;

        if z1 == 0 goto label17;

        $z26 = 1;

        goto label19;

     label17:
        i10 = i10 + 1;

        goto label16;

     label18:
        $z26 = 0;

     label19:
        if $z26 == 0 goto label20;

        if r4 == null goto label20;

        $r71 = interfaceinvoke r4.<androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue: org.jetbrains.kotlin.ir.expressions.IrExpression irHasAnyProvidedAndUnstable(boolean[])>(r12);

        r105 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irOrOr(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r71, r105);

     label20:
        $r108 = virtualinvoke r7.<org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase: java.util.List getStatements()>();

        $r109 = (java.util.Collection) $r108;

        $r110 = virtualinvoke $r104.<org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase: java.util.List getStatements()>();

        $r111 = (java.lang.Iterable) $r110;

        $r112 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List plus(java.util.Collection,java.lang.Iterable)>($r109, $r111);

        $r113 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.IrExpression irBlock$default(androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,java.util.List,int,java.lang.Object)>(r0, null, null, $r112, 3, null);

        $r114 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irSkipToGroupEnd()>();

        $r115 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.impl.IrIfThenElseImpl irIfThenElse$default(androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression,int,java.lang.Object)>(r0, null, r105, $r113, $r114, 1, null);

        $r116 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r115;

        goto label22;

     label21:
        $r35 = virtualinvoke r7.<org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase: java.util.List getStatements()>();

        $r36 = (java.util.Collection) $r35;

        $r37 = virtualinvoke $r104.<org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase: java.util.List getStatements()>();

        $r38 = (java.lang.Iterable) $r37;

        $r39 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List plus(java.util.Collection,java.lang.Iterable)>($r36, $r38);

        $r116 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.IrExpression irComposite$default(androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,java.util.List,int,java.lang.Object)>(r0, null, null, $r39, 3, null);

     label22:
        r117 = $r116;

        virtualinvoke r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: void realizeGroup(kotlin.jvm.functions.Function0)>(r103);

        $r118 = r1;

        $i11 = interfaceinvoke r5.<org.jetbrains.kotlin.ir.expressions.IrBody: int getStartOffset()>();

        $i12 = interfaceinvoke r5.<org.jetbrains.kotlin.ir.expressions.IrBody: int getEndOffset()>();

        $r119 = new kotlin.jvm.internal.SpreadBuilder;

        specialinvoke $r119.<kotlin.jvm.internal.SpreadBuilder: void <init>(int)>(5);

        $r41 = (org.jetbrains.kotlin.ir.IrElement) r5;

        $r42 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope) r2;

        $r40 = (org.jetbrains.kotlin.ir.IrElement) r1;

        $r43 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrConst irSourceKey(org.jetbrains.kotlin.ir.IrElement)>($r40);

        $r44 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r43;

        $r45 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irStartRestartGroup(org.jetbrains.kotlin.ir.IrElement,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r41, $r42, $r44);

        $r46 = (org.jetbrains.kotlin.ir.IrStatement) $r45;

        virtualinvoke $r119.<kotlin.jvm.internal.SpreadBuilder: void add(java.lang.Object)>($r46);

        $r47 = virtualinvoke r6.<org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase: java.util.List getStatements()>();

        r120 = (java.util.Collection) $r47;

        r121 = r120;

        $r48 = newarray (org.jetbrains.kotlin.ir.IrStatement)[0];

        $r49 = interfaceinvoke r121.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r48);

        if $r49 != null goto label23;

        $r65 = new java.lang.NullPointerException;

        specialinvoke $r65.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlin.Array<T>");

        throw $r65;

     label23:
        virtualinvoke $r119.<kotlin.jvm.internal.SpreadBuilder: void addSpread(java.lang.Object)>($r49);

        $r50 = (org.jetbrains.kotlin.ir.IrStatement) r117;

        virtualinvoke $r119.<kotlin.jvm.internal.SpreadBuilder: void add(java.lang.Object)>($r50);

        if $r102 != null goto label24;

        $r63 = interfaceinvoke r103.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        $r122 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r63;

        goto label25;

     label24:
        $r122 = null;

     label25:
        $r51 = (org.jetbrains.kotlin.ir.IrStatement) $r122;

        virtualinvoke $r119.<kotlin.jvm.internal.SpreadBuilder: void add(java.lang.Object)>($r51);

        if $r102 == null goto label26;

        r123 = $r102;

        z29 = 0;

        r13 = $r119;

        r14 = $r119;

        i1 = $i12;

        i2 = $i11;

        r124 = r1;

        $r59 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getSymbol()>();

        $r61 = (org.jetbrains.kotlin.ir.symbols.IrReturnTargetSymbol) $r59;

        $r60 = (org.jetbrains.kotlin.ir.declarations.IrValueDeclaration) r123;

        $r62 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irGet(org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)>($r60);

        r15 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.IrExpression irReturn$default(androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering,org.jetbrains.kotlin.ir.symbols.IrReturnTargetSymbol,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.types.IrType,int,java.lang.Object)>(r0, $r61, $r62, null, 4, null);

        $r118 = r124;

        $i11 = i2;

        $i12 = i1;

        $r119 = r13;

        $r126 = r15;

        goto label27;

     label26:
        $r126 = null;

     label27:
        $r52 = (org.jetbrains.kotlin.ir.IrStatement) $r126;

        virtualinvoke $r119.<kotlin.jvm.internal.SpreadBuilder: void add(java.lang.Object)>($r52);

        $i7 = virtualinvoke $r119.<kotlin.jvm.internal.SpreadBuilder: int size()>();

        $r53 = newarray (org.jetbrains.kotlin.ir.IrStatement)[$i7];

        $r54 = virtualinvoke $r119.<kotlin.jvm.internal.SpreadBuilder: java.lang.Object[] toArray(java.lang.Object[])>($r53);

        $r55 = (org.jetbrains.kotlin.ir.IrStatement[]) $r54;

        r16 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOfNotNull(java.lang.Object[])>($r55);

        i3 = $i12;

        i4 = $i11;

        $r56 = new org.jetbrains.kotlin.ir.expressions.impl.IrBlockBodyImpl;

        specialinvoke $r56.<org.jetbrains.kotlin.ir.expressions.impl.IrBlockBodyImpl: void <init>(int,int,java.util.List)>(i4, i3, r16);

        $r57 = (org.jetbrains.kotlin.ir.expressions.IrBody) $r56;

        interfaceinvoke $r118.<org.jetbrains.kotlin.ir.declarations.IrFunction: void setBody(org.jetbrains.kotlin.ir.expressions.IrBody)>($r57);

        $r58 = (org.jetbrains.kotlin.ir.IrStatement) r1;

        return $r58;
    }

    private final void recordSourceParameter(org.jetbrains.kotlin.ir.expressions.IrCall, int, androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.expressions.IrCall r1;
        int i0;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope r2;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$SourceInfoFixup $r3;
        java.util.List $r4;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrCall;

        i0 := @parameter1: int;

        r2 := @parameter2: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope;

        $r4 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: java.util.List sourceFixups>;

        $r3 = new androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$SourceInfoFixup;

        specialinvoke $r3.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$SourceInfoFixup: void <init>(org.jetbrains.kotlin.ir.expressions.IrCall,int,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope)>(r1, i0, r2);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r3);

        return;
    }

    private final boolean getHasSourceInformation(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope $r1;
        boolean $z0, $z1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        $r1 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope;

        $z0 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean collectSourceInformation>;

        $z1 = virtualinvoke $r1.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: boolean calculateHasSourceInformation(boolean)>($z0);

        return $z1;
    }

    private final java.lang.String getSourceInformation(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope $r1;
        boolean $z0;
        java.lang.String $r2;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        $r1 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope;

        $z0 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean collectSourceInformation>;

        $r2 = virtualinvoke $r1.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: java.lang.String calculateSourceInfo(boolean)>($z0);

        return $r2;
    }

    private final void applySourceFixups()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        boolean z0, $z2;
        int $i0, $i1;
        java.util.List $r1, $r2, $r11;
        java.lang.Object $r3;
        org.jetbrains.kotlin.ir.expressions.IrCall $r4;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope $r5;
        org.jetbrains.kotlin.ir.expressions.IrConst $r6;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r7;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$applySourceFixups$$inlined$sortBy$1 $r9;
        java.util.Comparator $r10;
        java.util.Iterator $r12;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$SourceInfoFixup $r13;
        java.lang.String $r14;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        $r11 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: java.util.List sourceFixups>;

        $i0 = interfaceinvoke $r11.<java.util.List: int size()>();

        if $i0 <= 1 goto label1;

        z0 = 0;

        $r9 = new androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$applySourceFixups$$inlined$sortBy$1;

        specialinvoke $r9.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$applySourceFixups$$inlined$sortBy$1: void <init>()>();

        $r10 = (java.util.Comparator) $r9;

        staticinvoke <kotlin.collections.CollectionsKt: void sortWith(java.util.List,java.util.Comparator)>($r11, $r10);

     label1:
        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: java.util.List sourceFixups>;

        $r12 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r3 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        $r13 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$SourceInfoFixup) $r3;

        $r4 = virtualinvoke $r13.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$SourceInfoFixup: org.jetbrains.kotlin.ir.expressions.IrCall getCall()>();

        $i1 = virtualinvoke $r13.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$SourceInfoFixup: int getIndex()>();

        $r5 = virtualinvoke $r13.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$SourceInfoFixup: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope getScope()>();

        $r14 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: java.lang.String getSourceInformation(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope)>($r5);

        if $r14 == null goto label3;

        goto label4;

     label3:
        $r14 = "";

     label4:
        $r6 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrConst irConst(java.lang.String)>($r14);

        $r7 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r6;

        interfaceinvoke $r4.<org.jetbrains.kotlin.ir.expressions.IrCall: void putValueArgument(int,org.jetbrains.kotlin.ir.expressions.IrExpression)>($i1, $r7);

        goto label2;

     label5:
        $r2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: java.util.List sourceFixups>;

        interfaceinvoke $r2.<java.util.List: void clear()>();

        return;
    }

    private final boolean buildStatementsForSkippingThisParameter(org.jetbrains.kotlin.ir.declarations.IrValueParameter, boolean, boolean, org.jetbrains.kotlin.ir.expressions.IrStatementContainer, androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue, androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue, int)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.declarations.IrValueParameter r1;
        boolean z0, z1, z2, $z3, $z4, $z6;
        org.jetbrains.kotlin.ir.expressions.IrStatementContainer r2;
        androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue r3, r4;
        int i0, $i1, $i2, $i3;
        org.jetbrains.kotlin.ir.types.IrType r5, $r18;
        org.jetbrains.kotlin.types.KotlinType $r6;
        java.util.List $r7, $r13;
        androidx.compose.compiler.plugins.kotlin.lower.ParamState $r8, $r22, $r24;
        androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskVariable $r9, $r15;
        org.jetbrains.kotlin.ir.expressions.IrConst $r10, $r23, $r26;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r11, $r12, $r14, $r20, $r21, $r25, $r27, $r29, $r30, $r31;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r16;
        org.jetbrains.kotlin.ir.descriptors.IrBuiltIns $r17;
        org.jetbrains.kotlin.ir.declarations.IrValueDeclaration $r19;
        org.jetbrains.kotlin.ir.expressions.impl.IrIfThenElseImpl $r28;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrValueParameter;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        r2 := @parameter3: org.jetbrains.kotlin.ir.expressions.IrStatementContainer;

        r3 := @parameter4: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue;

        r4 := @parameter5: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue;

        i0 := @parameter6: int;

        r5 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.ir.types.IrType getType()>();

        $r6 = staticinvoke <org.jetbrains.kotlin.ir.types.IrTypesKt: org.jetbrains.kotlin.types.KotlinType toKotlinType(org.jetbrains.kotlin.ir.types.IrType)>(r5);

        z2 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean isStable(org.jetbrains.kotlin.types.KotlinType)>($r6);

        if z2 != 0 goto label1;

        if z0 == 0 goto label1;

        $z6 = 0;

        goto label4;

     label1:
        if z2 == 0 goto label2;

        if z0 == 0 goto label2;

        if z1 == 0 goto label2;

        $z4 = r4 instanceof androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskVariable;

        if $z4 == 0 goto label2;

        $r13 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.expressions.IrStatementContainer: java.util.List getStatements()>();

        $r14 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irIsUncertain(androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue,int)>(r3, i0);

        $r15 = (androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskVariable) r4;

        $r16 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        $r17 = interfaceinvoke $r16.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.ir.descriptors.IrBuiltIns getIrBuiltIns()>();

        $r18 = virtualinvoke $r17.<org.jetbrains.kotlin.ir.descriptors.IrBuiltIns: org.jetbrains.kotlin.ir.types.IrType getIntType()>();

        $r19 = (org.jetbrains.kotlin.ir.declarations.IrValueDeclaration) r1;

        $r20 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irGet(org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)>($r19);

        $r21 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irChanged(org.jetbrains.kotlin.ir.expressions.IrExpression)>($r20);

        $r22 = <androidx.compose.compiler.plugins.kotlin.lower.ParamState: androidx.compose.compiler.plugins.kotlin.lower.ParamState Different>;

        $i2 = virtualinvoke $r22.<androidx.compose.compiler.plugins.kotlin.lower.ParamState: int bitsForSlot(int)>(i0);

        $r23 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrConst irConst(int)>($i2);

        $r25 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r23;

        $r24 = <androidx.compose.compiler.plugins.kotlin.lower.ParamState: androidx.compose.compiler.plugins.kotlin.lower.ParamState Same>;

        $i3 = virtualinvoke $r24.<androidx.compose.compiler.plugins.kotlin.lower.ParamState: int bitsForSlot(int)>(i0);

        $r26 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrConst irConst(int)>($i3);

        $r27 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r26;

        $r28 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.impl.IrIfThenElseImpl irIfThenElse(org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r18, $r21, $r25, $r27);

        $r29 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r28;

        $r30 = interfaceinvoke $r15.<androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskVariable: org.jetbrains.kotlin.ir.expressions.IrExpression irOrSetBitsAtSlot(int,org.jetbrains.kotlin.ir.expressions.IrExpression)>(i0, $r29);

        $r31 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irIf(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r14, $r30);

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>($r31);

        $z6 = 1;

        goto label4;

     label2:
        if z0 != 0 goto label3;

        if z1 == 0 goto label3;

        $z3 = r4 instanceof androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskVariable;

        if $z3 == 0 goto label3;

        $r7 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.expressions.IrStatementContainer: java.util.List getStatements()>();

        $r9 = (androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskVariable) r4;

        $r8 = <androidx.compose.compiler.plugins.kotlin.lower.ParamState: androidx.compose.compiler.plugins.kotlin.lower.ParamState Static>;

        $i1 = virtualinvoke $r8.<androidx.compose.compiler.plugins.kotlin.lower.ParamState: int bitsForSlot(int)>(i0);

        $r10 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrConst irConst(int)>($i1);

        $r11 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r10;

        $r12 = interfaceinvoke $r9.<androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskVariable: org.jetbrains.kotlin.ir.expressions.IrExpression irOrSetBitsAtSlot(int,org.jetbrains.kotlin.ir.expressions.IrExpression)>(i0, $r11);

        $z6 = interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r12);

        goto label4;

     label3:
        $z6 = z1;

     label4:
        return $z6;
    }

    private final void buildStatementsForSkippingAndDefaults(org.jetbrains.kotlin.ir.IrElement, org.jetbrains.kotlin.ir.expressions.IrStatementContainer, org.jetbrains.kotlin.ir.expressions.IrStatementContainer, boolean, java.util.List, androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope, androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue, androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue, androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue, boolean[])
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0, r166;
        org.jetbrains.kotlin.ir.IrElement r1, $r62;
        org.jetbrains.kotlin.ir.expressions.IrStatementContainer r2, r3;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, z12, $z13, z14, z15, $z16, $z17;
        java.util.List r4, $r13, $r14, $r16, $r17, $r28, $r36, $r41, $r47, $r59, $r64, $r74, $r76, $r101, $r104, $r122, $r128, $r135, $r138, $r178, $r200;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope r5;
        androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue r6, r7;
        androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue r8;
        boolean[] r9, r10, r153, r154, r207;
        org.jetbrains.kotlin.ir.expressions.IrExpression r11, $r18, $r20, $r21, $r23, $r24, $r26, $r31, $r37, $r39, $r48, $r54, $r60, $r63, $r70, $r75, $r77, $r81, $r82, $r83, $r87, $r88, $r92, $r96, $r97, $r99, $r103, $r105, $r109, $r110, $r111, $r115, $r118, $r123, $r125, $r126, $r129, $r132, $r134, $r136, $r137, $r139, $r141, $r142, $r144, $r146, $r148, $r169, r184, $r185, $r192, $r195, $r197, r198, $r199;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$ParametersScope $r12, r160;
        java.util.Collection $r15, $r208, r209, r210;
        org.jetbrains.kotlin.ir.expressions.IrConst $r19, $r80, $r95, $r108, $r191, $r194;
        org.jetbrains.kotlin.ir.expressions.IrCall $r22, r206;
        kotlin.jvm.internal.SpreadBuilder $r25, $r38;
        org.jetbrains.kotlin.ir.IrStatement $r27, $r32, $r40, $r73;
        org.jetbrains.kotlin.ir.IrStatement[] $r29, $r33, $r35, $r42, $r44, $r46;
        java.lang.Object[] $r30, $r34, $r43, $r45;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, $i22, $i23, i24, i25, i26, i27, i28;
        org.jetbrains.kotlin.ir.expressions.impl.IrIfThenElseImpl $r49, $r147, $r196;
        java.lang.NullPointerException $r50, $r51;
        org.jetbrains.kotlin.ir.types.IrType $r52, $r55, $r121, $r143, $r151, $r189, r205;
        org.jetbrains.kotlin.ir.declarations.IrValueDeclaration $r53, $r68, $r86, $r117, $r145;
        org.jetbrains.kotlin.ir.symbols.IrClassSymbol $r56;
        org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol $r57;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r58, $r67;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope $r61;
        org.jetbrains.kotlin.ir.declarations.IrFunction $r65;
        org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol $r66;
        org.jetbrains.kotlin.descriptors.DeclarationDescriptor $r69;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$buildStatementsForSkippingAndDefaults$$inlined$forEachIndexed$lambda$1 $r71;
        kotlin.jvm.functions.Function1 $r72;
        androidx.compose.compiler.plugins.kotlin.lower.ParamState $r78, $r93, $r106, $r190, $r193;
        androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskVariable $r79, $r94, $r107, $r133, $r140, $r186;
        java.util.Map $r84, $r112, $r113, $r175, $r176;
        java.lang.Object $r85, r163, r181, r203;
        org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$IF $r89;
        org.jetbrains.kotlin.ir.expressions.IrBranch[] $r90;
        org.jetbrains.kotlin.ir.expressions.IrStatementOrigin $r91;
        org.jetbrains.kotlin.ir.expressions.IrBranch $r98, $r100;
        org.jetbrains.kotlin.ir.expressions.impl.IrWhenImpl $r102;
        java.lang.Integer $r114, $r177;
        org.jetbrains.kotlin.ir.visitors.IrElementTransformer $r116;
        org.jetbrains.kotlin.name.Name $r119, $r149;
        java.lang.String $r120, $r150;
        org.jetbrains.kotlin.ir.declarations.IrVariable $r124, $r131;
        kotlin.Unit $r127;
        org.jetbrains.kotlin.ir.expressions.IrExpression[] $r130, r155, r156, r157;
        java.lang.Throwable $r152;
        org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase r158, r159;
        java.lang.Iterable $r161, $r179, $r201;
        java.util.Iterator r162, r180, r202;
        org.jetbrains.kotlin.ir.declarations.IrValueParameter r164, r182, r204;
        org.jetbrains.kotlin.ir.expressions.IrExpressionBody r165, r183;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope r167, r168;
        org.jetbrains.kotlin.ir.declarations.impl.IrVariableImpl $r171, r172, r174;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r187;
        org.jetbrains.kotlin.ir.descriptors.IrBuiltIns $r188;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.ir.IrElement;

        r2 := @parameter1: org.jetbrains.kotlin.ir.expressions.IrStatementContainer;

        r3 := @parameter2: org.jetbrains.kotlin.ir.expressions.IrStatementContainer;

        z0 := @parameter3: boolean;

        r4 := @parameter4: java.util.List;

        r5 := @parameter5: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        r6 := @parameter6: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue;

        r7 := @parameter7: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue;

        r8 := @parameter8: androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue;

        r9 := @parameter9: boolean[];

        i10 = interfaceinvoke r4.<java.util.List: int size()>();

        r153 = newarray (boolean)[i10];

        i11 = 0;

     label01:
        if i11 >= i10 goto label02;

        i12 = i11;

        r154 = r153;

        r154[i12] = 1;

        i11 = i11 + 1;

        goto label01;

     label02:
        r10 = r153;

        i13 = interfaceinvoke r4.<java.util.List: int size()>();

        r155 = newarray (org.jetbrains.kotlin.ir.expressions.IrExpression)[i13];

        i14 = 0;

     label03:
        if i14 >= i13 goto label04;

        i15 = i14;

        r156 = r155;

        r156[i15] = null;

        i14 = i14 + 1;

        goto label03;

     label04:
        r157 = r155;

        r158 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase mutableStatementContainer()>();

        r159 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase mutableStatementContainer()>();

        $r12 = new androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$ParametersScope;

        specialinvoke $r12.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$ParametersScope: void <init>()>();

        r160 = $r12;

        $r161 = (java.lang.Iterable) r4;

        i16 = 0;

        r162 = interfaceinvoke $r161.<java.lang.Iterable: java.util.Iterator iterator()>();

     label05:
        $z1 = interfaceinvoke r162.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label18;

        r163 = interfaceinvoke r162.<java.util.Iterator: java.lang.Object next()>();

        $i7 = i16;

        i16 = i16 + 1;

        i17 = $i7;

        if i17 >= 0 goto label06;

        staticinvoke <kotlin.collections.CollectionsKt: void throwIndexOverflow()>();

     label06:
        r164 = (org.jetbrains.kotlin.ir.declarations.IrValueParameter) r163;

        i18 = i17;

        r165 = interfaceinvoke r164.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.ir.expressions.IrExpressionBody getDefaultValue()>();

        if r8 == null goto label16;

        if r165 == null goto label16;

        r166 = r0;

        r167 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope) r160;

        r168 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope access$getCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer)>(r166);

        staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void access$setCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r166, r167);

        virtualinvoke r167.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: void setParent(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r168);

        $i8 = virtualinvoke r168.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: int getLevel()>();

        $i9 = $i8 + 1;

        virtualinvoke r167.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: void setLevel(int)>($i9);

     label07:
        $r115 = interfaceinvoke r165.<org.jetbrains.kotlin.ir.expressions.IrExpressionBody: org.jetbrains.kotlin.ir.expressions.IrExpression getExpression()>();

        $r116 = (org.jetbrains.kotlin.ir.visitors.IrElementTransformer) r0;

        $r169 = interfaceinvoke $r115.<org.jetbrains.kotlin.ir.expressions.IrExpression: org.jetbrains.kotlin.ir.expressions.IrExpression transform(org.jetbrains.kotlin.ir.visitors.IrElementTransformer,java.lang.Object)>($r116, null);

     label08:
        staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void access$setCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r166, r168);

        goto label11;

     label09:
        $r152 := @caughtexception;

     label10:
        staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void access$setCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r166, r168);

        throw $r152;

     label11:
        r11 = $r169;

        $z8 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean isStatic(org.jetbrains.kotlin.ir.expressions.IrExpression)>(r11);

        r10[i18] = $z8;

        r157[i18] = r11;

        if z0 != 0 goto label12;

        $r143 = interfaceinvoke r164.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.ir.types.IrType getType()>();

        $r144 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irGetBit(androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue,int)>(r8, i18);

        $r145 = (org.jetbrains.kotlin.ir.declarations.IrValueDeclaration) r164;

        $r146 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irGet(org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)>($r145);

        $r147 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.impl.IrIfThenElseImpl irIfThenElse(org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r143, $r144, r11, $r146);

        $r148 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r147;

        $r149 = interfaceinvoke r164.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.name.Name getName()>();

        $r150 = virtualinvoke $r149.<org.jetbrains.kotlin.name.Name: java.lang.String getIdentifier()>();

        $r151 = interfaceinvoke r164.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.ir.types.IrType getType()>();

        $r171 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.declarations.impl.IrVariableImpl irTemporary(org.jetbrains.kotlin.ir.expressions.IrExpression,java.lang.String,org.jetbrains.kotlin.ir.types.IrType,boolean,boolean)>($r148, $r150, $r151, 0, 1);

        goto label15;

     label12:
        $r117 = (org.jetbrains.kotlin.ir.declarations.IrValueDeclaration) r164;

        $r118 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irGet(org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)>($r117);

        $r119 = interfaceinvoke r164.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.name.Name getName()>();

        $r120 = virtualinvoke $r119.<org.jetbrains.kotlin.name.Name: java.lang.String getIdentifier()>();

        $r121 = interfaceinvoke r164.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.ir.types.IrType getType()>();

        r172 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.declarations.impl.IrVariableImpl irTemporary(org.jetbrains.kotlin.ir.expressions.IrExpression,java.lang.String,org.jetbrains.kotlin.ir.types.IrType,boolean,boolean)>($r118, $r120, $r121, 0, 1);

        $z9 = r10[i18];

        if $z9 != 0 goto label13;

        $z10 = r6 instanceof androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskVariable;

        if $z10 == 0 goto label13;

        $r128 = virtualinvoke r158.<org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase: java.util.List getStatements()>();

        $r129 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irGetBit(androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue,int)>(r8, i18);

        $r130 = newarray (org.jetbrains.kotlin.ir.expressions.IrExpression)[2];

        $r131 = (org.jetbrains.kotlin.ir.declarations.IrVariable) r172;

        $r132 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irSet(org.jetbrains.kotlin.ir.declarations.IrVariable,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r131, r11);

        $r130[0] = $r132;

        $r133 = (androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskVariable) r6;

        $r134 = interfaceinvoke $r133.<androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskVariable: org.jetbrains.kotlin.ir.expressions.IrExpression irSetSlotUncertain(int)>(i18);

        $r130[1] = $r134;

        $r135 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object[])>($r130);

        $r136 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.IrExpression irBlock$default(androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,java.util.List,int,java.lang.Object)>(r0, null, null, $r135, 3, null);

        $r137 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irIf(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r129, $r136);

        interfaceinvoke $r128.<java.util.List: boolean add(java.lang.Object)>($r137);

        $r138 = virtualinvoke r159.<org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase: java.util.List getStatements()>();

        $r139 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irGetBit(androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue,int)>(r8, i18);

        $r140 = (androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskVariable) r6;

        $r141 = interfaceinvoke $r140.<androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskVariable: org.jetbrains.kotlin.ir.expressions.IrExpression irSetSlotUncertain(int)>(i18);

        $r142 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irIf(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r139, $r141);

        interfaceinvoke $r138.<java.util.List: boolean add(java.lang.Object)>($r142);

        goto label14;

     label13:
        $r122 = virtualinvoke r158.<org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase: java.util.List getStatements()>();

        $r123 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irGetBit(androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue,int)>(r8, i18);

        $r124 = (org.jetbrains.kotlin.ir.declarations.IrVariable) r172;

        $r125 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irSet(org.jetbrains.kotlin.ir.declarations.IrVariable,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r124, r11);

        $r126 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irIf(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r123, $r125);

        interfaceinvoke $r122.<java.util.List: boolean add(java.lang.Object)>($r126);

     label14:
        $r127 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r171 = r172;

     label15:
        r174 = $r171;

        $r175 = virtualinvoke r5.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: java.util.Map getRemappedParams()>();

        interfaceinvoke $r175.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r164, r174);

        $r176 = virtualinvoke r5.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: java.util.Map getParamsToSlots()>();

        $r177 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i18);

        interfaceinvoke $r176.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r174, $r177);

        $r178 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.expressions.IrStatementContainer: java.util.List getStatements()>();

        interfaceinvoke $r178.<java.util.List: boolean add(java.lang.Object)>(r174);

        goto label17;

     label16:
        $r112 = virtualinvoke r5.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: java.util.Map getRemappedParams()>();

        interfaceinvoke $r112.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r164, r164);

        $r113 = virtualinvoke r5.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: java.util.Map getParamsToSlots()>();

        $r114 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i18);

        interfaceinvoke $r113.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r164, $r114);

     label17:
        goto label05;

     label18:
        $r179 = (java.lang.Iterable) r4;

        i19 = 0;

        r180 = interfaceinvoke $r179.<java.lang.Iterable: java.util.Iterator iterator()>();

     label19:
        $z11 = interfaceinvoke r180.<java.util.Iterator: boolean hasNext()>();

        if $z11 == 0 goto label29;

        r181 = interfaceinvoke r180.<java.util.Iterator: java.lang.Object next()>();

        $i4 = i19;

        i19 = i19 + 1;

        i20 = $i4;

        if i20 >= 0 goto label20;

        staticinvoke <kotlin.collections.CollectionsKt: void throwIndexOverflow()>();

     label20:
        r182 = (org.jetbrains.kotlin.ir.declarations.IrValueParameter) r181;

        i21 = i20;

        $z5 = staticinvoke <org.jetbrains.kotlin.ir.util.AdditionalIrUtilsKt: boolean isVararg(org.jetbrains.kotlin.ir.declarations.IrValueParameter)>(r182);

        if $z5 == 0 goto label21;

        goto label19;

     label21:
        r183 = interfaceinvoke r182.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.ir.expressions.IrExpressionBody getDefaultValue()>();

        if z0 == 0 goto label28;

        $z6 = r6 instanceof androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskVariable;

        if $z6 == 0 goto label28;

        $z7 = r9[i21];

        if $z7 == 0 goto label23;

        if r8 == null goto label22;

        if r183 == null goto label22;

        $r104 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.expressions.IrStatementContainer: java.util.List getStatements()>();

        $r105 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irGetBit(androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue,int)>(r8, i21);

        $r107 = (androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskVariable) r6;

        $r106 = <androidx.compose.compiler.plugins.kotlin.lower.ParamState: androidx.compose.compiler.plugins.kotlin.lower.ParamState Same>;

        $i6 = virtualinvoke $r106.<androidx.compose.compiler.plugins.kotlin.lower.ParamState: int bitsForSlot(int)>(i21);

        $r108 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrConst irConst(int)>($i6);

        $r109 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r108;

        $r110 = interfaceinvoke $r107.<androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskVariable: org.jetbrains.kotlin.ir.expressions.IrExpression irOrSetBitsAtSlot(int,org.jetbrains.kotlin.ir.expressions.IrExpression)>(i21, $r109);

        $r111 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irIf(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r105, $r110);

        interfaceinvoke $r104.<java.util.List: boolean add(java.lang.Object)>($r111);

     label22:
        goto label19;

     label23:
        z12 = r10[i21];

        $r84 = virtualinvoke r5.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: java.util.Map getRemappedParams()>();

        $r85 = interfaceinvoke $r84.<java.util.Map: java.lang.Object get(java.lang.Object)>(r182);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r85);

        $r86 = (org.jetbrains.kotlin.ir.declarations.IrValueDeclaration) $r85;

        $r87 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irGet(org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)>($r86);

        r184 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irChanged(org.jetbrains.kotlin.ir.expressions.IrExpression)>($r87);

        if r8 == null goto label24;

        if z12 != 0 goto label24;

        $r103 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irIsProvided(androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue,int)>(r8, i21);

        $r185 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irAndAnd(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r103, r184);

        goto label25;

     label24:
        $r185 = r184;

     label25:
        $r186 = (androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskVariable) r6;

        $r187 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        $r188 = interfaceinvoke $r187.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.ir.descriptors.IrBuiltIns getIrBuiltIns()>();

        $r189 = virtualinvoke $r188.<org.jetbrains.kotlin.ir.descriptors.IrBuiltIns: org.jetbrains.kotlin.ir.types.IrType getIntType()>();

        $r190 = <androidx.compose.compiler.plugins.kotlin.lower.ParamState: androidx.compose.compiler.plugins.kotlin.lower.ParamState Different>;

        $i22 = virtualinvoke $r190.<androidx.compose.compiler.plugins.kotlin.lower.ParamState: int bitsForSlot(int)>(i21);

        $r191 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrConst irConst(int)>($i22);

        $r192 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r191;

        $r193 = <androidx.compose.compiler.plugins.kotlin.lower.ParamState: androidx.compose.compiler.plugins.kotlin.lower.ParamState Same>;

        $i23 = virtualinvoke $r193.<androidx.compose.compiler.plugins.kotlin.lower.ParamState: int bitsForSlot(int)>(i21);

        $r194 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrConst irConst(int)>($i23);

        $r195 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r194;

        $r196 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.impl.IrIfThenElseImpl irIfThenElse(org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r189, $r185, $r192, $r195);

        $r197 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r196;

        r198 = interfaceinvoke $r186.<androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskVariable: org.jetbrains.kotlin.ir.expressions.IrExpression irOrSetBitsAtSlot(int,org.jetbrains.kotlin.ir.expressions.IrExpression)>(i21, $r197);

        if r8 == null goto label26;

        if z12 == 0 goto label26;

        $r89 = <org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$IF: org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$IF INSTANCE>;

        $r91 = (org.jetbrains.kotlin.ir.expressions.IrStatementOrigin) $r89;

        $r90 = newarray (org.jetbrains.kotlin.ir.expressions.IrBranch)[2];

        $r92 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irGetBit(androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue,int)>(r8, i21);

        $r94 = (androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskVariable) r6;

        $r93 = <androidx.compose.compiler.plugins.kotlin.lower.ParamState: androidx.compose.compiler.plugins.kotlin.lower.ParamState Static>;

        $i5 = virtualinvoke $r93.<androidx.compose.compiler.plugins.kotlin.lower.ParamState: int bitsForSlot(int)>(i21);

        $r95 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrConst irConst(int)>($i5);

        $r96 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r95;

        $r97 = interfaceinvoke $r94.<androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskVariable: org.jetbrains.kotlin.ir.expressions.IrExpression irOrSetBitsAtSlot(int,org.jetbrains.kotlin.ir.expressions.IrExpression)>(i21, $r96);

        $r98 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrBranch irBranch(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r92, $r97);

        $r90[0] = $r98;

        $r99 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irIsUncertain(androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue,int)>(r7, i21);

        $r100 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrBranch irBranch(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r99, r198);

        $r90[1] = $r100;

        $r101 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object[])>($r90);

        $r102 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.impl.IrWhenImpl irWhen$default(androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,java.util.List,int,java.lang.Object)>(r0, null, $r91, $r101, 1, null);

        $r199 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r102;

        goto label27;

     label26:
        $r88 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irIsUncertain(androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue,int)>(r7, i21);

        $r199 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irIf(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r88, r198);

     label27:
        $r200 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.expressions.IrStatementContainer: java.util.List getStatements()>();

        interfaceinvoke $r200.<java.util.List: boolean add(java.lang.Object)>($r199);

     label28:
        goto label19;

     label29:
        $r201 = (java.lang.Iterable) r4;

        i24 = 0;

        r202 = interfaceinvoke $r201.<java.lang.Iterable: java.util.Iterator iterator()>();

     label30:
        $z13 = interfaceinvoke r202.<java.util.Iterator: boolean hasNext()>();

        if $z13 == 0 goto label36;

        r203 = interfaceinvoke r202.<java.util.Iterator: java.lang.Object next()>();

        $i2 = i24;

        i24 = i24 + 1;

        i25 = $i2;

        if i25 >= 0 goto label31;

        staticinvoke <kotlin.collections.CollectionsKt: void throwIndexOverflow()>();

     label31:
        r204 = (org.jetbrains.kotlin.ir.declarations.IrValueParameter) r203;

        i26 = i25;

        $r52 = interfaceinvoke r204.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.ir.types.IrType getVarargElementType()>();

        if $r52 == null goto label32;

        goto label33;

     label32:
        goto label30;

     label33:
        r205 = $r52;

        if z0 == 0 goto label35;

        $z3 = r6 instanceof androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskVariable;

        if $z3 == 0 goto label35;

        $z4 = r9[i26];

        if $z4 == 0 goto label34;

        goto label30;

     label34:
        $r53 = (org.jetbrains.kotlin.ir.declarations.IrValueDeclaration) r204;

        $r54 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irGet(org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)>($r53);

        $r55 = interfaceinvoke r204.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.ir.types.IrType getType()>();

        $r56 = staticinvoke <org.jetbrains.kotlin.ir.types.IrTypesKt: org.jetbrains.kotlin.ir.symbols.IrClassSymbol getClassOrNull(org.jetbrains.kotlin.ir.types.IrType)>($r55);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r56);

        $r57 = staticinvoke <org.jetbrains.kotlin.ir.util.AdditionalIrUtilsKt: org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol getPropertyGetter(org.jetbrains.kotlin.ir.symbols.IrClassSymbol,java.lang.String)>($r56, "size");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r57);

        $r58 = interfaceinvoke $r57.<org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol: org.jetbrains.kotlin.descriptors.FunctionDescriptor getDescriptor()>();

        r206 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrCall irMethodCall$default(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.descriptors.FunctionDescriptor,int,int,int,java.lang.Object)>(r0, $r54, $r58, 0, 0, 12, null);

        $r59 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.expressions.IrStatementContainer: java.util.List getStatements()>();

        $r62 = (org.jetbrains.kotlin.ir.IrElement) r204;

        $r61 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope) r160;

        $r60 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r206;

        $r63 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irStartReplaceableGroup(org.jetbrains.kotlin.ir.IrElement,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r62, $r61, $r60);

        interfaceinvoke $r59.<java.util.List: boolean add(java.lang.Object)>($r63);

        $r64 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.expressions.IrStatementContainer: java.util.List getStatements()>();

        $r65 = virtualinvoke r5.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: org.jetbrains.kotlin.ir.declarations.IrFunction getFunction()>();

        $r66 = interfaceinvoke $r65.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getSymbol()>();

        $r67 = interfaceinvoke $r66.<org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol: org.jetbrains.kotlin.descriptors.FunctionDescriptor getDescriptor()>();

        $r69 = (org.jetbrains.kotlin.descriptors.DeclarationDescriptor) $r67;

        $r68 = (org.jetbrains.kotlin.ir.declarations.IrValueDeclaration) r204;

        $r70 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irGet(org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)>($r68);

        $r71 = new androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$buildStatementsForSkippingAndDefaults$$inlined$forEachIndexed$lambda$1;

        specialinvoke $r71.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$buildStatementsForSkippingAndDefaults$$inlined$forEachIndexed$lambda$1: void <init>(int,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,boolean,androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue,boolean[],org.jetbrains.kotlin.ir.expressions.IrStatementContainer,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$ParametersScope,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope)>(i26, r0, z0, r6, r9, r2, r160, r5);

        $r72 = (kotlin.jvm.functions.Function1) $r71;

        $r73 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.IrStatement irForLoop(org.jetbrains.kotlin.descriptors.DeclarationDescriptor,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrExpression,kotlin.jvm.functions.Function1)>($r69, r205, $r70, $r72);

        interfaceinvoke $r64.<java.util.List: boolean add(java.lang.Object)>($r73);

        $r74 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.expressions.IrStatementContainer: java.util.List getStatements()>();

        $r75 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irEndReplaceableGroup()>();

        interfaceinvoke $r74.<java.util.List: boolean add(java.lang.Object)>($r75);

        $r76 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.expressions.IrStatementContainer: java.util.List getStatements()>();

        $r77 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irIsUncertain(androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue,int)>(r6, i26);

        $r79 = (androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskVariable) r6;

        $r78 = <androidx.compose.compiler.plugins.kotlin.lower.ParamState: androidx.compose.compiler.plugins.kotlin.lower.ParamState Same>;

        $i3 = virtualinvoke $r78.<androidx.compose.compiler.plugins.kotlin.lower.ParamState: int bitsForSlot(int)>(i26);

        $r80 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrConst irConst(int)>($i3);

        $r81 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r80;

        $r82 = interfaceinvoke $r79.<androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskVariable: org.jetbrains.kotlin.ir.expressions.IrExpression irOrSetBitsAtSlot(int,org.jetbrains.kotlin.ir.expressions.IrExpression)>(i26, $r81);

        $r83 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irIf(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r77, $r82);

        interfaceinvoke $r76.<java.util.List: boolean add(java.lang.Object)>($r83);

     label35:
        goto label30;

     label36:
        if z0 == 0 goto label41;

        r207 = r10;

        i27 = lengthof r207;

        i28 = 0;

     label37:
        if i28 >= i27 goto label39;

        z14 = r207[i28];

        z15 = z14;

        if z15 != 0 goto label38;

        $z16 = 0;

        goto label40;

     label38:
        i28 = i28 + 1;

        goto label37;

     label39:
        $z16 = 1;

     label40:
        if $z16 == 0 goto label42;

     label41:
        $r13 = interfaceinvoke r3.<org.jetbrains.kotlin.ir.expressions.IrStatementContainer: java.util.List getStatements()>();

        $r14 = virtualinvoke r158.<org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase: java.util.List getStatements()>();

        $r15 = (java.util.Collection) $r14;

        interfaceinvoke $r13.<java.util.List: boolean addAll(java.util.Collection)>($r15);

        goto label47;

     label42:
        $r16 = virtualinvoke r158.<org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase: java.util.List getStatements()>();

        $r208 = (java.util.Collection) $r16;

        $z2 = interfaceinvoke $r208.<java.util.Collection: boolean isEmpty()>();

        if $z2 != 0 goto label43;

        $z17 = 1;

        goto label44;

     label43:
        $z17 = 0;

     label44:
        if $z17 == 0 goto label47;

        $r17 = interfaceinvoke r3.<org.jetbrains.kotlin.ir.expressions.IrStatementContainer: java.util.List getStatements()>();

        $r18 = interfaceinvoke r7.<androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue: org.jetbrains.kotlin.ir.expressions.IrExpression irLowBit()>();

        $r19 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrConst irConst(int)>(0);

        $r20 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r19;

        $r21 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irEqual(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r18, $r20);

        $r22 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrCall irDefaultsInvalid()>();

        $r23 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r22;

        $r24 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irOrOr(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r21, $r23);

        $r25 = new kotlin.jvm.internal.SpreadBuilder;

        specialinvoke $r25.<kotlin.jvm.internal.SpreadBuilder: void <init>(int)>(3);

        $r26 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irStartDefaults(org.jetbrains.kotlin.ir.IrElement)>(r1);

        $r27 = (org.jetbrains.kotlin.ir.IrStatement) $r26;

        virtualinvoke $r25.<kotlin.jvm.internal.SpreadBuilder: void add(java.lang.Object)>($r27);

        $r28 = virtualinvoke r158.<org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase: java.util.List getStatements()>();

        r209 = (java.util.Collection) $r28;

        $r29 = newarray (org.jetbrains.kotlin.ir.IrStatement)[0];

        $r30 = interfaceinvoke r209.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r29);

        if $r30 != null goto label45;

        $r51 = new java.lang.NullPointerException;

        specialinvoke $r51.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlin.Array<T>");

        throw $r51;

     label45:
        virtualinvoke $r25.<kotlin.jvm.internal.SpreadBuilder: void addSpread(java.lang.Object)>($r30);

        $r31 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irEndDefaults()>();

        $r32 = (org.jetbrains.kotlin.ir.IrStatement) $r31;

        virtualinvoke $r25.<kotlin.jvm.internal.SpreadBuilder: void add(java.lang.Object)>($r32);

        $i0 = virtualinvoke $r25.<kotlin.jvm.internal.SpreadBuilder: int size()>();

        $r33 = newarray (org.jetbrains.kotlin.ir.IrStatement)[$i0];

        $r34 = virtualinvoke $r25.<kotlin.jvm.internal.SpreadBuilder: java.lang.Object[] toArray(java.lang.Object[])>($r33);

        $r35 = (org.jetbrains.kotlin.ir.IrStatement[]) $r34;

        $r36 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object[])>($r35);

        $r37 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.IrExpression irBlock$default(androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,java.util.List,int,java.lang.Object)>(r0, null, null, $r36, 3, null);

        $r38 = new kotlin.jvm.internal.SpreadBuilder;

        specialinvoke $r38.<kotlin.jvm.internal.SpreadBuilder: void <init>(int)>(2);

        $r39 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irSkipCurrentGroup()>();

        $r40 = (org.jetbrains.kotlin.ir.IrStatement) $r39;

        virtualinvoke $r38.<kotlin.jvm.internal.SpreadBuilder: void add(java.lang.Object)>($r40);

        $r41 = virtualinvoke r159.<org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase: java.util.List getStatements()>();

        r210 = (java.util.Collection) $r41;

        $r42 = newarray (org.jetbrains.kotlin.ir.IrStatement)[0];

        $r43 = interfaceinvoke r210.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r42);

        if $r43 != null goto label46;

        $r50 = new java.lang.NullPointerException;

        specialinvoke $r50.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlin.Array<T>");

        throw $r50;

     label46:
        virtualinvoke $r38.<kotlin.jvm.internal.SpreadBuilder: void addSpread(java.lang.Object)>($r43);

        $i1 = virtualinvoke $r38.<kotlin.jvm.internal.SpreadBuilder: int size()>();

        $r44 = newarray (org.jetbrains.kotlin.ir.IrStatement)[$i1];

        $r45 = virtualinvoke $r38.<kotlin.jvm.internal.SpreadBuilder: java.lang.Object[] toArray(java.lang.Object[])>($r44);

        $r46 = (org.jetbrains.kotlin.ir.IrStatement[]) $r45;

        $r47 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object[])>($r46);

        $r48 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.IrExpression irBlock$default(androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,java.util.List,int,java.lang.Object)>(r0, null, null, $r47, 3, null);

        $r49 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.impl.IrIfThenElseImpl irIfThenElse$default(androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression,int,java.lang.Object)>(r0, null, $r24, $r37, $r48, 1, null);

        interfaceinvoke $r17.<java.util.List: boolean add(java.lang.Object)>($r49);

     label47:
        return;

        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private final org.jetbrains.kotlin.ir.expressions.IrExpression irEndRestartGroupAndUpdateScope(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope, androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue, androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue, int)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope r1;
        androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue r2;
        androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue r3;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, i11, i12, i13, i14, i15, i16, i17;
        org.jetbrains.kotlin.ir.declarations.IrFunction r4, $r80, $r90, $r102, $r127;
        org.jetbrains.kotlin.ir.declarations.IrValueParameter r5, $r110, r173, r175;
        org.jetbrains.kotlin.ir.declarations.impl.IrVariableImpl r6, $r165, r180;
        org.jetbrains.kotlin.descriptors.impl.AnonymousFunctionDescriptor r7, $r22, r166;
        org.jetbrains.kotlin.descriptors.impl.ValueParameterDescriptorImpl r8, r9, $r29, $r40;
        org.jetbrains.kotlin.backend.common.lower.DeclarationIrBuilder r10, $r74;
        org.jetbrains.kotlin.ir.builders.IrBuilderWithScope $r11, r18, $r99, $r104, $r136, $r139, $r142, $r150;
        org.jetbrains.kotlin.ir.builders.IrBlockBodyBuilder r12, r19, $r95;
        org.jetbrains.kotlin.ir.declarations.impl.IrFunctionImpl r14, $r61, r170;
        org.jetbrains.kotlin.ir.expressions.IrFunctionAccessExpression r16, $r174, r176, $r179, r181;
        boolean z4, z5, $z7, $z8, $z9, $z10, $z11, $z12, $z13, z14, z15, $z17, z19, z20, z21, z22, $z23, z25, z26, z27, z28, z29, z30, $z32, z33, z36, z37, z39, z40, $z42, z43;
        kotlin.Unit r20, r21, $r57, $r119, $r141;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r23, $r59, $r64, $r126;
        org.jetbrains.kotlin.descriptors.annotations.Annotations$Companion $r24, $r30, $r41;
        org.jetbrains.kotlin.descriptors.DeclarationDescriptor $r25;
        org.jetbrains.kotlin.descriptors.annotations.Annotations $r26, $r32, $r43;
        org.jetbrains.kotlin.descriptors.SourceElement $r27, $r39, $r48;
        org.jetbrains.kotlin.descriptors.CallableMemberDescriptor$Kind $r28;
        org.jetbrains.kotlin.descriptors.CallableDescriptor $r31, $r42;
        androidx.compose.compiler.plugins.kotlin.KtxNameConventions $r33, $r44, $r79;
        org.jetbrains.kotlin.name.Name $r34, $r45, $r67, $r81;
        org.jetbrains.kotlin.descriptors.ClassDescriptor $r35, $r83;
        org.jetbrains.kotlin.types.SimpleType $r36, $r47, $r84;
        org.jetbrains.kotlin.types.KotlinType $r37, $r38, $r49, $r55, $r85, $r86, $r125;
        org.jetbrains.kotlin.ir.descriptors.IrBuiltIns $r46, $r71, $r92;
        java.util.List $r50, $r52, $r60, $r103, $r105, $r113, $r132, $r154;
        org.jetbrains.kotlin.descriptors.impl.ValueParameterDescriptorImpl[] $r51;
        org.jetbrains.kotlin.descriptors.Visibility $r53, $r68;
        org.jetbrains.kotlin.descriptors.Modality $r54, $r69;
        org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol $r58, $r100, $r101;
        org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin$LOCAL_FUNCTION_FOR_LAMBDA $r62;
        org.jetbrains.kotlin.ir.symbols.impl.IrSimpleFunctionSymbolImpl $r63;
        org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin $r65;
        org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol $r66, $r77;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r70, $r75, $r91;
        org.jetbrains.kotlin.ir.types.IrType $r72, $r87, $r88, $r93, $r128, $r134, $r147, $r148;
        org.jetbrains.kotlin.ir.declarations.IrDeclarationParent $r73;
        org.jetbrains.kotlin.ir.builders.IrGeneratorContext $r76, $r96;
        org.jetbrains.kotlin.ir.symbols.IrSymbol $r78;
        java.lang.String $r82, $r157, $r161, r167, r168;
        org.jetbrains.kotlin.ir.builders.Scope $r97;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$irEndRestartGroupAndUpdateScope$$inlined$also$lambda$1 $r98;
        java.lang.Object $r106, r172, r185;
        org.jetbrains.kotlin.ir.declarations.IrValueDeclaration $r107, $r135, $r138, $r143, $r151, $r163;
        org.jetbrains.kotlin.ir.expressions.impl.IrGetValueImpl $r108, $r144, $r152, r177, $r178, r182, $r183;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r109, $r111, $r112, $r114, $r122, $r129, $r130, $r133, $r145, $r153, $r155, $r164;
        org.jetbrains.kotlin.ir.expressions.impl.IrReturnImpl $r115;
        org.jetbrains.kotlin.ir.IrStatement $r116, $r121, $r131;
        org.jetbrains.kotlin.ir.expressions.IrBlockBody $r117;
        org.jetbrains.kotlin.ir.expressions.IrBody $r118;
        org.jetbrains.kotlin.ir.IrStatement[] $r120;
        org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor $r123;
        org.jetbrains.kotlin.ir.expressions.IrExpression[] $r124;
        java.lang.Iterable $r137, $r159;
        org.jetbrains.kotlin.ir.expressions.impl.IrVarargImpl $r146;
        org.jetbrains.kotlin.ir.expressions.impl.IrSpreadElementImpl $r149;
        java.lang.IllegalArgumentException $r156, $r160;
        java.lang.Throwable $r158, $r162;
        java.util.Iterator r171, r184;
        org.jetbrains.kotlin.ir.declarations.IrTypeParameter r186;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        r2 := @parameter1: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue;

        r3 := @parameter2: androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue;

        i0 := @parameter3: int;

        r4 = virtualinvoke r1.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: org.jetbrains.kotlin.ir.declarations.IrFunction getFunction()>();

        r5 = interfaceinvoke r4.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.declarations.IrValueParameter getDispatchReceiverParameter()>();

        if r5 == null goto label01;

        $r163 = (org.jetbrains.kotlin.ir.declarations.IrValueDeclaration) r5;

        $r164 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irGet(org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)>($r163);

        $r165 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.declarations.impl.IrVariableImpl irTemporary$default(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,org.jetbrains.kotlin.ir.expressions.IrExpression,java.lang.String,org.jetbrains.kotlin.ir.types.IrType,boolean,boolean,int,java.lang.Object)>(r0, $r164, "rcvr", null, 0, 0, 28, null);

        goto label02;

     label01:
        $r165 = null;

     label02:
        r6 = $r165;

        $r22 = new org.jetbrains.kotlin.descriptors.impl.AnonymousFunctionDescriptor;

        $r23 = interfaceinvoke r4.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.descriptors.FunctionDescriptor getDescriptor()>();

        $r25 = (org.jetbrains.kotlin.descriptors.DeclarationDescriptor) $r23;

        $r24 = <org.jetbrains.kotlin.descriptors.annotations.Annotations: org.jetbrains.kotlin.descriptors.annotations.Annotations$Companion Companion>;

        $r26 = virtualinvoke $r24.<org.jetbrains.kotlin.descriptors.annotations.Annotations$Companion: org.jetbrains.kotlin.descriptors.annotations.Annotations getEMPTY()>();

        $r28 = <org.jetbrains.kotlin.descriptors.CallableMemberDescriptor$Kind: org.jetbrains.kotlin.descriptors.CallableMemberDescriptor$Kind DECLARATION>;

        $r27 = <org.jetbrains.kotlin.descriptors.SourceElement: org.jetbrains.kotlin.descriptors.SourceElement NO_SOURCE>;

        specialinvoke $r22.<org.jetbrains.kotlin.descriptors.impl.AnonymousFunctionDescriptor: void <init>(org.jetbrains.kotlin.descriptors.DeclarationDescriptor,org.jetbrains.kotlin.descriptors.annotations.Annotations,org.jetbrains.kotlin.descriptors.CallableMemberDescriptor$Kind,org.jetbrains.kotlin.descriptors.SourceElement,boolean)>($r25, $r26, $r28, $r27, 0);

        r7 = $r22;

        $r29 = new org.jetbrains.kotlin.descriptors.impl.ValueParameterDescriptorImpl;

        $r31 = (org.jetbrains.kotlin.descriptors.CallableDescriptor) r7;

        $r30 = <org.jetbrains.kotlin.descriptors.annotations.Annotations: org.jetbrains.kotlin.descriptors.annotations.Annotations$Companion Companion>;

        $r32 = virtualinvoke $r30.<org.jetbrains.kotlin.descriptors.annotations.Annotations$Companion: org.jetbrains.kotlin.descriptors.annotations.Annotations getEMPTY()>();

        $r33 = <androidx.compose.compiler.plugins.kotlin.KtxNameConventions: androidx.compose.compiler.plugins.kotlin.KtxNameConventions INSTANCE>;

        $r34 = virtualinvoke $r33.<androidx.compose.compiler.plugins.kotlin.KtxNameConventions: org.jetbrains.kotlin.name.Name getCOMPOSER_PARAMETER()>();

        $r35 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.ClassDescriptor getComposerTypeDescriptor()>();

        $r36 = interfaceinvoke $r35.<org.jetbrains.kotlin.descriptors.ClassDescriptor: org.jetbrains.kotlin.types.SimpleType getDefaultType()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r36, "composerTypeDescriptor.defaultType");

        $r37 = (org.jetbrains.kotlin.types.KotlinType) $r36;

        $r38 = staticinvoke <org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt: org.jetbrains.kotlin.types.KotlinType makeNullable(org.jetbrains.kotlin.types.KotlinType)>($r37);

        $r39 = <org.jetbrains.kotlin.descriptors.SourceElement: org.jetbrains.kotlin.descriptors.SourceElement NO_SOURCE>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r39, "SourceElement.NO_SOURCE");

        specialinvoke $r29.<org.jetbrains.kotlin.descriptors.impl.ValueParameterDescriptorImpl: void <init>(org.jetbrains.kotlin.descriptors.CallableDescriptor,org.jetbrains.kotlin.descriptors.ValueParameterDescriptor,int,org.jetbrains.kotlin.descriptors.annotations.Annotations,org.jetbrains.kotlin.name.Name,org.jetbrains.kotlin.types.KotlinType,boolean,boolean,boolean,org.jetbrains.kotlin.types.KotlinType,org.jetbrains.kotlin.descriptors.SourceElement)>($r31, null, 0, $r32, $r34, $r38, 0, 0, 0, null, $r39);

        r8 = $r29;

        $r40 = new org.jetbrains.kotlin.descriptors.impl.ValueParameterDescriptorImpl;

        $r42 = (org.jetbrains.kotlin.descriptors.CallableDescriptor) r7;

        $r41 = <org.jetbrains.kotlin.descriptors.annotations.Annotations: org.jetbrains.kotlin.descriptors.annotations.Annotations$Companion Companion>;

        $r43 = virtualinvoke $r41.<org.jetbrains.kotlin.descriptors.annotations.Annotations$Companion: org.jetbrains.kotlin.descriptors.annotations.Annotations getEMPTY()>();

        $r44 = <androidx.compose.compiler.plugins.kotlin.KtxNameConventions: androidx.compose.compiler.plugins.kotlin.KtxNameConventions INSTANCE>;

        $r45 = virtualinvoke $r44.<androidx.compose.compiler.plugins.kotlin.KtxNameConventions: org.jetbrains.kotlin.name.Name getCHANGED_PARAMETER()>();

        $r46 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.descriptors.IrBuiltIns getBuiltIns()>();

        $r47 = virtualinvoke $r46.<org.jetbrains.kotlin.ir.descriptors.IrBuiltIns: org.jetbrains.kotlin.types.SimpleType getInt()>();

        $r49 = (org.jetbrains.kotlin.types.KotlinType) $r47;

        $r48 = <org.jetbrains.kotlin.descriptors.SourceElement: org.jetbrains.kotlin.descriptors.SourceElement NO_SOURCE>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r48, "SourceElement.NO_SOURCE");

        specialinvoke $r40.<org.jetbrains.kotlin.descriptors.impl.ValueParameterDescriptorImpl: void <init>(org.jetbrains.kotlin.descriptors.CallableDescriptor,org.jetbrains.kotlin.descriptors.ValueParameterDescriptor,int,org.jetbrains.kotlin.descriptors.annotations.Annotations,org.jetbrains.kotlin.name.Name,org.jetbrains.kotlin.types.KotlinType,boolean,boolean,boolean,org.jetbrains.kotlin.types.KotlinType,org.jetbrains.kotlin.descriptors.SourceElement)>($r42, null, 1, $r43, $r45, $r49, 0, 0, 0, null, $r48);

        r9 = $r40;

        r166 = r7;

        z14 = 0;

        z15 = 0;

        $r50 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        $r51 = newarray (org.jetbrains.kotlin.descriptors.impl.ValueParameterDescriptorImpl)[2];

        $r51[0] = r8;

        $r51[1] = r9;

        $r52 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object[])>($r51);

        $r55 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.types.KotlinType updateScopeBlockType>;

        $r54 = <org.jetbrains.kotlin.descriptors.Modality: org.jetbrains.kotlin.descriptors.Modality FINAL>;

        $r53 = <org.jetbrains.kotlin.descriptors.Visibilities: org.jetbrains.kotlin.descriptors.Visibility LOCAL>;

        virtualinvoke r166.<org.jetbrains.kotlin.descriptors.impl.AnonymousFunctionDescriptor: org.jetbrains.kotlin.descriptors.impl.SimpleFunctionDescriptorImpl initialize(org.jetbrains.kotlin.descriptors.ReceiverParameterDescriptor,org.jetbrains.kotlin.descriptors.ReceiverParameterDescriptor,java.util.List,java.util.List,org.jetbrains.kotlin.types.KotlinType,org.jetbrains.kotlin.descriptors.Modality,org.jetbrains.kotlin.descriptors.Visibility)>(null, null, $r50, $r52, $r55, $r54, $r53);

        $r57 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r58 = interfaceinvoke r4.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getSymbol()>();

        $r59 = interfaceinvoke $r58.<org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol: org.jetbrains.kotlin.descriptors.FunctionDescriptor getDescriptor()>();

        $r60 = interfaceinvoke $r59.<org.jetbrains.kotlin.descriptors.FunctionDescriptor: java.util.List getValueParameters()>();

        i9 = interfaceinvoke $r60.<java.util.List: int size()>();

        i10 = i0 + 1;

        $i3 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformerKt: int getThisParamCount(org.jetbrains.kotlin.ir.declarations.IrFunction)>(r4);

        $i4 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformerKt: int changedParamCount(int,int)>(i0, $i3);

        i11 = i10 + $i4;

        if r3 != null goto label05;

        if i9 != i11 goto label03;

        $z17 = 1;

        goto label04;

     label03:
        $z17 = 0;

     label04:
        z19 = 0;

        z20 = 0;

        z21 = 0;

        if $z17 != 0 goto label08;

        z22 = 0;

        r167 = "Failed requirement.";

        $r160 = new java.lang.IllegalArgumentException;

        $r161 = virtualinvoke r167.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r160.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r161);

        $r162 = (java.lang.Throwable) $r160;

        throw $r162;

     label05:
        $i5 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformerKt: int defaultParamCount(int)>(i0);

        $i6 = i11 + $i5;

        if i9 != $i6 goto label06;

        $z23 = 1;

        goto label07;

     label06:
        $z23 = 0;

     label07:
        z25 = 0;

        z26 = 0;

        z27 = 0;

        if $z23 != 0 goto label08;

        z28 = 0;

        r168 = "Failed requirement.";

        $r156 = new java.lang.IllegalArgumentException;

        $r157 = virtualinvoke r168.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r156.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r157);

        $r158 = (java.lang.Throwable) $r156;

        throw $r158;

     label08:
        $r61 = new org.jetbrains.kotlin.ir.declarations.impl.IrFunctionImpl;

        $r62 = <org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin$LOCAL_FUNCTION_FOR_LAMBDA: org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin$LOCAL_FUNCTION_FOR_LAMBDA INSTANCE>;

        $r65 = (org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin) $r62;

        $r63 = new org.jetbrains.kotlin.ir.symbols.impl.IrSimpleFunctionSymbolImpl;

        $r64 = (org.jetbrains.kotlin.descriptors.FunctionDescriptor) r7;

        specialinvoke $r63.<org.jetbrains.kotlin.ir.symbols.impl.IrSimpleFunctionSymbolImpl: void <init>(org.jetbrains.kotlin.descriptors.FunctionDescriptor)>($r64);

        $r66 = (org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol) $r63;

        $r67 = virtualinvoke r7.<org.jetbrains.kotlin.descriptors.impl.AnonymousFunctionDescriptor: org.jetbrains.kotlin.name.Name getName()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r67, "lambdaDescriptor.name");

        $r68 = virtualinvoke r7.<org.jetbrains.kotlin.descriptors.impl.AnonymousFunctionDescriptor: org.jetbrains.kotlin.descriptors.Visibility getVisibility()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r68, "lambdaDescriptor.visibility");

        $r69 = virtualinvoke r7.<org.jetbrains.kotlin.descriptors.impl.AnonymousFunctionDescriptor: org.jetbrains.kotlin.descriptors.Modality getModality()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r69, "lambdaDescriptor.modality");

        $r70 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        $r71 = interfaceinvoke $r70.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.ir.descriptors.IrBuiltIns getIrBuiltIns()>();

        $r72 = virtualinvoke $r71.<org.jetbrains.kotlin.ir.descriptors.IrBuiltIns: org.jetbrains.kotlin.ir.types.IrType getUnitType()>();

        $z7 = virtualinvoke r7.<org.jetbrains.kotlin.descriptors.impl.AnonymousFunctionDescriptor: boolean isInline()>();

        $z8 = virtualinvoke r7.<org.jetbrains.kotlin.descriptors.impl.AnonymousFunctionDescriptor: boolean isExternal()>();

        $z9 = virtualinvoke r7.<org.jetbrains.kotlin.descriptors.impl.AnonymousFunctionDescriptor: boolean isTailrec()>();

        $z10 = virtualinvoke r7.<org.jetbrains.kotlin.descriptors.impl.AnonymousFunctionDescriptor: boolean isSuspend()>();

        $z11 = virtualinvoke r7.<org.jetbrains.kotlin.descriptors.impl.AnonymousFunctionDescriptor: boolean isOperator()>();

        $z12 = virtualinvoke r7.<org.jetbrains.kotlin.descriptors.impl.AnonymousFunctionDescriptor: boolean isExpect()>();

        specialinvoke $r61.<org.jetbrains.kotlin.ir.declarations.impl.IrFunctionImpl: void <init>(int,int,org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin,org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol,org.jetbrains.kotlin.name.Name,org.jetbrains.kotlin.descriptors.Visibility,org.jetbrains.kotlin.descriptors.Modality,org.jetbrains.kotlin.ir.types.IrType,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker)>(-1, -1, $r65, $r66, $r67, $r68, $r69, $r72, $z7, $z8, $z9, $z10, $z11, $z12, 0, 16384, null);

        z29 = 0;

        z30 = 0;

        r170 = $r61;

        $r73 = (org.jetbrains.kotlin.ir.declarations.IrDeclarationParent) r4;

        virtualinvoke r170.<org.jetbrains.kotlin.ir.declarations.impl.IrFunctionImpl: void setParent(org.jetbrains.kotlin.ir.declarations.IrDeclarationParent)>($r73);

        $r74 = new org.jetbrains.kotlin.backend.common.lower.DeclarationIrBuilder;

        $r75 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        $r76 = (org.jetbrains.kotlin.ir.builders.IrGeneratorContext) $r75;

        $r77 = virtualinvoke r170.<org.jetbrains.kotlin.ir.declarations.impl.IrFunctionImpl: org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol getSymbol()>();

        $r78 = (org.jetbrains.kotlin.ir.symbols.IrSymbol) $r77;

        specialinvoke $r74.<org.jetbrains.kotlin.backend.common.lower.DeclarationIrBuilder: void <init>(org.jetbrains.kotlin.ir.builders.IrGeneratorContext,org.jetbrains.kotlin.ir.symbols.IrSymbol,int,int,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r76, $r78, 0, 0, 12, null);

        r10 = $r74;

        $r80 = (org.jetbrains.kotlin.ir.declarations.IrFunction) r170;

        $r79 = <androidx.compose.compiler.plugins.kotlin.KtxNameConventions: androidx.compose.compiler.plugins.kotlin.KtxNameConventions INSTANCE>;

        $r81 = virtualinvoke $r79.<androidx.compose.compiler.plugins.kotlin.KtxNameConventions: org.jetbrains.kotlin.name.Name getCOMPOSER_PARAMETER()>();

        $r82 = virtualinvoke $r81.<org.jetbrains.kotlin.name.Name: java.lang.String getIdentifier()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r82, "KtxNameConventions.COMPOSER_PARAMETER.identifier");

        $r83 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.ClassDescriptor getComposerTypeDescriptor()>();

        $r84 = interfaceinvoke $r83.<org.jetbrains.kotlin.descriptors.ClassDescriptor: org.jetbrains.kotlin.types.SimpleType getDefaultType()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r84, "composerTypeDescriptor\n \u2026             .defaultType");

        $r85 = (org.jetbrains.kotlin.types.KotlinType) $r84;

        $r86 = staticinvoke <org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt: org.jetbrains.kotlin.types.KotlinType replaceArgumentsWithStarProjections(org.jetbrains.kotlin.types.KotlinType)>($r85);

        $r87 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.types.IrType toIrType(org.jetbrains.kotlin.types.KotlinType)>($r86);

        $r88 = staticinvoke <org.jetbrains.kotlin.ir.types.IrTypesKt: org.jetbrains.kotlin.ir.types.IrType makeNullable(org.jetbrains.kotlin.ir.types.IrType)>($r87);

        staticinvoke <org.jetbrains.kotlin.ir.builders.declarations.DeclarationBuildersKt: org.jetbrains.kotlin.ir.declarations.IrValueParameter addValueParameter$default(org.jetbrains.kotlin.ir.declarations.IrFunction,java.lang.String,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin,int,java.lang.Object)>($r80, $r82, $r88, null, 4, null);

        $r90 = (org.jetbrains.kotlin.ir.declarations.IrFunction) r170;

        $r91 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        $r92 = interfaceinvoke $r91.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.ir.descriptors.IrBuiltIns getIrBuiltIns()>();

        $r93 = virtualinvoke $r92.<org.jetbrains.kotlin.ir.descriptors.IrBuiltIns: org.jetbrains.kotlin.ir.types.IrType getIntType()>();

        staticinvoke <org.jetbrains.kotlin.ir.builders.declarations.DeclarationBuildersKt: org.jetbrains.kotlin.ir.declarations.IrValueParameter addValueParameter$default(org.jetbrains.kotlin.ir.declarations.IrFunction,java.lang.String,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin,int,java.lang.Object)>($r90, "$force", $r93, null, 4, null);

        $r11 = (org.jetbrains.kotlin.ir.builders.IrBuilderWithScope) r10;

        i1 = virtualinvoke $r11.<org.jetbrains.kotlin.ir.builders.IrBuilderWithScope: int getStartOffset()>();

        i2 = virtualinvoke $r11.<org.jetbrains.kotlin.ir.builders.IrBuilderWithScope: int getEndOffset()>();

        $r95 = new org.jetbrains.kotlin.ir.builders.IrBlockBodyBuilder;

        $r96 = virtualinvoke $r11.<org.jetbrains.kotlin.ir.builders.IrBuilderWithScope: org.jetbrains.kotlin.ir.builders.IrGeneratorContext getContext()>();

        $r97 = virtualinvoke $r11.<org.jetbrains.kotlin.ir.builders.IrBuilderWithScope: org.jetbrains.kotlin.ir.builders.Scope getScope()>();

        specialinvoke $r95.<org.jetbrains.kotlin.ir.builders.IrBlockBodyBuilder: void <init>(org.jetbrains.kotlin.ir.builders.IrGeneratorContext,org.jetbrains.kotlin.ir.builders.Scope,int,int)>($r96, $r97, i1, i2);

        r12 = $r95;

        r14 = r170;

        $r98 = new androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$irEndRestartGroupAndUpdateScope$$inlined$also$lambda$1;

        specialinvoke $r98.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$irEndRestartGroupAndUpdateScope$$inlined$also$lambda$1: void <init>(org.jetbrains.kotlin.ir.declarations.impl.IrFunctionImpl,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,org.jetbrains.kotlin.ir.declarations.IrFunction,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope,int,androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue,int,androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue,int,org.jetbrains.kotlin.ir.declarations.impl.IrVariableImpl)>(r170, r0, r4, r1, i0, r2, i10, r3, i11, r6);

        $r99 = (org.jetbrains.kotlin.ir.builders.IrBuilderWithScope) r12;

        $r100 = interfaceinvoke r4.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getSymbol()>();

        r16 = staticinvoke <org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt: org.jetbrains.kotlin.ir.expressions.IrFunctionAccessExpression irCall(org.jetbrains.kotlin.ir.builders.IrBuilderWithScope,org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol)>($r99, $r100);

        z4 = 0;

        z5 = 0;

        r18 = (org.jetbrains.kotlin.ir.builders.IrBuilderWithScope) r12;

        r19 = r12;

        $r101 = interfaceinvoke r16.<org.jetbrains.kotlin.ir.expressions.IrFunctionAccessExpression: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getSymbol()>();

        $r102 = interfaceinvoke $r101.<org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol: org.jetbrains.kotlin.ir.declarations.IrFunction getOwner()>();

        $r103 = interfaceinvoke $r102.<org.jetbrains.kotlin.ir.declarations.IrFunction: java.util.List getValueParameters()>();

        i12 = 0;

        $r159 = (java.lang.Iterable) $r103;

        r171 = interfaceinvoke $r159.<java.lang.Iterable: java.util.Iterator iterator()>();

     label09:
        $z32 = interfaceinvoke r171.<java.util.Iterator: boolean hasNext()>();

        if $z32 == 0 goto label13;

        r172 = interfaceinvoke r171.<java.util.Iterator: java.lang.Object next()>();

        $i8 = i12;

        i12 = i12 + 1;

        i13 = $i8;

        z33 = 0;

        if i13 >= 0 goto label10;

        staticinvoke <kotlin.collections.CollectionsKt: void throwIndexOverflow()>();

     label10:
        r173 = (org.jetbrains.kotlin.ir.declarations.IrValueParameter) r172;

        i14 = i13;

        $z13 = staticinvoke <org.jetbrains.kotlin.ir.util.AdditionalIrUtilsKt: boolean isVararg(org.jetbrains.kotlin.ir.declarations.IrValueParameter)>(r173);

        if $z13 == 0 goto label11;

        $r146 = new org.jetbrains.kotlin.ir.expressions.impl.IrVarargImpl;

        $r147 = interfaceinvoke r173.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.ir.types.IrType getType()>();

        $r148 = interfaceinvoke r173.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.ir.types.IrType getVarargElementType()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r148);

        $r149 = new org.jetbrains.kotlin.ir.expressions.impl.IrSpreadElementImpl;

        $r150 = (org.jetbrains.kotlin.ir.builders.IrBuilderWithScope) r12;

        $r151 = virtualinvoke $r98.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$irEndRestartGroupAndUpdateScope$$inlined$also$lambda$1: org.jetbrains.kotlin.ir.declarations.IrValueDeclaration invoke(int)>(i14);

        $r152 = staticinvoke <org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt: org.jetbrains.kotlin.ir.expressions.impl.IrGetValueImpl irGet(org.jetbrains.kotlin.ir.builders.IrBuilderWithScope,org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)>($r150, $r151);

        $r153 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r152;

        specialinvoke $r149.<org.jetbrains.kotlin.ir.expressions.impl.IrSpreadElementImpl: void <init>(int,int,org.jetbrains.kotlin.ir.expressions.IrExpression)>(-1, -1, $r153);

        $r154 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r149);

        specialinvoke $r146.<org.jetbrains.kotlin.ir.expressions.impl.IrVarargImpl: void <init>(int,int,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.types.IrType,java.util.List)>(-1, -1, $r147, $r148, $r154);

        $r155 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r146;

        interfaceinvoke r16.<org.jetbrains.kotlin.ir.expressions.IrFunctionAccessExpression: void putValueArgument(int,org.jetbrains.kotlin.ir.expressions.IrExpression)>(i14, $r155);

        goto label12;

     label11:
        $r142 = (org.jetbrains.kotlin.ir.builders.IrBuilderWithScope) r12;

        $r143 = virtualinvoke $r98.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$irEndRestartGroupAndUpdateScope$$inlined$also$lambda$1: org.jetbrains.kotlin.ir.declarations.IrValueDeclaration invoke(int)>(i14);

        $r144 = staticinvoke <org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt: org.jetbrains.kotlin.ir.expressions.impl.IrGetValueImpl irGet(org.jetbrains.kotlin.ir.builders.IrBuilderWithScope,org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)>($r142, $r143);

        $r145 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r144;

        interfaceinvoke r16.<org.jetbrains.kotlin.ir.expressions.IrFunctionAccessExpression: void putValueArgument(int,org.jetbrains.kotlin.ir.expressions.IrExpression)>(i14, $r145);

     label12:
        goto label09;

     label13:
        $r104 = (org.jetbrains.kotlin.ir.builders.IrBuilderWithScope) r12;

        $r105 = virtualinvoke r170.<org.jetbrains.kotlin.ir.declarations.impl.IrFunctionImpl: java.util.List getValueParameters()>();

        $r106 = interfaceinvoke $r105.<java.util.List: java.lang.Object get(int)>(0);

        $r107 = (org.jetbrains.kotlin.ir.declarations.IrValueDeclaration) $r106;

        $r108 = staticinvoke <org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt: org.jetbrains.kotlin.ir.expressions.impl.IrGetValueImpl irGet(org.jetbrains.kotlin.ir.builders.IrBuilderWithScope,org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)>($r104, $r107);

        $r109 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r108;

        interfaceinvoke r16.<org.jetbrains.kotlin.ir.expressions.IrFunctionAccessExpression: void putValueArgument(int,org.jetbrains.kotlin.ir.expressions.IrExpression)>(i0, $r109);

        interfaceinvoke r2.<androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue: void putAsValueArgumentInWithLowBit(org.jetbrains.kotlin.ir.expressions.IrFunctionAccessExpression,int,boolean)>(r16, i10, 1);

        if r3 == null goto label14;

        interfaceinvoke r3.<androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue: void putAsValueArgumentIn(org.jetbrains.kotlin.ir.expressions.IrFunctionAccessExpression,int)>(r16, i11);

        $r141 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        goto label14;

     label14:
        $r174 = r16;

        $r110 = interfaceinvoke r4.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.declarations.IrValueParameter getExtensionReceiverParameter()>();

        if $r110 == null goto label15;

        z36 = 0;

        r175 = $r110;

        r176 = r16;

        z37 = 0;

        $r139 = (org.jetbrains.kotlin.ir.builders.IrBuilderWithScope) r12;

        $r138 = (org.jetbrains.kotlin.ir.declarations.IrValueDeclaration) r175;

        r177 = staticinvoke <org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt: org.jetbrains.kotlin.ir.expressions.impl.IrGetValueImpl irGet(org.jetbrains.kotlin.ir.builders.IrBuilderWithScope,org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)>($r139, $r138);

        $r174 = r176;

        $r178 = r177;

        goto label16;

     label15:
        $r178 = null;

     label16:
        $r111 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r178;

        interfaceinvoke $r174.<org.jetbrains.kotlin.ir.expressions.IrFunctionAccessExpression: void setExtensionReceiver(org.jetbrains.kotlin.ir.expressions.IrExpression)>($r111);

        $r179 = r16;

        if r6 == null goto label17;

        z39 = 0;

        r180 = r6;

        r181 = r16;

        z40 = 0;

        $r136 = (org.jetbrains.kotlin.ir.builders.IrBuilderWithScope) r12;

        $r135 = (org.jetbrains.kotlin.ir.declarations.IrValueDeclaration) r180;

        r182 = staticinvoke <org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt: org.jetbrains.kotlin.ir.expressions.impl.IrGetValueImpl irGet(org.jetbrains.kotlin.ir.builders.IrBuilderWithScope,org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)>($r136, $r135);

        $r179 = r181;

        $r183 = r182;

        goto label18;

     label17:
        $r183 = null;

     label18:
        $r112 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r183;

        interfaceinvoke $r179.<org.jetbrains.kotlin.ir.expressions.IrFunctionAccessExpression: void setDispatchReceiver(org.jetbrains.kotlin.ir.expressions.IrExpression)>($r112);

        $r113 = interfaceinvoke r4.<org.jetbrains.kotlin.ir.declarations.IrFunction: java.util.List getTypeParameters()>();

        i15 = 0;

        $r137 = (java.lang.Iterable) $r113;

        r184 = interfaceinvoke $r137.<java.lang.Iterable: java.util.Iterator iterator()>();

     label19:
        $z42 = interfaceinvoke r184.<java.util.Iterator: boolean hasNext()>();

        if $z42 == 0 goto label21;

        r185 = interfaceinvoke r184.<java.util.Iterator: java.lang.Object next()>();

        $i7 = i15;

        i15 = i15 + 1;

        i16 = $i7;

        z43 = 0;

        if i16 >= 0 goto label20;

        staticinvoke <kotlin.collections.CollectionsKt: void throwIndexOverflow()>();

     label20:
        r186 = (org.jetbrains.kotlin.ir.declarations.IrTypeParameter) r185;

        i17 = i16;

        $r134 = staticinvoke <org.jetbrains.kotlin.ir.types.IrTypesKt: org.jetbrains.kotlin.ir.types.IrType getDefaultType(org.jetbrains.kotlin.ir.declarations.IrTypeParameter)>(r186);

        interfaceinvoke r16.<org.jetbrains.kotlin.ir.expressions.IrFunctionAccessExpression: void putTypeArgument(int,org.jetbrains.kotlin.ir.types.IrType)>(i17, $r134);

        goto label19;

     label21:
        r20 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r114 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r16;

        $r115 = staticinvoke <org.jetbrains.kotlin.ir.builders.ExpressionHelpersKt: org.jetbrains.kotlin.ir.expressions.impl.IrReturnImpl irReturn(org.jetbrains.kotlin.ir.builders.IrBuilderWithScope,org.jetbrains.kotlin.ir.expressions.IrExpression)>(r18, $r114);

        $r116 = (org.jetbrains.kotlin.ir.IrStatement) $r115;

        virtualinvoke r19.<org.jetbrains.kotlin.ir.builders.IrBlockBodyBuilder: void unaryPlus(org.jetbrains.kotlin.ir.IrStatement)>($r116);

        r21 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r117 = virtualinvoke r12.<org.jetbrains.kotlin.ir.builders.IrBlockBodyBuilder: org.jetbrains.kotlin.ir.expressions.IrBlockBody doBuild()>();

        $r118 = (org.jetbrains.kotlin.ir.expressions.IrBody) $r117;

        virtualinvoke r14.<org.jetbrains.kotlin.ir.declarations.impl.IrFunctionImpl: void setBody(org.jetbrains.kotlin.ir.expressions.IrBody)>($r118);

        $r119 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r120 = newarray (org.jetbrains.kotlin.ir.IrStatement)[2];

        $r121 = (org.jetbrains.kotlin.ir.IrStatement) r6;

        $r120[0] = $r121;

        $r122 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irEndRestartGroup()>();

        $r123 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor updateScopeDescriptor>;

        $r126 = (org.jetbrains.kotlin.descriptors.FunctionDescriptor) $r123;

        $r124 = newarray (org.jetbrains.kotlin.ir.expressions.IrExpression)[1];

        $r127 = (org.jetbrains.kotlin.ir.declarations.IrFunction) $r61;

        $r125 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.types.KotlinType updateScopeBlockType>;

        $r128 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.types.IrType toIrType(org.jetbrains.kotlin.types.KotlinType)>($r125);

        $r129 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irLambda(org.jetbrains.kotlin.ir.declarations.IrFunction,org.jetbrains.kotlin.ir.types.IrType)>($r127, $r128);

        $r124[0] = $r129;

        $r130 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irSafeCall(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.descriptors.FunctionDescriptor,org.jetbrains.kotlin.ir.expressions.IrExpression[])>($r122, $r126, $r124);

        $r131 = (org.jetbrains.kotlin.ir.IrStatement) $r130;

        $r120[1] = $r131;

        $r132 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOfNotNull(java.lang.Object[])>($r120);

        $r133 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.IrExpression irBlock$default(androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,java.util.List,int,java.lang.Object)>(r0, null, null, $r132, 3, null);

        return $r133;
    }

    private final org.jetbrains.kotlin.ir.expressions.IrCall irIsSkipping()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r1;
        org.jetbrains.kotlin.descriptors.PropertyDescriptor $r2;
        org.jetbrains.kotlin.descriptors.PropertyGetterDescriptor $r3;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r4;
        org.jetbrains.kotlin.ir.expressions.IrCall $r5;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        $r1 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irCurrentComposer()>();

        $r2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.PropertyDescriptor isSkippingDescriptor>;

        $r3 = interfaceinvoke $r2.<org.jetbrains.kotlin.descriptors.PropertyDescriptor: org.jetbrains.kotlin.descriptors.PropertyGetterDescriptor getGetter()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r3);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "isSkippingDescriptor.getter!!");

        $r4 = (org.jetbrains.kotlin.descriptors.FunctionDescriptor) $r3;

        $r5 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrCall irMethodCall$default(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.descriptors.FunctionDescriptor,int,int,int,java.lang.Object)>(r0, $r1, $r4, 0, 0, 12, null);

        return $r5;
    }

    private final org.jetbrains.kotlin.ir.expressions.IrCall irDefaultsInvalid()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r1;
        org.jetbrains.kotlin.descriptors.PropertyDescriptor $r2;
        org.jetbrains.kotlin.descriptors.PropertyGetterDescriptor $r3;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r4;
        org.jetbrains.kotlin.ir.expressions.IrCall $r5;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        $r1 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irCurrentComposer()>();

        $r2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.PropertyDescriptor defaultsInvalidDescriptor>;

        $r3 = interfaceinvoke $r2.<org.jetbrains.kotlin.descriptors.PropertyDescriptor: org.jetbrains.kotlin.descriptors.PropertyGetterDescriptor getGetter()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r3);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "defaultsInvalidDescriptor.getter!!");

        $r4 = (org.jetbrains.kotlin.descriptors.FunctionDescriptor) $r3;

        $r5 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrCall irMethodCall$default(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.descriptors.FunctionDescriptor,int,int,int,java.lang.Object)>(r0, $r1, $r4, 0, 0, 12, null);

        return $r5;
    }

    private final org.jetbrains.kotlin.ir.expressions.IrExpression irIsProvided(androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue, int)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue r1;
        int i0;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r2, $r4, $r5;
        org.jetbrains.kotlin.ir.expressions.IrConst $r3;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue;

        i0 := @parameter1: int;

        $r2 = interfaceinvoke r1.<androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue: org.jetbrains.kotlin.ir.expressions.IrExpression irIsolateBitAtIndex(int)>(i0);

        $r3 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrConst irConst(int)>(0);

        $r4 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r3;

        $r5 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irEqual(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r2, $r4);

        return $r5;
    }

    private final org.jetbrains.kotlin.ir.expressions.IrExpression irIsUncertain(androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue, int)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue r1;
        int i0;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r2, $r4, $r5;
        org.jetbrains.kotlin.ir.expressions.IrConst $r3;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue;

        i0 := @parameter1: int;

        $r2 = interfaceinvoke r1.<androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue: org.jetbrains.kotlin.ir.expressions.IrExpression irIsolateBitsAtSlot(int)>(i0);

        $r3 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrConst irConst(int)>(0);

        $r4 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r3;

        $r5 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irEqual(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r2, $r4);

        return $r5;
    }

    private final org.jetbrains.kotlin.ir.expressions.IrExpression irBitsForSlot(int, int)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        int i0, i1, $i2;
        org.jetbrains.kotlin.ir.expressions.IrConst $r1;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r2;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformerKt: int bitsForSlot(int,int)>(i0, i1);

        $r1 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrConst irConst(int)>($i2);

        $r2 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r1;

        return $r2;
    }

    private final boolean endsWithReturnOrJump(org.jetbrains.kotlin.ir.expressions.IrExpression)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r1;
        boolean $z0, $z1, $z2;
        org.jetbrains.kotlin.ir.expressions.IrBlock $r2;
        java.util.List $r3;
        java.lang.Object $r4;
        org.jetbrains.kotlin.ir.IrStatement r5;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrExpression;

        r5 = (org.jetbrains.kotlin.ir.IrStatement) $r1;

     label1:
        if r5 == null goto label5;

        $z0 = r5 instanceof org.jetbrains.kotlin.ir.expressions.IrReturn;

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $z1 = r5 instanceof org.jetbrains.kotlin.ir.expressions.IrBreakContinue;

        if $z1 == 0 goto label3;

        return 1;

     label3:
        $z2 = r5 instanceof org.jetbrains.kotlin.ir.expressions.IrBlock;

        if $z2 != 0 goto label4;

        return 0;

     label4:
        $r2 = (org.jetbrains.kotlin.ir.expressions.IrBlock) r5;

        $r3 = interfaceinvoke $r2.<org.jetbrains.kotlin.ir.expressions.IrBlock: java.util.List getStatements()>();

        $r4 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object lastOrNull(java.util.List)>($r3);

        r5 = (org.jetbrains.kotlin.ir.IrStatement) $r4;

        goto label1;

     label5:
        return 0;
    }

    private final kotlin.Pair asBodyAndResultVar(org.jetbrains.kotlin.ir.expressions.IrBody)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.expressions.IrBody $r1;
        org.jetbrains.kotlin.ir.expressions.impl.IrCompositeImpl r2, $r4;
        org.jetbrains.kotlin.ir.declarations.impl.IrVariableImpl r3;
        int $i0, $i1;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r5;
        org.jetbrains.kotlin.ir.descriptors.IrBuiltIns $r6;
        org.jetbrains.kotlin.ir.types.IrType $r7, $r18;
        java.util.List $r8, $r9, $r11, $r14, $r21, $r22;
        kotlin.Pair $r10, $r13, $r29;
        boolean $z0, $z1, $z2;
        java.lang.Object $r12, $r25;
        org.jetbrains.kotlin.ir.expressions.IrReturn $r16, $r19, $r23;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r17, $r20, $r24;
        org.jetbrains.kotlin.ir.expressions.IrStatementContainer r26;
        org.jetbrains.kotlin.ir.IrStatement $r27, r28;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrBody;

        $r4 = new org.jetbrains.kotlin.ir.expressions.impl.IrCompositeImpl;

        $i0 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrBody: int getStartOffset()>();

        $i1 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrBody: int getEndOffset()>();

        $r5 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        $r6 = interfaceinvoke $r5.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.ir.descriptors.IrBuiltIns getIrBuiltIns()>();

        $r7 = virtualinvoke $r6.<org.jetbrains.kotlin.ir.descriptors.IrBuiltIns: org.jetbrains.kotlin.ir.types.IrType getUnitType()>();

        $r8 = staticinvoke <org.jetbrains.kotlin.ir.util.IrUtilsKt: java.util.List getStatements(org.jetbrains.kotlin.ir.expressions.IrBody)>($r1);

        specialinvoke $r4.<org.jetbrains.kotlin.ir.expressions.impl.IrCompositeImpl: void <init>(int,int,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,java.util.List)>($i0, $i1, $r7, null, $r8);

        r2 = $r4;

        r26 = (org.jetbrains.kotlin.ir.expressions.IrStatementContainer) r2;

        $r9 = interfaceinvoke r26.<org.jetbrains.kotlin.ir.expressions.IrStatementContainer: java.util.List getStatements()>();

        if $r9 == null goto label1;

        $r25 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object lastOrNull(java.util.List)>($r9);

        $r27 = (org.jetbrains.kotlin.ir.IrStatement) $r25;

        goto label2;

     label1:
        $r27 = null;

     label2:
        r28 = $r27;

     label3:
        if r28 == null goto label8;

        $z0 = r28 instanceof org.jetbrains.kotlin.ir.expressions.IrReturn;

        if $z0 == 0 goto label6;

        $r14 = interfaceinvoke r26.<org.jetbrains.kotlin.ir.expressions.IrStatementContainer: java.util.List getStatements()>();

        staticinvoke <org.jetbrains.kotlin.backend.common.UtilsKt: java.lang.Object pop(java.util.List)>($r14);

        $r16 = (org.jetbrains.kotlin.ir.expressions.IrReturn) r28;

        $r17 = interfaceinvoke $r16.<org.jetbrains.kotlin.ir.expressions.IrReturn: org.jetbrains.kotlin.ir.expressions.IrExpression getValue()>();

        $r18 = interfaceinvoke $r17.<org.jetbrains.kotlin.ir.expressions.IrExpression: org.jetbrains.kotlin.ir.types.IrType getType()>();

        $z2 = staticinvoke <org.jetbrains.kotlin.ir.types.IrTypePredicatesKt: boolean isUnitOrNullableUnit(org.jetbrains.kotlin.ir.types.IrType)>($r18);

        if $z2 == 0 goto label4;

        $r22 = interfaceinvoke r26.<org.jetbrains.kotlin.ir.expressions.IrStatementContainer: java.util.List getStatements()>();

        $r23 = (org.jetbrains.kotlin.ir.expressions.IrReturn) r28;

        $r24 = interfaceinvoke $r23.<org.jetbrains.kotlin.ir.expressions.IrReturn: org.jetbrains.kotlin.ir.expressions.IrExpression getValue()>();

        interfaceinvoke $r22.<java.util.List: boolean add(java.lang.Object)>($r24);

        $r29 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>(r2, null);

        goto label5;

     label4:
        $r19 = (org.jetbrains.kotlin.ir.expressions.IrReturn) r28;

        $r20 = interfaceinvoke $r19.<org.jetbrains.kotlin.ir.expressions.IrReturn: org.jetbrains.kotlin.ir.expressions.IrExpression getValue()>();

        r3 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.declarations.impl.IrVariableImpl irTemporary$default(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,org.jetbrains.kotlin.ir.expressions.IrExpression,java.lang.String,org.jetbrains.kotlin.ir.types.IrType,boolean,boolean,int,java.lang.Object)>(r0, $r20, null, null, 0, 0, 30, null);

        $r21 = interfaceinvoke r26.<org.jetbrains.kotlin.ir.expressions.IrStatementContainer: java.util.List getStatements()>();

        interfaceinvoke $r21.<java.util.List: boolean add(java.lang.Object)>(r3);

        $r29 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>(r2, r3);

     label5:
        return $r29;

     label6:
        $z1 = r28 instanceof org.jetbrains.kotlin.ir.expressions.IrBlock;

        if $z1 != 0 goto label7;

        $r13 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>(r2, null);

        return $r13;

     label7:
        r26 = (org.jetbrains.kotlin.ir.expressions.IrStatementContainer) r28;

        $r11 = interfaceinvoke r26.<org.jetbrains.kotlin.ir.expressions.IrStatementContainer: java.util.List getStatements()>();

        $r12 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object lastOrNull(java.util.List)>($r11);

        r28 = (org.jetbrains.kotlin.ir.IrStatement) $r12;

        goto label3;

     label8:
        $r10 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>(r2, null);

        return $r10;
    }

    public org.jetbrains.kotlin.ir.IrStatement visitProperty(org.jetbrains.kotlin.ir.declarations.IrProperty)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0, r2;
        org.jetbrains.kotlin.ir.declarations.IrProperty r1;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope r3, r4;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$PropertyScope $r5;
        org.jetbrains.kotlin.name.Name $r6;
        int $i0, $i1;
        java.lang.Throwable $r7, r9;
        org.jetbrains.kotlin.ir.IrStatement r8;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrProperty;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "declaration");

        r2 = r0;

        $r5 = new androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$PropertyScope;

        $r6 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.declarations.IrProperty: org.jetbrains.kotlin.name.Name getName()>();

        specialinvoke $r5.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$PropertyScope: void <init>(org.jetbrains.kotlin.name.Name)>($r6);

        r3 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope) $r5;

        r4 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope access$getCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer)>(r2);

        staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void access$setCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r2, r3);

        virtualinvoke r3.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: void setParent(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r4);

        $i0 = virtualinvoke r4.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: int getLevel()>();

        $i1 = $i0 + 1;

        virtualinvoke r3.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: void setLevel(int)>($i1);

     label1:
        r8 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.IrStatement visitProperty(org.jetbrains.kotlin.ir.declarations.IrProperty)>(r1);

     label2:
        staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void access$setCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r2, r4);

        goto label5;

     label3:
        $r7 := @caughtexception;

        r9 = $r7;

     label4:
        staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void access$setCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r2, r4);

        throw r9;

     label5:
        return r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public org.jetbrains.kotlin.ir.IrStatement visitField(org.jetbrains.kotlin.ir.declarations.IrField)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0, r2;
        org.jetbrains.kotlin.ir.declarations.IrField r1;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope r3, r4;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FieldScope $r5;
        org.jetbrains.kotlin.name.Name $r6;
        int $i0, $i1;
        java.lang.Throwable $r7, r9;
        org.jetbrains.kotlin.ir.IrStatement r8;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrField;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "declaration");

        r2 = r0;

        $r5 = new androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FieldScope;

        $r6 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.declarations.IrField: org.jetbrains.kotlin.name.Name getName()>();

        specialinvoke $r5.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FieldScope: void <init>(org.jetbrains.kotlin.name.Name)>($r6);

        r3 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope) $r5;

        r4 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope access$getCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer)>(r2);

        staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void access$setCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r2, r3);

        virtualinvoke r3.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: void setParent(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r4);

        $i0 = virtualinvoke r4.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: int getLevel()>();

        $i1 = $i0 + 1;

        virtualinvoke r3.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: void setLevel(int)>($i1);

     label1:
        r8 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.IrStatement visitField(org.jetbrains.kotlin.ir.declarations.IrField)>(r1);

     label2:
        staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void access$setCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r2, r4);

        goto label5;

     label3:
        $r7 := @caughtexception;

        r9 = $r7;

     label4:
        staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void access$setCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r2, r4);

        throw r9;

     label5:
        return r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public org.jetbrains.kotlin.ir.declarations.IrFile visitFile(org.jetbrains.kotlin.ir.declarations.IrFile)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0, r2;
        org.jetbrains.kotlin.ir.declarations.IrFile r1, r7;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope r3, r4;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FileScope $r5;
        int $i0, $i1;
        java.lang.Throwable $r6, r8;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrFile;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "declaration");

        r2 = r0;

        $r5 = new androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FileScope;

        specialinvoke $r5.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FileScope: void <init>(org.jetbrains.kotlin.ir.declarations.IrFile)>(r1);

        r3 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope) $r5;

        r4 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope access$getCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer)>(r2);

        staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void access$setCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r2, r3);

        virtualinvoke r3.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: void setParent(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r4);

        $i0 = virtualinvoke r4.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: int getLevel()>();

        $i1 = $i0 + 1;

        virtualinvoke r3.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: void setLevel(int)>($i1);

     label1:
        r7 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.declarations.IrFile visitFile(org.jetbrains.kotlin.ir.declarations.IrFile)>(r1);

     label2:
        staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void access$setCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r2, r4);

        goto label5;

     label3:
        $r6 := @caughtexception;

        r8 = $r6;

     label4:
        staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void access$setCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r2, r4);

        throw r8;

     label5:
        return r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public org.jetbrains.kotlin.ir.IrStatement visitDeclaration(org.jetbrains.kotlin.ir.declarations.IrDeclaration)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.declarations.IrDeclaration r1, r2;
        java.lang.String r3, $r7, $r10;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.lang.StringBuilder $r4, $r5, $r8;
        java.lang.Class $r6;
        java.lang.IllegalStateException $r9;
        java.lang.Throwable $r11;
        org.jetbrains.kotlin.ir.IrStatement $r12, $r13;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrDeclaration;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "declaration");

        r2 = r1;

        $z1 = r2 instanceof org.jetbrains.kotlin.ir.declarations.IrField;

        if $z1 == 0 goto label01;

        goto label04;

     label01:
        $z2 = r2 instanceof org.jetbrains.kotlin.ir.declarations.IrProperty;

        if $z2 == 0 goto label02;

        goto label04;

     label02:
        $z3 = r2 instanceof org.jetbrains.kotlin.ir.declarations.IrFunction;

        if $z3 == 0 goto label03;

        goto label04;

     label03:
        $z4 = r2 instanceof org.jetbrains.kotlin.ir.declarations.IrClass;

        if $z4 == 0 goto label05;

     label04:
        $r12 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.IrStatement visitDeclaration(org.jetbrains.kotlin.ir.declarations.IrDeclaration)>(r1);

        return $r12;

     label05:
        $z5 = r2 instanceof org.jetbrains.kotlin.ir.declarations.IrTypeAlias;

        if $z5 == 0 goto label06;

        goto label11;

     label06:
        $z6 = r2 instanceof org.jetbrains.kotlin.ir.declarations.IrEnumEntry;

        if $z6 == 0 goto label07;

        goto label11;

     label07:
        $z7 = r2 instanceof org.jetbrains.kotlin.ir.declarations.IrAnonymousInitializer;

        if $z7 == 0 goto label08;

        goto label11;

     label08:
        $z8 = r2 instanceof org.jetbrains.kotlin.ir.declarations.IrTypeParameter;

        if $z8 == 0 goto label09;

        goto label11;

     label09:
        $z9 = r2 instanceof org.jetbrains.kotlin.ir.declarations.IrLocalDelegatedProperty;

        if $z9 == 0 goto label10;

        goto label11;

     label10:
        $z10 = r2 instanceof org.jetbrains.kotlin.ir.declarations.IrValueDeclaration;

        if $z10 == 0 goto label12;

     label11:
        $r13 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.IrStatement visitDeclaration(org.jetbrains.kotlin.ir.declarations.IrDeclaration)>(r1);

        return $r13;

     label12:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unhandled declaration! ");

        $r6 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getSimpleName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        r3 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        z0 = 0;

        $r9 = new java.lang.IllegalStateException;

        $r10 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        $r11 = (java.lang.Throwable) $r9;

        throw $r11;
    }

    private final org.jetbrains.kotlin.ir.declarations.IrValueParameter nearestComposer()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        java.lang.String r1, $r6, $r9;
        boolean z0;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope $r2;
        org.jetbrains.kotlin.ir.declarations.IrValueParameter $r3;
        java.lang.StringBuilder $r4, $r5, $r7;
        java.lang.IllegalStateException $r8;
        java.lang.Throwable $r10;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        $r2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope currentScope>;

        $r3 = virtualinvoke $r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: org.jetbrains.kotlin.ir.declarations.IrValueParameter getNearestComposer()>();

        if $r3 == null goto label1;

        goto label2;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not in a composable function \n");

        $r6 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: java.lang.String printScopeStack()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        r1 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        z0 = 0;

        $r8 = new java.lang.IllegalStateException;

        $r9 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        $r10 = (java.lang.Throwable) $r8;

        throw $r10;

     label2:
        return $r3;
    }

    private final org.jetbrains.kotlin.ir.expressions.IrExpression irCurrentComposer()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.expressions.impl.IrGetValueImpl $r1;
        org.jetbrains.kotlin.ir.declarations.IrValueParameter $r2;
        org.jetbrains.kotlin.ir.symbols.IrValueSymbol $r3;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r4;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        $r1 = new org.jetbrains.kotlin.ir.expressions.impl.IrGetValueImpl;

        $r2 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.declarations.IrValueParameter nearestComposer()>();

        $r3 = interfaceinvoke $r2.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.ir.symbols.IrValueSymbol getSymbol()>();

        specialinvoke $r1.<org.jetbrains.kotlin.ir.expressions.impl.IrGetValueImpl: void <init>(int,int,org.jetbrains.kotlin.ir.symbols.IrValueSymbol,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,int,kotlin.jvm.internal.DefaultConstructorMarker)>(-1, -1, $r3, null, 8, null);

        $r4 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r1;

        return $r4;
    }

    private final int sourceKey(org.jetbrains.kotlin.ir.IrElement)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.IrElement $r1;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope $r2;
        org.jetbrains.kotlin.ir.declarations.IrFunction $r3;
        org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol $r4;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r5;
        org.jetbrains.kotlin.descriptors.DeclarationDescriptor $r6;
        org.jetbrains.kotlin.name.FqName $r7;
        java.lang.String $r8;
        int $i0, $i1, $i2, i3, i4, $i5;
        boolean $z0;
        org.jetbrains.kotlin.ir.expressions.IrConst $r9;
        java.lang.Object $r10;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.IrElement;

        $r2 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope getCurrentFunctionScope()>();

        $r3 = virtualinvoke $r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: org.jetbrains.kotlin.ir.declarations.IrFunction getFunction()>();

        $r4 = interfaceinvoke $r3.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getSymbol()>();

        $r5 = interfaceinvoke $r4.<org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol: org.jetbrains.kotlin.descriptors.FunctionDescriptor getDescriptor()>();

        $r6 = (org.jetbrains.kotlin.descriptors.DeclarationDescriptor) $r5;

        $r7 = staticinvoke <org.jetbrains.kotlin.resolve.descriptorUtil.DescriptorUtilsKt: org.jetbrains.kotlin.name.FqName getFqNameSafe(org.jetbrains.kotlin.descriptors.DeclarationDescriptor)>($r6);

        $r8 = virtualinvoke $r7.<org.jetbrains.kotlin.name.FqName: java.lang.String toString()>();

        i3 = virtualinvoke $r8.<java.lang.String: int hashCode()>();

        $i0 = 31 * i3;

        $i1 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.IrElement: int getStartOffset()>();

        i4 = $i0 + $i1;

        $z0 = $r1 instanceof org.jetbrains.kotlin.ir.expressions.IrConst;

        if $z0 == 0 goto label3;

        $i2 = 31 * i4;

        $r9 = (org.jetbrains.kotlin.ir.expressions.IrConst) $r1;

        $r10 = interfaceinvoke $r9.<org.jetbrains.kotlin.ir.expressions.IrConst: java.lang.Object getValue()>();

        if $r10 == null goto label1;

        $i5 = virtualinvoke $r10.<java.lang.Object: int hashCode()>();

        goto label2;

     label1:
        $i5 = 1;

     label2:
        i4 = $i2 + $i5;

     label3:
        return i4;
    }

    private final org.jetbrains.kotlin.ir.expressions.IrConst irSourceKey(org.jetbrains.kotlin.ir.IrElement)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.IrElement $r1;
        org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl $r2;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r3;
        org.jetbrains.kotlin.ir.descriptors.IrBuiltIns $r4;
        org.jetbrains.kotlin.ir.types.IrType $r5;
        org.jetbrains.kotlin.ir.expressions.IrConstKind$Int $r6;
        org.jetbrains.kotlin.ir.expressions.IrConstKind $r7;
        int $i0;
        java.lang.Integer $r8;
        org.jetbrains.kotlin.ir.expressions.IrConst $r9;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.IrElement;

        $r2 = new org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl;

        $r3 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        $r4 = interfaceinvoke $r3.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.ir.descriptors.IrBuiltIns getIrBuiltIns()>();

        $r5 = virtualinvoke $r4.<org.jetbrains.kotlin.ir.descriptors.IrBuiltIns: org.jetbrains.kotlin.ir.types.IrType getIntType()>();

        $r6 = <org.jetbrains.kotlin.ir.expressions.IrConstKind$Int: org.jetbrains.kotlin.ir.expressions.IrConstKind$Int INSTANCE>;

        $r7 = (org.jetbrains.kotlin.ir.expressions.IrConstKind) $r6;

        $i0 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: int sourceKey(org.jetbrains.kotlin.ir.IrElement)>($r1);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r2.<org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl: void <init>(int,int,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrConstKind,java.lang.Object)>(-1, -1, $r5, $r7, $r8);

        $r9 = (org.jetbrains.kotlin.ir.expressions.IrConst) $r2;

        return $r9;
    }

    private final org.jetbrains.kotlin.ir.expressions.IrExpression irStartReplaceableGroup(org.jetbrains.kotlin.ir.IrElement, androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope, org.jetbrains.kotlin.ir.expressions.IrExpression)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.IrElement r1;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope r2;
        org.jetbrains.kotlin.ir.expressions.IrExpression r3, $r7, $r9;
        org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor r4, $r10;
        org.jetbrains.kotlin.ir.expressions.IrCall r5, r6;
        boolean z0, z1, $z3, $z4;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r8;
        int $i0, $i1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.ir.IrElement;

        r2 := @parameter1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope;

        r3 := @parameter2: org.jetbrains.kotlin.ir.expressions.IrExpression;

        $z3 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean getHasSourceInformation(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope)>(r2);

        if $z3 == 0 goto label1;

        $r10 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor startReplaceableSourceDescriptor>;

        goto label2;

     label1:
        $r10 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor startReplaceableDescriptor>;

     label2:
        r4 = $r10;

        $r7 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irCurrentComposer()>();

        $r8 = (org.jetbrains.kotlin.descriptors.FunctionDescriptor) r4;

        $i0 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.IrElement: int getStartOffset()>();

        $i1 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.IrElement: int getEndOffset()>();

        r5 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrCall irMethodCall(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.descriptors.FunctionDescriptor,int,int)>($r7, $r8, $i0, $i1);

        z0 = 0;

        z1 = 0;

        r6 = r5;

        interfaceinvoke r6.<org.jetbrains.kotlin.ir.expressions.IrCall: void putValueArgument(int,org.jetbrains.kotlin.ir.expressions.IrExpression)>(0, r3);

        $z4 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean getHasSourceInformation(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope)>(r2);

        if $z4 == 0 goto label3;

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void recordSourceParameter(org.jetbrains.kotlin.ir.expressions.IrCall,int,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope)>(r6, 1, r2);

     label3:
        $r9 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r5;

        return $r9;
    }

    static org.jetbrains.kotlin.ir.expressions.IrExpression irStartReplaceableGroup$default(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer, org.jetbrains.kotlin.ir.IrElement, androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope, org.jetbrains.kotlin.ir.expressions.IrExpression, int, java.lang.Object)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.IrElement r1;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope r2;
        int i0, $i1;
        java.lang.Object r3;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r4, r6;
        org.jetbrains.kotlin.ir.expressions.IrConst $r5;

        r0 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter1: org.jetbrains.kotlin.ir.IrElement;

        r2 := @parameter2: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope;

        r6 := @parameter3: org.jetbrains.kotlin.ir.expressions.IrExpression;

        i0 := @parameter4: int;

        r3 := @parameter5: java.lang.Object;

        $i1 = i0 & 4;

        if $i1 == 0 goto label1;

        $r5 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrConst irSourceKey(org.jetbrains.kotlin.ir.IrElement)>(r1);

        r6 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r5;

     label1:
        $r4 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irStartReplaceableGroup(org.jetbrains.kotlin.ir.IrElement,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope,org.jetbrains.kotlin.ir.expressions.IrExpression)>(r1, r2, r6);

        return $r4;
    }

    private final org.jetbrains.kotlin.ir.expressions.IrExpression irStartDefaults(org.jetbrains.kotlin.ir.IrElement)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.IrElement r1;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r2, $r6;
        org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor $r3;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r4;
        int $i0, $i1;
        org.jetbrains.kotlin.ir.expressions.IrCall $r5;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.ir.IrElement;

        $r2 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irCurrentComposer()>();

        $r3 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor startDefaultsDescriptor>;

        $r4 = (org.jetbrains.kotlin.descriptors.FunctionDescriptor) $r3;

        $i0 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.IrElement: int getStartOffset()>();

        $i1 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.IrElement: int getEndOffset()>();

        $r5 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrCall irMethodCall(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.descriptors.FunctionDescriptor,int,int)>($r2, $r4, $i0, $i1);

        $r6 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r5;

        return $r6;
    }

    private final org.jetbrains.kotlin.ir.expressions.IrExpression irStartRestartGroup(org.jetbrains.kotlin.ir.IrElement, androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope, org.jetbrains.kotlin.ir.expressions.IrExpression)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.IrElement r1;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope r2;
        org.jetbrains.kotlin.ir.expressions.IrExpression r3, $r7, $r9;
        org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor r4, $r10;
        org.jetbrains.kotlin.ir.expressions.IrCall r5, r6;
        boolean z0, z1, $z3, $z4;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r8;
        int $i0, $i1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.ir.IrElement;

        r2 := @parameter1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope;

        r3 := @parameter2: org.jetbrains.kotlin.ir.expressions.IrExpression;

        $z3 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean getHasSourceInformation(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope)>(r2);

        if $z3 == 0 goto label1;

        $r10 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor startRestartGroupSourceDescriptor>;

        goto label2;

     label1:
        $r10 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor startRestartGroupDescriptor>;

     label2:
        r4 = $r10;

        $r7 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irCurrentComposer()>();

        $r8 = (org.jetbrains.kotlin.descriptors.FunctionDescriptor) r4;

        $i0 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.IrElement: int getStartOffset()>();

        $i1 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.IrElement: int getEndOffset()>();

        r5 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrCall irMethodCall(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.descriptors.FunctionDescriptor,int,int)>($r7, $r8, $i0, $i1);

        z0 = 0;

        z1 = 0;

        r6 = r5;

        interfaceinvoke r6.<org.jetbrains.kotlin.ir.expressions.IrCall: void putValueArgument(int,org.jetbrains.kotlin.ir.expressions.IrExpression)>(0, r3);

        $z4 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean getHasSourceInformation(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope)>(r2);

        if $z4 == 0 goto label3;

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void recordSourceParameter(org.jetbrains.kotlin.ir.expressions.IrCall,int,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope)>(r6, 1, r2);

     label3:
        $r9 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r5;

        return $r9;
    }

    static org.jetbrains.kotlin.ir.expressions.IrExpression irStartRestartGroup$default(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer, org.jetbrains.kotlin.ir.IrElement, androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope, org.jetbrains.kotlin.ir.expressions.IrExpression, int, java.lang.Object)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.IrElement r1;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope r2;
        int i0, $i1;
        java.lang.Object r3;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r4, r6;
        org.jetbrains.kotlin.ir.expressions.IrConst $r5;

        r0 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter1: org.jetbrains.kotlin.ir.IrElement;

        r2 := @parameter2: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope;

        r6 := @parameter3: org.jetbrains.kotlin.ir.expressions.IrExpression;

        i0 := @parameter4: int;

        r3 := @parameter5: java.lang.Object;

        $i1 = i0 & 4;

        if $i1 == 0 goto label1;

        $r5 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrConst irSourceKey(org.jetbrains.kotlin.ir.IrElement)>(r1);

        r6 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r5;

     label1:
        $r4 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irStartRestartGroup(org.jetbrains.kotlin.ir.IrElement,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope,org.jetbrains.kotlin.ir.expressions.IrExpression)>(r1, r2, r6);

        return $r4;
    }

    private final org.jetbrains.kotlin.ir.expressions.IrExpression irEndRestartGroup()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r1, $r5;
        org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor $r2;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r3;
        org.jetbrains.kotlin.ir.expressions.IrCall $r4;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        $r1 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irCurrentComposer()>();

        $r2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor endRestartGroupDescriptor>;

        $r3 = (org.jetbrains.kotlin.descriptors.FunctionDescriptor) $r2;

        $r4 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrCall irMethodCall$default(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.descriptors.FunctionDescriptor,int,int,int,java.lang.Object)>(r0, $r1, $r3, 0, 0, 12, null);

        $r5 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r4;

        return $r5;
    }

    private final org.jetbrains.kotlin.ir.expressions.IrExpression irCache(int, int, org.jetbrains.kotlin.ir.types.IrType, org.jetbrains.kotlin.ir.expressions.IrExpression, org.jetbrains.kotlin.ir.expressions.IrExpression)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        int i0, i1;
        org.jetbrains.kotlin.ir.types.IrType r1;
        org.jetbrains.kotlin.ir.expressions.IrExpression r2, r3, $r10, $r11;
        org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol r4;
        org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl r5, $r9;
        boolean z0, z1;
        org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor $r7;
        org.jetbrains.kotlin.descriptors.CallableDescriptor $r8;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: org.jetbrains.kotlin.ir.types.IrType;

        r2 := @parameter3: org.jetbrains.kotlin.ir.expressions.IrExpression;

        r3 := @parameter4: org.jetbrains.kotlin.ir.expressions.IrExpression;

        $r7 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor cacheDescriptor>;

        $r8 = (org.jetbrains.kotlin.descriptors.CallableDescriptor) $r7;

        r4 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol referenceFunction(org.jetbrains.kotlin.descriptors.CallableDescriptor)>($r8);

        $r9 = new org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl;

        specialinvoke $r9.<org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl: void <init>(int,int,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,org.jetbrains.kotlin.ir.symbols.IrClassSymbol,int,kotlin.jvm.internal.DefaultConstructorMarker)>(i0, i1, r1, r4, null, null, 48, null);

        r5 = $r9;

        z0 = 0;

        z1 = 0;

        $r10 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irCurrentComposer()>();

        virtualinvoke r5.<org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl: void setDispatchReceiver(org.jetbrains.kotlin.ir.expressions.IrExpression)>($r10);

        virtualinvoke r5.<org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl: void putValueArgument(int,org.jetbrains.kotlin.ir.expressions.IrExpression)>(0, r2);

        virtualinvoke r5.<org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl: void putValueArgument(int,org.jetbrains.kotlin.ir.expressions.IrExpression)>(1, r3);

        virtualinvoke r5.<org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl: void putTypeArgument(int,org.jetbrains.kotlin.ir.types.IrType)>(0, r1);

        $r11 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r5;

        return $r11;
    }

    private final org.jetbrains.kotlin.ir.expressions.IrExpression irChanged(org.jetbrains.kotlin.ir.expressions.IrExpression)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression r1, r3, $r9, $r11;
        org.jetbrains.kotlin.ir.types.IrType r2, $r6;
        java.util.Map r4;
        boolean z0, z1, z2, z4, z5;
        org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor r5, $r14;
        org.jetbrains.kotlin.types.KotlinType $r7;
        java.lang.Object $r8;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r10;
        org.jetbrains.kotlin.builtins.PrimitiveType r12, r13;
        org.jetbrains.kotlin.ir.expressions.IrCall r15, r16;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrExpression;

        $r6 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrExpression: org.jetbrains.kotlin.ir.types.IrType getType()>();

        r2 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.types.IrType unboxInlineClass(org.jetbrains.kotlin.ir.types.IrType)>($r6);

        r3 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression unboxValueIfInline(org.jetbrains.kotlin.ir.expressions.IrExpression)>(r1);

        $r7 = staticinvoke <org.jetbrains.kotlin.ir.types.IrTypesKt: org.jetbrains.kotlin.types.KotlinType toKotlinType(org.jetbrains.kotlin.ir.types.IrType)>(r2);

        r12 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.builtins.PrimitiveType toPrimitiveType(org.jetbrains.kotlin.types.KotlinType)>($r7);

        z1 = 0;

        z2 = 0;

        r13 = r12;

        r4 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: java.util.Map changedDescriptors>;

        z0 = 0;

        $r8 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r13);

        $r14 = (org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor) $r8;

        if $r14 == null goto label1;

        goto label2;

     label1:
        $r14 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor changedDescriptor>;

     label2:
        r5 = $r14;

        $r9 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irCurrentComposer()>();

        $r10 = (org.jetbrains.kotlin.descriptors.FunctionDescriptor) r5;

        r15 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrCall irMethodCall$default(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.descriptors.FunctionDescriptor,int,int,int,java.lang.Object)>(r0, $r9, $r10, 0, 0, 12, null);

        z4 = 0;

        z5 = 0;

        r16 = r15;

        interfaceinvoke r16.<org.jetbrains.kotlin.ir.expressions.IrCall: void putValueArgument(int,org.jetbrains.kotlin.ir.expressions.IrExpression)>(0, r3);

        $r11 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r15;

        return $r11;
    }

    private final org.jetbrains.kotlin.ir.expressions.IrExpression irSkipToGroupEnd()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r1, $r5;
        org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor $r2;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r3;
        org.jetbrains.kotlin.ir.expressions.IrCall $r4;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        $r1 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irCurrentComposer()>();

        $r2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor skipToGroupEndDescriptor>;

        $r3 = (org.jetbrains.kotlin.descriptors.FunctionDescriptor) $r2;

        $r4 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrCall irMethodCall$default(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.descriptors.FunctionDescriptor,int,int,int,java.lang.Object)>(r0, $r1, $r3, 0, 0, 12, null);

        $r5 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r4;

        return $r5;
    }

    private final org.jetbrains.kotlin.ir.expressions.IrExpression irSkipCurrentGroup()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r1, $r5;
        org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor $r2;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r3;
        org.jetbrains.kotlin.ir.expressions.IrCall $r4;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        $r1 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irCurrentComposer()>();

        $r2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor skipCurrentGroupDescriptor>;

        $r3 = (org.jetbrains.kotlin.descriptors.FunctionDescriptor) $r2;

        $r4 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrCall irMethodCall$default(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.descriptors.FunctionDescriptor,int,int,int,java.lang.Object)>(r0, $r1, $r3, 0, 0, 12, null);

        $r5 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r4;

        return $r5;
    }

    private final org.jetbrains.kotlin.ir.expressions.IrExpression irEndReplaceableGroup()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r1, $r5;
        org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor $r2;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r3;
        org.jetbrains.kotlin.ir.expressions.IrCall $r4;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        $r1 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irCurrentComposer()>();

        $r2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor endReplaceableDescriptor>;

        $r3 = (org.jetbrains.kotlin.descriptors.FunctionDescriptor) $r2;

        $r4 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrCall irMethodCall$default(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.descriptors.FunctionDescriptor,int,int,int,java.lang.Object)>(r0, $r1, $r3, 0, 0, 12, null);

        $r5 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r4;

        return $r5;
    }

    private final org.jetbrains.kotlin.ir.expressions.IrExpression irEndDefaults()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r1, $r5;
        org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor $r2;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r3;
        org.jetbrains.kotlin.ir.expressions.IrCall $r4;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        $r1 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irCurrentComposer()>();

        $r2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor endDefaultsDescriptor>;

        $r3 = (org.jetbrains.kotlin.descriptors.FunctionDescriptor) $r2;

        $r4 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrCall irMethodCall$default(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.descriptors.FunctionDescriptor,int,int,int,java.lang.Object)>(r0, $r1, $r3, 0, 0, 12, null);

        $r5 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r4;

        return $r5;
    }

    private final org.jetbrains.kotlin.ir.expressions.IrExpression irStartMovableGroup(org.jetbrains.kotlin.ir.IrElement, org.jetbrains.kotlin.ir.expressions.IrExpression, androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.IrElement r1;
        org.jetbrains.kotlin.ir.expressions.IrExpression r2, $r7, $r10, $r11;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope r3;
        org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor r4, $r12;
        org.jetbrains.kotlin.ir.expressions.IrCall r5, r6;
        boolean z0, z1, $z3, $z4;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r8;
        int $i0, $i1;
        org.jetbrains.kotlin.ir.expressions.IrConst $r9;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.ir.IrElement;

        r2 := @parameter1: org.jetbrains.kotlin.ir.expressions.IrExpression;

        r3 := @parameter2: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope;

        $z3 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean getHasSourceInformation(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope)>(r3);

        if $z3 == 0 goto label1;

        $r12 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor startMovableSourceDescriptor>;

        goto label2;

     label1:
        $r12 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor startMovableDescriptor>;

     label2:
        r4 = $r12;

        $r7 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irCurrentComposer()>();

        $r8 = (org.jetbrains.kotlin.descriptors.FunctionDescriptor) r4;

        $i0 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.IrElement: int getStartOffset()>();

        $i1 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.IrElement: int getEndOffset()>();

        r5 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrCall irMethodCall(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.descriptors.FunctionDescriptor,int,int)>($r7, $r8, $i0, $i1);

        z0 = 0;

        z1 = 0;

        r6 = r5;

        $r9 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrConst irSourceKey(org.jetbrains.kotlin.ir.IrElement)>(r1);

        $r10 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r9;

        interfaceinvoke r6.<org.jetbrains.kotlin.ir.expressions.IrCall: void putValueArgument(int,org.jetbrains.kotlin.ir.expressions.IrExpression)>(0, $r10);

        interfaceinvoke r6.<org.jetbrains.kotlin.ir.expressions.IrCall: void putValueArgument(int,org.jetbrains.kotlin.ir.expressions.IrExpression)>(1, r2);

        $z4 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean getHasSourceInformation(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope)>(r3);

        if $z4 == 0 goto label3;

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void recordSourceParameter(org.jetbrains.kotlin.ir.expressions.IrCall,int,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope)>(r6, 2, r3);

     label3:
        $r11 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r5;

        return $r11;
    }

    private final org.jetbrains.kotlin.ir.expressions.IrExpression irEndMovableGroup()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r1, $r5;
        org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor $r2;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r3;
        org.jetbrains.kotlin.ir.expressions.IrCall $r4;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        $r1 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irCurrentComposer()>();

        $r2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor endMovableDescriptor>;

        $r3 = (org.jetbrains.kotlin.descriptors.FunctionDescriptor) $r2;

        $r4 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrCall irMethodCall$default(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.descriptors.FunctionDescriptor,int,int,int,java.lang.Object)>(r0, $r1, $r3, 0, 0, 12, null);

        $r5 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r4;

        return $r5;
    }

    private final org.jetbrains.kotlin.ir.expressions.IrExpression irJoinKeyChain(java.util.List)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        java.util.List r1;
        java.lang.Iterable $r2;
        java.util.Iterator r3;
        org.jetbrains.kotlin.ir.expressions.IrExpression r4, r5, $r8, $r10;
        org.jetbrains.kotlin.ir.expressions.IrCall r6;
        boolean z2, z3, $z5, $z6;
        java.lang.Object $r9, r15;
        org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor $r11;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r12;
        java.lang.UnsupportedOperationException $r13;
        java.lang.Throwable $r14;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: java.util.List;

        $r2 = (java.lang.Iterable) r1;

        r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z5 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z5 != 0 goto label1;

        $r13 = new java.lang.UnsupportedOperationException;

        specialinvoke $r13.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Empty collection can\'t be reduced.");

        $r14 = (java.lang.Throwable) $r13;

        throw $r14;

     label1:
        r15 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

     label2:
        $z6 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label3;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r9;

        r5 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r15;

        $r10 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irCurrentComposer()>();

        $r11 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor joinKeyDescriptor>;

        $r12 = (org.jetbrains.kotlin.descriptors.FunctionDescriptor) $r11;

        r6 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrCall irMethodCall$default(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.descriptors.FunctionDescriptor,int,int,int,java.lang.Object)>(r0, $r10, $r12, 0, 0, 12, null);

        z2 = 0;

        z3 = 0;

        interfaceinvoke r6.<org.jetbrains.kotlin.ir.expressions.IrCall: void putValueArgument(int,org.jetbrains.kotlin.ir.expressions.IrExpression)>(0, r5);

        interfaceinvoke r6.<org.jetbrains.kotlin.ir.expressions.IrCall: void putValueArgument(int,org.jetbrains.kotlin.ir.expressions.IrExpression)>(1, r4);

        r15 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r6;

        goto label2;

     label3:
        $r8 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r15;

        return $r8;
    }

    private final transient org.jetbrains.kotlin.ir.expressions.IrExpression irSafeCall(org.jetbrains.kotlin.ir.expressions.IrExpression, org.jetbrains.kotlin.descriptors.FunctionDescriptor, org.jetbrains.kotlin.ir.expressions.IrExpression[])
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0, r9, r13;
        org.jetbrains.kotlin.ir.expressions.IrExpression r1, r7, r8, r15, r16, $r22, $r24, $r25, $r28, $r29, $r33;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor r2;
        org.jetbrains.kotlin.ir.expressions.IrExpression[] r3, r14;
        org.jetbrains.kotlin.ir.declarations.impl.IrVariableImpl r4;
        org.jetbrains.kotlin.ir.expressions.IrCall r5;
        org.jetbrains.kotlin.ir.IrStatement[] r10, r11, $r19;
        org.jetbrains.kotlin.ir.expressions.IrStatementOrigin r12;
        int i0, i1, $i2, i3, i4;
        kotlin.Unit r17;
        org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$SAFE_CALL $r18;
        org.jetbrains.kotlin.ir.IrStatement $r20, $r31;
        org.jetbrains.kotlin.ir.declarations.IrValueDeclaration $r21, $r27;
        org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl $r23, $r26;
        org.jetbrains.kotlin.ir.expressions.impl.IrIfThenElseImpl $r30;
        java.util.List $r32;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrExpression;

        r2 := @parameter1: org.jetbrains.kotlin.descriptors.FunctionDescriptor;

        r3 := @parameter2: org.jetbrains.kotlin.ir.expressions.IrExpression[];

        r4 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.declarations.impl.IrVariableImpl irTemporary$default(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,org.jetbrains.kotlin.ir.expressions.IrExpression,java.lang.String,org.jetbrains.kotlin.ir.types.IrType,boolean,boolean,int,java.lang.Object)>(r0, r1, "safe_receiver", null, 0, 0, 28, null);

        $r18 = <org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$SAFE_CALL: org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$SAFE_CALL INSTANCE>;

        $r19 = newarray (org.jetbrains.kotlin.ir.IrStatement)[2];

        $r20 = (org.jetbrains.kotlin.ir.IrStatement) r4;

        $r19[0] = $r20;

        $r21 = (org.jetbrains.kotlin.ir.declarations.IrValueDeclaration) r4;

        $r22 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irGet(org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)>($r21);

        $r23 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl irNull()>();

        $r24 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r23;

        $r25 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irEqual(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r22, $r24);

        $r26 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl irNull()>();

        r5 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrCall irCall$default(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,org.jetbrains.kotlin.descriptors.FunctionDescriptor,int,int,int,java.lang.Object)>(r0, r2, 0, 0, 6, null);

        r7 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r26;

        r8 = $r25;

        r9 = r0;

        r10 = $r19;

        r11 = $r19;

        r12 = (org.jetbrains.kotlin.ir.expressions.IrStatementOrigin) $r18;

        r13 = r0;

        $r27 = (org.jetbrains.kotlin.ir.declarations.IrValueDeclaration) r4;

        $r28 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irGet(org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)>($r27);

        interfaceinvoke r5.<org.jetbrains.kotlin.ir.expressions.IrCall: void setDispatchReceiver(org.jetbrains.kotlin.ir.expressions.IrExpression)>($r28);

        i3 = 0;

        r14 = r3;

        i0 = lengthof r14;

        i4 = 0;

     label1:
        if i4 >= i0 goto label2;

        r15 = r14[i4];

        $i2 = i3;

        i3 = i3 + 1;

        r16 = r15;

        i1 = $i2;

        interfaceinvoke r5.<org.jetbrains.kotlin.ir.expressions.IrCall: void putValueArgument(int,org.jetbrains.kotlin.ir.expressions.IrExpression)>(i1, r16);

        i4 = i4 + 1;

        goto label1;

     label2:
        r17 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r29 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r5;

        $r30 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.impl.IrIfThenElseImpl irIfThenElse$default(androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression,int,java.lang.Object)>(r9, null, r8, r7, $r29, 1, null);

        $r31 = (org.jetbrains.kotlin.ir.IrStatement) $r30;

        r10[1] = $r31;

        $r32 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object[])>(r11);

        $r33 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.IrExpression irBlock$default(androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,java.util.List,int,java.lang.Object)>(r13, null, r12, $r32, 1, null);

        return $r33;
    }

    private final org.jetbrains.kotlin.ir.expressions.IrCall irCall(org.jetbrains.kotlin.descriptors.FunctionDescriptor, int, int)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor r1;
        int i0, i1;
        boolean z0;
        org.jetbrains.kotlin.ir.types.IrType r2, $r7;
        org.jetbrains.kotlin.types.KotlinType $r3;
        java.lang.IllegalStateException $r4;
        java.lang.String $r5, r11;
        java.lang.Throwable $r6;
        org.jetbrains.kotlin.descriptors.CallableDescriptor $r8;
        org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl $r9;
        org.jetbrains.kotlin.ir.expressions.IrCall $r10;
        org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol r12;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.descriptors.FunctionDescriptor;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r3 = interfaceinvoke r1.<org.jetbrains.kotlin.descriptors.FunctionDescriptor: org.jetbrains.kotlin.types.KotlinType getReturnType()>();

        if $r3 == null goto label1;

        $r7 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.types.IrType toIrType(org.jetbrains.kotlin.types.KotlinType)>($r3);

        if $r7 == null goto label1;

        goto label2;

     label1:
        r11 = "Expected a return type";

        z0 = 0;

        $r4 = new java.lang.IllegalStateException;

        $r5 = virtualinvoke r11.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        $r6 = (java.lang.Throwable) $r4;

        throw $r6;

     label2:
        r2 = $r7;

        $r8 = (org.jetbrains.kotlin.descriptors.CallableDescriptor) r1;

        r12 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol referenceFunction(org.jetbrains.kotlin.descriptors.CallableDescriptor)>($r8);

        $r9 = new org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl;

        specialinvoke $r9.<org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl: void <init>(int,int,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,org.jetbrains.kotlin.ir.symbols.IrClassSymbol,int,kotlin.jvm.internal.DefaultConstructorMarker)>(i0, i1, r2, r12, null, null, 48, null);

        $r10 = (org.jetbrains.kotlin.ir.expressions.IrCall) $r9;

        return $r10;
    }

    static org.jetbrains.kotlin.ir.expressions.IrCall irCall$default(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer, org.jetbrains.kotlin.descriptors.FunctionDescriptor, int, int, int, java.lang.Object)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor r1;
        int i0, $i1, $i2, i3, i4;
        java.lang.Object r2;
        org.jetbrains.kotlin.ir.expressions.IrCall $r3;

        r0 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter1: org.jetbrains.kotlin.descriptors.FunctionDescriptor;

        i3 := @parameter2: int;

        i4 := @parameter3: int;

        i0 := @parameter4: int;

        r2 := @parameter5: java.lang.Object;

        $i1 = i0 & 2;

        if $i1 == 0 goto label1;

        i3 = -1;

     label1:
        $i2 = i0 & 4;

        if $i2 == 0 goto label2;

        i4 = -1;

     label2:
        $r3 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrCall irCall(org.jetbrains.kotlin.descriptors.FunctionDescriptor,int,int)>(r1, i3, i4);

        return $r3;
    }

    private final org.jetbrains.kotlin.ir.expressions.IrCall irMethodCall(org.jetbrains.kotlin.ir.expressions.IrExpression, org.jetbrains.kotlin.descriptors.FunctionDescriptor, int, int)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression r1;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor r2;
        int i0, i1;
        org.jetbrains.kotlin.ir.expressions.IrCall r3;
        boolean z0, z1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrExpression;

        r2 := @parameter1: org.jetbrains.kotlin.descriptors.FunctionDescriptor;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r3 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrCall irCall(org.jetbrains.kotlin.descriptors.FunctionDescriptor,int,int)>(r2, i0, i1);

        z0 = 0;

        z1 = 0;

        interfaceinvoke r3.<org.jetbrains.kotlin.ir.expressions.IrCall: void setDispatchReceiver(org.jetbrains.kotlin.ir.expressions.IrExpression)>(r1);

        return r3;
    }

    static org.jetbrains.kotlin.ir.expressions.IrCall irMethodCall$default(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer, org.jetbrains.kotlin.ir.expressions.IrExpression, org.jetbrains.kotlin.descriptors.FunctionDescriptor, int, int, int, java.lang.Object)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression r1;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor r2;
        int i0, $i1, $i2, i3, i4;
        java.lang.Object r3;
        org.jetbrains.kotlin.ir.expressions.IrCall $r4;

        r0 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter1: org.jetbrains.kotlin.ir.expressions.IrExpression;

        r2 := @parameter2: org.jetbrains.kotlin.descriptors.FunctionDescriptor;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i0 := @parameter5: int;

        r3 := @parameter6: java.lang.Object;

        $i1 = i0 & 4;

        if $i1 == 0 goto label1;

        i3 = -1;

     label1:
        $i2 = i0 & 8;

        if $i2 == 0 goto label2;

        i4 = -1;

     label2:
        $r4 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrCall irMethodCall(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.descriptors.FunctionDescriptor,int,int)>(r1, r2, i3, i4);

        return $r4;
    }

    private final org.jetbrains.kotlin.ir.declarations.impl.IrVariableImpl irTemporary(org.jetbrains.kotlin.ir.expressions.IrExpression, java.lang.String, org.jetbrains.kotlin.ir.types.IrType, boolean, boolean)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression r1;
        java.lang.String r2, r5, $r6;
        org.jetbrains.kotlin.ir.types.IrType r3;
        boolean z0, z1;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope r4;
        org.jetbrains.kotlin.ir.declarations.IrFunction $r7;
        org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol $r8;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r9;
        org.jetbrains.kotlin.descriptors.DeclarationDescriptor $r10;
        org.jetbrains.kotlin.ir.declarations.impl.IrVariableImpl $r11;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrExpression;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.jetbrains.kotlin.ir.types.IrType;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        r4 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope getCurrentFunctionScope()>();

        if z1 == 0 goto label1;

        if r2 == null goto label1;

        $r6 = r2;

        goto label2;

     label1:
        $r6 = virtualinvoke r4.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: java.lang.String getNameForTemporary(java.lang.String)>(r2);

     label2:
        r5 = $r6;

        $r7 = virtualinvoke r4.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: org.jetbrains.kotlin.ir.declarations.IrFunction getFunction()>();

        $r8 = interfaceinvoke $r7.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getSymbol()>();

        $r9 = interfaceinvoke $r8.<org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol: org.jetbrains.kotlin.descriptors.FunctionDescriptor getDescriptor()>();

        $r10 = (org.jetbrains.kotlin.descriptors.DeclarationDescriptor) $r9;

        $r11 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.declarations.impl.IrVariableImpl irTemporary$default(androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering,org.jetbrains.kotlin.descriptors.DeclarationDescriptor,org.jetbrains.kotlin.ir.expressions.IrExpression,java.lang.String,org.jetbrains.kotlin.ir.types.IrType,boolean,org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin,int,java.lang.Object)>(r0, $r10, r1, r5, r3, z0, null, 32, null);

        return $r11;
    }

    static org.jetbrains.kotlin.ir.declarations.impl.IrVariableImpl irTemporary$default(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer, org.jetbrains.kotlin.ir.expressions.IrExpression, java.lang.String, org.jetbrains.kotlin.ir.types.IrType, boolean, boolean, int, java.lang.Object)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression r1;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Object r2;
        org.jetbrains.kotlin.ir.declarations.impl.IrVariableImpl $r3;
        java.lang.String r4;
        org.jetbrains.kotlin.ir.types.IrType r5;
        boolean z0, z1;

        r0 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter1: org.jetbrains.kotlin.ir.expressions.IrExpression;

        r4 := @parameter2: java.lang.String;

        r5 := @parameter3: org.jetbrains.kotlin.ir.types.IrType;

        z0 := @parameter4: boolean;

        z1 := @parameter5: boolean;

        i0 := @parameter6: int;

        r2 := @parameter7: java.lang.Object;

        $i1 = i0 & 2;

        if $i1 == 0 goto label1;

        r4 = (java.lang.String) null;

     label1:
        $i2 = i0 & 4;

        if $i2 == 0 goto label2;

        r5 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrExpression: org.jetbrains.kotlin.ir.types.IrType getType()>();

     label2:
        $i3 = i0 & 8;

        if $i3 == 0 goto label3;

        z0 = 0;

     label3:
        $i4 = i0 & 16;

        if $i4 == 0 goto label4;

        z1 = 0;

     label4:
        $r3 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.declarations.impl.IrVariableImpl irTemporary(org.jetbrains.kotlin.ir.expressions.IrExpression,java.lang.String,org.jetbrains.kotlin.ir.types.IrType,boolean,boolean)>(r1, r4, r5, z0, z1);

        return $r3;
    }

    private final org.jetbrains.kotlin.ir.expressions.IrExpression asReplaceableGroup(org.jetbrains.kotlin.ir.expressions.IrExpression, androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0, $r18;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r1, $r4, $r6, $r9, $r13, $r14, $r16, $r20;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope r2;
        boolean $z0, $z1, $z2, $z3;
        org.jetbrains.kotlin.ir.IrElement $r3, $r8, $r12;
        java.util.List $r5, $r7, $r10, $r15;
        org.jetbrains.kotlin.ir.expressions.IrExpression[] $r11;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asReplaceableGroup$1 $r17;
        kotlin.jvm.functions.Function0 $r19;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrExpression;

        r2 := @parameter1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope;

        $z0 = virtualinvoke r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: boolean getHasComposableCalls()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: boolean getHasReturn()>();

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: boolean getHasJump()>();

        if $z2 != 0 goto label1;

        $r11 = newarray (org.jetbrains.kotlin.ir.expressions.IrExpression)[2];

        $r12 = (org.jetbrains.kotlin.ir.IrElement) $r1;

        $r13 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irStartReplaceableGroup$default(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,org.jetbrains.kotlin.ir.IrElement,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope,org.jetbrains.kotlin.ir.expressions.IrExpression,int,java.lang.Object)>(r0, $r12, r2, null, 4, null);

        $r11[0] = $r13;

        $r14 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irEndReplaceableGroup()>();

        $r11[1] = $r14;

        $r15 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object[])>($r11);

        $r16 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression wrap$default(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,org.jetbrains.kotlin.ir.expressions.IrExpression,java.util.List,java.util.List,int,java.lang.Object)>(r0, $r1, $r15, null, 2, null);

        return $r16;

     label1:
        $r17 = new androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asReplaceableGroup$1;

        $r18 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer) r0;

        specialinvoke $r17.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asReplaceableGroup$1: void <init>(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer)>($r18);

        $r19 = (kotlin.jvm.functions.Function0) $r17;

        virtualinvoke r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: void realizeGroup(kotlin.jvm.functions.Function0)>($r19);

        $z3 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean endsWithReturnOrJump(org.jetbrains.kotlin.ir.expressions.IrExpression)>($r1);

        if $z3 == 0 goto label2;

        $r8 = (org.jetbrains.kotlin.ir.IrElement) $r1;

        $r9 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irStartReplaceableGroup$default(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,org.jetbrains.kotlin.ir.IrElement,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope,org.jetbrains.kotlin.ir.expressions.IrExpression,int,java.lang.Object)>(r0, $r8, r2, null, 4, null);

        $r10 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r9);

        $r20 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression wrap$default(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,org.jetbrains.kotlin.ir.expressions.IrExpression,java.util.List,java.util.List,int,java.lang.Object)>(r0, $r1, $r10, null, 2, null);

        goto label3;

     label2:
        $r3 = (org.jetbrains.kotlin.ir.IrElement) $r1;

        $r4 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irStartReplaceableGroup$default(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,org.jetbrains.kotlin.ir.IrElement,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope,org.jetbrains.kotlin.ir.expressions.IrExpression,int,java.lang.Object)>(r0, $r3, r2, null, 4, null);

        $r5 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r4);

        $r6 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irEndReplaceableGroup()>();

        $r7 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r6);

        $r20 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression wrap(org.jetbrains.kotlin.ir.expressions.IrExpression,java.util.List,java.util.List)>($r1, $r5, $r7);

     label3:
        return $r20;
    }

    private final org.jetbrains.kotlin.ir.expressions.IrExpression wrap(org.jetbrains.kotlin.ir.expressions.IrExpression, java.util.List, java.util.List)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r1, $r11, $r15;
        java.util.List r2, r3, $r12;
        org.jetbrains.kotlin.ir.declarations.impl.IrVariableImpl r4;
        boolean $z0, $z1, $z2;
        org.jetbrains.kotlin.ir.types.IrType $r5, $r6, $r8, $r14;
        org.jetbrains.kotlin.ir.IrStatement $r7, $r13;
        org.jetbrains.kotlin.ir.declarations.IrValueDeclaration $r9;
        java.util.Collection $r10;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrExpression;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: java.util.List;

        $z0 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r5 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrExpression: org.jetbrains.kotlin.ir.types.IrType getType()>();

        $z1 = staticinvoke <org.jetbrains.kotlin.ir.types.IrTypePredicatesKt: boolean isNothing(org.jetbrains.kotlin.ir.types.IrType)>($r5);

        if $z1 != 0 goto label1;

        $r6 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrExpression: org.jetbrains.kotlin.ir.types.IrType getType()>();

        $z2 = staticinvoke <org.jetbrains.kotlin.ir.types.IrTypePredicatesKt: boolean isUnitOrNullableUnit(org.jetbrains.kotlin.ir.types.IrType)>($r6);

        if $z2 == 0 goto label2;

     label1:
        $r13 = (org.jetbrains.kotlin.ir.IrStatement) $r1;

        $r14 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrExpression: org.jetbrains.kotlin.ir.types.IrType getType()>();

        $r15 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression wrap(org.jetbrains.kotlin.ir.IrStatement,org.jetbrains.kotlin.ir.types.IrType,java.util.List,java.util.List)>($r13, $r14, r2, r3);

        goto label3;

     label2:
        r4 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.declarations.impl.IrVariableImpl irTemporary$default(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,org.jetbrains.kotlin.ir.expressions.IrExpression,java.lang.String,org.jetbrains.kotlin.ir.types.IrType,boolean,boolean,int,java.lang.Object)>(r0, $r1, "group", null, 0, 0, 28, null);

        $r7 = (org.jetbrains.kotlin.ir.IrStatement) r4;

        $r8 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrExpression: org.jetbrains.kotlin.ir.types.IrType getType()>();

        $r10 = (java.util.Collection) r3;

        $r9 = (org.jetbrains.kotlin.ir.declarations.IrValueDeclaration) r4;

        $r11 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irGet(org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)>($r9);

        $r12 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List plus(java.util.Collection,java.lang.Object)>($r10, $r11);

        $r15 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression wrap(org.jetbrains.kotlin.ir.IrStatement,org.jetbrains.kotlin.ir.types.IrType,java.util.List,java.util.List)>($r7, $r8, r2, $r12);

     label3:
        return $r15;
    }

    static org.jetbrains.kotlin.ir.expressions.IrExpression wrap$default(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer, org.jetbrains.kotlin.ir.expressions.IrExpression, java.util.List, java.util.List, int, java.lang.Object)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression r1, $r3;
        int i0, $i1, $i2;
        java.lang.Object r2;
        java.util.List r4, r5;

        r0 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter1: org.jetbrains.kotlin.ir.expressions.IrExpression;

        r4 := @parameter2: java.util.List;

        r5 := @parameter3: java.util.List;

        i0 := @parameter4: int;

        r2 := @parameter5: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        r4 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        r5 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

     label2:
        $r3 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression wrap(org.jetbrains.kotlin.ir.expressions.IrExpression,java.util.List,java.util.List)>(r1, r4, r5);

        return $r3;
    }

    private final org.jetbrains.kotlin.ir.expressions.IrExpression wrapDeferred(org.jetbrains.kotlin.ir.expressions.IrExpression, java.util.List, java.util.List)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r1, $r13, $r15;
        java.util.List r2, r3, $r14;
        org.jetbrains.kotlin.ir.declarations.impl.IrVariableImpl r4;
        org.jetbrains.kotlin.ir.types.IrType $r5, $r7, $r8, $r10;
        boolean $z0, $z1;
        org.jetbrains.kotlin.ir.IrStatement $r6, $r9;
        org.jetbrains.kotlin.ir.declarations.IrValueDeclaration $r11;
        java.util.Collection $r12;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrExpression;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: java.util.List;

        $r5 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrExpression: org.jetbrains.kotlin.ir.types.IrType getType()>();

        $z0 = staticinvoke <org.jetbrains.kotlin.ir.types.IrTypePredicatesKt: boolean isNothing(org.jetbrains.kotlin.ir.types.IrType)>($r5);

        if $z0 != 0 goto label1;

        $r8 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrExpression: org.jetbrains.kotlin.ir.types.IrType getType()>();

        $z1 = staticinvoke <org.jetbrains.kotlin.ir.types.IrTypePredicatesKt: boolean isUnitOrNullableUnit(org.jetbrains.kotlin.ir.types.IrType)>($r8);

        if $z1 == 0 goto label2;

     label1:
        $r6 = (org.jetbrains.kotlin.ir.IrStatement) $r1;

        $r7 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrExpression: org.jetbrains.kotlin.ir.types.IrType getType()>();

        $r15 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression wrap(org.jetbrains.kotlin.ir.IrStatement,org.jetbrains.kotlin.ir.types.IrType,java.util.List,java.util.List)>($r6, $r7, r2, r3);

        goto label3;

     label2:
        r4 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.declarations.impl.IrVariableImpl irTemporary$default(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,org.jetbrains.kotlin.ir.expressions.IrExpression,java.lang.String,org.jetbrains.kotlin.ir.types.IrType,boolean,boolean,int,java.lang.Object)>(r0, $r1, "group", null, 0, 0, 28, null);

        $r9 = (org.jetbrains.kotlin.ir.IrStatement) r4;

        $r10 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrExpression: org.jetbrains.kotlin.ir.types.IrType getType()>();

        $r12 = (java.util.Collection) r3;

        $r11 = (org.jetbrains.kotlin.ir.declarations.IrValueDeclaration) r4;

        $r13 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irGet(org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)>($r11);

        $r14 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List plus(java.util.Collection,java.lang.Object)>($r12, $r13);

        $r15 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression wrap(org.jetbrains.kotlin.ir.IrStatement,org.jetbrains.kotlin.ir.types.IrType,java.util.List,java.util.List)>($r9, $r10, r2, $r14);

     label3:
        return $r15;
    }

    static org.jetbrains.kotlin.ir.expressions.IrExpression wrapDeferred$default(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer, org.jetbrains.kotlin.ir.expressions.IrExpression, java.util.List, java.util.List, int, java.lang.Object)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression r1, $r3;
        int i0, $i1, $i2;
        java.lang.Object r2;
        java.util.List r4, r5;

        r0 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter1: org.jetbrains.kotlin.ir.expressions.IrExpression;

        r4 := @parameter2: java.util.List;

        r5 := @parameter3: java.util.List;

        i0 := @parameter4: int;

        r2 := @parameter5: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        r4 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        r5 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

     label2:
        $r3 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression wrapDeferred(org.jetbrains.kotlin.ir.expressions.IrExpression,java.util.List,java.util.List)>(r1, r4, r5);

        return $r3;
    }

    private final org.jetbrains.kotlin.ir.expressions.IrExpression wrap(org.jetbrains.kotlin.ir.IrStatement, org.jetbrains.kotlin.ir.types.IrType, java.util.List, java.util.List)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.IrStatement $r1;
        org.jetbrains.kotlin.ir.types.IrType r2;
        java.util.List r3, r4, $r7, $r10;
        org.jetbrains.kotlin.ir.expressions.impl.IrBlockImpl $r5;
        int $i0, $i1;
        java.util.Collection $r6, $r9;
        java.lang.Iterable $r8;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r11;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.IrStatement;

        r2 := @parameter1: org.jetbrains.kotlin.ir.types.IrType;

        r3 := @parameter2: java.util.List;

        r4 := @parameter3: java.util.List;

        $r5 = new org.jetbrains.kotlin.ir.expressions.impl.IrBlockImpl;

        $i0 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.IrStatement: int getStartOffset()>();

        $i1 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.IrStatement: int getEndOffset()>();

        $r6 = (java.util.Collection) r3;

        $r7 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List plus(java.util.Collection,java.lang.Object)>($r6, $r1);

        $r9 = (java.util.Collection) $r7;

        $r8 = (java.lang.Iterable) r4;

        $r10 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List plus(java.util.Collection,java.lang.Iterable)>($r9, $r8);

        specialinvoke $r5.<org.jetbrains.kotlin.ir.expressions.impl.IrBlockImpl: void <init>(int,int,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,java.util.List)>($i0, $i1, r2, null, $r10);

        $r11 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r5;

        return $r11;
    }

    static org.jetbrains.kotlin.ir.expressions.IrExpression wrap$default(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer, org.jetbrains.kotlin.ir.IrStatement, org.jetbrains.kotlin.ir.types.IrType, java.util.List, java.util.List, int, java.lang.Object)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.IrStatement r1;
        org.jetbrains.kotlin.ir.types.IrType r2;
        int i0, $i1, $i2;
        java.lang.Object r3;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r4;
        java.util.List r5, r6;

        r0 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter1: org.jetbrains.kotlin.ir.IrStatement;

        r2 := @parameter2: org.jetbrains.kotlin.ir.types.IrType;

        r5 := @parameter3: java.util.List;

        r6 := @parameter4: java.util.List;

        i0 := @parameter5: int;

        r3 := @parameter6: java.lang.Object;

        $i1 = i0 & 2;

        if $i1 == 0 goto label1;

        r5 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

     label1:
        $i2 = i0 & 4;

        if $i2 == 0 goto label2;

        r6 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

     label2:
        $r4 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression wrap(org.jetbrains.kotlin.ir.IrStatement,org.jetbrains.kotlin.ir.types.IrType,java.util.List,java.util.List)>(r1, r2, r5, r6);

        return $r4;
    }

    private final org.jetbrains.kotlin.ir.expressions.IrExpression asCoalescableGroup(org.jetbrains.kotlin.ir.expressions.IrExpression, androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0, $r7;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r1, $r12;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope r2;
        org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase r3, r4;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asCoalescableGroup$1 $r5;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asCoalescableGroup$2 $r6;
        kotlin.jvm.functions.Function0 $r8, $r9;
        java.util.List $r10, $r11;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrExpression;

        r2 := @parameter1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope;

        r3 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase mutableStatementContainer()>();

        r4 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase mutableStatementContainer()>();

        $r5 = new androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asCoalescableGroup$1;

        specialinvoke $r5.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asCoalescableGroup$1: void <init>(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope,org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase)>(r0, $r1, r3, r2, r4);

        $r8 = (kotlin.jvm.functions.Function0) $r5;

        $r6 = new androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asCoalescableGroup$2;

        $r7 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer) r0;

        specialinvoke $r6.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asCoalescableGroup$2: void <init>(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer)>($r7);

        $r9 = (kotlin.jvm.functions.Function0) $r6;

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void encounteredCoalescableGroup(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope,kotlin.jvm.functions.Function0,kotlin.jvm.functions.Function0)>(r2, $r8, $r9);

        $r10 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>(r3);

        $r11 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>(r4);

        $r12 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression wrapDeferred(org.jetbrains.kotlin.ir.expressions.IrExpression,java.util.List,java.util.List)>($r1, $r10, $r11);

        return $r12;
    }

    private final org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase mutableStatementContainer()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.expressions.impl.IrCompositeImpl $r1;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r2;
        org.jetbrains.kotlin.ir.descriptors.IrBuiltIns $r3;
        org.jetbrains.kotlin.ir.types.IrType $r4;
        org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase $r5;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        $r1 = new org.jetbrains.kotlin.ir.expressions.impl.IrCompositeImpl;

        $r2 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        $r3 = interfaceinvoke $r2.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.ir.descriptors.IrBuiltIns getIrBuiltIns()>();

        $r4 = virtualinvoke $r3.<org.jetbrains.kotlin.ir.descriptors.IrBuiltIns: org.jetbrains.kotlin.ir.types.IrType getUnitType()>();

        specialinvoke $r1.<org.jetbrains.kotlin.ir.expressions.impl.IrCompositeImpl: void <init>(int,int,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,int,kotlin.jvm.internal.DefaultConstructorMarker)>(-1, -1, $r4, null, 8, null);

        $r5 = (org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase) $r1;

        return $r5;
    }

    private final void encounteredComposableCall(boolean)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        boolean z0, $z1, $z2, $z3, $z4;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope r1, r5;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope $r2;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope $r3, $r4;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        z0 := @parameter0: boolean;

        r5 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope currentScope>;

     label1:
        if r5 == null goto label5;

        r1 = r5;

        $z1 = r1 instanceof androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        if $z1 == 0 goto label2;

        $r3 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope) r5;

        virtualinvoke $r3.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: void recordComposableCall(boolean)>(z0);

        $r4 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope) r5;

        $z4 = virtualinvoke $r4.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: boolean isInlinedLambda()>();

        if $z4 != 0 goto label4;

        goto label5;

     label2:
        $z2 = r1 instanceof androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope;

        if $z2 == 0 goto label3;

        $r2 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope) r5;

        virtualinvoke $r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: void recordComposableCall(boolean)>(z0);

        goto label4;

     label3:
        $z3 = r1 instanceof androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$ClassScope;

        if $z3 == 0 goto label4;

        goto label5;

     label4:
        r5 = virtualinvoke r5.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope getParent()>();

        goto label1;

     label5:
        return;
    }

    private final void recordCallInSource(org.jetbrains.kotlin.ir.IrElement)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.IrElement r1;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope r2, r5;
        boolean $z0, $z1, $z2;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope $r3;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope $r4;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation r6;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.ir.IrElement;

        r5 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope currentScope>;

        r6 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation) null;

     label1:
        if r5 == null goto label5;

        r2 = r5;

        $z0 = r2 instanceof androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        if $z0 == 0 goto label2;

        $r4 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope) r5;

        r6 = virtualinvoke $r4.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation recordSourceLocation(org.jetbrains.kotlin.ir.IrElement,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation)>(r1, r6);

        goto label4;

     label2:
        $z1 = r2 instanceof androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope;

        if $z1 == 0 goto label3;

        $r3 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope) r5;

        r6 = virtualinvoke $r3.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation recordSourceLocation(org.jetbrains.kotlin.ir.IrElement,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation)>(r1, r6);

        goto label4;

     label3:
        $z2 = r2 instanceof androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$ClassScope;

        if $z2 == 0 goto label4;

        goto label5;

     label4:
        r5 = virtualinvoke r5.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope getParent()>();

        goto label1;

     label5:
        return;
    }

    private final void encounteredCapturedComposableCall()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope r1, r3;
        boolean $z0;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$CaptureScope $r2;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r3 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope currentScope>;

     label1:
        if r3 == null goto label3;

        r1 = r3;

        $z0 = r1 instanceof androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$CaptureScope;

        if $z0 == 0 goto label2;

        $r2 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$CaptureScope) r3;

        virtualinvoke $r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$CaptureScope: void markCapturedComposableCall()>();

        goto label3;

     label2:
        r3 = virtualinvoke r3.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope getParent()>();

        goto label1;

     label3:
        return;
    }

    private final void encounteredCoalescableGroup(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope, kotlin.jvm.functions.Function0, kotlin.jvm.functions.Function0)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope r1, $r9;
        kotlin.jvm.functions.Function0 r2, r3;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope r4, r12;
        java.lang.String r5, $r7;
        boolean z0, $z1, $z2, $z3;
        java.lang.IllegalStateException $r6;
        java.lang.Throwable $r8;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope $r10, $r11;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope;

        r2 := @parameter1: kotlin.jvm.functions.Function0;

        r3 := @parameter2: kotlin.jvm.functions.Function0;

        r12 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope currentScope>;

     label1:
        if r12 == null goto label5;

        r4 = r12;

        $z1 = r4 instanceof androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        if $z1 == 0 goto label2;

        $r10 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope) r12;

        virtualinvoke $r10.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: void markCoalescableGroup(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope,kotlin.jvm.functions.Function0,kotlin.jvm.functions.Function0)>(r1, r2, r3);

        $r11 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope) r12;

        $z3 = virtualinvoke $r11.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: boolean isInlinedLambda()>();

        if $z3 != 0 goto label4;

        goto label5;

     label2:
        $z2 = r4 instanceof androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope;

        if $z2 == 0 goto label3;

        $r9 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope) r12;

        virtualinvoke $r9.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: void markCoalescableGroup(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope,kotlin.jvm.functions.Function0,kotlin.jvm.functions.Function0)>(r1, r2, r3);

        goto label5;

     label3:
        r5 = "Unexpected scope type";

        z0 = 0;

        $r6 = new java.lang.IllegalStateException;

        $r7 = virtualinvoke r5.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        $r8 = (java.lang.Throwable) $r6;

        throw $r8;

     label4:
        r12 = virtualinvoke r12.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope getParent()>();

        goto label1;

     label5:
        return;
    }

    private final void encounteredReturn(org.jetbrains.kotlin.ir.symbols.IrReturnTargetSymbol, kotlin.jvm.functions.Function1)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.symbols.IrReturnTargetSymbol r1;
        kotlin.jvm.functions.Function1 r2;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope r3, r9;
        boolean $z0, $z1, $z2;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope $r4;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope $r5, $r8;
        org.jetbrains.kotlin.ir.declarations.IrFunction $r6;
        org.jetbrains.kotlin.ir.declarations.IrReturnTarget $r7;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.ir.symbols.IrReturnTargetSymbol;

        r2 := @parameter1: kotlin.jvm.functions.Function1;

        r9 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope currentScope>;

     label1:
        if r9 == null goto label4;

        r3 = r9;

        $z0 = r3 instanceof androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        if $z0 == 0 goto label2;

        $r5 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope) r9;

        $r6 = virtualinvoke $r5.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: org.jetbrains.kotlin.ir.declarations.IrFunction getFunction()>();

        $r7 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.symbols.IrReturnTargetSymbol: org.jetbrains.kotlin.ir.declarations.IrReturnTarget getOwner()>();

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r6, $r7);

        if $z2 == 0 goto label3;

        $r8 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope) r9;

        virtualinvoke $r8.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: void markReturn(kotlin.jvm.functions.Function1)>(r2);

        goto label4;

     label2:
        $z1 = r3 instanceof androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope;

        if $z1 == 0 goto label3;

        $r4 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope) r9;

        virtualinvoke $r4.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: void markReturn(kotlin.jvm.functions.Function1)>(r2);

        goto label3;

     label3:
        r9 = virtualinvoke r9.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope getParent()>();

        goto label1;

     label4:
        return;
    }

    private final void encounteredJump(org.jetbrains.kotlin.ir.expressions.IrBreakContinue, kotlin.jvm.functions.Function1)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.expressions.IrBreakContinue r1;
        kotlin.jvm.functions.Function1 r2;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope r3, r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6, z7;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope $r4;
        org.jetbrains.kotlin.ir.expressions.IrLoop $r5, $r7;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$LoopScope $r6, $r8;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope $r9;
        java.lang.IllegalStateException $r10, $r13;
        java.lang.String $r11, $r14, r17, r18;
        java.lang.Throwable $r12, $r15;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrBreakContinue;

        r2 := @parameter1: kotlin.jvm.functions.Function1;

        r16 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope currentScope>;

     label1:
        if r16 == null goto label7;

        r3 = r16;

        $z0 = r3 instanceof androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$ClassScope;

        if $z0 == 0 goto label2;

        r17 = "Unexpected Class Scope encountered";

        z6 = 0;

        $r13 = new java.lang.IllegalStateException;

        $r14 = virtualinvoke r17.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        $r15 = (java.lang.Throwable) $r13;

        throw $r15;

     label2:
        $z1 = r3 instanceof androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        if $z1 == 0 goto label3;

        $r9 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope) r16;

        $z5 = virtualinvoke $r9.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: boolean isInlinedLambda()>();

        if $z5 != 0 goto label6;

        r18 = "Unexpected Function Scope encountered";

        z7 = 0;

        $r10 = new java.lang.IllegalStateException;

        $r11 = virtualinvoke r18.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        $r12 = (java.lang.Throwable) $r10;

        throw $r12;

     label3:
        $z2 = r3 instanceof androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$LoopScope;

        if $z2 == 0 goto label5;

        $r5 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrBreakContinue: org.jetbrains.kotlin.ir.expressions.IrLoop getLoop()>();

        $r6 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$LoopScope) r16;

        $r7 = virtualinvoke $r6.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$LoopScope: org.jetbrains.kotlin.ir.expressions.IrLoop getLoop()>();

        $z4 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r5, $r7);

        if $z4 == 0 goto label4;

        goto label7;

     label4:
        $r8 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$LoopScope) r16;

        virtualinvoke $r8.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$LoopScope: void markJump(kotlin.jvm.functions.Function1)>(r2);

        goto label6;

     label5:
        $z3 = r3 instanceof androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope;

        if $z3 == 0 goto label6;

        $r4 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope) r16;

        virtualinvoke $r4.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: void markJump(kotlin.jvm.functions.Function1)>(r2);

        goto label6;

     label6:
        r16 = virtualinvoke r16.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope getParent()>();

        goto label1;

     label7:
        return;
    }

    private final kotlin.Pair transformWithScope(org.jetbrains.kotlin.ir.expressions.IrExpression, androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r1, r7;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope r2, r3;
        kotlin.Pair r4;
        int $i0, $i1;
        org.jetbrains.kotlin.ir.visitors.IrElementTransformer $r5;
        java.lang.Throwable $r6, r8;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrExpression;

        r2 := @parameter1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope;

        r3 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope currentScope>;

     label1:
        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope currentScope> = r2;

        virtualinvoke r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: void setParent(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r3);

        $i0 = virtualinvoke r3.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: int getLevel()>();

        $i1 = $i0 + 1;

        virtualinvoke r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: void setLevel(int)>($i1);

        $r5 = (org.jetbrains.kotlin.ir.visitors.IrElementTransformer) r0;

        r7 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrExpression: org.jetbrains.kotlin.ir.expressions.IrExpression transform(org.jetbrains.kotlin.ir.visitors.IrElementTransformer,java.lang.Object)>($r5, null);

        r4 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>(r2, r7);

     label2:
        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope currentScope> = r3;

        return r4;

     label3:
        $r6 := @caughtexception;

        r8 = $r6;

     label4:
        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope currentScope> = r3;

        throw r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private final androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope withScope(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope, kotlin.jvm.functions.Function0)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope r1, r3;
        kotlin.jvm.functions.Function0 r2;
        java.lang.Throwable r4, $r6;
        int $i0, $i1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope;

        r2 := @parameter1: kotlin.jvm.functions.Function0;

        r3 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope access$getCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer)>(r0);

        staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void access$setCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r0, r1);

        virtualinvoke r1.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: void setParent(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r3);

        $i0 = virtualinvoke r3.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: int getLevel()>();

        $i1 = $i0 + 1;

        virtualinvoke r1.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: void setLevel(int)>($i1);

     label1:
        interfaceinvoke r2.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

     label2:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void access$setCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r0, r3);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        goto label5;

     label3:
        $r6 := @caughtexception;

        r4 = $r6;

     label4:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void access$setCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r0, r3);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw r4;

     label5:
        return r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private final java.lang.Object inScope(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope, kotlin.jvm.functions.Function0)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope r1, r3;
        kotlin.jvm.functions.Function0 r2;
        int $i0, $i1;
        java.lang.Throwable $r4, r6;
        java.lang.Object r5;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope;

        r2 := @parameter1: kotlin.jvm.functions.Function0;

        r3 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope access$getCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer)>(r0);

        staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void access$setCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r0, r1);

        virtualinvoke r1.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: void setParent(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r3);

        $i0 = virtualinvoke r3.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: int getLevel()>();

        $i1 = $i0 + 1;

        virtualinvoke r1.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: void setLevel(int)>($i1);

     label1:
        r5 = interfaceinvoke r2.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

     label2:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void access$setCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r0, r3);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        return r5;

     label3:
        $r4 := @caughtexception;

        r6 = $r4;

     label4:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void access$setCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r0, r3);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private final void forEach(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope, kotlin.jvm.functions.Function1)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope $r1, r4;
        kotlin.jvm.functions.Function1 r2;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        $r1 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope;

        r2 := @parameter1: kotlin.jvm.functions.Function1;

        r4 = $r1;

     label1:
        if r4 == null goto label2;

        interfaceinvoke r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r4);

        r4 = virtualinvoke r4.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope getParent()>();

        goto label1;

     label2:
        return;
    }

    public final androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta paramMetaOf(org.jetbrains.kotlin.ir.expressions.IrExpression, boolean)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression r1;
        boolean z0;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta r2, $r3;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrExpression;

        z0 := @parameter1: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "arg");

        $r3 = new androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta;

        specialinvoke $r3.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: void <init>(boolean,boolean,boolean,boolean,int,androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue,int,kotlin.jvm.internal.DefaultConstructorMarker)>(0, z0, 0, 0, 0, null, 61, null);

        r2 = $r3;

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void populateParamMeta(org.jetbrains.kotlin.ir.expressions.IrExpression,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta)>(r1, r2);

        return r2;
    }

    private final void populateParamMeta(org.jetbrains.kotlin.ir.expressions.IrExpression, androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression r1, $r10, $r12;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta r2;
        org.jetbrains.kotlin.ir.declarations.IrValueDeclaration r3, r4;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        org.jetbrains.kotlin.ir.expressions.IrGetValue $r5;
        org.jetbrains.kotlin.ir.symbols.IrValueSymbol $r6;
        org.jetbrains.kotlin.ir.declarations.IrVariable $r7, $r8, $r9, $r11;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrExpression;

        r2 := @parameter1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta;

        $z1 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean isStatic(org.jetbrains.kotlin.ir.expressions.IrExpression)>(r1);

        if $z1 == 0 goto label1;

        virtualinvoke r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: void setStatic(boolean)>(1);

        goto label5;

     label1:
        $z2 = r1 instanceof org.jetbrains.kotlin.ir.expressions.IrGetValue;

        if $z2 == 0 goto label5;

        $r5 = (org.jetbrains.kotlin.ir.expressions.IrGetValue) r1;

        $r6 = interfaceinvoke $r5.<org.jetbrains.kotlin.ir.expressions.IrGetValue: org.jetbrains.kotlin.ir.symbols.IrValueSymbol getSymbol()>();

        r3 = interfaceinvoke $r6.<org.jetbrains.kotlin.ir.symbols.IrValueSymbol: org.jetbrains.kotlin.ir.declarations.IrValueDeclaration getOwner()>();

        z0 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean extractParamMetaFromScopes(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta,org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)>(r2, r3);

        if z0 != 0 goto label5;

        r4 = r3;

        $z3 = r4 instanceof org.jetbrains.kotlin.ir.declarations.IrVariable;

        if $z3 == 0 goto label4;

        $r7 = (org.jetbrains.kotlin.ir.declarations.IrVariable) r3;

        $z4 = interfaceinvoke $r7.<org.jetbrains.kotlin.ir.declarations.IrVariable: boolean isConst()>();

        if $z4 == 0 goto label2;

        virtualinvoke r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: void setStatic(boolean)>(1);

        goto label5;

     label2:
        $r8 = (org.jetbrains.kotlin.ir.declarations.IrVariable) r3;

        $z5 = interfaceinvoke $r8.<org.jetbrains.kotlin.ir.declarations.IrVariable: boolean isVar()>();

        if $z5 != 0 goto label3;

        $r9 = (org.jetbrains.kotlin.ir.declarations.IrVariable) r3;

        $r10 = interfaceinvoke $r9.<org.jetbrains.kotlin.ir.declarations.IrVariable: org.jetbrains.kotlin.ir.expressions.IrExpression getInitializer()>();

        if $r10 == null goto label3;

        $r11 = (org.jetbrains.kotlin.ir.declarations.IrVariable) r3;

        $r12 = interfaceinvoke $r11.<org.jetbrains.kotlin.ir.declarations.IrVariable: org.jetbrains.kotlin.ir.expressions.IrExpression getInitializer()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r12);

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void populateParamMeta(org.jetbrains.kotlin.ir.expressions.IrExpression,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta)>($r12, r2);

     label3:
        goto label5;

     label4:
        goto label5;

     label5:
        return;
    }

    public org.jetbrains.kotlin.ir.expressions.IrExpression visitBlock(org.jetbrains.kotlin.ir.expressions.IrBlock)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.expressions.IrBlock r1, $r16, $r18, $r21, $r24;
        org.jetbrains.kotlin.ir.expressions.IrStatementOrigin r2, $r10, $r34;
        java.util.List r3, $r17, $r19, $r22, $r25, $r27, $r35, $r38;
        boolean z0, $z1, $z2, $z3, $z5, $z6, z7, z8, z9, z11, z12, $z15, z17, $z19, z20, z23, z24;
        org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$FOR_LOOP $r4, $r31;
        int $i0, $i1;
        java.lang.Object $r5, $r9, $r20, $r23, $r26;
        org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin $r6;
        org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin$FOR_LOOP_ITERATOR $r7;
        org.jetbrains.kotlin.ir.visitors.IrElementTransformer $r8, $r12;
        org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$FOR_LOOP_INNER_WHILE $r11;
        java.lang.IllegalStateException $r13;
        java.lang.String $r14, $r44, $r47, $r51, $r55, r57, $r59, r62, r65, $r70;
        java.lang.Throwable $r15, $r45, $r48, $r52, $r56;
        org.jetbrains.kotlin.ir.expressions.IrExpression[] $r28;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r29, $r36, $r37, $r63, $r71;
        org.jetbrains.kotlin.ir.types.IrType $r30;
        org.jetbrains.kotlin.ir.IrStatement[] $r32;
        org.jetbrains.kotlin.ir.IrStatement $r33, r60;
        java.util.Collection $r39;
        java.lang.NullPointerException $r40, $r41, $r42, $r49, $r53;
        java.lang.IllegalArgumentException $r43, $r46, $r50, $r54;
        org.jetbrains.kotlin.ir.declarations.IrVariable r58;
        org.jetbrains.kotlin.ir.expressions.IrWhileLoop r61, r67;
        org.jetbrains.kotlin.ir.expressions.IrContainerExpression $r64;
        org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase $r66, $r68, r69;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrBlock;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "expression");

        r2 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrBlock: org.jetbrains.kotlin.ir.expressions.IrStatementOrigin getOrigin()>();

        $r4 = <org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$FOR_LOOP: org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$FOR_LOOP INSTANCE>;

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r2, $r4);

        if $z1 == 0 goto label18;

        r3 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrBlock: java.util.List getStatements()>();

        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        if $i0 != 2 goto label01;

        $z6 = 1;

        goto label02;

     label01:
        $z6 = 0;

     label02:
        z7 = $z6;

        z8 = 0;

        z9 = 0;

        if z7 != 0 goto label03;

        r57 = "Expected 2 statements in for-loop block";

        $r54 = new java.lang.IllegalArgumentException;

        $r55 = virtualinvoke r57.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r54.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r55);

        $r56 = (java.lang.Throwable) $r54;

        throw $r56;

     label03:
        $r5 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0);

        if $r5 != null goto label04;

        $r53 = new java.lang.NullPointerException;

        specialinvoke $r53.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type org.jetbrains.kotlin.ir.declarations.IrVariable");

        throw $r53;

     label04:
        r58 = (org.jetbrains.kotlin.ir.declarations.IrVariable) $r5;

        $r6 = interfaceinvoke r58.<org.jetbrains.kotlin.ir.declarations.IrVariable: org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin getOrigin()>();

        $r7 = <org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin$FOR_LOOP_ITERATOR: org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin$FOR_LOOP_ITERATOR INSTANCE>;

        z11 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r6, $r7);

        z12 = 0;

        if z11 != 0 goto label05;

        $r59 = "Expected FOR_LOOP_ITERATOR origin for iterator variable";

        $r50 = new java.lang.IllegalArgumentException;

        $r51 = virtualinvoke $r59.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r50.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r51);

        $r52 = (java.lang.Throwable) $r50;

        throw $r52;

     label05:
        $r8 = (org.jetbrains.kotlin.ir.visitors.IrElementTransformer) r0;

        r60 = interfaceinvoke r58.<org.jetbrains.kotlin.ir.declarations.IrVariable: org.jetbrains.kotlin.ir.IrStatement transform(org.jetbrains.kotlin.ir.visitors.IrElementTransformer,java.lang.Object)>($r8, null);

        $r9 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(1);

        if $r9 != null goto label06;

        $r49 = new java.lang.NullPointerException;

        specialinvoke $r49.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type org.jetbrains.kotlin.ir.expressions.IrWhileLoop");

        throw $r49;

     label06:
        r61 = (org.jetbrains.kotlin.ir.expressions.IrWhileLoop) $r9;

        $r10 = interfaceinvoke r61.<org.jetbrains.kotlin.ir.expressions.IrWhileLoop: org.jetbrains.kotlin.ir.expressions.IrStatementOrigin getOrigin()>();

        $r11 = <org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$FOR_LOOP_INNER_WHILE: org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$FOR_LOOP_INNER_WHILE INSTANCE>;

        $z15 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r10, $r11);

        z17 = 0;

        if $z15 != 0 goto label07;

        r62 = "Expected FOR_LOOP_INNER_WHILE origin for while loop";

        $r46 = new java.lang.IllegalArgumentException;

        $r47 = virtualinvoke r62.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r46.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r47);

        $r48 = (java.lang.Throwable) $r46;

        throw $r48;

     label07:
        $r12 = (org.jetbrains.kotlin.ir.visitors.IrElementTransformer) r0;

        $r63 = interfaceinvoke r61.<org.jetbrains.kotlin.ir.expressions.IrWhileLoop: org.jetbrains.kotlin.ir.expressions.IrExpression transform(org.jetbrains.kotlin.ir.visitors.IrElementTransformer,java.lang.Object)>($r12, null);

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r60, r58);

        if $z2 == 0 goto label08;

        $z5 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r63, r61);

        if $z5 == 0 goto label08;

        $r64 = (org.jetbrains.kotlin.ir.expressions.IrContainerExpression) r1;

        goto label17;

     label08:
        $z3 = $r63 instanceof org.jetbrains.kotlin.ir.expressions.IrBlock;

        if $z3 == 0 goto label15;

        $r16 = (org.jetbrains.kotlin.ir.expressions.IrBlock) $r63;

        $r17 = interfaceinvoke $r16.<org.jetbrains.kotlin.ir.expressions.IrBlock: java.util.List getStatements()>();

        $i1 = interfaceinvoke $r17.<java.util.List: int size()>();

        if $i1 != 3 goto label09;

        $z19 = 1;

        goto label10;

     label09:
        $z19 = 0;

     label10:
        z20 = 0;

        z23 = 0;

        if $z19 != 0 goto label11;

        z0 = 0;

        r65 = "Failed requirement.";

        $r43 = new java.lang.IllegalArgumentException;

        $r44 = virtualinvoke r65.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r43.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r44);

        $r45 = (java.lang.Throwable) $r43;

        throw $r45;

     label11:
        $r18 = (org.jetbrains.kotlin.ir.expressions.IrBlock) $r63;

        $r19 = interfaceinvoke $r18.<org.jetbrains.kotlin.ir.expressions.IrBlock: java.util.List getStatements()>();

        $r20 = interfaceinvoke $r19.<java.util.List: java.lang.Object get(int)>(0);

        if $r20 != null goto label12;

        $r42 = new java.lang.NullPointerException;

        specialinvoke $r42.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase");

        throw $r42;

     label12:
        $r66 = (org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase) $r20;

        $r21 = (org.jetbrains.kotlin.ir.expressions.IrBlock) $r63;

        $r22 = interfaceinvoke $r21.<org.jetbrains.kotlin.ir.expressions.IrBlock: java.util.List getStatements()>();

        $r23 = interfaceinvoke $r22.<java.util.List: java.lang.Object get(int)>(1);

        if $r23 != null goto label13;

        $r41 = new java.lang.NullPointerException;

        specialinvoke $r41.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type org.jetbrains.kotlin.ir.expressions.IrWhileLoop");

        throw $r41;

     label13:
        r67 = (org.jetbrains.kotlin.ir.expressions.IrWhileLoop) $r23;

        $r24 = (org.jetbrains.kotlin.ir.expressions.IrBlock) $r63;

        $r25 = interfaceinvoke $r24.<org.jetbrains.kotlin.ir.expressions.IrBlock: java.util.List getStatements()>();

        $r26 = interfaceinvoke $r25.<java.util.List: java.lang.Object get(int)>(2);

        if $r26 != null goto label14;

        $r40 = new java.lang.NullPointerException;

        specialinvoke $r40.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase");

        throw $r40;

     label14:
        $r68 = (org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase) $r26;

        r69 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase mutableStatementContainer()>();

        $r27 = virtualinvoke r69.<org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase: java.util.List getStatements()>();

        $r28 = newarray (org.jetbrains.kotlin.ir.expressions.IrExpression)[3];

        $r29 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r66;

        $r28[0] = $r29;

        $r30 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrBlock: org.jetbrains.kotlin.ir.types.IrType getType()>();

        $r31 = <org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$FOR_LOOP: org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$FOR_LOOP INSTANCE>;

        $r34 = (org.jetbrains.kotlin.ir.expressions.IrStatementOrigin) $r31;

        $r32 = newarray (org.jetbrains.kotlin.ir.IrStatement)[2];

        $r32[0] = r60;

        $r33 = (org.jetbrains.kotlin.ir.IrStatement) r67;

        $r32[1] = $r33;

        $r35 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object[])>($r32);

        $r36 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irBlock(org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,java.util.List)>($r30, $r34, $r35);

        $r28[1] = $r36;

        $r37 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r68;

        $r28[2] = $r37;

        $r38 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object[])>($r28);

        $r39 = (java.util.Collection) $r38;

        interfaceinvoke $r27.<java.util.List: boolean addAll(java.util.Collection)>($r39);

        goto label16;

     label15:
        $r70 = "Expected transformed loop to be an IrBlock";

        z24 = 0;

        $r13 = new java.lang.IllegalStateException;

        $r14 = virtualinvoke $r70.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        $r15 = (java.lang.Throwable) $r13;

        throw $r15;

     label16:
        $r64 = (org.jetbrains.kotlin.ir.expressions.IrContainerExpression) r69;

     label17:
        $r71 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r64;

        goto label19;

     label18:
        $r71 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.IrExpression visitBlock(org.jetbrains.kotlin.ir.expressions.IrBlock)>(r1);

     label19:
        return $r71;
    }

    public org.jetbrains.kotlin.ir.expressions.IrExpression visitCall(org.jetbrains.kotlin.ir.expressions.IrCall)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0, r22, r28;
        org.jetbrains.kotlin.ir.expressions.IrCall r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r2, $r5, $r15, $r19, $r27;
        org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol $r3, $r6;
        org.jetbrains.kotlin.ir.declarations.IrFunction $r4;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r7;
        org.jetbrains.kotlin.descriptors.DeclarationDescriptor $r8;
        org.jetbrains.kotlin.name.FqName $r9, $r11;
        androidx.compose.compiler.plugins.kotlin.ComposeFqNames $r10;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$ComposableLambdaScope $r12, r32;
        int $i0, $i1, $i2, $i3;
        org.jetbrains.kotlin.ir.IrElement $r13, $r17;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope $r14, $r18;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$CaptureScope $r16, r26;
        java.lang.Throwable $r20, $r21, r25, r31;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope r23, r24, r29, r30;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrCall;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "expression");

        $z0 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean isTransformedComposableCall(org.jetbrains.kotlin.ir.expressions.IrCall)>(r1);

        if $z0 != 0 goto label01;

        $z1 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean isSyntheticComposableCall(org.jetbrains.kotlin.ir.expressions.IrCall)>(r1);

        if $z1 == 0 goto label02;

     label01:
        $r2 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression visitComposableCall(org.jetbrains.kotlin.ir.expressions.IrCall)>(r1);

        return $r2;

     label02:
        $r3 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getSymbol()>();

        $r4 = interfaceinvoke $r3.<org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol: org.jetbrains.kotlin.ir.declarations.IrFunction getOwner()>();

        $z2 = interfaceinvoke $r4.<org.jetbrains.kotlin.ir.declarations.IrFunction: boolean isInline()>();

        if $z2 == 0 goto label10;

        r22 = r0;

        $r16 = new androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$CaptureScope;

        specialinvoke $r16.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$CaptureScope: void <init>()>();

        r23 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope) $r16;

        r24 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope access$getCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer)>(r22);

        staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void access$setCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r22, r23);

        virtualinvoke r23.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: void setParent(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r24);

        $i2 = virtualinvoke r24.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: int getLevel()>();

        $i3 = $i2 + 1;

        virtualinvoke r23.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: void setLevel(int)>($i3);

     label03:
        $r17 = (org.jetbrains.kotlin.ir.IrElement) r1;

        virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void transformChildrenVoid(org.jetbrains.kotlin.ir.IrElement)>($r17);

     label04:
        staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void access$setCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r22, r24);

        goto label07;

     label05:
        $r20 := @caughtexception;

        r25 = $r20;

     label06:
        staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void access$setCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r22, r24);

        throw r25;

     label07:
        r26 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$CaptureScope) r23;

        $z5 = virtualinvoke r26.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$CaptureScope: boolean getHasCapturedComposableCall()>();

        if $z5 == 0 goto label08;

        $r19 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r1;

        $r18 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope) r26;

        $r27 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression asCoalescableGroup(org.jetbrains.kotlin.ir.expressions.IrExpression,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope)>($r19, $r18);

        goto label09;

     label08:
        $r27 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r1;

     label09:
        return $r27;

     label10:
        $z3 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean collectSourceInformation>;

        if $z3 == 0 goto label16;

        $r6 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getSymbol()>();

        $r7 = interfaceinvoke $r6.<org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol: org.jetbrains.kotlin.descriptors.FunctionDescriptor getDescriptor()>();

        $r8 = (org.jetbrains.kotlin.descriptors.DeclarationDescriptor) $r7;

        $r9 = staticinvoke <org.jetbrains.kotlin.resolve.descriptorUtil.DescriptorUtilsKt: org.jetbrains.kotlin.name.FqName getFqNameSafe(org.jetbrains.kotlin.descriptors.DeclarationDescriptor)>($r8);

        $r10 = <androidx.compose.compiler.plugins.kotlin.ComposeFqNames: androidx.compose.compiler.plugins.kotlin.ComposeFqNames INSTANCE>;

        $r11 = virtualinvoke $r10.<androidx.compose.compiler.plugins.kotlin.ComposeFqNames: org.jetbrains.kotlin.name.FqName getComposableLambda()>();

        $z4 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r9, $r11);

        if $z4 == 0 goto label16;

        r28 = r0;

        $r12 = new androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$ComposableLambdaScope;

        specialinvoke $r12.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$ComposableLambdaScope: void <init>()>();

        r29 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope) $r12;

        r30 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope access$getCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer)>(r28);

        staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void access$setCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r28, r29);

        virtualinvoke r29.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: void setParent(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r30);

        $i0 = virtualinvoke r30.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: int getLevel()>();

        $i1 = $i0 + 1;

        virtualinvoke r29.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: void setLevel(int)>($i1);

     label11:
        $r13 = (org.jetbrains.kotlin.ir.IrElement) r1;

        virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void transformChildrenVoid(org.jetbrains.kotlin.ir.IrElement)>($r13);

     label12:
        staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void access$setCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r28, r30);

        goto label15;

     label13:
        $r21 := @caughtexception;

        r31 = $r21;

     label14:
        staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void access$setCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r28, r30);

        throw r31;

     label15:
        r32 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$ComposableLambdaScope) r29;

        $r14 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope) r32;

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void recordSourceParameter(org.jetbrains.kotlin.ir.expressions.IrCall,int,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope)>(r1, 3, $r14);

        $r15 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r1;

        return $r15;

     label16:
        $r5 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.IrExpression visitCall(org.jetbrains.kotlin.ir.expressions.IrCall)>(r1);

        return $r5;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    private final org.jetbrains.kotlin.ir.expressions.IrExpression visitComposableCall(org.jetbrains.kotlin.ir.expressions.IrCall)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.expressions.IrCall r1;
        org.jetbrains.kotlin.name.FqName r2, $r7;
        org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol $r3;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r4;
        org.jetbrains.kotlin.descriptors.DeclarationDescriptor $r5;
        androidx.compose.compiler.plugins.kotlin.ComposeFqNames $r6;
        boolean $z0;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r8;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrCall;

        $r3 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getSymbol()>();

        $r4 = interfaceinvoke $r3.<org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol: org.jetbrains.kotlin.descriptors.FunctionDescriptor getDescriptor()>();

        $r5 = (org.jetbrains.kotlin.descriptors.DeclarationDescriptor) $r4;

        r2 = staticinvoke <org.jetbrains.kotlin.resolve.descriptorUtil.DescriptorUtilsKt: org.jetbrains.kotlin.name.FqName getFqNameSafe(org.jetbrains.kotlin.descriptors.DeclarationDescriptor)>($r5);

        $r6 = <androidx.compose.compiler.plugins.kotlin.ComposeFqNames: androidx.compose.compiler.plugins.kotlin.ComposeFqNames INSTANCE>;

        $r7 = virtualinvoke $r6.<androidx.compose.compiler.plugins.kotlin.ComposeFqNames: org.jetbrains.kotlin.name.FqName getKey()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r2, $r7);

        if $z0 == 0 goto label1;

        $r8 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression visitKeyCall(org.jetbrains.kotlin.ir.expressions.IrCall)>(r1);

        goto label2;

     label1:
        $r8 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression visitNormalComposableCall(org.jetbrains.kotlin.ir.expressions.IrCall)>(r1);

     label2:
        return $r8;
    }

    private final org.jetbrains.kotlin.ir.expressions.IrExpression visitNormalComposableCall(org.jetbrains.kotlin.ir.expressions.IrCall)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.expressions.IrCall r1;
        org.jetbrains.kotlin.ir.declarations.IrFunction r2, $r4, $r25;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15, i16, $i17, $i18, $i19, $i20, $i21, $i22, i23, $i24, $i25, i26, i27, $i28, i29, $i30, i31, i32, i33;
        org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol $r3, $r6, $r24;
        boolean $z1, $z2, $z3, $z4, $z5, $z6, $z9, $z10, $z13, $z14, $z15, $z16, z17, z18, z19, $z21, $z22, z24, $z26, z27, $z28, $z29, z30, z34, z35, z36, z42, z43, z45, z47, $z48, z51, z53, z55, $z56, z57;
        org.jetbrains.kotlin.ir.IrElement $r5, $r16;
        java.util.List $r7, $r8, $r12, $r18, $r26, $r34, $r60, r69, r84, r85;
        kotlin.ranges.IntRange $r9;
        java.util.ArrayList $r10, $r11, $r13;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r14, $r15, $r17, r68, $r75, r77, $r86, r90, r91, r94, r99;
        java.lang.Iterable $r19, $r56, r64, r70, r71;
        java.lang.Object $r20, $r27, $r47, r58, r74, $r79, $r98;
        java.lang.Number $r21;
        org.jetbrains.kotlin.ir.types.IrType $r28;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta $r29, r89, $r92, $r93, $r95, r96;
        java.lang.IllegalStateException $r30, $r37, $r40;
        java.lang.String $r31, $r38, $r41, $r45, $r49, r63, r78, r80, r88;
        java.lang.Throwable $r32, $r39, $r42, $r46;
        java.lang.Integer $r33, $r36, r81;
        org.jetbrains.kotlin.ir.expressions.IrConst $r35;
        kotlin.collections.IntIterator $r43;
        java.lang.IllegalArgumentException $r44;
        org.jetbrains.kotlin.name.Name $r48, $r51, $r53;
        java.lang.CharSequence $r50;
        androidx.compose.compiler.plugins.kotlin.KtxNameConventions $r52;
        java.util.Collection $r54, r65, r67, $r72, r76, r82, $r83;
        java.util.Iterator r57, $r66, r73, $r97;
        org.jetbrains.kotlin.ir.declarations.IrValueParameter r59, r62, $r87;
        java.util.ListIterator r61;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrCall;

        $r3 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getSymbol()>();

        $r4 = interfaceinvoke $r3.<org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol: org.jetbrains.kotlin.ir.declarations.IrFunction getOwner()>();

        $z1 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean shouldElideGroups(org.jetbrains.kotlin.ir.declarations.IrFunction)>($r4);

        if $z1 != 0 goto label01;

        $z16 = 1;

        goto label02;

     label01:
        $z16 = 0;

     label02:
        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void encounteredComposableCall(boolean)>($z16);

        $r5 = (org.jetbrains.kotlin.ir.IrElement) r1;

        virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void transformChildrenVoid(org.jetbrains.kotlin.ir.IrElement)>($r5);

        $r6 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getSymbol()>();

        r2 = interfaceinvoke $r6.<org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol: org.jetbrains.kotlin.ir.declarations.IrFunction getOwner()>();

        $r7 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.declarations.IrFunction: java.util.List getValueParameters()>();

        i0 = interfaceinvoke $r7.<java.util.List: int size()>();

        z17 = 0;

        z18 = 0;

        z19 = 0;

        $z2 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean isInvoke(org.jetbrains.kotlin.ir.expressions.IrCall)>(r1);

        if $z2 == 0 goto label03;

        i14 = 0;

        $i11 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformerKt: int getThisParamCount(org.jetbrains.kotlin.ir.declarations.IrFunction)>(r2);

        $i12 = i0 + $i11;

        i15 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformerKt: int changedParamCountFromTotal(int)>($i12);

        $i13 = i0 - 1;

        i16 = $i13 - i15;

        goto label16;

     label03:
        $r8 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.declarations.IrFunction: java.util.List getValueParameters()>();

        $r56 = (java.lang.Iterable) $r8;

        $z3 = $r56 instanceof java.util.Collection;

        if $z3 == 0 goto label04;

        $r54 = (java.util.Collection) $r56;

        $z15 = interfaceinvoke $r54.<java.util.Collection: boolean isEmpty()>();

        if $z15 == 0 goto label04;

        $z21 = 0;

        goto label07;

     label04:
        r57 = interfaceinvoke $r56.<java.lang.Iterable: java.util.Iterator iterator()>();

     label05:
        $z22 = interfaceinvoke r57.<java.util.Iterator: boolean hasNext()>();

        if $z22 == 0 goto label06;

        r58 = interfaceinvoke r57.<java.util.Iterator: java.lang.Object next()>();

        r59 = (org.jetbrains.kotlin.ir.declarations.IrValueParameter) r58;

        $r51 = interfaceinvoke r59.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.name.Name getName()>();

        $r52 = <androidx.compose.compiler.plugins.kotlin.KtxNameConventions: androidx.compose.compiler.plugins.kotlin.KtxNameConventions INSTANCE>;

        $r53 = virtualinvoke $r52.<androidx.compose.compiler.plugins.kotlin.KtxNameConventions: org.jetbrains.kotlin.name.Name getDEFAULT_PARAMETER()>();

        $z14 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r51, $r53);

        if $z14 == 0 goto label05;

        $z21 = 1;

        goto label07;

     label06:
        $z21 = 0;

     label07:
        z24 = $z21;

        $r60 = interfaceinvoke r2.<org.jetbrains.kotlin.ir.declarations.IrFunction: java.util.List getValueParameters()>();

        $i17 = interfaceinvoke $r60.<java.util.List: int size()>();

        r61 = interfaceinvoke $r60.<java.util.List: java.util.ListIterator listIterator(int)>($i17);

     label08:
        $z26 = interfaceinvoke r61.<java.util.ListIterator: boolean hasPrevious()>();

        if $z26 == 0 goto label12;

        $r47 = interfaceinvoke r61.<java.util.ListIterator: java.lang.Object previous()>();

        r62 = (org.jetbrains.kotlin.ir.declarations.IrValueParameter) $r47;

        z27 = 0;

        $r48 = interfaceinvoke r62.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.name.Name getName()>();

        $r49 = virtualinvoke $r48.<org.jetbrains.kotlin.name.Name: java.lang.String asString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r49, "it.name.asString()");

        $r50 = (java.lang.CharSequence) $r49;

        $z13 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.CharSequence,char,boolean,int,java.lang.Object)>($r50, 36, 0, 2, null);

        if $z13 != 0 goto label09;

        $z28 = 1;

        goto label10;

     label09:
        $z28 = 0;

     label10:
        if $z28 == 0 goto label11;

        $i18 = interfaceinvoke r61.<java.util.ListIterator: int nextIndex()>();

        goto label13;

     label11:
        goto label08;

     label12:
        $i18 = -1;

     label13:
        i16 = $i18 + 1;

        if z24 == 0 goto label14;

        $i19 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformerKt: int defaultParamCount(int)>(i16);

        goto label15;

     label14:
        $i19 = 0;

     label15:
        i14 = $i19;

        $i2 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformerKt: int getThisParamCount(org.jetbrains.kotlin.ir.declarations.IrFunction)>(r2);

        i15 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformerKt: int changedParamCount(int,int)>(i16, $i2);

     label16:
        $i20 = i16 + 1;

        $i21 = $i20 + i15;

        $i22 = $i21 + i14;

        if $i22 != i0 goto label17;

        $z29 = 1;

        goto label18;

     label17:
        $z29 = 0;

     label18:
        z30 = $z29;

        z34 = 0;

        if z30 != 0 goto label19;

        z35 = 0;

        r63 = "Failed requirement.";

        $r44 = new java.lang.IllegalArgumentException;

        $r45 = virtualinvoke r63.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r44.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r45);

        $r46 = (java.lang.Throwable) $r44;

        throw $r46;

     label19:
        i23 = i16;

        $i24 = i23 + 1;

        $i25 = $i24 + i15;

        $r9 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntRange until(int,int)>($i25, i0);

        r64 = (java.lang.Iterable) $r9;

        z36 = 0;

        $r10 = new java.util.ArrayList;

        $i3 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>(r64, 10);

        specialinvoke $r10.<java.util.ArrayList: void <init>(int)>($i3);

        r65 = (java.util.Collection) $r10;

        $r66 = interfaceinvoke r64.<java.lang.Iterable: java.util.Iterator iterator()>();

     label20:
        $z4 = interfaceinvoke $r66.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label21;

        $r43 = (kotlin.collections.IntIterator) $r66;

        i26 = virtualinvoke $r43.<kotlin.collections.IntIterator: int nextInt()>();

        i27 = i26;

        r67 = r65;

        r68 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.expressions.IrExpression getValueArgument(int)>(i27);

        interfaceinvoke r67.<java.util.Collection: boolean add(java.lang.Object)>(r68);

        goto label20;

     label21:
        r69 = (java.util.List) r65;

        r70 = (java.lang.Iterable) r69;

        r71 = r70;

        $r11 = new java.util.ArrayList;

        $i4 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>(r70, 10);

        specialinvoke $r11.<java.util.ArrayList: void <init>(int)>($i4);

        $r72 = (java.util.Collection) $r11;

        r73 = interfaceinvoke r71.<java.lang.Iterable: java.util.Iterator iterator()>();

     label22:
        $z5 = interfaceinvoke r73.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label27;

        r74 = interfaceinvoke r73.<java.util.Iterator: java.lang.Object next()>();

        $r75 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r74;

        r76 = $r72;

        r77 = $r75;

        $z9 = r77 instanceof org.jetbrains.kotlin.ir.expressions.IrConst;

        if $z9 != 0 goto label23;

        r78 = "Expected default mask to be a const";

        z42 = 0;

        $r40 = new java.lang.IllegalStateException;

        $r41 = virtualinvoke r78.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r40.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r41);

        $r42 = (java.lang.Throwable) $r40;

        throw $r42;

     label23:
        $r35 = (org.jetbrains.kotlin.ir.expressions.IrConst) $r75;

        $r79 = interfaceinvoke $r35.<org.jetbrains.kotlin.ir.expressions.IrConst: java.lang.Object getValue()>();

        $z10 = $r79 instanceof java.lang.Integer;

        if $z10 != 0 goto label24;

        $r79 = null;

     label24:
        $r36 = (java.lang.Integer) $r79;

        if $r36 == null goto label25;

        $i10 = virtualinvoke $r36.<java.lang.Integer: int intValue()>();

        goto label26;

     label25:
        r80 = "Expected default mask to be an Int";

        z43 = 0;

        $r37 = new java.lang.IllegalStateException;

        $r38 = virtualinvoke r80.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r37.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r38);

        $r39 = (java.lang.Throwable) $r37;

        throw $r39;

     label26:
        r81 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10);

        interfaceinvoke r76.<java.util.Collection: boolean add(java.lang.Object)>(r81);

        goto label22;

     label27:
        $r12 = (java.util.List) $r72;

        r82 = (java.util.Collection) $r12;

        $z6 = interfaceinvoke r82.<java.util.Collection: boolean isEmpty()>();

        if $z6 == 0 goto label28;

        z45 = 0;

        $r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r34 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r33);

        $r83 = (java.util.Collection) $r34;

        goto label29;

     label28:
        $r83 = r82;

     label29:
        r84 = (java.util.List) $r83;

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        r85 = (java.util.List) $r13;

        $i28 = 0;

        i29 = i16;

     label30:
        if $i28 >= i29 goto label36;

        $r86 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.expressions.IrExpression getValueArgument(int)>($i28);

        if $r86 != null goto label32;

        $r24 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getSymbol()>();

        $r25 = interfaceinvoke $r24.<org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol: org.jetbrains.kotlin.ir.declarations.IrFunction getOwner()>();

        $r26 = interfaceinvoke $r25.<org.jetbrains.kotlin.ir.declarations.IrFunction: java.util.List getValueParameters()>();

        $r27 = interfaceinvoke $r26.<java.util.List: java.lang.Object get(int)>($i28);

        $r87 = (org.jetbrains.kotlin.ir.declarations.IrValueParameter) $r27;

        $r28 = interfaceinvoke $r87.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.ir.types.IrType getVarargElementType()>();

        if $r28 != null goto label31;

        r88 = "Unexpected null argument for composable call";

        z47 = 0;

        $r30 = new java.lang.IllegalStateException;

        $r31 = virtualinvoke r88.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r30.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r31);

        $r32 = (java.lang.Throwable) $r30;

        throw $r32;

     label31:
        $r29 = new androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta;

        specialinvoke $r29.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: void <init>(boolean,boolean,boolean,boolean,int,androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue,int,kotlin.jvm.internal.DefaultConstructorMarker)>(1, 0, 0, 0, 0, null, 62, null);

        interfaceinvoke r85.<java.util.List: boolean add(java.lang.Object)>($r29);

        goto label35;

     label32:
        $i30 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformerKt: int defaultsBitIndex(int)>($i28);

        $i7 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformerKt: int defaultsParamIndex(int)>($i28);

        $r20 = interfaceinvoke r84.<java.util.List: java.lang.Object get(int)>($i7);

        $r21 = (java.lang.Number) $r20;

        i31 = virtualinvoke $r21.<java.lang.Number: int intValue()>();

        $i8 = 1 << $i30;

        $i9 = i31 & $i8;

        if $i9 != 0 goto label33;

        $z48 = 1;

        goto label34;

     label33:
        $z48 = 0;

     label34:
        r89 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta paramMetaOf(org.jetbrains.kotlin.ir.expressions.IrExpression,boolean)>($r86, $z48);

        interfaceinvoke r85.<java.util.List: boolean add(java.lang.Object)>(r89);

     label35:
        $i28 = $i28 + 1;

        goto label30;

     label36:
        $r14 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.expressions.IrExpression getExtensionReceiver()>();

        if $r14 == null goto label37;

        r90 = $r14;

        r91 = r90;

        z51 = 0;

        $r92 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta paramMetaOf(org.jetbrains.kotlin.ir.expressions.IrExpression,boolean)>(r91, 1);

        goto label38;

     label37:
        $r92 = null;

     label38:
        $r93 = $r92;

        $r15 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.expressions.IrExpression getDispatchReceiver()>();

        if $r15 == null goto label39;

        z53 = 0;

        r94 = $r15;

        $r95 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta paramMetaOf(org.jetbrains.kotlin.ir.expressions.IrExpression,boolean)>(r94, 1);

        goto label40;

     label39:
        $r95 = null;

     label40:
        r96 = $r95;

        $r18 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: java.util.List buildChangedParamsForCall(java.util.List,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta)>(r85, $r93, r96);

        z55 = 0;

        i32 = 0;

        $r19 = (java.lang.Iterable) $r18;

        $r97 = interfaceinvoke $r19.<java.lang.Iterable: java.util.Iterator iterator()>();

     label41:
        $z56 = interfaceinvoke $r97.<java.util.Iterator: boolean hasNext()>();

        if $z56 == 0 goto label43;

        $r98 = interfaceinvoke $r97.<java.util.Iterator: java.lang.Object next()>();

        $i5 = i32;

        i32 = i32 + 1;

        i33 = $i5;

        z57 = 0;

        if i33 >= 0 goto label42;

        staticinvoke <kotlin.collections.CollectionsKt: void throwIndexOverflow()>();

     label42:
        r99 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r98;

        i1 = i33;

        $i6 = $i24 + i1;

        interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrCall: void putValueArgument(int,org.jetbrains.kotlin.ir.expressions.IrExpression)>($i6, r99);

        goto label41;

     label43:
        $r16 = (org.jetbrains.kotlin.ir.IrElement) r1;

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void recordCallInSource(org.jetbrains.kotlin.ir.IrElement)>($r16);

        $r17 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r1;

        return $r17;
    }

    private final boolean canElideRememberGroup()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope r1, r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BranchScope $r2;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope $r3, $r4;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r5 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope currentScope>;

     label1:
        if r5 == null goto label9;

        r1 = r5;

        $z0 = r1 instanceof androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        if $z0 == 0 goto label5;

        $r3 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope) r5;

        $z3 = virtualinvoke $r3.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: boolean getHasComposableCallsWithGroups()>();

        if $z3 == 0 goto label2;

        $z5 = 0;

        goto label4;

     label2:
        $r4 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope) r5;

        $z4 = virtualinvoke $r4.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: boolean isInlinedLambda()>();

        if $z4 == 0 goto label3;

        r5 = virtualinvoke r5.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope getParent()>();

        goto label1;

     label3:
        $z5 = 1;

     label4:
        return $z5;

     label5:
        $z1 = r1 instanceof androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BranchScope;

        if $z1 == 0 goto label8;

        $r2 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BranchScope) r5;

        $z2 = virtualinvoke $r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BranchScope: boolean getHasComposableCallsWithGroups()>();

        if $z2 != 0 goto label6;

        $z6 = 1;

        goto label7;

     label6:
        $z6 = 0;

     label7:
        return $z6;

     label8:
        return 0;

     label9:
        return 0;
    }

    private final org.jetbrains.kotlin.ir.expressions.IrExpression visitRememberCall(org.jetbrains.kotlin.ir.expressions.IrCall)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.expressions.IrCall r1;
        java.util.List r2, $r16, $r35, $r47, r55, r59;
        java.util.Iterator r3, $r64, r70;
        java.lang.Object r4, r5, $r21, $r28, $r36, r65, $r71;
        org.jetbrains.kotlin.ir.expressions.IrVarargElement r6, $r58;
        org.jetbrains.kotlin.ir.expressions.IrExpression r7, r8, $r14, $r19, $r20, $r27, $r30, $r31, $r37, $r50, r54, $r60, $r66, r68, $r72, $r73, r74;
        boolean z3, z4, $z6, $z7, $z8, $z9, $z10, $z12, $z13, $z14, $z16, $z18, $z19, $z21, z22, z23, z27, z30, z31;
        java.util.ArrayList $r9, $r15, $r48;
        java.util.Collection $r10, $r49, r56, $r63, r67;
        org.jetbrains.kotlin.ir.IrElement $r11, $r26;
        org.jetbrains.kotlin.ir.visitors.IrElementTransformer $r12, $r18, $r29;
        int $i0, $i1, $i2, i3, $i4, i5, $i6;
        org.jetbrains.kotlin.ir.types.IrType $r17;
        org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl $r22;
        java.lang.UnsupportedOperationException $r23;
        java.lang.Throwable $r24, $r40;
        org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl $r25;
        org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol $r33;
        org.jetbrains.kotlin.ir.declarations.IrFunction $r34;
        java.lang.IllegalStateException $r38;
        java.lang.String $r39, $r42, $r45, $r53;
        org.jetbrains.kotlin.name.Name $r41, $r44;
        java.lang.CharSequence $r43;
        org.jetbrains.kotlin.ir.expressions.IrVararg $r46;
        org.jetbrains.kotlin.ir.expressions.IrFunctionExpression r51;
        org.jetbrains.kotlin.ir.declarations.IrValueParameter r52;
        java.lang.Iterable $r57, $r61, r62, $r69;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrCall;

        z22 = 0;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r2 = (java.util.List) $r9;

        z23 = 0;

        r51 = (org.jetbrains.kotlin.ir.expressions.IrFunctionExpression) null;

        i3 = 0;

        $i4 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrCall: int getValueArgumentsCount()>();

     label01:
        if i3 >= $i4 goto label13;

        $r33 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getSymbol()>();

        $r34 = interfaceinvoke $r33.<org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol: org.jetbrains.kotlin.ir.declarations.IrFunction getOwner()>();

        $r35 = interfaceinvoke $r34.<org.jetbrains.kotlin.ir.declarations.IrFunction: java.util.List getValueParameters()>();

        $r36 = interfaceinvoke $r35.<java.util.List: java.lang.Object get(int)>(i3);

        r52 = (org.jetbrains.kotlin.ir.declarations.IrValueParameter) $r36;

        $r37 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.expressions.IrExpression getValueArgument(int)>(i3);

        if $r37 == null goto label02;

        goto label03;

     label02:
        $r53 = "Unexpected null argument found on key call";

        $r38 = new java.lang.IllegalStateException;

        $r39 = virtualinvoke $r53.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r38.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r39);

        $r40 = (java.lang.Throwable) $r38;

        throw $r40;

     label03:
        r54 = $r37;

        $r41 = interfaceinvoke r52.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.name.Name getName()>();

        $r42 = virtualinvoke $r41.<org.jetbrains.kotlin.name.Name: java.lang.String asString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r42, "param.name.asString()");

        $r43 = (java.lang.CharSequence) $r42;

        $z12 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.CharSequence,char,boolean,int,java.lang.Object)>($r43, 36, 0, 2, null);

        if $z12 == 0 goto label04;

        goto label13;

     label04:
        $r44 = interfaceinvoke r52.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.name.Name getName()>();

        $r45 = virtualinvoke $r44.<org.jetbrains.kotlin.name.Name: java.lang.String getIdentifier()>();

        $z13 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r45, "calculation");

        if $z13 == 0 goto label05;

        $z21 = r54 instanceof org.jetbrains.kotlin.ir.expressions.IrFunctionExpression;

        if $z21 == 0 goto label05;

        r51 = (org.jetbrains.kotlin.ir.expressions.IrFunctionExpression) r54;

        goto label12;

     label05:
        $z14 = r54 instanceof org.jetbrains.kotlin.ir.expressions.IrVararg;

        if $z14 == 0 goto label11;

        $r46 = (org.jetbrains.kotlin.ir.expressions.IrVararg) r54;

        $r47 = interfaceinvoke $r46.<org.jetbrains.kotlin.ir.expressions.IrVararg: java.util.List getElements()>();

        r55 = r2;

        $r48 = new java.util.ArrayList;

        specialinvoke $r48.<java.util.ArrayList: void <init>()>();

        r56 = (java.util.Collection) $r48;

        $r57 = (java.lang.Iterable) $r47;

        r3 = interfaceinvoke $r57.<java.lang.Iterable: java.util.Iterator iterator()>();

     label06:
        $z16 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z16 == 0 goto label10;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = r4;

        r6 = (org.jetbrains.kotlin.ir.expressions.IrVarargElement) r5;

        $z18 = r6 instanceof org.jetbrains.kotlin.ir.expressions.IrSpreadElement;

        if $z18 == 0 goto label07;

        z23 = 1;

     label07:
        $r58 = r6;

        $z19 = r6 instanceof org.jetbrains.kotlin.ir.expressions.IrExpression;

        if $z19 != 0 goto label08;

        $r58 = null;

     label08:
        $r50 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r58;

        if $r50 == null goto label09;

        r7 = $r50;

        z3 = 0;

        z4 = 0;

        r8 = r7;

        interfaceinvoke r56.<java.util.Collection: boolean add(java.lang.Object)>(r8);

        goto label09;

     label09:
        goto label06;

     label10:
        r59 = (java.util.List) r56;

        $r49 = (java.util.Collection) r59;

        interfaceinvoke r55.<java.util.List: boolean addAll(java.util.Collection)>($r49);

        goto label12;

     label11:
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r54);

     label12:
        i3 = i3 + 1;

        goto label01;

     label13:
        i5 = 0;

        $r10 = (java.util.Collection) r2;

        $i6 = interfaceinvoke $r10.<java.util.Collection: int size()>();

     label14:
        if i5 >= $i6 goto label15;

        $r28 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i5);

        $r30 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r28;

        $r29 = (org.jetbrains.kotlin.ir.visitors.IrElementTransformer) r0;

        $r31 = interfaceinvoke $r30.<org.jetbrains.kotlin.ir.expressions.IrExpression: org.jetbrains.kotlin.ir.expressions.IrExpression transform(org.jetbrains.kotlin.ir.visitors.IrElementTransformer,java.lang.Object)>($r29, null);

        interfaceinvoke r2.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i5, $r31);

        i5 = i5 + 1;

        goto label14;

     label15:
        if r51 != null goto label16;

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void encounteredComposableCall(boolean)>(1);

        $r26 = (org.jetbrains.kotlin.ir.IrElement) r1;

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void recordCallInSource(org.jetbrains.kotlin.ir.IrElement)>($r26);

        $r27 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r1;

        return $r27;

     label16:
        if z23 != 0 goto label17;

        $z6 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean canElideRememberGroup()>();

        if $z6 != 0 goto label18;

     label17:
        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void encounteredComposableCall(boolean)>(1);

        $r11 = (org.jetbrains.kotlin.ir.IrElement) r1;

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void recordCallInSource(org.jetbrains.kotlin.ir.IrElement)>($r11);

        $r12 = (org.jetbrains.kotlin.ir.visitors.IrElementTransformer) r0;

        interfaceinvoke r51.<org.jetbrains.kotlin.ir.expressions.IrFunctionExpression: org.jetbrains.kotlin.ir.expressions.IrExpression transform(org.jetbrains.kotlin.ir.visitors.IrElementTransformer,java.lang.Object)>($r12, null);

        $r14 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r1;

        return $r14;

     label18:
        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void encounteredComposableCall(boolean)>(0);

        $z7 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>();

        if $z7 == 0 goto label19;

        $r25 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl irConst(boolean)>(0);

        $r60 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r25;

        goto label25;

     label19:
        $r61 = (java.lang.Iterable) r2;

        z27 = 0;

        r62 = $r61;

        $r15 = new java.util.ArrayList;

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r61, 10);

        specialinvoke $r15.<java.util.ArrayList: void <init>(int)>($i0);

        $r63 = (java.util.Collection) $r15;

        $r64 = interfaceinvoke r62.<java.lang.Iterable: java.util.Iterator iterator()>();

     label20:
        $z8 = interfaceinvoke $r64.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label21;

        r65 = interfaceinvoke $r64.<java.util.Iterator: java.lang.Object next()>();

        $r66 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r65;

        r67 = $r63;

        r68 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irChangedOrInferredChanged(org.jetbrains.kotlin.ir.expressions.IrExpression)>($r66);

        interfaceinvoke r67.<java.util.Collection: boolean add(java.lang.Object)>(r68);

        goto label20;

     label21:
        $r16 = (java.util.List) $r63;

        $r69 = (java.lang.Iterable) $r16;

        z30 = 0;

        r70 = interfaceinvoke $r69.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z9 = interfaceinvoke r70.<java.util.Iterator: boolean hasNext()>();

        if $z9 != 0 goto label22;

        $r23 = new java.lang.UnsupportedOperationException;

        specialinvoke $r23.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Empty collection can\'t be reduced.");

        $r24 = (java.lang.Throwable) $r23;

        throw $r24;

     label22:
        $r71 = interfaceinvoke r70.<java.util.Iterator: java.lang.Object next()>();

     label23:
        $z10 = interfaceinvoke r70.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label24;

        $r21 = interfaceinvoke r70.<java.util.Iterator: java.lang.Object next()>();

        $r72 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r21;

        $r73 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r71;

        z31 = 0;

        $r22 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl irBooleanOr(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r73, $r72);

        $r71 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r22;

        goto label23;

     label24:
        $r60 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r71;

     label25:
        r74 = $r60;

        $i1 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrCall: int getStartOffset()>();

        $i2 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrCall: int getEndOffset()>();

        $r17 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.types.IrType getType()>();

        $r18 = (org.jetbrains.kotlin.ir.visitors.IrElementTransformer) r0;

        $r19 = interfaceinvoke r51.<org.jetbrains.kotlin.ir.expressions.IrFunctionExpression: org.jetbrains.kotlin.ir.expressions.IrExpression transform(org.jetbrains.kotlin.ir.visitors.IrElementTransformer,java.lang.Object)>($r18, null);

        $r20 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irCache(int,int,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>($i1, $i2, $r17, r74, $r19);

        return $r20;
    }

    private final org.jetbrains.kotlin.ir.expressions.IrExpression irChangedOrInferredChanged(org.jetbrains.kotlin.ir.expressions.IrExpression)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression r1, $r4, $r7, $r8, $r9, $r10, $r11, $r14, $r15, $r16, $r19, $r21;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta r2;
        androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue r3;
        boolean $z0, $z1, $z2, $z3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        androidx.compose.compiler.plugins.kotlin.lower.ParamState $r5, $r12, $r17;
        org.jetbrains.kotlin.ir.expressions.IrConst $r6, $r13, $r18;
        org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl $r20;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrExpression;

        r2 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta paramMetaOf(org.jetbrains.kotlin.ir.expressions.IrExpression,boolean)>(r1, 1);

        r3 = virtualinvoke r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue getMaskParam()>();

        $z0 = virtualinvoke r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: boolean isStatic()>();

        if $z0 == 0 goto label1;

        $r20 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl irConst(boolean)>(0);

        $r21 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r20;

        goto label4;

     label1:
        $z1 = virtualinvoke r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: boolean isCertain()>();

        if $z1 == 0 goto label2;

        $z3 = r3 instanceof androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskVariable;

        if $z3 == 0 goto label2;

        $i6 = virtualinvoke r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: int getMaskSlot()>();

        $r16 = interfaceinvoke r3.<androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue: org.jetbrains.kotlin.ir.expressions.IrExpression irIsolateBitsAtSlot(int)>($i6);

        $r17 = <androidx.compose.compiler.plugins.kotlin.lower.ParamState: androidx.compose.compiler.plugins.kotlin.lower.ParamState Different>;

        $i7 = virtualinvoke r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: int getMaskSlot()>();

        $i8 = virtualinvoke $r17.<androidx.compose.compiler.plugins.kotlin.lower.ParamState: int bitsForSlot(int)>($i7);

        $r18 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrConst irConst(int)>($i8);

        $r19 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r18;

        $r21 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irEqual(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r16, $r19);

        goto label4;

     label2:
        $z2 = virtualinvoke r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: boolean isCertain()>();

        if $z2 == 0 goto label3;

        if r3 == null goto label3;

        $i0 = virtualinvoke r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: int getMaskSlot()>();

        $r4 = interfaceinvoke r3.<androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue: org.jetbrains.kotlin.ir.expressions.IrExpression irIsolateBitsAtSlot(int)>($i0);

        $r5 = <androidx.compose.compiler.plugins.kotlin.lower.ParamState: androidx.compose.compiler.plugins.kotlin.lower.ParamState Uncertain>;

        $i1 = virtualinvoke r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: int getMaskSlot()>();

        $i2 = virtualinvoke $r5.<androidx.compose.compiler.plugins.kotlin.lower.ParamState: int bitsForSlot(int)>($i1);

        $r6 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrConst irConst(int)>($i2);

        $r7 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r6;

        $r8 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irEqual(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r4, $r7);

        $r9 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irChanged(org.jetbrains.kotlin.ir.expressions.IrExpression)>(r1);

        $r10 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irAndAnd(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r8, $r9);

        $i3 = virtualinvoke r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: int getMaskSlot()>();

        $r11 = interfaceinvoke r3.<androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue: org.jetbrains.kotlin.ir.expressions.IrExpression irIsolateBitsAtSlot(int)>($i3);

        $r12 = <androidx.compose.compiler.plugins.kotlin.lower.ParamState: androidx.compose.compiler.plugins.kotlin.lower.ParamState Different>;

        $i4 = virtualinvoke r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: int getMaskSlot()>();

        $i5 = virtualinvoke $r12.<androidx.compose.compiler.plugins.kotlin.lower.ParamState: int bitsForSlot(int)>($i4);

        $r13 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrConst irConst(int)>($i5);

        $r14 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r13;

        $r15 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irEqual(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r11, $r14);

        $r21 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irOrOr(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r10, $r15);

        goto label4;

     label3:
        $r21 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irChanged(org.jetbrains.kotlin.ir.expressions.IrExpression)>(r1);

     label4:
        return $r21;
    }

    private final org.jetbrains.kotlin.ir.expressions.IrExpression visitKeyCall(org.jetbrains.kotlin.ir.expressions.IrCall)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0, r6, r86, r90, $r97, r102;
        org.jetbrains.kotlin.ir.expressions.IrCall r1;
        java.util.List r2, $r27, $r39, $r51, r60, r67, r96;
        org.jetbrains.kotlin.ir.expressions.IrVarargElement r3, $r66;
        org.jetbrains.kotlin.ir.expressions.IrExpression r4, r5, r8, $r19, $r21, $r23, $r24, $r25, $r26, $r28, $r41, $r54, r56, r59, r71, $r79, r94, r103, $r104;
        org.jetbrains.kotlin.ir.IrElement r7;
        java.util.ArrayList $r9, $r20, $r52;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.jetbrains.kotlin.ir.expressions.IrFunctionExpression $r10;
        org.jetbrains.kotlin.ir.declarations.IrSimpleFunction $r11;
        org.jetbrains.kotlin.ir.expressions.IrBody $r12;
        java.lang.Object $r13, $r14, $r40, r64, r65, r93;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BranchScope $r15, $r84;
        int $i0, $i1, $i2, i3, i4;
        org.jetbrains.kotlin.ir.visitors.IrElementTransformer $r16, $r30;
        org.jetbrains.kotlin.ir.types.IrType $r17, r89, $r98, r101;
        org.jetbrains.kotlin.ir.expressions.IrExpression[] $r18, r87, r88, $r99, r100;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope $r22;
        org.jetbrains.kotlin.ir.declarations.IrValueDeclaration $r29;
        java.lang.StringBuilder $r31, $r32, $r70, r72;
        java.lang.IllegalStateException $r33, $r42;
        java.lang.String $r34, $r43, $r46, $r49, $r58, r75;
        java.lang.Throwable $r35, $r44, $r55, r83;
        java.lang.Class $r36;
        org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol $r37;
        org.jetbrains.kotlin.ir.declarations.IrFunction $r38;
        org.jetbrains.kotlin.name.Name $r45, $r48;
        java.lang.CharSequence $r47;
        org.jetbrains.kotlin.ir.expressions.IrVararg $r50;
        java.util.Collection $r53, r61, $r91, r95;
        org.jetbrains.kotlin.ir.declarations.IrValueParameter r57;
        java.lang.Iterable $r62, $r85;
        java.util.Iterator r63, r92;
        org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase r68, r69, r77;
        kotlin.reflect.KClass r73, $r74;
        kotlin.Pair $r76;
        org.jetbrains.kotlin.ir.declarations.IrVariable r78;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope r81, $r82;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrCall;

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void encounteredComposableCall(boolean)>(1);

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r2 = (java.util.List) $r9;

        r56 = (org.jetbrains.kotlin.ir.expressions.IrExpression) null;

        i3 = 0;

        i4 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrCall: int getValueArgumentsCount()>();

     label01:
        if i3 >= i4 goto label12;

        $r37 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getSymbol()>();

        $r38 = interfaceinvoke $r37.<org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol: org.jetbrains.kotlin.ir.declarations.IrFunction getOwner()>();

        $r39 = interfaceinvoke $r38.<org.jetbrains.kotlin.ir.declarations.IrFunction: java.util.List getValueParameters()>();

        $r40 = interfaceinvoke $r39.<java.util.List: java.lang.Object get(int)>(i3);

        r57 = (org.jetbrains.kotlin.ir.declarations.IrValueParameter) $r40;

        $r41 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.expressions.IrExpression getValueArgument(int)>(i3);

        if $r41 == null goto label02;

        goto label03;

     label02:
        $r58 = "Unexpected null argument found on key call";

        $r42 = new java.lang.IllegalStateException;

        $r43 = virtualinvoke $r58.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r42.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r43);

        $r44 = (java.lang.Throwable) $r42;

        throw $r44;

     label03:
        r59 = $r41;

        $r45 = interfaceinvoke r57.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.name.Name getName()>();

        $r46 = virtualinvoke $r45.<org.jetbrains.kotlin.name.Name: java.lang.String asString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r46, "param.name.asString()");

        $r47 = (java.lang.CharSequence) $r46;

        $z2 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.CharSequence,char,boolean,int,java.lang.Object)>($r47, 36, 0, 2, null);

        if $z2 == 0 goto label04;

        goto label12;

     label04:
        $r48 = interfaceinvoke r57.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.name.Name getName()>();

        $r49 = virtualinvoke $r48.<org.jetbrains.kotlin.name.Name: java.lang.String getIdentifier()>();

        $z3 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r49, "block");

        if $z3 == 0 goto label05;

        r56 = r59;

        goto label11;

     label05:
        $z4 = r59 instanceof org.jetbrains.kotlin.ir.expressions.IrVararg;

        if $z4 == 0 goto label10;

        $r50 = (org.jetbrains.kotlin.ir.expressions.IrVararg) r59;

        $r51 = interfaceinvoke $r50.<org.jetbrains.kotlin.ir.expressions.IrVararg: java.util.List getElements()>();

        r60 = r2;

        $r52 = new java.util.ArrayList;

        specialinvoke $r52.<java.util.ArrayList: void <init>()>();

        r61 = (java.util.Collection) $r52;

        $r62 = (java.lang.Iterable) $r51;

        r63 = interfaceinvoke $r62.<java.lang.Iterable: java.util.Iterator iterator()>();

     label06:
        $z5 = interfaceinvoke r63.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label09;

        r64 = interfaceinvoke r63.<java.util.Iterator: java.lang.Object next()>();

        r65 = r64;

        r3 = (org.jetbrains.kotlin.ir.expressions.IrVarargElement) r65;

        $r66 = r3;

        $z6 = r3 instanceof org.jetbrains.kotlin.ir.expressions.IrExpression;

        if $z6 != 0 goto label07;

        $r66 = null;

     label07:
        $r54 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r66;

        if $r54 == null goto label08;

        r4 = $r54;

        r5 = r4;

        interfaceinvoke r61.<java.util.Collection: boolean add(java.lang.Object)>(r5);

        goto label08;

     label08:
        goto label06;

     label09:
        r67 = (java.util.List) r61;

        $r53 = (java.util.Collection) r67;

        interfaceinvoke r60.<java.util.List: boolean addAll(java.util.Collection)>($r53);

        goto label11;

     label10:
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r59);

     label11:
        i3 = i3 + 1;

        goto label01;

     label12:
        r68 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase mutableStatementContainer()>();

        r69 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase mutableStatementContainer()>();

        $z0 = r56 instanceof org.jetbrains.kotlin.ir.expressions.IrFunctionExpression;

        if $z0 != 0 goto label15;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r70 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected function expression but was ");

        if r56 == null goto label13;

        r71 = r56;

        r72 = $r70;

        $r36 = virtualinvoke r71.<java.lang.Object: java.lang.Class getClass()>();

        r73 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>($r36);

        $r70 = r72;

        $r74 = r73;

        goto label14;

     label13:
        $r74 = null;

     label14:
        $r32 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r74);

        r75 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        $r33 = new java.lang.IllegalStateException;

        $r34 = virtualinvoke r75.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r33.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r34);

        $r35 = (java.lang.Throwable) $r33;

        throw $r35;

     label15:
        $r10 = (org.jetbrains.kotlin.ir.expressions.IrFunctionExpression) r56;

        $r11 = interfaceinvoke $r10.<org.jetbrains.kotlin.ir.expressions.IrFunctionExpression: org.jetbrains.kotlin.ir.declarations.IrSimpleFunction getFunction()>();

        $r12 = interfaceinvoke $r11.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: org.jetbrains.kotlin.ir.expressions.IrBody getBody()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r12);

        $r76 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: kotlin.Pair asBodyAndResultVar(org.jetbrains.kotlin.ir.expressions.IrBody)>($r12);

        $r13 = virtualinvoke $r76.<kotlin.Pair: java.lang.Object component1()>();

        r77 = (org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase) $r13;

        $r14 = virtualinvoke $r76.<kotlin.Pair: java.lang.Object component2()>();

        r78 = (org.jetbrains.kotlin.ir.declarations.IrVariable) $r14;

        $r79 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r77;

        $r15 = new androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BranchScope;

        specialinvoke $r15.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BranchScope: void <init>()>();

        r81 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope) $r15;

        $r82 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope access$getCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer)>(r0);

        staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void access$setCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r0, r81);

        virtualinvoke r81.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: void setParent(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>($r82);

        $i0 = virtualinvoke $r82.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: int getLevel()>();

        $i1 = $i0 + 1;

        virtualinvoke r81.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: void setLevel(int)>($i1);

     label16:
        $r16 = (org.jetbrains.kotlin.ir.visitors.IrElementTransformer) r0;

        interfaceinvoke $r79.<org.jetbrains.kotlin.ir.expressions.IrExpression: org.jetbrains.kotlin.ir.expressions.IrExpression transform(org.jetbrains.kotlin.ir.visitors.IrElementTransformer,java.lang.Object)>($r16, null);

     label17:
        staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void access$setCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r0, $r82);

        goto label20;

     label18:
        $r55 := @caughtexception;

        r83 = $r55;

     label19:
        staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void access$setCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r0, $r82);

        throw r83;

     label20:
        $r84 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BranchScope) r81;

        $r17 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.types.IrType getType()>();

        $r18 = newarray (org.jetbrains.kotlin.ir.expressions.IrExpression)[6];

        $r19 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r68;

        $r18[0] = $r19;

        $r85 = (java.lang.Iterable) r2;

        r6 = r0;

        r7 = (org.jetbrains.kotlin.ir.IrElement) r1;

        r86 = r0;

        r87 = $r18;

        r88 = $r18;

        r89 = $r17;

        r90 = r0;

        $r20 = new java.util.ArrayList;

        $i2 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r85, 10);

        specialinvoke $r20.<java.util.ArrayList: void <init>(int)>($i2);

        $r91 = (java.util.Collection) $r20;

        r92 = interfaceinvoke $r85.<java.lang.Iterable: java.util.Iterator iterator()>();

     label21:
        $z1 = interfaceinvoke r92.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label22;

        r93 = interfaceinvoke r92.<java.util.Iterator: java.lang.Object next()>();

        r94 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r93;

        r95 = $r91;

        $r30 = (org.jetbrains.kotlin.ir.visitors.IrElementTransformer) r0;

        r8 = interfaceinvoke r94.<org.jetbrains.kotlin.ir.expressions.IrExpression: org.jetbrains.kotlin.ir.expressions.IrExpression transform(org.jetbrains.kotlin.ir.visitors.IrElementTransformer,java.lang.Object)>($r30, null);

        interfaceinvoke r95.<java.util.Collection: boolean add(java.lang.Object)>(r8);

        goto label21;

     label22:
        r96 = (java.util.List) $r91;

        $r97 = r90;

        $r98 = r89;

        $r99 = r88;

        $r21 = specialinvoke r6.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irJoinKeyChain(java.util.List)>(r96);

        $r22 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope) $r84;

        $r23 = specialinvoke r86.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irStartMovableGroup(org.jetbrains.kotlin.ir.IrElement,org.jetbrains.kotlin.ir.expressions.IrExpression,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope)>(r7, $r21, $r22);

        r87[1] = $r23;

        $r24 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r77;

        r88[2] = $r24;

        $r25 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irEndMovableGroup()>();

        r88[3] = $r25;

        $r26 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r69;

        r88[4] = $r26;

        if r78 == null goto label23;

        r100 = r88;

        r101 = r89;

        r102 = r90;

        $r29 = (org.jetbrains.kotlin.ir.declarations.IrValueDeclaration) r78;

        r103 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irGet(org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)>($r29);

        $r97 = r102;

        $r98 = r101;

        $r99 = r100;

        $r104 = r103;

        goto label24;

     label23:
        $r104 = null;

     label24:
        $r99[5] = $r104;

        $r27 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOfNotNull(java.lang.Object[])>($r99);

        $r28 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.IrExpression irBlock$default(androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,java.util.List,int,java.lang.Object)>($r97, $r98, null, $r27, 2, null);

        return $r28;

        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label18 to label19 with label18;
    }

    private final boolean isStatic(org.jetbrains.kotlin.ir.expressions.IrExpression)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r1, r2, $r7, $r28, $r38, $r53, $r55, $r67;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36, $z37, $z38, $z39, $z40, $z41, $z42, $z43, $z44, $z45, $z47, z49, $z50, z51, $z52, z53, $z54, $z55, $z56, $z57, z58, z59, $z60, $z62, $z63, z64, z65, $z66;
        org.jetbrains.kotlin.ir.expressions.IrGetValue $r3;
        org.jetbrains.kotlin.ir.symbols.IrValueSymbol $r4;
        org.jetbrains.kotlin.ir.declarations.IrVariable $r5, $r6;
        org.jetbrains.kotlin.ir.expressions.IrCall $r8, $r9, $r16, $r30, $r40, $r44, $r52, $r54, $r56, $r84, $r94;
        org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol $r10, $r17, $r20, $r41, $r45, $r57, $r85, $r95;
        org.jetbrains.kotlin.descriptors.FunctionDescriptor $r11, $r86, $r96;
        org.jetbrains.kotlin.descriptors.DeclarationDescriptor $r12, $r87, $r97;
        org.jetbrains.kotlin.name.FqName $r13, $r15, $r88, $r98, $r100;
        androidx.compose.compiler.plugins.kotlin.ComposeFqNames $r14, $r99;
        org.jetbrains.kotlin.ir.symbols.IrSymbol $r18, $r19;
        org.jetbrains.kotlin.ir.declarations.IrFunction $r21, $r42, $r58, $r80;
        org.jetbrains.kotlin.ir.declarations.IrAnnotationContainer $r22, $r43, $r59, $r83;
        org.jetbrains.kotlin.ir.types.IrType $r23, $r31, $r33, $r50, $r62, $r63, $r64, r78;
        org.jetbrains.kotlin.types.KotlinType $r24, $r32, $r34, $r51, $r65, $r73;
        org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression $r25, $r35;
        java.util.List $r26, $r36, $r72;
        java.lang.Object $r27, $r37, r77, r92, r103;
        java.util.Collection $r29, $r39, $r74;
        int $i0, i1;
        org.jetbrains.kotlin.ir.declarations.IrSimpleFunction $r46, $r60;
        org.jetbrains.kotlin.ir.symbols.IrPropertySymbol $r47;
        org.jetbrains.kotlin.ir.declarations.IrSymbolOwner $r48, $r70;
        org.jetbrains.kotlin.ir.declarations.IrProperty $r49;
        org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin$DEFAULT_PROPERTY_ACCESSOR $r61;
        org.jetbrains.kotlin.ir.expressions.IrConstructorCall $r66;
        org.jetbrains.kotlin.ir.expressions.IrGetObjectValue $r68;
        org.jetbrains.kotlin.ir.symbols.IrClassSymbol $r69;
        org.jetbrains.kotlin.ir.declarations.IrClass $r71;
        java.lang.Iterable $r75, r90, r101;
        java.util.Iterator r76, $r91, $r102;
        org.jetbrains.kotlin.ir.expressions.IrStatementOrigin $r79;
        org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin $r82;
        java.lang.String $r89;
        kotlin.Pair r93, r104;
        org.jetbrains.kotlin.ir.declarations.IrValueDeclaration $r105;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        $r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrExpression;

        r2 = $r1;

        $z0 = r2 instanceof org.jetbrains.kotlin.ir.expressions.IrConst;

        if $z0 == 0 goto label01;

        $z45 = 1;

        goto label65;

     label01:
        $z1 = r2 instanceof org.jetbrains.kotlin.ir.expressions.IrGetEnumValue;

        if $z1 == 0 goto label02;

        $z45 = 1;

        goto label65;

     label02:
        $z2 = r2 instanceof org.jetbrains.kotlin.ir.expressions.IrGetObjectValue;

        if $z2 == 0 goto label06;

        $r68 = (org.jetbrains.kotlin.ir.expressions.IrGetObjectValue) $r1;

        $r69 = interfaceinvoke $r68.<org.jetbrains.kotlin.ir.expressions.IrGetObjectValue: org.jetbrains.kotlin.ir.symbols.IrClassSymbol getSymbol()>();

        $r70 = interfaceinvoke $r69.<org.jetbrains.kotlin.ir.symbols.IrClassSymbol: org.jetbrains.kotlin.ir.declarations.IrSymbolOwner getOwner()>();

        $r71 = (org.jetbrains.kotlin.ir.declarations.IrClass) $r70;

        $r72 = interfaceinvoke $r71.<org.jetbrains.kotlin.ir.declarations.IrClass: java.util.List getSuperTypes()>();

        $r75 = (java.lang.Iterable) $r72;

        $z42 = $r75 instanceof java.util.Collection;

        if $z42 == 0 goto label03;

        $r74 = (java.util.Collection) $r75;

        $z44 = interfaceinvoke $r74.<java.util.Collection: boolean isEmpty()>();

        if $z44 == 0 goto label03;

        $z45 = 0;

        goto label65;

     label03:
        r76 = interfaceinvoke $r75.<java.lang.Iterable: java.util.Iterator iterator()>();

     label04:
        $z47 = interfaceinvoke r76.<java.util.Iterator: boolean hasNext()>();

        if $z47 == 0 goto label05;

        r77 = interfaceinvoke r76.<java.util.Iterator: java.lang.Object next()>();

        r78 = (org.jetbrains.kotlin.ir.types.IrType) r77;

        $r73 = staticinvoke <org.jetbrains.kotlin.ir.types.IrTypesKt: org.jetbrains.kotlin.types.KotlinType toKotlinType(org.jetbrains.kotlin.ir.types.IrType)>(r78);

        $z43 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean isStable(org.jetbrains.kotlin.types.KotlinType)>($r73);

        if $z43 == 0 goto label04;

        $z45 = 1;

        goto label65;

     label05:
        $z45 = 0;

        goto label65;

     label06:
        $z3 = r2 instanceof org.jetbrains.kotlin.ir.expressions.IrConstructorCall;

        if $z3 == 0 goto label10;

        $r62 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrExpression: org.jetbrains.kotlin.ir.types.IrType getType()>();

        $z39 = staticinvoke <org.jetbrains.kotlin.ir.util.InlineClassesKt: boolean isInlined(org.jetbrains.kotlin.ir.types.IrType)>($r62);

        if $z39 == 0 goto label09;

        $r63 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrExpression: org.jetbrains.kotlin.ir.types.IrType getType()>();

        $r64 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.types.IrType unboxInlineClass(org.jetbrains.kotlin.ir.types.IrType)>($r63);

        $r65 = staticinvoke <org.jetbrains.kotlin.ir.types.IrTypesKt: org.jetbrains.kotlin.types.KotlinType toKotlinType(org.jetbrains.kotlin.ir.types.IrType)>($r64);

        $z40 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean isStable(org.jetbrains.kotlin.types.KotlinType)>($r65);

        if $z40 == 0 goto label09;

        $r66 = (org.jetbrains.kotlin.ir.expressions.IrConstructorCall) $r1;

        $r67 = interfaceinvoke $r66.<org.jetbrains.kotlin.ir.expressions.IrConstructorCall: org.jetbrains.kotlin.ir.expressions.IrExpression getValueArgument(int)>(0);

        if $r67 == null goto label07;

        $z41 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean isStatic(org.jetbrains.kotlin.ir.expressions.IrExpression)>($r67);

        if $z41 != 1 goto label09;

        goto label08;

     label07:
        goto label09;

     label08:
        return 1;

     label09:
        $z45 = 0;

        goto label65;

     label10:
        $z4 = r2 instanceof org.jetbrains.kotlin.ir.expressions.IrCall;

        if $z4 == 0 goto label59;

        $r8 = (org.jetbrains.kotlin.ir.expressions.IrCall) $r1;

        $r79 = interfaceinvoke $r8.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.expressions.IrStatementOrigin getOrigin()>();

        $z9 = $r79 instanceof org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$GET_PROPERTY;

        if $z9 == 0 goto label28;

        $r44 = (org.jetbrains.kotlin.ir.expressions.IrCall) $r1;

        $r45 = interfaceinvoke $r44.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getSymbol()>();

        $r80 = interfaceinvoke $r45.<org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol: org.jetbrains.kotlin.ir.declarations.IrFunction getOwner()>();

        $z32 = $r80 instanceof org.jetbrains.kotlin.ir.declarations.IrSimpleFunction;

        if $z32 != 0 goto label11;

        $r80 = null;

     label11:
        $r46 = (org.jetbrains.kotlin.ir.declarations.IrSimpleFunction) $r80;

        if $r46 == null goto label12;

        $r47 = interfaceinvoke $r46.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: org.jetbrains.kotlin.ir.symbols.IrPropertySymbol getCorrespondingPropertySymbol()>();

        if $r47 == null goto label12;

        $r48 = interfaceinvoke $r47.<org.jetbrains.kotlin.ir.symbols.IrPropertySymbol: org.jetbrains.kotlin.ir.declarations.IrSymbolOwner getOwner()>();

        $r49 = (org.jetbrains.kotlin.ir.declarations.IrProperty) $r48;

        if $r49 == null goto label12;

        goto label13;

     label12:
        return 0;

     label13:
        $z33 = interfaceinvoke $r49.<org.jetbrains.kotlin.ir.declarations.IrProperty: boolean isConst()>();

        if $z33 == 0 goto label14;

        return 1;

     label14:
        $r50 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrExpression: org.jetbrains.kotlin.ir.types.IrType getType()>();

        $r51 = staticinvoke <org.jetbrains.kotlin.ir.types.IrTypesKt: org.jetbrains.kotlin.types.KotlinType toKotlinType(org.jetbrains.kotlin.ir.types.IrType)>($r50);

        z49 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean isStable(org.jetbrains.kotlin.types.KotlinType)>($r51);

        $r52 = (org.jetbrains.kotlin.ir.expressions.IrCall) $r1;

        $r53 = interfaceinvoke $r52.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.expressions.IrExpression getDispatchReceiver()>();

        if $r53 == null goto label15;

        $z38 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean isStatic(org.jetbrains.kotlin.ir.expressions.IrExpression)>($r53);

        if $z38 == 0 goto label16;

        goto label15;

     label15:
        $z50 = 1;

        goto label17;

     label16:
        $z50 = 0;

     label17:
        z51 = $z50;

        $r54 = (org.jetbrains.kotlin.ir.expressions.IrCall) $r1;

        $r55 = interfaceinvoke $r54.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.expressions.IrExpression getExtensionReceiver()>();

        if $r55 == null goto label18;

        $z37 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean isStatic(org.jetbrains.kotlin.ir.expressions.IrExpression)>($r55);

        if $z37 == 0 goto label19;

        goto label18;

     label18:
        $z52 = 1;

        goto label20;

     label19:
        $z52 = 0;

     label20:
        z53 = $z52;

        $z34 = interfaceinvoke $r49.<org.jetbrains.kotlin.ir.declarations.IrProperty: boolean isVar()>();

        if $z34 != 0 goto label23;

        $r60 = interfaceinvoke $r49.<org.jetbrains.kotlin.ir.declarations.IrProperty: org.jetbrains.kotlin.ir.declarations.IrSimpleFunction getGetter()>();

        if $r60 == null goto label21;

        $r82 = interfaceinvoke $r60.<org.jetbrains.kotlin.ir.declarations.IrSimpleFunction: org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin getOrigin()>();

        goto label22;

     label21:
        $r82 = null;

     label22:
        $r61 = <org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin$DEFAULT_PROPERTY_ACCESSOR: org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin$DEFAULT_PROPERTY_ACCESSOR INSTANCE>;

        $z36 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r82, $r61);

        if $z36 == 0 goto label23;

        if z49 == 0 goto label23;

        if z51 == 0 goto label23;

        if z53 == 0 goto label23;

        return 1;

     label23:
        $r83 = (org.jetbrains.kotlin.ir.declarations.IrAnnotationContainer) $r49;

        $z54 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean hasStableAnnotation(org.jetbrains.kotlin.ir.declarations.IrAnnotationContainer)>($r83);

        if $z54 != 0 goto label24;

        $r56 = (org.jetbrains.kotlin.ir.expressions.IrCall) $r1;

        $r57 = interfaceinvoke $r56.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getSymbol()>();

        $r58 = interfaceinvoke $r57.<org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol: org.jetbrains.kotlin.ir.declarations.IrFunction getOwner()>();

        $r59 = (org.jetbrains.kotlin.ir.declarations.IrAnnotationContainer) $r58;

        $z35 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean hasStableAnnotation(org.jetbrains.kotlin.ir.declarations.IrAnnotationContainer)>($r59);

        if $z35 == 0 goto label25;

     label24:
        $z55 = 1;

        goto label26;

     label25:
        $z55 = 0;

     label26:
        if $z55 == 0 goto label27;

        if z49 == 0 goto label27;

        if z51 == 0 goto label27;

        if z53 == 0 goto label27;

        return 1;

     label27:
        $z45 = 0;

        goto label65;

     label28:
        $z10 = $r79 instanceof org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$PLUS;

        if $z10 == 0 goto label29;

        goto label41;

     label29:
        $z11 = $r79 instanceof org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$MUL;

        if $z11 == 0 goto label30;

        goto label41;

     label30:
        $z12 = $r79 instanceof org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$MINUS;

        if $z12 == 0 goto label31;

        goto label41;

     label31:
        $z13 = $r79 instanceof org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$ANDAND;

        if $z13 == 0 goto label32;

        goto label41;

     label32:
        $z14 = $r79 instanceof org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$OROR;

        if $z14 == 0 goto label33;

        goto label41;

     label33:
        $z15 = $r79 instanceof org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$DIV;

        if $z15 == 0 goto label34;

        goto label41;

     label34:
        $z16 = $r79 instanceof org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$EQ;

        if $z16 == 0 goto label35;

        goto label41;

     label35:
        $z17 = $r79 instanceof org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$EQEQ;

        if $z17 == 0 goto label36;

        goto label41;

     label36:
        $z18 = $r79 instanceof org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$EQEQEQ;

        if $z18 == 0 goto label37;

        goto label41;

     label37:
        $z19 = $r79 instanceof org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$GT;

        if $z19 == 0 goto label38;

        goto label41;

     label38:
        $z20 = $r79 instanceof org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$GTEQ;

        if $z20 == 0 goto label39;

        goto label41;

     label39:
        $z21 = $r79 instanceof org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$LT;

        if $z21 == 0 goto label40;

        goto label41;

     label40:
        $z22 = $r79 instanceof org.jetbrains.kotlin.ir.expressions.IrStatementOrigin$LTEQ;

        if $z22 == 0 goto label50;

     label41:
        $r84 = (org.jetbrains.kotlin.ir.expressions.IrCall) $r1;

        $r85 = interfaceinvoke $r84.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getSymbol()>();

        $r86 = interfaceinvoke $r85.<org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol: org.jetbrains.kotlin.descriptors.FunctionDescriptor getDescriptor()>();

        $r87 = (org.jetbrains.kotlin.descriptors.DeclarationDescriptor) $r86;

        $r88 = staticinvoke <org.jetbrains.kotlin.resolve.descriptorUtil.DescriptorUtilsKt: org.jetbrains.kotlin.name.FqName getFqNameSafe(org.jetbrains.kotlin.descriptors.DeclarationDescriptor)>($r87);

        $r89 = staticinvoke <org.jetbrains.kotlin.fir.java.JavaSymbolProviderKt: java.lang.String topLevelName(org.jetbrains.kotlin.name.FqName)>($r88);

        $z56 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r89, "kotlin");

        if $z56 != 0 goto label42;

        $r40 = (org.jetbrains.kotlin.ir.expressions.IrCall) $r1;

        $r41 = interfaceinvoke $r40.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getSymbol()>();

        $r42 = interfaceinvoke $r41.<org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol: org.jetbrains.kotlin.ir.declarations.IrFunction getOwner()>();

        $r43 = (org.jetbrains.kotlin.ir.declarations.IrAnnotationContainer) $r42;

        $z31 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean hasStableAnnotation(org.jetbrains.kotlin.ir.declarations.IrAnnotationContainer)>($r43);

        if $z31 == 0 goto label43;

     label42:
        $z57 = 1;

        goto label44;

     label43:
        $z57 = 0;

     label44:
        $r33 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrExpression: org.jetbrains.kotlin.ir.types.IrType getType()>();

        $r34 = staticinvoke <org.jetbrains.kotlin.ir.types.IrTypesKt: org.jetbrains.kotlin.types.KotlinType toKotlinType(org.jetbrains.kotlin.ir.types.IrType)>($r33);

        z58 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean isStable(org.jetbrains.kotlin.types.KotlinType)>($r34);

        if z58 != 0 goto label45;

        return 0;

     label45:
        if $z57 != 0 goto label46;

        return 0;

     label46:
        $r35 = (org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression) $r1;

        $r36 = staticinvoke <org.jetbrains.kotlin.ir.util.IrUtilsKt: java.util.List getArguments(org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression)>($r35);

        r90 = (java.lang.Iterable) $r36;

        z59 = 0;

        $z28 = r90 instanceof java.util.Collection;

        if $z28 == 0 goto label47;

        $r39 = (java.util.Collection) r90;

        $z30 = interfaceinvoke $r39.<java.util.Collection: boolean isEmpty()>();

        if $z30 == 0 goto label47;

        $z45 = 1;

        goto label65;

     label47:
        $r91 = interfaceinvoke r90.<java.lang.Iterable: java.util.Iterator iterator()>();

     label48:
        $z60 = interfaceinvoke $r91.<java.util.Iterator: boolean hasNext()>();

        if $z60 == 0 goto label49;

        r92 = interfaceinvoke $r91.<java.util.Iterator: java.lang.Object next()>();

        r93 = (kotlin.Pair) r92;

        $r37 = virtualinvoke r93.<kotlin.Pair: java.lang.Object getSecond()>();

        $r38 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r37;

        $z29 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean isStatic(org.jetbrains.kotlin.ir.expressions.IrExpression)>($r38);

        if $z29 != 0 goto label48;

        $z45 = 0;

        goto label65;

     label49:
        $z45 = 1;

        goto label65;

     label50:
        if $r79 != null goto label58;

        $r9 = (org.jetbrains.kotlin.ir.expressions.IrCall) $r1;

        $r10 = interfaceinvoke $r9.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getSymbol()>();

        $r11 = interfaceinvoke $r10.<org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol: org.jetbrains.kotlin.descriptors.FunctionDescriptor getDescriptor()>();

        $r12 = (org.jetbrains.kotlin.descriptors.DeclarationDescriptor) $r11;

        $r13 = staticinvoke <org.jetbrains.kotlin.resolve.descriptorUtil.DescriptorUtilsKt: org.jetbrains.kotlin.name.FqName getFqNameSafe(org.jetbrains.kotlin.descriptors.DeclarationDescriptor)>($r12);

        $r14 = <androidx.compose.compiler.plugins.kotlin.ComposeFqNames: androidx.compose.compiler.plugins.kotlin.ComposeFqNames INSTANCE>;

        $r15 = virtualinvoke $r14.<androidx.compose.compiler.plugins.kotlin.ComposeFqNames: org.jetbrains.kotlin.name.FqName getRemember()>();

        $z23 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r13, $r15);

        if $z23 == 0 goto label51;

        i1 = 1 + 2;

        $r30 = (org.jetbrains.kotlin.ir.expressions.IrCall) $r1;

        $i0 = interfaceinvoke $r30.<org.jetbrains.kotlin.ir.expressions.IrCall: int getValueArgumentsCount()>();

        if $i0 != i1 goto label51;

        $r31 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrExpression: org.jetbrains.kotlin.ir.types.IrType getType()>();

        $r32 = staticinvoke <org.jetbrains.kotlin.ir.types.IrTypesKt: org.jetbrains.kotlin.types.KotlinType toKotlinType(org.jetbrains.kotlin.ir.types.IrType)>($r31);

        $z27 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean isStable(org.jetbrains.kotlin.types.KotlinType)>($r32);

        if $z27 == 0 goto label51;

        return 1;

     label51:
        $r94 = (org.jetbrains.kotlin.ir.expressions.IrCall) $r1;

        $r95 = interfaceinvoke $r94.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getSymbol()>();

        $r96 = interfaceinvoke $r95.<org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol: org.jetbrains.kotlin.descriptors.FunctionDescriptor getDescriptor()>();

        $r97 = (org.jetbrains.kotlin.descriptors.DeclarationDescriptor) $r96;

        $r98 = staticinvoke <org.jetbrains.kotlin.resolve.descriptorUtil.DescriptorUtilsKt: org.jetbrains.kotlin.name.FqName getFqNameSafe(org.jetbrains.kotlin.descriptors.DeclarationDescriptor)>($r97);

        $r99 = <androidx.compose.compiler.plugins.kotlin.ComposeFqNames: androidx.compose.compiler.plugins.kotlin.ComposeFqNames INSTANCE>;

        $r100 = virtualinvoke $r99.<androidx.compose.compiler.plugins.kotlin.ComposeFqNames: org.jetbrains.kotlin.name.FqName getComposableLambda()>();

        $z62 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r98, $r100);

        if $z62 == 0 goto label52;

        return 1;

     label52:
        $r16 = (org.jetbrains.kotlin.ir.expressions.IrCall) $r1;

        $r17 = interfaceinvoke $r16.<org.jetbrains.kotlin.ir.expressions.IrCall: org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol getSymbol()>();

        $r18 = (org.jetbrains.kotlin.ir.symbols.IrSymbol) $r17;

        $r19 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.symbols.IrSymbol bindIfNecessary(org.jetbrains.kotlin.ir.symbols.IrSymbol)>($r18);

        $r20 = (org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol) $r19;

        $r21 = interfaceinvoke $r20.<org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol: org.jetbrains.kotlin.ir.declarations.IrFunction getOwner()>();

        $r22 = (org.jetbrains.kotlin.ir.declarations.IrAnnotationContainer) $r21;

        $z63 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean hasStableAnnotation(org.jetbrains.kotlin.ir.declarations.IrAnnotationContainer)>($r22);

        if $z63 != 0 goto label53;

        return 0;

     label53:
        $r23 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.expressions.IrExpression: org.jetbrains.kotlin.ir.types.IrType getType()>();

        $r24 = staticinvoke <org.jetbrains.kotlin.ir.types.IrTypesKt: org.jetbrains.kotlin.types.KotlinType toKotlinType(org.jetbrains.kotlin.ir.types.IrType)>($r23);

        z64 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean isStable(org.jetbrains.kotlin.types.KotlinType)>($r24);

        if z64 != 0 goto label54;

        return 0;

     label54:
        $r25 = (org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression) $r1;

        $r26 = staticinvoke <org.jetbrains.kotlin.ir.util.IrUtilsKt: java.util.List getArguments(org.jetbrains.kotlin.ir.expressions.IrMemberAccessExpression)>($r25);

        r101 = (java.lang.Iterable) $r26;

        z65 = 0;

        $z24 = r101 instanceof java.util.Collection;

        if $z24 == 0 goto label55;

        $r29 = (java.util.Collection) r101;

        $z26 = interfaceinvoke $r29.<java.util.Collection: boolean isEmpty()>();

        if $z26 == 0 goto label55;

        $z45 = 1;

        goto label65;

     label55:
        $r102 = interfaceinvoke r101.<java.lang.Iterable: java.util.Iterator iterator()>();

     label56:
        $z66 = interfaceinvoke $r102.<java.util.Iterator: boolean hasNext()>();

        if $z66 == 0 goto label57;

        r103 = interfaceinvoke $r102.<java.util.Iterator: java.lang.Object next()>();

        r104 = (kotlin.Pair) r103;

        $r27 = virtualinvoke r104.<kotlin.Pair: java.lang.Object getSecond()>();

        $r28 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r27;

        $z25 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean isStatic(org.jetbrains.kotlin.ir.expressions.IrExpression)>($r28);

        if $z25 != 0 goto label56;

        $z45 = 0;

        goto label65;

     label57:
        $z45 = 1;

        goto label65;

     label58:
        $z45 = 0;

        goto label65;

     label59:
        $z5 = r2 instanceof org.jetbrains.kotlin.ir.expressions.IrGetValue;

        if $z5 == 0 goto label64;

        $r3 = (org.jetbrains.kotlin.ir.expressions.IrGetValue) $r1;

        $r4 = interfaceinvoke $r3.<org.jetbrains.kotlin.ir.expressions.IrGetValue: org.jetbrains.kotlin.ir.symbols.IrValueSymbol getSymbol()>();

        $r105 = interfaceinvoke $r4.<org.jetbrains.kotlin.ir.symbols.IrValueSymbol: org.jetbrains.kotlin.ir.declarations.IrValueDeclaration getOwner()>();

        $z6 = $r105 instanceof org.jetbrains.kotlin.ir.declarations.IrVariable;

        if $z6 == 0 goto label63;

        $r5 = (org.jetbrains.kotlin.ir.declarations.IrVariable) $r105;

        $z7 = interfaceinvoke $r5.<org.jetbrains.kotlin.ir.declarations.IrVariable: boolean isVar()>();

        if $z7 != 0 goto label62;

        $r6 = (org.jetbrains.kotlin.ir.declarations.IrVariable) $r105;

        $r7 = interfaceinvoke $r6.<org.jetbrains.kotlin.ir.declarations.IrVariable: org.jetbrains.kotlin.ir.expressions.IrExpression getInitializer()>();

        if $r7 == null goto label60;

        $z8 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean isStatic(org.jetbrains.kotlin.ir.expressions.IrExpression)>($r7);

        if $z8 != 1 goto label62;

        goto label61;

     label60:
        goto label62;

     label61:
        $z45 = 1;

        goto label65;

     label62:
        $z45 = 0;

        goto label65;

     label63:
        $z45 = 0;

        goto label65;

     label64:
        $z45 = 0;

     label65:
        return $z45;
    }

    private final boolean extractParamMetaFromScopes(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta, org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta r1;
        org.jetbrains.kotlin.ir.declarations.IrValueDeclaration r2;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope r3, r12;
        boolean $z0, $z1;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope $r4, $r6, $r8;
        java.util.Map $r5, $r9;
        androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue $r7;
        java.lang.Object $r10;
        java.lang.Number $r11;
        int $i0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta;

        r2 := @parameter1: org.jetbrains.kotlin.ir.declarations.IrValueDeclaration;

        r12 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope currentScope>;

     label1:
        if r12 == null goto label3;

        r3 = r12;

        $z0 = r3 instanceof androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        if $z0 == 0 goto label2;

        $r4 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope) r12;

        $r5 = virtualinvoke $r4.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: java.util.Map getRemappedParams()>();

        $z1 = interfaceinvoke $r5.<java.util.Map: boolean containsValue(java.lang.Object)>(r2);

        if $z1 == 0 goto label2;

        virtualinvoke r1.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: void setCertain(boolean)>(1);

        $r6 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope) r12;

        $r7 = virtualinvoke $r6.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue getDirty()>();

        virtualinvoke r1.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: void setMaskParam(androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue)>($r7);

        $r8 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope) r12;

        $r9 = virtualinvoke $r8.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: java.util.Map getParamsToSlots()>();

        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r10);

        $r11 = (java.lang.Number) $r10;

        $i0 = virtualinvoke $r11.<java.lang.Number: int intValue()>();

        virtualinvoke r1.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: void setMaskSlot(int)>($i0);

        return 1;

     label2:
        r12 = virtualinvoke r12.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope getParent()>();

        goto label1;

     label3:
        return 0;
    }

    private final java.util.List buildChangedParamsForCall(java.util.List, androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta, androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        java.util.List r1, r4, r5, r6, r12;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta r2, r3;
        int i0, i1, i2, i3, i4, $i5, $i6, i7, i8;
        boolean z0, z2;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta[] $r7;
        java.lang.Iterable $r8;
        java.util.Collection $r9;
        java.util.ArrayList $r10;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r11;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta;

        r3 := @parameter2: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta;

        $r7 = newarray (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta)[2];

        $r7[0] = r2;

        $r7[1] = r3;

        r4 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOfNotNull(java.lang.Object[])>($r7);

        $r9 = (java.util.Collection) r1;

        $r8 = (java.lang.Iterable) r4;

        r5 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List plus(java.util.Collection,java.lang.Iterable)>($r9, $r8);

        $i5 = interfaceinvoke r1.<java.util.List: int size()>();

        $i6 = interfaceinvoke r4.<java.util.List: int size()>();

        i0 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformerKt: int changedParamCount(int,int)>($i5, $i6);

        z2 = 0;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        r6 = (java.util.List) $r10;

        i7 = 0;

        i1 = i0;

     label1:
        if i7 >= i1 goto label2;

        i2 = i7 * 15;

        i8 = i2 + 15;

        i3 = interfaceinvoke r5.<java.util.List: int size()>();

        z0 = 0;

        i4 = staticinvoke <java.lang.Math: int min(int,int)>(i8, i3);

        r12 = interfaceinvoke r5.<java.util.List: java.util.List subList(int,int)>(i2, i4);

        $r11 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression buildChangedParamForCall(java.util.List)>(r12);

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r11);

        i7 = i7 + 1;

        goto label1;

     label2:
        return r6;
    }

    private final org.jetbrains.kotlin.ir.expressions.IrExpression buildChangedParamForCall(java.util.List)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        java.util.List r1, r2;
        androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue r3, $r11;
        boolean z1, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, z16, $z17, z18, z19, z22, z23;
        java.util.ArrayList $r4;
        org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl $r5, $r7, $r18;
        java.lang.Object $r6, r28, r35, r39, r41;
        java.lang.UnsupportedOperationException $r8;
        java.lang.Throwable $r9, $r14, $r21;
        org.jetbrains.kotlin.ir.expressions.IrConst $r10, $r15;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8, i9, i10;
        java.lang.IllegalStateException $r12;
        java.lang.String $r13, $r20, r30, r31;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r16, $r17, $r32, r36, r37, $r42, r43;
        java.lang.IllegalArgumentException $r19;
        androidx.compose.compiler.plugins.kotlin.lower.ParamState $r22, $r23, $r24, $r25;
        java.lang.Iterable $r26, $r33, $r38;
        java.util.Iterator r27, r34, r40;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta r29;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: java.util.List;

        i6 = 0;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r2 = (java.util.List) $r4;

        $r26 = (java.lang.Iterable) r1;

        i7 = 0;

        r27 = interfaceinvoke $r26.<java.lang.Iterable: java.util.Iterator iterator()>();

     label01:
        $z3 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label13;

        r28 = interfaceinvoke r27.<java.util.Iterator: java.lang.Object next()>();

        $i0 = i7;

        i7 = i7 + 1;

        i8 = $i0;

        if i8 >= 0 goto label02;

        staticinvoke <kotlin.collections.CollectionsKt: void throwIndexOverflow()>();

     label02:
        r29 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta) r28;

        i9 = i8;

        $z8 = virtualinvoke r29.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: boolean isVararg()>();

        if $z8 == 0 goto label03;

        $r25 = <androidx.compose.compiler.plugins.kotlin.lower.ParamState: androidx.compose.compiler.plugins.kotlin.lower.ParamState Uncertain>;

        $i5 = virtualinvoke $r25.<androidx.compose.compiler.plugins.kotlin.lower.ParamState: int bitsForSlot(int)>(i9);

        i6 = i6 | $i5;

        goto label12;

     label03:
        $z9 = virtualinvoke r29.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: boolean isProvided()>();

        if $z9 != 0 goto label04;

        $r24 = <androidx.compose.compiler.plugins.kotlin.lower.ParamState: androidx.compose.compiler.plugins.kotlin.lower.ParamState Uncertain>;

        $i4 = virtualinvoke $r24.<androidx.compose.compiler.plugins.kotlin.lower.ParamState: int bitsForSlot(int)>(i9);

        i6 = i6 | $i4;

        goto label12;

     label04:
        $z10 = virtualinvoke r29.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: boolean isStatic()>();

        if $z10 == 0 goto label05;

        $r23 = <androidx.compose.compiler.plugins.kotlin.lower.ParamState: androidx.compose.compiler.plugins.kotlin.lower.ParamState Static>;

        $i3 = virtualinvoke $r23.<androidx.compose.compiler.plugins.kotlin.lower.ParamState: int bitsForSlot(int)>(i9);

        i6 = i6 | $i3;

        goto label12;

     label05:
        $z11 = virtualinvoke r29.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: boolean isCertain()>();

        if $z11 != 0 goto label06;

        $r22 = <androidx.compose.compiler.plugins.kotlin.lower.ParamState: androidx.compose.compiler.plugins.kotlin.lower.ParamState Uncertain>;

        $i2 = virtualinvoke $r22.<androidx.compose.compiler.plugins.kotlin.lower.ParamState: int bitsForSlot(int)>(i9);

        i6 = i6 | $i2;

        goto label12;

     label06:
        $r11 = virtualinvoke r29.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue getMaskParam()>();

        if $r11 == null goto label07;

        goto label08;

     label07:
        r30 = "Mask param required if param is Certain";

        z16 = 0;

        $r12 = new java.lang.IllegalStateException;

        $r13 = virtualinvoke r30.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        $r14 = (java.lang.Throwable) $r12;

        throw $r14;

     label08:
        r3 = $r11;

        i10 = virtualinvoke r29.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: int getMaskSlot()>();

        if i10 == -1 goto label09;

        $z17 = 1;

        goto label10;

     label09:
        $z17 = 0;

     label10:
        z18 = $z17;

        z1 = 0;

        z19 = 0;

        if z18 != 0 goto label11;

        r31 = "invalid parent slot for Certain param";

        $r19 = new java.lang.IllegalArgumentException;

        $r20 = virtualinvoke r31.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r20);

        $r21 = (java.lang.Throwable) $r19;

        throw $r21;

     label11:
        $i1 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformerKt: int bitsForSlot(int,int)>(3, i9);

        $r15 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrConst irConst(int)>($i1);

        $r16 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r15;

        $r17 = interfaceinvoke r3.<androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue: org.jetbrains.kotlin.ir.expressions.IrExpression irShiftBits(int,int)>(i10, i9);

        $r18 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl irAnd(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r16, $r17);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r18);

     label12:
        goto label01;

     label13:
        $z4 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>();

        if $z4 == 0 goto label14;

        $r10 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrConst irConst(int)>(i6);

        $r32 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r10;

        goto label21;

     label14:
        if i6 != 0 goto label18;

        $r33 = (java.lang.Iterable) r2;

        r34 = interfaceinvoke $r33.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z6 = interfaceinvoke r34.<java.util.Iterator: boolean hasNext()>();

        if $z6 != 0 goto label15;

        $r8 = new java.lang.UnsupportedOperationException;

        specialinvoke $r8.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Empty collection can\'t be reduced.");

        $r9 = (java.lang.Throwable) $r8;

        throw $r9;

     label15:
        r35 = interfaceinvoke r34.<java.util.Iterator: java.lang.Object next()>();

     label16:
        $z7 = interfaceinvoke r34.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label17;

        $r6 = interfaceinvoke r34.<java.util.Iterator: java.lang.Object next()>();

        r36 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r6;

        r37 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r35;

        $r7 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl irOr(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>(r37, r36);

        r35 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r7;

        goto label16;

     label17:
        $r32 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r35;

        goto label21;

     label18:
        $r38 = (java.lang.Iterable) r2;

        z22 = 0;

        r39 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrConst irConst(int)>(i6);

        r40 = interfaceinvoke $r38.<java.lang.Iterable: java.util.Iterator iterator()>();

     label19:
        $z5 = interfaceinvoke r40.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label20;

        r41 = interfaceinvoke r40.<java.util.Iterator: java.lang.Object next()>();

        $r42 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r41;

        r43 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r39;

        z23 = 0;

        $r5 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl irOr(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>(r43, $r42);

        r39 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r5;

        goto label19;

     label20:
        $r32 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r39;

     label21:
        return $r32;
    }

    public org.jetbrains.kotlin.ir.expressions.IrExpression visitGetValue(org.jetbrains.kotlin.ir.expressions.IrGetValue)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.expressions.IrGetValue r1;
        org.jetbrains.kotlin.ir.declarations.IrValueDeclaration r2, r3;
        org.jetbrains.kotlin.ir.symbols.IrValueSymbol $r4;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r5, $r15;
        boolean $z0, $z1, $z2;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope $r6, $r9, $r12, $r16, $r17;
        org.jetbrains.kotlin.ir.declarations.IrFunction $r7, $r10;
        org.jetbrains.kotlin.ir.declarations.IrValueParameter $r8, $r11;
        java.util.Map $r13;
        java.lang.Object $r14;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope r18;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrGetValue;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "expression");

        $r4 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrGetValue: org.jetbrains.kotlin.ir.symbols.IrValueSymbol getSymbol()>();

        r2 = interfaceinvoke $r4.<org.jetbrains.kotlin.ir.symbols.IrValueSymbol: org.jetbrains.kotlin.ir.declarations.IrValueDeclaration getOwner()>();

        r18 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope currentScope>;

     label1:
        if r18 == null goto label5;

        $z0 = r18 instanceof androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        if $z0 == 0 goto label4;

        $r6 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope) r18;

        $r7 = virtualinvoke $r6.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: org.jetbrains.kotlin.ir.declarations.IrFunction getFunction()>();

        $r8 = interfaceinvoke $r7.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.declarations.IrValueParameter getExtensionReceiverParameter()>();

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r8, r2);

        if $z1 == 0 goto label2;

        $r17 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope) r18;

        virtualinvoke $r17.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: void markGetExtensionReceiver()>();

     label2:
        $r9 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope) r18;

        $r10 = virtualinvoke $r9.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: org.jetbrains.kotlin.ir.declarations.IrFunction getFunction()>();

        $r11 = interfaceinvoke $r10.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.declarations.IrValueParameter getDispatchReceiverParameter()>();

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r11, r2);

        if $z2 == 0 goto label3;

        $r16 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope) r18;

        virtualinvoke $r16.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: void markGetDispatchReceiver()>();

     label3:
        $r12 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope) r18;

        $r13 = virtualinvoke $r12.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: java.util.Map getRemappedParams()>();

        $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (org.jetbrains.kotlin.ir.declarations.IrValueDeclaration) $r14;

        if r3 == null goto label4;

        $r15 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irGet(org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)>(r3);

        return $r15;

     label4:
        r18 = virtualinvoke r18.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope getParent()>();

        goto label1;

     label5:
        $r5 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r1;

        return $r5;
    }

    public org.jetbrains.kotlin.ir.expressions.IrExpression visitReturn(org.jetbrains.kotlin.ir.expressions.IrReturn)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.expressions.IrReturn r1;
        org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase r2;
        boolean z0, z1, $z3, $z4, $z5;
        org.jetbrains.kotlin.ir.types.IrType r3, $r12, $r16, r29;
        org.jetbrains.kotlin.ir.IrElement $r4;
        org.jetbrains.kotlin.ir.symbols.IrReturnTargetSymbol $r6, $r17;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitReturn$1 $r7;
        kotlin.jvm.functions.Function1 $r8;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r9, $r10, $r19, $r22, $r28, $r30;
        org.jetbrains.kotlin.ir.IrStatement $r11;
        org.jetbrains.kotlin.ir.expressions.impl.IrExpressionBase[] $r13;
        org.jetbrains.kotlin.ir.expressions.impl.IrExpressionBase $r14, $r20;
        org.jetbrains.kotlin.ir.expressions.impl.IrReturnImpl $r15;
        int $i0, $i1;
        org.jetbrains.kotlin.ir.declarations.IrValueDeclaration $r18;
        java.util.List $r21, $r23;
        org.jetbrains.kotlin.ir.types.IrSimpleType $r24;
        org.jetbrains.kotlin.ir.symbols.IrClassifierSymbol $r25;
        org.jetbrains.kotlin.ir.symbols.IrSymbol $r26;
        org.jetbrains.kotlin.ir.declarations.impl.IrVariableImpl r31;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrReturn;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "expression");

        $z3 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean isInComposableScope()>();

        if $z3 != 0 goto label1;

        $r28 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.IrExpression visitReturn(org.jetbrains.kotlin.ir.expressions.IrReturn)>(r1);

        return $r28;

     label1:
        $r4 = (org.jetbrains.kotlin.ir.IrElement) r1;

        virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.IrElement transformChildren(org.jetbrains.kotlin.ir.IrElement)>($r4);

        r2 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase mutableStatementContainer()>();

        $r6 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrReturn: org.jetbrains.kotlin.ir.symbols.IrReturnTargetSymbol getReturnTargetSymbol()>();

        $r7 = new androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitReturn$1;

        specialinvoke $r7.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitReturn$1: void <init>(org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase)>(r2);

        $r8 = (kotlin.jvm.functions.Function1) $r7;

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void encounteredReturn(org.jetbrains.kotlin.ir.symbols.IrReturnTargetSymbol,kotlin.jvm.functions.Function1)>($r6, $r8);

        $r9 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrReturn: org.jetbrains.kotlin.ir.expressions.IrExpression getValue()>();

        r29 = interfaceinvoke $r9.<org.jetbrains.kotlin.ir.expressions.IrExpression: org.jetbrains.kotlin.ir.types.IrType getType()>();

        z0 = 0;

        z1 = 0;

        r3 = r29;

        $z4 = r3 instanceof org.jetbrains.kotlin.ir.types.IrSimpleType;

        if $z4 == 0 goto label2;

        $r24 = (org.jetbrains.kotlin.ir.types.IrSimpleType) r3;

        $r25 = interfaceinvoke $r24.<org.jetbrains.kotlin.ir.types.IrSimpleType: org.jetbrains.kotlin.ir.symbols.IrClassifierSymbol getClassifier()>();

        $r26 = (org.jetbrains.kotlin.ir.symbols.IrSymbol) $r25;

        virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.symbols.IrSymbol bindIfNecessary(org.jetbrains.kotlin.ir.symbols.IrSymbol)>($r26);

     label2:
        $z5 = staticinvoke <org.jetbrains.kotlin.ir.types.IrTypePredicatesKt: boolean isUnitOrNullableUnit(org.jetbrains.kotlin.ir.types.IrType)>(r29);

        if $z5 == 0 goto label3;

        $r22 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r1;

        $r23 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>(r2);

        $r30 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression wrap$default(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,org.jetbrains.kotlin.ir.expressions.IrExpression,java.util.List,java.util.List,int,java.lang.Object)>(r0, $r22, $r23, null, 2, null);

        goto label4;

     label3:
        $r10 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrReturn: org.jetbrains.kotlin.ir.expressions.IrExpression getValue()>();

        r31 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.declarations.impl.IrVariableImpl irTemporary$default(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,org.jetbrains.kotlin.ir.expressions.IrExpression,java.lang.String,org.jetbrains.kotlin.ir.types.IrType,boolean,boolean,int,java.lang.Object)>(r0, $r10, "return", null, 0, 0, 28, null);

        $r11 = (org.jetbrains.kotlin.ir.IrStatement) r31;

        $r12 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrReturn: org.jetbrains.kotlin.ir.types.IrType getType()>();

        $r13 = newarray (org.jetbrains.kotlin.ir.expressions.impl.IrExpressionBase)[2];

        $r14 = (org.jetbrains.kotlin.ir.expressions.impl.IrExpressionBase) r2;

        $r13[0] = $r14;

        $r15 = new org.jetbrains.kotlin.ir.expressions.impl.IrReturnImpl;

        $i0 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrReturn: int getStartOffset()>();

        $i1 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrReturn: int getEndOffset()>();

        $r16 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrReturn: org.jetbrains.kotlin.ir.types.IrType getType()>();

        $r17 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrReturn: org.jetbrains.kotlin.ir.symbols.IrReturnTargetSymbol getReturnTargetSymbol()>();

        $r18 = (org.jetbrains.kotlin.ir.declarations.IrValueDeclaration) r31;

        $r19 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irGet(org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)>($r18);

        specialinvoke $r15.<org.jetbrains.kotlin.ir.expressions.impl.IrReturnImpl: void <init>(int,int,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.symbols.IrReturnTargetSymbol,org.jetbrains.kotlin.ir.expressions.IrExpression)>($i0, $i1, $r16, $r17, $r19);

        $r20 = (org.jetbrains.kotlin.ir.expressions.impl.IrExpressionBase) $r15;

        $r13[1] = $r20;

        $r21 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object[])>($r13);

        $r30 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression wrap$default(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,org.jetbrains.kotlin.ir.IrStatement,org.jetbrains.kotlin.ir.types.IrType,java.util.List,java.util.List,int,java.lang.Object)>(r0, $r11, $r12, null, $r21, 2, null);

     label4:
        return $r30;
    }

    public org.jetbrains.kotlin.ir.expressions.IrExpression visitBreakContinue(org.jetbrains.kotlin.ir.expressions.IrBreakContinue)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.expressions.IrBreakContinue r1;
        org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase r2;
        boolean $z0;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitBreakContinue$1 $r3;
        kotlin.jvm.functions.Function1 $r4;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r5, $r7, $r8;
        java.util.List $r6;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrBreakContinue;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "jump");

        $z0 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean isInComposableScope()>();

        if $z0 != 0 goto label1;

        $r8 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.IrExpression visitBreakContinue(org.jetbrains.kotlin.ir.expressions.IrBreakContinue)>(r1);

        return $r8;

     label1:
        r2 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase mutableStatementContainer()>();

        $r3 = new androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitBreakContinue$1;

        specialinvoke $r3.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitBreakContinue$1: void <init>(org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase)>(r2);

        $r4 = (kotlin.jvm.functions.Function1) $r3;

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void encounteredJump(org.jetbrains.kotlin.ir.expressions.IrBreakContinue,kotlin.jvm.functions.Function1)>(r1, $r4);

        $r5 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r1;

        $r6 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>(r2);

        $r7 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression wrap$default(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,org.jetbrains.kotlin.ir.expressions.IrExpression,java.util.List,java.util.List,int,java.lang.Object)>(r0, $r5, $r6, null, 2, null);

        return $r7;
    }

    public org.jetbrains.kotlin.ir.expressions.IrExpression visitDoWhileLoop(org.jetbrains.kotlin.ir.expressions.IrDoWhileLoop)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.expressions.IrDoWhileLoop r1;
        boolean $z0;
        org.jetbrains.kotlin.ir.expressions.impl.IrLoopBase $r2;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r3, $r4;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrDoWhileLoop;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "loop");

        $z0 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean isInComposableScope()>();

        if $z0 != 0 goto label1;

        $r4 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.IrExpression visitDoWhileLoop(org.jetbrains.kotlin.ir.expressions.IrDoWhileLoop)>(r1);

        return $r4;

     label1:
        $r2 = (org.jetbrains.kotlin.ir.expressions.impl.IrLoopBase) r1;

        $r3 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression handleLoop(org.jetbrains.kotlin.ir.expressions.impl.IrLoopBase)>($r2);

        return $r3;
    }

    public org.jetbrains.kotlin.ir.expressions.IrExpression visitWhileLoop(org.jetbrains.kotlin.ir.expressions.IrWhileLoop)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0;
        org.jetbrains.kotlin.ir.expressions.IrWhileLoop r1;
        boolean $z0;
        org.jetbrains.kotlin.ir.expressions.impl.IrLoopBase $r2;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r3, $r4;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrWhileLoop;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "loop");

        $z0 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean isInComposableScope()>();

        if $z0 != 0 goto label1;

        $r4 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.IrExpression visitWhileLoop(org.jetbrains.kotlin.ir.expressions.IrWhileLoop)>(r1);

        return $r4;

     label1:
        $r2 = (org.jetbrains.kotlin.ir.expressions.impl.IrLoopBase) r1;

        $r3 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression handleLoop(org.jetbrains.kotlin.ir.expressions.impl.IrLoopBase)>($r2);

        return $r3;
    }

    private final org.jetbrains.kotlin.ir.expressions.IrExpression handleLoop(org.jetbrains.kotlin.ir.expressions.impl.IrLoopBase)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0, r2;
        org.jetbrains.kotlin.ir.expressions.impl.IrLoopBase r1;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope r3, r4;
        java.lang.Throwable r5, $r13;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$LoopScope r6, $r7;
        org.jetbrains.kotlin.ir.expressions.IrLoop $r8;
        int $i0, $i1;
        org.jetbrains.kotlin.ir.IrElement $r9;
        boolean $z2;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope $r11;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r12, $r14;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.impl.IrLoopBase;

        r2 = r0;

        $r7 = new androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$LoopScope;

        $r8 = (org.jetbrains.kotlin.ir.expressions.IrLoop) r1;

        specialinvoke $r7.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$LoopScope: void <init>(org.jetbrains.kotlin.ir.expressions.IrLoop)>($r8);

        r3 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope) $r7;

        r4 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope access$getCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer)>(r2);

        staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void access$setCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r2, r3);

        virtualinvoke r3.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: void setParent(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r4);

        $i0 = virtualinvoke r4.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: int getLevel()>();

        $i1 = $i0 + 1;

        virtualinvoke r3.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: void setLevel(int)>($i1);

     label1:
        $r9 = (org.jetbrains.kotlin.ir.IrElement) r1;

        virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.IrElement transformChildren(org.jetbrains.kotlin.ir.IrElement)>($r9);

     label2:
        staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void access$setCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r2, r4);

        goto label5;

     label3:
        $r13 := @caughtexception;

        r5 = $r13;

     label4:
        staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void access$setCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r2, r4);

        throw r5;

     label5:
        r6 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$LoopScope) r3;

        $z2 = virtualinvoke r6.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$LoopScope: boolean getHasComposableCalls()>();

        if $z2 == 0 goto label6;

        $r12 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r1;

        $r11 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope) r6;

        $r14 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression asCoalescableGroup(org.jetbrains.kotlin.ir.expressions.IrExpression,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope)>($r12, $r11);

        goto label7;

     label6:
        $r14 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r1;

     label7:
        return $r14;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public org.jetbrains.kotlin.ir.expressions.IrExpression visitWhen(org.jetbrains.kotlin.ir.expressions.IrWhen)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0, r70;
        org.jetbrains.kotlin.ir.expressions.IrWhen r1;
        org.jetbrains.kotlin.ir.expressions.impl.IrWhenImpl r2, $r10;
        java.util.List r3, $r16, $r30, $r44, $r56, $r64, r69, r82;
        java.util.Iterator r4;
        java.lang.Object r5, $r19, $r20, $r21, $r49, $r50, $r54, $r55, $r61, $r62;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, $i12, i13;
        boolean z0, $z2, $z3, $z4, $z5, $z9, $z13, $z14, $z18, z19, z20, z21, z22, z23, $z27, $z28, $z29, z30, z31;
        org.jetbrains.kotlin.ir.expressions.IrBranch r6, $r86;
        kotlin.Pair r7, r74, r77;
        org.jetbrains.kotlin.ir.expressions.IrExpression r8, $r18, $r22, $r24, $r25, $r27, $r40, $r45, $r46, $r51, $r58, $r66, $r67, r76, r79, $r87;
        java.lang.Throwable r9, $r68;
        org.jetbrains.kotlin.ir.types.IrType $r11, $r35, $r43;
        org.jetbrains.kotlin.ir.expressions.IrStatementOrigin $r12;
        java.util.ArrayList $r13, $r14;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$WhenScope $r15, r81;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope $r17, $r23, $r26;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BranchScope $r28, $r29, $r47, $r52, $r59, $r63, r75, r78, r80, $r84, $r85;
        org.jetbrains.kotlin.ir.expressions.impl.IrElseBranchImpl $r31, $r65;
        org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl $r32;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r33, $r41;
        org.jetbrains.kotlin.ir.descriptors.IrBuiltIns $r34, $r42;
        org.jetbrains.kotlin.ir.expressions.IrConstKind$Boolean $r36;
        org.jetbrains.kotlin.ir.expressions.IrConstKind $r37;
        java.lang.Boolean $r38;
        org.jetbrains.kotlin.ir.expressions.impl.IrBlockImpl $r39;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope $r48, $r53, $r60, r71, r72;
        org.jetbrains.kotlin.ir.expressions.impl.IrBranchImpl $r57;
        java.lang.Iterable $r73;
        java.util.Collection $r83;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrWhen;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "expression");

        $z2 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean isInComposableScope()>();

        if $z2 != 0 goto label01;

        $r67 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: org.jetbrains.kotlin.ir.expressions.IrExpression visitWhen(org.jetbrains.kotlin.ir.expressions.IrWhen)>(r1);

        return $r67;

     label01:
        z19 = 0;

        z20 = 0;

        z21 = 0;

        $r10 = new org.jetbrains.kotlin.ir.expressions.impl.IrWhenImpl;

        $i2 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrWhen: int getStartOffset()>();

        $i3 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrWhen: int getEndOffset()>();

        $r11 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrWhen: org.jetbrains.kotlin.ir.types.IrType getType()>();

        $r12 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrWhen: org.jetbrains.kotlin.ir.expressions.IrStatementOrigin getOrigin()>();

        specialinvoke $r10.<org.jetbrains.kotlin.ir.expressions.impl.IrWhenImpl: void <init>(int,int,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin)>($i2, $i3, $r11, $r12);

        r2 = $r10;

        z22 = 0;

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        r3 = (java.util.List) $r13;

        z23 = 0;

        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>()>();

        r69 = (java.util.List) $r14;

        r70 = r0;

        $r15 = new androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$WhenScope;

        specialinvoke $r15.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$WhenScope: void <init>()>();

        r71 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope) $r15;

        r72 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope access$getCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer)>(r70);

        staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void access$setCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r70, r71);

        virtualinvoke r71.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: void setParent(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r72);

        $i4 = virtualinvoke r72.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: int getLevel()>();

        $i5 = $i4 + 1;

        virtualinvoke r71.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: void setLevel(int)>($i5);

     label02:
        $r16 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrWhen: java.util.List getBranches()>();

        $r73 = (java.lang.Iterable) $r16;

        i11 = 0;

        r4 = interfaceinvoke $r73.<java.lang.Iterable: java.util.Iterator iterator()>();

     label03:
        $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label16;

        r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $i6 = i11;

        i11 = i11 + 1;

        i0 = $i6;

        z0 = 0;

        if i0 >= 0 goto label04;

        staticinvoke <kotlin.collections.CollectionsKt: void throwIndexOverflow()>();

     label04:
        r6 = (org.jetbrains.kotlin.ir.expressions.IrBranch) r5;

        i1 = i0;

        $z9 = r6 instanceof org.jetbrains.kotlin.ir.expressions.IrElseBranch;

        if $z9 == 0 goto label08;

        z21 = 1;

        $r58 = interfaceinvoke r6.<org.jetbrains.kotlin.ir.expressions.IrBranch: org.jetbrains.kotlin.ir.expressions.IrExpression getResult()>();

        $r59 = new androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BranchScope;

        specialinvoke $r59.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BranchScope: void <init>()>();

        $r60 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope) $r59;

        r74 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: kotlin.Pair transformWithScope(org.jetbrains.kotlin.ir.expressions.IrExpression,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>($r58, $r60);

        $r61 = virtualinvoke r74.<kotlin.Pair: java.lang.Object component1()>();

        r75 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BranchScope) $r61;

        $r62 = virtualinvoke r74.<kotlin.Pair: java.lang.Object component2()>();

        r76 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r62;

        $r63 = new androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BranchScope;

        specialinvoke $r63.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BranchScope: void <init>()>();

        interfaceinvoke r69.<java.util.List: boolean add(java.lang.Object)>($r63);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r75);

        if z20 != 0 goto label05;

        $z18 = virtualinvoke r75.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BranchScope: boolean getHasComposableCalls()>();

        if $z18 == 0 goto label06;

     label05:
        $z27 = 1;

        goto label07;

     label06:
        $z27 = 0;

     label07:
        z20 = $z27;

        $r64 = virtualinvoke r2.<org.jetbrains.kotlin.ir.expressions.impl.IrWhenImpl: java.util.List getBranches()>();

        $r65 = new org.jetbrains.kotlin.ir.expressions.impl.IrElseBranchImpl;

        $i9 = interfaceinvoke r6.<org.jetbrains.kotlin.ir.expressions.IrBranch: int getStartOffset()>();

        $i10 = interfaceinvoke r6.<org.jetbrains.kotlin.ir.expressions.IrBranch: int getEndOffset()>();

        $r66 = interfaceinvoke r6.<org.jetbrains.kotlin.ir.expressions.IrBranch: org.jetbrains.kotlin.ir.expressions.IrExpression getCondition()>();

        specialinvoke $r65.<org.jetbrains.kotlin.ir.expressions.impl.IrElseBranchImpl: void <init>(int,int,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>($i9, $i10, $r66, r76);

        interfaceinvoke $r64.<java.util.List: boolean add(java.lang.Object)>($r65);

        goto label15;

     label08:
        $r46 = interfaceinvoke r6.<org.jetbrains.kotlin.ir.expressions.IrBranch: org.jetbrains.kotlin.ir.expressions.IrExpression getCondition()>();

        $r47 = new androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BranchScope;

        specialinvoke $r47.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BranchScope: void <init>()>();

        $r48 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope) $r47;

        r77 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: kotlin.Pair transformWithScope(org.jetbrains.kotlin.ir.expressions.IrExpression,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>($r46, $r48);

        $r49 = virtualinvoke r77.<kotlin.Pair: java.lang.Object component1()>();

        r78 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BranchScope) $r49;

        $r50 = virtualinvoke r77.<kotlin.Pair: java.lang.Object component2()>();

        r79 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r50;

        $r51 = interfaceinvoke r6.<org.jetbrains.kotlin.ir.expressions.IrBranch: org.jetbrains.kotlin.ir.expressions.IrExpression getResult()>();

        $r52 = new androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BranchScope;

        specialinvoke $r52.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BranchScope: void <init>()>();

        $r53 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope) $r52;

        r7 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: kotlin.Pair transformWithScope(org.jetbrains.kotlin.ir.expressions.IrExpression,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>($r51, $r53);

        $r54 = virtualinvoke r7.<kotlin.Pair: java.lang.Object component1()>();

        r80 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BranchScope) $r54;

        $r55 = virtualinvoke r7.<kotlin.Pair: java.lang.Object component2()>();

        r8 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r55;

        interfaceinvoke r69.<java.util.List: boolean add(java.lang.Object)>(r78);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r80);

        if z19 != 0 goto label09;

        if i1 == 0 goto label10;

        $z14 = virtualinvoke r78.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BranchScope: boolean getHasComposableCalls()>();

        if $z14 == 0 goto label10;

     label09:
        $z28 = 1;

        goto label11;

     label10:
        $z28 = 0;

     label11:
        z19 = $z28;

        if z20 != 0 goto label12;

        $z13 = virtualinvoke r80.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BranchScope: boolean getHasComposableCalls()>();

        if $z13 == 0 goto label13;

     label12:
        $z29 = 1;

        goto label14;

     label13:
        $z29 = 0;

     label14:
        z20 = $z29;

        $r56 = virtualinvoke r2.<org.jetbrains.kotlin.ir.expressions.impl.IrWhenImpl: java.util.List getBranches()>();

        $r57 = new org.jetbrains.kotlin.ir.expressions.impl.IrBranchImpl;

        $i7 = interfaceinvoke r6.<org.jetbrains.kotlin.ir.expressions.IrBranch: int getStartOffset()>();

        $i8 = interfaceinvoke r6.<org.jetbrains.kotlin.ir.expressions.IrBranch: int getEndOffset()>();

        specialinvoke $r57.<org.jetbrains.kotlin.ir.expressions.impl.IrBranchImpl: void <init>(int,int,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>($i7, $i8, r79, r8);

        interfaceinvoke $r56.<java.util.List: boolean add(java.lang.Object)>($r57);

     label15:
        goto label03;

     label16:
        staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void access$setCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r70, r72);

        goto label19;

     label17:
        $r68 := @caughtexception;

        r9 = $r68;

     label18:
        staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: void access$setCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)>(r70, r72);

        throw r9;

     label19:
        r81 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$WhenScope) r71;

        if z21 != 0 goto label20;

        if z20 == 0 goto label20;

        if z19 != 0 goto label20;

        $r28 = new androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BranchScope;

        specialinvoke $r28.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BranchScope: void <init>()>();

        interfaceinvoke r69.<java.util.List: boolean add(java.lang.Object)>($r28);

        $r29 = new androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BranchScope;

        specialinvoke $r29.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BranchScope: void <init>()>();

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r29);

        $r30 = virtualinvoke r2.<org.jetbrains.kotlin.ir.expressions.impl.IrWhenImpl: java.util.List getBranches()>();

        $r31 = new org.jetbrains.kotlin.ir.expressions.impl.IrElseBranchImpl;

        $r32 = new org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl;

        $r33 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        $r34 = interfaceinvoke $r33.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.ir.descriptors.IrBuiltIns getIrBuiltIns()>();

        $r35 = virtualinvoke $r34.<org.jetbrains.kotlin.ir.descriptors.IrBuiltIns: org.jetbrains.kotlin.ir.types.IrType getBooleanType()>();

        $r36 = <org.jetbrains.kotlin.ir.expressions.IrConstKind$Boolean: org.jetbrains.kotlin.ir.expressions.IrConstKind$Boolean INSTANCE>;

        $r37 = (org.jetbrains.kotlin.ir.expressions.IrConstKind) $r36;

        $r38 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        specialinvoke $r32.<org.jetbrains.kotlin.ir.expressions.impl.IrConstImpl: void <init>(int,int,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrConstKind,java.lang.Object)>(-1, -1, $r35, $r37, $r38);

        $r40 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r32;

        $r39 = new org.jetbrains.kotlin.ir.expressions.impl.IrBlockImpl;

        $r41 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        $r42 = interfaceinvoke $r41.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.ir.descriptors.IrBuiltIns getIrBuiltIns()>();

        $r43 = virtualinvoke $r42.<org.jetbrains.kotlin.ir.descriptors.IrBuiltIns: org.jetbrains.kotlin.ir.types.IrType getUnitType()>();

        $r44 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        specialinvoke $r39.<org.jetbrains.kotlin.ir.expressions.impl.IrBlockImpl: void <init>(int,int,org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,java.util.List)>(-1, -1, $r43, null, $r44);

        $r45 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r39;

        specialinvoke $r31.<org.jetbrains.kotlin.ir.expressions.impl.IrElseBranchImpl: void <init>(int,int,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>(-1, -1, $r40, $r45);

        interfaceinvoke $r30.<java.util.List: boolean add(java.lang.Object)>($r31);

     label20:
        r82 = virtualinvoke r2.<org.jetbrains.kotlin.ir.expressions.impl.IrWhenImpl: java.util.List getBranches()>();

        z30 = 0;

        $i12 = 0;

        $r83 = (java.util.Collection) r82;

        i13 = interfaceinvoke $r83.<java.util.Collection: int size()>();

     label21:
        if $i12 >= i13 goto label26;

        $r19 = interfaceinvoke r82.<java.util.List: java.lang.Object get(int)>($i12);

        $r20 = interfaceinvoke r69.<java.util.List: java.lang.Object get(int)>($i12);

        $r21 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>($i12);

        $r84 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BranchScope) $r21;

        $r85 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BranchScope) $r20;

        $r86 = (org.jetbrains.kotlin.ir.expressions.IrBranch) $r19;

        z31 = 0;

        if z19 == 0 goto label22;

        $z5 = virtualinvoke $r85.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BranchScope: boolean getHasComposableCalls()>();

        if $z5 == 0 goto label22;

        $r25 = interfaceinvoke $r86.<org.jetbrains.kotlin.ir.expressions.IrBranch: org.jetbrains.kotlin.ir.expressions.IrExpression getCondition()>();

        $r26 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope) $r85;

        $r27 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression asReplaceableGroup(org.jetbrains.kotlin.ir.expressions.IrExpression,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope)>($r25, $r26);

        interfaceinvoke $r86.<org.jetbrains.kotlin.ir.expressions.IrBranch: void setCondition(org.jetbrains.kotlin.ir.expressions.IrExpression)>($r27);

     label22:
        if z20 == 0 goto label23;

        if z19 == 0 goto label24;

     label23:
        if z19 == 0 goto label25;

        $z4 = virtualinvoke $r84.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BranchScope: boolean getHasComposableCalls()>();

        if $z4 == 0 goto label25;

     label24:
        $r22 = interfaceinvoke $r86.<org.jetbrains.kotlin.ir.expressions.IrBranch: org.jetbrains.kotlin.ir.expressions.IrExpression getResult()>();

        $r23 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope) $r84;

        $r24 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression asReplaceableGroup(org.jetbrains.kotlin.ir.expressions.IrExpression,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope)>($r22, $r23);

        interfaceinvoke $r86.<org.jetbrains.kotlin.ir.expressions.IrBranch: void setResult(org.jetbrains.kotlin.ir.expressions.IrExpression)>($r24);

     label25:
        $i12 = $i12 + 1;

        goto label21;

     label26:
        if z19 == 0 goto label27;

        $r18 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r2;

        $r17 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope) r81;

        $r87 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression asCoalescableGroup(org.jetbrains.kotlin.ir.expressions.IrExpression,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope)>($r18, $r17);

        goto label28;

     label27:
        $r87 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r2;

     label28:
        return $r87;

        catch java.lang.Throwable from label02 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    public void <init>(org.jetbrains.kotlin.backend.common.extensions.IrPluginContext, org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper, org.jetbrains.kotlin.resolve.BindingTrace, boolean)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r0, r235, r241, r248, r255, r262, r269, r276, r283, r290, r297, r304, r311, r318, r325, r332, r339, r346, r359, r366, r373, r380;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext r1;
        org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper r2;
        org.jetbrains.kotlin.resolve.BindingTrace r3;
        boolean z0, z3, z4, z6, z7, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z35, z40, $z42, z44, z46, $z50, $z54, $z58, $z62, $z66, $z70, $z74, $z78, $z82, $z86, $z90, $z94, $z98, z99, $z100, z101, $z102, z103, z104, $z106, z107, z108, $z110, z111, $z115, $z119;
        java.lang.Object r4, $r19, $r168, $r223, $r228, r238, r245, r258, r265, r272, r279, r286, r293, r300, r307, r314, r321, r328, r335, r342, $r347, $r349, $r351, r352, $r361, r363, $r368, r370, r376, r383;
        org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor r5, $r158, $r166, r240, r246, r260, r267, r274, r281, r288, r295, r302, r309, r316, r323, r330, r337, r344, r350, $r353, r378, r385;
        org.jetbrains.kotlin.builtins.PrimitiveType r6, r7, $r231;
        kotlin.Pair r8, r9, $r252;
        org.jetbrains.kotlin.descriptors.ClassDescriptor $r10, $r22, $r32, $r41, $r50, $r59, $r68, $r77, $r86, $r95, $r104, $r113, $r122, $r134, $r146, $r171, $r180, $r189, $r201;
        org.jetbrains.kotlin.resolve.scopes.MemberScope $r11, $r23, $r33, $r42, $r51, $r60, $r69, $r78, $r87, $r96, $r105, $r114, $r123, $r135, $r147, $r160, $r172, $r181, $r190, $r202;
        org.jetbrains.kotlin.name.Name $r12, $r24, $r34, $r43, $r52, $r61, $r70, $r79, $r88, $r97, $r106, $r115, $r125, $r127, $r137, $r139, $r149, $r151, $r162, $r192, $r194, $r203, $r216, $r220, $r232;
        org.jetbrains.kotlin.incremental.components.NoLookupLocation $r13, $r25, $r35, $r44, $r53, $r62, $r71, $r80, $r89, $r98, $r107, $r116, $r128, $r140, $r152, $r163, $r195, $r204;
        org.jetbrains.kotlin.incremental.components.LookupLocation $r14, $r26, $r36, $r45, $r54, $r63, $r72, $r81, $r90, $r99, $r108, $r117, $r129, $r141, $r153, $r164, $r196, $r205;
        java.util.Collection $r15, $r27, $r37, $r46, $r55, $r64, $r73, $r82, $r91, $r100, $r109, $r118, $r130, $r142, $r154, $r165, $r176, $r185, $r197, $r206, $r243, $r249;
        java.util.NoSuchElementException $r16, $r38, $r47, $r56, $r65, $r74, $r83, $r92, $r101, $r110, $r119, $r131, $r143, $r155, $r177, $r186, $r198, $r207;
        java.lang.Throwable $r17, $r39, $r48, $r57, $r66, $r75, $r84, $r93, $r102, $r111, $r120, $r132, $r144, $r156, $r178, $r187, $r199, $r208, $r357;
        java.util.List $r18, $r40, $r49, $r58, $r67, $r76, $r85, $r94, $r103, $r112, $r121, $r133, $r145, $r157, $r167, $r200, $r209, $r213, $r222, $r226, $r227, r247, r253;
        org.jetbrains.kotlin.descriptors.ValueParameterDescriptor $r20, $r169, $r224, $r229;
        org.jetbrains.kotlin.types.KotlinType $r21, $r159, $r170, $r225, $r230;
        java.util.ArrayList $r28, $r29, $r212;
        java.lang.Iterable $r30, $r236, $r242, $r250, $r256, $r263, $r270, $r277, $r284, $r291, $r298, $r305, $r312, $r319, $r326, $r333, $r340, $r345, $r358, $r365, $r374, $r381;
        java.util.Map $r31;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        androidx.compose.compiler.plugins.kotlin.KtxNameConventions $r124, $r136, $r148, $r161, $r191;
        java.lang.String $r126, $r138, $r150, $r193, $r217, $r221, $r233, r234, r254, r261, r268, r275, r282, r289, r296, r303, r310, r317, r324, r331, r338, $r355, $r356, r372, r379;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$isSkippingDescriptor$1 $r173;
        kotlin.jvm.functions.Function1 $r174, $r183;
        org.jetbrains.kotlin.resolve.scopes.ResolutionScope $r175, $r184;
        org.jetbrains.kotlin.descriptors.PropertyDescriptor $r179, $r188, $r215, $r219;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$defaultsInvalidDescriptor$1 $r182;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$RootScope $r210;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope $r211;
        java.lang.NullPointerException $r214, $r218;
        java.util.Iterator $r237, $r244, r251, $r257, $r264, $r271, $r278, $r285, $r292, $r299, $r306, $r313, $r320, $r327, $r334, $r341, $r348, $r360, $r367, $r375, $r382;
        org.jetbrains.kotlin.descriptors.CallableMemberDescriptor r239, r259, r266, r273, r280, r287, r294, r301, r308, r315, r322, r329, r336, r343, r377, r384;
        java.lang.IllegalStateException $r354;
        org.jetbrains.kotlin.descriptors.DeclarationDescriptor $r362, $r369;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter0: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext;

        r2 := @parameter1: org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper;

        r3 := @parameter2: org.jetbrains.kotlin.resolve.BindingTrace;

        z0 := @parameter3: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "context");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "symbolRemapper");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "bindingTrace");

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.AbstractComposeLowering: void <init>(org.jetbrains.kotlin.backend.common.extensions.IrPluginContext,org.jetbrains.kotlin.ir.util.DeepCopySymbolRemapper,org.jetbrains.kotlin.resolve.BindingTrace)>(r1, r2, r3);

        $r10 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.ClassDescriptor getComposerTypeDescriptor()>();

        $r11 = interfaceinvoke $r10.<org.jetbrains.kotlin.descriptors.ClassDescriptor: org.jetbrains.kotlin.resolve.scopes.MemberScope getUnsubstitutedMemberScope()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r11, "composerTypeDescriptor\n \u2026.unsubstitutedMemberScope");

        r234 = "changed";

        r235 = r0;

        $r12 = staticinvoke <org.jetbrains.kotlin.name.Name: org.jetbrains.kotlin.name.Name identifier(java.lang.String)>(r234);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r12, "Name.identifier(name)");

        $r13 = <org.jetbrains.kotlin.incremental.components.NoLookupLocation: org.jetbrains.kotlin.incremental.components.NoLookupLocation FROM_BACKEND>;

        $r14 = (org.jetbrains.kotlin.incremental.components.LookupLocation) $r13;

        $r15 = interfaceinvoke $r11.<org.jetbrains.kotlin.resolve.scopes.MemberScope: java.util.Collection getContributedFunctions(org.jetbrains.kotlin.name.Name,org.jetbrains.kotlin.incremental.components.LookupLocation)>($r12, $r14);

        $r236 = (java.lang.Iterable) $r15;

        $r237 = interfaceinvoke $r236.<java.lang.Iterable: java.util.Iterator iterator()>();

     label001:
        $z9 = interfaceinvoke $r237.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label002;

        r238 = interfaceinvoke $r237.<java.util.Iterator: java.lang.Object next()>();

        r239 = (org.jetbrains.kotlin.descriptors.CallableMemberDescriptor) r238;

        $r18 = interfaceinvoke r239.<org.jetbrains.kotlin.descriptors.CallableMemberDescriptor: java.util.List getValueParameters()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r18, "it.valueParameters");

        $r19 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object first(java.util.List)>($r18);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r19, "it.valueParameters.first()");

        $r20 = (org.jetbrains.kotlin.descriptors.ValueParameterDescriptor) $r19;

        $r21 = interfaceinvoke $r20.<org.jetbrains.kotlin.descriptors.ValueParameterDescriptor: org.jetbrains.kotlin.types.KotlinType getType()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r21, "it.valueParameters.first().type");

        $z10 = staticinvoke <org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt: boolean isNullableAny(org.jetbrains.kotlin.types.KotlinType)>($r21);

        if $z10 == 0 goto label001;

        goto label003;

     label002:
        $r16 = new java.util.NoSuchElementException;

        specialinvoke $r16.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Collection contains no element matching the predicate.");

        $r17 = (java.lang.Throwable) $r16;

        throw $r17;

     label003:
        r240 = (org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor) r238;

        r235.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor changedDescriptor> = r240;

        $r22 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.ClassDescriptor getComposerTypeDescriptor()>();

        $r23 = interfaceinvoke $r22.<org.jetbrains.kotlin.descriptors.ClassDescriptor: org.jetbrains.kotlin.resolve.scopes.MemberScope getUnsubstitutedMemberScope()>();

        $r24 = staticinvoke <org.jetbrains.kotlin.name.Name: org.jetbrains.kotlin.name.Name identifier(java.lang.String)>("changed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r24, "Name.identifier(\"changed\")");

        $r25 = <org.jetbrains.kotlin.incremental.components.NoLookupLocation: org.jetbrains.kotlin.incremental.components.NoLookupLocation FROM_BACKEND>;

        $r26 = (org.jetbrains.kotlin.incremental.components.LookupLocation) $r25;

        $r27 = interfaceinvoke $r23.<org.jetbrains.kotlin.resolve.scopes.MemberScope: java.util.Collection getContributedFunctions(org.jetbrains.kotlin.name.Name,org.jetbrains.kotlin.incremental.components.LookupLocation)>($r24, $r26);

        r241 = r0;

        z40 = 0;

        $r242 = (java.lang.Iterable) $r27;

        $r28 = new java.util.ArrayList;

        specialinvoke $r28.<java.util.ArrayList: void <init>()>();

        $r243 = (java.util.Collection) $r28;

        $r244 = interfaceinvoke $r242.<java.lang.Iterable: java.util.Iterator iterator()>();

     label004:
        $z42 = interfaceinvoke $r244.<java.util.Iterator: boolean hasNext()>();

        if $z42 == 0 goto label005;

        r245 = interfaceinvoke $r244.<java.util.Iterator: java.lang.Object next()>();

        r246 = (org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor) r245;

        $r232 = interfaceinvoke r246.<org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor: org.jetbrains.kotlin.name.Name getName()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r232, "it.name");

        $r233 = virtualinvoke $r232.<org.jetbrains.kotlin.name.Name: java.lang.String getIdentifier()>();

        $z35 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r233, "changed");

        if $z35 == 0 goto label004;

        interfaceinvoke $r243.<java.util.Collection: boolean add(java.lang.Object)>(r245);

        goto label004;

     label005:
        r247 = (java.util.List) $r243;

        r248 = r241;

        z44 = 0;

        $r29 = new java.util.ArrayList;

        specialinvoke $r29.<java.util.ArrayList: void <init>()>();

        $r249 = (java.util.Collection) $r29;

        $r250 = (java.lang.Iterable) r247;

        z46 = 0;

        r251 = interfaceinvoke $r250.<java.lang.Iterable: java.util.Iterator iterator()>();

     label006:
        $z11 = interfaceinvoke r251.<java.util.Iterator: boolean hasNext()>();

        if $z11 == 0 goto label010;

        r4 = interfaceinvoke r251.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor) r4;

        $r227 = interfaceinvoke r5.<org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor: java.util.List getValueParameters()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r227, "desc.valueParameters");

        $r228 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object first(java.util.List)>($r227);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r228, "desc.valueParameters.first()");

        $r229 = (org.jetbrains.kotlin.descriptors.ValueParameterDescriptor) $r228;

        $r230 = interfaceinvoke $r229.<org.jetbrains.kotlin.descriptors.ValueParameterDescriptor: org.jetbrains.kotlin.types.KotlinType getType()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r230, "desc.valueParameters.first().type");

        $r231 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.builtins.PrimitiveType toPrimitiveType(org.jetbrains.kotlin.types.KotlinType)>($r230);

        if $r231 == null goto label007;

        r6 = $r231;

        z3 = 0;

        z4 = 0;

        r7 = r6;

        $r252 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>(r7, r5);

        goto label008;

     label007:
        $r252 = null;

     label008:
        if $r252 == null goto label009;

        r8 = $r252;

        z6 = 0;

        z7 = 0;

        r9 = r8;

        interfaceinvoke $r249.<java.util.Collection: boolean add(java.lang.Object)>(r9);

        goto label009;

     label009:
        goto label006;

     label010:
        r253 = (java.util.List) $r249;

        $r30 = (java.lang.Iterable) r253;

        $r31 = staticinvoke <kotlin.collections.MapsKt: java.util.Map toMap(java.lang.Iterable)>($r30);

        r248.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: java.util.Map changedDescriptors> = $r31;

        $r32 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.ClassDescriptor getComposerTypeDescriptor()>();

        $r33 = interfaceinvoke $r32.<org.jetbrains.kotlin.descriptors.ClassDescriptor: org.jetbrains.kotlin.resolve.scopes.MemberScope getUnsubstitutedMemberScope()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r33, "composerTypeDescriptor\n \u2026.unsubstitutedMemberScope");

        r254 = "skipToGroupEnd";

        r255 = r0;

        $r34 = staticinvoke <org.jetbrains.kotlin.name.Name: org.jetbrains.kotlin.name.Name identifier(java.lang.String)>(r254);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r34, "Name.identifier(name)");

        $r35 = <org.jetbrains.kotlin.incremental.components.NoLookupLocation: org.jetbrains.kotlin.incremental.components.NoLookupLocation FROM_BACKEND>;

        $r36 = (org.jetbrains.kotlin.incremental.components.LookupLocation) $r35;

        $r37 = interfaceinvoke $r33.<org.jetbrains.kotlin.resolve.scopes.MemberScope: java.util.Collection getContributedFunctions(org.jetbrains.kotlin.name.Name,org.jetbrains.kotlin.incremental.components.LookupLocation)>($r34, $r36);

        $r256 = (java.lang.Iterable) $r37;

        $r257 = interfaceinvoke $r256.<java.lang.Iterable: java.util.Iterator iterator()>();

     label011:
        $z12 = interfaceinvoke $r257.<java.util.Iterator: boolean hasNext()>();

        if $z12 == 0 goto label014;

        r258 = interfaceinvoke $r257.<java.util.Iterator: java.lang.Object next()>();

        r259 = (org.jetbrains.kotlin.descriptors.CallableMemberDescriptor) r258;

        $r40 = interfaceinvoke r259.<org.jetbrains.kotlin.descriptors.CallableMemberDescriptor: java.util.List getValueParameters()>();

        $i0 = interfaceinvoke $r40.<java.util.List: int size()>();

        if $i0 != 0 goto label012;

        $z50 = 1;

        goto label013;

     label012:
        $z50 = 0;

     label013:
        if $z50 == 0 goto label011;

        goto label015;

     label014:
        $r38 = new java.util.NoSuchElementException;

        specialinvoke $r38.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Collection contains no element matching the predicate.");

        $r39 = (java.lang.Throwable) $r38;

        throw $r39;

     label015:
        r260 = (org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor) r258;

        r255.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor skipToGroupEndDescriptor> = r260;

        $r41 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.ClassDescriptor getComposerTypeDescriptor()>();

        $r42 = interfaceinvoke $r41.<org.jetbrains.kotlin.descriptors.ClassDescriptor: org.jetbrains.kotlin.resolve.scopes.MemberScope getUnsubstitutedMemberScope()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r42, "composerTypeDescriptor\n \u2026.unsubstitutedMemberScope");

        r261 = "skipCurrentGroup";

        r262 = r0;

        $r43 = staticinvoke <org.jetbrains.kotlin.name.Name: org.jetbrains.kotlin.name.Name identifier(java.lang.String)>(r261);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r43, "Name.identifier(name)");

        $r44 = <org.jetbrains.kotlin.incremental.components.NoLookupLocation: org.jetbrains.kotlin.incremental.components.NoLookupLocation FROM_BACKEND>;

        $r45 = (org.jetbrains.kotlin.incremental.components.LookupLocation) $r44;

        $r46 = interfaceinvoke $r42.<org.jetbrains.kotlin.resolve.scopes.MemberScope: java.util.Collection getContributedFunctions(org.jetbrains.kotlin.name.Name,org.jetbrains.kotlin.incremental.components.LookupLocation)>($r43, $r45);

        $r263 = (java.lang.Iterable) $r46;

        $r264 = interfaceinvoke $r263.<java.lang.Iterable: java.util.Iterator iterator()>();

     label016:
        $z13 = interfaceinvoke $r264.<java.util.Iterator: boolean hasNext()>();

        if $z13 == 0 goto label019;

        r265 = interfaceinvoke $r264.<java.util.Iterator: java.lang.Object next()>();

        r266 = (org.jetbrains.kotlin.descriptors.CallableMemberDescriptor) r265;

        $r49 = interfaceinvoke r266.<org.jetbrains.kotlin.descriptors.CallableMemberDescriptor: java.util.List getValueParameters()>();

        $i1 = interfaceinvoke $r49.<java.util.List: int size()>();

        if $i1 != 0 goto label017;

        $z54 = 1;

        goto label018;

     label017:
        $z54 = 0;

     label018:
        if $z54 == 0 goto label016;

        goto label020;

     label019:
        $r47 = new java.util.NoSuchElementException;

        specialinvoke $r47.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Collection contains no element matching the predicate.");

        $r48 = (java.lang.Throwable) $r47;

        throw $r48;

     label020:
        r267 = (org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor) r265;

        r262.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor skipCurrentGroupDescriptor> = r267;

        $r50 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.ClassDescriptor getComposerTypeDescriptor()>();

        $r51 = interfaceinvoke $r50.<org.jetbrains.kotlin.descriptors.ClassDescriptor: org.jetbrains.kotlin.resolve.scopes.MemberScope getUnsubstitutedMemberScope()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r51, "composerTypeDescriptor\n \u2026.unsubstitutedMemberScope");

        r268 = "startReplaceableGroup";

        r269 = r0;

        $r52 = staticinvoke <org.jetbrains.kotlin.name.Name: org.jetbrains.kotlin.name.Name identifier(java.lang.String)>(r268);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r52, "Name.identifier(name)");

        $r53 = <org.jetbrains.kotlin.incremental.components.NoLookupLocation: org.jetbrains.kotlin.incremental.components.NoLookupLocation FROM_BACKEND>;

        $r54 = (org.jetbrains.kotlin.incremental.components.LookupLocation) $r53;

        $r55 = interfaceinvoke $r51.<org.jetbrains.kotlin.resolve.scopes.MemberScope: java.util.Collection getContributedFunctions(org.jetbrains.kotlin.name.Name,org.jetbrains.kotlin.incremental.components.LookupLocation)>($r52, $r54);

        $r270 = (java.lang.Iterable) $r55;

        $r271 = interfaceinvoke $r270.<java.lang.Iterable: java.util.Iterator iterator()>();

     label021:
        $z14 = interfaceinvoke $r271.<java.util.Iterator: boolean hasNext()>();

        if $z14 == 0 goto label024;

        r272 = interfaceinvoke $r271.<java.util.Iterator: java.lang.Object next()>();

        r273 = (org.jetbrains.kotlin.descriptors.CallableMemberDescriptor) r272;

        $r58 = interfaceinvoke r273.<org.jetbrains.kotlin.descriptors.CallableMemberDescriptor: java.util.List getValueParameters()>();

        $i2 = interfaceinvoke $r58.<java.util.List: int size()>();

        if $i2 != 1 goto label022;

        $z58 = 1;

        goto label023;

     label022:
        $z58 = 0;

     label023:
        if $z58 == 0 goto label021;

        goto label025;

     label024:
        $r56 = new java.util.NoSuchElementException;

        specialinvoke $r56.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Collection contains no element matching the predicate.");

        $r57 = (java.lang.Throwable) $r56;

        throw $r57;

     label025:
        r274 = (org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor) r272;

        r269.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor startReplaceableDescriptor> = r274;

        $r59 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.ClassDescriptor getComposerTypeDescriptor()>();

        $r60 = interfaceinvoke $r59.<org.jetbrains.kotlin.descriptors.ClassDescriptor: org.jetbrains.kotlin.resolve.scopes.MemberScope getUnsubstitutedMemberScope()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r60, "composerTypeDescriptor\n \u2026.unsubstitutedMemberScope");

        r275 = "startReplaceableGroup";

        r276 = r0;

        $r61 = staticinvoke <org.jetbrains.kotlin.name.Name: org.jetbrains.kotlin.name.Name identifier(java.lang.String)>(r275);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r61, "Name.identifier(name)");

        $r62 = <org.jetbrains.kotlin.incremental.components.NoLookupLocation: org.jetbrains.kotlin.incremental.components.NoLookupLocation FROM_BACKEND>;

        $r63 = (org.jetbrains.kotlin.incremental.components.LookupLocation) $r62;

        $r64 = interfaceinvoke $r60.<org.jetbrains.kotlin.resolve.scopes.MemberScope: java.util.Collection getContributedFunctions(org.jetbrains.kotlin.name.Name,org.jetbrains.kotlin.incremental.components.LookupLocation)>($r61, $r63);

        $r277 = (java.lang.Iterable) $r64;

        $r278 = interfaceinvoke $r277.<java.lang.Iterable: java.util.Iterator iterator()>();

     label026:
        $z15 = interfaceinvoke $r278.<java.util.Iterator: boolean hasNext()>();

        if $z15 == 0 goto label029;

        r279 = interfaceinvoke $r278.<java.util.Iterator: java.lang.Object next()>();

        r280 = (org.jetbrains.kotlin.descriptors.CallableMemberDescriptor) r279;

        $r67 = interfaceinvoke r280.<org.jetbrains.kotlin.descriptors.CallableMemberDescriptor: java.util.List getValueParameters()>();

        $i3 = interfaceinvoke $r67.<java.util.List: int size()>();

        if $i3 != 2 goto label027;

        $z62 = 1;

        goto label028;

     label027:
        $z62 = 0;

     label028:
        if $z62 == 0 goto label026;

        goto label030;

     label029:
        $r65 = new java.util.NoSuchElementException;

        specialinvoke $r65.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Collection contains no element matching the predicate.");

        $r66 = (java.lang.Throwable) $r65;

        throw $r66;

     label030:
        r281 = (org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor) r279;

        r276.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor startReplaceableSourceDescriptor> = r281;

        $r68 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.ClassDescriptor getComposerTypeDescriptor()>();

        $r69 = interfaceinvoke $r68.<org.jetbrains.kotlin.descriptors.ClassDescriptor: org.jetbrains.kotlin.resolve.scopes.MemberScope getUnsubstitutedMemberScope()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r69, "composerTypeDescriptor\n \u2026.unsubstitutedMemberScope");

        r282 = "endReplaceableGroup";

        r283 = r0;

        $r70 = staticinvoke <org.jetbrains.kotlin.name.Name: org.jetbrains.kotlin.name.Name identifier(java.lang.String)>(r282);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r70, "Name.identifier(name)");

        $r71 = <org.jetbrains.kotlin.incremental.components.NoLookupLocation: org.jetbrains.kotlin.incremental.components.NoLookupLocation FROM_BACKEND>;

        $r72 = (org.jetbrains.kotlin.incremental.components.LookupLocation) $r71;

        $r73 = interfaceinvoke $r69.<org.jetbrains.kotlin.resolve.scopes.MemberScope: java.util.Collection getContributedFunctions(org.jetbrains.kotlin.name.Name,org.jetbrains.kotlin.incremental.components.LookupLocation)>($r70, $r72);

        $r284 = (java.lang.Iterable) $r73;

        $r285 = interfaceinvoke $r284.<java.lang.Iterable: java.util.Iterator iterator()>();

     label031:
        $z16 = interfaceinvoke $r285.<java.util.Iterator: boolean hasNext()>();

        if $z16 == 0 goto label034;

        r286 = interfaceinvoke $r285.<java.util.Iterator: java.lang.Object next()>();

        r287 = (org.jetbrains.kotlin.descriptors.CallableMemberDescriptor) r286;

        $r76 = interfaceinvoke r287.<org.jetbrains.kotlin.descriptors.CallableMemberDescriptor: java.util.List getValueParameters()>();

        $i4 = interfaceinvoke $r76.<java.util.List: int size()>();

        if $i4 != 0 goto label032;

        $z66 = 1;

        goto label033;

     label032:
        $z66 = 0;

     label033:
        if $z66 == 0 goto label031;

        goto label035;

     label034:
        $r74 = new java.util.NoSuchElementException;

        specialinvoke $r74.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Collection contains no element matching the predicate.");

        $r75 = (java.lang.Throwable) $r74;

        throw $r75;

     label035:
        r288 = (org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor) r286;

        r283.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor endReplaceableDescriptor> = r288;

        $r77 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.ClassDescriptor getComposerTypeDescriptor()>();

        $r78 = interfaceinvoke $r77.<org.jetbrains.kotlin.descriptors.ClassDescriptor: org.jetbrains.kotlin.resolve.scopes.MemberScope getUnsubstitutedMemberScope()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r78, "composerTypeDescriptor\n \u2026.unsubstitutedMemberScope");

        r289 = "startDefaults";

        r290 = r0;

        $r79 = staticinvoke <org.jetbrains.kotlin.name.Name: org.jetbrains.kotlin.name.Name identifier(java.lang.String)>(r289);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r79, "Name.identifier(name)");

        $r80 = <org.jetbrains.kotlin.incremental.components.NoLookupLocation: org.jetbrains.kotlin.incremental.components.NoLookupLocation FROM_BACKEND>;

        $r81 = (org.jetbrains.kotlin.incremental.components.LookupLocation) $r80;

        $r82 = interfaceinvoke $r78.<org.jetbrains.kotlin.resolve.scopes.MemberScope: java.util.Collection getContributedFunctions(org.jetbrains.kotlin.name.Name,org.jetbrains.kotlin.incremental.components.LookupLocation)>($r79, $r81);

        $r291 = (java.lang.Iterable) $r82;

        $r292 = interfaceinvoke $r291.<java.lang.Iterable: java.util.Iterator iterator()>();

     label036:
        $z17 = interfaceinvoke $r292.<java.util.Iterator: boolean hasNext()>();

        if $z17 == 0 goto label039;

        r293 = interfaceinvoke $r292.<java.util.Iterator: java.lang.Object next()>();

        r294 = (org.jetbrains.kotlin.descriptors.CallableMemberDescriptor) r293;

        $r85 = interfaceinvoke r294.<org.jetbrains.kotlin.descriptors.CallableMemberDescriptor: java.util.List getValueParameters()>();

        $i5 = interfaceinvoke $r85.<java.util.List: int size()>();

        if $i5 != 0 goto label037;

        $z70 = 1;

        goto label038;

     label037:
        $z70 = 0;

     label038:
        if $z70 == 0 goto label036;

        goto label040;

     label039:
        $r83 = new java.util.NoSuchElementException;

        specialinvoke $r83.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Collection contains no element matching the predicate.");

        $r84 = (java.lang.Throwable) $r83;

        throw $r84;

     label040:
        r295 = (org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor) r293;

        r290.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor startDefaultsDescriptor> = r295;

        $r86 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.ClassDescriptor getComposerTypeDescriptor()>();

        $r87 = interfaceinvoke $r86.<org.jetbrains.kotlin.descriptors.ClassDescriptor: org.jetbrains.kotlin.resolve.scopes.MemberScope getUnsubstitutedMemberScope()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r87, "composerTypeDescriptor\n \u2026.unsubstitutedMemberScope");

        r296 = "endDefaults";

        r297 = r0;

        $r88 = staticinvoke <org.jetbrains.kotlin.name.Name: org.jetbrains.kotlin.name.Name identifier(java.lang.String)>(r296);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r88, "Name.identifier(name)");

        $r89 = <org.jetbrains.kotlin.incremental.components.NoLookupLocation: org.jetbrains.kotlin.incremental.components.NoLookupLocation FROM_BACKEND>;

        $r90 = (org.jetbrains.kotlin.incremental.components.LookupLocation) $r89;

        $r91 = interfaceinvoke $r87.<org.jetbrains.kotlin.resolve.scopes.MemberScope: java.util.Collection getContributedFunctions(org.jetbrains.kotlin.name.Name,org.jetbrains.kotlin.incremental.components.LookupLocation)>($r88, $r90);

        $r298 = (java.lang.Iterable) $r91;

        $r299 = interfaceinvoke $r298.<java.lang.Iterable: java.util.Iterator iterator()>();

     label041:
        $z18 = interfaceinvoke $r299.<java.util.Iterator: boolean hasNext()>();

        if $z18 == 0 goto label044;

        r300 = interfaceinvoke $r299.<java.util.Iterator: java.lang.Object next()>();

        r301 = (org.jetbrains.kotlin.descriptors.CallableMemberDescriptor) r300;

        $r94 = interfaceinvoke r301.<org.jetbrains.kotlin.descriptors.CallableMemberDescriptor: java.util.List getValueParameters()>();

        $i6 = interfaceinvoke $r94.<java.util.List: int size()>();

        if $i6 != 0 goto label042;

        $z74 = 1;

        goto label043;

     label042:
        $z74 = 0;

     label043:
        if $z74 == 0 goto label041;

        goto label045;

     label044:
        $r92 = new java.util.NoSuchElementException;

        specialinvoke $r92.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Collection contains no element matching the predicate.");

        $r93 = (java.lang.Throwable) $r92;

        throw $r93;

     label045:
        r302 = (org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor) r300;

        r297.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor endDefaultsDescriptor> = r302;

        $r95 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.ClassDescriptor getComposerTypeDescriptor()>();

        $r96 = interfaceinvoke $r95.<org.jetbrains.kotlin.descriptors.ClassDescriptor: org.jetbrains.kotlin.resolve.scopes.MemberScope getUnsubstitutedMemberScope()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r96, "composerTypeDescriptor\n \u2026.unsubstitutedMemberScope");

        r303 = "startMovableGroup";

        r304 = r0;

        $r97 = staticinvoke <org.jetbrains.kotlin.name.Name: org.jetbrains.kotlin.name.Name identifier(java.lang.String)>(r303);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r97, "Name.identifier(name)");

        $r98 = <org.jetbrains.kotlin.incremental.components.NoLookupLocation: org.jetbrains.kotlin.incremental.components.NoLookupLocation FROM_BACKEND>;

        $r99 = (org.jetbrains.kotlin.incremental.components.LookupLocation) $r98;

        $r100 = interfaceinvoke $r96.<org.jetbrains.kotlin.resolve.scopes.MemberScope: java.util.Collection getContributedFunctions(org.jetbrains.kotlin.name.Name,org.jetbrains.kotlin.incremental.components.LookupLocation)>($r97, $r99);

        $r305 = (java.lang.Iterable) $r100;

        $r306 = interfaceinvoke $r305.<java.lang.Iterable: java.util.Iterator iterator()>();

     label046:
        $z19 = interfaceinvoke $r306.<java.util.Iterator: boolean hasNext()>();

        if $z19 == 0 goto label049;

        r307 = interfaceinvoke $r306.<java.util.Iterator: java.lang.Object next()>();

        r308 = (org.jetbrains.kotlin.descriptors.CallableMemberDescriptor) r307;

        $r103 = interfaceinvoke r308.<org.jetbrains.kotlin.descriptors.CallableMemberDescriptor: java.util.List getValueParameters()>();

        $i7 = interfaceinvoke $r103.<java.util.List: int size()>();

        if $i7 != 2 goto label047;

        $z78 = 1;

        goto label048;

     label047:
        $z78 = 0;

     label048:
        if $z78 == 0 goto label046;

        goto label050;

     label049:
        $r101 = new java.util.NoSuchElementException;

        specialinvoke $r101.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Collection contains no element matching the predicate.");

        $r102 = (java.lang.Throwable) $r101;

        throw $r102;

     label050:
        r309 = (org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor) r307;

        r304.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor startMovableDescriptor> = r309;

        $r104 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.ClassDescriptor getComposerTypeDescriptor()>();

        $r105 = interfaceinvoke $r104.<org.jetbrains.kotlin.descriptors.ClassDescriptor: org.jetbrains.kotlin.resolve.scopes.MemberScope getUnsubstitutedMemberScope()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r105, "composerTypeDescriptor\n \u2026.unsubstitutedMemberScope");

        r310 = "startMovableGroup";

        r311 = r0;

        $r106 = staticinvoke <org.jetbrains.kotlin.name.Name: org.jetbrains.kotlin.name.Name identifier(java.lang.String)>(r310);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r106, "Name.identifier(name)");

        $r107 = <org.jetbrains.kotlin.incremental.components.NoLookupLocation: org.jetbrains.kotlin.incremental.components.NoLookupLocation FROM_BACKEND>;

        $r108 = (org.jetbrains.kotlin.incremental.components.LookupLocation) $r107;

        $r109 = interfaceinvoke $r105.<org.jetbrains.kotlin.resolve.scopes.MemberScope: java.util.Collection getContributedFunctions(org.jetbrains.kotlin.name.Name,org.jetbrains.kotlin.incremental.components.LookupLocation)>($r106, $r108);

        $r312 = (java.lang.Iterable) $r109;

        $r313 = interfaceinvoke $r312.<java.lang.Iterable: java.util.Iterator iterator()>();

     label051:
        $z20 = interfaceinvoke $r313.<java.util.Iterator: boolean hasNext()>();

        if $z20 == 0 goto label054;

        r314 = interfaceinvoke $r313.<java.util.Iterator: java.lang.Object next()>();

        r315 = (org.jetbrains.kotlin.descriptors.CallableMemberDescriptor) r314;

        $r112 = interfaceinvoke r315.<org.jetbrains.kotlin.descriptors.CallableMemberDescriptor: java.util.List getValueParameters()>();

        $i8 = interfaceinvoke $r112.<java.util.List: int size()>();

        if $i8 != 3 goto label052;

        $z82 = 1;

        goto label053;

     label052:
        $z82 = 0;

     label053:
        if $z82 == 0 goto label051;

        goto label055;

     label054:
        $r110 = new java.util.NoSuchElementException;

        specialinvoke $r110.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Collection contains no element matching the predicate.");

        $r111 = (java.lang.Throwable) $r110;

        throw $r111;

     label055:
        r316 = (org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor) r314;

        r311.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor startMovableSourceDescriptor> = r316;

        $r113 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.ClassDescriptor getComposerTypeDescriptor()>();

        $r114 = interfaceinvoke $r113.<org.jetbrains.kotlin.descriptors.ClassDescriptor: org.jetbrains.kotlin.resolve.scopes.MemberScope getUnsubstitutedMemberScope()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r114, "composerTypeDescriptor\n \u2026.unsubstitutedMemberScope");

        r317 = "endMovableGroup";

        r318 = r0;

        $r115 = staticinvoke <org.jetbrains.kotlin.name.Name: org.jetbrains.kotlin.name.Name identifier(java.lang.String)>(r317);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r115, "Name.identifier(name)");

        $r116 = <org.jetbrains.kotlin.incremental.components.NoLookupLocation: org.jetbrains.kotlin.incremental.components.NoLookupLocation FROM_BACKEND>;

        $r117 = (org.jetbrains.kotlin.incremental.components.LookupLocation) $r116;

        $r118 = interfaceinvoke $r114.<org.jetbrains.kotlin.resolve.scopes.MemberScope: java.util.Collection getContributedFunctions(org.jetbrains.kotlin.name.Name,org.jetbrains.kotlin.incremental.components.LookupLocation)>($r115, $r117);

        $r319 = (java.lang.Iterable) $r118;

        $r320 = interfaceinvoke $r319.<java.lang.Iterable: java.util.Iterator iterator()>();

     label056:
        $z21 = interfaceinvoke $r320.<java.util.Iterator: boolean hasNext()>();

        if $z21 == 0 goto label059;

        r321 = interfaceinvoke $r320.<java.util.Iterator: java.lang.Object next()>();

        r322 = (org.jetbrains.kotlin.descriptors.CallableMemberDescriptor) r321;

        $r121 = interfaceinvoke r322.<org.jetbrains.kotlin.descriptors.CallableMemberDescriptor: java.util.List getValueParameters()>();

        $i9 = interfaceinvoke $r121.<java.util.List: int size()>();

        if $i9 != 0 goto label057;

        $z86 = 1;

        goto label058;

     label057:
        $z86 = 0;

     label058:
        if $z86 == 0 goto label056;

        goto label060;

     label059:
        $r119 = new java.util.NoSuchElementException;

        specialinvoke $r119.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Collection contains no element matching the predicate.");

        $r120 = (java.lang.Throwable) $r119;

        throw $r120;

     label060:
        r323 = (org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor) r321;

        r318.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor endMovableDescriptor> = r323;

        $r122 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.ClassDescriptor getComposerTypeDescriptor()>();

        $r123 = interfaceinvoke $r122.<org.jetbrains.kotlin.descriptors.ClassDescriptor: org.jetbrains.kotlin.resolve.scopes.MemberScope getUnsubstitutedMemberScope()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r123, "composerTypeDescriptor\n \u2026.unsubstitutedMemberScope");

        $r124 = <androidx.compose.compiler.plugins.kotlin.KtxNameConventions: androidx.compose.compiler.plugins.kotlin.KtxNameConventions INSTANCE>;

        $r125 = virtualinvoke $r124.<androidx.compose.compiler.plugins.kotlin.KtxNameConventions: org.jetbrains.kotlin.name.Name getSTARTRESTARTGROUP()>();

        $r126 = virtualinvoke $r125.<org.jetbrains.kotlin.name.Name: java.lang.String getIdentifier()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r126, "KtxNameConventions.STARTRESTARTGROUP.identifier");

        r324 = $r126;

        r325 = r0;

        $r127 = staticinvoke <org.jetbrains.kotlin.name.Name: org.jetbrains.kotlin.name.Name identifier(java.lang.String)>(r324);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r127, "Name.identifier(name)");

        $r128 = <org.jetbrains.kotlin.incremental.components.NoLookupLocation: org.jetbrains.kotlin.incremental.components.NoLookupLocation FROM_BACKEND>;

        $r129 = (org.jetbrains.kotlin.incremental.components.LookupLocation) $r128;

        $r130 = interfaceinvoke $r123.<org.jetbrains.kotlin.resolve.scopes.MemberScope: java.util.Collection getContributedFunctions(org.jetbrains.kotlin.name.Name,org.jetbrains.kotlin.incremental.components.LookupLocation)>($r127, $r129);

        $r326 = (java.lang.Iterable) $r130;

        $r327 = interfaceinvoke $r326.<java.lang.Iterable: java.util.Iterator iterator()>();

     label061:
        $z22 = interfaceinvoke $r327.<java.util.Iterator: boolean hasNext()>();

        if $z22 == 0 goto label064;

        r328 = interfaceinvoke $r327.<java.util.Iterator: java.lang.Object next()>();

        r329 = (org.jetbrains.kotlin.descriptors.CallableMemberDescriptor) r328;

        $r133 = interfaceinvoke r329.<org.jetbrains.kotlin.descriptors.CallableMemberDescriptor: java.util.List getValueParameters()>();

        $i10 = interfaceinvoke $r133.<java.util.List: int size()>();

        if $i10 != 1 goto label062;

        $z90 = 1;

        goto label063;

     label062:
        $z90 = 0;

     label063:
        if $z90 == 0 goto label061;

        goto label065;

     label064:
        $r131 = new java.util.NoSuchElementException;

        specialinvoke $r131.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Collection contains no element matching the predicate.");

        $r132 = (java.lang.Throwable) $r131;

        throw $r132;

     label065:
        r330 = (org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor) r328;

        r325.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor startRestartGroupDescriptor> = r330;

        $r134 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.ClassDescriptor getComposerTypeDescriptor()>();

        $r135 = interfaceinvoke $r134.<org.jetbrains.kotlin.descriptors.ClassDescriptor: org.jetbrains.kotlin.resolve.scopes.MemberScope getUnsubstitutedMemberScope()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r135, "composerTypeDescriptor\n \u2026.unsubstitutedMemberScope");

        $r136 = <androidx.compose.compiler.plugins.kotlin.KtxNameConventions: androidx.compose.compiler.plugins.kotlin.KtxNameConventions INSTANCE>;

        $r137 = virtualinvoke $r136.<androidx.compose.compiler.plugins.kotlin.KtxNameConventions: org.jetbrains.kotlin.name.Name getSTARTRESTARTGROUP()>();

        $r138 = virtualinvoke $r137.<org.jetbrains.kotlin.name.Name: java.lang.String getIdentifier()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r138, "KtxNameConventions.STARTRESTARTGROUP.identifier");

        r331 = $r138;

        r332 = r0;

        $r139 = staticinvoke <org.jetbrains.kotlin.name.Name: org.jetbrains.kotlin.name.Name identifier(java.lang.String)>(r331);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r139, "Name.identifier(name)");

        $r140 = <org.jetbrains.kotlin.incremental.components.NoLookupLocation: org.jetbrains.kotlin.incremental.components.NoLookupLocation FROM_BACKEND>;

        $r141 = (org.jetbrains.kotlin.incremental.components.LookupLocation) $r140;

        $r142 = interfaceinvoke $r135.<org.jetbrains.kotlin.resolve.scopes.MemberScope: java.util.Collection getContributedFunctions(org.jetbrains.kotlin.name.Name,org.jetbrains.kotlin.incremental.components.LookupLocation)>($r139, $r141);

        $r333 = (java.lang.Iterable) $r142;

        $r334 = interfaceinvoke $r333.<java.lang.Iterable: java.util.Iterator iterator()>();

     label066:
        $z23 = interfaceinvoke $r334.<java.util.Iterator: boolean hasNext()>();

        if $z23 == 0 goto label069;

        r335 = interfaceinvoke $r334.<java.util.Iterator: java.lang.Object next()>();

        r336 = (org.jetbrains.kotlin.descriptors.CallableMemberDescriptor) r335;

        $r145 = interfaceinvoke r336.<org.jetbrains.kotlin.descriptors.CallableMemberDescriptor: java.util.List getValueParameters()>();

        $i11 = interfaceinvoke $r145.<java.util.List: int size()>();

        if $i11 != 2 goto label067;

        $z94 = 1;

        goto label068;

     label067:
        $z94 = 0;

     label068:
        if $z94 == 0 goto label066;

        goto label070;

     label069:
        $r143 = new java.util.NoSuchElementException;

        specialinvoke $r143.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Collection contains no element matching the predicate.");

        $r144 = (java.lang.Throwable) $r143;

        throw $r144;

     label070:
        r337 = (org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor) r335;

        r332.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor startRestartGroupSourceDescriptor> = r337;

        $r146 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.ClassDescriptor getComposerTypeDescriptor()>();

        $r147 = interfaceinvoke $r146.<org.jetbrains.kotlin.descriptors.ClassDescriptor: org.jetbrains.kotlin.resolve.scopes.MemberScope getUnsubstitutedMemberScope()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r147, "composerTypeDescriptor\n \u2026.unsubstitutedMemberScope");

        $r148 = <androidx.compose.compiler.plugins.kotlin.KtxNameConventions: androidx.compose.compiler.plugins.kotlin.KtxNameConventions INSTANCE>;

        $r149 = virtualinvoke $r148.<androidx.compose.compiler.plugins.kotlin.KtxNameConventions: org.jetbrains.kotlin.name.Name getENDRESTARTGROUP()>();

        $r150 = virtualinvoke $r149.<org.jetbrains.kotlin.name.Name: java.lang.String getIdentifier()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r150, "KtxNameConventions.ENDRESTARTGROUP.identifier");

        r338 = $r150;

        r339 = r0;

        $r151 = staticinvoke <org.jetbrains.kotlin.name.Name: org.jetbrains.kotlin.name.Name identifier(java.lang.String)>(r338);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r151, "Name.identifier(name)");

        $r152 = <org.jetbrains.kotlin.incremental.components.NoLookupLocation: org.jetbrains.kotlin.incremental.components.NoLookupLocation FROM_BACKEND>;

        $r153 = (org.jetbrains.kotlin.incremental.components.LookupLocation) $r152;

        $r154 = interfaceinvoke $r147.<org.jetbrains.kotlin.resolve.scopes.MemberScope: java.util.Collection getContributedFunctions(org.jetbrains.kotlin.name.Name,org.jetbrains.kotlin.incremental.components.LookupLocation)>($r151, $r153);

        $r340 = (java.lang.Iterable) $r154;

        $r341 = interfaceinvoke $r340.<java.lang.Iterable: java.util.Iterator iterator()>();

     label071:
        $z24 = interfaceinvoke $r341.<java.util.Iterator: boolean hasNext()>();

        if $z24 == 0 goto label074;

        r342 = interfaceinvoke $r341.<java.util.Iterator: java.lang.Object next()>();

        r343 = (org.jetbrains.kotlin.descriptors.CallableMemberDescriptor) r342;

        $r157 = interfaceinvoke r343.<org.jetbrains.kotlin.descriptors.CallableMemberDescriptor: java.util.List getValueParameters()>();

        $i12 = interfaceinvoke $r157.<java.util.List: int size()>();

        if $i12 != 0 goto label072;

        $z98 = 1;

        goto label073;

     label072:
        $z98 = 0;

     label073:
        if $z98 == 0 goto label071;

        goto label075;

     label074:
        $r155 = new java.util.NoSuchElementException;

        specialinvoke $r155.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Collection contains no element matching the predicate.");

        $r156 = (java.lang.Throwable) $r155;

        throw $r156;

     label075:
        r344 = (org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor) r342;

        r339.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor endRestartGroupDescriptor> = r344;

        $r158 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor endRestartGroupDescriptor>;

        $r159 = interfaceinvoke $r158.<org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor: org.jetbrains.kotlin.types.KotlinType getReturnType()>();

        if $r159 == null goto label084;

        $r160 = virtualinvoke $r159.<org.jetbrains.kotlin.types.KotlinType: org.jetbrains.kotlin.resolve.scopes.MemberScope getMemberScope()>();

        if $r160 == null goto label084;

        $r161 = <androidx.compose.compiler.plugins.kotlin.KtxNameConventions: androidx.compose.compiler.plugins.kotlin.KtxNameConventions INSTANCE>;

        $r162 = virtualinvoke $r161.<androidx.compose.compiler.plugins.kotlin.KtxNameConventions: org.jetbrains.kotlin.name.Name getUPDATE_SCOPE()>();

        $r163 = <org.jetbrains.kotlin.incremental.components.NoLookupLocation: org.jetbrains.kotlin.incremental.components.NoLookupLocation FROM_BACKEND>;

        $r164 = (org.jetbrains.kotlin.incremental.components.LookupLocation) $r163;

        $r165 = interfaceinvoke $r160.<org.jetbrains.kotlin.resolve.scopes.MemberScope: java.util.Collection getContributedFunctions(org.jetbrains.kotlin.name.Name,org.jetbrains.kotlin.incremental.components.LookupLocation)>($r162, $r164);

        if $r165 == null goto label084;

        $r345 = (java.lang.Iterable) $r165;

        r346 = r0;

        z99 = 0;

        $r347 = null;

        $z100 = 0;

        $r348 = interfaceinvoke $r345.<java.lang.Iterable: java.util.Iterator iterator()>();

     label076:
        $z25 = interfaceinvoke $r348.<java.util.Iterator: boolean hasNext()>();

        if $z25 == 0 goto label081;

        $r349 = interfaceinvoke $r348.<java.util.Iterator: java.lang.Object next()>();

        r350 = (org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor) $r349;

        z101 = 0;

        $r222 = interfaceinvoke r350.<org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor: java.util.List getValueParameters()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r222, "it.valueParameters");

        $r223 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object first(java.util.List)>($r222);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r223, "it.valueParameters.first()");

        $r224 = (org.jetbrains.kotlin.descriptors.ValueParameterDescriptor) $r223;

        $r225 = interfaceinvoke $r224.<org.jetbrains.kotlin.descriptors.ValueParameterDescriptor: org.jetbrains.kotlin.types.KotlinType getType()>();

        $r226 = virtualinvoke $r225.<org.jetbrains.kotlin.types.KotlinType: java.util.List getArguments()>();

        $i15 = interfaceinvoke $r226.<java.util.List: int size()>();

        if $i15 != 3 goto label077;

        $z102 = 1;

        goto label078;

     label077:
        $z102 = 0;

     label078:
        if $z102 == 0 goto label080;

        if $z100 == 0 goto label079;

        $r351 = null;

        goto label083;

     label079:
        $r347 = $r349;

        $z100 = 1;

     label080:
        goto label076;

     label081:
        if $z100 != 0 goto label082;

        $r351 = null;

        goto label083;

     label082:
        $r351 = $r347;

     label083:
        r352 = $r351;

        $r353 = (org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor) r352;

        if $r353 == null goto label084;

        goto label085;

     label084:
        z103 = 0;

        $r354 = new java.lang.IllegalStateException;

        $r355 = "new updateScope not found in result type of endRestartGroup";

        $r356 = virtualinvoke $r355.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r354.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r356);

        $r357 = (java.lang.Throwable) $r354;

        throw $r357;

     label085:
        r346.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor updateScopeDescriptor> = $r353;

        $r166 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor updateScopeDescriptor>;

        $r167 = interfaceinvoke $r166.<org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor: java.util.List getValueParameters()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r167, "updateScopeDescriptor.valueParameters");

        $r168 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object single(java.util.List)>($r167);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r168, "updateScopeDescriptor.valueParameters.single()");

        $r169 = (org.jetbrains.kotlin.descriptors.ValueParameterDescriptor) $r168;

        $r170 = interfaceinvoke $r169.<org.jetbrains.kotlin.descriptors.ValueParameterDescriptor: org.jetbrains.kotlin.types.KotlinType getType()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r170, "updateScopeDescriptor.va\u2026eParameters.single().type");

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.types.KotlinType updateScopeBlockType> = $r170;

        $r171 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.ClassDescriptor getComposerTypeDescriptor()>();

        $r172 = interfaceinvoke $r171.<org.jetbrains.kotlin.descriptors.ClassDescriptor: org.jetbrains.kotlin.resolve.scopes.MemberScope getUnsubstitutedMemberScope()>();

        $r175 = (org.jetbrains.kotlin.resolve.scopes.ResolutionScope) $r172;

        $r173 = <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$isSkippingDescriptor$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$isSkippingDescriptor$1 INSTANCE>;

        $r174 = (kotlin.jvm.functions.Function1) $r173;

        $r176 = staticinvoke <org.jetbrains.kotlin.resolve.scopes.ResolutionScope$DefaultImpls: java.util.Collection getContributedDescriptors$default(org.jetbrains.kotlin.resolve.scopes.ResolutionScope,org.jetbrains.kotlin.resolve.scopes.DescriptorKindFilter,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r175, null, $r174, 1, null);

        $r358 = (java.lang.Iterable) $r176;

        r359 = r0;

        z104 = 0;

        $r360 = interfaceinvoke $r358.<java.lang.Iterable: java.util.Iterator iterator()>();

     label086:
        $z26 = interfaceinvoke $r360.<java.util.Iterator: boolean hasNext()>();

        if $z26 == 0 goto label089;

        $r361 = interfaceinvoke $r360.<java.util.Iterator: java.lang.Object next()>();

        $r362 = (org.jetbrains.kotlin.descriptors.DeclarationDescriptor) $r361;

        $z27 = $r362 instanceof org.jetbrains.kotlin.descriptors.PropertyDescriptor;

        if $z27 == 0 goto label087;

        $r219 = (org.jetbrains.kotlin.descriptors.PropertyDescriptor) $r362;

        $r220 = interfaceinvoke $r219.<org.jetbrains.kotlin.descriptors.PropertyDescriptor: org.jetbrains.kotlin.name.Name getName()>();

        $r221 = virtualinvoke $r220.<org.jetbrains.kotlin.name.Name: java.lang.String asString()>();

        $z33 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r221, "skipping");

        if $z33 == 0 goto label087;

        $z106 = 1;

        goto label088;

     label087:
        $z106 = 0;

     label088:
        if $z106 == 0 goto label086;

        goto label090;

     label089:
        $r177 = new java.util.NoSuchElementException;

        specialinvoke $r177.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Collection contains no element matching the predicate.");

        $r178 = (java.lang.Throwable) $r177;

        throw $r178;

     label090:
        r363 = $r361;

        z107 = 0;

        if r363 != null goto label091;

        $r218 = new java.lang.NullPointerException;

        specialinvoke $r218.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type org.jetbrains.kotlin.descriptors.PropertyDescriptor");

        throw $r218;

     label091:
        $r179 = (org.jetbrains.kotlin.descriptors.PropertyDescriptor) r363;

        r359.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.PropertyDescriptor isSkippingDescriptor> = $r179;

        $r180 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.ClassDescriptor getComposerTypeDescriptor()>();

        $r181 = interfaceinvoke $r180.<org.jetbrains.kotlin.descriptors.ClassDescriptor: org.jetbrains.kotlin.resolve.scopes.MemberScope getUnsubstitutedMemberScope()>();

        $r184 = (org.jetbrains.kotlin.resolve.scopes.ResolutionScope) $r181;

        $r182 = <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$defaultsInvalidDescriptor$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$defaultsInvalidDescriptor$1 INSTANCE>;

        $r183 = (kotlin.jvm.functions.Function1) $r182;

        $r185 = staticinvoke <org.jetbrains.kotlin.resolve.scopes.ResolutionScope$DefaultImpls: java.util.Collection getContributedDescriptors$default(org.jetbrains.kotlin.resolve.scopes.ResolutionScope,org.jetbrains.kotlin.resolve.scopes.DescriptorKindFilter,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r184, null, $r183, 1, null);

        $r365 = (java.lang.Iterable) $r185;

        r366 = r0;

        z108 = 0;

        $r367 = interfaceinvoke $r365.<java.lang.Iterable: java.util.Iterator iterator()>();

     label092:
        $z28 = interfaceinvoke $r367.<java.util.Iterator: boolean hasNext()>();

        if $z28 == 0 goto label095;

        $r368 = interfaceinvoke $r367.<java.util.Iterator: java.lang.Object next()>();

        $r369 = (org.jetbrains.kotlin.descriptors.DeclarationDescriptor) $r368;

        $z29 = $r369 instanceof org.jetbrains.kotlin.descriptors.PropertyDescriptor;

        if $z29 == 0 goto label093;

        $r215 = (org.jetbrains.kotlin.descriptors.PropertyDescriptor) $r369;

        $r216 = interfaceinvoke $r215.<org.jetbrains.kotlin.descriptors.PropertyDescriptor: org.jetbrains.kotlin.name.Name getName()>();

        $r217 = virtualinvoke $r216.<org.jetbrains.kotlin.name.Name: java.lang.String asString()>();

        $z32 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r217, "defaultsInvalid");

        if $z32 == 0 goto label093;

        $z110 = 1;

        goto label094;

     label093:
        $z110 = 0;

     label094:
        if $z110 == 0 goto label092;

        goto label096;

     label095:
        $r186 = new java.util.NoSuchElementException;

        specialinvoke $r186.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Collection contains no element matching the predicate.");

        $r187 = (java.lang.Throwable) $r186;

        throw $r187;

     label096:
        r370 = $r368;

        z111 = 0;

        if r370 != null goto label097;

        $r214 = new java.lang.NullPointerException;

        specialinvoke $r214.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type org.jetbrains.kotlin.descriptors.PropertyDescriptor");

        throw $r214;

     label097:
        $r188 = (org.jetbrains.kotlin.descriptors.PropertyDescriptor) r370;

        r366.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.PropertyDescriptor defaultsInvalidDescriptor> = $r188;

        $r189 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.ClassDescriptor getComposerTypeDescriptor()>();

        $r190 = interfaceinvoke $r189.<org.jetbrains.kotlin.descriptors.ClassDescriptor: org.jetbrains.kotlin.resolve.scopes.MemberScope getUnsubstitutedMemberScope()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r190, "composerTypeDescriptor\n \u2026.unsubstitutedMemberScope");

        $r191 = <androidx.compose.compiler.plugins.kotlin.KtxNameConventions: androidx.compose.compiler.plugins.kotlin.KtxNameConventions INSTANCE>;

        $r192 = virtualinvoke $r191.<androidx.compose.compiler.plugins.kotlin.KtxNameConventions: org.jetbrains.kotlin.name.Name getJOINKEY()>();

        $r193 = virtualinvoke $r192.<org.jetbrains.kotlin.name.Name: java.lang.String getIdentifier()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r193, "KtxNameConventions.JOINKEY.identifier");

        r372 = $r193;

        r373 = r0;

        $r194 = staticinvoke <org.jetbrains.kotlin.name.Name: org.jetbrains.kotlin.name.Name identifier(java.lang.String)>(r372);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r194, "Name.identifier(name)");

        $r195 = <org.jetbrains.kotlin.incremental.components.NoLookupLocation: org.jetbrains.kotlin.incremental.components.NoLookupLocation FROM_BACKEND>;

        $r196 = (org.jetbrains.kotlin.incremental.components.LookupLocation) $r195;

        $r197 = interfaceinvoke $r190.<org.jetbrains.kotlin.resolve.scopes.MemberScope: java.util.Collection getContributedFunctions(org.jetbrains.kotlin.name.Name,org.jetbrains.kotlin.incremental.components.LookupLocation)>($r194, $r196);

        $r374 = (java.lang.Iterable) $r197;

        $r375 = interfaceinvoke $r374.<java.lang.Iterable: java.util.Iterator iterator()>();

     label098:
        $z30 = interfaceinvoke $r375.<java.util.Iterator: boolean hasNext()>();

        if $z30 == 0 goto label101;

        r376 = interfaceinvoke $r375.<java.util.Iterator: java.lang.Object next()>();

        r377 = (org.jetbrains.kotlin.descriptors.CallableMemberDescriptor) r376;

        $r200 = interfaceinvoke r377.<org.jetbrains.kotlin.descriptors.CallableMemberDescriptor: java.util.List getValueParameters()>();

        $i13 = interfaceinvoke $r200.<java.util.List: int size()>();

        if $i13 != 2 goto label099;

        $z115 = 1;

        goto label100;

     label099:
        $z115 = 0;

     label100:
        if $z115 == 0 goto label098;

        goto label102;

     label101:
        $r198 = new java.util.NoSuchElementException;

        specialinvoke $r198.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Collection contains no element matching the predicate.");

        $r199 = (java.lang.Throwable) $r198;

        throw $r199;

     label102:
        r378 = (org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor) r376;

        r373.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor joinKeyDescriptor> = r378;

        $r201 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.ClassDescriptor getComposerTypeDescriptor()>();

        $r202 = interfaceinvoke $r201.<org.jetbrains.kotlin.descriptors.ClassDescriptor: org.jetbrains.kotlin.resolve.scopes.MemberScope getUnsubstitutedMemberScope()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r202, "composerTypeDescriptor\n \u2026.unsubstitutedMemberScope");

        r379 = "cache";

        r380 = r0;

        $r203 = staticinvoke <org.jetbrains.kotlin.name.Name: org.jetbrains.kotlin.name.Name identifier(java.lang.String)>(r379);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r203, "Name.identifier(name)");

        $r204 = <org.jetbrains.kotlin.incremental.components.NoLookupLocation: org.jetbrains.kotlin.incremental.components.NoLookupLocation FROM_BACKEND>;

        $r205 = (org.jetbrains.kotlin.incremental.components.LookupLocation) $r204;

        $r206 = interfaceinvoke $r202.<org.jetbrains.kotlin.resolve.scopes.MemberScope: java.util.Collection getContributedFunctions(org.jetbrains.kotlin.name.Name,org.jetbrains.kotlin.incremental.components.LookupLocation)>($r203, $r205);

        $r381 = (java.lang.Iterable) $r206;

        $r382 = interfaceinvoke $r381.<java.lang.Iterable: java.util.Iterator iterator()>();

     label103:
        $z31 = interfaceinvoke $r382.<java.util.Iterator: boolean hasNext()>();

        if $z31 == 0 goto label106;

        r383 = interfaceinvoke $r382.<java.util.Iterator: java.lang.Object next()>();

        r384 = (org.jetbrains.kotlin.descriptors.CallableMemberDescriptor) r383;

        $r209 = interfaceinvoke r384.<org.jetbrains.kotlin.descriptors.CallableMemberDescriptor: java.util.List getValueParameters()>();

        $i14 = interfaceinvoke $r209.<java.util.List: int size()>();

        if $i14 != 2 goto label104;

        $z119 = 1;

        goto label105;

     label104:
        $z119 = 0;

     label105:
        if $z119 == 0 goto label103;

        goto label107;

     label106:
        $r207 = new java.util.NoSuchElementException;

        specialinvoke $r207.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Collection contains no element matching the predicate.");

        $r208 = (java.lang.Throwable) $r207;

        throw $r208;

     label107:
        r385 = (org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor) r383;

        r380.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor cacheDescriptor> = r385;

        $r210 = new androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$RootScope;

        specialinvoke $r210.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$RootScope: void <init>()>();

        $r211 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope) $r210;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope currentScope> = $r211;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean collectSourceInformation> = z0;

        $r212 = new java.util.ArrayList;

        specialinvoke $r212.<java.util.ArrayList: void <init>()>();

        $r213 = (java.util.List) $r212;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: java.util.List sourceFixups> = $r213;

        return;
    }

    public static final org.jetbrains.kotlin.ir.expressions.IrExpression access$irBitsForSlot(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer, int, int)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer $r0;
        int i0, i1;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r1;

        $r0 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = specialinvoke $r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irBitsForSlot(int,int)>(i0, i1);

        return $r1;
    }

    public static final org.jetbrains.kotlin.ir.declarations.impl.IrVariableImpl access$irTemporary(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer, org.jetbrains.kotlin.ir.expressions.IrExpression, java.lang.String, org.jetbrains.kotlin.ir.types.IrType, boolean, boolean)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer $r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression r1;
        java.lang.String r2;
        org.jetbrains.kotlin.ir.types.IrType r3;
        boolean z0, z1;
        org.jetbrains.kotlin.ir.declarations.impl.IrVariableImpl $r4;

        $r0 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter1: org.jetbrains.kotlin.ir.expressions.IrExpression;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: org.jetbrains.kotlin.ir.types.IrType;

        z0 := @parameter4: boolean;

        z1 := @parameter5: boolean;

        $r4 = specialinvoke $r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.declarations.impl.IrVariableImpl irTemporary(org.jetbrains.kotlin.ir.expressions.IrExpression,java.lang.String,org.jetbrains.kotlin.ir.types.IrType,boolean,boolean)>(r1, r2, r3, z0, z1);

        return $r4;
    }

    public static final org.jetbrains.kotlin.ir.expressions.IrExpression access$irEndReplaceableGroup(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer $r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r1;

        $r0 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        $r1 = specialinvoke $r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irEndReplaceableGroup()>();

        return $r1;
    }

    public static final org.jetbrains.kotlin.ir.expressions.IrExpression access$irEndRestartGroupAndUpdateScope(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer, androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope, androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue, androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue, int)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer $r0;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope r1;
        androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue r2;
        androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue r3;
        int i0;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r4;

        $r0 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        r2 := @parameter2: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue;

        r3 := @parameter3: androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue;

        i0 := @parameter4: int;

        $r4 = specialinvoke $r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irEndRestartGroupAndUpdateScope(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope,androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue,androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue,int)>(r1, r2, r3, i0);

        return $r4;
    }

    public static final org.jetbrains.kotlin.ir.expressions.IrExpression access$irChanged(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer, org.jetbrains.kotlin.ir.expressions.IrExpression)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer $r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression r1, $r2;

        $r0 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter1: org.jetbrains.kotlin.ir.expressions.IrExpression;

        $r2 = specialinvoke $r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irChanged(org.jetbrains.kotlin.ir.expressions.IrExpression)>(r1);

        return $r2;
    }

    public static final androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope access$getCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer $r0;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope $r1;

        $r0 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        $r1 = $r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope currentScope>;

        return $r1;
    }

    public static final void access$setCurrentScope$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer, androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer $r0;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope r1;

        $r0 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r1 := @parameter1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope;

        $r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope currentScope> = r1;

        return;
    }

androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$applySourceFixups$$inlined$sortBy$1
    public void <init>()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$applySourceFixups$$inlined$sortBy$1 r0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$applySourceFixups$$inlined$sortBy$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final int compare(java.lang.Object, java.lang.Object)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$applySourceFixups$$inlined$sortBy$1 r0;
        java.lang.Object r1, r2;
        boolean z0;
        java.lang.Comparable r3, $r8;
        java.lang.Integer r4, $r6;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope $r5, $r7;
        int $i0, $i1, $i2, $i3, $i4;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$SourceInfoFixup r9, r10;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$applySourceFixups$$inlined$sortBy$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        z0 = 0;

        r9 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$SourceInfoFixup) r1;

        $r5 = virtualinvoke r9.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$SourceInfoFixup: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope getScope()>();

        $i0 = virtualinvoke $r5.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: int getLevel()>();

        $i1 = neg $i0;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        r10 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$SourceInfoFixup) r2;

        r3 = (java.lang.Comparable) $r6;

        $r7 = virtualinvoke r10.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$SourceInfoFixup: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope getScope()>();

        $i2 = virtualinvoke $r7.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: int getLevel()>();

        $i3 = neg $i2;

        r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r8 = (java.lang.Comparable) r4;

        $i4 = staticinvoke <kotlin.comparisons.ComparisonsKt: int compareValues(java.lang.Comparable,java.lang.Comparable)>(r3, $r8);

        return $i4;
    }

androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asCoalescableGroup$1
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asCoalescableGroup$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asCoalescableGroup$1: org.jetbrains.kotlin.ir.expressions.IrExpression $this_asCoalescableGroup>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asCoalescableGroup$1: org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase $before>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asCoalescableGroup$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope $scope>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asCoalescableGroup$1: org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase $after>
    public volatile java.lang.Object invoke()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asCoalescableGroup$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asCoalescableGroup$1;

        virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asCoalescableGroup$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

    public final void invoke()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asCoalescableGroup$1 r0;
        org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase $r1, $r3, $r10;
        java.util.List $r2, $r4, $r11;
        boolean $z0;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r5, $r9, $r13;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope $r6;
        org.jetbrains.kotlin.ir.IrElement $r7;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer $r8, $r12;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asCoalescableGroup$1;

        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asCoalescableGroup$1: org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase $before>;

        $r2 = virtualinvoke $r1.<org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase: java.util.List getStatements()>();

        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asCoalescableGroup$1: org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase $before>;

        $r4 = virtualinvoke $r3.<org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase: java.util.List getStatements()>();

        $r8 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asCoalescableGroup$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r5 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asCoalescableGroup$1: org.jetbrains.kotlin.ir.expressions.IrExpression $this_asCoalescableGroup>;

        $r7 = (org.jetbrains.kotlin.ir.IrElement) $r5;

        $r6 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asCoalescableGroup$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope $scope>;

        $r9 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irStartReplaceableGroup$default(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,org.jetbrains.kotlin.ir.IrElement,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope,org.jetbrains.kotlin.ir.expressions.IrExpression,int,java.lang.Object)>($r8, $r7, $r6, null, 4, null);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r9);

        $r10 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asCoalescableGroup$1: org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase $after>;

        $r11 = virtualinvoke $r10.<org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase: java.util.List getStatements()>();

        $r12 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asCoalescableGroup$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r13 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression access$irEndReplaceableGroup(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer)>($r12);

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r13);

     label1:
        return;
    }

    void <init>(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer, org.jetbrains.kotlin.ir.expressions.IrExpression, org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase, androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope, org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asCoalescableGroup$1 r0;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r1;
        org.jetbrains.kotlin.ir.expressions.IrExpression r2;
        org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase r3, r5;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope r4;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asCoalescableGroup$1;

        r1 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r2 := @parameter1: org.jetbrains.kotlin.ir.expressions.IrExpression;

        r3 := @parameter2: org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase;

        r4 := @parameter3: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope;

        r5 := @parameter4: org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asCoalescableGroup$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0> = r1;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asCoalescableGroup$1: org.jetbrains.kotlin.ir.expressions.IrExpression $this_asCoalescableGroup> = r2;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asCoalescableGroup$1: org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase $before> = r3;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asCoalescableGroup$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope $scope> = r4;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asCoalescableGroup$1: org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase $after> = r5;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asCoalescableGroup$2
    public volatile java.lang.Object invoke()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asCoalescableGroup$2 r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asCoalescableGroup$2;

        $r1 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asCoalescableGroup$2: org.jetbrains.kotlin.ir.expressions.IrExpression invoke()>();

        return $r1;
    }

    public final org.jetbrains.kotlin.ir.expressions.IrExpression invoke()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asCoalescableGroup$2 r0;
        java.lang.Object $r1;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer $r2;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r3;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asCoalescableGroup$2;

        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asCoalescableGroup$2: java.lang.Object receiver>;

        $r2 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer) $r1;

        $r3 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression access$irEndReplaceableGroup(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer)>($r2);

        return $r3;
    }

    void <init>(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asCoalescableGroup$2 r0;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asCoalescableGroup$2;

        r1 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        specialinvoke r0.<kotlin.jvm.internal.FunctionReferenceImpl: void <init>(int,java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int)>(0, r1, class "Landroidx/compose/compiler/plugins/kotlin/lower/ComposableFunctionBodyTransformer;", "irEndReplaceableGroup", "irEndReplaceableGroup()Lorg/jetbrains/kotlin/ir/expressions/IrExpression;", 0);

        return;
    }

androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asReplaceableGroup$1
    public volatile java.lang.Object invoke()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asReplaceableGroup$1 r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asReplaceableGroup$1;

        $r1 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asReplaceableGroup$1: org.jetbrains.kotlin.ir.expressions.IrExpression invoke()>();

        return $r1;
    }

    public final org.jetbrains.kotlin.ir.expressions.IrExpression invoke()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asReplaceableGroup$1 r0;
        java.lang.Object $r1;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer $r2;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r3;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asReplaceableGroup$1;

        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asReplaceableGroup$1: java.lang.Object receiver>;

        $r2 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer) $r1;

        $r3 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression access$irEndReplaceableGroup(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer)>($r2);

        return $r3;
    }

    void <init>(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asReplaceableGroup$1 r0;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$asReplaceableGroup$1;

        r1 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        specialinvoke r0.<kotlin.jvm.internal.FunctionReferenceImpl: void <init>(int,java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int)>(0, r1, class "Landroidx/compose/compiler/plugins/kotlin/lower/ComposableFunctionBodyTransformer;", "irEndReplaceableGroup", "irEndReplaceableGroup()Lorg/jetbrains/kotlin/ir/expressions/IrExpression;", 0);

        return;
    }

androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$buildStatementsForSkippingAndDefaults$$inlined$forEachIndexed$lambda$1
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$buildStatementsForSkippingAndDefaults$$inlined$forEachIndexed$lambda$1: int $index>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$buildStatementsForSkippingAndDefaults$$inlined$forEachIndexed$lambda$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$buildStatementsForSkippingAndDefaults$$inlined$forEachIndexed$lambda$1: boolean $canSkipExecution$inlined>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$buildStatementsForSkippingAndDefaults$$inlined$forEachIndexed$lambda$1: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue $dirty$inlined>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$buildStatementsForSkippingAndDefaults$$inlined$forEachIndexed$lambda$1: boolean[] $unstableMask$inlined>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$buildStatementsForSkippingAndDefaults$$inlined$forEachIndexed$lambda$1: org.jetbrains.kotlin.ir.expressions.IrStatementContainer $skipPreamble$inlined>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$buildStatementsForSkippingAndDefaults$$inlined$forEachIndexed$lambda$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$ParametersScope $parametersScope$inlined>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$buildStatementsForSkippingAndDefaults$$inlined$forEachIndexed$lambda$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope $scope$inlined>
    void <init>(int, androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer, boolean, androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue, boolean[], org.jetbrains.kotlin.ir.expressions.IrStatementContainer, androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$ParametersScope, androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$buildStatementsForSkippingAndDefaults$$inlined$forEachIndexed$lambda$1 r0;
        int i0;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r1;
        boolean z0;
        androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue r2;
        boolean[] r3;
        org.jetbrains.kotlin.ir.expressions.IrStatementContainer r4;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$ParametersScope r5;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope r6;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$buildStatementsForSkippingAndDefaults$$inlined$forEachIndexed$lambda$1;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        z0 := @parameter2: boolean;

        r2 := @parameter3: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue;

        r3 := @parameter4: boolean[];

        r4 := @parameter5: org.jetbrains.kotlin.ir.expressions.IrStatementContainer;

        r5 := @parameter6: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$ParametersScope;

        r6 := @parameter7: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$buildStatementsForSkippingAndDefaults$$inlined$forEachIndexed$lambda$1: int $index> = i0;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$buildStatementsForSkippingAndDefaults$$inlined$forEachIndexed$lambda$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0> = r1;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$buildStatementsForSkippingAndDefaults$$inlined$forEachIndexed$lambda$1: boolean $canSkipExecution$inlined> = z0;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$buildStatementsForSkippingAndDefaults$$inlined$forEachIndexed$lambda$1: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue $dirty$inlined> = r2;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$buildStatementsForSkippingAndDefaults$$inlined$forEachIndexed$lambda$1: boolean[] $unstableMask$inlined> = r3;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$buildStatementsForSkippingAndDefaults$$inlined$forEachIndexed$lambda$1: org.jetbrains.kotlin.ir.expressions.IrStatementContainer $skipPreamble$inlined> = r4;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$buildStatementsForSkippingAndDefaults$$inlined$forEachIndexed$lambda$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$ParametersScope $parametersScope$inlined> = r5;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$buildStatementsForSkippingAndDefaults$$inlined$forEachIndexed$lambda$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope $scope$inlined> = r6;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$buildStatementsForSkippingAndDefaults$$inlined$forEachIndexed$lambda$1 r0;
        java.lang.Object r1;
        org.jetbrains.kotlin.ir.declarations.IrValueDeclaration $r2;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r3;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$buildStatementsForSkippingAndDefaults$$inlined$forEachIndexed$lambda$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.jetbrains.kotlin.ir.declarations.IrValueDeclaration) r1;

        $r3 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$buildStatementsForSkippingAndDefaults$$inlined$forEachIndexed$lambda$1: org.jetbrains.kotlin.ir.expressions.IrExpression invoke(org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)>($r2);

        return $r3;
    }

    public final org.jetbrains.kotlin.ir.expressions.IrExpression invoke(org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$buildStatementsForSkippingAndDefaults$$inlined$forEachIndexed$lambda$1 r0;
        org.jetbrains.kotlin.ir.declarations.IrValueDeclaration r1;
        androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue $r2;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer $r3, $r5, $r9, $r10, $r14, $r18;
        androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskVariable $r4;
        int $i0, $i1, $i2, $i3, $i4;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r6;
        org.jetbrains.kotlin.ir.descriptors.IrBuiltIns $r7;
        org.jetbrains.kotlin.ir.types.IrType $r8;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r11, $r12, $r17, $r20, $r22, $r23;
        androidx.compose.compiler.plugins.kotlin.lower.ParamState $r13, $r16;
        org.jetbrains.kotlin.ir.expressions.IrConst $r15, $r19;
        org.jetbrains.kotlin.ir.expressions.impl.IrIfThenElseImpl $r21;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$buildStatementsForSkippingAndDefaults$$inlined$forEachIndexed$lambda$1;

        r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrValueDeclaration;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "loopVar");

        $r2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$buildStatementsForSkippingAndDefaults$$inlined$forEachIndexed$lambda$1: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue $dirty$inlined>;

        $r4 = (androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskVariable) $r2;

        $i0 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$buildStatementsForSkippingAndDefaults$$inlined$forEachIndexed$lambda$1: int $index>;

        $r5 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$buildStatementsForSkippingAndDefaults$$inlined$forEachIndexed$lambda$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r3 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$buildStatementsForSkippingAndDefaults$$inlined$forEachIndexed$lambda$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r6 = virtualinvoke $r3.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        $r7 = interfaceinvoke $r6.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.ir.descriptors.IrBuiltIns getIrBuiltIns()>();

        $r8 = virtualinvoke $r7.<org.jetbrains.kotlin.ir.descriptors.IrBuiltIns: org.jetbrains.kotlin.ir.types.IrType getIntType()>();

        $r10 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$buildStatementsForSkippingAndDefaults$$inlined$forEachIndexed$lambda$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r9 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$buildStatementsForSkippingAndDefaults$$inlined$forEachIndexed$lambda$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r11 = virtualinvoke $r9.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irGet(org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)>(r1);

        $r12 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression access$irChanged(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r10, $r11);

        $r14 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$buildStatementsForSkippingAndDefaults$$inlined$forEachIndexed$lambda$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r13 = <androidx.compose.compiler.plugins.kotlin.lower.ParamState: androidx.compose.compiler.plugins.kotlin.lower.ParamState Different>;

        $i1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$buildStatementsForSkippingAndDefaults$$inlined$forEachIndexed$lambda$1: int $index>;

        $i2 = virtualinvoke $r13.<androidx.compose.compiler.plugins.kotlin.lower.ParamState: int bitsForSlot(int)>($i1);

        $r15 = virtualinvoke $r14.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrConst irConst(int)>($i2);

        $r17 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r15;

        $r18 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$buildStatementsForSkippingAndDefaults$$inlined$forEachIndexed$lambda$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r16 = <androidx.compose.compiler.plugins.kotlin.lower.ParamState: androidx.compose.compiler.plugins.kotlin.lower.ParamState Uncertain>;

        $i3 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$buildStatementsForSkippingAndDefaults$$inlined$forEachIndexed$lambda$1: int $index>;

        $i4 = virtualinvoke $r16.<androidx.compose.compiler.plugins.kotlin.lower.ParamState: int bitsForSlot(int)>($i3);

        $r19 = virtualinvoke $r18.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrConst irConst(int)>($i4);

        $r20 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r19;

        $r21 = virtualinvoke $r5.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.impl.IrIfThenElseImpl irIfThenElse(org.jetbrains.kotlin.ir.types.IrType,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r8, $r12, $r17, $r20);

        $r22 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r21;

        $r23 = interfaceinvoke $r4.<androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskVariable: org.jetbrains.kotlin.ir.expressions.IrExpression irOrSetBitsAtSlot(int,org.jetbrains.kotlin.ir.expressions.IrExpression)>($i0, $r22);

        return $r23;
    }

androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$defaultsInvalidDescriptor$1
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$defaultsInvalidDescriptor$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$defaultsInvalidDescriptor$1 INSTANCE>
    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$defaultsInvalidDescriptor$1 r0;
        java.lang.Object r1;
        org.jetbrains.kotlin.name.Name $r2;
        boolean $z0;
        java.lang.Boolean $r3;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$defaultsInvalidDescriptor$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.jetbrains.kotlin.name.Name) r1;

        $z0 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$defaultsInvalidDescriptor$1: boolean invoke(org.jetbrains.kotlin.name.Name)>($r2);

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r3;
    }

    public final boolean invoke(org.jetbrains.kotlin.name.Name)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$defaultsInvalidDescriptor$1 r0;
        org.jetbrains.kotlin.name.Name r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$defaultsInvalidDescriptor$1;

        r1 := @parameter0: org.jetbrains.kotlin.name.Name;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        $r2 = virtualinvoke r1.<org.jetbrains.kotlin.name.Name: java.lang.String asString()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, "defaultsInvalid");

        return $z0;
    }

    void <init>()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$defaultsInvalidDescriptor$1 r0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$defaultsInvalidDescriptor$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    static void <clinit>()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$defaultsInvalidDescriptor$1 $r0;

        $r0 = new androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$defaultsInvalidDescriptor$1;

        specialinvoke $r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$defaultsInvalidDescriptor$1: void <init>()>();

        <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$defaultsInvalidDescriptor$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$defaultsInvalidDescriptor$1 INSTANCE> = $r0;

        return;
    }

androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: java.util.List params>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: int count>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>
    protected final int paramIndexForSlot(int)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl r0;
        int i0, $i1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl;

        i0 := @parameter0: int;

        $i1 = i0 / 15;

        return $i1;
    }

    public org.jetbrains.kotlin.ir.expressions.IrExpression irLowBit()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl r0;
        java.util.List $r1;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer $r2, $r3, $r7;
        java.lang.Object $r4;
        org.jetbrains.kotlin.ir.declarations.IrValueDeclaration $r5;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r6, $r9, $r11;
        org.jetbrains.kotlin.ir.expressions.IrConst $r8;
        org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl $r10;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl;

        $r2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r3 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: java.util.List params>;

        $r4 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r5 = (org.jetbrains.kotlin.ir.declarations.IrValueDeclaration) $r4;

        $r6 = virtualinvoke $r3.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irGet(org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)>($r5);

        $r7 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r8 = virtualinvoke $r7.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrConst irConst(int)>(1);

        $r9 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r8;

        $r10 = virtualinvoke $r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl irAnd(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r6, $r9);

        $r11 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r10;

        return $r11;
    }

    public org.jetbrains.kotlin.ir.expressions.IrExpression irIsolateBitsAtSlot(int)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl r0;
        int i0, $i1;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer $r1, $r2, $r7;
        java.util.List $r3;
        java.lang.Object $r4;
        org.jetbrains.kotlin.ir.declarations.IrValueDeclaration $r5;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r6, $r8, $r10;
        org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl $r9;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r3 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: java.util.List params>;

        $i1 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: int paramIndexForSlot(int)>(i0);

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i1);

        $r5 = (org.jetbrains.kotlin.ir.declarations.IrValueDeclaration) $r4;

        $r6 = virtualinvoke $r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irGet(org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)>($r5);

        $r7 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r8 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression access$irBitsForSlot(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,int,int)>($r7, 3, i0);

        $r9 = virtualinvoke $r1.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl irAnd(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r6, $r8);

        $r10 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r9;

        return $r10;
    }

    public org.jetbrains.kotlin.ir.expressions.IrExpression irHasDifferences()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl r0;
        java.lang.Object r1, $r9, $r13, $r39, r52;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16, i18, i19;
        boolean z0, $z4, $z5, $z6, z10, $z11;
        org.jetbrains.kotlin.ir.declarations.IrValueDeclaration r2, $r40;
        java.util.Collection r3, r47;
        java.util.Iterator r4, $r48, $r51;
        org.jetbrains.kotlin.ir.expressions.IrExpression r5, $r19, $r22, $r25, $r27, $r30, $r32, $r41, $r44, $r45, $r49, $r53, r54;
        java.util.List r6, $r7, $r36;
        java.util.ArrayList $r8;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer $r10, $r15, $r16, $r17, $r18, $r20, $r24, $r29, $r37, $r38, $r42;
        java.lang.UnsupportedOperationException $r11;
        java.lang.Throwable $r12;
        kotlin.ranges.IntRange $r14;
        org.jetbrains.kotlin.ir.expressions.IrConst $r21, $r26, $r31, $r43;
        org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl $r23, $r28;
        kotlin.collections.IntIterator $r33;
        java.lang.Iterable $r35, $r46, $r50;
        byte b17;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl;

        $i7 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: int count>;

        if $i7 != 0 goto label01;

        $r37 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r38 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r36 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: java.util.List params>;

        $r39 = interfaceinvoke $r36.<java.util.List: java.lang.Object get(int)>(0);

        $r40 = (org.jetbrains.kotlin.ir.declarations.IrValueDeclaration) $r39;

        $r41 = virtualinvoke $r38.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irGet(org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)>($r40);

        $r42 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r43 = virtualinvoke $r42.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrConst irConst(int)>(0);

        $r44 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r43;

        $r45 = virtualinvoke $r37.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irNotEqual(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r41, $r44);

        return $r45;

     label01:
        $r7 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: java.util.List params>;

        $r46 = (java.lang.Iterable) $r7;

        $r8 = new java.util.ArrayList;

        $i8 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r46, 10);

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>($i8);

        r47 = (java.util.Collection) $r8;

        i15 = 0;

        $r48 = interfaceinvoke $r46.<java.lang.Iterable: java.util.Iterator iterator()>();

     label02:
        $z4 = interfaceinvoke $r48.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label06;

        r1 = interfaceinvoke $r48.<java.util.Iterator: java.lang.Object next()>();

        $i10 = i15;

        i15 = i15 + 1;

        i0 = $i10;

        z0 = 0;

        if i0 >= 0 goto label03;

        staticinvoke <kotlin.collections.CollectionsKt: void throwIndexOverflow()>();

     label03:
        r2 = (org.jetbrains.kotlin.ir.declarations.IrValueDeclaration) r1;

        i1 = i0;

        r3 = r47;

        i2 = i1 * 15;

        i16 = i2 + 15;

        z10 = 0;

        $i14 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: int count>;

        i3 = staticinvoke <java.lang.Math: int min(int,int)>(i16, $i14);

        $r14 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntRange until(int,int)>(i2, i3);

        b17 = 0;

        i18 = b17;

        $r35 = (java.lang.Iterable) $r14;

        r4 = interfaceinvoke $r35.<java.lang.Iterable: java.util.Iterator iterator()>();

     label04:
        $z11 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z11 == 0 goto label05;

        $r33 = (kotlin.collections.IntIterator) r4;

        i4 = virtualinvoke $r33.<kotlin.collections.IntIterator: int nextInt()>();

        i5 = i4;

        i6 = i18;

        $i13 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformerKt: int bitsForSlot(int,int)>(1, i5);

        i18 = i6 | $i13;

        goto label04;

     label05:
        i19 = i18;

        $r16 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r17 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r18 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r15 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r19 = virtualinvoke $r15.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irGet(org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)>(r2);

        $r20 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $i11 = i19 | 1;

        $r21 = virtualinvoke $r20.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrConst irConst(int)>($i11);

        $r22 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r21;

        $r23 = virtualinvoke $r18.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl irAnd(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r19, $r22);

        $r25 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r23;

        $r24 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $i12 = i19 | 0;

        $r26 = virtualinvoke $r24.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrConst irConst(int)>($i12);

        $r27 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r26;

        $r28 = virtualinvoke $r17.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl irXor(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r25, $r27);

        $r30 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r28;

        $r29 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r31 = virtualinvoke $r29.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrConst irConst(int)>(0);

        $r32 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r31;

        r5 = virtualinvoke $r16.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irNotEqual(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r30, $r32);

        interfaceinvoke r3.<java.util.Collection: boolean add(java.lang.Object)>(r5);

        goto label02;

     label06:
        r6 = (java.util.List) r47;

        $i9 = interfaceinvoke r6.<java.util.List: int size()>();

        if $i9 != 1 goto label07;

        $r13 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object single(java.util.List)>(r6);

        $r49 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r13;

        goto label11;

     label07:
        $r50 = (java.lang.Iterable) r6;

        $r51 = interfaceinvoke $r50.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z5 = interfaceinvoke $r51.<java.util.Iterator: boolean hasNext()>();

        if $z5 != 0 goto label08;

        $r11 = new java.lang.UnsupportedOperationException;

        specialinvoke $r11.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Empty collection can\'t be reduced.");

        $r12 = (java.lang.Throwable) $r11;

        throw $r12;

     label08:
        r52 = interfaceinvoke $r51.<java.util.Iterator: java.lang.Object next()>();

     label09:
        $z6 = interfaceinvoke $r51.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label10;

        $r9 = interfaceinvoke $r51.<java.util.Iterator: java.lang.Object next()>();

        $r53 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r9;

        r54 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r52;

        $r10 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        r52 = virtualinvoke $r10.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irOrOr(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>(r54, $r53);

        goto label09;

     label10:
        $r49 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r52;

     label11:
        return $r49;
    }

    public androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskVariable irCopyToTemporary(java.lang.String, boolean, boolean)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl r0;
        java.lang.String r1, $r26;
        boolean z0, z1, z4, $z6;
        java.lang.Iterable $r2;
        java.util.Collection r3, r7;
        java.util.Iterator r4;
        java.lang.Object r5;
        int i0, i1, $i2, $i3, $i4, i5;
        org.jetbrains.kotlin.ir.declarations.IrValueDeclaration r6;
        org.jetbrains.kotlin.ir.declarations.impl.IrVariableImpl r8;
        java.util.List r9, $r10;
        java.util.ArrayList $r11;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskVariableImpl $r12;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer $r13, $r15, $r16, $r21;
        androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskVariable $r14;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r17;
        java.lang.StringBuilder $r18, $r19, $r20;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r22;
        org.jetbrains.kotlin.ir.descriptors.IrBuiltIns $r23;
        org.jetbrains.kotlin.ir.types.IrType $r24;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $r10 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: java.util.List params>;

        $r2 = (java.lang.Iterable) $r10;

        $r11 = new java.util.ArrayList;

        $i2 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r2, 10);

        specialinvoke $r11.<java.util.ArrayList: void <init>(int)>($i2);

        r3 = (java.util.Collection) $r11;

        i5 = 0;

        r4 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z6 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label5;

        r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $i4 = i5;

        i5 = i5 + 1;

        i0 = $i4;

        z4 = 0;

        if i0 >= 0 goto label2;

        staticinvoke <kotlin.collections.CollectionsKt: void throwIndexOverflow()>();

     label2:
        r6 = (org.jetbrains.kotlin.ir.declarations.IrValueDeclaration) r5;

        i1 = i0;

        r7 = r3;

        $r16 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r15 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r17 = virtualinvoke $r15.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irGet(org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)>(r6);

        if i1 != 0 goto label3;

        $r26 = r1;

        goto label4;

     label3:
        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r26 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        $r21 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r22 = virtualinvoke $r21.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        $r23 = interfaceinvoke $r22.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.ir.descriptors.IrBuiltIns getIrBuiltIns()>();

        $r24 = virtualinvoke $r23.<org.jetbrains.kotlin.ir.descriptors.IrBuiltIns: org.jetbrains.kotlin.ir.types.IrType getIntType()>();

        r8 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.declarations.impl.IrVariableImpl access$irTemporary(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,org.jetbrains.kotlin.ir.expressions.IrExpression,java.lang.String,org.jetbrains.kotlin.ir.types.IrType,boolean,boolean)>($r16, $r17, $r26, $r24, z0, z1);

        interfaceinvoke r7.<java.util.Collection: boolean add(java.lang.Object)>(r8);

        goto label1;

     label5:
        r9 = (java.util.List) r3;

        $r12 = new androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskVariableImpl;

        $r13 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $i3 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: int count>;

        specialinvoke $r12.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskVariableImpl: void <init>(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,java.util.List,int)>($r13, r9, $i3);

        $r14 = (androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskVariable) $r12;

        return $r14;
    }

    public void putAsValueArgumentInWithLowBit(org.jetbrains.kotlin.ir.expressions.IrFunctionAccessExpression, int, boolean)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl r0;
        org.jetbrains.kotlin.ir.expressions.IrFunctionAccessExpression r1;
        int i0, i1, i2, $i3, $i4, i5;
        boolean z0, z2, $z4;
        java.lang.Iterable $r2;
        java.util.Iterator r3;
        java.lang.Object r4;
        org.jetbrains.kotlin.ir.declarations.IrValueDeclaration r5;
        java.util.List $r6;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer $r7, $r8, $r9, $r11;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r10, $r13, $r16;
        org.jetbrains.kotlin.ir.expressions.IrConst $r12;
        org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl $r14;
        byte $b6;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrFunctionAccessExpression;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "fn");

        $r6 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: java.util.List params>;

        $r2 = (java.lang.Iterable) $r6;

        i5 = 0;

        r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z4 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label7;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $i3 = i5;

        i5 = i5 + 1;

        i1 = $i3;

        z2 = 0;

        if i1 >= 0 goto label2;

        staticinvoke <kotlin.collections.CollectionsKt: void throwIndexOverflow()>();

     label2:
        r5 = (org.jetbrains.kotlin.ir.declarations.IrValueDeclaration) r4;

        i2 = i1;

        $i4 = i0 + i2;

        if i2 != 0 goto label5;

        $r9 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r8 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r10 = virtualinvoke $r8.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irGet(org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)>(r5);

        $r11 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        if z0 == 0 goto label3;

        $b6 = 1;

        goto label4;

     label3:
        $b6 = 0;

     label4:
        $r12 = virtualinvoke $r11.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrConst irConst(int)>($b6);

        $r13 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r12;

        $r14 = virtualinvoke $r9.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl irOr(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r10, $r13);

        $r16 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r14;

        goto label6;

     label5:
        $r7 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r16 = virtualinvoke $r7.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irGet(org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)>(r5);

     label6:
        interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrFunctionAccessExpression: void putValueArgument(int,org.jetbrains.kotlin.ir.expressions.IrExpression)>($i4, $r16);

        goto label1;

     label7:
        return;
    }

    public org.jetbrains.kotlin.ir.expressions.IrExpression irShiftBits(int, int)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7;
        org.jetbrains.kotlin.ir.expressions.IrExpression r1, $r32, $r34;
        org.jetbrains.kotlin.types.SimpleType r2, $r12;
        org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol r3, r4, $r35;
        boolean z0;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer $r5, $r9, $r13, $r20, $r28, $r30;
        java.util.List $r6;
        java.lang.Object $r7;
        org.jetbrains.kotlin.ir.declarations.IrValueDeclaration $r8;
        org.jetbrains.kotlin.backend.common.extensions.IrPluginContext $r10, $r14, $r21;
        org.jetbrains.kotlin.builtins.KotlinBuiltIns $r11;
        org.jetbrains.kotlin.backend.common.ir.BuiltinSymbolsBase $r15, $r22;
        org.jetbrains.kotlin.ir.backend.js.utils.OperatorNames $r16, $r23;
        org.jetbrains.kotlin.name.Name $r17, $r24;
        org.jetbrains.kotlin.types.KotlinType $r18, $r19, $r25, $r26;
        org.jetbrains.kotlin.ir.expressions.IrExpression[] $r27;
        org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol $r29;
        org.jetbrains.kotlin.ir.expressions.IrConst $r31;
        org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl $r33;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = i0 % 15;

        i3 = i1 % 15;

        $i5 = i3 - i2;

        i4 = $i5 * 2;

        $r5 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r6 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: java.util.List params>;

        $i6 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: int paramIndexForSlot(int)>(i0);

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>($i6);

        $r8 = (org.jetbrains.kotlin.ir.declarations.IrValueDeclaration) $r7;

        r1 = virtualinvoke $r5.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irGet(org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)>($r8);

        if i4 != 0 goto label1;

        return r1;

     label1:
        $r9 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r10 = virtualinvoke $r9.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        $r11 = interfaceinvoke $r10.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.builtins.KotlinBuiltIns getBuiltIns()>();

        $r12 = virtualinvoke $r11.<org.jetbrains.kotlin.builtins.KotlinBuiltIns: org.jetbrains.kotlin.types.SimpleType getIntType()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r12, "context.builtIns.intType");

        r2 = $r12;

        $r13 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r14 = virtualinvoke $r13.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        $r15 = interfaceinvoke $r14.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.backend.common.ir.BuiltinSymbolsBase getSymbols()>();

        $r16 = <org.jetbrains.kotlin.ir.backend.js.utils.OperatorNames: org.jetbrains.kotlin.ir.backend.js.utils.OperatorNames INSTANCE>;

        $r17 = virtualinvoke $r16.<org.jetbrains.kotlin.ir.backend.js.utils.OperatorNames: org.jetbrains.kotlin.name.Name getSHL()>();

        $r19 = (org.jetbrains.kotlin.types.KotlinType) r2;

        $r18 = (org.jetbrains.kotlin.types.KotlinType) r2;

        r3 = virtualinvoke $r15.<org.jetbrains.kotlin.backend.common.ir.BuiltinSymbolsBase: org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol getBinaryOperator(org.jetbrains.kotlin.name.Name,org.jetbrains.kotlin.types.KotlinType,org.jetbrains.kotlin.types.KotlinType)>($r17, $r19, $r18);

        $r20 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r21 = virtualinvoke $r20.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.backend.common.extensions.IrPluginContext getContext()>();

        $r22 = interfaceinvoke $r21.<org.jetbrains.kotlin.backend.common.extensions.IrPluginContext: org.jetbrains.kotlin.backend.common.ir.BuiltinSymbolsBase getSymbols()>();

        $r23 = <org.jetbrains.kotlin.ir.backend.js.utils.OperatorNames: org.jetbrains.kotlin.ir.backend.js.utils.OperatorNames INSTANCE>;

        $r24 = virtualinvoke $r23.<org.jetbrains.kotlin.ir.backend.js.utils.OperatorNames: org.jetbrains.kotlin.name.Name getSHR()>();

        $r26 = (org.jetbrains.kotlin.types.KotlinType) r2;

        $r25 = (org.jetbrains.kotlin.types.KotlinType) r2;

        r4 = virtualinvoke $r22.<org.jetbrains.kotlin.backend.common.ir.BuiltinSymbolsBase: org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol getBinaryOperator(org.jetbrains.kotlin.name.Name,org.jetbrains.kotlin.types.KotlinType,org.jetbrains.kotlin.types.KotlinType)>($r24, $r26, $r25);

        $r28 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        if i4 <= 0 goto label2;

        $r35 = r3;

        goto label3;

     label2:
        $r35 = r4;

     label3:
        $r29 = (org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol) $r35;

        $r27 = newarray (org.jetbrains.kotlin.ir.expressions.IrExpression)[1];

        $r30 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        z0 = 0;

        $i7 = staticinvoke <java.lang.Math: int abs(int)>(i4);

        $r31 = virtualinvoke $r30.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrConst irConst(int)>($i7);

        $r32 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r31;

        $r27[0] = $r32;

        $r33 = virtualinvoke $r28.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl irCall(org.jetbrains.kotlin.ir.symbols.IrFunctionSymbol,org.jetbrains.kotlin.ir.expressions.IrStatementOrigin,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression[])>($r29, null, r1, null, $r27);

        $r34 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r33;

        return $r34;
    }

    public void <init>(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer, java.util.List, int)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl r0;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r1;
        java.util.List r2, $r3;
        int i0, i1, i2, $i3, $i4;
        boolean z0, z1, $z3, z4;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        java.lang.IllegalArgumentException $r11;
        java.lang.String $r12, r14;
        java.lang.Throwable $r13;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl;

        r1 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r2 := @parameter1: java.util.List;

        i0 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "params");

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: java.util.List params> = r2;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: int count> = i0;

        $r3 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: java.util.List params>;

        i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        $i3 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: int count>;

        i2 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformerKt: int changedParamCount(int,int)>($i3, 0);

        if i1 != i2 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        z0 = $z3;

        z1 = 0;

        z4 = 0;

        if z0 != 0 goto label3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Function with ");

        $i4 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: int count>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" params had ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" changed params but expected ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = virtualinvoke r14.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        $r13 = (java.lang.Throwable) $r11;

        throw $r13;

     label3:
        return;
    }

androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskVariableImpl
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskVariableImpl: java.util.List temps>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskVariableImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>
    public java.util.List asStatements()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskVariableImpl r0;
        java.util.List $r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskVariableImpl;

        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskVariableImpl: java.util.List temps>;

        return $r1;
    }

    public org.jetbrains.kotlin.ir.expressions.IrExpression irOrSetBitsAtSlot(int, org.jetbrains.kotlin.ir.expressions.IrExpression)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskVariableImpl r0;
        int i0, $i1;
        org.jetbrains.kotlin.ir.expressions.IrExpression r1, $r9, $r11, $r12;
        org.jetbrains.kotlin.ir.declarations.IrVariable r2;
        java.util.List $r3;
        java.lang.Object $r4;
        org.jetbrains.kotlin.ir.declarations.IrValueDeclaration $r5;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer $r6, $r7, $r8;
        org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl $r10;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskVariableImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: org.jetbrains.kotlin.ir.expressions.IrExpression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "value");

        $r3 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskVariableImpl: java.util.List temps>;

        $i1 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskVariableImpl: int paramIndexForSlot(int)>(i0);

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i1);

        r2 = (org.jetbrains.kotlin.ir.declarations.IrVariable) $r4;

        $r7 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskVariableImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r8 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskVariableImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r6 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskVariableImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r5 = (org.jetbrains.kotlin.ir.declarations.IrValueDeclaration) r2;

        $r9 = virtualinvoke $r6.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irGet(org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)>($r5);

        $r10 = virtualinvoke $r8.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl irOr(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r9, r1);

        $r11 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r10;

        $r12 = virtualinvoke $r7.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irSet(org.jetbrains.kotlin.ir.declarations.IrVariable,org.jetbrains.kotlin.ir.expressions.IrExpression)>(r2, $r11);

        return $r12;
    }

    public org.jetbrains.kotlin.ir.expressions.IrExpression irSetSlotUncertain(int)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskVariableImpl r0;
        int i0, $i1, $i2;
        org.jetbrains.kotlin.ir.declarations.IrVariable r1;
        java.util.List $r2;
        java.lang.Object $r3;
        org.jetbrains.kotlin.ir.declarations.IrValueDeclaration $r4;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer $r5, $r6, $r7, $r10, $r11;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r8, $r13, $r15, $r17, $r18;
        androidx.compose.compiler.plugins.kotlin.lower.ParamState $r9;
        org.jetbrains.kotlin.ir.expressions.IrConst $r12;
        org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl $r14, $r16;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskVariableImpl;

        i0 := @parameter0: int;

        $r2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskVariableImpl: java.util.List temps>;

        $i1 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskVariableImpl: int paramIndexForSlot(int)>(i0);

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        r1 = (org.jetbrains.kotlin.ir.declarations.IrVariable) $r3;

        $r6 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskVariableImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r7 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskVariableImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r5 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskVariableImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r4 = (org.jetbrains.kotlin.ir.declarations.IrValueDeclaration) r1;

        $r8 = virtualinvoke $r5.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irGet(org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)>($r4);

        $r10 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskVariableImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r11 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskVariableImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r9 = <androidx.compose.compiler.plugins.kotlin.lower.ParamState: androidx.compose.compiler.plugins.kotlin.lower.ParamState Static>;

        $i2 = virtualinvoke $r9.<androidx.compose.compiler.plugins.kotlin.lower.ParamState: int bitsForSlot(int)>(i0);

        $r12 = virtualinvoke $r11.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrConst irConst(int)>($i2);

        $r13 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r12;

        $r14 = virtualinvoke $r10.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl irInv(org.jetbrains.kotlin.ir.expressions.IrExpression)>($r13);

        $r15 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r14;

        $r16 = virtualinvoke $r7.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl irAnd(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r8, $r15);

        $r17 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r16;

        $r18 = virtualinvoke $r6.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irSet(org.jetbrains.kotlin.ir.declarations.IrVariable,org.jetbrains.kotlin.ir.expressions.IrExpression)>(r1, $r17);

        return $r18;
    }

    public void <init>(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer, java.util.List, int)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskVariableImpl r0;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r1;
        java.util.List r2;
        int i0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskVariableImpl;

        r1 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r2 := @parameter1: java.util.List;

        i0 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "temps");

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskVariableImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0> = r1;

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: void <init>(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,java.util.List,int)>(r1, r2, i0);

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskVariableImpl: java.util.List temps> = r2;

        return;
    }

androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrDefaultBitMaskValueImpl
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrDefaultBitMaskValueImpl: java.util.List params>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrDefaultBitMaskValueImpl: int count>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrDefaultBitMaskValueImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>
    public org.jetbrains.kotlin.ir.expressions.IrExpression irIsolateBitAtIndex(int)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrDefaultBitMaskValueImpl r0;
        int i0, $i1, $i2, $i3, $i4;
        boolean z0, z1, z2, $z3, z4, z5, z6;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer $r1, $r2, $r7;
        java.util.List $r3;
        java.lang.Object $r4;
        org.jetbrains.kotlin.ir.declarations.IrValueDeclaration $r5;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r6, $r9, $r11;
        org.jetbrains.kotlin.ir.expressions.IrConst $r8;
        org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl $r10;
        java.lang.IllegalArgumentException $r12;
        java.lang.String $r13, r15;
        java.lang.Throwable $r14;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrDefaultBitMaskValueImpl;

        i0 := @parameter0: int;

        $i1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrDefaultBitMaskValueImpl: int count>;

        if i0 > $i1 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        z0 = $z3;

        z1 = 0;

        z4 = 0;

        z5 = 0;

        z6 = 0;

        if z0 != 0 goto label3;

        z2 = 0;

        r15 = "Failed requirement.";

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = virtualinvoke r15.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        $r14 = (java.lang.Throwable) $r12;

        throw $r14;

     label3:
        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrDefaultBitMaskValueImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrDefaultBitMaskValueImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r3 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrDefaultBitMaskValueImpl: java.util.List params>;

        $i2 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformerKt: int defaultsParamIndex(int)>(i0);

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i2);

        $r5 = (org.jetbrains.kotlin.ir.declarations.IrValueDeclaration) $r4;

        $r6 = virtualinvoke $r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irGet(org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)>($r5);

        $r7 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrDefaultBitMaskValueImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $i3 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformerKt: int defaultsBitIndex(int)>(i0);

        $i4 = 1 << $i3;

        $r8 = virtualinvoke $r7.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrConst irConst(int)>($i4);

        $r9 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r8;

        $r10 = virtualinvoke $r1.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl irAnd(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r6, $r9);

        $r11 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r10;

        return $r11;
    }

    public org.jetbrains.kotlin.ir.expressions.IrExpression irHasAnyProvidedAndUnstable(boolean[])
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrDefaultBitMaskValueImpl r0;
        boolean[] r1, $r15, $r16;
        java.lang.Object r2, $r8, $r12, r45;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13;
        boolean z0, z2, $z3, $z4, $z5, $z7, z8, z13;
        org.jetbrains.kotlin.ir.declarations.IrValueParameter r3;
        java.util.Collection r4, r39;
        org.jetbrains.kotlin.ir.expressions.IrExpression r5, $r22, $r25, $r27, $r30, $r32, $r42, $r46, r47;
        java.util.List $r6, r41;
        java.util.ArrayList $r7;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer $r9, $r13, $r18, $r19, $r20, $r21, $r24, $r29;
        java.lang.UnsupportedOperationException $r10;
        java.lang.Throwable $r11, $r36;
        kotlin.ranges.IntRange $r14;
        org.jetbrains.kotlin.ir.declarations.IrValueDeclaration $r17;
        org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl $r23, $r28;
        org.jetbrains.kotlin.ir.expressions.IrConst $r26, $r31;
        java.lang.IllegalArgumentException $r34;
        java.lang.String $r35, $r37;
        java.lang.Iterable $r38, $r43;
        java.util.Iterator $r40, $r44;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrDefaultBitMaskValueImpl;

        r1 := @parameter0: boolean[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "unstable");

        $i6 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrDefaultBitMaskValueImpl: int count>;

        $i5 = lengthof r1;

        if $i6 != $i5 goto label01;

        $z7 = 1;

        goto label02;

     label01:
        $z7 = 0;

     label02:
        z8 = $z7;

        if z8 != 0 goto label03;

        z13 = 0;

        $r37 = "Failed requirement.";

        $r34 = new java.lang.IllegalArgumentException;

        $r35 = virtualinvoke $r37.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r34.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r35);

        $r36 = (java.lang.Throwable) $r34;

        throw $r36;

     label03:
        $r6 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrDefaultBitMaskValueImpl: java.util.List params>;

        $r38 = (java.lang.Iterable) $r6;

        $r7 = new java.util.ArrayList;

        $i7 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r38, 10);

        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>($i7);

        r39 = (java.util.Collection) $r7;

        i11 = 0;

        $r40 = interfaceinvoke $r38.<java.lang.Iterable: java.util.Iterator iterator()>();

     label04:
        $z3 = interfaceinvoke $r40.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label06;

        r2 = interfaceinvoke $r40.<java.util.Iterator: java.lang.Object next()>();

        $i9 = i11;

        i11 = i11 + 1;

        i0 = $i9;

        z0 = 0;

        if i0 >= 0 goto label05;

        staticinvoke <kotlin.collections.CollectionsKt: void throwIndexOverflow()>();

     label05:
        r3 = (org.jetbrains.kotlin.ir.declarations.IrValueParameter) r2;

        i1 = i0;

        r4 = r39;

        i2 = i1 * 31;

        i12 = i2 + 31;

        i3 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrDefaultBitMaskValueImpl: int count>;

        z2 = 0;

        i4 = staticinvoke <java.lang.Math: int min(int,int)>(i12, i3);

        $r13 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrDefaultBitMaskValueImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r14 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntRange until(int,int)>(i2, i4);

        $r15 = staticinvoke <kotlin.collections.ArraysKt: boolean[] sliceArray(boolean[],kotlin.ranges.IntRange)>(r1, $r14);

        $i10 = lengthof $r15;

        $r16 = staticinvoke <java.util.Arrays: boolean[] copyOf(boolean[],int)>($r15, $i10);

        i13 = virtualinvoke $r13.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: int bitMask(boolean[])>($r16);

        $r19 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrDefaultBitMaskValueImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r20 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrDefaultBitMaskValueImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r21 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrDefaultBitMaskValueImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r18 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrDefaultBitMaskValueImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r17 = (org.jetbrains.kotlin.ir.declarations.IrValueDeclaration) r3;

        $r22 = virtualinvoke $r18.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irGet(org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)>($r17);

        $r23 = virtualinvoke $r21.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl irInv(org.jetbrains.kotlin.ir.expressions.IrExpression)>($r22);

        $r25 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r23;

        $r24 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrDefaultBitMaskValueImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r26 = virtualinvoke $r24.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrConst irConst(int)>(i13);

        $r27 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r26;

        $r28 = virtualinvoke $r20.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.impl.IrCallImpl irAnd(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r25, $r27);

        $r30 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r28;

        $r29 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrDefaultBitMaskValueImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r31 = virtualinvoke $r29.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrConst irConst(int)>(0);

        $r32 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r31;

        r5 = virtualinvoke $r19.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irNotEqual(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>($r30, $r32);

        interfaceinvoke r4.<java.util.Collection: boolean add(java.lang.Object)>(r5);

        goto label04;

     label06:
        r41 = (java.util.List) r39;

        $i8 = interfaceinvoke r41.<java.util.List: int size()>();

        if $i8 != 1 goto label07;

        $r12 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object single(java.util.List)>(r41);

        $r42 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r12;

        goto label11;

     label07:
        $r43 = (java.lang.Iterable) r41;

        $r44 = interfaceinvoke $r43.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z4 = interfaceinvoke $r44.<java.util.Iterator: boolean hasNext()>();

        if $z4 != 0 goto label08;

        $r10 = new java.lang.UnsupportedOperationException;

        specialinvoke $r10.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Empty collection can\'t be reduced.");

        $r11 = (java.lang.Throwable) $r10;

        throw $r11;

     label08:
        r45 = interfaceinvoke $r44.<java.util.Iterator: java.lang.Object next()>();

     label09:
        $z5 = interfaceinvoke $r44.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label10;

        $r8 = interfaceinvoke $r44.<java.util.Iterator: java.lang.Object next()>();

        $r46 = (org.jetbrains.kotlin.ir.expressions.IrExpression) $r8;

        r47 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r45;

        $r9 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrDefaultBitMaskValueImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        r45 = virtualinvoke $r9.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irOrOr(org.jetbrains.kotlin.ir.expressions.IrExpression,org.jetbrains.kotlin.ir.expressions.IrExpression)>(r47, $r46);

        goto label09;

     label10:
        $r42 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r45;

     label11:
        return $r42;
    }

    public void putAsValueArgumentIn(org.jetbrains.kotlin.ir.expressions.IrFunctionAccessExpression, int)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrDefaultBitMaskValueImpl r0;
        org.jetbrains.kotlin.ir.expressions.IrFunctionAccessExpression r1;
        int i0, i1, i2, $i3, $i4, i5;
        java.lang.Iterable $r2;
        java.util.Iterator r3;
        java.lang.Object r4;
        boolean z1, $z3;
        org.jetbrains.kotlin.ir.declarations.IrValueParameter r5;
        java.util.List $r6;
        org.jetbrains.kotlin.ir.declarations.IrValueDeclaration $r7;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer $r8;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r9;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrDefaultBitMaskValueImpl;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrFunctionAccessExpression;

        i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "fn");

        $r6 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrDefaultBitMaskValueImpl: java.util.List params>;

        $r2 = (java.lang.Iterable) $r6;

        i5 = 0;

        r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label3;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $i3 = i5;

        i5 = i5 + 1;

        i1 = $i3;

        z1 = 0;

        if i1 >= 0 goto label2;

        staticinvoke <kotlin.collections.CollectionsKt: void throwIndexOverflow()>();

     label2:
        r5 = (org.jetbrains.kotlin.ir.declarations.IrValueParameter) r4;

        i2 = i1;

        $i4 = i0 + i2;

        $r8 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrDefaultBitMaskValueImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r7 = (org.jetbrains.kotlin.ir.declarations.IrValueDeclaration) r5;

        $r9 = virtualinvoke $r8.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression irGet(org.jetbrains.kotlin.ir.declarations.IrValueDeclaration)>($r7);

        interfaceinvoke r1.<org.jetbrains.kotlin.ir.expressions.IrFunctionAccessExpression: void putValueArgument(int,org.jetbrains.kotlin.ir.expressions.IrExpression)>($i4, $r9);

        goto label1;

     label3:
        return;
    }

    public void <init>(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer, java.util.List, int)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrDefaultBitMaskValueImpl r0;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r1;
        java.util.List r2, $r3;
        int i0, i1, i2, $i3, $i4;
        boolean z0, z1, $z3, z4;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        java.lang.IllegalArgumentException $r11;
        java.lang.String $r12, r14;
        java.lang.Throwable $r13;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrDefaultBitMaskValueImpl;

        r1 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r2 := @parameter1: java.util.List;

        i0 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "params");

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrDefaultBitMaskValueImpl: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrDefaultBitMaskValueImpl: java.util.List params> = r2;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrDefaultBitMaskValueImpl: int count> = i0;

        $r3 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrDefaultBitMaskValueImpl: java.util.List params>;

        i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        $i3 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrDefaultBitMaskValueImpl: int count>;

        i2 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformerKt: int defaultParamCount(int)>($i3);

        if i1 != i2 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        z0 = $z3;

        z1 = 0;

        z4 = 0;

        if z0 != 0 goto label3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Function with ");

        $i4 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrDefaultBitMaskValueImpl: int count>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" params had ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" default params but expected ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = virtualinvoke r14.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        $r13 = (java.lang.Throwable) $r11;

        throw $r13;

     label3:
        return;
    }

androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$irEndRestartGroupAndUpdateScope$$inlined$also$lambda$1
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$irEndRestartGroupAndUpdateScope$$inlined$also$lambda$1: org.jetbrains.kotlin.ir.declarations.impl.IrFunctionImpl $fn$inlined>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$irEndRestartGroupAndUpdateScope$$inlined$also$lambda$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$irEndRestartGroupAndUpdateScope$$inlined$also$lambda$1: org.jetbrains.kotlin.ir.declarations.IrFunction $function$inlined>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$irEndRestartGroupAndUpdateScope$$inlined$also$lambda$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope $scope$inlined>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$irEndRestartGroupAndUpdateScope$$inlined$also$lambda$1: int $numRealValueParameters$inlined>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$irEndRestartGroupAndUpdateScope$$inlined$also$lambda$1: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue $changedParam$inlined>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$irEndRestartGroupAndUpdateScope$$inlined$also$lambda$1: int $changedIndex$inlined>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$irEndRestartGroupAndUpdateScope$$inlined$also$lambda$1: androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue $defaultParam$inlined>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$irEndRestartGroupAndUpdateScope$$inlined$also$lambda$1: int $defaultIndex$inlined>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$irEndRestartGroupAndUpdateScope$$inlined$also$lambda$1: org.jetbrains.kotlin.ir.declarations.impl.IrVariableImpl $outerReceiver$inlined>
    void <init>(org.jetbrains.kotlin.ir.declarations.impl.IrFunctionImpl, androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer, org.jetbrains.kotlin.ir.declarations.IrFunction, androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope, int, androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue, int, androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue, int, org.jetbrains.kotlin.ir.declarations.impl.IrVariableImpl)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$irEndRestartGroupAndUpdateScope$$inlined$also$lambda$1 r0;
        org.jetbrains.kotlin.ir.declarations.impl.IrFunctionImpl r1;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r2;
        org.jetbrains.kotlin.ir.declarations.IrFunction r3;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope r4;
        int i0, i1, i2;
        androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue r5;
        androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue r6;
        org.jetbrains.kotlin.ir.declarations.impl.IrVariableImpl r7;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$irEndRestartGroupAndUpdateScope$$inlined$also$lambda$1;

        r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.impl.IrFunctionImpl;

        r2 := @parameter1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r3 := @parameter2: org.jetbrains.kotlin.ir.declarations.IrFunction;

        r4 := @parameter3: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        i0 := @parameter4: int;

        r5 := @parameter5: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue;

        i1 := @parameter6: int;

        r6 := @parameter7: androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue;

        i2 := @parameter8: int;

        r7 := @parameter9: org.jetbrains.kotlin.ir.declarations.impl.IrVariableImpl;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$irEndRestartGroupAndUpdateScope$$inlined$also$lambda$1: org.jetbrains.kotlin.ir.declarations.impl.IrFunctionImpl $fn$inlined> = r1;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$irEndRestartGroupAndUpdateScope$$inlined$also$lambda$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0> = r2;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$irEndRestartGroupAndUpdateScope$$inlined$also$lambda$1: org.jetbrains.kotlin.ir.declarations.IrFunction $function$inlined> = r3;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$irEndRestartGroupAndUpdateScope$$inlined$also$lambda$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope $scope$inlined> = r4;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$irEndRestartGroupAndUpdateScope$$inlined$also$lambda$1: int $numRealValueParameters$inlined> = i0;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$irEndRestartGroupAndUpdateScope$$inlined$also$lambda$1: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue $changedParam$inlined> = r5;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$irEndRestartGroupAndUpdateScope$$inlined$also$lambda$1: int $changedIndex$inlined> = i1;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$irEndRestartGroupAndUpdateScope$$inlined$also$lambda$1: androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue $defaultParam$inlined> = r6;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$irEndRestartGroupAndUpdateScope$$inlined$also$lambda$1: int $defaultIndex$inlined> = i2;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$irEndRestartGroupAndUpdateScope$$inlined$also$lambda$1: org.jetbrains.kotlin.ir.declarations.impl.IrVariableImpl $outerReceiver$inlined> = r7;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$irEndRestartGroupAndUpdateScope$$inlined$also$lambda$1 r0;
        java.lang.Object r1;
        java.lang.Number $r2;
        int $i0;
        org.jetbrains.kotlin.ir.declarations.IrValueDeclaration $r3;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$irEndRestartGroupAndUpdateScope$$inlined$also$lambda$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Number) r1;

        $i0 = virtualinvoke $r2.<java.lang.Number: int intValue()>();

        $r3 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$irEndRestartGroupAndUpdateScope$$inlined$also$lambda$1: org.jetbrains.kotlin.ir.declarations.IrValueDeclaration invoke(int)>($i0);

        return $r3;
    }

    public final org.jetbrains.kotlin.ir.declarations.IrValueDeclaration invoke(int)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$irEndRestartGroupAndUpdateScope$$inlined$also$lambda$1 r0;
        int i0;
        java.lang.Object r1, $r7;
        boolean z0, z1;
        org.jetbrains.kotlin.ir.declarations.IrValueParameter r2;
        org.jetbrains.kotlin.ir.declarations.IrFunction $r3;
        java.util.List $r4;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope $r5;
        java.util.Map $r6;
        org.jetbrains.kotlin.ir.declarations.IrValueDeclaration $r8;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$irEndRestartGroupAndUpdateScope$$inlined$also$lambda$1;

        i0 := @parameter0: int;

        $r3 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$irEndRestartGroupAndUpdateScope$$inlined$also$lambda$1: org.jetbrains.kotlin.ir.declarations.IrFunction $function$inlined>;

        $r4 = interfaceinvoke $r3.<org.jetbrains.kotlin.ir.declarations.IrFunction: java.util.List getValueParameters()>();

        r1 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i0);

        z0 = 0;

        z1 = 0;

        r2 = (org.jetbrains.kotlin.ir.declarations.IrValueParameter) r1;

        $r5 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$irEndRestartGroupAndUpdateScope$$inlined$also$lambda$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope $scope$inlined>;

        $r6 = virtualinvoke $r5.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: java.util.Map getRemappedParams()>();

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r8 = (org.jetbrains.kotlin.ir.declarations.IrValueDeclaration) $r7;

        if $r8 == null goto label1;

        goto label2;

     label1:
        $r8 = (org.jetbrains.kotlin.ir.declarations.IrValueDeclaration) r2;

     label2:
        return $r8;
    }

androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$isSkippingDescriptor$1
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$isSkippingDescriptor$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$isSkippingDescriptor$1 INSTANCE>
    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$isSkippingDescriptor$1 r0;
        java.lang.Object r1;
        org.jetbrains.kotlin.name.Name $r2;
        boolean $z0;
        java.lang.Boolean $r3;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$isSkippingDescriptor$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.jetbrains.kotlin.name.Name) r1;

        $z0 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$isSkippingDescriptor$1: boolean invoke(org.jetbrains.kotlin.name.Name)>($r2);

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r3;
    }

    public final boolean invoke(org.jetbrains.kotlin.name.Name)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$isSkippingDescriptor$1 r0;
        org.jetbrains.kotlin.name.Name r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$isSkippingDescriptor$1;

        r1 := @parameter0: org.jetbrains.kotlin.name.Name;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        $r2 = virtualinvoke r1.<org.jetbrains.kotlin.name.Name: java.lang.String asString()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, "skipping");

        return $z0;
    }

    void <init>()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$isSkippingDescriptor$1 r0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$isSkippingDescriptor$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    static void <clinit>()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$isSkippingDescriptor$1 $r0;

        $r0 = new androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$isSkippingDescriptor$1;

        specialinvoke $r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$isSkippingDescriptor$1: void <init>()>();

        <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$isSkippingDescriptor$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$isSkippingDescriptor$1 INSTANCE> = $r0;

        return;
    }

androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: boolean isVararg>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: boolean isProvided>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: boolean isStatic>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: boolean isCertain>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: int maskSlot>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue maskParam>
    public final boolean isVararg()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta r0;
        boolean $z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta;

        $z0 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: boolean isVararg>;

        return $z0;
    }

    public final void setVararg(boolean)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta r0;
        boolean z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta;

        z0 := @parameter0: boolean;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: boolean isVararg> = z0;

        return;
    }

    public final boolean isProvided()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta r0;
        boolean $z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta;

        $z0 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: boolean isProvided>;

        return $z0;
    }

    public final void setProvided(boolean)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta r0;
        boolean z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta;

        z0 := @parameter0: boolean;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: boolean isProvided> = z0;

        return;
    }

    public final boolean isStatic()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta r0;
        boolean $z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta;

        $z0 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: boolean isStatic>;

        return $z0;
    }

    public final void setStatic(boolean)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta r0;
        boolean z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta;

        z0 := @parameter0: boolean;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: boolean isStatic> = z0;

        return;
    }

    public final boolean isCertain()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta r0;
        boolean $z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta;

        $z0 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: boolean isCertain>;

        return $z0;
    }

    public final void setCertain(boolean)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta r0;
        boolean z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta;

        z0 := @parameter0: boolean;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: boolean isCertain> = z0;

        return;
    }

    public final int getMaskSlot()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta r0;
        int $i0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta;

        $i0 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: int maskSlot>;

        return $i0;
    }

    public final void setMaskSlot(int)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta r0;
        int i0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta;

        i0 := @parameter0: int;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: int maskSlot> = i0;

        return;
    }

    public final androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue getMaskParam()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta r0;
        androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue $r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta;

        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue maskParam>;

        return $r1;
    }

    public final void setMaskParam(androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta r0;
        androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta;

        r1 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue maskParam> = r1;

        return;
    }

    public void <init>(boolean, boolean, boolean, boolean, int, androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta r0;
        boolean z0, z1, z2, z3;
        int i0;
        androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        z2 := @parameter2: boolean;

        z3 := @parameter3: boolean;

        i0 := @parameter4: int;

        r1 := @parameter5: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: boolean isVararg> = z0;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: boolean isProvided> = z1;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: boolean isStatic> = z2;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: boolean isCertain> = z3;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: int maskSlot> = i0;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue maskParam> = r1;

        return;
    }

    public void <init>(boolean, boolean, boolean, boolean, int, androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        kotlin.jvm.internal.DefaultConstructorMarker r1;
        boolean z0, z1, z2, z3;
        androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue r2;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        z2 := @parameter2: boolean;

        z3 := @parameter3: boolean;

        i7 := @parameter4: int;

        r2 := @parameter5: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue;

        i0 := @parameter6: int;

        r1 := @parameter7: kotlin.jvm.internal.DefaultConstructorMarker;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        z0 = 0;

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        z1 = 0;

     label2:
        $i3 = i0 & 4;

        if $i3 == 0 goto label3;

        z2 = 0;

     label3:
        $i4 = i0 & 8;

        if $i4 == 0 goto label4;

        z3 = 0;

     label4:
        $i5 = i0 & 16;

        if $i5 == 0 goto label5;

        i7 = -1;

     label5:
        $i6 = i0 & 32;

        if $i6 == 0 goto label6;

        r2 = (androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue) null;

     label6:
        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: void <init>(boolean,boolean,boolean,boolean,int,androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue)>(z0, z1, z2, z3, i7, r2);

        return;
    }

    public void <init>()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta r0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta;

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: void <init>(boolean,boolean,boolean,boolean,int,androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue,int,kotlin.jvm.internal.DefaultConstructorMarker)>(0, 0, 0, 0, 0, null, 63, null);

        return;
    }

    public final boolean component1()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta r0;
        boolean $z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta;

        $z0 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: boolean isVararg>;

        return $z0;
    }

    public final boolean component2()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta r0;
        boolean $z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta;

        $z0 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: boolean isProvided>;

        return $z0;
    }

    public final boolean component3()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta r0;
        boolean $z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta;

        $z0 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: boolean isStatic>;

        return $z0;
    }

    public final boolean component4()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta r0;
        boolean $z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta;

        $z0 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: boolean isCertain>;

        return $z0;
    }

    public final int component5()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta r0;
        int $i0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta;

        $i0 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: int maskSlot>;

        return $i0;
    }

    public final androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue component6()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta r0;
        androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue $r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta;

        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue maskParam>;

        return $r1;
    }

    public final androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta copy(boolean, boolean, boolean, boolean, int, androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta r0, $r2;
        boolean z0, z1, z2, z3;
        int i0;
        androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        z2 := @parameter2: boolean;

        z3 := @parameter3: boolean;

        i0 := @parameter4: int;

        r1 := @parameter5: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue;

        $r2 = new androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta;

        specialinvoke $r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: void <init>(boolean,boolean,boolean,boolean,int,androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue)>(z0, z1, z2, z3, i0, r1);

        return $r2;
    }

    public static androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta copy$default(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta, boolean, boolean, boolean, boolean, int, androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue, int, java.lang.Object)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta r0, $r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        java.lang.Object r1;
        boolean z0, z1, z2, z3;
        androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue r3;

        r0 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        z2 := @parameter3: boolean;

        z3 := @parameter4: boolean;

        i7 := @parameter5: int;

        r3 := @parameter6: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue;

        i0 := @parameter7: int;

        r1 := @parameter8: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        z0 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: boolean isVararg>;

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        z1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: boolean isProvided>;

     label2:
        $i3 = i0 & 4;

        if $i3 == 0 goto label3;

        z2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: boolean isStatic>;

     label3:
        $i4 = i0 & 8;

        if $i4 == 0 goto label4;

        z3 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: boolean isCertain>;

     label4:
        $i5 = i0 & 16;

        if $i5 == 0 goto label5;

        i7 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: int maskSlot>;

     label5:
        $i6 = i0 & 32;

        if $i6 == 0 goto label6;

        r3 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue maskParam>;

     label6:
        $r2 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta copy(boolean,boolean,boolean,boolean,int,androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue)>(z0, z1, z2, z3, i7, r3);

        return $r2;
    }

    public java.lang.String toString()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r14, $r15;
        boolean $z0, $z1, $z2, $z3;
        int $i0;
        androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue $r13;
        java.lang.String $r16;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ParamMeta(isVararg=");

        $z0 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: boolean isVararg>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", isProvided=");

        $z1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: boolean isProvided>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", isStatic=");

        $z2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: boolean isStatic>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", isCertain=");

        $z3 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: boolean isCertain>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", maskSlot=");

        $i0 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: int maskSlot>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", maskParam=");

        $r13 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue maskParam>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r16;
    }

    public int hashCode()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, i15, i16;
        androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue $r1;
        boolean $z0, $z1, $z2, $z3, z4, z5, z6, z7;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta;

        $z0 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: boolean isVararg>;

        if $z0 == 0 goto label1;

        $z0 = 1;

     label1:
        z4 = $z0;

        i13 = (int) z4;

        $i0 = i13 * 31;

        $z1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: boolean isProvided>;

        if $z1 == 0 goto label2;

        $z1 = 1;

     label2:
        z5 = $z1;

        i14 = (int) z5;

        $i1 = $i0 + i14;

        $i2 = $i1 * 31;

        $z2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: boolean isStatic>;

        if $z2 == 0 goto label3;

        $z2 = 1;

     label3:
        z6 = $z2;

        i15 = (int) z6;

        $i3 = $i2 + i15;

        $i4 = $i3 * 31;

        $z3 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: boolean isCertain>;

        if $z3 == 0 goto label4;

        $z3 = 1;

     label4:
        z7 = $z3;

        i16 = (int) z7;

        $i5 = $i4 + i16;

        $i7 = $i5 * 31;

        $i6 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: int maskSlot>;

        $i8 = staticinvoke <java.lang.Integer: int hashCode(int)>($i6);

        $i9 = $i7 + $i8;

        $i10 = $i9 * 31;

        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue maskParam>;

        if $r1 == null goto label5;

        $i12 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        goto label6;

     label5:
        $i12 = 0;

     label6:
        $i11 = $i10 + $i12;

        return $i11;
    }

    public boolean equals(java.lang.Object)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        int $i0, $i1;
        androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue $r3, $r4;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta;

        r1 := @parameter0: java.lang.Object;

        if r0 == r1 goto label1;

        $z0 = r1 instanceof androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta;

        if $z0 == 0 goto label2;

        r2 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta) r1;

        $z2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: boolean isVararg>;

        $z1 = r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: boolean isVararg>;

        if $z2 != $z1 goto label2;

        $z4 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: boolean isProvided>;

        $z3 = r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: boolean isProvided>;

        if $z4 != $z3 goto label2;

        $z6 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: boolean isStatic>;

        $z5 = r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: boolean isStatic>;

        if $z6 != $z5 goto label2;

        $z8 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: boolean isCertain>;

        $z7 = r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: boolean isCertain>;

        if $z8 != $z7 goto label2;

        $i1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: int maskSlot>;

        $i0 = r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: int maskSlot>;

        if $i1 != $i0 goto label2;

        $r4 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue maskParam>;

        $r3 = r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$ParamMeta: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue maskParam>;

        $z9 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, $r3);

        if $z9 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$calculateSourceInfo$1
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$calculateSourceInfo$1: org.jetbrains.kotlin.ir.SourceManager$FileEntry $fileEntry>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$calculateSourceInfo$1: kotlin.jvm.internal.Ref$BooleanRef $markedRepeatable>
    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$calculateSourceInfo$1 r0;
        java.lang.Object r1;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation $r2;
        java.lang.CharSequence $r3;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$calculateSourceInfo$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation) r1;

        $r3 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$calculateSourceInfo$1: java.lang.CharSequence invoke(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation)>($r2);

        return $r3;
    }

    public final java.lang.CharSequence invoke(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$calculateSourceInfo$1 r0;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation r1;
        java.lang.Object r2, $r31;
        java.lang.String r3, $r14, $r21, $r32;
        org.jetbrains.kotlin.ir.SourceManager$FileEntry $r4;
        org.jetbrains.kotlin.ir.IrElement $r5, $r6, $r9, $r24, $r27, $r28, $r30;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.StringBuilder $r7, $r8, $r10, $r11, $r12, $r13, $r17, $r18, $r19, $r20, $r22, $r23, $r25, $r26, $r29;
        boolean $z0, $z1;
        kotlin.jvm.internal.Ref$BooleanRef $r15, $r16;
        java.lang.CharSequence $r33;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$calculateSourceInfo$1;

        r1 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        virtualinvoke r1.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation: void markUsed()>();

        $r4 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$calculateSourceInfo$1: org.jetbrains.kotlin.ir.SourceManager$FileEntry $fileEntry>;

        if $r4 == null goto label1;

        $r30 = virtualinvoke r1.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation: org.jetbrains.kotlin.ir.IrElement getElement()>();

        $i7 = interfaceinvoke $r30.<org.jetbrains.kotlin.ir.IrElement: int getStartOffset()>();

        $i8 = interfaceinvoke $r4.<org.jetbrains.kotlin.ir.SourceManager$FileEntry: int getLineNumber(int)>($i7);

        $r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        goto label2;

     label1:
        $r31 = "";

     label2:
        r2 = $r31;

        $r5 = virtualinvoke r1.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation: org.jetbrains.kotlin.ir.IrElement getElement()>();

        $i0 = interfaceinvoke $r5.<org.jetbrains.kotlin.ir.IrElement: int getStartOffset()>();

        $r6 = virtualinvoke r1.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation: org.jetbrains.kotlin.ir.IrElement getElement()>();

        $i1 = interfaceinvoke $r6.<org.jetbrains.kotlin.ir.IrElement: int getEndOffset()>();

        if $i0 >= $i1 goto label3;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(64);

        $r24 = virtualinvoke r1.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation: org.jetbrains.kotlin.ir.IrElement getElement()>();

        $i3 = interfaceinvoke $r24.<org.jetbrains.kotlin.ir.IrElement: int getStartOffset()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(76);

        $r27 = virtualinvoke r1.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation: org.jetbrains.kotlin.ir.IrElement getElement()>();

        $i4 = interfaceinvoke $r27.<org.jetbrains.kotlin.ir.IrElement: int getEndOffset()>();

        $r28 = virtualinvoke r1.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation: org.jetbrains.kotlin.ir.IrElement getElement()>();

        $i5 = interfaceinvoke $r28.<org.jetbrains.kotlin.ir.IrElement: int getStartOffset()>();

        $i6 = $i4 - $i5;

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r32 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label4;

     label3:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(64);

        $r9 = virtualinvoke r1.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation: org.jetbrains.kotlin.ir.IrElement getElement()>();

        $i2 = interfaceinvoke $r9.<org.jetbrains.kotlin.ir.IrElement: int getStartOffset()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r32 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        r3 = $r32;

        $z0 = virtualinvoke r1.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation: boolean getRepeatable()>();

        if $z0 == 0 goto label5;

        $r15 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$calculateSourceInfo$1: kotlin.jvm.internal.Ref$BooleanRef $markedRepeatable>;

        $z1 = $r15.<kotlin.jvm.internal.Ref$BooleanRef: boolean element>;

        if $z1 != 0 goto label5;

        $r16 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$calculateSourceInfo$1: kotlin.jvm.internal.Ref$BooleanRef $markedRepeatable>;

        $r16.<kotlin.jvm.internal.Ref$BooleanRef: boolean element> = 1;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(42);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r33 = (java.lang.CharSequence) $r21;

        goto label6;

     label5:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r33 = (java.lang.CharSequence) $r14;

     label6:
        return $r33;
    }

    void <init>(org.jetbrains.kotlin.ir.SourceManager$FileEntry, kotlin.jvm.internal.Ref$BooleanRef)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$calculateSourceInfo$1 r0;
        org.jetbrains.kotlin.ir.SourceManager$FileEntry r1;
        kotlin.jvm.internal.Ref$BooleanRef r2;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$calculateSourceInfo$1;

        r1 := @parameter0: org.jetbrains.kotlin.ir.SourceManager$FileEntry;

        r2 := @parameter1: kotlin.jvm.internal.Ref$BooleanRef;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$calculateSourceInfo$1: org.jetbrains.kotlin.ir.SourceManager$FileEntry $fileEntry> = r1;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$calculateSourceInfo$1: kotlin.jvm.internal.Ref$BooleanRef $markedRepeatable> = r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$markCoalescableGroup$1$1
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$markCoalescableGroup$1$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$markCoalescableGroup$1$1 INSTANCE>
    public volatile java.lang.Object invoke()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$markCoalescableGroup$1$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$markCoalescableGroup$1$1;

        virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$markCoalescableGroup$1$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

    public final void invoke()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$markCoalescableGroup$1$1 r0;
        java.lang.String r1, $r3;
        boolean z0;
        java.lang.IllegalStateException $r2;
        java.lang.Throwable $r4;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$markCoalescableGroup$1$1;

        r1 = "Attempted to realize group twice";

        z0 = 0;

        $r2 = new java.lang.IllegalStateException;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        $r4 = (java.lang.Throwable) $r2;

        throw $r4;
    }

    void <init>()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$markCoalescableGroup$1$1 r0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$markCoalescableGroup$1$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    static void <clinit>()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$markCoalescableGroup$1$1 $r0;

        $r0 = new androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$markCoalescableGroup$1$1;

        specialinvoke $r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$markCoalescableGroup$1$1: void <init>()>();

        <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$markCoalescableGroup$1$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$markCoalescableGroup$1$1 INSTANCE> = $r0;

        return;
    }

androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$markCoalescableGroup$1
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$markCoalescableGroup$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope this$0>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$markCoalescableGroup$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope $scope>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$markCoalescableGroup$1: kotlin.jvm.functions.Function0 $makeEnd>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$markCoalescableGroup$1: kotlin.jvm.functions.Function0 $realizeGroup>
    public volatile java.lang.Object invoke()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$markCoalescableGroup$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$markCoalescableGroup$1;

        virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$markCoalescableGroup$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

    public final void invoke()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$markCoalescableGroup$1 r0;
        kotlin.jvm.functions.Function0 $r1, $r3, $r6;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope $r2, $r7;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$markCoalescableGroup$1$1 $r5;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$markCoalescableGroup$1;

        $r2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$markCoalescableGroup$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope $scope>;

        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$markCoalescableGroup$1: kotlin.jvm.functions.Function0 $makeEnd>;

        virtualinvoke $r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: void realizeGroup(kotlin.jvm.functions.Function0)>($r1);

        $r3 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$markCoalescableGroup$1: kotlin.jvm.functions.Function0 $realizeGroup>;

        interfaceinvoke $r3.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        $r7 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$markCoalescableGroup$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope this$0>;

        $r5 = <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$markCoalescableGroup$1$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$markCoalescableGroup$1$1 INSTANCE>;

        $r6 = (kotlin.jvm.functions.Function0) $r5;

        staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: void access$setRealizeCoalescableChildGroup$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope,kotlin.jvm.functions.Function0)>($r7, $r6);

        return;
    }

    void <init>(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope, androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope, kotlin.jvm.functions.Function0, kotlin.jvm.functions.Function0)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$markCoalescableGroup$1 r0;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope r1, r2;
        kotlin.jvm.functions.Function0 r3, r4;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$markCoalescableGroup$1;

        r1 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope;

        r2 := @parameter1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope;

        r3 := @parameter2: kotlin.jvm.functions.Function0;

        r4 := @parameter3: kotlin.jvm.functions.Function0;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$markCoalescableGroup$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope this$0> = r1;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$markCoalescableGroup$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope $scope> = r2;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$markCoalescableGroup$1: kotlin.jvm.functions.Function0 $makeEnd> = r3;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$markCoalescableGroup$1: kotlin.jvm.functions.Function0 $realizeGroup> = r4;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$realizeCoalescableChildGroup$1
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$realizeCoalescableChildGroup$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$realizeCoalescableChildGroup$1 INSTANCE>
    public volatile java.lang.Object invoke()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$realizeCoalescableChildGroup$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$realizeCoalescableChildGroup$1;

        virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$realizeCoalescableChildGroup$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

    public final void invoke()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$realizeCoalescableChildGroup$1 r0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$realizeCoalescableChildGroup$1;

        return;
    }

    void <init>()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$realizeCoalescableChildGroup$1 r0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$realizeCoalescableChildGroup$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    static void <clinit>()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$realizeCoalescableChildGroup$1 $r0;

        $r0 = new androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$realizeCoalescableChildGroup$1;

        specialinvoke $r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$realizeCoalescableChildGroup$1: void <init>()>();

        <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$realizeCoalescableChildGroup$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$realizeCoalescableChildGroup$1 INSTANCE> = $r0;

        return;
    }

androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: java.util.List extraEndLocations>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: java.util.List sourceLocations>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: boolean hasComposableCallsWithGroups>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: boolean hasComposableCalls>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: boolean hasReturn>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: boolean hasJump>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: kotlin.jvm.functions.Function0 realizeCoalescableChildGroup>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: boolean shouldRealizeCoalescableChild>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope coalescableChild>
    public boolean isInComposable()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope r0;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope $r1;
        boolean $z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope;

        $r1 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope getParent()>();

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: boolean isInComposable()>();

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final void realizeGroup(kotlin.jvm.functions.Function0)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope r0;
        kotlin.jvm.functions.Function0 r1, r2, r3;
        boolean z0, z1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope;

        r1 := @parameter0: kotlin.jvm.functions.Function0;

        virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: void realizeCoalescableGroup()>();

        if r1 == null goto label1;

        r2 = r1;

        z0 = 0;

        z1 = 0;

        r3 = r2;

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: void realizeEndCalls(kotlin.jvm.functions.Function0)>(r3);

        goto label1;

     label1:
        return;
    }

    public final void recordComposableCall(boolean)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope r0, $r1;
        boolean z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope;

        z0 := @parameter0: boolean;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: boolean hasComposableCalls> = 1;

        if z0 == 0 goto label1;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: boolean hasComposableCallsWithGroups> = 1;

     label1:
        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope coalescableChild>;

        if $r1 == null goto label2;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: boolean shouldRealizeCoalescableChild> = 1;

     label2:
        return;
    }

    public final androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation recordSourceLocation(org.jetbrains.kotlin.ir.IrElement, androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope r0;
        org.jetbrains.kotlin.ir.IrElement r1;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation r2, r3, r4, $r6;
        boolean z0, z1;
        java.util.List $r5;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope;

        r1 := @parameter0: org.jetbrains.kotlin.ir.IrElement;

        r2 := @parameter1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "call");

        $r6 = r2;

        if r2 == null goto label1;

        goto label2;

     label1:
        $r6 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation sourceLocationOf(org.jetbrains.kotlin.ir.IrElement)>(r1);

     label2:
        r3 = $r6;

        z0 = 0;

        z1 = 0;

        r4 = r3;

        $r5 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: java.util.List sourceLocations>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r4);

        return r3;
    }

    public final void markReturn(kotlin.jvm.functions.Function1)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope r0;
        kotlin.jvm.functions.Function1 r1;
        java.util.List $r2;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "extraEndLocation");

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: boolean hasReturn> = 1;

        $r2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: java.util.List extraEndLocations>;

        staticinvoke <org.jetbrains.kotlin.backend.common.UtilsKt: boolean push(java.util.List,java.lang.Object)>($r2, r1);

        return;
    }

    public final void markJump(kotlin.jvm.functions.Function1)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope r0;
        kotlin.jvm.functions.Function1 r1;
        java.util.List $r2;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "extraEndLocation");

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: boolean hasJump> = 1;

        $r2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: java.util.List extraEndLocations>;

        staticinvoke <org.jetbrains.kotlin.backend.common.UtilsKt: boolean push(java.util.List,java.lang.Object)>($r2, r1);

        return;
    }

    public final void markCoalescableGroup(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope, kotlin.jvm.functions.Function0, kotlin.jvm.functions.Function0)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope r0, r1;
        kotlin.jvm.functions.Function0 r2, r3, $r6;
        java.util.List $r4;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$markCoalescableGroup$1 $r5;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope;

        r1 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope;

        r2 := @parameter1: kotlin.jvm.functions.Function0;

        r3 := @parameter2: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "scope");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "realizeGroup");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "makeEnd");

        $r4 = r1.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: java.util.List sourceLocations>;

        virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: void addProvisionalSourceLocations(java.util.List)>($r4);

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope coalescableChild> = r1;

        $r5 = new androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$markCoalescableGroup$1;

        specialinvoke $r5.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$markCoalescableGroup$1: void <init>(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope,kotlin.jvm.functions.Function0,kotlin.jvm.functions.Function0)>(r0, r1, r3, r2);

        $r6 = (kotlin.jvm.functions.Function0) $r5;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: kotlin.jvm.functions.Function0 realizeCoalescableChildGroup> = $r6;

        return;
    }

    public boolean calculateHasSourceInformation(boolean)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope r0;
        boolean z0, z1, $z2, $z3, $z4;
        java.util.Collection r1;
        java.util.List $r2;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label3;

        $r2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: java.util.List sourceLocations>;

        r1 = (java.util.Collection) $r2;

        z1 = 0;

        $z2 = interfaceinvoke r1.<java.util.Collection: boolean isEmpty()>();

        if $z2 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        if $z3 == 0 goto label3;

        $z4 = 1;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        return $z4;
    }

    public java.lang.String calculateSourceInfo(boolean)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope r0;
        boolean z0, $z3, $z4, $z7, $z9, $z10, $z11;
        java.lang.Iterable $r1, $r10, $r14;
        java.util.Collection r2, r18;
        java.util.Iterator r3;
        java.lang.Object r4;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation r5;
        java.util.List $r6, $r7, $r9, r19;
        java.util.ArrayList $r8;
        kotlin.jvm.internal.Ref$BooleanRef $r11;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FileScope $r12;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$calculateSourceInfo$1 $r13;
        java.lang.CharSequence $r15;
        kotlin.jvm.functions.Function1 $r16;
        org.jetbrains.kotlin.ir.declarations.IrFile $r17;
        org.jetbrains.kotlin.ir.SourceManager$FileEntry $r21;
        java.lang.String $r22;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label10;

        $r6 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: java.util.List sourceLocations>;

        r18 = (java.util.Collection) $r6;

        $z3 = interfaceinvoke r18.<java.util.Collection: boolean isEmpty()>();

        if $z3 != 0 goto label01;

        $z7 = 1;

        goto label02;

     label01:
        $z7 = 0;

     label02:
        if $z7 == 0 goto label10;

        $r7 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: java.util.List sourceLocations>;

        $r1 = (java.lang.Iterable) $r7;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r2 = (java.util.Collection) $r8;

        r3 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label03:
        $z9 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label06;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation) r4;

        $z4 = virtualinvoke r5.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation: boolean getUsed()>();

        if $z4 != 0 goto label04;

        $z10 = 1;

        goto label05;

     label04:
        $z10 = 0;

     label05:
        if $z10 == 0 goto label03;

        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>(r4);

        goto label03;

     label06:
        $r9 = (java.util.List) r2;

        $r10 = (java.lang.Iterable) $r9;

        r19 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List distinct(java.lang.Iterable)>($r10);

        $r11 = new kotlin.jvm.internal.Ref$BooleanRef;

        specialinvoke $r11.<kotlin.jvm.internal.Ref$BooleanRef: void <init>()>();

        $r11.<kotlin.jvm.internal.Ref$BooleanRef: boolean element> = 0;

        $r12 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FileScope getFileScope()>();

        if $r12 == null goto label07;

        $r17 = virtualinvoke $r12.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FileScope: org.jetbrains.kotlin.ir.declarations.IrFile getDeclaration()>();

        if $r17 == null goto label07;

        $r21 = interfaceinvoke $r17.<org.jetbrains.kotlin.ir.declarations.IrFile: org.jetbrains.kotlin.ir.SourceManager$FileEntry getFileEntry()>();

        goto label08;

     label07:
        $r21 = null;

     label08:
        $z11 = interfaceinvoke r19.<java.util.List: boolean isEmpty()>();

        if $z11 == 0 goto label09;

        $r22 = null;

        goto label11;

     label09:
        $r14 = (java.lang.Iterable) r19;

        $r15 = (java.lang.CharSequence) ",";

        $r13 = new androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$calculateSourceInfo$1;

        specialinvoke $r13.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$calculateSourceInfo$1: void <init>(org.jetbrains.kotlin.ir.SourceManager$FileEntry,kotlin.jvm.internal.Ref$BooleanRef)>($r21, $r11);

        $r16 = (kotlin.jvm.functions.Function1) $r13;

        $r22 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.String joinToString$default(java.lang.Iterable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r14, $r15, null, null, 0, null, $r16, 30, null);

        goto label11;

     label10:
        $r22 = null;

     label11:
        return $r22;
    }

    public androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation sourceLocationOf(org.jetbrains.kotlin.ir.IrElement)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope r0;
        org.jetbrains.kotlin.ir.IrElement r1;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation $r2;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope;

        r1 := @parameter0: org.jetbrains.kotlin.ir.IrElement;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "call");

        $r2 = new androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation;

        specialinvoke $r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation: void <init>(org.jetbrains.kotlin.ir.IrElement,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker)>(r1, 0, 2, null);

        return $r2;
    }

    public final void addProvisionalSourceLocations(java.util.List)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope r0;
        java.util.List r1, $r3;
        java.util.Collection r2;
        boolean z0;
        java.lang.Iterable $r4;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope;

        r1 := @parameter0: java.util.List;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "locations");

        $r3 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: java.util.List sourceLocations>;

        r2 = (java.util.Collection) $r3;

        z0 = 0;

        $r4 = (java.lang.Iterable) r1;

        staticinvoke <kotlin.collections.CollectionsKt: boolean addAll(java.util.Collection,java.lang.Iterable)>(r2, $r4);

        return;
    }

    public final void realizeCoalescableGroup()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope r0, $r1;
        boolean $z0;
        kotlin.jvm.functions.Function0 $r2;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope;

        $z0 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: boolean shouldRealizeCoalescableChild>;

        if $z0 == 0 goto label1;

        $r2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: kotlin.jvm.functions.Function0 realizeCoalescableChildGroup>;

        interfaceinvoke $r2.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        goto label2;

     label1:
        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope coalescableChild>;

        if $r1 == null goto label2;

        virtualinvoke $r1.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: void realizeCoalescableGroup()>();

        goto label2;

     label2:
        return;
    }

    private final void realizeEndCalls(kotlin.jvm.functions.Function0)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope r0;
        kotlin.jvm.functions.Function0 r1;
        java.lang.Iterable $r2;
        java.util.Iterator r3;
        java.lang.Object r4, $r7;
        kotlin.jvm.functions.Function1 r5;
        java.util.List $r6;
        boolean $z2;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope;

        r1 := @parameter0: kotlin.jvm.functions.Function0;

        $r6 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: java.util.List extraEndLocations>;

        $r2 = (java.lang.Iterable) $r6;

        r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (kotlin.jvm.functions.Function1) r4;

        $r7 = interfaceinvoke r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        interfaceinvoke r5.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r7);

        goto label1;

     label2:
        return;
    }

    public final boolean getHasComposableCallsWithGroups()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope r0;
        boolean $z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope;

        $z0 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: boolean hasComposableCallsWithGroups>;

        return $z0;
    }

    public final boolean getHasComposableCalls()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope r0;
        boolean $z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope;

        $z0 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: boolean hasComposableCalls>;

        return $z0;
    }

    public final boolean getHasReturn()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope r0;
        boolean $z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope;

        $z0 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: boolean hasReturn>;

        return $z0;
    }

    public final boolean getHasJump()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope r0;
        boolean $z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope;

        $z0 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: boolean hasJump>;

        return $z0;
    }

    public void <init>(java.lang.String)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope r0;
        java.lang.String r1;
        java.util.ArrayList $r2, $r4;
        java.util.List $r3, $r5;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$realizeCoalescableChildGroup$1 $r6;
        kotlin.jvm.functions.Function0 $r7;
        boolean z0, z1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "name");

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: void <init>(java.lang.String,kotlin.jvm.internal.DefaultConstructorMarker)>(r1, null);

        z0 = 0;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = (java.util.List) $r2;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: java.util.List extraEndLocations> = $r3;

        z1 = 0;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = (java.util.List) $r4;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: java.util.List sourceLocations> = $r5;

        $r6 = <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$realizeCoalescableChildGroup$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope$realizeCoalescableChildGroup$1 INSTANCE>;

        $r7 = (kotlin.jvm.functions.Function0) $r6;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: kotlin.jvm.functions.Function0 realizeCoalescableChildGroup> = $r7;

        return;
    }

    public static final kotlin.jvm.functions.Function0 access$getRealizeCoalescableChildGroup$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope $r0;
        kotlin.jvm.functions.Function0 $r1;

        $r0 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope;

        $r1 = $r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: kotlin.jvm.functions.Function0 realizeCoalescableChildGroup>;

        return $r1;
    }

    public static final void access$setRealizeCoalescableChildGroup$p(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope, kotlin.jvm.functions.Function0)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope $r0;
        kotlin.jvm.functions.Function0 r1;

        $r0 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope;

        r1 := @parameter1: kotlin.jvm.functions.Function0;

        $r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: kotlin.jvm.functions.Function0 realizeCoalescableChildGroup> = r1;

        return;
    }

androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BranchScope
    public void <init>()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BranchScope r0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BranchScope;

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: void <init>(java.lang.String)>("branch");

        return;
    }

androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$CaptureScope
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$CaptureScope: boolean hasCapturedComposableCall>
    public final boolean getHasCapturedComposableCall()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$CaptureScope r0;
        boolean $z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$CaptureScope;

        $z0 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$CaptureScope: boolean hasCapturedComposableCall>;

        return $z0;
    }

    public final void markCapturedComposableCall()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$CaptureScope r0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$CaptureScope;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$CaptureScope: boolean hasCapturedComposableCall> = 1;

        return;
    }

    public androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation sourceLocationOf(org.jetbrains.kotlin.ir.IrElement)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$CaptureScope r0;
        org.jetbrains.kotlin.ir.IrElement r1;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation $r2;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$CaptureScope;

        r1 := @parameter0: org.jetbrains.kotlin.ir.IrElement;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "call");

        $r2 = new androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation;

        specialinvoke $r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation: void <init>(org.jetbrains.kotlin.ir.IrElement,boolean)>(r1, 1);

        return $r2;
    }

    public void <init>()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$CaptureScope r0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$CaptureScope;

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: void <init>(java.lang.String)>("capture");

        return;
    }

androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$ClassScope
    public void <init>(org.jetbrains.kotlin.name.Name)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$ClassScope r0;
        org.jetbrains.kotlin.name.Name r1;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String $r4, $r6;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$ClassScope;

        r1 := @parameter0: org.jetbrains.kotlin.name.Name;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "name");

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("class ");

        $r4 = virtualinvoke r1.<org.jetbrains.kotlin.name.Name: java.lang.String asString()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: void <init>(java.lang.String,kotlin.jvm.internal.DefaultConstructorMarker)>($r6, null);

        return;
    }

androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$ComposableLambdaScope
    public boolean calculateHasSourceInformation(boolean)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$ComposableLambdaScope r0;
        boolean z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$ComposableLambdaScope;

        z0 := @parameter0: boolean;

        return z0;
    }

    public java.lang.String calculateSourceInfo(boolean)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$ComposableLambdaScope r0;
        boolean z0;
        java.lang.StringBuilder $r1, $r2, $r3, $r7, $r9;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope $r4;
        java.lang.String $r5, $r6, $r8, $r10;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$ComposableLambdaScope;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label5;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(67);

        $r6 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: java.lang.String calculateSourceInfo(boolean)>(z0);

        if $r6 == null goto label1;

        goto label2;

     label1:
        $r6 = "";

     label2:
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $r4 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$ComposableLambdaScope: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope getFunctionScope()>();

        if $r4 == null goto label3;

        $r5 = virtualinvoke $r4.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: java.lang.String sourceFileInformation$compose_compiler_hosted()>();

        $r8 = $r5;

        if $r5 == null goto label3;

        goto label4;

     label3:
        $r8 = "";

     label4:
        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label6;

     label5:
        $r10 = null;

     label6:
        return $r10;
    }

    public void <init>()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$ComposableLambdaScope r0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$ComposableLambdaScope;

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: void <init>(java.lang.String)>("composableLambda");

        return;
    }

androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FieldScope
    public void <init>(org.jetbrains.kotlin.name.Name)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FieldScope r0;
        org.jetbrains.kotlin.name.Name r1;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String $r4, $r6;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FieldScope;

        r1 := @parameter0: org.jetbrains.kotlin.name.Name;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "name");

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("field ");

        $r4 = virtualinvoke r1.<org.jetbrains.kotlin.name.Name: java.lang.String asString()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: void <init>(java.lang.String,kotlin.jvm.internal.DefaultConstructorMarker)>($r6, null);

        return;
    }

androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FileScope
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FileScope: org.jetbrains.kotlin.ir.declarations.IrFile declaration>
    public androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FileScope getFileScope()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FileScope r0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FileScope;

        return r0;
    }

    public final org.jetbrains.kotlin.ir.declarations.IrFile getDeclaration()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FileScope r0;
        org.jetbrains.kotlin.ir.declarations.IrFile $r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FileScope;

        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FileScope: org.jetbrains.kotlin.ir.declarations.IrFile declaration>;

        return $r1;
    }

    public void <init>(org.jetbrains.kotlin.ir.declarations.IrFile)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FileScope r0;
        org.jetbrains.kotlin.ir.declarations.IrFile r1;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String $r4, $r6;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FileScope;

        r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrFile;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "declaration");

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file ");

        $r4 = staticinvoke <org.jetbrains.kotlin.ir.declarations.IrFileKt: java.lang.String getName(org.jetbrains.kotlin.ir.declarations.IrFile)>(r1);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: void <init>(java.lang.String,kotlin.jvm.internal.DefaultConstructorMarker)>($r6, null);

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FileScope: org.jetbrains.kotlin.ir.declarations.IrFile declaration> = r1;

        return;
    }

androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope$parameterInformation$$inlined$sortedBy$1
    public void <init>()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope$parameterInformation$$inlined$sortedBy$1 r0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope$parameterInformation$$inlined$sortedBy$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final int compare(java.lang.Object, java.lang.Object)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope$parameterInformation$$inlined$sortedBy$1 r0;
        java.lang.Object r1, r2, $r5, $r9;
        boolean z0;
        java.lang.Comparable r3, $r12;
        java.lang.String r4, $r8;
        org.jetbrains.kotlin.ir.declarations.IrValueParameter $r6, $r10;
        org.jetbrains.kotlin.name.Name $r7, $r11;
        int $i0;
        kotlin.Pair r13, r14;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope$parameterInformation$$inlined$sortedBy$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        z0 = 0;

        r13 = (kotlin.Pair) r1;

        $r5 = virtualinvoke r13.<kotlin.Pair: java.lang.Object getSecond()>();

        $r6 = (org.jetbrains.kotlin.ir.declarations.IrValueParameter) $r5;

        $r7 = interfaceinvoke $r6.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.name.Name getName()>();

        $r8 = virtualinvoke $r7.<org.jetbrains.kotlin.name.Name: java.lang.String asString()>();

        r14 = (kotlin.Pair) r2;

        r3 = (java.lang.Comparable) $r8;

        $r9 = virtualinvoke r14.<kotlin.Pair: java.lang.Object getSecond()>();

        $r10 = (org.jetbrains.kotlin.ir.declarations.IrValueParameter) $r9;

        $r11 = interfaceinvoke $r10.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.name.Name getName()>();

        r4 = virtualinvoke $r11.<org.jetbrains.kotlin.name.Name: java.lang.String asString()>();

        $r12 = (java.lang.Comparable) r4;

        $i0 = staticinvoke <kotlin.comparisons.ComparisonsKt: int compareValues(java.lang.Comparable,java.lang.Comparable)>(r3, $r12);

        return $i0;
    }

androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope$parameterInformation$1
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope$parameterInformation$1: kotlin.jvm.internal.Ref$IntRef $run>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope$parameterInformation$1: java.lang.StringBuilder $builder>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope$parameterInformation$1: java.util.List $parameters>
    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope$parameterInformation$1 r0;
        java.lang.Object r1;
        java.lang.Number $r2;
        int $i0;
        kotlin.Unit $r3;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope$parameterInformation$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Number) r1;

        $i0 = virtualinvoke $r2.<java.lang.Number: int intValue()>();

        virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope$parameterInformation$1: void invoke(int)>($i0);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

    public final void invoke(int)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope$parameterInformation$1 r0;
        int i0, $i1, $i2, $i3, $i4;
        kotlin.jvm.internal.Ref$IntRef $r1, $r5, $r6;
        java.lang.StringBuilder $r2, $r7;
        java.util.List $r4;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope$parameterInformation$1;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope$parameterInformation$1: kotlin.jvm.internal.Ref$IntRef $run>;

        $i1 = $r1.<kotlin.jvm.internal.Ref$IntRef: int element>;

        if $i1 <= 0 goto label2;

        $r2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope$parameterInformation$1: java.lang.StringBuilder $builder>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(33);

        $r4 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope$parameterInformation$1: java.util.List $parameters>;

        $i2 = interfaceinvoke $r4.<java.util.List: int size()>();

        $i3 = $i2 - 1;

        if i0 >= $i3 goto label1;

        $r7 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope$parameterInformation$1: java.lang.StringBuilder $builder>;

        $r6 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope$parameterInformation$1: kotlin.jvm.internal.Ref$IntRef $run>;

        $i4 = $r6.<kotlin.jvm.internal.Ref$IntRef: int element>;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

     label1:
        $r5 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope$parameterInformation$1: kotlin.jvm.internal.Ref$IntRef $run>;

        $r5.<kotlin.jvm.internal.Ref$IntRef: int element> = 0;

     label2:
        return;
    }

    void <init>(kotlin.jvm.internal.Ref$IntRef, java.lang.StringBuilder, java.util.List)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope$parameterInformation$1 r0;
        kotlin.jvm.internal.Ref$IntRef r1;
        java.lang.StringBuilder r2;
        java.util.List r3;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope$parameterInformation$1;

        r1 := @parameter0: kotlin.jvm.internal.Ref$IntRef;

        r2 := @parameter1: java.lang.StringBuilder;

        r3 := @parameter2: java.util.List;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope$parameterInformation$1: kotlin.jvm.internal.Ref$IntRef $run> = r1;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope$parameterInformation$1: java.lang.StringBuilder $builder> = r2;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope$parameterInformation$1: java.util.List $parameters> = r3;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: java.util.Map remappedParams>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: java.util.Map paramsToSlots>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: boolean isInlinedLambda>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: int lastTemporaryIndex>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: org.jetbrains.kotlin.ir.declarations.IrValueParameter composerParameter>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue defaultParameter>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue changedParameter>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: int realValueParamCount>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: int slotCount>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue dirty>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: boolean dispatchReceiverUsed>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: boolean extensionReceiverUsed>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: boolean isComposable>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: org.jetbrains.kotlin.ir.declarations.IrFunction function>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer transformer>
    public final java.util.Map getRemappedParams()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope r0;
        java.util.Map $r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: java.util.Map remappedParams>;

        return $r1;
    }

    public final java.util.Map getParamsToSlots()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope r0;
        java.util.Map $r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: java.util.Map paramsToSlots>;

        return $r1;
    }

    public final boolean isInlinedLambda()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope r0;
        boolean $z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        $z0 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: boolean isInlinedLambda>;

        return $z0;
    }

    private final int nextTemporaryIndex()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope r0;
        int i0, $i1, $i2;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        $i1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: int lastTemporaryIndex>;

        i0 = $i1;

        $i2 = $i1 + 1;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: int lastTemporaryIndex> = $i2;

        return i0;
    }

    public boolean isInComposable()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope r0;
        boolean $z0, $z1;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope $r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        $z0 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: boolean isInlinedLambda>;

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope getParent()>();

        if $r1 == null goto label1;

        $z1 = virtualinvoke $r1.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: boolean isInComposable()>();

        goto label3;

     label1:
        $z1 = 0;

        goto label3;

     label2:
        $z1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: boolean isComposable>;

     label3:
        return $z1;
    }

    public androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope getFunctionScope()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope r0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        return r0;
    }

    public org.jetbrains.kotlin.ir.declarations.IrValueParameter getNearestComposer()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope r0;
        org.jetbrains.kotlin.ir.declarations.IrValueParameter $r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: org.jetbrains.kotlin.ir.declarations.IrValueParameter composerParameter>;

        if $r1 == null goto label1;

        goto label2;

     label1:
        $r1 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: org.jetbrains.kotlin.ir.declarations.IrValueParameter getNearestComposer()>();

     label2:
        return $r1;
    }

    public final org.jetbrains.kotlin.ir.declarations.IrValueParameter getComposerParameter()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope r0;
        org.jetbrains.kotlin.ir.declarations.IrValueParameter $r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: org.jetbrains.kotlin.ir.declarations.IrValueParameter composerParameter>;

        return $r1;
    }

    public final androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue getDefaultParameter()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope r0;
        androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue $r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue defaultParameter>;

        return $r1;
    }

    public final androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue getChangedParameter()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope r0;
        androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue $r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue changedParameter>;

        return $r1;
    }

    public final int getRealValueParamCount()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope r0;
        int $i0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        $i0 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: int realValueParamCount>;

        return $i0;
    }

    public final int getSlotCount()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope r0;
        int $i0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        $i0 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: int slotCount>;

        return $i0;
    }

    public final androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue getDirty()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope r0;
        androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue $r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue dirty>;

        return $r1;
    }

    public final void setDirty(androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope r0;
        androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        r1 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue dirty> = r1;

        return;
    }

    public final boolean getDispatchReceiverUsed()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope r0;
        boolean $z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        $z0 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: boolean dispatchReceiverUsed>;

        return $z0;
    }

    public final boolean getExtensionReceiverUsed()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope r0;
        boolean $z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        $z0 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: boolean extensionReceiverUsed>;

        return $z0;
    }

    public final void markGetDispatchReceiver()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope r0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: boolean dispatchReceiverUsed> = 1;

        return;
    }

    public final void markGetExtensionReceiver()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope r0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: boolean extensionReceiverUsed> = 1;

        return;
    }

    private final java.lang.String parameterInformation()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope r0;
        java.lang.StringBuilder r1, $r4, $r33, $r34, $r35;
        java.util.List r2, $r6, $r9, $r12, $r14, $r93;
        java.lang.Integer r3, $r27, $r29, $r30, $r32, $r40, $r60, $r63;
        org.jetbrains.kotlin.ir.declarations.IrFunction $r5;
        java.util.ArrayList $r7, $r8, $r13;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13, i14, i15, $i16, $i17, i18, i19, i20, i22, i23;
        boolean $z2, $z3, $z4, $z6, $z7, $z10, $z14, $z16, z19, z22, z25, z28, z29, z30, z31, z32, z33, z35, z36;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope$parameterInformation$$inlined$sortedBy$1 $r10;
        java.util.Comparator $r11;
        kotlin.Pair[] $r15, $r17, $r19;
        java.lang.Object[] $r16, $r18;
        kotlin.jvm.internal.Ref$IntRef $r20;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope$parameterInformation$1 $r21;
        org.jetbrains.kotlin.ir.types.IrType $r23, $r41, $r42, $r52;
        org.jetbrains.kotlin.ir.symbols.IrClassifierSymbol $r24, $r56;
        java.lang.Object $r25, $r28, $r31, $r59, r70, $r76, $r85, r98;
        java.lang.Number $r26;
        java.lang.IllegalStateException $r36;
        java.lang.String $r37, $r47, $r48, $r49, $r66, r101, $r103;
        java.lang.Throwable $r38;
        org.jetbrains.kotlin.ir.declarations.IrClass $r43;
        org.jetbrains.kotlin.ir.declarations.IrDeclarationWithName $r44;
        org.jetbrains.kotlin.name.FqName $r45, r102;
        org.jetbrains.kotlin.ir.symbols.IrSymbol $r54, $r55;
        java.lang.NullPointerException $r57;
        kotlin.Pair $r58, $r62, r79, r86, r88;
        org.jetbrains.kotlin.name.Name $r65;
        java.lang.Iterable $r67, $r72, r73, $r80, $r81, r82, $r96;
        java.util.Collection r68, $r74, r78, $r83, r87, r89;
        java.util.Iterator $r69, r75, r84, $r97;
        org.jetbrains.kotlin.ir.declarations.IrValueParameter r71, r77, r99;
        java.util.Map $r90;
        java.lang.Integer[] r91, r92;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r100;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("P(");

        r1 = $r4;

        $r5 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: org.jetbrains.kotlin.ir.declarations.IrFunction function>;

        $r6 = interfaceinvoke $r5.<org.jetbrains.kotlin.ir.declarations.IrFunction: java.util.List getValueParameters()>();

        $r67 = (java.lang.Iterable) $r6;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r68 = (java.util.Collection) $r7;

        $r69 = interfaceinvoke $r67.<java.lang.Iterable: java.util.Iterator iterator()>();

     label01:
        $z14 = interfaceinvoke $r69.<java.util.Iterator: boolean hasNext()>();

        if $z14 == 0 goto label04;

        r70 = interfaceinvoke $r69.<java.util.Iterator: java.lang.Object next()>();

        r71 = (org.jetbrains.kotlin.ir.declarations.IrValueParameter) r70;

        $r65 = interfaceinvoke r71.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.name.Name getName()>();

        $r66 = virtualinvoke $r65.<org.jetbrains.kotlin.name.Name: java.lang.String asString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r66, "it.name.asString()");

        $z10 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r66, "$", 0, 2, null);

        if $z10 != 0 goto label02;

        $z16 = 1;

        goto label03;

     label02:
        $z16 = 0;

     label03:
        if $z16 == 0 goto label01;

        interfaceinvoke r68.<java.util.Collection: boolean add(java.lang.Object)>(r70);

        goto label01;

     label04:
        r2 = (java.util.List) r68;

        $r72 = (java.lang.Iterable) r2;

        r73 = $r72;

        $r8 = new java.util.ArrayList;

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r72, 10);

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>($i0);

        $r74 = (java.util.Collection) $r8;

        i10 = 0;

        r75 = interfaceinvoke r73.<java.lang.Iterable: java.util.Iterator iterator()>();

     label05:
        $z2 = interfaceinvoke r75.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label07;

        $r76 = interfaceinvoke r75.<java.util.Iterator: java.lang.Object next()>();

        $i9 = i10;

        i10 = i10 + 1;

        i11 = $i9;

        z19 = 0;

        if i11 >= 0 goto label06;

        staticinvoke <kotlin.collections.CollectionsKt: void throwIndexOverflow()>();

     label06:
        r77 = (org.jetbrains.kotlin.ir.declarations.IrValueParameter) $r76;

        i12 = i11;

        r78 = $r74;

        $r62 = new kotlin.Pair;

        $r63 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i12);

        specialinvoke $r62.<kotlin.Pair: void <init>(java.lang.Object,java.lang.Object)>($r63, r77);

        r79 = $r62;

        interfaceinvoke r78.<java.util.Collection: boolean add(java.lang.Object)>(r79);

        goto label05;

     label07:
        $r9 = (java.util.List) $r74;

        $r80 = (java.lang.Iterable) $r9;

        z22 = 0;

        $r10 = new androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope$parameterInformation$$inlined$sortedBy$1;

        specialinvoke $r10.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope$parameterInformation$$inlined$sortedBy$1: void <init>()>();

        $r11 = (java.util.Comparator) $r10;

        $r12 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List sortedWith(java.lang.Iterable,java.util.Comparator)>($r80, $r11);

        $r81 = (java.lang.Iterable) $r12;

        r82 = $r81;

        $r13 = new java.util.ArrayList;

        $i1 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r81, 10);

        specialinvoke $r13.<java.util.ArrayList: void <init>(int)>($i1);

        $r83 = (java.util.Collection) $r13;

        i13 = 0;

        r84 = interfaceinvoke r82.<java.lang.Iterable: java.util.Iterator iterator()>();

     label08:
        $z3 = interfaceinvoke r84.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label10;

        $r85 = interfaceinvoke r84.<java.util.Iterator: java.lang.Object next()>();

        $i8 = i13;

        i13 = i13 + 1;

        i14 = $i8;

        z25 = 0;

        if i14 >= 0 goto label09;

        staticinvoke <kotlin.collections.CollectionsKt: void throwIndexOverflow()>();

     label09:
        r86 = (kotlin.Pair) $r85;

        i15 = i14;

        r87 = $r83;

        $r58 = new kotlin.Pair;

        $r59 = virtualinvoke r86.<kotlin.Pair: java.lang.Object getFirst()>();

        $r60 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i15);

        specialinvoke $r58.<kotlin.Pair: void <init>(java.lang.Object,java.lang.Object)>($r59, $r60);

        r88 = $r58;

        interfaceinvoke r87.<java.util.Collection: boolean add(java.lang.Object)>(r88);

        goto label08;

     label10:
        $r14 = (java.util.List) $r83;

        r89 = (java.util.Collection) $r14;

        $r15 = newarray (kotlin.Pair)[0];

        $r16 = interfaceinvoke r89.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r15);

        if $r16 != null goto label11;

        $r57 = new java.lang.NullPointerException;

        specialinvoke $r57.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlin.Array<T>");

        throw $r57;

     label11:
        $r17 = (kotlin.Pair[]) $r16;

        $i2 = lengthof $r17;

        $r18 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r17, $i2);

        $r19 = (kotlin.Pair[]) $r18;

        $r90 = staticinvoke <kotlin.collections.MapsKt: java.util.Map mapOf(kotlin.Pair[])>($r19);

        $i16 = interfaceinvoke r2.<java.util.List: int size()>();

        r91 = newarray (java.lang.Integer)[$i16];

        $i17 = 0;

     label12:
        if $i17 >= $i16 goto label13;

        i18 = $i17;

        r92 = r91;

        z28 = 0;

        r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i17);

        r92[i18] = r3;

        $i17 = $i17 + 1;

        goto label12;

     label13:
        $r93 = staticinvoke <kotlin.collections.ArraysKt: java.util.List toMutableList(java.lang.Object[])>(r91);

        $r20 = new kotlin.jvm.internal.Ref$IntRef;

        specialinvoke $r20.<kotlin.jvm.internal.Ref$IntRef: void <init>()>();

        $r20.<kotlin.jvm.internal.Ref$IntRef: int element> = 0;

        z29 = 0;

        $r21 = new androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope$parameterInformation$1;

        specialinvoke $r21.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope$parameterInformation$1: void <init>(kotlin.jvm.internal.Ref$IntRef,java.lang.StringBuilder,java.util.List)>($r20, r1, r2);

        $r96 = (java.lang.Iterable) r2;

        z30 = 0;

        i19 = 0;

        $r97 = interfaceinvoke $r96.<java.lang.Iterable: java.util.Iterator iterator()>();

     label14:
        $z4 = interfaceinvoke $r97.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label24;

        r98 = interfaceinvoke $r97.<java.util.Iterator: java.lang.Object next()>();

        $i3 = i19;

        i19 = i19 + 1;

        i20 = $i3;

        z31 = 0;

        if i20 >= 0 goto label15;

        staticinvoke <kotlin.collections.CollectionsKt: void throwIndexOverflow()>();

     label15:
        r99 = (org.jetbrains.kotlin.ir.declarations.IrValueParameter) r98;

        r100 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer transformer>;

        z32 = 0;

        z33 = 0;

        $r23 = interfaceinvoke r99.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.ir.types.IrType getType()>();

        $r24 = staticinvoke <org.jetbrains.kotlin.ir.types.IrTypesKt: org.jetbrains.kotlin.ir.symbols.IrClassifierSymbol getClassifierOrNull(org.jetbrains.kotlin.ir.types.IrType)>($r23);

        if $r24 == null goto label16;

        $r54 = (org.jetbrains.kotlin.ir.symbols.IrSymbol) $r24;

        $r55 = virtualinvoke r100.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.symbols.IrSymbol bindIfNecessary(org.jetbrains.kotlin.ir.symbols.IrSymbol)>($r54);

        $r56 = (org.jetbrains.kotlin.ir.symbols.IrClassifierSymbol) $r55;

        goto label16;

     label16:
        $r25 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object first(java.util.List)>($r93);

        $r26 = (java.lang.Number) $r25;

        $i4 = virtualinvoke $r26.<java.lang.Number: int intValue()>();

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i20);

        $r28 = interfaceinvoke $r90.<java.util.Map: java.lang.Object get(java.lang.Object)>($r27);

        $r29 = (java.lang.Integer) $r28;

        if $r29 != null goto label17;

        goto label18;

     label17:
        $i5 = virtualinvoke $r29.<java.lang.Integer: int intValue()>();

        if $i4 != $i5 goto label18;

        $r52 = interfaceinvoke r99.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.ir.types.IrType getType()>();

        $z7 = staticinvoke <org.jetbrains.kotlin.ir.util.InlineClassesKt: boolean isInlined(org.jetbrains.kotlin.ir.types.IrType)>($r52);

        if $z7 != 0 goto label18;

        $i6 = $r20.<kotlin.jvm.internal.Ref$IntRef: int element>;

        i22 = $i6;

        $i7 = $i6 + 1;

        $r20.<kotlin.jvm.internal.Ref$IntRef: int element> = $i7;

        interfaceinvoke $r93.<java.util.List: java.lang.Object remove(int)>(0);

        goto label23;

     label18:
        virtualinvoke $r21.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope$parameterInformation$1: void invoke(int)>(i20);

        if i20 <= 0 goto label19;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label19:
        $r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i20);

        $r31 = interfaceinvoke $r90.<java.util.Map: java.lang.Object get(java.lang.Object)>($r30);

        $r32 = (java.lang.Integer) $r31;

        if $r32 == null goto label20;

        goto label21;

     label20:
        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("missing index ");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i20);

        r101 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        z35 = 0;

        $r36 = new java.lang.IllegalStateException;

        $r37 = virtualinvoke r101.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r36.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r37);

        $r38 = (java.lang.Throwable) $r36;

        throw $r38;

     label21:
        i23 = virtualinvoke $r32.<java.lang.Integer: int intValue()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i23);

        $r40 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i23);

        interfaceinvoke $r93.<java.util.List: boolean remove(java.lang.Object)>($r40);

        $r41 = interfaceinvoke r99.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.ir.types.IrType getType()>();

        $z6 = staticinvoke <org.jetbrains.kotlin.ir.util.InlineClassesKt: boolean isInlined(org.jetbrains.kotlin.ir.types.IrType)>($r41);

        if $z6 == 0 goto label22;

        $r42 = interfaceinvoke r99.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.ir.types.IrType getType()>();

        $r43 = staticinvoke <org.jetbrains.kotlin.ir.types.IrTypesKt: org.jetbrains.kotlin.ir.declarations.IrClass getClass(org.jetbrains.kotlin.ir.types.IrType)>($r42);

        if $r43 == null goto label22;

        $r44 = (org.jetbrains.kotlin.ir.declarations.IrDeclarationWithName) $r43;

        $r45 = staticinvoke <org.jetbrains.kotlin.ir.util.IrUtilsKt: org.jetbrains.kotlin.name.FqName getFqNameWhenAvailable(org.jetbrains.kotlin.ir.declarations.IrDeclarationWithName)>($r44);

        if $r45 == null goto label22;

        r102 = $r45;

        z36 = 0;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $r47 = virtualinvoke r102.<org.jetbrains.kotlin.name.FqName: java.lang.String asString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r47, "it.asString()");

        $r48 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformerKt: java.lang.String access$replacePrefix(java.lang.String,java.lang.String,java.lang.String)>($r47, "androidx.compose.", "c#");

        $r49 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformerKt: java.lang.String access$replacePrefix(java.lang.String,java.lang.String,java.lang.String)>($r48, "androidx.ui.", "u#");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r49);

        goto label22;

     label22:
        z29 = 1;

     label23:
        goto label14;

     label24:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        if z29 == 0 goto label25;

        $r103 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r103, "builder.toString()");

        goto label26;

     label25:
        $r103 = "";

     label26:
        return $r103;
    }

    public androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation sourceLocationOf(org.jetbrains.kotlin.ir.IrElement)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope r0;
        org.jetbrains.kotlin.ir.IrElement r1;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope r2;
        boolean $z0, $z1;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope $r3;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation $r4;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        r1 := @parameter0: org.jetbrains.kotlin.ir.IrElement;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "call");

        r2 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope getParent()>();

        $z0 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: boolean isInlinedLambda>;

        if $z0 == 0 goto label1;

        $z1 = r2 instanceof androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope;

        if $z1 == 0 goto label1;

        $r3 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope) r2;

        $r4 = virtualinvoke $r3.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation sourceLocationOf(org.jetbrains.kotlin.ir.IrElement)>(r1);

        goto label2;

     label1:
        $r4 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation sourceLocationOf(org.jetbrains.kotlin.ir.IrElement)>(r1);

     label2:
        return $r4;
    }

    private final java.lang.String callInformation()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope r0;
        org.jetbrains.kotlin.ir.declarations.IrFunction $r1, $r5;
        org.jetbrains.kotlin.name.Name $r2, $r6;
        boolean $z0;
        java.lang.StringBuilder $r3, $r4, $r8, $r9;
        java.lang.String $r7, $r10;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: org.jetbrains.kotlin.ir.declarations.IrFunction function>;

        $r2 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.name.Name getName()>();

        $z0 = virtualinvoke $r2.<org.jetbrains.kotlin.name.Name: boolean isSpecial()>();

        if $z0 != 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("C(");

        $r5 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: org.jetbrains.kotlin.ir.declarations.IrFunction function>;

        $r6 = interfaceinvoke $r5.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.name.Name getName()>();

        $r7 = virtualinvoke $r6.<org.jetbrains.kotlin.name.Name: java.lang.String asString()>();

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r10 = "C";

     label2:
        return $r10;
    }

    public boolean calculateHasSourceInformation(boolean)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope r0;
        boolean z0, $z1, $z2, $z3;
        org.jetbrains.kotlin.ir.declarations.IrFunction $r1, $r3;
        org.jetbrains.kotlin.descriptors.Visibility $r2;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label2;

        $r3 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: org.jetbrains.kotlin.ir.declarations.IrFunction function>;

        $z1 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformerKt: boolean access$isLambda(org.jetbrains.kotlin.ir.declarations.IrFunction)>($r3);

        if $z1 == 0 goto label1;

        $z2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: boolean isInlinedLambda>;

        if $z2 != 0 goto label1;

        $z3 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: boolean calculateHasSourceInformation(boolean)>(z0);

        goto label3;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: org.jetbrains.kotlin.ir.declarations.IrFunction function>;

        $r2 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.descriptors.Visibility getVisibility()>();

        $z3 = virtualinvoke $r2.<org.jetbrains.kotlin.descriptors.Visibility: boolean isPublicAPI()>();

     label3:
        return $z3;
    }

    public java.lang.String calculateSourceInfo(boolean)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope r0;
        boolean z0, $z1, $z2, $z3;
        org.jetbrains.kotlin.ir.declarations.IrFunction $r1, $r8;
        org.jetbrains.kotlin.descriptors.Visibility $r2;
        java.lang.StringBuilder $r3, $r5, $r7, $r9, $r11, $r13, $r14, $r15, $r17;
        java.lang.String $r4, $r6, $r10, $r12, $r16, $r18, $r19;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label4;

        $r8 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: org.jetbrains.kotlin.ir.declarations.IrFunction function>;

        $z2 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformerKt: boolean access$isLambda(org.jetbrains.kotlin.ir.declarations.IrFunction)>($r8);

        if $z2 == 0 goto label1;

        $z3 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: boolean isInlinedLambda>;

        if $z3 != 0 goto label1;

        $r18 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: java.lang.String calculateSourceInfo(boolean)>(z0);

        goto label6;

     label1:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: java.lang.String callInformation()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: java.lang.String parameterInformation()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r19 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: java.lang.String calculateSourceInfo(boolean)>(z0);

        if $r19 == null goto label2;

        goto label3;

     label2:
        $r19 = "";

     label3:
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $r16 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: java.lang.String sourceFileInformation$compose_compiler_hosted()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label6;

     label4:
        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: org.jetbrains.kotlin.ir.declarations.IrFunction function>;

        $r2 = interfaceinvoke $r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.descriptors.Visibility getVisibility()>();

        $z1 = virtualinvoke $r2.<org.jetbrains.kotlin.descriptors.Visibility: boolean isPublicAPI()>();

        if $z1 == 0 goto label5;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: java.lang.String callInformation()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: java.lang.String parameterInformation()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r18 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label6;

     label5:
        $r18 = null;

     label6:
        return $r18;
    }

    public final boolean isComposable()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope r0;
        boolean $z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        $z0 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: boolean isComposable>;

        return $z0;
    }

    public final java.lang.String getNameForTemporary(java.lang.String)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope r0;
        java.lang.String r1, $r10;
        int i0;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        r1 := @parameter0: java.lang.String;

        i0 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: int nextTemporaryIndex()>();

        if r1 == null goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("tmp");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(95);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("tmp");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        return $r10;
    }

    private final java.lang.String packageName()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope r0;
        org.jetbrains.kotlin.ir.declarations.IrDeclarationParent r1, r7;
        org.jetbrains.kotlin.ir.declarations.IrFunction $r2;
        boolean $z0, $z1;
        org.jetbrains.kotlin.ir.declarations.IrDeclaration $r3;
        org.jetbrains.kotlin.ir.declarations.IrPackageFragment $r4;
        org.jetbrains.kotlin.name.FqName $r5;
        java.lang.String $r6;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        $r2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: org.jetbrains.kotlin.ir.declarations.IrFunction function>;

        r7 = interfaceinvoke $r2.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.declarations.IrDeclarationParent getParent()>();

     label1:
        r1 = r7;

        $z0 = r1 instanceof org.jetbrains.kotlin.ir.declarations.IrPackageFragment;

        if $z0 == 0 goto label2;

        $r4 = (org.jetbrains.kotlin.ir.declarations.IrPackageFragment) r7;

        $r5 = interfaceinvoke $r4.<org.jetbrains.kotlin.ir.declarations.IrPackageFragment: org.jetbrains.kotlin.name.FqName getFqName()>();

        $r6 = virtualinvoke $r5.<org.jetbrains.kotlin.name.FqName: java.lang.String asString()>();

        return $r6;

     label2:
        $z1 = r1 instanceof org.jetbrains.kotlin.ir.declarations.IrDeclaration;

        if $z1 == 0 goto label3;

        $r3 = (org.jetbrains.kotlin.ir.declarations.IrDeclaration) r7;

        r7 = interfaceinvoke $r3.<org.jetbrains.kotlin.ir.declarations.IrDeclaration: org.jetbrains.kotlin.ir.declarations.IrDeclarationParent getParent()>();

        goto label4;

     label3:
        goto label5;

     label4:
        goto label1;

     label5:
        return null;
    }

    private final int packageHash()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope r0;
        java.lang.CharSequence r1;
        char c0, c1;
        int i2, $i3, $i4, i6, i7, $i8;
        java.lang.String $r2;
        byte b5;
        boolean z2;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        $r2 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: java.lang.String packageName()>();

        if $r2 == null goto label3;

        b5 = 0;

        i6 = b5;

        r1 = (java.lang.CharSequence) $r2;

        i7 = 0;

     label1:
        $i3 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if i7 >= $i3 goto label2;

        c0 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(i7);

        c1 = c0;

        i2 = i6;

        $i4 = i2 * 31;

        i6 = $i4 + c1;

        i7 = i7 + 1;

        goto label1;

     label2:
        z2 = 0;

        $i8 = staticinvoke <java.lang.Math: int abs(int)>(i6);

        goto label4;

     label3:
        $i8 = 0;

     label4:
        return $i8;
    }

    public final java.lang.String sourceFileInformation$compose_compiler_hosted()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope r0;
        int i0, i1, $i3;
        byte b2;
        boolean z0;
        org.jetbrains.kotlin.ir.declarations.IrFunction $r1, $r6;
        org.jetbrains.kotlin.ir.declarations.IrDeclaration $r2, $r7;
        org.jetbrains.kotlin.ir.declarations.IrFile $r3, $r8;
        java.lang.String $r4, $r9, $r12, $r14;
        java.lang.StringBuilder $r5, $r10, $r11, $r13;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        i0 = specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: int packageHash()>();

        if i0 == 0 goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: org.jetbrains.kotlin.ir.declarations.IrFunction function>;

        $r7 = (org.jetbrains.kotlin.ir.declarations.IrDeclaration) $r6;

        $r8 = staticinvoke <org.jetbrains.kotlin.ir.util.IrUtilsKt: org.jetbrains.kotlin.ir.declarations.IrFile getFile(org.jetbrains.kotlin.ir.declarations.IrDeclaration)>($r7);

        $r9 = staticinvoke <org.jetbrains.kotlin.ir.declarations.IrFileKt: java.lang.String getName(org.jetbrains.kotlin.ir.declarations.IrFile)>($r8);

        $r10 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(35);

        i1 = i0;

        b2 = 36;

        z0 = 0;

        $i3 = staticinvoke <kotlin.text.CharsKt: int checkRadix(int)>(b2);

        $r12 = staticinvoke <java.lang.Integer: java.lang.String toString(int,int)>(i1, $i3);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r12, "java.lang.Integer.toStri\u2026(this, checkRadix(radix))");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r14;

     label1:
        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: org.jetbrains.kotlin.ir.declarations.IrFunction function>;

        $r2 = (org.jetbrains.kotlin.ir.declarations.IrDeclaration) $r1;

        $r3 = staticinvoke <org.jetbrains.kotlin.ir.util.IrUtilsKt: org.jetbrains.kotlin.ir.declarations.IrFile getFile(org.jetbrains.kotlin.ir.declarations.IrDeclaration)>($r2);

        $r4 = staticinvoke <org.jetbrains.kotlin.ir.declarations.IrFileKt: java.lang.String getName(org.jetbrains.kotlin.ir.declarations.IrFile)>($r3);

        return $r4;
    }

    public final org.jetbrains.kotlin.ir.declarations.IrFunction getFunction()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope r0;
        org.jetbrains.kotlin.ir.declarations.IrFunction $r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: org.jetbrains.kotlin.ir.declarations.IrFunction function>;

        return $r1;
    }

    public void <init>(org.jetbrains.kotlin.ir.declarations.IrFunction, androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope r0, r3;
        org.jetbrains.kotlin.ir.declarations.IrFunction r1, $r14, $r17, $r19, $r21, $r23;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r2, $r29, $r32, r47;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, z13, z14, z15, z16, z18, z19, z20, z21, $z23, $z24;
        java.lang.StringBuilder $r4, $r5, $r8;
        org.jetbrains.kotlin.name.Name $r6, $r35, $r39, $r42, $r45;
        java.lang.String $r7, $r9, $r36, $r40, $r43, $r46;
        java.util.LinkedHashMap $r10, $r12;
        java.util.Map $r11, $r13;
        java.util.ArrayList $r15, $r16;
        java.util.List $r18, r48, r49;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13, i14;
        org.jetbrains.kotlin.ir.declarations.IrValueParameter $r20, $r22, $r26, r51, $r55;
        org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin $r24;
        org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin$LOCAL_FUNCTION_FOR_LAMBDA $r25;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrDefaultBitMaskValueImpl $r28;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl $r31;
        java.lang.Object $r34;
        java.lang.CharSequence $r37;
        androidx.compose.compiler.plugins.kotlin.KtxNameConventions $r38, $r41, $r44;
        java.util.Iterator $r50;
        java.util.Collection r53, r54, r57;
        androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue $r56;
        androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue $r58;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        r1 := @parameter0: org.jetbrains.kotlin.ir.declarations.IrFunction;

        r2 := @parameter1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "function");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "transformer");

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fun ");

        $r6 = interfaceinvoke r1.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.name.Name getName()>();

        $r7 = virtualinvoke $r6.<org.jetbrains.kotlin.name.Name: java.lang.String asString()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: void <init>(java.lang.String)>($r9);

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: org.jetbrains.kotlin.ir.declarations.IrFunction function> = r1;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer transformer> = r2;

        z13 = 0;

        $r10 = new java.util.LinkedHashMap;

        specialinvoke $r10.<java.util.LinkedHashMap: void <init>()>();

        $r11 = (java.util.Map) $r10;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: java.util.Map remappedParams> = $r11;

        z14 = 0;

        $r12 = new java.util.LinkedHashMap;

        specialinvoke $r12.<java.util.LinkedHashMap: void <init>()>();

        $r13 = (java.util.Map) $r12;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: java.util.Map paramsToSlots> = $r13;

        r47 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer transformer>;

        z15 = 0;

        z16 = 0;

        r3 = r0;

        $r14 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: org.jetbrains.kotlin.ir.declarations.IrFunction function>;

        z0 = virtualinvoke r47.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: boolean isInlinedLambda(org.jetbrains.kotlin.ir.declarations.IrFunction)>($r14);

        r3.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: boolean isInlinedLambda> = z0;

        z18 = 0;

        $r15 = new java.util.ArrayList;

        specialinvoke $r15.<java.util.ArrayList: void <init>()>();

        r48 = (java.util.List) $r15;

        z19 = 0;

        $r16 = new java.util.ArrayList;

        specialinvoke $r16.<java.util.ArrayList: void <init>()>();

        r49 = (java.util.List) $r16;

        $r17 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: org.jetbrains.kotlin.ir.declarations.IrFunction function>;

        $r18 = interfaceinvoke $r17.<org.jetbrains.kotlin.ir.declarations.IrFunction: java.util.List getValueParameters()>();

        $r50 = interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z1 = interfaceinvoke $r50.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label09;

        $r34 = interfaceinvoke $r50.<java.util.Iterator: java.lang.Object next()>();

        r51 = (org.jetbrains.kotlin.ir.declarations.IrValueParameter) $r34;

        $r35 = interfaceinvoke r51.<org.jetbrains.kotlin.ir.declarations.IrValueParameter: org.jetbrains.kotlin.name.Name getName()>();

        $r36 = virtualinvoke $r35.<org.jetbrains.kotlin.name.Name: java.lang.String asString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r36, "param.name.asString()");

        $r37 = (java.lang.CharSequence) $r36;

        $z4 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.CharSequence,char,boolean,int,java.lang.Object)>($r37, 36, 0, 2, null);

        if $z4 != 0 goto label02;

        $i9 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: int realValueParamCount>;

        i11 = $i9;

        $i10 = $i9 + 1;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: int realValueParamCount> = $i10;

        goto label08;

     label02:
        $r38 = <androidx.compose.compiler.plugins.kotlin.KtxNameConventions: androidx.compose.compiler.plugins.kotlin.KtxNameConventions INSTANCE>;

        $r39 = virtualinvoke $r38.<androidx.compose.compiler.plugins.kotlin.KtxNameConventions: org.jetbrains.kotlin.name.Name getCOMPOSER_PARAMETER()>();

        $r40 = virtualinvoke $r39.<org.jetbrains.kotlin.name.Name: java.lang.String getIdentifier()>();

        $z5 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r36, $r40);

        if $z5 == 0 goto label03;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: org.jetbrains.kotlin.ir.declarations.IrValueParameter composerParameter> = r51;

        goto label08;

     label03:
        $r41 = <androidx.compose.compiler.plugins.kotlin.KtxNameConventions: androidx.compose.compiler.plugins.kotlin.KtxNameConventions INSTANCE>;

        $r42 = virtualinvoke $r41.<androidx.compose.compiler.plugins.kotlin.KtxNameConventions: org.jetbrains.kotlin.name.Name getDEFAULT_PARAMETER()>();

        $r43 = virtualinvoke $r42.<org.jetbrains.kotlin.name.Name: java.lang.String getIdentifier()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r43, "KtxNameConventions.DEFAULT_PARAMETER.identifier");

        $z6 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r36, $r43, 0, 2, null);

        if $z6 == 0 goto label04;

        r53 = (java.util.Collection) r48;

        z20 = 0;

        interfaceinvoke r53.<java.util.Collection: boolean add(java.lang.Object)>(r51);

        goto label08;

     label04:
        $r44 = <androidx.compose.compiler.plugins.kotlin.KtxNameConventions: androidx.compose.compiler.plugins.kotlin.KtxNameConventions INSTANCE>;

        $r45 = virtualinvoke $r44.<androidx.compose.compiler.plugins.kotlin.KtxNameConventions: org.jetbrains.kotlin.name.Name getCHANGED_PARAMETER()>();

        $r46 = virtualinvoke $r45.<org.jetbrains.kotlin.name.Name: java.lang.String getIdentifier()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r46, "KtxNameConventions.CHANGED_PARAMETER.identifier");

        $z7 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r36, $r46, 0, 2, null);

        if $z7 == 0 goto label05;

        r54 = (java.util.Collection) r49;

        z21 = 0;

        interfaceinvoke r54.<java.util.Collection: boolean add(java.lang.Object)>(r51);

        goto label08;

     label05:
        $z8 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r36, "$anonymous$parameter", 0, 2, null);

        if $z8 == 0 goto label06;

        goto label08;

     label06:
        $z9 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r36, "$name$for$destructuring", 0, 2, null);

        if $z9 == 0 goto label07;

        goto label08;

     label07:
        $z10 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r36, "$noName_", 0, 2, null);

        if $z10 == 0 goto label08;

        goto label08;

     label08:
        goto label01;

     label09:
        $i0 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: int realValueParamCount>;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: int slotCount> = $i0;

        $r19 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: org.jetbrains.kotlin.ir.declarations.IrFunction function>;

        $r20 = interfaceinvoke $r19.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.declarations.IrValueParameter getExtensionReceiverParameter()>();

        if $r20 == null goto label10;

        $i7 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: int slotCount>;

        i12 = $i7;

        $i8 = $i7 + 1;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: int slotCount> = $i8;

     label10:
        $r21 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: org.jetbrains.kotlin.ir.declarations.IrFunction function>;

        $r22 = interfaceinvoke $r21.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.declarations.IrValueParameter getDispatchReceiverParameter()>();

        if $r22 == null goto label11;

        $i5 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: int slotCount>;

        i13 = $i5;

        $i6 = $i5 + 1;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: int slotCount> = $i6;

        goto label12;

     label11:
        $r23 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: org.jetbrains.kotlin.ir.declarations.IrFunction function>;

        $r24 = interfaceinvoke $r23.<org.jetbrains.kotlin.ir.declarations.IrFunction: org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin getOrigin()>();

        $r25 = <org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin$LOCAL_FUNCTION_FOR_LAMBDA: org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin$LOCAL_FUNCTION_FOR_LAMBDA INSTANCE>;

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r24, $r25);

        if $z2 == 0 goto label12;

        $i3 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: int slotCount>;

        i14 = $i3;

        $i4 = $i3 + 1;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: int slotCount> = $i4;

     label12:
        $r55 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: org.jetbrains.kotlin.ir.declarations.IrValueParameter composerParameter>;

        if $r55 == null goto label13;

        $r31 = new androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl;

        $r32 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer transformer>;

        $i2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: int slotCount>;

        specialinvoke $r31.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrChangedBitMaskValueImpl: void <init>(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,java.util.List,int)>($r32, r49, $i2);

        $r56 = (androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue) $r31;

        goto label14;

     label13:
        $r56 = null;

     label14:
        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue changedParameter> = $r56;

        r57 = (java.util.Collection) r48;

        $z3 = interfaceinvoke r57.<java.util.Collection: boolean isEmpty()>();

        if $z3 != 0 goto label15;

        $z23 = 1;

        goto label16;

     label15:
        $z23 = 0;

     label16:
        if $z23 == 0 goto label17;

        $r28 = new androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrDefaultBitMaskValueImpl;

        $r29 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer transformer>;

        $i1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: int realValueParamCount>;

        specialinvoke $r28.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$IrDefaultBitMaskValueImpl: void <init>(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,java.util.List,int)>($r29, r48, $i1);

        $r58 = (androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue) $r28;

        goto label18;

     label17:
        $r58 = null;

     label18:
        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue defaultParameter> = $r58;

        $r26 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: org.jetbrains.kotlin.ir.declarations.IrValueParameter composerParameter>;

        if $r26 == null goto label19;

        $z24 = 1;

        goto label20;

     label19:
        $z24 = 0;

     label20:
        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: boolean isComposable> = $z24;

        return;
    }

androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$LoopScope
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$LoopScope: org.jetbrains.kotlin.ir.expressions.IrLoop loop>
    public androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation sourceLocationOf(org.jetbrains.kotlin.ir.IrElement)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$LoopScope r0;
        org.jetbrains.kotlin.ir.IrElement r1;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation $r2;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$LoopScope;

        r1 := @parameter0: org.jetbrains.kotlin.ir.IrElement;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "call");

        $r2 = new androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation;

        specialinvoke $r2.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation: void <init>(org.jetbrains.kotlin.ir.IrElement,boolean)>(r1, 1);

        return $r2;
    }

    public final org.jetbrains.kotlin.ir.expressions.IrLoop getLoop()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$LoopScope r0;
        org.jetbrains.kotlin.ir.expressions.IrLoop $r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$LoopScope;

        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$LoopScope: org.jetbrains.kotlin.ir.expressions.IrLoop loop>;

        return $r1;
    }

    public void <init>(org.jetbrains.kotlin.ir.expressions.IrLoop)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$LoopScope r0;
        org.jetbrains.kotlin.ir.expressions.IrLoop r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$LoopScope;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrLoop;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "loop");

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: void <init>(java.lang.String)>("loop");

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$LoopScope: org.jetbrains.kotlin.ir.expressions.IrLoop loop> = r1;

        return;
    }

androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$ParametersScope
    public void <init>()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$ParametersScope r0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$ParametersScope;

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: void <init>(java.lang.String)>("parameters");

        return;
    }

androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$PropertyScope
    public void <init>(org.jetbrains.kotlin.name.Name)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$PropertyScope r0;
        org.jetbrains.kotlin.name.Name r1;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String $r4, $r6;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$PropertyScope;

        r1 := @parameter0: org.jetbrains.kotlin.name.Name;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "name");

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("val ");

        $r4 = virtualinvoke r1.<org.jetbrains.kotlin.name.Name: java.lang.String asString()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: void <init>(java.lang.String,kotlin.jvm.internal.DefaultConstructorMarker)>($r6, null);

        return;
    }

androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$RootScope
    public void <init>()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$RootScope r0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$RootScope;

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: void <init>(java.lang.String,kotlin.jvm.internal.DefaultConstructorMarker)>("<root>", null);

        return;
    }

androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation: boolean used>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation: org.jetbrains.kotlin.ir.IrElement element>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation: boolean repeatable>
    public final boolean getUsed()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation r0;
        boolean $z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation;

        $z0 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation: boolean used>;

        return $z0;
    }

    public final void markUsed()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation r0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation: boolean used> = 1;

        return;
    }

    public final org.jetbrains.kotlin.ir.IrElement getElement()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation r0;
        org.jetbrains.kotlin.ir.IrElement $r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation;

        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation: org.jetbrains.kotlin.ir.IrElement element>;

        return $r1;
    }

    public final boolean getRepeatable()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation r0;
        boolean $z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation;

        $z0 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation: boolean repeatable>;

        return $z0;
    }

    public void <init>(org.jetbrains.kotlin.ir.IrElement, boolean)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation r0;
        org.jetbrains.kotlin.ir.IrElement r1;
        boolean z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation;

        r1 := @parameter0: org.jetbrains.kotlin.ir.IrElement;

        z0 := @parameter1: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "element");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation: org.jetbrains.kotlin.ir.IrElement element> = r1;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation: boolean repeatable> = z0;

        return;
    }

    public void <init>(org.jetbrains.kotlin.ir.IrElement, boolean, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation r0;
        org.jetbrains.kotlin.ir.IrElement r1;
        int i0, $i1;
        kotlin.jvm.internal.DefaultConstructorMarker r2;
        boolean z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation;

        r1 := @parameter0: org.jetbrains.kotlin.ir.IrElement;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        r2 := @parameter3: kotlin.jvm.internal.DefaultConstructorMarker;

        $i1 = i0 & 2;

        if $i1 == 0 goto label1;

        z0 = 0;

     label1:
        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$SourceLocation: void <init>(org.jetbrains.kotlin.ir.IrElement,boolean)>(r1, z0);

        return;
    }

androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$WhenScope
    public void <init>()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$WhenScope r0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$WhenScope;

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope: void <init>(java.lang.String)>("when");

        return;
    }

androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope parent>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: int level>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: java.lang.String name>
    public final androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope getParent()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope r0, $r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope;

        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope parent>;

        return $r1;
    }

    public final void setParent(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope r0, r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope;

        r1 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope parent> = r1;

        return;
    }

    public final int getLevel()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope r0;
        int $i0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope;

        $i0 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: int level>;

        return $i0;
    }

    public final void setLevel(int)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope r0;
        int i0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope;

        i0 := @parameter0: int;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: int level> = i0;

        return;
    }

    public boolean isInComposable()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope r0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope;

        return 0;
    }

    public androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope getFunctionScope()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope r0, $r1;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope $r2;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope;

        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope parent>;

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope getFunctionScope()>();

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FileScope getFileScope()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope r0, $r1;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FileScope $r2;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope;

        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope parent>;

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FileScope getFileScope()>();

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public org.jetbrains.kotlin.ir.declarations.IrValueParameter getNearestComposer()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope r0, $r1;
        org.jetbrains.kotlin.ir.declarations.IrValueParameter $r2;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope;

        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope parent>;

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: org.jetbrains.kotlin.ir.declarations.IrValueParameter getNearestComposer()>();

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public final java.lang.String getName()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope r0;
        java.lang.String $r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope;

        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: java.lang.String name>;

        return $r1;
    }

    private void <init>(java.lang.String)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope r0;
        java.lang.String r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: java.lang.String name> = r1;

        return;
    }

    public void <init>(java.lang.String, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope r0;
        java.lang.String r1;
        kotlin.jvm.internal.DefaultConstructorMarker $r2;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope;

        r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope: void <init>(java.lang.String)>(r1);

        return;
    }

androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$SourceInfoFixup
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$SourceInfoFixup: org.jetbrains.kotlin.ir.expressions.IrCall call>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$SourceInfoFixup: int index>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$SourceInfoFixup: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope scope>
    public final org.jetbrains.kotlin.ir.expressions.IrCall getCall()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$SourceInfoFixup r0;
        org.jetbrains.kotlin.ir.expressions.IrCall $r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$SourceInfoFixup;

        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$SourceInfoFixup: org.jetbrains.kotlin.ir.expressions.IrCall call>;

        return $r1;
    }

    public final int getIndex()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$SourceInfoFixup r0;
        int $i0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$SourceInfoFixup;

        $i0 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$SourceInfoFixup: int index>;

        return $i0;
    }

    public final androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope getScope()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$SourceInfoFixup r0;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope $r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$SourceInfoFixup;

        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$SourceInfoFixup: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope scope>;

        return $r1;
    }

    public void <init>(org.jetbrains.kotlin.ir.expressions.IrCall, int, androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$SourceInfoFixup r0;
        org.jetbrains.kotlin.ir.expressions.IrCall r1;
        int i0;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope r2;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$SourceInfoFixup;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrCall;

        i0 := @parameter1: int;

        r2 := @parameter2: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "call");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "scope");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$SourceInfoFixup: org.jetbrains.kotlin.ir.expressions.IrCall call> = r1;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$SourceInfoFixup: int index> = i0;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$SourceInfoFixup: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$BlockScope scope> = r2;

        return;
    }

androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitBreakContinue$1
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitBreakContinue$1: org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase $endBlock>
    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitBreakContinue$1 r0;
        java.lang.Object r1;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitBreakContinue$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r1;

        virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitBreakContinue$1: void invoke(org.jetbrains.kotlin.ir.expressions.IrExpression)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

    public final void invoke(org.jetbrains.kotlin.ir.expressions.IrExpression)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitBreakContinue$1 r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression r1;
        org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase $r2;
        java.util.List $r3;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitBreakContinue$1;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrExpression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        $r2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitBreakContinue$1: org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase $endBlock>;

        $r3 = virtualinvoke $r2.<org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase: java.util.List getStatements()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    void <init>(org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitBreakContinue$1 r0;
        org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitBreakContinue$1;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitBreakContinue$1: org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase $endBlock> = r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitNonRestartableComposableFunction$2
    public volatile java.lang.Object invoke()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitNonRestartableComposableFunction$2 r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitNonRestartableComposableFunction$2;

        $r1 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitNonRestartableComposableFunction$2: org.jetbrains.kotlin.ir.expressions.IrExpression invoke()>();

        return $r1;
    }

    public final org.jetbrains.kotlin.ir.expressions.IrExpression invoke()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitNonRestartableComposableFunction$2 r0;
        java.lang.Object $r1;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer $r2;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r3;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitNonRestartableComposableFunction$2;

        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitNonRestartableComposableFunction$2: java.lang.Object receiver>;

        $r2 = (androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer) $r1;

        $r3 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression access$irEndReplaceableGroup(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer)>($r2);

        return $r3;
    }

    void <init>(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitNonRestartableComposableFunction$2 r0;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitNonRestartableComposableFunction$2;

        r1 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        specialinvoke r0.<kotlin.jvm.internal.FunctionReferenceImpl: void <init>(int,java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int)>(0, r1, class "Landroidx/compose/compiler/plugins/kotlin/lower/ComposableFunctionBodyTransformer;", "irEndReplaceableGroup", "irEndReplaceableGroup()Lorg/jetbrains/kotlin/ir/expressions/IrExpression;", 0);

        return;
    }

androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitRestartableComposableFunction$end$1
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitRestartableComposableFunction$end$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitRestartableComposableFunction$end$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope $scope>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitRestartableComposableFunction$end$1: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue $changedParam>
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitRestartableComposableFunction$end$1: androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue $defaultParam>
    public volatile java.lang.Object invoke()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitRestartableComposableFunction$end$1 r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitRestartableComposableFunction$end$1;

        $r1 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitRestartableComposableFunction$end$1: org.jetbrains.kotlin.ir.expressions.IrExpression invoke()>();

        return $r1;
    }

    public final org.jetbrains.kotlin.ir.expressions.IrExpression invoke()
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitRestartableComposableFunction$end$1 r0;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope $r1, $r3;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer $r2;
        androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue $r4;
        androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue $r5;
        int $i0;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r6;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitRestartableComposableFunction$end$1;

        $r2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitRestartableComposableFunction$end$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0>;

        $r3 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitRestartableComposableFunction$end$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope $scope>;

        $r4 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitRestartableComposableFunction$end$1: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue $changedParam>;

        $r5 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitRestartableComposableFunction$end$1: androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue $defaultParam>;

        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitRestartableComposableFunction$end$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope $scope>;

        $i0 = virtualinvoke $r1.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope: int getRealValueParamCount()>();

        $r6 = staticinvoke <androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer: org.jetbrains.kotlin.ir.expressions.IrExpression access$irEndRestartGroupAndUpdateScope(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer,androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope,androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue,androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue,int)>($r2, $r3, $r4, $r5, $i0);

        return $r6;
    }

    void <init>(androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer, androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope, androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue, androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitRestartableComposableFunction$end$1 r0;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer r1;
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope r2;
        androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue r3;
        androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue r4;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitRestartableComposableFunction$end$1;

        r1 := @parameter0: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer;

        r2 := @parameter1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope;

        r3 := @parameter2: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue;

        r4 := @parameter3: androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitRestartableComposableFunction$end$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer this$0> = r1;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitRestartableComposableFunction$end$1: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$Scope$FunctionScope $scope> = r2;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitRestartableComposableFunction$end$1: androidx.compose.compiler.plugins.kotlin.lower.IrChangedBitMaskValue $changedParam> = r3;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitRestartableComposableFunction$end$1: androidx.compose.compiler.plugins.kotlin.lower.IrDefaultBitMaskValue $defaultParam> = r4;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitReturn$1
<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitReturn$1: org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase $endBlock>
    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitReturn$1 r0;
        java.lang.Object r1;
        org.jetbrains.kotlin.ir.expressions.IrExpression $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitReturn$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.jetbrains.kotlin.ir.expressions.IrExpression) r1;

        virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitReturn$1: void invoke(org.jetbrains.kotlin.ir.expressions.IrExpression)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

    public final void invoke(org.jetbrains.kotlin.ir.expressions.IrExpression)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitReturn$1 r0;
        org.jetbrains.kotlin.ir.expressions.IrExpression r1;
        org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase $r2;
        java.util.List $r3;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitReturn$1;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.IrExpression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        $r2 = r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitReturn$1: org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase $endBlock>;

        $r3 = virtualinvoke $r2.<org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase: java.util.List getStatements()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    void <init>(org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase)
    {
        androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitReturn$1 r0;
        org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitReturn$1;

        r1 := @parameter0: org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase;

        r0.<androidx.compose.compiler.plugins.kotlin.lower.ComposableFunctionBodyTransformer$visitReturn$1: org.jetbrains.kotlin.ir.expressions.impl.IrContainerExpressionBase $endBlock> = r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

