androidx.test.espresso.screenshot.ImageCaptureViewAction
<androidx.test.espresso.screenshot.ImageCaptureViewAction: androidx.test.espresso.core.internal.deps.guava.util.concurrent.SettableFuture bitmapFuture>
    public java.lang.String getDescription()
    {
        kotlin.jvm.internal.StringCompanionObject $r0;
        java.lang.Object[] $r1, $r3;
        java.util.Locale $r2;
        androidx.test.espresso.screenshot.ImageCaptureViewAction r4;
        java.lang.String r5;

        r4 := @this: androidx.test.espresso.screenshot.ImageCaptureViewAction;

        $r0 = <kotlin.jvm.internal.StringCompanionObject: kotlin.jvm.internal.StringCompanionObject INSTANCE>;

        $r2 = <java.util.Locale: java.util.Locale ROOT>;

        $r1 = newarray (java.lang.Object)[0];

        $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, 0);

        r5 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r2, "capture view to image", $r3);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r5, "format(locale, format, *args)");

        return r5;
    }

    public org.hamcrest.Matcher getConstraints()
    {
        androidx.test.espresso.screenshot.ImageCaptureViewAction r0;
        org.hamcrest.Matcher r1;

        r0 := @this: androidx.test.espresso.screenshot.ImageCaptureViewAction;

        r1 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher any(java.lang.Class)>(class "Landroid/view/View;");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r1, "any(View::class.java)");

        return r1;
    }

    public void <init>(androidx.test.espresso.core.internal.deps.guava.util.concurrent.SettableFuture)
    {
        androidx.test.espresso.screenshot.ImageCaptureViewAction r0;
        androidx.test.espresso.core.internal.deps.guava.util.concurrent.SettableFuture r1;

        r0 := @this: androidx.test.espresso.screenshot.ImageCaptureViewAction;

        r1 := @parameter0: androidx.test.espresso.core.internal.deps.guava.util.concurrent.SettableFuture;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "bitmapFuture");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.test.espresso.screenshot.ImageCaptureViewAction: androidx.test.espresso.core.internal.deps.guava.util.concurrent.SettableFuture bitmapFuture> = r1;

        return;
    }

    public void perform(androidx.test.espresso.UiController, android.view.View)
    {
        androidx.test.espresso.screenshot.ImageCaptureViewAction r0;
        androidx.test.espresso.UiController r1;
        android.view.View r2;
        androidx.test.espresso.core.internal.deps.guava.util.concurrent.SettableFuture $r3;
        com.google.common.util.concurrent.ListenableFuture $r4;

        r0 := @this: androidx.test.espresso.screenshot.ImageCaptureViewAction;

        r1 := @parameter0: androidx.test.espresso.UiController;

        r2 := @parameter1: android.view.View;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "uiController");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "view");

        interfaceinvoke r1.<androidx.test.espresso.UiController: void loopMainThreadUntilIdle()>();

        $r3 = r0.<androidx.test.espresso.screenshot.ImageCaptureViewAction: androidx.test.espresso.core.internal.deps.guava.util.concurrent.SettableFuture bitmapFuture>;

        $r4 = staticinvoke <androidx.test.core.view.ViewCapture: com.google.common.util.concurrent.ListenableFuture captureToBitmap(android.view.View)>(r2);

        virtualinvoke $r3.<androidx.test.espresso.core.internal.deps.guava.util.concurrent.SettableFuture: boolean setFuture(com.google.common.util.concurrent.ListenableFuture)>($r4);

        return;
    }

